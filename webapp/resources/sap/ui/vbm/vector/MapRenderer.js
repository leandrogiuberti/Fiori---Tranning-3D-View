sap.ui.define(["../lib/sapvbi","../lib/sapvobase","../lib/sapactions","../VBIRenderer","./VectorUtils","./thirdparty/MaplibreStyles","./PayloadGenerator","./RectangularSelection","./LassoSelection","./SAPNavControl","./SAPAutomationManager","sap/ui/core/Lib","./thirdparty/maplibregl","./VBITransformer"],function(e,t,o,r,n,s,a,i,l,p,c,d){"use strict";t={};VBI.MapRenderer={};o={};var u="";let m=[];let g=[];let f=false;let y=false;let b={};let h={};let I={};VBI.MapRenderer.name=undefined;let v=0;let B;var V;let C=null;let L=null;VBI.MapRenderer.setAdapter=e=>{this._adapter=e;this._payloadGenerator=new a(this._adapter)};VBI.MapRenderer._processGeoSpot=(e,t)=>{};VBI.MapRenderer._processGeoRoutes=(e,t)=>{};VBI.MapRenderer.renderMap=()=>{if(this.map){C=this.map.getCenter();L=this.map.getZoom();this.map.remove()}let e=VBI.VBITransformer.getTransformedJSON();u=r.getId();var t=document.createElement("style");t.textContent=s.loadStyles();document.head.appendChild(t);const o=n.createMap(e,u);o.doubleClickZoom.disable();if(C&&L!==null){o.jumpTo({center:[C.lng,C.lat],zoom:L})}const d=o.getCanvasContainer();const B=new i(o);const R=new l(o);const w=o.getCanvas();const D=new maplibregl.Popup({closeButton:false,closeOnClick:false});w.id=n._setcanvasid();d.addEventListener("mousedown",e=>B.mouseDown(e,this.Rpressed),true);d.addEventListener("mousedown",e=>R.mouseDown(e,this.Apressed),true);o.touchZoomRotate.enable();this.map=o;o.on("load",()=>{o.getCanvas().style.cursor="default";o.on("mouseup",function(){o.getCanvas().style.cursor="default"});o.getCanvas().addEventListener("mousemove",function(){o.getCanvas().style.cursor="default"});if(VBI.mapFlags.isLegendExists){VBI.VBITransformer._createLegend(u)}
// Custom attribution/copyright control
o.addControl(new maplibregl.AttributionControl({customAttribution:"<span>"+e[0].copyright+"</span>",compact:false}));var t=new maplibregl.ScaleControl({maxWidth:80,unit:e[0].scaleType});if(VBI.mapFlags.scaleVisible){o.addControl(t)}else if(!VBI.mapFlags.scaleVisible&&o.hasControl(t)){o.removeControl(t)}o.addSource("geojson-source",{type:"geojson",data:e[1]});let r=new p(VBI.mapFlags.moveDisable,VBI.mapFlags.zoomDisable);if(VBI.mapFlags.navControlVisible){o.addControl(r,"top-left")}else if(!VBI.mapFlags.navControlVisible&&o.hasControl(r)){o.removeControl(r)}const s=new maplibregl.Popup({closeButton:false,closeOnClick:false,offset:{top:[0,0],bottom:[0,-25]}});const i=[];e[1].features.forEach(e=>{let t=e.geometry.coordinates;if(e.geometry.type==="Point"){let r=n.createSpotElement(e,v);const p=r.spotEl;v=r.spotId;if(e.properties.Label){const w=n.createMarkerLabel(e.properties.Label,e.properties.LabelBGColor);p.appendChild(w)}if(e.properties.Icon){const D=e.properties.contentColor?e.properties.contentColor:"#000000";const M=n.createIconElement(e.properties.Icon,D);M.id="__mapspot"+v++;p.appendChild(M)}let c=new maplibregl.Marker({element:p,draggable:true,anchor:"bottom"}).setLngLat(e.geometry.coordinates).on("dragend",B).addTo(o);let d=c.getLngLat();c.customProperties={Key:e.properties.Key};g.push(c);function b(e){let t=Infinity,o=Infinity;let r=-Infinity,n=-Infinity;e.features.forEach(e=>{const s=e.properties.GeoPosition;const a=s.split(";").slice(0,2).map(Number);const i=a[0];const l=a[1];if(i<t)t=i;if(i>r)r=i;if(l<o)o=l;if(l>n)n=l});return{minLon:t,minLat:o,maxLon:r,maxLat:n}}function h(e,t,o=.05){const[r,n]=[parseFloat(e.lng),parseFloat(e.lat)];return r>=t.minLon-o&&r<=t.maxLon+o&&n>=t.minLat-o&&n<=t.maxLat+o}function I(e,t,o=.05){let r=b(t);if(!h(e,r,o=.05)){return null}let n=t.features.filter(e=>{const t=e.properties.GeoPosition;const o=t.split(";").slice(0,2).map(Number);return h({lng:o[0],lat:o[1]},r)});return n.length>0?n:null}VBI.MapRenderer.findNearestSpot=(e,t)=>{let o=null;let r=1e5;if(!Array.isArray(e)){e=[parseFloat(e.lng),parseFloat(e.lat)]}t.forEach(t=>{const n=t.properties.GeoPosition;const s=n.split(";").slice(0,2).map(Number);let a=VBI.MapRenderer.haversineDistance(e,s);if(a<r){r=a;o=t}});return o};VBI.MapRenderer.haversineDistance=(e,t)=>{const o=6371e3;const r=e[0];const n=e[1];const s=t[0];const a=t[1];const i=VBI.MapRenderer.toRad(s-r);const l=VBI.MapRenderer.toRad(a-n);const p=Math.sin(i/2)*Math.sin(i/2)+Math.cos(VBI.MapRenderer.toRad(r))*Math.cos(VBI.MapRenderer.toRad(s))*Math.sin(l/2)*Math.sin(l/2);const c=2*Math.atan2(Math.sqrt(p),Math.sqrt(1-p));return o*c};VBI.MapRenderer.toRad=e=>e*Math.PI/180;function B(e){o.getCanvas().style.cursor="default";let t=[];let r=[];const n=e.target.customProperties;const s=e.target._lngLat;try{const e=o.queryRenderedFeatures({layers:["geojson-source-point"]});e.forEach((e,t)=>{if(e.properties&&typeof e.properties.Key!=="undefined"){console.log(`Feature ${t} key:`,e.properties.Key)}else{console.log(`Feature ${t} without key:`,e)}});const c=e.find(e=>{if(e.properties){console.log("Checking feature:",e.properties.Key);return String(e.properties.Key)===String(n.Key)}return false});console.log("dragInstance:",c);if(VBI.VBITransformer&&Array.isArray(VBI.VBITransformer.VisualObjs)){const e=VBI.VBITransformer.VisualObjs.find(e=>e.type===c.properties.type);if(e&&e.DragSource&&e.DragSource.DragItem){if(Array.isArray(e.DragSource.DragItem)){t=e.DragSource.DragItem.map(e=>e.type)}else{t=[e.DragSource.DragItem.type]}}else{t=[]}}else{console.error("VBITransformer.VisualObjs is undefined or not an array.")}console.log("Extracted dragItems:",t);var i=VBI.MapRenderer.findNearestSpot(s,e);console.log("Nearest Spot:",i);if(!i){var l=o.queryRenderedFeatures(s,{layers:["geojson-source-route"]});i=VBI.MapRenderer.findNearestSpot(s,l)}const d={type:"FeatureCollection",features:[c,i]};const m=d.features;if(VBI.VBITransformer&&Array.isArray(VBI.VBITransformer.VisualObjs)){const e=VBI.VBITransformer.VisualObjs.find(e=>e.type===i.properties.type);if(e&&e.DropTarget&&e.DropTarget.DropItem){if(Array.isArray(e.DropTarget.DropItem)){r=e.DropTarget.DropItem.map(e=>e.type)}else{r=[e.DropTarget.DropItem.type]}}else{r=[]}}else{console.error("VBITransformer.VisualObjs is undefined or not an array.")}console.log("Extracted dropItems:",r);const g=Array.isArray(t)&&t.some(e=>r.includes(e));console.log("dragItems:",t);console.log("dropItems:",r);console.log("validDrop:",g);if(g){o.getCanvas().style.cursor="copy"}else{o.getCanvas().style.cursor="not-allowed"}if(g){var p=VBI.VBITransformer.findObject(c.properties.type);var u=VBI.VBITransformer.findObject(i.properties.type);a.triggerPayloaddnd(p,u,c,i,V)}}catch(e){console.error("Error in onDragEnd:",e)}const m=c.getLngLat();if(m.lng!==0&&m.lat!==0){c.setLngLat(d)}o.getCanvas().style.cursor="default"}function C(){return new Promise(e=>{o.once("click",function(t){e(t.lngLat)})})}p.addEventListener("mouseenter",()=>{if(f){y=true;if(!S.Apressed&&!S.Rpressed){p.style.cursor="copy"}}else{if(!S.Apressed&&!S.Rpressed){p.style.cursor="pointer"}if(S.Apressed||S.Rpressed){p.style.cursor="crosshair"}else{function t(e,t,o){if(!document.getElementById("custom-maplibre-tooltip-style")){const e=document.createElement("style");e.id="custom-maplibre-tooltip-style";e.innerHTML=`\n                                            .maplibregl-popup {\n                                                background: transparent !important;\n                                                box-shadow: none !important;\n                                                padding: 0 !important;\n                                                width: auto;\n                                            }\n                                            .maplibregl-popup-content {\n                                                background: transparent !important;\n                                                padding: 0 !important;\n                                                box-shadow: none !important;\n                                                border-radius: 0 !important;\n                                                width: auto;\n                                            }\n                                        `;document.head.appendChild(e)}const r=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches;const n="none";const s=r?"#545555":"#f0f0f0";const a=r?"white":"f0f0f0";const i=e.properties.ToolTip.replace(/\n/g,"<br>");const l=`\n\n\t\t\t\t\t\t\t\t<div style="\n\t\t\t\t\t\t\t      background-color: ${s};\n\t\t\t\t\t\t\t\t  color: ${a};\n                                  padding: 8px;\n                                  border-radius: 6px;\n                                  max-height: 180px;\n                                  display: inline-block;\n                                  font-family: Arial;\n                                  font-size: 0.875rem;\n                                  width: auto;\n                                  white-space: nowrap;\n                                  border: 2px solid ${n};\n                                  ">\n                                  ${i}\n                                  </div>`;t.setLngLat(e.geometry.coordinates).setHTML(l).addTo(o)}t(e,s,o);window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",()=>{s.remove();t(e,s,o)})}}});async function L(t,o){let r=null;if(o==="DETAIL_REQUEST"){r=await C()}else{r={lng:e.geometry.coordinates[0],lat:e.geometry.coordinates[1]}}const s=n.GetEventVPCoordsObj(t,u);e.properties.x=s.x;e.properties.y=s.y;a.objectClick("Spot",o,e,r)}p.addEventListener("dblclick",e=>{L(e,"DOUBLE_CLICK")});p.addEventListener("click",e=>{L(e,"DETAIL_REQUEST")});p.oncontextmenu=e=>{L(e,"CONTEXT_MENU_REQUEST")};p.addEventListener("mouseleave",()=>{if(!S.Apressed&&!S.Rpressed){o.getCanvas().style.cursor=""}s.remove();y=false});let R=m.some(e=>e[0]===t[0]&&e[1]===t[1]);if(!R){m.push(t)}}else if(e.geometry.type=="LineString"){if(e.properties.Label){const P=l(e.geometry.coordinates);const F=n.createRouteLabel(e.properties.Label,e.properties.LabelBGColor);new maplibregl.Marker({element:F,anchor:"left"}).setLngLat(P).addTo(o)}const T=e.geometry.coordinates;const A=T[0];const E=T[T.length-1];const j=n.calculateBearing(A,E);const x=n.normalizeAngle(90+j);const k=j>90?n.normalizeAngle(270+j):n.normalizeAngle(90-j);if(T.length>1){const _={type:"Feature",geometry:{type:"Point",coordinates:T[0]},properties:{Color:e.properties.Color,BorderColor:e.properties.BorderColor,arrowRotation:x,size:.07*parseFloat(e.properties.LineWidth),borderSize:.07*(parseFloat(e.properties.LineWidth)+1)}};const O={type:"Feature",geometry:{type:"Point",coordinates:T[T.length-1]},properties:{Color:e.properties.Color,BorderColor:e.properties.BorderColor,arrowRotation:k,size:.07*parseFloat(e.properties.LineWidth),borderSize:.07*(parseFloat(e.properties.LineWidth)+1)}};if(e.properties.StartStyle==="1"){i.push(_)}if(e.properties.EndStyle==="1"){i.push(O)}}}});if(VBI.mapFlags.automations){let e=new c(o,maplibregl.LngLatBounds);e.load(VBI.mapFlags.automations)}o.addLayer({id:"geojson-source-point",type:"circle",source:"geojson-source",paint:{"circle-opacity":0},filter:["==","$type","Point"]});o.addLayer({id:"geojson-source-route-border",type:"line",source:"geojson-source",layout:{"line-join":"round","line-cap":"butt"},paint:{"line-color":["get","BorderColor"],"line-width":["get","BorderWidth"]},filter:["==","$type","LineString"]});o.addLayer({id:"geojson-source-route",type:"line",source:"geojson-source",layout:{"line-join":"round","line-cap":"butt"},paint:{"line-color":["get","Color"],"line-width":["get","LineWidth"]},filter:["==","$type","LineString"]});function l(e){if(e.length<2)return e[0];const t=e[0];const o=e[e.length-1];const r=(t[0]+o[0])/2;const n=(t[1]+o[1])/2;return[r,n]}const d={type:"FeatureCollection",features:i};o.addSource("line-end-points",{type:"geojson",data:d});n.getArrowHead(e=>{o.addImage("arrow-icon",e,{sdf:true});o.addLayer({id:"route-end-arrows-border",type:"symbol",source:"line-end-points",layout:{"icon-image":"arrow-icon","icon-size":["get","borderSize"],"icon-allow-overlap":true,"icon-rotation-alignment":"map","icon-rotate":["get","arrowRotation"]},paint:{"icon-color":["get","BorderColor"]}});o.addLayer({id:"route-end-arrows",type:"symbol",source:"line-end-points",layout:{"icon-image":"arrow-icon","icon-size":["get","size"],"icon-allow-overlap":true,"icon-rotation-alignment":"map","icon-rotate":["get","arrowRotation"]},paint:{"icon-color":["get","Color"]}})})});o.on("mouseenter","geojson-source-route",function(e){if(!S.Apressed&&!S.Rpressed){o.getCanvas().style.cursor="pointer"}if(!document.getElementById("custom-maplibre-tooltip-style")){const e=document.createElement("style");e.id="custom-maplibre-tooltip-style";e.innerHTML=`\n                                            .maplibregl-popup {\n                                                background: transparent !important;\n                                                box-shadow: none !important;\n                                                padding: 0 !important;\n                                                width: auto;\n                                            }\n                                            .maplibregl-popup-content {\n                                                background: transparent !important;\n                                                padding: 0 !important;\n                                                box-shadow: none !important;\n                                                border-radius: 0 !important;\n                                                width: auto;\n                                            } `;document.head.appendChild(e)}const t=window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches;const r="none";const n=t?"#545555":"#f0f0f0";const s=t?"white":"f0f0f0";const a=e.lngLat;const i=e.features[0].properties.ToolTip||"";const l=i.replace(/\n/g,"<br>");const p=` <div style="\n\t\t\t                      background-color: ${n};\n                                  color: ${s};\n                                  padding: 8px;\n                                  border-radius: 6px;\n                                  max-height: 180px;\n                                  display: inline-block;\n                                  font-family: Arial;\n                                  font-size: 0.875rem;\n                                  width: auto;\n                                  white-space: nowrap;\n                                  border: 2px solid ${r};\n                                  ">\n                                  ${l}\n                                  </div> `;D.setLngLat(a).setHTML(p).addTo(o)});o.on("mouseleave","geojson-source-route",function(){if(!S.Apressed&&!S.Rpressed){o.getCanvas().style.cursor=""}D.remove()});o.on("click","geojson-source-route",function(e){M(e,"DETAIL_REQUEST")});function M(e,t){const r=e.offsetX;const s=e.offsetY;const i=o.unproject([r,s]);const l=i;const p=n.GetEventVPCoordsObj(e,u);var c=e.features[0];c.properties.x=p.x;c.properties.y=p.y;a.objectClick("Link",t,c,l)}function T(){a.objectDrop(action,h)}o.on("mousedown","geojson-source-route",e=>{I=o.queryRenderedFeatures(e.point,{layers:["geojson-source-route"]});if(I.length>0){const e=I[0];const t=VBI.VBITransformer.VisualObjs;const o=t.find(t=>t.type===e.properties.type);if(o&&o.DragSource&&o.DragSource.DragItem){b=Array.isArray(o.DragSource.DragItem)?o.DragSource.DragItem.map(e=>e.type):[o.DragSource.DragItem.type]}else{b=[]}console.log("Extracted Drag Items:",b)}if(e.originalEvent.button===0){e.preventDefault();f=true;y=false;o.getCanvas().style.cursor="default";o.on("mousemove",E);o.on("mouseup",A);if(!S.Apressed&&!S.Rpressed){o.getCanvas().style.cursor="pointer"}if(S.Apressed||S.Rpressed){o.getCanvas().style.cursor="crosshair"}}});function A(e){let t=null;var r=o.queryRenderedFeatures(e.point,{layers:["geojson-source-route"]});if(r.length>0){t=r[0]}if(!t&&o.getLayer("geojson-source-point")){var n=o.queryRenderedFeatures({layers:["geojson-source-point"]});var s=e.lngLat;t=VBI.MapRenderer.findNearestSpot(s,n)}if(t){if(e.originalEvent.button===0){const e=VBI.VBITransformer.VisualObjs;const o=e.find(e=>e.type===t.properties.type);if(o&&o.DropTarget&&o.DropTarget.DropItem){h=Array.isArray(o.DropTarget.DropItem)?o.DropTarget.DropItem.map(e=>e.type):[o.DropTarget.DropItem.type]}else{h=[]}console.log("Extracted Drop Items:",h);y=b.some(e=>h.includes(e));if(y){var i=VBI.VBITransformer.findObject(I[0].properties.type);var l=VBI.VBITransformer.findObject(t.properties.type);a.triggerPayloaddnd(i,l,I[0],t,u);console.log("Dropped on valid target")}else{console.log("Invalid drop")}}}o.getCanvas().style.cursor="default";setTimeout(()=>{o.getCanvas().style.cursor="default"},100);o.off("mousemove",E);o.off("mouseup",A);f=false;y=false}function E(e){const t=o.queryRenderedFeatures(e.point,{layers:["geojson-source-route"]});if(t.length>0){o.getCanvas().style.cursor="not-allowed";if(!S.Apressed&&!S.Rpressed){if(b){h=VBI.VBITransformer.getddvalues(t[0],"DropTarget")}if(b&&h){y=n.isAccepted(b,h)}o.getCanvas().style.cursor=y?"copy":"not-allowed"}else{o.getCanvas().style.cursor="default"}}}w.oncontextmenu=e=>{e.preventDefault();const t=d.getBoundingClientRect();const r=e.clientX-t.left;const s=e.clientY-t.top;const i=o.unproject([r,s]);const l=o.queryRenderedFeatures([r,s],{layers:["geojson-source-route"]});if(l.length>0){e.features=l;M(e,"CONTEXT_MENU_REQUEST")}else{const t=e.offsetX;const r=e.offsetY;const s=o.unproject([t,r]);const i=s.lng+";"+s.lat+";0.0";const l=o.getZoom();const p=o.getCenter();const c=p.lng+";"+p.lat;const d=n.GetEventVPCoordsObj(e,u);const m=d.x;const g=d.y;a.onMapContextMenu(i,l,c,m,g)}};var S=this;o.on("idle",()=>{const e=o.getContainer();V=e.id;console.log("Map container ID:",V);e.addEventListener("keydown",function(e){switch(e.keyCode){case 72:o.setCenter([0,0]);o.setZoom(2);o.getCanvas().style.cursor="";break;case 82:if(!S.Rpressed){S.Rpressed=true;S.Apressed=false;o.boxZoom.disable();o.getCanvas().style.cursor="crosshair"}else{S.Rpressed=false;o.boxZoom.enable();o.getCanvas().style.cursor=""}break;case 65:if(!S.Apressed){S.Apressed=true;S.Rpressed=false;o.boxZoom.disable();o.getCanvas().style.cursor="crosshair"}else{S.Apressed=false;o.boxZoom.enable();o.getCanvas().style.cursor=""}break;default:break}a.KeyboardHandler(e,VBI.MapRenderer.name)})})};VBI.MapRenderer.actionName=e=>{const t=Array.isArray(e?.SAPVB?.Actions?.Set?.Action)?e.SAPVB.Actions.Set.Action:[e?.SAPVB?.Actions?.Set?.Action].filter(Boolean);const o=t.find(e=>e.refEvent==="KeyPress");VBI.MapRenderer.name=o?.name??undefined};VBI.MapRenderer.createPopup=(e,t)=>{let o;switch(t[0]){case"Spots":const e=g.find(e=>e.customProperties.Key===t[1]);o=e?.getLngLat();break;default:}if(this.popup){this.popup.remove()}this.popup=new maplibregl.Popup({closeButton:false,offset:[19,15]}).setLngLat(o).setDOMContent(e).addTo(this.map)};VBI.MapRenderer.closePopup=()=>{this.popup?.remove()};VBI.MapRenderer.setRefMapLayerStack=(e,t)=>{this.map.setStyle(e);if(Object.keys(t).length!=0){this.map.transformRequest=(e,o)=>({url:e,headers:t})}};VBI.MapRenderer.createMenu=(e,t)=>{var o={};o.cnt=0;const r=t.Params?.Param?t.Params.Param:t.Param;for(var n=0;n<r.length;++n){if(r[n].name==="x"){o.m_x=parseInt(r[n]["#"],10)}if(r[n].name==="y"){o.m_y=parseInt(r[n]["#"],10)}if(r[n].name==="scene"){o.m_scene=r[n]["#"]}}e.findMenuByID(t.refID).open(true,0,"begin top","begin top",this.map._container,""+o.m_x+" "+o.m_y+"","fit")}});
//# sourceMappingURL=MapRenderer.js.map