/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
sap.ui.define([],function(){"use strict";var t=function(t){"use strict";const e="178";const n="sap1";const i=`${e}-${n}`;const r={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};const s={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};const a=0;const o=1;const l=2;const c=3;const u=0;const h=1;const d=2;const f=3;const p=0;const m=1;const g=2;const _=0;const x=1;const v=2;const y=3;const M=4;const S=5;const b=100;const T=101;const E=102;const w=103;const A=104;const C=200;const R=201;const I=202;const P=203;const L=204;const D=205;const U=206;const N=207;const O=208;const F=209;const B=210;const z=211;const k=212;const V=213;const G=214;const H=0;const W=1;const X=2;const j=3;const q=4;const Y=5;const Z=6;const J=7;const K=0;const $=1;const Q=2;const tt=0;const et=1;const nt=2;const it=3;const rt=4;const st=5;const at=6;const ot=7;const lt="attached";const ct="detached";const ut=300;const ht=301;const dt=302;const ft=303;const pt=304;const mt=306;const gt=1e3;const _t=1001;const xt=1002;const vt=1003;const yt=1004;const Mt=1004;const St=1005;const bt=1005;const Tt=1006;const Et=1007;const wt=1007;const At=1008;const Ct=1008;const Rt=1009;const It=1010;const Pt=1011;const Lt=1012;const Dt=1013;const Ut=1014;const Nt=1015;const Ot=1016;const Ft=1017;const Bt=1018;const zt=1020;const kt=35902;const Vt=1021;const Gt=1022;const Ht=1023;const Wt=1026;const Xt=1027;const jt=1028;const qt=1029;const Yt=1030;const Zt=1031;const Jt=1032;const Kt=1033;const $t=33776;const Qt=33777;const te=33778;const ee=33779;const ne=35840;const ie=35841;const re=35842;const se=35843;const ae=36196;const oe=37492;const le=37496;const ce=37808;const ue=37809;const he=37810;const de=37811;const fe=37812;const pe=37813;const me=37814;const ge=37815;const _e=37816;const xe=37817;const ve=37818;const ye=37819;const Me=37820;const Se=37821;const be=36492;const Te=36494;const Ee=36495;const we=36283;const Ae=36284;const Ce=36285;const Re=36286;const Ie=2200;const Pe=2201;const Le=2202;const De=2300;const Ue=2301;const Ne=2302;const Oe=2400;const Fe=2401;const Be=2402;const ze=2500;const ke=2501;const Ve=0;const Ge=1;const He=2;const We=3200;const Xe=3201;const je=3202;const qe=3203;const Ye=0;const Ze=1;const Je="";const Ke="srgb";const $e="srgb-linear";const Qe="linear";const tn="srgb";const en=0;const nn=7680;const rn=7681;const sn=7682;const an=7683;const on=34055;const ln=34056;const cn=5386;const un=512;const hn=513;const dn=514;const fn=515;const pn=516;const mn=517;const gn=518;const _n=519;const xn=512;const vn=513;const yn=514;const Mn=515;const Sn=516;const bn=517;const Tn=518;const En=519;const wn=35044;const An=35048;const Cn=35040;const Rn=35045;const In=35049;const Pn=35041;const Ln=35046;const Dn=35050;const Un=35042;const Nn="100";const On="300 es";const Fn=2e3;const Bn=2001;const zn={COMPUTE:"compute",RENDER:"render"};const kn={PERSPECTIVE:"perspective",LINEAR:"linear",FLAT:"flat"};const Vn={NORMAL:"normal",CENTROID:"centroid",SAMPLE:"sample",FIRST:"first",EITHER:"either"};class Gn{addEventListener(t,e){if(this._listeners===undefined)this._listeners={};const n=this._listeners;if(n[t]===undefined){n[t]=[]}if(n[t].indexOf(e)===-1){n[t].push(e)}}hasEventListener(t,e){const n=this._listeners;if(n===undefined)return false;return n[t]!==undefined&&n[t].indexOf(e)!==-1}removeEventListener(t,e){const n=this._listeners;if(n===undefined)return;const i=n[t];if(i!==undefined){const t=i.indexOf(e);if(t!==-1){i.splice(t,1)}}}dispatchEvent(t){const e=this._listeners;if(e===undefined)return;const n=e[t.type];if(n!==undefined){t.target=this;const e=n.slice(0);for(let n=0,i=e.length;n<i;n++){e[n].call(this,t)}t.target=null}}}const Hn=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Wn=1234567;const Xn=Math.PI/180;const jn=180/Math.PI;function qn(){const t=Math.random()*4294967295|0;const e=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const i=Math.random()*4294967295|0;const r=Hn[t&255]+Hn[t>>8&255]+Hn[t>>16&255]+Hn[t>>24&255]+"-"+Hn[e&255]+Hn[e>>8&255]+"-"+Hn[e>>16&15|64]+Hn[e>>24&255]+"-"+Hn[n&63|128]+Hn[n>>8&255]+"-"+Hn[n>>16&255]+Hn[n>>24&255]+Hn[i&255]+Hn[i>>8&255]+Hn[i>>16&255]+Hn[i>>24&255];return r.toLowerCase()}function Yn(t,e,n){return Math.max(e,Math.min(n,t))}function Zn(t,e){return(t%e+e)%e}function Jn(t,e,n,i,r){return i+(t-e)*(r-i)/(n-e)}function Kn(t,e,n){if(t!==e){return(n-t)/(e-t)}else{return 0}}function $n(t,e,n){return(1-n)*t+n*e}function Qn(t,e,n,i){return $n(t,e,1-Math.exp(-n*i))}function ti(t,e=1){return e-Math.abs(Zn(t,e*2)-e)}function ei(t,e,n){if(t<=e)return 0;if(t>=n)return 1;t=(t-e)/(n-e);return t*t*(3-2*t)}function ni(t,e,n){if(t<=e)return 0;if(t>=n)return 1;t=(t-e)/(n-e);return t*t*t*(t*(t*6-15)+10)}function ii(t,e){return t+Math.floor(Math.random()*(e-t+1))}function ri(t,e){return t+Math.random()*(e-t)}function si(t){return t*(.5-Math.random())}function ai(t){if(t!==undefined)Wn=t;let e=Wn+=1831565813;e=Math.imul(e^e>>>15,e|1);e^=e+Math.imul(e^e>>>7,e|61);return((e^e>>>14)>>>0)/4294967296}function oi(t){return t*Xn}function li(t){return t*jn}function ci(t){return(t&t-1)===0&&t!==0}function ui(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}function hi(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}function di(t,e,n,i,r){const s=Math.cos;const a=Math.sin;const o=s(n/2);const l=a(n/2);const c=s((e+i)/2);const u=a((e+i)/2);const h=s((e-i)/2);const d=a((e-i)/2);const f=s((i-e)/2);const p=a((i-e)/2);switch(r){case"XYX":t.set(o*u,l*h,l*d,o*c);break;case"YZY":t.set(l*d,o*u,l*h,o*c);break;case"ZXZ":t.set(l*h,l*d,o*u,o*c);break;case"XZX":t.set(o*u,l*p,l*f,o*c);break;case"YXY":t.set(l*f,o*u,l*p,o*c);break;case"ZYZ":t.set(l*p,l*f,o*u,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}function fi(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return t/4294967295;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int32Array:return Math.max(t/2147483647,-1);case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function pi(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return Math.round(t*4294967295);case Uint16Array:return Math.round(t*65535);case Uint8Array:return Math.round(t*255);case Int32Array:return Math.round(t*2147483647);case Int16Array:return Math.round(t*32767);case Int8Array:return Math.round(t*127);default:throw new Error("Invalid component type.")}}const mi={DEG2RAD:Xn,RAD2DEG:jn,generateUUID:qn,clamp:Yn,euclideanModulo:Zn,mapLinear:Jn,inverseLerp:Kn,lerp:$n,damp:Qn,pingpong:ti,smoothstep:ei,smootherstep:ni,randInt:ii,randFloat:ri,randFloatSpread:si,seededRandom:ai,degToRad:oi,radToDeg:li,isPowerOfTwo:ci,ceilPowerOfTwo:ui,floorPowerOfTwo:hi,setQuaternionFromProperEuler:di,normalize:pi,denormalize:fi};class gi{constructor(t=0,e=0){gi.prototype.isVector2=true;this.x=t;this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){this.x=t;this.y=e;return this}setScalar(t){this.x=t;this.y=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){this.x=t.x;this.y=t.y;return this}add(t){this.x+=t.x;this.y+=t.y;return this}addScalar(t){this.x+=t;this.y+=t;return this}addVectors(t,e){this.x=t.x+e.x;this.y=t.y+e.y;return this}addScaledVector(t,e){this.x+=t.x*e;this.y+=t.y*e;return this}sub(t){this.x-=t.x;this.y-=t.y;return this}subScalar(t){this.x-=t;this.y-=t;return this}subVectors(t,e){this.x=t.x-e.x;this.y=t.y-e.y;return this}multiply(t){this.x*=t.x;this.y*=t.y;return this}multiplyScalar(t){this.x*=t;this.y*=t;return this}divide(t){this.x/=t.x;this.y/=t.y;return this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y;const i=t.elements;this.x=i[0]*e+i[3]*n+i[6];this.y=i[1]*e+i[4]*n+i[7];return this}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);return this}clamp(t,e){this.x=Yn(this.x,t.x,e.x);this.y=Yn(this.y,t.y,e.y);return this}clampScalar(t,e){this.x=Yn(this.x,t,e);this.y=Yn(this.y,t,e);return this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Yn(n,t,e))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const t=Math.atan2(-this.y,-this.x)+Math.PI;return t}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Yn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){this.x+=(t.x-this.x)*e;this.y+=(t.y-this.y)*e;return this}lerpVectors(t,e,n){this.x=t.x+(e.x-t.x)*n;this.y=t.y+(e.y-t.y)*n;return this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){this.x=t[e];this.y=t[e+1];return this}toArray(t=[],e=0){t[e]=this.x;t[e+1]=this.y;return t}fromBufferAttribute(t,e){this.x=t.getX(e);this.y=t.getY(e);return this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e);const r=this.x-t.x;const s=this.y-t.y;this.x=r*n-s*i+t.x;this.y=r*i+s*n+t.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y}}class _i{constructor(t=0,e=0,n=0,i=1){this.isQuaternion=true;this._x=t;this._y=e;this._z=n;this._w=i}static slerpFlat(t,e,n,i,r,s,a){let o=n[i+0],l=n[i+1],c=n[i+2],u=n[i+3];const h=r[s+0],d=r[s+1],f=r[s+2],p=r[s+3];if(a===0){t[e+0]=o;t[e+1]=l;t[e+2]=c;t[e+3]=u;return}if(a===1){t[e+0]=h;t[e+1]=d;t[e+2]=f;t[e+3]=p;return}if(u!==p||o!==h||l!==d||c!==f){let t=1-a;const e=o*h+l*d+c*f+u*p,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),s=Math.atan2(r,e*n);t=Math.sin(t*s)/r;a=Math.sin(a*s)/r}const r=a*n;o=o*t+h*r;l=l*t+d*r;c=c*t+f*r;u=u*t+p*r;if(t===1-a){const t=1/Math.sqrt(o*o+l*l+c*c+u*u);o*=t;l*=t;c*=t;u*=t}}t[e]=o;t[e+1]=l;t[e+2]=c;t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,r,s){const a=n[i];const o=n[i+1];const l=n[i+2];const c=n[i+3];const u=r[s];const h=r[s+1];const d=r[s+2];const f=r[s+3];t[e]=a*f+c*u+o*d-l*h;t[e+1]=o*f+c*h+l*u-a*d;t[e+2]=l*f+c*d+a*h-o*u;t[e+3]=c*f-a*u-o*h-l*d;return t}get x(){return this._x}set x(t){this._x=t;this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t;this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t;this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t;this._onChangeCallback()}set(t,e,n,i){this._x=t;this._y=e;this._z=n;this._w=i;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){this._x=t.x;this._y=t.y;this._z=t.z;this._w=t.w;this._onChangeCallback();return this}setFromEuler(t,e=true){const n=t._x,i=t._y,r=t._z,s=t._order;const a=Math.cos;const o=Math.sin;const l=a(n/2);const c=a(i/2);const u=a(r/2);const h=o(n/2);const d=o(i/2);const f=o(r/2);switch(s){case"XYZ":this._x=h*c*u+l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u-h*d*f;break;case"YXZ":this._x=h*c*u+l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u+h*d*f;break;case"ZXY":this._x=h*c*u-l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u-h*d*f;break;case"ZYX":this._x=h*c*u-l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u+h*d*f;break;case"YZX":this._x=h*c*u+l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u-h*d*f;break;case"XZY":this._x=h*c*u-l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u+h*d*f;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}if(e===true)this._onChangeCallback();return this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);this._x=t.x*i;this._y=t.y*i;this._z=t.z*i;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],s=e[1],a=e[5],o=e[9],l=e[2],c=e[6],u=e[10],h=n+a+u;if(h>0){const t=.5/Math.sqrt(h+1);this._w=.25/t;this._x=(c-o)*t;this._y=(r-l)*t;this._z=(s-i)*t}else if(n>a&&n>u){const t=2*Math.sqrt(1+n-a-u);this._w=(c-o)/t;this._x=.25*t;this._y=(i+s)/t;this._z=(r+l)/t}else if(a>u){const t=2*Math.sqrt(1+a-n-u);this._w=(r-l)/t;this._x=(i+s)/t;this._y=.25*t;this._z=(o+c)/t}else{const t=2*Math.sqrt(1+u-n-a);this._w=(s-i)/t;this._x=(r+l)/t;this._y=(o+c)/t;this._z=.25*t}this._onChangeCallback();return this}setFromUnitVectors(t,e){let n=t.dot(e)+1;if(n<1e-8){n=0;if(Math.abs(t.x)>Math.abs(t.z)){this._x=-t.y;this._y=t.x;this._z=0;this._w=n}else{this._x=0;this._y=-t.z;this._z=t.y;this._w=n}}else{this._x=t.y*e.z-t.z*e.y;this._y=t.z*e.x-t.x*e.z;this._z=t.x*e.y-t.y*e.x;this._w=n}return this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Yn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);this.slerp(t,i);return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();if(t===0){this._x=0;this._y=0;this._z=0;this._w=1}else{t=1/t;this._x=this._x*t;this._y=this._y*t;this._z=this._z*t;this._w=this._w*t}this._onChangeCallback();return this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,s=t._w;const a=e._x,o=e._y,l=e._z,c=e._w;this._x=n*c+s*a+i*l-r*o;this._y=i*c+s*o+r*a-n*l;this._z=r*c+s*l+n*o-i*a;this._w=s*c-n*a-i*o-r*l;this._onChangeCallback();return this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*t._w+n*t._x+i*t._y+r*t._z;if(a<0){this._w=-t._w;this._x=-t._x;this._y=-t._y;this._z=-t._z;a=-a}else{this.copy(t)}if(a>=1){this._w=s;this._x=n;this._y=i;this._z=r;return this}const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;this._w=t*s+e*this._w;this._x=t*n+e*this._x;this._y=t*i+e*this._y;this._z=t*r+e*this._z;this.normalize();return this}const l=Math.sqrt(o);const c=Math.atan2(l,a);const u=Math.sin((1-e)*c)/l,h=Math.sin(e*c)/l;this._w=s*u+this._w*h;this._x=n*u+this._x*h;this._y=i*u+this._y*h;this._z=r*u+this._z*h;this._onChangeCallback();return this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random();const e=2*Math.PI*Math.random();const n=Math.random();const i=Math.sqrt(1-n);const r=Math.sqrt(n);return this.set(i*Math.sin(t),i*Math.cos(t),r*Math.sin(e),r*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){this._x=t[e];this._y=t[e+1];this._z=t[e+2];this._w=t[e+3];this._onChangeCallback();return this}toArray(t=[],e=0){t[e]=this._x;t[e+1]=this._y;t[e+2]=this._z;t[e+3]=this._w;return t}fromBufferAttribute(t,e){this._x=t.getX(e);this._y=t.getY(e);this._z=t.getZ(e);this._w=t.getW(e);this._onChangeCallback();return this}toJSON(){return this.toArray()}_onChange(t){this._onChangeCallback=t;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._w}}class xi{constructor(t=0,e=0,n=0){xi.prototype.isVector3=true;this.x=t;this.y=e;this.z=n}set(t,e,n){if(n===undefined)n=this.z;this.x=t;this.y=e;this.z=n;return this}setScalar(t){this.x=t;this.y=t;this.z=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setZ(t){this.z=t;return this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){this.x=t.x;this.y=t.y;this.z=t.z;return this}add(t){this.x+=t.x;this.y+=t.y;this.z+=t.z;return this}addScalar(t){this.x+=t;this.y+=t;this.z+=t;return this}addVectors(t,e){this.x=t.x+e.x;this.y=t.y+e.y;this.z=t.z+e.z;return this}addScaledVector(t,e){this.x+=t.x*e;this.y+=t.y*e;this.z+=t.z*e;return this}sub(t){this.x-=t.x;this.y-=t.y;this.z-=t.z;return this}subScalar(t){this.x-=t;this.y-=t;this.z-=t;return this}subVectors(t,e){this.x=t.x-e.x;this.y=t.y-e.y;this.z=t.z-e.z;return this}multiply(t){this.x*=t.x;this.y*=t.y;this.z*=t.z;return this}multiplyScalar(t){this.x*=t;this.y*=t;this.z*=t;return this}multiplyVectors(t,e){this.x=t.x*e.x;this.y=t.y*e.y;this.z=t.z*e.z;return this}applyEuler(t){return this.applyQuaternion(yi.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(yi.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z;const r=t.elements;this.x=r[0]*e+r[3]*n+r[6]*i;this.y=r[1]*e+r[4]*n+r[7]*i;this.z=r[2]*e+r[5]*n+r[8]*i;return this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z;const r=t.elements;const s=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*s;this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*s;this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*s;return this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z;const r=t.x,s=t.y,a=t.z,o=t.w;const l=2*(s*i-a*n);const c=2*(a*e-r*i);const u=2*(r*n-s*e);this.x=e+o*l+s*u-a*c;this.y=n+o*c+a*l-r*u;this.z=i+o*u+r*c-s*l;return this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z;const r=t.elements;this.x=r[0]*e+r[4]*n+r[8]*i;this.y=r[1]*e+r[5]*n+r[9]*i;this.z=r[2]*e+r[6]*n+r[10]*i;return this.normalize()}divide(t){this.x/=t.x;this.y/=t.y;this.z/=t.z;return this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);this.z=Math.min(this.z,t.z);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);this.z=Math.max(this.z,t.z);return this}clamp(t,e){this.x=Yn(this.x,t.x,e.x);this.y=Yn(this.y,t.y,e.y);this.z=Yn(this.z,t.z,e.z);return this}clampScalar(t,e){this.x=Yn(this.x,t,e);this.y=Yn(this.y,t,e);this.z=Yn(this.z,t,e);return this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Yn(n,t,e))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){this.x+=(t.x-this.x)*e;this.y+=(t.y-this.y)*e;this.z+=(t.z-this.z)*e;return this}lerpVectors(t,e,n){this.x=t.x+(e.x-t.x)*n;this.y=t.y+(e.y-t.y)*n;this.z=t.z+(e.z-t.z)*n;return this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z;const s=e.x,a=e.y,o=e.z;this.x=i*o-r*a;this.y=r*s-n*o;this.z=n*a-i*s;return this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){vi.copy(this).projectOnVector(t);return this.sub(vi)}reflect(t){return this.sub(vi.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Yn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;this.x=i*Math.sin(n);this.y=Math.cos(e)*t;this.z=i*Math.cos(n);return this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){this.x=t*Math.sin(e);this.y=n;this.z=t*Math.cos(e);return this}setFromMatrixPosition(t){const e=t.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length();const n=this.setFromMatrixColumn(t,1).length();const i=this.setFromMatrixColumn(t,2).length();this.x=e;this.y=n;this.z=i;return this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){this.x=t._x;this.y=t._y;this.z=t._z;return this}setFromColor(t){this.x=t.r;this.y=t.g;this.z=t.b;return this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){this.x=t[e];this.y=t[e+1];this.z=t[e+2];return this}toArray(t=[],e=0){t[e]=this.x;t[e+1]=this.y;t[e+2]=this.z;return t}fromBufferAttribute(t,e){this.x=t.getX(e);this.y=t.getY(e);this.z=t.getZ(e);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}randomDirection(){const t=Math.random()*Math.PI*2;const e=Math.random()*2-1;const n=Math.sqrt(1-e*e);this.x=n*Math.cos(t);this.y=e;this.z=n*Math.sin(t);return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z}}const vi=new xi;const yi=new _i;class Mi{constructor(t,e,n,i,r,s,a,o,l){Mi.prototype.isMatrix3=true;this.elements=[1,0,0,0,1,0,0,0,1];if(t!==undefined){this.set(t,e,n,i,r,s,a,o,l)}}set(t,e,n,i,r,s,a,o,l){const c=this.elements;c[0]=t;c[1]=i;c[2]=a;c[3]=e;c[4]=r;c[5]=o;c[6]=n;c[7]=s;c[8]=l;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}copy(t){const e=this.elements;const n=t.elements;e[0]=n[0];e[1]=n[1];e[2]=n[2];e[3]=n[3];e[4]=n[4];e[5]=n[5];e[6]=n[6];e[7]=n[7];e[8]=n[8];return this}extractBasis(t,e,n){t.setFromMatrix3Column(this,0);e.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(t){const e=t.elements;this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]);return this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements;const i=e.elements;const r=this.elements;const s=n[0],a=n[3],o=n[6];const l=n[1],c=n[4],u=n[7];const h=n[2],d=n[5],f=n[8];const p=i[0],m=i[3],g=i[6];const _=i[1],x=i[4],v=i[7];const y=i[2],M=i[5],S=i[8];r[0]=s*p+a*_+o*y;r[3]=s*m+a*x+o*M;r[6]=s*g+a*v+o*S;r[1]=l*p+c*_+u*y;r[4]=l*m+c*x+u*M;r[7]=l*g+c*v+u*S;r[2]=h*p+d*_+f*y;r[5]=h*m+d*x+f*M;r[8]=h*g+d*v+f*S;return this}multiplyScalar(t){const e=this.elements;e[0]*=t;e[3]*=t;e[6]*=t;e[1]*=t;e[4]*=t;e[7]*=t;e[2]*=t;e[5]*=t;e[8]*=t;return this}determinant(){const t=this.elements;const e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8];return e*s*c-e*a*l-n*r*c+n*a*o+i*r*l-i*s*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],u=c*s-a*l,h=a*o-c*r,d=l*r-s*o,f=e*u+n*h+i*d;if(f===0)return this.set(0,0,0,0,0,0,0,0,0);const p=1/f;t[0]=u*p;t[1]=(i*l-c*n)*p;t[2]=(a*n-i*s)*p;t[3]=h*p;t[4]=(c*e-i*o)*p;t[5]=(i*r-a*e)*p;t[6]=d*p;t[7]=(n*o-l*e)*p;t[8]=(s*e-n*r)*p;return this}transpose(){let t;const e=this.elements;t=e[1];e[1]=e[3];e[3]=t;t=e[2];e[2]=e[6];e[6]=t;t=e[5];e[5]=e[7];e[7]=t;return this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;t[0]=e[0];t[1]=e[3];t[2]=e[6];t[3]=e[1];t[4]=e[4];t[5]=e[7];t[6]=e[2];t[7]=e[5];t[8]=e[8];return this}setUvTransform(t,e,n,i,r,s,a){const o=Math.cos(r);const l=Math.sin(r);this.set(n*o,n*l,-n*(o*s+l*a)+s+t,-i*l,i*o,-i*(-l*s+o*a)+a+e,0,0,1);return this}scale(t,e){this.premultiply(Si.makeScale(t,e));return this}rotate(t){this.premultiply(Si.makeRotation(-t));return this}translate(t,e){this.premultiply(Si.makeTranslation(t,e));return this}makeTranslation(t,e){if(t.isVector2){this.set(1,0,t.x,0,1,t.y,0,0,1)}else{this.set(1,0,t,0,1,e,0,0,1)}return this}makeRotation(t){const e=Math.cos(t);const n=Math.sin(t);this.set(e,-n,0,n,e,0,0,0,1);return this}makeScale(t,e){this.set(t,0,0,0,e,0,0,0,1);return this}equals(t){const e=this.elements;const n=t.elements;for(let t=0;t<9;t++){if(e[t]!==n[t])return false}return true}fromArray(t,e=0){for(let n=0;n<9;n++){this.elements[n]=t[n+e]}return this}toArray(t=[],e=0){const n=this.elements;t[e]=n[0];t[e+1]=n[1];t[e+2]=n[2];t[e+3]=n[3];t[e+4]=n[4];t[e+5]=n[5];t[e+6]=n[6];t[e+7]=n[7];t[e+8]=n[8];return t}clone(){return(new this.constructor).fromArray(this.elements)}}const Si=new Mi;function bi(t){for(let e=t.length-1;e>=0;--e){if(t[e]>=65535)return true}return false}const Ti={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function Ei(t,e){return new Ti[t](e)}function wi(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function Ai(){const t=wi("canvas");t.style.display="block";return t}const Ci={};function Ri(t){if(t in Ci)return;Ci[t]=true;console.warn(t)}function Ii(t,e,n){return new Promise(function(i,r){function s(){switch(t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0)){case t.WAIT_FAILED:r();break;case t.TIMEOUT_EXPIRED:setTimeout(s,n);break;default:i()}}setTimeout(s,n)})}function Pi(t){const e=t.elements;e[2]=.5*e[2]+.5*e[3];e[6]=.5*e[6]+.5*e[7];e[10]=.5*e[10]+.5*e[11];e[14]=.5*e[14]+.5*e[15]}function Li(t){const e=t.elements;const n=e[11]===-1;if(n){e[10]=-e[10]-1;e[14]=-e[14]}else{e[10]=-e[10];e[14]=-e[14]+1}}const Di=(new Mi).set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322);const Ui=(new Mi).set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function Ni(){const t={enabled:true,workingColorSpace:$e,spaces:{},convert:function(t,e,n){if(this.enabled===false||e===n||!e||!n){return t}if(this.spaces[e].transfer===tn){t.r=Fi(t.r);t.g=Fi(t.g);t.b=Fi(t.b)}if(this.spaces[e].primaries!==this.spaces[n].primaries){t.applyMatrix3(this.spaces[e].toXYZ);t.applyMatrix3(this.spaces[n].fromXYZ)}if(this.spaces[n].transfer===tn){t.r=Bi(t.r);t.g=Bi(t.g);t.b=Bi(t.b)}return t},workingToColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},colorSpaceToWorking:function(t,e){return this.convert(t,e,this.workingColorSpace)},getPrimaries:function(t){return this.spaces[t].primaries},getTransfer:function(t){if(t===Je)return Qe;return this.spaces[t].transfer},getLuminanceCoefficients:function(t,e=this.workingColorSpace){return t.fromArray(this.spaces[e].luminanceCoefficients)},define:function(t){Object.assign(this.spaces,t)},_getMatrix:function(t,e,n){return t.copy(this.spaces[e].toXYZ).multiply(this.spaces[n].fromXYZ)},_getDrawingBufferColorSpace:function(t){return this.spaces[t].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(t=this.workingColorSpace){return this.spaces[t].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(e,n){Ri("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace().");return t.workingToColorSpace(e,n)},toWorkingColorSpace:function(e,n){Ri("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking().");return t.colorSpaceToWorking(e,n)}};const e=[.64,.33,.3,.6,.15,.06];const n=[.2126,.7152,.0722];const i=[.3127,.329];t.define({[$e]:{primaries:e,whitePoint:i,transfer:Qe,toXYZ:Di,fromXYZ:Ui,luminanceCoefficients:n,workingColorSpaceConfig:{unpackColorSpace:Ke},outputColorSpaceConfig:{drawingBufferColorSpace:Ke}},[Ke]:{primaries:e,whitePoint:i,transfer:tn,toXYZ:Di,fromXYZ:Ui,luminanceCoefficients:n,outputColorSpaceConfig:{drawingBufferColorSpace:Ke}}});return t}const Oi=Ni();function Fi(t){return t<.04045?t*.0773993808:Math.pow(t*.9478672986+.0521327014,2.4)}function Bi(t){return t<.0031308?t*12.92:1.055*Math.pow(t,.41666)-.055}let zi;class ki{static getDataURL(t,e="image/png"){if(/^data:/i.test(t.src)){return t.src}if(typeof HTMLCanvasElement==="undefined"){return t.src}let n;if(t instanceof HTMLCanvasElement){n=t}else{if(zi===undefined)zi=wi("canvas");zi.width=t.width;zi.height=t.height;const e=zi.getContext("2d");if(t instanceof ImageData){e.putImageData(t,0,0)}else{e.drawImage(t,0,0,t.width,t.height)}n=zi}return n.toDataURL(e)}static sRGBToLinear(t){if(typeof HTMLImageElement!=="undefined"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&t instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&t instanceof ImageBitmap){const e=wi("canvas");e.width=t.width;e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height);const r=i.data;for(let t=0;t<r.length;t++){r[t]=Fi(r[t]/255)*255}n.putImageData(i,0,0);return e}else if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++){if(e instanceof Uint8Array||e instanceof Uint8ClampedArray){e[t]=Math.floor(Fi(e[t]/255)*255)}else{e[t]=Fi(e[t])}}return{data:e,width:t.width,height:t.height}}else{console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");return t}}}let Vi=0;class Gi{constructor(t=null){this.isSource=true;Object.defineProperty(this,"id",{value:Vi++});this.uuid=qn();this.data=t;this.dataReady=true;this.version=0}getSize(t){const e=this.data;if(e instanceof HTMLVideoElement){t.set(e.videoWidth,e.videoHeight)}else if(e!==null){t.set(e.width,e.height,e.depth||0)}else{t.set(0,0,0)}return t}set needsUpdate(t){if(t===true)this.version++}toJSON(t){const e=t===undefined||typeof t==="string";if(!e&&t.images[this.uuid]!==undefined){return t.images[this.uuid]}const n={uuid:this.uuid,url:""};const i=this.data;if(i!==null){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++){if(i[e].isDataTexture){t.push(Hi(i[e].image))}else{t.push(Hi(i[e]))}}}else{t=Hi(i)}n.url=t}if(!e){t.images[this.uuid]=n}return n}}function Hi(t){if(typeof HTMLImageElement!=="undefined"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&t instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&t instanceof ImageBitmap){return ki.getDataURL(t)}else{if(t.data){return{data:Array.from(t.data),width:t.width,height:t.height,type:t.data.constructor.name}}else{console.warn("THREE.Texture: Unable to serialize Texture.");return{}}}}let Wi=0;const Xi=new xi;class ji extends Gn{constructor(t=ji.DEFAULT_IMAGE,e=ji.DEFAULT_MAPPING,n=_t,i=_t,r=Tt,s=At,a=Ht,o=Rt,l=ji.DEFAULT_ANISOTROPY,c=Je){super();this.isTexture=true;Object.defineProperty(this,"id",{value:Wi++});this.uuid=qn();this.name="";this.source=new Gi(t);this.mipmaps=[];this.mapping=e;this.channel=0;this.wrapS=n;this.wrapT=i;this.magFilter=r;this.minFilter=s;this.anisotropy=l;this.format=a;this.internalFormat=null;this.type=o;this.offset=new gi(0,0);this.repeat=new gi(1,1);this.center=new gi(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Mi;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;this.colorSpace=c;this.userData={};this.updateRanges=[];this.version=0;this.onUpdate=null;this.renderTarget=null;this.isRenderTargetTexture=false;this.isArrayTexture=t&&t.depth&&t.depth>1?true:false;this.pmremVersion=0}get width(){return this.source.getSize(Xi).x}get height(){return this.source.getSize(Xi).y}get depth(){return this.source.getSize(Xi).z}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name;this.source=t.source;this.mipmaps=t.mipmaps.slice(0);this.mapping=t.mapping;this.channel=t.channel;this.wrapS=t.wrapS;this.wrapT=t.wrapT;this.magFilter=t.magFilter;this.minFilter=t.minFilter;this.anisotropy=t.anisotropy;this.format=t.format;this.internalFormat=t.internalFormat;this.type=t.type;this.offset.copy(t.offset);this.repeat.copy(t.repeat);this.center.copy(t.center);this.rotation=t.rotation;this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrix.copy(t.matrix);this.generateMipmaps=t.generateMipmaps;this.premultiplyAlpha=t.premultiplyAlpha;this.flipY=t.flipY;this.unpackAlignment=t.unpackAlignment;this.colorSpace=t.colorSpace;this.renderTarget=t.renderTarget;this.isRenderTargetTexture=t.isRenderTargetTexture;this.isArrayTexture=t.isArrayTexture;this.userData=JSON.parse(JSON.stringify(t.userData));this.needsUpdate=true;return this}setValues(t){for(const e in t){const n=t[e];if(n===undefined){console.warn(`THREE.Texture.setValues(): parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===undefined){console.warn(`THREE.Texture.setValues(): property '${e}' does not exist.`);continue}if(i&&n&&(i.isVector2&&n.isVector2)){i.copy(n)}else if(i&&n&&(i.isVector3&&n.isVector3)){i.copy(n)}else if(i&&n&&(i.isMatrix3&&n.isMatrix3)){i.copy(n)}else{this[e]=n}}}toJSON(t){const e=t===undefined||typeof t==="string";if(!e&&t.textures[this.uuid]!==undefined){return t.textures[this.uuid]}const n={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(Object.keys(this.userData).length>0)n.userData=this.userData;if(!e){t.textures[this.uuid]=n}return n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==ut)return t;t.applyMatrix3(this.matrix);if(t.x<0||t.x>1){switch(this.wrapS){case gt:t.x=t.x-Math.floor(t.x);break;case _t:t.x=t.x<0?0:1;break;case xt:if(Math.abs(Math.floor(t.x)%2)===1){t.x=Math.ceil(t.x)-t.x}else{t.x=t.x-Math.floor(t.x)}break}}if(t.y<0||t.y>1){switch(this.wrapT){case gt:t.y=t.y-Math.floor(t.y);break;case _t:t.y=t.y<0?0:1;break;case xt:if(Math.abs(Math.floor(t.y)%2)===1){t.y=Math.ceil(t.y)-t.y}else{t.y=t.y-Math.floor(t.y)}break}}if(this.flipY){t.y=1-t.y}return t}set needsUpdate(t){if(t===true){this.version++;this.source.needsUpdate=true}}set needsPMREMUpdate(t){if(t===true){this.pmremVersion++}}}ji.DEFAULT_IMAGE=null;ji.DEFAULT_MAPPING=ut;ji.DEFAULT_ANISOTROPY=1;class qi{constructor(t=0,e=0,n=0,i=1){qi.prototype.isVector4=true;this.x=t;this.y=e;this.z=n;this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){this.x=t;this.y=e;this.z=n;this.w=i;return this}setScalar(t){this.x=t;this.y=t;this.z=t;this.w=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setZ(t){this.z=t;return this}setW(t){this.w=t;return this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){this.x=t.x;this.y=t.y;this.z=t.z;this.w=t.w!==undefined?t.w:1;return this}add(t){this.x+=t.x;this.y+=t.y;this.z+=t.z;this.w+=t.w;return this}addScalar(t){this.x+=t;this.y+=t;this.z+=t;this.w+=t;return this}addVectors(t,e){this.x=t.x+e.x;this.y=t.y+e.y;this.z=t.z+e.z;this.w=t.w+e.w;return this}addScaledVector(t,e){this.x+=t.x*e;this.y+=t.y*e;this.z+=t.z*e;this.w+=t.w*e;return this}sub(t){this.x-=t.x;this.y-=t.y;this.z-=t.z;this.w-=t.w;return this}subScalar(t){this.x-=t;this.y-=t;this.z-=t;this.w-=t;return this}subVectors(t,e){this.x=t.x-e.x;this.y=t.y-e.y;this.z=t.z-e.z;this.w=t.w-e.w;return this}multiply(t){this.x*=t.x;this.y*=t.y;this.z*=t.z;this.w*=t.w;return this}multiplyScalar(t){this.x*=t;this.y*=t;this.z*=t;this.w*=t;return this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w;const s=t.elements;this.x=s[0]*e+s[4]*n+s[8]*i+s[12]*r;this.y=s[1]*e+s[5]*n+s[9]*i+s[13]*r;this.z=s[2]*e+s[6]*n+s[10]*i+s[14]*r;this.w=s[3]*e+s[7]*n+s[11]*i+s[15]*r;return this}divide(t){this.x/=t.x;this.y/=t.y;this.z/=t.z;this.w/=t.w;return this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);if(e<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=t.x/e;this.y=t.y/e;this.z=t.z/e}return this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const s=.01,a=.1,o=t.elements,l=o[0],c=o[4],u=o[8],h=o[1],d=o[5],f=o[9],p=o[2],m=o[6],g=o[10];if(Math.abs(c-h)<s&&Math.abs(u-p)<s&&Math.abs(f-m)<s){if(Math.abs(c+h)<a&&Math.abs(u+p)<a&&Math.abs(f+m)<a&&Math.abs(l+d+g-3)<a){this.set(1,0,0,0);return this}e=Math.PI;const t=(l+1)/2;const o=(d+1)/2;const _=(g+1)/2;const x=(c+h)/4;const v=(u+p)/4;const y=(f+m)/4;if(t>o&&t>_){if(t<s){n=0;i=.707106781;r=.707106781}else{n=Math.sqrt(t);i=x/n;r=v/n}}else if(o>_){if(o<s){n=.707106781;i=0;r=.707106781}else{i=Math.sqrt(o);n=x/i;r=y/i}}else{if(_<s){n=.707106781;i=.707106781;r=0}else{r=Math.sqrt(_);n=v/r;i=y/r}}this.set(n,i,r,e);return this}let _=Math.sqrt((m-f)*(m-f)+(u-p)*(u-p)+(h-c)*(h-c));if(Math.abs(_)<.001)_=1;this.x=(m-f)/_;this.y=(u-p)/_;this.z=(h-c)/_;this.w=Math.acos((l+d+g-1)/2);return this}setFromMatrixPosition(t){const e=t.elements;this.x=e[12];this.y=e[13];this.z=e[14];this.w=e[15];return this}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);this.z=Math.min(this.z,t.z);this.w=Math.min(this.w,t.w);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);this.z=Math.max(this.z,t.z);this.w=Math.max(this.w,t.w);return this}clamp(t,e){this.x=Yn(this.x,t.x,e.x);this.y=Yn(this.y,t.y,e.y);this.z=Yn(this.z,t.z,e.z);this.w=Yn(this.w,t.w,e.w);return this}clampScalar(t,e){this.x=Yn(this.x,t,e);this.y=Yn(this.y,t,e);this.z=Yn(this.z,t,e);this.w=Yn(this.w,t,e);return this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Yn(n,t,e))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=Math.trunc(this.x);this.y=Math.trunc(this.y);this.z=Math.trunc(this.z);this.w=Math.trunc(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){this.x+=(t.x-this.x)*e;this.y+=(t.y-this.y)*e;this.z+=(t.z-this.z)*e;this.w+=(t.w-this.w)*e;return this}lerpVectors(t,e,n){this.x=t.x+(e.x-t.x)*n;this.y=t.y+(e.y-t.y)*n;this.z=t.z+(e.z-t.z)*n;this.w=t.w+(e.w-t.w)*n;return this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){this.x=t[e];this.y=t[e+1];this.z=t[e+2];this.w=t[e+3];return this}toArray(t=[],e=0){t[e]=this.x;t[e+1]=this.y;t[e+2]=this.z;t[e+3]=this.w;return t}fromBufferAttribute(t,e){this.x=t.getX(e);this.y=t.getY(e);this.z=t.getZ(e);this.w=t.getW(e);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w}}class Yi extends Gn{constructor(t=1,e=1,n={}){super();n=Object.assign({generateMipmaps:false,internalFormat:null,minFilter:Tt,depthBuffer:true,stencilBuffer:false,resolveDepthBuffer:true,resolveStencilBuffer:true,depthTexture:null,samples:0,count:1,depth:1,multiview:false},n);this.isRenderTarget=true;this.width=t;this.height=e;this.depth=n.depth;this.scissor=new qi(0,0,t,e);this.scissorTest=false;this.viewport=new qi(0,0,t,e);const i={width:t,height:e,depth:n.depth};const r=new ji(i);this.textures=[];const s=n.count;for(let t=0;t<s;t++){this.textures[t]=r.clone();this.textures[t].isRenderTargetTexture=true;this.textures[t].renderTarget=this}this._setTextureOptions(n);this.depthBuffer=n.depthBuffer;this.stencilBuffer=n.stencilBuffer;this.resolveDepthBuffer=n.resolveDepthBuffer;this.resolveStencilBuffer=n.resolveStencilBuffer;this._depthTexture=null;this.depthTexture=n.depthTexture;this.samples=n.samples;this.multiview=n.multiview}_setTextureOptions(t={}){const e={minFilter:Tt,generateMipmaps:false,flipY:false,internalFormat:null};if(t.mapping!==undefined)e.mapping=t.mapping;if(t.wrapS!==undefined)e.wrapS=t.wrapS;if(t.wrapT!==undefined)e.wrapT=t.wrapT;if(t.wrapR!==undefined)e.wrapR=t.wrapR;if(t.magFilter!==undefined)e.magFilter=t.magFilter;if(t.minFilter!==undefined)e.minFilter=t.minFilter;if(t.format!==undefined)e.format=t.format;if(t.type!==undefined)e.type=t.type;if(t.anisotropy!==undefined)e.anisotropy=t.anisotropy;if(t.colorSpace!==undefined)e.colorSpace=t.colorSpace;if(t.flipY!==undefined)e.flipY=t.flipY;if(t.generateMipmaps!==undefined)e.generateMipmaps=t.generateMipmaps;if(t.internalFormat!==undefined)e.internalFormat=t.internalFormat;for(let t=0;t<this.textures.length;t++){const n=this.textures[t];n.setValues(e)}}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){if(this._depthTexture!==null)this._depthTexture.renderTarget=null;if(t!==null)t.renderTarget=this;this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t;this.height=e;this.depth=n;for(let i=0,r=this.textures.length;i<r;i++){this.textures[i].image.width=t;this.textures[i].image.height=e;this.textures[i].image.depth=n;this.textures[i].isArrayTexture=this.textures[i].image.depth>1}this.dispose()}this.viewport.set(0,0,t,e);this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width;this.height=t.height;this.depth=t.depth;this.scissor.copy(t.scissor);this.scissorTest=t.scissorTest;this.viewport.copy(t.viewport);this.textures.length=0;for(let e=0,n=t.textures.length;e<n;e++){this.textures[e]=t.textures[e].clone();this.textures[e].isRenderTargetTexture=true;this.textures[e].renderTarget=this;const n=Object.assign({},t.textures[e].image);this.textures[e].source=new Gi(n)}this.depthBuffer=t.depthBuffer;this.stencilBuffer=t.stencilBuffer;this.resolveDepthBuffer=t.resolveDepthBuffer;this.resolveStencilBuffer=t.resolveStencilBuffer;if(t.depthTexture!==null)this.depthTexture=t.depthTexture.clone();this.samples=t.samples;return this}dispose(){this.dispatchEvent({type:"dispose"})}}class Zi extends Yi{constructor(t=1,e=1,n={}){super(t,e,n);this.isWebGLRenderTarget=true}}class Ji extends ji{constructor(t=null,e=1,n=1,i=1){super(null);this.isDataArrayTexture=true;this.image={data:t,width:e,height:n,depth:i};this.magFilter=vt;this.minFilter=vt;this.wrapR=_t;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1;this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Ki extends Zi{constructor(t=1,e=1,n=1,i={}){super(t,e,i);this.isWebGLArrayRenderTarget=true;this.depth=n;this.texture=new Ji(null,t,e,n);this._setTextureOptions(i);this.texture.isRenderTargetTexture=true}}class $i extends ji{constructor(t=null,e=1,n=1,i=1){super(null);this.isData3DTexture=true;this.image={data:t,width:e,height:n,depth:i};this.magFilter=vt;this.minFilter=vt;this.wrapR=_t;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}class Qi extends Zi{constructor(t=1,e=1,n=1,i={}){super(t,e,i);this.isWebGL3DRenderTarget=true;this.depth=n;this.texture=new $i(null,t,e,n);this._setTextureOptions(i);this.texture.isRenderTargetTexture=true}}class tr{constructor(t=new xi(+Infinity,+Infinity,+Infinity),e=new xi(-Infinity,-Infinity,-Infinity)){this.isBox3=true;this.min=t;this.max=e}set(t,e){this.min.copy(t);this.max.copy(e);return this}setFromPackedArray(t){this.min.set(t[0],t[1],t[2]);this.max.set(t[3],t[4],t[5]);return this}static newFromPackedArray(t){return new tr(new xi(t[0],t[1],t[2]),new xi(t[3],t[4],t[5]))}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3){this.expandByPoint(nr.fromArray(t,e))}return this}setFromBufferAttribute(t,e,n){this.makeEmpty();for(let i=e===undefined?0:e,r=n===undefined?t.count:n;i<r;i++){this.expandByPoint(nr.fromBufferAttribute(t,i))}return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++){this.expandByPoint(t[e])}return this}setFromCenterAndSize(t,e){const n=nr.copy(e).multiplyScalar(.5);this.min.copy(t).sub(n);this.max.copy(t).add(n);return this}setFromObject(t,e=false){this.makeEmpty();return this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.min.copy(t.min);this.max.copy(t.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){this.min.min(t);this.max.max(t);return this}expandByVector(t){this.min.sub(t);this.max.add(t);return this}expandByScalar(t){this.min.addScalar(-t);this.max.addScalar(t);return this}expandByObject(t,e=false){t.updateWorldMatrix(false,false);const n=t.geometry;if(n!==undefined){const i=t.userData.renderGroup;const r=n.getAttribute("position");if(e===true&&r!==undefined&&t.isInstancedMesh!==true){for(let e=i?i.firstVertex:0,n=i?i.lastVertex:r.count;e<n;e++){if(t.isMesh===true){t.getVertexPosition(e,nr)}else{nr.fromBufferAttribute(r,e)}nr.applyMatrix4(t.matrixWorld);this.expandByPoint(nr)}}else{if(i&&i.boundingBox){ir.setFromPackedArray(i.boundingBox)}else if(t.boundingBox!==undefined){if(t.boundingBox===null){t.computeBoundingBox()}ir.copy(t.boundingBox)}else{if(n.boundingBox===null){n.computeBoundingBox()}ir.copy(n.boundingBox)}ir.applyMatrix4(t.matrixWorld);this.union(ir)}}const i=t.children;for(let t=0,n=i.length;t<n;t++){this.expandByObject(i[t],e)}return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){this.clampPoint(t.center,nr);return nr.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;if(t.normal.x>0){e=t.normal.x*this.min.x;n=t.normal.x*this.max.x}else{e=t.normal.x*this.max.x;n=t.normal.x*this.min.x}if(t.normal.y>0){e+=t.normal.y*this.min.y;n+=t.normal.y*this.max.y}else{e+=t.normal.y*this.max.y;n+=t.normal.y*this.min.y}if(t.normal.z>0){e+=t.normal.z*this.min.z;n+=t.normal.z*this.max.z}else{e+=t.normal.z*this.max.z;n+=t.normal.z*this.min.z}return e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty()){return false}this.getCenter(ur);hr.subVectors(this.max,ur);rr.subVectors(t.a,ur);sr.subVectors(t.b,ur);ar.subVectors(t.c,ur);or.subVectors(sr,rr);lr.subVectors(ar,sr);cr.subVectors(rr,ar);let e=[0,-or.z,or.y,0,-lr.z,lr.y,0,-cr.z,cr.y,or.z,0,-or.x,lr.z,0,-lr.x,cr.z,0,-cr.x,-or.y,or.x,0,-lr.y,lr.x,0,-cr.y,cr.x,0];if(!pr(e,rr,sr,ar,hr)){return false}e=[1,0,0,0,1,0,0,0,1];if(!pr(e,rr,sr,ar,hr)){return false}dr.crossVectors(or,lr);e=[dr.x,dr.y,dr.z];return pr(e,rr,sr,ar,hr)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,nr).distanceTo(t)}getBoundingSphere(t){if(this.isEmpty()){t.makeEmpty()}else{this.getCenter(t.center);t.radius=this.getSize(nr).length()*.5}return t}intersect(t){this.min.max(t.min);this.max.min(t.max);if(this.isEmpty())this.makeEmpty();return this}union(t){this.min.min(t.min);this.max.max(t.max);return this}applyMatrix4(t){if(this.isEmpty())return this;er[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t);er[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t);er[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t);er[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t);er[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t);er[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t);er[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t);er[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t);this.setFromPoints(er);return this}translate(t){this.min.add(t);this.max.add(t);return this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(t){this.min.fromArray(t.min);this.max.fromArray(t.max);return this}}const er=[new xi,new xi,new xi,new xi,new xi,new xi,new xi,new xi];const nr=new xi;const ir=new tr;const rr=new xi;const sr=new xi;const ar=new xi;const or=new xi;const lr=new xi;const cr=new xi;const ur=new xi;const hr=new xi;const dr=new xi;const fr=new xi;function pr(t,e,n,i,r){for(let s=0,a=t.length-3;s<=a;s+=3){fr.fromArray(t,s);const a=r.x*Math.abs(fr.x)+r.y*Math.abs(fr.y)+r.z*Math.abs(fr.z);const o=e.dot(fr);const l=n.dot(fr);const c=i.dot(fr);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a){return false}}return true}const mr=new tr;const gr=new xi;const _r=new xi;class xr{constructor(t=new xi,e=-1){this.isSphere=true;this.center=t;this.radius=e}set(t,e){this.center.copy(t);this.radius=e;return this}setFromPackedArray(t){this.center.set(t[0],t[1],t[2]);this.radius=t[3];return this}static newFromPackedArray(t){return new xr(new xi(t[0],t[1],t[2]),t[3])}setFromPoints(t,e){const n=this.center;if(e!==undefined){n.copy(e)}else{mr.setFromPoints(t).getCenter(n)}let i=0;for(let e=0,r=t.length;e<r;e++){i=Math.max(i,n.distanceToSquared(t[e]))}this.radius=Math.sqrt(i);return this}copy(t){this.center.copy(t.center);this.radius=t.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);e.copy(t);if(n>this.radius*this.radius){e.sub(this.center).normalize();e.multiplyScalar(this.radius).add(this.center)}return e}getBoundingBox(t){if(this.isEmpty()){t.makeEmpty();return t}t.set(this.center,this.center);t.expandByScalar(this.radius);return t}applyMatrix4(t){this.center.applyMatrix4(t);this.radius=this.radius*t.getMaxScaleOnAxis();return this}translate(t){this.center.add(t);return this}expandByPoint(t){if(this.isEmpty()){this.center.copy(t);this.radius=0;return this}gr.subVectors(t,this.center);const e=gr.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e);const n=(t-this.radius)*.5;this.center.addScaledVector(gr,n/t);this.radius+=n}return this}union(t){if(t.isEmpty()){return this}if(this.isEmpty()){this.copy(t);return this}if(this.center.equals(t.center)===true){this.radius=Math.max(this.radius,t.radius)}else{_r.subVectors(t.center,this.center).setLength(t.radius);this.expandByPoint(gr.copy(t.center).add(_r));this.expandByPoint(gr.copy(t.center).sub(_r))}return this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(t){this.radius=t.radius;this.center.fromArray(t.center);return this}}const vr=new xi;const yr=new xi;const Mr=new xi;const Sr=new xi;const br=new xi;const Tr=new xi;const Er=new xi;class wr{constructor(t=new xi,e=new xi(0,0,-1)){this.origin=t;this.direction=e}set(t,e){this.origin.copy(t);this.direction.copy(e);return this}copy(t){this.origin.copy(t.origin);this.direction.copy(t.direction);return this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){this.direction.copy(t).sub(this.origin).normalize();return this}recast(t){this.origin.copy(this.at(t,vr));return this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);if(n<0){return e.copy(this.origin)}return e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=vr.subVectors(t,this.origin).dot(this.direction);if(e<0){return this.origin.distanceToSquared(t)}vr.copy(this.origin).addScaledVector(this.direction,e);return vr.distanceToSquared(t)}distanceSqToSegment(t,e,n,i){yr.copy(t).add(e).multiplyScalar(.5);Mr.copy(e).sub(t).normalize();Sr.copy(this.origin).sub(yr);const r=t.distanceTo(e)*.5;const s=-this.direction.dot(Mr);const a=Sr.dot(this.direction);const o=-Sr.dot(Mr);const l=Sr.lengthSq();const c=Math.abs(1-s*s);let u,h,d,f;if(c>0){u=s*o-a;h=s*a-o;f=r*c;if(u>=0){if(h>=-f){if(h<=f){const t=1/c;u*=t;h*=t;d=u*(u+s*h+2*a)+h*(s*u+h+2*o)+l}else{h=r;u=Math.max(0,-(s*h+a));d=-u*u+h*(h+2*o)+l}}else{h=-r;u=Math.max(0,-(s*h+a));d=-u*u+h*(h+2*o)+l}}else{if(h<=-f){u=Math.max(0,-(-s*r+a));h=u>0?-r:Math.min(Math.max(-r,-o),r);d=-u*u+h*(h+2*o)+l}else if(h<=f){u=0;h=Math.min(Math.max(-r,-o),r);d=h*(h+2*o)+l}else{u=Math.max(0,-(s*r+a));h=u>0?r:Math.min(Math.max(-r,-o),r);d=-u*u+h*(h+2*o)+l}}}else{h=s>0?-r:r;u=Math.max(0,-(s*h+a));d=-u*u+h*(h+2*o)+l}if(n){n.copy(this.origin).addScaledVector(this.direction,u)}if(i){i.copy(yr).addScaledVector(Mr,h)}return d}intersectSphere(t,e){vr.subVectors(t.center,this.origin);const n=vr.dot(this.direction);const i=vr.dot(vr)-n*n;const r=t.radius*t.radius;if(i>r)return null;const s=Math.sqrt(r-i);const a=n-s;const o=n+s;if(o<0)return null;if(a<0)return this.at(o,e);return this.at(a,e)}intersectsSphere(t){if(t.radius<0)return false;return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0){if(t.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);if(n===null){return null}return this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(e===0){return true}const n=t.normal.dot(this.direction);if(n*e<0){return true}return false}intersectBox(t,e){let n,i,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,u=1/this.direction.z;const h=this.origin;if(l>=0){n=(t.min.x-h.x)*l;i=(t.max.x-h.x)*l}else{n=(t.max.x-h.x)*l;i=(t.min.x-h.x)*l}if(c>=0){r=(t.min.y-h.y)*c;s=(t.max.y-h.y)*c}else{r=(t.max.y-h.y)*c;s=(t.min.y-h.y)*c}if(n>s||r>i)return null;if(r>n||isNaN(n))n=r;if(s<i||isNaN(i))i=s;if(u>=0){a=(t.min.z-h.z)*u;o=(t.max.z-h.z)*u}else{a=(t.max.z-h.z)*u;o=(t.min.z-h.z)*u}if(n>o||a>i)return null;if(a>n||n!==n)n=a;if(o<i||i!==i)i=o;if(i<0)return null;return this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,vr)!==null}intersectTriangle(t,e,n,i,r){br.subVectors(e,t);Tr.subVectors(n,t);Er.crossVectors(br,Tr);let s=this.direction.dot(Er);let a;if(s>0){if(i)return null;a=1}else if(s<0){a=-1;s=-s}else{return null}Sr.subVectors(this.origin,t);const o=a*this.direction.dot(Tr.crossVectors(Sr,Tr));if(o<0){return null}const l=a*this.direction.dot(br.cross(Sr));if(l<0){return null}if(o+l>s){return null}const c=-a*Sr.dot(Er);if(c<0){return null}return this.at(c/s,r)}applyMatrix4(t){this.origin.applyMatrix4(t);this.direction.transformDirection(t);return this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Ar{constructor(t,e,n,i,r,s,a,o,l,c,u,h,d,f,p,m){Ar.prototype.isMatrix4=true;this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(t!==undefined){this.set(t,e,n,i,r,s,a,o,l,c,u,h,d,f,p,m)}}set(t,e,n,i,r,s,a,o,l,c,u,h,d,f,p,m){const g=this.elements;g[0]=t;g[4]=e;g[8]=n;g[12]=i;g[1]=r;g[5]=s;g[9]=a;g[13]=o;g[2]=l;g[6]=c;g[10]=u;g[14]=h;g[3]=d;g[7]=f;g[11]=p;g[15]=m;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return(new Ar).fromArray(this.elements)}copy(t){const e=this.elements;const n=t.elements;e[0]=n[0];e[1]=n[1];e[2]=n[2];e[3]=n[3];e[4]=n[4];e[5]=n[5];e[6]=n[6];e[7]=n[7];e[8]=n[8];e[9]=n[9];e[10]=n[10];e[11]=n[11];e[12]=n[12];e[13]=n[13];e[14]=n[14];e[15]=n[15];return this}copyPosition(t){const e=this.elements,n=t.elements;e[12]=n[12];e[13]=n[13];e[14]=n[14];return this}setFromMatrix3(t){const e=t.elements;this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1);return this}extractBasis(t,e,n){t.setFromMatrixColumn(this,0);e.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(t,e,n){this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1);return this}extractRotation(t){const e=this.elements;const n=t.elements;const i=1/Cr.setFromMatrixColumn(t,0).length();const r=1/Cr.setFromMatrixColumn(t,1).length();const s=1/Cr.setFromMatrixColumn(t,2).length();e[0]=n[0]*i;e[1]=n[1]*i;e[2]=n[2]*i;e[3]=0;e[4]=n[4]*r;e[5]=n[5]*r;e[6]=n[6]*r;e[7]=0;e[8]=n[8]*s;e[9]=n[9]*s;e[10]=n[10]*s;e[11]=0;e[12]=0;e[13]=0;e[14]=0;e[15]=1;return this}makeRotationFromEuler(t){const e=this.elements;const n=t.x,i=t.y,r=t.z;const s=Math.cos(n),a=Math.sin(n);const o=Math.cos(i),l=Math.sin(i);const c=Math.cos(r),u=Math.sin(r);if(t.order==="XYZ"){const t=s*c,n=s*u,i=a*c,r=a*u;e[0]=o*c;e[4]=-o*u;e[8]=l;e[1]=n+i*l;e[5]=t-r*l;e[9]=-a*o;e[2]=r-t*l;e[6]=i+n*l;e[10]=s*o}else if(t.order==="YXZ"){const t=o*c,n=o*u,i=l*c,r=l*u;e[0]=t+r*a;e[4]=i*a-n;e[8]=s*l;e[1]=s*u;e[5]=s*c;e[9]=-a;e[2]=n*a-i;e[6]=r+t*a;e[10]=s*o}else if(t.order==="ZXY"){const t=o*c,n=o*u,i=l*c,r=l*u;e[0]=t-r*a;e[4]=-s*u;e[8]=i+n*a;e[1]=n+i*a;e[5]=s*c;e[9]=r-t*a;e[2]=-s*l;e[6]=a;e[10]=s*o}else if(t.order==="ZYX"){const t=s*c,n=s*u,i=a*c,r=a*u;e[0]=o*c;e[4]=i*l-n;e[8]=t*l+r;e[1]=o*u;e[5]=r*l+t;e[9]=n*l-i;e[2]=-l;e[6]=a*o;e[10]=s*o}else if(t.order==="YZX"){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c;e[4]=r-t*u;e[8]=i*u+n;e[1]=u;e[5]=s*c;e[9]=-a*c;e[2]=-l*c;e[6]=n*u+i;e[10]=t-r*u}else if(t.order==="XZY"){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c;e[4]=-u;e[8]=l*c;e[1]=t*u+r;e[5]=s*c;e[9]=n*u-i;e[2]=i*u-n;e[6]=a*c;e[10]=r*u+t}e[3]=0;e[7]=0;e[11]=0;e[12]=0;e[13]=0;e[14]=0;e[15]=1;return this}makeRotationFromQuaternion(t){return this.compose(Ir,t,Pr)}lookAt(t,e,n){const i=this.elements;Ur.subVectors(t,e);if(Ur.lengthSq()===0){Ur.z=1}Ur.normalize();Lr.crossVectors(n,Ur);if(Lr.lengthSq()===0){if(Math.abs(n.z)===1){Ur.x+=1e-4}else{Ur.z+=1e-4}Ur.normalize();Lr.crossVectors(n,Ur)}Lr.normalize();Dr.crossVectors(Ur,Lr);i[0]=Lr.x;i[4]=Dr.x;i[8]=Ur.x;i[1]=Lr.y;i[5]=Dr.y;i[9]=Ur.y;i[2]=Lr.z;i[6]=Dr.z;i[10]=Ur.z;return this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements;const i=e.elements;const r=this.elements;const s=n[0],a=n[4],o=n[8],l=n[12];const c=n[1],u=n[5],h=n[9],d=n[13];const f=n[2],p=n[6],m=n[10],g=n[14];const _=n[3],x=n[7],v=n[11],y=n[15];const M=i[0],S=i[4],b=i[8],T=i[12];const E=i[1],w=i[5],A=i[9],C=i[13];const R=i[2],I=i[6],P=i[10],L=i[14];const D=i[3],U=i[7],N=i[11],O=i[15];r[0]=s*M+a*E+o*R+l*D;r[4]=s*S+a*w+o*I+l*U;r[8]=s*b+a*A+o*P+l*N;r[12]=s*T+a*C+o*L+l*O;r[1]=c*M+u*E+h*R+d*D;r[5]=c*S+u*w+h*I+d*U;r[9]=c*b+u*A+h*P+d*N;r[13]=c*T+u*C+h*L+d*O;r[2]=f*M+p*E+m*R+g*D;r[6]=f*S+p*w+m*I+g*U;r[10]=f*b+p*A+m*P+g*N;r[14]=f*T+p*C+m*L+g*O;r[3]=_*M+x*E+v*R+y*D;r[7]=_*S+x*w+v*I+y*U;r[11]=_*b+x*A+v*P+y*N;r[15]=_*T+x*C+v*L+y*O;return this}multiplyScalar(t){const e=this.elements;e[0]*=t;e[4]*=t;e[8]*=t;e[12]*=t;e[1]*=t;e[5]*=t;e[9]*=t;e[13]*=t;e[2]*=t;e[6]*=t;e[10]*=t;e[14]*=t;e[3]*=t;e[7]*=t;e[11]*=t;e[15]*=t;return this}determinant(){const t=this.elements;const e=t[0],n=t[4],i=t[8],r=t[12];const s=t[1],a=t[5],o=t[9],l=t[13];const c=t[2],u=t[6],h=t[10],d=t[14];const f=t[3],p=t[7],m=t[11],g=t[15];return f*(+r*o*u-i*l*u-r*a*h+n*l*h+i*a*d-n*o*d)+p*(+e*o*d-e*l*h+r*s*h-i*s*d+i*l*c-r*o*c)+m*(+e*l*u-e*a*d-r*s*u+n*s*d+r*a*c-n*l*c)+g*(-i*a*c-e*o*u+e*a*h+i*s*u-n*s*h+n*o*c)}transpose(){const t=this.elements;let e;e=t[1];t[1]=t[4];t[4]=e;e=t[2];t[2]=t[8];t[8]=e;e=t[6];t[6]=t[9];t[9]=e;e=t[3];t[3]=t[12];t[12]=e;e=t[7];t[7]=t[13];t[13]=e;e=t[11];t[11]=t[14];t[14]=e;return this}setPosition(t,e,n){const i=this.elements;if(t.isVector3){i[12]=t.x;i[13]=t.y;i[14]=t.z}else{i[12]=t;i[13]=e;i[14]=n}return this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],u=t[9],h=t[10],d=t[11],f=t[12],p=t[13],m=t[14],g=t[15],_=u*m*l-p*h*l+p*o*d-a*m*d-u*o*g+a*h*g,x=f*h*l-c*m*l-f*o*d+s*m*d+c*o*g-s*h*g,v=c*p*l-f*u*l+f*a*d-s*p*d-c*a*g+s*u*g,y=f*u*o-c*p*o-f*a*h+s*p*h+c*a*m-s*u*m;const M=e*_+n*x+i*v+r*y;if(M===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/M;t[0]=_*S;t[1]=(p*h*r-u*m*r-p*i*d+n*m*d+u*i*g-n*h*g)*S;t[2]=(a*m*r-p*o*r+p*i*l-n*m*l-a*i*g+n*o*g)*S;t[3]=(u*o*r-a*h*r-u*i*l+n*h*l+a*i*d-n*o*d)*S;t[4]=x*S;t[5]=(c*m*r-f*h*r+f*i*d-e*m*d-c*i*g+e*h*g)*S;t[6]=(f*o*r-s*m*r-f*i*l+e*m*l+s*i*g-e*o*g)*S;t[7]=(s*h*r-c*o*r+c*i*l-e*h*l-s*i*d+e*o*d)*S;t[8]=v*S;t[9]=(f*u*r-c*p*r-f*n*d+e*p*d+c*n*g-e*u*g)*S;t[10]=(s*p*r-f*a*r+f*n*l-e*p*l-s*n*g+e*a*g)*S;t[11]=(c*a*r-s*u*r-c*n*l+e*u*l+s*n*d-e*a*d)*S;t[12]=y*S;t[13]=(c*p*i-f*u*i+f*n*h-e*p*h-c*n*m+e*u*m)*S;t[14]=(f*a*i-s*p*i-f*n*o+e*p*o+s*n*m-e*a*m)*S;t[15]=(s*u*i-c*a*i+c*n*o-e*u*o-s*n*h+e*a*h)*S;return this}scale(t){const e=this.elements;const n=t.x,i=t.y,r=t.z;e[0]*=n;e[4]*=i;e[8]*=r;e[1]*=n;e[5]*=i;e[9]*=r;e[2]*=n;e[6]*=i;e[10]*=r;e[3]*=n;e[7]*=i;e[11]*=r;return this}getMaxScaleOnAxis(){const t=this.elements;const e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2];const n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6];const i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){if(t.isVector3){this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1)}else{this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1)}return this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1);return this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1);return this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(t,e){const n=Math.cos(e);const i=Math.sin(e);const r=1-n;const s=t.x,a=t.y,o=t.z;const l=r*s,c=r*a;this.set(l*s+n,l*a-i*o,l*o+i*a,0,l*a+i*o,c*a+n,c*o-i*s,0,l*o-i*a,c*o+i*s,r*o*o+n,0,0,0,0,1);return this}makeScale(t,e,n){this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1);return this}makeShear(t,e,n,i,r,s){this.set(1,n,r,0,t,1,s,0,e,i,1,0,0,0,0,1);return this}compose(t,e,n){const i=this.elements;const r=e._x,s=e._y,a=e._z,o=e._w;const l=r+r,c=s+s,u=a+a;const h=r*l,d=r*c,f=r*u;const p=s*c,m=s*u,g=a*u;const _=o*l,x=o*c,v=o*u;const y=n.x,M=n.y,S=n.z;i[0]=(1-(p+g))*y;i[1]=(d+v)*y;i[2]=(f-x)*y;i[3]=0;i[4]=(d-v)*M;i[5]=(1-(h+g))*M;i[6]=(m+_)*M;i[7]=0;i[8]=(f+x)*S;i[9]=(m-_)*S;i[10]=(1-(h+p))*S;i[11]=0;i[12]=t.x;i[13]=t.y;i[14]=t.z;i[15]=1;return this}decompose(t,e,n){const i=this.elements;let r=Cr.set(i[0],i[1],i[2]).length();const s=Cr.set(i[4],i[5],i[6]).length();const a=Cr.set(i[8],i[9],i[10]).length();const o=this.determinant();if(o<0)r=-r;t.x=i[12];t.y=i[13];t.z=i[14];Rr.copy(this);const l=1/r;const c=1/s;const u=1/a;Rr.elements[0]*=l;Rr.elements[1]*=l;Rr.elements[2]*=l;Rr.elements[4]*=c;Rr.elements[5]*=c;Rr.elements[6]*=c;Rr.elements[8]*=u;Rr.elements[9]*=u;Rr.elements[10]*=u;e.setFromRotationMatrix(Rr);n.x=r;n.y=s;n.z=a;return this}makePerspective(t,e,n,i,r,s,a=Fn){const o=this.elements;const l=2*r/(e-t);const c=2*r/(n-i);const u=(e+t)/(e-t);const h=(n+i)/(n-i);let d,f;if(a===Fn){d=-(s+r)/(s-r);f=-2*s*r/(s-r)}else if(a===Bn){d=-s/(s-r);f=-s*r/(s-r)}else{throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a)}o[0]=l;o[4]=0;o[8]=u;o[12]=0;o[1]=0;o[5]=c;o[9]=h;o[13]=0;o[2]=0;o[6]=0;o[10]=d;o[14]=f;o[3]=0;o[7]=0;o[11]=-1;o[15]=0;return this}makeOrthographic(t,e,n,i,r,s,a=Fn){const o=this.elements;const l=1/(e-t);const c=1/(n-i);const u=1/(s-r);const h=(e+t)*l;const d=(n+i)*c;let f,p;if(a===Fn){f=(s+r)*u;p=-2*u}else if(a===Bn){f=r*u;p=-1*u}else{throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a)}o[0]=2*l;o[4]=0;o[8]=0;o[12]=-h;o[1]=0;o[5]=2*c;o[9]=0;o[13]=-d;o[2]=0;o[6]=0;o[10]=p;o[14]=-f;o[3]=0;o[7]=0;o[11]=0;o[15]=1;return this}equals(t){const e=this.elements;const n=t.elements;for(let t=0;t<16;t++){if(e[t]!==n[t])return false}return true}fromArray(t,e=0){for(let n=0;n<16;n++){this.elements[n]=t[n+e]}return this}toArray(t=[],e=0){const n=this.elements;t[e]=n[0];t[e+1]=n[1];t[e+2]=n[2];t[e+3]=n[3];t[e+4]=n[4];t[e+5]=n[5];t[e+6]=n[6];t[e+7]=n[7];t[e+8]=n[8];t[e+9]=n[9];t[e+10]=n[10];t[e+11]=n[11];t[e+12]=n[12];t[e+13]=n[13];t[e+14]=n[14];t[e+15]=n[15];return t}}const Cr=new xi;const Rr=new Ar;const Ir=new xi(0,0,0);const Pr=new xi(1,1,1);const Lr=new xi;const Dr=new xi;const Ur=new xi;const Nr=new Ar;const Or=new _i;class Fr{constructor(t=0,e=0,n=0,i=Fr.DEFAULT_ORDER){this.isEuler=true;this._x=t;this._y=e;this._z=n;this._order=i}get x(){return this._x}set x(t){this._x=t;this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t;this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t;this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t;this._onChangeCallback()}set(t,e,n,i=this._order){this._x=t;this._y=e;this._z=n;this._order=i;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){this._x=t._x;this._y=t._y;this._z=t._z;this._order=t._order;this._onChangeCallback();return this}setFromRotationMatrix(t,e=this._order,n=true){const i=t.elements;const r=i[0],s=i[4],a=i[8];const o=i[1],l=i[5],c=i[9];const u=i[2],h=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(Yn(a,-1,1));if(Math.abs(a)<.9999999){this._x=Math.atan2(-c,d);this._z=Math.atan2(-s,r)}else{this._x=Math.atan2(h,l);this._z=0}break;case"YXZ":this._x=Math.asin(-Yn(c,-1,1));if(Math.abs(c)<.9999999){this._y=Math.atan2(a,d);this._z=Math.atan2(o,l)}else{this._y=Math.atan2(-u,r);this._z=0}break;case"ZXY":this._x=Math.asin(Yn(h,-1,1));if(Math.abs(h)<.9999999){this._y=Math.atan2(-u,d);this._z=Math.atan2(-s,l)}else{this._y=0;this._z=Math.atan2(o,r)}break;case"ZYX":this._y=Math.asin(-Yn(u,-1,1));if(Math.abs(u)<.9999999){this._x=Math.atan2(h,d);this._z=Math.atan2(o,r)}else{this._x=0;this._z=Math.atan2(-s,l)}break;case"YZX":this._z=Math.asin(Yn(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(-c,l);this._y=Math.atan2(-u,r)}else{this._x=0;this._y=Math.atan2(a,d)}break;case"XZY":this._z=Math.asin(-Yn(s,-1,1));if(Math.abs(s)<.9999999){this._x=Math.atan2(h,l);this._y=Math.atan2(a,r)}else{this._x=Math.atan2(-c,d);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}this._order=e;if(n===true)this._onChangeCallback();return this}setFromQuaternion(t,e,n){Nr.makeRotationFromQuaternion(t);return this.setFromRotationMatrix(Nr,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){Or.setFromEuler(this);return this.setFromQuaternion(Or,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){this._x=t[0];this._y=t[1];this._z=t[2];if(t[3]!==undefined)this._order=t[3];this._onChangeCallback();return this}toArray(t=[],e=0){t[e]=this._x;t[e+1]=this._y;t[e+2]=this._z;t[e+3]=this._order;return t}_onChange(t){this._onChangeCallback=t;return this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x;yield this._y;yield this._z;yield this._order}}Fr.DEFAULT_ORDER="XYZ";class Br{constructor(){this.mask=1|0}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=4294967295|0}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let zr=0;const kr=new xi;const Vr=new _i;const Gr=new Ar;const Hr=new xi;const Wr=new xi;const Xr=new xi;const jr=new _i;const qr=new xi(1,0,0);const Yr=new xi(0,1,0);const Zr=new xi(0,0,1);const Jr={type:"added"};const Kr={type:"removed"};const $r={type:"childadded",child:null};const Qr={type:"childremoved",child:null};class ts extends Gn{constructor(){super();this.isObject3D=true;Object.defineProperty(this,"id",{value:zr++});this.uuid=qn();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=ts.DEFAULT_UP.clone();const t=new xi;const e=new Fr;const n=new _i;const i=new xi(1,1,1);function r(){n.setFromEuler(e,false)}function s(){e.setFromQuaternion(n,undefined,false)}e._onChange(r);n._onChange(s);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:t},rotation:{configurable:true,enumerable:true,value:e},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:i},modelViewMatrix:{value:new Ar},normalMatrix:{value:new Mi}});this.matrix=new Ar;this.matrixWorld=new Ar;this.matrixAutoUpdate=ts.DEFAULT_MATRIX_AUTO_UPDATE;this.matrixWorldAutoUpdate=ts.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;this.matrixWorldNeedsUpdate=false;this.layers=new Br;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.customDepthMaterial=undefined;this.customDistanceMaterial=undefined;this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(t);this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){this.quaternion.premultiply(t);return this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,true)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){Vr.setFromAxisAngle(t,e);this.quaternion.multiply(Vr);return this}rotateOnWorldAxis(t,e){Vr.setFromAxisAngle(t,e);this.quaternion.premultiply(Vr);return this}rotateX(t){return this.rotateOnAxis(qr,t)}rotateY(t){return this.rotateOnAxis(Yr,t)}rotateZ(t){return this.rotateOnAxis(Zr,t)}translateOnAxis(t,e){kr.copy(t).applyQuaternion(this.quaternion);this.position.add(kr.multiplyScalar(e));return this}translateX(t){return this.translateOnAxis(qr,t)}translateY(t){return this.translateOnAxis(Yr,t)}translateZ(t){return this.translateOnAxis(Zr,t)}localToWorld(t){this.updateWorldMatrix(true,false);return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){this.updateWorldMatrix(true,false);return t.applyMatrix4(Gr.copy(this.matrixWorld).invert())}lookAt(t,e,n){if(t.isVector3){Hr.copy(t)}else{Hr.set(t,e,n)}const i=this.parent;this.updateWorldMatrix(true,false);Wr.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){Gr.lookAt(Wr,Hr,this.up)}else{Gr.lookAt(Hr,Wr,this.up)}this.quaternion.setFromRotationMatrix(Gr);if(i){Gr.extractRotation(i.matrixWorld);Vr.setFromRotationMatrix(Gr);this.quaternion.premultiply(Vr.invert())}}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++){this.add(arguments[t])}return this}if(t===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",t);return this}if(t&&t.isObject3D){t.removeFromParent();t.parent=this;this.children.push(t);t.dispatchEvent(Jr);$r.child=t;this.dispatchEvent($r);$r.child=null}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t)}return this}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++){this.remove(arguments[t])}return this}const e=this.children.indexOf(t);if(e!==-1){t.parent=null;this.children.splice(e,1);t.dispatchEvent(Kr);Qr.child=t;this.dispatchEvent(Qr);Qr.child=null}return this}removeFromParent(){const t=this.parent;if(t!==null){t.remove(this)}return this}clear(){return this.remove(...this.children)}attach(t){this.updateWorldMatrix(true,false);Gr.copy(this.matrixWorld).invert();if(t.parent!==null){t.parent.updateWorldMatrix(true,false);Gr.multiply(t.parent.matrixWorld)}t.applyMatrix4(Gr);t.removeFromParent();t.parent=this;this.children.push(t);t.updateWorldMatrix(false,true);t.dispatchEvent(Jr);$r.child=t;this.dispatchEvent($r);$r.child=null;return this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n];const r=i.getObjectByProperty(t,e);if(r!==undefined){return r}}return undefined}getObjectsByProperty(t,e,n=[]){if(this[t]===e)n.push(this);const i=this.children;for(let r=0,s=i.length;r<s;r++){i[r].getObjectsByProperty(t,e,n)}return n}getWorldPosition(t){this.updateWorldMatrix(true,false);return t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(Wr,t,Xr);return t}getWorldScale(t){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(Wr,jr,t);return t}getWorldDirection(t){this.updateWorldMatrix(true,false);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++){e[n].traverse(t)}}traverseVisible(t){if(this.visible===false)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++){e[n].traverseVisible(t)}}traverseAncestors(t){const e=this.parent;if(e!==null){t(e);e.traverseAncestors(t)}}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true}updateMatrixWorld(t){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||t){if(this.matrixWorldAutoUpdate===true){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}}this.matrixWorldNeedsUpdate=false;t=true}const e=this.children;for(let n=0,i=e.length;n<i;n++){const i=e[n];i.updateMatrixWorld(t)}}updateWorldMatrix(t,e){const n=this.parent;if(t===true&&n!==null){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldAutoUpdate===true){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}}if(e===true){const t=this.children;for(let e=0,n=t.length;e<n;e++){const n=t[e];n.updateWorldMatrix(false,true)}}}toJSON(t){const e=t===undefined||typeof t==="string";const n={};if(e){t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};n.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"}}const i={};i.uuid=this.uuid;i.type=this.type;if(this.name!=="")i.name=this.name;if(this.castShadow===true)i.castShadow=true;if(this.receiveShadow===true)i.receiveShadow=true;if(this.visible===false)i.visible=false;if(this.frustumCulled===false)i.frustumCulled=false;if(this.renderOrder!==0)i.renderOrder=this.renderOrder;if(Object.keys(this.userData).length>0)i.userData=this.userData;i.layers=this.layers.mask;i.matrix=this.matrix.toArray();i.up=this.up.toArray();if(this.matrixAutoUpdate===false)i.matrixAutoUpdate=false;if(this.isInstancedMesh){i.type="InstancedMesh";i.count=this.count;i.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)i.instanceColor=this.instanceColor.toJSON()}if(this.isBatchedMesh){i.type="BatchedMesh";i.perObjectFrustumCulled=this.perObjectFrustumCulled;i.sortObjects=this.sortObjects;i.drawRanges=this._drawRanges;i.reservedRanges=this._reservedRanges;i.geometryInfo=this._geometryInfo.map(t=>({...t,boundingBox:t.boundingBox?t.boundingBox.toJSON():undefined,boundingSphere:t.boundingSphere?t.boundingSphere.toJSON():undefined}));i.instanceInfo=this._instanceInfo.map(t=>({...t}));i.availableInstanceIds=this._availableInstanceIds.slice();i.availableGeometryIds=this._availableGeometryIds.slice();i.nextIndexStart=this._nextIndexStart;i.nextVertexStart=this._nextVertexStart;i.geometryCount=this._geometryCount;i.maxInstanceCount=this._maxInstanceCount;i.maxVertexCount=this._maxVertexCount;i.maxIndexCount=this._maxIndexCount;i.geometryInitialized=this._geometryInitialized;i.matricesTexture=this._matricesTexture.toJSON(t);i.indirectTexture=this._indirectTexture.toJSON(t);if(this._colorsTexture!==null){i.colorsTexture=this._colorsTexture.toJSON(t)}if(this.boundingSphere!==null){i.boundingSphere=this.boundingSphere.toJSON()}if(this.boundingBox!==null){i.boundingBox=this.boundingBox.toJSON()}}function r(e,n){if(e[n.uuid]===undefined){e[n.uuid]=n.toJSON(t)}return n.uuid}if(this.isScene){if(this.background){if(this.background.isColor){i.background=this.background.toJSON()}else if(this.background.isTexture){i.background=this.background.toJSON(t).uuid}}if(this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==true){i.environment=this.environment.toJSON(t).uuid}}else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(e!==undefined&&e.shapes!==undefined){const n=e.shapes;if(Array.isArray(n)){for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}}else{r(t.shapes,n)}}}if(this.isSkinnedMesh){i.bindMode=this.bindMode;i.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==undefined){r(t.skeletons,this.skeleton);i.skeleton=this.skeleton.uuid}}if(this.material!==undefined){if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++){e.push(r(t.materials,this.material[n]))}i.material=e}else{i.material=r(t.materials,this.material)}}if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++){i.children.push(this.children[e].toJSON(t).object)}}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=s(t.geometries);const i=s(t.materials);const r=s(t.textures);const a=s(t.images);const o=s(t.shapes);const l=s(t.skeletons);const c=s(t.animations);const u=s(t.nodes);if(e.length>0)n.geometries=e;if(i.length>0)n.materials=i;if(r.length>0)n.textures=r;if(a.length>0)n.images=a;if(o.length>0)n.shapes=o;if(l.length>0)n.skeletons=l;if(c.length>0)n.animations=c;if(u.length>0)n.nodes=u}n.object=i;return n;function s(t){const e=[];for(const n in t){const i=t[n];delete i.metadata;e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=true){this.name=t.name;this.up.copy(t.up);this.position.copy(t.position);this.rotation.order=t.rotation.order;this.quaternion.copy(t.quaternion);this.scale.copy(t.scale);this.matrix.copy(t.matrix);this.matrixWorld.copy(t.matrixWorld);this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate;this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate;this.layers.mask=t.layers.mask;this.visible=t.visible;this.castShadow=t.castShadow;this.receiveShadow=t.receiveShadow;this.frustumCulled=t.frustumCulled;this.renderOrder=t.renderOrder;this.animations=t.animations.slice();this.userData=JSON.parse(JSON.stringify(t.userData));if(e===true){for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}}return this}}ts.DEFAULT_UP=new xi(0,1,0);ts.DEFAULT_MATRIX_AUTO_UPDATE=true;ts.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=true;const es=new xi;const ns=new xi;const is=new xi;const rs=new xi;const ss=new xi;const as=new xi;const os=new xi;const ls=new xi;const cs=new xi;const us=new xi;const hs=new qi;const ds=new qi;const fs=new qi;class ps{constructor(t=new xi,e=new xi,n=new xi){this.a=t;this.b=e;this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e);es.subVectors(t,e);i.cross(es);const r=i.lengthSq();if(r>0){return i.multiplyScalar(1/Math.sqrt(r))}return i.set(0,0,0)}static getBarycoord(t,e,n,i,r){es.subVectors(i,e);ns.subVectors(n,e);is.subVectors(t,e);const s=es.dot(es);const a=es.dot(ns);const o=es.dot(is);const l=ns.dot(ns);const c=ns.dot(is);const u=s*l-a*a;if(u===0){r.set(0,0,0);return null}const h=1/u;const d=(l*o-a*c)*h;const f=(s*c-a*o)*h;return r.set(1-d-f,f,d)}static containsPoint(t,e,n,i){if(this.getBarycoord(t,e,n,i,rs)===null){return false}return rs.x>=0&&rs.y>=0&&rs.x+rs.y<=1}static getInterpolation(t,e,n,i,r,s,a,o){if(this.getBarycoord(t,e,n,i,rs)===null){o.x=0;o.y=0;if("z"in o)o.z=0;if("w"in o)o.w=0;return null}o.setScalar(0);o.addScaledVector(r,rs.x);o.addScaledVector(s,rs.y);o.addScaledVector(a,rs.z);return o}static getInterpolatedAttribute(t,e,n,i,r,s){hs.setScalar(0);ds.setScalar(0);fs.setScalar(0);hs.fromBufferAttribute(t,e);ds.fromBufferAttribute(t,n);fs.fromBufferAttribute(t,i);s.setScalar(0);s.addScaledVector(hs,r.x);s.addScaledVector(ds,r.y);s.addScaledVector(fs,r.z);return s}static isFrontFacing(t,e,n,i){es.subVectors(n,e);ns.subVectors(t,e);return es.cross(ns).dot(i)<0?true:false}set(t,e,n){this.a.copy(t);this.b.copy(e);this.c.copy(n);return this}setFromPointsAndIndices(t,e,n,i){this.a.copy(t[e]);this.b.copy(t[n]);this.c.copy(t[i]);return this}setFromAttributeAndIndices(t,e,n,i){this.a.fromBufferAttribute(t,e);this.b.fromBufferAttribute(t,n);this.c.fromBufferAttribute(t,i);return this}clone(){return(new this.constructor).copy(this)}copy(t){this.a.copy(t.a);this.b.copy(t.b);this.c.copy(t.c);return this}getArea(){es.subVectors(this.c,this.b);ns.subVectors(this.a,this.b);return es.cross(ns).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return ps.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return ps.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,i,r){return ps.getInterpolation(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return ps.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return ps.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let s,a;
// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
// under the accompanying license; see chapter 5.1.5 for detailed explanation.
ss.subVectors(i,n);as.subVectors(r,n);ls.subVectors(t,n);const o=ss.dot(ls);const l=as.dot(ls);if(o<=0&&l<=0){return e.copy(n)}cs.subVectors(t,i);const c=ss.dot(cs);const u=as.dot(cs);if(c>=0&&u<=c){return e.copy(i)}const h=o*u-c*l;if(h<=0&&o>=0&&c<=0){s=o/(o-c);return e.copy(n).addScaledVector(ss,s)}us.subVectors(t,r);const d=ss.dot(us);const f=as.dot(us);if(f>=0&&d<=f){return e.copy(r)}const p=d*l-o*f;if(p<=0&&l>=0&&f<=0){a=l/(l-f);return e.copy(n).addScaledVector(as,a)}const m=c*f-d*u;if(m<=0&&u-c>=0&&d-f>=0){os.subVectors(r,i);a=(u-c)/(u-c+(d-f));return e.copy(i).addScaledVector(os,a)}const g=1/(m+p+h);s=p*g;a=h*g;return e.copy(n).addScaledVector(ss,s).addScaledVector(as,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const ms={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};const gs={h:0,s:0,l:0};const _s={h:0,s:0,l:0};function xs(t,e,n){if(n<0)n+=1;if(n>1)n-=1;if(n<1/6)return t+(e-t)*6*n;if(n<1/2)return e;if(n<2/3)return t+(e-t)*6*(2/3-n);return t}class vs{constructor(t,e,n){this.isColor=true;this.r=1;this.g=1;this.b=1;return this.set(t,e,n)}set(t,e,n){if(e===undefined&&n===undefined){const e=t;if(e&&e.isColor){this.copy(e)}else if(typeof e==="number"){this.setHex(e)}else if(typeof e==="string"){this.setStyle(e)}}else{this.setRGB(t,e,n)}return this}setScalar(t){this.r=t;this.g=t;this.b=t;return this}setHex(t,e=Ke){t=Math.floor(t);this.r=(t>>16&255)/255;this.g=(t>>8&255)/255;this.b=(t&255)/255;Oi.colorSpaceToWorking(this,e);return this}setRGB(t,e,n,i=Oi.workingColorSpace){this.r=t;this.g=e;this.b=n;Oi.colorSpaceToWorking(this,i);return this}setHSL(t,e,n,i=Oi.workingColorSpace){t=Zn(t,1);e=Yn(e,0,1);n=Yn(n,0,1);if(e===0){this.r=this.g=this.b=n}else{const i=n<=.5?n*(1+e):n+e-n*e;const r=2*n-i;this.r=xs(r,i,t+1/3);this.g=xs(r,i,t);this.b=xs(r,i,t-1/3)}Oi.colorSpaceToWorking(this,i);return this}setStyle(t,e=Ke){function n(e){if(e===undefined)return;if(parseFloat(e)<1){console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}}let i;if(i=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const s=i[1];const a=i[2];switch(s){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(r[4]);return this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e)}if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(r[4]);return this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e)}break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a)){n(r[4]);return this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e)}break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const n=i[1];const r=n.length;if(r===3){return this.setRGB(parseInt(n.charAt(0),16)/15,parseInt(n.charAt(1),16)/15,parseInt(n.charAt(2),16)/15,e)}else if(r===6){return this.setHex(parseInt(n,16),e)}else{console.warn("THREE.Color: Invalid hex color "+t)}}else if(t&&t.length>0){return this.setColorName(t,e)}return this}setColorName(t,e=Ke){const n=ms[t.toLowerCase()];if(n!==undefined){this.setHex(n,e)}else{console.warn("THREE.Color: Unknown color "+t)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){this.r=t.r;this.g=t.g;this.b=t.b;return this}copySRGBToLinear(t){this.r=Fi(t.r);this.g=Fi(t.g);this.b=Fi(t.b);return this}copyLinearToSRGB(t){this.r=Bi(t.r);this.g=Bi(t.g);this.b=Bi(t.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(t=Ke){Oi.workingToColorSpace(ys.copy(this),t);return Math.round(Yn(ys.r*255,0,255))*65536+Math.round(Yn(ys.g*255,0,255))*256+Math.round(Yn(ys.b*255,0,255))}getHexString(t=Ke){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=Oi.workingColorSpace){Oi.workingToColorSpace(ys.copy(this),e);const n=ys.r,i=ys.g,r=ys.b;const s=Math.max(n,i,r);const a=Math.min(n,i,r);let o,l;const c=(a+s)/2;if(a===s){o=0;l=0}else{const t=s-a;l=c<=.5?t/(s+a):t/(2-s-a);switch(s){case n:o=(i-r)/t+(i<r?6:0);break;case i:o=(r-n)/t+2;break;case r:o=(n-i)/t+4;break}o/=6}t.h=o;t.s=l;t.l=c;return t}getRGB(t,e=Oi.workingColorSpace){Oi.workingToColorSpace(ys.copy(this),e);t.r=ys.r;t.g=ys.g;t.b=ys.b;return t}getStyle(t=Ke){Oi.workingToColorSpace(ys.copy(this),t);const e=ys.r,n=ys.g,i=ys.b;if(t!==Ke){return`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})`}return`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(i*255)})`}offsetHSL(t,e,n){this.getHSL(gs);return this.setHSL(gs.h+t,gs.s+e,gs.l+n)}add(t){this.r+=t.r;this.g+=t.g;this.b+=t.b;return this}addColors(t,e){this.r=t.r+e.r;this.g=t.g+e.g;this.b=t.b+e.b;return this}addScalar(t){this.r+=t;this.g+=t;this.b+=t;return this}sub(t){this.r=Math.max(0,this.r-t.r);this.g=Math.max(0,this.g-t.g);this.b=Math.max(0,this.b-t.b);return this}multiply(t){this.r*=t.r;this.g*=t.g;this.b*=t.b;return this}multiplyScalar(t){this.r*=t;this.g*=t;this.b*=t;return this}lerp(t,e){this.r+=(t.r-this.r)*e;this.g+=(t.g-this.g)*e;this.b+=(t.b-this.b)*e;return this}lerpColors(t,e,n){this.r=t.r+(e.r-t.r)*n;this.g=t.g+(e.g-t.g)*n;this.b=t.b+(e.b-t.b)*n;return this}lerpHSL(t,e){this.getHSL(gs);t.getHSL(_s);const n=$n(gs.h,_s.h,e);const i=$n(gs.s,_s.s,e);const r=$n(gs.l,_s.l,e);this.setHSL(n,i,r);return this}setFromVector3(t){this.r=t.x;this.g=t.y;this.b=t.z;return this}applyMatrix3(t){const e=this.r,n=this.g,i=this.b;const r=t.elements;this.r=r[0]*e+r[3]*n+r[6]*i;this.g=r[1]*e+r[4]*n+r[7]*i;this.b=r[2]*e+r[5]*n+r[8]*i;return this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){this.r=t[e];this.g=t[e+1];this.b=t[e+2];return this}toArray(t=[],e=0){t[e]=this.r;t[e+1]=this.g;t[e+2]=this.b;return t}fromBufferAttribute(t,e){this.r=t.getX(e);this.g=t.getY(e);this.b=t.getZ(e);return this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r;yield this.g;yield this.b}}const ys=new vs;vs.NAMES=ms;let Ms=0;class Ss extends Gn{constructor(){super();this.isMaterial=true;Object.defineProperty(this,"id",{value:Ms++});this.uuid=qn();this.name="";this.type="Material";this.blending=x;this.side=p;this.vertexColors=false;this.opacity=1;this.transparent=false;this.alphaHash=false;this.blendSrc=L;this.blendDst=D;this.blendEquation=b;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.blendColor=new vs(0,0,0);this.blendAlpha=0;this.depthFunc=j;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=_n;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=nn;this.stencilZFail=nn;this.stencilZPass=nn;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaToCoverage=false;this.premultipliedAlpha=false;this.forceSinglePass=false;this.allowOverride=true;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){if(this._alphaTest>0!==t>0){this.version++}this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t===undefined)return;for(const e in t){const n=t[e];if(n===undefined){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const i=this[e];if(i===undefined){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}if(i&&i.isColor){i.set(n)}else if(i&&i.isVector3&&(n&&n.isVector3)){i.copy(n)}else{this[e]=n}}}toJSON(t){const e=t===undefined||typeof t==="string";if(e){t={textures:{},images:{}}}const n={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==undefined)n.roughness=this.roughness;if(this.metalness!==undefined)n.metalness=this.metalness;if(this.sheen!==undefined)n.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)n.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==undefined)n.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity!==undefined&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.specularIntensity!==undefined)n.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)n.specularColor=this.specularColor.getHex();if(this.shininess!==undefined)n.shininess=this.shininess;if(this.clearcoat!==undefined)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.dispersion!==undefined)n.dispersion=this.dispersion;if(this.iridescence!==undefined)n.iridescence=this.iridescence;if(this.iridescenceIOR!==undefined)n.iridescenceIOR=this.iridescenceIOR;if(this.iridescenceThicknessRange!==undefined)n.iridescenceThicknessRange=this.iridescenceThicknessRange;if(this.iridescenceMap&&this.iridescenceMap.isTexture){n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid}if(this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture){n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid}if(this.anisotropy!==undefined)n.anisotropy=this.anisotropy;if(this.anisotropyRotation!==undefined)n.anisotropyRotation=this.anisotropyRotation;if(this.anisotropyMap&&this.anisotropyMap.isTexture){n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(t).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(t).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(t).uuid;if(this.lightMap&&this.lightMap.isTexture){n.lightMap=this.lightMap.toJSON(t).uuid;n.lightMapIntensity=this.lightMapIntensity}if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(t).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(t).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(t).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(t).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(t).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(t).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(t).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(t).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)n.specularColorMap=this.specularColorMap.toJSON(t).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(t).uuid;if(this.combine!==undefined)n.combine=this.combine}if(this.envMapRotation!==undefined)n.envMapRotation=this.envMapRotation.toArray();if(this.envMapIntensity!==undefined)n.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==undefined)n.reflectivity=this.reflectivity;if(this.refractionRatio!==undefined)n.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(t).uuid}if(this.transmission!==undefined)n.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)n.transmissionMap=this.transmissionMap.toJSON(t).uuid;if(this.thickness!==undefined)n.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)n.thicknessMap=this.thicknessMap.toJSON(t).uuid;if(this.attenuationDistance!==undefined&&this.attenuationDistance!==Infinity)n.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==undefined)n.attenuationColor=this.attenuationColor.getHex();if(this.size!==undefined)n.size=this.size;if(this.shadowSide!==null)n.shadowSide=this.shadowSide;if(this.sizeAttenuation!==undefined)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==x)n.blending=this.blending;if(this.side!==p)n.side=this.side;if(this.vertexColors===true)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=true;if(this.blendSrc!==L)n.blendSrc=this.blendSrc;if(this.blendDst!==D)n.blendDst=this.blendDst;if(this.blendEquation!==b)n.blendEquation=this.blendEquation;if(this.blendSrcAlpha!==null)n.blendSrcAlpha=this.blendSrcAlpha;if(this.blendDstAlpha!==null)n.blendDstAlpha=this.blendDstAlpha;if(this.blendEquationAlpha!==null)n.blendEquationAlpha=this.blendEquationAlpha;if(this.blendColor&&this.blendColor.isColor)n.blendColor=this.blendColor.getHex();if(this.blendAlpha!==0)n.blendAlpha=this.blendAlpha;if(this.depthFunc!==j)n.depthFunc=this.depthFunc;if(this.depthTest===false)n.depthTest=this.depthTest;if(this.depthWrite===false)n.depthWrite=this.depthWrite;if(this.colorWrite===false)n.colorWrite=this.colorWrite;if(this.stencilWriteMask!==255)n.stencilWriteMask=this.stencilWriteMask;if(this.stencilFunc!==_n)n.stencilFunc=this.stencilFunc;if(this.stencilRef!==0)n.stencilRef=this.stencilRef;if(this.stencilFuncMask!==255)n.stencilFuncMask=this.stencilFuncMask;if(this.stencilFail!==nn)n.stencilFail=this.stencilFail;if(this.stencilZFail!==nn)n.stencilZFail=this.stencilZFail;if(this.stencilZPass!==nn)n.stencilZPass=this.stencilZPass;if(this.stencilWrite===true)n.stencilWrite=this.stencilWrite;if(this.rotation!==undefined&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==undefined&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==undefined)n.dashSize=this.dashSize;if(this.gapSize!==undefined)n.gapSize=this.gapSize;if(this.scale!==undefined)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.alphaHash===true)n.alphaHash=true;if(this.alphaToCoverage===true)n.alphaToCoverage=true;if(this.premultipliedAlpha===true)n.premultipliedAlpha=true;if(this.forceSinglePass===true)n.forceSinglePass=true;if(this.wireframe===true)n.wireframe=true;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)n.flatShading=true;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(this.fog===false)n.fog=false;if(Object.keys(this.userData).length>0)n.userData=this.userData;function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata;e.push(i)}return e}if(e){const e=i(t.textures);const r=i(t.images);if(e.length>0)n.textures=e;if(r.length>0)n.images=r}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name;this.blending=t.blending;this.side=t.side;this.vertexColors=t.vertexColors;this.opacity=t.opacity;this.transparent=t.transparent;this.blendSrc=t.blendSrc;this.blendDst=t.blendDst;this.blendEquation=t.blendEquation;this.blendSrcAlpha=t.blendSrcAlpha;this.blendDstAlpha=t.blendDstAlpha;this.blendEquationAlpha=t.blendEquationAlpha;this.blendColor.copy(t.blendColor);this.blendAlpha=t.blendAlpha;this.depthFunc=t.depthFunc;this.depthTest=t.depthTest;this.depthWrite=t.depthWrite;this.stencilWriteMask=t.stencilWriteMask;this.stencilFunc=t.stencilFunc;this.stencilRef=t.stencilRef;this.stencilFuncMask=t.stencilFuncMask;this.stencilFail=t.stencilFail;this.stencilZFail=t.stencilZFail;this.stencilZPass=t.stencilZPass;this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i){n[i]=e[i].clone()}}this.clippingPlanes=n;this.clipIntersection=t.clipIntersection;this.clipShadows=t.clipShadows;this.shadowSide=t.shadowSide;this.colorWrite=t.colorWrite;this.precision=t.precision;this.polygonOffset=t.polygonOffset;this.polygonOffsetFactor=t.polygonOffsetFactor;this.polygonOffsetUnits=t.polygonOffsetUnits;this.dithering=t.dithering;this.alphaTest=t.alphaTest;this.alphaHash=t.alphaHash;this.alphaToCoverage=t.alphaToCoverage;this.premultipliedAlpha=t.premultipliedAlpha;this.forceSinglePass=t.forceSinglePass;this.visible=t.visible;this.toneMapped=t.toneMapped;this.userData=JSON.parse(JSON.stringify(t.userData));return this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){if(t===true)this.version++}}class bs extends Ss{constructor(t){super();this.isMeshBasicMaterial=true;this.type="MeshBasicMaterial";this.color=new vs(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Fr;this.combine=K;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.envMapRotation.copy(t.envMapRotation);this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.fog=t.fog;return this}}const Ts=Es();function Es(){const t=new ArrayBuffer(4);const e=new Float32Array(t);const n=new Uint32Array(t);const i=new Uint32Array(512);const r=new Uint32Array(512);for(let t=0;t<256;++t){const e=t-127;if(e<-27){i[t]=0;i[t|256]=32768;r[t]=24;r[t|256]=24}else if(e<-14){i[t]=1024>>-e-14;i[t|256]=1024>>-e-14|32768;r[t]=-e-1;r[t|256]=-e-1}else if(e<=15){i[t]=e+15<<10;i[t|256]=e+15<<10|32768;r[t]=13;r[t|256]=13}else if(e<128){i[t]=31744;i[t|256]=64512;r[t]=24;r[t|256]=24}else{i[t]=31744;i[t|256]=64512;r[t]=13;r[t|256]=13}}const s=new Uint32Array(2048);const a=new Uint32Array(64);const o=new Uint32Array(64);for(let t=1;t<1024;++t){let e=t<<13;let n=0;while((e&8388608)===0){e<<=1;n-=8388608}e&=~8388608;n+=947912704;s[t]=e|n}for(let t=1024;t<2048;++t){s[t]=939524096+(t-1024<<13)}for(let t=1;t<31;++t){a[t]=t<<23}a[31]=1199570944;a[32]=2147483648;for(let t=33;t<63;++t){a[t]=2147483648+(t-32<<23)}a[63]=3347054592;for(let t=1;t<64;++t){if(t!==32){o[t]=1024}}return{floatView:e,uint32View:n,baseTable:i,shiftTable:r,mantissaTable:s,exponentTable:a,offsetTable:o}}function ws(t){if(Math.abs(t)>65504)console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");t=Yn(t,-65504,65504);Ts.floatView[0]=t;const e=Ts.uint32View[0];const n=e>>23&511;return Ts.baseTable[n]+((e&8388607)>>Ts.shiftTable[n])}function As(t){const e=t>>10;Ts.uint32View[0]=Ts.mantissaTable[Ts.offsetTable[e]+(t&1023)]+Ts.exponentTable[e];return Ts.floatView[0]}class Cs{static toHalfFloat(t){return ws(t)}static fromHalfFloat(t){return As(t)}}const Rs=new xi;const Is=new gi;let Ps=0;class Ls{constructor(t,e,n=false){if(Array.isArray(t)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.isBufferAttribute=true;Object.defineProperty(this,"id",{value:Ps++});this.name="";this.array=t;this.itemSize=e;this.count=t!==undefined?t.length/e:0;this.normalized=n;this.usage=wn;this.updateRanges=[];this.gpuType=Nt;this.version=0}onUploadCallback(){}set needsUpdate(t){if(t===true)this.version++}setUsage(t){this.usage=t;return this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){this.name=t.name;this.array=new t.array.constructor(t.array);this.itemSize=t.itemSize;this.count=t.count;this.normalized=t.normalized;this.usage=t.usage;this.gpuType=t.gpuType;return this}copyAt(t,e,n){t*=this.itemSize;n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++){this.array[t+i]=e.array[n+i]}return this}copyArray(t){this.array.set(t);return this}applyMatrix3(t){if(this.itemSize===2){for(let e=0,n=this.count;e<n;e++){Is.fromBufferAttribute(this,e);Is.applyMatrix3(t);this.setXY(e,Is.x,Is.y)}}else if(this.itemSize===3){for(let e=0,n=this.count;e<n;e++){Rs.fromBufferAttribute(this,e);Rs.applyMatrix3(t);this.setXYZ(e,Rs.x,Rs.y,Rs.z)}}return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++){Rs.fromBufferAttribute(this,e);Rs.applyMatrix4(t);this.setXYZ(e,Rs.x,Rs.y,Rs.z)}return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++){Rs.fromBufferAttribute(this,e);Rs.applyNormalMatrix(t);this.setXYZ(e,Rs.x,Rs.y,Rs.z)}return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++){Rs.fromBufferAttribute(this,e);Rs.transformDirection(t);this.setXYZ(e,Rs.x,Rs.y,Rs.z)}return this}set(t,e=0){this.array.set(t,e);return this}getComponent(t,e){let n=this.array[t*this.itemSize+e];if(this.normalized)n=fi(n,this.array);return n}setComponent(t,e,n){if(this.normalized)n=pi(n,this.array);this.array[t*this.itemSize+e]=n;return this}getX(t){let e=this.array[t*this.itemSize];if(this.normalized)e=fi(e,this.array);return e}setX(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize]=e;return this}getY(t){let e=this.array[t*this.itemSize+1];if(this.normalized)e=fi(e,this.array);return e}setY(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize+1]=e;return this}getZ(t){let e=this.array[t*this.itemSize+2];if(this.normalized)e=fi(e,this.array);return e}setZ(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize+2]=e;return this}getW(t){let e=this.array[t*this.itemSize+3];if(this.normalized)e=fi(e,this.array);return e}setW(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize+3]=e;return this}setXY(t,e,n){t*=this.itemSize;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array)}this.array[t+0]=e;this.array[t+1]=n;return this}setXYZ(t,e,n,i){t*=this.itemSize;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array);i=pi(i,this.array)}this.array[t+0]=e;this.array[t+1]=n;this.array[t+2]=i;return this}setXYZW(t,e,n,i,r){t*=this.itemSize;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array);i=pi(i,this.array);r=pi(r,this.array)}this.array[t+0]=e;this.array[t+1]=n;this.array[t+2]=i;this.array[t+3]=r;return this}onUpload(t){this.onUploadCallback=t;return this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};if(this.name!=="")t.name=this.name;if(this.usage!==wn)t.usage=this.usage;return t}}class Ds extends Ls{constructor(t,e,n){super(new Int8Array(t),e,n)}}class Us extends Ls{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class Ns extends Ls{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class Os extends Ls{constructor(t,e,n){super(new Int16Array(t),e,n)}}class Fs extends Ls{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class Bs extends Ls{constructor(t,e,n){super(new Int32Array(t),e,n)}}class zs extends Ls{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class ks extends Ls{constructor(t,e,n){super(new Uint16Array(t),e,n);this.isFloat16BufferAttribute=true}getX(t){let e=As(this.array[t*this.itemSize]);if(this.normalized)e=fi(e,this.array);return e}setX(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize]=ws(e);return this}getY(t){let e=As(this.array[t*this.itemSize+1]);if(this.normalized)e=fi(e,this.array);return e}setY(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize+1]=ws(e);return this}getZ(t){let e=As(this.array[t*this.itemSize+2]);if(this.normalized)e=fi(e,this.array);return e}setZ(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize+2]=ws(e);return this}getW(t){let e=As(this.array[t*this.itemSize+3]);if(this.normalized)e=fi(e,this.array);return e}setW(t,e){if(this.normalized)e=pi(e,this.array);this.array[t*this.itemSize+3]=ws(e);return this}setXY(t,e,n){t*=this.itemSize;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array)}this.array[t+0]=ws(e);this.array[t+1]=ws(n);return this}setXYZ(t,e,n,i){t*=this.itemSize;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array);i=pi(i,this.array)}this.array[t+0]=ws(e);this.array[t+1]=ws(n);this.array[t+2]=ws(i);return this}setXYZW(t,e,n,i,r){t*=this.itemSize;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array);i=pi(i,this.array);r=pi(r,this.array)}this.array[t+0]=ws(e);this.array[t+1]=ws(n);this.array[t+2]=ws(i);this.array[t+3]=ws(r);return this}}class Vs extends Ls{constructor(t,e,n){super(new Float32Array(t),e,n)}}let Gs=0;const Hs=new Ar;const Ws=new ts;const Xs=new xi;const js=new tr;const qs=new tr;const Ys=new xi;class Zs extends Gn{constructor(){super();this.isBufferGeometry=true;Object.defineProperty(this,"id",{value:Gs++});this.uuid=qn();this.name="";this.type="BufferGeometry";this.index=null;this.indirect=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}getIndex(){return this.index}setIndex(t){if(Array.isArray(t)){this.index=new(bi(t)?zs:Fs)(t,1)}else{this.index=t}return this}setIndirect(t){this.indirect=t;return this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){this.attributes[t]=e;return this}deleteAttribute(t){delete this.attributes[t];return this}hasAttribute(t){return this.attributes[t]!==undefined}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t;this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;if(e!==undefined){e.applyMatrix4(t);e.needsUpdate=true}const n=this.attributes.normal;if(n!==undefined){const e=(new Mi).getNormalMatrix(t);n.applyNormalMatrix(e);n.needsUpdate=true}const i=this.attributes.tangent;if(i!==undefined){i.transformDirection(t);i.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this}applyQuaternion(t){Hs.makeRotationFromQuaternion(t);this.applyMatrix4(Hs);return this}rotateX(t){Hs.makeRotationX(t);this.applyMatrix4(Hs);return this}rotateY(t){Hs.makeRotationY(t);this.applyMatrix4(Hs);return this}rotateZ(t){Hs.makeRotationZ(t);this.applyMatrix4(Hs);return this}translate(t,e,n){Hs.makeTranslation(t,e,n);this.applyMatrix4(Hs);return this}scale(t,e,n){Hs.makeScale(t,e,n);this.applyMatrix4(Hs);return this}lookAt(t){Ws.lookAt(t);Ws.updateMatrix();this.applyMatrix4(Ws.matrix);return this}center(){this.computeBoundingBox();this.boundingBox.getCenter(Xs).negate();this.translate(Xs.x,Xs.y,Xs.z);return this}setFromPoints(t){const e=this.getAttribute("position");if(e===undefined){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}this.setAttribute("position",new Vs(e,3))}else{const n=Math.min(t.length,e.count);for(let i=0;i<n;i++){const n=t[i];e.setXYZ(i,n.x,n.y,n.z||0)}if(t.length>e.count){console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.")}e.needsUpdate=true}return this}computeBoundingBox(t,e){if(this.boundingBox===null){this.boundingBox=new tr}const n=this.attributes.position;const i=this.morphAttributes.position;if(n&&n.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this);this.boundingBox.set(new xi(-Infinity,-Infinity,-Infinity),new xi(+Infinity,+Infinity,+Infinity));return}if(n!==undefined){this.boundingBox.setFromBufferAttribute(n,t,e);if(i){for(let t=0,e=i.length;t<e;t++){const e=i[t];js.setFromBufferAttribute(e);if(this.morphTargetsRelative){Ys.addVectors(this.boundingBox.min,js.min);this.boundingBox.expandByPoint(Ys);Ys.addVectors(this.boundingBox.max,js.max);this.boundingBox.expandByPoint(Ys)}else{this.boundingBox.expandByPoint(js.min);this.boundingBox.expandByPoint(js.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}computeBoundingSphere(t,e,n){if(this.boundingSphere===null){this.boundingSphere=new xr}const i=this.attributes.position;const r=this.morphAttributes.position;if(i&&i.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this);this.boundingSphere.set(new xi,Infinity);return}if(i){const s=this.boundingSphere.center;if(n){this.boundingBox.getCenter(s)}else{js.setFromBufferAttribute(i,t,e);if(r){for(let t=0,e=r.length;t<e;t++){const e=r[t];qs.setFromBufferAttribute(e);if(this.morphTargetsRelative){Ys.addVectors(js.min,qs.min);js.expandByPoint(Ys);Ys.addVectors(js.max,qs.max);js.expandByPoint(Ys)}else{js.expandByPoint(qs.min);js.expandByPoint(qs.max)}}}js.getCenter(s)}let a=0;for(let n=t===undefined?0:t,r=e===undefined?i.count:e;n<r;n++){Ys.fromBufferAttribute(i,n);a=Math.max(a,s.distanceToSquared(Ys))}if(r){for(let t=0,e=r.length;t<e;t++){const e=r[t];const n=this.morphTargetsRelative;for(let t=0,r=e.count;t<r;t++){Ys.fromBufferAttribute(e,t);if(n){Xs.fromBufferAttribute(i,t);Ys.add(Xs)}a=Math.max(a,s.distanceToSquared(Ys))}}}this.boundingSphere.radius=Math.sqrt(a);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}computeTangents(){const t=this.index;const e=this.attributes;if(t===null||e.position===undefined||e.normal===undefined||e.uv===undefined){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position;const i=e.normal;const r=e.uv;if(this.hasAttribute("tangent")===false){this.setAttribute("tangent",new Ls(new Float32Array(4*n.count),4))}const s=this.getAttribute("tangent");const a=[],o=[];for(let t=0;t<n.count;t++){a[t]=new xi;o[t]=new xi}const l=new xi,c=new xi,u=new xi,h=new gi,d=new gi,f=new gi,p=new xi,m=new xi;function g(t,e,i){l.fromBufferAttribute(n,t);c.fromBufferAttribute(n,e);u.fromBufferAttribute(n,i);h.fromBufferAttribute(r,t);d.fromBufferAttribute(r,e);f.fromBufferAttribute(r,i);c.sub(l);u.sub(l);d.sub(h);f.sub(h);const s=1/(d.x*f.y-f.x*d.y);if(!isFinite(s))return;p.copy(c).multiplyScalar(f.y).addScaledVector(u,-d.y).multiplyScalar(s);m.copy(u).multiplyScalar(d.x).addScaledVector(c,-f.x).multiplyScalar(s);a[t].add(p);a[e].add(p);a[i].add(p);o[t].add(m);o[e].add(m);o[i].add(m)}let _=this.groups;if(_.length===0){_=[{start:0,count:t.count}]}for(let e=0,n=_.length;e<n;++e){const n=_[e];const i=n.start;const r=n.count;for(let e=i,n=i+r;e<n;e+=3){g(t.getX(e+0),t.getX(e+1),t.getX(e+2))}}const x=new xi,v=new xi;const y=new xi,M=new xi;function S(t){y.fromBufferAttribute(i,t);M.copy(y);const e=a[t];x.copy(e);x.sub(y.multiplyScalar(y.dot(e))).normalize();v.crossVectors(M,e);const n=v.dot(o[t]);const r=n<0?-1:1;s.setXYZW(t,x.x,x.y,x.z,r)}for(let e=0,n=_.length;e<n;++e){const n=_[e];const i=n.start;const r=n.count;for(let e=i,n=i+r;e<n;e+=3){S(t.getX(e+0));S(t.getX(e+1));S(t.getX(e+2))}}}computeVertexNormals(){const t=this.index;const e=this.getAttribute("position");if(e!==undefined){let n=this.getAttribute("normal");if(n===undefined){n=new Ls(new Float32Array(e.count*3),3);this.setAttribute("normal",n)}else{for(let t=0,e=n.count;t<e;t++){n.setXYZ(t,0,0,0)}}const i=new xi,r=new xi,s=new xi;const a=new xi,o=new xi,l=new xi;const c=new xi,u=new xi;if(t){for(let h=0,d=t.count;h<d;h+=3){const d=t.getX(h+0);const f=t.getX(h+1);const p=t.getX(h+2);i.fromBufferAttribute(e,d);r.fromBufferAttribute(e,f);s.fromBufferAttribute(e,p);c.subVectors(s,r);u.subVectors(i,r);c.cross(u);a.fromBufferAttribute(n,d);o.fromBufferAttribute(n,f);l.fromBufferAttribute(n,p);a.add(c);o.add(c);l.add(c);n.setXYZ(d,a.x,a.y,a.z);n.setXYZ(f,o.x,o.y,o.z);n.setXYZ(p,l.x,l.y,l.z)}}else{for(let t=0,a=e.count;t<a;t+=3){i.fromBufferAttribute(e,t+0);r.fromBufferAttribute(e,t+1);s.fromBufferAttribute(e,t+2);c.subVectors(s,r);u.subVectors(i,r);c.cross(u);n.setXYZ(t+0,c.x,c.y,c.z);n.setXYZ(t+1,c.x,c.y,c.z);n.setXYZ(t+2,c.x,c.y,c.z)}}this.normalizeNormals();n.needsUpdate=true}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++){Ys.fromBufferAttribute(t,e);Ys.normalize();t.setXYZ(e,Ys.x,Ys.y,Ys.z)}}toNonIndexed(){function t(t,e){const n=t.array;const i=t.itemSize;const r=t.normalized;const s=new n.constructor(e.length*i);let a=0,o=0;for(let r=0,l=e.length;r<l;r++){if(t.isInterleavedBufferAttribute){a=e[r]*t.data.stride+t.offset}else{a=e[r]*i}for(let t=0;t<i;t++){s[o++]=n[a++]}}return new Ls(s,i,r)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");return this}const e=new Zs;const n=this.index.array;const i=this.attributes;for(const r in i){const s=i[r];const a=t(s,n);e.setAttribute(r,a)}const r=this.morphAttributes;for(const i in r){const s=[];const a=r[i];for(let e=0,i=a.length;e<i;e++){const i=a[e];const r=t(i,n);s.push(r)}e.morphAttributes[i]=s}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let t=0,n=s.length;t<n;t++){const n=s[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};t.uuid=this.uuid;t.type=this.type;if(this.name!=="")t.name=this.name;if(Object.keys(this.userData).length>0)t.userData=this.userData;if(this.parameters!==undefined){const e=this.parameters;for(const n in e){if(e[n]!==undefined)t[n]=e[n]}return t}t.data={attributes:{}};const e=this.index;if(e!==null){t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)}}const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=false;for(const e in this.morphAttributes){const n=this.morphAttributes[e];const s=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];s.push(i.toJSON(t.data))}if(s.length>0){i[e]=s;r=true}}if(r){t.data.morphAttributes=i;t.data.morphTargetsRelative=this.morphTargetsRelative}const s=this.groups;if(s.length>0){t.data.groups=JSON.parse(JSON.stringify(s))}const a=this.boundingSphere;if(a!==null){t.data.boundingSphere=a.toJSON()}return t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;if(n!==null){this.setIndex(n.clone())}const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[];const i=r[t];for(let t=0,r=i.length;t<r;t++){n.push(i[t].clone(e))}this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let t=0,e=s.length;t<e;t++){const e=s[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;if(a!==null){this.boundingBox=a.clone()}const o=t.boundingSphere;if(o!==null){this.boundingSphere=o.clone()}this.drawRange.start=t.drawRange.start;this.drawRange.count=t.drawRange.count;this.userData=t.userData;return this}dispose(){this.dispatchEvent({type:"dispose"})}}const Js=new Ar;const Ks=new wr;const $s=new xr;const Qs=new xi;const ta=new xi;const ea=new xi;const na=new xi;const ia=new xi;const ra=new xi;const sa=new xi;const aa=new xi;class oa extends ts{constructor(t=new Zs,e=new bs){super();this.isMesh=true;this.type="Mesh";this.geometry=t;this.material=e;this.morphTargetDictionary=undefined;this.morphTargetInfluences=undefined;this.count=1;this.updateMorphTargets()}copy(t,e){super.copy(t,e);if(t.morphTargetInfluences!==undefined){this.morphTargetInfluences=t.morphTargetInfluences.slice()}if(t.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)}this.material=Array.isArray(t.material)?t.material.slice():t.material;this.geometry=t.geometry;return this}updateMorphTargets(){const t=this.geometry;const e=t.morphAttributes;const n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(t!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=e}}}}getVertexPosition(t,e){const n=this.geometry;const i=n.attributes.position;const r=n.morphAttributes.position;const s=n.morphTargetsRelative;e.fromBufferAttribute(i,t);const a=this.morphTargetInfluences;if(r&&a){ra.set(0,0,0);for(let n=0,i=r.length;n<i;n++){const i=a[n];const o=r[n];if(i===0)continue;ia.fromBufferAttribute(o,t);if(s){ra.addScaledVector(ia,i)}else{ra.addScaledVector(ia.sub(e),i)}}e.add(ra)}return e}raycast(t,e){const n=this.geometry;const i=this.material;const r=this.matrixWorld;const s=this.userData.renderGroup;if(i===undefined)return;if(s&&s.boundingSphere){$s.setFromPackedArray(s.boundingSphere)}else{if(n.boundingSphere===null)n.computeBoundingSphere();$s.copy(n.boundingSphere)}$s.applyMatrix4(r);Ks.copy(t.ray).recast(t.near);if($s.containsPoint(Ks.origin)===false){if(Ks.intersectSphere($s,Qs)===null)return;if(Ks.origin.distanceToSquared(Qs)>(t.far-t.near)**2)return}Js.copy(r).invert();Ks.copy(t.ray).applyMatrix4(Js);if(s&&s.boundingBox){if(Ks.intersectsBox(tr.newFromPackedArray(s.boundingBox))===false)return}else if(n.boundingBox!==null){if(Ks.intersectsBox(n.boundingBox)===false)return}this._computeIntersections(t,e,Ks)}_computeIntersections(t,e,n){let i;const r=this.geometry;const s=this.material;const a=r.index;const o=r.attributes.position;const l=r.attributes.uv;const c=r.attributes.uv1;const u=r.attributes.normal;const h=r.groups;const d=r.drawRange;if(a!==null){if(Array.isArray(s)){for(let r=0,o=h.length;r<o;r++){const o=h[r];const f=s[o.materialIndex];const p=Math.max(o.start,d.start);const m=Math.min(a.count,Math.min(o.start+o.count,d.start+d.count));for(let r=p,s=m;r<s;r+=3){const s=a.getX(r);const h=a.getX(r+1);const d=a.getX(r+2);i=ca(this,f,t,n,l,c,u,s,h,d);if(i){i.faceIndex=Math.floor(r/3);i.face.materialIndex=o.materialIndex;e.push(i)}}}}else{const r=Math.max(0,d.start);const o=Math.min(a.count,d.start+d.count);for(let h=r,d=o;h<d;h+=3){const r=a.getX(h);const o=a.getX(h+1);const d=a.getX(h+2);i=ca(this,s,t,n,l,c,u,r,o,d);if(i){i.faceIndex=Math.floor(h/3);e.push(i)}}}}else if(o!==undefined){if(Array.isArray(s)){for(let r=0,a=h.length;r<a;r++){const a=h[r];const f=s[a.materialIndex];const p=Math.max(a.start,d.start);const m=Math.min(o.count,Math.min(a.start+a.count,d.start+d.count));for(let r=p,s=m;r<s;r+=3){const s=r;const o=r+1;const h=r+2;i=ca(this,f,t,n,l,c,u,s,o,h);if(i){i.faceIndex=Math.floor(r/3);i.face.materialIndex=a.materialIndex;e.push(i)}}}}else{const r=Math.max(0,d.start);const a=Math.min(o.count,d.start+d.count);for(let o=r,h=a;o<h;o+=3){const r=o;const a=o+1;const h=o+2;i=ca(this,s,t,n,l,c,u,r,a,h);if(i){i.faceIndex=Math.floor(o/3);e.push(i)}}}}}}function la(t,e,n,i,r,s,a,o){let l;if(e.side===m){l=i.intersectTriangle(a,s,r,true,o)}else{l=i.intersectTriangle(r,s,a,e.side===p,o)}if(l===null)return null;aa.copy(o);aa.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(aa);if(c<n.near||c>n.far)return null;return{distance:c,point:aa.clone(),object:t}}function ca(t,e,n,i,r,s,a,o,l,c){t.getVertexPosition(o,ta);t.getVertexPosition(l,ea);t.getVertexPosition(c,na);const u=la(t,e,n,i,ta,ea,na,sa);if(u){const t=new xi;ps.getBarycoord(sa,ta,ea,na,t);if(r){u.uv=ps.getInterpolatedAttribute(r,o,l,c,t,new gi)}if(s){u.uv1=ps.getInterpolatedAttribute(s,o,l,c,t,new gi)}if(a){u.normal=ps.getInterpolatedAttribute(a,o,l,c,t,new xi);if(u.normal.dot(i.direction)>0){u.normal.multiplyScalar(-1)}}const e={a:o,b:l,c:c,normal:new xi,materialIndex:0};ps.getNormal(ta,ea,na,e.normal);u.face=e;u.barycoord=t}return u}class ua extends Zs{constructor(t=1,e=1,n=1,i=1,r=1,s=1){super();this.type="BoxGeometry";this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const a=this;i=Math.floor(i);r=Math.floor(r);s=Math.floor(s);const o=[];const l=[];const c=[];const u=[];let h=0;let d=0;f("z","y","x",-1,-1,n,e,t,s,r,0);f("z","y","x",1,-1,n,e,-t,s,r,1);f("x","z","y",1,1,t,n,e,i,s,2);f("x","z","y",1,-1,t,n,-e,i,s,3);f("x","y","z",1,-1,t,e,n,i,r,4);f("x","y","z",-1,-1,t,e,-n,i,r,5);this.setIndex(o);this.setAttribute("position",new Vs(l,3));this.setAttribute("normal",new Vs(c,3));this.setAttribute("uv",new Vs(u,2));function f(t,e,n,i,r,s,f,p,m,g,_){const x=s/m;const v=f/g;const y=s/2;const M=f/2;const S=p/2;const b=m+1;const T=g+1;let E=0;let w=0;const A=new xi;for(let s=0;s<T;s++){const a=s*v-M;for(let o=0;o<b;o++){const h=o*x-y;A[t]=h*i;A[e]=a*r;A[n]=S;l.push(A.x,A.y,A.z);A[t]=0;A[e]=0;A[n]=p>0?1:-1;c.push(A.x,A.y,A.z);u.push(o/m);u.push(1-s/g);E+=1}}for(let t=0;t<g;t++){for(let e=0;e<m;e++){const n=h+e+b*t;const i=h+e+b*(t+1);const r=h+(e+1)+b*(t+1);const s=h+(e+1)+b*t;o.push(n,i,s);o.push(i,r,s);w+=6}}a.addGroup(d,w,_);d+=w;h+=E}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new ua(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function ha(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];if(r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)){if(r.isRenderTargetTexture){console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");e[n][i]=null}else{e[n][i]=r.clone()}}else if(Array.isArray(r)){e[n][i]=r.slice()}else{e[n][i]=r}}}return e}function da(t){const e={};for(let n=0;n<t.length;n++){const i=ha(t[n]);for(const t in i){e[t]=i[t]}}return e}function fa(t){const e=[];for(let n=0;n<t.length;n++){e.push(t[n].clone())}return e}function pa(t){const e=t.getRenderTarget();if(e===null){return t.outputColorSpace}if(e.isXRRenderTarget===true){return e.texture.colorSpace}return Oi.workingColorSpace}const ma={clone:ha,merge:da};var ga="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var _a="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class xa extends Ss{constructor(t){super();this.isShaderMaterial=true;this.type="ShaderMaterial";this.defines={};this.uniforms={};this.uniformsGroups=[];this.vertexShader=ga;this.fragmentShader=_a;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.forceSinglePass=true;this.extensions={clipCullDistance:false,multiDraw:false};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;this.glslVersion=null;if(t!==undefined){this.setValues(t)}}copy(t){super.copy(t);this.fragmentShader=t.fragmentShader;this.vertexShader=t.vertexShader;this.uniforms=ha(t.uniforms);this.uniformsGroups=fa(t.uniformsGroups);this.defines=Object.assign({},t.defines);this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.fog=t.fog;this.lights=t.lights;this.clipping=t.clipping;this.extensions=Object.assign({},t.extensions);this.glslVersion=t.glslVersion;return this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion;e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n];const r=i.value;if(r&&r.isTexture){e.uniforms[n]={type:"t",value:r.toJSON(t).uuid}}else if(r&&r.isColor){e.uniforms[n]={type:"c",value:r.getHex()}}else if(r&&r.isVector2){e.uniforms[n]={type:"v2",value:r.toArray()}}else if(r&&r.isVector3){e.uniforms[n]={type:"v3",value:r.toArray()}}else if(r&&r.isVector4){e.uniforms[n]={type:"v4",value:r.toArray()}}else if(r&&r.isMatrix3){e.uniforms[n]={type:"m3",value:r.toArray()}}else if(r&&r.isMatrix4){e.uniforms[n]={type:"m4",value:r.toArray()}}else{e.uniforms[n]={value:r}}}if(Object.keys(this.defines).length>0)e.defines=this.defines;e.vertexShader=this.vertexShader;e.fragmentShader=this.fragmentShader;e.lights=this.lights;e.clipping=this.clipping;const n={};for(const t in this.extensions){if(this.extensions[t]===true)n[t]=true}if(Object.keys(n).length>0)e.extensions=n;return e}}class va extends ts{constructor(){super();this.isCamera=true;this.type="Camera";this.matrixWorldInverse=new Ar;this.projectionMatrix=new Ar;this.projectionMatrixInverse=new Ar;this.coordinateSystem=Fn}copy(t,e){super.copy(t,e);this.matrixWorldInverse.copy(t.matrixWorldInverse);this.projectionMatrix.copy(t.projectionMatrix);this.projectionMatrixInverse.copy(t.projectionMatrixInverse);this.coordinateSystem=t.coordinateSystem;return this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const ya=new xi;const Ma=new gi;const Sa=new gi;class ba extends va{constructor(t=50,e=1,n=.1,i=2e3){super();this.isPerspectiveCamera=true;this.type="PerspectiveCamera";this.fov=t;this.zoom=1;this.near=n;this.far=i;this.focus=10;this.aspect=e;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}copy(t,e){super.copy(t,e);this.fov=t.fov;this.zoom=t.zoom;this.near=t.near;this.far=t.far;this.focus=t.focus;this.aspect=t.aspect;this.view=t.view===null?null:Object.assign({},t.view);this.filmGauge=t.filmGauge;this.filmOffset=t.filmOffset;return this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=jn*2*Math.atan(e);this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Xn*.5*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return jn*2*Math.atan(Math.tan(Xn*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){ya.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse);e.set(ya.x,ya.y).multiplyScalar(-t/ya.z);ya.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse);n.set(ya.x,ya.y).multiplyScalar(-t/ya.z)}getViewSize(t,e){this.getViewBounds(t,Ma,Sa);return e.subVectors(Sa,Ma)}setViewOffset(t,e,n,i,r,s){this.aspect=t/e;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=t;this.view.fullHeight=e;this.view.offsetX=n;this.view.offsetY=i;this.view.width=r;this.view.height=s;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(Xn*.5*this.fov)/this.zoom;let n=2*e;let i=this.aspect*n;let r=-.5*i;const s=this.view;if(this.view!==null&&this.view.enabled){const t=s.fullWidth,a=s.fullHeight;r+=s.offsetX*i/t;e-=s.offsetY*n/a;i*=s.width/t;n*=s.height/a}const a=this.filmOffset;if(a!==0)r+=t*a/this.getFilmWidth();this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);e.object.fov=this.fov;e.object.zoom=this.zoom;e.object.near=this.near;e.object.far=this.far;e.object.focus=this.focus;e.object.aspect=this.aspect;if(this.view!==null)e.object.view=Object.assign({},this.view);e.object.filmGauge=this.filmGauge;e.object.filmOffset=this.filmOffset;return e}}const Ta=-90;const Ea=1;class wa extends ts{constructor(t,e,n){super();this.type="CubeCamera";this.renderTarget=n;this.coordinateSystem=null;this.activeMipmapLevel=0;const i=new ba(Ta,Ea,t,e);i.layers=this.layers;this.add(i);const r=new ba(Ta,Ea,t,e);r.layers=this.layers;this.add(r);const s=new ba(Ta,Ea,t,e);s.layers=this.layers;this.add(s);const a=new ba(Ta,Ea,t,e);a.layers=this.layers;this.add(a);const o=new ba(Ta,Ea,t,e);o.layers=this.layers;this.add(o);const l=new ba(Ta,Ea,t,e);l.layers=this.layers;this.add(l)}updateCoordinateSystem(){const t=this.coordinateSystem;const e=this.children.concat();const[n,i,r,s,a,o]=e;for(const t of e)this.remove(t);if(t===Fn){n.up.set(0,1,0);n.lookAt(1,0,0);i.up.set(0,1,0);i.lookAt(-1,0,0);r.up.set(0,0,-1);r.lookAt(0,1,0);s.up.set(0,0,1);s.lookAt(0,-1,0);a.up.set(0,1,0);a.lookAt(0,0,1);o.up.set(0,1,0);o.lookAt(0,0,-1)}else if(t===Bn){n.up.set(0,-1,0);n.lookAt(-1,0,0);i.up.set(0,-1,0);i.lookAt(1,0,0);r.up.set(0,0,1);r.lookAt(0,1,0);s.up.set(0,0,-1);s.lookAt(0,-1,0);a.up.set(0,-1,0);a.lookAt(0,0,1);o.up.set(0,-1,0);o.lookAt(0,0,-1)}else{throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t)}for(const t of e){this.add(t);t.updateMatrixWorld()}}update(t,e){if(this.parent===null)this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:i}=this;if(this.coordinateSystem!==t.coordinateSystem){this.coordinateSystem=t.coordinateSystem;this.updateCoordinateSystem()}const[r,s,a,o,l,c]=this.children;const u=t.getRenderTarget();const h=t.getActiveCubeFace();const d=t.getActiveMipmapLevel();const f=t.xr.enabled;t.xr.enabled=false;const p=n.texture.generateMipmaps;n.texture.generateMipmaps=false;t.setRenderTarget(n,0,i);t.render(e,r);t.setRenderTarget(n,1,i);t.render(e,s);t.setRenderTarget(n,2,i);t.render(e,a);t.setRenderTarget(n,3,i);t.render(e,o);t.setRenderTarget(n,4,i);t.render(e,l);n.texture.generateMipmaps=p;t.setRenderTarget(n,5,i);t.render(e,c);t.setRenderTarget(u,h,d);t.xr.enabled=f;n.texture.needsPMREMUpdate=true}}class Aa extends ji{constructor(t=[],e=ht,n,i,r,s,a,o,l,c){super(t,e,n,i,r,s,a,o,l,c);this.isCubeTexture=true;this.flipY=false}get images(){return this.image}set images(t){this.image=t}}class Ca extends Zi{constructor(t=1,e={}){super(t,t,e);this.isWebGLCubeRenderTarget=true;const n={width:t,height:t,depth:1};const i=[n,n,n,n,n,n];this.texture=new Aa(i);this._setTextureOptions(e);this.texture.isRenderTargetTexture=true}fromEquirectangularTexture(t,e){this.texture.type=e.type;this.texture.colorSpace=e.colorSpace;this.texture.generateMipmaps=e.generateMipmaps;this.texture.minFilter=e.minFilter;this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,fragmentShader:`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`};const i=new ua(5,5,5);const r=new xa({name:"CubemapFromEquirect",uniforms:ha(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:m,blending:_});r.uniforms.tEquirect.value=e;const s=new oa(i,r);const a=e.minFilter;if(e.minFilter===At)e.minFilter=Tt;const o=new wa(1,10,this);o.update(t,s);e.minFilter=a;s.geometry.dispose();s.material.dispose();return this}clear(t,e=true,n=true,i=true){const r=t.getRenderTarget();for(let r=0;r<6;r++){t.setRenderTarget(this,r);t.clear(e,n,i)}t.setRenderTarget(r)}}class Ra extends ts{constructor(){super();this.isGroup=true;this.type="Group"}}const Ia={type:"move"};class Pa{constructor(){this._targetRay=null;this._grip=null;this._hand=null}getHandSpace(){if(this._hand===null){this._hand=new Ra;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Ra;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new xi;this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new xi}return this._targetRay}getGripSpace(){if(this._grip===null){this._grip=new Ra;this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new xi;this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new xi}return this._grip}dispatchEvent(t){if(this._targetRay!==null){this._targetRay.dispatchEvent(t)}if(this._grip!==null){this._grip.dispatchEvent(t)}if(this._hand!==null){this._hand.dispatchEvent(t)}return this}connect(t){if(t&&t.hand){const e=this._hand;if(e){for(const n of t.hand.values()){this._getHandJoint(e,n)}}}this.dispatchEvent({type:"connected",data:t});return this}disconnect(t){this.dispatchEvent({type:"disconnected",data:t});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this}update(t,e,n){let i=null;let r=null;let s=null;const a=this._targetRay;const o=this._grip;const l=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(l&&t.hand){s=true;for(const i of t.hand.values()){const t=e.getJointPose(i,n);const r=this._getHandJoint(l,i);if(t!==null){r.matrix.fromArray(t.transform.matrix);r.matrix.decompose(r.position,r.rotation,r.scale);r.matrixWorldNeedsUpdate=true;r.jointRadius=t.radius}r.visible=t!==null}const i=l.joints["index-finger-tip"];const r=l.joints["thumb-tip"];const a=i.position.distanceTo(r.position);const o=.02;const c=.005;if(l.inputState.pinching&&a>o+c){l.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})}else if(!l.inputState.pinching&&a<=o-c){l.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this})}}else{if(o!==null&&t.gripSpace){r=e.getPose(t.gripSpace,n);if(r!==null){o.matrix.fromArray(r.transform.matrix);o.matrix.decompose(o.position,o.rotation,o.scale);o.matrixWorldNeedsUpdate=true;if(r.linearVelocity){o.hasLinearVelocity=true;o.linearVelocity.copy(r.linearVelocity)}else{o.hasLinearVelocity=false}if(r.angularVelocity){o.hasAngularVelocity=true;o.angularVelocity.copy(r.angularVelocity)}else{o.hasAngularVelocity=false}}}}if(a!==null){i=e.getPose(t.targetRaySpace,n);if(i===null&&r!==null){i=r}if(i!==null){a.matrix.fromArray(i.transform.matrix);a.matrix.decompose(a.position,a.rotation,a.scale);a.matrixWorldNeedsUpdate=true;if(i.linearVelocity){a.hasLinearVelocity=true;a.linearVelocity.copy(i.linearVelocity)}else{a.hasLinearVelocity=false}if(i.angularVelocity){a.hasAngularVelocity=true;a.angularVelocity.copy(i.angularVelocity)}else{a.hasAngularVelocity=false}this.dispatchEvent(Ia)}}}if(a!==null){a.visible=i!==null}if(o!==null){o.visible=r!==null}if(l!==null){l.visible=s!==null}return this}_getHandJoint(t,e){if(t.joints[e.jointName]===undefined){const n=new Ra;n.matrixAutoUpdate=false;n.visible=false;t.joints[e.jointName]=n;t.add(n)}return t.joints[e.jointName]}}class La{constructor(t,e=25e-5){this.isFogExp2=true;this.name="";this.color=new vs(t);this.density=e}clone(){return new La(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class Da{constructor(t,e=1,n=1e3){this.isFog=true;this.name="";this.color=new vs(t);this.near=e;this.far=n}clone(){return new Da(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class Ua extends ts{constructor(){super();this.isScene=true;this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.backgroundBlurriness=0;this.backgroundIntensity=1;this.backgroundRotation=new Fr;this.environmentIntensity=1;this.environmentRotation=new Fr;this.overrideMaterial=null;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(t,e){super.copy(t,e);if(t.background!==null)this.background=t.background.clone();if(t.environment!==null)this.environment=t.environment.clone();if(t.fog!==null)this.fog=t.fog.clone();this.backgroundBlurriness=t.backgroundBlurriness;this.backgroundIntensity=t.backgroundIntensity;this.backgroundRotation.copy(t.backgroundRotation);this.environmentIntensity=t.environmentIntensity;this.environmentRotation.copy(t.environmentRotation);if(t.overrideMaterial!==null)this.overrideMaterial=t.overrideMaterial.clone();this.matrixAutoUpdate=t.matrixAutoUpdate;return this}toJSON(t){const e=super.toJSON(t);if(this.fog!==null)e.object.fog=this.fog.toJSON();if(this.backgroundBlurriness>0)e.object.backgroundBlurriness=this.backgroundBlurriness;if(this.backgroundIntensity!==1)e.object.backgroundIntensity=this.backgroundIntensity;e.object.backgroundRotation=this.backgroundRotation.toArray();if(this.environmentIntensity!==1)e.object.environmentIntensity=this.environmentIntensity;e.object.environmentRotation=this.environmentRotation.toArray();return e}}class Na{constructor(t,e){this.isInterleavedBuffer=true;this.array=t;this.stride=e;this.count=t!==undefined?t.length/e:0;this.usage=wn;this.updateRanges=[];this.version=0;this.uuid=qn()}onUploadCallback(){}set needsUpdate(t){if(t===true)this.version++}setUsage(t){this.usage=t;return this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){this.array=new t.array.constructor(t.array);this.count=t.count;this.stride=t.stride;this.usage=t.usage;return this}copyAt(t,e,n){t*=this.stride;n*=e.stride;for(let i=0,r=this.stride;i<r;i++){this.array[t+i]=e.array[n+i]}return this}set(t,e=0){this.array.set(t,e);return this}clone(t){if(t.arrayBuffers===undefined){t.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=qn()}if(t.arrayBuffers[this.array.buffer._uuid]===undefined){t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer}const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]);const n=new this.constructor(e,this.stride);n.setUsage(this.usage);return n}onUpload(t){this.onUploadCallback=t;return this}toJSON(t){if(t.arrayBuffers===undefined){t.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=qn()}if(t.arrayBuffers[this.array.buffer._uuid]===undefined){t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))}return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Oa=new xi;class Fa{constructor(t,e,n,i=false){this.isInterleavedBufferAttribute=true;this.name="";this.data=t;this.itemSize=e;this.offset=n;this.normalized=i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++){Oa.fromBufferAttribute(this,e);Oa.applyMatrix4(t);this.setXYZ(e,Oa.x,Oa.y,Oa.z)}return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++){Oa.fromBufferAttribute(this,e);Oa.applyNormalMatrix(t);this.setXYZ(e,Oa.x,Oa.y,Oa.z)}return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++){Oa.fromBufferAttribute(this,e);Oa.transformDirection(t);this.setXYZ(e,Oa.x,Oa.y,Oa.z)}return this}getComponent(t,e){let n=this.array[t*this.data.stride+this.offset+e];if(this.normalized)n=fi(n,this.array);return n}setComponent(t,e,n){if(this.normalized)n=pi(n,this.array);this.data.array[t*this.data.stride+this.offset+e]=n;return this}setX(t,e){if(this.normalized)e=pi(e,this.array);this.data.array[t*this.data.stride+this.offset]=e;return this}setY(t,e){if(this.normalized)e=pi(e,this.array);this.data.array[t*this.data.stride+this.offset+1]=e;return this}setZ(t,e){if(this.normalized)e=pi(e,this.array);this.data.array[t*this.data.stride+this.offset+2]=e;return this}setW(t,e){if(this.normalized)e=pi(e,this.array);this.data.array[t*this.data.stride+this.offset+3]=e;return this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];if(this.normalized)e=fi(e,this.array);return e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];if(this.normalized)e=fi(e,this.array);return e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];if(this.normalized)e=fi(e,this.array);return e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];if(this.normalized)e=fi(e,this.array);return e}setXY(t,e,n){t=t*this.data.stride+this.offset;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array)}this.data.array[t+0]=e;this.data.array[t+1]=n;return this}setXYZ(t,e,n,i){t=t*this.data.stride+this.offset;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array);i=pi(i,this.array)}this.data.array[t+0]=e;this.data.array[t+1]=n;this.data.array[t+2]=i;return this}setXYZW(t,e,n,i,r){t=t*this.data.stride+this.offset;if(this.normalized){e=pi(e,this.array);n=pi(n,this.array);i=pi(i,this.array);r=pi(r,this.array)}this.data.array[t+0]=e;this.data.array[t+1]=n;this.data.array[t+2]=i;this.data.array[t+3]=r;return this}clone(t){if(t===undefined){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return new Ls(new this.array.constructor(t),this.itemSize,this.normalized)}else{if(t.interleavedBuffers===undefined){t.interleavedBuffers={}}if(t.interleavedBuffers[this.data.uuid]===undefined){t.interleavedBuffers[this.data.uuid]=this.data.clone(t)}return new Fa(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}}toJSON(t){if(t===undefined){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else{if(t.interleavedBuffers===undefined){t.interleavedBuffers={}}if(t.interleavedBuffers[this.data.uuid]===undefined){t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}}class Ba extends Ss{constructor(t){super();this.isSpriteMaterial=true;this.type="SpriteMaterial";this.color=new vs(16777215);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.alphaMap=t.alphaMap;this.rotation=t.rotation;this.sizeAttenuation=t.sizeAttenuation;this.fog=t.fog;return this}}let za;const ka=new xi;const Va=new xi;const Ga=new xi;const Ha=new gi;const Wa=new gi;const Xa=new Ar;const ja=new xi;const qa=new xi;const Ya=new xi;const Za=new gi;const Ja=new gi;const Ka=new gi;class $a extends ts{constructor(t=new Ba){super();this.isSprite=true;this.type="Sprite";if(za===undefined){za=new Zs;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]);const e=new Na(t,5);za.setIndex([0,1,2,0,2,3]);za.setAttribute("position",new Fa(e,3,0,false));za.setAttribute("uv",new Fa(e,2,3,false))}this.geometry=za;this.material=t;this.center=new gi(.5,.5);this.count=1}raycast(t,e){if(t.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.')}Va.setFromMatrixScale(this.matrixWorld);Xa.copy(t.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld);Ga.setFromMatrixPosition(this.modelViewMatrix);if(t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){Va.multiplyScalar(-Ga.z)}const n=this.material.rotation;let i,r;if(n!==0){r=Math.cos(n);i=Math.sin(n)}const s=this.center;Qa(ja.set(-.5,-.5,0),Ga,s,Va,i,r);Qa(qa.set(.5,-.5,0),Ga,s,Va,i,r);Qa(Ya.set(.5,.5,0),Ga,s,Va,i,r);Za.set(0,0);Ja.set(1,0);Ka.set(1,1);let a=t.ray.intersectTriangle(ja,qa,Ya,false,ka);if(a===null){Qa(qa.set(-.5,.5,0),Ga,s,Va,i,r);Ja.set(0,1);a=t.ray.intersectTriangle(ja,Ya,qa,false,ka);if(a===null){return}}const o=t.ray.origin.distanceTo(ka);if(o<t.near||o>t.far)return;e.push({distance:o,point:ka.clone(),uv:ps.getInterpolation(ka,ja,qa,Ya,Za,Ja,Ka,new gi),face:null,object:this})}copy(t,e){super.copy(t,e);if(t.center!==undefined)this.center.copy(t.center);this.material=t.material;return this}}function Qa(t,e,n,i,r,s){Ha.subVectors(t,n).addScalar(.5).multiply(i);if(r!==undefined){Wa.x=s*Ha.x-r*Ha.y;Wa.y=r*Ha.x+s*Ha.y}else{Wa.copy(Ha)}t.copy(e);t.x+=Wa.x;t.y+=Wa.y;t.applyMatrix4(Xa)}const to=new xi;const eo=new xi;class no extends ts{constructor(){super();this.isLOD=true;this._currentLevel=0;this.type="LOD";Object.defineProperties(this,{levels:{enumerable:true,value:[]}});this.autoUpdate=true}copy(t){super.copy(t,false);const e=t.levels;for(let t=0,n=e.length;t<n;t++){const n=e[t];this.addLevel(n.object.clone(),n.distance,n.hysteresis)}this.autoUpdate=t.autoUpdate;return this}addLevel(t,e=0,n=0){e=Math.abs(e);const i=this.levels;let r;for(r=0;r<i.length;r++){if(e<i[r].distance){break}}i.splice(r,0,{distance:e,hysteresis:n,object:t});this.add(t);return this}removeLevel(t){const e=this.levels;for(let n=0;n<e.length;n++){if(e[n].distance===t){const t=e.splice(n,1);this.remove(t[0].object);return true}}return false}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let n,i;for(n=1,i=e.length;n<i;n++){let i=e[n].distance;if(e[n].object.visible){i-=i*e[n].hysteresis}if(t<i){break}}return e[n-1].object}return null}raycast(t,e){const n=this.levels;if(n.length>0){to.setFromMatrixPosition(this.matrixWorld);const n=t.ray.origin.distanceTo(to);this.getObjectForDistance(n).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){to.setFromMatrixPosition(t.matrixWorld);eo.setFromMatrixPosition(this.matrixWorld);const n=to.distanceTo(eo)/t.zoom;e[0].object.visible=true;let i,r;for(i=1,r=e.length;i<r;i++){let t=e[i].distance;if(e[i].object.visible){t-=t*e[i].hysteresis}if(n>=t){e[i-1].object.visible=false;e[i].object.visible=true}else{break}}this._currentLevel=i-1;for(;i<r;i++){e[i].object.visible=false}}}toJSON(t){const e=super.toJSON(t);if(this.autoUpdate===false)e.object.autoUpdate=false;e.object.levels=[];const n=this.levels;for(let t=0,i=n.length;t<i;t++){const i=n[t];e.object.levels.push({object:i.object.uuid,distance:i.distance,hysteresis:i.hysteresis})}return e}}const io=new xi;const ro=new qi;const so=new qi;const ao=new xi;const oo=new Ar;const lo=new xi;const co=new xr;const uo=new Ar;const ho=new wr;class fo extends oa{constructor(t,e){super(t,e);this.isSkinnedMesh=true;this.type="SkinnedMesh";this.bindMode=lt;this.bindMatrix=new Ar;this.bindMatrixInverse=new Ar;this.boundingBox=null;this.boundingSphere=null}computeBoundingBox(){const t=this.geometry;if(this.boundingBox===null){this.boundingBox=new tr}this.boundingBox.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++){this.getVertexPosition(t,lo);this.boundingBox.expandByPoint(lo)}}computeBoundingSphere(){const t=this.geometry;if(this.boundingSphere===null){this.boundingSphere=new xr}this.boundingSphere.makeEmpty();const e=t.getAttribute("position");for(let t=0;t<e.count;t++){this.getVertexPosition(t,lo);this.boundingSphere.expandByPoint(lo)}}copy(t,e){super.copy(t,e);this.bindMode=t.bindMode;this.bindMatrix.copy(t.bindMatrix);this.bindMatrixInverse.copy(t.bindMatrixInverse);this.skeleton=t.skeleton;if(t.boundingBox!==null)this.boundingBox=t.boundingBox.clone();if(t.boundingSphere!==null)this.boundingSphere=t.boundingSphere.clone();return this}raycast(t,e){const n=this.material;const i=this.matrixWorld;if(n===undefined)return;if(this.boundingSphere===null)this.computeBoundingSphere();co.copy(this.boundingSphere);co.applyMatrix4(i);if(t.ray.intersectsSphere(co)===false)return;uo.copy(i).invert();ho.copy(t.ray).applyMatrix4(uo);if(this.boundingBox!==null){if(ho.intersectsBox(this.boundingBox)===false)return}this._computeIntersections(t,e,ho)}getVertexPosition(t,e){super.getVertexPosition(t,e);this.applyBoneTransform(t,e);return e}bind(t,e){this.skeleton=t;if(e===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();e=this.matrixWorld}this.bindMatrix.copy(e);this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new qi;const e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.fromBufferAttribute(e,n);const i=1/t.manhattanLength();if(i!==Infinity){t.multiplyScalar(i)}else{t.set(1,0,0,0)}e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t);if(this.bindMode===lt){this.bindMatrixInverse.copy(this.matrixWorld).invert()}else if(this.bindMode===ct){this.bindMatrixInverse.copy(this.bindMatrix).invert()}else{console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}}applyBoneTransform(t,e){const n=this.skeleton;const i=this.geometry;ro.fromBufferAttribute(i.attributes.skinIndex,t);so.fromBufferAttribute(i.attributes.skinWeight,t);io.copy(e).applyMatrix4(this.bindMatrix);e.set(0,0,0);for(let t=0;t<4;t++){const i=so.getComponent(t);if(i!==0){const r=ro.getComponent(t);oo.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]);e.addScaledVector(ao.copy(io).applyMatrix4(oo),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}class po extends ts{constructor(){super();this.isBone=true;this.type="Bone"}}class mo extends ji{constructor(t=null,e=1,n=1,i,r,s,a,o,l=vt,c=vt,u,h){super(null,s,a,o,l,c,i,r,u,h);this.isDataTexture=true;this.image={data:t,width:e,height:n};this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}const go=new Ar;const _o=new Ar;class xo{constructor(t=[],e=[]){this.uuid=qn();this.bones=t.slice(0);this.boneInverses=e;this.boneMatrices=null;this.boneTexture=null;this.init()}init(){const t=this.bones;const e=this.boneInverses;this.boneMatrices=new Float32Array(t.length*16);if(e.length===0){this.calculateInverses()}else{if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++){this.boneInverses.push(new Ar)}}}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Ar;if(this.bones[t]){e.copy(this.bones[t].matrixWorld).invert()}this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];if(e){e.matrixWorld.copy(this.boneInverses[t]).invert()}}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];if(e){if(e.parent&&e.parent.isBone){e.matrix.copy(e.parent.matrixWorld).invert();e.matrix.multiply(e.matrixWorld)}else{e.matrix.copy(e.matrixWorld)}e.matrix.decompose(e.position,e.quaternion,e.scale)}}}update(){const t=this.bones;const e=this.boneInverses;const n=this.boneMatrices;const i=this.boneTexture;for(let i=0,r=t.length;i<r;i++){const r=t[i]?t[i].matrixWorld:_o;go.multiplyMatrices(r,e[i]);go.toArray(n,i*16)}if(i!==null){i.needsUpdate=true}}clone(){return new xo(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(this.bones.length*4);t=Math.ceil(t/4)*4;t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const n=new mo(e,t,t,Ht,Nt);n.needsUpdate=true;this.boneMatrices=e;this.boneTexture=n;return this}getBoneByName(t){for(let e=0,n=this.bones.length;e<n;e++){const n=this.bones[e];if(n.name===t){return n}}return undefined}dispose(){if(this.boneTexture!==null){this.boneTexture.dispose();this.boneTexture=null}}fromJSON(t,e){this.uuid=t.uuid;for(let n=0,i=t.bones.length;n<i;n++){const i=t.bones[n];let r=e[i];if(r===undefined){console.warn("THREE.Skeleton: No bone found with UUID:",i);r=new po}this.bones.push(r);this.boneInverses.push((new Ar).fromArray(t.boneInverses[n]))}this.init();return this}toJSON(){const t={metadata:{version:4.7,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones;const n=this.boneInverses;for(let i=0,r=e.length;i<r;i++){const r=e[i];t.bones.push(r.uuid);const s=n[i];t.boneInverses.push(s.toArray())}return t}}class vo extends Ls{constructor(t,e,n,i=1){super(t,e,n);this.isInstancedBufferAttribute=true;this.meshPerAttribute=i}copy(t){super.copy(t);this.meshPerAttribute=t.meshPerAttribute;return this}toJSON(){const t=super.toJSON();t.meshPerAttribute=this.meshPerAttribute;t.isInstancedBufferAttribute=true;return t}}const yo=new Ar;const Mo=new Ar;const So=[];const bo=new tr;const To=new Ar;const Eo=new oa;const wo=new xr;class Ao extends oa{constructor(t,e,n){super(t,e);this.isInstancedMesh=true;this.instanceMatrix=new vo(new Float32Array(n*16),16);this.instanceColor=null;this.morphTexture=null;this.count=n;this.boundingBox=null;this.boundingSphere=null;for(let t=0;t<n;t++){this.setMatrixAt(t,To)}}computeBoundingBox(){const t=this.geometry;const e=this.count;if(this.boundingBox===null){this.boundingBox=new tr}if(t.boundingBox===null){t.computeBoundingBox()}this.boundingBox.makeEmpty();for(let n=0;n<e;n++){this.getMatrixAt(n,yo);bo.copy(t.boundingBox).applyMatrix4(yo);this.boundingBox.union(bo)}}computeBoundingSphere(){const t=this.geometry;const e=this.count;if(this.boundingSphere===null){this.boundingSphere=new xr}if(t.boundingSphere===null){t.computeBoundingSphere()}this.boundingSphere.makeEmpty();for(let n=0;n<e;n++){this.getMatrixAt(n,yo);wo.copy(t.boundingSphere).applyMatrix4(yo);this.boundingSphere.union(wo)}}copy(t,e){super.copy(t,e);this.instanceMatrix.copy(t.instanceMatrix);if(t.morphTexture!==null)this.morphTexture=t.morphTexture.clone();if(t.instanceColor!==null)this.instanceColor=t.instanceColor.clone();this.count=t.count;if(t.boundingBox!==null)this.boundingBox=t.boundingBox.clone();if(t.boundingSphere!==null)this.boundingSphere=t.boundingSphere.clone();return this}getColorAt(t,e){e.fromArray(this.instanceColor.array,t*3)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,t*16)}getMorphAt(t,e){const n=e.morphTargetInfluences;const i=this.morphTexture.source.data.data;const r=n.length+1;const s=t*r+1;for(let t=0;t<n.length;t++){n[t]=i[s+t]}}raycast(t,e){const n=this.matrixWorld;const i=this.count;Eo.geometry=this.geometry;Eo.material=this.material;if(Eo.material===undefined)return;if(this.boundingSphere===null)this.computeBoundingSphere();wo.copy(this.boundingSphere);wo.applyMatrix4(n);if(t.ray.intersectsSphere(wo)===false)return;for(let r=0;r<i;r++){this.getMatrixAt(r,yo);Mo.multiplyMatrices(n,yo);Eo.matrixWorld=Mo;Eo.raycast(t,So);for(let t=0,n=So.length;t<n;t++){const n=So[t];n.instanceId=r;n.object=this;e.push(n)}So.length=0}}setColorAt(t,e){if(this.instanceColor===null){this.instanceColor=new vo(new Float32Array(this.instanceMatrix.count*3).fill(1),3)}e.toArray(this.instanceColor.array,t*3)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,t*16)}setMorphAt(t,e){const n=e.morphTargetInfluences;const i=n.length+1;if(this.morphTexture===null){this.morphTexture=new mo(new Float32Array(i*this.count),i,this.count,jt,Nt)}const r=this.morphTexture.source.data.data;let s=0;for(let t=0;t<n.length;t++){s+=n[t]}const a=this.geometry.morphTargetsRelative?1:1-s;const o=i*t;r[o]=a;r.set(n,o+1)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"});if(this.morphTexture!==null){this.morphTexture.dispose();this.morphTexture=null}}}const Co=new xi;const Ro=new xi;const Io=new Mi;class Po{constructor(t=new xi(1,0,0),e=0){this.isPlane=true;this.normal=t;this.constant=e}set(t,e){this.normal.copy(t);this.constant=e;return this}setComponents(t,e,n,i){this.normal.set(t,e,n);this.constant=i;return this}setFromNormalAndCoplanarPoint(t,e){this.normal.copy(t);this.constant=-e.dot(this.normal);return this}setFromCoplanarPoints(t,e,n){const i=Co.subVectors(n,e).cross(Ro.subVectors(t,e)).normalize();this.setFromNormalAndCoplanarPoint(i,t);return this}copy(t){this.normal.copy(t.normal);this.constant=t.constant;return this}normalize(){const t=1/this.normal.length();this.normal.multiplyScalar(t);this.constant*=t;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(Co);const i=this.normal.dot(n);if(i===0){if(this.distanceToPoint(t.start)===0){return e.copy(t.start)}return null}const r=-(t.start.dot(this.normal)+this.constant)/i;if(r<0||r>1){return null}return e.copy(t.start).addScaledVector(n,r)}intersectsLine(t){const e=this.distanceToPoint(t.start);const n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Io.getNormalMatrix(t);const i=this.coplanarPoint(Co).applyMatrix4(t);const r=this.normal.applyMatrix3(n).normalize();this.constant=-i.dot(r);return this}translate(t){this.constant-=t.dot(this.normal);return this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const Lo=new xr;const Do=new gi(.5,.5);const Uo=new xi;class No{constructor(t=new Po,e=new Po,n=new Po,i=new Po,r=new Po,s=new Po){this.planes=[t,e,n,i,r,s]}set(t,e,n,i,r,s){const a=this.planes;a[0].copy(t);a[1].copy(e);a[2].copy(n);a[3].copy(i);a[4].copy(r);a[5].copy(s);return this}copy(t){const e=this.planes;for(let n=0;n<6;n++){e[n].copy(t.planes[n])}return this}setFromProjectionMatrix(t,e=Fn){const n=this.planes;const i=t.elements;const r=i[0],s=i[1],a=i[2],o=i[3];const l=i[4],c=i[5],u=i[6],h=i[7];const d=i[8],f=i[9],p=i[10],m=i[11];const g=i[12],_=i[13],x=i[14],v=i[15];n[0].setComponents(o-r,h-l,m-d,v-g).normalize();n[1].setComponents(o+r,h+l,m+d,v+g).normalize();n[2].setComponents(o+s,h+c,m+f,v+_).normalize();n[3].setComponents(o-s,h-c,m-f,v-_).normalize();n[4].setComponents(o-a,h-u,m-p,v-x).normalize();if(e===Fn){n[5].setComponents(o+a,h+u,m+p,v+x).normalize()}else if(e===Bn){n[5].setComponents(a,u,p,x).normalize()}else{throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e)}return this}intersectsObject(t){const e=t.geometry;const n=t.userData.renderGroup;if(n&&n.boundingSphere){Lo.setFromPackedArray(n.boundingSphere)}else if(t.boundingSphere!==undefined){if(t.boundingSphere===null)t.computeBoundingSphere();Lo.copy(t.boundingSphere).applyMatrix4(t.matrixWorld)}else{if(e.boundingSphere===null)e.computeBoundingSphere();Lo.copy(e.boundingSphere)}Lo.applyMatrix4(t.matrixWorld);return this.intersectsSphere(Lo)}intersectsSprite(t){Lo.center.set(0,0,0);const e=Do.distanceTo(t.center);Lo.radius=.7071067811865476+e;Lo.applyMatrix4(t.matrixWorld);return this.intersectsSphere(Lo)}intersectsSphere(t){const e=this.planes;const n=t.center;const i=-t.radius;for(let t=0;t<6;t++){const r=e[t].distanceToPoint(n);if(r<i){return false}}return true}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];Uo.x=i.normal.x>0?t.max.x:t.min.x;Uo.y=i.normal.y>0?t.max.y:t.min.y;Uo.z=i.normal.z>0?t.max.z:t.min.z;if(i.distanceToPoint(Uo)<0){return false}}return true}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++){if(e[n].distanceToPoint(t)<0){return false}}return true}clone(){return(new this.constructor).copy(this)}}const Oo=new Ar;const Fo=new No;class Bo{constructor(){this.coordinateSystem=Fn}intersectsObject(t,e){if(!e.isArrayCamera||e.cameras.length===0){return false}for(let n=0;n<e.cameras.length;n++){const i=e.cameras[n];Oo.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse);Fo.setFromProjectionMatrix(Oo,this.coordinateSystem);if(Fo.intersectsObject(t)){return true}}return false}intersectsSprite(t,e){if(!e||!e.cameras||e.cameras.length===0){return false}for(let n=0;n<e.cameras.length;n++){const i=e.cameras[n];Oo.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse);Fo.setFromProjectionMatrix(Oo,this.coordinateSystem);if(Fo.intersectsSprite(t)){return true}}return false}intersectsSphere(t,e){if(!e||!e.cameras||e.cameras.length===0){return false}for(let n=0;n<e.cameras.length;n++){const i=e.cameras[n];Oo.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse);Fo.setFromProjectionMatrix(Oo,this.coordinateSystem);if(Fo.intersectsSphere(t)){return true}}return false}intersectsBox(t,e){if(!e||!e.cameras||e.cameras.length===0){return false}for(let n=0;n<e.cameras.length;n++){const i=e.cameras[n];Oo.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse);Fo.setFromProjectionMatrix(Oo,this.coordinateSystem);if(Fo.intersectsBox(t)){return true}}return false}containsPoint(t,e){if(!e||!e.cameras||e.cameras.length===0){return false}for(let n=0;n<e.cameras.length;n++){const i=e.cameras[n];Oo.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse);Fo.setFromProjectionMatrix(Oo,this.coordinateSystem);if(Fo.containsPoint(t)){return true}}return false}clone(){return new Bo}}function zo(t,e){return t-e}function ko(t,e){return t.z-e.z}function Vo(t,e){return e.z-t.z}class Go{constructor(){this.index=0;this.pool=[];this.list=[]}push(t,e,n,i){const r=this.pool;const s=this.list;if(this.index>=r.length){r.push({start:-1,count:-1,z:-1,index:-1})}const a=r[this.index];s.push(a);this.index++;a.start=t;a.count=e;a.z=n;a.index=i}reset(){this.list.length=0;this.index=0}}const Ho=new Ar;const Wo=new vs(1,1,1);const Xo=new No;const jo=new Bo;const qo=new tr;const Yo=new xr;const Zo=new xi;const Jo=new xi;const Ko=new xi;const $o=new Go;const Qo=new oa;const tl=[];function el(t,e,n=0){const i=e.itemSize;if(t.isInterleavedBufferAttribute||t.array.constructor!==e.array.constructor){const r=t.count;for(let s=0;s<r;s++){for(let r=0;r<i;r++){e.setComponent(s+n,r,t.getComponent(s,r))}}}else{e.array.set(t.array,n*i)}e.needsUpdate=true}function nl(t,e){if(t.constructor!==e.constructor){const n=Math.min(t.length,e.length);for(let i=0;i<n;i++){e[i]=t[i]}}else{const n=Math.min(t.length,e.length);e.set(new t.constructor(t.buffer,0,n))}}class il extends oa{constructor(t,e,n=e*2,i){super(new Zs,i);this.isBatchedMesh=true;this.perObjectFrustumCulled=true;this.sortObjects=true;this.boundingBox=null;this.boundingSphere=null;this.customSort=null;this._instanceInfo=[];this._geometryInfo=[];this._availableInstanceIds=[];this._availableGeometryIds=[];this._nextIndexStart=0;this._nextVertexStart=0;this._geometryCount=0;this._visibilityChanged=true;this._geometryInitialized=false;this._maxInstanceCount=t;this._maxVertexCount=e;this._maxIndexCount=n;this._multiDrawCounts=new Int32Array(t);this._multiDrawStarts=new Int32Array(t);this._multiDrawCount=0;this._multiDrawInstances=null;this._matricesTexture=null;this._indirectTexture=null;this._colorsTexture=null;this._initMatricesTexture();this._initIndirectTexture()}get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}_initMatricesTexture(){let t=Math.sqrt(this._maxInstanceCount*4);t=Math.ceil(t/4)*4;t=Math.max(t,4);const e=new Float32Array(t*t*4);const n=new mo(e,t,t,Ht,Nt);this._matricesTexture=n}_initIndirectTexture(){let t=Math.sqrt(this._maxInstanceCount);t=Math.ceil(t);const e=new Uint32Array(t*t);const n=new mo(e,t,t,qt,Ut);this._indirectTexture=n}_initColorsTexture(){let t=Math.sqrt(this._maxInstanceCount);t=Math.ceil(t);const e=new Float32Array(t*t*4).fill(1);const n=new mo(e,t,t,Ht,Nt);n.colorSpace=Oi.workingColorSpace;this._colorsTexture=n}_initializeGeometry(t){const e=this.geometry;const n=this._maxVertexCount;const i=this._maxIndexCount;if(this._geometryInitialized===false){for(const i in t.attributes){const r=t.getAttribute(i);const{array:s,itemSize:a,normalized:o}=r;const l=new s.constructor(n*a);const c=new Ls(l,a,o);e.setAttribute(i,c)}if(t.getIndex()!==null){const t=n>65535?new Uint32Array(i):new Uint16Array(i);e.setIndex(new Ls(t,1))}this._geometryInitialized=true}}_validateGeometry(t){const e=this.geometry;if(Boolean(t.getIndex())!==Boolean(e.getIndex())){throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".')}for(const n in e.attributes){if(!t.hasAttribute(n)){throw new Error(`THREE.BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`)}const i=t.getAttribute(n);const r=e.getAttribute(n);if(i.itemSize!==r.itemSize||i.normalized!==r.normalized){throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}}validateInstanceId(t){const e=this._instanceInfo;if(t<0||t>=e.length||e[t].active===false){throw new Error(`THREE.BatchedMesh: Invalid instanceId ${t}. Instance is either out of range or has been deleted.`)}}validateGeometryId(t){const e=this._geometryInfo;if(t<0||t>=e.length||e[t].active===false){throw new Error(`THREE.BatchedMesh: Invalid geometryId ${t}. Geometry is either out of range or has been deleted.`)}}setCustomSort(t){this.customSort=t;return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new tr}const t=this.boundingBox;const e=this._instanceInfo;t.makeEmpty();for(let n=0,i=e.length;n<i;n++){if(e[n].active===false)continue;const i=e[n].geometryIndex;this.getMatrixAt(n,Ho);this.getBoundingBoxAt(i,qo).applyMatrix4(Ho);t.union(qo)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new xr}const t=this.boundingSphere;const e=this._instanceInfo;t.makeEmpty();for(let n=0,i=e.length;n<i;n++){if(e[n].active===false)continue;const i=e[n].geometryIndex;this.getMatrixAt(n,Ho);this.getBoundingSphereAt(i,Yo).applyMatrix4(Ho);t.union(Yo)}}addInstance(t){const e=this._instanceInfo.length>=this.maxInstanceCount;if(e&&this._availableInstanceIds.length===0){throw new Error("THREE.BatchedMesh: Maximum item count reached.")}const n={visible:true,active:true,geometryIndex:t};let i=null;if(this._availableInstanceIds.length>0){this._availableInstanceIds.sort(zo);i=this._availableInstanceIds.shift();this._instanceInfo[i]=n}else{i=this._instanceInfo.length;this._instanceInfo.push(n)}const r=this._matricesTexture;Ho.identity().toArray(r.image.data,i*16);r.needsUpdate=true;const s=this._colorsTexture;if(s){Wo.toArray(s.image.data,i*4);s.needsUpdate=true}this._visibilityChanged=true;return i}addGeometry(t,e=-1,n=-1){this._initializeGeometry(t);this._validateGeometry(t);const i={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:true};const r=this._geometryInfo;i.vertexStart=this._nextVertexStart;i.reservedVertexCount=e===-1?t.getAttribute("position").count:e;const s=t.getIndex();const a=s!==null;if(a){i.indexStart=this._nextIndexStart;i.reservedIndexCount=n===-1?s.count:n}if(i.indexStart!==-1&&i.indexStart+i.reservedIndexCount>this._maxIndexCount||i.vertexStart+i.reservedVertexCount>this._maxVertexCount){throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.")}let o;if(this._availableGeometryIds.length>0){this._availableGeometryIds.sort(zo);o=this._availableGeometryIds.shift();r[o]=i}else{o=this._geometryCount;this._geometryCount++;r.push(i)}this.setGeometryAt(o,t);this._nextIndexStart=i.indexStart+i.reservedIndexCount;this._nextVertexStart=i.vertexStart+i.reservedVertexCount;return o}setGeometryAt(t,e){if(t>=this._geometryCount){throw new Error("THREE.BatchedMesh: Maximum geometry count reached.")}this._validateGeometry(e);const n=this.geometry;const i=n.getIndex()!==null;const r=n.getIndex();const s=e.getIndex();const a=this._geometryInfo[t];if(i&&s.count>a.reservedIndexCount||e.attributes.position.count>a.reservedVertexCount){throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.")}const o=a.vertexStart;const l=a.reservedVertexCount;a.vertexCount=e.getAttribute("position").count;for(const t in n.attributes){const i=e.getAttribute(t);const r=n.getAttribute(t);el(i,r,o);const s=i.itemSize;for(let t=i.count,e=l;t<e;t++){const e=o+t;for(let t=0;t<s;t++){r.setComponent(e,t,0)}}r.needsUpdate=true;r.addUpdateRange(o*s,l*s)}if(i){const t=a.indexStart;const n=a.reservedIndexCount;a.indexCount=e.getIndex().count;for(let e=0;e<s.count;e++){r.setX(t+e,o+s.getX(e))}for(let e=s.count,i=n;e<i;e++){r.setX(t+e,o)}r.needsUpdate=true;r.addUpdateRange(t,a.reservedIndexCount)}a.start=i?a.indexStart:a.vertexStart;a.count=i?a.indexCount:a.vertexCount;a.boundingBox=null;if(e.boundingBox!==null){a.boundingBox=e.boundingBox.clone()}a.boundingSphere=null;if(e.boundingSphere!==null){a.boundingSphere=e.boundingSphere.clone()}this._visibilityChanged=true;return t}deleteGeometry(t){const e=this._geometryInfo;if(t>=e.length||e[t].active===false){return this}const n=this._instanceInfo;for(let e=0,i=n.length;e<i;e++){if(n[e].active&&n[e].geometryIndex===t){this.deleteInstance(e)}}e[t].active=false;this._availableGeometryIds.push(t);this._visibilityChanged=true;return this}deleteInstance(t){this.validateInstanceId(t);this._instanceInfo[t].active=false;this._availableInstanceIds.push(t);this._visibilityChanged=true;return this}optimize(){let t=0;let e=0;const n=this._geometryInfo;const i=n.map((t,e)=>e).sort((t,e)=>n[t].vertexStart-n[e].vertexStart);const r=this.geometry;for(let s=0,a=n.length;s<a;s++){const a=i[s];const o=n[a];if(o.active===false){continue}if(r.index!==null){if(o.indexStart!==e){const{indexStart:n,vertexStart:i,reservedIndexCount:s}=o;const a=r.index;const l=a.array;const c=t-i;for(let t=n;t<n+s;t++){l[t]=l[t]+c}a.array.copyWithin(e,n,n+s);a.addUpdateRange(e,s);o.indexStart=e}e+=o.reservedIndexCount}if(o.vertexStart!==t){const{vertexStart:e,reservedVertexCount:n}=o;const i=r.attributes;for(const r in i){const s=i[r];const{array:a,itemSize:o}=s;a.copyWithin(t*o,e*o,(e+n)*o);s.addUpdateRange(t*o,n*o)}o.vertexStart=t}t+=o.reservedVertexCount;o.start=r.index?o.indexStart:o.vertexStart;this._nextIndexStart=r.index?o.indexStart+o.reservedIndexCount:0;this._nextVertexStart=o.vertexStart+o.reservedVertexCount}return this}getBoundingBoxAt(t,e){if(t>=this._geometryCount){return null}const n=this.geometry;const i=this._geometryInfo[t];if(i.boundingBox===null){const t=new tr;const e=n.index;const r=n.attributes.position;for(let n=i.start,s=i.start+i.count;n<s;n++){let i=n;if(e){i=e.getX(i)}t.expandByPoint(Zo.fromBufferAttribute(r,i))}i.boundingBox=t}e.copy(i.boundingBox);return e}getBoundingSphereAt(t,e){if(t>=this._geometryCount){return null}const n=this.geometry;const i=this._geometryInfo[t];if(i.boundingSphere===null){const e=new xr;this.getBoundingBoxAt(t,qo);qo.getCenter(e.center);const r=n.index;const s=n.attributes.position;let a=0;for(let t=i.start,n=i.start+i.count;t<n;t++){let n=t;if(r){n=r.getX(n)}Zo.fromBufferAttribute(s,n);a=Math.max(a,e.center.distanceToSquared(Zo))}e.radius=Math.sqrt(a);i.boundingSphere=e}e.copy(i.boundingSphere);return e}setMatrixAt(t,e){this.validateInstanceId(t);const n=this._matricesTexture;const i=this._matricesTexture.image.data;e.toArray(i,t*16);n.needsUpdate=true;return this}getMatrixAt(t,e){this.validateInstanceId(t);return e.fromArray(this._matricesTexture.image.data,t*16)}setColorAt(t,e){this.validateInstanceId(t);if(this._colorsTexture===null){this._initColorsTexture()}e.toArray(this._colorsTexture.image.data,t*4);this._colorsTexture.needsUpdate=true;return this}getColorAt(t,e){this.validateInstanceId(t);return e.fromArray(this._colorsTexture.image.data,t*4)}setVisibleAt(t,e){this.validateInstanceId(t);if(this._instanceInfo[t].visible===e){return this}this._instanceInfo[t].visible=e;this._visibilityChanged=true;return this}getVisibleAt(t){this.validateInstanceId(t);return this._instanceInfo[t].visible}setGeometryIdAt(t,e){this.validateInstanceId(t);this.validateGeometryId(e);this._instanceInfo[t].geometryIndex=e;return this}getGeometryIdAt(t){this.validateInstanceId(t);return this._instanceInfo[t].geometryIndex}getGeometryRangeAt(t,e={}){this.validateGeometryId(t);const n=this._geometryInfo[t];e.vertexStart=n.vertexStart;e.vertexCount=n.vertexCount;e.reservedVertexCount=n.reservedVertexCount;e.indexStart=n.indexStart;e.indexCount=n.indexCount;e.reservedIndexCount=n.reservedIndexCount;e.start=n.start;e.count=n.count;return e}setInstanceCount(t){const e=this._availableInstanceIds;const n=this._instanceInfo;e.sort(zo);while(e[e.length-1]===n.length){n.pop();e.pop()}if(t<n.length){throw new Error(`BatchedMesh: Instance ids outside the range ${t} are being used. Cannot shrink instance count.`)}const i=new Int32Array(t);const r=new Int32Array(t);nl(this._multiDrawCounts,i);nl(this._multiDrawStarts,r);this._multiDrawCounts=i;this._multiDrawStarts=r;this._maxInstanceCount=t;const s=this._indirectTexture;const a=this._matricesTexture;const o=this._colorsTexture;s.dispose();this._initIndirectTexture();nl(s.image.data,this._indirectTexture.image.data);a.dispose();this._initMatricesTexture();nl(a.image.data,this._matricesTexture.image.data);if(o){o.dispose();this._initColorsTexture();nl(o.image.data,this._colorsTexture.image.data)}}setGeometrySize(t,e){const n=[...this._geometryInfo].filter(t=>t.active);const i=Math.max(...n.map(t=>t.vertexStart+t.reservedVertexCount));if(i>t){throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${e}. Cannot shrink further.`)}if(this.geometry.index){const t=Math.max(...n.map(t=>t.indexStart+t.reservedIndexCount));if(t>e){throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${e}. Cannot shrink further.`)}}const r=this.geometry;r.dispose();this._maxVertexCount=t;this._maxIndexCount=e;if(this._geometryInitialized){this._geometryInitialized=false;this.geometry=new Zs;this._initializeGeometry(r)}const s=this.geometry;if(r.index){nl(r.index.array,s.index.array)}for(const t in r.attributes){nl(r.attributes[t].array,s.attributes[t].array)}}raycast(t,e){const n=this._instanceInfo;const i=this._geometryInfo;const r=this.matrixWorld;const s=this.geometry;Qo.material=this.material;Qo.geometry.index=s.index;Qo.geometry.attributes=s.attributes;if(Qo.geometry.boundingBox===null){Qo.geometry.boundingBox=new tr}if(Qo.geometry.boundingSphere===null){Qo.geometry.boundingSphere=new xr}for(let s=0,a=n.length;s<a;s++){if(!n[s].visible||!n[s].active){continue}const a=n[s].geometryIndex;const o=i[a];Qo.geometry.setDrawRange(o.start,o.count);this.getMatrixAt(s,Qo.matrixWorld).premultiply(r);this.getBoundingBoxAt(a,Qo.geometry.boundingBox);this.getBoundingSphereAt(a,Qo.geometry.boundingSphere);Qo.raycast(t,tl);for(let t=0,n=tl.length;t<n;t++){const n=tl[t];n.object=this;n.batchId=s;e.push(n)}tl.length=0}Qo.material=null;Qo.geometry.index=null;Qo.geometry.attributes={};Qo.geometry.setDrawRange(0,Infinity)}copy(t){super.copy(t);this.geometry=t.geometry.clone();this.perObjectFrustumCulled=t.perObjectFrustumCulled;this.sortObjects=t.sortObjects;this.boundingBox=t.boundingBox!==null?t.boundingBox.clone():null;this.boundingSphere=t.boundingSphere!==null?t.boundingSphere.clone():null;this._geometryInfo=t._geometryInfo.map(t=>({...t,boundingBox:t.boundingBox!==null?t.boundingBox.clone():null,boundingSphere:t.boundingSphere!==null?t.boundingSphere.clone():null}));this._instanceInfo=t._instanceInfo.map(t=>({...t}));this._availableInstanceIds=t._availableInstanceIds.slice();this._availableGeometryIds=t._availableGeometryIds.slice();this._nextIndexStart=t._nextIndexStart;this._nextVertexStart=t._nextVertexStart;this._geometryCount=t._geometryCount;this._maxInstanceCount=t._maxInstanceCount;this._maxVertexCount=t._maxVertexCount;this._maxIndexCount=t._maxIndexCount;this._geometryInitialized=t._geometryInitialized;this._multiDrawCounts=t._multiDrawCounts.slice();this._multiDrawStarts=t._multiDrawStarts.slice();this._indirectTexture=t._indirectTexture.clone();this._indirectTexture.image.data=this._indirectTexture.image.data.slice();this._matricesTexture=t._matricesTexture.clone();this._matricesTexture.image.data=this._matricesTexture.image.data.slice();if(this._colorsTexture!==null){this._colorsTexture=t._colorsTexture.clone();this._colorsTexture.image.data=this._colorsTexture.image.data.slice()}return this}dispose(){this.geometry.dispose();this._matricesTexture.dispose();this._matricesTexture=null;this._indirectTexture.dispose();this._indirectTexture=null;if(this._colorsTexture!==null){this._colorsTexture.dispose();this._colorsTexture=null}}onBeforeRender(t,e,n,i,r){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects){return}const s=i.getIndex();const a=s===null?1:s.array.BYTES_PER_ELEMENT;const o=this._instanceInfo;const l=this._multiDrawStarts;const c=this._multiDrawCounts;const u=this._geometryInfo;const h=this.perObjectFrustumCulled;const d=this._indirectTexture;const f=d.image.data;const p=n.isArrayCamera?jo:Xo;if(h&&!n.isArrayCamera){Ho.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse).multiply(this.matrixWorld);Xo.setFromProjectionMatrix(Ho,t.coordinateSystem)}let m=0;if(this.sortObjects){Ho.copy(this.matrixWorld).invert();Zo.setFromMatrixPosition(n.matrixWorld).applyMatrix4(Ho);Jo.set(0,0,-1).transformDirection(n.matrixWorld).transformDirection(Ho);for(let t=0,e=o.length;t<e;t++){if(o[t].visible&&o[t].active){const e=o[t].geometryIndex;this.getMatrixAt(t,Ho);this.getBoundingSphereAt(e,Yo).applyMatrix4(Ho);let i=false;if(h){i=!p.intersectsSphere(Yo,n)}if(!i){const n=u[e];const i=Ko.subVectors(Yo.center,Zo).dot(Jo);$o.push(n.start,n.count,i,t)}}}const t=$o.list;const e=this.customSort;if(e===null){t.sort(r.transparent?Vo:ko)}else{e.call(this,t,n)}for(let e=0,n=t.length;e<n;e++){const n=t[e];l[m]=n.start*a;c[m]=n.count;f[m]=n.index;m++}$o.reset()}else{for(let t=0,e=o.length;t<e;t++){if(o[t].visible&&o[t].active){const e=o[t].geometryIndex;let i=false;if(h){this.getMatrixAt(t,Ho);this.getBoundingSphereAt(e,Yo).applyMatrix4(Ho);i=!p.intersectsSphere(Yo,n)}if(!i){const n=u[e];l[m]=n.start*a;c[m]=n.count;f[m]=t;m++}}}}d.needsUpdate=true;this._multiDrawCount=m;this._visibilityChanged=false}onBeforeShadow(t,e,n,i,r,s){this.onBeforeRender(t,null,i,r,s)}}class rl extends Ss{constructor(t){super();this.isLineBasicMaterial=true;this.type="LineBasicMaterial";this.color=new vs(16777215);this.map=null;this.linewidth=1;this.linecap="round";this.linejoin="round";this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.linewidth=t.linewidth;this.linecap=t.linecap;this.linejoin=t.linejoin;this.fog=t.fog;return this}}const sl=new xi;const al=new xi;const ol=new Ar;const ll=new wr;const cl=new xr;const ul=new xi;const hl=new xi;class dl extends ts{constructor(t=new Zs,e=new rl){super();this.isLine=true;this.type="Line";this.geometry=t;this.material=e;this.morphTargetDictionary=undefined;this.morphTargetInfluences=undefined;this.updateMorphTargets()}copy(t,e){super.copy(t,e);this.material=Array.isArray(t.material)?t.material.slice():t.material;this.geometry=t.geometry;return this}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position;const n=[0];for(let t=1,i=e.count;t<i;t++){sl.fromBufferAttribute(e,t-1);al.fromBufferAttribute(e,t);n[t]=n[t-1];n[t]+=sl.distanceTo(al)}t.setAttribute("lineDistance",new Vs(n,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}raycast(t,e){const n=this.geometry;const i=this.matrixWorld;const r=t.params.Line.threshold;const s=n.drawRange;const a=this.userData.renderGroup;if(a&&a.boundingSphere){cl.setFromPackedArray(a.boundingSphere)}else{if(n.boundingSphere===null)n.computeBoundingSphere();cl.copy(n.boundingSphere)}cl.applyMatrix4(i);cl.radius+=r;if(t.ray.intersectsSphere(cl)===false)return;ol.copy(i).invert();ll.copy(t.ray).applyMatrix4(ol);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3);const l=o*o;const c=this.isLineSegments?2:1;const u=n.index;const h=n.attributes;const d=h.position;if(u!==null){const n=Math.max(0,s.start);const i=Math.min(u.count,s.start+s.count);for(let r=n,s=i-1;r<s;r+=c){const n=u.getX(r);const i=u.getX(r+1);const s=fl(this,t,ll,l,n,i,r);if(s){e.push(s)}}if(this.isLineLoop){const r=u.getX(i-1);const s=u.getX(n);const a=fl(this,t,ll,l,r,s,i-1);if(a){e.push(a)}}}else{const n=Math.max(0,s.start);const i=Math.min(d.count,s.start+s.count);for(let r=n,s=i-1;r<s;r+=c){const n=fl(this,t,ll,l,r,r+1,r);if(n){e.push(n)}}if(this.isLineLoop){const r=fl(this,t,ll,l,i-1,n,i-1);if(r){e.push(r)}}}}updateMorphTargets(){const t=this.geometry;const e=t.morphAttributes;const n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(t!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=e}}}}}function fl(t,e,n,i,r,s,a){const o=t.geometry.attributes.position;sl.fromBufferAttribute(o,r);al.fromBufferAttribute(o,s);const l=n.distanceSqToSegment(sl,al,ul,hl);if(l>i)return;ul.applyMatrix4(t.matrixWorld);const c=e.ray.origin.distanceTo(ul);if(c<e.near||c>e.far)return;return{distance:c,point:hl.clone().applyMatrix4(t.matrixWorld),index:a,face:null,faceIndex:null,barycoord:null,object:t}}const pl=new xi;const ml=new xi;class gl extends dl{constructor(t,e){super(t,e);this.isLineSegments=true;this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.index===null){const e=t.attributes.position;const n=[];for(let t=0,i=e.count;t<i;t+=2){pl.fromBufferAttribute(e,t);ml.fromBufferAttribute(e,t+1);n[t]=t===0?0:n[t-1];n[t+1]=n[t]+pl.distanceTo(ml)}t.setAttribute("lineDistance",new Vs(n,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}return this}}class _l extends dl{constructor(t,e){super(t,e);this.isLineLoop=true;this.type="LineLoop"}}class xl extends Ss{constructor(t){super();this.isPointsMaterial=true;this.type="PointsMaterial";this.color=new vs(16777215);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.alphaMap=t.alphaMap;this.size=t.size;this.sizeAttenuation=t.sizeAttenuation;this.fog=t.fog;return this}}const vl=new Ar;const yl=new wr;const Ml=new xr;const Sl=new xi;class bl extends ts{constructor(t=new Zs,e=new xl){super();this.isPoints=true;this.type="Points";this.geometry=t;this.material=e;this.morphTargetDictionary=undefined;this.morphTargetInfluences=undefined;this.updateMorphTargets()}copy(t,e){super.copy(t,e);this.material=Array.isArray(t.material)?t.material.slice():t.material;this.geometry=t.geometry;return this}raycast(t,e){const n=this.geometry;const i=this.matrixWorld;const r=t.params.Points.threshold;const s=n.drawRange;const a=this.userData.renderGroup;if(a&&a.boundingSphere){Ml.setFromPackedArray(a.boundingSphere)}else{if(n.boundingSphere===null)n.computeBoundingSphere();Ml.copy(n.boundingSphere)}Ml.applyMatrix4(i);Ml.radius+=r;if(t.ray.intersectsSphere(Ml)===false)return;vl.copy(i).invert();yl.copy(t.ray).applyMatrix4(vl);const o=r/((this.scale.x+this.scale.y+this.scale.z)/3);const l=o*o;const c=n.index;const u=n.attributes;const h=u.position;if(c!==null){const n=Math.max(0,s.start);const r=Math.min(c.count,s.start+s.count);for(let s=n,a=r;s<a;s++){const n=c.getX(s);Sl.fromBufferAttribute(h,n);Tl(Sl,n,l,i,t,e,this)}}else{const n=Math.max(0,s.start);const r=Math.min(h.count,s.start+s.count);for(let s=n,a=r;s<a;s++){Sl.fromBufferAttribute(h,s);Tl(Sl,s,l,i,t,e,this)}}}updateMorphTargets(){const t=this.geometry;const e=t.morphAttributes;const n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(t!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=e}}}}}function Tl(t,e,n,i,r,s,a){const o=yl.distanceSqToPoint(t);if(o<n){const n=new xi;yl.closestPointToPoint(t,n);n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;s.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,faceIndex:null,barycoord:null,object:a})}}class El extends ji{constructor(t,e,n,i,r=Tt,s=Tt,a,o,l){super(t,e,n,i,r,s,a,o,l);this.isVideoTexture=true;this.generateMipmaps=false;const c=this;function u(){c.needsUpdate=true;t.requestVideoFrameCallback(u)}if("requestVideoFrameCallback"in t){t.requestVideoFrameCallback(u)}}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;const e="requestVideoFrameCallback"in t;if(e===false&&t.readyState>=t.HAVE_CURRENT_DATA){this.needsUpdate=true}}}class wl extends El{constructor(t,e,n,i,r,s,a,o){super({},t,e,n,i,r,s,a,o);this.isVideoFrameTexture=true}update(){}clone(){return(new this.constructor).copy(this)}setFrame(t){this.image=t;this.needsUpdate=true}}class Al extends ji{constructor(t,e){super({width:t,height:e});this.isFramebufferTexture=true;this.magFilter=vt;this.minFilter=vt;this.generateMipmaps=false;this.needsUpdate=true}}class Cl extends ji{constructor(t,e,n,i,r,s,a,o,l,c,u,h){super(null,s,a,o,l,c,i,r,u,h);this.isCompressedTexture=true;this.image={width:e,height:n};this.mipmaps=t;this.flipY=false;this.generateMipmaps=false}}class Rl extends Cl{constructor(t,e,n,i,r,s){super(t,e,n,r,s);this.isCompressedArrayTexture=true;this.image.depth=i;this.wrapR=_t;this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class Il extends Cl{constructor(t,e,n){super(undefined,t[0].width,t[0].height,e,n,ht);this.isCompressedCubeTexture=true;this.isCubeTexture=true;this.image=t}}class Pl extends ji{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l);this.isCanvasTexture=true;this.needsUpdate=true}}class Ll extends ji{constructor(t,e,n=Ut,i,r,s,a=vt,o=vt,l,c=Wt,u=1){if(c!==Wt&&c!==Xt){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}const h={width:t,height:e,depth:u};super(h,i,r,s,a,o,c,n,l);this.isDepthTexture=true;this.flipY=false;this.generateMipmaps=false;this.compareFunction=null}copy(t){super.copy(t);this.source=new Gi(Object.assign({},t.image));this.compareFunction=t.compareFunction;return this}toJSON(t){const e=super.toJSON(t);if(this.compareFunction!==null)e.compareFunction=this.compareFunction;return e}}class Dl extends Zs{constructor(t=1,e=1,n=4,i=8,r=1){super();this.type="CapsuleGeometry";this.parameters={radius:t,height:e,capSegments:n,radialSegments:i,heightSegments:r};e=Math.max(0,e);n=Math.max(1,Math.floor(n));i=Math.max(3,Math.floor(i));r=Math.max(1,Math.floor(r));const s=[];const a=[];const o=[];const l=[];const c=e/2;const u=Math.PI/2*t;const h=e;const d=2*u+h;const f=n*2+r;const p=i+1;const m=new xi;const g=new xi;for(let _=0;_<=f;_++){let x=0;let v=0;let y=0;let M=0;if(_<=n){const e=_/n;const i=e*Math.PI/2;v=-c-t*Math.cos(i);y=t*Math.sin(i);M=-t*Math.cos(i);x=e*u}else if(_<=n+r){const i=(_-n)/r;v=-c+i*e;y=t;M=0;x=u+i*h}else{const e=(_-n-r)/n;const i=e*Math.PI/2;v=c+t*Math.sin(i);y=t*Math.cos(i);M=t*Math.sin(i);x=u+h+e*u}const S=Math.max(0,Math.min(1,x/d));let b=0;if(_===0){b=.5/i}else if(_===f){b=-.5/i}for(let t=0;t<=i;t++){const e=t/i;const n=e*Math.PI*2;const r=Math.sin(n);const s=Math.cos(n);g.x=-y*s;g.y=v;g.z=y*r;a.push(g.x,g.y,g.z);m.set(-y*s,M,y*r);m.normalize();o.push(m.x,m.y,m.z);l.push(e+b,S)}if(_>0){const t=(_-1)*p;for(let e=0;e<i;e++){const n=t+e;const i=t+e+1;const r=_*p+e;const a=_*p+e+1;s.push(n,i,r);s.push(i,a,r)}}}this.setIndex(s);this.setAttribute("position",new Vs(a,3));this.setAttribute("normal",new Vs(o,3));this.setAttribute("uv",new Vs(l,2))}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new Dl(t.radius,t.height,t.capSegments,t.radialSegments,t.heightSegments)}}class Ul extends Zs{constructor(t=1,e=32,n=0,i=Math.PI*2){super();this.type="CircleGeometry";this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i};e=Math.max(3,e);const r=[];const s=[];const a=[];const o=[];const l=new xi;const c=new gi;s.push(0,0,0);a.push(0,0,1);o.push(.5,.5);for(let r=0,u=3;r<=e;r++,u+=3){const h=n+r/e*i;l.x=t*Math.cos(h);l.y=t*Math.sin(h);s.push(l.x,l.y,l.z);a.push(0,0,1);c.x=(s[u]/t+1)/2;c.y=(s[u+1]/t+1)/2;o.push(c.x,c.y)}for(let t=1;t<=e;t++){r.push(t,t+1,0)}this.setIndex(r);this.setAttribute("position",new Vs(s,3));this.setAttribute("normal",new Vs(a,3));this.setAttribute("uv",new Vs(o,2))}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new Ul(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class Nl extends Zs{constructor(t=1,e=1,n=1,i=32,r=1,s=false,a=0,o=Math.PI*2){super();this.type="CylinderGeometry";this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o};const l=this;i=Math.floor(i);r=Math.floor(r);const c=[];const u=[];const h=[];const d=[];let f=0;const p=[];const m=n/2;let g=0;_();if(s===false){if(t>0)x(true);if(e>0)x(false)}this.setIndex(c);this.setAttribute("position",new Vs(u,3));this.setAttribute("normal",new Vs(h,3));this.setAttribute("uv",new Vs(d,2));function _(){const s=new xi;const _=new xi;let x=0;const v=(e-t)/n;for(let l=0;l<=r;l++){const c=[];const g=l/r;const x=g*(e-t)+t;for(let t=0;t<=i;t++){const e=t/i;const r=e*o+a;const l=Math.sin(r);const p=Math.cos(r);_.x=x*l;_.y=-g*n+m;_.z=x*p;u.push(_.x,_.y,_.z);s.set(l,v,p).normalize();h.push(s.x,s.y,s.z);d.push(e,1-g);c.push(f++)}p.push(c)}for(let n=0;n<i;n++){for(let i=0;i<r;i++){const s=p[i][n];const a=p[i+1][n];const o=p[i+1][n+1];const l=p[i][n+1];if(t>0||i!==0){c.push(s,a,l);x+=3}if(e>0||i!==r-1){c.push(a,o,l);x+=3}}}l.addGroup(g,x,0);g+=x}function x(n){const r=f;const s=new gi;const p=new xi;let _=0;const x=n===true?t:e;const v=n===true?1:-1;for(let t=1;t<=i;t++){u.push(0,m*v,0);h.push(0,v,0);d.push(.5,.5);f++}const y=f;for(let t=0;t<=i;t++){const e=t/i;const n=e*o+a;const r=Math.cos(n);const l=Math.sin(n);p.x=x*l;p.y=m*v;p.z=x*r;u.push(p.x,p.y,p.z);h.push(0,v,0);s.x=r*.5+.5;s.y=l*.5*v+.5;d.push(s.x,s.y);f++}for(let t=0;t<i;t++){const e=r+t;const i=y+t;if(n===true){c.push(i,i+1,e)}else{c.push(i+1,i,e)}_+=3}l.addGroup(g,_,n===true?1:2);g+=_}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new Nl(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Ol extends Nl{constructor(t=1,e=1,n=32,i=1,r=false,s=0,a=Math.PI*2){super(0,t,e,n,i,r,s,a);this.type="ConeGeometry";this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:s,thetaLength:a}}static fromJSON(t){return new Ol(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Fl extends Zs{constructor(t=[],e=[],n=1,i=0){super();this.type="PolyhedronGeometry";this.parameters={vertices:t,indices:e,radius:n,detail:i};const r=[];const s=[];a(i);l(n);c();this.setAttribute("position",new Vs(r,3));this.setAttribute("normal",new Vs(r.slice(),3));this.setAttribute("uv",new Vs(s,2));if(i===0){this.computeVertexNormals()}else{this.normalizeNormals()}function a(t){const n=new xi;const i=new xi;const r=new xi;for(let s=0;s<e.length;s+=3){d(e[s+0],n);d(e[s+1],i);d(e[s+2],r);o(n,i,r,t)}}function o(t,e,n,i){const r=i+1;const s=[];for(let i=0;i<=r;i++){s[i]=[];const a=t.clone().lerp(n,i/r);const o=e.clone().lerp(n,i/r);const l=r-i;for(let t=0;t<=l;t++){if(t===0&&i===r){s[i][t]=a}else{s[i][t]=a.clone().lerp(o,t/l)}}}for(let t=0;t<r;t++){for(let e=0;e<2*(r-t)-1;e++){const n=Math.floor(e/2);if(e%2===0){h(s[t][n+1]);h(s[t+1][n]);h(s[t][n])}else{h(s[t][n+1]);h(s[t+1][n+1]);h(s[t+1][n])}}}}function l(t){const e=new xi;for(let n=0;n<r.length;n+=3){e.x=r[n+0];e.y=r[n+1];e.z=r[n+2];e.normalize().multiplyScalar(t);r[n+0]=e.x;r[n+1]=e.y;r[n+2]=e.z}}function c(){const t=new xi;for(let e=0;e<r.length;e+=3){t.x=r[e+0];t.y=r[e+1];t.z=r[e+2];const n=m(t)/2/Math.PI+.5;const i=g(t)/Math.PI+.5;s.push(n,1-i)}f();u()}function u(){for(let t=0;t<s.length;t+=6){const e=s[t+0];const n=s[t+2];const i=s[t+4];const r=Math.max(e,n,i);const a=Math.min(e,n,i);if(r>.9&&a<.1){if(e<.2)s[t+0]+=1;if(n<.2)s[t+2]+=1;if(i<.2)s[t+4]+=1}}}function h(t){r.push(t.x,t.y,t.z)}function d(e,n){const i=e*3;n.x=t[i+0];n.y=t[i+1];n.z=t[i+2]}function f(){const t=new xi;const e=new xi;const n=new xi;const i=new xi;const a=new gi;const o=new gi;const l=new gi;for(let c=0,u=0;c<r.length;c+=9,u+=6){t.set(r[c+0],r[c+1],r[c+2]);e.set(r[c+3],r[c+4],r[c+5]);n.set(r[c+6],r[c+7],r[c+8]);a.set(s[u+0],s[u+1]);o.set(s[u+2],s[u+3]);l.set(s[u+4],s[u+5]);i.copy(t).add(e).add(n).divideScalar(3);const h=m(i);p(a,u+0,t,h);p(o,u+2,e,h);p(l,u+4,n,h)}}function p(t,e,n,i){if(i<0&&t.x===1){s[e]=t.x-1}if(n.x===0&&n.z===0){s[e]=i/2/Math.PI+.5}}function m(t){return Math.atan2(t.z,-t.x)}function g(t){return Math.atan2(-t.y,Math.sqrt(t.x*t.x+t.z*t.z))}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new Fl(t.vertices,t.indices,t.radius,t.details)}}class Bl extends Fl{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;const i=1/n;const r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i];const s=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(r,s,t,e);this.type="DodecahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new Bl(t.radius,t.detail)}}const zl=new xi;const kl=new xi;const Vl=new xi;const Gl=new ps;class Hl extends Zs{constructor(t=null,e=1){super();this.type="EdgesGeometry";this.parameters={geometry:t,thresholdAngle:e};if(t!==null){const n=4;const i=Math.pow(10,n);const r=Math.cos(Xn*e);const s=t.getIndex();const a=t.getAttribute("position");const o=s?s.count:a.count;const l=[0,0,0];const c=["a","b","c"];const u=new Array(3);const h={};const d=[];for(let t=0;t<o;t+=3){if(s){l[0]=s.getX(t);l[1]=s.getX(t+1);l[2]=s.getX(t+2)}else{l[0]=t;l[1]=t+1;l[2]=t+2}const{a:e,b:n,c:o}=Gl;e.fromBufferAttribute(a,l[0]);n.fromBufferAttribute(a,l[1]);o.fromBufferAttribute(a,l[2]);Gl.getNormal(Vl);u[0]=`${Math.round(e.x*i)},${Math.round(e.y*i)},${Math.round(e.z*i)}`;u[1]=`${Math.round(n.x*i)},${Math.round(n.y*i)},${Math.round(n.z*i)}`;u[2]=`${Math.round(o.x*i)},${Math.round(o.y*i)},${Math.round(o.z*i)}`;if(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]){continue}for(let t=0;t<3;t++){const e=(t+1)%3;const n=u[t];const i=u[e];const s=Gl[c[t]];const a=Gl[c[e]];const o=`${n}_${i}`;const f=`${i}_${n}`;if(f in h&&h[f]){if(Vl.dot(h[f].normal)<=r){d.push(s.x,s.y,s.z);d.push(a.x,a.y,a.z)}h[f]=null}else if(!(o in h)){h[o]={index0:l[t],index1:l[e],normal:Vl.clone()}}}}for(const t in h){if(h[t]){const{index0:e,index1:n}=h[t];zl.fromBufferAttribute(a,e);kl.fromBufferAttribute(a,n);d.push(zl.x,zl.y,zl.z);d.push(kl.x,kl.y,kl.z)}}this.setAttribute("position",new Vs(d,3))}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}}class Wl{constructor(){this.type="Curve";this.arcLengthDivisions=200;this.needsUpdate=false;this.cacheArcLengths=null}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.")}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++){e.push(this.getPoint(n/t))}return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++){e.push(this.getPointAt(n/t))}return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate){return this.cacheArcLengths}this.needsUpdate=false;const e=[];let n,i=this.getPoint(0);let r=0;e.push(0);for(let s=1;s<=t;s++){n=this.getPoint(s/t);r+=n.distanceTo(i);e.push(r);i=n}this.cacheArcLengths=e;return e}updateArcLengths(){this.needsUpdate=true;this.getLengths()}getUtoTmapping(t,e=null){const n=this.getLengths();let i=0;const r=n.length;let s;if(e){s=e}else{s=t*n[r-1]}let a=0,o=r-1,l;while(a<=o){i=Math.floor(a+(o-a)/2);l=n[i]-s;if(l<0){a=i+1}else if(l>0){o=i-1}else{o=i;break}}i=o;if(n[i]===s){return i/(r-1)}const c=n[i];const u=n[i+1];const h=u-c;const d=(s-c)/h;const f=(i+d)/(r-1);return f}getTangent(t,e){const n=1e-4;let i=t-n;let r=t+n;if(i<0)i=0;if(r>1)r=1;const s=this.getPoint(i);const a=this.getPoint(r);const o=e||(s.isVector2?new gi:new xi);o.copy(a).sub(s).normalize();return o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e=false){const n=new xi;const i=[];const r=[];const s=[];const a=new xi;const o=new Ar;for(let e=0;e<=t;e++){const n=e/t;i[e]=this.getTangentAt(n,new xi)}r[0]=new xi;s[0]=new xi;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x);const u=Math.abs(i[0].y);const h=Math.abs(i[0].z);if(c<=l){l=c;n.set(1,0,0)}if(u<=l){l=u;n.set(0,1,0)}if(h<=l){n.set(0,0,1)}a.crossVectors(i[0],n).normalize();r[0].crossVectors(i[0],a);s[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){r[e]=r[e-1].clone();s[e]=s[e-1].clone();a.crossVectors(i[e-1],i[e]);if(a.length()>Number.EPSILON){a.normalize();const t=Math.acos(Yn(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}s[e].crossVectors(i[e],r[e])}if(e===true){let e=Math.acos(Yn(r[0].dot(r[t]),-1,1));e/=t;if(i[0].dot(a.crossVectors(r[0],r[t]))>0){e=-e}for(let n=1;n<=t;n++){r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n));s[n].crossVectors(i[n],r[n])}}return{tangents:i,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(t){this.arcLengthDivisions=t.arcLengthDivisions;return this}toJSON(){const t={metadata:{version:4.7,type:"Curve",generator:"Curve.toJSON"}};t.arcLengthDivisions=this.arcLengthDivisions;t.type=this.type;return t}fromJSON(t){this.arcLengthDivisions=t.arcLengthDivisions;return this}}class Xl extends Wl{constructor(t=0,e=0,n=1,i=1,r=0,s=Math.PI*2,a=false,o=0){super();this.isEllipseCurve=true;this.type="EllipseCurve";this.aX=t;this.aY=e;this.xRadius=n;this.yRadius=i;this.aStartAngle=r;this.aEndAngle=s;this.aClockwise=a;this.aRotation=o}getPoint(t,e=new gi){const n=e;const i=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;while(r<0)r+=i;while(r>i)r-=i;if(r<Number.EPSILON){if(s){r=0}else{r=i}}if(this.aClockwise===true&&!s){if(r===i){r=-i}else{r=r-i}}const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a);let l=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const t=Math.cos(this.aRotation);const e=Math.sin(this.aRotation);const n=o-this.aX;const i=l-this.aY;o=n*t-i*e+this.aX;l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){super.copy(t);this.aX=t.aX;this.aY=t.aY;this.xRadius=t.xRadius;this.yRadius=t.yRadius;this.aStartAngle=t.aStartAngle;this.aEndAngle=t.aEndAngle;this.aClockwise=t.aClockwise;this.aRotation=t.aRotation;return this}toJSON(){const t=super.toJSON();t.aX=this.aX;t.aY=this.aY;t.xRadius=this.xRadius;t.yRadius=this.yRadius;t.aStartAngle=this.aStartAngle;t.aEndAngle=this.aEndAngle;t.aClockwise=this.aClockwise;t.aRotation=this.aRotation;return t}fromJSON(t){super.fromJSON(t);this.aX=t.aX;this.aY=t.aY;this.xRadius=t.xRadius;this.yRadius=t.yRadius;this.aStartAngle=t.aStartAngle;this.aEndAngle=t.aEndAngle;this.aClockwise=t.aClockwise;this.aRotation=t.aRotation;return this}}class jl extends Xl{constructor(t,e,n,i,r,s){super(t,e,n,n,i,r,s);this.isArcCurve=true;this.type="ArcCurve"}}function ql(){let t=0,e=0,n=0,i=0;function r(r,s,a,o){t=r;e=a;n=-3*r+3*s-2*a-o;i=2*r-2*s+a+o}return{initCatmullRom:function(t,e,n,i,s){r(e,n,s*(n-t),s*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,s,a,o){let l=(e-t)/s-(n-t)/(s+a)+(n-e)/a;let c=(n-e)/a-(i-e)/(a+o)+(i-n)/o;l*=a;c*=a;r(e,n,l,c)},calc:function(r){const s=r*r;const a=s*r;return t+e*r+n*s+i*a}}}const Yl=new xi;const Zl=new ql;const Jl=new ql;const Kl=new ql;class $l extends Wl{constructor(t=[],e=false,n="centripetal",i=.5){super();this.isCatmullRomCurve3=true;this.type="CatmullRomCurve3";this.points=t;this.closed=e;this.curveType=n;this.tension=i}getPoint(t,e=new xi){const n=e;const i=this.points;const r=i.length;const s=(r-(this.closed?0:1))*t;let a=Math.floor(s);let o=s-a;if(this.closed){a+=a>0?0:(Math.floor(Math.abs(a)/r)+1)*r}else if(o===0&&a===r-1){a=r-2;o=1}let l,c;if(this.closed||a>0){l=i[(a-1)%r]}else{Yl.subVectors(i[0],i[1]).add(i[0]);l=Yl}const u=i[a%r];const h=i[(a+1)%r];if(this.closed||a+2<r){c=i[(a+2)%r]}else{Yl.subVectors(i[r-1],i[r-2]).add(i[r-1]);c=Yl}if(this.curveType==="centripetal"||this.curveType==="chordal"){const t=this.curveType==="chordal"?.5:.25;let e=Math.pow(l.distanceToSquared(u),t);let n=Math.pow(u.distanceToSquared(h),t);let i=Math.pow(h.distanceToSquared(c),t);if(n<1e-4)n=1;if(e<1e-4)e=n;if(i<1e-4)i=n;Zl.initNonuniformCatmullRom(l.x,u.x,h.x,c.x,e,n,i);Jl.initNonuniformCatmullRom(l.y,u.y,h.y,c.y,e,n,i);Kl.initNonuniformCatmullRom(l.z,u.z,h.z,c.z,e,n,i)}else if(this.curveType==="catmullrom"){Zl.initCatmullRom(l.x,u.x,h.x,c.x,this.tension);Jl.initCatmullRom(l.y,u.y,h.y,c.y,this.tension);Kl.initCatmullRom(l.z,u.z,h.z,c.z,this.tension)}n.set(Zl.calc(o),Jl.calc(o),Kl.calc(o));return n}copy(t){super.copy(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}this.closed=t.closed;this.curveType=t.curveType;this.tension=t.tension;return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}t.closed=this.closed;t.curveType=this.curveType;t.tension=this.tension;return t}fromJSON(t){super.fromJSON(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new xi).fromArray(n))}this.closed=t.closed;this.curveType=t.curveType;this.tension=t.tension;return this}}function Ql(t,e,n,i,r){const s=(i-e)*.5;const a=(r-n)*.5;const o=t*t;const l=t*o;return(2*n-2*i+s+a)*l+(-3*n+3*i-2*s-a)*o+s*t+n}function tc(t,e){const n=1-t;return n*n*e}function ec(t,e){return 2*(1-t)*t*e}function nc(t,e){return t*t*e}function ic(t,e,n,i){return tc(t,e)+ec(t,n)+nc(t,i)}function rc(t,e){const n=1-t;return n*n*n*e}function sc(t,e){const n=1-t;return 3*n*n*t*e}function ac(t,e){return 3*(1-t)*t*t*e}function oc(t,e){return t*t*t*e}function lc(t,e,n,i,r){return rc(t,e)+sc(t,n)+ac(t,i)+oc(t,r)}class cc extends Wl{constructor(t=new gi,e=new gi,n=new gi,i=new gi){super();this.isCubicBezierCurve=true;this.type="CubicBezierCurve";this.v0=t;this.v1=e;this.v2=n;this.v3=i}getPoint(t,e=new gi){const n=e;const i=this.v0,r=this.v1,s=this.v2,a=this.v3;n.set(lc(t,i.x,r.x,s.x,a.x),lc(t,i.y,r.y,s.y,a.y));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);this.v3.copy(t.v3);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();t.v3=this.v3.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);this.v3.fromArray(t.v3);return this}}class uc extends Wl{constructor(t=new xi,e=new xi,n=new xi,i=new xi){super();this.isCubicBezierCurve3=true;this.type="CubicBezierCurve3";this.v0=t;this.v1=e;this.v2=n;this.v3=i}getPoint(t,e=new xi){const n=e;const i=this.v0,r=this.v1,s=this.v2,a=this.v3;n.set(lc(t,i.x,r.x,s.x,a.x),lc(t,i.y,r.y,s.y,a.y),lc(t,i.z,r.z,s.z,a.z));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);this.v3.copy(t.v3);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();t.v3=this.v3.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);this.v3.fromArray(t.v3);return this}}class hc extends Wl{constructor(t=new gi,e=new gi){super();this.isLineCurve=true;this.type="LineCurve";this.v1=t;this.v2=e}getPoint(t,e=new gi){const n=e;if(t===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(t).add(this.v1)}return n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new gi){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){super.copy(t);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}class dc extends Wl{constructor(t=new xi,e=new xi){super();this.isLineCurve3=true;this.type="LineCurve3";this.v1=t;this.v2=e}getPoint(t,e=new xi){const n=e;if(t===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(t).add(this.v1)}return n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e=new xi){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(t,e){return this.getTangent(t,e)}copy(t){super.copy(t);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}class fc extends Wl{constructor(t=new gi,e=new gi,n=new gi){super();this.isQuadraticBezierCurve=true;this.type="QuadraticBezierCurve";this.v0=t;this.v1=e;this.v2=n}getPoint(t,e=new gi){const n=e;const i=this.v0,r=this.v1,s=this.v2;n.set(ic(t,i.x,r.x,s.x),ic(t,i.y,r.y,s.y));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}class pc extends Wl{constructor(t=new xi,e=new xi,n=new xi){super();this.isQuadraticBezierCurve3=true;this.type="QuadraticBezierCurve3";this.v0=t;this.v1=e;this.v2=n}getPoint(t,e=new xi){const n=e;const i=this.v0,r=this.v1,s=this.v2;n.set(ic(t,i.x,r.x,s.x),ic(t,i.y,r.y,s.y),ic(t,i.z,r.z,s.z));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}class mc extends Wl{constructor(t=[]){super();this.isSplineCurve=true;this.type="SplineCurve";this.points=t}getPoint(t,e=new gi){const n=e;const i=this.points;const r=(i.length-1)*t;const s=Math.floor(r);const a=r-s;const o=i[s===0?s:s-1];const l=i[s];const c=i[s>i.length-2?i.length-1:s+1];const u=i[s>i.length-3?i.length-1:s+2];n.set(Ql(a,o.x,l.x,c.x,u.x),Ql(a,o.y,l.y,c.y,u.y));return n}copy(t){super.copy(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new gi).fromArray(n))}return this}}var gc=Object.freeze({__proto__:null,ArcCurve:jl,CatmullRomCurve3:$l,CubicBezierCurve:cc,CubicBezierCurve3:uc,EllipseCurve:Xl,LineCurve:hc,LineCurve3:dc,QuadraticBezierCurve:fc,QuadraticBezierCurve3:pc,SplineCurve:mc});class _c extends Wl{constructor(){super();this.type="CurvePath";this.curves=[];this.autoClose=false}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0);const e=this.curves[this.curves.length-1].getPoint(1);if(!t.equals(e)){const n=t.isVector2===true?"LineCurve":"LineCurve3";this.curves.push(new gc[n](e,t))}return this}getPoint(t,e){const n=t*this.getLength();const i=this.getCurveLengths();let r=0;while(r<i.length){if(i[r]>=n){const t=i[r]-n;const s=this.curves[r];const a=s.getLength();const o=a===0?0:1-t/a;return s.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths}const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++){e+=this.curves[n].getLength();t.push(e)}this.cacheLengths=t;return t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++){e.push(this.getPoint(n/t))}if(this.autoClose){e.push(e[0])}return e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const s=r[i];const a=s.isEllipseCurve?t*2:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?t*s.points.length:t;const o=s.getPoints(a);for(let t=0;t<o.length;t++){const i=o[t];if(n&&n.equals(i))continue;e.push(i);n=i}}if(this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])){e.push(e[0])}return e}copy(t){super.copy(t);this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}this.autoClose=t.autoClose;return this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose;t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t);this.autoClose=t.autoClose;this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new gc[n.type]).fromJSON(n))}return this}}class xc extends _c{constructor(t){super();this.type="Path";this.currentPoint=new gi;if(t){this.setFromPoints(t)}}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++){this.lineTo(t[e].x,t[e].y)}return this}moveTo(t,e){this.currentPoint.set(t,e);return this}lineTo(t,e){const n=new hc(this.currentPoint.clone(),new gi(t,e));this.curves.push(n);this.currentPoint.set(t,e);return this}quadraticCurveTo(t,e,n,i){const r=new fc(this.currentPoint.clone(),new gi(t,e),new gi(n,i));this.curves.push(r);this.currentPoint.set(n,i);return this}bezierCurveTo(t,e,n,i,r,s){const a=new cc(this.currentPoint.clone(),new gi(t,e),new gi(n,i),new gi(r,s));this.curves.push(a);this.currentPoint.set(r,s);return this}splineThru(t){const e=[this.currentPoint.clone()].concat(t);const n=new mc(e);this.curves.push(n);this.currentPoint.copy(t[t.length-1]);return this}arc(t,e,n,i,r,s){const a=this.currentPoint.x;const o=this.currentPoint.y;this.absarc(t+a,e+o,n,i,r,s);return this}absarc(t,e,n,i,r,s){this.absellipse(t,e,n,n,i,r,s);return this}ellipse(t,e,n,i,r,s,a,o){const l=this.currentPoint.x;const c=this.currentPoint.y;this.absellipse(t+l,e+c,n,i,r,s,a,o);return this}absellipse(t,e,n,i,r,s,a,o){const l=new Xl(t,e,n,i,r,s,a,o);if(this.curves.length>0){const t=l.getPoint(0);if(!t.equals(this.currentPoint)){this.lineTo(t.x,t.y)}}this.curves.push(l);const c=l.getPoint(1);this.currentPoint.copy(c);return this}copy(t){super.copy(t);this.currentPoint.copy(t.currentPoint);return this}toJSON(){const t=super.toJSON();t.currentPoint=this.currentPoint.toArray();return t}fromJSON(t){super.fromJSON(t);this.currentPoint.fromArray(t.currentPoint);return this}}class vc extends xc{constructor(t){super(t);this.uuid=qn();this.type="Shape";this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++){e[n]=this.holes[n].getPoints(t)}return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t);this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid;t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t);this.uuid=t.uuid;this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new xc).fromJSON(n))}return this}}function yc(t,e,n=2){const i=e&&e.length;const r=i?e[0]*n:t.length;let s=Mc(t,0,r,n,true);const a=[];if(!s||s.next===s.prev)return a;let o,l,c;if(i)s=Cc(t,e,s,n);if(t.length>80*n){o=Infinity;l=Infinity;let e=-Infinity;let i=-Infinity;for(let s=n;s<r;s+=n){const n=t[s];const r=t[s+1];if(n<o)o=n;if(r<l)l=r;if(n>e)e=n;if(r>i)i=r}c=Math.max(e-o,i-l);c=c!==0?32767/c:0}bc(s,a,n,o,l,c,0);return a}function Mc(t,e,n,i,r){let s;if(r===$c(t,e,n,i)>0){for(let r=e;r<n;r+=i)s=Zc(r/i|0,t[r],t[r+1],s)}else{for(let r=n-i;r>=e;r-=i)s=Zc(r/i|0,t[r],t[r+1],s)}if(s&&Vc(s,s.next)){Jc(s);s=s.next}return s}function Sc(t,e){if(!t)return t;if(!e)e=t;let n=t,i;do{i=false;if(!n.steiner&&(Vc(n,n.next)||kc(n.prev,n,n.next)===0)){Jc(n);n=e=n.prev;if(n===n.next)break;i=true}else{n=n.next}}while(i||n!==e);return e}function bc(t,e,n,i,r,s,a){if(!t)return;if(!a&&s)Dc(t,i,r,s);let o=t;while(t.prev!==t.next){const l=t.prev;const c=t.next;if(s?Ec(t,i,r,s):Tc(t)){e.push(l.i,t.i,c.i);Jc(t);t=c.next;o=c.next;continue}t=c;if(t===o){if(!a){bc(Sc(t),e,n,i,r,s,1)}else if(a===1){t=wc(Sc(t),e);bc(t,e,n,i,r,s,2)}else if(a===2){Ac(t,e,n,i,r,s)}break}}}function Tc(t){const e=t.prev,n=t,i=t.next;if(kc(e,n,i)>=0)return false;const r=e.x,s=n.x,a=i.x,o=e.y,l=n.y,c=i.y;const u=Math.min(r,s,a),h=Math.min(o,l,c),d=Math.max(r,s,a),f=Math.max(o,l,c);let p=i.next;while(p!==e){if(p.x>=u&&p.x<=d&&p.y>=h&&p.y<=f&&Bc(r,o,s,l,a,c,p.x,p.y)&&kc(p.prev,p,p.next)>=0)return false;p=p.next}return true}function Ec(t,e,n,i){const r=t.prev,s=t,a=t.next;if(kc(r,s,a)>=0)return false;const o=r.x,l=s.x,c=a.x,u=r.y,h=s.y,d=a.y;const f=Math.min(o,l,c),p=Math.min(u,h,d),m=Math.max(o,l,c),g=Math.max(u,h,d);const _=Nc(f,p,e,n,i),x=Nc(m,g,e,n,i);let v=t.prevZ,y=t.nextZ;while(v&&v.z>=_&&y&&y.z<=x){if(v.x>=f&&v.x<=m&&v.y>=p&&v.y<=g&&v!==r&&v!==a&&Bc(o,u,l,h,c,d,v.x,v.y)&&kc(v.prev,v,v.next)>=0)return false;v=v.prevZ;if(y.x>=f&&y.x<=m&&y.y>=p&&y.y<=g&&y!==r&&y!==a&&Bc(o,u,l,h,c,d,y.x,y.y)&&kc(y.prev,y,y.next)>=0)return false;y=y.nextZ}while(v&&v.z>=_){if(v.x>=f&&v.x<=m&&v.y>=p&&v.y<=g&&v!==r&&v!==a&&Bc(o,u,l,h,c,d,v.x,v.y)&&kc(v.prev,v,v.next)>=0)return false;v=v.prevZ}while(y&&y.z<=x){if(y.x>=f&&y.x<=m&&y.y>=p&&y.y<=g&&y!==r&&y!==a&&Bc(o,u,l,h,c,d,y.x,y.y)&&kc(y.prev,y,y.next)>=0)return false;y=y.nextZ}return true}function wc(t,e){let n=t;do{const i=n.prev,r=n.next.next;if(!Vc(i,r)&&Gc(i,n,n.next,r)&&jc(i,r)&&jc(r,i)){e.push(i.i,n.i,r.i);Jc(n);Jc(n.next);n=t=r}n=n.next}while(n!==t);return Sc(n)}function Ac(t,e,n,i,r,s){let a=t;do{let t=a.next.next;while(t!==a.prev){if(a.i!==t.i&&zc(a,t)){let o=Yc(a,t);a=Sc(a,a.next);o=Sc(o,o.next);bc(a,e,n,i,r,s,0);bc(o,e,n,i,r,s,0);return}t=t.next}a=a.next}while(a!==t)}function Cc(t,e,n,i){const r=[];for(let n=0,s=e.length;n<s;n++){const a=e[n]*i;const o=n<s-1?e[n+1]*i:t.length;const l=Mc(t,a,o,i,false);if(l===l.next)l.steiner=true;r.push(Oc(l))}r.sort(Rc);for(let t=0;t<r.length;t++){n=Ic(r[t],n)}return n}function Rc(t,e){let n=t.x-e.x;if(n===0){n=t.y-e.y;if(n===0){const i=(t.next.y-t.y)/(t.next.x-t.x);const r=(e.next.y-e.y)/(e.next.x-e.x);n=i-r}}return n}function Ic(t,e){const n=Pc(t,e);if(!n){return e}const i=Yc(n,t);Sc(i,i.next);return Sc(n,n.next)}function Pc(t,e){let n=e;const i=t.x;const r=t.y;let s=-Infinity;let a;if(Vc(t,n))return n;do{if(Vc(t,n.next))return n.next;else if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=i&&t>s){s=t;a=n.x<n.next.x?n:n.next;if(t===i)return a}}n=n.next}while(n!==e);if(!a)return null;const o=a;const l=a.x;const c=a.y;let u=Infinity;n=a;do{if(i>=n.x&&n.x>=l&&i!==n.x&&Fc(r<c?i:s,r,l,c,r<c?s:i,r,n.x,n.y)){const e=Math.abs(r-n.y)/(i-n.x);if(jc(n,t)&&(e<u||e===u&&(n.x>a.x||n.x===a.x&&Lc(a,n)))){a=n;u=e}}n=n.next}while(n!==o);return a}function Lc(t,e){return kc(t.prev,t,e.prev)<0&&kc(e.next,t,t.next)<0}function Dc(t,e,n,i){let r=t;do{if(r.z===0)r.z=Nc(r.x,r.y,e,n,i);r.prevZ=r.prev;r.nextZ=r.next;r=r.next}while(r!==t);r.prevZ.nextZ=null;r.prevZ=null;Uc(r)}function Uc(t){let e;let n=1;do{let i=t;let r;t=null;let s=null;e=0;while(i){e++;let a=i;let o=0;for(let t=0;t<n;t++){o++;a=a.nextZ;if(!a)break}let l=n;while(o>0||l>0&&a){if(o!==0&&(l===0||!a||i.z<=a.z)){r=i;i=i.nextZ;o--}else{r=a;a=a.nextZ;l--}if(s)s.nextZ=r;else t=r;r.prevZ=s;s=r}i=a}s.nextZ=null;n*=2}while(e>1);return t}function Nc(t,e,n,i,r){t=(t-n)*r|0;e=(e-i)*r|0;t=(t|t<<8)&16711935;t=(t|t<<4)&252645135;t=(t|t<<2)&858993459;t=(t|t<<1)&1431655765;e=(e|e<<8)&16711935;e=(e|e<<4)&252645135;e=(e|e<<2)&858993459;e=(e|e<<1)&1431655765;return t|e<<1}function Oc(t){let e=t,n=t;do{if(e.x<n.x||e.x===n.x&&e.y<n.y)n=e;e=e.next}while(e!==t);return n}function Fc(t,e,n,i,r,s,a,o){return(r-a)*(e-o)>=(t-a)*(s-o)&&(t-a)*(i-o)>=(n-a)*(e-o)&&(n-a)*(s-o)>=(r-a)*(i-o)}function Bc(t,e,n,i,r,s,a,o){return!(t===a&&e===o)&&Fc(t,e,n,i,r,s,a,o)}function zc(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!Xc(t,e)&&(jc(t,e)&&jc(e,t)&&qc(t,e)&&(kc(t.prev,t,e.prev)||kc(t,e.prev,e))||Vc(t,e)&&kc(t.prev,t,t.next)>0&&kc(e.prev,e,e.next)>0)}function kc(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function Vc(t,e){return t.x===e.x&&t.y===e.y}function Gc(t,e,n,i){const r=Wc(kc(t,e,n));const s=Wc(kc(t,e,i));const a=Wc(kc(n,i,t));const o=Wc(kc(n,i,e));if(r!==s&&a!==o)return true;if(r===0&&Hc(t,n,e))return true;if(s===0&&Hc(t,i,e))return true;if(a===0&&Hc(n,t,i))return true;if(o===0&&Hc(n,e,i))return true;return false}function Hc(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function Wc(t){return t>0?1:t<0?-1:0}function Xc(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&Gc(n,n.next,t,e))return true;n=n.next}while(n!==t);return false}function jc(t,e){return kc(t.prev,t,t.next)<0?kc(t,e,t.next)>=0&&kc(t,t.prev,e)>=0:kc(t,e,t.prev)<0||kc(t,t.next,e)<0}function qc(t,e){let n=t;let i=false;const r=(t.x+e.x)/2;const s=(t.y+e.y)/2;do{if(n.y>s!==n.next.y>s&&n.next.y!==n.y&&r<(n.next.x-n.x)*(s-n.y)/(n.next.y-n.y)+n.x)i=!i;n=n.next}while(n!==t);return i}function Yc(t,e){const n=Kc(t.i,t.x,t.y),i=Kc(e.i,e.x,e.y),r=t.next,s=e.prev;t.next=e;e.prev=t;n.next=r;r.prev=n;i.next=n;n.prev=i;s.next=i;i.prev=s;return i}function Zc(t,e,n,i){const r=Kc(t,e,n);if(!i){r.prev=r;r.next=r}else{r.next=i.next;r.prev=i;i.next.prev=r;i.next=r}return r}function Jc(t){t.next.prev=t.prev;t.prev.next=t.next;if(t.prevZ)t.prevZ.nextZ=t.nextZ;if(t.nextZ)t.nextZ.prevZ=t.prevZ}function Kc(t,e,n){return{i:t,x:e,y:n,prev:null,next:null,z:0,prevZ:null,nextZ:null,steiner:false}}function $c(t,e,n,i){let r=0;for(let s=e,a=n-i;s<n;s+=i){r+=(t[a]-t[s])*(t[s+1]+t[a+1]);a=s}return r}class Qc{static triangulate(t,e,n=2){return yc(t,e,n)}}class tu{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++){n+=t[i].x*t[r].y-t[r].x*t[i].y}return n*.5}static isClockWise(t){return tu.area(t)<0}static triangulateShape(t,e){const n=[];const i=[];const r=[];eu(t);nu(n,t);let s=t.length;e.forEach(eu);for(let t=0;t<e.length;t++){i.push(s);s+=e[t].length;nu(n,e[t])}const a=Qc.triangulate(n,i);for(let t=0;t<a.length;t+=3){r.push(a.slice(t,t+3))}return r}}function eu(t){const e=t.length;if(e>2&&t[e-1].equals(t[0])){t.pop()}}function nu(t,e){for(let n=0;n<e.length;n++){t.push(e[n].x);t.push(e[n].y)}}class iu extends Zs{constructor(t=new vc([new gi(.5,.5),new gi(-.5,.5),new gi(-.5,-.5),new gi(.5,-.5)]),e={}){super();this.type="ExtrudeGeometry";this.parameters={shapes:t,options:e};t=Array.isArray(t)?t:[t];const n=this;const i=[];const r=[];for(let e=0,n=t.length;e<n;e++){const n=t[e];s(n)}this.setAttribute("position",new Vs(i,3));this.setAttribute("uv",new Vs(r,2));this.computeVertexNormals();function s(t){const s=[];const a=e.curveSegments!==undefined?e.curveSegments:12;const o=e.steps!==undefined?e.steps:1;const l=e.depth!==undefined?e.depth:1;let c=e.bevelEnabled!==undefined?e.bevelEnabled:true;let u=e.bevelThickness!==undefined?e.bevelThickness:.2;let h=e.bevelSize!==undefined?e.bevelSize:u-.1;let d=e.bevelOffset!==undefined?e.bevelOffset:0;let f=e.bevelSegments!==undefined?e.bevelSegments:3;const p=e.extrudePath;const m=e.UVGenerator!==undefined?e.UVGenerator:ru;let g,_=false;let x,v,y,M;if(p){g=p.getSpacedPoints(o);_=true;c=false;x=p.computeFrenetFrames(o,false);v=new xi;y=new xi;M=new xi}if(!c){f=0;u=0;h=0;d=0}const S=t.extractPoints(a);let b=S.shape;const T=S.holes;const E=!tu.isClockWise(b);if(E){b=b.reverse();for(let t=0,e=T.length;t<e;t++){const e=T[t];if(tu.isClockWise(e)){T[t]=e.reverse()}}}function w(t){const e=1e-10;const n=e*e;let i=t[0];for(let e=1;e<=t.length;e++){const r=e%t.length;const s=t[r];const a=s.x-i.x;const o=s.y-i.y;const l=a*a+o*o;const c=Math.max(Math.abs(s.x),Math.abs(s.y),Math.abs(i.x),Math.abs(i.y));const u=n*c*c;if(l<=u){t.splice(r,1);e--;continue}i=s}}w(b);T.forEach(w);const A=T.length;const C=b;for(let t=0;t<A;t++){const e=T[t];b=b.concat(e)}function R(t,e,n){if(!e)console.error("THREE.ExtrudeGeometry: vec does not exist");return t.clone().addScaledVector(e,n)}const I=b.length;function P(t,e,n){let i,r,s;const a=t.x-e.x,o=t.y-e.y;const l=n.x-t.x,c=n.y-t.y;const u=a*a+o*o;const h=a*c-o*l;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(u);const d=Math.sqrt(l*l+c*c);const f=e.x-o/h;const p=e.y+a/h;const m=n.x-c/d;const g=n.y+l/d;const _=((m-f)*c-(g-p)*l)/(a*c-o*l);i=f+a*_-t.x;r=p+o*_-t.y;const x=i*i+r*r;if(x<=2){return new gi(i,r)}else{s=Math.sqrt(x/2)}}else{let t=false;if(a>Number.EPSILON){if(l>Number.EPSILON){t=true}}else{if(a<-Number.EPSILON){if(l<-Number.EPSILON){t=true}}else{if(Math.sign(o)===Math.sign(c)){t=true}}}if(t){i=-o;r=a;s=Math.sqrt(u)}else{i=a;r=o;s=Math.sqrt(u/2)}}return new gi(i/s,r/s)}const L=[];for(let t=0,e=C.length,n=e-1,i=t+1;t<e;t++,n++,i++){if(n===e)n=0;if(i===e)i=0;L[t]=P(C[t],C[n],C[i])}const D=[];let U,N=L.concat();for(let t=0,e=A;t<e;t++){const e=T[t];U=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++){if(i===n)i=0;if(r===n)r=0;U[t]=P(e[t],e[i],e[r])}D.push(U);N=N.concat(U)}let O;if(f===0){O=tu.triangulateShape(C,T)}else{const t=[];const e=[];for(let n=0;n<f;n++){const i=n/f;const r=u*Math.cos(i*Math.PI/2);const s=h*Math.sin(i*Math.PI/2)+d;for(let e=0,n=C.length;e<n;e++){const n=R(C[e],L[e],s);G(n.x,n.y,-r);if(i===0)t.push(n)}for(let t=0,n=A;t<n;t++){const n=T[t];U=D[t];const a=[];for(let t=0,e=n.length;t<e;t++){const e=R(n[t],U[t],s);G(e.x,e.y,-r);if(i===0)a.push(e)}if(i===0)e.push(a)}}O=tu.triangulateShape(t,e)}const F=O.length;const B=h+d;for(let t=0;t<I;t++){const e=c?R(b[t],N[t],B):b[t];if(!_){G(e.x,e.y,0)}else{y.copy(x.normals[0]).multiplyScalar(e.x);v.copy(x.binormals[0]).multiplyScalar(e.y);M.copy(g[0]).add(y).add(v);G(M.x,M.y,M.z)}}for(let t=1;t<=o;t++){for(let e=0;e<I;e++){const n=c?R(b[e],N[e],B):b[e];if(!_){G(n.x,n.y,l/o*t)}else{y.copy(x.normals[t]).multiplyScalar(n.x);v.copy(x.binormals[t]).multiplyScalar(n.y);M.copy(g[t]).add(y).add(v);G(M.x,M.y,M.z)}}}for(let t=f-1;t>=0;t--){const e=t/f;const n=u*Math.cos(e*Math.PI/2);const i=h*Math.sin(e*Math.PI/2)+d;for(let t=0,e=C.length;t<e;t++){const e=R(C[t],L[t],i);G(e.x,e.y,l+n)}for(let t=0,e=T.length;t<e;t++){const e=T[t];U=D[t];for(let t=0,r=e.length;t<r;t++){const r=R(e[t],U[t],i);if(!_){G(r.x,r.y,l+n)}else{G(r.x,r.y+g[o-1].y,g[o-1].x+n)}}}}z();k();function z(){const t=i.length/3;if(c){let t=0;let e=I*t;for(let t=0;t<F;t++){const n=O[t];H(n[2]+e,n[1]+e,n[0]+e)}t=o+f*2;e=I*t;for(let t=0;t<F;t++){const n=O[t];H(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<F;t++){const e=O[t];H(e[2],e[1],e[0])}for(let t=0;t<F;t++){const e=O[t];H(e[0]+I*o,e[1]+I*o,e[2]+I*o)}}n.addGroup(t,i.length/3-t,0)}function k(){const t=i.length/3;let e=0;V(C,e);e+=C.length;for(let t=0,n=T.length;t<n;t++){const n=T[t];V(n,e);e+=n.length}n.addGroup(t,i.length/3-t,1)}function V(t,e){let n=t.length;while(--n>=0){const i=n;let r=n-1;if(r<0)r=t.length-1;for(let t=0,n=o+f*2;t<n;t++){const n=I*t;const s=I*(t+1);const a=e+i+n,o=e+r+n,l=e+r+s,c=e+i+s;W(a,o,l,c)}}}function G(t,e,n){s.push(t);s.push(e);s.push(n)}function H(t,e,r){X(t);X(e);X(r);const s=i.length/3;const a=m.generateTopUV(n,i,s-3,s-2,s-1);j(a[0]);j(a[1]);j(a[2])}function W(t,e,r,s){X(t);X(e);X(s);X(e);X(r);X(s);const a=i.length/3;const o=m.generateSideWallUV(n,i,a-6,a-3,a-2,a-1);j(o[0]);j(o[1]);j(o[3]);j(o[1]);j(o[2]);j(o[3])}function X(t){i.push(s[t*3+0]);i.push(s[t*3+1]);i.push(s[t*3+2])}function j(t){r.push(t.x);r.push(t.y)}}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}toJSON(){const t=super.toJSON();const e=this.parameters.shapes;const n=this.parameters.options;return su(e,n,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}const i=t.options.extrudePath;if(i!==undefined){t.options.extrudePath=(new gc[i.type]).fromJSON(i)}return new iu(n,t.options)}}const ru={generateTopUV:function(t,e,n,i,r){const s=e[n*3];const a=e[n*3+1];const o=e[i*3];const l=e[i*3+1];const c=e[r*3];const u=e[r*3+1];return[new gi(s,a),new gi(o,l),new gi(c,u)]},generateSideWallUV:function(t,e,n,i,r,s){const a=e[n*3];const o=e[n*3+1];const l=e[n*3+2];const c=e[i*3];const u=e[i*3+1];const h=e[i*3+2];const d=e[r*3];const f=e[r*3+1];const p=e[r*3+2];const m=e[s*3];const g=e[s*3+1];const _=e[s*3+2];if(Math.abs(o-u)<Math.abs(a-c)){return[new gi(a,1-l),new gi(c,1-h),new gi(d,1-p),new gi(m,1-_)]}else{return[new gi(o,1-l),new gi(u,1-h),new gi(f,1-p),new gi(g,1-_)]}}};function su(t,e,n){n.shapes=[];if(Array.isArray(t)){for(let e=0,i=t.length;e<i;e++){const i=t[e];n.shapes.push(i.uuid)}}else{n.shapes.push(t.uuid)}n.options=Object.assign({},e);if(e.extrudePath!==undefined)n.options.extrudePath=e.extrudePath.toJSON();return n}class au extends Fl{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;const i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];const r=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,r,t,e);this.type="IcosahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new au(t.radius,t.detail)}}class ou extends Zs{constructor(t=[new gi(0,-.5),new gi(.5,0),new gi(0,.5)],e=12,n=0,i=Math.PI*2){super();this.type="LatheGeometry";this.parameters={points:t,segments:e,phiStart:n,phiLength:i};e=Math.floor(e);i=Yn(i,0,Math.PI*2);const r=[];const s=[];const a=[];const o=[];const l=[];const c=1/e;const u=new xi;const h=new gi;const d=new xi;const f=new xi;const p=new xi;let m=0;let g=0;for(let e=0;e<=t.length-1;e++){switch(e){case 0:m=t[e+1].x-t[e].x;g=t[e+1].y-t[e].y;d.x=g*1;d.y=-m;d.z=g*0;p.copy(d);d.normalize();o.push(d.x,d.y,d.z);break;case t.length-1:o.push(p.x,p.y,p.z);break;default:m=t[e+1].x-t[e].x;g=t[e+1].y-t[e].y;d.x=g*1;d.y=-m;d.z=g*0;f.copy(d);d.x+=p.x;d.y+=p.y;d.z+=p.z;d.normalize();o.push(d.x,d.y,d.z);p.copy(f)}}for(let r=0;r<=e;r++){const d=n+r*c*i;const f=Math.sin(d);const p=Math.cos(d);for(let n=0;n<=t.length-1;n++){u.x=t[n].x*f;u.y=t[n].y;u.z=t[n].x*p;s.push(u.x,u.y,u.z);h.x=r/e;h.y=n/(t.length-1);a.push(h.x,h.y);const i=o[3*n+0]*f;const c=o[3*n+1];const d=o[3*n+0]*p;l.push(i,c,d)}}for(let n=0;n<e;n++){for(let e=0;e<t.length-1;e++){const i=e+n*t.length;const s=i;const a=i+t.length;const o=i+t.length+1;const l=i+1;r.push(s,a,l);r.push(o,l,a)}}this.setIndex(r);this.setAttribute("position",new Vs(s,3));this.setAttribute("uv",new Vs(a,2));this.setAttribute("normal",new Vs(l,3))}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new ou(t.points,t.segments,t.phiStart,t.phiLength)}}class lu extends Fl{constructor(t=1,e=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];const i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,t,e);this.type="OctahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new lu(t.radius,t.detail)}}class cu extends Zs{constructor(t=1,e=1,n=1,i=1){super();this.type="PlaneGeometry";this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2;const s=e/2;const a=Math.floor(n);const o=Math.floor(i);const l=a+1;const c=o+1;const u=t/a;const h=e/o;const d=[];const f=[];const p=[];const m=[];for(let t=0;t<c;t++){const e=t*h-s;for(let n=0;n<l;n++){const i=n*u-r;f.push(i,-e,0);p.push(0,0,1);m.push(n/a);m.push(1-t/o)}}for(let t=0;t<o;t++){for(let e=0;e<a;e++){const n=e+l*t;const i=e+l*(t+1);const r=e+1+l*(t+1);const s=e+1+l*t;d.push(n,i,s);d.push(i,r,s)}}this.setIndex(d);this.setAttribute("position",new Vs(f,3));this.setAttribute("normal",new Vs(p,3));this.setAttribute("uv",new Vs(m,2))}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new cu(t.width,t.height,t.widthSegments,t.heightSegments)}}class uu extends Zs{constructor(t=.5,e=1,n=32,i=1,r=0,s=Math.PI*2){super();this.type="RingGeometry";this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:s};n=Math.max(3,n);i=Math.max(1,i);const a=[];const o=[];const l=[];const c=[];let u=t;const h=(e-t)/i;const d=new xi;const f=new gi;for(let t=0;t<=i;t++){for(let t=0;t<=n;t++){const i=r+t/n*s;d.x=u*Math.cos(i);d.y=u*Math.sin(i);o.push(d.x,d.y,d.z);l.push(0,0,1);f.x=(d.x/e+1)/2;f.y=(d.y/e+1)/2;c.push(f.x,f.y)}u+=h}for(let t=0;t<i;t++){const e=t*(n+1);for(let t=0;t<n;t++){const i=t+e;const r=i;const s=i+n+1;const o=i+n+2;const l=i+1;a.push(r,s,l);a.push(s,o,l)}}this.setIndex(a);this.setAttribute("position",new Vs(o,3));this.setAttribute("normal",new Vs(l,3));this.setAttribute("uv",new Vs(c,2))}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new uu(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class hu extends Zs{constructor(t=new vc([new gi(0,.5),new gi(-.5,-.5),new gi(.5,-.5)]),e=12){super();this.type="ShapeGeometry";this.parameters={shapes:t,curveSegments:e};const n=[];const i=[];const r=[];const s=[];let a=0;let o=0;if(Array.isArray(t)===false){l(t)}else{for(let e=0;e<t.length;e++){l(t[e]);this.addGroup(a,o,e);a+=o;o=0}}this.setIndex(n);this.setAttribute("position",new Vs(i,3));this.setAttribute("normal",new Vs(r,3));this.setAttribute("uv",new Vs(s,2));function l(t){const a=i.length/3;const l=t.extractPoints(e);let c=l.shape;const u=l.holes;if(tu.isClockWise(c)===false){c=c.reverse()}for(let t=0,e=u.length;t<e;t++){const e=u[t];if(tu.isClockWise(e)===true){u[t]=e.reverse()}}const h=tu.triangulateShape(c,u);for(let t=0,e=u.length;t<e;t++){const e=u[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0);r.push(0,0,1);s.push(e.x,e.y)}for(let t=0,e=h.length;t<e;t++){const e=h[t];const i=e[0]+a;const r=e[1]+a;const s=e[2]+a;n.push(i,r,s);o+=3}}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}toJSON(){const t=super.toJSON();const e=this.parameters.shapes;return du(e,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}return new hu(n,t.curveSegments)}}function du(t,e){e.shapes=[];if(Array.isArray(t)){for(let n=0,i=t.length;n<i;n++){const i=t[n];e.shapes.push(i.uuid)}}else{e.shapes.push(t.uuid)}return e}class fu extends Zs{constructor(t=1,e=32,n=16,i=0,r=Math.PI*2,s=0,a=Math.PI){super();this.type="SphereGeometry";this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:s,thetaLength:a};e=Math.max(3,Math.floor(e));n=Math.max(2,Math.floor(n));const o=Math.min(s+a,Math.PI);let l=0;const c=[];const u=new xi;const h=new xi;const d=[];const f=[];const p=[];const m=[];for(let d=0;d<=n;d++){const g=[];const _=d/n;let x=0;if(d===0&&s===0){x=.5/e}else if(d===n&&o===Math.PI){x=-.5/e}for(let n=0;n<=e;n++){const o=n/e;u.x=-t*Math.cos(i+o*r)*Math.sin(s+_*a);u.y=t*Math.cos(s+_*a);u.z=t*Math.sin(i+o*r)*Math.sin(s+_*a);f.push(u.x,u.y,u.z);h.copy(u).normalize();p.push(h.x,h.y,h.z);m.push(o+x,1-_);g.push(l++)}c.push(g)}for(let t=0;t<n;t++){for(let i=0;i<e;i++){const e=c[t][i+1];const r=c[t][i];const a=c[t+1][i];const l=c[t+1][i+1];if(t!==0||s>0)d.push(e,r,l);if(t!==n-1||o<Math.PI)d.push(r,a,l)}}this.setIndex(d);this.setAttribute("position",new Vs(f,3));this.setAttribute("normal",new Vs(p,3));this.setAttribute("uv",new Vs(m,2))}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new fu(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class pu extends Fl{constructor(t=1,e=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];const i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,t,e);this.type="TetrahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new pu(t.radius,t.detail)}}class mu extends Zs{constructor(t=1,e=.4,n=12,i=48,r=Math.PI*2){super();this.type="TorusGeometry";this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r};n=Math.floor(n);i=Math.floor(i);const s=[];const a=[];const o=[];const l=[];const c=new xi;const u=new xi;const h=new xi;for(let s=0;s<=n;s++){for(let d=0;d<=i;d++){const f=d/i*r;const p=s/n*Math.PI*2;u.x=(t+e*Math.cos(p))*Math.cos(f);u.y=(t+e*Math.cos(p))*Math.sin(f);u.z=e*Math.sin(p);a.push(u.x,u.y,u.z);c.x=t*Math.cos(f);c.y=t*Math.sin(f);h.subVectors(u,c).normalize();o.push(h.x,h.y,h.z);l.push(d/i);l.push(s/n)}}for(let t=1;t<=n;t++){for(let e=1;e<=i;e++){const n=(i+1)*t+e-1;const r=(i+1)*(t-1)+e-1;const a=(i+1)*(t-1)+e;const o=(i+1)*t+e;s.push(n,r,o);s.push(r,a,o)}}this.setIndex(s);this.setAttribute("position",new Vs(a,3));this.setAttribute("normal",new Vs(o,3));this.setAttribute("uv",new Vs(l,2))}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new mu(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class gu extends Zs{constructor(t=1,e=.4,n=64,i=8,r=2,s=3){super();this.type="TorusKnotGeometry";this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:s};n=Math.floor(n);i=Math.floor(i);const a=[];const o=[];const l=[];const c=[];const u=new xi;const h=new xi;const d=new xi;const f=new xi;const p=new xi;const m=new xi;const g=new xi;for(let a=0;a<=n;++a){const x=a/n*r*Math.PI*2;_(x,r,s,t,d);_(x+.01,r,s,t,f);m.subVectors(f,d);g.addVectors(f,d);p.crossVectors(m,g);g.crossVectors(p,m);p.normalize();g.normalize();for(let t=0;t<=i;++t){const r=t/i*Math.PI*2;const s=-e*Math.cos(r);const f=e*Math.sin(r);u.x=d.x+(s*g.x+f*p.x);u.y=d.y+(s*g.y+f*p.y);u.z=d.z+(s*g.z+f*p.z);o.push(u.x,u.y,u.z);h.subVectors(u,d).normalize();l.push(h.x,h.y,h.z);c.push(a/n);c.push(t/i)}}for(let t=1;t<=n;t++){for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1);const r=(i+1)*t+(e-1);const s=(i+1)*t+e;const o=(i+1)*(t-1)+e;a.push(n,r,o);a.push(r,s,o)}}this.setIndex(a);this.setAttribute("position",new Vs(o,3));this.setAttribute("normal",new Vs(l,3));this.setAttribute("uv",new Vs(c,2));function _(t,e,n,i,r){const s=Math.cos(t);const a=Math.sin(t);const o=n/e*t;const l=Math.cos(o);r.x=i*(2+l)*.5*s;r.y=i*(2+l)*a*.5;r.z=i*Math.sin(o)*.5}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}static fromJSON(t){return new gu(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class _u extends Zs{constructor(t=new pc(new xi(-1,-1,0),new xi(-1,1,0),new xi(1,1,0)),e=64,n=1,i=8,r=false){super();this.type="TubeGeometry";this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r};const s=t.computeFrenetFrames(e,r);this.tangents=s.tangents;this.normals=s.normals;this.binormals=s.binormals;const a=new xi;const o=new xi;const l=new gi;let c=new xi;const u=[];const h=[];const d=[];const f=[];p();this.setIndex(f);this.setAttribute("position",new Vs(u,3));this.setAttribute("normal",new Vs(h,3));this.setAttribute("uv",new Vs(d,2));function p(){for(let t=0;t<e;t++){m(t)}m(r===false?e:0);_();g()}function m(r){c=t.getPointAt(r/e,c);const l=s.normals[r];const d=s.binormals[r];for(let t=0;t<=i;t++){const e=t/i*Math.PI*2;const r=Math.sin(e);const s=-Math.cos(e);o.x=s*l.x+r*d.x;o.y=s*l.y+r*d.y;o.z=s*l.z+r*d.z;o.normalize();h.push(o.x,o.y,o.z);a.x=c.x+n*o.x;a.y=c.y+n*o.y;a.z=c.z+n*o.z;u.push(a.x,a.y,a.z)}}function g(){for(let t=1;t<=e;t++){for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1);const r=(i+1)*t+(e-1);const s=(i+1)*t+e;const a=(i+1)*(t-1)+e;f.push(n,r,a);f.push(r,s,a)}}}function _(){for(let t=0;t<=e;t++){for(let n=0;n<=i;n++){l.x=t/e;l.y=n/i;d.push(l.x,l.y)}}}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}toJSON(){const t=super.toJSON();t.path=this.parameters.path.toJSON();return t}static fromJSON(t){return new _u((new gc[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class xu extends Zs{constructor(t=null){super();this.type="WireframeGeometry";this.parameters={geometry:t};if(t!==null){const e=[];const n=new Set;const i=new xi;const r=new xi;if(t.index!==null){const s=t.attributes.position;const a=t.index;let o=t.groups;if(o.length===0){o=[{start:0,count:a.count,materialIndex:0}]}for(let t=0,l=o.length;t<l;++t){const l=o[t];const c=l.start;const u=l.count;for(let t=c,o=c+u;t<o;t+=3){for(let o=0;o<3;o++){const l=a.getX(t+o);const c=a.getX(t+(o+1)%3);i.fromBufferAttribute(s,l);r.fromBufferAttribute(s,c);if(vu(i,r,n)===true){e.push(i.x,i.y,i.z);e.push(r.x,r.y,r.z)}}}}}else{const s=t.attributes.position;for(let t=0,a=s.count/3;t<a;t++){for(let a=0;a<3;a++){const o=3*t+a;const l=3*t+(a+1)%3;i.fromBufferAttribute(s,o);r.fromBufferAttribute(s,l);if(vu(i,r,n)===true){e.push(i.x,i.y,i.z);e.push(r.x,r.y,r.z)}}}}this.setAttribute("position",new Vs(e,3))}}copy(t){super.copy(t);this.parameters=Object.assign({},t.parameters);return this}}function vu(t,e,n){const i=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`;const r=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;if(n.has(i)===true||n.has(r)===true){return false}else{n.add(i);n.add(r);return true}}var yu=Object.freeze({__proto__:null,BoxGeometry:ua,CapsuleGeometry:Dl,CircleGeometry:Ul,ConeGeometry:Ol,CylinderGeometry:Nl,DodecahedronGeometry:Bl,EdgesGeometry:Hl,ExtrudeGeometry:iu,IcosahedronGeometry:au,LatheGeometry:ou,OctahedronGeometry:lu,PlaneGeometry:cu,PolyhedronGeometry:Fl,RingGeometry:uu,ShapeGeometry:hu,SphereGeometry:fu,TetrahedronGeometry:pu,TorusGeometry:mu,TorusKnotGeometry:gu,TubeGeometry:_u,WireframeGeometry:xu});class Mu extends Ss{constructor(t){super();this.isShadowMaterial=true;this.type="ShadowMaterial";this.color=new vs(0);this.transparent=true;this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.fog=t.fog;return this}}class Su extends xa{constructor(t){super(t);this.isRawShaderMaterial=true;this.type="RawShaderMaterial"}}class bu extends Ss{constructor(t){super();this.isMeshStandardMaterial=true;this.type="MeshStandardMaterial";this.defines={STANDARD:""};this.color=new vs(16777215);this.roughness=1;this.metalness=0;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new vs(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=Ye;this.normalScale=new gi(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Fr;this.envMapIntensity=1;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.defines={STANDARD:""};this.color.copy(t.color);this.roughness=t.roughness;this.metalness=t.metalness;this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.roughnessMap=t.roughnessMap;this.metalnessMap=t.metalnessMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.envMapRotation.copy(t.envMapRotation);this.envMapIntensity=t.envMapIntensity;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.flatShading=t.flatShading;this.fog=t.fog;return this}}class Tu extends bu{constructor(t){super();this.isMeshPhysicalMaterial=true;this.defines={STANDARD:"",PHYSICAL:""};this.type="MeshPhysicalMaterial";this.anisotropyRotation=0;this.anisotropyMap=null;this.clearcoatMap=null;this.clearcoatRoughness=0;this.clearcoatRoughnessMap=null;this.clearcoatNormalScale=new gi(1,1);this.clearcoatNormalMap=null;this.ior=1.5;Object.defineProperty(this,"reflectivity",{get:function(){return Yn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}});this.iridescenceMap=null;this.iridescenceIOR=1.3;this.iridescenceThicknessRange=[100,400];this.iridescenceThicknessMap=null;this.sheenColor=new vs(0);this.sheenColorMap=null;this.sheenRoughness=1;this.sheenRoughnessMap=null;this.transmissionMap=null;this.thickness=0;this.thicknessMap=null;this.attenuationDistance=Infinity;this.attenuationColor=new vs(1,1,1);this.specularIntensity=1;this.specularIntensityMap=null;this.specularColor=new vs(1,1,1);this.specularColorMap=null;this._anisotropy=0;this._clearcoat=0;this._dispersion=0;this._iridescence=0;this._sheen=0;this._transmission=0;this.setValues(t)}get anisotropy(){return this._anisotropy}set anisotropy(t){if(this._anisotropy>0!==t>0){this.version++}this._anisotropy=t}get clearcoat(){return this._clearcoat}set clearcoat(t){if(this._clearcoat>0!==t>0){this.version++}this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){if(this._iridescence>0!==t>0){this.version++}this._iridescence=t}get dispersion(){return this._dispersion}set dispersion(t){if(this._dispersion>0!==t>0){this.version++}this._dispersion=t}get sheen(){return this._sheen}set sheen(t){if(this._sheen>0!==t>0){this.version++}this._sheen=t}get transmission(){return this._transmission}set transmission(t){if(this._transmission>0!==t>0){this.version++}this._transmission=t}copy(t){super.copy(t);this.defines={STANDARD:"",PHYSICAL:""};this.anisotropy=t.anisotropy;this.anisotropyRotation=t.anisotropyRotation;this.anisotropyMap=t.anisotropyMap;this.clearcoat=t.clearcoat;this.clearcoatMap=t.clearcoatMap;this.clearcoatRoughness=t.clearcoatRoughness;this.clearcoatRoughnessMap=t.clearcoatRoughnessMap;this.clearcoatNormalMap=t.clearcoatNormalMap;this.clearcoatNormalScale.copy(t.clearcoatNormalScale);this.dispersion=t.dispersion;this.ior=t.ior;this.iridescence=t.iridescence;this.iridescenceMap=t.iridescenceMap;this.iridescenceIOR=t.iridescenceIOR;this.iridescenceThicknessRange=[...t.iridescenceThicknessRange];this.iridescenceThicknessMap=t.iridescenceThicknessMap;this.sheen=t.sheen;this.sheenColor.copy(t.sheenColor);this.sheenColorMap=t.sheenColorMap;this.sheenRoughness=t.sheenRoughness;this.sheenRoughnessMap=t.sheenRoughnessMap;this.transmission=t.transmission;this.transmissionMap=t.transmissionMap;this.thickness=t.thickness;this.thicknessMap=t.thicknessMap;this.attenuationDistance=t.attenuationDistance;this.attenuationColor.copy(t.attenuationColor);this.specularIntensity=t.specularIntensity;this.specularIntensityMap=t.specularIntensityMap;this.specularColor.copy(t.specularColor);this.specularColorMap=t.specularColorMap;return this}}class Eu extends Ss{constructor(t){super();this.isMeshPhongMaterial=true;this.type="MeshPhongMaterial";this.color=new vs(16777215);this.specular=new vs(1118481);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new vs(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=Ye;this.normalScale=new gi(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Fr;this.combine=K;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.specular.copy(t.specular);this.shininess=t.shininess;this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.envMapRotation.copy(t.envMapRotation);this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.flatShading=t.flatShading;this.fog=t.fog;return this}}class wu extends Ss{constructor(t){super();this.isMeshToonMaterial=true;this.defines={TOON:""};this.type="MeshToonMaterial";this.color=new vs(16777215);this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new vs(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=Ye;this.normalScale=new gi(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.gradientMap=t.gradientMap;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.alphaMap=t.alphaMap;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.fog=t.fog;return this}}class Au extends Ss{constructor(t){super();this.isMeshNormalMaterial=true;this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=Ye;this.normalScale=new gi(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.flatShading=false;this.setValues(t)}copy(t){super.copy(t);this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.flatShading=t.flatShading;return this}}class Cu extends Ss{constructor(t){super();this.isMeshLambertMaterial=true;this.type="MeshLambertMaterial";this.color=new vs(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new vs(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=Ye;this.normalScale=new gi(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.envMapRotation=new Fr;this.combine=K;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.envMapRotation.copy(t.envMapRotation);this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.flatShading=t.flatShading;this.fog=t.fog;return this}}class Ru extends Ss{constructor(t){super();this.isMeshDepthMaterial=true;this.type="MeshDepthMaterial";this.depthPacking=We;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.setValues(t)}copy(t){super.copy(t);this.depthPacking=t.depthPacking;this.map=t.map;this.alphaMap=t.alphaMap;this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;return this}}class Iu extends Ss{constructor(t){super();this.isMeshDistanceMaterial=true;this.type="MeshDistanceMaterial";this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.setValues(t)}copy(t){super.copy(t);this.map=t.map;this.alphaMap=t.alphaMap;this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;return this}}class Pu extends Ss{constructor(t){super();this.isMeshMatcapMaterial=true;this.defines={MATCAP:""};this.type="MeshMatcapMaterial";this.color=new vs(16777215);this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=Ye;this.normalScale=new gi(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.flatShading=false;this.fog=true;this.setValues(t)}copy(t){super.copy(t);this.defines={MATCAP:""};this.color.copy(t.color);this.matcap=t.matcap;this.map=t.map;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.alphaMap=t.alphaMap;this.flatShading=t.flatShading;this.fog=t.fog;return this}}class Lu extends rl{constructor(t){super();this.isLineDashedMaterial=true;this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(t)}copy(t){super.copy(t);this.scale=t.scale;this.dashSize=t.dashSize;this.gapSize=t.gapSize;return this}}function Du(t,e){if(!t||t.constructor===e)return t;if(typeof e.BYTES_PER_ELEMENT==="number"){return new e(t)}return Array.prototype.slice.call(t)}function Uu(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Nu(t){function e(e,n){return t[e]-t[n]}const n=t.length;const i=new Array(n);for(let t=0;t!==n;++t)i[t]=t;i.sort(e);return i}function Ou(t,e,n){const i=t.length;const r=new t.constructor(i);for(let s=0,a=0;a!==i;++s){const i=n[s]*e;for(let n=0;n!==e;++n){r[a++]=t[i+n]}}return r}function Fu(t,e,n,i){let r=1,s=t[0];while(s!==undefined&&s[i]===undefined){s=t[r++]}if(s===undefined)return;let a=s[i];if(a===undefined)return;if(Array.isArray(a)){do{a=s[i];if(a!==undefined){e.push(s.time);n.push(...a)}s=t[r++]}while(s!==undefined)}else if(a.toArray!==undefined){do{a=s[i];if(a!==undefined){e.push(s.time);a.toArray(n,n.length)}s=t[r++]}while(s!==undefined)}else{do{a=s[i];if(a!==undefined){e.push(s.time);n.push(a)}s=t[r++]}while(s!==undefined)}}function Bu(t,e,n,i,r=30){const s=t.clone();s.name=e;const a=[];for(let t=0;t<s.tracks.length;++t){const e=s.tracks[t];const o=e.getValueSize();const l=[];const c=[];for(let t=0;t<e.times.length;++t){const s=e.times[t]*r;if(s<n||s>=i)continue;l.push(e.times[t]);for(let n=0;n<o;++n){c.push(e.values[t*o+n])}}if(l.length===0)continue;e.times=Du(l,e.times.constructor);e.values=Du(c,e.values.constructor);a.push(e)}s.tracks=a;let o=Infinity;for(let t=0;t<s.tracks.length;++t){if(o>s.tracks[t].times[0]){o=s.tracks[t].times[0]}}for(let t=0;t<s.tracks.length;++t){s.tracks[t].shift(-1*o)}s.resetDuration();return s}function zu(t,e=0,n=t,i=30){if(i<=0)i=30;const r=n.tracks.length;const s=e/i;for(let e=0;e<r;++e){const i=n.tracks[e];const r=i.ValueTypeName;if(r==="bool"||r==="string")continue;const a=t.tracks.find(function(t){return t.name===i.name&&t.ValueTypeName===r});if(a===undefined)continue;let o=0;const l=i.getValueSize();if(i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){o=l/3}let c=0;const u=a.getValueSize();if(a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){c=u/3}const h=i.times.length-1;let d;if(s<=i.times[0]){const t=o;const e=l-o;d=i.values.slice(t,e)}else if(s>=i.times[h]){const t=h*l+o;const e=t+l-o;d=i.values.slice(t,e)}else{const t=i.createInterpolant();const e=o;const n=l-o;t.evaluate(s);d=t.resultBuffer.slice(e,n)}if(r==="quaternion"){const t=(new _i).fromArray(d).normalize().conjugate();t.toArray(d)}const f=a.times.length;for(let t=0;t<f;++t){const e=t*u+c;if(r==="quaternion"){_i.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e)}else{const t=u-c*2;for(let n=0;n<t;++n){a.values[e+n]-=d[n]}}}}t.blendMode=ke;return t}class ku{static convertArray(t,e){return Du(t,e)}static isTypedArray(t){return Uu(t)}static getKeyframeOrder(t){return Nu(t)}static sortedArray(t,e,n){return Ou(t,e,n)}static flattenJSON(t,e,n,i){Fu(t,e,n,i)}static subclip(t,e,n,i,r=30){return Bu(t,e,n,i,r)}static makeClipAdditive(t,e=0,n=t,i=30){return zu(t,e,n,i)}}class Vu{constructor(t,e,n,i){this.parameterPositions=t;this._cachedIndex=0;this.resultBuffer=i!==undefined?i:new e.constructor(n);this.sampleValues=e;this.valueSize=n;this.settings=null;this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let s;n:{i:if(!(t<i)){for(let s=n+2;;){if(i===undefined){if(t<r)break i;n=e.length;this._cachedIndex=n;return this.copySampleValue_(n-1)}if(n===s)break;r=i;i=e[++n];if(t<i){break e}}s=e.length;break n}if(!(t>=r)){const a=e[1];if(t<a){n=2;r=a}for(let s=n-2;;){if(r===undefined){this._cachedIndex=0;return this.copySampleValue_(0)}if(n===s)break;i=r;r=e[--n-1];if(t>=r){break e}}s=n;n=0;break n}break t}while(n<s){const i=n+s>>>1;if(t<e[i]){s=i}else{n=i+1}}i=e[n];r=e[n-1];if(r===undefined){this._cachedIndex=0;return this.copySampleValue_(0)}if(i===undefined){n=e.length;this._cachedIndex=n;return this.copySampleValue_(n-1)}}this._cachedIndex=n;this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t){e[t]=n[r+t]}return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Gu extends Vu{constructor(t,e,n,i){super(t,e,n,i);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;this.DefaultSettings_={endingStart:Oe,endingEnd:Oe}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,s=t+1,a=i[r],o=i[s];if(a===undefined){switch(this.getSettings_().endingStart){case Fe:r=t;a=2*e-n;break;case Be:r=i.length-2;a=e+i[r]-i[r+1];break;default:r=t;a=n}}if(o===undefined){switch(this.getSettings_().endingEnd){case Fe:s=t;o=2*n-e;break;case Be:s=1;o=n+i[1]-i[0];break;default:s=t-1;o=e}}const l=(n-e)*.5,c=this.valueSize;this._weightPrev=l/(e-a);this._weightNext=l/(o-n);this._offsetPrev=r*c;this._offsetNext=s*c}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,d=this._weightNext,f=(n-e)/(i-e),p=f*f,m=p*f;const g=-h*m+2*h*p-h*f;const _=(1+h)*m+(-1.5-2*h)*p+(-.5+h)*f+1;const x=(-1-d)*m+(1.5+d)*p+.5*f;const v=d*m-d*p;for(let t=0;t!==a;++t){r[t]=g*s[c+t]+_*s[l+t]+x*s[o+t]+v*s[u+t]}return r}}class Hu extends Vu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=(n-e)/(i-e),u=1-c;for(let t=0;t!==a;++t){r[t]=s[l+t]*u+s[o+t]*c}return r}}class Wu extends Vu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class Xu{constructor(t,e,n,i){if(t===undefined)throw new Error("THREE.KeyframeTrack: track name is undefined");if(e===undefined||e.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t;this.times=Du(e,this.TimeBufferType);this.values=Du(n,this.ValueBufferType);this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON){n=e.toJSON(t)}else{n={name:t.name,times:Du(t.times,Array),values:Du(t.values,Array)};const e=t.getInterpolation();if(e!==t.DefaultInterpolation){n.interpolation=e}}n.type=t.ValueTypeName;return n}InterpolantFactoryMethodDiscrete(t){return new Wu(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Hu(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Gu(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case De:e=this.InterpolantFactoryMethodDiscrete;break;case Ue:e=this.InterpolantFactoryMethodLinear;break;case Ne:e=this.InterpolantFactoryMethodSmooth;break}if(e===undefined){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){if(t!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation)}else{throw new Error(e)}}console.warn("THREE.KeyframeTrack:",e);return this}this.createInterpolant=e;return this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return De;case this.InterpolantFactoryMethodLinear:return Ue;case this.InterpolantFactoryMethodSmooth:return Ne}}getValueSize(){return this.values.length/this.times.length}shift(t){if(t!==0){const e=this.times;for(let n=0,i=e.length;n!==i;++n){e[n]+=t}}return this}scale(t){if(t!==1){const e=this.times;for(let n=0,i=e.length;n!==i;++n){e[n]*=t}}return this}trim(t,e){const n=this.times,i=n.length;let r=0,s=i-1;while(r!==i&&n[r]<t){++r}while(s!==-1&&n[s]>e){--s}++s;if(r!==0||s!==i){if(r>=s){s=Math.max(s,1);r=s-1}const t=this.getValueSize();this.times=n.slice(r,s);this.values=this.values.slice(r*t,s*t)}return this}validate(){let t=true;const e=this.getValueSize();if(e-Math.floor(e)!==0){console.error("THREE.KeyframeTrack: Invalid value size in track.",this);t=false}const n=this.times,i=this.values,r=n.length;if(r===0){console.error("THREE.KeyframeTrack: Track is empty.",this);t=false}let s=null;for(let e=0;e!==r;e++){const i=n[e];if(typeof i==="number"&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i);t=false;break}if(s!==null&&s>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,s);t=false;break}s=i}if(i!==undefined){if(Uu(i)){for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n);t=false;break}}}}return t}optimize(){const t=this.times.slice(),e=this.values.slice(),n=this.getValueSize(),i=this.getInterpolation()===Ne,r=t.length-1;let s=1;for(let a=1;a<r;++a){let r=false;const o=t[a];const l=t[a+1];if(o!==l&&(a!==1||o!==t[0])){if(!i){const t=a*n,i=t-n,s=t+n;for(let a=0;a!==n;++a){const n=e[t+a];if(n!==e[i+a]||n!==e[s+a]){r=true;break}}}else{r=true}}if(r){if(a!==s){t[s]=t[a];const i=a*n,r=s*n;for(let t=0;t!==n;++t){e[r+t]=e[i+t]}}++s}}if(r>0){t[s]=t[r];for(let t=r*n,i=s*n,a=0;a!==n;++a){e[i+a]=e[t+a]}++s}if(s!==t.length){this.times=t.slice(0,s);this.values=e.slice(0,s*n)}else{this.times=t;this.values=e}return this}clone(){const t=this.times.slice();const e=this.values.slice();const n=this.constructor;const i=new n(this.name,t,e);i.createInterpolant=this.createInterpolant;return i}}Xu.prototype.ValueTypeName="";Xu.prototype.TimeBufferType=Float32Array;Xu.prototype.ValueBufferType=Float32Array;Xu.prototype.DefaultInterpolation=Ue;class ju extends Xu{constructor(t,e,n){super(t,e,n)}}ju.prototype.ValueTypeName="bool";ju.prototype.ValueBufferType=Array;ju.prototype.DefaultInterpolation=De;ju.prototype.InterpolantFactoryMethodLinear=undefined;ju.prototype.InterpolantFactoryMethodSmooth=undefined;class qu extends Xu{constructor(t,e,n,i){super(t,e,n,i)}}qu.prototype.ValueTypeName="color";class Yu extends Xu{constructor(t,e,n,i){super(t,e,n,i)}}Yu.prototype.ValueTypeName="number";class Zu extends Vu{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(n-e)/(i-e);let l=t*a;for(let t=l+a;l!==t;l+=4){_i.slerpFlat(r,0,s,l-a,s,l,o)}return r}}class Ju extends Xu{constructor(t,e,n,i){super(t,e,n,i)}InterpolantFactoryMethodLinear(t){return new Zu(this.times,this.values,this.getValueSize(),t)}}Ju.prototype.ValueTypeName="quaternion";Ju.prototype.InterpolantFactoryMethodSmooth=undefined;class Ku extends Xu{constructor(t,e,n){super(t,e,n)}}Ku.prototype.ValueTypeName="string";Ku.prototype.ValueBufferType=Array;Ku.prototype.DefaultInterpolation=De;Ku.prototype.InterpolantFactoryMethodLinear=undefined;Ku.prototype.InterpolantFactoryMethodSmooth=undefined;class $u extends Xu{constructor(t,e,n,i){super(t,e,n,i)}}$u.prototype.ValueTypeName="vector";class Qu{constructor(t="",e=-1,n=[],i=ze){this.name=t;this.tracks=n;this.duration=e;this.blendMode=i;this.uuid=qn();if(this.duration<0){this.resetDuration()}}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t){e.push(eh(n[t]).scale(i))}const r=new this(t.name,t.duration,e,t.blendMode);r.uuid=t.uuid;return r}static toJSON(t){const e=[],n=t.tracks;const i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t){e.push(Xu.toJSON(n[t]))}return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length;const s=[];for(let t=0;t<r;t++){let a=[];let o=[];a.push((t+r-1)%r,t,(t+1)%r);o.push(0,1,0);const l=Nu(a);a=Ou(a,1,l);o=Ou(o,1,l);if(!i&&a[0]===0){a.push(r);o.push(o[0])}s.push(new Yu(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/n))}return new this(t,-1,s)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++){if(n[t].name===e){return n[t]}}return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={};const r=/^([\w-]*?)([\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e];const s=n.name.match(r);if(s&&s.length>1){const t=s[1];let e=i[t];if(!e){i[t]=e=[]}e.push(n)}}const s=[];for(const t in i){s.push(this.CreateFromMorphTargetSequence(t,i[t],e,n))}return s}static parseAnimation(t,e){console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185");if(!t){console.error("THREE.AnimationClip: No animation in JSONLoader data.");return null}const n=function(t,e,n,i,r){if(n.length!==0){const s=[];const a=[];Fu(n,s,a,i);if(s.length!==0){r.push(new t(e,s,a))}}};const i=[];const r=t.name||"default";const s=t.fps||30;const a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(!r||r.length===0)continue;if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++){if(r[e].morphTargets){for(let n=0;n<r[e].morphTargets.length;n++){t[r[e].morphTargets[n]]=-1}}}for(const n in t){const t=[];const s=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time);s.push(i.morphTarget===n?1:0)}i.push(new Yu(".morphTargetInfluence["+n+"]",t,s))}o=t.length*s}else{const s=".bones["+e[t].name+"]";n($u,s+".position",r,"pos",i);n(Ju,s+".quaternion",r,"rot",i);n($u,s+".scale",r,"scl",i)}}if(i.length===0){return null}const c=new this(r,o,i,a);return c}resetDuration(){const t=this.tracks;let e=0;for(let n=0,i=t.length;n!==i;++n){const t=this.tracks[n];e=Math.max(e,t.times[t.times.length-1])}this.duration=e;return this}trim(){for(let t=0;t<this.tracks.length;t++){this.tracks[t].trim(0,this.duration)}return this}validate(){let t=true;for(let e=0;e<this.tracks.length;e++){t=t&&this.tracks[e].validate()}return t}optimize(){for(let t=0;t<this.tracks.length;t++){this.tracks[t].optimize()}return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++){t.push(this.tracks[e].clone())}return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function th(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Yu;case"vector":case"vector2":case"vector3":case"vector4":return $u;case"color":return qu;case"quaternion":return Ju;case"bool":case"boolean":return ju;case"string":return Ku}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}function eh(t){if(t.type===undefined){throw new Error("THREE.KeyframeTrack: track type undefined, can not parse")}const e=th(t.type);if(t.times===undefined){const e=[],n=[];Fu(t.keys,e,n,"value");t.times=e;t.values=n}if(e.parse!==undefined){return e.parse(t)}else{return new e(t.name,t.times,t.values,t.interpolation)}}const nh={enabled:false,files:{},add:function(t,e){if(this.enabled===false)return;this.files[t]=e},get:function(t){if(this.enabled===false)return;return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class ih{constructor(t,e,n){const i=this;let r=false;let s=0;let a=0;let o=undefined;const l=[];this.onStart=undefined;this.onLoad=t;this.onProgress=e;this.onError=n;this.itemStart=function(t){a++;if(r===false){if(i.onStart!==undefined){i.onStart(t,s,a)}}r=true};this.itemEnd=function(t){s++;if(i.onProgress!==undefined){i.onProgress(t,s,a)}if(s===a){r=false;if(i.onLoad!==undefined){i.onLoad()}}};this.itemError=function(t){if(i.onError!==undefined){i.onError(t)}};this.resolveURL=function(t){if(o){return o(t)}return t};this.setURLModifier=function(t){o=t;return this};this.addHandler=function(t,e){l.push(t,e);return this};this.removeHandler=function(t){const e=l.indexOf(t);if(e!==-1){l.splice(e,2)}return this};this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e];const i=l[e+1];if(n.global)n.lastIndex=0;if(n.test(t)){return i}}return null}}}const rh=new ih;class sh{constructor(t){this.manager=t!==undefined?t:rh;this.crossOrigin="anonymous";this.withCredentials=false;this.path="";this.resourcePath="";this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise(function(i,r){n.load(t,i,e,r)})}parse(){}setCrossOrigin(t){this.crossOrigin=t;return this}setWithCredentials(t){this.withCredentials=t;return this}setPath(t){this.path=t;return this}setResourcePath(t){this.resourcePath=t;return this}setRequestHeader(t){this.requestHeader=t;return this}}sh.DEFAULT_MATERIAL_NAME="__DEFAULT";const ah={};class oh extends Error{constructor(t,e){super(t);this.response=e}}class lh extends sh{constructor(t){super(t);this.mimeType="";this.responseType=""}load(t,e,n,i){if(t===undefined)t="";if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=nh.get(`file:${t}`);if(r!==undefined){this.manager.itemStart(t);setTimeout(()=>{if(e)e(r);this.manager.itemEnd(t)},0);return r}if(ah[t]!==undefined){ah[t].push({onLoad:e,onProgress:n,onError:i});return}ah[t]=[];ah[t].push({onLoad:e,onProgress:n,onError:i});const s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"});const a=this.mimeType;const o=this.responseType;fetch(s).then(e=>{if(e.status===200||e.status===0){if(e.status===0){console.warn("THREE.FileLoader: HTTP Status 0 received.")}if(typeof ReadableStream==="undefined"||e.body===undefined||e.body.getReader===undefined){return e}const n=ah[t];const i=e.body.getReader();const r=e.headers.get("X-File-Size")||e.headers.get("Content-Length");const s=r?parseInt(r):0;const a=s!==0;let o=0;const l=new ReadableStream({start(t){e();function e(){i.read().then(({done:i,value:r})=>{if(i){t.close()}else{o+=r.byteLength;const i=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:s});for(let t=0,e=n.length;t<e;t++){const e=n[t];if(e.onProgress)e.onProgress(i)}t.enqueue(r);e()}},e=>{t.error(e)})}}});return new Response(l)}else{throw new oh(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)}}).then(t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then(t=>{const e=new DOMParser;return e.parseFromString(t,a)});case"json":return t.json();default:if(a===""){return t.text()}else{const e=/charset="?([^;"\s]*)"?/i;const n=e.exec(a);const i=n&&n[1]?n[1].toLowerCase():undefined;const r=new TextDecoder(i);return t.arrayBuffer().then(t=>r.decode(t))}}}).then(e=>{nh.add(`file:${t}`,e);const n=ah[t];delete ah[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];if(i.onLoad)i.onLoad(e)}}).catch(e=>{const n=ah[t];if(n===undefined){this.manager.itemError(t);throw e}delete ah[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];if(i.onError)i.onError(e)}this.manager.itemError(t)}).finally(()=>{this.manager.itemEnd(t)});this.manager.itemStart(t)}setResponseType(t){this.responseType=t;return this}setMimeType(t){this.mimeType=t;return this}}class ch extends sh{constructor(t){super(t)}load(t,e,n,i){const r=this;const s=new lh(this.manager);s.setPath(this.path);s.setRequestHeader(this.requestHeader);s.setWithCredentials(this.withCredentials);s.load(t,function(n){try{e(r.parse(JSON.parse(n)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}},n,i)}parse(t){const e=[];for(let n=0;n<t.length;n++){const i=Qu.parse(t[n]);e.push(i)}return e}}class uh extends sh{constructor(t){super(t)}load(t,e,n,i){const r=this;const s=[];const a=new Cl;const o=new lh(this.manager);o.setPath(this.path);o.setResponseType("arraybuffer");o.setRequestHeader(this.requestHeader);o.setWithCredentials(r.withCredentials);let l=0;function c(c){o.load(t[c],function(t){const n=r.parse(t,true);s[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps};l+=1;if(l===6){if(n.mipmapCount===1)a.minFilter=Tt;a.image=s;a.format=n.format;a.needsUpdate=true;if(e)e(a)}},n,i)}if(Array.isArray(t)){for(let e=0,n=t.length;e<n;++e){c(e)}}else{o.load(t,function(t){const n=r.parse(t,true);if(n.isCubemap){const t=n.mipmaps.length/n.mipmapCount;for(let e=0;e<t;e++){s[e]={mipmaps:[]};for(let t=0;t<n.mipmapCount;t++){s[e].mipmaps.push(n.mipmaps[e*n.mipmapCount+t]);s[e].format=n.format;s[e].width=n.width;s[e].height=n.height}}a.image=s}else{a.image.width=n.width;a.image.height=n.height;a.mipmaps=n.mipmaps}if(n.mipmapCount===1){a.minFilter=Tt}a.format=n.format;a.needsUpdate=true;if(e)e(a)},n,i)}return a}}const hh=new WeakMap;class dh extends sh{constructor(t){super(t)}load(t,e,n,i){if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=this;const s=nh.get(`image:${t}`);if(s!==undefined){if(s.complete===true){r.manager.itemStart(t);setTimeout(function(){if(e)e(s);r.manager.itemEnd(t)},0)}else{let t=hh.get(s);if(t===undefined){t=[];hh.set(s,t)}t.push({onLoad:e,onError:i})}return s}const a=wi("img");function o(){c();if(e)e(this);const n=hh.get(this)||[];for(let t=0;t<n.length;t++){const e=n[t];if(e.onLoad)e.onLoad(this)}hh.delete(this);r.manager.itemEnd(t)}function l(e){c();if(i)i(e);nh.remove(`image:${t}`);const n=hh.get(this)||[];for(let t=0;t<n.length;t++){const i=n[t];if(i.onError)i.onError(e)}hh.delete(this);r.manager.itemError(t);r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,false);a.removeEventListener("error",l,false)}a.addEventListener("load",o,false);a.addEventListener("error",l,false);if(t.slice(0,5)!=="data:"){if(this.crossOrigin!==undefined)a.crossOrigin=this.crossOrigin}nh.add(`image:${t}`,a);r.manager.itemStart(t);a.src=t;return a}}class fh extends sh{constructor(t){super(t)}load(t,e,n,i){const r=new Aa;r.colorSpace=Ke;const s=new dh(this.manager);s.setCrossOrigin(this.crossOrigin);s.setPath(this.path);let a=0;function o(n){s.load(t[n],function(t){r.images[n]=t;a++;if(a===6){r.needsUpdate=true;if(e)e(r)}},undefined,i)}for(let e=0;e<t.length;++e){o(e)}return r}}class ph extends sh{constructor(t){super(t)}load(t,e,n,i){const r=this;const s=new mo;const a=new lh(this.manager);a.setResponseType("arraybuffer");a.setRequestHeader(this.requestHeader);a.setPath(this.path);a.setWithCredentials(r.withCredentials);a.load(t,function(t){let n;try{n=r.parse(t)}catch(t){if(i!==undefined){i(t)}else{console.error(t);return}}if(n.image!==undefined){s.image=n.image}else if(n.data!==undefined){s.image.width=n.width;s.image.height=n.height;s.image.data=n.data}s.wrapS=n.wrapS!==undefined?n.wrapS:_t;s.wrapT=n.wrapT!==undefined?n.wrapT:_t;s.magFilter=n.magFilter!==undefined?n.magFilter:Tt;s.minFilter=n.minFilter!==undefined?n.minFilter:Tt;s.anisotropy=n.anisotropy!==undefined?n.anisotropy:1;if(n.colorSpace!==undefined){s.colorSpace=n.colorSpace}if(n.flipY!==undefined){s.flipY=n.flipY}if(n.format!==undefined){s.format=n.format}if(n.type!==undefined){s.type=n.type}if(n.mipmaps!==undefined){s.mipmaps=n.mipmaps;s.minFilter=At}if(n.mipmapCount===1){s.minFilter=Tt}if(n.generateMipmaps!==undefined){s.generateMipmaps=n.generateMipmaps}s.needsUpdate=true;if(e)e(s,n)},n,i);return s}}class mh extends sh{constructor(t){super(t)}load(t,e,n,i){const r=new ji;const s=new dh(this.manager);s.setCrossOrigin(this.crossOrigin);s.setPath(this.path);s.load(t,function(t){r.image=t;r.needsUpdate=true;if(e!==undefined){e(r)}},n,i);return r}}class gh extends ts{constructor(t,e=1){super();this.isLight=true;this.type="Light";this.color=new vs(t);this.intensity=e}dispose(){}copy(t,e){super.copy(t,e);this.color.copy(t.color);this.intensity=t.intensity;return this}toJSON(t){const e=super.toJSON(t);e.object.color=this.color.getHex();e.object.intensity=this.intensity;if(this.groundColor!==undefined)e.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)e.object.distance=this.distance;if(this.angle!==undefined)e.object.angle=this.angle;if(this.decay!==undefined)e.object.decay=this.decay;if(this.penumbra!==undefined)e.object.penumbra=this.penumbra;if(this.shadow!==undefined)e.object.shadow=this.shadow.toJSON();if(this.target!==undefined)e.object.target=this.target.uuid;return e}}class _h extends gh{constructor(t,e,n){super(t,n);this.isHemisphereLight=true;this.type="HemisphereLight";this.position.copy(ts.DEFAULT_UP);this.updateMatrix();this.groundColor=new vs(e)}copy(t,e){super.copy(t,e);this.groundColor.copy(t.groundColor);return this}}const xh=new Ar;const vh=new xi;const yh=new xi;class Mh{constructor(t){this.camera=t;this.intensity=1;this.bias=0;this.normalBias=0;this.radius=1;this.blurSamples=8;this.mapSize=new gi(512,512);this.mapType=Rt;this.map=null;this.mapPass=null;this.matrix=new Ar;this.autoUpdate=true;this.needsUpdate=false;this._frustum=new No;this._frameExtents=new gi(1,1);this._viewportCount=1;this._viewports=[new qi(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera;const n=this.matrix;vh.setFromMatrixPosition(t.matrixWorld);e.position.copy(vh);yh.setFromMatrixPosition(t.target.matrixWorld);e.lookAt(yh);e.updateMatrixWorld();xh.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse);this._frustum.setFromProjectionMatrix(xh);n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);n.multiply(xh)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){if(this.map){this.map.dispose()}if(this.mapPass){this.mapPass.dispose()}}copy(t){this.camera=t.camera.clone();this.intensity=t.intensity;this.bias=t.bias;this.radius=t.radius;this.autoUpdate=t.autoUpdate;this.needsUpdate=t.needsUpdate;this.normalBias=t.normalBias;this.blurSamples=t.blurSamples;this.mapSize.copy(t.mapSize);return this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};if(this.intensity!==1)t.intensity=this.intensity;if(this.bias!==0)t.bias=this.bias;if(this.normalBias!==0)t.normalBias=this.normalBias;if(this.radius!==1)t.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)t.mapSize=this.mapSize.toArray();t.camera=this.camera.toJSON(false).object;delete t.camera.matrix;return t}}class Sh extends Mh{constructor(){super(new ba(50,1,.5,500));this.isSpotLightShadow=true;this.focus=1;this.aspect=1}updateMatrices(t){const e=this.camera;const n=jn*2*t.angle*this.focus;const i=this.mapSize.width/this.mapSize.height*this.aspect;const r=t.distance||e.far;if(n!==e.fov||i!==e.aspect||r!==e.far){e.fov=n;e.aspect=i;e.far=r;e.updateProjectionMatrix()}super.updateMatrices(t)}copy(t){super.copy(t);this.focus=t.focus;return this}}class bh extends gh{constructor(t,e,n=0,i=Math.PI/3,r=0,s=2){super(t,e);this.isSpotLight=true;this.type="SpotLight";this.position.copy(ts.DEFAULT_UP);this.updateMatrix();this.target=new ts;this.distance=n;this.angle=i;this.penumbra=r;this.decay=s;this.map=null;this.shadow=new Sh}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){super.copy(t,e);this.distance=t.distance;this.angle=t.angle;this.penumbra=t.penumbra;this.decay=t.decay;this.target=t.target.clone();this.shadow=t.shadow.clone();return this}}const Th=new Ar;const Eh=new xi;const wh=new xi;class Ah extends Mh{constructor(){super(new ba(90,1,.5,500));this.isPointLightShadow=true;this._frameExtents=new gi(4,2);this._viewportCount=6;this._viewports=[new qi(2,1,1,1),new qi(0,1,1,1),new qi(3,1,1,1),new qi(1,1,1,1),new qi(3,0,1,1),new qi(1,0,1,1)];this._cubeDirections=[new xi(1,0,0),new xi(-1,0,0),new xi(0,0,1),new xi(0,0,-1),new xi(0,1,0),new xi(0,-1,0)];this._cubeUps=[new xi(0,1,0),new xi(0,1,0),new xi(0,1,0),new xi(0,1,0),new xi(0,0,1),new xi(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera;const i=this.matrix;const r=t.distance||n.far;if(r!==n.far){n.far=r;n.updateProjectionMatrix()}Eh.setFromMatrixPosition(t.matrixWorld);n.position.copy(Eh);wh.copy(n.position);wh.add(this._cubeDirections[e]);n.up.copy(this._cubeUps[e]);n.lookAt(wh);n.updateMatrixWorld();i.makeTranslation(-Eh.x,-Eh.y,-Eh.z);Th.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse);this._frustum.setFromProjectionMatrix(Th)}}class Ch extends gh{constructor(t,e,n=0,i=2){super(t,e);this.isPointLight=true;this.type="PointLight";this.distance=n;this.decay=i;this.shadow=new Ah}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t,e){super.copy(t,e);this.distance=t.distance;this.decay=t.decay;this.shadow=t.shadow.clone();return this}}class Rh extends va{constructor(t=-1,e=1,n=1,i=-1,r=.1,s=2e3){super();this.isOrthographicCamera=true;this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=t;this.right=e;this.top=n;this.bottom=i;this.near=r;this.far=s;this.updateProjectionMatrix()}copy(t,e){super.copy(t,e);this.left=t.left;this.right=t.right;this.top=t.top;this.bottom=t.bottom;this.near=t.near;this.far=t.far;this.zoom=t.zoom;this.view=t.view===null?null:Object.assign({},t.view);return this}setViewOffset(t,e,n,i,r,s){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=t;this.view.fullHeight=e;this.view.offsetX=n;this.view.offsetY=i;this.view.width=r;this.view.height=s;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom);const e=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const i=(this.top+this.bottom)/2;let r=n-t;let s=n+t;let a=i+e;let o=i-e;if(this.view!==null&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom;const e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX;s=r+t*this.view.width;a-=e*this.view.offsetY;o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far,this.coordinateSystem);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);e.object.zoom=this.zoom;e.object.left=this.left;e.object.right=this.right;e.object.top=this.top;e.object.bottom=this.bottom;e.object.near=this.near;e.object.far=this.far;if(this.view!==null)e.object.view=Object.assign({},this.view);return e}}class Ih extends Mh{constructor(){super(new Rh(-5,5,5,-5,.5,500));this.isDirectionalLightShadow=true}}class Ph extends gh{constructor(t,e){super(t,e);this.isDirectionalLight=true;this.type="DirectionalLight";this.position.copy(ts.DEFAULT_UP);this.updateMatrix();this.target=new ts;this.shadow=new Ih}dispose(){this.shadow.dispose()}copy(t){super.copy(t);this.target=t.target.clone();this.shadow=t.shadow.clone();return this}}class Lh extends gh{constructor(t,e){super(t,e);this.isAmbientLight=true;this.type="AmbientLight"}}class Dh extends gh{constructor(t,e,n=10,i=10){super(t,e);this.isRectAreaLight=true;this.type="RectAreaLight";this.width=n;this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){super.copy(t);this.width=t.width;this.height=t.height;return this}toJSON(t){const e=super.toJSON(t);e.object.width=this.width;e.object.height=this.height;return e}}class Uh{constructor(){this.isSphericalHarmonics3=true;this.coefficients=[];for(let t=0;t<9;t++){this.coefficients.push(new xi)}}set(t){for(let e=0;e<9;e++){this.coefficients[e].copy(t[e])}return this}zero(){for(let t=0;t<9;t++){this.coefficients[t].set(0,0,0)}return this}getAt(t,e){const n=t.x,i=t.y,r=t.z;const s=this.coefficients;e.copy(s[0]).multiplyScalar(.282095);e.addScaledVector(s[1],.488603*i);e.addScaledVector(s[2],.488603*r);e.addScaledVector(s[3],.488603*n);e.addScaledVector(s[4],1.092548*(n*i));e.addScaledVector(s[5],1.092548*(i*r));e.addScaledVector(s[6],.315392*(3*r*r-1));e.addScaledVector(s[7],1.092548*(n*r));e.addScaledVector(s[8],.546274*(n*n-i*i));return e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z;const s=this.coefficients;e.copy(s[0]).multiplyScalar(.886227);e.addScaledVector(s[1],2*.511664*i);e.addScaledVector(s[2],2*.511664*r);e.addScaledVector(s[3],2*.511664*n);e.addScaledVector(s[4],2*.429043*n*i);e.addScaledVector(s[5],2*.429043*i*r);e.addScaledVector(s[6],.743125*r*r-.247708);e.addScaledVector(s[7],2*.429043*n*r);e.addScaledVector(s[8],.429043*(n*n-i*i));return e}add(t){for(let e=0;e<9;e++){this.coefficients[e].add(t.coefficients[e])}return this}addScaledSH(t,e){for(let n=0;n<9;n++){this.coefficients[n].addScaledVector(t.coefficients[n],e)}return this}scale(t){for(let e=0;e<9;e++){this.coefficients[e].multiplyScalar(t)}return this}lerp(t,e){for(let n=0;n<9;n++){this.coefficients[n].lerp(t.coefficients[n],e)}return this}equals(t){for(let e=0;e<9;e++){if(!this.coefficients[e].equals(t.coefficients[e])){return false}}return true}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++){n[i].fromArray(t,e+i*3)}return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++){n[i].toArray(t,e+i*3)}return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095;e[1]=.488603*i;e[2]=.488603*r;e[3]=.488603*n;e[4]=1.092548*n*i;e[5]=1.092548*i*r;e[6]=.315392*(3*r*r-1);e[7]=1.092548*n*r;e[8]=.546274*(n*n-i*i)}}class Nh extends gh{constructor(t=new Uh,e=1){super(undefined,e);this.isLightProbe=true;this.sh=t}copy(t){super.copy(t);this.sh.copy(t.sh);return this}fromJSON(t){this.intensity=t.intensity;this.sh.fromArray(t.sh);return this}toJSON(t){const e=super.toJSON(t);e.object.sh=this.sh.toArray();return e}}class Oh extends sh{constructor(t){super(t);this.textures={}}load(t,e,n,i){const r=this;const s=new lh(r.manager);s.setPath(r.path);s.setRequestHeader(r.requestHeader);s.setWithCredentials(r.withCredentials);s.load(t,function(n){try{e(r.parse(JSON.parse(n)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}},n,i)}parse(t){const e=this.textures;function n(t){if(e[t]===undefined){console.warn("THREE.MaterialLoader: Undefined texture",t)}return e[t]}const i=this.createMaterialFromType(t.type);if(t.uuid!==undefined)i.uuid=t.uuid;if(t.name!==undefined)i.name=t.name;if(t.color!==undefined&&i.color!==undefined)i.color.setHex(t.color);if(t.roughness!==undefined)i.roughness=t.roughness;if(t.metalness!==undefined)i.metalness=t.metalness;if(t.sheen!==undefined)i.sheen=t.sheen;if(t.sheenColor!==undefined)i.sheenColor=(new vs).setHex(t.sheenColor);if(t.sheenRoughness!==undefined)i.sheenRoughness=t.sheenRoughness;if(t.emissive!==undefined&&i.emissive!==undefined)i.emissive.setHex(t.emissive);if(t.specular!==undefined&&i.specular!==undefined)i.specular.setHex(t.specular);if(t.specularIntensity!==undefined)i.specularIntensity=t.specularIntensity;if(t.specularColor!==undefined&&i.specularColor!==undefined)i.specularColor.setHex(t.specularColor);if(t.shininess!==undefined)i.shininess=t.shininess;if(t.clearcoat!==undefined)i.clearcoat=t.clearcoat;if(t.clearcoatRoughness!==undefined)i.clearcoatRoughness=t.clearcoatRoughness;if(t.dispersion!==undefined)i.dispersion=t.dispersion;if(t.iridescence!==undefined)i.iridescence=t.iridescence;if(t.iridescenceIOR!==undefined)i.iridescenceIOR=t.iridescenceIOR;if(t.iridescenceThicknessRange!==undefined)i.iridescenceThicknessRange=t.iridescenceThicknessRange;if(t.transmission!==undefined)i.transmission=t.transmission;if(t.thickness!==undefined)i.thickness=t.thickness;if(t.attenuationDistance!==undefined)i.attenuationDistance=t.attenuationDistance;if(t.attenuationColor!==undefined&&i.attenuationColor!==undefined)i.attenuationColor.setHex(t.attenuationColor);if(t.anisotropy!==undefined)i.anisotropy=t.anisotropy;if(t.anisotropyRotation!==undefined)i.anisotropyRotation=t.anisotropyRotation;if(t.fog!==undefined)i.fog=t.fog;if(t.flatShading!==undefined)i.flatShading=t.flatShading;if(t.blending!==undefined)i.blending=t.blending;if(t.combine!==undefined)i.combine=t.combine;if(t.side!==undefined)i.side=t.side;if(t.shadowSide!==undefined)i.shadowSide=t.shadowSide;if(t.opacity!==undefined)i.opacity=t.opacity;if(t.transparent!==undefined)i.transparent=t.transparent;if(t.alphaTest!==undefined)i.alphaTest=t.alphaTest;if(t.alphaHash!==undefined)i.alphaHash=t.alphaHash;if(t.depthFunc!==undefined)i.depthFunc=t.depthFunc;if(t.depthTest!==undefined)i.depthTest=t.depthTest;if(t.depthWrite!==undefined)i.depthWrite=t.depthWrite;if(t.colorWrite!==undefined)i.colorWrite=t.colorWrite;if(t.blendSrc!==undefined)i.blendSrc=t.blendSrc;if(t.blendDst!==undefined)i.blendDst=t.blendDst;if(t.blendEquation!==undefined)i.blendEquation=t.blendEquation;if(t.blendSrcAlpha!==undefined)i.blendSrcAlpha=t.blendSrcAlpha;if(t.blendDstAlpha!==undefined)i.blendDstAlpha=t.blendDstAlpha;if(t.blendEquationAlpha!==undefined)i.blendEquationAlpha=t.blendEquationAlpha;if(t.blendColor!==undefined&&i.blendColor!==undefined)i.blendColor.setHex(t.blendColor);if(t.blendAlpha!==undefined)i.blendAlpha=t.blendAlpha;if(t.stencilWriteMask!==undefined)i.stencilWriteMask=t.stencilWriteMask;if(t.stencilFunc!==undefined)i.stencilFunc=t.stencilFunc;if(t.stencilRef!==undefined)i.stencilRef=t.stencilRef;if(t.stencilFuncMask!==undefined)i.stencilFuncMask=t.stencilFuncMask;if(t.stencilFail!==undefined)i.stencilFail=t.stencilFail;if(t.stencilZFail!==undefined)i.stencilZFail=t.stencilZFail;if(t.stencilZPass!==undefined)i.stencilZPass=t.stencilZPass;if(t.stencilWrite!==undefined)i.stencilWrite=t.stencilWrite;if(t.wireframe!==undefined)i.wireframe=t.wireframe;if(t.wireframeLinewidth!==undefined)i.wireframeLinewidth=t.wireframeLinewidth;if(t.wireframeLinecap!==undefined)i.wireframeLinecap=t.wireframeLinecap;if(t.wireframeLinejoin!==undefined)i.wireframeLinejoin=t.wireframeLinejoin;if(t.rotation!==undefined)i.rotation=t.rotation;if(t.linewidth!==undefined)i.linewidth=t.linewidth;if(t.dashSize!==undefined)i.dashSize=t.dashSize;if(t.gapSize!==undefined)i.gapSize=t.gapSize;if(t.scale!==undefined)i.scale=t.scale;if(t.polygonOffset!==undefined)i.polygonOffset=t.polygonOffset;if(t.polygonOffsetFactor!==undefined)i.polygonOffsetFactor=t.polygonOffsetFactor;if(t.polygonOffsetUnits!==undefined)i.polygonOffsetUnits=t.polygonOffsetUnits;if(t.dithering!==undefined)i.dithering=t.dithering;if(t.alphaToCoverage!==undefined)i.alphaToCoverage=t.alphaToCoverage;if(t.premultipliedAlpha!==undefined)i.premultipliedAlpha=t.premultipliedAlpha;if(t.forceSinglePass!==undefined)i.forceSinglePass=t.forceSinglePass;if(t.visible!==undefined)i.visible=t.visible;if(t.toneMapped!==undefined)i.toneMapped=t.toneMapped;if(t.userData!==undefined)i.userData=t.userData;if(t.vertexColors!==undefined){if(typeof t.vertexColors==="number"){i.vertexColors=t.vertexColors>0?true:false}else{i.vertexColors=t.vertexColors}}if(t.uniforms!==undefined){for(const e in t.uniforms){const r=t.uniforms[e];i.uniforms[e]={};switch(r.type){case"t":i.uniforms[e].value=n(r.value);break;case"c":i.uniforms[e].value=(new vs).setHex(r.value);break;case"v2":i.uniforms[e].value=(new gi).fromArray(r.value);break;case"v3":i.uniforms[e].value=(new xi).fromArray(r.value);break;case"v4":i.uniforms[e].value=(new qi).fromArray(r.value);break;case"m3":i.uniforms[e].value=(new Mi).fromArray(r.value);break;case"m4":i.uniforms[e].value=(new Ar).fromArray(r.value);break;default:i.uniforms[e].value=r.value}}}if(t.defines!==undefined)i.defines=t.defines;if(t.vertexShader!==undefined)i.vertexShader=t.vertexShader;if(t.fragmentShader!==undefined)i.fragmentShader=t.fragmentShader;if(t.glslVersion!==undefined)i.glslVersion=t.glslVersion;if(t.extensions!==undefined){for(const e in t.extensions){i.extensions[e]=t.extensions[e]}}if(t.lights!==undefined)i.lights=t.lights;if(t.clipping!==undefined)i.clipping=t.clipping;if(t.size!==undefined)i.size=t.size;if(t.sizeAttenuation!==undefined)i.sizeAttenuation=t.sizeAttenuation;if(t.map!==undefined)i.map=n(t.map);if(t.matcap!==undefined)i.matcap=n(t.matcap);if(t.alphaMap!==undefined)i.alphaMap=n(t.alphaMap);if(t.bumpMap!==undefined)i.bumpMap=n(t.bumpMap);if(t.bumpScale!==undefined)i.bumpScale=t.bumpScale;if(t.normalMap!==undefined)i.normalMap=n(t.normalMap);if(t.normalMapType!==undefined)i.normalMapType=t.normalMapType;if(t.normalScale!==undefined){let e=t.normalScale;if(Array.isArray(e)===false){e=[e,e]}i.normalScale=(new gi).fromArray(e)}if(t.displacementMap!==undefined)i.displacementMap=n(t.displacementMap);if(t.displacementScale!==undefined)i.displacementScale=t.displacementScale;if(t.displacementBias!==undefined)i.displacementBias=t.displacementBias;if(t.roughnessMap!==undefined)i.roughnessMap=n(t.roughnessMap);if(t.metalnessMap!==undefined)i.metalnessMap=n(t.metalnessMap);if(t.emissiveMap!==undefined)i.emissiveMap=n(t.emissiveMap);if(t.emissiveIntensity!==undefined)i.emissiveIntensity=t.emissiveIntensity;if(t.specularMap!==undefined)i.specularMap=n(t.specularMap);if(t.specularIntensityMap!==undefined)i.specularIntensityMap=n(t.specularIntensityMap);if(t.specularColorMap!==undefined)i.specularColorMap=n(t.specularColorMap);if(t.envMap!==undefined)i.envMap=n(t.envMap);if(t.envMapRotation!==undefined)i.envMapRotation.fromArray(t.envMapRotation);if(t.envMapIntensity!==undefined)i.envMapIntensity=t.envMapIntensity;if(t.reflectivity!==undefined)i.reflectivity=t.reflectivity;if(t.refractionRatio!==undefined)i.refractionRatio=t.refractionRatio;if(t.lightMap!==undefined)i.lightMap=n(t.lightMap);if(t.lightMapIntensity!==undefined)i.lightMapIntensity=t.lightMapIntensity;if(t.aoMap!==undefined)i.aoMap=n(t.aoMap);if(t.aoMapIntensity!==undefined)i.aoMapIntensity=t.aoMapIntensity;if(t.gradientMap!==undefined)i.gradientMap=n(t.gradientMap);if(t.clearcoatMap!==undefined)i.clearcoatMap=n(t.clearcoatMap);if(t.clearcoatRoughnessMap!==undefined)i.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap);if(t.clearcoatNormalMap!==undefined)i.clearcoatNormalMap=n(t.clearcoatNormalMap);if(t.clearcoatNormalScale!==undefined)i.clearcoatNormalScale=(new gi).fromArray(t.clearcoatNormalScale);if(t.iridescenceMap!==undefined)i.iridescenceMap=n(t.iridescenceMap);if(t.iridescenceThicknessMap!==undefined)i.iridescenceThicknessMap=n(t.iridescenceThicknessMap);if(t.transmissionMap!==undefined)i.transmissionMap=n(t.transmissionMap);if(t.thicknessMap!==undefined)i.thicknessMap=n(t.thicknessMap);if(t.anisotropyMap!==undefined)i.anisotropyMap=n(t.anisotropyMap);if(t.sheenColorMap!==undefined)i.sheenColorMap=n(t.sheenColorMap);if(t.sheenRoughnessMap!==undefined)i.sheenRoughnessMap=n(t.sheenRoughnessMap);return i}setTextures(t){this.textures=t;return this}createMaterialFromType(t){return Oh.createMaterialFromType(t)}static createMaterialFromType(t){const e={ShadowMaterial:Mu,SpriteMaterial:Ba,RawShaderMaterial:Su,ShaderMaterial:xa,PointsMaterial:xl,MeshPhysicalMaterial:Tu,MeshStandardMaterial:bu,MeshPhongMaterial:Eu,MeshToonMaterial:wu,MeshNormalMaterial:Au,MeshLambertMaterial:Cu,MeshDepthMaterial:Ru,MeshDistanceMaterial:Iu,MeshBasicMaterial:bs,MeshMatcapMaterial:Pu,LineDashedMaterial:Lu,LineBasicMaterial:rl,Material:Ss};return new e[t]}}class Fh{static extractUrlBase(t){const e=t.lastIndexOf("/");if(e===-1)return"./";return t.slice(0,e+1)}static resolveURL(t,e){if(typeof t!=="string"||t==="")return"";if(/^https?:\/\//i.test(e)&&/^\//.test(t)){e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")}if(/^(https?:)?\/\//i.test(t))return t;if(/^data:.*,.*$/i.test(t))return t;if(/^blob:.*$/i.test(t))return t;return e+t}}class Bh extends Zs{constructor(){super();this.isInstancedBufferGeometry=true;this.type="InstancedBufferGeometry";this.instanceCount=Infinity}copy(t){super.copy(t);this.instanceCount=t.instanceCount;return this}toJSON(){const t=super.toJSON();t.instanceCount=this.instanceCount;t.isInstancedBufferGeometry=true;return t}}class zh extends sh{constructor(t){super(t)}load(t,e,n,i){const r=this;const s=new lh(r.manager);s.setPath(r.path);s.setRequestHeader(r.requestHeader);s.setWithCredentials(r.withCredentials);s.load(t,function(n){try{e(r.parse(JSON.parse(n)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}},n,i)}parse(t){const e={};const n={};function i(t,n){if(e[n]!==undefined)return e[n];const i=t.interleavedBuffers;const s=i[n];const a=r(t,s.buffer);const o=Ei(s.type,a);const l=new Na(o,s.stride);l.uuid=s.uuid;e[n]=l;return l}function r(t,e){if(n[e]!==undefined)return n[e];const i=t.arrayBuffers;const r=i[e];const s=new Uint32Array(r).buffer;n[e]=s;return s}const s=t.isInstancedBufferGeometry?new Bh:new Zs;const a=t.data.index;if(a!==undefined){const t=Ei(a.type,a.array);s.setIndex(new Ls(t,1))}const o=t.data.attributes;for(const e in o){const n=o[e];let r;if(n.isInterleavedBufferAttribute){const e=i(t.data,n.data);r=new Fa(e,n.itemSize,n.offset,n.normalized)}else{const t=Ei(n.type,n.array);const e=n.isInstancedBufferAttribute?vo:Ls;r=new e(t,n.itemSize,n.normalized)}if(n.name!==undefined)r.name=n.name;if(n.usage!==undefined)r.setUsage(n.usage);s.setAttribute(e,r)}const l=t.data.morphAttributes;if(l){for(const e in l){const n=l[e];const r=[];for(let e=0,s=n.length;e<s;e++){const s=n[e];let a;if(s.isInterleavedBufferAttribute){const e=i(t.data,s.data);a=new Fa(e,s.itemSize,s.offset,s.normalized)}else{const t=Ei(s.type,s.array);a=new Ls(t,s.itemSize,s.normalized)}if(s.name!==undefined)a.name=s.name;r.push(a)}s.morphAttributes[e]=r}}const c=t.data.morphTargetsRelative;if(c){s.morphTargetsRelative=true}const u=t.data.groups||t.data.drawcalls||t.data.offsets;if(u!==undefined){for(let t=0,e=u.length;t!==e;++t){const e=u[t];s.addGroup(e.start,e.count,e.materialIndex)}}const h=t.data.boundingSphere;if(h!==undefined){s.boundingSphere=(new xr).fromJSON(h)}if(t.name)s.name=t.name;if(t.userData)s.userData=t.userData;return s}}class kh extends sh{constructor(t){super(t)}load(t,e,n,i){const r=this;const s=this.path===""?Fh.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||s;const a=new lh(this.manager);a.setPath(this.path);a.setRequestHeader(this.requestHeader);a.setWithCredentials(this.withCredentials);a.load(t,function(n){let s=null;try{s=JSON.parse(n)}catch(e){if(i!==undefined)i(e);console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message);return}const a=s.metadata;if(a===undefined||a.type===undefined||a.type.toLowerCase()==="geometry"){if(i!==undefined)i(new Error("THREE.ObjectLoader: Can't load "+t));console.error("THREE.ObjectLoader: Can't load "+t);return}r.parse(s,e)},n,i)}async loadAsync(t,e){const n=this;const i=this.path===""?Fh.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||i;const r=new lh(this.manager);r.setPath(this.path);r.setRequestHeader(this.requestHeader);r.setWithCredentials(this.withCredentials);const s=await r.loadAsync(t,e);const a=JSON.parse(s);const o=a.metadata;if(o===undefined||o.type===undefined||o.type.toLowerCase()==="geometry"){throw new Error("THREE.ObjectLoader: Can't load "+t)}return await n.parseAsync(a)}parse(t,e){const n=this.parseAnimations(t.animations);const i=this.parseShapes(t.shapes);const r=this.parseGeometries(t.geometries,i);const s=this.parseImages(t.images,function(){if(e!==undefined)e(l)});const a=this.parseTextures(t.textures,s);const o=this.parseMaterials(t.materials,a);const l=this.parseObject(t.object,r,o,a,n);const c=this.parseSkeletons(t.skeletons,l);this.bindSkeletons(l,c);this.bindLightTargets(l);if(e!==undefined){let t=false;for(const e in s){if(s[e].data instanceof HTMLImageElement){t=true;break}}if(t===false)e(l)}return l}async parseAsync(t){const e=this.parseAnimations(t.animations);const n=this.parseShapes(t.shapes);const i=this.parseGeometries(t.geometries,n);const r=await this.parseImagesAsync(t.images);const s=this.parseTextures(t.textures,r);const a=this.parseMaterials(t.materials,s);const o=this.parseObject(t.object,i,a,s,e);const l=this.parseSkeletons(t.skeletons,o);this.bindSkeletons(o,l);this.bindLightTargets(o);return o}parseShapes(t){const e={};if(t!==undefined){for(let n=0,i=t.length;n<i;n++){const i=(new vc).fromJSON(t[n]);e[i.uuid]=i}}return e}parseSkeletons(t,e){const n={};const i={};e.traverse(function(t){if(t.isBone)i[t.uuid]=t});if(t!==undefined){for(let e=0,r=t.length;e<r;e++){const r=(new xo).fromJSON(t[e],i);n[r.uuid]=r}}return n}parseGeometries(t,e){const n={};if(t!==undefined){const i=new zh;for(let r=0,s=t.length;r<s;r++){let s;const a=t[r];switch(a.type){case"BufferGeometry":case"InstancedBufferGeometry":s=i.parse(a);break;default:if(a.type in yu){s=yu[a.type].fromJSON(a,e)}else{console.warn(`THREE.ObjectLoader: Unsupported geometry type "${a.type}"`)}}s.uuid=a.uuid;if(a.name!==undefined)s.name=a.name;if(a.userData!==undefined)s.userData=a.userData;n[a.uuid]=s}}return n}parseMaterials(t,e){const n={};const i={};if(t!==undefined){const r=new Oh;r.setTextures(e);for(let e=0,s=t.length;e<s;e++){const s=t[e];if(n[s.uuid]===undefined){n[s.uuid]=r.parse(s)}i[s.uuid]=n[s.uuid]}}return i}parseAnimations(t){const e={};if(t!==undefined){for(let n=0;n<t.length;n++){const i=t[n];const r=Qu.parse(i);e[r.uuid]=r}}return e}parseImages(t,e){const n=this;const i={};let r;function s(t){n.manager.itemStart(t);return r.load(t,function(){n.manager.itemEnd(t)},undefined,function(){n.manager.itemError(t);n.manager.itemEnd(t)})}function a(t){if(typeof t==="string"){const e=t;const i=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:n.resourcePath+e;return s(i)}else{if(t.data){return{data:Ei(t.type,t.data),width:t.width,height:t.height}}else{return null}}}if(t!==undefined&&t.length>0){const n=new ih(e);r=new dh(n);r.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e];const r=n.url;if(Array.isArray(r)){const t=[];for(let e=0,n=r.length;e<n;e++){const n=r[e];const i=a(n);if(i!==null){if(i instanceof HTMLImageElement){t.push(i)}else{t.push(new mo(i.data,i.width,i.height))}}}i[n.uuid]=new Gi(t)}else{const t=a(n.url);i[n.uuid]=new Gi(t)}}}return i}async parseImagesAsync(t){const e=this;const n={};let i;async function r(t){if(typeof t==="string"){const n=t;const r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(n)?n:e.resourcePath+n;return await i.loadAsync(r)}else{if(t.data){return{data:Ei(t.type,t.data),width:t.width,height:t.height}}else{return null}}}if(t!==undefined&&t.length>0){i=new dh(this.manager);i.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e];const s=i.url;if(Array.isArray(s)){const t=[];for(let e=0,n=s.length;e<n;e++){const n=s[e];const i=await r(n);if(i!==null){if(i instanceof HTMLImageElement){t.push(i)}else{t.push(new mo(i.data,i.width,i.height))}}}n[i.uuid]=new Gi(t)}else{const t=await r(i.url);n[i.uuid]=new Gi(t)}}}return n}parseTextures(t,e){function n(t,e){if(typeof t==="number")return t;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t);return e[t]}const i={};if(t!==undefined){for(let r=0,s=t.length;r<s;r++){const s=t[r];if(s.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid)}if(e[s.image]===undefined){console.warn("THREE.ObjectLoader: Undefined image",s.image)}const a=e[s.image];const o=a.data;let l;if(Array.isArray(o)){l=new Aa;if(o.length===6)l.needsUpdate=true}else{if(o&&o.data){l=new mo}else{l=new ji}if(o)l.needsUpdate=true}l.source=a;l.uuid=s.uuid;if(s.name!==undefined)l.name=s.name;if(s.mapping!==undefined)l.mapping=n(s.mapping,Vh);if(s.channel!==undefined)l.channel=s.channel;if(s.offset!==undefined)l.offset.fromArray(s.offset);if(s.repeat!==undefined)l.repeat.fromArray(s.repeat);if(s.center!==undefined)l.center.fromArray(s.center);if(s.rotation!==undefined)l.rotation=s.rotation;if(s.wrap!==undefined){l.wrapS=n(s.wrap[0],Gh);l.wrapT=n(s.wrap[1],Gh)}if(s.format!==undefined)l.format=s.format;if(s.internalFormat!==undefined)l.internalFormat=s.internalFormat;if(s.type!==undefined)l.type=s.type;if(s.colorSpace!==undefined)l.colorSpace=s.colorSpace;if(s.minFilter!==undefined)l.minFilter=n(s.minFilter,Hh);if(s.magFilter!==undefined)l.magFilter=n(s.magFilter,Hh);if(s.anisotropy!==undefined)l.anisotropy=s.anisotropy;if(s.flipY!==undefined)l.flipY=s.flipY;if(s.generateMipmaps!==undefined)l.generateMipmaps=s.generateMipmaps;if(s.premultiplyAlpha!==undefined)l.premultiplyAlpha=s.premultiplyAlpha;if(s.unpackAlignment!==undefined)l.unpackAlignment=s.unpackAlignment;if(s.compareFunction!==undefined)l.compareFunction=s.compareFunction;if(s.userData!==undefined)l.userData=s.userData;i[s.uuid]=l}}return i}parseObject(t,e,n,i,r){let s;function a(t){if(e[t]===undefined){console.warn("THREE.ObjectLoader: Undefined geometry",t)}return e[t]}function o(t){if(t===undefined)return undefined;if(Array.isArray(t)){const e=[];for(let i=0,r=t.length;i<r;i++){const r=t[i];if(n[r]===undefined){console.warn("THREE.ObjectLoader: Undefined material",r)}e.push(n[r])}return e}if(n[t]===undefined){console.warn("THREE.ObjectLoader: Undefined material",t)}return n[t]}function l(t){if(i[t]===undefined){console.warn("THREE.ObjectLoader: Undefined texture",t)}return i[t]}let c,u;switch(t.type){case"Scene":s=new Ua;if(t.background!==undefined){if(Number.isInteger(t.background)){s.background=new vs(t.background)}else{s.background=l(t.background)}}if(t.environment!==undefined){s.environment=l(t.environment)}if(t.fog!==undefined){if(t.fog.type==="Fog"){s.fog=new Da(t.fog.color,t.fog.near,t.fog.far)}else if(t.fog.type==="FogExp2"){s.fog=new La(t.fog.color,t.fog.density)}if(t.fog.name!==""){s.fog.name=t.fog.name}}if(t.backgroundBlurriness!==undefined)s.backgroundBlurriness=t.backgroundBlurriness;if(t.backgroundIntensity!==undefined)s.backgroundIntensity=t.backgroundIntensity;if(t.backgroundRotation!==undefined)s.backgroundRotation.fromArray(t.backgroundRotation);if(t.environmentIntensity!==undefined)s.environmentIntensity=t.environmentIntensity;if(t.environmentRotation!==undefined)s.environmentRotation.fromArray(t.environmentRotation);break;case"PerspectiveCamera":s=new ba(t.fov,t.aspect,t.near,t.far);if(t.focus!==undefined)s.focus=t.focus;if(t.zoom!==undefined)s.zoom=t.zoom;if(t.filmGauge!==undefined)s.filmGauge=t.filmGauge;if(t.filmOffset!==undefined)s.filmOffset=t.filmOffset;if(t.view!==undefined)s.view=Object.assign({},t.view);break;case"OrthographicCamera":s=new Rh(t.left,t.right,t.top,t.bottom,t.near,t.far);if(t.zoom!==undefined)s.zoom=t.zoom;if(t.view!==undefined)s.view=Object.assign({},t.view);break;case"AmbientLight":s=new Lh(t.color,t.intensity);break;case"DirectionalLight":s=new Ph(t.color,t.intensity);s.target=t.target||"";break;case"PointLight":s=new Ch(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":s=new Dh(t.color,t.intensity,t.width,t.height);break;case"SpotLight":s=new bh(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);s.target=t.target||"";break;case"HemisphereLight":s=new _h(t.color,t.groundColor,t.intensity);break;case"LightProbe":s=(new Nh).fromJSON(t);break;case"SkinnedMesh":c=a(t.geometry);u=o(t.material);s=new fo(c,u);if(t.bindMode!==undefined)s.bindMode=t.bindMode;if(t.bindMatrix!==undefined)s.bindMatrix.fromArray(t.bindMatrix);if(t.skeleton!==undefined)s.skeleton=t.skeleton;break;case"Mesh":c=a(t.geometry);u=o(t.material);s=new oa(c,u);break;case"InstancedMesh":c=a(t.geometry);u=o(t.material);const e=t.count;const n=t.instanceMatrix;const i=t.instanceColor;s=new Ao(c,u,e);s.instanceMatrix=new vo(new Float32Array(n.array),16);if(i!==undefined)s.instanceColor=new vo(new Float32Array(i.array),i.itemSize);break;case"BatchedMesh":c=a(t.geometry);u=o(t.material);s=new il(t.maxInstanceCount,t.maxVertexCount,t.maxIndexCount,u);s.geometry=c;s.perObjectFrustumCulled=t.perObjectFrustumCulled;s.sortObjects=t.sortObjects;s._drawRanges=t.drawRanges;s._reservedRanges=t.reservedRanges;s._geometryInfo=t.geometryInfo.map(t=>{let e=null;let n=null;if(t.boundingBox!==undefined){e=(new tr).fromJSON(t.boundingBox)}if(t.boundingSphere!==undefined){n=(new xr).fromJSON(t.boundingSphere)}return{...t,boundingBox:e,boundingSphere:n}});s._instanceInfo=t.instanceInfo;s._availableInstanceIds=t._availableInstanceIds;s._availableGeometryIds=t._availableGeometryIds;s._nextIndexStart=t.nextIndexStart;s._nextVertexStart=t.nextVertexStart;s._geometryCount=t.geometryCount;s._maxInstanceCount=t.maxInstanceCount;s._maxVertexCount=t.maxVertexCount;s._maxIndexCount=t.maxIndexCount;s._geometryInitialized=t.geometryInitialized;s._matricesTexture=l(t.matricesTexture.uuid);s._indirectTexture=l(t.indirectTexture.uuid);if(t.colorsTexture!==undefined){s._colorsTexture=l(t.colorsTexture.uuid)}if(t.boundingSphere!==undefined){s.boundingSphere=(new xr).fromJSON(t.boundingSphere)}if(t.boundingBox!==undefined){s.boundingBox=(new tr).fromJSON(t.boundingBox)}break;case"LOD":s=new no;break;case"Line":s=new dl(a(t.geometry),o(t.material));break;case"LineLoop":s=new _l(a(t.geometry),o(t.material));break;case"LineSegments":s=new gl(a(t.geometry),o(t.material));break;case"PointCloud":case"Points":s=new bl(a(t.geometry),o(t.material));break;case"Sprite":s=new $a(o(t.material));break;case"Group":s=new Ra;break;case"Bone":s=new po;break;default:s=new ts}s.uuid=t.uuid;if(t.name!==undefined)s.name=t.name;if(t.matrix!==undefined){s.matrix.fromArray(t.matrix);if(t.matrixAutoUpdate!==undefined)s.matrixAutoUpdate=t.matrixAutoUpdate;if(s.matrixAutoUpdate)s.matrix.decompose(s.position,s.quaternion,s.scale)}else{if(t.position!==undefined)s.position.fromArray(t.position);if(t.rotation!==undefined)s.rotation.fromArray(t.rotation);if(t.quaternion!==undefined)s.quaternion.fromArray(t.quaternion);if(t.scale!==undefined)s.scale.fromArray(t.scale)}if(t.up!==undefined)s.up.fromArray(t.up);if(t.castShadow!==undefined)s.castShadow=t.castShadow;if(t.receiveShadow!==undefined)s.receiveShadow=t.receiveShadow;if(t.shadow){if(t.shadow.intensity!==undefined)s.shadow.intensity=t.shadow.intensity;if(t.shadow.bias!==undefined)s.shadow.bias=t.shadow.bias;if(t.shadow.normalBias!==undefined)s.shadow.normalBias=t.shadow.normalBias;if(t.shadow.radius!==undefined)s.shadow.radius=t.shadow.radius;if(t.shadow.mapSize!==undefined)s.shadow.mapSize.fromArray(t.shadow.mapSize);if(t.shadow.camera!==undefined)s.shadow.camera=this.parseObject(t.shadow.camera)}if(t.visible!==undefined)s.visible=t.visible;if(t.frustumCulled!==undefined)s.frustumCulled=t.frustumCulled;if(t.renderOrder!==undefined)s.renderOrder=t.renderOrder;if(t.userData!==undefined)s.userData=t.userData;if(t.layers!==undefined)s.layers.mask=t.layers;if(t.children!==undefined){const a=t.children;for(let t=0;t<a.length;t++){s.add(this.parseObject(a[t],e,n,i,r))}}if(t.animations!==undefined){const e=t.animations;for(let t=0;t<e.length;t++){const n=e[t];s.animations.push(r[n])}}if(t.type==="LOD"){if(t.autoUpdate!==undefined)s.autoUpdate=t.autoUpdate;const e=t.levels;for(let t=0;t<e.length;t++){const n=e[t];const i=s.getObjectByProperty("uuid",n.object);if(i!==undefined){s.addLevel(i,n.distance,n.hysteresis)}}}return s}bindSkeletons(t,e){if(Object.keys(e).length===0)return;t.traverse(function(t){if(t.isSkinnedMesh===true&&t.skeleton!==undefined){const n=e[t.skeleton];if(n===undefined){console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton)}else{t.bind(n,t.bindMatrix)}}})}bindLightTargets(t){t.traverse(function(e){if(e.isDirectionalLight||e.isSpotLight){const n=e.target;const i=t.getObjectByProperty("uuid",n);if(i!==undefined){e.target=i}else{e.target=new ts}}})}}const Vh={UVMapping:ut,CubeReflectionMapping:ht,CubeRefractionMapping:dt,EquirectangularReflectionMapping:ft,EquirectangularRefractionMapping:pt,CubeUVReflectionMapping:mt};const Gh={RepeatWrapping:gt,ClampToEdgeWrapping:_t,MirroredRepeatWrapping:xt};const Hh={NearestFilter:vt,NearestMipmapNearestFilter:yt,NearestMipmapLinearFilter:St,LinearFilter:Tt,LinearMipmapNearestFilter:Et,LinearMipmapLinearFilter:At};const Wh=new WeakMap;class Xh extends sh{constructor(t){super(t);this.isImageBitmapLoader=true;if(typeof createImageBitmap==="undefined"){console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.")}if(typeof fetch==="undefined"){console.warn("THREE.ImageBitmapLoader: fetch() not supported.")}this.options={premultiplyAlpha:"none"}}setOptions(t){this.options=t;return this}load(t,e,n,i){if(t===undefined)t="";if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=this;const s=nh.get(`image-bitmap:${t}`);if(s!==undefined){r.manager.itemStart(t);if(s.then){s.then(n=>{if(Wh.has(s)===true){if(i)i(Wh.get(s));r.manager.itemError(t);r.manager.itemEnd(t)}else{if(e)e(n);r.manager.itemEnd(t);return n}});return}setTimeout(function(){if(e)e(s);r.manager.itemEnd(t)},0);return s}const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include";a.headers=this.requestHeader;const o=fetch(t,a).then(function(t){return t.blob()}).then(function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))}).then(function(n){nh.add(`image-bitmap:${t}`,n);if(e)e(n);r.manager.itemEnd(t);return n}).catch(function(e){if(i)i(e);Wh.set(o,e);nh.remove(`image-bitmap:${t}`);r.manager.itemError(t);r.manager.itemEnd(t)});nh.add(`image-bitmap:${t}`,o);r.manager.itemStart(t)}}let jh;class qh{static getContext(){if(jh===undefined){jh=new(window.AudioContext||window.webkitAudioContext)}return jh}static setContext(t){jh=t}}class Yh extends sh{constructor(t){super(t)}load(t,e,n,i){const r=this;const s=new lh(this.manager);s.setResponseType("arraybuffer");s.setPath(this.path);s.setRequestHeader(this.requestHeader);s.setWithCredentials(this.withCredentials);s.load(t,function(t){try{const n=t.slice(0);const i=qh.getContext();i.decodeAudioData(n,function(t){e(t)}).catch(a)}catch(t){a(t)}},n,i);function a(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}}}const Zh=new Ar;const Jh=new Ar;const Kh=new Ar;class $h{constructor(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new ba;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new ba;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;const n=e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep;if(n){e.focus=t.focus;e.fov=t.fov;e.aspect=t.aspect*this.aspect;e.near=t.near;e.far=t.far;e.zoom=t.zoom;e.eyeSep=this.eyeSep;Kh.copy(t.projectionMatrix);const n=e.eyeSep/2;const i=n*e.near/e.focus;const r=e.near*Math.tan(Xn*e.fov*.5)/e.zoom;let s,a;Jh.elements[12]=-n;Zh.elements[12]=n;s=-r*e.aspect+i;a=r*e.aspect+i;Kh.elements[0]=2*e.near/(a-s);Kh.elements[8]=(a+s)/(a-s);this.cameraL.projectionMatrix.copy(Kh);s=-r*e.aspect-i;a=r*e.aspect-i;Kh.elements[0]=2*e.near/(a-s);Kh.elements[8]=(a+s)/(a-s);this.cameraR.projectionMatrix.copy(Kh)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Jh);this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Zh)}}class Qh extends ba{constructor(t=[]){super();this.isArrayCamera=true;this.isMultiViewCamera=false;this.cameras=t}}class td{constructor(t=true){this.autoStart=t;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false}start(){this.startTime=performance.now();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true}stop(){this.getElapsedTime();this.running=false;this.autoStart=false}getElapsedTime(){this.getDelta();return this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running){this.start();return 0}if(this.running){const e=performance.now();t=(e-this.oldTime)/1e3;this.oldTime=e;this.elapsedTime+=t}return t}}const ed=new xi;const nd=new _i;const id=new xi;const rd=new xi;const sd=new xi;class ad extends ts{constructor(){super();this.type="AudioListener";this.context=qh.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;this._clock=new td}getInput(){return this.gain}removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null}return this}getFilter(){return this.filter}setFilter(t){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination)}else{this.gain.disconnect(this.context.destination)}this.filter=t;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01);return this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(ed,nd,id);rd.set(0,0,-1).applyQuaternion(nd);sd.set(0,1,0).applyQuaternion(nd);if(e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(ed.x,t);e.positionY.linearRampToValueAtTime(ed.y,t);e.positionZ.linearRampToValueAtTime(ed.z,t);e.forwardX.linearRampToValueAtTime(rd.x,t);e.forwardY.linearRampToValueAtTime(rd.y,t);e.forwardZ.linearRampToValueAtTime(rd.z,t);e.upX.linearRampToValueAtTime(sd.x,t);e.upY.linearRampToValueAtTime(sd.y,t);e.upZ.linearRampToValueAtTime(sd.z,t)}else{e.setPosition(ed.x,ed.y,ed.z);e.setOrientation(rd.x,rd.y,rd.z,sd.x,sd.y,sd.z)}}}class od extends ts{constructor(t){super();this.type="Audio";this.listener=t;this.context=t.context;this.gain=this.context.createGain();this.gain.connect(t.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.loopStart=0;this.loopEnd=0;this.offset=0;this.duration=undefined;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.source=null;this.sourceType="empty";this._startedAt=0;this._progress=0;this._connected=false;this.filters=[]}getOutput(){return this.gain}setNodeSource(t){this.hasPlaybackControl=false;this.sourceType="audioNode";this.source=t;this.connect();return this}setMediaElementSource(t){this.hasPlaybackControl=false;this.sourceType="mediaNode";this.source=this.context.createMediaElementSource(t);this.connect();return this}setMediaStreamSource(t){this.hasPlaybackControl=false;this.sourceType="mediaStreamNode";this.source=this.context.createMediaStreamSource(t);this.connect();return this}setBuffer(t){this.buffer=t;this.sourceType="buffer";if(this.autoplay)this.play();return this}play(t=0){if(this.isPlaying===true){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();e.buffer=this.buffer;e.loop=this.loop;e.loopStart=this.loopStart;e.loopEnd=this.loopEnd;e.onended=this.onEnded.bind(this);e.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=e;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect()}pause(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}if(this.isPlaying===true){this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){this._progress=this._progress%(this.duration||this.buffer.duration)}this.source.stop();this.source.onended=null;this.isPlaying=false}return this}stop(t=0){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._progress=0;if(this.source!==null){this.source.stop(this.context.currentTime+t);this.source.onended=null}this.isPlaying=false;return this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++){this.filters[t-1].connect(this.filters[t])}this.filters[this.filters.length-1].connect(this.getOutput())}else{this.source.connect(this.getOutput())}this._connected=true;return this}disconnect(){if(this._connected===false){return}if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++){this.filters[t-1].disconnect(this.filters[t])}this.filters[this.filters.length-1].disconnect(this.getOutput())}else{this.source.disconnect(this.getOutput())}this._connected=false;return this}getFilters(){return this.filters}setFilters(t){if(!t)t=[];if(this._connected===true){this.disconnect();this.filters=t.slice();this.connect()}else{this.filters=t.slice()}return this}setDetune(t){this.detune=t;if(this.isPlaying===true&&this.source.detune!==undefined){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01)}return this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.playbackRate=t;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01)}return this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=false;this._progress=0}getLoop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return false}return this.loop}setLoop(t){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.loop=t;if(this.isPlaying===true){this.source.loop=this.loop}return this}setLoopStart(t){this.loopStart=t;return this}setLoopEnd(t){this.loopEnd=t;return this}getVolume(){return this.gain.gain.value}setVolume(t){this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01);return this}copy(t,e){super.copy(t,e);if(t.sourceType!=="buffer"){console.warn("THREE.Audio: Audio source type cannot be copied.");return this}this.autoplay=t.autoplay;this.buffer=t.buffer;this.detune=t.detune;this.loop=t.loop;this.loopStart=t.loopStart;this.loopEnd=t.loopEnd;this.offset=t.offset;this.duration=t.duration;this.playbackRate=t.playbackRate;this.hasPlaybackControl=t.hasPlaybackControl;this.sourceType=t.sourceType;this.filters=t.filters.slice();return this}clone(t){return new this.constructor(this.listener).copy(this,t)}}const ld=new xi;const cd=new _i;const ud=new xi;const hd=new xi;class dd extends od{constructor(t){super(t);this.panner=this.context.createPanner();this.panner.panningModel="HRTF";this.panner.connect(this.gain)}connect(){super.connect();this.panner.connect(this.gain);return this}disconnect(){super.disconnect();this.panner.disconnect(this.gain);return this}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){this.panner.refDistance=t;return this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){this.panner.rolloffFactor=t;return this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){this.panner.distanceModel=t;return this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){this.panner.maxDistance=t;return this}setDirectionalCone(t,e,n){this.panner.coneInnerAngle=t;this.panner.coneOuterAngle=e;this.panner.coneOuterGain=n;return this}updateMatrixWorld(t){super.updateMatrixWorld(t);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(ld,cd,ud);hd.set(0,0,1).applyQuaternion(cd);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(ld.x,t);e.positionY.linearRampToValueAtTime(ld.y,t);e.positionZ.linearRampToValueAtTime(ld.z,t);e.orientationX.linearRampToValueAtTime(hd.x,t);e.orientationY.linearRampToValueAtTime(hd.y,t);e.orientationZ.linearRampToValueAtTime(hd.z,t)}else{e.setPosition(ld.x,ld.y,ld.z);e.setOrientation(hd.x,hd.y,hd.z)}}}class fd{constructor(t,e=2048){this.analyser=t.context.createAnalyser();this.analyser.fftSize=e;this.data=new Uint8Array(this.analyser.frequencyBinCount);t.getOutput().connect(this.analyser)}getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++){t+=e[n]}return t/e.length}}class pd{constructor(t,e,n){this.binding=t;this.valueSize=n;let i,r,s;switch(e){case"quaternion":i=this._slerp;r=this._slerpAdditive;s=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(n*6);this._workIndex=5;break;case"string":case"bool":i=this._select;r=this._select;s=this._setAdditiveIdentityOther;this.buffer=new Array(n*5);break;default:i=this._lerp;r=this._lerpAdditive;s=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i;this._mixBufferRegionAdditive=r;this._setIdentity=s;this._origIndex=3;this._addIndex=4;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;this.useCount=0;this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let s=this.cumulativeWeight;if(s===0){for(let t=0;t!==i;++t){n[r+t]=n[t]}s=e}else{s+=e;const t=e/s;this._mixBufferRegion(n,r,0,t,i)}this.cumulativeWeight=s}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;if(this.cumulativeWeightAdditive===0){this._setIdentity()}this._mixBufferRegionAdditive(e,i,0,t,n);this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(r<1){const t=e*this._origIndex;this._mixBufferRegion(n,i,t,1-r,e)}if(s>0){this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e)}for(let t=e,r=e+e;t!==r;++t){if(n[t]!==n[t+e]){a.setValue(n,i);break}}}saveOriginalState(){const t=this.binding;const e=this.buffer,n=this.valueSize,i=n*this._origIndex;t.getValue(e,i);for(let t=n,r=i;t!==r;++t){e[t]=e[i+t%n]}this._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=this.valueSize*3;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize;const e=t+this.valueSize;for(let n=t;n<e;n++){this.buffer[n]=0}}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize;const e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++){this.buffer[e+n]=this.buffer[t+n]}}_select(t,e,n,i,r){if(i>=.5){for(let i=0;i!==r;++i){t[e+i]=t[n+i]}}}_slerp(t,e,n,i){_i.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const s=this._workIndex*r;_i.multiplyQuaternionsFlat(t,s,t,e,t,n);_i.slerpFlat(t,e,t,e,t,s,i)}_lerp(t,e,n,i,r){const s=1-i;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*s+t[n+a]*i}}_lerpAdditive(t,e,n,i,r){for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]+t[n+s]*i}}}const md="\\[\\]\\.:\\/";const gd=new RegExp("["+md+"]","g");const _d="[^"+md+"]";const xd="[^"+md.replace("\\.","")+"]";const vd=/((?:WC+[\/:])*)/.source.replace("WC",_d);const yd=/(WCOD+)?/.source.replace("WCOD",xd);const Md=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",_d);const Sd=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",_d);const bd=new RegExp(""+"^"+vd+yd+Md+Sd+"$");const Td=["material","materials","bones","map"];class Ed{constructor(t,e,n){const i=n||wd.parseTrackName(e);this._targetGroup=t;this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];if(i!==undefined)i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i){n[i].setValue(t,e)}}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e){t[e].bind()}}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e){t[e].unbind()}}}class wd{constructor(t,e,n){this.path=e;this.parsedPath=n||wd.parseTrackName(e);this.node=wd.findNode(t,this.parsedPath.nodeName);this.rootNode=t;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}static create(t,e,n){if(!(t&&t.isAnimationObjectGroup)){return new wd(t,e,n)}else{return new wd.Composite(t,e,n)}}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(gd,"")}static parseTrackName(t){const e=bd.exec(t);if(e===null){throw new Error("PropertyBinding: Cannot parse trackName: "+t)}const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]};const i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==undefined&&i!==-1){const t=n.nodeName.substring(i+1);if(Td.indexOf(t)!==-1){n.nodeName=n.nodeName.substring(0,i);n.objectName=t}}if(n.propertyName===null||n.propertyName.length===0){throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t)}return n}static findNode(t,e){if(e===undefined||e===""||e==="."||e===-1||e===t.name||e===t.uuid){return t}if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(n!==undefined){return n}}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e){return r}const s=n(r.children);if(s)return s}return null};const i=n(t.children);if(i){return i}}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){t[e++]=n[i]}}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e];this.targetObject.needsUpdate=true}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e];this.targetObject.matrixWorldNeedsUpdate=true}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){n[i]=t[e++]}}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){n[i]=t[e++]}this.targetObject.needsUpdate=true}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){n[i]=t[e++]}this.targetObject.matrixWorldNeedsUpdate=true}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e];this.targetObject.needsUpdate=true}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e];this.targetObject.matrixWorldNeedsUpdate=true}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e);this.targetObject.needsUpdate=true}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e);this.targetObject.matrixWorldNeedsUpdate=true}_getValue_unbound(t,e){this.bind();this.getValue(t,e)}_setValue_unbound(t,e){this.bind();this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath;const n=e.objectName;const i=e.propertyName;let r=e.propertyIndex;if(!t){t=wd.findNode(this.rootNode,e.nodeName);this.node=t}this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(!t){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!t.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}t=t.material.materials;break;case"bones":if(!t.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}t=t.skeleton.bones;for(let e=0;e<t.length;e++){if(t[e].name===i){i=e;break}}break;case"map":if("map"in t){t=t.map;break}if(!t.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!t.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}t=t.material.map;break;default:if(t[n]===undefined){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}t=t[n]}if(i!==undefined){if(t[i]===undefined){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);return}t=t[i]}}const s=t[i];if(s===undefined){const n=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t);return}let a=this.Versioning.None;this.targetObject=t;if(t.isMaterial===true){a=this.Versioning.NeedsUpdate}else if(t.isObject3D===true){a=this.Versioning.MatrixWorldNeedsUpdate}let o=this.BindingType.Direct;if(r!==undefined){if(i==="morphTargetInfluences"){if(!t.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!t.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}if(t.morphTargetDictionary[r]!==undefined){r=t.morphTargetDictionary[r]}}o=this.BindingType.ArrayElement;this.resolvedProperty=s;this.propertyIndex=r}else if(s.fromArray!==undefined&&s.toArray!==undefined){o=this.BindingType.HasFromToArray;this.resolvedProperty=s}else if(Array.isArray(s)){o=this.BindingType.EntireArray;this.resolvedProperty=s}else{this.propertyName=i}this.getValue=this.GetterByBindingType[o];this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}}wd.Composite=Ed;wd.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};wd.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};wd.prototype.GetterByBindingType=[wd.prototype._getValue_direct,wd.prototype._getValue_array,wd.prototype._getValue_arrayElement,wd.prototype._getValue_toArray];wd.prototype.SetterByBindingTypeAndVersioning=[[wd.prototype._setValue_direct,wd.prototype._setValue_direct_setNeedsUpdate,wd.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[wd.prototype._setValue_array,wd.prototype._setValue_array_setNeedsUpdate,wd.prototype._setValue_array_setMatrixWorldNeedsUpdate],[wd.prototype._setValue_arrayElement,wd.prototype._setValue_arrayElement_setNeedsUpdate,wd.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[wd.prototype._setValue_fromArray,wd.prototype._setValue_fromArray_setNeedsUpdate,wd.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Ad{constructor(){this.isAnimationObjectGroup=true;this.uuid=qn();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,n=arguments.length;e!==n;++e){t[arguments[e].uuid]=e}this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,n=this._paths,i=this._parsedPaths,r=this._bindings,s=r.length;let a=undefined,o=t.length,l=this.nCachedObjects_;for(let c=0,u=arguments.length;c!==u;++c){const u=arguments[c],h=u.uuid;let d=e[h];if(d===undefined){d=o++;e[h]=d;t.push(u);for(let t=0,e=s;t!==e;++t){r[t].push(new wd(u,n[t],i[t]))}}else if(d<l){a=t[d];const o=--l,c=t[o];e[c.uuid]=d;t[d]=c;e[h]=o;t[o]=u;for(let t=0,e=s;t!==e;++t){const e=r[t],s=e[o];let a=e[d];e[d]=s;if(a===undefined){a=new wd(u,n[t],i[t])}e[o]=a}}else if(t[d]!==a){console.error("THREE.AnimationObjectGroup: Different objects with the same UUID "+"detected. Clean the caches or recreate your infrastructure when reloading scenes.")}}this.nCachedObjects_=l}remove(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_;for(let s=0,a=arguments.length;s!==a;++s){const a=arguments[s],o=a.uuid,l=e[o];if(l!==undefined&&l>=r){const s=r++,c=t[s];e[c.uuid]=l;t[l]=c;e[o]=s;t[s]=a;for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[s],r=e[l];e[l]=i;e[s]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_,s=t.length;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a],l=o.uuid,c=e[l];if(c!==undefined){delete e[l];if(c<r){const a=--r,o=t[a],l=--s,u=t[l];e[o.uuid]=c;t[c]=o;e[u.uuid]=a;t[a]=u;t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[a],r=e[l];e[c]=i;e[a]=r;e.pop()}}else{const r=--s,a=t[r];if(r>0){e[a.uuid]=c}t[c]=a;t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t];e[c]=e[r];e.pop()}}}}this.nCachedObjects_=r}subscribe_(t,e){const n=this._bindingsIndicesByPath;let i=n[t];const r=this._bindings;if(i!==undefined)return r[i];const s=this._paths,a=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,u=new Array(l);i=r.length;n[t]=i;s.push(t);a.push(e);r.push(u);for(let n=c,i=o.length;n!==i;++n){const i=o[n];u[n]=new wd(i,t,e)}return u}unsubscribe_(t){const e=this._bindingsIndicesByPath,n=e[t];if(n!==undefined){const i=this._paths,r=this._parsedPaths,s=this._bindings,a=s.length-1,o=s[a],l=t[a];e[l]=n;s[n]=o;s.pop();r[n]=r[a];r.pop();i[n]=i[a];i.pop()}}}class Cd{constructor(t,e,n=null,i=e.blendMode){this._mixer=t;this._clip=e;this._localRoot=n;this.blendMode=i;const r=e.tracks,s=r.length,a=new Array(s);const o={endingStart:Oe,endingEnd:Oe};for(let t=0;t!==s;++t){const e=r[t].createInterpolant(null);a[t]=e;e.settings=o}this._interpolantSettings=o;this._interpolants=a;this._propertyBindings=new Array(s);this._cacheIndex=null;this._byClipCacheIndex=null;this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=Pe;this._loopCount=-1;this._startTime=null;this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;this.paused=false;this.enabled=true;this.clampWhenFinished=false;this.zeroSlopeAtStart=true;this.zeroSlopeAtEnd=true}play(){this._mixer._activateAction(this);return this}stop(){this._mixer._deactivateAction(this);return this.reset()}reset(){this.paused=false;this.enabled=true;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){this._startTime=t;return this}setLoop(t,e){this.loop=t;this.repetitions=e;return this}setEffectiveWeight(t){this.weight=t;this._effectiveWeight=this.enabled?t:0;return this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n=false){t.fadeOut(e);this.fadeIn(e);if(n===true){const n=this._clip.duration,i=t._clip.duration,r=i/n,s=n/i;t.warp(1,r,e);this.warp(s,1,e)}return this}crossFadeTo(t,e,n=false){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;if(t!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(t)}return this}setEffectiveTimeScale(t){this.timeScale=t;this._effectiveTimeScale=this.paused?0:t;return this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){this.timeScale=this._clip.duration/t;return this.stopWarping()}syncWith(t){this.time=t.time;this.timeScale=t.timeScale;return this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,s=this.timeScale;let a=this._timeScaleInterpolant;if(a===null){a=i._lendControlInterpolant();this._timeScaleInterpolant=a}const o=a.parameterPositions,l=a.sampleValues;o[0]=r;o[1]=r+n;l[0]=t/s;l[1]=e/s;return this}stopWarping(){const t=this._timeScaleInterpolant;if(t!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(t)}return this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled){this._updateWeight(t);return}const r=this._startTime;if(r!==null){const i=(t-r)*n;if(i<0||n===0){e=0}else{this._startTime=null;e=n*i}}e*=this._updateTimeScale(t);const s=this._updateTime(e);const a=this._updateWeight(t);if(a>0){const t=this._interpolants;const e=this._propertyBindings;switch(this.blendMode){case ke:for(let n=0,i=t.length;n!==i;++n){t[n].evaluate(s);e[n].accumulateAdditive(a)}break;case ze:default:for(let n=0,r=t.length;n!==r;++n){t[n].evaluate(s);e[n].accumulate(i,a)}}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(t)[0];e*=i;if(t>n.parameterPositions[1]){this.stopFading();if(i===0){this.enabled=false}}}}this._effectiveWeight=e;return e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(t)[0];e*=i;if(t>n.parameterPositions[1]){this.stopWarping();if(e===0){this.paused=true}else{this.timeScale=e}}}}this._effectiveTimeScale=e;return e}_updateTime(t){const e=this._clip.duration;const n=this.loop;let i=this.time+t;let r=this._loopCount;const s=n===Le;if(t===0){if(r===-1)return i;return s&&(r&1)===1?e-i:i}if(n===Ie){if(r===-1){this._loopCount=0;this._setEndings(true,true,false)}t:{if(i>=e){i=e}else if(i<0){i=0}else{this.time=i;break t}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=i;this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(r===-1){if(t>=0){r=0;this._setEndings(true,this.repetitions===0,s)}else{this._setEndings(this.repetitions===0,true,s)}}if(i>=e||i<0){const n=Math.floor(i/e);i-=e*n;r+=Math.abs(n);const a=this.repetitions-r;if(a<=0){if(this.clampWhenFinished)this.paused=true;else this.enabled=false;i=t>0?e:0;this.time=i;this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1})}else{if(a===1){const e=t<0;this._setEndings(e,!e,s)}else{this._setEndings(false,false,s)}this._loopCount=r;this.time=i;this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else{this.time=i}if(s&&(r&1)===1){return e-i}}return i}_setEndings(t,e,n){const i=this._interpolantSettings;if(n){i.endingStart=Fe;i.endingEnd=Fe}else{if(t){i.endingStart=this.zeroSlopeAtStart?Fe:Oe}else{i.endingStart=Be}if(e){i.endingEnd=this.zeroSlopeAtEnd?Fe:Oe}else{i.endingEnd=Be}}}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let s=this._weightInterpolant;if(s===null){s=i._lendControlInterpolant();this._weightInterpolant=s}const a=s.parameterPositions,o=s.sampleValues;a[0]=r;o[0]=e;a[1]=r+t;o[1]=n;return this}}const Rd=new Float32Array(1);class Id extends Gn{constructor(t){super();this._root=t;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,s=t._propertyBindings,a=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];if(c===undefined){c={};l[o]=c}for(let t=0;t!==r;++t){const r=i[t],l=r.name;let u=c[l];if(u!==undefined){++u.referenceCount;s[t]=u}else{u=s[t];if(u!==undefined){if(u._cacheIndex===null){++u.referenceCount;this._addInactiveBinding(u,o,l)}continue}const i=e&&e._propertyBindings[t].binding.parsedPath;u=new pd(wd.create(n,l,i),r.ValueTypeName,r.getValueSize());++u.referenceCount;this._addInactiveBinding(u,o,l);s[t]=u}a[t].resultBuffer=u.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(t._cacheIndex===null){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]);this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];if(n.useCount++===0){this._lendBinding(n);n.saveOriginalState()}}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];if(--n.useCount===0){n.restoreOriginalState();this._takeBackBinding(n)}}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return e!==null&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let s=r[e];if(s===undefined){s={knownActions:[t],actionByRoot:{}};t._byClipCacheIndex=0;r[e]=s}else{const e=s.knownActions;t._byClipCacheIndex=e.length;e.push(t)}t._cacheIndex=i.length;i.push(t);s.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i;e[i]=n;e.pop();t._cacheIndex=null;const r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c;o[c]=l;o.pop();t._byClipCacheIndex=null;const u=a.actionByRoot,h=(t._localRoot||this._root).uuid;delete u[h];if(o.length===0){delete s[r]}this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];if(--n.referenceCount===0){this._removeInactiveBinding(n)}}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let s=i[e];if(s===undefined){s={};i[e]=s}s[n]=t;t._cacheIndex=r.length;r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,s=this._bindingsByRootAndName,a=s[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l;e[l]=o;e.pop();delete a[r];if(Object.keys(a).length===0){delete s[i]}}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];if(n===undefined){n=new Hu(new Float32Array(2),new Float32Array(2),1,Rd);n.__cacheIndex=e;t[e]=n}return n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i;e[i]=t;r.__cacheIndex=n;e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let s=typeof t==="string"?Qu.findByName(i,t):t;const a=s!==null?s.uuid:t;const o=this._actionsByClip[a];let l=null;if(n===undefined){if(s!==null){n=s.blendMode}else{n=ze}}if(o!==undefined){const t=o.actionByRoot[r];if(t!==undefined&&t.blendMode===n){return t}l=o.knownActions[0];if(s===null)s=l._clip}if(s===null)return null;const c=new Cd(this,s,e,n);this._bindAction(c,l);this._addInactiveAction(c,a,r);return c}existingAction(t,e){const n=e||this._root,i=n.uuid,r=typeof t==="string"?Qu.findByName(n,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];if(a!==undefined){return a.actionByRoot[i]||null}return null}stopAllAction(){const t=this._actions,e=this._nActiveActions;for(let n=e-1;n>=0;--n){t[n].stop()}return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1;for(let a=0;a!==n;++a){const n=e[a];n._update(i,t,r,s)}const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t){a[t].apply(s)}return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++){this._actions[t].time=0}return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(r!==undefined){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,s=e[e.length-1];i._cacheIndex=null;i._byClipCacheIndex=null;s._cacheIndex=r;e[r]=s;e.pop();this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot,r=i[e];if(r!==undefined){this._deactivateAction(r);this._removeInactiveAction(r)}}const i=this._bindingsByRootAndName,r=i[e];if(r!==undefined){for(const t in r){const e=r[t];e.restoreOriginalState();this._removeInactiveBinding(e)}}}uncacheAction(t,e){const n=this.existingAction(t,e);if(n!==null){this._deactivateAction(n);this._removeInactiveAction(n)}}}class Pd extends Yi{constructor(t=1,e=1,n=1,i={}){super(t,e,i);this.isRenderTarget3D=true;this.depth=n;this.texture=new $i(null,t,e,n);this._setTextureOptions(i);this.texture.isRenderTargetTexture=true}}class Ld{constructor(t){this.value=t}clone(){return new Ld(this.value.clone===undefined?this.value:this.value.clone())}}let Dd=0;class Ud extends Gn{constructor(){super();this.isUniformsGroup=true;Object.defineProperty(this,"id",{value:Dd++});this.name="";this.usage=wn;this.uniforms=[]}add(t){this.uniforms.push(t);return this}remove(t){const e=this.uniforms.indexOf(t);if(e!==-1)this.uniforms.splice(e,1);return this}setName(t){this.name=t;return this}setUsage(t){this.usage=t;return this}dispose(){this.dispatchEvent({type:"dispose"})}copy(t){this.name=t.name;this.usage=t.usage;const e=t.uniforms;this.uniforms.length=0;for(let t=0,n=e.length;t<n;t++){const n=Array.isArray(e[t])?e[t]:[e[t]];for(let t=0;t<n.length;t++){this.uniforms.push(n[t].clone())}}return this}clone(){return(new this.constructor).copy(this)}}class Nd extends Na{constructor(t,e,n=1){super(t,e);this.isInstancedInterleavedBuffer=true;this.meshPerAttribute=n}copy(t){super.copy(t);this.meshPerAttribute=t.meshPerAttribute;return this}clone(t){const e=super.clone(t);e.meshPerAttribute=this.meshPerAttribute;return e}toJSON(t){const e=super.toJSON(t);e.isInstancedInterleavedBuffer=true;e.meshPerAttribute=this.meshPerAttribute;return e}}class Od{constructor(t,e,n,i,r,s=false){this.isGLBufferAttribute=true;this.name="";this.buffer=t;this.type=e;this.itemSize=n;this.elementSize=i;this.count=r;this.normalized=s;this.version=0}set needsUpdate(t){if(t===true)this.version++}setBuffer(t){this.buffer=t;return this}setType(t,e){this.type=t;this.elementSize=e;return this}setItemSize(t){this.itemSize=t;return this}setCount(t){this.count=t;return this}}const Fd=new Ar;class Bd{constructor(t,e,n=0,i=Infinity){this.ray=new wr(t,e);this.near=n;this.far=i;this.camera=null;this.layers=new Br;this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){if(e.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(e.matrixWorld);this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize();this.camera=e}else if(e.isOrthographicCamera){this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e);this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld);this.camera=e}else{console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}}setFromXRController(t){Fd.identity().extractRotation(t.matrixWorld);this.ray.origin.setFromMatrixPosition(t.matrixWorld);this.ray.direction.set(0,0,-1).applyMatrix4(Fd);return this}intersectObject(t,e=true,n=[]){kd(t,this,n,e);n.sort(zd);return n}intersectObjects(t,e=true,n=[]){for(let i=0,r=t.length;i<r;i++){kd(t[i],this,n,e)}n.sort(zd);return n}}function zd(t,e){return t.distance-e.distance}function kd(t,e,n,i){let r=true;if(t.layers.test(e.layers)){const i=t.raycast(e,n);if(i===false)r=false}if(r===true&&i===true){const i=t.children;for(let t=0,r=i.length;t<r;t++){kd(i[t],e,n,true)}}}class Vd{constructor(t=1,e=0,n=0){this.radius=t;this.phi=e;this.theta=n}set(t,e,n){this.radius=t;this.phi=e;this.theta=n;return this}copy(t){this.radius=t.radius;this.phi=t.phi;this.theta=t.theta;return this}makeSafe(){const t=1e-6;this.phi=Yn(this.phi,t,Math.PI-t);return this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){this.radius=Math.sqrt(t*t+e*e+n*n);if(this.radius===0){this.theta=0;this.phi=0}else{this.theta=Math.atan2(t,n);this.phi=Math.acos(Yn(e/this.radius,-1,1))}return this}clone(){return(new this.constructor).copy(this)}}class Gd{constructor(t=1,e=0,n=0){this.radius=t;this.theta=e;this.y=n}set(t,e,n){this.radius=t;this.theta=e;this.y=n;return this}copy(t){this.radius=t.radius;this.theta=t.theta;this.y=t.y;return this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){this.radius=Math.sqrt(t*t+n*n);this.theta=Math.atan2(t,n);this.y=e;return this}clone(){return(new this.constructor).copy(this)}}class Hd{constructor(t,e,n,i){Hd.prototype.isMatrix2=true;this.elements=[1,0,0,1];if(t!==undefined){this.set(t,e,n,i)}}identity(){this.set(1,0,0,1);return this}fromArray(t,e=0){for(let n=0;n<4;n++){this.elements[n]=t[n+e]}return this}set(t,e,n,i){const r=this.elements;r[0]=t;r[2]=e;r[1]=n;r[3]=i;return this}}const Wd=new gi;class Xd{constructor(t=new gi(+Infinity,+Infinity),e=new gi(-Infinity,-Infinity)){this.isBox2=true;this.min=t;this.max=e}set(t,e){this.min.copy(t);this.max.copy(e);return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++){this.expandByPoint(t[e])}return this}setFromCenterAndSize(t,e){const n=Wd.copy(e).multiplyScalar(.5);this.min.copy(t).sub(n);this.max.copy(t).add(n);return this}clone(){return(new this.constructor).copy(this)}copy(t){this.min.copy(t.min);this.max.copy(t.max);return this}makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){this.min.min(t);this.max.max(t);return this}expandByVector(t){this.min.sub(t);this.max.add(t);return this}expandByScalar(t){this.min.addScalar(-t);this.max.addScalar(t);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Wd).distanceTo(t)}intersect(t){this.min.max(t.min);this.max.min(t.max);if(this.isEmpty())this.makeEmpty();return this}union(t){this.min.min(t.min);this.max.max(t.max);return this}translate(t){this.min.add(t);this.max.add(t);return this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const jd=new xi;const qd=new xi;class Yd{constructor(t=new xi,e=new xi){this.start=t;this.end=e}set(t,e){this.start.copy(t);this.end.copy(e);return this}copy(t){this.start.copy(t.start);this.end.copy(t.end);return this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){jd.subVectors(t,this.start);qd.subVectors(this.end,this.start);const n=qd.dot(qd);const i=qd.dot(jd);let r=i/n;if(e){r=Yn(r,0,1)}return r}closestPointToPoint(t,e,n){const i=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(t){this.start.applyMatrix4(t);this.end.applyMatrix4(t);return this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const Zd=new xi;class Jd extends ts{constructor(t,e){super();this.light=t;this.matrixAutoUpdate=false;this.color=e;this.type="SpotLightHelper";const n=new Zs;const i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,n=32;t<n;t++,e++){const r=t/n*Math.PI*2;const s=e/n*Math.PI*2;i.push(Math.cos(r),Math.sin(r),1,Math.cos(s),Math.sin(s),1)}n.setAttribute("position",new Vs(i,3));const r=new rl({fog:false,toneMapped:false});this.cone=new gl(n,r);this.add(this.cone);this.update()}dispose(){this.cone.geometry.dispose();this.cone.material.dispose()}update(){this.light.updateWorldMatrix(true,false);this.light.target.updateWorldMatrix(true,false);if(this.parent){this.parent.updateWorldMatrix(true);this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)}else{this.matrix.copy(this.light.matrixWorld)}this.matrixWorld.copy(this.light.matrixWorld);const t=this.light.distance?this.light.distance:1e3;const e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t);Zd.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(Zd);if(this.color!==undefined){this.cone.material.color.set(this.color)}else{this.cone.material.color.copy(this.light.color)}}}const Kd=new xi;const $d=new Ar;const Qd=new Ar;class tf extends gl{constructor(t){const e=ef(t);const n=new Zs;const i=[];const r=[];const s=new vs(0,0,1);const a=new vs(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];if(n.parent&&n.parent.isBone){i.push(0,0,0);i.push(0,0,0);r.push(s.r,s.g,s.b);r.push(a.r,a.g,a.b)}}n.setAttribute("position",new Vs(i,3));n.setAttribute("color",new Vs(r,3));const o=new rl({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});super(n,o);this.isSkeletonHelper=true;this.type="SkeletonHelper";this.root=t;this.bones=e;this.matrix=t.matrixWorld;this.matrixAutoUpdate=false}updateMatrixWorld(t){const e=this.bones;const n=this.geometry;const i=n.getAttribute("position");Qd.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];if(r.parent&&r.parent.isBone){$d.multiplyMatrices(Qd,r.matrixWorld);Kd.setFromMatrixPosition($d);i.setXYZ(n,Kd.x,Kd.y,Kd.z);$d.multiplyMatrices(Qd,r.parent.matrixWorld);Kd.setFromMatrixPosition($d);i.setXYZ(n+1,Kd.x,Kd.y,Kd.z);n+=2}}n.getAttribute("position").needsUpdate=true;super.updateMatrixWorld(t)}dispose(){this.geometry.dispose();this.material.dispose()}}function ef(t){const e=[];if(t.isBone===true){e.push(t)}for(let n=0;n<t.children.length;n++){e.push(...ef(t.children[n]))}return e}class nf extends oa{constructor(t,e,n){const i=new fu(e,4,2);const r=new bs({wireframe:true,fog:false,toneMapped:false});super(i,r);this.light=t;this.color=n;this.type="PointLightHelper";this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update()}dispose(){this.geometry.dispose();this.material.dispose()}update(){this.light.updateWorldMatrix(true,false);if(this.color!==undefined){this.material.color.set(this.color)}else{this.material.color.copy(this.light.color)}}}const rf=new xi;const sf=new vs;const af=new vs;class of extends ts{constructor(t,e,n){super();this.light=t;this.matrix=t.matrixWorld;this.matrixAutoUpdate=false;this.color=n;this.type="HemisphereLightHelper";const i=new lu(e);i.rotateY(Math.PI*.5);this.material=new bs({wireframe:true,fog:false,toneMapped:false});if(this.color===undefined)this.material.vertexColors=true;const r=i.getAttribute("position");const s=new Float32Array(r.count*3);i.setAttribute("color",new Ls(s,3));this.add(new oa(i,this.material));this.update()}dispose(){this.children[0].geometry.dispose();this.children[0].material.dispose()}update(){const t=this.children[0];if(this.color!==undefined){this.material.color.set(this.color)}else{const e=t.geometry.getAttribute("color");sf.copy(this.light.color);af.copy(this.light.groundColor);for(let t=0,n=e.count;t<n;t++){const i=t<n/2?sf:af;e.setXYZ(t,i.r,i.g,i.b)}e.needsUpdate=true}this.light.updateWorldMatrix(true,false);t.lookAt(rf.setFromMatrixPosition(this.light.matrixWorld).negate())}}class lf extends gl{constructor(t=10,e=10,n=4473924,i=8947848){n=new vs(n);i=new vs(i);const r=e/2;const s=t/e;const a=t/2;const o=[],l=[];for(let t=0,c=0,u=-a;t<=e;t++,u+=s){o.push(-a,0,u,a,0,u);o.push(u,0,-a,u,0,a);const e=t===r?n:i;e.toArray(l,c);c+=3;e.toArray(l,c);c+=3;e.toArray(l,c);c+=3;e.toArray(l,c);c+=3}const c=new Zs;c.setAttribute("position",new Vs(o,3));c.setAttribute("color",new Vs(l,3));const u=new rl({vertexColors:true,toneMapped:false});super(c,u);this.type="GridHelper"}dispose(){this.geometry.dispose();this.material.dispose()}}class cf extends gl{constructor(t=10,e=16,n=8,i=64,r=4473924,s=8947848){r=new vs(r);s=new vs(s);const a=[];const o=[];if(e>1){for(let n=0;n<e;n++){const i=n/e*(Math.PI*2);const l=Math.sin(i)*t;const c=Math.cos(i)*t;a.push(0,0,0);a.push(l,0,c);const u=n&1?r:s;o.push(u.r,u.g,u.b);o.push(u.r,u.g,u.b)}}for(let e=0;e<n;e++){const l=e&1?r:s;const c=t-t/n*e;for(let t=0;t<i;t++){let e=t/i*(Math.PI*2);let n=Math.sin(e)*c;let r=Math.cos(e)*c;a.push(n,0,r);o.push(l.r,l.g,l.b);e=(t+1)/i*(Math.PI*2);n=Math.sin(e)*c;r=Math.cos(e)*c;a.push(n,0,r);o.push(l.r,l.g,l.b)}}const l=new Zs;l.setAttribute("position",new Vs(a,3));l.setAttribute("color",new Vs(o,3));const c=new rl({vertexColors:true,toneMapped:false});super(l,c);this.type="PolarGridHelper"}dispose(){this.geometry.dispose();this.material.dispose()}}const uf=new xi;const hf=new xi;const df=new xi;class ff extends ts{constructor(t,e,n){super();this.light=t;this.matrix=t.matrixWorld;this.matrixAutoUpdate=false;this.color=n;this.type="DirectionalLightHelper";if(e===undefined)e=1;let i=new Zs;i.setAttribute("position",new Vs([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new rl({fog:false,toneMapped:false});this.lightPlane=new dl(i,r);this.add(this.lightPlane);i=new Zs;i.setAttribute("position",new Vs([0,0,0,0,0,1],3));this.targetLine=new dl(i,r);this.add(this.targetLine);this.update()}dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(true,false);this.light.target.updateWorldMatrix(true,false);uf.setFromMatrixPosition(this.light.matrixWorld);hf.setFromMatrixPosition(this.light.target.matrixWorld);df.subVectors(hf,uf);this.lightPlane.lookAt(hf);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color)}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color)}this.targetLine.lookAt(hf);this.targetLine.scale.z=df.length()}}const pf=new xi;const mf=new va;class gf extends gl{constructor(t){const e=new Zs;const n=new rl({color:16777215,vertexColors:true,toneMapped:false});const i=[];const r=[];const s={};a("n1","n2");a("n2","n4");a("n4","n3");a("n3","n1");a("f1","f2");a("f2","f4");a("f4","f3");a("f3","f1");a("n1","f1");a("n2","f2");a("n3","f3");a("n4","f4");a("p","n1");a("p","n2");a("p","n3");a("p","n4");a("u1","u2");a("u2","u3");a("u3","u1");a("c","t");a("p","c");a("cn1","cn2");a("cn3","cn4");a("cf1","cf2");a("cf3","cf4");function a(t,e){o(t);o(e)}function o(t){i.push(0,0,0);r.push(0,0,0);if(s[t]===undefined){s[t]=[]}s[t].push(i.length/3-1)}e.setAttribute("position",new Vs(i,3));e.setAttribute("color",new Vs(r,3));super(e,n);this.type="CameraHelper";this.camera=t;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=t.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=s;this.update();const l=new vs(16755200);const c=new vs(16711680);const u=new vs(43775);const h=new vs(16777215);const d=new vs(3355443);this.setColors(l,c,u,h,d)}setColors(t,e,n,i,r){const s=this.geometry;const a=s.getAttribute("color");a.setXYZ(0,t.r,t.g,t.b);a.setXYZ(1,t.r,t.g,t.b);a.setXYZ(2,t.r,t.g,t.b);a.setXYZ(3,t.r,t.g,t.b);a.setXYZ(4,t.r,t.g,t.b);a.setXYZ(5,t.r,t.g,t.b);a.setXYZ(6,t.r,t.g,t.b);a.setXYZ(7,t.r,t.g,t.b);a.setXYZ(8,t.r,t.g,t.b);a.setXYZ(9,t.r,t.g,t.b);a.setXYZ(10,t.r,t.g,t.b);a.setXYZ(11,t.r,t.g,t.b);a.setXYZ(12,t.r,t.g,t.b);a.setXYZ(13,t.r,t.g,t.b);a.setXYZ(14,t.r,t.g,t.b);a.setXYZ(15,t.r,t.g,t.b);a.setXYZ(16,t.r,t.g,t.b);a.setXYZ(17,t.r,t.g,t.b);a.setXYZ(18,t.r,t.g,t.b);a.setXYZ(19,t.r,t.g,t.b);a.setXYZ(20,t.r,t.g,t.b);a.setXYZ(21,t.r,t.g,t.b);a.setXYZ(22,t.r,t.g,t.b);a.setXYZ(23,t.r,t.g,t.b);a.setXYZ(24,e.r,e.g,e.b);a.setXYZ(25,e.r,e.g,e.b);a.setXYZ(26,e.r,e.g,e.b);a.setXYZ(27,e.r,e.g,e.b);a.setXYZ(28,e.r,e.g,e.b);a.setXYZ(29,e.r,e.g,e.b);a.setXYZ(30,e.r,e.g,e.b);a.setXYZ(31,e.r,e.g,e.b);a.setXYZ(32,n.r,n.g,n.b);a.setXYZ(33,n.r,n.g,n.b);a.setXYZ(34,n.r,n.g,n.b);a.setXYZ(35,n.r,n.g,n.b);a.setXYZ(36,n.r,n.g,n.b);a.setXYZ(37,n.r,n.g,n.b);a.setXYZ(38,i.r,i.g,i.b);a.setXYZ(39,i.r,i.g,i.b);a.setXYZ(40,r.r,r.g,r.b);a.setXYZ(41,r.r,r.g,r.b);a.setXYZ(42,r.r,r.g,r.b);a.setXYZ(43,r.r,r.g,r.b);a.setXYZ(44,r.r,r.g,r.b);a.setXYZ(45,r.r,r.g,r.b);a.setXYZ(46,r.r,r.g,r.b);a.setXYZ(47,r.r,r.g,r.b);a.setXYZ(48,r.r,r.g,r.b);a.setXYZ(49,r.r,r.g,r.b);a.needsUpdate=true}update(){const t=this.geometry;const e=this.pointMap;const n=1,i=1;mf.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);const r=this.camera.coordinateSystem===Fn?-1:0;_f("c",e,t,mf,0,0,r);_f("t",e,t,mf,0,0,1);_f("n1",e,t,mf,-n,-i,r);_f("n2",e,t,mf,n,-i,r);_f("n3",e,t,mf,-n,i,r);_f("n4",e,t,mf,n,i,r);_f("f1",e,t,mf,-n,-i,1);_f("f2",e,t,mf,n,-i,1);_f("f3",e,t,mf,-n,i,1);_f("f4",e,t,mf,n,i,1);_f("u1",e,t,mf,n*.7,i*1.1,r);_f("u2",e,t,mf,-n*.7,i*1.1,r);_f("u3",e,t,mf,0,i*2,r);_f("cf1",e,t,mf,-n,0,1);_f("cf2",e,t,mf,n,0,1);_f("cf3",e,t,mf,0,-i,1);_f("cf4",e,t,mf,0,i,1);_f("cn1",e,t,mf,-n,0,r);_f("cn2",e,t,mf,n,0,r);_f("cn3",e,t,mf,0,-i,r);_f("cn4",e,t,mf,0,i,r);t.getAttribute("position").needsUpdate=true}dispose(){this.geometry.dispose();this.material.dispose()}}function _f(t,e,n,i,r,s,a){pf.set(r,s,a).unproject(i);const o=e[t];if(o!==undefined){const t=n.getAttribute("position");for(let e=0,n=o.length;e<n;e++){t.setXYZ(o[e],pf.x,pf.y,pf.z)}}}const xf=new tr;class vf extends gl{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const i=new Float32Array(8*3);const r=new Zs;r.setIndex(new Ls(n,1));r.setAttribute("position",new Ls(i,3));super(r,new rl({color:e,toneMapped:false}));this.object=t;this.type="BoxHelper";this.matrixAutoUpdate=false;this.update()}update(){if(this.object!==undefined){xf.setFromObject(this.object)}if(xf.isEmpty())return;const t=xf.min;const e=xf.max;const n=this.geometry.attributes.position;const i=n.array;i[0]=e.x;i[1]=e.y;i[2]=e.z;i[3]=t.x;i[4]=e.y;i[5]=e.z;i[6]=t.x;i[7]=t.y;i[8]=e.z;i[9]=e.x;i[10]=t.y;i[11]=e.z;i[12]=e.x;i[13]=e.y;i[14]=t.z;i[15]=t.x;i[16]=e.y;i[17]=t.z;i[18]=t.x;i[19]=t.y;i[20]=t.z;i[21]=e.x;i[22]=t.y;i[23]=t.z;n.needsUpdate=true;this.geometry.computeBoundingSphere()}setFromObject(t){this.object=t;this.update();return this}copy(t,e){super.copy(t,e);this.object=t.object;return this}dispose(){this.geometry.dispose();this.material.dispose()}}class yf extends gl{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const i=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];const r=new Zs;r.setIndex(new Ls(n,1));r.setAttribute("position",new Vs(i,3));super(r,new rl({color:e,toneMapped:false}));this.box=t;this.type="Box3Helper";this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;if(e.isEmpty())return;e.getCenter(this.position);e.getSize(this.scale);this.scale.multiplyScalar(.5);super.updateMatrixWorld(t)}dispose(){this.geometry.dispose();this.material.dispose()}}class Mf extends dl{constructor(t,e=1,n=16776960){const i=n;const r=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0];const s=new Zs;s.setAttribute("position",new Vs(r,3));s.computeBoundingSphere();super(s,new rl({color:i,toneMapped:false}));this.type="PlaneHelper";this.plane=t;this.size=e;const a=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0];const o=new Zs;o.setAttribute("position",new Vs(a,3));o.computeBoundingSphere();this.add(new oa(o,new bs({color:i,opacity:.2,transparent:true,depthWrite:false,toneMapped:false})))}updateMatrixWorld(t){this.position.set(0,0,0);this.scale.set(.5*this.size,.5*this.size,1);this.lookAt(this.plane.normal);this.translateZ(-this.plane.constant);super.updateMatrixWorld(t)}dispose(){this.geometry.dispose();this.material.dispose();this.children[0].geometry.dispose();this.children[0].material.dispose()}}const Sf=new xi;let bf,Tf;class Ef extends ts{constructor(t=new xi(0,0,1),e=new xi(0,0,0),n=1,i=16776960,r=n*.2,s=r*.2){super();this.type="ArrowHelper";if(bf===undefined){bf=new Zs;bf.setAttribute("position",new Vs([0,0,0,0,1,0],3));Tf=new Ol(.5,1,5,1);Tf.translate(0,-.5,0)}this.position.copy(e);this.line=new dl(bf,new rl({color:i,toneMapped:false}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new oa(Tf,new bs({color:i,toneMapped:false}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(t);this.setLength(n,r,s)}setDirection(t){if(t.y>.99999){this.quaternion.set(0,0,0,1)}else if(t.y<-.99999){this.quaternion.set(1,0,0,0)}else{Sf.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Sf,e)}}setLength(t,e=t*.2,n=e*.2){this.line.scale.set(1,Math.max(1e-4,t-e),1);this.line.updateMatrix();this.cone.scale.set(n,e,n);this.cone.position.y=t;this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t);this.cone.material.color.set(t)}copy(t){super.copy(t,false);this.line.copy(t.line);this.cone.copy(t.cone);return this}dispose(){this.line.geometry.dispose();this.line.material.dispose();this.cone.geometry.dispose();this.cone.material.dispose()}}class wf extends gl{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const i=new Zs;i.setAttribute("position",new Vs(e,3));i.setAttribute("color",new Vs(n,3));const r=new rl({vertexColors:true,toneMapped:false});super(i,r);this.type="AxesHelper"}setColors(t,e,n){const i=new vs;const r=this.geometry.attributes.color.array;i.set(t);i.toArray(r,0);i.toArray(r,3);i.set(e);i.toArray(r,6);i.toArray(r,9);i.set(n);i.toArray(r,12);i.toArray(r,15);this.geometry.attributes.color.needsUpdate=true;return this}dispose(){this.geometry.dispose();this.material.dispose()}}class Af{constructor(){this.type="ShapePath";this.color=new vs;this.subPaths=[];this.currentPath=null}moveTo(t,e){this.currentPath=new xc;this.subPaths.push(this.currentPath);this.currentPath.moveTo(t,e);return this}lineTo(t,e){this.currentPath.lineTo(t,e);return this}quadraticCurveTo(t,e,n,i){this.currentPath.quadraticCurveTo(t,e,n,i);return this}bezierCurveTo(t,e,n,i,r,s){this.currentPath.bezierCurveTo(t,e,n,i,r,s);return this}splineThru(t){this.currentPath.splineThru(t);return this}toShapes(t){function e(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];const r=new vc;r.curves=i.curves;e.push(r)}return e}function n(t,e){const n=e.length;let i=false;for(let r=n-1,s=0;s<n;r=s++){let n=e[r];let a=e[s];let o=a.x-n.x;let l=a.y-n.y;if(Math.abs(l)>Number.EPSILON){if(l<0){n=e[s];o=-o;a=e[r];l=-l}if(t.y<n.y||t.y>a.y)continue;if(t.y===n.y){if(t.x===n.x)return true}else{const e=l*(t.x-n.x)-o*(t.y-n.y);if(e===0)return true;if(e<0)continue;i=!i}}else{if(t.y!==n.y)continue;if(a.x<=t.x&&t.x<=n.x||n.x<=t.x&&t.x<=a.x)return true}}return i}const i=tu.isClockWise;const r=this.subPaths;if(r.length===0)return[];let s,a,o;const l=[];if(r.length===1){a=r[0];o=new vc;o.curves=a.curves;l.push(o);return l}let c=!i(r[0].getPoints());c=t?!c:c;const u=[];const h=[];let d=[];let f=0;let p;h[f]=undefined;d[f]=[];for(let e=0,n=r.length;e<n;e++){a=r[e];p=a.getPoints();s=i(p);s=t?!s:s;if(s){if(!c&&h[f])f++;h[f]={s:new vc,p:p};h[f].s.curves=a.curves;if(c)f++;d[f]=[]}else{d[f].push({h:a,p:p[0]})}}if(!h[0])return e(r);if(h.length>1){let t=false;let e=0;for(let t=0,e=h.length;t<e;t++){u[t]=[]}for(let i=0,r=h.length;i<r;i++){const r=d[i];for(let s=0;s<r.length;s++){const a=r[s];let o=true;for(let r=0;r<h.length;r++){if(n(a.p,h[r].p)){if(i!==r)e++;if(o){o=false;u[r].push(a)}else{t=true}}}if(o){u[i].push(a)}}}if(e>0&&t===false){d=u}}let m;for(let t=0,e=h.length;t<e;t++){o=h[t].s;l.push(o);m=d[t];for(let t=0,e=m.length;t<e;t++){o.holes.push(m[t].h)}}return l}}class Cf extends Gn{constructor(t,e=null){super();this.object=t;this.domElement=e;this.enabled=true;this.state=-1;this.keys={};this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null};this.touches={ONE:null,TWO:null}}connect(t){if(t===undefined){console.warn("THREE.Controls: connect() now requires an element.");return}if(this.domElement!==null)this.disconnect();this.domElement=t}disconnect(){}dispose(){}update(){}}function Rf(t,e){const n=t.image&&t.image.width?t.image.width/t.image.height:1;if(n>e){t.repeat.x=1;t.repeat.y=n/e;t.offset.x=0;t.offset.y=(1-t.repeat.y)/2}else{t.repeat.x=e/n;t.repeat.y=1;t.offset.x=(1-t.repeat.x)/2;t.offset.y=0}return t}function If(t,e){const n=t.image&&t.image.width?t.image.width/t.image.height:1;if(n>e){t.repeat.x=e/n;t.repeat.y=1;t.offset.x=(1-t.repeat.x)/2;t.offset.y=0}else{t.repeat.x=1;t.repeat.y=n/e;t.offset.x=0;t.offset.y=(1-t.repeat.y)/2}return t}function Pf(t){t.repeat.x=1;t.repeat.y=1;t.offset.x=0;t.offset.y=0;return t}function Lf(t,e,n,i){const r=Df(i);switch(n){case Vt:return t*e;case jt:return t*e/r.components*r.byteLength;case qt:return t*e/r.components*r.byteLength;case Yt:return t*e*2/r.components*r.byteLength;case Zt:return t*e*2/r.components*r.byteLength;case Gt:return t*e*3/r.components*r.byteLength;case Ht:return t*e*4/r.components*r.byteLength;case Kt:return t*e*4/r.components*r.byteLength;case $t:case Qt:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case te:case ee:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case ie:case se:return Math.max(t,16)*Math.max(e,8)/4;case ne:case re:return Math.max(t,8)*Math.max(e,8)/2;case ae:case oe:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case le:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case ce:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case ue:return Math.floor((t+4)/5)*Math.floor((e+3)/4)*16;case he:return Math.floor((t+4)/5)*Math.floor((e+4)/5)*16;case de:return Math.floor((t+5)/6)*Math.floor((e+4)/5)*16;case fe:return Math.floor((t+5)/6)*Math.floor((e+5)/6)*16;case pe:return Math.floor((t+7)/8)*Math.floor((e+4)/5)*16;case me:return Math.floor((t+7)/8)*Math.floor((e+5)/6)*16;case ge:return Math.floor((t+7)/8)*Math.floor((e+7)/8)*16;case _e:return Math.floor((t+9)/10)*Math.floor((e+4)/5)*16;case xe:return Math.floor((t+9)/10)*Math.floor((e+5)/6)*16;case ve:return Math.floor((t+9)/10)*Math.floor((e+7)/8)*16;case ye:return Math.floor((t+9)/10)*Math.floor((e+9)/10)*16;case Me:return Math.floor((t+11)/12)*Math.floor((e+9)/10)*16;case Se:return Math.floor((t+11)/12)*Math.floor((e+11)/12)*16;case be:case Te:case Ee:return Math.ceil(t/4)*Math.ceil(e/4)*16;case we:case Ae:return Math.ceil(t/4)*Math.ceil(e/4)*8;case Ce:case Re:return Math.ceil(t/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${n} format.`)}function Df(t){switch(t){case Rt:case It:return{byteLength:1,components:1};case Lt:case Pt:case Ot:return{byteLength:2,components:1};case Ft:case Bt:return{byteLength:2,components:4};case Ut:case Dt:case Nt:return{byteLength:4,components:1};case kt:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${t}.`)}class Uf{static contain(t,e){return Rf(t,e)}static cover(t,e){return If(t,e)}static fill(t){return Pf(t)}static getByteLength(t,e,n,i){return Lf(t,e,n,i)}}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:e}}))}if(typeof window!=="undefined"){if(window.__THREE__){console.warn("WARNING: Multiple instances of Three.js being imported.")}else{window.__THREE__=e}}function Nf(){let t=null;let e=false;let n=null;let i=null;function r(e,s){n(e,s);i=t.requestAnimationFrame(r)}return{start:function(){if(e===true)return;if(n===null)return;i=t.requestAnimationFrame(r);e=true},stop:function(){t.cancelAnimationFrame(i);e=false},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function Of(t){const e=new WeakMap;function n(e,n,i){const r=e.array;const s=e.usage;const a=r.byteLength;const o=t.createBuffer();t.bindBuffer(n,o);t.bufferData(n,r,s);if(i){i.render.vramAllocated+=r.length*r.BYTES_PER_ELEMENT}e.onUploadCallback();let l;if(r instanceof Float32Array){l=t.FLOAT}else if(typeof Float16Array!=="undefined"&&r instanceof Float16Array){l=t.HALF_FLOAT}else if(r instanceof Uint16Array){if(e.isFloat16BufferAttribute){l=t.HALF_FLOAT}else{l=t.UNSIGNED_SHORT}}else if(r instanceof Int16Array){l=t.SHORT}else if(r instanceof Uint32Array){l=t.UNSIGNED_INT}else if(r instanceof Int32Array){l=t.INT}else if(r instanceof Int8Array){l=t.BYTE}else if(r instanceof Uint8Array){l=t.UNSIGNED_BYTE}else if(r instanceof Uint8ClampedArray){l=t.UNSIGNED_BYTE}else{throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r)}return{buffer:o,type:l,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version,size:a}}function i(e,n,i,r){const s=n.array;const a=n.updateRanges;t.bindBuffer(i,e);if(a.length===0){t.bufferSubData(i,0,s);if(r){r.render.vramUpdated+=s.length*s.BYTES_PER_ELEMENT}}else{a.sort((t,e)=>t.start-e.start);let e=0;for(let t=1;t<a.length;t++){const n=a[e];const i=a[t];if(i.start<=n.start+n.count+1){n.count=Math.max(n.count,i.start+i.count-n.start)}else{++e;a[e]=i}}a.length=e+1;for(let e=0,n=a.length;e<n;e++){const n=a[e];t.bufferSubData(i,n.start*s.BYTES_PER_ELEMENT,s,n.start,n.count);if(r){r.render.vramUpdated+=n.count*s.BYTES_PER_ELEMENT}}n.clearUpdateRanges()}n.onUploadCallback()}function r(t){if(t.isInterleavedBufferAttribute)t=t.data;return e.get(t)}function s(n){if(n.isInterleavedBufferAttribute)n=n.data;const i=e.get(n);if(i){t.deleteBuffer(i.buffer);e.delete(n)}}function a(t,r,s){if(t.isInterleavedBufferAttribute)t=t.data;if(t.isGLBufferAttribute){const n=e.get(t);if(!n||n.version<t.version){e.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version})}return}const a=e.get(t);if(a===undefined){e.set(t,n(t,r,s))}else if(a.version<t.version){if(a.size!==t.array.byteLength){throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.")}i(a.buffer,t,r,s);a.version=t.version}}return{get:r,remove:s,update:a}}var Ff="#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";var Bf="#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";var zf="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";var kf="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var Vf="#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif";var Gf="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";var Hf="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";var Wf="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var Xf="#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif";var jf="#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";var qf="vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif\n#ifdef USE_DATATEXTURE\nif(useDataTexture) {\n    transformed = (vec4( transformed, 1.0) * modelMatrixFromDataTexture).xyz;\n}\n#endif";var Yf="vec3 objectNormal = vec3( normal );\n#ifdef USE_DATATEXTURE\nhighp mat4 modelMatrixFromDataTexture;\nif(useDataTexture) {\n\tfloat dataOffset = (5.0 * (clusterInstance + float(gl_InstanceID))) * uOccurrenceTexelWidth;\n\tfloat row = floor(dataOffset);\n\thighp vec4 extra = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tmodelMatrixFromDataTexture[3] = vec4(0.0, 0.0, 0.0, 1.0);\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\thighp uint uExtra0 = floatBitsToUint(extra[0]);\n\thighp uint uExtraTop = uExtra0 >> 24u;\n\tif ((uExtraTop & 1u) == 0u) {\n\t\tgl_Position = vec4(-10.0, -10.0, -10.0, 1.0);\n\t\treturn;\n\t}\n\thighp vec4 extra2 = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tif ((uExtraTop & 2u) == 2u) {\n\t\tcolorFromDataTexture.r = float(uExtra0 & 0xFFu) / 255.0;\n\t\tcolorFromDataTexture.g = float((uExtra0 >> 8u) & 0xFFu) / 255.0;\n\t\tcolorFromDataTexture.b = float((uExtra0 >> 16u) & 0xFFu) / 255.0;\n\t} else {\n\t\tcolorFromDataTexture.r = -1.0;\t}\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\tmodelMatrixFromDataTexture[0] = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\tmodelMatrixFromDataTexture[1] = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\tmodelMatrixFromDataTexture[2] = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tif (pointSize >= 0.0) gl_PointSize = pointSize * extra[1];\n\tobjectNormal = objectNormal * mat3(modelMatrixFromDataTexture);\n} else {\n\tcolorFromDataTexture.r = -1.0;\tif (pointSize >= 0.0) gl_PointSize = pointSize;\n}\n#else\n\tif (pointSize >= 0.0) gl_PointSize = pointSize;\n#endif\n#if defined( USE_COLOR ) && defined( USE_DATATEXTURE )\n\tif (useVertexColors == 2) {\n\t\tif (colorFromDataTexture.r < 0.0) {\n\t\t\tcolorFromDataTexture = vColor;\n\t\t}\n\t\tvColor.r = -1.0;\t}\n#endif\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var Zf="float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";var Jf="#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";var Kf="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var $f="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif";var Qf="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var tp="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var ep="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var np="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";var ip="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";var rp="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif";var sp="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tif ( useVertexColors > 0 ) vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif";var ap="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";var op="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var lp="#ifdef USE_DATATEXTURE\nhighp mat4 modelMatrixFromDataTexture;\nif(useDataTexture) {\n\tfloat dataOffset = (5.0 * (clusterInstance + float(gl_InstanceID))) * uOccurrenceTexelWidth;\n\tfloat row = floor(dataOffset);\n\thighp vec4 extra = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tmodelMatrixFromDataTexture[3] = vec4(0.0, 0.0, 0.0, 1.0);\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\thighp uint uExtra0 = floatBitsToUint(extra[0]);\n\thighp uint uExtraTop = uExtra0 >> 24u;\n\tif ((uExtraTop & 1u) == 0u) {\n\t\tgl_Position = vec4(-10.0, -10.0, -10.0, 1.0);\n\t\treturn;\n\t}\n\thighp vec4 extra2 = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tif ((uExtraTop & 2u) == 2u) {\n\t\tcolorFromDataTexture.r = float(uExtra0 & 0xFFu) / 255.0;\n\t\tcolorFromDataTexture.g = float((uExtra0 >> 8u) & 0xFFu) / 255.0;\n\t\tcolorFromDataTexture.b = float((uExtra0 >> 16u) & 0xFFu) / 255.0;\n\t} else {\n\t\tcolorFromDataTexture.r = -1.0;\t}\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\tmodelMatrixFromDataTexture[0] = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\tmodelMatrixFromDataTexture[1] = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tdataOffset += uOccurrenceTexelWidth;\n\trow = floor(dataOffset);\n\tmodelMatrixFromDataTexture[2] = texture2D(specularMap, vec2((dataOffset - row) + uHalfTexelWidth, (0.5 + row) * uOccurrenceTexelHeight));\n\tif (pointSize >= 0.0) gl_PointSize = pointSize * extra[1];\n} else {\n\tcolorFromDataTexture.r = -1.0;\tif (pointSize >= 0.0) gl_PointSize = pointSize;\n}\n#else\n\tif (pointSize >= 0.0) gl_PointSize = pointSize;\n#endif\n#if defined( USE_COLOR ) && defined( USE_DATATEXTURE )\n\tif (useVertexColors == 2) {\n\t\tif (colorFromDataTexture.r < 0.0) {\n\t\t\tcolorFromDataTexture = vColor;\n\t\t}\n\t\tvColor.r = -1.0;\t}\n#endif";var cp="vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var up="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var hp="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";var dp="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var fp="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var pp="gl_FragColor = linearToOutputTexel( gl_FragColor );";var mp="vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";var gp="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var _p="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var xp="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var vp="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var yp="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var Mp="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";var Sp="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";var bp="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var Tp="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var Ep="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";var wp="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var Ap="LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";var Cp="varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";var Rp="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";var Ip="#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";var Pp="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var Lp="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";var Dp="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n#ifdef USE_DATATEXTURE\n\tif (colorFromDataTexture.r >= 0.0) {\n\t\tmaterial.specularColor = vec3(0.0602);\n\t}\n#endif";var Up="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";var Np="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";var Op="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var Fp="\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var Bp="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";var zp="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";var kp="#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var Vp="#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var Gp="#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var Hp="#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";var Wp="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";var Xp="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var jp="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var qp="#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var Yp="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var Zp="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var Jp="#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif";var Kp="#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";var $p="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";var Qp="#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif";var tm="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif";var em="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;";var nm="#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var im="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var rm="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var sm="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";var am="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";var om="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif";var lm="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";var cm="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";var um="#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";var hm="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var dm="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";var fm="#ifdef POINT_CLOUD_GROUPS\n\tpointCloudGroupColor = vec4(0.0);\n\tfor (int i = POINT_CLOUD_GROUPS - 1; i >= 0; i--) {\n\t\tif ( all( lessThanEqual( abs( ( worldPosition * pointCloudGroupMatrices[ i ] ).xyz ), vec3( 0.5 )))) {\n\t\t\tpointCloudGroupColor = pointCloudGroupColors[ i ];\n\t\t\tbreak;\n\t\t}\n\t}\n#endif";var pm="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var mm="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;\nif (pointSize >= 0.0) gl_PointSize *= projectionMatrix[ 0 ][ 0 ] / gl_Position.w;";var gm="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var _m="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var xm="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var vm="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var ym="#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif";var Mm="#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var Sm="#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";var bm="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var Tm="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var Em="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif";var wm="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var Am="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var Cm="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var Rm="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var Im="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var Pm="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var Lm="#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";var Dm="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t#else\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";var Um="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var Nm="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";var Om="#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";var Fm="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || defined( POINT_CLOUD_GROUPS ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";const Bm="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const zm="uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const km="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const Vm="#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Gm="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const Hm="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Wm="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#else\n\t\t#include <data_texture_explicit>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";const Xm="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}";const jm="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#else\n\t\t#include <data_texture_explicit>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";const qm="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";const Ym="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";const Zm="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";const Jm="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const Km="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const $m="#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#else\n\t\t#include <data_texture_explicit>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";const Qm="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const tg="#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const eg="#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const ng="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";const ig="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const rg="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";const sg="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";const ag="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\t#include <point_cloud_groups_vertex>\n}";const og="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n#ifdef POINT_CLOUD\n\tvec2 rDelta = gl_PointCoord - vec2( 0.5 );\n\tfloat rDist2 = dot(rDelta, rDelta);\n\tif (rDist2 > 0.25)\n\t\tdiscard;\n#endif\n#ifdef POINT_CLOUD_GROUPS\n\tif (pointCloudGroupColor.a < 0.0)\n\t\tdiscard;\n#endif\n#if defined( USE_COLOR ) && defined( USE_DATATEXTURE )\nif (vColor.r < 0.0) {\n\t#include <clipping_planes_fragment>\n\tgl_FragColor = vec4( colorFromDataTexture, opacity );\n#ifdef POINT_CLOUD\n\tgl_FragColor.xyz *= 1.0625 - rDist2 * 0.5;\n#endif\n#ifdef POINT_CLOUD_GROUPS\n\tgl_FragColor.xyz = mix( gl_FragColor.xyz, pointCloudGroupColor.xyz, pointCloudGroupColor.a );\n#endif\n}\nelse\n#endif\n{\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n#ifdef USE_DATATEXTURE\n\tif (colorFromDataTexture.r >= 0.0) {\n\t\tdiffuseColor.rgb = colorFromDataTexture;\n\t\ttotalEmissiveRadiance = vec3(0.0235);\n\t}\n#endif\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n#ifdef MISSING_NORMALS\n\toutgoingLight = diffuseColor.xyz;\n#endif\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n}\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n#ifdef POINT_CLOUD_GROUPS\n\tgl_FragColor.xyz = mix( gl_FragColor.xyz, pointCloudGroupColor.xyz, pointCloudGroupColor.a );\n#endif\n}";const lg="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";const cg="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const ug="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const hg="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const dg="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";const fg="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const pg="#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const mg="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const gg="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const _g="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";const xg={alphahash_fragment:Ff,alphahash_pars_fragment:Bf,alphamap_fragment:zf,alphamap_pars_fragment:kf,alphatest_fragment:Vf,alphatest_pars_fragment:Gf,aomap_fragment:Hf,aomap_pars_fragment:Wf,batching_pars_vertex:Xf,batching_vertex:jf,begin_vertex:qf,beginnormal_vertex:Yf,bsdfs:Zf,iridescence_fragment:Jf,bumpmap_pars_fragment:Kf,clipping_planes_fragment:$f,clipping_planes_pars_fragment:Qf,clipping_planes_pars_vertex:tp,clipping_planes_vertex:ep,color_fragment:np,color_pars_fragment:ip,color_pars_vertex:rp,color_vertex:sp,common:ap,cube_uv_reflection_fragment:op,data_texture_explicit:lp,defaultnormal_vertex:cp,displacementmap_pars_vertex:up,displacementmap_vertex:hp,emissivemap_fragment:dp,emissivemap_pars_fragment:fp,colorspace_fragment:pp,colorspace_pars_fragment:mp,envmap_fragment:gp,envmap_common_pars_fragment:_p,envmap_pars_fragment:xp,envmap_pars_vertex:vp,envmap_physical_pars_fragment:Ip,envmap_vertex:yp,fog_vertex:Mp,fog_pars_vertex:Sp,fog_fragment:bp,fog_pars_fragment:Tp,gradientmap_pars_fragment:Ep,lightmap_pars_fragment:wp,lights_lambert_fragment:Ap,lights_lambert_pars_fragment:Cp,lights_pars_begin:Rp,lights_toon_fragment:Pp,lights_toon_pars_fragment:Lp,lights_phong_fragment:Dp,lights_phong_pars_fragment:Up,lights_physical_fragment:Np,lights_physical_pars_fragment:Op,lights_fragment_begin:Fp,lights_fragment_maps:Bp,lights_fragment_end:zp,logdepthbuf_fragment:kp,logdepthbuf_pars_fragment:Vp,logdepthbuf_pars_vertex:Gp,logdepthbuf_vertex:Hp,map_fragment:Wp,map_pars_fragment:Xp,map_particle_fragment:jp,map_particle_pars_fragment:qp,metalnessmap_fragment:Yp,metalnessmap_pars_fragment:Zp,morphinstance_vertex:Jp,morphcolor_vertex:Kp,morphnormal_vertex:$p,morphtarget_pars_vertex:Qp,morphtarget_vertex:tm,normal_fragment_begin:em,normal_fragment_maps:nm,normal_pars_fragment:im,normal_pars_vertex:rm,normal_vertex:sm,normalmap_pars_fragment:am,clearcoat_normal_fragment_begin:om,clearcoat_normal_fragment_maps:lm,clearcoat_pars_fragment:cm,iridescence_pars_fragment:um,opaque_fragment:hm,packing:dm,point_cloud_groups_vertex:fm,premultiplied_alpha_fragment:pm,project_vertex:mm,dithering_fragment:gm,dithering_pars_fragment:_m,roughnessmap_fragment:xm,roughnessmap_pars_fragment:vm,shadowmap_pars_fragment:ym,shadowmap_pars_vertex:Mm,shadowmap_vertex:Sm,shadowmask_pars_fragment:bm,skinbase_vertex:Tm,skinning_pars_vertex:Em,skinning_vertex:wm,skinnormal_vertex:Am,specularmap_fragment:Cm,specularmap_pars_fragment:Rm,tonemapping_fragment:Im,tonemapping_pars_fragment:Pm,transmission_fragment:Lm,transmission_pars_fragment:Dm,uv_pars_fragment:Um,uv_pars_vertex:Nm,uv_vertex:Om,worldpos_vertex:Fm,background_vert:Bm,background_frag:zm,backgroundCube_vert:km,backgroundCube_frag:Vm,cube_vert:Gm,cube_frag:Hm,depth_vert:Wm,depth_frag:Xm,distanceRGBA_vert:jm,distanceRGBA_frag:qm,equirect_vert:Ym,equirect_frag:Zm,linedashed_vert:Jm,linedashed_frag:Km,meshbasic_vert:$m,meshbasic_frag:Qm,meshlambert_vert:tg,meshlambert_frag:eg,meshmatcap_vert:ng,meshmatcap_frag:ig,meshnormal_vert:rg,meshnormal_frag:sg,meshphong_vert:ag,meshphong_frag:og,meshphysical_vert:lg,meshphysical_frag:cg,meshtoon_vert:ug,meshtoon_frag:hg,points_vert:dg,points_frag:fg,shadow_vert:pg,shadow_frag:mg,sprite_vert:gg,sprite_frag:_g};const vg={common:{diffuse:{value:new vs(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Mi},alphaMap:{value:null},alphaMapTransform:{value:new Mi},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Mi}},envmap:{envMap:{value:null},envMapRotation:{value:new Mi},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Mi}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Mi}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Mi},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Mi},normalScale:{value:new gi(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Mi},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Mi}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Mi}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Mi}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new vs(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new vs(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Mi},alphaTest:{value:0},uvTransform:{value:new Mi}},sprite:{diffuse:{value:new vs(16777215)},opacity:{value:1},center:{value:new gi(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Mi},alphaMap:{value:null},alphaMapTransform:{value:new Mi},alphaTest:{value:0}}};const yg={basic:{uniforms:da([vg.common,vg.specularmap,vg.envmap,vg.aomap,vg.lightmap,vg.fog]),vertexShader:xg.meshbasic_vert,fragmentShader:xg.meshbasic_frag},lambert:{uniforms:da([vg.common,vg.specularmap,vg.envmap,vg.aomap,vg.lightmap,vg.emissivemap,vg.bumpmap,vg.normalmap,vg.displacementmap,vg.fog,vg.lights,{emissive:{value:new vs(0)}}]),vertexShader:xg.meshlambert_vert,fragmentShader:xg.meshlambert_frag},phong:{uniforms:da([vg.common,vg.specularmap,vg.envmap,vg.aomap,vg.lightmap,vg.emissivemap,vg.bumpmap,vg.normalmap,vg.displacementmap,vg.fog,vg.lights,{emissive:{value:new vs(0)},specular:{value:new vs(1118481)},shininess:{value:30}}]),vertexShader:xg.meshphong_vert,fragmentShader:xg.meshphong_frag},standard:{uniforms:da([vg.common,vg.envmap,vg.aomap,vg.lightmap,vg.emissivemap,vg.bumpmap,vg.normalmap,vg.displacementmap,vg.roughnessmap,vg.metalnessmap,vg.fog,vg.lights,{emissive:{value:new vs(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:xg.meshphysical_vert,fragmentShader:xg.meshphysical_frag},toon:{uniforms:da([vg.common,vg.aomap,vg.lightmap,vg.emissivemap,vg.bumpmap,vg.normalmap,vg.displacementmap,vg.gradientmap,vg.fog,vg.lights,{emissive:{value:new vs(0)}}]),vertexShader:xg.meshtoon_vert,fragmentShader:xg.meshtoon_frag},matcap:{uniforms:da([vg.common,vg.bumpmap,vg.normalmap,vg.displacementmap,vg.fog,{matcap:{value:null}}]),vertexShader:xg.meshmatcap_vert,fragmentShader:xg.meshmatcap_frag},points:{uniforms:da([vg.points,vg.fog]),vertexShader:xg.points_vert,fragmentShader:xg.points_frag},dashed:{uniforms:da([vg.common,vg.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:xg.linedashed_vert,fragmentShader:xg.linedashed_frag},depth:{uniforms:da([vg.common,vg.displacementmap]),vertexShader:xg.depth_vert,fragmentShader:xg.depth_frag},normal:{uniforms:da([vg.common,vg.bumpmap,vg.normalmap,vg.displacementmap,{opacity:{value:1}}]),vertexShader:xg.meshnormal_vert,fragmentShader:xg.meshnormal_frag},sprite:{uniforms:da([vg.sprite,vg.fog]),vertexShader:xg.sprite_vert,fragmentShader:xg.sprite_frag},background:{uniforms:{uvTransform:{value:new Mi},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:xg.background_vert,fragmentShader:xg.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new Mi}},vertexShader:xg.backgroundCube_vert,fragmentShader:xg.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:xg.cube_vert,fragmentShader:xg.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:xg.equirect_vert,fragmentShader:xg.equirect_frag},distanceRGBA:{uniforms:da([vg.common,vg.displacementmap,{referencePosition:{value:new xi},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:xg.distanceRGBA_vert,fragmentShader:xg.distanceRGBA_frag},shadow:{uniforms:da([vg.lights,vg.fog,{color:{value:new vs(0)},opacity:{value:1}}]),vertexShader:xg.shadow_vert,fragmentShader:xg.shadow_frag}};yg.physical={uniforms:da([yg.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Mi},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Mi},clearcoatNormalScale:{value:new gi(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Mi},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Mi},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Mi},sheen:{value:0},sheenColor:{value:new vs(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Mi},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Mi},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Mi},transmissionSamplerSize:{value:new gi},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Mi},attenuationDistance:{value:0},attenuationColor:{value:new vs(0)},specularColor:{value:new vs(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Mi},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Mi},anisotropyVector:{value:new gi},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Mi}}]),vertexShader:xg.meshphysical_vert,fragmentShader:xg.meshphysical_frag};const Mg={r:0,b:0,g:0};const Sg=new Fr;const bg=new Ar;function Tg(t,e,n,i,r,s,a){const o=new vs(0);let l=s===true?0:1;let c;let u;let h=null;let d=0;let f=null;function g(t){let i=t.isScene===true?t.background:null;if(i&&i.isTexture){const r=t.backgroundBlurriness>0;i=(r?n:e).get(i)}return i}function _(e){let n=false;const r=g(e);if(r===null){v(o,l)}else if(r&&r.isColor){v(r,1);n=true}const s=t.xr.getEnvironmentBlendMode();if(s==="additive"){i.buffers.color.setClear(0,0,0,1,a)}else if(s==="alpha-blend"){i.buffers.color.setClear(0,0,0,0,a)}if(t.autoClear||n){i.buffers.depth.setTest(true);i.buffers.depth.setMask(true);i.buffers.color.setMask(true);t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil)}}function x(e,n){const i=g(n);if(i&&(i.isCubeTexture||i.mapping===mt)){if(u===undefined){u=new oa(new ua(1,1,1),new xa({name:"BackgroundCubeMaterial",uniforms:ha(yg.backgroundCube.uniforms),vertexShader:yg.backgroundCube.vertexShader,fragmentShader:yg.backgroundCube.fragmentShader,side:m,depthTest:false,depthWrite:false,fog:false,allowOverride:false}));u.geometry.deleteAttribute("normal");u.geometry.deleteAttribute("uv");u.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)};Object.defineProperty(u.material,"envMap",{get:function(){return this.uniforms.envMap.value}});r.update(u)}Sg.copy(n.backgroundRotation);Sg.x*=-1;Sg.y*=-1;Sg.z*=-1;if(i.isCubeTexture&&i.isRenderTargetTexture===false){Sg.y*=-1;Sg.z*=-1}u.material.uniforms.envMap.value=i;u.material.uniforms.flipEnvMap.value=i.isCubeTexture&&i.isRenderTargetTexture===false?-1:1;u.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness;u.material.uniforms.backgroundIntensity.value=n.backgroundIntensity;u.material.uniforms.backgroundRotation.value.setFromMatrix4(bg.makeRotationFromEuler(Sg));u.material.toneMapped=Oi.getTransfer(i.colorSpace)!==tn;if(h!==i||d!==i.version||f!==t.toneMapping){u.material.needsUpdate=true;h=i;d=i.version;f=t.toneMapping}u.layers.enableAll();e.unshift(u,u.geometry,u.material,0,0,null)}else if(i&&i.isTexture){if(c===undefined){c=new oa(new cu(2,2),new xa({name:"BackgroundMaterial",uniforms:ha(yg.background.uniforms),vertexShader:yg.background.vertexShader,fragmentShader:yg.background.fragmentShader,side:p,depthTest:false,depthWrite:false,fog:false,allowOverride:false}));c.geometry.deleteAttribute("normal");Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}});r.update(c)}c.material.uniforms.t2D.value=i;c.material.uniforms.backgroundIntensity.value=n.backgroundIntensity;c.material.toneMapped=Oi.getTransfer(i.colorSpace)!==tn;if(i.matrixAutoUpdate===true){i.updateMatrix()}c.material.uniforms.uvTransform.value.copy(i.matrix);if(h!==i||d!==i.version||f!==t.toneMapping){c.material.needsUpdate=true;h=i;d=i.version;f=t.toneMapping}c.layers.enableAll();e.unshift(c,c.geometry,c.material,0,0,null)}}function v(e,n){e.getRGB(Mg,pa(t));i.buffers.color.setClear(Mg.r,Mg.g,Mg.b,n,a)}function y(){if(u!==undefined){u.geometry.dispose();u.material.dispose();u=undefined}if(c!==undefined){c.geometry.dispose();c.material.dispose();c=undefined}}return{getClearColor:function(){return o},setClearColor:function(t,e=1){o.set(t);l=e;v(o,l)},getClearAlpha:function(){return l},setClearAlpha:function(t){l=t;v(o,l)},render:_,addToRenderList:x,dispose:y}}function Eg(t,e){const n=t.getParameter(t.MAX_VERTEX_ATTRIBS);const i={};const r=d(null);let s=r;let a=false;function o(n,i,r,o,l,u){let d=false;const m=h(o,r,i);if(s!==m){s=m;c(s.object)}d=f(n,o,r,l);if(d)p(n,o,r,l);if(l!==null){e.update(l,t.ELEMENT_ARRAY_BUFFER,u)}if(d||a){a=false;y(n,i,r,o);if(l!==null){t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.get(l).buffer)}}}function l(){return t.createVertexArray()}function c(e){return t.bindVertexArray(e)}function u(e){return t.deleteVertexArray(e)}function h(t,e,n){const r=n.wireframe===true;let s=i[t.id];if(s===undefined){s={};i[t.id]=s}let a=s[e.id];if(a===undefined){a={};s[e.id]=a}let o=a[r];if(o===undefined){o=d(l());a[r]=o}return o}function d(t){const e=[];const i=[];const r=[];for(let t=0;t<n;t++){e[t]=0;i[t]=0;r[t]=0}return{geometry:null,program:null,wireframe:false,newAttributes:e,enabledAttributes:i,attributeDivisors:r,object:t,attributes:{},index:null}}function f(t,e,n,i){const r=s.attributes;const a=e.attributes;let o=0;const l=n.getAttributes();for(const e in l){const n=l[e];if(n.location>=0){const n=r[e];let i=a[e];if(i===undefined){if(e==="instanceMatrix"&&t.instanceMatrix)i=t.instanceMatrix;if(e==="instanceColor"&&t.instanceColor)i=t.instanceColor}if(n===undefined)return true;if(n.attribute!==i)return true;if(i&&n.data!==i.data)return true;o++}}if(s.attributesNum!==o)return true;if(s.index!==i)return true;return false}function p(t,e,n,i){const r={};const a=e.attributes;let o=0;const l=n.getAttributes();for(const e in l){const n=l[e];if(n.location>=0){let n=a[e];if(n===undefined){if(e==="instanceMatrix"&&t.instanceMatrix)n=t.instanceMatrix;if(e==="instanceColor"&&t.instanceColor)n=t.instanceColor}const i={};i.attribute=n;if(n&&n.data){i.data=n.data}r[e]=i;o++}}s.attributes=r;s.attributesNum=o;s.index=i}function m(){const t=s.newAttributes;for(let e=0,n=t.length;e<n;e++){t[e]=0}}function g(t){_(t,0)}function _(e,n){const i=s.newAttributes;const r=s.enabledAttributes;const a=s.attributeDivisors;i[e]=1;if(r[e]===0){t.enableVertexAttribArray(e);r[e]=1}if(a[e]!==n){t.vertexAttribDivisor(e,n);a[e]=n}}function x(){const e=s.newAttributes;const n=s.enabledAttributes;for(let i=0,r=n.length;i<r;i++){if(n[i]!==e[i]){t.disableVertexAttribArray(i);n[i]=0}}}function v(e,n,i,r,s,a,o){if(o===true){t.vertexAttribIPointer(e,n,i,s,a)}else{t.vertexAttribPointer(e,n,i,r,s,a)}}function y(n,i,r,s){m();const a=s.attributes;const o=r.getAttributes();const l=i.defaultAttributeValues;for(const i in o){const r=o[i];if(r.location>=0){let o=a[i];if(o===undefined){if(i==="instanceMatrix"&&n.instanceMatrix)o=n.instanceMatrix;if(i==="instanceColor"&&n.instanceColor)o=n.instanceColor}if(o!==undefined){const i=o.normalized;const a=o.itemSize;const l=e.get(o);if(l===undefined)continue;const c=l.buffer;const u=l.type;const h=l.bytesPerElement;const d=u===t.INT||u===t.UNSIGNED_INT||o.gpuType===Dt;if(o.isInterleavedBufferAttribute){const e=o.data;const l=e.stride;const f=o.offset;if(e.isInstancedInterleavedBuffer){for(let t=0;t<r.locationSize;t++){_(r.location+t,e.meshPerAttribute)}if(n.isInstancedMesh!==true&&s._maxInstanceCount===undefined){s._maxInstanceCount=e.meshPerAttribute*e.count}}else{for(let t=0;t<r.locationSize;t++){g(r.location+t)}}t.bindBuffer(t.ARRAY_BUFFER,c);for(let t=0;t<r.locationSize;t++){v(r.location+t,a/r.locationSize,u,i,l*h,(f+a/r.locationSize*t)*h,d)}}else{if(o.isInstancedBufferAttribute){for(let t=0;t<r.locationSize;t++){_(r.location+t,o.meshPerAttribute)}if(n.isInstancedMesh!==true&&s._maxInstanceCount===undefined){s._maxInstanceCount=o.meshPerAttribute*o.count}}else{for(let t=0;t<r.locationSize;t++){g(r.location+t)}}t.bindBuffer(t.ARRAY_BUFFER,c);for(let t=0;t<r.locationSize;t++){v(r.location+t,a/r.locationSize,u,i,a*h,a/r.locationSize*t*h,d)}}}else if(l!==undefined){const e=l[i];if(e!==undefined){switch(e.length){case 2:t.vertexAttrib2fv(r.location,e);break;case 3:t.vertexAttrib3fv(r.location,e);break;case 4:t.vertexAttrib4fv(r.location,e);break;default:t.vertexAttrib1fv(r.location,e)}}}}}x()}function M(){T();for(const t in i){const e=i[t];for(const t in e){const n=e[t];for(const t in n){u(n[t].object);delete n[t]}delete e[t]}delete i[t]}}function S(t){if(i[t.id]===undefined)return;const e=i[t.id];for(const t in e){const n=e[t];for(const t in n){u(n[t].object);delete n[t]}delete e[t]}delete i[t.id]}function b(t){for(const e in i){const n=i[e];if(n[t.id]===undefined)continue;const r=n[t.id];for(const t in r){u(r[t].object);delete r[t]}delete n[t.id]}}function T(){E();a=true;if(s===r)return;s=r;c(s.object)}function E(){r.geometry=null;r.program=null;r.wireframe=false}return{setup:o,reset:T,resetDefaultState:E,dispose:M,releaseStatesOfGeometry:S,releaseStatesOfProgram:b,initAttributes:m,enableAttribute:g,disableUnusedAttributes:x}}function wg(t,e,n){let i;function r(t){i=t}function s(e,r){t.drawArrays(i,e,r);n.update(r,i,1)}function a(e,r,s){if(s===0)return;t.drawArraysInstanced(i,e,r,s);n.update(r,i,s)}function o(t,r,s){if(s===0)return;const a=e.get("WEBGL_multi_draw");a.multiDrawArraysWEBGL(i,t,0,r,0,s);let o=0;for(let t=0;t<s;t++){o+=r[t]}n.update(o,i,1)}function l(t,r,s,o){if(s===0)return;const l=e.get("WEBGL_multi_draw");if(l===null){for(let e=0;e<t.length;e++){a(t[e],r[e],o[e])}}else{l.multiDrawArraysInstancedWEBGL(i,t,0,r,0,o,0,s);let e=0;for(let t=0;t<s;t++){e+=r[t]*o[t]}n.update(e,i,1)}}this.setMode=r;this.render=s;this.renderInstances=a;this.renderMultiDraw=o;this.renderMultiDrawInstances=l}function Ag(t,e,n,i){let r;function s(){if(r!==undefined)return r;if(e.has("EXT_texture_filter_anisotropic")===true){const n=e.get("EXT_texture_filter_anisotropic");r=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{r=0}return r}function a(e){if(e!==Ht&&i.convert(e)!==t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT)){return false}return true}function o(n){const r=n===Ot&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));if(n!==Rt&&i.convert(n)!==t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==Nt&&!r){return false}return true}function l(e){if(e==="highp"){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0){return"highp"}e="mediump"}if(e==="mediump"){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0){return"mediump"}}return"lowp"}let c=n.precision!==undefined?n.precision:"highp";const u=l(c);if(u!==c){console.warn("THREE.WebGLRenderer:",c,"not supported, using",u,"instead.");c=u}const h=n.logarithmicDepthBuffer===true;const d=n.reverseDepthBuffer===true&&e.has("EXT_clip_control");const f=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);const p=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);const m=t.getParameter(t.MAX_TEXTURE_SIZE);const g=t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE);const _=t.getParameter(t.MAX_VERTEX_ATTRIBS);const x=t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS);const v=t.getParameter(t.MAX_VARYING_VECTORS);const y=t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS);const M=p>0;const S=t.getParameter(t.MAX_SAMPLES);return{isWebGL2:true,getMaxAnisotropy:s,getMaxPrecision:l,textureFormatReadable:a,textureTypeReadable:o,precision:c,logarithmicDepthBuffer:h,reverseDepthBuffer:d,maxTextures:f,maxVertexTextures:p,maxTextureSize:m,maxCubemapSize:g,maxAttributes:_,maxVertexUniforms:x,maxVaryings:v,maxFragmentUniforms:y,vertexTextures:M,maxSamples:S}}function Cg(t){const e=this;let n=null,i=0,r=false,s=false;const a=new Po,o=new Mi,l={value:null,needsUpdate:false};this.uniform=l;this.numPlanes=0;this.numIntersection=0;this.init=function(t,e){const n=t.length!==0||e||i!==0||r;r=e;i=t.length;return n};this.beginShadows=function(){s=true;u(null)};this.endShadows=function(){s=false};this.setGlobalState=function(t,e){n=u(t,e,0)};this.setState=function(e,a,o){const h=e.clippingPlanes,d=e.clipIntersection,f=e.clipShadows;const p=t.get(e);if(!r||h===null||h.length===0||s&&!f){if(s){u(null)}else{c()}}else{const t=s?0:i,e=t*4;let r=p.clippingState||null;l.value=r;r=u(h,a,e,o);for(let t=0;t!==e;++t){r[t]=n[t]}p.clippingState=r;this.numIntersection=d?this.numPlanes:0;this.numPlanes+=t}};function c(){if(l.value!==n){l.value=n;l.needsUpdate=i>0}e.numPlanes=i;e.numIntersection=0}function u(t,n,i,r){const s=t!==null?t.length:0;let c=null;if(s!==0){c=l.value;if(r!==true||c===null){const e=i+s*4,r=n.matrixWorldInverse;o.getNormalMatrix(r);if(c===null||c.length<e){c=new Float32Array(e)}for(let e=0,n=i;e!==s;++e,n+=4){a.copy(t[e]).applyMatrix4(r,o);a.normal.toArray(c,n);c[n+3]=a.constant}}l.value=c;l.needsUpdate=true}e.numPlanes=s;e.numIntersection=0;return c}}function Rg(t){let e=new WeakMap;function n(t,e){if(e===ft){t.mapping=ht}else if(e===pt){t.mapping=dt}return t}function i(i){if(i&&i.isTexture){const s=i.mapping;if(s===ft||s===pt){if(e.has(i)){const t=e.get(i).texture;return n(t,i.mapping)}else{const s=i.image;if(s&&s.height>0){const a=new Ca(s.height);a.fromEquirectangularTexture(t,i);e.set(i,a);i.addEventListener("dispose",r);return n(a.texture,i.mapping)}else{return null}}}}return i}function r(t){const n=t.target;n.removeEventListener("dispose",r);const i=e.get(n);if(i!==undefined){e.delete(n);i.dispose()}}function s(){e=new WeakMap}return{get:i,dispose:s}}const Ig=4;const Pg=[.125,.215,.35,.446,.526,.582];const Lg=20;const Dg=new Rh;const Ug=new vs;let Ng=null;let Og=0;let Fg=0;let Bg=false;const zg=(1+Math.sqrt(5))/2;const kg=1/zg;const Vg=[new xi(-zg,kg,0),new xi(zg,kg,0),new xi(-kg,0,zg),new xi(kg,0,zg),new xi(0,zg,-kg),new xi(0,zg,kg),new xi(-1,1,-1),new xi(1,1,-1),new xi(-1,1,1),new xi(1,1,1)];const Gg=new xi;class Hg{constructor(t){this._renderer=t;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100,r={}){const{size:s=256,position:a=Gg}=r;Ng=this._renderer.getRenderTarget();Og=this._renderer.getActiveCubeFace();Fg=this._renderer.getActiveMipmapLevel();Bg=this._renderer.xr.enabled;this._renderer.xr.enabled=false;this._setSize(s);const o=this._allocateTargets();o.depthBuffer=true;this._sceneToCubeUV(t,n,i,o,a);if(e>0){this._blur(o,0,0,e)}this._applyPMREM(o);this._cleanup(o);return o}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=Zg();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=Yg();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();if(this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){if(this._blurMaterial!==null)this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++){this._lodPlanes[t].dispose()}}_cleanup(t){this._renderer.setRenderTarget(Ng,Og,Fg);this._renderer.xr.enabled=Bg;t.scissorTest=false;jg(t,0,0,t.width,t.height)}_fromTexture(t,e){if(t.mapping===ht||t.mapping===dt){this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width)}else{this._setSize(t.image.width/4)}Ng=this._renderer.getRenderTarget();Og=this._renderer.getActiveCubeFace();Fg=this._renderer.getActiveMipmapLevel();Bg=this._renderer.xr.enabled;this._renderer.xr.enabled=false;const n=e||this._allocateTargets();this._textureToCubeUV(t,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const t=3*Math.max(this._cubeSize,16*7);const e=4*this._cubeSize;const n={magFilter:Tt,minFilter:Tt,generateMipmaps:false,type:Ot,format:Ht,colorSpace:$e,depthBuffer:false};const i=Xg(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){if(this._pingPongRenderTarget!==null){this._dispose()}this._pingPongRenderTarget=Xg(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=Wg(i));this._blurMaterial=qg(i,t,e)}return i}_compileMaterial(t){const e=new oa(this._lodPlanes[0],t);this._renderer.compile(e,Dg)}_sceneToCubeUV(t,e,n,i,r){const s=90;const a=1;const o=new ba(s,a,e,n);const l=[1,-1,1,1,1,1];const c=[1,1,1,-1,-1,-1];const u=this._renderer;const h=u.autoClear;const d=u.toneMapping;u.getClearColor(Ug);u.toneMapping=tt;u.autoClear=false;const f=new bs({name:"PMREM.Background",side:m,depthWrite:false,depthTest:false});const p=new oa(new ua,f);let g=false;const _=t.background;if(_){if(_.isColor){f.color.copy(_);t.background=null;g=true}}else{f.color.copy(Ug);g=true}for(let e=0;e<6;e++){const n=e%3;if(n===0){o.up.set(0,l[e],0);o.position.set(r.x,r.y,r.z);o.lookAt(r.x+c[e],r.y,r.z)}else if(n===1){o.up.set(0,0,l[e]);o.position.set(r.x,r.y,r.z);o.lookAt(r.x,r.y+c[e],r.z)}else{o.up.set(0,l[e],0);o.position.set(r.x,r.y,r.z);o.lookAt(r.x,r.y,r.z+c[e])}const s=this._cubeSize;jg(i,n*s,e>2?s:0,s,s);u.setRenderTarget(i);if(g){u.render(p,o)}u.render(t,o)}p.geometry.dispose();p.material.dispose();u.toneMapping=d;u.autoClear=h;t.background=_}_textureToCubeUV(t,e){const n=this._renderer;const i=t.mapping===ht||t.mapping===dt;if(i){if(this._cubemapMaterial===null){this._cubemapMaterial=Zg()}this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===false?-1:1}else{if(this._equirectMaterial===null){this._equirectMaterial=Yg()}}const r=i?this._cubemapMaterial:this._equirectMaterial;const s=new oa(this._lodPlanes[0],r);const a=r.uniforms;a["envMap"].value=t;const o=this._cubeSize;jg(e,0,0,3*o,2*o);n.setRenderTarget(e);n.render(s,Dg)}_applyPMREM(t){const e=this._renderer;const n=e.autoClear;e.autoClear=false;const i=this._lodPlanes.length;for(let e=1;e<i;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]);const r=Vg[(i-e-1)%Vg.length];this._blur(t,e-1,e,n,r)}e.autoClear=n}_blur(t,e,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,n,i,"latitudinal",r);this._halfBlur(s,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,s,a){const o=this._renderer;const l=this._blurMaterial;if(s!=="latitudinal"&&s!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const c=3;const u=new oa(this._lodPlanes[i],l);const h=l.uniforms;const d=this._sizeLods[n]-1;const f=isFinite(r)?Math.PI/(2*d):2*Math.PI/(2*Lg-1);const p=r/f;const m=isFinite(r)?1+Math.floor(c*p):Lg;if(m>Lg){console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${Lg}`)}const g=[];let _=0;for(let t=0;t<Lg;++t){const e=t/p;const n=Math.exp(-e*e/2);g.push(n);if(t===0){_+=n}else if(t<m){_+=2*n}}for(let t=0;t<g.length;t++){g[t]=g[t]/_}h["envMap"].value=t.texture;h["samples"].value=m;h["weights"].value=g;h["latitudinal"].value=s==="latitudinal";if(a){h["poleAxis"].value=a}const{_lodMax:x}=this;h["dTheta"].value=f;h["mipInt"].value=x-n;const v=this._sizeLods[i];const y=3*v*(i>x-Ig?i-x+Ig:0);const M=4*(this._cubeSize-v);jg(e,y,M,3*v,2*v);o.setRenderTarget(e);o.render(u,Dg)}}function Wg(t){const e=[];const n=[];const i=[];let r=t;const s=t-Ig+1+Pg.length;for(let a=0;a<s;a++){const s=Math.pow(2,r);n.push(s);let o=1/s;if(a>t-Ig){o=Pg[a-t+Ig-1]}else if(a===0){o=0}i.push(o);const l=1/(s-2);const c=-l;const u=1+l;const h=[c,c,u,c,u,u,c,c,u,u,c,u];const d=6;const f=6;const p=3;const m=2;const g=1;const _=new Float32Array(p*f*d);const x=new Float32Array(m*f*d);const v=new Float32Array(g*f*d);for(let t=0;t<d;t++){const e=t%3*2/3-1;const n=t>2?0:-1;const i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];_.set(i,p*f*t);x.set(h,m*f*t);const r=[t,t,t,t,t,t];v.set(r,g*f*t)}const y=new Zs;y.setAttribute("position",new Ls(_,p));y.setAttribute("uv",new Ls(x,m));y.setAttribute("faceIndex",new Ls(v,g));e.push(y);if(r>Ig){r--}}return{lodPlanes:e,sizeLods:n,sigmas:i}}function Xg(t,e,n){const i=new Zi(t,e,n);i.texture.mapping=mt;i.texture.name="PMREM.cubeUv";i.scissorTest=true;return i}function jg(t,e,n,i,r){t.viewport.set(e,n,i,r);t.scissor.set(e,n,i,r)}function qg(t,e,n){const i=new Float32Array(Lg);const r=new xi(0,1,0);const s=new xa({name:"SphericalGaussianBlur",defines:{n:Lg,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:false},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:Jg(),fragmentShader:`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,blending:_,depthTest:false,depthWrite:false});return s}function Yg(){return new xa({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Jg(),fragmentShader:`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,blending:_,depthTest:false,depthWrite:false})}function Zg(){return new xa({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Jg(),fragmentShader:`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,blending:_,depthTest:false,depthWrite:false})}function Jg(){return`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`}function Kg(t){let e=new WeakMap;let n=null;function i(i){if(i&&i.isTexture){const a=i.mapping;const o=a===ft||a===pt;const l=a===ht||a===dt;if(o||l){let a=e.get(i);const c=a!==undefined?a.texture.pmremVersion:0;if(i.isRenderTargetTexture&&i.pmremVersion!==c){if(n===null)n=new Hg(t);a=o?n.fromEquirectangular(i,a):n.fromCubemap(i,a);a.texture.pmremVersion=i.pmremVersion;e.set(i,a);return a.texture}else{if(a!==undefined){return a.texture}else{const c=i.image;if(o&&c&&c.height>0||l&&c&&r(c)){if(n===null)n=new Hg(t);a=o?n.fromEquirectangular(i):n.fromCubemap(i);a.texture.pmremVersion=i.pmremVersion;e.set(i,a);i.addEventListener("dispose",s);return a.texture}else{return null}}}}}return i}function r(t){let e=0;const n=6;for(let i=0;i<n;i++){if(t[i]!==undefined)e++}return e===n}function s(t){const n=t.target;n.removeEventListener("dispose",s);const i=e.get(n);if(i!==undefined){e.delete(n);i.dispose()}}function a(){e=new WeakMap;if(n!==null){n.dispose();n=null}}return{get:i,dispose:a}}function $g(t){const e={};function n(n){if(e[n]!==undefined){return e[n]}let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}e[n]=i;return i}return{has:function(t){return n(t)!==null},init:function(){n("EXT_color_buffer_float");n("WEBGL_clip_cull_distance");n("OES_texture_float_linear");n("EXT_color_buffer_half_float");n("WEBGL_multisampled_render_to_texture");n("WEBGL_render_shared_exponent")},get:function(t){const e=n(t);if(e===null){Ri("THREE.WebGLRenderer: "+t+" extension not supported.")}return e}}}function Qg(t,e,n,i){const r={};const s=new WeakMap;function a(t){const o=t.target;if(o.index!==null){e.remove(o.index)}for(const t in o.attributes){e.remove(o.attributes[t])}o.removeEventListener("dispose",a);delete r[o.id];const l=s.get(o);if(l){e.remove(l);s.delete(o)}i.releaseStatesOfGeometry(o);if(o.isInstancedBufferGeometry===true){delete o._maxInstanceCount}n.memory.geometries--}function o(t,e){if(r[e.id]===true)return e;e.addEventListener("dispose",a);r[e.id]=true;n.memory.geometries++;return e}function l(n,i){const r=n.attributes;for(const n in r){e.update(r[n],t.ARRAY_BUFFER,i)}}function c(t){const n=[];const i=t.index;const r=t.attributes.position;let a=0;if(i!==null){const t=i.array;a=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0];const r=t[e+1];const s=t[e+2];n.push(i,r,r,s,s,i)}}else if(r!==undefined){const t=r.array;a=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0;const i=e+1;const r=e+2;n.push(t,i,i,r,r,t)}}else{return}const o=new(bi(n)?zs:Fs)(n,1);o.version=a;const l=s.get(t);if(l)e.remove(l);s.set(t,o)}function u(t){const e=s.get(t);if(e){const n=t.index;if(n!==null){if(e.version<n.version){c(t)}}}else{c(t)}return s.get(t)}return{get:o,update:l,getWireframeAttribute:u}}function t_(t,e,n){let i;function r(t){i=t}let s,a;function o(t){s=t.type;a=t.bytesPerElement}function l(e,r){t.drawElements(i,r,s,e*a);n.update(r,i,1)}function c(e,r,o){if(o===0)return;t.drawElementsInstanced(i,r,s,e*a,o);n.update(r,i,o)}function u(t,r,a){if(a===0)return;const o=e.get("WEBGL_multi_draw");o.multiDrawElementsWEBGL(i,r,0,s,t,0,a);let l=0;for(let t=0;t<a;t++){l+=r[t]}n.update(l,i,1)}function h(t,r,o,l){if(o===0)return;const u=e.get("WEBGL_multi_draw");if(u===null){for(let e=0;e<t.length;e++){c(t[e]/a,r[e],l[e])}}else{u.multiDrawElementsInstancedWEBGL(i,r,0,s,t,0,l,0,o);let e=0;for(let t=0;t<o;t++){e+=r[t]*l[t]}n.update(e,i,1)}}this.setMode=r;this.setIndex=o;this.render=l;this.renderInstances=c;this.renderMultiDraw=u;this.renderMultiDrawInstances=h}function e_(t){const e={geometries:0,textures:0};const n={frame:0,calls:0,triangles:0,points:0,lines:0,vramAllocated:0,vramUpdated:0};function i(e,i,r){n.calls++;switch(i){case t.TRIANGLES:n.triangles+=r*(e/3);break;case t.LINES:n.lines+=r*(e/2);break;case t.LINE_STRIP:n.lines+=r*(e-1);break;case t.LINE_LOOP:n.lines+=r*e;break;case t.POINTS:n.points+=r*e;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",i);break}}function r(){n.calls=0;n.triangles=0;n.points=0;n.lines=0}return{memory:e,render:n,programs:null,autoReset:true,reset:r,update:i}}function n_(t,e,n){const i=new WeakMap;const r=new qi;function s(s,a,o){const l=s.morphTargetInfluences;const c=a.morphAttributes.position||a.morphAttributes.normal||a.morphAttributes.color;const u=c!==undefined?c.length:0;let h=i.get(a);if(h===undefined||h.count!==u){if(h!==undefined)h.texture.dispose();const d=a.morphAttributes.position!==undefined;const f=a.morphAttributes.normal!==undefined;const p=a.morphAttributes.color!==undefined;const m=a.morphAttributes.position||[];const g=a.morphAttributes.normal||[];const _=a.morphAttributes.color||[];let x=0;if(d===true)x=1;if(f===true)x=2;if(p===true)x=3;let v=a.attributes.position.count*x;let y=1;if(v>e.maxTextureSize){y=Math.ceil(v/e.maxTextureSize);v=e.maxTextureSize}const M=new Float32Array(v*y*4*u);const S=new Ji(M,v,y,u);S.type=Nt;S.needsUpdate=true;const b=x*4;for(let E=0;E<u;E++){const w=m[E];const A=g[E];const C=_[E];const R=v*y*4*E;for(let I=0;I<w.count;I++){const P=I*b;if(d===true){r.fromBufferAttribute(w,I);M[R+P+0]=r.x;M[R+P+1]=r.y;M[R+P+2]=r.z;M[R+P+3]=0}if(f===true){r.fromBufferAttribute(A,I);M[R+P+4]=r.x;M[R+P+5]=r.y;M[R+P+6]=r.z;M[R+P+7]=0}if(p===true){r.fromBufferAttribute(C,I);M[R+P+8]=r.x;M[R+P+9]=r.y;M[R+P+10]=r.z;M[R+P+11]=C.itemSize===4?r.w:1}}}h={count:u,texture:S,size:new gi(v,y)};i.set(a,h);function T(){S.dispose();i.delete(a);a.removeEventListener("dispose",T)}a.addEventListener("dispose",T)}if(s.isInstancedMesh===true&&s.morphTexture!==null){o.getUniforms().setValue(t,"morphTexture",s.morphTexture,n)}else{let L=0;for(let U=0;U<l.length;U++){L+=l[U]}const D=a.morphTargetsRelative?1:1-L;o.getUniforms().setValue(t,"morphTargetBaseInfluence",D);o.getUniforms().setValue(t,"morphTargetInfluences",l)}o.getUniforms().setValue(t,"morphTargetsTexture",h.texture,n);o.getUniforms().setValue(t,"morphTargetsTextureSize",h.size)}return{update:s}}function i_(t,e,n,i){let r=new WeakMap;function s(s){const a=i.render.frame;const l=s.geometry;const c=e.get(s,l);if(r.get(c)!==a){e.update(c,i);r.set(c,a)}if(s.isInstancedMesh){if(s.hasEventListener("dispose",o)===false){s.addEventListener("dispose",o)}if(r.get(s)!==a){n.update(s.instanceMatrix,t.ARRAY_BUFFER,i);if(s.instanceColor!==null){n.update(s.instanceColor,t.ARRAY_BUFFER,i)}r.set(s,a)}}if(s.isSkinnedMesh){const t=s.skeleton;if(r.get(t)!==a){t.update();r.set(t,a)}}return c}function a(){r=new WeakMap}function o(t){const e=t.target;e.removeEventListener("dispose",o);n.remove(e.instanceMatrix);if(e.instanceColor!==null)n.remove(e.instanceColor)}return{update:s,dispose:a}}const r_=new ji;const s_=new Ll(1,1);const a_=new Ji;const o_=new $i;const l_=new Aa;const c_=[];const u_=[];const h_=new Float32Array(16);const d_=new Float32Array(9);const f_=new Float32Array(4);function p_(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let s=c_[r];if(s===undefined){s=new Float32Array(r);c_[r]=s}if(e!==0){i.toArray(s,0);for(let i=1,r=0;i!==e;++i){r+=n;t[i].toArray(s,r)}}return s}function m_(t,e){if(t.length!==e.length)return false;for(let n=0,i=t.length;n<i;n++){if(t[n]!==e[n])return false}return true}function g_(t,e){for(let n=0,i=e.length;n<i;n++){t[n]=e[n]}}function __(t,e){let n=u_[e];if(n===undefined){n=new Int32Array(e);u_[e]=n}for(let i=0;i!==e;++i){n[i]=t.allocateTextureUnit()}return n}function x_(t,e){const n=this.cache;if(n[0]===e)return;t.uniform1f(this.addr,e);n[0]=e}function v_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y){t.uniform2f(this.addr,e.x,e.y);n[0]=e.x;n[1]=e.y}}else{if(m_(n,e))return;t.uniform2fv(this.addr,e);g_(n,e)}}function y_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z){t.uniform3f(this.addr,e.x,e.y,e.z);n[0]=e.x;n[1]=e.y;n[2]=e.z}}else if(e.r!==undefined){if(n[0]!==e.r||n[1]!==e.g||n[2]!==e.b){t.uniform3f(this.addr,e.r,e.g,e.b);n[0]=e.r;n[1]=e.g;n[2]=e.b}}else{if(m_(n,e))return;t.uniform3fv(this.addr,e);g_(n,e)}}function M_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z||n[3]!==e.w){t.uniform4f(this.addr,e.x,e.y,e.z,e.w);n[0]=e.x;n[1]=e.y;n[2]=e.z;n[3]=e.w}}else{if(m_(n,e))return;t.uniform4fv(this.addr,e);g_(n,e)}}function S_(t,e){const n=this.cache;const i=e.elements;if(i===undefined){if(m_(n,e))return;t.uniformMatrix2fv(this.addr,false,e);g_(n,e)}else{if(m_(n,i))return;f_.set(i);t.uniformMatrix2fv(this.addr,false,f_);g_(n,i)}}function b_(t,e){const n=this.cache;const i=e.elements;if(i===undefined){if(m_(n,e))return;t.uniformMatrix3fv(this.addr,false,e);g_(n,e)}else{if(m_(n,i))return;d_.set(i);t.uniformMatrix3fv(this.addr,false,d_);g_(n,i)}}function T_(t,e){const n=this.cache;const i=e.elements;if(i===undefined){if(m_(n,e))return;t.uniformMatrix4fv(this.addr,false,e);g_(n,e)}else{if(m_(n,i))return;h_.set(i);t.uniformMatrix4fv(this.addr,false,h_);g_(n,i)}}function E_(t,e){const n=this.cache;if(n[0]===e)return;t.uniform1i(this.addr,e);n[0]=e}function w_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y){t.uniform2i(this.addr,e.x,e.y);n[0]=e.x;n[1]=e.y}}else{if(m_(n,e))return;t.uniform2iv(this.addr,e);g_(n,e)}}function A_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z){t.uniform3i(this.addr,e.x,e.y,e.z);n[0]=e.x;n[1]=e.y;n[2]=e.z}}else{if(m_(n,e))return;t.uniform3iv(this.addr,e);g_(n,e)}}function C_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z||n[3]!==e.w){t.uniform4i(this.addr,e.x,e.y,e.z,e.w);n[0]=e.x;n[1]=e.y;n[2]=e.z;n[3]=e.w}}else{if(m_(n,e))return;t.uniform4iv(this.addr,e);g_(n,e)}}function R_(t,e){const n=this.cache;if(n[0]===e)return;t.uniform1ui(this.addr,e);n[0]=e}function I_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y){t.uniform2ui(this.addr,e.x,e.y);n[0]=e.x;n[1]=e.y}}else{if(m_(n,e))return;t.uniform2uiv(this.addr,e);g_(n,e)}}function P_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z){t.uniform3ui(this.addr,e.x,e.y,e.z);n[0]=e.x;n[1]=e.y;n[2]=e.z}}else{if(m_(n,e))return;t.uniform3uiv(this.addr,e);g_(n,e)}}function L_(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z||n[3]!==e.w){t.uniform4ui(this.addr,e.x,e.y,e.z,e.w);n[0]=e.x;n[1]=e.y;n[2]=e.z;n[3]=e.w}}else{if(m_(n,e))return;t.uniform4uiv(this.addr,e);g_(n,e)}}function D_(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}let s;if(this.type===t.SAMPLER_2D_SHADOW){s_.compareFunction=Mn;s=s_}else{s=r_}n.setTexture2D(e||s,r)}function U_(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}n.setTexture3D(e||o_,r)}function N_(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}n.setTextureCube(e||l_,r)}function O_(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}n.setTexture2DArray(e||a_,r)}function F_(t){switch(t){case 5126:return x_;case 35664:return v_;case 35665:return y_;case 35666:return M_;case 35674:return S_;case 35675:return b_;case 35676:return T_;case 5124:case 35670:return E_;case 35667:case 35671:return w_;case 35668:case 35672:return A_;case 35669:case 35673:return C_;case 5125:return R_;case 36294:return I_;case 36295:return P_;case 36296:return L_;case 35678:case 36198:case 36298:case 36306:case 35682:return D_;case 35679:case 36299:case 36307:return U_;case 35680:case 36300:case 36308:case 36293:return N_;case 36289:case 36303:case 36311:case 36292:return O_}}function B_(t,e){t.uniform1fv(this.addr,e)}function z_(t,e){const n=p_(e,this.size,2);t.uniform2fv(this.addr,n)}function k_(t,e){const n=p_(e,this.size,3);t.uniform3fv(this.addr,n)}function V_(t,e){const n=p_(e,this.size,4);t.uniform4fv(this.addr,n)}function G_(t,e){const n=p_(e,this.size,4);t.uniformMatrix2fv(this.addr,false,n)}function H_(t,e){const n=p_(e,this.size,9);t.uniformMatrix3fv(this.addr,false,n)}function W_(t,e){const n=p_(e,this.size,16);t.uniformMatrix4fv(this.addr,false,n)}function X_(t,e){t.uniform1iv(this.addr,e)}function j_(t,e){t.uniform2iv(this.addr,e)}function q_(t,e){t.uniform3iv(this.addr,e)}function Y_(t,e){t.uniform4iv(this.addr,e)}function Z_(t,e){t.uniform1uiv(this.addr,e)}function J_(t,e){t.uniform2uiv(this.addr,e)}function K_(t,e){t.uniform3uiv(this.addr,e)}function $_(t,e){t.uniform4uiv(this.addr,e)}function Q_(t,e,n){const i=this.cache;const r=e.length;const s=__(n,r);if(!m_(i,s)){t.uniform1iv(this.addr,s);g_(i,s)}for(let t=0;t!==r;++t){n.setTexture2D(e[t]||r_,s[t])}}function tx(t,e,n){const i=this.cache;const r=e.length;const s=__(n,r);if(!m_(i,s)){t.uniform1iv(this.addr,s);g_(i,s)}for(let t=0;t!==r;++t){n.setTexture3D(e[t]||o_,s[t])}}function ex(t,e,n){const i=this.cache;const r=e.length;const s=__(n,r);if(!m_(i,s)){t.uniform1iv(this.addr,s);g_(i,s)}for(let t=0;t!==r;++t){n.setTextureCube(e[t]||l_,s[t])}}function nx(t,e,n){const i=this.cache;const r=e.length;const s=__(n,r);if(!m_(i,s)){t.uniform1iv(this.addr,s);g_(i,s)}for(let t=0;t!==r;++t){n.setTexture2DArray(e[t]||a_,s[t])}}function ix(t){switch(t){case 5126:return B_;case 35664:return z_;case 35665:return k_;case 35666:return V_;case 35674:return G_;case 35675:return H_;case 35676:return W_;case 5124:case 35670:return X_;case 35667:case 35671:return j_;case 35668:case 35672:return q_;case 35669:case 35673:return Y_;case 5125:return Z_;case 36294:return J_;case 36295:return K_;case 36296:return $_;case 35678:case 36198:case 36298:case 36306:case 35682:return Q_;case 35679:case 36299:case 36307:return tx;case 35680:case 36300:case 36308:case 36293:return ex;case 36289:case 36303:case 36311:case 36292:return nx}}class rx{constructor(t,e,n){this.id=t;this.addr=n;this.cache=[];this.type=e.type;this.setValue=F_(e.type)}}class sx{constructor(t,e,n){this.id=t;this.addr=n;this.cache=[];this.type=e.type;this.size=e.size;this.setValue=ix(e.type)}}class ax{constructor(t){this.id=t;this.seq=[];this.map={}}setValue(t,e,n){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const s=i[r];s.setValue(t,e[s.id],n)}}}const ox=/(\w+)(\])?(\[|\.)?/g;function lx(t,e){t.seq.push(e);t.map[e.id]=e}function cx(t,e,n){const i=t.name,r=i.length;ox.lastIndex=0;while(true){const s=ox.exec(i),a=ox.lastIndex;let o=s[1];const l=s[2]==="]",c=s[3];if(l)o=o|0;if(c===undefined||c==="["&&a+2===r){lx(n,c===undefined?new rx(o,t,e):new sx(o,t,e));break}else{const t=n.map;let e=t[o];if(e===undefined){e=new ax(o);lx(n,e)}n=e}}}class ux{constructor(t,e){this.seq=[];this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i),r=t.getUniformLocation(e,n.name);cx(n,r,this)}}setValue(t,e,n,i){const r=this.map[e];if(r!==undefined)r.setValue(t,n,i)}setOptional(t,e,n){const i=e[n];if(i!==undefined)this.setValue(t,n,i)}static upload(t,e,n,i){for(let r=0,s=e.length;r!==s;++r){const s=e[r],a=n[s.id];if(a.needsUpdate!==false){s.setValue(t,a.value,i)}}}static seqWithValue(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];if(r.id in e)n.push(r)}return n}}function hx(t,e,n){const i=t.createShader(e);t.shaderSource(i,n);t.compileShader(i);return i}const dx=37297;let fx=0;function px(t,e){const n=t.split("\n");const i=[];const r=Math.max(e-6,0);const s=Math.min(e+6,n.length);for(let t=r;t<s;t++){const r=t+1;i.push(`${r===e?">":" "} ${r}: ${n[t]}`)}return i.join("\n")}const mx=new Mi;function gx(t){Oi._getMatrix(mx,Oi.workingColorSpace,t);const e=`mat3( ${mx.elements.map(t=>t.toFixed(4))} )`;switch(Oi.getTransfer(t)){case Qe:return[e,"LinearTransferOETF"];case tn:return[e,"sRGBTransferOETF"];default:console.warn("THREE.WebGLProgram: Unsupported color space: ",t);return[e,"LinearTransferOETF"]}}function _x(t,e,n){const i=t.getShaderParameter(e,t.COMPILE_STATUS);const r=t.getShaderInfoLog(e).trim();if(i&&r==="")return"";const s=/ERROR: 0:(\d+)/.exec(r);if(s){const i=parseInt(s[1]);return n.toUpperCase()+"\n\n"+r+"\n\n"+px(t.getShaderSource(e),i)}else{return r}}function xx(t,e){const n=gx(e);return[`vec4 ${t}( vec4 value ) {`,`\treturn ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join("\n")}function vx(t,e){let n;switch(e){case et:n="Linear";break;case nt:n="Reinhard";break;case it:n="Cineon";break;case rt:n="ACESFilmic";break;case at:n="AgX";break;case ot:n="Neutral";break;case st:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e);n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const yx=new xi;function Mx(){Oi.getLuminanceCoefficients(yx);const t=yx.x.toFixed(4);const e=yx.y.toFixed(4);const n=yx.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${t}, ${e}, ${n} );`,"\treturn dot( weights, rgb );","}"].join("\n")}function Sx(t){const e=[t.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",t.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""];return e.filter(Ex).join("\n")}function bx(t){const e=[];for(const n in t){const i=t[n];if(i===false)continue;e.push("#define "+n+" "+i)}return e.join("\n")}function Tx(t,e){const n={};const i=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r);const s=i.name;let a=1;if(i.type===t.FLOAT_MAT2)a=2;if(i.type===t.FLOAT_MAT3)a=3;if(i.type===t.FLOAT_MAT4)a=4;n[s]={type:i.type,location:t.getAttribLocation(e,s),locationSize:a}}return n}function Ex(t){return t!==""}function wx(t,e){const n=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Ax(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Cx=/^[ \t]*#include +<([\w\d./]+)>/gm;function Rx(t){return t.replace(Cx,Px)}const Ix=new Map;function Px(t,e){let n=xg[e];if(n===undefined){const t=Ix.get(e);if(t!==undefined){n=xg[t];console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,t)}else{throw new Error("Can not resolve #include <"+e+">")}}return Rx(n)}const Lx=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Dx(t){return t.replace(Lx,Ux)}function Ux(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++){r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t)}return r}function Nx(t){let e=`precision ${t.precision} float;\n\tprecision ${t.precision} int;\n\tprecision ${t.precision} sampler2D;\n\tprecision ${t.precision} samplerCube;\n\tprecision ${t.precision} sampler3D;\n\tprecision ${t.precision} sampler2DArray;\n\tprecision ${t.precision} sampler2DShadow;\n\tprecision ${t.precision} samplerCubeShadow;\n\tprecision ${t.precision} sampler2DArrayShadow;\n\tprecision ${t.precision} isampler2D;\n\tprecision ${t.precision} isampler3D;\n\tprecision ${t.precision} isamplerCube;\n\tprecision ${t.precision} isampler2DArray;\n\tprecision ${t.precision} usampler2D;\n\tprecision ${t.precision} usampler3D;\n\tprecision ${t.precision} usamplerCube;\n\tprecision ${t.precision} usampler2DArray;\n\t`;if(t.precision==="highp"){e+="\n#define HIGH_PRECISION"}else if(t.precision==="mediump"){e+="\n#define MEDIUM_PRECISION"}else if(t.precision==="lowp"){e+="\n#define LOW_PRECISION"}return e}function Ox(t){let e="SHADOWMAP_TYPE_BASIC";if(t.shadowMapType===h){e="SHADOWMAP_TYPE_PCF"}else if(t.shadowMapType===d){e="SHADOWMAP_TYPE_PCF_SOFT"}else if(t.shadowMapType===f){e="SHADOWMAP_TYPE_VSM"}return e}function Fx(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap){switch(t.envMapMode){case ht:case dt:e="ENVMAP_TYPE_CUBE";break;case mt:e="ENVMAP_TYPE_CUBE_UV";break}}return e}function Bx(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap){switch(t.envMapMode){case dt:e="ENVMAP_MODE_REFRACTION";break}}return e}function zx(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap){switch(t.combine){case K:e="ENVMAP_BLENDING_MULTIPLY";break;case $:e="ENVMAP_BLENDING_MIX";break;case Q:e="ENVMAP_BLENDING_ADD";break}}return e}function kx(t){const e=t.envMapCubeUVHeight;if(e===null)return null;const n=Math.log2(e)-2;const i=1/e;const r=1/(3*Math.max(Math.pow(2,n),7*16));return{texelWidth:r,texelHeight:i,maxMip:n}}function Vx(t,e,n,i){const r=t.getContext();const s=n.defines;let a=n.vertexShader;let o=n.fragmentShader;const l=Ox(n);const c=Fx(n);const u=Bx(n);const h=zx(n);const d=kx(n);const f=Sx(n);const p=bx(s);const m=r.createProgram();let g,_;let x=n.glslVersion?"#version "+n.glslVersion+"\n":"";if(n.isRawShaderMaterial){g=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,p].filter(Ex).join("\n");if(g.length>0){g+="\n"}_=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,p].filter(Ex).join("\n");if(_.length>0){_+="\n"}}else{g=[Nx(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,p,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.clusterInstanceDataMap?"#define USE_DATATEXTURE":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.isPointCloud?"#define POINT_CLOUD":"",n.pointCloudGroups?"#define POINT_CLOUD_GROUPS "+n.pointCloudGroups:"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&n.flatShading===false?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===false?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","uniform int useVertexColors;","uniform float pointSize;","#ifdef USE_DATATEXTURE","\tattribute float clusterInstance;","\tuniform bool useDataTexture;","\t#define uOccurrenceTexelWidth (1.0 / 2048.0)","\t#define uOccurrenceTexelHeight (1.0 / 2048.0)","\t#define uHalfTexelWidth (0.5 * uOccurrenceTexelWidth)","\tuniform sampler2D specularMap;","\tvarying mediump vec3 colorFromDataTexture;","#endif //USE_DATATEXTURE","#ifdef POINT_CLOUD_GROUPS","\tuniform mat4 pointCloudGroupMatrices[POINT_CLOUD_GROUPS];","\tuniform vec4 pointCloudGroupColors[POINT_CLOUD_GROUPS];","\tvarying lowp vec4 pointCloudGroupColor;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Ex).join("\n");_=[Nx(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,p,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+u:"",n.envMap?"#define "+h:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.clusterInstanceDataMap?"#define USE_DATATEXTURE":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.isPointCloud?"#define POINT_CLOUD":"",n.pointCloudGroups?"#define POINT_CLOUD_GROUPS":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&n.flatShading===false?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.missingNormals?"#define MISSING_NORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_DATATEXTURE","\tvarying mediump vec3 colorFromDataTexture;","#endif //USE_DATATEXTURE","#ifdef POINT_CLOUD_GROUPS","\tvarying lowp vec4 pointCloudGroupColor;","#endif",n.toneMapping!==tt?"#define TONE_MAPPING":"",n.toneMapping!==tt?xg["tonemapping_pars_fragment"]:"",n.toneMapping!==tt?vx("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",xg["colorspace_pars_fragment"],xx("linearToOutputTexel",n.outputColorSpace),Mx(),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Ex).join("\n")}a=Rx(a);a=wx(a,n);a=Ax(a,n);o=Rx(o);o=wx(o,n);o=Ax(o,n);a=Dx(a);o=Dx(o);if(n.isRawShaderMaterial!==true){x="#version 300 es\n";g=[f,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g;_=["#define varying in",n.glslVersion===On?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===On?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_}const v=x+g+a;const y=x+_+o;const M=hx(r,r.VERTEX_SHADER,v);const S=hx(r,r.FRAGMENT_SHADER,y);r.attachShader(m,M);r.attachShader(m,S);if(n.index0AttributeName!==undefined){r.bindAttribLocation(m,0,n.index0AttributeName)}else if(n.morphTargets===true){r.bindAttribLocation(m,0,"position")}r.linkProgram(m);function b(e){if(t.debug.checkShaderErrors){const n=r.getProgramInfoLog(m).trim();const i=r.getShaderInfoLog(M).trim();const s=r.getShaderInfoLog(S).trim();let a=true;let o=true;if(r.getProgramParameter(m,r.LINK_STATUS)===false){a=false;if(typeof t.debug.onShaderError==="function"){t.debug.onShaderError(r,m,M,S)}else{const t=_x(r,M,"vertex");const i=_x(r,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - "+"VALIDATE_STATUS "+r.getProgramParameter(m,r.VALIDATE_STATUS)+"\n\n"+"Material Name: "+e.name+"\n"+"Material Type: "+e.type+"\n\n"+"Program Info Log: "+n+"\n"+t+"\n"+i)}}else if(n!==""){console.warn("THREE.WebGLProgram: Program Info Log:",n)}else if(i===""||s===""){o=false}if(o){e.diagnostics={runnable:a,programLog:n,vertexShader:{log:i,prefix:g},fragmentShader:{log:s,prefix:_}}}}r.deleteShader(M);r.deleteShader(S);T=new ux(r,m);E=Tx(r,m)}let T;this.getUniforms=function(){if(T===undefined){b(this)}return T};let E;this.getAttributes=function(){if(E===undefined){b(this)}return E};let w=n.rendererExtensionParallelShaderCompile===false;this.isReady=function(){if(w===false){w=r.getProgramParameter(m,dx)}return w};this.destroy=function(){i.releaseStatesOfProgram(this);r.deleteProgram(m);this.program=undefined};this.type=n.shaderType;this.name=n.shaderName;this.id=fx++;this.cacheKey=e;this.usedTimes=1;this.program=m;this.vertexShader=M;this.fragmentShader=S;return this}let Gx=0;class Hx{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(t){const e=t.vertexShader;const n=t.fragmentShader;const i=this._getShaderStage(e);const r=this._getShaderStage(n);const s=this._getShaderCacheForMaterial(t);if(s.has(i)===false){s.add(i);i.usedTimes++}if(s.has(r)===false){s.add(r);r.usedTimes++}return this}remove(t){const e=this.materialCache.get(t);for(const t of e){t.usedTimes--;if(t.usedTimes===0)this.shaderCache.delete(t.code)}this.materialCache.delete(t);return this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);if(n===undefined){n=new Set;e.set(t,n)}return n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);if(n===undefined){n=new Wx(t);e.set(t,n)}return n}}class Wx{constructor(t){this.id=Gx++;this.code=t;this.usedTimes=0}}function Xx(t,e,n,i,r,s,a){const o=new Br;const l=new Hx;const c=new Set;const u=[];const h=r.logarithmicDepthBuffer;const d=r.vertexTextures;let f=r.precision;const p={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(t){c.add(t);if(t===0)return"uv";return`uv${t}`}function v(s,o,u,v,y){const M=v.fog;const S=y.geometry;const b=s.isMeshStandardMaterial?v.environment:null;const T=(s.isMeshStandardMaterial?n:e).get(s.envMap||b);const E=!!T&&T.mapping===mt?T.image.height:null;const w=p[s.type];if(s.precision!==null){f=r.getMaxPrecision(s.precision);if(f!==s.precision){console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",f,"instead.")}}const A=S.morphAttributes.position||S.morphAttributes.normal||S.morphAttributes.color;const C=A!==undefined?A.length:0;let R=0;if(S.morphAttributes.position!==undefined)R=1;if(S.morphAttributes.normal!==undefined)R=2;if(S.morphAttributes.color!==undefined)R=3;let I,P;let L,D;if(w){const t=yg[w];I=t.vertexShader;P=t.fragmentShader}else{I=s.vertexShader;P=s.fragmentShader;l.update(s);L=l.getVertexShaderID(s);D=l.getFragmentShaderID(s)}const U=!!S.userData.isPointCloud;const N=U&&v.userData&&v.userData.pointCloudGroupMatrices&&v.userData.pointCloudGroupMatrices.length||0;const O=t.getRenderTarget();const F=t.state.buffers.depth.getReversed();const B=y.isInstancedMesh===true;const z=y.isBatchedMesh===true;const k=!!s.map;const V=!!s.matcap;const G=!!T;const H=!!s.aoMap;const W=!!s.lightMap;const X=!!s.bumpMap;const j=!!s.normalMap;const q=!!s.displacementMap;const Y=!!s.emissiveMap;const Z=!!s.metalnessMap;const J=!!s.roughnessMap;const K=s.anisotropy>0;const $=s.clearcoat>0;const Q=s.dispersion>0;const et=s.iridescence>0;const nt=s.sheen>0;const it=s.transmission>0;const rt=K&&!!s.anisotropyMap;const st=$&&!!s.clearcoatMap;const at=$&&!!s.clearcoatNormalMap;const ot=$&&!!s.clearcoatRoughnessMap;const lt=et&&!!s.iridescenceMap;const ct=et&&!!s.iridescenceThicknessMap;const ut=nt&&!!s.sheenColorMap;const ht=nt&&!!s.sheenRoughnessMap;const dt=s.specularMap&&!s.specularMap.isDataTexture;const ft=s.specularMap&&s.specularMap.isDataTexture;const pt=!!s.specularColorMap;const gt=!!s.specularIntensityMap;const _t=it&&!!s.transmissionMap;const xt=it&&!!s.thicknessMap;const vt=!!s.gradientMap;const yt=!!s.alphaMap;const Mt=s.alphaTest>0;const St=!!s.alphaHash;const bt=!!s.extensions;let Tt=tt;if(s.toneMapped){if(O===null||O.isXRRenderTarget===true){Tt=t.toneMapping}}const Et={shaderID:w,shaderType:s.type,shaderName:s.name,vertexShader:I,fragmentShader:P,defines:s.defines,customVertexShaderID:L,customFragmentShaderID:D,isRawShaderMaterial:s.isRawShaderMaterial===true,glslVersion:s.glslVersion,precision:f,batching:z,batchingColor:z&&y._colorsTexture!==null,instancing:B,instancingColor:B&&y.instanceColor!==null,instancingMorph:B&&y.morphTexture!==null,supportsVertexTextures:d,outputColorSpace:O===null?t.outputColorSpace:O.isXRRenderTarget===true?O.texture.colorSpace:$e,alphaToCoverage:!!s.alphaToCoverage,map:k&&!!S.attributes.uv,matcap:V,envMap:G,envMapMode:G&&T.mapping,envMapCubeUVHeight:E,aoMap:H,lightMap:W,bumpMap:X,normalMap:j,displacementMap:d&&q,emissiveMap:Y,normalMapObjectSpace:j&&s.normalMapType===Ze,normalMapTangentSpace:j&&s.normalMapType===Ye,metalnessMap:Z,roughnessMap:J,anisotropy:K,anisotropyMap:rt,clearcoat:$,clearcoatMap:st,clearcoatNormalMap:at,clearcoatRoughnessMap:ot,dispersion:Q,iridescence:et,iridescenceMap:lt,iridescenceThicknessMap:ct,sheen:nt,sheenColorMap:ut,sheenRoughnessMap:ht,specularMap:dt,clusterInstanceDataMap:ft,specularColorMap:pt,specularIntensityMap:gt,isPointCloud:U,pointCloudGroups:N,transmission:it,transmissionMap:_t,thicknessMap:xt,gradientMap:vt,opaque:s.transparent===false&&s.blending===x&&s.alphaToCoverage===false,alphaMap:yt,alphaTest:Mt,alphaHash:St,combine:s.combine,mapUv:k&&_(s.map.channel),aoMapUv:H&&_(s.aoMap.channel),lightMapUv:W&&_(s.lightMap.channel),bumpMapUv:X&&_(s.bumpMap.channel),normalMapUv:j&&_(s.normalMap.channel),displacementMapUv:q&&_(s.displacementMap.channel),emissiveMapUv:Y&&_(s.emissiveMap.channel),metalnessMapUv:Z&&_(s.metalnessMap.channel),roughnessMapUv:J&&_(s.roughnessMap.channel),anisotropyMapUv:rt&&_(s.anisotropyMap.channel),clearcoatMapUv:st&&_(s.clearcoatMap.channel),clearcoatNormalMapUv:at&&_(s.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ot&&_(s.clearcoatRoughnessMap.channel),iridescenceMapUv:lt&&_(s.iridescenceMap.channel),iridescenceThicknessMapUv:ct&&_(s.iridescenceThicknessMap.channel),sheenColorMapUv:ut&&_(s.sheenColorMap.channel),sheenRoughnessMapUv:ht&&_(s.sheenRoughnessMap.channel),specularMapUv:dt&&_(s.specularMap.channel),specularColorMapUv:pt&&_(s.specularColorMap.channel),specularIntensityMapUv:gt&&_(s.specularIntensityMap.channel),transmissionMapUv:_t&&_(s.transmissionMap.channel),thicknessMapUv:xt&&_(s.thicknessMap.channel),alphaMapUv:yt&&_(s.alphaMap.channel),vertexTangents:!!S.attributes.tangent&&(j||K),vertexColors:s.vertexColors,vertexAlphas:s.vertexColors===true&&!!S.attributes.color&&S.attributes.color.itemSize===4,missingNormals:S.attributes.normal===undefined,pointsUvs:y.isPoints===true&&!!S.attributes.uv&&(k||yt),fog:!!M,useFog:s.fog===true,fogExp2:!!M&&M.isFogExp2,flatShading:s.flatShading===true&&s.wireframe===false,sizeAttenuation:s.sizeAttenuation===true,logarithmicDepthBuffer:h,reverseDepthBuffer:F,skinning:y.isSkinnedMesh===true,morphTargets:S.morphAttributes.position!==undefined,morphNormals:S.morphAttributes.normal!==undefined,morphColors:S.morphAttributes.color!==undefined,morphTargetsCount:C,morphTextureStride:R,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numSpotLightMaps:o.spotLightMap.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numSpotLightShadowsWithMaps:o.numSpotLightShadowsWithMaps,numLightProbes:o.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:s.dithering,shadowMapEnabled:t.shadowMap.enabled&&u.length>0,shadowMapType:t.shadowMap.type,toneMapping:Tt,decodeVideoTexture:k&&s.map.isVideoTexture===true&&Oi.getTransfer(s.map.colorSpace)===tn,decodeVideoTextureEmissive:Y&&s.emissiveMap.isVideoTexture===true&&Oi.getTransfer(s.emissiveMap.colorSpace)===tn,premultipliedAlpha:s.premultipliedAlpha,doubleSided:s.side===g,flipSided:s.side===m,useDepthPacking:s.depthPacking>=0,depthPacking:s.depthPacking||0,index0AttributeName:s.index0AttributeName,extensionClipCullDistance:bt&&s.extensions.clipCullDistance===true&&i.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(bt&&s.extensions.multiDraw===true||z)&&i.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:s.customProgramCacheKey()};Et.vertexUv1s=c.has(1);Et.vertexUv2s=c.has(2);Et.vertexUv3s=c.has(3);c.clear();return Et}function y(e){const n=[];if(e.shaderID){n.push(e.shaderID)}else{n.push(e.customVertexShaderID);n.push(e.customFragmentShaderID)}if(e.defines!==undefined){for(const t in e.defines){n.push(t);n.push(e.defines[t])}}if(e.isRawShaderMaterial===false){M(n,e);S(n,e);n.push(t.outputColorSpace)}n.push(e.customProgramCacheKey);return n.join()}function M(t,e){t.push(e.precision);t.push(e.outputColorSpace);t.push(e.envMapMode);t.push(e.envMapCubeUVHeight);t.push(e.mapUv);t.push(e.alphaMapUv);t.push(e.lightMapUv);t.push(e.aoMapUv);t.push(e.bumpMapUv);t.push(e.normalMapUv);t.push(e.displacementMapUv);t.push(e.emissiveMapUv);t.push(e.metalnessMapUv);t.push(e.roughnessMapUv);t.push(e.anisotropyMapUv);t.push(e.clearcoatMapUv);t.push(e.clearcoatNormalMapUv);t.push(e.clearcoatRoughnessMapUv);t.push(e.iridescenceMapUv);t.push(e.iridescenceThicknessMapUv);t.push(e.sheenColorMapUv);t.push(e.sheenRoughnessMapUv);t.push(e.specularMapUv);t.push(e.specularColorMapUv);t.push(e.specularIntensityMapUv);t.push(e.transmissionMapUv);t.push(e.thicknessMapUv);t.push(e.combine);t.push(e.fogExp2);t.push(e.sizeAttenuation);t.push(e.morphTargetsCount);t.push(e.morphAttributeCount);t.push(e.numDirLights);t.push(e.numPointLights);t.push(e.numSpotLights);t.push(e.numSpotLightMaps);t.push(e.numHemiLights);t.push(e.numRectAreaLights);t.push(e.numDirLightShadows);t.push(e.numPointLightShadows);t.push(e.numSpotLightShadows);t.push(e.numSpotLightShadowsWithMaps);t.push(e.numLightProbes);t.push(e.shadowMapType);t.push(e.toneMapping);t.push(e.numClippingPlanes);t.push(e.numClipIntersection);t.push(e.depthPacking);t.push(e.isPointCloud);t.push(e.pointCloudGroups);t.push(e.missingNormals)}function S(t,e){o.disableAll();if(e.supportsVertexTextures)o.enable(0);if(e.instancing)o.enable(1);if(e.instancingColor)o.enable(2);if(e.instancingMorph)o.enable(3);if(e.matcap)o.enable(4);if(e.envMap)o.enable(5);if(e.normalMapObjectSpace)o.enable(6);if(e.normalMapTangentSpace)o.enable(7);if(e.clearcoat)o.enable(8);if(e.iridescence)o.enable(9);if(e.alphaTest)o.enable(10);if(e.vertexColors)o.enable(11);if(e.vertexAlphas)o.enable(12);if(e.vertexUv1s)o.enable(13);if(e.vertexUv2s)o.enable(14);if(e.vertexUv3s)o.enable(15);if(e.vertexTangents)o.enable(16);if(e.anisotropy)o.enable(17);if(e.alphaHash)o.enable(18);if(e.batching)o.enable(19);if(e.dispersion)o.enable(20);if(e.batchingColor)o.enable(21);if(e.gradientMap)o.enable(22);t.push(o.mask);o.disableAll();if(e.fog)o.enable(0);if(e.useFog)o.enable(1);if(e.flatShading)o.enable(2);if(e.logarithmicDepthBuffer)o.enable(3);if(e.reverseDepthBuffer)o.enable(4);if(e.skinning)o.enable(5);if(e.morphTargets)o.enable(6);if(e.morphNormals)o.enable(7);if(e.morphColors)o.enable(8);if(e.premultipliedAlpha)o.enable(9);if(e.shadowMapEnabled)o.enable(10);if(e.doubleSided)o.enable(11);if(e.flipSided)o.enable(12);if(e.useDepthPacking)o.enable(13);if(e.dithering)o.enable(14);if(e.transmission)o.enable(15);if(e.sheen)o.enable(16);if(e.opaque)o.enable(17);if(e.pointsUvs)o.enable(18);if(e.decodeVideoTexture)o.enable(19);if(e.decodeVideoTextureEmissive)o.enable(20);if(e.alphaToCoverage)o.enable(21);t.push(o.mask)}function b(t){const e=p[t.type];let n;if(e){const t=yg[e];n=ma.clone(t.uniforms)}else{n=t.uniforms}return n}function T(e,n){let i;for(let t=0,e=u.length;t<e;t++){const e=u[t];if(e.cacheKey===n){i=e;++i.usedTimes;break}}if(i===undefined){i=new Vx(t,n,e,s);u.push(i)}return i}function E(t){if(--t.usedTimes===0){const e=u.indexOf(t);u[e]=u[u.length-1];u.pop();t.destroy()}}function w(t){l.remove(t)}function A(){l.dispose()}return{getParameters:v,getProgramCacheKey:y,getUniforms:b,acquireProgram:T,releaseProgram:E,releaseShaderCache:w,programs:u,dispose:A}}function jx(){let t=new WeakMap;function e(e){return t.has(e)}function n(e){let n=t.get(e);if(n===undefined){n={};t.set(e,n)}return n}function i(e){t.delete(e)}function r(e,n,i){t.get(e)[n]=i}function s(){t=new WeakMap}return{has:e,get:n,remove:i,update:r,dispose:s}}function qx(t,e){if(t.groupOrder!==e.groupOrder){return t.groupOrder-e.groupOrder}else if(t.renderOrder!==e.renderOrder){return t.renderOrder-e.renderOrder}else if(t.material.id!==e.material.id){return t.material.id-e.material.id}else if(t.z!==e.z){return t.z-e.z}else{return t.id-e.id}}function Yx(t,e){if(t.groupOrder!==e.groupOrder){return t.groupOrder-e.groupOrder}else if(t.renderOrder!==e.renderOrder){return t.renderOrder-e.renderOrder}else if(t.z!==e.z){return e.z-t.z}else{return t.id-e.id}}function Zx(){const t=[];let e=0;const n=[];const i=[];const r=[];let s=false;function a(t){e=0;n.length=0;i.length=0;r.length=0;s=t}function o(n,i,r,s,a,o){let l=t[e];if(l===undefined){l={id:n.id,object:n,geometry:i,material:r,groupOrder:s,renderOrder:n.renderOrder,z:a,group:o};t[e]=l}else{l.id=n.id;l.object=n;l.geometry=i;l.material=r;l.groupOrder=s;l.renderOrder=n.renderOrder;l.z=a;l.group=o}e++;return l}function l(t,e,a,l,c,u){if(!s||t.userData.renderGroup===undefined){const s=o(t,e,a,l,c,u);if(a.transmission>0){i.push(s)}else if(a.transparent===true){r.push(s)}else{n.push(s)}}}function c(t,e,s,a,l,c){const u=o(t,e,s,a,l,c);if(s.transmission>0){i.unshift(u)}else if(s.transparent===true){r.unshift(u)}else{n.unshift(u)}}function u(t,e){if(n.length>1)n.sort(t||qx);if(i.length>1)i.sort(e||Yx);if(r.length>1)r.sort(e||Yx)}function h(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(e.id===null)break;e.id=null;e.object=null;e.geometry=null;e.material=null;e.group=null}}return{opaque:n,transmissive:i,transparent:r,init:a,push:l,unshift:c,finish:h,sort:u}}function Jx(){let t=new WeakMap;function e(e,n){const i=t.get(e);let r;if(i===undefined){r=new Zx;t.set(e,[r])}else{if(n>=i.length){r=new Zx;i.push(r)}else{r=i[n]}}return r}function n(){t=new WeakMap}return{get:e,dispose:n}}function Kx(){const t={};return{get:function(e){if(t[e.id]!==undefined){return t[e.id]}let n;switch(e.type){case"DirectionalLight":n={direction:new xi,color:new vs};break;case"SpotLight":n={position:new xi,direction:new xi,color:new vs,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new xi,color:new vs,distance:0,decay:0};break;case"HemisphereLight":n={direction:new xi,skyColor:new vs,groundColor:new vs};break;case"RectAreaLight":n={color:new vs,position:new xi,halfWidth:new xi,halfHeight:new xi};break}t[e.id]=n;return n}}}function $x(){const t={};return{get:function(e){if(t[e.id]!==undefined){return t[e.id]}let n;switch(e.type){case"DirectionalLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new gi};break;case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new gi};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new gi,shadowCameraNear:1,shadowCameraFar:1e3};break}t[e.id]=n;return n}}}let Qx=0;function tv(t,e){return(e.castShadow?2:0)-(t.castShadow?2:0)+(e.map?1:0)-(t.map?1:0)}function ev(t){const e=new Kx;const n=$x();const i={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let t=0;t<9;t++)i.probe.push(new xi);const r=new xi;const s=new Ar;const a=new Ar;function o(r){let s=0,a=0,o=0;for(let t=0;t<9;t++)i.probe[t].set(0,0,0);let l=0;let c=0;let u=0;let h=0;let d=0;let f=0;let p=0;let m=0;let g=0;let _=0;let x=0;r.sort(tv);for(let t=0,v=r.length;t<v;t++){const v=r[t];const y=v.color;const M=v.intensity;const S=v.distance;const b=v.shadow&&v.shadow.map?v.shadow.map.texture:null;if(v.isAmbientLight){s+=y.r*M;a+=y.g*M;o+=y.b*M}else if(v.isLightProbe){for(let t=0;t<9;t++){i.probe[t].addScaledVector(v.sh.coefficients[t],M)}x++}else if(v.isDirectionalLight){const t=e.get(v);t.color.copy(v.color).multiplyScalar(v.intensity);if(v.castShadow){const t=v.shadow;const e=n.get(v);e.shadowIntensity=t.intensity;e.shadowBias=t.bias;e.shadowNormalBias=t.normalBias;e.shadowRadius=t.radius;e.shadowMapSize=t.mapSize;i.directionalShadow[l]=e;i.directionalShadowMap[l]=b;i.directionalShadowMatrix[l]=v.shadow.matrix;f++}i.directional[l]=t;l++}else if(v.isSpotLight){const t=e.get(v);t.position.setFromMatrixPosition(v.matrixWorld);t.color.copy(y).multiplyScalar(M);t.distance=S;t.coneCos=Math.cos(v.angle);t.penumbraCos=Math.cos(v.angle*(1-v.penumbra));t.decay=v.decay;i.spot[u]=t;const r=v.shadow;if(v.map){i.spotLightMap[g]=v.map;g++;r.updateMatrices(v);if(v.castShadow)_++}i.spotLightMatrix[u]=r.matrix;if(v.castShadow){const t=n.get(v);t.shadowIntensity=r.intensity;t.shadowBias=r.bias;t.shadowNormalBias=r.normalBias;t.shadowRadius=r.radius;t.shadowMapSize=r.mapSize;i.spotShadow[u]=t;i.spotShadowMap[u]=b;m++}u++}else if(v.isRectAreaLight){const t=e.get(v);t.color.copy(y).multiplyScalar(M);t.halfWidth.set(v.width*.5,0,0);t.halfHeight.set(0,v.height*.5,0);i.rectArea[h]=t;h++}else if(v.isPointLight){const t=e.get(v);t.color.copy(v.color).multiplyScalar(v.intensity);t.distance=v.distance;t.decay=v.decay;if(v.castShadow){const t=v.shadow;const e=n.get(v);e.shadowIntensity=t.intensity;e.shadowBias=t.bias;e.shadowNormalBias=t.normalBias;e.shadowRadius=t.radius;e.shadowMapSize=t.mapSize;e.shadowCameraNear=t.camera.near;e.shadowCameraFar=t.camera.far;i.pointShadow[c]=e;i.pointShadowMap[c]=b;i.pointShadowMatrix[c]=v.shadow.matrix;p++}i.point[c]=t;c++}else if(v.isHemisphereLight){const t=e.get(v);t.skyColor.copy(v.color).multiplyScalar(M);t.groundColor.copy(v.groundColor).multiplyScalar(M);i.hemi[d]=t;d++}}if(h>0){if(t.has("OES_texture_float_linear")===true){i.rectAreaLTC1=vg.LTC_FLOAT_1;i.rectAreaLTC2=vg.LTC_FLOAT_2}else{i.rectAreaLTC1=vg.LTC_HALF_1;i.rectAreaLTC2=vg.LTC_HALF_2}}i.ambient[0]=s;i.ambient[1]=a;i.ambient[2]=o;const v=i.hash;if(v.directionalLength!==l||v.pointLength!==c||v.spotLength!==u||v.rectAreaLength!==h||v.hemiLength!==d||v.numDirectionalShadows!==f||v.numPointShadows!==p||v.numSpotShadows!==m||v.numSpotMaps!==g||v.numLightProbes!==x){i.directional.length=l;i.spot.length=u;i.rectArea.length=h;i.point.length=c;i.hemi.length=d;i.directionalShadow.length=f;i.directionalShadowMap.length=f;i.pointShadow.length=p;i.pointShadowMap.length=p;i.spotShadow.length=m;i.spotShadowMap.length=m;i.directionalShadowMatrix.length=f;i.pointShadowMatrix.length=p;i.spotLightMatrix.length=m+g-_;i.spotLightMap.length=g;i.numSpotLightShadowsWithMaps=_;i.numLightProbes=x;v.directionalLength=l;v.pointLength=c;v.spotLength=u;v.rectAreaLength=h;v.hemiLength=d;v.numDirectionalShadows=f;v.numPointShadows=p;v.numSpotShadows=m;v.numSpotMaps=g;v.numLightProbes=x;i.version=Qx++}}function l(t,e){let n=0;let o=0;let l=0;let c=0;let u=0;const h=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=i.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld);r.setFromMatrixPosition(d.target.matrixWorld);t.direction.sub(r);t.direction.transformDirection(h);n++}else if(d.isSpotLight){const t=i.spot[l];t.position.setFromMatrixPosition(d.matrixWorld);t.position.applyMatrix4(h);t.direction.setFromMatrixPosition(d.matrixWorld);r.setFromMatrixPosition(d.target.matrixWorld);t.direction.sub(r);t.direction.transformDirection(h);l++}else if(d.isRectAreaLight){const t=i.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld);t.position.applyMatrix4(h);a.identity();s.copy(d.matrixWorld);s.premultiply(h);a.extractRotation(s);t.halfWidth.set(d.width*.5,0,0);t.halfHeight.set(0,d.height*.5,0);t.halfWidth.applyMatrix4(a);t.halfHeight.applyMatrix4(a);c++}else if(d.isPointLight){const t=i.point[o];t.position.setFromMatrixPosition(d.matrixWorld);t.position.applyMatrix4(h);o++}else if(d.isHemisphereLight){const t=i.hemi[u];t.direction.setFromMatrixPosition(d.matrixWorld);t.direction.transformDirection(h);u++}}}return{setup:o,setupView:l,state:i}}function nv(t){const e=new ev(t);const n=[];const i=[];function r(t){c.camera=t;n.length=0;i.length=0}function s(t){n.push(t)}function a(t){i.push(t)}function o(){e.setup(n)}function l(t){e.setupView(n,t)}const c={lightsArray:n,shadowsArray:i,camera:null,lights:e,transmissionRenderTarget:{}};return{init:r,state:c,setupLights:o,setupLightsView:l,pushLight:s,pushShadow:a}}function iv(t){let e=new WeakMap;function n(n,i=0){const r=e.get(n);let s;if(r===undefined){s=new nv(t);e.set(n,[s])}else{if(i>=r.length){s=new nv(t);r.push(s)}else{s=r[i]}}return s}function i(){e=new WeakMap}return{get:n,dispose:i}}const rv="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";const sv="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function av(t,e,n){let i=new No;const r=new gi,s=new gi,a=new qi,o=new Ru({depthPacking:Xe}),l=new Iu,c={},u=n.maxTextureSize;const d={[p]:m,[m]:p,[g]:g};const x=new xa({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new gi},radius:{value:4}},vertexShader:rv,fragmentShader:sv});const v=x.clone();v.defines.HORIZONTAL_PASS=1;const y=new Zs;y.setAttribute("position",new Ls(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const M=new oa(y,x);const S=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=h;let b=this.type;this.render=function(e,n,o){if(S.enabled===false)return;if(S.autoUpdate===false&&S.needsUpdate===false)return;if(e.length===0)return;const l=t.getRenderTarget();const c=t.getActiveCubeFace();const h=t.getActiveMipmapLevel();const d=t.state;d.setBlending(_);d.buffers.color.setClear(1,1,1,1);d.buffers.depth.setTest(true);d.setScissorTest(false);const p=b!==f&&this.type===f;const m=b===f&&this.type!==f;for(let l=0,c=e.length;l<c;l++){const c=e[l];const h=c.shadow;if(h===undefined){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(h.autoUpdate===false&&h.needsUpdate===false)continue;r.copy(h.mapSize);const g=h.getFrameExtents();r.multiply(g);s.copy(h.mapSize);if(r.x>u||r.y>u){if(r.x>u){s.x=Math.floor(u/g.x);r.x=s.x*g.x;h.mapSize.x=s.x}if(r.y>u){s.y=Math.floor(u/g.y);r.y=s.y*g.y;h.mapSize.y=s.y}}if(h.map===null||p===true||m===true){const t=this.type!==f?{minFilter:vt,magFilter:vt}:{};if(h.map!==null){h.map.dispose()}h.map=new Zi(r.x,r.y,t);h.map.texture.name=c.name+".shadowMap";h.camera.updateProjectionMatrix()}t.setRenderTarget(h.map);t.clear();const _=h.getViewportCount();for(let t=0;t<_;t++){const e=h.getViewport(t);a.set(s.x*e.x,s.y*e.y,s.x*e.z,s.y*e.w);d.viewport(a);h.updateMatrices(c,t);i=h.getFrustum();w(n,o,h.camera,c,this.type)}if(h.isPointLightShadow!==true&&this.type===f){T(h,o)}h.needsUpdate=false}b=this.type;S.needsUpdate=false;t.setRenderTarget(l,c,h)};function T(n,i){const s=e.update(M);if(x.defines.VSM_SAMPLES!==n.blurSamples){x.defines.VSM_SAMPLES=n.blurSamples;v.defines.VSM_SAMPLES=n.blurSamples;x.needsUpdate=true;v.needsUpdate=true}if(n.mapPass===null){n.mapPass=new Zi(r.x,r.y)}x.uniforms.shadow_pass.value=n.map.texture;x.uniforms.resolution.value=n.mapSize;x.uniforms.radius.value=n.radius;t.setRenderTarget(n.mapPass);t.clear();t.renderBufferDirect(i,null,s,x,M,null);v.uniforms.shadow_pass.value=n.mapPass.texture;v.uniforms.resolution.value=n.mapSize;v.uniforms.radius.value=n.radius;t.setRenderTarget(n.map);t.clear();t.renderBufferDirect(i,null,s,v,M,null)}function E(e,n,i,r){let s=null;const a=i.isPointLight===true?e.customDistanceMaterial:e.customDepthMaterial;if(a!==undefined){s=a}else{s=i.isPointLight===true?l:o;if(t.localClippingEnabled&&n.clipShadows===true&&Array.isArray(n.clippingPlanes)&&n.clippingPlanes.length!==0||n.displacementMap&&n.displacementScale!==0||n.alphaMap&&n.alphaTest>0||n.map&&n.alphaTest>0||n.alphaToCoverage===true){const t=s.uuid,e=n.uuid;let i=c[t];if(i===undefined){i={};c[t]=i}let r=i[e];if(r===undefined){r=s.clone();i[e]=r;n.addEventListener("dispose",A)}s=r}}s.visible=n.visible;s.wireframe=n.wireframe;if(r===f){s.side=n.shadowSide!==null?n.shadowSide:n.side}else{s.side=n.shadowSide!==null?n.shadowSide:d[n.side]}s.alphaMap=n.alphaMap;s.alphaTest=n.alphaToCoverage===true?.5:n.alphaTest;s.map=n.map;s.clipShadows=n.clipShadows;s.clippingPlanes=n.clippingPlanes;s.clipIntersection=n.clipIntersection;s.displacementMap=n.displacementMap;s.displacementScale=n.displacementScale;s.displacementBias=n.displacementBias;s.wireframeLinewidth=n.wireframeLinewidth;s.linewidth=n.linewidth;if(i.isPointLight===true&&s.isMeshDistanceMaterial===true){const e=t.properties.get(s);e.light=i}return s}function w(n,r,s,a,o){if(n.visible===false)return;const l=n.layers.test(r.layers);if(l&&(n.isMesh||n.isLine||n.isPoints)){if((n.castShadow||n.receiveShadow&&o===f)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,n.matrixWorld);const i=e.update(n);const l=n.material;if(Array.isArray(l)){const e=i.groups;for(let c=0,u=e.length;c<u;c++){const u=e[c];const h=l[u.materialIndex];if(h&&h.visible){const e=E(n,h,a,o);n.onBeforeShadow(t,n,r,s,i,e,u);t.renderBufferDirect(s,null,i,e,n,u);n.onAfterShadow(t,n,r,s,i,e,u)}}}else if(l.visible){const e=E(n,l,a,o);n.onBeforeShadow(t,n,r,s,i,e,null);const c=n.userData.renderGroup;t.renderBufferDirect(s,null,i,e,n,c?c:null);n.onAfterShadow(t,n,r,s,i,e,null)}}}const c=n.children;for(let t=0,e=c.length;t<e;t++){w(c[t],r,s,a,o)}}function A(t){const e=t.target;e.removeEventListener("dispose",A);for(const e in c){const n=c[e];const i=t.target.uuid;if(i in n){const t=n[i];t.dispose();delete n[i]}}}}const ov={[H]:W,[X]:Z,[q]:J,[j]:Y,[W]:H,[Z]:X,[J]:q,[Y]:j};function lv(t,e){function n(){let e=false;const n=new qi;let i=null;const r=new qi(0,0,0,0);return{setMask:function(n){if(i!==n&&!e){t.colorMask(n,n,n,n);i=n}},setLocked:function(t){e=t},setClear:function(e,i,s,a,o){if(o===true){e*=a;i*=a;s*=a}n.set(e,i,s,a);if(r.equals(n)===false){t.clearColor(e,i,s,a);r.copy(n)}},reset:function(){e=false;i=null;r.set(-1,0,0,0)}}}function i(){let n=false;let i=false;let r=null;let s=null;let a=null;return{setReversed:function(t){if(i!==t){const n=e.get("EXT_clip_control");if(t){n.clipControlEXT(n.LOWER_LEFT_EXT,n.ZERO_TO_ONE_EXT)}else{n.clipControlEXT(n.LOWER_LEFT_EXT,n.NEGATIVE_ONE_TO_ONE_EXT)}i=t;const r=a;a=null;this.setClear(r)}},getReversed:function(){return i},setTest:function(e){if(e){Ct(t.DEPTH_TEST)}else{Rt(t.DEPTH_TEST)}},setMask:function(e){if(r!==e&&!n){t.depthMask(e);r=e}},setFunc:function(e){if(i)e=ov[e];if(s!==e){switch(e){case H:t.depthFunc(t.NEVER);break;case W:t.depthFunc(t.ALWAYS);break;case X:t.depthFunc(t.LESS);break;case j:t.depthFunc(t.LEQUAL);break;case q:t.depthFunc(t.EQUAL);break;case Y:t.depthFunc(t.GEQUAL);break;case Z:t.depthFunc(t.GREATER);break;case J:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}s=e}},setLocked:function(t){n=t},setClear:function(e){if(a!==e){if(i){e=1-e}t.clearDepth(e);a=e}},reset:function(){n=false;r=null;s=null;a=null;i=false}}}function r(){let e=false;let n=null;let i=null;let r=null;let s=null;let a=null;let o=null;let l=null;let c=null;return{setTest:function(n){if(!e){if(n){Ct(t.STENCIL_TEST)}else{Rt(t.STENCIL_TEST)}}},setMask:function(i){if(n!==i&&!e){t.stencilMask(i);n=i}},setFunc:function(e,n,a){if(i!==e||r!==n||s!==a){t.stencilFunc(e,n,a);i=e;r=n;s=a}},setOp:function(e,n,i){if(a!==e||o!==n||l!==i){t.stencilOp(e,n,i);a=e;o=n;l=i}},setLocked:function(t){e=t},setClear:function(e){if(c!==e){t.clearStencil(e);c=e}},reset:function(){e=false;n=null;i=null;r=null;s=null;a=null;o=null;l=null;c=null}}}const s=new n;const c=new i;const u=new r;const h=new WeakMap;const d=new WeakMap;let f={};let p={};let K=new WeakMap;let $=[];let Q=null;let tt=false;let et=null;let nt=null;let it=null;let rt=null;let st=null;let at=null;let ot=null;let lt=new vs(0,0,0);let ct=0;let ut=false;let ht=null;let dt=null;let ft=null;let pt=null;let mt=null;const gt=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let _t=false;let xt=0;const vt=t.getParameter(t.VERSION);if(vt.indexOf("WebGL")!==-1){xt=parseFloat(/^WebGL (\d)/.exec(vt)[1]);_t=xt>=1}else if(vt.indexOf("OpenGL ES")!==-1){xt=parseFloat(/^OpenGL ES (\d)/.exec(vt)[1]);_t=xt>=2}let yt=null;let Mt={};const St=t.getParameter(t.SCISSOR_BOX);const bt=t.getParameter(t.VIEWPORT);const Tt=(new qi).fromArray(St);const Et=(new qi).fromArray(bt);function wt(e,n,i,r){const s=new Uint8Array(4);const a=t.createTexture();t.bindTexture(e,a);t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST);t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(let a=0;a<i;a++){if(e===t.TEXTURE_3D||e===t.TEXTURE_2D_ARRAY){t.texImage3D(n,0,t.RGBA,1,1,r,0,t.RGBA,t.UNSIGNED_BYTE,s)}else{t.texImage2D(n+a,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,s)}}return a}const At={};At[t.TEXTURE_2D]=wt(t.TEXTURE_2D,t.TEXTURE_2D,1);At[t.TEXTURE_CUBE_MAP]=wt(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6);At[t.TEXTURE_2D_ARRAY]=wt(t.TEXTURE_2D_ARRAY,t.TEXTURE_2D_ARRAY,1,1);At[t.TEXTURE_3D]=wt(t.TEXTURE_3D,t.TEXTURE_3D,1,1);s.setClear(0,0,0,1);c.setClear(1);u.setClear(0);Ct(t.DEPTH_TEST);c.setFunc(j);Ft(false);Bt(o);Ct(t.CULL_FACE);Nt(_);function Ct(e){if(f[e]!==true){t.enable(e);f[e]=true}}function Rt(e){if(f[e]!==false){t.disable(e);f[e]=false}}function It(e,n){if(p[e]!==n){t.bindFramebuffer(e,n);p[e]=n;if(e===t.DRAW_FRAMEBUFFER){p[t.FRAMEBUFFER]=n}if(e===t.FRAMEBUFFER){p[t.DRAW_FRAMEBUFFER]=n}return true}return false}function Pt(e,n){let i=$;let r=false;if(e){i=K.get(n);if(i===undefined){i=[];K.set(n,i)}const s=e.textures;if(i.length!==s.length||i[0]!==t.COLOR_ATTACHMENT0){for(let e=0,n=s.length;e<n;e++){i[e]=t.COLOR_ATTACHMENT0+e}i.length=s.length;r=true}}else{if(i[0]!==t.BACK){i[0]=t.BACK;r=true}}if(r){t.drawBuffers(i)}}function Lt(e){if(Q!==e){t.useProgram(e);Q=e;return true}return false}const Dt={[b]:t.FUNC_ADD,[T]:t.FUNC_SUBTRACT,[E]:t.FUNC_REVERSE_SUBTRACT};Dt[w]=t.MIN;Dt[A]=t.MAX;const Ut={[C]:t.ZERO,[R]:t.ONE,[I]:t.SRC_COLOR,[L]:t.SRC_ALPHA,[B]:t.SRC_ALPHA_SATURATE,[O]:t.DST_COLOR,[U]:t.DST_ALPHA,[P]:t.ONE_MINUS_SRC_COLOR,[D]:t.ONE_MINUS_SRC_ALPHA,[F]:t.ONE_MINUS_DST_COLOR,[N]:t.ONE_MINUS_DST_ALPHA,[z]:t.CONSTANT_COLOR,[k]:t.ONE_MINUS_CONSTANT_COLOR,[V]:t.CONSTANT_ALPHA,[G]:t.ONE_MINUS_CONSTANT_ALPHA};function Nt(e,n,i,r,s,a,o,l,c,u){if(e===_){if(tt===true){Rt(t.BLEND);tt=false}return}if(tt===false){Ct(t.BLEND);tt=true}if(e!==S){if(e!==et||u!==ut){if(nt!==b||st!==b){t.blendEquation(t.FUNC_ADD);nt=b;st=b}if(u){switch(e){case x:t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case v:t.blendFunc(t.ONE,t.ONE);break;case y:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case M:t.blendFuncSeparate(t.DST_COLOR,t.ONE_MINUS_SRC_ALPHA,t.ZERO,t.ONE);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}else{switch(e){case x:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case v:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE,t.ONE,t.ONE);break;case y:console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");break;case M:console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}it=null;rt=null;at=null;ot=null;lt.set(0,0,0);ct=0;et=e;ut=u}return}s=s||n;a=a||i;o=o||r;if(n!==nt||s!==st){t.blendEquationSeparate(Dt[n],Dt[s]);nt=n;st=s}if(i!==it||r!==rt||a!==at||o!==ot){t.blendFuncSeparate(Ut[i],Ut[r],Ut[a],Ut[o]);it=i;rt=r;at=a;ot=o}if(l.equals(lt)===false||c!==ct){t.blendColor(l.r,l.g,l.b,c);lt.copy(l);ct=c}et=e;ut=false}function Ot(e,n){e.side===g?Rt(t.CULL_FACE):Ct(t.CULL_FACE);let i=e.side===m;if(n)i=!i;Ft(i);e.blending===x&&e.transparent===false?Nt(_):Nt(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.blendColor,e.blendAlpha,e.premultipliedAlpha);c.setFunc(e.depthFunc);c.setTest(e.depthTest);c.setMask(e.depthWrite);s.setMask(e.colorWrite);const r=e.stencilWrite;u.setTest(r);if(r){u.setMask(e.stencilWriteMask);u.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask);u.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)}kt(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits);e.alphaToCoverage===true?Ct(t.SAMPLE_ALPHA_TO_COVERAGE):Rt(t.SAMPLE_ALPHA_TO_COVERAGE)}function Ft(e){if(ht!==e){if(e){t.frontFace(t.CW)}else{t.frontFace(t.CCW)}ht=e}}function Bt(e){if(e!==a){Ct(t.CULL_FACE);if(e!==dt){if(e===o){t.cullFace(t.BACK)}else if(e===l){t.cullFace(t.FRONT)}else{t.cullFace(t.FRONT_AND_BACK)}}}else{Rt(t.CULL_FACE)}dt=e}function zt(e){if(e!==ft){if(_t)t.lineWidth(e);ft=e}}function kt(e,n,i){if(e){Ct(t.POLYGON_OFFSET_FILL);if(pt!==n||mt!==i){t.polygonOffset(n,i);pt=n;mt=i}}else{Rt(t.POLYGON_OFFSET_FILL)}}function Vt(e){if(e){Ct(t.SCISSOR_TEST)}else{Rt(t.SCISSOR_TEST)}}function Gt(e){if(e===undefined)e=t.TEXTURE0+gt-1;if(yt!==e){t.activeTexture(e);yt=e}}function Ht(e,n,i){if(i===undefined){if(yt===null){i=t.TEXTURE0+gt-1}else{i=yt}}let r=Mt[i];if(r===undefined){r={type:undefined,texture:undefined};Mt[i]=r}if(r.type!==e||r.texture!==n){if(yt!==i){t.activeTexture(i);yt=i}t.bindTexture(e,n||At[e]);r.type=e;r.texture=n}}function Wt(){const e=Mt[yt];if(e!==undefined&&e.type!==undefined){t.bindTexture(e.type,null);e.type=undefined;e.texture=undefined}}function Xt(){try{t.compressedTexImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function jt(){try{t.compressedTexImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function qt(){try{t.texSubImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function Yt(){try{t.texSubImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function Zt(){try{t.compressedTexSubImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function Jt(){try{t.compressedTexSubImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function Kt(){try{t.texStorage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function $t(){try{t.texStorage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function Qt(){try{t.texImage2D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function te(){try{t.texImage3D(...arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function ee(e){if(Tt.equals(e)===false){t.scissor(e.x,e.y,e.z,e.w);Tt.copy(e)}}function ne(e){if(Et.equals(e)===false){t.viewport(e.x,e.y,e.z,e.w);Et.copy(e)}}function ie(e,n){let i=d.get(n);if(i===undefined){i=new WeakMap;d.set(n,i)}let r=i.get(e);if(r===undefined){r=t.getUniformBlockIndex(n,e.name);i.set(e,r)}}function re(e,n){const i=d.get(n);const r=i.get(e);if(h.get(n)!==r){t.uniformBlockBinding(n,r,e.__bindingPointIndex);h.set(n,r)}}function se(){t.disable(t.BLEND);t.disable(t.CULL_FACE);t.disable(t.DEPTH_TEST);t.disable(t.POLYGON_OFFSET_FILL);t.disable(t.SCISSOR_TEST);t.disable(t.STENCIL_TEST);t.disable(t.SAMPLE_ALPHA_TO_COVERAGE);t.blendEquation(t.FUNC_ADD);t.blendFunc(t.ONE,t.ZERO);t.blendFuncSeparate(t.ONE,t.ZERO,t.ONE,t.ZERO);t.blendColor(0,0,0,0);t.colorMask(true,true,true,true);t.clearColor(0,0,0,0);t.depthMask(true);t.depthFunc(t.LESS);c.setReversed(false);t.clearDepth(1);t.stencilMask(4294967295);t.stencilFunc(t.ALWAYS,0,4294967295);t.stencilOp(t.KEEP,t.KEEP,t.KEEP);t.clearStencil(0);t.cullFace(t.BACK);t.frontFace(t.CCW);t.polygonOffset(0,0);t.activeTexture(t.TEXTURE0);t.bindFramebuffer(t.FRAMEBUFFER,null);t.bindFramebuffer(t.DRAW_FRAMEBUFFER,null);t.bindFramebuffer(t.READ_FRAMEBUFFER,null);t.useProgram(null);t.lineWidth(1);t.scissor(0,0,t.canvas.width,t.canvas.height);t.viewport(0,0,t.canvas.width,t.canvas.height);f={};yt=null;Mt={};p={};K=new WeakMap;$=[];Q=null;tt=false;et=null;nt=null;it=null;rt=null;st=null;at=null;ot=null;lt=new vs(0,0,0);ct=0;ut=false;ht=null;dt=null;ft=null;pt=null;mt=null;Tt.set(0,0,t.canvas.width,t.canvas.height);Et.set(0,0,t.canvas.width,t.canvas.height);s.reset();c.reset();u.reset()}return{buffers:{color:s,depth:c,stencil:u},enable:Ct,disable:Rt,bindFramebuffer:It,drawBuffers:Pt,useProgram:Lt,setBlending:Nt,setMaterial:Ot,setFlipSided:Ft,setCullFace:Bt,setLineWidth:zt,setPolygonOffset:kt,setScissorTest:Vt,activeTexture:Gt,bindTexture:Ht,unbindTexture:Wt,compressedTexImage2D:Xt,compressedTexImage3D:jt,texImage2D:Qt,texImage3D:te,updateUBOMapping:ie,uniformBlockBinding:re,texStorage2D:Kt,texStorage3D:$t,texSubImage2D:qt,texSubImage3D:Yt,compressedTexSubImage2D:Zt,compressedTexSubImage3D:Jt,scissor:ee,viewport:ne,reset:se}}function cv(t,e,n,i,r,s,a){const o=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null;const l=typeof navigator==="undefined"?false:/OculusBrowser/g.test(navigator.userAgent);const c=new gi;const u=new WeakMap;let h;const d=new WeakMap;let f=false;try{f=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(t){}function p(t,e){return f?new OffscreenCanvas(t,e):wi("canvas")}function m(t,e,n){let i=1;const r=nt(t);if(r.width>n||r.height>n){i=n/Math.max(r.width,r.height)}if(i<1){if(typeof HTMLImageElement!=="undefined"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&t instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&t instanceof ImageBitmap||typeof VideoFrame!=="undefined"&&t instanceof VideoFrame){const n=Math.floor(i*r.width);const s=Math.floor(i*r.height);if(h===undefined)h=p(n,s);const a=e?p(n,s):h;a.width=n;a.height=s;const o=a.getContext("2d");o.drawImage(t,0,0,n,s);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+n+"x"+s+").");return a}else{if("data"in t){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+").")}return t}}return t}function g(t){return t.generateMipmaps}function _(e){t.generateMipmap(e)}function x(e){if(e.isWebGLCubeRenderTarget)return t.TEXTURE_CUBE_MAP;if(e.isWebGL3DRenderTarget)return t.TEXTURE_3D;if(e.isWebGLArrayRenderTarget||e.isCompressedArrayTexture)return t.TEXTURE_2D_ARRAY;return t.TEXTURE_2D}function v(n,i,r,s,a=false){if(n!==null){if(t[n]!==undefined)return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let o=i;if(i===t.RED){if(r===t.FLOAT)o=t.R32F;if(r===t.HALF_FLOAT)o=t.R16F;if(r===t.UNSIGNED_BYTE)o=t.R8}if(i===t.RED_INTEGER){if(r===t.UNSIGNED_BYTE)o=t.R8UI;if(r===t.UNSIGNED_SHORT)o=t.R16UI;if(r===t.UNSIGNED_INT)o=t.R32UI;if(r===t.BYTE)o=t.R8I;if(r===t.SHORT)o=t.R16I;if(r===t.INT)o=t.R32I}if(i===t.RG){if(r===t.FLOAT)o=t.RG32F;if(r===t.HALF_FLOAT)o=t.RG16F;if(r===t.UNSIGNED_BYTE)o=t.RG8}if(i===t.RG_INTEGER){if(r===t.UNSIGNED_BYTE)o=t.RG8UI;if(r===t.UNSIGNED_SHORT)o=t.RG16UI;if(r===t.UNSIGNED_INT)o=t.RG32UI;if(r===t.BYTE)o=t.RG8I;if(r===t.SHORT)o=t.RG16I;if(r===t.INT)o=t.RG32I}if(i===t.RGB_INTEGER){if(r===t.UNSIGNED_BYTE)o=t.RGB8UI;if(r===t.UNSIGNED_SHORT)o=t.RGB16UI;if(r===t.UNSIGNED_INT)o=t.RGB32UI;if(r===t.BYTE)o=t.RGB8I;if(r===t.SHORT)o=t.RGB16I;if(r===t.INT)o=t.RGB32I}if(i===t.RGBA_INTEGER){if(r===t.UNSIGNED_BYTE)o=t.RGBA8UI;if(r===t.UNSIGNED_SHORT)o=t.RGBA16UI;if(r===t.UNSIGNED_INT)o=t.RGBA32UI;if(r===t.BYTE)o=t.RGBA8I;if(r===t.SHORT)o=t.RGBA16I;if(r===t.INT)o=t.RGBA32I}if(i===t.RGB){if(r===t.UNSIGNED_INT_5_9_9_9_REV)o=t.RGB9_E5}if(i===t.RGBA){const e=a?Qe:Oi.getTransfer(s);if(r===t.FLOAT)o=t.RGBA32F;if(r===t.HALF_FLOAT)o=t.RGBA16F;if(r===t.UNSIGNED_BYTE)o=e===tn?t.SRGB8_ALPHA8:t.RGBA8;if(r===t.UNSIGNED_SHORT_4_4_4_4)o=t.RGBA4;if(r===t.UNSIGNED_SHORT_5_5_5_1)o=t.RGB5_A1}if(o===t.R16F||o===t.R32F||o===t.RG16F||o===t.RG32F||o===t.RGBA16F||o===t.RGBA32F){e.get("EXT_color_buffer_float")}return o}function y(e,n){let i;if(e){if(n===null||n===Ut||n===zt){i=t.DEPTH24_STENCIL8}else if(n===Nt){i=t.DEPTH32F_STENCIL8}else if(n===Lt){i=t.DEPTH24_STENCIL8;console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")}}else{if(n===null||n===Ut||n===zt){i=t.DEPTH_COMPONENT24}else if(n===Nt){i=t.DEPTH_COMPONENT32F}else if(n===Lt){i=t.DEPTH_COMPONENT16}}return i}function M(t,e){if(g(t)===true||t.isFramebufferTexture&&t.minFilter!==vt&&t.minFilter!==Tt){return Math.log2(Math.max(e.width,e.height))+1}else if(t.mipmaps!==undefined&&t.mipmaps.length>0){return t.mipmaps.length}else if(t.isCompressedTexture&&Array.isArray(t.image)){return e.mipmaps.length}else{return 1}}function S(t){const e=t.target;e.removeEventListener("dispose",S);T(e);if(e.isVideoTexture){u.delete(e)}}function b(t){const e=t.target;e.removeEventListener("dispose",b);w(e)}function T(t){const e=i.get(t);if(e.__webglInit===undefined)return;const n=t.source;const r=d.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--;if(i.usedTimes===0){E(t)}if(Object.keys(r).length===0){d.delete(n)}}i.remove(t)}function E(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;const s=d.get(r);delete s[n.__cacheKey];a.memory.textures--}function w(e){const n=i.get(e);if(e.depthTexture){e.depthTexture.dispose();i.remove(e.depthTexture)}if(e.isWebGLCubeRenderTarget){for(let e=0;e<6;e++){if(Array.isArray(n.__webglFramebuffer[e])){for(let i=0;i<n.__webglFramebuffer[e].length;i++)t.deleteFramebuffer(n.__webglFramebuffer[e][i])}else{t.deleteFramebuffer(n.__webglFramebuffer[e])}if(n.__webglDepthbuffer)t.deleteRenderbuffer(n.__webglDepthbuffer[e])}}else{if(Array.isArray(n.__webglFramebuffer)){for(let e=0;e<n.__webglFramebuffer.length;e++)t.deleteFramebuffer(n.__webglFramebuffer[e])}else{t.deleteFramebuffer(n.__webglFramebuffer)}if(n.__webglDepthbuffer)t.deleteRenderbuffer(n.__webglDepthbuffer);if(n.__webglMultisampledFramebuffer)t.deleteFramebuffer(n.__webglMultisampledFramebuffer);if(n.__webglColorRenderbuffer){for(let e=0;e<n.__webglColorRenderbuffer.length;e++){if(n.__webglColorRenderbuffer[e])t.deleteRenderbuffer(n.__webglColorRenderbuffer[e])}}if(n.__webglDepthRenderbuffer)t.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const r=e.textures;for(let e=0,n=r.length;e<n;e++){const n=i.get(r[e]);if(n.__webglTexture){t.deleteTexture(n.__webglTexture);a.memory.textures--}i.remove(r[e])}i.remove(e)}let A=0;function C(){A=0}function R(){const t=A;if(t>=r.maxTextures){console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+r.maxTextures)}A+=1;return t}function I(t){const e=[];e.push(t.wrapS);e.push(t.wrapT);e.push(t.wrapR||0);e.push(t.magFilter);e.push(t.minFilter);e.push(t.anisotropy);e.push(t.internalFormat);e.push(t.format);e.push(t.type);e.push(t.generateMipmaps);e.push(t.premultiplyAlpha);e.push(t.flipY);e.push(t.unpackAlignment);e.push(t.colorSpace);return e.join()}function P(e,r){const s=i.get(e);if(e.isVideoTexture)tt(e);if(e.isRenderTargetTexture===false&&e.version>0&&s.__version!==e.version){const t=e.image;if(t===null){console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.")}else if(t.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{k(s,e,r);return}}n.bindTexture(t.TEXTURE_2D,s.__webglTexture,t.TEXTURE0+r)}function L(e,r){const s=i.get(e);if(e.version>0&&s.__version!==e.version){k(s,e,r);return}n.bindTexture(t.TEXTURE_2D_ARRAY,s.__webglTexture,t.TEXTURE0+r)}function D(e,r){const s=i.get(e);if(e.version>0&&s.__version!==e.version){k(s,e,r);return}n.bindTexture(t.TEXTURE_3D,s.__webglTexture,t.TEXTURE0+r)}function U(e,r){const s=i.get(e);if(e.version>0&&s.__version!==e.version){V(s,e,r);return}n.bindTexture(t.TEXTURE_CUBE_MAP,s.__webglTexture,t.TEXTURE0+r)}const N={[gt]:t.REPEAT,[_t]:t.CLAMP_TO_EDGE,[xt]:t.MIRRORED_REPEAT};const O={[vt]:t.NEAREST,[yt]:t.NEAREST_MIPMAP_NEAREST,[St]:t.NEAREST_MIPMAP_LINEAR,[Tt]:t.LINEAR,[Et]:t.LINEAR_MIPMAP_NEAREST,[At]:t.LINEAR_MIPMAP_LINEAR};const F={[xn]:t.NEVER,[En]:t.ALWAYS,[vn]:t.LESS,[Mn]:t.LEQUAL,[yn]:t.EQUAL,[Tn]:t.GEQUAL,[Sn]:t.GREATER,[bn]:t.NOTEQUAL};function B(n,s){if(s.type===Nt&&e.has("OES_texture_float_linear")===false&&(s.magFilter===Tt||s.magFilter===Et||s.magFilter===St||s.magFilter===At||s.minFilter===Tt||s.minFilter===Et||s.minFilter===St||s.minFilter===At)){console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.")}t.texParameteri(n,t.TEXTURE_WRAP_S,N[s.wrapS]);t.texParameteri(n,t.TEXTURE_WRAP_T,N[s.wrapT]);if(n===t.TEXTURE_3D||n===t.TEXTURE_2D_ARRAY){t.texParameteri(n,t.TEXTURE_WRAP_R,N[s.wrapR])}t.texParameteri(n,t.TEXTURE_MAG_FILTER,O[s.magFilter]);t.texParameteri(n,t.TEXTURE_MIN_FILTER,O[s.minFilter]);if(s.compareFunction){t.texParameteri(n,t.TEXTURE_COMPARE_MODE,t.COMPARE_REF_TO_TEXTURE);t.texParameteri(n,t.TEXTURE_COMPARE_FUNC,F[s.compareFunction])}if(e.has("EXT_texture_filter_anisotropic")===true){if(s.magFilter===vt)return;if(s.minFilter!==St&&s.minFilter!==At)return;if(s.type===Nt&&e.has("OES_texture_float_linear")===false)return;if(s.anisotropy>1||i.get(s).__currentAnisotropy){const a=e.get("EXT_texture_filter_anisotropic");t.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,r.getMaxAnisotropy()));i.get(s).__currentAnisotropy=s.anisotropy}}}function z(e,n){let i=false;if(e.__webglInit===undefined){e.__webglInit=true;n.addEventListener("dispose",S)}const r=n.source;let s=d.get(r);if(s===undefined){s={};d.set(r,s)}const o=I(n);if(o!==e.__cacheKey){if(s[o]===undefined){s[o]={texture:t.createTexture(),usedTimes:0};a.memory.textures++;i=true}s[o].usedTimes++;const r=s[e.__cacheKey];if(r!==undefined){s[e.__cacheKey].usedTimes--;if(r.usedTimes===0){E(n)}}e.__cacheKey=o;e.__webglTexture=s[o].texture}return i}function k(e,a,o){let l=t.TEXTURE_2D;if(a.isDataArrayTexture||a.isCompressedArrayTexture)l=t.TEXTURE_2D_ARRAY;if(a.isData3DTexture)l=t.TEXTURE_3D;const c=z(e,a);const u=a.source;n.bindTexture(l,e.__webglTexture,t.TEXTURE0+o);const h=i.get(u);if(u.version!==h.__version||c===true){n.activeTexture(t.TEXTURE0+o);const e=Oi.getPrimaries(Oi.workingColorSpace);const i=a.colorSpace===Je?null:Oi.getPrimaries(a.colorSpace);const d=a.colorSpace===Je||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,a.flipY);t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);t.pixelStorei(t.UNPACK_ALIGNMENT,a.unpackAlignment);t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,d);let f=m(a.image,false,r.maxTextureSize);f=et(a,f);const p=s.convert(a.format,a.colorSpace);const x=s.convert(a.type);let S=v(a.internalFormat,p,x,a.colorSpace,a.isVideoTexture);B(l,a);let b;const T=a.mipmaps;const E=a.isVideoTexture!==true;const w=h.__version===undefined||c===true;const A=u.dataReady;const C=M(a,f);if(a.isDepthTexture){S=y(a.format===Xt,a.type);if(w){if(E){n.texStorage2D(t.TEXTURE_2D,1,S,f.width,f.height)}else{n.texImage2D(t.TEXTURE_2D,0,S,f.width,f.height,0,p,x,null)}}}else if(a.isDataTexture){if(T.length>0){if(E&&w){n.texStorage2D(t.TEXTURE_2D,C,S,T[0].width,T[0].height)}for(let e=0,i=T.length;e<i;e++){b=T[e];if(E){if(A){n.texSubImage2D(t.TEXTURE_2D,e,0,0,b.width,b.height,p,x,b.data)}}else{n.texImage2D(t.TEXTURE_2D,e,S,b.width,b.height,0,p,x,b.data)}}a.generateMipmaps=false}else{if(E){if(w){n.texStorage2D(t.TEXTURE_2D,C,S,f.width,f.height)}if(A){const e=a.userData.textureUpdateParams;if(e){n.texSubImage2D(t.TEXTURE_2D,0,e.xOffset,e.yOffset,e.width,e.height,p,x,f.data.subarray(e.dataOffset))}else{n.texSubImage2D(t.TEXTURE_2D,0,0,0,f.width,f.height,p,x,f.data)}}}else{n.texImage2D(t.TEXTURE_2D,0,S,f.width,f.height,0,p,x,f.data)}}}else if(a.isCompressedTexture){if(a.isCompressedArrayTexture){if(E&&w){n.texStorage3D(t.TEXTURE_2D_ARRAY,C,S,T[0].width,T[0].height,f.depth)}for(let e=0,i=T.length;e<i;e++){b=T[e];if(a.format!==Ht){if(p!==null){if(E){if(A){if(a.layerUpdates.size>0){const i=Lf(b.width,b.height,a.format,a.type);for(const r of a.layerUpdates){const s=b.data.subarray(r*i/b.data.BYTES_PER_ELEMENT,(r+1)*i/b.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,r,b.width,b.height,1,p,s)}a.clearLayerUpdates()}else{n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,b.width,b.height,f.depth,p,b.data)}}}else{n.compressedTexImage3D(t.TEXTURE_2D_ARRAY,e,S,b.width,b.height,f.depth,0,b.data,0,0)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(E){if(A){n.texSubImage3D(t.TEXTURE_2D_ARRAY,e,0,0,0,b.width,b.height,f.depth,p,x,b.data)}}else{n.texImage3D(t.TEXTURE_2D_ARRAY,e,S,b.width,b.height,f.depth,0,p,x,b.data)}}}}else{if(E&&w){n.texStorage2D(t.TEXTURE_2D,C,S,T[0].width,T[0].height)}for(let e=0,i=T.length;e<i;e++){b=T[e];if(a.format!==Ht){if(p!==null){if(E){if(A){n.compressedTexSubImage2D(t.TEXTURE_2D,e,0,0,b.width,b.height,p,b.data)}}else{n.compressedTexImage2D(t.TEXTURE_2D,e,S,b.width,b.height,0,b.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(E){if(A){n.texSubImage2D(t.TEXTURE_2D,e,0,0,b.width,b.height,p,x,b.data)}}else{n.texImage2D(t.TEXTURE_2D,e,S,b.width,b.height,0,p,x,b.data)}}}}}else if(a.isDataArrayTexture){if(E){if(w){n.texStorage3D(t.TEXTURE_2D_ARRAY,C,S,f.width,f.height,f.depth)}if(A){if(a.layerUpdates.size>0){const e=Lf(f.width,f.height,a.format,a.type);for(const i of a.layerUpdates){const r=f.data.subarray(i*e/f.data.BYTES_PER_ELEMENT,(i+1)*e/f.data.BYTES_PER_ELEMENT);n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,i,f.width,f.height,1,p,x,r)}a.clearLayerUpdates()}else{n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,0,f.width,f.height,f.depth,p,x,f.data)}}}else{n.texImage3D(t.TEXTURE_2D_ARRAY,0,S,f.width,f.height,f.depth,0,p,x,f.data)}}else if(a.isData3DTexture){if(E){if(w){n.texStorage3D(t.TEXTURE_3D,C,S,f.width,f.height,f.depth)}if(A){n.texSubImage3D(t.TEXTURE_3D,0,0,0,0,f.width,f.height,f.depth,p,x,f.data)}}else{n.texImage3D(t.TEXTURE_3D,0,S,f.width,f.height,f.depth,0,p,x,f.data)}}else if(a.isFramebufferTexture){if(w){if(E){n.texStorage2D(t.TEXTURE_2D,C,S,f.width,f.height)}else{let e=f.width,i=f.height;for(let r=0;r<C;r++){n.texImage2D(t.TEXTURE_2D,r,S,e,i,0,p,x,null);e>>=1;i>>=1}}}}else{if(T.length>0){if(E&&w){const e=nt(T[0]);n.texStorage2D(t.TEXTURE_2D,C,S,e.width,e.height)}for(let e=0,i=T.length;e<i;e++){b=T[e];if(E){if(A){n.texSubImage2D(t.TEXTURE_2D,e,0,0,p,x,b)}}else{n.texImage2D(t.TEXTURE_2D,e,S,p,x,b)}}a.generateMipmaps=false}else{if(E){if(w){const e=nt(f);n.texStorage2D(t.TEXTURE_2D,C,S,e.width,e.height)}if(A){n.texSubImage2D(t.TEXTURE_2D,0,0,0,p,x,f)}}else{n.texImage2D(t.TEXTURE_2D,0,S,p,x,f)}}}if(g(a)){_(l)}h.__version=u.version;if(a.onUpdate)a.onUpdate(a)}e.__version=a.version}function V(e,a,o){if(a.image.length!==6)return;const l=z(e,a);const c=a.source;n.bindTexture(t.TEXTURE_CUBE_MAP,e.__webglTexture,t.TEXTURE0+o);const u=i.get(c);if(c.version!==u.__version||l===true){n.activeTexture(t.TEXTURE0+o);const e=Oi.getPrimaries(Oi.workingColorSpace);const i=a.colorSpace===Je?null:Oi.getPrimaries(a.colorSpace);const h=a.colorSpace===Je||e===i?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,a.flipY);t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);t.pixelStorei(t.UNPACK_ALIGNMENT,a.unpackAlignment);t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,h);const d=a.isCompressedTexture||a.image[0].isCompressedTexture;const f=a.image[0]&&a.image[0].isDataTexture;const p=[];for(let t=0;t<6;t++){if(!d&&!f){p[t]=m(a.image[t],true,r.maxCubemapSize)}else{p[t]=f?a.image[t].image:a.image[t]}p[t]=et(a,p[t])}const x=p[0],y=s.convert(a.format,a.colorSpace),S=s.convert(a.type),b=v(a.internalFormat,y,S,a.colorSpace);const T=a.isVideoTexture!==true;const E=u.__version===undefined||l===true;const w=c.dataReady;let A=M(a,x);B(t.TEXTURE_CUBE_MAP,a);let C;if(d){if(T&&E){n.texStorage2D(t.TEXTURE_CUBE_MAP,A,b,x.width,x.height)}for(let e=0;e<6;e++){C=p[e].mipmaps;for(let i=0;i<C.length;i++){const r=C[i];if(a.format!==Ht){if(y!==null){if(T){if(w){n.compressedTexSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,r.width,r.height,y,r.data)}}else{n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,b,r.width,r.height,0,r.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{if(T){if(w){n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,0,0,r.width,r.height,y,S,r.data)}}else{n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i,b,r.width,r.height,0,y,S,r.data)}}}}}else{C=a.mipmaps;if(T&&E){if(C.length>0)A++;const e=nt(p[0]);n.texStorage2D(t.TEXTURE_CUBE_MAP,A,b,e.width,e.height)}for(let e=0;e<6;e++){if(f){if(T){if(w){n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,p[e].width,p[e].height,y,S,p[e].data)}}else{n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,b,p[e].width,p[e].height,0,y,S,p[e].data)}for(let i=0;i<C.length;i++){const r=C[i];const s=r.image[e].image;if(T){if(w){n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,s.width,s.height,y,S,s.data)}}else{n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,b,s.width,s.height,0,y,S,s.data)}}}else{if(T){if(w){n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,0,0,y,S,p[e])}}else{n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,b,y,S,p[e])}for(let i=0;i<C.length;i++){const r=C[i];if(T){if(w){n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,0,0,y,S,r.image[e])}}else{n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+e,i+1,b,y,S,r.image[e])}}}}}if(g(a)){_(t.TEXTURE_CUBE_MAP)}u.__version=c.version;if(a.onUpdate)a.onUpdate(a)}e.__version=a.version}function G(e,r,a,l,c,u){const h=s.convert(a.format,a.colorSpace);const d=s.convert(a.type);const f=v(a.internalFormat,h,d,a.colorSpace);const p=i.get(r);const m=i.get(a);m.__renderTarget=r;if(!p.__hasExternalTextures){const e=Math.max(1,r.width>>u);const i=Math.max(1,r.height>>u);if(c===t.TEXTURE_3D||c===t.TEXTURE_2D_ARRAY){n.texImage3D(c,u,f,e,i,r.depth,0,h,d,null)}else{n.texImage2D(c,u,f,e,i,0,h,d,null)}}n.bindFramebuffer(t.FRAMEBUFFER,e);if(Q(r)){o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,l,c,m.__webglTexture,0,$(r))}else if(c===t.TEXTURE_2D||c>=t.TEXTURE_CUBE_MAP_POSITIVE_X&&c<=t.TEXTURE_CUBE_MAP_NEGATIVE_Z){t.framebufferTexture2D(t.FRAMEBUFFER,l,c,m.__webglTexture,u)}n.bindFramebuffer(t.FRAMEBUFFER,null)}function H(e,n,i){t.bindRenderbuffer(t.RENDERBUFFER,e);if(n.depthBuffer){const r=n.depthTexture;const s=r&&r.isDepthTexture?r.type:null;const a=y(n.stencilBuffer,s);const l=n.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;const c=$(n);const u=Q(n);if(u){o.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,c,a,n.width,n.height)}else if(i){t.renderbufferStorageMultisample(t.RENDERBUFFER,c,a,n.width,n.height)}else{t.renderbufferStorage(t.RENDERBUFFER,a,n.width,n.height)}t.framebufferRenderbuffer(t.FRAMEBUFFER,l,t.RENDERBUFFER,e)}else{const e=n.textures;for(let r=0;r<e.length;r++){const a=e[r];const l=s.convert(a.format,a.colorSpace);const c=s.convert(a.type);const u=v(a.internalFormat,l,c,a.colorSpace);const h=$(n);if(i&&Q(n)===false){t.renderbufferStorageMultisample(t.RENDERBUFFER,h,u,n.width,n.height)}else if(Q(n)){o.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,h,u,n.width,n.height)}else{t.renderbufferStorage(t.RENDERBUFFER,u,n.width,n.height)}}}t.bindRenderbuffer(t.RENDERBUFFER,null)}function W(e,r){const s=r&&r.isWebGLCubeRenderTarget;if(s)throw new Error("Depth Texture with cube render targets is not supported");n.bindFramebuffer(t.FRAMEBUFFER,e);if(!(r.depthTexture&&r.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}const a=i.get(r.depthTexture);a.__renderTarget=r;if(!a.__webglTexture||r.depthTexture.image.width!==r.width||r.depthTexture.image.height!==r.height){r.depthTexture.image.width=r.width;r.depthTexture.image.height=r.height;r.depthTexture.needsUpdate=true}P(r.depthTexture,0);const l=a.__webglTexture;const c=$(r);if(r.depthTexture.format===Wt){if(Q(r)){o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,l,0,c)}else{t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,l,0)}}else if(r.depthTexture.format===Xt){if(Q(r)){o.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,l,0,c)}else{t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,l,0)}}else{throw new Error("Unknown depthTexture format")}}function X(e){const r=i.get(e);const s=e.isWebGLCubeRenderTarget===true;if(r.__boundDepthTexture!==e.depthTexture){const t=e.depthTexture;if(r.__depthDisposeCallback){r.__depthDisposeCallback()}if(t){const e=()=>{delete r.__boundDepthTexture;delete r.__depthDisposeCallback;t.removeEventListener("dispose",e)};t.addEventListener("dispose",e);r.__depthDisposeCallback=e}r.__boundDepthTexture=t}if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(s)throw new Error("target.depthTexture not supported in Cube render targets");const t=e.texture.mipmaps;if(t&&t.length>0){W(r.__webglFramebuffer[0],e)}else{W(r.__webglFramebuffer,e)}}else{if(s){r.__webglDepthbuffer=[];for(let i=0;i<6;i++){n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer[i]);if(r.__webglDepthbuffer[i]===undefined){r.__webglDepthbuffer[i]=t.createRenderbuffer();H(r.__webglDepthbuffer[i],e,false)}else{const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;const s=r.__webglDepthbuffer[i];t.bindRenderbuffer(t.RENDERBUFFER,s);t.framebufferRenderbuffer(t.FRAMEBUFFER,n,t.RENDERBUFFER,s)}}}else{const i=e.texture.mipmaps;if(i&&i.length>0){n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer[0])}else{n.bindFramebuffer(t.FRAMEBUFFER,r.__webglFramebuffer)}if(r.__webglDepthbuffer===undefined){r.__webglDepthbuffer=t.createRenderbuffer();H(r.__webglDepthbuffer,e,false)}else{const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;const i=r.__webglDepthbuffer;t.bindRenderbuffer(t.RENDERBUFFER,i);t.framebufferRenderbuffer(t.FRAMEBUFFER,n,t.RENDERBUFFER,i)}}}n.bindFramebuffer(t.FRAMEBUFFER,null)}function j(e,n,r){const s=i.get(e);if(n!==undefined){G(s.__webglFramebuffer,e,e.texture,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,0)}if(r!==undefined){X(e)}}function q(e){const r=e.texture;const o=i.get(e);const l=i.get(r);e.addEventListener("dispose",b);const c=e.textures;const u=e.isWebGLCubeRenderTarget===true;const h=c.length>1;if(!h){if(l.__webglTexture===undefined){l.__webglTexture=t.createTexture()}l.__version=r.version;a.memory.textures++}if(u){o.__webglFramebuffer=[];for(let e=0;e<6;e++){if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer[e]=[];for(let n=0;n<r.mipmaps.length;n++){o.__webglFramebuffer[e][n]=t.createFramebuffer()}}else{o.__webglFramebuffer[e]=t.createFramebuffer()}}}else{if(r.mipmaps&&r.mipmaps.length>0){o.__webglFramebuffer=[];for(let e=0;e<r.mipmaps.length;e++){o.__webglFramebuffer[e]=t.createFramebuffer()}}else{o.__webglFramebuffer=t.createFramebuffer()}if(h){for(let e=0,n=c.length;e<n;e++){const n=i.get(c[e]);if(n.__webglTexture===undefined){n.__webglTexture=t.createTexture();a.memory.textures++}}}if(e.samples>0&&Q(e)===false){o.__webglMultisampledFramebuffer=t.createFramebuffer();o.__webglColorRenderbuffer=[];n.bindFramebuffer(t.FRAMEBUFFER,o.__webglMultisampledFramebuffer);for(let n=0;n<c.length;n++){const i=c[n];o.__webglColorRenderbuffer[n]=t.createRenderbuffer();t.bindRenderbuffer(t.RENDERBUFFER,o.__webglColorRenderbuffer[n]);const r=s.convert(i.format,i.colorSpace);const a=s.convert(i.type);const l=v(i.internalFormat,r,a,i.colorSpace,e.isXRRenderTarget===true);const u=$(e);t.renderbufferStorageMultisample(t.RENDERBUFFER,u,l,e.width,e.height);t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+n,t.RENDERBUFFER,o.__webglColorRenderbuffer[n])}t.bindRenderbuffer(t.RENDERBUFFER,null);if(e.depthBuffer){o.__webglDepthRenderbuffer=t.createRenderbuffer();H(o.__webglDepthRenderbuffer,e,true)}n.bindFramebuffer(t.FRAMEBUFFER,null)}}if(u){n.bindTexture(t.TEXTURE_CUBE_MAP,l.__webglTexture);B(t.TEXTURE_CUBE_MAP,r);for(let n=0;n<6;n++){if(r.mipmaps&&r.mipmaps.length>0){for(let i=0;i<r.mipmaps.length;i++){G(o.__webglFramebuffer[n][i],e,r,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,i)}}else{G(o.__webglFramebuffer[n],e,r,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+n,0)}}if(g(r)){_(t.TEXTURE_CUBE_MAP)}n.unbindTexture()}else if(h){for(let r=0,s=c.length;r<s;r++){const s=c[r];const a=i.get(s);n.bindTexture(t.TEXTURE_2D,a.__webglTexture);B(t.TEXTURE_2D,s);G(o.__webglFramebuffer,e,s,t.COLOR_ATTACHMENT0+r,t.TEXTURE_2D,0);if(g(s)){_(t.TEXTURE_2D)}}n.unbindTexture()}else{let i=t.TEXTURE_2D;if(e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget){i=e.isWebGL3DRenderTarget?t.TEXTURE_3D:t.TEXTURE_2D_ARRAY}n.bindTexture(i,l.__webglTexture);B(i,r);if(r.mipmaps&&r.mipmaps.length>0){for(let n=0;n<r.mipmaps.length;n++){G(o.__webglFramebuffer[n],e,r,t.COLOR_ATTACHMENT0,i,n)}}else{G(o.__webglFramebuffer,e,r,t.COLOR_ATTACHMENT0,i,0)}if(g(r)){_(i)}n.unbindTexture()}if(e.depthBuffer){X(e)}}function Y(t){const e=t.textures;for(let r=0,s=e.length;r<s;r++){const s=e[r];if(g(s)){const e=x(t);const r=i.get(s).__webglTexture;n.bindTexture(e,r);_(e);n.unbindTexture()}}}const Z=[];const J=[];function K(e){if(e.samples>0){if(Q(e)===false){const r=e.textures;const s=e.width;const a=e.height;let o=t.COLOR_BUFFER_BIT;const c=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;const u=i.get(e);const h=r.length>1;if(h){for(let e=0;e<r.length;e++){n.bindFramebuffer(t.FRAMEBUFFER,u.__webglMultisampledFramebuffer);t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,null);n.bindFramebuffer(t.FRAMEBUFFER,u.__webglFramebuffer);t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,null,0)}}n.bindFramebuffer(t.READ_FRAMEBUFFER,u.__webglMultisampledFramebuffer);const d=e.texture.mipmaps;if(d&&d.length>0){n.bindFramebuffer(t.DRAW_FRAMEBUFFER,u.__webglFramebuffer[0])}else{n.bindFramebuffer(t.DRAW_FRAMEBUFFER,u.__webglFramebuffer)}for(let n=0;n<r.length;n++){if(e.resolveDepthBuffer){if(e.depthBuffer)o|=t.DEPTH_BUFFER_BIT;if(e.stencilBuffer&&e.resolveStencilBuffer)o|=t.STENCIL_BUFFER_BIT}if(h){t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,u.__webglColorRenderbuffer[n]);const e=i.get(r[n]).__webglTexture;t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}t.blitFramebuffer(0,0,s,a,0,0,s,a,o,t.NEAREST);if(l===true){Z.length=0;J.length=0;Z.push(t.COLOR_ATTACHMENT0+n);if(e.depthBuffer&&e.resolveDepthBuffer===false){Z.push(c);J.push(c);t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,J)}t.invalidateFramebuffer(t.READ_FRAMEBUFFER,Z)}}n.bindFramebuffer(t.READ_FRAMEBUFFER,null);n.bindFramebuffer(t.DRAW_FRAMEBUFFER,null);if(h){for(let e=0;e<r.length;e++){n.bindFramebuffer(t.FRAMEBUFFER,u.__webglMultisampledFramebuffer);t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.RENDERBUFFER,u.__webglColorRenderbuffer[e]);const s=i.get(r[e]).__webglTexture;n.bindFramebuffer(t.FRAMEBUFFER,u.__webglFramebuffer);t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+e,t.TEXTURE_2D,s,0)}}n.bindFramebuffer(t.DRAW_FRAMEBUFFER,u.__webglMultisampledFramebuffer)}else{if(e.depthBuffer&&e.resolveDepthBuffer===false&&l){const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,[n])}}}}function $(t){return Math.min(r.maxSamples,t.samples)}function Q(t){const n=i.get(t);return t.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===true&&n.__useRenderToTexture!==false}function tt(t){const e=a.render.frame;if(u.get(t)!==e){u.set(t,e);t.update()}}function et(t,e){const n=t.colorSpace;const i=t.format;const r=t.type;if(t.isCompressedTexture===true||t.isVideoTexture===true)return e;if(n!==$e&&n!==Je){if(Oi.getTransfer(n)===tn){if(i!==Ht||r!==Rt){console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")}}else{console.error("THREE.WebGLTextures: Unsupported texture color space:",n)}}return e}function nt(t){if(typeof HTMLImageElement!=="undefined"&&t instanceof HTMLImageElement){c.width=t.naturalWidth||t.width;c.height=t.naturalHeight||t.height}else if(typeof VideoFrame!=="undefined"&&t instanceof VideoFrame){c.width=t.displayWidth;c.height=t.displayHeight}else{c.width=t.width;c.height=t.height}return c}this.allocateTextureUnit=R;this.resetTextureUnits=C;this.setTexture2D=P;this.setTexture2DArray=L;this.setTexture3D=D;this.setTextureCube=U;this.rebindTextures=j;this.setupRenderTarget=q;this.updateRenderTargetMipmap=Y;this.updateMultisampleRenderTarget=K;this.setupDepthRenderbuffer=X;this.setupFrameBufferTexture=G;this.useMultisampledRTT=Q}function uv(t,e){function n(n,i=Je){let r;const s=Oi.getTransfer(i);if(n===Rt)return t.UNSIGNED_BYTE;if(n===Ft)return t.UNSIGNED_SHORT_4_4_4_4;if(n===Bt)return t.UNSIGNED_SHORT_5_5_5_1;if(n===kt)return t.UNSIGNED_INT_5_9_9_9_REV;if(n===It)return t.BYTE;if(n===Pt)return t.SHORT;if(n===Lt)return t.UNSIGNED_SHORT;if(n===Dt)return t.INT;if(n===Ut)return t.UNSIGNED_INT;if(n===Nt)return t.FLOAT;if(n===Ot)return t.HALF_FLOAT;if(n===Vt)return t.ALPHA;if(n===Gt)return t.RGB;if(n===Ht)return t.RGBA;if(n===Wt)return t.DEPTH_COMPONENT;if(n===Xt)return t.DEPTH_STENCIL;if(n===jt)return t.RED;if(n===qt)return t.RED_INTEGER;if(n===Yt)return t.RG;if(n===Zt)return t.RG_INTEGER;if(n===Kt)return t.RGBA_INTEGER;if(n===$t||n===Qt||n===te||n===ee){if(s===tn){r=e.get("WEBGL_compressed_texture_s3tc_srgb");if(r!==null){if(n===$t)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===Qt)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===te)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===ee)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{return null}}else{r=e.get("WEBGL_compressed_texture_s3tc");if(r!==null){if(n===$t)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===Qt)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===te)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===ee)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}}if(n===ne||n===ie||n===re||n===se){r=e.get("WEBGL_compressed_texture_pvrtc");if(r!==null){if(n===ne)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===ie)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===re)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===se)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(n===ae||n===oe||n===le){r=e.get("WEBGL_compressed_texture_etc");if(r!==null){if(n===ae||n===oe)return s===tn?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===le)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else{return null}}if(n===ce||n===ue||n===he||n===de||n===fe||n===pe||n===me||n===ge||n===_e||n===xe||n===ve||n===ye||n===Me||n===Se){r=e.get("WEBGL_compressed_texture_astc");if(r!==null){if(n===ce)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===ue)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===he)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===de)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===fe)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===pe)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===me)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===ge)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===_e)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===xe)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===ve)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===ye)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Me)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Se)return s===tn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else{return null}}if(n===be||n===Te||n===Ee){r=e.get("EXT_texture_compression_bptc");if(r!==null){if(n===be)return s===tn?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Te)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Ee)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else{return null}}if(n===we||n===Ae||n===Ce||n===Re){r=e.get("EXT_texture_compression_rgtc");if(r!==null){if(n===be)return r.COMPRESSED_RED_RGTC1_EXT;if(n===Ae)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===Ce)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Re)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else{return null}}if(n===zt)return t.UNSIGNED_INT_24_8;return t[n]!==undefined?t[n]:null}return{convert:n}}const hv=`\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}`;const dv=`\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}`;class fv{constructor(){this.texture=null;this.mesh=null;this.depthNear=0;this.depthFar=0}init(t,e,n){if(this.texture===null){const i=new ji;const r=t.properties.get(i);r.__webglTexture=e.texture;if(e.depthNear!==n.depthNear||e.depthFar!==n.depthFar){this.depthNear=e.depthNear;this.depthFar=e.depthFar}this.texture=i}}getMesh(t){if(this.texture!==null){if(this.mesh===null){const e=t.cameras[0].viewport;const n=new xa({vertexShader:hv,fragmentShader:dv,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new oa(new cu(20,20),n)}}return this.mesh}reset(){this.texture=null;this.mesh=null}getDepthTexture(){return this.texture}}class pv extends Gn{constructor(t,e){super();const n=this;let i=null;let r=1;let s=null;let a="local-floor";let o=1;let l=null;let c=null;let u=null;let h=null;let d=null;let f=null;const p=new fv;const m=e.getContextAttributes();let g=null;let _=null;const x=[];const v=[];const y=new gi;let M=null;const S=new ba;S.viewport=new qi;const b=new ba;b.viewport=new qi;const T=[S,b];const E=new Qh;let w=null;let A=null;this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(t){let e=x[t];if(e===undefined){e=new Pa;x[t]=e}return e.getTargetRaySpace()};this.getControllerGrip=function(t){let e=x[t];if(e===undefined){e=new Pa;x[t]=e}return e.getGripSpace()};this.getHand=function(t){let e=x[t];if(e===undefined){e=new Pa;x[t]=e}return e.getHandSpace()};function C(t){const e=v.indexOf(t.inputSource);if(e===-1){return}const n=x[e];if(n!==undefined){n.update(t.inputSource,t.frame,l||s);n.dispatchEvent({type:t.type,data:t.inputSource})}}function R(){i.removeEventListener("select",C);i.removeEventListener("selectstart",C);i.removeEventListener("selectend",C);i.removeEventListener("squeeze",C);i.removeEventListener("squeezestart",C);i.removeEventListener("squeezeend",C);i.removeEventListener("end",R);i.removeEventListener("inputsourceschange",I);for(let t=0;t<x.length;t++){const e=v[t];if(e===null)continue;v[t]=null;x[t].disconnect(e)}w=null;A=null;p.reset();t.setRenderTarget(g);d=null;h=null;u=null;i=null;_=null;B.stop();n.isPresenting=false;t.setPixelRatio(M);t.setSize(y.width,y.height,false);n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(t){r=t;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(t){a=t;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return l||s};this.setReferenceSpace=function(t){l=t};this.getBaseLayer=function(){return h!==null?h:d};this.getBinding=function(){return u};this.getFrame=function(){return f};this.getSession=function(){return i};this.setSession=async function(c){i=c;if(i!==null){g=t.getRenderTarget();i.addEventListener("select",C);i.addEventListener("selectstart",C);i.addEventListener("selectend",C);i.addEventListener("squeeze",C);i.addEventListener("squeezestart",C);i.addEventListener("squeezeend",C);i.addEventListener("end",R);i.addEventListener("inputsourceschange",I);if(m.xrCompatible!==true){await e.makeXRCompatible()}M=t.getPixelRatio();t.getSize(y);const c=typeof XRWebGLBinding!=="undefined"&&"createProjectionLayer"in XRWebGLBinding.prototype;if(!c){const n={antialias:m.antialias,alpha:true,depth:m.depth,stencil:m.stencil,framebufferScaleFactor:r};d=new XRWebGLLayer(i,e,n);i.updateRenderState({baseLayer:d});t.setPixelRatio(1);t.setSize(d.framebufferWidth,d.framebufferHeight,false);_=new Zi(d.framebufferWidth,d.framebufferHeight,{format:Ht,type:Rt,colorSpace:t.outputColorSpace,stencilBuffer:m.stencil,resolveDepthBuffer:d.ignoreDepthValues===false,resolveStencilBuffer:d.ignoreDepthValues===false})}else{let n=null;let s=null;let a=null;if(m.depth){a=m.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24;n=m.stencil?Xt:Wt;s=m.stencil?zt:Ut}const o={colorFormat:e.RGBA8,depthFormat:a,scaleFactor:r};u=new XRWebGLBinding(i,e);h=u.createProjectionLayer(o);i.updateRenderState({layers:[h]});t.setPixelRatio(1);t.setSize(h.textureWidth,h.textureHeight,false);_=new Zi(h.textureWidth,h.textureHeight,{format:Ht,type:Rt,depthTexture:new Ll(h.textureWidth,h.textureHeight,s,undefined,undefined,undefined,undefined,undefined,undefined,n),stencilBuffer:m.stencil,colorSpace:t.outputColorSpace,samples:m.antialias?4:0,resolveDepthBuffer:h.ignoreDepthValues===false,resolveStencilBuffer:h.ignoreDepthValues===false})}_.isXRRenderTarget=true;this.setFoveation(o);l=null;s=await i.requestReferenceSpace(a);B.setContext(i);B.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}};this.getEnvironmentBlendMode=function(){if(i!==null){return i.environmentBlendMode}};this.getDepthTexture=function(){return p.getDepthTexture()};function I(t){for(let e=0;e<t.removed.length;e++){const n=t.removed[e];const i=v.indexOf(n);if(i>=0){v[i]=null;x[i].disconnect(n)}}for(let e=0;e<t.added.length;e++){const n=t.added[e];let i=v.indexOf(n);if(i===-1){for(let t=0;t<x.length;t++){if(t>=v.length){v.push(n);i=t;break}else if(v[t]===null){v[t]=n;i=t;break}}if(i===-1)break}const r=x[i];if(r){r.connect(n)}}}const P=new xi;const L=new xi;function D(t,e,n){P.setFromMatrixPosition(e.matrixWorld);L.setFromMatrixPosition(n.matrixWorld);const i=P.distanceTo(L);const r=e.projectionMatrix.elements;const s=n.projectionMatrix.elements;const a=r[14]/(r[10]-1);const o=r[14]/(r[10]+1);const l=(r[9]+1)/r[5];const c=(r[9]-1)/r[5];const u=(r[8]-1)/r[0];const h=(s[8]+1)/s[0];const d=a*u;const f=a*h;const p=i/(-u+h);const m=p*-u;e.matrixWorld.decompose(t.position,t.quaternion,t.scale);t.translateX(m);t.translateZ(p);t.matrixWorld.compose(t.position,t.quaternion,t.scale);t.matrixWorldInverse.copy(t.matrixWorld).invert();if(r[10]===-1){t.projectionMatrix.copy(e.projectionMatrix);t.projectionMatrixInverse.copy(e.projectionMatrixInverse)}else{const e=a+p;const n=o+p;const r=d-m;const s=f+(i-m);const u=l*o/n*e;const h=c*o/n*e;t.projectionMatrix.makePerspective(r,s,u,h,e,n);t.projectionMatrixInverse.copy(t.projectionMatrix).invert()}}function U(t,e){if(e===null){t.matrixWorld.copy(t.matrix)}else{t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix)}t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(i===null)return;let e=t.near;let n=t.far;if(p.texture!==null){if(p.depthNear>0)e=p.depthNear;if(p.depthFar>0)n=p.depthFar}E.near=b.near=S.near=e;E.far=b.far=S.far=n;if(w!==E.near||A!==E.far){i.updateRenderState({depthNear:E.near,depthFar:E.far});w=E.near;A=E.far}S.layers.mask=t.layers.mask|2;b.layers.mask=t.layers.mask|4;E.layers.mask=S.layers.mask|b.layers.mask;const r=t.parent;const s=E.cameras;U(E,r);for(let t=0;t<s.length;t++){U(s[t],r)}if(s.length===2){D(E,S,b)}else{E.projectionMatrix.copy(S.projectionMatrix)}N(t,E,r)};function N(t,e,n){if(n===null){t.matrix.copy(e.matrixWorld)}else{t.matrix.copy(n.matrixWorld);t.matrix.invert();t.matrix.multiply(e.matrixWorld)}t.matrix.decompose(t.position,t.quaternion,t.scale);t.updateMatrixWorld(true);t.projectionMatrix.copy(e.projectionMatrix);t.projectionMatrixInverse.copy(e.projectionMatrixInverse);if(t.isPerspectiveCamera){t.fov=jn*2*Math.atan(1/t.projectionMatrix.elements[5]);t.zoom=1}}this.getCamera=function(){return E};this.getFoveation=function(){if(h===null&&d===null){return undefined}return o};this.setFoveation=function(t){o=t;if(h!==null){h.fixedFoveation=t}if(d!==null&&d.fixedFoveation!==undefined){d.fixedFoveation=t}};this.hasDepthSensing=function(){return p.texture!==null};this.getDepthSensingMesh=function(){return p.getMesh(E)};let O=null;function F(e,r){c=r.getViewerPose(l||s);f=r;if(c!==null){const e=c.views;if(d!==null){t.setRenderTargetFramebuffer(_,d.framebuffer);t.setRenderTarget(_)}let n=false;if(e.length!==E.cameras.length){E.cameras.length=0;n=true}for(let i=0;i<e.length;i++){const r=e[i];let s=null;if(d!==null){s=d.getViewport(r)}else{const e=u.getViewSubImage(h,r);s=e.viewport;if(i===0){t.setRenderTargetTextures(_,e.colorTexture,e.depthStencilTexture);t.setRenderTarget(_)}}let a=T[i];if(a===undefined){a=new ba;a.layers.enable(i);a.viewport=new qi;T[i]=a}a.matrix.fromArray(r.transform.matrix);a.matrix.decompose(a.position,a.quaternion,a.scale);a.projectionMatrix.fromArray(r.projectionMatrix);a.projectionMatrixInverse.copy(a.projectionMatrix).invert();a.viewport.set(s.x,s.y,s.width,s.height);if(i===0){E.matrix.copy(a.matrix);E.matrix.decompose(E.position,E.quaternion,E.scale)}if(n===true){E.cameras.push(a)}}const r=i.enabledFeatures;const s=r&&r.includes("depth-sensing")&&i.depthUsage=="gpu-optimized";if(s&&u){const n=u.getDepthInformation(e[0]);if(n&&n.isValid&&n.texture){p.init(t,n,i.renderState)}}}for(let t=0;t<x.length;t++){const e=v[t];const n=x[t];if(e!==null&&n!==undefined){n.update(e,r,l||s)}}if(O)O(e,r);if(r.detectedPlanes){n.dispatchEvent({type:"planesdetected",data:r})}f=null}const B=new Nf;B.setAnimationLoop(F);this.setAnimationLoop=function(t){O=t};this.dispose=function(){}}}const mv=new Fr;const gv=new Ar;function _v(t,e){function n(t,e){if(t.matrixAutoUpdate===true){t.updateMatrix()}e.value.copy(t.matrix)}function i(e,n){n.color.getRGB(e.fogColor.value,pa(t));if(n.isFog){e.fogNear.value=n.near;e.fogFar.value=n.far}else if(n.isFogExp2){e.fogDensity.value=n.density}}function r(t,e,n,i,r){if(e.isMeshBasicMaterial){s(t,e)}else if(e.isMeshLambertMaterial){s(t,e)}else if(e.isMeshToonMaterial){s(t,e);h(t,e)}else if(e.isMeshPhongMaterial){s(t,e);u(t,e)}else if(e.isMeshStandardMaterial){s(t,e);d(t,e);if(e.isMeshPhysicalMaterial){f(t,e,r)}}else if(e.isMeshMatcapMaterial){s(t,e);p(t,e)}else if(e.isMeshDepthMaterial){s(t,e)}else if(e.isMeshDistanceMaterial){s(t,e);g(t,e)}else if(e.isMeshNormalMaterial){s(t,e)}else if(e.isLineBasicMaterial){a(t,e);if(e.isLineDashedMaterial){o(t,e)}}else if(e.isPointsMaterial){l(t,e,n,i)}else if(e.isSpriteMaterial){c(t,e)}else if(e.isShadowMaterial){t.color.value.copy(e.color);t.opacity.value=e.opacity}else if(e.isShaderMaterial){e.uniformsNeedUpdate=false}}function s(t,i){t.opacity.value=i.opacity;if(i.color){t.diffuse.value.copy(i.color)}if(i.emissive){t.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity)}if(i.map){t.map.value=i.map;n(i.map,t.mapTransform)}if(i.alphaMap){t.alphaMap.value=i.alphaMap;n(i.alphaMap,t.alphaMapTransform)}if(i.bumpMap){t.bumpMap.value=i.bumpMap;n(i.bumpMap,t.bumpMapTransform);t.bumpScale.value=i.bumpScale;if(i.side===m){t.bumpScale.value*=-1}}if(i.normalMap){t.normalMap.value=i.normalMap;n(i.normalMap,t.normalMapTransform);t.normalScale.value.copy(i.normalScale);if(i.side===m){t.normalScale.value.negate()}}if(i.displacementMap){t.displacementMap.value=i.displacementMap;n(i.displacementMap,t.displacementMapTransform);t.displacementScale.value=i.displacementScale;t.displacementBias.value=i.displacementBias}if(i.emissiveMap){t.emissiveMap.value=i.emissiveMap;n(i.emissiveMap,t.emissiveMapTransform)}if(i.specularMap){t.specularMap.value=i.specularMap;n(i.specularMap,t.specularMapTransform)}if(i.alphaTest>0){t.alphaTest.value=i.alphaTest}const r=e.get(i);const s=r.envMap;const a=r.envMapRotation;if(s){t.envMap.value=s;mv.copy(a);mv.x*=-1;mv.y*=-1;mv.z*=-1;if(s.isCubeTexture&&s.isRenderTargetTexture===false){mv.y*=-1;mv.z*=-1}t.envMapRotation.value.setFromMatrix4(gv.makeRotationFromEuler(mv));t.flipEnvMap.value=s.isCubeTexture&&s.isRenderTargetTexture===false?-1:1;t.reflectivity.value=i.reflectivity;t.ior.value=i.ior;t.refractionRatio.value=i.refractionRatio}if(i.lightMap){t.lightMap.value=i.lightMap;t.lightMapIntensity.value=i.lightMapIntensity;n(i.lightMap,t.lightMapTransform)}if(i.aoMap){t.aoMap.value=i.aoMap;t.aoMapIntensity.value=i.aoMapIntensity;n(i.aoMap,t.aoMapTransform)}}function a(t,e){if(e.specularMap){t.specularMap.value=e.specularMap}t.diffuse.value.copy(e.color);t.opacity.value=e.opacity;if(e.map){t.map.value=e.map;n(e.map,t.mapTransform)}}function o(t,e){t.dashSize.value=e.dashSize;t.totalSize.value=e.dashSize+e.gapSize;t.scale.value=e.scale}function l(t,e,i,r){t.diffuse.value.copy(e.color);t.opacity.value=e.opacity;t.size.value=e.size*i;t.scale.value=r*.5;if(e.map){t.map.value=e.map;n(e.map,t.uvTransform)}if(e.alphaMap){t.alphaMap.value=e.alphaMap;n(e.alphaMap,t.alphaMapTransform)}if(e.alphaTest>0){t.alphaTest.value=e.alphaTest}}function c(t,e){t.diffuse.value.copy(e.color);t.opacity.value=e.opacity;t.rotation.value=e.rotation;if(e.map){t.map.value=e.map;n(e.map,t.mapTransform)}if(e.alphaMap){t.alphaMap.value=e.alphaMap;n(e.alphaMap,t.alphaMapTransform)}if(e.alphaTest>0){t.alphaTest.value=e.alphaTest}}function u(t,e){t.specular.value.copy(e.specular);t.shininess.value=Math.max(e.shininess,1e-4)}function h(t,e){if(e.gradientMap){t.gradientMap.value=e.gradientMap}}function d(t,e){t.metalness.value=e.metalness;if(e.metalnessMap){t.metalnessMap.value=e.metalnessMap;n(e.metalnessMap,t.metalnessMapTransform)}t.roughness.value=e.roughness;if(e.roughnessMap){t.roughnessMap.value=e.roughnessMap;n(e.roughnessMap,t.roughnessMapTransform)}if(e.envMap){t.envMapIntensity.value=e.envMapIntensity}}function f(t,e,i){t.ior.value=e.ior;if(e.sheen>0){t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen);t.sheenRoughness.value=e.sheenRoughness;if(e.sheenColorMap){t.sheenColorMap.value=e.sheenColorMap;n(e.sheenColorMap,t.sheenColorMapTransform)}if(e.sheenRoughnessMap){t.sheenRoughnessMap.value=e.sheenRoughnessMap;n(e.sheenRoughnessMap,t.sheenRoughnessMapTransform)}}if(e.clearcoat>0){t.clearcoat.value=e.clearcoat;t.clearcoatRoughness.value=e.clearcoatRoughness;if(e.clearcoatMap){t.clearcoatMap.value=e.clearcoatMap;n(e.clearcoatMap,t.clearcoatMapTransform)}if(e.clearcoatRoughnessMap){t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap;n(e.clearcoatRoughnessMap,t.clearcoatRoughnessMapTransform)}if(e.clearcoatNormalMap){t.clearcoatNormalMap.value=e.clearcoatNormalMap;n(e.clearcoatNormalMap,t.clearcoatNormalMapTransform);t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale);if(e.side===m){t.clearcoatNormalScale.value.negate()}}}if(e.dispersion>0){t.dispersion.value=e.dispersion}if(e.iridescence>0){t.iridescence.value=e.iridescence;t.iridescenceIOR.value=e.iridescenceIOR;t.iridescenceThicknessMinimum.value=e.iridescenceThicknessRange[0];t.iridescenceThicknessMaximum.value=e.iridescenceThicknessRange[1];if(e.iridescenceMap){t.iridescenceMap.value=e.iridescenceMap;n(e.iridescenceMap,t.iridescenceMapTransform)}if(e.iridescenceThicknessMap){t.iridescenceThicknessMap.value=e.iridescenceThicknessMap;n(e.iridescenceThicknessMap,t.iridescenceThicknessMapTransform)}}if(e.transmission>0){t.transmission.value=e.transmission;t.transmissionSamplerMap.value=i.texture;t.transmissionSamplerSize.value.set(i.width,i.height);if(e.transmissionMap){t.transmissionMap.value=e.transmissionMap;n(e.transmissionMap,t.transmissionMapTransform)}t.thickness.value=e.thickness;if(e.thicknessMap){t.thicknessMap.value=e.thicknessMap;n(e.thicknessMap,t.thicknessMapTransform)}t.attenuationDistance.value=e.attenuationDistance;t.attenuationColor.value.copy(e.attenuationColor)}if(e.anisotropy>0){t.anisotropyVector.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation));if(e.anisotropyMap){t.anisotropyMap.value=e.anisotropyMap;n(e.anisotropyMap,t.anisotropyMapTransform)}}t.specularIntensity.value=e.specularIntensity;t.specularColor.value.copy(e.specularColor);if(e.specularColorMap){t.specularColorMap.value=e.specularColorMap;n(e.specularColorMap,t.specularColorMapTransform)}if(e.specularIntensityMap){t.specularIntensityMap.value=e.specularIntensityMap;n(e.specularIntensityMap,t.specularIntensityMapTransform)}}function p(t,e){if(e.matcap){t.matcap.value=e.matcap}}function g(t,n){const i=e.get(n).light;t.referencePosition.value.setFromMatrixPosition(i.matrixWorld);t.nearDistance.value=i.shadow.camera.near;t.farDistance.value=i.shadow.camera.far}return{refreshFogUniforms:i,refreshMaterialUniforms:r}}function xv(t,e,n,i){let r={};let s={};let a=[];const o=t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS);function l(t,e){const n=e.program;i.uniformBlockBinding(t,n)}function c(t,n){let a=r[t.id];if(a===undefined){p(t);a=u(t);r[t.id]=a;t.addEventListener("dispose",g)}const o=n.program;i.updateUBOMapping(t,o);const l=e.render.frame;if(s[t.id]!==l){d(t);s[t.id]=l}}function u(e){const n=h();e.__bindingPointIndex=n;const i=t.createBuffer();const r=e.__size;const s=e.usage;t.bindBuffer(t.UNIFORM_BUFFER,i);t.bufferData(t.UNIFORM_BUFFER,r,s);t.bindBuffer(t.UNIFORM_BUFFER,null);t.bindBufferBase(t.UNIFORM_BUFFER,n,i);return i}function h(){for(let t=0;t<o;t++){if(a.indexOf(t)===-1){a.push(t);return t}}console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");return 0}function d(e){const n=r[e.id];const i=e.uniforms;const s=e.__cache;t.bindBuffer(t.UNIFORM_BUFFER,n);for(let e=0,n=i.length;e<n;e++){const n=Array.isArray(i[e])?i[e]:[i[e]];for(let i=0,r=n.length;i<r;i++){const r=n[i];if(f(r,e,i,s)===true){const e=r.__offset;const n=Array.isArray(r.value)?r.value:[r.value];let i=0;for(let s=0;s<n.length;s++){const a=n[s];const o=m(a);if(typeof a==="number"||typeof a==="boolean"){r.__data[0]=a;t.bufferSubData(t.UNIFORM_BUFFER,e+i,r.__data)}else if(a.isMatrix3){r.__data[0]=a.elements[0];r.__data[1]=a.elements[1];r.__data[2]=a.elements[2];r.__data[3]=0;r.__data[4]=a.elements[3];r.__data[5]=a.elements[4];r.__data[6]=a.elements[5];r.__data[7]=0;r.__data[8]=a.elements[6];r.__data[9]=a.elements[7];r.__data[10]=a.elements[8];r.__data[11]=0}else{a.toArray(r.__data,i);i+=o.storage/Float32Array.BYTES_PER_ELEMENT}}t.bufferSubData(t.UNIFORM_BUFFER,e,r.__data)}}}t.bindBuffer(t.UNIFORM_BUFFER,null)}function f(t,e,n,i){const r=t.value;const s=e+"_"+n;if(i[s]===undefined){if(typeof r==="number"||typeof r==="boolean"){i[s]=r}else{i[s]=r.clone()}return true}else{const t=i[s];if(typeof r==="number"||typeof r==="boolean"){if(t!==r){i[s]=r;return true}}else{if(t.equals(r)===false){t.copy(r);return true}}}return false}function p(t){const e=t.uniforms;let n=0;const i=16;for(let t=0,r=e.length;t<r;t++){const r=Array.isArray(e[t])?e[t]:[e[t]];for(let t=0,e=r.length;t<e;t++){const e=r[t];const s=Array.isArray(e.value)?e.value:[e.value];for(let t=0,r=s.length;t<r;t++){const r=s[t];const a=m(r);const o=n%i;const l=o%a.boundary;const c=o+l;n+=l;if(c!==0&&i-c<a.storage){n+=i-c}e.__data=new Float32Array(a.storage/Float32Array.BYTES_PER_ELEMENT);e.__offset=n;n+=a.storage}}}const r=n%i;if(r>0)n+=i-r;t.__size=n;t.__cache={};return this}function m(t){const e={boundary:0,storage:0};if(typeof t==="number"||typeof t==="boolean"){e.boundary=4;e.storage=4}else if(t.isVector2){e.boundary=8;e.storage=8}else if(t.isVector3||t.isColor){e.boundary=16;e.storage=12}else if(t.isVector4){e.boundary=16;e.storage=16}else if(t.isMatrix3){e.boundary=48;e.storage=48}else if(t.isMatrix4){e.boundary=64;e.storage=64}else if(t.isTexture){console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.")}else{console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",t)}return e}function g(e){const n=e.target;n.removeEventListener("dispose",g);const i=a.indexOf(n.__bindingPointIndex);a.splice(i,1);t.deleteBuffer(r[n.id]);delete r[n.id];delete s[n.id]}function _(){for(const e in r){t.deleteBuffer(r[e])}a=[];r={};s={}}return{bind:l,update:c,dispose:_}}class vv{constructor(t={}){const{canvas:n=Ai(),context:i=null,depth:r=true,stencil:s=false,alpha:a=false,antialias:o=false,premultipliedAlpha:l=true,preserveDrawingBuffer:c=false,powerPreference:u="default",failIfMajorPerformanceCaveat:h=false,reverseDepthBuffer:d=false}=t;this.isWebGLRenderer=true;let f;if(i!==null){if(typeof WebGLRenderingContext!=="undefined"&&i instanceof WebGLRenderingContext){throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.")}f=i.getContextAttributes().alpha}else{f=a}const _=new Uint32Array(4);const x=new Int32Array(4);let v=null;let y=null;const M=[];const S=[];this.domElement=n;this.debug={checkShaderErrors:true,onShaderError:null};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this.toneMapping=tt;this.toneMappingExposure=1;this.transmissionResolutionScale=1;const b=this;let T=false;this._outputColorSpace=Ke;let E=0;let w=0;let A=null;let C=-1;let R=null;const I=new qi;const P=new qi;let L=null;const D=new vs(0);let U=0;let N=n.width;let O=n.height;let F=1;let B=null;let z=null;const k=new qi(0,0,N,O);const V=new qi(0,0,N,O);let G=false;const H=new No;let W=false;let X=false;const j=new Ar;const q=new Ar;const Y=new xi;const Z=new qi;const J={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};let K=false;function $(){return A===null?F:1}let Q=i;function et(t,e){return n.getContext(t,e)}try{const t={alpha:true,depth:r,stencil:s,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:u,failIfMajorPerformanceCaveat:h};if("setAttribute"in n)n.setAttribute("data-engine",`three.js r${e}`);n.addEventListener("webglcontextlost",Nt,false);n.addEventListener("webglcontextrestored",kt,false);n.addEventListener("webglcontextcreationerror",Vt,false);if(Q===null){const e="webgl2";Q=et(e,t);if(Q===null){if(et(e)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}}catch(t){console.error("THREE.WebGLRenderer: "+t.message);throw t}let nt,it,rt,st;let at,ot,lt,ct,ut,ht,dt;let ft,pt,mt,gt,_t,xt;let vt,yt,Mt,St;let bt,Tt,Et;let wt,Ct,It;function Pt(){nt=new $g(Q);nt.init();bt=new uv(Q,nt);it=new Ag(Q,nt,t,bt);rt=new lv(Q,nt);if(it.reverseDepthBuffer&&d){rt.buffers.depth.setReversed(true)}st=new e_(Q);at=new jx;ot=new cv(Q,nt,rt,at,it,bt,st);lt=new Rg(b);ct=new Kg(b);ut=new Of(Q);Tt=new Eg(Q,ut);ht=new Qg(Q,ut,st,Tt);dt=new i_(Q,ht,ut,st);yt=new n_(Q,it,ot);_t=new Cg(at);ft=new Xx(b,lt,ct,nt,it,Tt,_t);pt=new _v(b,at);mt=new Jx;gt=new iv(nt);vt=new Tg(b,lt,ct,rt,dt,f,l);xt=new av(b,dt,it);Et=new xv(Q,st,it,rt);Mt=new wg(Q,nt,st);St=new t_(Q,nt,st);st.programs=ft.programs;b.capabilities=it;b.extensions=nt;b.properties=at;b.renderLists=mt;b.shadowMap=xt;b.state=rt;b.info=st;wt=Math.min(Q.getParameter(Q.RED_BITS),8);Ct=Math.min(Q.getParameter(Q.GREEN_BITS),8);It=Math.min(Q.getParameter(Q.BLUE_BITS),8)}Pt();const Dt=new pv(b,Q);this.xr=Dt;this.getContext=function(){return Q};this.getContextRedBits=function(){return wt};this.getContextGreenBits=function(){return Ct};this.getContextBlueBits=function(){return It};this.getContextAttributes=function(){return Q.getContextAttributes()};this.forceContextLoss=function(){const t=nt.get("WEBGL_lose_context");if(t)t.loseContext()};this.forceContextRestore=function(){const t=nt.get("WEBGL_lose_context");if(t)t.restoreContext()};this.getPixelRatio=function(){return F};this.setPixelRatio=function(t){if(t===undefined)return;F=t;this.setSize(N,O,false)};this.getSize=function(t){return t.set(N,O)};this.setSize=function(t,e,i=true){if(Dt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}N=t;O=e;n.width=Math.floor(t*F);n.height=Math.floor(e*F);if(i===true){n.style.width=t+"px";n.style.height=e+"px"}this.setViewport(0,0,t,e)};this.getDrawingBufferSize=function(t){return t.set(N*F,O*F).floor()};this.setDrawingBufferSize=function(t,e,i){N=t;O=e;F=i;n.width=Math.floor(t*i);n.height=Math.floor(e*i);this.setViewport(0,0,t,e)};this.getCurrentViewport=function(t){return t.copy(I)};this.getViewport=function(t){return t.copy(k)};this.setViewport=function(t,e,n,i){if(t.isVector4){k.set(t.x,t.y,t.z,t.w)}else{k.set(t,e,n,i)}rt.viewport(I.copy(k).multiplyScalar(F).round())};this.getScissor=function(t){return t.copy(V)};this.setScissor=function(t,e,n,i){if(t.isVector4){V.set(t.x,t.y,t.z,t.w)}else{V.set(t,e,n,i)}rt.scissor(P.copy(V).multiplyScalar(F).round())};this.getScissorTest=function(){return G};this.setScissorTest=function(t){rt.setScissorTest(G=t)};this.setOpaqueSort=function(t){B=t};this.setTransparentSort=function(t){z=t};this.getClearColor=function(t){return t.copy(vt.getClearColor())};this.setClearColor=function(){vt.setClearColor(...arguments)};this.getClearAlpha=function(){return vt.getClearAlpha()};this.setClearAlpha=function(){vt.setClearAlpha(...arguments)};this.clear=function(t=true,e=true,n=true){let i=0;if(t){let t=false;if(A!==null){const e=A.texture.format;t=e===Kt||e===Zt||e===qt}if(t){const t=A.texture.type;const e=t===Rt||t===Ut||t===Lt||t===zt||t===Ft||t===Bt;const n=vt.getClearColor();const i=vt.getClearAlpha();const r=n.r;const s=n.g;const a=n.b;if(e){_[0]=r;_[1]=s;_[2]=a;_[3]=i;Q.clearBufferuiv(Q.COLOR,0,_)}else{x[0]=r;x[1]=s;x[2]=a;x[3]=i;Q.clearBufferiv(Q.COLOR,0,x)}}else{i|=Q.COLOR_BUFFER_BIT}}if(e){i|=Q.DEPTH_BUFFER_BIT}if(n){i|=Q.STENCIL_BUFFER_BIT;this.state.buffers.stencil.setMask(4294967295)}Q.clear(i)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){n.removeEventListener("webglcontextlost",Nt,false);n.removeEventListener("webglcontextrestored",kt,false);n.removeEventListener("webglcontextcreationerror",Vt,false);vt.dispose();mt.dispose();gt.dispose();at.dispose();lt.dispose();ct.dispose();dt.dispose();Tt.dispose();Et.dispose();ft.dispose();Dt.dispose();Dt.removeEventListener("sessionstart",Jt);Dt.removeEventListener("sessionend",$t);Qt.stop()};function Nt(t){t.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");T=true}function kt(){console.log("THREE.WebGLRenderer: Context Restored.");T=false;const t=st.autoReset;const e=xt.enabled;const n=xt.autoUpdate;const i=xt.needsUpdate;const r=xt.type;Pt();st.autoReset=t;xt.enabled=e;xt.autoUpdate=n;xt.needsUpdate=i;xt.type=r}function Vt(t){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",t.statusMessage)}function Gt(t){const e=t.target;e.removeEventListener("dispose",Gt);Ht(e)}function Ht(t){Wt(t);at.remove(t)}function Wt(t){const e=at.get(t).programs;if(e!==undefined){e.forEach(function(t){ft.releaseProgram(t)});if(t.isShaderMaterial){ft.releaseShaderCache(t)}}}this.renderBufferDirect=function(t,e,n,i,r,s){if(e===null)e=J;const a=r.isMesh&&r.matrixWorld.determinant()<0;const o=A?A.width:N*F;const l=this.pointScale||16e3;const c=le(t,e,n,i,r,l*o/1024);rt.setMaterial(i,a);let u=n.index;let h=1;if(i.wireframe===true){u=ht.getWireframeAttribute(n);if(u===undefined)return;h=2}const d=n.drawRange;const f=n.attributes.position;let p=d.start*h;let m=(d.start+d.count)*h;if(s!==null){p=Math.max(p,s.start*h);m=Math.min(m,(s.start+s.count)*h)}if(u!==null){p=Math.max(p,0);m=Math.min(m,u.count)}else if(f!==undefined&&f!==null){p=Math.max(p,0);m=Math.min(m,f.count)}const g=m-p;if(g<0||g===Infinity)return;Tt.setup(r,i,c,n,u,st);let _;let x=Mt;if(u!==null){_=ut.get(u);x=St;x.setIndex(_)}if(r.isMesh){if(i.wireframe===true){rt.setLineWidth(i.wireframeLinewidth*$());x.setMode(Q.LINES)}else{x.setMode(Q.TRIANGLES)}}else if(r.isLine){let t=i.linewidth;if(t===undefined)t=1;rt.setLineWidth(t*$());if(r.isLineSegments){x.setMode(Q.LINES)}else if(r.isLineLoop){x.setMode(Q.LINE_LOOP)}else{x.setMode(Q.LINE_STRIP)}}else if(r.isPoints){x.setMode(Q.POINTS)}else if(r.isSprite){x.setMode(Q.TRIANGLES)}if(r.isBatchedMesh){if(r._multiDrawInstances!==null){Ri("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");x.renderMultiDrawInstances(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount,r._multiDrawInstances)}else{if(!nt.get("WEBGL_multi_draw")){const t=r._multiDrawStarts;const e=r._multiDrawCounts;const n=r._multiDrawCount;const s=u?ut.get(u).bytesPerElement:1;const a=at.get(i).currentProgram.getUniforms();for(let i=0;i<n;i++){a.setValue(Q,"_gl_DrawID",i);x.render(t[i]/s,e[i])}}else{x.renderMultiDraw(r._multiDrawStarts,r._multiDrawCounts,r._multiDrawCount)}}}else if(r.isInstancedMesh){x.renderInstances(p,g,r.count)}else if(n.isInstancedBufferGeometry){const t=n._maxInstanceCount!==undefined?n._maxInstanceCount:Infinity;const e=Math.min(n.instanceCount,t);x.renderInstances(p,g,e)}else if(r.userData.isGeometryCluster&&n.userData.renderInstanceCount){x.renderInstances(p,g,n.userData.renderInstanceCount)}else{x.render(p,g)}};function Xt(t,e,n){if(t.transparent===true&&t.side===g&&t.forceSinglePass===false){t.side=m;t.needsUpdate=true;se(t,e,n);t.side=p;t.needsUpdate=true;se(t,e,n);t.side=g}else{se(t,e,n)}}this.compile=function(t,e,n=null){if(n===null)n=t;y=gt.get(n);y.init(e);S.push(y);n.traverseVisible(function(t){if(t.isLight&&t.layers.test(e.layers)){y.pushLight(t);if(t.castShadow){y.pushShadow(t)}}});if(t!==n){t.traverseVisible(function(t){if(t.isLight&&t.layers.test(e.layers)){y.pushLight(t);if(t.castShadow){y.pushShadow(t)}}})}y.setupLights();const i=new Set;t.traverse(function(t){if(!(t.isMesh||t.isPoints||t.isLine||t.isSprite)){return}const e=t.material;if(e){if(Array.isArray(e)){for(let r=0;r<e.length;r++){const s=e[r];Xt(s,n,t);i.add(s)}}else{Xt(e,n,t);i.add(e)}}});y=S.pop();return i};this.compileAsync=function(t,e,n=null){const i=this.compile(t,e,n);return new Promise(e=>{function n(){i.forEach(function(t){const e=at.get(t);const n=e.currentProgram;if(n.isReady()){i.delete(t)}});if(i.size===0){e(t);return}setTimeout(n,10)}if(nt.get("KHR_parallel_shader_compile")!==null){n()}else{setTimeout(n,10)}})};let jt=null;function Yt(t){if(jt)jt(t)}function Jt(){Qt.stop()}function $t(){Qt.start()}const Qt=new Nf;Qt.setAnimationLoop(Yt);if(typeof self!=="undefined")Qt.setContext(self);this.setAnimationLoop=function(t){jt=t;Dt.setAnimationLoop(t);t===null?Qt.stop():Qt.start()};Dt.addEventListener("sessionstart",Jt);Dt.addEventListener("sessionend",$t);this.render=function(t,e){if(e!==undefined&&e.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(T===true)return;if(t.matrixWorldAutoUpdate===true)t.updateMatrixWorld();if(e.parent===null&&e.matrixWorldAutoUpdate===true)e.updateMatrixWorld();if(Dt.enabled===true&&Dt.isPresenting===true){if(Dt.cameraAutoUpdate===true)Dt.updateCamera(e);e=Dt.getCamera()}this.info.render.vramAllocated=this.info.render.vramUpdated=0;if(t.isScene===true)t.onBeforeRender(b,t,e,A);y=gt.get(t,S.length);y.init(e);S.push(y);q.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse);H.setFromProjectionMatrix(q);X=this.localClippingEnabled;W=_t.init(this.clippingPlanes,X);v=mt.get(t,M.length);v.init(false);M.push(v);if(Dt.enabled===true&&Dt.isPresenting===true){const t=b.xr.getDepthSensingMesh();if(t!==null){te(t,e,-Infinity,b.sortObjects)}}const n=t.userData;const i=n.geometryClusters;if(i&&n.useGeometryClusters!==false){for(let t=0,n=i.length;t<n;++t){const n=i[t];if(n.geometry.boundingSphere&&!n.material.transparent){te(n,e,0,b.sortObjects,true)}const r=n.additionalRenderables;for(let t=0,n=r.length;t<n;++t){te(r[t],e,0,b.sortObjects,true)}}}let r=n.doTraversalRendering;if(v.opaque.length===0&&v.transparent.length===0){te(t,e,0,b.sortObjects);r=false}else{for(let n=0,i=t.children.length;n<i;++n){const i=t.children[n];if(i.name==="DefaultLights"){te(i,e,0,b.sortObjects)}}}v.finish();if(b.sortObjects===true){v.sort(B,z)}K=Dt.enabled===false||Dt.isPresenting===false||Dt.hasDepthSensing()===false;if(K){vt.addToRenderList(v,t)}this.info.render.frame++;if(W===true)_t.beginShadows();const s=y.state.shadowsArray;xt.render(s,t,e);if(W===true)_t.endShadows();if(this.info.autoReset===true)this.info.reset();const a=v.opaque;const o=v.transmissive;y.setupLights();if(e.isArrayCamera){const n=e.cameras;if(o.length>0){for(let e=0,i=n.length;e<i;e++){const i=n[e];ne(a,o,t,i)}}if(K)vt.render(t);for(let e=0,i=n.length;e<i;e++){const i=n[e];ee(v,t,i,i.viewport)}}else{if(o.length>0)ne(a,o,t,e);if(K)vt.render(t);ee(v,t,e)}if(r){y.init();v.init(true);te(t,e,0,b.sortObjects);v.finish();if(b.sortObjects===true){v.sort(B,z)}y.setupLights(b.useLegacyLights);if(e.isArrayCamera){const n=e.cameras;for(let e=0,i=n.length;e<i;e++){const i=n[e];ee(v,t,i,i.viewport)}}else{ee(v,t,e)}}if(A!==null&&w===0){ot.updateMultisampleRenderTarget(A);ot.updateRenderTargetMipmap(A)}if(t.isScene===true)t.onAfterRender(b,t,e);Tt.resetDefaultState();C=-1;R=null;S.pop();if(S.length>0){y=S[S.length-1];if(W===true)_t.setGlobalState(b.clippingPlanes,y.state.camera)}else{y=null}M.pop();if(M.length>0){v=M[M.length-1]}else{v=null}};function te(t,e,n,i,r){if(t.visible===false)return;const s=t.layers.test(e.layers);if(s){if(t.isGroup){n=t.renderOrder}else if(t.isLOD){if(t.autoUpdate===true)t.update(e)}else if(t.isLight){y.pushLight(t);if(t.castShadow){y.pushShadow(t)}}else if(t.isSprite){if(!t.frustumCulled||H.intersectsSprite(t)){if(i){Z.setFromMatrixPosition(t.matrixWorld).applyMatrix4(q)}const e=dt.update(t);const r=t.material;if(r.visible){const i=t.userData.renderGroup;v.push(t,e,r,n,Z.z,i?i:null)}}}else if(t.isMesh||t.isLine||t.isPoints){if(!t.frustumCulled||H.intersectsObject(t)){const e=dt.update(t);const r=t.material;if(i){if(t.boundingSphere!==undefined){if(t.boundingSphere===null)t.computeBoundingSphere();Z.copy(t.boundingSphere.center)}else{if(e.boundingSphere===null)e.computeBoundingSphere();Z.copy(e.boundingSphere.center)}Z.applyMatrix4(t.matrixWorld).applyMatrix4(q)}if(Array.isArray(r)){const i=e.groups;for(let s=0,a=i.length;s<a;s++){const a=i[s];const o=r[a.materialIndex];if(o&&o.visible){v.push(t,e,o,n,Z.z,a)}}}else if(r.visible){const i=t.userData.renderGroup;v.push(t,e,r,n,Z.z,i?i:null)}}}}if(r!==true){const r=t.children;for(let t=0,s=r.length;t<s;t++){te(r[t],e,n,i)}}}function ee(t,e,n,i){const r=t.opaque;const s=t.transmissive;const a=t.transparent;y.setupLightsView(n);if(W===true)_t.setGlobalState(b.clippingPlanes,n);if(i)rt.viewport(I.copy(i));if(r.length>0)ie(r,e,n);if(s.length>0)ie(s,e,n);if(a.length>0)ie(a,e,n);rt.buffers.depth.setTest(true);rt.buffers.depth.setMask(true);rt.buffers.color.setMask(true);rt.setPolygonOffset(false)}function ne(t,e,n,i){const r=n.isScene===true?n.overrideMaterial:null;if(r!==null){return}if(y.state.transmissionRenderTarget[i.id]===undefined){y.state.transmissionRenderTarget[i.id]=new Zi(1,1,{generateMipmaps:true,type:nt.has("EXT_color_buffer_half_float")||nt.has("EXT_color_buffer_float")?Ot:Rt,minFilter:At,samples:4,stencilBuffer:s,resolveDepthBuffer:false,resolveStencilBuffer:false,colorSpace:Oi.workingColorSpace})}const a=y.state.transmissionRenderTarget[i.id];const o=i.viewport||I;a.setSize(o.z*b.transmissionResolutionScale,o.w*b.transmissionResolutionScale);const l=b.getRenderTarget();const c=b.getActiveCubeFace();const u=b.getActiveMipmapLevel();b.setRenderTarget(a);b.getClearColor(D);U=b.getClearAlpha();if(U<1)b.setClearColor(16777215,.5);b.clear();if(K)vt.render(n);const h=b.toneMapping;b.toneMapping=tt;const d=i.viewport;if(i.viewport!==undefined)i.viewport=undefined;y.setupLightsView(i);if(W===true)_t.setGlobalState(b.clippingPlanes,i);ie(t,n,i);ot.updateMultisampleRenderTarget(a);ot.updateRenderTargetMipmap(a);if(nt.has("WEBGL_multisampled_render_to_texture")===false){let t=false;for(let r=0,s=e.length;r<s;r++){const s=e[r];const a=s.object;const o=s.geometry;const l=s.material;const c=s.group;if(l.side===g&&a.layers.test(i.layers)){const e=l.side;l.side=m;l.needsUpdate=true;re(a,n,i,o,l,c);l.side=e;l.needsUpdate=true;t=true}}if(t===true){ot.updateMultisampleRenderTarget(a);ot.updateRenderTargetMipmap(a)}}b.setRenderTarget(l,c,u);b.setClearColor(D,U);if(d!==undefined)i.viewport=d;b.toneMapping=h}function ie(t,e,n){const i=e.isScene===true?e.overrideMaterial:null;for(let r=0,s=t.length;r<s;r++){const s=t[r];const a=s.object;const o=s.geometry;const l=s.group;let c=s.material;if(c.allowOverride===true&&i!==null){c=i}if(a.layers.test(n.layers)){re(a,e,n,o,c,l)}}}function re(t,e,n,i,r,s){t.onBeforeRender(b,e,n,i,r,s);t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld);t.normalMatrix.getNormalMatrix(t.modelViewMatrix);r.onBeforeRender(b,e,n,i,t,s);if(r.transparent===true&&r.side===g&&r.forceSinglePass===false){r.side=m;r.needsUpdate=true;b.renderBufferDirect(n,e,i,r,t,s);r.side=p;r.needsUpdate=true;b.renderBufferDirect(n,e,i,r,t,s);r.side=g}else{b.renderBufferDirect(n,e,i,r,t,s)}t.onAfterRender(b,e,n,i,r,s)}function se(t,e,n){if(e.isScene!==true)e=J;const i=at.get(t);const r=y.state.lights;const s=y.state.shadowsArray;const a=r.state.version;const o=ft.getParameters(t,r.state,s,e,n);const l=ft.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null;i.fog=e.fog;i.envMap=(t.isMeshStandardMaterial?ct:lt).get(t.envMap||i.environment);i.envMapRotation=i.environment!==null&&t.envMap===null?e.environmentRotation:t.envMapRotation;if(c===undefined){t.addEventListener("dispose",Gt);c=new Map;i.programs=c}let u=c.get(l);if(u!==undefined){if(i.currentProgram===u&&i.lightsStateVersion===a){oe(t,o);return u}}else{o.uniforms=ft.getUniforms(t);t.onBeforeCompile(o,b);u=ft.acquireProgram(o,l);c.set(l,u);i.uniforms=o.uniforms}const h=i.uniforms;if(!t.isShaderMaterial&&!t.isRawShaderMaterial||t.clipping===true){h.clippingPlanes=_t.uniform}oe(t,o);i.needsLights=ue(t);i.lightsStateVersion=a;if(i.needsLights){h.ambientLightColor.value=r.state.ambient;h.lightProbe.value=r.state.probe;h.directionalLights.value=r.state.directional;h.directionalLightShadows.value=r.state.directionalShadow;h.spotLights.value=r.state.spot;h.spotLightShadows.value=r.state.spotShadow;h.rectAreaLights.value=r.state.rectArea;h.ltc_1.value=r.state.rectAreaLTC1;h.ltc_2.value=r.state.rectAreaLTC2;h.pointLights.value=r.state.point;h.pointLightShadows.value=r.state.pointShadow;h.hemisphereLights.value=r.state.hemi;h.directionalShadowMap.value=r.state.directionalShadowMap;h.directionalShadowMatrix.value=r.state.directionalShadowMatrix;h.spotShadowMap.value=r.state.spotShadowMap;h.spotLightMatrix.value=r.state.spotLightMatrix;h.spotLightMap.value=r.state.spotLightMap;h.pointShadowMap.value=r.state.pointShadowMap;h.pointShadowMatrix.value=r.state.pointShadowMatrix}i.pointCloudGroupCount=e.userData?.pointCloudGroupMatrices?.length??0;i.currentProgram=u;i.uniformsList=null;return u}function ae(t){if(t.uniformsList===null){const e=t.currentProgram.getUniforms();t.uniformsList=ux.seqWithValue(e.seq,t.uniforms)}return t.uniformsList}function oe(t,e){const n=at.get(t);n.outputColorSpace=e.outputColorSpace;n.batching=e.batching;n.batchingColor=e.batchingColor;n.instancing=e.instancing;n.instancingColor=e.instancingColor;n.instancingMorph=e.instancingMorph;n.skinning=e.skinning;n.morphTargets=e.morphTargets;n.morphNormals=e.morphNormals;n.morphColors=e.morphColors;n.morphTargetsCount=e.morphTargetsCount;n.numClippingPlanes=e.numClippingPlanes;n.numIntersection=e.numClipIntersection;n.vertexAlphas=e.vertexAlphas;n.vertexTangents=e.vertexTangents;n.toneMapping=e.toneMapping}function le(t,e,n,i,r,s){if(e.isScene!==true)e=J;ot.resetTextureUnits();const a=e.fog;const o=i.isMeshStandardMaterial?e.environment:null;const l=A===null?b.outputColorSpace:A.isXRRenderTarget===true?A.texture.colorSpace:$e;const c=(i.isMeshStandardMaterial?ct:lt).get(i.envMap||o);const u=i.vertexColors===true&&!!n.attributes.color&&n.attributes.color.itemSize===4;const h=!!n.attributes.tangent&&(!!i.normalMap||i.anisotropy>0);const d=!!n.morphAttributes.position;const f=!!n.morphAttributes.normal;const p=!!n.morphAttributes.color;let m=tt;if(i.toneMapped){if(A===null||A.isXRRenderTarget===true){m=b.toneMapping}}const g=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color;const _=g!==undefined?g.length:0;const x=at.get(i);const v=y.state.lights;if(W===true){if(X===true||t!==R){const e=t===R&&i.id===C;_t.setState(i,t,e)}}let M=false;if(i.version===x.__version){if(x.needsLights&&x.lightsStateVersion!==v.state.version){M=true}else if(x.outputColorSpace!==l){M=true}else if(r.isBatchedMesh&&x.batching===false){M=true}else if(!r.isBatchedMesh&&x.batching===true){M=true}else if(r.isBatchedMesh&&x.batchingColor===true&&r.colorTexture===null){M=true}else if(r.isBatchedMesh&&x.batchingColor===false&&r.colorTexture!==null){M=true}else if(r.isInstancedMesh&&x.instancing===false){M=true}else if(!r.isInstancedMesh&&x.instancing===true){M=true}else if(r.isSkinnedMesh&&x.skinning===false){M=true}else if(!r.isSkinnedMesh&&x.skinning===true){M=true}else if(r.isInstancedMesh&&x.instancingColor===true&&r.instanceColor===null){M=true}else if(r.isInstancedMesh&&x.instancingColor===false&&r.instanceColor!==null){M=true}else if(r.isInstancedMesh&&x.instancingMorph===true&&r.morphTexture===null){M=true}else if(r.isInstancedMesh&&x.instancingMorph===false&&r.morphTexture!==null){M=true}else if(x.envMap!==c){M=true}else if(i.fog===true&&x.fog!==a){M=true}else if(x.numClippingPlanes!==undefined&&(x.numClippingPlanes!==_t.numPlanes||x.numIntersection!==_t.numIntersection)){M=true}else if((x.pointCloudGroupCount??0)!==(e.userData?.pointCloudGroupMatrices?.length??0)){M=true}else if(x.vertexAlphas!==u){M=true}else if(x.vertexTangents!==h){M=true}else if(x.morphTargets!==d){M=true}else if(x.morphNormals!==f){M=true}else if(x.morphColors!==p){M=true}else if(x.toneMapping!==m){M=true}else if(x.morphTargetsCount!==_){M=true}}else{M=true;x.__version=i.version}let S=x.currentProgram;if(M===true){S=se(i,e,r)}let T=false;let E=false;let w=false;const I=S.getUniforms(),P=x.uniforms;if(rt.useProgram(S.program)){T=true;E=true;w=true}if(i.id!==C){C=i.id;E=true}if(T||R!==t){const e=rt.buffers.depth.getReversed();if(e){j.copy(t.projectionMatrix);Pi(j);Li(j);I.setValue(Q,"projectionMatrix",j)}else{I.setValue(Q,"projectionMatrix",t.projectionMatrix)}I.setValue(Q,"viewMatrix",t.matrixWorldInverse);const n=I.map.cameraPosition;if(n!==undefined){n.setValue(Q,Y.setFromMatrixPosition(t.matrixWorld))}if(it.logarithmicDepthBuffer){I.setValue(Q,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2))}if(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial){I.setValue(Q,"isOrthographic",t.isOrthographicCamera===true)}if(R!==t){R=t;E=true;w=true}}if(r.isSkinnedMesh){I.setOptional(Q,r,"bindMatrix");I.setOptional(Q,r,"bindMatrixInverse");const t=r.skeleton;if(t){if(t.boneTexture===null)t.computeBoneTexture();I.setValue(Q,"boneTexture",t.boneTexture,ot)}}if(r.isBatchedMesh){I.setOptional(Q,r,"batchingTexture");I.setValue(Q,"batchingTexture",r._matricesTexture,ot);I.setOptional(Q,r,"batchingIdTexture");I.setValue(Q,"batchingIdTexture",r._indirectTexture,ot);I.setOptional(Q,r,"batchingColorTexture");if(r._colorsTexture!==null){I.setValue(Q,"batchingColorTexture",r._colorsTexture,ot)}}const L=n.morphAttributes;if(L.position!==undefined||L.normal!==undefined||L.color!==undefined){yt.update(r,n,S)}if(E||x.receiveShadow!==r.receiveShadow){x.receiveShadow=r.receiveShadow;I.setValue(Q,"receiveShadow",r.receiveShadow)}if(i.isMeshGouraudMaterial&&i.envMap!==null){P.envMap.value=c;P.flipEnvMap.value=c.isCubeTexture&&c.isRenderTargetTexture===false?-1:1}if(i.isMeshStandardMaterial&&i.envMap===null&&e.environment!==null){P.envMapIntensity.value=e.environmentIntensity}if(E){I.setValue(Q,"toneMappingExposure",b.toneMappingExposure);if(x.needsLights){ce(P,w)}if(a&&i.fog===true){pt.refreshFogUniforms(P,a)}pt.refreshMaterialUniforms(P,i,F,O,y.state.transmissionRenderTarget[t.id]);ux.upload(Q,ae(x),P,ot)}if(i.isShaderMaterial&&i.uniformsNeedUpdate===true){ux.upload(Q,ae(x),P,ot);i.uniformsNeedUpdate=false}if(i.isSpriteMaterial){I.setValue(Q,"center",r.center)}I.setValue(Q,"modelViewMatrix",r.modelViewMatrix);I.setValue(Q,"normalMatrix",r.normalMatrix);I.setValue(Q,"modelMatrix",r.matrixWorld);const D=r.userData.isGeometryCluster===true||n.userData.isPointCloud&&i.specularMap!=null;I.setValue(Q,"useDataTexture",D);I.setValue(Q,"pointSize",n.userData.isPointCloud?(r.userData.pointSize||1)*s:-1);if(n.attributes.color){I.setValue(Q,"useVertexColors",n.attributes.normal?1:2)}else{I.setValue(Q,"useVertexColors",0)}if(n.userData.isPointCloud&&e.userData&&e.userData.pointCloudGroupMatrices){I.setValue(Q,"pointCloudGroupMatrices",e.userData.pointCloudGroupMatrices);I.setValue(Q,"pointCloudGroupColors",e.userData.pointCloudGroupColors)}if(i.isShaderMaterial||i.isRawShaderMaterial){const t=i.uniformsGroups;for(let e=0,n=t.length;e<n;e++){const n=t[e];Et.update(n,S);Et.bind(n,S)}}return S}function ce(t,e){t.ambientLightColor.needsUpdate=e;t.lightProbe.needsUpdate=e;t.directionalLights.needsUpdate=e;t.directionalLightShadows.needsUpdate=e;t.pointLights.needsUpdate=e;t.pointLightShadows.needsUpdate=e;t.spotLights.needsUpdate=e;t.spotLightShadows.needsUpdate=e;t.rectAreaLights.needsUpdate=e;t.hemisphereLights.needsUpdate=e}function ue(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&t.lights===true}this.getActiveCubeFace=function(){return E};this.getActiveMipmapLevel=function(){return w};this.getRenderTarget=function(){return A};this.setRenderTargetTextures=function(t,e,n){const i=at.get(t);i.__autoAllocateDepthBuffer=t.resolveDepthBuffer===false;if(i.__autoAllocateDepthBuffer===false){i.__useRenderToTexture=false}at.get(t.texture).__webglTexture=e;at.get(t.depthTexture).__webglTexture=i.__autoAllocateDepthBuffer?undefined:n;i.__hasExternalTextures=true};this.setRenderTargetFramebuffer=function(t,e){const n=at.get(t);n.__webglFramebuffer=e;n.__useDefaultFramebuffer=e===undefined};const he=Q.createFramebuffer();this.setRenderTarget=function(t,e=0,n=0){A=t;E=e;w=n;let i=true;let r=null;let s=false;let a=false;if(t){const o=at.get(t);if(o.__useDefaultFramebuffer!==undefined){rt.bindFramebuffer(Q.FRAMEBUFFER,null);i=false}else if(o.__webglFramebuffer===undefined){ot.setupRenderTarget(t)}else if(o.__hasExternalTextures){ot.rebindTextures(t,at.get(t.texture).__webglTexture,at.get(t.depthTexture).__webglTexture)}else if(t.depthBuffer){const e=t.depthTexture;if(o.__boundDepthTexture!==e){if(e!==null&&at.has(e)&&(t.width!==e.image.width||t.height!==e.image.height)){throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.")}ot.setupDepthRenderbuffer(t)}}const l=t.texture;if(l.isData3DTexture||l.isDataArrayTexture||l.isCompressedArrayTexture){a=true}const c=at.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget){if(Array.isArray(c[e])){r=c[e][n]}else{r=c[e]}s=true}else if(t.samples>0&&ot.useMultisampledRTT(t)===false){r=at.get(t).__webglMultisampledFramebuffer}else{if(Array.isArray(c)){r=c[n]}else{r=c}}I.copy(t.viewport);P.copy(t.scissor);L=t.scissorTest}else{I.copy(k).multiplyScalar(F).floor();P.copy(V).multiplyScalar(F).floor();L=G}if(n!==0){r=he}const o=rt.bindFramebuffer(Q.FRAMEBUFFER,r);if(o&&i){rt.drawBuffers(t,r)}rt.viewport(I);rt.scissor(P);rt.setScissorTest(L);if(s){const i=at.get(t.texture);Q.framebufferTexture2D(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_CUBE_MAP_POSITIVE_X+e,i.__webglTexture,n)}else if(a){const i=at.get(t.texture);const r=e;Q.framebufferTextureLayer(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,i.__webglTexture,n,r)}else if(t!==null&&n!==0){const e=at.get(t.texture);Q.framebufferTexture2D(Q.FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,e.__webglTexture,n)}C=-1};this.readRenderTargetPixels=function(t,e,n,i,r,s,a,o=0){if(!(t&&t.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let l=at.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&a!==undefined){l=l[a]}if(l){rt.bindFramebuffer(Q.FRAMEBUFFER,l);try{const a=t.textures[o];const l=a.format;const c=a.type;if(!it.textureFormatReadable(l)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!it.textureTypeReadable(c)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if(e>=0&&e<=t.width-i&&(n>=0&&n<=t.height-r)){if(t.textures.length>1)Q.readBuffer(Q.COLOR_ATTACHMENT0+o);Q.readPixels(e,n,i,r,bt.convert(l),bt.convert(c),s)}}finally{const t=A!==null?at.get(A).__webglFramebuffer:null;rt.bindFramebuffer(Q.FRAMEBUFFER,t)}}};this.readRenderTargetPixelsAsync=async function(t,e,n,i,r,s,a,o=0){if(!(t&&t.isWebGLRenderTarget)){throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")}let l=at.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&a!==undefined){l=l[a]}if(l){if(e>=0&&e<=t.width-i&&(n>=0&&n<=t.height-r)){rt.bindFramebuffer(Q.FRAMEBUFFER,l);const a=t.textures[o];const c=a.format;const u=a.type;if(!it.textureFormatReadable(c)){throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.")}if(!it.textureTypeReadable(u)){throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.")}const h=Q.createBuffer();Q.bindBuffer(Q.PIXEL_PACK_BUFFER,h);Q.bufferData(Q.PIXEL_PACK_BUFFER,s.byteLength,Q.STREAM_READ);if(t.textures.length>1)Q.readBuffer(Q.COLOR_ATTACHMENT0+o);Q.readPixels(e,n,i,r,bt.convert(c),bt.convert(u),0);const d=A!==null?at.get(A).__webglFramebuffer:null;rt.bindFramebuffer(Q.FRAMEBUFFER,d);const f=Q.fenceSync(Q.SYNC_GPU_COMMANDS_COMPLETE,0);Q.flush();await Ii(Q,f,4);Q.bindBuffer(Q.PIXEL_PACK_BUFFER,h);Q.getBufferSubData(Q.PIXEL_PACK_BUFFER,0,s);Q.deleteBuffer(h);Q.deleteSync(f);return s}else{throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}}};this.copyFramebufferToTexture=function(t,e=null,n=0){const i=Math.pow(2,-n);const r=Math.floor(t.image.width*i);const s=Math.floor(t.image.height*i);const a=e!==null?e.x:0;const o=e!==null?e.y:0;ot.setTexture2D(t,0);Q.copyTexSubImage2D(Q.TEXTURE_2D,n,0,0,a,o,r,s);rt.unbindTexture()};const de=Q.createFramebuffer();const fe=Q.createFramebuffer();this.copyTextureToTexture=function(t,e,n=null,i=null,r=0,s=null){if(s===null){if(r!==0){Ri("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels.");s=r;r=0}else{s=0}}let a,o,l,c,u,h;let d,f,p;const m=t.isCompressedTexture?t.mipmaps[s]:t.image;if(n!==null){a=n.max.x-n.min.x;o=n.max.y-n.min.y;l=n.isBox3?n.max.z-n.min.z:1;c=n.min.x;u=n.min.y;h=n.isBox3?n.min.z:0}else{const e=Math.pow(2,-r);a=Math.floor(m.width*e);o=Math.floor(m.height*e);if(t.isDataArrayTexture){l=m.depth}else if(t.isData3DTexture){l=Math.floor(m.depth*e)}else{l=1}c=0;u=0;h=0}if(i!==null){d=i.x;f=i.y;p=i.z}else{d=0;f=0;p=0}const g=bt.convert(e.format);const _=bt.convert(e.type);let x;if(e.isData3DTexture){ot.setTexture3D(e,0);x=Q.TEXTURE_3D}else if(e.isDataArrayTexture||e.isCompressedArrayTexture){ot.setTexture2DArray(e,0);x=Q.TEXTURE_2D_ARRAY}else{ot.setTexture2D(e,0);x=Q.TEXTURE_2D}Q.pixelStorei(Q.UNPACK_FLIP_Y_WEBGL,e.flipY);Q.pixelStorei(Q.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha);Q.pixelStorei(Q.UNPACK_ALIGNMENT,e.unpackAlignment);const v=Q.getParameter(Q.UNPACK_ROW_LENGTH);const y=Q.getParameter(Q.UNPACK_IMAGE_HEIGHT);const M=Q.getParameter(Q.UNPACK_SKIP_PIXELS);const S=Q.getParameter(Q.UNPACK_SKIP_ROWS);const b=Q.getParameter(Q.UNPACK_SKIP_IMAGES);Q.pixelStorei(Q.UNPACK_ROW_LENGTH,m.width);Q.pixelStorei(Q.UNPACK_IMAGE_HEIGHT,m.height);Q.pixelStorei(Q.UNPACK_SKIP_PIXELS,c);Q.pixelStorei(Q.UNPACK_SKIP_ROWS,u);Q.pixelStorei(Q.UNPACK_SKIP_IMAGES,h);const T=t.isDataArrayTexture||t.isData3DTexture;const E=e.isDataArrayTexture||e.isData3DTexture;if(t.isDepthTexture){const n=at.get(t);const i=at.get(e);const m=at.get(n.__renderTarget);const g=at.get(i.__renderTarget);rt.bindFramebuffer(Q.READ_FRAMEBUFFER,m.__webglFramebuffer);rt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,g.__webglFramebuffer);for(let n=0;n<l;n++){if(T){Q.framebufferTextureLayer(Q.READ_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,at.get(t).__webglTexture,r,h+n);Q.framebufferTextureLayer(Q.DRAW_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,at.get(e).__webglTexture,s,p+n)}Q.blitFramebuffer(c,u,a,o,d,f,a,o,Q.DEPTH_BUFFER_BIT,Q.NEAREST)}rt.bindFramebuffer(Q.READ_FRAMEBUFFER,null);rt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,null)}else if(r!==0||t.isRenderTargetTexture||at.has(t)){const n=at.get(t);const i=at.get(e);rt.bindFramebuffer(Q.READ_FRAMEBUFFER,de);rt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,fe);for(let t=0;t<l;t++){if(T){Q.framebufferTextureLayer(Q.READ_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,n.__webglTexture,r,h+t)}else{Q.framebufferTexture2D(Q.READ_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,n.__webglTexture,r)}if(E){Q.framebufferTextureLayer(Q.DRAW_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,i.__webglTexture,s,p+t)}else{Q.framebufferTexture2D(Q.DRAW_FRAMEBUFFER,Q.COLOR_ATTACHMENT0,Q.TEXTURE_2D,i.__webglTexture,s)}if(r!==0){Q.blitFramebuffer(c,u,a,o,d,f,a,o,Q.COLOR_BUFFER_BIT,Q.NEAREST)}else if(E){Q.copyTexSubImage3D(x,s,d,f,p+t,c,u,a,o)}else{Q.copyTexSubImage2D(x,s,d,f,c,u,a,o)}}rt.bindFramebuffer(Q.READ_FRAMEBUFFER,null);rt.bindFramebuffer(Q.DRAW_FRAMEBUFFER,null)}else{if(E){if(t.isDataTexture||t.isData3DTexture){Q.texSubImage3D(x,s,d,f,p,a,o,l,g,_,m.data)}else if(e.isCompressedArrayTexture){Q.compressedTexSubImage3D(x,s,d,f,p,a,o,l,g,m.data)}else{Q.texSubImage3D(x,s,d,f,p,a,o,l,g,_,m)}}else{if(t.isDataTexture){Q.texSubImage2D(Q.TEXTURE_2D,s,d,f,a,o,g,_,m.data)}else if(t.isCompressedTexture){Q.compressedTexSubImage2D(Q.TEXTURE_2D,s,d,f,m.width,m.height,g,m.data)}else{Q.texSubImage2D(Q.TEXTURE_2D,s,d,f,a,o,g,_,m)}}}Q.pixelStorei(Q.UNPACK_ROW_LENGTH,v);Q.pixelStorei(Q.UNPACK_IMAGE_HEIGHT,y);Q.pixelStorei(Q.UNPACK_SKIP_PIXELS,M);Q.pixelStorei(Q.UNPACK_SKIP_ROWS,S);Q.pixelStorei(Q.UNPACK_SKIP_IMAGES,b);if(s===0&&e.generateMipmaps){Q.generateMipmap(x)}rt.unbindTexture()};this.copyTextureToTexture3D=function(t,e,n=null,i=null,r=0){Ri('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.');return this.copyTextureToTexture(t,e,n,i,r)};this.initRenderTarget=function(t){if(at.get(t).__webglFramebuffer===undefined){ot.setupRenderTarget(t)}};this.initTexture=function(t){if(t.isCubeTexture){ot.setTextureCube(t,0)}else if(t.isData3DTexture){ot.setTexture3D(t,0)}else if(t.isDataArrayTexture||t.isCompressedArrayTexture){ot.setTexture2DArray(t,0)}else{ot.setTexture2D(t,0)}rt.unbindTexture()};this.resetState=function(){E=0;w=0;A=null;rt.reset();Tt.reset()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}get coordinateSystem(){return Fn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorSpace=Oi._getDrawingBufferColorSpace(t);e.unpackColorSpace=Oi._getUnpackColorSpace()}}t.ACESFilmicToneMapping=rt;t.AddEquation=b;t.AddOperation=Q;t.AdditiveAnimationBlendMode=ke;t.AdditiveBlending=v;t.AgXToneMapping=at;t.AlphaFormat=Vt;t.AlwaysCompare=En;t.AlwaysDepth=W;t.AlwaysStencilFunc=_n;t.AmbientLight=Lh;t.AnimationAction=Cd;t.AnimationClip=Qu;t.AnimationLoader=ch;t.AnimationMixer=Id;t.AnimationObjectGroup=Ad;t.AnimationUtils=ku;t.ArcCurve=jl;t.ArrayCamera=Qh;t.ArrowHelper=Ef;t.AttachedBindMode=lt;t.Audio=od;t.AudioAnalyser=fd;t.AudioContext=qh;t.AudioListener=ad;t.AudioLoader=Yh;t.AxesHelper=wf;t.BackSide=m;t.BasicDepthPacking=We;t.BasicShadowMap=u;t.BatchedMesh=il;t.Bone=po;t.BooleanKeyframeTrack=ju;t.Box2=Xd;t.Box3=tr;t.Box3Helper=yf;t.BoxGeometry=ua;t.BoxHelper=vf;t.BufferAttribute=Ls;t.BufferGeometry=Zs;t.BufferGeometryLoader=zh;t.ByteType=It;t.Cache=nh;t.Camera=va;t.CameraHelper=gf;t.CanvasTexture=Pl;t.CapsuleGeometry=Dl;t.CatmullRomCurve3=$l;t.CineonToneMapping=it;t.CircleGeometry=Ul;t.ClampToEdgeWrapping=_t;t.Clock=td;t.Color=vs;t.ColorKeyframeTrack=qu;t.ColorManagement=Oi;t.CompressedArrayTexture=Rl;t.CompressedCubeTexture=Il;t.CompressedTexture=Cl;t.CompressedTextureLoader=uh;t.ConeGeometry=Ol;t.ConstantAlphaFactor=V;t.ConstantColorFactor=z;t.Controls=Cf;t.CubeCamera=wa;t.CubeReflectionMapping=ht;t.CubeRefractionMapping=dt;t.CubeTexture=Aa;t.CubeTextureLoader=fh;t.CubeUVReflectionMapping=mt;t.CubicBezierCurve=cc;t.CubicBezierCurve3=uc;t.CubicInterpolant=Gu;t.CullFaceBack=o;t.CullFaceFront=l;t.CullFaceFrontBack=c;t.CullFaceNone=a;t.Curve=Wl;t.CurvePath=_c;t.CustomBlending=S;t.CustomToneMapping=st;t.CylinderGeometry=Nl;t.Cylindrical=Gd;t.Data3DTexture=$i;t.DataArrayTexture=Ji;t.DataTexture=mo;t.DataTextureLoader=ph;t.DataUtils=Cs;t.DecrementStencilOp=an;t.DecrementWrapStencilOp=ln;t.DefaultLoadingManager=rh;t.DepthFormat=Wt;t.DepthStencilFormat=Xt;t.DepthTexture=Ll;t.DetachedBindMode=ct;t.DirectionalLight=Ph;t.DirectionalLightHelper=ff;t.DiscreteInterpolant=Wu;t.DodecahedronGeometry=Bl;t.DoubleSide=g;t.DstAlphaFactor=U;t.DstColorFactor=O;t.DynamicCopyUsage=Dn;t.DynamicDrawUsage=An;t.DynamicReadUsage=In;t.EdgesGeometry=Hl;t.EllipseCurve=Xl;t.EqualCompare=yn;t.EqualDepth=q;t.EqualStencilFunc=dn;t.EquirectangularReflectionMapping=ft;t.EquirectangularRefractionMapping=pt;t.Euler=Fr;t.EventDispatcher=Gn;t.ExtrudeGeometry=iu;t.FileLoader=lh;t.Float16BufferAttribute=ks;t.Float32BufferAttribute=Vs;t.FloatType=Nt;t.Fog=Da;t.FogExp2=La;t.FramebufferTexture=Al;t.FrontSide=p;t.Frustum=No;t.FrustumArray=Bo;t.GLBufferAttribute=Od;t.GLSL1=Nn;t.GLSL3=On;t.GreaterCompare=Sn;t.GreaterDepth=Z;t.GreaterEqualCompare=Tn;t.GreaterEqualDepth=Y;t.GreaterEqualStencilFunc=gn;t.GreaterStencilFunc=pn;t.GridHelper=lf;t.Group=Ra;t.HalfFloatType=Ot;t.HemisphereLight=_h;t.HemisphereLightHelper=of;t.IcosahedronGeometry=au;t.ImageBitmapLoader=Xh;t.ImageLoader=dh;t.ImageUtils=ki;t.IncrementStencilOp=sn;t.IncrementWrapStencilOp=on;t.InstancedBufferAttribute=vo;t.InstancedBufferGeometry=Bh;t.InstancedInterleavedBuffer=Nd;t.InstancedMesh=Ao;t.Int16BufferAttribute=Os;t.Int32BufferAttribute=Bs;t.Int8BufferAttribute=Ds;t.IntType=Dt;t.InterleavedBuffer=Na;t.InterleavedBufferAttribute=Fa;t.Interpolant=Vu;t.InterpolateDiscrete=De;t.InterpolateLinear=Ue;t.InterpolateSmooth=Ne;t.InterpolationSamplingMode=Vn;t.InterpolationSamplingType=kn;t.InvertStencilOp=cn;t.KeepStencilOp=nn;t.KeyframeTrack=Xu;t.LOD=no;t.LatheGeometry=ou;t.Layers=Br;t.LessCompare=vn;t.LessDepth=X;t.LessEqualCompare=Mn;t.LessEqualDepth=j;t.LessEqualStencilFunc=fn;t.LessStencilFunc=hn;t.Light=gh;t.LightProbe=Nh;t.Line=dl;t.Line3=Yd;t.LineBasicMaterial=rl;t.LineCurve=hc;t.LineCurve3=dc;t.LineDashedMaterial=Lu;t.LineLoop=_l;t.LineSegments=gl;t.LinearFilter=Tt;t.LinearInterpolant=Hu;t.LinearMipMapLinearFilter=Ct;t.LinearMipMapNearestFilter=wt;t.LinearMipmapLinearFilter=At;t.LinearMipmapNearestFilter=Et;t.LinearSRGBColorSpace=$e;t.LinearToneMapping=et;t.LinearTransfer=Qe;t.Loader=sh;t.LoaderUtils=Fh;t.LoadingManager=ih;t.LoopOnce=Ie;t.LoopPingPong=Le;t.LoopRepeat=Pe;t.MOUSE=r;t.Material=Ss;t.MaterialLoader=Oh;t.MathUtils=mi;t.Matrix2=Hd;t.Matrix3=Mi;t.Matrix4=Ar;t.MaxEquation=A;t.Mesh=oa;t.MeshBasicMaterial=bs;t.MeshDepthMaterial=Ru;t.MeshDistanceMaterial=Iu;t.MeshLambertMaterial=Cu;t.MeshMatcapMaterial=Pu;t.MeshNormalMaterial=Au;t.MeshPhongMaterial=Eu;t.MeshPhysicalMaterial=Tu;t.MeshStandardMaterial=bu;t.MeshToonMaterial=wu;t.MinEquation=w;t.MirroredRepeatWrapping=xt;t.MixOperation=$;t.MultiplyBlending=M;t.MultiplyOperation=K;t.NearestFilter=vt;t.NearestMipMapLinearFilter=bt;t.NearestMipMapNearestFilter=Mt;t.NearestMipmapLinearFilter=St;t.NearestMipmapNearestFilter=yt;t.NeutralToneMapping=ot;t.NeverCompare=xn;t.NeverDepth=H;t.NeverStencilFunc=un;t.NoBlending=_;t.NoColorSpace=Je;t.NoToneMapping=tt;t.NormalAnimationBlendMode=ze;t.NormalBlending=x;t.NotEqualCompare=bn;t.NotEqualDepth=J;t.NotEqualStencilFunc=mn;t.NumberKeyframeTrack=Yu;t.Object3D=ts;t.ObjectLoader=kh;t.ObjectSpaceNormalMap=Ze;t.OctahedronGeometry=lu;t.OneFactor=R;t.OneMinusConstantAlphaFactor=G;t.OneMinusConstantColorFactor=k;t.OneMinusDstAlphaFactor=N;t.OneMinusDstColorFactor=F;t.OneMinusSrcAlphaFactor=D;t.OneMinusSrcColorFactor=P;t.OrthographicCamera=Rh;t.PCFShadowMap=h;t.PCFSoftShadowMap=d;t.PMREMGenerator=Hg;t.Path=xc;t.PerspectiveCamera=ba;t.Plane=Po;t.PlaneGeometry=cu;t.PlaneHelper=Mf;t.PointLight=Ch;t.PointLightHelper=nf;t.Points=bl;t.PointsMaterial=xl;t.PolarGridHelper=cf;t.PolyhedronGeometry=Fl;t.PositionalAudio=dd;t.PropertyBinding=wd;t.PropertyMixer=pd;t.QuadraticBezierCurve=fc;t.QuadraticBezierCurve3=pc;t.Quaternion=_i;t.QuaternionKeyframeTrack=Ju;t.QuaternionLinearInterpolant=Zu;t.RED_GREEN_RGTC2_Format=Ce;t.RED_RGTC1_Format=we;t.REVISION=e;t.RGBADepthPacking=Xe;t.RGBAFormat=Ht;t.RGBAIntegerFormat=Kt;t.RGBA_ASTC_10x10_Format=ye;t.RGBA_ASTC_10x5_Format=_e;t.RGBA_ASTC_10x6_Format=xe;t.RGBA_ASTC_10x8_Format=ve;t.RGBA_ASTC_12x10_Format=Me;t.RGBA_ASTC_12x12_Format=Se;t.RGBA_ASTC_4x4_Format=ce;t.RGBA_ASTC_5x4_Format=ue;t.RGBA_ASTC_5x5_Format=he;t.RGBA_ASTC_6x5_Format=de;t.RGBA_ASTC_6x6_Format=fe;t.RGBA_ASTC_8x5_Format=pe;t.RGBA_ASTC_8x6_Format=me;t.RGBA_ASTC_8x8_Format=ge;t.RGBA_BPTC_Format=be;t.RGBA_ETC2_EAC_Format=le;t.RGBA_PVRTC_2BPPV1_Format=se;t.RGBA_PVRTC_4BPPV1_Format=re;t.RGBA_S3TC_DXT1_Format=Qt;t.RGBA_S3TC_DXT3_Format=te;t.RGBA_S3TC_DXT5_Format=ee;t.RGBDepthPacking=je;t.RGBFormat=Gt;t.RGBIntegerFormat=Jt;t.RGB_BPTC_SIGNED_Format=Te;t.RGB_BPTC_UNSIGNED_Format=Ee;t.RGB_ETC1_Format=ae;t.RGB_ETC2_Format=oe;t.RGB_PVRTC_2BPPV1_Format=ie;t.RGB_PVRTC_4BPPV1_Format=ne;t.RGB_S3TC_DXT1_Format=$t;t.RGDepthPacking=qe;t.RGFormat=Yt;t.RGIntegerFormat=Zt;t.RawShaderMaterial=Su;t.Ray=wr;t.Raycaster=Bd;t.RectAreaLight=Dh;t.RedFormat=jt;t.RedIntegerFormat=qt;t.ReinhardToneMapping=nt;t.RenderTarget=Yi;t.RenderTarget3D=Pd;t.RepeatWrapping=gt;t.ReplaceStencilOp=rn;t.ReverseSubtractEquation=E;t.RingGeometry=uu;t.SAP_PATCH=n;t.SAP_REVISION=i;t.SIGNED_RED_GREEN_RGTC2_Format=Re;t.SIGNED_RED_RGTC1_Format=Ae;t.SRGBColorSpace=Ke;t.SRGBTransfer=tn;t.Scene=Ua;t.ShaderChunk=xg;t.ShaderLib=yg;t.ShaderMaterial=xa;t.ShadowMaterial=Mu;t.Shape=vc;t.ShapeGeometry=hu;t.ShapePath=Af;t.ShapeUtils=tu;t.ShortType=Pt;t.Skeleton=xo;t.SkeletonHelper=tf;t.SkinnedMesh=fo;t.Source=Gi;t.Sphere=xr;t.SphereGeometry=fu;t.Spherical=Vd;t.SphericalHarmonics3=Uh;t.SplineCurve=mc;t.SpotLight=bh;t.SpotLightHelper=Jd;t.Sprite=$a;t.SpriteMaterial=Ba;t.SrcAlphaFactor=L;t.SrcAlphaSaturateFactor=B;t.SrcColorFactor=I;t.StaticCopyUsage=Ln;t.StaticDrawUsage=wn;t.StaticReadUsage=Rn;t.StereoCamera=$h;t.StreamCopyUsage=Un;t.StreamDrawUsage=Cn;t.StreamReadUsage=Pn;t.StringKeyframeTrack=Ku;t.SubtractEquation=T;t.SubtractiveBlending=y;t.TOUCH=s;t.TangentSpaceNormalMap=Ye;t.TetrahedronGeometry=pu;t.Texture=ji;t.TextureLoader=mh;t.TextureUtils=Uf;t.TimestampQuery=zn;t.TorusGeometry=mu;t.TorusKnotGeometry=gu;t.Triangle=ps;t.TriangleFanDrawMode=He;t.TriangleStripDrawMode=Ge;t.TrianglesDrawMode=Ve;t.TubeGeometry=_u;t.UVMapping=ut;t.Uint16BufferAttribute=Fs;t.Uint32BufferAttribute=zs;t.Uint8BufferAttribute=Us;t.Uint8ClampedBufferAttribute=Ns;t.Uniform=Ld;t.UniformsGroup=Ud;t.UniformsLib=vg;t.UniformsUtils=ma;t.UnsignedByteType=Rt;t.UnsignedInt248Type=zt;t.UnsignedInt5999Type=kt;t.UnsignedIntType=Ut;t.UnsignedShort4444Type=Ft;t.UnsignedShort5551Type=Bt;t.UnsignedShortType=Lt;t.VSMShadowMap=f;t.Vector2=gi;t.Vector3=xi;t.Vector4=qi;t.VectorKeyframeTrack=$u;t.VideoFrameTexture=wl;t.VideoTexture=El;t.WebGL3DRenderTarget=Qi;t.WebGLArrayRenderTarget=Ki;t.WebGLCoordinateSystem=Fn;t.WebGLCubeRenderTarget=Ca;t.WebGLRenderTarget=Zi;t.WebGLRenderer=vv;t.WebGLUtils=uv;t.WebGPUCoordinateSystem=Bn;t.WebXRController=Pa;t.WireframeGeometry=xu;t.WrapAroundEnding=Be;t.ZeroCurvatureEnding=Oe;t.ZeroFactor=C;t.ZeroSlopeEnding=Fe;t.ZeroStencilOp=en;t.createCanvasElement=Ai;return t}({});return t});
//# sourceMappingURL=three.js.map