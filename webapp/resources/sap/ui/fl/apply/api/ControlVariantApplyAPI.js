/*!
 * OpenUI5
 * (c) Copyright 2025 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
sap.ui.define(["sap/base/Log","sap/ui/core/util/reflection/JsControlTreeModifier","sap/ui/core/Component","sap/ui/core/Element","sap/ui/fl/apply/_internal/controlVariants/URLHandler","sap/ui/fl/apply/_internal/controlVariants/Utils","sap/ui/fl/apply/_internal/flexState/controlVariants/VariantManagementState","sap/ui/fl/apply/_internal/flexState/FlexObjectState","sap/ui/fl/initial/_internal/ManifestUtils","sap/ui/fl/Utils","sap/ui/fl/apply/_internal/init"],function(e,t,n,a,r,o,i,c,l,s){"use strict";var f="$FlexVariants";function d(e){var t=e.getModel(f);if(t){return Promise.resolve(t)}return new Promise(function(n){function a(){t=e.getModel(f);if(t){e.detachModelContextChange(a);n(t)}}e.attachModelContextChange(a)})}function m(e,t,n){const a=i.getVariantChangesForVariant({vmReference:e,reference:n});const r=i.getDefaultVariantReference({vmReference:e,reference:n});if(t.getExecuteOnSelectionForStandardDefault()&&r===e&&!a.some(e=>e.getChangeType()==="setExecuteOnSelect")){const t=i.getVariant({vmReference:e,reference:n,vReference:e});t.instance.setExecuteOnSelection(true);i.updateVariant({reference:n,variant:t.instance});return true}return false}function p(e){const n=i.getInitialUIChanges({vmReference:e.vmReference,reference:e.reference});const a=n.reduce((n,a)=>{const r=a.getSelector();const o=t.bySelector(r,e.appComponent);if(o&&s.indexOfObject(n,{selector:o})===-1){n.push({selector:o})}return n},[]);return a.length?c.waitForFlexObjectsToBeApplied(a):Promise.resolve()}function g(e){return new Promise(t=>{if(e.getDomRef()){t()}else{e.addEventDelegate({onAfterRendering(){t()}})}})}var u={getVariantModelName(){return f},getVariantModel(e){return d(e)},getVariantManagementControlByVMReference(e,t){const n=t.byId(e)?t.createId(e):e;return a.getElementById(n)},clearVariantParameterInURL(t){var n;var a=s.getAppComponentForControl(t.control);var o=a&&a.getModel(f);if(!o){e.error("Variant model could not be found on the provided control");return}if(t.control.isA("sap.ui.fl.variants.VariantManagement")){var i=o.getLocalId(t.control.getId(),a);var c=r.removeURLParameterForVariantManagement({model:o,vmReference:i});n=c.parameters}r.update({parameters:n||[],updateURL:true,updateHashEntry:!!o,model:o||{},silent:!o})},async activateVariant(t){function r(t){e.error(t);throw t}let o;if(typeof t.element==="string"){o=n.getComponentById(t.element);if(!(o instanceof n)){o=a.getElementById(t.element);if(!(o instanceof a)){r(Error("No valid component or control found for the provided ID"))}}}else if(t.element instanceof n||t.element instanceof a){o=t.element}const c=s.getAppComponentForControl(o);const d=l.getFlexReferenceForControl(o);if(!c){r(Error("A valid variant management control or component (instance or ID) should be passed as parameter"))}const m=c.getModel(f);if(!m){r(Error("No variant management model found for the passed control or application component"))}if(t.standardVariant&&!o.isA("sap.ui.fl.variants.VariantManagement")){r(Error("With using standardVariant and no variantReference, a variant management control must be passed as element"))}let p;let g;let u;if(t.standardVariant){p=o.getVariantManagementReference();g=p;u=o}else{p=i.getVariantManagementReferenceForVariant(d,t.variantReference);g=t.variantReference;if(!p){try{await i.loadVariant({reference:d,variantReference:g});p=i.getVariantManagementReferenceForVariant(d,t.variantReference)}catch(e){r(Error(`Variant with reference '${g}' could not be found`))}if(!p){r(Error("Variant management reference not found. Check the passed element and variantReference"))}}u=this.getVariantManagementControlByVMReference(p,c)}await u.waitForInit();try{await m.updateCurrentVariant({variantManagementReference:p,newVariantReference:g,appComponent:c})}catch(e){r(e)}},async attachVariantApplied(t){const n=a.getElementById(t.vmControlId);await n.waitForInit();const r=t.selector.id&&a.getElementById(t.selector.id)||t.selector;const c=s.getAppComponentForControl(r);const f=n.getVariantManagementReference();const d=l.getFlexReferenceForControl(n);const u=m(f,n,d);if(t.callAfterInitialVariant||u){p({appComponent:c,reference:d,vmReference:f}).then(()=>{const e=i.getCurrentVariantReference({vmReference:f,reference:d});const n=i.getVariant({vmReference:f,reference:d,vReference:e});t.callback(n)})}await g(r);if(o.getRelevantVariantManagementControlId(r)===t.vmControlId){n.setShowExecuteOnSelection(true);n._addVariantAppliedListener(r,t.callback)}else{e.error("Error in attachVariantApplied: The passed VariantManagement ID doesn't match the responsible VariantManagement control")}},async detachVariantApplied(e){const t=a.getElementById(e.vmControlId);const n=e.selector.id&&a.getElementById(e.selector.id)||e.selector;await Promise.all([t.waitForInit(),g(n)]);t._removeVariantAppliedListener(n)}};return u});
//# sourceMappingURL=ControlVariantApplyAPI.js.map