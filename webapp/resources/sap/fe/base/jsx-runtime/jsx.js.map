{"version":3,"file":"jsx.js","names":["renderNextAsXML","renderNextUsingRenderManager","xmlNamespaceMap","jsx","ControlType","mSettings","key","jsxControl","jsxContext","jsxFormatterContext","undefined","jsxRenderManager","jsxXml","renderUsingRenderManager","renderManager","control","renderMethod","returnValue","defineXMLNamespaceMap","async","namespaceMap","renderAsXML","getContext","setFormatterContext","context","getFormatterContext","withContext","functionToExecute","callBackReturn"],"sources":["./jsx.ts"],"sourcesContent":["import jsxControl from \"sap/fe/base/jsx-runtime/jsx-control\";\nimport jsxRenderManager from \"sap/fe/base/jsx-runtime/jsx-renderManager\";\nimport jsxXml from \"sap/fe/base/jsx-runtime/jsx-xml\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type Control from \"sap/ui/core/Control\";\nimport type Element from \"sap/ui/core/Element\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\n\nimport type View from \"sap/ui/core/mvc/View\";\n\ntype ControlPropertyNames<T> = {\n\t[K in keyof T]: T[K] extends string | boolean | Function | number | undefined | string[] ? never : K;\n}[keyof T];\nexport type ControlProperties<T> = Partial<Record<ControlPropertyNames<T>, Element>> & {\n\t[k: string]: Element;\n};\nexport type NonControlProperties<T> = Partial<Omit<T, ControlPropertyNames<T>>>;\nexport type CommandProperties = `cmd:${string}|${string}`;\n\nlet renderNextAsXML = false;\nlet renderNextUsingRenderManager: RenderManager | undefined;\nlet xmlNamespaceMap: Record<string, string> = {};\nconst jsx = function <T>(\n\tControlType: typeof Control,\n\tmSettings: NonControlProperties<T> & { key: string; children?: Element | ControlProperties<T> },\n\tkey: string\n): string | Control | Control[] | undefined {\n\tif (!renderNextAsXML && !renderNextUsingRenderManager) {\n\t\treturn jsxControl(ControlType, mSettings, key, jsxContext, jsxFormatterContext);\n\t} else if (renderNextUsingRenderManager !== undefined) {\n\t\treturn jsxRenderManager(\n\t\t\tControlType as unknown as string,\n\t\t\tmSettings as Record<string, string>,\n\t\t\tkey,\n\t\t\trenderNextUsingRenderManager\n\t\t) as unknown as string | Control | Control[] | undefined;\n\t} else {\n\t\treturn jsxXml(ControlType, mSettings, key, xmlNamespaceMap);\n\t}\n};\njsx.renderUsingRenderManager = function (renderManager: RenderManager, control: Control, renderMethod: Function): void {\n\trenderNextUsingRenderManager = renderManager;\n\tconst returnValue = renderMethod(control);\n\trenderNextUsingRenderManager = undefined;\n\treturnValue();\n};\njsx.defineXMLNamespaceMap = async function (namespaceMap: Record<string, string>, renderMethod: Function): Promise<unknown> {\n\txmlNamespaceMap = namespaceMap;\n\tconst returnValue = await renderMethod();\n\txmlNamespaceMap = {};\n\treturn returnValue;\n};\n/**\n * Indicates that the next JSX call should be rendered as XML.\n * @param renderMethod The method that needs to be rendered as XML\n * @returns The XML representation of the control\n */\njsx.renderAsXML = function <T>(renderMethod: () => T): T {\n\trenderNextAsXML = true;\n\tconst returnValue = renderMethod();\n\trenderNextAsXML = false;\n\treturn returnValue;\n};\n\nexport type Ref<T extends Element> = {\n\tcurrent?: T;\n\tsetCurrent(oControlInstance: T): void;\n};\n\nexport type JSXContext = {\n\townerControl?: Control & {\n\t\tcontrolReferences?: Record<string, Element>;\n\t\tcontrolReferencesId?: number;\n\t};\n\tview?: View;\n\tappComponent?: AppComponent;\n};\nlet jsxContext: JSXContext = {};\njsx.getContext = function (): JSXContext {\n\treturn jsxContext;\n};\n\nlet jsxFormatterContext: object = {};\njsx.setFormatterContext = function (context: object): void {\n\tjsxFormatterContext = context;\n};\n\njsx.getFormatterContext = function (): unknown {\n\treturn jsxFormatterContext;\n};\n\njsx.withContext = function <T>(context: JSXContext, functionToExecute: () => T): T {\n\tjsxContext = context;\n\tconst callBackReturn = functionToExecute();\n\tjsxContext = {};\n\treturn callBackReturn;\n};\n\nexport default jsx;\n"],"mappings":";;;;iKAmBA,IAAIA,EAAkB,MACtB,IAAIC,EACJ,IAAIC,EAA0C,CAAC,EAC/C,MAAMC,EAAM,SACXC,EACAC,EACAC,GAEA,IAAKN,IAAoBC,EAA8B,CACtD,OAAOM,EAAWH,EAAaC,EAAWC,EAAKE,EAAYC,EAC5D,MAAO,GAAIR,IAAiCS,UAAW,CACtD,OAAOC,EACNP,EACAC,EACAC,EACAL,EAEF,KAAO,CACN,OAAOW,EAAOR,EAAaC,EAAWC,EAAKJ,EAC5C,CACD,EACAC,EAAIU,yBAA2B,SAAUC,EAA8BC,EAAkBC,GACxFf,EAA+Ba,EAC/B,MAAMG,EAAcD,EAAaD,GACjCd,EAA+BS,UAC/BO,GACD,EACAd,EAAIe,sBAAwBC,eAAgBC,EAAsCJ,GACjFd,EAAkBkB,EAClB,MAAMH,QAAoBD,IAC1Bd,EAAkB,CAAC,EACnB,OAAOe,CACR,EAMAd,EAAIkB,YAAc,SAAaL,GAC9BhB,EAAkB,KAClB,MAAMiB,EAAcD,IACpBhB,EAAkB,MAClB,OAAOiB,CACR,EAeA,IAAIT,EAAyB,CAAC,EAC9BL,EAAImB,WAAa,WAChB,OAAOd,CACR,EAEA,IAAIC,EAA8B,CAAC,EACnCN,EAAIoB,oBAAsB,SAAUC,GACnCf,EAAsBe,CACvB,EAEArB,EAAIsB,oBAAsB,WACzB,OAAOhB,CACR,EAEAN,EAAIuB,YAAc,SAAaF,EAAqBG,GACnDnB,EAAagB,EACb,MAAMI,EAAiBD,IACvBnB,EAAa,CAAC,EACd,OAAOoB,CACR,EAAE,OAEazB,CAAG","ignoreList":[]}