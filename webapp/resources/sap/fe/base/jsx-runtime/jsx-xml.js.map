{"version":3,"file":"jsx-xml.js","names":["isBindingToolkitExpression","expression","_type","undefined","writeChildren","val","Array","isArray","join","escapeXMLAttributeValue","value","replace","addChildAggregation","aggregationChildren","aggregationName","child","trim","length","push","forEach","subChild","childKey","Object","keys","isAControl","children","getMetadata","FL_DELEGATE","DT_DESIGNTIME","CORE_REQUIRE","LOG_SOURCEPATH","CUSTOM_ENTITYTYPE","processObjectPropertyValue","childrenObject","namespaceAlias","propertyName","aggregationProperties","subPropName","childValue","childrenObjectElement","toString","namespacedProperty","processProperties","mSettings","metadataProperties","propertiesString","aggregationString","isControl","hasOwnProperty","propertyValue","type","getPath","compileExpression","outValue","JSON","stringify","separator","endsWith","every","propAsUI5Object","ui5object","prop","processCommand","settings","metadataEvents","commandProperty","command","eventName","split","event","startsWith","name","processAggregations","metadataAggregations","defaultAggregationName","aggregationChildKeys","writeOnlyDefaultAggregation","jsxXml","key","xmlNamespaceMap","overrideNodeName","metadata","controlName","getAllProperties","getAllEvents","getAllAssociations","getName","getAllAggregations","getDefaultAggregationName","properties","dependents","customData","aggregations","defaultAggregation","namespace","namesSplit","slice","tagName"],"sources":["./jsx-xml.ts"],"sourcesContent":["import type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression } from \"sap/fe/base/BindingToolkit\";\nimport type { ControlProperties, NonControlProperties } from \"sap/fe/base/jsx-runtime/jsx\";\nimport type BuildingBlockTemplatingBase from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplatingBase\";\nimport type Control from \"sap/ui/core/Control\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport type Context from \"sap/ui/model/Context\";\n\nfunction isBindingToolkitExpression(\n\texpression: BindingToolkitExpression<unknown> | unknown\n): expression is BindingToolkitExpression<unknown> {\n\treturn (expression as BindingToolkitExpression<unknown>)?._type !== undefined;\n}\n\nconst writeChildren = function (val: string | string[]): string {\n\tif (Array.isArray(val)) {\n\t\treturn val.join(\"\");\n\t} else {\n\t\treturn val;\n\t}\n};\n\n/**\n * Some characters needs to be escaped when used as XML attribute value, otherwise this result in incorrect XML.\n * @param value\n * @returns The escaped xml attribute\n */\nfunction escapeXMLAttributeValue(value?: string): string | undefined {\n\treturn value?.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\");\n}\n\nconst addChildAggregation = function (\n\taggregationChildren: Record<string, (Control | string)[]>,\n\taggregationName: string,\n\tchild: string | Record<string, string>\n): void {\n\tif (child === undefined) {\n\t\treturn;\n\t}\n\tif (!aggregationChildren[aggregationName]) {\n\t\taggregationChildren[aggregationName] = [];\n\t}\n\tif (typeof child === \"string\") {\n\t\tif (child.trim().length > 0) {\n\t\t\taggregationChildren[aggregationName].push(child);\n\t\t}\n\t} else if (Array.isArray(child)) {\n\t\tchild.forEach((subChild) => {\n\t\t\taddChildAggregation(aggregationChildren, aggregationName, subChild);\n\t\t});\n\t} else {\n\t\tfor (const childKey of Object.keys(child)) {\n\t\t\taddChildAggregation(aggregationChildren, childKey, child[childKey]);\n\t\t}\n\t}\n};\n\nconst isAControl = function (children?: typeof Control | Function): children is typeof Control {\n\treturn !!(children as typeof Control)?.getMetadata;\n};\n\nconst FL_DELEGATE = \"fl:delegate\";\nconst DT_DESIGNTIME = \"dt:designtime\";\nconst CORE_REQUIRE = \"core:require\";\nconst LOG_SOURCEPATH = \"log:sourcePath\";\nconst CUSTOM_ENTITYTYPE = \"customData:entityType\";\n\nfunction processObjectPropertyValue(\n\tchildrenObject: Record<string, unknown>,\n\tnamespaceAlias: string | undefined,\n\tpropertyName: string\n): string {\n\t// This is called when the child is\n\tconst aggregationProperties: string[] = [];\n\tconst aggregationChildren: string[] = [];\n\tObject.keys(childrenObject).forEach((subPropName) => {\n\t\tconst childValue = childrenObject[subPropName];\n\t\tif (childValue !== undefined) {\n\t\t\tif (typeof childValue === \"object\") {\n\t\t\t\tif (Array.isArray(childValue)) {\n\t\t\t\t\taggregationChildren.push(`<${subPropName}>`);\n\t\t\t\t\tfor (const childrenObjectElement of childValue) {\n\t\t\t\t\t\taggregationChildren.push(\n\t\t\t\t\t\t\tprocessObjectPropertyValue(childrenObjectElement as Record<string, unknown>, namespaceAlias, subPropName)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\taggregationChildren.push(`</${subPropName}>`);\n\t\t\t\t} else {\n\t\t\t\t\t// if the property is a value it needs to be serialized as a children\n\t\t\t\t\t// <myObjectProp prop1='xxx', prop2='xxt'/>\n\t\t\t\t\taggregationChildren.push(\n\t\t\t\t\t\tprocessObjectPropertyValue(childValue as Record<string, unknown>, namespaceAlias, subPropName)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise it's part of the main object just as another property\n\t\t\t\taggregationProperties.push(`${subPropName}='${escapeXMLAttributeValue(childValue.toString())}'`);\n\t\t\t}\n\t\t}\n\t});\n\n\tconst namespacedProperty = namespaceAlias ? `${namespaceAlias}:${propertyName}` : propertyName;\n\treturn `<${namespacedProperty} ${aggregationProperties.join(\" \")}>${aggregationChildren.join(\"\\n\")}</${namespacedProperty}>`;\n}\n\nfunction processProperties<T>(\n\tmSettings: Record<string, unknown>,\n\tmetadataProperties: Record<\n\t\tstring,\n\t\t{\n\t\t\tname?: string;\n\t\t\ttype?: string;\n\t\t}\n\t>,\n\tnamespaceAlias: string,\n\tpropertiesString: string[],\n\taggregationString: string[],\n\tisControl: boolean\n): void {\n\tObject.keys(metadataProperties).forEach((propertyName) => {\n\t\tif (mSettings.hasOwnProperty(propertyName) && mSettings[propertyName] !== undefined) {\n\t\t\tconst propertyValue = mSettings[propertyName];\n\t\t\tif (propertyName === CORE_REQUIRE) {\n\t\t\t\tpropertiesString.push(`xmlns:core=\"sap.ui.core\"`);\n\t\t\t}\n\t\t\tif (propertyName === FL_DELEGATE) {\n\t\t\t\tpropertiesString.push(`xmlns:fl=\"sap.ui.fl\"`);\n\t\t\t}\n\t\t\tif (propertyName === DT_DESIGNTIME) {\n\t\t\t\tpropertiesString.push(`xmlns:dt=\"sap.ui.dt\"`);\n\t\t\t}\n\t\t\tif (propertyName === LOG_SOURCEPATH) {\n\t\t\t\tpropertiesString.push(`xmlns:log=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\"`);\n\t\t\t}\n\t\t\tif (propertyName === CUSTOM_ENTITYTYPE) {\n\t\t\t\tpropertiesString.push(`xmlns:customData=\"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\"`);\n\t\t\t}\n\t\t\tif (propertyValue && typeof propertyValue === \"object\") {\n\t\t\t\tif (metadataProperties[propertyName].type === \"sap.ui.model.Context\") {\n\t\t\t\t\tpropertiesString.push(`${propertyName}='${(propertyValue as Context).getPath()}'`);\n\t\t\t\t} else if (isBindingToolkitExpression(propertyValue)) {\n\t\t\t\t\tpropertiesString.push(`${propertyName}='${escapeXMLAttributeValue(compileExpression(propertyValue))}'`);\n\t\t\t\t} else if (Array.isArray(propertyValue)) {\n\t\t\t\t\tif (propertyValue.length === 1) {\n\t\t\t\t\t\tconst outValue = typeof propertyValue[0] === \"string\" ? propertyValue[0] : JSON.stringify(propertyValue[0]);\n\t\t\t\t\t\tpropertiesString.push(`${propertyName}='${outValue}'`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst separator = metadataProperties[propertyName].type?.endsWith(\"[]\") ? \",\" : \" \";\n\t\t\t\t\t\tconst outValue = propertyValue.every((val) => typeof val === \"string\")\n\t\t\t\t\t\t\t? propertyValue.join(separator)\n\t\t\t\t\t\t\t: JSON.stringify(propertyValue);\n\t\t\t\t\t\tpropertiesString.push(`${propertyName}='${outValue}'`);\n\t\t\t\t\t}\n\t\t\t\t} else if (isControl) {\n\t\t\t\t\tconst propAsUI5Object = { ui5object: true, ...propertyValue };\n\t\t\t\t\tpropertiesString.push(`${propertyName}='${escapeXMLAttributeValue(JSON.stringify(propAsUI5Object))}'`);\n\t\t\t\t} else {\n\t\t\t\t\taggregationString.push(processObjectPropertyValue(propertyValue as Record<string, string>, undefined, propertyName));\n\t\t\t\t}\n\t\t\t} else if (propertyValue !== null) {\n\t\t\t\tconst prop = propertyValue as string | boolean | number;\n\t\t\t\tpropertiesString.push(`${propertyName}='${escapeXMLAttributeValue(prop.toString())}'`);\n\t\t\t}\n\t\t} else if (\n\t\t\tmSettings.children?.hasOwnProperty(propertyName) &&\n\t\t\tObject.keys((mSettings.children as ControlProperties<T>)?.[propertyName] ?? {}).length > 0\n\t\t) {\n\t\t\t// Object / Array properties are part of the `children` aggregation and as such still need to be processed as properties\n\t\t\tconst childrenObject = (mSettings.children as ControlProperties<T>)?.[propertyName] as unknown as Record<string, object>;\n\t\t\taggregationString.push(processObjectPropertyValue(childrenObject, namespaceAlias, propertyName));\n\t\t}\n\t});\n}\n\n/**\n * Processes the command.\n *\n * Resolves the command set on the control via the intrinsic class attribute \"jsx:command\".\n * If no command has been set or the targeted event doesn't exist, no configuration is set.\n * @param settings Metadata of the control\n * @param metadataEvents Settings of the control\n */\nfunction processCommand(\n\tsettings: Record<string, unknown>,\n\tmetadataEvents: Record<\n\t\tstring,\n\t\t{\n\t\t\tname: string;\n\t\t}\n\t>\n): void {\n\tconst commandProperty = settings[\"jsx:command\"];\n\tif (commandProperty) {\n\t\tconst [command, eventName] = (commandProperty as string).split(\"|\");\n\t\tconst event = metadataEvents[eventName];\n\t\tif (event && command.startsWith(\"cmd:\")) {\n\t\t\tsettings[event.name] = command;\n\t\t}\n\t}\n\tdelete settings[\"jsx:command\"];\n}\n\nfunction processAggregations(\n\tmSettings: Record<string, unknown>,\n\tmetadataAggregations: Record<string, object>,\n\tnamespaceAlias: string,\n\tdefaultAggregationName: string | undefined,\n\tpropertiesString: string[],\n\taggregationString: string[]\n): Record<string, string[]> {\n\tconst aggregationChildren: Record<string, string[]> = {};\n\taddChildAggregation(aggregationChildren, defaultAggregationName ?? \"customData\", mSettings.children as Record<string, string>);\n\tconst aggregationChildKeys = Object.keys(aggregationChildren);\n\tlet writeOnlyDefaultAggregation = false;\n\tif (aggregationChildKeys.length === 1 && aggregationChildKeys[0] === defaultAggregationName) {\n\t\twriteOnlyDefaultAggregation = true;\n\t}\n\tObject.keys(metadataAggregations).forEach((aggregationName) => {\n\t\tif (aggregationChildren.hasOwnProperty(aggregationName) && aggregationChildren[aggregationName].length > 0) {\n\t\t\tif (aggregationName === defaultAggregationName && writeOnlyDefaultAggregation) {\n\t\t\t\taggregationString.push(`${writeChildren(aggregationChildren[aggregationName])}`);\n\t\t\t} else {\n\t\t\t\taggregationString.push(\n\t\t\t\t\t`<${namespaceAlias}:${aggregationName}>\n\t\t\t\t\t\t${writeChildren(aggregationChildren[aggregationName])}\n\t\t\t\t\t</${namespaceAlias}:${aggregationName}>`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (mSettings.hasOwnProperty(aggregationName) && mSettings[aggregationName] !== undefined) {\n\t\t\tif (typeof mSettings[aggregationName] === \"object\") {\n\t\t\t\tpropertiesString.push(`${aggregationName}='${JSON.stringify(mSettings[aggregationName])}'`);\n\t\t\t} else {\n\t\t\t\t// In some case the aggregation expect a string value (like for the tooltip), in this case we set it directly as a property\n\t\t\t\tpropertiesString.push(`${aggregationName}='${escapeXMLAttributeValue(mSettings[aggregationName] as string)}'`);\n\t\t\t}\n\t\t}\n\t});\n\treturn aggregationChildren;\n}\n\nconst jsxXml = function <T>(\n\ttype: typeof Control | typeof BuildingBlockTemplatingBase | \"slot\",\n\tmSettings: NonControlProperties<T> & { key?: string; children?: UI5Element | ControlProperties<T>; name?: string },\n\tkey: string | undefined,\n\txmlNamespaceMap: Record<string, string>,\n\toverrideNodeName?: string\n): string {\n\tlet metadata;\n\tlet metadataProperties: Record<string, { name?: string; type?: string }>;\n\tlet metadataEvents: Record<string, { name: string }>;\n\tlet controlName;\n\tlet metadataAggregations;\n\tlet defaultAggregationName: string | undefined;\n\tlet isControl = false;\n\tif (type === \"slot\") {\n\t\treturn `<slot name=\"${mSettings.name}\"/>`;\n\t} else if (isAControl(type)) {\n\t\tmetadata = type.getMetadata();\n\t\tmetadataProperties = metadata.getAllProperties();\n\t\tmetadataProperties = { ...metadataProperties, ...metadata.getAllEvents(), ...metadata.getAllAssociations() };\n\t\tmetadataEvents = metadata.getAllEvents();\n\t\tcontrolName = metadata.getName();\n\t\tmetadataAggregations = metadata.getAllAggregations();\n\t\tdefaultAggregationName = metadata.getDefaultAggregationName();\n\t\tisControl = true;\n\t} else {\n\t\tmetadata = type.metadata;\n\t\tmetadataProperties = { ...metadata.properties };\n\t\tmetadataAggregations = { ...{ dependents: {}, customData: {} }, ...metadata.aggregations };\n\t\tmetadataEvents = {};\n\t\tdefaultAggregationName = metadata.defaultAggregation;\n\t\tcontrolName = metadata.namespace + \".\" + metadata.name;\n\t}\n\tconst namesSplit = controlName.split(\".\");\n\tif (key !== undefined) {\n\t\tmSettings[\"key\"] = key;\n\t}\n\n\tmetadataProperties[\"class\"] = { name: \"class\" };\n\tmetadataProperties[\"id\"] = { name: \"id\" };\n\tmetadataProperties[\"binding\"] = { name: \"binding\" };\n\tmetadataProperties[FL_DELEGATE] = { name: FL_DELEGATE };\n\tmetadataProperties[DT_DESIGNTIME] = { name: DT_DESIGNTIME };\n\tmetadataProperties[CORE_REQUIRE] = { name: CORE_REQUIRE };\n\tmetadataProperties[LOG_SOURCEPATH] = { name: LOG_SOURCEPATH };\n\tmetadataProperties[CUSTOM_ENTITYTYPE] = { name: CUSTOM_ENTITYTYPE };\n\tmetadataProperties[\"xmlns:fl\"] = { name: FL_DELEGATE };\n\tmetadataProperties[\"xmlns:dt\"] = { name: DT_DESIGNTIME };\n\tmetadataProperties[\"xmlns:core\"] = { name: CORE_REQUIRE };\n\tmetadataProperties[\"xmlns:log\"] = { name: LOG_SOURCEPATH };\n\tif (controlName === \"sap.ui.core.Fragment\") {\n\t\tmetadataProperties[\"fragmentName\"] = { name: \"fragmentName\" };\n\t}\n\tconst namespace = namesSplit.slice(0, -1);\n\tconst name = namesSplit[namesSplit.length - 1];\n\tlet namespaceAlias = namespace[namespace.length - 1];\n\tif (xmlNamespaceMap[namespace.join(\".\")]) {\n\t\tnamespaceAlias = xmlNamespaceMap[namespace.join(\".\")];\n\t}\n\tlet tagName = `${namespaceAlias}:${name}`;\n\tconst propertiesString: string[] = [];\n\tconst aggregationString: string[] = [];\n\tprocessCommand(mSettings, metadataEvents);\n\tprocessProperties(mSettings, metadataProperties, namespaceAlias, propertiesString, aggregationString, isControl);\n\tprocessAggregations(mSettings, metadataAggregations, namespaceAlias, defaultAggregationName, propertiesString, aggregationString);\n\tif (overrideNodeName) {\n\t\ttagName = overrideNodeName;\n\t}\n\treturn `<${tagName} xmlns:${namespaceAlias}=\"${namespace.join(\".\")}\" ${propertiesString.join(\" \")}>${aggregationString.join(\n\t\t\"\"\n\t)}</${tagName}>`;\n};\nexport default jsxXml;\n"],"mappings":"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","ignoreList":[]}