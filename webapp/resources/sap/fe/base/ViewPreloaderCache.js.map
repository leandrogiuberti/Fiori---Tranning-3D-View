{"version":3,"file":"ViewPreloaderCache.js","names":["fullCache","currentCacheEntry","values","getCurrentCacheEntry","getCacheEntryByTargetName","targetName","appComponent","getId","addEntryToCache","cacheEntry","isCurrent","arguments","length","undefined","_getFullCache","deepClone","viewPreloaderCache","_exports"],"sources":["./ViewPreloaderCache.ts"],"sourcesContent":["import deepClone from \"sap/base/util/deepClone\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\n\nexport type PageLevelCache = {\n\tvisitedContextPath?: string;\n\tvalues: Record<string, unknown>;\n\tviewShouldbeRefreshed?: boolean;\n};\nexport type ApplicationLevelCache = Record<string, PageLevelCache>;\nconst fullCache: Record<string, ApplicationLevelCache> = {};\n\nlet currentCacheEntry: PageLevelCache = {\n\tvalues: {}\n};\n\n/**\n *  Returns the current cache entry, which is a PageLevelCache object.\n * @returns The current cache entry\n */\nfunction getCurrentCacheEntry(): PageLevelCache {\n\treturn currentCacheEntry;\n}\n\n/**\n *Returns the full cache object, which contains all application level caches.\n * @param targetName\n * @param appComponent\n * @returns The full cache object for the app component.\n */\nfunction getCacheEntryByTargetName(targetName: string, appComponent: AppComponent): PageLevelCache | undefined {\n\treturn fullCache[appComponent.getId()]?.[targetName];\n}\n\n/**\n * Adds or replace a page level cache entry to the full cache.\n *  If the isCurrent parameter is true, it will also set the current cache entry.\n * @param cacheEntry\n * @param targetName\n * @param appComponent\n * @param isCurrent If true, the cache entry will be set as the current cache entry.\n */\nfunction addEntryToCache(cacheEntry: PageLevelCache, targetName: string, appComponent: AppComponent, isCurrent = true): void {\n\tif (!fullCache[appComponent.getId()]) {\n\t\tfullCache[appComponent.getId()] = {};\n\t}\n\tfullCache[appComponent.getId()][targetName] = cacheEntry;\n\tif (isCurrent) {\n\t\tcurrentCacheEntry = cacheEntry;\n\t}\n}\n\n/**\n * Returns a deep clone of the full cache object.\n * This function is used only for testing purposes.\n * @returns The full cache object.\n */\nfunction _getFullCache(): Record<string, ApplicationLevelCache> {\n\treturn deepClone(fullCache);\n}\n\nexport const viewPreloaderCache = {\n\tgetCurrentCacheEntry,\n\tgetCacheEntryByTargetName,\n\taddEntryToCache,\n\t_getFullCache\n};\n"],"mappings":";;;;4EASA,MAAMA,EAAmD,CAAC,EAE1D,IAAIC,EAAoC,CACvCC,OAAQ,CAAC,GAOV,SAASC,IACR,OAAOF,CACR,CAQA,SAASG,EAA0BC,EAAoBC,GACtD,OAAON,EAAUM,EAAaC,WAAWF,EAC1C,CAUA,SAASG,EAAgBC,EAA4BJ,EAAoBC,GAAoD,IAAxBI,EAASC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,KAChH,IAAKX,EAAUM,EAAaC,SAAU,CACrCP,EAAUM,EAAaC,SAAW,CAAC,CACpC,CACAP,EAAUM,EAAaC,SAASF,GAAcI,EAC9C,GAAIC,EAAW,CACdT,EAAoBQ,CACrB,CACD,CAOA,SAASK,IACR,OAAOC,EAAUf,EAClB,CAEO,MAAMgB,EAAqB,CACjCb,uBACAC,4BACAI,kBACAM,iBACCG,EAAAD,qBAAA,OAAAC,CAAA","ignoreList":[]}