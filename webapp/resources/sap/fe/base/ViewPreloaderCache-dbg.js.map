{"version":3,"names":["fullCache","currentCacheEntry","values","getCurrentCacheEntry","getCacheEntryByTargetName","targetName","appComponent","getId","addEntryToCache","cacheEntry","isCurrent","arguments","length","undefined","_getFullCache","deepClone","viewPreloaderCache","_exports"],"sourceRoot":".","sources":["ViewPreloaderCache.ts"],"sourcesContent":["import deepClone from \"sap/base/util/deepClone\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\n\nexport type PageLevelCache = {\n\tvisitedContextPath?: string;\n\tvalues: Record<string, unknown>;\n\tviewShouldbeRefreshed?: boolean;\n};\nexport type ApplicationLevelCache = Record<string, PageLevelCache>;\nconst fullCache: Record<string, ApplicationLevelCache> = {};\n\nlet currentCacheEntry: PageLevelCache = {\n\tvalues: {}\n};\n\n/**\n *  Returns the current cache entry, which is a PageLevelCache object.\n * @returns The current cache entry\n */\nfunction getCurrentCacheEntry(): PageLevelCache {\n\treturn currentCacheEntry;\n}\n\n/**\n *Returns the full cache object, which contains all application level caches.\n * @param targetName\n * @param appComponent\n * @returns The full cache object for the app component.\n */\nfunction getCacheEntryByTargetName(targetName: string, appComponent: AppComponent): PageLevelCache | undefined {\n\treturn fullCache[appComponent.getId()]?.[targetName];\n}\n\n/**\n * Adds or replace a page level cache entry to the full cache.\n *  If the isCurrent parameter is true, it will also set the current cache entry.\n * @param cacheEntry\n * @param targetName\n * @param appComponent\n * @param isCurrent If true, the cache entry will be set as the current cache entry.\n */\nfunction addEntryToCache(cacheEntry: PageLevelCache, targetName: string, appComponent: AppComponent, isCurrent = true): void {\n\tif (!fullCache[appComponent.getId()]) {\n\t\tfullCache[appComponent.getId()] = {};\n\t}\n\tfullCache[appComponent.getId()][targetName] = cacheEntry;\n\tif (isCurrent) {\n\t\tcurrentCacheEntry = cacheEntry;\n\t}\n}\n\n/**\n * Returns a deep clone of the full cache object.\n * This function is used only for testing purposes.\n * @returns The full cache object.\n */\nfunction _getFullCache(): Record<string, ApplicationLevelCache> {\n\treturn deepClone(fullCache);\n}\n\nexport const viewPreloaderCache = {\n\tgetCurrentCacheEntry,\n\tgetCacheEntryByTargetName,\n\taddEntryToCache,\n\t_getFullCache\n};\n"],"mappings":";;;;;;;;EASA,MAAMA,SAAgD,GAAG,CAAC,CAAC;EAE3D,IAAIC,iBAAiC,GAAG;IACvCC,MAAM,EAAE,CAAC;EACV,CAAC;;EAED;AACA;AACA;AACA;EACA,SAASC,oBAAoBA,CAAA,EAAmB;IAC/C,OAAOF,iBAAiB;EACzB;;EAEA;AACA;AACA;AACA;AACA;AACA;EACA,SAASG,yBAAyBA,CAACC,UAAkB,EAAEC,YAA0B,EAA8B;IAC9G,OAAON,SAAS,CAACM,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC,GAAGF,UAAU,CAAC;EACrD;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA,SAASG,eAAeA,CAACC,UAA0B,EAAEJ,UAAkB,EAAEC,YAA0B,EAA0B;IAAA,IAAxBI,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACpH,IAAI,CAACX,SAAS,CAACM,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MACrCP,SAAS,CAACM,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACrC;IACAP,SAAS,CAACM,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC,CAACF,UAAU,CAAC,GAAGI,UAAU;IACxD,IAAIC,SAAS,EAAE;MACdT,iBAAiB,GAAGQ,UAAU;IAC/B;EACD;;EAEA;AACA;AACA;AACA;AACA;EACA,SAASK,aAAaA,CAAA,EAA0C;IAC/D,OAAOC,SAAS,CAACf,SAAS,CAAC;EAC5B;EAEO,MAAMgB,kBAAkB,GAAG;IACjCb,oBAAoB;IACpBC,yBAAyB;IACzBI,eAAe;IACfM;EACD,CAAC;EAACG,QAAA,CAAAD,kBAAA,GAAAA,kBAAA;EAAA,OAAAC,QAAA;AAAA","ignoreList":[],"file":"ViewPreloaderCache-dbg.js"}