{"version":3,"file":"SituationsText.js","names":["types","createEdmType","attributeEDMType","EdmBoolean","EdmDate","DateTimeOffset","Decimal","Guid","Int32","EdmString","parseAttributeValue","type","value","oDataType","parseValue","parseInt","parseFloat","getType","formatter","key","template","context","this","getBindingContext","undefined","attributes","getObject","length","placeholderReplacer","match","attributeSource","attributeName","source","toString","resolvedAttribute","find","attribute","SitnInstceAttribSource","SitnInstceAttribName","Log","error","_InstanceAttributeValue","resolvedAttributeType","SitnInstceAttribEntityType","map","parsedValue","SitnInstceAttribValue","formatValue","join","replace","_exports","bindText","textTemplatePropertyPath","parts","path"],"sources":["./SituationsText.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type { PropertyBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport EdmBoolean from \"sap/ui/model/odata/type/Boolean\";\nimport EdmDate from \"sap/ui/model/odata/type/Date\";\nimport DateTimeOffset from \"sap/ui/model/odata/type/DateTimeOffset\";\nimport Decimal from \"sap/ui/model/odata/type/Decimal\";\nimport Guid from \"sap/ui/model/odata/type/Guid\";\nimport Int32 from \"sap/ui/model/odata/type/Int32\";\nimport type ODataType from \"sap/ui/model/odata/type/ODataType\";\nimport EdmString from \"sap/ui/model/odata/type/String\";\n\n/**\n * Attribute type.\n *\n * Situation Handling supports a subset of the EDM types.\n */\ntype InstanceAttributeEdmType =\n\t| \"EDM.STRING\"\n\t| \"EDM.DATE\"\n\t| \"EDM.DATETIME\"\n\t| \"EDM.DATETIMEOFFSET\"\n\t| \"EDM.INT32\"\n\t| \"EDM.DECIMAL\"\n\t| \"EDM.GUID\"\n\t| \"EDM.BOOLEAN\";\n\n/**\n * Attribute.\n */\nexport type InstanceAttribute = {\n\tSitnInstceAttribSource: string;\n\tSitnInstceAttribName: string;\n\tSitnInstceAttribEntityType: InstanceAttributeEdmType;\n\t_InstanceAttributeValue?: {\n\t\tSitnInstceAttribValue: string;\n\t}[];\n};\n\nconst types: Partial<Record<InstanceAttributeEdmType, ODataType>> = {};\n\nfunction createEdmType(attributeEDMType: InstanceAttributeEdmType): ODataType {\n\tswitch (attributeEDMType) {\n\t\tcase \"EDM.BOOLEAN\":\n\t\t\treturn new EdmBoolean();\n\t\tcase \"EDM.DATE\":\n\t\tcase \"EDM.DATETIME\":\n\t\t\treturn new EdmDate();\n\t\tcase \"EDM.DATETIMEOFFSET\":\n\t\t\treturn new DateTimeOffset();\n\t\tcase \"EDM.DECIMAL\":\n\t\t\treturn new Decimal();\n\t\tcase \"EDM.GUID\":\n\t\t\treturn new Guid();\n\t\tcase \"EDM.INT32\":\n\t\t\treturn new Int32();\n\t\tcase \"EDM.STRING\":\n\t\t\treturn new EdmString();\n\t\tdefault:\n\t\t\treturn createEdmType(\"EDM.STRING\");\n\t}\n}\n\nfunction parseAttributeValue(type: InstanceAttributeEdmType, value: string, oDataType: ODataType): unknown {\n\tswitch (type) {\n\t\tcase \"EDM.STRING\":\n\t\t\treturn value;\n\t\tcase \"EDM.DATE\":\n\t\tcase \"EDM.DATETIME\":\n\t\tcase \"EDM.DATETIMEOFFSET\":\n\t\t\treturn oDataType.parseValue(value, \"string\");\n\t\tcase \"EDM.INT32\":\n\t\t\treturn parseInt(value, 10);\n\t\tcase \"EDM.DECIMAL\":\n\t\t\treturn parseFloat(value);\n\t\tcase \"EDM.GUID\":\n\t\t\treturn value;\n\t\tcase \"EDM.BOOLEAN\":\n\t\t\t// ABAP style: 'X' = true, '' = false\n\t\t\treturn value === \"X\";\n\t\tdefault:\n\t\t\treturn value;\n\t}\n}\n\nfunction getType(attributeEDMType: InstanceAttributeEdmType): ODataType {\n\tlet type = types[attributeEDMType];\n\tif (!type) {\n\t\ttype = createEdmType(attributeEDMType);\n\t\ttypes[attributeEDMType] = type;\n\t}\n\treturn type;\n}\n\nexport function formatter(this: Control, key: string | undefined | null, template: string | undefined | null): string {\n\tconst context = this.getBindingContext();\n\tif (key === undefined || key === null || template === undefined || template === null || !context) {\n\t\treturn \"\";\n\t}\n\n\tconst attributes = context.getObject(\"_InstanceAttribute\") as InstanceAttribute[] | null | undefined;\n\tif (attributes === undefined || attributes === null || attributes.length === 0) {\n\t\treturn template;\n\t}\n\n\tconst placeholderReplacer = (match: string, attributeSource: string, attributeName: string): string => {\n\t\tconst source = parseInt(attributeSource, 10).toString(); // remove leading zeros from the attribute source\n\n\t\tconst resolvedAttribute: InstanceAttribute | undefined = attributes.find(\n\t\t\t(attribute) => attribute.SitnInstceAttribSource === source && attribute.SitnInstceAttribName === attributeName\n\t\t);\n\n\t\tif (resolvedAttribute === undefined) {\n\t\t\tLog.error(`Failed to resolve attribute ${attributeSource}.${attributeName}`);\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (!resolvedAttribute._InstanceAttributeValue) {\n\t\t\tLog.error(`Failed to resolve a value for attribute ${attributeSource}.${attributeName}`);\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst resolvedAttributeType = getType(resolvedAttribute.SitnInstceAttribEntityType);\n\n\t\t// Format the value(s) - if there are multiple, concatenate them\n\t\treturn resolvedAttribute._InstanceAttributeValue\n\t\t\t.map((value) => {\n\t\t\t\tconst parsedValue = parseAttributeValue(\n\t\t\t\t\tresolvedAttribute.SitnInstceAttribEntityType,\n\t\t\t\t\tvalue.SitnInstceAttribValue,\n\t\t\t\t\tresolvedAttributeType\n\t\t\t\t);\n\t\t\t\treturn resolvedAttributeType.formatValue(parsedValue, \"string\");\n\t\t\t})\n\t\t\t.join(\", \");\n\t};\n\n\t// Replace placeholders for attribute values.\n\t// Their format is {<digitsequence>.<something>} - e.g. {01.PURCHASECONTRACT}\n\treturn template.replace(/\\{(\\d+)\\.([^}]+)}/g, placeholderReplacer);\n}\n\nexport function bindText(textTemplatePropertyPath: string): PropertyBindingInfo {\n\treturn {\n\t\tparts: [{ path: \"SitnInstceKey\" }, { path: `_InstanceText/${textTemplatePropertyPath}` }],\n\t\tformatter: formatter\n\t};\n}\n"],"mappings":";;;;2TAuCA,MAAMA,EAA8D,CAAC,EAErE,SAASC,EAAcC,GACtB,OAAQA,GACP,IAAK,cACJ,OAAO,IAAIC,EACZ,IAAK,WACL,IAAK,eACJ,OAAO,IAAIC,EACZ,IAAK,qBACJ,OAAO,IAAIC,EACZ,IAAK,cACJ,OAAO,IAAIC,EACZ,IAAK,WACJ,OAAO,IAAIC,EACZ,IAAK,YACJ,OAAO,IAAIC,EACZ,IAAK,aACJ,OAAO,IAAIC,EACZ,QACC,OAAOR,EAAc,cAExB,CAEA,SAASS,EAAoBC,EAAgCC,EAAeC,GAC3E,OAAQF,GACP,IAAK,aACJ,OAAOC,EACR,IAAK,WACL,IAAK,eACL,IAAK,qBACJ,OAAOC,EAAUC,WAAWF,EAAO,UACpC,IAAK,YACJ,OAAOG,SAASH,EAAO,IACxB,IAAK,cACJ,OAAOI,WAAWJ,GACnB,IAAK,WACJ,OAAOA,EACR,IAAK,cAEJ,OAAOA,IAAU,IAClB,QACC,OAAOA,EAEV,CAEA,SAASK,EAAQf,GAChB,IAAIS,EAAOX,EAAME,GACjB,IAAKS,EAAM,CACVA,EAAOV,EAAcC,GACrBF,EAAME,GAAoBS,CAC3B,CACA,OAAOA,CACR,CAEO,SAASO,EAAyBC,EAAgCC,GACxE,MAAMC,EAAUC,KAAKC,oBACrB,GAAIJ,IAAQK,WAAaL,IAAQ,MAAQC,IAAaI,WAAaJ,IAAa,OAASC,EAAS,CACjG,MAAO,EACR,CAEA,MAAMI,EAAaJ,EAAQK,UAAU,sBACrC,GAAID,IAAeD,WAAaC,IAAe,MAAQA,EAAWE,SAAW,EAAG,CAC/E,OAAOP,CACR,CAEA,MAAMQ,EAAsBA,CAACC,EAAeC,EAAyBC,KACpE,MAAMC,EAASjB,SAASe,EAAiB,IAAIG,WAE7C,MAAMC,EAAmDT,EAAWU,KAClEC,GAAcA,EAAUC,yBAA2BL,GAAUI,EAAUE,uBAAyBP,GAGlG,GAAIG,IAAsBV,UAAW,CACpCe,EAAIC,MAAM,+BAA+BV,KAAmBC,KAC5D,MAAO,EACR,CAEA,IAAKG,EAAkBO,wBAAyB,CAC/CF,EAAIC,MAAM,2CAA2CV,KAAmBC,KACxE,MAAO,EACR,CAEA,MAAMW,EAAwBzB,EAAQiB,EAAkBS,4BAGxD,OAAOT,EAAkBO,wBACvBG,IAAKhC,IACL,MAAMiC,EAAcnC,EACnBwB,EAAkBS,2BAClB/B,EAAMkC,sBACNJ,GAED,OAAOA,EAAsBK,YAAYF,EAAa,YAEtDG,KAAK,OAKR,OAAO5B,EAAS6B,QAAQ,qBAAsBrB,EAC/C,CAACsB,EAAAhC,YAEM,SAASiC,EAASC,GACxB,MAAO,CACNC,MAAO,CAAC,CAAEC,KAAM,iBAAmB,CAAEA,KAAM,iBAAiBF,MAC5DlC,UAAWA,EAEb,CAACgC,EAAAC,WAAA,OAAAD,CAAA","ignoreList":[]}