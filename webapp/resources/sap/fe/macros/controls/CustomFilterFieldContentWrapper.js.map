{"version":3,"file":"CustomFilterFieldContentWrapper.js","names":["CustomFilterFieldContentWrapper","_dec","defineUI5Class","_dec2","implementInterface","_dec3","property","type","defaultValue","_dec4","_dec5","_dec6","aggregation","multiple","isDefault","_dec7","event","_dec8","_dec9","_class","_class2","_CustomFilterFieldContentWrapper","_Control","idOrProps","settings","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_exports","_inheritsLoose","render","renderManager","control","openStart","style","width","openEnd","renderControl","getContent","close","_filterValuesToConditions","filterValues","operator","formatOptions","operators","conditions","hasOwnProperty","values","undefined","Error","conditionsType","ConditionsType","conditionValues","Array","isArray","SemanticDateOperators","getSemanticDateOperations","includes","Condition","createCondition","ConditionValidated","NotValidated","map","conditionValue","stringValue","toString","parsedConditions","parseValue","filter","_conditionsToFilterModelString","condition","formatValue","join","_proto","prototype","_handleFilterModelChange","changeEvent","propertyPath","getObjectBinding","getPath","getSource","getProperty","updateConditionsByFilterValues","_handleConditionsChange","updateFilterModelByConditions","init","_wrapperObserver","ManagedObjectObserver","_observeChanges","bind","observe","properties","aggregations","_filterModel","JSONModel","attachPropertyChange","setModel","FILTER_MODEL_ALIAS","clone","sIdSuffix","aLocalIds","changes","name","current","child","mutation","_handleContentChanged","content","_attachContentHandlers","getMetadata","getAllEvents","change","attachEvent","_handleContentEvent","liveChange","eventId","eventInstance","parameters","merge","getParameters","fireEvent","getAggregation","getConditions","setConditions","setProperty","getFilterModelAlias","getBindingContext","getAccessibilityInfo","getIdForLabel","Control","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./CustomFilterFieldContentWrapper.ts"],"sourcesContent":["import merge from \"sap/base/util/merge\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, defineUI5Class, event, implementInterface, property } from \"sap/fe/base/ClassSupport\";\nimport SemanticDateOperators from \"sap/fe/macros/filterBar/SemanticDateOperators\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport ManagedObjectObserver from \"sap/ui/base/ManagedObjectObserver\";\nimport Control from \"sap/ui/core/Control\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\nimport type { AccessibilityInfo, IFormContent } from \"sap/ui/core/library\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport Condition from \"sap/ui/mdc/condition/Condition\";\nimport ConditionValidated from \"sap/ui/mdc/enums/ConditionValidated\";\nimport ConditionsType from \"sap/ui/mdc/field/ConditionsType\";\nimport type { Model$PropertyChangeEvent } from \"sap/ui/model/Model\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * Type used for format options\n * @typedef FormatOptionsType\n */\ntype FormatOptionsType = {\n\toperators: string[];\n};\n\n/**\n * Creates an <code>sap.fe.macros.controls.CustomFilterFieldContentWrapper</code> object.\n * This is used in the {@link sap.ui.mdc.FilterField FilterField} as a filter content.\n * @private\n * @alias sap.fe.core.macros.CustomFilterFieldContentWrapper\n */\n@defineUI5Class(\"sap.fe.macros.controls.CustomFilterFieldContentWrapper\")\nexport default class CustomFilterFieldContentWrapper extends Control implements IFormContent {\n\t@implementInterface(\"sap.ui.core.IFormContent\")\n\t// eslint-disable-next-line camelcase\n\t__implements__sap_ui_core_IFormContent = true;\n\n\t@property({ type: \"sap.ui.core.CSSSize\", defaultValue: null })\n\twidth!: string;\n\n\t@property({ type: \"boolean\", defaultValue: false })\n\tformDoNotAdjustWidth!: boolean;\n\n\t@property({ type: \"object[]\", defaultValue: [] })\n\tconditions!: ConditionObject[];\n\n\t@aggregation({ type: \"sap.ui.core.Control\", multiple: false, isDefault: true })\n\tcontent!: Control;\n\n\t@event()\n\tconditionsChange!: Function;\n\n\t@event()\n\tchange!: Function;\n\n\t@event()\n\tliveChange!: Function;\n\n\tconstructor(idOrProps?: PropertiesOf<CustomFilterFieldContentWrapper>, settings?: PropertiesOf<CustomFilterFieldContentWrapper>) {\n\t\tsuper(idOrProps as unknown as string, settings);\n\t}\n\t// Note: FieldBase might be used as base control (instead of Control) in a later version;\n\t// in that case, you should add a 'change' event and bubble it to the corresponding handlers\n\n\tprivate _filterModel!: JSONModel;\n\n\tprivate _wrapperObserver: typeof ManagedObjectObserver;\n\n\tprivate static readonly FILTER_MODEL_ALIAS = \"filterValues\";\n\n\tstatic render(renderManager: RenderManager, control: CustomFilterFieldContentWrapper): void {\n\t\trenderManager.openStart(\"div\", control);\n\t\trenderManager.style(\"min-height\", \"1rem\");\n\t\trenderManager.style(\"width\", control.width);\n\t\trenderManager.openEnd();\n\t\trenderManager.renderControl(control.getContent()); // render the child Control\n\t\trenderManager.close(\"div\"); // end of the complete Control\n\t}\n\n\t/**\n\t * Maps an array of filter values to an array of conditions.\n\t * @param filterValues Array of filter value bindings or a filter value string\n\t * @param [operator] The operator to be used (optional) - if not set, the default operator (EQ) will be used\n\t * @private\n\t * @returns Array of filter conditions\n\t */\n\tstatic _filterValuesToConditions(filterValues: string | ConditionObject | unknown[] | unknown, operator?: string): ConditionObject[] {\n\t\tlet formatOptions: FormatOptionsType = { operators: [] },\n\t\t\tconditions = [];\n\t\tif (operator) {\n\t\t\tformatOptions = { operators: [operator] };\n\t\t}\n\t\tif (filterValues === \"\") {\n\t\t\tfilterValues = [];\n\t\t} else if (\n\t\t\tfilterValues &&\n\t\t\ttypeof filterValues === \"object\" &&\n\t\t\tfilterValues.hasOwnProperty(\"operator\") &&\n\t\t\tfilterValues.hasOwnProperty(\"values\")\n\t\t) {\n\t\t\tformatOptions = { operators: [(filterValues as ConditionObject).operator] };\n\t\t\tfilterValues = (filterValues as ConditionObject).values;\n\t\t} else if (filterValues !== undefined && typeof filterValues !== \"object\" && typeof filterValues !== \"string\") {\n\t\t\tthrow new Error(`FilterUtils.js#_filterValuesToConditions: Unexpected type of input parameter vValues: ${typeof filterValues}`);\n\t\t}\n\n\t\tconst conditionsType = new ConditionsType(formatOptions);\n\t\tconst conditionValues = Array.isArray(filterValues) ? filterValues : [filterValues];\n\n\t\t// Shortcut for operator without values and semantic date operations\n\t\tif (typeof operator === \"string\" && SemanticDateOperators.getSemanticDateOperations().includes(operator)) {\n\t\t\tconditions = [Condition.createCondition(operator, conditionValues, null, null, ConditionValidated.NotValidated)];\n\t\t} else {\n\t\t\tconditions = conditionValues\n\t\t\t\t.map((conditionValue) => {\n\t\t\t\t\tconst stringValue = conditionValue?.toString(),\n\t\t\t\t\t\tparsedConditions = conditionsType.parseValue(stringValue, \"any\") as ConditionObject[];\n\t\t\t\t\treturn parsedConditions?.[0];\n\t\t\t\t})\n\t\t\t\t.filter((conditionValue) => conditionValue !== undefined);\n\t\t}\n\n\t\treturn conditions;\n\t}\n\n\t/**\n\t * Maps an array of conditions to a comma separated list of filter values.\n\t * @param conditions Array of filter conditions\n\t * @param formatOptions Format options that specifies a condition type\n\t * @private\n\t * @returns Concatenated string of filter values\n\t */\n\tstatic _conditionsToFilterModelString(conditions: ConditionObject[], formatOptions: FormatOptionsType): string {\n\t\tconst conditionsType = new ConditionsType(formatOptions);\n\n\t\treturn conditions\n\t\t\t.map((condition) => {\n\t\t\t\treturn conditionsType.formatValue([condition], \"any\") || \"\";\n\t\t\t})\n\t\t\t.filter((stringValue) => {\n\t\t\t\treturn stringValue !== \"\";\n\t\t\t})\n\t\t\t.join(\",\");\n\t}\n\n\t/**\n\t * Listens to filter model changes and updates wrapper property \"conditions\".\n\t * @param changeEvent Event triggered by a filter model change\n\t * @private\n\t */\n\t_handleFilterModelChange(changeEvent: Model$PropertyChangeEvent): void {\n\t\tconst propertyPath = this.getObjectBinding(\"filterValues\")!.getPath(),\n\t\t\tvalues = changeEvent.getSource().getProperty(propertyPath);\n\t\tthis.updateConditionsByFilterValues(values);\n\t}\n\n\t/**\n\t * Listens to \"conditions\" changes and updates the filter model.\n\t * @param conditions Event triggered by a \"conditions\" change\n\t * @private\n\t */\n\t_handleConditionsChange(conditions: ConditionObject[]): void {\n\t\tthis.updateFilterModelByConditions(conditions);\n\t}\n\n\t/**\n\t * Initialize CustomFilterFieldContentWrapper control and register observer.\n\t */\n\tinit(): void {\n\t\tsuper.init();\n\t\tthis._wrapperObserver = new ManagedObjectObserver(this._observeChanges.bind(this));\n\t\tthis._wrapperObserver.observe(this, {\n\t\t\tproperties: [\"conditions\"],\n\t\t\taggregations: [\"content\"]\n\t\t});\n\t\tthis._filterModel = new JSONModel();\n\t\tthis._filterModel.attachPropertyChange(this._handleFilterModelChange, this);\n\t\tthis.setModel(this._filterModel, CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS);\n\t}\n\n\t/**\n\t * Overrides {@link sap.ui.core.Control#clone Control.clone} to clone additional\n\t * internal states.\n\t * @param [sIdSuffix] A suffix to be appended to the cloned control id\n\t * @param [aLocalIds] An array of local IDs within the cloned hierarchy (internally used)\n\t * @returns Reference to the newly created clone\n\t * @protected\n\t */\n\tclone(sIdSuffix: string | undefined, aLocalIds: string[] | undefined): this {\n\t\tconst clone = super.clone(sIdSuffix, aLocalIds);\n\t\t// During cloning, the old model will be copied and overwrites any new model (same alias) that\n\t\t// you introduce during init(); hence you need to overwrite it again by the new one that you've\n\t\t// created during init() (i.e. clone._filterModel); that standard behaviour of super.clone()\n\t\t// can't even be suppressed in an own constructor; for a detailed investigation of the cloning,\n\t\t// please overwrite the setModel() method and check the list of callers and steps induced by them.\n\t\tclone.setModel(clone._filterModel, CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS);\n\t\treturn clone;\n\t}\n\n\t/**\n\t * Listens to property changes.\n\t * @param changes Property changes\n\t * @param changes.name\n\t * @param changes.current\n\t * @private\n\t */\n\t_observeChanges(changes: { name: string; current: ConditionObject[]; mutation: string; child?: Control }): void {\n\t\tconst { name, current, child, mutation } = changes;\n\t\tif (name === \"conditions\") {\n\t\t\tthis._handleConditionsChange(current);\n\t\t}\n\t\tif (name === \"content\" && child) {\n\t\t\tthis._handleContentChanged.call(this, mutation, child);\n\t\t}\n\t}\n\n\t/**\n\t * Handle wrapper content change.\n\t * @param mutation Change type\n\t * @param content New content\n\t * @private\n\t */\n\t_handleContentChanged(mutation: string, content: Control): void {\n\t\tif (mutation === \"insert\") {\n\t\t\tthis._attachContentHandlers.call(this, content);\n\t\t}\n\t}\n\n\t/**\n\t * Attach content handlers to content.\n\t * @param content Content\n\t * @private\n\t */\n\t_attachContentHandlers(content: Control): void {\n\t\tif (content.getMetadata().getAllEvents().change) {\n\t\t\t// content has change event -> attach handler\n\t\t\tcontent.attachEvent(\"change\", this._handleContentEvent.bind(this, \"change\"), this);\n\t\t}\n\t\tif (content.getMetadata().getAllEvents().liveChange) {\n\t\t\t// content has liveChange event -> attach handler\n\t\t\tcontent.attachEvent(\"liveChange\", this._handleContentEvent.bind(this, \"liveChange\"), this);\n\t\t}\n\t}\n\n\t/**\n\t * Fire content event.\n\t * @param eventId Event name\n\t * @param eventInstance UI5 event object\n\t * @private\n\t */\n\t_handleContentEvent(eventId: string, eventInstance: UI5Event): void {\n\t\tconst parameters = merge({}, eventInstance.getParameters());\n\t\tthis.fireEvent(eventId, parameters);\n\t}\n\n\t/**\n\t * Gets the content of this wrapper control.\n\t * @returns The wrapper content\n\t * @private\n\t */\n\tgetContent(): Control {\n\t\treturn this.getAggregation(\"content\") as Control;\n\t}\n\n\t/**\n\t * Gets the value for control property 'conditions'.\n\t * @returns Array of filter conditions\n\t * @private\n\t */\n\tgetConditions(): object[] {\n\t\treturn this.getProperty(\"conditions\");\n\t}\n\n\t/**\n\t * Sets the value for control property 'conditions'.\n\t * @param [conditions] Array of filter conditions\n\t * @returns Reference to this wrapper\n\t * @private\n\t */\n\tsetConditions(conditions: object[]): this {\n\t\tthis.setProperty(\"conditions\", conditions || []);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Gets the filter model alias 'filterValues'.\n\t * @returns The filter model\n\t * @private\n\t */\n\tgetFilterModelAlias(): string {\n\t\treturn CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS;\n\t}\n\n\t/**\n\t * Updates the property \"conditions\" with filter values\n\t * sent by ExtensionAPI#setFilterValues().\n\t * @param values The filter values\n\t * @param [operator] The operator name\n\t * @private\n\t */\n\tupdateConditionsByFilterValues(values: string | ConditionObject | unknown[] | unknown, operator?: string): void {\n\t\tconst conditions = CustomFilterFieldContentWrapper._filterValuesToConditions(values, operator);\n\t\tthis.setConditions(conditions);\n\t}\n\n\t/**\n\t * Updates filter model with conditions\n\t * sent by the {@link sap.ui.mdc.FilterField FilterField}.\n\t * @param conditions Array of filter conditions\n\t * @private\n\t */\n\tupdateFilterModelByConditions(conditions: ConditionObject[]): void {\n\t\tconst operator = conditions[0]?.operator || \"\";\n\t\tconst formatOptions: FormatOptionsType = operator !== \"\" ? { operators: [operator] } : { operators: [] };\n\t\tif (this.getBindingContext(CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS)) {\n\t\t\tconst stringValue = CustomFilterFieldContentWrapper._conditionsToFilterModelString(conditions, formatOptions);\n\t\t\tthis._filterModel.setProperty(\n\t\t\t\tthis.getBindingContext(CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS)!.getPath(),\n\t\t\t\tstringValue\n\t\t\t);\n\t\t}\n\t}\n\n\tgetAccessibilityInfo(): AccessibilityInfo {\n\t\tconst content = this.getContent();\n\t\treturn content?.getAccessibilityInfo?.() || {};\n\t}\n\n\t/**\n\t * Returns the DOMNode ID to be used for the \"labelFor\" attribute.\n\t *\n\t * We forward the call of this method to the content control.\n\t * @returns ID to be used for the <code>labelFor</code>\n\t */\n\tgetIdForLabel(): string {\n\t\tconst content = this.getContent();\n\t\treturn content?.getIdForLabel();\n\t}\n}\n"],"mappings":"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","ignoreList":[]}