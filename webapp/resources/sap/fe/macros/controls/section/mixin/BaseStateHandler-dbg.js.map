{"version":3,"names":["BaseStateHandler","_IViewStateContributo","apply","arguments","_exports","_inheritsLoose","_proto","prototype","setupMixin","baseClass","call","baseInit","init","setupStateInteractionsForLazyRendering","isBlocksAvailable","registerSubSectionDelegate","subSection","eventDelegates","onBeforeRendering","checkForStateInteractions","removeEventDelegate","addEventDelegate","setInitialState","retrieveState","_stateHandlersAvailable","_retrieveHandler","blocksAvailable","_retrieveStatePending","view","CommonUtils","getTargetView","extensionAPI","getController","getExtensionAPI","_applyStatePending","_stateToApply","applyLegacyState","getControlState","controlState","applyState","_applyHandler","resetStateToApply","triggerStateInteractions","retrieveIsRelevant","applyIsRelevant","updateAppState","undefined","getStateHandlerInstance","stateHandler","handlerModuleName","getModulePath","modules","requireDependencies","handlerName","substring","lastIndexOf","handlerInstance","Error","err","Log","warning","getId","_setStateHandler","handlerType","setApplyStateHandler","applyStateHandler","Promise","resolve","then","setRetrieveStateHandler","retrieveStateHandler","handlerPath","replace","IViewStateContributorMixin"],"sourceRoot":".","sources":["BaseStateHandler.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ExtensionAPI from \"sap/fe/core/ExtensionAPI\";\nimport type { ControlState as ViewStateControlState } from \"sap/fe/core/controllerextensions/ViewState\";\nimport IViewStateContributorMixin from \"sap/fe/core/controllerextensions/viewState/IViewStateContributorMixin\";\nimport { requireDependencies } from \"sap/fe/core/helpers/LoaderUtils\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport type ObjectPageSubSection from \"sap/uxap/ObjectPageSubSection\";\n\ntype StateContributor = Control & {\n\tapplyStateHandler?: string;\n\tretrieveStateHandler?: string;\n};\ntype HandlerType = \"apply\" | \"retrieve\";\n\nexport default class BaseStateHandler<CtrlState> extends IViewStateContributorMixin<CtrlState> {\n\t/**\n\t * Store the state to be applied until the section is ready.\n\t */\n\t_stateToApply?: CtrlState;\n\n\t/**\n\t * Apply state is pending.\n\t */\n\t_applyStatePending?: boolean;\n\n\t/**\n\t * Retrieve state is pending.\n\t */\n\t_retrieveStatePending?: boolean;\n\n\t/**\n\t * Promise that resolves on state handlers' creation.\n\t */\n\t_stateHandlersAvailable?: Promise<void>;\n\n\t/**\n\t * The instance of the apply-state handler provided by the control user.\n\t */\n\t_applyHandler?: (this: ExtensionAPI, control: StateContributor, state?: CtrlState) => void;\n\n\t/**\n\t * The instance of the retrieve-state handler provided by the control user.\n\t */\n\t_retrieveHandler?: (this: ExtensionAPI, control: StateContributor) => CtrlState;\n\n\tsetupMixin(baseClass: Function): void {\n\t\t// This method is needed to implement interface IInterfaceWithMixin\n\t\tsuper.setupMixin(baseClass);\n\t\tconst baseInit = baseClass.prototype.init;\n\t\tbaseClass.prototype.init = function (this: StateContributor & BaseStateHandler<CtrlState>): void {\n\t\t\tbaseInit?.call(this);\n\n\t\t\t// The control is ready for state interactions if the blocks are available,\n\t\t\t// Else we wait for blocks to be added.\n\t\t\tthis.setupStateInteractionsForLazyRendering();\n\t\t};\n\t}\n\n\t/**\n\t * Listen to subsections rendering to enable state interactions.\n\t */\n\tsetupStateInteractionsForLazyRendering(this: StateContributor & BaseStateHandler<CtrlState>): void {}\n\n\tisBlocksAvailable(this: StateContributor & BaseStateHandler<CtrlState>): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Register subsection delegate to enable state interactions.\n\t * We use onBeforeRendering, as when a parent is set for a newly available block, the subsection is rerendered.\n\t * @param subSection Subsection control\n\t */\n\tregisterSubSectionDelegate(this: StateContributor & BaseStateHandler<CtrlState>, subSection: ObjectPageSubSection): void {\n\t\tconst eventDelegates = {\n\t\t\tonBeforeRendering: (): void => {\n\t\t\t\tif (this.checkForStateInteractions()) {\n\t\t\t\t\tsubSection.removeEventDelegate(eventDelegates);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tsubSection.addEventDelegate(eventDelegates);\n\t}\n\n\t/**\n\t * Hook to set the initial state.\n\t */\n\tasync setInitialState(this: StateContributor & BaseStateHandler<CtrlState>): Promise<void> {}\n\n\t/**\n\t * Retrieve the state to store as part of the view state.\n\t * @returns StateContributor state\n\t */\n\tasync retrieveState(this: StateContributor & BaseStateHandler<CtrlState>): Promise<CtrlState | null> {\n\t\tawait this._stateHandlersAvailable;\n\t\tif (this._retrieveHandler) {\n\t\t\tconst blocksAvailable = this.isBlocksAvailable();\n\t\t\tif (blocksAvailable) {\n\t\t\t\t// blocks are available, we carry on with the retrieve state\n\t\t\t\tthis._retrieveStatePending = false;\n\t\t\t\tconst view = CommonUtils.getTargetView(this);\n\t\t\t\tconst extensionAPI = view.getController().getExtensionAPI();\n\t\t\t\treturn this._retrieveHandler.call(extensionAPI, this);\n\t\t\t} else if (this._applyStatePending) {\n\t\t\t\t// blocks are not available but applyState is already pending, hence we return the state that is on hold.\n\t\t\t\tthis._retrieveStatePending = false;\n\t\t\t\treturn this._stateToApply ?? null;\n\t\t\t} else {\n\t\t\t\t// blocks are not available hence we sent the retrieve state to pending.\n\t\t\t\tthis._retrieveStatePending = true;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Apply state to the contributor.\n\t * @param getControlState Function to fetch the state to apply.\n\t * @returns Promise that resolves on state application.\n\t */\n\tasync applyLegacyState(\n\t\tthis: StateContributor & BaseStateHandler<CtrlState>,\n\t\tgetControlState: (control: ManagedObject) => ViewStateControlState\n\t): Promise<void> {\n\t\tconst controlState = getControlState(this) as CtrlState;\n\t\treturn this.applyState(controlState);\n\t}\n\n\t/**\n\t * Apply state to the contributor.\n\t * @param controlState State to apply\n\t * @returns Promise that resolves on state application.\n\t */\n\tasync applyState(this: StateContributor & BaseStateHandler<CtrlState>, controlState?: CtrlState): Promise<void> {\n\t\tawait this._stateHandlersAvailable;\n\t\tif (this._applyHandler) {\n\t\t\tconst blocksAvailable = this.isBlocksAvailable();\n\t\t\tif (blocksAvailable) {\n\t\t\t\t// blocks are available, we carry on with the apply state\n\t\t\t\tconst view = CommonUtils.getTargetView(this);\n\t\t\t\tconst extensionAPI = view.getController().getExtensionAPI();\n\t\t\t\tthis.resetStateToApply();\n\t\t\t\treturn this._applyHandler?.call(extensionAPI, this, controlState);\n\t\t\t} else {\n\t\t\t\t// blocks are not available hence we sent the apply state to pending.\n\t\t\t\tthis._stateToApply = controlState;\n\t\t\t\tthis._applyStatePending = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Trigger state interactions.\n\t */\n\tasync triggerStateInteractions(this: StateContributor & BaseStateHandler<CtrlState>): Promise<void> {\n\t\tawait this._stateHandlersAvailable;\n\t\tconst retrieveIsRelevant = this._retrieveHandler && this._retrieveStatePending;\n\t\tconst applyIsRelevant = this._applyHandler && this._applyStatePending;\n\t\tif (retrieveIsRelevant) {\n\t\t\tif (applyIsRelevant) {\n\t\t\t\t// Both retrieve and apply are pending\n\t\t\t\tthis.applyState(this._stateToApply);\n\t\t\t}\n\t\t\tthis._retrieveStatePending = false;\n\t\t\tconst view = CommonUtils.getTargetView(this);\n\t\t\tconst extensionAPI = view.getController().getExtensionAPI();\n\t\t\t// appState update would call the retrieveState.\n\t\t\tawait extensionAPI.updateAppState();\n\t\t} else if (applyIsRelevant) {\n\t\t\tthis.applyState(this._stateToApply);\n\t\t}\n\t}\n\n\t/**\n\t * Reset the state to apply.\n\t */\n\tresetStateToApply(this: StateContributor & BaseStateHandler<CtrlState>): void {\n\t\tthis._stateToApply = undefined;\n\t\tthis._applyStatePending = false;\n\t}\n\n\t/**\n\t * Check for state interactions to trigger.\n\t * @returns Boolean true if any pending state interactions are executed.\n\t */\n\tcheckForStateInteractions(this: StateContributor & BaseStateHandler<CtrlState>): boolean {\n\t\tconst blocksAvailable = this.isBlocksAvailable();\n\t\tif (blocksAvailable) {\n\t\t\tthis.triggerStateInteractions();\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Create an instance of a state handler from a function's path.\n\t * @param stateHandler Path to the state handler.\n\t * @returns Handler instance to use for state handling.\n\t */\n\tasync getStateHandlerInstance(\n\t\tthis: StateContributor & BaseStateHandler<CtrlState>,\n\t\tstateHandler?: string\n\t): Promise<(() => unknown) | undefined> {\n\t\ttry {\n\t\t\tif (stateHandler) {\n\t\t\t\tconst handlerModuleName = this.getModulePath(stateHandler);\n\t\t\t\tconst modules = (await requireDependencies([handlerModuleName])) as Record<string, (() => {}) | undefined>[];\n\t\t\t\tconst handlerName = stateHandler.substring(stateHandler.lastIndexOf(\".\") + 1);\n\t\t\t\tconst handlerInstance = modules[0][handlerName];\n\t\t\t\tif (handlerInstance) {\n\t\t\t\t\treturn handlerInstance;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"handler not found\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: unknown) {\n\t\t\tLog.warning(`'${this.getId()}' control's state handler '${stateHandler}' couldn't be resolved: ${err}`);\n\t\t}\n\t}\n\n\t/**\n\t * Set the instance of the state handler.\n\t * @param handlerType Apply or Retrieve.\n\t * @param stateHandler Path to the handler instance.\n\t */\n\tasync _setStateHandler(\n\t\tthis: StateContributor & BaseStateHandler<CtrlState>,\n\t\thandlerType: HandlerType,\n\t\tstateHandler?: string\n\t): Promise<void> {\n\t\tthis[`_${handlerType}Handler`] = (await this.getStateHandlerInstance(stateHandler)) as typeof handlerType extends \"apply\"\n\t\t\t? typeof this._applyHandler\n\t\t\t: typeof this._retrieveHandler;\n\t\tthis[`${handlerType}StateHandler`] = stateHandler;\n\t}\n\n\t/**\n\t * Set the apply-state handler.\n\t * @param applyStateHandler Path to the instance of the apply-state handler.\n\t * @returns Promise\n\t */\n\tasync setApplyStateHandler(this: StateContributor & BaseStateHandler<CtrlState>, applyStateHandler?: string): Promise<void> {\n\t\tthis._stateHandlersAvailable = (this._stateHandlersAvailable || Promise.resolve()).then(async () => {\n\t\t\treturn this._setStateHandler(\"apply\", applyStateHandler);\n\t\t});\n\t\treturn this._stateHandlersAvailable;\n\t}\n\n\t/**\n\t * Set the retrieve-state handler.\n\t * @param retrieveStateHandler Path to the instance of the retrieve-state handler.\n\t * @returns Promise\n\t */\n\tasync setRetrieveStateHandler(this: StateContributor & BaseStateHandler<CtrlState>, retrieveStateHandler?: string): Promise<void> {\n\t\tthis._stateHandlersAvailable = (this._stateHandlersAvailable || Promise.resolve()).then(async () => {\n\t\t\treturn this._setStateHandler(\"retrieve\", retrieveStateHandler);\n\t\t});\n\t\treturn this._stateHandlersAvailable;\n\t}\n\n\t/**\n\t * Get the module path of the function.\n\t * @param handlerPath Path to the handler instance.\n\t * @returns Module Path\n\t */\n\tgetModulePath(handlerPath: string): string {\n\t\treturn handlerPath.substring(0, handlerPath.lastIndexOf(\".\")).replace(/\\./g, \"/\");\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"BaseStateHandler-dbg.js"}