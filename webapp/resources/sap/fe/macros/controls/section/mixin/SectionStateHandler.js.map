{"version":3,"file":"SectionStateHandler.js","names":["SectionStateHandler","_BaseStateHandler","apply","this","arguments","_exports","_inheritsLoose","_proto","prototype","setupStateInteractionsForLazyRendering","isSubSectionsAvailable","checkForSectionStateInteractions","sectionEventDelegate","onBeforeRendering","removeEventDelegate","addEventDelegate","checkForStateInteractions","subSections","getSubSections","forEach","registerSubSectionDelegate","bind","length","isBlocksAvailable","some","subSection","blocks","getBlocks","filter","block","BlockBase","BaseStateHandler"],"sources":["./SectionStateHandler.ts"],"sourcesContent":["import type Section from \"sap/fe/macros/controls/Section\";\nimport BaseStateHandler from \"sap/fe/macros/controls/section/mixin/BaseStateHandler\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport BlockBase from \"sap/uxap/BlockBase\";\n\nexport type SectionState = unknown;\n\nexport default class SectionStateHandler extends BaseStateHandler<SectionState> {\n\t/**\n\t * Listen to subsections rendering to enable state interactions.\n\t */\n\tsetupStateInteractionsForLazyRendering(this: Section & SectionStateHandler): void {\n\t\tif (this.isSubSectionsAvailable()) {\n\t\t\tthis.checkForSectionStateInteractions();\n\t\t} else {\n\t\t\t// Subsections are not available yet, so we hook to onBeforeRendering event delegate.\n\t\t\tconst sectionEventDelegate = {\n\t\t\t\tonBeforeRendering: (): void => {\n\t\t\t\t\tif (this.isSubSectionsAvailable()) {\n\t\t\t\t\t\t// once subsections are avialable, we detach event delegate.\n\t\t\t\t\t\tthis.checkForSectionStateInteractions();\n\t\t\t\t\t\tthis.removeEventDelegate(sectionEventDelegate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.addEventDelegate(sectionEventDelegate);\n\t\t}\n\t}\n\n\t/**\n\t * Check for state interactions for the section.\n\t */\n\tcheckForSectionStateInteractions(this: Section & SectionStateHandler): void {\n\t\tif (!this.checkForStateInteractions()) {\n\t\t\t// Blocks are not avialable yet, so we hook to onBeforeRendering event delegate.\n\t\t\tconst subSections = this.getSubSections();\n\t\t\tsubSections.forEach(this.registerSubSectionDelegate.bind(this));\n\t\t}\n\t}\n\n\t/**\n\t * Check if subsections are available.\n\t * @returns Boolean.\n\t */\n\tisSubSectionsAvailable(this: Section & SectionStateHandler): boolean {\n\t\treturn this.getSubSections().length > 0;\n\t}\n\n\t/**\n\t * Check if blocks are available for state interactions.\n\t * @returns Boolean.\n\t */\n\tisBlocksAvailable(this: Section & SectionStateHandler): boolean {\n\t\tconst subSections = this.getSubSections();\n\t\treturn subSections.some((subSection) => {\n\t\t\tconst blocks = subSection.getBlocks().filter((block) => block instanceof BlockBase);\n\t\t\treturn blocks.length > 0;\n\t\t});\n\t}\n}\n"],"mappings":";;;;kVAEA,IAKqBA,EAAmB,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAAC,KAAAC,YAAAD,IAAA,CAAAE,EAAAL,EAAAM,EAAAN,EAAAC,GAAA,IAAAM,EAAAP,EAAAQ,UACvCD,EAGAE,uCAAA,SAAAA,IACC,GAAIN,KAAKO,yBAA0B,CAClCP,KAAKQ,kCACN,KAAO,CAEN,MAAMC,EAAuB,CAC5BC,kBAAmBA,KAClB,GAAIV,KAAKO,yBAA0B,CAElCP,KAAKQ,mCACLR,KAAKW,oBAAoBF,EAC1B,IAGFT,KAAKY,iBAAiBH,EACvB,CACD,EAEAL,EAGAI,iCAAA,SAAAA,IACC,IAAKR,KAAKa,4BAA6B,CAEtC,MAAMC,EAAcd,KAAKe,iBACzBD,EAAYE,QAAQhB,KAAKiB,2BAA2BC,KAAKlB,MAC1D,CACD,EAEAI,EAIAG,uBAAA,SAAAA,IACC,OAAOP,KAAKe,iBAAiBI,OAAS,CACvC,EAEAf,EAIAgB,kBAAA,SAAAA,IACC,MAAMN,EAAcd,KAAKe,iBACzB,OAAOD,EAAYO,KAAMC,IACxB,MAAMC,EAASD,EAAWE,YAAYC,OAAQC,GAAUA,aAAiBC,GACzE,OAAOJ,EAAOJ,OAAS,GAEzB,EAAC,OAAAtB,CAAA,CAnDsC,CAAS+B,GAAgB1B,EAAAL,EAAA,OAAAK,CAAA","ignoreList":[]}