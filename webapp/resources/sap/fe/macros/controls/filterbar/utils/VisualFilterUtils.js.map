{"version":3,"file":"VisualFilterUtils.js","names":["VisualFilterUtils","applyMedianScaleToChartData","oInteractiveChart","oView","sVFId","sInfoPath","oData","sMeasure","data","oInternalModelContext","getBindingContext","aAggregation","getPoints","getBars","getSegments","item","push","getObject","scaleFactor","this","_getMedianScaleFactor","iShortRefNumber","scale","setProperty","oScaleTitle","byId","oMeasureDimensionTitle","sText","getText","setText","setTooltip","sMeasureField","i","sort","a","b","Number","length","iMid","iMedian","parseFloat","Math","floor","val","pow","round","abs","fixedInteger","NumberFormat","getIntegerInstance","style","showScale","shortRefNumber","aData","sScaledValue","format","aScaledValueParts","split","parseInt","indexOf","undefined","getScale","getFormattedNumber","inValue","numberOfFractionalDigits","currency","value","replace","currencyFormat","getCurrencyInstance","showMeasure","getFloatInstance","shortDecimals","decimals","applyUOMToTitle","oContextData","vUOM","sUOM","sCurrency","$Path","sUOMValue","updateChartScaleFactorTitle","applyErrorMessageAndTitle","s18nMessageTitle","s18nMessage","errorMessageTitle","errorMessage","showError","checkMulitUnit","oContexts","sUnitfield","aContextData","reduce","key","NaN","setMultiUOMMessage","oResourceBundle","sIsCurrency","sIsUnit","Log","warning","setNoDataMessage","convertFilterCondions","oFilterConditions","oConvertedConditions","Object","keys","forEach","sKey","aConvertedConditions","aConditions","values","value2","value1","Condition","createCondition","operator","getCustomConditions","Range","oValidProperty","sPropertyName","$Type","_parseDateTime","getTypeCompliantValue","_formatDateTime","Low","Option","High","getRangeProperty","$EnumMember","path","sValue","_getDateTimeTypeInstance","parseValue","formatValue","DateTimeOffset","pattern","calendarType","V4","getErrorInfoForNoInitialOverlay","notMatchedConditions","resourceBundle","entitySetPath","metaModel","ret","label","enableChartBinding","visualFilters","enable","diffState","changedFilterFieldPaths","filter","vfId","visualFilterBB","isA","setEnableChartBinding","error"],"sources":["./VisualFilterUtils.ts"],"sourcesContent":["import type { SelectionRangeOptionType, SelectionRangeType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport type { FilterConditions } from \"sap/fe/macros/filterBar/FilterHelper\";\nimport { getRangeProperty, getTypeCompliantValue } from \"sap/fe/macros/filterBar/FilterHelper\";\nimport type { ExternalStateType } from \"sap/fe/macros/valuehelp/ValueHelpDelegate\";\nimport type VisualFilter from \"sap/fe/macros/visualfilters/VisualFilter\";\nimport type Title from \"sap/m/Title\";\nimport type InteractiveBarChart from \"sap/suite/ui/microchart/InteractiveBarChart\";\nimport type InteractiveDonutChart from \"sap/suite/ui/microchart/InteractiveDonutChart\";\nimport type InteractiveLineChart from \"sap/suite/ui/microchart/InteractiveLineChart\";\nimport type Control from \"sap/ui/core/Control\";\nimport type UI5Date from \"sap/ui/core/date/UI5Date\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport Condition from \"sap/ui/mdc/condition/Condition\";\nimport type ConditionValidated from \"sap/ui/mdc/enums/ConditionValidated\";\nimport type Context from \"sap/ui/model/Context\";\nimport type MetaModel from \"sap/ui/model/MetaModel\";\nimport DateTimeOffset from \"sap/ui/model/odata/type/DateTimeOffset\";\nimport type { MetaModelEnum, MetaModelProperty, MetaModelType } from \"types/metamodel_types\";\n\nconst VisualFilterUtils = {\n\t/**\n\t * Applies the median scale to the chart data.\n\t * @param oInteractiveChart InteractiveChart in the VisualFilter control\n\t * @param oView Instance of the view\n\t * @param sVFId VisualFilter control ID\n\t * @param sInfoPath Internal model context path to store info.\n\t */\n\tapplyMedianScaleToChartData: function (\n\t\toInteractiveChart: InteractiveDonutChart | InteractiveLineChart | InteractiveBarChart,\n\t\toView: View,\n\t\tsVFId: string,\n\t\tsInfoPath: string\n\t): void {\n\t\tconst oData = [];\n\t\tconst sMeasure = oInteractiveChart.data(\"measure\");\n\t\tconst oInternalModelContext = oView.getBindingContext(\"internal\") as InternalModelContext;\n\t\tconst aAggregation =\n\t\t\t((oInteractiveChart as InteractiveLineChart).getPoints && (oInteractiveChart as InteractiveLineChart).getPoints()) ||\n\t\t\t((oInteractiveChart as InteractiveBarChart).getBars && (oInteractiveChart as InteractiveBarChart).getBars()) ||\n\t\t\t((oInteractiveChart as InteractiveDonutChart).getSegments && (oInteractiveChart as InteractiveDonutChart).getSegments());\n\t\tfor (const item of aAggregation) {\n\t\t\toData.push(item.getBindingContext()!.getObject());\n\t\t}\n\t\tconst scaleFactor = this._getMedianScaleFactor(oData, sMeasure);\n\t\tif (scaleFactor && scaleFactor.iShortRefNumber && scaleFactor.scale) {\n\t\t\toInternalModelContext.setProperty(`scalefactor/${sInfoPath}`, scaleFactor.scale);\n\t\t\toInternalModelContext.setProperty(`scalefactorNumber/${sInfoPath}`, scaleFactor.iShortRefNumber);\n\t\t} else {\n\t\t\toInternalModelContext.setProperty(`scalefactor/${sInfoPath}`, \"\");\n\t\t\toInternalModelContext.setProperty(`scalefactorNumber/${sInfoPath}`, \"\");\n\t\t\tconst oScaleTitle = oView.byId(`${sVFId}::ScaleUoMTitle`) as Title;\n\t\t\tconst oMeasureDimensionTitle = oView.byId(`${sVFId}::MeasureDimensionTitle`) as Title;\n\t\t\tconst sText = oScaleTitle.getText();\n\t\t\tif (sText === \" | \") {\n\t\t\t\toScaleTitle.setText(\"\");\n\t\t\t\toMeasureDimensionTitle.setTooltip(oMeasureDimensionTitle.getText());\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Returns the median scale factor.\n\t * @param oData VisualFilter data\n\t * @param sMeasureField Path of the measure\n\t * @returns Object containing scale and iShortRefNumber\n\t */\n\t_getMedianScaleFactor: function (oData: Record<string, string>[], sMeasureField: string): { iShortRefNumber?: number; scale?: string } {\n\t\tlet i;\n\t\tlet scaleFactor;\n\t\toData.sort(function (a: Record<string, string>, b: Record<string, string>) {\n\t\t\tif (Number(a[sMeasureField]) < Number(b[sMeasureField])) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif (Number(a[sMeasureField]) > Number(b[sMeasureField])) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t\tif (oData.length > 0) {\n\t\t\t// get median index\n\t\t\tconst iMid = oData.length / 2, // get mid of array\n\t\t\t\t// if iMid is whole number, array length is even, calculate median\n\t\t\t\t// if iMid is not whole number, array length is odd, take median as iMid - 1\n\t\t\t\tiMedian =\n\t\t\t\t\tiMid % 1 === 0\n\t\t\t\t\t\t? (parseFloat(oData[iMid - 1][sMeasureField]) + parseFloat(oData[iMid][sMeasureField])) / 2\n\t\t\t\t\t\t: parseFloat(oData[Math.floor(iMid)][sMeasureField]),\n\t\t\t\t// get scale factor on median\n\t\t\t\tval = iMedian;\n\t\t\tfor (i = 0; i < 14; i++) {\n\t\t\t\tscaleFactor = Math.pow(10, i);\n\t\t\t\tif (Math.round(Math.abs(val) / scaleFactor) < 10) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst fixedInteger = NumberFormat.getIntegerInstance({\n\t\t\tstyle: \"short\",\n\t\t\tshowScale: false,\n\t\t\tshortRefNumber: scaleFactor\n\t\t});\n\n\t\t// apply scale factor to other values and check\n\t\tfor (i = 0; i < oData.length; i++) {\n\t\t\tconst aData = oData[i],\n\t\t\t\tsScaledValue = fixedInteger.format(aData[sMeasureField] as unknown as number),\n\t\t\t\taScaledValueParts = sScaledValue.split(\".\");\n\t\t\t// if scaled value has only 0 before decimal or 0 after decimal (example: 0.02)\n\t\t\t// then ignore this scale factor else proceed with this scale factor\n\t\t\t// if scaled value divided by 1000 is >= 1000 then also ignore scale factor\n\t\t\tif (\n\t\t\t\t(!aScaledValueParts[1] && parseInt(aScaledValueParts[0], 10) === 0) ||\n\t\t\t\t(aScaledValueParts[1] && parseInt(aScaledValueParts[0], 10) === 0 && aScaledValueParts[1].indexOf(\"0\") === 0) ||\n\t\t\t\tNumber(sScaledValue) / 1000 >= 1000\n\t\t\t) {\n\t\t\t\tscaleFactor = undefined;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tiShortRefNumber: scaleFactor,\n\t\t\tscale: scaleFactor ? fixedInteger.getScale() : \"\"\n\t\t};\n\t},\n\n\t/**\n\t * Returns the formatted number according to the rules of VisualChartFilters.\n\t * @param inValue Value which needs to be formatted\n\t * @param scaleFactor ScaleFactor to which the value needs to be scaled\n\t * @param numberOfFractionalDigits NumberOfFractionalDigits digits in the decimals according to scale\n\t * @param currency Currency code\n\t * @returns The formatted number\n\t */\n\tgetFormattedNumber: function (\n\t\tinValue: string | number,\n\t\tscaleFactor?: number,\n\t\tnumberOfFractionalDigits?: number,\n\t\tcurrency?: string\n\t): string {\n\t\tlet fixedInteger;\n\t\tconst value: number = typeof inValue === \"string\" ? Number(inValue.replace(/,/g, \"\")) : inValue;\n\n\t\tif (currency) {\n\t\t\tconst currencyFormat = NumberFormat.getCurrencyInstance({\n\t\t\t\tshowMeasure: false\n\t\t\t});\n\t\t\treturn currencyFormat.format(value, currency);\n\t\t\t// parseFloat(value) is required otherwise -ve value are wrongly rounded off\n\t\t\t// Example: \"-1.9\" rounds off to -1 instead of -2. however -1.9 rounds off to -2\n\t\t} else if (scaleFactor) {\n\t\t\tfixedInteger = NumberFormat.getFloatInstance({\n\t\t\t\tstyle: \"short\",\n\t\t\t\tshowScale: false,\n\t\t\t\tshortRefNumber: scaleFactor,\n\t\t\t\tshortDecimals: numberOfFractionalDigits\n\t\t\t});\n\t\t\treturn fixedInteger.format(value);\n\t\t} else {\n\t\t\tfixedInteger = NumberFormat.getFloatInstance({\n\t\t\t\tdecimals: numberOfFractionalDigits\n\t\t\t});\n\t\t\treturn fixedInteger.format(value);\n\t\t}\n\t},\n\n\t/**\n\t * Applies the UOM to the title of the visual filter control.\n\t * @param oInteractiveChart InteractiveChart in the VisualFilter control\n\t * @param oContextData Data of the VisualFilter\n\t * @param oView Instance of the view\n\t * @param sInfoPath Internal model context path to store info.\n\t */\n\tapplyUOMToTitle: function (oInteractiveChart: Control, oContextData: Record<string, unknown>, oView: View, sInfoPath: string): void {\n\t\tconst vUOM = oInteractiveChart.data(\"uom\");\n\t\tlet sUOM;\n\t\tlet sCurrency;\n\t\tif (vUOM && vUOM[\"ISOCurrency\"]) {\n\t\t\tsUOM = vUOM[\"ISOCurrency\"];\n\t\t\tsCurrency = sUOM.$Path ? oContextData[sUOM.$Path] : sUOM;\n\t\t} else if (vUOM && vUOM[\"Unit\"]) {\n\t\t\tsUOM = vUOM[\"Unit\"];\n\t\t}\n\t\tif (sUOM) {\n\t\t\tconst sUOMValue = sUOM.$Path ? oContextData[sUOM.$Path] : sUOM;\n\t\t\tconst oInternalModelContext = oView.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\toInternalModelContext.setProperty(`uom/${sInfoPath}`, sUOMValue);\n\t\t\tif (sCurrency) {\n\t\t\t\toInternalModelContext.setProperty(`currency/${sInfoPath}`, sUOMValue);\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Updates the scale factor in the title of the visual filter.\n\t * @param oInteractiveChart InteractiveChart in the VisualFilter control\n\t * @param oView Instance of the view\n\t * @param sVFId VisualFilter control ID\n\t * @param sInfoPath Internal model context path to store info.\n\t */\n\tupdateChartScaleFactorTitle: function (\n\t\toInteractiveChart: InteractiveDonutChart | InteractiveLineChart | InteractiveBarChart,\n\t\toView: View,\n\t\tsVFId: string,\n\t\tsInfoPath: string\n\t): void {\n\t\tif (!oInteractiveChart.data(\"scalefactor\")) {\n\t\t\tthis.applyMedianScaleToChartData(oInteractiveChart, oView, sVFId, sInfoPath);\n\t\t} else {\n\t\t\tconst fixedInteger = NumberFormat.getIntegerInstance({\n\t\t\t\tstyle: \"short\",\n\t\t\t\tshowScale: false,\n\t\t\t\tshortRefNumber: oInteractiveChart.data(\"scalefactor\")\n\t\t\t});\n\t\t\tconst oInternalModelContext = oView.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\tconst scale = fixedInteger.getScale() ? fixedInteger.getScale() : \"\";\n\t\t\toInternalModelContext.setProperty(`scalefactor/${sInfoPath}`, scale);\n\t\t}\n\t},\n\n\t/**\n\t *\n\t * @param s18nMessageTitle Text of the error message title.\n\t * @param s18nMessage Text of the error message description.\n\t * @param sInfoPath Internal model context path to store info.\n\t * @param oView Instance of the view.\n\t */\n\tapplyErrorMessageAndTitle: function (s18nMessageTitle: string, s18nMessage: string, sInfoPath: string, oView: View): void {\n\t\tconst oInternalModelContext = oView.getBindingContext(\"internal\") as InternalModelContext;\n\t\toInternalModelContext.setProperty(sInfoPath, {});\n\t\toInternalModelContext.setProperty(sInfoPath, {\n\t\t\terrorMessageTitle: s18nMessageTitle,\n\t\t\terrorMessage: s18nMessage,\n\t\t\tshowError: true\n\t\t});\n\t},\n\t/**\n\t * Checks if multiple units are present.\n\t * @param oContexts Contexts of the VisualFilter\n\t * @param sUnitfield The path of the unit field\n\t * @returns Returns if multiple units are configured or not\n\t */\n\tcheckMulitUnit: function (oContexts: Context[], sUnitfield: string): boolean {\n\t\tconst aData: number[] = [];\n\t\tif (oContexts && sUnitfield) {\n\t\t\tfor (const item of oContexts) {\n\t\t\t\tconst aContextData = item && item.getObject();\n\t\t\t\taData.push(aContextData[sUnitfield]);\n\t\t\t}\n\t\t}\n\t\treturn !!aData.reduce(function (data: number, key: number) {\n\t\t\treturn data === key ? data : NaN;\n\t\t});\n\t},\n\n\t/**\n\t * Sets an error message if multiple UOM are present.\n\t * @param oData Data of the VisualFilter control\n\t * @param oInteractiveChart InteractiveChart in the VisualFilter control\n\t * @param sInfoPath Internal model context path to store info.\n\t * @param oResourceBundle The resource bundle\n\t * @param oView Instance of the view\n\t */\n\tsetMultiUOMMessage: function (\n\t\toData: Context[],\n\t\toInteractiveChart: InteractiveDonutChart | InteractiveLineChart | InteractiveBarChart,\n\t\tsInfoPath: string,\n\t\toResourceBundle: ResourceBundle,\n\t\toView: View\n\t): void {\n\t\tconst vUOM = oInteractiveChart.data(\"uom\");\n\t\tconst sIsCurrency = vUOM && vUOM[\"ISOCurrency\"] && vUOM[\"ISOCurrency\"].$Path;\n\t\tconst sIsUnit = vUOM && vUOM[\"Unit\"] && vUOM[\"Unit\"].$Path;\n\t\tconst sUnitfield = sIsCurrency || sIsUnit;\n\t\tlet s18nMessageTitle, s18nMessage;\n\t\tif (sUnitfield) {\n\t\t\tif (!this.checkMulitUnit(oData, sUnitfield)) {\n\t\t\t\tif (sIsCurrency) {\n\t\t\t\t\ts18nMessageTitle = oResourceBundle.getText(\"M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE\");\n\t\t\t\t\ts18nMessage = oResourceBundle.getText(\"M_VISUAL_FILTERS_MULTIPLE_CURRENCY\", sUnitfield);\n\t\t\t\t\tthis.applyErrorMessageAndTitle(s18nMessageTitle, s18nMessage, sInfoPath, oView);\n\t\t\t\t\tLog.warning(`Filter is set for multiple Currency for${sUnitfield}`);\n\t\t\t\t} else if (sIsUnit) {\n\t\t\t\t\ts18nMessageTitle = oResourceBundle.getText(\"M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE\");\n\t\t\t\t\ts18nMessage = oResourceBundle.getText(\"M_VISUAL_FILTERS_MULTIPLE_UNIT\", sUnitfield);\n\t\t\t\t\tthis.applyErrorMessageAndTitle(s18nMessageTitle, s18nMessage, sInfoPath, oView);\n\t\t\t\t\tLog.warning(`Filter is set for multiple UOMs for${sUnitfield}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Sets an error message if response data is empty.\n\t * @param sInfoPath Internal model context path to store info.\n\t * @param oResourceBundle The resource bundle\n\t * @param oView Instance of the view\n\t */\n\tsetNoDataMessage: function (sInfoPath: string, oResourceBundle: ResourceBundle, oView: View): void {\n\t\tconst s18nMessageTitle = oResourceBundle.getText(\"M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE\");\n\t\tconst s18nMessage = oResourceBundle.getText(\"M_VISUAL_FILTER_NO_DATA_TEXT\");\n\t\tthis.applyErrorMessageAndTitle(s18nMessageTitle, s18nMessage, sInfoPath, oView);\n\t},\n\tconvertFilterCondions: function (oFilterConditions: Record<string, FilterConditions[]>): Record<string, ConditionObject[]> {\n\t\tconst oConvertedConditions: Record<string, ConditionObject[]> = {};\n\t\tObject.keys(oFilterConditions).forEach(function (sKey: string) {\n\t\t\tconst aConvertedConditions: ConditionObject[] = [];\n\t\t\tconst aConditions = oFilterConditions[sKey];\n\t\t\tfor (const item of aConditions) {\n\t\t\t\tconst values = item.value2 ? [item.value1, item.value2] : [item.value1];\n\t\t\t\taConvertedConditions.push(Condition.createCondition(item.operator, values, null, null, \"Validated\" as ConditionValidated));\n\t\t\t}\n\t\t\tif (aConvertedConditions.length) {\n\t\t\t\toConvertedConditions[sKey] = aConvertedConditions;\n\t\t\t}\n\t\t});\n\t\treturn oConvertedConditions;\n\t},\n\tgetCustomConditions: function (\n\t\tRange: MetaModelType<SelectionRangeType>,\n\t\toValidProperty: MetaModelProperty,\n\t\tsPropertyName: string\n\t): { value2?: unknown; value1: unknown; operator?: string | null; path: string } {\n\t\tlet value1, value2;\n\t\tif (oValidProperty.$Type === \"Edm.DateTimeOffset\") {\n\t\t\tvalue1 = this._parseDateTime(\n\t\t\t\tgetTypeCompliantValue(this._formatDateTime(Range.Low), oValidProperty.$Type, Range.Option) as unknown as string | Date\n\t\t\t);\n\t\t\tvalue2 = Range.High\n\t\t\t\t? this._parseDateTime(\n\t\t\t\t\t\tgetTypeCompliantValue(this._formatDateTime(Range.High), oValidProperty.$Type, Range.Option) as unknown as\n\t\t\t\t\t\t\t| string\n\t\t\t\t\t\t\t| Date\n\t\t\t\t  )\n\t\t\t\t: null;\n\t\t} else {\n\t\t\tvalue1 = Range.Low;\n\t\t\tvalue2 = Range.High ? Range.High : null;\n\t\t}\n\t\treturn {\n\t\t\toperator: Range.Option\n\t\t\t\t? getRangeProperty((Range.Option as unknown as MetaModelEnum<SelectionRangeOptionType>).$EnumMember || Range.Option)\n\t\t\t\t: null,\n\t\t\tvalue1: value1,\n\t\t\tvalue2: value2,\n\t\t\tpath: sPropertyName\n\t\t};\n\t},\n\t_parseDateTime: function (sValue: string | Date): string | Date | UI5Date {\n\t\treturn this._getDateTimeTypeInstance().parseValue(sValue, \"string\");\n\t},\n\t_formatDateTime: function (sValue: string | Date): string | Date | UI5Date {\n\t\treturn this._getDateTimeTypeInstance().formatValue(sValue, \"string\");\n\t},\n\t_getDateTimeTypeInstance: function (): DateTimeOffset {\n\t\treturn new DateTimeOffset({ pattern: \"yyyy-MM-ddTHH:mm:ssZ\", calendarType: \"Gregorian\" }, { V4: true });\n\t},\n\n\t/**\n\t * Get error info when required inParameters or required filters are not available.\n\t * @param notMatchedConditions Property names(inParameters or required filters) for which values are not available .\n\t * @param resourceBundle ResourceBundle for translated texts.\n\t * @param entitySetPath EntitySet Path for property label annotation.\n\t * @param metaModel Default metamodel.\n\t * @returns Error info containing texts for title and message.\n\t */\n\tgetErrorInfoForNoInitialOverlay: function (\n\t\tnotMatchedConditions: string[],\n\t\tresourceBundle: ResourceBundle,\n\t\tentitySetPath: string,\n\t\tmetaModel: MetaModel\n\t): { showError: boolean; errorMessageTitle: string; errorMessage: string } | undefined {\n\t\tlet ret;\n\t\tif (notMatchedConditions.length > 1) {\n\t\t\tret = {\n\t\t\t\tshowError: true,\n\t\t\t\terrorMessageTitle: resourceBundle.getText(\"M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE\"),\n\t\t\t\terrorMessage: resourceBundle.getText(\"M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_MULTIPLEVF\")\n\t\t\t};\n\t\t} else if (notMatchedConditions.length === 1) {\n\t\t\tconst label =\n\t\t\t\t(metaModel.getObject(`${entitySetPath}/${notMatchedConditions[0]}@com.sap.vocabularies.Common.v1.Label`) as string) ||\n\t\t\t\tnotMatchedConditions[0];\n\t\t\tret = {\n\t\t\t\tshowError: true,\n\t\t\t\terrorMessageTitle: resourceBundle.getText(\"M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE\"),\n\t\t\t\terrorMessage: resourceBundle.getText(\"M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_SINGLEVF\", [label])\n\t\t\t};\n\t\t}\n\t\treturn ret;\n\t},\n\n\t/**\n\t * Enables or disables the chart binding for visual filters.\n\t * @param visualFilters Visual filters to be enabled or disabled\n\t * @param enable Whether to enable or disable the chart binding\n\t * @param diffState Optional parameter to specify the changed filter field paths, incase of enablement.\n\t */\n\tenableChartBinding(visualFilters: Record<string, Control>, enable: boolean, diffState?: ExternalStateType): void {\n\t\tconst changedFilterFieldPaths = diffState?.filter ? Object.keys(diffState.filter) : [];\n\t\tfor (const vfId in visualFilters) {\n\t\t\tconst visualFilterBB = visualFilters[vfId];\n\t\t\tif (visualFilterBB && visualFilterBB.isA<VisualFilter>(\"sap.fe.macros.visualfilters.VisualFilter\")) {\n\t\t\t\tvisualFilterBB.setEnableChartBinding(enable, changedFilterFieldPaths);\n\t\t\t} else {\n\t\t\t\tLog.error(`Control with id ${vfId} is not a VisualFilter`);\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default VisualFilterUtils;\n"],"mappings":"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","ignoreList":[]}