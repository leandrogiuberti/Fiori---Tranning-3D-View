{"version":3,"file":"MicroChartHelper.js","names":["MicroChartHelper","getThresholdColor","value","iContext","path","context","getPath","includes","ValueColor","Error","Critical","Neutral","getMeasurePropertyPaths","chartAnnotations","entityTypeAnnotations","chartType","isRunTimeInstance","propertyPath","Log","warning","undefined","measureIndex","Measures","iMeasureAttribute","CommonHelper","getMeasureAttributeIndex","measureAttribute","MeasureAttributes","dataPoint","DataPoint","$target","$AnnotationPath","Value","$Path","push","join","getHiddenPathExpression","_len","arguments","length","args","Array","_key","hiddenPaths","forEach","call","hiddenProperty","isNotAlwaysHidden","maxValue","valueHidden","maxValueHidden","this","logError","error","formatDecimal","property","fractionDigits","constraints","formatOptions","scale","$Scale","$Nullable","$Precision","decimals","NumberFormat","getFloatInstance","style","preserveDecimals","format","getSelectParameters","groupId","sortOrder","criticalityCalculation","criticality","otherPaths","returnObject","sorters","parameters","sorter","Property","Descending","cricticalityCalculationKeys","Object","keys","key","$$groupId","$select","$orderby","getDataPointQualifiersForMeasures","isMicroChartRunTime","qualifiers","measureAttributes","fnAddDataPointQualifier","chartMeasure","qualifier","measure","Measure","$PropertyPath","annotationPath","split","logWarning","getDisplayValueForMicroChart","pathText","valueTextPath","valueDataPointPath","valueFormat","ValueFormat","NumberOfFractionalDigits","shouldRenderMicroChart","chartAnnotation","availableChartTypes","ChartType","dataPointValue","dataPointValueHiddenPath","annotations","UI","Hidden","chartAnnotationDimension","Dimensions","finalDataPointValue","dataPointMaximumValue","MaximumValue","dataPointMaximumValueHiddenPath","shouldMicroChartRender","dataPointValueHidden","targetAnnotations","dataPointMaxValue","hiddenPath","maxValueHiddenPath","getDataPointQualifiersForMicroChart","getColorPaletteForMicroChart","Criticality","getMeasureScaleForMicroChart","valueOf","getBindingExpressionForMicrochart","microChart","collection","uiName","chartsWithBindingExpression","condition","currencyOrUnit","getUOMPathForMicrochart","showOnlyChart","dataPointCriticallity","targetObject","functionValue","batchGroupId","chartsWithUOMParts","ISOCurrency","Unit","getAggregationForMicrochart","aggregationType","dimension","measureOrDimensionBar","dataPointCriticallityCalc","targetValuePath","dimensionPropertyPath","Common","Text","CriticalityCalculation","TargetValue","getCurrencyOrUnit","getCalendarPattern","propertyType","checkPatternForRuntimeInstance","checkPatternForTemplateTimeInstance","IsCalendarYear","IsCalendarQuarter","IsCalendarMonth","IsCalendarWeek","IsCalendarDate","IsCalendarYearMonth","getX","pattern","some","type","compileExpression","formatResult","pathInModel","constant","getExpressionWithType","expression","formatWithTypeInformation","getExpressionFromAnnotation","calculateColorBinding","actualValueExpression","criticalityExpressionForMicrochart","colorBinding","direction","ImprovementDirection","deviationRangeLowValue","DeviationRangeLowValue","toleranceRangeLowValue","ToleranceRangeLowValue","acceptanceRangeLowValue","AcceptanceRangeLowValue","acceptanceRangeHighValue","AcceptanceRangeHighValue","toleranceRangeHighValue","ToleranceRangeHighValue","deviationRangeHighValue","DeviationRangeHighValue","getCriticalityCalculationBinding","getBulletMicroChartAggregations","BulletMicroChartData","__ui5_require_async","default","thresholds","_jsx","color","actual","getStackMicroChartAggregations","measureDataPath","StackedBarMicroChartBar","valueColor","displayValue","bars","getHarveyMicroChartAggregations","HarveyBallMicroChartItem","fractionLabel","fractionValue","colorValue","items","formattedLabel","fraction","getComparisonMicroChartAggregations","chart","ComparisonMicroChartData","commonTextAnnotation","titleExpression","title","getColumnMicroChartAggregations","ColumnMicroChartData","ColumnMicroChartLabel","columnChartAggregations","columns","leftBottomLabel","leftTopLabel","rightBottomLabel","rightTopLabel","getLineMicroChartAggragations","microChartDataModelObjectPath","chartTarget","targetNavigationPath","LineMicroChartLine","LineMicroChartPoint","dimensionDataPath","enhanceDataModelPath","measures","lines","i","DataPointPath","points","getObject","SortOrder","xData","getXData","yData","children","x","y","propAnnotations","name","valueFormatters","formatStringDimension","contextLocation","getValueBinding","getAreaMicroChartAggregations","AreaMicroChartItem","AreaMicroChartPoint","AreaMicroChartLabel","targetNavigationDataModelObject","MetaModelConverter","getInvolvedDataModelObjects","getAreaMicroChartItem","isChartAggregation","_type","aggregation","target","firstXLabel","firstYLabel","lastXLabel","lastYLabel","improvementDirection","minThreshold","maxThreshold","innerMinThreshold","innerMaxThreshold","getBulletMicroChartProperties","microChartProperties","targetValue","forecastValue","ForecastValue","minValue","MinimumValue","actualValueLabel","targetValueLabel","showDeltaValue","Visualization","mode","getRadialMicroChartProperties","total","percentage","colorExpression","buildExpressionForCriticalityColorMicroChart","getHarveyMicroChartProperties","totalLabel","colorPalette"],"sources":["./MicroChartHelper.tsx"],"sourcesContent":["import type {\n\tProperty as DataModelProperty,\n\tEntitySet,\n\tNavigationProperty,\n\tPathAnnotationExpression,\n\tPrimitiveType,\n\tPropertyAnnotationValue,\n\tPropertyPath\n} from \"@sap-ux/vocabularies-types/Edm\";\nimport type { Measure } from \"@sap-ux/vocabularies-types/vocabularies/Analytics\";\nimport type { SortOrderType } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { PropertyAnnotations_Common } from \"@sap-ux/vocabularies-types/vocabularies/Common_Edm\";\nimport { MeasuresAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Measures\";\nimport type { PropertyAnnotations_Measures } from \"@sap-ux/vocabularies-types/vocabularies/Measures_Edm\";\nimport type {\n\tChart,\n\tChartMeasureAttributeTypeTypes,\n\tCriticalityCalculationType,\n\tDataPoint,\n\tDataPointType,\n\tPresentationVariant\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { ChartType, UIAnnotationTerms, VisualizationType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport type { MetaModelEntityTypeAnnotations, MetaModelPropertyAnnotations } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { enhanceDataModelPath, type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type { ComputedAnnotationInterface } from \"sap/fe/core/templating/UIFormatters\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport { ValueColor } from \"sap/m/library\";\nimport type { $AreaMicroChartSettings } from \"sap/suite/ui/microchart/AreaMicroChart\";\nimport type { $BulletMicroChartSettings } from \"sap/suite/ui/microchart/BulletMicroChart\";\nimport type { $HarveyBallMicroChartSettings } from \"sap/suite/ui/microchart/HarveyBallMicroChart\";\nimport type { $StackedBarMicroChartSettings } from \"sap/suite/ui/microchart/StackedBarMicroChart\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport type { MetaModelNavProperty, MetaModelType } from \"types/metamodel_types\";\nimport type MicroChart from \"../MicroChart\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport type { $ColumnMicroChartSettings } from \"sap/suite/ui/microchart/ColumnMicroChart\";\nimport type { $ComparisonMicroChartSettings } from \"sap/suite/ui/microchart/ComparisonMicroChart\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport { getValueBinding } from \"../field/FieldTemplating\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport type { PropertyAnnotations } from \"@sap-ux/vocabularies-types/vocabularies/Edm_Types\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { buildExpressionForCriticalityColorMicroChart } from \"sap/fe/core/templating/CriticalityFormatters\";\nimport type { $LineMicroChartSettings } from \"sap/suite/ui/microchart/LineMicroChart\";\nimport type { $RadialMicroChartSettings } from \"sap/suite/ui/microchart/RadialMicroChart\";\nimport type { AggregationBindingInfo } from \"sap/ui/base/ManagedObject\";\n\ntype Property = {\n\t$kind?: string;\n\t$Type?: string;\n\t$Name?: string;\n\t$Nullable?: boolean;\n\t$MaxLength?: number;\n\t$Precision?: number;\n\t$Scale?: number | string;\n};\n\nexport type ParameterType = {\n\t$$groupId?: string;\n\t$select?: string[];\n\t$orderby?: string[];\n};\n\nexport type MicroChartAggregation =\n\t| Pick<$BulletMicroChartSettings, \"actual\" | \"thresholds\">\n\t| Pick<$HarveyBallMicroChartSettings, \"items\">\n\t| Pick<$StackedBarMicroChartSettings, \"bars\">\n\t| Pick<\n\t\t\t$AreaMicroChartSettings,\n\t\t\t| \"chart\"\n\t\t\t| \"target\"\n\t\t\t| \"firstXLabel\"\n\t\t\t| \"firstYLabel\"\n\t\t\t| \"lastXLabel\"\n\t\t\t| \"lastYLabel\"\n\t\t\t| \"minThreshold\"\n\t\t\t| \"maxThreshold\"\n\t\t\t| \"innerMinThreshold\"\n\t\t\t| \"innerMaxThreshold\"\n\t  >\n\t| Pick<$ColumnMicroChartSettings, \"columns\" | \"leftBottomLabel\" | \"rightBottomLabel\" | \"leftTopLabel\" | \"rightTopLabel\">\n\t| Pick<$ComparisonMicroChartSettings, \"data\">\n\t| Pick<$LineMicroChartSettings, \"lines\">;\n\nexport type MicroChartSettings =\n\t| $BulletMicroChartSettings\n\t| $HarveyBallMicroChartSettings\n\t| $StackedBarMicroChartSettings\n\t| $ComparisonMicroChartSettings\n\t| $AreaMicroChartSettings\n\t| $ColumnMicroChartSettings\n\t| $RadialMicroChartSettings;\n\n/**\n * Helper class used by MDC_Controls to handle SAP Fiori elements for OData V4\n * @private\n */\nconst MicroChartHelper = {\n\t/**\n\t * This function returns the Threshold Color for bullet micro chart.\n\t * @param value Threshold value provided in the annotations\n\t * @param iContext InterfaceContext with path to the threshold\n\t * @returns The indicator for Threshold Color\n\t */\n\tgetThresholdColor: function (value: string, iContext: ComputedAnnotationInterface): ValueColor {\n\t\tconst path = iContext.context.getPath();\n\t\tif (path.includes(\"DeviationRange\")) {\n\t\t\treturn ValueColor.Error;\n\t\t} else if (path.includes(\"ToleranceRange\")) {\n\t\t\treturn ValueColor.Critical;\n\t\t}\n\t\treturn ValueColor.Neutral;\n\t},\n\n\t/**\n\t * To fetch measures from DataPoints.\n\t * @param chartAnnotations Chart Annotations\n\t * @param entityTypeAnnotations EntityType Annotations\n\t * @param chartType Chart Type used\n\t * @returns Containing all measures.\n\t * @private\n\t */\n\tgetMeasurePropertyPaths: function (\n\t\tchartAnnotations: MetaModelType<Chart> | Chart,\n\t\tentityTypeAnnotations: MetaModelEntityTypeAnnotations | undefined,\n\t\tchartType: string,\n\t\tisRunTimeInstance?: boolean\n\t): string | string[] | undefined {\n\t\tconst propertyPath: string[] = [];\n\n\t\tif (!entityTypeAnnotations) {\n\t\t\tLog.warning(\"FE:Macro:MicroChart : Couldn't find annotations for the DataPoint.\");\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (const measureIndex in chartAnnotations.Measures) {\n\t\t\tconst iMeasureAttribute = CommonHelper.getMeasureAttributeIndex(\n\t\t\t\t\tmeasureIndex as unknown as number,\n\t\t\t\t\tchartAnnotations,\n\t\t\t\t\tisRunTimeInstance\n\t\t\t\t),\n\t\t\t\tmeasureAttribute =\n\t\t\t\t\tiMeasureAttribute > -1 && chartAnnotations.MeasureAttributes && chartAnnotations.MeasureAttributes[iMeasureAttribute];\n\t\t\tlet dataPoint;\n\t\t\tif (isRunTimeInstance) {\n\t\t\t\tdataPoint = (measureAttribute && (measureAttribute as ChartMeasureAttributeTypeTypes)?.DataPoint?.$target) || undefined;\n\t\t\t} else {\n\t\t\t\tdataPoint = (measureAttribute &&\n\t\t\t\t\tentityTypeAnnotations &&\n\t\t\t\t\tentityTypeAnnotations[\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmeasureAttribute.DataPoint as {\n\t\t\t\t\t\t\t\t$AnnotationPath: string;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)?.$AnnotationPath as keyof MetaModelEntityTypeAnnotations\n\t\t\t\t\t]) as MetaModelType<DataPointType> | undefined;\n\t\t\t}\n\n\t\t\tconst path = isRunTimeInstance ? dataPoint?.Value.path : dataPoint?.Value.$Path;\n\t\t\tif (path) {\n\t\t\t\tpropertyPath.push(path);\n\t\t\t} else {\n\t\t\t\tLog.warning(\n\t\t\t\t\t`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute ${chartType} MicroChart.`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn isRunTimeInstance ? propertyPath : propertyPath.join(\",\");\n\t},\n\n\t/**\n\t * This function returns the visible expression path.\n\t * @param args\n\t * @returns Expression Binding for the visible.\n\t */\n\tgetHiddenPathExpression: function (...args: unknown[]): string | boolean {\n\t\tif (!args[0] && !args[1]) {\n\t\t\treturn true;\n\t\t}\n\t\tif (args[0] === true || args[1] === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hiddenPaths: string[] = [];\n\t\t[].forEach.call(args, function (hiddenProperty: unknown) {\n\t\t\tif (hiddenProperty && (hiddenProperty as { $Path: string }).$Path) {\n\t\t\t\thiddenPaths.push(\"%{\" + (hiddenProperty as { $Path: string }).$Path + \"}\");\n\t\t\t}\n\t\t});\n\n\t\treturn hiddenPaths.length ? \"{= \" + hiddenPaths.join(\" || \") + \" === true ? false : true }\" : false;\n\t},\n\n\t/**\n\t * This function returns the true/false to display chart.\n\t * @param chartType The chart type\n\t * @param value Data point value of Value\n\t * @param value.$Path\n\t * @param maxValue Data point value of MaximumValue\n\t * @param maxValue.$Path\n\t * @param valueHidden Hidden path object/boolean value for the referenced property of value\n\t * @param valueHidden.$Path\n\t * @param maxValueHidden Hidden path object/boolean value for the referenced property of MaxValue\n\t * @param maxValueHidden.$Path\n\t * @returns `true` or `false` to hide/show chart\n\t */\n\tisNotAlwaysHidden: function (\n\t\tchartType: string,\n\t\tvalue: { $Path: string },\n\t\tmaxValue: { $Path: string } | undefined,\n\t\tvalueHidden?: boolean | { $Path: string },\n\t\tmaxValueHidden?: boolean | { $Path: string }\n\t): boolean {\n\t\tif (valueHidden === true) {\n\t\t\tthis.logError(chartType, value);\n\t\t}\n\t\tif (maxValueHidden === true) {\n\t\t\tthis.logError(chartType, maxValue);\n\t\t}\n\t\tif (valueHidden === undefined && maxValueHidden === undefined) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn ((!valueHidden || (valueHidden as { $Path: string }).$Path) && valueHidden !== undefined) ||\n\t\t\t\t((!maxValueHidden || (maxValueHidden as { $Path: string }).$Path) && maxValueHidden !== undefined)\n\t\t\t\t? true\n\t\t\t\t: false;\n\t\t}\n\t},\n\n\t/**\n\t * This function is to log errors for missing data point properties.\n\t * @param chartType The chart type.\n\t * @param value Dynamic hidden property name.\n\t * @param value.$Path Dynamic hidden property name.\n\t */\n\tlogError: function (chartType: string, value?: { $Path: string }): void {\n\t\tLog.error(`Measure Property ${value?.$Path} is hidden for the ${chartType} Micro Chart`);\n\t},\n\n\t/**\n\t * This function returns the formatted value with scale factor for the value displayed.\n\t * @param path Property path for the value\n\t * @param property The Property for constraints\n\t * @param fractionDigits No. of fraction digits specified from annotations\n\t * @param value Static value of the property\n\t * @returns Expression Binding for the value with scale.\n\t */\n\tformatDecimal: function (path: string, property: Property, fractionDigits: number | undefined, value?: number): string | undefined {\n\t\tif (path) {\n\t\t\tconst constraints = [],\n\t\t\t\tformatOptions = [\"style: 'short'\"];\n\t\t\tconst scale = typeof fractionDigits === \"number\" ? fractionDigits : (property && property?.$Scale) || 1;\n\n\t\t\tif (property.$Nullable != undefined) {\n\t\t\t\tconstraints.push(\"nullable: \" + property.$Nullable);\n\t\t\t}\n\t\t\tif (property.$Precision != undefined) {\n\t\t\t\tformatOptions.push(\"precision: \" + (property.$Precision ? property.$Precision : \"1\"));\n\t\t\t}\n\t\t\tconstraints.push(\"scale: \" + (scale === \"variable\" ? \"'\" + scale + \"'\" : scale));\n\n\t\t\treturn (\n\t\t\t\t\"{ path: '\" +\n\t\t\t\tpath +\n\t\t\t\t\"'\" +\n\t\t\t\t\", type: 'sap.ui.model.odata.type.Decimal', constraints: { \" +\n\t\t\t\tconstraints.join(\",\") +\n\t\t\t\t\" }, formatOptions: { \" +\n\t\t\t\tformatOptions.join(\",\") +\n\t\t\t\t\" } }\"\n\t\t\t);\n\t\t} else if (value) {\n\t\t\tconst decimals = typeof fractionDigits === \"number\" ? fractionDigits : 1;\n\t\t\treturn NumberFormat.getFloatInstance({ style: \"short\", preserveDecimals: true, decimals: decimals }).format(value);\n\t\t}\n\t},\n\n\t/**\n\t * To fetch, the $select parameters from annotations to add to the list binding.\n\t * @param groupId GroupId to be used\n\t * @param sortOrder Sort order to be used\n\t * @param criticalityCalculation Criticality calculation object property path\n\t * @param criticality Criticality for the chart\n\t * @param otherPaths All other paths\n\t * @param returnObject\n\t * @returns String containing all the property paths needed to be added to the $select query of the list binding.\n\t * @private\n\t */\n\tgetSelectParameters: function (\n\t\tgroupId: string,\n\t\tsortOrder?: SortOrderType[],\n\t\tcriticalityCalculation?: CriticalityCalculationType,\n\t\tcriticality?: string,\n\t\totherPaths?: string[],\n\t\treturnObject?: boolean\n\t): string | ParameterType {\n\t\tconst propertyPath: string[] = [],\n\t\t\tsorters: string[] = [];\n\t\tconst parameters: string[] | ParameterType = returnObject ? {} : [];\n\n\t\tif (sortOrder) {\n\t\t\tsortOrder.forEach((sorter: SortOrderType) => {\n\t\t\t\tsorters.push(`${sorter.Property}${sorter.Descending ? \" desc\" : \"\"}`);\n\t\t\t});\n\t\t}\n\n\t\tif (criticality) {\n\t\t\tpropertyPath.push(criticality);\n\t\t} else if (criticalityCalculation) {\n\t\t\tconst cricticalityCalculationKeys = [\n\t\t\t\t\"ImprovementDirection\",\n\t\t\t\t\"DeviationRangeLowValue\",\n\t\t\t\t\"ToleranceRangeLowValue\",\n\t\t\t\t\"AcceptanceRangeLowValue\",\n\t\t\t\t\"AcceptanceRangeHighValue\",\n\t\t\t\t\"ToleranceRangeHighValue\",\n\t\t\t\t\"DeviationRangeHighValue\"\n\t\t\t];\n\t\t\tObject.keys(criticalityCalculation).forEach((key: string) => {\n\t\t\t\tif (\n\t\t\t\t\tcricticalityCalculationKeys.includes(key) &&\n\t\t\t\t\t((criticalityCalculation as unknown as Record<string, string>)[key] as unknown as PathAnnotationExpression<string>).path\n\t\t\t\t) {\n\t\t\t\t\tpropertyPath.push(\n\t\t\t\t\t\t((criticalityCalculation as unknown as Record<string, string>)[key] as unknown as PathAnnotationExpression<string>)\n\t\t\t\t\t\t\t.path\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\totherPaths?.forEach((path) => {\n\t\t\tif (path) {\n\t\t\t\tpropertyPath.push(path);\n\t\t\t}\n\t\t});\n\n\t\tif (returnObject) {\n\t\t\tif (groupId) {\n\t\t\t\t(parameters as ParameterType).$$groupId = groupId;\n\t\t\t}\n\t\t\tif (propertyPath.length) {\n\t\t\t\t(parameters as ParameterType).$select = propertyPath;\n\t\t\t}\n\t\t\tif (sorters.length) {\n\t\t\t\t(parameters as ParameterType).$orderby = sorters;\n\t\t\t}\n\t\t\treturn parameters as ParameterType;\n\t\t} else {\n\t\t\tif (groupId) {\n\t\t\t\t(parameters as string[]).push(`$$groupId : '${groupId}'`);\n\t\t\t}\n\t\t\tif (propertyPath.length) {\n\t\t\t\t(parameters as string[]).push(`$select : '${propertyPath.join(\",\")}'`);\n\t\t\t}\n\t\t\tif (sorters.length) {\n\t\t\t\t(parameters as string[]).push(`$orderby : '${sorters.join(\",\")}'`);\n\t\t\t}\n\t\t\treturn (parameters as string[]).join(\",\");\n\t\t}\n\t},\n\n\t/**\n\t * To fetch DataPoint qualifiers of measures.\n\t * @param chartAnnotations Chart annotations\n\t * @param entityTypeAnnotations EntityType annotations\n\t * @param chartType Chart type used\n\t * @returns Containing all data point qualifiers.\n\t * @private\n\t */\n\tgetDataPointQualifiersForMeasures: function (\n\t\tchartAnnotations: MetaModelType<Chart> | Chart,\n\t\tentityTypeAnnotations: MetaModelEntityTypeAnnotations | undefined,\n\t\tchartType: string,\n\t\tisMicroChartRunTime?: boolean\n\t): string[] | string {\n\t\tconst qualifiers: string[] = [],\n\t\t\tmeasureAttributes = chartAnnotations.MeasureAttributes,\n\t\t\tfnAddDataPointQualifier = function (chartMeasure: { $PropertyPath: string } | PropertyPath): void {\n\t\t\t\tlet qualifier: string | undefined;\n\t\t\t\tif (entityTypeAnnotations) {\n\t\t\t\t\tmeasureAttributes?.forEach(function (\n\t\t\t\t\t\tmeasureAttribute: MetaModelType<ChartMeasureAttributeTypeTypes> | ChartMeasureAttributeTypeTypes\n\t\t\t\t\t) {\n\t\t\t\t\t\tlet path, measure;\n\t\t\t\t\t\tif (isMicroChartRunTime) {\n\t\t\t\t\t\t\tpath = (measureAttribute as ChartMeasureAttributeTypeTypes).Measure?.value;\n\t\t\t\t\t\t\tmeasure = (chartMeasure as PropertyPath).value;\n\t\t\t\t\t\t\tif (path == measure) {\n\t\t\t\t\t\t\t\tqualifiers.push(\n\t\t\t\t\t\t\t\t\t(measureAttribute as ChartMeasureAttributeTypeTypes)?.DataPoint?.$target?.qualifier as string\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpath = (measureAttribute as MetaModelType<ChartMeasureAttributeTypeTypes>).Measure?.$PropertyPath;\n\t\t\t\t\t\t\tmeasure = (chartMeasure as { $PropertyPath: string }).$PropertyPath;\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tpath === measure &&\n\t\t\t\t\t\t\t\t(measureAttribute as MetaModelType<ChartMeasureAttributeTypeTypes>).DataPoint?.$AnnotationPath\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst annotationPath = (measureAttribute as MetaModelType<ChartMeasureAttributeTypeTypes>)?.DataPoint\n\t\t\t\t\t\t\t\t\t?.$AnnotationPath;\n\t\t\t\t\t\t\t\tif (entityTypeAnnotations[annotationPath as keyof MetaModelEntityTypeAnnotations]) {\n\t\t\t\t\t\t\t\t\tqualifier = annotationPath?.split(\"#\")[1];\n\t\t\t\t\t\t\t\t\tif (qualifier) {\n\t\t\t\t\t\t\t\t\t\tqualifiers.push(qualifier);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (qualifier === undefined) {\n\t\t\t\t\tLog.warning(\n\t\t\t\t\t\t`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute for ${chartType} MicroChart.`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\n\t\tif (!entityTypeAnnotations) {\n\t\t\tLog.warning(`FE:Macro:MicroChart : Couldn't find annotations for the DataPoint ${chartType} MicroChart.`);\n\t\t}\n\t\tchartAnnotations.Measures?.forEach(fnAddDataPointQualifier);\n\t\treturn isMicroChartRunTime ? qualifiers : qualifiers.join(\",\");\n\t},\n\n\t/**\n\t * This function is to log warnings for missing datapoint properties.\n\t * @param chartType The Chart type.\n\t * @param error Object with properties from DataPoint.\n\t */\n\tlogWarning: function (chartType: string, error: object): void {\n\t\tfor (const key in error) {\n\t\t\tif (!error[key as keyof typeof error]) {\n\t\t\t\tLog.warning(`${key} parameter is missing for the ${chartType} Micro Chart`);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * This function is used to get DisplayValue for comparison micro chart data aggregation.\n\t * @param dataPoint Data point object.\n\t * @param pathText Object after evaluating @com.sap.vocabularies.Common.v1.Text annotation\n\t * @param pathText.$Path The target path\n\t * @param valueTextPath Evaluation of @com.sap.vocabularies.Common.v1.Text/$Path/$ value of the annotation\n\t * @param valueDataPointPath DataPoint>Value/$Path/$ value after evaluating annotation\n\t * @returns Expression binding for Display Value for comparison micro chart's aggregation data.\n\t */\n\tgetDisplayValueForMicroChart: function (\n\t\tdataPoint: MetaModelType<DataPointType>,\n\t\tpathText: { $Path: string } | undefined,\n\t\tvalueTextPath: object,\n\t\tvalueDataPointPath: object\n\t): string | undefined {\n\t\tconst valueFormat = dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits;\n\t\tif (pathText) {\n\t\t\treturn MicroChartHelper.formatDecimal(pathText[\"$Path\"], valueTextPath as Property, valueFormat);\n\t\t}\n\t\treturn MicroChartHelper.formatDecimal(dataPoint.Value[\"$Path\"], valueDataPointPath as Property, valueFormat);\n\t},\n\tshouldRenderMicroChart: function (chartAnnotation: Chart): boolean {\n\t\tconst availableChartTypes = [ChartType.Area, ChartType.Column, ChartType.Bar],\n\t\t\tchartType = chartAnnotation.ChartType,\n\t\t\tdataPoint = chartAnnotation.MeasureAttributes[0].DataPoint?.$target,\n\t\t\tdataPointValue = dataPoint?.Value,\n\t\t\tdataPointValueHiddenPath = dataPointValue?.annotations?.UI?.Hidden,\n\t\t\tchartAnnotationDimension = chartAnnotation?.Dimensions && chartAnnotation?.Dimensions[0],\n\t\t\tfinalDataPointValue = availableChartTypes.includes(chartType) ? dataPointValue && chartAnnotationDimension : dataPointValue; // only for three charts in array\n\t\tif (chartType === ChartType.Pie) {\n\t\t\tconst dataPointMaximumValue = dataPoint && (dataPoint.MaximumValue as PrimitiveType);\n\t\t\tconst dataPointMaximumValueHiddenPath = dataPointMaximumValue?.annotations?.UI?.Hidden;\n\t\t\treturn (\n\t\t\t\tdataPointValue &&\n\t\t\t\tdataPointMaximumValue &&\n\t\t\t\tMicroChartHelper.isNotAlwaysHidden(\n\t\t\t\t\tchartType,\n\t\t\t\t\tdataPointValue,\n\t\t\t\t\tdataPointMaximumValue,\n\t\t\t\t\tdataPointValueHiddenPath,\n\t\t\t\t\tdataPointMaximumValueHiddenPath\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\treturn finalDataPointValue && MicroChartHelper.isNotAlwaysHidden(chartType, dataPointValue, dataPointValueHiddenPath);\n\t},\n\n\t/**\n\t * This function is used to check whether micro chart is enabled or not by checking properties, chart annotations, hidden properties.\n\t * @param chartType MicroChart Type,such as Bullet.\n\t * @param dataPoint Data point object.\n\t * @param dataPointValueHidden Object with $Path annotation to get the hidden value path\n\t * @param targetAnnotations ChartAnnotation object\n\t * @param dataPointMaxValue Object with $Path annotation to get hidden max value path\n\t * @returns `true` if the chart has all values and properties and also it is not always hidden sFinalDataPointValue && bMicrochartVisible.\n\t */\n\tshouldMicroChartRender: function (\n\t\tchartType: string,\n\t\tdataPoint: DataPointType,\n\t\tdataPointValueHidden: Record<string, boolean>,\n\t\ttargetAnnotations: Chart,\n\t\tdataPointMaxValue: Record<string, boolean>\n\t): boolean {\n\t\tconst availableChartTypes = [\"Area\", \"Column\", \"Comparison\"],\n\t\t\tdataPointValue = dataPoint && dataPoint.Value,\n\t\t\thiddenPath = dataPointValueHidden && dataPointValueHidden[UIAnnotationTerms.Hidden],\n\t\t\tchartAnnotationDimension = targetAnnotations && targetAnnotations.Dimensions && targetAnnotations.Dimensions[0],\n\t\t\tfinalDataPointValue = availableChartTypes.includes(chartType) ? dataPointValue && chartAnnotationDimension : dataPointValue; // only for three charts in array\n\t\tif (chartType === \"Harvey\") {\n\t\t\tconst dataPointMaximumValue = dataPoint && dataPoint.MaximumValue,\n\t\t\t\tmaxValueHiddenPath = dataPointMaxValue && dataPointMaxValue[UIAnnotationTerms.Hidden];\n\t\t\treturn (\n\t\t\t\tdataPointValue &&\n\t\t\t\tdataPointMaximumValue &&\n\t\t\t\tMicroChartHelper.isNotAlwaysHidden(\n\t\t\t\t\t\"Bullet\",\n\t\t\t\t\tdataPointValue,\n\t\t\t\t\tdataPointMaximumValue as unknown as { $Path: string },\n\t\t\t\t\thiddenPath,\n\t\t\t\t\tmaxValueHiddenPath\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\treturn finalDataPointValue && MicroChartHelper.isNotAlwaysHidden(chartType, dataPointValue, undefined, hiddenPath);\n\t},\n\n\t/**\n\t * This function is used to get dataPointQualifiers for Column, Comparison and StackedBar micro charts.\n\t * @param annotationPath\n\t * @returns Result string or undefined.\n\t */\n\tgetDataPointQualifiersForMicroChart: function (annotationPath: string): string | undefined {\n\t\tif (!annotationPath.includes(UIAnnotationTerms.DataPoint)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn annotationPath.split(\"#\")[1] ?? \"\";\n\t},\n\n\t/**\n\t * This function is used to get colorPalette for comparison and HarveyBall Microcharts.\n\t * @param dataPoint Data point object.\n\t * @returns Result string for colorPalette or undefined.\n\t */\n\tgetColorPaletteForMicroChart: function (dataPoint: DataPointType): string | undefined {\n\t\treturn dataPoint.Criticality\n\t\t\t? undefined\n\t\t\t: \"sapUiChartPaletteQualitativeHue1, sapUiChartPaletteQualitativeHue2, sapUiChartPaletteQualitativeHue3,          sapUiChartPaletteQualitativeHue4, sapUiChartPaletteQualitativeHue5, sapUiChartPaletteQualitativeHue6, sapUiChartPaletteQualitativeHue7,          sapUiChartPaletteQualitativeHue8, sapUiChartPaletteQualitativeHue9, sapUiChartPaletteQualitativeHue10, sapUiChartPaletteQualitativeHue11\";\n\t},\n\n\t/**\n\t * This function is used to get MeasureScale for Area, Column and Line micro charts.\n\t * @param dataPoint Data point object.\n\t * @returns Data point value format fractional digits or data point scale or 1.\n\t */\n\tgetMeasureScaleForMicroChart: function (dataPoint: DataPointType): number {\n\t\tif (dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits) {\n\t\t\treturn dataPoint.ValueFormat.NumberOfFractionalDigits.valueOf();\n\t\t}\n\t\tif (dataPoint.Value && dataPoint.Value[\"$Path\"] && dataPoint.Value[\"$Path\"][\"$Scale\"]) {\n\t\t\treturn dataPoint.Value[\"$Path\"][\"$Scale\"];\n\t\t}\n\t\treturn 1;\n\t},\n\n\t/**\n\t * This function is to return the binding expression of microchart.\n\t * @param chartType The type of micro chart (Bullet, Radial etc.)\n\t * @param measure Measure value for micro chart.\n\t * @param microChart `this`/current model for micro chart.\n\t * @param collection Collection object.\n\t * @param uiName The @sapui.name in collection model is not accessible here from model hence need to pass it.\n\t * @param dataPoint Data point object used in case of Harvey Ball micro chart\n\t * @returns The binding expression for micro chart.\n\t * @private\n\t */\n\tgetBindingExpressionForMicrochart: function (\n\t\tchartType: string,\n\t\tmeasure: DataModelObjectPath<Measure>,\n\t\tmicroChart: MicroChart,\n\t\tcollection: MetaModelNavProperty,\n\t\tuiName: string,\n\t\tdataPoint?: DataModelObjectPath<DataPointType>\n\t): string {\n\t\tconst chartsWithBindingExpression = [ChartType.Bullet, ChartType.Pie, ChartType.Donut, \"Radial\", \"Bullet\", \"Harvey\"];\n\t\tif (!chartType || chartsWithBindingExpression.includes(chartType)) {\n\t\t\tconst condition = collection[\"$isCollection\"] || collection[\"$kind\"] === \"EntitySet\";\n\t\t\tconst path = condition ? \"\" : uiName;\n\t\t\tlet currencyOrUnit = MicroChartHelper.getUOMPathForMicrochart(microChart.showOnlyChart as boolean, measure);\n\t\t\tlet dataPointCriticallity = \"\";\n\t\t\tswitch (chartType) {\n\t\t\t\tcase \"Radial\":\n\t\t\t\tcase ChartType.Donut:\n\t\t\t\t\tcurrencyOrUnit = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Harvey\":\n\t\t\t\tcase ChartType.Pie:\n\t\t\t\t\tdataPointCriticallity = dataPoint?.targetObject?.Criticality\n\t\t\t\t\t\t? (dataPoint.targetObject?.Criticality as PathAnnotationExpression<string>)?.path\n\t\t\t\t\t\t: \"\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst functionValue = MicroChartHelper.getSelectParameters(\n\t\t\t\tmicroChart.batchGroupId as string,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tdataPointCriticallity,\n\t\t\t\t[currencyOrUnit] as string[]\n\t\t\t);\n\t\t\treturn `{ path: '${path}'` + `, parameters : {${functionValue}} }`;\n\t\t} else {\n\t\t\treturn microChart.batchGroupId ? \"{path:'', parameters : { $$groupId: '\" + microChart.batchGroupId + \"'} }\" : \"\";\n\t\t}\n\t},\n\n\t/**\n\t * This function is to return the UOMPath expression of the micro chart.\n\t * @param showOnlyChart Whether only chart should be rendered or not.\n\t * @param measure Measures for the micro chart.\n\t * @param chartType Type of the micro chart.\n\t * @returns UOMPath String for the micro chart.\n\t * @private\n\t */\n\tgetUOMPathForMicrochart: function (\n\t\tshowOnlyChart: boolean,\n\t\tmeasure?: DataModelObjectPath<Measure>,\n\t\tchartType?: string\n\t): string | undefined {\n\t\tconst chartsWithUOMParts = [ChartType.Bullet, ChartType.Pie, ChartType.Area, ChartType.Column, ChartType.Line, ChartType.Bar];\n\t\tif (!chartType || (chartType && chartsWithUOMParts.includes(chartType as ChartType))) {\n\t\t\treturn measure && !showOnlyChart\n\t\t\t\t? (\n\t\t\t\t\t\t(measure.targetObject?.annotations?.Measures as PropertyAnnotations_Measures)\n\t\t\t\t\t\t\t?.ISOCurrency as unknown as PathAnnotationExpression<string>\n\t\t\t\t  )?.path ||\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(measure.targetObject?.annotations?.Measures as PropertyAnnotations_Measures)\n\t\t\t\t\t\t\t\t?.Unit as unknown as PathAnnotationExpression<string>\n\t\t\t\t\t\t)?.path ||\n\t\t\t\t\t\t\"\"\n\t\t\t\t: \"\";\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t},\n\n\t/**\n\t * This function is to return the aggregation binding expression of micro chart.\n\t * @param aggregationType Aggregation type of chart (for example, Point for AreaMicrochart)\n\t * @param collection Collection object.\n\t * @param dataPoint Data point info for micro chart.\n\t * @param uiName The @sapui.name in collection model is not accessible here from model hence need to pass it.\n\t * @param dimension Micro chart Dimensions.\n\t * @param measure Measure value for micro chart.\n\t * @param sortOrder SortOrder for micro chart.\n\t * @param measureOrDimensionBar The measure or dimension passed specifically in the case of bar chart.\n\t * @param returnObject Flag which specifies if the return value should be string or object.\n\t * @returns Aggregation binding expression for micro chart.\n\t * @private\n\t */\n\tgetAggregationForMicrochart: function (\n\t\taggregationType: string,\n\t\tcollection: MetaModelNavProperty,\n\t\tdataPoint: DataModelObjectPath<DataPointType>,\n\t\tuiName: string,\n\t\tdimension: DataModelObjectPath<PropertyPath> | PropertyPath | undefined,\n\t\tmeasure: DataModelObjectPath<Measure>,\n\t\tsortOrder?: SortOrderType[],\n\t\tmeasureOrDimensionBar?: string,\n\t\treturnObject?: boolean\n\t): string | AggregationBindingInfo {\n\t\tlet path = collection[\"$kind\"] === \"EntitySet\" ? \"/\" : \"\";\n\t\tpath = path + uiName;\n\t\tconst groupId = \"\";\n\t\tlet dataPointCriticallityCalc;\n\t\tlet dataPointCriticallity = dataPoint.targetObject?.Criticality\n\t\t\t? (dataPoint.targetObject?.Criticality as PathAnnotationExpression<string>)?.path\n\t\t\t: \"\";\n\t\tconst currencyOrUnit = MicroChartHelper.getUOMPathForMicrochart(false, measure);\n\t\tlet targetValuePath = \"\";\n\t\tlet dimensionPropertyPath = \"\";\n\t\tif ((dimension as DataModelObjectPath<PropertyPath>)?.targetObject) {\n\t\t\tdimension = (dimension as DataModelObjectPath<PropertyPath>).targetObject;\n\t\t}\n\t\tif ((dimension as PropertyPath)?.$target?.annotations?.Common?.Text) {\n\t\t\tdimensionPropertyPath = (\n\t\t\t\t(dimension as PropertyPath)?.$target?.annotations?.Common?.Text as unknown as PathAnnotationExpression<string>\n\t\t\t)?.path;\n\t\t} else if (dimension) {\n\t\t\tdimensionPropertyPath = (dimension as PropertyPath)?.value;\n\t\t}\n\t\tswitch (aggregationType) {\n\t\t\tcase \"Points\":\n\t\t\tcase ChartType.Area:\n\t\t\t\tdataPointCriticallityCalc = dataPoint?.targetObject?.CriticalityCalculation;\n\t\t\t\ttargetValuePath = dataPoint?.targetObject?.TargetValue?.path;\n\t\t\t\tdataPointCriticallity = \"\";\n\t\t\t\tbreak;\n\t\t\tcase \"Columns\":\n\t\t\tcase ChartType.Column:\n\t\t\t\tdataPointCriticallityCalc = dataPoint?.targetObject?.CriticalityCalculation;\n\t\t\t\tbreak;\n\t\t\tcase \"LinePoints\":\n\t\t\tcase ChartType.Line:\n\t\t\t\tdataPointCriticallity = \"\";\n\t\t\t\tbreak;\n\t\t\tcase \"Bars\":\n\t\t\tcase ChartType.BarStacked:\n\t\t\t\tdimensionPropertyPath = \"\";\n\t\t\t\tbreak;\n\t\t}\n\t\tconst parameters = MicroChartHelper.getSelectParameters(\n\t\t\tgroupId,\n\t\t\tsortOrder,\n\t\t\tdataPointCriticallityCalc,\n\t\t\tdataPointCriticallity,\n\t\t\t[currencyOrUnit as string, targetValuePath, dimensionPropertyPath, measureOrDimensionBar || \"\"],\n\t\t\treturnObject\n\t\t);\n\t\tif (returnObject) {\n\t\t\treturn {\n\t\t\t\tpath,\n\t\t\t\tparameters: parameters as ParameterType\n\t\t\t};\n\t\t}\n\t\treturn `{path:'${path}'` + `, parameters : {${parameters}} }`;\n\t},\n\n\tgetCurrencyOrUnit: function (measure: MetaModelPropertyAnnotations): string | undefined {\n\t\tif (measure[`@${MeasuresAnnotationTerms.ISOCurrency}`]) {\n\t\t\treturn (\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.ISOCurrency}`] as { $Path: string }).$Path ||\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.ISOCurrency}`] as string)\n\t\t\t);\n\t\t}\n\t\tif (measure[`@${MeasuresAnnotationTerms.Unit}`]) {\n\t\t\treturn (\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.Unit}`] as { $Path: string }).$Path ||\n\t\t\t\t(measure[`@${MeasuresAnnotationTerms.Unit}`] as string)\n\t\t\t);\n\t\t}\n\t\treturn \"\";\n\t},\n\n\tgetCalendarPattern: function (\n\t\tpropertyType: string,\n\t\tannotations: Record<string, unknown> | PropertyAnnotations,\n\t\tisMicroChartRunTime?: boolean\n\t): string | undefined {\n\t\tif (isMicroChartRunTime) {\n\t\t\treturn MicroChartHelper.checkPatternForRuntimeInstance(annotations, propertyType);\n\t\t} else {\n\t\t\treturn MicroChartHelper.checkPatternForTemplateTimeInstance(annotations, propertyType);\n\t\t}\n\t},\n\n\tcheckPatternForRuntimeInstance: function (annotations: PropertyAnnotations, propertyType: string): string | undefined {\n\t\treturn ((annotations.Common?.IsCalendarYear && \"yyyy\") ||\n\t\t\t(annotations.Common?.IsCalendarQuarter && \"Q\") ||\n\t\t\t(annotations.Common?.IsCalendarMonth && \"MM\") ||\n\t\t\t(annotations.Common?.IsCalendarWeek && \"ww\") ||\n\t\t\t(annotations.Common?.IsCalendarDate && \"yyyyMMdd\") ||\n\t\t\t(annotations.Common?.IsCalendarYearMonth && \"yyyyMM\") ||\n\t\t\t(propertyType === \"Edm.Date\" && \"yyyy-MM-dd\") ||\n\t\t\tundefined) as string | undefined;\n\t},\n\n\tcheckPatternForTemplateTimeInstance: function (annotations: Record<string, unknown>, propertyType: string): string | undefined {\n\t\treturn ((annotations[`@${CommonAnnotationTerms.IsCalendarYear}`] && \"yyyy\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarQuarter}`] && \"Q\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarMonth}`] && \"MM\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarWeek}`] && \"ww\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarDate}`] && \"yyyyMMdd\") ||\n\t\t\t(annotations[`@${CommonAnnotationTerms.IsCalendarYearMonth}`] && \"yyyyMM\") ||\n\t\t\t(propertyType === \"Edm.Date\" && \"yyyy-MM-dd\") ||\n\t\t\tundefined) as string | undefined;\n\t},\n\n\tgetX: function (propertyPath: string, propertyType: string, annotations?: Record<string, unknown>): CompiledBindingToolkitExpression {\n\t\tconst pattern = annotations && MicroChartHelper.getCalendarPattern(propertyType, annotations);\n\t\tif (pattern && [\"Edm.Date\", \"Edm.String\"].some((type) => type === propertyType)) {\n\t\t\treturn compileExpression(\n\t\t\t\tformatResult(\n\t\t\t\t\t[pathInModel(propertyPath), constant(pattern), constant(propertyPath)],\n\t\t\t\t\t\"._formatters.ValueFormatter#formatStringDimension\"\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t},\n\tgetExpressionWithType(value: PrimitiveType, formatOptions?: { style: string }): CompiledBindingToolkitExpression | undefined {\n\t\tif (value && value.$target) {\n\t\t\tconst expression = formatWithTypeInformation(value.$target, getExpressionFromAnnotation(value));\n\t\t\texpression.formatOptions = {\n\t\t\t\t...expression.formatOptions,\n\t\t\t\t...formatOptions\n\t\t\t};\n\t\t\treturn compileExpression(expression);\n\t\t}\n\t},\n\tcalculateColorBinding(\n\t\tdataPoint: DataPoint,\n\t\tactualValueExpression: CompiledBindingToolkitExpression,\n\t\tcriticalityExpressionForMicrochart: string | undefined\n\t): string | undefined {\n\t\tlet colorBinding;\n\t\tif (dataPoint.Criticality || (!dataPoint.Criticality && !dataPoint.CriticalityCalculation)) {\n\t\t\tcolorBinding = criticalityExpressionForMicrochart;\n\t\t} else if (dataPoint.CriticalityCalculation) {\n\t\t\tconst criticalityCalculation = dataPoint.CriticalityCalculation;\n\t\t\tconst direction = criticalityCalculation?.ImprovementDirection;\n\t\t\tconst deviationRangeLowValue = criticalityCalculation?.DeviationRangeLowValue\n\t\t\t\t? compileExpression(getExpressionFromAnnotation(criticalityCalculation?.DeviationRangeLowValue))\n\t\t\t\t: 0;\n\t\t\tconst toleranceRangeLowValue = criticalityCalculation?.ToleranceRangeLowValue\n\t\t\t\t? compileExpression(getExpressionFromAnnotation(criticalityCalculation?.ToleranceRangeLowValue))\n\t\t\t\t: 0;\n\t\t\tconst acceptanceRangeLowValue = criticalityCalculation?.AcceptanceRangeLowValue\n\t\t\t\t? compileExpression(getExpressionFromAnnotation(criticalityCalculation?.AcceptanceRangeLowValue))\n\t\t\t\t: 0;\n\t\t\tconst acceptanceRangeHighValue =\n\t\t\t\tcriticalityCalculation?.AcceptanceRangeHighValue &&\n\t\t\t\tcompileExpression(getExpressionFromAnnotation(criticalityCalculation?.AcceptanceRangeHighValue));\n\t\t\tconst toleranceRangeHighValue =\n\t\t\t\tcriticalityCalculation?.ToleranceRangeHighValue &&\n\t\t\t\tcompileExpression(getExpressionFromAnnotation(criticalityCalculation?.ToleranceRangeHighValue));\n\t\t\tconst deviationRangeHighValue =\n\t\t\t\tcriticalityCalculation?.DeviationRangeHighValue &&\n\t\t\t\tcompileExpression(getExpressionFromAnnotation(criticalityCalculation?.DeviationRangeHighValue));\n\n\t\t\tcolorBinding = CommonHelper.getCriticalityCalculationBinding(\n\t\t\t\tdirection as string,\n\t\t\t\tactualValueExpression as string,\n\t\t\t\tdeviationRangeLowValue as string,\n\t\t\t\ttoleranceRangeLowValue as string,\n\t\t\t\tacceptanceRangeLowValue as string,\n\t\t\t\tacceptanceRangeHighValue as string,\n\t\t\t\ttoleranceRangeHighValue as string,\n\t\t\t\tdeviationRangeHighValue as string\n\t\t\t);\n\t\t}\n\t\treturn colorBinding;\n\t},\n\tasync getBulletMicroChartAggregations(\n\t\tdataPoint: DataPoint,\n\t\tcriticalityExpressionForMicrochart: string | undefined\n\t): Promise<Pick<$BulletMicroChartSettings, \"actual\" | \"thresholds\"> | undefined> {\n\t\tconst BulletMicroChartData = (await import(\"sap/suite/ui/microchart/BulletMicroChartData\")).default;\n\t\tconst actualValueExpression = compileExpression(getExpressionFromAnnotation(dataPoint.Value));\n\t\tconst thresholds: InstanceType<typeof BulletMicroChartData>[] = [];\n\t\tconst colorBinding = this.calculateColorBinding(dataPoint, actualValueExpression, criticalityExpressionForMicrochart);\n\t\tif (dataPoint.CriticalityCalculation) {\n\t\t\tconst criticalityCalculation = dataPoint.CriticalityCalculation;\n\t\t\tconst direction = criticalityCalculation?.ImprovementDirection;\n\t\t\t// thresholds\n\t\t\tif (!direction.includes(\"Minimize\") && criticalityCalculation?.DeviationRangeLowValue) {\n\t\t\t\tthresholds.push(\n\t\t\t\t\t<BulletMicroChartData\n\t\t\t\t\t\tvalue={compileExpression(getExpressionFromAnnotation(criticalityCalculation?.DeviationRangeLowValue))}\n\t\t\t\t\t\tcolor=\"Error\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!direction.includes(\"Minimize\") && criticalityCalculation?.ToleranceRangeLowValue) {\n\t\t\t\tthresholds.push(\n\t\t\t\t\t<BulletMicroChartData\n\t\t\t\t\t\tvalue={compileExpression(getExpressionFromAnnotation(criticalityCalculation?.ToleranceRangeLowValue))}\n\t\t\t\t\t\tcolor=\"Critical\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!direction.includes(\"Maximize\") && criticalityCalculation?.ToleranceRangeHighValue) {\n\t\t\t\tthresholds.push(\n\t\t\t\t\t<BulletMicroChartData\n\t\t\t\t\t\tvalue={compileExpression(getExpressionFromAnnotation(criticalityCalculation?.ToleranceRangeHighValue))}\n\t\t\t\t\t\tcolor=\"Critical\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!direction.includes(\"Maximize\") && criticalityCalculation?.DeviationRangeHighValue) {\n\t\t\t\tthresholds.push(\n\t\t\t\t\t<BulletMicroChartData\n\t\t\t\t\t\tvalue={compileExpression(getExpressionFromAnnotation(criticalityCalculation?.DeviationRangeHighValue))}\n\t\t\t\t\t\tcolor=\"Error\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tconst actual: InstanceType<typeof BulletMicroChartData> = (\n\t\t\t<BulletMicroChartData value={actualValueExpression} color={colorBinding} />\n\t\t);\n\n\t\treturn { actual, thresholds };\n\t},\n\n\tasync getStackMicroChartAggregations(\n\t\tdataPoint: DataPoint,\n\t\tmeasureDataPath: DataModelObjectPath<Measure> | undefined,\n\t\tcriticalityExpressionForMicrochart: string | undefined\n\t): Promise<Pick<$StackedBarMicroChartSettings, \"bars\"> | undefined> {\n\t\tconst StackedBarMicroChartBar = (await import(\"sap/suite/ui/microchart/StackedBarMicroChartBar\")).default;\n\t\tconst value = this.getExpressionWithType(dataPoint.Value);\n\t\tconst valueColor = criticalityExpressionForMicrochart;\n\t\tconst displayValue = (measureDataPath?.targetObject?.annotations?.Common as PropertyAnnotations_Common)?.Text\n\t\t\t? this.getExpressionWithType(\n\t\t\t\t\t(measureDataPath?.targetObject?.annotations?.Common as PropertyAnnotations_Common)\n\t\t\t\t\t\t?.Text as unknown as PathAnnotationExpression<string>\n\t\t\t  )\n\t\t\t: undefined;\n\t\treturn {\n\t\t\tbars: <StackedBarMicroChartBar value={value} displayValue={displayValue} valueColor={valueColor} />\n\t\t};\n\t},\n\n\tasync getHarveyMicroChartAggregations(\n\t\tdataPoint: DataPoint,\n\t\tcriticalityExpressionForMicrochart: string | undefined\n\t): Promise<Pick<$HarveyBallMicroChartSettings, \"items\"> | undefined> {\n\t\tconst HarveyBallMicroChartItem = (await import(\"sap/suite/ui/microchart/HarveyBallMicroChartItem\")).default;\n\t\tconst fractionLabel = this.getExpressionWithType(dataPoint.Value, { style: \"short\" });\n\t\tconst fractionValue = this.getExpressionWithType(dataPoint.Value);\n\t\tconst colorValue = criticalityExpressionForMicrochart;\n\t\treturn {\n\t\t\titems: (\n\t\t\t\t<HarveyBallMicroChartItem formattedLabel={true} fractionLabel={fractionLabel} fraction={fractionValue} color={colorValue} />\n\t\t\t)\n\t\t};\n\t},\n\n\tasync getComparisonMicroChartAggregations(\n\t\tdataPoint: DataPoint,\n\t\tcriticalityExpressionForMicrochart: string | undefined,\n\t\tchart: Chart\n\t): Promise<Pick<$ComparisonMicroChartSettings, \"data\">> {\n\t\tconst ComparisonMicroChartData = (await import(\"sap/suite/ui/microchart/ComparisonMicroChartData\")).default;\n\t\tconst actualValueExpression = compileExpression(getExpressionFromAnnotation(dataPoint.Value));\n\t\tconst displayValue = this.getExpressionWithType(dataPoint.Value, { style: \"short\" });\n\t\tconst commonTextAnnotation = chart.Dimensions[0].$target?.annotations.Common?.Text;\n\t\tconst titleExpression = commonTextAnnotation\n\t\t\t? compileExpression(getExpressionFromAnnotation(commonTextAnnotation))\n\t\t\t: compileExpression(pathInModel(chart.Dimensions[0].value));\n\t\treturn (\n\t\t\t<ComparisonMicroChartData\n\t\t\t\tvalue={actualValueExpression}\n\t\t\t\tcolor={criticalityExpressionForMicrochart}\n\t\t\t\ttitle={titleExpression}\n\t\t\t\tdisplayValue={displayValue}\n\t\t\t/>\n\t\t);\n\t},\n\n\tasync getColumnMicroChartAggregations(\n\t\tdataPoint: DataPoint,\n\t\tcriticalityExpressionForMicrochart: string | undefined,\n\t\tshowOnlyChart?: boolean\n\t): Promise<MicroChartAggregation> {\n\t\tconst ColumnMicroChartData = (await import(\"sap/suite/ui/microchart/ColumnMicroChartData\")).default;\n\t\tconst ColumnMicroChartLabel = (await import(\"sap/suite/ui/microchart/ColumnMicroChartLabel\")).default;\n\t\tconst columnChartAggregations: $ColumnMicroChartSettings = {};\n\t\tconst actualValueExpression = compileExpression(getExpressionFromAnnotation(dataPoint.Value));\n\t\tconst colorBinding = this.calculateColorBinding(dataPoint, actualValueExpression, criticalityExpressionForMicrochart);\n\t\tcolumnChartAggregations.columns = <ColumnMicroChartData value={actualValueExpression} color={colorBinding} />;\n\t\tif (!showOnlyChart) {\n\t\t\tcolumnChartAggregations.leftBottomLabel = <ColumnMicroChartLabel />;\n\t\t\tcolumnChartAggregations.leftTopLabel = <ColumnMicroChartLabel />;\n\t\t\tcolumnChartAggregations.rightBottomLabel = <ColumnMicroChartLabel />;\n\t\t\tcolumnChartAggregations.rightTopLabel = <ColumnMicroChartLabel />;\n\t\t}\n\t\treturn columnChartAggregations;\n\t},\n\n\tasync getLineMicroChartAggragations(\n\t\tmicroChartDataModelObjectPath: DataModelObjectPath<Chart | PresentationVariant> | undefined,\n\t\tchartTarget: Chart,\n\t\ttargetNavigationPath: Context\n\t): Promise<Pick<$LineMicroChartSettings, \"lines\">> {\n\t\tconst LineMicroChartLine = (await import(\"sap/suite/ui/microchart/LineMicroChartLine\")).default;\n\t\tconst LineMicroChartPoint = (await import(\"sap/suite/ui/microchart/LineMicroChartPoint\")).default;\n\t\tconst dimensionDataPath = enhanceDataModelPath<DataModelProperty>(\n\t\t\tmicroChartDataModelObjectPath as DataModelObjectPath<Chart | PresentationVariant>,\n\t\t\tchartTarget.Dimensions[0].value\n\t\t);\n\t\tconst measures = chartTarget.Measures;\n\t\tconst lines = [];\n\n\t\tfor (let i = 0; i < measures.length; i++) {\n\t\t\tconst DataPointPath = enhanceDataModelPath<DataPointType>(\n\t\t\t\tmicroChartDataModelObjectPath as DataModelObjectPath<unknown>,\n\t\t\t\tchartTarget?.MeasureAttributes[i]?.DataPoint?.value\n\t\t\t);\n\t\t\tconst measureDataPath = enhanceDataModelPath<Measure>(\n\t\t\t\tmicroChartDataModelObjectPath as DataModelObjectPath<unknown>,\n\t\t\t\tchartTarget.Measures[i].value\n\t\t\t);\n\n\t\t\tconst points = MicroChartHelper.getAggregationForMicrochart(\n\t\t\t\t\"LinePoints\",\n\t\t\t\ttargetNavigationPath?.getObject(),\n\t\t\t\tDataPointPath,\n\t\t\t\ttargetNavigationPath?.getObject(\"@sapui.name\"),\n\t\t\t\tchartTarget.Dimensions[0],\n\t\t\t\tmeasureDataPath,\n\t\t\t\t(microChartDataModelObjectPath?.targetObject as PresentationVariant)?.SortOrder as unknown as SortOrderType[],\n\t\t\t\tundefined,\n\t\t\t\ttrue\n\t\t\t) as `{${string}}`;\n\n\t\t\tconst xData = this.getXData(dimensionDataPath, microChartDataModelObjectPath);\n\t\t\tconst yData = compileExpression(getExpressionFromAnnotation(DataPointPath.targetObject?.Value));\n\n\t\t\tlines.push(\n\t\t\t\t<LineMicroChartLine points={points}>\n\t\t\t\t\t{{ points: <LineMicroChartPoint x={xData} y={yData}></LineMicroChartPoint> }}\n\t\t\t\t</LineMicroChartLine>\n\t\t\t);\n\t\t}\n\n\t\treturn { lines: lines };\n\t},\n\n\tgetXData(\n\t\tdimensionDataPath: DataModelObjectPath<DataModelProperty>,\n\t\tmicroChartDataModelObjectPath: DataModelObjectPath<Chart | PresentationVariant> | undefined\n\t): CompiledBindingToolkitExpression {\n\t\tlet xData;\n\t\tconst propertyType = dimensionDataPath?.targetObject?.type as string;\n\t\tconst propAnnotations = dimensionDataPath.targetObject?.annotations;\n\t\tif (\n\t\t\tpropertyType === \"Edm.Date\" ||\n\t\t\t(dimensionDataPath.targetObject?.type === \"Edm.String\" &&\n\t\t\t\tMicroChartHelper.getCalendarPattern(propertyType, dimensionDataPath.targetObject?.annotations, true))\n\t\t) {\n\t\t\tconst propertyPath = dimensionDataPath?.targetObject?.name;\n\t\t\tconst pattern = propAnnotations && MicroChartHelper.getCalendarPattern(propertyType, propAnnotations, true);\n\t\t\tif (pattern && [\"Edm.Date\", \"Edm.String\"].some((type) => type === propertyType)) {\n\t\t\t\txData = compileExpression(\n\t\t\t\t\tformatResult([pathInModel(propertyPath), pattern, propertyPath], valueFormatters.formatStringDimension)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tdimensionDataPath.contextLocation = microChartDataModelObjectPath;\n\t\t\txData = getValueBinding(dimensionDataPath, {});\n\t\t}\n\t\treturn xData;\n\t},\n\tasync getAreaMicroChartAggregations(\n\t\tchartTarget: Chart,\n\t\tmicroChartDataModelObjectPath: DataModelObjectPath<PresentationVariant | Chart>,\n\t\ttargetNavigationPath: Context,\n\t\tshowOnlyChart?: boolean\n\t): Promise<\n\t\tPick<\n\t\t\t$AreaMicroChartSettings,\n\t\t\t| \"chart\"\n\t\t\t| \"target\"\n\t\t\t| \"firstXLabel\"\n\t\t\t| \"firstYLabel\"\n\t\t\t| \"lastXLabel\"\n\t\t\t| \"lastYLabel\"\n\t\t\t| \"minThreshold\"\n\t\t\t| \"maxThreshold\"\n\t\t\t| \"innerMinThreshold\"\n\t\t\t| \"innerMaxThreshold\"\n\t\t>\n\t> {\n\t\tconst AreaMicroChartItem = (await import(\"sap/suite/ui/microchart/AreaMicroChartItem\")).default;\n\t\tconst AreaMicroChartPoint = (await import(\"sap/suite/ui/microchart/AreaMicroChartPoint\")).default;\n\t\tconst AreaMicroChartLabel = (await import(\"sap/suite/ui/microchart/AreaMicroChartLabel\")).default;\n\t\tconst dataPoint = chartTarget?.MeasureAttributes[0]?.DataPoint?.$target as DataPoint;\n\t\tconst measureDataPath = enhanceDataModelPath<Measure>(microChartDataModelObjectPath, chartTarget.Measures[0].value);\n\t\tconst dimensionDataPath = enhanceDataModelPath<DataModelProperty>(microChartDataModelObjectPath, chartTarget.Dimensions[0].value);\n\t\tconst DataPointPath = enhanceDataModelPath<DataPointType>(\n\t\t\tmicroChartDataModelObjectPath as DataModelObjectPath<unknown>,\n\t\t\tchartTarget?.MeasureAttributes[0]?.DataPoint?.value\n\t\t);\n\t\tconst targetNavigationDataModelObject: DataModelObjectPath<EntitySet | NavigationProperty> =\n\t\t\tMetaModelConverter.getInvolvedDataModelObjects(targetNavigationPath);\n\t\tconst getAreaMicroChartItem = (\n\t\t\ty: PropertyAnnotationValue<PrimitiveType>,\n\t\t\tcolor?: string,\n\t\t\tisChartAggregation?: boolean\n\t\t): InstanceType<typeof AreaMicroChartItem> => {\n\t\t\tlet points;\n\t\t\tif (isChartAggregation) {\n\t\t\t\tpoints = MicroChartHelper.getAggregationForMicrochart(\n\t\t\t\t\t\"Points\",\n\t\t\t\t\ttargetNavigationPath?.getObject(),\n\t\t\t\t\tDataPointPath,\n\t\t\t\t\ttargetNavigationPath?.getObject(\"@sapui.name\"),\n\t\t\t\t\tchartTarget.Dimensions[0],\n\t\t\t\t\tmeasureDataPath,\n\t\t\t\t\t(microChartDataModelObjectPath?.targetObject as PresentationVariant)?.SortOrder as unknown as\n\t\t\t\t\t\t| SortOrderType[]\n\t\t\t\t\t\t| undefined,\n\t\t\t\t\t\"\",\n\t\t\t\t\ttrue\n\t\t\t\t) as `{${string}}`;\n\t\t\t} else {\n\t\t\t\tpoints = {\n\t\t\t\t\tpath:\n\t\t\t\t\t\t(targetNavigationDataModelObject.targetObject?._type === \"EntitySet\" ? \"/\" : \"\") +\n\t\t\t\t\t\ttargetNavigationDataModelObject.targetObject?.name\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<AreaMicroChartItem color={color} points={points}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tpoints: <AreaMicroChartPoint x={x} y={compileExpression(getExpressionFromAnnotation(y))}></AreaMicroChartPoint>\n\t\t\t\t\t}}\n\t\t\t\t</AreaMicroChartItem>\n\t\t\t);\n\t\t};\n\t\tconst aggregation: $AreaMicroChartSettings = {};\n\t\tconst x = this.getXData(dimensionDataPath, microChartDataModelObjectPath);\n\t\taggregation.chart = getAreaMicroChartItem(dataPoint.Value, undefined, true);\n\t\taggregation.target = getAreaMicroChartItem(dataPoint.TargetValue);\n\t\tif (!showOnlyChart) {\n\t\t\taggregation.firstXLabel = <AreaMicroChartLabel />;\n\t\t\taggregation.firstYLabel = <AreaMicroChartLabel />;\n\t\t\taggregation.lastXLabel = <AreaMicroChartLabel />;\n\t\t\taggregation.lastYLabel = <AreaMicroChartLabel />;\n\t\t}\n\t\tconst improvementDirection = DataPointPath?.targetObject?.CriticalityCalculation?.ImprovementDirection;\n\t\tif (improvementDirection === \"UI.ImprovementDirectionType/Minimize\") {\n\t\t\taggregation.minThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.ToleranceRangeHighValue, \"Good\");\n\t\t\taggregation.maxThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.DeviationRangeHighValue, \"Error\");\n\t\t} else if (improvementDirection === \"UI.ImprovementDirectionType/Maximize\") {\n\t\t\taggregation.minThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.DeviationRangeLowValue, \"Error\");\n\t\t\taggregation.maxThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.ToleranceRangeLowValue, \"Good\");\n\t\t} else if (improvementDirection === \"UI.ImprovementDirectionType/Target\") {\n\t\t\taggregation.minThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.DeviationRangeLowValue, \"Error\");\n\t\t\taggregation.maxThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.DeviationRangeHighValue, \"Error\");\n\t\t\taggregation.innerMinThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.ToleranceRangeLowValue, \"Good\");\n\t\t\taggregation.innerMaxThreshold = getAreaMicroChartItem(dataPoint?.CriticalityCalculation?.ToleranceRangeHighValue, \"Good\");\n\t\t}\n\t\treturn aggregation;\n\t},\n\n\tgetBulletMicroChartProperties(\n\t\tmicroChartProperties: MicroChartSettings,\n\t\tdataPoint: DataPoint\n\t): Partial<PropertiesOf<MicroChartSettings>> {\n\t\t(microChartProperties as $BulletMicroChartSettings).targetValue = dataPoint.TargetValue\n\t\t\t? compileExpression(getExpressionFromAnnotation(dataPoint.TargetValue))\n\t\t\t: undefined;\n\t\t(microChartProperties as $BulletMicroChartSettings).forecastValue = dataPoint.ForecastValue\n\t\t\t? compileExpression(getExpressionFromAnnotation(dataPoint.ForecastValue))\n\t\t\t: undefined;\n\t\t(microChartProperties as $BulletMicroChartSettings).maxValue = dataPoint.MaximumValue\n\t\t\t? compileExpression(constant(dataPoint.MaximumValue?.valueOf()))\n\t\t\t: undefined;\n\t\t(microChartProperties as $BulletMicroChartSettings).minValue = dataPoint.MinimumValue\n\t\t\t? compileExpression(constant(dataPoint.MinimumValue?.valueOf()))\n\t\t\t: undefined;\n\t\t(microChartProperties as $BulletMicroChartSettings).actualValueLabel = dataPoint.Value\n\t\t\t? MicroChartHelper.getExpressionWithType(dataPoint.Value, { style: \"short\" })\n\t\t\t: undefined;\n\t\t(microChartProperties as $BulletMicroChartSettings).targetValueLabel = dataPoint.TargetValue\n\t\t\t? MicroChartHelper.getExpressionWithType(dataPoint.TargetValue, { style: \"short\" })\n\t\t\t: undefined;\n\t\t(microChartProperties as $BulletMicroChartSettings).showDeltaValue =\n\t\t\tdataPoint.Visualization && dataPoint.Visualization === VisualizationType.DeltaBulletChart;\n\t\t(microChartProperties as $BulletMicroChartSettings).mode = (microChartProperties as $BulletMicroChartSettings).showDeltaValue\n\t\t\t? \"Delta\"\n\t\t\t: undefined;\n\n\t\treturn microChartProperties;\n\t},\n\n\tgetRadialMicroChartProperties(\n\t\tmicroChartProperties: MicroChartSettings,\n\t\tdataPoint: DataPoint\n\t): Partial<PropertiesOf<MicroChartSettings>> {\n\t\t(microChartProperties as $RadialMicroChartSettings).total = dataPoint.TargetValue\n\t\t\t? compileExpression(getExpressionFromAnnotation(dataPoint.TargetValue))\n\t\t\t: 100;\n\t\tconst value = compileExpression(getExpressionFromAnnotation(dataPoint.Value));\n\t\t(microChartProperties as $RadialMicroChartSettings).fraction = value;\n\t\t(microChartProperties as $RadialMicroChartSettings).percentage = !dataPoint.TargetValue ? value : undefined;\n\n\t\tconst colorExpression = dataPoint.Criticality ? buildExpressionForCriticalityColorMicroChart(dataPoint) : undefined;\n\n\t\t(microChartProperties as $RadialMicroChartSettings).valueColor = MicroChartHelper.calculateColorBinding(\n\t\t\tdataPoint,\n\t\t\tvalue,\n\t\t\tcolorExpression\n\t\t);\n\t\treturn microChartProperties;\n\t},\n\n\tgetHarveyMicroChartProperties(\n\t\tmicroChartProperties: MicroChartSettings,\n\t\tdataPoint: DataPoint\n\t): Partial<PropertiesOf<MicroChartSettings>> {\n\t\t(microChartProperties as $HarveyBallMicroChartSettings).formattedLabel = true;\n\t\t(microChartProperties as $HarveyBallMicroChartSettings).totalLabel = MicroChartHelper.getExpressionWithType(\n\t\t\tdataPoint.MaximumValue,\n\t\t\t{\n\t\t\t\tstyle: \"short\"\n\t\t\t}\n\t\t);\n\t\t(microChartProperties as $HarveyBallMicroChartSettings).total = MicroChartHelper.getExpressionWithType(dataPoint.MaximumValue);\n\t\t(microChartProperties as $HarveyBallMicroChartSettings).colorPalette = MicroChartHelper.getColorPaletteForMicroChart(dataPoint);\n\t\treturn microChartProperties;\n\t}\n};\n\nexport default MicroChartHelper;\n"],"mappings":"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","ignoreList":[]}