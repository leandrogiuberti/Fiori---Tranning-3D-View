{"version":3,"file":"Designtime.helper.js","names":["getChangedPropertyValues","designtimeSettings","unchangedData","propertyValues","propertyChanges","forEach","setting","id","JSON","stringify","writeObject","writeObjectFor","changeObject","length","settingsTogether","path","skipChange","_exports","getChangeStructure","appComponent","page","propertyPath","selector","changeSpecificData","appDescriptorChangeType","content","parameters","entityPropertyChange","operation","propertyValue","setLocalText","item","resourceModel","key","getText","setLocalTexts","model","settingsData","getData","control","controlData","enum","enumData","createAdaptionDialogContent","configContext","configPath","arguments","undefined","settingsModel","JSONModel","setData","deepClone","getProperty","list","List","setModel","updatePersonalizationDependentControls","selectedValue","dependentControls","isOwnSettings","controlId","listItems","getItems","getContent","data","setSelected","listItem","InputListItem","label","bindContent","factory","context","type","Item","text","select","Select","selectedKey","change","event","this","getParameter","getKey","bindItems","template","Input","value","oMultiInput","MultiInput","width","showValueHelp","showClearIcon","tokens","navigationProperties","map","navigationProperty","Token","tokenUpdate","array","push","splice","indexOf","addValidator","args","CheckBox","selected","toLowerCase","parse","toString","async","openAdaptionDialog","title","infoText","size","informationMessage","MessageStrip","showIcon","addStyleClass","listIndex","Promise","resolve","reject","dialog","Dialog","contentWidth","contentHeight","height","buttons","Button","press","updateConfigModel","getModel","close","open","processChanges","singleChange","changes","Object","entries","getChange","processGlobalChanges","keys","separateChanges","CommonUtils","getAppComponent","getPage","getParent","separateGlobalChanges","viewId","getTargetView","getId","split","extractChanges","propertyValuesEntered","globalSettings","globalChanges","global","concat","noChanges","isFioriToolsRtaMode","urlParams","shellService","getShellServices","parseParameters","window","location","search","isRTAMode","getSettingsIfKeyUser","items","filter","keyUser","isConfigModelPrepared","prepareConfigModel","setProperty","getPersonalizationSetting","settings","getObject","personalizationSetting","find","updatedSettings","getPropertyNamesAndDescriptions","props","prop","name","description","enums","enumm","isManifestChangesEnabled","owner","Component","getOwnerComponentFor","sapFeManifest","getManifestEntry","app","disableManifestChanges"],"sources":["./Designtime.helper.ts"],"sourcesContent":["/*!\n * Reuse functions for designtime adaption\n */\n\nimport deepClone from \"sap/base/util/deepClone\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport type { TemplateType } from \"sap/fe/core/converters/ManifestSettings\";\nimport Button from \"sap/m/Button\";\nimport CheckBox from \"sap/m/CheckBox\";\nimport Dialog from \"sap/m/Dialog\";\nimport Input from \"sap/m/Input\";\nimport InputListItem from \"sap/m/InputListItem\";\nimport List from \"sap/m/List\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport type { MultiInput$TokenUpdateEvent } from \"sap/m/MultiInput\";\nimport MultiInput from \"sap/m/MultiInput\";\nimport Select from \"sap/m/Select\";\nimport Token from \"sap/m/Token\";\nimport Component from \"sap/ui/core/Component\";\nimport type Control from \"sap/ui/core/Control\";\nimport Item from \"sap/ui/core/Item\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\nexport type adaptionChange = {\n\tappComponent: AppComponent;\n\tselector: AppComponent;\n\tchangeSpecificData: {\n\t\tappDescriptorChangeType: \"appdescr_fe_changePageConfiguration\";\n\t\tcontent: {\n\t\t\tparameters: {\n\t\t\t\tpage: string;\n\t\t\t\tentityPropertyChange: {\n\t\t\t\t\tpropertyPath: string;\n\t\t\t\t\toperation: string;\n\t\t\t\t\tpropertyValue: string | string[] | boolean | number | object | undefined;\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n};\n\nexport type DesigntimeSettingEnums = {\n\tid: string;\n\tname: string;\n\tdescription?: string;\n};\n\nexport type DesigntimeSetting = {\n\tid: string;\n\tpath?: string;\n\tname: string;\n\tdescription: string;\n\trestrictedTo?: TemplateType[];\n\tvalue: unknown;\n\ttype?: string;\n\tenums?: DesigntimeSettingEnums[];\n\tskipChange?: boolean;\n\twriteObjectFor?: string;\n\twriteObject?: { id: string; path?: string }[];\n\tkeyUser?: boolean;\n};\n\nexport type PropertyValue = Record<string, string | string[] | boolean | number | object | undefined>;\n\nexport type SettingsData = {\n\tlabel: string;\n\ttooltip: string;\n\tcontrol: ControlData[];\n\tkeyUser?: boolean;\n};\n\ntype ControlData = {\n\ttype: string | undefined;\n\tenum: DesigntimeSettingEnums[] | undefined;\n\tvalue: unknown;\n\tid: string;\n};\n\ntype propKeyAndValue = { [key: string]: string | string[] | boolean | number | object | undefined };\n\n/**\n * Identify which settings have changed.\n * @param designtimeSettings\n * @param unchangedData\n * @param propertyValues\n *  @returns The configuration properties where the values have been changed compared to the starting values\n */\nexport function getChangedPropertyValues(\n\tdesigntimeSettings: DesigntimeSetting[],\n\tunchangedData: PropertyValue,\n\tpropertyValues: PropertyValue\n): PropertyValue {\n\tconst propertyChanges: PropertyValue = {};\n\n\tdesigntimeSettings.forEach(function (setting) {\n\t\tif (\n\t\t\t(typeof unchangedData[setting.id] !== \"object\" && unchangedData[setting.id] !== propertyValues[setting.id]) ||\n\t\t\t(typeof unchangedData[setting.id] === \"object\" &&\n\t\t\t\tJSON.stringify(unchangedData[setting.id]) !== JSON.stringify(propertyValues[setting.id]))\n\t\t) {\n\t\t\tif (setting.writeObject && propertyValues[setting.id] === setting.writeObjectFor) {\n\t\t\t\t// We write an object for this setting\n\t\t\t\tconst changeObject: PropertyValue = {};\n\t\t\t\tif (setting.writeObject && setting.writeObject?.length > 0) {\n\t\t\t\t\tsetting.writeObject.forEach(function (settingsTogether) {\n\t\t\t\t\t\tchangeObject[settingsTogether.path ? settingsTogether.path : settingsTogether.id] =\n\t\t\t\t\t\t\tpropertyValues[settingsTogether.id];\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tpropertyChanges[setting.path ? setting.path : setting.id] = changeObject;\n\t\t\t} else if (!setting.skipChange) {\n\t\t\t\tpropertyChanges[setting.path ? setting.path : setting.id] = propertyValues[setting.id];\n\t\t\t}\n\t\t}\n\t});\n\treturn propertyChanges;\n}\n/**\n * Convert sap.fe change into a structure required by the flexibility tools.\n * @param appComponent\n * @param page\n * @param propertyPath\n * @param propertyChanges\n * @returns The change structure used by flexibility tools\n */\nexport function getChangeStructure(\n\tappComponent: AppComponent,\n\tpage: string,\n\tpropertyPath: string,\n\tpropertyChanges: string | string[] | boolean | number | object | undefined\n): adaptionChange {\n\treturn {\n\t\tappComponent: appComponent,\n\t\tselector: appComponent,\n\t\tchangeSpecificData: {\n\t\t\tappDescriptorChangeType: \"appdescr_fe_changePageConfiguration\",\n\t\t\tcontent: {\n\t\t\t\tparameters: {\n\t\t\t\t\tpage: page,\n\t\t\t\t\tentityPropertyChange: {\n\t\t\t\t\t\tpropertyPath: propertyPath,\n\t\t\t\t\t\toperation: \"UPSERT\",\n\t\t\t\t\t\tpropertyValue: propertyChanges\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction setLocalText(item: Record<string, unknown>, resourceModel: ResourceModel): void {\n\tfor (const key in item) {\n\t\tif (key !== \"id\" && typeof item[key] === \"string\") {\n\t\t\titem[key] = resourceModel.getText(item[key] as string);\n\t\t}\n\t}\n}\n\nfunction setLocalTexts(model: JSONModel, resourceModel: ResourceModel): void {\n\tconst settingsData = model.getData() as SettingsData[];\n\tsettingsData.forEach((setting) => {\n\t\tsetLocalText(setting, resourceModel);\n\t\tsetting.control.forEach((controlData) => {\n\t\t\tsetLocalText(controlData, resourceModel);\n\t\t\tcontrolData.enum?.forEach((enumData) => {\n\t\t\t\tsetLocalText(enumData, resourceModel);\n\t\t\t});\n\t\t});\n\t});\n}\n\nexport function createAdaptionDialogContent(\n\tconfigContext: Context,\n\tpropertyValues: PropertyValue,\n\tresourceModel: ResourceModel,\n\tconfigPath = \"rta/configSettings\"\n): List {\n\tconst settingsModel = new JSONModel();\n\tsettingsModel.setData(deepClone(configContext.getProperty(configPath)));\n\tsetLocalTexts(settingsModel, resourceModel);\n\tconst list = new List();\n\tlist.setModel(settingsModel);\n\n\t// Function to clear personalization dependent controls when \"Own Settings\" is selected\n\tconst updatePersonalizationDependentControls = (selectedValue: string): void => {\n\t\tconst dependentControls = [\"personalizationSort\", \"personalizationColumn\", \"personalizationFilter\", \"personalizationGroup\"];\n\t\tconst isOwnSettings = selectedValue === \"Own Settings\";\n\t\tif (isOwnSettings) {\n\t\t\tdependentControls.forEach((controlId) => {\n\t\t\t\tconst listItems = list.getItems();\n\t\t\t\tfor (const item of listItems) {\n\t\t\t\t\tconst content = (item as InputListItem).getContent();\n\t\t\t\t\tfor (const control of content) {\n\t\t\t\t\t\tif (control.data(\"id\") === controlId) {\n\t\t\t\t\t\t\tif ((control as CheckBox).setSelected) {\n\t\t\t\t\t\t\t\t(control as CheckBox).setSelected(false);\n\t\t\t\t\t\t\t\tpropertyValues[controlId] = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\n\tconst listItem = new InputListItem({\n\t\tlabel: \"{label}\"\n\t});\n\n\tlistItem.bindContent({\n\t\tpath: \"control\",\n\t\tfactory: function (path: string, context: { getProperty(name: string): string } /* sap.ui.model.Context */) {\n\t\t\tconst type = context.getProperty(\"type\");\n\t\t\tconst id = context.getProperty(\"id\");\n\n\t\t\tswitch (type) {\n\t\t\t\tcase \"string\":\n\t\t\t\t\tif (context.getProperty(\"enum\")) {\n\t\t\t\t\t\t// Create a select list for multiple options to select\n\t\t\t\t\t\tconst item = new Item({\n\t\t\t\t\t\t\ttext: \"{name}\",\n\t\t\t\t\t\t\tkey: \"{id}\"\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst select = new Select({\n\t\t\t\t\t\t\tselectedKey: \"{value}\",\n\t\t\t\t\t\t\tchange: function (event): void {\n\t\t\t\t\t\t\t\tpropertyValues[(this as Select).data(\"id\") as keyof PropertyValue] = (\n\t\t\t\t\t\t\t\t\tevent.getParameter(\"selectedItem\") as Item\n\t\t\t\t\t\t\t\t).getKey() as string & boolean;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).data(\"id\", id);\n\n\t\t\t\t\t\tselect.bindItems({\n\t\t\t\t\t\t\tpath: \"enum\",\n\t\t\t\t\t\t\ttemplate: item\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn select;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Create an Input for text changes\n\t\t\t\t\t\treturn new Input({\n\t\t\t\t\t\t\tvalue: \"{value}\",\n\t\t\t\t\t\t\tchange: function (event): void {\n\t\t\t\t\t\t\t\tpropertyValues[(this as Input).data(\"id\") as keyof PropertyValue] = event.getParameter(\"value\") as string &\n\t\t\t\t\t\t\t\t\tboolean;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}).data(\"id\", id);\n\t\t\t\t\t}\n\t\t\t\tcase \"string[]\":\n\t\t\t\t\t// Create an multi input field for the navigation properties\n\t\t\t\t\tconst oMultiInput = new MultiInput({\n\t\t\t\t\t\twidth: \"70%\",\n\t\t\t\t\t\tshowValueHelp: false,\n\t\t\t\t\t\tshowClearIcon: true,\n\t\t\t\t\t\ttokens: (propertyValues?.navigationProperties as string[]).map((navigationProperty) => {\n\t\t\t\t\t\t\treturn new Token({ text: navigationProperty, key: navigationProperty });\n\t\t\t\t\t\t}),\n\t\t\t\t\t\ttokenUpdate: function (event: MultiInput$TokenUpdateEvent): void {\n\t\t\t\t\t\t\tconst array = propertyValues[(this as MultiInput).data(\"id\")] as string[];\n\t\t\t\t\t\t\tif ((event.getParameter(\"addedTokens\") as Token[])?.length > 0) {\n\t\t\t\t\t\t\t\tarray.push((event?.getParameter(\"addedTokens\") as Token[])[0]?.getProperty(\"key\"));\n\t\t\t\t\t\t\t} else if ((event.getParameter(\"removedTokens\") as Token[])?.length > 0) {\n\t\t\t\t\t\t\t\tarray.splice(array.indexOf((event?.getParameter(\"removedTokens\") as Token[])[0]?.getProperty(\"key\")), 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}).data(\"id\", id);\n\t\t\t\t\toMultiInput.addValidator(function (args: { text: string }) {\n\t\t\t\t\t\tconst text = args.text;\n\t\t\t\t\t\treturn new Token({\n\t\t\t\t\t\t\tkey: text,\n\t\t\t\t\t\t\ttext: text\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\treturn oMultiInput;\n\t\t\t\tcase \"number\":\n\t\t\t\t\t// Create an Input for number changes\n\t\t\t\t\treturn new Input({\n\t\t\t\t\t\tvalue: \"{value}\",\n\t\t\t\t\t\ttype: \"Number\",\n\t\t\t\t\t\tchange: function (event): void {\n\t\t\t\t\t\t\tpropertyValues[(this as Input).data(\"id\") as keyof PropertyValue] = event.getParameter(\"value\") as string &\n\t\t\t\t\t\t\t\tboolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).data(\"id\", id);\n\t\t\t\tcase \"boolean\":\n\t\t\t\t\t// Create a checkbox for true/false values\n\t\t\t\t\treturn new CheckBox({\n\t\t\t\t\t\tselected: \"{value}\",\n\t\t\t\t\t\tselect: function (event): void {\n\t\t\t\t\t\t\tpropertyValues[(this as CheckBox).data(\"id\") as keyof PropertyValue] = event.getParameter(\n\t\t\t\t\t\t\t\t\"selected\"\n\t\t\t\t\t\t\t) as string & boolean;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).data(\"id\", id);\n\t\t\t\tcase \"booleanOrString\":\n\t\t\t\t\t// Create a select list for boolean and string options to select\n\t\t\t\t\t// This type is at the moment only used for personalization settings which can be undefined, true, false or an object\n\t\t\t\t\t// The select list is used to select between true, false and \"Own Settings\"\n\t\t\t\t\t// If \"Own Settings\" is selected, the personalization object is written, otherwise the boolean is written (undefined cannot be written in a manifest change)\n\t\t\t\t\tconst item = new Item({\n\t\t\t\t\t\ttext: \"{name}\",\n\t\t\t\t\t\tkey: \"{id}\"\n\t\t\t\t\t});\n\n\t\t\t\t\tconst select = new Select({\n\t\t\t\t\t\tselectedKey: \"{value}\",\n\t\t\t\t\t\tchange: function (event): void {\n\t\t\t\t\t\t\tlet value = (event.getParameter(\"selectedItem\") as Item).getKey();\n\t\t\t\t\t\t\t// Convert string to boolean if necessary\n\t\t\t\t\t\t\tif (value.toLowerCase() === \"false\" || value.toLowerCase() === \"true\") {\n\t\t\t\t\t\t\t\tvalue = JSON.parse(value.toLowerCase());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpropertyValues[(this as Select).data(\"id\") as keyof PropertyValue] = value;\n\t\t\t\t\t\t\t// Special handling for personalization setting\n\t\t\t\t\t\t\tif ((this as Select).data(\"id\") === \"personalization\") {\n\t\t\t\t\t\t\t\tupdatePersonalizationDependentControls(value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}).data(\"id\", id);\n\n\t\t\t\t\tselect.bindItems({\n\t\t\t\t\t\tpath: \"enum\",\n\t\t\t\t\t\ttemplate: item\n\t\t\t\t\t});\n\t\t\t\t\treturn select;\n\t\t\t\tcase \"json\":\n\t\t\t\t\t// Create an input for json object descriptions\n\t\t\t\t\t// A text area would have been better but this does not work with the InputListItem\n\t\t\t\t\t// we would have needed a CustomListItem instead\n\t\t\t\t\t// which would have been too much effort as we would have needed to change the whole structure\n\t\t\t\t\treturn new Input({\n\t\t\t\t\t\tvalue: \"{value}\",\n\t\t\t\t\t\tchange: function (event): void {\n\t\t\t\t\t\t\tpropertyValues[(this as Input).data(\"id\") as keyof PropertyValue] = JSON.parse(\n\t\t\t\t\t\t\t\tevent.getParameter(\"value\")?.toString() as string\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}).data(\"id\", id);\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\n\tlist.bindItems({\n\t\tpath: \"/\",\n\t\ttemplate: listItem\n\t});\n\n\treturn list;\n}\n\nexport async function openAdaptionDialog(\n\tconfigContext: Context,\n\tpropertyValues: PropertyValue,\n\ttitle: string,\n\tresourceModel: ResourceModel,\n\tconfigPath = \"rta/configSettings\",\n\tinfoText = \"{sap.fe.i18n>RTA_CONFIGURATION_INFO_MESSAGE}\",\n\tsize?: { width: string; height: string }\n): Promise<PropertyValue> {\n\tconst list = createAdaptionDialogContent(configContext, propertyValues, resourceModel, configPath);\n\tconst content: (List | MessageStrip)[] = [];\n\tconst informationMessage = new MessageStrip({\n\t\tshowIcon: true,\n\t\ttype: \"Information\",\n\t\ttext: infoText\n\t});\n\tinformationMessage.addStyleClass(\"sapUiSmallMarginBottom\");\n\tcontent.push(informationMessage);\n\tcontent.push(list);\n\tconst listIndex = content.indexOf(list);\n\treturn new Promise(function (resolve, reject) {\n\t\tconst dialog = new Dialog({\n\t\t\ttitle: title,\n\t\t\tcontentWidth: size ? size.width : \"550px\",\n\t\t\tcontentHeight: size ? size.height : \"300px\",\n\t\t\tcontent: content,\n\t\t\tbuttons: [\n\t\t\t\tnew Button({\n\t\t\t\t\ttext: \"{sap.fe.i18n>RTA_CONFIGURATION_APPLY}\",\n\t\t\t\t\ttype: \"Emphasized\",\n\t\t\t\t\tpress: function (): void {\n\t\t\t\t\t\t// persist changes done\n\t\t\t\t\t\tupdateConfigModel(configContext, dialog.getContent()[listIndex].getModel() as JSONModel, configPath);\n\t\t\t\t\t\tdialog.close();\n\t\t\t\t\t\tresolve(propertyValues);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tnew Button({\n\t\t\t\t\ttext: \"{sap.fe.i18n>RTA_CONFIGURATION_CANCEL}\",\n\t\t\t\t\tpress: function (): void {\n\t\t\t\t\t\tdialog.close();\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t]\n\t\t});\n\t\tdialog.setModel(resourceModel, \"sap.fe.i18n\");\n\t\tdialog.addStyleClass(\"sapUiContentPadding\");\n\t\tdialog.addStyleClass(\"sapUiRTABorder\");\n\t\tdialog.open();\n\t\treturn;\n\t});\n}\n\nexport function processChanges(\n\tpropertyChanges: propKeyAndValue,\n\tappComponent: AppComponent,\n\tpage: string,\n\tpropertyPath: string\n): adaptionChange[] {\n\tlet singleChange: propKeyAndValue = {};\n\tconst changes = [];\n\tfor (const [key, value] of Object.entries(propertyChanges)) {\n\t\tsingleChange = {};\n\t\tsingleChange[key] = value;\n\t\tchanges.push(getChange(singleChange, appComponent, page, propertyPath));\n\t}\n\treturn changes;\n}\n\n/**\n * Format each change made to global settings \"sap.fe\"\n * The set of changes are put into individual changes to ensure\n * that earlier changes are not lost when these are loaded at runtime.\n * @param propertyChanges\n * @param appComponent\n * @param page\n * @param propertyPath\n * @returns The change structure used by flexibility tools\n */\nexport function processGlobalChanges(\n\tpropertyChanges: propKeyAndValue,\n\tappComponent: AppComponent,\n\tpage: string,\n\tpropertyPath: string\n): adaptionChange[] {\n\tlet singleChange: propKeyAndValue = {};\n\tconst changes = [];\n\tfor (const [key, value] of Object.entries(propertyChanges)) {\n\t\tsingleChange = {};\n\t\tsingleChange[key] = value;\n\t\tchanges.push(getChange(singleChange, appComponent, page, propertyPath));\n\t}\n\treturn changes;\n}\n\nexport function getChange(\n\tpropertyChanges: propKeyAndValue,\n\tappComponent: AppComponent,\n\tpage: string,\n\tpropertyPath: string\n): adaptionChange {\n\t// Changes for controls have a path starting with controlConfiguration, followed by an annotation path\n\t// For the list report changes, there is no path because the properties are directly under Settings\n\t// for the \"sap.fe.templates.ListReport\" in the manifest.\n\tif (propertyPath === \"\") {\n\t\tpropertyPath = Object.keys(propertyChanges)[0];\n\t} else {\n\t\tpropertyPath = propertyPath + \"/\" + Object.keys(propertyChanges)[0];\n\t}\n\tconst value = propertyChanges[Object.keys(propertyChanges)[0]];\n\n\treturn getChangeStructure(appComponent, page, propertyPath, value);\n}\n\n/**\n * Get the parameters other than the control settings that are needed\n * for the change structure.\n * @param propertyChanges\n * @param propertyPath\n * @param control\n * @returns The changes in a structure used by flexibility tools\n */\nexport function separateChanges(propertyChanges: PropertyValue, propertyPath: string, control: Control): adaptionChange[] {\n\tconst appComponent = CommonUtils.getAppComponent(control);\n\tconst page = getPage(control.getParent() as Control);\n\treturn processChanges(propertyChanges, appComponent, page, propertyPath);\n}\n\n/**\n * Get the parameters other than the global settings that are needed\n * for the change structure.\n * @param propertyChanges\n * @param propertyPath\n * @param control\n * @returns The changes in a structure used by flexibility tools\n */\nfunction separateGlobalChanges(propertyChanges: PropertyValue, propertyPath: string, control: Control): adaptionChange[] {\n\tconst appComponent = CommonUtils.getAppComponent(control);\n\tconst page = \"sap.fe\";\n\treturn processGlobalChanges(propertyChanges, appComponent, page, propertyPath);\n}\n\nfunction getPage(control: Control): string {\n\tconst viewId = CommonUtils.getTargetView(control).getId().split(\"::\");\n\treturn viewId[viewId.length - 1];\n}\n\nexport const extractChanges = function (\n\tdesigntimeSettings: DesigntimeSetting[],\n\tunchangedData: PropertyValue,\n\tpropertyValuesEntered: PropertyValue,\n\tpropertyPath: string,\n\tcontrol: Control,\n\tglobalSettings?: DesigntimeSetting[]\n): adaptionChange[] {\n\tconst propertyChanges = getChangedPropertyValues(designtimeSettings, unchangedData, propertyValuesEntered);\n\t// Put each property into its own change. This ensures that we don't lose previous changes.\n\tlet changes = separateChanges(propertyChanges, propertyPath, control);\n\tif (globalSettings) {\n\t\tconst globalChanges = getChangedPropertyValues(globalSettings, unchangedData, propertyValuesEntered);\n\t\tconst global = separateGlobalChanges(globalChanges, propertyPath, control);\n\t\tchanges = changes.concat(global);\n\t}\n\tif (changes.length > 0) {\n\t\treturn changes;\n\t} else {\n\t\treturn [];\n\t}\n};\n\nexport const noChanges = function (): [] {\n\treturn [];\n};\n\nexport function isFioriToolsRtaMode(appComponent: AppComponent): boolean {\n\t// Check if rta mode has been specified on url (for local testing)\n\tlet urlParams: Record<string, string[]> = {};\n\tconst shellService = appComponent.getShellServices();\n\turlParams = shellService?.parseParameters?.(window.location.search);\n\treturn !!urlParams && urlParams[\"fiori-tools-rta-mode\"]?.[0] === \"forAdaptation\";\n}\n\nexport function isRTAMode(appComponent: AppComponent): boolean {\n\t// Check if rta mode has been specified on url (for local testing)\n\tlet urlParams: Record<string, string[]> = {};\n\tconst shellService = appComponent.getShellServices();\n\turlParams = shellService?.parseParameters?.(window.location.search);\n\treturn !!urlParams && urlParams[\"sap-fe-rta-mode\"]?.[0] === \"true\";\n}\n\nexport function getSettingsIfKeyUser(appComponent: AppComponent, items: SettingsData[]): SettingsData[] {\n\tif (!isFioriToolsRtaMode(appComponent)) {\n\t\t// not tools => key user\n\t\treturn items.filter((setting) => {\n\t\t\treturn setting.keyUser;\n\t\t});\n\t}\n\treturn items;\n}\n\nexport function isConfigModelPrepared(configContext: Context, path = \"rta/configSettings\"): boolean {\n\tif (configContext.getProperty(path)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport function prepareConfigModel(items: SettingsData[], configContext: Context, path = \"rta/configSettings\"): void {\n\tif (!configContext.getProperty(path)) {\n\t\tconfigContext.setProperty(path, items);\n\t}\n}\n\nexport function getPersonalizationSetting(configContext: Context, path = \"rta/configSettings\"): boolean | string | undefined {\n\tconst settings = configContext.getObject(path);\n\tconst personalizationSetting = settings.find((setting: SettingsData) => {\n\t\treturn setting?.control[0]?.id === \"personalization\";\n\t});\n\tif (personalizationSetting) {\n\t\treturn personalizationSetting.control[0].value;\n\t}\n\treturn undefined;\n}\n\nexport function updateConfigModel(configContext: Context, settingsModel: JSONModel, path = \"rta/configSettings\"): void {\n\tconst updatedSettings = deepClone(settingsModel.getData());\n\tconfigContext.setProperty(path, updatedSettings);\n}\n\nexport function getPropertyNamesAndDescriptions(props: DesigntimeSetting[], resourceModel: ResourceModel): DesigntimeSetting[] {\n\tprops.forEach(function (prop) {\n\t\tprop.name = resourceModel.getText(prop.name);\n\t\tprop.description = resourceModel.getText(prop.description);\n\t\tif (prop.enums) {\n\t\t\tprop.enums.forEach(function (enumm) {\n\t\t\t\tenumm.name = resourceModel.getText(enumm.name);\n\t\t\t});\n\t\t}\n\t});\n\n\treturn props;\n}\n\nexport function isManifestChangesEnabled(control: Control): boolean {\n\tlet owner = Component.getOwnerComponentFor(control) as TemplateComponent;\n\tif (owner === undefined && control.getParent()) {\n\t\t// In case of MassEdit, control is a sap.m.Dialog for which there is now OwnerComponent, so we need to consider its parent control\n\t\towner = Component.getOwnerComponentFor(control.getParent()!) as TemplateComponent;\n\t}\n\tconst sapFeManifest = owner?.getAppComponent().getManifestEntry(\"sap.fe\");\n\treturn sapFeManifest?.app?.disableManifestChanges !== true;\n}\n"],"mappings":"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","ignoreList":[]}