{"version":3,"file":"FieldBaseDelegate.js","names":["Object","assign","FieldBaseDelegate","apiVersion","initializeTypeFromBinding","field","type","value","result","isA","Array","isArray","length","undefined","formatValue","bTypeInitialized","mCustomUnits","initializeInternalUnitType","typeInitialization","enhanceValueForUnit","values","push","getDefaultValueHelpDelegate","_field","name","payload","getTypeMap","TypeMap","_getValueListParameter","valueListInfo","propertyName","Parameters","filter","entry","LocalDataProperty","$PropertyPath","_getFilter","valueList","valueHelpProperty","keyValue","valuehelpPayload","valuehelpConditionPayload","bindingContext","filterBarConditions","filters","parameters","parameter","$Type","ValueListProperty","filterValue","isActionParameterDialog","apdFieldPath","apdField","Element","getElementById","getValue","sourcePath","conditionPayload","getObject","condition","operator","Filter","path","value1","concat","this","_getRemainingKeyValueFilters","$model","valueListModel","CollectionPath","collectionPath","metaContext","getMetaModel","getMetaContext","entityType","getInvolvedDataModelObjects","targetEntityType","allLocalDataProperties","reduce","arr","allRemainingKeys","keys","_ref","keyName","includes","hasOwnProperty","key","keyContext","CommonHelper","isPropertyFilterable","getItemForValue","async","valueHelp","config","checkDescription","container","getTypeahead","getPayload","selectedContent","getSelectedContent","contentId","getId","ValueHelpDelegate","retrieveContent","maxLength","valueLength","toString","descriptionPath","valueHelpDescriptionPath","_getFilterBar","filterBarAPI","getParent","getContent","getDescription","_conditionIn","_conditionOut","_ConditionModel","_conditionModelName","control","_type","emptyAllowed","getDisplay","retrieveTextFromValueList","isFilterField","dataModel","getModel","owner","Component","getOwnerComponentFor","metaModel","CommonUtils","getAppComponent","valueHelpQualifier","propertyPath","propertyDescriptionPath","textProperty","requestValueListInfo","filterBar","filterConditions","filterState","StateUtil","retrieveExternalState","valueHelpParameters","Error","textAnnotation","$Path","listBinding","bindList","$select","contexts","requestContexts","lastIndex","lastIndexOf","sideEffectPath","substring","sideEffectsService","getSideEffectsService","requestSideEffects","Log","warning","externalIdPath","externalIdFullPath","replace","externalIdName","externalIdDescriptionPath","error","status","message","String","msg"],"sources":["./FieldBaseDelegate.ts"],"sourcesContent":["import { CommonAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport Log from \"sap/base/Log\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { AnnotationValueListType, ValueHelpPayload } from \"sap/fe/macros/internal/valuehelp/ValueListHelper\";\nimport Component from \"sap/ui/core/Component\";\nimport type Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport type Field from \"sap/ui/mdc/Field\";\nimport type ValueHelp from \"sap/ui/mdc/ValueHelp\";\nimport type { ItemForValueConfiguration } from \"sap/ui/mdc/ValueHelp\";\nimport { type ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport type ConditionModel from \"sap/ui/mdc/condition/ConditionModel\";\nimport type FieldBase from \"sap/ui/mdc/field/FieldBase\";\nimport FieldBaseDelegate from \"sap/ui/mdc/field/FieldBaseDelegate\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport Filter from \"sap/ui/model/Filter\";\nimport type SimpleType from \"sap/ui/model/SimpleType\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport CommonHelper from \"../CommonHelper\";\nimport type FilterBar from \"../controls/FilterBar\";\nimport type FilterBarAPI from \"../filterBar/FilterBarAPI\";\nimport type { ConditionPayloadMap, ConditionPayloadType, ExternalStateType } from \"../valuehelp/ValueHelpDelegate\";\nimport ValueHelpDelegate from \"../valuehelp/ValueHelpDelegate\";\n\nexport type FieldPayload = {\n\tretrieveTextFromValueList?: boolean;\n\tisFilterField?: boolean;\n};\n\nexport type Value = string | Date | number | boolean | undefined | null;\n\nexport type TypeInitialization = {\n\tbTypeInitialized?: boolean;\n\tmCustomUnits?: string;\n};\n\nexport type Config = {\n\tvalue: Value;\n\tparsedValue: Value;\n\tbindingContext: Context;\n\tcheckKey: boolean;\n\tcheckDescription: boolean;\n\tconditionModel?: ConditionModel;\n\tconditionModelName?: string;\n\tcontrol?: object;\n};\n\nexport default Object.assign({}, FieldBaseDelegate, {\n\tapiVersion: 2,\n\n\t/**\n\t * If the <code>Field</code> control is used, the used data type might come from the binding.\n\t * In V4-unit or currency case it might need to be formatted once.\n\t * To initialize the internal type later on, the currencies must be returned.\n\t * @param field The <code>Field</code> instance\n\t * @param type Type from binding\n\t * @param value Given value\n\t * @returns Information needed to initialize internal type (needs to set bTypeInitialized to true if initialized)\n\t */\n\tinitializeTypeFromBinding: function (field: Field, type: SimpleType | undefined, value: Value | Value[]) {\n\t\t// V4 Unit and Currency types have a map with valid units and create an internal customizing for it.\n\t\t// The Field needs to keep this customizing logic when creating the internal type.\n\t\t// (As external RAW binding is used there is no formatting on parsing.)\n\n\t\tconst result: TypeInitialization = {};\n\t\tif (\n\t\t\ttype &&\n\t\t\ttype.isA([\"sap.ui.model.odata.type.Unit\", \"sap.ui.model.odata.type.Currency\"]) &&\n\t\t\tArray.isArray(value) &&\n\t\t\tvalue.length > 2 &&\n\t\t\tvalue[2] !== undefined\n\t\t) {\n\t\t\t// format once to set internal customizing. Allow null as valid values for custom units\n\t\t\ttype.formatValue(value, \"string\");\n\t\t\tresult.bTypeInitialized = true;\n\t\t\tresult.mCustomUnits = value[2] as string; // TODO: find a better way to provide custom units to internal type\n\t\t}\n\n\t\treturn result;\n\t},\n\n\t/**\n\t * This function initializes the unit type.\n\t * If the <code>Field</code> control is used, the used data type might come from the binding.\n\t * If the type is a V4 unit or currency, it might need to be formatted once.\n\t * @param field The <code>Field</code> instance\n\t * @param type Type from binding\n\t * @param typeInitialization Information needed to initialize internal type\n\t */\n\tinitializeInternalUnitType: function (field: Field, type: SimpleType, typeInitialization?: TypeInitialization) {\n\t\tif (typeInitialization?.mCustomUnits !== undefined) {\n\t\t\t// if already initialized initialize new type too.\n\t\t\ttype.formatValue([null, null, typeInitialization.mCustomUnits], \"string\");\n\t\t}\n\t},\n\n\t/**\n\t * This function enhances the value with unit or currency information if needed by the data type.\n\t * @param field The <code>Field</code> instance\n\t * @param  values Values\n\t * @param  typeInitialization Information needed to initialize internal type\n\t * @returns Values\n\t */\n\tenhanceValueForUnit: function (field: Field, values: Value[], typeInitialization?: TypeInitialization) {\n\t\tif (typeInitialization?.bTypeInitialized === true && values.length === 2) {\n\t\t\tvalues.push(typeInitialization.mCustomUnits);\n\t\t\treturn values;\n\t\t}\n\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * This function returns which <code>ValueHelpDelegate</code> is used\n\t * if a default field help (for example, for defining conditions in </code>FilterField</code>)\n\t * is created.\n\t * @param _field The <code>Field</code> instance\n\t * @returns Delegate object with name and payload\n\t */\n\tgetDefaultValueHelpDelegate: function (_field: Field) {\n\t\treturn { name: \"sap/ui/mdc/odata/v4/ValueHelpDelegate\", payload: {} };\n\t},\n\n\tgetTypeMap: function (_field: Field) {\n\t\treturn TypeMap;\n\t},\n\n\t/**\n\t * Determine all parameters in a value help that use a specific property.\n\t * @param valueListInfo Value list info\n\t * @param propertyName Name of the property\n\t * @returns List of all found parameters\n\t */\n\t_getValueListParameter: function (valueListInfo: AnnotationValueListType, propertyName: string) {\n\t\t//determine path to value list property\n\t\treturn valueListInfo.Parameters.filter(function (entry) {\n\t\t\tif (entry.LocalDataProperty) {\n\t\t\t\treturn entry.LocalDataProperty.$PropertyPath === propertyName;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t},\n\t/**\n\t * Build filters for each relevant parameter.\n\t * @param valueList Value list info\n\t * @param propertyName Name of the property\n\t * @param valueHelpProperty Name of the value help property\n\t * @param keyValue Value of the property\n\t * @param valuehelpPayload Payload of the value help\n\t * @param valuehelpConditionPayload Additional condition information for this key\n\t * @param bindingContext BindingContext of the field\n\t * @returns List of filters\n\t */\n\t_getFilter: function (\n\t\tvalueList: AnnotationValueListType,\n\t\tpropertyName: string,\n\t\tvalueHelpProperty: string,\n\t\tkeyValue: string,\n\t\tvaluehelpPayload: ValueHelpPayload,\n\t\tvaluehelpConditionPayload: ConditionPayloadType[] | undefined,\n\t\tbindingContext?: Context,\n\t\tfilterBarConditions?: Record<string, ConditionObject[]>\n\t) {\n\t\tlet filters: Filter[] = [];\n\t\tconst parameters = valueList.Parameters.filter(function (parameter) {\n\t\t\treturn (\n\t\t\t\tparameter.$Type === CommonAnnotationTypes.ValueListParameterIn ||\n\t\t\t\tparameter.$Type === CommonAnnotationTypes.ValueListParameterInOut ||\n\t\t\t\t(parameter.LocalDataProperty?.$PropertyPath === propertyName && parameter.ValueListProperty === valueHelpProperty)\n\t\t\t);\n\t\t});\n\t\tfor (const parameter of parameters) {\n\t\t\tlet filterValue;\n\t\t\tif (parameter.LocalDataProperty?.$PropertyPath === propertyName) {\n\t\t\t\tfilterValue = keyValue;\n\t\t\t} else if (valuehelpPayload?.isActionParameterDialog === true) {\n\t\t\t\tconst apdFieldPath = `APD_::${parameter.LocalDataProperty?.$PropertyPath}`;\n\t\t\t\tconst apdField = Element.getElementById(apdFieldPath) as Field;\n\t\t\t\tfilterValue = apdField?.getValue();\n\t\t\t} else if (valuehelpConditionPayload !== undefined) {\n\t\t\t\tconst sourcePath = parameter.ValueListProperty;\n\t\t\t\tconst conditionPayload = valuehelpConditionPayload?.[0];\n\t\t\t\tfilterValue = sourcePath && conditionPayload?.[sourcePath];\n\t\t\t} else if (bindingContext) {\n\t\t\t\t// if the value help is not used try getting the filter value from the binding context\n\t\t\t\tconst sourcePath = parameter.LocalDataProperty?.$PropertyPath;\n\t\t\t\tfilterValue = bindingContext.getObject(sourcePath);\n\t\t\t}\n\t\t\tif (!filterValue && filterBarConditions) {\n\t\t\t\tconst condition = filterBarConditions?.[parameter.ValueListProperty];\n\t\t\t\tif (condition?.length === 1 && condition[0]?.operator === \"EQ\") {\n\t\t\t\t\tfilterValue = condition[0]?.values[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* Add value to the filter for the text determination */\n\t\t\tif (filterValue !== null && filterValue !== undefined) {\n\t\t\t\tfilters.push(new Filter({ path: parameter.ValueListProperty, operator: \"EQ\", value1: filterValue }));\n\t\t\t}\n\t\t}\n\t\tif (valuehelpConditionPayload?.[0]) {\n\t\t\t// In case of multiple keys for the valuelist collection, the main ValueListProperty might not be unique to get exact value list selection.\n\t\t\t// So, we add filters for key properties if they are present in the valuehelpConditionPayload.\n\t\t\tfilters = filters.concat(this._getRemainingKeyValueFilters(valuehelpConditionPayload[0], valueList));\n\t\t}\n\t\treturn filters;\n\t},\n\n\t/**\n\t * Get model filters to ensure a precise selection from the condition payload.\n\t * @param conditionPayload Additional condition information for this key\n\t * @param valueList Value list information\n\t * @returns List of filters\n\t */\n\t_getRemainingKeyValueFilters(conditionPayload: ConditionPayloadType, valueList: AnnotationValueListType): Filter[] {\n\t\tconst { $model: valueListModel, CollectionPath: collectionPath, Parameters: parameters } = valueList;\n\t\tconst metaContext = valueListModel.getMetaModel().getMetaContext(`/${collectionPath}`);\n\t\tconst entityType = getInvolvedDataModelObjects(metaContext).targetEntityType;\n\t\tconst allLocalDataProperties = parameters.reduce((arr, parameter) => {\n\t\t\tif (parameter.LocalDataProperty?.$PropertyPath) {\n\t\t\t\tarr.push(parameter.LocalDataProperty.$PropertyPath);\n\t\t\t}\n\t\t\treturn arr;\n\t\t}, [] as string[]);\n\t\tconst allRemainingKeys = entityType.keys.reduce((arr, { name: keyName }) => {\n\t\t\tif (!allLocalDataProperties.includes(keyName) && conditionPayload.hasOwnProperty(keyName)) {\n\t\t\t\tarr.push(keyName);\n\t\t\t}\n\t\t\treturn arr;\n\t\t}, [] as string[]);\n\t\tif (allRemainingKeys.length > 0) {\n\t\t\treturn allRemainingKeys.reduce((filters: Filter[], key: string): Filter[] => {\n\t\t\t\t// This is a metamodel operation. The original isPropertyFilterable needs to be converted later.\n\t\t\t\tconst keyContext = valueListModel.getMetaModel().getMetaContext(`/${collectionPath}/${key}`);\n\t\t\t\tif (CommonHelper.isPropertyFilterable(keyContext, undefined, true)) {\n\t\t\t\t\tfilters.push(new Filter({ path: key, operator: \"EQ\", value1: conditionPayload[key] }));\n\t\t\t\t}\n\t\t\t\treturn filters;\n\t\t\t}, []);\n\t\t}\n\t\treturn [];\n\t},\n\n\t/**\n\t * Determines the key, description, and payload of a user input.\n\t * @param field The <code>Field</code> instance\n\t * @param valueHelp Value help instance\n\t * @param config Configuration Object\n\t * @returns Object containing description, key, and payload. If it is not available right now (must be requested), a <code>Promise</code> is returned\n\t */\n\tgetItemForValue: async function (field: Field, valueHelp: ValueHelp, config: ItemForValueConfiguration) {\n\t\t//BCP: 2270162887 . The MDC field should not try to get the item when the field is emptied\n\t\t// JIRA: FIORITECHP1-25361 - Improve the type-ahead behavior for missinng text annotation or constraints violations of the existing text annotation\n\t\tif (config.value === \"\") {\n\t\t\treturn;\n\t\t}\n\n\t\tif (config.checkDescription) {\n\t\t\tconst container = valueHelp.getTypeahead();\n\t\t\tconst payload = valueHelp.getPayload() as ValueHelpPayload;\n\t\t\tconst selectedContent = container.getSelectedContent();\n\t\t\tconst contentId = selectedContent && selectedContent.getId();\n\t\t\t// In cases where getItemForValue is called before showValueList, the description may not be available.\n\t\t\t// Therefore, this retrieveContent method is used to update the description.\n\t\t\tawait ValueHelpDelegate.retrieveContent(valueHelp, container, contentId);\n\t\t\tconst maxLength = payload.maxLength;\n\t\t\tconst valueLength = config.value?.toString().length || 0;\n\t\t\tconst descriptionPath = payload.valueHelpDescriptionPath;\n\t\t\tif (descriptionPath === \"\") {\n\t\t\t\t// In case the property value help collection has no text annotation (descriptionPath is empty) the description check shouldn´t occur.\n\t\t\t\t// In such a case the method getDescription will be called by MDC and within this method a SideEffect is requested to retrieve the text from the text property of the main entity\n\t\t\t\tconfig.checkDescription = false;\n\t\t\t} else if (maxLength !== undefined && valueLength > maxLength) {\n\t\t\t\t//value length is > text proeperty length constraint\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\treturn FieldBaseDelegate.getItemForValue(field, valueHelp, config);\n\t},\n\n\t/**\n\t * Retrieves the filter bar instance associated with the current field.\n\t * @param field Field Control\n\t * @returns The filter bar instance\n\t */\n\t_getFilterBar: function (field: Field | null): FilterBar | undefined {\n\t\tlet filterBarAPI;\n\t\tif (field?.isA(\"sap.ui.mdc.FilterField\")) {\n\t\t\twhile (field) {\n\t\t\t\tif (field?.isA<FilterBarAPI>(\"sap.fe.macros.filterBar.FilterBarAPI\")) {\n\t\t\t\t\tfilterBarAPI = field;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfield = field?.getParent() as unknown as Field;\n\t\t\t}\n\t\t\tif (filterBarAPI?.getContent()?.isA(\"sap.fe.macros.controls.FilterBar\")) {\n\t\t\t\treturn filterBarAPI.getContent() as FilterBar;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Determines the description for a given key.\n\t * @param field The <code>Field</code> instance\n\t * @param valueHelp Field help assigned to the <code>Field</code> or <code>FilterField</code> control\n\t * @param key Key value of the description\n\t * @param _conditionIn In parameters for the key (no longer supported)\n\t * @param _conditionOut Out parameters for the key (no longer supported)\n\t * @param bindingContext BindingContext <code>BindingContext</code> of the checked field. Inside a table, the <code>ValueHelp</code> element can be connected to a different row\n\t * @param _ConditionModel ConditionModel</code>, if bound to one\n\t * @param _conditionModelName Name of the <code>ConditionModel</code>, if bound to one\n\t * @param conditionPayload Additional context information for this key\n\t * @param control Instance of the calling control\n\t * @param _type Type of the value\n\t * @returns Description for the key or object containing a description, key and payload. If the description is not available right away (it must be requested), a <code>Promise</code> is returned\n\t */\n\tgetDescription: async function (\n\t\tfield: Field | null,\n\t\tvalueHelp: ValueHelp,\n\t\tkey: string,\n\t\t_conditionIn: object,\n\t\t_conditionOut: object,\n\t\tbindingContext: Context | undefined,\n\t\t_ConditionModel: ConditionModel,\n\t\t_conditionModelName: string,\n\t\tconditionPayload: ConditionPayloadMap,\n\t\tcontrol: Control,\n\t\t_type: unknown,\n\t\temptyAllowed: boolean\n\t) {\n\t\t//JIRA: FIORITECHP1-22022 . The MDC field should not  tries to determine description with the initial GET of the data.\n\t\t// it should rely on the data we already received from the backend\n\t\t// But The getDescription function is also called in the FilterField case if a variant is loaded.\n\t\t// As the description text could be language dependent it is not stored in the variant, so it needs to be read on rendering.\n\n\t\tlet payload = field?.getPayload() as FieldPayload;\n\n\t\t/* Retrieve text from value help, if value was set by out-parameter (BCP 2270160633) */\n\t\tif (!payload && (control as FieldBase)?.getDisplay().includes(\"Description\")) {\n\t\t\tpayload = {\n\t\t\t\tretrieveTextFromValueList: true\n\t\t\t};\n\t\t}\n\n\t\tif (payload?.retrieveTextFromValueList === true || payload?.isFilterField === true) {\n\t\t\tconst dataModel = valueHelp.getModel() as ODataModel | undefined;\n\t\t\tconst owner = Component.getOwnerComponentFor(valueHelp as unknown as Control);\n\t\t\t// If neither dataModel nor owner is defined, the valueHelp cannot be an FE control.\n\t\t\t// This occurs in cases of a standard MDC controls (e.g., default ValueHelp for boolean values).\n\t\t\tif (!dataModel && !owner) {\n\t\t\t\treturn FieldBaseDelegate.getDescription(\n\t\t\t\t\tfield as FieldBase,\n\t\t\t\t\tvalueHelp,\n\t\t\t\t\tkey,\n\t\t\t\t\t_conditionIn,\n\t\t\t\t\t_conditionOut,\n\t\t\t\t\tbindingContext as Context,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tconditionPayload,\n\t\t\t\t\tcontrol,\n\t\t\t\t\t_type,\n\t\t\t\t\temptyAllowed\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst metaModel = dataModel\n\t\t\t\t? dataModel.getMetaModel()\n\t\t\t\t: CommonUtils.getAppComponent(valueHelp as unknown as Control)\n\t\t\t\t\t\t.getModel()\n\t\t\t\t\t\t.getMetaModel();\n\t\t\tconst valuehelpPayload = valueHelp.getPayload() as ValueHelpPayload;\n\t\t\tconst valuehelpConditionPayload = conditionPayload?.[valuehelpPayload.valueHelpQualifier];\n\t\t\tconst propertyPath = valuehelpPayload.propertyPath;\n\t\t\tconst propertyDescriptionPath = valuehelpPayload?.propertyDescriptionPath;\n\t\t\tlet textProperty: string;\n\n\t\t\ttry {\n\t\t\t\t/* Request value help metadata */\n\t\t\t\tconst valueListInfo = await metaModel.requestValueListInfo(propertyPath, true, bindingContext);\n\t\t\t\tconst filterBar = this._getFilterBar(field);\n\t\t\t\tlet filterConditions: Record<string, ConditionObject[]> | undefined;\n\t\t\t\tif (filterBar) {\n\t\t\t\t\tconst filterState: ExternalStateType = await StateUtil.retrieveExternalState(filterBar);\n\t\t\t\t\tfilterConditions = filterState.filter;\n\t\t\t\t}\n\t\t\t\tconst propertyName = metaModel.getObject(`${propertyPath}@sapui.name`) as string;\n\t\t\t\t// take the first value list annotation - alternatively take the one without qualifier or the first one\n\t\t\t\tconst valueList = valueListInfo[Object.keys(valueListInfo)[0]];\n\t\t\t\tconst valueHelpParameters = this._getValueListParameter(valueList, propertyName);\n\t\t\t\tconst valueHelpProperty = valueHelpParameters?.[0]?.ValueListProperty;\n\t\t\t\tif (!valueHelpProperty) {\n\t\t\t\t\tthrow Error(`Inconsistent value help annotation for ${propertyName}`);\n\t\t\t\t}\n\t\t\t\t// get text annotation for this value list property\n\t\t\t\tconst valueListModel = valueList.$model;\n\t\t\t\tconst textAnnotation = valueListModel\n\t\t\t\t\t.getMetaModel()\n\t\t\t\t\t.getObject(`/${valueList.CollectionPath}/${valueHelpProperty}@com.sap.vocabularies.Common.v1.Text`);\n\t\t\t\tif (textAnnotation && textAnnotation.$Path) {\n\t\t\t\t\ttextProperty = textAnnotation.$Path;\n\t\t\t\t\t/* Build the filter for the relevant parameters */\n\t\t\t\t\tconst filters = this._getFilter(\n\t\t\t\t\t\tvalueList,\n\t\t\t\t\t\tpropertyName,\n\t\t\t\t\t\tvalueHelpProperty,\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tvaluehelpPayload,\n\t\t\t\t\t\tvaluehelpConditionPayload,\n\t\t\t\t\t\tbindingContext,\n\t\t\t\t\t\tfilterConditions\n\t\t\t\t\t);\n\t\t\t\t\tconst listBinding = valueListModel.bindList(`/${valueList.CollectionPath}`, undefined, undefined, filters, {\n\t\t\t\t\t\t$select: textProperty\n\t\t\t\t\t});\n\t\t\t\t\t/* Request description for given key from value list entity */\n\t\t\t\t\tconst contexts = await listBinding.requestContexts(0, 2);\n\t\t\t\t\treturn contexts.length ? contexts[0].getObject(textProperty) : undefined;\n\t\t\t\t} else if (bindingContext !== undefined && propertyDescriptionPath) {\n\t\t\t\t\tconst lastIndex = propertyDescriptionPath.lastIndexOf(\"/\");\n\t\t\t\t\tconst sideEffectPath = lastIndex > 0 ? propertyDescriptionPath.substring(0, lastIndex) : propertyDescriptionPath;\n\t\t\t\t\tconst sideEffectsService = CommonUtils.getAppComponent(valueHelp as unknown as Control).getSideEffectsService();\n\t\t\t\t\tawait sideEffectsService.requestSideEffects([sideEffectPath], bindingContext);\n\t\t\t\t\tLog.warning(\n\t\t\t\t\t\t`RequestSideEffects is triggered because the text annotation for ${valueHelpProperty} is not defined at the CollectionPath of the value help`\n\t\t\t\t\t);\n\t\t\t\t\treturn undefined;\n\t\t\t\t} else {\n\t\t\t\t\t/* EXTERNAlID */\n\t\t\t\t\tconst externalIdPath = metaModel?.getObject(\n\t\t\t\t\t\t`${valuehelpPayload.propertyPath}@com.sap.vocabularies.Common.v1.ExternalID`\n\t\t\t\t\t)?.$Path;\n\t\t\t\t\tif (externalIdPath) {\n\t\t\t\t\t\tconst externalIdFullPath = valuehelpPayload.propertyPath.replace(propertyName, externalIdPath);\n\t\t\t\t\t\tconst externalIdName = metaModel.getObject(`${externalIdFullPath}@sapui.name`);\n\t\t\t\t\t\tconst externalIdDescriptionPath = metaModel?.getObject(`${externalIdFullPath}@com.sap.vocabularies.Common.v1.Text`)\n\t\t\t\t\t\t\t?.$Path;\n\t\t\t\t\t\tconst filters = [];\n\t\t\t\t\t\tfilters.push(new Filter({ path: externalIdName, operator: \"EQ\", value1: key }));\n\t\t\t\t\t\tconst listBinding = valueListModel.bindList(`/${valueList.CollectionPath}`, undefined, undefined, filters, {\n\t\t\t\t\t\t\t$select: `${externalIdName},${externalIdDescriptionPath}`\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst contexts = await listBinding.requestContexts(0, 2);\n\t\t\t\t\t\tif (contexts.length) {\n\t\t\t\t\t\t\treturn contexts[0].getObject(externalIdDescriptionPath);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tLog.error(`Text Annotation for ${valueHelpProperty} is not defined`);\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconst status = error ? (error as XMLHttpRequest).status : undefined;\n\t\t\t\tconst message = error instanceof Error ? error.message : String(error);\n\t\t\t\tconst msg = status === 404 ? `Metadata not found (${status}) for value help of property ${propertyPath}` : message;\n\t\t\t\tLog.error(msg);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n});\n"],"mappings":";;;;mZAkDeA,OAAOC,OAAO,CAAC,EAAGC,EAAmB,CACnDC,WAAY,EAWZC,0BAA2B,SAAUC,EAAcC,EAA8BC,GAKhF,MAAMC,EAA6B,CAAC,EACpC,GACCF,GACAA,EAAKG,IAAI,CAAC,+BAAgC,sCAC1CC,MAAMC,QAAQJ,IACdA,EAAMK,OAAS,GACfL,EAAM,KAAOM,UACZ,CAEDP,EAAKQ,YAAYP,EAAO,UACxBC,EAAOO,iBAAmB,KAC1BP,EAAOQ,aAAeT,EAAM,EAC7B,CAEA,OAAOC,CACR,EAUAS,2BAA4B,SAAUZ,EAAcC,EAAkBY,GACrE,GAAIA,GAAoBF,eAAiBH,UAAW,CAEnDP,EAAKQ,YAAY,CAAC,KAAM,KAAMI,EAAmBF,cAAe,SACjE,CACD,EASAG,oBAAqB,SAAUd,EAAce,EAAiBF,GAC7D,GAAIA,GAAoBH,mBAAqB,MAAQK,EAAOR,SAAW,EAAG,CACzEQ,EAAOC,KAAKH,EAAmBF,cAC/B,OAAOI,CACR,CAEA,OAAOP,SACR,EASAS,4BAA6B,SAAUC,GACtC,MAAO,CAAEC,KAAM,wCAAyCC,QAAS,CAAC,EACnE,EAEAC,WAAY,SAAUH,GACrB,OAAOI,CACR,EAQAC,uBAAwB,SAAUC,EAAwCC,GAEzE,OAAOD,EAAcE,WAAWC,OAAO,SAAUC,GAChD,GAAIA,EAAMC,kBAAmB,CAC5B,OAAOD,EAAMC,kBAAkBC,gBAAkBL,CAClD,KAAO,CACN,OAAO,KACR,CACD,EACD,EAYAM,WAAY,SACXC,EACAP,EACAQ,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAoB,GACxB,MAAMC,EAAaR,EAAUN,WAAWC,OAAO,SAAUc,GACxD,OACCA,EAAUC,QAAK,uDACfD,EAAUC,QAAK,0DACdD,EAAUZ,mBAAmBC,gBAAkBL,GAAgBgB,EAAUE,oBAAsBV,CAElG,GACA,IAAK,MAAMQ,KAAaD,EAAY,CACnC,IAAII,EACJ,GAAIH,EAAUZ,mBAAmBC,gBAAkBL,EAAc,CAChEmB,EAAcV,CACf,MAAO,GAAIC,GAAkBU,0BAA4B,KAAM,CAC9D,MAAMC,EAAe,SAASL,EAAUZ,mBAAmBC,gBAC3D,MAAMiB,EAAWC,EAAQC,eAAeH,GACxCF,EAAcG,GAAUG,UACzB,MAAO,GAAId,IAA8B5B,UAAW,CACnD,MAAM2C,EAAaV,EAAUE,kBAC7B,MAAMS,EAAmBhB,IAA4B,GACrDQ,EAAcO,GAAcC,IAAmBD,EAChD,MAAO,GAAId,EAAgB,CAE1B,MAAMc,EAAaV,EAAUZ,mBAAmBC,cAChDc,EAAcP,EAAegB,UAAUF,EACxC,CACA,IAAKP,GAAeN,EAAqB,CACxC,MAAMgB,EAAYhB,IAAsBG,EAAUE,mBAClD,GAAIW,GAAW/C,SAAW,GAAK+C,EAAU,IAAIC,WAAa,KAAM,CAC/DX,EAAcU,EAAU,IAAIvC,OAAO,EACpC,CACD,CAEA,GAAI6B,IAAgB,MAAQA,IAAgBpC,UAAW,CACtD+B,EAAQvB,KAAK,IAAIwC,EAAO,CAAEC,KAAMhB,EAAUE,kBAAmBY,SAAU,KAAMG,OAAQd,IACtF,CACD,CACA,GAAIR,IAA4B,GAAI,CAGnCG,EAAUA,EAAQoB,OAAOC,KAAKC,6BAA6BzB,EAA0B,GAAIJ,GAC1F,CACA,OAAOO,CACR,EAQAsB,6BAA6BT,EAAwCpB,GACpE,MAAQ8B,OAAQC,EAAgBC,eAAgBC,EAAgBvC,WAAYc,GAAeR,EAC3F,MAAMkC,EAAcH,EAAeI,eAAeC,eAAe,IAAIH,KACrE,MAAMI,EAAaC,EAA4BJ,GAAaK,iBAC5D,MAAMC,EAAyBhC,EAAWiC,OAAO,CAACC,EAAKjC,KACtD,GAAIA,EAAUZ,mBAAmBC,cAAe,CAC/C4C,EAAI1D,KAAKyB,EAAUZ,kBAAkBC,cACtC,CACA,OAAO4C,GACL,IACH,MAAMC,EAAmBN,EAAWO,KAAKH,OAAO,CAACC,EAAGG,KAAwB,IAApB1D,KAAM2D,GAASD,EACtE,IAAKL,EAAuBO,SAASD,IAAY1B,EAAiB4B,eAAeF,GAAU,CAC1FJ,EAAI1D,KAAK8D,EACV,CACA,OAAOJ,GACL,IACH,GAAIC,EAAiBpE,OAAS,EAAG,CAChC,OAAOoE,EAAiBF,OAAO,CAAClC,EAAmB0C,KAElD,MAAMC,EAAanB,EAAeI,eAAeC,eAAe,IAAIH,KAAkBgB,KACtF,GAAIE,EAAaC,qBAAqBF,EAAY1E,UAAW,MAAO,CACnE+B,EAAQvB,KAAK,IAAIwC,EAAO,CAAEC,KAAMwB,EAAK1B,SAAU,KAAMG,OAAQN,EAAiB6B,KAC/E,CACA,OAAO1C,GACL,GACJ,CACA,MAAO,EACR,EASA8C,gBAAiBC,eAAgBtF,EAAcuF,EAAsBC,GAGpE,GAAIA,EAAOtF,QAAU,GAAI,CACxB,MACD,CAEA,GAAIsF,EAAOC,iBAAkB,CAC5B,MAAMC,EAAYH,EAAUI,eAC5B,MAAMvE,EAAUmE,EAAUK,aAC1B,MAAMC,EAAkBH,EAAUI,qBAClC,MAAMC,EAAYF,GAAmBA,EAAgBG,cAG/CC,EAAkBC,gBAAgBX,EAAWG,EAAWK,GAC9D,MAAMI,EAAY/E,EAAQ+E,UAC1B,MAAMC,EAAcZ,EAAOtF,OAAOmG,WAAW9F,QAAU,EACvD,MAAM+F,EAAkBlF,EAAQmF,yBAChC,GAAID,IAAoB,GAAI,CAG3Bd,EAAOC,iBAAmB,KAC3B,MAAO,GAAIU,IAAc3F,WAAa4F,EAAcD,EAAW,CAE9D,MACD,CACD,CACA,OAAOtG,EAAkBwF,gBAAgBrF,EAAOuF,EAAWC,EAC5D,EAOAgB,cAAe,SAAUxG,GACxB,IAAIyG,EACJ,GAAIzG,GAAOI,IAAI,0BAA2B,CACzC,MAAOJ,EAAO,CACb,GAAIA,GAAOI,IAAkB,wCAAyC,CACrEqG,EAAezG,EACf,KACD,CACAA,EAAQA,GAAO0G,WAChB,CACA,GAAID,GAAcE,cAAcvG,IAAI,oCAAqC,CACxE,OAAOqG,EAAaE,YACrB,CACD,CACA,OAAOnG,SACR,EAiBAoG,eAAgBtB,eACftF,EACAuF,EACAN,EACA4B,EACAC,EACAzE,EACA0E,EACAC,EACA5D,EACA6D,EACAC,EACAC,GAOA,IAAI/F,EAAUpB,GAAO4F,aAGrB,IAAKxE,GAAY6F,GAAuBG,aAAarC,SAAS,eAAgB,CAC7E3D,EAAU,CACTiG,0BAA2B,KAE7B,CAEA,GAAIjG,GAASiG,4BAA8B,MAAQjG,GAASkG,gBAAkB,KAAM,CACnF,MAAMC,EAAYhC,EAAUiC,WAC5B,MAAMC,EAAQC,EAAUC,qBAAqBpC,GAG7C,IAAKgC,IAAcE,EAAO,CACzB,OAAO5H,EAAkB+G,eACxB5G,EACAuF,EACAN,EACA4B,EACAC,EACAzE,EACA7B,UACAA,UACA4C,EACA6D,EACAC,EACAC,EAEF,CACA,MAAMS,EAAYL,EACfA,EAAUpD,eACV0D,EAAYC,gBAAgBvC,GAC3BiC,WACArD,eACJ,MAAMhC,EAAmBoD,EAAUK,aACnC,MAAMxD,EAA4BgB,IAAmBjB,EAAiB4F,oBACtE,MAAMC,EAAe7F,EAAiB6F,aACtC,MAAMC,EAA0B9F,GAAkB8F,wBAClD,IAAIC,EAEJ,IAEC,MAAM1G,QAAsBoG,EAAUO,qBAAqBH,EAAc,KAAM3F,GAC/E,MAAM+F,EAAYxE,KAAK4C,cAAcxG,GACrC,IAAIqI,EACJ,GAAID,EAAW,CACd,MAAME,QAAuCC,EAAUC,sBAAsBJ,GAC7EC,EAAmBC,EAAY3G,MAChC,CACA,MAAMF,EAAemG,EAAUvE,UAAU,GAAG2E,gBAE5C,MAAMhG,EAAYR,EAAc7B,OAAOiF,KAAKpD,GAAe,IAC3D,MAAMiH,EAAsB7E,KAAKrC,uBAAuBS,EAAWP,GACnE,MAAMQ,EAAoBwG,IAAsB,IAAI9F,kBACpD,IAAKV,EAAmB,CACvB,MAAMyG,MAAM,0CAA0CjH,IACvD,CAEA,MAAMsC,EAAiB/B,EAAU8B,OACjC,MAAM6E,EAAiB5E,EACrBI,eACAd,UAAU,IAAIrB,EAAUgC,kBAAkB/B,yCAC5C,GAAI0G,GAAkBA,EAAeC,MAAO,CAC3CV,EAAeS,EAAeC,MAE9B,MAAMrG,EAAUqB,KAAK7B,WACpBC,EACAP,EACAQ,EACAgD,EACA9C,EACAC,EACAC,EACAgG,GAED,MAAMQ,EAAc9E,EAAe+E,SAAS,IAAI9G,EAAUgC,iBAAkBxD,UAAWA,UAAW+B,EAAS,CAC1GwG,QAASb,IAGV,MAAMc,QAAiBH,EAAYI,gBAAgB,EAAG,GACtD,OAAOD,EAASzI,OAASyI,EAAS,GAAG3F,UAAU6E,GAAgB1H,SAChE,MAAO,GAAI6B,IAAmB7B,WAAayH,EAAyB,CACnE,MAAMiB,EAAYjB,EAAwBkB,YAAY,KACtD,MAAMC,EAAiBF,EAAY,EAAIjB,EAAwBoB,UAAU,EAAGH,GAAajB,EACzF,MAAMqB,EAAqBzB,EAAYC,gBAAgBvC,GAAiCgE,8BAClFD,EAAmBE,mBAAmB,CAACJ,GAAiB/G,GAC9DoH,EAAIC,QACH,mEAAmEzH,4DAEpE,OAAOzB,SACR,KAAO,CAEN,MAAMmJ,EAAiB/B,GAAWvE,UACjC,GAAGlB,EAAiB6F,2DAClBY,MACH,GAAIe,EAAgB,CACnB,MAAMC,EAAqBzH,EAAiB6F,aAAa6B,QAAQpI,EAAckI,GAC/E,MAAMG,EAAiBlC,EAAUvE,UAAU,GAAGuG,gBAC9C,MAAMG,EAA4BnC,GAAWvE,UAAU,GAAGuG,0CACvDhB,MACH,MAAMrG,EAAU,GAChBA,EAAQvB,KAAK,IAAIwC,EAAO,CAAEC,KAAMqG,EAAgBvG,SAAU,KAAMG,OAAQuB,KACxE,MAAM4D,EAAc9E,EAAe+E,SAAS,IAAI9G,EAAUgC,iBAAkBxD,UAAWA,UAAW+B,EAAS,CAC1GwG,QAAS,GAAGe,KAAkBC,MAE/B,MAAMf,QAAiBH,EAAYI,gBAAgB,EAAG,GACtD,GAAID,EAASzI,OAAQ,CACpB,OAAOyI,EAAS,GAAG3F,UAAU0G,EAC9B,CACD,CACAN,EAAIO,MAAM,uBAAuB/H,oBACjC,OAAOzB,SACR,CACD,CAAE,MAAOwJ,GACR,MAAMC,EAASD,EAASA,EAAyBC,OAASzJ,UAC1D,MAAM0J,EAAUF,aAAiBtB,MAAQsB,EAAME,QAAUC,OAAOH,GAChE,MAAMI,EAAMH,IAAW,IAAM,uBAAuBA,iCAAsCjC,IAAiBkC,EAC3GT,EAAIO,MAAMI,EACX,CACD,CACA,OAAO5J,SACR,GACC","ignoreList":[]}