{"version":3,"file":"RichTextEditor.js","names":["RichTextEditorBlock","_dec","defineUI5Class","_dec2","property","type","required","_dec3","isBindingInfo","_dec4","_dec5","aggregation","multiple","defaultClass","ButtonGroup","_dec6","PluginDefinition","_dec7","_dec8","bindable","_dec9","_class","_class2","_BuildingBlock","properties","others","_this","_isInEditMode","compileExpression","UI","IsEditable","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","getPlugins","pluginsArray","excludeDefaultPlugins","map","name","plugins","length","plugin","push","getButtonGroups","buttonGroups","buttonGroup","visible","priority","row","customToolbarPriority","buttons","split","getEditContent","_cleanupPreviousRTE","_editContent","_jsx","RichTextEditor","class","id","createId","value","customToolbar","editable","editorType","showGroupFontStyle","showGroupTextAlign","showGroupStructure","showGroupFont","showGroupClipboard","showGroupInsert","showGroupLink","showGroupUndo","sanitizeValue","wrapping","width","undefined","attachReady","addButtonGroups","clearTimeout","_buttonGroupsTimer","setTimeout","createContentDebounced","_exports","_inheritsLoose","_proto","prototype","onMetadataAvailable","_ownerComponent","_contentTimer","content","createContent","exit","_displayContent","destroy","set_isInEditMode","inEditMode","setProperty","setReadOnly","readOnly","lateButtonGroups","reverse","lateButtonGroup","addButtonGroup","detachReady","removeStyleClass","window","tinymce","get","getDisplayContent","FormattedText","htmlText","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./RichTextEditor.tsx"],"sourcesContent":["import { compileExpression } from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, defineUI5Class, property } from \"sap/fe/base/ClassSupport\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ButtonGroup from \"sap/fe/macros/richtexteditor/ButtonGroup\";\nimport PluginDefinition from \"sap/fe/macros/richtexteditor/Plugin\";\nimport FormattedText from \"sap/m/FormattedText\";\nimport type { PropertyBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport RichTextEditor from \"sap/ui/richtexteditor/RichTextEditor\";\n\ntype PluginDefinitionData = {\n\tname: string;\n};\ntype ButtonGroupData = {\n\tname: string;\n\tvisible: boolean;\n\tpriority?: number;\n\trow?: number;\n\tcustomToolbarPriority?: number;\n\tbuttons: string[];\n};\n\n/**\n * Building block that exposes the RichTextEditor UI5 control.\n *\n * It's used to enter formatted text, and uses the third-party component called TinyMCE.\n * @public\n * @since 1.117.0\n */\n@defineUI5Class(\"sap.fe.macros.RichTextEditor\")\nexport default class RichTextEditorBlock extends BuildingBlock<Control> {\n\t/**\n\t * ID of the editor\n\t */\n\t@property({ type: \"string\", required: true })\n\tid!: string;\n\n\t/**\n\t * The value contained in the editor. You can use this attribute to set a default value.\n\t * @public\n\t */\n\t@property({ type: \"any\", isBindingInfo: true })\n\tvalue?: PropertyBindingInfo;\n\n\t/**\n\t * Use the readOnly attribute to override the edit flow of the page.\n\t * By setting 'readOnly' to true, a FormattedText will be displayed instead of the editor.\n\t * @public\n\t */\n\t@property({ type: \"boolean\" })\n\treadOnly: PropertyBindingInfo = false;\n\n\t/**\n\t * With the 'buttonGroups' attribute you can customize the buttons that are displayed on the toolbar of the editor.\n\t * @public\n\t */\n\t@aggregation({ type: \"sap.fe.macros.richtexteditor.ButtonGroup\", multiple: true, defaultClass: ButtonGroup })\n\tbuttonGroups: ButtonGroup[] = [];\n\n\t/**\n\t * With the 'plugins' attribute you can customize the plugins that will be loaded by the editor.\n\t * @public\n\t */\n\t@aggregation({ type: \"sap.fe.macros.richtexteditor.Plugin\", multiple: true, defaultClass: PluginDefinition })\n\tplugins?: PluginDefinition[];\n\n\t/**\n\t * With the 'excludeDefaultPlugins' you can ask to remove the plugins that will be added by default\n\t * The default plugins are \"emoticons\" \"directionality\" \"image\" \"table\" \"link\" \"powerpaste\".\n\t * @public\n\t */\n\t@property({ type: \"boolean\" })\n\texcludeDefaultPlugins = false;\n\n\t/**\n\t * Use the 'required' attribute to make sure that the editor is filled with some text.\n\t * @public\n\t */\n\t@property({ type: \"any\", bindable: false })\n\trequired: PropertyBindingInfo = false;\n\n\t@property({ type: \"boolean\" })\n\t_isInEditMode: PropertyBindingInfo = false;\n\n\tprivate _displayContent?: FormattedText;\n\n\tprivate _editContent?: RichTextEditor;\n\n\tprivate _contentTimer?: number;\n\n\t/**\n\t * Timer to ensure that if the button groups are not added we restart the process.\n\t */\n\tprivate _buttonGroupsTimer?: number;\n\n\tconstructor(properties: $ControlSettings & PropertiesOf<RichTextEditorBlock>, others?: $ControlSettings) {\n\t\tproperties._isInEditMode = compileExpression(UI.IsEditable);\n\t\tsuper(properties, others);\n\t}\n\n\tonMetadataAvailable(_ownerComponent: TemplateComponent): void {\n\t\tsuper.onMetadataAvailable(_ownerComponent);\n\t}\n\n\tcreateContentDebounced(): void {\n\t\tif (this._contentTimer) {\n\t\t\tclearTimeout(this._contentTimer);\n\t\t}\n\t\tthis._contentTimer = setTimeout(() => {\n\t\t\tthis.content = this.createContent();\n\t\t}, 200) as unknown as number;\n\t}\n\n\texit(): void {\n\t\tthis._displayContent?.destroy();\n\t\tthis._editContent?.destroy();\n\t}\n\n\t/**\n\t * Method that returns the button customizations for the editor toolbar.\n\t * Because all values come as strings from XML, some parsing needs to be done to get attributes with the correct type.\n\t * @returns The button groups.\n\t */\n\tgetPlugins = (): { plugins?: PluginDefinitionData[] } => {\n\t\tlet pluginsArray: PluginDefinitionData[] | undefined;\n\t\tif (this.excludeDefaultPlugins) {\n\t\t\tpluginsArray = [];\n\t\t} else {\n\t\t\tpluginsArray = [\"emoticons\", \"directionality\", \"image\", \"table\", \"link\", \"powerpaste\"].map((name: string) => {\n\t\t\t\treturn { name: name };\n\t\t\t});\n\t\t}\n\t\tif (this.plugins?.length) {\n\t\t\tfor (const plugin of this.plugins) {\n\t\t\t\tpluginsArray.push(plugin);\n\t\t\t}\n\t\t}\n\t\treturn { plugins: pluginsArray };\n\t};\n\n\t/**\n\t * Method that returns the button customizations for the editor toolbar.\n\t * Because all values come as strings from XML, some parsing needs to be done to get attributes with the correct type.\n\t * @returns The button groups.\n\t */\n\tgetButtonGroups = (): ButtonGroupData[] => {\n\t\tif (this.buttonGroups && this.buttonGroups.length > 0) {\n\t\t\treturn this.buttonGroups.map((buttonGroup: ButtonGroup) => ({\n\t\t\t\tname: buttonGroup.name ?? \"\",\n\t\t\t\tvisible: buttonGroup.visible === \"true\",\n\t\t\t\tpriority: buttonGroup.priority,\n\t\t\t\trow: buttonGroup.row,\n\t\t\t\tcustomToolbarPriority: buttonGroup.customToolbarPriority,\n\t\t\t\tbuttons: buttonGroup.buttons?.split(\",\") || []\n\t\t\t}));\n\t\t}\n\t\treturn [];\n\t};\n\n\tset_isInEditMode(inEditMode: boolean): void {\n\t\tsuper.setProperty(\"_isInEditMode\", inEditMode);\n\t\tthis.createContentDebounced();\n\t}\n\n\tsetReadOnly(readOnly: boolean): void {\n\t\tsuper.setProperty(\"readOnly\", readOnly);\n\t\tthis.createContentDebounced();\n\t}\n\n\tgetEditContent = (): RichTextEditor => {\n\t\tthis._cleanupPreviousRTE();\n\n\t\tthis._editContent = (\n\t\t\t<RichTextEditor\n\t\t\t\tclass={\"sapUiHidden\"}\n\t\t\t\tid={this.createId(\"_rte\")}\n\t\t\t\tvalue={this.value}\n\t\t\t\tvisible={true}\n\t\t\t\tcustomToolbar={true}\n\t\t\t\teditable={true}\n\t\t\t\teditorType=\"TinyMCE6\"\n\t\t\t\tshowGroupFontStyle={true}\n\t\t\t\tshowGroupTextAlign={true}\n\t\t\t\tshowGroupStructure={true}\n\t\t\t\tshowGroupFont={false}\n\t\t\t\tshowGroupClipboard={true}\n\t\t\t\tshowGroupInsert={false}\n\t\t\t\tshowGroupLink={false}\n\t\t\t\tshowGroupUndo={false}\n\t\t\t\tsanitizeValue={true}\n\t\t\t\twrapping={true}\n\t\t\t\twidth={\"100%\"}\n\t\t\t\trequired={this.required}\n\t\t\t\t{...this.getPlugins()}\n\t\t\t\tbuttonGroups={this.buttonGroups.length > 0 ? [] : undefined}\n\t\t\t/>\n\t\t) as RichTextEditor;\n\n\t\tthis._editContent.attachReady(this.addButtonGroups, this);\n\t\t// Attach a timer to ensure that the button groups are added after the editor is ready\n\t\tclearTimeout(this._buttonGroupsTimer);\n\t\tthis._buttonGroupsTimer = setTimeout(() => {\n\t\t\tthis.createContentDebounced();\n\t\t}, 2000) as unknown as number;\n\t\treturn this._editContent;\n\t};\n\n\t/**\n\t * Buttons groups need to be added when the RTE is ready, otherwise some of them are not available.\n\t */\n\taddButtonGroups(): void {\n\t\tclearTimeout(this._buttonGroupsTimer);\n\t\tconst lateButtonGroups = this.getButtonGroups().reverse();\n\t\t// They also somehow need to be added in reverse because they also get added in the first place :D\n\t\tfor (const lateButtonGroup of lateButtonGroups) {\n\t\t\tthis._editContent?.addButtonGroup(lateButtonGroup);\n\t\t}\n\t\tthis._editContent?.detachReady(this.addButtonGroups, this);\n\t\tthis._editContent?.removeStyleClass(\"sapUiHidden\");\n\t}\n\n\t/**\n\t * Method that cleans up the previous rich text editor instance.\n\t * This is needed because the RichTextEditor control does not always destroy the TinyMCE instance,\n\t * which can lead to issues when switching between edit and display modes.\n\t */\n\t_cleanupPreviousRTE(): void {\n\t\tif (this._editContent) {\n\t\t\t// It's better to destroy the rich text editor as in some case with slow machine switching between edit and display may break it\n\t\t\tthis._editContent.destroy();\n\t\t\t// Destroy the TinyMCE instance as well\n\t\t\t// This is needed because the RichTextEditor control does not always destroy the TinyMCE instance\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\twindow.tinymce?.get(this.createId(\"_rte\") + \"-textarea\")?.destroy();\n\t}\n\n\tgetDisplayContent(): FormattedText {\n\t\tif (this._displayContent) {\n\t\t\tthis._displayContent.destroy();\n\t\t}\n\n\t\tthis._cleanupPreviousRTE();\n\n\t\tthis._displayContent = (<FormattedText htmlText={this.value} />) as FormattedText;\n\t\treturn this._displayContent;\n\t}\n\n\tcreateContent(): RichTextEditor | FormattedText | undefined {\n\t\tif (this._isInEditMode && !this.readOnly) {\n\t\t\treturn this.getEditContent();\n\t\t} else {\n\t\t\treturn this.getDisplayContent();\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}