{"version":3,"names":["formatUri","itemType","value","_exports","formatAddress","street","code","locality","region","country","textToWrite","push","join","computePhoneLabel","phoneType","includes","getMsTeamsMail","contactDataModelObject","teamsMail","targetObject","email","find","emailAnnotation","type","length","compileExpression","getExpressionFromAnnotation","address","getRelativePaths","undefined"],"sourceRoot":".","sources":["ContactHelper.ts"],"sourcesContent":["import type { ContactType, EmailAddressType } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport { ContactInformationType } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation } from \"sap/fe/base/BindingToolkit\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\n\n/**\n * Provides the URI to be used, based on the item type.\n * @param itemType\n * @param value\n * @returns The formatted URI\n */\nexport const formatUri = function (itemType: string, value: CompiledBindingToolkitExpression): string | undefined {\n\tswitch (itemType) {\n\t\tcase \"phone\":\n\t\t\treturn `tel:${value}`;\n\t\tcase \"mail\":\n\t\t\treturn `mailto:${value}`;\n\t\tdefault:\n\t\t\treturn value;\n\t}\n};\n/**\n * Formats the address based on the different parts given by the contact annotation.\n * @param street\n * @param code\n * @param locality\n * @param region\n * @param country\n * @returns The formatted address\n */\nexport const formatAddress = function (\n\tstreet: CompiledBindingToolkitExpression,\n\tcode: CompiledBindingToolkitExpression,\n\tlocality: CompiledBindingToolkitExpression,\n\tregion: CompiledBindingToolkitExpression,\n\tcountry: CompiledBindingToolkitExpression\n): string {\n\tconst textToWrite = [];\n\tif (street) {\n\t\ttextToWrite.push(street);\n\t}\n\tif (code && locality) {\n\t\ttextToWrite.push(`${code} ${locality}`);\n\t} else {\n\t\tif (code) {\n\t\t\ttextToWrite.push(code);\n\t\t}\n\t\tif (locality) {\n\t\t\ttextToWrite.push(locality);\n\t\t}\n\t}\n\tif (region) {\n\t\ttextToWrite.push(region);\n\t}\n\tif (country) {\n\t\ttextToWrite.push(country);\n\t}\n\treturn textToWrite.join(\", \");\n};\n\n/**\n * Retrieves the right text depending on the phoneType.\n * @param phoneType\n * @returns The text\n */\nexport const computePhoneLabel = function (phoneType: string): string {\n\tif (phoneType.includes(\"fax\")) {\n\t\treturn \"{sap.fe.i18n>POPOVER_CONTACT_SECTION_FAX}\";\n\t} else if (phoneType.includes(\"cell\")) {\n\t\treturn \"{sap.fe.i18n>POPOVER_CONTACT_SECTION_MOBILE}\";\n\t} else {\n\t\treturn \"{sap.fe.i18n>POPOVER_CONTACT_SECTION_PHONE}\";\n\t}\n};\n\n/**\n * Gets the binding for the email to be considered for the integration with Microsoft Teams.\n * @param contactDataModelObject\n * @returns The email binding\n */\nexport const getMsTeamsMail = function (\n\tcontactDataModelObject: DataModelObjectPath<ContactType>\n): CompiledBindingToolkitExpression | undefined {\n\t// teams email is the first preferred  email\n\tlet teamsMail = contactDataModelObject.targetObject?.email?.find((emailAnnotation: EmailAddressType) => {\n\t\treturn emailAnnotation.type?.includes(ContactInformationType.preferred);\n\t});\n\t// or the first work email\n\tteamsMail =\n\t\tteamsMail ||\n\t\tcontactDataModelObject.targetObject?.email?.find((emailAnnotation: EmailAddressType) => {\n\t\t\treturn emailAnnotation.type?.includes(ContactInformationType.work);\n\t\t});\n\t//or the first mail\n\tif (contactDataModelObject.targetObject?.email?.length) {\n\t\tteamsMail ??= contactDataModelObject.targetObject.email[0];\n\t}\n\n\treturn teamsMail\n\t\t? compileExpression(getExpressionFromAnnotation(teamsMail.address, getRelativePaths(contactDataModelObject)))\n\t\t: undefined;\n};\n"],"mappings":";;;;;;;;;;;EAOA;AACA;AACA;AACA;AACA;AACA;EACO,MAAMA,SAAS,GAAG,SAAAA,CAAUC,QAAgB,EAAEC,KAAuC,EAAsB;IACjH,QAAQD,QAAQ;MACf,KAAK,OAAO;QACX,OAAO,OAAOC,KAAK,EAAE;MACtB,KAAK,MAAM;QACV,OAAO,UAAUA,KAAK,EAAE;MACzB;QACC,OAAOA,KAAK;IACd;EACD,CAAC;EACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARAC,QAAA,CAAAH,SAAA,GAAAA,SAAA;EASO,MAAMI,aAAa,GAAG,SAAAA,CAC5BC,MAAwC,EACxCC,IAAsC,EACtCC,QAA0C,EAC1CC,MAAwC,EACxCC,OAAyC,EAChC;IACT,MAAMC,WAAW,GAAG,EAAE;IACtB,IAAIL,MAAM,EAAE;MACXK,WAAW,CAACC,IAAI,CAACN,MAAM,CAAC;IACzB;IACA,IAAIC,IAAI,IAAIC,QAAQ,EAAE;MACrBG,WAAW,CAACC,IAAI,CAAC,GAAGL,IAAI,IAAIC,QAAQ,EAAE,CAAC;IACxC,CAAC,MAAM;MACN,IAAID,IAAI,EAAE;QACTI,WAAW,CAACC,IAAI,CAACL,IAAI,CAAC;MACvB;MACA,IAAIC,QAAQ,EAAE;QACbG,WAAW,CAACC,IAAI,CAACJ,QAAQ,CAAC;MAC3B;IACD;IACA,IAAIC,MAAM,EAAE;MACXE,WAAW,CAACC,IAAI,CAACH,MAAM,CAAC;IACzB;IACA,IAAIC,OAAO,EAAE;MACZC,WAAW,CAACC,IAAI,CAACF,OAAO,CAAC;IAC1B;IACA,OAAOC,WAAW,CAACE,IAAI,CAAC,IAAI,CAAC;EAC9B,CAAC;;EAED;AACA;AACA;AACA;AACA;EAJAT,QAAA,CAAAC,aAAA,GAAAA,aAAA;EAKO,MAAMS,iBAAiB,GAAG,SAAAA,CAAUC,SAAiB,EAAU;IACrE,IAAIA,SAAS,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC9B,OAAO,2CAA2C;IACnD,CAAC,MAAM,IAAID,SAAS,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACtC,OAAO,8CAA8C;IACtD,CAAC,MAAM;MACN,OAAO,6CAA6C;IACrD;EACD,CAAC;;EAED;AACA;AACA;AACA;AACA;EAJAZ,QAAA,CAAAU,iBAAA,GAAAA,iBAAA;EAKO,MAAMG,cAAc,GAAG,SAAAA,CAC7BC,sBAAwD,EACT;IAC/C;IACA,IAAIC,SAAS,GAAGD,sBAAsB,CAACE,YAAY,EAAEC,KAAK,EAAEC,IAAI,CAAEC,eAAiC,IAAK;MACvG,OAAOA,eAAe,CAACC,IAAI,EAAER,QAAQ,iDAAiC,CAAC;IACxE,CAAC,CAAC;IACF;IACAG,SAAS,GACRA,SAAS,IACTD,sBAAsB,CAACE,YAAY,EAAEC,KAAK,EAAEC,IAAI,CAAEC,eAAiC,IAAK;MACvF,OAAOA,eAAe,CAACC,IAAI,EAAER,QAAQ,4CAA4B,CAAC;IACnE,CAAC,CAAC;IACH;IACA,IAAIE,sBAAsB,CAACE,YAAY,EAAEC,KAAK,EAAEI,MAAM,EAAE;MACvDN,SAAS,KAAKD,sBAAsB,CAACE,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3D;IAEA,OAAOF,SAAS,GACbO,iBAAiB,CAACC,2BAA2B,CAACR,SAAS,CAACS,OAAO,EAAEC,gBAAgB,CAACX,sBAAsB,CAAC,CAAC,CAAC,GAC3GY,SAAS;EACb,CAAC;EAAC1B,QAAA,CAAAa,cAAA,GAAAA,cAAA;EAAA,OAAAb,QAAA;AAAA","ignoreList":[],"file":"ContactHelper-dbg.js"}