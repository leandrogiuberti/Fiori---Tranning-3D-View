{"version":3,"file":"ContactHelper.js","names":["formatUri","itemType","value","_exports","formatAddress","street","code","locality","region","country","textToWrite","push","join","computePhoneLabel","phoneType","includes","getMsTeamsMail","contactDataModelObject","teamsMail","targetObject","email","find","emailAnnotation","type","length","compileExpression","getExpressionFromAnnotation","address","getRelativePaths","undefined"],"sources":["./ContactHelper.ts"],"sourcesContent":["import type { ContactType, EmailAddressType } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport { ContactInformationType } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation } from \"sap/fe/base/BindingToolkit\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\n\n/**\n * Provides the URI to be used, based on the item type.\n * @param itemType\n * @param value\n * @returns The formatted URI\n */\nexport const formatUri = function (itemType: string, value: CompiledBindingToolkitExpression): string | undefined {\n\tswitch (itemType) {\n\t\tcase \"phone\":\n\t\t\treturn `tel:${value}`;\n\t\tcase \"mail\":\n\t\t\treturn `mailto:${value}`;\n\t\tdefault:\n\t\t\treturn value;\n\t}\n};\n/**\n * Formats the address based on the different parts given by the contact annotation.\n * @param street\n * @param code\n * @param locality\n * @param region\n * @param country\n * @returns The formatted address\n */\nexport const formatAddress = function (\n\tstreet: CompiledBindingToolkitExpression,\n\tcode: CompiledBindingToolkitExpression,\n\tlocality: CompiledBindingToolkitExpression,\n\tregion: CompiledBindingToolkitExpression,\n\tcountry: CompiledBindingToolkitExpression\n): string {\n\tconst textToWrite = [];\n\tif (street) {\n\t\ttextToWrite.push(street);\n\t}\n\tif (code && locality) {\n\t\ttextToWrite.push(`${code} ${locality}`);\n\t} else {\n\t\tif (code) {\n\t\t\ttextToWrite.push(code);\n\t\t}\n\t\tif (locality) {\n\t\t\ttextToWrite.push(locality);\n\t\t}\n\t}\n\tif (region) {\n\t\ttextToWrite.push(region);\n\t}\n\tif (country) {\n\t\ttextToWrite.push(country);\n\t}\n\treturn textToWrite.join(\", \");\n};\n\n/**\n * Retrieves the right text depending on the phoneType.\n * @param phoneType\n * @returns The text\n */\nexport const computePhoneLabel = function (phoneType: string): string {\n\tif (phoneType.includes(\"fax\")) {\n\t\treturn \"{sap.fe.i18n>POPOVER_CONTACT_SECTION_FAX}\";\n\t} else if (phoneType.includes(\"cell\")) {\n\t\treturn \"{sap.fe.i18n>POPOVER_CONTACT_SECTION_MOBILE}\";\n\t} else {\n\t\treturn \"{sap.fe.i18n>POPOVER_CONTACT_SECTION_PHONE}\";\n\t}\n};\n\n/**\n * Gets the binding for the email to be considered for the integration with Microsoft Teams.\n * @param contactDataModelObject\n * @returns The email binding\n */\nexport const getMsTeamsMail = function (\n\tcontactDataModelObject: DataModelObjectPath<ContactType>\n): CompiledBindingToolkitExpression | undefined {\n\t// teams email is the first preferred  email\n\tlet teamsMail = contactDataModelObject.targetObject?.email?.find((emailAnnotation: EmailAddressType) => {\n\t\treturn emailAnnotation.type?.includes(ContactInformationType.preferred);\n\t});\n\t// or the first work email\n\tteamsMail =\n\t\tteamsMail ||\n\t\tcontactDataModelObject.targetObject?.email?.find((emailAnnotation: EmailAddressType) => {\n\t\t\treturn emailAnnotation.type?.includes(ContactInformationType.work);\n\t\t});\n\t//or the first mail\n\tif (contactDataModelObject.targetObject?.email?.length) {\n\t\tteamsMail ??= contactDataModelObject.targetObject.email[0];\n\t}\n\n\treturn teamsMail\n\t\t? compileExpression(getExpressionFromAnnotation(teamsMail.address, getRelativePaths(contactDataModelObject)))\n\t\t: undefined;\n};\n"],"mappings":";;;;qNAaO,MAAMA,EAAY,SAAUC,EAAkBC,GACpD,OAAQD,GACP,IAAK,QACJ,MAAO,OAAOC,IACf,IAAK,OACJ,MAAO,UAAUA,IAClB,QACC,OAAOA,EAEV,EACAC,EAAAH,YASO,MAAMI,EAAgB,SAC5BC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAc,GACpB,GAAIL,EAAQ,CACXK,EAAYC,KAAKN,EAClB,CACA,GAAIC,GAAQC,EAAU,CACrBG,EAAYC,KAAK,GAAGL,KAAQC,IAC7B,KAAO,CACN,GAAID,EAAM,CACTI,EAAYC,KAAKL,EAClB,CACA,GAAIC,EAAU,CACbG,EAAYC,KAAKJ,EAClB,CACD,CACA,GAAIC,EAAQ,CACXE,EAAYC,KAAKH,EAClB,CACA,GAAIC,EAAS,CACZC,EAAYC,KAAKF,EAClB,CACA,OAAOC,EAAYE,KAAK,KACzB,EAEAT,EAAAC,gBAKO,MAAMS,EAAoB,SAAUC,GAC1C,GAAIA,EAAUC,SAAS,OAAQ,CAC9B,MAAO,2CACR,MAAO,GAAID,EAAUC,SAAS,QAAS,CACtC,MAAO,8CACR,KAAO,CACN,MAAO,6CACR,CACD,EAEAZ,EAAAU,oBAKO,MAAMG,EAAiB,SAC7BC,GAGA,IAAIC,EAAYD,EAAuBE,cAAcC,OAAOC,KAAMC,GAC1DA,EAAgBC,MAAMR,SAAQ,mDAGtCG,EACCA,GACAD,EAAuBE,cAAcC,OAAOC,KAAMC,GAC1CA,EAAgBC,MAAMR,SAAQ,8CAGvC,GAAIE,EAAuBE,cAAcC,OAAOI,OAAQ,CACvDN,IAAcD,EAAuBE,aAAaC,MAAM,EACzD,CAEA,OAAOF,EACJO,EAAkBC,EAA4BR,EAAUS,QAASC,EAAiBX,KAClFY,SACJ,EAAE1B,EAAAa,iBAAA,OAAAb,CAAA","ignoreList":[]}