{"version":3,"file":"Chart.js","names":["Chart","_dec","defineUI5Class","returnTypes","_dec2","implementInterface","_dec3","_dec4","property","type","_dec5","required","expectedTypes","expectedAnnotations","_dec6","_dec7","_dec8","defaultValue","_dec9","allowedValues","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","association","_dec17","aggregation","_dec18","altTypes","multiple","defaultClass","Action","_dec19","event","_dec20","_dec21","_dec22","_dec23","_dec24","xmlEventHandler","_dec25","_dec26","controllerExtensionHandler","_class","_class2","_MacroAPI","settings","others","_this","_applyIdToContent","id","generate","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","prevDrillStack","initialControlState","chartActions","_commandActions","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_descriptor19","_descriptor20","_descriptor21","_descriptor22","_exports","_inheritsLoose","_proto","prototype","getSectionContentRole","sendDataToConsumer","consumerData","content","setHeader","title","setHeaderStyle","setHeaderLevel","titleLevel","getSelectedContexts","getBindingContext","getProperty","isA","typeName","oldValidType","Array","isArray","includes","onMetadataAvailable","createContent","onAfterRendering","afterRenderingEvent","view","getPageController","getView","internalModelContext","chart","getContent","showMessageStrip","sChartEntityPath","data","sCacheKey","oBindingContext","getObject","setProperty","attachStateChangeHandler","StateUtil","detachStateChange","stateChangeHandler","attachStateChange","oEvent","control","getParameter","chartBlock","getParent","handleStateChange","refreshNotApplicableFields","oFilterControl","oChart","FilterUtils","getNotApplicableFilters","handleSelectionChange","aData","bSelected","ChartRuntime","fnUpdateChart","fireEvent","merge","selected","onInternalDataRequested","collectAvailableCards","async","cards","actionToolbarItems","getActions","hasInsightActionEnabled","getFilter","card","getCardManifestChart","Object","keys","length","push","getChartControl","getHeader","callback","onAddCardToCollaborationManagerCallback","bind","hasSelections","mdcChart","getControlDelegate","getInnerChart","aDimensions","ChartUtils","getDimensionsFromDrillStack","bIsDrillDown","bIsDrillUp","bNoChange","toString","aFilters","getChartSelections","err","Log","error","onAddCardToInsightsPressed","insightsParams","createChartCardParams","showInsightsCardPreview","e","showGenericErrorMessage","getCardManifest","showCollaborationManagerCardPreview","collaborationManager","getService","chartFilterInfo","getAllFilterInfo","filters","forEach","filter","getPath","sPath","getChartPropertiesWithoutPrefixes","Filter","and","undefined","getPropertyDataModel","propertyName","metaPath","metaModel","getModel","getMetaModel","dimensionContext","createBindingContext","getInvolvedDataModelObjects","chartProperty","getInternalChartNameFromPropertyNameAndKind","name","kind","replace","_convertStateUtilToPresentationVariant","chartState","sortOrder","sorters","map","sorter","Property","Descending","descending","supplementaryConfig","properties","chartType","chartTypeInRequiredFormat","charAt","toUpperCase","slice","dimensions","measures","dimensionAttributes","measureAttributes","items","item","role","substring","Dimension","Role","Measure","chartViz","Content","ChartType","DimensionAttributes","Dimensions","MeasureAttributes","Measures","Type","chartPV","PresentationVariant","setChartVisualization","setProperties","SortOrder","getPresentationVariant","retrieveExternalState","getId","message","Error","String","setPresentationVariant","presentationVariant","existingPresentationVariant","propertiesInfo","fetchProperties","stateUtilPv","PresentationVariantToStateUtilsPV","convertPvToStateUtilPv","applyExternalState","getCurrentVariantKey","getVariant","setCurrentVariantKey","key","variantManagement","getSelectionVariant","StateHelper","setSelectionVariant","selectionVariant","prefillDescriptions","arguments","setSelectionVariantToMdcControl","getControlState","controlState","fullState","initialState","setInitialState","retrieveState","innerChart","variantToRetrieve","variantManagementControl","variantId","applyLegacyState","_navParameters","shouldApplyDiffState","vm","vmState","applyState","handleVariantIdPassedViaURLParams","urlParams","getStartupParameters","chartVariantId","CommonUtils","getTargetView","viewData","getViewData","vmType","variantToApply","getVariants","find","variant","getKey","ControlVariantApplyAPI","__ui5_require_async","default","activateVariant","element","variantReference","controller","appComponent","getAppComponent","componentData","getComponentData","startupParameters","applyNavigationParameters","navigationParameter","applyVariantFromURLParams","getMetadata","getName","Promise","resolve","currentVariant","ovM","aVariants","sVariantReference","some","oVariant","getStandardVariantKey","innerChartState","finalState","diffState","getExtensionAPI","updateAppState","_createContent","owner","_getOwner","setFilter","destroy","value","suppressInvalidate","_applyingSettings","getProperties","removeAggregation","removed","getAggregations","addAggregation","insertAggregation","index","contextPath","_resolvedContextPath","endsWith","getMdcChartTemplate","getRootController","getDiagnostics","getDataModelObjectForMetaPath","MacroAPI","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","TitleLevel","Auto","getOwnPropertyDescriptor"],"sources":["./Chart.tsx"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type { Chart as VocabularyChart } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport merge from \"sap/base/util/merge\";\nimport type ChartChart from \"sap/chart/Chart\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, association, defineUI5Class, event, implementInterface, property, xmlEventHandler } from \"sap/fe/base/ClassSupport\";\nimport { controllerExtensionHandler } from \"sap/fe/base/HookSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport type { NavigationParameter } from \"sap/fe/core/controllerextensions/ViewState\";\nimport type IViewStateContributor from \"sap/fe/core/controllerextensions/viewState/IViewStateContributor\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { BaseAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { ChartVisualization } from \"sap/fe/core/converters/controls/Common/Chart\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport type { CollaborationManagerService, WrappedCard } from \"sap/fe/core/services/CollaborationManagerServiceFactory\";\nimport type { ViewData } from \"sap/fe/core/services/TemplatedViewServiceFactory\";\nimport type Diagnostics from \"sap/fe/core/support/Diagnostics\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport Action from \"sap/fe/macros/chart/Action\";\nimport type ActionGroup from \"sap/fe/macros/chart/ActionGroup\";\nimport ChartRuntime from \"sap/fe/macros/chart/ChartRuntime\";\nimport ChartUtils from \"sap/fe/macros/chart/ChartUtils\";\nimport type ISingleSectionContributor from \"sap/fe/macros/controls/section/ISingleSectionContributor\";\nimport type { ConsumerData } from \"sap/fe/macros/controls/section/ISingleSectionContributor\";\nimport FilterUtils from \"sap/fe/macros/filter/FilterUtils\";\nimport type { DimensionType, MeasureType, Visualization } from \"sap/fe/navigation/PresentationVariant\";\nimport PresentationVariant from \"sap/fe/navigation/PresentationVariant\";\nimport type SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type { CardManifest } from \"sap/insights/CardHelper\";\nimport type MenuItem from \"sap/m/MenuItem\";\nimport type { default as Event, default as UI5Event } from \"sap/ui/base/Event\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type BaseObject from \"sap/ui/base/Object\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\nimport type LayoutData from \"sap/ui/core/LayoutData\";\nimport { TitleLevel } from \"sap/ui/core/library\";\nimport type MDCChart from \"sap/ui/mdc/Chart\";\nimport type ChartDelegate from \"sap/ui/mdc/ChartDelegate\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type { AppState, Items, Sorters } from \"sap/ui/mdc/p13n/StateUtil\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type ModelContext from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { PropertyInfo } from \"./DelegateUtil\";\nimport MacroAPI from \"./MacroAPI\";\nimport type { ActionOrActionGroup, ChartContextObjectPath, ChartCustomData, CommandAction } from \"./chart/MdcChartTemplate\";\nimport { getMdcChartTemplate } from \"./chart/MdcChartTemplate\";\nimport PresentationVariantToStateUtilsPV from \"./chart/adapter/ChartPvToStateUtils\";\nimport { createChartCardParams } from \"./insights/AnalyticalInsightsHelper\";\nimport type { ControlState } from \"./insights/CommonInsightsHelper\";\nimport { hasInsightActionEnabled, showGenericErrorMessage } from \"./insights/CommonInsightsHelper\";\nimport type { ChartContent, InsightsParams } from \"./insights/InsightsService\";\nimport { getCardManifest, showCollaborationManagerCardPreview, showInsightsCardPreview } from \"./insights/InsightsService\";\nimport StateHelper from \"./mdc/adapter/StateHelper\";\n\nexport type ChartState = {\n\tinnerChart?: {\n\t\tinitialState?: {\n\t\t\titems?: { name: string }[];\n\t\t};\n\t\tfullState?: {\n\t\t\titems?: { name: string }[];\n\t\t\tfilter?: object;\n\t\t};\n\t};\n\tvariantManagement?: {\n\t\tvariantId?: string | null;\n\t};\n} & Record<string, unknown>;\n/**\n * Building block used to create a chart based on the metadata provided by OData V4.\n * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/chart/chartDefault Overview of Building Blocks}\n * <br>\n * Usually, a contextPath and metaPath is expected.\n *\n *\n * Usage example:\n * <pre>\n * &lt;macros:Chart id=\"MyChart\" contextPath=\"/RootEntity\" metaPath=\"@com.sap.vocabularies.UI.v1.Chart\" /&gt;\n * </pre>\n * @alias sap.fe.macros.Chart\n * @ignoreInterface sap.fe.macros.controls.section.ISingleSectionContributor\n * @ui5-metamodel\n * @public\n */\n@defineUI5Class(\"sap.fe.macros.Chart\", { returnTypes: [\"sap.fe.macros.MacroAPI\"] })\nexport default class Chart extends MacroAPI implements ISingleSectionContributor, IViewStateContributor<ChartState> {\n\t@implementInterface(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\")\n\t__implements__sap_fe_core_controllerextensions_viewState_IViewStateContributor = true;\n\n\tcontent!: MDCChart;\n\n\t@implementInterface(\"sap.fe.macros.controls.section.ISingleSectionContributor\")\n\t__implements__sap_fe_macros_controls_section_ISingleSectionContributor = true;\n\n\tgetSectionContentRole(): \"provider\" | \"consumer\" {\n\t\treturn \"consumer\";\n\t}\n\n\t/**\n\t * Implementation of the sendDataToConsumer method which is a part of the ISingleSectionContributor\n\t *\n\t * Will be called from the sap.fe.macros.controls.Section control when there is a Chart building block rendered within a section\n\t * along with the consumerData i.e. section's data such as title and title level which is then applied to the chart using the implementation below accordingly.\n\t *\n\t */\n\n\tsendDataToConsumer(consumerData: ConsumerData): void {\n\t\tthis.content?.setHeader(consumerData.title);\n\t\tthis.content?.setHeaderStyle(\"H4\");\n\t\tthis.content?.setHeaderLevel(consumerData.titleLevel as TitleLevel);\n\t}\n\n\t/**\n\t * ID of the chart\n\t */\n\t@property({ type: \"string\" })\n\treadonly id!: string;\n\n\t/**\n\t * Metadata path to the presentation context (UI.Chart with or without a qualifier)\n\t * @public\n\t */\n\t@property({\n\t\ttype: \"string\",\n\t\trequired: true,\n\t\texpectedTypes: [\"EntitySet\", \"EntityType\", \"Singleton\", \"NavigationProperty\"],\n\t\texpectedAnnotations: [\n\t\t\t\"com.sap.vocabularies.UI.v1.Chart\",\n\t\t\t\"com.sap.vocabularies.UI.v1.PresentationVariant\",\n\t\t\t\"com.sap.vocabularies.UI.v1.SelectionPresentationVariant\"\n\t\t]\n\t})\n\treadonly metaPath!: string;\n\n\t/**\n\t * Metadata path to the entitySet or navigationProperty\n\t * @public\n\t */\n\t@property({\n\t\ttype: \"string\",\n\t\trequired: true,\n\t\texpectedTypes: [\"EntitySet\", \"EntityType\", \"Singleton\", \"NavigationProperty\"],\n\t\texpectedAnnotations: []\n\t})\n\treadonly contextPath!: string;\n\n\t/**\n\t * Specifies the header text that is shown in the chart\n\t * @public\n\t */\n\t@property({ type: \"string\" })\n\treadonly header!: string;\n\n\t/**\n\t * Controls if the header text should be shown or not\n\t * @public\n\t */\n\t@property({ type: \"boolean\", defaultValue: true })\n\treadonly headerVisible!: boolean;\n\n\t/**\n\t * Defines the selection mode to be used by the chart.\n\t *\n\t * Allowed values are `None`, `Single` or `Multiple`\n\t * @public\n\t */\n\t@property({ type: \"string\", defaultValue: \"Multiple\", allowedValues: [\"None\", \"Single\", \"Multiple\"] })\n\treadonly selectionMode!: string;\n\n\t/**\n\t * Controls the kind of variant management that should be enabled for the chart.\n\t *\n\t * Allowed value is `Control`.<br/>\n\t * If set with value `Control`, a variant management control is seen within the chart and the chart is linked to this.<br/>\n\t * If not set with any value, variant management control is not available for this chart.\n\t * @public\n\t */\n\t@property({ type: \"string\", allowedValues: [\"Control\"] })\n\treadonly variantManagement!: string;\n\n\t/**\n\t * Controls which options should be enabled for the chart personalization dialog.\n\t *\n\t * If it is set to `true`, all possible options for this kind of chart are enabled.<br/>\n\t * If it is set to `false`, personalization is disabled.<br/>\n\t * <br/>\n\t * You can also provide a more granular control for the personalization by providing a comma-separated list with the options you want to be available.<br/>\n\t * Available options are:<br/>\n\t * - Sort<br/>\n\t * - Type<br/>\n\t * - Item<br/>\n\t * - Filter<br/>\n\t * @public\n\t */\n\t@property({ type: \"string\", defaultValue: true })\n\treadonly personalization!: string | boolean;\n\n\t/**\n\t * Header level of chart\n\t * @private\n\t */\n\t@property({ type: \"string\" })\n\treadonly headerLevel: TitleLevel = TitleLevel.Auto;\n\n\t/**\n\t * Chart delegate\n\t * @private\n\t */\n\t@property({ type: \"object\" })\n\treadonly chartDelegate?: object;\n\n\t/**\n\t * Used internally for LR and OP\n\t * @private\n\t */\n\t@property({ type: \"boolean\" })\n\treadonly _applyIdToContent = false;\n\n\t/**\n\t * No data text\n\t * @private\n\t */\n\t@property({ type: \"string\" })\n\treadonly noDataText?: string;\n\n\t/**\n\t * Parameter with drillstack on a drill up/ drill down of the MDC_Chart\n\t * @private\n\t */\n\tprevDrillStack: string[] = [];\n\n\t_contentId: string | undefined;\n\n\t_context!: ModelContext;\n\n\tblockActions?: ActionOrActionGroup;\n\n\t_blockId?: string;\n\n\t_personalization?: string | boolean;\n\n\tinitialControlState: Record<string, unknown> = {};\n\n\t_blockActions!: (MenuItem | ActionToolbarAction | undefined)[];\n\n\tchartDefinition!: ChartVisualization;\n\n\tnavigationPath?: string;\n\n\tautoBindOnInit?: boolean;\n\n\tvizProperties?: string;\n\n\tchartActions?: BaseAction[] = [];\n\n\tfilter?: string;\n\n\tvisible?: string;\n\n\tdraftSupported?: boolean;\n\n\theaderStyle?: TitleLevel;\n\n\tuseCondensedLayout!: boolean;\n\n\t_metaPathContext!: ModelContext;\n\n\t_customData!: ChartCustomData;\n\n\t_chartContext!: ModelContext;\n\n\t_chartType: string | undefined;\n\n\t_chart!: VocabularyChart;\n\n\t_metaModel!: ODataMetaModel;\n\n\tmeasures?: ModelContext;\n\n\t_sortConditions: object | undefined;\n\n\t_commandActions: CommandAction[] = [];\n\n\tfireVariantSelected?: Function;\n\n\tfireVariantSaved?: Function;\n\n\tfireSegmentedButtonPressed?: Function;\n\n\t_resolvedContextPath?: string;\n\n\t/**\n\t * Id of the FilterBar building block associated with the chart.\n\t * @public\n\t */\n\t@association({ type: \"sap.ui.core.Control\" })\n\tfilterBar?: string;\n\n\t@aggregation({\n\t\ttype: \"sap.ui.core.LayoutData\"\n\t})\n\tlayoutData!: LayoutData;\n\n\t/**\n\t * Aggregate actions of the chart.\n\t * @public\n\t */\n\t@aggregation({\n\t\ttype: \"sap.fe.macros.chart.Action\",\n\t\taltTypes: [\"sap.fe.macros.chart.ActionGroup\"],\n\t\tmultiple: true,\n\t\tdefaultClass: Action\n\t})\n\tactions!: Action[] | ActionGroup[];\n\n\t/**\n\t * Gets contexts from the chart that have been selected by the user.\n\t * @returns Contexts of the rows selected by the user\n\t * @public\n\t */\n\tgetSelectedContexts(): Context[] {\n\t\treturn this.content?.getBindingContext(\"internal\")?.getProperty(\"selectedContexts\") || [];\n\t}\n\n\t/**\n\t * An event triggered when chart selections are changed. The event contains information about the data selected/deselected and the Boolean flag that indicates whether data is selected or deselected.\n\t * @public\n\t */\n\t@event()\n\tselectionChange!: Function;\n\n\t/**\n\t * An event triggered when the chart requests data.\n\t * @private\n\t */\n\t@event()\n\tinternalDataRequested!: Function;\n\n\t/**\n\t * Event triggered when chart's variant is selected.\n\t * @private\n\t */\n\t@event()\n\tvariantSelected?: Function;\n\n\t/**\n\t * Event triggered when chart's variant is saved.\n\t * @private\n\t */\n\t@event()\n\tvariantSaved?: Function;\n\n\t/**\n\t * Event triggered when chart's segmented button i.e., mode between table, chart and chart with table view is selected\n\t * @private\n\t */\n\t@event()\n\tsegmentedButtonPressed!: Function;\n\n\tconstructor(settings?: PropertiesOf<Chart>, others?: $ControlSettings) {\n\t\tif (settings?._applyIdToContent) {\n\t\t\tsettings.id = generate([settings.id, \"::Chart\"]);\n\t\t}\n\t\tsuper(settings, others);\n\t}\n\n\t/**\n\t * Function is overridden to ensure backward incompatibility\n\t * @override\n\t */\n\tisA<T extends BaseObject = BaseObject>(typeName: string | string[]): this is T;\n\n\tisA<T>(typeName?: string | string[]): this is T;\n\n\tisA(typeName: string | string[]): boolean {\n\t\tconst oldValidType = \"sap.fe.macros.chart.ChartAPI\";\n\t\tif ((Array.isArray(typeName) && typeName.includes(oldValidType)) || typeName === oldValidType) return true;\n\n\t\treturn super.isA(typeName);\n\t}\n\n\tonMetadataAvailable(): void {\n\t\tif (!this.content) {\n\t\t\tthis.content = this.createContent();\n\t\t}\n\t}\n\n\tonAfterRendering(afterRenderingEvent: JQuery.Event): void {\n\t\tconst view = this.getPageController()?.getView();\n\t\tconst internalModelContext: InternalModelContext = view?.getBindingContext(\"internal\") as InternalModelContext;\n\t\tconst chart = this.getContent() as Chart;\n\t\tconst showMessageStrip: Record<string, boolean> = internalModelContext?.getProperty(\"controls/showMessageStrip\") || {};\n\t\tconst sChartEntityPath = chart.data(\"entitySet\"),\n\t\t\tsCacheKey = `${sChartEntityPath}Chart`,\n\t\t\toBindingContext = view?.getBindingContext();\n\t\tshowMessageStrip[sCacheKey] =\n\t\t\tchart.data(\"draftSupported\") === \"true\" && !!oBindingContext && !oBindingContext.getObject(\"IsActiveEntity\");\n\t\tinternalModelContext.setProperty(\"controls/showMessageStrip\", showMessageStrip);\n\t\tthis.attachStateChangeHandler();\n\n\t\tsuper.onAfterRendering(afterRenderingEvent);\n\t}\n\n\tprivate attachStateChangeHandler(): void {\n\t\tStateUtil.detachStateChange(this.stateChangeHandler);\n\t\tStateUtil.attachStateChange(this.stateChangeHandler);\n\t}\n\n\tstateChangeHandler(oEvent: Event<{ control: Control }>): void {\n\t\tconst control = oEvent.getParameter(\"control\");\n\t\tif (control.isA<Chart>(\"sap.ui.mdc.Chart\")) {\n\t\t\tconst chartBlock = control.getParent() as unknown as { handleStateChange?: Function };\n\t\t\tif (chartBlock?.handleStateChange) {\n\t\t\t\tchartBlock.handleStateChange();\n\t\t\t}\n\t\t}\n\t}\n\n\trefreshNotApplicableFields(oFilterControl: Control): string[] {\n\t\tconst oChart = this.getContent();\n\t\treturn FilterUtils.getNotApplicableFilters(oFilterControl as FilterBar, oChart!);\n\t}\n\n\t@xmlEventHandler()\n\thandleSelectionChange(oEvent: UI5Event<{ data: unknown[]; name: string }>): void {\n\t\tconst aData = oEvent.getParameter(\"data\");\n\t\tconst bSelected = oEvent.getParameter(\"name\") === \"selectData\";\n\t\tChartRuntime.fnUpdateChart(oEvent);\n\t\tthis.fireEvent(\"selectionChange\", merge({}, { data: aData, selected: bSelected }));\n\t}\n\n\t@xmlEventHandler()\n\tonInternalDataRequested(): void {\n\t\tthis.fireEvent(\"internalDataRequested\");\n\t}\n\n\t@controllerExtensionHandler(\"collaborationManager\", \"collectAvailableCards\")\n\tasync collectAvailableCards(cards: WrappedCard[]): Promise<void> {\n\t\tconst actionToolbarItems = this.content.getActions() as ActionToolbarAction[];\n\t\tif (hasInsightActionEnabled(actionToolbarItems, this.content.getFilter())) {\n\t\t\tconst card = await this.getCardManifestChart();\n\t\t\tif (Object.keys(card).length > 0) {\n\t\t\t\tcards.push({\n\t\t\t\t\tcard: card,\n\t\t\t\t\ttitle: this.getChartControl().getHeader(),\n\t\t\t\t\tcallback: this.onAddCardToCollaborationManagerCallback.bind(this)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\thasSelections(): boolean {\n\t\t// consider chart selections in the current drill stack or on any further drill downs\n\t\tconst mdcChart = this.content as unknown as MDCChart;\n\t\tif (mdcChart) {\n\t\t\ttry {\n\t\t\t\tconst chart = (mdcChart.getControlDelegate() as unknown as ChartDelegate)?.getInnerChart(mdcChart) as ChartChart;\n\t\t\t\tif (chart) {\n\t\t\t\t\tconst aDimensions = ChartUtils.getDimensionsFromDrillStack(chart);\n\t\t\t\t\tconst bIsDrillDown = aDimensions.length > this.prevDrillStack.length;\n\t\t\t\t\tconst bIsDrillUp = aDimensions.length < this.prevDrillStack.length;\n\t\t\t\t\tconst bNoChange = aDimensions.toString() === this.prevDrillStack.toString();\n\t\t\t\t\tlet aFilters: Filter[];\n\t\t\t\t\tif (bIsDrillUp && aDimensions.length === 1) {\n\t\t\t\t\t\t// drilling up to level0 would clear all selections\n\t\t\t\t\t\taFilters = ChartUtils.getChartSelections(mdcChart, true) as Filter[];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// apply filters of selections of previous drillstack when drilling up/down\n\t\t\t\t\t\t// to the chart and table\n\t\t\t\t\t\taFilters = ChartUtils.getChartSelections(mdcChart) as Filter[];\n\t\t\t\t\t}\n\t\t\t\t\tif (bIsDrillDown || bIsDrillUp) {\n\t\t\t\t\t\t// update the drillstack on a drill up/ drill down\n\t\t\t\t\t\tthis.prevDrillStack = aDimensions;\n\t\t\t\t\t\treturn aFilters.length > 0;\n\t\t\t\t\t} else if (bNoChange) {\n\t\t\t\t\t\t// bNoChange is true when chart is selected\n\t\t\t\t\t\treturn aFilters.length > 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (err: unknown) {\n\t\t\t\tLog.error(`Error while checking for selections in Chart: ${err}`);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Event handler to create insightsParams and call the API to show insights card preview for charts.\n\t * @returns Undefined if card preview is rendered.\n\t */\n\tasync onAddCardToInsightsPressed(): Promise<void> {\n\t\ttry {\n\t\t\tconst insightsParams = await createChartCardParams(this);\n\t\t\tif (insightsParams) {\n\t\t\t\tshowInsightsCardPreview(insightsParams);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tshowGenericErrorMessage(this.content);\n\t\t\tLog.error(e as string);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the card manifest optimized for the chart case.\n\t * @returns Promise of CardManifest\n\t */\n\tprivate async getCardManifestChart(): Promise<CardManifest> {\n\t\tconst insightsParams = await createChartCardParams(this);\n\t\treturn getCardManifest(insightsParams as InsightsParams<ChartContent>);\n\t}\n\n\t/**\n\t * Event handler to create insightsParams and call the API to show insights card preview for table.\n\t * @param card The card manifest to be used for the callback\n\t * @returns Undefined if card preview is rendered.\n\t */\n\tasync onAddCardToCollaborationManagerCallback(card: CardManifest): Promise<void> {\n\t\ttry {\n\t\t\tif (card) {\n\t\t\t\tawait showCollaborationManagerCardPreview(\n\t\t\t\t\tcard,\n\t\t\t\t\tthis.getPageController()?.collaborationManager.getService() as CollaborationManagerService\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tshowGenericErrorMessage(this.content);\n\t\t\tLog.error(e as string);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the filters related to the chart.\n\t * @returns  The filter configured on the chart or undefined if none\n\t */\n\tgetFilter(): Filter | undefined {\n\t\tconst chartFilterInfo = ChartUtils.getAllFilterInfo(this.content as unknown as MDCChart);\n\t\tif (chartFilterInfo.filters.length) {\n\t\t\tchartFilterInfo.filters.forEach((filter) => {\n\t\t\t\tif (filter.getPath()) {\n\t\t\t\t\t(filter as unknown as { sPath: string }).sPath = this.getChartPropertiesWithoutPrefixes(filter.getPath()!);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn new Filter({ filters: chartFilterInfo.filters, and: true });\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the chart control from the Chart API.\n\t * @returns The Chart control inside the Chart API\n\t */\n\tgetChartControl(): MDCChart {\n\t\treturn this.content;\n\t}\n\n\t/**\n\t * Gets the datamodel object path for the dimension.\n\t * @param propertyName  Name of the dimension\n\t * @returns The datamodel object path for the dimension\n\t */\n\n\tgetPropertyDataModel(propertyName: string): DataModelObjectPath<Property> | null {\n\t\tconst metaPath = this.content.data(\"targetCollectionPath\") as string;\n\t\tconst metaModel = (this.content.getModel() as ODataModel).getMetaModel();\n\t\tconst dimensionContext = metaModel.createBindingContext(`${metaPath}/${propertyName}`) as Context;\n\t\treturn getInvolvedDataModelObjects<Property>(dimensionContext);\n\t}\n\n\t/**\n\t * This function returns an array of chart properties by removing _fe_groupable and _fe_aggregatable prefix.\n\t * @param {Array} aProperties Chart filter properties\n\t * @returns Chart properties without prefixes\n\t */\n\n\tgetChartPropertiesWithoutPrefixes(chartProperty: string): string {\n\t\tif (chartProperty && chartProperty.includes(\"fe_groupable\")) {\n\t\t\tchartProperty = this.getInternalChartNameFromPropertyNameAndKind(chartProperty, \"groupable\");\n\t\t} else if (chartProperty && chartProperty.includes(\"fe_aggregatable\")) {\n\t\t\tchartProperty = this.getInternalChartNameFromPropertyNameAndKind(chartProperty, \"aggregatable\");\n\t\t}\n\t\treturn chartProperty;\n\t}\n\n\t/**\n\t * This function returns an ID which should be used in the internal chart for the measure or dimension.\n\t * @param name ID of the property\n\t * @param kind Type of the property (measure or dimension)\n\t * @returns Internal ID for the sap.chart.Chart\n\t */\n\n\tgetInternalChartNameFromPropertyNameAndKind(name: string, kind: string): string {\n\t\treturn name.replace(\"_fe_\" + kind + \"_\", \"\");\n\t}\n\n\t/**\n\t * This function converts the chart's stateUtil  to Chart Presentation Variant.\n\t * @param chartState Chart AppState util PV\n\t * @returns Presentation Variant structure for the chart\n\t */\n\t_convertStateUtilToPresentationVariant(chartState: AppState): PresentationVariant {\n\t\tconst sortOrder = chartState.sorters?.map((sorter: Sorters) => {\n\t\t\treturn {\n\t\t\t\tProperty: this.getChartPropertiesWithoutPrefixes(sorter.name),\n\t\t\t\tDescending: sorter.descending\n\t\t\t};\n\t\t});\n\t\tconst type = chartState.supplementaryConfig?.properties?.chartType;\n\t\tconst chartTypeInRequiredFormat = type ? type.charAt(0).toUpperCase() + type.slice(1) : undefined;\n\t\tconst chartType = \"com.sap.vocabularies.UI.v1.ChartType/\" + chartTypeInRequiredFormat;\n\t\tconst dimensions: string[] = [],\n\t\t\tmeasures: string[] = [],\n\t\t\tdimensionAttributes: DimensionType[] = [],\n\t\t\tmeasureAttributes: MeasureType[] = [];\n\t\t(chartState.items ?? []).forEach((item: Items) => {\n\t\t\titem.name = this.getChartPropertiesWithoutPrefixes(item.name);\n\t\t\tconst role = item.role?.length\n\t\t\t\t? item.role.substring(0, 1).toUpperCase() + item.role?.substring(1, item.role.length)\n\t\t\t\t: undefined;\n\t\t\tif (item.role === \"category\" || item.role === \"series\" || item.role === \"category2\") {\n\t\t\t\tdimensions.push(item.name);\n\t\t\t\tdimensionAttributes.push({\n\t\t\t\t\tDimension: item.name,\n\t\t\t\t\tRole: `com.sap.vocabularies.UI.v1.ChartDimensionRoleType/${role}`\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmeasures.push(item.name);\n\t\t\t\tmeasureAttributes.push({ Measure: item.name, Role: \"com.sap.vocabularies.UI.v1.ChartDimensionRoleType/\" + role });\n\t\t\t}\n\t\t});\n\n\t\tconst chartViz: Visualization = {\n\t\t\tContent: {\n\t\t\t\tChartType: chartType,\n\t\t\t\tDimensionAttributes: dimensionAttributes,\n\t\t\t\tDimensions: dimensions,\n\t\t\t\tMeasureAttributes: measureAttributes,\n\t\t\t\tMeasures: measures\n\t\t\t},\n\t\t\tType: \"Chart\"\n\t\t};\n\t\tconst chartPV = new PresentationVariant();\n\t\tchartPV.setChartVisualization(chartViz);\n\t\tchartPV.setProperties({\n\t\t\tSortOrder: sortOrder ?? []\n\t\t});\n\t\treturn chartPV;\n\t}\n\n\t/**\n\t * Get the presentation variant that is currently applied on the chart.\n\t * @returns The presentation variant {@link sap.fe.navigation.PresentationVariant} applied to the chart\n\t * @public\n\t */\n\n\tasync getPresentationVariant(): Promise<PresentationVariant> {\n\t\ttry {\n\t\t\tconst chartState = await StateUtil.retrieveExternalState(this.content);\n\t\t\treturn this._convertStateUtilToPresentationVariant(chartState);\n\t\t} catch (error) {\n\t\t\tconst id: string = this.getId();\n\t\t\tconst message = error instanceof Error ? error.message : String(error);\n\t\t\tLog.error(`Chart Building Block (${id}) - get presentation variant failed : ${message}`);\n\t\t\tthrow Error(message);\n\t\t}\n\t}\n\n\t/**\n\t * Set the presentation variant for the mdc chart.\n\t *\n\t * The json format retrieved by using the get PresentationVariant button in the linked FPM sample should be followed while trying to set the PresentationVariant as needed.\n\t * The values dimensions, measures and other properties should also be given in the valid format and null or empty values should be avoided.\n\t * One dimension attribute should have only one role associated with it on a given chart.\n\t * @param presentationVariant the presentation variant {@link sap.fe.navigation.PresentationVariant} to be set\n\t * @public\n\t */\n\n\tasync setPresentationVariant(presentationVariant: PresentationVariant): Promise<void> {\n\t\ttry {\n\t\t\tconst chart = this.content;\n\t\t\tconst existingPresentationVariant = await this.getPresentationVariant();\n\t\t\tconst propertiesInfo = (await (chart.getControlDelegate() as ChartDelegate)?.fetchProperties(\n\t\t\t\tchart\n\t\t\t)) as unknown as PropertyInfo[];\n\n\t\t\tconst stateUtilPv = PresentationVariantToStateUtilsPV.convertPvToStateUtilPv(\n\t\t\t\tpresentationVariant,\n\t\t\t\texistingPresentationVariant,\n\t\t\t\tpropertiesInfo\n\t\t\t);\n\n\t\t\tawait StateUtil.applyExternalState(chart, stateUtilPv);\n\t\t} catch (err: unknown) {\n\t\t\tconst message = err instanceof Error ? err.message : String(err);\n\t\t\tLog.error(`FE: Chart Building Block setPresentationVariant API failed with error: ${message}`);\n\t\t\tthrow Error(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the key of the current variant in the associated variant management.\n\t * @returns Variant key of {@link sap.ui.fl.variants.VariantManagement} applied to the chart\n\t * @public\n\t */\n\tgetCurrentVariantKey(): string | null {\n\t\treturn this.content.getVariant().getCurrentVariantKey();\n\t}\n\n\t/**\n\t * Sets the variant of the provided key in the associated variant management.\n\t * @param key The variant key of {@link sap.ui.fl.variants.VariantManagement} to be set\n\t * @public\n\t */\n\tsetCurrentVariantKey(key: string): void {\n\t\tconst variantManagement = this.content.getVariant();\n\t\tvariantManagement.setCurrentVariantKey(key);\n\t}\n\n\t/**\n\t * Get the selection variant from the chart. This function considers only the selection variant applied at the control level.\n\t * @returns A promise that resolves with {@link sap.fe.navigation.SelectionVariant}.\n\t * @public\n\t */\n\tasync getSelectionVariant(): Promise<SelectionVariant> {\n\t\treturn StateHelper.getSelectionVariant(this.content);\n\t}\n\n\t/**\n\t * Sets {@link sap.fe.navigation.SelectionVariant} to the chart. Note: setSelectionVariant will clear existing filters and then apply the SelectionVariant values.\n\t * @param selectionVariant The {@link sap.fe.navigation.SelectionVariant} to apply to the chart\n\t * @param prefillDescriptions Optional. If true, we will use the associated text property values (if they're available in the SelectionVariant) to display the filter value descriptions, instead of loading them from the backend\n\t * @returns A promise for asynchronous handling\n\t * @public\n\t */\n\tasync setSelectionVariant(selectionVariant: SelectionVariant, prefillDescriptions = false): Promise<unknown> {\n\t\treturn StateHelper.setSelectionVariantToMdcControl(this.getContent(), selectionVariant, prefillDescriptions);\n\t}\n\n\t/**\n\t * Retrieves the control state based on the given control state key.\n\t * @param controlState The current state of the control.\n\t * @returns - The full state of the control along with the initial state if available.\n\t */\n\tgetControlState(controlState: ControlState): ControlState {\n\t\tconst initialControlState: Record<string, unknown> = this.initialControlState;\n\t\tif (controlState) {\n\t\t\treturn {\n\t\t\t\tfullState: controlState as object,\n\t\t\t\tinitialState: initialControlState as object\n\t\t\t};\n\t\t}\n\t\treturn controlState;\n\t}\n\n\t/**\n\t * Sets the initial state of the control by retrieving the external state.\n\t * @returns A promise that resolves when the initial state is set.\n\t */\n\tasync setInitialState(): Promise<void> {\n\t\ttry {\n\t\t\tconst initialControlState = await StateUtil.retrieveExternalState(this.content);\n\t\t\tthis.initialControlState = initialControlState;\n\t\t} catch (e: unknown) {\n\t\t\tLog.error(e as string);\n\t\t}\n\t}\n\n\t/**\n\t * Asynchronously retrieves the state of the chart based on the provided viewstate.\n\t * @returns A promise that resolves to the chart state or null if not found.\n\t */\n\tasync retrieveState(): Promise<ChartState | null> {\n\t\tconst chartState: ChartState = {};\n\t\tchartState.innerChart = this.getControlState(await StateUtil.retrieveExternalState(this.content)) as object;\n\t\tconst variantToRetrieve = this.content.getVariant()?.getId();\n\t\tif (variantToRetrieve) {\n\t\t\tconst variantManagementControl = this.content.getVariant();\n\t\t\tif (!chartState.variantManagement) {\n\t\t\t\tchartState.variantManagement = { variantId: variantManagementControl?.getCurrentVariantKey() };\n\t\t\t} else {\n\t\t\t\tchartState.variantManagement.variantId = variantManagementControl?.getCurrentVariantKey();\n\t\t\t}\n\t\t}\n\t\treturn chartState;\n\t}\n\n\t/**\n\t * Applies the legacy state to the chart based on the provided control state retrieval function.\n\t * @param getControlState Function to retrieve the control state.\n\t * @param [_navParameters] Optional navigation parameters.\n\t * @param [shouldApplyDiffState] Flag indicating whether to apply the diff state.\n\t * @returns - A promise that resolves when the state has been applied.\n\t */\n\tasync applyLegacyState(\n\t\tgetControlState: (control: ManagedObject) => ControlState,\n\t\t_navParameters?: NavigationParameter,\n\t\tshouldApplyDiffState?: boolean\n\t): Promise<void> {\n\t\tconst chart = this.content;\n\t\tconst vm = chart.getVariant();\n\n\t\tconst chartState = getControlState(chart) as { initialState?: ChartState; fullState?: ChartState };\n\t\tconst vmState = vm ? getControlState(vm) : null;\n\n\t\tconst controlState: ChartState = {};\n\n\t\tif (chartState) {\n\t\t\tcontrolState.innerChart = {\n\t\t\t\t...controlState.innerChart,\n\t\t\t\t...chartState,\n\t\t\t\tfullState: {\n\t\t\t\t\t...controlState.innerChart?.fullState,\n\t\t\t\t\t...chartState.fullState\n\t\t\t\t},\n\t\t\t\tinitialState: {\n\t\t\t\t\t...controlState.innerChart?.initialState,\n\t\t\t\t\t...chartState.initialState\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tif (vmState?.variantId) {\n\t\t\tcontrolState.variantManagement = {\n\t\t\t\t...controlState.variantManagement,\n\t\t\t\tvariantId: vmState.variantId.toString()\n\t\t\t};\n\t\t}\n\n\t\tif (controlState && Object.keys(controlState).length > 0) {\n\t\t\tawait this.applyState(controlState as ControlState, _navParameters, shouldApplyDiffState);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the application of a variant ID passed via URL parameters.\n\t * @returns A promise that resolves when the variant has been applied.\n\t */\n\tasync handleVariantIdPassedViaURLParams(): Promise<unknown> {\n\t\tconst urlParams = this.getStartupParameters();\n\t\tconst chartVariantId = urlParams?.[\"sap-ui-fe-chart-variant-id\"]?.[0];\n\t\tconst view = CommonUtils.getTargetView(this);\n\t\tconst viewData = view.getViewData();\n\t\tconst vmType = viewData.variantManagement;\n\t\tconst vm = (this.getContent() as MDCChart)?.getVariant();\n\t\tif (vm && chartVariantId && vmType === \"Control\") {\n\t\t\tconst variantToApply = vm.getVariants().find((variant) => variant.getKey() === chartVariantId);\n\t\t\tconst ControlVariantApplyAPI = (await import(\"sap/ui/fl/apply/api/ControlVariantApplyAPI\")).default;\n\t\t\treturn ControlVariantApplyAPI.activateVariant({\n\t\t\t\telement: vm,\n\t\t\t\tvariantReference: variantToApply?.getKey()\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the startup parameters from the application component data.\n\t * These parameters contain URL query parameters that were passed when the application was started.\n\t * @returns The startup parameters as a key-value mapping where each key can have multiple values,\n\t *          or undefined if no parameters are available or if the component chain is not accessible.\n\t */\n\tgetStartupParameters(): Record<string, string[]> | undefined {\n\t\tconst controller = this.getPageController();\n\t\tconst appComponent = controller?.getAppComponent();\n\t\tconst componentData = appComponent?.getComponentData();\n\t\treturn componentData?.startupParameters as unknown as Record<string, string[]>;\n\t}\n\n\t/**\n\t * Asynchronously applies navigation parameters to the chart.\n\t * @param navigationParameter The navigation parameters to be applied.\n\t * @returns A promise that resolves when the parameters have been applied.\n\t */\n\tasync applyNavigationParameters(navigationParameter: NavigationParameter): Promise<void> {\n\t\ttry {\n\t\t\t// Only handle variant ID from URL parameters if applyVariantFromURLParams is true\n\t\t\tif (navigationParameter.applyVariantFromURLParams ?? false) {\n\t\t\t\tawait this.handleVariantIdPassedViaURLParams();\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\n\t\t\t\t`Error trying to apply navigation parameters to ${this.getMetadata().getName()} control with ID: ${this.getId()}`,\n\t\t\t\terror as Error\n\t\t\t);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Asynchronously applies the provided control state to the viewstate.\n\t * @param controlState The state to be applied to the control.\n\t * @param [_navParameters] Optional navigation parameters.\n\t * @param [shouldApplyDiffState] Optional flag to skip merging states.\n\t * @returns A promise that resolves when the state has been applied.\n\t */\n\tasync applyState(controlState: ChartState, _navParameters?: NavigationParameter, shouldApplyDiffState?: boolean): Promise<void> {\n\t\tif (!controlState) return;\n\n\t\tconst variantId = controlState.variantManagement?.variantId;\n\t\tconst currentVariant = this.content?.getVariant();\n\n\t\t// Handle Variant Management\n\t\tif (variantId !== undefined && variantId !== currentVariant.getCurrentVariantKey()) {\n\t\t\tconst ovM = this.content?.getVariant();\n\t\t\tconst aVariants = ovM?.getVariants();\n\t\t\tconst sVariantReference = aVariants?.some((oVariant) => oVariant.getKey() === variantId)\n\t\t\t\t? variantId\n\t\t\t\t: ovM?.getStandardVariantKey;\n\t\t\ttry {\n\t\t\t\tconst ControlVariantApplyAPI = (await import(\"sap/ui/fl/apply/api/ControlVariantApplyAPI\")).default;\n\t\t\t\tawait ControlVariantApplyAPI.activateVariant({\n\t\t\t\t\telement: ovM,\n\t\t\t\t\tvariantReference: sVariantReference as string\n\t\t\t\t});\n\t\t\t\tawait this.setInitialState();\n\t\t\t} catch (error: unknown) {\n\t\t\t\tLog.error(error as string);\n\t\t\t\tawait this.setInitialState();\n\t\t\t}\n\t\t} else {\n\t\t\t// we need to update initial state even if above condition not satisfied\n\t\t\tawait this.setInitialState();\n\t\t}\n\n\t\t// Handle Inner Chart State\n\t\tconst innerChartState = controlState.innerChart;\n\t\tlet finalState;\n\n\t\tif (innerChartState) {\n\t\t\tif (shouldApplyDiffState && innerChartState.initialState) {\n\t\t\t\tfinalState = await StateUtil.diffState(\n\t\t\t\t\tthis.content,\n\t\t\t\t\tinnerChartState.initialState as object,\n\t\t\t\t\tinnerChartState.fullState as object\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tfinalState = innerChartState.fullState;\n\t\t\t}\n\t\t\tawait StateUtil.applyExternalState(this.content, finalState);\n\t\t}\n\t}\n\n\t/**\n\t * Called by the MDC state util when the state for this control's child has changed.\n\t */\n\thandleStateChange(): void {\n\t\tthis.getPageController()?.getExtensionAPI().updateAppState();\n\t}\n\n\t_createContent(): void {\n\t\tconst owner = this._getOwner();\n\t\tif (owner?.isA<TemplateComponent>(\"sap.fe.core.TemplateComponent\")) {\n\t\t\t// We need to remove the current filter from the old (to be destroyed) Chart instance because if we don't then for some strange reason, the old Chart instance used to\n\t\t\t// react for filter bar action, for example, on Click of Go.\n\t\t\tthis.content.setFilter(\"\");\n\t\t\tthis.content.destroy();\n\t\t\tthis.content = this.createContent();\n\t\t}\n\t}\n\n\tsetProperty(key: string, value: string, suppressInvalidate?: boolean): this {\n\t\tif (!this._applyingSettings && value !== undefined && Object.keys(this.getMetadata().getProperties()).includes(key)) {\n\t\t\tsuper.setProperty(key, value, true);\n\t\t\tthis._createContent();\n\t\t} else {\n\t\t\tsuper.setProperty(key, value, suppressInvalidate);\n\t\t}\n\t\treturn this;\n\t}\n\n\tremoveAggregation(name: string, value: ManagedObject | number | string, suppressInvalidate?: boolean): ManagedObject | null {\n\t\tlet removed: ManagedObject | null;\n\t\tif (!this._applyingSettings && value !== undefined && Object.keys(this.getMetadata().getAggregations()).includes(name)) {\n\t\t\tremoved = super.removeAggregation(name, value, suppressInvalidate);\n\t\t\tthis._createContent();\n\t\t} else {\n\t\t\tremoved = super.removeAggregation(name, value, suppressInvalidate);\n\t\t}\n\t\treturn removed;\n\t}\n\n\taddAggregation(name: string, value: ManagedObject, suppressInvalidate?: boolean): this {\n\t\tif (!this._applyingSettings && Object.keys(this.getMetadata().getAggregations()).includes(name)) {\n\t\t\tsuper.addAggregation(name, value, suppressInvalidate);\n\t\t\tthis._createContent();\n\t\t} else {\n\t\t\tsuper.addAggregation(name, value, suppressInvalidate);\n\t\t}\n\t\treturn this;\n\t}\n\n\tinsertAggregation(name: string, value: ManagedObject, index: number, suppressInvalidate?: boolean): this {\n\t\tif (!this._applyingSettings && Object.keys(this.getMetadata().getAggregations()).includes(name)) {\n\t\t\tsuper.insertAggregation(name, value, index, suppressInvalidate);\n\t\t\tthis._createContent();\n\t\t} else {\n\t\t\tsuper.insertAggregation(name, value, index, suppressInvalidate);\n\t\t}\n\t\treturn this;\n\t}\n\n\tcreateContent(): MDCChart {\n\t\tif (this.contextPath) {\n\t\t\tthis._resolvedContextPath = this.contextPath.endsWith(\"/\") ? this.contextPath : this.contextPath + \"/\";\n\t\t}\n\n\t\treturn getMdcChartTemplate(\n\t\t\tthis,\n\t\t\tthis._getOwner()?.getRootController()?.getView().getViewData() ?? (this._getOwner()?.getViewData() as unknown as ViewData),\n\t\t\tthis.getAppComponent()?.getDiagnostics() ?? ({} as Diagnostics),\n\t\t\tthis.getDataModelObjectForMetaPath<ChartContextObjectPath>(this.metaPath, this._resolvedContextPath)!\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}