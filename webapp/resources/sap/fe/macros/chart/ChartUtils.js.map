{"version":3,"file":"ChartUtils.js","names":["ChartUtils","getChartSelections","oMdcChart","bClearSelections","this","getChartModel","aVizSelections","getChartFilters","aFilters","Filter","setChartFilters","oDrillStack","oChart","getControlDelegate","getInnerChart","aChartFilters","aVisibleDimensions","addChartFilters","aSelectedData","item","aDimFilters","i","sPath","sValue","data","undefined","push","path","operator","FilterOperator","EQ","value1","length","getVizSelection","getVisibleDimensions","aDimensions","getDimensionsFromDrillStack","toString","aDrillStackKeys","Object","keys","aPrevDrillStackData","getFilterBarFilterInfo","FilterUtil","getFilterInfo","getFilter","targetControl","getAllFilterInfo","oFilters","aP13nProperties","Utils","getP13nFilters","selectionPresentationVariantPath","CommonHelper","parseCustomData","aSelctionVariant","CommonUtils","getFiltersFromAnnotation","getFilters","filters","forEach","element","filterValue","getChartSelectedData","aSelectedPoints","getSelectionBehavior","getSelectedDataPoints","dataPoints","getSelectedCategories","categories","getSelectedSeries","series","vData","oInternalModelContext","getBindingContext","setProperty","getObject","aCurrentDrillStack","getDrillStack","aCurrentDrillView","pop","dimension","_getVizFrame","vizSelection"],"sources":["./ChartUtils.ts"],"sourcesContent":["import type Chart from \"sap/chart/Chart\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport FilterUtil from \"sap/fe/macros/filter/FilterUtils\";\nimport type MDCChart from \"sap/ui/mdc/Chart\";\nimport type ChartDelegate from \"sap/ui/mdc/ChartDelegate\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport CommonHelper from \"../CommonHelper\";\n\nimport type { InternalBindingInfo } from \"../table/Utils\";\nimport Utils from \"../table/Utils\";\n\ntype VizSelection = { data: Record<string, unknown> };\n\nconst ChartUtils = {\n\t/**\n\t * Method that returns the chart filters stored in the UI model.\n\t * @param oMdcChart The MDC_Chart control\n\t * @param bClearSelections Clears chart selections in the UI model if true\n\t * @returns The chart selections\n\t */\n\tgetChartSelections: function (oMdcChart: MDCChart, bClearSelections?: boolean): unknown {\n\t\t// get chart selections\n\t\tif (bClearSelections) {\n\t\t\tthis.getChartModel(oMdcChart, \"\", {});\n\t\t}\n\t\tconst aVizSelections = this.getChartModel(oMdcChart, \"filters\");\n\t\treturn aVizSelections || [];\n\t},\n\t/**\n\t * Method that returns the chart selections as a filter.\n\t * @param oMdcChart The MDC_Chart control\n\t * @returns Filter containing chart selections\n\t */\n\tgetChartFilters: function (oMdcChart: MDCChart): Filter {\n\t\t// get chart selections as a filter\n\t\tconst aFilters = this.getChartSelections(oMdcChart) || [];\n\t\treturn new Filter(aFilters);\n\t},\n\t/**\n\t * Method that sets the chart selections as in the UI model.\n\t * @param oMdcChart The MDC_Chart control\n\t */\n\tsetChartFilters: function (oMdcChart: MDCChart): void {\n\t\t// saving selections in each drill stack for future use\n\t\tconst oDrillStack: Record<string, VizSelection[]> = (this.getChartModel(oMdcChart, \"drillStack\") || {}) as Record<\n\t\t\tstring,\n\t\t\tVizSelection[]\n\t\t>;\n\t\tconst oChart = (oMdcChart.getControlDelegate() as ChartDelegate).getInnerChart(oMdcChart) as Chart & {\n\t\t\t_getVizFrame: () => { vizSelection: () => VizSelection[] };\n\t\t};\n\t\tconst aChartFilters: unknown[] = [];\n\t\tlet aVisibleDimensions: string[];\n\n\t\tfunction addChartFilters(aSelectedData: VizSelection[]): void {\n\t\t\tfor (const item in aSelectedData) {\n\t\t\t\tconst aDimFilters = [];\n\t\t\t\tfor (const i in aVisibleDimensions) {\n\t\t\t\t\tconst sPath = aVisibleDimensions[i];\n\t\t\t\t\tconst sValue = aSelectedData[item].data[sPath];\n\t\t\t\t\tif (sValue !== undefined) {\n\t\t\t\t\t\taDimFilters.push(\n\t\t\t\t\t\t\tnew Filter({\n\t\t\t\t\t\t\t\tpath: sPath,\n\t\t\t\t\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\t\t\t\t\tvalue1: sValue\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (aDimFilters.length > 0) {\n\t\t\t\t\taChartFilters.push(new Filter(aDimFilters, true));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (oChart) {\n\t\t\tconst aVizSelections = this.getVizSelection(oChart);\n\t\t\taVisibleDimensions = oChart.getVisibleDimensions();\n\t\t\tconst aDimensions = this.getDimensionsFromDrillStack(oChart);\n\t\t\tif (aDimensions.length > 0) {\n\t\t\t\tthis.getChartModel(oMdcChart, \"drillStack\", {});\n\t\t\t\toDrillStack[aDimensions.toString()] = aVizSelections;\n\t\t\t\tthis.getChartModel(oMdcChart, \"drillStack\", oDrillStack);\n\t\t\t}\n\t\t\tif (aVizSelections.length > 0) {\n\t\t\t\t// creating filters with selections in the current drillstack\n\t\t\t\taddChartFilters(aVizSelections);\n\t\t\t} else {\n\t\t\t\t// creating filters with selections in the previous drillstack when there are no selections in the current drillstack\n\t\t\t\tconst aDrillStackKeys = Object.keys(oDrillStack) || [];\n\t\t\t\tconst aPrevDrillStackData = oDrillStack[aDrillStackKeys[aDrillStackKeys.length - 2]] || [];\n\t\t\t\taddChartFilters(aPrevDrillStackData);\n\t\t\t}\n\t\t\tthis.getChartModel(oMdcChart, \"filters\", aChartFilters);\n\t\t}\n\t},\n\t/**\n\t * Method that returns the chart selections as a filter.\n\t * @param oChart The inner chart control\n\t * @returns The filters in the filter bar\n\t */\n\tgetFilterBarFilterInfo: function (oChart: MDCChart): InternalBindingInfo {\n\t\treturn FilterUtil.getFilterInfo(oChart.getFilter(), {\n\t\t\ttargetControl: oChart\n\t\t});\n\t},\n\t/**\n\t * Method that returns the filters for the chart and filter bar.\n\t * @param oChart The inner chart control\n\t * @returns The new filter containing the filters for both the chart and the filter bar\n\t */\n\tgetAllFilterInfo: function (oChart: MDCChart): InternalBindingInfo {\n\t\tconst oFilters = this.getFilterBarFilterInfo(oChart);\n\t\tconst aChartFilters = this.getChartFilters(oChart);\n\t\t// Get filters added through personalization dialog filter option\n\t\tconst aP13nProperties = Utils.getP13nFilters(oChart);\n\t\t// Retrieve selection presentation variant path from custom data\n\t\tconst selectionPresentationVariantPath = CommonHelper.parseCustomData(oChart.data(\"selectionPresentationVariantPath\"))\n\t\t\t? (CommonHelper.parseCustomData(oChart.data(\"selectionPresentationVariantPath\")) as { data?: string }).data\n\t\t\t: \"\";\n\t\t// Check if SV is present in SPV, if yes get the Sv values\n\t\tconst aSelctionVariant = selectionPresentationVariantPath\n\t\t\t? CommonUtils.getFiltersFromAnnotation(oChart, selectionPresentationVariantPath)\n\t\t\t: null;\n\n\t\tif (aChartFilters && aChartFilters.getFilters()?.length) {\n\t\t\toFilters.filters.push(aChartFilters);\n\t\t}\n\n\t\tif (aP13nProperties.length > 0) {\n\t\t\taP13nProperties.forEach((element) => {\n\t\t\t\tconst filters = element.getFilters();\n\t\t\t\tif (filters?.length && filters?.length > 0) {\n\t\t\t\t\t// if we filter using more than one field\n\t\t\t\t\tfilters.forEach((filterValue) => {\n\t\t\t\t\t\toFilters.filters.push(filterValue);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// if we filter using only one field\n\t\t\t\t\toFilters.filters.push(element);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (aSelctionVariant && aSelctionVariant.length > 0) {\n\t\t\taSelctionVariant.forEach((filterValue) => {\n\t\t\t\toFilters.filters.push((filterValue as unknown as { aFilters: Filter[] }).aFilters[0]);\n\t\t\t});\n\t\t}\n\n\t\treturn oFilters;\n\t},\n\n\t/**\n\t * Method that returns selected data in the chart.\n\t * @param oChart The inner chart control\n\t * @returns The selected chart data\n\t */\n\tgetChartSelectedData: function (oChart: Chart): { context: ODataV4Context }[] {\n\t\tlet aSelectedPoints: { context: ODataV4Context }[] = [];\n\t\t// eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n\t\tswitch (oChart.getSelectionBehavior()) {\n\t\t\tcase \"DATAPOINT\":\n\t\t\t\taSelectedPoints = (oChart.getSelectedDataPoints() as { dataPoints: { context: ODataV4Context }[] }).dataPoints;\n\t\t\t\tbreak;\n\t\t\tcase \"CATEGORY\":\n\t\t\t\taSelectedPoints = (oChart.getSelectedCategories() as { categories: { context: ODataV4Context }[] }).categories;\n\t\t\t\tbreak;\n\t\t\tcase \"SERIES\":\n\t\t\t\taSelectedPoints = (oChart.getSelectedSeries() as { series: { context: ODataV4Context }[] }).series;\n\t\t\t\tbreak;\n\t\t}\n\t\treturn aSelectedPoints;\n\t},\n\t/**\n\t * Method to get filters, drillstack and selected contexts in the UI model.\n\t * Can also be used to set data in the model.\n\t * @param oMdcChart The MDC_Chart control\n\t * @param sPath The path in the UI model from which chart data is to be set/fetched\n\t * @param vData The chart info to be set\n\t * @returns The chart info (filters/drillstack/selectedContexts)\n\t */\n\tgetChartModel: function (oMdcChart: MDCChart, sPath: string, vData?: object | unknown[]): boolean | unknown {\n\t\tconst oInternalModelContext = oMdcChart.getBindingContext(\"internal\") as InternalModelContext;\n\t\tif (!oInternalModelContext) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (vData) {\n\t\t\toInternalModelContext.setProperty(sPath, vData);\n\t\t}\n\t\treturn oInternalModelContext && oInternalModelContext.getObject(sPath);\n\t},\n\t/**\n\t * Method to fetch the current drillstack dimensions.\n\t * @param oChart The inner chart control\n\t * @returns The current drillstack dimensions\n\t */\n\tgetDimensionsFromDrillStack: function (oChart: Chart): string[] {\n\t\tconst aCurrentDrillStack = oChart.getDrillStack() || [];\n\t\tconst aCurrentDrillView = (aCurrentDrillStack.pop() || {}) as { dimension: string[] };\n\t\treturn aCurrentDrillView.dimension || [];\n\t},\n\t/**\n\t * Method to fetch chart selections.\n\t * @param oChart The inner chart control\n\t * @returns The chart selections\n\t */\n\tgetVizSelection: function (oChart: Chart & { _getVizFrame: () => { vizSelection: () => VizSelection[] } }): VizSelection[] {\n\t\treturn (oChart && oChart._getVizFrame() && oChart._getVizFrame().vizSelection()) || [];\n\t}\n};\n\nexport default ChartUtils;\n"],"mappings":"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","ignoreList":[]}