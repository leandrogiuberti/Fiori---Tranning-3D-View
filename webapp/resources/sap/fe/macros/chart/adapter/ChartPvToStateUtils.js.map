{"version":3,"file":"ChartPvToStateUtils.js","names":["PresentationVariantToStateUtilsPV","convertPvToStateUtilPv","presentationVariant","existingPresentationVariant","propertiesInfo","visChart","getChartVisualization","properties","getProperties","currentVisChart","currentProperties","sorters","items","_overrideExistingSorters","SortOrder","_overrideExistingItems","supplementaryConfig","chartType","_getCharsAfterSlashInLowerCase","Content","ChartType","str","undefined","split","toLowerCase","_getPropertyNameWithPrefix","propertyName","propertyNameWithPrefix","chartProperty","name","includes","existingSorters","sorterPropertyNames","newSorters","map","sorter","push","Property","descending","Descending","key","existingSortersRes","filter","sorted","finalItemsMeasures","_overrideExistingItemsMeasures","finalItemsDimensions","_overrideExistingItemsDimensions","itemsMeasuresPropertyNames","itemsMeasures","MeasureAttributes","measure","Measure","role","Role","existingItemsMeasures","visible","itemsDimensionsPropertyNames","itemsDimensions","DimensionAttributes","dimension","Dimension","existingItemsDimensions"],"sources":["./ChartPvToStateUtils.ts"],"sourcesContent":["import type PresentationVariant from \"sap/fe/navigation/PresentationVariant\";\nimport type { SortOrder, VisChartContent, Visualization } from \"sap/fe/navigation/PresentationVariant\";\nimport type { AppState, Items, Sorters } from \"sap/ui/mdc/p13n/StateUtil\";\nimport type { PropertyInfo } from \"../../DelegateUtil\";\n\nconst PresentationVariantToStateUtilsPV = {\n\t/**\n\t * Get StateUtil PV structure from the supplied Presentation Variant.\n\t * @param presentationVariant Presentation Variant to set\n\t * @param existingPresentationVariant the existing Presentation Variant of the chart to be overridden\n\t * @param propertiesInfo Property infos of the Chart\n\t * @returns StateUtil PresentationVariant format\n\t */\n\n\tconvertPvToStateUtilPv: (\n\t\tpresentationVariant: PresentationVariant,\n\t\texistingPresentationVariant: PresentationVariant,\n\t\tpropertiesInfo: PropertyInfo[]\n\t): AppState => {\n\t\tconst visChart = presentationVariant.getChartVisualization();\n\t\tconst properties = presentationVariant.getProperties();\n\t\tconst currentVisChart = existingPresentationVariant.getChartVisualization();\n\t\tconst currentProperties = existingPresentationVariant.getProperties();\n\t\tlet sorters: Sorters[] = [];\n\t\tlet items: Items[] = [];\n\n\t\tsorters = PresentationVariantToStateUtilsPV._overrideExistingSorters(\n\t\t\tproperties?.SortOrder ?? [],\n\t\t\tcurrentProperties?.SortOrder ?? [],\n\t\t\tpropertiesInfo ?? []\n\t\t);\n\t\titems = PresentationVariantToStateUtilsPV._overrideExistingItems(visChart, currentVisChart);\n\n\t\treturn {\n\t\t\titems,\n\t\t\tsorters,\n\t\t\tsupplementaryConfig: {\n\t\t\t\tproperties: {\n\t\t\t\t\tchartType: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(\n\t\t\t\t\t\t(visChart?.Content as VisChartContent)?.ChartType\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * Method to return suffix after forward slash in lower case.\n\t * @param str input string\n\t * @returns The string containing suffix after slash.\n\t */\n\n\t_getCharsAfterSlashInLowerCase: (str: string | undefined): string | undefined => {\n\t\tif (str == undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn str.split(\"/\")[1].toLowerCase();\n\t},\n\t/**\n\t * Method to add prefix to chart properties based on role.\n\t * @param propertyName string\n\t * @param propertiesInfo propertiesInfo of the chart\n\t * @returns propertyName with prefix added\n\t */\n\n\t_getPropertyNameWithPrefix: (propertyName: string, propertiesInfo: PropertyInfo[]): string => {\n\t\tlet propertyNameWithPrefix: string | undefined;\n\t\tfor (const chartProperty of propertiesInfo) {\n\t\t\tpropertyNameWithPrefix = chartProperty.name;\n\t\t\tif (propertyNameWithPrefix?.includes(propertyName)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn propertyNameWithPrefix ?? propertyName;\n\t},\n\t/**\n\t * Method to return list of Sorters for StateUtils by overriding existing sorters.\n\t * @param sorters sorters in the applied Presentation Variant\n\t * @param existingSorters existing sorters in the chart\n\t * @param propertiesInfo propertiesInfo of the chart\n\t * @returns list of sorter objects for stateUtils\n\t */\n\n\t_overrideExistingSorters: (sorters: SortOrder[], existingSorters: SortOrder[], propertiesInfo: PropertyInfo[]): Sorters[] => {\n\t\tconst sorterPropertyNames: string[] = [];\n\t\tconst newSorters = sorters.map((sorter) => {\n\t\t\tsorterPropertyNames.push(sorter.Property);\n\t\t\treturn {\n\t\t\t\tdescending: sorter.Descending,\n\t\t\t\tkey: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo),\n\t\t\t\tname: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo)\n\t\t\t};\n\t\t});\n\t\tconst existingSortersRes = existingSorters\n\t\t\t.filter((sorter) => !sorterPropertyNames.includes(sorter.Property))\n\t\t\t.map((sorter) => ({\n\t\t\t\tdescending: sorter.Descending,\n\t\t\t\tkey: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo),\n\t\t\t\tname: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo),\n\t\t\t\tsorted: false\n\t\t\t}));\n\t\treturn [...newSorters, ...existingSortersRes];\n\t},\n\t/**\n\t * Method to return Items aggregation for StateUtils by overriding existing items both measures and dimensions.\n\t * @param visChart visualization for chart to be set\n\t * @param currentVisChart visualization for existing chart\n\t * @returns aggregated items in stateUtils structure\n\t */\n\n\t_overrideExistingItems: (visChart: Visualization | undefined, currentVisChart: Visualization | undefined): Items[] => {\n\t\tconst finalItemsMeasures = PresentationVariantToStateUtilsPV._overrideExistingItemsMeasures(visChart, currentVisChart);\n\t\tconst finalItemsDimensions = PresentationVariantToStateUtilsPV._overrideExistingItemsDimensions(visChart, currentVisChart);\n\n\t\treturn [...finalItemsMeasures, ...finalItemsDimensions];\n\t},\n\n\t/**\n\t * Method to return Items aggregation for StateUtils by overriding existing items measures.\n\t * @param visChart visualization for chart to be set\n\t * @param currentVisChart visualization for existing chart\n\t * @returns aggregated items in stateUtils structure\n\t */\n\n\t_overrideExistingItemsMeasures: (visChart: Visualization | undefined, currentVisChart: Visualization | undefined): Items[] => {\n\t\tconst itemsMeasuresPropertyNames: string[] = [];\n\t\tconst itemsMeasures =\n\t\t\t(visChart?.Content as VisChartContent)?.MeasureAttributes.map((measure) => {\n\t\t\t\titemsMeasuresPropertyNames.push(measure.Measure);\n\t\t\t\treturn {\n\t\t\t\t\tname: \"_fe_aggregatable_\" + measure.Measure,\n\t\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(measure.Role)\n\t\t\t\t};\n\t\t\t}) ?? [];\n\t\tconst existingItemsMeasures =\n\t\t\t(currentVisChart?.Content as VisChartContent)?.MeasureAttributes.filter(\n\t\t\t\t(measure) => !itemsMeasuresPropertyNames.includes(measure.Measure)\n\t\t\t).map((measure) => ({\n\t\t\t\tname: \"_fe_aggregatable_\" + measure.Measure,\n\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(measure.Role),\n\t\t\t\tvisible: false\n\t\t\t})) ?? [];\n\n\t\treturn [...itemsMeasures, ...existingItemsMeasures];\n\t},\n\n\t/**\n\t * Method to return Items aggregation for StateUtils by overriding existing items dimensions.\n\t * @param visChart visualization for chart to be set\n\t * @param currentVisChart visualization for existing chart\n\t * @returns aggregated items in stateUtils structure\n\t */\n\n\t_overrideExistingItemsDimensions: (visChart: Visualization | undefined, currentVisChart: Visualization | undefined): Items[] => {\n\t\tconst itemsDimensionsPropertyNames: string[] = [];\n\t\tconst itemsDimensions =\n\t\t\t(visChart?.Content as VisChartContent)?.DimensionAttributes.map((dimension) => {\n\t\t\t\titemsDimensionsPropertyNames.push(dimension.Dimension);\n\t\t\t\treturn {\n\t\t\t\t\tname: \"_fe_groupable_\" + dimension.Dimension,\n\t\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(dimension.Role)\n\t\t\t\t};\n\t\t\t}) ?? [];\n\t\tconst existingItemsDimensions =\n\t\t\t(currentVisChart?.Content as VisChartContent)?.DimensionAttributes.filter(\n\t\t\t\t(dimension) => !itemsDimensionsPropertyNames.includes(dimension.Dimension)\n\t\t\t).map((dimension) => ({\n\t\t\t\tname: \"_fe_groupable_\" + dimension.Dimension,\n\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(dimension.Role),\n\t\t\t\tvisible: false\n\t\t\t})) ?? [];\n\n\t\treturn [...itemsDimensions, ...existingItemsDimensions];\n\t}\n};\n\nexport default {\n\tconvertPvToStateUtilPv: PresentationVariantToStateUtilsPV.convertPvToStateUtilPv\n};\n"],"mappings":"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","ignoreList":[]}