{"version":3,"names":["PresentationVariantToStateUtilsPV","convertPvToStateUtilPv","presentationVariant","existingPresentationVariant","propertiesInfo","visChart","getChartVisualization","properties","getProperties","currentVisChart","currentProperties","sorters","items","_overrideExistingSorters","SortOrder","_overrideExistingItems","supplementaryConfig","chartType","_getCharsAfterSlashInLowerCase","Content","ChartType","str","undefined","split","toLowerCase","_getPropertyNameWithPrefix","propertyName","propertyNameWithPrefix","chartProperty","name","includes","existingSorters","sorterPropertyNames","newSorters","map","sorter","push","Property","descending","Descending","key","existingSortersRes","filter","sorted","finalItemsMeasures","_overrideExistingItemsMeasures","finalItemsDimensions","_overrideExistingItemsDimensions","itemsMeasuresPropertyNames","itemsMeasures","MeasureAttributes","measure","Measure","role","Role","existingItemsMeasures","visible","itemsDimensionsPropertyNames","itemsDimensions","DimensionAttributes","dimension","Dimension","existingItemsDimensions"],"sourceRoot":".","sources":["ChartPvToStateUtils.ts"],"sourcesContent":["import type PresentationVariant from \"sap/fe/navigation/PresentationVariant\";\nimport type { SortOrder, VisChartContent, Visualization } from \"sap/fe/navigation/PresentationVariant\";\nimport type { AppState, Items, Sorters } from \"sap/ui/mdc/p13n/StateUtil\";\nimport type { PropertyInfo } from \"../../DelegateUtil\";\n\nconst PresentationVariantToStateUtilsPV = {\n\t/**\n\t * Get StateUtil PV structure from the supplied Presentation Variant.\n\t * @param presentationVariant Presentation Variant to set\n\t * @param existingPresentationVariant the existing Presentation Variant of the chart to be overridden\n\t * @param propertiesInfo Property infos of the Chart\n\t * @returns StateUtil PresentationVariant format\n\t */\n\n\tconvertPvToStateUtilPv: (\n\t\tpresentationVariant: PresentationVariant,\n\t\texistingPresentationVariant: PresentationVariant,\n\t\tpropertiesInfo: PropertyInfo[]\n\t): AppState => {\n\t\tconst visChart = presentationVariant.getChartVisualization();\n\t\tconst properties = presentationVariant.getProperties();\n\t\tconst currentVisChart = existingPresentationVariant.getChartVisualization();\n\t\tconst currentProperties = existingPresentationVariant.getProperties();\n\t\tlet sorters: Sorters[] = [];\n\t\tlet items: Items[] = [];\n\n\t\tsorters = PresentationVariantToStateUtilsPV._overrideExistingSorters(\n\t\t\tproperties?.SortOrder ?? [],\n\t\t\tcurrentProperties?.SortOrder ?? [],\n\t\t\tpropertiesInfo ?? []\n\t\t);\n\t\titems = PresentationVariantToStateUtilsPV._overrideExistingItems(visChart, currentVisChart);\n\n\t\treturn {\n\t\t\titems,\n\t\t\tsorters,\n\t\t\tsupplementaryConfig: {\n\t\t\t\tproperties: {\n\t\t\t\t\tchartType: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(\n\t\t\t\t\t\t(visChart?.Content as VisChartContent)?.ChartType\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t},\n\n\t/**\n\t * Method to return suffix after forward slash in lower case.\n\t * @param str input string\n\t * @returns The string containing suffix after slash.\n\t */\n\n\t_getCharsAfterSlashInLowerCase: (str: string | undefined): string | undefined => {\n\t\tif (str == undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn str.split(\"/\")[1].toLowerCase();\n\t},\n\t/**\n\t * Method to add prefix to chart properties based on role.\n\t * @param propertyName string\n\t * @param propertiesInfo propertiesInfo of the chart\n\t * @returns propertyName with prefix added\n\t */\n\n\t_getPropertyNameWithPrefix: (propertyName: string, propertiesInfo: PropertyInfo[]): string => {\n\t\tlet propertyNameWithPrefix: string | undefined;\n\t\tfor (const chartProperty of propertiesInfo) {\n\t\t\tpropertyNameWithPrefix = chartProperty.name;\n\t\t\tif (propertyNameWithPrefix?.includes(propertyName)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn propertyNameWithPrefix ?? propertyName;\n\t},\n\t/**\n\t * Method to return list of Sorters for StateUtils by overriding existing sorters.\n\t * @param sorters sorters in the applied Presentation Variant\n\t * @param existingSorters existing sorters in the chart\n\t * @param propertiesInfo propertiesInfo of the chart\n\t * @returns list of sorter objects for stateUtils\n\t */\n\n\t_overrideExistingSorters: (sorters: SortOrder[], existingSorters: SortOrder[], propertiesInfo: PropertyInfo[]): Sorters[] => {\n\t\tconst sorterPropertyNames: string[] = [];\n\t\tconst newSorters = sorters.map((sorter) => {\n\t\t\tsorterPropertyNames.push(sorter.Property);\n\t\t\treturn {\n\t\t\t\tdescending: sorter.Descending,\n\t\t\t\tkey: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo),\n\t\t\t\tname: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo)\n\t\t\t};\n\t\t});\n\t\tconst existingSortersRes = existingSorters\n\t\t\t.filter((sorter) => !sorterPropertyNames.includes(sorter.Property))\n\t\t\t.map((sorter) => ({\n\t\t\t\tdescending: sorter.Descending,\n\t\t\t\tkey: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo),\n\t\t\t\tname: PresentationVariantToStateUtilsPV._getPropertyNameWithPrefix(sorter.Property, propertiesInfo),\n\t\t\t\tsorted: false\n\t\t\t}));\n\t\treturn [...newSorters, ...existingSortersRes];\n\t},\n\t/**\n\t * Method to return Items aggregation for StateUtils by overriding existing items both measures and dimensions.\n\t * @param visChart visualization for chart to be set\n\t * @param currentVisChart visualization for existing chart\n\t * @returns aggregated items in stateUtils structure\n\t */\n\n\t_overrideExistingItems: (visChart: Visualization | undefined, currentVisChart: Visualization | undefined): Items[] => {\n\t\tconst finalItemsMeasures = PresentationVariantToStateUtilsPV._overrideExistingItemsMeasures(visChart, currentVisChart);\n\t\tconst finalItemsDimensions = PresentationVariantToStateUtilsPV._overrideExistingItemsDimensions(visChart, currentVisChart);\n\n\t\treturn [...finalItemsMeasures, ...finalItemsDimensions];\n\t},\n\n\t/**\n\t * Method to return Items aggregation for StateUtils by overriding existing items measures.\n\t * @param visChart visualization for chart to be set\n\t * @param currentVisChart visualization for existing chart\n\t * @returns aggregated items in stateUtils structure\n\t */\n\n\t_overrideExistingItemsMeasures: (visChart: Visualization | undefined, currentVisChart: Visualization | undefined): Items[] => {\n\t\tconst itemsMeasuresPropertyNames: string[] = [];\n\t\tconst itemsMeasures =\n\t\t\t(visChart?.Content as VisChartContent)?.MeasureAttributes.map((measure) => {\n\t\t\t\titemsMeasuresPropertyNames.push(measure.Measure);\n\t\t\t\treturn {\n\t\t\t\t\tname: \"_fe_aggregatable_\" + measure.Measure,\n\t\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(measure.Role)\n\t\t\t\t};\n\t\t\t}) ?? [];\n\t\tconst existingItemsMeasures =\n\t\t\t(currentVisChart?.Content as VisChartContent)?.MeasureAttributes.filter(\n\t\t\t\t(measure) => !itemsMeasuresPropertyNames.includes(measure.Measure)\n\t\t\t).map((measure) => ({\n\t\t\t\tname: \"_fe_aggregatable_\" + measure.Measure,\n\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(measure.Role),\n\t\t\t\tvisible: false\n\t\t\t})) ?? [];\n\n\t\treturn [...itemsMeasures, ...existingItemsMeasures];\n\t},\n\n\t/**\n\t * Method to return Items aggregation for StateUtils by overriding existing items dimensions.\n\t * @param visChart visualization for chart to be set\n\t * @param currentVisChart visualization for existing chart\n\t * @returns aggregated items in stateUtils structure\n\t */\n\n\t_overrideExistingItemsDimensions: (visChart: Visualization | undefined, currentVisChart: Visualization | undefined): Items[] => {\n\t\tconst itemsDimensionsPropertyNames: string[] = [];\n\t\tconst itemsDimensions =\n\t\t\t(visChart?.Content as VisChartContent)?.DimensionAttributes.map((dimension) => {\n\t\t\t\titemsDimensionsPropertyNames.push(dimension.Dimension);\n\t\t\t\treturn {\n\t\t\t\t\tname: \"_fe_groupable_\" + dimension.Dimension,\n\t\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(dimension.Role)\n\t\t\t\t};\n\t\t\t}) ?? [];\n\t\tconst existingItemsDimensions =\n\t\t\t(currentVisChart?.Content as VisChartContent)?.DimensionAttributes.filter(\n\t\t\t\t(dimension) => !itemsDimensionsPropertyNames.includes(dimension.Dimension)\n\t\t\t).map((dimension) => ({\n\t\t\t\tname: \"_fe_groupable_\" + dimension.Dimension,\n\t\t\t\trole: PresentationVariantToStateUtilsPV._getCharsAfterSlashInLowerCase(dimension.Role),\n\t\t\t\tvisible: false\n\t\t\t})) ?? [];\n\n\t\treturn [...itemsDimensions, ...existingItemsDimensions];\n\t}\n};\n\nexport default {\n\tconvertPvToStateUtilPv: PresentationVariantToStateUtilsPV.convertPvToStateUtilPv\n};\n"],"mappings":"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","ignoreList":[],"file":"ChartPvToStateUtils-dbg.js"}