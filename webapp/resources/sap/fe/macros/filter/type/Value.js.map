{"version":3,"file":"Value.js","names":["Value","_dec","defineUI5Class","_class","_Value","_SimpleType","formatOptions","constraints","_this","call","this","operatorName","operator","getDefaultOperatorName","FilterOperatorUtil","getOperator","undefined","includes","operatorConfig","getOperatorConfig","registerCustomOperator","_exports","_inheritsLoose","_proto","prototype","name","FilterOperatorUtils","registerCustomOperators","then","operators","Log","error","catch","_isMultiValueOperator","valueTypes","filter","valueType","OPERATOR_VALUE_TYPE_STATIC","length","hasCustomOperator","_stringToExternal","value","externalValueType","externalValue","externalType","_getTypeInstance","_isArrayType","Array","isArray","map","valueElement","parseValue","INTERNAL_VALUE_TYPE","targetType","endsWith","externalToString","formatValue","typeName","getElementTypeName","StringType","IntegerType","FloatType","DateType","BooleanType","Error","getEQOperator","substring","internalValue","isMultiValueOperator","internalType","values","parse","FieldDisplay","format","validated","validateValue","SimpleType"],"sources":["./Value.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport FilterOperatorUtils from \"sap/fe/macros/filter/FilterOperatorUtils\";\nimport { type CustomFilterOperatorInfo } from \"sap/ui/core/Manifest\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport FilterOperatorUtil from \"sap/ui/mdc/condition/FilterOperatorUtil\";\nimport type Operator from \"sap/ui/mdc/condition/Operator\";\nimport FieldDisplay from \"sap/ui/mdc/enums/FieldDisplay\";\nimport SimpleType from \"sap/ui/model/SimpleType\";\nimport BooleanType from \"sap/ui/model/type/Boolean\";\nimport DateType from \"sap/ui/model/type/Date\";\nimport FloatType from \"sap/ui/model/type/Float\";\nimport IntegerType from \"sap/ui/model/type/Integer\";\nimport StringType from \"sap/ui/model/type/String\";\n/**\n * Handle format/parse of single value filter.\n */\n@defineUI5Class(\"sap.fe.macros.filter.type.Value\")\nexport default class Value extends SimpleType {\n\tprivate static readonly INTERNAL_VALUE_TYPE = \"string\";\n\n\tprivate static readonly OPERATOR_VALUE_TYPE_STATIC = \"static\";\n\n\tpublic operator: Operator;\n\n\t/**\n\t * Creates a new value type instance with the given parameters.\n\t * @param formatOptions Format options for this value type\n\t * @param formatOptions.operator The name of a (possibly custom) operator to use\n\t * @param constraints Constraints for this value type\n\t * @protected\n\t */\n\tconstructor(formatOptions: { operator?: string }, constraints: object) {\n\t\tsuper(formatOptions, constraints);\n\t\tconst operatorName = formatOptions?.operator || this.getDefaultOperatorName();\n\t\tconst operator = FilterOperatorUtil.getOperator(operatorName);\n\t\tthis.operator = operator!;\n\t\tif (this.operator === undefined && operatorName.includes(\".\")) {\n\t\t\tconst operatorConfig = this.getOperatorConfig(operatorName);\n\t\t\tthis.registerCustomOperator(operatorConfig);\n\t\t}\n\t}\n\n\t/**\n\t * Custom Operator Info.\n\t * @param operatorName The binding operator name\n\t * @returns Custom operator info\n\t * @private\n\t */\n\tpublic getOperatorConfig(operatorName: string): CustomFilterOperatorInfo {\n\t\treturn {\n\t\t\tname: operatorName\n\t\t};\n\t}\n\n\t/**\n\t * Registers a custom binding operator.\n\t * @param operatorConfig The operator info\n\t * @private\n\t */\n\tpublic registerCustomOperator(operatorConfig: CustomFilterOperatorInfo): void {\n\t\tFilterOperatorUtils.registerCustomOperators([operatorConfig])\n\t\t\t.then((operators) => {\n\t\t\t\tif (operators[0]) {\n\t\t\t\t\tthis.operator = operators[0];\n\t\t\t\t} else {\n\t\t\t\t\tLog.error(`Failed to register operator: ${operatorConfig.name}`);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(`Failed to register operator: ${operatorConfig.name}`, error as Error | string);\n\t\t\t});\n\t}\n\n\t/**\n\t * Returns whether the specified operator is a multi-value operator.\n\t * @param operator The binding operator\n\t * @returns `true`, if multi-value operator (`false` otherwise)\n\t * @private\n\t */\n\tprivate _isMultiValueOperator(operator: Operator): boolean {\n\t\treturn (\n\t\t\toperator.valueTypes.filter(function (valueType: string) {\n\t\t\t\treturn !!valueType && valueType !== Value.OPERATOR_VALUE_TYPE_STATIC;\n\t\t\t}).length > 1\n\t\t);\n\t}\n\n\t/**\n\t * Returns whether the specified operator is a custom operator.\n\t * @returns `true`, if custom operator (`false` otherwise)\n\t * @private\n\t */\n\tpublic hasCustomOperator(): boolean {\n\t\treturn this.operator.name.includes(\".\");\n\t}\n\n\t/**\n\t * Parses the internal string value to the external value of type 'externalValueType'.\n\t * @param value The internal string value to be parsed\n\t * @param externalValueType The external value type, e.g. int, float[], string, etc.\n\t * @returns The parsed value\n\t * @private\n\t */\n\tprivate _stringToExternal(value: string | string[], externalValueType: string | undefined): string[] {\n\t\tlet externalValue;\n\t\tconst externalType = this._getTypeInstance(externalValueType);\n\n\t\tif (externalValueType && Value._isArrayType(externalValueType)) {\n\t\t\tif (!Array.isArray(value)) {\n\t\t\t\tvalue = [value];\n\t\t\t}\n\t\t\texternalValue = value.map((valueElement: string) => {\n\t\t\t\treturn externalType ? externalType.parseValue(valueElement, Value.INTERNAL_VALUE_TYPE) : valueElement;\n\t\t\t});\n\t\t} else {\n\t\t\texternalValue = externalType ? externalType.parseValue(value as string, Value.INTERNAL_VALUE_TYPE) : value;\n\t\t}\n\n\t\treturn externalValue;\n\t}\n\n\t/**\n\t * Returns whether target type is an array.\n\t * @param targetType The target type name\n\t * @returns `true`, if array type (`false` otherwise)\n\t * @private\n\t */\n\tprivate static _isArrayType(targetType: string): boolean {\n\t\tif (!targetType) {\n\t\t\treturn false;\n\t\t}\n\t\treturn targetType === \"array\" || targetType.endsWith(\"[]\");\n\t}\n\n\t/**\n\t * Returns the external value formatted as the internal string value.\n\t * @param externalValue The value to be parsed\n\t * @param externalValueType The external value type, e.g. int, float[], string, etc.\n\t * @returns The formatted value\n\t * @private\n\t */\n\tpublic externalToString(externalValue: string | string[], externalValueType: string | undefined): string | string[] {\n\t\tlet value;\n\t\tconst externalType = this._getTypeInstance(externalValueType);\n\n\t\tif (externalValueType && Value._isArrayType(externalValueType)) {\n\t\t\tif (!Array.isArray(externalValue)) {\n\t\t\t\texternalValue = [externalValue];\n\t\t\t}\n\t\t\tvalue = externalValue.map((valueElement: string) => {\n\t\t\t\treturn externalType ? externalType.formatValue(valueElement, Value.INTERNAL_VALUE_TYPE) : valueElement;\n\t\t\t});\n\t\t} else {\n\t\t\tvalue = externalType ? externalType.formatValue(externalValue as string, Value.INTERNAL_VALUE_TYPE) : externalValue;\n\t\t}\n\n\t\treturn value;\n\t}\n\n\t/**\n\t * Retrieves the default type instance for given type name.\n\t * @param typeName The name of the type\n\t * @returns The type instance\n\t * @private\n\t */\n\tprivate _getTypeInstance(typeName: string | undefined): SimpleType {\n\t\ttypeName = this.getElementTypeName(typeName) || typeName;\n\n\t\tswitch (typeName) {\n\t\t\tcase \"string\":\n\t\t\t\treturn new StringType();\n\t\t\tcase \"number\":\n\t\t\tcase \"int\":\n\t\t\tcase \"integer\":\n\t\t\t\treturn new IntegerType();\n\t\t\tcase \"float\":\n\t\t\t\treturn new FloatType();\n\t\t\tcase \"date\":\n\t\t\t\treturn new DateType();\n\t\t\tcase \"boolean\":\n\t\t\t\treturn new BooleanType();\n\t\t\tdefault:\n\t\t\t\tLog.error(\"Unexpected filter type\");\n\t\t\t\tthrow new Error(\"Unexpected filter type\");\n\t\t}\n\t}\n\n\t/**\n\t * Returns the default operator name (\"EQ\").\n\t * Should be overridden on demand.\n\t * @returns The default operator name\n\t * @protected\n\t */\n\tgetDefaultOperatorName(): string {\n\t\treturn FilterOperatorUtil.getEQOperator().name;\n\t}\n\n\t/**\n\t * Returns the element type name.\n\t * @param typeName The actual type name\n\t * @returns The type of its elements\n\t * @protected\n\t */\n\tgetElementTypeName(typeName: string | undefined): string | undefined {\n\t\tif (typeName?.endsWith(\"[]\")) {\n\t\t\treturn typeName.substring(0, typeName.length - 2);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Returns the string value parsed to the external value type 'this.operator'.\n\t * @param internalValue The internal string value to be formatted\n\t * @param externalValueType The external value type, e.g. int, float[], string, etc.\n\t * @returns The formatted value\n\t * @protected\n\t */\n\tformatValue(internalValue: unknown | undefined, externalValueType: string | undefined): unknown {\n\t\tif (!internalValue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst isMultiValueOperator = this._isMultiValueOperator(this.operator),\n\t\t\tinternalType = this._getTypeInstance(Value.INTERNAL_VALUE_TYPE);\n\n\t\t//  from internal model string with operator\n\t\tconst values = this.operator.parse((internalValue as string) || \"\", internalType, FieldDisplay.Value, false);\n\t\tconst value = !isMultiValueOperator && Array.isArray(values) ? values[0] : values;\n\n\t\treturn this._stringToExternal(value, externalValueType); // The value bound to a custom filter\n\t}\n\n\t/**\n\t * Returns the value parsed to the internal string value.\n\t * @param externalValue The value to be parsed\n\t * @param externalValueType The external value type, e.g. int, float[], string, etc.\n\t * @returns The parsed value\n\t * @protected\n\t */\n\tparseValue(externalValue: unknown | undefined, externalValueType: string | undefined): unknown {\n\t\tif (!externalValue) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst isMultiValueOperator = this._isMultiValueOperator(this.operator),\n\t\t\texternalType = this._getTypeInstance(externalValueType);\n\n\t\tconst value = this.externalToString(externalValue as string, externalValueType);\n\n\t\t// Format to internal model string with operator\n\t\tconst values = isMultiValueOperator ? value : [value];\n\n\t\tif (this.hasCustomOperator()) {\n\t\t\t// Return a complex object while parsing the bound value in sap.ui.model.PropertyBinding.js#_externalToRaw()\n\t\t\treturn {\n\t\t\t\toperator: this.operator.name,\n\t\t\t\tvalues: [this.operator.format({ values: values } as ConditionObject, externalType)],\n\t\t\t\tvalidated: undefined\n\t\t\t};\n\t\t}\n\t\t// Return a simple string value to be stored in the internal 'filterValues' model\n\t\treturn this.operator.format({ values: values } as ConditionObject, externalType);\n\t}\n\n\t/**\n\t * Validates whether the given value in model representation is valid.\n\t * @param externalValue The value to be validated\n\t * @protected\n\t */\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tvalidateValue(externalValue: unknown): void {\n\t\t/* Do Nothing */\n\t}\n}\n"],"mappings":"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","ignoreList":[]}