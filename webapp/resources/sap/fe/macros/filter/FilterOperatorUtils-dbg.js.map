{"version":3,"names":["FilterOperatorUtils","processCustomFilterOperators","appComponent","sapFeConfig","getManifestEntry","customFilterOperators","macros","filter","registerCustomOperators","modelFilterNames","map","customFilterOperatorInfo","name","customOperatorHandlerFileNames","opName","substring","lastIndexOf","replace","customOperatorModules","requireDependencies","operators","reduce","accOperators","currentIndex","module","multiValue","operator","createSingleCustomOperator","push","Log","error","FilterOperatorUtil","addOperators","operatorName","customOperatorModule","methodName","Operator","filterOperator","tokenFormat","valueTypes","OperatorValueType","Self","tokenParse","format","value","formatConditionValues","values","parse","text","type","displayFormat","defaultOperator","Error","prototype","apply","getModelFilter","condition","formatedValues","getValuesForModelFilter","call","result","split","Array","isArray","length","arguments","undefined"],"sourceRoot":".","sources":["FilterOperatorUtils.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport { requireDependencies } from \"sap/fe/core/helpers/LoaderUtils\";\nimport { type CustomFilterOperatorInfo } from \"sap/ui/core/Manifest\";\nimport { type ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport FilterOperatorUtil from \"sap/ui/mdc/condition/FilterOperatorUtil\";\nimport Operator from \"sap/ui/mdc/condition/Operator\";\nimport type FieldDisplay from \"sap/ui/mdc/enums/FieldDisplay\";\nimport OperatorValueType from \"sap/ui/mdc/enums/OperatorValueType\";\nimport type Filter from \"sap/ui/model/Filter\";\nimport type Type from \"sap/ui/model/Type\";\n\nexport type FilterFunction = (value: string | string[]) => Filter;\nexport type CustomOperatorModule = Record<string, FilterFunction>;\n\nconst FilterOperatorUtils = {\n\t/**\n\t * Process all custom operators to be created that are referenced in the application manifest.\n\t * @param appComponent AppComponent\n\t * @returns Promise that resolves on creating and adding the operator to MDC environment\n\t */\n\tasync processCustomFilterOperators(appComponent: AppComponent): Promise<void> {\n\t\tconst sapFeConfig = appComponent.getManifestEntry(\"sap.fe\");\n\t\tconst { customFilterOperators } = sapFeConfig?.macros?.filter || {};\n\t\tif (customFilterOperators) {\n\t\t\tawait FilterOperatorUtils.registerCustomOperators(customFilterOperators);\n\t\t}\n\t},\n\n\t/**\n\t * Register custom operators.\n\t * @param customFilterOperators Custom operator info\n\t * @returns Promise that resolves to an array of operators\n\t */\n\tasync registerCustomOperators(customFilterOperators: CustomFilterOperatorInfo[]): Promise<Operator[]> {\n\t\tconst modelFilterNames = customFilterOperators.map((customFilterOperatorInfo) => customFilterOperatorInfo.name);\n\t\tconst customOperatorHandlerFileNames = modelFilterNames.map((opName: string) =>\n\t\t\topName.substring(0, opName.lastIndexOf(\".\")).replace(/\\./g, \"/\")\n\t\t);\n\t\tconst customOperatorModules = (await requireDependencies(customOperatorHandlerFileNames)) as CustomOperatorModule[];\n\n\t\tconst operators = customFilterOperators.reduce(\n\t\t\t(accOperators: Operator[], customFilterOperatorInfo: CustomFilterOperatorInfo, currentIndex: number) => {\n\t\t\t\tconst module = customOperatorModules?.[currentIndex];\n\t\t\t\tconst { name, multiValue } = customFilterOperatorInfo;\n\t\t\t\tif (module) {\n\t\t\t\t\tconst operator = FilterOperatorUtils.createSingleCustomOperator(name, module, multiValue ?? false);\n\t\t\t\t\tif (operator) {\n\t\t\t\t\t\taccOperators.push(operator);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLog.error(`Failed to load custom operator module: ${customOperatorHandlerFileNames[currentIndex]}`);\n\t\t\t\t}\n\t\t\t\treturn accOperators;\n\t\t\t},\n\t\t\t[] as Operator[]\n\t\t);\n\t\tFilterOperatorUtil.addOperators(operators);\n\t\treturn operators;\n\t},\n\n\t/**\n\t * Create custom operator.\n\t * @param operatorName The binding operator name\n\t * @param customOperatorModule Custom operator module\n\t * @param multiValue Custom operator expected to work with multiple values\n\t * @returns Operator\n\t */\n\tcreateSingleCustomOperator(\n\t\toperatorName: string,\n\t\tcustomOperatorModule: CustomOperatorModule,\n\t\tmultiValue: boolean\n\t): Operator | undefined {\n\t\tconst methodName = operatorName.substring(operatorName.lastIndexOf(\".\") + 1);\n\t\tif (customOperatorModule?.[methodName]) {\n\t\t\treturn new Operator({\n\t\t\t\tfilterOperator: \"\",\n\t\t\t\ttokenFormat: \"\",\n\t\t\t\tname: operatorName,\n\t\t\t\tvalueTypes: [OperatorValueType.Self],\n\t\t\t\ttokenParse: \"^(.*)$\",\n\t\t\t\tformat: (value: ConditionObject): string | string[] => {\n\t\t\t\t\treturn FilterOperatorUtils.formatConditionValues(value.values, multiValue);\n\t\t\t\t},\n\t\t\t\tparse: function (text: ConditionObject, type: Type, displayFormat: FieldDisplay, defaultOperator: boolean): unknown {\n\t\t\t\t\tif (typeof text === \"object\") {\n\t\t\t\t\t\tif (text.operator !== operatorName) {\n\t\t\t\t\t\t\tthrow Error(\"not matching operator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn text.values;\n\t\t\t\t\t}\n\t\t\t\t\treturn Operator.prototype.parse.apply(this, [text, type, displayFormat, defaultOperator]);\n\t\t\t\t},\n\t\t\t\tgetModelFilter: (condition: ConditionObject): Filter => {\n\t\t\t\t\tconst formatedValues = FilterOperatorUtils.getValuesForModelFilter(condition.values, multiValue);\n\t\t\t\t\treturn customOperatorModule[methodName].call(customOperatorModule, formatedValues);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tLog.error(`Failed to create custom operator: model filter function ${operatorName} not found`);\n\t\t}\n\t},\n\n\t/**\n\t * Values for model filter.\n\t * @param values Input condition values\n\t * @param multiValue Custom operator expected to work with multiple values\n\t * @returns Unchanged input condition value\n\t */\n\tgetValuesForModelFilter(values: string[] | string, multiValue: boolean): string[] | string {\n\t\tif (multiValue) {\n\t\t\tconst result = values[0];\n\t\t\treturn (typeof result === \"string\" ? result.split(\",\") : result) || [];\n\t\t}\n\t\treturn Array.isArray(values) && values.length ? values[0] : (values as string);\n\t},\n\n\t/**\n\t * Condition values for format.\n\t * @param values Input condition value\n\t * @param multiValue\n\t * @returns Input condition value\n\t */\n\tformatConditionValues(\n\t\tvalues: ConditionObject[\"values\"] | ConditionObject[\"values\"][0],\n\t\tmultiValue = false\n\t): ConditionObject[\"values\"] | ConditionObject[\"values\"][0] {\n\t\tif (values && Array.isArray(values) && values.length > 0) {\n\t\t\treturn multiValue ? values : values[0];\n\t\t}\n\t\treturn values;\n\t}\n};\n\nexport default FilterOperatorUtils;\n"],"mappings":"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","ignoreList":[],"file":"FilterOperatorUtils-dbg.js"}