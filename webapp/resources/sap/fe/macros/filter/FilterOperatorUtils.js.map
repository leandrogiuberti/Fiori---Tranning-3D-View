{"version":3,"file":"FilterOperatorUtils.js","names":["FilterOperatorUtils","processCustomFilterOperators","appComponent","sapFeConfig","getManifestEntry","customFilterOperators","macros","filter","registerCustomOperators","modelFilterNames","map","customFilterOperatorInfo","name","customOperatorHandlerFileNames","opName","substring","lastIndexOf","replace","customOperatorModules","requireDependencies","operators","reduce","accOperators","currentIndex","module","multiValue","operator","createSingleCustomOperator","push","Log","error","FilterOperatorUtil","addOperators","operatorName","customOperatorModule","methodName","Operator","filterOperator","tokenFormat","valueTypes","OperatorValueType","Self","tokenParse","format","value","formatConditionValues","values","parse","text","type","displayFormat","defaultOperator","Error","prototype","apply","this","getModelFilter","condition","formatedValues","getValuesForModelFilter","call","result","split","Array","isArray","length","arguments","undefined"],"sources":["./FilterOperatorUtils.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport { requireDependencies } from \"sap/fe/core/helpers/LoaderUtils\";\nimport { type CustomFilterOperatorInfo } from \"sap/ui/core/Manifest\";\nimport { type ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport FilterOperatorUtil from \"sap/ui/mdc/condition/FilterOperatorUtil\";\nimport Operator from \"sap/ui/mdc/condition/Operator\";\nimport type FieldDisplay from \"sap/ui/mdc/enums/FieldDisplay\";\nimport OperatorValueType from \"sap/ui/mdc/enums/OperatorValueType\";\nimport type Filter from \"sap/ui/model/Filter\";\nimport type Type from \"sap/ui/model/Type\";\n\nexport type FilterFunction = (value: string | string[]) => Filter;\nexport type CustomOperatorModule = Record<string, FilterFunction>;\n\nconst FilterOperatorUtils = {\n\t/**\n\t * Process all custom operators to be created that are referenced in the application manifest.\n\t * @param appComponent AppComponent\n\t * @returns Promise that resolves on creating and adding the operator to MDC environment\n\t */\n\tasync processCustomFilterOperators(appComponent: AppComponent): Promise<void> {\n\t\tconst sapFeConfig = appComponent.getManifestEntry(\"sap.fe\");\n\t\tconst { customFilterOperators } = sapFeConfig?.macros?.filter || {};\n\t\tif (customFilterOperators) {\n\t\t\tawait FilterOperatorUtils.registerCustomOperators(customFilterOperators);\n\t\t}\n\t},\n\n\t/**\n\t * Register custom operators.\n\t * @param customFilterOperators Custom operator info\n\t * @returns Promise that resolves to an array of operators\n\t */\n\tasync registerCustomOperators(customFilterOperators: CustomFilterOperatorInfo[]): Promise<Operator[]> {\n\t\tconst modelFilterNames = customFilterOperators.map((customFilterOperatorInfo) => customFilterOperatorInfo.name);\n\t\tconst customOperatorHandlerFileNames = modelFilterNames.map((opName: string) =>\n\t\t\topName.substring(0, opName.lastIndexOf(\".\")).replace(/\\./g, \"/\")\n\t\t);\n\t\tconst customOperatorModules = (await requireDependencies(customOperatorHandlerFileNames)) as CustomOperatorModule[];\n\n\t\tconst operators = customFilterOperators.reduce(\n\t\t\t(accOperators: Operator[], customFilterOperatorInfo: CustomFilterOperatorInfo, currentIndex: number) => {\n\t\t\t\tconst module = customOperatorModules?.[currentIndex];\n\t\t\t\tconst { name, multiValue } = customFilterOperatorInfo;\n\t\t\t\tif (module) {\n\t\t\t\t\tconst operator = FilterOperatorUtils.createSingleCustomOperator(name, module, multiValue ?? false);\n\t\t\t\t\tif (operator) {\n\t\t\t\t\t\taccOperators.push(operator);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tLog.error(`Failed to load custom operator module: ${customOperatorHandlerFileNames[currentIndex]}`);\n\t\t\t\t}\n\t\t\t\treturn accOperators;\n\t\t\t},\n\t\t\t[] as Operator[]\n\t\t);\n\t\tFilterOperatorUtil.addOperators(operators);\n\t\treturn operators;\n\t},\n\n\t/**\n\t * Create custom operator.\n\t * @param operatorName The binding operator name\n\t * @param customOperatorModule Custom operator module\n\t * @param multiValue Custom operator expected to work with multiple values\n\t * @returns Operator\n\t */\n\tcreateSingleCustomOperator(\n\t\toperatorName: string,\n\t\tcustomOperatorModule: CustomOperatorModule,\n\t\tmultiValue: boolean\n\t): Operator | undefined {\n\t\tconst methodName = operatorName.substring(operatorName.lastIndexOf(\".\") + 1);\n\t\tif (customOperatorModule?.[methodName]) {\n\t\t\treturn new Operator({\n\t\t\t\tfilterOperator: \"\",\n\t\t\t\ttokenFormat: \"\",\n\t\t\t\tname: operatorName,\n\t\t\t\tvalueTypes: [OperatorValueType.Self],\n\t\t\t\ttokenParse: \"^(.*)$\",\n\t\t\t\tformat: (value: ConditionObject): string | string[] => {\n\t\t\t\t\treturn FilterOperatorUtils.formatConditionValues(value.values, multiValue);\n\t\t\t\t},\n\t\t\t\tparse: function (text: ConditionObject, type: Type, displayFormat: FieldDisplay, defaultOperator: boolean): unknown {\n\t\t\t\t\tif (typeof text === \"object\") {\n\t\t\t\t\t\tif (text.operator !== operatorName) {\n\t\t\t\t\t\t\tthrow Error(\"not matching operator\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn text.values;\n\t\t\t\t\t}\n\t\t\t\t\treturn Operator.prototype.parse.apply(this, [text, type, displayFormat, defaultOperator]);\n\t\t\t\t},\n\t\t\t\tgetModelFilter: (condition: ConditionObject): Filter => {\n\t\t\t\t\tconst formatedValues = FilterOperatorUtils.getValuesForModelFilter(condition.values, multiValue);\n\t\t\t\t\treturn customOperatorModule[methodName].call(customOperatorModule, formatedValues);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tLog.error(`Failed to create custom operator: model filter function ${operatorName} not found`);\n\t\t}\n\t},\n\n\t/**\n\t * Values for model filter.\n\t * @param values Input condition values\n\t * @param multiValue Custom operator expected to work with multiple values\n\t * @returns Unchanged input condition value\n\t */\n\tgetValuesForModelFilter(values: string[] | string, multiValue: boolean): string[] | string {\n\t\tif (multiValue) {\n\t\t\tconst result = values[0];\n\t\t\treturn (typeof result === \"string\" ? result.split(\",\") : result) || [];\n\t\t}\n\t\treturn Array.isArray(values) && values.length ? values[0] : (values as string);\n\t},\n\n\t/**\n\t * Condition values for format.\n\t * @param values Input condition value\n\t * @param multiValue\n\t * @returns Input condition value\n\t */\n\tformatConditionValues(\n\t\tvalues: ConditionObject[\"values\"] | ConditionObject[\"values\"][0],\n\t\tmultiValue = false\n\t): ConditionObject[\"values\"] | ConditionObject[\"values\"][0] {\n\t\tif (values && Array.isArray(values) && values.length > 0) {\n\t\t\treturn multiValue ? values : values[0];\n\t\t}\n\t\treturn values;\n\t}\n};\n\nexport default FilterOperatorUtils;\n"],"mappings":";;;;6OAeA,MAAMA,EAAsB,CAM3B,kCAAMC,CAA6BC,GAClC,MAAMC,EAAcD,EAAaE,iBAAiB,UAClD,MAAMC,sBAAEA,GAA0BF,GAAaG,QAAQC,QAAU,CAAC,EAClE,GAAIF,EAAuB,OACpBL,EAAoBQ,wBAAwBH,EACnD,CACD,EAOA,6BAAMG,CAAwBH,GAC7B,MAAMI,EAAmBJ,EAAsBK,IAAKC,GAA6BA,EAAyBC,MAC1G,MAAMC,EAAiCJ,EAAiBC,IAAKI,GAC5DA,EAAOC,UAAU,EAAGD,EAAOE,YAAY,MAAMC,QAAQ,MAAO,MAE7D,MAAMC,QAA+BC,EAAoBN,GAEzD,MAAMO,EAAYf,EAAsBgB,OACvC,CAACC,EAA0BX,EAAoDY,KAC9E,MAAMC,EAASN,IAAwBK,GACvC,MAAMX,KAAEA,EAAIa,WAAEA,GAAed,EAC7B,GAAIa,EAAQ,CACX,MAAME,EAAW1B,EAAoB2B,2BAA2Bf,EAAMY,EAAQC,GAAc,OAC5F,GAAIC,EAAU,CACbJ,EAAaM,KAAKF,EACnB,CACD,KAAO,CACNG,EAAIC,MAAM,0CAA0CjB,EAA+BU,KACpF,CACA,OAAOD,GAER,IAEDS,EAAmBC,aAAaZ,GAChC,OAAOA,CACR,EASAO,2BACCM,EACAC,EACAT,GAEA,MAAMU,EAAaF,EAAalB,UAAUkB,EAAajB,YAAY,KAAO,GAC1E,GAAIkB,IAAuBC,GAAa,CACvC,OAAO,IAAIC,EAAS,CACnBC,eAAgB,GAChBC,YAAa,GACb1B,KAAMqB,EACNM,WAAY,CAACC,EAAkBC,MAC/BC,WAAY,SACZC,OAASC,GACD5C,EAAoB6C,sBAAsBD,EAAME,OAAQrB,GAEhEsB,MAAO,SAAUC,EAAuBC,EAAYC,EAA6BC,GAChF,UAAWH,IAAS,SAAU,CAC7B,GAAIA,EAAKtB,WAAaO,EAAc,CACnC,MAAMmB,MAAM,wBACb,CACA,OAAOJ,EAAKF,MACb,CACA,OAAOV,EAASiB,UAAUN,MAAMO,MAAMC,KAAM,CAACP,EAAMC,EAAMC,EAAeC,GACzE,EACAK,eAAiBC,IAChB,MAAMC,EAAiB1D,EAAoB2D,wBAAwBF,EAAUX,OAAQrB,GACrF,OAAOS,EAAqBC,GAAYyB,KAAK1B,EAAsBwB,KAGtE,KAAO,CACN7B,EAAIC,MAAM,2DAA2DG,cACtE,CACD,EAQA0B,wBAAwBb,EAA2BrB,GAClD,GAAIA,EAAY,CACf,MAAMoC,EAASf,EAAO,GACtB,cAAee,IAAW,SAAWA,EAAOC,MAAM,KAAOD,IAAW,EACrE,CACA,OAAOE,MAAMC,QAAQlB,IAAWA,EAAOmB,OAASnB,EAAO,GAAMA,CAC9D,EAQAD,sBACCC,GAE2D,IAD3DrB,EAAUyC,UAAAD,OAAA,GAAAC,UAAA,KAAAC,UAAAD,UAAA,GAAG,MAEb,GAAIpB,GAAUiB,MAAMC,QAAQlB,IAAWA,EAAOmB,OAAS,EAAG,CACzD,OAAOxC,EAAaqB,EAASA,EAAO,EACrC,CACA,OAAOA,CACR,GACC,OAEa9C,CAAmB","ignoreList":[]}