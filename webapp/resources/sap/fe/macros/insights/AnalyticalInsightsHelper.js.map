{"version":3,"file":"AnalyticalInsightsHelper.js","names":["getMeasures","innerChart","map","measure","name","getLabel","value","getName","_exports","getDimensions","chartAPI","filter","dimension","getVisibleDimensions","includes","dataModel","getPropertyDataModel","displayValue","getTextBinding","undefined","getFeeds","vizFeeds","getAggregation","feeds","feed","getProperty","feedValue","label","feedType","type","uid","values","flat","getChartProperties","chartProperties","dimensionName","rules","plotArea","dataPointStyle","forEach","rule","dataContext","displayName","dimensions","measures","async","createChartCardParams","controlAPI","chart","content","getControlDelegate","getInnerChart","Error","params","createInsightsParams","getFilter","entitySetPath","data","requestParameters","queryUrl","getBinding","getDownloadUrl","cardTitle","getHeader","legendVisible","chartType","getChartType","allowedChartTypes","getAvailableChartTypes","available","getVizProperties"],"sources":["./AnalyticalInsightsHelper.ts"],"sourcesContent":["import type SapChartType from \"sap/chart/Chart\";\nimport { getTextBinding } from \"sap/fe/macros/field/FieldTemplating\";\nimport { createInsightsParams } from \"sap/fe/macros/insights/CommonInsightsHelper\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { Dimension, Feed, Measure, Rule } from \"sap/ui/integration/widgets/Card\";\nimport type ChartType from \"../Chart\";\n\nimport type ChartDelegate from \"sap/ui/mdc/ChartDelegate\";\nimport type ODataV4ListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type VizFrame from \"sap/viz/ui5/controls/VizFrame\";\nimport type { ChartContent, InsightsParams } from \"./InsightsService\";\n\n/**\n * Get measures of the chart.\n * @param innerChart\n * @returns Measures of the chart.\n */\nexport function getMeasures(innerChart: SapChartType): Measure[] {\n\treturn innerChart.getMeasures().map((measure) => {\n\t\treturn {\n\t\t\tname: measure.getLabel(),\n\t\t\tvalue: \"{\" + measure.getName() + \"}\"\n\t\t};\n\t});\n}\n\n/**\n * Get dimensions of the chart.\n * @param innerChart Inner chart\n * @param chartAPI Chart API\n * @returns Dimensions of the chart.\n */\nexport function getDimensions(innerChart: SapChartType, chartAPI: ChartType): Dimension[] {\n\treturn innerChart\n\t\t.getDimensions()\n\t\t.filter(function (dimension) {\n\t\t\treturn innerChart.getVisibleDimensions().includes(dimension.getName());\n\t\t})\n\t\t.map((dimension) => {\n\t\t\tconst dataModel = chartAPI.getPropertyDataModel(dimension.getName());\n\t\t\tconst displayValue = dataModel\n\t\t\t\t? getTextBinding(dataModel, {}, false, \"extension.formatters.sapfe.formatWithBrackets\")\n\t\t\t\t: undefined;\n\t\t\treturn {\n\t\t\t\tname: dimension.getLabel(),\n\t\t\t\tvalue: `{${dimension.getName()}}`,\n\t\t\t\tdisplayValue: displayValue\n\t\t\t};\n\t\t});\n}\n\n/**\n * Get feeds of the chart.\n * @param innerChart\n * @returns Feeds of the chart.\n */\nexport function getFeeds(innerChart: SapChartType): Feed[] {\n\tconst vizFeeds = (innerChart.getAggregation(\"_vizFrame\") as VizFrame).getFeeds();\n\tconst feeds: Feed[][] = vizFeeds.map((feed) => {\n\t\treturn (feed.getProperty(\"values\") as Control[]).map((feedValue) => {\n\t\t\tconst label = getLabel(innerChart, feedValue.getProperty(\"name\") as string, feedValue.getProperty(\"type\") as string);\n\t\t\tconst feedType: Feed = {\n\t\t\t\ttype: feed.getProperty(\"type\") as string,\n\t\t\t\tuid: feed.getProperty(\"uid\") as string,\n\t\t\t\tvalues: [label]\n\t\t\t};\n\t\t\treturn feedType;\n\t\t});\n\t});\n\treturn feeds.flat();\n}\n\n/**\n * Get the chart properties.\n * @param chartProperties\n * @param dimensionName\n * @returns Updated properties of chart.\n */\nfunction getChartProperties(\n\tchartProperties: Partial<{ plotArea?: { dataPointStyle?: { rules?: Rule[] } } }>,\n\tdimensionName: string | undefined\n): Partial<{ plotArea?: { dataPointStyle?: { rules?: Rule[] } } }> {\n\tconst rules = chartProperties.plotArea?.dataPointStyle?.rules ?? [];\n\trules.forEach((rule: Rule) => {\n\t\trule.dataContext = {};\n\t\tif (dimensionName) {\n\t\t\trule.dataContext[dimensionName] = rule.displayName || \"\";\n\t\t}\n\t\treturn rule;\n\t});\n\treturn chartProperties;\n}\n\n/**\n * Get measure label or dimension label of the chart.\n * @param innerChart\n * @param name\n * @param type\n * @returns Measure label or Dimension label of the chart.\n */\n\nfunction getLabel(innerChart: SapChartType, name: string, type: string): string {\n\tif (type === \"Dimension\") {\n\t\tconst dimensions = innerChart.getDimensions();\n\t\treturn (\n\t\t\tdimensions\n\t\t\t\t.filter((dimension) => {\n\t\t\t\t\treturn dimension.getName() === name;\n\t\t\t\t})[0]\n\t\t\t\t.getLabel() || name\n\t\t);\n\t} else {\n\t\tconst measures = innerChart.getMeasures();\n\t\treturn (\n\t\t\tmeasures\n\t\t\t\t.filter((measure) => {\n\t\t\t\t\treturn measure.getName() === name;\n\t\t\t\t})[0]\n\t\t\t\t.getLabel() || name\n\t\t);\n\t}\n}\n\n/**\n * Constructs the insights parameters from the table that is required to create the insights card.\n * @param controlAPI\n * @returns The insights parameters from the table.\n */\nexport async function createChartCardParams(controlAPI: ChartType): Promise<InsightsParams<ChartContent> | undefined> {\n\tconst chart = controlAPI.content;\n\tconst innerChart = (chart.getControlDelegate() as unknown as ChartDelegate | undefined)?.getInnerChart(chart) as\n\t\t| SapChartType\n\t\t| undefined;\n\n\tif (!innerChart) {\n\t\tthrow new Error(\"Cannot access chart.\");\n\t}\n\n\tconst params = await createInsightsParams(\"Analytical\", controlAPI, chart.getFilter());\n\tif (!params) {\n\t\treturn;\n\t}\n\tparams.entitySetPath = chart.data(\"targetCollectionPath\") as string;\n\tparams.requestParameters.queryUrl = (innerChart.getBinding(\"data\") as ODataV4ListBinding).getDownloadUrl() ?? \"\";\n\tconst dimensions = getDimensions(innerChart, controlAPI);\n\tconst content: ChartContent = {\n\t\tcardTitle: chart.getHeader(),\n\t\tlegendVisible: false,\n\t\tchartType: chart.getChartType(),\n\t\tmeasures: getMeasures(innerChart),\n\t\tdimensions,\n\t\tfeeds: getFeeds(innerChart),\n\t\tallowedChartTypes: (innerChart.getAvailableChartTypes() as { available: { chart: string }[] }).available,\n\t\tchartProperties: getChartProperties((innerChart.getAggregation(\"_vizFrame\") as VizFrame).getVizProperties(), dimensions[0]?.name)\n\t};\n\treturn { ...params, content };\n}\n"],"mappings":";;;;4LAiBO,SAASA,EAAYC,GAC3B,OAAOA,EAAWD,cAAcE,IAAKC,IAC7B,CACNC,KAAMD,EAAQE,WACdC,MAAO,IAAMH,EAAQI,UAAY,MAGpC,CAEAC,EAAAR,cAMO,SAASS,EAAcR,EAA0BS,GACvD,OAAOT,EACLQ,gBACAE,OAAO,SAAUC,GACjB,OAAOX,EAAWY,uBAAuBC,SAASF,EAAUL,UAC7D,GACCL,IAAKU,IACL,MAAMG,EAAYL,EAASM,qBAAqBJ,EAAUL,WAC1D,MAAMU,EAAeF,EAClBG,EAAeH,EAAW,CAAC,EAAG,MAAO,iDACrCI,UACH,MAAO,CACNf,KAAMQ,EAAUP,WAChBC,MAAO,IAAIM,EAAUL,aACrBU,aAAcA,IAGlB,CAEAT,EAAAC,gBAKO,SAASW,EAASnB,GACxB,MAAMoB,EAAYpB,EAAWqB,eAAe,aAA0BF,WACtE,MAAMG,EAAkBF,EAASnB,IAAKsB,GAC7BA,EAAKC,YAAY,UAAwBvB,IAAKwB,IACrD,MAAMC,EAAQtB,EAASJ,EAAYyB,EAAUD,YAAY,QAAmBC,EAAUD,YAAY,SAClG,MAAMG,EAAiB,CACtBC,KAAML,EAAKC,YAAY,QACvBK,IAAKN,EAAKC,YAAY,OACtBM,OAAQ,CAACJ,IAEV,OAAOC,KAGT,OAAOL,EAAMS,MACd,CAEAxB,EAAAY,WAMA,SAASa,EACRC,EACAC,GAEA,MAAMC,EAAQF,EAAgBG,UAAUC,gBAAgBF,OAAS,GACjEA,EAAMG,QAASC,IACdA,EAAKC,YAAc,CAAC,EACpB,GAAIN,EAAe,CAClBK,EAAKC,YAAYN,GAAiBK,EAAKE,aAAe,EACvD,CACA,OAAOF,IAER,OAAON,CACR,CAUA,SAAS7B,EAASJ,EAA0BG,EAAcyB,GACzD,GAAIA,IAAS,YAAa,CACzB,MAAMc,EAAa1C,EAAWQ,gBAC9B,OACCkC,EACEhC,OAAQC,GACDA,EAAUL,YAAcH,GAC7B,GACFC,YAAcD,CAElB,KAAO,CACN,MAAMwC,EAAW3C,EAAWD,cAC5B,OACC4C,EACEjC,OAAQR,GACDA,EAAQI,YAAcH,GAC3B,GACFC,YAAcD,CAElB,CACD,CAOOyC,eAAeC,EAAsBC,GAC3C,MAAMC,EAAQD,EAAWE,QACzB,MAAMhD,EAAc+C,EAAME,sBAA+DC,cAAcH,GAIvG,IAAK/C,EAAY,CAChB,MAAM,IAAImD,MAAM,uBACjB,CAEA,MAAMC,QAAeC,EAAqB,aAAcP,EAAYC,EAAMO,aAC1E,IAAKF,EAAQ,CACZ,MACD,CACAA,EAAOG,cAAgBR,EAAMS,KAAK,wBAClCJ,EAAOK,kBAAkBC,SAAY1D,EAAW2D,WAAW,QAA+BC,kBAAoB,GAC9G,MAAMlB,EAAalC,EAAcR,EAAY8C,GAC7C,MAAME,EAAwB,CAC7Ba,UAAWd,EAAMe,YACjBC,cAAe,MACfC,UAAWjB,EAAMkB,eACjBtB,SAAU5C,EAAYC,GACtB0C,aACApB,MAAOH,EAASnB,GAChBkE,kBAAoBlE,EAAWmE,yBAAgEC,UAC/FnC,gBAAiBD,EAAoBhC,EAAWqB,eAAe,aAA0BgD,mBAAoB3B,EAAW,IAAIvC,OAE7H,MAAO,IAAKiD,EAAQJ,UACrB,CAACzC,EAAAsC,wBAAA,OAAAtC,CAAA","ignoreList":[]}