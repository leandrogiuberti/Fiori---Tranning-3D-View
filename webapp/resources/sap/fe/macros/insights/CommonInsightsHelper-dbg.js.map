{"version":3,"names":["filterTypeMapper","isInsightsCardCreationPossible","filterbarId","insightsRelevantColumns","length","filterBar","Element","getElementById","isA","isSemanticDateFilterApplied","getParent","_exports","showErrorMessageForInsightsCard","type","resourceModel","headerText","getText","contentText","formattedTextString","MessageBox","error","onClose","Error","details","createNavigationParameters","appComponent","shellServiceHelper","getShellServices","navigationService","getNavigationService","hash","getHash","parsedHash","parseShellHash","iAppStateKey","getIAppStateKey","appVariantId","params","intent","semanticObject","action","getRelevantFilters","parameters","filterBarSV","propertyInfos","controlSV","selectionVariants","mergedSV","stateFilterToSelectionVariant","mergeSelectionVariants","selectionOptionsPropertyNames","getSelectOptionsPropertyNames","filterProp","filterType","getFilterOrParameterType","includes","reconstructedSV","id","getID","Parameters","SelectOptions","PropertyName","Ranges","getSelectOption","value","JSON","stringify","getRelevantParameters","selectionVariant","relevantParameters","parameter","parameterType","Low","paramOrFilter","filterParamType","forEach","propInfo","name","dataType","createInsightsParams","cardType","controlAPI","filterBarId","isCardCreationSupported","getResourceModel","content","CommonUtils","getAppComponent","control","controlState","StateUtil","retrieveExternalState","getSelectionVariantFromConditions","filter","getPropertyHelper","relevantFilters","mandatoryFilters","filterBarAPI","getParameters","getSelectionVariant","getPropertyInfoSet","getMandatoryFilterPropertyNames","parentAppManifest","deepClone","getManifest","appManifest","crossNavigation","insightsParams","navigation","requestParameters","serviceUrl","getModel","getServiceUrl","queryUrl","sortQuery","cardTitle","filters","oDataParameters","entitySetPath","showGenericErrorMessage","scope","ResourceModelHelper","hasInsightActionEnabled","actions","isInsightActionEnabled","actionElement","getAction","isActionForInsights","getId","getVisible","getEnabled"],"sourceRoot":".","sources":["CommonInsightsHelper.ts"],"sourcesContent":["import deepClone from \"sap/base/util/deepClone\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport type { LegacyFilterBarState } from \"sap/fe/core/controllerextensions/ViewState\";\nimport ResourceModelHelper, { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport type { PropertyInfo } from \"sap/fe/macros/internal/PropertyInfo\";\nimport type SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type Button from \"sap/m/Button\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport type { ManifestContent } from \"sap/ui/core/Manifest\";\nimport type { CardType, TableCardColumn } from \"sap/ui/integration/widgets/Card\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type PropertyHelper from \"sap/ui/mdc/util/PropertyHelper\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ChartType from \"../Chart\";\nimport stateFilterToSelectionVariant from \"../mdc/adapter/StateFilterToSelectionVariant\";\nimport type { ChartContent, InsightsParams, TableContent } from \"./InsightsService\";\n\nexport type ControlState = Record<string, object | undefined> & {\n\tfilter?: Record<string, unknown[] | undefined>;\n\tgroupLevels?: {\n\t\tname: string;\n\t}[];\n};\n\nexport type FilterParameterType = {\n\tvalue: unknown;\n\ttype: string;\n};\n\nconst filterTypeMapper: Record<string, string> = {\n\t\"sap.ui.model.odata.type.String\": \"string\",\n\t\"sap.ui.model.odata.type.Int\": \"integer\",\n\t\"sap.ui.model.odata.type.Int32\": \"integer\",\n\t\"sap.ui.model.odata.type.Int64\": \"integer\",\n\t\"sap.ui.model.odata.type.Boolean\": \"boolean\",\n\t\"sap.ui.model.odata.type.Decimal\": \"number\",\n\t\"sap.ui.model.odata.type.Double\": \"number\",\n\t\"sap.ui.model.odata.type.Date\": \"date\",\n\t\"sap.ui.model.odata.type.DateTimeOffset\": \"datetime\"\n};\n\n/**\n * Checks if the insights card creation is possible.\n * @param filterbarId\n * @param insightsRelevantColumns\n * @returns True if the insights card can be created.\n */\nexport function isInsightsCardCreationPossible(filterbarId: string | null, insightsRelevantColumns?: TableCardColumn[]): boolean {\n\tif (insightsRelevantColumns && insightsRelevantColumns.length === 0) {\n\t\treturn false;\n\t}\n\tconst filterBar = Element.getElementById(filterbarId);\n\tif (filterBar?.isA(\"sap.fe.macros.controls.FilterBar\")) {\n\t\t//cards can not be created if semantic date operators are applied on the filters\n\t\tconst isSemanticDateFilterApplied = (filterBar.getParent() as FilterBarAPI).isSemanticDateFilterApplied();\n\t\treturn !isSemanticDateFilterApplied;\n\t}\n\treturn true;\n}\n\n/**\n * Display a message box for the scenarios where the insights card cannot be created.\n * @param type Card type\n * @param resourceModel Resource model to be used to fetch messages\n */\nfunction showErrorMessageForInsightsCard(type: CardType, resourceModel: ResourceModel): void {\n\tif (type === \"Table\") {\n\t\tconst headerText = `<strong>\n\t\t${resourceModel.getText(\"M_CARD_RETRY_MESSAGE\")}\n\t\t</strong>`;\n\t\tconst contentText = `<ul><li>\n\t\t\t${resourceModel.getText(\"M_CARD_FAILURE_REASON_DATE_RANGE_FILTERS\")}\n\t\t\t</li><li>\n\t\t\t${resourceModel.getText(\"M_CARD_FAILURE_TABLE_REASON_UNSUPPORTED_COLUMNS\")}\n\t\t\t</li></ul>`;\n\t\tconst formattedTextString = headerText + contentText;\n\t\tMessageBox.error(resourceModel.getText(\"M_CARD_CREATION_FAILURE\"), {\n\t\t\tonClose: function () {\n\t\t\t\tthrow new Error(\"Insights is not supported\");\n\t\t\t},\n\t\t\tdetails: formattedTextString\n\t\t});\n\t} else {\n\t\tconst formattedTextString = resourceModel.getText(\"M_CARD_CREATION_FAILURE_CHART_REASON_DATE_RANGE_FILTERS\");\n\t\tMessageBox.error(formattedTextString, {\n\t\t\tonClose: function () {\n\t\t\t\tthrow new Error(\"Insights is not supported\");\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Extract parameters relevant for navigation.\n * @param appComponent AppComponent instance to be used to access shell services\n * @returns An instance of the navigation parameters\n */\nfunction createNavigationParameters(appComponent: AppComponent): InsightsParams[\"navigation\"] {\n\tconst shellServiceHelper = appComponent.getShellServices();\n\tconst navigationService = appComponent.getNavigationService();\n\tconst hash = shellServiceHelper.getHash();\n\tconst parsedHash = shellServiceHelper.parseShellHash(hash);\n\treturn {\n\t\tiAppStateKey: navigationService.getIAppStateKey(),\n\t\tappVariantId: parsedHash.params?.[\"sap-appvar-id\"]?.[0],\n\t\tintent: {\n\t\t\tsemanticObject: parsedHash.semanticObject,\n\t\t\taction: parsedHash.action\n\t\t}\n\t};\n}\n\n/**\n * Extract the applied filters.\n * @param parameters Array of parameters that are fetched from the custom data of the filter bar\n * @param filterBarSV Selection variant for the filter bar\n * @param propertyInfos PropertyInfoSet of the filter bar\n * @param controlSV\n * @returns An object containing the applied filters\n */\nfunction getRelevantFilters(\n\tparameters: string[],\n\tfilterBarSV: SelectionVariant,\n\tpropertyInfos: PropertyInfo[],\n\tcontrolSV: SelectionVariant\n): Record<string, FilterParameterType> {\n\tconst selectionVariants: Record<string, FilterParameterType> = {};\n\t// Merge the filterBarSV and controlSV filters using compareSelectOptions\n\tconst mergedSV = stateFilterToSelectionVariant.mergeSelectionVariants(filterBarSV, controlSV);\n\tconst selectionOptionsPropertyNames: string[] = mergedSV.getSelectOptionsPropertyNames();\n\tif (selectionOptionsPropertyNames.length) {\n\t\t// Add to insights only if filters exist\n\t\tfor (const filterProp of selectionOptionsPropertyNames) {\n\t\t\tconst filterType: string | undefined = getFilterOrParameterType(filterProp, propertyInfos);\n\t\t\tif (filterProp !== \"$editState\" && !parameters.includes(filterProp) && !filterProp.includes(\"$Parameter.\") && filterType) {\n\t\t\t\tconst reconstructedSV = {\n\t\t\t\t\tid: mergedSV.getID(),\n\t\t\t\t\tParameters: [],\n\t\t\t\t\tSelectOptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPropertyName: filterProp,\n\t\t\t\t\t\t\tRanges: mergedSV.getSelectOption(filterProp)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t};\n\n\t\t\t\tselectionVariants[filterProp] = {\n\t\t\t\t\tvalue: JSON.stringify(reconstructedSV),\n\t\t\t\t\ttype: filterType\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn selectionVariants;\n}\n\n/**\n * Extract the relevant parameters.\n * @param parameters Array of parameters that are fetched from the custom data of the filter bar\n * @param selectionVariant Selection variant for the filter bar\n * @param propertyInfos PropertyInfoSet of the filter bar\n * @returns An object containing the relevant parameters\n */\nfunction getRelevantParameters(\n\tparameters: string[],\n\tselectionVariant: SelectionVariant,\n\tpropertyInfos: PropertyInfo[]\n): Record<string, FilterParameterType> {\n\tconst relevantParameters: Record<string, FilterParameterType> = {};\n\tconst selectionOptionsPropertyNames: string[] = selectionVariant.getSelectOptionsPropertyNames();\n\tif (selectionOptionsPropertyNames.length) {\n\t\t// add to insights only if filters exist\n\t\tfor (const parameter of parameters) {\n\t\t\tconst parameterType: string | undefined = getFilterOrParameterType(parameter, propertyInfos);\n\t\t\tif (selectionOptionsPropertyNames.includes(parameter) && parameterType) {\n\t\t\t\trelevantParameters[parameter] = {\n\t\t\t\t\tvalue: selectionVariant.getSelectOption(parameter)?.[0].Low,\n\t\t\t\t\ttype: parameterType\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\treturn relevantParameters;\n}\n\n/**\n * Return the type of filter or parameter.\n * @param paramOrFilter Parameter or filter name\n * @param propertyInfos PropertyInfoSet of the filter bar\n * @returns Type of filter or parameter\n */\n\nfunction getFilterOrParameterType(paramOrFilter: string, propertyInfos: PropertyInfo[]): string | undefined {\n\tlet filterParamType;\n\tpropertyInfos.forEach((propInfo: PropertyInfo) => {\n\t\tif (propInfo.name === paramOrFilter) {\n\t\t\tfilterParamType = filterTypeMapper[propInfo.dataType];\n\t\t}\n\t});\n\treturn filterParamType;\n}\n\n/**\n * Constructs the insights parameters that are required to create the insights card from the table.\n * @param cardType Card type\n * @param controlAPI Control API\n * @param filterBarId Filter bar ID\n * @param insightsRelevantColumns Insights-relevant columns\n * @returns The insights parameters from the table.\n */\nexport async function createInsightsParams(\n\tcardType: CardType,\n\tcontrolAPI: BuildingBlock | ChartType,\n\tfilterBarId: string | null,\n\tinsightsRelevantColumns?: TableCardColumn[]\n): Promise<InsightsParams<Partial<TableContent | ChartContent>> | undefined> {\n\tconst isCardCreationSupported = isInsightsCardCreationPossible(filterBarId, insightsRelevantColumns);\n\tif (!isCardCreationSupported) {\n\t\tshowErrorMessageForInsightsCard(cardType, getResourceModel(controlAPI));\n\t\treturn;\n\t}\n\n\tif (!controlAPI.content) {\n\t\t// This should never happen and is here mainly to avoid eslint errors\n\t\tthrow new Error(\"Control API content is null or undefined\");\n\t}\n\n\tconst appComponent = CommonUtils.getAppComponent(controlAPI.content);\n\tconst filterBar = Element.getElementById(filterBarId) as FilterBar | undefined;\n\tconst control = controlAPI.content;\n\tconst controlState = (await StateUtil.retrieveExternalState(control as Table)) as LegacyFilterBarState; // define type for control state\n\tconst controlSV = stateFilterToSelectionVariant.getSelectionVariantFromConditions(\n\t\tcontrolState.filter as Record<string, ConditionObject[] | undefined>,\n\t\t(control as Table).getPropertyHelper() as PropertyHelper\n\t);\n\n\tlet relevantFilters: Record<string, FilterParameterType> | undefined,\n\t\trelevantParameters: Record<string, FilterParameterType> | undefined,\n\t\tmandatoryFilters: string[] = [];\n\tif (filterBar?.isA(\"sap.fe.macros.controls.FilterBar\")) {\n\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\tconst parameters: string[] = filterBarAPI.getParameters();\n\t\tconst filterBarSV: SelectionVariant = await filterBarAPI.getSelectionVariant();\n\t\tconst propertyInfos: PropertyInfo[] = filterBar.getPropertyInfoSet();\n\t\tmandatoryFilters = filterBarAPI.getMandatoryFilterPropertyNames();\n\t\trelevantFilters = getRelevantFilters(parameters, filterBarSV, propertyInfos, controlSV);\n\t\trelevantParameters = getRelevantParameters(parameters, filterBarSV, propertyInfos);\n\t}\n\tconst parentAppManifest = deepClone(appComponent.getManifest(), 20) as ManifestContent;\n\tconst appManifest = parentAppManifest[\"sap.app\"];\n\tif (appManifest[\"crossNavigation\"]) {\n\t\tdelete appManifest.crossNavigation;\n\t}\n\tconst insightsParams: InsightsParams<Partial<TableContent | ChartContent>> = {\n\t\tnavigation: createNavigationParameters(appComponent),\n\t\ttype: cardType,\n\t\trequestParameters: {\n\t\t\tserviceUrl: (controlAPI.content.getModel() as ODataModel).getServiceUrl(),\n\t\t\tqueryUrl: \"\",\n\t\t\tsortQuery: \"\"\n\t\t},\n\t\tcontent: {\n\t\t\tcardTitle: \"\"\n\t\t},\n\t\tparentAppManifest: parentAppManifest,\n\t\tparameters: {\n\t\t\tmandatoryFilters: mandatoryFilters,\n\t\t\tfilters: relevantFilters,\n\t\t\toDataParameters: relevantParameters\n\t\t},\n\t\tentitySetPath: \"\"\n\t};\n\n\treturn insightsParams;\n}\n\nexport function showGenericErrorMessage(scope: Control): void {\n\tconst resourceModel = ResourceModelHelper.getResourceModel(scope);\n\tMessageBox.error(resourceModel.getText(\"M_CARD_FAILURE_GENERIC\"));\n}\n\nexport function hasInsightActionEnabled(\n\tactions: ActionToolbarAction[],\n\tfilterBarId: string | null,\n\tinsightsRelevantColumns?: TableCardColumn[]\n): boolean {\n\tif (!isInsightsCardCreationPossible(filterBarId, insightsRelevantColumns)) {\n\t\treturn false;\n\t}\n\n\tlet isInsightActionEnabled = false;\n\tfor (const actionElement of actions) {\n\t\tconst action = actionElement.getAction();\n\t\tconst isActionForInsights = action.getId().includes(\"StandardAction::Insights\");\n\t\t//QUALMS: I don´t like that we currently do not have a clean model approach here and have to check for now\n\t\t//\t\t  the enablement and visibility state of the action\n\t\tisInsightActionEnabled = isActionForInsights && action.getVisible() && (action as Button).getEnabled();\n\t\tif (isInsightActionEnabled) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isInsightActionEnabled;\n}\n"],"mappings":"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","ignoreList":[],"file":"CommonInsightsHelper-dbg.js"}