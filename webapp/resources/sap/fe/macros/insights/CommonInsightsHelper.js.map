{"version":3,"file":"CommonInsightsHelper.js","names":["filterTypeMapper","isInsightsCardCreationPossible","filterbarId","insightsRelevantColumns","length","filterBar","Element","getElementById","isA","isSemanticDateFilterApplied","getParent","_exports","showErrorMessageForInsightsCard","type","resourceModel","headerText","getText","contentText","formattedTextString","MessageBox","error","onClose","Error","details","createNavigationParameters","appComponent","shellServiceHelper","getShellServices","navigationService","getNavigationService","hash","getHash","parsedHash","parseShellHash","iAppStateKey","getIAppStateKey","appVariantId","params","intent","semanticObject","action","getRelevantFilters","parameters","filterBarSV","propertyInfos","controlSV","selectionVariants","mergedSV","stateFilterToSelectionVariant","mergeSelectionVariants","selectionOptionsPropertyNames","getSelectOptionsPropertyNames","filterProp","filterType","getFilterOrParameterType","includes","reconstructedSV","id","getID","Parameters","SelectOptions","PropertyName","Ranges","getSelectOption","value","JSON","stringify","getRelevantParameters","selectionVariant","relevantParameters","parameter","parameterType","Low","paramOrFilter","filterParamType","forEach","propInfo","name","dataType","async","createInsightsParams","cardType","controlAPI","filterBarId","isCardCreationSupported","getResourceModel","content","CommonUtils","getAppComponent","control","controlState","StateUtil","retrieveExternalState","getSelectionVariantFromConditions","filter","getPropertyHelper","relevantFilters","mandatoryFilters","filterBarAPI","getParameters","getSelectionVariant","getPropertyInfoSet","getMandatoryFilterPropertyNames","parentAppManifest","deepClone","getManifest","appManifest","crossNavigation","insightsParams","navigation","requestParameters","serviceUrl","getModel","getServiceUrl","queryUrl","sortQuery","cardTitle","filters","oDataParameters","entitySetPath","showGenericErrorMessage","scope","ResourceModelHelper","hasInsightActionEnabled","actions","isInsightActionEnabled","actionElement","getAction","isActionForInsights","getId","getVisible","getEnabled"],"sources":["./CommonInsightsHelper.ts"],"sourcesContent":["import deepClone from \"sap/base/util/deepClone\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport type { LegacyFilterBarState } from \"sap/fe/core/controllerextensions/ViewState\";\nimport ResourceModelHelper, { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport type { PropertyInfo } from \"sap/fe/macros/internal/PropertyInfo\";\nimport type SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type Button from \"sap/m/Button\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport type { ManifestContent } from \"sap/ui/core/Manifest\";\nimport type { CardType, TableCardColumn } from \"sap/ui/integration/widgets/Card\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type PropertyHelper from \"sap/ui/mdc/util/PropertyHelper\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ChartType from \"../Chart\";\nimport stateFilterToSelectionVariant from \"../mdc/adapter/StateFilterToSelectionVariant\";\nimport type { ChartContent, InsightsParams, TableContent } from \"./InsightsService\";\n\nexport type ControlState = Record<string, object | undefined> & {\n\tfilter?: Record<string, unknown[] | undefined>;\n\tgroupLevels?: {\n\t\tname: string;\n\t}[];\n};\n\nexport type FilterParameterType = {\n\tvalue: unknown;\n\ttype: string;\n};\n\nconst filterTypeMapper: Record<string, string> = {\n\t\"sap.ui.model.odata.type.String\": \"string\",\n\t\"sap.ui.model.odata.type.Int\": \"integer\",\n\t\"sap.ui.model.odata.type.Int32\": \"integer\",\n\t\"sap.ui.model.odata.type.Int64\": \"integer\",\n\t\"sap.ui.model.odata.type.Boolean\": \"boolean\",\n\t\"sap.ui.model.odata.type.Decimal\": \"number\",\n\t\"sap.ui.model.odata.type.Double\": \"number\",\n\t\"sap.ui.model.odata.type.Date\": \"date\",\n\t\"sap.ui.model.odata.type.DateTimeOffset\": \"datetime\"\n};\n\n/**\n * Checks if the insights card creation is possible.\n * @param filterbarId\n * @param insightsRelevantColumns\n * @returns True if the insights card can be created.\n */\nexport function isInsightsCardCreationPossible(filterbarId: string | null, insightsRelevantColumns?: TableCardColumn[]): boolean {\n\tif (insightsRelevantColumns && insightsRelevantColumns.length === 0) {\n\t\treturn false;\n\t}\n\tconst filterBar = Element.getElementById(filterbarId);\n\tif (filterBar?.isA(\"sap.fe.macros.controls.FilterBar\")) {\n\t\t//cards can not be created if semantic date operators are applied on the filters\n\t\tconst isSemanticDateFilterApplied = (filterBar.getParent() as FilterBarAPI).isSemanticDateFilterApplied();\n\t\treturn !isSemanticDateFilterApplied;\n\t}\n\treturn true;\n}\n\n/**\n * Display a message box for the scenarios where the insights card cannot be created.\n * @param type Card type\n * @param resourceModel Resource model to be used to fetch messages\n */\nfunction showErrorMessageForInsightsCard(type: CardType, resourceModel: ResourceModel): void {\n\tif (type === \"Table\") {\n\t\tconst headerText = `<strong>\n\t\t${resourceModel.getText(\"M_CARD_RETRY_MESSAGE\")}\n\t\t</strong>`;\n\t\tconst contentText = `<ul><li>\n\t\t\t${resourceModel.getText(\"M_CARD_FAILURE_REASON_DATE_RANGE_FILTERS\")}\n\t\t\t</li><li>\n\t\t\t${resourceModel.getText(\"M_CARD_FAILURE_TABLE_REASON_UNSUPPORTED_COLUMNS\")}\n\t\t\t</li></ul>`;\n\t\tconst formattedTextString = headerText + contentText;\n\t\tMessageBox.error(resourceModel.getText(\"M_CARD_CREATION_FAILURE\"), {\n\t\t\tonClose: function () {\n\t\t\t\tthrow new Error(\"Insights is not supported\");\n\t\t\t},\n\t\t\tdetails: formattedTextString\n\t\t});\n\t} else {\n\t\tconst formattedTextString = resourceModel.getText(\"M_CARD_CREATION_FAILURE_CHART_REASON_DATE_RANGE_FILTERS\");\n\t\tMessageBox.error(formattedTextString, {\n\t\t\tonClose: function () {\n\t\t\t\tthrow new Error(\"Insights is not supported\");\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Extract parameters relevant for navigation.\n * @param appComponent AppComponent instance to be used to access shell services\n * @returns An instance of the navigation parameters\n */\nfunction createNavigationParameters(appComponent: AppComponent): InsightsParams[\"navigation\"] {\n\tconst shellServiceHelper = appComponent.getShellServices();\n\tconst navigationService = appComponent.getNavigationService();\n\tconst hash = shellServiceHelper.getHash();\n\tconst parsedHash = shellServiceHelper.parseShellHash(hash);\n\treturn {\n\t\tiAppStateKey: navigationService.getIAppStateKey(),\n\t\tappVariantId: parsedHash.params?.[\"sap-appvar-id\"]?.[0],\n\t\tintent: {\n\t\t\tsemanticObject: parsedHash.semanticObject,\n\t\t\taction: parsedHash.action\n\t\t}\n\t};\n}\n\n/**\n * Extract the applied filters.\n * @param parameters Array of parameters that are fetched from the custom data of the filter bar\n * @param filterBarSV Selection variant for the filter bar\n * @param propertyInfos PropertyInfoSet of the filter bar\n * @param controlSV\n * @returns An object containing the applied filters\n */\nfunction getRelevantFilters(\n\tparameters: string[],\n\tfilterBarSV: SelectionVariant,\n\tpropertyInfos: PropertyInfo[],\n\tcontrolSV: SelectionVariant\n): Record<string, FilterParameterType> {\n\tconst selectionVariants: Record<string, FilterParameterType> = {};\n\t// Merge the filterBarSV and controlSV filters using compareSelectOptions\n\tconst mergedSV = stateFilterToSelectionVariant.mergeSelectionVariants(filterBarSV, controlSV);\n\tconst selectionOptionsPropertyNames: string[] = mergedSV.getSelectOptionsPropertyNames();\n\tif (selectionOptionsPropertyNames.length) {\n\t\t// Add to insights only if filters exist\n\t\tfor (const filterProp of selectionOptionsPropertyNames) {\n\t\t\tconst filterType: string | undefined = getFilterOrParameterType(filterProp, propertyInfos);\n\t\t\tif (filterProp !== \"$editState\" && !parameters.includes(filterProp) && !filterProp.includes(\"$Parameter.\") && filterType) {\n\t\t\t\tconst reconstructedSV = {\n\t\t\t\t\tid: mergedSV.getID(),\n\t\t\t\t\tParameters: [],\n\t\t\t\t\tSelectOptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tPropertyName: filterProp,\n\t\t\t\t\t\t\tRanges: mergedSV.getSelectOption(filterProp)\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t};\n\n\t\t\t\tselectionVariants[filterProp] = {\n\t\t\t\t\tvalue: JSON.stringify(reconstructedSV),\n\t\t\t\t\ttype: filterType\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn selectionVariants;\n}\n\n/**\n * Extract the relevant parameters.\n * @param parameters Array of parameters that are fetched from the custom data of the filter bar\n * @param selectionVariant Selection variant for the filter bar\n * @param propertyInfos PropertyInfoSet of the filter bar\n * @returns An object containing the relevant parameters\n */\nfunction getRelevantParameters(\n\tparameters: string[],\n\tselectionVariant: SelectionVariant,\n\tpropertyInfos: PropertyInfo[]\n): Record<string, FilterParameterType> {\n\tconst relevantParameters: Record<string, FilterParameterType> = {};\n\tconst selectionOptionsPropertyNames: string[] = selectionVariant.getSelectOptionsPropertyNames();\n\tif (selectionOptionsPropertyNames.length) {\n\t\t// add to insights only if filters exist\n\t\tfor (const parameter of parameters) {\n\t\t\tconst parameterType: string | undefined = getFilterOrParameterType(parameter, propertyInfos);\n\t\t\tif (selectionOptionsPropertyNames.includes(parameter) && parameterType) {\n\t\t\t\trelevantParameters[parameter] = {\n\t\t\t\t\tvalue: selectionVariant.getSelectOption(parameter)?.[0].Low,\n\t\t\t\t\ttype: parameterType\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\treturn relevantParameters;\n}\n\n/**\n * Return the type of filter or parameter.\n * @param paramOrFilter Parameter or filter name\n * @param propertyInfos PropertyInfoSet of the filter bar\n * @returns Type of filter or parameter\n */\n\nfunction getFilterOrParameterType(paramOrFilter: string, propertyInfos: PropertyInfo[]): string | undefined {\n\tlet filterParamType;\n\tpropertyInfos.forEach((propInfo: PropertyInfo) => {\n\t\tif (propInfo.name === paramOrFilter) {\n\t\t\tfilterParamType = filterTypeMapper[propInfo.dataType];\n\t\t}\n\t});\n\treturn filterParamType;\n}\n\n/**\n * Constructs the insights parameters that are required to create the insights card from the table.\n * @param cardType Card type\n * @param controlAPI Control API\n * @param filterBarId Filter bar ID\n * @param insightsRelevantColumns Insights-relevant columns\n * @returns The insights parameters from the table.\n */\nexport async function createInsightsParams(\n\tcardType: CardType,\n\tcontrolAPI: BuildingBlock | ChartType,\n\tfilterBarId: string | null,\n\tinsightsRelevantColumns?: TableCardColumn[]\n): Promise<InsightsParams<Partial<TableContent | ChartContent>> | undefined> {\n\tconst isCardCreationSupported = isInsightsCardCreationPossible(filterBarId, insightsRelevantColumns);\n\tif (!isCardCreationSupported) {\n\t\tshowErrorMessageForInsightsCard(cardType, getResourceModel(controlAPI));\n\t\treturn;\n\t}\n\n\tif (!controlAPI.content) {\n\t\t// This should never happen and is here mainly to avoid eslint errors\n\t\tthrow new Error(\"Control API content is null or undefined\");\n\t}\n\n\tconst appComponent = CommonUtils.getAppComponent(controlAPI.content);\n\tconst filterBar = Element.getElementById(filterBarId) as FilterBar | undefined;\n\tconst control = controlAPI.content;\n\tconst controlState = (await StateUtil.retrieveExternalState(control as Table)) as LegacyFilterBarState; // define type for control state\n\tconst controlSV = stateFilterToSelectionVariant.getSelectionVariantFromConditions(\n\t\tcontrolState.filter as Record<string, ConditionObject[] | undefined>,\n\t\t(control as Table).getPropertyHelper() as PropertyHelper\n\t);\n\n\tlet relevantFilters: Record<string, FilterParameterType> | undefined,\n\t\trelevantParameters: Record<string, FilterParameterType> | undefined,\n\t\tmandatoryFilters: string[] = [];\n\tif (filterBar?.isA(\"sap.fe.macros.controls.FilterBar\")) {\n\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\tconst parameters: string[] = filterBarAPI.getParameters();\n\t\tconst filterBarSV: SelectionVariant = await filterBarAPI.getSelectionVariant();\n\t\tconst propertyInfos: PropertyInfo[] = filterBar.getPropertyInfoSet();\n\t\tmandatoryFilters = filterBarAPI.getMandatoryFilterPropertyNames();\n\t\trelevantFilters = getRelevantFilters(parameters, filterBarSV, propertyInfos, controlSV);\n\t\trelevantParameters = getRelevantParameters(parameters, filterBarSV, propertyInfos);\n\t}\n\tconst parentAppManifest = deepClone(appComponent.getManifest(), 20) as ManifestContent;\n\tconst appManifest = parentAppManifest[\"sap.app\"];\n\tif (appManifest[\"crossNavigation\"]) {\n\t\tdelete appManifest.crossNavigation;\n\t}\n\tconst insightsParams: InsightsParams<Partial<TableContent | ChartContent>> = {\n\t\tnavigation: createNavigationParameters(appComponent),\n\t\ttype: cardType,\n\t\trequestParameters: {\n\t\t\tserviceUrl: (controlAPI.content.getModel() as ODataModel).getServiceUrl(),\n\t\t\tqueryUrl: \"\",\n\t\t\tsortQuery: \"\"\n\t\t},\n\t\tcontent: {\n\t\t\tcardTitle: \"\"\n\t\t},\n\t\tparentAppManifest: parentAppManifest,\n\t\tparameters: {\n\t\t\tmandatoryFilters: mandatoryFilters,\n\t\t\tfilters: relevantFilters,\n\t\t\toDataParameters: relevantParameters\n\t\t},\n\t\tentitySetPath: \"\"\n\t};\n\n\treturn insightsParams;\n}\n\nexport function showGenericErrorMessage(scope: Control): void {\n\tconst resourceModel = ResourceModelHelper.getResourceModel(scope);\n\tMessageBox.error(resourceModel.getText(\"M_CARD_FAILURE_GENERIC\"));\n}\n\nexport function hasInsightActionEnabled(\n\tactions: ActionToolbarAction[],\n\tfilterBarId: string | null,\n\tinsightsRelevantColumns?: TableCardColumn[]\n): boolean {\n\tif (!isInsightsCardCreationPossible(filterBarId, insightsRelevantColumns)) {\n\t\treturn false;\n\t}\n\n\tlet isInsightActionEnabled = false;\n\tfor (const actionElement of actions) {\n\t\tconst action = actionElement.getAction();\n\t\tconst isActionForInsights = action.getId().includes(\"StandardAction::Insights\");\n\t\t//QUALMS: I don´t like that we currently do not have a clean model approach here and have to check for now\n\t\t//\t\t  the enablement and visibility state of the action\n\t\tisInsightActionEnabled = isActionForInsights && action.getVisible() && (action as Button).getEnabled();\n\t\tif (isInsightActionEnabled) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isInsightActionEnabled;\n}\n"],"mappings":"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","ignoreList":[]}