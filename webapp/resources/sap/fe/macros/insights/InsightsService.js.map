{"version":3,"file":"InsightsService.js","names":["MAX_TABLE_RECORDS","SERVICE_HOST","isAnalytical","type","content","getCardData","_ref","requestParameters","queryUrl","includes","serviceUrl","split","request","url","method","headers","batch","response","Accept","getCardHeader","insightsParams","cardHeader","title","cardTitle","actions","parameters","status","text","getActionObject","navTarget","ibnParams","sensitiveProps","nhHybridIAppStateKey","iAppStateKey","appVariantId","actionParams","ibnTarget","intent","JSON","stringify","getCardConfigParameters","mandatoryFilters","filters","navigation","entitySetPath","contentUrl","sortQuery","cardConfigParams","state","value","_relevantODataFilters","_relevantODataParameters","_mandatoryODataFilters","_mandatoryODataParameters","_entitySet","_contentDataUrl","_HeaderDataUrl","_contentTopQuery","_headerTopQuery","_contentSkipQuery","_headerSkipQuery","_contentSortQuery","_headerSortQuery","filter","push","parameter","getCardConfig","cardConfiguration","destinations","service","name","defaultUrl","csrfTokens","token1","data","oDataParameters","getIntegrationCardManifest","cardConfig","configuration","header","getAnalyticalCardContent","getTableCardContent","extension","_ref2","cardContent","path","maxItems","row","highlight","rowCriticality","undefined","columns","insightsRelevantColumns","groupBy","groupConditionName","property","groupDescending","descending","group","order","dir","isNavigationEnabled","chartType","chartProperties","dimensions","measures","feeds","actionableArea","_exports","async","getManifestSapInsights","_ref3","parentAppManifest","ui5Version","VersionInfo","load","manifestParams","parentAppId","id","cardType","versions","ui5","version","buildTimestamp","filterEntitySet","allowedChartTypes","createCardManifest","appManifest","ui5Manifest","defaultModel","models","dataSourceService","dataSource","insightsCardManifest","Date","now","dataSources","filterService","contentDensities","dependencies","libs","lazy","componentName","showInsightsCardPreview","cardCreationDialogWarning","default","cardHelper","__ui5_require_async","cardHelperInstance","getServiceAsync","card","showCardPreview","showCollaborationManagerCardPreview","cmInstance","buttonText","Library","getResourceBundleFor","getText","event","cardManifest","getParameter","getSource","getManifest","publishCard","getCardManifest"],"sources":["./InsightsService.ts"],"sourcesContent":["import type { ContentDensitiesType } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { CollaborationManagerService } from \"sap/fe/core/services/CollaborationManagerServiceFactory\";\nimport type { FilterParameterType } from \"sap/fe/macros/insights/CommonInsightsHelper\";\nimport type { CardManifest, CardMessage } from \"sap/insights/CardHelper\";\nimport VersionInfo from \"sap/ui/VersionInfo\";\nimport Library from \"sap/ui/core/Lib\";\nimport type { ManifestContent } from \"sap/ui/core/Manifest\";\nimport type {\n\tActionParams,\n\tCardConfigParameters,\n\tCardConfiguration,\n\tCardData,\n\tCardHeader,\n\tCardType,\n\tChartCardContent,\n\tTableCardColumn,\n\tTableCardContent\n} from \"sap/ui/integration/widgets/Card\";\nimport type { ParsedHash } from \"sap/ushell/services/URLParsing\";\n\nexport type ChartContent = Pick<ChartCardContent, \"dimensions\" | \"feeds\" | \"measures\" | \"chartType\" | \"chartProperties\"> & {\n\tcardTitle: string;\n\tlegendVisible: boolean;\n\tallowedChartTypes: CardManifest[\"sap.insights\"][\"allowedChartTypes\"];\n};\n\ntype InsightRequestParameters = {\n\t// all parameters related to request for the data\n\tserviceUrl: string;\n\tqueryUrl: string;\n\tgroupBy?: {\n\t\tproperty: string;\n\t\tdescending?: boolean;\n\t};\n\tsortQuery: string;\n};\n\nexport type TableContent = {\n\trowCriticality: string | undefined;\n\tcardTitle: string;\n\tinsightsRelevantColumns: TableCardColumn[];\n};\n\nexport type InsightsParams<C = TableContent | ChartContent> = {\n\tnavigation: {\n\t\tiAppStateKey: string | undefined;\n\t\tintent: ParsedHash;\n\t\tappVariantId?: string;\n\t};\n\ttype: CardType;\n\trequestParameters: InsightRequestParameters;\n\tcontent: C;\n\tparentAppManifest: ManifestContent;\n\tparameters: {\n\t\tmandatoryFilters?: string[];\n\t\tfilters?: Record<string, FilterParameterType>;\n\t\toDataParameters?: Record<string, FilterParameterType>;\n\t\tsensitiveProperties?: string[];\n\t\tisNavigationEnabled?: boolean;\n\t};\n\tentitySetPath: string;\n};\n\nconst MAX_TABLE_RECORDS = 15;\nconst SERVICE_HOST = \"{{destinations.service}}\";\n\n/**\n * Checks whether the parameters have analytical or table content.\n * @param type Card type\n * @param content Content that is to be typed\n * @returns Type checked true if the parameters contain content for an analytical card\n */\nfunction isAnalytical(type: string, content: TableContent | ChartContent): content is ChartContent {\n\treturn type === \"Analytical\";\n}\n\n/**\n * Constructs the request object to fetch data for the insights card.\n * @param insightsParams\n * @param insightsParams.type\n * @param insightsParams.requestParameters\n * @returns The request data for the insights card.\n */\nfunction getCardData({ type, requestParameters }: InsightsParams<unknown>): CardData {\n\t// manipulate the query url based on card type and service url\n\tlet queryUrl = requestParameters.queryUrl;\n\tif (requestParameters.queryUrl.includes(requestParameters.serviceUrl)) {\n\t\tqueryUrl = requestParameters.queryUrl.split(requestParameters.serviceUrl)[1];\n\t}\n\tif (type === \"Table\") {\n\t\t// fetch only the first 15 records\n\t\tqueryUrl = `${queryUrl}&$top=${MAX_TABLE_RECORDS}`;\n\t}\n\n\treturn {\n\t\trequest: {\n\t\t\turl: `${SERVICE_HOST}${requestParameters.serviceUrl}$batch`,\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"X-CSRF-Token\": \"{{csrfTokens.token1}}\"\n\t\t\t},\n\t\t\tbatch: {\n\t\t\t\tresponse: {\n\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\turl: queryUrl,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\tAccept: \"application/json\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * Constructs the card header for the insights card.\n * Includes the status to be shown and the navigation action to be configured on the insights card.\n * @param insightsParams\n * @returns The card header\n */\nfunction getCardHeader(insightsParams: InsightsParams): CardHeader {\n\tconst cardHeader: CardHeader = {\n\t\ttitle: insightsParams.content.cardTitle,\n\t\tactions: [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/state/value})}\"\n\t\t\t}\n\t\t]\n\t};\n\tif (insightsParams.type === \"Table\") {\n\t\tcardHeader.status = {\n\t\t\ttext: \"{/response/@odata.count}\" // number of records on LR received as part of the request\n\t\t};\n\t}\n\treturn cardHeader;\n}\n\n/**\n * Construct the action object that is required by the insights card.\n * This is used to configure the navigation from the card to the source application.\n * @param navTarget\n * @returns The action object\n */\nfunction getActionObject(navTarget: InsightsParams[\"navigation\"]): string {\n\tlet ibnParams = {\n\t\tsensitiveProps: [],\n\t\tnhHybridIAppStateKey: navTarget.iAppStateKey\n\t}\n\tif (navTarget.appVariantId) {\n\t\tibnParams = {...ibnParams, ...{\"sap-appvar-id\": navTarget.appVariantId}};\n\t}\n\tconst actionParams: ActionParams = {\n\t\tparameters: {\n\t\t\tibnTarget: navTarget.intent,\n\t\t\tibnParams: ibnParams\n\t\t}\n\t};\n\treturn JSON.stringify(actionParams);\n}\n\n/**\n * Construct the card configuration parameters required by the insights card.\n * This includes filters, parameters, sensitive properties and the action object for the navigation.\n * @param mandatoryFilters List of mandatory filters\n * @param filters Object containing the filters\n * @param navigation Navigation parameters\n * @param entitySetPath Entity set path\n * @param parameters Collection of parameters\n * @param contentUrl URL to fetch the content\n * @param sortQuery Sort query\n * @param type Card type\n * @returns The card configuration parameters\n */\nfunction getCardConfigParameters(\n\tmandatoryFilters: string[],\n\tfilters: Record<string, FilterParameterType>,\n\tnavigation: InsightsParams[\"navigation\"],\n\tentitySetPath: string,\n\tparameters: Record<string, FilterParameterType>,\n\tcontentUrl: string,\n\tsortQuery: string,\n\ttype: CardType\n): CardConfigParameters {\n\tconst cardConfigParams: CardConfigParameters = {\n\t\tstate: {\n\t\t\tvalue: getActionObject(navigation)\n\t\t},\n\t\t_relevantODataFilters: {\n\t\t\tvalue: []\n\t\t},\n\t\t_relevantODataParameters: {\n\t\t\tvalue: []\n\t\t},\n\t\t_mandatoryODataFilters: {\n\t\t\tvalue: mandatoryFilters\n\t\t},\n\t\t_mandatoryODataParameters: {\n\t\t\tvalue: []\n\t\t},\n\t\tsensitiveProps: [],\n\t\t_entitySet: {\n\t\t\tvalue: entitySetPath\n\t\t},\n\t\t_contentDataUrl: {\n\t\t\tvalue: contentUrl\n\t\t},\n\t\t_HeaderDataUrl: {\n\t\t\tvalue: contentUrl\n\t\t},\n\t\t_contentTopQuery: {\n\t\t\tvalue: type === \"Table\" ? `$top=${MAX_TABLE_RECORDS}` : \"\"\n\t\t},\n\t\t_headerTopQuery: {\n\t\t\tvalue: type === \"Table\" ? `$top=${MAX_TABLE_RECORDS}` : \"\"\n\t\t},\n\t\t_contentSkipQuery: {\n\t\t\tvalue: type === \"Table\" ? \"$skip=0\" : \"\"\n\t\t},\n\t\t_headerSkipQuery: {\n\t\t\tvalue: type === \"Table\" ? \"$skip=0\" : \"\"\n\t\t},\n\t\t_contentSortQuery: {\n\t\t\tvalue: sortQuery === \"\" ? \"\" : `$orderby=${sortQuery}`\n\t\t},\n\t\t_headerSortQuery: {\n\t\t\tvalue: sortQuery === \"\" ? \"\" : `$orderby=${sortQuery}`\n\t\t}\n\t};\n\tfor (const filter in filters) {\n\t\tcardConfigParams._relevantODataFilters.value.push(filter);\n\t\tcardConfigParams[filter] = {\n\t\t\tvalue: filters[filter].value,\n\t\t\ttype: filters[filter].type\n\t\t};\n\t}\n\tfor (const parameter in parameters) {\n\t\tcardConfigParams._relevantODataParameters.value.push(parameter);\n\t\tcardConfigParams._mandatoryODataParameters.value.push(parameter);\n\t\tcardConfigParams[parameter] = {\n\t\t\tvalue: parameters[parameter].value,\n\t\t\ttype: parameters[parameter].type\n\t\t};\n\t}\n\treturn cardConfigParams;\n}\n\n/**\n * Construct the card configuration for the insights card.\n * @param insightsParams\n * @returns The card configuration for the insights card.\n */\nfunction getCardConfig(insightsParams: InsightsParams): CardConfiguration {\n\tconst cardConfiguration: CardConfiguration = {};\n\tconst serviceUrl = insightsParams.requestParameters.serviceUrl;\n\tcardConfiguration.destinations = { service: { name: \"(default)\", defaultUrl: \"/\" } };\n\tcardConfiguration.csrfTokens = {\n\t\ttoken1: {\n\t\t\tdata: {\n\t\t\t\trequest: {\n\t\t\t\t\turl: `${SERVICE_HOST}${serviceUrl}`,\n\t\t\t\t\tmethod: \"HEAD\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tcardConfiguration.parameters = getCardConfigParameters(\n\t\tinsightsParams.parameters.mandatoryFilters ?? [],\n\t\tinsightsParams.parameters.filters ?? {},\n\t\tinsightsParams.navigation,\n\t\tinsightsParams.entitySetPath,\n\t\tinsightsParams.parameters.oDataParameters ?? {},\n\t\tinsightsParams.requestParameters.queryUrl,\n\t\tinsightsParams.requestParameters.sortQuery,\n\t\tinsightsParams.type\n\t);\n\treturn cardConfiguration;\n}\n\n/**\n * Construct the manifest entry for sap.card namespace of the insights card.\n * @param insightsParams\n * @returns The card manifest entry for the sap.card namespace\n */\nfunction getIntegrationCardManifest(insightsParams: InsightsParams): CardManifest[\"sap.card\"] {\n\tconst cardConfig: Partial<CardManifest[\"sap.card\"]> = {\n\t\ttype: insightsParams.type\n\t};\n\tcardConfig.configuration = getCardConfig(insightsParams);\n\tcardConfig.header = getCardHeader(insightsParams);\n\tcardConfig.data = getCardData(insightsParams);\n\tif (isAnalytical(insightsParams.type, insightsParams.content)) {\n\t\tcardConfig.content = getAnalyticalCardContent(insightsParams.content);\n\t} else {\n\t\tcardConfig.content = getTableCardContent(insightsParams as InsightsParams<TableContent>);\n\t}\n\tcardConfig.extension = \"module:sap/fe/core/InsightsFormattersExtension\";\n\treturn cardConfig as CardManifest[\"sap.card\"];\n}\n\n/**\n * Constructs the card content for the insights card.\n * Includes the configuration of a navigation action and the creation of bindings to read the data from the response of the back end.\n * @param insightsParams\n * @param insightsParams.requestParameters\n * @param insightsParams.content\n * @param insightsParams.parameters\n * @returns The card content for the insights card.\n */\nfunction getTableCardContent({ requestParameters, content, parameters }: InsightsParams<TableContent>): TableCardContent {\n\tconst cardContent: TableCardContent = {\n\t\tdata: {\n\t\t\tpath: \"/response/value\"\n\t\t},\n\t\tmaxItems: MAX_TABLE_RECORDS,\n\t\trow: {\n\t\t\thighlight: content.rowCriticality ? content.rowCriticality : undefined,\n\t\t\tcolumns: content.insightsRelevantColumns\n\t\t}\n\t};\n\tif (requestParameters.groupBy) {\n\t\tconst groupConditionName = requestParameters.groupBy.property;\n\t\tconst groupDescending = requestParameters.groupBy.descending;\n\t\tcardContent.group = {\n\t\t\ttitle: \"{\" + groupConditionName + \"}\",\n\t\t\torder: {\n\t\t\t\tpath: groupConditionName,\n\t\t\t\tdir: groupDescending === true ? \"DESC\" : \"ASC\"\n\t\t\t}\n\t\t};\n\t}\n\tif (parameters.isNavigationEnabled === true) {\n\t\tcardContent.row.actions = [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}\"\n\t\t\t}\n\t\t];\n\t}\n\treturn cardContent;\n}\n\n/**\n * Creates the chart card content for the insights card.\n * @param content Content configuration for an analytical card\n * @returns The chart card content\n */\nexport function getAnalyticalCardContent(content: ChartContent): ChartCardContent {\n\treturn {\n\t\tchartType: content.chartType,\n\t\tchartProperties: content.chartProperties as never,\n\t\tdata: { path: \"/response/value\" },\n\t\tdimensions: content.dimensions,\n\t\tmeasures: content.measures,\n\t\tfeeds: content.feeds,\n\t\tactions: [\n\t\t\t{\n\t\t\t\ttype: \"Navigation\",\n\t\t\t\tparameters: \"{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}\"\n\t\t\t}\n\t\t],\n\t\tactionableArea: \"Chart\"\n\t};\n}\n\n/**\n * Construct the manifest entry for sap.insights namespace of the insights card.\n * @param params\n * @param params.parentAppManifest Manifest of the target application\n * @param params.entitySetPath Entity set to be used for filtering\n * @param params.type Card type\n * @param params.content Content specific parameters\n * @returns The card manifest entry for the sap.insights namespace\n */\nasync function getManifestSapInsights({\n\tparentAppManifest,\n\tentitySetPath,\n\ttype,\n\tcontent\n}: InsightsParams): Promise<CardManifest[\"sap.insights\"]> {\n\tconst ui5Version = await VersionInfo.load();\n\tconst manifestParams: CardManifest[\"sap.insights\"] = {\n\t\tparentAppId: parentAppManifest[\"sap.app\"].id,\n\t\tcardType: \"RT\",\n\t\tversions: {\n\t\t\tui5: ui5Version.version + \"-\" + ui5Version.buildTimestamp\n\t\t},\n\t\tfilterEntitySet: entitySetPath\n\t};\n\tif (isAnalytical(type, content)) {\n\t\tmanifestParams.allowedChartTypes = content.allowedChartTypes;\n\t}\n\treturn manifestParams;\n}\n/**\n * Creates the card manifest for the insights card.\n * @param insightsParams\n * @returns The insights card\n */\nexport async function createCardManifest(insightsParams: InsightsParams): Promise<CardManifest> {\n\tconst appManifest = { ...insightsParams.parentAppManifest[\"sap.app\"] };\n\tconst ui5Manifest = { ...insightsParams.parentAppManifest[\"sap.ui5\"] };\n\tconst defaultModel = ui5Manifest.models[\"\"];\n\tconst dataSourceService = defaultModel.dataSource ? defaultModel.dataSource : \"\";\n\tconst insightsCardManifest: Partial<CardManifest> = {};\n\tappManifest.id = `user.${appManifest.id}.${Date.now()}`;\n\tappManifest.type = \"card\";\n\tappManifest.dataSources.filterService = { ...appManifest.dataSources[dataSourceService] };\n\tinsightsCardManifest[\"sap.app\"] = appManifest as CardManifest[\"sap.app\"];\n\tinsightsCardManifest[\"sap.card\"] = getIntegrationCardManifest(insightsParams);\n\tinsightsCardManifest[\"sap.insights\"] = await getManifestSapInsights(insightsParams);\n\tinsightsCardManifest[\"sap.ui5\"] = {\n\t\tcontentDensities: ui5Manifest.contentDensities as ContentDensitiesType,\n\t\tdependencies: {\n\t\t\tlibs: {\n\t\t\t\t\"sap.insights\": {\n\t\t\t\t\tlazy: false\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomponentName: insightsCardManifest[\"sap.app\"].id\n\t};\n\treturn insightsCardManifest as CardManifest;\n}\n\n/**\n * Create the manifest of the insights card and show a preview of the card that is created.\n * @param insightsParams\n * @param cardCreationDialogWarning\n */\nexport async function showInsightsCardPreview(insightsParams: InsightsParams, cardCreationDialogWarning?: CardMessage): Promise<void> {\n\tconst { default: cardHelper } = await import(\"sap/insights/CardHelper\");\n\tconst cardHelperInstance = await cardHelper.getServiceAsync(\"UIService\");\n\tconst card = await createCardManifest(insightsParams);\n\tawait cardHelperInstance.showCardPreview(card, true, cardCreationDialogWarning);\n}\n\n/**\n * Create the manifest of the insights card and show a preview of the card that is created for collaboration manager.\n * @param card The card manifest to be used for the callback\n * @param cmInstance The current CollaborationManagerService instance\n */\nexport async function showCollaborationManagerCardPreview(card: CardManifest, cmInstance: CollaborationManagerService): Promise<void> {\n\tconst { default: cardHelper } = await import(\"sap/insights/CardHelper\");\n\tconst cardHelperInstance = await cardHelper.getServiceAsync(\"UIService\");\n\tconst buttonText = Library.getResourceBundleFor(\"sap.fe.macros\")?.getText(\"C_SEND_TO_COLLABORATION_MANAGER\");\n\tawait cardHelperInstance.showCardPreview(card, true, { type: \"None\" }, buttonText, (event) => {\n\t\t// We need to introduce this check as there seems to be a regression that the 'manifest' parameters is not filled in some versions\n\t\tconst cardManifest = event.getParameter(\"manifest\") ?? event.getSource().getManifest();\n\t\tcmInstance.publishCard(cardManifest);\n\t});\n}\n\nexport async function getCardManifest(insightsParams: InsightsParams): Promise<CardManifest> {\n\treturn createCardManifest(insightsParams);\n}\n"],"mappings":"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","ignoreList":[]}