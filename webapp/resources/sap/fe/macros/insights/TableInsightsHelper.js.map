{"version":3,"file":"TableInsightsHelper.js","names":["getUomBinding","propertyTargetObject","property","uom","annotations","Measures","ISOCurrency","Unit","propertyBinding","pathInModel","compileExpression","concat","getExpressionFromAnnotation","isAnnotationTableColumn","column","getSupportedColumns","columns","table","metaData","reduce","supportedColumns","name","dataField","resolvePath","annotationPath","target","isDataFieldTypes","Value","$target","isImageURL","isMultiValue","push","formatOptions","typeConfig","getAdditionalText","displayMode","dataModel","propertyBindingExpression","getContextRelativeTargetObjectPath","targetObject","commonText","Common","Text","undefined","formatWithTypeInformation","relativeLocation","getRelativePaths","formatResult","valueFormatters","formatToKeepWhitespace","_exports","getRowCriticality","tableAPI","getTableDefinition","annotation","row","rowCriticalityForInsights","getInsightsRelevantColumns","getContent","metaModel","getModel","getMetaModel","metaPath","data","getColumns","forEach","getPropertyKey","context","getContext","objectPath","getInvolvedDataModelObjects","title","getProperty","convertTypes","map","supportedColumn","uomBinding","columnText","getTextBinding","visible","value","isSemanticKey","getDisplayMode","getTitleBindingExpression","FieldTemplating","getTextBindingExpression","splitTitleOnTwoLines","CommonUtils","getTargetView","getViewData","additionalText","identifier","criticalityBinding","getCriticalityBinding","state","showStateIcon","customStateIcon","Criticality","showCriticalityIcon","CriticalityRepresentation","criticalityExpressionForIntegrationCards","criticalityIconExpressionForIntegrationCards","async","createTableCardParams","controlAPI","insightsRelevantColumns","sortConditionsQuery","params","createInsightsParams","getFilter","controlState","StateUtil","retrieveExternalState","groupProperty","groupLevels","split","pop","requestParameters","groupBy","Error","parameters","isNavigationEnabled","entitySetPath","sortQuery","queryUrl","getRowBinding","getDownloadUrl","content","cardTitle","getHeader","rowCriticality","viewData","entitySet","navigationSetting","navigation","replace","detail","outbound","display"],"sources":["./TableInsightsHelper.ts"],"sourcesContent":["import type { ConvertedMetadata, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { ISOCurrency, Unit } from \"@sap-ux/vocabularies-types/vocabularies/Measures\";\nimport type { DataField, DataPointType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { CriticalityRepresentationType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconcat,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { BaseManifestSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataFieldTypes } from \"sap/fe/core/converters/annotations/DataField\";\nimport type { TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { AnnotationTableColumn, PropertyTypeFormatOptions, TableColumn } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { getTitleBindingExpression } from \"sap/fe/core/helpers/TitleHelper\";\nimport {\n\tcriticalityExpressionForIntegrationCards,\n\tcriticalityIconExpressionForIntegrationCards\n} from \"sap/fe/core/templating/CriticalityFormatters\";\nimport { getContextRelativeTargetObjectPath, getRelativePaths, type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type { DisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { isImageURL, isSemanticKey } from \"sap/fe/core/templating/PropertyHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/UIFormatters\";\nimport * as FieldTemplating from \"sap/fe/macros/field/FieldTemplating\";\nimport { getTextBinding } from \"sap/fe/macros/field/FieldTemplating\";\nimport type { TableCardColumn } from \"sap/ui/integration/widgets/Card\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport { type ITableBlock } from \"../table/TableAPI\";\nimport type { ControlState } from \"./CommonInsightsHelper\";\nimport { createInsightsParams } from \"./CommonInsightsHelper\";\nimport type { InsightsParams, TableContent } from \"./InsightsService\";\n\nfunction getUomBinding(propertyTargetObject: Property | undefined, property: string): CompiledBindingToolkitExpression {\n\tconst uom: ISOCurrency | Unit | undefined =\n\t\tpropertyTargetObject?.annotations.Measures?.ISOCurrency || propertyTargetObject?.annotations.Measures?.Unit;\n\tif (!uom) {\n\t\treturn;\n\t} else {\n\t\tconst propertyBinding = pathInModel(property);\n\t\treturn compileExpression(concat(propertyBinding, \" \", getExpressionFromAnnotation(uom)));\n\t}\n}\n\ntype ColumnInfo = {\n\tproperty: string;\n\ttitle: string;\n\tcontext: Context;\n\tobjectPath: DataModelObjectPath<Property>;\n\tannotationPath?: string;\n\tformatOptions?: PropertyTypeFormatOptions;\n};\n\n/**\n * Check if the given TableColumn is an AnnotationTableColumn.\n * @param column Column that is to be checked\n * @returns True of it is an AnnotationTableColumn\n */\nfunction isAnnotationTableColumn(column: TableColumn): column is AnnotationTableColumn {\n\treturn \"annotationPath\" in column;\n}\n\n/**\n * Get all columns that are supported with SAP Insights.\n * The current implementation does not support columns with image urls and columns with multiple values, therefore, they are removed here.\n * @param columns\n * @param table\n * @param metaData\n * @returns An array containing all supported columns.\n */\nfunction getSupportedColumns(columns: Record<string, ColumnInfo>, table: TableVisualization, metaData: ConvertedMetadata): ColumnInfo[] {\n\treturn table.columns.reduce(function (supportedColumns: ColumnInfo[], column) {\n\t\tif (column.name in columns && isAnnotationTableColumn(column)) {\n\t\t\tlet property;\n\t\t\tconst dataField = metaData.resolvePath<DataField>(column.annotationPath).target;\n\t\t\t// image urls and multi value columns are not supported\n\t\t\tif (isDataFieldTypes(dataField)) {\n\t\t\t\t// Check if it is from lineItem annotation else consider the property level annotation\n\t\t\t\tproperty = (dataField.Value as PropertyPath).$target;\n\t\t\t} else {\n\t\t\t\tproperty = metaData.resolvePath<Property>(column.annotationPath).target;\n\t\t\t}\n\t\t\tif (!(property && isImageURL(property)) && !column.isMultiValue) {\n\t\t\t\tsupportedColumns.push({\n\t\t\t\t\t...columns[column.name],\n\t\t\t\t\tannotationPath: column.annotationPath,\n\t\t\t\t\tformatOptions: column.typeConfig?.formatOptions\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn supportedColumns;\n\t}, []);\n}\n\nexport function getAdditionalText(displayMode: DisplayMode, dataModel: DataModelObjectPath<Property>): CompiledBindingToolkitExpression {\n\tlet propertyBindingExpression: BindingToolkitExpression<string> = pathInModel(getContextRelativeTargetObjectPath(dataModel));\n\tconst targetObject = dataModel.targetObject;\n\tconst commonText = targetObject?.annotations.Common?.Text;\n\tif (commonText === undefined || targetObject === undefined) {\n\t\treturn undefined;\n\t}\n\tpropertyBindingExpression = formatWithTypeInformation(targetObject, propertyBindingExpression);\n\n\tswitch (displayMode) {\n\t\tcase \"ValueDescription\":\n\t\t\tconst relativeLocation = getRelativePaths(dataModel);\n\t\t\treturn compileExpression(getExpressionFromAnnotation(commonText, relativeLocation));\n\t\tcase \"DescriptionValue\":\n\t\t\treturn compileExpression(formatResult([propertyBindingExpression], valueFormatters.formatToKeepWhitespace));\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n}\n\nexport function getRowCriticality(tableAPI: ITableBlock): string | undefined {\n\treturn tableAPI.getTableDefinition().annotation.row?.rowCriticalityForInsights;\n}\n\n/**\n * Filters the columns that can be shown on the insights card from the visible columns on the table.\n * @param tableAPI Table API\n * @returns A list of columns that can be shown on the insightsCard.\n */\nexport function getInsightsRelevantColumns(tableAPI: ITableBlock): TableCardColumn[] {\n\tconst table = tableAPI.getContent();\n\tconst metaModel = table.getModel()?.getMetaModel() as ODataMetaModel;\n\tconst metaPath = table.data(\"metaPath\") as string;\n\tconst columns: Record<string, ColumnInfo> = {};\n\ttable.getColumns().forEach((column) => {\n\t\tconst property = column.getPropertyKey();\n\t\tconst context = metaModel.getContext(metaPath + \"/\" + property);\n\t\tconst objectPath = getInvolvedDataModelObjects<Property>(context);\n\t\tconst title = column.getProperty(\"header\") as string;\n\t\tcolumns[property] = { property, context, objectPath, title };\n\t});\n\n\tconst supportedColumns = getSupportedColumns(columns, tableAPI.getTableDefinition(), convertTypes(metaModel));\n\n\treturn supportedColumns.map(function (supportedColumn) {\n\t\tconst dataModel = getInvolvedDataModelObjects<Property>(supportedColumn.context);\n\t\tconst propertyTargetObject = dataModel.targetObject;\n\t\tconst uomBinding = getUomBinding(propertyTargetObject, supportedColumn.property);\n\t\tconst columnText = uomBinding ?? getTextBinding(dataModel, {}, false, \"extension.formatters.sapfe.formatWithBrackets\");\n\t\tconst column: TableCardColumn = {\n\t\t\tvisible: false,\n\t\t\tvalue: columnText,\n\t\t\ttitle: supportedColumn.title\n\t\t};\n\t\tif (isSemanticKey(propertyTargetObject, dataModel)) {\n\t\t\tconst displayMode = getDisplayMode(dataModel);\n\t\t\tcolumn.value = getTitleBindingExpression(\n\t\t\t\tdataModel,\n\t\t\t\tFieldTemplating.getTextBindingExpression,\n\t\t\t\t{ displayMode, splitTitleOnTwoLines: true },\n\t\t\t\tundefined,\n\t\t\t\tCommonUtils.getTargetView(tableAPI).getViewData(),\n\t\t\t\t\"extension.formatters.sapfe.formatTitle\"\n\t\t\t);\n\t\t\tcolumn.additionalText = getAdditionalText(displayMode, dataModel);\n\t\t\tcolumn.identifier = true;\n\t\t}\n\t\tif (supportedColumn.annotationPath) {\n\t\t\tconst criticalityBinding = getCriticalityBinding(supportedColumn.annotationPath, metaPath, metaModel);\n\t\t\tif (criticalityBinding) {\n\t\t\t\tcolumn.state = criticalityBinding.state as CompiledBindingToolkitExpression;\n\t\t\t\tcolumn.showStateIcon = criticalityBinding.showStateIcon;\n\t\t\t\tcolumn.customStateIcon = criticalityBinding.customStateIcon;\n\t\t\t}\n\t\t}\n\t\treturn column;\n\t});\n}\n\n/**\n * Get criticality state binding expression and icon information.\n * @param annotationPath Annotation path\n * @param metaPath Meta path\n * @param metaModel Meta model\n * @returns The criticality state binding expression and icon information.\n */\nfunction getCriticalityBinding(annotationPath: string, metaPath: string, metaModel: ODataMetaModel): Partial<TableCardColumn> | undefined {\n\tconst dataModel = getInvolvedDataModelObjects(metaModel.getContext(annotationPath), metaModel.getContext(metaPath)),\n\t\tpropertyTargetObject = dataModel.targetObject as DataPointType;\n\tif (propertyTargetObject.Criticality) {\n\t\tconst showCriticalityIcon = propertyTargetObject.CriticalityRepresentation !== CriticalityRepresentationType.WithoutIcon;\n\t\treturn {\n\t\t\tstate: criticalityExpressionForIntegrationCards(propertyTargetObject.Criticality),\n\t\t\tshowStateIcon: showCriticalityIcon,\n\t\t\tcustomStateIcon: showCriticalityIcon ? criticalityIconExpressionForIntegrationCards(propertyTargetObject) : \"\"\n\t\t};\n\t}\n\treturn undefined;\n}\n\n/**\n * Constructs the insights parameters from the table that is required to create the insights card.\n * @param controlAPI\n * @param insightsRelevantColumns\n * @param sortConditionsQuery\n * @returns The insights parameters from the table.\n */\nexport async function createTableCardParams(\n\tcontrolAPI: ITableBlock,\n\tinsightsRelevantColumns: TableCardColumn[],\n\tsortConditionsQuery: string\n): Promise<InsightsParams<TableContent> | undefined> {\n\tconst table = controlAPI.getContent();\n\tconst params = await createInsightsParams(\"Table\", controlAPI, table.getFilter(), insightsRelevantColumns);\n\tif (!params) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst controlState = (await StateUtil.retrieveExternalState(table)) as ControlState;\n\t\tconst groupProperty = controlState.groupLevels?.[0]?.name.split(\"::\").pop();\n\t\tif (groupProperty) {\n\t\t\tparams.requestParameters.groupBy = {\n\t\t\t\tproperty: groupProperty\n\t\t\t};\n\t\t}\n\t} catch {\n\t\tthrow Error(\"Error retrieving control states\");\n\t}\n\tparams.parameters.isNavigationEnabled = isNavigationEnabled(controlAPI);\n\tparams.entitySetPath = table.data(\"metaPath\") as string;\n\tparams.requestParameters.sortQuery = sortConditionsQuery;\n\tparams.requestParameters.queryUrl = table.getRowBinding().getDownloadUrl() ?? \"\";\n\n\tconst content: TableContent = {\n\t\tcardTitle: table.getHeader(),\n\t\tinsightsRelevantColumns,\n\t\trowCriticality: getRowCriticality(controlAPI) ?? undefined\n\t};\n\n\treturn { ...params, content };\n}\n\n/**\n * Checks if row level navigation is enabled for table card.\n * @param controlAPI Table API\n * @returns True if row level navigation is enabled.\n */\nfunction isNavigationEnabled(controlAPI: ITableBlock): boolean {\n\tconst table = controlAPI.getContent(),\n\t\tviewData = CommonUtils.getTargetView(controlAPI).getViewData() as BaseManifestSettings,\n\t\tentitySet = table.data(\"metaPath\") as string,\n\t\tnavigationSetting = viewData.navigation?.[entitySet]\n\t\t\t? viewData.navigation[entitySet]\n\t\t\t: viewData.navigation?.[entitySet.replace(\"/\", \"\")];\n\t// Disable row level navigation if external navigation is configured for LR table using manifest\n\treturn !(navigationSetting?.detail?.outbound || navigationSetting?.display?.target);\n}\n"],"mappings":"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","ignoreList":[]}