{"version":3,"names":["IGNORED_PROPERTYNAMES","getPropertyObjectPath","filteredPropertyPath","metaModel","metaContext","createBindingContext","getInvolvedDataModelObjects","targetObject","undefined","prefillDescriptionInFilter","filter","propertyObjectPath","selectionVariant","length","operator","textProperty","annotations","Common","Text","isPathAnnotationExpression","selectOnText","getSelectOption","path","Option","Sign","values","push","Low","ValueListWithFixedValues","valueOf","selectionVariantToStateFilters","getStateFiltersFromSV","controlInfoForConversion","controlPropertyInfos","prefillDescriptions","contextPath","conditions","forEach","propertyMetadata","includes","name","filterPathConditions","conditionPath","annotationPath","propPath","replaceAll","navPath","substring","lastIndexOf","propertyName","propertyConversionInfo","propertyContextPath","controlInfo","isParameter","_getConditionsForParameter","_getConditionsForNavProperty","_getConditionsForProperty","_adjustValueListWithFixedValuesCondition","getStateToApply","propertyInfos","items","Object","keys","reduce","cummulativeItems","propertyInfo","FilterUtil","getPropertyByKey","hiddenFilter","_getPropertyFilterConfigurationSetting","property","filterFieldsConfig","settings","conditionObjects","selectOptionName","_getSelectOptionName","_getPropertyConditions","conditonPath","selectOptionPathPrefix","navigationPath","possibleSelectOptionNames","selectOptionsPropertyNames","getSelectOptionsPropertyNames","startsWith","slice","temp1","temp2","some","testName","pathToCheck","_getMaxConditions","completePropertyPath","propertyContext","maximumConditions","maxConditions","context","selectOptions","semanticDateOperators","_getSemanticDateOperators","propertyEntitySetPath","validOperators","CommonHelper","getOperatorsForProperty","_getConditionsFromSelectOptions","useSemanticDateRange","filterSettings","ODATA_TYPE_MAPPING","dataType","singleCondition","_addConditionFromSelectOption","bind","cumulativeConditions","selectOption","hasValueHelp","allSupportedOperators","edmType","_getEdmType","condition","getConditions","SemanticDates","semanticDates","_addSemanticDatesToConditions","high","low","isEmpty","TYPE_EDM_MAPPING","fromEntries","entries","EDM_TYPE_MAPPING","map","_ref","k","v","type","validated","ConditionValidated","Validated"],"sourceRoot":".","sources":["SelectionVariantToStateFilters.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport { EDM_TYPE_MAPPING } from \"sap/fe/base/BindingToolkit\";\nimport type {\n\tFilterFieldManifestConfiguration,\n\tFilterManifestConfiguration,\n\tFilterSettings\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport { ODATA_TYPE_MAPPING } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport { maxConditions } from \"sap/fe/macros/filter/FilterFieldHelper\";\nimport { getConditions } from \"sap/fe/macros/filterBar/FilterHelper\";\nimport type { ControlPropertyInfo } from \"sap/fe/macros/mdc/adapter/StateHelper\";\nimport type SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type { SelectOption, SemanticDateConfiguration } from \"sap/fe/navigation/SelectionVariant\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport ConditionValidated from \"sap/ui/mdc/enums/ConditionValidated\";\nimport type { StateToApply, Filter as StateUtilFilter } from \"sap/ui/mdc/p13n/StateUtil\";\nimport FilterUtil from \"sap/ui/mdc/util/FilterUtil\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nexport type FilterFieldsConfig = Record<string, FilterFieldManifestConfiguration>;\n\nexport type ConversionInfo = {\n\tmetaModel: ODataMetaModel;\n\tcontextPath: string;\n\tuseSemanticDateRange?: boolean;\n\tfilterFieldsConfig?: FilterFieldsConfig;\n\tselectionFieldsConfigs?: FilterManifestConfiguration;\n\tnavigationProperties?: string[];\n\tshowClearButton?: boolean;\n};\n\ntype PropertyConversionInfo = {\n\tpropertyName: string;\n\tnavPath: string;\n\tpropertyMetadata: ControlPropertyInfo;\n\tpropertyContextPath: string;\n\tselectionVariant: SelectionVariant;\n\tcontrolInfo: ConversionInfo;\n};\n\nconst IGNORED_PROPERTYNAMES: string[] = [\"$search\", \"$editState\"];\n\nfunction getPropertyObjectPath(filteredPropertyPath: string, metaModel: ODataMetaModel): Property | undefined {\n\tconst metaContext = metaModel.createBindingContext(filteredPropertyPath);\n\treturn metaContext !== null ? (getInvolvedDataModelObjects(metaContext).targetObject as Property) : undefined;\n}\n\n/**\n * Function to add the description of a code in a filter (to avoid fetching it with a query).\n * @param filter The filter to update\n * @param propertyObjectPath Property object path\n * @param selectionVariant The whole selection variant where we look for the description\n */\nfunction prefillDescriptionInFilter(filter: ConditionObject[], propertyObjectPath: Property, selectionVariant: SelectionVariant): void {\n\tif (filter.length !== 1 || filter[0].operator !== \"EQ\") {\n\t\t// We search for text properties only for single-value filters\n\t\treturn;\n\t}\n\n\tconst textProperty = propertyObjectPath.annotations.Common?.Text;\n\tif (textProperty && isPathAnnotationExpression(textProperty)) {\n\t\t// Search for the Text value in the selection variant definition\n\t\tconst selectOnText = selectionVariant.getSelectOption(textProperty.path);\n\t\tif (selectOnText?.length === 1 && selectOnText[0].Option === \"EQ\" && selectOnText[0].Sign === \"I\") {\n\t\t\t// Adding a second value in the condition will be interpreted as the Text value by the field\n\t\t\t// In case this value is empty, we use \" \"\n\t\t\tfilter[0].values.push(selectOnText[0].Low.length >= 1 ? selectOnText[0].Low : \" \");\n\t\t}\n\t}\n\tif (\n\t\tfilter[0].values.length === 1 &&\n\t\tfilter[0].values[0] === \"\" &&\n\t\tpropertyObjectPath.annotations.Common?.ValueListWithFixedValues?.valueOf() !== true\n\t) {\n\t\t// Special case: an empty property value was provided in the selection variant, and the VH is not with fixed values\n\t\t// --> we use a default string for the description (empty string doesn't work)\n\t\tfilter[0].values.push(\" \");\n\t}\n}\n\nconst selectionVariantToStateFilters = {\n\t/**\n\t * Get conditions from the selection variant.\n\t * @param selectionVariant Selection variant\n\t * @param controlInfoForConversion Control information needed for the conversion of the selection variant to conditions\n\t * @param controlPropertyInfos Property information of the filterbar\n\t * @param prefillDescriptions\n\t * @param metaModel\n\t * @returns Conditions after conversion of selection variant\n\t */\n\tgetStateFiltersFromSV: function (\n\t\tselectionVariant: SelectionVariant,\n\t\tcontrolInfoForConversion: ConversionInfo,\n\t\tcontrolPropertyInfos: ControlPropertyInfo[],\n\t\tprefillDescriptions: boolean,\n\t\tmetaModel: ODataMetaModel\n\t): StateUtilFilter {\n\t\tconst { contextPath } = controlInfoForConversion;\n\t\tconst conditions: StateUtilFilter = {};\n\n\t\tcontrolPropertyInfos.forEach(function (propertyMetadata: ControlPropertyInfo) {\n\t\t\tif (!IGNORED_PROPERTYNAMES.includes(propertyMetadata.name)) {\n\t\t\t\tlet filterPathConditions: ConditionObject[] = [];\n\t\t\t\tconst { conditionPath, annotationPath } = propertyMetadata;\n\t\t\t\tconst propPath = conditionPath.replaceAll(\"*\", \"\");\n\t\t\t\tconst navPath = propPath.substring(0, propPath.lastIndexOf(\"/\"));\n\t\t\t\tconst propertyName = propPath.substring(propPath.lastIndexOf(\"/\") + 1);\n\n\t\t\t\t// Note: Conversion parameters\n\t\t\t\tconst propertyConversionInfo: PropertyConversionInfo = {\n\t\t\t\t\tpropertyName,\n\t\t\t\t\tnavPath,\n\t\t\t\t\tpropertyContextPath: `${contextPath}${navPath ? navPath + \"/\" : \"\"}`,\n\t\t\t\t\tpropertyMetadata,\n\t\t\t\t\tselectionVariant,\n\t\t\t\t\tcontrolInfo: controlInfoForConversion\n\t\t\t\t};\n\t\t\t\tif (propertyMetadata.isParameter && annotationPath) {\n\t\t\t\t\t// parameter\n\t\t\t\t\tpropertyConversionInfo.propertyContextPath = annotationPath.substring(0, annotationPath.lastIndexOf(\"/\") + 1);\n\t\t\t\t\tfilterPathConditions = selectionVariantToStateFilters._getConditionsForParameter(propertyConversionInfo);\n\t\t\t\t} else if (conditionPath.includes(\"/\")) {\n\t\t\t\t\t// navigation property\n\t\t\t\t\tfilterPathConditions = selectionVariantToStateFilters._getConditionsForNavProperty(propertyConversionInfo);\n\t\t\t\t} else {\n\t\t\t\t\t// normal property\n\t\t\t\t\tfilterPathConditions = selectionVariantToStateFilters._getConditionsForProperty(propertyConversionInfo);\n\t\t\t\t}\n\n\t\t\t\tif (filterPathConditions.length > 0) {\n\t\t\t\t\tconst propertyObjectPath = getPropertyObjectPath(annotationPath, metaModel);\n\t\t\t\t\tif (propertyObjectPath) {\n\t\t\t\t\t\tif (propertyObjectPath.annotations.Common?.ValueListWithFixedValues) {\n\t\t\t\t\t\t\t// In case of fixed values, we would convert Empty operator to EQ->''.\n\t\t\t\t\t\t\tfilterPathConditions.forEach(selectionVariantToStateFilters._adjustValueListWithFixedValuesCondition);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (prefillDescriptions) {\n\t\t\t\t\t\t\tprefillDescriptionInFilter(filterPathConditions, propertyObjectPath, selectionVariant);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconditions[conditionPath] = filterPathConditions;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn conditions;\n\t},\n\n\t/**\n\t * Method returns filters and filterfield items to apply and add. Also checks whether the property is configured with hiddenFilter.\n\t * @param propertyInfos Property information of the control\n\t * @param conditions Condtions to apply as filters to the control\n\t * @returns The object containing filters and items.\n\t */\n\tgetStateToApply: (propertyInfos: ControlPropertyInfo[], conditions: StateUtilFilter): StateToApply => {\n\t\tconst items: Record<\"name\", string>[] = Object.keys(conditions).reduce(\n\t\t\t(cummulativeItems, path) => {\n\t\t\t\tconst propertyInfo = FilterUtil.getPropertyByKey(propertyInfos, path) as ControlPropertyInfo;\n\t\t\t\tif (propertyInfo.hiddenFilter === undefined || !propertyInfo.hiddenFilter) {\n\t\t\t\t\tcummulativeItems.push({\n\t\t\t\t\t\tname: path\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn cummulativeItems;\n\t\t\t},\n\t\t\t[] as Record<\"name\", string>[]\n\t\t);\n\t\treturn {\n\t\t\tfilter: conditions,\n\t\t\titems: items\n\t\t};\n\t},\n\n\t/**\n\t * Get the filter field configuration of a property.\n\t * @param property Filter field Path\n\t * @param filterFieldsConfig Manifest Configuration of the control\n\t * @returns The Filter Field Configuration\n\t */\n\t_getPropertyFilterConfigurationSetting: function (property: string, filterFieldsConfig?: FilterFieldsConfig): FilterSettings {\n\t\treturn filterFieldsConfig?.[property]?.settings ?? {};\n\t},\n\n\t/**\n\t * Create filter conditions for a parameter property.\n\t * @param propertyConversionInfo Property info used for conversion\n\t * @returns The filter condtions for parameter property\n\t */\n\t_getConditionsForParameter: function (propertyConversionInfo: PropertyConversionInfo): ConditionObject[] {\n\t\tlet conditionObjects: ConditionObject[] = [];\n\t\tconst { propertyMetadata, selectionVariant } = propertyConversionInfo;\n\t\tconst conditionPath = propertyMetadata.name;\n\t\tconst selectOptionName = selectionVariantToStateFilters._getSelectOptionName(selectionVariant, conditionPath, true);\n\t\tif (selectOptionName) {\n\t\t\tconditionObjects = selectionVariantToStateFilters._getPropertyConditions(propertyConversionInfo, selectOptionName, true);\n\t\t}\n\t\treturn conditionObjects;\n\t},\n\n\t/**\n\t * Create filter conditions for a normal property.\n\t * @param propertyConversionInfo Property info used for conversion\n\t * @returns The filter conditions for a normal property\n\t */\n\t_getConditionsForProperty: function (propertyConversionInfo: PropertyConversionInfo): ConditionObject[] {\n\t\tconst { propertyMetadata, selectionVariant } = propertyConversionInfo;\n\t\tconst conditonPath = propertyMetadata.name;\n\t\tconst selectOptionName = selectionVariantToStateFilters._getSelectOptionName(selectionVariant, conditonPath);\n\n\t\tlet conditionObjects: ConditionObject[] = [];\n\t\tif (selectOptionName) {\n\t\t\tconditionObjects = selectionVariantToStateFilters._getPropertyConditions(propertyConversionInfo, selectOptionName, false);\n\t\t}\n\t\treturn conditionObjects;\n\t},\n\n\t/**\n\t * Create filter conditions from navigation properties.\n\t * @param propertyConversionInfo Property info used for conversion\n\t * @returns The filter condtions for navigation property\n\t */\n\t_getConditionsForNavProperty: function (propertyConversionInfo: PropertyConversionInfo): ConditionObject[] {\n\t\tconst { controlInfo, selectionVariant, propertyName, navPath } = propertyConversionInfo;\n\t\tconst { contextPath } = controlInfo;\n\n\t\tlet conditionObjects: ConditionObject[] = [];\n\n\t\t// We check with '/SalesOrderManage/_Item/Name'.\n\t\t// '/SalesOrderManage/_Item' => 'SalesOrderManage._Item'\n\t\tlet selectOptionPathPrefix = `${contextPath.substring(1)}${navPath}`.replaceAll(\"/\", \".\");\n\t\tlet selectOptionName = selectionVariantToStateFilters._getSelectOptionName(\n\t\t\tselectionVariant,\n\t\t\tpropertyName,\n\t\t\tfalse,\n\t\t\tselectOptionPathPrefix\n\t\t);\n\n\t\tif (!selectOptionName) {\n\t\t\t// We check with '_Item/Name'.\n\t\t\tselectOptionPathPrefix = navPath.replaceAll(\"/\", \".\");\n\t\t\tselectOptionName = selectionVariantToStateFilters._getSelectOptionName(\n\t\t\t\tselectionVariant,\n\t\t\t\tpropertyName,\n\t\t\t\tfalse,\n\t\t\t\tselectOptionPathPrefix\n\t\t\t);\n\t\t}\n\n\t\tif (selectOptionName) {\n\t\t\tconditionObjects = selectionVariantToStateFilters._getPropertyConditions(propertyConversionInfo, selectOptionName, false);\n\t\t}\n\n\t\treturn conditionObjects;\n\t},\n\n\t/**\n\t * Get the possible select option name based on priority order.\n\t * @param selectionVariant SelectionVariant to be converted.\n\t * @param propertyName Metadata property name\n\t * @param isParameter Property is a parameter\n\t * @param navigationPath Navigation path to be considered\n\t * @returns The correct select option name of a property to fetch the select options for conversion.\n\t */\n\t_getSelectOptionName: function (\n\t\tselectionVariant: SelectionVariant,\n\t\tpropertyName: string,\n\t\tisParameter?: boolean,\n\t\tnavigationPath?: string\n\t): string {\n\t\t// possible SelectOption Names based on priority.\n\t\tconst possibleSelectOptionNames: string[] = [];\n\t\tconst selectOptionsPropertyNames = selectionVariant.getSelectOptionsPropertyNames();\n\n\t\tif (isParameter) {\n\t\t\t// Currency ==> $Parameter.Currency\n\t\t\t// P_Currency ==> $Parameter.P_Currency\n\t\t\tpossibleSelectOptionNames.push(`$Parameter.${propertyName}`);\n\n\t\t\t// Currency ==> Currency\n\t\t\t// P_Currency ==> P_Currency\n\t\t\tpossibleSelectOptionNames.push(propertyName);\n\n\t\t\tif (propertyName.startsWith(\"P_\")) {\n\t\t\t\t// P_Currency ==> $Parameter.Currency\n\t\t\t\tpossibleSelectOptionNames.push(`$Parameter.${propertyName.slice(2, propertyName.length)}`);\n\n\t\t\t\t// P_Currency ==> Currency\n\t\t\t\tpossibleSelectOptionNames.push(propertyName.slice(2, propertyName.length));\n\t\t\t} else {\n\t\t\t\t// Currency ==> $Parameter.P_Currency\n\t\t\t\tpossibleSelectOptionNames.push(`$Parameter.P_${propertyName}`);\n\n\t\t\t\t// Currency ==> P_Currency\n\t\t\t\tpossibleSelectOptionNames.push(`P_${propertyName}`);\n\t\t\t}\n\t\t} else {\n\t\t\t// Name => Name\n\t\t\tpossibleSelectOptionNames.push(propertyName);\n\t\t\tpossibleSelectOptionNames.push(`$Parameter.${propertyName}`);\n\n\t\t\tif (propertyName.startsWith(\"P_\")) {\n\t\t\t\t// P_Name => Name\n\t\t\t\tconst temp1 = propertyName.slice(2, propertyName.length);\n\n\t\t\t\t// Name => $Parameter.Name\n\t\t\t\tpossibleSelectOptionNames.push(`$Parameter.${temp1}`);\n\n\t\t\t\t// Name => Name\n\t\t\t\tpossibleSelectOptionNames.push(temp1);\n\t\t\t} else {\n\t\t\t\t// Name => P_Name\n\t\t\t\tconst temp2 = `P_${propertyName}`;\n\n\t\t\t\t// P_Name => $Parameter.P_Name\n\t\t\t\tpossibleSelectOptionNames.push(`$Parameter.${temp2}`);\n\n\t\t\t\t// P_Name => P_Name\n\t\t\t\tpossibleSelectOptionNames.push(temp2);\n\t\t\t}\n\t\t}\n\n\t\tlet selectOptionName = \"\";\n\t\t// Find the correct select option name based on the priority\n\t\tpossibleSelectOptionNames.some((testName: string) => {\n\t\t\tconst pathToCheck = navigationPath ? `${navigationPath}.${testName}` : testName;\n\t\t\t// Name => Name\n\t\t\t// Name => _Item.Name (incase _Item is navigationPath)\n\n\t\t\treturn selectOptionsPropertyNames.includes(pathToCheck) ? (selectOptionName = pathToCheck) : false;\n\t\t});\n\n\t\treturn selectOptionName;\n\t},\n\n\t/**\n\t * Get maximum conditions supported for a property as filter.\n\t * @param propertyConversionInfo Property info used for conversion\n\t * @returns Number of maximum conditions\n\t */\n\t_getMaxConditions(propertyConversionInfo: PropertyConversionInfo): number {\n\t\tconst { controlInfo, propertyContextPath, propertyName } = propertyConversionInfo;\n\t\tconst { metaModel } = controlInfo;\n\t\tconst completePropertyPath = `${propertyContextPath}${propertyName}`;\n\t\tconst propertyContext = metaModel.createBindingContext(completePropertyPath);\n\n\t\tlet maximumConditions = 0;\n\t\tif (propertyContext) {\n\t\t\tmaximumConditions = maxConditions(propertyName, { context: propertyContext });\n\t\t}\n\t\treturn maximumConditions;\n\t},\n\n\t/**\n\t * Convert select options to property conditions.\n\t * @param propertyConversionInfo Property info used for conversion\n\t * @param selectOptionName Select option name\n\t * @param isParameter Boolean which determines if a property is parameterized\n\t * @returns The conditions of a property for control\n\t */\n\t_getPropertyConditions: function (\n\t\tpropertyConversionInfo: PropertyConversionInfo,\n\t\tselectOptionName: string,\n\t\tisParameter?: boolean\n\t): ConditionObject[] {\n\t\tconst { controlInfo, propertyMetadata, selectionVariant, propertyContextPath, propertyName } = propertyConversionInfo;\n\t\tconst selectOptions = selectionVariant.getSelectOption(selectOptionName);\n\t\tconst { metaModel } = controlInfo;\n\t\tconst maximumConditions = selectionVariantToStateFilters._getMaxConditions(propertyConversionInfo);\n\n\t\tlet conditionObjects: ConditionObject[] = [];\n\t\tif (selectOptions?.length && maximumConditions !== 0) {\n\t\t\tconst semanticDateOperators: string[] = selectionVariantToStateFilters._getSemanticDateOperators(\n\t\t\t\tpropertyConversionInfo,\n\t\t\t\tisParameter\n\t\t\t);\n\t\t\tconst propertyEntitySetPath = propertyContextPath.substring(0, propertyContextPath.length - 1);\n\n\t\t\tconst validOperators = isParameter\n\t\t\t\t? [\"EQ\"]\n\t\t\t\t: CommonHelper.getOperatorsForProperty(propertyName, propertyEntitySetPath, metaModel);\n\n\t\t\t// multiple select options => multiple conditions\n\n\t\t\tconditionObjects = this._getConditionsFromSelectOptions(\n\t\t\t\tselectOptions,\n\t\t\t\tpropertyMetadata,\n\t\t\t\tvalidOperators,\n\t\t\t\tsemanticDateOperators,\n\t\t\t\tmaximumConditions === 1\n\t\t\t);\n\t\t}\n\t\treturn conditionObjects;\n\t},\n\n\t/**\n\t * Fetch semantic date operators.\n\t * @param propertyConversionInfo Object which is used for conversion\n\t * @param isParameter Boolean which determines if a property is parameterized\n\t * @returns The semantic date operators supported for a property\n\t */\n\t_getSemanticDateOperators: function (propertyConversionInfo: PropertyConversionInfo, isParameter?: boolean): string[] {\n\t\tconst { controlInfo, propertyMetadata, propertyName, propertyContextPath } = propertyConversionInfo;\n\t\tconst conditionPath = propertyMetadata.name;\n\t\tlet semanticDateOperators: string[] = [];\n\t\tconst { useSemanticDateRange, filterFieldsConfig, metaModel } = controlInfo;\n\t\tif (useSemanticDateRange) {\n\t\t\tif (isParameter) {\n\t\t\t\tsemanticDateOperators = [\"EQ\"];\n\t\t\t} else {\n\t\t\t\tconst propertyEntitySetPath = propertyContextPath.substring(0, propertyContextPath.length - 1),\n\t\t\t\t\tfilterSettings = selectionVariantToStateFilters._getPropertyFilterConfigurationSetting(\n\t\t\t\t\t\tconditionPath,\n\t\t\t\t\t\tfilterFieldsConfig\n\t\t\t\t\t);\n\t\t\t\tsemanticDateOperators = CommonHelper.getOperatorsForProperty(\n\t\t\t\t\tpropertyName,\n\t\t\t\t\tpropertyEntitySetPath,\n\t\t\t\t\tmetaModel,\n\t\t\t\t\tODATA_TYPE_MAPPING[propertyMetadata.dataType],\n\t\t\t\t\tuseSemanticDateRange,\n\t\t\t\t\tfilterSettings\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn semanticDateOperators;\n\t},\n\n\t/**\n\t * Get the filter conditions from selection options.\n\t * @param selectOptions Select options array\n\t * @param propertyMetadata Property metadata information\n\t * @param validOperators All valid operators\n\t * @param semanticDateOperators Semantic date operators\n\t * @param singleCondition Boolean which determines if a property takes only one condtition\n\t * @returns Converted filter conditions\n\t */\n\t_getConditionsFromSelectOptions: function (\n\t\tselectOptions: SelectOption[],\n\t\tpropertyMetadata: ControlPropertyInfo,\n\t\tvalidOperators: string[],\n\t\tsemanticDateOperators: string[],\n\t\tsingleCondition?: boolean\n\t): ConditionObject[] {\n\t\tlet conditionObjects: ConditionObject[] = [];\n\t\t// Create conditions for all the selectOptions of the property\n\t\tif (selectOptions.length) {\n\t\t\tconditionObjects = singleCondition\n\t\t\t\t? selectionVariantToStateFilters._addConditionFromSelectOption(\n\t\t\t\t\t\tpropertyMetadata,\n\t\t\t\t\t\tvalidOperators,\n\t\t\t\t\t\tsemanticDateOperators,\n\t\t\t\t\t\tconditionObjects,\n\t\t\t\t\t\tselectOptions[0]\n\t\t\t\t  )\n\t\t\t\t: selectOptions.reduce(\n\t\t\t\t\t\tselectionVariantToStateFilters._addConditionFromSelectOption.bind(\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\tpropertyMetadata,\n\t\t\t\t\t\t\tvalidOperators,\n\t\t\t\t\t\t\tsemanticDateOperators\n\t\t\t\t\t\t),\n\t\t\t\t\t\tconditionObjects\n\t\t\t\t  );\n\t\t}\n\t\treturn conditionObjects;\n\t},\n\n\t/**\n\t * Cumulatively add select option to condition.\n\t * @param propertyMetadata Property metadata information\n\t * @param validOperators Operators for all the data types\n\t * @param semanticDateOperators Operators for the Date type\n\t * @param cumulativeConditions Filter conditions\n\t * @param selectOption Selectoption of selection variant\n\t * @returns The filter conditions\n\t */\n\t_addConditionFromSelectOption: function (\n\t\tpropertyMetadata: ControlPropertyInfo,\n\t\tvalidOperators: string[],\n\t\tsemanticDateOperators: string[],\n\t\tcumulativeConditions: ConditionObject[],\n\t\tselectOption: SelectOption\n\t): ConditionObject[] {\n\t\tconst { hasValueHelp, dataType } = propertyMetadata;\n\t\tconst allSupportedOperators = [...validOperators, ...semanticDateOperators];\n\t\tconst edmType = selectionVariantToStateFilters._getEdmType(dataType);\n\t\tconst condition = getConditions(selectOption, edmType ?? dataType, !!hasValueHelp, validOperators, semanticDateOperators);\n\t\tif (\n\t\t\tselectOption.SemanticDates &&\n\t\t\tsemanticDateOperators.length &&\n\t\t\tsemanticDateOperators.includes(selectOption.SemanticDates.operator)\n\t\t) {\n\t\t\tconst semanticDates = selectionVariantToStateFilters._addSemanticDatesToConditions(selectOption.SemanticDates);\n\t\t\tif (Object.keys(semanticDates).length > 0) {\n\t\t\t\tcumulativeConditions.push(semanticDates);\n\t\t\t}\n\t\t} else if (condition) {\n\t\t\tif (allSupportedOperators.length === 0 || allSupportedOperators.includes(condition.operator)) {\n\t\t\t\tcumulativeConditions.push(condition);\n\t\t\t}\n\t\t}\n\t\treturn cumulativeConditions;\n\t},\n\n\t/**\n\t * Create filter conditions for a parameter property.\n\t * @param semanticDates Semantic date infomation\n\t * @returns The filter conditions containing semantic dates\n\t */\n\t_addSemanticDatesToConditions: (semanticDates: SemanticDateConfiguration): ConditionObject => {\n\t\tconst values: unknown[] = [];\n\t\tif (semanticDates.high !== null) {\n\t\t\tvalues.push(semanticDates.high);\n\t\t}\n\t\tif (semanticDates.low !== null) {\n\t\t\tvalues.push(semanticDates.low);\n\t\t}\n\t\treturn {\n\t\t\tvalues: values,\n\t\t\toperator: semanticDates.operator,\n\t\t\tisEmpty: undefined\n\t\t};\n\t},\n\n\t/**\n\t * Get EDM type from data type.\n\t * @param dataType V4 model data type\n\t * @returns EDM type equivalent of data type\n\t */\n\t_getEdmType: (dataType: string): string => {\n\t\tconst TYPE_EDM_MAPPING = Object.fromEntries(\n\t\t\tObject.entries(EDM_TYPE_MAPPING).map(([k, v]) => [(v as { type: unknown }).type, k])\n\t\t) as Record<string, unknown>;\n\t\treturn TYPE_EDM_MAPPING[dataType] as string;\n\t},\n\n\t/**\n\t * Change value depending on condition operator(Empty and NotEmpty) for properties with ValueList with fixed values.\n\t * @param condition Condition to change\n\t */\n\t_adjustValueListWithFixedValuesCondition: (condition: Record<string, unknown>): void => {\n\t\t// in case the condition is meant for a field having a VH, the format required by MDC differs\n\t\tcondition.validated = ConditionValidated.Validated;\n\t\tif (condition.operator === \"Empty\") {\n\t\t\tcondition.operator = \"EQ\";\n\t\t\tcondition.values = [\"\"];\n\t\t} else if (condition.operator === \"NotEmpty\") {\n\t\t\tcondition.operator = \"NE\";\n\t\t\tcondition.values = [\"\"];\n\t\t}\n\t\tdelete condition.isEmpty;\n\t}\n};\n\nexport default selectionVariantToStateFilters;\n"],"mappings":"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","ignoreList":[],"file":"SelectionVariantToStateFilters-dbg.js"}