{"version":3,"names":["StateHelper","getSelectionVariant","control","controlState","StateUtil","retrieveExternalState","controlObject","filter","parameters","getParent","isA","getParameters","undefined","selectionVariant","StateFiltersToSelectionVariant","getSelectionVariantFromConditions","getPropertyHelper","externalSV","SelectionVariant","selectOptions","_getSelectOptions","property","massAddSelectOption","split","error","id","getId","message","Error","String","Log","convertSelectionVariantToStateFilters","prefillDescriptions","model","propertyInfos","_getSupportedFilterFields","length","filterBarInfoForConversion","_getControlInfoForConversion","metaModel","getMetaModel","copyofPropertyInfos","JSON","parse","stringify","updatedPropertyInfos","_updatePropertyInfoToSupportSV","conditions","svToStateFilters","getStateFiltersFromSV","getModel","contextPath","data","useSemanticDateRange","viewDataInstance","viewData","getData","config","controlConfiguration","selectionFieldsConfigs","filterFieldsConfig","filterFields","waitForInitialization","getControlDelegate","fetchFilterProperties","awaitControlDelegate","fetchProperties","clearFilterValues","controlInstance","_clearFilterValuesWithOptions","content","fireEvent","options","state","editStatePath","currentEditStateCondition","editStateDefaultValue","currentEditStateIsDefault","shouldClearEditFilter","DraftEditState","ALL","deepClone","values","Object","keys","clearEditFilter","conditionPath","condition","filtered","applyExternalState","cleanUpAllFilterFieldsInErrorState","forEach","propertyInfo","name","metadataPath","PropertyHelper","hasValueHelp","getProperty","typeConfig","className","path","getPropertyDataModel","targetObject","dataType","setSelectionVariantToMdcControl","arguments","stateToApply","getStateToApply","convertConditionsForChart","diffState","applyStateResult","err","assign","items","propertyObj"],"sourceRoot":".","sources":["StateHelper.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type { ViewData } from \"sap/fe/core/services/TemplatedViewServiceFactory\";\nimport * as PropertyHelper from \"sap/fe/core/templating/PropertyHelper\";\nimport DraftEditState from \"sap/fe/macros/filterBar/DraftEditState\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport type { PropertyInfo } from \"sap/fe/macros/internal/PropertyInfo\";\nimport type { ConversionInfo } from \"sap/fe/macros/mdc/adapter/SelectionVariantToStateFilters\";\nimport svToStateFilters from \"sap/fe/macros/mdc/adapter/SelectionVariantToStateFilters\";\nimport StateFiltersToSelectionVariant from \"sap/fe/macros/mdc/adapter/StateFilterToSelectionVariant\";\nimport type { ExternalStateType } from \"sap/fe/macros/valuehelp/ValueHelpDelegate\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type CoreControl from \"sap/ui/core/Control\";\nimport type Chart from \"sap/ui/mdc/Chart\";\nimport type Control from \"sap/ui/mdc/Control\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { StateToApply, Filter as StateUtilFilter } from \"sap/ui/mdc/p13n/StateUtil\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type Model from \"sap/ui/model/Model\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ChartType from \"../../Chart\";\nimport type MacroAPI from \"../../MacroAPI\";\n\n/**\n * This is to extend MDC control APIs for filter, table, chart building blocks.\n * @public\n */\n\nconst StateHelper = {\n\t/**\n\t * Gets selection variant from the mdc control.\n\t * @param control The control for which Selection Variant is to be fetched\n\t * @returns A promise which resolves with a {@link sap.fe.navigation.SelectionVariant}\n\t * @public\n\t */\n\tasync getSelectionVariant(control: CoreControl | undefined): Promise<SelectionVariant> {\n\t\ttry {\n\t\t\tconst controlState = await StateUtil.retrieveExternalState(control as Control);\n\t\t\tconst controlObject = controlState.filter as StateUtilFilter;\n\t\t\tlet parameters: string[] | undefined = [];\n\t\t\tif (\n\t\t\t\tcontrol?.getParent()?.isA(\"sap.fe.macros.filterBar.FilterBarAPI\") &&\n\t\t\t\t(control.getParent() as FilterBarAPI).getParameters !== undefined\n\t\t\t) {\n\t\t\t\tparameters = (control.getParent() as FilterBarAPI).getParameters();\n\t\t\t}\n\t\t\tconst selectionVariant = StateFiltersToSelectionVariant.getSelectionVariantFromConditions(\n\t\t\t\tcontrolObject,\n\t\t\t\t(control as Control).getPropertyHelper(),\n\t\t\t\tparameters\n\t\t\t);\n\t\t\tif (control?.isA(\"sap.ui.mdc.Chart\")) {\n\t\t\t\tconst externalSV = new SelectionVariant();\n\t\t\t\tconst selectOptions = selectionVariant._getSelectOptions();\n\t\t\t\tfor (const property in selectOptions) {\n\t\t\t\t\texternalSV.massAddSelectOption(property.split(\"_fe_groupable_\")[1], selectOptions[property]);\n\t\t\t\t}\n\t\t\t\treturn externalSV;\n\t\t\t} else {\n\t\t\t\treturn selectionVariant;\n\t\t\t}\n\t\t} catch (error: unknown) {\n\t\t\tconst id: string | undefined = control?.getId();\n\t\t\tconst message = error instanceof Error ? error.message : String(error);\n\t\t\tLog.error(`Building Block (${id}) - get selection variant failed : ${message}`);\n\t\t\tthrow Error(message);\n\t\t}\n\t},\n\n\t/**\n\t * Convert selection variant to conditions.\n\t * @param control Control can be a table, chart or filter bar\n\t * @param selectionVariant The selection variant to apply to the table or chart or filter bar.\n\t * @param prefillDescriptions If true, we try to find the associated Text value for each property in the selectionVariant (to avoid fetching it from the server)\n\t * @param model The control model\n\t * @returns A promise resolving to conditions\n\t */\n\tasync convertSelectionVariantToStateFilters(\n\t\tcontrol: Control,\n\t\tselectionVariant: SelectionVariant,\n\t\tprefillDescriptions: boolean,\n\t\tmodel?: Model\n\t): Promise<StateUtilFilter> {\n\t\t// Note: This method is private and restricted to usage by sap.fe(ViewState controller extension) for filter bar/ chart / table state scenarios.\n\t\tconst propertyInfos = await this._getSupportedFilterFields(control);\n\n\t\tif (!propertyInfos.length) {\n\t\t\tthrow new Error(\"No valid metadata properties present for filter bar\");\n\t\t}\n\n\t\tconst filterBarInfoForConversion = this._getControlInfoForConversion(control);\n\t\tconst metaModel = model?.getMetaModel() as ODataMetaModel;\n\t\tconst copyofPropertyInfos = JSON.parse(JSON.stringify(propertyInfos));\n\t\tconst updatedPropertyInfos = this._updatePropertyInfoToSupportSV(control, copyofPropertyInfos);\n\t\tconst conditions: StateUtilFilter = svToStateFilters.getStateFiltersFromSV(\n\t\t\tselectionVariant,\n\t\t\tfilterBarInfoForConversion,\n\t\t\tupdatedPropertyInfos ?? copyofPropertyInfos,\n\t\t\tprefillDescriptions,\n\t\t\tmetaModel\n\t\t);\n\n\t\treturn conditions;\n\t},\n\n\t/**\n\t * Get the filter information needed for the conversion of selection variant to conditions.\n\t * @param control This can be a table, chart, or filterbar\n\t * @returns The control information (metaModel, contextPath, use of semantic date range, all filter fields config)\n\t */\n\t_getControlInfoForConversion(control: Control): ConversionInfo {\n\t\tconst metaModel = control.getModel()?.getMetaModel() as ODataMetaModel,\n\t\t\tcontextPath = control.data(\"entityType\") as string;\n\t\tif (control.isA(\"sap.fe.macros.controls.FilterBar\")) {\n\t\t\tconst useSemanticDateRange: boolean =\n\t\t\t\t\tcontrol.data(\"useSemanticDateRange\") === \"true\" || control.data(\"useSemanticDateRange\") === true,\n\t\t\t\tviewDataInstance = control.getModel(\"viewData\") as JSONModel,\n\t\t\t\tviewData = viewDataInstance.getData() as ViewData,\n\t\t\t\tconfig = viewData?.controlConfiguration,\n\t\t\t\tselectionFieldsConfigs = config?.[\"@com.sap.vocabularies.UI.v1.SelectionFields\"],\n\t\t\t\tfilterFieldsConfig = selectionFieldsConfigs?.filterFields;\n\t\t\treturn { metaModel, contextPath, useSemanticDateRange, filterFieldsConfig, selectionFieldsConfigs };\n\t\t} else {\n\t\t\treturn { metaModel, contextPath };\n\t\t}\n\t},\n\n\t/**\n\t * Get supported filter field properties from the table, chart, or filter bar.\n\t * @param control Control can be a table, chart, or filter bar\n\t * @returns Supported filter fields.\n\t */\n\tasync _getSupportedFilterFields(control: Control): Promise<ControlPropertyInfo[]> {\n\t\tif (control.isA(\"sap.ui.mdc.Filterbar\")) {\n\t\t\tawait (control as FilterBar).waitForInitialization();\n\t\t\treturn (control as FilterBar).getControlDelegate().fetchFilterProperties(control);\n\t\t} else if ((control as FilterBar).isA(\"sap.fe.macros.controls.FilterBar\")) {\n\t\t\treturn (control as FilterBar).getControlDelegate().fetchFilterProperties(control);\n\t\t} else {\n\t\t\tawait (control as Table | Chart).awaitControlDelegate();\n\t\t}\n\t\treturn (control as Table | Chart | FilterBar).getControlDelegate().fetchProperties(control);\n\t},\n\n\t/**\n\t * Clears all input values of visible filter fields in the table, chart, or filter bar..\n\t * @param controlInstance This can be a filter bar, chart, or table.\n\t */\n\tasync clearFilterValues(controlInstance: MacroAPI): Promise<void> {\n\t\tawait this._clearFilterValuesWithOptions(controlInstance.content as Control);\n\t\t// Allow app developers to update filters after clearing\n\t\tcontrolInstance.fireEvent(\"afterClear\");\n\t},\n\n\t/**\n\t * Clears all input values of visible filter fields in the table, chart, or filter bar.\n\t * @param control This can be a table, chart, or filter bar\n\t * @param options Options for filtering the filter bar\n\t * @param options.clearEditFilter Whether to clear the edit filter or retain the default value 'All'\n\t */\n\tasync _clearFilterValuesWithOptions(control: Control, options?: { clearEditFilter: boolean }): Promise<void> {\n\t\tif (!control) {\n\t\t\treturn;\n\t\t}\n\t\tconst state: ExternalStateType = await StateUtil.retrieveExternalState(control);\n\t\tlet editStatePath = \"\",\n\t\t\tcurrentEditStateCondition,\n\t\t\teditStateDefaultValue,\n\t\t\tcurrentEditStateIsDefault: boolean | undefined,\n\t\t\tshouldClearEditFilter: undefined | boolean;\n\t\tif (control.isA<FilterBar>(\"sap.ui.mdc.FilterBar\")) {\n\t\t\teditStatePath = \"$editState\";\n\t\t\teditStateDefaultValue = DraftEditState.ALL.id;\n\t\t\tcurrentEditStateCondition = deepClone(state.filter[editStatePath]?.[0]);\n\t\t\tcurrentEditStateIsDefault = currentEditStateCondition?.values[0] === editStateDefaultValue;\n\t\t\tshouldClearEditFilter = options && Object.keys(options).length > 0 && options.clearEditFilter;\n\t\t}\n\n\t\t// Clear all conditions\n\t\tfor (const conditionPath of Object.keys(state.filter)) {\n\t\t\tif (!shouldClearEditFilter && conditionPath === editStatePath && currentEditStateIsDefault) {\n\t\t\t\t// Do not clear edit state condition if it is already \"ALL\"\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const condition of state.filter[conditionPath]) {\n\t\t\t\tcondition.filtered = false;\n\t\t\t}\n\t\t}\n\t\tawait StateUtil.applyExternalState(control, { filter: state.filter });\n\n\t\tif (control.isA<FilterBar>(\"sap.ui.mdc.FilterBar\")) {\n\t\t\t// Set edit state to 'ALL' if it wasn't before\n\t\t\tif (!shouldClearEditFilter && currentEditStateCondition && !currentEditStateIsDefault) {\n\t\t\t\tcurrentEditStateCondition.values = [editStateDefaultValue];\n\t\t\t\tawait StateUtil.applyExternalState(control, { filter: { [editStatePath]: [currentEditStateCondition] } });\n\t\t\t}\n\n\t\t\t//clear filter fields in error state\n\t\t\tcontrol.cleanUpAllFilterFieldsInErrorState();\n\t\t}\n\t},\n\n\t/**\n\t * Method returns the copy of propertyInfo by adding necessary fields so that selection variant can be set to a control like table and chart.\n\t * @param control This could be a table, chart, or filter bar\n\t * @param propertyInfos Array of PropertyInfo of the control\n\t * @returns The deep clone of propertyInfos with some additional fields\n\t */\n\t_updatePropertyInfoToSupportSV(control: Control, propertyInfos: ControlPropertyInfo[]): ControlPropertyInfo[] {\n\t\tif (control.isA(\"sap.ui.mdc.FilterBar\")) {\n\t\t\treturn propertyInfos;\n\t\t}\n\t\tpropertyInfos.forEach((propertyInfo: ControlPropertyInfo) => {\n\t\t\tif ((control as Control).isA(\"sap.ui.mdc.Table\")) {\n\t\t\t\tpropertyInfo[\"conditionPath\"] = propertyInfo.name;\n\t\t\t\tpropertyInfo[\"annotationPath\"] = propertyInfo.metadataPath ? propertyInfo.metadataPath : \"\";\n\t\t\t\tpropertyInfo[\"hasValueHelp\"] = PropertyHelper.hasValueHelp(\n\t\t\t\t\t(control as Table).getPropertyHelper().getProperty(propertyInfo.name)\n\t\t\t\t);\n\t\t\t\tpropertyInfo[\"dataType\"] = propertyInfo?.typeConfig?.className as string;\n\t\t\t} else if ((control as Control).isA(\"sap.ui.mdc.Chart\")) {\n\t\t\t\tif (propertyInfo.path) {\n\t\t\t\t\tpropertyInfo[\"name\"] = propertyInfo.path;\n\t\t\t\t\tpropertyInfo[\"conditionPath\"] = propertyInfo.path;\n\t\t\t\t\tconst property = ((control as Chart).getParent() as ChartType)?.getPropertyDataModel(propertyInfo.path)?.targetObject;\n\t\t\t\t\tpropertyInfo[\"hasValueHelp\"] = property ? PropertyHelper.hasValueHelp(property) : false;\n\t\t\t\t\tpropertyInfo[\"dataType\"] = (propertyInfo?.typeConfig?.className as string) || propertyInfo.dataType;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn propertyInfos;\n\t},\n\n\t/**\n\t * Sets selection variant to the table. Note: setSelectionVariant will clear the existing filters and then apply the SelectionVariant values.\n\t * @param controlInstance This could be a table, chart, or filter bar\n\t * @param selectionVariant The selection variant to apply to the respective mdc controls\n\t * @param prefillDescriptions Optional. If true, we will use the associated text property values (if they're available in the selectionVariant) to display the filter value descriptions, instead of loading them from the backend\n\t * @returns A promise for asynchronous handling\n\t * @public\n\t */\n\tasync setSelectionVariantToMdcControl(\n\t\tcontrolInstance: CoreControl | undefined,\n\t\tselectionVariant: SelectionVariant,\n\t\tprefillDescriptions = false\n\t): Promise<{ diffState: ExternalStateType; applyStateResult: unknown } | undefined> {\n\t\ttry {\n\t\t\tconst state: ExternalStateType = await StateUtil.retrieveExternalState(controlInstance as Control);\n\t\t\tif (!state.filter) {\n\t\t\t\tLog.error(`FE : setSelectionVariant API cannot be applied on : ${controlInstance?.getId()}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst conditions: StateUtilFilter = await this.convertSelectionVariantToStateFilters(\n\t\t\t\tcontrolInstance as Control,\n\t\t\t\tselectionVariant,\n\t\t\t\tprefillDescriptions,\n\t\t\t\tcontrolInstance?.getModel()\n\t\t\t);\n\n\t\t\t// Clear filter of table before applying selection variant\n\t\t\tawait this.clearFilterValues(controlInstance?.getParent() as MacroAPI);\n\n\t\t\t// State to apply\n\t\t\tconst propertyInfos = await this._getSupportedFilterFields(controlInstance as Control);\n\t\t\tconst stateToApply = svToStateFilters.getStateToApply(propertyInfos, conditions);\n\t\t\tif (controlInstance?.isA(\"sap.ui.mdc.Chart\")) {\n\t\t\t\tthis.convertConditionsForChart(stateToApply);\n\t\t\t}\n\t\t\tconst diffState: ExternalStateType = await StateUtil.diffState(controlInstance as Control, state, stateToApply);\n\t\t\tconst applyStateResult = await StateUtil.applyExternalState(controlInstance as Control, stateToApply);\n\t\t\treturn {\n\t\t\t\tdiffState,\n\t\t\t\tapplyStateResult\n\t\t\t};\n\t\t} catch (err: unknown) {\n\t\t\tconst id: string | undefined = controlInstance?.getId();\n\t\t\tconst message = err instanceof Error ? err.message : String(err);\n\t\t\tLog.error(`FE : BuildingBlock (${id}) - set selection variant failed  : ${message}`);\n\t\t\tthrow Error(message);\n\t\t}\n\t},\n\t/**\n\t * Convert the chart properties to internal properties before applying the conditions.\n\t * @param stateToApply This contains the information regarding filter and conditions\n\t */\n\tconvertConditionsForChart(stateToApply: StateToApply): void {\n\t\t// replace keys of filter object from \"SalesOder\" to internal format \"_fe_groupable_SalesOrder\"\n\t\tfor (const property in stateToApply.filter) {\n\t\t\tdelete Object.assign(stateToApply.filter, { [\"_fe_groupable_\" + property]: stateToApply.filter[property] })[property];\n\t\t}\n\t\t// replace keys of items array from \"SalesOder\" to internal format \"_fe_groupable_SalesOrder\"\n\t\tstateToApply.items.forEach((propertyObj: { name: string }) => {\n\t\t\tpropertyObj.name = \"_fe_groupable_\" + propertyObj.name;\n\t\t});\n\t}\n};\n\nexport type ControlPropertyInfo = PropertyInfo & {\n\tconditionPath: string;\n\tdataType: string;\n\tannotationPath?: string;\n\tmetadataPath?: string;\n\tisParameter?: boolean;\n\thiddenFilter?: boolean;\n\thasValueHelp?: boolean;\n\trequired?: boolean;\n};\n\nexport default StateHelper;\n"],"mappings":"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","ignoreList":[],"file":"StateHelper-dbg.js"}