{"version":3,"file":"StateFilterToSelectionVariant.js","names":["stateFilterToSelectionVariant","getSelectionVariantFromConditions","filterConditions","propertyHelper","params","selectionVariant","SelectionVariant","isEmptyObject","filterKey","filterFieldCondition","length","selectOptions","getSelectionOptionsFromCondition","sanitizedFilterKey","replace","includes","massAddSelectOption","compareSelectOptions","options1","options2","Option","Sign","Low","High","mergeSelectionVariants","selectionVariant1","selectionVariant2","mergedSV","toJSONString","propertyNames","getSelectOptionsPropertyNames","addedProperties","propName","controlOptions","getSelectOption","mergedOptions","push","controlOption","some","mergedOption","stateFilters","condition","selectOption","getSelectionOption","semanticDates","filterOption","operator","FilterOperatorUtil","getOperator","undefined","RangeOperator","createSemanticDatesFromConditions","getOptionForPropertyWithRangeOperator","semanticDateOpsExt","SemanticDateOperators","getSemanticDateOperations","getSelectionFormatForNonRangeOperator","SemanticDates","lowValue","highValue","values","toString","getTypeInfoForFilterProperty","propertyInfo","getProperty","typeConfig","modelFilter","getModelFilter","typeInstance","baseType","filters","getFilters","exclude","TypeMap","externalizeValue","getValue1","getValue2","selectOptionState","Log","warning","high","low"],"sources":["./StateFilterToSelectionVariant.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport isEmptyObject from \"sap/base/util/isEmptyObject\";\nimport SemanticDateOperators from \"sap/fe/macros/filterBar/SemanticDateOperators\";\nimport type { PropertyInfo } from \"sap/fe/macros/internal/PropertyInfo\";\nimport type { SelectOption, SemanticDateConfiguration } from \"sap/fe/navigation/SelectionVariant\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type TypeConfig from \"sap/ui/mdc/TypeConfig\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport FilterOperatorUtil from \"sap/ui/mdc/condition/FilterOperatorUtil\";\nimport type Operator from \"sap/ui/mdc/condition/Operator\";\nimport RangeOperator from \"sap/ui/mdc/condition/RangeOperator\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\nimport type PropertyHelper from \"sap/ui/mdc/util/PropertyHelper\";\nimport type Filter from \"sap/ui/model/Filter\";\nimport type Type from \"sap/ui/model/Type\";\n\nconst stateFilterToSelectionVariant = {\n\t/**\n\t * Get selection variant based on the filter conditions.\n\t * @param filterConditions Configure the filter bar control\n\t * @param propertyHelper PropertyHelper of the filter bar\n\t * @param params Parameters of parametrized services\n\t * @returns The filter conditions are converted to the selection variant and returned\n\t */\n\tgetSelectionVariantFromConditions: function (\n\t\tfilterConditions: Record<string, ConditionObject[] | undefined>,\n\t\tpropertyHelper: PropertyHelper,\n\t\tparams?: string[]\n\t): SelectionVariant {\n\t\tconst selectionVariant = new SelectionVariant();\n\t\tif (!isEmptyObject(filterConditions)) {\n\t\t\tfor (const filterKey in filterConditions) {\n\t\t\t\tconst filterFieldCondition = filterConditions[filterKey];\n\t\t\t\tif (filterFieldCondition?.length) {\n\t\t\t\t\tconst selectOptions = stateFilterToSelectionVariant.getSelectionOptionsFromCondition(\n\t\t\t\t\t\tfilterFieldCondition,\n\t\t\t\t\t\tfilterKey,\n\t\t\t\t\t\tpropertyHelper\n\t\t\t\t\t);\n\t\t\t\t\tif (selectOptions.length) {\n\t\t\t\t\t\tconst sanitizedFilterKey = filterKey.replace(/\\*\\//g, \".\");\n\t\t\t\t\t\t// get parameters from filter bar\n\t\t\t\t\t\tif (params?.includes(filterKey)) {\n\t\t\t\t\t\t\t// trying to generate properties like $Parameter.CompanyCode if CompanyCode is a parameter\n\t\t\t\t\t\t\tselectionVariant.massAddSelectOption(`$Parameter.${sanitizedFilterKey}`, selectOptions);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectionVariant.massAddSelectOption(sanitizedFilterKey, selectOptions);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn selectionVariant;\n\t},\n\t/**\n\t * Compare two SelectOption objects and check if they are equal.\n\t * @param options1 The first SelectOption object\n\t * @param options2 The second SelectOption object\n\t * @returns True if the objects are equal, false otherwise\n\t */\n\tcompareSelectOptions: function (options1: SelectOption, options2: SelectOption): boolean {\n\t\treturn (\n\t\t\toptions1.Option === options2.Option &&\n\t\t\toptions1.Sign === options2.Sign &&\n\t\t\toptions1.Low === options2.Low &&\n\t\t\toptions1.High === options2.High\n\t\t);\n\t},\n\n\t/**\n\t * Merge two selection variants.\n\t * @param selectionVariant1 The first selectionVariant1 object\n\t * @param selectionVariant2 The second selectionVariant object\n\t * @returns The merged selectionVariant\n\t */\n\tmergeSelectionVariants: function (selectionVariant1: SelectionVariant, selectionVariant2: SelectionVariant): SelectionVariant {\n\t\t// Create a new SelectionVariant for the merged result, initially a clone of SelectionVariant1\n\t\tconst mergedSV = new SelectionVariant(selectionVariant1.toJSONString());\n\n\t\t// Get the property names from SelectionVariant2\n\t\tconst propertyNames = selectionVariant2.getSelectOptionsPropertyNames();\n\n\t\t// Keep track of added properties\n\t\tconst addedProperties: string[] = [];\n\n\t\t// Loop through each property in SelectionVariant2\n\t\tfor (const propName of propertyNames) {\n\t\t\tconst controlOptions = selectionVariant2.getSelectOption(propName) || [];\n\t\t\tconst mergedOptions = mergedSV.getSelectOption(propName) || [];\n\n\t\t\t// Check if the property already exists in SelectionVariant1\n\t\t\tif (!addedProperties.includes(propName)) {\n\t\t\t\t// If not, add the entire property from SelectionVariant2\n\t\t\t\tmergedSV.massAddSelectOption(propName, controlOptions);\n\t\t\t\taddedProperties.push(propName);\n\t\t\t} else {\n\t\t\t\t// If it exists in SelectionVariant1, only add the options that are not already present\n\t\t\t\tfor (const controlOption of controlOptions) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!mergedOptions.some((mergedOption) =>\n\t\t\t\t\t\t\tstateFilterToSelectionVariant.compareSelectOptions(mergedOption, controlOption)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmergedOptions.push(controlOption);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmergedSV.massAddSelectOption(propName, mergedOptions);\n\t\t\t}\n\t\t}\n\n\t\treturn mergedSV;\n\t},\n\n\t/**\n\t * Method to add the filter conditions to selection variant.\n\t * @param stateFilters Retrieved filter condition for a filter field from StateUtils\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper of the filter bar\n\t * @returns The selection option array for a particular filter key\n\t */\n\tgetSelectionOptionsFromCondition: function (\n\t\tstateFilters: ConditionObject[],\n\t\tfilterKey: string,\n\t\tpropertyHelper: PropertyHelper\n\t): SelectOption[] {\n\t\tconst selectOptions: SelectOption[] = [];\n\t\tfor (const condition of stateFilters) {\n\t\t\tconst selectOption = stateFilterToSelectionVariant.getSelectionOption(condition, filterKey, propertyHelper);\n\t\t\tif (selectOption) {\n\t\t\t\tselectOptions.push(selectOption);\n\t\t\t}\n\t\t}\n\t\treturn selectOptions;\n\t},\n\t/**\n\t * Calculate the filter option for each value.\n\t * @param condition\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper of the filter bar\n\t * @returns The promise of the Select option\n\t */\n\tgetSelectionOption: function (condition: ConditionObject, filterKey: string, propertyHelper: PropertyHelper): SelectOption | undefined {\n\t\tlet semanticDates: SemanticDateConfiguration | undefined;\n\t\tlet filterOption: SelectOption | undefined;\n\t\tconst operator = condition.operator && condition.operator !== \"\" ? FilterOperatorUtil.getOperator(condition.operator) : undefined;\n\t\tif (operator instanceof RangeOperator) {\n\t\t\tsemanticDates = stateFilterToSelectionVariant.createSemanticDatesFromConditions(condition);\n\t\t\tfilterOption = stateFilterToSelectionVariant.getOptionForPropertyWithRangeOperator(\n\t\t\t\toperator,\n\t\t\t\tcondition,\n\t\t\t\tfilterKey,\n\t\t\t\tpropertyHelper\n\t\t\t);\n\t\t} else {\n\t\t\tconst semanticDateOpsExt = SemanticDateOperators.getSemanticDateOperations();\n\t\t\tif (semanticDateOpsExt.includes(condition.operator)) {\n\t\t\t\tsemanticDates = stateFilterToSelectionVariant.createSemanticDatesFromConditions(condition);\n\t\t\t}\n\t\t\tfilterOption = stateFilterToSelectionVariant.getSelectionFormatForNonRangeOperator(condition, filterKey);\n\t\t}\n\t\tif (filterOption?.Option) {\n\t\t\tfilterOption.SemanticDates = semanticDates ? semanticDates : undefined;\n\t\t}\n\t\treturn filterOption;\n\t},\n\t/**\n\t * Calculate the filter conditions for the Select option.\n\t * @param condition Condition object\n\t * @param filterKey Name of the filter key\n\t * @returns The Select Option object or undefined\n\t */\n\tgetSelectionFormatForNonRangeOperator: function (condition: ConditionObject, filterKey: string): SelectOption | undefined {\n\t\tconst [lowValue, highValue] = condition.values as (string | number | boolean | null | undefined)[];\n\t\treturn stateFilterToSelectionVariant.getSelectOption(\n\t\t\tcondition.operator,\n\t\t\tlowValue !== undefined && lowValue !== null ? lowValue.toString() : \"\",\n\t\t\thighValue !== undefined && highValue !== null ? highValue.toString() : null,\n\t\t\tfilterKey\n\t\t);\n\t},\n\n\t/**\n\t * Get the type-specific information for the filter field.\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper and filter delegate controller of filter bar\n\t * @returns The object with typeConfig value\n\t */\n\tgetTypeInfoForFilterProperty: function (filterKey: string, propertyHelper: PropertyHelper): TypeConfig | undefined {\n\t\t// for few filter fields keys will not be present hence skip those properties\n\t\tconst propertyInfo = propertyHelper.getProperty(filterKey) as unknown as PropertyInfo;\n\t\t// This needs to be reviewed because the getProperty function from the PropertyHelper does not return a typeConfig\n\t\tlet typeConfig: TypeConfig | undefined;\n\t\tif (propertyInfo) {\n\t\t\ttypeConfig = propertyInfo.typeConfig;\n\t\t}\n\t\treturn typeConfig;\n\t},\n\n\t/**\n\t * Calculate the options for date range values.\n\t * @param operator Object for the given operator name\n\t * @param condition The Value object that is present in the values of the filter condition\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper of filter bar\n\t * @returns The selectionOption for filter field\n\t */\n\tgetOptionForPropertyWithRangeOperator: function (\n\t\toperator: Operator,\n\t\tcondition: ConditionObject,\n\t\tfilterKey: string,\n\t\tpropertyHelper: PropertyHelper\n\t): SelectOption | undefined {\n\t\tconst filterOption: SelectOption = {\n\t\t\tSign: \"I\",\n\t\t\tOption: \"\",\n\t\t\tLow: \"\",\n\t\t\tHigh: \"\"\n\t\t};\n\t\tconst typeConfig = stateFilterToSelectionVariant.getTypeInfoForFilterProperty(filterKey, propertyHelper);\n\n\t\t// handling of Date RangeOperators\n\t\tconst modelFilter = operator.getModelFilter(\n\t\t\tcondition,\n\t\t\tfilterKey,\n\t\t\t(typeConfig ? typeConfig.typeInstance : undefined) as unknown as Type,\n\t\t\tfalse,\n\t\t\ttypeConfig ? typeConfig.baseType : undefined\n\t\t);\n\t\tconst filters: Filter[] | undefined = modelFilter.getFilters();\n\t\tif (filters === undefined) {\n\t\t\tfilterOption.Sign = operator.exclude ? \"E\" : \"I\";\n\t\t\t// FIXME Those are private methods from MDC\n\t\t\tfilterOption.Low = TypeMap.externalizeValue(modelFilter.getValue1(), typeConfig ? typeConfig.typeInstance : \"string\");\n\t\t\tfilterOption.High = TypeMap.externalizeValue(modelFilter.getValue2(), typeConfig ? typeConfig.typeInstance : \"string\");\n\t\t\tfilterOption.Option = modelFilter.getOperator() ?? \"\";\n\t\t}\n\t\treturn filterOption.Option != \"\" ? filterOption : undefined;\n\t},\n\n\t/**\n\t * Get sign and option of selection option.\n\t * @param operator The option of selection variant\n\t * @param lowValue The single value or the lower boundary of the interval; the <code>null</code> value is not allowed\n\t * @param highValue The High value of the range; if this value is not necessary, <code>null</code> is used</li>\n\t * @param filterKey The name of the filter field\n\t * @returns The selection state\n\t */\n\tgetSelectOption: function (operator: string, lowValue: string, highValue: string | null, filterKey: string): SelectOption | undefined {\n\t\tconst selectOptionState = {\n\t\t\tOption: \"\",\n\t\t\tSign: \"I\",\n\t\t\tLow: lowValue,\n\t\t\tHigh: highValue\n\t\t};\n\t\tswitch (operator) {\n\t\t\tcase \"Contains\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}*`;\n\t\t\t\tbreak;\n\t\t\tcase \"StartsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low += \"*\";\n\t\t\t\tbreak;\n\t\t\tcase \"EndsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}`;\n\t\t\t\tbreak;\n\t\t\tcase \"BT\":\n\t\t\tcase \"LE\":\n\t\t\tcase \"LT\":\n\t\t\tcase \"GT\":\n\t\t\tcase \"GE\":\n\t\t\tcase \"EQ\":\n\t\t\t\tselectOptionState.Option = operator;\n\t\t\t\tbreak;\n\t\t\tcase \"DATE\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tbreak;\n\t\t\tcase \"DATERANGE\":\n\t\t\t\tselectOptionState.Option = \"BT\";\n\t\t\t\tbreak;\n\t\t\tcase \"FROM\":\n\t\t\t\tselectOptionState.Option = \"GE\";\n\t\t\t\tbreak;\n\t\t\tcase \"TO\":\n\t\t\t\tselectOptionState.Option = \"LE\";\n\t\t\t\tbreak;\n\t\t\tcase \"EEQ\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tbreak;\n\t\t\tcase \"Empty\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tselectOptionState.Low = \"\";\n\t\t\t\tbreak;\n\t\t\tcase \"NE\":\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotContains\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}*`;\n\t\t\t\tbreak;\n\t\t\tcase \"NOTBT\":\n\t\t\t\tselectOptionState.Option = \"BT\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotStartsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low += \"*\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotEndsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}`;\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotEmpty\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tselectOptionState.Low = \"\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTLE\":\n\t\t\t\tselectOptionState.Option = \"LE\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTGE\":\n\t\t\t\tselectOptionState.Option = \"GE\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTLT\":\n\t\t\t\tselectOptionState.Option = \"LT\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTGT\":\n\t\t\t\tselectOptionState.Option = \"GT\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLog.warning(`${operator} is not supported. ${filterKey} could not be added to the Selection variant`);\n\t\t}\n\n\t\tif (selectOptionState.Option !== \"BT\") {\n\t\t\t// Cleanup to avoid exceptions\n\t\t\tselectOptionState.High = null;\n\t\t}\n\t\treturn selectOptionState.Option !== \"\" ? selectOptionState : undefined;\n\t},\n\n\t/**\n\t * Create the semantic dates from filter conditions.\n\t * @param condition Filter field condition\n\t * @returns The Semantic date conditions\n\t */\n\tcreateSemanticDatesFromConditions: function (condition: ConditionObject): SemanticDateConfiguration | undefined {\n\t\tif (!isEmptyObject(condition)) {\n\t\t\treturn {\n\t\t\t\thigh: condition.values[0] !== undefined && condition.values[0] !== null ? (condition.values[0] as string) : null,\n\t\t\t\tlow: condition.values[1] !== undefined && condition.values[1] !== null ? (condition.values[1] as string) : null,\n\t\t\t\toperator: condition.operator\n\t\t\t};\n\t\t}\n\t}\n};\n\nexport default stateFilterToSelectionVariant;\n"],"mappings":"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","ignoreList":[]}