{"version":3,"names":["stateFilterToSelectionVariant","getSelectionVariantFromConditions","filterConditions","propertyHelper","params","selectionVariant","SelectionVariant","isEmptyObject","filterKey","filterFieldCondition","length","selectOptions","getSelectionOptionsFromCondition","sanitizedFilterKey","replace","includes","massAddSelectOption","compareSelectOptions","options1","options2","Option","Sign","Low","High","mergeSelectionVariants","selectionVariant1","selectionVariant2","mergedSV","toJSONString","propertyNames","getSelectOptionsPropertyNames","addedProperties","propName","controlOptions","getSelectOption","mergedOptions","push","controlOption","some","mergedOption","stateFilters","condition","selectOption","getSelectionOption","semanticDates","filterOption","operator","FilterOperatorUtil","getOperator","undefined","RangeOperator","createSemanticDatesFromConditions","getOptionForPropertyWithRangeOperator","semanticDateOpsExt","SemanticDateOperators","getSemanticDateOperations","getSelectionFormatForNonRangeOperator","SemanticDates","lowValue","highValue","values","toString","getTypeInfoForFilterProperty","propertyInfo","getProperty","typeConfig","modelFilter","getModelFilter","typeInstance","baseType","filters","getFilters","exclude","TypeMap","externalizeValue","getValue1","getValue2","selectOptionState","Log","warning","high","low"],"sourceRoot":".","sources":["StateFilterToSelectionVariant.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport isEmptyObject from \"sap/base/util/isEmptyObject\";\nimport SemanticDateOperators from \"sap/fe/macros/filterBar/SemanticDateOperators\";\nimport type { PropertyInfo } from \"sap/fe/macros/internal/PropertyInfo\";\nimport type { SelectOption, SemanticDateConfiguration } from \"sap/fe/navigation/SelectionVariant\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type TypeConfig from \"sap/ui/mdc/TypeConfig\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport FilterOperatorUtil from \"sap/ui/mdc/condition/FilterOperatorUtil\";\nimport type Operator from \"sap/ui/mdc/condition/Operator\";\nimport RangeOperator from \"sap/ui/mdc/condition/RangeOperator\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\nimport type PropertyHelper from \"sap/ui/mdc/util/PropertyHelper\";\nimport type Filter from \"sap/ui/model/Filter\";\nimport type Type from \"sap/ui/model/Type\";\n\nconst stateFilterToSelectionVariant = {\n\t/**\n\t * Get selection variant based on the filter conditions.\n\t * @param filterConditions Configure the filter bar control\n\t * @param propertyHelper PropertyHelper of the filter bar\n\t * @param params Parameters of parametrized services\n\t * @returns The filter conditions are converted to the selection variant and returned\n\t */\n\tgetSelectionVariantFromConditions: function (\n\t\tfilterConditions: Record<string, ConditionObject[] | undefined>,\n\t\tpropertyHelper: PropertyHelper,\n\t\tparams?: string[]\n\t): SelectionVariant {\n\t\tconst selectionVariant = new SelectionVariant();\n\t\tif (!isEmptyObject(filterConditions)) {\n\t\t\tfor (const filterKey in filterConditions) {\n\t\t\t\tconst filterFieldCondition = filterConditions[filterKey];\n\t\t\t\tif (filterFieldCondition?.length) {\n\t\t\t\t\tconst selectOptions = stateFilterToSelectionVariant.getSelectionOptionsFromCondition(\n\t\t\t\t\t\tfilterFieldCondition,\n\t\t\t\t\t\tfilterKey,\n\t\t\t\t\t\tpropertyHelper\n\t\t\t\t\t);\n\t\t\t\t\tif (selectOptions.length) {\n\t\t\t\t\t\tconst sanitizedFilterKey = filterKey.replace(/\\*\\//g, \".\");\n\t\t\t\t\t\t// get parameters from filter bar\n\t\t\t\t\t\tif (params?.includes(filterKey)) {\n\t\t\t\t\t\t\t// trying to generate properties like $Parameter.CompanyCode if CompanyCode is a parameter\n\t\t\t\t\t\t\tselectionVariant.massAddSelectOption(`$Parameter.${sanitizedFilterKey}`, selectOptions);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tselectionVariant.massAddSelectOption(sanitizedFilterKey, selectOptions);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn selectionVariant;\n\t},\n\t/**\n\t * Compare two SelectOption objects and check if they are equal.\n\t * @param options1 The first SelectOption object\n\t * @param options2 The second SelectOption object\n\t * @returns True if the objects are equal, false otherwise\n\t */\n\tcompareSelectOptions: function (options1: SelectOption, options2: SelectOption): boolean {\n\t\treturn (\n\t\t\toptions1.Option === options2.Option &&\n\t\t\toptions1.Sign === options2.Sign &&\n\t\t\toptions1.Low === options2.Low &&\n\t\t\toptions1.High === options2.High\n\t\t);\n\t},\n\n\t/**\n\t * Merge two selection variants.\n\t * @param selectionVariant1 The first selectionVariant1 object\n\t * @param selectionVariant2 The second selectionVariant object\n\t * @returns The merged selectionVariant\n\t */\n\tmergeSelectionVariants: function (selectionVariant1: SelectionVariant, selectionVariant2: SelectionVariant): SelectionVariant {\n\t\t// Create a new SelectionVariant for the merged result, initially a clone of SelectionVariant1\n\t\tconst mergedSV = new SelectionVariant(selectionVariant1.toJSONString());\n\n\t\t// Get the property names from SelectionVariant2\n\t\tconst propertyNames = selectionVariant2.getSelectOptionsPropertyNames();\n\n\t\t// Keep track of added properties\n\t\tconst addedProperties: string[] = [];\n\n\t\t// Loop through each property in SelectionVariant2\n\t\tfor (const propName of propertyNames) {\n\t\t\tconst controlOptions = selectionVariant2.getSelectOption(propName) || [];\n\t\t\tconst mergedOptions = mergedSV.getSelectOption(propName) || [];\n\n\t\t\t// Check if the property already exists in SelectionVariant1\n\t\t\tif (!addedProperties.includes(propName)) {\n\t\t\t\t// If not, add the entire property from SelectionVariant2\n\t\t\t\tmergedSV.massAddSelectOption(propName, controlOptions);\n\t\t\t\taddedProperties.push(propName);\n\t\t\t} else {\n\t\t\t\t// If it exists in SelectionVariant1, only add the options that are not already present\n\t\t\t\tfor (const controlOption of controlOptions) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!mergedOptions.some((mergedOption) =>\n\t\t\t\t\t\t\tstateFilterToSelectionVariant.compareSelectOptions(mergedOption, controlOption)\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tmergedOptions.push(controlOption);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tmergedSV.massAddSelectOption(propName, mergedOptions);\n\t\t\t}\n\t\t}\n\n\t\treturn mergedSV;\n\t},\n\n\t/**\n\t * Method to add the filter conditions to selection variant.\n\t * @param stateFilters Retrieved filter condition for a filter field from StateUtils\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper of the filter bar\n\t * @returns The selection option array for a particular filter key\n\t */\n\tgetSelectionOptionsFromCondition: function (\n\t\tstateFilters: ConditionObject[],\n\t\tfilterKey: string,\n\t\tpropertyHelper: PropertyHelper\n\t): SelectOption[] {\n\t\tconst selectOptions: SelectOption[] = [];\n\t\tfor (const condition of stateFilters) {\n\t\t\tconst selectOption = stateFilterToSelectionVariant.getSelectionOption(condition, filterKey, propertyHelper);\n\t\t\tif (selectOption) {\n\t\t\t\tselectOptions.push(selectOption);\n\t\t\t}\n\t\t}\n\t\treturn selectOptions;\n\t},\n\t/**\n\t * Calculate the filter option for each value.\n\t * @param condition\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper of the filter bar\n\t * @returns The promise of the Select option\n\t */\n\tgetSelectionOption: function (condition: ConditionObject, filterKey: string, propertyHelper: PropertyHelper): SelectOption | undefined {\n\t\tlet semanticDates: SemanticDateConfiguration | undefined;\n\t\tlet filterOption: SelectOption | undefined;\n\t\tconst operator = condition.operator && condition.operator !== \"\" ? FilterOperatorUtil.getOperator(condition.operator) : undefined;\n\t\tif (operator instanceof RangeOperator) {\n\t\t\tsemanticDates = stateFilterToSelectionVariant.createSemanticDatesFromConditions(condition);\n\t\t\tfilterOption = stateFilterToSelectionVariant.getOptionForPropertyWithRangeOperator(\n\t\t\t\toperator,\n\t\t\t\tcondition,\n\t\t\t\tfilterKey,\n\t\t\t\tpropertyHelper\n\t\t\t);\n\t\t} else {\n\t\t\tconst semanticDateOpsExt = SemanticDateOperators.getSemanticDateOperations();\n\t\t\tif (semanticDateOpsExt.includes(condition.operator)) {\n\t\t\t\tsemanticDates = stateFilterToSelectionVariant.createSemanticDatesFromConditions(condition);\n\t\t\t}\n\t\t\tfilterOption = stateFilterToSelectionVariant.getSelectionFormatForNonRangeOperator(condition, filterKey);\n\t\t}\n\t\tif (filterOption?.Option) {\n\t\t\tfilterOption.SemanticDates = semanticDates ? semanticDates : undefined;\n\t\t}\n\t\treturn filterOption;\n\t},\n\t/**\n\t * Calculate the filter conditions for the Select option.\n\t * @param condition Condition object\n\t * @param filterKey Name of the filter key\n\t * @returns The Select Option object or undefined\n\t */\n\tgetSelectionFormatForNonRangeOperator: function (condition: ConditionObject, filterKey: string): SelectOption | undefined {\n\t\tconst [lowValue, highValue] = condition.values as (string | number | boolean | null | undefined)[];\n\t\treturn stateFilterToSelectionVariant.getSelectOption(\n\t\t\tcondition.operator,\n\t\t\tlowValue !== undefined && lowValue !== null ? lowValue.toString() : \"\",\n\t\t\thighValue !== undefined && highValue !== null ? highValue.toString() : null,\n\t\t\tfilterKey\n\t\t);\n\t},\n\n\t/**\n\t * Get the type-specific information for the filter field.\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper and filter delegate controller of filter bar\n\t * @returns The object with typeConfig value\n\t */\n\tgetTypeInfoForFilterProperty: function (filterKey: string, propertyHelper: PropertyHelper): TypeConfig | undefined {\n\t\t// for few filter fields keys will not be present hence skip those properties\n\t\tconst propertyInfo = propertyHelper.getProperty(filterKey) as unknown as PropertyInfo;\n\t\t// This needs to be reviewed because the getProperty function from the PropertyHelper does not return a typeConfig\n\t\tlet typeConfig: TypeConfig | undefined;\n\t\tif (propertyInfo) {\n\t\t\ttypeConfig = propertyInfo.typeConfig;\n\t\t}\n\t\treturn typeConfig;\n\t},\n\n\t/**\n\t * Calculate the options for date range values.\n\t * @param operator Object for the given operator name\n\t * @param condition The Value object that is present in the values of the filter condition\n\t * @param filterKey Name of the filter key\n\t * @param propertyHelper PropertyHelper of filter bar\n\t * @returns The selectionOption for filter field\n\t */\n\tgetOptionForPropertyWithRangeOperator: function (\n\t\toperator: Operator,\n\t\tcondition: ConditionObject,\n\t\tfilterKey: string,\n\t\tpropertyHelper: PropertyHelper\n\t): SelectOption | undefined {\n\t\tconst filterOption: SelectOption = {\n\t\t\tSign: \"I\",\n\t\t\tOption: \"\",\n\t\t\tLow: \"\",\n\t\t\tHigh: \"\"\n\t\t};\n\t\tconst typeConfig = stateFilterToSelectionVariant.getTypeInfoForFilterProperty(filterKey, propertyHelper);\n\n\t\t// handling of Date RangeOperators\n\t\tconst modelFilter = operator.getModelFilter(\n\t\t\tcondition,\n\t\t\tfilterKey,\n\t\t\t(typeConfig ? typeConfig.typeInstance : undefined) as unknown as Type,\n\t\t\tfalse,\n\t\t\ttypeConfig ? typeConfig.baseType : undefined\n\t\t);\n\t\tconst filters: Filter[] | undefined = modelFilter.getFilters();\n\t\tif (filters === undefined) {\n\t\t\tfilterOption.Sign = operator.exclude ? \"E\" : \"I\";\n\t\t\t// FIXME Those are private methods from MDC\n\t\t\tfilterOption.Low = TypeMap.externalizeValue(modelFilter.getValue1(), typeConfig ? typeConfig.typeInstance : \"string\");\n\t\t\tfilterOption.High = TypeMap.externalizeValue(modelFilter.getValue2(), typeConfig ? typeConfig.typeInstance : \"string\");\n\t\t\tfilterOption.Option = modelFilter.getOperator() ?? \"\";\n\t\t}\n\t\treturn filterOption.Option != \"\" ? filterOption : undefined;\n\t},\n\n\t/**\n\t * Get sign and option of selection option.\n\t * @param operator The option of selection variant\n\t * @param lowValue The single value or the lower boundary of the interval; the <code>null</code> value is not allowed\n\t * @param highValue The High value of the range; if this value is not necessary, <code>null</code> is used</li>\n\t * @param filterKey The name of the filter field\n\t * @returns The selection state\n\t */\n\tgetSelectOption: function (operator: string, lowValue: string, highValue: string | null, filterKey: string): SelectOption | undefined {\n\t\tconst selectOptionState = {\n\t\t\tOption: \"\",\n\t\t\tSign: \"I\",\n\t\t\tLow: lowValue,\n\t\t\tHigh: highValue\n\t\t};\n\t\tswitch (operator) {\n\t\t\tcase \"Contains\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}*`;\n\t\t\t\tbreak;\n\t\t\tcase \"StartsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low += \"*\";\n\t\t\t\tbreak;\n\t\t\tcase \"EndsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}`;\n\t\t\t\tbreak;\n\t\t\tcase \"BT\":\n\t\t\tcase \"LE\":\n\t\t\tcase \"LT\":\n\t\t\tcase \"GT\":\n\t\t\tcase \"GE\":\n\t\t\tcase \"EQ\":\n\t\t\t\tselectOptionState.Option = operator;\n\t\t\t\tbreak;\n\t\t\tcase \"DATE\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tbreak;\n\t\t\tcase \"DATERANGE\":\n\t\t\t\tselectOptionState.Option = \"BT\";\n\t\t\t\tbreak;\n\t\t\tcase \"FROM\":\n\t\t\t\tselectOptionState.Option = \"GE\";\n\t\t\t\tbreak;\n\t\t\tcase \"TO\":\n\t\t\t\tselectOptionState.Option = \"LE\";\n\t\t\t\tbreak;\n\t\t\tcase \"EEQ\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tbreak;\n\t\t\tcase \"Empty\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tselectOptionState.Low = \"\";\n\t\t\t\tbreak;\n\t\t\tcase \"NE\":\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotContains\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}*`;\n\t\t\t\tbreak;\n\t\t\tcase \"NOTBT\":\n\t\t\t\tselectOptionState.Option = \"BT\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotStartsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low += \"*\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotEndsWith\":\n\t\t\t\tselectOptionState.Option = \"CP\";\n\t\t\t\tselectOptionState.Low = `*${selectOptionState.Low}`;\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NotEmpty\":\n\t\t\t\tselectOptionState.Option = \"EQ\";\n\t\t\t\tselectOptionState.Low = \"\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTLE\":\n\t\t\t\tselectOptionState.Option = \"LE\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTGE\":\n\t\t\t\tselectOptionState.Option = \"GE\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTLT\":\n\t\t\t\tselectOptionState.Option = \"LT\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tcase \"NOTGT\":\n\t\t\t\tselectOptionState.Option = \"GT\";\n\t\t\t\tselectOptionState.Sign = \"E\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLog.warning(`${operator} is not supported. ${filterKey} could not be added to the Selection variant`);\n\t\t}\n\n\t\tif (selectOptionState.Option !== \"BT\") {\n\t\t\t// Cleanup to avoid exceptions\n\t\t\tselectOptionState.High = null;\n\t\t}\n\t\treturn selectOptionState.Option !== \"\" ? selectOptionState : undefined;\n\t},\n\n\t/**\n\t * Create the semantic dates from filter conditions.\n\t * @param condition Filter field condition\n\t * @returns The Semantic date conditions\n\t */\n\tcreateSemanticDatesFromConditions: function (condition: ConditionObject): SemanticDateConfiguration | undefined {\n\t\tif (!isEmptyObject(condition)) {\n\t\t\treturn {\n\t\t\t\thigh: condition.values[0] !== undefined && condition.values[0] !== null ? (condition.values[0] as string) : null,\n\t\t\t\tlow: condition.values[1] !== undefined && condition.values[1] !== null ? (condition.values[1] as string) : null,\n\t\t\t\toperator: condition.operator\n\t\t\t};\n\t\t}\n\t}\n};\n\nexport default stateFilterToSelectionVariant;\n"],"mappings":"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","ignoreList":[],"file":"StateFilterToSelectionVariant-dbg.js"}