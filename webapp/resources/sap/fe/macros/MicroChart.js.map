{"version":3,"file":"MicroChart.js","names":["NavigationType","MicroChart","_dec","defineUI5Class","returnTypes","_dec2","property","type","_dec3","required","_dec4","_dec5","_dec6","_dec7","_dec8","_dec9","_dec10","_dec11","event","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_class","_class2","_BuildingBlock","settings","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","_descriptor17","_descriptor18","_exports","_inheritsLoose","_proto","prototype","getSortOrder","sortingProps","map","sortingProp","Property","value","Descending","fullyQualifiedName","$Type","setProperty","key","suppressInvalidate","_applyingSettings","undefined","Object","keys","getMetadata","getProperties","includes","content","destroy","createContent","createMicroChart","clone","idSuffix","localIds","clonedMicroChart","onMetadataAvailable","async","_ownerComponent","owner","_getOwner","contextPath","preprocessorContext","fullContextPath","odataMetaModel","getMetaModel","_microChartDataModelObjectPath","getDataModelObjectForMetaPath","metaPath","targetObject","term","SortOrder","length","_sortOrder","Visualizations","getTargetNavigationPath","_chartTarget","_measureDataPath","enhanceDataModelPath","Measures","MicroChartHelper","shouldRenderMicroChart","_dataPoint","MeasureAttributes","DataPoint","$target","_targetNavigationPath","createBindingContext","showOnlyChart","logWarning","chartMap","type1","ChartType","ChartComponent","__ui5_require_async","default","microChartAggregations","getMicroChartAggregations","isAnalytics","getAggregation","setAggregation","_jsx","getMicroChartProperties","children","errorObject","Value","microChartProperties","size","hideOnNoData","dataPointPath","getAggregationForMicrochart","getObject","Dimensions","getBulletMicroChartProperties","getRadialMicroChartProperties","getHarveyMicroChartProperties","bars","columns","maxValue","MaximumValue","compileExpression","constant","valueOf","minValue","MinimumValue","colorPalette","getColorPaletteForMicroChart","data","showThresholdLine","criticalityExpressionForMicrochart","Criticality","buildExpressionForCriticalityColorMicroChart","getBulletMicroChartAggregations","getStackMicroChartAggregations","getHarveyMicroChartAggregations","getComparisonMicroChartAggregations","getAreaMicroChartAggregations","getColumnMicroChartAggregations","getLineMicroChartAggragations","createMicroChartId","chartType","chartIDPrefix","createId","getMicroChartContainerProperties","microChartContainerProperties","chartTitle","title","Title","chartDescription","description","Description","_binding","getBindingExpressionForMicrochart","uomPath","getUOMPathForMicrochart","id","chartsWithVisibleProperty","visible","not","ifElse","getExpressionFromAnnotation","annotations","UI","Hidden","dataPointQualifiers","getDataPointQualifiersForMicroChart","measures","name","getMeasurePropertyPaths","targetEntityType","getDataPointQualifiersForMeasures","dimensionDataPath","dimension","Common","Text","path","measurePrecision","precision","measureScale","getMeasureScaleForMicroChart","dimensionPrecision","calendarPattern","getCalendarPattern","createTitle","titleText","localLegacyTitleId","ID","generate","qualifier","viewId","getPageController","getView","getId","legacyTitleId","titleLinkProperties","text","resourceBundle","Lib","getResourceBundleFor","navigationType","ariaTranslatedText","getText","showAsLink","linkAriaText","showLink","CommonHelper","getHeaderDataPointLinkVisibility","TitleLink","linkPress","pressEvent","fireEvent","isValidChartType","ConditionalWrapper","condition","or","pathInModel","equal","getExpressionForMeasureUnit","contentTrue","createChartContent","contentFalse","binding","MicroChartContainer","microChartTitle","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","None"],"sources":["./MicroChart.tsx"],"sourcesContent":["import type { PathAnnotationExpression, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { Measure } from \"@sap-ux/vocabularies-types/vocabularies/Analytics\";\nimport type { SortOrderType } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type { PropertyAnnotations } from \"@sap-ux/vocabularies-types/vocabularies/Edm_Types\";\nimport type { DataPoint, DataPointType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { ChartType, UIAnnotationTerms, type Chart, type PresentationVariant } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { compileExpression, constant, equal, getExpressionFromAnnotation, ifElse, not, or, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { defineUI5Class, event, property } from \"sap/fe/base/ClassSupport\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport * as ID from \"sap/fe/core/helpers/StableIdHelper\";\nimport { buildExpressionForCriticalityColorMicroChart } from \"sap/fe/core/templating/CriticalityFormatters\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getTargetNavigationPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getExpressionForMeasureUnit } from \"sap/fe/core/templating/UIFormatters\";\nimport Text from \"sap/m/Text\";\nimport type { $ColumnMicroChartSettings } from \"sap/suite/ui/microchart/ColumnMicroChart\";\nimport type { $ComparisonMicroChartSettings } from \"sap/suite/ui/microchart/ComparisonMicroChart\";\nimport type { $LineMicroChartSettings } from \"sap/suite/ui/microchart/LineMicroChart\";\nimport type { $StackedBarMicroChartSettings } from \"sap/suite/ui/microchart/StackedBarMicroChart\";\nimport type { AggregationBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\nimport Lib from \"sap/ui/core/Lib\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport CommonHelper from \"./CommonHelper\";\nimport ConditionalWrapper from \"./controls/ConditionalWrapper\";\nimport TitleLink from \"./internal/TitleLink\";\nimport MicroChartContainer from \"./microchart/MicroChartContainer\";\nimport type { MicroChartAggregation, MicroChartSettings } from \"./microchart/MicroChartHelper\";\nimport MicroChartHelper from \"./microchart/MicroChartHelper\";\n\ntype ErrorObjectType = {\n\tDataPoint_Value?: unknown;\n};\n\nenum NavigationType {\n\t/**\n\t * For External Navigation\n\t */\n\tExternal = \"External\",\n\n\t/**\n\t * For In-Page Navigation\n\t */\n\tInPage = \"InPage\",\n\n\t/**\n\t * For No Navigation\n\t */\n\tNone = \"None\"\n}\n\n/**\n * Building block used to create a MicroChart based on the metadata provided by OData V4.\n * {@link demo:sap/fe/core/fpmExplorer/index.html#/buildingBlocks/microchart/ Overview of Micro Chart Building Block}\n * <br>\n * Usually, a contextPath and metaPath is expected.\n *\n *\n * Usage example:\n * <pre>\n * &lt;macros:MicroChart id=\"MyMicroChart\" contextPath=\"/RootEntity\" metaPath=\"@com.sap.vocabularies.UI.v1.Chart\" /&gt;\n * </pre>\n *  <pre>\n * sap.ui.require([\"sap/fe/macros/MicroChart\"], function(MicroChart) {\n * \t ...\n * \t new MicroChart(\"myMicroChart\", {metaPath:\"@com.sap.vocabularies.UI.v1.Chart\"})\n * })\n * </pre>\n * @alias sap.fe.macros.MicroChart\n * @ui5-metamodel\n * @public\n * @since 1.93.0\n */\n@defineUI5Class(\"sap.fe.macros.MicroChart\", {\n\treturnTypes: [\"sap.fe.macros.microchart.MicroChartContainer\", \"sap.fe.macros.controls.ConditionalWrapper\"]\n})\nexport default class MicroChart extends BuildingBlock<MicroChartContainer> {\n\t/**\n\t * To control the rendering of Title, Subtitle and Currency Labels. When the size is xs then we do\n\t * not see the inner labels of the MicroChart as well.\n\t * @public\n\t */\n\t@property({\n\t\ttype: \"boolean\"\n\t})\n\tpublic showOnlyChart = false;\n\n\t/**\n\t * Metadata path to the  MicroChart.\n\t * @public\n\t */\n\t@property({\n\t\ttype: \"string\",\n\t\trequired: true\n\t})\n\tpublic metaPath!: string;\n\n\t/**\n\t * context path to the MicroChart.\n\t * @public\n\t */\n\t@property({\n\t\ttype: \"string\"\n\t})\n\tpublic contextPath?: string;\n\n\t/**\n\t * Type of navigation, that is, External or InPage\n\t */\n\t@property({\n\t\ttype: \"string\"\n\t})\n\tnavigationType?: NavigationType = NavigationType.None;\n\n\t/**\n\t * Batch group ID along with which this call should be grouped.\n\t */\n\t@property({ type: \"string\" })\n\tbatchGroupId?: string;\n\n\t/**\n\t * Size of the MicroChart\n\t * @public\n\t */\n\t@property({ type: \"string\" })\n\tsize?: string;\n\n\t/**\n\t * Show blank space in case there is no data in the chart\n\t * @public\n\t */\n\t@property({ type: \"boolean\" })\n\thideOnNoData?: boolean = false;\n\n\t@property({ type: \"string\" })\n\ttitle = \"\";\n\n\t@property({ type: \"string\" })\n\tdescription = \"\";\n\n\t@event()\n\ttitlePress!: Function;\n\n\t@property({ type: \"object\" })\n\t_chartTarget!: Chart;\n\n\t@property({ type: \"object\" })\n\t_dataPoint!: DataPoint;\n\n\t@property({ type: \"object\" })\n\t_targetNavigationPath!: Context | undefined;\n\n\t@property({ type: \"object\" })\n\t_microChartDataModelObjectPath!: DataModelObjectPath<Chart | PresentationVariant> | undefined;\n\n\t@property({ type: \"string\" })\n\t_binding!: string;\n\n\t@property({ type: \"object\" })\n\t_sortOrder?: SortOrderType[];\n\n\t@property({ type: \"object\" })\n\t_measureDataPath?: DataModelObjectPath<Measure>;\n\n\t@property({ type: \"boolean\" })\n\tisAnalytics?: boolean;\n\n\tconstructor(settings?: $ControlSettings & PropertiesOf<MicroChart>, others?: PropertiesOf<MicroChart>) {\n\t\tsuper(settings, others);\n\t}\n\n\t/**\n\t * Gets the sortOrder for the microChart as mentioned in the PresentationVariant.\n\t * @param sortingProps Sorters from PresentationVariant.\n\t * @returns SortOrder\n\t */\n\tgetSortOrder(sortingProps: SortOrderType[]): SortOrderType[] {\n\t\treturn sortingProps.map((sortingProp: SortOrderType) => {\n\t\t\treturn {\n\t\t\t\tProperty: sortingProp.Property?.value as unknown as PropertyPath,\n\t\t\t\tDescending: sortingProp.Descending as boolean | undefined,\n\t\t\t\tfullyQualifiedName: \"\",\n\t\t\t\t$Type: CommonAnnotationTypes.SortOrderType\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Sets the key with the given value for MicroChart.\n\t * @param key The name of the property to set\n\t * @param value The value to set the property to\n\t * @param suppressInvalidate  If true, the managed object is not marked as changed\n\t * @returns MicroChart\n\t */\n\tsetProperty(key: string, value: string | boolean, suppressInvalidate?: boolean): this {\n\t\tif (!this._applyingSettings && value !== undefined && Object.keys(this.getMetadata().getProperties()).includes(key)) {\n\t\t\tsuper.setProperty(key, value, true);\n\t\t\tif (this.content) {\n\t\t\t\tthis.content.destroy();\n\t\t\t\tthis.content = this.createContent();\n\t\t\t\tthis.createMicroChart();\n\t\t\t}\n\t\t} else {\n\t\t\tsuper.setProperty(key, value, suppressInvalidate);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Overrides the clone method of the UI5 control to ensure that the suite micro chart is created asynchronously on the clone.\n\t *\n\t * Clone is a UI5 core Control method, which is not async and is called in a sync manner throughout UI5.\n\t * Hence we need to create the chart in a fire and forget fashion.\n\t *\n\t * @param idSuffix A suffix to be appended to the cloned element id\n\t * @param localIds An array of local IDs within the cloned hierarchy (internally used)\n\t * @returns The reference to the newly create clone\n\t */\n\tclone(idSuffix?: string | undefined, localIds?: string[]): this {\n\t\tconst clonedMicroChart = super.clone(idSuffix, localIds);\n\t\tclonedMicroChart.createMicroChart();\n\t\treturn clonedMicroChart;\n\t}\n\tpublic async onMetadataAvailable(_ownerComponent: TemplateComponent): Promise<void> {\n\t\tif (!this.content) {\n\t\t\tconst owner = this._getOwner();\n\t\t\tthis.contextPath = this.contextPath ?? owner?.preprocessorContext?.fullContextPath;\n\t\t\tconst odataMetaModel = owner?.getMetaModel();\n\t\t\tthis._microChartDataModelObjectPath = this.getDataModelObjectForMetaPath<Chart | PresentationVariant>(\n\t\t\t\tthis.metaPath,\n\t\t\t\tthis.contextPath\n\t\t\t);\n\t\t\tif (this._microChartDataModelObjectPath?.targetObject?.term === UIAnnotationTerms.PresentationVariant) {\n\t\t\t\tif ((this._microChartDataModelObjectPath.targetObject.SortOrder as unknown as SortOrderType[] | undefined)?.length) {\n\t\t\t\t\tthis._sortOrder = this.getSortOrder(this._microChartDataModelObjectPath.targetObject.SortOrder);\n\t\t\t\t}\n\t\t\t\tthis._microChartDataModelObjectPath = this.getDataModelObjectForMetaPath<Chart>(\n\t\t\t\t\t`${this._microChartDataModelObjectPath.targetObject.Visualizations[0].value}`,\n\t\t\t\t\tgetTargetNavigationPath(this._microChartDataModelObjectPath) + \"/\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (this._microChartDataModelObjectPath) {\n\t\t\t\tif (this._microChartDataModelObjectPath.targetObject?.term === UIAnnotationTerms.PresentationVariant) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(this._microChartDataModelObjectPath.targetObject.SortOrder as unknown as SortOrderType[] | undefined)?.length !=\n\t\t\t\t\t\tnull\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis._sortOrder = this.getSortOrder(this._microChartDataModelObjectPath.targetObject.SortOrder);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._chartTarget = this._microChartDataModelObjectPath.targetObject as Chart;\n\t\t\t\tthis._measureDataPath = enhanceDataModelPath<Measure>(\n\t\t\t\t\tthis._microChartDataModelObjectPath,\n\t\t\t\t\tthis._chartTarget.Measures[0].value\n\t\t\t\t);\n\t\t\t\tif (MicroChartHelper.shouldRenderMicroChart(this._chartTarget)) {\n\t\t\t\t\tthis._dataPoint = this._chartTarget?.MeasureAttributes[0]?.DataPoint?.$target as DataPoint;\n\t\t\t\t\tthis._targetNavigationPath = odataMetaModel?.createBindingContext(\n\t\t\t\t\t\tgetTargetNavigationPath(this._microChartDataModelObjectPath)\n\t\t\t\t\t) as Context | undefined;\n\n\t\t\t\t\tthis.showOnlyChart = typeof this.showOnlyChart === \"string\" ? this.showOnlyChart === \"true\" : this.showOnlyChart;\n\t\t\t\t\tthis.content = this.createContent();\n\t\t\t\t\tawait this.createMicroChart();\n\t\t\t\t} else {\n\t\t\t\t\tthis.logWarning();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync createMicroChart(): Promise<void> {\n\t\tconst chartMap: Record<string, string> = {\n\t\t\t\"UI.ChartType/Bullet\": `sap/suite/ui/microchart/BulletMicroChart`,\n\t\t\t\"UI.ChartType/Donut\": `sap/suite/ui/microchart/RadialMicroChart`,\n\t\t\t\"UI.ChartType/Pie\": `sap/suite/ui/microchart/HarveyBallMicroChart`,\n\t\t\t\"UI.ChartType/BarStacked\": `sap/suite/ui/microchart/StackedBarMicroChart`,\n\t\t\t\"UI.ChartType/Column\": `sap/suite/ui/microchart/ColumnMicroChart`,\n\t\t\t\"UI.ChartType/Bar\": `sap/suite/ui/microchart/ComparisonMicroChart`,\n\t\t\t\"UI.ChartType/Line\": `sap/suite/ui/microchart/LineMicroChart`,\n\t\t\t\"UI.ChartType/Area\": `sap/suite/ui/microchart/AreaMicroChart`\n\t\t};\n\n\t\tconst type1 = this._chartTarget.ChartType;\n\t\tif (Object.keys(chartMap).includes(type1)) {\n\t\t\tconst ChartComponent = (await import(chartMap[type1])).default;\n\t\t\tconst microChartAggregations = await this.getMicroChartAggregations();\n\t\t\tif (this.isAnalytics) {\n\t\t\t\t(this.content?.getAggregation(\"contentTrue\") as MicroChartContainer).setAggregation(\n\t\t\t\t\t\"microChart\",\n\t\t\t\t\t<ChartComponent {...this.getMicroChartProperties()}>{microChartAggregations}</ChartComponent>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t(this.content as MicroChartContainer).setAggregation(\n\t\t\t\t\t\"microChart\",\n\t\t\t\t\t<ChartComponent {...this.getMicroChartProperties()}>{microChartAggregations}</ChartComponent>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tlogWarning(): void {\n\t\tconst errorObject: ErrorObjectType = {};\n\t\tif (this._chartTarget.ChartType === ChartType.Bullet) {\n\t\t\terrorObject[\"DataPoint_Value\"] = this._dataPoint?.Value || undefined;\n\t\t}\n\t\tMicroChartHelper.logWarning(this._chartTarget.ChartType, errorObject);\n\t}\n\n\tgetMicroChartProperties(): Partial<PropertiesOf<MicroChartSettings>> | undefined {\n\t\tlet microChartProperties: MicroChartSettings = {\n\t\t\tsize: this.size,\n\t\t\thideOnNoData: this.hideOnNoData\n\t\t};\n\n\t\tconst dataPointPath = enhanceDataModelPath<DataPointType>(\n\t\t\tthis._microChartDataModelObjectPath as DataModelObjectPath<unknown>,\n\t\t\tthis._chartTarget?.MeasureAttributes[0]?.DataPoint?.value\n\t\t);\n\n\t\tconst microChartAggregations = MicroChartHelper.getAggregationForMicrochart(\n\t\t\tthis._chartTarget.ChartType,\n\t\t\tthis._targetNavigationPath?.getObject(),\n\t\t\tdataPointPath,\n\t\t\tthis._targetNavigationPath?.getObject(\"@sapui.name\"),\n\t\t\tundefined,\n\t\t\tthis._measureDataPath as DataModelObjectPath<Measure>,\n\t\t\tthis._sortOrder as SortOrderType[],\n\t\t\t(this._microChartDataModelObjectPath?.targetObject as Chart)?.Dimensions?.[0]?.value,\n\t\t\ttrue\n\t\t);\n\n\t\tswitch (this._chartTarget.ChartType) {\n\t\t\tcase \"UI.ChartType/Bullet\":\n\t\t\t\tmicroChartProperties = MicroChartHelper.getBulletMicroChartProperties(microChartProperties, this._dataPoint);\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Donut\":\n\t\t\t\tmicroChartProperties = MicroChartHelper.getRadialMicroChartProperties(microChartProperties, this._dataPoint);\n\t\t\t\tbreak;\n\n\t\t\tcase \"UI.ChartType/Pie\":\n\t\t\t\tmicroChartProperties = MicroChartHelper.getHarveyMicroChartProperties(microChartProperties, this._dataPoint);\n\t\t\t\tbreak;\n\n\t\t\tcase \"UI.ChartType/BarStacked\":\n\t\t\t\t(microChartProperties as $StackedBarMicroChartSettings).bars = microChartAggregations as unknown as AggregationBindingInfo;\n\t\t\t\tbreak;\n\n\t\t\tcase \"UI.ChartType/Column\":\n\t\t\t\t(microChartProperties as $ColumnMicroChartSettings).columns = MicroChartHelper.getAggregationForMicrochart(\n\t\t\t\t\tthis._chartTarget.ChartType,\n\t\t\t\t\tthis._targetNavigationPath?.getObject(),\n\t\t\t\t\tdataPointPath,\n\t\t\t\t\tthis._targetNavigationPath?.getObject(\"@sapui.name\"),\n\t\t\t\t\tthis._chartTarget?.Dimensions?.[0],\n\t\t\t\t\tthis._measureDataPath as DataModelObjectPath<Measure>,\n\t\t\t\t\tthis._sortOrder as SortOrderType[],\n\t\t\t\t\t(this._microChartDataModelObjectPath?.targetObject as Chart)?.Dimensions?.[0]?.value,\n\t\t\t\t\ttrue\n\t\t\t\t) as AggregationBindingInfo;\n\t\t\t\tbreak;\n\n\t\t\tcase \"UI.ChartType/Bar\":\n\t\t\t\t(microChartProperties as $ComparisonMicroChartSettings).maxValue = this._dataPoint.MaximumValue\n\t\t\t\t\t? compileExpression(constant(this._dataPoint.MaximumValue?.valueOf()))\n\t\t\t\t\t: undefined;\n\t\t\t\t(microChartProperties as $ComparisonMicroChartSettings).minValue = this._dataPoint.MinimumValue\n\t\t\t\t\t? compileExpression(constant(this._dataPoint.MinimumValue?.valueOf()))\n\t\t\t\t\t: undefined;\n\t\t\t\t(microChartProperties as $ComparisonMicroChartSettings).colorPalette = MicroChartHelper.getColorPaletteForMicroChart(\n\t\t\t\t\tthis._dataPoint\n\t\t\t\t);\n\t\t\t\t(microChartProperties as $ComparisonMicroChartSettings).data = microChartAggregations as unknown as AggregationBindingInfo;\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Line\":\n\t\t\t\t(microChartProperties as $LineMicroChartSettings).showThresholdLine = false;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn microChartProperties;\n\t}\n\n\tasync getMicroChartAggregations(): Promise<MicroChartAggregation | undefined> {\n\t\tconst criticalityExpressionForMicrochart = this._dataPoint.Criticality\n\t\t\t? buildExpressionForCriticalityColorMicroChart(this._dataPoint)\n\t\t\t: undefined;\n\t\tif (this._chartTarget.ChartType === ChartType.Bullet) {\n\t\t\treturn MicroChartHelper.getBulletMicroChartAggregations(this._dataPoint, criticalityExpressionForMicrochart);\n\t\t}\n\t\tif (this._chartTarget.ChartType === ChartType.BarStacked) {\n\t\t\treturn MicroChartHelper.getStackMicroChartAggregations(\n\t\t\t\tthis._dataPoint,\n\t\t\t\tthis._measureDataPath,\n\t\t\t\tcriticalityExpressionForMicrochart\n\t\t\t);\n\t\t}\n\t\tif (this._chartTarget.ChartType === ChartType.Pie) {\n\t\t\treturn MicroChartHelper.getHarveyMicroChartAggregations(this._dataPoint, criticalityExpressionForMicrochart);\n\t\t}\n\t\tif (this._chartTarget.ChartType === ChartType.Bar) {\n\t\t\treturn MicroChartHelper.getComparisonMicroChartAggregations(\n\t\t\t\tthis._dataPoint,\n\t\t\t\tcriticalityExpressionForMicrochart,\n\t\t\t\tthis._chartTarget\n\t\t\t);\n\t\t}\n\t\tif (this._chartTarget.ChartType === ChartType.Area) {\n\t\t\treturn MicroChartHelper.getAreaMicroChartAggregations(\n\t\t\t\tthis._chartTarget,\n\t\t\t\tthis._microChartDataModelObjectPath as DataModelObjectPath<Chart | PresentationVariant>,\n\t\t\t\tthis._targetNavigationPath as Context,\n\t\t\t\tthis.showOnlyChart\n\t\t\t);\n\t\t}\n\t\tif (this._chartTarget.ChartType === ChartType.Column) {\n\t\t\treturn MicroChartHelper.getColumnMicroChartAggregations(\n\t\t\t\tthis._dataPoint,\n\t\t\t\tcriticalityExpressionForMicrochart,\n\t\t\t\tthis.showOnlyChart\n\t\t\t);\n\t\t}\n\t\tif (this._chartTarget.ChartType === ChartType.Line) {\n\t\t\tif (this._microChartDataModelObjectPath && this._targetNavigationPath) {\n\t\t\t\treturn MicroChartHelper.getLineMicroChartAggragations(\n\t\t\t\t\tthis._microChartDataModelObjectPath,\n\t\t\t\t\tthis._chartTarget,\n\t\t\t\t\tthis._targetNavigationPath\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\tcreateMicroChartId(chartType: string): string | undefined {\n\t\tlet chartIDPrefix;\n\t\tswitch (chartType) {\n\t\t\tcase \"UI.ChartType/Bullet\":\n\t\t\t\tchartIDPrefix = \"BulletMicroChart\";\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Donut\":\n\t\t\t\tchartIDPrefix = \"RadialMicroChart\";\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Pie\":\n\t\t\t\tchartIDPrefix = \"HarveyBallMicroChart\";\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/BarStacked\":\n\t\t\t\tchartIDPrefix = \"StackedBarMicroChart\";\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Area\":\n\t\t\t\tchartIDPrefix = \"AreaMicroChart\";\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Column\":\n\t\t\t\tchartIDPrefix = \"ColumnMicroChart\";\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Bar\":\n\t\t\t\tchartIDPrefix = \"ComparisonMicroChart\";\n\t\t\t\tbreak;\n\t\t\tcase \"UI.ChartType/Line\":\n\t\t\t\tchartIDPrefix = \"LineMicroChart\";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn this.createId(chartIDPrefix);\n\t}\n\n\tgetMicroChartContainerProperties(): PropertiesOf<MicroChartContainer> {\n\t\tconst microChartContainerProperties: PropertiesOf<MicroChartContainer> = {\n\t\t\tchartTitle: this.title || (this._chartTarget.Title?.valueOf() as string) || undefined\n\t\t};\n\t\tmicroChartContainerProperties.showOnlyChart = this.showOnlyChart;\n\t\tmicroChartContainerProperties.chartTitle = (this._chartTarget.Title as string) || undefined;\n\t\tmicroChartContainerProperties.chartDescription =\n\t\t\tthis.description || (this._chartTarget.Description?.valueOf() as string) || undefined;\n\n\t\tthis._binding = MicroChartHelper.getBindingExpressionForMicrochart(\n\t\t\tthis._chartTarget.ChartType,\n\t\t\tthis._measureDataPath as DataModelObjectPath<Measure>,\n\t\t\tthis,\n\t\t\tthis._targetNavigationPath?.getObject(),\n\t\t\tthis._targetNavigationPath?.getObject(\"@sapui.name\")\n\t\t);\n\n\t\tmicroChartContainerProperties.uomPath = MicroChartHelper.getUOMPathForMicrochart(\n\t\t\tthis.showOnlyChart,\n\t\t\tthis._measureDataPath,\n\t\t\tthis._chartTarget.ChartType\n\t\t);\n\n\t\tmicroChartContainerProperties.id = this.createMicroChartId(this._chartTarget.ChartType);\n\n\t\tconst chartsWithVisibleProperty = [\"UI.ChartType/Bullet\", \"UI.ChartType/Pie\", \"UI.ChartType/Radial\"];\n\t\tif (chartsWithVisibleProperty.includes(this._chartTarget.ChartType)) {\n\t\t\tmicroChartContainerProperties.visible = compileExpression(\n\t\t\t\tnot(\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tgetExpressionFromAnnotation(this._chartTarget.Measures[0].$target?.annotations.UI?.Hidden),\n\t\t\t\t\t\tconstant(true),\n\t\t\t\t\t\tconstant(false)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tmicroChartContainerProperties.visible = undefined;\n\t\t}\n\n\t\tif (this._chartTarget.ChartType === ChartType.BarStacked) {\n\t\t\tmicroChartContainerProperties.dataPointQualifiers = MicroChartHelper.getDataPointQualifiersForMicroChart(\n\t\t\t\tthis._chartTarget?.MeasureAttributes[0]?.DataPoint?.value as string\n\t\t\t) as string[] | undefined;\n\t\t}\n\t\tif (this._chartTarget.ChartType === ChartType.Area || this._chartTarget.ChartType === ChartType.Column) {\n\t\t\tmicroChartContainerProperties.dataPointQualifiers = MicroChartHelper.getDataPointQualifiersForMicroChart(\n\t\t\t\tthis._chartTarget?.MeasureAttributes[0]?.DataPoint?.value as string\n\t\t\t) as unknown as string[];\n\t\t\tmicroChartContainerProperties.measures = [\n\t\t\t\t(this._measureDataPath as DataModelObjectPath<Property>)?.targetObject?.name as string\n\t\t\t];\n\t\t}\n\n\t\tif (this._chartTarget.ChartType === ChartType.Line) {\n\t\t\tmicroChartContainerProperties.measures = MicroChartHelper.getMeasurePropertyPaths(\n\t\t\t\tthis._chartTarget,\n\t\t\t\tthis._microChartDataModelObjectPath?.targetEntityType.annotations,\n\t\t\t\t\"Line\",\n\t\t\t\ttrue\n\t\t\t) as string[];\n\n\t\t\tmicroChartContainerProperties.dataPointQualifiers = MicroChartHelper.getDataPointQualifiersForMeasures(\n\t\t\t\tthis._chartTarget,\n\t\t\t\tthis._microChartDataModelObjectPath?.targetEntityType.annotations,\n\t\t\t\t\"Line\",\n\t\t\t\ttrue\n\t\t\t) as string[];\n\t\t}\n\n\t\tif (\n\t\t\tthis._chartTarget.ChartType === ChartType.Area ||\n\t\t\tthis._chartTarget.ChartType === ChartType.Column ||\n\t\t\tthis._chartTarget.ChartType === ChartType.Line\n\t\t) {\n\t\t\tconst dimensionDataPath = enhanceDataModelPath<Property>(\n\t\t\t\tthis._microChartDataModelObjectPath as DataModelObjectPath<Chart | PresentationVariant>,\n\t\t\t\tthis._chartTarget.Dimensions[0].value\n\t\t\t);\n\n\t\t\tmicroChartContainerProperties.dimension = dimensionDataPath?.targetObject?.annotations?.Common?.Text\n\t\t\t\t? (dimensionDataPath?.targetObject?.annotations?.Common?.Text as unknown as PathAnnotationExpression<string>)?.path\n\t\t\t\t: dimensionDataPath?.targetObject?.name;\n\t\t\tmicroChartContainerProperties.measurePrecision = this._dataPoint?.Value?.$target?.precision;\n\t\t\tmicroChartContainerProperties.measureScale = MicroChartHelper.getMeasureScaleForMicroChart(this._dataPoint);\n\t\t\tmicroChartContainerProperties.dimensionPrecision = dimensionDataPath?.targetObject?.precision;\n\t\t\tmicroChartContainerProperties.calendarPattern = MicroChartHelper.getCalendarPattern(\n\t\t\t\tdimensionDataPath?.targetObject?.type as string,\n\t\t\t\tdimensionDataPath?.targetObject?.annotations as PropertyAnnotations,\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\t\treturn microChartContainerProperties;\n\t}\n\n\tcreateTitle(titleText: string | undefined): TitleLink | undefined {\n\t\tif (titleText) {\n\t\t\t// The title had this id in template time and we need to maintain the same id.\n\t\t\tconst localLegacyTitleId = ID.generate([\n\t\t\t\t\"fe\",\n\t\t\t\t\"MicroChartLink\",\n\t\t\t\tthis._targetNavigationPath?.getObject(\"@sapui.name\"),\n\t\t\t\tthis._microChartDataModelObjectPath?.targetObject?.term,\n\t\t\t\tthis._microChartDataModelObjectPath?.targetObject?.qualifier\n\t\t\t]);\n\t\t\tconst viewId = this.getPageController()?.getView().getId();\n\t\t\tconst legacyTitleId = `${viewId}--${localLegacyTitleId}`;\n\n\t\t\tconst titleLinkProperties: PropertiesOf<TitleLink> = {\n\t\t\t\tid: legacyTitleId,\n\t\t\t\ttext: titleText\n\t\t\t};\n\t\t\tconst resourceBundle = Lib.getResourceBundleFor(\"sap.fe.macros\");\n\t\t\tif (this.navigationType === \"InPage\") {\n\t\t\t\tconst ariaTranslatedText = resourceBundle?.getText(\"T_COMMON_HEADERDP_TITLE_LINK_INPAGE_ARIA\");\n\t\t\t\ttitleLinkProperties.showAsLink = true;\n\t\t\t\ttitleLinkProperties.linkAriaText = ariaTranslatedText;\n\t\t\t} else if (this.navigationType === \"External\") {\n\t\t\t\tconst showLink = CommonHelper.getHeaderDataPointLinkVisibility(localLegacyTitleId, true);\n\t\t\t\tconst ariaTranslatedText = resourceBundle?.getText(\"M_MICROCHART_TITLE_FRAGMENT_HEADER_MICROCHART_LINK_ARIA\");\n\t\t\t\ttitleLinkProperties.showAsLink = showLink;\n\t\t\t\ttitleLinkProperties.linkAriaText = ariaTranslatedText;\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<TitleLink\n\t\t\t\t\t{...titleLinkProperties}\n\t\t\t\t\tlinkPress={(pressEvent: Event): void => {\n\t\t\t\t\t\tthis.fireEvent(\"titlePress\", pressEvent);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * The function to create microchart content.\n\t * @returns MicroChartContainer which will contain Title and micro chart content for each of the microchart.\n\t */\n\tcreateContent(): MicroChartContainer {\n\t\tconst isValidChartType = [\n\t\t\t\"UI.ChartType/Bullet\",\n\t\t\t\"UI.ChartType/Donut\",\n\t\t\t\"UI.ChartType/Pie\",\n\t\t\t\"UI.ChartType/BarStacked\",\n\t\t\t\"UI.ChartType/Area\",\n\t\t\t\"UI.ChartType/Column\",\n\t\t\t\"UI.ChartType/Bar\",\n\t\t\t\"UI.ChartType/Line\"\n\t\t].includes(this._chartTarget.ChartType);\n\t\tif (!isValidChartType) {\n\t\t\treturn <Text text=\"This chart type is not supported. Other Types yet to be implemented..\" />;\n\t\t} else if (this.isAnalytics) {\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper\n\t\t\t\t\tcondition={compileExpression(or(not(pathInModel(\"@$ui5.node.isExpanded\")), equal(pathInModel(\"@$ui5.node.level\"), 0)))}\n\t\t\t\t\tvisible={getExpressionForMeasureUnit(this._dataPoint.Value.$target)}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: this.createChartContent(),\n\t\t\t\t\t\tcontentFalse: <Text text=\"*\"></Text>\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.createChartContent();\n\t\t}\n\t}\n\n\tcreateChartContent(): MicroChartContainer {\n\t\tconst microChartContainerProperties = {\n\t\t\t...this.getMicroChartContainerProperties(),\n\t\t\tbinding: this._binding\n\t\t};\n\t\treturn (\n\t\t\t<MicroChartContainer {...microChartContainerProperties}>\n\t\t\t\t{{\n\t\t\t\t\tmicroChartTitle: !this.showOnlyChart ? this.createTitle(microChartContainerProperties.chartTitle) : undefined\n\t\t\t\t}}\n\t\t\t</MicroChartContainer>\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}