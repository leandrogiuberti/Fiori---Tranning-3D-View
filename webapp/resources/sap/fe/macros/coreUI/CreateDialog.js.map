{"version":3,"file":"CreateDialog.js","names":["ContextUpdateDialogEventProvider","_dec","defineUI5Class","_dec2","event","_class","_class2","_EventProvider","_this","_len","arguments","length","args","Array","_key","call","this","_initializerDefineProperty","_descriptor","_inheritsLoose","EventProvider","_applyDecoratedDescriptor","prototype","configurable","enumerable","writable","initializer","CreateDialog","contextToUpdate","fieldNames","appComponent","mode","parentControl","actionParameterInfos","eventProvider","model","getModel","metaModel","getMetaModel","metaPath","getMetaPath","getPath","requiredFieldNames","getRequiredPropertiesFromInsertRestrictions","_exports","_proto","attachExitDialog","oData","fnFunction","oListener","attachEvent","fireExitDialog","accept","fireEvent","getEditMode","property","annotations","Common","FieldControl","fieldControl","$EnumMember","getFieldVHTypeAhead","fieldName","propertyObjectPath","_jsx","Popover","children","MTable","id","generate","caseSensitive","useCaseSensitiveFilterRequests","convertedTypes","entityContainer","Capabilities","FilterFunctions","useAsValueHelp","ValueListWithFixedValues","getFieldVHDialog","valueOf","VHDialog","undefined","getFieldValueHelp","hasValueHelp","vhDelegate","name","payload","propertyPath","getTargetObjectPath","qualifiers","valueHelpQualifier","ValueHelp","delegate","validateInput","requiresValidation","typeahead","dialog","createFormElement","listObjectPath","listMetaPath","enhanceDataModelPath","targetObject","propertyMetaContext","createBindingContext","propertyPlaceHolderMetaContext","field","MDCField","retrieveTextFromValueList","targetEntityType","value","AnnotationHelper","format","getObject","context","placeholder","width","required","compileExpression","or","isRequiredExpression","includes","display","FieldHelper","getAPDialogDisplayFormat","valueHelp","editMode","dependents","customData","CustomData","liveChange","handleLiveChange","bind","change","handleChange","push","isMultiValue","getValue","validationPromise","hasError","_jsxs","_Fragment","Label","text","afterOpen","firstField","focusInfo","getFocusInfo","targetInfo","silent","focus","createDialog","resourceModel","getResourceModel","metaContext","objectPath","getInvolvedDataModelObjects","beginButtonLabel","getText","endButton","Button","press","onCancel","Dialog","title","targetEntitySet","resizable","draggable","initialFocus","beginButton","onOK","type","content","SimpleForm","map","displayErrorMessages","messages","contextMetaPath","message","target","getTargets","targetMetaPath","parameterInfo","find","actionParameterInfo","setValueState","getType","MessageType","Error","setValueStateText","getMessage","messageControlIDs","getControlIds","getId","removeMessagesForActionParameter","messageControlId","allMessages","Messaging","getMessageModel","getData","relevantMessages","filter","msg","some","controlId","removeMessages","liveChangeEvent","fieldId","getSource","async","changeEvent","getParameter","None","error","ActionRuntime","validateProperties","onEscape","p","reject","openDialog","setEscapeHandler","addDependent","setBindingContext","open","closeDialog","BusyLocker","isLocked","unlock","close","destroy","setBusy","busy","lock","isOpen"],"sources":["./CreateDialog.tsx"],"sourcesContent":["import type { EntitySet } from \"@sap-ux/vocabularies-types\";\nimport { type Property } from \"@sap-ux/vocabularies-types\";\nimport { compileExpression, or } from \"sap/fe/base/BindingToolkit\";\nimport { defineUI5Class, event } from \"sap/fe/base/ClassSupport\";\nimport type { ActionParameterInfo } from \"sap/fe/core/ActionRuntime\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { StandardDialog } from \"sap/fe/core/UIProvider\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { getRequiredPropertiesFromInsertRestrictions } from \"sap/fe/core/helpers/MetaModelFunction\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { enhanceDataModelPath, getTargetObjectPath, type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isRequiredExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport { hasValueHelp } from \"sap/fe/core/templating/PropertyHelper\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport { requiresValidation, useCaseSensitiveFilterRequests } from \"sap/fe/macros/internal/valuehelp/ValueHelpTemplating\";\nimport Button from \"sap/m/Button\";\nimport Dialog from \"sap/m/Dialog\";\nimport Label from \"sap/m/Label\";\nimport EventProvider from \"sap/ui/base/EventProvider\";\nimport type Control from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport SimpleForm from \"sap/ui/layout/form/SimpleForm\";\nimport MDCField, { type Field$ChangeEvent } from \"sap/ui/mdc/Field\";\nimport ValueHelp from \"sap/ui/mdc/ValueHelp\";\nimport { type FieldBase$LiveChangeEvent } from \"sap/ui/mdc/field/FieldBase\";\nimport VHDialog from \"sap/ui/mdc/valuehelp/Dialog\";\nimport Popover from \"sap/ui/mdc/valuehelp/Popover\";\nimport MTable from \"sap/ui/mdc/valuehelp/content/MTable\";\nimport AnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\n\n@defineUI5Class(\"sap.fe.core.services.RoutingServiceEventing\")\nclass ContextUpdateDialogEventProvider extends EventProvider {\n\t@event()\n\texitDialog!: Function;\n}\n\nexport default class CreateDialog implements StandardDialog {\n\tprivate dialog?: Dialog;\n\n\tprivate metaModel: ODataMetaModel;\n\n\tprivate requiredFieldNames: string[];\n\n\tprivate actionParameterInfos: ActionParameterInfo[] = [];\n\n\tprivate eventProvider = new ContextUpdateDialogEventProvider();\n\n\tconstructor(\n\t\tprivate contextToUpdate: ODataV4Context,\n\t\tprivate fieldNames: string[],\n\t\tprivate appComponent: AppComponent,\n\t\tprivate mode: \"Standalone\" | \"WithNavigation\",\n\t\tprivate parentControl?: Control\n\t) {\n\t\tconst model: ODataModel = contextToUpdate.getModel();\n\t\tthis.metaModel = model.getMetaModel();\n\n\t\tconst metaPath = this.metaModel.getMetaPath(contextToUpdate.getPath());\n\t\tthis.requiredFieldNames = getRequiredPropertiesFromInsertRestrictions(metaPath, this.metaModel);\n\t}\n\n\t/**\n\t * Attaches an event handler called when the user closes the dialog (either with OK or Cancel).\n\t *\n\t * The event has an 'accept' parameter that is true (resp. false) if the user clicked on OK (resp. Cancel).\n\t * @param oData Payload object that will be passed to the event handler along with the event object when firing the event\n\t * @param fnFunction The function to be called when the event occurs\n\t * @param oListener Context object to call the event handler with\n\t */\n\tattachExitDialog(oData: object, fnFunction: Function, oListener?: object): void {\n\t\tthis.eventProvider.attachEvent(\"exitDialog\", oData, fnFunction, oListener);\n\t}\n\n\tprivate fireExitDialog(accept: boolean): void {\n\t\tthis.eventProvider.fireEvent(\"exitDialog\", { accept });\n\t}\n\n\t/**\n\t * Returns the editMode for a property.\n\t * @param property\n\t * @returns Display or Editable\n\t */\n\tprivate getEditMode(property: Property): string {\n\t\tif (property.annotations.Common?.FieldControl) {\n\t\t\tconst fieldControl = property.annotations.Common.FieldControl as unknown as { $EnumMember?: string };\n\t\t\treturn fieldControl.$EnumMember === \"com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly\" ? \"Display\" : \"Editable\";\n\t\t} else {\n\t\t\treturn \"Editable\";\n\t\t}\n\t}\n\n\t/**\n\t * Returns the popover for the VH typeahead.\n\t * @param fieldName\n\t * @param property\n\t * @param propertyObjectPath\n\t * @returns The popover\n\t */\n\tprivate getFieldVHTypeAhead(fieldName: string, property: Property, propertyObjectPath: DataModelObjectPath<Property>): Popover {\n\t\treturn (\n\t\t\t<Popover>\n\t\t\t\t<MTable\n\t\t\t\t\tid={generate([fieldName, \"VH\", \"Popover\", \"qualifier\"])}\n\t\t\t\t\tcaseSensitive={useCaseSensitiveFilterRequests(\n\t\t\t\t\t\tpropertyObjectPath,\n\t\t\t\t\t\t(propertyObjectPath.convertedTypes.entityContainer.annotations.Capabilities\n\t\t\t\t\t\t\t?.FilterFunctions as unknown as string[]) ?? []\n\t\t\t\t\t)}\n\t\t\t\t\tuseAsValueHelp={!!property.annotations.Common?.ValueListWithFixedValues}\n\t\t\t\t/>\n\t\t\t</Popover>\n\t\t);\n\t}\n\n\t/**\n\t * Returns the VH dialog for a given property.\n\t * @param property\n\t * @returns A dialog if the property has a VH, undefined otherwise\n\t */\n\tprivate getFieldVHDialog(property: Property): VHDialog | undefined {\n\t\tif (property.annotations.Common?.ValueListWithFixedValues?.valueOf() !== true) {\n\t\t\treturn <VHDialog />;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the VH for a given field.\n\t * @param fieldName\n\t * @param property\n\t * @param propertyObjectPath\n\t * @returns The ValueHelp control if the property has a VH, undefined otherwise\n\t */\n\tprivate getFieldValueHelp(\n\t\tfieldName: string,\n\t\tproperty: Property,\n\t\tpropertyObjectPath: DataModelObjectPath<Property>\n\t): ValueHelp | undefined {\n\t\tif (!hasValueHelp(property)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst vhDelegate = {\n\t\t\tname: \"sap/fe/macros/valuehelp/ValueHelpDelegate\",\n\t\t\tpayload: {\n\t\t\t\tpropertyPath: getTargetObjectPath(propertyObjectPath),\n\t\t\t\tqualifiers: {},\n\t\t\t\tvalueHelpQualifier: \"\"\n\t\t\t}\n\t\t};\n\n\t\treturn (\n\t\t\t<ValueHelp\n\t\t\t\tid={generate([fieldName, \"VH\"])}\n\t\t\t\tdelegate={vhDelegate}\n\t\t\t\tvalidateInput={requiresValidation(property)}\n\t\t\t\ttypeahead={this.getFieldVHTypeAhead(fieldName, property, propertyObjectPath)}\n\t\t\t\tdialog={this.getFieldVHDialog(property)}\n\t\t\t></ValueHelp>\n\t\t);\n\t}\n\n\t/**\n\t * Returns the Form element (label + field) for a given property name.\n\t * @param fieldName\n\t * @param listObjectPath\n\t * @param listMetaPath\n\t * @returns The element\n\t */\n\tprivate createFormElement(fieldName: string, listObjectPath: DataModelObjectPath<EntitySet>, listMetaPath: string): unknown {\n\t\tconst propertyObjectPath = enhanceDataModelPath<Property>(listObjectPath, fieldName);\n\t\tconst property = propertyObjectPath.targetObject as Property;\n\t\tconst propertyMetaContext = this.metaModel.createBindingContext(`${listMetaPath}/${fieldName}`)!;\n\t\tconst propertyPlaceHolderMetaContext = this.metaModel.createBindingContext(\n\t\t\t`${listMetaPath}/${fieldName}@com.sap.vocabularies.UI.v1.Placeholder`\n\t\t)!;\n\n\t\tconst field = (\n\t\t\t<MDCField\n\t\t\t\tdelegate={{ name: \"sap/fe/macros/field/FieldBaseDelegate\", payload: { retrieveTextFromValueList: true } }}\n\t\t\t\tid={generate([\"CreateDialog\", listObjectPath.targetEntityType.name, fieldName])}\n\t\t\t\tvalue={AnnotationHelper.format(propertyMetaContext.getObject(), { context: propertyMetaContext })}\n\t\t\t\tplaceholder={AnnotationHelper.value(propertyPlaceHolderMetaContext.getObject(), {\n\t\t\t\t\tcontext: propertyPlaceHolderMetaContext\n\t\t\t\t})}\n\t\t\t\twidth=\"100%\"\n\t\t\t\trequired={compileExpression(or(isRequiredExpression(property), this.requiredFieldNames.includes(fieldName)))}\n\t\t\t\tdisplay={FieldHelper.getAPDialogDisplayFormat(propertyMetaContext.getObject(), { context: propertyMetaContext })}\n\t\t\t\tvalueHelp={hasValueHelp(property) ? generate([fieldName, \"VH\"]) : undefined}\n\t\t\t\teditMode={this.getEditMode(property)}\n\t\t\t\tdependents={this.getFieldValueHelp(fieldName, property, propertyObjectPath)}\n\t\t\t\tcustomData={<CustomData key=\"fieldName\" value={fieldName} />}\n\t\t\t\tliveChange={this.handleLiveChange.bind(this)}\n\t\t\t\tchange={this.handleChange.bind(this)}\n\t\t\t/>\n\t\t);\n\n\t\tthis.actionParameterInfos.push({\n\t\t\tisMultiValue: false,\n\t\t\tfield: field,\n\t\t\tvalue: field.getValue(),\n\t\t\tvalidationPromise: undefined,\n\t\t\thasError: false,\n\t\t\tpropertyPath: fieldName\n\t\t});\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Label text={property.annotations.Common?.Label} />\n\t\t\t\t{field}\n\t\t\t</>\n\t\t);\n\t}\n\n\t/**\n\t * Callback when the dialog is opened. Sets the focus on the first field without opening the VH dialog.\n\t */\n\tprivate afterOpen(): void {\n\t\tconst firstField = this.actionParameterInfos[0].field;\n\t\tconst focusInfo = firstField.getFocusInfo() as { targetInfo: object };\n\t\tfocusInfo.targetInfo = { silent: true };\n\t\tfirstField.focus(focusInfo);\n\t}\n\n\t/**\n\t * Internal method to create the Dialog control and its content.\n\t * @returns The dialog control\n\t */\n\tprivate createDialog(): Dialog {\n\t\tconst resourceModel = getResourceModel(this.parentControl ?? this.appComponent);\n\t\tconst metaPath = this.metaModel.getMetaPath(this.contextToUpdate.getPath());\n\t\tconst metaContext = this.metaModel.createBindingContext(metaPath)!;\n\t\tconst objectPath = getInvolvedDataModelObjects<EntitySet>(metaContext);\n\n\t\tthis.actionParameterInfos = [];\n\n\t\tconst beginButtonLabel = resourceModel.getText(\n\t\t\tthis.mode === \"Standalone\"\n\t\t\t\t? \"C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON_CREATE\"\n\t\t\t\t: \"C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON_CONTINUE\"\n\t\t);\n\t\tconst endButton = (\n\t\t\t<Button text={resourceModel.getText(\"C_COMMON_ACTION_PARAMETER_DIALOG_CANCEL\")} press={this.onCancel.bind(this)} />\n\t\t);\n\t\treturn (\n\t\t\t<Dialog\n\t\t\t\tid={generate([\"CreateDialog\", metaPath])}\n\t\t\t\ttitle={resourceModel.getText(\"C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE\", undefined, objectPath.targetEntitySet?.name)}\n\t\t\t\tafterOpen={(): void => {\n\t\t\t\t\tthis.afterOpen();\n\t\t\t\t}}\n\t\t\t\tresizable={true}\n\t\t\t\tdraggable={true}\n\t\t\t\tinitialFocus={endButton} // The initial focus is set programmatically in afterOpen, to avoid opening the VH dialog\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tbeginButton: <Button text={beginButtonLabel} press={this.onOK.bind(this)} type=\"Emphasized\" />,\n\t\t\t\t\tendButton: endButton,\n\t\t\t\t\tcontent: (\n\t\t\t\t\t\t<SimpleForm>\n\t\t\t\t\t\t\t{this.fieldNames.map((name) => {\n\t\t\t\t\t\t\t\treturn this.createFormElement(name, objectPath, metaPath);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</SimpleForm>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t</Dialog>\n\t\t);\n\t}\n\n\t/**\n\t * Sets the error state in the dialog fields that correspond to an error in the given messages.\n\t * @param messages\n\t */\n\tpublic displayErrorMessages(messages: Message[]): void {\n\t\t// Iterate over all messages and set the error state for the corresponding field\n\t\t// We cannot compare the paths directly, as the context in the dialog is a temporary one, and different from the one that is saved\n\t\t// Therefore we compare the metapaths\n\t\tconst contextMetaPath = this.metaModel.getMetaPath(this.contextToUpdate.getPath());\n\n\t\tfor (const message of messages) {\n\t\t\tfor (const target of message.getTargets()) {\n\t\t\t\tconst targetMetaPath = this.metaModel.getMetaPath(target);\n\t\t\t\tconst parameterInfo = this.actionParameterInfos.find(\n\t\t\t\t\t(actionParameterInfo) => `${contextMetaPath}/${actionParameterInfo.propertyPath}` === targetMetaPath\n\t\t\t\t);\n\t\t\t\tif (parameterInfo) {\n\t\t\t\t\tparameterInfo.hasError = true;\n\t\t\t\t\tparameterInfo.field.setValueState(message.getType() || MessageType.Error);\n\t\t\t\t\tparameterInfo.field.setValueStateText(message.getMessage());\n\n\t\t\t\t\tconst messageControlIDs = message.getControlIds();\n\t\t\t\t\tif (!messageControlIDs.includes(parameterInfo.field.getId())) {\n\t\t\t\t\t\tmessageControlIDs.push(parameterInfo.field.getId());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Removes the error messages for a given field.\n\t * @param messageControlId The ID of the field\n\t */\n\tprivate removeMessagesForActionParameter(messageControlId: string): void {\n\t\tconst allMessages = Messaging.getMessageModel().getData();\n\t\t// also remove messages assigned to inner controls, but avoid removing messages for different parameters (with name being substring of another parameter name)\n\t\tconst relevantMessages = allMessages.filter((msg: Message) =>\n\t\t\tmsg.getControlIds().some((controlId: string) => controlId.includes(messageControlId))\n\t\t);\n\t\tMessaging.removeMessages(relevantMessages);\n\t}\n\n\t/**\n\t * Callback when the user is doing some live changes in a field.\n\t * @param liveChangeEvent\n\t */\n\tprivate handleLiveChange(liveChangeEvent: FieldBase$LiveChangeEvent): void {\n\t\tconst fieldId = liveChangeEvent.getSource<MDCField>().getId();\n\t\tthis.removeMessagesForActionParameter(fieldId);\n\t}\n\n\t/**\n\t * Callback when the user has changed a field value.\n\t * @param changeEvent\n\t */\n\tprivate async handleChange(changeEvent: Field$ChangeEvent): Promise<void> {\n\t\tconst field = changeEvent.getSource<MDCField>();\n\n\t\tconst actionParameterInfo = this.actionParameterInfos.find((actionParameterInfo) => actionParameterInfo.field === field);\n\t\tif (actionParameterInfo !== undefined) {\n\t\t\tthis.removeMessagesForActionParameter(field.getId());\n\t\t\tactionParameterInfo.validationPromise = changeEvent.getParameter(\"promise\");\n\t\t\ttry {\n\t\t\t\tactionParameterInfo.value = await actionParameterInfo.validationPromise;\n\t\t\t\tactionParameterInfo.hasError = false;\n\t\t\t\tactionParameterInfo.field.setValueState(MessageType.None);\n\t\t\t} catch (error) {\n\t\t\t\tdelete actionParameterInfo.value;\n\t\t\t\tactionParameterInfo.hasError = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Callback when the user clicked 'OK'.\n\t */\n\tprivate async onOK(): Promise<void> {\n\t\t// Validation of mandatory and value state for action parameters\n\t\tconst resourceModel = getResourceModel(this.appComponent);\n\t\tif (await ActionRuntime.validateProperties(this.actionParameterInfos, resourceModel)) {\n\t\t\tthis.fireExitDialog(true);\n\t\t}\n\t}\n\n\t/**\n\t * Callback when the use clicked 'Cancel'.\n\t */\n\tprivate onCancel(): void {\n\t\tthis.fireExitDialog(false);\n\t}\n\n\t/**\n\t * Escape handler (called when the user typed 'Escape' to leave the dialog).\n\t * @param p\n\t * @param p.resolve\n\t * @param p.reject\n\t */\n\tprivate onEscape(p: { resolve: Function; reject: Function }): void {\n\t\tp.reject(); // Do not close the dialog\n\t\tthis.onCancel();\n\t}\n\n\t/**\n\t * Opens the dialog.\n\t * @returns The internal Dialog control\n\t */\n\topenDialog(): Dialog {\n\t\tif (this.dialog) {\n\t\t\tthrow new Error(\"Cannot open the Create dialog twice\");\n\t\t}\n\n\t\tthis.dialog = this.createDialog();\n\t\tthis.dialog.setEscapeHandler(this.onEscape.bind(this));\n\t\tthis.parentControl?.addDependent(this.dialog);\n\t\tthis.dialog.setBindingContext(this.contextToUpdate);\n\n\t\tthis.dialog.open();\n\n\t\treturn this.dialog;\n\t}\n\n\t/**\n\t * Closes and destroys the dialog.\n\t */\n\tcloseDialog(): void {\n\t\t/* When the dialog is cancelled, messages need to be removed in case the same action should be executed again */\n\t\tfor (const actionParameterInfo of this.actionParameterInfos) {\n\t\t\tconst fieldId = actionParameterInfo.field.getId();\n\t\t\tthis.removeMessagesForActionParameter(fieldId);\n\t\t}\n\n\t\tif (this.dialog && BusyLocker.isLocked(this.dialog)) {\n\t\t\tBusyLocker.unlock(this.dialog); // To avoid an error in the console\n\t\t}\n\t\tthis.dialog?.close();\n\t\tthis.dialog?.destroy();\n\t\tthis.dialog = undefined;\n\t}\n\n\t/**\n\t * Displays or removes a busy indicator on the dialog.\n\t * @param busy\n\t */\n\tsetBusy(busy: boolean): void {\n\t\tif (!this.dialog) {\n\t\t\treturn; // Nothing to set busy\n\t\t}\n\n\t\tif (busy) {\n\t\t\tBusyLocker.lock(this.dialog);\n\t\t} else {\n\t\t\tBusyLocker.unlock(this.dialog);\n\t\t}\n\t}\n\n\t/**\n\t * Is Dialog open.\n\t * @returns Boolean\n\t */\n\tisOpen(): boolean {\n\t\treturn this.dialog?.isOpen() ?? false;\n\t}\n}\n"],"mappings":";;;;44EAwCMA,IAAgCC,EADrCC,EAAe,+CAA8CC,EAE5DC,IAAOH,EAAAI,GAAAC,EAAA,SAAAC,GAAA,SAAAP,IAAA,IAAAQ,EAAA,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAAAF,EAAAE,GAAAJ,UAAAI,EAAA,CAAAN,EAAAD,EAAAQ,KAAAC,QAAAJ,IAAAI,KAAAC,EAAAT,EAAA,aAAAU,EAAAV,GAAA,OAAAA,CAAA,CAAAW,EAAAnB,EAAAO,GAAA,OAAAP,CAAA,EADsCoB,GAAaF,EAAAG,EAAAf,EAAAgB,UAAA,cAAAnB,GAAA,CAAAoB,aAAA,KAAAC,WAAA,KAAAC,SAAA,KAAAC,YAAA,OAAApB,KAAAD,GAAA,IAKvCsB,GAAY,WAWhC,SAAAA,EACSC,EACAC,EACAC,EACAC,EACAC,GACPhB,KAVMiB,qBAA8C,GAAEjB,KAEhDkB,cAAgB,IAAIlC,GAAkCgB,KAGrDY,kBAA+BZ,KAC/Ba,aAAoBb,KACpBc,eAA0Bd,KAC1Be,OAAqCf,KACrCgB,gBAER,MAAMG,EAAoBP,EAAgBQ,WAC1CpB,KAAKqB,UAAYF,EAAMG,eAEvB,MAAMC,EAAWvB,KAAKqB,UAAUG,YAAYZ,EAAgBa,WAC5DzB,KAAK0B,mBAAqBC,EAA4CJ,EAAUvB,KAAKqB,UACtF,CAEAO,EAAAjB,EAAA,IAAAkB,EAAAlB,EAAAL,UAAAuB,EAQAC,iBAAA,SAAAA,EAAiBC,EAAeC,EAAsBC,GACrDjC,KAAKkB,cAAcgB,YAAY,aAAcH,EAAOC,EAAYC,EACjE,EAACJ,EAEOM,eAAR,SAAQA,EAAeC,GACtBpC,KAAKkB,cAAcmB,UAAU,aAAc,CAAED,UAC9C,EAEAP,EAKQS,YAAR,SAAQA,EAAYC,GACnB,GAAIA,EAASC,YAAYC,QAAQC,aAAc,CAC9C,MAAMC,EAAeJ,EAASC,YAAYC,OAAOC,aACjD,OAAOC,EAAaC,cAAgB,2DAA6D,UAAY,UAC9G,KAAO,CACN,MAAO,UACR,CACD,EAEAf,EAOQgB,oBAAR,SAAQA,EAAoBC,EAAmBP,EAAoBQ,GAClE,OACCC,EAACC,EAAO,CAAAC,SACPF,EAACG,EAAM,CACNC,GAAIC,EAAS,CAACP,EAAW,KAAM,UAAW,cAC1CQ,cAAeC,EACdR,EACCA,EAAmBS,eAAeC,gBAAgBjB,YAAYkB,cAC5DC,iBAA2C,IAE/CC,iBAAkBrB,EAASC,YAAYC,QAAQoB,4BAInD,EAEAhC,EAKQiC,iBAAR,SAAQA,EAAiBvB,GACxB,GAAIA,EAASC,YAAYC,QAAQoB,0BAA0BE,YAAc,KAAM,CAC9E,OAAOf,EAACgB,EAAQ,GACjB,KAAO,CACN,OAAOC,SACR,CACD,EAEApC,EAOQqC,kBAAR,SAAQA,EACPpB,EACAP,EACAQ,GAEA,IAAKoB,EAAa5B,GAAW,CAC5B,OAAO0B,SACR,CAEA,MAAMG,EAAa,CAClBC,KAAM,4CACNC,QAAS,CACRC,aAAcC,EAAoBzB,GAClC0B,WAAY,CAAC,EACbC,mBAAoB,KAItB,OACC1B,EAAC2B,EAAS,CACTvB,GAAIC,EAAS,CAACP,EAAW,OACzB8B,SAAUR,EACVS,cAAeC,EAAmBvC,GAClCwC,UAAW/E,KAAK6C,oBAAoBC,EAAWP,EAAUQ,GACzDiC,OAAQhF,KAAK8D,iBAAiBvB,IAGjC,EAEAV,EAOQoD,kBAAR,SAAQA,EAAkBnC,EAAmBoC,EAAgDC,GAC5F,MAAMpC,EAAqBqC,EAA+BF,EAAgBpC,GAC1E,MAAMP,EAAWQ,EAAmBsC,aACpC,MAAMC,EAAsBtF,KAAKqB,UAAUkE,qBAAqB,GAAGJ,KAAgBrC,KACnF,MAAM0C,EAAiCxF,KAAKqB,UAAUkE,qBACrD,GAAGJ,KAAgBrC,4CAGpB,MAAM2C,EACLzC,EAAC0C,EAAQ,CACRd,SAAU,CAAEP,KAAM,wCAAyCC,QAAS,CAAEqB,0BAA2B,OACjGvC,GAAIC,EAAS,CAAC,eAAgB6B,EAAeU,iBAAiBvB,KAAMvB,IACpE+C,MAAOC,EAAiBC,OAAOT,EAAoBU,YAAa,CAAEC,QAASX,IAC3EY,YAAaJ,EAAiBD,MAAML,EAA+BQ,YAAa,CAC/EC,QAAST,IAEVW,MAAM,OACNC,SAAUC,EAAkBC,EAAGC,EAAqBhE,GAAWvC,KAAK0B,mBAAmB8E,SAAS1D,KAChG2D,QAASC,EAAYC,yBAAyBrB,EAAoBU,YAAa,CAAEC,QAASX,IAC1FsB,UAAWzC,EAAa5B,GAAYc,EAAS,CAACP,EAAW,OAASmB,UAClE4C,SAAU7G,KAAKsC,YAAYC,GAC3BuE,WAAY9G,KAAKkE,kBAAkBpB,EAAWP,EAAUQ,GACxDgE,WAAY/D,EAACgE,EAAU,CAAiBnB,MAAO/C,GAAnB,aAC5BmE,WAAYjH,KAAKkH,iBAAiBC,KAAKnH,MACvCoH,OAAQpH,KAAKqH,aAAaF,KAAKnH,QAIjCA,KAAKiB,qBAAqBqG,KAAK,CAC9BC,aAAc,MACd9B,MAAOA,EACPI,MAAOJ,EAAM+B,WACbC,kBAAmBxD,UACnByD,SAAU,MACVnD,aAAczB,IAGf,OACC6E,EAAAC,EAAA,CAAA1E,SAAA,CACCF,EAAC6E,EAAK,CAACC,KAAMvF,EAASC,YAAYC,QAAQoF,QACzCpC,IAGJ,EAEA5D,EAGQkG,UAAR,SAAQA,IACP,MAAMC,EAAahI,KAAKiB,qBAAqB,GAAGwE,MAChD,MAAMwC,EAAYD,EAAWE,eAC7BD,EAAUE,WAAa,CAAEC,OAAQ,MACjCJ,EAAWK,MAAMJ,EAClB,EAEApG,EAIQyG,aAAR,SAAQA,IACP,MAAMC,EAAgBC,EAAiBxI,KAAKgB,eAAiBhB,KAAKc,cAClE,MAAMS,EAAWvB,KAAKqB,UAAUG,YAAYxB,KAAKY,gBAAgBa,WACjE,MAAMgH,EAAczI,KAAKqB,UAAUkE,qBAAqBhE,GACxD,MAAMmH,EAAaC,EAAuCF,GAE1DzI,KAAKiB,qBAAuB,GAE5B,MAAM2H,EAAmBL,EAAcM,QACtC7I,KAAKe,OAAS,aACX,yDACA,4DAEJ,MAAM+H,EACL9F,EAAC+F,EAAM,CAACjB,KAAMS,EAAcM,QAAQ,2CAA4CG,MAAOhJ,KAAKiJ,SAAS9B,KAAKnH,QAE3G,OACCgD,EAACkG,EAAM,CACN9F,GAAIC,EAAS,CAAC,eAAgB9B,IAC9B4H,MAAOZ,EAAcM,QAAQ,2CAA4C5E,UAAWyE,EAAWU,iBAAiB/E,MAChH0D,UAAWA,KACV/H,KAAK+H,aAENsB,UAAW,KACXC,UAAW,KACXC,aAAcT,EAAW5F,SAExB,CACAsG,YAAaxG,EAAC+F,EAAM,CAACjB,KAAMc,EAAkBI,MAAOhJ,KAAKyJ,KAAKtC,KAAKnH,MAAO0J,KAAK,eAC/EZ,UAAWA,EACXa,QACC3G,EAAC4G,EAAU,CAAA1G,SACTlD,KAAKa,WAAWgJ,IAAKxF,GACdrE,KAAKiF,kBAAkBZ,EAAMqE,EAAYnH,QAOvD,EAEAM,EAIOiI,qBAAP,SAAOA,EAAqBC,GAI3B,MAAMC,EAAkBhK,KAAKqB,UAAUG,YAAYxB,KAAKY,gBAAgBa,WAExE,IAAK,MAAMwI,KAAWF,EAAU,CAC/B,IAAK,MAAMG,KAAUD,EAAQE,aAAc,CAC1C,MAAMC,EAAiBpK,KAAKqB,UAAUG,YAAY0I,GAClD,MAAMG,EAAgBrK,KAAKiB,qBAAqBqJ,KAC9CC,GAAwB,GAAGP,KAAmBO,EAAoBhG,iBAAmB6F,GAEvF,GAAIC,EAAe,CAClBA,EAAc3C,SAAW,KACzB2C,EAAc5E,MAAM+E,cAAcP,EAAQQ,WAAaC,EAAYC,OACnEN,EAAc5E,MAAMmF,kBAAkBX,EAAQY,cAE9C,MAAMC,EAAoBb,EAAQc,gBAClC,IAAKD,EAAkBtE,SAAS6D,EAAc5E,MAAMuF,SAAU,CAC7DF,EAAkBxD,KAAK+C,EAAc5E,MAAMuF,QAC5C,CACD,CACD,CACD,CACD,EAEAnJ,EAIQoJ,iCAAR,SAAQA,EAAiCC,GACxC,MAAMC,EAAcC,EAAUC,kBAAkBC,UAEhD,MAAMC,EAAmBJ,EAAYK,OAAQC,GAC5CA,EAAIV,gBAAgBW,KAAMC,GAAsBA,EAAUnF,SAAS0E,KAEpEE,EAAUQ,eAAeL,EAC1B,EAEA1J,EAIQqF,iBAAR,SAAQA,EAAiB2E,GACxB,MAAMC,EAAUD,EAAgBE,YAAsBf,QACtDhL,KAAKiL,iCAAiCa,EACvC,EAEAjK,EAIcwF,aAAd2E,eAAc3E,EAAa4E,GAC1B,MAAMxG,EAAQwG,EAAYF,YAE1B,MAAMxB,EAAsBvK,KAAKiB,qBAAqBqJ,KAAMC,GAAwBA,EAAoB9E,QAAUA,GAClH,GAAI8E,IAAwBtG,UAAW,CACtCjE,KAAKiL,iCAAiCxF,EAAMuF,SAC5CT,EAAoB9C,kBAAoBwE,EAAYC,aAAa,WACjE,IACC3B,EAAoB1E,YAAc0E,EAAoB9C,kBACtD8C,EAAoB7C,SAAW,MAC/B6C,EAAoB9E,MAAM+E,cAAcE,EAAYyB,KACrD,CAAE,MAAOC,UACD7B,EAAoB1E,MAC3B0E,EAAoB7C,SAAW,IAChC,CACD,CACD,EAEA7F,EAGc4H,KAAduC,eAAcvC,IAEb,MAAMlB,EAAgBC,EAAiBxI,KAAKc,cAC5C,SAAUuL,EAAcC,mBAAmBtM,KAAKiB,qBAAsBsH,GAAgB,CACrFvI,KAAKmC,eAAe,KACrB,CACD,EAEAN,EAGQoH,SAAR,SAAQA,IACPjJ,KAAKmC,eAAe,MACrB,EAEAN,EAMQ0K,SAAR,SAAQA,EAASC,GAChBA,EAAEC,SACFzM,KAAKiJ,UACN,EAEApH,EAIA6K,WAAA,SAAAA,IACC,GAAI1M,KAAKgF,OAAQ,CAChB,MAAM,IAAI2F,MAAM,sCACjB,CAEA3K,KAAKgF,OAAShF,KAAKsI,eACnBtI,KAAKgF,OAAO2H,iBAAiB3M,KAAKuM,SAASpF,KAAKnH,OAChDA,KAAKgB,eAAe4L,aAAa5M,KAAKgF,QACtChF,KAAKgF,OAAO6H,kBAAkB7M,KAAKY,iBAEnCZ,KAAKgF,OAAO8H,OAEZ,OAAO9M,KAAKgF,MACb,EAEAnD,EAGAkL,YAAA,SAAAA,IAEC,IAAK,MAAMxC,KAAuBvK,KAAKiB,qBAAsB,CAC5D,MAAM6K,EAAUvB,EAAoB9E,MAAMuF,QAC1ChL,KAAKiL,iCAAiCa,EACvC,CAEA,GAAI9L,KAAKgF,QAAUgI,EAAWC,SAASjN,KAAKgF,QAAS,CACpDgI,EAAWE,OAAOlN,KAAKgF,OACxB,CACAhF,KAAKgF,QAAQmI,QACbnN,KAAKgF,QAAQoI,UACbpN,KAAKgF,OAASf,SACf,EAEApC,EAIAwL,QAAA,SAAAA,EAAQC,GACP,IAAKtN,KAAKgF,OAAQ,CACjB,MACD,CAEA,GAAIsI,EAAM,CACTN,EAAWO,KAAKvN,KAAKgF,OACtB,KAAO,CACNgI,EAAWE,OAAOlN,KAAKgF,OACxB,CACD,EAEAnD,EAIA2L,OAAA,SAAAA,IACC,OAAOxN,KAAKgF,QAAQwI,UAAY,KACjC,EAAC,OAAA7M,CAAA,CA7Y+B,GA6Y/BiB,EAAAjB,GAAA,OAAAiB,CAAA","ignoreList":[]}