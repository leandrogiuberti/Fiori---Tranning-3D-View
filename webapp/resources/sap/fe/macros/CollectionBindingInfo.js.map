{"version":3,"file":"CollectionBindingInfo.js","names":["CollectionBindingInfoAPI","bindingInfo","this","attachedEvents","collectionBindingInfo","_exports","_proto","prototype","cloneFiltersContent","cloning","filterInfo","path","getPath","operator","getOperator","value1","getValue1","value2","getValue2","variable","getVariable","condition","getCondition","and","isAnd","caseSensitive","isCaseSensitive","testFn","getTest","undefined","test","comparatorFn","getComparator","comparator","filters","getFilters","arrayFilter","map","singleFilter","Filter","addFilter","customFilter","push","getSorters","sorter","addSelect","parameters","parameterString","toString","$select","getBindingInfo","clonedBindingInfo","events","deepClone","addSorter","attachEvent","eventId","callback","listener","data","handler","getAttachedEvents"],"sources":["./CollectionBindingInfo.ts"],"sourcesContent":["import deepClone from \"sap/base/util/deepClone\";\nimport Filter from \"sap/ui/model/Filter\";\nimport type FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type Sorter from \"sap/ui/model/Sorter\";\n\nexport type FilterInfo = {\n\tpath?: string;\n\ttest?: (p1: unknown) => boolean;\n\tcomparator?: (p1: unknown, p2: unknown) => number;\n\toperator?:\n\t\t| FilterOperator\n\t\t| \"All\"\n\t\t| \"Any\"\n\t\t| \"BT\"\n\t\t| \"Contains\"\n\t\t| \"EndsWith\"\n\t\t| \"EQ\"\n\t\t| \"GE\"\n\t\t| \"GT\"\n\t\t| \"LE\"\n\t\t| \"LT\"\n\t\t| \"NB\"\n\t\t| \"NE\"\n\t\t| \"NotContains\"\n\t\t| \"NotEndsWith\"\n\t\t| \"NotStartsWith\"\n\t\t| \"StartsWith\"\n\t\t| undefined;\n\tvalue1?: unknown;\n\tvalue2?: unknown;\n\tvariable?: string;\n\tcondition?: Filter;\n\tfilters?: Filter[];\n\tand?: boolean;\n\tcaseSensitive?: boolean;\n};\n\nexport type CollectionBindingInfo = {\n\tevents?: Record<string, Function>;\n\tsuspended?: boolean;\n\tpath?: string;\n\tfilters?: Filter;\n\tsearch?: string;\n\tparameters?: {\n\t\t$search?: string;\n\t\t$select?: string;\n\t\t$$aggregation?: Aggregation;\n\t\t$$sharedRequest?: boolean;\n\t\t$count?: boolean;\n\t\t$$clearSelectionOnFilter?: boolean;\n\t\t$$getKeepAliveContext?: boolean;\n\t\t$$groupId?: string;\n\t\t$$updateGroupId?: string;\n\t\t$$ownRequest?: boolean;\n\t\t$$patchWithoutSideEffects?: boolean;\n\t};\n\tsorter?: Sorter[];\n};\n\nexport type Aggregation = {\n\tsearch?: string;\n\texpandTo?: number;\n\thierarchyQualifier?: string;\n};\n\nexport type EventHandler = {\n\teventId: string;\n\tcallback: Function;\n\tlistener?: object;\n\tdata?: object;\n};\n\n/**\n * API to add parameters to the collection binding info.\n * @hideconstructor\n * @alias sap.fe.macros.CollectionBindingInfo\n * @public\n */\n\nexport default class CollectionBindingInfoAPI {\n\tprivate collectionBindingInfo: CollectionBindingInfo;\n\n\tprivate attachedEvents: EventHandler[] = [];\n\n\tconstructor(bindingInfo: CollectionBindingInfo) {\n\t\tthis.collectionBindingInfo = bindingInfo;\n\t}\n\n\t/**\n\t * Recursive cloning of the Filter.\n\t * Filters have a parameter aFilters which contains more filters, so we use this method to recursively clone it.\n\t * cloneFilters should be called first, to have the Filter outside an array and avoid an empty filter.\n\t * @param cloning The filter to be cloned\n\t * @returns The cloned Filter\n\t */\n\tcloneFiltersContent(cloning: Filter): Filter {\n\t\tconst filterInfo: FilterInfo = {\n\t\t\tpath: cloning.getPath(),\n\t\t\toperator: cloning.getOperator(),\n\t\t\tvalue1: cloning.getValue1(),\n\t\t\tvalue2: cloning.getValue2(),\n\t\t\tvariable: cloning.getVariable(),\n\t\t\tcondition: cloning.getCondition(),\n\t\t\tand: cloning.isAnd(),\n\t\t\tcaseSensitive: cloning.isCaseSensitive()\n\t\t};\n\n\t\tconst testFn = cloning.getTest();\n\t\tif (testFn !== undefined) {\n\t\t\tfilterInfo.test = testFn;\n\t\t}\n\n\t\tconst comparatorFn = cloning.getComparator();\n\t\tif (comparatorFn !== undefined) {\n\t\t\tfilterInfo.comparator = comparatorFn;\n\t\t}\n\n\t\tconst filters = cloning.getFilters();\n\t\tconst arrayFilter = filters?.map((singleFilter: Filter) => {\n\t\t\treturn this.cloneFiltersContent(singleFilter);\n\t\t});\n\t\tif (arrayFilter) {\n\t\t\tfilterInfo.filters = arrayFilter;\n\t\t}\n\t\treturn new Filter(filterInfo);\n\t}\n\n\t/**\n\t * Returns the current filters applied to the Table.\n\t * @public\n\t * @returns The {@link sap.ui.model.Filter \"filters\"} on the table\n\t */\n\tgetFilters(): Filter | undefined {\n\t\tif (this.collectionBindingInfo.filters) {\n\t\t\treturn this.cloneFiltersContent(this.collectionBindingInfo.filters);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Adds a filter to the filters already present in the binding info.\n\t * @param customFilter The {@link sap.ui.model.Filter \"filter\"} to add\n\t * @public\n\t */\n\taddFilter(customFilter: Filter): void {\n\t\tconst filters = this.collectionBindingInfo.filters ? [this.collectionBindingInfo.filters] : [];\n\t\tfilters.push(customFilter);\n\t\tthis.collectionBindingInfo.filters = new Filter(filters, true);\n\t}\n\n\t/**\n\t * Returns the current sorters of the Table.\n\t * @returns The {@link sap.ui.model.Sorter \"sorters\"} on the table\n\t * @public\n\t */\n\tgetSorters(): Sorter[] | undefined {\n\t\treturn this.collectionBindingInfo.sorter;\n\t}\n\n\t/**\n\t * Adds parameters to the select query.\n\t * @param parameters The list or properties to add to the query\n\t * @public\n\t */\n\taddSelect(parameters: string[]): void {\n\t\tconst parameterString: string = parameters.toString();\n\t\tif (this.collectionBindingInfo.parameters?.$select) {\n\t\t\tthis.collectionBindingInfo.parameters.$select = this.collectionBindingInfo.parameters.$select + \",\" + parameterString;\n\t\t} else {\n\t\t\tthis.collectionBindingInfo.parameters ??= {};\n\t\t\tthis.collectionBindingInfo.parameters.$select = parameterString;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the 'serialized' binding info, useful if you want to create your own binding\n\t * @returns {CollectionBindingInfo} The {@link sap.fe.macros.CollectionBindingInfo \"CollectionBindingInfo\"}\n\t * @public\n\t */\n\n\tgetBindingInfo(): CollectionBindingInfo {\n\t\tconst clonedBindingInfo = { ...this.collectionBindingInfo };\n\n\t\t// Making deepClones of objects (except Sorters because we can't)\n\t\tif (this.collectionBindingInfo.events) {\n\t\t\tclonedBindingInfo.events = deepClone(this.collectionBindingInfo.events);\n\t\t}\n\t\tif (this.collectionBindingInfo.filters) {\n\t\t\tclonedBindingInfo.filters = this.cloneFiltersContent(this.collectionBindingInfo.filters);\n\t\t}\n\t\tif (this.collectionBindingInfo.parameters) {\n\t\t\tdeepClone(this.collectionBindingInfo.parameters);\n\t\t}\n\t\treturn clonedBindingInfo;\n\t}\n\n\t/**\n\t * Adds a sorter to the sorter(s) already present, or create one if none exists.\n\t * @param sorter The {@link sap.ui.model.Sorter \"sorter\"} to add to the query\n\t * @public\n\t */\n\taddSorter(sorter: Sorter): void {\n\t\tif (!this.collectionBindingInfo.sorter) {\n\t\t\tthis.collectionBindingInfo.sorter = [sorter];\n\t\t} else {\n\t\t\tthis.collectionBindingInfo.sorter.push(sorter);\n\t\t}\n\t}\n\n\t/**\n\t * Attach the events to the table binding.\n\t * @param eventId The event ID to attach the callback to\n\t * @param callback The callback function to be executed when the event is triggered\n\t * @param listener The listener object that will be used as the context for the callback function\n\t * @param data Data that will be passed to the callback function when the event is triggered\n\t * @public\n\t */\n\tattachEvent(eventId: string, callback: Function, listener?: object, data?: object): void {\n\t\tconst handler: EventHandler = { eventId, callback, listener, data };\n\t\tthis.attachedEvents.push(handler);\n\t}\n\n\t/**\n\t * Gets the attached event handlers.\n\t * @returns An array of attached event handlers.\n\t */\n\tgetAttachedEvents(): EventHandler[] {\n\t\treturn this.attachedEvents;\n\t}\n}\n"],"mappings":";;;;oGAwEA,IAOqBA,EAAwB,WAK5C,SAAAA,EAAYC,GAAoCC,KAFxCC,eAAiC,GAGxCD,KAAKE,sBAAwBH,CAC9B,CAEAI,EAAAL,EAAA,IAAAM,EAAAN,EAAAO,UAAAD,EAOAE,oBAAA,SAAAA,EAAoBC,GACnB,MAAMC,EAAyB,CAC9BC,KAAMF,EAAQG,UACdC,SAAUJ,EAAQK,cAClBC,OAAQN,EAAQO,YAChBC,OAAQR,EAAQS,YAChBC,SAAUV,EAAQW,cAClBC,UAAWZ,EAAQa,eACnBC,IAAKd,EAAQe,QACbC,cAAehB,EAAQiB,mBAGxB,MAAMC,EAASlB,EAAQmB,UACvB,GAAID,IAAWE,UAAW,CACzBnB,EAAWoB,KAAOH,CACnB,CAEA,MAAMI,EAAetB,EAAQuB,gBAC7B,GAAID,IAAiBF,UAAW,CAC/BnB,EAAWuB,WAAaF,CACzB,CAEA,MAAMG,EAAUzB,EAAQ0B,aACxB,MAAMC,EAAcF,GAASG,IAAKC,GAC1BpC,KAAKM,oBAAoB8B,IAEjC,GAAIF,EAAa,CAChB1B,EAAWwB,QAAUE,CACtB,CACA,OAAO,IAAIG,EAAO7B,EACnB,EAEAJ,EAKA6B,WAAA,SAAAA,IACC,GAAIjC,KAAKE,sBAAsB8B,QAAS,CACvC,OAAOhC,KAAKM,oBAAoBN,KAAKE,sBAAsB8B,QAC5D,CACA,OAAOL,SACR,EAEAvB,EAKAkC,UAAA,SAAAA,EAAUC,GACT,MAAMP,EAAUhC,KAAKE,sBAAsB8B,QAAU,CAAChC,KAAKE,sBAAsB8B,SAAW,GAC5FA,EAAQQ,KAAKD,GACbvC,KAAKE,sBAAsB8B,QAAU,IAAIK,EAAOL,EAAS,KAC1D,EAEA5B,EAKAqC,WAAA,SAAAA,IACC,OAAOzC,KAAKE,sBAAsBwC,MACnC,EAEAtC,EAKAuC,UAAA,SAAAA,EAAUC,GACT,MAAMC,EAA0BD,EAAWE,WAC3C,GAAI9C,KAAKE,sBAAsB0C,YAAYG,QAAS,CACnD/C,KAAKE,sBAAsB0C,WAAWG,QAAU/C,KAAKE,sBAAsB0C,WAAWG,QAAU,IAAMF,CACvG,KAAO,CACN7C,KAAKE,sBAAsB0C,aAAe,CAAC,EAC3C5C,KAAKE,sBAAsB0C,WAAWG,QAAUF,CACjD,CACD,EAEAzC,EAMA4C,eAAA,SAAAA,IACC,MAAMC,EAAoB,IAAKjD,KAAKE,uBAGpC,GAAIF,KAAKE,sBAAsBgD,OAAQ,CACtCD,EAAkBC,OAASC,EAAUnD,KAAKE,sBAAsBgD,OACjE,CACA,GAAIlD,KAAKE,sBAAsB8B,QAAS,CACvCiB,EAAkBjB,QAAUhC,KAAKM,oBAAoBN,KAAKE,sBAAsB8B,QACjF,CACA,GAAIhC,KAAKE,sBAAsB0C,WAAY,CAC1CO,EAAUnD,KAAKE,sBAAsB0C,WACtC,CACA,OAAOK,CACR,EAEA7C,EAKAgD,UAAA,SAAAA,EAAUV,GACT,IAAK1C,KAAKE,sBAAsBwC,OAAQ,CACvC1C,KAAKE,sBAAsBwC,OAAS,CAACA,EACtC,KAAO,CACN1C,KAAKE,sBAAsBwC,OAAOF,KAAKE,EACxC,CACD,EAEAtC,EAQAiD,YAAA,SAAAA,EAAYC,EAAiBC,EAAoBC,EAAmBC,GACnE,MAAMC,EAAwB,CAAEJ,UAASC,WAAUC,WAAUC,QAC7DzD,KAAKC,eAAeuC,KAAKkB,EAC1B,EAEAtD,EAIAuD,kBAAA,SAAAA,IACC,OAAO3D,KAAKC,cACb,EAAC,OAAAH,CAAA,CArJ2C,GAqJ3CK,EAAAL,EAAA,OAAAK,CAAA","ignoreList":[]}