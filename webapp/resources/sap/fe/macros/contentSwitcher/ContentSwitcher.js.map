{"version":3,"file":"ContentSwitcher.js","names":["ContentSwitcher","_dec","defineUI5Class","_dec2","implementInterface","_dec3","aggregation","type","multiple","isDefault","_dec4","event","_dec5","defineReference","_dec6","property","bindToState","_class","_class2","_ref","propertiesOrId","properties","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","currentKey","content","createContent","retrieveState","selectedKey","state","onStateChange","_exports","_inheritsLoose","_proto","prototype","$segmentedButton","current","getSelectedKey","applyState","appState","items","key","_getControlFromItem","item","controlToSwitch","control","UI5Element","getElementById","isA","showHideControls","controlsToHide","controlsToDisplay","push","includes","setVisible","changedKeys","getPageController","getExtensionAPI","updateAppState","triggerPXIntegration","fireEvent","segmentedButtonId","createId","_jsx","SegmentedButton","ref","id","bindState","children","map","index","createSegmentedButtonItem","itemIdx","segmentButtonItemId","icon","SegmentedButtonItem","tooltip","text","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./ContentSwitcher.tsx"],"sourcesContent":["import { bindState } from \"sap/fe/base/BindingToolkit\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, defineReference, defineUI5Class, event, implementInterface, property } from \"sap/fe/base/ClassSupport\";\nimport type { Ref } from \"sap/fe/base/jsx-runtime/jsx\";\nimport { triggerPXIntegration } from \"sap/fe/controls/easyFilter/PXFeedback\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport type IViewStateContributor from \"sap/fe/core/controllerextensions/viewState/IViewStateContributor\";\nimport type ContentSwitcherItem from \"sap/fe/macros/contentSwitcher/ContentSwitcherItem\";\nimport SegmentedButton from \"sap/m/SegmentedButton\";\nimport SegmentedButtonItem from \"sap/m/SegmentedButtonItem\";\nimport type Control from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport type { EventHandler } from \"../../../../../../../types/extension_types\";\n\ntype ContentSwitcherState = {\n\tselectedKey?: string;\n};\n/**\n * Defines a new building block which can be used to toggle the visibility of the content referenced by the item.\n * Each item will be displayed in a segmented button with the\n */\n@defineUI5Class(\"sap.fe.macros.contentSwitcher.ContentSwitcher\")\nexport default class ContentSwitcher\n\textends BuildingBlock<\n\t\tSegmentedButton,\n\t\t{\n\t\t\tselectedKey: string;\n\t\t}\n\t>\n\timplements IViewStateContributor<ContentSwitcherState>\n{\n\t@implementInterface(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\")\n\t__implements__sap_fe_core_controllerextensions_viewState_IViewStateContributor = true;\n\n\t@aggregation({ type: \"sap.fe.macros.contentSwitcher.ContentSwitcherItem\", multiple: true, isDefault: true })\n\titems!: ContentSwitcherItem[];\n\n\t@event()\n\tselectionChange?: EventHandler;\n\n\t@defineReference()\n\t$segmentedButton!: Ref<SegmentedButton>;\n\n\t@property({ type: \"string\", bindToState: true })\n\tselectedKey?: string;\n\n\tprivate currentKey: string | undefined = \"\";\n\n\tconstructor(propertiesOrId: string | PropertiesOf<ContentSwitcher>, properties?: PropertiesOf<ContentSwitcher>) {\n\t\tsuper(propertiesOrId, properties);\n\t\tthis.content = this.createContent();\n\t\tthis.currentKey = this.retrieveState().selectedKey;\n\t\tif (this.state.selectedKey) {\n\t\t\t// if there is already a selected key let's make sure to apply it\n\t\t\tthis.onStateChange([\"selectedKey\"]);\n\t\t} else {\n\t\t\t// otherwise let's set an initial state\n\t\t\tthis.state.selectedKey = \"key0\";\n\t\t}\n\t}\n\n\tretrieveState(): ContentSwitcherState {\n\t\treturn {\n\t\t\tselectedKey: this.$segmentedButton.current?.getSelectedKey()\n\t\t};\n\t}\n\n\tapplyState(appState?: ContentSwitcherState): void {\n\t\tif (appState) {\n\t\t\tthis.state.selectedKey = appState.selectedKey ?? this.items[0]?.key ?? \"key0\";\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the control referenced by the ContentSwitcherItem.\n\t * @param item The ContentSwitcherItem\n\t * @returns The control referenced by the ContentSwitcherItem\n\t */\n\t_getControlFromItem(item: ContentSwitcherItem): Control | undefined {\n\t\tconst controlToSwitch = item.controlToSwitch;\n\t\tif (controlToSwitch) {\n\t\t\tconst control = UI5Element.getElementById(controlToSwitch);\n\t\t\tif (control?.isA<Control>(\"sap.ui.core.Control\")) {\n\t\t\t\treturn control;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showHideControls(selectedKey: string): void {\n\t\tconst controlsToHide: Control[] = [];\n\t\tconst controlsToDisplay: Control[] = [];\n\t\tfor (const item of this.items) {\n\t\t\tconst control = this._getControlFromItem(item);\n\t\t\t// item.key -> compact\n\t\t\t// selectedKey -> compact & { czxmcz;lkxzc }\n\t\t\tif (control && item.key !== selectedKey) {\n\t\t\t\tcontrolsToHide.push(control);\n\t\t\t} else if (control) {\n\t\t\t\tcontrolsToDisplay.push(control);\n\t\t\t}\n\t\t}\n\t\tfor (const control of controlsToHide) {\n\t\t\tif (!controlsToDisplay.includes(control)) {\n\t\t\t\tcontrol.setVisible(false);\n\t\t\t}\n\t\t}\n\t\tfor (const control of controlsToDisplay) {\n\t\t\tcontrol.setVisible(true);\n\t\t}\n\t}\n\n\tonStateChange(changedKeys: string[]): void {\n\t\tif (changedKeys?.includes(\"selectedKey\")) {\n\t\t\tthis.showHideControls(this.state.selectedKey);\n\t\t\tthis.getPageController()?.getExtensionAPI().updateAppState();\n\t\t\tif (this.currentKey === \"ai\" && this.state.selectedKey === \"compact\") {\n\t\t\t\ttriggerPXIntegration(\"toggleSwitch\");\n\t\t\t}\n\t\t\tthis.currentKey = this.state.selectedKey;\n\t\t\tthis.fireEvent(\"selectionChange\");\n\t\t}\n\t}\n\n\t/**\n\t * Creates the content of the building block.\n\t * @returns The SegmentedButton\n\t */\n\tcreateContent(): SegmentedButton {\n\t\tconst segmentedButtonId = this.createId(\"filterTypeSwitch\");\n\n\t\treturn (\n\t\t\t<SegmentedButton ref={this.$segmentedButton} id={segmentedButtonId} selectedKey={bindState(this.state, \"selectedKey\")}>\n\t\t\t\t{{ items: this.items.map((item, index) => this.createSegmentedButtonItem(item, index)) }}\n\t\t\t</SegmentedButton>\n\t\t);\n\t}\n\n\t/**\n\t * Creates the SegmentedButtonItem for the SegmentedButton and associate a key to it.\n\t * @param item The ContentSwitcherItem\n\t * @param itemIdx The index of the item\n\t * @returns The SegmentedButtonItem\n\t */\n\tcreateSegmentedButtonItem(item: ContentSwitcherItem, itemIdx: number): SegmentedButtonItem {\n\t\tconst segmentButtonItemId = this.createId(item.key);\n\t\titem.key ??= `key${itemIdx}`;\n\t\tif (item.icon) {\n\t\t\treturn <SegmentedButtonItem icon={item.icon} tooltip={item.text} key={item.key} id={segmentButtonItemId} />;\n\t\t}\n\t\treturn <SegmentedButtonItem text={item.text} key={item.key} id={segmentButtonItemId} />;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}