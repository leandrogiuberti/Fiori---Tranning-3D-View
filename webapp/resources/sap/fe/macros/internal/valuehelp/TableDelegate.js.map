{"version":3,"file":"TableDelegate.js","names":["ODataTableDelegate","Object","assign","TableDelegate","fetchProperties","async","table","model","this","_getModel","properties","_createPropertyInfos","createInternalBindingContext","setSortConditions","MacrosDelegateUtil","setCachedProperties","getBindingContext","setProperty","sortConditionsCD","data","rawSortConditions","CommonHelper","parseCustomData","sorters","forEach","sortCondition","infoName","convertPropertyPathToInfoName","name","propertyPath","propertyInfo","find","column","propertyInfos","path","key","dialog","isA","getParent","internalModel","getModel","internalBindingContext","newInternalBindingContextPath","getPath","getId","getProperty","newInternalBindingContext","bindContext","getBoundContext","setBindingContext","collectRelatedProperties","dataModelPropertyPath","dataModelAdditionalPropertyPath","getAdditionalProperty","relatedProperties","targetObject","additionalProperty","additionalPropertyPath","getTargetObjectPath","property","textAnnotation","annotations","Common","Text","textArrangement","UI","TextArrangement","toString","displayMode","getDisplayMode","metadataInfo","getDelegate","payload","entitySetPath","collectionName","metaModel","getMetaModel","requestObject","then","entitySetAnnotations","sortRestrictionsInfo","getSortRestrictionsInfo","filterRestrictions","filterRestrictionsInfo","getFilterRestrictionsInfo","filterFunctions","caseSensitive","ModelHelper","isFilteringCaseSensitive","customDataForColumns","getCustomData","propertiesToBeCreated","dataModelEntityPath","getInvolvedDataModelObjects","getContext","customData","columnDef","typeConfig","isTypeFilterable","$Type","getTypeMap","getTypeConfig","TypeMap","label","enhanceDataModelPath","targetPropertyPath","type","propertyTypeConfig","formatOptions","constraints","relatedPropertiesInfo","relatedPropertyPaths","keys","length","dataType","className","sortable","isSortableProperty","filterable","isFilterableProperty","maxConditions","getPropertyMaxConditions","push","relatedColumns","createRelatedProperties","concat","updateBindingInfo","mdcTable","bindingInfo","apply","collectionPath","parameters","filterBar","Element","getElementById","getFilter","isFilterEnabled","isFilteringEnabled","conditions","innerFilterInfo","outerFilterInfo","filters","tableProperties","getCachedProperties","getConditions","FilterUtil","getFilterInfo","isTreeTable","hierarchyQualifier","$$aggregation","expandTo","initialExpansionLevel","parameterNames","DelegateUtil","getParameterNames","_updatePropertyInfo","parameterPath","getParametersInfo","$search","CommonUtils","normalizeSearchTerm","getSearch","undefined","search","Number","MAX_SAFE_INTEGER","$$sharedRequest","_applyDefaultSorting","$select","reduce","query","includes","$count","isDraftSupported","Filter","FilterOperator","EQ","Promise","resolve","attachEventOnce","sorter","defaultSortPropertyName","Sorter","aTableProperties","oMDCTable","mConditions","oMetadataInfo","aConditionKey","oMetaModel","conditionKey","conditionKeyType","getObject","tableProperty","index","findIndex","oColumnDef","typeInstance","baseType","oFormatOptions","oConstraints","updateBinding","oTable","oBindingInfo","oBinding","bNeedManualRefresh","oInternalBindingContext","sManualUpdatePropertyKey","sLastSearch","sLastFilter","bPendingManualUpdate","lastSearch","lastFilter","oRowBinding","getRowBinding","deepEqual","requestRefresh","getGroupId","finally","catch","oError","Log","error","fireEvent","existingColumns","relatedPropertyNameMap","relatedColumn","newName","valueHelpColumnTypeConfig","valueHelpTableColumn","getLabel","map","columnName","hasOwnProperty","isMultiValueFilterExpression","getAssociatedTextPropertyPath","getAssociatedCurrencyPropertyPath","getAssociatedUnitPropertyPath","getAssociatedTimezonePropertyPath","dataModelAdditionalProperty"],"sources":["./TableDelegate.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { getTypeConfig } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport type { FilterRestrictionsInfoType, SortRestrictionsInfoType } from \"sap/fe/core/helpers/MetaModelFunction\";\nimport { getFilterRestrictionsInfo, getSortRestrictionsInfo, isMultiValueFilterExpression } from \"sap/fe/core/helpers/MetaModelFunction\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport {\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedTimezonePropertyPath,\n\tgetAssociatedUnitPropertyPath,\n\tgetLabel\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport type { DefaultTypeForEdmType } from \"sap/fe/core/type/EDM\";\nimport { isTypeFilterable } from \"sap/fe/core/type/EDM\";\nimport type { CollectionBindingInfo, FilterInfo } from \"sap/fe/macros/CollectionBindingInfo\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport MacrosDelegateUtil from \"sap/fe/macros/DelegateUtil\";\nimport type { FilterConditions } from \"sap/fe/macros/filterBar/FilterHelper\";\nimport { getPath, isFilterableProperty, isSortableProperty } from \"sap/fe/macros/internal/valuehelp/TableDelegateHelper\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type { BaseAggregationBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport Element from \"sap/ui/core/Element\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { MDCTablePropertyInfo as PropertyInfo } from \"sap/ui/mdc/Table\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport TableDelegate from \"sap/ui/mdc/odata/v4/TableDelegate\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\nimport DelegateUtil from \"sap/ui/mdc/odata/v4/util/DelegateUtil\";\nimport FilterUtil from \"sap/ui/mdc/util/FilterUtil\";\nimport type Context from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type Model from \"sap/ui/model/Model\";\nimport Sorter from \"sap/ui/model/Sorter\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { MetaModelEntitySetAnnotation } from \"../../../../../../../../types/metamodel_types\";\n\ntype ComplexPropertyMap = Record<string, Property>;\n\ntype MdcTableDelegate = { name: string; payload: Payload };\n\ntype Payload = {\n\tcollectionName?: string;\n\tcollectionPath?: string;\n\tdefaultSortPropertyName?: string;\n\thierarchyQualifier?: string;\n\tinitialExpansionLevel?: number;\n};\n/**\n * Test delegate for OData V4.\n */\nconst ODataTableDelegate = Object.assign({}, TableDelegate);\n\n/**\n * Fetches the relevant metadata for the table and returns property info array.\n * @param table Instance of the MDCtable\n * @returns Array of property info\n */\nODataTableDelegate.fetchProperties = async function (table: Table): Promise<PropertyInfo> {\n\tconst model = await this._getModel(table);\n\tconst properties = await this._createPropertyInfos(table, model);\n\tODataTableDelegate.createInternalBindingContext(table);\n\tODataTableDelegate.setSortConditions(table, properties);\n\tMacrosDelegateUtil.setCachedProperties(table, properties);\n\t(table.getBindingContext(\"internal\") as Context).setProperty(\"tablePropertiesAvailable\", true);\n\treturn properties;\n};\n\n/**\n * Set sort conditions on the table.\n * @param table Valuehelp table instance\n * @param properties PropertyInfo array\n */\nODataTableDelegate.setSortConditions = function (table: Table, properties: PropertyInfo[]): void {\n\tconst sortConditionsCD = table.data(\"sortConditions\");\n\tconst rawSortConditions = CommonHelper.parseCustomData(sortConditionsCD) as { sorters: { name: string }[] } | undefined;\n\tif (rawSortConditions?.sorters) {\n\t\trawSortConditions.sorters.forEach((sortCondition) => {\n\t\t\tconst infoName = ODataTableDelegate.convertPropertyPathToInfoName(sortCondition.name, properties);\n\t\t\tif (infoName && infoName !== sortCondition.name) {\n\t\t\t\tsortCondition.name = infoName;\n\t\t\t}\n\t\t});\n\t\ttable.setSortConditions({ ...rawSortConditions });\n\t}\n};\n\n/**\n * Convert a property path to its corresponding info name.\n * @param propertyPath Property path to be converted.\n * @param properties Table PropertyInfo array\n * @returns Property info name if found, otherwise returns the original property path.\n */\nODataTableDelegate.convertPropertyPathToInfoName = function (propertyPath: string, properties: PropertyInfo[]): string {\n\tconst propertyInfo = properties.find((column) => {\n\t\treturn !column.propertyInfos && column.path === propertyPath;\n\t});\n\treturn propertyInfo?.key ?? propertyPath;\n};\n\nODataTableDelegate.createInternalBindingContext = function (table: Table): void {\n\tlet dialog: ManagedObject | null = table;\n\twhile (dialog && !dialog.isA(\"sap.ui.mdc.valuehelp.Dialog\")) {\n\t\tdialog = (dialog as ManagedObject).getParent();\n\t}\n\n\tconst internalModel = table.getModel(\"internal\") as JSONModel;\n\n\tif (dialog && internalModel) {\n\t\tconst internalBindingContext = dialog.getBindingContext(\"internal\");\n\t\tlet newInternalBindingContextPath;\n\t\tif (internalBindingContext) {\n\t\t\tnewInternalBindingContextPath = internalBindingContext.getPath() + `::VHDialog::${dialog.getId()}::table`;\n\t\t} else {\n\t\t\tnewInternalBindingContextPath = `/buildingblocks/${table.getId()}`;\n\t\t\tinternalModel.setProperty(\"/buildingblocks\", { ...internalModel.getProperty(\"/buildingblocks\") });\n\t\t}\n\t\tconst newInternalBindingContext = internalModel.bindContext(newInternalBindingContextPath).getBoundContext();\n\t\ttable.setBindingContext(newInternalBindingContext, \"internal\");\n\t}\n};\n\n/**\n * Collect related properties from a property's annotations.\n * @param dataModelPropertyPath The model object path of the property.\n * @returns The related properties that were identified.\n * @private\n */\nfunction collectRelatedProperties(dataModelPropertyPath: DataModelObjectPath<Property>): ComplexPropertyMap {\n\tconst dataModelAdditionalPropertyPath = getAdditionalProperty(dataModelPropertyPath);\n\tconst relatedProperties: ComplexPropertyMap = {};\n\tif (dataModelAdditionalPropertyPath?.targetObject) {\n\t\tconst additionalProperty = dataModelAdditionalPropertyPath.targetObject;\n\t\tconst additionalPropertyPath = getTargetObjectPath(dataModelAdditionalPropertyPath, true);\n\n\t\tconst property = dataModelPropertyPath.targetObject as Property;\n\t\tconst propertyPath = getTargetObjectPath(dataModelPropertyPath, true);\n\n\t\tconst textAnnotation = property.annotations?.Common?.Text,\n\t\t\ttextArrangement = textAnnotation?.annotations?.UI?.TextArrangement?.toString(),\n\t\t\tdisplayMode = textAnnotation && textArrangement && getDisplayMode(property);\n\n\t\tif (displayMode === \"Description\") {\n\t\t\trelatedProperties[additionalPropertyPath] = additionalProperty;\n\t\t} else if ((displayMode && displayMode !== \"Value\") || !textAnnotation) {\n\t\t\trelatedProperties[propertyPath] = property;\n\t\t\trelatedProperties[additionalPropertyPath] = additionalProperty;\n\t\t}\n\t}\n\treturn relatedProperties;\n}\n\nODataTableDelegate._createPropertyInfos = async function (table: Table, model: ODataModel): Promise<PropertyInfo[]> {\n\tconst metadataInfo = (table.getDelegate() as { payload: Payload }).payload;\n\tconst properties: PropertyInfo[] = [];\n\tconst entitySetPath = `/${metadataInfo.collectionName}`;\n\tconst metaModel = model.getMetaModel();\n\n\treturn metaModel.requestObject(`${entitySetPath}@`).then(function (entitySetAnnotations: MetaModelEntitySetAnnotation) {\n\t\tconst sortRestrictionsInfo = getSortRestrictionsInfo(entitySetAnnotations);\n\t\tconst filterRestrictions = entitySetAnnotations[\"@Org.OData.Capabilities.V1.FilterRestrictions\"];\n\t\tconst filterRestrictionsInfo = getFilterRestrictionsInfo(filterRestrictions);\n\t\tconst filterFunctions = entitySetAnnotations[\"@Org.OData.Capabilities.V1.FilterFunctions\"];\n\t\tconst caseSensitive = ModelHelper.isFilteringCaseSensitive(metaModel, filterFunctions);\n\t\tconst customDataForColumns = MacrosDelegateUtil.getCustomData<{\n\t\t\tcustomData: (PropertyInfo & { $Type: keyof typeof DefaultTypeForEdmType })[];\n\t\t}>(table, \"columns\")!;\n\t\tconst propertiesToBeCreated: Record<string, Property> = {};\n\t\tconst dataModelEntityPath = getInvolvedDataModelObjects((table.getModel() as ODataModel).getMetaModel().getContext(entitySetPath));\n\t\tcustomDataForColumns.customData.forEach(function (columnDef: PropertyInfo & { $Type: keyof typeof DefaultTypeForEdmType }) {\n\t\t\tlet typeConfig = isTypeFilterable(columnDef.$Type)\n\t\t\t\t? table.getTypeMap().getTypeConfig(columnDef.$Type)\n\t\t\t\t: TypeMap.getTypeConfig(\"sap.ui.model.odata.type.String\");\n\t\t\tconst propertyInfo: PropertyInfo = {\n\t\t\t\tkey: columnDef.path!,\n\t\t\t\tlabel: columnDef.label\n\t\t\t};\n\n\t\t\tconst dataModelPropertyPath = enhanceDataModelPath<Property>(dataModelEntityPath, columnDef.path);\n\t\t\tconst property = dataModelPropertyPath.targetObject as Property;\n\t\t\tif (property) {\n\t\t\t\tconst targetPropertyPath = getTargetObjectPath(dataModelPropertyPath, true);\n\t\t\t\tif (isTypeFilterable(property.type as keyof typeof DefaultTypeForEdmType)) {\n\t\t\t\t\tconst propertyTypeConfig = getTypeConfig(property);\n\t\t\t\t\ttypeConfig =\n\t\t\t\t\t\tTypeMap.getTypeConfig(\n\t\t\t\t\t\t\tpropertyTypeConfig.type ?? \"sap.ui.model.odata.type.String\",\n\t\t\t\t\t\t\tpropertyTypeConfig.formatOptions,\n\t\t\t\t\t\t\tpropertyTypeConfig.constraints\n\t\t\t\t\t\t) ?? typeConfig;\n\t\t\t\t}\n\t\t\t\t//Check if there is an additional property linked to the property as a Unit, Currency, Timezone or textArrangement\n\t\t\t\tconst relatedPropertiesInfo = collectRelatedProperties(dataModelPropertyPath);\n\t\t\t\tconst relatedPropertyPaths: string[] = Object.keys(relatedPropertiesInfo);\n\n\t\t\t\tif (relatedPropertyPaths.length) {\n\t\t\t\t\tpropertyInfo.propertyInfos = relatedPropertyPaths;\n\t\t\t\t\t// Collect information of related columns to be created.\n\t\t\t\t\trelatedPropertyPaths.forEach((path) => {\n\t\t\t\t\t\tpropertiesToBeCreated[path] = relatedPropertiesInfo[path];\n\t\t\t\t\t});\n\t\t\t\t\t// Also add property for the inOut Parameters on the ValueHelp when textArrangement is set to #TextOnly\n\t\t\t\t\t// It will not be linked to the complex Property (BCP 2270141154)\n\t\t\t\t\tif (!relatedPropertyPaths.find((path) => relatedPropertiesInfo[path] === property)) {\n\t\t\t\t\t\tpropertiesToBeCreated[targetPropertyPath] = property;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyInfo.path = columnDef.path;\n\t\t\t\t\tpropertyInfo.dataType = typeConfig.className;\n\t\t\t\t\tpropertyInfo.constraints = columnDef.constraints;\n\t\t\t\t\tpropertyInfo.formatOptions = columnDef.formatOptions;\n\t\t\t\t\tpropertyInfo.sortable = isSortableProperty(sortRestrictionsInfo, columnDef);\n\t\t\t\t\tpropertyInfo.filterable = isFilterableProperty(filterRestrictionsInfo, columnDef);\n\t\t\t\t\tpropertyInfo.maxConditions = getPropertyMaxConditions(filterRestrictionsInfo, columnDef);\n\t\t\t\t\tpropertyInfo.caseSensitive = caseSensitive;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpropertyInfo.path = columnDef.path;\n\t\t\t\tpropertyInfo.caseSensitive = caseSensitive;\n\t\t\t\tpropertyInfo.dataType = typeConfig.className;\n\t\t\t}\n\t\t\tproperties.push(propertyInfo);\n\t\t});\n\t\tconst relatedColumns = createRelatedProperties(\n\t\t\tpropertiesToBeCreated,\n\t\t\tproperties,\n\t\t\tsortRestrictionsInfo,\n\t\t\tfilterRestrictionsInfo,\n\t\t\tcaseSensitive\n\t\t);\n\t\treturn properties.concat(relatedColumns);\n\t});\n};\n\n/**\n * Updates the binding info with the relevant path and model from the metadata.\n * @param mdcTable The MDCTable instance\n * @param bindingInfo The bindingInfo of the table\n */\nODataTableDelegate.updateBindingInfo = function (mdcTable: Table, bindingInfo: CollectionBindingInfo): void {\n\tTableDelegate.updateBindingInfo.apply(this, [mdcTable, bindingInfo]);\n\n\tconst metadataInfo = (mdcTable.getDelegate() as MdcTableDelegate).payload;\n\n\tif (metadataInfo) {\n\t\tbindingInfo.path = bindingInfo?.path || metadataInfo.collectionPath || `/${metadataInfo.collectionName}`;\n\t}\n\n\tbindingInfo.parameters = bindingInfo.parameters || {};\n\n\tconst filterBar = Element.getElementById(mdcTable.getFilter()) as FilterBar,\n\t\tisFilterEnabled = mdcTable.isFilteringEnabled();\n\tlet conditions: Record<string, FilterConditions[]>;\n\tlet innerFilterInfo, outerFilterInfo: FilterInfo;\n\tconst filters = [];\n\tconst tableProperties = MacrosDelegateUtil.getCachedProperties(mdcTable) as unknown as PropertyInfo[];\n\n\t//TODO: consider a mechanism ('FilterMergeUtil' or enhance 'FilterUtil') to allow the connection between different filters)\n\tif (isFilterEnabled) {\n\t\tconditions = mdcTable.getConditions();\n\t\tinnerFilterInfo = FilterUtil.getFilterInfo(mdcTable, conditions, tableProperties, []) as FilterInfo;\n\t\tif (innerFilterInfo.filters) {\n\t\t\tfilters.push(innerFilterInfo.filters);\n\t\t}\n\t}\n\tconst isTreeTable = !!metadataInfo?.hierarchyQualifier;\n\tif (isTreeTable) {\n\t\tbindingInfo.parameters.$$aggregation = {\n\t\t\thierarchyQualifier: metadataInfo.hierarchyQualifier,\n\t\t\texpandTo: metadataInfo.initialExpansionLevel\n\t\t};\n\t}\n\tif (filterBar) {\n\t\tconditions = filterBar.getConditions();\n\t\tif (conditions) {\n\t\t\tconst parameterNames = DelegateUtil.getParameterNames(filterBar);\n\t\t\t// The table properties needs to updated with the filter field if no Selectionfields are annotated and not part as value help parameter\n\t\t\tODataTableDelegate._updatePropertyInfo(tableProperties, mdcTable, conditions, metadataInfo);\n\t\t\touterFilterInfo = FilterUtil.getFilterInfo(filterBar, conditions, tableProperties, parameterNames);\n\n\t\t\tif (outerFilterInfo.filters) {\n\t\t\t\tfilters.push(outerFilterInfo.filters);\n\t\t\t}\n\n\t\t\tconst parameterPath = DelegateUtil.getParametersInfo(filterBar, conditions);\n\t\t\tif (parameterPath) {\n\t\t\t\tbindingInfo.path = parameterPath;\n\t\t\t}\n\t\t}\n\t\tif (!isTreeTable) {\n\t\t\t// get the basic search\n\t\t\tbindingInfo.parameters.$search = CommonUtils.normalizeSearchTerm(filterBar.getSearch()) || undefined;\n\t\t} else if (filterBar.getSearch()) {\n\t\t\tif (!bindingInfo.parameters.$$aggregation) {\n\t\t\t\tbindingInfo.parameters.$$aggregation = {};\n\t\t\t}\n\t\t\tbindingInfo.parameters.$$aggregation.search = CommonUtils.normalizeSearchTerm(filterBar.getSearch());\n\t\t\tbindingInfo.parameters.$$aggregation.expandTo = Number.MAX_SAFE_INTEGER;\n\t\t}\n\t}\n\t// BCP: 2370078660 - sharedRequest is set to false in order to avoid deadlock situation where the the oData\n\t// model cache is neither changeable (result of ListBinding.$$sharedRequest = true) nor deletable\n\t// (result of Context.setSelected(true) -> ListBinding.keepAlive)\n\tbindingInfo.parameters.$$sharedRequest = false;\n\n\tthis._applyDefaultSorting(bindingInfo, (mdcTable.getDelegate() as MdcTableDelegate).payload);\n\t// add select to bindingInfo (BCP 2170163012)\n\tbindingInfo.parameters.$select = tableProperties?.reduce(function (query: string, property: PropertyInfo) {\n\t\t// Navigation properties (represented by X/Y) should not be added to $select.\n\t\t// ToDo : They should be added as $expand=X($select=Y) instead\n\t\tif (property.path && !property.path.includes(\"/\")) {\n\t\t\tquery = query ? `${query},${property.path}` : property.path;\n\t\t}\n\t\treturn query;\n\t}, \"\");\n\n\t// Add $count\n\tbindingInfo.parameters.$count = true;\n\n\t//If the entity is DraftEnabled add a DraftFilter\n\tif (bindingInfo.path && ModelHelper.isDraftSupported(mdcTable.getModel()?.getMetaModel() as ODataMetaModel, bindingInfo.path)) {\n\t\tfilters.push(new Filter(\"IsActiveEntity\", FilterOperator.EQ, true));\n\t}\n\tbindingInfo.filters = new Filter(filters as Filter[], true);\n};\n\nODataTableDelegate.getTypeMap = function (): object {\n\treturn TypeMap;\n};\n\n/**\n * Get table Model.\n * @param table Instance of the MDCtable\n * @returns Model\n */\nODataTableDelegate._getModel = async function (table: Table): Promise<Model> {\n\tconst metadataInfo = (table.getDelegate() as { payload: { model: string } }).payload;\n\tlet model: Model = table.getModel(metadataInfo.model)!;\n\tif (!model) {\n\t\tawait new Promise((resolve) => {\n\t\t\ttable.attachEventOnce(\"modelContextChange\", resolve);\n\t\t});\n\t\tmodel = table.getModel(metadataInfo.model)!;\n\t}\n\treturn model;\n};\n\n/**\n * Applies a default sort order if needed. This is only the case if the request is not a $search request\n * (means the parameter $search of the bindingInfo is undefined) and if a sort order has not been set already,\n * for example, using a presentation variant or manually set by the user.\n * @param bindingInfo The bindingInfo of the table\n * @param payload The payload of the TableDelegate\n */\nODataTableDelegate._applyDefaultSorting = function (bindingInfo: CollectionBindingInfo, payload: Payload): void {\n\tif (\n\t\tbindingInfo.parameters &&\n\t\tbindingInfo.parameters.$search == undefined &&\n\t\tbindingInfo.parameters.$$aggregation?.search == undefined &&\n\t\tbindingInfo.sorter &&\n\t\tbindingInfo.sorter.length == 0\n\t) {\n\t\tconst defaultSortPropertyName = payload ? payload.defaultSortPropertyName : undefined;\n\t\tif (defaultSortPropertyName) {\n\t\t\tbindingInfo.sorter.push(new Sorter(defaultSortPropertyName, false));\n\t\t}\n\t}\n};\n\n/**\n * Updates the table properties with filter field infos.\n * @param aTableProperties Array with table properties\n * @param oMDCTable The MDCTable instance\n * @param mConditions The conditions of the table\n * @param oMetadataInfo The metadata info of the filter field\n */\nODataTableDelegate._updatePropertyInfo = function (\n\taTableProperties: PropertyInfo[],\n\toMDCTable: Table,\n\tmConditions: Record<string, ConditionObject[]>,\n\toMetadataInfo: Payload\n): void {\n\tconst aConditionKey = Object.keys(mConditions),\n\t\toMetaModel = (oMDCTable.getModel() as ODataModel).getMetaModel()!;\n\taConditionKey.forEach(function (conditionKey: string) {\n\t\t// The typeConfig is not set in the table propertyInfos, but we need to set it for the filter fields\n\t\tconst conditionKeyType = oMetaModel.getObject(`/${oMetadataInfo.collectionName}/${conditionKey}`)?.$Type ?? \"Edm.String\";\n\t\tconst typeConfig = oMDCTable.getTypeMap().getTypeConfig(conditionKeyType);\n\t\taTableProperties.forEach((tableProperty, index) => {\n\t\t\tif (tableProperty.path === conditionKey) {\n\t\t\t\t(aTableProperties[index] as PropertyInfo & { typeConfig: object }).typeConfig = typeConfig;\n\t\t\t}\n\t\t});\n\t\tif (\n\t\t\taTableProperties.findIndex(function (tableProperty: PropertyInfo) {\n\t\t\t\treturn tableProperty.path === conditionKey;\n\t\t\t}) === -1\n\t\t) {\n\t\t\tconst oColumnDef: PropertyInfo = {\n\t\t\t\tkey: conditionKey,\n\t\t\t\tlabel: conditionKey,\n\t\t\t\tpath: conditionKey,\n\t\t\t\tdataType: typeConfig.typeInstance.baseType,\n\t\t\t\tformatOptions: typeConfig.typeInstance?.oFormatOptions,\n\t\t\t\tconstraints: typeConfig.typeInstance?.oConstraints\n\t\t\t};\n\t\t\taTableProperties.push(oColumnDef);\n\t\t}\n\t});\n};\n\nODataTableDelegate.updateBinding = function (\n\toTable: Table,\n\toBindingInfo: BaseAggregationBindingInfo & {\n\t\tparameters: {\n\t\t\t$search?: string;\n\t\t};\n\t},\n\toBinding: ODataListBinding\n): void {\n\tlet bNeedManualRefresh = false;\n\tconst oInternalBindingContext = oTable.getBindingContext(\"internal\");\n\tconst sManualUpdatePropertyKey = \"pendingManualBindingUpdate\";\n\tconst sLastSearch = \"lastSearch\";\n\tconst sLastFilter = \"lastFilter\";\n\tconst bPendingManualUpdate = oInternalBindingContext?.getProperty(sManualUpdatePropertyKey);\n\tconst lastSearch = oInternalBindingContext?.getProperty(sLastSearch);\n\tconst lastFilter = oInternalBindingContext?.getProperty(sLastFilter);\n\tlet oRowBinding = oTable.getRowBinding();\n\n\t//oBinding=null means that a rebinding needs to be forced via updateBinding in mdc TableDelegate\n\tTableDelegate.updateBinding.apply(ODataTableDelegate, [oTable, oBindingInfo, oBinding]);\n\t//get row binding after rebind from TableDelegate.updateBinding in case oBinding was null\n\tif (!oRowBinding) {\n\t\toRowBinding = oTable.getRowBinding();\n\t}\n\tif (oRowBinding) {\n\t\t/**\n\t\t * Manual refresh if filters are not changed by binding.refresh() since updating the bindingInfo\n\t\t * is not enough to trigger a batch request.\n\t\t * In case there is no internalBindingContext (see BCP 2280161524) we can not determine if a manual\n\t\t * refresh is needed or not. Therefore, we always refresh in this special case\n\t\t */\n\t\tbNeedManualRefresh = oInternalBindingContext\n\t\t\t? deepEqual(oBindingInfo.filters, lastFilter) && oBindingInfo.parameters?.$search === lastSearch && !bPendingManualUpdate\n\t\t\t: true;\n\t}\n\toInternalBindingContext?.setProperty(sLastSearch, oBindingInfo.parameters?.$search);\n\toInternalBindingContext?.setProperty(sLastFilter, oBindingInfo.filters);\n\n\tif (bNeedManualRefresh && oTable.getFilter()) {\n\t\toInternalBindingContext?.setProperty(sManualUpdatePropertyKey, true);\n\t\toRowBinding\n\t\t\t.requestRefresh(oRowBinding.getGroupId())\n\t\t\t.finally(function () {\n\t\t\t\toInternalBindingContext?.setProperty(sManualUpdatePropertyKey, false);\n\t\t\t})\n\t\t\t.catch(function (oError: unknown) {\n\t\t\t\tLog.error(\"Error while refreshing a filterBar VH table\", oError as string);\n\t\t\t});\n\t}\n\toTable.fireEvent(\"bindingUpdated\");\n\t//no need to check for semantic targets here since we are in a VH and don't want to allow further navigation\n};\n\n/**\n * Creates a simple property for each identified complex property.\n * @param propertiesToBeCreated Identified properties.\n * @param existingColumns The list of columns created for properties defined on the Value List.\n * @param sortRestrictionsInfo An object containing the sort restriction information\n * @param filterRestrictionsInfo An object containing the filter restriction information\n * @param caseSensitive\n * @returns The array of properties created.\n * @private\n */\nfunction createRelatedProperties(\n\tpropertiesToBeCreated: Record<string, Property>,\n\texistingColumns: PropertyInfo[],\n\tsortRestrictionsInfo: SortRestrictionsInfoType,\n\tfilterRestrictionsInfo: FilterRestrictionsInfoType,\n\tcaseSensitive?: boolean\n): PropertyInfo[] {\n\tconst relatedPropertyNameMap: Record<string, string> = {},\n\t\trelatedColumns: PropertyInfo[] = [];\n\tObject.keys(propertiesToBeCreated).forEach((path) => {\n\t\tconst property = propertiesToBeCreated[path],\n\t\t\trelatedColumn = existingColumns.find((column) => column.path === path); // Complex properties doesn't have path so only simple column are found\n\t\tif (!relatedColumn) {\n\t\t\tconst newName = `Property::${path}`;\n\t\t\trelatedPropertyNameMap[path] = newName;\n\t\t\tconst propertyTypeConfig = getTypeConfig(property);\n\t\t\tconst valueHelpColumnTypeConfig = TypeMap.getTypeConfig(\n\t\t\t\tpropertyTypeConfig.type ?? \"sap.ui.model.odata.type.String\",\n\t\t\t\tpropertyTypeConfig.formatOptions,\n\t\t\t\tpropertyTypeConfig.constraints\n\t\t\t);\n\t\t\tconst valueHelpTableColumn: PropertyInfo = {\n\t\t\t\tkey: newName,\n\t\t\t\tlabel: getLabel(property),\n\t\t\t\tpath,\n\t\t\t\tsortable: isSortableProperty(sortRestrictionsInfo, property),\n\t\t\t\tfilterable: isFilterableProperty(filterRestrictionsInfo, property),\n\t\t\t\tdataType: valueHelpColumnTypeConfig.className,\n\t\t\t\tformatOptions: isTypeFilterable(property.type as keyof typeof DefaultTypeForEdmType)\n\t\t\t\t\t? propertyTypeConfig.formatOptions\n\t\t\t\t\t: undefined,\n\t\t\t\tconstraints: isTypeFilterable(property.type as keyof typeof DefaultTypeForEdmType)\n\t\t\t\t\t? propertyTypeConfig.constraints\n\t\t\t\t\t: undefined,\n\t\t\t\tcaseSensitive\n\t\t\t};\n\t\t\tvalueHelpTableColumn.maxConditions = getPropertyMaxConditions(filterRestrictionsInfo, valueHelpTableColumn);\n\t\t\trelatedColumns.push(valueHelpTableColumn);\n\t\t}\n\t});\n\t// The property 'key' has been prefixed with 'Property::' for uniqueness.\n\t// Update the same in other propertyInfos[] references which point to this property.\n\texistingColumns.forEach((column) => {\n\t\tif (column.propertyInfos) {\n\t\t\tcolumn.propertyInfos = column.propertyInfos?.map((columnName) => relatedPropertyNameMap[columnName] ?? columnName);\n\t\t}\n\t});\n\treturn relatedColumns;\n}\n\n/**\n * Identifies the maxConditions for a given property.\n * @param filterRestrictionsInfo The filter restriction information from the restriction annotation.\n * @param property The target property.\n * @returns `-1` or `1` if the property is a MultiValueFilterExpression.\n * @private\n */\n\nfunction getPropertyMaxConditions(filterRestrictionsInfo: FilterRestrictionsInfoType, property: PropertyInfo | Property): number {\n\tconst propertyPath = getPath(property);\n\treturn propertyPath &&\n\t\tfilterRestrictionsInfo.propertyInfo?.hasOwnProperty(propertyPath) &&\n\t\tisMultiValueFilterExpression(filterRestrictionsInfo.propertyInfo[propertyPath] as unknown as string)\n\t\t? -1\n\t\t: 1;\n}\n\n/**\n * Identifies the additional property which references to the unit, timezone, textArrangement or currency.\n * @param dataModelPropertyPath The model object path of the property.\n * @returns The additional property.\n * @private\n */\nfunction getAdditionalProperty(dataModelPropertyPath: DataModelObjectPath<Property>): DataModelObjectPath<Property> | undefined {\n\tconst property = dataModelPropertyPath.targetObject;\n\tconst additionalPropertyPath =\n\t\tproperty &&\n\t\t(getAssociatedTextPropertyPath(property) ||\n\t\t\tgetAssociatedCurrencyPropertyPath(property) ||\n\t\t\tgetAssociatedUnitPropertyPath(property) ||\n\t\t\tgetAssociatedTimezonePropertyPath(property));\n\tif (!additionalPropertyPath) {\n\t\treturn undefined;\n\t}\n\tconst dataModelAdditionalProperty = enhanceDataModelPath<Property>(dataModelPropertyPath, additionalPropertyPath);\n\n\t//Additional Property could refer to a navigation property, keep the key and path as navigation property\n\tconst additionalProperty = dataModelAdditionalProperty.targetObject;\n\tif (!additionalProperty) {\n\t\treturn undefined;\n\t}\n\treturn dataModelAdditionalProperty;\n}\n\nexport default ODataTableDelegate;\n"],"mappings":"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","ignoreList":[]}