{"version":3,"file":"AdditionalValueFormatter.js","names":["getGrowing","recommendationData","propertyPath","values","additionalValueHelper","getRelevantRecommendations","this","getBindingContext","length","__functionName","_getRelativePropertyPath","fieldBindingContext","sourcepath","metaPath","ModelHelper","getMetaPathForContext","replace","_setValueStateForFieldWithNoDataContext","recommendationValue","recommendationDescription","all_recommendations","recommendationsText","fnSetValueState","event","listBinding","getSource","listContexts","getAllCurrentContexts","includes","getObject","valueState","valueStateText","_getValueStateForRecommendationField","setValueStateText","setValueState","detachChange","getBinding","attachChange","field","ValueState","None","Information","relativePropertyPath","relevantRecommendations","version","getAdditionalValueFromPropertyPath","value","text","view","CommonUtils","getTargetView","getController","recommendations","increaseTelemetryDataCount","formatValueState","isEditable","fieldValue","fieldTextValue","undefined","presentValueState","getValueState","isTransient","recommendationsAvailable","Object","keys","Library","getResourceBundleFor","getText","presentValueStateText","getValueStateText","presentVSIsRecommendations","recommendationsStateApplicable","isA","call","_getPlaceholderText","displayMode","placeholder","valueFormatters","formatWithBrackets","formatPlaceholder","currentPageContext","currentBoundMessageType","editStylePlaceholder","placeholderData","getPlaceholder","bindingContext","bindingPath","getPath","additionalValueFormatter","sName","hasOwnProperty","_len","arguments","oArgs","Array","_key","apply","ObjectPath","set"],"sources":["./AdditionalValueFormatter.ts"],"sourcesContent":["import ObjectPath from \"sap/base/util/ObjectPath\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport type { InCompletenessInfoType } from \"sap/fe/core/helpers/RecommendationHelper\";\nimport type { RecommendationInfo, StandardRecommendationDataType } from \"sap/fe/core/helpers/StandardRecommendationHelper\";\nimport { additionalValueHelper } from \"sap/fe/macros/internal/valuehelp/AdditionalValueHelper\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport Library from \"sap/ui/core/Lib\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport type MessageType from \"sap/ui/core/message/MessageType\";\nimport type Field from \"sap/ui/mdc/Field\";\nimport type MTable from \"sap/ui/mdc/valuehelp/content/MTable\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\n\n/**\n * Growing formatter used for growing and growingThreshold.\n * @param this Valuehelp Table\n * @param recommendationData Data fetched from recommendation model\n * @param propertyPath Property Path of the Field\n * @returns Boolean value for growing and growingThreshold properties\n */\nfunction getGrowing(this: MTable, recommendationData: InCompletenessInfoType | undefined, propertyPath: string): boolean {\n\tconst values =\n\t\tadditionalValueHelper.getRelevantRecommendations(recommendationData || {}, this.getBindingContext() as Context, propertyPath) || [];\n\tif (values.length > 0) {\n\t\t//if there are relevant recommendations then return true\n\t\treturn true;\n\t}\n\treturn false;\n}\ngetGrowing.__functionName = \"sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#getGrowing\";\n\n/**\n * Get the relative property path of the field.\n *\n * Example:\n * binding context path  : '/Employee(1)'.\n * source path           : '/Employee/Name'.\n * relative property path: 'Name'.\n * @param fieldBindingContext Field binding context\n * @param sourcepath Property Path of the Field\n * @returns Relative property path.\n */\nfunction _getRelativePropertyPath(fieldBindingContext: Context, sourcepath: string): string {\n\tconst metaPath = ModelHelper.getMetaPathForContext(fieldBindingContext);\n\treturn sourcepath.replace(`${metaPath}/`, \"\");\n}\n\n/**\n * Sets the value state for the field in the table for which the binding context is not updated with the context data.\n *\n * In a few scenarios where the field is inside the table, the value state formatter is called for value update with the context without context data(context.getObject() is undefined).\n * NOTE: This solution needs to be checked with model if there is a better approach than using the table listbinding's change event.\n * @param this Field\n * @param recommendationValue\n * @param recommendationDescription\n * @param fieldBindingContext Field's binding context\n * @param all_recommendations Data fetched from recommendation model\n * @param sourcepath Property Path of the Field\n * @param recommendationsText Value state text when the recommendations are shown\n */\nfunction _setValueStateForFieldWithNoDataContext(\n\tthis: Field,\n\trecommendationValue: string,\n\trecommendationDescription: string,\n\tfieldBindingContext: Context,\n\tall_recommendations: InCompletenessInfoType | RecommendationInfo | undefined,\n\tsourcepath: string,\n\trecommendationsText: string\n): void {\n\tconst fnSetValueState = (event: UI5Event<{}, ODataListBinding>): void => {\n\t\tconst listBinding = event.getSource();\n\t\tconst listContexts = listBinding.getAllCurrentContexts();\n\t\tif (listContexts.includes(fieldBindingContext)) {\n\t\t\tif (fieldBindingContext.getObject()) {\n\t\t\t\tconst { valueState, valueStateText } = _getValueStateForRecommendationField(\n\t\t\t\t\trecommendationValue,\n\t\t\t\t\trecommendationDescription,\n\t\t\t\t\tall_recommendations,\n\t\t\t\t\tfieldBindingContext,\n\t\t\t\t\tsourcepath,\n\t\t\t\t\trecommendationsText,\n\t\t\t\t\tthis\n\t\t\t\t);\n\t\t\t\tthis.setValueStateText(valueStateText);\n\t\t\t\tthis.setValueState(valueState);\n\t\t\t}\n\t\t\tlistBinding.detachChange(fnSetValueState);\n\t\t}\n\t};\n\n\tfieldBindingContext.getBinding().attachChange(fnSetValueState);\n}\n\n/**\n * Get the value state when recommendations are applicable.\n * @param recommendationValue\n * @param recommendationDescription\n * @param all_recommendations Data fetched from the recommendation model\n * @param fieldBindingContext Field's binding context\n * @param sourcepath Property Path of the Field\n * @param recommendationsText Value state text in case the recommendations are shown\n * @param field Field\n * @returns Value state information including the value state and the value state text.\n */\nfunction _getValueStateForRecommendationField(\n\trecommendationValue: string,\n\trecommendationDescription: string,\n\tall_recommendations: InCompletenessInfoType | RecommendationInfo | undefined,\n\tfieldBindingContext: Context,\n\tsourcepath: string,\n\trecommendationsText: string,\n\tfield: Field\n): { valueState: ValueState; valueStateText: string } {\n\t// If no values are available for the field with present context we reset value state.\n\tlet valueState = ValueState.None,\n\t\tvalueStateText = \"\";\n\n\tif (recommendationValue || recommendationDescription) {\n\t\tvalueStateText = recommendationsText;\n\t\tvalueState = ValueState.Information;\n\t} else if (all_recommendations) {\n\t\tconst relativePropertyPath = _getRelativePropertyPath(fieldBindingContext, sourcepath);\n\t\tconst values = additionalValueHelper.getRelevantRecommendations(\n\t\t\tall_recommendations as InCompletenessInfoType,\n\t\t\tfieldBindingContext,\n\t\t\tsourcepath,\n\t\t\trelativePropertyPath\n\t\t);\n\t\tlet relevantRecommendations;\n\t\tif (all_recommendations?.version === 2) {\n\t\t\trelevantRecommendations = additionalValueHelper.getAdditionalValueFromPropertyPath(\n\t\t\t\trelativePropertyPath,\n\t\t\t\tfieldBindingContext,\n\t\t\t\tall_recommendations\n\t\t\t) as StandardRecommendationDataType;\n\t\t}\n\n\t\tif (\n\t\t\t(all_recommendations?.version === 2 && (relevantRecommendations?.value || relevantRecommendations?.text)) ||\n\t\t\t(!all_recommendations?.version && values?.length)\n\t\t) {\n\t\t\tvalueStateText = recommendationsText;\n\t\t\tvalueState = ValueState.Information;\n\t\t}\n\t}\n\n\tif (valueState === ValueState.Information) {\n\t\tconst view = CommonUtils.getTargetView(field);\n\t\tview.getController().recommendations.increaseTelemetryDataCount(\"numberofTimesFormatterCalled\");\n\t}\n\n\treturn { valueState, valueStateText };\n}\n\n/**\n * Format the value state of the field based on the present value state and the available recommendations.\n * @param this Field\n * @param recommendationValue Data fetched from recommendation model\n * @param recommendationDescription\n * @param all_recommendations\n * @param isEditable Page is in edit mode\n * @param sourcepath Property Path of the Field\n * @param fieldValue Present field value\n * @param fieldTextValue\n * @returns Field value state\n */\nfunction formatValueState(\n\tthis: Field,\n\trecommendationValue: string,\n\trecommendationDescription: string,\n\tall_recommendations: InCompletenessInfoType | RecommendationInfo | undefined,\n\tisEditable: boolean,\n\tsourcepath?: string,\n\tfieldValue?: string,\n\tfieldTextValue?: BindingToolkitExpression<string> | string\n): ValueState {\n\t// We reset value state when:\n\t// 1. No context is bound to the field.\n\t// 2. isEditable is false\n\tconst fieldBindingContext = this.getBindingContext() as Context | undefined;\n\tif (!fieldBindingContext || !isEditable) {\n\t\treturn ValueState.None;\n\t}\n\tfieldTextValue = fieldTextValue === \"undefined\" ? undefined : fieldTextValue;\n\t// We don't change the present value state when:\n\t// 1. Source path is not available.\n\t// 2. Field context is transient.\n\tconst presentValueState = this.getValueState() as ValueState;\n\tconst isTransient = fieldBindingContext.isTransient?.();\n\tif (!sourcepath || isTransient) {\n\t\treturn presentValueState;\n\t}\n\n\t// We reset value state when recommendations are not available and value state represents recommendations.\n\tconst recommendationsAvailable =\n\t\trecommendationValue || recommendationDescription || (!!all_recommendations && Object.keys(all_recommendations).length > 0);\n\tconst recommendationsText = Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"RECOMMENDATIONS_DATA_INFO\");\n\tconst presentValueStateText = this.getValueStateText();\n\tconst presentVSIsRecommendations = presentValueState === ValueState.Information && presentValueStateText === recommendationsText;\n\t//If field value is present or recommendations are not available but presentState is Info then we change it to None\n\tif (presentVSIsRecommendations && (!recommendationsAvailable || fieldValue || fieldTextValue)) {\n\t\treturn ValueState.None;\n\t}\n\n\t// Recommendations shall be applicable if they are available and the present value state:\n\t// 1. Is None\n\t// 2. Already represents recomendations.\n\tconst recommendationsStateApplicable = recommendationsAvailable && (presentValueState == ValueState.None || presentVSIsRecommendations);\n\tif (!fieldValue && !fieldTextValue && recommendationsStateApplicable) {\n\t\tif (\n\t\t\t!fieldBindingContext.getObject() &&\n\t\t\tfieldBindingContext.getBinding()?.isA?.<ODataListBinding>(\"sap.ui.model.odata.v4.ODataListBinding\")\n\t\t) {\n\t\t\t// No context data avalilable yet and parent binding is listbinding (Field in Table scenario)\n\t\t\t_setValueStateForFieldWithNoDataContext.call(\n\t\t\t\tthis,\n\t\t\t\trecommendationValue,\n\t\t\t\trecommendationDescription,\n\t\t\t\tfieldBindingContext,\n\t\t\t\tall_recommendations,\n\t\t\t\tsourcepath,\n\t\t\t\trecommendationsText\n\t\t\t);\n\t\t} else {\n\t\t\tconst { valueState, valueStateText } = _getValueStateForRecommendationField(\n\t\t\t\trecommendationValue,\n\t\t\t\trecommendationDescription,\n\t\t\t\tall_recommendations,\n\t\t\t\tfieldBindingContext,\n\t\t\t\tsourcepath,\n\t\t\t\trecommendationsText,\n\t\t\t\tthis\n\t\t\t);\n\t\t\tthis.setValueStateText(valueStateText);\n\t\t\treturn valueState;\n\t\t}\n\t}\n\n\treturn presentValueState;\n}\nformatValueState.__functionName = \"sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#formatValueState\";\n\nfunction _getPlaceholderText(relevantRecommendations?: StandardRecommendationDataType, displayMode?: string): string | undefined {\n\tlet placeholder: string | undefined;\n\tconst value = relevantRecommendations?.value;\n\tconst text = relevantRecommendations?.text;\n\tswitch (displayMode) {\n\t\t//set up the placeholder according to text arrangement\n\t\tcase \"Value\":\n\t\t\tplaceholder = valueFormatters.formatWithBrackets(value as string);\n\t\t\tbreak;\n\t\tcase \"Description\":\n\t\t\tplaceholder = valueFormatters.formatWithBrackets(text as string);\n\t\t\tbreak;\n\t\tcase \"DescriptionValue\":\n\t\t\tplaceholder = valueFormatters.formatWithBrackets(text as string, value as string);\n\t\t\tbreak;\n\t\tcase \"ValueDescription\":\n\t\t\tplaceholder = valueFormatters.formatWithBrackets(value as string, text as string);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tplaceholder = valueFormatters.formatWithBrackets(text as string, value as string);\n\t}\n\treturn placeholder;\n}\n\nfunction formatPlaceholder(\n\tthis: Field,\n\trecommendationValue: string,\n\trecommendationDescription: string,\n\tall_recommendations: RecommendationInfo,\n\tcurrentPageContext: Context,\n\tcurrentBoundMessageType?: MessageType | null,\n\teditStylePlaceholder?: string,\n\tdisplayMode?: string\n): string | undefined {\n\tlet placeholderData: string | number | undefined = this.getPlaceholder();\n\teditStylePlaceholder = editStylePlaceholder === \"undefined\" ? undefined : editStylePlaceholder;\n\tif (currentBoundMessageType) {\n\t\treturn editStylePlaceholder;\n\t}\n\tif (recommendationValue) {\n\t\tplaceholderData = _getPlaceholderText({ value: recommendationValue, text: recommendationDescription }, displayMode);\n\t} else if (all_recommendations && Object.keys(all_recommendations).length && all_recommendations.version === 2) {\n\t\tconst bindingContext = this.getBindingContext() || currentPageContext;\n\t\tconst bindingPath = this.getBinding(\"value\")?.getPath();\n\t\tif (bindingContext && bindingPath) {\n\t\t\t//get the recommendations based on property path and binding context passed\n\t\t\tconst relevantRecommendations = additionalValueHelper.getAdditionalValueFromPropertyPath(\n\t\t\t\tbindingPath,\n\t\t\t\tbindingContext,\n\t\t\t\tall_recommendations\n\t\t\t) as StandardRecommendationDataType;\n\t\t\t//if we get recommendations then push the values\n\t\t\tplaceholderData = _getPlaceholderText(relevantRecommendations, displayMode);\n\t\t}\n\t} else {\n\t\tplaceholderData = undefined;\n\t}\n\tif (editStylePlaceholder && !placeholderData) {\n\t\tplaceholderData = editStylePlaceholder;\n\t}\n\treturn placeholderData;\n}\nformatPlaceholder.__functionName = \"sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#formatPlaceholder\";\n\n// See https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters for more detail on this weird syntax\n/**\n * Collection of AdditionalValue formatters.\n * @param this The context\n * @param sName The inner function name\n * @param oArgs The inner function parameters\n * @returns The value from the inner function\n */\nconst additionalValueFormatter = function (this: object, sName: string, ...oArgs: unknown[]): unknown {\n\tif (additionalValueFormatter.hasOwnProperty(sName)) {\n\t\treturn (additionalValueFormatter as unknown as Record<string, Function>)[sName].apply(this, oArgs);\n\t} else {\n\t\treturn \"\";\n\t}\n};\n\nadditionalValueFormatter.getGrowing = getGrowing;\nadditionalValueFormatter.formatValueState = formatValueState;\nadditionalValueFormatter.formatPlaceholder = formatPlaceholder;\n\nObjectPath.set(\"sap.fe.macros.internal.valuehelp.AdditionalValueFormatter\", additionalValueFormatter);\n\nexport default additionalValueFormatter;\n"],"mappings":"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","ignoreList":[]}