{"version":3,"file":"DataPointTemplating.js","names":["typesSupportingNumberOfFractionalDigits","getDataPointTargetExpression","oDataModelPath","relativeLocation","TargetValue","getExpressionFromAnnotation","unresolvableExpression","oResourceModel","Library","getResourceBundleFor","buildExpressionForProgressIndicatorDisplayValue","oPropertyDataModelObjectPath","fieldValue","targetObject","Value","getRelativePaths","fieldValueExpression","targetExpression","isProperty","$target","unit","annotations","Measures","Unit","ISOCurrency","getText","compileExpression","hasStaticPercentUnit","unitBindingExpression","formatWithTypeInformation","isCurrency","requestCustomUnits","pathInModel","targetType","mode","formatResult","valueFormatters","formatProgressIndicatorText","undefined","_exports","buildRatingIndicatorSubtitleExpression","oContext","mSampleSize","formatRatingIndicatorSubTitle","AnnotationHelper","value","context","iSampleSizeValue","sSubTitleLabel","String","getHeaderRatingIndicatorText","oDataPoint","result","SampleSize","Description","sModelValue","requiresIContext","buildExpressionForDescription","Common","Text","oTextExpression","isPathInModelExpression","parameters","$$noPatch","getFloatFormat","outExpression","numberOfFractionalDigits","formatOptions","Object","assign","preserveDecimals","maxFractionDigits","getValueFormatted","oPropertyDataModelPath","sPropertyType","sNumberOfFractionalDigits","path","includes","oPropertyDefinition","type","EDM_TYPE_MAPPING","buildFieldBindingExpression","dataPointFormatOptions","bHideMeasure","oDataPointValue","propertyType","ValueFormat","NumberOfFractionalDigits","enhanceDataModelPath","oDescription","oFormattedValue","sDisplayMode","displayMode","getDisplayMode","oBindingExpression","formatWithBrackets","Timezone","getBindingWithTimezone","IsTimezone","getBindingForTimezone","UI","DateTimeStyle","dateTimePattern","getBindingForDateFormat","_computeBindingWithUnitOrCurrency","measureDisplayMode","showOnlyUnitDecimals","propertyDataModelObjectPath","formattedValue","hideMeasure","getBindingWithUnitOrCurrency","showMeasure","buildExpressionForProgressIndicatorPercentValue","computePercentage"],"sources":["./DataPointTemplating.ts"],"sourcesContent":["import type { PathAnnotationExpression, PrimitiveType, Property } from \"@sap-ux/vocabularies-types\";\nimport type { DataPointType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression, PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tEDM_TYPE_MAPPING,\n\tcompileExpression,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tisPathInModelExpression,\n\tpathInModel,\n\tunresolvableExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasStaticPercentUnit } from \"sap/fe/core/templating/PropertyHelper\";\nimport type { DateTimeStyle } from \"sap/fe/core/templating/UIFormatters\";\nimport {\n\tgetBindingForDateFormat,\n\tgetBindingForTimezone,\n\tgetBindingWithTimezone,\n\tgetBindingWithUnitOrCurrency,\n\tgetDisplayMode\n} from \"sap/fe/core/templating/UIFormatters\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Context from \"sap/ui/model/Context\";\nimport AnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\n\nconst typesSupportingNumberOfFractionalDigits = [\"Edm.Single\", \"Edm.Double\", \"Edm.Decimal\"];\n\nexport type DataPointFormatOptions = Partial<{\n\tmeasureDisplayMode: string;\n\tdisplayMode: string;\n\tdateTimeStyle: DateTimeStyle;\n\tdateTimePattern: string;\n\tshowOnlyUnitDecimals: boolean;\n}>;\n\n/**\n * Gets the target value of a progress indicator.\n * A progress indicator can have a static target, a percentage, or another property.\n * @param oDataModelPath The DataModelObjectPath\n * @param relativeLocation The relative location, to take into account the navigation properties\n * @returns The expression binding of the target value\n */\nconst getDataPointTargetExpression = (\n\toDataModelPath: DataPointType | undefined,\n\trelativeLocation: string[]\n): BindingToolkitExpression<string> => {\n\treturn oDataModelPath?.TargetValue ? getExpressionFromAnnotation(oDataModelPath.TargetValue, relativeLocation) : unresolvableExpression;\n};\n\nconst oResourceModel = Library.getResourceBundleFor(\"sap.fe.macros\")!;\n\n/**\n * This gets the binding expression for the value of the progress indicator.\n * @param oPropertyDataModelObjectPath The DataModelObjectPath\n * @returns The binding expression for the progress indicator value.\n */\nexport const buildExpressionForProgressIndicatorDisplayValue = (\n\toPropertyDataModelObjectPath: DataModelObjectPath<DataPointType>\n): CompiledBindingToolkitExpression => {\n\tconst fieldValue = oPropertyDataModelObjectPath?.targetObject?.Value || \"\";\n\tconst relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);\n\tconst fieldValueExpression: BindingToolkitExpression<PrimitiveType> = getExpressionFromAnnotation(fieldValue, relativeLocation);\n\tconst targetExpression: BindingToolkitExpression<string> = getDataPointTargetExpression(\n\t\toPropertyDataModelObjectPath.targetObject,\n\t\trelativeLocation\n\t);\n\n\tif (fieldValueExpression && targetExpression) {\n\t\tlet targetObject = oPropertyDataModelObjectPath.targetObject?.Value;\n\t\tif (!isProperty(targetObject)) {\n\t\t\ttargetObject = targetObject.$target;\n\t\t}\n\t\tconst unit = targetObject.annotations?.Measures?.Unit || targetObject.annotations?.Measures?.ISOCurrency;\n\n\t\tif (!unit) {\n\t\t\treturn oResourceModel.getText(\"T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM\", [\n\t\t\t\tcompileExpression(fieldValueExpression),\n\t\t\t\tcompileExpression(targetExpression)\n\t\t\t]);\n\t\t}\n\t\t// If the unit isn't a path, we check for a % sign as it is a special case.\n\t\tif (hasStaticPercentUnit(fieldValue?.$target)) {\n\t\t\treturn `${compileExpression(fieldValueExpression)} %`;\n\t\t}\n\n\t\tconst unitBindingExpression: BindingToolkitExpression<string> = unit.$target\n\t\t\t? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation))\n\t\t\t: getExpressionFromAnnotation(unit, relativeLocation);\n\n\t\tconst isCurrency = targetObject.annotations?.Measures?.ISOCurrency ? true : false;\n\t\tlet requestCustomUnits;\n\t\tif (isCurrency) {\n\t\t\trequestCustomUnits = pathInModel(\"/##@@requestCurrencyCodes\");\n\t\t} else {\n\t\t\trequestCustomUnits = pathInModel(\"/##@@requestUnitsOfMeasure\");\n\t\t}\n\t\trequestCustomUnits.targetType = \"any\";\n\t\trequestCustomUnits.mode = \"OneTime\";\n\n\t\treturn compileExpression(\n\t\t\tformatResult(\n\t\t\t\t[fieldValueExpression, targetExpression, unitBindingExpression, isCurrency, requestCustomUnits],\n\t\t\t\tvalueFormatters.formatProgressIndicatorText\n\t\t\t)\n\t\t);\n\t}\n\treturn undefined;\n};\n\nconst buildRatingIndicatorSubtitleExpression = (oContext: Context, mSampleSize: unknown): string | undefined => {\n\tif (mSampleSize) {\n\t\treturn formatRatingIndicatorSubTitle(AnnotationHelper.value(mSampleSize, { context: oContext }) as unknown as number);\n\t}\n};\n// returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')\nconst formatRatingIndicatorSubTitle = (iSampleSizeValue: number): string | undefined => {\n\tif (iSampleSizeValue) {\n\t\tconst sSubTitleLabel =\n\t\t\tiSampleSizeValue > 1\n\t\t\t\t? oResourceModel.getText(\"T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL_PLURAL\")\n\t\t\t\t: oResourceModel.getText(\"T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL\");\n\t\treturn oResourceModel.getText(\"T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE\", [String(iSampleSizeValue), sSubTitleLabel]);\n\t}\n};\n\n/**\n * This function is used to get the header text of rating indicator.\n * @param oContext Context of interface\n * @param oDataPoint Data point object\n * @returns Expression binding for rating indicator text\n */\nexport const getHeaderRatingIndicatorText = (oContext: Context, oDataPoint: DataPointType | undefined): string | undefined => {\n\tlet result: string | undefined;\n\tif (oDataPoint && oDataPoint.SampleSize) {\n\t\tresult = buildRatingIndicatorSubtitleExpression(oContext, oDataPoint.SampleSize);\n\t} else if (oDataPoint && oDataPoint.Description) {\n\t\tconst sModelValue = AnnotationHelper.value(oDataPoint.Description, { context: oContext });\n\t\tresult = \"${path:\" + sModelValue + \"}\";\n\t}\n\treturn result;\n};\ngetHeaderRatingIndicatorText.requiresIContext = true;\n\nconst buildExpressionForDescription = (fieldValue: DataModelObjectPath<Property>): BindingToolkitExpression<string> | undefined => {\n\tconst relativeLocation = getRelativePaths(fieldValue);\n\tif (fieldValue?.targetObject?.annotations?.Common?.Text) {\n\t\tconst oTextExpression = getExpressionFromAnnotation(fieldValue?.targetObject.annotations?.Common?.Text, relativeLocation);\n\t\tif (isPathInModelExpression(oTextExpression)) {\n\t\t\toTextExpression.parameters = { $$noPatch: true };\n\t\t}\n\t\treturn oTextExpression;\n\t}\n\treturn undefined;\n};\n\nconst getFloatFormat = (\n\toutExpression: PathInModelExpression<string>,\n\tnumberOfFractionalDigits: Number | undefined\n): BindingToolkitExpression<string> => {\n\t// numberOfFractionalDigits is only defined in getValueFormatted when NumberOfFractionalDigits is defined.\n\t// In that case, we need to instance the preserveDecimals parameter because of a change MDC side\n\tif (numberOfFractionalDigits) {\n\t\tif (!outExpression.formatOptions) {\n\t\t\toutExpression.formatOptions = {};\n\t\t}\n\t\toutExpression.formatOptions = Object.assign(outExpression.formatOptions, {\n\t\t\tpreserveDecimals: false,\n\t\t\tmaxFractionDigits: numberOfFractionalDigits\n\t\t});\n\t}\n\treturn outExpression;\n};\n\nexport const getValueFormatted = (\n\toPropertyDataModelPath: DataModelObjectPath<Property> | undefined,\n\tfieldValue: PathAnnotationExpression<string> | undefined,\n\tsPropertyType: string,\n\tsNumberOfFractionalDigits: Number | undefined\n): BindingToolkitExpression<string> => {\n\tlet outExpression: BindingToolkitExpression<string>;\n\tconst relativeLocation = !fieldValue?.path?.includes(\"/\") ? getRelativePaths(oPropertyDataModelPath) : [];\n\toutExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);\n\tconst oPropertyDefinition = oPropertyDataModelPath?.targetObject;\n\tif (oPropertyDefinition && sPropertyType && isPathInModelExpression(outExpression)) {\n\t\tformatWithTypeInformation(oPropertyDefinition, outExpression);\n\t\toutExpression.type = EDM_TYPE_MAPPING[sPropertyType]?.type;\n\t\tif (typesSupportingNumberOfFractionalDigits.includes(sPropertyType)) {\n\t\t\t// for the listReport, the decimal/single/double fields are formatted by returning a string\n\t\t\t// for the facets of the OP, the decimal/single/double fields are formatted by returning a promise, so we manage all the cases\n\t\t\toutExpression = getFloatFormat(outExpression, sNumberOfFractionalDigits);\n\t\t}\n\t}\n\n\treturn outExpression;\n};\n\nexport const buildFieldBindingExpression = (\n\toDataModelPath: DataModelObjectPath<DataPointType>,\n\tdataPointFormatOptions: DataPointFormatOptions,\n\tbHideMeasure: boolean\n): CompiledBindingToolkitExpression => {\n\tconst oDataPoint = oDataModelPath.targetObject;\n\tconst oDataPointValue = oDataPoint?.Value || \"\";\n\tconst propertyType = oDataPointValue?.$target?.type;\n\tlet numberOfFractionalDigits;\n\n\tif (typesSupportingNumberOfFractionalDigits.includes(propertyType) && oDataPoint?.ValueFormat) {\n\t\tif (oDataPoint.ValueFormat.NumberOfFractionalDigits) {\n\t\t\tnumberOfFractionalDigits = oDataPoint.ValueFormat.NumberOfFractionalDigits;\n\t\t}\n\t}\n\tconst oPropertyDataModelObjectPath = enhanceDataModelPath<Property>(oDataModelPath, oDataPointValue.path);\n\tconst oDescription = oPropertyDataModelObjectPath ? buildExpressionForDescription(oPropertyDataModelObjectPath) : undefined;\n\tconst oFormattedValue = getValueFormatted(oPropertyDataModelObjectPath, oDataPointValue, propertyType, numberOfFractionalDigits);\n\tconst sDisplayMode = oDescription ? dataPointFormatOptions?.displayMode || getDisplayMode(oPropertyDataModelObjectPath) : \"Value\";\n\tlet oBindingExpression: BindingToolkitExpression<string> | undefined;\n\tswitch (sDisplayMode) {\n\t\tcase \"Description\":\n\t\t\toBindingExpression = oDescription;\n\t\t\tbreak;\n\t\tcase \"ValueDescription\":\n\t\t\toBindingExpression = formatResult([oFormattedValue, oDescription], valueFormatters.formatWithBrackets);\n\t\t\tbreak;\n\t\tcase \"DescriptionValue\":\n\t\t\toBindingExpression = formatResult([oDescription, oFormattedValue], valueFormatters.formatWithBrackets);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (\n\t\t\t\toPropertyDataModelObjectPath.targetObject?.annotations?.Common?.Timezone &&\n\t\t\t\toPropertyDataModelObjectPath.targetObject.type === \"Edm.DateTimeOffset\"\n\t\t\t) {\n\t\t\t\toBindingExpression = getBindingWithTimezone(oPropertyDataModelObjectPath, oFormattedValue);\n\t\t\t} else if (oPropertyDataModelObjectPath.targetObject?.annotations?.Common?.IsTimezone) {\n\t\t\t\toBindingExpression = getBindingForTimezone(oPropertyDataModelObjectPath, oFormattedValue);\n\t\t\t} else if (\n\t\t\t\toPropertyDataModelObjectPath.targetObject?.annotations?.UI?.DateTimeStyle ||\n\t\t\t\tdataPointFormatOptions?.dateTimePattern\n\t\t\t) {\n\t\t\t\toBindingExpression = getBindingForDateFormat(oPropertyDataModelObjectPath, oFormattedValue, dataPointFormatOptions);\n\t\t\t} else {\n\t\t\t\toBindingExpression = _computeBindingWithUnitOrCurrency(\n\t\t\t\t\toPropertyDataModelObjectPath,\n\t\t\t\t\toFormattedValue,\n\t\t\t\t\tbHideMeasure || dataPointFormatOptions?.measureDisplayMode === \"Hidden\",\n\t\t\t\t\t!!dataPointFormatOptions?.showOnlyUnitDecimals\n\t\t\t\t);\n\t\t\t}\n\t}\n\treturn compileExpression(oBindingExpression);\n};\n\nexport const _computeBindingWithUnitOrCurrency = (\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\tformattedValue: BindingToolkitExpression<string>,\n\thideMeasure: boolean,\n\tshowOnlyUnitDecimals: boolean\n): BindingToolkitExpression<string> => {\n\tif (\n\t\tpropertyDataModelObjectPath.targetObject?.annotations?.Measures?.Unit ||\n\t\tpropertyDataModelObjectPath.targetObject?.annotations?.Measures?.ISOCurrency\n\t) {\n\t\tif (hideMeasure && hasStaticPercentUnit(propertyDataModelObjectPath.targetObject)) {\n\t\t\treturn formattedValue;\n\t\t}\n\t\treturn getBindingWithUnitOrCurrency(\n\t\t\tpropertyDataModelObjectPath,\n\t\t\tformattedValue,\n\t\t\tundefined,\n\t\t\thideMeasure ? { showMeasure: false } : undefined,\n\t\t\ttrue,\n\t\t\tshowOnlyUnitDecimals\n\t\t);\n\t}\n\treturn formattedValue;\n};\n\n/**\n * Method to calculate the percentage value of Progress Indicator. Basic formula is Value/Target * 100.\n * @param oPropertyDataModelObjectPath\n * @returns The expression binding used to calculate the percentage value, which is shown in the progress indicator based on the formula given above.\n */\nexport const buildExpressionForProgressIndicatorPercentValue = (\n\toPropertyDataModelObjectPath: DataModelObjectPath<DataPointType>\n): string | undefined => {\n\tconst fieldValue = (oPropertyDataModelObjectPath?.targetObject?.Value as PathAnnotationExpression<PrimitiveType>) || \"\";\n\tconst relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);\n\tconst fieldValueExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);\n\tconst targetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject, relativeLocation);\n\n\tconst oPropertyDefinition = fieldValue.$target as Property;\n\tconst unit = oPropertyDefinition.annotations?.Measures?.Unit || oPropertyDefinition.annotations?.Measures?.ISOCurrency;\n\tif (unit) {\n\t\tconst unitBindingExpression = getExpressionFromAnnotation(unit, relativeLocation);\n\n\t\treturn compileExpression(\n\t\t\tformatResult([fieldValueExpression, targetExpression, unitBindingExpression], valueFormatters.computePercentage)\n\t\t);\n\t}\n\n\treturn compileExpression(formatResult([fieldValueExpression, targetExpression, \"\"], valueFormatters.computePercentage));\n};\n"],"mappings":"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","ignoreList":[]}