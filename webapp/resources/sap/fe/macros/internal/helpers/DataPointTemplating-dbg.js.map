{"version":3,"names":["typesSupportingNumberOfFractionalDigits","getDataPointTargetExpression","oDataModelPath","relativeLocation","TargetValue","getExpressionFromAnnotation","unresolvableExpression","oResourceModel","Library","getResourceBundleFor","buildExpressionForProgressIndicatorDisplayValue","oPropertyDataModelObjectPath","fieldValue","targetObject","Value","getRelativePaths","fieldValueExpression","targetExpression","isProperty","$target","unit","annotations","Measures","Unit","ISOCurrency","getText","compileExpression","hasStaticPercentUnit","unitBindingExpression","formatWithTypeInformation","isCurrency","requestCustomUnits","pathInModel","targetType","mode","formatResult","valueFormatters","formatProgressIndicatorText","undefined","_exports","buildRatingIndicatorSubtitleExpression","oContext","mSampleSize","formatRatingIndicatorSubTitle","AnnotationHelper","value","context","iSampleSizeValue","sSubTitleLabel","String","getHeaderRatingIndicatorText","oDataPoint","result","SampleSize","Description","sModelValue","requiresIContext","buildExpressionForDescription","Common","Text","oTextExpression","isPathInModelExpression","parameters","$$noPatch","getFloatFormat","outExpression","numberOfFractionalDigits","formatOptions","Object","assign","preserveDecimals","maxFractionDigits","getValueFormatted","oPropertyDataModelPath","sPropertyType","sNumberOfFractionalDigits","path","includes","oPropertyDefinition","type","EDM_TYPE_MAPPING","buildFieldBindingExpression","dataPointFormatOptions","bHideMeasure","oDataPointValue","propertyType","ValueFormat","NumberOfFractionalDigits","enhanceDataModelPath","oDescription","oFormattedValue","sDisplayMode","displayMode","getDisplayMode","oBindingExpression","formatWithBrackets","Timezone","getBindingWithTimezone","IsTimezone","getBindingForTimezone","UI","DateTimeStyle","dateTimePattern","getBindingForDateFormat","_computeBindingWithUnitOrCurrency","measureDisplayMode","showOnlyUnitDecimals","propertyDataModelObjectPath","formattedValue","hideMeasure","getBindingWithUnitOrCurrency","showMeasure","buildExpressionForProgressIndicatorPercentValue","computePercentage"],"sourceRoot":".","sources":["DataPointTemplating.ts"],"sourcesContent":["import type { PathAnnotationExpression, PrimitiveType, Property } from \"@sap-ux/vocabularies-types\";\nimport type { DataPointType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression, PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tEDM_TYPE_MAPPING,\n\tcompileExpression,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tisPathInModelExpression,\n\tpathInModel,\n\tunresolvableExpression\n} from \"sap/fe/base/BindingToolkit\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasStaticPercentUnit } from \"sap/fe/core/templating/PropertyHelper\";\nimport type { DateTimeStyle } from \"sap/fe/core/templating/UIFormatters\";\nimport {\n\tgetBindingForDateFormat,\n\tgetBindingForTimezone,\n\tgetBindingWithTimezone,\n\tgetBindingWithUnitOrCurrency,\n\tgetDisplayMode\n} from \"sap/fe/core/templating/UIFormatters\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Context from \"sap/ui/model/Context\";\nimport AnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\n\nconst typesSupportingNumberOfFractionalDigits = [\"Edm.Single\", \"Edm.Double\", \"Edm.Decimal\"];\n\nexport type DataPointFormatOptions = Partial<{\n\tmeasureDisplayMode: string;\n\tdisplayMode: string;\n\tdateTimeStyle: DateTimeStyle;\n\tdateTimePattern: string;\n\tshowOnlyUnitDecimals: boolean;\n}>;\n\n/**\n * Gets the target value of a progress indicator.\n * A progress indicator can have a static target, a percentage, or another property.\n * @param oDataModelPath The DataModelObjectPath\n * @param relativeLocation The relative location, to take into account the navigation properties\n * @returns The expression binding of the target value\n */\nconst getDataPointTargetExpression = (\n\toDataModelPath: DataPointType | undefined,\n\trelativeLocation: string[]\n): BindingToolkitExpression<string> => {\n\treturn oDataModelPath?.TargetValue ? getExpressionFromAnnotation(oDataModelPath.TargetValue, relativeLocation) : unresolvableExpression;\n};\n\nconst oResourceModel = Library.getResourceBundleFor(\"sap.fe.macros\")!;\n\n/**\n * This gets the binding expression for the value of the progress indicator.\n * @param oPropertyDataModelObjectPath The DataModelObjectPath\n * @returns The binding expression for the progress indicator value.\n */\nexport const buildExpressionForProgressIndicatorDisplayValue = (\n\toPropertyDataModelObjectPath: DataModelObjectPath<DataPointType>\n): CompiledBindingToolkitExpression => {\n\tconst fieldValue = oPropertyDataModelObjectPath?.targetObject?.Value || \"\";\n\tconst relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);\n\tconst fieldValueExpression: BindingToolkitExpression<PrimitiveType> = getExpressionFromAnnotation(fieldValue, relativeLocation);\n\tconst targetExpression: BindingToolkitExpression<string> = getDataPointTargetExpression(\n\t\toPropertyDataModelObjectPath.targetObject,\n\t\trelativeLocation\n\t);\n\n\tif (fieldValueExpression && targetExpression) {\n\t\tlet targetObject = oPropertyDataModelObjectPath.targetObject?.Value;\n\t\tif (!isProperty(targetObject)) {\n\t\t\ttargetObject = targetObject.$target;\n\t\t}\n\t\tconst unit = targetObject.annotations?.Measures?.Unit || targetObject.annotations?.Measures?.ISOCurrency;\n\n\t\tif (!unit) {\n\t\t\treturn oResourceModel.getText(\"T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM\", [\n\t\t\t\tcompileExpression(fieldValueExpression),\n\t\t\t\tcompileExpression(targetExpression)\n\t\t\t]);\n\t\t}\n\t\t// If the unit isn't a path, we check for a % sign as it is a special case.\n\t\tif (hasStaticPercentUnit(fieldValue?.$target)) {\n\t\t\treturn `${compileExpression(fieldValueExpression)} %`;\n\t\t}\n\n\t\tconst unitBindingExpression: BindingToolkitExpression<string> = unit.$target\n\t\t\t? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation))\n\t\t\t: getExpressionFromAnnotation(unit, relativeLocation);\n\n\t\tconst isCurrency = targetObject.annotations?.Measures?.ISOCurrency ? true : false;\n\t\tlet requestCustomUnits;\n\t\tif (isCurrency) {\n\t\t\trequestCustomUnits = pathInModel(\"/##@@requestCurrencyCodes\");\n\t\t} else {\n\t\t\trequestCustomUnits = pathInModel(\"/##@@requestUnitsOfMeasure\");\n\t\t}\n\t\trequestCustomUnits.targetType = \"any\";\n\t\trequestCustomUnits.mode = \"OneTime\";\n\n\t\treturn compileExpression(\n\t\t\tformatResult(\n\t\t\t\t[fieldValueExpression, targetExpression, unitBindingExpression, isCurrency, requestCustomUnits],\n\t\t\t\tvalueFormatters.formatProgressIndicatorText\n\t\t\t)\n\t\t);\n\t}\n\treturn undefined;\n};\n\nconst buildRatingIndicatorSubtitleExpression = (oContext: Context, mSampleSize: unknown): string | undefined => {\n\tif (mSampleSize) {\n\t\treturn formatRatingIndicatorSubTitle(AnnotationHelper.value(mSampleSize, { context: oContext }) as unknown as number);\n\t}\n};\n// returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')\nconst formatRatingIndicatorSubTitle = (iSampleSizeValue: number): string | undefined => {\n\tif (iSampleSizeValue) {\n\t\tconst sSubTitleLabel =\n\t\t\tiSampleSizeValue > 1\n\t\t\t\t? oResourceModel.getText(\"T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL_PLURAL\")\n\t\t\t\t: oResourceModel.getText(\"T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL\");\n\t\treturn oResourceModel.getText(\"T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE\", [String(iSampleSizeValue), sSubTitleLabel]);\n\t}\n};\n\n/**\n * This function is used to get the header text of rating indicator.\n * @param oContext Context of interface\n * @param oDataPoint Data point object\n * @returns Expression binding for rating indicator text\n */\nexport const getHeaderRatingIndicatorText = (oContext: Context, oDataPoint: DataPointType | undefined): string | undefined => {\n\tlet result: string | undefined;\n\tif (oDataPoint && oDataPoint.SampleSize) {\n\t\tresult = buildRatingIndicatorSubtitleExpression(oContext, oDataPoint.SampleSize);\n\t} else if (oDataPoint && oDataPoint.Description) {\n\t\tconst sModelValue = AnnotationHelper.value(oDataPoint.Description, { context: oContext });\n\t\tresult = \"${path:\" + sModelValue + \"}\";\n\t}\n\treturn result;\n};\ngetHeaderRatingIndicatorText.requiresIContext = true;\n\nconst buildExpressionForDescription = (fieldValue: DataModelObjectPath<Property>): BindingToolkitExpression<string> | undefined => {\n\tconst relativeLocation = getRelativePaths(fieldValue);\n\tif (fieldValue?.targetObject?.annotations?.Common?.Text) {\n\t\tconst oTextExpression = getExpressionFromAnnotation(fieldValue?.targetObject.annotations?.Common?.Text, relativeLocation);\n\t\tif (isPathInModelExpression(oTextExpression)) {\n\t\t\toTextExpression.parameters = { $$noPatch: true };\n\t\t}\n\t\treturn oTextExpression;\n\t}\n\treturn undefined;\n};\n\nconst getFloatFormat = (\n\toutExpression: PathInModelExpression<string>,\n\tnumberOfFractionalDigits: Number | undefined\n): BindingToolkitExpression<string> => {\n\t// numberOfFractionalDigits is only defined in getValueFormatted when NumberOfFractionalDigits is defined.\n\t// In that case, we need to instance the preserveDecimals parameter because of a change MDC side\n\tif (numberOfFractionalDigits) {\n\t\tif (!outExpression.formatOptions) {\n\t\t\toutExpression.formatOptions = {};\n\t\t}\n\t\toutExpression.formatOptions = Object.assign(outExpression.formatOptions, {\n\t\t\tpreserveDecimals: false,\n\t\t\tmaxFractionDigits: numberOfFractionalDigits\n\t\t});\n\t}\n\treturn outExpression;\n};\n\nexport const getValueFormatted = (\n\toPropertyDataModelPath: DataModelObjectPath<Property> | undefined,\n\tfieldValue: PathAnnotationExpression<string> | undefined,\n\tsPropertyType: string,\n\tsNumberOfFractionalDigits: Number | undefined\n): BindingToolkitExpression<string> => {\n\tlet outExpression: BindingToolkitExpression<string>;\n\tconst relativeLocation = !fieldValue?.path?.includes(\"/\") ? getRelativePaths(oPropertyDataModelPath) : [];\n\toutExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);\n\tconst oPropertyDefinition = oPropertyDataModelPath?.targetObject;\n\tif (oPropertyDefinition && sPropertyType && isPathInModelExpression(outExpression)) {\n\t\tformatWithTypeInformation(oPropertyDefinition, outExpression);\n\t\toutExpression.type = EDM_TYPE_MAPPING[sPropertyType]?.type;\n\t\tif (typesSupportingNumberOfFractionalDigits.includes(sPropertyType)) {\n\t\t\t// for the listReport, the decimal/single/double fields are formatted by returning a string\n\t\t\t// for the facets of the OP, the decimal/single/double fields are formatted by returning a promise, so we manage all the cases\n\t\t\toutExpression = getFloatFormat(outExpression, sNumberOfFractionalDigits);\n\t\t}\n\t}\n\n\treturn outExpression;\n};\n\nexport const buildFieldBindingExpression = (\n\toDataModelPath: DataModelObjectPath<DataPointType>,\n\tdataPointFormatOptions: DataPointFormatOptions,\n\tbHideMeasure: boolean\n): CompiledBindingToolkitExpression => {\n\tconst oDataPoint = oDataModelPath.targetObject;\n\tconst oDataPointValue = oDataPoint?.Value || \"\";\n\tconst propertyType = oDataPointValue?.$target?.type;\n\tlet numberOfFractionalDigits;\n\n\tif (typesSupportingNumberOfFractionalDigits.includes(propertyType) && oDataPoint?.ValueFormat) {\n\t\tif (oDataPoint.ValueFormat.NumberOfFractionalDigits) {\n\t\t\tnumberOfFractionalDigits = oDataPoint.ValueFormat.NumberOfFractionalDigits;\n\t\t}\n\t}\n\tconst oPropertyDataModelObjectPath = enhanceDataModelPath<Property>(oDataModelPath, oDataPointValue.path);\n\tconst oDescription = oPropertyDataModelObjectPath ? buildExpressionForDescription(oPropertyDataModelObjectPath) : undefined;\n\tconst oFormattedValue = getValueFormatted(oPropertyDataModelObjectPath, oDataPointValue, propertyType, numberOfFractionalDigits);\n\tconst sDisplayMode = oDescription ? dataPointFormatOptions?.displayMode || getDisplayMode(oPropertyDataModelObjectPath) : \"Value\";\n\tlet oBindingExpression: BindingToolkitExpression<string> | undefined;\n\tswitch (sDisplayMode) {\n\t\tcase \"Description\":\n\t\t\toBindingExpression = oDescription;\n\t\t\tbreak;\n\t\tcase \"ValueDescription\":\n\t\t\toBindingExpression = formatResult([oFormattedValue, oDescription], valueFormatters.formatWithBrackets);\n\t\t\tbreak;\n\t\tcase \"DescriptionValue\":\n\t\t\toBindingExpression = formatResult([oDescription, oFormattedValue], valueFormatters.formatWithBrackets);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (\n\t\t\t\toPropertyDataModelObjectPath.targetObject?.annotations?.Common?.Timezone &&\n\t\t\t\toPropertyDataModelObjectPath.targetObject.type === \"Edm.DateTimeOffset\"\n\t\t\t) {\n\t\t\t\toBindingExpression = getBindingWithTimezone(oPropertyDataModelObjectPath, oFormattedValue);\n\t\t\t} else if (oPropertyDataModelObjectPath.targetObject?.annotations?.Common?.IsTimezone) {\n\t\t\t\toBindingExpression = getBindingForTimezone(oPropertyDataModelObjectPath, oFormattedValue);\n\t\t\t} else if (\n\t\t\t\toPropertyDataModelObjectPath.targetObject?.annotations?.UI?.DateTimeStyle ||\n\t\t\t\tdataPointFormatOptions?.dateTimePattern\n\t\t\t) {\n\t\t\t\toBindingExpression = getBindingForDateFormat(oPropertyDataModelObjectPath, oFormattedValue, dataPointFormatOptions);\n\t\t\t} else {\n\t\t\t\toBindingExpression = _computeBindingWithUnitOrCurrency(\n\t\t\t\t\toPropertyDataModelObjectPath,\n\t\t\t\t\toFormattedValue,\n\t\t\t\t\tbHideMeasure || dataPointFormatOptions?.measureDisplayMode === \"Hidden\",\n\t\t\t\t\t!!dataPointFormatOptions?.showOnlyUnitDecimals\n\t\t\t\t);\n\t\t\t}\n\t}\n\treturn compileExpression(oBindingExpression);\n};\n\nexport const _computeBindingWithUnitOrCurrency = (\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\tformattedValue: BindingToolkitExpression<string>,\n\thideMeasure: boolean,\n\tshowOnlyUnitDecimals: boolean\n): BindingToolkitExpression<string> => {\n\tif (\n\t\tpropertyDataModelObjectPath.targetObject?.annotations?.Measures?.Unit ||\n\t\tpropertyDataModelObjectPath.targetObject?.annotations?.Measures?.ISOCurrency\n\t) {\n\t\tif (hideMeasure && hasStaticPercentUnit(propertyDataModelObjectPath.targetObject)) {\n\t\t\treturn formattedValue;\n\t\t}\n\t\treturn getBindingWithUnitOrCurrency(\n\t\t\tpropertyDataModelObjectPath,\n\t\t\tformattedValue,\n\t\t\tundefined,\n\t\t\thideMeasure ? { showMeasure: false } : undefined,\n\t\t\ttrue,\n\t\t\tshowOnlyUnitDecimals\n\t\t);\n\t}\n\treturn formattedValue;\n};\n\n/**\n * Method to calculate the percentage value of Progress Indicator. Basic formula is Value/Target * 100.\n * @param oPropertyDataModelObjectPath\n * @returns The expression binding used to calculate the percentage value, which is shown in the progress indicator based on the formula given above.\n */\nexport const buildExpressionForProgressIndicatorPercentValue = (\n\toPropertyDataModelObjectPath: DataModelObjectPath<DataPointType>\n): string | undefined => {\n\tconst fieldValue = (oPropertyDataModelObjectPath?.targetObject?.Value as PathAnnotationExpression<PrimitiveType>) || \"\";\n\tconst relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);\n\tconst fieldValueExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);\n\tconst targetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject, relativeLocation);\n\n\tconst oPropertyDefinition = fieldValue.$target as Property;\n\tconst unit = oPropertyDefinition.annotations?.Measures?.Unit || oPropertyDefinition.annotations?.Measures?.ISOCurrency;\n\tif (unit) {\n\t\tconst unitBindingExpression = getExpressionFromAnnotation(unit, relativeLocation);\n\n\t\treturn compileExpression(\n\t\t\tformatResult([fieldValueExpression, targetExpression, unitBindingExpression], valueFormatters.computePercentage)\n\t\t);\n\t}\n\n\treturn compileExpression(formatResult([fieldValueExpression, targetExpression, \"\"], valueFormatters.computePercentage));\n};\n"],"mappings":"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","ignoreList":[],"file":"DataPointTemplating-dbg.js"}