{"version":3,"file":"DisplayStyle.js","names":["DisplayStyle","getPrecisionForCurrency","field","scale","property","precision","Math","min","getCurrencyOrUnitControl","currencyOrUnit","visibleExpression","_jsx","Link","text","press","eventHandlers","displayAggregationDetails","visible","reactiveAreaMode","formatOptions","children","dependents","clone","getNumberWithUnitOrCurrencyAlignedTemplate","relativePropertyPath","getContextRelativeTargetObjectPath","dataModelPath","overallVisible","not","equal","pathInModel","undefined","currency","NumberWithUnitOrCurrency","number","valueAsStringBindingExpression","unitOrCurrency","unitBindingExpression","isAnalytics","ConditionalWrapper","displayVisible","condition","hasValidAnalyticalCurrencyOrUnit","contentTrue","contentFalse","this","getAvatarTemplate","avatarId","_flexId","idPrefix","generate","avatarVisible","FieldTemplating","getVisibleExpression","avatarSrc","getValueBinding","avatarDisplayShape","getAvatarShape","FormElementWrapper","Avatar","id","src","displaySize","class","imageFitType","displayShape","getButtonTemplate","icon","showIconUrl","convertedMetaPath","IconUrl","Label","tooltip","buttonPress","buttonIsBound","buttonOperationAvailable","buttonOperationAvailableFormatted","navigationAvailable","$Type","onDataFieldActionButton","ActionTarget","isBound","annotations","Core","OperationAvailable","actionTarget","bindingParamName","parameters","name","compileExpression","getExpressionFromAnnotation","path","startsWith","replace","onDataFieldWithIBN","NavigationAvailable","String","ignoreNavigationAvailable","button","Button","enabled","FieldHelper","isDataFieldActionButtonVisible","isDataFieldActionButtonEnabled","isAnalyticalAggregatedRow","and","resolveBindingString","UI","isNodeLevelNavigable","type","buildExpressionForCriticalityButtonType","isActionAIOperation","aiIcon","getContactTemplate","contactMetaPath","metaPath","getModel","createBindingContext","contactVisible","Contact","ariaLabelledBy","getPath","contextPath","showEmptyIndicator","getDataPointInnerPart","withConditionalWrapper","convertedDataField","MetaModelConverter","convertMetaModelContext","measureDisplayMode","DataPoint","value","DataPointFormatOptions","getDataPointTemplate","hasUnitOrCurrency","getExpandableText","ExpandableText","displayStyleId","overflowMode","textExpandBehaviorDisplay","maxCharacters","textMaxCharactersDisplay","emptyIndicatorMode","getFileTemplate","innerFilePart","fileStreamNotEmpty","fileRelativePropertyPath","fileFilenameExpression","fileUploadUrl","fileFilenamePath","ContentDisposition","Filename","fileMediaType","MediaType","fileIsImage","IsImageURL","IsImage","test","toString","fileAvatarSrc","fileAvatarDisplayShape","fileIconSrc","getPathForIconSource","fileLinkText","getFilenameExpr","fileLinkHref","getDownloadUrl","fileTextVisible","fileAcceptableMediaTypes","AcceptableMediaTypes","acceptedTypes","Array","from","map","join","fileMaximumSize","calculateMBfromByte","maxLength","avatar","customData","ImageCustomData","paramName","Icon","link","target","href","wrapping","Text","editMode","computedEditMode","FieldEditMode","Display","beforeDialogOpen","collaborationEnabled","handleOpenUploader","afterDialogOpen","handleCloseUploader","fileUploader","FileUploader","fileUploaderVisible","buttonOnly","iconOnly","multiple","style","sendXHR","useMultipart","sameFilenameAllowed","mimeType","typeMissmatch","handleTypeMissmatch","maximumFileSize","fileSizeExceed","handleFileSizeExceed","uploadOnChange","uploadComplete","handleUploadComplete","httpRequestMethod","isDynamicInstantiation","FileUploaderHttpRequestMethod","Put","change","uploadStream","afterDialogClose","uploadStart","deleteButton","removeStream","FileWrapper","uploadUrl","propertyPath","filename","mediaType","fieldGroupIds","validateFieldGroup","CustomData","dataSourcePath","getLinkTemplate","linkUrl","iconUrl","linkActived","linkTarget","computeTextWithWhiteSpace","accessibleRole","LinkAccessibleRole","onDataFieldWithNavigationPath","html5LinkTarget","HTML5","LinkTarget","linkBinding","Url","Communication","IsEmailAddress","IsPhoneNumber","linkIsEmailAddress","linkIsPhoneNumber","propertyValueBinding","mailBlockId","uid","Email","mail","ObjectStatus","openExternalLink","active","wrap","getForeignKeyForCustomData","relativePathToQuickViewEntity","QuickView","getRelativePathToQuickViewEntity","targetNavigationProperties","targetEntityType","navigationProperties","targetNavProp","find","navProp","refConstraint","referentialConstraint","key","length","targetProperty","keyToFetch","getForeignKeyValueExpression","foreignKeyRelativePath","expression","_type","ifElse","constant","getStandardLinkWithQuickViewTemplate","linkPressed","getMdcLinkForQuickView","getConditionalLinkWithQuickViewTemplate","TextLink","showAsLink","semanticObject","getConditionalWrapperForQuickViewTemplate","getLinkWithQuickViewTemplate","retrieveTextFromValueList","textFromValueList","getQuickViewCondition","getTextTemplate","renderWhitespace","customdata","displayMode","getPasswordTemplate","textBinding","getTextBinding","textExpression","isPathInModelExpression","formatResult","valueFormatters","formatPasswordText","getObjectIdentifier","titleActive","hasQuickView","identifier","ObjectIdentifier","title","identifierTitle","identifierText","titlePress","hasSituationsIndicator","_jsxs","HBox","alignItems","justifyContent","width","SituationsIndicator","situationsIndicatorPropertyPath","showErrorIndicator","showErrorObjectStatus","VBox","state","getObjectStatus","objectStatus","requiredHelper","dataModelObjectPath","getInvolvedDataModelObjects","enhancedValueDataModelPath","enhanceDataModelPath","targetObject","Value","criticalityIcon","buildExpressionForCriticalityIcon","buildExpressionForCriticalityColor","tooltipAnnotation","Common","QuickInfo","tooltipExpression","content","textAlign","isActive","pressAction","createContent","getLabelSemanticKey","emphasized","design","hasQuickview","addDraftIndicator","semanticKeyTemplate","fieldGroupDraftIndicatorPropertyPath","getMarginClass","compactSemanticKey","DraftIndicator","draftIndicatorType","ObjectMarkerVisibility","IconAndText","draftIndicatorVisible","dataModelPathExternalID","replaceWhitespace","quickViewType","dynamicSemanticObjects","listOfDynamicSemanticObjects","semanticObjectExpression","push","semanticObjectsPath","concat","hasSemanticObjects","getCheckBoxGroupItemTemplate","CheckBox","displayOnly","label","selected","valueBindingExpression","getTemplate","innerFieldContent","displayStyle"],"sources":["./DisplayStyle.tsx"],"sourcesContent":["import type { Action, PathAnnotationExpression, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldTypes,\n\tDataFieldWithUrl,\n\tDataPointType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport uid from \"sap/base/util/uid\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tisPathInModelExpression,\n\tnot,\n\tpathInModel,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport FormElementWrapper from \"sap/fe/core/controls/FormElementWrapper\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { aiIcon, isActionAIOperation } from \"sap/fe/core/converters/controls/Common/Action\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport {\n\tbuildExpressionForCriticalityButtonType,\n\tbuildExpressionForCriticalityColor,\n\tbuildExpressionForCriticalityIcon\n} from \"sap/fe/core/templating/CriticalityFormatters\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasValidAnalyticalCurrencyOrUnit } from \"sap/fe/core/templating/UIFormatters\";\nimport FieldHelper from \"sap/fe/macros/field/FieldHelper\";\nimport * as FieldTemplating from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport QuickView from \"sap/fe/macros/quickView/QuickView\";\nimport Avatar from \"sap/m/Avatar\";\nimport Button from \"sap/m/Button\";\nimport CheckBox from \"sap/m/CheckBox\";\nimport ExpandableText from \"sap/m/ExpandableText\";\nimport HBox from \"sap/m/HBox\";\nimport ImageCustomData from \"sap/m/ImageCustomData\";\nimport Label from \"sap/m/Label\";\nimport type { Link$PressEvent } from \"sap/m/Link\";\nimport Link from \"sap/m/Link\";\nimport ObjectIdentifier from \"sap/m/ObjectIdentifier\";\nimport ObjectStatus from \"sap/m/ObjectStatus\";\nimport Text from \"sap/m/Text\";\nimport VBox from \"sap/m/VBox\";\nimport { LinkAccessibleRole, ObjectMarkerVisibility } from \"sap/m/library\";\nimport type Event from \"sap/ui/base/Event\";\nimport type EventProvider from \"sap/ui/base/EventProvider\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { Control$ValidateFieldGroupEvent } from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport Icon from \"sap/ui/core/Icon\";\nimport type MdcLink from \"sap/ui/mdc/Link\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type {\n\tFileUploader$ChangeEvent,\n\tFileUploader$FileSizeExceedEvent,\n\tFileUploader$TypeMissmatchEvent,\n\tFileUploader$UploadCompleteEvent,\n\tFileUploader$UploadStartEvent\n} from \"sap/ui/unified/FileUploader\";\nimport FileUploader from \"sap/ui/unified/FileUploader\";\nimport FileUploaderHttpRequestMethod from \"sap/ui/unified/FileUploaderHttpRequestMethod\";\nimport Contact from \"../../contact/Contact\";\nimport Email from \"../../contact/Email\";\nimport ConditionalWrapper from \"../../controls/ConditionalWrapper\";\nimport FileWrapper from \"../../controls/FileWrapper\";\nimport NumberWithUnitOrCurrency from \"../../controls/NumberWithUnitOrCurrency\";\nimport TextLink from \"../../controls/TextLink\";\nimport DraftIndicator from \"../../draftIndicator/DraftIndicator\";\nimport SituationsIndicator from \"../../situations/SituationsIndicator\";\nimport DataPoint from \"../DataPoint\";\nimport DataPointFormatOptions from \"../DataPointFormatOptions\";\nimport type { DisplayStyle as DisplayStyleType } from \"./FieldStyles\";\n\nconst DisplayStyle = {\n\tgetPrecisionForCurrency(field: FieldBlockProperties): number {\n\t\tlet scale = field.property.scale ?? 5;\n\t\tif (typeof scale !== \"number\") {\n\t\t\t// Scale can be \"variable\" but it's not typed as such. In this case, Scale equals the precision\n\t\t\tscale = field.property.precision ?? 5;\n\t\t}\n\t\treturn Math.min(scale, 5);\n\t},\n\n\tgetCurrencyOrUnitControl(\n\t\tfield: FieldBlockProperties,\n\t\tcurrencyOrUnit: string | Control,\n\t\tvisibleExpression?: BindingToolkitExpression<boolean>\n\t): Control {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tcore:require=\"{FIELDRUNTIME: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_SHOW_DETAILS}\"\n\t\t\t\tpress={field.eventHandlers.displayAggregationDetails}\n\t\t\t\tvisible={visibleExpression}\n\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tdependents: (currencyOrUnit as Control)?.clone ? (currencyOrUnit as Control).clone() : currencyOrUnit\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the NumberWithUnitOrCurrencyAligned template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetNumberWithUnitOrCurrencyAlignedTemplate(field: FieldBlockProperties): string {\n\t\t// We don't display anything if the value is undefined\n\t\tconst relativePropertyPath = getContextRelativeTargetObjectPath(field.dataModelPath);\n\t\tconst overallVisible = not(equal(pathInModel(relativePropertyPath), undefined));\n\t\tconst currency = (\n\t\t\t<NumberWithUnitOrCurrency number={field.valueAsStringBindingExpression} unitOrCurrency={field.unitBindingExpression} />\n\t\t);\n\t\tif (field.formatOptions.isAnalytics) {\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper visible={field.displayVisible} condition={field.hasValidAnalyticalCurrencyOrUnit as unknown as boolean}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: currency,\n\t\t\t\t\t\tcontentFalse: this.getCurrencyOrUnitControl(field, currency, overallVisible)\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\treturn currency;\n\t\t}\n\t},\n\n\t/**\n\t * Generates the Avatar template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetAvatarTemplate(field: FieldBlockProperties): string {\n\t\tlet avatarId;\n\t\tif (field._flexId) {\n\t\t\tavatarId = field._flexId;\n\t\t} else if (field.idPrefix) {\n\t\t\tavatarId = generate([field.idPrefix, \"Field-content\"]);\n\t\t}\n\n\t\tconst avatarVisible = FieldTemplating.getVisibleExpression(field.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\tconst avatarSrc = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\tconst avatarDisplayShape = FieldTemplating.getAvatarShape(field.dataModelPath);\n\n\t\treturn (\n\t\t\t<FormElementWrapper visible={avatarVisible}>\n\t\t\t\t<Avatar\n\t\t\t\t\tid={avatarId}\n\t\t\t\t\tsrc={avatarSrc}\n\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"\n\t\t\t\t\timageFitType=\"Cover\"\n\t\t\t\t\tdisplayShape={avatarDisplayShape}\n\t\t\t\t/>\n\t\t\t</FormElementWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the button template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetButtonTemplate: (field: FieldBlockProperties): string => {\n\t\tlet icon = field.formatOptions?.showIconUrl ?? false ? (field.convertedMetaPath as DataFieldTypes).IconUrl : undefined;\n\t\tconst text = !(field.formatOptions?.showIconUrl ?? false) ? (field.convertedMetaPath as DataFieldTypes).Label : undefined;\n\t\tconst tooltip = field.formatOptions?.showIconUrl ?? false ? (field.convertedMetaPath as DataFieldTypes).Label : undefined;\n\n\t\tlet buttonPress;\n\t\tlet buttonIsBound;\n\t\tlet buttonOperationAvailable;\n\t\tlet buttonOperationAvailableFormatted;\n\t\tlet navigationAvailable;\n\n\t\tif (field.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\t\tbuttonPress = field.eventHandlers.onDataFieldActionButton;\n\n\t\t\tbuttonIsBound = field.convertedMetaPath.ActionTarget ? field.convertedMetaPath.ActionTarget.isBound : true;\n\t\t\tbuttonOperationAvailable = field.convertedMetaPath.ActionTarget\n\t\t\t\t? field.convertedMetaPath.ActionTarget.annotations?.Core?.OperationAvailable\n\t\t\t\t: \"false\";\n\t\t\tbuttonOperationAvailableFormatted = field.convertedMetaPath.ActionTarget ? undefined : \"false\";\n\n\t\t\tif (buttonOperationAvailable && buttonOperationAvailable !== \"false\") {\n\t\t\t\tconst actionTarget = field.convertedMetaPath.ActionTarget as Action;\n\t\t\t\tconst bindingParamName = actionTarget.parameters[0].name;\n\t\t\t\t//QUALMS, needs to be checked whether this makes sense at that place, might be good in a dedicated helper function\n\t\t\t\tbuttonOperationAvailableFormatted = compileExpression(\n\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\tbuttonOperationAvailable as PropertyAnnotationValue<boolean>,\n\t\t\t\t\t\t[],\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(path: string) => {\n\t\t\t\t\t\t\tif (path.startsWith(bindingParamName)) {\n\t\t\t\t\t\t\t\treturn path.replace(bindingParamName + \"/\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn path;\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (field.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) {\n\t\t\tbuttonPress = field.eventHandlers.onDataFieldWithIBN;\n\t\t\tnavigationAvailable = true;\n\t\t\tif (\n\t\t\t\tfield.convertedMetaPath?.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation &&\n\t\t\t\tfield.convertedMetaPath.NavigationAvailable !== undefined &&\n\t\t\t\tString(field.formatOptions.ignoreNavigationAvailable) !== \"true\"\n\t\t\t) {\n\t\t\t\tnavigationAvailable = compileExpression(getExpressionFromAnnotation(field.convertedMetaPath.NavigationAvailable));\n\t\t\t}\n\t\t}\n\n\t\tlet button = \"\";\n\t\tif (field.convertedMetaPath.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation) {\n\t\t\tbutton = (\n\t\t\t\t<Button\n\t\t\t\t\tvisible={field.visible}\n\t\t\t\t\ttext={text}\n\t\t\t\t\ticon={icon}\n\t\t\t\t\tenabled={navigationAvailable}\n\t\t\t\t\ttooltip={tooltip}\n\t\t\t\t\tpress={buttonPress as unknown as ((oEvent: Event<object, EventProvider>) => void) | undefined}\n\t\t\t\t/>\n\t\t\t);\n\t\t} else if (\n\t\t\tFieldHelper.isDataFieldActionButtonVisible(\n\t\t\t\tfield.convertedMetaPath,\n\t\t\t\tbuttonIsBound,\n\t\t\t\tbuttonOperationAvailable as boolean | undefined\n\t\t\t)\n\t\t) {\n\t\t\tlet enabled: string | CompiledBindingToolkitExpression = FieldHelper.isDataFieldActionButtonEnabled(\n\t\t\t\tfield.convertedMetaPath as DataFieldForAction,\n\t\t\t\tbuttonIsBound as unknown as boolean,\n\t\t\t\tbuttonOperationAvailable,\n\t\t\t\tbuttonOperationAvailableFormatted as string\n\t\t\t);\n\n\t\t\tif (field.formatOptions.isAnalyticalAggregatedRow) {\n\t\t\t\tenabled = compileExpression(and(resolveBindingString(enabled), UI.isNodeLevelNavigable));\n\t\t\t}\n\n\t\t\tconst type = buildExpressionForCriticalityButtonType(field.dataModelPath as DataModelObjectPath<DataPointType>);\n\t\t\ticon = icon ?? (isActionAIOperation(field.convertedMetaPath as DataFieldForAction) ? aiIcon : undefined);\n\n\t\t\tbutton = (\n\t\t\t\t<Button\n\t\t\t\t\tclass={field.class}\n\t\t\t\t\ttext={text}\n\t\t\t\t\ticon={icon}\n\t\t\t\t\ttooltip={tooltip}\n\t\t\t\t\tpress={buttonPress as unknown as ((oEvent: Event<object, EventProvider>) => void) | undefined}\n\t\t\t\t\tenabled={enabled}\n\t\t\t\t\tvisible={field.visible}\n\t\t\t\t\ttype={type}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t\treturn button;\n\t},\n\n\t/**\n\t * Generates the Contact template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetContactTemplate(field: FieldBlockProperties): string {\n\t\tconst contactMetaPath = field.metaPath.getModel().createBindingContext(\"Target/$AnnotationPath\", field.metaPath);\n\t\tconst contactVisible = FieldTemplating.getVisibleExpression(field.dataModelPath as DataModelObjectPath<DataPointType>);\n\n\t\treturn (\n\t\t\t<Contact\n\t\t\t\tidPrefix={field.idPrefix}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy}\n\t\t\t\tmetaPath={contactMetaPath.getPath()}\n\t\t\t\tcontextPath={field.contextPath.getPath()}\n\t\t\t\t_flexId={field._flexId}\n\t\t\t\tvisible={contactVisible}\n\t\t\t\tshowEmptyIndicator={field.formatOptions.showEmptyIndicator}\n\t\t\t/>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the innerpart of the data point to be used in getDataPointTemplate.\n\t * @param field Reference to the current field instance\n\t * @param withConditionalWrapper Boolean value to determine whether the DataPoint\n\t * \t\t\t\t\t  \t\t\tshall be generated for the conditional wrapper case\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetDataPointInnerPart(field: FieldBlockProperties, withConditionalWrapper: boolean): string {\n\t\tconst convertedDataField = MetaModelConverter.convertMetaModelContext(field.metaPath) as DataFieldAbstractTypes;\n\n\t\tconst metaPath =\n\t\t\tconvertedDataField.$Type === UIAnnotationTypes.DataFieldForAnnotation\n\t\t\t\t? field.metaPath.getModel().createBindingContext(\"Target/$AnnotationPath\", field.metaPath)\n\t\t\t\t: field.metaPath;\n\n\t\tconst formatOptions = {\n\t\t\tmeasureDisplayMode: field.formatOptions.measureDisplayMode,\n\t\t\tshowEmptyIndicator: field.formatOptions.showEmptyIndicator\n\t\t};\n\n\t\treturn (\n\t\t\t<DataPoint\n\t\t\t\tidPrefix={withConditionalWrapper ? undefined : field.idPrefix}\n\t\t\t\tvisible={(!withConditionalWrapper ? field.displayVisible : undefined) as unknown as string | undefined}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy ? field.ariaLabelledBy : undefined}\n\t\t\t\tmetaPath={metaPath.getPath()}\n\t\t\t\tcontextPath={field.contextPath?.getPath()}\n\t\t\t\tvalue={field.value}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tformatOptions: <DataPointFormatOptions {...formatOptions} />\n\t\t\t\t}}\n\t\t\t</DataPoint>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the DataPoint template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetDataPointTemplate(field: FieldBlockProperties): string {\n\t\tif ((field.formatOptions.isAnalytics ?? false) && (field.hasUnitOrCurrency ?? false)) {\n\t\t\treturn (\n\t\t\t\t<ConditionalWrapper visible={field.displayVisible} condition={field.hasValidAnalyticalCurrencyOrUnit as unknown as boolean}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: this.getDataPointInnerPart(field, true),\n\t\t\t\t\t\tcontentFalse: this.getCurrencyOrUnitControl(field, this.getDataPointInnerPart(field, true))\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.getDataPointInnerPart(field, false);\n\t\t}\n\t},\n\n\t/**\n\t * Generates the ExpandableText template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetExpandableText(field: FieldBlockProperties): string {\n\t\treturn (\n\t\t\t<ExpandableText\n\t\t\t\tid={field?.displayStyleId}\n\t\t\t\tvisible={field?.displayVisible}\n\t\t\t\ttext={field.text}\n\t\t\t\toverflowMode={field?.formatOptions?.textExpandBehaviorDisplay}\n\t\t\t\tmaxCharacters={field?.formatOptions?.textMaxCharactersDisplay}\n\t\t\t\temptyIndicatorMode={field?.emptyIndicatorMode}\n\t\t\t/>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the File template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetFileTemplate(field: FieldBlockProperties): string {\n\t\tlet innerFilePart;\n\n\t\tconst fileStreamNotEmpty = compileExpression(\n\t\t\tnot(equal(pathInModel(`${field.fileRelativePropertyPath}@odata.mediaContentType`), null))\n\t\t);\n\n\t\tconst fileFilenameExpression = field.fileFilenameExpression ? \"{ path: '\" + field.fileFilenameExpression + \"' }\" : \"\";\n\n\t\t// FileWrapper\n\t\tconst fileUploadUrl = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\tconst fileFilenamePath = (field.property.annotations.Core?.ContentDisposition?.Filename as PathAnnotationExpression<string>)?.path;\n\t\tconst fileMediaType =\n\t\t\tfield.property.annotations.Core?.MediaType &&\n\t\t\tcompileExpression(getExpressionFromAnnotation(field.property.annotations.Core?.MediaType));\n\n\t\t// template:if\n\t\tconst fileIsImage =\n\t\t\t!!field.property.annotations.UI?.IsImageURL ||\n\t\t\t!!field.property.annotations.UI?.IsImage ||\n\t\t\t/image\\//i.test(field.property.annotations.Core?.MediaType?.toString() ?? \"\");\n\n\t\t// Avatar\n\t\tconst fileAvatarSrc = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\tconst fileAvatarDisplayShape = FieldTemplating.getAvatarShape(field.dataModelPath);\n\n\t\t// Icon\n\t\tconst fileIconSrc = FieldHelper.getPathForIconSource(field.fileRelativePropertyPath);\n\n\t\t// Link\n\t\tconst fileLinkText = FieldHelper.getFilenameExpr(fileFilenameExpression, \"{sap.fe.i18n>M_FIELD_FILEUPLOADER_NOFILENAME_TEXT}\");\n\t\tconst fileLinkHref = FieldHelper.getDownloadUrl(fileUploadUrl ?? \"\");\n\n\t\t// Text\n\t\tconst fileTextVisible = compileExpression(equal(pathInModel(`${field.fileRelativePropertyPath}@odata.mediaContentType`), null));\n\n\t\tlet fileAcceptableMediaTypes;\n\t\t// FileUploader\n\t\tif (field.property.annotations.Core?.AcceptableMediaTypes) {\n\t\t\tconst acceptedTypes = Array.from(field.property.annotations.Core.AcceptableMediaTypes as unknown as string[]).map(\n\t\t\t\t(type) => `'${type}'`\n\t\t\t);\n\t\t\tfileAcceptableMediaTypes = `{=odata.collection([${acceptedTypes.join(\",\")}])}`; // This does not feel right, but follows the logic of AnnotationHelper#value\n\t\t}\n\t\tconst fileMaximumSize = FieldHelper.calculateMBfromByte(field.property.maxLength);\n\n\t\tif (fileIsImage) {\n\t\t\tinnerFilePart = {\n\t\t\t\tavatar: (\n\t\t\t\t\t<Avatar\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\tsrc={fileAvatarSrc}\n\t\t\t\t\t\tdisplaySize=\"S\"\n\t\t\t\t\t\tclass=\"sapUiSmallMarginEnd\"\n\t\t\t\t\t\timageFitType=\"Cover\"\n\t\t\t\t\t\tdisplayShape={fileAvatarDisplayShape}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tcustomData: <ImageCustomData paramName=\"xcache\" />\n\t\t\t\t\t\t}}\n\t\t\t\t\t</Avatar>\n\t\t\t\t)\n\t\t\t};\n\t\t} else {\n\t\t\tinnerFilePart = {\n\t\t\t\ticon: <Icon src={fileIconSrc} class=\"sapUiSmallMarginEnd\" visible={fileStreamNotEmpty} />,\n\t\t\t\tlink: (\n\t\t\t\t\t<Link\n\t\t\t\t\t\ttext={fileLinkText}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\thref={fileLinkHref}\n\t\t\t\t\t\tvisible={fileStreamNotEmpty}\n\t\t\t\t\t\twrapping=\"true\"\n\t\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t\ttext: <Text emptyIndicatorMode={field.emptyIndicatorMode} text=\"\" visible={fileTextVisible} />\n\t\t\t};\n\t\t}\n\n\t\tif ((field.editMode ?? field.computedEditMode) !== FieldEditMode.Display) {\n\t\t\tconst beforeDialogOpen = field.collaborationEnabled ? field.eventHandlers.handleOpenUploader : undefined;\n\t\t\tconst afterDialogOpen = field.collaborationEnabled ? field.eventHandlers.handleCloseUploader : undefined;\n\n\t\t\tinnerFilePart = {\n\t\t\t\t...innerFilePart,\n\t\t\t\tfileUploader: (\n\t\t\t\t\t<FileUploader\n\t\t\t\t\t\tname=\"FEV4FileUpload\"\n\t\t\t\t\t\tvisible={field.fileUploaderVisible}\n\t\t\t\t\t\tbuttonOnly=\"true\"\n\t\t\t\t\t\ticonOnly=\"true\"\n\t\t\t\t\t\tmultiple=\"false\"\n\t\t\t\t\t\ttooltip=\"{sap.fe.i18n>M_FIELD_FILEUPLOADER_UPLOAD_BUTTON_TOOLTIP}\"\n\t\t\t\t\t\ticon=\"sap-icon://upload\"\n\t\t\t\t\t\tstyle=\"Transparent\"\n\t\t\t\t\t\tsendXHR=\"true\"\n\t\t\t\t\t\tuseMultipart=\"false\"\n\t\t\t\t\t\tsameFilenameAllowed=\"true\"\n\t\t\t\t\t\tmimeType={fileAcceptableMediaTypes}\n\t\t\t\t\t\ttypeMissmatch={\n\t\t\t\t\t\t\tfield.eventHandlers.handleTypeMissmatch as unknown as (oEvent: FileUploader$TypeMissmatchEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmaximumFileSize={fileMaximumSize}\n\t\t\t\t\t\tfileSizeExceed={\n\t\t\t\t\t\t\tfield.eventHandlers.handleFileSizeExceed as unknown as (oEvent: FileUploader$FileSizeExceedEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuploadOnChange=\"false\"\n\t\t\t\t\t\tuploadComplete={\n\t\t\t\t\t\t\tfield.eventHandlers.handleUploadComplete as unknown as (oEvent: FileUploader$UploadCompleteEvent) => void\n\t\t\t\t\t\t}\n\t\t\t\t\t\thttpRequestMethod={field.isDynamicInstantiation ? FileUploaderHttpRequestMethod.Put : \"Put\"}\n\t\t\t\t\t\tchange={field.eventHandlers.uploadStream as unknown as (oEvent: FileUploader$ChangeEvent) => void}\n\t\t\t\t\t\tbeforeDialogOpen={beforeDialogOpen as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\tafterDialogClose={afterDialogOpen as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\tuploadStart={field.eventHandlers.handleOpenUploader as unknown as (oEvent: FileUploader$UploadStartEvent) => void}\n\t\t\t\t\t/>\n\t\t\t\t),\n\t\t\t\tdeleteButton: (\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticon=\"sap-icon://sys-cancel\"\n\t\t\t\t\t\ttype=\"Transparent\"\n\t\t\t\t\t\tpress={field.eventHandlers.removeStream as unknown as (oEvent: Event) => void}\n\t\t\t\t\t\ttooltip=\"{sap.fe.i18n>M_FIELD_FILEUPLOADER_DELETE_BUTTON_TOOLTIP}\"\n\t\t\t\t\t\tvisible={field.fileUploaderVisible}\n\t\t\t\t\t\tenabled={fileStreamNotEmpty}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t};\n\t\t}\n\n\t\treturn (\n\t\t\t<FileWrapper\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tvisible={field.visible}\n\t\t\t\tuploadUrl={fileUploadUrl}\n\t\t\t\tpropertyPath={field.fileRelativePropertyPath}\n\t\t\t\tfilename={fileFilenamePath}\n\t\t\t\tmediaType={fileMediaType}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} />,\n\t\t\t\t\tinnerFilePart\n\t\t\t\t}}\n\t\t\t</FileWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the Link template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLinkTemplate(field: FieldBlockProperties): string {\n\t\tlet linkUrl;\n\t\tlet iconUrl;\n\t\tlet linkActived;\n\t\ttype LinkTarget = \"_blank\" | \"_self\" | \"_top\" | \"_parent\";\n\t\tlet linkTarget: LinkTarget | undefined;\n\n\t\tswitch (field.convertedMetaPath.$Type as string) {\n\t\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={DisplayStyle.computeTextWithWhiteSpace(field)}\n\t\t\t\t\t\tpress={field.eventHandlers.onDataFieldWithIBN as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\tpress={field.eventHandlers.onDataFieldWithNavigationPath as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tenabled={field.formatOptions.isAnalyticalAggregatedRow ? UI.isNodeLevelNavigable : undefined}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\tpress={field.eventHandlers.onDataFieldActionButton as unknown as (oEvent: Link$PressEvent) => void}\n\t\t\t\t\t\tenabled={field.formatOptions.isAnalyticalAggregatedRow ? UI.isNodeLevelNavigable : undefined}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\t\tconst html5LinkTarget = field.property.annotations.HTML5?.LinkTarget;\n\t\t\t\tfield.text = DisplayStyle.computeTextWithWhiteSpace(field);\n\t\t\t\ticonUrl = (field.convertedMetaPath as DataFieldTypes).IconUrl\n\t\t\t\t\t? compileExpression(\n\t\t\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\t\t\t(field.convertedMetaPath as DataFieldTypes).IconUrl as unknown as PropertyAnnotationValue<String>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t  )\n\t\t\t\t\t: undefined;\n\t\t\t\tconst linkBinding = getExpressionFromAnnotation(\n\t\t\t\t\t(field.convertedMetaPath as DataFieldWithUrl).Url as unknown as PropertyAnnotationValue<String>\n\t\t\t\t);\n\t\t\t\tlinkUrl = compileExpression(linkBinding);\n\t\t\t\tlinkActived = compileExpression(not(equal(linkBinding, \"\")));\n\t\t\t\tlinkTarget = html5LinkTarget && (html5LinkTarget.toString() as LinkTarget);\n\t\t}\n\n\t\tif (field.property.annotations?.Communication?.IsEmailAddress || field.property.annotations?.Communication?.IsPhoneNumber) {\n\t\t\tconst linkIsEmailAddress = field.property.annotations.Communication?.IsEmailAddress !== undefined;\n\t\t\tconst linkIsPhoneNumber = field.property.annotations.Communication?.IsPhoneNumber !== undefined;\n\t\t\tconst propertyValueBinding = FieldTemplating.getValueBinding(field.dataModelPath, {});\n\t\t\tconst mailBlockId = field.displayStyleId ? field.displayStyleId : `mailBlock${uid()}`;\n\t\t\tif (linkIsEmailAddress) {\n\t\t\t\tlinkUrl = `mailto:${propertyValueBinding}`;\n\t\t\t\treturn (\n\t\t\t\t\t<Email\n\t\t\t\t\t\tid={mailBlockId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\tmail={propertyValueBinding}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy ? field.ariaLabelledBy : undefined}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (linkIsPhoneNumber) {\n\t\t\t\tlinkUrl = `tel:${propertyValueBinding}`;\n\t\t\t\treturn (\n\t\t\t\t\t<Link\n\t\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\ttext={DisplayStyle.computeTextWithWhiteSpace(field)}\n\t\t\t\t\t\thref={linkUrl}\n\t\t\t\t\t\tenabled={linkActived}\n\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (iconUrl) {\n\t\t\treturn (\n\t\t\t\t<ObjectStatus\n\t\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\ticon={iconUrl}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\tpress={field.eventHandlers.openExternalLink as unknown as (oEvent: Event) => void}\n\t\t\t\t\tactive={linkActived}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: <CustomData key={\"url\"} value={linkUrl} />\n\t\t\t\t\t}}\n\t\t\t\t</ObjectStatus>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Link\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\thref={linkUrl}\n\t\t\t\t\tenabled={linkActived}\n\t\t\t\t\ttarget={linkTarget === undefined ? \"_top\" : linkTarget}\n\t\t\t\t\twrapping={field.wrap === undefined ? true : field.wrap}\n\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Find the foreign key of target entity which quick view Facets we want to display.\n\t * @param field Reference to the current field instance\n\t * @returns The key of the target entity\n\t */\n\tgetForeignKeyForCustomData(field: FieldBlockProperties): string | undefined {\n\t\tconst relativePathToQuickViewEntity = QuickView.getRelativePathToQuickViewEntity(field.dataModelPath);\n\t\tif (relativePathToQuickViewEntity) {\n\t\t\tconst targetNavigationProperties = field.dataModelPath.targetEntityType.navigationProperties;\n\t\t\tconst targetNavProp = targetNavigationProperties.find((navProp) => navProp.name === relativePathToQuickViewEntity);\n\t\t\tconst refConstraint = targetNavProp?.referentialConstraint;\n\t\t\tconst key = refConstraint?.length && typeof refConstraint[0] === \"object\" && refConstraint[0].targetProperty;\n\t\t\tconst keyToFetch = key ? `${relativePathToQuickViewEntity}/${key}` : undefined;\n\t\t\tif (keyToFetch !== undefined) {\n\t\t\t\treturn keyToFetch;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Generates the check expression for displaying or not a quickview.\n\t * @param field Reference to the current field instance\n\t * @returns The key of the target entity\n\t */\n\tgetForeignKeyValueExpression(field: FieldBlockProperties): string {\n\t\tconst foreignKeyRelativePath = QuickView.getRelativePathToQuickViewEntity(field.dataModelPath)\n\t\t\t? this.getForeignKeyForCustomData(field)\n\t\t\t: undefined;\n\t\tconst expression: BindingToolkitExpression<string> = {\n\t\t\tpath: `${foreignKeyRelativePath}`,\n\t\t\t_type: \"PathInModel\"\n\t\t};\n\t\treturn `${compileExpression(ifElse(equal(foreignKeyRelativePath, undefined), constant(true), not(equal(null, expression))))}`;\n\t},\n\n\t/**\n\t * Generates the StandardLinkWithQuickView template.\n\t * @param field Reference to the current field instance\n\t * @param text The text to display\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetStandardLinkWithQuickViewTemplate(field: FieldBlockProperties, text: CompiledBindingToolkitExpression): string {\n\t\treturn (\n\t\t\t<Link\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\ttext={text}\n\t\t\t\tvisible={field.displayVisible}\n\t\t\t\twrapping={field.wrap === undefined ? true : field.wrap}\n\t\t\t\tpress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(field)\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ConditionalLinkTemplate template.\n\t * @param field Reference to the current field instance\n\t * @param condition Condition to display a Link or a Text\n\t * @param text The text to display\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetConditionalLinkWithQuickViewTemplate(\n\t\tfield: FieldBlockProperties,\n\t\tcondition: CompiledBindingToolkitExpression,\n\t\ttext: CompiledBindingToolkitExpression\n\t): string {\n\t\treturn (\n\t\t\t<TextLink\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tshowAsLink={condition as unknown as boolean}\n\t\t\t\tsemanticObject={field.semanticObject}\n\t\t\t\ttext={text}\n\t\t\t\tvisible={field.displayVisible}\n\t\t\t\twrapping={field.wrap === undefined ? true : field.wrap}\n\t\t\t\tpress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(field)\n\t\t\t\t}}\n\t\t\t</TextLink>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ConditionalLinkTemplate template.\n\t * @param field Reference to the current field instance\n\t * @param condition Condition to display a Link or a Text\n\t * @param contentTrue The Control to display in case condition is true\n\t * @param contentFalse The Control to display in case condition is false\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetConditionalWrapperForQuickViewTemplate(\n\t\tfield: FieldBlockProperties,\n\t\tcondition: string,\n\t\tcontentTrue: string,\n\t\tcontentFalse: string\n\t): string {\n\t\treturn (\n\t\t\t<ConditionalWrapper visible={field.displayVisible} condition={condition as unknown as boolean}>\n\t\t\t\t{{\n\t\t\t\t\tcontentTrue: contentTrue,\n\t\t\t\t\tcontentFalse: contentFalse\n\t\t\t\t}}\n\t\t\t</ConditionalWrapper>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the LinkWithQuickView template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLinkWithQuickViewTemplate(field: FieldBlockProperties): string {\n\t\tconst text = field.formatOptions.retrieveTextFromValueList\n\t\t\t? field.textFromValueList\n\t\t\t: DisplayStyle.computeTextWithWhiteSpace(field);\n\t\tconst condition = this.getQuickViewCondition(field);\n\t\tif (condition === \"true\") {\n\t\t\treturn this.getStandardLinkWithQuickViewTemplate(field, text);\n\t\t}\n\t\treturn this.getConditionalLinkWithQuickViewTemplate(field, condition, text);\n\t},\n\n\t/**\n\t * Generates the Text template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTextTemplate(field: FieldBlockProperties): string {\n\t\tif (field.formatOptions.retrieveTextFromValueList) {\n\t\t\treturn (\n\t\t\t\t<Text\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.textFromValueList}\n\t\t\t\t\tcore:require=\"{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}\"\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\trenderWhitespace=\"true\"\n\t\t\t\t/>\n\t\t\t);\n\t\t} else {\n\t\t\t// When having a TextArrangement with TextOnly, RTA can only find the binding for the text, but not for the field.\n\t\t\t// To prevent that such a field can be added twice via RTA, we need to provide the field binding as a dummy custom binding.\n\t\t\tlet customdata;\n\t\t\tif (field.formatOptions.displayMode === \"Description\" && field.valueAsStringBindingExpression) {\n\t\t\t\tcustomdata = <CustomData key=\"fieldBinding\" value={field.valueAsStringBindingExpression} />;\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<Text\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\twrapping={field.wrap}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\trenderWhitespace=\"true\"\n\t\t\t\t>\n\t\t\t\t\t{customdata}\n\t\t\t\t</Text>\n\t\t\t);\n\t\t}\n\t},\n\n\t/**\n\t * Gets template for the password field.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetPasswordTemplate(field: FieldBlockProperties): string {\n\t\tconst textBinding = FieldTemplating.getTextBinding(field.dataModelPath, field.formatOptions, true);\n\t\tconst textExpression =\n\t\t\tisPathInModelExpression(textBinding) || typeof textBinding === \"string\"\n\t\t\t\t? compileExpression(formatResult([textBinding], valueFormatters.formatPasswordText))\n\t\t\t\t: compileExpression(textBinding);\n\t\treturn (\n\t\t\t<Text\n\t\t\t\tcore:require=\"{valueFormatters: 'sap/fe/core/formatters/ValueFormatter'}\"\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\tvisible={field.displayVisible}\n\t\t\t\ttext={textExpression}\n\t\t\t\twrapping={field.wrap}\n\t\t\t\trenderWhitespace=\"true\"\n\t\t\t></Text>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the ObjectIdentifier template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetObjectIdentifier(field: FieldBlockProperties): string {\n\t\tlet dependents: MdcLink | undefined;\n\t\tlet titleActive;\n\t\tif (field.hasQuickView) {\n\t\t\ttitleActive = this.getQuickViewCondition(field);\n\t\t\tdependents = DisplayStyle.getMdcLinkForQuickView(field);\n\t\t} else {\n\t\t\ttitleActive = false;\n\t\t}\n\n\t\tlet identifier = (\n\t\t\t<ObjectIdentifier\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\ttitle={field.identifierTitle}\n\t\t\t\ttext={field.identifierText}\n\t\t\t\ttitleActive={titleActive}\n\t\t\t\ttitlePress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: dependents\n\t\t\t\t}}\n\t\t\t</ObjectIdentifier>\n\t\t);\n\t\tif (field.hasSituationsIndicator) {\n\t\t\tidentifier = (\n\t\t\t\t<HBox alignItems=\"Center\" justifyContent=\"SpaceBetween\" width=\"100%\">\n\t\t\t\t\t{identifier}\n\t\t\t\t\t<SituationsIndicator contextPath={field.contextPath.getPath()} propertyPath={field.situationsIndicatorPropertyPath} />\n\t\t\t\t</HBox>\n\t\t\t);\n\t\t}\n\t\tif (field.showErrorIndicator && field.showErrorObjectStatus) {\n\t\t\tidentifier = (\n\t\t\t\t<VBox>\n\t\t\t\t\t{identifier}\n\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\tvisible={field.showErrorObjectStatus}\n\t\t\t\t\t\tclass=\"sapUiSmallMarginBottom\"\n\t\t\t\t\t\ttext=\"{sap.fe.i18n>Contains_Errors}\"\n\t\t\t\t\t\tstate=\"Error\"\n\t\t\t\t\t/>\n\t\t\t\t</VBox>\n\t\t\t);\n\t\t}\n\n\t\treturn identifier;\n\t},\n\n\t/**\n\t * Generates the ObjectStatus template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetObjectStatus(field: FieldBlockProperties): string {\n\t\tlet objectStatus;\n\t\tlet requiredHelper = {\n\t\t\t\"core:require\": \"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t};\n\t\tconst dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataField>(field.metaPath, field.contextPath);\n\t\tconst enhancedValueDataModelPath = enhanceDataModelPath<Property>(\n\t\t\tdataModelObjectPath,\n\t\t\tdataModelObjectPath.targetObject?.Value.path\n\t\t);\n\t\tconst condition = hasValidAnalyticalCurrencyOrUnit(enhancedValueDataModelPath);\n\t\tconst convertedDataField = MetaModelConverter.getInvolvedDataModelObjects<DataPointType>(field.metaPath);\n\t\tconst criticalityIcon = buildExpressionForCriticalityIcon(convertedDataField);\n\t\tconst state = buildExpressionForCriticalityColor(convertedDataField);\n\n\t\t// Extract tooltip from QuickInfo annotation - check DataField first, then property\n\t\tconst tooltipAnnotation =\n\t\t\tdataModelObjectPath.targetObject?.annotations?.Common?.QuickInfo ||\n\t\t\tenhancedValueDataModelPath.targetObject?.annotations?.Common?.QuickInfo;\n\t\tconst tooltipExpression = tooltipAnnotation ? compileExpression(getExpressionFromAnnotation(tooltipAnnotation)) : undefined;\n\n\t\tconst linkUrl = (field.convertedMetaPath as DataFieldWithUrl).Url\n\t\t\t? compileExpression(\n\t\t\t\t\tgetExpressionFromAnnotation(\n\t\t\t\t\t\t(field.convertedMetaPath as DataFieldWithUrl).Url as unknown as PropertyAnnotationValue<String>\n\t\t\t\t\t)\n\t\t\t  )\n\t\t\t: undefined;\n\n\t\tif (field.formatOptions.isAnalytics && field.hasUnitOrCurrency) {\n\t\t\tconst content = DisplayStyle.getCurrencyOrUnitControl(field, <Text text={field.text} textAlign=\"End\"></Text>);\n\t\t\tobjectStatus = (\n\t\t\t\t<ConditionalWrapper id={field.displayStyleId} condition={condition as unknown as boolean}>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentTrue: (\n\t\t\t\t\t\t\t<ObjectStatus\n\t\t\t\t\t\t\t\ticon={criticalityIcon}\n\t\t\t\t\t\t\t\tstate={state}\n\t\t\t\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\t\t\t\ttext={field.text}\n\t\t\t\t\t\t\t\ttooltip={tooltipExpression}\n\t\t\t\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t\t\t\tclass=\"sapMTextRenderWhitespaceWrap\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcontentFalse: content\n\t\t\t\t\t}}\n\t\t\t\t</ConditionalWrapper>\n\t\t\t);\n\t\t} else {\n\t\t\tlet dependents: MdcLink | undefined;\n\t\t\tlet active = false;\n\t\t\tlet isActive;\n\t\t\tlet pressAction;\n\t\t\tif (field.hasQuickView) {\n\t\t\t\tdependents = DisplayStyle.getMdcLinkForQuickView(field);\n\t\t\t\tisActive = this.getQuickViewCondition(field);\n\t\t\t\tpressAction = field.eventHandlers.linkPressed;\n\t\t\t}\n\t\t\tif (linkUrl) {\n\t\t\t\tactive = true;\n\t\t\t\trequiredHelper = {\n\t\t\t\t\t\"core:require\": \"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\t};\n\t\t\t\tpressAction = field.eventHandlers.openExternalLink;\n\t\t\t}\n\n\t\t\tobjectStatus = (\n\t\t\t\t<ObjectStatus\n\t\t\t\t\tid={field.displayStyleId}\n\t\t\t\t\ticon={criticalityIcon}\n\t\t\t\t\tstate={state}\n\t\t\t\t\ttext={field.text}\n\t\t\t\t\ttooltip={tooltipExpression}\n\t\t\t\t\tvisible={field.displayVisible}\n\t\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\t\t{...requiredHelper}\n\t\t\t\t\tactive={isActive ? isActive : active}\n\t\t\t\t\tpress={pressAction}\n\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: [\n\t\t\t\t\t\t\t<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />,\n\t\t\t\t\t\t\t<CustomData key={\"url\"} value={linkUrl} />\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdependents: dependents\n\t\t\t\t\t}}\n\t\t\t\t</ObjectStatus>\n\t\t\t);\n\t\t}\n\n\t\treturn objectStatus;\n\t},\n\n\tgetMdcLinkForQuickView(field: FieldBlockProperties): MdcLink {\n\t\treturn new QuickView(\n\t\t\tfield.dataModelPath,\n\t\t\tfield.metaPath.getPath(),\n\t\t\tfield.contextPath.getPath(),\n\t\t\tfield.semanticObject\n\t\t).createContent() as MdcLink;\n\t},\n\n\t/**\n\t * Generates the LabelSemanticKey template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLabelSemanticKey(field: FieldBlockProperties): string {\n\t\tconst contentTrue = (\n\t\t\t<Link\n\t\t\t\ttext={field.text}\n\t\t\t\twrapping=\"true\"\n\t\t\t\temphasized=\"true\"\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tpress={field.eventHandlers.linkPressed}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\temptyIndicatorMode={field.emptyIndicatorMode}\n\t\t\t\taccessibleRole={LinkAccessibleRole.Button}\n\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [<CustomData key={\"loadValue\"} value={field.valueAsStringBindingExpression} />],\n\t\t\t\t\tdependents: DisplayStyle.getMdcLinkForQuickView(field)\n\t\t\t\t}}\n\t\t\t</Link>\n\t\t);\n\t\tconst contentFalse = <Label id={field.displayStyleId} visible={field.displayVisible} text={field.identifierTitle} design=\"Bold\" />;\n\t\tif (field.hasQuickView) {\n\t\t\tconst hasQuickview = this.getQuickViewCondition(field);\n\t\t\tif (hasQuickview === \"true\") {\n\t\t\t\treturn contentTrue;\n\t\t\t} else {\n\t\t\t\treturn this.getConditionalWrapperForQuickViewTemplate(field, hasQuickview as string, contentTrue, contentFalse);\n\t\t\t}\n\t\t}\n\t\treturn <Label id={field.displayStyleId} visible={field.displayVisible} text={field.identifierTitle} design=\"Bold\" />;\n\t},\n\t/**\n\t * Gets the template for the semantic key with draft indicator.\n\t * @param semanticKeyTemplate The template result without draft indicator\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\taddDraftIndicator(semanticKeyTemplate: string, field: FieldBlockProperties): string {\n\t\tif (!field.formatOptions.fieldGroupDraftIndicatorPropertyPath) {\n\t\t\t// if the draftIndicator is not handled at the fieldGroup level\n\t\t\t//TODO could this be a boolean no draftIndicator\n\t\t\tsemanticKeyTemplate = (\n\t\t\t\t<FormElementWrapper visible={field.displayVisible}>\n\t\t\t\t\t<VBox class={FieldHelper.getMarginClass(field.formatOptions.compactSemanticKey)}>\n\t\t\t\t\t\t{semanticKeyTemplate}\n\t\t\t\t\t\t<DraftIndicator\n\t\t\t\t\t\t\tdraftIndicatorType={ObjectMarkerVisibility.IconAndText}\n\t\t\t\t\t\t\tcontextPath={field.contextPath.getPath()}\n\t\t\t\t\t\t\tvisible={field.draftIndicatorVisible}\n\t\t\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy ? field.ariaLabelledBy : []}\n\t\t\t\t\t\t\treactiveAreaMode={field.formatOptions?.reactiveAreaMode}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</VBox>\n\t\t\t\t</FormElementWrapper>\n\t\t\t);\n\t\t}\n\t\treturn semanticKeyTemplate;\n\t},\n\n\t/**\n\t * Computes the text property with the appropriate white space handling.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tcomputeTextWithWhiteSpace(field: FieldBlockProperties): CompiledBindingToolkitExpression {\n\t\tconst text = FieldTemplating.getTextBinding(\n\t\t\t(field.dataModelPathExternalID as DataModelObjectPath<Property>) ?? field.dataModelPath,\n\t\t\tfield.formatOptions,\n\t\t\ttrue\n\t\t);\n\t\treturn isPathInModelExpression(text) || typeof text === \"string\"\n\t\t\t? compileExpression(formatResult([text], valueFormatters.replaceWhitespace))\n\t\t\t: compileExpression(text);\n\t},\n\t/**\n\t * Gets the condition for having an active link that opens the quick view.\n\t * @param field\n\t * @returns A compile binding expression for the condition.\n\t */\n\tgetQuickViewCondition(field: FieldBlockProperties): CompiledBindingToolkitExpression {\n\t\tswitch (field.quickViewType) {\n\t\t\tcase \"Facets\":\n\t\t\t\tif (field.formatOptions.isAnalytics !== true) {\n\t\t\t\t\t// We only check if the navigation is reachable if the table is not analytical.\n\t\t\t\t\t// If the table is analytical, we cannot rely on the navigation being reachable, as we cannot load navigation properties in the analytical queries.\n\t\t\t\t\t//there is quick viewFacets annotation only then we check if the navigation is reachable\n\t\t\t\t\treturn this.getForeignKeyValueExpression(field);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"SemanticLinks\":\n\t\t\t\tif (field.dynamicSemanticObjects) {\n\t\t\t\t\tconst listOfDynamicSemanticObjects: BindingToolkitExpression<string>[] = [];\n\t\t\t\t\tif (field.semanticObject) {\n\t\t\t\t\t\t// If we see a dynamic expression with a formatter, we return false. The condition will be resolved later in TextLink control.\n\t\t\t\t\t\treturn compileExpression(constant(false));\n\t\t\t\t\t}\n\t\t\t\t\tfor (const semanticObjectExpression of field.dynamicSemanticObjects) {\n\t\t\t\t\t\tif (semanticObjectExpression._type === \"PathInModel\" || semanticObjectExpression._type === \"Constant\") {\n\t\t\t\t\t\t\tlistOfDynamicSemanticObjects.push(semanticObjectExpression);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// If we see a dynamic expression ($edmJson), we return true.\n\t\t\t\t\t\t\treturn compileExpression(constant(true));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst semanticObjectsPath = [\n\t\t\t\t\t\tpathInModel<Context[]>(\"/semanticObjects\", \"internal\") as BindingToolkitExpression<string>\n\t\t\t\t\t].concat(listOfDynamicSemanticObjects);\n\t\t\t\t\treturn compileExpression(formatResult(semanticObjectsPath, valueFormatters.hasSemanticObjects));\n\t\t\t\t}\n\t\t\t\treturn \"true\";\n\t\t\tdefault:\n\t\t\t\t// \"facetsAndSemanticLinks\"\n\t\t\t\t// if there is both facets and semantic links, we do not check if the navigation is reachable\n\t\t\t\treturn \"true\";\n\t\t}\n\t},\n\n\t/**\n\t * Generates the CheckBoxGroup template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetCheckBoxGroupItemTemplate(field: FieldBlockProperties): string {\n\t\treturn (\n\t\t\t<CheckBox\n\t\t\t\tcore:require=\"{Field: 'sap/fe/macros/Field'}\"\n\t\t\t\tid={field.displayStyleId}\n\t\t\t\tdisplayOnly={true}\n\t\t\t\ttext={field.label}\n\t\t\t\twrapping={true}\n\t\t\t\tselected={field.valueBindingExpression}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t>\n\t\t\t\t{{ customData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} /> }}\n\t\t\t</CheckBox>\n\t\t);\n\t},\n\n\t/**\n\t * Entry point for further templating processings.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTemplate: (field: FieldBlockProperties): string => {\n\t\tlet innerFieldContent;\n\t\tswitch (field.displayStyle as DisplayStyleType) {\n\t\t\tcase \"Avatar\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getAvatarTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Button\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getButtonTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"CheckBoxGroupItem\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getCheckBoxGroupItemTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Contact\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getContactTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"DataPoint\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getDataPointTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"ExpandableText\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getExpandableText(field);\n\t\t\t\tbreak;\n\t\t\tcase \"File\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getFileTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Link\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLinkTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"LinkWithQuickView\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLinkWithQuickViewTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"NumberWithUnitOrCurrencyAligned\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getNumberWithUnitOrCurrencyAlignedTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectIdentifier\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getObjectIdentifier(field);\n\t\t\t\tbreak;\n\t\t\tcase \"ObjectStatus\": {\n\t\t\t\tinnerFieldContent = DisplayStyle.getObjectStatus(field);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"LabelSemanticKey\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getLabelSemanticKey(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Text\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getTextTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"Masked\":\n\t\t\t\tinnerFieldContent = DisplayStyle.getPasswordTemplate(field);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tinnerFieldContent = \"\";\n\t\t}\n\t\tif (field.addDraftIndicator && innerFieldContent) {\n\t\t\tinnerFieldContent = DisplayStyle.addDraftIndicator(innerFieldContent, field);\n\t\t}\n\n\t\treturn innerFieldContent;\n\t}\n};\n\nexport default DisplayStyle;\n"],"mappings":"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","ignoreList":[]}