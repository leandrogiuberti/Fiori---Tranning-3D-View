{"version":3,"file":"EditStyle.js","names":["EditStyle","getLayoutData","field","layoutData","collaborationEnabled","_jsx","FlexItemData","growFactor","getCollaborationAvatar","collaborationHasActivityExpression","compileExpression","collaborationExpression","collaborationInitialsExpression","UIFormatter","getCollaborationExpression","dataModelPath","CollaborationFormatters","getCollaborationActivityInitials","collaborationColorExpression","getCollaborationActivityColor","Avatar","visible","initials","displaySize","customDisplaySize","customFontSize","backgroundColor","press","eventHandlers","showCollaborationEditUser","children","dependents","EventDelegateHook","stopTapPropagation","getDateTimePickerGeneric","type","dataModelObjectPath","MetaModelConverter","getInvolvedDataModelObjects","metaPath","contextPath","textAlign","getTextAlignment","formatOptions","editModeAsObject","dateTimePickerProperties","id","editStyleId","width","editable","editableExpression","enabled","enabledExpression","required","requiredExpression","ariaLabelledBy","value","valueBindingExpression","fieldGroupIds","showTimezone","minDate","minDateExpression","undefined","maxDate","maxDateExpression","change","liveChange","valueFormat","validateFieldGroup","getDateTimePicker","dateTimePickerType","dateTimePicker","DatePicker","customData","CustomData","dataSourcePath","DateTimePicker","TimePicker","getInputTemplate","Input","placeholder","editStylePlaceholder","description","staticDescription","editStyle","maxLength","textMaxLength","showAsRadioButton","radioButtonConfigured","property","annotations","Common","ValueListWithFixedValues","hasValueHelpWithFixedValues","ValueListShowValuesImmediately","valueOf","fieldEditStyle","valueListParameterInOut","ValueList","Parameters","find","valueListParameter","$Type","LocalDataProperty","name","ValueListRelevantQualifiers","getRadioButtonTemplate","forBoolean","arguments","length","fixedValuesPath","CollectionPath","valueListKeyPath","pathInModel","ValueListProperty","valueListDescriptionPath","valueHelpKeyTextAnnotationPath","targetEntityType","resolvePath","entityType","keys","Text","path","possibleValues","key","text","getTranslatedText","RadioButtons","radioButtonTextProperty","radioButtonKeyProperty","horizontalLayout","radioButtonsHorizontalLayout","getInputWithValueHelpTemplate","dataFieldDataModelObjectPath","delegate","FieldHelper","computeFieldBaseDelegate","retrieveTextFromValueList","display","getFieldDisplay","displayMode","hasMultilineAnnotation","UI","MultiLineText","multipleLines","getMultipleLinesForDataField","label","computeLabelText","context","optionalContentEdit","TextArea","rows","textLinesEdit","growing","textMaxLines","growingMaxLines","optionalLayoutData","this","Field","valueState","editMode","computedEditMode","additionalValue","textBindingExpression","valueHelp","valueHelpId","contentEdit","getCheckBoxTemplate","isCheckBoxGroupItem","isFieldGroupItem","CheckBox","selected","wrapping","select","getTextAreaTemplate","showExceededText","TextAreaEx","cols","getRatingIndicatorTemplate","tooltip","ratingIndicatorTooltip","RatingIndicator","maxValue","ratingIndicatorTargetValue","iconSize","class","getTemplateWithWrapper","FieldEditMode","Display","_jsxs","CollaborationHBox","alignItems","getTemplate","getInputMaskTemplate","optionalMaskInputRules","mask","maskRule","rule","push","MaskInputRule","maskFormatSymbol","symbol","regex","MaskInput","placeholderSymbol","rules","innerFieldContent","useRadioButtonsForBoolean"],"sources":["./EditStyle.tsx"],"sourcesContent":["import type { DataFieldTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport EventDelegateHook from \"sap/fe/base/EventDelegateHook\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport * as CollaborationFormatters from \"sap/fe/core/formatters/CollaborationFormatter\";\nimport { hasValueHelpWithFixedValues } from \"sap/fe/core/templating/PropertyHelper\";\nimport * as UIFormatter from \"sap/fe/core/templating/UIFormatters\";\nimport CollaborationHBox from \"sap/fe/macros/controls/CollaborationHBox\";\nimport RadioButtons from \"sap/fe/macros/controls/RadioButtons\";\nimport { getMultipleLinesForDataField, getTextAlignment } from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport Avatar from \"sap/m/Avatar\";\nimport type { CheckBox$SelectEvent } from \"sap/m/CheckBox\";\nimport CheckBox from \"sap/m/CheckBox\";\nimport DatePicker from \"sap/m/DatePicker\";\nimport DateTimePicker from \"sap/m/DateTimePicker\";\nimport FlexItemData from \"sap/m/FlexItemData\";\nimport Input from \"sap/m/Input\";\nimport type { InputBase$ChangeEvent } from \"sap/m/InputBase\";\nimport type { MaskInput$LiveChangeEvent } from \"sap/m/MaskInput\";\nimport MaskInput from \"sap/m/MaskInput\";\nimport MaskInputRule from \"sap/m/MaskInputRule\";\nimport type { RatingIndicator$ChangeEvent } from \"sap/m/RatingIndicator\";\nimport RatingIndicator from \"sap/m/RatingIndicator\";\nimport TextArea from \"sap/m/TextArea\";\nimport TimePicker from \"sap/m/TimePicker\";\nimport type Event from \"sap/ui/base/Event\";\nimport type { default as Control, Control$ValidateFieldGroupEvent, default as Control1 } from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport type { Field$ChangeEvent } from \"sap/ui/mdc/Field\";\nimport Field from \"sap/ui/mdc/Field\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type { MetaModelType } from \"../../../../../../../../types/metamodel_types\";\nimport FieldHelper from \"../../field/FieldHelper\";\nimport TextAreaEx from \"../../field/TextAreaEx\";\n\nconst EditStyle = {\n\t/**\n\t * An internal helper to retrieve the reused layout data.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetLayoutData(field: FieldBlockProperties): string {\n\t\tlet layoutData = \"\";\n\t\tif (field.collaborationEnabled) {\n\t\t\tlayoutData = <FlexItemData growFactor=\"9\" />;\n\t\t}\n\t\treturn layoutData;\n\t},\n\n\t/**\n\t * Generates the avatar control next a field locked.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the avatar\n\t */\n\tgetCollaborationAvatar(field: FieldBlockProperties): string {\n\t\tconst collaborationHasActivityExpression = compileExpression(field.collaborationExpression);\n\t\tconst collaborationInitialsExpression = compileExpression(\n\t\t\tUIFormatter.getCollaborationExpression(field.dataModelPath, CollaborationFormatters.getCollaborationActivityInitials)\n\t\t);\n\t\tconst collaborationColorExpression = compileExpression(\n\t\t\tUIFormatter.getCollaborationExpression(field.dataModelPath, CollaborationFormatters.getCollaborationActivityColor)\n\t\t);\n\n\t\treturn (\n\t\t\t<Avatar\n\t\t\t\tcore:require=\"{FieldRuntimeHelper: 'sap/fe/macros/field/FieldRuntimeHelper'}\"\n\t\t\t\tvisible={collaborationHasActivityExpression}\n\t\t\t\tinitials={collaborationInitialsExpression}\n\t\t\t\tdisplaySize=\"Custom\"\n\t\t\t\tcustomDisplaySize=\"1.5rem\"\n\t\t\t\tcustomFontSize=\"0.8rem\"\n\t\t\t\tbackgroundColor={collaborationColorExpression}\n\t\t\t\tpress={field.eventHandlers.showCollaborationEditUser as unknown as ((oEvent: Event) => void) | undefined}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tdependents: <EventDelegateHook stopTapPropagation={true} />\n\t\t\t\t}}\n\t\t\t</Avatar>\n\t\t);\n\t},\n\n\t/**\n\t * Generates a template for one of the pickers reference in the type.\n\t * @param field Reference to the current field instance\n\t * @param type Reference to one of the edit style picker types\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetDateTimePickerGeneric(field: FieldBlockProperties, type: \"DatePicker\" | \"DateTimePicker\" | \"TimePicker\"): string {\n\t\tconst dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldTypes>(field.metaPath, field.contextPath);\n\t\tconst textAlign = getTextAlignment(\n\t\t\tdataModelObjectPath,\n\t\t\tfield.formatOptions,\n\t\t\tfield.editModeAsObject as BindingToolkitExpression<string>\n\t\t);\n\n\t\tconst dateTimePickerProperties = {\n\t\t\t\"core:require\": \"{Field: 'sap/fe/macros/Field'}\",\n\t\t\tid: field.editStyleId,\n\t\t\twidth: \"100%\",\n\t\t\teditable: field.editableExpression,\n\t\t\tenabled: field.enabledExpression,\n\t\t\trequired: field.requiredExpression,\n\t\t\ttextAlign: textAlign,\n\t\t\tariaLabelledBy: field.ariaLabelledBy as unknown as Array<Control | string>,\n\t\t\tvalue: field.valueBindingExpression,\n\t\t\tfieldGroupIds: field.fieldGroupIds,\n\t\t\tshowTimezone: field.showTimezone,\n\t\t\tminDate: type === \"DateTimePicker\" || type === \"DatePicker\" ? field.minDateExpression : undefined,\n\t\t\tmaxDate: type === \"DateTimePicker\" || type === \"DatePicker\" ? field.maxDateExpression : undefined,\n\t\t\tchange:\n\t\t\t\ttype === \"DateTimePicker\"\n\t\t\t\t\t? ((field.change || field.eventHandlers.change) as unknown as (oEvent: InputBase$ChangeEvent) => void)\n\t\t\t\t\t: (field.eventHandlers.change as unknown as (oEvent: InputBase$ChangeEvent) => void),\n\t\t\tliveChange: field.eventHandlers.liveChange,\n\t\t\tvalueFormat: type === \"DatePicker\" ? \"medium\" : undefined,\n\t\t\tvalidateFieldGroup: field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void\n\t\t};\n\n\t\tfunction getDateTimePicker(dateTimePickerType: string): string {\n\t\t\tlet dateTimePicker;\n\t\t\tswitch (dateTimePickerType) {\n\t\t\t\tcase \"DatePicker\":\n\t\t\t\t\tdateTimePicker = (\n\t\t\t\t\t\t<DatePicker {...dateTimePickerProperties}>\n\t\t\t\t\t\t\t{{ customData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} /> }}\n\t\t\t\t\t\t</DatePicker>\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DateTimePicker\":\n\t\t\t\t\tdateTimePicker = (\n\t\t\t\t\t\t<DateTimePicker {...dateTimePickerProperties}>\n\t\t\t\t\t\t\t{{ customData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} /> }}\n\t\t\t\t\t\t</DateTimePicker>\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"TimePicker\":\n\t\t\t\t\tdateTimePicker = (\n\t\t\t\t\t\t<TimePicker {...dateTimePickerProperties}>\n\t\t\t\t\t\t\t{{ customData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} /> }}\n\t\t\t\t\t\t</TimePicker>\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn dateTimePicker;\n\t\t}\n\n\t\treturn getDateTimePicker(type);\n\t},\n\n\t/**\n\t * Generates the Input template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetInputTemplate(field: FieldBlockProperties): string {\n\t\tconst dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldTypes>(field.metaPath, field.contextPath);\n\n\t\tconst textAlign = getTextAlignment(\n\t\t\tdataModelObjectPath,\n\t\t\tfield.formatOptions,\n\t\t\tfield.editModeAsObject as BindingToolkitExpression<string>\n\t\t);\n\n\t\treturn (\n\t\t\t<Input\n\t\t\t\tcore:require=\"{Field: 'sap/fe/macros/Field'}\"\n\t\t\t\tid={field.editStyleId}\n\t\t\t\tvalue={field.valueBindingExpression}\n\t\t\t\tplaceholder={field.editStylePlaceholder}\n\t\t\t\twidth=\"100%\"\n\t\t\t\teditable={field.editableExpression}\n\t\t\t\tdescription={field.staticDescription}\n\t\t\t\tenabled={field.enabledExpression}\n\t\t\t\trequired={field.requiredExpression}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\ttextAlign={textAlign}\n\t\t\t\ttype={field.editStyle === \"Masked\" ? \"Password\" : undefined}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\tmaxLength={field.formatOptions.textMaxLength}\n\t\t\t\tchange={field.eventHandlers.change as (oEvent: InputBase$ChangeEvent) => void}\n\t\t\t\tliveChange={field.eventHandlers.liveChange}\n\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tlayoutData: EditStyle.getLayoutData(field),\n\t\t\t\t\tcustomData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} />\n\t\t\t\t}}\n\t\t\t</Input>\n\t\t);\n\t},\n\n\t/**\n\t * Returns if a field shall be templated as a radio button group.\n\t * @param field Reference to the current field instance\n\t * @returns The evaluation result\n\t */\n\tshowAsRadioButton(field: FieldBlockProperties): boolean {\n\t\t// Determine if we need to render the field as a radio button group\n\t\t// TODO: Remove the next two lines once UX updated the vocabulary module including the new experimental annotation\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tconst radioButtonConfigured: boolean =\n\t\t\tfield.property.annotations?.Common?.ValueListWithFixedValues &&\n\t\t\thasValueHelpWithFixedValues(field.property) === true &&\n\t\t\t((field.property.annotations.Common.ValueListWithFixedValues.annotations?.Common?.ValueListShowValuesImmediately &&\n\t\t\t\tfield.property.annotations.Common.ValueListWithFixedValues.annotations?.Common?.ValueListShowValuesImmediately.valueOf() ===\n\t\t\t\t\ttrue) ||\n\t\t\t\tfield.formatOptions.fieldEditStyle === \"RadioButtons\");\n\n\t\t// Exclude not supported cases\n\t\t// - ValueListParamaterInOut / ...Out must not be empty\n\t\t// - ValueListRelevantQualifiers annotation must not be used\n\t\t// Further cases may not make sense with radio buttons but we do not explicitly exclude them but mention this in documentation.\n\t\t// Check documentation, discuss and decide before adding further restrictions here.\n\t\tconst valueListParameterInOut = field.property?.annotations?.Common?.ValueList?.Parameters.find(\n\t\t\t(valueListParameter) =>\n\t\t\t\t(valueListParameter.$Type === \"com.sap.vocabularies.Common.v1.ValueListParameterInOut\" ||\n\t\t\t\t\tvalueListParameter.$Type === \"com.sap.vocabularies.Common.v1.ValueListParameterOut\") &&\n\t\t\t\tvalueListParameter.LocalDataProperty.value === field.property.name\n\t\t);\n\t\treturn (\n\t\t\tradioButtonConfigured &&\n\t\t\tvalueListParameterInOut !== undefined &&\n\t\t\t!field.property.annotations?.Common?.ValueListRelevantQualifiers\n\t\t);\n\t},\n\n\t/**\n\t * Generates the RadioButton template.\n\t * @param field Reference to the current field instance\n\t * @param forBoolean\n\t * @returns An XML-based string with the radio button definition\n\t */\n\tgetRadioButtonTemplate(field: FieldBlockProperties, forBoolean = false): string {\n\t\tconst fixedValuesPath = \"/\" + field.property?.annotations?.Common?.ValueList?.CollectionPath;\n\n\t\tconst valueListParameterInOut = field.property?.annotations?.Common?.ValueList?.Parameters.find(\n\t\t\t(valueListParameter) =>\n\t\t\t\t(valueListParameter.$Type === \"com.sap.vocabularies.Common.v1.ValueListParameterInOut\" ||\n\t\t\t\t\tvalueListParameter.$Type === \"com.sap.vocabularies.Common.v1.ValueListParameterOut\") &&\n\t\t\t\tvalueListParameter.LocalDataProperty.value === field.property.name\n\t\t);\n\n\t\t// we know that a valueListProperty exists because we check this already in showAsRadioButton\n\t\tconst valueListKeyPath = pathInModel(valueListParameterInOut?.ValueListProperty as string) ?? pathInModel(\"\");\n\n\t\tlet valueListDescriptionPath;\n\t\tconst valueHelpKeyTextAnnotationPath =\n\t\t\tfield.dataModelPath.targetEntityType.resolvePath(fixedValuesPath)?.entityType.keys[0].annotations?.Common?.Text?.path;\n\t\tif (valueHelpKeyTextAnnotationPath) {\n\t\t\tvalueListDescriptionPath = pathInModel(valueHelpKeyTextAnnotationPath);\n\t\t} else {\n\t\t\tvalueListDescriptionPath = valueListKeyPath;\n\t\t}\n\n\t\tlet possibleValues: { key: string | number | boolean | null; text: string }[] | undefined;\n\t\tif (forBoolean) {\n\t\t\tpossibleValues = [\n\t\t\t\t{ key: true, text: field.getTranslatedText(\"T_RADIOBUTTONS_BOOLEAN_YES\") },\n\t\t\t\t{ key: false, text: field.getTranslatedText(\"T_RADIOBUTTONS_BOOLEAN_NO\") }\n\t\t\t];\n\t\t}\n\n\t\treturn (\n\t\t\t<RadioButtons\n\t\t\t\tid={field.editStyleId}\n\t\t\t\tpossibleValues={possibleValues}\n\t\t\t\trequiredExpression={field.requiredExpression}\n\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t\tfixedValuesPath={fixedValuesPath as unknown as `{${string}}`}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\tvalue={field.valueBindingExpression}\n\t\t\t\tenabledExpression={field.enabledExpression}\n\t\t\t\tradioButtonTextProperty={valueListDescriptionPath}\n\t\t\t\tradioButtonKeyProperty={valueListKeyPath}\n\t\t\t\thorizontalLayout={field.formatOptions.radioButtonsHorizontalLayout}\n\t\t\t/>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the InputWithValueHelp template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetInputWithValueHelpTemplate(field: FieldBlockProperties): string {\n\t\tconst dataFieldDataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldTypes>(\n\t\t\tfield.metaPath,\n\t\t\tfield.contextPath\n\t\t);\n\n\t\tconst delegate = FieldHelper.computeFieldBaseDelegate(\n\t\t\t\"sap/fe/macros/field/FieldBaseDelegate\",\n\t\t\tfield.formatOptions.retrieveTextFromValueList as boolean\n\t\t);\n\t\tconst display = UIFormatter.getFieldDisplay(\n\t\t\tfield.property,\n\t\t\tfield.formatOptions.displayMode as string,\n\t\t\tfield.editModeAsObject as BindingToolkitExpression<string>\n\t\t);\n\t\tconst hasMultilineAnnotation = !!field.property?.annotations?.UI?.MultiLineText;\n\t\tconst multipleLines = getMultipleLinesForDataField(field, hasMultilineAnnotation);\n\n\t\tconst textAlign = getTextAlignment(\n\t\t\tdataFieldDataModelObjectPath,\n\t\t\tfield.formatOptions,\n\t\t\tfield.editModeAsObject as BindingToolkitExpression<string>,\n\t\t\ttrue\n\t\t);\n\t\tconst label = FieldHelper.computeLabelText(field as unknown as MetaModelType<DataFieldTypes>, {\n\t\t\tcontext: field.metaPath\n\t\t});\n\n\t\tlet optionalContentEdit = \"\";\n\t\tif (field.property.type === \"Edm.String\" && hasMultilineAnnotation) {\n\t\t\toptionalContentEdit = (\n\t\t\t\t<TextArea\n\t\t\t\t\tvalue={field.valueBindingExpression}\n\t\t\t\t\trequired={field.requiredExpression}\n\t\t\t\t\trows={field.formatOptions.textLinesEdit}\n\t\t\t\t\tgrowing={(field.formatOptions.textMaxLines as unknown as number) > 0 ? true : undefined}\n\t\t\t\t\tgrowingMaxLines={field.formatOptions.textMaxLines}\n\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\tchange={field.eventHandlers.change as unknown as (oEvent: InputBase$ChangeEvent) => void}\n\t\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\n\t\tlet optionalLayoutData = \"\";\n\t\tif (field.collaborationEnabled === true) {\n\t\t\toptionalLayoutData = <FlexItemData growFactor=\"9\" />;\n\t\t}\n\n\t\tif (this.showAsRadioButton(field) !== true) {\n\t\t\treturn (\n\t\t\t\t<Field\n\t\t\t\t\tcore:require=\"{Field: 'sap/fe/macros/Field'}\"\n\t\t\t\t\tdelegate={delegate}\n\t\t\t\t\tid={field.editStyleId}\n\t\t\t\t\tvalue={field.valueBindingExpression}\n\t\t\t\t\tplaceholder={field.editStylePlaceholder}\n\t\t\t\t\tvalueState={field.valueState}\n\t\t\t\t\teditMode={field.editMode ?? field.computedEditMode}\n\t\t\t\t\twidth=\"100%\"\n\t\t\t\t\trequired={field.requiredExpression}\n\t\t\t\t\tadditionalValue={field.textBindingExpression}\n\t\t\t\t\tdisplay={display}\n\t\t\t\t\tmultipleLines={multipleLines === false ? undefined : multipleLines}\n\t\t\t\t\tvalueHelp={field.valueHelpId}\n\t\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\t\ttextAlign={textAlign}\n\t\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control1 | string>}\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tchange={field.eventHandlers.change as (oEvent: Field$ChangeEvent) => void}\n\t\t\t\t\tliveChange={field.eventHandlers.liveChange}\n\t\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontentEdit: optionalContentEdit,\n\t\t\t\t\t\tlayoutData: optionalLayoutData,\n\t\t\t\t\t\tcustomData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} />\n\t\t\t\t\t}}\n\t\t\t\t</Field>\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.getRadioButtonTemplate(field);\n\t\t}\n\t},\n\n\t/**\n\t * Generates the CheckBox template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetCheckBoxTemplate(field: FieldBlockProperties): string {\n\t\tconst isCheckBoxGroupItem = field.formatOptions.isFieldGroupItem === true;\n\t\treturn (\n\t\t\t<CheckBox\n\t\t\t\tcore:require=\"{Field: 'sap/fe/macros/Field'}\"\n\t\t\t\tid={field.editStyleId}\n\t\t\t\trequired={isCheckBoxGroupItem ? field.requiredExpression : undefined}\n\t\t\t\tselected={field.valueBindingExpression}\n\t\t\t\teditable={field.editableExpression}\n\t\t\t\tenabled={field.enabledExpression}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\ttext={isCheckBoxGroupItem ? field.label : undefined}\n\t\t\t\twrapping={isCheckBoxGroupItem ? true : undefined}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\tselect={field.eventHandlers.change as (oEvent: CheckBox$SelectEvent) => void}\n\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t>\n\t\t\t\t{{ customData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} /> }}\n\t\t\t</CheckBox>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the TextArea template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTextAreaTemplate(field: FieldBlockProperties): string {\n\t\tconst growing = field.formatOptions.textMaxLines ? true : false;\n\n\t\tconst showExceededText = !!field.formatOptions.textMaxLength;\n\n\t\t//unfortunately this one is a \"different\" layoutData than the others, therefore the reuse function from above cannot be used for the textArea template\n\t\tlet layoutData = \"\";\n\t\tif (field.collaborationEnabled) {\n\t\t\tlayoutData = <FlexItemData growFactor=\"9\" />;\n\t\t}\n\n\t\treturn (\n\t\t\t<TextAreaEx\n\t\t\t\tcore:require=\"{Field: 'sap/fe/macros/Field'}\"\n\t\t\t\tid={field.editStyleId}\n\t\t\t\tvalue={field.valueBindingExpression}\n\t\t\t\tplaceholder={field.editStylePlaceholder}\n\t\t\t\trequired={field.requiredExpression}\n\t\t\t\trows={field.formatOptions.textLinesEdit}\n\t\t\t\tgrowing={growing}\n\t\t\t\tgrowingMaxLines={field.formatOptions.textMaxLines}\n\t\t\t\tcols={300} //As the default is 20, the \"cols\" property is configured with a value of 300 to guarantee that the textarea will occupy all the available space.\n\t\t\t\twidth=\"100%\"\n\t\t\t\teditable={field.editableExpression}\n\t\t\t\tenabled={field.enabledExpression}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\tmaxLength={field.formatOptions.textMaxLength}\n\t\t\t\tshowExceededText={showExceededText}\n\t\t\t\tchange={field.eventHandlers.change as (oEvent: InputBase$ChangeEvent) => void}\n\t\t\t\tliveChange={field.eventHandlers.liveChange}\n\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tlayoutData: layoutData,\n\t\t\t\t\tcustomData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} />\n\t\t\t\t}}\n\t\t\t</TextAreaEx>\n\t\t);\n\t},\n\n\t/**\n\t * Generates the RatingIndicator template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetRatingIndicatorTemplate: (field: FieldBlockProperties): string => {\n\t\tconst tooltip = field.ratingIndicatorTooltip || \"{sap.fe.i18n>T_COMMON_RATING_INDICATOR_TITLE_LABEL}\";\n\n\t\treturn (\n\t\t\t<RatingIndicator\n\t\t\t\tcore:require=\"{Field: 'sap/fe/macros/Field'}\"\n\t\t\t\tid={field.editStyleId}\n\t\t\t\tmaxValue={field.ratingIndicatorTargetValue}\n\t\t\t\tvalue={field.valueBindingExpression}\n\t\t\t\ttooltip={tooltip}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\ticonSize=\"1.375rem\"\n\t\t\t\tclass=\"sapUiTinyMarginTopBottom\"\n\t\t\t\teditable=\"true\"\n\t\t\t\tchange={field.eventHandlers.change as (oEvent: RatingIndicator$ChangeEvent) => void}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tlayoutData: EditStyle.getLayoutData(field)\n\t\t\t\t}}\n\t\t\t</RatingIndicator>\n\t\t);\n\t},\n\n\t/**\n\t * Helps to calculate the content edit functionality / templating.\n\t * Including a wrapper an hbox in case of collaboration mode finally\n\t * it calls internally EditStyle.getTemplate.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTemplateWithWrapper(field: FieldBlockProperties): string {\n\t\tlet contentEdit;\n\n\t\tif ((field.editMode ?? field.computedEditMode) !== FieldEditMode.Display && !!field.editStyle) {\n\t\t\tif (field.collaborationEnabled ?? false) {\n\t\t\t\tcontentEdit = (\n\t\t\t\t\t<CollaborationHBox width=\"100%\" alignItems=\"End\">\n\t\t\t\t\t\t{EditStyle.getTemplate(field)}\n\t\t\t\t\t\t{EditStyle.getCollaborationAvatar(field)}\n\t\t\t\t\t</CollaborationHBox>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcontentEdit = EditStyle.getTemplate(field);\n\t\t\t}\n\t\t}\n\n\t\treturn contentEdit || \"\";\n\t},\n\n\t/**\n\t * Generates the InputMask template.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetInputMaskTemplate(field: FieldBlockProperties): string {\n\t\tconst optionalMaskInputRules = [];\n\t\tconst dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects<DataFieldTypes>(field.metaPath, field.contextPath);\n\t\tconst textAlign = getTextAlignment(\n\t\t\tdataModelObjectPath,\n\t\t\tfield.formatOptions,\n\t\t\tfield.editModeAsObject as BindingToolkitExpression<string>\n\t\t);\n\t\tif (field.mask?.maskRule) {\n\t\t\tfor (const rule of field.mask.maskRule) {\n\t\t\t\toptionalMaskInputRules.push(<MaskInputRule maskFormatSymbol={rule.symbol} regex={rule.regex} />);\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<MaskInput\n\t\t\t\tcore:require=\"{Field: 'sap/fe/macros/Field'}\"\n\t\t\t\tid={field.editStyleId}\n\t\t\t\tvalue={field.valueBindingExpression}\n\t\t\t\tplaceholder={field.editStylePlaceholder}\n\t\t\t\twidth=\"100%\"\n\t\t\t\teditable={field.editableExpression}\n\t\t\t\tariaLabelledBy={field.ariaLabelledBy as unknown as Array<Control | string>}\n\t\t\t\tmask={field.mask?.mask}\n\t\t\t\tenabled={field.enabledExpression}\n\t\t\t\trequired={field.requiredExpression}\n\t\t\t\tfieldGroupIds={field.fieldGroupIds}\n\t\t\t\ttextAlign={textAlign}\n\t\t\t\tplaceholderSymbol={field.mask?.placeholderSymbol}\n\t\t\t\tliveChange={field.eventHandlers.liveChange as (oEvent: MaskInput$LiveChangeEvent) => void}\n\t\t\t\tvalidateFieldGroup={field.eventHandlers.validateFieldGroup as (oEvent: Control$ValidateFieldGroupEvent) => void}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\trules: optionalMaskInputRules,\n\t\t\t\t\tcustomData: <CustomData key=\"sourcePath\" value={field.dataSourcePath} />\n\t\t\t\t}}\n\t\t\t</MaskInput>\n\t\t);\n\t},\n\n\t/**\n\t * Entry point for further templating processings.\n\t * @param field Reference to the current field instance\n\t * @returns An XML-based string with the definition of the field control\n\t */\n\tgetTemplate: (field: FieldBlockProperties): string | undefined => {\n\t\tlet innerFieldContent;\n\t\tswitch (field.editStyle) {\n\t\t\tcase \"CheckBox\":\n\t\t\t\tif (field.formatOptions.useRadioButtonsForBoolean) {\n\t\t\t\t\tinnerFieldContent = EditStyle.getRadioButtonTemplate(field, true);\n\t\t\t\t} else {\n\t\t\t\t\tinnerFieldContent = EditStyle.getCheckBoxTemplate(field);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"DatePicker\":\n\t\t\tcase \"DateTimePicker\":\n\t\t\tcase \"TimePicker\": {\n\t\t\t\tinnerFieldContent = EditStyle.getDateTimePickerGeneric(field, field.editStyle);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"Input\": {\n\t\t\t\tinnerFieldContent = EditStyle.getInputTemplate(field);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"Masked\": {\n\t\t\t\tinnerFieldContent = EditStyle.getInputTemplate(field);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"InputWithValueHelp\": {\n\t\t\t\tinnerFieldContent = EditStyle.getInputWithValueHelpTemplate(field);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"RatingIndicator\":\n\t\t\t\tinnerFieldContent = EditStyle.getRatingIndicatorTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"TextArea\":\n\t\t\t\tinnerFieldContent = EditStyle.getTextAreaTemplate(field);\n\t\t\t\tbreak;\n\t\t\tcase \"InputMask\":\n\t\t\t\tinnerFieldContent = EditStyle.getInputMaskTemplate(field);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\treturn innerFieldContent;\n\t}\n};\n\nexport default EditStyle;\n"],"mappings":"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","ignoreList":[]}