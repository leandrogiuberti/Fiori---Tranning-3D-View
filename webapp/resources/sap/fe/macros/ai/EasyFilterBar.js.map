{"version":3,"file":"EasyFilterBar.js","names":["EasyFilterBar","_dec","defineUI5Class","_dec2","implementInterface","_dec3","association","type","_dec4","_dec5","property","_dec6","_dec7","aggregation","_class","_class2","_BuildingBlock","properties","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","getAppComponent","getEnvironmentCapabilities","prepareFeature","then","easyFilterPath","content","setEasyFilterLib","catch","error","Log","debug","undefined","_exports","_inheritsLoose","_proto","prototype","applyLegacyState","async","getContrilState","oNavParameters","_shouldApplyDiffState","_skipMerge","selectionVariant","selectOptionsNames","getSelectOptionsPropertyNames","filterBarMetadata","forEach","field","includes","name","defaultValue","getSelectOption","reduce","acc","option","Sign","Option","FilterOperator","BT","NB","High","push","operator","selectedValues","Low","NE","resetState","Promise","resolve","applyState","_state","_oNavParameters","retrieveState","getApplicationId","getManifestEntry","id","onMetadataAvailable","prepareFilterBarMetadata","recommendedQueries","macros","easyFilter","createContent","getUnitForProperty","prop","basePath","unitAnnotation","annotations","Measures","ISOCurrency","Unit","isPathAnnotationExpression","path","getDefaultValueForFilterField","startupParameters","hasOwnProperty","EQ","isParameter","substring","getEditStateFilterMetadata","metaModel","props","JSONModel","isDraftCollaborative","ModelHelper","isCollaborationDraftSupported","createBindingContext","editingStatusCodeList","DraftEditState","getEditStatesContext","getObject","map","state","value","description","display","label","getTranslatedText","dataType","filterable","codeList","getTokenType","filterRestriction","hasValueHelpWithFixedValues","getLabel","element","Common","Label","toString","headerInfoTypeName","isEntityType","UI","HeaderInfo","TypeName","valueOf","result","isComplexProperty","isNavigationProperty","targetType","isScalarProperty","isProperty","isComplexType","owner","_getOwner","definitionForPage","preprocessorContext","getDefinitionForPage","filterBarDef","getFilterBarDefinition","metaPath","getMetaPath","entitySet","getClosestEntitySet","filterExpressionRestrictions","Capabilities","FilterRestrictions","FilterExpressionRestrictions","navigationProperty","navigationPropertyBinding","_type","navigationPropertyEntitySet","navPropertyFilterExpressionRestrictions","currentFilterRestrictions","filter","restriction","models","getCodeList","lastPathSegment","propertyPath","getCodeListForProperty","filterFields","getFilterFields","getTarget","HiddenFilter","getComponentData","maxDepth","pathsToExplore","entityType","entityProperties","navigationProperties","pathsToEliminate","Set","getPathLabel","pathLabels","e","Localization","getRTL","slice","reverse","join","length","currentPath","shift","navigationDepth","Hidden","pathString","curr","textAnnotation","Text","add","filterField","find","expression","Property","$target","isPathFilterable","getDataModelObjectPath","filterableExpression","isConstant","filterRestrictionExpression","AllowedExpressions","metadata","required","hiddenFilter","unit","child","isCollection","some","annotationPath","startsWith","isMetaPathDraftSupported","has","defaultValueList","getValueList","valueListInfo","listBinding","$model","bindList","CollectionPath","$select","generateSelectParameter","data","requestContexts","filterGroupValues","mapValueListToCodeList","codeListProperty","resolveTokenValuesForField","fieldName","values","_ref","unresolvedResult","valueList","ValueListHelper","isValueListSearchable","resolvedTokenValues","all","resolveTokenValue","flat","maxLength","filteredTokens","token","a","b","String","filtered","selectedValue","getMetaModel","valueLists","getValueListInfo","onTokensChanged","filterBar","UI5Element","getElementById","filterBarAPI","getParent","tokens","getParameter","clearEditFilter","tokenDefinition","key","_clearFilterValuesWithOptions","formateDataTypes","tokenKeySpecification","keySpecificSelectedValues","FilterUtils","addFilterValues","f","triggerSearch","dateType","Date1","dateTimeOffsetType","DateTimeOffset","V4","timeOfDayType","TimeOfDay","edmType","keySpecificSelectedValue","requiredConverter","idx","parseValue","showValueHelpForKey","showFilterField","openValueHelpForFilterField","onBeforeQueryProcessing","uiModel","getModel","BusyLocker","lock","onAfterQueryProcessing","unlock","onClearFilters","onQueryChanged","fireFiltersChanged","conditionsBased","handleShowValueHelp","event","reject","conditions","condition","validated","conditionToResolve","warning","resolvedValues","Error","_jsx","EasyFilterBarContainer","contextPath","getOwnerContextPath","appId","easyFilterLib","showValueHelp","bind","dataFetcher","recommendedValues","queryChanged","tokensChanged","beforeQueryProcessing","afterQueryProcessing","clearFilters","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./EasyFilterBar.tsx"],"sourcesContent":["import type { ComplexType, EntitySet, EntityType, NavigationProperty, Property, TypeDefinition } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport Localization from \"sap/base/i18n/Localization\";\nimport { isConstant } from \"sap/fe/base/BindingToolkit\";\nimport type { EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport { aggregation, association, defineUI5Class, implementInterface, property, type PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport type {\n\tCodeListType,\n\tEasyFilterBarContainer$ShowValueHelpEvent,\n\tEasyFilterPropertyMetadata,\n\tTokenDefinition,\n\tTokenSelectedValuesDefinition,\n\tTokenType,\n\tValueHelpSelectedValuesDefinition\n} from \"sap/fe/controls/easyFilter/EasyFilterBarContainer\";\nimport EasyFilterBarContainer from \"sap/fe/controls/easyFilter/EasyFilterBarContainer\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport type { ControlState, NavigationParameter } from \"sap/fe/core/controllerextensions/ViewState\";\nimport type IViewStateContributor from \"sap/fe/core/controllerextensions/viewState/IViewStateContributor\";\nimport { type FilterField } from \"sap/fe/core/definition/FEDefinition\";\nimport type MetaPath from \"sap/fe/core/helpers/MetaPath\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isComplexType, isEntityType, isNavigationProperty, isPathAnnotationExpression, isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport { isPathFilterable } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasValueHelpWithFixedValues } from \"sap/fe/core/templating/PropertyHelper\";\nimport {\n\tgenerateSelectParameter,\n\tmapValueListToCodeList,\n\tresolveTokenValue,\n\tunresolvedResult\n} from \"sap/fe/macros/ai/EasyFilterDataFetcher\";\nimport type FilterBar from \"sap/fe/macros/controls/FilterBar\";\nimport FilterUtils from \"sap/fe/macros/filter/FilterUtils\";\nimport DraftEditState from \"sap/fe/macros/filterBar/DraftEditState\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport ValueListHelper, { type ValueListInfo } from \"sap/fe/macros/internal/valuehelp/ValueListHelper\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport Date1 from \"sap/ui/model/odata/type/Date\";\nimport DateTimeOffset from \"sap/ui/model/odata/type/DateTimeOffset\";\nimport type ODataType from \"sap/ui/model/odata/type/ODataType\";\nimport TimeOfDay from \"sap/ui/model/odata/type/TimeOfDay\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { CodeList } from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\n\ntype EasyFilterBarState = {};\ntype FieldMetadata = EasyFilterPropertyMetadata & { maxLength?: number };\n\n/**\n * Delivery for beta release for the easy filter feature.\n */\n@defineUI5Class(\"sap.fe.macros.EasyFilterBar\")\nexport default class EasyFilterBar extends BuildingBlock implements IViewStateContributor<EasyFilterBarState> {\n\t@implementInterface(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\")\n\t__implements__sap_fe_core_controllerextensions_viewState_IViewStateContributor!: boolean;\n\n\t@association({ type: \"sap.fe.macros.filterBar.FilterBarAPI\" })\n\tfilterBar!: string;\n\n\t@association({ type: \"sap.fe.macros.contentSwitcher.ContentSwitcher\" })\n\tcontentSwitcher!: string;\n\n\t@property({ type: \"string\" })\n\tcontentSwitcherKey?: string;\n\n\t@property({ type: \"string\" })\n\tcontextPath?: string;\n\n\t@aggregation({ type: \"sap.fe.controls.easyFilter.EasyFilterBarContainer\" })\n\tcontent?: EnhanceWithUI5<EasyFilterBarContainer>;\n\n\tprivate filterBarMetadata!: FieldMetadata[];\n\n\tprivate easyFilterPath?: string;\n\n\tprivate recommendedQueries?: string[];\n\n\tconstructor(properties: $ControlSettings & PropertiesOf<EasyFilterBar>, others?: $ControlSettings) {\n\t\tsuper(properties, others);\n\t\tthis.getAppComponent()\n\t\t\t?.getEnvironmentCapabilities()\n\t\t\t.prepareFeature(\"MagicFiltering\")\n\t\t\t.then(() => {\n\t\t\t\tthis.easyFilterPath = \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\n\t\t\t\tthis.content?.setEasyFilterLib(this.easyFilterPath);\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tLog.debug(\"Error while loading EasyFilter\", error);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\tasync applyLegacyState(\n\t\tgetContrilState?: (control: ManagedObject) => ControlState,\n\t\toNavParameters?: NavigationParameter,\n\t\t_shouldApplyDiffState?: boolean,\n\t\t_skipMerge?: boolean\n\t): Promise<void> {\n\t\tif (oNavParameters?.selectionVariant) {\n\t\t\tconst selectOptionsNames = oNavParameters.selectionVariant.getSelectOptionsPropertyNames();\n\t\t\tthis.filterBarMetadata.forEach((field) => {\n\t\t\t\tif (selectOptionsNames.includes(field.name)) {\n\t\t\t\t\tfield.defaultValue = oNavParameters.selectionVariant!.getSelectOption(field.name)?.reduce((acc, option) => {\n\t\t\t\t\t\tif (option.Sign === \"I\") {\n\t\t\t\t\t\t\tif (option.Option === FilterOperator.BT || option.Option === FilterOperator.NB) {\n\t\t\t\t\t\t\t\tif (option.High !== null && option.High !== undefined) {\n\t\t\t\t\t\t\t\t\tacc.push({ operator: option.Option, selectedValues: [option.Low, option.High] });\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tacc.push({\n\t\t\t\t\t\t\t\t\toperator: option.Option as Exclude<FilterOperator, FilterOperator.BT | FilterOperator.NB>,\n\t\t\t\t\t\t\t\t\tselectedValues: [option.Low]\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tacc.push({ operator: FilterOperator.NE, selectedValues: [option.Low] });\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}, [] as TokenSelectedValuesDefinition[]);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.content?.resetState(false);\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tapplyState(_state: EasyFilterBarState, _oNavParameters?: NavigationParameter): Promise<void> | void {\n\t\treturn undefined;\n\t}\n\n\tretrieveState(): EasyFilterBarState | null {\n\t\treturn {};\n\t}\n\n\tgetApplicationId(): string {\n\t\treturn this.getAppComponent()?.getManifestEntry(\"sap.app\").id ?? \"<unknownID>\";\n\t}\n\n\tonMetadataAvailable(): void {\n\t\tthis.filterBarMetadata = this.prepareFilterBarMetadata();\n\t\tthis.recommendedQueries = this.getAppComponent()?.getManifestEntry(\"sap.fe\")?.macros?.easyFilter?.recommendedQueries ?? [];\n\t\tthis.content = this.createContent() as EnhanceWithUI5<EasyFilterBarContainer>;\n\t\tthis.content.filterBarMetadata = this.filterBarMetadata;\n\t}\n\n\tprivate getUnitForProperty(prop: Property, basePath: string): string | undefined {\n\t\tconst unitAnnotation = prop.annotations.Measures?.ISOCurrency ?? prop.annotations.Measures?.Unit;\n\t\treturn isPathAnnotationExpression(unitAnnotation) ? `${basePath}/${unitAnnotation.path}` : undefined;\n\t}\n\n\tprivate getDefaultValueForFilterField(\n\t\tfield: FilterField,\n\t\tstartupParameters: Record<string, unknown>\n\t): TokenSelectedValuesDefinition[] | undefined {\n\t\tlet defaultValue: TokenSelectedValuesDefinition[] | undefined;\n\t\tif (startupParameters.hasOwnProperty(field.name)) {\n\t\t\tdefaultValue = [\n\t\t\t\t{\n\t\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\t\tselectedValues: startupParameters[field.name] as TokenSelectedValuesDefinition[\"selectedValues\"]\n\t\t\t\t}\n\t\t\t];\n\t\t} else if (field.isParameter && startupParameters.hasOwnProperty(field.name.substring(2))) {\n\t\t\tdefaultValue = [\n\t\t\t\t{\n\t\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\t\tselectedValues: startupParameters[field.name.substring(2)] as TokenSelectedValuesDefinition[\"selectedValues\"]\n\t\t\t\t}\n\t\t\t];\n\t\t}\n\t\treturn defaultValue;\n\t}\n\n\tprivate getEditStateFilterMetadata(metaModel: ODataMetaModel): FieldMetadata {\n\t\t// Assemble the code list for the editing status filter values:\n\t\tconst props = new JSONModel({\n\t\t\tisDraftCollaborative: ModelHelper.isCollaborationDraftSupported(metaModel)\n\t\t}).createBindingContext(\"/\");\n\n\t\tconst editingStatusCodeList = DraftEditState.getEditStatesContext(props)\n\t\t\t.getObject(\"/\")\n\t\t\t.map((state: { id: string; display: string }) => ({ value: state.id, description: state.display }));\n\n\t\treturn {\n\t\t\tname: \"$editState\",\n\t\t\tlabel: this.getTranslatedText(\"FILTERBAR_EDITING_STATUS\"),\n\t\t\tdataType: \"Edm.String\",\n\t\t\tfilterable: true,\n\t\t\tcodeList: editingStatusCodeList,\n\t\t\ttype: \"MenuWithSingleSelect\"\n\t\t};\n\t}\n\n\tprivate getTokenType(prop: Property, filterRestriction: string): TokenType {\n\t\tif (hasValueHelpWithFixedValues(prop)) {\n\t\t\treturn filterRestriction === \"SingleValue\" ? \"MenuWithSingleSelect\" : \"MenuWithCheckBox\";\n\t\t}\n\t\tswitch (prop.type) {\n\t\t\tcase \"Edm.Date\":\n\t\t\t\treturn \"Calendar\";\n\t\t\tcase \"Edm.TimeOfDay\":\n\t\t\t\treturn \"Time\";\n\t\t\tdefault:\n\t\t\t\treturn \"ValueHelp\";\n\t\t}\n\t}\n\n\tprivate getLabel(element: Property | NavigationProperty | EntityType | ComplexType): string | undefined {\n\t\tconst label = element.annotations.Common?.Label?.toString();\n\t\tconst headerInfoTypeName = isEntityType(element) ? (element.annotations.UI?.HeaderInfo?.TypeName?.valueOf() as string) : undefined;\n\t\tconst result = headerInfoTypeName || label;\n\n\t\tif (this.isComplexProperty(element) || isNavigationProperty(element)) {\n\t\t\treturn result || this.getLabel(element.targetType);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate isScalarProperty(element: unknown): element is Property & { targetType?: TypeDefinition } {\n\t\treturn isProperty(element) && !isComplexType(element.targetType);\n\t}\n\n\tprivate isComplexProperty(element: unknown): element is Property & { targetType: ComplexType } {\n\t\treturn isProperty(element) && isComplexType(element.targetType);\n\t}\n\n\tprepareFilterBarMetadata(): FieldMetadata[] {\n\t\t/*\n\t\t * 1. INITIALIZATION:\n\t\t *    - Queue all root entity properties and navigation properties for traversal\n\t\t *    - Initialize result array and elimination set for Common.Text targets\n\t\t *\n\t\t * 2. BREADTH-FIRST TRAVERSAL:\n\t\t *    For each path in queue:\n\t\t *    - Skip UI.Hidden properties\n\t\t *    - Scalar properties: Generate metadata, track Common.Text targets for elimination\n\t\t *    - Complex properties: Add child properties to queue\n\t\t *    - Navigation properties: Add target EntityType properties to queue\n\t\t *      (Collections only if explicit filter fields exist, respect depth limits)\n\t\t *\n\t\t * 3. POST-PROCESSING:\n\t\t *    - Add $editState filter for draft-enabled entities\n\t\t *    - Remove properties marked for elimination (except explicit filter fields)\n\t\t */\n\t\tconst owner = this._getOwner()!;\n\t\tconst definitionForPage = owner.preprocessorContext?.getDefinitionForPage();\n\n\t\tif (!definitionForPage) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst filterBarDef = definitionForPage.getFilterBarDefinition({});\n\t\tconst metaPath = definitionForPage.getMetaPath();\n\t\tconst entitySet = metaPath.getClosestEntitySet() as EntitySet;\n\n\t\tlet filterExpressionRestrictions = entitySet.annotations.Capabilities?.FilterRestrictions?.FilterExpressionRestrictions ?? [];\n\n\t\t// TODO: Maybe we can simplify this by using restrictions on the main entity set only\n\t\tfor (const navigationProperty in entitySet.navigationPropertyBinding) {\n\t\t\tif (entitySet.navigationPropertyBinding[navigationProperty]?._type === \"EntitySet\") {\n\t\t\t\t// FIXME: optional chaining should not be needed here -> root cause fix pending\n\t\t\t\tconst navigationPropertyEntitySet = entitySet.navigationPropertyBinding[navigationProperty] as EntitySet;\n\t\t\t\tconst navPropertyFilterExpressionRestrictions =\n\t\t\t\t\tnavigationPropertyEntitySet.annotations.Capabilities?.FilterRestrictions?.FilterExpressionRestrictions ?? [];\n\n\t\t\t\tconst currentFilterRestrictions = [...filterExpressionRestrictions];\n\t\t\t\tfilterExpressionRestrictions = [\n\t\t\t\t\t...filterExpressionRestrictions,\n\t\t\t\t\t...navPropertyFilterExpressionRestrictions.filter((restriction) => !currentFilterRestrictions.includes(restriction))\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\n\t\tconst metaModel = owner.preprocessorContext?.models.metaModel as ODataMetaModel;\n\n\t\tconst getCodeList = (lastPathSegment: Property, propertyPath: string): CodeList | (() => Promise<CodeList>) | undefined =>\n\t\t\thasValueHelpWithFixedValues(lastPathSegment)\n\t\t\t\t? async (): Promise<CodeList> => this.getCodeListForProperty(propertyPath)\n\t\t\t\t: undefined;\n\n\t\tconst filterFields = filterBarDef\n\t\t\t.getFilterFields()\n\t\t\t.filter((field: FilterField) => !field.getTarget()?.annotations?.UI?.HiddenFilter?.valueOf());\n\n\t\tconst startupParameters = owner.getAppComponent().getComponentData()?.startupParameters ?? {};\n\n\t\tconst maxDepth = 1; // Maximum depth for navigation properties\n\n\t\t// Initialize traversal queue with all entity properties and navigation properties.\n\t\t// Each path to traverse is a list of segments (e.g. [navProp1, complexProp1, complexProp2, scalarProp])\n\t\tconst pathsToExplore: (Property | NavigationProperty)[][] = [\n\t\t\t...entitySet.entityType.entityProperties,\n\t\t\t...entitySet.entityType.navigationProperties\n\t\t].map((element) => [element]);\n\n\t\t// Resulting metadata array\n\t\tconst result: EasyFilterPropertyMetadata[] = [];\n\n\t\t// Set of property paths to be eliminated from the filter bar metadata\n\t\tconst pathsToEliminate = new Set<string>();\n\n\t\tconst getPathLabel = (path: (Property | NavigationProperty)[]): string => {\n\t\t\tconst pathLabels = path.map((e) => this.getLabel(e) || `[${e.name}]`);\n\t\t\treturn Localization.getRTL() ? pathLabels.slice().reverse().join(\" - \") : pathLabels.join(\" - \");\n\t\t};\n\n\t\twhile (pathsToExplore.length > 0) {\n\t\t\tconst currentPath = pathsToExplore.shift()!;\n\n\t\t\tconst navigationDepth = currentPath.filter(isNavigationProperty).length;\n\n\t\t\tconst lastPathSegment = currentPath[currentPath.length - 1];\n\n\t\t\tif (lastPathSegment.annotations.UI?.Hidden?.valueOf() === true) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst pathString = [`/${entitySet.name}`, ...currentPath.slice(0, -1).map((e) => e.name)].reduce(\n\t\t\t\t(acc, curr) => `${acc}/${curr}`\n\t\t\t);\n\t\t\tconst propertyPath = `${pathString}/${lastPathSegment.name}`;\n\n\t\t\tif (this.isScalarProperty(lastPathSegment)) {\n\t\t\t\t// Check for Common.Text annotation and record the annotation target path for elimination\n\t\t\t\tconst textAnnotation = lastPathSegment.annotations.Common?.Text;\n\t\t\t\tif (isPathAnnotationExpression(textAnnotation)) {\n\t\t\t\t\t// Construct the full path to the target property\n\t\t\t\t\tpathsToEliminate.add(`${pathString}/${textAnnotation.path}`);\n\t\t\t\t}\n\n\t\t\t\t// Scalar property: create metadata for the property\n\t\t\t\tconst filterField = filterFields.find((field) => field.getTarget() === lastPathSegment);\n\t\t\t\tconst filterRestriction = filterExpressionRestrictions.find(\n\t\t\t\t\t(expression) => expression.Property?.$target === lastPathSegment\n\t\t\t\t);\n\t\t\t\tconst filterable = isPathFilterable(this.getDataModelObjectPath(propertyPath));\n\t\t\t\tconst filterableExpression = isConstant(filterable) ? filterable.value : true;\n\t\t\t\tconst filterRestrictionExpression = filterRestriction?.AllowedExpressions as\n\t\t\t\t\t| EasyFilterPropertyMetadata[\"filterRestriction\"]\n\t\t\t\t\t| undefined;\n\t\t\t\tconst codeList = getCodeList(lastPathSegment, propertyPath);\n\t\t\t\tconst metadata: EasyFilterPropertyMetadata = {\n\t\t\t\t\tname: propertyPath,\n\t\t\t\t\tlabel: getPathLabel(currentPath),\n\t\t\t\t\tdataType: lastPathSegment.type,\n\t\t\t\t\trequired: filterField?.required,\n\t\t\t\t\tdefaultValue: filterField ? this.getDefaultValueForFilterField(filterField, startupParameters) : undefined,\n\t\t\t\t\tfilterable: filterField ? filterableExpression : undefined,\n\t\t\t\t\thiddenFilter: !filterField,\n\t\t\t\t\tfilterRestriction: filterField ? filterRestrictionExpression : undefined,\n\t\t\t\t\tcodeList,\n\t\t\t\t\ttype: this.getTokenType(\n\t\t\t\t\t\tlastPathSegment,\n\t\t\t\t\t\tfilterRestriction?.AllowedExpressions?.toString() || \"MultiRangeOrSearchExpression\"\n\t\t\t\t\t) as Exclude<TokenType, \"ValueHelp\">,\n\t\t\t\t\tunit: this.getUnitForProperty(lastPathSegment, pathString)\n\t\t\t\t};\n\t\t\t\tresult.push(metadata);\n\t\t\t} else if (this.isComplexProperty(lastPathSegment)) {\n\t\t\t\t// Complex property: add all properties and navigation properties of the complex type\n\t\t\t\tlastPathSegment.targetType.properties.forEach((child) => {\n\t\t\t\t\tpathsToExplore.push([...currentPath, child]);\n\t\t\t\t});\n\n\t\t\t\t// only traverse navigation properties if we are not at the maximum depth\n\t\t\t\tif (navigationDepth < maxDepth) {\n\t\t\t\t\tlastPathSegment.targetType.navigationProperties.forEach((child) => {\n\t\t\t\t\t\tpathsToExplore.push([...currentPath, child]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (isNavigationProperty(lastPathSegment)) {\n\t\t\t\t// add 1:n navigation properties only if there are filter fields for at least one of the target properties\n\t\t\t\tif (lastPathSegment.isCollection && !filterFields.some((field) => field.annotationPath?.startsWith(propertyPath))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlastPathSegment.targetType.entityProperties.forEach((child) => {\n\t\t\t\t\tpathsToExplore.push([...currentPath, child]);\n\t\t\t\t});\n\n\t\t\t\t// only traverse navigation properties if we are not at the maximum depth\n\t\t\t\tif (navigationDepth < maxDepth) {\n\t\t\t\t\tlastPathSegment.targetType.navigationProperties.forEach((child) => {\n\t\t\t\t\t\tpathsToExplore.push([...currentPath, child]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// [Editing Status]\n\t\tif (ModelHelper.isMetaPathDraftSupported(definitionForPage.getMetaPath() as unknown as MetaPath<unknown>)) {\n\t\t\tresult.push(this.getEditStateFilterMetadata(metaModel));\n\t\t}\n\n\t\t// Remove properties marked for elimination (unless they are filter fields)\n\t\treturn result.filter((metadata) => {\n\t\t\treturn (\n\t\t\t\t!metadata.hiddenFilter || // Keep if explicit filter field\n\t\t\t\t!pathsToEliminate.has(metadata.name) // Keep if path not marked for elimination\n\t\t\t);\n\t\t});\n\t}\n\n\tasync getCodeListForProperty(propertyPath: string): Promise<CodeList> {\n\t\tconst defaultValueList = await this.getValueList(propertyPath);\n\n\t\tif (!defaultValueList) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst valueListInfo = defaultValueList.valueListInfo;\n\n\t\tconst listBinding = valueListInfo.$model.bindList(`/${valueListInfo.CollectionPath}`, undefined, undefined, undefined, {\n\t\t\t$select: generateSelectParameter(defaultValueList)\n\t\t});\n\t\tconst data = await listBinding.requestContexts();\n\n\t\tconst filterGroupValues = data.map(mapValueListToCodeList(defaultValueList));\n\t\tconst codeListProperty = this.filterBarMetadata.find((field) => field.name === propertyPath);\n\t\tif (codeListProperty) {\n\t\t\tcodeListProperty.codeList = filterGroupValues;\n\t\t}\n\t\treturn filterGroupValues;\n\t}\n\n\tasync resolveTokenValuesForField(\n\t\tfieldName: string,\n\t\tvalues: TokenSelectedValuesDefinition[]\n\t): Promise<ValueHelpSelectedValuesDefinition[]> {\n\t\tconst field = this.filterBarMetadata.find(({ name }) => name === fieldName);\n\t\tlet result: ValueHelpSelectedValuesDefinition[];\n\n\t\tif (!field) {\n\t\t\t// return original values converted to the expected format if no field is defined\n\t\t\treturn unresolvedResult(values);\n\t\t}\n\t\tconst valueList = await this.getValueList(field.name);\n\n\t\tif (valueList && ValueListHelper.isValueListSearchable(field.name, valueList)) {\n\t\t\tconst resolvedTokenValues = await Promise.all(values.map(async (value) => resolveTokenValue(valueList, value)));\n\t\t\tresult = resolvedTokenValues.flat();\n\t\t} else {\n\t\t\tresult = unresolvedResult(values);\n\t\t}\n\n\t\t// Apply maxLength filtering if defined\n\t\tif (field.maxLength !== undefined) {\n\t\t\tconst filteredTokens = result\n\t\t\t\t.map((token) => {\n\t\t\t\t\tif (token.operator === FilterOperator.BT || token.operator === FilterOperator.NB) {\n\t\t\t\t\t\t// Handle between operators - selectedValues is ValueHelpBetweenSelectedValues\n\t\t\t\t\t\tconst [a, b] = token.selectedValues;\n\n\t\t\t\t\t\t// Check if both values exceed maxLength\n\t\t\t\t\t\tif (String(a.value).length <= field.maxLength! && String(b.value).length <= field.maxLength!) {\n\t\t\t\t\t\t\treturn token; // Keep the token if both values are within limit\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null; // Remove the token if either value exceeds limit\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Handle other operators - selectedValues is CodeListType[]\n\t\t\t\t\t\tconst filtered: CodeListType[] = token.selectedValues.filter(\n\t\t\t\t\t\t\t(selectedValue) => String(selectedValue.value).length <= field.maxLength!\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// Only return the token if there are remaining values after filtering\n\t\t\t\t\t\tif (filtered.length > 0) {\n\t\t\t\t\t\t\treturn { ...token, selectedValues: filtered };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null; // Remove the token if no values remain\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter((token): token is ValueHelpSelectedValuesDefinition => token !== null);\n\n\t\t\treturn filteredTokens;\n\t\t}\n\n\t\t// if no maxLength is defined, return unfiltered result\n\t\treturn result;\n\t}\n\n\tasync getValueList(fieldName: string): Promise<ValueListInfo | undefined> {\n\t\tconst metaModel = this.getMetaModel()!;\n\t\tconst valueLists = await ValueListHelper.getValueListInfo(undefined, fieldName, undefined, metaModel);\n\t\treturn valueLists[0];\n\t}\n\n\tasync onTokensChanged(e: UI5Event<{ tokens: TokenDefinition[] }, EasyFilterBarContainer>): Promise<void> {\n\t\tconst filterBar = UI5Element.getElementById(this.filterBar) as FilterBar;\n\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\tconst tokens = e.getParameter(\"tokens\");\n\t\tconst clearEditFilter = tokens.some((tokenDefinition) => tokenDefinition.key === \"$editState\");\n\t\tawait filterBarAPI._clearFilterValuesWithOptions(filterBar, { clearEditFilter });\n\t\tthis.formateDataTypes(tokens);\n\n\t\tfor (const token of tokens) {\n\t\t\tif (token.key === \"$editState\") {\n\t\t\t\t// convert the $editState filter condition\n\t\t\t\tfor (const tokenKeySpecification of token.keySpecificSelectedValues) {\n\t\t\t\t\tawait FilterUtils.addFilterValues(\n\t\t\t\t\t\tfilterBarAPI.content,\n\t\t\t\t\t\ttoken.key,\n\t\t\t\t\t\t\"DRAFT_EDIT_STATE\",\n\t\t\t\t\t\ttokenKeySpecification.selectedValues\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst field = this.filterBarMetadata.find((f) => f.name === token.key)!;\n\t\t\t\tfor (const tokenKeySpecification of token.keySpecificSelectedValues) {\n\t\t\t\t\tconst { operator, selectedValues } = tokenKeySpecification;\n\t\t\t\t\tawait FilterUtils.addFilterValues(filterBarAPI.content, field.name, operator, selectedValues);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait filterBarAPI.triggerSearch();\n\t}\n\n\t//We need the below function so that the date objects and dateTimeOffsets would be converted to string type as the date object is not a valid type in V4 world\n\tformateDataTypes(tokens: TokenDefinition[]): void {\n\t\tconst dateType = new Date1(),\n\t\t\tdateTimeOffsetType = new DateTimeOffset(undefined, { V4: true }),\n\t\t\ttimeOfDayType = new TimeOfDay();\n\t\ttokens.forEach((token) => {\n\t\t\tconst edmType = this.filterBarMetadata.find((data) => data.name === token.key)?.dataType;\n\t\t\ttoken.keySpecificSelectedValues.forEach((keySpecificSelectedValue) => {\n\t\t\t\tlet requiredConverter: ODataType;\n\t\t\t\tswitch (edmType) {\n\t\t\t\t\tcase \"Edm.Date\":\n\t\t\t\t\t\trequiredConverter = dateType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Edm.TimeOfDay\":\n\t\t\t\t\t\trequiredConverter = timeOfDayType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"Edm.DateTimeOffset\":\n\t\t\t\t\t\trequiredConverter = dateTimeOffsetType;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tkeySpecificSelectedValue.selectedValues.forEach((value, idx) => {\n\t\t\t\t\tkeySpecificSelectedValue.selectedValues[idx] = requiredConverter.parseValue(value, \"object\");\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tasync showValueHelpForKey(key: string): Promise<ConditionObject[]> {\n\t\tconst field = this.filterBarMetadata.find((f) => f.name === key)!;\n\t\tconst filterBar = UI5Element.getElementById(this.filterBar) as FilterBar;\n\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\tawait filterBarAPI.showFilterField(field.name);\n\t\treturn filterBarAPI.openValueHelpForFilterField(field.name);\n\t}\n\n\tonBeforeQueryProcessing(): void {\n\t\tconst uiModel = this.getModel(\"ui\") as JSONModel;\n\t\tBusyLocker.lock(uiModel);\n\t}\n\n\tonAfterQueryProcessing(): void {\n\t\tconst uiModel = this.getModel(\"ui\") as JSONModel;\n\t\tBusyLocker.unlock(uiModel);\n\t}\n\n\tasync onClearFilters(): Promise<void> {\n\t\t// Empty input: clear the filters and refresh the list\n\t\tconst filterBar = UI5Element.getElementById(this.filterBar) as FilterBar;\n\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\tawait filterBarAPI._clearFilterValuesWithOptions(filterBar);\n\t\tawait filterBarAPI.triggerSearch();\n\t}\n\n\tonQueryChanged(): void {\n\t\tconst filterBar = UI5Element.getElementById(this.filterBar) as FilterBar;\n\t\tfilterBar.fireFiltersChanged({ conditionsBased: true });\n\t}\n\n\tprivate async handleShowValueHelp(event: EasyFilterBarContainer$ShowValueHelpEvent): Promise<void> {\n\t\tconst key = event.getParameter(\"key\");\n\t\tconst resolve = event.getParameter(\"resolve\");\n\t\tconst reject = event.getParameter(\"reject\");\n\n\t\ttry {\n\t\t\tconst conditions = await this.showValueHelpForKey(key);\n\n\t\t\tconst selectedValues = conditions.map(async (condition) => {\n\t\t\t\tconst operator = condition.operator as FilterOperator;\n\n\t\t\t\tif (condition.validated === \"NotValidated\") {\n\t\t\t\t\t// not validated: the condition only has values without description - try to get the description using the data fetcher mechanism.\n\t\t\t\t\t// `condition.values` is a single value `[value]` (or `[lower bound, upper bound]` for BT/NB operators).\n\t\t\t\t\tconst conditionToResolve: TokenSelectedValuesDefinition =\n\t\t\t\t\t\toperator === FilterOperator.BT || operator === FilterOperator.NB\n\t\t\t\t\t\t\t? { operator, selectedValues: [condition.values[0], condition.values[1]] }\n\t\t\t\t\t\t\t: { operator, selectedValues: [condition.values[0]] };\n\n\t\t\t\t\treturn this.resolveTokenValuesForField(key, [conditionToResolve]);\n\t\t\t\t} else if (operator !== FilterOperator.BT && operator !== FilterOperator.NB) {\n\t\t\t\t\t// validated: both value and description are available - directly map them to the result\n\t\t\t\t\t// `condition.values` is a tuple of `[value, description?]`\n\t\t\t\t\tconst [value, description] = condition.values as [string | number | boolean, string | undefined];\n\t\t\t\t\treturn Promise.resolve([{ operator, selectedValues: [{ value, description: description ?? value }] }]);\n\t\t\t\t} else {\n\t\t\t\t\t// should not occur: BT/NB are expected to be \"NotValidated\" conditions\n\t\t\t\t\tLog.warning(`Unexpected condition for field ${key}: operator ${operator} with values ${condition.values}.`);\n\t\t\t\t\treturn Promise.resolve([]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst resolvedValues = await Promise.all(selectedValues);\n\t\t\tresolve(resolvedValues.flat());\n\t\t} catch (error) {\n\t\t\treject(error instanceof Error ? error : new Error(String(error)));\n\t\t}\n\t}\n\n\tcreateContent(): EasyFilterBarContainer {\n\t\treturn (\n\t\t\t<EasyFilterBarContainer\n\t\t\t\tcontextPath={this.getOwnerContextPath()}\n\t\t\t\tappId={this.getApplicationId()}\n\t\t\t\tfilterBarMetadata={this.filterBarMetadata}\n\t\t\t\teasyFilterLib={this.easyFilterPath}\n\t\t\t\tshowValueHelp={this.handleShowValueHelp.bind(this)}\n\t\t\t\tdataFetcher={this.resolveTokenValuesForField.bind(this)}\n\t\t\t\trecommendedValues={this.recommendedQueries}\n\t\t\t\tqueryChanged={this.onQueryChanged.bind(this)}\n\t\t\t\ttokensChanged={this.onTokensChanged.bind(this)}\n\t\t\t\tbeforeQueryProcessing={this.onBeforeQueryProcessing.bind(this)}\n\t\t\t\tafterQueryProcessing={this.onAfterQueryProcessing.bind(this)}\n\t\t\t\tclearFilters={this.onClearFilters.bind(this)}\n\t\t\t/>\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}