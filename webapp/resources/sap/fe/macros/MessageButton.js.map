{"version":3,"file":"MessageButton.js","names":["MessageButton","_dec","defineUI5Class","_dec2","event","_class","_class2","_BuildingBlock","idOrSettings","settings","_this","call","this","_initializerDefineProperty","_descriptor","_messageItemMessageDetailMap","_exports","_inheritsLoose","_proto","prototype","onMetadataAvailable","content","createContent","_messageModel","Messaging","getMessageModel","_mmPropertyBinding","bindProperty","attachChange","processMessages","eventDelegate","onBeforeRendering","removeEventDelegate","addEventDelegate","async","messages","getData","messageDetails","reduce","reducedMessages","message","isBound","getTargets","length","isMessageTechnical","getTechnical","push","getPageController","messageHandler","beforeShowMessageButton","adjustMessageButtonProperties","messagePriorityMap","Error","Warning","Success","Information","None","availableHighestPriority","errorCount","messageItems","messageDetail","messageType","getType","messagePriority","MessageType","createMessageItem","getContent","setText","toString","prioritizedButtonType","ButtonType","Negative","Critical","Neutral","Default","setType","prioritizedToolTipKey","tooltipKey","tooltipText","getTranslatedText","setTooltip","getVisible","setVisible","fireEvent","visible","createMessagePopover","messageItem","_jsx","MessageItem","title","getMessage","description","getDescription","type","markupDescription","longtextUrl","getDescriptionUrl","subtitle","getAdditionalText","groupName","activeTitle","getControlIds","activeTitleHandler","getId","_messagePopover","destroy","MessagePopover","groupItems","activeTitlePress","pressEvent","getParameter","handleActiveTitlePress","children","items","addDependent","setTimeout","openBy","controlId","getControlId","control","UI5Element","getElementById","focus","Log","error","toggleMessagePopover","toggle","Button","press","bind","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./MessageButton.tsx"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type { PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport { defineUI5Class, event } from \"sap/fe/base/ClassSupport\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport type { MessageDetail } from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport Button from \"sap/m/Button\";\nimport MessageItem from \"sap/m/MessageItem\";\nimport type { MessagePopover$ActiveTitlePressEvent } from \"sap/m/MessagePopover\";\nimport MessagePopover from \"sap/m/MessagePopover\";\nimport { ButtonType } from \"sap/m/library\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type PropertyBinding from \"sap/ui/model/PropertyBinding\";\nimport type MessageModel from \"sap/ui/model/message/MessageModel\";\n\n/**\n * Building block used to show bound messages.\n *\n * The Message Button Building Block gets the bound messages from the MessageModel.\n *\n * Usage example:\n *\n * <pre>\n * &lt;macros:MessageButton visibilityChange=\".handler.onMessageButtonVisibilityChange\" /&gt;\n * </pre>\n * @public\n */\n@defineUI5Class(\"sap.fe.macros.MessageButton\")\nexport default class MessageButton extends BuildingBlock<Button> {\n\t/**\n\t * The event is triggered when the message button's visibility changes.\n\t * @public\n\t */\n\t@event()\n\tvisibilityChange!: Function;\n\n\t_messageModel!: MessageModel;\n\n\t_messagePopover!: MessagePopover;\n\n\t_mmPropertyBinding!: PropertyBinding;\n\n\t_messageItemMessageDetailMap: Record<string, MessageDetail> = {};\n\n\tconstructor(idOrSettings?: string | PropertiesOf<MessageButton>, settings?: PropertiesOf<MessageButton>) {\n\t\tsuper(idOrSettings, settings);\n\t}\n\t/**\n\t * Handler for the onMetadataAvailable event.\n\t */\n\tonMetadataAvailable(): void {\n\t\tif (!this.content) {\n\t\t\tthis.content = this.createContent();\n\t\t}\n\t\t// get the message model and attach to it's change event.\n\t\tthis._messageModel = Messaging.getMessageModel();\n\t\tthis._mmPropertyBinding = this._messageModel.bindProperty(\"/\");\n\t\tthis._mmPropertyBinding.attachChange(this.processMessages, this);\n\t\tconst eventDelegate = {\n\t\t\tonBeforeRendering: (): void => {\n\t\t\t\tthis.processMessages();\n\t\t\t\tthis.removeEventDelegate(eventDelegate);\n\t\t\t}\n\t\t};\n\t\tthis.addEventDelegate(eventDelegate);\n\t}\n\n\t/**\n\t * Processes messages in the message model.\n\t *\n\t * Filters out the bound and non technical messages from the message model\n\t * And calls the MessageHandler.beforeShowMessageButton controller extension to allow consumers to adapt the messages that will be shown.\n\t *\n\t * Additionally, it adjusts the message button's proeprties based on the messages to be shown.\n\t *\n\t */\n\tasync processMessages(): Promise<void> {\n\t\tconst messages: Message[] = this._messageModel?.getData();\n\n\t\t// get bound messages.\n\t\tconst messageDetails = messages.reduce((reducedMessages: MessageDetail[], message): MessageDetail[] => {\n\t\t\tconst isBound = message.getTargets().length > 0;\n\t\t\tconst isMessageTechnical = message.getTechnical();\n\t\t\tif (isBound && !isMessageTechnical) {\n\t\t\t\treducedMessages.push({ message });\n\t\t\t}\n\t\t\treturn reducedMessages;\n\t\t}, []);\n\n\t\tif (messageDetails && messageDetails.length > 0) {\n\t\t\tawait this.getPageController().messageHandler.beforeShowMessageButton(messageDetails);\n\t\t}\n\t\tthis.adjustMessageButtonProperties(messageDetails);\n\t}\n\n\t/**\n\t * Adjusts the message button properties and creates a message popover to show the messages.\n\t *\n\t * Sets the messages buttons properties on the basis of messages to be shown.\n\t * The properties of the messages button is determined on the basis of the priority of messages to be shown.\n\t *\n\t * Additionally, creates a message popover to show the messages.\n\t * @param messageDetails Message details used to render each message item.\n\t */\n\tadjustMessageButtonProperties(messageDetails: MessageDetail[]): void {\n\t\tthis._messageItemMessageDetailMap = {};\n\t\tif (messageDetails && messageDetails.length > 0) {\n\t\t\tconst messagePriorityMap = {\n\t\t\t\tError: 0,\n\t\t\t\tWarning: 1,\n\t\t\t\tSuccess: 2,\n\t\t\t\tInformation: 3,\n\t\t\t\tNone: 4\n\t\t\t};\n\n\t\t\tlet availableHighestPriority = messagePriorityMap.None; // we start from the lowest\n\t\t\tlet errorCount = 0;\n\t\t\tconst messageItems: MessageItem[] = [];\n\t\t\tfor (const messageDetail of messageDetails) {\n\t\t\t\tconst message = messageDetail.message;\n\t\t\t\tconst messageType = message.getType();\n\t\t\t\tconst messagePriority = messagePriorityMap[messageType];\n\t\t\t\tif (messagePriority < availableHighestPriority) {\n\t\t\t\t\tavailableHighestPriority = messagePriority;\n\t\t\t\t}\n\t\t\t\tif (messageType === MessageType.Error) {\n\t\t\t\t\terrorCount++;\n\t\t\t\t}\n\t\t\t\tmessageItems.push(this.createMessageItem(messageDetail));\n\t\t\t}\n\n\t\t\t// set properties on the message buttons\n\n\t\t\t// setText\n\t\t\tthis.getContent()?.setText(messageDetails.length.toString());\n\n\t\t\t// setType\n\t\t\tconst prioritizedButtonType = [\n\t\t\t\tButtonType.Negative,\n\t\t\t\tButtonType.Critical,\n\t\t\t\tButtonType.Success,\n\t\t\t\tButtonType.Neutral,\n\t\t\t\tButtonType.Default\n\t\t\t];\n\t\t\tthis.getContent()?.setType(prioritizedButtonType[availableHighestPriority]);\n\n\t\t\t// setTooltip\n\t\t\tconst prioritizedToolTipKey = [\n\t\t\t\t\"C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR\",\n\t\t\t\t\"C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_WARNING_TOOLTIP\",\n\t\t\t\t\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_SUCCESS\",\n\t\t\t\t\"C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_INFO\",\n\t\t\t\t\"\"\n\t\t\t];\n\t\t\tconst tooltipKey =\n\t\t\t\terrorCount > 1\n\t\t\t\t\t? \"C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_MULTIPLE_ERROR_TOOLTIP\"\n\t\t\t\t\t: prioritizedToolTipKey[availableHighestPriority];\n\t\t\tlet tooltipText = this.getTranslatedText(tooltipKey);\n\t\t\tif (errorCount > 1) {\n\t\t\t\ttooltipText = `${errorCount}  ${tooltipText}`;\n\t\t\t}\n\t\t\tthis.getContent()?.setTooltip(tooltipText);\n\n\t\t\t// setVisible\n\t\t\tif (!this.getContent()?.getVisible()) {\n\t\t\t\tthis.getContent()?.setVisible(true);\n\t\t\t\tthis.fireEvent(\"visibilityChange\", { visible: this.getContent()?.getVisible() });\n\t\t\t}\n\n\t\t\t// also show the message popover\n\t\t\tthis.createMessagePopover(messageItems);\n\t\t}\n\n\t\tif (messageDetails.length === 0) {\n\t\t\tif (this.getContent()?.getVisible()) {\n\t\t\t\tthis.getContent()?.setVisible(false);\n\t\t\t\tthis.fireEvent(\"visibilityChange\", { visible: this.getContent()?.getVisible() });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Creates a message Item.\n\t * @param messageDetail Message detail relevant for creating the message item.\n\t * @returns MessageItem created from Message Detail\n\t */\n\tcreateMessageItem(messageDetail: MessageDetail): MessageItem {\n\t\tconst message = messageDetail.message;\n\t\tconst messageItem = (\n\t\t\t<MessageItem\n\t\t\t\ttitle={message.getMessage()}\n\t\t\t\tdescription={message.getDescription()}\n\t\t\t\ttype={message.getType()}\n\t\t\t\tmarkupDescription={true}\n\t\t\t\tlongtextUrl={message.getDescriptionUrl()}\n\t\t\t\tsubtitle={message.getAdditionalText()}\n\t\t\t\tgroupName={messageDetail.groupName || this.getTranslatedText(\"T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL\")}\n\t\t\t\tactiveTitle={message.getControlIds().length > 0 || typeof messageDetail.activeTitleHandler === \"function\"}\n\t\t\t/>\n\t\t) as MessageItem;\n\t\tthis._messageItemMessageDetailMap[messageItem.getId()] = messageDetail;\n\t\treturn messageItem;\n\t}\n\n\t/**\n\t * Creates a message Popover.\n\t * @param messageItems\n\t */\n\tcreateMessagePopover(messageItems: MessageItem[]): void {\n\t\tthis._messagePopover?.destroy();\n\t\tthis._messagePopover = (\n\t\t\t<MessagePopover\n\t\t\t\tgroupItems={true}\n\t\t\t\tactiveTitlePress={(pressEvent: MessagePopover$ActiveTitlePressEvent): void => {\n\t\t\t\t\tconst messageItem = pressEvent.getParameter(\"item\");\n\t\t\t\t\tthis.handleActiveTitlePress(messageItem);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems: messageItems\n\t\t\t\t}}\n\t\t\t</MessagePopover>\n\t\t) as MessagePopover;\n\t\tthis.getContent()?.addDependent(this._messagePopover);\n\t\tsetTimeout(() => {\n\t\t\tthis._messagePopover.openBy(this.getContent() as Button);\n\t\t}, 0);\n\t}\n\t/**\n\t * Handles active title press.\n\t *\n\t * If an activeTitleHandler is provided by the consumer via the controller extension then it is called.\n\t * Otherwise, we try to focus on the control if a control Id in the message is available.\n\t * @param messageItem\n\t */\n\thandleActiveTitlePress(messageItem?: MessageItem): void {\n\t\tif (messageItem) {\n\t\t\tconst messageDetail = this._messageItemMessageDetailMap[messageItem?.getId()];\n\t\t\tif (messageDetail.activeTitleHandler) {\n\t\t\t\tmessageDetail.activeTitleHandler(messageDetail.message);\n\t\t\t} else {\n\t\t\t\tconst controlId = messageDetail.message.getControlId();\n\t\t\t\tconst control = UI5Element.getElementById(controlId);\n\t\t\t\tif (control) {\n\t\t\t\t\tcontrol.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tLog.error(\"message item not found!\");\n\t\t}\n\t}\n\n\tdestroy(): void {\n\t\tthis._mmPropertyBinding.destroy();\n\t}\n\t/**\n\t * Toggle handler for the message popover.\n\t */\n\ttoggleMessagePopover(): void {\n\t\tthis._messagePopover.toggle(this.content as Button);\n\t}\n\t/**\n\t * Creates the content for the building block.\n\t * @returns The created content control.\n\t */\n\tcreateContent(): Button {\n\t\treturn <Button visible=\"false\" press={this.toggleMessagePopover.bind(this)} />;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}