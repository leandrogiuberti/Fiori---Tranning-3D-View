{"version":3,"file":"InlineEdit.js","names":["FieldGroupIdAction","InlineEdit","_dec","controllerExtensionHandler","_class","this","inlineEditState","_isInlineEditSource","_exports","_proto","prototype","setupMixin","baseClass","baseBeforeRendering","onBeforeRendering","baseMetadataAvailable","onMetadataAvailable","baseDestroy","destroy","call","inlineEditEnabled","addAriaAttributes","propertyInlineEditEnabled","getPageController","inlineEditFlow","isPropertyConsideredForInlineEdit","getInlineEditPropertyName","unbindProperty","hasInlineEdit","undefined","_inlineEditIndicator","InlineEditIndicator","visible","pressEdit","triggerInlineEdit","bind","_inlineEditFieldGroupId","attachEvent","event","closeInlineEditPopupMouseEvent","getParameter","editButton","attachBrowserEvent","getDomRef","contains","relatedTarget","closeInlineEditPopupNoEditMode","pressTabKey","pressShiftAndTabKey","getContent","getContentEdit","_inlineEditIndicatorPopup","Popup","inlineEditSaveFunction","triggerInlineEditSave","inlineEditDiscardFunction","triggerInlineEditDiscard","addDependent","CommandExecution","execute","enabled","command","setFollowOf","popupBehaviour","openInlineEditPopup","focusEvent","contentDisplay","keydownEvent","_event","fieldGroupIds","forEach","fieldGroupId","delayedCallToSave","isOpen","openInlineEditPopupForFocus","setInlineEditFocus","onDestroy","removeAllEditButtonAriaDescribedBy","getLabelControls","labelControl","addEditButtonAriaDescribedBy","getIdForLabel","getDomRefOfField","fieldWrapper","contentEdit","length","isA","fileUploader","currentField","overlappingElement","getOverlappingElement","close","popupInterval","setInterval","popupIntervallHandler","setPosition","Dock","EndTop","EndBottom","_source","document","elementFromPoint","getBoundingClientRect","x","width","y","height","overlappedElement","open","clearInterval","focusHandlingInlineEdit","potentialFocusOut","focusForward","focusedElement","findTabbable","skipChild","forward","element","focus","focusMeasureField","rootField","measureField","focusHandlingMeasureField","focusableElement","activeElement","getSaveButton","inlineEditKeydown","displayedField","key","preventDefault","shiftKey","pressTabKeyOnField","pressShiftTabKeyOnField","getElementById","getEditButton","getId","getDiscardButton","checkForMeasureField","checkForSemanticObject","toggleInlineEditFieldGroupId","action","shouldAdd","Add","Set","getFieldGroupIds","add","delete","setFieldGroupIds","Array","from","childrenControls","content","findAggregatedObjects","managedObject","control","childFieldGroupIds","editMode","readOnly","currentTarget","setWidth","targetproperty","getInlineEditProperty","annotations","Measures","Common","SemanticObject","getEditMode","closeInlineEditPopupEditMode","setEditMode","focusHandling","bindingContextPath","getBindingContext","getCanonicalPath","propertyFullyQualifiedName","startInlineEdit","async","hasPendingUserInput","Promise","resolve","setTimeout","inlineEditDiscard","inlineEditSave","inlineEditStart","inlineEditControls","propertiesForInlineEdit","bindingContextPathForInlineEdit","includes","uiModel","getModel","path","setProperty","isEditable","bindElement","model","invalidate","push","resetIndicatorPopup","inlineEditEnd","refreshDescription","refreshDescriptionIfNeeded","Remove","unbindElement","descriptionPath","getBinding","getPath","requestSideEffects","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sources":["./InlineEdit.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport { type EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport { controllerExtensionHandler } from \"sap/fe/base/HookSupport\";\nimport InlineEditIndicator from \"sap/fe/controls/inlineEdit/InlineEditIndicator\";\nimport CommandExecution from \"sap/fe/core/controls/CommandExecution\";\nimport type Field from \"sap/fe/macros/Field\";\nimport type FieldWrapper from \"sap/fe/macros/controls/FieldWrapper\";\nimport type Label from \"sap/m/Label\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { Control$ValidateFieldGroupEvent } from \"sap/ui/core/Control\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport Popup from \"sap/ui/core/Popup\";\nimport findTabbable from \"sap/ui/dom/findTabbable\";\nimport type { default as MdcField } from \"sap/ui/mdc/Field\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type FileWrapper from \"../controls/FileWrapper\";\n\nenum FieldGroupIdAction {\n\tAdd = \"Add\",\n\tRemove = \"Remove\"\n}\n\nexport default class InlineEdit {\n\tprivate inlineEditState: \"Editable\" | \"Display\" | \"Closed\" | \"VH\" = \"Closed\";\n\n\tprivate _inlineEditIndicator: EnhanceWithUI5<InlineEditIndicator> | undefined;\n\n\tprivate _inlineEditIndicatorPopup: Popup | undefined;\n\n\tprivate _source: Element | undefined;\n\n\tprivate _isInlineEditSource = false;\n\n\t/**\n\t * Mixin to enable inline edit on a control.\n\t * @param baseClass The class.\n\t */\n\tsetupMixin(baseClass: Function): void {\n\t\tconst baseBeforeRendering = baseClass.prototype.onBeforeRendering;\n\t\tconst baseMetadataAvailable = baseClass.prototype.onMetadataAvailable;\n\t\tconst baseDestroy = baseClass.prototype.destroy;\n\n\t\tbaseClass.prototype.onBeforeRendering = function (): void {\n\t\t\tbaseBeforeRendering?.call(this);\n\t\t\tif (this.inlineEditEnabled) {\n\t\t\t\tthis.addAriaAttributes();\n\t\t\t}\n\t\t};\n\n\t\tbaseClass.prototype.onMetadataAvailable = function (): void {\n\t\t\tbaseMetadataAvailable?.call(this);\n\t\t\tif (this.inlineEditEnabled) {\n\t\t\t\tconst propertyInlineEditEnabled = this.getPageController()?.inlineEditFlow.isPropertyConsideredForInlineEdit(\n\t\t\t\t\tthis.getInlineEditPropertyName() ?? \"\"\n\t\t\t\t);\n\t\t\t\tif (!propertyInlineEditEnabled) {\n\t\t\t\t\t//let's make sure we don't keep a binding unnecessarily\n\t\t\t\t\tthis.unbindProperty(\"hasInlineEdit\");\n\t\t\t\t\tthis.hasInlineEdit = undefined;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._inlineEditIndicator = new InlineEditIndicator({\n\t\t\t\t\tvisible: true,\n\t\t\t\t\tpressEdit: this.triggerInlineEdit.bind(this)\n\t\t\t\t});\n\t\t\t\tthis._inlineEditFieldGroupId = \"InlineEdit\";\n\t\t\t\tthis._inlineEditIndicator.attachEvent(\"mouseout\", (event: UI5Event<{ relatedTarget: Element }>) => {\n\t\t\t\t\tthis.closeInlineEditPopupMouseEvent(event.getParameter(\"relatedTarget\"));\n\t\t\t\t});\n\t\t\t\tthis._inlineEditIndicator.editButton.attachBrowserEvent(\"blur\", (event: FocusEvent) => {\n\t\t\t\t\t// if focus is still on inline editable field the popup should not be closed\n\t\t\t\t\tif (!this.getDomRef()?.contains(event.relatedTarget)) {\n\t\t\t\t\t\tthis.closeInlineEditPopupNoEditMode();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._inlineEditIndicator.attachEvent(\"pressTab\", () => {\n\t\t\t\t\tthis.pressTabKey();\n\t\t\t\t});\n\n\t\t\t\tthis._inlineEditIndicator.attachEvent(\"pressShiftTab\", () => {\n\t\t\t\t\tthis.pressShiftAndTabKey(this.getContent().getContentEdit()[0]);\n\t\t\t\t});\n\n\t\t\t\tthis._inlineEditIndicatorPopup = new Popup(this._inlineEditIndicator, false, false, false);\n\t\t\t\tconst inlineEditSaveFunction = this.triggerInlineEditSave.bind(this);\n\t\t\t\tconst inlineEditDiscardFunction = this.triggerInlineEditDiscard.bind(this);\n\t\t\t\tthis._inlineEditIndicator.addDependent(\n\t\t\t\t\tnew CommandExecution({\n\t\t\t\t\t\texecute: inlineEditSaveFunction,\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tcommand: \"Save\"\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis._inlineEditIndicator.addDependent(\n\t\t\t\t\tnew CommandExecution({\n\t\t\t\t\t\texecute: inlineEditDiscardFunction,\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tvisible: true,\n\t\t\t\t\t\tcommand: \"Cancel\"\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\t// function to check following behaviour of popup\n\t\t\t\tthis._inlineEditIndicatorPopup.setFollowOf(() => {\n\t\t\t\t\tthis.popupBehaviour();\n\t\t\t\t});\n\t\t\t\tthis.attachBrowserEvent(\"dblclick\", this.triggerInlineEdit.bind(this));\n\t\t\t\tthis.attachBrowserEvent(\"mouseover\", this.openInlineEditPopup.bind(this));\n\t\t\t\tthis.attachBrowserEvent(\"mouseout\", (event: MouseEvent) => {\n\t\t\t\t\tthis.closeInlineEditPopupMouseEvent(event.relatedTarget as Element);\n\t\t\t\t});\n\t\t\t\tthis.attachBrowserEvent(\"focus\", (event: FocusEvent) => {\n\t\t\t\t\tthis.focusEvent(event, this.getContent().contentDisplay?.getDomRef());\n\t\t\t\t});\n\n\t\t\t\tthis.attachBrowserEvent(\"keydown\", (event: KeyboardEvent) => {\n\t\t\t\t\tthis.keydownEvent(event, this.getContent().contentDisplay?.getDomRef());\n\t\t\t\t});\n\n\t\t\t\tthis.attachEvent(\"validateFieldGroup\", (_event: Control$ValidateFieldGroupEvent) => {\n\t\t\t\t\tconst fieldGroupIds = _event.getParameter(\"fieldGroupIds\");\n\t\t\t\t\tfieldGroupIds?.forEach((fieldGroupId) => {\n\t\t\t\t\t\tif (fieldGroupId === \"InlineEdit\") {\n\t\t\t\t\t\t\tthis.getPageController()?.inlineEditFlow.delayedCallToSave();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tthis.attachBrowserEvent(\"focusin\", (event: MouseEvent) => {\n\t\t\t\t\t// only goes into condition for currently editable fields, e.g. connected fields\n\t\t\t\t\tif (this.inlineEditState === \"Editable\" && !this._inlineEditIndicatorPopup.isOpen()) {\n\t\t\t\t\t\tthis.openInlineEditPopupForFocus(event);\n\t\t\t\t\t\tthis.setInlineEditFocus();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tbaseClass.prototype.onDestroy = function (): void {\n\t\t\tthis._inlineEditIndicator?.destroy();\n\t\t\tthis._inlineEditIndicatorPopup?.destroy();\n\t\t\tbaseDestroy?.call(this);\n\t\t};\n\t}\n\n\t/*\n\t * Adds aria attributes to the inline edit indicator.\n\t * @param this The current instance of the class.\n\t */\n\taddAriaAttributes(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tif (this._inlineEditIndicator) {\n\t\t\tthis._inlineEditIndicator.removeAllEditButtonAriaDescribedBy();\n\t\t\t// add the label controls of the field\n\t\t\tthis.getLabelControls().forEach((labelControl: Label) => {\n\t\t\t\tthis._inlineEditIndicator?.addEditButtonAriaDescribedBy(labelControl);\n\t\t\t});\n\t\t\t// add the field itself\n\t\t\tthis._inlineEditIndicator.addEditButtonAriaDescribedBy(this.getIdForLabel());\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the DOM reference of the field associated with the inline edit.\n\t * @returns The DOM reference of the field or null if not found.\n\t */\n\tgetDomRefOfField(this: EnhanceWithUI5<Field> & InlineEdit): Element | null {\n\t\tconst fieldWrapper = this.getContent() as FieldWrapper;\n\t\tif (fieldWrapper?.contentEdit?.length > 0 && fieldWrapper?.contentEdit[0]?.getDomRef()) {\n\t\t\treturn fieldWrapper.contentEdit[0].getDomRef();\n\t\t} else if (fieldWrapper?.contentDisplay && fieldWrapper.contentDisplay.getDomRef()) {\n\t\t\treturn fieldWrapper.contentDisplay.getDomRef();\n\t\t} else if (fieldWrapper?.isA(\"sap.fe.macros.controls.FileWrapper\")) {\n\t\t\treturn (fieldWrapper as FileWrapper).fileUploader.getDomRef();\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Determines the behavior of the inline edit popup relative to its associated field.\n\t */\n\tpopupBehaviour(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tconst currentField = this.getDomRefOfField();\n\t\tif (currentField) {\n\t\t\t// check if element is obscured by other section/element\n\t\t\tconst overlappingElement = this.getOverlappingElement(currentField);\n\t\t\t// If the element is obscured by another element/section, close it and set up an interval to check every 200 ms if it remains obscured\n\t\t\tif (overlappingElement !== currentField && !currentField.contains(overlappingElement)) {\n\t\t\t\tthis._inlineEditIndicatorPopup?.close();\n\t\t\t\t// only if it is editable, we set up the interval, otherwise we close the popup if it is obscured by another element\n\t\t\t\tif (this.inlineEditState === \"Editable\") {\n\t\t\t\t\tconst popupInterval = setInterval(() => {\n\t\t\t\t\t\tthis.popupIntervallHandler(currentField, popupInterval);\n\t\t\t\t\t}, 200);\n\t\t\t\t}\n\t\t\t\t// If the element is not blocked by another section/element, update its position to align with the element that has the Inline Edit\n\t\t\t} else {\n\t\t\t\tthis._inlineEditIndicatorPopup?.setPosition(Popup.Dock.EndTop, Popup.Dock.EndBottom, this._source, \"0 -4\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the current element located at the lowest vertical point of the currentField.\n\t * If the currentField is overlapped, it returns the overlapping element instead.\n\t * @param currentField The field where the inline edit popup is opened.\n\t * @returns The element determined to be at the lowest vertical point of the current field.\n\t */\n\tgetOverlappingElement(currentField: Element): Element | null {\n\t\treturn document.elementFromPoint(\n\t\t\tcurrentField.getBoundingClientRect().x + currentField.getBoundingClientRect().width / 2,\n\t\t\t// We take a point in the middle of the field and 2/3 of the height to retrieve the overlappingElement\n\t\t\tcurrentField.getBoundingClientRect().y + 0.66 * currentField.getBoundingClientRect().height\n\t\t);\n\t}\n\n\t/**\n\t * Interval handler for managing the interval when the popup is overlapped by an element.\n\t * @param currentField The field where the inline edit popup is opened.\n\t * @param popupInterval The interval constant.\n\t */\n\tpopupIntervallHandler(this: EnhanceWithUI5<Field> & InlineEdit, currentField: Element, popupInterval: NodeJS.Timeout): void {\n\t\t// Check if element is still obscured by other section/element\n\t\tconst overlappedElement = this.getOverlappingElement(currentField);\n\t\tif (overlappedElement === currentField || currentField.contains(overlappedElement)) {\n\t\t\t// If element is visible again, open Popup\n\t\t\tthis._inlineEditIndicatorPopup?.open(0, Popup.Dock.EndTop, Popup.Dock.EndBottom, this);\n\t\t\tclearInterval(popupInterval);\n\t\t}\n\t}\n\n\t/**\n\t * Focus handler for inline edit.\n\t * @param potentialFocusOut Potential focus out. Applies for Shift + Tab on field and Tab on discard button.\n\t * @param focusForward If focus should be set forward or backward.\n\t */\n\tfocusHandlingInlineEdit(this: EnhanceWithUI5<Field> & InlineEdit, potentialFocusOut: boolean, focusForward?: boolean): void {\n\t\tconst focusedElement = findTabbable(this.getDomRef(), {\n\t\t\tskipChild: true,\n\t\t\tforward: focusForward\n\t\t});\n\t\tfocusedElement?.element.focus();\n\t\tthis._inlineEditIndicatorPopup?.close();\n\t\tif (potentialFocusOut) {\n\t\t\t// only closes the inline edit completely if the focus is not on the same inline edit anymore\n\t\t\t// connected fields won't be closed if switching focus between them\n\t\t\tif (this._isInlineEditSource) {\n\t\t\t\tthis.triggerInlineEditSave();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Sets the focus on the measure field of a field.\n\t */\n\tfocusMeasureField(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tconst rootField = findTabbable(this.getDomRef(), {\n\t\t\tskipChild: false,\n\t\t\tforward: true\n\t\t});\n\t\tconst measureField = findTabbable(rootField.element, {\n\t\t\tskipChild: true,\n\t\t\tforward: true\n\t\t});\n\t\tmeasureField?.element?.focus();\n\t}\n\n\t/**\n\t * Implement focus handling for fields with measure fields when navigating via tab or shift-tab within an inline editable field.\n\t * @param focusForward If focus should be set forward or backward.\n\t */\n\tfocusHandlingMeasureField(this: EnhanceWithUI5<Field> & InlineEdit, focusForward: boolean): void {\n\t\tconst focusableElement = findTabbable(document.activeElement, {\n\t\t\tskipChild: true,\n\t\t\tforward: focusForward\n\t\t});\n\t\t// Check if the next/previous focusable element is within the inline edit popup\n\t\tif (this.getDomRef()?.contains(focusableElement.element)) {\n\t\t\t// If it is, focus on the next/previous focusable element\n\t\t\tfocusableElement.element?.focus();\n\t\t}\n\n\t\t// If next element is outside of current inline editable field and focus is set forward, focus on the save button\n\t\telse if (focusForward) {\n\t\t\tthis._inlineEditIndicator?.getSaveButton().focus();\n\t\t}\n\t\t// If focus is set backward, focus on the previous focusable element\n\t\telse {\n\t\t\tfocusableElement.element?.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Processes keydown events for the inline edit component, handling various scenarios, like Tab or Escape.\n\t * @param event The keydown event triggered within the inline edit.\n\t * @param displayedField DomRef of contentDisplay of the field.\n\t */\n\tinlineEditKeydown(this: EnhanceWithUI5<Field> & InlineEdit, event: KeyboardEvent, displayedField: HTMLElement): void {\n\t\tif (event.key === \"Escape\") {\n\t\t\tevent.preventDefault();\n\t\t\tthis.triggerInlineEditDiscard();\n\t\t} else if (event.key === \"Tab\" && !event.shiftKey) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.pressTabKeyOnField(displayedField, event);\n\t\t} else if (event.key === \"Tab\" && event.shiftKey) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.pressShiftTabKeyOnField(displayedField);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the Tab key press event when focus is on the edit, save, or discard buttons.\n\t */\n\tpressTabKey(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tif (this._inlineEditIndicator) {\n\t\t\tswitch (document.activeElement) {\n\t\t\t\tcase document.getElementById(this._inlineEditIndicator?.getEditButton().getId()):\n\t\t\t\t\tthis.focusHandlingInlineEdit(false, true);\n\t\t\t\t\tbreak;\n\t\t\t\tcase document.getElementById(this._inlineEditIndicator?.getSaveButton().getId()):\n\t\t\t\t\tthis._inlineEditIndicator?.getDiscardButton().focus();\n\t\t\t\t\tbreak;\n\t\t\t\tcase document.getElementById(this._inlineEditIndicator?.getDiscardButton().getId()):\n\t\t\t\t\tthis.focusHandlingInlineEdit(true, true);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the Tab key press event when focus is on the edit, save, or discard buttons.\n\t * @param rootField The element with inline editing enabled.\n\t */\n\tpressShiftAndTabKey(this: EnhanceWithUI5<Field> & InlineEdit, rootField: UI5Element): void {\n\t\tif (this._inlineEditIndicator) {\n\t\t\tswitch (document.activeElement) {\n\t\t\t\tcase document.getElementById(this._inlineEditIndicator?.getEditButton().getId()):\n\t\t\t\t\tthis.focusHandlingInlineEdit(false, false);\n\t\t\t\t\tbreak;\n\t\t\t\tcase document.getElementById(this._inlineEditIndicator?.getSaveButton().getId()):\n\t\t\t\t\tif (this.checkForMeasureField()) {\n\t\t\t\t\t\tthis.focusMeasureField();\n\t\t\t\t\t} else {\n\t\t\t\t\t\trootField.focus();\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase document.getElementById(this._inlineEditIndicator?.getDiscardButton().getId()):\n\t\t\t\t\tthis._inlineEditIndicator?.getSaveButton().focus();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Focus handler for the Tab key on the field.\n\t * @param displayedField DomRef of contentDisplay of the field.\n\t * @param event Current keyboard event.\n\t */\n\tpressTabKeyOnField(this: EnhanceWithUI5<Field> & InlineEdit, displayedField: HTMLElement, event: KeyboardEvent): void {\n\t\t// Check that the focus of the field is on the contentDisplay\n\t\tif (document.activeElement === displayedField) {\n\t\t\tthis.openInlineEditPopup(event);\n\t\t\tthis._inlineEditIndicator?.getEditButton().focus();\n\t\t} else if (!this.checkForMeasureField()) {\n\t\t\tthis._inlineEditIndicator?.getSaveButton().focus();\n\t\t} else {\n\t\t\tthis.focusHandlingMeasureField(true);\n\t\t}\n\t}\n\n\t/**\n\t * Focus handler for the Tab + Shift key on the field.\n\t * @param displayedField DomRef of contentDisplay of the field.\n\t */\n\tpressShiftTabKeyOnField(this: EnhanceWithUI5<Field> & InlineEdit, displayedField: HTMLElement): void {\n\t\t// Check that the focus of the field is on the contentDisplay\n\t\tif (document.activeElement === displayedField) {\n\t\t\t// focus to the previous interactive element\n\t\t\tthis.focusHandlingInlineEdit(true, false);\n\t\t} else if (!this.checkForMeasureField()) {\n\t\t\tthis.focusHandlingInlineEdit(true, false);\n\t\t} else {\n\t\t\tthis.focusHandlingMeasureField(false);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the focus event for the inline edit field.\n\t * @param event Focus event for the field\n\t * @param displayedField DomRef of contentDisplay of the field.\n\t */\n\tfocusEvent(this: EnhanceWithUI5<Field> & InlineEdit, event: FocusEvent, displayedField: HTMLElement): void {\n\t\tif (this.hasInlineEdit) {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.checkForSemanticObject()) {\n\t\t\t\t// if the field has a Semantic Object, we don't want to focus on the edit button of the field\n\t\t\t\t// but onto the contentDisplay\n\t\t\t\tdisplayedField.focus();\n\t\t\t} else {\n\t\t\t\tthis.openInlineEditPopup(event);\n\t\t\t\tthis._inlineEditIndicator?.getEditButton().focus();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handles the keydown event for the inline edit field.\n\t * @param event Keyboard event for the field\n\t * @param displayedField DomRef of contentDisplay of the field.\n\t */\n\tkeydownEvent(this: EnhanceWithUI5<Field> & InlineEdit, event: KeyboardEvent, displayedField: HTMLElement): void {\n\t\tif (\n\t\t\t(this.inlineEditState === \"Editable\" || (document.activeElement === displayedField && this.checkForSemanticObject())) &&\n\t\t\tthis.hasInlineEdit\n\t\t) {\n\t\t\tthis.inlineEditKeydown(event, displayedField);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the field group ids of the control to include or remove the inline edit field group id.\n\t * @param action Add or Remove the id\n\t */\n\ttoggleInlineEditFieldGroupId(this: EnhanceWithUI5<Field> & InlineEdit, action: FieldGroupIdAction): void {\n\t\tconst shouldAdd = action === FieldGroupIdAction.Add;\n\t\tconst fieldGroupIds = new Set(this.getFieldGroupIds());\n\n\t\tif (shouldAdd) {\n\t\t\tfieldGroupIds.add(\"InlineEdit\");\n\t\t} else {\n\t\t\tfieldGroupIds.delete(\"InlineEdit\");\n\t\t}\n\n\t\tthis.setFieldGroupIds(Array.from(fieldGroupIds));\n\n\t\tconst childrenControls =\n\t\t\t(this.content?.findAggregatedObjects(true, (managedObject: ManagedObject) =>\n\t\t\t\tmanagedObject.isA<Control>(\"sap.ui.core.Control\")\n\t\t\t) as Control[] | undefined) ?? [];\n\n\t\tfor (const control of childrenControls) {\n\t\t\tconst childFieldGroupIds = new Set(control.getFieldGroupIds());\n\n\t\t\tif (shouldAdd) {\n\t\t\t\tchildFieldGroupIds.add(\"InlineEdit\");\n\t\t\t} else {\n\t\t\t\tchildFieldGroupIds.delete(\"InlineEdit\");\n\t\t\t}\n\t\t\tcontrol.setFieldGroupIds(Array.from(childFieldGroupIds));\n\t\t}\n\t}\n\n\t/**\n\t * Opens the inline edit popup.\n\t * @param event The event.\n\t */\n\topenInlineEditPopup(this: EnhanceWithUI5<Field> & InlineEdit, event: Event): void {\n\t\tif (this.hasInlineEdit && this.inlineEditState !== \"Editable\" && this.editMode === \"Display\" && !this.readOnly) {\n\t\t\tthis._inlineEditIndicatorPopup?.open(0, Popup.Dock.EndTop, Popup.Dock.EndBottom, event.currentTarget as Element);\n\t\t\tthis._source = event.currentTarget as Element;\n\t\t\tthis._inlineEditIndicator?.setWidth((event.currentTarget as Element)?.getBoundingClientRect().width);\n\t\t}\n\t}\n\n\t/**\n\t * Closes the inline edit popup for mouse events.\n\t * @param relatedTarget The related target.\n\t */\n\tcloseInlineEditPopupMouseEvent(this: EnhanceWithUI5<Field> & InlineEdit, relatedTarget: Element): void {\n\t\tif (\n\t\t\trelatedTarget &&\n\t\t\t!this._inlineEditIndicator?.getDomRef()?.contains(relatedTarget) &&\n\t\t\t!this.getDomRef()?.contains(relatedTarget)\n\t\t) {\n\t\t\tthis.closeInlineEditPopupNoEditMode();\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the field has a measure field.\n\t * @returns True if the field has a measure field, false otherwise.\n\t */\n\tcheckForMeasureField(this: EnhanceWithUI5<Field> & InlineEdit): boolean {\n\t\tconst targetproperty: Property | undefined = this.getInlineEditProperty();\n\t\treturn !!targetproperty?.annotations.Measures;\n\t}\n\n\t/**\n\t * Checks if the field has a Semantic Object if clicking on it.\n\t * @returns True if the field has a SemanticObject, false otherwise.\n\t */\n\tcheckForSemanticObject(this: EnhanceWithUI5<Field> & InlineEdit): boolean {\n\t\tconst targetproperty: Property | undefined = this.getInlineEditProperty();\n\t\treturn !!targetproperty?.annotations.Common?.SemanticObject;\n\t}\n\n\t/**\n\t * Closes the inline edit popup for fields that are not in edit mode.\n\t */\n\tcloseInlineEditPopupNoEditMode(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tif (!this._inlineEditIndicator?.getEditMode()) {\n\t\t\tthis._inlineEditIndicatorPopup?.close();\n\t\t}\n\t}\n\n\t/**\n\t * Closes the inline edit popup for fields in edit mode.\n\t */\n\tcloseInlineEditPopupEditMode(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tif (this._inlineEditIndicator?.getEditMode()) {\n\t\t\tthis._inlineEditIndicatorPopup?.close();\n\t\t\tthis._isInlineEditSource = false;\n\t\t}\n\t}\n\n\t/**\n\t * Opens the inline edit popup for focus handling.\n\t * @param event Focusin event for the field.\n\t */\n\topenInlineEditPopupForFocus(this: EnhanceWithUI5<Field> & InlineEdit, event: Event): void {\n\t\tthis._inlineEditIndicator?.setEditMode(true);\n\t\tthis._inlineEditIndicatorPopup?.open(\n\t\t\t0,\n\t\t\tPopup.Dock.EndTop,\n\t\t\tPopup.Dock.EndBottom,\n\t\t\t(event.currentTarget as Element) || this._source,\n\t\t\t\"0 -4\"\n\t\t);\n\t\tthis._isInlineEditSource = true;\n\t}\n\n\t/**\n\t * Focus handling for connected fields.\n\t */\n\tsetInlineEditFocus(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tthis.getPageController()?.inlineEditFlow.focusHandling(this);\n\t}\n\n\t/**\n\t * Triggers the inline edit and calls the toggleControlLocalEdit method to set the control to edit mode.\n\t */\n\ttriggerInlineEdit(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tif (!this.inlineEditEnabled || this.editMode !== \"Display\" || this.readOnly || !this.hasInlineEdit) {\n\t\t\t// if the field is already in edit mode do nothing\n\t\t\treturn;\n\t\t}\n\t\tthis._isInlineEditSource = true;\n\t\tthis._inlineEditIndicator?.setEditMode(true);\n\t\tthis._inlineEditIndicatorPopup?.setPosition(Popup.Dock.EndTop, Popup.Dock.EndBottom, this._source, \"0 -4\");\n\n\t\tconst bindingContextPath = (this.getBindingContext() as Context | undefined)?.getCanonicalPath() ?? \"\";\n\t\tconst propertyFullyQualifiedName = this.getInlineEditPropertyName();\n\t\tif (propertyFullyQualifiedName) {\n\t\t\tthis.getPageController()?.inlineEditFlow.startInlineEdit(propertyFullyQualifiedName, bindingContextPath, this);\n\t\t}\n\t}\n\n\t/**\n\t * Triggers the inline edit discard.\n\t */\n\tasync triggerInlineEditDiscard(this: EnhanceWithUI5<Field> & InlineEdit): Promise<void> {\n\t\tif (this.hasPendingUserInput()) {\n\t\t\t// If there is pending user input we delay the save to allow inner changes from the mdc conditions to be propagated to the model\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tsetTimeout(resolve, 200);\n\t\t\t});\n\t\t}\n\t\tthis.getPageController()?.inlineEditFlow.inlineEditDiscard();\n\t}\n\n\t/**\n\t * Triggers the inline edit save.\n\t * @returns The inlineEditFlow save promise.\n\t */\n\tasync triggerInlineEditSave(this: EnhanceWithUI5<Field> & InlineEdit): Promise<void | undefined> {\n\t\tif (this.hasPendingUserInput()) {\n\t\t\t// If there is pending user input we delay the save to allow inner changes from the mdc conditions to be propagated to the model\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tsetTimeout(resolve, 200);\n\t\t\t});\n\t\t}\n\t\treturn this.getPageController()?.inlineEditFlow.inlineEditSave();\n\t}\n\n\t/**\n\t * Hook to react to an inline edit start notification form the inlineEditFlow.\n\t * @param inlineEditControls The fields that are currently in inline edit mode.\n\t * @param propertiesForInlineEdit\n\t * @param bindingContextPathForInlineEdit\n\t */\n\t@controllerExtensionHandler(\"inlineEditFlow\", \"inlineEditStart\")\n\tinlineEditStart(\n\t\tthis: EnhanceWithUI5<Field> & InlineEdit,\n\t\tinlineEditControls: Control[],\n\t\tpropertiesForInlineEdit: string[],\n\t\tbindingContextPathForInlineEdit: string\n\t): void {\n\t\tif (this.hasInlineEdit) {\n\t\t\tconst bindingContextPath = (this.getBindingContext() as Context | undefined)?.getCanonicalPath() ?? \"\";\n\t\t\tconst propertyFullyQualifiedName = this.getInlineEditPropertyName() ?? \"\";\n\t\t\tif (!propertiesForInlineEdit.includes(propertyFullyQualifiedName) || bindingContextPathForInlineEdit !== bindingContextPath) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.toggleInlineEditFieldGroupId(FieldGroupIdAction.Add);\n\t\t\tconst uiModel = this.getModel(\"ui\") as JSONModel;\n\t\t\tconst path = `/${this.getId()}`;\n\t\t\tuiModel.setProperty(path, { isEditable: true });\n\t\t\tthis.bindElement({ path, model: \"ui\" });\n\t\t\t//In case of connected fields, we set the focus on the element that was clicked\n\t\t\tif (this._isInlineEditSource) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t(this.getContent() as EnhanceWithUI5<FieldWrapper>)?.getContentEdit()[0]?.focus();\n\t\t\t\t\tthis.invalidate();\n\t\t\t\t}, 200);\n\t\t\t}\n\t\t\tif (propertiesForInlineEdit.includes(propertyFullyQualifiedName)) {\n\t\t\t\tthis.inlineEditState = \"Editable\";\n\t\t\t}\n\t\t\tif (!inlineEditControls.includes(this)) {\n\t\t\t\tinlineEditControls.push(this);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Reset the indicator popup.\n\t */\n\tresetIndicatorPopup(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\tthis._inlineEditIndicatorPopup?.close();\n\t\tthis._inlineEditIndicator?.setEditMode(false);\n\t\tthis._isInlineEditSource = false;\n\t}\n\n\t/**\n\t * Closes the inline edit popup after save or discard.\n\t * @param refreshDescription If the description should be refreshed.\n\t */\n\tinlineEditEnd(this: EnhanceWithUI5<Field> & InlineEdit, refreshDescription?: boolean): void {\n\t\tif (this.inlineEditState === \"Editable\") {\n\t\t\tif (refreshDescription) {\n\t\t\t\tthis.refreshDescriptionIfNeeded();\n\t\t\t}\n\t\t\tthis.toggleInlineEditFieldGroupId(FieldGroupIdAction.Remove);\n\t\t\tthis.unbindElement(\"ui\");\n\t\t\tthis.inlineEditState = \"Closed\";\n\t\t\tthis.resetIndicatorPopup();\n\t\t}\n\t}\n\n\t/**\n\t * Method to force the model refresh for the description if it may have been modified via  a binding with a $$noPatch parameter.\n\t */\n\trefreshDescriptionIfNeeded(this: EnhanceWithUI5<Field> & InlineEdit): void {\n\t\t// when the field uses a mdc field the description is updated via the additionalValue binding\n\t\t// that has a noPatch parameter so it doesn't get reverted bya resetChanges\n\t\tif (this.isA<Field>(\"sap.fe.macros.Field\")) {\n\t\t\tconst content = this.content?.isA<EnhanceWithUI5<FieldWrapper>>(\"sap.fe.macros.controls.FieldWrapper\")\n\t\t\t\t? this.content.getContentEdit()[0]\n\t\t\t\t: null;\n\t\t\tif (content && content.isA<MdcField>(\"sap.ui.mdc.Field\")) {\n\t\t\t\tconst descriptionPath = content.getBinding(\"additionalValue\")?.getPath();\n\t\t\t\tif (descriptionPath) {\n\t\t\t\t\t(this.getBindingContext() as Context)?.requestSideEffects([descriptionPath], \"$auto\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}