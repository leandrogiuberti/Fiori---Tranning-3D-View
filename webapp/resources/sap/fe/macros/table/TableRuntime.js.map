{"version":3,"file":"TableRuntime.js","names":["CreationMode","FELibrary","TableRuntime","executeConditionalActionShortcut","sButtonMatcher","oSource","oMdcTable","getParent","CreationRow","oButton","getActions","reduce","aActionButtons","oActionToolbarAction","concat","getAction","find","oActionButton","getId","endsWith","CommonUtils","fireButtonPress","oCreationRow","getAggregation","getApplyEnabled","getVisible","fireApply","setContexts","async","event","source","getSource","table","BusyLocker","lock","setContextsAsync","error","Log","unlock","metaModel","getModel","getMetaModel","tableAPI","tableDefinition","collectionEntity","MetaModelConverter","convertTypes","resolvePath","annotation","collection","target","sUpdatablePath","updatablePropertyPath","aActionsMultiselectDisabled","data","split","oActionOperationAvailableMap","JSON","parse","operationAvailableMap","oNavigationAvailableMap","aSelectedContexts","getSelectedContexts","aDeletableContexts","bReadOnlyDraftEnabled","annotations","Common","DraftRoot","aUpdatableContexts","oDynamicActions","oIBN","oInternalModelContext","getBindingContext","deleteHelper","updateDeleteInfoForSelectedContexts","activeSelectedContexts","filter","oContext","isInactive","oModelObject","Object","assign","getObject","selectedContexts","selectedContextsIncludingInactive","numberOfSelectedContexts","length","dynamicActions","ibn","deleteEnabled","deletableContexts","unSavedContexts","lockedContexts","draftsWithNonDeletableActive","draftsWithDeletableActive","controlId","updatableContexts","pasteAuthorized","pasteFromCopyAutorized","semanticKeyHasDraftIndicator","getProperty","undefined","nodeUpdatesInfo","oSelectedContext","oContextData","key","indexOf","sActionPath","substring","enabled","setProperty","this","isUpdatableContext","push","setIntentBasedNavigationEnablement","disableAction","control","createEnablement","parentContext","_updateCreateEnablement","nodeType","updateCutCopyPasteEnablement","updateMoveUpDownEnablement","ActionRuntime","setActionEnablement","selectedContext","readOnlyDraftEnabled","contextData","updatableByPath","notDraftInReadOnlyMode","IsActiveEntity","HasDraftEntity","checkIfNodeIsMovable","node","isNodeMovableFunction","getTableDefinition","isNodeMovable","nodeMovableCustomFunction","FPMHelper","getCustomFunction","moduleName","methodName","warning","checkIfNodeIsCopyable","isNodeCopyableFunction","isNodeCopyable","modelObject","forContextMenu","arguments","contextmenu","type","view","getTargetView","isViewEditable","getIsEditable","getControllerName","checkDraftInstance","getRowBinding","isRelative","pastableContexts","getAllCurrentContexts","context","map","pastableContext","getPath","includes","MessageToast","show","ResourceModelHelper","getResourceModel","getText","copyCutPasteEnablementInfo","dataModelsrc","cutableContexts","copyableContexts","cutEnablement","copyEnablement","lastAction","pasteEnablement","contextsforPastableEnablement","extensionPoint","isMoveToPositionAllowed","isCopyToPositionAllowed","targetContext","modelObjectPath","changeSiblingForRootsSupported","singleContextMovableUp","singleContextMovableDown","movedContext","movableDraft","outOfPlaceContext","isTransient","customMovable","isDeleted","getSibling","internalContext","createEnablementCallback","nodeTypeParameters","possibleValues","values","option","value","enablementFunction","enabledFlags","_error","enablementMap","some","flag","forEach","index","contextPath","clearSelection","internalModelContext","sAction","bEnabled","onFieldChangeInCreationRow","oEvent","withCustomValidationFunction","mField","FieldRuntimeHelper","getFieldStateOnChange","oSourceField","field","sFieldId","mFieldValidity","mNewFieldValidity","state","mCustomValidity","mNewCustomValidity","getBinding","fieldId","sTarget","getBindingPath","Messaging","getMessageModel","getData","oMessage","getTargets","removeMessages","onTreeTableContextChanged","initialExpansionLevel","rowBinding","getContext","getIgnoreContextChangeEvent","aggregation","filterInfo","TableUtils","getAllFilterInfo","expandTo","search","Number","MAX_SAFE_INTEGER","setAggregation","onCreateMenuItemPress","valueIndex","mdcTable","getMdcTable","creationData","propertyName","creationParameters","creationMode","create","mode","tableId","CreationDialog","creationDialogFields","rebind","getController","editFlow","createDocument","catch","onCreateButtonPress","External","outbound","creationRow","createAtEnd","NewPage","Inline","InlineCreationRows","createEmptyRowsAndFocus","navigationAvailableMap","sKey","aApplicable","aNotApplicable","bEnabledForContextMenu","aApplicableForContextMenu","aNotApplicableForContextMenu","sProperty","enabledProperty","applicableProperty","notApplicableProperty","onContextMenuItemSelected","setContextMenuActive","setTimeout","dataStateIndicatorFilter","message"],"sources":["./TableRuntime.ts"],"sourcesContent":["import type { EntitySet } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { CreateBehaviorExternal } from \"sap/fe/core/converters/controls/Common/Table\";\nimport deleteHelper from \"sap/fe/core/helpers/DeleteHelper\";\nimport FPMHelper from \"sap/fe/core/helpers/FPMHelper\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ResourceModelHelper from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport FELibrary from \"sap/fe/core/library\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport TableUtils from \"sap/fe/macros/table/Utils\";\nimport type MenuItem from \"sap/m/MenuItem\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport type { Field$ChangeEvent } from \"sap/ui/mdc/Field\";\nimport type { default as MDCTable, default as Table } from \"sap/ui/mdc/Table\";\nimport type ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type CreationRow from \"sap/ui/mdc/table/CreationRow\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport FieldRuntimeHelper from \"../field/FieldRuntimeHelper\";\n\nconst CreationMode = FELibrary.CreationMode;\n/**\n * Static class used by Table building block during runtime\n * @private\n */\nconst TableRuntime = {\n\texecuteConditionalActionShortcut: function (sButtonMatcher: string, oSource: Control): void {\n\t\t// Get the button related to keyboard shortcut\n\t\tconst oMdcTable = oSource.getParent() as MDCTable;\n\t\tif (sButtonMatcher !== CreationMode.CreationRow) {\n\t\t\tconst oButton = oMdcTable\n\t\t\t\t.getActions()\n\t\t\t\t.reduce(function (aActionButtons: Control[], oActionToolbarAction: Control) {\n\t\t\t\t\treturn aActionButtons.concat((oActionToolbarAction as ActionToolbarAction).getAction());\n\t\t\t\t}, [] as Control[])\n\t\t\t\t.find(function (oActionButton: Control) {\n\t\t\t\t\treturn oActionButton.getId().endsWith(sButtonMatcher);\n\t\t\t\t});\n\t\t\tCommonUtils.fireButtonPress(oButton);\n\t\t} else {\n\t\t\tconst oCreationRow = oMdcTable.getAggregation(\"creationRow\") as CreationRow;\n\t\t\tif (oCreationRow && oCreationRow.getApplyEnabled() && oCreationRow.getVisible()) {\n\t\t\t\toCreationRow.fireApply();\n\t\t\t}\n\t\t}\n\t},\n\n\tsetContexts: async function (event: UI5Event<{}, Table>): Promise<void> {\n\t\tconst source = event.getSource();\n\t\tconst table = source;\n\t\tBusyLocker.lock(table);\n\t\ttry {\n\t\t\tawait TableRuntime.setContextsAsync(table);\n\t\t} catch (error) {\n\t\t\tLog.error(error as string);\n\t\t} finally {\n\t\t\tBusyLocker.unlock(table);\n\t\t}\n\t},\n\n\tsetContextsAsync: async function (table: Table): Promise<void[] | undefined> {\n\t\tconst metaModel = table.getModel()?.getMetaModel() as undefined | ODataMetaModel;\n\t\tconst tableAPI = table.getParent() as TableAPI;\n\t\tif (!tableAPI || !metaModel) {\n\t\t\treturn;\n\t\t}\n\t\tconst tableDefinition = tableAPI.tableDefinition;\n\t\tconst collectionEntity = MetaModelConverter.convertTypes(metaModel).resolvePath<EntitySet>(\n\t\t\ttableDefinition.annotation.collection\n\t\t).target;\n\t\tconst sUpdatablePath = tableDefinition.annotation.updatablePropertyPath;\n\n\t\tconst aActionsMultiselectDisabled = table.data(\"actionsMultiselectDisabled\")?.split(\",\") ?? [];\n\t\tconst oActionOperationAvailableMap = JSON.parse(tableDefinition.operationAvailableMap || \"{}\");\n\t\tconst oNavigationAvailableMap = table.data(\"navigationAvailableMap\");\n\n\t\tconst aSelectedContexts = table.getSelectedContexts() as Context[];\n\t\tconst aDeletableContexts: Context[] = [];\n\t\tconst bReadOnlyDraftEnabled =\n\t\t\ttable.data(\"displayModePropertyBinding\") === \"true\" && !!collectionEntity?.annotations.Common?.DraftRoot;\n\t\tconst aUpdatableContexts: Context[] = [];\n\t\t// oDynamicActions are bound actions that are available according to some property\n\t\t// in each item\n\t\tconst oDynamicActions: Record<string, { bEnabled?: boolean }> | undefined = {};\n\t\tconst oIBN = {};\n\t\tconst oInternalModelContext = table.getBindingContext(\"internal\") as InternalModelContext;\n\n\t\tif (!oInternalModelContext) {\n\t\t\treturn;\n\t\t}\n\t\t// for the delete we consider the inactive contexts as potentially part of the selected contexts\n\t\tdeleteHelper.updateDeleteInfoForSelectedContexts(oInternalModelContext, aSelectedContexts);\n\n\t\t//do not consider empty rows as selected context, for the other actions\n\t\tconst activeSelectedContexts = aSelectedContexts.filter(function (oContext: Context) {\n\t\t\treturn !oContext.isInactive();\n\t\t});\n\n\t\tconst oModelObject = Object.assign(oInternalModelContext.getObject() || {}, {\n\t\t\tselectedContexts: activeSelectedContexts,\n\t\t\tselectedContextsIncludingInactive: aSelectedContexts,\n\t\t\tnumberOfSelectedContexts: activeSelectedContexts.length,\n\t\t\tdynamicActions: oDynamicActions,\n\t\t\tibn: oIBN,\n\t\t\tdeleteEnabled: true,\n\t\t\tdeletableContexts: aDeletableContexts,\n\t\t\tunSavedContexts: [],\n\t\t\tlockedContexts: [],\n\t\t\tdraftsWithNonDeletableActive: [],\n\t\t\tdraftsWithDeletableActive: [],\n\t\t\tcontrolId: \"\",\n\t\t\tupdatableContexts: aUpdatableContexts,\n\t\t\tpasteAuthorized: true,\n\t\t\tpasteFromCopyAutorized: true,\n\t\t\tsemanticKeyHasDraftIndicator: oInternalModelContext.getProperty(\"semanticKeyHasDraftIndicator\")\n\t\t\t\t? oInternalModelContext.getProperty(\"semanticKeyHasDraftIndicator\")\n\t\t\t\t: undefined\n\t\t});\n\t\toModelObject.nodeUpdatesInfo = oModelObject.nodeUpdatesInfo || {};\n\n\t\tfor (const oSelectedContext of activeSelectedContexts) {\n\t\t\tconst oContextData = oSelectedContext.getObject();\n\t\t\tfor (const key in oContextData) {\n\t\t\t\tif (key.indexOf(\"#\") === 0) {\n\t\t\t\t\tlet sActionPath: string = key;\n\t\t\t\t\tsActionPath = sActionPath.substring(1, sActionPath.length);\n\t\t\t\t\toModelObject.dynamicActions[sActionPath] = { enabled: true };\n\t\t\t\t\toInternalModelContext.setProperty(\"\", oModelObject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.isUpdatableContext(sUpdatablePath, oSelectedContext, bReadOnlyDraftEnabled)) {\n\t\t\t\taUpdatableContexts.push(oSelectedContext);\n\t\t\t}\n\t\t}\n\n\t\tif (!table.data(\"enableAnalytics\")) {\n\t\t\tTableRuntime.setIntentBasedNavigationEnablement(oInternalModelContext, oNavigationAvailableMap, activeSelectedContexts);\n\t\t}\n\n\t\tif (activeSelectedContexts.length > 1) {\n\t\t\tthis.disableAction(aActionsMultiselectDisabled, oDynamicActions);\n\t\t}\n\n\t\tif (oModelObject) {\n\t\t\toModelObject[\"updatableContexts\"] = aUpdatableContexts;\n\t\t\toModelObject[\"controlId\"] = table.getId();\n\t\t\toInternalModelContext.setProperty(\"\", oModelObject);\n\t\t}\n\n\t\t// Manage a potential callback to enable/disable the create button/menu for a TreeTable\n\t\tif (activeSelectedContexts.length <= 1 && tableDefinition.control.createEnablement) {\n\t\t\tconst parentContext = activeSelectedContexts.length ? activeSelectedContexts[0] : null;\n\t\t\tthis._updateCreateEnablement(\n\t\t\t\toInternalModelContext,\n\t\t\t\ttableDefinition.control.createEnablement,\n\t\t\t\ttable,\n\t\t\t\tparentContext,\n\t\t\t\ttableDefinition.control.nodeType\n\t\t\t);\n\t\t}\n\n\t\tthis.updateCutCopyPasteEnablement(oModelObject, table);\n\t\tthis.updateMoveUpDownEnablement(oModelObject, table);\n\t\treturn ActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, activeSelectedContexts, \"table\");\n\t},\n\n\t/**\n\t * Checks, if the selected context is updatable for Mass Edit.\n\t * @param updatablePropertyPath The updatablePropertyPath from the table annotation\n\t * @param selectedContext The selected context\n\t * @param readOnlyDraftEnabled Indicates, if the table is read only and draft enabled\n\t * @returns Boolean Indicating context is updatable\n\t */\n\tisUpdatableContext: function (updatablePropertyPath: string, selectedContext: Context, readOnlyDraftEnabled: boolean): boolean {\n\t\t/* The updatable contexts with mass edit depend on the following:\n\t\t \t1. Update is dependent on current entity property (updatablePath).\n\t\t \t2. The table is read only and draft enabled (like LR), in this case only active contexts can be mass edited (not draft contexts).\n\t\t    So, update depends on 'IsActiveEntity', 'HasDraftEntity'  value which needs to be checked. */\n\t\tconst contextData = selectedContext.getObject();\n\t\tconst updatableByPath = updatablePropertyPath.length === 0 || !!selectedContext.getProperty(updatablePropertyPath);\n\t\tconst notDraftInReadOnlyMode = !readOnlyDraftEnabled || (contextData.IsActiveEntity && !contextData.HasDraftEntity);\n\t\tif (updatableByPath && notDraftInReadOnlyMode) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * Checks if the node is movable according to the custom logic (if any).\n\t * @param node\n\t * @param table\n\t * @returns True if the custom logic allows the node to be moved (or if there's no custom logic), false otherwise\n\t */\n\tcheckIfNodeIsMovable: function (node: Context, table: Table): boolean {\n\t\tconst isNodeMovableFunction = (table.getParent() as TableAPI).getTableDefinition().control.isNodeMovable;\n\t\tconst nodeMovableCustomFunction = isNodeMovableFunction\n\t\t\t? FPMHelper.getCustomFunction<(context: Context) => boolean>(\n\t\t\t\t\tisNodeMovableFunction.moduleName,\n\t\t\t\t\tisNodeMovableFunction.methodName,\n\t\t\t\t\ttable\n\t\t\t  )\n\t\t\t: undefined;\n\n\t\ttry {\n\t\t\treturn nodeMovableCustomFunction === undefined || nodeMovableCustomFunction(node);\n\t\t} catch (error) {\n\t\t\tLog.warning(`Error in custom function for isNodeMovable: ${error}`);\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t * Checks whether the node can be copied according to the custom logic, if any.\n\t * @param node\n\t * @param table\n\t * @returns True if custom logic allows the node to be copied (or if no custom logic is defined); false otherwise.\n\t */\n\tcheckIfNodeIsCopyable: function (node: Context, table: Table): boolean {\n\t\tconst isNodeCopyableFunction = (table.getParent() as TableAPI).getTableDefinition().control.isNodeCopyable;\n\t\tconst nodeMovableCustomFunction = isNodeCopyableFunction\n\t\t\t? FPMHelper.getCustomFunction<(context: Context) => boolean>(\n\t\t\t\t\tisNodeCopyableFunction.moduleName,\n\t\t\t\t\tisNodeCopyableFunction.methodName,\n\t\t\t\t\ttable\n\t\t\t  )\n\t\t\t: undefined;\n\n\t\ttry {\n\t\t\treturn nodeMovableCustomFunction === undefined || nodeMovableCustomFunction(node);\n\t\t} catch (error) {\n\t\t\tLog.warning(`Error in custom function for isNodeMovable: ${error}`);\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t * Updates the internal context to enable/disable the Cut and Paste buttons.\n\t * @param modelObject Internal context object of the table\n\t * @param table Instance of the Table\n\t * @param forContextMenu\n\t */\n\tupdateCutCopyPasteEnablement: function (modelObject: { [key: string]: unknown }, table: Table, forContextMenu = false): void {\n\t\tmodelObject.contextmenu = modelObject.contextmenu ?? { selectedContexts: [] };\n\n\t\tconst tableDefinition = (table.getParent() as TableAPI).getTableDefinition();\n\t\tif (tableDefinition.control.type !== \"TreeTable\") {\n\t\t\t// The logic below only makes sense for a Tree Table\n\t\t\treturn;\n\t\t}\n\t\tconst view = CommonUtils.getTargetView(table);\n\t\tconst isViewEditable = CommonUtils.getIsEditable(view);\n\t\tif (view.getControllerName() !== \"sap.fe.templates.ListReport.ListReportController\" && !isViewEditable) {\n\t\t\t// If the view is not editable, we disable the cut/copy/paste functionality and clear the nodeUpdatesInfo\n\t\t\tmodelObject.nodeUpdatesInfo = {};\n\t\t\t(modelObject.contextmenu as { [key: string]: unknown }).nodeUpdatesInfo = {};\n\t\t\treturn;\n\t\t}\n\t\tconst checkDraftInstance = !table.getRowBinding().isRelative();\n\n\t\tif (forContextMenu) {\n\t\t\t(modelObject.contextmenu as { [key: string]: unknown }).nodeUpdatesInfo = {};\n\t\t}\n\t\tconst nodeUpdatesInfo = modelObject.nodeUpdatesInfo as { [key: string]: unknown };\n\t\t//If the pastableContext become disconnected from the listBinding, for example, when the user collapses the parent node, we attempt to locate the correct context by comparing their paths\n\t\tconst pastableContexts: Context[] = table\n\t\t\t.getRowBinding()\n\t\t\t.getAllCurrentContexts()\n\t\t\t.filter((context) =>\n\t\t\t\t((nodeUpdatesInfo.pastableContexts || []) as Context[])\n\t\t\t\t\t.map((pastableContext) => pastableContext.getPath())\n\t\t\t\t\t.includes(context.getPath())\n\t\t\t);\n\n\t\tif (pastableContexts.length !== ((nodeUpdatesInfo.pastableContexts || []) as Context[]).length) {\n\t\t\tMessageToast.show(\"\" + ResourceModelHelper.getResourceModel(table).getText(\"M_PASTABLE_CONTEXTS_NOT_AVAILABLE\"));\n\t\t}\n\t\tconst copyCutPasteEnablementInfo = ((!forContextMenu ? modelObject : modelObject.contextmenu) as { [key: string]: unknown })\n\t\t\t.nodeUpdatesInfo as {\n\t\t\t[key: string]: unknown;\n\t\t};\n\t\tconst dataModelsrc = (!forContextMenu ? modelObject : modelObject.contextmenu) as { [key: string]: unknown };\n\t\tconst cutableContexts = (dataModelsrc.updatableContexts as Context[]).filter(\n\t\t\t(context) =>\n\t\t\t\tTableRuntime.checkIfNodeIsMovable(context, table) && (!checkDraftInstance || context.getProperty(\"HasDraftEntity\") !== true)\n\t\t);\n\t\tconst copyableContexts = (dataModelsrc.selectedContexts as Context[]).filter((context) =>\n\t\t\tTableRuntime.checkIfNodeIsCopyable(context, table)\n\t\t);\n\t\tconst selectedContexts = dataModelsrc.selectedContexts as Context[];\n\t\tcopyCutPasteEnablementInfo.cutEnablement = selectedContexts.length === 1 && cutableContexts.length === 1;\n\t\tcopyCutPasteEnablementInfo.copyEnablement = selectedContexts.length === 1 && copyableContexts.length === 1;\n\n\t\tif (nodeUpdatesInfo.lastAction) {\n\t\t\tif (pastableContexts?.length === 0) {\n\t\t\t\tcopyCutPasteEnablementInfo.pasteEnablement = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet contextsforPastableEnablement: Context[];\n\t\t\tconst extensionPoint =\n\t\t\t\tnodeUpdatesInfo.lastAction === \"Cut\"\n\t\t\t\t\t? tableDefinition.control.isMoveToPositionAllowed\n\t\t\t\t\t: tableDefinition.control.isCopyToPositionAllowed;\n\n\t\t\t//remove contexts depending of the custom function\n\t\t\tif (extensionPoint) {\n\t\t\t\tcontextsforPastableEnablement = [...selectedContexts].filter(\n\t\t\t\t\t(targetContext) =>\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tFPMHelper.getCustomFunction<(contexts: Context[]) => boolean>(\n\t\t\t\t\t\t\t\textensionPoint.moduleName,\n\t\t\t\t\t\t\t\textensionPoint.methodName,\n\t\t\t\t\t\t\t\ttable\n\t\t\t\t\t\t\t) as Function\n\t\t\t\t\t\t)(pastableContexts[0], targetContext) //nodeUpdatesInfo.pastableContexts has been the last time the user pressed the cut/copy button\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcontextsforPastableEnablement = [...selectedContexts];\n\t\t\t}\n\n\t\t\t//the paste cannot be done if several contexts are selected\n\t\t\tcopyCutPasteEnablementInfo.pasteEnablement =\n\t\t\t\tselectedContexts.length <= 1 && contextsforPastableEnablement.length === selectedContexts.length;\n\t\t}\n\t},\n\n\t/**\n\t *  Updates the internal context to enable/disable the move up/move down buttons.\n\t * @param modelObject\n\t * @param table\n\t * @param forContextMenu\n\t */\n\tupdateMoveUpDownEnablement: function (modelObject: { [key: string]: unknown }, table: Table, forContextMenu = false): void {\n\t\tconst modelObjectPath = !forContextMenu ? modelObject : (modelObject.contextmenu as { [key: string]: unknown });\n\t\tconst selectedContexts = modelObjectPath.selectedContexts as Context[];\n\t\tconst tableDefinition = (table.getParent() as TableAPI).getTableDefinition();\n\n\t\tconst changeSiblingForRootsSupported = tableDefinition.annotation.changeSiblingForRootsSupported;\n\t\t// Disable the move up/move down buttons if there are no selected contexts, if the table is not a TreeTable, or if the table is sorted\n\t\tif (\n\t\t\tselectedContexts.length !== 1 ||\n\t\t\ttableDefinition.control.type !== \"TreeTable\" ||\n\t\t\ttable.getBindingContext(\"internal\")?.getProperty(\"isSorted\") === true ||\n\t\t\t(selectedContexts[0].getProperty(\"@$ui5.node.level\") === 1 && !changeSiblingForRootsSupported) // Disable move up/down for roots\n\t\t) {\n\t\t\tmodelObjectPath.singleContextMovableUp = false;\n\t\t\tmodelObjectPath.singleContextMovableDown = false;\n\t\t} else {\n\t\t\tconst movedContext = selectedContexts[0];\n\n\t\t\t// Check if the selected context can be moved according to the custom logic (if any) and if it doesn't have a draft instance if we're in a ListReport,\n\t\t\t// and if it's not out-of-place (i.e. it must be displayed at its 'real' position)\n\t\t\tconst movableDraft = table.getRowBinding().isRelative() || movedContext.getProperty(\"HasDraftEntity\") !== true;\n\t\t\tconst outOfPlaceContext = movedContext.isTransient() !== undefined;\n\t\t\tconst customMovable = TableRuntime.checkIfNodeIsMovable(movedContext, table);\n\t\t\tmodelObjectPath.singleContextMovableUp =\n\t\t\t\tmovableDraft && customMovable && !outOfPlaceContext && !movedContext.isDeleted() && movedContext.getSibling(-1) !== null;\n\t\t\tmodelObjectPath.singleContextMovableDown =\n\t\t\t\tmovableDraft && customMovable && !outOfPlaceContext && !movedContext.isDeleted() && movedContext.getSibling(1) !== null;\n\t\t}\n\t},\n\n\t/**\n\t * Updates the internal context to enable/disable the Create button / menu / menu items.\n\t * @param internalContext\n\t * @param createEnablementCallback\n\t * @param createEnablementCallback.moduleName\n\t * @param createEnablementCallback.methodName\n\t * @param table\n\t * @param parentContext\n\t * @param nodeTypeParameters\n\t * @param nodeTypeParameters.propertyName\n\t * @param nodeTypeParameters.values\n\t * @param forContextMenu\n\t */\n\t_updateCreateEnablement: function (\n\t\tinternalContext: InternalModelContext,\n\t\tcreateEnablementCallback: { moduleName: string; methodName: string },\n\t\ttable: Table,\n\t\tparentContext: Context | null,\n\t\tnodeTypeParameters?: { propertyName: string; values: { value: string }[] },\n\t\tforContextMenu = false\n\t): void {\n\t\tlet possibleValues: (string | undefined)[];\n\t\tif (nodeTypeParameters !== undefined) {\n\t\t\t// Push all possible values in the menu\n\t\t\tpossibleValues = nodeTypeParameters.values.map((option) => option.value);\n\t\t} else {\n\t\t\t// No menu --> Only 'undefined' value that corresponds to the 'Create' button\n\t\t\tpossibleValues = [undefined];\n\t\t}\n\n\t\tconst enablementFunction = FPMHelper.getCustomFunction<(nodeType: string | undefined, parentContext: Context | null) => boolean>(\n\t\t\tcreateEnablementCallback.moduleName,\n\t\t\tcreateEnablementCallback.methodName,\n\t\t\ttable\n\t\t);\n\n\t\tif (!enablementFunction) {\n\t\t\treturn;\n\t\t}\n\t\tconst enabledFlags = possibleValues.map((value) => {\n\t\t\tlet enabled = false;\n\t\t\ttry {\n\t\t\t\tenabled = !!(enablementFunction(value, parentContext) ?? true);\n\t\t\t} catch (_error) {\n\t\t\t\tenabled = true;\n\t\t\t}\n\t\t\treturn enabled;\n\t\t});\n\t\t// enableFlags[i] is true <=> possibleValues[i] is allowed for creation\n\n\t\tconst enablementMap: Record<string, boolean> = {};\n\t\tenablementMap[\"Create\"] = enabledFlags.some((flag) => flag); // Enable the Menu (or the button) if at least one option is possible\n\t\tenabledFlags.forEach((enabled, index) => {\n\t\t\tenablementMap[`Create_${index}`] = enabled;\n\t\t});\n\n\t\tconst contextPath = forContextMenu ? \"contextmenu/\" : \"\";\n\t\tinternalContext.setProperty(contextPath + \"createEnablement\", enablementMap);\n\t},\n\n\t/**\n\t * Clears the table selection, and enables/disables the 'Create' button/menu if necessary.\n\t * @param table The table\n\t */\n\tclearSelection: function (table: Table): void {\n\t\t// Clear the selection in the control\n\t\ttable.clearSelection();\n\n\t\t// Update the selection-related information in the internal model\n\t\tconst internalModelContext = table.getBindingContext(\"internal\");\n\t\tif (internalModelContext) {\n\t\t\tinternalModelContext.setProperty(\"deleteEnabled\", false);\n\t\t\tinternalModelContext.setProperty(\"numberOfSelectedContexts\", 0);\n\t\t\tinternalModelContext.setProperty(\"selectedContexts\", []);\n\t\t\tinternalModelContext.setProperty(\"deletableContexts\", []);\n\t\t}\n\n\t\t// Enable/disable the 'Create' button/menu if necessary\n\t\tconst tableAPI = table.getParent() as TableAPI;\n\t\tif (tableAPI.tableDefinition.control.createEnablement) {\n\t\t\tthis._updateCreateEnablement(\n\t\t\t\tinternalModelContext as InternalModelContext,\n\t\t\t\ttableAPI.tableDefinition.control.createEnablement,\n\t\t\t\ttable,\n\t\t\t\tnull,\n\t\t\t\ttableAPI.tableDefinition.control.nodeType\n\t\t\t);\n\t\t}\n\t},\n\n\tdisableAction: function (aActionsMultiselectDisabled: string[], oDynamicActions: Record<string, { bEnabled?: boolean }>): void {\n\t\taActionsMultiselectDisabled.forEach(function (sAction: string) {\n\t\t\toDynamicActions[sAction] = { bEnabled: false };\n\t\t});\n\t},\n\tonFieldChangeInCreationRow: function (\n\t\toEvent: Field$ChangeEvent & UI5Event<{ isValid: boolean }>,\n\t\twithCustomValidationFunction: boolean\n\t): void {\n\t\t// CREATION ROW CASE\n\t\tconst mField = FieldRuntimeHelper.getFieldStateOnChange(oEvent),\n\t\t\toSourceField = mField.field,\n\t\t\tsFieldId = oSourceField.getId();\n\n\t\tconst oInternalModelContext = oSourceField.getBindingContext(\"internal\") as InternalModelContext,\n\t\t\tmFieldValidity = oInternalModelContext.getProperty(\"creationRowFieldValidity\"),\n\t\t\tmNewFieldValidity = Object.assign({}, mFieldValidity);\n\n\t\tmNewFieldValidity[sFieldId] = mField.state;\n\t\toInternalModelContext.setProperty(\"creationRowFieldValidity\", mNewFieldValidity);\n\n\t\t// prepare Custom Validation\n\t\tif (withCustomValidationFunction) {\n\t\t\tconst mCustomValidity = oInternalModelContext.getProperty(\"creationRowCustomValidity\"),\n\t\t\t\tmNewCustomValidity = Object.assign({}, mCustomValidity);\n\t\t\tmNewCustomValidity[oSourceField.getBinding(\"value\")!.getPath()] = {\n\t\t\t\tfieldId: oSourceField.getId()\n\t\t\t};\n\t\t\toInternalModelContext.setProperty(\"creationRowCustomValidity\", mNewCustomValidity);\n\t\t\t// Remove existing CustomValidation message\n\t\t\tconst sTarget = `${oSourceField.getBindingContext()?.getPath()}/${oSourceField.getBindingPath(\"value\")}`;\n\t\t\tMessaging.getMessageModel()\n\t\t\t\t.getData()\n\t\t\t\t.forEach(function (oMessage: Message) {\n\t\t\t\t\tif (oMessage.getTargets()[0] === sTarget) {\n\t\t\t\t\t\tMessaging.removeMessages(oMessage);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t},\n\tonTreeTableContextChanged: function (event: UI5Event, initialExpansionLevel?: number): void {\n\t\t// When the context of a TreeTable changes, we want to restore its expansion state to the default:\n\t\t//   - all expanded if there's a search parameter coming from the filterBar\n\t\t//   - otherwise initial expansion state coming from the PV (stored in the payload)\n\t\t//   - otherwise no expansion at all\n\n\t\tconst source = event.getSource();\n\t\tconst table = source as Table;\n\t\tconst tableAPI = table.getParent() as TableAPI;\n\t\tconst rowBinding = table.getRowBinding();\n\t\tif (!rowBinding?.getContext() || tableAPI.getIgnoreContextChangeEvent()) {\n\t\t\t// The table is not bound, or we're in the middle of switching between normal and fullscreen, so we don't want to change the expansion state\n\t\t\treturn;\n\t\t}\n\n\t\tconst aggregation: {\n\t\t\taggregate?: object;\n\t\t\texpandTo?: number;\n\t\t\tgrandTotalAtBottomOnly?: boolean;\n\t\t\tgroup?: object;\n\t\t\tgroupLevels?: string[];\n\t\t\thierarchyQualifier?: string;\n\t\t\tsearch?: string;\n\t\t\tsubtotalsAtBottomOnly?: boolean;\n\t\t} = rowBinding.getAggregation() ?? {};\n\t\tconst filterInfo = TableUtils.getAllFilterInfo(table);\n\t\taggregation.expandTo = filterInfo.search ? Number.MAX_SAFE_INTEGER : initialExpansionLevel;\n\t\trowBinding.setAggregation(aggregation);\n\t},\n\n\t/**\n\t * Called when an item in a 'Create' menu is clicked. It creates a document with the corresponding initial data.\n\t * @param event\n\t * @param valueIndex The index of the item in the menu\n\t * @param selectedContexts The selected contexts in the table for this 'Create' menu\n\t */\n\tonCreateMenuItemPress: async function (event: UI5Event<{}, MenuItem>, valueIndex: number, selectedContexts: Context[]): Promise<void> {\n\t\tconst mdcTable = FPMHelper.getMdcTable(event.getSource());\n\t\tconst tableAPI = mdcTable?.getParent() as TableAPI | undefined;\n\n\t\t// Some checks to be on the safe side\n\t\tif (!tableAPI || !mdcTable) {\n\t\t\treturn;\n\t\t}\n\t\tconst nodeType = tableAPI.tableDefinition.control.nodeType;\n\t\tif (!nodeType) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst view = CommonUtils.getTargetView(tableAPI);\n\t\tconst creationData: Record<string, string> = {};\n\t\tcreationData[nodeType.propertyName] = nodeType.values[valueIndex].value;\n\n\t\tconst creationParameters: {\n\t\t\tcreationMode: string;\n\t\t\tselectedContexts?: Context[];\n\t\t\ttableId?: string;\n\t\t\tcreationDialogFields?: string[];\n\t\t\tdata?: object;\n\t\t} = {\n\t\t\tselectedContexts,\n\t\t\tcreationMode: tableAPI.tableDefinition.annotation.create.mode,\n\t\t\tdata: creationData,\n\t\t\ttableId: mdcTable?.getId()\n\t\t};\n\n\t\tif (creationParameters.creationMode === CreationMode.CreationDialog) {\n\t\t\tcreationParameters.creationDialogFields = nodeType.values[valueIndex].creationDialogFields;\n\t\t\tif (!creationParameters.creationDialogFields || creationParameters.creationDialogFields.length === 0) {\n\t\t\t\t// Use the default value if no creation fields are specified for this menu item\n\t\t\t\tcreationParameters.creationDialogFields = tableAPI.tableDefinition.control.creationDialogFields;\n\t\t\t}\n\t\t\tif (!mdcTable.getRowBinding()) {\n\t\t\t\t// In creation dialog mode, we force the table data to be loaded before creating the document\n\t\t\t\t// (to overcome the case in a ListReport where no data is loaded yet)\n\t\t\t\tawait mdcTable.rebind();\n\t\t\t}\n\t\t}\n\n\t\tview.getController()\n\t\t\t.editFlow.createDocument(tableAPI.getRowBinding(), creationParameters)\n\t\t\t.catch((error) => {\n\t\t\t\tLog.error(`Failed to create new document: ${error}`);\n\t\t\t});\n\t},\n\n\t/**\n\t * Called when the 'Create' button is pressed, or the 'Create' command invoked.\n\t * @param event\n\t * @param selectedContexts The selected contexts in the table for this 'Create' button\n\t */\n\tonCreateButtonPress: async function (event: UI5Event, selectedContexts?: Context[]): Promise<void> {\n\t\tconst mdcTable = FPMHelper.getMdcTable(event.getSource());\n\t\tconst tableAPI = mdcTable?.getParent() as TableAPI | undefined;\n\n\t\t// Some checks to be on the safe side\n\t\tif (!tableAPI || !mdcTable) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst creationParameters: {\n\t\t\tcreateAtEnd?: boolean;\n\t\t\tcreationMode: string;\n\t\t\toutbound?: string;\n\t\t\tcreationRow?: CreationRow;\n\t\t\tselectedContexts?: Context[];\n\t\t\ttableId?: string;\n\t\t\tcreationDialogFields?: string[];\n\t\t} = { creationMode: tableAPI.tableDefinition.annotation.create.mode };\n\n\t\tswitch (creationParameters.creationMode) {\n\t\t\tcase CreationMode.External:\n\t\t\t\tcreationParameters.outbound = (tableAPI.tableDefinition.annotation.create as CreateBehaviorExternal).outbound;\n\t\t\t\tbreak;\n\n\t\t\tcase CreationMode.CreationRow:\n\t\t\t\tcreationParameters.creationRow = event.getSource();\n\t\t\t\tcreationParameters.createAtEnd = tableAPI.tableDefinition.control.createAtEnd ?? false;\n\t\t\t\tbreak;\n\n\t\t\tcase CreationMode.NewPage:\n\t\t\tcase CreationMode.Inline:\n\t\t\tcase CreationMode.CreationDialog:\n\t\t\t\tcreationParameters.createAtEnd = tableAPI.tableDefinition.control.createAtEnd ?? false;\n\t\t\t\tcreationParameters.tableId = mdcTable?.getId();\n\t\t\t\tcreationParameters.selectedContexts = selectedContexts;\n\t\t\t\tbreak;\n\n\t\t\tcase CreationMode.InlineCreationRows:\n\t\t\t\t// Nothing\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t// Other modes are not supported\n\t\t\t\treturn;\n\t\t}\n\n\t\tif (creationParameters.creationMode === CreationMode.CreationDialog) {\n\t\t\tcreationParameters.creationDialogFields = tableAPI.tableDefinition.control.creationDialogFields;\n\t\t\tif (!mdcTable.getRowBinding()) {\n\t\t\t\t// In creation dialog mode, we force the table data to be loaded before creating the document\n\t\t\t\t// (to overcome the case in a ListReport where no data is loaded yet)\n\t\t\t\tawait mdcTable.rebind();\n\t\t\t}\n\t\t}\n\n\t\tconst view = CommonUtils.getTargetView(tableAPI);\n\n\t\tif (creationParameters.creationMode === CreationMode.InlineCreationRows) {\n\t\t\tview.getController()\n\t\t\t\t.editFlow.createEmptyRowsAndFocus(mdcTable)\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tLog.error(`Failed to create new empty row: ${error}`);\n\t\t\t\t});\n\t\t} else {\n\t\t\tview.getController()\n\t\t\t\t.editFlow.createDocument(tableAPI, creationParameters)\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tLog.error(`Failed to create new document: ${error}`);\n\t\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Method to manage the IntentBased Navigation enablement.\n\t * @param internalModelContext\n\t * @param navigationAvailableMap\n\t * @param selectedContexts\n\t * @param forContextMenu\n\t */\n\tsetIntentBasedNavigationEnablement: function (\n\t\tinternalModelContext: InternalModelContext,\n\t\tnavigationAvailableMap: string[],\n\t\tselectedContexts: Context[],\n\t\tforContextMenu = false\n\t): void {\n\t\tfor (const sKey in navigationAvailableMap) {\n\t\t\tif (!forContextMenu) {\n\t\t\t\tinternalModelContext.setProperty(`ibn/${sKey}`, {\n\t\t\t\t\tbEnabled: false,\n\t\t\t\t\taApplicable: [],\n\t\t\t\t\taNotApplicable: []\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tinternalModelContext.setProperty(`ibn/${sKey}`, {\n\t\t\t\t\t// Do not change enabled, aApplicable and aNotApplicable property in case of context menu calculation\n\t\t\t\t\tbEnabled: internalModelContext.getProperty(`${internalModelContext.getPath()}/ibn/${sKey}/bEnabled`),\n\t\t\t\t\taApplicable: internalModelContext.getProperty(`${internalModelContext.getPath()}/ibn/${sKey}/aApplicable`),\n\t\t\t\t\taNotApplicable: internalModelContext.getProperty(`${internalModelContext.getPath()}/ibn/${sKey}/aNotApplicable`),\n\t\t\t\t\tbEnabledForContextMenu: false,\n\t\t\t\t\taApplicableForContextMenu: [],\n\t\t\t\t\taNotApplicableForContextMenu: []\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst aApplicable = [],\n\t\t\t\taNotApplicable = [];\n\t\t\tconst sProperty = navigationAvailableMap[sKey];\n\t\t\tfor (const selectedContext of selectedContexts) {\n\t\t\t\tif (selectedContext.getObject(sProperty)) {\n\t\t\t\t\tconst enabledProperty = !forContextMenu ? \"bEnabled\" : \"bEnabledForContextMenu\";\n\t\t\t\t\tinternalModelContext.getModel().setProperty(`${internalModelContext.getPath()}/ibn/${sKey}/${enabledProperty}`, true);\n\t\t\t\t\taApplicable.push(selectedContext);\n\t\t\t\t} else {\n\t\t\t\t\taNotApplicable.push(selectedContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst applicableProperty = !forContextMenu ? \"aApplicable\" : \"aApplicableForContextMenu\";\n\t\t\tconst notApplicableProperty = !forContextMenu ? \"aNotApplicable\" : \"aNotApplicableForContextMenu\";\n\t\t\tinternalModelContext.getModel().setProperty(`${internalModelContext.getPath()}/ibn/${sKey}/${applicableProperty}`, aApplicable);\n\t\t\tinternalModelContext\n\t\t\t\t.getModel()\n\t\t\t\t.setProperty(`${internalModelContext.getPath()}/ibn/${sKey}/${notApplicableProperty}`, aNotApplicable);\n\t\t}\n\t},\n\n\t/**\n\t * Called when a context menu item is pressed.\n\t * @param event\n\t */\n\tonContextMenuItemSelected: function (event: UI5Event): void {\n\t\tconst mdcTable = FPMHelper.getMdcTable(event.getSource());\n\t\tconst tableAPI = mdcTable?.getParent() as TableAPI | undefined;\n\n\t\t// Set the flag on the tableAPI so that getSelectedContexts returns the correct value\n\t\ttableAPI?.setContextMenuActive(true);\n\n\t\t// After a short delay (once the corresponding action has been triggered), we need to reset the flag on the table\n\t\tsetTimeout(() => {\n\t\t\ttableAPI?.setContextMenuActive(false);\n\t\t}, 0);\n\t},\n\n\t/**\n\t * Handles the MDC DataStateIndicator plugin to display messageStrip on a table.\n\t * @param message\n\t * @param control\n\t * @returns Whether to render the messageStrip visible\n\t */\n\tdataStateIndicatorFilter: function (message: Message, control: Control): boolean {\n\t\tconst tableAPI = control.getParent() as TableAPI;\n\t\treturn tableAPI.dataStateIndicatorFilter(message, control);\n\t}\n};\n\nexport default TableRuntime;\n"],"mappings":"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","ignoreList":[]}