{"version":3,"file":"MassEditDialogHelper.js","names":["MassEditDialogHelper","props","this","maxAnalyzedRows","analyzedContexts","fieldProperties","entityTypePath","table","getParent","getTableDefinition","annotation","collection","metaModel","getModel","getMetaModel","manifestSettings","control","massEdit","onContextMenu","onDialogClose","onClose","view","CommonUtils","getTargetView","contexts","fetchContextsForEdit","degradedMode","length","slice","isAdaptation","getAppComponent","isAdaptationMode","headerInfo","getInvolvedDataModelObjects","getContext","targetEntityType","annotations","UI","HeaderInfo","_exports","_proto","prototype","open","async","templateComponent","Component","getOwnerComponentFor","internalModelContext","getBindingContext","internalModelProperty","selectedContexts","getProperty","getFieldsPropertiesFromInfo","getFieldsInfo","some","field","visible","noFieldInformation","confirmSelection","runAsOwner","massEditDialog","MassEditDialog","dialog","create","attachBeforeClose","requiredDataPromise","getRequiredDataPromise","getDataAfterOpeningDialog","resolve","error","Log","reject","visibleFieldsFromManifest","visibleFields","resourceBundle","Library","getResourceBundleFor","message","messageDetail","getText","getResourceText","TypeName","reduce","fields","fieldProperty","includes","propertyInfo","relativePath","push","label","join","MessageBox","information","details","resourceModel","ResourceModelHelper","getResourceModel","coreResourceBundle","updatableContexts","Promise","tableAPI","editButton","cancelButton","typeName","typeNamePlural","TypeNamePlural","ModelHelper","isDraftSupported","data","readOnly","getMessageDetailForNonEditable","warning","actions","emphasizedAction","selection","undefined","getTranslatedTextFromExpBindingString","compileExpression","getExpressionFromAnnotation","toLocaleLowerCase","getEntityFieldsInfo","columnsData","columns","propertiesKeys","Set","column","type","name","transformPathsToInfo","getColumns","map","getPropertyKey","ignoredFields","ignoredField","delete","propertiesPaths","Array","from","columnInfos","propertyPath","columnInfo","getFieldInfo","entityPath","getMetaPath","entitySetDataModel","relatedColumnInfo","find","fieldInfo","annotationPath","propertyDataModel","enhanceDataModelPath","convertedAnnotation","convertMetaModelContext","targetProperty","getCompliantProperty","entityProperties","key","targetObject","isProperty","IsImageURL","isDataFieldTypes","hasOwnProperty","Value","$target","unitProperty","getAssociatedUnitProperty","isMultiValueField","hasValueHelp","Common","ValueListRelevantQualifiers","isHiddenForContexts","expBinding","anyObject","_jsx","Any","anyBoolean","setModel","isHidden","context","setBindingContext","getBinding","getExternalValue","destroy","updatableContextProperty","getFieldProperties","deepClone","fieldsInfo","dataPropertyPath","getContextRelativeTargetObjectPath","unitOrCurrencyPropertyPath","getAssociatedUnitPropertyPath","getAssociatedCurrencyPropertyPath","inputType","getInputType","getRelativePaths","fieldData","visibilityBindings","isVisible","editMode","getEditMode","constant","Label","isFieldRequired","getRequiredExpression","descriptionPath","getAssociatedTextPropertyPath","textBinding","expression","getTextBinding","displayMode","getDisplayMode","IsTimezone","readOnlyExpression","isReadOnlyExpression","clearable","isPropertyClearable","emptyValue","getEmptyValueForProperty","selectItems","getDataForOpeningDialog","all","isFieldVisible","runtimeSelection","getRuntimeSelection","getDefaultSelectOptions","generateFieldsProperties","generateEntityFieldsProperties","missingContexts","bindingsToFetch","concat","pathInModel","getMissingData","bindingsToResolve","bindings","getViewData","converterType","displayedProperties","every","promises","controls","model","binding","filter","startsWith","parameters","bindingType","controlBinding","setBindingMode","BindingMode","OneTime","isA","getBindings","nestedBinding","requestValue","promise","property","nullable","any","formatWithTypeInformation","value","getBindingInfo","getType","parseValue","distinctMap","selectOptions","anyText","selectedContext","propertyText","has","add","text","unitOrCurrencyValue","getObject","propertyValue","keepEntry","SpecificSelectKeys","KeepKey","defaultOptions","ReplaceKey","ClearFieldValueKey","getFieldEditable","FieldEditMode","Editable","Object","keys","anyControl","dataFieldConverted","dataModelPath","editStyleProperties","setEditStyleProperties","editStyle","isStaticEditMode","isEditable"],"sources":["./MassEditDialogHelper.tsx"],"sourcesContent":["import type { PrimitiveType, Property, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type { DataField, DataFieldForAction, DataFieldForAnnotation, HeaderInfo } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport Any from \"sap/fe/core/controls/Any\";\nimport { convertMetaModelContext, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { isDataFieldTypes } from \"sap/fe/core/converters/annotations/DataField\";\nimport type { MassEditTableConfiguration } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport ResourceModelHelper from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { isReadOnlyExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\thasValueHelp\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { getEditMode, getRequiredExpression, isMultiValueField, isVisible } from \"sap/fe/core/templating/UIFormatters\";\nimport { getTextBinding, setEditStyleProperties } from \"sap/fe/macros/field/FieldTemplating\";\nimport type { FieldBlockProperties } from \"sap/fe/macros/internal/field/FieldStructureHelper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Component from \"sap/ui/core/Component\";\nimport Library from \"sap/ui/core/Lib\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport BindingMode from \"sap/ui/model/BindingMode\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type PropertyBinding from \"sap/ui/model/PropertyBinding\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport MassEditDialog from \"./MassEditDialog\";\nimport type { BindingInfo, MassFieldProperties, SelectInfo } from \"./library\";\nimport { SpecificSelectKeys } from \"./library\";\n\ntype DataFieldTypes = DataField | DataFieldForAnnotation | DataFieldForAction;\ntype FieldInfo = {\n\tkey: string;\n\tpropertyDataModel: DataModelObjectPath<Property>;\n\ttargetProperty: Property;\n\tlabel: string;\n\tconvertedAnnotation: DataFieldTypes;\n};\n\ntype BindingToFetch = BindingInfo & { contexts?: ODataV4Context[] };\n\n/**\n * Display the massEdit dialog.\n */\nexport default class MassEditDialogHelper {\n\tprivate readonly table: Table;\n\n\tprivate readonly onContextMenu: boolean;\n\n\tprivate readonly onDialogClose: (() => void) | undefined;\n\n\tprivate readonly view: FEView;\n\n\tprivate readonly maxAnalyzedRows = 30;\n\n\tprivate contexts: ODataV4Context[];\n\n\tprivate readonly analyzedContexts: ODataV4Context[] = [];\n\n\tprivate readonly degradedMode: boolean;\n\n\tprivate readonly manifestSettings: MassEditTableConfiguration;\n\n\tprivate fieldProperties: MassFieldProperties[] = [];\n\n\tprivate readonly isAdaptation: boolean;\n\n\tprivate readonly headerInfo: HeaderInfo | undefined;\n\n\tmassEditDialog: MassEditDialog | undefined;\n\n\tconstructor(props: { table: Table; onContextMenu: boolean; onClose?: () => void }) {\n\t\tconst entityTypePath = (props.table.getParent() as TableAPI).getTableDefinition().annotation.collection,\n\t\t\tmetaModel = (props.table.getModel() as ODataModel).getMetaModel();\n\n\t\tthis.table = props.table;\n\t\tthis.manifestSettings = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit;\n\t\tthis.onContextMenu = props.onContextMenu;\n\t\tthis.onDialogClose = props.onClose;\n\t\tthis.view = CommonUtils.getTargetView(this.table);\n\t\tthis.contexts = this.fetchContextsForEdit();\n\t\tthis.degradedMode = this.contexts.length > this.maxAnalyzedRows;\n\t\tthis.analyzedContexts = this.degradedMode ? this.contexts.slice(0, this.maxAnalyzedRows) : this.contexts;\n\t\tthis.isAdaptation = CommonUtils.getAppComponent(this.table).isAdaptationMode();\n\t\tthis.headerInfo = getInvolvedDataModelObjects(metaModel.getContext(entityTypePath)).targetEntityType.annotations.UI?.HeaderInfo;\n\t}\n\n\t/**\n\t * Opens the mass edit dialog if all selected contexts are editable,\n\t * otherwise a message box to confirm the selection.\n\t * @returns A promise that resolves on open of the mass edit dialog.\n\t */\n\tasync open(): Promise<void> {\n\t\ttry {\n\t\t\tconst templateComponent = Component.getOwnerComponentFor(this.view) as TemplateComponent;\n\t\t\tconst internalModelContext = this.table.getBindingContext(\"internal\") as InternalModelContext,\n\t\t\t\tinternalModelProperty = !this.onContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\",\n\t\t\t\tselectedContexts = internalModelContext.getProperty(internalModelProperty) || 0;\n\t\t\tthis.fieldProperties = await this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t\t\tif (!this.isAdaptation) {\n\t\t\t\t// no field to edit\n\t\t\t\tif (!this.fieldProperties.some((field) => field.visible)) {\n\t\t\t\t\tthis.noFieldInformation();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//Some rows are not editable -> do we want to continue?\n\t\t\t\tif (this.contexts.length !== selectedContexts) {\n\t\t\t\t\tthis.contexts = await this.confirmSelection(this.contexts, selectedContexts);\n\t\t\t\t\tif (!this.contexts.length) {\n\t\t\t\t\t\t// the user doesn't want to continue\n\t\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait templateComponent.runAsOwner(async () => {\n\t\t\t\tthis.massEditDialog = new MassEditDialog({\n\t\t\t\t\ttable: this.table,\n\t\t\t\t\tcontexts: this.contexts,\n\t\t\t\t\tfieldProperties: this.fieldProperties\n\t\t\t\t});\n\t\t\t\tconst dialog = await this.massEditDialog.create();\n\t\t\t\tdialog.attachBeforeClose(() => {\n\t\t\t\t\tthis.onDialogClose?.();\n\t\t\t\t});\n\t\t\t\tdialog.open();\n\t\t\t\tconst requiredDataPromise = this.massEditDialog.getRequiredDataPromise();\n\t\t\t\ttry {\n\t\t\t\t\tawait this.getDataAfterOpeningDialog(this.fieldProperties);\n\t\t\t\t\trequiredDataPromise.resolve();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog to get required data.\", error as string);\n\t\t\t\t\trequiredDataPromise.reject();\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Mass Edit: Something went wrong in mass edit dialog creation.\", error as string);\n\t\t}\n\t}\n\n\t/**\n\t * Opens the message box to notify no fields are editable.\n\t */\n\tprivate noFieldInformation(): void {\n\t\tconst visibleFieldsFromManifest = (this.table.getParent() as TableAPI).getTableDefinition().control.massEdit.visibleFields;\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tlet message = \"\",\n\t\t\tmessageDetail;\n\t\tif (visibleFieldsFromManifest.length > 0) {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_WITH_MANIFEST\", [\n\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceBundle.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\")\n\t\t\t]);\n\t\t\tmessageDetail = `<ul>\n\t\t\t${this.fieldProperties\n\t\t\t\t.reduce((fields: string[], fieldProperty) => {\n\t\t\t\t\tif (visibleFieldsFromManifest.includes(fieldProperty.propertyInfo.relativePath)) {\n\t\t\t\t\t\tfields.push(`<li>${fieldProperty.label}</li>`);\n\t\t\t\t\t}\n\t\t\t\t\treturn fields;\n\t\t\t\t}, [])\n\t\t\t\t.join(\"\")} </ul>`;\n\t\t} else {\n\t\t\tmessage = resourceBundle.getText(\"C_MASS_EDIT_NO_EDITABLE_FIELDS_DEFAULT\");\n\t\t}\n\n\t\tMessageBox.information(message, {\n\t\t\tdetails: messageDetail,\n\t\t\tonClose: () => {\n\t\t\t\tthis.onDialogClose?.();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Opens the confirmation dialog to validate the selected contexts.\n\t * @param contexts The contexts set as updatable\n\t * @param selectedContexts  The number of selected contexts\n\t * @returns A promise that resolves the contexts to be finally managed.\n\t */\n\tprivate async confirmSelection(contexts: ODataV4Context[], selectedContexts: number): Promise<ODataV4Context[]> {\n\t\tconst resourceModel = ResourceModelHelper.getResourceModel(this.table);\n\t\tconst coreResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\") as ResourceBundle;\n\n\t\tconst updatableContexts = contexts.length;\n\t\treturn new Promise((resolve) => {\n\t\t\ttry {\n\t\t\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\t\t\tconst editButton = resourceModel.getText(\"C_MASS_EDIT_CONFIRM_BUTTON_TEXT\"),\n\t\t\t\t\tcancelButton = coreResourceBundle.getText(\"C_COMMON_OBJECT_PAGE_CANCEL\"),\n\t\t\t\t\tmetaModel = (this.table.getModel() as ODataModel).getMetaModel(),\n\t\t\t\t\ttypeName =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeName) ?? resourceModel.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME\"),\n\t\t\t\t\ttypeNamePlural =\n\t\t\t\t\t\tthis.getResourceText(this.headerInfo?.TypeNamePlural) ??\n\t\t\t\t\t\tresourceModel.getText(\"C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME_PLURAL\"),\n\t\t\t\t\tmessageDetail =\n\t\t\t\t\t\tModelHelper.isDraftSupported(metaModel, this.table.data(\"targetCollectionPath\")) && tableAPI.readOnly\n\t\t\t\t\t\t\t? this.getMessageDetailForNonEditable(typeName, typeNamePlural)\n\t\t\t\t\t\t\t: \"\";\n\n\t\t\t\tMessageBox.warning(\n\t\t\t\t\tresourceModel.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE\", [\n\t\t\t\t\t\tselectedContexts - updatableContexts,\n\t\t\t\t\t\tselectedContexts,\n\t\t\t\t\t\tupdatableContexts,\n\t\t\t\t\t\ttypeNamePlural\n\t\t\t\t\t]),\n\t\t\t\t\t{\n\t\t\t\t\t\tdetails: messageDetail,\n\t\t\t\t\t\tactions: [editButton, cancelButton],\n\t\t\t\t\t\temphasizedAction: editButton,\n\t\t\t\t\t\tonClose: function (selection: string) {\n\t\t\t\t\t\t\tresolve(selection === editButton ? contexts : []);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(error as string);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Gets the text according to an annotation.\n\t * @param annotation The annotation\n\t * @returns The text.\n\t */\n\tprivate getResourceText(annotation: PropertyAnnotationValue<String> | undefined): string | undefined {\n\t\tif (!annotation) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn CommonUtils.getTranslatedTextFromExpBindingString(\n\t\t\tcompileExpression(getExpressionFromAnnotation(annotation)) as string,\n\t\t\tthis.view\n\t\t)?.toLocaleLowerCase();\n\t}\n\n\t/**\n\t * Gets the message detail of the confirmation dialog.\n\t * @param typeName The type name of the entity set\n\t * @param typeNamePlural The type name plural of the entity set\n\t * @returns The text.\n\t */\n\tprivate getMessageDetailForNonEditable(typeName: string, typeNamePlural: string): string {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\treturn `<p><strong>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_HEADER\")}</strong></p>\\n\n\t\t\t<p>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON\", [typeNamePlural])}</p>\\n\n\t\t\t<ul>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_DRAFT\", [typeName])}</li>\n\t\t\t\t<li>${resourceBundle.getText(\"C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_NON_EDITABLE\", [typeName])}</li>\n\t\t\t</ul>`;\n\t}\n\n\t/**\n\t * Gets information about the entity which is compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\n\tprivate getEntityFieldsInfo(): FieldInfo[] {\n\t\tconst tableAPI = this.table.getParent() as TableAPI;\n\t\tconst columnsData = tableAPI.getTableDefinition().columns;\n\n\t\tconst propertiesKeys = new Set(\n\t\t\tcolumnsData.reduce((fields: string[], column) => {\n\t\t\t\tif (column.type === \"Annotation\") {\n\t\t\t\t\tfields.push(column.name);\n\t\t\t\t}\n\t\t\t\treturn fields;\n\t\t\t}, [])\n\t\t);\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Gets information about the properties of the table which are compliant for a Mass Edit.\n\t * @returns Array of the field information.\n\t */\n\tprivate getFieldsInfo(): FieldInfo[] {\n\t\tconst propertiesKeys =\n\t\t\tthis.manifestSettings.visibleFields.length > 0\n\t\t\t\t? new Set(this.manifestSettings.visibleFields)\n\t\t\t\t: new Set(this.table.getColumns().map((column) => column.getPropertyKey()));\n\n\t\tif (this.manifestSettings.ignoredFields.length > 0) {\n\t\t\tfor (const ignoredField of this.manifestSettings.ignoredFields) {\n\t\t\t\tpropertiesKeys.delete(ignoredField);\n\t\t\t}\n\t\t}\n\t\treturn this.transformPathsToInfo(propertiesKeys);\n\t}\n\n\t/**\n\t * Transforms a set of property paths to an array of field information.\n\t * @param propertiesPaths The set of property paths\n\t * @returns Array of the field information.\n\t */\n\tprivate transformPathsToInfo(propertiesPaths: Set<string>): FieldInfo[] {\n\t\treturn Array.from(propertiesPaths).reduce((columnInfos: FieldInfo[], propertyPath) => {\n\t\t\tconst columnInfo = this.getFieldInfo(propertyPath);\n\t\t\tif (columnInfo) {\n\t\t\t\tcolumnInfos.push(columnInfo);\n\t\t\t}\n\t\t\treturn columnInfos;\n\t\t}, []);\n\t}\n\n\t/**\n\t * Gets information about a property.\n\t * @param propertyPath\n\t * @returns Field information.\n\t */\n\tprivate getFieldInfo(propertyPath: string): FieldInfo | undefined {\n\t\tconst columnsData = (this.table.getParent() as TableAPI).getTableDefinition().columns;\n\t\tconst metaModel = (this.table.getModel() as ODataModel).getMetaModel();\n\t\tconst entityPath = metaModel.getMetaPath(this.table.data(\"metaPath\"));\n\t\tconst entitySetDataModel = getInvolvedDataModelObjects(metaModel.getContext(entityPath));\n\t\tconst relatedColumnInfo = columnsData.find((fieldInfo) => fieldInfo.name === propertyPath && fieldInfo.type === \"Annotation\");\n\t\tif (relatedColumnInfo) {\n\t\t\tconst annotationPath = (relatedColumnInfo as AnnotationTableColumn).annotationPath;\n\t\t\tif (annotationPath && propertyPath) {\n\t\t\t\tconst propertyDataModel = enhanceDataModelPath<Property>(entitySetDataModel, propertyPath);\n\t\t\t\tconst convertedAnnotation = convertMetaModelContext(metaModel.getContext(annotationPath)) as\n\t\t\t\t\t| DataField\n\t\t\t\t\t| DataFieldForAnnotation\n\t\t\t\t\t| DataFieldForAction;\n\t\t\t\tconst targetProperty = this.getCompliantProperty(propertyDataModel, convertedAnnotation);\n\t\t\t\tif (targetProperty && entitySetDataModel.targetEntityType.entityProperties.includes(targetProperty))\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: relatedColumnInfo.key,\n\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\tlabel: relatedColumnInfo.label ?? relatedColumnInfo.key,\n\t\t\t\t\t\tconvertedAnnotation\n\t\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Gets the property to display on the Dialog.\n\t * @param propertyDataModel The dataModelObjectPath of the column\n\t * @param annotation  The converted annotation of the column\n\t * @returns The property if it is compliant, undefined otherwise\n\t */\n\tprivate getCompliantProperty(propertyDataModel: DataModelObjectPath<Property>, annotation: DataFieldTypes): Property | undefined {\n\t\tconst targetObject = propertyDataModel.targetObject;\n\t\tlet targetProperty: Property;\n\t\tif (isProperty(targetObject)) {\n\t\t\ttargetProperty = targetObject;\n\t\t\tif (targetObject.annotations.UI?.IsImageURL) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else if (isDataFieldTypes(annotation) && !annotation.hasOwnProperty(\"Action\")) {\n\t\t\ttargetProperty = annotation.Value.$target;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\t// Check if the field is compliant for the MassEdit\n\t\tconst unitProperty = getAssociatedUnitProperty(targetProperty);\n\t\tif (\n\t\t\tisMultiValueField(propertyDataModel) ||\n\t\t\t(hasValueHelp(targetProperty) && targetProperty.annotations?.Common?.ValueListRelevantQualifiers) || // context dependent VH is not supported for Mass Edit.\n\t\t\t(unitProperty && hasValueHelp(unitProperty) && unitProperty.annotations?.Common?.ValueListRelevantQualifiers)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\treturn targetProperty;\n\t}\n\n\t/**\n\t * Checks if the field is hidden for the provided contexts.\n\t * @param expBinding The expression binding of the property.\n\t * @returns True if the field is hidden for all contexts, false otherwise\n\t */\n\tprivate isHiddenForContexts(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === \"true\") {\n\t\t\treturn false;\n\t\t} else if (expBinding === \"false\") {\n\t\t\treturn true;\n\t\t}\n\t\tconst anyObject = <Any anyBoolean={expBinding} />;\n\t\tanyObject.setModel(this.analyzedContexts[0].getModel());\n\t\tconst isHidden = !this.analyzedContexts.find((context) => {\n\t\t\tanyObject.setBindingContext(context);\n\t\t\treturn (anyObject.getBinding(\"anyBoolean\") as PropertyBinding).getExternalValue();\n\t\t});\n\t\tanyObject.destroy();\n\t\treturn isHidden;\n\t}\n\n\t/**\n\t * Gets the selected context set as updatable.\n\t * @returns The contexts.\n\t */\n\tprivate fetchContextsForEdit(): ODataV4Context[] {\n\t\tconst internalModelContext = this.table.getBindingContext(\"internal\"),\n\t\t\tupdatableContextProperty = !this.onContextMenu ? \"updatableContexts\" : \"contextmenu/updatableContexts\";\n\t\treturn internalModelContext?.getProperty(updatableContextProperty) ?? [];\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields.\n\t * @returns The properties of the mass edit field.\n\t */\n\tgetFieldProperties(): MassFieldProperties[] {\n\t\treturn deepClone(this.fieldProperties);\n\t}\n\n\t/**\n\t * Gets the properties of the mass edit fields from an array of field information.\n\t * @param fieldsInfo The field information.\n\t * @returns The properties of the mass edit fields.\n\t */\n\tprivate async getFieldsPropertiesFromInfo(fieldsInfo: FieldInfo[]): Promise<MassFieldProperties[]> {\n\t\tconst fieldProperties: MassFieldProperties[] = [];\n\n\t\tfor (const fieldInfo of fieldsInfo) {\n\t\t\tconst { targetProperty, propertyDataModel, convertedAnnotation } = fieldInfo;\n\t\t\tconst dataPropertyPath = getContextRelativeTargetObjectPath(propertyDataModel);\n\t\t\tif (dataPropertyPath) {\n\t\t\t\tconst unitOrCurrencyPropertyPath =\n\t\t\t\t\tgetAssociatedUnitPropertyPath(targetProperty) || getAssociatedCurrencyPropertyPath(targetProperty);\n\t\t\t\tconst inputType = this.getInputType(convertedAnnotation, propertyDataModel);\n\t\t\t\tif (inputType && propertyDataModel.targetObject) {\n\t\t\t\t\tconst relativePath = getRelativePaths(propertyDataModel);\n\t\t\t\t\tconst fieldData = {\n\t\t\t\t\t\tvisibilityBindings: {\n\t\t\t\t\t\t\tisVisible: compileExpression(isVisible(convertedAnnotation)),\n\t\t\t\t\t\t\teditMode: getEditMode(\n\t\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\t\tpropertyDataModel,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\t\tconstant(true)\n\t\t\t\t\t\t\t) as CompiledBindingToolkitExpression\n\t\t\t\t\t\t},\n\t\t\t\t\t\tvisible: true, //by default the field is visible\n\t\t\t\t\t\tlabel: fieldInfo.label || (targetProperty.annotations.Common?.Label as string | undefined) || dataPropertyPath,\n\t\t\t\t\t\tisFieldRequired: getRequiredExpression(\n\t\t\t\t\t\t\ttargetProperty,\n\t\t\t\t\t\t\tconvertedAnnotation,\n\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tpropertyDataModel\n\t\t\t\t\t\t) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\tdescriptionPath: getAssociatedTextPropertyPath(propertyDataModel.targetObject),\n\t\t\t\t\t\ttextBinding: {\n\t\t\t\t\t\t\texpression: getTextBinding(propertyDataModel, {\n\t\t\t\t\t\t\t\tdisplayMode: getDisplayMode(targetProperty, propertyDataModel)\n\t\t\t\t\t\t\t}) as CompiledBindingToolkitExpression,\n\t\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t\ttargetProperty.type === \"Edm.DateTimeOffset\" || targetProperty?.annotations?.Common?.IsTimezone\n\t\t\t\t\t\t\t\t\t? \"anyText\"\n\t\t\t\t\t\t\t\t\t: \"any\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\treadOnlyExpression: isReadOnlyExpression(targetProperty, relativePath),\n\t\t\t\t\t\tinputType,\n\t\t\t\t\t\tpropertyInfo: {\n\t\t\t\t\t\t\tclearable: this.isPropertyClearable(targetProperty),\n\t\t\t\t\t\t\temptyValue: this.getEmptyValueForProperty(targetProperty, dataPropertyPath),\n\t\t\t\t\t\t\tkey: fieldInfo.key,\n\t\t\t\t\t\t\trelativePath: dataPropertyPath,\n\t\t\t\t\t\t\tunitOrCurrencyPropertyPath\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselectItems: [] as SelectInfo[]\n\t\t\t\t\t};\n\t\t\t\t\tfieldProperties.push(fieldData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait this.getDataForOpeningDialog(fieldProperties);\n\t\tawait Promise.all(\n\t\t\tfieldProperties.map(async (fieldData) => {\n\t\t\t\tfieldData.visible = this.manifestSettings.visibleFields.length === 0 ? this.isFieldVisible(fieldData) : true;\n\t\t\t\tconst runtimeSelection = !this.isAdaptation ? await this.getRuntimeSelection(fieldData) : [];\n\t\t\t\tfieldData.selectItems = [...this.getDefaultSelectOptions(fieldData), ...runtimeSelection];\n\t\t\t})\n\t\t);\n\t\treturn fieldProperties;\n\t}\n\n\t/**\n\t * Gets the properties of dialog fields.\n\t * @returns The properties.\n\t */\n\tasync generateFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the properties of the entity.\n\t * @returns The properties.\n\t */\n\tasync generateEntityFieldsProperties(): Promise<MassFieldProperties[]> {\n\t\treturn this.getFieldsPropertiesFromInfo(this.getEntityFieldsInfo());\n\t}\n\n\t/**\n\t * Gets the relevant data from the model needed after the opening of the dialog.\n\t * This method is called only in the degraded mode since the data is already fetched in the normal mode.\n\t * the degraded mode is set when the number of selected contexts is greater than the max analyzed rows.\n\t * @param fieldProperties The field properties\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getDataAfterOpeningDialog(fieldProperties: MassFieldProperties[]): Promise<void> {\n\t\tif (this.degradedMode) {\n\t\t\tconst missingContexts = this.contexts.slice(this.maxAnalyzedRows, this.contexts.length);\n\t\t\tconst bindingsToFetch = ([] as BindingToFetch[]).concat(\n\t\t\t\t...fieldProperties.map((fieldData) => [\n\t\t\t\t\t{ expression: compileExpression(fieldData.readOnlyExpression), contexts: this.contexts },\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: compileExpression(pathInModel(fieldData.propertyInfo.relativePath)),\n\t\t\t\t\t\tcontexts: missingContexts,\n\t\t\t\t\t\ttype: fieldData.textBinding.type\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: compileExpression(pathInModel(fieldData.propertyInfo.unitOrCurrencyPropertyPath)),\n\t\t\t\t\t\tcontexts: missingContexts\n\t\t\t\t\t}\n\t\t\t\t])\n\t\t\t);\n\t\t\tawait this.getMissingData(bindingsToFetch);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the relevant data from the model needed to open the dialog.\n\t * @param fieldProperties The field properties\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getDataForOpeningDialog(fieldProperties: MassFieldProperties[]): Promise<void> {\n\t\tconst bindingsToResolve = ([] as BindingToFetch[]).concat(\n\t\t\tfieldProperties.reduce((bindings: BindingToFetch[], fieldData) => {\n\t\t\t\tbindings = bindings.concat([\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: fieldData.textBinding.expression,\n\t\t\t\t\t\ttype: fieldData.textBinding.type\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\texpression: compileExpression(pathInModel(fieldData.propertyInfo.relativePath)),\n\t\t\t\t\t\ttype: fieldData.textBinding.type\n\t\t\t\t\t},\n\t\t\t\t\t{ expression: compileExpression(pathInModel(fieldData.propertyInfo.unitOrCurrencyPropertyPath)) }\n\t\t\t\t]);\n\t\t\t\tif (!this.manifestSettings.visibleFields.length) {\n\t\t\t\t\tbindings = bindings.concat([\n\t\t\t\t\t\t{ expression: fieldData.visibilityBindings.isVisible },\n\t\t\t\t\t\t{ expression: fieldData.visibilityBindings.editMode }\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t\tif (!this.degradedMode) {\n\t\t\t\t\tbindings.push({ expression: compileExpression(fieldData.readOnlyExpression) });\n\t\t\t\t}\n\t\t\t\treturn bindings;\n\t\t\t}, [])\n\t\t);\n\t\tawait this.getMissingData(bindingsToResolve);\n\t}\n\n\t/**\n\t * Gets the missing data for the fields.\n\t * This method generates controls with the provided bindings to fetch the missing data.\n\t * The model requests the data to the backend when the contexts doesn't contains the related properties.\n\t * @param bindingsToFetch The binding to resolve and its property path reference\n\t * @returns A promise that resolves when the data is fetched.\n\t */\n\tprivate async getMissingData(bindingsToFetch: BindingToFetch[]): Promise<undefined> {\n\t\tif (this.isAdaptation) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.view.getViewData().converterType === \"ObjectPage\") {\n\t\t\tconst displayedProperties = this.table.getColumns().map((column) => column.getPropertyKey());\n\t\t\tif (this.manifestSettings.visibleFields.every((field) => displayedProperties.includes(field))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tconst promises = [];\n\t\tconst controls = [];\n\t\tconst model = this.contexts[0].getModel();\n\t\tfor (const binding of bindingsToFetch.filter((binding) => binding.expression?.startsWith(\"{\"))) {\n\t\t\t// Avoid to fetch constant bindings\n\t\t\tconst parameters = {} as Record<string, CompiledBindingToolkitExpression>;\n\t\t\tconst analyzedContexts = binding.contexts ?? this.analyzedContexts;\n\t\t\tconst bindingType = binding.type ?? \"any\";\n\t\t\tparameters[bindingType] = binding.expression;\n\t\t\tfor (const context of analyzedContexts) {\n\t\t\t\tconst control = <Any {...parameters} />;\n\t\t\t\tcontrol.setModel(model);\n\t\t\t\tcontrol.setBindingContext(context);\n\t\t\t\tcontrols.push(control);\n\t\t\t\tpromises.push(async () => {\n\t\t\t\t\tconst controlBinding = control.getBinding(bindingType) as ODataPropertyBinding | undefined;\n\t\t\t\t\tif (controlBinding) {\n\t\t\t\t\t\tcontrolBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\t\t\tif (controlBinding.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t\t\t\tawait Promise.all(controlBinding.getBindings().map((nestedBinding) => nestedBinding.requestValue?.()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait controlBinding.requestValue?.();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises.map(async (promise) => promise()));\n\t\tfor (const control of controls) {\n\t\t\tcontrol.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * Gets the default value of the property when the related field is empty.\n\t * @param property The property\n\t * @param propertyPath The property path\n\t * @returns The default value.\n\t */\n\tgetEmptyValueForProperty(property: Property, propertyPath: string): PrimitiveType {\n\t\tif (property.nullable !== false) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst context = this.contexts[0];\n\t\t\tconst anyObject = <Any any={compileExpression(formatWithTypeInformation(property, pathInModel(propertyPath)))} />;\n\t\t\tanyObject.setModel(context.getModel());\n\t\t\tanyObject.setBindingContext(context);\n\t\t\tconst value = anyObject.getBindingInfo(\"any\").binding.getType().parseValue(\"\", \"string\");\n\t\t\tanyObject.destroy();\n\t\t\treturn value;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the property is clearable.\n\t * Some OData types don't access empty string or 0 as a valid value when it's not nullable.\n\t * For example, Edm.DateTime doesn't accept an empty string as a valid value.\n\t * @param property The property\n\t * @returns True if the property is clearable, false otherwise.\n\t */\n\tisPropertyClearable(property: Property): PrimitiveType {\n\t\tif (property.nullable !== false) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn ![\"Edm.DateTime\", \"Edm.DateTimeOffset\", \"Edm.TimeOfDay\", \"Edm.Time\", \"Edm.Date\", \"Edm.DateTimeWithTimezone\"].includes(\n\t\t\t\tproperty.type\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the selection options of a field generated by the selected contexts.\n\t * @param fieldData Data of the field used by both the static and the runtime model\n\t * @returns The select options of the field\n\t */\n\tprivate async getRuntimeSelection(fieldData: MassFieldProperties): Promise<SelectInfo[]> {\n\t\tconst distinctMap = new Set<string>();\n\t\tconst selectOptions: SelectInfo[] = [];\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\treturn [];\n\t\t}\n\t\tconst anyObject = (<Any anyText={fieldData.textBinding.expression} />) as typeof Any;\n\t\tanyObject.setModel(this.contexts[0].getModel());\n\t\tfor (const selectedContext of this.analyzedContexts) {\n\t\t\tanyObject.setBindingContext(selectedContext);\n\t\t\tconst textBinding = anyObject.getBinding(\"anyText\");\n\t\t\tif (textBinding?.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t// If the text binding is a composite binding, we need to request the value of each binding\n\t\t\t\t// to wait for the promise to resolve before getting the value of requestUnitsOfMeasure/requestCurrencyCodes\n\t\t\t\t// for the custom units of measure and currency codes.\n\t\t\t\t// We have to set the binding mode to OneTime to avoid the binding to be updated when the context changes.\n\t\t\t\t// Indeed even if the requestUnitsOfMeasure/requestCurrencyCodes doesn't change it's trigger a PATCH request\n\t\t\t\ttextBinding.setBindingMode(BindingMode.OneTime);\n\t\t\t\tawait Promise.all(textBinding.getBindings().map((binding) => binding.requestValue?.()));\n\t\t\t}\n\t\t\tconst propertyText = (anyObject.getBinding(\"anyText\") as PropertyBinding | undefined)?.getExternalValue();\n\t\t\tif (propertyText && !distinctMap.has(propertyText)) {\n\t\t\t\tdistinctMap.add(propertyText);\n\t\t\t\tselectOptions.push({\n\t\t\t\t\ttext: propertyText,\n\t\t\t\t\tkey: propertyText,\n\t\t\t\t\tunitOrCurrencyValue: fieldData.propertyInfo.unitOrCurrencyPropertyPath\n\t\t\t\t\t\t? selectedContext.getObject(fieldData.propertyInfo.unitOrCurrencyPropertyPath)\n\t\t\t\t\t\t: \"\",\n\t\t\t\t\tpropertyValue: selectedContext.getObject(fieldData.propertyInfo.relativePath)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tanyObject.destroy();\n\t\treturn selectOptions;\n\t}\n\n\t/**\n\t * Gets the default selection options of a field.\n\t * @param fieldData The property information\n\t * @returns The default select options.\n\t */\n\tprivate getDefaultSelectOptions(fieldData: MassFieldProperties): SelectInfo[] {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\") as ResourceBundle;\n\t\tconst keepEntry = {\n\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_KEEP_VALUES\"),\n\t\t\tkey: SpecificSelectKeys.KeepKey\n\t\t};\n\t\tconst defaultOptions: SelectInfo[] = [];\n\t\tdefaultOptions.push(keepEntry);\n\t\tif (fieldData.inputType === \"CheckBox\") {\n\t\t\tdefaultOptions.push({ text: resourceBundle.getText(\"yes\"), key: \"true\" }, { text: resourceBundle.getText(\"no\"), key: \"false\" });\n\t\t} else {\n\t\t\tdefaultOptions.push({\n\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_REPLACE_VALUES\"),\n\t\t\t\tkey: SpecificSelectKeys.ReplaceKey\n\t\t\t});\n\t\t\tif (fieldData.isFieldRequired !== \"true\" && fieldData.propertyInfo.clearable) {\n\t\t\t\tdefaultOptions.push({\n\t\t\t\t\ttext: resourceBundle.getText(\"C_MASS_EDIT_COMBOBOX_CLEAR_VALUES\"),\n\t\t\t\t\tkey: SpecificSelectKeys.ClearFieldValueKey\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn defaultOptions;\n\t}\n\n\t/**\n\t * Checks if the the field is editable.\n\t * @param expBinding The expression binding of the property.\n\t * @returns Returns true if the mass edit field is editable.\n\t */\n\tprivate getFieldEditable(expBinding: CompiledBindingToolkitExpression): boolean {\n\t\tif (expBinding === FieldEditMode.Editable) {\n\t\t\treturn true;\n\t\t} else if (Object.keys(FieldEditMode).includes(expBinding as FieldEditMode)) {\n\t\t\treturn false;\n\t\t} else if (expBinding) {\n\t\t\tconst anyControl = <Any any={expBinding} />;\n\t\t\tconst model = this.analyzedContexts[0].getModel();\n\t\t\tanyControl.setModel(model);\n\t\t\tconst visible = this.analyzedContexts.some((context) => {\n\t\t\t\tanyControl.setBindingContext(context);\n\t\t\t\treturn (anyControl.getBinding(\"any\") as PropertyBinding).getExternalValue() === FieldEditMode.Editable;\n\t\t\t});\n\t\t\tanyControl.destroy();\n\t\t\treturn visible;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the input type of the field.\n\t * @param dataFieldConverted The converted annotation fo the field\n\t * @param dataModelPath The dataModelObjectPath of the property\n\t * @returns The input type.\n\t */\n\tprivate getInputType(dataFieldConverted: DataFieldTypes, dataModelPath: DataModelObjectPath<Property>): string | undefined | null {\n\t\tconst editStyleProperties = {} as FieldBlockProperties;\n\t\tsetEditStyleProperties(editStyleProperties, dataFieldConverted, dataModelPath, true);\n\t\treturn editStyleProperties?.editStyle;\n\t}\n\n\t/**\n\t * Gets the visibility of the field\n\t * This visibility is not dependent on the context when\n\t *  - either the adaptation mode is set.\n\t *  - or the field is visible in the manifest and the degraded mode is set.\n\t * @param fieldProperties The properties of the mass edit field\n\t * @returns True if the field is visible, false otherwise\n\t */\n\tprivate isFieldVisible(fieldProperties: MassFieldProperties): boolean {\n\t\tif (this.isAdaptation || (this.manifestSettings.visibleFields.length && this.degradedMode)) {\n\t\t\tconst isStaticEditMode = Object.keys(FieldEditMode).includes(fieldProperties.visibilityBindings.editMode as FieldEditMode);\n\t\t\tconst isEditable =\n\t\t\t\t!isStaticEditMode || (isStaticEditMode && fieldProperties.visibilityBindings.editMode === FieldEditMode.Editable);\n\t\t\treturn isEditable && fieldProperties.visibilityBindings.isVisible !== \"false\";\n\t\t}\n\t\treturn (\n\t\t\tthis.getFieldEditable(fieldProperties.visibilityBindings.editMode) &&\n\t\t\t!this.isHiddenForContexts(fieldProperties.visibilityBindings.isVisible)\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}