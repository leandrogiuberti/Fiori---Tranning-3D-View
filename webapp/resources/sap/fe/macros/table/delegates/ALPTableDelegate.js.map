{"version":3,"file":"ALPTableDelegate.js","names":["ALPTableDelegate","Object","assign","TableDelegate","apiVersion","_internalUpdateBindingInfo","table","bindingInfo","filterInfo","chartFilters","_computeRowBindingInfoFromTemplate","getRowBinding","suspended","view","CommonUtils","getTargetView","mdcChart","getController","getChartControl","chartAPI","getParent","chartSelectionsExist","hasSelections","tableFilterInfo","TableUtils","getAllFilterInfo","tableFilters","filters","chartFilterInfo","ChartUtils","forEach","element","getPath","sPath","getChartPropertiesWithoutPrefixes","finalFilters","concat","oFilter","length","Filter","and","bindingPath","path","updateBindingInfoWithSearchQuery","addFilterOnActiveEntities","rebind","internalModelContext","getBindingContext","templateContentView","getProperty"],"sources":["./ALPTableDelegate.ts"],"sourcesContent":["import CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type Chart from \"sap/fe/macros/Chart\";\nimport ChartUtils from \"sap/fe/macros/chart/ChartUtils\";\nimport TableUtils from \"sap/fe/macros/table/Utils\";\nimport TableDelegate from \"sap/fe/macros/table/delegates/TableDelegate\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type { BaseAggregationBindingInfo, BasePropertyInfo } from \"sap/ui/base/ManagedObject\";\nimport type MDCChart from \"sap/ui/mdc/Chart\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport Filter from \"sap/ui/model/Filter\";\n/**\n * Helper class for sap.ui.mdc.Table.\n * <h3><b>Note:</b></h3>\n * The class is experimental and the API/behaviour is not finalised and hence this should not be used for productive usage.\n * @author SAP SE\n * @private\n * @since 1.69.0\n * @alias sap.fe.macros.ALPTableDelegate\n */\nconst ALPTableDelegate = Object.assign({}, TableDelegate, {\n\tapiVersion: 2,\n\t_internalUpdateBindingInfo: function (table: Table, bindingInfo: BasePropertyInfo) {\n\t\tlet filterInfo;\n\t\tlet chartFilters;\n\n\t\t// We need to deepClone the info we get from the custom data, otherwise some of its subobjects (e.g. parameters) will\n\t\t// be shared with oBindingInfo and modified later (Object.assign only does a shallow clone)\n\t\tObject.assign(bindingInfo, TableDelegate._computeRowBindingInfoFromTemplate(table));\n\t\tif (table.getRowBinding()) {\n\t\t\tbindingInfo.suspended = false;\n\t\t}\n\t\tconst view = CommonUtils.getTargetView(table);\n\t\tconst mdcChart = (view.getController() as ListReportController).getChartControl?.() as MDCChart;\n\t\tconst chartAPI = mdcChart?.getParent() as Chart;\n\t\tconst chartSelectionsExist = chartAPI?.hasSelections();\n\t\tconst tableFilterInfo = TableUtils.getAllFilterInfo(table);\n\t\tconst tableFilters = tableFilterInfo && tableFilterInfo.filters;\n\t\tfilterInfo = tableFilterInfo;\n\t\tif (chartSelectionsExist) {\n\t\t\tconst chartFilterInfo = ChartUtils.getAllFilterInfo(mdcChart);\n\t\t\tif (chartFilterInfo && chartFilterInfo.filters) {\n\t\t\t\tchartFilterInfo.filters.forEach((element: Filter) => {\n\t\t\t\t\tif (element.getPath()) {\n\t\t\t\t\t\t(element as { sPath?: string }).sPath = chartAPI.getChartPropertiesWithoutPrefixes(element.getPath()!);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tchartFilters = chartFilterInfo?.filters ?? null;\n\t\t\tfilterInfo = chartFilterInfo;\n\t\t}\n\t\tconst finalFilters = (tableFilters && chartFilters ? tableFilters.concat(chartFilters) : chartFilters || tableFilters) || [];\n\t\tconst oFilter =\n\t\t\tfinalFilters.length > 0\n\t\t\t\t? new Filter({\n\t\t\t\t\t\tfilters: finalFilters,\n\t\t\t\t\t\tand: true\n\t\t\t\t  })\n\t\t\t\t: null;\n\n\t\tif (filterInfo.bindingPath) {\n\t\t\t// In case of parameters\n\t\t\tbindingInfo.path = filterInfo.bindingPath;\n\t\t}\n\n\t\t// Prepare binding info with filter/search parameters\n\t\tALPTableDelegate.updateBindingInfoWithSearchQuery(bindingInfo, filterInfo, oFilter);\n\n\t\tTableDelegate.addFilterOnActiveEntities(table, bindingInfo);\n\t},\n\trebind: function (table: Table, bindingInfo: BaseAggregationBindingInfo) {\n\t\tconst internalModelContext = table.getBindingContext(\"pageInternal\");\n\t\tconst templateContentView = internalModelContext?.getProperty(`${internalModelContext.getPath()}/alpContentView`);\n\t\tif (templateContentView !== \"Chart\") {\n\t\t\tTableDelegate.rebind(table, bindingInfo);\n\t\t}\n\t}\n});\n\nexport default ALPTableDelegate;\n"],"mappings":";;;;4MAmBA,MAAMA,EAAmBC,OAAOC,OAAO,CAAC,EAAGC,EAAe,CACzDC,WAAY,EACZC,2BAA4B,SAAUC,EAAcC,GACnD,IAAIC,EACJ,IAAIC,EAIJR,OAAOC,OAAOK,EAAaJ,EAAcO,mCAAmCJ,IAC5E,GAAIA,EAAMK,gBAAiB,CAC1BJ,EAAYK,UAAY,KACzB,CACA,MAAMC,EAAOC,EAAYC,cAAcT,GACvC,MAAMU,EAAYH,EAAKI,gBAAyCC,oBAChE,MAAMC,EAAWH,GAAUI,YAC3B,MAAMC,EAAuBF,GAAUG,gBACvC,MAAMC,EAAkBC,EAAWC,iBAAiBnB,GACpD,MAAMoB,EAAeH,GAAmBA,EAAgBI,QACxDnB,EAAae,EACb,GAAIF,EAAsB,CACzB,MAAMO,EAAkBC,EAAWJ,iBAAiBT,GACpD,GAAIY,GAAmBA,EAAgBD,QAAS,CAC/CC,EAAgBD,QAAQG,QAASC,IAChC,GAAIA,EAAQC,UAAW,CACrBD,EAA+BE,MAAQd,EAASe,kCAAkCH,EAAQC,UAC5F,GAEF,CACAvB,EAAemB,GAAiBD,SAAW,KAC3CnB,EAAaoB,CACd,CACA,MAAMO,GAAgBT,GAAgBjB,EAAeiB,EAAaU,OAAO3B,GAAgBA,GAAgBiB,IAAiB,GAC1H,MAAMW,EACLF,EAAaG,OAAS,EACnB,IAAIC,EAAO,CACXZ,QAASQ,EACTK,IAAK,OAEL,KAEJ,GAAIhC,EAAWiC,YAAa,CAE3BlC,EAAYmC,KAAOlC,EAAWiC,WAC/B,CAGAzC,EAAiB2C,iCAAiCpC,EAAaC,EAAY6B,GAE3ElC,EAAcyC,0BAA0BtC,EAAOC,EAChD,EACAsC,OAAQ,SAAUvC,EAAcC,GAC/B,MAAMuC,EAAuBxC,EAAMyC,kBAAkB,gBACrD,MAAMC,EAAsBF,GAAsBG,YAAY,GAAGH,EAAqBd,4BACtF,GAAIgB,IAAwB,QAAS,CACpC7C,EAAc0C,OAAOvC,EAAOC,EAC7B,CACD,IACE,OAEYP,CAAgB","ignoreList":[]}