{"version":3,"file":"TableDelegate.js","names":["SEMANTICKEY_HAS_DRAFTINDICATOR","SEARCH_HAS_BEEN_FIRED","COLUMN_HAS_BEEN_ADDED","PREVIOUS_SORTERS","Object","assign","TableDelegateBase","apiVersion","_computeVisualSettingsForFieldGroup","table","propertyInfo","propertyInfos","key","indexOf","column","getColumns","find","col","getPropertyKey","showDataFieldsLabel","data","oMetaModel","getModel","getMetaModel","involvedDataModelObjects","getInvolvedDataModelObjects","getContext","annotationPath","convertedMetaData","convertedTypes","oDataField","targetObject","oFieldGroup","Target","$target","aFieldWidth","Data","forEach","oData","oDataFieldWidth","$Type","TableSizeHelper","getWidthForDataFieldForAnnotation","getWidthForDataField","labelWidth","propertyWidth","SizeHelper","getButtonWidth","Label","toString","push","nWidest","reduce","acc","value","Math","max","visualSettings","deepExtend","widthCalculation","verticalArrangement","minWidth","ceil","_computeVisualSettingsForPropertyWithValueHelp","property","tableAPI","this","_getTableAPI","metaModel","dataField","getObject","gap","getProperty","_computeVisualSettingsForPropertyWithUnit","unit","unitText","timezoneText","oTableAPI","text","getReadOnly","_computeLabel","labelMap","label","propertiesWithSameLabel","isPropertyUsedAsTextOnlyProperty","some","prop","path","mode","length","includes","additionalLabels","filterable","join","_updatePropertyInfo","properties","p13nMode","getP13nMode","sortable","groupable","undefined","concat","groupLabel","group","dataType","visible","getParent","UI5Element","getElementById","getId","getColumnsFor","getTableDefinition","columns","fetchExportCapabilities","async","oTable","oCapabilities","XLSX","oModel","DelegateUtil","fetchModel","then","model","aSupportedFormats","aLowerFormats","map","element","toLowerCase","oAnnotation","catch","err","Log","error","_isFilterableNavigationProperty","columnInfo","columnDataModelObjectPath","isFilterable","isPathFilterable","relativePath","isPartOfLineItem","isPartOfCustomColumn","isConstant","_fetchPropertyInfo","appComponent","sAbsoluteNavigationPath","oNavigationContext","createBindingContext","isComplexType","typeConfig","className","bFilterable","CommonHelper","isPropertyFilterable","bIsAnalyticalTable","getCustomData","getLocalizedText","tooltip","_getTypeConfig","name","formatOptions","baseType","style","constraints","availability","exportSettings","_setPropertyInfoExportSettings","type","ColumnType","Annotation","template","clipboardSettings","keys","exportDataPointTargetValue","_updateAnalyticalPropertyInfoAttributes","isKey","isGroupable","textArrangement","_setTextArrangementInfo","extension","technicallyGroupable","caseSensitive","additionalLabel","exportFormat","_getExportFormat","format","TypeMap","getTypeConfig","isTypeFilterable","descriptionColumn","oCol","textProperty","valueProperty","descriptionProperty","aggregatable","_fetchComputedPropertyInfo","_fetchCustomPropertyInfo","header","startsWith","ModelHelper","fetchTextFromMetaModel","_bColumnHasPropertyWithDraftIndicator","oColumnInfo","hasDraftIndicator","fieldGroupDraftIndicatorPropertyPath","_updateDraftIndicatorModel","_oTable","_oColumnInfo","aVisibleColumns","oInternalBindingContext","getBindingContext","sInternalPath","getPath","index","setProperty","_fetchPropertiesForEntity","entityTypePath","bindingPath","getEntitySetPath","fetchedProperties","nonFilterableProperties","CommonUtils","getFilterRestrictionsByPath","NonFilterableProperties","Promise","resolve","maxConditions","isMultiValue","Error","setEnhancedFetchedPropertyInfos","getPropertyInfos","_getCachedOrFetchPropertiesForEntity","getCachedPropertyInfos","subFetchedProperties","setCachedPropertyInfos","setNoDataInformation","illustratedMessageInformation","noDataAggregation","getNoData","isA","currentIllustratedMessage","setTitle","title","setDescription","description","setIllustrationType","illustrationType","setIllustrationSize","illustrationSize","illustratedMessage","IllustratedMessage","setNoData","setTableNoDataIllustratedMessage","bindingInfo","tableFilterInfo","TableUtils","getAllFilterInfo","resourceModel","getResourceModel","suffixResourceKey","substring","illustratedInformation","getNoDataIllustratedMessageWithFilters","getQuickFilter","getText","IllustratedMessageType","NoSearchResults","filterAssociation","getFilter","hasFilterOrSearch","search","filters","test","NoData","getTargetView","getViewData","liveMode","getNoDataMessageMode","currentNoData","handleTableDataRequested","oInternalModelContext","oBinding","getRowBinding","bDataRequestedAttached","attachDataRequested","setTimeout","tableDefaultsPromise","getTableDefaults","handleTableDataReceived","bDataReceivedAttached","attachDataReceived","aSelectedContexts","getSelectedContexts","oActionOperationAvailableMap","JSON","parse","tableDefinition","operationAvailableMap","ActionRuntime","setActionEnablement","DeleteHelper","updateDeleteInfoForSelectedContexts","tableDefaultData","setUpEmptyRows","_updateAvailableCards","setOptimisticBatchPromiseForModel","controller","getAppComponent","setOptimisticBatchEnablerPromise","PromiseKeeper","setOptimisticBatchForModel","enableOptimisticBatchMode","filtersPropertiesAsPotentiallySensitiveDataOrDateType","isFilterEligibleForOptimisticBatch","_getFilterBarControl","getOptimisticBatchEnablerPromise","dataModel","isOptimisticBatchHasToBeEnabled","getShellServices","isFlpOptimisticBatchPluginLoaded","getOptimisticBatchEnabler","isOptimisticBatchDisabled","optimisticBatchEnablerPromiseKeeper","setOptimisticBatchEnabler","promise","rebind","oBindingInfo","bIsSuspended","TableRuntime","clearSelection","apply","onTableBound","whenBound","oError","fetchProperties","preInit","fastCreationRow","getCreationRow","setBindingContext","updateBindingInfo","internalBindingContext","quickFilter","collectionBindingInfoAPI","CollectionBindingInfoAPI","_handleSortersOnCurrenciesOrUoM","_internalUpdateBindingInfo","_handleRecommendationOutputFields","_handleFiltersForExternalID","fireEvent","collectionBindingInfo","quickFilterKey","getSelectedKey","attachedEvents","getAttachedEvents","context","TableHelper","enableFastCreationRow","setAttachEvents","e","sorters","sorter","newSortersToBeApplied","tableProperties","tableProperty","unitProperty","unitSorterAvailable","sort","Sorter","getFilters","updateFiltersForExternalID","getPageController","recommendations","isRecommendationEnabled","tableDef","recommendationOutputProperties","getSideEffectsService","getRecommendationOutputFields","annotation","entityTypeName","parameters","$select","getView","converterType","cards","collectAvailableCards","collaborationManager","CollaborationManager","cardObject","updateCards","parentAppId","getCollaborationManagerService","addCardsToCollaborationManager","shareAvailableCards","getInResultPropertyKeys","control","analyticalConfiguration","aggregationOnLeafLevel","allKkeysRequested","checkAllKeysAreRequested","overrideRowPress","requestAtLeast","filter","fieldName","origin","getContent","allColumns","keyPropertyNames","c","displayedColumns","referencedPropertyPaths","Set","processColumn","add","additionalProperties","additionalColumnName","additionalColumn","relatedColumnName","relatedColumn","every","propName","has","getSearchQuery","binding","aggregation","getAggregation","getQueryOptionsFromParameters","$search","updateBinding","$$getKeepAliveContext","collectionPath","internalModel","keptAliveLists","needManualRefresh","view","manualUpdatePropertyKey","pendingManualUpdate","newSorters","stringify","viewData","oldFilters","previousSorters","filterNotChanged","deepEqual","LRMultiViewEnabled","views","enableAnalytics","setAggregateConditions","setGroupConditions","setTableBindingInfo","setDownloadUrl","requestRefresh","getGroupId","finally","storedEvents","_ref","eventId","callback","listener","attachEvent","_computeRowBindingInfoFromTemplate","rowBindingInfo","getTableTemplateBindingInfo","bindingContext","tableCanBeInInlineEdit","getBinding","getUpdateGroupId","INLINEEDIT_UPDATEGROUPID","$$updateGroupId","suspended","oFilter","oFilterInfo","Filter","and","oDataStateIndicator","getDataStateIndicator","isFiltering","updateBindingInfoWithSearchQuery","addFilterOnActiveEntities","filterInfo","normalizeSearchTerm","payload","getPayload","filterOnActiveEntities","filterOnActive","operator","value1","_templateSlotColumnFragment","modifier","tableId","slotColumnsXML","DOMParser","parseFromString","jsx","renderAsXML","getSlotColumn","slotXML","getElementsByTagName","oTemplate","firstElementChild","nodeName","replaceWith","remove","resultXML","XMLPreprocessor","process","models","getController","getOwnerComponent","getPreprocessorContext","targets","Fragment","load","definition","ExcelFormat","getExcelDatefromJSDate","getExcelDateTimefromJSDateTime","getExcelTimefromJSTime","_getVHRelevantFields","sMetadataPath","sBindingPath","aFields","oDataFieldData","$kind","oValue","iIndex","getNavigationPath","_setDraftIndicatorOnVisibleColumn","aColumns","aColumnsWithDraftIndicator","oColumn","sAddVisibleColumnName","sVisibleColumnName","bFoundColumnVisibleWithDraft","sColumnNameWithDraftIndicator","i","j","removeItem","oPropertyInfoName","mPropertyBag","doRemoveItem","oModifier","sDataProperty","insertAggregation","_setDraftIndicatorStatus","_getMetaModel","_getGroupId","sRetrievedGroupId","_insertAggregation","oValueHelp","addItem","propertyInfoName","sTableId","warning","sPath","getCustomDataWithModifier","oTableContext","getCurrentPageView","getComputedColumn","getEnhancedFetchedPropertyInfos","propInfo","oPropertyContext","fnTemplateFragment","oInPropertyInfo","oView","bDisplayMode","sTableTypeCustomData","sCreationModeCustomData","all","aCustomData","oThis","JSONModel","enableAutoColumnWidth","readOnly","tableType","id","navigationPropertyPath","collection","creationMode","widthIncludingColumnHeader","oPreprocessorSettings","bindingContexts","entitySet","tableCollection","handlerProvider","TableEventHandlerProvider","collectionEntity","computedColumnXML","getColumnTemplate","templateControlFragment","destroy","getFilterDelegate","FilterBarDelegate","oParentControl","sPropertyInfoName","replace","getTypeMap","formatGroupHeader","obj","dataBaseType","externalFormat","ValueFormatter","formatWithBrackets"],"sources":["./TableDelegate.ts"],"sourcesContent":["import type { DataFieldAbstractTypes, DataFieldForAnnotation, FieldGroupType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport deepExtend from \"sap/base/util/deepExtend\";\nimport { isConstant } from \"sap/fe/base/BindingToolkit\";\nimport type { EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport jsx from \"sap/fe/base/jsx-runtime/jsx\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type { BaseTreeModifier } from \"sap/fe/core/CommonUtils\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport type { ListReportManifestSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { WrappedCard } from \"sap/fe/core/services/CollaborationManagerServiceFactory\";\n\nimport type { EntitySet, NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport CollaborationManager from \"sap/fe/core/controllerextensions/cards/CollaborationManager\";\nimport type {\n\tAnnotationTableColumn,\n\tColumnExportSettings,\n\tComputedTableColumn,\n\tCustomBasedTableColumn,\n\tTableColumn\n} from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport { ColumnType } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport type { CustomElement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport ValueFormatter from \"sap/fe/core/formatters/ValueFormatter\";\nimport DeleteHelper from \"sap/fe/core/helpers/DeleteHelper\";\nimport ExcelFormat from \"sap/fe/core/helpers/ExcelFormatHelper\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport PromiseKeeper from \"sap/fe/core/helpers/PromiseKeeper\";\nimport { getLocalizedText, getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isPathFilterable } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { isTypeFilterable } from \"sap/fe/core/type/EDM\";\nimport type { CollectionBindingInfo } from \"sap/fe/macros/CollectionBindingInfo\";\nimport CollectionBindingInfoAPI from \"sap/fe/macros/CollectionBindingInfo\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport DelegateUtil from \"sap/fe/macros/DelegateUtil\";\nimport type FilterBar from \"sap/fe/macros/controls/FilterBar\";\nimport FilterBarDelegate from \"sap/fe/macros/filterBar/FilterBarDelegate\";\nimport { getColumnTemplate, getComputedColumn, getSlotColumn } from \"sap/fe/macros/table/MdcTableTemplate\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type { EnhancedFEPropertyInfo } from \"sap/fe/macros/table/TableAPI\";\nimport TableHelper from \"sap/fe/macros/table/TableHelper\";\nimport TableRuntime from \"sap/fe/macros/table/TableRuntime\";\nimport TableSizeHelper from \"sap/fe/macros/table/TableSizeHelper\";\nimport type { InternalBindingInfo } from \"sap/fe/macros/table/Utils\";\nimport TableUtils from \"sap/fe/macros/table/Utils\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type { $IllustratedMessageSettings } from \"sap/m/IllustratedMessage\";\nimport IllustratedMessage from \"sap/m/IllustratedMessage\";\nimport IllustratedMessageType from \"sap/m/IllustratedMessageType\";\nimport type { BaseAggregationBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport XMLPreprocessor from \"sap/ui/core/util/XMLPreprocessor\";\nimport type { JsControlTreeModifier } from \"sap/ui/core/util/reflection\";\nimport type Control from \"sap/ui/mdc/Control\";\nimport type { default as MDCTable, MDCTablePropertyInfo as PropertyInfo, default as Table, VisualSettings } from \"sap/ui/mdc/Table\";\nimport type TypeConfig from \"sap/ui/mdc/TypeConfig\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport TableDelegateBase from \"sap/ui/mdc/odata/v4/TableDelegate\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\nimport type Context from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport type MetaModel from \"sap/ui/model/MetaModel\";\nimport type Model from \"sap/ui/model/Model\";\nimport Sorter from \"sap/ui/model/Sorter\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type { default as ODataV4Context, default as v4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type QuickFilterSelector from \"../QuickFilterSelector\";\nimport TableEventHandlerProvider from \"../TableEventHandlerProvider\";\n\nconst SEMANTICKEY_HAS_DRAFTINDICATOR = \"/semanticKeyHasDraftIndicator\";\nconst SEARCH_HAS_BEEN_FIRED = \"searchFired\";\nconst COLUMN_HAS_BEEN_ADDED = \"columnAdded\";\nconst PREVIOUS_SORTERS = \"previousSorters\";\n\n/**\n * Helper class for sap.ui.mdc.Table.\n * <h3><b>Note:</b></h3>\n * The class is experimental and the API and the behavior are not finalized. This class is not intended for productive usage.\n * @author SAP SE\n * @private\n * @since 1.69.0\n * @alias sap.fe.macros.TableDelegate\n */\nexport default Object.assign({}, TableDelegateBase, {\n\tapiVersion: 2,\n\t/**\n\t * This function calculates the width of a FieldGroup column.\n\t * The width of the FieldGroup is the width of the widest property contained in the FieldGroup (including the label if showDataFieldsLabel is true)\n\t * The result of this calculation is stored in the visualSettings.widthCalculation.minWidth property, which is used by the MDCtable.\n\t * @param table Instance of the MDCtable\n\t * @param propertyInfo Current propertyInfo\n\t * @param propertyInfos Array of properties\n\t * @private\n\t * @alias sap.fe.macros.TableDelegate\n\t */\n\t_computeVisualSettingsForFieldGroup: function (\n\t\ttable: Table,\n\t\tpropertyInfo: EnhancedFEPropertyInfo,\n\t\tpropertyInfos: EnhancedFEPropertyInfo[]\n\t) {\n\t\tif (propertyInfo.key.indexOf(\"DataFieldForAnnotation::FieldGroup::\") === 0) {\n\t\t\tconst column = table.getColumns().find((col) => {\n\t\t\t\treturn col.getPropertyKey() === propertyInfo.key;\n\t\t\t});\n\t\t\tconst showDataFieldsLabel = column ? column.data(\"showDataFieldsLabel\") === \"true\" : false;\n\t\t\tconst oMetaModel = (table.getModel() as ODataModel).getMetaModel();\n\t\t\tconst involvedDataModelObjects = getInvolvedDataModelObjects(oMetaModel.getContext(propertyInfo.annotationPath));\n\t\t\tconst convertedMetaData = involvedDataModelObjects.convertedTypes;\n\t\t\tconst oDataField = involvedDataModelObjects.targetObject as DataFieldForAnnotation;\n\t\t\tconst oFieldGroup = oDataField.Target.$target as FieldGroupType;\n\t\t\tconst aFieldWidth: number[] = [];\n\t\t\toFieldGroup.Data.forEach(function (oData: DataFieldAbstractTypes) {\n\t\t\t\tlet oDataFieldWidth: { labelWidth: number; propertyWidth: number };\n\t\t\t\tswitch (oData.$Type) {\n\t\t\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAnnotation\":\n\t\t\t\t\t\toDataFieldWidth = TableSizeHelper.getWidthForDataFieldForAnnotation(\n\t\t\t\t\t\t\toData,\n\t\t\t\t\t\t\tfalse,\n\t\t\t\t\t\t\tpropertyInfos,\n\t\t\t\t\t\t\tconvertedMetaData,\n\t\t\t\t\t\t\tshowDataFieldsLabel\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"com.sap.vocabularies.UI.v1.DataField\":\n\t\t\t\t\t\toDataFieldWidth = TableSizeHelper.getWidthForDataField(\n\t\t\t\t\t\t\toData,\n\t\t\t\t\t\t\tshowDataFieldsLabel,\n\t\t\t\t\t\t\tpropertyInfos,\n\t\t\t\t\t\t\tconvertedMetaData,\n\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAction\":\n\t\t\t\t\t\toDataFieldWidth = {\n\t\t\t\t\t\t\tlabelWidth: 0,\n\t\t\t\t\t\t\tpropertyWidth: SizeHelper.getButtonWidth(oData.Label?.toString())\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t}\n\t\t\t\tif (oDataFieldWidth!) {\n\t\t\t\t\taFieldWidth.push(oDataFieldWidth.labelWidth + oDataFieldWidth.propertyWidth);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst nWidest = aFieldWidth.reduce(function (acc: number, value: number) {\n\t\t\t\treturn Math.max(acc, value);\n\t\t\t}, 0);\n\t\t\tpropertyInfo.visualSettings = deepExtend(propertyInfo.visualSettings as object, {\n\t\t\t\twidthCalculation: {\n\t\t\t\t\tverticalArrangement: true,\n\t\t\t\t\tminWidth: Math.ceil(nWidest)\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t_computeVisualSettingsForPropertyWithValueHelp: function (table: Table, property: EnhancedFEPropertyInfo) {\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tif (!property.propertyInfos) {\n\t\t\tconst metaModel = (table.getModel() as ODataModel).getMetaModel();\n\t\t\tif (property.annotationPath && metaModel) {\n\t\t\t\tconst dataField = metaModel.getObject(`${property.annotationPath}@`);\n\t\t\t\tif (dataField && dataField[\"@com.sap.vocabularies.Common.v1.ValueList\"]) {\n\t\t\t\t\tproperty.visualSettings = deepExtend(property.visualSettings || {}, {\n\t\t\t\t\t\twidthCalculation: {\n\t\t\t\t\t\t\tgap: tableAPI.getProperty(\"readOnly\") ? 0 : 4\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_computeVisualSettingsForPropertyWithUnit: function (\n\t\ttable: Table,\n\t\tpropertyInfo: PropertyInfo,\n\t\tunit?: string,\n\t\tunitText?: string,\n\t\ttimezoneText?: string\n\t) {\n\t\tconst oTableAPI: EnhanceWithUI5<TableAPI> | null = table ? (this._getTableAPI(table) as EnhanceWithUI5<TableAPI>) : null;\n\t\t// update gap for properties with string unit\n\t\tconst text = unitText || timezoneText;\n\t\tif (text) {\n\t\t\tpropertyInfo.visualSettings = deepExtend(propertyInfo.visualSettings as VisualSettings, {\n\t\t\t\twidthCalculation: {\n\t\t\t\t\tgap: Math.ceil(SizeHelper.getButtonWidth(text))\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (unit) {\n\t\t\tpropertyInfo.visualSettings = deepExtend(propertyInfo.visualSettings as VisualSettings, {\n\t\t\t\twidthCalculation: {\n\t\t\t\t\t// For properties with unit, a gap needs to be added to properly render the column width on edit mode\n\t\t\t\t\tgap: oTableAPI && oTableAPI.getReadOnly() ? 0 : 6\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t_computeLabel: function (property: EnhancedFEPropertyInfo, labelMap: { [label: string]: EnhancedFEPropertyInfo[] }) {\n\t\tif (property.label) {\n\t\t\tconst propertiesWithSameLabel = labelMap[property.label];\n\t\t\t// This computation is only for duplicate labels on navigation properties.\n\t\t\t// Exclude text navigation properties referenced as text on a property annotated with text arrangement set as TextOnly.\n\t\t\t// Exclude navigation properties created only for filtering purposes with a text arrangement set to TextOnly.\n\t\t\tconst isPropertyUsedAsTextOnlyProperty = propertiesWithSameLabel?.some(\n\t\t\t\t(prop) => prop.text === property.path && prop?.mode === \"Description\"\n\t\t\t);\n\t\t\tif (\n\t\t\t\tpropertiesWithSameLabel?.length > 1 &&\n\t\t\t\tproperty.path?.includes(\"/\") &&\n\t\t\t\tproperty.additionalLabels &&\n\t\t\t\t!isPropertyUsedAsTextOnlyProperty &&\n\t\t\t\t!(property?.mode === \"Description\" && property.filterable)\n\t\t\t) {\n\t\t\t\tproperty.label = property.label + \" (\" + property.additionalLabels.join(\" / \") + \")\";\n\t\t\t}\n\t\t\tdelete property.additionalLabels;\n\t\t}\n\t},\n\t//Update VisualSetting for columnWidth calculation and labels on navigation properties\n\t_updatePropertyInfo: function (table: Table, properties: EnhancedFEPropertyInfo[]) {\n\t\tconst labelMap: { [label: string]: EnhancedFEPropertyInfo[] } = {};\n\t\t// Check available p13n modes\n\t\tconst p13nMode = table.getP13nMode();\n\t\tproperties.forEach((property) => {\n\t\t\tif (!property.propertyInfos && property.label) {\n\t\t\t\t// Only for non-complex properties\n\t\t\t\tif (\n\t\t\t\t\t(p13nMode?.includes(\"Sort\") && property.sortable) ||\n\t\t\t\t\t(p13nMode?.includes(\"Filter\") && property.filterable) ||\n\t\t\t\t\t(p13nMode?.includes(\"Group\") && property.groupable)\n\t\t\t\t) {\n\t\t\t\t\tlabelMap[property.label] =\n\t\t\t\t\t\tlabelMap[property.label] !== undefined ? labelMap[property.label].concat([property]) : [property];\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tproperties.forEach((property) => {\n\t\t\tthis._computeVisualSettingsForFieldGroup(table, property, properties);\n\t\t\tthis._computeVisualSettingsForPropertyWithValueHelp(table, property);\n\t\t\tthis._computeLabel(property, labelMap);\n\t\t});\n\t\t// Add the $editState property\n\t\tproperties.push({\n\t\t\tkey: \"$editState\",\n\t\t\tpath: \"$editState\",\n\t\t\tgroupLabel: \"\",\n\t\t\tgroup: \"\",\n\t\t\tlabel: \"\",\n\t\t\tdataType: \"sap.ui.model.odata.type.String\",\n\t\t\tvisible: false,\n\t\t\tgroupable: false,\n\t\t\tsortable: false,\n\t\t\tfilterable: false\n\t\t} as EnhancedFEPropertyInfo);\n\t\treturn properties;\n\t},\n\n\t_getTableAPI(table: Table): TableAPI {\n\t\tlet tableAPI: TableAPI | undefined = table.getParent() as TableAPI;\n\t\tif (!tableAPI) {\n\t\t\ttableAPI = UI5Element.getElementById(table.getId() + \"::Table\") as TableAPI;\n\t\t}\n\t\treturn tableAPI;\n\t},\n\n\tgetColumnsFor: function (table: Table): TableColumn[] {\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\treturn tableAPI.getTableDefinition().columns;\n\t},\n\n\t/**\n\t * Returns the export capabilities for the given sap.ui.mdc.Table instance.\n\t * @param oTable Instance of the table\n\t * @returns Promise representing the export capabilities of the table instance\n\t */\n\tfetchExportCapabilities: async function (oTable: Table): Promise<{ XLSX?: unknown; PDF?: unknown }> {\n\t\tconst oCapabilities: { XLSX?: unknown; PDF?: unknown } = { XLSX: {} };\n\t\tlet oModel!: ODataModel;\n\t\treturn DelegateUtil.fetchModel(oTable)\n\t\t\t.then(function (model: Model) {\n\t\t\t\toModel = model as ODataModel;\n\t\t\t\treturn oModel.getMetaModel().getObject(\"/$EntityContainer@Org.OData.Capabilities.V1.SupportedFormats\");\n\t\t\t})\n\t\t\t.then(function (aSupportedFormats: string[] | undefined) {\n\t\t\t\tconst aLowerFormats = (aSupportedFormats || []).map((element) => {\n\t\t\t\t\treturn element.toLowerCase();\n\t\t\t\t});\n\t\t\t\tif (aLowerFormats.includes(\"application/pdf\")) {\n\t\t\t\t\treturn oModel.getMetaModel().getObject(\"/$EntityContainer@com.sap.vocabularies.PDF.v1.Features\");\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t})\n\t\t\t.then(function (oAnnotation: unknown) {\n\t\t\t\tif (oAnnotation) {\n\t\t\t\t\toCapabilities[\"PDF\"] = Object.assign({}, oAnnotation);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function (err) {\n\t\t\t\tLog.error(`An error occurs while computing export capabilities: ${err}`);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\treturn oCapabilities;\n\t\t\t});\n\t},\n\n\t/**\n\t * Filtering on navigation properties that are not part of the LineItem annotation nor of the custom columns is forbidden.\n\t * @param columnInfo\n\t * @param columnDataModelObjectPath\n\t * @returns Boolean true if filtering is allowed, false otherwise\n\t */\n\t_isFilterableNavigationProperty: function (\n\t\tcolumnInfo: AnnotationTableColumn,\n\t\tcolumnDataModelObjectPath: DataModelObjectPath<unknown>\n\t): boolean {\n\t\tconst isFilterable = isPathFilterable(columnDataModelObjectPath);\n\t\treturn (\n\t\t\t!columnInfo.relativePath.includes(\"/\") ||\n\t\t\t((columnInfo.isPartOfLineItem === true || columnInfo.isPartOfCustomColumn === true) &&\n\t\t\t\t!(isConstant(isFilterable) && isFilterable.value === false))\n\t\t);\n\t},\n\n\t_fetchPropertyInfo: function (\n\t\tmetaModel: MetaModel,\n\t\tcolumnInfo: AnnotationTableColumn,\n\t\ttable: Table,\n\t\tappComponent: AppComponent\n\t): EnhancedFEPropertyInfo {\n\t\tconst sAbsoluteNavigationPath = columnInfo.annotationPath,\n\t\t\toDataField = metaModel.getObject(sAbsoluteNavigationPath),\n\t\t\toNavigationContext = metaModel.createBindingContext(sAbsoluteNavigationPath) as Context,\n\t\t\tisComplexType = columnInfo.typeConfig?.className && columnInfo.typeConfig.className?.indexOf(\"Edm.\") !== 0,\n\t\t\tbFilterable = CommonHelper.isPropertyFilterable(oNavigationContext, oDataField),\n\t\t\tbIsAnalyticalTable = DelegateUtil.getCustomData(table, \"enableAnalytics\") === \"true\",\n\t\t\tlabel = getLocalizedText(columnInfo.label ?? \"\", appComponent ?? table),\n\t\t\ttooltip = getLocalizedText(columnInfo.tooltip ?? \"\", appComponent ?? table),\n\t\t\ttypeConfig = this._getTypeConfig(columnInfo, isComplexType),\n\t\t\tpropertyInfo: EnhancedFEPropertyInfo = {\n\t\t\t\tname: columnInfo.name,\n\t\t\t\tkey: columnInfo.name,\n\t\t\t\tannotationPath: sAbsoluteNavigationPath,\n\t\t\t\tgroupLabel: columnInfo.groupLabel,\n\t\t\t\tgroup: columnInfo.group,\n\t\t\t\tlabel: label,\n\t\t\t\ttooltip: tooltip,\n\t\t\t\tdataType: typeConfig.className,\n\t\t\t\ttypeConfig: typeConfig,\n\t\t\t\tformatOptions:\n\t\t\t\t\tcolumnInfo.typeConfig?.baseType === \"Edm.DateTimeOffset\"\n\t\t\t\t\t\t? { style: \"medium/short\" } /* This condition doesn't have any impact, to be reviewed */\n\t\t\t\t\t\t: columnInfo.typeConfig?.formatOptions,\n\t\t\t\tconstraints: columnInfo.typeConfig?.constraints,\n\t\t\t\tvisible: columnInfo.availability !== \"Hidden\" && !isComplexType,\n\t\t\t\texportSettings: this._setPropertyInfoExportSettings(columnInfo.exportSettings, columnInfo),\n\t\t\t\tunit: columnInfo.unit,\n\t\t\t\ttype: ColumnType.Annotation,\n\t\t\t\trelativePath: columnInfo.relativePath\n\t\t\t};\n\t\tif (propertyInfo.exportSettings?.template) {\n\t\t\tpropertyInfo.clipboardSettings = { template: propertyInfo.exportSettings.template };\n\t\t\t// if I set this clipBoardSettings the copy provider extract the data according to the template in the html property and it is properly copied in excel\n\t\t\t// but when we copy elsewhere we only get the raw data and not the templated data\n\t\t}\n\n\t\t// Set visualSettings only if it exists\n\t\tif (columnInfo.visualSettings && Object.keys(columnInfo.visualSettings).length > 0) {\n\t\t\tpropertyInfo.visualSettings = columnInfo.visualSettings;\n\t\t}\n\n\t\tif (columnInfo.exportDataPointTargetValue) {\n\t\t\tpropertyInfo.exportDataPointTargetValue = columnInfo.exportDataPointTargetValue;\n\t\t}\n\n\t\t// MDC expects  'propertyInfos' only for complex properties.\n\t\t// An empty array throws validation error and undefined value is unhandled.\n\t\tif (columnInfo.propertyInfos?.length) {\n\t\t\tpropertyInfo.propertyInfos = columnInfo.propertyInfos;\n\t\t} else {\n\t\t\t// Add properties which are supported only by simple PropertyInfos.\n\n\t\t\t//get the DataModelObjectPath for the column\n\t\t\tconst columnDataModelObjectPath = getInvolvedDataModelObjects(\n\t\t\t\tmetaModel.getContext(columnInfo.annotationPath),\n\t\t\t\tmetaModel.getContext(DelegateUtil.getCustomData(table, \"metaPath\")!)\n\t\t\t);\n\t\t\tpropertyInfo.path = columnInfo.relativePath;\n\t\t\t// TODO with the new complex property info, a lot of \"Description\" fields are added as filter/sort fields\n\t\t\tpropertyInfo.sortable = columnInfo.sortable;\n\t\t\tif (bIsAnalyticalTable) {\n\t\t\t\tthis._updateAnalyticalPropertyInfoAttributes(propertyInfo, columnInfo);\n\t\t\t}\n\t\t\tpropertyInfo.filterable =\n\t\t\t\tcolumnInfo.filterable !== false &&\n\t\t\t\t!!bFilterable &&\n\t\t\t\tthis._isFilterableNavigationProperty(columnInfo, columnDataModelObjectPath);\n\t\t\tpropertyInfo.isKey = columnInfo.isKey;\n\t\t\tpropertyInfo.groupable = columnInfo.isGroupable;\n\t\t\tif (columnInfo.textArrangement) {\n\t\t\t\tthis._setTextArrangementInfo(propertyInfo, columnInfo, table);\n\t\t\t}\n\t\t\tif (propertyInfo.isKey) {\n\t\t\t\tpropertyInfo.extension = {\n\t\t\t\t\t// MDC needs to fix this, it doesn't make sense for a non Analytical Table\n\t\t\t\t\ttechnicallyGroupable: true\n\t\t\t\t};\n\t\t\t}\n\t\t\tpropertyInfo.caseSensitive = columnInfo.caseSensitive;\n\t\t\tif (columnInfo.additionalLabels) {\n\t\t\t\tpropertyInfo.additionalLabels = columnInfo.additionalLabels.map((additionalLabel: string) => {\n\t\t\t\t\treturn getLocalizedText(additionalLabel, appComponent || table);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis._computeVisualSettingsForPropertyWithUnit(table, propertyInfo, columnInfo.unit, columnInfo.unitText, columnInfo.timezoneText);\n\n\t\treturn propertyInfo;\n\t},\n\n\t/**\n\t * Extend the export settings based on the column info.\n\t * @param exportSettings The export settings to be extended\n\t * @param columnInfo The columnInfo object\n\t * @returns The extended export settings\n\t */\n\t_setPropertyInfoExportSettings: function (\n\t\texportSettings: ColumnExportSettings | undefined | null,\n\t\tcolumnInfo: AnnotationTableColumn\n\t): ColumnExportSettings | undefined | null {\n\t\tconst exportFormat = this._getExportFormat(columnInfo.typeConfig?.className);\n\t\tif (exportFormat && exportSettings) {\n\t\t\texportSettings.format = exportFormat;\n\t\t}\n\t\treturn exportSettings;\n\t},\n\n\t/**\n\t * Gets the type config for the given column info.\n\t * @param columnInfo The columnInfo object.\n\t * @param isComplexType Indicates if the dataType is complex.\n\t * @returns The MDC type config.\n\t */\n\t_getTypeConfig(columnInfo: AnnotationTableColumn, isComplexType?: boolean): TypeConfig {\n\t\tlet typeConfig = TypeMap.getTypeConfig(\"sap.ui.model.odata.type.String\"); // MDC expects always a dataType\n\t\tif (columnInfo.typeConfig?.className && isTypeFilterable(columnInfo.typeConfig.className)) {\n\t\t\ttypeConfig = TypeMap.getTypeConfig(\n\t\t\t\tcolumnInfo.typeConfig.className,\n\t\t\t\tcolumnInfo.typeConfig.formatOptions,\n\t\t\t\tcolumnInfo.typeConfig.constraints\n\t\t\t);\n\t\t} else if (columnInfo.typeConfig?.className && !isComplexType) {\n\t\t\ttypeConfig = TypeMap.getTypeConfig(columnInfo.typeConfig.className);\n\t\t}\n\t\treturn typeConfig;\n\t},\n\t/**\n\t * Set the text arrangement info for the column info.\n\t * @param propertyInfo The current propertyInfo object.\n\t * @param columnInfo The columnInfo object.\n\t * @param table The mdc table control.\n\t */\n\t_setTextArrangementInfo: function (propertyInfo: EnhancedFEPropertyInfo, columnInfo: AnnotationTableColumn, table: Table): void {\n\t\tconst descriptionColumn = this.getColumnsFor(table).find(function (oCol) {\n\t\t\treturn oCol.name === columnInfo.textArrangement?.textProperty;\n\t\t});\n\t\tif (descriptionColumn) {\n\t\t\tpropertyInfo.mode = columnInfo.textArrangement!.mode;\n\t\t\tpropertyInfo.valueProperty = columnInfo.relativePath;\n\t\t\tpropertyInfo.descriptionProperty = (descriptionColumn as EnhancedFEPropertyInfo).relativePath;\n\t\t}\n\t\tpropertyInfo.text = columnInfo.textArrangement?.textProperty;\n\t},\n\n\t_updateAnalyticalPropertyInfoAttributes(propertyInfo: PropertyInfo, columnInfo: AnnotationTableColumn) {\n\t\tif (columnInfo.aggregatable) {\n\t\t\tpropertyInfo.aggregatable = columnInfo.aggregatable;\n\t\t}\n\t\tif (columnInfo.extension) {\n\t\t\tpropertyInfo.extension = columnInfo.extension;\n\t\t}\n\t},\n\n\t_fetchComputedPropertyInfo: function (columnInfo: ComputedTableColumn, table: Table) {\n\t\tconst label = getLocalizedText(columnInfo.label, table); // Todo: To be removed once MDC provides translation support\n\t\tconst propertyInfo: PropertyInfo = {\n\t\t\tkey: columnInfo.name,\n\t\t\tlabel: label.toString(),\n\t\t\tdataType: \"sap.ui.model.odata.type.String\",\n\t\t\tvisible: columnInfo.availability !== \"Hidden\",\n\t\t\tfilterable: false,\n\t\t\tsortable: false,\n\t\t\tgroupable: false,\n\t\t\texportSettings: columnInfo.exportSettings,\n\t\t\tclipboardSettings: columnInfo.clipboardSettings as PropertyInfo[\"clipboardSettings\"]\n\t\t};\n\t\tif (columnInfo.propertyInfos !== undefined && columnInfo.propertyInfos.length > 0) {\n\t\t\tpropertyInfo.propertyInfos = columnInfo.propertyInfos;\n\t\t}\n\t\treturn propertyInfo;\n\t},\n\n\t_fetchCustomPropertyInfo: function (columnInfo: CustomBasedTableColumn, table: Table, appComponent: AppComponent) {\n\t\tlet label;\n\t\tif (columnInfo.header) {\n\t\t\tif (columnInfo.header.startsWith(\"{metaModel>\")) {\n\t\t\t\tlabel = ModelHelper.fetchTextFromMetaModel(columnInfo.header, undefined, (table.getModel() as ODataModel).getMetaModel());\n\t\t\t} else {\n\t\t\t\tlabel = getLocalizedText(columnInfo.header, appComponent); // Todo: To be removed once MDC provides translation support\n\t\t\t}\n\t\t}\n\t\tconst propertyInfo: PropertyInfo = {\n\t\t\tkey: columnInfo.name,\n\t\t\tgroupLabel: undefined,\n\t\t\tgroup: undefined,\n\t\t\tlabel: label ?? \"\",\n\t\t\tdataType: \"sap.ui.model.odata.type.String\",\n\t\t\tvisible: columnInfo.availability !== \"Hidden\",\n\t\t\texportSettings: columnInfo.exportSettings,\n\t\t\tvisualSettings: columnInfo.visualSettings as PropertyInfo[\"visualSettings\"]\n\t\t};\n\n\t\t// MDC expects 'propertyInfos' only for complex properties.\n\t\t// An empty array throws validation error and undefined value is unhandled.\n\t\tif (columnInfo.propertyInfos && columnInfo.propertyInfos.length) {\n\t\t\tpropertyInfo.propertyInfos = columnInfo.propertyInfos;\n\t\t} else {\n\t\t\t// Add properties which are supported only by simple PropertyInfos.\n\t\t\tpropertyInfo.path = columnInfo.name;\n\t\t\tpropertyInfo.sortable = false;\n\t\t\tpropertyInfo.filterable = false;\n\t\t}\n\t\treturn propertyInfo;\n\t},\n\t_bColumnHasPropertyWithDraftIndicator: function (oColumnInfo: TableColumn): boolean {\n\t\treturn !!(\n\t\t\t(oColumnInfo.formatOptions && oColumnInfo.formatOptions.hasDraftIndicator) ||\n\t\t\t(oColumnInfo.formatOptions && oColumnInfo.formatOptions.fieldGroupDraftIndicatorPropertyPath)\n\t\t);\n\t},\n\t_updateDraftIndicatorModel: function (_oTable: Table, _oColumnInfo: TableColumn): void {\n\t\tconst aVisibleColumns = _oTable.getColumns();\n\t\tconst oInternalBindingContext = _oTable.getBindingContext(\"internal\");\n\t\tconst sInternalPath = oInternalBindingContext && oInternalBindingContext.getPath();\n\t\tif (aVisibleColumns && oInternalBindingContext) {\n\t\t\tfor (const index in aVisibleColumns) {\n\t\t\t\tif (\n\t\t\t\t\tthis._bColumnHasPropertyWithDraftIndicator(_oColumnInfo) &&\n\t\t\t\t\t_oColumnInfo.name === aVisibleColumns[index].getPropertyKey()\n\t\t\t\t) {\n\t\t\t\t\tif (oInternalBindingContext.getProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR) === undefined) {\n\t\t\t\t\t\toInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, _oColumnInfo.name);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t_fetchPropertiesForEntity: async function (\n\t\ttable: Table,\n\t\tentityTypePath: string,\n\t\tmetaModel: ODataMetaModel,\n\t\tappComponent: AppComponent\n\t): Promise<PropertyInfo[]> {\n\t\t// when fetching properties, this binding context is needed - so lets create it only once and use if for all properties/data-fields/line-items\n\t\tconst bindingPath = ModelHelper.getEntitySetPath(entityTypePath);\n\t\tlet fetchedProperties: PropertyInfo[] = [];\n\t\tconst nonFilterableProperties = CommonUtils.getFilterRestrictionsByPath(bindingPath, metaModel).NonFilterableProperties;\n\t\treturn Promise.resolve(this.getColumnsFor(table))\n\t\t\t.then((columns: TableColumn[]) => {\n\t\t\t\t// DraftAdministrativeData does not work via 'entitySet/$NavigationPropertyBinding/DraftAdministrativeData'\n\t\t\t\tif (columns) {\n\t\t\t\t\tlet propertyInfo;\n\t\t\t\t\tcolumns.forEach((columnInfo) => {\n\t\t\t\t\t\tthis._updateDraftIndicatorModel(table, columnInfo);\n\t\t\t\t\t\tswitch (columnInfo.type) {\n\t\t\t\t\t\t\tcase \"Annotation\":\n\t\t\t\t\t\t\t\tpropertyInfo = this._fetchPropertyInfo(metaModel, columnInfo as AnnotationTableColumn, table, appComponent);\n\t\t\t\t\t\t\t\tif (propertyInfo && !nonFilterableProperties.includes((propertyInfo as AnnotationTableColumn).name)) {\n\t\t\t\t\t\t\t\t\tpropertyInfo.maxConditions = DelegateUtil.isMultiValue(propertyInfo as AnnotationTableColumn) ? -1 : 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Computed\":\n\t\t\t\t\t\t\t\tpropertyInfo = this._fetchComputedPropertyInfo(columnInfo as ComputedTableColumn, table);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Slot\":\n\t\t\t\t\t\t\tcase \"Default\":\n\t\t\t\t\t\t\t\tpropertyInfo = this._fetchCustomPropertyInfo(columnInfo as CustomBasedTableColumn, table, appComponent);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow new Error(`unhandled switch case ${columnInfo.type}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfetchedProperties.push(propertyInfo as EnhancedFEPropertyInfo);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tfetchedProperties = this._updatePropertyInfo(table, fetchedProperties as EnhancedFEPropertyInfo[]);\n\t\t\t\tconst tableAPI = this._getTableAPI(table);\n\t\t\t\ttableAPI.setEnhancedFetchedPropertyInfos(fetchedProperties as EnhancedFEPropertyInfo[]);\n\t\t\t\tfetchedProperties = tableAPI.getPropertyInfos();\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function (err) {\n\t\t\t\tLog.error(`An error occurs while updating fetched properties: ${err as string}`);\n\t\t\t})\n\t\t\t.then(function () {\n\t\t\t\treturn fetchedProperties;\n\t\t\t});\n\t},\n\n\t_getCachedOrFetchPropertiesForEntity: async function (\n\t\ttable: Table,\n\t\tentityTypePath: string,\n\t\tmetaModel: ODataMetaModel,\n\t\tappComponent: AppComponent\n\t): Promise<PropertyInfo[]> {\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tconst fetchedProperties = tableAPI.getCachedPropertyInfos();\n\t\tif (fetchedProperties.length) {\n\t\t\treturn Promise.resolve(fetchedProperties);\n\t\t}\n\t\treturn this._fetchPropertiesForEntity(table, entityTypePath, metaModel, appComponent).then(function (\n\t\t\tsubFetchedProperties: PropertyInfo[]\n\t\t) {\n\t\t\ttableAPI.setCachedPropertyInfos(subFetchedProperties);\n\t\t\treturn subFetchedProperties;\n\t\t});\n\t},\n\tsetNoDataInformation: function (table: Table, illustratedMessageInformation: $IllustratedMessageSettings): void {\n\t\tconst noDataAggregation = table.getNoData();\n\t\tif (typeof noDataAggregation != \"string\" && (noDataAggregation as Control)?.isA(\"sap.m.IllustratedMessage\")) {\n\t\t\tconst currentIllustratedMessage = noDataAggregation as IllustratedMessage;\n\t\t\t// We override the current values of the IllustratedMessage\n\t\t\tcurrentIllustratedMessage.setTitle(illustratedMessageInformation.title);\n\t\t\tcurrentIllustratedMessage.setDescription(illustratedMessageInformation.description);\n\t\t\tcurrentIllustratedMessage.setIllustrationType(illustratedMessageInformation.illustrationType);\n\t\t\tcurrentIllustratedMessage.setIllustrationSize(illustratedMessageInformation.illustrationSize);\n\t\t} else {\n\t\t\tconst illustratedMessage = new IllustratedMessage({\n\t\t\t\t...illustratedMessageInformation\n\t\t\t});\n\t\t\ttable.setNoData(illustratedMessage);\n\t\t}\n\t},\n\n\tsetTableNoDataIllustratedMessage: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst tableFilterInfo = TableUtils.getAllFilterInfo(table);\n\t\tconst resourceModel = getResourceModel(table);\n\t\tconst suffixResourceKey = bindingInfo.path?.startsWith(\"/\") ? bindingInfo.path.substring(1) : bindingInfo.path;\n\t\tlet illustratedInformation: $IllustratedMessageSettings;\n\n\t\tconst getNoDataIllustratedMessageWithFilters = function (): $IllustratedMessageSettings {\n\t\t\tif (table.data(\"hiddenFilters\") || table.getQuickFilter()) {\n\t\t\t\treturn {\n\t\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\t\tdescription: resourceModel.getText(\"M_TABLE_AND_CHART_NO_DATA_TEXT_MULTI_VIEW\", undefined, suffixResourceKey),\n\t\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\tdescription: resourceModel.getText(\"T_TABLE_AND_CHART_NO_DATA_TEXT_WITH_FILTER\", undefined, suffixResourceKey),\n\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t};\n\t\t};\n\n\t\tconst filterAssociation = table.getFilter();\n\t\tconst hasFilterOrSearch = tableFilterInfo.search || tableFilterInfo.filters?.length;\n\t\tif (filterAssociation && !/BasicSearch$/.test(filterAssociation)) {\n\t\t\t// check if a FilterBar is associated to the Table (basic search on toolBar is excluded)\n\t\t\tif (hasFilterOrSearch) {\n\t\t\t\t// check if table has any Filterbar filters or personalization filters\n\t\t\t\tillustratedInformation = getNoDataIllustratedMessageWithFilters();\n\t\t\t} else {\n\t\t\t\tillustratedInformation = {\n\t\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\t\tdescription: resourceModel.getText(\"T_TABLE_AND_CHART_NO_DATA_TEXT\", undefined, suffixResourceKey),\n\t\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t\t};\n\t\t\t}\n\t\t} else if (hasFilterOrSearch) {\n\t\t\t//check if table has any personalization filters\n\t\t\tillustratedInformation = getNoDataIllustratedMessageWithFilters();\n\t\t} else {\n\t\t\tillustratedInformation = {\n\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NODATA\"),\n\t\t\t\tdescription: resourceModel.getText(\"M_TABLE_AND_CHART_NO_FILTERS_NO_DATA_TEXT\", undefined, suffixResourceKey),\n\t\t\t\tillustrationType: IllustratedMessageType.NoData\n\t\t\t};\n\t\t}\n\t\tif (CommonUtils.getTargetView(table).getViewData().liveMode) {\n\t\t\tif (hasFilterOrSearch) {\n\t\t\t\tillustratedInformation = getNoDataIllustratedMessageWithFilters();\n\t\t\t} else {\n\t\t\t\tillustratedInformation = {\n\t\t\t\t\ttitle: resourceModel.getText(\"T_ILLUSTRATED_MESSAGE_TITLE_NOSEARCHRESULTS\"),\n\t\t\t\t\tdescription: resourceModel.getText(\"M_TABLE_AND_CHART_NO_FILTERS_NO_DATA_TEXT\"),\n\t\t\t\t\tillustrationType: IllustratedMessageType.NoSearchResults\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tillustratedInformation.illustrationSize = tableAPI.getNoDataMessageMode();\n\n\t\tif (illustratedInformation.illustrationSize === \"text\") {\n\t\t\tconst currentNoData = table.getNoData();\n\t\t\tif (typeof currentNoData === \"string\" && currentNoData === illustratedInformation.description) {\n\t\t\t\t// We don't change the noData aggregation unnecessary.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttable.setNoData(illustratedInformation.description);\n\t\t} else {\n\t\t\tthis.setNoDataInformation(table, illustratedInformation);\n\t\t}\n\t},\n\n\t/**\n\t * Handles the dataRequested event for the table binding to set up table defaults.\n\t * @param oTable The MDC table instance\n\t * @param oInternalModelContext The internal model context for the table\n\t */\n\thandleTableDataRequested: function (oTable: Table, oInternalModelContext: InternalModelContext): void {\n\t\tconst oBinding = oTable && oTable.getRowBinding(),\n\t\t\tbDataRequestedAttached = oInternalModelContext && oInternalModelContext.getProperty(\"dataRequestedAttached\");\n\t\tif (oInternalModelContext && !bDataRequestedAttached) {\n\t\t\toBinding.attachDataRequested(() => {\n\t\t\t\tif (!oInternalModelContext.getProperty(\"dataRequestedTimeoutSet\")) {\n\t\t\t\t\toInternalModelContext.setProperty(\"dataRequestedTimeoutSet\", true);\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\toInternalModelContext.setProperty(\"dataRequestedTimeoutSet\", false);\n\t\t\t\t\t\tconst oTableAPI = oTable ? (oTable.getParent() as TableAPI) : null;\n\t\t\t\t\t\tif (oTableAPI) {\n\t\t\t\t\t\t\toTableAPI.tableDefaultsPromise = (oTableAPI.getTableDefaults(oTable) ?? Promise.resolve({})) as Promise<object>;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t});\n\t\t\toInternalModelContext.setProperty(\"dataRequestedAttached\", true);\n\t\t}\n\t},\n\n\thandleTableDataReceived: function (oTable: Table, oInternalModelContext: InternalModelContext): void {\n\t\tconst oBinding = oTable && oTable.getRowBinding(),\n\t\t\tbDataReceivedAttached = oInternalModelContext && oInternalModelContext.getProperty(\"dataReceivedAttached\");\n\t\tif (oInternalModelContext && !bDataReceivedAttached) {\n\t\t\toBinding.attachDataReceived(() => {\n\t\t\t\t// as the dataReceived event is fired multiple times, we need to ensure that the event is only handled once\n\t\t\t\tif (!oInternalModelContext.getProperty(\"dataReceivedTimeoutSet\")) {\n\t\t\t\t\toInternalModelContext.setProperty(\"dataReceivedTimeoutSet\", true);\n\t\t\t\t\tsetTimeout(async () => {\n\t\t\t\t\t\toInternalModelContext.setProperty(\"dataReceivedTimeoutSet\", false);\n\t\t\t\t\t\t// Refresh the selected contexts to trigger re-calculation of enabled state of actions.\n\t\t\t\t\t\toInternalModelContext.setProperty(\"selectedContexts\", []);\n\t\t\t\t\t\tconst aSelectedContexts = oTable.getSelectedContexts() as ODataV4Context[];\n\t\t\t\t\t\toInternalModelContext.setProperty(\"selectedContexts\", aSelectedContexts);\n\t\t\t\t\t\toInternalModelContext.setProperty(\"numberOfSelectedContexts\", aSelectedContexts.length);\n\t\t\t\t\t\tconst tableAPI = this._getTableAPI(oTable);\n\t\t\t\t\t\tconst oActionOperationAvailableMap = JSON.parse(tableAPI.tableDefinition.operationAvailableMap);\n\t\t\t\t\t\tActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, \"table\");\n\t\t\t\t\t\t// Refresh enablement of delete button\n\t\t\t\t\t\tDeleteHelper.updateDeleteInfoForSelectedContexts(oInternalModelContext, aSelectedContexts);\n\t\t\t\t\t\tif (tableAPI) {\n\t\t\t\t\t\t\tconst tableDefaultData = await tableAPI.tableDefaultsPromise?.catch(() => undefined);\n\t\t\t\t\t\t\tawait tableAPI.setUpEmptyRows(oTable, false, tableDefaultData);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._updateAvailableCards(oTable);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t});\n\t\t\toInternalModelContext.setProperty(\"dataReceivedAttached\", true);\n\t\t}\n\t},\n\n\t/**\n\t * Set the optimistic batch promise for the enabler callback function.\n\t * @param controller The controller\n\t * @param tableAPI The TableAPI\n\t */\n\tsetOptimisticBatchPromiseForModel: function (controller: ListReportController, tableAPI: TableAPI): void {\n\t\tconst model = controller.getAppComponent().getModel();\n\t\tif (model) {\n\t\t\ttableAPI.setOptimisticBatchEnablerPromise(new PromiseKeeper<boolean>());\n\t\t\tthis.setOptimisticBatchForModel(controller, model, tableAPI);\n\t\t}\n\t},\n\n\t/**\n\t * Enable the optimistic batch mode if available.\n\t * @param controller\n\t * @param table\n\t */\n\tenableOptimisticBatchMode: function (controller: ListReportController, table: Table): void {\n\t\tconst filtersPropertiesAsPotentiallySensitiveDataOrDateType =\n\t\t\ttable && TableUtils.isFilterEligibleForOptimisticBatch(table, controller._getFilterBarControl() as FilterBar);\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\ttableAPI.getOptimisticBatchEnablerPromise()?.resolve(!filtersPropertiesAsPotentiallySensitiveDataOrDateType);\n\t},\n\n\t/**\n\t * Setter for the optimistic batch enabler callback function.\n\t * @param controller\n\t * @param dataModel The OData Model\n\t * @param tableAPI The TableAPI\n\t * @see {sap.ui.model.odata.v4.ODataModel#setOptimisticBatchEnabler} for further information.\n\t */\n\tsetOptimisticBatchForModel: function (controller: ListReportController, dataModel: ODataModel, tableAPI: TableAPI): void {\n\t\tconst isOptimisticBatchHasToBeEnabled = controller.getAppComponent().getShellServices().isFlpOptimisticBatchPluginLoaded();\n\t\tif (dataModel.getOptimisticBatchEnabler() === null && !tableAPI.isOptimisticBatchDisabled() && isOptimisticBatchHasToBeEnabled) {\n\t\t\tconst optimisticBatchEnablerPromiseKeeper = tableAPI.getOptimisticBatchEnablerPromise();\n\t\t\tdataModel.setOptimisticBatchEnabler(function (): Promise<boolean> | undefined {\n\t\t\t\treturn optimisticBatchEnablerPromiseKeeper?.promise;\n\t\t\t});\n\t\t}\n\t},\n\n\trebind: async function (oTable: Table, oBindingInfo: BaseAggregationBindingInfo): Promise<void> {\n\t\tconst tableAPI = this._getTableAPI(oTable);\n\n\t\tconst bIsSuspended = tableAPI?.getProperty(\"bindingSuspended\");\n\t\ttableAPI?.setProperty(\"outDatedBinding\", bIsSuspended);\n\t\tif (!bIsSuspended) {\n\t\t\tTableRuntime.clearSelection(oTable);\n\t\t\tTableDelegateBase.rebind.apply(this, [oTable, oBindingInfo]);\n\t\t\tTableUtils.onTableBound(oTable);\n\t\t\treturn TableUtils.whenBound(oTable)\n\t\t\t\t.then((table: Table): void => {\n\t\t\t\t\tthis.handleTableDataRequested(table, table.getBindingContext(\"internal\") as InternalModelContext);\n\t\t\t\t\tthis.handleTableDataReceived(table, table.getBindingContext(\"internal\") as InternalModelContext);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (oError) {\n\t\t\t\t\tLog.error(\"Error while waiting for the table to be bound\", oError as string);\n\t\t\t\t});\n\t\t}\n\t\treturn Promise.resolve();\n\t},\n\n\t/**\n\t * Fetches the relevant metadata for the table and returns property info array.\n\t * @param table Instance of the MDCtable\n\t * @returns Array of property info\n\t */\n\tfetchProperties: async function (table: Table): Promise<PropertyInfo[]> {\n\t\treturn DelegateUtil.fetchModel(table)\n\t\t\t.then(async (model): Promise<PropertyInfo[]> => {\n\t\t\t\tconst appComponent = CommonUtils.getAppComponent(table);\n\t\t\t\treturn this._getCachedOrFetchPropertiesForEntity(\n\t\t\t\t\ttable,\n\t\t\t\t\tDelegateUtil.getCustomData<string>(table, \"entityType\") ?? \"\",\n\t\t\t\t\tmodel.getMetaModel() as ODataMetaModel,\n\t\t\t\t\tappComponent\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then((properties) => {\n\t\t\t\t(table.getBindingContext(\"internal\") as Context)?.setProperty(\"tablePropertiesAvailable\", true);\n\t\t\t\treturn properties;\n\t\t\t});\n\t},\n\n\tpreInit: async function (table: Table): Promise<void> {\n\t\treturn (TableDelegateBase.preInit as (table: Table) => Promise<void>).apply(this, [table]).then(() => {\n\t\t\t/**\n\t\t\t * Set the binding context to null for every fast creation row to avoid inheriting\n\t\t\t * the wrong context and requesting the table columns on the parent entity\n\t\t\t * Set the correct binding context in ObjectPageController.enableFastCreationRow()\n\t\t\t */\n\t\t\tconst fastCreationRow = table.getCreationRow();\n\t\t\tif (fastCreationRow) {\n\t\t\t\tfastCreationRow.setBindingContext(null as unknown as Context);\n\t\t\t}\n\t\t\treturn;\n\t\t});\n\t},\n\tupdateBindingInfo: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst internalBindingContext = table.getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tconst quickFilter = table.getQuickFilter() as QuickFilterSelector | undefined;\n\t\tconst collectionBindingInfoAPI = new CollectionBindingInfoAPI(bindingInfo);\n\t\tinternalBindingContext?.setProperty(\"isInsightsEnabled\", true);\n\t\tTableDelegateBase.updateBindingInfo.apply(this, [table, bindingInfo]);\n\t\ttry {\n\t\t\tthis._handleSortersOnCurrenciesOrUoM(table, bindingInfo);\n\t\t\tthis._internalUpdateBindingInfo(table, bindingInfo);\n\t\t\tthis.setTableNoDataIllustratedMessage(table, bindingInfo);\n\t\t\tthis._handleRecommendationOutputFields(table, bindingInfo);\n\t\t\tthis._handleFiltersForExternalID(table, bindingInfo);\n\n\t\t\ttableAPI?.fireEvent(\"beforeRebindTable\", {\n\t\t\t\tcollectionBindingInfo: collectionBindingInfoAPI,\n\t\t\t\tquickFilterKey: quickFilter?.getSelectedKey()\n\t\t\t});\n\t\t\tconst attachedEvents = collectionBindingInfoAPI.getAttachedEvents();\n\t\t\t/**\n\t\t\t * We have to set the binding context to null for every fast creation row to avoid it inheriting\n\t\t\t * the wrong context and requesting the table columns for the parent entity\n\t\t\t * The correct binding context is set in ObjectPageController.enableFastCreationRow()\n\t\t\t */\n\t\t\tconst context = table.getBindingContext();\n\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\tif (table.getCreationRow()?.getBindingContext() === null && bindingInfo.path && context) {\n\t\t\t\tTableHelper.enableFastCreationRow(\n\t\t\t\t\t// eslint-disable-next-line deprecation/deprecation\n\t\t\t\t\ttable.getCreationRow(),\n\t\t\t\t\tbindingInfo.path,\n\t\t\t\t\tcontext as v4Context,\n\t\t\t\t\ttable.getModel() as ODataModel,\n\t\t\t\t\tPromise.resolve()\n\t\t\t\t);\n\t\t\t}\n\t\t\ttableAPI.setAttachEvents(attachedEvents);\n\t\t} catch (e) {\n\t\t\tLog.error(\"Error while updating the binding info\", e as string);\n\t\t}\n\t},\n\n\t_handleSortersOnCurrenciesOrUoM: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst sorters: Sorter[] | undefined = bindingInfo.sorter;\n\t\tconst newSortersToBeApplied: Sorter[] = [];\n\t\tif (sorters?.length) {\n\t\t\tconst tableAPI = this._getTableAPI(table);\n\t\t\tconst tableProperties = tableAPI.getCachedPropertyInfos();\n\t\t\tfor (const sorter of sorters) {\n\t\t\t\tconst tableProperty = tableProperties?.find((property) => property.path === sorter.getPath());\n\t\t\t\tif (tableProperty?.unit) {\n\t\t\t\t\tconst unitProperty = tableProperties?.find((property) => property.key === tableProperty?.unit);\n\t\t\t\t\tconst unitSorterAvailable = unitProperty?.path && sorters.some((sort) => sort.getPath() === unitProperty.path);\n\t\t\t\t\tif (!unitSorterAvailable && unitProperty?.sortable !== false && unitProperty?.path) {\n\t\t\t\t\t\tnewSortersToBeApplied.push(new Sorter(unitProperty.path, false));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnewSortersToBeApplied.push(sorter);\n\t\t\t}\n\t\t\tbindingInfo.sorter = newSortersToBeApplied;\n\t\t}\n\t},\n\n\t_handleFiltersForExternalID: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst metaModel = (table.getModel() as ODataModel)?.getMetaModel();\n\t\tconst entityTypePath = bindingInfo.path + \"/\";\n\t\tconst filters = bindingInfo.filters?.getFilters();\n\t\tif (filters !== undefined) {\n\t\t\tTableUtils.updateFiltersForExternalID(metaModel, filters as unknown as ConditionObject[], entityTypePath);\n\t\t}\n\t},\n\n\t_handleRecommendationOutputFields: function (table: Table, oBindingInfo: CollectionBindingInfo) {\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tconst controller = tableAPI?.getPageController();\n\t\tif (controller?.recommendations.isRecommendationEnabled()) {\n\t\t\tconst appComponent = controller.getAppComponent();\n\t\t\tconst tableDef = tableAPI.getTableDefinition();\n\t\t\tconst recommendationOutputProperties = appComponent\n\t\t\t\t.getSideEffectsService()\n\t\t\t\t.getRecommendationOutputFields(tableDef.annotation.entityTypeName);\n\t\t\tif (recommendationOutputProperties && recommendationOutputProperties.length > 0 && oBindingInfo.parameters) {\n\t\t\t\toBindingInfo.parameters.$select = oBindingInfo.parameters?.$select?.concat(\",\", recommendationOutputProperties.join());\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Update the cards when the binding is refreshed.\n\t * @param table The mdc table control.\n\t */\n\t_updateAvailableCards: async function (table: Table): Promise<void> {\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tif (tableAPI.getPageController().getView().getViewData()?.converterType === \"ListReport\") {\n\t\t\tconst appComponent = tableAPI?.getPageController()?.getAppComponent();\n\t\t\tconst cards: WrappedCard[] = [];\n\t\t\tawait tableAPI.collectAvailableCards(cards);\n\t\t\tconst collaborationManager = new CollaborationManager();\n\t\t\tconst cardObject = collaborationManager.updateCards(cards);\n\t\t\tconst parentAppId = appComponent.getId();\n\t\t\tappComponent\n\t\t\t\t.getCollaborationManagerService()\n\t\t\t\t.addCardsToCollaborationManager(cardObject, parentAppId, tableAPI.getPageController().getView().getId());\n\t\t\tappComponent.getCollaborationManagerService().shareAvailableCards();\n\t\t}\n\t},\n\n\t/**\n\t * The hook implemented by MDC that we can override.\n\t * This allows us to define properties to be requested in the MDC table (Main case is for the analytical table).\n\t * @param table The mdc table control.\n\t * @returns An array of property name to be requested.\n\t */\n\tgetInResultPropertyKeys: function (table: MDCTable): string[] {\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tif (tableAPI.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel) {\n\t\t\tconst allKkeysRequested = this.checkAllKeysAreRequested(tableAPI);\n\t\t\tconst internalBindingContext = table.getBindingContext(\"internal\");\n\t\t\t// if a rowpress is overridden, we  should enable the navigation at the node level\n\t\t\tinternalBindingContext?.setProperty(\"isNodeLevelNavigable\", tableAPI.overrideRowPress ? true : allKkeysRequested);\n\t\t\treturn (\n\t\t\t\tObject.keys(tableAPI.tableDefinition.requestAtLeast)\n\t\t\t\t\t// for analytic tables with aggregationOnLeafLevel we should not request the semanticKey expected when all keys are requested ->  it will permits to navigate from a node level when semanticKey are enabled\n\t\t\t\t\t// restriction are also excluded as we cannot destinguish between a node and a aggregation level\n\n\t\t\t\t\t.filter((fieldName: string) =>\n\t\t\t\t\t\t!allKkeysRequested\n\t\t\t\t\t\t\t? tableAPI.tableDefinition.requestAtLeast[fieldName].some(\n\t\t\t\t\t\t\t\t\t(origin) => origin !== \"restriction\" && origin !== \"semanticKey\"\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: true\n\t\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\treturn Object.keys(tableAPI.tableDefinition.requestAtLeast ?? {});\n\t},\n\n\t/**\n\t * Check if all keys() excepted IsActiveEntity) are requested in the table.\n\t * @param tableAPI The table API\n\t * @returns  True if all keys are requested, false otherwise\n\t */\n\tcheckAllKeysAreRequested: function (tableAPI: TableAPI): boolean {\n\t\tconst table = tableAPI.getContent();\n\t\tconst allColumns = tableAPI.getTableDefinition().columns as (TableColumn & { isKey: boolean; relativePath: string })[];\n\t\tconst keyPropertyNames = allColumns\n\t\t\t.filter((c) => c.isKey && c.relativePath && c.relativePath !== \"IsActiveEntity\")\n\t\t\t.map((c) => c.relativePath);\n\n\t\tconst displayedColumns = table\n\t\t\t.getColumns()\n\t\t\t.map((column) => tableAPI.getTableDefinition().columns.find((c) => c.name === column.getPropertyKey()));\n\n\t\t// Store all properties referenced by displayed columns in a Set\n\t\tconst referencedPropertyPaths = new Set<string>();\n\t\tfunction processColumn(col: AnnotationTableColumn): void {\n\t\t\t// Add the property name from column itself if it's not a complex propertyInfo\n\t\t\tif (col.relativePath && col.propertyInfos === undefined) {\n\t\t\t\treferencedPropertyPaths.add(col.relativePath);\n\t\t\t}\n\n\t\t\t// Add the additional properties referenced by the column\n\t\t\tcol.extension?.additionalProperties?.forEach((additionalColumnName) => {\n\t\t\t\tconst additionalColumn = allColumns.find((c) => c.name === additionalColumnName);\n\t\t\t\tif (additionalColumn?.relativePath) {\n\t\t\t\t\treferencedPropertyPaths.add(additionalColumn.relativePath);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tdisplayedColumns.forEach((column) => {\n\t\t\tif (!column) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Process the column itself\n\t\t\tprocessColumn(column as AnnotationTableColumn);\n\n\t\t\t// Process the columns referenced by the column\n\t\t\tcolumn.propertyInfos?.forEach((relatedColumnName) => {\n\t\t\t\tconst relatedColumn = allColumns.find((c) => c.name === relatedColumnName);\n\t\t\t\tif (relatedColumn) {\n\t\t\t\t\tprocessColumn(relatedColumn as AnnotationTableColumn);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn keyPropertyNames.every((propName) => propName && referencedPropertyPaths.has(propName));\n\t},\n\t/**\n\t * Gets the search query for analytical and non analytical odataListBinding.\n\t * @param binding The oDataListBinding instance.\n\t * @returns The search query if available, otherwise undefined.\n\t */\n\tgetSearchQuery: function (binding: ODataListBinding): string | undefined {\n\t\tconst aggregation = binding.getAggregation?.() as Record<string, unknown> | undefined;\n\t\tif (aggregation?.search !== undefined) {\n\t\t\t// For analytical tables, the search query is stored in the aggregation\n\t\t\treturn aggregation.search as string;\n\t\t}\n\t\t// If not found in aggregation, check the query options\n\t\treturn binding.getQueryOptionsFromParameters().$search;\n\t},\n\tupdateBinding: function (table: MDCTable, bindingInfo: CollectionBindingInfo, binding?: ODataListBinding): void {\n\t\tconst tableAPI = this._getTableAPI(table);\n\t\tconst bIsSuspended = tableAPI?.getProperty(\"bindingSuspended\");\n\t\tif (!bIsSuspended) {\n\t\t\t// if the rowBindingInfo has a $$getKeepAliveContext parameter we need to check it is the only Table with such a\n\t\t\t// parameter for the collectionMetaPath\n\t\t\tif (bindingInfo.parameters?.$$getKeepAliveContext === true) {\n\t\t\t\tconst collectionPath = DelegateUtil.getCustomData<string>(table, \"targetCollectionPath\") ?? \"\";\n\t\t\t\tconst internalModel = table.getModel(\"internal\") as JSONModel;\n\t\t\t\tconst keptAliveLists = internalModel?.getObject(\"/keptAliveLists\") ?? {};\n\t\t\t\tif (!keptAliveLists[collectionPath]) {\n\t\t\t\t\tkeptAliveLists[collectionPath] = table.getId();\n\t\t\t\t\tinternalModel?.setProperty(\"/keptAliveLists\", keptAliveLists);\n\t\t\t\t} else if (keptAliveLists[collectionPath] !== table.getId()) {\n\t\t\t\t\tdelete bindingInfo.parameters.$$getKeepAliveContext;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet needManualRefresh = false;\n\t\t\tconst view = CommonUtils.getTargetView(table);\n\t\t\tconst internalBindingContext = table.getBindingContext(\"internal\");\n\t\t\tconst manualUpdatePropertyKey = \"pendingManualBindingUpdate\";\n\t\t\tconst pendingManualUpdate = internalBindingContext?.getProperty(manualUpdatePropertyKey) as boolean;\n\t\t\tconst newSorters = JSON.stringify(bindingInfo.sorter ?? []);\n\n\t\t\tif (binding) {\n\t\t\t\t/**\n\t\t\t\t * Manual refresh if filters are not changed by binding.refresh() since updating the bindingInfo\n\t\t\t\t * is not enough to trigger a batch request.\n\t\t\t\t * Removing columns creates one batch request that was not executed before\n\t\t\t\t */\n\t\t\t\tconst viewData = view?.getViewData() as ListReportManifestSettings;\n\t\t\t\tconst oldFilters = binding.getFilters(\"Application\");\n\t\t\t\tconst previousSorters = internalBindingContext?.getProperty(PREVIOUS_SORTERS) ?? \"[]\";\n\n\t\t\t\tconst filterNotChanged =\n\t\t\t\t\t((bindingInfo.filters === null && oldFilters.length === 0) || // on analytical tables, the filters are set to null when no filters\n\t\t\t\t\t\tdeepEqual(bindingInfo.filters, oldFilters[0])) &&\n\t\t\t\t\tnewSorters === previousSorters &&\n\t\t\t\t\tbindingInfo.path === binding.getPath() && // The path can be changed in case of a parametrized entity\n\t\t\t\t\tthis.getSearchQuery(binding) === bindingInfo?.parameters?.$search;\n\t\t\t\tconst LRMultiViewEnabled = !!viewData.views;\n\n\t\t\t\tneedManualRefresh =\n\t\t\t\t\tfilterNotChanged &&\n\t\t\t\t\t(internalBindingContext?.getProperty(SEARCH_HAS_BEEN_FIRED) || // check if the search has been triggered\n\t\t\t\t\t\tinternalBindingContext?.getProperty(COLUMN_HAS_BEEN_ADDED) || // check if a column has been added\n\t\t\t\t\t\tLRMultiViewEnabled) && // if the multi view is enabled the request should be refreshed as we don't known if the content of the table is outdated due to an action on another table\n\t\t\t\t\t!pendingManualUpdate;\n\t\t\t}\n\t\t\t// Cleanup groupConditions and aggregateConditions if they don't make sense\n\t\t\tif (tableAPI.getTableDefinition().enableAnalytics !== true) {\n\t\t\t\t// Aggregate conditions never make sense outside of an analytical table\n\t\t\t\ttable.setAggregateConditions();\n\n\t\t\t\t// Group conditions don't make sense in a Tree or Grid table\n\t\t\t\tif (\n\t\t\t\t\ttableAPI.getTableDefinition().control.type === \"GridTable\" ||\n\t\t\t\t\ttableAPI.getTableDefinition().control.type === \"TreeTable\"\n\t\t\t\t) {\n\t\t\t\t\ttable.setGroupConditions();\n\t\t\t\t}\n\t\t\t}\n\t\t\tTableDelegateBase.updateBinding.apply(this, [table, bindingInfo, binding]);\n\t\t\t// we store the table binding info that was used to bind the table in the table API\n\t\t\t// this needs to be done after the call to TableDelegateBase.updateBinding other wise we don't get the aggregate parameters\n\t\t\t// otherwise there is no way to retrieve sorters added in the onBeforeRebindTable event\n\t\t\ttableAPI.setTableBindingInfo(bindingInfo);\n\t\t\t// we make the call to update the download url but do not await it\n\t\t\ttableAPI.setDownloadUrl();\n\n\t\t\ttable.fireEvent(\"bindingUpdated\");\n\t\t\tif (needManualRefresh && table.getFilter() && binding) {\n\t\t\t\tbinding\n\t\t\t\t\t.requestRefresh(binding.getGroupId())\n\t\t\t\t\t.finally(() => {\n\t\t\t\t\t\tinternalBindingContext?.setProperty(manualUpdatePropertyKey, false);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(function (oError) {\n\t\t\t\t\t\tLog.error(\"Error while refreshing the table\", oError as string);\n\t\t\t\t\t});\n\t\t\t\tinternalBindingContext?.setProperty(manualUpdatePropertyKey, true);\n\t\t\t}\n\t\t\tinternalBindingContext?.setProperty(SEARCH_HAS_BEEN_FIRED, false);\n\t\t\tinternalBindingContext?.setProperty(COLUMN_HAS_BEEN_ADDED, false);\n\t\t\tinternalBindingContext?.setProperty(PREVIOUS_SORTERS, newSorters);\n\n\t\t\t//for Treetable, it's necessary to clear the pastableContexts since the binding destroys previous contexts.\n\t\t\tif (tableAPI.getTableDefinition().control.type === \"TreeTable\") {\n\t\t\t\tinternalBindingContext?.setProperty(\"pastableContexts\", []);\n\t\t\t}\n\n\t\t\tconst attachedEvents = tableAPI.storedEvents ?? [];\n\t\t\tattachedEvents.forEach(({ eventId, callback, listener, data }) => {\n\t\t\t\ttable.getRowBinding()?.attachEvent(eventId, data, callback, listener);\n\t\t\t});\n\t\t}\n\t\ttableAPI?.setProperty(\"outDatedBinding\", bIsSuspended);\n\t},\n\n\t_computeRowBindingInfoFromTemplate: function (oTable: Table): CollectionBindingInfo {\n\t\tconst tableAPI = this._getTableAPI(oTable);\n\t\tconst rowBindingInfo = tableAPI.getTableTemplateBindingInfo();\n\t\tconst bindingContext = oTable.getBindingContext();\n\t\tlet tableCanBeInInlineEdit = false;\n\t\tif (\n\t\t\tbindingContext === undefined &&\n\t\t\toTable.getBindingContext(\"ui\")?.getProperty(\"isEditable\") === false &&\n\t\t\toTable.getModel(\"viewData\")?.getProperty(\"/isInlineEditEnabled\")\n\t\t) {\n\t\t\ttableCanBeInInlineEdit = true;\n\t\t} else if (\n\t\t\t(bindingContext as ODataV4Context | undefined)?.getBinding().getUpdateGroupId() == CommonUtils.INLINEEDIT_UPDATEGROUPID\n\t\t) {\n\t\t\ttableCanBeInInlineEdit = true;\n\t\t}\n\n\t\tif (tableCanBeInInlineEdit) {\n\t\t\trowBindingInfo.parameters ??= {};\n\t\t\trowBindingInfo.parameters.$$updateGroupId = CommonUtils.INLINEEDIT_UPDATEGROUPID;\n\t\t}\n\n\t\treturn rowBindingInfo;\n\t},\n\t_internalUpdateBindingInfo: function (oTable: Table, oBindingInfo: CollectionBindingInfo) {\n\t\tconst oInternalModelContext = oTable.getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\tObject.assign(oBindingInfo, this._computeRowBindingInfoFromTemplate(oTable));\n\t\t/**\n\t\t * Binding info might be suspended at the beginning when the first bindRows is called:\n\t\t * To avoid duplicate requests but still have a binding to create new entries.\t\t\t\t *\n\t\t * After the initial binding step, follow up bindings should no longer be suspended.\n\t\t */\n\t\tif (oTable.getRowBinding()) {\n\t\t\toBindingInfo.suspended = false;\n\t\t}\n\t\t// The previously added handler for the event 'dataReceived' is not anymore there\n\t\t// since the bindingInfo is recreated from scratch so we need to set the flag to false in order\n\t\t// to again add the handler on this event if needed\n\t\tif (oInternalModelContext) {\n\t\t\toInternalModelContext.setProperty(\"dataReceivedAttached\", false);\n\t\t}\n\n\t\tlet oFilter;\n\t\tconst oFilterInfo = TableUtils.getAllFilterInfo(oTable);\n\t\t// Prepare binding info with filter/search parameters\n\t\tif (oFilterInfo.filters.length > 0) {\n\t\t\toFilter = new Filter({ filters: oFilterInfo.filters, and: true });\n\t\t}\n\t\tif (oFilterInfo.bindingPath) {\n\t\t\toBindingInfo.path = oFilterInfo.bindingPath;\n\t\t}\n\n\t\tconst oDataStateIndicator = oTable.getDataStateIndicator();\n\t\tif (oDataStateIndicator && oDataStateIndicator.isFiltering()) {\n\t\t\t// Include filters on messageStrip\n\t\t\tif ((oBindingInfo.filters as unknown as Filter[]).length > 0) {\n\t\t\t\toFilter = new Filter({ filters: (oBindingInfo.filters as unknown as Filter[]).concat(oFilterInfo.filters), and: true });\n\t\t\t\tthis.updateBindingInfoWithSearchQuery(oBindingInfo, oFilterInfo, oFilter);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.updateBindingInfoWithSearchQuery(oBindingInfo, oFilterInfo, oFilter);\n\t\t}\n\n\t\tthis.addFilterOnActiveEntities(oTable, oBindingInfo);\n\t},\n\n\tupdateBindingInfoWithSearchQuery: function (bindingInfo: CollectionBindingInfo, filterInfo: InternalBindingInfo, filter?: Filter) {\n\t\tbindingInfo.filters = filter;\n\t\tbindingInfo.parameters ??= {};\n\t\tif (filterInfo.search) {\n\t\t\tbindingInfo.parameters.$search = CommonUtils.normalizeSearchTerm(filterInfo.search);\n\t\t} else {\n\t\t\tbindingInfo.parameters.$search = undefined;\n\t\t}\n\t},\n\t/**\n\t * If specified in the payload, adds a filter to display only active entities.\n\t * @param table\n\t * @param bindingInfo\n\t */\n\taddFilterOnActiveEntities: function (table: Table, bindingInfo: CollectionBindingInfo) {\n\t\tconst payload = table.getPayload() as { filterOnActiveEntities?: boolean };\n\n\t\tif (payload?.filterOnActiveEntities === true) {\n\t\t\tconst filterOnActive = new Filter({ path: \"IsActiveEntity\", operator: \"EQ\", value1: true });\n\t\t\tif (bindingInfo.filters) {\n\t\t\t\tbindingInfo.filters = new Filter({ filters: [filterOnActive, bindingInfo.filters], and: true });\n\t\t\t} else {\n\t\t\t\tbindingInfo.filters = filterOnActive;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Creates a template from the fragment of a slot column.\n\t * @param columnInfo The custom table column\n\t * @param view The current view\n\t * @param modifier The control tree modifier\n\t * @param tableId The id of the underlying table\n\t * @returns The loaded fragment\n\t */\n\t_templateSlotColumnFragment: async function (\n\t\tcolumnInfo: CustomElement<CustomBasedTableColumn>,\n\t\tview: View,\n\t\tmodifier: BaseTreeModifier | JsControlTreeModifier,\n\t\ttableId: string\n\t): Promise<null | Control | Control[] | Element> {\n\t\tconst slotColumnsXML = new DOMParser().parseFromString(\n\t\t\tjsx.renderAsXML(() => {\n\t\t\t\treturn getSlotColumn(tableId, columnInfo, false) as unknown as string;\n\t\t\t}),\n\t\t\t\"text/xml\"\n\t\t);\n\t\tif (!slotColumnsXML) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst slotXML = slotColumnsXML.getElementsByTagName(\"slot\")[0];\n\n\t\tif (columnInfo.template) {\n\t\t\tif (slotXML) {\n\t\t\t\tconst oTemplate = new DOMParser().parseFromString(columnInfo.template as string, \"text/xml\");\n\t\t\t\tif (oTemplate.firstElementChild && oTemplate.firstElementChild.nodeName !== \"html\") {\n\t\t\t\t\tslotXML.replaceWith(oTemplate.firstElementChild);\n\t\t\t\t} else {\n\t\t\t\t\tslotXML.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tLog.error(`Please provide content inside this Building Block Column: ${columnInfo.header}`);\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst resultXML = await XMLPreprocessor.process(\n\t\t\tslotColumnsXML.firstElementChild,\n\t\t\t{ models: {} },\n\t\t\t(view.getController().getOwnerComponent() as EnhanceWithUI5<TemplateComponent>).getPreprocessorContext()\n\t\t);\n\t\tif (modifier?.targets !== \"jsControlTree\") {\n\t\t\treturn resultXML.firstElementChild;\n\t\t}\n\t\treturn Fragment.load({\n\t\t\ttype: \"XML\",\n\t\t\tdefinition: resultXML,\n\t\t\tcontroller: view.getController()\n\t\t}) as Promise<Control | Control[]>;\n\t},\n\n\t_getExportFormat: function (dataType?: string) {\n\t\tswitch (dataType) {\n\t\t\tcase \"Edm.Date\":\n\t\t\t\treturn ExcelFormat.getExcelDatefromJSDate();\n\t\t\tcase \"Edm.DateTimeOffset\":\n\t\t\t\treturn ExcelFormat.getExcelDateTimefromJSDateTime();\n\t\t\tcase \"Edm.TimeOfDay\":\n\t\t\t\treturn ExcelFormat.getExcelTimefromJSTime();\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t},\n\n\t_getVHRelevantFields: function (oMetaModel: ODataMetaModel, sMetadataPath: string, sBindingPath?: string): string[] {\n\t\tlet aFields: string[] = [],\n\t\t\toDataFieldData = oMetaModel.getObject(sMetadataPath);\n\n\t\tif (oDataFieldData.$kind && oDataFieldData.$kind === \"Property\") {\n\t\t\toDataFieldData = oMetaModel.getObject(`${sMetadataPath}@com.sap.vocabularies.UI.v1.DataFieldDefault`);\n\t\t\tsMetadataPath = `${sMetadataPath}@com.sap.vocabularies.UI.v1.DataFieldDefault`;\n\t\t}\n\t\tswitch (oDataFieldData.$Type) {\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAnnotation\":\n\t\t\t\tif (oMetaModel.getObject(`${sMetadataPath}/Target/$AnnotationPath`).includes(\"com.sap.vocabularies.UI.v1.FieldGroup\")) {\n\t\t\t\t\toMetaModel.getObject(`${sMetadataPath}/Target/$AnnotationPath/Data`).forEach((oValue: unknown, iIndex: number) => {\n\t\t\t\t\t\taFields = aFields.concat(\n\t\t\t\t\t\t\tthis._getVHRelevantFields(oMetaModel, `${sMetadataPath}/Target/$AnnotationPath/Data/${iIndex}`)\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithUrl\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataField\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithAction\":\n\t\t\t\taFields.push(oMetaModel.getObject(`${sMetadataPath}/Value/$Path`));\n\t\t\t\tbreak;\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAction\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\":\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// property\n\t\t\t\t// temporary workaround to make sure VH relevant field path do not contain the bindingpath\n\t\t\t\tif (sBindingPath && sMetadataPath.indexOf(sBindingPath) === 0) {\n\t\t\t\t\taFields.push(sMetadataPath.substring(sBindingPath.length + 1));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\taFields.push(CommonHelper.getNavigationPath(sMetadataPath, true));\n\t\t\t\tbreak;\n\t\t}\n\t\treturn aFields;\n\t},\n\t_setDraftIndicatorOnVisibleColumn: function (oTable: Table, aColumns: TableColumn[], oColumnInfo?: TableColumn) {\n\t\tconst oInternalBindingContext = oTable.getBindingContext(\"internal\");\n\t\tif (!oInternalBindingContext) {\n\t\t\treturn;\n\t\t}\n\t\tconst sInternalPath = oInternalBindingContext.getPath();\n\t\tconst aColumnsWithDraftIndicator = aColumns.filter((oColumn: TableColumn) => {\n\t\t\treturn this._bColumnHasPropertyWithDraftIndicator(oColumn);\n\t\t});\n\t\tconst aVisibleColumns = oTable.getColumns();\n\t\tlet sAddVisibleColumnName, sVisibleColumnName, bFoundColumnVisibleWithDraft, sColumnNameWithDraftIndicator;\n\t\tfor (const i in aVisibleColumns) {\n\t\t\tsVisibleColumnName = aVisibleColumns[i].getPropertyKey();\n\t\t\tfor (const j in aColumnsWithDraftIndicator) {\n\t\t\t\tsColumnNameWithDraftIndicator = aColumnsWithDraftIndicator[j].name;\n\t\t\t\tif (sVisibleColumnName === sColumnNameWithDraftIndicator) {\n\t\t\t\t\tbFoundColumnVisibleWithDraft = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (oColumnInfo && oColumnInfo.name === sColumnNameWithDraftIndicator) {\n\t\t\t\t\tsAddVisibleColumnName = oColumnInfo.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (bFoundColumnVisibleWithDraft) {\n\t\t\t\toInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, sVisibleColumnName);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!bFoundColumnVisibleWithDraft && sAddVisibleColumnName) {\n\t\t\toInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, sAddVisibleColumnName);\n\t\t}\n\t},\n\tremoveItem: async function (\n\t\toTable: UI5Element | Element,\n\t\toPropertyInfoName: UI5Element | Element,\n\t\tmPropertyBag: { modifier: BaseTreeModifier; appComponent: AppComponent }\n\t): Promise<boolean> {\n\t\tlet doRemoveItem = true;\n\t\tif (!oPropertyInfoName) {\n\t\t\t// 1. Application removed the property from their data model\n\t\t\t// 2. addItem failed before revertData created\n\t\t\treturn Promise.resolve(doRemoveItem);\n\t\t}\n\t\tconst oModifier = mPropertyBag.modifier;\n\t\tconst sDataProperty = await oModifier.getProperty<string>(oPropertyInfoName, \"dataProperty\");\n\t\tif (sDataProperty && sDataProperty.includes && sDataProperty.includes(\"InlineXML\")) {\n\t\t\toModifier.insertAggregation(oTable, \"dependents\", oPropertyInfoName);\n\t\t\tdoRemoveItem = false;\n\t\t}\n\t\tif ((oTable as UI5Element).isA && oModifier.targets === \"jsControlTree\") {\n\t\t\tthis._setDraftIndicatorStatus(oModifier, oTable, this.getColumnsFor(oTable as Table));\n\t\t}\n\t\treturn Promise.resolve(doRemoveItem);\n\t},\n\t_getMetaModel: function (mPropertyBag: { appComponent: AppComponent }) {\n\t\treturn mPropertyBag.appComponent && mPropertyBag.appComponent.getModel().getMetaModel();\n\t},\n\t_setDraftIndicatorStatus: function (\n\t\toModifier: BaseTreeModifier,\n\t\toTable: UI5Element | Element,\n\t\taColumns: TableColumn[],\n\t\toColumnInfo?: TableColumn\n\t) {\n\t\tif (oModifier.targets === \"jsControlTree\") {\n\t\t\tthis._setDraftIndicatorOnVisibleColumn(oTable as Table, aColumns, oColumnInfo);\n\t\t}\n\t},\n\t_getGroupId: function (sRetrievedGroupId: string) {\n\t\treturn sRetrievedGroupId || undefined;\n\t},\n\t_insertAggregation: async function (\n\t\toValueHelp: Element | UI5Element | Element[] | UI5Element[],\n\t\toModifier: BaseTreeModifier,\n\t\toTable: Element | UI5Element\n\t): Promise<void> {\n\t\tif (oValueHelp) {\n\t\t\treturn oModifier.insertAggregation(oTable, \"dependents\", oValueHelp, 0);\n\t\t}\n\t\treturn;\n\t},\n\n\t/**\n\t * Invoked when a column is added using the table personalization dialog.\n\t * @param table Instance of table control\n\t * @param propertyInfoName Name of the property for which the column is added\n\t * @param mPropertyBag Instance of property bag from the flexibility API\n\t * @param mPropertyBag.modifier Instance of the control tree modifier\n\t * @param mPropertyBag.appComponent Instance of the app component\n\t * @param mPropertyBag.view Instance of the view\n\t * @returns Once resolved, a table column definition is returned\n\t */\n\taddItem: async function (\n\t\ttable: Element | UI5Element,\n\t\tpropertyInfoName: string,\n\t\tmPropertyBag: { modifier: BaseTreeModifier; appComponent: AppComponent; view?: FEView }\n\t) {\n\t\tconst oMetaModel = this._getMetaModel(mPropertyBag),\n\t\t\toModifier = mPropertyBag.modifier,\n\t\t\tsTableId = oModifier.getId(table),\n\t\t\taColumns = (table as UI5Element).isA ? this.getColumnsFor(table as Table) : null,\n\t\t\ttableAPI = this._getTableAPI(table as Table);\n\t\tif (!aColumns) {\n\t\t\t// We return null here because everything should apply at runtime\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst columnInfo = aColumns.find(function (oColumn) {\n\t\t\treturn oColumn.name === propertyInfoName;\n\t\t});\n\t\tif (!columnInfo) {\n\t\t\tLog.error(`${propertyInfoName} not found while adding column`);\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (columnInfo.availability === \"Hidden\") {\n\t\t\tLog.warning(`Column for ${propertyInfoName} not added because it's hidden`);\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tconst internalBindingContext = (table as Table).getBindingContext(\"internal\");\n\t\tinternalBindingContext?.setProperty(COLUMN_HAS_BEEN_ADDED, true);\n\t\tthis._setDraftIndicatorStatus(oModifier, table, aColumns, columnInfo);\n\t\tconst sPath = await DelegateUtil.getCustomDataWithModifier<string>(table, \"metaPath\", oModifier);\n\t\tconst oTableContext: Context = oMetaModel.createBindingContext(sPath!)!;\n\t\t// If view is not provided try to get it by accessing to the parental hierarchy\n\t\t// If it doesn't work (table into an unattached OP section) get the view via the AppComponent\n\t\tconst view =\n\t\t\tmPropertyBag.view ||\n\t\t\tCommonUtils.getTargetView(table as UI5Element) ||\n\t\t\t(mPropertyBag.appComponent ? CommonUtils.getCurrentPageView(mPropertyBag.appComponent) : undefined);\n\n\t\tif (columnInfo.type === \"Default\") {\n\t\t\tLog.error(\"Custom columns defined in the manifest are not supported when using a table building block.\");\n\t\t\tthrow new Error(\"Custom columns defined in the manifest are not supported when using a table building block.\");\n\t\t}\n\n\t\tif (columnInfo.type === \"Slot\") {\n\t\t\treturn this._templateSlotColumnFragment(columnInfo as CustomElement<CustomBasedTableColumn>, view, oModifier, sTableId);\n\t\t}\n\n\t\tif (columnInfo.type === \"Computed\") {\n\t\t\tconst enableAnalytics = this._getTableAPI(table as Table).getTableDefinition().enableAnalytics;\n\t\t\treturn getComputedColumn(sTableId, columnInfo as ComputedTableColumn, oTableContext, enableAnalytics);\n\t\t}\n\n\t\t// fall-back\n\t\tif (!oMetaModel) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tlet propertyInfos = tableAPI.getEnhancedFetchedPropertyInfos();\n\t\tif (!propertyInfos.length) {\n\t\t\t// If the propertyInfos are not fetched yet, we need to fetch them\n\t\t\t// This is the case when the table is not created yet\n\t\t\tawait this.fetchProperties(table as MDCTable);\n\t\t\tpropertyInfos = tableAPI.getEnhancedFetchedPropertyInfos();\n\t\t}\n\t\tconst propertyInfo = propertyInfos.find(function (propInfo: EnhancedFEPropertyInfo) {\n\t\t\treturn propInfo.name === propertyInfoName;\n\t\t});\n\n\t\tconst oPropertyContext: Context = oMetaModel.createBindingContext(propertyInfo!.annotationPath)!;\n\n\t\tconst fnTemplateFragment = async (\n\t\t\toInPropertyInfo: unknown,\n\t\t\toView: FEView\n\t\t): Promise<UI5Element | Element | UI5Element[] | Element[]> => {\n\t\t\tlet bDisplayMode: boolean | undefined;\n\t\t\tlet sTableTypeCustomData: string | undefined;\n\t\t\tlet sCreationModeCustomData: string | undefined;\n\n\t\t\treturn Promise.all([\n\t\t\t\tDelegateUtil.getCustomDataWithModifier<string | boolean>(table, \"displayModePropertyBinding\", oModifier),\n\t\t\t\tDelegateUtil.getCustomDataWithModifier<string>(table, \"tableType\", oModifier),\n\t\t\t\tDelegateUtil.getCustomDataWithModifier<string>(table, \"creationMode\", oModifier)\n\t\t\t]).then(async (aCustomData: (string | boolean | undefined)[]) => {\n\t\t\t\tbDisplayMode = aCustomData[0] as boolean | undefined;\n\t\t\t\tsTableTypeCustomData = aCustomData[1] as string | undefined;\n\t\t\t\tsCreationModeCustomData = aCustomData[2] as string | undefined;\n\t\t\t\t// Read Only and Column Edit Mode can both have three state\n\t\t\t\t// Undefined means that the framework decides what to do\n\t\t\t\t// True / Display means always read only\n\t\t\t\t// False / Editable means editable but while still respecting the low level principle (immutable property will not be editable)\n\t\t\t\tif (bDisplayMode !== undefined && typeof bDisplayMode !== \"boolean\") {\n\t\t\t\t\tbDisplayMode = bDisplayMode === \"true\";\n\t\t\t\t}\n\n\t\t\t\tconst oThis = new JSONModel({\n\t\t\t\t\t\tenableAutoColumnWidth: tableAPI.getTableDefinition().control.enableAutoColumnWidth,\n\t\t\t\t\t\treadOnly: bDisplayMode,\n\t\t\t\t\t\ttableType: sTableTypeCustomData,\n\t\t\t\t\t\tid: sTableId,\n\t\t\t\t\t\tnavigationPropertyPath: propertyInfoName,\n\t\t\t\t\t\tcolumnInfo: columnInfo,\n\t\t\t\t\t\tcollection: oMetaModel.createBindingContext(sPath!),\n\t\t\t\t\t\tcreationMode: { name: sCreationModeCustomData },\n\t\t\t\t\t\twidthIncludingColumnHeader: tableAPI.getTableDefinition().control.widthIncludingColumnHeader\n\t\t\t\t\t}),\n\t\t\t\t\toPreprocessorSettings = {\n\t\t\t\t\t\tbindingContexts: {\n\t\t\t\t\t\t\tentitySet: oTableContext,\n\t\t\t\t\t\t\tcollection: oTableContext,\n\t\t\t\t\t\t\tdataField: oPropertyContext,\n\t\t\t\t\t\t\tthis: oThis.createBindingContext(\"/\"),\n\t\t\t\t\t\t\tcolumn: oThis.createBindingContext(\"/columnInfo\")\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmodels: {\n\t\t\t\t\t\t\tthis: oThis,\n\t\t\t\t\t\t\tentitySet: oMetaModel,\n\t\t\t\t\t\t\tcollection: oMetaModel,\n\t\t\t\t\t\t\tdataField: oMetaModel,\n\t\t\t\t\t\t\tmetaModel: oMetaModel,\n\t\t\t\t\t\t\tcolumn: oThis\n\t\t\t\t\t\t},\n\t\t\t\t\t\tappComponent: mPropertyBag.appComponent\n\t\t\t\t\t};\n\n\t\t\t\tconst tableCollection = getInvolvedDataModelObjects<EntitySet | NavigationProperty>(\n\t\t\t\t\toMetaModel.createBindingContext(tableAPI.tableDefinition.annotation.collection)!\n\t\t\t\t);\n\t\t\t\tconst handlerProvider = new TableEventHandlerProvider(\n\t\t\t\t\ttableAPI,\n\t\t\t\t\t{ collectionEntity: tableCollection.targetObject!, metaModel: oMetaModel },\n\t\t\t\t\ttableAPI\n\t\t\t\t);\n\t\t\t\tconst computedColumnXML = new DOMParser().parseFromString(\n\t\t\t\t\tjsx.renderAsXML(() => {\n\t\t\t\t\t\treturn (getColumnTemplate(\n\t\t\t\t\t\t\tsTableId,\n\t\t\t\t\t\t\ttableAPI,\n\t\t\t\t\t\t\tcolumnInfo as AnnotationTableColumn,\n\t\t\t\t\t\t\toMetaModel.createBindingContext(sPath!)!,\n\t\t\t\t\t\t\thandlerProvider\n\t\t\t\t\t\t) ?? \"\") as unknown as string;\n\t\t\t\t\t}),\n\t\t\t\t\t\"text/xml\"\n\t\t\t\t);\n\t\t\t\treturn DelegateUtil.templateControlFragment(\n\t\t\t\t\tcomputedColumnXML.firstElementChild,\n\t\t\t\t\toPreprocessorSettings,\n\t\t\t\t\t{ view: oView },\n\t\t\t\t\toModifier\n\t\t\t\t).finally(function () {\n\t\t\t\t\toThis.destroy();\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\n\t\treturn fnTemplateFragment(propertyInfo, view);\n\t},\n\n\t/**\n\t * Provide the Table's filter delegate to provide basic filter functionality such as adding FilterFields.\n\t * @returns Object for the Tables filter personalization.\n\t */\n\tgetFilterDelegate: function () {\n\t\treturn Object.assign(\n\t\t\t{\n\t\t\t\tapiVersion: 2\n\t\t\t},\n\t\t\tFilterBarDelegate,\n\t\t\t{\n\t\t\t\taddItem: async function (oParentControl: Control, sPropertyInfoName: string) {\n\t\t\t\t\tif (sPropertyInfoName.indexOf(\"Property::\") === 0) {\n\t\t\t\t\t\t// Correct the name of complex property info references.\n\t\t\t\t\t\tsPropertyInfoName = sPropertyInfoName.replace(\"Property::\", \"\");\n\t\t\t\t\t}\n\t\t\t\t\treturn FilterBarDelegate.addItem(oParentControl as FilterBar, sPropertyInfoName);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t},\n\n\t/**\n\t * Returns the TypeMap attached to this delegate.\n\t * @returns Any instance of TypeMap\n\t */\n\tgetTypeMap: function (/*oPayload: object*/) {\n\t\treturn TypeMap;\n\t},\n\n\t/**\n\t * Format the title of the group header .\n\t * @param table Instance of table control\n\t * @param context Context\n\t * @param property Name of the property\n\t * @returns Formatted title of the group header.\n\t */\n\tformatGroupHeader(table: MDCTable, context: ODataV4Context, property: string) {\n\t\tconst propertyInfos = this._getTableAPI(table).getEnhancedFetchedPropertyInfos();\n\t\tconst propertyInfo = propertyInfos?.find((obj) => {\n\t\t\treturn obj.name === property;\n\t\t});\n\t\t/*For a Date, DateTime, Boolean or Decimal property, the value is returned in external format using a UI5 type for the\n\t        given property path that formats corresponding to the property's EDM type and constraints*/\n\t\tconst dataBaseType = TypeMap.getTypeConfig(propertyInfo?.dataType).baseType;\n\t\tconst externalFormat =\n\t\t\tdataBaseType === \"DateTime\" || dataBaseType === \"Date\" || dataBaseType === \"Boolean\" || dataBaseType === \"Numeric\";\n\t\tlet value;\n\t\tif (!context) {\n\t\t\tvalue = getResourceModel(CommonUtils.getTargetView(table)).getText(\"M_TABLE_GROUP_HEADER_TITLE_VALUE\");\n\t\t\treturn getResourceModel(table).getText(\"M_TABLE_GROUP_HEADER_TITLE\", [propertyInfo?.label, value]);\n\t\t}\n\t\tif (propertyInfo?.mode) {\n\t\t\tswitch (propertyInfo.mode) {\n\t\t\t\tcase \"Description\":\n\t\t\t\t\tvalue = propertyInfo.descriptionProperty ? context.getProperty(propertyInfo.descriptionProperty, externalFormat) : null;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"DescriptionValue\":\n\t\t\t\t\tvalue = ValueFormatter.formatWithBrackets(\n\t\t\t\t\t\tpropertyInfo.descriptionProperty ? context.getProperty(propertyInfo.descriptionProperty, externalFormat) : null,\n\t\t\t\t\t\tpropertyInfo.valueProperty ? context.getProperty(propertyInfo.valueProperty, externalFormat) : null\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ValueDescription\":\n\t\t\t\t\tvalue = ValueFormatter.formatWithBrackets(\n\t\t\t\t\t\tpropertyInfo.valueProperty ? context.getProperty(propertyInfo.valueProperty, externalFormat) : null,\n\t\t\t\t\t\tpropertyInfo.descriptionProperty ? context.getProperty(propertyInfo.descriptionProperty, externalFormat) : null\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tvalue = propertyInfo?.path ? context.getProperty(propertyInfo.path, externalFormat) : null;\n\t\t}\n\t\tif (value === null || value === \"\") {\n\t\t\tvalue = getResourceModel(CommonUtils.getTargetView(table)).getText(\"M_TABLE_GROUP_HEADER_TITLE_VALUE\");\n\t\t}\n\t\treturn getResourceModel(table).getText(\"M_TABLE_GROUP_HEADER_TITLE\", [propertyInfo?.label, value]);\n\t}\n});\n"],"mappings":"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","ignoreList":[]}