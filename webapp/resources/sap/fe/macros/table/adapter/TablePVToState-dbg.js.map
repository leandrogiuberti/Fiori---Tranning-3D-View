{"version":3,"names":["overridePVGroupLevels","newGroupLevels","oldGroupLevels","propertyInfoNames","groupsInNewVariant","map","group","groupLevels","name","includes","push","filter","grouped","overridePVSorters","newSortOrder","oldSortOrder","sortersInNewVariant","sorter","Property","sorters","descending","Descending","sorted","overridePVAggregations","newAggregations","oldAggregations","newAggregationsKeys","Object","keys","mixedAggregates","singleNewAggregate","newAggregate","singleOldAggregate","oldAggregate","aggregated","overridePVContent","newPVContent","oldPVContent","itemsInNewVariant","item","items","itemIndex","Value","visible","position","convertPVToState","pvToSet","pvToReplace","newPVProps","getProperties","oldPVProps","getTableVisualization","Content","overriddenProps","GroupBy","SortOrder","overriddenAggregation","Aggregations","length","aggregations","_exports"],"sourceRoot":".","sources":["TablePVToState.ts"],"sourcesContent":["import type PresentationVariant from \"sap/fe/navigation/PresentationVariant\";\nimport type { Aggregation, PvProperties, SortOrder, VisContentType } from \"sap/fe/navigation/PresentationVariant\";\nimport type { AppState, GroupLevels, Items, Sorters } from \"sap/ui/mdc/p13n/StateUtil\";\n\n/**\n * Override the group levels for new state to be set on the table.\n * @param newGroupLevels\n * @param oldGroupLevels\n * @param propertyInfoNames\n * @returns Overridden group levels to be set on the table\n */\nconst overridePVGroupLevels = function (newGroupLevels: string[], oldGroupLevels: string[], propertyInfoNames: string[]): GroupLevels[] {\n\tconst groupsInNewVariant = newGroupLevels.map((group) => {\n\t\treturn group;\n\t});\n\n\tconst groupLevels =\n\t\tnewGroupLevels.map((group) => {\n\t\t\treturn {\n\t\t\t\tname: propertyInfoNames.includes(`Property::${group}`) ? `Property::${group}` : group\n\t\t\t};\n\t\t}) || [];\n\n\tgroupLevels.push(\n\t\t...oldGroupLevels\n\t\t\t.filter((group) => {\n\t\t\t\treturn !groupsInNewVariant.includes(group);\n\t\t\t})\n\t\t\t.map((group) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: propertyInfoNames.includes(`Property::${group}`) ? `Property::${group}` : group,\n\t\t\t\t\tgrouped: false\n\t\t\t\t};\n\t\t\t})\n\t);\n\n\treturn groupLevels;\n};\n\n/**\n * Override the sorters for new state to be set on the table.\n * @param newSortOrder\n * @param oldSortOrder\n * @param propertyInfoNames\n * @returns Overridden sorters to be set on the table\n */\nconst overridePVSorters = function (newSortOrder: SortOrder[], oldSortOrder: SortOrder[], propertyInfoNames: string[]): Sorters[] {\n\tconst sortersInNewVariant = newSortOrder.map((sorter) => {\n\t\treturn sorter.Property;\n\t});\n\n\tconst sorters = newSortOrder.map((sorter) => {\n\t\treturn {\n\t\t\tname: propertyInfoNames.includes(`Property::${sorter.Property}`) ? `Property::${sorter.Property}` : sorter.Property,\n\t\t\tdescending: sorter.Descending\n\t\t};\n\t});\n\n\tsorters.push(\n\t\t...oldSortOrder\n\t\t\t.filter((sorter) => {\n\t\t\t\treturn !sortersInNewVariant.includes(sorter.Property);\n\t\t\t})\n\t\t\t.map((sorter) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: propertyInfoNames.includes(`Property::${sorter.Property}`) ? `Property::${sorter.Property}` : sorter.Property,\n\t\t\t\t\tdescending: sorter.Descending,\n\t\t\t\t\tsorted: false\n\t\t\t\t};\n\t\t\t})\n\t);\n\n\treturn sorters;\n};\n\n/**\n * Override the Aggregations for the new state to be set on the table.\n * @param newAggregations\n * @param oldAggregations\n * @param propertyInfoNames\n * @returns Overridden Aggregations to be set on the table\n */\nconst overridePVAggregations = function (\n\tnewAggregations: Aggregation,\n\toldAggregations: Aggregation,\n\tpropertyInfoNames: string[]\n): Aggregation {\n\tconst newAggregationsKeys = Object.keys(newAggregations);\n\n\t// Return object\n\tconst mixedAggregates: Aggregation = {};\n\n\t// Put the new keys in the return object.\n\tfor (const singleNewAggregate in newAggregations) {\n\t\tlet newAggregate = singleNewAggregate;\n\t\tif (propertyInfoNames.includes(`Property::${singleNewAggregate}`)) {\n\t\t\tnewAggregate = `Property::${singleNewAggregate}`;\n\t\t}\n\t\tmixedAggregates[newAggregate] = newAggregations[singleNewAggregate];\n\t}\n\n\t// Hide the old aggregates if they are not present in the new Variant\n\tfor (const singleOldAggregate in oldAggregations) {\n\t\tif (!newAggregationsKeys.includes(singleOldAggregate)) {\n\t\t\tlet oldAggregate = singleOldAggregate;\n\t\t\tif (propertyInfoNames.includes(`Property::${singleOldAggregate}`)) {\n\t\t\t\toldAggregate = `Property::${singleOldAggregate}`;\n\t\t\t}\n\t\t\tmixedAggregates[oldAggregate] = { aggregated: false };\n\t\t}\n\t}\n\n\treturn mixedAggregates;\n};\n\n/**\n * Override the column content for new state to be set on the table.\n * @param newPVContent\n * @param oldPVContent\n * @returns Overridden column content to be set on the table\n */\nconst overridePVContent = function (newPVContent: VisContentType[], oldPVContent: VisContentType[]): Items[] {\n\tconst itemsInNewVariant =\n\t\tnewPVContent.map((item) => {\n\t\t\treturn item[\"Value\"];\n\t\t}) || [];\n\n\tconst items: Items[] =\n\t\tnewPVContent?.map((item, itemIndex: number) => {\n\t\t\treturn {\n\t\t\t\tname: item.Value,\n\t\t\t\tvisible: true,\n\t\t\t\tposition: itemIndex\n\t\t\t};\n\t\t}) || [];\n\n\titems.push(\n\t\t...oldPVContent\n\t\t\t.filter((item) => {\n\t\t\t\treturn !itemsInNewVariant.includes(item.Value);\n\t\t\t})\n\t\t\t.map((item) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: item.Value,\n\t\t\t\t\tvisible: false\n\t\t\t\t} as Items;\n\t\t\t})\n\t);\n\n\treturn items;\n};\n\n/**\n * Convert the presentation variant to state format.\n *\n * When a new presentation variant is to be applied on the table,\n * properties that are conflicting with the existing presentation variant\n * must be handled appropriately.\n * @param pvToSet The presentation variant that is to be applied on the table.\n * @param pvToReplace The existing presentation variant set on the table.\n * @param propertyInfoNames\n * @returns The app state that must be set on the table\n */\nexport const convertPVToState = function (\n\tpvToSet: PresentationVariant,\n\tpvToReplace: PresentationVariant,\n\tpropertyInfoNames: string[]\n): AppState {\n\tconst newPVProps = pvToSet.getProperties() ?? {};\n\tconst oldPVProps = (pvToReplace.getProperties() as PvProperties) ?? {};\n\n\tconst newPVContent = (pvToSet.getTableVisualization()?.Content || []) as VisContentType[];\n\tconst oldPVContent = (pvToReplace.getTableVisualization()?.Content || []) as VisContentType[];\n\n\tconst overriddenProps: AppState = {\n\t\titems: overridePVContent(newPVContent, oldPVContent),\n\t\tgroupLevels: overridePVGroupLevels(newPVProps.GroupBy ?? [], oldPVProps.GroupBy ?? [], propertyInfoNames),\n\t\tsorters: overridePVSorters(newPVProps.SortOrder ?? [], oldPVProps.SortOrder ?? [], propertyInfoNames)\n\t};\n\tconst overriddenAggregation = overridePVAggregations(newPVProps.Aggregations ?? {}, oldPVProps.Aggregations ?? {}, propertyInfoNames);\n\tif (Object.keys(overriddenAggregation).length > 0) {\n\t\toverriddenProps.aggregations = overriddenAggregation;\n\t}\n\treturn overriddenProps;\n};\n"],"mappings":"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","ignoreList":[],"file":"TablePVToState-dbg.js"}