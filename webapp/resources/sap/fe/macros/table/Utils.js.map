{"version":3,"file":"Utils.js","names":["getHiddenFilters","oTable","aFilters","hiddenFilters","data","Array","isArray","paths","forEach","mPath","oSvFilters","CommonUtils","getFiltersFromAnnotation","annotationPath","concat","getExternalFilters","table","filters","quickFilter","getQuickFilter","getSelectedKey","async","getListBindingForCount","pageBindingContext","params","oDataModel","getModel","tableAPI","getParent","filterInfo","tableUtils","getFilterInfo","additionalFilters","getP13nFilters","bindingInfo","path","bindingPath","getRowCollectionPath","Filter","and","fireEvent","collectionBindingInfo","CollectionBindingInfoAPI","quickFilterKey","itemKey","listBindingPath","startsWith","getPath","listBinding","bindList","getBindingContext","stringFilters","fetchFilter","getContext","countBinding","bindProperty","$$groupId","batchGroupId","$filter","$search","search","normalizeSearchTerm","undefined","promiseValue","requestValue","submitBatch","value","destroy","getCountFormatted","iCount","oCountFormatter","NumberFormat","getIntegerInstance","groupingEnabled","format","ignoreProperties","oTableDefinition","getTableDefinition","aIgnoreProperties","enableAnalytics","enableBasicSearch","control","type","FilterUtils","getFilter","ignoredProperties","targetControl","oControl","p13nMode","getP13nMode","p13nProperties","includes","isA","getEnhancedFetchedPropertyInfos","filter","property","filterable","DelegateUtil","getCustomData","oControlProperty","propertiesMetadata","getAllFilterInfo","oIFilterInfo","findValuesForKeyRecursively","obj","key","list","push","children","Object","keys","child","findValues","isFilterEligibleForOptimisticBatch","mdcTable","filterBar","filtersFromTable","filtersConditions","getConditions","filtersConditionsPaths","tableRowBindingsInfoPath","metaModel","getMetaModel","filterPropertiesAsPotentiallySensitiveDataOrDateType","filtersPathsFromTable","getFiltersPathsFromTable","filtersPathsFromFilterBar","getFiltersPathsFromFilterBar","edmDateTypes","allFiltersPaths","potentiallySensitiveAnnotation","getObject","filtersAnnotationsPaths","filterPath","getReferencePathsForFilters","getFilters","filterResult","length","i","left","right","whenBound","_getOrCreateBoundPromiseInfo","promise","onTableBound","oBoundPromiseInfo","resolve","fnResolve","Promise","isBound","updateFiltersForExternalID","entityTypePath","condition","nestedFilters","externalIdPropPath","sPath","$Path"],"sources":["./Utils.ts"],"sourcesContent":["import CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { PropertyInfo } from \"sap/fe/core/converters/controls/ListReport/FilterBar\";\nimport DelegateUtil from \"sap/fe/macros/DelegateUtil\";\nimport type { IFilterControl } from \"sap/fe/macros/filter/FilterUtils\";\nimport FilterUtils from \"sap/fe/macros/filter/FilterUtils\";\nimport type QuickFilterSelector from \"sap/fe/macros/table/QuickFilterSelector\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type Control from \"sap/ui/core/Control\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport type MDCChart from \"sap/ui/mdc/Chart\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { MDCTablePropertyInfo as TablePropertyInfo } from \"sap/ui/mdc/Table\";\nimport type { ConditionObject } from \"sap/ui/mdc/condition/Condition\";\nimport type Context from \"sap/ui/model/Context\";\nimport Filter from \"sap/ui/model/Filter\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport CollectionBindingInfoAPI from \"../CollectionBindingInfo\";\n\ntype FilterInfo = {\n\tfilters: Filter[];\n\tsearch: string;\n\tbindingPath: string;\n};\n\nexport type InternalBindingInfo = {\n\tparameters?: Record<string, string>;\n\tfilters: Filter[];\n\tsearch?: string | null;\n\tbindingPath?: string;\n};\n\nfunction getHiddenFilters(oTable: Control): Filter[] {\n\tlet aFilters: Filter[] = [];\n\tconst hiddenFilters = oTable.data(\"hiddenFilters\");\n\tif (hiddenFilters && Array.isArray(hiddenFilters.paths)) {\n\t\thiddenFilters.paths.forEach(function (mPath: { annotationPath: string }) {\n\t\t\tconst oSvFilters = CommonUtils.getFiltersFromAnnotation(oTable, mPath.annotationPath);\n\t\t\taFilters = aFilters.concat(oSvFilters);\n\t\t});\n\t}\n\treturn aFilters;\n}\n\n/**\n * Retrieves the external filters configured on the table.\n * @param table The table\n * @returns  The filters\n */\nfunction getExternalFilters(table: Table): Filter[] {\n\tlet filters: Filter[] = getHiddenFilters(table);\n\tconst quickFilter = table.getQuickFilter() as QuickFilterSelector;\n\tif (quickFilter) {\n\t\tfilters = filters.concat(CommonUtils.getFiltersFromAnnotation(table, quickFilter.getSelectedKey()));\n\t}\n\treturn filters;\n}\n\n/**\n * Retrieves the count of the OData list binding.\n * @param table The table used to get the initial OData list binding\n * @param pageBindingContext The binding context of the page\n * @param params Contains the following attributes\n * @param params.batchGroupId The groupId of the batch request\n * @param params.additionalFilters The additional filters to apply to the original OData list binding\n * @returns The count\n */\nasync function getListBindingForCount(\n\ttable: Table,\n\tpageBindingContext: Context | null | undefined,\n\tparams: { batchGroupId?: string; additionalFilters?: Filter[]; itemKey?: string }\n): Promise<number> {\n\tconst oDataModel = table.getModel() as ODataModel;\n\tconst tableAPI = table.getParent() as TableAPI;\n\tconst filterInfo = tableUtils.getFilterInfo(table);\n\tconst filters = (Array.isArray(params.additionalFilters) ? params.additionalFilters : [])\n\t\t.concat(filterInfo.filters)\n\t\t.concat(tableUtils.getP13nFilters(table));\n\tconst bindingInfo = {\n\t\tpath: filterInfo.bindingPath ? filterInfo.bindingPath : tableAPI.getRowCollectionPath(),\n\t\tfilters: new Filter({\n\t\t\tfilters: filters,\n\t\t\tand: true\n\t\t})\n\t};\n\ttable\n\t\t.getParent()\n\t\t?.fireEvent(\"beforeRebindTable\", {\n\t\t\tcollectionBindingInfo: new CollectionBindingInfoAPI(bindingInfo),\n\t\t\tquickFilterKey: params.itemKey\n\t\t});\n\n\t// Need to pass by a temporary ListBinding in order to get $filter query option (as string) thanks to fetchFilter of OdataListBinding\n\tconst listBindingPath =\n\t\tpageBindingContext && !bindingInfo.path.startsWith(\"/\") ? `${pageBindingContext.getPath()}/${bindingInfo.path}` : bindingInfo.path;\n\tconst listBinding = oDataModel.bindList(listBindingPath, table.getBindingContext() as Context, [], bindingInfo.filters);\n\tconst stringFilters: string[] = await (listBinding as ODataListBinding & { fetchFilter: Function }).fetchFilter(\n\t\tlistBinding.getContext()\n\t);\n\tconst countBinding = oDataModel.bindProperty(`${listBinding.getPath()}/$count`, listBinding.getContext(), {\n\t\t$$groupId: params.batchGroupId ?? \"$auto\",\n\t\t$filter: stringFilters[0],\n\t\t$search: filterInfo.search ? CommonUtils.normalizeSearchTerm(filterInfo.search) : undefined\n\t});\n\tconst promiseValue = countBinding.requestValue();\n\tif (params.batchGroupId && params.batchGroupId !== \"$auto\") {\n\t\toDataModel.submitBatch(params.batchGroupId);\n\t}\n\tconst value = await promiseValue;\n\tcountBinding.destroy();\n\tlistBinding.destroy();\n\treturn value;\n}\nfunction getCountFormatted(iCount: number | string): string {\n\tconst oCountFormatter = NumberFormat.getIntegerInstance({ groupingEnabled: true });\n\treturn oCountFormatter.format(iCount);\n}\nfunction getFilterInfo(oTable: Table, ignoreProperties?: string[]): InternalBindingInfo {\n\tconst oTableDefinition = (oTable.getParent() as TableAPI).getTableDefinition();\n\tlet aIgnoreProperties: string[] = ignoreProperties || [];\n\n\tif (oTableDefinition.enableAnalytics) {\n\t\tif (!oTableDefinition.enableBasicSearch) {\n\t\t\t// Search isn't allow as a $apply transformation for this table\n\t\t\taIgnoreProperties = aIgnoreProperties.concat([\"search\"]);\n\t\t}\n\t\taIgnoreProperties = aIgnoreProperties.concat([\"$editState\"]);\n\t} else if (oTableDefinition.control.type === \"TreeTable\") {\n\t\taIgnoreProperties = aIgnoreProperties.concat([\"$editState\"]);\n\t}\n\treturn FilterUtils.getFilterInfo(oTable.getFilter(), {\n\t\tignoredProperties: aIgnoreProperties,\n\t\ttargetControl: oTable\n\t});\n}\n\n/**\n * Retrieves all filters configured in the personalization dialog of the table or chart.\n * @param oControl Table or Chart instance\n * @returns Filters configured in the personalization dialog of the table or chart\n * @private\n */\nfunction getP13nFilters(oControl: Table | MDCChart): Filter[] {\n\tconst p13nMode = oControl.getP13nMode();\n\tlet p13nProperties: TablePropertyInfo[] | PropertyInfo[] | undefined;\n\tif (p13nMode && p13nMode.includes(\"Filter\")) {\n\t\tif (oControl.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\t\tconst tableAPI = oControl.getParent() as TableAPI;\n\t\t\tp13nProperties = tableAPI.getEnhancedFetchedPropertyInfos().filter(function (property) {\n\t\t\t\treturn property?.filterable !== false;\n\t\t\t});\n\t\t} else {\n\t\t\tp13nProperties = (DelegateUtil.getCustomData<PropertyInfo[]>(oControl, \"sap_fe_ControlDelegate_propertyInfoMap\") || []).filter(\n\t\t\t\tfunction (oControlProperty: PropertyInfo) {\n\t\t\t\t\treturn oControlProperty && !(oControlProperty.filterable === false);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tconst filterInfo = FilterUtils.getFilterInfo(oControl as unknown as IFilterControl, {\n\t\t\tpropertiesMetadata: p13nProperties as PropertyInfo[]\n\t\t});\n\t\tif (filterInfo && filterInfo.filters) {\n\t\t\treturn filterInfo.filters;\n\t\t}\n\t}\n\treturn [];\n}\n\nfunction getAllFilterInfo(oTable: Table, ignoreProperties?: string[]): InternalBindingInfo {\n\tconst oIFilterInfo = tableUtils.getFilterInfo(oTable, ignoreProperties);\n\treturn {\n\t\tfilters: oIFilterInfo.filters.concat(getExternalFilters(oTable), tableUtils.getP13nFilters(oTable)),\n\t\tsearch: oIFilterInfo.search,\n\t\tbindingPath: oIFilterInfo.bindingPath\n\t};\n}\n\n/**\n * Find a value in an object.\n * @param obj The object to look into\n * @param key The key to search\n * @param list An array to return if obj is undefined\n * @returns Return an array of all keys content\n */\nfunction findValuesForKeyRecursively(obj: Record<string, unknown>, key: string, list: string[]): string[] {\n\tif (obj[key]) {\n\t\tlist.push(obj[key] as string);\n\t}\n\tconst children = Object.keys(obj);\n\tfor (const child of children) {\n\t\tif (typeof obj[child] === \"object\") {\n\t\t\tlist = list.concat(findValuesForKeyRecursively(obj[child] as Record<string, unknown>, key, []));\n\t\t}\n\t}\n\treturn list;\n}\n\n/**\n * Find a value into an object.\n * @param obj The object to look into\n * @param key The key to search\n * @returns Return an array of all keys content\n */\nfunction findValues(obj: Record<string, unknown>, key: string): string[] {\n\treturn findValuesForKeyRecursively(obj, key, []);\n}\n\n/**\n * Check all filter conditions for date types or sensitive data.\n * @param mdcTable Table or Chart instance\n * @param filterBar FilterBar\n * @returns True if one filter has a date type or a sensitive data\n */\nfunction isFilterEligibleForOptimisticBatch(mdcTable: Table, filterBar: FilterBar | undefined): boolean {\n\tif (!filterBar) {\n\t\treturn false;\n\t}\n\tconst filtersFromTable = tableUtils.getAllFilterInfo(mdcTable) as unknown as FilterInfo;\n\tconst filtersConditions = filterBar.getConditions();\n\tconst filtersConditionsPaths = Object.keys(filtersConditions);\n\tconst tableRowBindingsInfoPath = mdcTable.data(\"metaPath\");\n\tconst metaModel = mdcTable.getModel()?.getMetaModel();\n\tlet filterPropertiesAsPotentiallySensitiveDataOrDateType = false;\n\tconst filtersPathsFromTable = getFiltersPathsFromTable(tableRowBindingsInfoPath, filtersFromTable);\n\tconst filtersPathsFromFilterBar = getFiltersPathsFromFilterBar(tableRowBindingsInfoPath, filtersConditionsPaths);\n\tconst edmDateTypes = [\"Edm.Date\", \"Edm.DateTimeOffset\", \"Edm.TimeOfDay\"];\n\tconst allFiltersPaths = filtersPathsFromFilterBar.concat(filtersPathsFromTable);\n\tfor (const potentiallySensitiveAnnotation of allFiltersPaths) {\n\t\tif (\n\t\t\tmetaModel?.getObject(`${potentiallySensitiveAnnotation}@com.sap.vocabularies.PersonalData.v1.IsPotentiallySensitive`) ||\n\t\t\tmetaModel?.getObject(`${potentiallySensitiveAnnotation}@com.sap.vocabularies.PersonalData.v1.IsPotentiallyPersonal`)\n\t\t) {\n\t\t\tfilterPropertiesAsPotentiallySensitiveDataOrDateType = true;\n\t\t\tbreak;\n\t\t}\n\t\tif (edmDateTypes.includes(metaModel?.getObject(`${potentiallySensitiveAnnotation}/$Type`))) {\n\t\t\tfilterPropertiesAsPotentiallySensitiveDataOrDateType = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn filterPropertiesAsPotentiallySensitiveDataOrDateType;\n}\n\n/**\n * Returns the annotation paths of all filters of the Filter Bar.\n * @param tableRowBindingsInfoPath The table metaPath\n * @param filtersConditionsPaths The paths of all filters conditions\n * @returns An array of paths of all filters\n */\nfunction getFiltersPathsFromFilterBar(tableRowBindingsInfoPath: string, filtersConditionsPaths: string[]): string[] {\n\tconst filtersAnnotationsPaths: string[] = [];\n\tfor (const filterPath of filtersConditionsPaths) {\n\t\tfiltersAnnotationsPaths.push(`${tableRowBindingsInfoPath}/${filterPath}`);\n\t}\n\treturn filtersAnnotationsPaths;\n}\n\n/**\n * Returns the paths of all filters conditions.\n * @param filter The filter to get the paths\n * @returns An object containing paths conditions\n */\nfunction getReferencePathsForFilters(filter: Filter): Record<string, unknown> {\n\tconst filters = filter.getFilters();\n\tlet filterResult = {};\n\t// find all filters in multi filters\n\tif (filters) {\n\t\tfilterResult = getReferencePathsForFilters(filters[filters.length - 1]);\n\t\tfor (let i = filters.length - 2; i >= 0; i--) {\n\t\t\tfilterResult = {\n\t\t\t\tleft: getReferencePathsForFilters(filters[i]),\n\t\t\t\tright: filterResult\n\t\t\t};\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tpath: filter.getPath()\n\t\t};\n\t}\n\treturn filterResult;\n}\n\n/**\n * Returns the annotation paths of all table filters.\n * @param tableRowBindingsInfoPath The table metaPath\n * @param filters The filters to check for paths\n * @returns An array of paths of all filters\n */\nfunction getFiltersPathsFromTable(tableRowBindingsInfoPath: string, filters: FilterInfo): string[] {\n\tlet paths: string[];\n\tconst filtersAnnotationsPaths: string[] = [];\n\tfor (const filter of filters.filters) {\n\t\tpaths = findValues(getReferencePathsForFilters(filter), \"path\");\n\t\tfor (const filterPath of paths) {\n\t\t\tfiltersAnnotationsPaths.push(`${tableRowBindingsInfoPath}/${filterPath}`);\n\t\t}\n\t}\n\treturn filtersAnnotationsPaths;\n}\n\n/**\n * Returns a promise that is resolved with the table itself when the table was bound.\n * @param oTable The table to check for binding\n * @returns A Promise that will be resolved when table is bound\n */\nasync function whenBound(oTable: Table): Promise<Table> {\n\treturn _getOrCreateBoundPromiseInfo(oTable).promise;\n}\n\n/**\n * If not yet happened, it resolves the table bound promise.\n * @param oTable The table that was bound\n */\nfunction onTableBound(oTable: Table): void {\n\tconst oBoundPromiseInfo = _getOrCreateBoundPromiseInfo(oTable);\n\tif (oBoundPromiseInfo.resolve) {\n\t\toBoundPromiseInfo.resolve(oTable);\n\t\toTable.data(\"boundPromiseResolve\", null);\n\t}\n}\n\nfunction _getOrCreateBoundPromiseInfo(oTable: Table): { promise: Promise<Table>; resolve: Function } {\n\tif (!oTable.data(\"boundPromise\")) {\n\t\tlet fnResolve!: Function;\n\t\toTable.data(\n\t\t\t\"boundPromise\",\n\t\t\tnew Promise(function (resolve) {\n\t\t\t\tfnResolve = resolve;\n\t\t\t})\n\t\t);\n\t\tif ((oTable as unknown as { isBound?: () => boolean }).isBound?.()) {\n\t\t\tfnResolve(oTable);\n\t\t} else {\n\t\t\toTable.data(\"boundPromiseResolve\", fnResolve);\n\t\t}\n\t}\n\treturn { promise: oTable.data(\"boundPromise\"), resolve: oTable.data(\"boundPromiseResolve\") };\n}\n\nfunction updateFiltersForExternalID(metaModel: ODataMetaModel, filters: ConditionObject[], entityTypePath: string): void {\n\tfilters?.forEach((condition) => {\n\t\tconst nestedFilters = condition.getFilters();\n\n\t\tif (nestedFilters) {\n\t\t\tupdateFiltersForExternalID(metaModel, nestedFilters, entityTypePath);\n\t\t} else {\n\t\t\tconst externalIdPropPath = metaModel.getObject(entityTypePath + condition.sPath + \"@com.sap.vocabularies.Common.v1.ExternalID\")\n\t\t\t\t?.$Path;\n\t\t\tif (externalIdPropPath) {\n\t\t\t\tcondition.sPath = externalIdPropPath;\n\t\t\t}\n\t\t}\n\t});\n}\n\nconst tableUtils = {\n\tgetCountFormatted: getCountFormatted,\n\tgetHiddenFilters: getHiddenFilters,\n\tgetListBindingForCount: getListBindingForCount,\n\tgetFilterInfo: getFilterInfo,\n\tgetP13nFilters: getP13nFilters,\n\tgetAllFilterInfo: getAllFilterInfo,\n\tisFilterEligibleForOptimisticBatch: isFilterEligibleForOptimisticBatch,\n\twhenBound: whenBound,\n\tonTableBound: onTableBound,\n\tupdateFiltersForExternalID: updateFiltersForExternalID\n};\n\nexport default tableUtils;\n"],"mappings":"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","ignoreList":[]}