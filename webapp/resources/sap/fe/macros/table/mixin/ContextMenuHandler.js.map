{"version":3,"file":"ContextMenuHandler.js","names":["ContextMenuHandler","this","contextMenuActive","_exports","_proto","prototype","setupMixin","_baseClass","alignContextMenuWithTableToolbarChanges","table","contextMenu","getContextMenu","sortHelperForMenuItems","tableActions","getActions","forEach","tableAction","tableActionItem","getAggregation","_isActionSplit","_splitActionsInContextMenu","_isActionCombined","_combineActionInContextMenu","contextMenuItem","_getCorrespondingContextMenuAction","_alignTextAndVisiblityInContextMenu","push","length","menuItem","sortIndex","indexOfContextMenu","indexOfItem","removeItem","insertItem","hideAllContextMenuActionsExceptDelete","menuItems","getItems","deleteAction","find","action","getId","endsWith","deleteVisible","getAction","getVisible","includes","setVisible","actionItem","getMetadata","getName","dependents","getDependents","flexManagedObjectModels","filter","dependent","ManagedObjectModel","some","model","contextMenuItems","menuButton","_findOrCreateMenuButtonInContextMenu","actionItems","getMenu","toolBarAction","actionIdInContextMenu","data","actionIdInToolbar","replace","setText","getText","addItem","actionInSubMenu","_findActionInSubMenu","destroy","subMenu","splice","indexOf","undefined","newMenuButton","MenuItem","id","generate","text","i","item","subItems","subItem","index","tableActionVisibility","setContextMenuActive","active","isContextMenuActive","setCollaborationManagerMenuItemVisibility","contexts","collaborationManagerMenuItem","appComponent","CommonUtils","getAppComponent","collaborativeToolsService","getCollaborativeToolsService","collaborationOption","collaborationService","cmHelperService","getOptions","tableDefinition","getParent","getTableDefinition","navigationType","annotation","row","navigationInfo","type","view","getTargetView","collaborativeDraft","getController","metaModel","getModel","getMetaModel","isDraft","ModelHelper","isDraftSupported","getPath","visible","isCollaborationEnabled","context","getObject","IsActiveEntity","HasActiveEntity","FESRHelper","setSemanticStepname","_onContextMenuPress","oEvent","getSource","tableContexts","getSelectedContexts","contextMenuContext","getParameter","internalModelContext","getBindingContext","contextMenuSelection","getRelevantSelection","oneContextIsActive","isInactive","setProperty","activeSelectedContexts","oContext","onlyInActiveContextsSelected","isInlineCreationMode","getCreationMode","CreationMode","InlineCreationRows","navigableContexts","getLocalAnnotationModel","getProperty","routePath","visibleMenuItems","preventDefault","isExpandable","singleContext","isExpanded","isCollapsable","deleteHelper","updateDeleteInfoForSelectedContexts","navigationAvailableMap","TableRuntime","setIntentBasedNavigationEnablement","updatablePropertyPath","draft","readOnlyDraftEnabled","updatableContexts","selectedContext","isUpdatableContext","control","createEnablement","_updateCreateEnablement","nodeType","updateCutCopyPasteEnablement","updateMoveUpDownEnablement","ActionRuntime","setActionEnablement","JSON","parse","operationAvailableMap"],"sources":["./ContextMenuHandler.ts"],"sourcesContent":["import { type IInterfaceWithMixin } from \"sap/fe/base/ClassSupport\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { CreationMode } from \"sap/fe/core/converters/ManifestSettings\";\nimport deleteHelper from \"sap/fe/core/helpers/DeleteHelper\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport type TableAPI from \"sap/fe/macros/Table\";\nimport type Button from \"sap/m/Button\";\nimport type Menu from \"sap/m/Menu\";\nimport type MenuButton from \"sap/m/MenuButton\";\nimport MenuItem from \"sap/m/MenuItem\";\nimport ManagedObjectModel from \"sap/ui/fl/util/ManagedObjectModel\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport type { Table$BeforeOpenContextMenuEvent } from \"sap/ui/mdc/Table\";\nimport type ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport FESRHelper from \"sap/ui/performance/trace/FESRHelper\";\nimport type { ITableBlock } from \"../TableAPI\";\nimport TableRuntime from \"../TableRuntime\";\n\nexport default class ContextMenuHandler implements IInterfaceWithMixin {\n\tprotected contextMenuActive = false;\n\n\tsetupMixin(_baseClass: Function): void {\n\t\t// This method is needed to implement interface IInterfaceWithMixin\n\t}\n\n\t/**\n\t * Align context menu with the table actions by RTA changes in table toolbar.\n\t * @param table The table with bound table actions\n\t */\n\talignContextMenuWithTableToolbarChanges(table: MDCTable): void {\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst sortHelperForMenuItems: MenuItem[] = [];\n\t\tconst tableActions = table.getActions();\n\t\ttableActions?.forEach((tableAction) => {\n\t\t\tconst tableActionItem = tableAction.getAggregation(\"action\") as Button;\n\t\t\t// Check if the action item has been split by RTA\n\t\t\tif (this._isActionSplit(tableActionItem)) {\n\t\t\t\t// Remove original menu item and add sub items as new menu items\n\t\t\t\tthis._splitActionsInContextMenu(tableActionItem, contextMenu);\n\t\t\t}\n\t\t\t// Check if the action item has been created by combining the two actions\n\t\t\tif (this._isActionCombined(tableActionItem)) {\n\t\t\t\tthis._combineActionInContextMenu(tableActionItem as unknown as MenuButton, contextMenu, table);\n\t\t\t}\n\t\t\tconst contextMenuItem = this._getCorrespondingContextMenuAction(tableActionItem, contextMenu);\n\t\t\tif (contextMenuItem) {\n\t\t\t\tthis._alignTextAndVisiblityInContextMenu(tableActionItem, contextMenuItem, tableAction as ActionToolbarAction);\n\t\t\t\tsortHelperForMenuItems.push(contextMenuItem);\n\t\t\t}\n\t\t});\n\t\t// Align the order of context-menuItems with bound table actions\n\t\tif (sortHelperForMenuItems.length) {\n\t\t\tsortHelperForMenuItems.forEach((menuItem, sortIndex) => {\n\t\t\t\tconst indexOfContextMenu = contextMenu.indexOfItem(menuItem);\n\t\t\t\tif (indexOfContextMenu !== sortIndex) {\n\t\t\t\t\tcontextMenu.removeItem(menuItem);\n\t\t\t\t\tcontextMenu.insertItem(menuItem, sortIndex);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Hide all context menu actions except delete.\n\t * @param table The MDCTable\n\t */\n\thideAllContextMenuActionsExceptDelete(table: MDCTable): void {\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst menuItems = contextMenu.getItems();\n\t\tconst deleteAction = table.getActions().find((action) => action.getId().endsWith(\"StandardAction::Delete::ActionToolbarAction\"));\n\t\tconst deleteVisible = (deleteAction as ActionToolbarAction)?.getAction().getVisible() ?? true;\n\t\tmenuItems.forEach((menuItem) => {\n\t\t\t// Check if the menu item is the delete action\n\t\t\tif (menuItem.getId().includes(\"StandardAction::Delete::ContextMenu\")) {\n\t\t\t\tmenuItem.setVisible(deleteVisible);\n\t\t\t} else {\n\t\t\t\tmenuItem.setVisible(false);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Check if the action item has been created by a Combine RTA changes in the table toolbar.\n\t * @param actionItem The action to check\n\t * @returns True if the action item has been created by a Combine RTA changes in the table toolbar\n\t */\n\t_isActionCombined(actionItem: Button): boolean {\n\t\tif (actionItem.getMetadata().getName() === \"sap.m.MenuButton\") {\n\t\t\t// We don't have custom data attribute on the MenuButton created by RTA combine change\n\t\t\tconst dependents = actionItem.getDependents();\n\t\t\t// find all the dependents which are a Flex ManagedObjectModel\n\t\t\tconst flexManagedObjectModels = dependents.filter((dependent) => dependent instanceof ManagedObjectModel);\n\t\t\t// check if the name of one of them includes \"$sap.m.flexibility.MenuButtonModel\"\n\t\t\treturn flexManagedObjectModels.some((model) =>\n\t\t\t\t(model as unknown as ManagedObjectModel).getName().includes(\"$sap.m.flexibility.MenuButtonModel\")\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Combine the actions in the context menu to align with the table action toolbar.\n\t * @param actionItem The action item to split\n\t * @param contextMenu The context menu\n\t * @param table The MDCTable\n\t */\n\t_combineActionInContextMenu(actionItem: MenuButton, contextMenu: Menu, table: MDCTable): void {\n\t\tconst contextMenuItems = contextMenu.getItems();\n\t\t// Create a new menu button in the context menu if it does not exist\n\t\tconst menuButton = this._findOrCreateMenuButtonInContextMenu(actionItem, table);\n\t\tconst actionItems = actionItem.getMenu().getItems();\n\t\tfor (const action of actionItems) {\n\t\t\tconst toolBarAction = action;\n\t\t\t// now find the action in the context menu and remove it from the context menu\n\t\t\tfor (const menuItem of contextMenuItems) {\n\t\t\t\tconst actionIdInContextMenu = menuItem.data(\"actionId\");\n\t\t\t\tconst actionIdInToolbar = toolBarAction.data(\"actionId\");\n\t\t\t\tif (\n\t\t\t\t\tactionIdInContextMenu === actionIdInToolbar + \"::ContextMenu\" ||\n\t\t\t\t\tactionIdInContextMenu === actionIdInToolbar.replace(\"::ActionMenu\", \"::ContextMenu\")\n\t\t\t\t) {\n\t\t\t\t\tmenuItem.setText(toolBarAction.getText());\n\t\t\t\t\t// Add the action to the menu button\n\t\t\t\t\tcontextMenu.removeItem(menuItem);\n\t\t\t\t\tmenuButton.addItem(menuItem);\n\t\t\t\t}\n\t\t\t\t// If we find another menu in the context menu we check if the action is in the sub menu\n\t\t\t\tif (menuItem.getItems().length > 0 && !menuItem.getId().includes(actionItem.getId())) {\n\t\t\t\t\tconst actionInSubMenu = this._findActionInSubMenu(menuItem.getItems(), toolBarAction);\n\t\t\t\t\tif (actionInSubMenu) {\n\t\t\t\t\t\tactionInSubMenu.setText(toolBarAction.getText());\n\t\t\t\t\t\tmenuButton.addItem(actionInSubMenu);\n\t\t\t\t\t\tif (menuItem.getItems().length === 0) {\n\t\t\t\t\t\t\tmenuItem.destroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Finds the action in an action menu in the context menu, it return the action if found and removes it from the menu.\n\t * @param subMenu The array of actions in the menu\n\t * @param actionItem The action we are searching for\n\t * @returns The action if found, otherwise undefined\n\t */\n\t_findActionInSubMenu(subMenu: MenuItem[], actionItem: MenuItem): MenuItem | undefined {\n\t\tfor (const menuItem of subMenu) {\n\t\t\tif (\n\t\t\t\tmenuItem.data(\"actionId\") === actionItem.data(\"actionId\").replace(\"::ActionMenu\", \"::ContextMenu\") ||\n\t\t\t\tmenuItem.data(\"actionId\") === actionItem.data(\"actionId\") + \"::ContextMenu\"\n\t\t\t) {\n\t\t\t\tconst action = menuItem;\n\t\t\t\tsubMenu.splice(subMenu.indexOf(menuItem), 1);\n\t\t\t\treturn action;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Check's if a particular menu button exists in the context menu, if not creates a new menu button and adds it to the context menu.\n\t * @param actionItem The menu button to find or create\n\t * @param table The MDCTable\n\t * @returns The MenuItem if found, otherwise a new MenuItem\n\t */\n\t_findOrCreateMenuButtonInContextMenu(actionItem: MenuButton, table: MDCTable): MenuItem {\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst contextMenuItems = contextMenu.getItems();\n\t\t//loop over contextMenuItems and check if the required menu button already exists\n\t\tfor (const menuItem of contextMenuItems) {\n\t\t\tif (menuItem.getId().includes(actionItem.getId())) {\n\t\t\t\treturn menuItem;\n\t\t\t}\n\t\t}\n\t\t// if the required menu button does not exist, create a new menu button and add it to the contextMenu\n\t\tconst newMenuButton = new MenuItem({\n\t\t\tid: generate([table.getId(), actionItem.getId(), \"::ContextMenu\"]),\n\t\t\ttext: actionItem.getText()\n\t\t});\n\t\tcontextMenu.addItem(newMenuButton);\n\t\treturn newMenuButton;\n\t}\n\n\t/**\n\t * Split the action items in the context menu.\n\t * @param actionItem The action item to split\n\t * @param contextMenu The context menu\n\t */\n\t_splitActionsInContextMenu(actionItem: Button, contextMenu: Menu): void {\n\t\tconst menuItems = contextMenu.getItems();\n\t\tfor (let i = 0; i < menuItems.length; i++) {\n\t\t\t//check if the menu item is a Menu\n\t\t\tif (menuItems[i].getItems().length > 0) {\n\t\t\t\tif (\n\t\t\t\t\tmenuItems[i]\n\t\t\t\t\t\t.getItems()\n\t\t\t\t\t\t.some((item) => item.data(\"actionId\") === actionItem.data(\"actionId\").replace(\"::ActionMenu\", \"::ContextMenu\"))\n\t\t\t\t) {\n\t\t\t\t\tconst menuItem = menuItems[i];\n\t\t\t\t\tconst subItems = menuItem.getItems();\n\t\t\t\t\t// Remove the menuItem from the context menu\n\t\t\t\t\tcontextMenu.removeItem(menuItem);\n\t\t\t\t\t// Insert these sub-items into the contextMenu starting from the original index\n\t\t\t\t\tsubItems.forEach((subItem, index) => {\n\t\t\t\t\t\tcontextMenu.insertItem(subItem, i + index);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the corresponding context menu action for the table action.\n\t * @param tableAction The action item to split\n\t * @param contextMenu The context menu\n\t * @returns  MenuItem|null the corresponding context menu action or null if not found\n\t */\n\t_getCorrespondingContextMenuAction(tableAction: Button, contextMenu: Menu): MenuItem | null {\n\t\tconst menuItems = contextMenu.getItems();\n\t\tfor (const item of menuItems) {\n\t\t\t// the corresponding context menu action is either an item with an additional \"::ContextMenu\" text at the end of the id\n\t\t\t// or it is a splitted menu item where the \"::ContextMenu\" part is in the middle of the id\n\t\t\tif (\n\t\t\t\ttableAction.getId() + \"::ContextMenu\" === item.getId() ||\n\t\t\t\titem.data(\"actionId\") === tableAction.data(\"actionId\")?.replace(\"::ActionMenu\", \"::ContextMenu\")\n\t\t\t) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t\t// for combined actions, the context menu action is the one with the same text\n\t\t\tif (item.getId().includes(tableAction.getId())) {\n\t\t\t\treturn item;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Adjust the text and visibility of the action items in the context menu.\n\t * @param actionItem The action item to split\n\t * @param contextMenuItem The context menu\n\t * @param tableAction The array of table actions\n\t */\n\t_alignTextAndVisiblityInContextMenu(actionItem: Button, contextMenuItem: MenuItem, tableAction: ActionToolbarAction): void {\n\t\t// change the text of the menu item as the text of action item\n\t\tcontextMenuItem.setText(actionItem.getText());\n\t\t// change the visibility of the contextMenu action as the visibility of table action\n\t\tconst tableActionVisibility = actionItem.getVisible() && tableAction.getVisible();\n\t\tif (tableActionVisibility !== contextMenuItem.getVisible()) {\n\t\t\tcontextMenuItem.setVisible(tableActionVisibility);\n\t\t}\n\t}\n\n\t/**\n\t * Check if an action has been split by RTA.\n\t * @param actionItem The original action item\n\t * @returns Boolean indicating if the action has been split\n\t */\n\t_isActionSplit(actionItem: Button): boolean {\n\t\tif (actionItem.getMetadata().getName() === \"sap.m.MenuButton\") {\n\t\t\treturn false;\n\t\t}\n\t\tconst dependents = actionItem.getDependents();\n\t\t// find all the dependents which are a Flex ManagedObjectModel\n\t\tconst flexManagedObjectModels = dependents.filter((dependent) => dependent instanceof ManagedObjectModel);\n\t\t// check if one of them has the name \"$sap.m.flexibility.SplitButtonsModel\"\n\t\treturn flexManagedObjectModels.some(\n\t\t\t(model) => (model as unknown as ManagedObjectModel).getName() === \"$sap.m.flexibility.SplitButtonsModel\"\n\t\t);\n\t}\n\n\t/**\n\t * Sets a flag to indicate that a context menu item has been pressed.\n\t * @param active\n\t */\n\tsetContextMenuActive(active: boolean): void {\n\t\tthis.contextMenuActive = active;\n\t}\n\n\tisContextMenuActive(): boolean {\n\t\treturn this.contextMenuActive;\n\t}\n\n\t/**\n\t * Make the menu item of SAP Collaboration Manager visible if it is supported.\n\t * @param table\n\t * @param contexts\n\t */\n\tsetCollaborationManagerMenuItemVisibility(table: MDCTable, contexts: Context[]): void {\n\t\t// get collaboration menu item from context menu\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst menuItems = contextMenu.getItems();\n\t\tconst collaborationManagerMenuItem = menuItems?.find((menuItem) => menuItem.getId().includes(\"ContextMenu::CollaborationManager\"));\n\t\tif (collaborationManagerMenuItem) {\n\t\t\t// get collaboration option from collaborative tools service\n\t\t\tconst appComponent = CommonUtils.getAppComponent(table);\n\t\t\tconst collaborativeToolsService = appComponent?.getCollaborativeToolsService();\n\t\t\tconst collaborationOption = collaborativeToolsService?.collaborationService.cmHelperService?.getOptions();\n\t\t\t// get navigation info from table definition\n\t\t\tconst tableDefinition = (table?.getParent() as ITableBlock)?.getTableDefinition();\n\t\t\tconst navigationType = tableDefinition?.annotation?.row?.navigationInfo?.type;\n\t\t\tif (collaborationOption && navigationType === \"Navigation\" && contexts.length > 0) {\n\t\t\t\t// Items to share needs to have an active entity, if it's not Collaborative Draft or a non draft programming model\n\t\t\t\tconst view = CommonUtils.getTargetView(table);\n\t\t\t\tconst collaborativeDraft = view.getController().collaborativeDraft;\n\t\t\t\tconst metaModel = contexts[0].getModel()?.getMetaModel();\n\t\t\t\tconst isDraft = ModelHelper.isDraftSupported(metaModel, contexts[0].getPath());\n\t\t\t\t// If we are in Collaborative Draft or in an non-draft app, we set visible to true.\n\t\t\t\t// Otherwise we only set visible to true, if at least one of the selected contexts is or has an active version.\n\t\t\t\tconst visible =\n\t\t\t\t\tcollaborativeDraft.isCollaborationEnabled() || !isDraft\n\t\t\t\t\t\t? true\n\t\t\t\t\t\t: contexts.some((context) => context.getObject().IsActiveEntity || context.getObject().HasActiveEntity);\n\t\t\t\tcollaborationManagerMenuItem.setVisible(visible);\n\t\t\t\tFESRHelper.setSemanticStepname(collaborationManagerMenuItem, \"press\", \"CM:ShareLink\");\n\t\t\t} else {\n\t\t\t\tcollaborationManagerMenuItem.setVisible(false);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handler for the beforeOpenContextMenu event of the MDC Table.\n\t * @param oEvent\n\t */\n\t_onContextMenuPress(this: ITableBlock & ContextMenuHandler, oEvent: Table$BeforeOpenContextMenuEvent): void {\n\t\tconst table = oEvent.getSource(),\n\t\t\ttableContexts = table.getSelectedContexts() as Context[], // selected items in the table\n\t\t\tcontextMenuContext = oEvent.getParameter(\"bindingContext\") as Context, // row clicked for context menu\n\t\t\tinternalModelContext = this.getBindingContext(\"internal\") as InternalModelContext;\n\n\t\tconst contextMenuSelection = this.getRelevantSelection(tableContexts, contextMenuContext);\n\n\t\t// Check if all contexts in contextMenuSelection are inactive\n\t\t// if so, set the inactiveContext property in the internal model to true\n\t\t// if just one context is not inactive, set the inactiveContext property to false\n\t\tlet oneContextIsActive = true;\n\t\toneContextIsActive = contextMenuSelection.some((context) => !context.isInactive());\n\t\tinternalModelContext?.setProperty(\"contextmenu/inactiveContext\", !oneContextIsActive);\n\n\t\t// Do not consider empty rows as selected context, for other actions than delete\n\t\tconst activeSelectedContexts = contextMenuSelection.filter(function (oContext: Context) {\n\t\t\treturn !oContext.isInactive();\n\t\t});\n\t\tconst onlyInActiveContextsSelected = contextMenuSelection.length > 0 && activeSelectedContexts.length === 0;\n\t\tconst isInlineCreationMode =\n\t\t\t(table.getParent() as TableAPI & { getCreationMode: Function })?.getCreationMode().getName() ===\n\t\t\tCreationMode.InlineCreationRows;\n\t\tconst tableDefinition = this.getTableDefinition();\n\t\tconst navigableContexts = contextMenuSelection.filter(function (oContext: Context) {\n\t\t\treturn (\n\t\t\t\t!oContext.isInactive() &&\n\t\t\t\toContext\n\t\t\t\t\t.getModel()\n\t\t\t\t\t?.getLocalAnnotationModel()\n\t\t\t\t\t.getProperty(\n\t\t\t\t\t\t\"@$ui5.fe.virtual.routeNavigable-\" +\n\t\t\t\t\t\t\t(tableDefinition.annotation.row?.navigationInfo as { routePath?: string })?.routePath,\n\t\t\t\t\t\toContext\n\t\t\t\t\t) !== false\n\t\t\t);\n\t\t});\n\t\tinternalModelContext?.setProperty(\"contextmenu/selectedContextsIncludingInactive\", contextMenuSelection);\n\t\tinternalModelContext?.setProperty(\"contextmenu/selectedContexts\", activeSelectedContexts);\n\t\tinternalModelContext?.setProperty(\"contextmenu/navigableContexts\", navigableContexts);\n\t\t//reset number of selected contexts to ensure callback for custom enable handler\n\t\tinternalModelContext?.setProperty(\"contextmenu/numberOfSelectedContexts\", -1);\n\t\tinternalModelContext?.setProperty(\"contextmenu/numberOfNavigableContexts\", navigableContexts.length);\n\t\tinternalModelContext?.setProperty(\"contextmenu/numberOfSelectedContexts\", activeSelectedContexts.length);\n\t\tinternalModelContext?.setProperty(\"contextmenu/numberOfSelectedContextsForDelete\", contextMenuSelection.length);\n\n\t\tif (activeSelectedContexts.length > 0) {\n\t\t\t/* Align context menu with RTA changes in table toolbar */\n\t\t\tthis.alignContextMenuWithTableToolbarChanges(table);\n\t\t} else if (onlyInActiveContextsSelected && isInlineCreationMode) {\n\t\t\t// Only Delete is visible\n\t\t\tthis.hideAllContextMenuActionsExceptDelete(table);\n\t\t}\n\n\t\t// Set the visibility of the MenuItem for Collaboration Manager\n\t\tthis.setCollaborationManagerMenuItemVisibility(table, activeSelectedContexts);\n\n\t\t// Check if the context menu contains only not visible items\n\t\t// in that case prevent the context menu from opening\n\t\tconst contextMenu = table.getContextMenu() as Menu;\n\t\tconst menuItems = contextMenu.getItems();\n\n\t\tconst visibleMenuItems = menuItems.filter((menuItem) => menuItem.getVisible());\n\t\tif (visibleMenuItems.length === 0) {\n\t\t\toEvent.preventDefault();\n\t\t}\n\n\t\t// Enablement of the Expand/Collapse buttons\n\t\tconst isExpandable = contextMenuSelection.some((singleContext) => singleContext.isExpanded() !== undefined);\n\t\tconst isCollapsable = contextMenuSelection.some((singleContext) => singleContext.isExpanded());\n\t\tinternalModelContext?.setProperty(\"contextmenu/isExpandable\", isExpandable);\n\t\tinternalModelContext?.setProperty(\"contextmenu/isCollapsable\", isCollapsable);\n\n\t\t// Action enablement for Delete\n\t\tinternalModelContext?.setProperty(\"controlId\", table.getId());\n\t\tdeleteHelper.updateDeleteInfoForSelectedContexts(internalModelContext, contextMenuSelection, true);\n\n\t\t// Action enablement for IBN\n\t\tif (!table.data(\"enableAnalytics\")) {\n\t\t\tconst navigationAvailableMap = table?.data(\"navigationAvailableMap\");\n\t\t\tTableRuntime.setIntentBasedNavigationEnablement(internalModelContext, navigationAvailableMap, activeSelectedContexts, true);\n\t\t}\n\n\t\t// Action enablement for Mass Edit\n\t\tconst updatablePropertyPath = table?.data(\"updatablePropertyPath\");\n\t\tconst draft = table?.data(\"draft\");\n\t\tconst readOnlyDraftEnabled = table.data(\"displayModePropertyBinding\") === \"true\" && draft !== \"undefined\";\n\t\tconst updatableContexts: Context[] = [];\n\t\tfor (const selectedContext of activeSelectedContexts) {\n\t\t\tif (TableRuntime.isUpdatableContext(updatablePropertyPath, selectedContext, readOnlyDraftEnabled)) {\n\t\t\t\tupdatableContexts.push(selectedContext);\n\t\t\t}\n\t\t}\n\t\tinternalModelContext?.setProperty(\"contextmenu/updatableContexts\", updatableContexts);\n\n\t\tif (tableDefinition.control.createEnablement && contextMenuSelection.length === 1) {\n\t\t\tTableRuntime._updateCreateEnablement(\n\t\t\t\tinternalModelContext,\n\t\t\t\ttableDefinition.control.createEnablement,\n\t\t\t\ttable,\n\t\t\t\tcontextMenuSelection[0],\n\t\t\t\ttableDefinition.control.nodeType,\n\t\t\t\ttrue\n\t\t\t);\n\t\t}\n\n\t\tTableRuntime.updateCutCopyPasteEnablement(internalModelContext.getObject(), table, true);\n\t\tTableRuntime.updateMoveUpDownEnablement(internalModelContext.getObject(), table, true);\n\n\t\t// Other action enablement\n\t\tActionRuntime.setActionEnablement(\n\t\t\tinternalModelContext,\n\t\t\tJSON.parse(tableDefinition.operationAvailableMap),\n\t\t\tactiveSelectedContexts,\n\t\t\t\"table\",\n\t\t\ttrue\n\t\t);\n\t}\n\n\tgetRelevantSelection(tableContexts: Context[], contextMenuContext: Context): Context[] {\n\t\tlet contextMenuSelection: Context[];\n\t\tif (tableContexts.includes(contextMenuContext)) {\n\t\t\tcontextMenuSelection = tableContexts;\n\t\t} else {\n\t\t\tcontextMenuSelection = [contextMenuContext] as Context[];\n\t\t}\n\t\treturn contextMenuSelection;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}