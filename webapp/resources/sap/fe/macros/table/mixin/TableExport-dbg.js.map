{"version":3,"names":["TableExport","_exports","_proto","prototype","setupMixin","_baseClass","setTableBindingInfo","bindingInfo","tableBindingInfo","setDownloadUrl","downloadUrl","undefined","getTableDefinition","enableAnalytics","table","getContent","propertyHelper","getPropertyHelper","columnsExportSettings","mdcColumn","getColumns","concat","getColumnExportSettings","bindingParameters","collectionKeys","getDataModelObjectForMetaPath","metaPath","contextPath","targetEntityType","keys","map","key","name","selectProperties","column","Array","isArray","property","join","forEach","includes","push","requestAtLeastProperties","Object","requestAtLeast","prop","parameters","$search","$$aggregation","tableBinding","getRowBinding","downloadListBinding","getModel","bindList","getPath","getContext","sorter","filters","requestDownloadUrl","destroy","error","Log","debug","_onBeforeExport","exportEvent","isSplitMode","getParameter","splitCells","getSource","exportSettings","tableDefinition","updateExportSettings","columns","setStaticSizeLimit","exportColumns","workbook","index","length","exportColumn","resourceBundle","Library","getResourceBundleFor","label","getLocalizedText","translateBooleanValueForExport","setExportConfig","addTargetValueColumn","valueMap","JSON","parse","tableAPIDownloadUrl","getParent","dataSource","dataUrl","setFileAndSheetName","control","exportFileName","fileName","exportSheetName","context","sheetName","type","sizeLimit","exportRequestSize","trueValue","falseValue","getText","referencedColumn","find","propertyInfos","relativePath","toString","exportConfigList","targetValueColumn","isPropertyFromExport","columnWithTargetValueToBeAdded","columnToBeAdded","template","exportDataPointTargetValue","splice","columnExport","columnNeedsToBeAdded"],"sourceRoot":".","sources":["TableExport.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { type IInterfaceWithMixin } from \"sap/fe/base/ClassSupport\";\nimport { type TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport {\n\ttype AnnotationTableColumn,\n\ttype ColumnExportSettings,\n\ttype TableColumn\n} from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport { getLocalizedText } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport { type CollectionBindingInfo } from \"sap/fe/macros/CollectionBindingInfo\";\nimport Library from \"sap/ui/core/Lib\";\nimport type { TextAlign } from \"sap/ui/core/library\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport { type Table$BeforeExportEvent } from \"sap/ui/mdc/Table\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport { type ITableBlock } from \"../TableAPI\";\n\ntype ExportColumn = {\n\tproperty: string | string[];\n\tlabel: string;\n\tcolumnId?: string;\n\twidth?: number;\n\ttextAlign?: TextAlign;\n\tdisplayUnit?: boolean;\n\ttrueValue?: string;\n\tfalseValue?: string;\n\tvalueMap?: string;\n\ttemplate?: string;\n\ttype?: string;\n\tdelimiter?: boolean;\n\twrap?: boolean;\n\tunit?: string;\n\tscale?: number;\n};\n\ntype UserExportSettings = {\n\tsplitCells?: boolean;\n};\n\n// The type ExportSettings is not exported from \"sap/ui/export/library\" so we need to redefine them here\nexport type ExportSettings = {\n\tfileName?: string;\n\tdataSource: {\n\t\tdataUrl: string;\n\t\tsizeLimit?: number;\n\t};\n\tworkbook: {\n\t\tcolumns: ExportColumn[];\n\t\tcontext?: { sheetName?: string };\n\t};\n};\n\nexport default class TableExport implements IInterfaceWithMixin {\n\tdownloadUrl?: string;\n\n\ttableBindingInfo?: CollectionBindingInfo;\n\n\tsetupMixin(_baseClass: Function): void {\n\t\t// This method is needed to implement interface IInterfaceWithMixin\n\t}\n\n\t/**\n\t * Stores the binding info for the table used to create the list binding.\n\t * @param bindingInfo\n\t */\n\tsetTableBindingInfo(bindingInfo: CollectionBindingInfo): void {\n\t\tthis.tableBindingInfo = bindingInfo;\n\t}\n\n\t/**\n\t * Compute the download URL to be used by the export and store it in the TableAPI.\n\t * @param this\n\t * @returns Promise when downloadUrl is set\n\t */\n\tasync setDownloadUrl(this: ITableBlock & TableExport): Promise<void> {\n\t\t//empty the downloadUrl to prevent an invalid one to be used\n\t\tthis.downloadUrl = undefined;\n\n\t\tif (this.getTableDefinition().enableAnalytics === true) {\n\t\t\t// In case of an analytical table, $select is not supported, so we don't calculate the download URL (we use the default behaviour)\n\t\t\treturn;\n\t\t}\n\n\t\tlet downloadUrl: string | undefined | null;\n\t\tconst table = this.getContent();\n\t\ttry {\n\t\t\tconst propertyHelper = table.getPropertyHelper();\n\t\t\tlet columnsExportSettings: ExportColumn[] = [];\n\t\t\tfor (const mdcColumn of table.getColumns()) {\n\t\t\t\tcolumnsExportSettings = columnsExportSettings.concat(propertyHelper.getColumnExportSettings(mdcColumn));\n\t\t\t}\n\n\t\t\tconst bindingParameters: { $select?: string; $search?: string; $$aggregation?: object } = {};\n\t\t\t// we just want to request the properties necessary for the export\n\t\t\tconst collectionKeys = this.getDataModelObjectForMetaPath(this.metaPath, this.contextPath)?.targetEntityType.keys.map(\n\t\t\t\t(key) => key.name\n\t\t\t);\n\t\t\tconst selectProperties = columnsExportSettings.map((column: ExportColumn) => {\n\t\t\t\treturn Array.isArray(column.property) ? column.property.join(\",\") : column.property;\n\t\t\t});\n\t\t\tcollectionKeys?.forEach((key) => {\n\t\t\t\tif (!selectProperties.includes(key)) {\n\t\t\t\t\tselectProperties.push(key);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst requestAtLeastProperties = Object.keys(this.getTableDefinition().requestAtLeast);\n\t\t\trequestAtLeastProperties?.forEach((prop) => {\n\t\t\t\tif (!selectProperties.includes(prop)) {\n\t\t\t\t\tselectProperties.push(prop);\n\t\t\t\t}\n\t\t\t});\n\t\t\tbindingParameters[\"$select\"] = selectProperties.join(\",\");\n\n\t\t\tif (this.tableBindingInfo?.parameters?.$search) {\n\t\t\t\tbindingParameters.$search = this.tableBindingInfo.parameters.$search;\n\t\t\t}\n\n\t\t\tif (this.tableBindingInfo?.parameters?.$$aggregation) {\n\t\t\t\tbindingParameters.$$aggregation = this.tableBindingInfo.parameters.$$aggregation;\n\t\t\t}\n\n\t\t\tconst tableBinding = table.getRowBinding();\n\t\t\t// we create a list binding to compute the right url for the export from its binding parameters\n\t\t\tconst downloadListBinding = (tableBinding.getModel() as ODataModel).bindList(\n\t\t\t\ttableBinding.getPath(),\n\t\t\t\ttableBinding.getContext(),\n\t\t\t\tthis.tableBindingInfo?.sorter,\n\t\t\t\tthis.tableBindingInfo?.filters,\n\t\t\t\tbindingParameters\n\t\t\t);\n\t\t\tdownloadUrl = await downloadListBinding.requestDownloadUrl();\n\t\t\tdownloadListBinding.destroy();\n\t\t} catch (error: unknown) {\n\t\t\tLog.debug(\"Error while computing the download URL for the export\", error as Error);\n\t\t}\n\t\tif (downloadUrl) {\n\t\t\tthis.downloadUrl = downloadUrl;\n\t\t}\n\t}\n\n\t/**\n\t * Intercept the export before it's triggered to cover specific cases that couldn't be addressed on the propertyInfos for each column.\n\t * e.g. Fixed Target Value for the datapoints.\n\t * @param this\n\t * @param exportEvent\n\t */\n\t_onBeforeExport(this: ITableBlock & TableExport, exportEvent: Table$BeforeExportEvent): void {\n\t\tconst isSplitMode = (exportEvent.getParameter(\"userExportSettings\") as UserExportSettings)?.splitCells === true;\n\t\tconst table = exportEvent.getSource(),\n\t\t\texportSettings = exportEvent.getParameter(\"exportSettings\") as ExportSettings,\n\t\t\ttableDefinition = this.getTableDefinition();\n\n\t\tTableExport.updateExportSettings(exportSettings, tableDefinition, table, isSplitMode);\n\t}\n\n\t/**\n\t * Updates the table columns that can be exported.\n\t * @param exportSettings The table export settings\n\t * @param tableDefinition The table definition from the table converter\n\t * @param table The table\n\t * @param isSplitMode Defines if the export has been launched using split mode\n\t * @returns The updated columns to be exported\n\t */\n\tstatic updateExportSettings(\n\t\texportSettings: ExportSettings,\n\t\ttableDefinition: TableVisualization,\n\t\ttable: MDCTable,\n\t\tisSplitMode: boolean\n\t): ExportSettings {\n\t\tconst columns = tableDefinition.columns;\n\t\tthis.setStaticSizeLimit(tableDefinition, exportSettings);\n\t\tconst exportColumns = exportSettings.workbook.columns;\n\t\tfor (let index = exportColumns.length - 1; index >= 0; index--) {\n\t\t\tconst exportColumn = exportColumns[index];\n\t\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\")!;\n\t\t\texportColumn.label = getLocalizedText(exportColumn.label, table);\n\t\t\tthis.translateBooleanValueForExport(exportColumn, resourceBundle);\n\t\t\tif (isSplitMode) {\n\t\t\t\tthis.setExportConfig(columns, exportColumns, index);\n\t\t\t\tthis.addTargetValueColumn(columns, exportColumns, resourceBundle, index);\n\t\t\t}\n\t\t\tif (exportColumn.valueMap && typeof exportColumn.valueMap === \"string\") {\n\t\t\t\texportColumn.valueMap = JSON.parse(exportColumn.valueMap);\n\t\t\t}\n\t\t}\n\t\tconst tableAPIDownloadUrl = (table.getParent() as ITableBlock & TableExport).downloadUrl;\n\t\tif (tableAPIDownloadUrl) {\n\t\t\texportSettings.dataSource.dataUrl = tableAPIDownloadUrl;\n\t\t}\n\t\tthis.setFileAndSheetName(exportSettings, tableDefinition);\n\t\treturn exportSettings;\n\t}\n\n\t/**\n\t * Sets the file name and sheet name for the export settings.\n\t * @param exportSettings The table export settings\n\t * @param tableDefinition The table definition from the table converter\n\t */\n\tstatic setFileAndSheetName(exportSettings: ExportSettings, tableDefinition: TableVisualization): void {\n\t\tif (tableDefinition.control.exportFileName) {\n\t\t\texportSettings.fileName = tableDefinition.control.exportFileName;\n\t\t}\n\t\tif (tableDefinition.control.exportSheetName && exportSettings.workbook.context) {\n\t\t\texportSettings.workbook.context.sheetName = tableDefinition.control.exportSheetName;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the static size limit for the table export.\n\t * @param tableDefinition The table definition from the table converter\n\t * @param exportSettings The table export settings\n\t */\n\tstatic setStaticSizeLimit(tableDefinition: TableVisualization, exportSettings: ExportSettings): void {\n\t\tif (\n\t\t\t!tableDefinition.enableAnalytics &&\n\t\t\t(tableDefinition.control.type === \"ResponsiveTable\" || tableDefinition.control.type === \"GridTable\")\n\t\t) {\n\t\t\texportSettings.dataSource.sizeLimit = tableDefinition.control.exportRequestSize ?? 1000;\n\t\t} else if (tableDefinition.control.exportRequestSize) {\n\t\t\t// In case of analytical or tree table, the size limit is set to the one defined in the table definition\n\t\t\texportSettings.dataSource.sizeLimit = tableDefinition.control.exportRequestSize;\n\t\t}\n\t}\n\n\t/**\n\t * Sets the translated textual representation of a column with a Boolean value.\n\t * @param exportColumn The column to be exported\n\t * @param resourceBundle The resource bundle\n\t */\n\tstatic translateBooleanValueForExport(exportColumn: ExportColumn, resourceBundle: ResourceBundle): void {\n\t\tif (exportColumn.type === \"Boolean\" && !(exportColumn.trueValue || exportColumn.falseValue)) {\n\t\t\texportColumn.falseValue = resourceBundle.getText(\"no\");\n\t\t\texportColumn.trueValue = resourceBundle.getText(\"yes\");\n\t\t}\n\t}\n\n\t/**\n\t * Sets the originating export config of a single property referenced on a field group or a custom column.\n\t * @param columns The columns from the table converter\n\t * @param exportColumns The list of columns to be exported\n\t * @param index The index of the column to be exported\n\t */\n\tstatic setExportConfig(columns: TableColumn[], exportColumns: ExportColumn[], index: number): void {\n\t\tconst referencedColumn = columns.find(\n\t\t\t(column) => !column.propertyInfos && (column as AnnotationTableColumn).relativePath === exportColumns[index].property.toString()\n\t\t);\n\t\tif (referencedColumn?.exportSettings) {\n\t\t\t// All export settings of a column to be exported can't be added to the export settings object\n\t\t\t// because column could have units/timezones/currencies that aren't required on custom customs but only on columns from annotations\n\t\t\tconst exportConfigList: Array<keyof ColumnExportSettings> = [\"scale\", \"delimiter\", \"format\", \"utc\", \"type\", \"inputFormat\"];\n\t\t\tfor (const key of exportConfigList) {\n\t\t\t\tif (referencedColumn.exportSettings[key]) {\n\t\t\t\t\texportColumns[index] = { ...exportColumns[index], ...{ [key]: referencedColumn.exportSettings[key] } };\n\t\t\t\t\tif (exportColumns[index].type === \"Currency\") {\n\t\t\t\t\t\texportColumns[index].type = \"Number\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds a target value column when there is a datapoint column.\n\t * @param columns The columns from the table converter\n\t * @param exportColumns The list of columns to be exported\n\t * @param resourceBundle The resource bundle\n\t * @param index The index of the column to be exported\n\t */\n\tstatic addTargetValueColumn(\n\t\tcolumns: TableColumn[],\n\t\texportColumns: ExportColumn[],\n\t\tresourceBundle: ResourceBundle,\n\t\tindex: number\n\t): void {\n\t\tconst targetValueColumn = (columns as AnnotationTableColumn[])?.find((column) => {\n\t\t\tif (!this.isPropertyFromExport(column, exportColumns[index])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn this.columnWithTargetValueToBeAdded(column, exportColumns[index]);\n\t\t});\n\t\tif (targetValueColumn) {\n\t\t\tconst columnToBeAdded: ExportColumn = {\n\t\t\t\tlabel: resourceBundle.getText(\"TargetValue\"),\n\t\t\t\tproperty: Array.isArray(exportColumns[index].property)\n\t\t\t\t\t? exportColumns[index].property\n\t\t\t\t\t: ([exportColumns[index].property] as string[]),\n\t\t\t\ttemplate: targetValueColumn.exportDataPointTargetValue\n\t\t\t};\n\t\t\texportColumns.splice(index + 1, 0, columnToBeAdded);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the column's property corresponds to the exportColumn.\n\t * @param column The column from the annotations column\n\t * @param exportColumn The column to be exported\n\t * @returns `true` Whether the column has the exportColumn property\n\t */\n\tstatic isPropertyFromExport(column: AnnotationTableColumn, exportColumn: ExportColumn): boolean {\n\t\tif (\n\t\t\tcolumn.relativePath === exportColumn.property ||\n\t\t\texportColumn.property.includes(column.relativePath) ||\n\t\t\texportColumn.property.includes(column.name)\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\t// In case of complex properties\n\t\tif (column.propertyInfos?.length === 1 && exportColumn.property[0] === column.propertyInfos[0]) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Defines if a column that is to be exported and contains a DataPoint with a fixed target value needs to be added.\n\t * @param column The column from the annotations column\n\t * @param columnExport The column to be exported\n\t * @returns `true` if the referenced column has defined a targetValue for the dataPoint, false else\n\t * @private\n\t */\n\tstatic columnWithTargetValueToBeAdded(column: AnnotationTableColumn, columnExport: ExportColumn): boolean {\n\t\tlet columnNeedsToBeAdded = false;\n\t\tif (column.exportDataPointTargetValue && column.propertyInfos?.length === 1) {\n\t\t\t//Add TargetValue column when exporting on split mode\n\t\t\t// part of a FieldGroup or from a lineItem or from a column on the entitySet\n\t\t\tdelete columnExport.template;\n\t\t\tcolumnNeedsToBeAdded = true;\n\t\t}\n\t\treturn columnNeedsToBeAdded;\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"TableExport-dbg.js"}