{"version":3,"names":["EmptyRowsHandler","_exports","_proto","prototype","setupMixin","_baseClass","_onFieldLiveChange","ui5Event","field","getSource","bindingContext","getBindingContext","binding","getBinding","isInactive","table","getContent","createEmptyRows","_handleCreateActivate","activateEvent","activatedContext","getParameter","validateEmptyRow","preventDefault","transientPath","getPath","view","CommonUtils","getTargetView","controller","getController","editFlow","created","Promise","resolve","onAfterCreate","context","e","Log","warning","content","collaborativeDraft","send","action","Activity","Create","updateLocksForContextPath","error","getDefaultValuesFunction","listBinding","model","getModel","metaModel","getMetaModel","metaContext","getMetaContext","getResolvedPath","listBindingObjectPath","getInvolvedDataModelObjects","defaultFuncOnTargetObject","targetObject","annotations","Common","DefaultValuesFunction","defaultFuncOnTargetEntitySet","targetEntitySet","setEmptyRowsEnabled","enablement","setProperty","navigationPath","data","appComponent","getAppComponent","getRowBinding","defaultValuesFunction","undefined","getSideEffectsService","registerTargetCallback","updateEmptyRows","bind","deregisterTargetCallback","tableDefaultsPromise","then","tableDefaultData","setUpEmptyRows","catch","bindingHeaderContext","getHeaderContext","isResolved","isLengthFinal","contextPath","_deleteEmptyRows","_validateAndRetrieveBinding","getTableDefinition","control","creationMode","CreationMode","InlineCreationRows","uiModel","getProperty","watchBinding","bindProperty","fnHandler","detachChange","destroy","attachChange","getTableDefaults","TransactionHelper","getDataFromDefaultValueFunction","createButtonWasPressed","arguments","length","emptyRowsEnabled","removeEmptyRowsMessages","getIsEditable","inlineCreationRowsHiddenInEditMode","inactiveContext","getAllCurrentContexts","find","startsWith","delete","getInactiveContextNumber","filter","requiredProperties","annotation","missingProperties","requiredProperty","getObject","resourceBundle","Library","getResourceBundleFor","messages","displayedColumn","missingProperty","errorMessage","missingColumn","columns","tableColumn","relativePath","propertyInfos","includes","getText","getColumns","mdcColumn","getPropertyKey","name","getHeader","label","push","Message","message","processor","type","MessageType","Error","technical","persistent","technicalDetails","tableId","getId","emptyRowMessage","target","Messaging","addMessages","inactiveContexts","removeMessages","getMessageModel","getData","msg","getTechnicalDetails","contextMatches","Array","isArray","some","getTargets","value","recreateOneRow","newInlineCreationRowFromPaste","forceCreateatEnd","defaultValueFunctionData","inlineCreationRowCount","creatingEmptyRows","from","atEnd","inactive","dataForCreate","contexts","createMultipleDocuments","onBeforeCreate","requestSideEffectsForNavigationProperty","forEach","canceled"],"sourceRoot":".","sources":["EmptyRowsHandler.ts"],"sourcesContent":["import type { EntitySet, NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport type { DefaultValuesFunction } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport Log from \"sap/base/Log\";\nimport { type IInterfaceWithMixin } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport { Activity } from \"sap/fe/core/controllerextensions/collaboration/CollaborationCommon\";\nimport TransactionHelper from \"sap/fe/core/controllerextensions/editFlow/TransactionHelper\";\nimport { CreationMode } from \"sap/fe/core/converters/ManifestSettings\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport type MDCColumn from \"sap/ui/mdc/table/Column\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type { ContextErrorType } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport { type ITableBlock } from \"../TableAPI\";\n\nexport default class EmptyRowsHandler implements IInterfaceWithMixin {\n\tcreatingEmptyRows?: boolean;\n\n\t/**\n\t * Promise that resolves to the table's default values.\n\t */\n\tpublic tableDefaultsPromise?: Promise<object>;\n\n\tsetupMixin(_baseClass: Function): void {\n\t\t// This method is needed to implement interface IInterfaceWithMixin\n\t}\n\n\t/**\n\t * Handler for the onFieldLiveChange event.\n\t * @param ui5Event The event object passed by the onFieldLiveChange event\n\t */\n\t_onFieldLiveChange(this: ITableBlock & EmptyRowsHandler, ui5Event: UI5Event<{}, Control>): void {\n\t\tconst field = ui5Event.getSource(),\n\t\t\tbindingContext = field.getBindingContext() as Context,\n\t\t\tbinding = bindingContext.getBinding();\n\t\t// creation of a new inactive row if relevant\n\t\tif (bindingContext.isInactive()) {\n\t\t\tconst table = this?.getContent();\n\t\t\tthis?.createEmptyRows(binding as ODataListBinding, table, true);\n\t\t}\n\t}\n\n\t/**\n\t * Handles the CreateActivate event from the ODataListBinding.\n\t * @param activateEvent The event sent by the binding\n\t */\n\tasync _handleCreateActivate(\n\t\tthis: ITableBlock & EmptyRowsHandler,\n\t\tactivateEvent: UI5Event<{ context: Context }, ODataListBinding>\n\t): Promise<void> {\n\t\tconst activatedContext = activateEvent.getParameter(\"context\");\n\t\t// we start by asking to recreate an empty row (if live change has already done it this won't have any effect)\n\t\t// but we do not wait\n\t\tthis.createEmptyRows(activateEvent.getSource(), this.getContent(), true);\n\t\tif (!this.validateEmptyRow(activatedContext)) {\n\t\t\tactivateEvent.preventDefault();\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tconst transientPath = activatedContext.getPath(),\n\t\t\t\tview = CommonUtils.getTargetView(this),\n\t\t\t\tcontroller = view.getController(),\n\t\t\t\teditFlow = controller.editFlow;\n\t\t\ttry {\n\t\t\t\tawait (activatedContext.created() ?? Promise.resolve());\n\t\t\t\tawait editFlow.onAfterCreate({ context: activatedContext });\n\t\t\t} catch (e) {\n\t\t\t\tLog.warning(`Failed to activate context ${activatedContext.getPath()}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst content = activatedContext.getPath();\n\t\t\tconst collaborativeDraft = view.getController().collaborativeDraft;\n\t\t\t// Send notification to other users only after the creation has been finalized\n\t\t\tcollaborativeDraft.send({ action: Activity.Create, content });\n\t\t\t// Since the path of the context has changed during activation, we need to update all collaboration locks\n\t\t\t// that were using the transient path\n\t\t\tcollaborativeDraft.updateLocksForContextPath(transientPath, activatedContext.getPath());\n\t\t} catch (error) {\n\t\t\tLog.error(\"Failed to activate new row -\", error as Error);\n\t\t}\n\t}\n\n\t/**\n\t * Get the default values from the DefaultValues function.\n\t * @param listBinding The current list binding\n\t * @returns The DefaultValues function (or undefined if no function is found)\n\t */\n\tgetDefaultValuesFunction(listBinding: ODataListBinding): DefaultValuesFunction | undefined {\n\t\tconst model = listBinding.getModel();\n\t\tconst metaModel = model.getMetaModel();\n\t\tconst metaContext = metaModel.getMetaContext(listBinding.getResolvedPath() as string);\n\t\tconst listBindingObjectPath = getInvolvedDataModelObjects(metaContext);\n\n\t\tconst defaultFuncOnTargetObject = (listBindingObjectPath.targetObject as NavigationProperty | EntitySet).annotations.Common\n\t\t\t?.DefaultValuesFunction;\n\t\tconst defaultFuncOnTargetEntitySet = (listBindingObjectPath.targetEntitySet as EntitySet | undefined)?.annotations.Common\n\t\t\t?.DefaultValuesFunction;\n\n\t\treturn defaultFuncOnTargetObject ?? defaultFuncOnTargetEntitySet;\n\t}\n\n\t/**\n\t * EmptyRowsEnabled setter.\n\t * @param enablement\n\t */\n\tsetEmptyRowsEnabled(this: ITableBlock & EmptyRowsHandler, enablement: boolean): void {\n\t\tthis.setProperty(\"emptyRowsEnabled\", enablement);\n\t\tconst navigationPath = this.getContent().data().navigationPath,\n\t\t\tappComponent = CommonUtils.getAppComponent(this.getContent());\n\t\tif (enablement) {\n\t\t\tconst listBinding = this.getContent().getRowBinding();\n\t\t\tconst defaultValuesFunction = listBinding?.getResolvedPath() ? this.getDefaultValuesFunction(listBinding) : undefined;\n\t\t\tif (defaultValuesFunction) {\n\t\t\t\tappComponent.getSideEffectsService().registerTargetCallback(navigationPath, this.updateEmptyRows.bind(this));\n\t\t\t}\n\t\t} else {\n\t\t\tappComponent.getSideEffectsService().deregisterTargetCallback(navigationPath);\n\t\t}\n\n\t\tif (this.tableDefaultsPromise) {\n\t\t\tthis.tableDefaultsPromise\n\t\t\t\t.then((tableDefaultData) => {\n\t\t\t\t\tthis.setUpEmptyRows(this.getContent(), false, tableDefaultData);\n\t\t\t\t\treturn tableDefaultData;\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tLog.error(\"Error while setting up empty rows:\", error);\n\t\t\t\t});\n\t\t} else {\n\t\t\tthis.setUpEmptyRows(this.getContent());\n\t\t}\n\t}\n\n\t/**\n\t * Remove and recreate the empty rows in order to get any updated default values.\n\t *\n\t */\n\tasync updateEmptyRows(this: ITableBlock & EmptyRowsHandler): Promise<void> {\n\t\tconst table = this.getContent();\n\t\tconst binding = table.getRowBinding();\n\t\tconst bindingHeaderContext = binding.getHeaderContext();\n\t\tif (binding && binding.isResolved() && binding.isLengthFinal() && bindingHeaderContext) {\n\t\t\tconst contextPath = bindingHeaderContext.getPath();\n\t\t\tthis._deleteEmptyRows(binding, contextPath);\n\t\t\tawait this.createEmptyRows(binding, table);\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Helper function to perform common checks for table defaults and empty rows setup.\n\t * @param table The table being processed\n\t * @returns The binding object if checks pass, or undefined if checks fail\n\t */\n\tprivate async _validateAndRetrieveBinding(\n\t\tthis: ITableBlock & EmptyRowsHandler,\n\t\ttable: MDCTable\n\t): Promise<ODataListBinding | undefined> {\n\t\tif (this.getTableDefinition().control?.creationMode !== CreationMode.InlineCreationRows) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst uiModel = table.getModel(\"ui\") as JSONModel | undefined;\n\t\tif (!uiModel) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (uiModel.getProperty(\"/isEditablePending\")) {\n\t\t\t// Wait until the edit mode computation is complete\n\t\t\tconst watchBinding = uiModel.bindProperty(\"/isEditablePending\");\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tconst fnHandler = (): void => {\n\t\t\t\t\twatchBinding.detachChange(fnHandler);\n\t\t\t\t\twatchBinding.destroy();\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t\twatchBinding.attachChange(fnHandler);\n\t\t\t});\n\t\t}\n\n\t\tconst binding = table.getRowBinding() as ODataListBinding | undefined;\n\n\t\tif (!binding) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn binding;\n\t}\n\n\t/**\n\t * Gets the table defaults by validating and retrieving the binding, then fetching data from the DefaultValueFunction.\n\t * @param table The table being processed\n\t * @returns A promise that resolves to an object containing the default values, or undefined if no binding is available or the DefaultValueFunction returns no data\n\t */\n\tasync getTableDefaults(this: ITableBlock & EmptyRowsHandler, table: MDCTable): Promise<object | undefined> {\n\t\tconst binding = await this._validateAndRetrieveBinding(table);\n\t\tif (!binding) return undefined;\n\n\t\tconst appComponent = CommonUtils.getAppComponent(CommonUtils.getTargetView(table));\n\t\treturn appComponent ? TransactionHelper.getDataFromDefaultValueFunction(binding, appComponent) : undefined;\n\t}\n\n\tasync setUpEmptyRows(\n\t\tthis: ITableBlock & EmptyRowsHandler,\n\t\ttable: MDCTable,\n\t\tcreateButtonWasPressed = false,\n\t\ttableDefaultData = {}\n\t): Promise<void> {\n\t\tconst binding = await this._validateAndRetrieveBinding(table);\n\t\tif (!binding) {\n\t\t\treturn;\n\t\t}\n\t\tconst bindingHeaderContext = binding.getHeaderContext();\n\t\tif (binding && binding.isResolved() && binding.isLengthFinal() && bindingHeaderContext) {\n\t\t\tconst contextPath = bindingHeaderContext.getPath();\n\t\t\tif (!this.emptyRowsEnabled) {\n\t\t\t\tthis.removeEmptyRowsMessages();\n\t\t\t\treturn this._deleteEmptyRows(binding, contextPath);\n\t\t\t}\n\t\t\tif (!CommonUtils.getIsEditable(table)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tthis.getTableDefinition().control?.inlineCreationRowsHiddenInEditMode &&\n\t\t\t\t!table.getBindingContext(\"pageInternal\")?.getProperty(\"createMode\") &&\n\t\t\t\t!createButtonWasPressed\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inactiveContext = binding.getAllCurrentContexts().find(function (context) {\n\t\t\t\t// when this is called from controller code we need to check that inactive contexts are still relative to the current table context\n\t\t\t\treturn context.isInactive() && context.getPath().startsWith(contextPath);\n\t\t\t});\n\t\t\tif (!inactiveContext) {\n\t\t\t\tthis.removeEmptyRowsMessages();\n\t\t\t\tawait this.createEmptyRows(binding, table, false, undefined, false, tableDefaultData);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deletes inactive rows from the table listBinding.\n\t * @param binding\n\t * @param contextPath\n\t */\n\t_deleteEmptyRows(binding: ODataListBinding, contextPath: string): void {\n\t\tfor (const context of binding.getAllCurrentContexts()) {\n\t\t\tif (context.isInactive() && context.getPath().startsWith(contextPath)) {\n\t\t\t\tcontext.delete();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the current number of inactive contexts within the list binding.\n\t * @param binding Data list binding\n\t * @returns The number of inactive contexts\n\t */\n\tgetInactiveContextNumber(binding: ODataListBinding): number {\n\t\treturn binding.getAllCurrentContexts().filter((context) => context.isInactive()).length;\n\t}\n\n\t/**\n\t * Handles the validation of the empty row.\n\t * @param context The context of the empty row\n\t * @returns The validation status\n\t */\n\tvalidateEmptyRow(this: ITableBlock & EmptyRowsHandler, context: Context): boolean {\n\t\tconst requiredProperties = this.getTableDefinition().annotation.requiredProperties;\n\t\tif (requiredProperties?.length) {\n\t\t\tthis.removeEmptyRowsMessages(context);\n\t\t\tconst missingProperties = requiredProperties.filter((requiredProperty) => !context.getObject(requiredProperty));\n\t\t\tif (missingProperties.length) {\n\t\t\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.macros\")!;\n\t\t\t\tconst messages: Message[] = [];\n\t\t\t\tlet displayedColumn: MDCColumn | undefined;\n\t\t\t\tfor (const missingProperty of missingProperties) {\n\t\t\t\t\tlet errorMessage: string;\n\t\t\t\t\tconst missingColumn = this.getTableDefinition().columns.find(\n\t\t\t\t\t\t(tableColumn) =>\n\t\t\t\t\t\t\t(tableColumn as AnnotationTableColumn).relativePath === missingProperty ||\n\t\t\t\t\t\t\t(tableColumn.propertyInfos && tableColumn.propertyInfos.includes(missingProperty))\n\t\t\t\t\t);\n\n\t\t\t\t\tif (!missingColumn) {\n\t\t\t\t\t\terrorMessage = resourceBundle.getText(\"M_TABLE_EMPTYROW_MANDATORY\", [missingProperty]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisplayedColumn = this.getContent()\n\t\t\t\t\t\t\t.getColumns()\n\t\t\t\t\t\t\t.find((mdcColumn) => mdcColumn.getPropertyKey() === missingColumn.name);\n\t\t\t\t\t\terrorMessage = resourceBundle.getText(\n\t\t\t\t\t\t\tdisplayedColumn ? \"M_TABLE_EMPTYROW_MANDATORY\" : \"M_TABLE_EMPTYROW_MANDATORY_HIDDEN\",\n\t\t\t\t\t\t\t[displayedColumn?.getHeader() || missingColumn.label]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tmessages.push(\n\t\t\t\t\t\tnew Message({\n\t\t\t\t\t\t\tmessage: errorMessage,\n\t\t\t\t\t\t\tprocessor: this.getModel(),\n\t\t\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\t\t\ttechnical: false,\n\t\t\t\t\t\t\tpersistent: true,\n\t\t\t\t\t\t\ttechnicalDetails: {\n\t\t\t\t\t\t\t\ttableId: this.getContent().getId(), // Need to do it since handleCreateActivate can be triggered multiple times (extra properties set by value help) before controlIds are set on the message\n\t\t\t\t\t\t\t\temptyRowMessage: true,\n\t\t\t\t\t\t\t\tmissingColumn: displayedColumn ? undefined : missingProperty // needed to change the messageStrip message\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttarget: `${context?.getPath()}/${missingProperty}`\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tMessaging.addMessages(messages);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Removes the messages related to the empty rows.\n\t * @param inactiveContexts The contexts of the empty rows, if not provided, the messages of all empty rows are removed\n\t */\n\tremoveEmptyRowsMessages(this: ITableBlock & EmptyRowsHandler, inactiveContexts?: Context | Context[]): void {\n\t\tMessaging.removeMessages(\n\t\t\t(Messaging.getMessageModel().getData() as Message[]).filter((msg) => {\n\t\t\t\tconst technicalDetails = (msg.getTechnicalDetails() || {}) as { tableId?: string; emptyRowMessage?: boolean };\n\n\t\t\t\t// Check if msg target starts with any path in the inactiveContext array\n\t\t\t\tconst contextMatches = Array.isArray(inactiveContexts)\n\t\t\t\t\t? inactiveContexts.some((context) => msg.getTargets().some((value) => value.startsWith(context.getPath())))\n\t\t\t\t\t: !inactiveContexts || msg.getTargets().some((value) => value.startsWith(inactiveContexts.getPath()));\n\n\t\t\t\treturn contextMatches && technicalDetails.emptyRowMessage && technicalDetails.tableId === this.getContent().getId();\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Creation of inactive rows for the table in creation mode \"InlineCreationRows\".\n\t * @param binding Data list binding\n\t * @param table The table being edited\n\t * @param recreateOneRow `true` if the call is to recreate an emptyLine\n\t * @param newInlineCreationRowFromPaste Number of new inactive rows to be created\n\t * @param forceCreateatEnd `true` if the new row is to be created at the end of the table\n\t * @param defaultValueFunctionData Default values retrieved from the DefaultValuesFunction to be applied to the new rows\n\t * @returns A promise that resolves to the created contexts or void if the creation failed\n\t */\n\tasync createEmptyRows(\n\t\tthis: ITableBlock & EmptyRowsHandler,\n\t\tbinding: ODataListBinding,\n\t\ttable: MDCTable,\n\t\trecreateOneRow = false,\n\t\tnewInlineCreationRowFromPaste?: number,\n\t\tforceCreateatEnd = false,\n\t\tdefaultValueFunctionData?: object | undefined\n\t): Promise<void | Context[]> {\n\t\tconst inlineCreationRowCount = newInlineCreationRowFromPaste ?? (this.getTableDefinition().control?.inlineCreationRowCount || 1);\n\t\tif (this.creatingEmptyRows || this.getInactiveContextNumber(binding) > inlineCreationRowCount) {\n\t\t\treturn;\n\t\t}\n\t\tconst data = Array.from({ length: inlineCreationRowCount }, () => ({})),\n\t\t\tatEnd = table.data(\"tableType\") !== \"ResponsiveTable\",\n\t\t\tinactive = true,\n\t\t\tview = CommonUtils.getTargetView(table),\n\t\t\tcontroller = view.getController(),\n\t\t\teditFlow = controller.editFlow,\n\t\t\tappComponent = CommonUtils.getAppComponent(table);\n\n\t\tthis.creatingEmptyRows = true;\n\t\ttry {\n\t\t\tconst dataForCreate = recreateOneRow ? [{}] : data;\n\t\t\tconst contexts = await editFlow.createMultipleDocuments(\n\t\t\t\tbinding,\n\t\t\t\t// during a live change, only 1 new document is created\n\t\t\t\tdataForCreate,\n\t\t\t\t// When editing an empty row, the new empty row is to be created just below and not above\n\t\t\t\trecreateOneRow || forceCreateatEnd ? true : atEnd,\n\t\t\t\tfalse,\n\t\t\t\tcontroller.editFlow.onBeforeCreate,\n\t\t\t\tinactive,\n\t\t\t\tundefined,\n\t\t\t\tdefaultValueFunctionData\n\t\t\t);\n\t\t\tappComponent.getSideEffectsService().requestSideEffectsForNavigationProperty(binding.getPath(), view.getBindingContext());\n\t\t\tcontexts?.forEach(async function (context: Context) {\n\t\t\t\ttry {\n\t\t\t\t\tawait context.created();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!(error as ContextErrorType).canceled) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn contexts;\n\t\t} catch (e) {\n\t\t\tLog.error(e as string);\n\t\t} finally {\n\t\t\tthis.creatingEmptyRows = false;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"EmptyRowsHandler-dbg.js"}