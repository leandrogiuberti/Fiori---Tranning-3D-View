{"version":3,"names":["TableOptimisticBatch","_exports","_proto","prototype","setupMixin","_baseClass","enableOptimisticBatchMode","controller","getPageController","TableDelegate","setOptimisticBatchPromiseForModel","getContent","e","Log","warning","setupOptimisticBatch","table","filterBar","UI5Element","getElementById","getFilter","filterBarAPI","getView","getViewData","hideFilterBar","getParent","controllerExtension","extension","attachEvent","internalBindingContext","getBindingContext","setProperty","isA","undefined","getTableDefinition","control","disableRequestCache","attachEventOnce","pageReady","waitPageReady","detachEvent","setOptimisticBatchEnablerPromise","optimisticBatchEnablerPromiseObject","optimisticBatchEnablerPromise","getOptimisticBatchEnablerPromise","isOptimisticBatchDisabled"],"sourceRoot":".","sources":["TableOptimisticBatch.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport { type IInterfaceWithMixin } from \"sap/fe/base/ClassSupport\";\nimport type PromiseKeeper from \"sap/fe/core/helpers/PromiseKeeper\";\nimport TableDelegate from \"sap/fe/macros/table/delegates/TableDelegate\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type Control from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport type FilterBarAPI from \"../../filterBar/FilterBarAPI\";\nimport { type ITableBlock } from \"../TableAPI\";\n\nexport default class TableOptimisticBatch implements IInterfaceWithMixin {\n\tprivate optimisticBatchEnablerPromise?: PromiseKeeper<boolean>;\n\n\tsetupMixin(_baseClass: Function): void {\n\t\t// This method is needed to implement interface IInterfaceWithMixin\n\t}\n\n\t/**\n\t * Method to enable the optimistic batch mode for the table.\n\t */\n\tenableOptimisticBatchMode(this: ITableBlock): void {\n\t\ttry {\n\t\t\tconst controller = this.getPageController();\n\t\t\tTableDelegate.setOptimisticBatchPromiseForModel(controller, this);\n\t\t\tTableDelegate.enableOptimisticBatchMode(controller, this.getContent());\n\t\t} catch (e: unknown) {\n\t\t\tLog.warning(e as string);\n\t\t\t// An exception will be thrown when the user clicks go and the table data has already been loaded\n\t\t\t// (setOptimisticBatchPromiseForModel is not supposed to be called once a batch has laready been sent)\n\t\t\t// We just ignore this exception\n\t\t}\n\t}\n\n\t/**\n\t * Method to setup the optimistic batch mode for the table.\n\t * It attaches the search event to the filter bar and enables the optimistic batch mode before the initial load of the table.\n\t * @param this The table block\n\t */\n\tasync setupOptimisticBatch(this: ITableBlock): Promise<void> {\n\t\tconst table = this.getContent();\n\t\tconst controller = this.getPageController();\n\t\tif (!table || !controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst filterBar = UI5Element.getElementById(table?.getFilter()) as Control | undefined;\n\t\tconst filterBarAPI = controller.getView().getViewData()?.hideFilterBar !== true ? (filterBar?.getParent() as FilterBarAPI) : null;\n\t\tconst controllerExtension = controller.extension;\n\n\t\tfilterBarAPI?.attachEvent(\"search\", () => {\n\t\t\tconst internalBindingContext = table.getBindingContext(\"internal\");\n\t\t\tinternalBindingContext?.setProperty(\"searchFired\", true);\n\t\t});\n\n\t\tif (\n\t\t\tfilterBar &&\n\t\t\tcontroller.isA<ListReportController>(\"sap.fe.templates.ListReport.ListReportController\") &&\n\t\t\t(controllerExtension === undefined || this.getTableDefinition().control?.disableRequestCache === false)\n\t\t) {\n\t\t\tif (filterBarAPI) {\n\t\t\t\t//The handler above will be triggered only in case of a search event during the initialisation of the page.\n\t\t\t\t// it will be removed once the page is ready\n\t\t\t\tfilterBarAPI.attachEventOnce(\"search\", this.enableOptimisticBatchMode, this);\n\t\t\t\tawait controller.pageReady.waitPageReady();\n\t\t\t\tfilterBarAPI.detachEvent(\"search\", this.enableOptimisticBatchMode, this);\n\t\t\t} else {\n\t\t\t\tthis.enableOptimisticBatchMode();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Setter for the optimisticBatchEnablerPromise property.\n\t * @param optimisticBatchEnablerPromiseObject The Promise that is to be resolved by the V4 model\n\t */\n\tsetOptimisticBatchEnablerPromise(optimisticBatchEnablerPromiseObject: PromiseKeeper<boolean>): void {\n\t\tthis.optimisticBatchEnablerPromise = optimisticBatchEnablerPromiseObject;\n\t}\n\n\t/**\n\t * Getter for the optimisticBatchEnablerPromise property.\n\t * @returns The optimisticBatchEnablerPromise property.\n\t */\n\tgetOptimisticBatchEnablerPromise(): PromiseKeeper<boolean> | undefined {\n\t\treturn this.optimisticBatchEnablerPromise;\n\t}\n\n\t/**\n\t * Method to know if ListReport is configured with Optimistic batch mode disabled.\n\t * @returns Is Optimistic batch mode disabled\n\t */\n\tisOptimisticBatchDisabled(this: ITableBlock): boolean {\n\t\treturn this.getTableDefinition().control.disableRequestCache || false;\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"TableOptimisticBatch-dbg.js"}