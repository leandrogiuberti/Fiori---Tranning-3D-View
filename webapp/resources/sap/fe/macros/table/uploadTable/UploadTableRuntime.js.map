{"version":3,"file":"UploadTableRuntime.js","names":["UploadTableRuntime","uploadFile","uploadInfo","uploadSetItem","oItem","uploadSetTable","oSource","mdcTable","getParent","listBinding","getRowBinding","fileNamePath","getRowConfiguration","getFileNamePath","data","getFileName","newListEntity","create","internalContext","getBindingContext","uploadPromise","Promise","resolve","reject","setProperty","getId","containingView","CommonUtils","getTargetView","feController","FieldRuntimeHelper","getExtensionController","getController","editFlow","syncTask","created","uploadPath","getUploadUrl","uploadUrl","getProperty","replace","getPath","getCanonicalPath","setHeaderFields","getMediaType","setUploadUrl","error","this","onUploadFailed","String","uploadTable","displayMessageForFailedUpload","onUploadCompleted","event","item","getParameter","status","Number","uploadInstance","delete","context","hasPendingChanges","requestRefresh","onMediaTypeMismatch","getSource","givenType","acceptedTypes","getMediaTypes","showTypeMismatchDialog","onFileSizeExceeded","showFileSizeExceedDialog","getMaxFileSize","toString","onFileNameLengthExceeded","showFileNameLengthExceedDialog","getMaxFileNameLength"],"sources":["./UploadTableRuntime.ts"],"sourcesContent":["import CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport {\n\tdisplayMessageForFailedUpload,\n\tsetHeaderFields,\n\tshowFileNameLengthExceedDialog,\n\tshowFileSizeExceedDialog,\n\tshowTypeMismatchDialog\n} from \"sap/fe/macros/internal/helpers/Upload\";\nimport type UploadSetwithTable from \"sap/m/plugins/UploadSetwithTable\";\nimport type UploadItem from \"sap/m/upload/UploadItem\";\nimport type Event from \"sap/ui/base/Event\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport FieldRuntimeHelper from \"../../field/FieldRuntimeHelper\";\n\nconst UploadTableRuntime = {\n\t/**\n\t * Create a new instance and set the URL to upload the document.\n\t * @param uploadInfo Information sent by the UploadSet control\n\t * @param uploadInfo.oItem UploadItem with the file information\n\t * @param uploadInfo.oSource The UploadSetwithTable control\n\t * @returns A promise to be resolved with the uploadSetwithTableItem to be used to upload the document\n\t */\n\tasync uploadFile(uploadInfo: { oItem: UploadItem; oSource: UploadSetwithTable }): Promise<UploadItem> {\n\t\tconst uploadSetItem = uploadInfo.oItem,\n\t\t\tuploadSetTable = uploadInfo.oSource,\n\t\t\tmdcTable = uploadSetTable.getParent() as Table,\n\t\t\tlistBinding = mdcTable.getRowBinding(),\n\t\t\tfileNamePath = uploadSetTable.getRowConfiguration().getFileNamePath(),\n\t\t\tdata = fileNamePath ? { [fileNamePath]: uploadSetItem.getFileName() } : {},\n\t\t\tnewListEntity = listBinding.create(data, true);\n\n\t\ttry {\n\t\t\tconst internalContext = uploadSetTable.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\t// we have to add the upload process to the sync task to avoid the user can save without the upload being completed\n\t\t\tconst uploadPromise = new Promise<void>((resolve, reject): void => {\n\t\t\t\tinternalContext.setProperty(`UploadPromises/${uploadSetItem.getId()}`, { resolve: resolve, reject: reject });\n\t\t\t});\n\t\t\t// we also need to store the new entity to be able to retrieve it later\n\t\t\tinternalContext.setProperty(\"uploadInstance\", newListEntity);\n\t\t\tconst containingView = CommonUtils.getTargetView(uploadSetTable);\n\t\t\tconst feController = FieldRuntimeHelper.getExtensionController(containingView.getController());\n\t\t\tfeController.editFlow.syncTask(uploadPromise);\n\n\t\t\tawait newListEntity.created();\n\n\t\t\treturn await new Promise((resolve) => {\n\t\t\t\tconst uploadPath = uploadSetTable.getUploadUrl();\n\t\t\t\tlet uploadUrl = newListEntity.getProperty(uploadPath);\n\n\t\t\t\t// set upload url as canonical url for NavigationProperties\n\t\t\t\t// this is a workaround as some backends cannot resolve NavigationsProperties for stream types\n\t\t\t\tuploadUrl = uploadUrl.replace(newListEntity.getPath(), newListEntity.getCanonicalPath());\n\n\t\t\t\t// set header fields like etag and token\n\t\t\t\tsetHeaderFields(uploadSetItem, uploadSetItem.getMediaType(), newListEntity);\n\n\t\t\t\t// set the URL for PUT request\n\t\t\t\tuploadSetItem.setUploadUrl(uploadUrl);\n\t\t\t\tresolve(uploadSetItem);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tthis.onUploadFailed(uploadSetTable, uploadSetItem, String(error));\n\t\t\treturn Promise.reject(\"The new instance could not be created\");\n\t\t}\n\t},\n\n\t/**\n\t * Inform the user that the upload failed due to any technical reasons.\n\t * @param uploadTable\n\t * @param uploadSetItem\n\t * @param error The error message\n\t */\n\tonUploadFailed(uploadTable: UploadSetwithTable, uploadSetItem: UploadItem, error: string): void {\n\t\tdisplayMessageForFailedUpload(uploadTable, error);\n\t\t(uploadTable.getBindingContext(\"internal\") as InternalModelContext).getProperty(`UploadPromises/${uploadSetItem.getId()}`).reject();\n\t},\n\n\t/**\n\t * Refresh the instance after upload.\n\t * This ensures we retrieve the correct mime type determined by the backend.\n\t * @param event Sent by uploadTable control\n\t */\n\tasync onUploadCompleted(event: Event<{ item: UploadItem; status: string; responseText: string; response: string }>): Promise<void> {\n\t\tconst item = event.getParameter(\"item\"),\n\t\t\tstatus = Number(event.getParameter(\"status\")),\n\t\t\tinternalContext = item.getBindingContext(\"internal\") as InternalModelContext;\n\t\tif (status === 0 || status >= 400) {\n\t\t\tconst uploadTable = item.getParent() as UploadSetwithTable;\n\t\t\tconst error = event.getParameter(\"responseText\") || event.getParameter(\"response\");\n\t\t\tUploadTableRuntime.onUploadFailed(uploadTable, item, error);\n\t\t\tconst uploadInstance = internalContext.getProperty(\"uploadInstance\");\n\t\t\tif (uploadInstance) {\n\t\t\t\t// delete the upload instance so it disappears in the list\n\t\t\t\tawait uploadInstance.delete();\n\t\t\t}\n\t\t} else {\n\t\t\tconst context = item.getBindingContext() as ODataV4Context;\n\t\t\tif (context && !context.hasPendingChanges()) {\n\t\t\t\tawait context.requestRefresh();\n\t\t\t}\n\t\t\tinternalContext.getProperty(`UploadPromises/${item.getId()}`).resolve();\n\t\t}\n\t\tinternalContext.setProperty(\"uploadInstance\", null);\n\t},\n\n\t/**\n\t * Show an error dialog to the user if the file doesn't fit to the accepted media types.\n\t * @param event Sent by uploadTable control\n\t */\n\tonMediaTypeMismatch(event: Event<{ item: UploadItem }, UploadSetwithTable>): void {\n\t\tconst uploadTable = event.getSource();\n\t\tconst givenType = event.getParameter(\"item\").getProperty(\"mediaType\");\n\t\tconst acceptedTypes = uploadTable.getMediaTypes();\n\t\tshowTypeMismatchDialog(uploadTable, givenType, acceptedTypes);\n\t},\n\n\t/**\n\t * Show an error dialog to the user if the file exceeds the maximum file size.\n\t * @param event Sent by uploadTable control\n\t */\n\tonFileSizeExceeded(event: Event<{}, UploadSetwithTable>): void {\n\t\tconst uploadTable = event.getSource();\n\t\tshowFileSizeExceedDialog(uploadTable, uploadTable.getMaxFileSize().toString());\n\t},\n\n\t/**\n\t * Show an error dialog to the user if the file exceeds the maximum file size.\n\t * @param event Sent by uploadTable control\n\t */\n\tonFileNameLengthExceeded(event: Event<{}, UploadSetwithTable>): void {\n\t\tconst uploadTable = event.getSource();\n\t\tshowFileNameLengthExceedDialog(uploadTable, uploadTable.getMaxFileNameLength().toString());\n\t}\n};\nexport default UploadTableRuntime;\n"],"mappings":";;;;qTAgBA,MAAMA,EAAqB,CAQ1B,gBAAMC,CAAWC,GAChB,MAAMC,EAAgBD,EAAWE,MAChCC,EAAiBH,EAAWI,QAC5BC,EAAWF,EAAeG,YAC1BC,EAAcF,EAASG,gBACvBC,EAAeN,EAAeO,sBAAsBC,kBACpDC,EAAOH,EAAe,CAAEA,CAACA,GAAeR,EAAcY,eAAkB,CAAC,EACzEC,EAAgBP,EAAYQ,OAAOH,EAAM,MAE1C,IACC,MAAMI,EAAkBb,EAAec,kBAAkB,YAEzD,MAAMC,EAAgB,IAAIC,QAAc,CAACC,EAASC,KACjDL,EAAgBM,YAAY,kBAAkBrB,EAAcsB,UAAW,CAAEH,QAASA,EAASC,OAAQA,MAGpGL,EAAgBM,YAAY,iBAAkBR,GAC9C,MAAMU,EAAiBC,EAAYC,cAAcvB,GACjD,MAAMwB,EAAeC,EAAmBC,uBAAuBL,EAAeM,iBAC9EH,EAAaI,SAASC,SAASd,SAEzBJ,EAAcmB,UAEpB,aAAa,IAAId,QAASC,IACzB,MAAMc,EAAa/B,EAAegC,eAClC,IAAIC,EAAYtB,EAAcuB,YAAYH,GAI1CE,EAAYA,EAAUE,QAAQxB,EAAcyB,UAAWzB,EAAc0B,oBAGrEC,EAAgBxC,EAAeA,EAAcyC,eAAgB5B,GAG7Db,EAAc0C,aAAaP,GAC3BhB,EAAQnB,IAEV,CAAE,MAAO2C,GACRC,KAAKC,eAAe3C,EAAgBF,EAAe8C,OAAOH,IAC1D,OAAOzB,QAAQE,OAAO,wCACvB,CACD,EAQAyB,eAAeE,EAAiC/C,EAA2B2C,GAC1EK,EAA8BD,EAAaJ,GAC1CI,EAAY/B,kBAAkB,YAAqCoB,YAAY,kBAAkBpC,EAAcsB,WAAWF,QAC5H,EAOA,uBAAM6B,CAAkBC,GACvB,MAAMC,EAAOD,EAAME,aAAa,QAC/BC,EAASC,OAAOJ,EAAME,aAAa,WACnCrC,EAAkBoC,EAAKnC,kBAAkB,YAC1C,GAAIqC,IAAW,GAAKA,GAAU,IAAK,CAClC,MAAMN,EAAcI,EAAK9C,YACzB,MAAMsC,EAAQO,EAAME,aAAa,iBAAmBF,EAAME,aAAa,YACvEvD,EAAmBgD,eAAeE,EAAaI,EAAMR,GACrD,MAAMY,EAAiBxC,EAAgBqB,YAAY,kBACnD,GAAImB,EAAgB,OAEbA,EAAeC,QACtB,CACD,KAAO,CACN,MAAMC,EAAUN,EAAKnC,oBACrB,GAAIyC,IAAYA,EAAQC,oBAAqB,OACtCD,EAAQE,gBACf,CACA5C,EAAgBqB,YAAY,kBAAkBe,EAAK7B,WAAWH,SAC/D,CACAJ,EAAgBM,YAAY,iBAAkB,KAC/C,EAMAuC,oBAAoBV,GACnB,MAAMH,EAAcG,EAAMW,YAC1B,MAAMC,EAAYZ,EAAME,aAAa,QAAQhB,YAAY,aACzD,MAAM2B,EAAgBhB,EAAYiB,gBAClCC,EAAuBlB,EAAae,EAAWC,EAChD,EAMAG,mBAAmBhB,GAClB,MAAMH,EAAcG,EAAMW,YAC1BM,EAAyBpB,EAAaA,EAAYqB,iBAAiBC,WACpE,EAMAC,yBAAyBpB,GACxB,MAAMH,EAAcG,EAAMW,YAC1BU,EAA+BxB,EAAaA,EAAYyB,uBAAuBH,WAChF,GACC,OACaxE,CAAkB","ignoreList":[]}