{"version":3,"file":"ActionsTemplating.js","names":["getMenuItemForAction","dataField","action","menuItemAction","table","forContextMenu","collectionContext","parameters","annotationPath","undefined","actionContextPath","CommonHelper","getActionContext","metaModel","createBindingContext","actionContext","dataFieldDataModelObjectPath","MetaModelConverter","getInvolvedDataModelObjects","isBound","ActionTarget","isOperationAvailable","annotations","Core","OperationAvailable","valueOf","command","contextMenuText","pressHandler","handlerProvider","getDataFieldForActionButtonPressHandler","pressCommand","enabled","TableHelper","isDataFieldForActionEnabled","tableDefinition","Action","getObject","enableOnSelect","targetEntityType","control","analyticalConfiguration","aggregationOnLeafLevel","compileExpression","and","UI","isNodeLevelNavigable","resolveBindingString","itemId","generate","contentId","key","_jsx","MenuItem","text","Label","id","press","visible","children","customData","createCustomData","getMenuItemForIntentBasedNavigation","arguments","length","getDataFieldForIBNPressHandler","isDataFieldForIBNEnabled","collection","RequiresContext","NavigationAvailable","semanticObject","SemanticObject","getMenuItem","convertedMetadata","resolvePath","target","type","isDataFieldForAction","isActionShownInContextMenu","contextObjectPath","isDataFieldForIntentBasedNavigation","getManifestActionPressHandler","enabledForContextMenu","requiresSelection","getDataFieldButtonForAction","dataFieldActionContext","icon","isAIOperation","aiIcon","toolbarActionId","Button","ariaHasPopup","isActionWithDialog","ButtonType","Transparent","layoutData","OverflowToolbarLayoutData","priority","group","tableActionContextMenuId","getDataFieldButtonForIntentBasedNavigation","IBNData","getDataFieldButton","template","deepClone","ActionToolbarAction","getDefaultMenuButtonAction","defaultAction","dataFieldForDefaultAction","handler","e","getMenuButton","defaultActionHandlers","menuItems","menu","filter","map","item","menuId","MenuButton","menuPosition","Popup","Dock","BeginBottom","useDefaultActionOnly","buttonMode","MenuButtonMode","Split","Regular","Menu","menuItemsForContextMenu","forEach","push","items","getDefaultButton","getAction","getCopyAction","operationAvailable","ActionHelper","getNumberOfContextsExpression","equal","pathInModel","getCreateButton","standardAction","collectionEntity","suffixResourceKey","name","buttonText","getTranslatedText","createOutboundDetail","annotation","create","outboundDetail","enableUploadPlugin","ActionsPlaceholder","placeholderFor","getCreateMenu","values","nodeType","hasCustomCreateEnablement","createEnablement","allowedValue","index","modelName","isEnabled","notEqual","value","getCreateMenuItemPressHandler","getDeleteButton","getStandardAction","isTemplated","StandardActionKeys","Create","isInsertUpdateActionsTemplated","Delete","Cut","getCutButton","Copy","getCopyButton","Paste","getPasteButton","MassEdit","getMassEditButtonPressHandler","Insights","addCardToInsightsPress","MoveUp","MoveDown","getMoveUpDownButton","getActions","actionsWithOverflowProtection","ensurePrimaryActionNeverOverflows","actions","ActionType","Standard","_exports","getBasicSearch","useBasicSearch","filterBarId","_collectionIsDraftEnabled","isSearchable","label","BasicSearchMacro","useDraftEditState","getFullScreen","enableFullScreen","TableFullScreenButton","forMoveUp","tableType","getTableActionsTemplate","ModelHelper","isDraftNode","isDraftRoot","searchable","basicSearch","filterBar","fullScreen","getTableContextMenuTemplate","getExpandedCollapseActions","expandNode","collapseNode","expand","enableExpression"],"sources":["./ActionsTemplating.tsx"],"sourcesContent":["import type { Action } from \"@sap-ux/vocabularies-types/Edm\";\nimport type {\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldForIntentBasedNavigation\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\n\nimport type { EntitySet, NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { and, compileExpression, equal, notEqual, pathInModel, resolveBindingString } from \"sap/fe/base/BindingToolkit\";\nimport { ActionType } from \"sap/fe/core/converters/ManifestSettings\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport {\n\tisActionWithDialog,\n\tisDataFieldForAction,\n\tisDataFieldForIntentBasedNavigation\n} from \"sap/fe/core/converters/annotations/DataField\";\nimport type { AnnotationAction, BaseAction, CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport { ButtonType, aiIcon } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { CreateBehaviorExternal } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { StandardAction } from \"sap/fe/core/converters/controls/Common/table/StandardActions\";\nimport { StandardActionKeys } from \"sap/fe/core/converters/controls/Common/table/StandardActions\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport { createCustomData } from \"sap/fe/macros/TSXUtils\";\nimport type { CustomAndAction } from \"sap/fe/macros/chart/MdcChartTemplate\";\nimport type { TableBlockProperties, TableTemplatingParameters } from \"sap/fe/macros/table/MdcTableTemplate\";\nimport TableFullScreenButton from \"sap/fe/macros/table/TableFullScreenButton\";\nimport TableHelper from \"sap/fe/macros/table/TableHelper\";\nimport Button from \"sap/m/Button\";\nimport Menu from \"sap/m/Menu\";\nimport MenuButton from \"sap/m/MenuButton\";\nimport MenuItem from \"sap/m/MenuItem\";\nimport OverflowToolbarLayoutData from \"sap/m/OverflowToolbarLayoutData\";\nimport { MenuButtonMode } from \"sap/m/library\";\nimport ActionsPlaceholder from \"sap/m/upload/ActionsPlaceholder\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport Popup from \"sap/ui/core/Popup\";\nimport ActionToolbarAction from \"sap/ui/mdc/actiontoolbar/ActionToolbarAction\";\nimport type Context from \"sap/ui/model/Context\";\nimport ActionHelper from \"../internal/helpers/ActionHelper\";\nimport BasicSearchMacro from \"./BasicSearch\";\nimport type TableEventHandlerProvider from \"./TableEventHandlerProvider\";\n\n/**\n * Generates the MenuItem for the DataFieldForAction.\n * @param dataField DataField for action\n * @param action The name of the action\n * @param menuItemAction The menuItemAction to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param parameters\n * @returns The MenuItem\n */\nfunction getMenuItemForAction(\n\tdataField: DataFieldForAction,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\tmenuItemAction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\tparameters: TableTemplatingParameters\n): MenuItem | undefined {\n\tif (!menuItemAction.annotationPath) {\n\t\treturn undefined;\n\t}\n\tconst actionContextPath = CommonHelper.getActionContext(\n\t\tparameters.metaModel.createBindingContext(menuItemAction.annotationPath + \"/Action\")!\n\t);\n\tconst actionContext = parameters.metaModel.createBindingContext(actionContextPath)!;\n\tconst dataFieldDataModelObjectPath = actionContext\n\t\t? MetaModelConverter.getInvolvedDataModelObjects(actionContext, collectionContext)\n\t\t: undefined;\n\tconst isBound = dataField.ActionTarget?.isBound;\n\tconst isOperationAvailable = dataField.ActionTarget?.annotations?.Core?.OperationAvailable?.valueOf() !== false;\n\tconst command = !forContextMenu ? menuItemAction.command : menuItemAction.command + \"::ContextMenu\";\n\tconst contextMenuText = forContextMenu ? \"ContextMenu\" : \"ActionMenu\";\n\tconst pressHandler = menuItemAction.command\n\t\t? undefined\n\t\t: parameters.handlerProvider.getDataFieldForActionButtonPressHandler(dataField, menuItemAction, action, forContextMenu);\n\tconst pressCommand = menuItemAction.command ? `cmd:${command}|press` : undefined;\n\n\tlet enabled: string | boolean | CompiledBindingToolkitExpression =\n\t\tmenuItemAction.enabled !== undefined\n\t\t\t? menuItemAction.enabled\n\t\t\t: TableHelper.isDataFieldForActionEnabled(\n\t\t\t\t\ttable.tableDefinition,\n\t\t\t\t\tdataField.Action,\n\t\t\t\t\t!!isBound,\n\t\t\t\t\tactionContext.getObject(),\n\t\t\t\t\tmenuItemAction.enableOnSelect,\n\t\t\t\t\tdataFieldDataModelObjectPath?.targetEntityType,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\n\tif (table.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel && !!isBound) {\n\t\tenabled = compileExpression(and(UI.isNodeLevelNavigable, resolveBindingString(enabled)));\n\t}\n\tif (isBound !== true || isOperationAvailable) {\n\t\tconst itemId = generate([table.contentId, menuItemAction.key, action.key, contextMenuText, dataField, \"MenuItemForAction\"]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tid={itemId}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={menuItemAction.visible}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", itemId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\n/**\n * Generates the MenuItem for the DataFieldForIntentBasedNavigation.\n * @param dataField DataField for IntentBasedNavigation\n * @param menuItemAction The menuItemAction to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param action\n * @param handlerProvider\n * @returns The MenuItem\n */\nfunction getMenuItemForIntentBasedNavigation(\n\tdataField: DataFieldForIntentBasedNavigation,\n\tmenuItemAction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu = false,\n\tcollectionContext: Context,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\thandlerProvider: TableEventHandlerProvider\n): MenuItem {\n\tconst pressHandler = menuItemAction.command\n\t\t? undefined\n\t\t: handlerProvider.getDataFieldForIBNPressHandler(menuItemAction, forContextMenu);\n\tconst pressCommand = menuItemAction.command ? `cmd:${menuItemAction.command}|press` : undefined;\n\n\tconst enabled =\n\t\tmenuItemAction.enabled !== undefined\n\t\t\t? menuItemAction.enabled\n\t\t\t: TableHelper.isDataFieldForIBNEnabled(\n\t\t\t\t\t{\n\t\t\t\t\t\tcollection: collectionContext,\n\t\t\t\t\t\ttableDefinition: table.tableDefinition\n\t\t\t\t\t},\n\t\t\t\t\tdataField,\n\t\t\t\t\tdataField.RequiresContext,\n\t\t\t\t\tdataField.NavigationAvailable,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\tconst id = forContextMenu\n\t\t? generate([table.contentId, menuItemAction.key, action.key, dataField, \"MenuItemIntentBasedNavigation\", \"ContextMenu\"])\n\t\t: generate([table.contentId, menuItemAction.key, action.key, dataField, \"MenuItemIntentBasedNavigation\"]);\n\treturn (\n\t\t<MenuItem\n\t\t\ttext={dataField.Label}\n\t\t\tid={id}\n\t\t\tpress={pressHandler}\n\t\t\tjsx:command={pressCommand}\n\t\t\tenabled={enabled}\n\t\t\tvisible={menuItemAction.visible}\n\t\t>\n\t\t\t{{\n\t\t\t\tcustomData: [\n\t\t\t\t\t!dataField.RequiresContext\n\t\t\t\t\t\t? createCustomData(\"IBNData\", { semanticObject: dataField.SemanticObject, action: dataField.Action })\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tcreateCustomData(\"actionId\", id)\n\t\t\t\t]\n\t\t\t}}\n\t\t</MenuItem>\n\t);\n}\n\n/**\n * Generates the xml string for the MenuItem based on the type of the menuItemAction.\n * @param action The name of the action\n * @param menuItemAction The menuItemAction to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param parameters\n * @returns The xml string for the MenuItem\n */\nfunction getMenuItem(\n\taction: BaseAction | AnnotationAction | CustomAction,\n\tmenuItemAction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\tparameters: TableTemplatingParameters\n): MenuItem | undefined {\n\tconst dataField = menuItemAction.annotationPath\n\t\t? (parameters.convertedMetadata.resolvePath(menuItemAction.annotationPath).target as DataFieldAbstractTypes)\n\t\t: undefined;\n\n\tswitch (dataField && menuItemAction.type) {\n\t\tcase \"ForAction\":\n\t\t\tif (isDataFieldForAction(dataField)) {\n\t\t\t\tif (\n\t\t\t\t\t!forContextMenu ||\n\t\t\t\t\t(forContextMenu && TableHelper.isActionShownInContextMenu(menuItemAction, table.contextObjectPath))\n\t\t\t\t) {\n\t\t\t\t\treturn getMenuItemForAction(dataField, action, menuItemAction, table, forContextMenu, collectionContext, parameters);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"ForNavigation\":\n\t\t\tif (\n\t\t\t\tisDataFieldForIntentBasedNavigation(dataField!) &&\n\t\t\t\t(!forContextMenu || (forContextMenu && TableHelper.isActionShownInContextMenu(menuItemAction, table.contextObjectPath)))\n\t\t\t) {\n\t\t\t\treturn getMenuItemForIntentBasedNavigation(\n\t\t\t\t\tdataField,\n\t\t\t\t\tmenuItemAction,\n\t\t\t\t\ttable,\n\t\t\t\t\tforContextMenu,\n\t\t\t\t\tcollectionContext,\n\t\t\t\t\taction,\n\t\t\t\t\tparameters.handlerProvider\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\n\tconst command = !forContextMenu ? menuItemAction.command : menuItemAction.command + \"::ContextMenu\";\n\tconst pressHandler = menuItemAction.command\n\t\t? undefined\n\t\t: parameters.handlerProvider.getManifestActionPressHandler(menuItemAction as CustomAction, forContextMenu);\n\tconst pressCommand = menuItemAction.command ? `cmd:${command}|press` : undefined;\n\tlet enabled = !forContextMenu ? menuItemAction.enabled : (menuItemAction as CustomAction).enabledForContextMenu;\n\tif (\n\t\t(menuItemAction as CustomAction).requiresSelection &&\n\t\ttable.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel\n\t) {\n\t\tenabled = compileExpression(and(resolveBindingString(enabled ?? \"\"), UI.isNodeLevelNavigable));\n\t}\n\tconst contextMenuText = forContextMenu ? \"ContextMenu\" : \"ActionMenu\";\n\tconst itemId = generate([table.contentId, menuItemAction.key, contextMenuText, action.key, dataField, \"MenuItem\"]);\n\treturn (\n\t\t<MenuItem\n\t\t\tcore:require=\"{FPM: 'sap/fe/core/helpers/FPMHelper'}\"\n\t\t\ttext={menuItemAction?.text}\n\t\t\tid={itemId}\n\t\t\tpress={pressHandler}\n\t\t\tjsx:command={pressCommand}\n\t\t\tvisible={menuItemAction.visible}\n\t\t\tenabled={enabled}\n\t\t>\n\t\t\t{{\n\t\t\t\tcustomData: [createCustomData(\"actionId\", itemId)]\n\t\t\t}}\n\t\t</MenuItem>\n\t);\n}\n\n/**\n * Generates the control for the DataFieldForActionButton.\n * @param dataField DataField for action\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param parameters\n * @returns The control for the DataFieldForActionButton\n */\nfunction getDataFieldButtonForAction(\n\tdataField: DataFieldForAction,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\tparameters: TableTemplatingParameters\n): Button | MenuItem {\n\tconst dataFieldActionContext = parameters.metaModel.createBindingContext(action.annotationPath + \"/Action\")!;\n\tconst actionContextPath = CommonHelper.getActionContext(dataFieldActionContext);\n\tconst actionContext = parameters.metaModel.createBindingContext(actionContextPath)!;\n\tconst dataFieldDataModelObjectPath = actionContext\n\t\t? MetaModelConverter.getInvolvedDataModelObjects<Action>(actionContext, collectionContext)\n\t\t: undefined;\n\tconst isBound = dataField.ActionTarget?.isBound;\n\tconst command = !forContextMenu ? action.command : action.command + \"::ContextMenu\";\n\tconst pressHandler = action.command\n\t\t? undefined\n\t\t: parameters.handlerProvider.getDataFieldForActionButtonPressHandler(dataField, action, undefined, forContextMenu);\n\tconst pressCommand = action.command ? `cmd:${command}|press` : undefined;\n\tconst enabled =\n\t\taction.enabled !== undefined\n\t\t\t? action.enabled\n\t\t\t: TableHelper.isDataFieldForActionEnabled(\n\t\t\t\t\ttable.tableDefinition,\n\t\t\t\t\tdataField.Action,\n\t\t\t\t\t!!isBound,\n\t\t\t\t\tactionContext.getObject(),\n\t\t\t\t\taction.enableOnSelect,\n\t\t\t\t\tdataFieldDataModelObjectPath?.targetEntityType,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\tconst icon = action.isAIOperation === true ? aiIcon : undefined;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\tconst toolbarActionId = generate([table.contentId, dataField]);\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tid={toolbarActionId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\ticon={icon}\n\t\t\t\tariaHasPopup={isActionWithDialog(dataField)}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={action.visible}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", toolbarActionId)],\n\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t}}\n\t\t\t</Button>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\tconst tableActionContextMenuId = generate([table.contentId, dataField, \"ContextMenu\"]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={tableActionContextMenuId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\ticon={icon}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tenabled={enabled}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", tableActionContextMenuId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n}\n\n/**\n * Generates the control for the DataFieldForIntentBasedNavigation Button.\n * @param dataField DataField for IntentBasedNavigation\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param handlerProvider\n * @returns The control for the DataFieldForIntentBasedNavigation button/menu item\n */\nfunction getDataFieldButtonForIntentBasedNavigation(\n\tdataField: DataFieldForIntentBasedNavigation,\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\thandlerProvider: TableEventHandlerProvider\n): Button | MenuItem {\n\tconst command = !forContextMenu ? action.command : action.command + \"::ContextMenu\";\n\tconst pressHandler = action.command ? undefined : handlerProvider.getDataFieldForIBNPressHandler(action, forContextMenu);\n\tconst pressCommand = action.command ? `cmd:${command}|press` : undefined;\n\tconst enabled =\n\t\taction.enabled !== undefined\n\t\t\t? action.enabled\n\t\t\t: TableHelper.isDataFieldForIBNEnabled(\n\t\t\t\t\t{\n\t\t\t\t\t\tcollection: collectionContext,\n\t\t\t\t\t\ttableDefinition: table.tableDefinition\n\t\t\t\t\t},\n\t\t\t\t\tdataField,\n\t\t\t\t\tdataField.RequiresContext,\n\t\t\t\t\tdataField.NavigationAvailable,\n\t\t\t\t\tforContextMenu\n\t\t\t  );\n\tconst IBNData = !dataField.RequiresContext ? { semanticObject: dataField.SemanticObject, action: dataField.Action } : undefined;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\tconst toolbarActionId = generate([table.contentId, dataField]);\n\t\treturn (\n\t\t\t<Button\n\t\t\t\tid={toolbarActionId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\tenabled={enabled}\n\t\t\t\tvisible={action.visible}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"IBNData\", IBNData), createCustomData(\"actionId\", toolbarActionId)]\n\t\t\t\t}}\n\t\t\t</Button>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\tconst tableActionContextMenuId = generate([table.contentId, dataField, \"ContextMenu\"]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={tableActionContextMenuId}\n\t\t\t\ttext={dataField.Label}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tenabled={enabled}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"IBNData\", IBNData), createCustomData(\"actionId\", tableActionContextMenuId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n}\n\n/**\n * Generates the control for the button based on the type of the action.\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param parameters\n * @returns The control for the button/menu item\n */\nfunction getDataFieldButton(\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\tparameters: TableTemplatingParameters\n): ActionToolbarAction | MenuItem | undefined {\n\tconst dataField = action.annotationPath\n\t\t? (parameters.convertedMetadata.resolvePath(action.annotationPath).target as DataFieldAbstractTypes)\n\t\t: undefined;\n\tlet template: MenuItem | Button | undefined;\n\tif (!dataField) {\n\t\treturn undefined;\n\t}\n\tswitch (action.type) {\n\t\tcase \"ForAction\":\n\t\t\tif (isDataFieldForAction(dataField)) {\n\t\t\t\tconst isBound = dataField.ActionTarget?.isBound;\n\t\t\t\tif (!!isBound && table.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel) {\n\t\t\t\t\taction = deepClone(action);\n\t\t\t\t\taction.enabled = compileExpression(and(resolveBindingString(action.enabled ?? \"\"), UI.isNodeLevelNavigable));\n\t\t\t\t}\n\t\t\t\tconst isOperationAvailable = dataField.ActionTarget?.annotations?.Core?.OperationAvailable?.valueOf() !== false;\n\t\t\t\t// show only bound actions in context menu\n\t\t\t\tif (!forContextMenu || TableHelper.isActionShownInContextMenu(action, table.contextObjectPath)) {\n\t\t\t\t\tif (isBound !== true || isOperationAvailable) {\n\t\t\t\t\t\ttemplate = getDataFieldButtonForAction(dataField, action, table, forContextMenu, collectionContext, parameters);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"ForNavigation\":\n\t\t\tif (\n\t\t\t\tisDataFieldForIntentBasedNavigation(dataField) &&\n\t\t\t\t(!forContextMenu || TableHelper.isActionShownInContextMenu(action, table.contextObjectPath))\n\t\t\t) {\n\t\t\t\ttemplate = getDataFieldButtonForIntentBasedNavigation(\n\t\t\t\t\tdataField,\n\t\t\t\t\taction,\n\t\t\t\t\ttable,\n\t\t\t\t\tforContextMenu,\n\t\t\t\t\tcollectionContext,\n\t\t\t\t\tparameters.handlerProvider\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t}\n\n\tif (template === undefined) {\n\t\treturn undefined;\n\t}\n\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.contentId, action.id, dataField, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\taction: template\n\t\t\t\t}}\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn template as MenuItem;\n\t}\n}\n\n/**\n * Gets the default action handler that is invoked when adding the menu button.\n * @param defaultAction The default action of the menu\n * @param dataFieldForDefaultAction The dataField for the default action\n * @param parameters\n * @returns The corresponding event handler or command\n */\nfunction getDefaultMenuButtonAction(\n\tdefaultAction: CustomAction | undefined,\n\tdataFieldForDefaultAction: DataFieldForIntentBasedNavigation | DataFieldForAction | undefined,\n\tparameters: TableTemplatingParameters\n): { handler?: (e: UI5Event) => void; command?: string } {\n\tif (!defaultAction) {\n\t\treturn {};\n\t}\n\n\ttry {\n\t\tswitch (defaultAction.type) {\n\t\t\tcase \"ForAction\":\n\t\t\t\treturn {\n\t\t\t\t\thandler: parameters.handlerProvider.getDataFieldForActionButtonPressHandler(\n\t\t\t\t\t\tdataFieldForDefaultAction as DataFieldForAction,\n\t\t\t\t\t\tdefaultAction,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\tfalse\n\t\t\t\t\t)\n\t\t\t\t};\n\n\t\t\tcase \"ForNavigation\":\n\t\t\t\treturn {\n\t\t\t\t\thandler: parameters.handlerProvider.getDataFieldForIBNPressHandler(defaultAction, false)\n\t\t\t\t};\n\n\t\t\tdefault: {\n\t\t\t\tif (defaultAction.command) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcommand: `cmd:${defaultAction.command}|defaultAction`\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn {\n\t\t\t\t\t\thandler: parameters.handlerProvider.getManifestActionPressHandler(defaultAction, false)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\treturn {};\n\t}\n}\n\n/**\n * Generates the control for the MenuButton control which enables the user to show a hierarchical menu.\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param parameters\n * @returns The MenuButton control\n */\nfunction getMenuButton(\n\taction: BaseAction | AnnotationAction | CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\tparameters: TableTemplatingParameters\n): ActionToolbarAction | MenuItem | undefined {\n\tif ((action as CustomAction).requiresSelection && table.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel) {\n\t\taction = deepClone(action);\n\t\taction.enabled = compileExpression(and(resolveBindingString(action.enabled ?? \"\"), UI.isNodeLevelNavigable));\n\t}\n\tconst icon = action.isAIOperation === true ? aiIcon : undefined;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\tconst defaultAction = (action as CustomAction).defaultAction as CustomAction | undefined;\n\t\tconst dataFieldForDefaultAction = defaultAction?.annotationPath\n\t\t\t? parameters.convertedMetadata.resolvePath<DataFieldForAction | DataFieldForIntentBasedNavigation>(defaultAction.annotationPath)\n\t\t\t\t\t.target\n\t\t\t: undefined;\n\t\tconst defaultActionHandlers = getDefaultMenuButtonAction(defaultAction, dataFieldForDefaultAction, parameters);\n\t\tconst menuItems = action.menu\n\t\t\t?.filter((menuItemAction) => typeof menuItemAction !== \"string\")\n\t\t\t.map((menuItemAction) => {\n\t\t\t\treturn getMenuItem(action, menuItemAction, table, forContextMenu, collectionContext, parameters);\n\t\t\t})\n\t\t\t.filter((item) => item !== undefined);\n\n\t\tif (menuItems?.length) {\n\t\t\tconst menuId = generate([table.contentId, action.id]);\n\t\t\treturn (\n\t\t\t\t<ActionToolbarAction\n\t\t\t\t\tid={generate([table.contentId, action.id, \"ActionToolbarAction\"])}\n\t\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t\t>\n\t\t\t\t\t<MenuButton\n\t\t\t\t\t\ttext={action.text}\n\t\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\t\tmenuPosition={Popup.Dock.BeginBottom}\n\t\t\t\t\t\tid={menuId}\n\t\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\t\tenabled={action.enabled}\n\t\t\t\t\t\tuseDefaultActionOnly={!!(action as CustomAndAction).defaultAction}\n\t\t\t\t\t\ticon={icon}\n\t\t\t\t\t\tbuttonMode={(action as CustomAndAction).defaultAction ? MenuButtonMode.Split : MenuButtonMode.Regular}\n\t\t\t\t\t\tdefaultAction={defaultActionHandlers.handler}\n\t\t\t\t\t\tjsx:command={defaultActionHandlers.command}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tcustomData: [createCustomData(\"actionId\", menuId)],\n\t\t\t\t\t\t\tmenu: <Menu>{menuItems}</Menu>,\n\t\t\t\t\t\t\tlayoutData: (\n\t\t\t\t\t\t\t\t<OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}}\n\t\t\t\t\t</MenuButton>\n\t\t\t\t</ActionToolbarAction>\n\t\t\t);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t} else {\n\t\t// for context menu\n\t\tconst menuItemsForContextMenu: BaseAction[] = [];\n\t\taction.menu?.forEach((menuItemAction) => {\n\t\t\tif (typeof menuItemAction !== \"string\" && TableHelper.isActionShownInContextMenu(menuItemAction, table.contextObjectPath)) {\n\t\t\t\tmenuItemsForContextMenu?.push(menuItemAction);\n\t\t\t}\n\t\t});\n\n\t\tconst menuItems = menuItemsForContextMenu\n\t\t\t.filter((menuItemAction) => typeof menuItemAction !== \"string\")\n\t\t\t.map((menuItemAction) => {\n\t\t\t\treturn getMenuItem(action, menuItemAction, table, forContextMenu, collectionContext, parameters);\n\t\t\t})\n\t\t\t.filter((item) => item !== undefined);\n\n\t\tif (menuItems?.length) {\n\t\t\treturn (\n\t\t\t\t<MenuItem\n\t\t\t\t\ttext={action.text}\n\t\t\t\t\tid={generate([table.contentId, action.id, \"ContextMenu\"])}\n\t\t\t\t\tenabled={action.enabledForContextMenu}\n\t\t\t\t\ticon={icon}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\titems: menuItems\n\t\t\t\t\t}}\n\t\t\t\t</MenuItem>\n\t\t\t);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\n/**\n * Generates the xml string for the default button.\n * @param action The name of the action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param handlerProvider\n * @returns The xml string for the default button.\n */\nfunction getDefaultButton(\n\taction: CustomAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem | undefined {\n\tconst command = !forContextMenu ? action.command : action.command + \"::ContextMenu\";\n\tconst pressHandler = action.command ? undefined : handlerProvider.getManifestActionPressHandler(action, forContextMenu);\n\tconst pressCommand = action.command ? `cmd:${command}|press` : undefined;\n\n\tif (action.requiresSelection && table.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel) {\n\t\taction = deepClone(action);\n\t\taction.enabled = compileExpression(and(resolveBindingString(action.enabled ?? \"\"), UI.isNodeLevelNavigable));\n\t\taction.enabledForContextMenu = compileExpression(\n\t\t\tand(resolveBindingString(action.enabledForContextMenu ?? \"\"), UI.isNodeLevelNavigable)\n\t\t);\n\t}\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.contentId, action.id, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tcore:require=\"{FPM: 'sap/fe/core/helpers/FPMHelper'}\"\n\t\t\t\t\tid={generate([table.contentId, action.id])}\n\t\t\t\t\ttext={action.text}\n\t\t\t\t\tpress={pressHandler}\n\t\t\t\t\tjsx:command={pressCommand}\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\tenabled={action.enabled}\n\t\t\t\t\ticon={action.isAIOperation === true ? aiIcon : undefined}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.contentId, action.id]))],\n\t\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else if (TableHelper.isActionShownInContextMenu(action, table.contextObjectPath)) {\n\t\tconst tableActionContextMenuId = generate([table.contentId, action.id, \"ContextMenu\"]);\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tcore:require=\"{FPM: 'sap/fe/core/helpers/FPMHelper'}\"\n\t\t\t\tid={tableActionContextMenuId}\n\t\t\t\ttext={action.text}\n\t\t\t\tpress={pressHandler}\n\t\t\t\tjsx:command={pressCommand}\n\t\t\t\tenabled={action.enabledForContextMenu}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", tableActionContextMenuId)]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\n/**\n * Generates the control for an action button/menu item based on the type of the action.\n * @param action The action to get\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionContext The context of the collection\n * @param parameters\n * @returns The control of the action\n */\nfunction getAction(\n\taction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\tparameters: TableTemplatingParameters\n): ActionToolbarAction | MenuItem | undefined {\n\tswitch (action.type) {\n\t\tcase \"Default\":\n\t\t\tif (\"noWrap\" in action) {\n\t\t\t\treturn getDefaultButton(action as CustomAction, table, forContextMenu, parameters.handlerProvider);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"Menu\":\n\t\t\treturn getMenuButton(action, table, forContextMenu, collectionContext, parameters);\n\t\tdefault:\n\t}\n\treturn getDataFieldButton(action, table, forContextMenu, collectionContext, parameters);\n}\n\n/**\n * Generates the copy action.\n * @param action The copy action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if action is for Action Toolbar of Context Menu\n * @param collectionContext The context of the collection\n * @param parameters\n * @returns The action\n */\nfunction getCopyAction(\n\taction: BaseAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionContext: Context,\n\tparameters: TableTemplatingParameters\n): ActionToolbarAction | MenuItem {\n\tconst dataField = action.annotationPath\n\t\t? (parameters.convertedMetadata.resolvePath(action.annotationPath).target as DataFieldForAction)\n\t\t: undefined;\n\tconst actionContextPath = CommonHelper.getActionContext(parameters.metaModel.createBindingContext(action.annotationPath + \"/Action\")!);\n\tconst operationAvailable = dataField?.ActionTarget?.annotations?.Core?.OperationAvailable !== undefined;\n\tconst actionContext = parameters.metaModel.createBindingContext(actionContextPath)!;\n\tconst dataFieldDataModelObjectPath = actionContext\n\t\t? MetaModelConverter.getInvolvedDataModelObjects(actionContext, collectionContext)\n\t\t: undefined;\n\tconst isBound = dataField?.ActionTarget?.isBound;\n\tconst press = dataField\n\t\t? parameters.handlerProvider.getDataFieldForActionButtonPressHandler(dataField, action, undefined, forContextMenu)\n\t\t: undefined;\n\n\tlet enabled: string | boolean | CompiledBindingToolkitExpression = operationAvailable\n\t\t? TableHelper.isDataFieldForActionEnabled(\n\t\t\t\ttable.tableDefinition,\n\t\t\t\tdataField.Action,\n\t\t\t\t!!isBound,\n\t\t\t\tactionContext.getObject(),\n\t\t\t\taction.enableOnSelect,\n\t\t\t\tdataFieldDataModelObjectPath?.targetEntityType,\n\t\t\t\tforContextMenu,\n\t\t\t\ttrue\n\t\t  )\n\t\t: `{= ${ActionHelper.getNumberOfContextsExpression(\"single\", forContextMenu)}}`;\n\tif (table.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel) {\n\t\tenabled = compileExpression(and(resolveBindingString(enabled), UI.isNodeLevelNavigable));\n\t}\n\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.contentId, dataField, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.contentId, dataField])}\n\t\t\t\t\ttext={action.text}\n\t\t\t\t\tpress={press}\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\tenabled={enabled}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.contentId, dataField]))],\n\t\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.contentId, dataField, \"ContextMenu\"])}\n\t\t\t\ttext={action.text}\n\t\t\t\tpress={press}\n\t\t\t\tenabled={compileExpression(equal(pathInModel(\"contextmenu/numberOfSelectedContexts\", \"internal\"), 1)) as unknown as boolean}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.contentId, dataField, \"ContextMenu\"]))]\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n}\n\n/**\n * Generates the xml string for the create button.\n * @param standardAction Standard actions to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates whether the action appears in the context menu. If set to `false`, the action appears in the table toolbar.\n * @param collectionEntity The entity set of the collection\n * @returns The xml string for the create button\n */\nfunction getCreateButton(\n\tstandardAction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionEntity: EntitySet | NavigationProperty\n): ActionsPlaceholder | ActionToolbarAction | MenuItem {\n\tconst suffixResourceKey = collectionEntity.name;\n\tconst buttonText = table.getTranslatedText(\"M_COMMON_TABLE_CREATE\", undefined, suffixResourceKey);\n\tconst createOutboundDetail = (table.tableDefinition.annotation.create as CreateBehaviorExternal).outboundDetail;\n\tconst customData = createOutboundDetail\n\t\t? createCustomData(\"IBNData\", { semanticObject: createOutboundDetail.semanticObject, action: createOutboundDetail.action })\n\t\t: undefined;\n\n\tif (table.tableDefinition.control.enableUploadPlugin) {\n\t\treturn <ActionsPlaceholder id={`${table.contentId}-uploadButton`} placeholderFor=\"UploadButtonPlaceholder\" />;\n\t} else if (!forContextMenu) {\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.contentId, standardAction.key, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.contentId, standardAction.key])}\n\t\t\t\t\ttext={buttonText}\n\t\t\t\t\tjsx:command=\"cmd:Create|press\"\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\t\tenabled={standardAction.enabled as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcustomData,\n\t\t\t\t\t\tlayoutData: (\n\t\t\t\t\t\t\t<OverflowToolbarLayoutData\n\t\t\t\t\t\t\t\tpriority={standardAction.priority}\n\t\t\t\t\t\t\t\tgroup={standardAction.group}\n\t\t\t\t\t\t\t></OverflowToolbarLayoutData>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.contentId, standardAction.key, \"ContextMenu\"])}\n\t\t\t\ttext={buttonText}\n\t\t\t\tjsx:command=\"cmd:Create::ContextMenu|press\"\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nfunction getCreateMenu(\n\tstandardAction: StandardAction,\n\ttable: TableBlockProperties,\n\tcollectionEntity: EntitySet | NavigationProperty,\n\tforContextMenu: boolean,\n\thandlerProvider: TableEventHandlerProvider\n): ActionToolbarAction | MenuItem {\n\tconst suffixResourceKey = collectionEntity.name;\n\tconst buttonText = table.getTranslatedText(\"M_COMMON_TABLE_CREATE\", undefined, suffixResourceKey);\n\tconst values = table.tableDefinition.control.nodeType!.values;\n\tconst hasCustomCreateEnablement = table.tableDefinition.control.createEnablement !== undefined;\n\n\tconst menuItems = values.map((allowedValue, index) => {\n\t\tconst modelName = !forContextMenu ? \"\" : \"contextmenu/\";\n\n\t\tconst isEnabled = hasCustomCreateEnablement\n\t\t\t? notEqual(pathInModel(`${modelName}createEnablement/Create_${index}`, \"internal\"), false)\n\t\t\t: undefined;\n\t\tconst id = forContextMenu\n\t\t\t? generate([table.contentId, allowedValue.value, \"ContextMenu\"])\n\t\t\t: generate([table.contentId, allowedValue.value]);\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={id}\n\t\t\t\ttext={allowedValue.text}\n\t\t\t\tenabled={isEnabled ? compileExpression(isEnabled) : undefined}\n\t\t\t\tpress={handlerProvider.getCreateMenuItemPressHandler(index, forContextMenu)}\n\t\t\t/>\n\t\t);\n\t});\n\n\tif (forContextMenu) {\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.contentId, standardAction.key, \"ContextMenu\"])}\n\t\t\t\ttext={buttonText}\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabledForContextMenu as unknown as boolean}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems: menuItems !== undefined && menuItems.length > 0 ? menuItems : undefined\n\t\t\t\t}}\n\t\t\t</MenuItem>\n\t\t);\n\t}\n\n\treturn (\n\t\t<ActionToolbarAction id={generate([table.contentId, standardAction.key, \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t<MenuButton\n\t\t\t\ttext={buttonText}\n\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\tmenuPosition=\"BeginBottom\"\n\t\t\t\tid={generate([table.contentId, standardAction.key])}\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabled as unknown as boolean}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\tcustomData: [createCustomData(\"actionId\", generate([table.contentId, standardAction.key]))],\n\t\t\t\t\tmenu: <Menu>{menuItems}</Menu>,\n\t\t\t\t\tlayoutData: (\n\t\t\t\t\t\t<OverflowToolbarLayoutData\n\t\t\t\t\t\t\tpriority={standardAction.priority}\n\t\t\t\t\t\t\tgroup={standardAction.group}\n\t\t\t\t\t\t></OverflowToolbarLayoutData>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t</MenuButton>\n\t\t</ActionToolbarAction>\n\t);\n}\n\n/**\n * Generates the xml string for the delete button.\n * @param standardAction Standard actions to be evaluated\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param collectionEntity The entity set of the collection\n * @returns The xml string for the delete button\n */\nfunction getDeleteButton(\n\tstandardAction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tcollectionEntity: EntitySet | NavigationProperty\n): ActionToolbarAction | MenuItem {\n\tconst suffixResourceKey = collectionEntity.name;\n\tconst buttonText = table.getTranslatedText(\"M_COMMON_TABLE_DELETE\", undefined, suffixResourceKey);\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.contentId, standardAction.key, \"ActionToolbarAction\"])}\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.contentId, standardAction.key])}\n\t\t\t\t\ttext={buttonText}\n\t\t\t\t\tjsx:command=\"cmd:DeleteEntry|press\"\n\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\t\tenabled={standardAction.enabled as unknown as boolean}\n\t\t\t\t\tariaHasPopup=\"Dialog\"\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tlayoutData: (\n\t\t\t\t\t\t\t<OverflowToolbarLayoutData\n\t\t\t\t\t\t\t\tpriority={standardAction.priority}\n\t\t\t\t\t\t\t\tgroup={standardAction.group}\n\t\t\t\t\t\t\t></OverflowToolbarLayoutData>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.contentId, standardAction.key, \"ContextMenu\"])}\n\t\t\t\ttext={buttonText}\n\t\t\t\tjsx:command=\"cmd:DeleteEntry::ContextMenu|press\"\n\t\t\t\tvisible={standardAction.visible as unknown as boolean}\n\t\t\t\tenabled={standardAction.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n/**\n * Generates the xml string for standard actions based on the key of the standard action.\n * @param action The action to template\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param handlerProvider\n * @param collectionEntity The entity set of the collection\n * @returns The xml string representation of the standard action\n */\nfunction getStandardAction(\n\taction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\thandlerProvider: TableEventHandlerProvider,\n\tcollectionEntity: EntitySet | NavigationProperty\n): ActionToolbarAction | MenuItem | ActionsPlaceholder | undefined {\n\tif (action.isTemplated === \"false\") {\n\t\treturn undefined;\n\t}\n\tif (table.tableDefinition.control.analyticalConfiguration?.aggregationOnLeafLevel && action.key !== StandardActionKeys.Create) {\n\t\taction = deepClone(action);\n\t\taction.enabled = compileExpression(and(resolveBindingString(action.enabled ?? \"\"), UI.isNodeLevelNavigable));\n\t\taction.enabledForContextMenu = compileExpression(\n\t\t\tand(resolveBindingString(action.enabledForContextMenu ?? \"\"), UI.isNodeLevelNavigable)\n\t\t);\n\t}\n\n\tswitch (action.key) {\n\t\tcase StandardActionKeys.Create:\n\t\t\tif (\n\t\t\t\t!table.tableDefinition.annotation.isInsertUpdateActionsTemplated ||\n\t\t\t\t// We only have Create on the ContextMenu on the TreeTable\n\t\t\t\t(table.tableDefinition.control.type !== \"TreeTable\" && forContextMenu)\n\t\t\t) {\n\t\t\t\treturn undefined;\n\t\t\t} else if (table.tableDefinition.control.nodeType) {\n\t\t\t\treturn getCreateMenu(action, table, collectionEntity, forContextMenu, handlerProvider);\n\t\t\t} else {\n\t\t\t\treturn getCreateButton(action, table, forContextMenu, collectionEntity);\n\t\t\t}\n\n\t\tcase StandardActionKeys.Delete:\n\t\t\treturn getDeleteButton(action, table, forContextMenu, collectionEntity);\n\t\tcase StandardActionKeys.Cut:\n\t\t\treturn getCutButton(action, table, forContextMenu);\n\t\tcase StandardActionKeys.Copy:\n\t\t\treturn getCopyButton(action, table, forContextMenu);\n\t\tcase StandardActionKeys.Paste:\n\t\t\treturn getPasteButton(action, table, forContextMenu);\n\n\t\tcase StandardActionKeys.MassEdit:\n\t\t\tif (table.tableDefinition.annotation.isInsertUpdateActionsTemplated) {\n\t\t\t\tif (!forContextMenu) {\n\t\t\t\t\t// for table toolbar\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ActionToolbarAction\n\t\t\t\t\t\t\tid={generate([table.contentId, action.key, \"ActionToolbarAction\"])}\n\t\t\t\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tid={generate([table.contentId, action.key])}\n\t\t\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_COMMON_TABLE_MASSEDIT}\"\n\t\t\t\t\t\t\t\tpress={handlerProvider.getMassEditButtonPressHandler(false)}\n\t\t\t\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\tlayoutData: (\n\t\t\t\t\t\t\t\t\t\t<OverflowToolbarLayoutData\n\t\t\t\t\t\t\t\t\t\t\tpriority={action.priority}\n\t\t\t\t\t\t\t\t\t\t\tgroup={action.group}\n\t\t\t\t\t\t\t\t\t\t></OverflowToolbarLayoutData>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</ActionToolbarAction>\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// for context menu\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\tid={generate([table.contentId, action.key, \"ContextMenu\"])}\n\t\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_COMMON_TABLE_MASSEDIT}\"\n\t\t\t\t\t\t\tpress={handlerProvider.getMassEditButtonPressHandler(true)}\n\t\t\t\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\n\t\tcase StandardActionKeys.Insights:\n\t\t\tif (!forContextMenu) {\n\t\t\t\t// for table toolbar\n\t\t\t\treturn (\n\t\t\t\t\t<ActionToolbarAction\n\t\t\t\t\t\tid={generate([table.contentId, action.key, \"ActionToolbarAction\"])}\n\t\t\t\t\t\tdt:designtime={action.visible === \"true\" || action.visible === \"false\" ? undefined : \"not-adaptable-visibility\"}\n\t\t\t\t\t\tvisible={action.visible}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid={generate([table.contentId, action.key])}\n\t\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_COMMON_INSIGHTS_CARD}\"\n\t\t\t\t\t\t\tpress={handlerProvider.addCardToInsightsPress}\n\t\t\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\tlayoutData: (\n\t\t\t\t\t\t\t\t\t<OverflowToolbarLayoutData priority={action.priority ?? \"AlwaysOverflow\"} group={action.group} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</ActionToolbarAction>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn undefined;\n\n\t\tcase StandardActionKeys.MoveUp:\n\t\tcase StandardActionKeys.MoveDown:\n\t\t\treturn getMoveUpDownButton(action, table, forContextMenu);\n\n\t\tdefault:\n\t\t\treturn undefined;\n\t}\n}\n\n/**\n * Generates the xml string for standard, annotation, and custom actions of the table.\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @param parameters\n * @param collectionContext The context of the collection\n * @param collectionEntity The entity set of the collection\n * @returns The xml string representation of the actions\n */\nexport function getActions(\n\ttable: TableBlockProperties,\n\tforContextMenu: boolean,\n\tparameters: TableTemplatingParameters,\n\tcollectionContext: Context,\n\tcollectionEntity: EntitySet | NavigationProperty\n): (ActionToolbarAction | MenuItem | ActionsPlaceholder)[] {\n\t// Apply primary action overflow protection before processing\n\tconst actionsWithOverflowProtection = ActionHelper.ensurePrimaryActionNeverOverflows(table.tableDefinition.actions);\n\n\treturn actionsWithOverflowProtection\n\t\t.map((action: BaseAction) => {\n\t\t\tswitch (action.type) {\n\t\t\t\tcase ActionType.Standard:\n\t\t\t\t\treturn getStandardAction(action as StandardAction, table, forContextMenu, parameters.handlerProvider, collectionEntity);\n\t\t\t\tcase ActionType.Copy:\n\t\t\t\t\treturn getCopyAction(action, table, forContextMenu, collectionContext, parameters);\n\t\t\t\tdefault:\n\t\t\t\t\treturn getAction(action, table, forContextMenu, collectionContext, parameters);\n\t\t\t}\n\t\t})\n\t\t.filter((action) => action !== undefined) as (ActionToolbarAction | MenuItem | ActionsPlaceholder)[];\n}\n\n/**\n * Generates the control for BasicSearch.\n * @param useBasicSearch\n * @param filterBarId\n * @param _collectionIsDraftEnabled\n * @param isSearchable\n * @returns The control of the BasicSearch\n */\nfunction getBasicSearch(\n\tuseBasicSearch: boolean,\n\tfilterBarId: string | undefined,\n\t_collectionIsDraftEnabled: boolean,\n\tisSearchable: boolean\n): ActionToolbarAction | undefined {\n\tif (useBasicSearch) {\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([filterBarId, \"ActionToolbarAction\"])}\n\t\t\t\tlabel=\"{sap.fe.i18n>M_BASIC_SEARCH}\"\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\taction: <BasicSearchMacro id={filterBarId} useDraftEditState={_collectionIsDraftEnabled} visible={isSearchable} />\n\t\t\t\t}}\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t}\n\treturn undefined;\n}\n\n/**\n * Generates the control for table fullscreen button.\n * @param table The instance of the table building block\n * @returns The control of the button\n */\nfunction getFullScreen(table: TableBlockProperties): ActionToolbarAction | undefined {\n\tif (table.tableDefinition.control.enableFullScreen) {\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.contentId, \"StandardAction\", \"FullScreen\", \"ActionToolbarAction\"])}\n\t\t\t\tlabel=\"{sap.fe.i18n>M_FULL_SCREEN}\"\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\taction: <TableFullScreenButton id={generate([table.contentId, \"StandardAction\", \"FullScreen\"])} />\n\t\t\t\t}}\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t}\n\treturn undefined;\n}\n\n/**\n * Generates the XML string for the Cut Button.\n * @param action The instance of the standard action\n * @param table The instance of the table building block\n * @param forContextMenu\n * @returns The XML string representation of the Cut Button\n */\nfunction getCutButton(action: StandardAction, table: TableBlockProperties, forContextMenu = false): ActionToolbarAction | MenuItem {\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction id={generate([table.contentId, \"Cut\", \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.contentId, \"Cut\"])}\n\t\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_CUT}\"\n\t\t\t\t\tjsx:command=\"cmd:Cut|press\"\n\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.contentId, \"Cut\", \"ContextMenu\"])}\n\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_CUT}\"\n\t\t\t\tjsx:command=\"cmd:Cut::ContextMenu|press\"\n\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n/**\n * Generates the XML string for the Copy button.\n * @param action The instance of the standardAction.\n * @param table The instance of the Table building block.\n * @param forContextMenu\n * @returns The XML string representation of the Cut button.\n */\nfunction getCopyButton(action: StandardAction, table: TableBlockProperties, forContextMenu = false): ActionToolbarAction | MenuItem {\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction id={generate([table.contentId, \"Copy\", \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.contentId, \"Copy\"])}\n\t\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_COPY}\"\n\t\t\t\t\tjsx:command=\"cmd:Copy|press\"\n\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.contentId, \"Copy\", \"ContextMenu\"])}\n\t\t\t\ttext=\"{sap.fe.i18n>M_TABLE_COPY}\"\n\t\t\t\tjsx:command=\"cmd:Copy::ContextMenu|press\"\n\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nfunction getMoveUpDownButton(action: StandardAction, table: TableBlockProperties, forContextMenu: boolean): ActionToolbarAction | MenuItem {\n\tconst forMoveUp = action.key === StandardActionKeys.MoveUp;\n\tif (!forContextMenu) {\n\t\t// for table toolbar\n\t\treturn (\n\t\t\t<ActionToolbarAction\n\t\t\t\tid={generate([table.contentId, action.key, \"ActionToolbarAction\"])}\n\t\t\t\tvisible={action.visible}\n\t\t\t\tdt:designtime=\"not-adaptable-tree\"\n\t\t\t>\n\t\t\t\t<Button\n\t\t\t\t\tid={generate([table.contentId, action.key])}\n\t\t\t\t\ttext={forMoveUp ? \"{sap.fe.i18n>M_TABLE_MOVE_UP}\" : \"{sap.fe.i18n>M_TABLE_MOVE_DOWN}\"}\n\t\t\t\t\tjsx:command={forMoveUp ? \"cmd:TableMoveElementUp|press\" : \"cmd:TableMoveElementDown|press\"}\n\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tlayoutData: <OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t\t}}\n\t\t\t\t</Button>\n\t\t\t</ActionToolbarAction>\n\t\t);\n\t} else {\n\t\t// for context menu\n\t\treturn (\n\t\t\t<MenuItem\n\t\t\t\tid={generate([table.contentId, action.key, \"ContextMenu\"])}\n\t\t\t\ttext={forMoveUp ? \"{sap.fe.i18n>M_TABLE_MOVE_UP}\" : \"{sap.fe.i18n>M_TABLE_MOVE_DOWN}\"}\n\t\t\t\tjsx:command={forMoveUp ? \"cmd:TableMoveElementUp::ContextMenu|press\" : \"cmd:TableMoveElementDown::ContextMenu|press\"}\n\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t/>\n\t\t);\n\t}\n}\n/**\n * Generates the XML string for the Paste Button.\n * @param action The Paste action\n * @param table The instance of the table building block\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @returns The XML string representation of the Paste Button\n */\nfunction getPasteButton(\n\taction: StandardAction,\n\ttable: TableBlockProperties,\n\tforContextMenu = false\n): ActionToolbarAction | MenuItem | undefined {\n\tconst tableType = table.tableDefinition.control.type;\n\tif (tableType === \"TreeTable\") {\n\t\tif (!forContextMenu) {\n\t\t\t// for table toolbar\n\t\t\treturn (\n\t\t\t\t<ActionToolbarAction id={generate([table.contentId, \"Paste\", \"ActionToolbarAction\"])} dt:designtime=\"not-adaptable-tree\">\n\t\t\t\t\t<Button\n\t\t\t\t\t\tid={generate([table.contentId, \"Paste\"])}\n\t\t\t\t\t\ttext=\"{sap.fe.i18n>M_PASTE}\"\n\t\t\t\t\t\tjsx:command=\"cmd:Paste|press\"\n\t\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\t\tenabled={action.enabled as unknown as boolean}\n\t\t\t\t\t>\n\t\t\t\t\t\t{{\n\t\t\t\t\t\t\tlayoutData: (\n\t\t\t\t\t\t\t\t<OverflowToolbarLayoutData priority={action.priority} group={action.group}></OverflowToolbarLayoutData>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}}\n\t\t\t\t\t</Button>\n\t\t\t\t</ActionToolbarAction>\n\t\t\t);\n\t\t} else {\n\t\t\t// for Context Menu\n\t\t\treturn (\n\t\t\t\t<MenuItem\n\t\t\t\t\tid={generate([table.contentId, \"Paste\", \"ContextMenu\"])}\n\t\t\t\t\ttext=\"{sap.fe.i18n>M_PASTE}\"\n\t\t\t\t\tjsx:command=\"cmd:Paste::ContextMenu|press\"\n\t\t\t\t\tvisible={action.visible as unknown as boolean}\n\t\t\t\t\tenabled={action.enabledForContextMenu as unknown as boolean}\n\t\t\t\t/>\n\t\t\t);\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Generates the XML string for actions.\n * @param table The instance of the table building block\n * @param parameters\n * @param collectionContext The context of the collection\n * @param collectionEntity The entity set of the collection\n * @returns The XML string representation of the actions\n */\nexport function getTableActionsTemplate(\n\ttable: TableBlockProperties,\n\tparameters: TableTemplatingParameters,\n\tcollectionContext: Context,\n\tcollectionEntity: EntitySet | NavigationProperty\n): Control[] {\n\tconst _collectionIsDraftEnabled = ModelHelper.isDraftNode(collectionEntity) || ModelHelper.isDraftRoot(collectionEntity);\n\tlet searchable: boolean;\n\tif (table.isSearchable === false) {\n\t\tsearchable = false;\n\t} else {\n\t\tsearchable = table.tableDefinition.annotation.searchable;\n\t}\n\n\tconst actions: (ActionToolbarAction | MenuItem | ActionsPlaceholder)[] = [];\n\tconst basicSearch = getBasicSearch(!!table.useBasicSearch, table.filterBar, _collectionIsDraftEnabled, searchable);\n\tif (basicSearch) {\n\t\tactions.push(basicSearch);\n\t}\n\tactions.push(...getActions(table, false, parameters, collectionContext, collectionEntity));\n\tconst fullScreen = getFullScreen(table);\n\tif (fullScreen) {\n\t\tactions.push(fullScreen);\n\t}\n\n\treturn actions as Control[];\n}\n\n/**\n * Generates the xml string for context menu actions.\n * @param table The instance of the table building block\n * @param parameters\n * @param collectionContext The context of the collection\n * @param collectionEntity The entity set of the collection\n * @returns The xml string representation of the actions\n */\nexport function getTableContextMenuTemplate(\n\ttable: TableBlockProperties,\n\tparameters: TableTemplatingParameters,\n\tcollectionContext: Context,\n\tcollectionEntity: EntitySet | NavigationProperty\n): MenuItem[] {\n\tconst template: MenuItem[] = getActions(table, true, parameters, collectionContext, collectionEntity) as unknown as MenuItem[];\n\tif (table.tableDefinition.control.type === \"TreeTable\") {\n\t\ttemplate.push(getExpandedCollapseActions(table, true, parameters.handlerProvider.expandNode));\n\t\ttemplate.push(getExpandedCollapseActions(table, false, parameters.handlerProvider.collapseNode));\n\t}\n\treturn template;\n}\n\nfunction getExpandedCollapseActions(table: TableBlockProperties, expand: boolean, pressHandler?: (e: UI5Event) => void): MenuItem {\n\tconst enableExpression = expand\n\t\t? and(\n\t\t\t\tequal(pathInModel(\"contextmenu/isExpandable\", \"internal\"), true),\n\t\t\t\tequal(pathInModel(\"contextmenu/numberOfSelectedContexts\", \"internal\"), 1)\n\t\t  )\n\t\t: and(\n\t\t\t\tequal(pathInModel(\"contextmenu/isCollapsable\", \"internal\"), true),\n\t\t\t\tequal(pathInModel(\"contextmenu/numberOfSelectedContexts\", \"internal\"), 1)\n\t\t  );\n\treturn (\n\t\t<MenuItem\n\t\t\tid={generate([table.contentId, expand ? \"Expand\" : \"Collapse\", \"ContextMenu\"])}\n\t\t\ttext={expand ? \"{sap.fe.i18n>M_TABLE_CONTEXTMENU_EXPAND}\" : \"{sap.fe.i18n>M_TABLE_CONTEXTMENU_COLLAPSE}\"}\n\t\t\tpress={pressHandler}\n\t\t\tenabled={enableExpression}\n\t\t/>\n\t);\n}\n"],"mappings":"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","ignoreList":[]}