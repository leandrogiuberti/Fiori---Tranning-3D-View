{"version":3,"names":["TableHelper","_isStaticAction","actionObject","actionName","action","Array","isArray","entityType","_getActionOverloadEntityType","toString","find","_action","$IsBound","$Parameter","$Type","$isCollection","sActionName","includes","aParts","split","length","replaceAll","undefined","_isActionOverloadOnDifferentType","sAnnotationTargetEntityType","sEntityType","getNavigationAvailableMap","lineItemCollection","oIBNNavigationAvailableMap","forEach","record","sKey","SemanticObject","Action","Inline","RequiresContext","NavigationAvailable","isPathAnnotationExpression","path","Object","keys","getUiLineItemObject","lineItemOrPresentationContext","convertedMetaData","lineItemOrPresentationObject","resolvePath","getPath","target","visualizations","Visualizations","lineItemObject","item","value","indexOf","$target","term","createBindingToLoadProperties","properties","propertyBindings","map","prop","pathInModel","compileExpression","formatResult","getColumnWidth","oThis","column","dataField","dataFieldActionText","dataModelObjectPath","useRemUnit","microChartTitle","width","enableAutoColumnWidth","getColumnWidthForImage","getColumnWidthForDataField","name","_shouldIncludeHeaderInColumnwidhCalculation","sortable","resolveBindingString","required","TableFormatter","annotations","targetObject","Value","dataType","type","getEditMode","FieldEditMode","Display","hasTextAnnotation","hasText","Core","MediaType","isImageURL","table","widthIncludingColumnHeader","Target","$AnnotationPath","nTmpTextWidth","SizeHelper","getButtonWidth","Label","nTmpVisualizationWidth","TableSizeHelper","getWidthForDataFieldForAnnotation","propertyWidth","isAnnotationOfType","getColumnWidthForChart","columnLabelWidth","chartSize","getChartSize","getShowOnlyChart","title","description","tmpText","titleSize","tmpWidth","getMarginClass","sVisualization","isLastField","sClass","getVBoxVisibility","collection","fieldGroupHiddenExpressions","fieldGroup","allStatic","hiddenPaths","hiddenAnnotationValue","push","$Path","hasAnyPathExpressions","constant","hasAllHiddenStaticExpressions","ifElse","getElementStableId","tableId","elementId","dataFieldPart","generate","getColumnStableId","id","getFieldGroupLabelStableId","pressEventDataFieldForActionButton","tableProperties","entitySetName","operationAvailableMap","isNavigable","arguments","enableAutoScroll","defaultValuesExtensionFunction","forContextMenu","targetEntityTypeName","contextObjectPath","targetEntityType","fullyQualifiedName","staticAction","applicableProperty","notApplicableProperty","contextMenuPath","context","params","contexts","bStaticAction","applicableContexts","notApplicableContexts","invocationGrouping","InvocationGrouping","controlId","contentId","label","fn","ref","isDataFieldForActionEnabled","tableDefinition","isBound","enableOnSelect","annotationTargetEntityType","isCopy","isStaticAction","oOperationAvailableMap","JSON","parse","hasOwnProperty","numberOfSelectedContexts","ActionHelper","getNumberOfContextsExpression","dataFieldForActionEnabledExpression","isDataFieldForIBNEnabled","requiresContext","isNavigationAvailable","isNavigationAvailablePath","isAnalyticalTable","enableAnalytics","entitySet","metaModel","getModel","Log","warning","getObject","substring","dataFieldForIBNEnabledExpression","buildExpressionForMultiValueFieldReadOnly","or","readOnly","and","UI","IsInactive","creationMode","equal","fieldMode","setHeaderLabelVisibility","datafield","dataFieldCollection","some","oDC","getTextOnActionField","oDataField","oContext","sPathDataFields","aMultipleLabels","i","reduce","a","b","_getResponsiveTableColumnSettings","oColumn","tableType","settings","microChartSize","showMicroChartLabel","getDelegate","isALP","entityName","filterOnActiveEntities","delegate","control","Error","payload","collectionName","hierarchyQualifier","initialExpansionLevel","annotation","createInPlace","analyticalConfiguration","aggregationOnLeafLevel","aggregationConfiguration","leafLevel","stringify","enableFastCreationRow","oFastCreationRow","sPath","oModel","oFinalUIState","oFastCreationListBinding","oFastCreationContext","CommonUtils","getIsEditable","isDeleted","bindList","$$updateGroupId","$$groupId","refreshInternal","create","setBindingContext","created","e","trace","oError","error","isActionShownInContextMenu","annotationPath","convertedTypes","actionTarget","ActionTarget","parameters","isCollection","sourceEntityType","valueOf","requiresSelection","requiresIContext"],"sourceRoot":".","sources":["TableHelper.ts"],"sourcesContent":["import type { ConvertedMetadata, EntityType, PathAnnotationExpression, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldForAnnotation,\n\tDataFieldForIntentBasedNavigation,\n\tDataFieldTypes,\n\tFieldGroup,\n\tLineItem,\n\tPresentationVariant,\n\tPresentationVariantType,\n\tSelectionPresentationVariant\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { CompiledBindingToolkitExpression, PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tfn,\n\tformatResult,\n\tifElse,\n\tor,\n\tpathInModel,\n\tref,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { TableColumnSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { MetaModelAction } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { AnnotationAction, BaseAction, CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isAnnotationOfType, isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasText, isImageURL } from \"sap/fe/core/templating/PropertyHelper\";\nimport { getEditMode } from \"sap/fe/core/templating/UIFormatters\";\nimport TableFormatter from \"sap/fe/macros/formatters/TableFormatter\";\nimport ActionHelper from \"sap/fe/macros/internal/helpers/ActionHelper\";\nimport type TableBlock from \"sap/fe/macros/table/Table.block\";\nimport TableSizeHelper from \"sap/fe/macros/table/TableSizeHelper\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type { default as BaseContext, default as Context } from \"sap/ui/model/Context\";\nimport type v4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type CreationRow from \"sap/ui/table/CreationRow\";\nimport type { MetaModelType } from \"../../../../../../../types/metamodel_types\";\n\ntype Hidden = { \"@com.sap.vocabularies.UI.v1.Hidden\": boolean | { $Path?: string } };\ntype ColumnWidthThis = { enableAutoColumnWidth?: boolean; widthIncludingColumnHeader?: boolean; tableType: string };\ntype MicroChartInfo = { title: string; description: string };\n/**\n * Helper class used by the control library for OData-specific handling (OData V4)\n * @private\n */\nconst TableHelper = {\n\t/**\n\t * Check if a given action is static.\n\t * @param actionObject The instance or the path of the action\n\t * @param actionName The name of the action\n\t * @returns Returns 'true' if action is static, else 'false'\n\t * @private\n\t */\n\t_isStaticAction: function (actionObject: MetaModelAction | MetaModelAction[] | undefined | string, actionName: String): boolean {\n\t\tlet action: MetaModelAction | undefined | string;\n\t\tif (actionObject) {\n\t\t\tif (Array.isArray(actionObject)) {\n\t\t\t\tconst entityType = this._getActionOverloadEntityType(actionName.toString());\n\t\t\t\tif (entityType) {\n\t\t\t\t\taction = actionObject.find(function (_action: MetaModelAction) {\n\t\t\t\t\t\treturn _action.$IsBound && _action.$Parameter[0].$Type === entityType;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// if this is just one - OK we take it. If it's more it's actually a wrong usage by the app\n\t\t\t\t\t// as we used the first one all the time we keep it as it is\n\t\t\t\t\taction = actionObject[0];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taction = actionObject;\n\t\t\t}\n\t\t}\n\n\t\treturn !!action && typeof action !== \"string\" && action.$IsBound && !!action.$Parameter[0].$isCollection;\n\t},\n\n\t/**\n\t * Get the entity type of an action overload.\n\t * @param sActionName The name of the action.\n\t * @returns The entity type used in the action overload.\n\t * @private\n\t */\n\t_getActionOverloadEntityType: function (sActionName: string): string | undefined {\n\t\tif (sActionName && sActionName.includes(\"(\")) {\n\t\t\tconst aParts = sActionName.split(\"(\");\n\t\t\treturn aParts[aParts.length - 1].replaceAll(\")\", \"\");\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Checks whether the action is overloaded on a different entity type.\n\t * @param sActionName The name of the action.\n\t * @param sAnnotationTargetEntityType The entity type of the annotation target.\n\t * @returns Returns 'true' if the action is overloaded with a different entity type, else 'false'.\n\t * @private\n\t */\n\t_isActionOverloadOnDifferentType: function (sActionName: string, sAnnotationTargetEntityType: string): boolean {\n\t\tconst sEntityType = this._getActionOverloadEntityType(sActionName);\n\t\treturn !!sEntityType && sAnnotationTargetEntityType !== sEntityType;\n\t},\n\n\tgetNavigationAvailableMap: function (lineItemCollection: DataFieldAbstractTypes[] | undefined): Record<string, unknown> | undefined {\n\t\tconst oIBNNavigationAvailableMap: Record<string, unknown> = {};\n\t\tlineItemCollection?.forEach((record) => {\n\t\t\tif (\"SemanticObject\" in record) {\n\t\t\t\tconst sKey = `${record.SemanticObject}-${record.Action}`;\n\t\t\t\tif (record.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation && !record.Inline && record.RequiresContext) {\n\t\t\t\t\tif (record.NavigationAvailable !== undefined) {\n\t\t\t\t\t\toIBNNavigationAvailableMap[sKey] = isPathAnnotationExpression(record.NavigationAvailable)\n\t\t\t\t\t\t\t? (record.NavigationAvailable as PathAnnotationExpression<boolean>).path\n\t\t\t\t\t\t\t: record.NavigationAvailable;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn Object.keys(oIBNNavigationAvailableMap).length > 0 ? oIBNNavigationAvailableMap : undefined;\n\t},\n\n\tgetUiLineItemObject: function (\n\t\tlineItemOrPresentationContext: Context,\n\t\tconvertedMetaData: ConvertedMetadata\n\t): DataFieldAbstractTypes[] | undefined {\n\t\tconst lineItemOrPresentationObject = convertedMetaData.resolvePath(lineItemOrPresentationContext.getPath()).target as\n\t\t\t| PresentationVariant\n\t\t\t| LineItem;\n\t\tif (!lineItemOrPresentationObject) return undefined;\n\t\tconst visualizations = (convertedMetaData.resolvePath(lineItemOrPresentationContext.getPath()).target as PresentationVariantType)\n\t\t\t.Visualizations;\n\n\t\tconst lineItemObject = (\n\t\t\tvisualizations\n\t\t\t\t? visualizations?.find((item) => item.value.indexOf(\"@\" + UIAnnotationTerms.LineItem) === 0)?.$target\n\t\t\t\t: lineItemOrPresentationObject\n\t\t) as LineItem;\n\t\treturn lineItemObject?.term === UIAnnotationTerms.LineItem ? lineItemObject : undefined;\n\t},\n\t/**\n\t * Creates and returns the binding expression to load a given list of properties.\n\t * @param properties List of properties used on a custom column\n\t * @returns The binding expression to load the given list of properties\n\t */\n\tcreateBindingToLoadProperties: function (properties?: string[]): CompiledBindingToolkitExpression {\n\t\tif (properties === undefined || properties.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst propertyBindings = properties?.map((prop) => pathInModel(prop)) ?? [];\n\t\treturn compileExpression(formatResult(propertyBindings, \"._formatters.StandardFormatter#loadProperties\"));\n\t},\n\t/**\n\t * Method to get column's width if defined from manifest or from customization via annotations.\n\t * @param oThis The instance of the inner model of the Table building block\n\t * @param oThis.enableAutoColumnWidth Indicates if the column width should be calculated automatically\n\t * @param oThis.widthIncludingColumnHeader Indicates if the column width should include the header\n\t * @param column Defined width of the column, which is taken with priority if not null, undefined or empty\n\t * @param dataField DataField definition object\n\t * @param dataFieldActionText DataField's text from button\n\t * @param dataModelObjectPath The object path of the data model\n\t * @param useRemUnit Indicates if the rem unit must be concatenated with the column width result\n\t * @param microChartTitle The object containing title and description of the MicroChart\n\t * @param microChartTitle.title The title of the microchart\n\t * @param microChartTitle.description The description of the microchart\n\t * @returns - Column width if defined, otherwise width is set to auto\n\t */\n\tgetColumnWidth: function (\n\t\toThis: ColumnWidthThis,\n\t\tcolumn: AnnotationTableColumn,\n\t\tdataField: MetaModelType<DataField | DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tdataFieldActionText: string | undefined,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\t\tuseRemUnit: boolean,\n\t\tmicroChartTitle?: MicroChartInfo\n\t): CompiledBindingToolkitExpression | string | number | undefined {\n\t\tif (column.width) {\n\t\t\treturn column.width;\n\t\t}\n\t\tif (oThis.enableAutoColumnWidth === true) {\n\t\t\tlet width;\n\t\t\twidth =\n\t\t\t\tthis.getColumnWidthForImage(dataModelObjectPath as DataModelObjectPath<DataFieldTypes>) ||\n\t\t\t\tthis.getColumnWidthForDataField(oThis, column, dataField, dataFieldActionText, dataModelObjectPath, microChartTitle) ||\n\t\t\t\tundefined;\n\t\t\tif (width) {\n\t\t\t\treturn useRemUnit ? `${width}rem` : width;\n\t\t\t}\n\t\t\twidth = compileExpression(\n\t\t\t\tformatResult(\n\t\t\t\t\t[\n\t\t\t\t\t\tpathInModel(\"/editMode\", \"ui\"),\n\t\t\t\t\t\tpathInModel(\"tablePropertiesAvailable\", \"internal\"),\n\t\t\t\t\t\tcolumn.name,\n\t\t\t\t\t\tuseRemUnit,\n\t\t\t\t\t\tthis._shouldIncludeHeaderInColumnwidhCalculation(oThis, column),\n\t\t\t\t\t\tcolumn.sortable ?? false,\n\t\t\t\t\t\tresolveBindingString(column.required ?? false, \"boolean\") as PathInModelExpression<boolean>\n\t\t\t\t\t],\n\t\t\t\t\tTableFormatter.getColumnWidth\n\t\t\t\t)\n\t\t\t);\n\t\t\treturn width;\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Method to get the width of the column containing an image.\n\t * @param dataModelObjectPath The data model object path\n\t * @returns - Column width if defined, otherwise null (the width is treated as a rem value)\n\t */\n\tgetColumnWidthForImage: function (dataModelObjectPath: DataModelObjectPath<DataFieldTypes>): number | null {\n\t\tlet width: number | null = null;\n\t\tconst annotations = dataModelObjectPath.targetObject?.Value?.$target?.annotations;\n\t\tconst dataType = dataModelObjectPath.targetObject?.Value?.$target?.type;\n\t\tif (\n\t\t\tdataModelObjectPath.targetObject?.Value &&\n\t\t\tgetEditMode(\n\t\t\t\tdataModelObjectPath.targetObject.Value?.$target,\n\t\t\t\tdataModelObjectPath,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tdataModelObjectPath.targetObject\n\t\t\t) === FieldEditMode.Display &&\n\t\t\tdataModelObjectPath.targetObject.Value?.$target\n\t\t) {\n\t\t\tconst hasTextAnnotation = hasText(dataModelObjectPath.targetObject.Value.$target);\n\t\t\tif (dataType === \"Edm.Stream\" && !hasTextAnnotation && annotations?.Core?.MediaType?.includes?.(\"image/\")) {\n\t\t\t\twidth = 6.2;\n\t\t\t}\n\t\t} else if (\n\t\t\tannotations &&\n\t\t\t(isImageURL(dataModelObjectPath.targetObject?.Value?.$target) || annotations?.Core?.MediaType?.includes?.(\"image/\"))\n\t\t) {\n\t\t\twidth = 6.2;\n\t\t}\n\t\treturn width;\n\t},\n\n\t/**\n\t * Check if the column header should be included in the column width.\n\t * @param table The table configuration object\n\t * @param table.widthIncludingColumnHeader Indicates if the column width should include the header\n\t * @param column The column configuration\n\t * @returns Returns true if the column width should include the header\n\t */\n\t_shouldIncludeHeaderInColumnwidhCalculation(table: ColumnWidthThis, column: AnnotationTableColumn): boolean | undefined {\n\t\treturn column.widthIncludingColumnHeader !== undefined ? column.widthIncludingColumnHeader : table.widthIncludingColumnHeader;\n\t},\n\n\t/**\n\t * Method to get the width of the column containing the DataField.\n\t * @param oThis The instance of the inner model of the Table building block\n\t * @param oThis.widthIncludingColumnHeader Indicates if the column width should include the header\n\t * @param column Defined width of the column, which is taken with priority if not null, undefined or empty\n\t * @param dataField Data Field\n\t * @param dataFieldActionText DataField's text from button\n\t * @param dataModelObjectPath The data model object path\n\t * @param microChartTitle The object containing the title and description of the MicroChart\n\t * @returns - Column width if defined, otherwise null ( the width is treated as a rem value)\n\t */\n\tgetColumnWidthForDataField: function (\n\t\toThis: ColumnWidthThis,\n\t\tcolumn: AnnotationTableColumn,\n\t\tdataField: MetaModelType<DataField | DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tdataFieldActionText: string | undefined,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\t\tmicroChartTitle?: MicroChartInfo\n\t): number | null {\n\t\tconst annotations = dataModelObjectPath.targetObject?.annotations;\n\t\tconst dataType = dataModelObjectPath.targetObject?.$Type;\n\t\tlet width: number | null = null;\n\t\tif (\n\t\t\tdataType === UIAnnotationTypes.DataFieldForAction ||\n\t\t\tdataType === UIAnnotationTypes.DataFieldForIntentBasedNavigation ||\n\t\t\t(dataType === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\t\t\t!(dataField as MetaModelType<DataFieldForAnnotation>).Target?.$AnnotationPath.includes(`@${UIAnnotationTerms.FieldGroup}`))\n\t\t) {\n\t\t\tlet nTmpTextWidth;\n\t\t\tnTmpTextWidth =\n\t\t\t\tSizeHelper.getButtonWidth(dataFieldActionText) ||\n\t\t\t\tSizeHelper.getButtonWidth(dataField?.Label?.toString()) ||\n\t\t\t\tSizeHelper.getButtonWidth((annotations as { Label?: string })?.Label); // REVIEW : This makes no sense :)\n\n\t\t\t// get width for rating or progress bar datafield\n\t\t\tconst nTmpVisualizationWidth = TableSizeHelper.getWidthForDataFieldForAnnotation(\n\t\t\t\tdataModelObjectPath.targetObject,\n\t\t\t\tthis._shouldIncludeHeaderInColumnwidhCalculation(oThis, column)\n\t\t\t).propertyWidth;\n\n\t\t\tif (nTmpVisualizationWidth > nTmpTextWidth) {\n\t\t\t\twidth = nTmpVisualizationWidth;\n\t\t\t} else if (\n\t\t\t\tdataFieldActionText ||\n\t\t\t\t(annotations &&\n\t\t\t\t\t(isAnnotationOfType(annotations, UIAnnotationTypes.DataFieldForIntentBasedNavigation) ||\n\t\t\t\t\t\tisAnnotationOfType(annotations, UIAnnotationTypes.DataFieldForAction)))\n\t\t\t) {\n\t\t\t\t// Add additional 1.8 rem to avoid showing ellipsis in some cases.\n\t\t\t\tnTmpTextWidth += 1.8;\n\t\t\t\twidth = nTmpTextWidth;\n\t\t\t}\n\t\t\twidth = width ?? this.getColumnWidthForChart(oThis, column, dataField, nTmpTextWidth, microChartTitle);\n\t\t}\n\t\treturn width;\n\t},\n\n\t/**\n\t * Method to get the width of the column containing the Chart.\n\t * @param oThis The instance of the inner model of the Table building block\n\t * @param column Defined width of the column, which is taken with priority if not null, undefined or empty\n\t * @param dataField Data Field\n\t * @param columnLabelWidth The width of the column label or button label\n\t * @param microChartTitle The object containing the title and the description of the MicroChart\n\t * @returns - Column width if defined, otherwise null (the width is treated as a rem value)\n\t */\n\tgetColumnWidthForChart(\n\t\toThis: ColumnWidthThis,\n\t\tcolumn: AnnotationTableColumn,\n\t\tdataField: MetaModelType<DataField | DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tcolumnLabelWidth: number,\n\t\tmicroChartTitle?: MicroChartInfo\n\t): number | null {\n\t\tlet chartSize,\n\t\t\twidth: number | null = null;\n\t\tif ((dataField as MetaModelType<DataFieldForAnnotation>).Target?.$AnnotationPath?.includes(`@${UIAnnotationTerms.Chart}`)) {\n\t\t\tswitch (this.getChartSize(oThis, column)) {\n\t\t\t\tcase \"XS\":\n\t\t\t\t\tchartSize = 4.4;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"S\":\n\t\t\t\t\tchartSize = 4.6;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"M\":\n\t\t\t\t\tchartSize = 5.5;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"L\":\n\t\t\t\t\tchartSize = 6.9;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tchartSize = 5.3;\n\t\t\t}\n\t\t\tcolumnLabelWidth += 1.8;\n\t\t\tif (!this.getShowOnlyChart(oThis, column) && (microChartTitle?.title.length || microChartTitle?.description.length)) {\n\t\t\t\tconst tmpText =\n\t\t\t\t\tmicroChartTitle.title.length > microChartTitle.description.length ? microChartTitle.title : microChartTitle.description;\n\t\t\t\tconst titleSize = SizeHelper.getButtonWidth(tmpText) + 7;\n\t\t\t\tconst tmpWidth = titleSize > columnLabelWidth ? titleSize : columnLabelWidth;\n\t\t\t\twidth = tmpWidth;\n\t\t\t} else if (columnLabelWidth > chartSize) {\n\t\t\t\twidth = columnLabelWidth;\n\t\t\t} else {\n\t\t\t\twidth = chartSize;\n\t\t\t}\n\t\t}\n\t\treturn width;\n\t},\n\t/**\n\t * Method to add a margin class at the control.\n\t * @param sVisualization\n\t * @param isLastField Indicates if the field is the last field in the field group\n\t * @returns Adjusting the margin\n\t */\n\tgetMarginClass: function (sVisualization: string, isLastField: boolean): string {\n\t\tlet sClass = \"\";\n\t\tif (isLastField) {\n\t\t\t//If rating indicator is last element in fieldgroup, then the 0.5rem margin added by sapMRI class of interactive rating indicator on top and bottom must be nullified.\n\t\t\tif (sVisualization == \"com.sap.vocabularies.UI.v1.VisualizationType/Rating\") {\n\t\t\t\tsClass = \"sapUiNoMarginBottom sapUiNoMarginTop\";\n\t\t\t}\n\t\t} else if (sVisualization === \"com.sap.vocabularies.UI.v1.VisualizationType/Rating\") {\n\t\t\t//If rating indicator is NOT the last element in fieldgroup, then to maintain the 0.5rem spacing between cogetMarginClassntrols (as per UX spec),\n\t\t\t//only the top margin added by sapMRI class of interactive rating indicator must be nullified.\n\n\t\t\tsClass = \"sapUiNoMarginTop\";\n\t\t} else {\n\t\t\tsClass = \"sapUiTinyMarginBottom\";\n\t\t}\n\t\treturn sClass;\n\t},\n\n\t/**\n\t * Method to get VBox visibility.\n\t * @param collection Collection of data fields in VBox\n\t * @param fieldGroupHiddenExpressions Hidden expression contained in FieldGroup\n\t * @param fieldGroup Data field containing the VBox\n\t * @returns Visibility expression\n\t */\n\tgetVBoxVisibility: function (\n\t\tcollection: Array<DataFieldForAnnotation & Hidden>,\n\t\tfieldGroupHiddenExpressions: CompiledBindingToolkitExpression,\n\t\tfieldGroup: FieldGroup & Hidden\n\t): CompiledBindingToolkitExpression {\n\t\tlet allStatic = true;\n\t\tconst hiddenPaths = [];\n\n\t\tif (fieldGroup[`@${UIAnnotationTerms.Hidden}`]) {\n\t\t\treturn fieldGroupHiddenExpressions;\n\t\t}\n\n\t\tfor (const dataField of collection) {\n\t\t\tconst hiddenAnnotationValue = dataField[`@${UIAnnotationTerms.Hidden}`];\n\t\t\tif (hiddenAnnotationValue === undefined || hiddenAnnotationValue === false) {\n\t\t\t\thiddenPaths.push(false);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenAnnotationValue === true) {\n\t\t\t\thiddenPaths.push(true);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenAnnotationValue.$Path) {\n\t\t\t\thiddenPaths.push(pathInModel(hiddenAnnotationValue.$Path));\n\t\t\t\tallStatic = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (typeof hiddenAnnotationValue === \"object\") {\n\t\t\t\t// Dynamic expression found in a field\n\t\t\t\treturn fieldGroupHiddenExpressions;\n\t\t\t}\n\t\t}\n\n\t\tconst hasAnyPathExpressions = constant(hiddenPaths.length > 0 && allStatic !== true);\n\t\tconst hasAllHiddenStaticExpressions = constant(hiddenPaths.length > 0 && !hiddenPaths.includes(false) && allStatic);\n\n\t\treturn compileExpression(\n\t\t\tifElse(\n\t\t\t\thasAnyPathExpressions,\n\t\t\t\tformatResult(hiddenPaths, TableFormatter.getVBoxVisibility),\n\t\t\t\tifElse(hasAllHiddenStaticExpressions, constant(false), constant(true))\n\t\t\t)\n\t\t);\n\t},\n\n\t/**\n\t * Method to get the stable ID of a table element (column or FieldGroup label).\n\t * @param tableId Current object ID\n\t * @param elementId Element Id or suffix\n\t * @param dataModelObjectPath DataModelObjectPath of the dataField\n\t * @returns The stable ID for a given column\n\t */\n\tgetElementStableId: function (\n\t\ttableId: string | undefined,\n\t\telementId: string,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>\n\t): string | undefined {\n\t\tif (!tableId) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst dataField = dataModelObjectPath.targetObject;\n\t\tlet dataFieldPart: string | DataFieldAbstractTypes;\n\t\tswitch (dataField?.$Type) {\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\tdataFieldPart = dataField.Target.value;\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\t\tdataFieldPart = dataField;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdataFieldPart = (dataField as DataField).Value?.path ?? \"\";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn generate([tableId, elementId, dataFieldPart]);\n\t},\n\n\t/**\n\t * Method to get the stable ID of the column.\n\t * @param id Current object ID\n\t * @param dataModelObjectPath DataModelObjectPath of the dataField\n\t * @returns The stable ID for a given column\n\t */\n\tgetColumnStableId: function (id: string, dataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>): string | undefined {\n\t\treturn TableHelper.getElementStableId(id, \"C\", dataModelObjectPath);\n\t},\n\n\tgetFieldGroupLabelStableId: function (\n\t\tid: string,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>\n\t): string | undefined {\n\t\treturn TableHelper.getElementStableId(id, \"FGLabel\", dataModelObjectPath);\n\t},\n\n\t/**\n\t * Method to get the expression for the 'press' event for the DataFieldForActionButton.\n\t * @param tableProperties The properties of the table control\n\t * @param tableProperties.contextObjectPath The datamodel object path for the table\n\t * @param tableProperties.contentId The id of the MDC table control\n\t * @param dataField Value of the DataPoint\n\t * @param entitySetName Name of the EntitySet\n\t * @param operationAvailableMap OperationAvailableMap as stringified JSON object\n\t * @param actionObject\n\t * @param isNavigable Action either triggers navigation or not\n\t * @param enableAutoScroll Action either triggers scrolling to the newly created items in the related table or not\n\t * @param defaultValuesExtensionFunction Function name to prefill dialog parameters\n\t * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n\t * @returns The binding expression\n\t */\n\tpressEventDataFieldForActionButton: function (\n\t\ttableProperties: {\n\t\t\tcontextObjectPath: DataModelObjectPath<LineItem | SelectionPresentationVariant | PresentationVariant>;\n\t\t\tcontentId: string;\n\t\t},\n\t\tdataField: DataFieldForAction | undefined,\n\t\tentitySetName: string,\n\t\toperationAvailableMap: string,\n\t\tactionObject?: MetaModelAction | MetaModelAction[] | string,\n\t\tisNavigable = false,\n\t\tenableAutoScroll?: boolean,\n\t\tdefaultValuesExtensionFunction?: string,\n\t\tforContextMenu?: boolean\n\t): CompiledBindingToolkitExpression {\n\t\tif (!dataField) return undefined;\n\t\tconst sActionName = dataField.Action,\n\t\t\ttargetEntityTypeName = tableProperties.contextObjectPath.targetEntityType.fullyQualifiedName,\n\t\t\tstaticAction =\n\t\t\t\ttypeof actionObject !== \"string\" &&\n\t\t\t\t(this._isStaticAction(actionObject, sActionName) ||\n\t\t\t\t\tthis._isActionOverloadOnDifferentType(sActionName.toString(), targetEntityTypeName)),\n\t\t\tapplicableProperty = !forContextMenu ? \"aApplicable\" : \"aApplicableForContextMenu\",\n\t\t\tnotApplicableProperty = !forContextMenu ? \"aNotApplicable\" : \"aNotApplicableForContextMenu\",\n\t\t\tcontextMenuPath = !forContextMenu ? \"\" : \"contextmenu/\",\n\t\t\tcontext = pathInModel(`${contextMenuPath}selectedContexts`, \"internal\"),\n\t\t\tparams = {\n\t\t\t\tcontexts: !staticAction ? context : null,\n\t\t\t\tbStaticAction: staticAction ? staticAction : undefined,\n\t\t\t\tentitySetName: entitySetName,\n\t\t\t\tapplicableContexts: !staticAction\n\t\t\t\t\t? pathInModel(`dynamicActions/${dataField.Action}/${applicableProperty}/`, \"internal\")\n\t\t\t\t\t: null,\n\t\t\t\tnotApplicableContexts: !staticAction\n\t\t\t\t\t? pathInModel(`dynamicActions/${dataField.Action}/${notApplicableProperty}/`, \"internal\")\n\t\t\t\t\t: null,\n\t\t\t\tisNavigable: isNavigable,\n\t\t\t\tenableAutoScroll: enableAutoScroll,\n\t\t\t\tdefaultValuesExtensionFunction: defaultValuesExtensionFunction,\n\t\t\t\tinvocationGrouping: dataField?.InvocationGrouping === \"UI.OperationGroupingType/ChangeSet\" ? \"ChangeSet\" : \"Isolated\",\n\t\t\t\tcontrolId: tableProperties.contentId,\n\t\t\t\toperationAvailableMap: operationAvailableMap,\n\t\t\t\tlabel: dataField.Label\n\t\t\t};\n\t\treturn compileExpression(fn(\"API.onActionPress\", [ref(\"$event\"), ref(\"$controller\"), dataField.Action, params]));\n\t\t//return ActionHelper.getPressEventDataFieldForActionButton(table.id!, dataField, params, operationAvailableMap);\n\t},\n\n\t/**\n\t * Method to determine the binding expression for 'enabled' property of DataFieldForAction actions.\n\t * @param tableDefinition The table definition from the table converter\n\t * @param actionName The name of the action\n\t * @param isBound IsBound for Action\n\t * @param actionObject\n\t * @param enableOnSelect Define the enabling of the action (single or multiselect)\n\t * @param annotationTargetEntityType The entity type of the annotation target\n\t * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n\t * @param isCopy\n\t * @returns A binding expression to define the 'enabled' property of the action\n\t */\n\tisDataFieldForActionEnabled: function (\n\t\ttableDefinition: TableVisualization,\n\t\tactionName: string | String,\n\t\tisBound: boolean,\n\t\tactionObject?: MetaModelAction | MetaModelAction[] | string,\n\t\tenableOnSelect?: string,\n\t\tannotationTargetEntityType?: EntityType,\n\t\tforContextMenu?: boolean,\n\t\tisCopy?: boolean\n\t): string | boolean {\n\t\tif (!annotationTargetEntityType) return false;\n\n\t\tconst isStaticAction = this._isStaticAction(actionObject, actionName);\n\n\t\t// Check for action overload on a different Entity type.\n\t\t// If yes, table row selection is not required to enable this action.\n\t\tif (this._isActionOverloadOnDifferentType(actionName.toString(), annotationTargetEntityType.fullyQualifiedName)) {\n\t\t\t// Action overload defined on different entity type\n\t\t\tconst oOperationAvailableMap = tableDefinition && JSON.parse(tableDefinition.operationAvailableMap);\n\t\t\tif (oOperationAvailableMap?.hasOwnProperty(actionName)) {\n\t\t\t\t// Core.OperationAvailable annotation defined for the action.\n\t\t\t\t// Need to refer to internal model for enabled property of the dynamic action.\n\t\t\t\t// return compileBinding(bindingExpression(\"dynamicActions/\" + sActionName + \"/bEnabled\", \"internal\"), true);\n\t\t\t\treturn !forContextMenu\n\t\t\t\t\t? `{= \\${internal>dynamicActions/${actionName}/bEnabled} }`\n\t\t\t\t\t: `{= \\${internal>dynamicActions/${actionName}/bEnabledForContextMenu} }`;\n\t\t\t}\n\t\t\t// Consider the action just like any other static DataFieldForAction.\n\t\t\treturn true;\n\t\t}\n\t\tif (!isBound || isStaticAction) {\n\t\t\treturn true;\n\t\t}\n\t\tconst numberOfSelectedContexts = isCopy\n\t\t\t? ActionHelper.getNumberOfContextsExpression(\"single\", forContextMenu)\n\t\t\t: ActionHelper.getNumberOfContextsExpression(enableOnSelect ?? \"multiselect\", forContextMenu);\n\n\t\tlet dataFieldForActionEnabledExpression = \"\";\n\n\t\tconst action = !forContextMenu\n\t\t\t? `\\${internal>dynamicActions/${actionName}/bEnabled}`\n\t\t\t: `\\${internal>dynamicActions/${actionName}/bEnabledForContextMenu}`;\n\t\tdataFieldForActionEnabledExpression = `${numberOfSelectedContexts} && ${action}`;\n\n\t\treturn `{= ${dataFieldForActionEnabledExpression}}`;\n\t},\n\t/**\n\t * Method to determine the binding expression for 'enabled' property of DataFieldForIBN actions.\n\t * @param tableProperties The properties of the table control\n\t * @param tableProperties.collection  The collection context to be used\n\t * @param tableProperties.tableDefinition The table definition from the table converter\n\t * @param dataField The value of the data field\n\t * @param requiresContext RequiresContext for IBN\n\t * @param isNavigationAvailable Define if the navigation is available\n\t * @param forContextMenu\n\t * @returns A binding expression to define the 'enabled' property of the action\n\t */\n\tisDataFieldForIBNEnabled: function (\n\t\ttableProperties: {\n\t\t\tcollection: Context;\n\t\t\ttableDefinition: TableVisualization;\n\t\t},\n\t\tdataField: DataFieldForIntentBasedNavigation,\n\t\trequiresContext: boolean | PropertyAnnotationValue<Boolean>,\n\t\tisNavigationAvailable?: boolean | PropertyAnnotationValue<Boolean>,\n\t\tforContextMenu?: boolean\n\t): string | boolean {\n\t\tlet isNavigationAvailablePath = null;\n\t\tif (isPathAnnotationExpression(isNavigationAvailable)) {\n\t\t\tisNavigationAvailablePath = isNavigationAvailable.path;\n\t\t}\n\t\tconst isAnalyticalTable = tableProperties?.tableDefinition?.enableAnalytics;\n\n\t\tif (!requiresContext) {\n\t\t\tconst entitySet = tableProperties.collection.getPath();\n\t\t\tconst metaModel = tableProperties.collection.getModel();\n\t\t\tif (isNavigationAvailable === false && !isAnalyticalTable) {\n\t\t\t\tLog.warning(\"NavigationAvailable as false is incorrect usage\");\n\t\t\t\treturn false;\n\t\t\t} else if (\n\t\t\t\tisNavigationAvailablePath &&\n\t\t\t\t!isAnalyticalTable &&\n\t\t\t\tisPathAnnotationExpression(dataField?.NavigationAvailable) &&\n\t\t\t\tmetaModel.getObject(entitySet + \"/$Partner\") === dataField.NavigationAvailable.path.split(\"/\")[0]\n\t\t\t) {\n\t\t\t\treturn `{= \\${${isNavigationAvailablePath.substring(\n\t\t\t\t\tisNavigationAvailablePath.indexOf(\"/\") + 1,\n\t\t\t\t\tisNavigationAvailablePath.length\n\t\t\t\t)}}}`;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tlet dataFieldForIBNEnabledExpression = \"\",\n\t\t\tnumberOfSelectedContexts,\n\t\t\taction;\n\n\t\tif (isNavigationAvailable === true || isAnalyticalTable) {\n\t\t\tdataFieldForIBNEnabledExpression = !(forContextMenu ?? false)\n\t\t\t\t? \"%{internal>numberOfSelectedContexts} >= 1\"\n\t\t\t\t: \"%{internal>contextmenu/numberOfSelectedContexts} >= 1\";\n\t\t} else if (isNavigationAvailable === false) {\n\t\t\tLog.warning(\"NavigationAvailable as false is incorrect usage\");\n\t\t\treturn false;\n\t\t} else {\n\t\t\tnumberOfSelectedContexts = !(forContextMenu ?? false)\n\t\t\t\t? \"%{internal>numberOfSelectedContexts} >= 1\"\n\t\t\t\t: \"%{internal>contextmenu/numberOfSelectedContexts} >= 1\";\n\t\t\taction = !(forContextMenu ?? false)\n\t\t\t\t? `\\${internal>ibn/${dataField.SemanticObject}-${dataField.Action}/bEnabled}`\n\t\t\t\t: `\\${internal>ibn/${dataField.SemanticObject}-${dataField.Action}/bEnabledForContextMenu}`;\n\t\t\tdataFieldForIBNEnabledExpression = numberOfSelectedContexts + \" && \" + action;\n\t\t}\n\n\t\treturn `{= ${dataFieldForIBNEnabledExpression}}`;\n\t},\n\n\tbuildExpressionForMultiValueFieldReadOnly: function (table: TableBlock): CompiledBindingToolkitExpression {\n\t\treturn compileExpression(\n\t\t\tifElse(\n\t\t\t\tor(table.readOnly === true, and(UI.IsInactive, table.creationMode.name === \"InlineCreationRows\")),\n\t\t\t\tconstant(true),\n\t\t\t\tequal(table.fieldMode, \"nowrapper\")\n\t\t\t)\n\t\t);\n\t},\n\n\t/**\n\t * Method to set the visibility of the label for the column header.\n\t * @param datafield DataField\n\t * @param dataFieldCollection List of items inside a fieldgroup (if any)\n\t * @returns `true` if the header label needs to be visible else false.\n\t */\n\tsetHeaderLabelVisibility: function (\n\t\tdatafield: MetaModelType<DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tdataFieldCollection?: MetaModelType<DataFieldForAction | DataFieldForIntentBasedNavigation>[]\n\t): boolean {\n\t\t// If Inline button/navigation action, return false, else true;\n\t\tif (!dataFieldCollection) {\n\t\t\tif (datafield.$Type?.includes(\"DataFieldForAction\") && datafield.Inline) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (datafield.$Type?.includes(\"DataFieldForIntentBasedNavigation\") && datafield.Inline) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t// In Fieldgroup, If NOT all datafield/datafieldForAnnotation exists with hidden, return true;\n\t\treturn dataFieldCollection.some(function (oDC) {\n\t\t\tif (\n\t\t\t\t(oDC.$Type === UIAnnotationTypes.DataField || oDC.$Type === UIAnnotationTypes.DataFieldForAnnotation) &&\n\t\t\t\t(oDC as unknown as Hidden)[`@${UIAnnotationTerms.Hidden}`] !== true\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Method to get the text from the DataFieldForAnnotation into the column.\n\t * @param oDataField DataPoint's Value\n\t * @param oContext Context object of the LineItem\n\t * @param oContext.context Context object of the LineItem\n\t * @returns String from label referring to action text\n\t */\n\tgetTextOnActionField: function (\n\t\toDataField: MetaModelType<DataFieldAbstractTypes>,\n\t\toContext: { context: BaseContext }\n\t): string | undefined {\n\t\tif (\n\t\t\toDataField.$Type === UIAnnotationTypes.DataFieldForAction ||\n\t\t\toDataField.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation\n\t\t) {\n\t\t\treturn oDataField.Label;\n\t\t}\n\t\t// for FieldGroup containing DataFieldForAnnotation\n\t\tif (\n\t\t\toDataField.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\t\toContext.context.getObject(\"Target/$AnnotationPath\").indexOf(\"@\" + UIAnnotationTerms.FieldGroup) > -1\n\t\t) {\n\t\t\tconst sPathDataFields = \"Target/$AnnotationPath/Data/\";\n\t\t\tconst aMultipleLabels: string[] = [];\n\t\t\tfor (const i in oContext.context.getObject(sPathDataFields)) {\n\t\t\t\tif (\n\t\t\t\t\toContext.context.getObject(`${sPathDataFields + i}/$Type`) === UIAnnotationTypes.DataFieldForAction ||\n\t\t\t\t\toContext.context.getObject(`${sPathDataFields + i}/$Type`) === UIAnnotationTypes.DataFieldForIntentBasedNavigation\n\t\t\t\t) {\n\t\t\t\t\taMultipleLabels.push(oContext.context.getObject(`${sPathDataFields + i}/Label`));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// In case there are multiple actions inside a Field Group select the largest Action Label\n\t\t\tif (aMultipleLabels.length > 1) {\n\t\t\t\treturn aMultipleLabels.reduce(function (a: string, b: string) {\n\t\t\t\t\treturn a.length > b.length ? a : b;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn aMultipleLabels.length === 0 ? undefined : aMultipleLabels.toString();\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n\t_getResponsiveTableColumnSettings: function (oThis: ColumnWidthThis, oColumn: AnnotationTableColumn): TableColumnSettings | undefined {\n\t\tif (oThis.tableType === \"ResponsiveTable\") {\n\t\t\treturn oColumn.settings;\n\t\t}\n\t\treturn undefined;\n\t},\n\n\tgetChartSize: function (oThis: ColumnWidthThis, oColumn: AnnotationTableColumn): string {\n\t\tconst settings = this._getResponsiveTableColumnSettings(oThis, oColumn);\n\t\tif (settings && settings.microChartSize) {\n\t\t\treturn settings.microChartSize;\n\t\t}\n\t\treturn \"XS\";\n\t},\n\tgetShowOnlyChart: function (oThis: ColumnWidthThis, oColumn: AnnotationTableColumn): boolean {\n\t\tconst settings = this._getResponsiveTableColumnSettings(oThis, oColumn);\n\t\tif (settings && settings.showMicroChartLabel) {\n\t\t\treturn !settings.showMicroChartLabel;\n\t\t}\n\t\treturn true;\n\t},\n\n\tgetDelegate: function (table: TableVisualization, isALP: boolean, entityName: string, filterOnActiveEntities: boolean): string {\n\t\tlet delegate: {\n\t\t\tname: string;\n\t\t\tpayload?:\n\t\t\t\t| { collectionName?: string; filterOnActiveEntities?: boolean; aggregationConfiguration?: { leafLevel: boolean } }\n\t\t\t\t| {\n\t\t\t\t\t\thierarchyQualifier: string;\n\t\t\t\t\t\tinitialExpansionLevel?: number;\n\t\t\t\t\t\tfilterOnActiveEntities: boolean;\n\t\t\t\t\t\tcreateInPlace?: boolean;\n\t\t\t\t\t\taggregationConfiguration?: { leafLevel: boolean };\n\t\t\t\t  };\n\t\t};\n\t\tif (isALP) {\n\t\t\t// We don't support TreeTable in ALP\n\t\t\tif (table.control.type === \"TreeTable\") {\n\t\t\t\tthrow new Error(\"TreeTable not supported in Analytical ListPage\");\n\t\t\t}\n\t\t\tdelegate = {\n\t\t\t\tname: \"sap/fe/macros/table/delegates/ALPTableDelegate\",\n\t\t\t\tpayload: {\n\t\t\t\t\tcollectionName: entityName\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (table.enableAnalytics && filterOnActiveEntities) {\n\t\t\t\tdelegate.payload!.filterOnActiveEntities = true;\n\t\t\t}\n\t\t} else if (table.control.type === \"TreeTable\") {\n\t\t\tif (!table.control.hierarchyQualifier) {\n\t\t\t\tthrow new Error(\"A hierarchy qualifier is mandatory with a TreeTable\");\n\t\t\t}\n\t\t\tdelegate = {\n\t\t\t\tname: \"sap/fe/macros/table/delegates/TreeTableDelegate\",\n\t\t\t\tpayload: {\n\t\t\t\t\thierarchyQualifier: table.control.hierarchyQualifier,\n\t\t\t\t\tinitialExpansionLevel: table.annotation.initialExpansionLevel,\n\t\t\t\t\tfilterOnActiveEntities,\n\t\t\t\t\tcreateInPlace: table.control.createInPlace === true\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\tdelegate = {\n\t\t\t\tname: \"sap/fe/macros/table/delegates/TableDelegate\"\n\t\t\t};\n\t\t\tif (table.enableAnalytics && filterOnActiveEntities) {\n\t\t\t\tdelegate.payload = {\n\t\t\t\t\tfilterOnActiveEntities\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (table.enableAnalytics === true && table.control.analyticalConfiguration?.aggregationOnLeafLevel === true) {\n\t\t\tdelegate.payload = { ...delegate.payload, ...{ aggregationConfiguration: { leafLevel: true } } };\n\t\t}\n\n\t\treturn JSON.stringify(delegate);\n\t},\n\n\t/**\n\t * @param oFastCreationRow\n\t * @param sPath\n\t * @param oContext\n\t * @param oModel\n\t * @param oFinalUIState\n\t */\n\tenableFastCreationRow: async function (\n\t\toFastCreationRow: CreationRow | undefined,\n\t\tsPath: string,\n\t\toContext: v4Context,\n\t\toModel: ODataModel,\n\t\toFinalUIState: Promise<unknown>\n\t): Promise<void> {\n\t\tlet oFastCreationListBinding, oFastCreationContext;\n\n\t\tif (oFastCreationRow) {\n\t\t\ttry {\n\t\t\t\tawait oFinalUIState;\n\t\t\t\t// If a draft is discarded while a message strip filter is active on the table there is a table rebind caused by the DataStateIndicator\n\t\t\t\t// To prevent a new creation row binding being created at that moment we check if the context is already deleted\n\t\t\t\tif (CommonUtils.getIsEditable(oFastCreationRow) && !oContext.isDeleted()) {\n\t\t\t\t\toFastCreationListBinding = oModel.bindList(sPath, oContext, [], [], {\n\t\t\t\t\t\t$$updateGroupId: \"doNotSubmit\",\n\t\t\t\t\t\t$$groupId: \"doNotSubmit\"\n\t\t\t\t\t});\n\t\t\t\t\t// Workaround suggested by OData model v4 colleagues\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\toFastCreationListBinding.refreshInternal = function (): void {\n\t\t\t\t\t\t/* do nothing */\n\t\t\t\t\t};\n\t\t\t\t\toFastCreationContext = oFastCreationListBinding.create();\n\t\t\t\t\toFastCreationRow.setBindingContext(oFastCreationContext);\n\n\t\t\t\t\t// this is needed to avoid console error\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait oFastCreationContext.created();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tLog.trace(\"transient fast creation context deleted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (oError) {\n\t\t\t\tLog.error(\"Error while computing the final UI state\", oError as string);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Evaluates, if action should be shown in the table context menu.\n\t * Show action only for bound actions, when requiresSelection is set for custom actions or when context is required for IBN actions.\n\t * @param action The instance of the action\n\t * @param contextObjectPath The data model object path\n\t * @returns Returns true, if action should be displayed in context menu, false otherwise\n\t */\n\tisActionShownInContextMenu: function (\n\t\taction: BaseAction | AnnotationAction | CustomAction,\n\t\tcontextObjectPath: DataModelObjectPath<unknown>\n\t): boolean {\n\t\tconst dataField = action.annotationPath\n\t\t\t? (contextObjectPath.convertedTypes.resolvePath(action.annotationPath).target as\n\t\t\t\t\t| DataFieldForAction\n\t\t\t\t\t| DataFieldForIntentBasedNavigation)\n\t\t\t: undefined;\n\t\tswitch (dataField?.$Type) {\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAction\": {\n\t\t\t\tconst actionTarget = dataField.ActionTarget;\n\t\t\t\treturn (\n\t\t\t\t\tactionTarget?.isBound === true &&\n\t\t\t\t\t!actionTarget.parameters[0].isCollection &&\n\t\t\t\t\tactionTarget.sourceEntityType === contextObjectPath.targetEntityType\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\":\n\t\t\t\treturn dataField.RequiresContext?.valueOf() === true;\n\n\t\t\tdefault:\n\t\t\t\tif (action.type === \"Default\") {\n\t\t\t\t\treturn (action as CustomAction).requiresSelection === true;\n\t\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n};\n(TableHelper.getNavigationAvailableMap as { requiresIContext?: boolean }).requiresIContext = true;\n(TableHelper.getTextOnActionField as { requiresIContext?: boolean }).requiresIContext = true;\n\nexport default TableHelper;\n"],"mappings":"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","ignoreList":[],"file":"TableHelper-dbg.js"}