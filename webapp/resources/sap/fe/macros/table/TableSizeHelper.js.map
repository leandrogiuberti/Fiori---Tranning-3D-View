{"version":3,"file":"TableSizeHelper.js","names":["TableSizeHelper","getMDCColumnWidthFromDataField","dataField","properties","convertedMetaData","widthIncludingColumnHeader","arguments","length","undefined","property","find","prop","annotationPath","resolvePath","target","fullyQualifiedName","this","getMDCColumnWidthFromProperty","isSortableColumn","isColumnRequired","mWidthCalculation","Object","assign","headerGap","gap","truncateLabel","excludeProperties","required","visualSettings","widthCalculation","types","propertyInfos","map","propName","_property","key","propertyTypeConfig","dataType","typeConfig","TypeMap","getTypeConfig","formatOptions","constraints","typeInstance","filter","item","size","TableUtil","calcColumnWidth","label","Log","error","parseFloat","replace","getWidthForDataFieldForAnnotation","showDataFieldsLabel","oTargetedProperty","isAnnotationOfType","Target","$target","nPropertyWidth","fLabelWidth","Visualization","nbStars","TargetValue","parseInt","sLabel","Label","toString","SizeHelper","getButtonWidth","isPathAnnotationExpression","fn","labelWidth","propertyWidth","getWidthForDataField","Value","oTextArrangementTarget","annotations","Common","Text","displayMode","getDisplayMode","$Type"],"sources":["./TableSizeHelper.ts"],"sourcesContent":["import type { Property, ServiceObject } from \"@sap-ux/vocabularies-types\";\nimport type { ConvertedMetadata } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { ContactType } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport { CommunicationAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport type {\n\tDataField,\n\tDataFieldForAction,\n\tDataFieldForAnnotation,\n\tDataFieldForIntentBasedNavigation,\n\tDataPointType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport { isAnnotationOfType, isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport type { EnhancedFEPropertyInfo } from \"sap/fe/macros/table/TableAPI\";\nimport TableUtil from \"sap/m/table/Util\";\nimport type TypeConfig from \"sap/ui/mdc/TypeConfig\";\nimport TypeMap from \"sap/ui/mdc/odata/v4/TypeMap\";\n\nconst TableSizeHelper = {\n\t/**\n\t * Method to calculate the width of the MDCColumn.\n\t * @param dataField The Property or PropertyInfo Object for which the width will be calculated.\n\t * @param properties An array containing all property definitions (optional)\n\t * @param convertedMetaData\n\t * @param widthIncludingColumnHeader Indicates if the label should be a part of the width calculation\n\t * @private\n\t * @alias sap.fe.macros.TableSizeHelper\n\t * @returns The width of the column.\n\t */\n\tgetMDCColumnWidthFromDataField: function (\n\t\tdataField: DataField | Property | undefined,\n\t\tproperties: EnhancedFEPropertyInfo[],\n\t\tconvertedMetaData: ConvertedMetadata,\n\t\twidthIncludingColumnHeader = false\n\t): number {\n\t\tconst property = properties.find(\n\t\t\t(prop) =>\n\t\t\t\tprop.annotationPath &&\n\t\t\t\tconvertedMetaData.resolvePath<ServiceObject>(prop.annotationPath)?.target?.fullyQualifiedName ===\n\t\t\t\t\tdataField?.fullyQualifiedName\n\t\t);\n\t\treturn property ? this.getMDCColumnWidthFromProperty(property, properties, widthIncludingColumnHeader) : 0;\n\t},\n\n\t/**\n\t *  Method to calculate the width of the MDCColumn.\n\t * @param property The PropertyInfo object for which the width is calculated\n\t * @param properties  An array containing all property definitions (optional)\n\t * @param widthIncludingColumnHeader Indicates if the label is part of the width calculation\n\t * @param isSortableColumn Indicates if the column is sortable\n\t * @param isColumnRequired Indicates if the column is required\n\t * @returns The width of the column.\n\t */\n\tgetMDCColumnWidthFromProperty: function (\n\t\tproperty: EnhancedFEPropertyInfo,\n\t\tproperties: EnhancedFEPropertyInfo[],\n\t\twidthIncludingColumnHeader = false,\n\t\tisSortableColumn = false,\n\t\tisColumnRequired = false\n\t): number {\n\t\tconst mWidthCalculation = Object.assign(\n\t\t\t{\n\t\t\t\theaderGap: widthIncludingColumnHeader && isSortableColumn,\n\t\t\t\tgap: 0,\n\t\t\t\ttruncateLabel: !widthIncludingColumnHeader,\n\t\t\t\texcludeProperties: [],\n\t\t\t\trequired: isColumnRequired\n\t\t\t},\n\t\t\tproperty.visualSettings?.widthCalculation\n\t\t);\n\n\t\tlet types;\n\t\tif (property.propertyInfos?.length) {\n\t\t\ttypes = property.propertyInfos\n\t\t\t\t.map((propName) => {\n\t\t\t\t\tconst prop = properties.find((_property) => _property.key === propName);\n\t\t\t\t\t//add the typeConfig to the properties as it's not available in the table value help\n\t\t\t\t\tconst propertyTypeConfig =\n\t\t\t\t\t\tprop && prop.dataType && !prop.typeConfig\n\t\t\t\t\t\t\t? TypeMap.getTypeConfig(prop.dataType, prop.formatOptions, prop.constraints)\n\t\t\t\t\t\t\t: null;\n\t\t\t\t\treturn propertyTypeConfig ? propertyTypeConfig.typeInstance : prop?.typeConfig?.typeInstance;\n\t\t\t\t})\n\t\t\t\t.filter((item) => item);\n\t\t} else {\n\t\t\tlet propertyTypeConfig: TypeConfig | null = null;\n\t\t\t//add the typeConfig to the properties as it's not available in the table value help\n\t\t\tif (property.dataType && !property.typeConfig) {\n\t\t\t\tpropertyTypeConfig = TypeMap.getTypeConfig(property.dataType, property.formatOptions, property.constraints);\n\t\t\t}\n\t\t\tif (property.typeConfig?.typeInstance || propertyTypeConfig) {\n\t\t\t\ttypes = propertyTypeConfig ? [propertyTypeConfig.typeInstance] : [property.typeConfig?.typeInstance];\n\t\t\t}\n\t\t}\n\t\tconst size = types ? TableUtil.calcColumnWidth(types, property.label, mWidthCalculation) : null;\n\t\tif (!size) {\n\t\t\tLog.error(`Cannot compute the column width for property: ${property.key}`);\n\t\t}\n\t\treturn size ? parseFloat(size.replace(\"Rem\", \"\")) : 0;\n\t},\n\n\t/**\n\t * Method to calculate the  width of a DataFieldAnnotation object contained in a fieldGroup.\n\t * @param dataField DataFieldAnnotation object.\n\t * @param widthIncludingColumnHeader Indicates if the column header should be a part of the width calculation.\n\t * @param properties Array containing all PropertyInfo objects.\n\t * @param convertedMetaData\n\t * @param showDataFieldsLabel Label is displayed inside the field\n\t * @private\n\t * @alias sap.fe.macros.TableSizeHelper\n\t * @returns Object containing the width of the label and the width of the property.\n\t */\n\tgetWidthForDataFieldForAnnotation: function (\n\t\tdataField: DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation | undefined,\n\t\twidthIncludingColumnHeader?: boolean,\n\t\tproperties?: EnhancedFEPropertyInfo[],\n\t\tconvertedMetaData?: ConvertedMetadata,\n\t\tshowDataFieldsLabel = false\n\t): { labelWidth: number; propertyWidth: number } {\n\t\tconst oTargetedProperty = isAnnotationOfType<DataFieldForAnnotation>(dataField, UIAnnotationTypes.DataFieldForAnnotation)\n\t\t\t? (dataField?.Target?.$target as DataPointType | ContactType | undefined)\n\t\t\t: undefined;\n\t\tlet nPropertyWidth = 0,\n\t\t\tfLabelWidth = 0;\n\t\tif (isAnnotationOfType<DataPointType>(oTargetedProperty, UIAnnotationTypes.DataPointType) && oTargetedProperty?.Visualization) {\n\t\t\tswitch (oTargetedProperty.Visualization) {\n\t\t\t\tcase \"UI.VisualizationType/Rating\":\n\t\t\t\t\tconst nbStars = oTargetedProperty.TargetValue;\n\t\t\t\t\tnPropertyWidth = parseInt(nbStars, 10) * 1.375;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"UI.VisualizationType/Progress\":\n\t\t\t\tdefault:\n\t\t\t\t\tnPropertyWidth = 5;\n\t\t\t}\n\t\t\tconst sLabel = oTargetedProperty ? (oTargetedProperty as { label?: string }).label : dataField?.Label?.toString() || \"\";\n\t\t\tfLabelWidth = showDataFieldsLabel && sLabel ? SizeHelper.getButtonWidth(sLabel) : 0;\n\t\t} else if (\n\t\t\tconvertedMetaData &&\n\t\t\tproperties &&\n\t\t\tisAnnotationOfType<ContactType>(oTargetedProperty, CommunicationAnnotationTypes.ContactType) &&\n\t\t\tisPathAnnotationExpression(oTargetedProperty.fn)\n\t\t) {\n\t\t\tnPropertyWidth = this.getMDCColumnWidthFromDataField(\n\t\t\t\toTargetedProperty.fn.$target,\n\t\t\t\tproperties,\n\t\t\t\tconvertedMetaData,\n\t\t\t\twidthIncludingColumnHeader\n\t\t\t);\n\t\t}\n\t\treturn { labelWidth: fLabelWidth, propertyWidth: nPropertyWidth };\n\t},\n\n\t/**\n\t * Method to calculate the width of a DataField object.\n\t * @param dataField DataFieldAnnotation object.\n\t * @param showDataFieldsLabel Label is displayed inside the field.\n\t * @param properties Array containing all PropertyInfo objects.\n\t * @param convertedMetaData Context Object of the parent property.\n\t * @private\n\t * @alias sap.fe.macros.TableSizeHelper\n\t * @returns {object} Object containing the width of the label and the width of the property.\n\t */\n\n\tgetWidthForDataField: function (\n\t\tdataField: DataField,\n\t\tshowDataFieldsLabel: boolean,\n\t\tproperties: EnhancedFEPropertyInfo[],\n\t\tconvertedMetaData: ConvertedMetadata,\n\t\twidthIncludingColumnHeader: boolean\n\t): { labelWidth: number; propertyWidth: number } {\n\t\tconst oTargetedProperty = dataField.Value?.$target,\n\t\t\toTextArrangementTarget = oTargetedProperty?.annotations?.Common?.Text,\n\t\t\tdisplayMode = getDisplayMode(dataField.Value?.$target);\n\n\t\tlet nPropertyWidth = 0,\n\t\t\tfLabelWidth = 0;\n\t\tif (oTargetedProperty) {\n\t\t\tswitch (displayMode) {\n\t\t\t\tcase \"Description\":\n\t\t\t\t\tnPropertyWidth =\n\t\t\t\t\t\tthis.getMDCColumnWidthFromDataField(\n\t\t\t\t\t\t\toTextArrangementTarget.$target,\n\t\t\t\t\t\t\tproperties,\n\t\t\t\t\t\t\tconvertedMetaData,\n\t\t\t\t\t\t\twidthIncludingColumnHeader\n\t\t\t\t\t\t) - 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DescriptionValue\":\n\t\t\t\tcase \"ValueDescription\":\n\t\t\t\tcase \"Value\":\n\t\t\t\tdefault:\n\t\t\t\t\tnPropertyWidth =\n\t\t\t\t\t\tthis.getMDCColumnWidthFromDataField(oTargetedProperty, properties, convertedMetaData, widthIncludingColumnHeader) -\n\t\t\t\t\t\t1;\n\t\t\t}\n\t\t\tconst sLabel = dataField.Label ? dataField.Label : oTargetedProperty.label;\n\t\t\tfLabelWidth = showDataFieldsLabel && sLabel ? SizeHelper.getButtonWidth(sLabel) : 0;\n\t\t} else {\n\t\t\tLog.error(`Cannot compute width for type object: ${dataField.$Type}`);\n\t\t}\n\t\treturn { labelWidth: fLabelWidth, propertyWidth: nPropertyWidth };\n\t}\n};\n\nexport default TableSizeHelper;\n"],"mappings":";;;;wTAqBA,MAAMA,EAAkB,CAWvBC,+BAAgC,SAC/BC,EACAC,EACAC,GAES,IADTC,EAA0BC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAE7B,MAAMG,EAAWN,EAAWO,KAC1BC,GACAA,EAAKC,gBACLR,EAAkBS,YAA2BF,EAAKC,iBAAiBE,QAAQC,qBAC1Eb,GAAWa,oBAEd,OAAON,EAAWO,KAAKC,8BAA8BR,EAAUN,EAAYE,GAA8B,CAC1G,EAWAY,8BAA+B,SAC9BR,EACAN,GAIS,IAHTE,EAA0BC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAAK,IAClCY,EAAgBZ,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAAK,IACxBa,EAAgBb,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAEnB,MAAMc,EAAoBC,OAAOC,OAChC,CACCC,UAAWlB,GAA8Ba,EACzCM,IAAK,EACLC,eAAgBpB,EAChBqB,kBAAmB,GACnBC,SAAUR,GAEXV,EAASmB,gBAAgBC,kBAG1B,IAAIC,EACJ,GAAIrB,EAASsB,eAAexB,OAAQ,CACnCuB,EAAQrB,EAASsB,cACfC,IAAKC,IACL,MAAMtB,EAAOR,EAAWO,KAAMwB,GAAcA,EAAUC,MAAQF,GAE9D,MAAMG,EACLzB,GAAQA,EAAK0B,WAAa1B,EAAK2B,WAC5BC,EAAQC,cAAc7B,EAAK0B,SAAU1B,EAAK8B,cAAe9B,EAAK+B,aAC9D,KACJ,OAAON,EAAqBA,EAAmBO,aAAehC,GAAM2B,YAAYK,eAEhFC,OAAQC,GAASA,EACpB,KAAO,CACN,IAAIT,EAAwC,KAE5C,GAAI3B,EAAS4B,WAAa5B,EAAS6B,WAAY,CAC9CF,EAAqBG,EAAQC,cAAc/B,EAAS4B,SAAU5B,EAASgC,cAAehC,EAASiC,YAChG,CACA,GAAIjC,EAAS6B,YAAYK,cAAgBP,EAAoB,CAC5DN,EAAQM,EAAqB,CAACA,EAAmBO,cAAgB,CAAClC,EAAS6B,YAAYK,aACxF,CACD,CACA,MAAMG,EAAOhB,EAAQiB,EAAUC,gBAAgBlB,EAAOrB,EAASwC,MAAO7B,GAAqB,KAC3F,IAAK0B,EAAM,CACVI,EAAIC,MAAM,iDAAiD1C,EAAS0B,MACrE,CACA,OAAOW,EAAOM,WAAWN,EAAKO,QAAQ,MAAO,KAAO,CACrD,EAaAC,kCAAmC,SAClCpD,EACAG,EACAF,EACAC,GAEgD,IADhDmD,EAAmBjD,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAEtB,MAAMkD,EAAoBC,EAA2CvD,EAAS,qDAC1EA,GAAWwD,QAAQC,QACpBnD,UACH,IAAIoD,EAAiB,EACpBC,EAAc,EACf,GAAIJ,EAAkCD,EAAiB,6CAAsCA,GAAmBM,cAAe,CAC9H,OAAQN,EAAkBM,eACzB,IAAK,8BACJ,MAAMC,EAAUP,EAAkBQ,YAClCJ,EAAiBK,SAASF,EAAS,IAAM,MACzC,MACD,IAAK,gCACL,QACCH,EAAiB,EAEnB,MAAMM,EAASV,EAAqBA,EAAyCP,MAAQ/C,GAAWiE,OAAOC,YAAc,GACrHP,EAAcN,GAAuBW,EAASG,EAAWC,eAAeJ,GAAU,CACnF,MAAO,GACN9D,GACAD,GACAsD,EAAgCD,EAAiB,sDACjDe,EAA2Bf,EAAkBgB,IAC5C,CACDZ,EAAiB5C,KAAKf,+BACrBuD,EAAkBgB,GAAGb,QACrBxD,EACAC,EACAC,EAEF,CACA,MAAO,CAAEoE,WAAYZ,EAAaa,cAAed,EAClD,EAaAe,qBAAsB,SACrBzE,EACAqD,EACApD,EACAC,EACAC,GAEA,MAAMmD,EAAoBtD,EAAU0E,OAAOjB,QAC1CkB,EAAyBrB,GAAmBsB,aAAaC,QAAQC,KACjEC,EAAcC,EAAehF,EAAU0E,OAAOjB,SAE/C,IAAIC,EAAiB,EACpBC,EAAc,EACf,GAAIL,EAAmB,CACtB,OAAQyB,GACP,IAAK,cACJrB,EACC5C,KAAKf,+BACJ4E,EAAuBlB,QACvBxD,EACAC,EACAC,GACG,EACL,MACD,IAAK,mBACL,IAAK,mBACL,IAAK,QACL,QACCuD,EACC5C,KAAKf,+BAA+BuD,EAAmBrD,EAAYC,EAAmBC,GACtF,EAEH,MAAM6D,EAAShE,EAAUiE,MAAQjE,EAAUiE,MAAQX,EAAkBP,MACrEY,EAAcN,GAAuBW,EAASG,EAAWC,eAAeJ,GAAU,CACnF,KAAO,CACNhB,EAAIC,MAAM,yCAAyCjD,EAAUiF,QAC9D,CACA,MAAO,CAAEV,WAAYZ,EAAaa,cAAed,EAClD,GACC,OAEa5D,CAAe","ignoreList":[]}