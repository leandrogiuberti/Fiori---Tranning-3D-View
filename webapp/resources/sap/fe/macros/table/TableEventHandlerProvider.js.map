{"version":3,"file":"TableEventHandlerProvider.js","names":["selectionLimitForShareToCollaborationManager","selectionLimitForOpenInNewTab","TableEventHandlerProvider","tableBlockProperties","settings","tableAPI","this","collectionEntity","metaModel","constructorWithFunctions","constructorWithStrings","_exports","_proto","prototype","tableType","tableDefinition","control","type","addCardToInsightsPress","beforeExport","beforeOpenContextMenu","collapseNode","undefined","contextMenuItemSelected","rowNavigationInfo","annotation","row","navigationInfo","overrideRowPress","contextMenuOpenInNewTab","navigationTarget","contextMenuShareToCollaborationManager","targetPath","dataStateChange","hasDataStateIndicatorFilter","dataStateIndicatorFilter","dragStartDocument","dragEnterDocument","dropDocument","expandNode","fieldChangeInCreationRow","customValidationFunction","fieldLiveChange","creationMode","name","rowPress","segmentedButtonPress","selectionChange","tableContextChange","initialExpansionLevel","uploadCompleted","uploadFileNameLengthExceeded","uploadFileSizeExceeded","uploadItemValidationHandler","uploadMediaTypeMismatch","variantSaved","variantSelected","onAddCardToInsightsPressed","bind","onBeforeExport","onContextMenuPress","e","onCollapseExpandNode","TableRuntime","onContextMenuItemSelected","_e","controller","getPageController","internalContext","getBindingContext","onOpenInNewTabNavigateOutBound","getProperty","onShareToCollaborationManagerPress","onOpenInNewTabPress","callExtension","navMode","onDataStateChange","onDragStartDocument","onDragEnterDocument","onDropDocument","onFieldChangeInCreationRow","onFieldLiveChange","onTableRowPress","onSegmentedButtonPressed","onSelectionChanged","onTreeTableContextChanged","UploadTableRuntime","onUploadCompleted","onFileNameLengthExceeded","onFileSizeExceeded","uploadFile","onMediaTypeMismatch","onVariantSaved","onVariantSelected","getCreateButtonPressHandler","forContextMenu","forCreationRow","onCreateButtonPress","path","getCreateMenuItemPressHandler","index","onCreateMenuItemPress","getCutHandler","onCut","getCopyHandler","onCopy","getDataFieldForActionButtonPressHandler","dataField","action","parentAction","actionContextPath","annotationPath","CommonHelper","getActionContext","createBindingContext","actionContext","actionName","Action","targetEntityTypeName","contextObjectPath","targetEntityType","fullyQualifiedName","isStaticAction","getObject","TableHelper","_isStaticAction","_isActionOverloadOnDifferentType","toString","applicablePropertyPath","notApplicablePropertyPath","contextMenuPath","params","contexts","bStaticAction","entitySetName","applicableContexts","notApplicableContexts","isNavigable","enableAutoScroll","defaultValuesExtensionFunction","invocationGrouping","InvocationGrouping","controlId","contentId","operationAvailableMap","label","Label","valueOf","model","getModel","onActionPress","pressEventDataFieldForActionButton","getDataFieldForIBNPressHandler","dataFieldContext","navigateWithConfirmationDialog","enableAnalytics","navigationParameters","navigationContexts","RequiresContext","Inline","applicableProperty","notApplicableProperty","SemanticObject","semanticObjectMapping","Mapping","_intentBasedNavigation","getSource","navigate","getPressHandlerForDataFieldForIBN","getExpressionForDataFieldValue","fullContextPath","value","Value","addSingleQuotes","expression","getExpressionFromAnnotation","isConstant","isPathInModelExpression","valueExpression","formatValueRecursively","compileExpression","getDeleteButtonPressHandler","headerInfo","entityType","targetType","annotations","UI","HeaderInfo","deletableContextsPath","selectedContextsPath","numberOfSelectedContextsPath","unSavedContextsPath","lockedContextsPath","draftsWithDeletableActivePath","draftsWithNonDeletableActivePath","titleExpression","Title","descriptionExpression","Description","id","numberOfSelectedContexts","unSavedContexts","lockedContexts","draftsWithDeletableActive","draftsWithNonDeletableActive","title","description","selectedContexts","editFlow","deleteMultipleDocuments","generateFunction","objectToString","getManifestActionPressHandler","noWrap","relatedActionElement","findSlotActionFromKey","key","internalModelPath","eventParameters","getParameters","fireEvent","Log","error","FPMHelper","actionWrapper","handlerModule","handlerMethod","catch","err","press","buildActionWrapper","getMassEditButtonPressHandler","onMassEditButtonPressed","getMoveUpDownHandler","forMoveUp","onMoveUpDown","getPasteHandler","onPaste"],"sources":["./TableEventHandlerProvider.ts"],"sourcesContent":["import type { EntitySet, NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport {\n\ttype DataFieldForAction,\n\ttype DataFieldForIntentBasedNavigation,\n\ttype DataFieldTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation, isConstant, isPathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport { type BaseAction, type CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport FPMHelper from \"sap/fe/core/helpers/FPMHelper\";\nimport { type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { formatValueRecursively } from \"sap/fe/macros/field/FieldTemplating\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport type { Field$ChangeEvent } from \"sap/ui/mdc/Field\";\nimport type V4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport CommonHelper from \"../CommonHelper\";\nimport { type TableBlockProperties } from \"./MdcTableTemplate\";\nimport type TableAPI from \"./TableAPI\";\nimport TableHelper from \"./TableHelper\";\nimport TableRuntime from \"./TableRuntime\";\nimport UploadTableRuntime from \"./uploadTable/UploadTableRuntime\";\n\ntype EventHandlerType = (e: UI5Event) => void;\n\n// maximum number of items to share to Collaboration Manager simultanously\nconst selectionLimitForShareToCollaborationManager = 1;\n// maximum number of items to open in new tabs simultanously\nconst selectionLimitForOpenInNewTab = 10;\n\nexport default class TableEventHandlerProvider {\n\taddCardToInsightsPress!: EventHandlerType;\n\n\tbeforeExport!: EventHandlerType;\n\n\tbeforeOpenContextMenu!: EventHandlerType;\n\n\tcollapseNode?: EventHandlerType;\n\n\tcontextMenuItemSelected!: EventHandlerType;\n\n\tcontextMenuOpenInNewTab?: EventHandlerType;\n\n\tcontextMenuShareToCollaborationManager: EventHandlerType | undefined;\n\n\tdataStateChange!: EventHandlerType;\n\n\tdataStateIndicatorFilter?: (message: Message, control: Control) => boolean;\n\n\tdragStartDocument?: EventHandlerType;\n\n\tdragEnterDocument?: EventHandlerType;\n\n\tdropDocument?: EventHandlerType;\n\n\texpandNode?: EventHandlerType;\n\n\tfieldChangeInCreationRow?: EventHandlerType;\n\n\tfieldLiveChange?: EventHandlerType;\n\n\trowPress?: EventHandlerType;\n\n\tsegmentedButtonPress?: EventHandlerType;\n\n\tselectionChange!: EventHandlerType;\n\n\ttableContextChange?: EventHandlerType;\n\n\tuploadCompleted!: EventHandlerType;\n\n\tuploadFileNameLengthExceeded!: EventHandlerType;\n\n\tuploadFileSizeExceeded!: EventHandlerType;\n\n\tuploadItemValidationHandler!: Function;\n\n\tuploadMediaTypeMismatch!: EventHandlerType;\n\n\tvariantSaved?: EventHandlerType;\n\n\tvariantSelected?: EventHandlerType;\n\n\tprivate metaModel: ODataMetaModel;\n\n\tprivate collectionEntity: EntitySet | NavigationProperty;\n\n\tconstructor(\n\t\tprivate tableBlockProperties: TableBlockProperties,\n\t\tsettings: { collectionEntity: EntitySet | NavigationProperty; metaModel: ODataMetaModel },\n\t\tprivate tableAPI?: TableAPI\n\t) {\n\t\tthis.collectionEntity = settings.collectionEntity;\n\t\tthis.metaModel = settings.metaModel;\n\n\t\tif (tableAPI) {\n\t\t\tthis.constructorWithFunctions(tableAPI);\n\t\t} else {\n\t\t\tthis.constructorWithStrings();\n\t\t}\n\t}\n\n\t/**\n\t * Initializes the event handler properties with string values.\n\t */\n\tprivate constructorWithStrings(): void {\n\t\tconst tableType = this.tableBlockProperties.tableDefinition?.control?.type;\n\n\t\tthis.addCardToInsightsPress = \"API.onAddCardToInsightsPressed($event, $controller)\" as unknown as EventHandlerType;\n\t\tthis.beforeExport = \"API.onBeforeExport($event)\" as unknown as EventHandlerType;\n\t\tthis.beforeOpenContextMenu = \"API.onContextMenuPress($event)\" as unknown as EventHandlerType;\n\t\tthis.collapseNode =\n\t\t\ttableType === \"TreeTable\" ? (\"API.onCollapseExpandNode($event, false)\" as unknown as EventHandlerType) : undefined;\n\t\tthis.contextMenuItemSelected = \"TableRuntime.onContextMenuItemSelected\" as unknown as EventHandlerType;\n\n\t\tconst rowNavigationInfo = this.tableBlockProperties.tableDefinition?.annotation.row?.navigationInfo;\n\t\tif (rowNavigationInfo !== undefined || this.tableBlockProperties.overrideRowPress) {\n\t\t\t// if there is a row press defined, there is a open in new tab in the contextual menu and we need to ensure that the handler is still defined\n\t\t\t// customer found clever ways to use it like in CS20250010035125\n\t\t\tif (rowNavigationInfo?.type === \"Outbound\") {\n\t\t\t\tthis.contextMenuOpenInNewTab =\n\t\t\t\t\t`.onOpenInNewTabNavigateOutBound('${rowNavigationInfo.navigationTarget}', %{internal>contextmenu/selectedContexts}, \"\", ${selectionLimitForOpenInNewTab})` as unknown as EventHandlerType;\n\t\t\t} else {\n\t\t\t\tthis.contextMenuShareToCollaborationManager =\n\t\t\t\t\t`API.onShareToCollaborationManagerPress($event, $controller, %{internal>contextmenu/selectedContexts}, ${selectionLimitForShareToCollaborationManager})` as unknown as EventHandlerType;\n\t\t\t\tthis.contextMenuOpenInNewTab =\n\t\t\t\t\t`API.onOpenInNewTabPress($event, $controller,  %{internal>contextmenu/selectedContexts}, %{internal>contextmenu/navigableContexts},{ callExtension: true, targetPath: '${\n\t\t\t\t\t\trowNavigationInfo?.targetPath ?? \"\"\n\t\t\t\t\t}', navMode: 'openInNewTab' }, ${selectionLimitForOpenInNewTab})` as unknown as EventHandlerType;\n\t\t\t}\n\t\t}\n\n\t\tthis.dataStateChange = \"API.onDataStateChange\" as unknown as EventHandlerType;\n\n\t\tif (this.tableBlockProperties.tableDefinition?.control?.hasDataStateIndicatorFilter) {\n\t\t\tthis.dataStateIndicatorFilter = \"TableRuntime.dataStateIndicatorFilter\" as unknown as (\n\t\t\t\tmessage: Message,\n\t\t\t\tcontrol: Control\n\t\t\t) => boolean;\n\t\t}\n\n\t\tthis.dragStartDocument = tableType === \"TreeTable\" ? (\"API.onDragStartDocument\" as unknown as EventHandlerType) : undefined;\n\t\tthis.dragEnterDocument = tableType === \"TreeTable\" ? (\"API.onDragEnterDocument\" as unknown as EventHandlerType) : undefined;\n\t\tthis.dropDocument = tableType === \"TreeTable\" ? (\"API.onDropDocument\" as unknown as EventHandlerType) : undefined;\n\t\tthis.expandNode = tableType === \"TreeTable\" ? (\"API.onCollapseExpandNode($event, true)\" as unknown as EventHandlerType) : undefined;\n\t\tthis.fieldChangeInCreationRow = `TableRuntime.onFieldChangeInCreationRow($event, ${!!this.tableBlockProperties.tableDefinition\n\t\t\t.control.customValidationFunction})` as unknown as EventHandlerType;\n\t\tthis.fieldLiveChange =\n\t\t\tthis.tableBlockProperties.creationMode?.name === \"InlineCreationRows\"\n\t\t\t\t? (\"API.onFieldLiveChange($event)\" as unknown as EventHandlerType)\n\t\t\t\t: undefined;\n\t\tthis.rowPress = \"API.onTableRowPress\" as unknown as EventHandlerType;\n\t\tthis.segmentedButtonPress = \"API.onSegmentedButtonPressed\" as unknown as EventHandlerType;\n\t\tthis.selectionChange = \"API.onSelectionChanged\" as unknown as EventHandlerType;\n\t\tthis.tableContextChange =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (`TableRuntime.onTreeTableContextChanged($event, ${this.tableBlockProperties.tableDefinition?.annotation?.initialExpansionLevel})` as unknown as EventHandlerType)\n\t\t\t\t: undefined;\n\n\t\tthis.uploadCompleted = \"UploadTableRuntime.onUploadCompleted\" as unknown as EventHandlerType;\n\t\tthis.uploadFileNameLengthExceeded = \"UploadTableRuntime.onFileNameLengthExceeded\" as unknown as EventHandlerType;\n\t\tthis.uploadFileSizeExceeded = \"UploadTableRuntime.onFileSizeExceeded\" as unknown as EventHandlerType;\n\t\tthis.uploadItemValidationHandler = \"UploadTableRuntime.uploadFile\" as unknown as Function;\n\t\tthis.uploadMediaTypeMismatch = \"UploadTableRuntime.onMediaTypeMismatch\" as unknown as EventHandlerType;\n\t\tthis.variantSaved = \"API.onVariantSaved\" as unknown as EventHandlerType;\n\t\tthis.variantSelected = \"API.onVariantSelected\" as unknown as EventHandlerType;\n\t}\n\n\t/**\n\t * Initializes the event handler properties with functions.\n\t * @param tableAPI\n\t */\n\tprivate constructorWithFunctions(tableAPI: TableAPI): void {\n\t\tconst tableType = this.tableBlockProperties.tableDefinition?.control?.type;\n\n\t\tthis.addCardToInsightsPress = tableAPI.onAddCardToInsightsPressed.bind(tableAPI);\n\t\tthis.beforeExport = tableAPI.onBeforeExport.bind(tableAPI);\n\t\tthis.beforeOpenContextMenu = tableAPI.onContextMenuPress.bind(tableAPI);\n\t\tthis.collapseNode =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (e: UI5Event): void => {\n\t\t\t\t\t\ttableAPI.onCollapseExpandNode(e, false);\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\t\tthis.contextMenuItemSelected = TableRuntime.onContextMenuItemSelected.bind(TableRuntime);\n\n\t\tconst rowNavigationInfo = this.tableBlockProperties.tableDefinition?.annotation.row?.navigationInfo;\n\t\tif (rowNavigationInfo !== undefined || this.tableBlockProperties.overrideRowPress) {\n\t\t\tif (rowNavigationInfo?.type === \"Outbound\") {\n\t\t\t\tthis.contextMenuOpenInNewTab = (_e: UI5Event): void => {\n\t\t\t\t\tconst controller = tableAPI.getPageController();\n\t\t\t\t\tconst internalContext = tableAPI.getBindingContext(\"internal\");\n\t\t\t\t\tcontroller?.onOpenInNewTabNavigateOutBound?.(\n\t\t\t\t\t\trowNavigationInfo.navigationTarget,\n\t\t\t\t\t\tinternalContext?.getProperty(\"contextmenu/selectedContexts\"),\n\t\t\t\t\t\t\"\",\n\t\t\t\t\t\tselectionLimitForOpenInNewTab\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tthis.contextMenuShareToCollaborationManager = (e: UI5Event): void => {\n\t\t\t\t\tconst controller = tableAPI.getPageController()!;\n\t\t\t\t\tconst internalContext = tableAPI.getBindingContext(\"internal\");\n\t\t\t\t\ttableAPI.onShareToCollaborationManagerPress(\n\t\t\t\t\t\te,\n\t\t\t\t\t\tcontroller,\n\t\t\t\t\t\tinternalContext?.getProperty(\"contextmenu/selectedContexts\"),\n\t\t\t\t\t\tselectionLimitForShareToCollaborationManager\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t\tthis.contextMenuOpenInNewTab = (e: UI5Event): void => {\n\t\t\t\t\tconst controller = tableAPI.getPageController()!;\n\t\t\t\t\tconst internalContext = tableAPI.getBindingContext(\"internal\");\n\t\t\t\t\ttableAPI.onOpenInNewTabPress(\n\t\t\t\t\t\te,\n\t\t\t\t\t\tcontroller,\n\t\t\t\t\t\tinternalContext?.getProperty(\"contextmenu/selectedContexts\"),\n\t\t\t\t\t\tinternalContext?.getProperty(\"contextmenu/navigableContexts\"),\n\t\t\t\t\t\t{ callExtension: true, targetPath: rowNavigationInfo?.targetPath ?? \"\", navMode: \"openInNewTab\" },\n\t\t\t\t\t\tselectionLimitForOpenInNewTab\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tthis.dataStateChange = tableAPI.onDataStateChange.bind(tableAPI);\n\n\t\tif (this.tableBlockProperties.tableDefinition?.control?.hasDataStateIndicatorFilter) {\n\t\t\tthis.dataStateIndicatorFilter = tableAPI.dataStateIndicatorFilter.bind(tableAPI);\n\t\t}\n\n\t\tthis.dragStartDocument = tableType === \"TreeTable\" ? (tableAPI.onDragStartDocument.bind(tableAPI) as EventHandlerType) : undefined;\n\t\tthis.dragEnterDocument = tableType === \"TreeTable\" ? (tableAPI.onDragEnterDocument.bind(tableAPI) as EventHandlerType) : undefined;\n\t\tthis.dropDocument = tableType === \"TreeTable\" ? (tableAPI.onDropDocument.bind(tableAPI) as EventHandlerType) : undefined;\n\t\tthis.expandNode =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (e: UI5Event): void => {\n\t\t\t\t\t\ttableAPI.onCollapseExpandNode(e, true);\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\n\t\tthis.fieldChangeInCreationRow = (e: UI5Event): void => {\n\t\t\tTableRuntime.onFieldChangeInCreationRow(\n\t\t\t\te as Field$ChangeEvent & UI5Event<{ isValid: boolean }>,\n\t\t\t\t!!this.tableBlockProperties.tableDefinition.control.customValidationFunction\n\t\t\t);\n\t\t};\n\t\tthis.fieldLiveChange =\n\t\t\tthis.tableBlockProperties.creationMode?.name === \"InlineCreationRows\" ? tableAPI.onFieldLiveChange.bind(tableAPI) : undefined;\n\t\tthis.rowPress = tableAPI.onTableRowPress.bind(tableAPI);\n\t\tthis.segmentedButtonPress = tableAPI.onSegmentedButtonPressed.bind(tableAPI);\n\t\tthis.selectionChange = tableAPI.onSelectionChanged.bind(tableAPI);\n\t\tthis.tableContextChange =\n\t\t\ttableType === \"TreeTable\"\n\t\t\t\t? (e: UI5Event): void => {\n\t\t\t\t\t\tTableRuntime.onTreeTableContextChanged(\n\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\tthis.tableBlockProperties.tableDefinition?.annotation?.initialExpansionLevel\n\t\t\t\t\t\t);\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\n\t\tthis.uploadCompleted = UploadTableRuntime.onUploadCompleted.bind(UploadTableRuntime) as EventHandlerType;\n\t\tthis.uploadFileNameLengthExceeded = UploadTableRuntime.onFileNameLengthExceeded.bind(UploadTableRuntime) as EventHandlerType;\n\t\tthis.uploadFileSizeExceeded = UploadTableRuntime.onFileSizeExceeded.bind(UploadTableRuntime) as EventHandlerType;\n\t\tthis.uploadItemValidationHandler = UploadTableRuntime.uploadFile.bind(UploadTableRuntime);\n\t\tthis.uploadMediaTypeMismatch = UploadTableRuntime.onMediaTypeMismatch.bind(UploadTableRuntime) as EventHandlerType;\n\t\tthis.variantSaved = tableAPI.onVariantSaved.bind(tableAPI);\n\t\tthis.variantSelected = tableAPI.onVariantSelected.bind(tableAPI);\n\t}\n\n\t/**\n\t * Gets the press event handler for the Create button.\n\t * @param forContextMenu\n\t * @param forCreationRow\n\t * @returns The event handler.\n\t */\n\tgetCreateButtonPressHandler(forContextMenu: boolean, forCreationRow: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn forCreationRow\n\t\t\t\t? TableRuntime.onCreateButtonPress.bind(TableRuntime)\n\t\t\t\t: (e: UI5Event): void => {\n\t\t\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\");\n\t\t\t\t\t\tconst path = forContextMenu ? \"contextmenu/selectedContexts\" : \"selectedContexts\";\n\t\t\t\t\t\tTableRuntime.onCreateButtonPress(e, internalContext?.getProperty(path));\n\t\t\t\t  };\n\t\t} else if (!forCreationRow) {\n\t\t\treturn forContextMenu\n\t\t\t\t? (\"TableRuntime.onCreateButtonPress($event, ${internal>contextmenu/selectedContexts})\" as unknown as EventHandlerType)\n\t\t\t\t: (\"TableRuntime.onCreateButtonPress($event, ${internal>selectedContexts})\" as unknown as EventHandlerType);\n\t\t} else {\n\t\t\treturn \"TableRuntime.onCreateButtonPress($event)\" as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for the Create menu item.\n\t * @param index\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetCreateMenuItemPressHandler(index: number, forContextMenu: boolean): EventHandlerType {\n\t\tconst path = forContextMenu ? \"contextmenu/selectedContexts\" : \"selectedContexts\";\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tTableRuntime.onCreateMenuItemPress(e, index, this.tableAPI!.getBindingContext(\"internal\")?.getProperty(path));\n\t\t\t};\n\t\t} else {\n\t\t\treturn `TableRuntime.onCreateMenuItemPress($event, ${index}, \\${internal>${path}})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the event handler for the Cut action.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetCutHandler(forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onCut(e, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onCut($event, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the event handler for the Copy action.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetCopyHandler(forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onCopy(e, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onCopy($event, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for an action button.\n\t * @param dataField\n\t * @param action\n\t * @param parentAction\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetDataFieldForActionButtonPressHandler(\n\t\tdataField: DataFieldForAction | undefined,\n\t\taction: BaseAction,\n\t\tparentAction: BaseAction | undefined,\n\t\tforContextMenu: boolean\n\t): EventHandlerType | undefined {\n\t\tif (!dataField) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst actionContextPath = action.annotationPath\n\t\t\t? CommonHelper.getActionContext(this.metaModel.createBindingContext(action.annotationPath + \"/Action\")!)\n\t\t\t: undefined;\n\t\tconst actionContext = actionContextPath ? this.metaModel.createBindingContext(actionContextPath) : undefined;\n\n\t\tif (this.tableAPI) {\n\t\t\tconst actionName = dataField.Action;\n\t\t\tconst targetEntityTypeName = this.tableBlockProperties.contextObjectPath.targetEntityType.fullyQualifiedName;\n\t\t\tconst isStaticAction =\n\t\t\t\ttypeof actionContext?.getObject() !== \"string\" &&\n\t\t\t\t(TableHelper._isStaticAction(actionContext?.getObject(), actionName) ||\n\t\t\t\t\tTableHelper._isActionOverloadOnDifferentType(actionName.toString(), targetEntityTypeName));\n\t\t\tconst applicablePropertyPath = !forContextMenu ? \"aApplicable\" : \"aApplicableForContextMenu\";\n\t\t\tconst notApplicablePropertyPath = !forContextMenu ? \"aNotApplicable\" : \"aNotApplicableForContextMenu\";\n\t\t\tconst contextMenuPath = !forContextMenu ? \"\" : \"contextmenu/\";\n\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\")!;\n\t\t\t\tconst params = {\n\t\t\t\t\tcontexts: !isStaticAction ? internalContext.getProperty(`${contextMenuPath}selectedContexts`) : null,\n\t\t\t\t\tbStaticAction: isStaticAction ? isStaticAction : undefined,\n\t\t\t\t\tentitySetName: this.collectionEntity.name,\n\t\t\t\t\tapplicableContexts: !isStaticAction\n\t\t\t\t\t\t? internalContext.getProperty(`dynamicActions/${dataField.Action}/${applicablePropertyPath}/`)\n\t\t\t\t\t\t: null,\n\t\t\t\t\tnotApplicableContexts: !isStaticAction\n\t\t\t\t\t\t? internalContext.getProperty(`dynamicActions/${dataField.Action}/${notApplicablePropertyPath}/`)\n\t\t\t\t\t\t: null,\n\t\t\t\t\tisNavigable: (parentAction ?? action).isNavigable,\n\t\t\t\t\tenableAutoScroll: action.enableAutoScroll,\n\t\t\t\t\tdefaultValuesExtensionFunction: action.defaultValuesExtensionFunction,\n\t\t\t\t\tinvocationGrouping: dataField?.InvocationGrouping === \"UI.OperationGroupingType/ChangeSet\" ? \"ChangeSet\" : \"Isolated\",\n\t\t\t\t\tcontrolId: this.tableBlockProperties.contentId,\n\t\t\t\t\toperationAvailableMap: this.tableBlockProperties.tableDefinition.operationAvailableMap,\n\t\t\t\t\tlabel: dataField.Label?.valueOf() ?? \"\",\n\t\t\t\t\tmodel: this.tableAPI!.getPageController()!.getModel()\n\t\t\t\t};\n\t\t\t\tthis.tableAPI?.onActionPress(e, this.tableAPI.getPageController()!, dataField.Action.valueOf(), params);\n\t\t\t};\n\t\t} else {\n\t\t\treturn TableHelper.pressEventDataFieldForActionButton(\n\t\t\t\t{\n\t\t\t\t\tcontextObjectPath: this.tableBlockProperties.contextObjectPath,\n\t\t\t\t\tcontentId: this.tableBlockProperties.contentId\n\t\t\t\t},\n\t\t\t\tdataField,\n\t\t\t\tthis.collectionEntity.name,\n\t\t\t\tthis.tableBlockProperties.tableDefinition.operationAvailableMap,\n\t\t\t\tactionContext?.getObject(),\n\t\t\t\t(parentAction ?? action).isNavigable,\n\t\t\t\taction.enableAutoScroll,\n\t\t\t\taction.defaultValuesExtensionFunction,\n\t\t\t\tforContextMenu\n\t\t\t) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for an IBN action.\n\t * @param action\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetDataFieldForIBNPressHandler(action: BaseAction, forContextMenu: boolean): EventHandlerType | undefined {\n\t\tif (action.annotationPath === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst dataFieldContext = this.metaModel.createBindingContext(action.annotationPath);\n\t\tconst dataField = dataFieldContext?.getObject() as DataFieldForIntentBasedNavigation | undefined;\n\t\tif (!dataField) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst navigateWithConfirmationDialog = this.tableBlockProperties.tableDefinition.enableAnalytics !== true;\n\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\")!;\n\t\t\t\tconst navigationParameters: {\n\t\t\t\t\tnavigationContexts?: V4Context[];\n\t\t\t\t\tlabel?: string;\n\t\t\t\t\tapplicableContexts?: V4Context[];\n\t\t\t\t\tnotApplicableContexts?: V4Context[];\n\t\t\t\t\tsemanticObjectMapping?: object;\n\t\t\t\t} = {};\n\n\t\t\t\tnavigationParameters.navigationContexts = forContextMenu\n\t\t\t\t\t? internalContext.getProperty(\"contextmenu/selectedContexts\")\n\t\t\t\t\t: internalContext.getProperty(\"selectedContexts\");\n\n\t\t\t\tif (dataField.RequiresContext && !dataField.Inline && navigateWithConfirmationDialog) {\n\t\t\t\t\tconst applicableProperty = !forContextMenu ? \"aApplicable\" : \"aApplicableForContextMenu\";\n\t\t\t\t\tconst notApplicableProperty = !forContextMenu ? \"aNotApplicable\" : \"aNotApplicableForContextMenu\";\n\t\t\t\t\tnavigationParameters.applicableContexts = internalContext.getProperty(\n\t\t\t\t\t\t`ibn/${dataField.SemanticObject}-${dataField.Action}/${applicableProperty}/`\n\t\t\t\t\t);\n\t\t\t\t\tnavigationParameters.notApplicableContexts = internalContext.getProperty(\n\t\t\t\t\t\t`ibn/${dataField.SemanticObject}-${dataField.Action}/${notApplicableProperty}/`\n\t\t\t\t\t);\n\t\t\t\t\tnavigationParameters.label = dataField.Label as string;\n\t\t\t\t}\n\t\t\t\tnavigationParameters.semanticObjectMapping = dataField.Mapping;\n\t\t\t\tconst controller = this.tableAPI!.getPageController();\n\t\t\t\tif (navigateWithConfirmationDialog) {\n\t\t\t\t\tcontroller?._intentBasedNavigation.navigateWithConfirmationDialog(\n\t\t\t\t\t\tdataField.SemanticObject as unknown as string,\n\t\t\t\t\t\tdataField.Action as unknown as string,\n\t\t\t\t\t\tnavigationParameters,\n\t\t\t\t\t\te.getSource<Control>()\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tcontroller?._intentBasedNavigation.navigate(\n\t\t\t\t\t\tdataField.SemanticObject as unknown as string,\n\t\t\t\t\t\tdataField.Action as unknown as string,\n\t\t\t\t\t\tnavigationParameters,\n\t\t\t\t\t\te.getSource<Control>()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\treturn CommonHelper.getPressHandlerForDataFieldForIBN(\n\t\t\t\tdataField,\n\t\t\t\tforContextMenu ? \"${internal>contextmenu/selectedContexts}\" : \"${internal>selectedContexts}\",\n\t\t\t\tnavigateWithConfirmationDialog,\n\t\t\t\tforContextMenu\n\t\t\t) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\tprivate getExpressionForDataFieldValue(\n\t\tdataField: DataFieldTypes | undefined,\n\t\tfullContextPath: DataModelObjectPath<unknown>\n\t): string | CompiledBindingToolkitExpression | undefined {\n\t\tconst value = dataField?.Value;\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (typeof value === \"string\") {\n\t\t\treturn this.tableAPI ? value : CommonHelper.addSingleQuotes(value, true);\n\t\t} else {\n\t\t\tconst expression = getExpressionFromAnnotation(value);\n\t\t\tif (isConstant(expression) || isPathInModelExpression(expression)) {\n\t\t\t\tconst valueExpression = formatValueRecursively(expression, fullContextPath);\n\t\t\t\treturn compileExpression(valueExpression);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets the press event handler for the Delete button.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetDeleteButtonPressHandler(forContextMenu: boolean): EventHandlerType {\n\t\tconst headerInfo = ((this.collectionEntity as EntitySet)?.entityType || (this.collectionEntity as NavigationProperty)?.targetType)\n\t\t\t?.annotations?.UI?.HeaderInfo;\n\n\t\tconst contextMenuPath = !forContextMenu ? \"\" : \"contextmenu/\";\n\t\tconst deletableContextsPath = `${contextMenuPath}deletableContexts`;\n\t\tconst selectedContextsPath = `${contextMenuPath}selectedContextsIncludingInactive`;\n\t\tconst numberOfSelectedContextsPath = !forContextMenu\n\t\t\t? `numberOfSelectedContexts`\n\t\t\t: `${contextMenuPath}numberOfSelectedContextsForDelete`;\n\t\tconst unSavedContextsPath = `${contextMenuPath}unSavedContexts`;\n\t\tconst lockedContextsPath = `${contextMenuPath}lockedContexts`;\n\t\tconst draftsWithDeletableActivePath = `${contextMenuPath}draftsWithDeletableActive`;\n\t\tconst draftsWithNonDeletableActivePath = `${contextMenuPath}draftsWithNonDeletableActive`;\n\n\t\tconst titleExpression = this.getExpressionForDataFieldValue(\n\t\t\theaderInfo?.Title as DataFieldTypes,\n\t\t\tthis.tableBlockProperties.contextObjectPath\n\t\t);\n\n\t\tconst descriptionExpression = this.getExpressionForDataFieldValue(\n\t\t\theaderInfo?.Description as DataFieldTypes,\n\t\t\tthis.tableBlockProperties.contextObjectPath\n\t\t);\n\n\t\tif (this.tableAPI) {\n\t\t\treturn (_e: UI5Event): void => {\n\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\");\n\t\t\t\tconst params = {\n\t\t\t\t\tid: this.tableBlockProperties.contentId,\n\t\t\t\t\tnumberOfSelectedContexts: internalContext?.getProperty(numberOfSelectedContextsPath) as number,\n\t\t\t\t\tunSavedContexts: internalContext?.getProperty(unSavedContextsPath) as V4Context[],\n\t\t\t\t\tlockedContexts: internalContext?.getProperty(lockedContextsPath) as V4Context[],\n\t\t\t\t\tdraftsWithDeletableActive: internalContext?.getProperty(draftsWithDeletableActivePath) as V4Context[],\n\t\t\t\t\tdraftsWithNonDeletableActive: internalContext?.getProperty(draftsWithNonDeletableActivePath) as V4Context[],\n\t\t\t\t\tcontrolId: internalContext?.getProperty(\"controlId\"),\n\t\t\t\t\ttitle: titleExpression,\n\t\t\t\t\tdescription: descriptionExpression,\n\t\t\t\t\tselectedContexts: internalContext?.getProperty(selectedContextsPath) as V4Context[]\n\t\t\t\t};\n\t\t\t\tthis.tableAPI!.getPageController()?.editFlow.deleteMultipleDocuments(\n\t\t\t\t\tinternalContext?.getProperty(deletableContextsPath),\n\t\t\t\t\tparams\n\t\t\t\t);\n\t\t\t};\n\t\t} else {\n\t\t\tconst params = {\n\t\t\t\tid: CommonHelper.addSingleQuotes(this.tableBlockProperties.contentId),\n\t\t\t\tnumberOfSelectedContexts: `\\${internal>${numberOfSelectedContextsPath}}`,\n\t\t\t\tunSavedContexts: `\\${internal>${unSavedContextsPath}}`,\n\t\t\t\tlockedContexts: `\\${internal>${lockedContextsPath}}`,\n\t\t\t\tdraftsWithDeletableActive: `\\${internal>${draftsWithDeletableActivePath}}`,\n\t\t\t\tdraftsWithNonDeletableActive: `\\${internal>${draftsWithNonDeletableActivePath}}`,\n\t\t\t\tcontrolId: \"${internal>controlId}\",\n\t\t\t\ttitle: titleExpression,\n\t\t\t\tdescription: descriptionExpression,\n\t\t\t\tselectedContexts: `\\${internal>${selectedContextsPath}}`\n\t\t\t};\n\n\t\t\treturn CommonHelper.generateFunction(\n\t\t\t\t\".editFlow.deleteMultipleDocuments\",\n\t\t\t\t`\\${internal>${deletableContextsPath}}`,\n\t\t\t\tCommonHelper.objectToString(params)\n\t\t\t) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Get the press event handler for a manifest action button.\n\t * @param action\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetManifestActionPressHandler(action: CustomAction, forContextMenu: boolean): EventHandlerType | undefined {\n\t\tif (this.tableAPI) {\n\t\t\tif (action.noWrap === true) {\n\t\t\t\t// If noWrap = true, then the action is a slot action (defined in the XML view as an aggregation of the table block)\n\t\t\t\tconst relatedActionElement = this.tableAPI.findSlotActionFromKey(action.key);\n\t\t\t\tif (relatedActionElement) {\n\t\t\t\t\treturn (e: UI5Event): void => {\n\t\t\t\t\t\tconst internalModelPath = forContextMenu ? \"contextmenu/selectedContexts\" : \"selectedContexts\";\n\t\t\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\")!;\n\t\t\t\t\t\tconst eventParameters = { ...e.getParameters(), contexts: internalContext.getProperty(internalModelPath) };\n\t\t\t\t\t\trelatedActionElement.fireEvent(\"press\", eventParameters);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tLog.error(\"Couldn't find action with key \" + action.key);\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn (e: UI5Event): void => {\n\t\t\t\t\tconst internalModelPath = forContextMenu ? \"contextmenu/selectedContexts\" : \"selectedContexts\";\n\t\t\t\t\tconst internalContext = this.tableAPI!.getBindingContext(\"internal\")!;\n\t\t\t\t\tFPMHelper.actionWrapper(e, action.handlerModule, action.handlerMethod, {\n\t\t\t\t\t\tcontexts: internalContext.getProperty(internalModelPath)\n\t\t\t\t\t}).catch((err) => {\n\t\t\t\t\t\tLog.error(\"Error while executing custom action\", err);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\treturn (action.noWrap === true\n\t\t\t\t? action.press\n\t\t\t\t: CommonHelper.buildActionWrapper(\n\t\t\t\t\t\taction,\n\t\t\t\t\t\t{ id: this.tableBlockProperties.contentId },\n\t\t\t\t\t\tforContextMenu\n\t\t\t\t  )) as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Get the press event handler for the mass edit button.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetMassEditButtonPressHandler(forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onMassEditButtonPressed(e, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onMassEditButtonPressed($event, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Get the press event handler for the move up / move down buttons.\n\t * @param forMoveUp\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetMoveUpDownHandler(forMoveUp: boolean, forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onMoveUpDown(e, forMoveUp, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onMoveUpDown($event, ${forMoveUp}, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n\n\t/**\n\t * Gets the event handler for the Paste action.\n\t * @param forContextMenu\n\t * @returns The event handler.\n\t */\n\tgetPasteHandler(forContextMenu: boolean): EventHandlerType {\n\t\tif (this.tableAPI) {\n\t\t\tconst controller = this.tableAPI.getPageController();\n\t\t\treturn (e: UI5Event): void => {\n\t\t\t\tthis.tableAPI!.onPaste(e, controller, forContextMenu);\n\t\t\t};\n\t\t} else {\n\t\t\treturn `API.onPaste($event, $controller, ${forContextMenu})` as unknown as EventHandlerType;\n\t\t}\n\t}\n}\n"],"mappings":";;;;wZA6BA,MAAMA,EAA+C,EAErD,MAAMC,EAAgC,GAAG,IAEpBC,EAAyB,WAyD7C,SAAAA,EACSC,EACRC,EACQC,GACPC,KAHOH,uBAA0CG,KAE1CD,WAERC,KAAKC,iBAAmBH,EAASG,iBACjCD,KAAKE,UAAYJ,EAASI,UAE1B,GAAIH,EAAU,CACbC,KAAKG,yBAAyBJ,EAC/B,KAAO,CACNC,KAAKI,wBACN,CACD,CAEAC,EAAAT,EAAA,IAAAU,EAAAV,EAAAW,UAAAD,EAGQF,uBAAR,SAAQA,IACP,MAAMI,EAAYR,KAAKH,qBAAqBY,iBAAiBC,SAASC,KAEtEX,KAAKY,uBAAyB,sDAC9BZ,KAAKa,aAAe,6BACpBb,KAAKc,sBAAwB,iCAC7Bd,KAAKe,aACJP,IAAc,YAAe,0CAA4EQ,UAC1GhB,KAAKiB,wBAA0B,yCAE/B,MAAMC,EAAoBlB,KAAKH,qBAAqBY,iBAAiBU,WAAWC,KAAKC,eACrF,GAAIH,IAAsBF,WAAahB,KAAKH,qBAAqByB,iBAAkB,CAGlF,GAAIJ,GAAmBP,OAAS,WAAY,CAC3CX,KAAKuB,wBACJ,oCAAoCL,EAAkBM,oEAAoE7B,IAC5H,KAAO,CACNK,KAAKyB,uCACJ,yGAAyG/B,KAC1GM,KAAKuB,wBACJ,yKACCL,GAAmBQ,YAAc,mCACD/B,IACnC,CACD,CAEAK,KAAK2B,gBAAkB,wBAEvB,GAAI3B,KAAKH,qBAAqBY,iBAAiBC,SAASkB,4BAA6B,CACpF5B,KAAK6B,yBAA2B,uCAIjC,CAEA7B,KAAK8B,kBAAoBtB,IAAc,YAAe,0BAA4DQ,UAClHhB,KAAK+B,kBAAoBvB,IAAc,YAAe,0BAA4DQ,UAClHhB,KAAKgC,aAAexB,IAAc,YAAe,qBAAuDQ,UACxGhB,KAAKiC,WAAazB,IAAc,YAAe,yCAA2EQ,UAC1HhB,KAAKkC,yBAA2B,qDAAqDlC,KAAKH,qBAAqBY,gBAC7GC,QAAQyB,4BACVnC,KAAKoC,gBACJpC,KAAKH,qBAAqBwC,cAAcC,OAAS,qBAC7C,gCACDtB,UACJhB,KAAKuC,SAAW,sBAChBvC,KAAKwC,qBAAuB,+BAC5BxC,KAAKyC,gBAAkB,yBACvBzC,KAAK0C,mBACJlC,IAAc,YACV,kDAAkDR,KAAKH,qBAAqBY,iBAAiBU,YAAYwB,yBAC1G3B,UAEJhB,KAAK4C,gBAAkB,uCACvB5C,KAAK6C,6BAA+B,8CACpC7C,KAAK8C,uBAAyB,wCAC9B9C,KAAK+C,4BAA8B,gCACnC/C,KAAKgD,wBAA0B,yCAC/BhD,KAAKiD,aAAe,qBACpBjD,KAAKkD,gBAAkB,uBACxB,EAEA5C,EAIQH,yBAAR,SAAQA,EAAyBJ,GAChC,MAAMS,EAAYR,KAAKH,qBAAqBY,iBAAiBC,SAASC,KAEtEX,KAAKY,uBAAyBb,EAASoD,2BAA2BC,KAAKrD,GACvEC,KAAKa,aAAed,EAASsD,eAAeD,KAAKrD,GACjDC,KAAKc,sBAAwBf,EAASuD,mBAAmBF,KAAKrD,GAC9DC,KAAKe,aACJP,IAAc,YACV+C,IACDxD,EAASyD,qBAAqBD,EAAG,QAEjCvC,UACJhB,KAAKiB,wBAA0BwC,EAAaC,0BAA0BN,KAAKK,GAE3E,MAAMvC,EAAoBlB,KAAKH,qBAAqBY,iBAAiBU,WAAWC,KAAKC,eACrF,GAAIH,IAAsBF,WAAahB,KAAKH,qBAAqByB,iBAAkB,CAClF,GAAIJ,GAAmBP,OAAS,WAAY,CAC3CX,KAAKuB,wBAA2BoC,IAC/B,MAAMC,EAAa7D,EAAS8D,oBAC5B,MAAMC,EAAkB/D,EAASgE,kBAAkB,YACnDH,GAAYI,iCACX9C,EAAkBM,iBAClBsC,GAAiBG,YAAY,gCAC7B,GACAtE,GAGH,KAAO,CACNK,KAAKyB,uCAA0C8B,IAC9C,MAAMK,EAAa7D,EAAS8D,oBAC5B,MAAMC,EAAkB/D,EAASgE,kBAAkB,YACnDhE,EAASmE,mCACRX,EACAK,EACAE,GAAiBG,YAAY,gCAC7BvE,IAGFM,KAAKuB,wBAA2BgC,IAC/B,MAAMK,EAAa7D,EAAS8D,oBAC5B,MAAMC,EAAkB/D,EAASgE,kBAAkB,YACnDhE,EAASoE,oBACRZ,EACAK,EACAE,GAAiBG,YAAY,gCAC7BH,GAAiBG,YAAY,iCAC7B,CAAEG,cAAe,KAAM1C,WAAYR,GAAmBQ,YAAc,GAAI2C,QAAS,gBACjF1E,GAGH,CACD,CAEAK,KAAK2B,gBAAkB5B,EAASuE,kBAAkBlB,KAAKrD,GAEvD,GAAIC,KAAKH,qBAAqBY,iBAAiBC,SAASkB,4BAA6B,CACpF5B,KAAK6B,yBAA2B9B,EAAS8B,yBAAyBuB,KAAKrD,EACxE,CAEAC,KAAK8B,kBAAoBtB,IAAc,YAAeT,EAASwE,oBAAoBnB,KAAKrD,GAAiCiB,UACzHhB,KAAK+B,kBAAoBvB,IAAc,YAAeT,EAASyE,oBAAoBpB,KAAKrD,GAAiCiB,UACzHhB,KAAKgC,aAAexB,IAAc,YAAeT,EAAS0E,eAAerB,KAAKrD,GAAiCiB,UAC/GhB,KAAKiC,WACJzB,IAAc,YACV+C,IACDxD,EAASyD,qBAAqBD,EAAG,OAEjCvC,UAEJhB,KAAKkC,yBAA4BqB,IAChCE,EAAaiB,2BACZnB,IACEvD,KAAKH,qBAAqBY,gBAAgBC,QAAQyB,2BAGtDnC,KAAKoC,gBACJpC,KAAKH,qBAAqBwC,cAAcC,OAAS,qBAAuBvC,EAAS4E,kBAAkBvB,KAAKrD,GAAYiB,UACrHhB,KAAKuC,SAAWxC,EAAS6E,gBAAgBxB,KAAKrD,GAC9CC,KAAKwC,qBAAuBzC,EAAS8E,yBAAyBzB,KAAKrD,GACnEC,KAAKyC,gBAAkB1C,EAAS+E,mBAAmB1B,KAAKrD,GACxDC,KAAK0C,mBACJlC,IAAc,YACV+C,IACDE,EAAasB,0BACZxB,EACAvD,KAAKH,qBAAqBY,iBAAiBU,YAAYwB,wBAGxD3B,UAEJhB,KAAK4C,gBAAkBoC,EAAmBC,kBAAkB7B,KAAK4B,GACjEhF,KAAK6C,6BAA+BmC,EAAmBE,yBAAyB9B,KAAK4B,GACrFhF,KAAK8C,uBAAyBkC,EAAmBG,mBAAmB/B,KAAK4B,GACzEhF,KAAK+C,4BAA8BiC,EAAmBI,WAAWhC,KAAK4B,GACtEhF,KAAKgD,wBAA0BgC,EAAmBK,oBAAoBjC,KAAK4B,GAC3EhF,KAAKiD,aAAelD,EAASuF,eAAelC,KAAKrD,GACjDC,KAAKkD,gBAAkBnD,EAASwF,kBAAkBnC,KAAKrD,EACxD,EAEAO,EAMAkF,4BAAA,SAAAA,EAA4BC,EAAyBC,GACpD,GAAI1F,KAAKD,SAAU,CAClB,OAAO2F,EACJjC,EAAakC,oBAAoBvC,KAAKK,GACrCF,IACD,MAAMO,EAAkB9D,KAAKD,SAAUgE,kBAAkB,YACzD,MAAM6B,EAAOH,EAAiB,+BAAiC,mBAC/DhC,EAAakC,oBAAoBpC,EAAGO,GAAiBG,YAAY2B,IAErE,MAAO,IAAKF,EAAgB,CAC3B,OAAOD,EACH,qFACA,wEACL,KAAO,CACN,MAAO,0CACR,CACD,EAEAnF,EAMAuF,8BAAA,SAAAA,EAA8BC,EAAeL,GAC5C,MAAMG,EAAOH,EAAiB,+BAAiC,mBAC/D,GAAIzF,KAAKD,SAAU,CAClB,OAAQwD,IACPE,EAAasC,sBAAsBxC,EAAGuC,EAAO9F,KAAKD,SAAUgE,kBAAkB,aAAaE,YAAY2B,IAEzG,KAAO,CACN,MAAO,8CAA8CE,kBAAsBF,KAC5E,CACD,EAEAtF,EAKA0F,cAAA,SAAAA,EAAcP,GACb,GAAIzF,KAAKD,SAAU,CAClB,OAAQwD,IACPvD,KAAKD,SAAUkG,MAAM1C,EAAGkC,GAE1B,KAAO,CACN,MAAO,qBAAqBA,IAC7B,CACD,EAEAnF,EAKA4F,eAAA,SAAAA,EAAeT,GACd,GAAIzF,KAAKD,SAAU,CAClB,OAAQwD,IACPvD,KAAKD,SAAUoG,OAAO5C,EAAGkC,GAE3B,KAAO,CACN,MAAO,sBAAsBA,IAC9B,CACD,EAEAnF,EAQA8F,wCAAA,SAAAA,EACCC,EACAC,EACAC,EACAd,GAEA,IAAKY,EAAW,CACf,OAAOrF,SACR,CAEA,MAAMwF,EAAoBF,EAAOG,eAC9BC,EAAaC,iBAAiB3G,KAAKE,UAAU0G,qBAAqBN,EAAOG,eAAiB,YAC1FzF,UACH,MAAM6F,EAAgBL,EAAoBxG,KAAKE,UAAU0G,qBAAqBJ,GAAqBxF,UAEnG,GAAIhB,KAAKD,SAAU,CAClB,MAAM+G,EAAaT,EAAUU,OAC7B,MAAMC,EAAuBhH,KAAKH,qBAAqBoH,kBAAkBC,iBAAiBC,mBAC1F,MAAMC,SACEP,GAAeQ,cAAgB,WACrCC,EAAYC,gBAAgBV,GAAeQ,YAAaP,IACxDQ,EAAYE,iCAAiCV,EAAWW,WAAYT,IACtE,MAAMU,GAA0BjC,EAAiB,cAAgB,4BACjE,MAAMkC,GAA6BlC,EAAiB,iBAAmB,+BACvE,MAAMmC,GAAmBnC,EAAiB,GAAK,eAE/C,OAAQlC,IACP,MAAMO,EAAkB9D,KAAKD,SAAUgE,kBAAkB,YACzD,MAAM8D,EAAS,CACdC,UAAWV,EAAiBtD,EAAgBG,YAAY,GAAG2D,qBAAqC,KAChGG,cAAeX,EAAiBA,EAAiBpG,UACjDgH,cAAehI,KAAKC,iBAAiBqC,KACrC2F,oBAAqBb,EAClBtD,EAAgBG,YAAY,kBAAkBoC,EAAUU,UAAUW,MAClE,KACHQ,uBAAwBd,EACrBtD,EAAgBG,YAAY,kBAAkBoC,EAAUU,UAAUY,MAClE,KACHQ,aAAc5B,GAAgBD,GAAQ6B,YACtCC,iBAAkB9B,EAAO8B,iBACzBC,+BAAgC/B,EAAO+B,+BACvCC,mBAAoBjC,GAAWkC,qBAAuB,qCAAuC,YAAc,WAC3GC,UAAWxI,KAAKH,qBAAqB4I,UACrCC,sBAAuB1I,KAAKH,qBAAqBY,gBAAgBiI,sBACjEC,MAAOtC,EAAUuC,OAAOC,WAAa,GACrCC,MAAO9I,KAAKD,SAAU8D,oBAAqBkF,YAE5C/I,KAAKD,UAAUiJ,cAAczF,EAAGvD,KAAKD,SAAS8D,oBAAsBwC,EAAUU,OAAO8B,UAAWhB,GAElG,KAAO,CACN,OAAOP,EAAY2B,mCAClB,CACChC,kBAAmBjH,KAAKH,qBAAqBoH,kBAC7CwB,UAAWzI,KAAKH,qBAAqB4I,WAEtCpC,EACArG,KAAKC,iBAAiBqC,KACtBtC,KAAKH,qBAAqBY,gBAAgBiI,sBAC1C7B,GAAeQ,aACdd,GAAgBD,GAAQ6B,YACzB7B,EAAO8B,iBACP9B,EAAO+B,+BACP5C,EAEF,CACD,EAEAnF,EAMA4I,+BAAA,SAAAA,EAA+B5C,EAAoBb,GAClD,GAAIa,EAAOG,iBAAmBzF,UAAW,CACxC,OAAOA,SACR,CACA,MAAMmI,EAAmBnJ,KAAKE,UAAU0G,qBAAqBN,EAAOG,gBACpE,MAAMJ,EAAY8C,GAAkB9B,YACpC,IAAKhB,EAAW,CACf,OAAOrF,SACR,CACA,MAAMoI,EAAiCpJ,KAAKH,qBAAqBY,gBAAgB4I,kBAAoB,KAErG,GAAIrJ,KAAKD,SAAU,CAClB,OAAQwD,IACP,MAAMO,EAAkB9D,KAAKD,SAAUgE,kBAAkB,YACzD,MAAMuF,EAMF,CAAC,EAELA,EAAqBC,mBAAqB9D,EACvC3B,EAAgBG,YAAY,gCAC5BH,EAAgBG,YAAY,oBAE/B,GAAIoC,EAAUmD,kBAAoBnD,EAAUoD,QAAUL,EAAgC,CACrF,MAAMM,GAAsBjE,EAAiB,cAAgB,4BAC7D,MAAMkE,GAAyBlE,EAAiB,iBAAmB,+BACnE6D,EAAqBrB,mBAAqBnE,EAAgBG,YACzD,OAAOoC,EAAUuD,kBAAkBvD,EAAUU,UAAU2C,MAExDJ,EAAqBpB,sBAAwBpE,EAAgBG,YAC5D,OAAOoC,EAAUuD,kBAAkBvD,EAAUU,UAAU4C,MAExDL,EAAqBX,MAAQtC,EAAUuC,KACxC,CACAU,EAAqBO,sBAAwBxD,EAAUyD,QACvD,MAAMlG,EAAa5D,KAAKD,SAAU8D,oBAClC,GAAIuF,EAAgC,CACnCxF,GAAYmG,uBAAuBX,+BAClC/C,EAAUuD,eACVvD,EAAUU,OACVuC,EACA/F,EAAEyG,YAEJ,KAAO,CACNpG,GAAYmG,uBAAuBE,SAClC5D,EAAUuD,eACVvD,EAAUU,OACVuC,EACA/F,EAAEyG,YAEJ,EAEF,KAAO,CACN,OAAOtD,EAAawD,kCACnB7D,EACAZ,EAAiB,2CAA6C,+BAC9D2D,EACA3D,EAEF,CACD,EAACnF,EAEO6J,+BAAR,SAAQA,EACP9D,EACA+D,GAEA,MAAMC,EAAQhE,GAAWiE,MACzB,IAAKD,EAAO,CACX,OAAOrJ,SACR,CAEA,UAAWqJ,IAAU,SAAU,CAC9B,OAAOrK,KAAKD,SAAWsK,EAAQ3D,EAAa6D,gBAAgBF,EAAO,KACpE,KAAO,CACN,MAAMG,EAAaC,EAA4BJ,GAC/C,GAAIK,EAAWF,IAAeG,EAAwBH,GAAa,CAClE,MAAMI,EAAkBC,EAAuBL,EAAYJ,GAC3D,OAAOU,EAAkBF,EAC1B,CACD,CACD,EAEAtK,EAKAyK,4BAAA,SAAAA,EAA4BtF,GAC3B,MAAMuF,GAAehL,KAAKC,kBAAgCgL,YAAejL,KAAKC,kBAAyCiL,aACpHC,aAAaC,IAAIC,WAEpB,MAAMzD,GAAmBnC,EAAiB,GAAK,eAC/C,MAAM6F,EAAwB,GAAG1D,qBACjC,MAAM2D,EAAuB,GAAG3D,qCAChC,MAAM4D,GAAgC/F,EACnC,2BACA,GAAGmC,qCACN,MAAM6D,EAAsB,GAAG7D,mBAC/B,MAAM8D,EAAqB,GAAG9D,kBAC9B,MAAM+D,EAAgC,GAAG/D,6BACzC,MAAMgE,EAAmC,GAAGhE,gCAE5C,MAAMiE,EAAkB7L,KAAKmK,+BAC5Ba,GAAYc,MACZ9L,KAAKH,qBAAqBoH,mBAG3B,MAAM8E,EAAwB/L,KAAKmK,+BAClCa,GAAYgB,YACZhM,KAAKH,qBAAqBoH,mBAG3B,GAAIjH,KAAKD,SAAU,CAClB,OAAQ4D,IACP,MAAMG,EAAkB9D,KAAKD,SAAUgE,kBAAkB,YACzD,MAAM8D,EAAS,CACdoE,GAAIjM,KAAKH,qBAAqB4I,UAC9ByD,yBAA0BpI,GAAiBG,YAAYuH,GACvDW,gBAAiBrI,GAAiBG,YAAYwH,GAC9CW,eAAgBtI,GAAiBG,YAAYyH,GAC7CW,0BAA2BvI,GAAiBG,YAAY0H,GACxDW,6BAA8BxI,GAAiBG,YAAY2H,GAC3DpD,UAAW1E,GAAiBG,YAAY,aACxCsI,MAAOV,EACPW,YAAaT,EACbU,iBAAkB3I,GAAiBG,YAAYsH,IAEhDvL,KAAKD,SAAU8D,qBAAqB6I,SAASC,wBAC5C7I,GAAiBG,YAAYqH,GAC7BzD,GAGH,KAAO,CACN,MAAMA,EAAS,CACdoE,GAAIvF,EAAa6D,gBAAgBvK,KAAKH,qBAAqB4I,WAC3DyD,yBAA0B,eAAeV,KACzCW,gBAAiB,eAAeV,KAChCW,eAAgB,eAAeV,KAC/BW,0BAA2B,eAAeV,KAC1CW,6BAA8B,eAAeV,KAC7CpD,UAAW,wBACX+D,MAAOV,EACPW,YAAaT,EACbU,iBAAkB,eAAelB,MAGlC,OAAO7E,EAAakG,iBACnB,oCACA,eAAetB,KACf5E,EAAamG,eAAehF,GAE9B,CACD,EAEAvH,EAMAwM,8BAAA,SAAAA,EAA8BxG,EAAsBb,GACnD,GAAIzF,KAAKD,SAAU,CAClB,GAAIuG,EAAOyG,SAAW,KAAM,CAE3B,MAAMC,EAAuBhN,KAAKD,SAASkN,sBAAsB3G,EAAO4G,KACxE,GAAIF,EAAsB,CACzB,OAAQzJ,IACP,MAAM4J,EAAoB1H,EAAiB,+BAAiC,mBAC5E,MAAM3B,EAAkB9D,KAAKD,SAAUgE,kBAAkB,YACzD,MAAMqJ,EAAkB,IAAK7J,EAAE8J,gBAAiBvF,SAAUhE,EAAgBG,YAAYkJ,IACtFH,EAAqBM,UAAU,QAASF,GAE1C,KAAO,CACNG,EAAIC,MAAM,iCAAmClH,EAAO4G,KACpD,OAAOlM,SACR,CACD,KAAO,CACN,OAAQuC,IACP,MAAM4J,EAAoB1H,EAAiB,+BAAiC,mBAC5E,MAAM3B,EAAkB9D,KAAKD,SAAUgE,kBAAkB,YACzD0J,EAAUC,cAAcnK,EAAG+C,EAAOqH,cAAerH,EAAOsH,cAAe,CACtE9F,SAAUhE,EAAgBG,YAAYkJ,KACpCU,MAAOC,IACTP,EAAIC,MAAM,sCAAuCM,KAGpD,CACD,KAAO,CACN,OAAQxH,EAAOyG,SAAW,KACvBzG,EAAOyH,MACPrH,EAAasH,mBACb1H,EACA,CAAE2F,GAAIjM,KAAKH,qBAAqB4I,WAChChD,EAEJ,CACD,EAEAnF,EAKA2N,8BAAA,SAAAA,EAA8BxI,GAC7B,GAAIzF,KAAKD,SAAU,CAClB,OAAQwD,IACPvD,KAAKD,SAAUmO,wBAAwB3K,EAAGkC,GAE5C,KAAO,CACN,MAAO,uCAAuCA,IAC/C,CACD,EAEAnF,EAMA6N,qBAAA,SAAAA,EAAqBC,EAAoB3I,GACxC,GAAIzF,KAAKD,SAAU,CAClB,OAAQwD,IACPvD,KAAKD,SAAUsO,aAAa9K,EAAG6K,EAAW3I,GAE5C,KAAO,CACN,MAAO,4BAA4B2I,MAAc3I,IAClD,CACD,EAEAnF,EAKAgO,gBAAA,SAAAA,EAAgB7I,GACf,GAAIzF,KAAKD,SAAU,CAClB,MAAM6D,EAAa5D,KAAKD,SAAS8D,oBACjC,OAAQN,IACPvD,KAAKD,SAAUwO,QAAQhL,EAAGK,EAAY6B,GAExC,KAAO,CACN,MAAO,oCAAoCA,IAC5C,CACD,EAAC,OAAA7F,CAAA,CA/nB4C,GA+nB5CS,EAAAT,EAAA,OAAAS,CAAA","ignoreList":[]}