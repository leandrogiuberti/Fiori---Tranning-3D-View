{"version":3,"file":"TableHelper.js","names":["TableHelper","_isStaticAction","actionObject","actionName","action","Array","isArray","entityType","this","_getActionOverloadEntityType","toString","find","_action","$IsBound","$Parameter","$Type","$isCollection","sActionName","includes","aParts","split","length","replaceAll","undefined","_isActionOverloadOnDifferentType","sAnnotationTargetEntityType","sEntityType","getNavigationAvailableMap","lineItemCollection","oIBNNavigationAvailableMap","forEach","record","sKey","SemanticObject","Action","Inline","RequiresContext","NavigationAvailable","isPathAnnotationExpression","path","Object","keys","getUiLineItemObject","lineItemOrPresentationContext","convertedMetaData","lineItemOrPresentationObject","resolvePath","getPath","target","visualizations","Visualizations","lineItemObject","item","value","indexOf","$target","term","createBindingToLoadProperties","properties","propertyBindings","map","prop","pathInModel","compileExpression","formatResult","getColumnWidth","oThis","column","dataField","dataFieldActionText","dataModelObjectPath","useRemUnit","microChartTitle","width","enableAutoColumnWidth","getColumnWidthForImage","getColumnWidthForDataField","name","_shouldIncludeHeaderInColumnwidhCalculation","sortable","resolveBindingString","required","TableFormatter","annotations","targetObject","Value","dataType","type","getEditMode","FieldEditMode","Display","hasTextAnnotation","hasText","Core","MediaType","isImageURL","table","widthIncludingColumnHeader","Target","$AnnotationPath","nTmpTextWidth","SizeHelper","getButtonWidth","Label","nTmpVisualizationWidth","TableSizeHelper","getWidthForDataFieldForAnnotation","propertyWidth","isAnnotationOfType","getColumnWidthForChart","columnLabelWidth","chartSize","getChartSize","getShowOnlyChart","title","description","tmpText","titleSize","tmpWidth","getMarginClass","sVisualization","isLastField","sClass","getVBoxVisibility","collection","fieldGroupHiddenExpressions","fieldGroup","allStatic","hiddenPaths","hiddenAnnotationValue","push","$Path","hasAnyPathExpressions","constant","hasAllHiddenStaticExpressions","ifElse","getElementStableId","tableId","elementId","dataFieldPart","generate","getColumnStableId","id","getFieldGroupLabelStableId","pressEventDataFieldForActionButton","tableProperties","entitySetName","operationAvailableMap","isNavigable","arguments","enableAutoScroll","defaultValuesExtensionFunction","forContextMenu","targetEntityTypeName","contextObjectPath","targetEntityType","fullyQualifiedName","staticAction","applicableProperty","notApplicableProperty","contextMenuPath","context","params","contexts","bStaticAction","applicableContexts","notApplicableContexts","invocationGrouping","InvocationGrouping","controlId","contentId","label","fn","ref","isDataFieldForActionEnabled","tableDefinition","isBound","enableOnSelect","annotationTargetEntityType","isCopy","isStaticAction","oOperationAvailableMap","JSON","parse","hasOwnProperty","numberOfSelectedContexts","ActionHelper","getNumberOfContextsExpression","dataFieldForActionEnabledExpression","isDataFieldForIBNEnabled","requiresContext","isNavigationAvailable","isNavigationAvailablePath","isAnalyticalTable","enableAnalytics","entitySet","metaModel","getModel","Log","warning","getObject","substring","dataFieldForIBNEnabledExpression","buildExpressionForMultiValueFieldReadOnly","or","readOnly","and","UI","IsInactive","creationMode","equal","fieldMode","setHeaderLabelVisibility","datafield","dataFieldCollection","some","oDC","getTextOnActionField","oDataField","oContext","sPathDataFields","aMultipleLabels","i","reduce","a","b","_getResponsiveTableColumnSettings","oColumn","tableType","settings","microChartSize","showMicroChartLabel","getDelegate","isALP","entityName","filterOnActiveEntities","delegate","control","Error","payload","collectionName","hierarchyQualifier","initialExpansionLevel","annotation","createInPlace","analyticalConfiguration","aggregationOnLeafLevel","aggregationConfiguration","leafLevel","stringify","enableFastCreationRow","async","oFastCreationRow","sPath","oModel","oFinalUIState","oFastCreationListBinding","oFastCreationContext","CommonUtils","getIsEditable","isDeleted","bindList","$$updateGroupId","$$groupId","refreshInternal","create","setBindingContext","created","e","trace","oError","error","isActionShownInContextMenu","annotationPath","convertedTypes","actionTarget","ActionTarget","parameters","isCollection","sourceEntityType","valueOf","requiresSelection","requiresIContext"],"sources":["./TableHelper.ts"],"sourcesContent":["import type { ConvertedMetadata, EntityType, PathAnnotationExpression, PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldForAnnotation,\n\tDataFieldForIntentBasedNavigation,\n\tDataFieldTypes,\n\tFieldGroup,\n\tLineItem,\n\tPresentationVariant,\n\tPresentationVariantType,\n\tSelectionPresentationVariant\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { CompiledBindingToolkitExpression, PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tfn,\n\tformatResult,\n\tifElse,\n\tor,\n\tpathInModel,\n\tref,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { TableColumnSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { MetaModelAction } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { AnnotationAction, BaseAction, CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { AnnotationTableColumn } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isAnnotationOfType, isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { hasText, isImageURL } from \"sap/fe/core/templating/PropertyHelper\";\nimport { getEditMode } from \"sap/fe/core/templating/UIFormatters\";\nimport TableFormatter from \"sap/fe/macros/formatters/TableFormatter\";\nimport ActionHelper from \"sap/fe/macros/internal/helpers/ActionHelper\";\nimport type TableBlock from \"sap/fe/macros/table/Table.block\";\nimport TableSizeHelper from \"sap/fe/macros/table/TableSizeHelper\";\nimport FieldEditMode from \"sap/ui/mdc/enums/FieldEditMode\";\nimport type { default as BaseContext, default as Context } from \"sap/ui/model/Context\";\nimport type v4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type CreationRow from \"sap/ui/table/CreationRow\";\nimport type { MetaModelType } from \"../../../../../../../types/metamodel_types\";\n\ntype Hidden = { \"@com.sap.vocabularies.UI.v1.Hidden\": boolean | { $Path?: string } };\ntype ColumnWidthThis = { enableAutoColumnWidth?: boolean; widthIncludingColumnHeader?: boolean; tableType: string };\ntype MicroChartInfo = { title: string; description: string };\n/**\n * Helper class used by the control library for OData-specific handling (OData V4)\n * @private\n */\nconst TableHelper = {\n\t/**\n\t * Check if a given action is static.\n\t * @param actionObject The instance or the path of the action\n\t * @param actionName The name of the action\n\t * @returns Returns 'true' if action is static, else 'false'\n\t * @private\n\t */\n\t_isStaticAction: function (actionObject: MetaModelAction | MetaModelAction[] | undefined | string, actionName: String): boolean {\n\t\tlet action: MetaModelAction | undefined | string;\n\t\tif (actionObject) {\n\t\t\tif (Array.isArray(actionObject)) {\n\t\t\t\tconst entityType = this._getActionOverloadEntityType(actionName.toString());\n\t\t\t\tif (entityType) {\n\t\t\t\t\taction = actionObject.find(function (_action: MetaModelAction) {\n\t\t\t\t\t\treturn _action.$IsBound && _action.$Parameter[0].$Type === entityType;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// if this is just one - OK we take it. If it's more it's actually a wrong usage by the app\n\t\t\t\t\t// as we used the first one all the time we keep it as it is\n\t\t\t\t\taction = actionObject[0];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taction = actionObject;\n\t\t\t}\n\t\t}\n\n\t\treturn !!action && typeof action !== \"string\" && action.$IsBound && !!action.$Parameter[0].$isCollection;\n\t},\n\n\t/**\n\t * Get the entity type of an action overload.\n\t * @param sActionName The name of the action.\n\t * @returns The entity type used in the action overload.\n\t * @private\n\t */\n\t_getActionOverloadEntityType: function (sActionName: string): string | undefined {\n\t\tif (sActionName && sActionName.includes(\"(\")) {\n\t\t\tconst aParts = sActionName.split(\"(\");\n\t\t\treturn aParts[aParts.length - 1].replaceAll(\")\", \"\");\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Checks whether the action is overloaded on a different entity type.\n\t * @param sActionName The name of the action.\n\t * @param sAnnotationTargetEntityType The entity type of the annotation target.\n\t * @returns Returns 'true' if the action is overloaded with a different entity type, else 'false'.\n\t * @private\n\t */\n\t_isActionOverloadOnDifferentType: function (sActionName: string, sAnnotationTargetEntityType: string): boolean {\n\t\tconst sEntityType = this._getActionOverloadEntityType(sActionName);\n\t\treturn !!sEntityType && sAnnotationTargetEntityType !== sEntityType;\n\t},\n\n\tgetNavigationAvailableMap: function (lineItemCollection: DataFieldAbstractTypes[] | undefined): Record<string, unknown> | undefined {\n\t\tconst oIBNNavigationAvailableMap: Record<string, unknown> = {};\n\t\tlineItemCollection?.forEach((record) => {\n\t\t\tif (\"SemanticObject\" in record) {\n\t\t\t\tconst sKey = `${record.SemanticObject}-${record.Action}`;\n\t\t\t\tif (record.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation && !record.Inline && record.RequiresContext) {\n\t\t\t\t\tif (record.NavigationAvailable !== undefined) {\n\t\t\t\t\t\toIBNNavigationAvailableMap[sKey] = isPathAnnotationExpression(record.NavigationAvailable)\n\t\t\t\t\t\t\t? (record.NavigationAvailable as PathAnnotationExpression<boolean>).path\n\t\t\t\t\t\t\t: record.NavigationAvailable;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn Object.keys(oIBNNavigationAvailableMap).length > 0 ? oIBNNavigationAvailableMap : undefined;\n\t},\n\n\tgetUiLineItemObject: function (\n\t\tlineItemOrPresentationContext: Context,\n\t\tconvertedMetaData: ConvertedMetadata\n\t): DataFieldAbstractTypes[] | undefined {\n\t\tconst lineItemOrPresentationObject = convertedMetaData.resolvePath(lineItemOrPresentationContext.getPath()).target as\n\t\t\t| PresentationVariant\n\t\t\t| LineItem;\n\t\tif (!lineItemOrPresentationObject) return undefined;\n\t\tconst visualizations = (convertedMetaData.resolvePath(lineItemOrPresentationContext.getPath()).target as PresentationVariantType)\n\t\t\t.Visualizations;\n\n\t\tconst lineItemObject = (\n\t\t\tvisualizations\n\t\t\t\t? visualizations?.find((item) => item.value.indexOf(\"@\" + UIAnnotationTerms.LineItem) === 0)?.$target\n\t\t\t\t: lineItemOrPresentationObject\n\t\t) as LineItem;\n\t\treturn lineItemObject?.term === UIAnnotationTerms.LineItem ? lineItemObject : undefined;\n\t},\n\t/**\n\t * Creates and returns the binding expression to load a given list of properties.\n\t * @param properties List of properties used on a custom column\n\t * @returns The binding expression to load the given list of properties\n\t */\n\tcreateBindingToLoadProperties: function (properties?: string[]): CompiledBindingToolkitExpression {\n\t\tif (properties === undefined || properties.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst propertyBindings = properties?.map((prop) => pathInModel(prop)) ?? [];\n\t\treturn compileExpression(formatResult(propertyBindings, \"._formatters.StandardFormatter#loadProperties\"));\n\t},\n\t/**\n\t * Method to get column's width if defined from manifest or from customization via annotations.\n\t * @param oThis The instance of the inner model of the Table building block\n\t * @param oThis.enableAutoColumnWidth Indicates if the column width should be calculated automatically\n\t * @param oThis.widthIncludingColumnHeader Indicates if the column width should include the header\n\t * @param column Defined width of the column, which is taken with priority if not null, undefined or empty\n\t * @param dataField DataField definition object\n\t * @param dataFieldActionText DataField's text from button\n\t * @param dataModelObjectPath The object path of the data model\n\t * @param useRemUnit Indicates if the rem unit must be concatenated with the column width result\n\t * @param microChartTitle The object containing title and description of the MicroChart\n\t * @param microChartTitle.title The title of the microchart\n\t * @param microChartTitle.description The description of the microchart\n\t * @returns - Column width if defined, otherwise width is set to auto\n\t */\n\tgetColumnWidth: function (\n\t\toThis: ColumnWidthThis,\n\t\tcolumn: AnnotationTableColumn,\n\t\tdataField: MetaModelType<DataField | DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tdataFieldActionText: string | undefined,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\t\tuseRemUnit: boolean,\n\t\tmicroChartTitle?: MicroChartInfo\n\t): CompiledBindingToolkitExpression | string | number | undefined {\n\t\tif (column.width) {\n\t\t\treturn column.width;\n\t\t}\n\t\tif (oThis.enableAutoColumnWidth === true) {\n\t\t\tlet width;\n\t\t\twidth =\n\t\t\t\tthis.getColumnWidthForImage(dataModelObjectPath as DataModelObjectPath<DataFieldTypes>) ||\n\t\t\t\tthis.getColumnWidthForDataField(oThis, column, dataField, dataFieldActionText, dataModelObjectPath, microChartTitle) ||\n\t\t\t\tundefined;\n\t\t\tif (width) {\n\t\t\t\treturn useRemUnit ? `${width}rem` : width;\n\t\t\t}\n\t\t\twidth = compileExpression(\n\t\t\t\tformatResult(\n\t\t\t\t\t[\n\t\t\t\t\t\tpathInModel(\"/editMode\", \"ui\"),\n\t\t\t\t\t\tpathInModel(\"tablePropertiesAvailable\", \"internal\"),\n\t\t\t\t\t\tcolumn.name,\n\t\t\t\t\t\tuseRemUnit,\n\t\t\t\t\t\tthis._shouldIncludeHeaderInColumnwidhCalculation(oThis, column),\n\t\t\t\t\t\tcolumn.sortable ?? false,\n\t\t\t\t\t\tresolveBindingString(column.required ?? false, \"boolean\") as PathInModelExpression<boolean>\n\t\t\t\t\t],\n\t\t\t\t\tTableFormatter.getColumnWidth\n\t\t\t\t)\n\t\t\t);\n\t\t\treturn width;\n\t\t}\n\t\treturn undefined;\n\t},\n\n\t/**\n\t * Method to get the width of the column containing an image.\n\t * @param dataModelObjectPath The data model object path\n\t * @returns - Column width if defined, otherwise null (the width is treated as a rem value)\n\t */\n\tgetColumnWidthForImage: function (dataModelObjectPath: DataModelObjectPath<DataFieldTypes>): number | null {\n\t\tlet width: number | null = null;\n\t\tconst annotations = dataModelObjectPath.targetObject?.Value?.$target?.annotations;\n\t\tconst dataType = dataModelObjectPath.targetObject?.Value?.$target?.type;\n\t\tif (\n\t\t\tdataModelObjectPath.targetObject?.Value &&\n\t\t\tgetEditMode(\n\t\t\t\tdataModelObjectPath.targetObject.Value?.$target,\n\t\t\t\tdataModelObjectPath,\n\t\t\t\tfalse,\n\t\t\t\tfalse,\n\t\t\t\tdataModelObjectPath.targetObject\n\t\t\t) === FieldEditMode.Display &&\n\t\t\tdataModelObjectPath.targetObject.Value?.$target\n\t\t) {\n\t\t\tconst hasTextAnnotation = hasText(dataModelObjectPath.targetObject.Value.$target);\n\t\t\tif (dataType === \"Edm.Stream\" && !hasTextAnnotation && annotations?.Core?.MediaType?.includes?.(\"image/\")) {\n\t\t\t\twidth = 6.2;\n\t\t\t}\n\t\t} else if (\n\t\t\tannotations &&\n\t\t\t(isImageURL(dataModelObjectPath.targetObject?.Value?.$target) || annotations?.Core?.MediaType?.includes?.(\"image/\"))\n\t\t) {\n\t\t\twidth = 6.2;\n\t\t}\n\t\treturn width;\n\t},\n\n\t/**\n\t * Check if the column header should be included in the column width.\n\t * @param table The table configuration object\n\t * @param table.widthIncludingColumnHeader Indicates if the column width should include the header\n\t * @param column The column configuration\n\t * @returns Returns true if the column width should include the header\n\t */\n\t_shouldIncludeHeaderInColumnwidhCalculation(table: ColumnWidthThis, column: AnnotationTableColumn): boolean | undefined {\n\t\treturn column.widthIncludingColumnHeader !== undefined ? column.widthIncludingColumnHeader : table.widthIncludingColumnHeader;\n\t},\n\n\t/**\n\t * Method to get the width of the column containing the DataField.\n\t * @param oThis The instance of the inner model of the Table building block\n\t * @param oThis.widthIncludingColumnHeader Indicates if the column width should include the header\n\t * @param column Defined width of the column, which is taken with priority if not null, undefined or empty\n\t * @param dataField Data Field\n\t * @param dataFieldActionText DataField's text from button\n\t * @param dataModelObjectPath The data model object path\n\t * @param microChartTitle The object containing the title and description of the MicroChart\n\t * @returns - Column width if defined, otherwise null ( the width is treated as a rem value)\n\t */\n\tgetColumnWidthForDataField: function (\n\t\toThis: ColumnWidthThis,\n\t\tcolumn: AnnotationTableColumn,\n\t\tdataField: MetaModelType<DataField | DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tdataFieldActionText: string | undefined,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\t\tmicroChartTitle?: MicroChartInfo\n\t): number | null {\n\t\tconst annotations = dataModelObjectPath.targetObject?.annotations;\n\t\tconst dataType = dataModelObjectPath.targetObject?.$Type;\n\t\tlet width: number | null = null;\n\t\tif (\n\t\t\tdataType === UIAnnotationTypes.DataFieldForAction ||\n\t\t\tdataType === UIAnnotationTypes.DataFieldForIntentBasedNavigation ||\n\t\t\t(dataType === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\t\t\t!(dataField as MetaModelType<DataFieldForAnnotation>).Target?.$AnnotationPath.includes(`@${UIAnnotationTerms.FieldGroup}`))\n\t\t) {\n\t\t\tlet nTmpTextWidth;\n\t\t\tnTmpTextWidth =\n\t\t\t\tSizeHelper.getButtonWidth(dataFieldActionText) ||\n\t\t\t\tSizeHelper.getButtonWidth(dataField?.Label?.toString()) ||\n\t\t\t\tSizeHelper.getButtonWidth((annotations as { Label?: string })?.Label); // REVIEW : This makes no sense :)\n\n\t\t\t// get width for rating or progress bar datafield\n\t\t\tconst nTmpVisualizationWidth = TableSizeHelper.getWidthForDataFieldForAnnotation(\n\t\t\t\tdataModelObjectPath.targetObject,\n\t\t\t\tthis._shouldIncludeHeaderInColumnwidhCalculation(oThis, column)\n\t\t\t).propertyWidth;\n\n\t\t\tif (nTmpVisualizationWidth > nTmpTextWidth) {\n\t\t\t\twidth = nTmpVisualizationWidth;\n\t\t\t} else if (\n\t\t\t\tdataFieldActionText ||\n\t\t\t\t(annotations &&\n\t\t\t\t\t(isAnnotationOfType(annotations, UIAnnotationTypes.DataFieldForIntentBasedNavigation) ||\n\t\t\t\t\t\tisAnnotationOfType(annotations, UIAnnotationTypes.DataFieldForAction)))\n\t\t\t) {\n\t\t\t\t// Add additional 1.8 rem to avoid showing ellipsis in some cases.\n\t\t\t\tnTmpTextWidth += 1.8;\n\t\t\t\twidth = nTmpTextWidth;\n\t\t\t}\n\t\t\twidth = width ?? this.getColumnWidthForChart(oThis, column, dataField, nTmpTextWidth, microChartTitle);\n\t\t}\n\t\treturn width;\n\t},\n\n\t/**\n\t * Method to get the width of the column containing the Chart.\n\t * @param oThis The instance of the inner model of the Table building block\n\t * @param column Defined width of the column, which is taken with priority if not null, undefined or empty\n\t * @param dataField Data Field\n\t * @param columnLabelWidth The width of the column label or button label\n\t * @param microChartTitle The object containing the title and the description of the MicroChart\n\t * @returns - Column width if defined, otherwise null (the width is treated as a rem value)\n\t */\n\tgetColumnWidthForChart(\n\t\toThis: ColumnWidthThis,\n\t\tcolumn: AnnotationTableColumn,\n\t\tdataField: MetaModelType<DataField | DataFieldForAnnotation | DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tcolumnLabelWidth: number,\n\t\tmicroChartTitle?: MicroChartInfo\n\t): number | null {\n\t\tlet chartSize,\n\t\t\twidth: number | null = null;\n\t\tif ((dataField as MetaModelType<DataFieldForAnnotation>).Target?.$AnnotationPath?.includes(`@${UIAnnotationTerms.Chart}`)) {\n\t\t\tswitch (this.getChartSize(oThis, column)) {\n\t\t\t\tcase \"XS\":\n\t\t\t\t\tchartSize = 4.4;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"S\":\n\t\t\t\t\tchartSize = 4.6;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"M\":\n\t\t\t\t\tchartSize = 5.5;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"L\":\n\t\t\t\t\tchartSize = 6.9;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tchartSize = 5.3;\n\t\t\t}\n\t\t\tcolumnLabelWidth += 1.8;\n\t\t\tif (!this.getShowOnlyChart(oThis, column) && (microChartTitle?.title.length || microChartTitle?.description.length)) {\n\t\t\t\tconst tmpText =\n\t\t\t\t\tmicroChartTitle.title.length > microChartTitle.description.length ? microChartTitle.title : microChartTitle.description;\n\t\t\t\tconst titleSize = SizeHelper.getButtonWidth(tmpText) + 7;\n\t\t\t\tconst tmpWidth = titleSize > columnLabelWidth ? titleSize : columnLabelWidth;\n\t\t\t\twidth = tmpWidth;\n\t\t\t} else if (columnLabelWidth > chartSize) {\n\t\t\t\twidth = columnLabelWidth;\n\t\t\t} else {\n\t\t\t\twidth = chartSize;\n\t\t\t}\n\t\t}\n\t\treturn width;\n\t},\n\t/**\n\t * Method to add a margin class at the control.\n\t * @param sVisualization\n\t * @param isLastField Indicates if the field is the last field in the field group\n\t * @returns Adjusting the margin\n\t */\n\tgetMarginClass: function (sVisualization: string, isLastField: boolean): string {\n\t\tlet sClass = \"\";\n\t\tif (isLastField) {\n\t\t\t//If rating indicator is last element in fieldgroup, then the 0.5rem margin added by sapMRI class of interactive rating indicator on top and bottom must be nullified.\n\t\t\tif (sVisualization == \"com.sap.vocabularies.UI.v1.VisualizationType/Rating\") {\n\t\t\t\tsClass = \"sapUiNoMarginBottom sapUiNoMarginTop\";\n\t\t\t}\n\t\t} else if (sVisualization === \"com.sap.vocabularies.UI.v1.VisualizationType/Rating\") {\n\t\t\t//If rating indicator is NOT the last element in fieldgroup, then to maintain the 0.5rem spacing between cogetMarginClassntrols (as per UX spec),\n\t\t\t//only the top margin added by sapMRI class of interactive rating indicator must be nullified.\n\n\t\t\tsClass = \"sapUiNoMarginTop\";\n\t\t} else {\n\t\t\tsClass = \"sapUiTinyMarginBottom\";\n\t\t}\n\t\treturn sClass;\n\t},\n\n\t/**\n\t * Method to get VBox visibility.\n\t * @param collection Collection of data fields in VBox\n\t * @param fieldGroupHiddenExpressions Hidden expression contained in FieldGroup\n\t * @param fieldGroup Data field containing the VBox\n\t * @returns Visibility expression\n\t */\n\tgetVBoxVisibility: function (\n\t\tcollection: Array<DataFieldForAnnotation & Hidden>,\n\t\tfieldGroupHiddenExpressions: CompiledBindingToolkitExpression,\n\t\tfieldGroup: FieldGroup & Hidden\n\t): CompiledBindingToolkitExpression {\n\t\tlet allStatic = true;\n\t\tconst hiddenPaths = [];\n\n\t\tif (fieldGroup[`@${UIAnnotationTerms.Hidden}`]) {\n\t\t\treturn fieldGroupHiddenExpressions;\n\t\t}\n\n\t\tfor (const dataField of collection) {\n\t\t\tconst hiddenAnnotationValue = dataField[`@${UIAnnotationTerms.Hidden}`];\n\t\t\tif (hiddenAnnotationValue === undefined || hiddenAnnotationValue === false) {\n\t\t\t\thiddenPaths.push(false);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenAnnotationValue === true) {\n\t\t\t\thiddenPaths.push(true);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (hiddenAnnotationValue.$Path) {\n\t\t\t\thiddenPaths.push(pathInModel(hiddenAnnotationValue.$Path));\n\t\t\t\tallStatic = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (typeof hiddenAnnotationValue === \"object\") {\n\t\t\t\t// Dynamic expression found in a field\n\t\t\t\treturn fieldGroupHiddenExpressions;\n\t\t\t}\n\t\t}\n\n\t\tconst hasAnyPathExpressions = constant(hiddenPaths.length > 0 && allStatic !== true);\n\t\tconst hasAllHiddenStaticExpressions = constant(hiddenPaths.length > 0 && !hiddenPaths.includes(false) && allStatic);\n\n\t\treturn compileExpression(\n\t\t\tifElse(\n\t\t\t\thasAnyPathExpressions,\n\t\t\t\tformatResult(hiddenPaths, TableFormatter.getVBoxVisibility),\n\t\t\t\tifElse(hasAllHiddenStaticExpressions, constant(false), constant(true))\n\t\t\t)\n\t\t);\n\t},\n\n\t/**\n\t * Method to get the stable ID of a table element (column or FieldGroup label).\n\t * @param tableId Current object ID\n\t * @param elementId Element Id or suffix\n\t * @param dataModelObjectPath DataModelObjectPath of the dataField\n\t * @returns The stable ID for a given column\n\t */\n\tgetElementStableId: function (\n\t\ttableId: string | undefined,\n\t\telementId: string,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>\n\t): string | undefined {\n\t\tif (!tableId) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst dataField = dataModelObjectPath.targetObject;\n\t\tlet dataFieldPart: string | DataFieldAbstractTypes;\n\t\tswitch (dataField?.$Type) {\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\tdataFieldPart = dataField.Target.value;\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\t\tdataFieldPart = dataField;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdataFieldPart = (dataField as DataField).Value?.path ?? \"\";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn generate([tableId, elementId, dataFieldPart]);\n\t},\n\n\t/**\n\t * Method to get the stable ID of the column.\n\t * @param id Current object ID\n\t * @param dataModelObjectPath DataModelObjectPath of the dataField\n\t * @returns The stable ID for a given column\n\t */\n\tgetColumnStableId: function (id: string, dataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>): string | undefined {\n\t\treturn TableHelper.getElementStableId(id, \"C\", dataModelObjectPath);\n\t},\n\n\tgetFieldGroupLabelStableId: function (\n\t\tid: string,\n\t\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>\n\t): string | undefined {\n\t\treturn TableHelper.getElementStableId(id, \"FGLabel\", dataModelObjectPath);\n\t},\n\n\t/**\n\t * Method to get the expression for the 'press' event for the DataFieldForActionButton.\n\t * @param tableProperties The properties of the table control\n\t * @param tableProperties.contextObjectPath The datamodel object path for the table\n\t * @param tableProperties.contentId The id of the MDC table control\n\t * @param dataField Value of the DataPoint\n\t * @param entitySetName Name of the EntitySet\n\t * @param operationAvailableMap OperationAvailableMap as stringified JSON object\n\t * @param actionObject\n\t * @param isNavigable Action either triggers navigation or not\n\t * @param enableAutoScroll Action either triggers scrolling to the newly created items in the related table or not\n\t * @param defaultValuesExtensionFunction Function name to prefill dialog parameters\n\t * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n\t * @returns The binding expression\n\t */\n\tpressEventDataFieldForActionButton: function (\n\t\ttableProperties: {\n\t\t\tcontextObjectPath: DataModelObjectPath<LineItem | SelectionPresentationVariant | PresentationVariant>;\n\t\t\tcontentId: string;\n\t\t},\n\t\tdataField: DataFieldForAction | undefined,\n\t\tentitySetName: string,\n\t\toperationAvailableMap: string,\n\t\tactionObject?: MetaModelAction | MetaModelAction[] | string,\n\t\tisNavigable = false,\n\t\tenableAutoScroll?: boolean,\n\t\tdefaultValuesExtensionFunction?: string,\n\t\tforContextMenu?: boolean\n\t): CompiledBindingToolkitExpression {\n\t\tif (!dataField) return undefined;\n\t\tconst sActionName = dataField.Action,\n\t\t\ttargetEntityTypeName = tableProperties.contextObjectPath.targetEntityType.fullyQualifiedName,\n\t\t\tstaticAction =\n\t\t\t\ttypeof actionObject !== \"string\" &&\n\t\t\t\t(this._isStaticAction(actionObject, sActionName) ||\n\t\t\t\t\tthis._isActionOverloadOnDifferentType(sActionName.toString(), targetEntityTypeName)),\n\t\t\tapplicableProperty = !forContextMenu ? \"aApplicable\" : \"aApplicableForContextMenu\",\n\t\t\tnotApplicableProperty = !forContextMenu ? \"aNotApplicable\" : \"aNotApplicableForContextMenu\",\n\t\t\tcontextMenuPath = !forContextMenu ? \"\" : \"contextmenu/\",\n\t\t\tcontext = pathInModel(`${contextMenuPath}selectedContexts`, \"internal\"),\n\t\t\tparams = {\n\t\t\t\tcontexts: !staticAction ? context : null,\n\t\t\t\tbStaticAction: staticAction ? staticAction : undefined,\n\t\t\t\tentitySetName: entitySetName,\n\t\t\t\tapplicableContexts: !staticAction\n\t\t\t\t\t? pathInModel(`dynamicActions/${dataField.Action}/${applicableProperty}/`, \"internal\")\n\t\t\t\t\t: null,\n\t\t\t\tnotApplicableContexts: !staticAction\n\t\t\t\t\t? pathInModel(`dynamicActions/${dataField.Action}/${notApplicableProperty}/`, \"internal\")\n\t\t\t\t\t: null,\n\t\t\t\tisNavigable: isNavigable,\n\t\t\t\tenableAutoScroll: enableAutoScroll,\n\t\t\t\tdefaultValuesExtensionFunction: defaultValuesExtensionFunction,\n\t\t\t\tinvocationGrouping: dataField?.InvocationGrouping === \"UI.OperationGroupingType/ChangeSet\" ? \"ChangeSet\" : \"Isolated\",\n\t\t\t\tcontrolId: tableProperties.contentId,\n\t\t\t\toperationAvailableMap: operationAvailableMap,\n\t\t\t\tlabel: dataField.Label\n\t\t\t};\n\t\treturn compileExpression(fn(\"API.onActionPress\", [ref(\"$event\"), ref(\"$controller\"), dataField.Action, params]));\n\t\t//return ActionHelper.getPressEventDataFieldForActionButton(table.id!, dataField, params, operationAvailableMap);\n\t},\n\n\t/**\n\t * Method to determine the binding expression for 'enabled' property of DataFieldForAction actions.\n\t * @param tableDefinition The table definition from the table converter\n\t * @param actionName The name of the action\n\t * @param isBound IsBound for Action\n\t * @param actionObject\n\t * @param enableOnSelect Define the enabling of the action (single or multiselect)\n\t * @param annotationTargetEntityType The entity type of the annotation target\n\t * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n\t * @param isCopy\n\t * @returns A binding expression to define the 'enabled' property of the action\n\t */\n\tisDataFieldForActionEnabled: function (\n\t\ttableDefinition: TableVisualization,\n\t\tactionName: string | String,\n\t\tisBound: boolean,\n\t\tactionObject?: MetaModelAction | MetaModelAction[] | string,\n\t\tenableOnSelect?: string,\n\t\tannotationTargetEntityType?: EntityType,\n\t\tforContextMenu?: boolean,\n\t\tisCopy?: boolean\n\t): string | boolean {\n\t\tif (!annotationTargetEntityType) return false;\n\n\t\tconst isStaticAction = this._isStaticAction(actionObject, actionName);\n\n\t\t// Check for action overload on a different Entity type.\n\t\t// If yes, table row selection is not required to enable this action.\n\t\tif (this._isActionOverloadOnDifferentType(actionName.toString(), annotationTargetEntityType.fullyQualifiedName)) {\n\t\t\t// Action overload defined on different entity type\n\t\t\tconst oOperationAvailableMap = tableDefinition && JSON.parse(tableDefinition.operationAvailableMap);\n\t\t\tif (oOperationAvailableMap?.hasOwnProperty(actionName)) {\n\t\t\t\t// Core.OperationAvailable annotation defined for the action.\n\t\t\t\t// Need to refer to internal model for enabled property of the dynamic action.\n\t\t\t\t// return compileBinding(bindingExpression(\"dynamicActions/\" + sActionName + \"/bEnabled\", \"internal\"), true);\n\t\t\t\treturn !forContextMenu\n\t\t\t\t\t? `{= \\${internal>dynamicActions/${actionName}/bEnabled} }`\n\t\t\t\t\t: `{= \\${internal>dynamicActions/${actionName}/bEnabledForContextMenu} }`;\n\t\t\t}\n\t\t\t// Consider the action just like any other static DataFieldForAction.\n\t\t\treturn true;\n\t\t}\n\t\tif (!isBound || isStaticAction) {\n\t\t\treturn true;\n\t\t}\n\t\tconst numberOfSelectedContexts = isCopy\n\t\t\t? ActionHelper.getNumberOfContextsExpression(\"single\", forContextMenu)\n\t\t\t: ActionHelper.getNumberOfContextsExpression(enableOnSelect ?? \"multiselect\", forContextMenu);\n\n\t\tlet dataFieldForActionEnabledExpression = \"\";\n\n\t\tconst action = !forContextMenu\n\t\t\t? `\\${internal>dynamicActions/${actionName}/bEnabled}`\n\t\t\t: `\\${internal>dynamicActions/${actionName}/bEnabledForContextMenu}`;\n\t\tdataFieldForActionEnabledExpression = `${numberOfSelectedContexts} && ${action}`;\n\n\t\treturn `{= ${dataFieldForActionEnabledExpression}}`;\n\t},\n\t/**\n\t * Method to determine the binding expression for 'enabled' property of DataFieldForIBN actions.\n\t * @param tableProperties The properties of the table control\n\t * @param tableProperties.collection  The collection context to be used\n\t * @param tableProperties.tableDefinition The table definition from the table converter\n\t * @param dataField The value of the data field\n\t * @param requiresContext RequiresContext for IBN\n\t * @param isNavigationAvailable Define if the navigation is available\n\t * @param forContextMenu\n\t * @returns A binding expression to define the 'enabled' property of the action\n\t */\n\tisDataFieldForIBNEnabled: function (\n\t\ttableProperties: {\n\t\t\tcollection: Context;\n\t\t\ttableDefinition: TableVisualization;\n\t\t},\n\t\tdataField: DataFieldForIntentBasedNavigation,\n\t\trequiresContext: boolean | PropertyAnnotationValue<Boolean>,\n\t\tisNavigationAvailable?: boolean | PropertyAnnotationValue<Boolean>,\n\t\tforContextMenu?: boolean\n\t): string | boolean {\n\t\tlet isNavigationAvailablePath = null;\n\t\tif (isPathAnnotationExpression(isNavigationAvailable)) {\n\t\t\tisNavigationAvailablePath = isNavigationAvailable.path;\n\t\t}\n\t\tconst isAnalyticalTable = tableProperties?.tableDefinition?.enableAnalytics;\n\n\t\tif (!requiresContext) {\n\t\t\tconst entitySet = tableProperties.collection.getPath();\n\t\t\tconst metaModel = tableProperties.collection.getModel();\n\t\t\tif (isNavigationAvailable === false && !isAnalyticalTable) {\n\t\t\t\tLog.warning(\"NavigationAvailable as false is incorrect usage\");\n\t\t\t\treturn false;\n\t\t\t} else if (\n\t\t\t\tisNavigationAvailablePath &&\n\t\t\t\t!isAnalyticalTable &&\n\t\t\t\tisPathAnnotationExpression(dataField?.NavigationAvailable) &&\n\t\t\t\tmetaModel.getObject(entitySet + \"/$Partner\") === dataField.NavigationAvailable.path.split(\"/\")[0]\n\t\t\t) {\n\t\t\t\treturn `{= \\${${isNavigationAvailablePath.substring(\n\t\t\t\t\tisNavigationAvailablePath.indexOf(\"/\") + 1,\n\t\t\t\t\tisNavigationAvailablePath.length\n\t\t\t\t)}}}`;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tlet dataFieldForIBNEnabledExpression = \"\",\n\t\t\tnumberOfSelectedContexts,\n\t\t\taction;\n\n\t\tif (isNavigationAvailable === true || isAnalyticalTable) {\n\t\t\tdataFieldForIBNEnabledExpression = !(forContextMenu ?? false)\n\t\t\t\t? \"%{internal>numberOfSelectedContexts} >= 1\"\n\t\t\t\t: \"%{internal>contextmenu/numberOfSelectedContexts} >= 1\";\n\t\t} else if (isNavigationAvailable === false) {\n\t\t\tLog.warning(\"NavigationAvailable as false is incorrect usage\");\n\t\t\treturn false;\n\t\t} else {\n\t\t\tnumberOfSelectedContexts = !(forContextMenu ?? false)\n\t\t\t\t? \"%{internal>numberOfSelectedContexts} >= 1\"\n\t\t\t\t: \"%{internal>contextmenu/numberOfSelectedContexts} >= 1\";\n\t\t\taction = !(forContextMenu ?? false)\n\t\t\t\t? `\\${internal>ibn/${dataField.SemanticObject}-${dataField.Action}/bEnabled}`\n\t\t\t\t: `\\${internal>ibn/${dataField.SemanticObject}-${dataField.Action}/bEnabledForContextMenu}`;\n\t\t\tdataFieldForIBNEnabledExpression = numberOfSelectedContexts + \" && \" + action;\n\t\t}\n\n\t\treturn `{= ${dataFieldForIBNEnabledExpression}}`;\n\t},\n\n\tbuildExpressionForMultiValueFieldReadOnly: function (table: TableBlock): CompiledBindingToolkitExpression {\n\t\treturn compileExpression(\n\t\t\tifElse(\n\t\t\t\tor(table.readOnly === true, and(UI.IsInactive, table.creationMode.name === \"InlineCreationRows\")),\n\t\t\t\tconstant(true),\n\t\t\t\tequal(table.fieldMode, \"nowrapper\")\n\t\t\t)\n\t\t);\n\t},\n\n\t/**\n\t * Method to set the visibility of the label for the column header.\n\t * @param datafield DataField\n\t * @param dataFieldCollection List of items inside a fieldgroup (if any)\n\t * @returns `true` if the header label needs to be visible else false.\n\t */\n\tsetHeaderLabelVisibility: function (\n\t\tdatafield: MetaModelType<DataFieldForAction | DataFieldForIntentBasedNavigation>,\n\t\tdataFieldCollection?: MetaModelType<DataFieldForAction | DataFieldForIntentBasedNavigation>[]\n\t): boolean {\n\t\t// If Inline button/navigation action, return false, else true;\n\t\tif (!dataFieldCollection) {\n\t\t\tif (datafield.$Type?.includes(\"DataFieldForAction\") && datafield.Inline) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (datafield.$Type?.includes(\"DataFieldForIntentBasedNavigation\") && datafield.Inline) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\t// In Fieldgroup, If NOT all datafield/datafieldForAnnotation exists with hidden, return true;\n\t\treturn dataFieldCollection.some(function (oDC) {\n\t\t\tif (\n\t\t\t\t(oDC.$Type === UIAnnotationTypes.DataField || oDC.$Type === UIAnnotationTypes.DataFieldForAnnotation) &&\n\t\t\t\t(oDC as unknown as Hidden)[`@${UIAnnotationTerms.Hidden}`] !== true\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Method to get the text from the DataFieldForAnnotation into the column.\n\t * @param oDataField DataPoint's Value\n\t * @param oContext Context object of the LineItem\n\t * @param oContext.context Context object of the LineItem\n\t * @returns String from label referring to action text\n\t */\n\tgetTextOnActionField: function (\n\t\toDataField: MetaModelType<DataFieldAbstractTypes>,\n\t\toContext: { context: BaseContext }\n\t): string | undefined {\n\t\tif (\n\t\t\toDataField.$Type === UIAnnotationTypes.DataFieldForAction ||\n\t\t\toDataField.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation\n\t\t) {\n\t\t\treturn oDataField.Label;\n\t\t}\n\t\t// for FieldGroup containing DataFieldForAnnotation\n\t\tif (\n\t\t\toDataField.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\t\toContext.context.getObject(\"Target/$AnnotationPath\").indexOf(\"@\" + UIAnnotationTerms.FieldGroup) > -1\n\t\t) {\n\t\t\tconst sPathDataFields = \"Target/$AnnotationPath/Data/\";\n\t\t\tconst aMultipleLabels: string[] = [];\n\t\t\tfor (const i in oContext.context.getObject(sPathDataFields)) {\n\t\t\t\tif (\n\t\t\t\t\toContext.context.getObject(`${sPathDataFields + i}/$Type`) === UIAnnotationTypes.DataFieldForAction ||\n\t\t\t\t\toContext.context.getObject(`${sPathDataFields + i}/$Type`) === UIAnnotationTypes.DataFieldForIntentBasedNavigation\n\t\t\t\t) {\n\t\t\t\t\taMultipleLabels.push(oContext.context.getObject(`${sPathDataFields + i}/Label`));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// In case there are multiple actions inside a Field Group select the largest Action Label\n\t\t\tif (aMultipleLabels.length > 1) {\n\t\t\t\treturn aMultipleLabels.reduce(function (a: string, b: string) {\n\t\t\t\t\treturn a.length > b.length ? a : b;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn aMultipleLabels.length === 0 ? undefined : aMultipleLabels.toString();\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t},\n\t_getResponsiveTableColumnSettings: function (oThis: ColumnWidthThis, oColumn: AnnotationTableColumn): TableColumnSettings | undefined {\n\t\tif (oThis.tableType === \"ResponsiveTable\") {\n\t\t\treturn oColumn.settings;\n\t\t}\n\t\treturn undefined;\n\t},\n\n\tgetChartSize: function (oThis: ColumnWidthThis, oColumn: AnnotationTableColumn): string {\n\t\tconst settings = this._getResponsiveTableColumnSettings(oThis, oColumn);\n\t\tif (settings && settings.microChartSize) {\n\t\t\treturn settings.microChartSize;\n\t\t}\n\t\treturn \"XS\";\n\t},\n\tgetShowOnlyChart: function (oThis: ColumnWidthThis, oColumn: AnnotationTableColumn): boolean {\n\t\tconst settings = this._getResponsiveTableColumnSettings(oThis, oColumn);\n\t\tif (settings && settings.showMicroChartLabel) {\n\t\t\treturn !settings.showMicroChartLabel;\n\t\t}\n\t\treturn true;\n\t},\n\n\tgetDelegate: function (table: TableVisualization, isALP: boolean, entityName: string, filterOnActiveEntities: boolean): string {\n\t\tlet delegate: {\n\t\t\tname: string;\n\t\t\tpayload?:\n\t\t\t\t| { collectionName?: string; filterOnActiveEntities?: boolean; aggregationConfiguration?: { leafLevel: boolean } }\n\t\t\t\t| {\n\t\t\t\t\t\thierarchyQualifier: string;\n\t\t\t\t\t\tinitialExpansionLevel?: number;\n\t\t\t\t\t\tfilterOnActiveEntities: boolean;\n\t\t\t\t\t\tcreateInPlace?: boolean;\n\t\t\t\t\t\taggregationConfiguration?: { leafLevel: boolean };\n\t\t\t\t  };\n\t\t};\n\t\tif (isALP) {\n\t\t\t// We don't support TreeTable in ALP\n\t\t\tif (table.control.type === \"TreeTable\") {\n\t\t\t\tthrow new Error(\"TreeTable not supported in Analytical ListPage\");\n\t\t\t}\n\t\t\tdelegate = {\n\t\t\t\tname: \"sap/fe/macros/table/delegates/ALPTableDelegate\",\n\t\t\t\tpayload: {\n\t\t\t\t\tcollectionName: entityName\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (table.enableAnalytics && filterOnActiveEntities) {\n\t\t\t\tdelegate.payload!.filterOnActiveEntities = true;\n\t\t\t}\n\t\t} else if (table.control.type === \"TreeTable\") {\n\t\t\tif (!table.control.hierarchyQualifier) {\n\t\t\t\tthrow new Error(\"A hierarchy qualifier is mandatory with a TreeTable\");\n\t\t\t}\n\t\t\tdelegate = {\n\t\t\t\tname: \"sap/fe/macros/table/delegates/TreeTableDelegate\",\n\t\t\t\tpayload: {\n\t\t\t\t\thierarchyQualifier: table.control.hierarchyQualifier,\n\t\t\t\t\tinitialExpansionLevel: table.annotation.initialExpansionLevel,\n\t\t\t\t\tfilterOnActiveEntities,\n\t\t\t\t\tcreateInPlace: table.control.createInPlace === true\n\t\t\t\t}\n\t\t\t};\n\t\t} else {\n\t\t\tdelegate = {\n\t\t\t\tname: \"sap/fe/macros/table/delegates/TableDelegate\"\n\t\t\t};\n\t\t\tif (table.enableAnalytics && filterOnActiveEntities) {\n\t\t\t\tdelegate.payload = {\n\t\t\t\t\tfilterOnActiveEntities\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (table.enableAnalytics === true && table.control.analyticalConfiguration?.aggregationOnLeafLevel === true) {\n\t\t\tdelegate.payload = { ...delegate.payload, ...{ aggregationConfiguration: { leafLevel: true } } };\n\t\t}\n\n\t\treturn JSON.stringify(delegate);\n\t},\n\n\t/**\n\t * @param oFastCreationRow\n\t * @param sPath\n\t * @param oContext\n\t * @param oModel\n\t * @param oFinalUIState\n\t */\n\tenableFastCreationRow: async function (\n\t\toFastCreationRow: CreationRow | undefined,\n\t\tsPath: string,\n\t\toContext: v4Context,\n\t\toModel: ODataModel,\n\t\toFinalUIState: Promise<unknown>\n\t): Promise<void> {\n\t\tlet oFastCreationListBinding, oFastCreationContext;\n\n\t\tif (oFastCreationRow) {\n\t\t\ttry {\n\t\t\t\tawait oFinalUIState;\n\t\t\t\t// If a draft is discarded while a message strip filter is active on the table there is a table rebind caused by the DataStateIndicator\n\t\t\t\t// To prevent a new creation row binding being created at that moment we check if the context is already deleted\n\t\t\t\tif (CommonUtils.getIsEditable(oFastCreationRow) && !oContext.isDeleted()) {\n\t\t\t\t\toFastCreationListBinding = oModel.bindList(sPath, oContext, [], [], {\n\t\t\t\t\t\t$$updateGroupId: \"doNotSubmit\",\n\t\t\t\t\t\t$$groupId: \"doNotSubmit\"\n\t\t\t\t\t});\n\t\t\t\t\t// Workaround suggested by OData model v4 colleagues\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\toFastCreationListBinding.refreshInternal = function (): void {\n\t\t\t\t\t\t/* do nothing */\n\t\t\t\t\t};\n\t\t\t\t\toFastCreationContext = oFastCreationListBinding.create();\n\t\t\t\t\toFastCreationRow.setBindingContext(oFastCreationContext);\n\n\t\t\t\t\t// this is needed to avoid console error\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait oFastCreationContext.created();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tLog.trace(\"transient fast creation context deleted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (oError) {\n\t\t\t\tLog.error(\"Error while computing the final UI state\", oError as string);\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Evaluates, if action should be shown in the table context menu.\n\t * Show action only for bound actions, when requiresSelection is set for custom actions or when context is required for IBN actions.\n\t * @param action The instance of the action\n\t * @param contextObjectPath The data model object path\n\t * @returns Returns true, if action should be displayed in context menu, false otherwise\n\t */\n\tisActionShownInContextMenu: function (\n\t\taction: BaseAction | AnnotationAction | CustomAction,\n\t\tcontextObjectPath: DataModelObjectPath<unknown>\n\t): boolean {\n\t\tconst dataField = action.annotationPath\n\t\t\t? (contextObjectPath.convertedTypes.resolvePath(action.annotationPath).target as\n\t\t\t\t\t| DataFieldForAction\n\t\t\t\t\t| DataFieldForIntentBasedNavigation)\n\t\t\t: undefined;\n\t\tswitch (dataField?.$Type) {\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAction\": {\n\t\t\t\tconst actionTarget = dataField.ActionTarget;\n\t\t\t\treturn (\n\t\t\t\t\tactionTarget?.isBound === true &&\n\t\t\t\t\t!actionTarget.parameters[0].isCollection &&\n\t\t\t\t\tactionTarget.sourceEntityType === contextObjectPath.targetEntityType\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\":\n\t\t\t\treturn dataField.RequiresContext?.valueOf() === true;\n\n\t\t\tdefault:\n\t\t\t\tif (action.type === \"Default\") {\n\t\t\t\t\treturn (action as CustomAction).requiresSelection === true;\n\t\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n};\n(TableHelper.getNavigationAvailableMap as { requiresIContext?: boolean }).requiresIContext = true;\n(TableHelper.getTextOnActionField as { requiresIContext?: boolean }).requiresIContext = true;\n\nexport default TableHelper;\n"],"mappings":"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","ignoreList":[]}