{"version":3,"file":"Table.designtime.js","names":["itemsToRemove","getAdaptationProperties","designtimeSettings","control","propertyValues","forEach","setting","id","getAdaptationPropertyValue","_exports","table","getParent","tableDefinition","getProperty","returnValue","headerVisible","header","enableFullScreen","enableExport","data","creationMode","createAtEnd","frozenColumnCount","filters","quickFilters","showCounts","getP13nMode","length","includes","rowCount","rowCountMode","useCondensedTableLayout","widthIncludingColumnHeader","annotation","selectionMode","selectionLimit","threshold","scrollThreshold","hierarchyQualifier","massEdit","enabled","visibleFields","ignoreFields","enableAddCardToInsights","beforeRebindTable","selectionChange","getSettings","tableAPI","items","getDesigntimeSettings","manifestSetting","settingsData","label","name","tooltip","description","keyUser","controlData","type","enum","enums","value","push","configPath","designTime","actions","textArrangement","getTextArrangementChangeAction","rename","getRenameAction","settings","fe","getText","icon","isEnabled","isManifestChangesEnabled","handler","async","unchangedData","configContext","getBindingContext","isConfigModelPrepared","getSettingsIfKeyUser","CommonUtils","getAppComponent","prepareConfigModel","personalization","getPersonalizationSetting","resourceModel","getModel","openAdaptionDialog","width","height","then","propertyValuesEntered","propertyPath","getPropertyPath","extractChanges","noChanges","properties","busyIndicatorDelay","ignore","enableColumnResize","headerLevel","multiSelectMode","showPasteButton","showRowCount","aggregations","manifestSettings","filter","item","getPropertyNamesAndDescriptions","manifestSettingsValues","returnValues","propertyIndex","path","manifestPropertyPath","manifestPropertyChange","propertyChanges","separateChanges"],"sources":["./Table.designtime.ts"],"sourcesContent":["/*!\n * Find the current values of the table configuration that is provided in the table adapt dialog\n */\n\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\n\nimport { getRenameAction, getText, getTextArrangementChangeAction } from \"sap/fe/core/designtime/AnnotationBasedChanges\";\nimport type {\n\tDesigntimeSetting,\n\tDesigntimeSettingEnums,\n\tPropertyValue,\n\tSettingsData,\n\tadaptionChange\n} from \"sap/fe/macros/designtime/Designtime.helper\";\nimport {\n\textractChanges,\n\tgetPersonalizationSetting,\n\tgetPropertyNamesAndDescriptions,\n\tgetSettingsIfKeyUser,\n\tisConfigModelPrepared,\n\tisManifestChangesEnabled,\n\tnoChanges,\n\topenAdaptionDialog,\n\tprepareConfigModel,\n\tseparateChanges\n} from \"sap/fe/macros/designtime/Designtime.helper\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport { getDesigntimeSettings, getPropertyPath } from \"sap/fe/macros/table/designtime/Table.designtime.helper\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/Context\";\n\ntype ControlData = {\n\ttype: string | undefined;\n\tenum: DesigntimeSettingEnums[] | undefined;\n\tvalue: unknown;\n\tid: string;\n};\n// Don't pass these properties to fiori tools processing for the control panel for table. Currently the combination\n// of boolean property plus further option of fixed list is not supported\nconst itemsToRemove = [\n\t\"personalization\",\n\t\"personalizationSort\",\n\t\"personalizationColumn\",\n\t\"personalizationFilter\",\n\t\"personalizationGroup\",\n\t\"personalizationAggregate\"\n];\n\nexport function getAdaptationProperties(designtimeSettings: DesigntimeSetting[], control: MDCTable): PropertyValue {\n\tconst propertyValues: PropertyValue = {};\n\tdesigntimeSettings.forEach(function (setting) {\n\t\tpropertyValues[setting.id] = getAdaptationPropertyValue(control, setting);\n\t});\n\treturn propertyValues;\n}\n/**\n * Returns the value of one of the settings that have been defined for table adaptation.\n * @param control Reference to selected table\n * @param setting The definition of the setting required for adaptation\n * @returns Setting definition with a value for selected control\n */\nfunction getAdaptationPropertyValue(control: MDCTable, setting: DesigntimeSetting): boolean | string | number {\n\tconst table = control.getParent() as TableAPI;\n\tconst tableDefinition = table.getProperty(\"tableDefinition\");\n\tlet returnValue: boolean | string | number = \"\";\n\n\tswitch (setting.id) {\n\t\tcase \"headerVisible\":\n\t\t\treturnValue = tableDefinition.headerVisible;\n\t\t\tbreak;\n\t\tcase \"header\":\n\t\t\treturnValue = tableDefinition.header;\n\t\t\tbreak;\n\t\tcase \"enableFullScreen\":\n\t\t\treturnValue = tableDefinition.control.enableFullScreen;\n\t\t\tbreak;\n\t\tcase \"enableExport\":\n\t\t\treturnValue = tableDefinition.control.enableExport;\n\t\t\tbreak;\n\t\tcase \"type\":\n\t\t\treturnValue = control.data(\"tableType\");\n\t\t\tbreak;\n\t\tcase \"creationModeName\":\n\t\t\treturnValue = tableDefinition.control.creationMode;\n\t\t\tbreak;\n\t\tcase \"creationModeCreateAtEnd\":\n\t\t\treturnValue = tableDefinition.control.createAtEnd;\n\t\t\tbreak;\n\t\tcase \"frozenColumnCount\":\n\t\t\treturnValue = tableDefinition.control.frozenColumnCount;\n\t\t\tbreak;\n\t\tcase \"showCounts\":\n\t\t\treturnValue = tableDefinition.control.filters?.quickFilters?.showCounts;\n\t\t\tbreak;\n\t\t/* case \"hideTableTitle\":\n\t\t\tpropertyValues.hideTableTitle = tableDefinition.control.filters?.quickFilters && !tableDefinition.control.headerVisible;\n\t\t\tbreak; */\n\t\tcase \"personalization\":\n\t\t\treturnValue = control.getP13nMode().length === 0 ? \"False\" : \"True\";\n\t\t\tbreak;\n\t\tcase \"personalizationSort\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Sort\");\n\t\t\tbreak;\n\t\tcase \"personalizationColumn\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Column\");\n\t\t\tbreak;\n\t\tcase \"personalizationFilter\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Filter\");\n\t\t\tbreak;\n\t\tcase \"personalizationGroup\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Group\");\n\t\t\tbreak;\n\t\tcase \"personalizationAggregate\":\n\t\t\treturnValue = control.getP13nMode().includes(\"Aggregate\");\n\t\t\tbreak;\n\t\tcase \"rowCount\":\n\t\t\treturnValue = tableDefinition.control.rowCount;\n\t\t\tbreak;\n\t\tcase \"rowCountMode\":\n\t\t\treturnValue = tableDefinition.control.rowCountMode;\n\t\t\tbreak;\n\t\tcase \"condensedTableLayout\":\n\t\t\treturnValue = tableDefinition.control.useCondensedTableLayout;\n\t\t\tbreak;\n\t\tcase \"widthIncludingColumnHeader\":\n\t\t\treturnValue = tableDefinition.control.widthIncludingColumnHeader;\n\t\t\tbreak;\n\t\tcase \"selectionMode\":\n\t\t\treturnValue = tableDefinition.annotation.selectionMode;\n\t\t\tbreak;\n\t\tcase \"selectAll\":\n\t\t\treturnValue = tableDefinition.control.selectionLimit === 0;\n\t\t\tbreak;\n\t\tcase \"threshold\":\n\t\t\treturnValue = tableDefinition.control.threshold ?? tableDefinition.annotation.threshold;\n\t\t\tbreak;\n\t\tcase \"scrollThreshold\":\n\t\t\treturnValue = tableDefinition.control.scrollThreshold;\n\t\t\tbreak;\n\t\tcase \"selectionLimit\":\n\t\t\treturnValue = tableDefinition.control.selectionLimit;\n\t\t\tbreak;\n\t\tcase \"hierarchyQualifier\":\n\t\t\treturnValue = tableDefinition.control.hierarchyQualifier;\n\t\t\tbreak;\n\t\tcase \"enableMassEdit\":\n\t\t\treturnValue = tableDefinition.control.massEdit.enabled;\n\t\t\tbreak;\n\t\tcase \"enableMassEditVisibleFields\":\n\t\t\treturnValue = tableDefinition.control.massEdit.visibleFields;\n\t\t\tbreak;\n\t\tcase \"enableMassEditIgnoredFields\":\n\t\t\treturnValue = tableDefinition.control.massEdit.ignoreFields;\n\t\t\tbreak;\n\t\tcase \"enableAddCardToInsights\":\n\t\t\treturnValue = tableDefinition.control.enableAddCardToInsights;\n\t\t\tbreak;\n\t\tcase \"beforeRebindTable\":\n\t\t\treturnValue = tableDefinition.control.beforeRebindTable;\n\t\t\tbreak;\n\t\tcase \"selectionChange\":\n\t\t\treturnValue = tableDefinition.control.selectionChange;\n\t\t\tbreak;\n\t}\n\treturn returnValue;\n}\n/**\n * Returns the settings and values for a table formatted for the adaptation dialog content.\n * @param tableAPI Reference to selected table\n * @param propertyValues The list of properties and values for the selected table\n * @returns Formatted list for the adaptation dialog\n */\nfunction getSettings(tableAPI: TableAPI, propertyValues: PropertyValue): SettingsData[] {\n\tconst items: SettingsData[] = [];\n\n\tgetDesigntimeSettings(tableAPI).forEach(function (manifestSetting) {\n\t\t//Fill model for adaptation settings data\n\t\tconst settingsData: SettingsData = {\n\t\t\tlabel: manifestSetting.name,\n\t\t\ttooltip: manifestSetting.description,\n\t\t\tcontrol: [],\n\t\t\tkeyUser: manifestSetting.keyUser\n\t\t};\n\n\t\tconst controlData: ControlData = {\n\t\t\ttype: manifestSetting.type,\n\t\t\tenum: manifestSetting.enums,\n\t\t\tvalue: propertyValues[manifestSetting.id],\n\t\t\tid: manifestSetting.id\n\t\t};\n\n\t\tsettingsData.control.push(controlData);\n\t\titems.push(settingsData);\n\t});\n\treturn items;\n}\n\nconst configPath = \"rta/configSettings\";\n\nconst designTime = {\n\tactions: {\n\t\tannotation: {\n\t\t\ttextArrangement: getTextArrangementChangeAction(),\n\t\t\trename: getRenameAction()\n\t\t},\n\t\tsettings: {\n\t\t\tfe: {\n\t\t\t\tname: getText(\"RTA_CONTEXT_ACTIONMENU_CONFIG\"),\n\t\t\t\ticon: \"sap-icon://developer-settings\",\n\t\t\t\tisEnabled: isManifestChangesEnabled,\n\t\t\t\thandler: async function (control: MDCTable): Promise<adaptionChange[]> {\n\t\t\t\t\tconst tableAPI = control.getParent() as TableAPI;\n\t\t\t\t\tconst designtimeSettings = getDesigntimeSettings(tableAPI);\n\t\t\t\t\tconst propertyValues = getAdaptationProperties(designtimeSettings, control);\n\t\t\t\t\tconst unchangedData = { ...propertyValues };\n\t\t\t\t\tconst configContext = control.getBindingContext(\"internal\") as Context;\n\t\t\t\t\tif (!isConfigModelPrepared(configContext, configPath)) {\n\t\t\t\t\t\t// first time this session\n\t\t\t\t\t\tlet items = getSettings(tableAPI, propertyValues);\n\t\t\t\t\t\titems = getSettingsIfKeyUser(CommonUtils.getAppComponent(control), items);\n\t\t\t\t\t\t// use internal model to persist adaptation configuration values\n\t\t\t\t\t\tprepareConfigModel(items, configContext, configPath);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// set personalization to 'Own Settings' if that was chosen previously\n\t\t\t\t\t\t// as this setting cannot be retrived from the control, and will be always true if personalization is enabled\n\t\t\t\t\t\tpropertyValues.personalization = getPersonalizationSetting(configContext);\n\t\t\t\t\t}\n\t\t\t\t\tconst resourceModel = control.getModel(\"sap.fe.i18n\") as ResourceModel;\n\t\t\t\t\treturn openAdaptionDialog(\n\t\t\t\t\t\tconfigContext,\n\t\t\t\t\t\tpropertyValues,\n\t\t\t\t\t\t\"{sap.fe.i18n>RTA_CONFIGURATION_TITLE_TABLE}\",\n\t\t\t\t\t\tresourceModel,\n\t\t\t\t\t\tconfigPath,\n\t\t\t\t\t\t\"{sap.fe.i18n>RTA_CONFIGURATION_INFO_MESSAGE_TABLE}\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twidth: \"650px\",\n\t\t\t\t\t\t\theight: \"800px\"\n\t\t\t\t\t\t}\n\t\t\t\t\t).then(function (propertyValuesEntered: PropertyValue): adaptionChange[] | [] {\n\t\t\t\t\t\tconst propertyPath = getPropertyPath(control.getParent() as TableAPI);\n\t\t\t\t\t\treturn extractChanges(designtimeSettings, unchangedData, propertyValuesEntered, propertyPath, control);\n\t\t\t\t\t}, noChanges);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t// We disable mdc table properties in the property panel of Fiori Tools\n\tproperties: {\n\t\tbusyIndicatorDelay: { ignore: true },\n\t\tenableColumnResize: { ignore: true },\n\t\tenableExport: { ignore: true },\n\t\theader: { ignore: true },\n\t\theaderLevel: { ignore: true },\n\t\theaderVisible: { ignore: true },\n\t\tmultiSelectMode: { ignore: true },\n\t\tshowPasteButton: { ignore: true },\n\t\tshowRowCount: { ignore: true },\n\t\tthreshold: { ignore: true },\n\t\twidth: { ignore: true }\n\t},\n\taggregations: {},\n\n\t// These functions provide the properties used in table adaption to Fiori tools.\n\tmanifestSettings: function (control: MDCTable): DesigntimeSetting[] {\n\t\tconst table = control.getParent() as TableAPI;\n\t\tconst designtimeSettings = getDesigntimeSettings(table).filter((item) => !itemsToRemove.includes(item.id));\n\t\treturn getPropertyNamesAndDescriptions(designtimeSettings, control.getModel(\"sap.fe.i18n\") as ResourceModel);\n\t},\n\t// getAdaptionPropertyValue\n\tmanifestSettingsValues: function (designtimeSettings: DesigntimeSetting[], control: MDCTable): PropertyValue {\n\t\tconst returnValues: PropertyValue = {};\n\t\tdesigntimeSettings.forEach(function (setting) {\n\t\t\tlet propertyIndex;\n\t\t\tif (setting.path) {\n\t\t\t\tpropertyIndex = setting.path;\n\t\t\t} else {\n\t\t\t\tpropertyIndex = setting.id;\n\t\t\t}\n\t\t\treturnValues[propertyIndex] = getAdaptationPropertyValue(control, setting);\n\t\t});\n\t\treturn returnValues;\n\t},\n\t// get path for control configuration. Pass reference to the control\n\tmanifestPropertyPath: function (control: MDCTable): string {\n\t\tconst table = control.getParent() as TableAPI;\n\t\treturn getPropertyPath(table);\n\t},\n\t// create change structue. Pass array of manifest setting and new value, the property path and the control\n\tmanifestPropertyChange: function (propertyChanges: PropertyValue, propertyPath: string, control: MDCTable): adaptionChange[] {\n\t\treturn separateChanges(propertyChanges, propertyPath, control);\n\t}\n};\n\nexport default designTime;\n"],"mappings":"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","ignoreList":[]}