{"version":3,"file":"QuickFilterSelector.js","names":["QuickFilterSelector","_dec","defineUI5Class","interfaces","_dec2","implementInterface","_dec3","property","type","_dec4","_dec5","_class","_class2","_BuildingBlock","properties","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_getToolbarInteractive","_exports","_inheritsLoose","_proto","prototype","onMetadataAvailable","metaDataAvailable","content","metaPath","initializeContent","getOverflowToolbarConfig","canOverflow","onBeforeEnterOverflow","control","getContent","onAfterExitOverflow","setMetaPath","onSelChange","tableAPI","getMDCTable","getParent","isA","onQuickFilterSelectionChange","getSegmentedButtonSelector","metaContext","items","paths","map","path","index","_jsx","SegmentedButtonItem","getSelectorItemProperties","SegmentedButton","id","enabled","notEqual","pathInModel","ariaLabelledBy","getSelectorAriaLabelledById","selectionChange","bind","children","getSelectSelector","Item","Select","autoAdjustWidth","change","key","text","getSelectorItemText","generate","countText","dataTableModelPath","getInvolvedDataModelObjects","selectionVariant","enhanceDataModelPath","targetObject","Text","toString","showCounts","registerSideEffectForQuickFilter","contextPath","dataVisualizationModelPath","viewEntityType","contextLocation","targetEntityType","fullyQualifiedName","tableNavigationPath","getTargetNavigationPath","sourceProperties","Set","selectionVariantPath","SelectOptions","isAnnotationOfType","forEach","selectOption","propertyPath","PropertyName","value","propertyModelPath","add","getTargetObjectPath","getAppComponent","getSideEffectsService","addControlSideEffects","Array","from","targetEntities","$NavigationPropertyPath","sourceControlId","getAccessibilityControl","textBinding","invisibleText","InvisibleText","toStatic","metaPathObject","getMetaPathObject","odataMetaModel","_getOwner","getMetaModel","createBindingContext","getPath","context","getContextPath","selector","length","addDependent","mdcTable","currentControl","getSelectedKey","getItems","getKey","setSelectedKey","setCountsAsLoading","quickFilterCounts","internalContext","getBindingContext","k","setProperty","counts","refreshSelectedCount","count","getRowBinding","getCount","undefined","itemIndex","findIndex","selectorItem","TableUtils","getCountFormatted","refreshUnSelectedCounts","async","Promise","resolve","table","controller","getPageController","chart","getChartControl","chartBlock","setItemCounts","itemKey","item","itemFilters","CommonUtils","getFiltersFromAnnotation","getListBindingForCount","batchGroupId","additionalFilters","baseTableFilters","chartFilter","hasSelections","getFilter","getHiddenFilters","push","bindingPromises","filter","all","error","Log","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./QuickFilterSelector.tsx"],"sourcesContent":["import type { SelectionVariant, SelectionVariantType, SelectionVariantTypeTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport { notEqual, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport { defineUI5Class, implementInterface, property, type PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isAnnotationOfType } from \"sap/fe/core/helpers/TypeGuards\";\nimport { enhanceDataModelPath, getTargetNavigationPath, getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport TableUtils from \"sap/fe/macros/table/Utils\";\nimport SegmentedButton from \"sap/m/SegmentedButton\";\nimport SegmentedButtonItem from \"sap/m/SegmentedButtonItem\";\nimport Select from \"sap/m/Select\";\nimport type { IOverflowToolbarContent, OverflowToolbarConfig } from \"sap/m/library\";\nimport type Control from \"sap/ui/core/Control\";\nimport { type $ControlSettings } from \"sap/ui/core/Control\";\nimport InvisibleText from \"sap/ui/core/InvisibleText\";\nimport Item from \"sap/ui/core/Item\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/Context\";\nimport type TableAPI from \"./TableAPI\";\n\n/**\n * Definition of the quickVariantSelection to be used inside the table.\n */\n@defineUI5Class(\"sap.fe.macros.table.QuickFilterSelector\", {\n\tinterfaces: [\"sap.m.IToolbarInteractiveControl\"]\n})\nexport default class QuickFilterSelector extends BuildingBlock<SegmentedButton | Select> implements IOverflowToolbarContent {\n\t@implementInterface(\"sap.m.IOverflowToolbarContent\")\n\t__implements__sap_m_IOverflowToolbarContent = true;\n\n\t@property({ type: \"string\" })\n\tid!: string;\n\n\t/**\n\t * Defines the list of paths pointing to the selection variants that should be used as quick filters\n\t */\n\t@property({ type: \"string[]\" })\n\tpaths!: string[];\n\n\t/**\n\t * Defines whether the counts should be displayed next to the text\n\t */\n\t@property({ type: \"boolean\" })\n\tshowCounts = false;\n\n\tprivate metaPath?: string;\n\n\tprivate metaDataAvailable?: boolean;\n\n\tprotected mdcTable?: Table;\n\n\tconstructor(properties: $ControlSettings & PropertiesOf<QuickFilterSelector>, others?: $ControlSettings) {\n\t\tsuper(properties, others);\n\t}\n\n\t/**\n\t * Handler for the onMetadataAvailable event.\n\t */\n\tonMetadataAvailable(): void {\n\t\tthis.metaDataAvailable = true;\n\t\tif (!this.content && this.metaPath) {\n\t\t\tthis.initializeContent();\n\t\t}\n\t}\n\n\tgetOverflowToolbarConfig(): OverflowToolbarConfig {\n\t\treturn {\n\t\t\tcanOverflow: true,\n\t\t\tonBeforeEnterOverflow: function (control: QuickFilterSelector): void {\n\t\t\t\tconst content = control?.getContent();\n\t\t\t\t(content as unknown as { getOverflowToolbarConfig: () => OverflowToolbarConfig } | undefined)\n\t\t\t\t\t?.getOverflowToolbarConfig()\n\t\t\t\t\t?.onBeforeEnterOverflow?.(content);\n\t\t\t},\n\t\t\tonAfterExitOverflow: function (control: QuickFilterSelector): void {\n\t\t\t\tconst content = control?.getContent();\n\t\t\t\t(content as unknown as { getOverflowToolbarConfig: () => OverflowToolbarConfig } | undefined)\n\t\t\t\t\t?.getOverflowToolbarConfig()\n\t\t\t\t\t?.onAfterExitOverflow?.(content);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Sets the metaPath.\n\t * @param metaPath The metaPath\n\t */\n\tsetMetaPath(metaPath: string): void {\n\t\tthis.metaPath = metaPath;\n\t\tif (!this.content && this.metaDataAvailable === true) {\n\t\t\tthis.initializeContent();\n\t\t}\n\t}\n\n\t/**\n\t * Handler for the selection change event.\n\t */\n\tprivate onSelChange(): void {\n\t\tconst tableAPI = this.getMDCTable().getParent();\n\t\tif (tableAPI?.isA<TableAPI>(\"sap.fe.macros.table.TableAPI\")) {\n\t\t\ttableAPI.onQuickFilterSelectionChange();\n\t\t}\n\t}\n\n\t/**\n\t * Generates the selector as a SegmentedButton.\n\t * @param metaContext The meta context\n\t * @returns  The SegmentedButton\n\t */\n\tprivate getSegmentedButtonSelector(metaContext: Context): SegmentedButton {\n\t\tconst items = this.paths.map((path, index) => {\n\t\t\treturn (<SegmentedButtonItem {...this.getSelectorItemProperties(index, metaContext)} />) as SegmentedButtonItem;\n\t\t});\n\t\treturn (\n\t\t\t<SegmentedButton\n\t\t\t\tid={`${this.id}-content`}\n\t\t\t\tenabled={notEqual(pathInModel(\"hasPendingFilters\", \"pageInternal\"), true)}\n\t\t\t\tariaLabelledBy={[this.getSelectorAriaLabelledById()]}\n\t\t\t\tselectionChange={this.onSelChange.bind(this)}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems\n\t\t\t\t}}\n\t\t\t</SegmentedButton>\n\t\t);\n\t}\n\n\t/**\n\t * Required by the {@link sap.m.IToolbarInteractiveControl} interface.\n\t * Determines if the Control is interactive.\n\t * @returns If it is an interactive Control\n\t */\n\t_getToolbarInteractive = (): boolean => true;\n\n\t/**\n\t * Generates the selector as a Select.\n\t * @param metaContext The meta context\n\t * @returns  The Select\n\t */\n\tprivate getSelectSelector(metaContext: Context): Select {\n\t\tconst items = this.paths.map((path, index) => {\n\t\t\treturn (<Item {...this.getSelectorItemProperties(index, metaContext)} />) as Item;\n\t\t});\n\t\treturn (\n\t\t\t<Select\n\t\t\t\tid={`${this.id}-content`}\n\t\t\t\tenabled={notEqual(pathInModel(\"hasPendingFilters\", \"pageInternal\"), true)}\n\t\t\t\tariaLabelledBy={[this.getSelectorAriaLabelledById()]}\n\t\t\t\tautoAdjustWidth={true}\n\t\t\t\tchange={this.onSelChange.bind(this)}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems\n\t\t\t\t}}\n\t\t\t</Select>\n\t\t);\n\t}\n\n\t/**\n\t * Gets the properties of the selector Item.\n\t * @param index The index of the item into the selector\n\t * @param metaContext The meta context\n\t * @returns  The properties\n\t */\n\tprivate getSelectorItemProperties(index: number, metaContext: Context): { key: string; text: string } {\n\t\treturn {\n\t\t\tkey: this.paths[index],\n\t\t\ttext: this.getSelectorItemText(index, metaContext)\n\t\t};\n\t}\n\n\t/**\n\t * Generates the Id of the InvisibleText control.\n\t * @returns  The Id\n\t */\n\tprivate getSelectorAriaLabelledById(): string {\n\t\treturn generate([`${this.id}-content`, \"AriaText\"]);\n\t}\n\n\t/**\n\t * Generates the text for the selector item.\n\t * @param index The index of the item into the selector\n\t * @param metaContext The meta context\n\t * @returns  The text\n\t */\n\tprivate getSelectorItemText(index: number, metaContext: Context): string {\n\t\tconst countText = ` ({internal>quickFilters/counts/${index}})`;\n\t\tconst dataTableModelPath = getInvolvedDataModelObjects(metaContext);\n\t\tconst selectionVariant = enhanceDataModelPath(dataTableModelPath, this.paths[index]).targetObject as\n\t\t\t| SelectionVariantType\n\t\t\t| undefined;\n\t\tconst text = selectionVariant?.Text?.toString() ?? \"\";\n\t\treturn `${text}${this.showCounts ? countText : \"\"}`;\n\t}\n\n\t/**\n\t * Registers the SideEffects control that must be executed when table cells that are related to configured filter(s) change.\n\t * @param metaPath The metaPath.\n\t * @param contextPath The contextPath.\n\t */\n\tprivate registerSideEffectForQuickFilter(metaPath: Context, contextPath: Context): void {\n\t\tconst dataVisualizationModelPath = getInvolvedDataModelObjects(metaPath, contextPath);\n\t\tconst viewEntityType = dataVisualizationModelPath.contextLocation?.targetEntityType.fullyQualifiedName;\n\t\tconst tableNavigationPath = getTargetNavigationPath(dataVisualizationModelPath, true);\n\n\t\tif (tableNavigationPath && viewEntityType) {\n\t\t\tconst sourceProperties: Set<string> = new Set();\n\t\t\tfor (const selectionVariantPath of this.paths) {\n\t\t\t\tconst selectionVariant = enhanceDataModelPath(dataVisualizationModelPath, selectionVariantPath)\n\t\t\t\t\t.targetObject as Partial<SelectionVariantTypeTypes>; // We authorize SelectionVariant without SelectOptions even if it's not compliant with vocabularies\n\t\t\t\tif (\n\t\t\t\t\tselectionVariant.SelectOptions &&\n\t\t\t\t\tisAnnotationOfType<SelectionVariant>(selectionVariant, UIAnnotationTypes.SelectionVariantType)\n\t\t\t\t) {\n\t\t\t\t\tselectionVariant.SelectOptions.forEach((selectOption) => {\n\t\t\t\t\t\tconst propertyPath = selectOption.PropertyName?.value;\n\t\t\t\t\t\tif (propertyPath) {\n\t\t\t\t\t\t\tconst propertyModelPath = enhanceDataModelPath(dataVisualizationModelPath, propertyPath);\n\t\t\t\t\t\t\tsourceProperties.add(getTargetObjectPath(propertyModelPath, true));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.getAppComponent()!\n\t\t\t\t.getSideEffectsService()\n\t\t\t\t.addControlSideEffects(viewEntityType, {\n\t\t\t\t\tsourceProperties: Array.from(sourceProperties),\n\t\t\t\t\ttargetEntities: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$NavigationPropertyPath: tableNavigationPath\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tsourceControlId: `${this.id}-content`\n\t\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Creates the invisibleText for the accessibility compliance.\n\t * @returns  The InvisibleText\n\t */\n\tprivate getAccessibilityControl(): InvisibleText {\n\t\tconst textBinding = `{sap.fe.i18n>M_TABLE_QUICKFILTER_ARIA}`;\n\t\tconst invisibleText = (<InvisibleText text={textBinding} id={this.getSelectorAriaLabelledById()} />) as InvisibleText;\n\n\t\t//Adds the invisibleText into the static, hidden area UI area container.\n\t\tinvisibleText.toStatic();\n\t\treturn invisibleText;\n\t}\n\n\tprivate initializeContent(): void {\n\t\tif (this.metaPath) {\n\t\t\tconst metaPathObject = this.getMetaPathObject(this.metaPath);\n\t\t\tif (metaPathObject) {\n\t\t\t\tconst odataMetaModel = this._getOwner()?.getMetaModel();\n\t\t\t\tconst metaContext = odataMetaModel?.createBindingContext(metaPathObject.getPath());\n\t\t\t\tconst context = odataMetaModel?.createBindingContext(metaPathObject.getContextPath());\n\t\t\t\tif (!metaContext || !context) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.showCounts) {\n\t\t\t\t\tthis.registerSideEffectForQuickFilter(metaContext, context);\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * The number of views defined for a table determines the UI control that lets users switch the table views:\n\t\t\t\t *  - A segmented button for a maximum of three views\n\t\t\t\t *  - A select control for four or more views.\n\t\t\t\t */\n\n\t\t\t\tconst selector = this.paths.length > 3 ? this.getSelectSelector(metaContext) : this.getSegmentedButtonSelector(metaContext);\n\t\t\t\tselector.addDependent(this.getAccessibilityControl());\n\t\t\t\tthis.content = selector;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected getMDCTable(): Table {\n\t\tif (!this.mdcTable) {\n\t\t\tlet currentControl: Control | undefined = this.content;\n\t\t\twhile (currentControl && !currentControl.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\t\t\tcurrentControl = currentControl.getParent() as Control | undefined;\n\t\t\t}\n\t\t\tthis.mdcTable = currentControl as Table;\n\t\t\treturn this.mdcTable;\n\t\t} else {\n\t\t\treturn this.mdcTable;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the key of the selected item (or the key of the first item if there's no selection).\n\t * @returns The selected key\n\t */\n\tgetSelectedKey(): string {\n\t\treturn this.content?.getSelectedKey() || this.content?.getItems()[0].getKey() || \"\";\n\t}\n\n\t/**\n\t * Sets the selected key.\n\t * @param key The key of the item to be selected\n\t */\n\tsetSelectedKey(key: string): void {\n\t\tthis.content?.setSelectedKey(key);\n\t}\n\n\t/**\n\t * Sets the count in a pending state.\n\t */\n\tsetCountsAsLoading(): void {\n\t\tconst quickFilterCounts = {} as Record<string, string>;\n\t\tconst internalContext = this.getBindingContext(\"internal\") as Context;\n\n\t\tfor (const k in this.content?.getItems()) {\n\t\t\tquickFilterCounts[k] = \"...\";\n\t\t}\n\t\tinternalContext.setProperty(\"quickFilters\", { counts: quickFilterCounts });\n\t}\n\n\t/**\n\t * Updates the count of the selected item.\n\t */\n\trefreshSelectedCount(): void {\n\t\tconst count = this.getMDCTable().getRowBinding().getCount();\n\n\t\tif (this.showCounts === true && count !== undefined) {\n\t\t\tconst itemIndex = this.content?.getItems().findIndex((selectorItem) => selectorItem.getKey() === this.getSelectedKey());\n\t\t\tif (itemIndex !== undefined && itemIndex > -1) {\n\t\t\t\tthis.getBindingContext(\"internal\")?.setProperty(`quickFilters/counts/${itemIndex}`, TableUtils.getCountFormatted(count));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Updates the counts of the unselected items.\n\t * @returns  Promise resolves once the count are updated\n\t */\n\tasync refreshUnSelectedCounts(): Promise<void> {\n\t\tif (!this.content) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst table = this.getMDCTable();\n\t\tconst items = this.content.getItems();\n\t\tconst internalContext = this.getBindingContext(\"internal\") as Context;\n\t\tconst controller = this.getPageController();\n\t\tconst chart = (controller as PageController & { getChartControl?: Function }).getChartControl?.();\n\t\tconst chartBlock = chart?.getParent();\n\n\t\tconst setItemCounts = async (item: Item): Promise<void> => {\n\t\t\tconst itemKey = item.getKey();\n\t\t\tconst itemFilters = CommonUtils.getFiltersFromAnnotation(table, itemKey);\n\t\t\tconst count = await TableUtils.getListBindingForCount(table, table.getBindingContext(), {\n\t\t\t\tbatchGroupId: \"$auto\",\n\t\t\t\tadditionalFilters: [...baseTableFilters, ...itemFilters],\n\t\t\t\titemKey: itemKey\n\t\t\t});\n\t\t\tconst itemIndex = items.findIndex((selectorItem) => selectorItem.getKey() === itemKey);\n\t\t\tif (itemIndex > -1) {\n\t\t\t\tinternalContext.setProperty(`quickFilters/counts/${itemIndex}`, TableUtils.getCountFormatted(count));\n\t\t\t}\n\t\t};\n\n\t\tconst chartFilter = chartBlock?.hasSelections() && chartBlock?.getFilter();\n\t\tconst baseTableFilters = TableUtils.getHiddenFilters(table);\n\t\tif (chartFilter) {\n\t\t\tbaseTableFilters.push(chartFilter);\n\t\t}\n\t\tconst bindingPromises = items.filter((item) => item.getKey() !== this.getSelectedKey()).map(async (item) => setItemCounts(item));\n\t\ttry {\n\t\t\tawait Promise.all(bindingPromises);\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Error while retrieving the binding promises\", error as string);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}