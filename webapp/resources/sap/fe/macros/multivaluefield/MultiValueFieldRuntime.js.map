{"version":3,"file":"MultiValueFieldRuntime.js","names":["multiValueFieldRuntime","handleChange","async","controller","event","sourcefield","getSource","isTransient","getBindingContext","isValueResolved","getParameter","Promise","resolve","feController","FieldRuntimeHelper","getExtensionController","editFlow","syncTask","_sideEffects","prepareDeferredSideEffectsForField","onValidateFieldGroup","handleFieldGroupChange"],"sources":["./MultiValueFieldRuntime.ts"],"sourcesContent":["import type PageController from \"sap/fe/core/PageController\";\nimport type Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { MultiValueField$ChangeEvent } from \"sap/ui/mdc/MultiValueField\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport FieldRuntimeHelper from \"../field/FieldRuntimeHelper\";\n\nconst multiValueFieldRuntime = {\n\t/**\n\t * Handler for the change event.\n\t *\n\t * Used to request SideEffects based on the validity of change.\n\t * @param controller The controller of the page containing the field\n\t * @param event The event object passed by the change event\n\t */\n\thandleChange: async function (controller: PageController, event: MultiValueField$ChangeEvent): Promise<void> {\n\t\tconst sourcefield = event.getSource() as Control,\n\t\t\tisTransient = (sourcefield.getBindingContext() as Context).isTransient(),\n\t\t\tisValueResolved: Promise<string> = (event.getParameter(\"promise\") as Promise<string> | undefined) ?? Promise.resolve(\"\");\n\n\t\t// Use the FE Controller instead of the extensionAPI to access internal FE controllers\n\t\tconst feController = FieldRuntimeHelper.getExtensionController(controller);\n\n\t\tawait feController.editFlow.syncTask(isValueResolved);\n\n\t\t// if the context is transient, it means the request would fail anyway as the record does not exist in reality\n\t\tif (isTransient) {\n\t\t\treturn;\n\t\t}\n\n\t\t// register the change coming in this multi value field as successful (for group SideEffects)\n\t\t// immediate SideEffects will be handled by create/delete handlers\n\t\tfeController._sideEffects.prepareDeferredSideEffectsForField(event, true, isValueResolved);\n\t},\n\n\t/**\n\t * Handler for the validateFieldGroup event.\n\t * @param controller The controller of the page containing the field\n\t * @param event The event object passed by the validateFieldGroup event\n\t */\n\tonValidateFieldGroup: async function (controller: PageController, event: Event): Promise<void> {\n\t\tconst feController = FieldRuntimeHelper.getExtensionController(controller);\n\t\tawait feController._sideEffects.handleFieldGroupChange(event);\n\t}\n};\n\nexport default multiValueFieldRuntime;\n"],"mappings":";;;;uEAOA,MAAMA,EAAyB,CAQ9BC,aAAcC,eAAgBC,EAA4BC,GACzD,MAAMC,EAAcD,EAAME,YACzBC,EAAeF,EAAYG,oBAAgCD,cAC3DE,EAAoCL,EAAMM,aAAa,YAA8CC,QAAQC,QAAQ,IAGtH,MAAMC,EAAeC,EAAmBC,uBAAuBZ,SAEzDU,EAAaG,SAASC,SAASR,GAGrC,GAAIF,EAAa,CAChB,MACD,CAIAM,EAAaK,aAAaC,mCAAmCf,EAAO,KAAMK,EAC3E,EAOAW,qBAAsBlB,eAAgBC,EAA4BC,GACjE,MAAMS,EAAeC,EAAmBC,uBAAuBZ,SACzDU,EAAaK,aAAaG,uBAAuBjB,EACxD,GACC,OAEaJ,CAAsB","ignoreList":[]}