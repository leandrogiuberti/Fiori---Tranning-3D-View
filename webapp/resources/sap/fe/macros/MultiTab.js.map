{"version":3,"file":"MultiTab.js","names":["BindingAction","MultiTab","_dec","defineUI5Class","_dec2","implementInterface","_dec3","property","type","_dec4","_dec5","aggregation","multiple","isDefault","_dec6","association","_dec7","defaultValue","_dec8","_dec9","_dec10","_dec11","event","_class","_class2","_BuildingBlock","properties","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_exports","_inheritsLoose","_proto","prototype","initialize","id","createId","filterControl","filterBarId","content","createContent","onMetadataAvailable","retrieveState","selectedKey","getSelectedKey","applyState","controlState","tabBar","getItems","find","item","getKey","setSelectedKey","onBeforeRendering","getTabsModel","oFilterControl","_getFilterControl","setCountsOutDated","oFilterBarAPI","getParent","getAllInnerControls","forEach","tab","showCounts","attachEvent","internalRefreshTabsCount","bind","suspendBinding","isA","waitForInitialState","then","_onSearch","_onFilterChanged","catch","Log","error","onAfterRendering","getSelectedInnerControl","resumeBinding","getProperty","setVisibleOverridden","setProperty","originSetVisible","setVisible","value","getVisible","refreshCount","render","oRm","oControl","renderControl","sTabsModel","oContent","undefined","oModel","getModel","JSONModel","setModel","handleTabChange","evt","iconTabBar","getSource","multiControl","parameters","getParameters","_setInnerBinding","previousSelectedKey","previousKey","filterBar","getTabContent","length","_refreshCustomView","getFilterConditions","refreshSelectedInnerControlContent","ControlPersonalizationWriteAPI","add","changes","changeSpecificData","changeType","selectorElement","_getViewController","getExtensionAPI","updateAppState","fireEvent","invalidateContent","keys","key","bValue","arguments","setFreezeContent","_updateMultiTabNotApplicableFields","tabsModel","results","tabId","ignoredFields","refreshNotApplicableFields","notApplicable","fields","title","_setTabMessageStrip","entityTypePath","data","getText","macroAPI","checkNonFilterableEntitySet","setData","chartAPI","resourceModel","getResourceModel","chart","getContent","entitySetFilerable","MetaModelConverter","getInvolvedDataModelObjects","getMetaModel","getContext","targetObject","annotations","Capabilities","FilterRestrictions","Filterable","includes","onlyForVisibleTab","filter","UI5Element","getElementById","view","CommonUtils","getTargetView","getController","oFilterConditions","sRefreshCause","onViewNeedsRefresh","filterConditions","currentTabId","refreshCause","tableEvent","eventTab","targetKey","refreshTabsCount","split","countsOutDated","setTabContentToBeRefreshedOnNextOpening","selectedTabKey","tabKeys","refreshSelectedTabContent","push","requestIfNotInitialized","isSelectedKey","action","Resume","Suspend","sText","aIgnoredFields","Array","isArray","aIgnoredLabels","MessageStripHelper","getLabels","oEvent","getParameter","_jsx","IconTabBar","expandable","headerMode","stretchContentHeight","select","children","items","tabs","BuildingBlock","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./MultiTab.tsx"],"sourcesContent":["import { aggregation, association, defineUI5Class, event, implementInterface, property, type PropertiesOf } from \"sap/fe/base/ClassSupport\";\nimport BuildingBlock from \"sap/fe/core/buildingBlocks/BuildingBlock\";\nimport MessageStripHelper from \"sap/fe/core/helpers/MessageStrip\";\nimport type { IconTabBar$SelectEvent } from \"sap/m/IconTabBar\";\nimport IconTabBar from \"sap/m/IconTabBar\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport type { EntitySet } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type IViewStateContributor from \"sap/fe/core/controllerextensions/viewState/IViewStateContributor\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type CoreEvent from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\nimport ControlPersonalizationWriteAPI from \"sap/ui/fl/write/api/ControlPersonalizationWriteAPI\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type Tab from \"./Tab\";\nimport type { InnerControlType } from \"./Tab\";\nimport type FilterBar from \"./controls/FilterBar\";\n\ntype MessageStripProperties = {\n\tentityTypePath: string;\n\tignoredFields: string[];\n\ttitle: string;\n};\n\nenum BindingAction {\n\tSuspend = \"suspendBinding\",\n\tResume = \"resumeBinding\"\n}\n\ntype MultiTabState = {\n\tselectedKey: string;\n};\n\n@defineUI5Class(\"sap.fe.macros.MultiTab\")\nexport default class MultiTab extends BuildingBlock<IconTabBar> implements IViewStateContributor<MultiTabState> {\n\t@implementInterface(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\")\n\t__implements__sap_fe_core_controllerextensions_viewState_IViewStateContributor = true;\n\n\t@property({ type: \"string\" })\n\tid!: string;\n\n\t@property({ type: \"boolean\" })\n\tshowCounts!: boolean;\n\n\t@aggregation({ type: \"sap.fe.macros.Tab\", multiple: true, isDefault: true })\n\ttabs!: Tab[];\n\n\t@association({ type: \"sap.fe.macros.controls.FilterBar\", multiple: false })\n\tfilterBarId!: string;\n\n\t@property({ type: \"boolean\", defaultValue: false })\n\tsetVisibleOverridden!: boolean;\n\n\t@property({ type: \"boolean\", defaultValue: false })\n\tfreezeContent!: boolean;\n\n\t@property({ type: \"boolean\", defaultValue: false })\n\tcountsOutDated!: boolean;\n\n\t@association({ type: \"sap.fe.macros.controls.FilterBar\", multiple: false })\n\tfilterControl!: string;\n\n\t@event()\n\tselect!: Function;\n\n\tconstructor(properties: $ControlSettings & PropertiesOf<MultiTab>, others?: $ControlSettings) {\n\t\tsuper(properties, others);\n\t}\n\n\tinitialize(): void {\n\t\tthis.id = this.createId(\"Control\")!;\n\t\tthis.filterControl = this.filterBarId + \"-content\";\n\t\tthis.content = this.createContent();\n\t}\n\n\t/**\n\t * Handler for the onMetadataAvailable event.\n\t */\n\tonMetadataAvailable(): void {\n\t\tif (!this.content) {\n\t\t\tthis.initialize();\n\t\t}\n\t}\n\n\t/**\n\t * Retrieves the state of the MultiTab to be saved in the app state.\n\t * @returns The state of the MultiTab\n\t */\n\tretrieveState(): MultiTabState | null {\n\t\treturn this?.content\n\t\t\t? {\n\t\t\t\t\tselectedKey: this.content.getSelectedKey()\n\t\t\t  }\n\t\t\t: null;\n\t}\n\n\t/**\n\t * Applies the state to the MultiTab.\n\t * @param controlState The state of the MultiTab\n\t */\n\tapplyState(controlState?: MultiTabState): void {\n\t\tif (controlState?.selectedKey) {\n\t\t\tconst tabBar = this.content;\n\t\t\tif (tabBar?.getItems().find((item) => (item as Tab).getKey() === controlState.selectedKey)) {\n\t\t\t\ttabBar.setSelectedKey(controlState.selectedKey);\n\t\t\t}\n\t\t}\n\t}\n\n\tonBeforeRendering(): void {\n\t\tthis.getTabsModel(); // Generate the model which is mandatory for some bindings\n\n\t\tconst oFilterControl = this._getFilterControl();\n\t\tif (!oFilterControl) {\n\t\t\t// In case there's no filterbar, we have to update the counts in the tabs immediately\n\t\t\tthis.setCountsOutDated(true);\n\t\t}\n\t\tconst oFilterBarAPI = oFilterControl?.getParent();\n\t\tthis.getAllInnerControls().forEach((tab: Tab) => {\n\t\t\tif (this.showCounts) {\n\t\t\t\ttab.attachEvent(\"internalDataRequested\", this.internalRefreshTabsCount.bind(this));\n\t\t\t}\n\t\t\ttab.suspendBinding();\n\t\t});\n\t\tif (oFilterBarAPI && oFilterBarAPI.isA<FilterBarAPI>(\"sap.fe.macros.filterBar.FilterBarAPI\")) {\n\t\t\toFilterBarAPI\n\t\t\t\t.waitForInitialState()\n\t\t\t\t.then((): void => {\n\t\t\t\t\toFilterBarAPI.attachEvent(\"internalSearch\", this._onSearch.bind(this));\n\t\t\t\t\toFilterBarAPI.attachEvent(\"internalFilterChanged\", this._onFilterChanged.bind(this));\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch((): void => {\n\t\t\t\t\tLog.error(\"Error while waiting for initial state of filter bar\");\n\t\t\t\t});\n\t\t}\n\t}\n\n\tonAfterRendering(): void {\n\t\tthis.getSelectedInnerControl()?.resumeBinding(!this.getProperty(\"freezeContent\"));\n\t\tif (this.showCounts && !this.setVisibleOverridden) {\n\t\t\tthis.setProperty(\"setVisibleOverridden\", true);\n\t\t\tthis.getAllInnerControls().forEach((tab: Tab): void => {\n\t\t\t\tconst originSetVisible = tab.setVisible;\n\t\t\t\ttab.setVisible = (value: boolean): Tab => {\n\t\t\t\t\tif (tab.getVisible() === false && value) {\n\t\t\t\t\t\ttab.refreshCount();\n\t\t\t\t\t}\n\t\t\t\t\treturn originSetVisible.bind(tab)(value);\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\t}\n\n\tstatic override render<T extends Control>(oRm: RenderManager, oControl: BuildingBlock<T>): void {\n\t\toRm.renderControl(oControl.content!);\n\t}\n\n\t/**\n\t * Gets the model containing information related to the IconTabFilters.\n\t * @returns The model\n\t */\n\tgetTabsModel(): JSONModel | undefined {\n\t\tconst sTabsModel = \"tabsInternal\";\n\t\tconst oContent = this.content;\n\t\tif (!oContent) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet oModel = oContent.getModel(sTabsModel) as JSONModel | undefined;\n\t\tif (!oModel) {\n\t\t\toModel = new JSONModel({});\n\t\t\toContent.setModel(oModel, sTabsModel);\n\t\t}\n\t\treturn oModel;\n\t}\n\n\t/**\n\t * Gets the inner control of the displayed tab.\n\t * @returns The control\n\t */\n\tgetSelectedInnerControl(): Tab | undefined {\n\t\treturn (this.content?.getItems() as Tab[]).find((tab) => tab.getKey() === this.content?.getSelectedKey());\n\t}\n\n\t/**\n\t * Manages the binding of all inner controls when the selected IconTabFilter is changed.\n\t * @param evt Event fired by the IconTabBar\n\t */\n\tstatic handleTabChange(evt: IconTabBar$SelectEvent): void {\n\t\tconst iconTabBar = evt.getSource();\n\t\tconst multiControl = iconTabBar.getParent() as MultiTab;\n\n\t\tconst parameters = evt.getParameters();\n\t\tmultiControl._setInnerBinding(true);\n\t\tconst previousSelectedKey = parameters?.previousKey;\n\t\tconst selectedKey = parameters?.selectedKey;\n\n\t\tif (selectedKey && previousSelectedKey !== selectedKey) {\n\t\t\tconst filterBar = multiControl._getFilterControl();\n\t\t\tif (filterBar && !multiControl.getProperty(\"freezeContent\")) {\n\t\t\t\t//TODO getselectedTab.refreshContent(\"tabChanged)\n\t\t\t\tif (!multiControl.getSelectedInnerControl()?.getTabContent().length) {\n\t\t\t\t\t//custom tab\n\t\t\t\t\tmultiControl._refreshCustomView(filterBar.getFilterConditions(), \"tabChanged\");\n\t\t\t\t} else {\n\t\t\t\t\tmultiControl.refreshSelectedInnerControlContent();\n\t\t\t\t}\n\t\t\t}\n\t\t\tControlPersonalizationWriteAPI.add({\n\t\t\t\tchanges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tchangeSpecificData: {\n\t\t\t\t\t\t\tchangeType: \"selectIconTabBarFilter\",\n\t\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\t\tselectedKey: selectedKey,\n\t\t\t\t\t\t\t\tpreviousSelectedKey: previousSelectedKey\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tselectorElement: iconTabBar\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t});\n\t\t}\n\n\t\tmultiControl._getViewController()?.getExtensionAPI()?.updateAppState();\n\n\t\tmultiControl.fireEvent(\"select\", {\n\t\t\ticonTabBar: iconTabBar,\n\t\t\tselectedKey: selectedKey,\n\t\t\tpreviousKey: previousSelectedKey\n\t\t});\n\t}\n\n\t/**\n\t * Refreshes the content of the selected inner control.\n\t *\n\t */\n\trefreshSelectedInnerControlContent(): void {\n\t\tif (this.getSelectedInnerControl()) {\n\t\t\tthis.getSelectedInnerControl()?.invalidateContent();\n\t\t\tthis.getSelectedInnerControl()?.resumeBinding(true);\n\t\t} else {\n\t\t\t// custom tab\n\t\t\tthis._refreshCustomView(undefined, \"forcedRefresh\");\n\t\t}\n\t}\n\n\t/**\n\t * Invalidates the content of the inner controls.\n\t * @param [keys] The list of the keys identifying the views defined in the manifest for which the views' content will be invalidated. If not provided, all the views' content will be invalidated\n\t */\n\tinvalidateContent(keys?: string[]): void {\n\t\tthis.setCountsOutDated(true);\n\t\tthis.getAllInnerControls().forEach((tab: Tab) => {\n\t\t\tif (keys) {\n\t\t\t\tfor (const key of keys) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttab.getKey() === `fe::table::${key}::LineItem` ||\n\t\t\t\t\t\ttab.getKey() === `fe::CustomTab::${key}` ||\n\t\t\t\t\t\ttab.getKey() === key\n\t\t\t\t\t) {\n\t\t\t\t\t\ttab.invalidateContent();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttab.invalidateContent();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Sets the counts to \"out of date\" or \"up to date\"\n\t * If the counts are set to \"out of date\" and the selected IconTabFilter doesn't contain an inner control, all inner controls are requested to get the new counts.\n\t * @param bValue Either freezes the control or not\n\t */\n\tsetCountsOutDated(bValue = true): void {\n\t\tthis.setProperty(\"countsOutDated\", bValue);\n\t\t// if the current tab is not configured with no inner Control\n\t\t// the tab counts must be manually refreshed since no Macro API will sent event internalDataRequested\n\t\tif (bValue && !this.getSelectedInnerControl()?.getTabContent().length) {\n\t\t\tthis.internalRefreshTabsCount();\n\t\t}\n\t}\n\n\t/**\n\t * Freezes the content :\n\t * - content is frozen: the binding of the inner controls are suspended.\n\t * - content is unfrozen: the binding of inner control related to the selected IconTabFilter is resumed.\n\t * @param bValue Freeze or not the control\n\t */\n\tsetFreezeContent(bValue: boolean): void {\n\t\tthis.setProperty(\"freezeContent\", bValue);\n\t\tthis._setInnerBinding();\n\t}\n\n\t/**\n\t * Updates the internal model with the properties that are not applicable on each IconTabFilter (containing inner control) according to the entityType of the filter control.\n\t *\n\t */\n\t_updateMultiTabNotApplicableFields(): void {\n\t\tconst tabsModel = this.getTabsModel();\n\t\tconst filterControl = this._getFilterControl() as Control;\n\t\tif (tabsModel && filterControl) {\n\t\t\tconst results: Record<string, { notApplicable: { fields: string[]; title: string | undefined } }> = {};\n\t\t\tthis.getAllInnerControls().forEach((tab: Tab) => {\n\t\t\t\tconst tabId = tab.getKey();\n\t\t\t\tconst ignoredFields = tab.refreshNotApplicableFields(filterControl) || [];\n\t\t\t\tresults[tabId] = {\n\t\t\t\t\tnotApplicable: {\n\t\t\t\t\t\tfields: ignoredFields,\n\t\t\t\t\t\ttitle: this._setTabMessageStrip({\n\t\t\t\t\t\t\tentityTypePath: filterControl.data(\"entityType\"),\n\t\t\t\t\t\t\tignoredFields: ignoredFields,\n\t\t\t\t\t\t\ttitle: tab.getText()\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tconst macroAPI = tab.getTabContent()?.[0];\n\t\t\t\tif (macroAPI && macroAPI.isA(\"sap.fe.macros.Chart\")) {\n\t\t\t\t\tresults[tabId] = this.checkNonFilterableEntitySet(macroAPI, tabId, results);\n\t\t\t\t}\n\t\t\t});\n\t\t\ttabsModel.setData(results);\n\t\t}\n\t}\n\n\t/**\n\t * Modifies the messagestrip message based on entity set is filerable or not.\n\t * @param chartAPI ChartAPI\n\t * @param tabId Tab key ID\n\t * @param results Should contain fields and title\n\t * @returns An object of modified fields and title\n\t */\n\tcheckNonFilterableEntitySet(\n\t\tchartAPI: InnerControlType,\n\t\ttabId: string,\n\t\tresults: Record<string, { notApplicable: { fields: string[]; title: string | undefined } }>\n\t): { notApplicable: { fields: string[]; title: string | undefined } } {\n\t\tconst resourceModel = getResourceModel(chartAPI);\n\t\tconst chart = chartAPI.getContent();\n\t\tconst entitySetFilerable =\n\t\t\tchart &&\n\t\t\tMetaModelConverter.getInvolvedDataModelObjects<EntitySet>(\n\t\t\t\t(chart.getModel() as ODataModel).getMetaModel().getContext(`${chart.data(\"targetCollectionPath\")}`)\n\t\t\t)?.targetObject?.annotations?.Capabilities?.FilterRestrictions?.Filterable;\n\t\tif (entitySetFilerable !== undefined && !entitySetFilerable) {\n\t\t\tif (results[tabId].notApplicable.fields.includes(\"$search\")) {\n\t\t\t\tresults[tabId].notApplicable.title += \" \" + resourceModel.getText(\"C_LR_MULTIVIZ_CHART_MULTI_NON_FILTERABLE\");\n\t\t\t} else {\n\t\t\t\tresults[tabId].notApplicable.fields = [\"nonFilterable\"];\n\t\t\t\tresults[tabId].notApplicable.title = resourceModel.getText(\"C_LR_MULTIVIZ_CHART_MULTI_NON_FILTERABLE\");\n\t\t\t}\n\t\t}\n\t\treturn results[tabId];\n\t}\n\n\t/**\n\t * Gets the inner controls.\n\t * @param onlyForVisibleTab Should display only the visible controls\n\t * @returns An array of controls\n\t */\n\tgetAllInnerControls(onlyForVisibleTab = false): Tab[] {\n\t\treturn (this.content?.getItems() as Tab[]).filter((tab) => !onlyForVisibleTab || tab.getVisible()) ?? [];\n\t}\n\n\t_getFilterControl(): FilterBar | undefined {\n\t\treturn UI5Element.getElementById(this.filterControl) as FilterBar | undefined;\n\t}\n\n\t_getViewController(): PageController {\n\t\tconst view = CommonUtils.getTargetView(this);\n\t\treturn view && view.getController();\n\t}\n\n\t_refreshCustomView(oFilterConditions: unknown, sRefreshCause: string): void {\n\t\t(this._getViewController() as ListReportController)?.onViewNeedsRefresh?.({\n\t\t\tfilterConditions: oFilterConditions,\n\t\t\tcurrentTabId: this.content?.getSelectedKey(),\n\t\t\trefreshCause: sRefreshCause\n\t\t});\n\t}\n\n\tinternalRefreshTabsCount(tableEvent?: CoreEvent): void {\n\t\t// If the refresh is triggered by an event (internalDataRequested)\n\t\t// we cannot use the selected key as reference since table can be refreshed by SideEffects\n\t\t// so the table could be into a different tab -> we use the source of the event to find the targeted tab\n\t\t// If not triggered by an event -> refresh at least the counts of the current MacroAPI\n\t\tconst eventTab = tableEvent?.getSource() as Tab;\n\t\tconst targetKey = eventTab ? eventTab.getKey() : this.content?.getSelectedKey();\n\t\tif (targetKey) {\n\t\t\tthis.refreshTabsCount([targetKey.split(\"::\")[2]]);\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the count of the views in the MultiMode control.\n\t * @param [keys] The list of the keys identifying the views defined in the manifest for which the views' count will be refreshed. If not provided, all the views' count will be refreshed\n\t */\n\trefreshTabsCount(keys?: string[]): void {\n\t\tif (!keys) {\n\t\t\tthis.setCountsOutDated(true);\n\t\t}\n\t\tthis.getAllInnerControls(true).forEach((tab: Tab): void => {\n\t\t\tif (this.countsOutDated || (keys && keys.includes(tab.getKey().split(\"::\")[2]))) {\n\t\t\t\ttab.refreshCount();\n\t\t\t}\n\t\t});\n\t\tthis.setCountsOutDated(false);\n\t}\n\n\t/**\n\t * Refreshes the content of the underlying views upon the next opening.\n\t * Note: The content of the selected view, if part of the provided keys, will be refreshed immediately.\n\t * @param [keys] The list of the keys identifying the views defined in the manifest for which the views' content will be refreshed. If not provided, all the views' content will be refreshed\n\t */\n\tsetTabContentToBeRefreshedOnNextOpening(keys?: string[]): void {\n\t\tconst selectedTabKey = this?.content?.getSelectedKey();\n\t\tconst tabKeys: string[] = [];\n\t\tconst refreshSelectedTabContent = keys ? keys.includes(selectedTabKey!.split(\"::\")[2]) || keys.includes(selectedTabKey!) : true;\n\t\tif (keys) {\n\t\t\tfor (const key of keys) {\n\t\t\t\tif (\n\t\t\t\t\tselectedTabKey !== `fe::table::${key}::LineItem` &&\n\t\t\t\t\tselectedTabKey !== `fe::CustomTab::${key}` &&\n\t\t\t\t\tselectedTabKey !== key\n\t\t\t\t) {\n\t\t\t\t\ttabKeys.push(key);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis?.getAllInnerControls().forEach((tab: Tab) => {\n\t\t\t\tif (tab.getKey() !== selectedTabKey) {\n\t\t\t\t\ttabKeys.push(tab.getKey().split(\"::\")[2]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis?.invalidateContent(tabKeys);\n\t\tif (refreshSelectedTabContent) {\n\t\t\tthis?.refreshSelectedInnerControlContent();\n\t\t}\n\t}\n\n\t_setInnerBinding(requestIfNotInitialized = false): void {\n\t\tif (this.content) {\n\t\t\tthis.getAllInnerControls().forEach((tab: Tab) => {\n\t\t\t\tconst isSelectedKey = tab.getKey() === this.content?.getSelectedKey();\n\t\t\t\tconst action = isSelectedKey && !this.getProperty(\"freezeContent\") ? BindingAction.Resume : BindingAction.Suspend;\n\t\t\t\ttab[action]?.(action === BindingAction.Resume ? requestIfNotInitialized && isSelectedKey : undefined!);\n\t\t\t});\n\t\t}\n\t}\n\n\t_setTabMessageStrip(properties: MessageStripProperties): string | undefined {\n\t\tlet sText = \"\";\n\t\tconst aIgnoredFields = properties.ignoredFields;\n\t\tconst oFilterControl = this._getFilterControl() as Control;\n\t\tif (oFilterControl && Array.isArray(aIgnoredFields) && aIgnoredFields.length > 0 && properties.title) {\n\t\t\tconst aIgnoredLabels = MessageStripHelper.getLabels(\n\t\t\t\taIgnoredFields,\n\t\t\t\tproperties.entityTypePath,\n\t\t\t\toFilterControl,\n\t\t\t\tgetResourceModel(oFilterControl)\n\t\t\t);\n\t\t\tsText = MessageStripHelper.getText(aIgnoredLabels, oFilterControl, properties.title);\n\t\t\treturn sText;\n\t\t}\n\t}\n\n\t_onSearch(oEvent: CoreEvent<{ conditions: unknown }>): void {\n\t\tthis.setCountsOutDated(true);\n\t\tthis.setFreezeContent(false);\n\t\t// TODO this.getSelectedTab.refreshContent()\n\t\tif (this.getSelectedInnerControl()) {\n\t\t\tthis._updateMultiTabNotApplicableFields();\n\t\t\tif (this.getSelectedInnerControl()!.getTabContent().length == 0) {\n\t\t\t\tthis.getSelectedInnerControl()!.fireEvent(\"internalDataRequested\", oEvent.getParameters());\n\t\t\t}\n\t\t} else {\n\t\t\t// custom tab\n\t\t\tthis._refreshCustomView(oEvent.getParameter(\"conditions\"), \"search\");\n\t\t}\n\t}\n\n\t_onFilterChanged(oEvent: CoreEvent<{ conditionsBased: boolean }>): void {\n\t\tif (oEvent.getParameter(\"conditionsBased\")) {\n\t\t\tthis.setFreezeContent(true);\n\t\t}\n\t}\n\n\tcreateContent(): IconTabBar {\n\t\treturn (\n\t\t\t<IconTabBar\n\t\t\t\texpandable={false}\n\t\t\t\theaderMode=\"Inline\"\n\t\t\t\tid={this.createId(\"_mt\")}\n\t\t\t\tstretchContentHeight={false}\n\t\t\t\tselect={MultiTab.handleTabChange}\n\t\t\t>\n\t\t\t\t{{\n\t\t\t\t\titems: this.tabs\n\t\t\t\t}}\n\t\t\t</IconTabBar>\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[]}