{"version":3,"file":"AnalyticalPageController.controller.js","names":["TemplateContentView","CoreLibrary","InitialLoadMode","AnalyticalPageController","_dec","defineUI5Class","_dec2","usingExtension","InternalIntentBasedNavigation","override","getEntitySet","this","base","getCurrentEntitySet","_dec3","SideEffects","SideEffectsOverride","_dec4","KPIManagement","_dec5","Placeholder","_dec6","publicExtension","_dec7","finalExtension","_dec8","privateExtension","_dec9","extensible","_dec10","_dec11","OverrideExecution","After","_dec12","_dec13","_dec14","_dec15","_class","_class2","_PageController","_this","_len","arguments","length","args","Array","_key","call","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","formatters","setALPControlMessageStrip","aIgnoredFields","bIsChart","oApplySupported","sText","oFilterBar","_getFilterBarControl","isArray","aIgnoredLabels","MessageStrip","getLabels","data","getResourceModel","bIsSearchIgnored","enableSearch","getALPText","getText","handlers","onFilterSearch","filterBarAPI","getParent","triggerSearch","onFiltersChanged","oEvent","oInternalModelContext","getView","getBindingContext","onPendingFilters","appliedFiltersText","getAssignedFiltersText","filtersText","appliedFilterBinding","BindingInfo","parse","filterBarHiddenUsed","filterBarHidden","_isFilterBarHidden","byId","bindText","setText","getParameter","setProperty","_storeFilterBarSelectionVariant","onVariantSelected","variantManagement","getSource","currentVariantKey","multiModeControl","_getMultiModeControl","isA","invalidateContent","setFreezeContent","setTimeout","filterBar","dynamicPage","_getDynamicListReportControl","firstEmptyMandatoryField","getFilterItems","find","filterItem","getRequired","getConditions","setHeaderExpanded","_shouldAutoTriggerSearch","_getApplyAutomaticallyOnVariant","getExtensionAPI","updateAppState","onVariantSaved","onSearch","oMdcChart","getChartControl","bHideDraft","FilterUtils","getEditStateIsHideDraft","_updateALPNotApplicableFields","oPageInternalModelContext","sTemplateContentView","getProperty","getPath","Chart","hasPendingChartChanges","Table","hasPendingTableChanges","Device","system","desktop","getHeaderExpanded","StateUtil","retrieveExternalState","then","oExternalState","filterBarConditions","filter","catch","oError","Log","error","getViewData","liveMode","phone","oDynamicPage","_isInitLoadEnabled","setFilterToggleVisibility","onChevronPressNavigateOutBound","oController","sOutboundTarget","oContext","sCreatePath","_intentBasedNavigation","onChartSelectionChanged","getContent","oTable","_getTable","aData","ChartUtils","setChartFilters","rebind","onDynamicPageTitleStateChanged","event","InvisibleMessage","getInstance","announce","InvisibleMessageMode","Assertive","_inheritsLoose","_proto","prototype","extensionAPI","ExtensionAPI","onInit","PageController","apply","_hasMultiVisualizations","alpContentView","_getDefaultPath","Hybrid","getAppComponent","getRouterProxy","waitForRouteMatchBeforeNavigation","_setInitLoad","onExit","destroy","_onAfterBinding","aTables","_getControls","EditState","isEditStateDirty","table","oTableBinding","getRowBinding","tableAPI","refreshTable","getTableDefinition","control","type","getModel","resetChanges","refresh","CommonUtils","_isFclEnabled","sUpdateTimer","fnUpdateTableActions","_updateTableActions","detachDataReceived","attachDataReceived","setEditStateProcessed","internalModelContext","viewId","getId","pageReady","waitFor","_applyAppState","environmentCapabilities","getEnvironmentCapabilities","isInsightsEnabled","onPageReady","async","getShellServices","setBackNavigation","undefined","_initMultiDimModelChangeHandler","oMultiDimModel","oMultiDimModelChangeHandler","registerMultiDimModel","onViewNeedsRefresh","mParameters","slice","onAfterClear","aIBNActions","forEach","getIBNActions","oActionOperationAvailableMap","JSON","tableDefinition","operationAvailableMap","aSelectedContexts","getSelectedContexts","DeleteHelper","updateDeleteInfoForSelectedContexts","ActionRuntime","setActionEnablement","updateDataFieldForIBNButtonsVisibility","_scrollTablesToRow","sRowPath","TableScroller","scrollTableToRow","_focusSilent","filterField","focusInfo","getFocusInfo","targetInfo","silent","focus","_setInitialFocus","isHeaderExpanded","getShowMessages","setShowMessages","oFilterItem","fieldToFocus","_getFilterBarControlId","focusRow","_getPageTitleInformation","oManifestEntry","getManifestEntry","Promise","resolve","title","subtitle","subTitle","intent","icon","_getDynamicListReportControlId","_getAdaptationFilterBarControl","adaptationFilterBar","getInbuiltFilter","getAppStateHandler","applyAppState","_getSegmentedButton","sControl","sSegmentedButtonId","_getControlFromPageModelProperty","sPath","controlId","_getPageModel","_getVisualFilterBarControl","sVisualFilterBarId","StableIdHelper","generate","_getFilterBarVariantControl","_getIconTabBar","_isMultiMode","oControl","getSelectedInnerControl","content","sKey","aControls","oTabMultiMode","getItems","oItem","getKey","includes","push","oChart","defaultPath","AnalyticalPageTemplating","getDefaultPath","initLoadMode","initialLoad","Enabled","_applyAutomaticallyOnStandardVariant","variantManagementId","getVariantBackReference","getData","registerApplyAutomaticallyOnStandardVariant","bind","_setShareModel","fnGetUser","ObjectPath","get","oShareInfo","bookmarkTitle","document","bookmarkCustomUrl","sHash","hasher","getHash","window","location","href","isShareInJamActive","isJamActive","oTemplatePrivateModel","getOwnerComponent","mCache","ignoredFields","aCharts","sChartEntityPath","sChartEntitySet","sCacheKey","getNotApplicableFilters","hideFilterBar","key","variants","getVariants","currentVariant","variant","executeOnSelect","oVM","Auto","getStandardVariantKey","getCurrentVariantKey","oConditions","startsWith","standardVariant","_updateTable","isTableBound","_updateChart","oInnerChart","getControlDelegate","_getChart","isBound","getBindingInfo","buttonVisible","getSegmentedButton","setVisible","onAfterRendering","sEntitySet","entitySet","setNoData","sv","getSelectionVariant","err","message","Error","String","getFilterBarSelectionVariant","SelectionVariant","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","Object","getOwnPropertyDescriptor"],"sources":["./AnalyticalPageController.controller.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport ObjectPath from \"sap/base/util/ObjectPath\";\nimport type DynamicPage from \"sap/f/DynamicPage\";\nimport type { DynamicPageTitle$StateChangeEvent } from \"sap/f/DynamicPageTitle\";\nimport { defineUI5Class, extensible, finalExtension, privateExtension, publicExtension, usingExtension } from \"sap/fe/base/ClassSupport\";\nimport ActionRuntime from \"sap/fe/core/ActionRuntime\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport PageController from \"sap/fe/core/PageController\";\nimport InternalIntentBasedNavigation from \"sap/fe/core/controllerextensions/InternalIntentBasedNavigation\";\nimport type InternalRouting from \"sap/fe/core/controllerextensions/InternalRouting\";\nimport KPIManagement from \"sap/fe/core/controllerextensions/KPIManagement\";\nimport Placeholder from \"sap/fe/core/controllerextensions/Placeholder\";\nimport SideEffects from \"sap/fe/core/controllerextensions/SideEffects\";\nimport type { ListReportDefinition } from \"sap/fe/core/converters/templates/ListReportConverter\";\nimport DeleteHelper from \"sap/fe/core/helpers/DeleteHelper\";\nimport EditState from \"sap/fe/core/helpers/EditState\";\nimport MessageStrip from \"sap/fe/core/helpers/MessageStrip\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport * as StableIdHelper from \"sap/fe/core/helpers/StableIdHelper\";\nimport CoreLibrary from \"sap/fe/core/library\";\nimport type ChartBuildingBlock from \"sap/fe/macros/Chart\";\nimport type ChartDelegate from \"sap/fe/macros/chart/ChartDelegate\";\nimport ChartUtils from \"sap/fe/macros/chart/ChartUtils\";\nimport type FilterBar from \"sap/fe/macros/controls/FilterBar\";\nimport FilterUtils from \"sap/fe/macros/filter/FilterUtils\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport ExtensionAPI from \"sap/fe/templates/ListReport/ExtensionAPI\";\nimport type MultipleModeControl from \"sap/fe/templates/ListReport/controls/MultipleModeControl\";\nimport SideEffectsOverride from \"sap/fe/templates/ListReport/overrides/SideEffects\";\nimport TableScroller from \"sap/fe/templates/TableScroller\";\nimport type IconTabBar from \"sap/m/IconTabBar\";\nimport type TabContainerItem from \"sap/m/TabContainerItem\";\nimport type Text from \"sap/m/Text\";\nimport type MultiDimModelChangeHandler from \"sap/sac/df/changeHandler/MultiDimModelChangeHandler\";\nimport type MultiDimModel from \"sap/sac/df/model/MultiDimModel\";\nimport Device from \"sap/ui/Device\";\nimport BindingInfo from \"sap/ui/base/BindingInfo\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport InvisibleMessage from \"sap/ui/core/InvisibleMessage\";\nimport { InvisibleMessageMode } from \"sap/ui/core/library\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type VariantManagement from \"sap/ui/fl/variants/VariantManagement\";\nimport type { VariantManagement$SelectEvent } from \"sap/ui/fl/variants/VariantManagement\";\nimport type Chart from \"sap/ui/mdc/Chart\";\nimport type FilterField from \"sap/ui/mdc/FilterField\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { FilterBarBase$FiltersChangedEvent } from \"sap/ui/mdc/filterbar/FilterBarBase\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport hasher from \"sap/ui/thirdparty/hasher\";\nimport * as AnalyticalPageTemplating from \"./AnalyticalPageTemplating\";\n\nconst TemplateContentView = CoreLibrary.TemplateContentView,\n\tInitialLoadMode = CoreLibrary.InitialLoadMode;\n\n/**\n * Controller class for the list report page, used inside an SAP Fiori elements application.\n * @hideconstructor\n * @ui5-experimental-since\n */\n@defineUI5Class(\"sap.fe.ina.templates.AnalyticalPage.AnalyticalPageController\")\nclass AnalyticalPageController extends PageController {\n\t_routing!: InternalRouting;\n\n\t@usingExtension(\n\t\tInternalIntentBasedNavigation.override({\n\t\t\tgetEntitySet: function (this: InternalIntentBasedNavigation) {\n\t\t\t\treturn (this.base as AnalyticalPageController).getCurrentEntitySet();\n\t\t\t}\n\t\t})\n\t)\n\t_intentBasedNavigation!: InternalIntentBasedNavigation;\n\n\t@usingExtension(SideEffects.override(SideEffectsOverride))\n\t_sideEffects!: SideEffects;\n\n\t@usingExtension(KPIManagement)\n\tkpiManagement!: KPIManagement;\n\n\t@usingExtension(Placeholder)\n\tplaceholder!: Placeholder;\n\n\tprotected extensionAPI?: ExtensionAPI;\n\n\tprivate filterBarConditions?: unknown;\n\n\tprivate sUpdateTimer?: unknown;\n\n\tprivate hasPendingChartChanges?: boolean;\n\n\tprivate hasPendingTableChanges?: boolean;\n\n\t/**\n\t * Get the extension API for the current page.\n\t * @public\n\t * @returns The extension API.\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tgetExtensionAPI(): ExtensionAPI {\n\t\tif (!this.extensionAPI) {\n\t\t\tthis.extensionAPI = new ExtensionAPI(this);\n\t\t}\n\t\treturn this.extensionAPI;\n\t}\n\n\tonInit(): void {\n\t\tPageController.prototype.onInit.apply(this);\n\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\tconst filterBar = this._getFilterBarControl();\n\t\tif (filterBar) {\n\t\t\tthis._storeFilterBarSelectionVariant(filterBar, oInternalModelContext);\n\t\t}\n\n\t\toInternalModelContext.setProperty(\"hasPendingFilters\", true);\n\t\toInternalModelContext.setProperty(\"hideDraftInfo\", false);\n\t\toInternalModelContext.setProperty(\"uom\", {});\n\t\toInternalModelContext.setProperty(\"scalefactor\", {});\n\t\toInternalModelContext.setProperty(\"scalefactorNumber\", {});\n\t\toInternalModelContext.setProperty(\"currency\", {});\n\t\toInternalModelContext.setProperty(\"isInsightsSupported\", false);\n\n\t\tif (this._hasMultiVisualizations()) {\n\t\t\tlet alpContentView = this._getDefaultPath();\n\t\t\tif (!Device.system.desktop && alpContentView === TemplateContentView.Hybrid) {\n\t\t\t\talpContentView = TemplateContentView.Chart;\n\t\t\t}\n\t\t\toInternalModelContext.setProperty(\"alpContentView\", alpContentView);\n\t\t}\n\n\t\t// Store conditions from filter bar\n\t\t// this is later used before navigation to get conditions applied on the filter bar\n\t\tthis.filterBarConditions = {};\n\n\t\t// As AppStateHandler.applyAppState triggers a navigation we want to make sure it will\n\t\t// happen after the routeMatch event has been processed (otherwise the router gets broken)\n\t\tthis.getAppComponent().getRouterProxy().waitForRouteMatchBeforeNavigation();\n\n\t\t// Configure the initial load settings\n\t\tthis._setInitLoad();\n\t}\n\n\tonExit(): void {\n\t\tdelete this.filterBarConditions;\n\t\tif (this.extensionAPI) {\n\t\t\tthis.extensionAPI.destroy();\n\t\t}\n\t\tdelete this.extensionAPI;\n\t}\n\n\t_onAfterBinding(): void {\n\t\tconst aTables = this._getControls(\"table\") as Table[];\n\t\tif (EditState.isEditStateDirty()) {\n\t\t\tthis._getMultiModeControl()?.invalidateContent();\n\t\t\tconst table = this._getTable();\n\t\t\tconst oTableBinding = table?.getRowBinding();\n\t\t\tif (oTableBinding) {\n\t\t\t\tconst tableAPI = table?.getParent() as TableAPI;\n\n\t\t\t\tconst refreshTable = (): void => {\n\t\t\t\t\tif (tableAPI.getTableDefinition().control.type === \"TreeTable\") {\n\t\t\t\t\t\t// As the refresh on a TreeTable uses side-effects, we need to make sure there are no pending changes\n\t\t\t\t\t\t// before the side-effects are queried (e.g. failed PATCH queries that would be resent together with side effects GET)\n\t\t\t\t\t\tthis.getModel().resetChanges();\n\t\t\t\t\t}\n\t\t\t\t\ttableAPI.refresh();\n\t\t\t\t};\n\n\t\t\t\t// Update the table content using side effects (listBinding.refresh doesn't keep expansion states in a TreeTable)\n\t\t\t\tif (CommonUtils.getAppComponent(this.getView())._isFclEnabled()) {\n\t\t\t\t\t// there is an issue if we use a timeout with a kept alive context used on another page\n\t\t\t\t\trefreshTable();\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.sUpdateTimer) {\n\t\t\t\t\t\tthis.sUpdateTimer = setTimeout(() => {\n\t\t\t\t\t\t\trefreshTable();\n\t\t\t\t\t\t\tdelete this.sUpdateTimer;\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update action enablement and visibility upon table data update.\n\t\t\t\t\tconst fnUpdateTableActions = (): void => {\n\t\t\t\t\t\tthis._updateTableActions(aTables);\n\t\t\t\t\t\toTableBinding.detachDataReceived(fnUpdateTableActions);\n\t\t\t\t\t};\n\t\t\t\t\toTableBinding.attachDataReceived(fnUpdateTableActions);\n\t\t\t\t}\n\t\t\t}\n\t\t\tEditState.setEditStateProcessed();\n\t\t}\n\n\t\tif (!this.sUpdateTimer) {\n\t\t\tthis._updateTableActions(aTables);\n\t\t}\n\n\t\tconst internalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\tif (!internalModelContext.getProperty(\"initialVariantApplied\")) {\n\t\t\tconst viewId = this.getView().getId();\n\t\t\tthis.pageReady.waitFor(this._applyAppState(viewId));\n\t\t\tinternalModelContext.setProperty(\"initialVariantApplied\", true);\n\t\t}\n\t\tconst environmentCapabilities = CommonUtils.getAppComponent(this.getView()).getEnvironmentCapabilities();\n\t\tenvironmentCapabilities\n\t\t\t.isInsightsEnabled()\n\t\t\t.then((isInsightsEnabled: boolean) => {\n\t\t\t\tinternalModelContext.setProperty(\"isInsightsSupported\", isInsightsEnabled);\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(\"Error while checking if insights are enabled\", error as string);\n\t\t\t});\n\t}\n\n\tformatters = {\n\t\tsetALPControlMessageStrip(\n\t\t\tthis: AnalyticalPageController,\n\t\t\taIgnoredFields: string[],\n\t\t\tbIsChart: boolean | string,\n\t\t\toApplySupported?: { enableSearch: boolean }\n\t\t): string | undefined {\n\t\t\tlet sText = \"\";\n\t\t\tbIsChart = bIsChart === \"true\" || bIsChart === true;\n\t\t\tconst oFilterBar = this._getFilterBarControl();\n\t\t\tif (oFilterBar && Array.isArray(aIgnoredFields) && aIgnoredFields.length > 0 && bIsChart) {\n\t\t\t\tconst aIgnoredLabels = MessageStrip.getLabels(\n\t\t\t\t\taIgnoredFields,\n\t\t\t\t\toFilterBar.data(\"entityType\"),\n\t\t\t\t\toFilterBar,\n\t\t\t\t\tgetResourceModel(oFilterBar)\n\t\t\t\t);\n\t\t\t\tconst bIsSearchIgnored = !oApplySupported?.enableSearch;\n\t\t\t\tsText = bIsChart\n\t\t\t\t\t? MessageStrip.getALPText(aIgnoredLabels, oFilterBar, bIsSearchIgnored)\n\t\t\t\t\t: MessageStrip.getText(aIgnoredLabels, oFilterBar, \"\");\n\t\t\t\treturn sText;\n\t\t\t}\n\t\t}\n\t};\n\n\t@privateExtension()\n\t@extensible(\"After\")\n\tasync onPageReady(): Promise<void> {\n\t\t// Remove the handler on back navigation that displays Draft confirmation\n\t\tawait this.getAppComponent().getShellServices().setBackNavigation(undefined);\n\t\tthis._initMultiDimModelChangeHandler();\n\t}\n\n\t_initMultiDimModelChangeHandler(): void {\n\t\tconst oMultiDimModel = this.getView().getModel(\"mdm\") as MultiDimModel;\n\t\tconst oMultiDimModelChangeHandler = this.getView().byId(\"MultiDimModelChangeHandler\") as MultiDimModelChangeHandler;\n\t\toMultiDimModelChangeHandler?.registerMultiDimModel(oMultiDimModel);\n\t}\n\n\t/**\n\t * Method called when the content of a custom view used in a list report needs to be refreshed.\n\t * This happens either when there is a change on the FilterBar and the search is triggered,\n\t * or when a tab with custom content is selected,\n\t * or when the view is forced to be refreshed through the Extension API for the list report's public method setTabContentToBeRefreshedOnNextOpening.\n\t * This method can be overwritten by the controller extension in case of customization.\n\t * @param mParameters Map containing the filter conditions of the FilterBar, the currentTabID\n\t * and the view refresh cause (tabChanged, search or forcedRefresh).\n\t * The map looks like this:\n\t * <code><pre>\n\t * \t{\n\t * \t\tfilterConditions: {\n\t * \t\t\tCountry: [\n\t * \t\t\t\t{\n\t * \t\t\t\t\toperator: \"EQ\"\n\t *\t\t\t\t\tvalidated: \"NotValidated\"\n\t *\t\t\t\t\tvalues: [\"Germany\", ...]\n\t * \t\t\t\t},\n\t * \t\t\t\t...\n\t * \t\t\t]\n\t * \t\t\t...\n\t * \t\t},\n\t *\t\tcurrentTabId: \"fe::CustomTab::tab1\",\n\t *\t\trefreshCause: \"tabChanged\" | \"search\" | \"forcedRefresh\"\n\t *\t}\n\t * </pre></code>\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonViewNeedsRefresh(mParameters: unknown): void {\n\t\t/* To be overriden */\n\t}\n\n\t/**\n\t * Method called when a filter or search value has been changed in the FilterBar,\n\t * but has not been validated yet by the end user (with the 'Go' or 'Search' button).\n\t * Typically, the content of the current tab is greyed out until the filters are validated.\n\t * This method can be overwritten by the controller extension in case of customization.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonPendingFilters(): void {\n\t\t/* To be overriden */\n\t}\n\n\tgetCurrentEntitySet(): string {\n\t\treturn this._getTable()?.data(\"targetCollectionPath\").slice(1);\n\t}\n\n\t/**\n\t * Method called when the 'Clear' button on the FilterBar is pressed.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonAfterClear(): void {\n\t\t/* To be overriden */\n\t}\n\n\t/**\n\t * This method initiates the update of the enabled state of the DataFieldForAction and the visible state of the DataFieldForIBN buttons.\n\t * @param aTables Array of tables in the list report\n\t */\n\t_updateTableActions(aTables: Table[]): void {\n\t\tlet aIBNActions: UI5Element[] = [];\n\t\taTables.forEach(function (oTable) {\n\t\t\taIBNActions = CommonUtils.getIBNActions(oTable, aIBNActions);\n\t\t\t// Update 'enabled' property of DataFieldForAction buttons on table toolbar\n\t\t\t// The same is also performed on Table selectionChange event\n\t\t\tconst oInternalModelContext = oTable.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\tconst tableAPI = oTable.getParent() as TableAPI;\n\t\t\tconst oActionOperationAvailableMap = JSON.parse(tableAPI.tableDefinition.operationAvailableMap);\n\t\t\tconst aSelectedContexts = oTable.getSelectedContexts() as Context[];\n\n\t\t\toInternalModelContext.setProperty(\"selectedContexts\", aSelectedContexts);\n\t\t\toInternalModelContext.setProperty(\"numberOfSelectedContexts\", aSelectedContexts.length);\n\t\t\t// Refresh enablement of delete button\n\t\t\tDeleteHelper.updateDeleteInfoForSelectedContexts(oInternalModelContext, aSelectedContexts);\n\n\t\t\tActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, \"table\");\n\t\t});\n\t\tCommonUtils.updateDataFieldForIBNButtonsVisibility(aIBNActions, this.getView());\n\t}\n\n\t/**\n\t * This method scrolls to a specific row on all the available tables.\n\t * @param sRowPath The path of the table row context to be scrolled to\n\t */\n\t_scrollTablesToRow(sRowPath: string): void {\n\t\tthis._getControls(\"table\").forEach(function (oTable: Control) {\n\t\t\tTableScroller.scrollTableToRow(oTable as Table, sRowPath);\n\t\t});\n\t}\n\n\t/**\n\t * Sets a silent focus on the filter field. Suppresses the opening of the type-ahead popup.\n\t * @param filterField The field where the focus should be set after the initial load\n\t */\n\t_focusSilent(filterField: FilterField): void {\n\t\tconst focusInfo = filterField.getFocusInfo() as { targetInfo: object };\n\t\tfocusInfo.targetInfo = { silent: true };\n\t\tfilterField.focus(focusInfo);\n\t}\n\n\t/**\n\t * This method sets the initial focus in a list report based on the User Experience guidelines.\n\t *\n\t */\n\t_setInitialFocus(): void {\n\t\tconst dynamicPage = this._getDynamicListReportControl(),\n\t\t\tisHeaderExpanded = dynamicPage.getHeaderExpanded(),\n\t\t\tfilterBar = this._getFilterBarControl() as FilterBar;\n\t\tif (filterBar) {\n\t\t\t//Enabling mandatory filter fields message dialog\n\t\t\tif (!filterBar.getShowMessages()) {\n\t\t\t\tfilterBar.setShowMessages(true);\n\t\t\t}\n\t\t\tif (isHeaderExpanded) {\n\t\t\t\tconst firstEmptyMandatoryField = filterBar.getFilterItems().find(function (oFilterItem: FilterField) {\n\t\t\t\t\treturn oFilterItem.getRequired() && oFilterItem.getConditions().length === 0;\n\t\t\t\t});\n\t\t\t\t//Focusing on the first empty mandatory filter field, or on the first filter field if the table data is loaded\n\t\t\t\t// Do a \"silent\" focus for FilterField, by adding the silent attribute. The silent attribute suppresses typeahead opening.\n\t\t\t\tif (firstEmptyMandatoryField) {\n\t\t\t\t\tif (firstEmptyMandatoryField.isA<FilterField>(\"sap.ui.mdc.FilterField\")) {\n\t\t\t\t\t\tthis._focusSilent(firstEmptyMandatoryField);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(firstEmptyMandatoryField as Control).focus();\n\t\t\t\t\t}\n\t\t\t\t} else if (this._isInitLoadEnabled() && filterBar.getFilterItems().length > 0) {\n\t\t\t\t\t// Add check for available filterItems\n\t\t\t\t\tconst fieldToFocus = filterBar.getFilterItems()[0];\n\t\t\t\t\tif (fieldToFocus.isA<FilterField>(\"sap.ui.mdc.FilterField\")) {\n\t\t\t\t\t\tthis._focusSilent(fieldToFocus);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(fieldToFocus as Control).focus();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//Focusing on the Go button\n\t\t\t\t\tthis.getView().byId(`${this._getFilterBarControlId()}-btnSearch`)?.focus();\n\t\t\t\t}\n\t\t\t} else if (this._isInitLoadEnabled()) {\n\t\t\t\tthis._getTable()\n\t\t\t\t\t?.focusRow(0)\n\t\t\t\t\t.catch(function (error: unknown) {\n\t\t\t\t\t\tLog.error(\"Error while setting initial focus on the table \", error as string);\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis._getTable()\n\t\t\t\t?.focusRow(0)\n\t\t\t\t.catch(function (error: unknown) {\n\t\t\t\t\tLog.error(\"Error while setting initial focus on the table \", error as string);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tasync _getPageTitleInformation(): Promise<{ title?: string; subtitle: string; intent: string; icon: string }> {\n\t\tconst oManifestEntry = this.getAppComponent().getManifestEntry(\"sap.app\");\n\t\treturn Promise.resolve({\n\t\t\ttitle: oManifestEntry.title,\n\t\t\tsubtitle: oManifestEntry.subTitle || \"\",\n\t\t\tintent: \"\",\n\t\t\ticon: \"\"\n\t\t});\n\t}\n\n\t_getFilterBarControl(): FilterBar | undefined {\n\t\treturn this.getView().byId(this._getFilterBarControlId()) as FilterBar | undefined;\n\t}\n\n\t_getDynamicListReportControl(): DynamicPage {\n\t\treturn this.getView().byId(this._getDynamicListReportControlId()) as DynamicPage;\n\t}\n\n\t_getAdaptationFilterBarControl(): Control {\n\t\t// If the adaptation filter bar is part of the DOM tree, the \"Adapt Filter\" dialog is open,\n\t\t// and we return the adaptation filter bar as an active control (visible for the user)\n\t\tconst adaptationFilterBar = (this._getFilterBarControl() as { getInbuiltFilter?: Function }).getInbuiltFilter?.();\n\t\treturn adaptationFilterBar?.getParent() ? adaptationFilterBar : undefined;\n\t}\n\n\tasync _applyAppState(viewId: string): Promise<void> {\n\t\tawait this.getAppComponent().getAppStateHandler().applyAppState(viewId, this.getView());\n\t\t/*\t\tconst oFilterBar = this._getFilterBarControl();\n\t\t\t\tif (oFilterBar) {\n\t\t\t\t\toFilterBar.setSuspendSelection(false);\n\t\t\t\t} else if (this._isFilterBarHidden()) {\n\t\t\t\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\t\t\t\toInternalModelContext.setProperty(\"hasPendingFilters\", false);\n\t\t\t\t\tif (this._isMultiMode()) {\n\t\t\t\t\t\tthis._getMultiModeControl().setCountsOutDated(true);\n\t\t\t\t\t}\n\t\t\t\t}*/\n\t}\n\n\t_getSegmentedButton(sControl: string): UI5Element | undefined {\n\t\tconst sSegmentedButtonId = (sControl === \"Chart\" ? this.getChartControl() : this._getTable())?.data(\"segmentedButtonId\");\n\t\treturn this.getView().byId(sSegmentedButtonId);\n\t}\n\n\t_getControlFromPageModelProperty(sPath: string): Control | undefined {\n\t\tconst controlId = this._getPageModel()?.getProperty(sPath);\n\t\treturn controlId ? (this.getView().byId(controlId) as Control) : undefined;\n\t}\n\n\t_getDynamicListReportControlId(): string {\n\t\treturn this._getPageModel()?.getProperty(\"/dynamicListReportId\") || \"\";\n\t}\n\n\t_getFilterBarControlId(): string {\n\t\treturn this._getPageModel()?.getProperty(\"/filterBarId\") || \"\";\n\t}\n\n\tgetChartControl(): Control | undefined {\n\t\treturn this._getControlFromPageModelProperty(\"/singleChartId\");\n\t}\n\n\t_getVisualFilterBarControl(): UI5Element | undefined {\n\t\tconst sVisualFilterBarId = StableIdHelper.generate([\"visualFilter\", this._getFilterBarControlId()]);\n\t\treturn sVisualFilterBarId ? this.getView().byId(sVisualFilterBarId) : undefined;\n\t}\n\n\t_getFilterBarVariantControl(): VariantManagement {\n\t\treturn this._getControlFromPageModelProperty(\"/variantManagement/id\") as VariantManagement;\n\t}\n\n\t_getMultiModeControl(): MultipleModeControl {\n\t\treturn this.getView().byId(\"fe::TabMultipleMode::Control\") as MultipleModeControl;\n\t}\n\n\t_getIconTabBar(): IconTabBar {\n\t\treturn this.getView().byId(\"fe::TabMultipleMode\") as IconTabBar;\n\t}\n\n\t_getTable(): Table | undefined {\n\t\tif (this._isMultiMode()) {\n\t\t\tconst oControl = this._getMultiModeControl()?.getSelectedInnerControl()?.content;\n\t\t\treturn oControl?.isA(\"sap.ui.mdc.Table\") ? (oControl as Table) : undefined;\n\t\t} else {\n\t\t\treturn this._getControlFromPageModelProperty(\"/singleTableId\") as Table | undefined;\n\t\t}\n\t}\n\n\t_getControls(sKey?: string): Control[] {\n\t\tif (this._isMultiMode()) {\n\t\t\tconst aControls: Control[] = [];\n\t\t\tconst oTabMultiMode = this._getMultiModeControl().content;\n\t\t\toTabMultiMode.getItems().forEach((oItem: unknown) => {\n\t\t\t\tconst oControl = this.getView().byId((oItem as TabContainerItem).getKey()) as Control;\n\t\t\t\tif (oControl && sKey) {\n\t\t\t\t\tif ((oItem as TabContainerItem).getKey().includes(`fe::${sKey}`)) {\n\t\t\t\t\t\taControls.push(oControl);\n\t\t\t\t\t}\n\t\t\t\t} else if (oControl !== undefined && oControl !== null) {\n\t\t\t\t\taControls.push(oControl);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn aControls;\n\t\t} else if (sKey === \"Chart\") {\n\t\t\tconst oChart = this.getChartControl();\n\t\t\treturn oChart ? [oChart] : [];\n\t\t} else {\n\t\t\tconst oTable = this._getTable();\n\t\t\treturn oTable ? [oTable] : [];\n\t\t}\n\t}\n\n\t_getDefaultPath(): string {\n\t\tconst defaultPath = AnalyticalPageTemplating.getDefaultPath(this._getPageModel()?.getProperty(\"/views\") || []);\n\t\tswitch (defaultPath) {\n\t\t\tcase \"primary\":\n\t\t\t\treturn TemplateContentView.Chart;\n\t\t\tcase \"secondary\":\n\t\t\t\treturn TemplateContentView.Table;\n\t\t\tcase \"both\":\n\t\t\tdefault:\n\t\t\t\treturn TemplateContentView.Hybrid;\n\t\t}\n\t}\n\n\t/**\n\t * Method to know if ListReport is configured with Multiple Table mode.\n\t * @returns Is Multiple Table mode set?\n\t */\n\t_isMultiMode(): boolean {\n\t\treturn !!this._getPageModel()?.getProperty(\"/multiViewsControl\");\n\t}\n\n\t/**\n\t * Method to know if ListReport is configured to load data at start up.\n\t * @returns Is InitLoad enabled?\n\t */\n\t_isInitLoadEnabled(): boolean {\n\t\tconst initLoadMode = this.getView().getViewData().initialLoad;\n\t\treturn initLoadMode === InitialLoadMode.Enabled;\n\t}\n\n\t_hasMultiVisualizations(): boolean {\n\t\treturn this._getPageModel()?.getProperty(\"/hasMultiVisualizations\");\n\t}\n\n\t/**\n\t * Method called by flex to determine if the applyAutomatically setting on the variant is valid.\n\t * Called only for Standard Variant and only when there is display text set for applyAutomatically (FE only sets it for Auto).\n\t * @returns Boolean true if data should be loaded automatically, false otherwise\n\t */\n\t_applyAutomaticallyOnStandardVariant(): boolean {\n\t\t// We always return false and take care of it when view state is set\n\t\treturn false;\n\t}\n\n\t/**\n\t * Configure the settings for initial load based on\n\t * - manifest setting initLoad - Enabled/Disabled/Auto\n\t * - user's setting of applyAutomatically on variant\n\t * - if there are default filters\n\t * We disable the filter bar search at the beginning and enable it when view state is set.\n\t */\n\t_setInitLoad(): void {\n\t\t// if initLoad is Disabled or Auto, switch off filter bar search temporarily at start\n\t\t// set hook for flex for when standard variant is set (at start or by user at runtime)\n\t\t// required to override the user setting 'apply automatically' behaviour if there are no filters\n\t\tconst variantManagementId = AnalyticalPageTemplating.getVariantBackReference(\n\t\t\tthis.getView().getViewData(),\n\t\t\tthis._getPageModel()?.getData() as ListReportDefinition\n\t\t);\n\t\tconst variantManagement = variantManagementId && (this.getView().byId(variantManagementId) as VariantManagement);\n\t\tif (variantManagement) {\n\t\t\t(\n\t\t\t\tvariantManagement as { registerApplyAutomaticallyOnStandardVariant?: Function }\n\t\t\t)?.registerApplyAutomaticallyOnStandardVariant?.(this._applyAutomaticallyOnStandardVariant.bind(this));\n\t\t}\n\t}\n\n\t_setShareModel(): void {\n\t\tconst fnGetUser = ObjectPath.get(\"sap.ushell.Container.getUser\");\n\n\t\t//shareModel: Holds all the sharing relevant information and info used in XML view\n\t\tconst oShareInfo = {\n\t\t\tbookmarkTitle: document.title, //To name the bookmark according to the app title.\n\t\t\tbookmarkCustomUrl: function (): string {\n\t\t\t\tconst sHash = hasher.getHash();\n\t\t\t\treturn sHash ? `#${sHash}` : window.location.href;\n\t\t\t},\n\t\t\tisShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()\n\t\t};\n\n\t\tconst oTemplatePrivateModel = this.getOwnerComponent().getModel(\"_templPriv\") as JSONModel;\n\t\toTemplatePrivateModel.setProperty(\"/listReport/share\", oShareInfo);\n\t}\n\n\t/**\n\t * Method to update the local UI model of the page with the fields that are not applicable to the filter bar (this is specific to the ALP scenario).\n\t * @param oInternalModelContext The internal model context\n\t * @param oFilterBar MDC filter bar\n\t */\n\t_updateALPNotApplicableFields(oInternalModelContext: InternalModelContext, oFilterBar: FilterBar): void {\n\t\tconst mCache: Record<string, string[]> = {};\n\t\tconst ignoredFields: Record<string, string[]> = {},\n\t\t\taTables = this._getControls(\"table\"),\n\t\t\taCharts = this._getControls(\"Chart\");\n\n\t\tif (!aTables.length || !aCharts.length) {\n\t\t\t// If there's not a table and a chart, we're not in the ALP case\n\t\t\treturn;\n\t\t}\n\n\t\t// For the moment, there's nothing for tables...\n\t\taCharts.forEach(function (oChart) {\n\t\t\tconst sChartEntityPath = oChart.data(\"targetCollectionPath\"),\n\t\t\t\tsChartEntitySet = sChartEntityPath.slice(1),\n\t\t\t\tsCacheKey = `${sChartEntitySet}Chart`;\n\t\t\tif (!mCache[sCacheKey]) {\n\t\t\t\tmCache[sCacheKey] = FilterUtils.getNotApplicableFilters(oFilterBar, oChart);\n\t\t\t}\n\t\t\tignoredFields[sCacheKey] = mCache[sCacheKey];\n\t\t});\n\t\toInternalModelContext.setProperty(\"controls/ignoredFields\", ignoredFields);\n\t}\n\n\t/**\n\t * Provides the setting whether FilterBar is hidden based on the manifest setting 'hideFilterBar'.\n\t * Should be used in combination with _isFilterBarHiddenUsed as it may have overridden this setting.\n\t * @returns True if the FilterBar is hidden, false if unknown\n\t */\n\t_isFilterBarHidden(): boolean {\n\t\treturn this.getView().getViewData().hideFilterBar || false;\n\t}\n\n\t_getApplyAutomaticallyOnVariant(variantManagement: VariantManagement, key: string | undefined | null): boolean {\n\t\tif (!variantManagement || !key) {\n\t\t\treturn false;\n\t\t}\n\t\tconst variants = variantManagement.getVariants();\n\t\tconst currentVariant = variants.find(function (variant) {\n\t\t\treturn variant && variant.key === key;\n\t\t});\n\t\treturn (currentVariant && currentVariant.executeOnSelect) || false;\n\t}\n\n\t_shouldAutoTriggerSearch(oVM: VariantManagement | null): boolean {\n\t\tif (\n\t\t\tthis.getView().getViewData().initialLoad === InitialLoadMode.Auto &&\n\t\t\t(!oVM || oVM.getStandardVariantKey() === oVM.getCurrentVariantKey())\n\t\t) {\n\t\t\tconst oFilterBar = this._getFilterBarControl();\n\t\t\tif (oFilterBar) {\n\t\t\t\tconst oConditions = oFilterBar.getConditions();\n\t\t\t\tfor (const sKey in oConditions) {\n\t\t\t\t\t// ignore filters starting with $ (e.g. $search, $editState)\n\t\t\t\t\tif (oVM && !sKey.startsWith(\"$\") && Array.isArray(oConditions[sKey]) && oConditions[sKey].length) {\n\t\t\t\t\t\t// load data as per user's setting of applyAutomatically on the variant\n\t\t\t\t\t\tconst standardVariant = oVM.getVariants().find((variant) => {\n\t\t\t\t\t\t\treturn variant.key === oVM.getCurrentVariantKey();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn standardVariant && standardVariant.executeOnSelect;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t_updateTable(oTable: Table): void {\n\t\tif (!oTable.isTableBound() || this.hasPendingChartChanges) {\n\t\t\toTable.rebind();\n\t\t\tthis.hasPendingChartChanges = false;\n\t\t}\n\t}\n\n\t_updateChart(oChart: Chart): void {\n\t\tconst oInnerChart = (oChart.getControlDelegate() as typeof ChartDelegate)._getChart(oChart);\n\t\tif (!(oInnerChart && oInnerChart.isBound(\"data\")) || this.hasPendingTableChanges) {\n\t\t\t(oChart.getControlDelegate() as typeof ChartDelegate).rebind(oChart, oInnerChart.getBindingInfo(\"data\"));\n\t\t\tthis.hasPendingTableChanges = false;\n\t\t}\n\t}\n\n\t/**\n\t * Set the visibility of the filter toggle button.\n\t * @param buttonVisible Filter toggle button visibility\n\t */\n\tsetFilterToggleVisibility(buttonVisible: boolean): void {\n\t\tconst filterBar = this._getFilterBarControl();\n\t\tfilterBar?.getSegmentedButton()?.setVisible(buttonVisible);\n\t}\n\n\thandlers = {\n\t\tonFilterSearch(this: AnalyticalPageController): void {\n\t\t\tconst filterBarAPI = this._getFilterBarControl()!.getParent() as FilterBarAPI;\n\t\t\tfilterBarAPI.triggerSearch();\n\t\t},\n\t\tonFiltersChanged(this: AnalyticalPageController, oEvent: FilterBarBase$FiltersChangedEvent): void {\n\t\t\tconst oFilterBar = this._getFilterBarControl();\n\t\t\tif (oFilterBar) {\n\t\t\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\t\t\t// Pending filters into FilterBar to be used for custom views\n\t\t\t\tthis.onPendingFilters();\n\t\t\t\tconst appliedFiltersText = oFilterBar.getAssignedFiltersText().filtersText;\n\t\t\t\tconst appliedFilterBinding = BindingInfo.parse(appliedFiltersText);\n\t\t\t\tconst filterBarHiddenUsed = false;\n\t\t\t\tconst filterBarHidden = this._isFilterBarHidden() || filterBarHiddenUsed;\n\t\t\t\tif (appliedFilterBinding && !filterBarHidden) {\n\t\t\t\t\t(this.getView().byId(\"fe::appliedFiltersText\") as Text | undefined)?.bindText(appliedFilterBinding);\n\t\t\t\t} else if (!filterBarHidden) {\n\t\t\t\t\t(this.getView().byId(\"fe::appliedFiltersText\") as Text | undefined)?.setText(appliedFiltersText);\n\t\t\t\t}\n\n\t\t\t\tif (oInternalModelContext && oEvent.getParameter(\"conditionsBased\")) {\n\t\t\t\t\toInternalModelContext.setProperty(\"hasPendingFilters\", true);\n\t\t\t\t}\n\t\t\t\tif (oInternalModelContext) {\n\t\t\t\t\tthis._storeFilterBarSelectionVariant(oFilterBar, oInternalModelContext);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonVariantSelected(this: AnalyticalPageController, oEvent: VariantManagement$SelectEvent): void {\n\t\t\tconst variantManagement = oEvent.getSource();\n\t\t\tconst currentVariantKey = oEvent.getParameter(\"key\");\n\t\t\tconst multiModeControl = this._getMultiModeControl();\n\n\t\t\tif (multiModeControl && !variantManagement?.getParent()?.isA(\"sap.ui.mdc.ActionToolbar\")) {\n\t\t\t\t//Not a Control Variant\n\t\t\t\tmultiModeControl?.invalidateContent();\n\t\t\t\tmultiModeControl?.setFreezeContent(true);\n\t\t\t}\n\n\t\t\t// setTimeout cause the variant needs to be applied before judging the auto search or updating the app state\n\t\t\tsetTimeout((): void => {\n\t\t\t\tconst filterBar = this._getFilterBarControl();\n\t\t\t\tconst dynamicPage = this._getDynamicListReportControl();\n\t\t\t\tconst firstEmptyMandatoryField = filterBar?.getFilterItems().find(function (filterItem) {\n\t\t\t\t\treturn filterItem.getRequired() && filterItem.getConditions().length === 0;\n\t\t\t\t});\n\t\t\t\tif (firstEmptyMandatoryField) {\n\t\t\t\t\tdynamicPage.setHeaderExpanded(true);\n\t\t\t\t}\n\t\t\t\tif (this._shouldAutoTriggerSearch(variantManagement)) {\n\t\t\t\t\t// the app state will be updated via onSearch handler\n\t\t\t\t\tconst filterBarAPI = this._getFilterBarControl()!.getParent() as FilterBarAPI;\n\t\t\t\t\tfilterBarAPI.triggerSearch();\n\t\t\t\t} else if (!this._getApplyAutomaticallyOnVariant(variantManagement, currentVariantKey)) {\n\t\t\t\t\tmultiModeControl?.setFreezeContent(false);\n\t\t\t\t\tthis.getExtensionAPI().updateAppState();\n\t\t\t\t\tdynamicPage.setHeaderExpanded(true);\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t},\n\t\tonVariantSaved(this: AnalyticalPageController): void {\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.getExtensionAPI().updateAppState();\n\t\t\t}, 1000);\n\t\t},\n\t\tonSearch(this: AnalyticalPageController): void {\n\t\t\tconst oFilterBar = this._getFilterBarControl() as FilterBar; // onsearch is called only if the filterbar exists\n\t\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\t\tconst oMdcChart = this.getChartControl();\n\t\t\tconst bHideDraft = FilterUtils.getEditStateIsHideDraft(oFilterBar.getConditions());\n\t\t\toInternalModelContext.setProperty(\"hasPendingFilters\", false);\n\t\t\toInternalModelContext.setProperty(\"hideDraftInfo\", bHideDraft);\n\t\t\tconst dynamicPage = this._getDynamicListReportControl();\n\t\t\tif (!this._getMultiModeControl()) {\n\t\t\t\tthis._updateALPNotApplicableFields(oInternalModelContext, oFilterBar);\n\t\t\t}\n\t\t\tif (oMdcChart) {\n\t\t\t\t(oMdcChart.getBindingContext(\"internal\") as InternalModelContext).setProperty(\"\", {});\n\n\t\t\t\tconst oPageInternalModelContext = oMdcChart.getBindingContext(\"pageInternal\") as InternalModelContext;\n\t\t\t\tconst sTemplateContentView = oPageInternalModelContext.getProperty(`${oPageInternalModelContext.getPath()}/alpContentView`);\n\t\t\t\tif (sTemplateContentView === TemplateContentView.Chart) {\n\t\t\t\t\tthis.hasPendingChartChanges = true;\n\t\t\t\t}\n\t\t\t\tif (sTemplateContentView === TemplateContentView.Table) {\n\t\t\t\t\tthis.hasPendingTableChanges = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//logic for expansion or collapse of filter bar starts\n\t\t\tif (!Device.system.desktop && oInternalModelContext.getProperty(\"searchTriggeredByInitialLoad\") === true) {\n\t\t\t\tif (dynamicPage.getHeaderExpanded() !== false) {\n\t\t\t\t\tdynamicPage.setHeaderExpanded(false);\n\t\t\t\t}\n\t\t\t\t//setting it to false so that further search or 'Go' triggers won't collapse the filter bar\n\t\t\t\toInternalModelContext.setProperty(\"searchTriggeredByInitialLoad\", false);\n\t\t\t}\n\n\t\t\t// store filter bar conditions to use later while navigation\n\t\t\tStateUtil.retrieveExternalState(oFilterBar)\n\t\t\t\t.then((oExternalState) => {\n\t\t\t\t\tthis.filterBarConditions = oExternalState.filter;\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (oError: unknown) {\n\t\t\t\t\tLog.error(\"Error while retrieving the external state\", oError as string);\n\t\t\t\t});\n\t\t\tif (!this.getView().getViewData().liveMode) {\n\t\t\t\tthis.getExtensionAPI().updateAppState();\n\t\t\t}\n\n\t\t\tif (Device.system.phone) {\n\t\t\t\tconst oDynamicPage = this._getDynamicListReportControl();\n\t\t\t\tif (!this._isInitLoadEnabled()) {\n\t\t\t\t\toDynamicPage.setHeaderExpanded(true);\n\t\t\t\t} else {\n\t\t\t\t\toDynamicPage.setHeaderExpanded(false);\n\t\t\t\t\tthis.setFilterToggleVisibility(false);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Triggers an outbound navigation when a user chooses the chevron.\n\t\t * @param oController\n\t\t * @param sOutboundTarget Name of the outbound target (needs to be defined in the manifest)\n\t\t * @param oContext The context that contains the data for the target app\n\t\t * @param sCreatePath Create path when the chevron is created.\n\t\t * @returns Promise which is resolved once the navigation is triggered\n\t\t * @final\n\t\t */\n\t\tasync onChevronPressNavigateOutBound(\n\t\t\toController: AnalyticalPageController,\n\t\t\tsOutboundTarget: string,\n\t\t\toContext: Context,\n\t\t\tsCreatePath: string\n\t\t): Promise<void> {\n\t\t\treturn oController._intentBasedNavigation.onChevronPressNavigateOutBound(oController, sOutboundTarget, oContext, sCreatePath);\n\t\t},\n\t\tonChartSelectionChanged(this: AnalyticalPageController, oEvent: UI5Event<{ data: unknown }, ChartBuildingBlock>): void {\n\t\t\tconst oMdcChart = oEvent.getSource().getContent() as Chart,\n\t\t\t\toTable = this._getTable(),\n\t\t\t\taData = oEvent.getParameter(\"data\"),\n\t\t\t\toInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\t\tif (aData) {\n\t\t\t\tChartUtils.setChartFilters(oMdcChart);\n\t\t\t}\n\t\t\tconst sTemplateContentView = oInternalModelContext.getProperty(`${oInternalModelContext.getPath()}/alpContentView`);\n\t\t\tif (sTemplateContentView === TemplateContentView.Chart) {\n\t\t\t\tthis.hasPendingChartChanges = true;\n\t\t\t} else if (oTable) {\n\t\t\t\toTable.rebind();\n\t\t\t\tthis.hasPendingChartChanges = false;\n\t\t\t}\n\t\t},\n\t\tonDynamicPageTitleStateChanged(this: AnalyticalPageController, event: DynamicPageTitle$StateChangeEvent): void {\n\t\t\tconst filterBar = this._getFilterBarControl();\n\t\t\tif (filterBar) {\n\t\t\t\tthis.setFilterToggleVisibility(!!event.getParameter(\"isExpanded\"));\n\t\t\t\tif (event.getParameter(\"isExpanded\") === false) {\n\t\t\t\t\tInvisibleMessage.getInstance().announce(\n\t\t\t\t\t\tfilterBar.getAssignedFiltersText().filtersText as string,\n\t\t\t\t\t\tInvisibleMessageMode.Assertive\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tonAfterRendering(): void {\n\t\tconst aTables = this._getControls() as Table[];\n\t\tconst sEntitySet = this.getView().getViewData().entitySet;\n\t\tconst sText = getResourceModel(this.getView()).getText(\"T_TABLE_AND_CHART_NO_DATA_TEXT\", undefined, sEntitySet);\n\t\taTables.forEach(function (oTable: Control) {\n\t\t\tif (oTable.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\t\t\toTable.setNoData(sText);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Method to update the local UI model of the page with the Selection Variant.\n\t * @param filterBar MDC filter bar\n\t * @param internalModelContext The internal model context\n\t */\n\tasync _storeFilterBarSelectionVariant(filterBar: FilterBar, internalModelContext: InternalModelContext): Promise<void> {\n\t\ttry {\n\t\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\t\tconst sv = await filterBarAPI.getSelectionVariant();\n\t\t\tinternalModelContext.setProperty(\"filterBarSelectionVariant\", sv);\n\t\t} catch (err: unknown) {\n\t\t\tconst message = err instanceof Error ? err.message : String(err);\n\t\t\tLog.error(`FE : Error fetching selection variant on filter change: ${message}`);\n\t\t}\n\t}\n\n\t/**\n\t * Method to get the Selection Variant from internal model.\n\t * @returns SelectionVariant\n\t */\n\tgetFilterBarSelectionVariant(): SelectionVariant {\n\t\tconst internalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\treturn (internalModelContext?.getProperty(\"filterBarSelectionVariant\") as SelectionVariant) || new SelectionVariant();\n\t}\n}\n\nexport default AnalyticalPageController;\n"],"mappings":"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","ignoreList":[]}