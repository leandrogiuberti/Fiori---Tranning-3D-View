{"version":3,"file":"EasyFilterBarContainer.js","names":["EasyFilterBarContainer","_dec","defineUI5Class","_dec2","property","type","_dec3","_dec4","_dec5","_dec6","_dec7","_dec8","defineReference","_dec9","_dec10","aggregation","_dec11","event","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","defineState","_class","_class2","_Control","properties","others","_this","call","this","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","_descriptor9","_descriptor10","_descriptor11","_descriptor12","_descriptor13","_descriptor14","_descriptor15","_descriptor16","shouldTokenChangeEventFired","inputFieldReady","Promise","resolve","resolveContentReady","initialize","_exports","_inheritsLoose","_proto","prototype","setEasyFilterLib","easyFilterLib","setProperty","easyfilter","__ui5_require_async","setAppId","async","appId","easyFilterInput","current","initShellHistoryProvider","setFilterBarMetadata","filterBarMetadata","tokens","getDefaultTokens","innerControlPopover","createPopoverForInnerControls","addDependent","state","showResult","length","isMandatoryCheckRequired","init","resourceBundle","Lib","getResourceBundleFor","content","createContent","mandatoryKeyMap","forEach","data","isRequired","required","name","push","key","label","keySpecificSelectedValues","defaultValue","busy","onEnterPressed","e","onGoPress","getParameter","checkIfAllMandatoryTokensFilled","tokensInState","getUnSetMandatoryTokensInCurrentState","getActualTokensFromState","token","ValueState","Error","getText","openValueStateMessage","closeAllMandatoryValueStateMessages","easyTokens","tokenizer","getTokens","closeValueStateMessage","magicQuery","resetState","tokenizerEditable","fireEvent","easyFilterMetadata","version","entitySet","contextPath","fields","easyFilterResult","easyFilter","success","isHistoryEnabled","addRecentQuery","handleV1Success","removeNonMandatoryTokens","setMessageStrip","message","messageStripType","MessageType","Warning","Log","error","filter","debug","JSON","stringify","clearMessageStrip","EasyFilterUtils","formatData","bind","allValueHelpTokens","result","requiredValueHelpTokens","valueHelpToken","find","llmResult","dataFetcher","updatedTokens","keySpecificValue","idx","operator","FilterOperator","BT","NB","selectedValues","value","description","subIndx","verifySingleSelectTokenValues","thumbButtonEnabled","thumbDownButtonPressed","thumbUpButtonPressed","singleSelectTokenLabels","splice","singleValueMessageStripText","join","showSingleValueMessageStrip","showMessageStrip","messageStripText","text","_jsx","Popover","id","getId","showArrow","showHeader","placement","PlacementType","Bottom","class","children","footer","getToolbar","toolbar","okButton","getOkButton","showAllButton","getShowAllButton","OverflowToolbar","_jsxs","_Fragment","ToolbarSpacer","Button","ButtonType","Emphasized","formatTokens","map","val","deepClone","onStateChange","changedProps","arguments","undefined","includes","onsapfocusleave","onThumbUpPressed","triggerPXIntegration","onThumbPressed","onThumbDownPressed","MessageToast","show","$topGoBtn","createReference","thumbUpButtonTokenizer","ToggleButton","icon","tooltip","press","enabled","bindState","pressed","FESRHelper","setSemanticStepname","thumbDownButtonTokenizer","thumbUpButtonMessageStripe","thumbDownButtonMessageStripe","outVBox","VBox","FlexBox","renderType","EasyFilterInput","recommendedValues","ref","enterPressed","queryChanged","query","liveChange","onGoButtonPress","visible","alignItems","FlexAlignItems","Center","wrap","FlexWrap","Wrap","justifyContent","FlexJustifyContent","SpaceBetween","AINotice","Tokenizer","editable","and","renderMode","TokenizerRenderMode","Loose","ctx","object","getObject","Token","items","mandatory","isKeyMandatory","delete","tokenIndex","findIndex","newTokens","concat","updateFilterInput","customData","CustomData","codeList","HBox","Transparent","$searchInput","focus","MessageStrip","showIcon","enableFormattedText","showCloseButton","close","currentInputValue","getValue","currentInputPlaceholder","getPlaceholder","setValue","clearAllFilters","None","updateTokenArray","changeType","newTokenSpecificValues","tokenKey","t","setSelectedValues","closeInnerControlPopover","newToken","currValue","setPlaceholder","getTokensInInitialState","mandatoryTokens","requiredKeys","getKey","render","rm","control","jsx","renderUsingRenderManager","getAggregation","Control","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./EasyFilterBarContainer.tsx"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type { EnhanceWithUI5, StateOf } from \"sap/fe/base/ClassSupport\";\nimport {\n\taggregation,\n\tcreateReference,\n\tdefineReference,\n\tdefineState,\n\tdefineUI5Class,\n\tevent,\n\tproperty,\n\ttype PropertiesOf\n} from \"sap/fe/base/ClassSupport\";\nimport type { Ref } from \"sap/fe/base/jsx-runtime/jsx\";\nimport jsx from \"sap/fe/base/jsx-runtime/jsx\";\nimport Token from \"sap/fe/controls/easyFilter/Token\";\nimport Button from \"sap/m/Button\";\nimport FlexBox from \"sap/m/FlexBox\";\nimport Popover from \"sap/m/Popover\";\nimport Tokenizer from \"sap/m/Tokenizer\";\nimport VBox from \"sap/m/VBox\";\nimport { ButtonType, FlexAlignItems, FlexJustifyContent, FlexWrap, PlacementType, TokenizerRenderMode } from \"sap/m/library\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\nimport Control from \"sap/ui/core/Control\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport Lib from \"sap/ui/core/Lib\";\nimport type RenderManager from \"sap/ui/core/RenderManager\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport type Context from \"sap/ui/model/Context\";\n\nimport type { PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport { and, bindState } from \"sap/fe/base/BindingToolkit\";\nimport EasyFilterInput from \"sap/fe/controls/easyFilter/EasyFilterInput\";\nimport type EasyFilterToken from \"sap/fe/controls/easyFilter/Token\";\nimport HBox from \"sap/m/HBox\";\nimport MessageStrip from \"sap/m/MessageStrip\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport OverflowToolbar from \"sap/m/OverflowToolbar\";\nimport ToggleButton from \"sap/m/ToggleButton\";\nimport ToolbarSpacer from \"sap/m/ToolbarSpacer\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport FESRHelper from \"sap/ui/performance/trace/FESRHelper\";\nimport type EasyFilter from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\nimport type { EasyFilterMetadata, EasyFilterResult, PropertyMetadata } from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\nimport type { Success } from \"ux/eng/fioriai/reuse/shared\";\nimport type { EventHandler } from \"../../../../../../../types/extension_types\";\nimport { AINotice } from \"./AINotice\";\nimport { triggerPXIntegration } from \"./PXFeedback\";\nimport EasyFilterUtils from \"./utils\";\n\n//For current release we are ignoring \"All\" and \"Any\"\n//We can incorporate these values in future\nexport type BetweenSelectedValues = [boolean, boolean] | [string, string] | [number, number] | [Date, Date];\n\ntype llmResultForSelectedValuesType = string | Date | boolean | number;\n\nexport type CodeListType = {\n\tvalue: PrimitiveType;\n\tdescription: llmResultForSelectedValuesType;\n};\n\nexport type ValueHelpBetweenSelectedValues = [CodeListType, CodeListType];\n\nexport type ValueHelpSelectedValuesDefinition =\n\t| {\n\t\t\toperator: Exclude<FilterOperator, FilterOperator.BT | FilterOperator.NB>;\n\t\t\tselectedValues: CodeListType[];\n\t\t\tnoMatch?: boolean;\n\t  }\n\t| {\n\t\t\toperator: FilterOperator.BT | FilterOperator.NB;\n\t\t\tselectedValues: ValueHelpBetweenSelectedValues;\n\t\t\tnoMatch?: boolean;\n\t  };\n\n//We will be handling \"ALL\" and \"ANY\" at later point of time\nexport type TokenSelectedValuesDefinition =\n\t| {\n\t\t\toperator: Exclude<FilterOperator, FilterOperator.BT | FilterOperator.NB>;\n\t\t\tselectedValues: string[] | boolean[] | number[] | Date[];\n\t  }\n\t| {\n\t\t\toperator: FilterOperator.BT | FilterOperator.NB;\n\t\t\tselectedValues: BetweenSelectedValues;\n\t  };\n\nexport type TokenType = \"MenuWithCheckBox\" | \"Calendar\" | \"Time\" | \"ValueHelp\" | \"MenuWithSingleSelect\";\n\nexport type ValueHelpTokenDefinition = {\n\tkey: string;\n\tlabel: string;\n\tkeySpecificSelectedValues: ValueHelpSelectedValuesDefinition[];\n\ttype: \"ValueHelp\";\n\tbusy: boolean;\n\tisRequired?: boolean;\n};\n\nexport type NonValueHelpTokenDefinition = {\n\tkey: string;\n\tlabel: string;\n\tkeySpecificSelectedValues: TokenSelectedValuesDefinition[];\n\ttype: Exclude<TokenType, \"ValueHelp\">;\n\tisRequired?: boolean;\n\tbusy: boolean;\n};\n\nexport type TokenDefinition = ValueHelpTokenDefinition | NonValueHelpTokenDefinition;\n\nexport type TokenSetters = \"setSelectedValues\";\n\nexport type EasyFilterPropertyMetadata = PropertyMetadata &\n\t(\n\t\t| {\n\t\t\t\ttype: \"ValueHelp\";\n\t\t\t\tdefaultValue?: ValueHelpSelectedValuesDefinition[];\n\t\t  }\n\t\t| {\n\t\t\t\ttype: Exclude<TokenType, \"ValueHelp\">;\n\t\t\t\tdefaultValue?: TokenSelectedValuesDefinition[];\n\t\t  }\n\t);\n\n// We need the third arguement because there might be a chance of composite keys scenario\ntype DataFetcher = (\n\tpropertyName: string,\n\tvalueOfCurrentProperty: TokenSelectedValuesDefinition[],\n\tllmResult: Success<EasyFilterResult>\n) => Promise<ValueHelpSelectedValuesDefinition[]>;\n\ninterface FocusHandlingControl {\n\tonsapfocusleave?: () => void;\n}\n\nexport type EasyFilterBarContainer$ShowValueHelpEvent = UI5Event<\n\t{\n\t\tkey: string;\n\t\tvalues: unknown[];\n\t\tresolve: (value: ValueHelpSelectedValuesDefinition[]) => void;\n\t\treject: (reason?: Error) => void;\n\t},\n\tEasyFilterBarContainer\n>;\n\n/*\n * Delivery for beta release for the easy filter feature.\n */\n@defineUI5Class(\"sap.fe.controls.easyFilter.EasyFilterBarContainer\")\nexport default class EasyFilterBarContainer extends Control {\n\t@property({ type: \"string\" })\n\tcontextPath?: string;\n\n\t@property({ type: \"string\" })\n\tappId?: string;\n\n\t@property({ type: \"string\" })\n\teasyFilterLib?: string;\n\n\t@property({ type: \"array\" })\n\tfilterBarMetadata?: EasyFilterPropertyMetadata[];\n\n\t@property({ type: \"array\" })\n\trecommendedValues?: string[];\n\n\t@property({ type: \"function\" })\n\tdataFetcher?: DataFetcher;\n\n\t@defineReference()\n\teasyFilterInput!: Ref<EnhanceWithUI5<EasyFilterInput>>;\n\n\t@defineReference()\n\ttokenizer!: Ref<Tokenizer>;\n\n\t@aggregation({ type: \"sap.ui.core.Control\" })\n\tcontent?: Control;\n\n\t@event()\n\ttokensChanged?: EventHandler<UI5Event<{ tokens: TokenDefinition[] }, EasyFilterBarContainer>>;\n\n\t@event()\n\tqueryChanged?: EventHandler<UI5Event<{ query: string }, EasyFilterBarContainer>>;\n\n\t@event()\n\tshowValueHelp?: EventHandler<EasyFilterBarContainer$ShowValueHelpEvent>;\n\n\t@event()\n\tclearFilters?: EventHandler;\n\n\t@event()\n\tbeforeQueryProcessing?: EventHandler;\n\n\t@event()\n\tafterQueryProcessing?: EventHandler;\n\n\tprivate resourceBundle!: ResourceBundle;\n\n\t@defineState()\n\tprotected state: StateOf<{\n\t\tshowResult: boolean;\n\t\ttokens: TokenDefinition[];\n\t\ttokenizerEditable: boolean;\n\t\tshowSingleValueMessageStrip?: boolean;\n\t\tsingleValueMessageStripText?: string;\n\t\tmessageStripText?: string;\n\t\tshowMessageStrip?: boolean;\n\t\tmessageStripType: MessageType;\n\t\tthumbButtonEnabled: boolean;\n\t\tthumbUpButtonPressed: boolean;\n\t\tthumbDownButtonPressed: boolean;\n\t}> = {\n\t\tshowResult: false,\n\t\ttokens: [] as TokenDefinition[],\n\t\ttokenizerEditable: true,\n\t\tshowSingleValueMessageStrip: false,\n\t\tsingleValueMessageStripText: \"\",\n\t\tmessageStripText: \"\",\n\t\tshowMessageStrip: false,\n\t\tmessageStripType: MessageType.Error,\n\t\tthumbButtonEnabled: true,\n\t\tthumbUpButtonPressed: false,\n\t\tthumbDownButtonPressed: false\n\t};\n\n\tprivate innerControlPopover?: Popover;\n\n\tprivate okButton?: Button;\n\n\tprivate showAllButton?: Button;\n\n\tprivate toolbar?: OverflowToolbar;\n\n\tprivate mandatoryKeyMap?: Record<string, boolean>;\n\n\t//If set to true the error state can be seen on the tokens\n\tprivate isMandatoryCheckRequired?: boolean;\n\n\tprivate shouldTokenChangeEventFired = true;\n\n\teasyfilter?: Promise<typeof EasyFilter | undefined>;\n\n\tprivate resolveContentReady!: () => void;\n\n\tprivate inputFieldReady: Promise<void> = new Promise((resolve) => {\n\t\tthis.resolveContentReady = resolve;\n\t});\n\n\tconstructor(properties: string | ($ControlSettings & PropertiesOf<EasyFilterBarContainer>), others?: $ControlSettings) {\n\t\tsuper(properties as string, others);\n\t\tthis.initialize();\n\t}\n\n\tsetEasyFilterLib(easyFilterLib: string): void {\n\t\tthis.setProperty(\"easyFilterLib\", easyFilterLib);\n\t\tif (this.easyFilterLib) {\n\t\t\tthis.easyfilter = import(this.easyFilterLib);\n\t\t}\n\t}\n\n\tasync setAppId(appId: string): Promise<void> {\n\t\tif (!this.appId) {\n\t\t\tthis.setProperty(\"appId\", appId, true);\n\t\t\tawait this.inputFieldReady;\n\t\t\tthis.easyFilterInput.current?.setProperty(\"appId\", appId, true);\n\t\t\tawait this.easyFilterInput.current?.initShellHistoryProvider();\n\t\t}\n\t}\n\n\tsetFilterBarMetadata(filterBarMetadata: EasyFilterPropertyMetadata[]): void {\n\t\tif (!this.filterBarMetadata) {\n\t\t\tthis.setProperty(\"filterBarMetadata\", filterBarMetadata, true);\n\t\t\t// populate the tokens with default value\n\t\t\tconst tokens = this.getDefaultTokens();\n\t\t\tif (!this.innerControlPopover) {\n\t\t\t\tthis.innerControlPopover = this.createPopoverForInnerControls();\n\t\t\t\tthis.addDependent(this.innerControlPopover);\n\t\t\t}\n\t\t\tthis.state.tokens = tokens;\n\t\t\tthis.state.showResult = tokens.length > 0;\n\t\t\t///We don't want to display error valueStateMessage as soon the control renders\n\t\t\tthis.isMandatoryCheckRequired = true;\n\t\t\t//onTokenChange event should not be fired when initial set of tokens are set\n\t\t\tthis.shouldTokenChangeEventFired = false;\n\t\t}\n\t}\n\n\tinit(): void {\n\t\tthis.resourceBundle = Lib.getResourceBundleFor(\"sap.fe.controls\")!;\n\t}\n\n\tinitialize(): void {\n\t\tthis.content = this.createContent();\n\t\tthis.resolveContentReady();\n\t\tif (!this.innerControlPopover) {\n\t\t\tthis.innerControlPopover = this.createPopoverForInnerControls();\n\t\t\tthis.addDependent(this.innerControlPopover);\n\t\t}\n\t\t//We don't want to display error valueStateMessage as soon the control renders\n\t\tthis.isMandatoryCheckRequired = true;\n\t\t//onTokenChange event should not be fired when initial set of tokens are set\n\t\tthis.shouldTokenChangeEventFired = false;\n\t}\n\n\t// This method should be used before updating the state, once the state is updated the previous overridden default values would be gone forever\n\tgetDefaultTokens(): TokenDefinition[] {\n\t\tconst tokens: TokenDefinition[] = [];\n\t\tif (!this.mandatoryKeyMap) {\n\t\t\tthis.mandatoryKeyMap = {};\n\t\t}\n\t\tthis.filterBarMetadata?.forEach((data) => {\n\t\t\tconst isRequired = data.required;\n\t\t\tif (isRequired) {\n\t\t\t\t(this.mandatoryKeyMap as Record<string, boolean>)[data.name] = true;\n\t\t\t\t//Check whether the keys exist in the current state else push it across\n\t\t\t\tif (data.type === \"ValueHelp\") {\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tkey: data.name,\n\t\t\t\t\t\tlabel: data.label as string,\n\t\t\t\t\t\tkeySpecificSelectedValues: (data.defaultValue as ValueHelpSelectedValuesDefinition[]) ?? [],\n\t\t\t\t\t\ttype: data.type,\n\t\t\t\t\t\tbusy: false,\n\t\t\t\t\t\tisRequired\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\ttokens.push({\n\t\t\t\t\t\tkey: data.name,\n\t\t\t\t\t\tlabel: data.label as string,\n\t\t\t\t\t\tkeySpecificSelectedValues: (data.defaultValue as TokenSelectedValuesDefinition[]) ?? [],\n\t\t\t\t\t\ttype: data.type,\n\t\t\t\t\t\tbusy: false,\n\t\t\t\t\t\tisRequired\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn tokens;\n\t}\n\n\tonEnterPressed(e: UI5Event<{ query: string }, EasyFilterInput>): void {\n\t\tthis.onGoPress(e.getParameter(\"query\"));\n\t}\n\n\t//Making it public because in live mode the app developer can decide whether to display the error ValueStateMessage\n\t//In non-live mode , we are already internally handling it on every time time a user clicks on GO/Enter buttons\n\tpublic checkIfAllMandatoryTokensFilled(): boolean {\n\t\tconst tokensInState = this.getUnSetMandatoryTokensInCurrentState();\n\t\tif (tokensInState.length !== 0) {\n\t\t\tconst tokens = this.getActualTokensFromState(tokensInState);\n\t\t\ttokens?.forEach((token) => {\n\t\t\t\ttoken.setProperty(\"valueState\", ValueState.Error);\n\t\t\t\ttoken.setProperty(\"valueStateText\", this.resourceBundle.getText(\"M_EASY_FILTER_MANDATORY_TOKEN_ERROR\"));\n\t\t\t\ttoken.openValueStateMessage();\n\t\t\t});\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic closeAllMandatoryValueStateMessages(): void {\n\t\tconst easyTokens = this.tokenizer.current?.getTokens() as EasyFilterToken[];\n\t\teasyTokens.forEach((token) => token.closeValueStateMessage());\n\t}\n\n\tasync onGoPress(magicQuery: string | undefined): Promise<void> {\n\t\tif (!magicQuery) {\n\t\t\tthis.resetState();\n\t\t\treturn;\n\t\t}\n\t\tthis.state.tokenizerEditable = true;\n\n\t\t// Call AI service to get the filter criteria\n\t\tconst easyfilter = await this.easyfilter;\n\t\tif (!easyfilter) {\n\t\t\treturn;\n\t\t}\n\t\tthis.fireEvent(\"beforeQueryProcessing\");\n\n\t\tconst easyFilterMetadata: EasyFilterMetadata = {\n\t\t\tversion: 1,\n\t\t\tentitySet: this.contextPath,\n\t\t\tfields: this.filterBarMetadata as EasyFilterPropertyMetadata[]\n\t\t};\n\n\t\tconst easyFilterResult = await easyfilter.easyFilter(magicQuery, easyFilterMetadata);\n\n\t\tif (easyFilterResult.success) {\n\t\t\t//Only add the recent query when the call is success\n\t\t\t//Do not track the recent queries when the isHistoryEnabled is set to false\n\t\t\t//It would be a violation to users privacy\n\t\t\tif (this.easyFilterInput.current?.isHistoryEnabled() ?? false) {\n\t\t\t\tthis.easyFilterInput.current?.addRecentQuery(magicQuery);\n\t\t\t}\n\t\t\tif (easyFilterResult.data.version === 1) {\n\t\t\t\tthis.handleV1Success(easyFilterResult);\n\t\t\t} else if (easyFilterResult.data.version === 2) {\n\t\t\t\t// Create the sap.ui.model.Filter from the filter and apply it directly to the list binding\n\t\t\t}\n\t\t} else {\n\t\t\t// error\n\t\t\tthis.removeNonMandatoryTokens();\n\t\t\tthis.setMessageStrip(easyFilterResult.message);\n\t\t\tthis.state.messageStripType = MessageType.Warning;\n\t\t\tLog.error(\"Error while generating filter criteria: \", easyFilterResult.message);\n\t\t}\n\n\t\tthis.fireEvent(\"afterQueryProcessing\");\n\t}\n\n\t/**\n\t * Handles the success response from the AI service for version 1 of the easy filter.\n\t * @param easyFilterResult The result from the AI service\n\t * @private\n\t */\n\tprivate handleV1Success(easyFilterResult: Success<EasyFilter.EasyFilterResult>): void {\n\t\tif (easyFilterResult.data.filter) {\n\t\t\t// We need to show a message to the user that the filter criteria has been generated\n\t\t\tLog.debug(\"Filter criteria generated: \", JSON.stringify(easyFilterResult.data.filter, null, 2));\n\n\t\t\tconst tokens = [...this.state.tokens].filter((token) => token.isRequired);\n\n\t\t\t// Clear the previous message strip for validated filters\n\t\t\tthis.clearMessageStrip();\n\n\t\t\t// Validate and apply the filter criteria\n\t\t\tEasyFilterUtils.formatData(\n\t\t\t\ttokens,\n\t\t\t\teasyFilterResult.data.filter,\n\t\t\t\tthis.filterBarMetadata as EasyFilterPropertyMetadata[],\n\t\t\t\tthis.setMessageStrip.bind(this)\n\t\t\t);\n\n\t\t\t//We only have to call the dataFetcher on the VH tokens which have been asked by the user\n\t\t\t//In Madnatory tokens case the defaultValues are already given, so no need to call dataFetcher on it\n\n\t\t\tconst allValueHelpTokens = tokens.filter((result) => result.type === \"ValueHelp\");\n\t\t\tconst requiredValueHelpTokens = allValueHelpTokens.filter((valueHelpToken) => {\n\t\t\t\treturn easyFilterResult.data.filter?.find((llmResult) => llmResult.name === valueHelpToken.key);\n\t\t\t});\n\n\t\t\tif (this.dataFetcher) {\n\t\t\t\t(requiredValueHelpTokens as unknown as ValueHelpTokenDefinition[]).forEach(async (valueHelpToken) => {\n\t\t\t\t\tconst result = await this.dataFetcher?.(\n\t\t\t\t\t\tvalueHelpToken.key,\n\t\t\t\t\t\tvalueHelpToken.keySpecificSelectedValues as unknown as TokenSelectedValuesDefinition[],\n\t\t\t\t\t\teasyFilterResult\n\t\t\t\t\t);\n\t\t\t\t\tvalueHelpToken.busy = false;\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tvalueHelpToken.keySpecificSelectedValues = result;\n\t\t\t\t\t\tthis.state.showResult = true;\n\t\t\t\t\t\tthis.state.tokens = updatedTokens;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t//If dataFetcher is not there, then mock the value and description with the same result coming from the LLM\n\t\t\t\trequiredValueHelpTokens.forEach((valueHelpToken) => {\n\t\t\t\t\tvalueHelpToken.busy = false;\n\t\t\t\t\tvalueHelpToken.keySpecificSelectedValues.forEach((keySpecificValue, idx) => {\n\t\t\t\t\t\tif (keySpecificValue.operator === FilterOperator.BT || keySpecificValue.operator === FilterOperator.NB) {\n\t\t\t\t\t\t\tvalueHelpToken.keySpecificSelectedValues[idx].selectedValues = [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvalue: keySpecificValue.selectedValues[0],\n\t\t\t\t\t\t\t\t\tdescription: keySpecificValue.selectedValues[0] as unknown as llmResultForSelectedValuesType\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvalue: keySpecificValue.selectedValues[1],\n\t\t\t\t\t\t\t\t\tdescription: keySpecificValue.selectedValues[1] as unknown as llmResultForSelectedValuesType\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalueHelpToken.keySpecificSelectedValues[idx].selectedValues.forEach((value, subIndx) => {\n\t\t\t\t\t\t\t\tvalueHelpToken.keySpecificSelectedValues[idx].selectedValues[subIndx] = {\n\t\t\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t\t\tdescription: value as unknown as llmResultForSelectedValuesType\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst updatedTokens = this.verifySingleSelectTokenValues(tokens);\n\t\t\tthis.state.showResult = true;\n\t\t\tthis.state.thumbButtonEnabled = true;\n\t\t\tthis.state.thumbDownButtonPressed = false;\n\t\t\tthis.state.thumbUpButtonPressed = false;\n\t\t\tthis.state.tokens = updatedTokens;\n\t\t}\n\t}\n\n\t//every single select menu type should have only one value, else splice to one value and update the  message strip\n\tverifySingleSelectTokenValues(tokens: TokenDefinition[]): TokenDefinition[] {\n\t\tconst singleSelectTokenLabels: string[] = [];\n\t\ttokens.forEach((token) => {\n\t\t\tif (token.type === \"MenuWithSingleSelect\") {\n\t\t\t\tif (token.keySpecificSelectedValues[0].selectedValues.length > 1) {\n\t\t\t\t\tsingleSelectTokenLabels.push(token.label);\n\t\t\t\t\ttoken.keySpecificSelectedValues[0].selectedValues.splice(1);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (singleSelectTokenLabels.length) {\n\t\t\tthis.state.singleValueMessageStripText = this.resourceBundle.getText(\"M_EASY_FILTER_SINGLE_VALUE_MESSAGE\", [\n\t\t\t\t`<strong>${singleSelectTokenLabels.join(\", \")}</strong>`\n\t\t\t]);\n\t\t\tthis.state.showSingleValueMessageStrip = true;\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tclearMessageStrip(): void {\n\t\tthis.state.thumbDownButtonPressed = false;\n\t\tthis.state.thumbUpButtonPressed = false;\n\t\tthis.state.showMessageStrip = false;\n\t\tthis.state.messageStripText = \"\";\n\t\tthis.state.messageStripType = MessageType.Error;\n\t}\n\n\tsetMessageStrip(text: string): void {\n\t\tthis.state.thumbDownButtonPressed = false;\n\t\tthis.state.thumbUpButtonPressed = false;\n\t\tthis.state.thumbButtonEnabled = true;\n\t\tthis.state.messageStripText = text;\n\t\tthis.state.showMessageStrip = true;\n\t}\n\n\tcreatePopoverForInnerControls(): Popover {\n\t\tif (!this.innerControlPopover) {\n\t\t\tthis.innerControlPopover = (\n\t\t\t\t<Popover\n\t\t\t\t\tid={this.getId() + \"-innerPopover\"}\n\t\t\t\t\tshowArrow={false}\n\t\t\t\t\tshowHeader={true}\n\t\t\t\t\tplacement={PlacementType.Bottom}\n\t\t\t\t\tclass=\"sapUiMediumMarginBottom\"\n\t\t\t\t>\n\t\t\t\t\t{{\n\t\t\t\t\t\tfooter: this.getToolbar()\n\t\t\t\t\t}}\n\t\t\t\t</Popover>\n\t\t\t);\n\t\t}\n\t\treturn this.innerControlPopover as Popover;\n\t}\n\n\tgetToolbar(): OverflowToolbar | undefined {\n\t\tif (!this.toolbar) {\n\t\t\tconst okButton = this.getOkButton();\n\t\t\tconst showAllButton = this.getShowAllButton();\n\t\t\tthis.toolbar = (\n\t\t\t\t<OverflowToolbar>\n\t\t\t\t\t{{\n\t\t\t\t\t\tcontent: (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t\t\t\t{okButton}\n\t\t\t\t\t\t\t\t{showAllButton}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t</OverflowToolbar>\n\t\t\t);\n\t\t}\n\t\treturn this.toolbar;\n\t}\n\n\tgetOkButton(): Button | undefined {\n\t\tif (!this.okButton) {\n\t\t\tthis.okButton = <Button text={this.resourceBundle.getText(\"M_EASY_FILTER_POPOVER_OK\")} type={ButtonType.Emphasized} />;\n\t\t}\n\t\treturn this.okButton;\n\t}\n\n\tgetShowAllButton(): Button | undefined {\n\t\tif (!this.showAllButton) {\n\t\t\tthis.showAllButton = <Button text={this.resourceBundle.getText(\"M_EASY_FILTER_POPOVER_SHOW_ALL_ITEMS\")} />;\n\t\t}\n\t\treturn this.showAllButton;\n\t}\n\n\tformatTokens(tokens: TokenDefinition[]): TokenDefinition[] {\n\t\treturn tokens.map((token) => {\n\t\t\tif (token.type === \"ValueHelp\") {\n\t\t\t\treturn {\n\t\t\t\t\t...token,\n\t\t\t\t\tkeySpecificSelectedValues: token.keySpecificSelectedValues.map((value) => {\n\t\t\t\t\t\t//Making sure that only the id part is passed\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\toperator: value.operator,\n\t\t\t\t\t\t\tselectedValues: value.selectedValues.map((val) => val.value)\n\t\t\t\t\t\t};\n\t\t\t\t\t})\n\t\t\t\t} as TokenDefinition;\n\t\t\t} else {\n\t\t\t\treturn deepClone(token);\n\t\t\t}\n\t\t});\n\t}\n\n\tonStateChange(changedProps: string[] = []): void {\n\t\tif (changedProps.includes(\"tokens\")) {\n\t\t\tif (this.shouldTokenChangeEventFired) {\n\t\t\t\tthis.fireEvent(\"tokensChanged\", {\n\t\t\t\t\ttokens: this.formatTokens(this.state.tokens as unknown as TokenDefinition[])\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.state.showResult = this.state.tokens.length > 0;\n\t\t\tif (!(this.isMandatoryCheckRequired ?? false)) {\n\t\t\t\tthis.checkIfAllMandatoryTokensFilled();\n\t\t\t}\n\t\t}\n\t\t//Resetting to default values\n\t\tthis.isMandatoryCheckRequired = false;\n\t\tthis.shouldTokenChangeEventFired = true;\n\n\t\t//  onsapfocusleave method in sap.m.Tokenizer is automatically converting the rendermode of tokenizer to \"Narrow\" from \"loose\"\n\t\t//  In this process there are multiple popover issues happening\n\t\t//  So as a temporary fix overriding the function\n\t\t(this.tokenizer?.current as FocusHandlingControl).onsapfocusleave = (): void => {};\n\t}\n\n\tprivate onThumbUpPressed(): void {\n\t\tthis.state.thumbUpButtonPressed = true;\n\t\tthis.state.thumbDownButtonPressed = false;\n\t\ttriggerPXIntegration(\"thumbUp\");\n\t\tthis.onThumbPressed();\n\t}\n\n\tprivate onThumbDownPressed(): void {\n\t\tthis.state.thumbDownButtonPressed = true;\n\t\tthis.state.thumbUpButtonPressed = false;\n\t\ttriggerPXIntegration(\"thumbDown\");\n\t\tthis.onThumbPressed();\n\t}\n\n\tprivate onThumbPressed(): void {\n\t\tthis.state.thumbButtonEnabled = false;\n\t\tMessageToast.show(this.resourceBundle.getText(\"C_EASY_FILTER_FEEDBACK_SENT\"));\n\t}\n\n\tcreateContent(): VBox {\n\t\tconst $topGoBtn = createReference<Button>();\n\t\tconst thumbUpButtonTokenizer = (\n\t\t\t<ToggleButton\n\t\t\t\ticon={\"sap-icon://thumb-up\"}\n\t\t\t\ttooltip={this.resourceBundle.getText(\"C_EASY_FILTER_THUMBS_UP\")}\n\t\t\t\ttype={\"Transparent\"}\n\t\t\t\tpress={(): void => {\n\t\t\t\t\treturn this.onThumbUpPressed();\n\t\t\t\t}}\n\t\t\t\tenabled={bindState(this.state, \"thumbButtonEnabled\")}\n\t\t\t\tpressed={bindState(this.state, \"thumbUpButtonPressed\")}\n\t\t\t/>\n\t\t);\n\t\tFESRHelper.setSemanticStepname(thumbUpButtonTokenizer, \"press\", \"fe4:eft:t:thumbUp\");\n\t\tconst thumbDownButtonTokenizer = (\n\t\t\t<ToggleButton\n\t\t\t\ticon={\"sap-icon://thumb-down\"}\n\t\t\t\ttooltip={this.resourceBundle.getText(\"C_EASY_FILTER_THUMBS_DOWN\")}\n\t\t\t\ttype={\"Transparent\"}\n\t\t\t\tpress={(): void => {\n\t\t\t\t\treturn this.onThumbDownPressed();\n\t\t\t\t}}\n\t\t\t\tenabled={bindState(this.state, \"thumbButtonEnabled\")}\n\t\t\t\tpressed={bindState(this.state, \"thumbDownButtonPressed\")}\n\t\t\t/>\n\t\t);\n\t\tFESRHelper.setSemanticStepname(thumbDownButtonTokenizer, \"press\", \"fe4:eft:t:thumbDown\");\n\t\tconst thumbUpButtonMessageStripe = (\n\t\t\t<ToggleButton\n\t\t\t\ticon={\"sap-icon://thumb-up\"}\n\t\t\t\ttooltip={this.resourceBundle.getText(\"C_EASY_FILTER_THUMBS_UP\")}\n\t\t\t\ttype={\"Transparent\"}\n\t\t\t\tpress={(): void => {\n\t\t\t\t\treturn this.onThumbUpPressed();\n\t\t\t\t}}\n\t\t\t\tenabled={bindState(this.state, \"thumbButtonEnabled\")}\n\t\t\t\tpressed={bindState(this.state, \"thumbUpButtonPressed\")}\n\t\t\t/>\n\t\t);\n\t\tFESRHelper.setSemanticStepname(thumbUpButtonMessageStripe, \"press\", \"fe4:eft:ms:thumbUp\");\n\t\tconst thumbDownButtonMessageStripe = (\n\t\t\t<ToggleButton\n\t\t\t\ticon={\"sap-icon://thumb-down\"}\n\t\t\t\ttooltip={this.resourceBundle.getText(\"C_EASY_FILTER_THUMBS_DOWN\")}\n\t\t\t\ttype={\"Transparent\"}\n\t\t\t\tpress={(): void => {\n\t\t\t\t\treturn this.onThumbDownPressed();\n\t\t\t\t}}\n\t\t\t\tenabled={bindState(this.state, \"thumbButtonEnabled\")}\n\t\t\t\tpressed={bindState(this.state, \"thumbDownButtonPressed\")}\n\t\t\t/>\n\t\t);\n\t\tFESRHelper.setSemanticStepname(thumbDownButtonMessageStripe, \"press\", \"fe4:eft:ms:thumbDown\");\n\t\tconst outVBox = (\n\t\t\t<VBox>\n\t\t\t\t<FlexBox renderType=\"Bare\">\n\t\t\t\t\t<EasyFilterInput\n\t\t\t\t\t\trecommendedValues={this.recommendedValues}\n\t\t\t\t\t\tref={this.easyFilterInput}\n\t\t\t\t\t\tenterPressed={this.onEnterPressed.bind(this)}\n\t\t\t\t\t\tqueryChanged={(e): void => {\n\t\t\t\t\t\t\tthis.fireEvent(\"queryChanged\", { query: e.getParameter(\"query\") });\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tliveChange={(): void => {\n\t\t\t\t\t\t\tthis.state.tokenizerEditable = false;\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Button\n\t\t\t\t\t\ticon={\"sap-icon://ai\"}\n\t\t\t\t\t\tclass={\"sapUiSmallMarginBegin\"}\n\t\t\t\t\t\tref={$topGoBtn}\n\t\t\t\t\t\ttext={this.resourceBundle.getText(\"M_EASY_FILTER_GO\")}\n\t\t\t\t\t\ttype={ButtonType.Emphasized}\n\t\t\t\t\t\tpress={this.onGoButtonPress.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t</FlexBox>\n\t\t\t\t<FlexBox\n\t\t\t\t\trenderType=\"Bare\"\n\t\t\t\t\tvisible={bindState(this.state, \"showResult\")}\n\t\t\t\t\talignItems={FlexAlignItems.Center}\n\t\t\t\t\twrap={FlexWrap.Wrap}\n\t\t\t\t\tjustifyContent={FlexJustifyContent.SpaceBetween}\n\t\t\t\t\tclass={\"sapUiTinyMarginTop\"}\n\t\t\t\t>\n\t\t\t\t\t<FlexBox class={\"sapFeControlsGap8px\"} renderType=\"Bare\" alignItems={FlexAlignItems.Center} wrap={FlexWrap.Wrap}>\n\t\t\t\t\t\t<AINotice resourceBundle={this.resourceBundle} />\n\t\t\t\t\t\t<Tokenizer\n\t\t\t\t\t\t\teditable={and(bindState(this.state, \"tokenizerEditable\"), true)}\n\t\t\t\t\t\t\tclass={\"sapFeControlsTokenizer\"}\n\t\t\t\t\t\t\ttokens={bindState(this.state, \"tokens\")}\n\t\t\t\t\t\t\trenderMode={TokenizerRenderMode.Loose}\n\t\t\t\t\t\t\tref={this.tokenizer}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\ttokens: (idx: number, ctx: Context): Token => {\n\t\t\t\t\t\t\t\t\tconst object = ctx.getObject() as TokenDefinition;\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<Token\n\t\t\t\t\t\t\t\t\t\t\tkey={this.state.tokens.key}\n\t\t\t\t\t\t\t\t\t\t\tlabel={this.state.tokens.label}\n\t\t\t\t\t\t\t\t\t\t\titems={this.state.tokens.keySpecificSelectedValues}\n\t\t\t\t\t\t\t\t\t\t\tmandatory={this.isKeyMandatory(object.key)}\n\t\t\t\t\t\t\t\t\t\t\tbusy={this.state.tokens.busy}\n\t\t\t\t\t\t\t\t\t\t\tdelete={(): void => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst tokenIndex = this.state.tokens.findIndex((token) => token.key === object.key);\n\t\t\t\t\t\t\t\t\t\t\t\tconst newTokens = this.state.tokens.concat();\n\t\t\t\t\t\t\t\t\t\t\t\tnewTokens.splice(tokenIndex, 1);\n\t\t\t\t\t\t\t\t\t\t\t\tthis.state.tokens = newTokens;\n\t\t\t\t\t\t\t\t\t\t\t\tthis.updateFilterInput(\"tokenUpdated\");\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\t\t\t\t\tcustomData: [\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData key=\"TokenInfo\" value={object} />,\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData key=\"popover\" value={this.innerControlPopover} />,\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData key=\"easyFilterBarContainer\" value={this} />,\n\t\t\t\t\t\t\t\t\t\t\t\t\t<CustomData\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey=\"codeList\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={this.filterBarMetadata?.find((data) => data.name === object.key)?.codeList}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t</Token>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</Tokenizer>\n\t\t\t\t\t\t<HBox>\n\t\t\t\t\t\t\t{thumbUpButtonTokenizer}, {thumbDownButtonTokenizer}\n\t\t\t\t\t\t</HBox>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\ttext={this.resourceBundle.getText(\"M_EASY_FILTER_RESET\")}\n\t\t\t\t\t\t\ttype={ButtonType.Transparent}\n\t\t\t\t\t\t\tpress={(): void => {\n\t\t\t\t\t\t\t\tthis.resetState();\n\t\t\t\t\t\t\t\t//Retaining the focus on popover doesn't make the popover close on every interaction\n\t\t\t\t\t\t\t\tthis.easyFilterInput.current?.$searchInput.focus();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</FlexBox>\n\t\t\t\t</FlexBox>\n\t\t\t\t<FlexBox renderType=\"Bare\">\n\t\t\t\t\t<MessageStrip\n\t\t\t\t\t\ttext={bindState(this.state, \"singleValueMessageStripText\")}\n\t\t\t\t\t\tshowIcon={true}\n\t\t\t\t\t\tenableFormattedText={true}\n\t\t\t\t\t\tvisible={bindState(this.state, \"showSingleValueMessageStrip\")}\n\t\t\t\t\t\tshowCloseButton={true}\n\t\t\t\t\t\tclose={(): void => {\n\t\t\t\t\t\t\tthis.state.showSingleValueMessageStrip = false;\n\t\t\t\t\t\t\tthis.state.singleValueMessageStripText = \"\";\n\t\t\t\t\t\t}}\n\t\t\t\t\t></MessageStrip>\n\t\t\t\t</FlexBox>\n\t\t\t\t<FlexBox renderType=\"Bare\" class={\"sapFeControlsGap8px\"}>\n\t\t\t\t\t<MessageStrip\n\t\t\t\t\t\ttype={bindState(this.state, \"messageStripType\")}\n\t\t\t\t\t\ttext={bindState(this.state, \"messageStripText\")}\n\t\t\t\t\t\tshowIcon={true}\n\t\t\t\t\t\tenableFormattedText={true}\n\t\t\t\t\t\tshowCloseButton={true}\n\t\t\t\t\t\tclose={(): void => {\n\t\t\t\t\t\t\tthis.clearMessageStrip();\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tvisible={bindState(this.state, \"showMessageStrip\")}\n\t\t\t\t\t></MessageStrip>\n\t\t\t\t\t<HBox visible={bindState(this.state, \"showMessageStrip\")}>\n\t\t\t\t\t\t{thumbUpButtonMessageStripe}, {thumbDownButtonMessageStripe}\n\t\t\t\t\t</HBox>\n\t\t\t\t</FlexBox>\n\t\t\t</VBox>\n\t\t) as VBox;\n\t\tFESRHelper.setSemanticStepname($topGoBtn.current!, \"press\", \"fe:ai:search\");\n\t\treturn outVBox;\n\t}\n\n\tasync onGoButtonPress(): Promise<void> {\n\t\tthis.state.tokenizerEditable = true;\n\t\tlet currentInputValue = this.easyFilterInput.current?.getValue();\n\t\tconst currentInputPlaceholder = this.easyFilterInput.current?.getPlaceholder();\n\n\t\tif (currentInputValue === \"\" && currentInputPlaceholder !== this.resourceBundle.getText(\"M_EASY_FILTER_PLACEHOLDER\")) {\n\t\t\tthis.easyFilterInput.current?.setValue(currentInputPlaceholder || \"\");\n\t\t\tcurrentInputValue = currentInputPlaceholder;\n\t\t}\n\t\tawait this.onGoPress(currentInputValue);\n\t}\n\n\tresetState(clearAllFilters = true): void {\n\t\tif (clearAllFilters) {\n\t\t\tthis.fireEvent(\"clearFilters\");\n\t\t} else {\n\t\t\tthis.shouldTokenChangeEventFired = false;\n\t\t}\n\t\tthis.state.tokens = this.getDefaultTokens();\n\t\tthis.updateFilterInput(\"tokenReset\");\n\t\tthis.state.tokenizerEditable = true;\n\t\tthis.isMandatoryCheckRequired = true;\n\t\t//Set the Value States of all the Tokens back to None\n\t\tthis.tokenizer.current?.getTokens().forEach((token) => token.setProperty(\"valueState\", ValueState.None));\n\t\tthis.tokenizer.current?.getTokens().forEach((token) => token.setProperty(\"valueStateText\", null));\n\t\tthis.clearMessageStrip(); //clear the message strip for validated filters\n\t}\n\n\t//The below code updates the existing state by fetching the key and selectedValues\n\tupdateTokenArray(\n\t\tchangeType: TokenSetters,\n\t\tnewTokenSpecificValues: TokenSelectedValuesDefinition[] | ValueHelpSelectedValuesDefinition[],\n\t\ttokenKey: string\n\t): void {\n\t\tconst newTokens = this.state.tokens.map((token) => ({ ...token, keySpecificSelectedValues: [...token.keySpecificSelectedValues] }));\n\t\tconst tokenIndex = newTokens.findIndex((t) => t.key === tokenKey);\n\t\tconst token = newTokens[tokenIndex];\n\t\tif (tokenIndex != -1) {\n\t\t\tswitch (changeType) {\n\t\t\t\tcase \"setSelectedValues\":\n\t\t\t\t\tthis.setSelectedValues(token as TokenDefinition, newTokenSpecificValues, tokenIndex, newTokens as TokenDefinition[]);\n\t\t\t\t\ttoken.keySpecificSelectedValues = newTokenSpecificValues;\n\t\t\t\t\t//Remove the token entirely\n\t\t\t\t\tif (!this.isKeyMandatory(token.key) && token.keySpecificSelectedValues.length === 0) {\n\t\t\t\t\t\tnewTokens.splice(tokenIndex, 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tLog.error(\"Specifying a setter that is out of the boundary\");\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Update the state by assigning the new tokens array\n\t\t\tthis.state.tokens = newTokens as TokenDefinition[];\n\t\t\tthis.state.showResult = newTokens.length > 0;\n\t\t\tthis.updateFilterInput(\"tokenUpdated\");\n\t\t}\n\t}\n\n\tpublic closeInnerControlPopover(): void {\n\t\tthis.innerControlPopover?.close();\n\t}\n\n\tprivate setSelectedValues(\n\t\ttoken: TokenDefinition,\n\t\tnewTokenSpecificValues: TokenSelectedValuesDefinition[] | ValueHelpSelectedValuesDefinition[],\n\t\ttokenIndex: number,\n\t\tnewTokens: TokenDefinition[]\n\t): void {\n\t\ttoken.keySpecificSelectedValues = newTokenSpecificValues;\n\t\tif (!this.isKeyMandatory(token.key) && token.keySpecificSelectedValues.length === 0) {\n\t\t\tnewTokens.splice(tokenIndex, 1);\n\t\t}\n\t}\n\n\tisKeyMandatory(key: string): boolean {\n\t\tif (!this.mandatoryKeyMap) {\n\t\t\tthis.mandatoryKeyMap = {};\n\t\t}\n\t\treturn this.mandatoryKeyMap[key] ? true : false;\n\t}\n\n\tremoveNonMandatoryTokens(): this {\n\t\tconst newToken: TokenDefinition[] = this.state.tokens.filter((token) => {\n\t\t\treturn this.isKeyMandatory(token.key);\n\t\t});\n\t\tthis.state.tokens = newToken;\n\t\treturn this;\n\t}\n\n\tupdateFilterInput(value: string): void {\n\t\tconst currValue: string = this.easyFilterInput.current?.getValue() || \"\";\n\t\tif (value === \"tokenUpdated\" && currValue !== \"\") {\n\t\t\tthis.easyFilterInput.current?.setValue(\"\");\n\t\t\tthis.easyFilterInput.current?.setPlaceholder(currValue);\n\t\t} else if (value === \"tokenReset\") {\n\t\t\tthis.easyFilterInput.current?.setValue(\"\");\n\t\t\tthis.easyFilterInput.current?.setPlaceholder(this.resourceBundle.getText(\"M_EASY_FILTER_PLACEHOLDER\"));\n\t\t}\n\t}\n\n\tgetTokensInInitialState(): TokenDefinition[] {\n\t\tconst newTokens = this.state.tokens.map((token) => ({ ...token, keySpecificSelectedValues: [...token.keySpecificSelectedValues] }));\n\t\tconst mandatoryTokens = newTokens.filter((token) => {\n\t\t\tif (this.isKeyMandatory(token.key)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\treturn mandatoryTokens.map((token) => ({ ...token, keySpecificSelectedValues: [] }));\n\t}\n\n\tgetUnSetMandatoryTokensInCurrentState(): TokenDefinition[] {\n\t\treturn this.state.tokens.filter((token) => {\n\t\t\tconst isKeyMandatory = this.isKeyMandatory(token.key);\n\t\t\tif (isKeyMandatory) {\n\t\t\t\treturn token.keySpecificSelectedValues.length === 0;\n\t\t\t}\n\t\t});\n\t}\n\n\tgetActualTokensFromState(tokens: TokenDefinition[]): EasyFilterToken[] | undefined {\n\t\tconst requiredKeys = tokens.map((token) => token.key);\n\t\treturn this.tokenizer.current?.getTokens().filter((token) => requiredKeys.includes(token.getKey())) as\n\t\t\t| EasyFilterToken[]\n\t\t\t| undefined;\n\t}\n\n\tstatic render(rm: RenderManager, control: EasyFilterBarContainer): void {\n\t\treturn jsx.renderUsingRenderManager(rm, control, () => {\n\t\t\treturn <span ref={control}>{control.getAggregation(\"content\")}</span>;\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]}