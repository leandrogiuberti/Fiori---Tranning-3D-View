{"version":3,"file":"MenuWithCheckBoxFactory.js","names":["MenuWithCheckBoxFactory","_BaseFactory","EFB","token","_this","ListSeparators","library","ListMode","call","this","selectionList","okButtonClicked","setControl","List","mode","MultiSelect","showSeparators","None","_inheritsLoose","_proto","prototype","setItems","async","newItems","allSelectedValues","Utils","areCodeListsSame","getItems","list","getControl","items","getCodeListArray","destroyAggregation","forEach","item","idx","selectState","length","selectedValues","firstValue","value","includes","push","addItem","StandardListItem","title","description","selected","customData","CustomData","key","invokeOkButtonHandler","areSelectListSame","getSelectedIndices","listItems","getSelectedItems","easyFilterBarContainer","getEasyFilter","operator","FilterOperator","EQ","getToken","getCustomDataValue","getCustomData","find","getKey","getValue","undefined","Array","isArray","every","val","updateTokenArray","tempSelectList","invokePopupCloseHandler","removeSelections","setSelected","setSelectList","indexOfItem","BaseFactory"],"sources":["./MenuWithCheckBoxFactory.ts"],"sourcesContent":["import type { EnhanceWithUI5 } from \"sap/fe/base/ClassSupport\";\nimport type { finalCodeListType } from \"sap/fe/controls/easyFilter/innerControls/BaseFactory\";\nimport { BaseFactory } from \"sap/fe/controls/easyFilter/innerControls/BaseFactory\";\nimport Utils from \"sap/fe/controls/easyFilter/utils\";\nimport List from \"sap/m/List\";\nimport StandardListItem from \"sap/m/StandardListItem\";\nimport library from \"sap/m/library\";\nimport CustomData from \"sap/ui/core/CustomData\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type { PropertyMetadata } from \"ux/eng/fioriai/reuse/easyfilter/EasyFilter\";\nimport type EasyFilterBarContainer from \"../EasyFilterBarContainer\";\nimport type { TokenDefinition, TokenSelectedValuesDefinition } from \"../EasyFilterBarContainer\";\nimport type EasyFilterToken from \"../Token\";\ntype codeListType = PropertyMetadata[\"codeList\"];\nclass MenuWithCheckBoxFactory extends BaseFactory<List> {\n\tprivate selectionList: number[] = [];\n\n\tprivate okButtonClicked = false;\n\n\tconstructor(EFB: EnhanceWithUI5<EasyFilterBarContainer>, token: EnhanceWithUI5<EasyFilterToken>) {\n\t\tconst ListSeparators = library.ListSeparators;\n\t\tconst ListMode = library.ListMode;\n\t\tsuper(EFB, token);\n\t\tthis.setControl(\n\t\t\tnew List({\n\t\t\t\tmode: ListMode.MultiSelect,\n\t\t\t\tshowSeparators: ListSeparators.None\n\t\t\t})\n\t\t);\n\t}\n\n\tasync setItems(newItems: codeListType, allSelectedValues: TokenDefinition[\"keySpecificSelectedValues\"]): Promise<void> {\n\t\tif (await Utils.areCodeListsSame(newItems, this.getItems() as codeListType)) {\n\t\t\treturn;\n\t\t}\n\t\tconst list: List | undefined = this.getControl();\n\n\t\tthis.items = (await Utils.getCodeListArray(newItems)) as finalCodeListType[];\n\t\tlist?.destroyAggregation(\"items\");\n\t\tthis.selectionList = [];\n\t\tthis.items.forEach((item, idx) => {\n\t\t\tlet selectState = false;\n\t\t\t//Value should either be string, number or boolean.\n\t\t\tif (allSelectedValues.length > 0 && allSelectedValues[0].selectedValues.length > 0) {\n\t\t\t\tconst firstValue = allSelectedValues[0].selectedValues[0];\n\t\t\t\tif (typeof firstValue === \"string\" && typeof item.value === \"string\") {\n\t\t\t\t\t// Assert selectedValues as string[]\n\t\t\t\t\tif ((allSelectedValues[0].selectedValues as string[]).includes(item.value)) {\n\t\t\t\t\t\tselectState = true;\n\t\t\t\t\t\tthis.selectionList?.push(idx);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof firstValue === \"boolean\" && typeof item.value === \"boolean\") {\n\t\t\t\t\t// Assert selectedValues as boolean[]\n\t\t\t\t\tif ((allSelectedValues[0].selectedValues as boolean[]).includes(item.value)) {\n\t\t\t\t\t\tselectState = true;\n\t\t\t\t\t\tthis.selectionList?.push(idx);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof firstValue === \"number\" && typeof item.value === \"number\") {\n\t\t\t\t\t// Assert selectedValues as number[]\n\t\t\t\t\tif ((allSelectedValues[0].selectedValues as number[]).includes(item.value)) {\n\t\t\t\t\t\tselectState = true;\n\t\t\t\t\t\tthis.selectionList?.push(idx);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlist?.addItem(\n\t\t\t\tnew StandardListItem({\n\t\t\t\t\ttitle: item.description,\n\t\t\t\t\tselected: selectState,\n\t\t\t\t\tcustomData: [\n\t\t\t\t\t\t//Saving the value inside the CustomData, because at the end we would be exposing the values to the consumer not the description\n\t\t\t\t\t\tnew CustomData({\n\t\t\t\t\t\t\tkey: \"value\",\n\t\t\t\t\t\t\tvalue: item.value\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t);\n\t\t});\n\t}\n\n\tinvokeOkButtonHandler(): void {\n\t\tif (this.areSelectListSame()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.selectionList = this.getSelectedIndices();\n\t\tthis.okButtonClicked = true;\n\t\tconst listItems: StandardListItem[] | undefined = this.getControl()?.getSelectedItems() as StandardListItem[];\n\t\tconst easyFilterBarContainer = this.getEasyFilter() as EasyFilterBarContainer;\n\t\tlet allSelectedValues: TokenSelectedValuesDefinition[] = [\n\t\t\t{\n\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\tselectedValues: []\n\t\t\t}\n\t\t];\n\t\tconst { key } = this.getToken()?.getCustomDataValue(\"TokenInfo\") as TokenDefinition;\n\t\tlistItems.forEach((item) => {\n\t\t\tconst value: string | number | boolean | undefined = item\n\t\t\t\t.getCustomData()\n\t\t\t\t.find((customData: CustomData) => customData.getKey() === \"value\")\n\t\t\t\t?.getValue() as string | number | boolean;\n\n\t\t\tif (value !== undefined) {\n\t\t\t\t// Check the type of value and the contents of selectedValues\n\t\t\t\tif (Array.isArray(allSelectedValues[0].selectedValues)) {\n\t\t\t\t\tconst selectedValues = allSelectedValues[0].selectedValues;\n\t\t\t\t\tif (\n\t\t\t\t\t\t(typeof value === \"string\" && selectedValues.every((val): val is string => typeof val === \"string\")) ||\n\t\t\t\t\t\t(typeof value === \"boolean\" && selectedValues.every((val): val is boolean => typeof val === \"boolean\")) ||\n\t\t\t\t\t\t(typeof value === \"number\" && selectedValues.every((val): val is number => typeof val === \"number\"))\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Push the value only if all selectedValues are of the same type\n\t\t\t\t\t\t(selectedValues as Array<typeof value>).push(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tallSelectedValues = allSelectedValues[0].selectedValues.length === 0 ? [] : allSelectedValues;\n\t\teasyFilterBarContainer.updateTokenArray(\"setSelectedValues\", allSelectedValues, key);\n\t}\n\n\tareSelectListSame(): boolean {\n\t\t//The below case would get applicable in mandatory tokens case where no value has been set\n\t\tconst tempSelectList = this.getSelectedIndices();\n\t\tif (this.selectionList.length === 0 || tempSelectList.length !== this.selectionList.length) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.selectionList.every((item, idx) => tempSelectList[idx] === item);\n\t}\n\n\tinvokePopupCloseHandler(): void {\n\t\tif (this.okButtonClicked) {\n\t\t\tthis.okButtonClicked = false;\n\t\t\treturn;\n\t\t}\n\t\tthis.okButtonClicked = false;\n\t\tthis.getControl()?.removeSelections();\n\t\tthis.selectionList?.forEach((idx) => this.getControl()?.getItems()[idx].setSelected(true));\n\t}\n\n\tsetSelectList(): void {\n\t\tthis.selectionList = [];\n\t\tconst listItems: StandardListItem[] = this.getControl()?.getSelectedItems() as StandardListItem[];\n\t\tlistItems?.forEach((item) => this.selectionList?.push(this.getControl()?.indexOfItem(item) as number));\n\t}\n\n\tgetSelectedIndices(): number[] {\n\t\tconst selectionList: number[] = [];\n\t\tconst listItems: StandardListItem[] = this.getControl()?.getSelectedItems() as StandardListItem[];\n\t\tlistItems?.forEach((item) => selectionList?.push(this.getControl()?.indexOfItem(item) as number));\n\t\treturn selectionList;\n\t}\n}\n\nexport default MenuWithCheckBoxFactory;\n"],"mappings":";;;;qeAcMA,EAAuB,SAAAC,GAK5B,SAAAD,EAAYE,EAA6CC,GAAwC,IAAAC,EAChG,MAAMC,EAAiBC,EAAQD,eAC/B,MAAME,EAAWD,EAAQC,SACzBH,EAAAH,EAAAO,KAAAC,KAAMP,EAAKC,IAAMM,KAACL,EAPXM,cAA0B,GAAEN,EAE5BO,gBAAkB,MAMzBP,EAAKQ,WACJ,IAAIC,EAAK,CACRC,KAAMP,EAASQ,YACfC,eAAgBX,EAAeY,QAE/B,OAAAb,CACH,CAACc,EAAAlB,EAAAC,GAAA,IAAAkB,EAAAnB,EAAAoB,UAAAD,EAEKE,SAANC,eAAMD,EAASE,EAAwBC,GACtC,SAAUC,EAAMC,iBAAiBH,EAAUd,KAAKkB,YAA6B,CAC5E,MACD,CACA,MAAMC,EAAyBnB,KAAKoB,aAEpCpB,KAAKqB,YAAeL,EAAMM,iBAAiBR,GAC3CK,GAAMI,mBAAmB,SACzBvB,KAAKC,cAAgB,GACrBD,KAAKqB,MAAMG,QAAQ,CAACC,EAAMC,KACzB,IAAIC,EAAc,MAElB,GAAIZ,EAAkBa,OAAS,GAAKb,EAAkB,GAAGc,eAAeD,OAAS,EAAG,CACnF,MAAME,EAAaf,EAAkB,GAAGc,eAAe,GACvD,UAAWC,IAAe,iBAAmBL,EAAKM,QAAU,SAAU,CAErE,GAAKhB,EAAkB,GAAGc,eAA4BG,SAASP,EAAKM,OAAQ,CAC3EJ,EAAc,KACd3B,KAAKC,eAAegC,KAAKP,EAC1B,CACD,MAAO,UAAWI,IAAe,kBAAoBL,EAAKM,QAAU,UAAW,CAE9E,GAAKhB,EAAkB,GAAGc,eAA6BG,SAASP,EAAKM,OAAQ,CAC5EJ,EAAc,KACd3B,KAAKC,eAAegC,KAAKP,EAC1B,CACD,MAAO,UAAWI,IAAe,iBAAmBL,EAAKM,QAAU,SAAU,CAE5E,GAAKhB,EAAkB,GAAGc,eAA4BG,SAASP,EAAKM,OAAQ,CAC3EJ,EAAc,KACd3B,KAAKC,eAAegC,KAAKP,EAC1B,CACD,CACD,CAEAP,GAAMe,QACL,IAAIC,EAAiB,CACpBC,MAAOX,EAAKY,YACZC,SAAUX,EACVY,WAAY,CAEX,IAAIC,EAAW,CACdC,IAAK,QACLV,MAAON,EAAKM,aAMlB,EAACrB,EAEDgC,sBAAA,SAAAA,IACC,GAAI1C,KAAK2C,oBAAqB,CAC7B,MACD,CACA3C,KAAKC,cAAgBD,KAAK4C,qBAC1B5C,KAAKE,gBAAkB,KACvB,MAAM2C,EAA4C7C,KAAKoB,cAAc0B,mBACrE,MAAMC,EAAyB/C,KAAKgD,gBACpC,IAAIjC,EAAqD,CACxD,CACCkC,SAAUC,EAAeC,GACzBtB,eAAgB,KAGlB,MAAMY,IAAEA,GAAQzC,KAAKoD,YAAYC,mBAAmB,aACpDR,EAAUrB,QAASC,IAClB,MAAMM,EAA+CN,EACnD6B,gBACAC,KAAMhB,GAA2BA,EAAWiB,WAAa,UACxDC,WAEH,GAAI1B,IAAU2B,UAAW,CAExB,GAAIC,MAAMC,QAAQ7C,EAAkB,GAAGc,gBAAiB,CACvD,MAAMA,EAAiBd,EAAkB,GAAGc,eAC5C,UACSE,IAAU,UAAYF,EAAegC,MAAOC,UAA8BA,IAAQ,kBAClF/B,IAAU,WAAaF,EAAegC,MAAOC,UAA+BA,IAAQ,mBACpF/B,IAAU,UAAYF,EAAegC,MAAOC,UAA8BA,IAAQ,UACzF,CAEAjC,EAAuCI,KAAKF,EAC9C,CACD,CACD,IAGDhB,EAAoBA,EAAkB,GAAGc,eAAeD,SAAW,EAAI,GAAKb,EAC5EgC,EAAuBgB,iBAAiB,oBAAqBhD,EAAmB0B,EACjF,EAAC/B,EAEDiC,kBAAA,SAAAA,IAEC,MAAMqB,EAAiBhE,KAAK4C,qBAC5B,GAAI5C,KAAKC,cAAc2B,SAAW,GAAKoC,EAAepC,SAAW5B,KAAKC,cAAc2B,OAAQ,CAC3F,OAAO,KACR,CACA,OAAO5B,KAAKC,cAAc4D,MAAM,CAACpC,EAAMC,IAAQsC,EAAetC,KAASD,EACxE,EAACf,EAEDuD,wBAAA,SAAAA,IACC,GAAIjE,KAAKE,gBAAiB,CACzBF,KAAKE,gBAAkB,MACvB,MACD,CACAF,KAAKE,gBAAkB,MACvBF,KAAKoB,cAAc8C,mBACnBlE,KAAKC,eAAeuB,QAASE,GAAQ1B,KAAKoB,cAAcF,WAAWQ,GAAKyC,YAAY,MACrF,EAACzD,EAED0D,cAAA,SAAAA,IACCpE,KAAKC,cAAgB,GACrB,MAAM4C,EAAgC7C,KAAKoB,cAAc0B,mBACzDD,GAAWrB,QAASC,GAASzB,KAAKC,eAAegC,KAAKjC,KAAKoB,cAAciD,YAAY5C,IACtF,EAACf,EAEDkC,mBAAA,SAAAA,IACC,MAAM3C,EAA0B,GAChC,MAAM4C,EAAgC7C,KAAKoB,cAAc0B,mBACzDD,GAAWrB,QAASC,GAASxB,GAAegC,KAAKjC,KAAKoB,cAAciD,YAAY5C,KAChF,OAAOxB,CACR,EAAC,OAAAV,CAAA,CA3I2B,CAAS+E,GAAW,OA8IlC/E,CAAuB","ignoreList":[]}