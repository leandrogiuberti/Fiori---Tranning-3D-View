{"version":3,"file":"ConsoleErrorChecker.js","names":["wrapPatterns","pattern","RegExp","message","match","includes","GLOBALLY_ACCEPTED_ERRORS","map","ConsoleErrorChecker","window","this","matchers","messages","observer","MutationObserver","mutations","opaFrame","reduce","iFrame","mutation","node","Array","from","addedNodes","Element","element","querySelector","HTMLIFrameElement","contentWindow","prepareWindow","QUnit","moduleStart","observe","document","body","childList","moduleDone","disconnect","testStart","reset","log","handleFailedMessages","karma","__karma__","search","URLSearchParams","location","urlParam","get","isStrict","config","ui5","strictconsoleerrors","_proto","prototype","failedMessages","length","assert","pushResult","result","source","actual","expected","setAcceptedErrorPatterns","patterns","concat","checkAndLog","type","_len","arguments","data","_key","messageText","isAllowed","some","matcher","push","wrappedData","d","_this","console","patchConsoleMethod","method","fnOriginal","_len2","_key2","apply","condition","undefined","_len3","_key3","first","unshift","error","onPromiseRejection","event","reason","stack","onError","filename","addEventListener","bind","passive","getInstance","sapFEConsoleErrorChecker"],"sources":["./ConsoleErrorChecker.ts"],"sourcesContent":["type MessageMatcherFunction = (message: string) => boolean;\ntype Karma = {\n\tlog: (level: any, ...data: any[]) => void;\n\tconfig: {\n\t\tui5?: {\n\t\t\tconfig: {\n\t\t\t\tstrictconsoleerrors?: boolean; // Karma options are all lowercase at runtime!\n\t\t\t};\n\t\t};\n\t};\n};\n\nfunction wrapPatterns(pattern: RegExp | string): MessageMatcherFunction {\n\tif (pattern instanceof RegExp) {\n\t\treturn (message) => message.match(pattern) !== null;\n\t} else {\n\t\treturn (message) => message.includes(pattern);\n\t}\n}\n\n/**\n * List of error message patterns that are always accepted.\n */\nconst GLOBALLY_ACCEPTED_ERRORS = [\n\t/library-preload\\.(json|js)/, // accept errors related to files that are not there when running from source to prevent false positives\n\t\"/resources/sap/fe/macros/manifest.json\" // see above\n].map(wrapPatterns);\n\nclass ConsoleErrorChecker {\n\tprivate matchers: MessageMatcherFunction[] = [];\n\n\tprivate messages: string[] = [];\n\n\tprivate readonly karma: Karma | undefined;\n\n\tprivate readonly isStrict: boolean;\n\n\tprivate readonly observer = new MutationObserver((mutations) => {\n\t\tconst opaFrame = mutations.reduce((iFrame: HTMLIFrameElement | null, mutation: MutationRecord) => {\n\t\t\tif (iFrame !== null) {\n\t\t\t\treturn iFrame;\n\t\t\t}\n\n\t\t\tfor (const node of Array.from(mutation.addedNodes)) {\n\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\tconst element = node.querySelector(\"#OpaFrame\");\n\t\t\t\t\tif (element instanceof HTMLIFrameElement && element.contentWindow) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn iFrame;\n\t\t}, null);\n\n\t\tif (opaFrame && opaFrame.contentWindow) {\n\t\t\tthis.prepareWindow(opaFrame.contentWindow);\n\t\t}\n\t});\n\n\tconstructor(window: Window & { __karma__?: Karma }) {\n\t\tQUnit.moduleStart(() => {\n\t\t\tthis.observer.observe(window.document.body, { childList: true });\n\t\t});\n\n\t\tQUnit.moduleDone(() => {\n\t\t\tthis.observer.disconnect();\n\t\t});\n\n\t\tQUnit.testStart(() => {\n\t\t\tthis.reset();\n\t\t});\n\n\t\tQUnit.log(() => {\n\t\t\tthis.handleFailedMessages();\n\t\t});\n\n\t\tthis.karma = window.__karma__;\n\n\t\t// either go for Karma config option \"ui5.config.strictConsoleErrors\" or use URL query parameter \"strict\"\n\t\tconst search = new URLSearchParams(window.location.search);\n\t\tconst urlParam = search.get(\"strictConsoleErrors\");\n\t\tif (urlParam !== null) {\n\t\t\tthis.isStrict = urlParam === \"true\";\n\t\t} else {\n\t\t\tthis.isStrict = this.karma?.config.ui5?.config.strictconsoleerrors ?? false;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\n\tprivate handleFailedMessages() {\n\t\tconst failedMessages = this.messages;\n\t\tthis.messages = [];\n\n\t\tif (failedMessages.length > 0) {\n\t\t\tQUnit.assert.pushResult({\n\t\t\t\tresult: false,\n\t\t\t\tsource: \"FE Console Log Check\",\n\t\t\t\tmessage: `There were ${failedMessages.length} unexpected console errors`,\n\t\t\t\tactual: failedMessages,\n\t\t\t\texpected: []\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate reset() {\n\t\tthis.messages = [];\n\n\t\t// this sets the default to apply if no allowed patterns are set via setAcceptedErrorPatterns().\n\t\tif (this.isStrict) {\n\t\t\tthis.matchers = GLOBALLY_ACCEPTED_ERRORS;\n\t\t} else {\n\t\t\tthis.matchers = [() => true];\n\t\t}\n\t}\n\n\tsetAcceptedErrorPatterns(patterns?: (RegExp | string)[]) {\n\t\tif (!patterns || patterns.length === 0) {\n\t\t\tthis.matchers = GLOBALLY_ACCEPTED_ERRORS;\n\t\t} else {\n\t\t\tthis.matchers = patterns.map(wrapPatterns).concat(GLOBALLY_ACCEPTED_ERRORS);\n\t\t}\n\t}\n\n\tprivate checkAndLog(type: any, ...data: any[]) {\n\t\t// only check the error messages\n\t\tif (type === \"error\") {\n\t\t\tconst messageText = data[0];\n\t\t\tconst isAllowed = this.matchers.some((matcher) => matcher(messageText));\n\t\t\tif (!isAllowed) {\n\t\t\t\tthis.messages.push(messageText);\n\t\t\t}\n\t\t}\n\n\t\tif (this.karma) {\n\t\t\t// wrap the data to facilitate parsing in the backend\n\t\t\tconst wrappedData = data.map((d) => [d]);\n\t\t\tthis.karma.log(type, wrappedData);\n\t\t}\n\t}\n\n\tprivate prepareWindow(window: Window) {\n\t\tconst console: Console = (window as any).console;\n\n\t\t// capture console.log(), console.debug(), etc.\n\t\tconst patchConsoleMethod = (method: \"log\" | \"info\" | \"warn\" | \"error\" | \"debug\") => {\n\t\t\tconst fnOriginal = console[method];\n\t\t\tconsole[method] = (...data: any[]): void => {\n\t\t\t\tthis.checkAndLog(method, ...data);\n\t\t\t\treturn fnOriginal.apply(console, data);\n\t\t\t};\n\t\t};\n\n\t\tpatchConsoleMethod(\"log\");\n\t\tpatchConsoleMethod(\"debug\");\n\t\tpatchConsoleMethod(\"info\");\n\t\tpatchConsoleMethod(\"warn\");\n\t\tpatchConsoleMethod(\"error\");\n\n\t\t// capture console.assert()\n\t\t// see https://console.spec.whatwg.org/#assert\n\t\tconsole.assert = function (condition = false, ...data: any[]) {\n\t\t\tif (condition) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = \"Assertion failed\";\n\t\t\tif (data.length === 0) {\n\t\t\t\tdata.push(message);\n\t\t\t} else {\n\t\t\t\tlet first = data[0];\n\t\t\t\tif (typeof first !== \"string\") {\n\t\t\t\t\tdata.unshift(message);\n\t\t\t\t} else {\n\t\t\t\t\tfirst = `${message}: ${first}`;\n\t\t\t\t\tdata[0] = first;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.error(...data);\n\t\t};\n\n\t\t// capture errors\n\t\tfunction onPromiseRejection(this: ConsoleErrorChecker, event: PromiseRejectionEvent) {\n\t\t\tconst message = `UNHANDLED PROMISE REJECTION: ${event.reason}`;\n\t\t\tthis.checkAndLog(\"error\", message, event.reason?.stack);\n\t\t}\n\n\t\tfunction onError(this: ConsoleErrorChecker, event: ErrorEvent) {\n\t\t\tconst message = event.message;\n\t\t\tthis.checkAndLog(\"error\", message, event.filename);\n\t\t}\n\n\t\twindow.addEventListener(\"error\", onError.bind(this), { passive: true });\n\t\twindow.addEventListener(\"unhandledrejection\", onPromiseRejection.bind(this), { passive: true });\n\t}\n\n\tstatic getInstance(window: Window & { sapFEConsoleErrorChecker?: ConsoleErrorChecker }): ConsoleErrorChecker {\n\t\t// the global instance is needed to support multiple tests in a row (in Karma)\n\t\tif (!window.sapFEConsoleErrorChecker) {\n\t\t\twindow.sapFEConsoleErrorChecker = new ConsoleErrorChecker(window);\n\t\t}\n\t\treturn window.sapFEConsoleErrorChecker;\n\t}\n}\n\nexport default ConsoleErrorChecker.getInstance(window);\n"],"mappings":"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","ignoreList":[]}