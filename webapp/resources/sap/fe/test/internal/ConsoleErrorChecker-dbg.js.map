{"version":3,"names":["wrapPatterns","pattern","RegExp","message","match","includes","GLOBALLY_ACCEPTED_ERRORS","map","ConsoleErrorChecker","window","matchers","messages","observer","MutationObserver","mutations","opaFrame","reduce","iFrame","mutation","node","Array","from","addedNodes","Element","element","querySelector","HTMLIFrameElement","contentWindow","prepareWindow","QUnit","moduleStart","observe","document","body","childList","moduleDone","disconnect","testStart","reset","log","handleFailedMessages","karma","__karma__","search","URLSearchParams","location","urlParam","get","isStrict","config","ui5","strictconsoleerrors","_proto","prototype","failedMessages","length","assert","pushResult","result","source","actual","expected","setAcceptedErrorPatterns","patterns","concat","checkAndLog","type","_len","arguments","data","_key","messageText","isAllowed","some","matcher","push","wrappedData","d","_this","console","patchConsoleMethod","method","fnOriginal","_len2","_key2","apply","condition","undefined","_len3","_key3","first","unshift","error","onPromiseRejection","event","reason","stack","onError","filename","addEventListener","bind","passive","getInstance","sapFEConsoleErrorChecker"],"sourceRoot":".","sources":["ConsoleErrorChecker.ts"],"sourcesContent":["type MessageMatcherFunction = (message: string) => boolean;\ntype Karma = {\n\tlog: (level: any, ...data: any[]) => void;\n\tconfig: {\n\t\tui5?: {\n\t\t\tconfig: {\n\t\t\t\tstrictconsoleerrors?: boolean; // Karma options are all lowercase at runtime!\n\t\t\t};\n\t\t};\n\t};\n};\n\nfunction wrapPatterns(pattern: RegExp | string): MessageMatcherFunction {\n\tif (pattern instanceof RegExp) {\n\t\treturn (message) => message.match(pattern) !== null;\n\t} else {\n\t\treturn (message) => message.includes(pattern);\n\t}\n}\n\n/**\n * List of error message patterns that are always accepted.\n */\nconst GLOBALLY_ACCEPTED_ERRORS = [\n\t/library-preload\\.(json|js)/, // accept errors related to files that are not there when running from source to prevent false positives\n\t\"/resources/sap/fe/macros/manifest.json\" // see above\n].map(wrapPatterns);\n\nclass ConsoleErrorChecker {\n\tprivate matchers: MessageMatcherFunction[] = [];\n\n\tprivate messages: string[] = [];\n\n\tprivate readonly karma: Karma | undefined;\n\n\tprivate readonly isStrict: boolean;\n\n\tprivate readonly observer = new MutationObserver((mutations) => {\n\t\tconst opaFrame = mutations.reduce((iFrame: HTMLIFrameElement | null, mutation: MutationRecord) => {\n\t\t\tif (iFrame !== null) {\n\t\t\t\treturn iFrame;\n\t\t\t}\n\n\t\t\tfor (const node of Array.from(mutation.addedNodes)) {\n\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\tconst element = node.querySelector(\"#OpaFrame\");\n\t\t\t\t\tif (element instanceof HTMLIFrameElement && element.contentWindow) {\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn iFrame;\n\t\t}, null);\n\n\t\tif (opaFrame && opaFrame.contentWindow) {\n\t\t\tthis.prepareWindow(opaFrame.contentWindow);\n\t\t}\n\t});\n\n\tconstructor(window: Window & { __karma__?: Karma }) {\n\t\tQUnit.moduleStart(() => {\n\t\t\tthis.observer.observe(window.document.body, { childList: true });\n\t\t});\n\n\t\tQUnit.moduleDone(() => {\n\t\t\tthis.observer.disconnect();\n\t\t});\n\n\t\tQUnit.testStart(() => {\n\t\t\tthis.reset();\n\t\t});\n\n\t\tQUnit.log(() => {\n\t\t\tthis.handleFailedMessages();\n\t\t});\n\n\t\tthis.karma = window.__karma__;\n\n\t\t// either go for Karma config option \"ui5.config.strictConsoleErrors\" or use URL query parameter \"strict\"\n\t\tconst search = new URLSearchParams(window.location.search);\n\t\tconst urlParam = search.get(\"strictConsoleErrors\");\n\t\tif (urlParam !== null) {\n\t\t\tthis.isStrict = urlParam === \"true\";\n\t\t} else {\n\t\t\tthis.isStrict = this.karma?.config.ui5?.config.strictconsoleerrors ?? false;\n\t\t}\n\n\t\tthis.reset();\n\t}\n\n\tprivate handleFailedMessages() {\n\t\tconst failedMessages = this.messages;\n\t\tthis.messages = [];\n\n\t\tif (failedMessages.length > 0) {\n\t\t\tQUnit.assert.pushResult({\n\t\t\t\tresult: false,\n\t\t\t\tsource: \"FE Console Log Check\",\n\t\t\t\tmessage: `There were ${failedMessages.length} unexpected console errors`,\n\t\t\t\tactual: failedMessages,\n\t\t\t\texpected: []\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate reset() {\n\t\tthis.messages = [];\n\n\t\t// this sets the default to apply if no allowed patterns are set via setAcceptedErrorPatterns().\n\t\tif (this.isStrict) {\n\t\t\tthis.matchers = GLOBALLY_ACCEPTED_ERRORS;\n\t\t} else {\n\t\t\tthis.matchers = [() => true];\n\t\t}\n\t}\n\n\tsetAcceptedErrorPatterns(patterns?: (RegExp | string)[]) {\n\t\tif (!patterns || patterns.length === 0) {\n\t\t\tthis.matchers = GLOBALLY_ACCEPTED_ERRORS;\n\t\t} else {\n\t\t\tthis.matchers = patterns.map(wrapPatterns).concat(GLOBALLY_ACCEPTED_ERRORS);\n\t\t}\n\t}\n\n\tprivate checkAndLog(type: any, ...data: any[]) {\n\t\t// only check the error messages\n\t\tif (type === \"error\") {\n\t\t\tconst messageText = data[0];\n\t\t\tconst isAllowed = this.matchers.some((matcher) => matcher(messageText));\n\t\t\tif (!isAllowed) {\n\t\t\t\tthis.messages.push(messageText);\n\t\t\t}\n\t\t}\n\n\t\tif (this.karma) {\n\t\t\t// wrap the data to facilitate parsing in the backend\n\t\t\tconst wrappedData = data.map((d) => [d]);\n\t\t\tthis.karma.log(type, wrappedData);\n\t\t}\n\t}\n\n\tprivate prepareWindow(window: Window) {\n\t\tconst console: Console = (window as any).console;\n\n\t\t// capture console.log(), console.debug(), etc.\n\t\tconst patchConsoleMethod = (method: \"log\" | \"info\" | \"warn\" | \"error\" | \"debug\") => {\n\t\t\tconst fnOriginal = console[method];\n\t\t\tconsole[method] = (...data: any[]): void => {\n\t\t\t\tthis.checkAndLog(method, ...data);\n\t\t\t\treturn fnOriginal.apply(console, data);\n\t\t\t};\n\t\t};\n\n\t\tpatchConsoleMethod(\"log\");\n\t\tpatchConsoleMethod(\"debug\");\n\t\tpatchConsoleMethod(\"info\");\n\t\tpatchConsoleMethod(\"warn\");\n\t\tpatchConsoleMethod(\"error\");\n\n\t\t// capture console.assert()\n\t\t// see https://console.spec.whatwg.org/#assert\n\t\tconsole.assert = function (condition = false, ...data: any[]) {\n\t\t\tif (condition) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = \"Assertion failed\";\n\t\t\tif (data.length === 0) {\n\t\t\t\tdata.push(message);\n\t\t\t} else {\n\t\t\t\tlet first = data[0];\n\t\t\t\tif (typeof first !== \"string\") {\n\t\t\t\t\tdata.unshift(message);\n\t\t\t\t} else {\n\t\t\t\t\tfirst = `${message}: ${first}`;\n\t\t\t\t\tdata[0] = first;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.error(...data);\n\t\t};\n\n\t\t// capture errors\n\t\tfunction onPromiseRejection(this: ConsoleErrorChecker, event: PromiseRejectionEvent) {\n\t\t\tconst message = `UNHANDLED PROMISE REJECTION: ${event.reason}`;\n\t\t\tthis.checkAndLog(\"error\", message, event.reason?.stack);\n\t\t}\n\n\t\tfunction onError(this: ConsoleErrorChecker, event: ErrorEvent) {\n\t\t\tconst message = event.message;\n\t\t\tthis.checkAndLog(\"error\", message, event.filename);\n\t\t}\n\n\t\twindow.addEventListener(\"error\", onError.bind(this), { passive: true });\n\t\twindow.addEventListener(\"unhandledrejection\", onPromiseRejection.bind(this), { passive: true });\n\t}\n\n\tstatic getInstance(window: Window & { sapFEConsoleErrorChecker?: ConsoleErrorChecker }): ConsoleErrorChecker {\n\t\t// the global instance is needed to support multiple tests in a row (in Karma)\n\t\tif (!window.sapFEConsoleErrorChecker) {\n\t\t\twindow.sapFEConsoleErrorChecker = new ConsoleErrorChecker(window);\n\t\t}\n\t\treturn window.sapFEConsoleErrorChecker;\n\t}\n}\n\nexport default ConsoleErrorChecker.getInstance(window);\n"],"mappings":"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","ignoreList":[],"file":"ConsoleErrorChecker-dbg.js"}