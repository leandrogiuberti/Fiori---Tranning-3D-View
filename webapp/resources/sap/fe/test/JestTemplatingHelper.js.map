{"version":3,"file":"JestTemplatingHelper.js","names":["Log","setLevel","jest","setTimeout","nameSpaceMap","macro","macroShare","macros","feBB","macroField","macrodata","log","customData","control","controls","core","dt","m","f","fl","internalMacro","mdc","actiontoolbar","mdcField","mdcTable","u","uxap","macroMicroChart","microChart","macroTable","mdcvc","mdcv","valueHelp","contentSwitcher","filterBar","draftIndicator","visualFilter","fieldhelp","reveseNamespaceMap","Object","keys","reduce","reverseMap","currentName","select","xpath","useNamespaces","defaultFakeSideEffectService","computeFieldGroupIds","_getTemplatedSelector","xmldom","selector","rootPath","nodeName","startsWith","async","_buildPreProcessorSettings","sMetadataUrl","mBindingContexts","mModels","fakeSideEffectService","oMetaModel","getMetaModel","hasOwnProperty","assign","converterContext","TemplateModel","forEach","sModelName","isTemplateModel","data","settings","models","metaModel","bindingContexts","appComponent","getSideEffectsService","fn","getDiagnostics","undefined","getShellServices","getManifestEntry","mockReturnValue","sKey","expect","getObject","toBeDefined","oModel","createBindingContext","_loadResourceView","viewName","name","replace","view","LoaderExtensions","loadResource","documentElement","runXPathQuery","extend","toHaveControl","nodes","message","outputXml","serializeXML","pass","length","toNotHaveControl","toHaveTemplatingErrors","xml","xmlText","base64Entries","match","errorMessages","map","atob","slice","join","_exports","formatBuildingBlockXML","xmlString","Array","isArray","formatXML","getControlAttribute","controlSelector","attributeName","xmlDom","serializer","window","XMLSerializer","node","serializeToString","START","END","UID","UID2","lines","currentLine","level","attributes","newline","push","repeat","appendAttributes","sort","a","b","localeCompare","includes","attribute","value","append","parser","read","createParser","onOpenTagStart","onOpenTagName","onAttrName","unshift","onAttrValue","onOpenTagEnd","selfClosed","onCloseTagStart","onCloseTagName","onCloseTagEnd","parse","trim","compileCDS","cdsUrl","options","arguments","cdsString","fs","readFileSync","edmxContent","cds2edmx","dir","path","resolve","allOptions","entries","edmxFileName","filename","_ref","optionKey","optionValue","toString","basename","edmxFilePath","mkdirSync","recursive","writeFileSync","cds","service","sources","require","csn","compiler","compileSources","edmxOptions","odataForeignKeys","odataFormat","odataContainment","edmx","to","Error","getFakeSideEffectsService","classNameODataModel","scopeObject","getModel","isA","getServiceUrl","getService","getCapabilities","serviceInstance","SideEffectsFactory","createInstance","scopeType","getInterface","getFakeDiagnostics","issues","addIssue","issueCategory","issueSeverity","details","getIssues","checkIfIssueExists","find","issue","getConverterContextForTest","manifestSettings","convertedTypes","convertTypes","dataModelPath","contextPath","getInvolvedDataModelObjects","entitySet","ConverterContext","ManifestWrapper","metaModelCache","oRequestor","_MetadataRequestor","create","ODataMetaModel","_requestAnnotationChanges","fetchEntityContainer","getDataModelObjectPathForProperty","property","targetPath","startingEntitySet","navigationProperties","targetObject","targetEntitySet","targetEntityType","entityType","contextLocation","evaluateBinding","bindingString","bindingElement","BindingInfo","_len","args","_key","formatter","apply","evaluateBindingWithModel","modelContent","namedModelsContent","_formatters","ValueFormatter","text","InvisibleText","bindProperty","defaultModel","JSONModel","setModel","setBindingContext","content","model","getText","TESTVIEWID","applyFlexChanges","flexChanges","resultXML","querySelectorAll","id","changes","createFlexibilityChangesObject","appId","oManifest","type","crossNavigation","outbounds","oAppComponent","getComponentData","getManifestObject","getEntry","getLocalId","sId","spyOn","AppStorage","Promise","Loader","Component","Utils","FlexState","initialize","componentId","XmlPreprocessor","process","changesApplied","getChangesFromXML","toBe","variantDependentControlChanges","flatMap","e","filter","attr","getTemplatingResult","xmlInput","createMockResourceModel","templatedXml","DOMParser","xmlDoc","parseFromString","oPreprocessorSettings","XMLPreprocessor","firstElementChild","getTemplatedXML","jsx","defineXMLNamespaceMap","templatedXML","serialiedXML","not","processView","oViewDocument","oPreprocessedView","asElement","asString","outerHTML","processFragment","testData","inputXml","inputDoc","jsonModel","setData","resultDoc","fragments","getElementsByTagName","fragment","innerHTML","xmlResult","children","serializeControl","controlToSerialize","showCustomStyleClasses","tabCount","CONTROLID","getTab","toAdd","tab","i","serializeDelegate","start","sAggregationName","controlDetail","getParent","indexInParent","getAggregation","indexOf","getMetadata","getName","end","middle","getId","ManagedObjectMetadata","isGeneratedId","oControlKey","mProperties","propertyValue","JSON","stringify","mBindingInfos","bindingDetail","oOutputFormat","binding","mAssociations","associationValue","associationValueElement","aCustomStyleClasses","mEventRegistry","startAggregation","sName","out","endAggregation","controlToRender","Serializer","serialize","serializeControlAsXML","preferValue","definedNamespaces","getNamespaceAlias","className","namesSplit","split","namespace","namespaceAlias","nameFull","hasAggregation","mAggregationsKey","mAggregations","propName","concat","uniqueKeys","Set","from","template","fFunction","outXML","createAwaiter","fnResolve","myPromise","promise","registerMockFragments","_len2","_key2","originalLoadTemplate","XMLTemplateProcessor","loadTemplatePromise","loadTemplateStub","mockImplementation","templateName","extension","parseXMLString","initializeAppComponent","viewLevel","ODataModel","prototype","cdsFile","__dirname","guid","uid","cdsContent","jestUI5","mockUrl","pageContent","PageController","DefaultPageContent","_PageController","this","_inheritsLoose","_proto","render","_jsx","Page","sap","ui","define","_AppComponent","AppComponent","metadata","manifest","title","dataSources","mainService","uri","odataVersion","dataSource","routing","targets","Default","mainContextPath","viewType","viewContent","routes","pattern","target","feManifestSettings","mockAppComponent","initialized","v","getRouter","getTarget","load","templateComponent","object","findElement","collection","element","item","waitForEvent","eventName","attachEventOnce","event","keepBindingStringForTest","enabled","BindingParser","_keepBindingStrings","delayFor","delay"],"sources":["./JestTemplatingHelper.tsx"],"sourcesContent":["import type { AnyAnnotation, ConvertedMetadata, EntitySet, Property } from \"@sap-ux/vocabularies-types\";\nimport compiler from \"@sap/cds-compiler\";\nimport * as fs from \"fs\";\nimport type { Range, Ranges } from \"htmljs-parser\";\nimport { createParser } from \"htmljs-parser\";\nimport * as path from \"path\";\nimport Log from \"sap/base/Log\";\nimport LoaderExtensions from \"sap/base/util/LoaderExtensions\";\nimport uid from \"sap/base/util/uid\";\nimport jsx from \"sap/fe/base/jsx-runtime/jsx\";\nimport AppComponent from \"sap/fe/core/AppComponent\";\nimport PageController from \"sap/fe/core/PageController\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport TemplateModel from \"sap/fe/core/TemplateModel\";\nimport { parseXMLString } from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport type { ListReportManifestSettings, ObjectPageManifestSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport ManifestWrapper from \"sap/fe/core/converters/ManifestWrapper\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { IDiagnostics, PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { IssueCategory, IssueSeverity } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport ValueFormatter from \"sap/fe/core/formatters/ValueFormatter\";\nimport type { SideEffectsService } from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport SideEffectsFactory from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { createMockResourceModel } from \"sap/fe/test/UI5MockHelper\";\nimport Page from \"sap/m/Page\";\nimport BindingInfo from \"sap/ui/base/BindingInfo\";\nimport BindingParser from \"sap/ui/base/BindingParser\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type EventProvider from \"sap/ui/base/EventProvider\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type { BaseAggregationBindingInfo } from \"sap/ui/base/ManagedObject\";\nimport ManagedObjectMetadata from \"sap/ui/base/ManagedObjectMetadata\";\nimport Component from \"sap/ui/core/Component\";\nimport type UI5Element from \"sap/ui/core/Element\";\nimport InvisibleText from \"sap/ui/core/InvisibleText\";\nimport type { ManifestContent } from \"sap/ui/core/Manifest\";\nimport XMLTemplateProcessor from \"sap/ui/core/XMLTemplateProcessor\";\nimport XMLPreprocessor from \"sap/ui/core/util/XMLPreprocessor\";\nimport Serializer from \"sap/ui/core/util/serializer/Serializer\";\nimport Utils from \"sap/ui/fl/Utils\";\nimport FlexState from \"sap/ui/fl/apply/_internal/flexState/FlexState\";\nimport Loader from \"sap/ui/fl/initial/_internal/Loader\";\nimport AppStorage from \"sap/ui/fl/initial/_internal/Storage\";\nimport XmlPreprocessor from \"sap/ui/fl/initial/_internal/preprocessors/XmlPreprocessor\";\nimport type Context from \"sap/ui/model/Context\";\nimport type MetaModel from \"sap/ui/model/MetaModel\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport _MetadataRequestor from \"sap/ui/model/odata/v4/lib/_MetadataRequestor\";\nimport xpath from \"xpath\";\nimport { createFlexibilityChangesObject } from \"./JestFlexibilityHelper\";\n\ntype PreProcessorSettingsType = {\n\tmodels: {\n\t\t[name: string]: JSONModel | ODataMetaModel;\n\t};\n\tbindingContexts: {\n\t\t[name: string]: Context | undefined;\n\t};\n};\ntype MockFragment = {\n\tname: string;\n\tcontent: string;\n};\n\ntype JestTemplatedView = {\n\tasElement: Element | undefined;\n\tasString: string;\n};\n\nLog.setLevel(1 as any, \"sap.ui.core.util.XMLPreprocessor\");\njest.setTimeout(40000);\n\nconst nameSpaceMap: Record<string, string> = {\n\tmacro: \"sap.fe.macros\",\n\tmacroShare: \"sap.fe.macros.share\",\n\tmacros: \"sap.fe.macros\",\n\tfeBB: \"sap.fe.core.buildingBlocks.templating\",\n\tmacroField: \"sap.fe.macros.field\",\n\tmacrodata: \"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\",\n\tlog: \"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\",\n\tcustomData: \"http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1\",\n\tcontrol: \"sap.fe.core.controls\",\n\tcontrols: \"sap.fe.macros.controls\",\n\tcore: \"sap.ui.core\",\n\tdt: \"sap.ui.dt\",\n\tm: \"sap.m\",\n\tf: \"sap.ui.layout.form\",\n\tfl: \"sap.ui.fl\",\n\tinternalMacro: \"sap.fe.macros.internal\",\n\tmdc: \"sap.ui.mdc\",\n\tactiontoolbar: \"sap.ui.mdc.actiontoolbar\",\n\tmdcField: \"sap.ui.mdc.field\",\n\tmdcTable: \"sap.ui.mdc.table\",\n\tu: \"sap.ui.unified\",\n\tuxap: \"sap.uxap\",\n\tmacroMicroChart: \"sap.fe.macros.microchart\",\n\tmicroChart: \"sap.suite.ui.microchart\",\n\tmacroTable: \"sap.fe.macros.table\",\n\tmdcvc: \"sap.ui.mdc.valuehelp.content\",\n\tmdcv: \"sap.ui.mdc.valuehelp\",\n\tvalueHelp: \"sap.fe.macros.valueHelp\",\n\tcontentSwitcher: \"sap.fe.macros.contentSwitcher\",\n\tfilterBar: \"sap.fe.macros.filterBar\",\n\tdraftIndicator: \"sap.fe.macros.draftIndicator\",\n\tvisualFilter: \"sap.fe.macros.visualfilters\",\n\tfieldhelp: \"sap.ui.core.fieldhelp\"\n};\nconst reveseNamespaceMap = Object.keys(nameSpaceMap).reduce((reverseMap: Record<string, string>, currentName) => {\n\treverseMap[nameSpaceMap[currentName]] = currentName;\n\treturn reverseMap;\n}, {});\nconst select = xpath.useNamespaces(nameSpaceMap);\n\nconst defaultFakeSideEffectService = { computeFieldGroupIds: () => [] };\n\nfunction _getTemplatedSelector(xmldom: Node, selector: string): string {\n\t/**\n\t * if a root element has been added during the templating by our Jest Templating methods\n\t * the root element is added to the selector path.\n\t */\n\tconst rootPath = \"/root\";\n\treturn `${xmldom.nodeName === \"root\" && !selector.startsWith(rootPath) ? rootPath : \"\"}${selector}`;\n}\n\nasync function _buildPreProcessorSettings(\n\tsMetadataUrl: string | undefined,\n\tmBindingContexts: { [x: string]: string },\n\tmModels: { [x: string]: any },\n\tfakeSideEffectService?: unknown\n): Promise<PreProcessorSettingsType> {\n\tlet oMetaModel: ODataMetaModel | undefined;\n\tif (sMetadataUrl) {\n\t\toMetaModel = await getMetaModel(sMetadataUrl);\n\t\t// To ensure our macro can use #setBindingContext we ensure there is a pre existing JSONModel for converterContext\n\t\t// if not already passed to teh templating\n\t\tif (!mModels.hasOwnProperty(\"converterContext\")) {\n\t\t\tmModels = Object.assign(mModels, { converterContext: new TemplateModel({}, oMetaModel!) });\n\t\t}\n\n\t\tObject.keys(mModels).forEach(function (sModelName) {\n\t\t\tif (mModels[sModelName] && mModels[sModelName].isTemplateModel) {\n\t\t\t\tmModels[sModelName] = new TemplateModel(mModels[sModelName].data, oMetaModel!);\n\t\t\t}\n\t\t});\n\t}\n\n\tconst settings: any = {\n\t\tmodels: Object.assign(\n\t\t\t{\n\t\t\t\tmetaModel: oMetaModel\n\t\t\t},\n\t\t\tmModels\n\t\t),\n\t\tbindingContexts: {},\n\t\tappComponent: {\n\t\t\tgetSideEffectsService: jest.fn(),\n\t\t\tgetDiagnostics: () => undefined,\n\t\t\tgetShellServices: jest.fn(),\n\t\t\tgetManifestEntry: () => undefined\n\t\t}\n\t};\n\n\tsettings.appComponent.getSideEffectsService.mockReturnValue(fakeSideEffectService ?? defaultFakeSideEffectService);\n\t//Inject models and bindingContexts\n\tObject.keys(mBindingContexts).forEach(function (sKey) {\n\t\t/* Assert to make sure the annotations are in the test metadata -> avoid misleading tests */\n\t\texpect(typeof oMetaModel?.getObject(mBindingContexts[sKey])).toBeDefined();\n\t\tconst oModel = mModels[sKey] || oMetaModel;\n\t\tsettings.bindingContexts[sKey] = oModel.createBindingContext(mBindingContexts[sKey]); //Value is sPath\n\t\tsettings.models[sKey] = oModel;\n\t});\n\treturn settings;\n}\n\nfunction _loadResourceView(viewName: string): Element {\n\tconst name = viewName.replace(/\\./g, \"/\") + \".view.xml\";\n\tconst view = LoaderExtensions.loadResource(name);\n\treturn view.documentElement;\n}\n\nexport const runXPathQuery = function (selector: string, xmldom: Node | undefined) {\n\treturn select(selector, xmldom);\n};\n\nexpect.extend({\n\ttoHaveControl(xmldom, selector) {\n\t\tconst nodes = runXPathQuery(_getTemplatedSelector(xmldom, selector), xmldom);\n\t\treturn {\n\t\t\tmessage: () => {\n\t\t\t\tconst outputXml = serializeXML(xmldom);\n\t\t\t\treturn `did not find controls matching ${selector} in generated xml:\\n ${outputXml}`;\n\t\t\t},\n\t\t\tpass: nodes && nodes.length >= 1\n\t\t};\n\t},\n\ttoNotHaveControl(xmldom, selector) {\n\t\tconst nodes = runXPathQuery(_getTemplatedSelector(xmldom, selector), xmldom);\n\t\treturn {\n\t\t\tmessage: () => {\n\t\t\t\tconst outputXml = serializeXML(xmldom);\n\t\t\t\treturn `There is a control matching ${selector} in generated xml:\\n ${outputXml}`;\n\t\t\t},\n\t\t\tpass: nodes && nodes.length === 0\n\t\t};\n\t},\n\t/**\n\t * Checks for errors in `xml` created during templating of an XML string or\n\t * an XML node.\n\t *\n\t * This function checkes for the xml errors created by the\n\t * function [BuildingBlockTemplateProcessor.createErrorXML]{@link sap.fe.core.buildingBlocks.templating.BuildingBlockTemplateProcessor#createErrorXML}.\n\t * @param xml XML String or XML Node to be tested for errors\n\t * @returns Jest Matcher result object\n\t */\n\ttoHaveTemplatingErrors(xml: string | Node) {\n\t\tconst xmlText = typeof xml === \"string\" ? xml : serializeXML(xml);\n\t\tconst base64Entries: string[] = xmlText.match(/BBF\\.base64Decode\\('([^']*)'\\)/gm) || ([] as string[]);\n\t\tconst errorMessages: string[] = base64Entries.map((message: string) => {\n\t\t\tif (message && message.length > 0) {\n\t\t\t\treturn atob(message.match(/('[^']*)/)?.[0]?.slice(1) || \"\");\n\t\t\t}\n\t\t\treturn \"\";\n\t\t});\n\t\tif (errorMessages.length <= 0) {\n\t\t\treturn {\n\t\t\t\tmessage: () => `XML Templating without errors`,\n\t\t\t\tpass: false\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tmessage: () => errorMessages.join(\"\\n\"),\n\t\t\t\tpass: true\n\t\t\t};\n\t\t}\n\t}\n});\n\nexport const formatBuildingBlockXML = function (xmlString: string | string[]): string {\n\tif (Array.isArray(xmlString)) {\n\t\txmlString = xmlString.join(\"\");\n\t}\n\treturn formatXML(xmlString);\n};\n\nexport const getControlAttribute = function (controlSelector: string, attributeName: string, xmlDom: Node) {\n\tconst selector = `string(${_getTemplatedSelector(xmlDom, controlSelector)}/@${attributeName})`;\n\treturn runXPathQuery(selector, xmlDom);\n};\n\n/**\n * Serialize the parts or the complete given XML DOM to string.\n * @param xmlDom DOM node that is to be serialized.\n * @param selector Optional selector of sub nodes\n * @returns XML string\n */\nexport const serializeXML = function (xmlDom: Node, selector?: string) {\n\tconst serializer = new window.XMLSerializer();\n\tlet xmlString: string;\n\tif (selector) {\n\t\tconst nodes = runXPathQuery(selector, xmlDom) as Node[];\n\t\txmlString = nodes.map((node) => serializer.serializeToString(node)).join(\"\\n\");\n\t} else {\n\t\txmlString = serializer.serializeToString(xmlDom);\n\t}\n\treturn formatXML(xmlString);\n};\n\n/**\n * Formats a string containing an XML document.\n *\n * This function only considers XML tags and attributes, ignoring everything else (text, comments). Additionally,\n * attribute values containing a varying UID are replaced with a constant value.\n *\n * An \"XML\" string containing multiple root elements can be.\n * @param xmlString  The input XML string. This function also accepts \"XML\" strings with multiple root elements.\n * @returns The formatted XML string.\n */\nexport const formatXML = function (xmlString: string): string {\n\tconst START = \"<__XML__>\",\n\t\tEND = \"</__XML__>\",\n\t\tUID = /uid--id-\\d{13}-\\d{1,3}/,\n\t\tUID2 = /id-\\d{13}-\\d{1,3}/,\n\t\tlines: string[] = [];\n\n\tlet currentLine = \"\",\n\t\tlevel = -1,\n\t\tattributes: { name: string; value?: string }[] = [];\n\n\tfunction newline() {\n\t\tif (currentLine && currentLine !== START) {\n\t\t\tlines.push(currentLine);\n\t\t}\n\n\t\tcurrentLine = level > 0 ? \"  \".repeat(level) : \"\";\n\t}\n\n\tfunction appendAttributes() {\n\t\tif (attributes.length > 0) {\n\t\t\tattributes = attributes.sort((a, b) => {\n\t\t\t\tif (a.name.startsWith(\"xmlns\") && !b.name.startsWith(\"xmlns\")) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (!a.name.startsWith(\"xmlns\") && b.name.startsWith(\"xmlns\")) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else if (a.name.startsWith(\"xmlns\") && b.name.startsWith(\"xmlns\")) {\n\t\t\t\t\treturn a.name.localeCompare(b.name);\n\t\t\t\t} else if (a.name.includes(\":\") && !b.name.includes(\":\")) {\n\t\t\t\t\treturn -1;\n\t\t\t\t} else if (!a.name.includes(\":\") && b.name.includes(\":\")) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn a.name.localeCompare(b.name);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlevel++;\n\t\t\tfor (const attribute of attributes) {\n\t\t\t\tnewline();\n\t\t\t\tcurrentLine += attribute.name;\n\t\t\t\tif (attribute.value) currentLine += attribute.value;\n\t\t\t}\n\t\t\tlevel--;\n\t\t\tattributes = [];\n\t\t\tnewline();\n\t\t}\n\t}\n\n\tfunction append(data: Range) {\n\t\tcurrentLine += parser.read(data);\n\t}\n\n\tconst parser = createParser({\n\t\tonOpenTagStart(data: Range) {\n\t\t\tnewline();\n\t\t\tappend(data);\n\t\t},\n\n\t\tonOpenTagName: append,\n\n\t\tonAttrName(data: Range) {\n\t\t\tattributes.unshift({ name: parser.read(data) });\n\t\t},\n\n\t\tonAttrValue(data: Ranges.AttrValue) {\n\t\t\tattributes[0].value = parser.read(data).replace(UID, \"uid--id\"); // replace varying UIDs with a constant value\n\t\t\tattributes[0].value = parser.read(data).replace(UID2, \"id\"); // replace varying UIDs with a constant value\n\t\t},\n\n\t\tonOpenTagEnd(data: Ranges.OpenTagEnd) {\n\t\t\tappendAttributes();\n\t\t\tappend(data);\n\t\t\tif (!data.selfClosed) level++;\n\t\t},\n\n\t\tonCloseTagStart(data: Range) {\n\t\t\tlevel--;\n\t\t\tnewline();\n\t\t\tappend(data);\n\t\t},\n\n\t\tonCloseTagName: append,\n\t\tonCloseTagEnd: append\n\t});\n\n\tparser.parse(START + xmlString + END);\n\treturn lines.join(\"\\n\").trim();\n};\n\n/**\n * Compile a CDS file into an EDMX file.\n * @param cdsUrl The path to the file containing the CDS definition. This file must declare the namespace\n * sap.fe.test and a service JestService\n * @param options Options for creating the EDMX output\n * @returns The path of the generated EDMX\n */\nexport const compileCDS = function (cdsUrl: string, options: compiler.ODataOptions = {}) {\n\tconst cdsString = fs.readFileSync(cdsUrl, \"utf-8\");\n\tconst edmxContent = cds2edmx(cdsString, \"sap.fe.test.JestService\", options);\n\tconst dir = path.resolve(cdsUrl, \"..\", \"gen\");\n\n\t// If the caller provided CDS compiler options: Include them in the filename. This prevents unpredictable results if the same CDS source\n\t// file is used simultaneously with a different set of options (e.g. in a test running in parallel)\n\tconst allOptions = Object.entries(options);\n\tallOptions.sort((a, b) => b[0].localeCompare(a[0]));\n\n\tconst edmxFileName =\n\t\tallOptions.reduce(\n\t\t\t(filename, [optionKey, optionValue]) => `${filename}#${optionKey}=${optionValue.toString()}#`,\n\t\t\tpath.basename(cdsUrl).replace(\".cds\", \"\")\n\t\t) + \".xml\";\n\n\tconst edmxFilePath = path.resolve(dir, edmxFileName);\n\n\tfs.mkdirSync(dir, { recursive: true });\n\n\tfs.writeFileSync(edmxFilePath, edmxContent);\n\treturn edmxFilePath;\n};\n\n/**\n * Compile CDS to EDMX.\n * @param cds The CDS model. It must define at least one service.\n * @param service The fully-qualified name of the service to be compiled. Defaults to \"sap.fe.test.JestService\".\n * @param options Options for creating the EDMX output\n * @returns The compiled service model as EDMX.\n */\nexport function cds2edmx(cds: string, service = \"sap.fe.test.JestService\", options: compiler.ODataOptions = {}) {\n\tconst sources: Record<string, string> = { \"source.cds\": cds };\n\n\t// allow to include stuff from @sap/cds/common\n\tif (cds.includes(\"'@sap/cds/common'\")) {\n\t\tsources[\"common.cds\"] = fs.readFileSync(require.resolve(\"@sap/cds/common.cds\"), \"utf-8\");\n\t}\n\n\tconst csn = compiler.compileSources(sources, {});\n\n\tconst edmxOptions: compiler.ODataOptions = {\n\t\todataForeignKeys: true,\n\t\todataFormat: \"structured\",\n\t\todataContainment: true,\n\t\t...options,\n\t\tservice: service\n\t};\n\n\tconst edmx = compiler.to.edmx(csn, edmxOptions);\n\tif (!edmx) {\n\t\tthrow new Error(`Compilation failed. Hint: Make sure that the CDS model defines service ${service}.`);\n\t}\n\treturn edmx;\n}\n\nexport const getFakeSideEffectsService = async function (\n\tmetaModel: ODataMetaModel,\n\tclassNameODataModel = \"sap.ui.model.odata.v4.ODataModel\"\n): Promise<SideEffectsService> {\n\tconst scopeObject = {\n\t\tgetModel: () => {\n\t\t\treturn {\n\t\t\t\tisA: () => classNameODataModel === \"sap.ui.model.odata.v4.ODataModel\",\n\t\t\t\tgetMetaModel: () => {\n\t\t\t\t\treturn metaModel;\n\t\t\t\t},\n\t\t\t\tgetServiceUrl: () => undefined\n\t\t\t};\n\t\t},\n\t\tgetService: () => {\n\t\t\treturn {\n\t\t\t\tgetCapabilities: () => undefined\n\t\t\t};\n\t\t}\n\t};\n\tconst serviceInstance = await new SideEffectsFactory().createInstance({ scopeObject, scopeType: \"\", settings: {} });\n\treturn serviceInstance.getInterface();\n};\n\nexport const getFakeDiagnostics = function (): IDiagnostics {\n\tconst issues: any[] = [];\n\treturn {\n\t\taddIssue(issueCategory: IssueCategory, issueSeverity: IssueSeverity, details: string): void {\n\t\t\tissues.push({\n\t\t\t\tissueCategory,\n\t\t\t\tissueSeverity,\n\t\t\t\tdetails\n\t\t\t});\n\t\t},\n\t\tgetIssues(): any[] {\n\t\t\treturn issues;\n\t\t},\n\t\tcheckIfIssueExists(issueCategory: IssueCategory, issueSeverity: IssueSeverity, details: string): boolean {\n\t\t\treturn issues.find((issue) => {\n\t\t\t\treturn issue.issueCategory === issueCategory && issue.issueSeverity === issueSeverity && issue.details === details;\n\t\t\t});\n\t\t}\n\t};\n};\n\nexport const getConverterContextForTest = function (\n\tmetaModel: ODataMetaModel,\n\tmanifestSettings: ListReportManifestSettings | ObjectPageManifestSettings\n) {\n\tconst convertedTypes = convertTypes(metaModel);\n\tconst dataModelPath = manifestSettings.contextPath\n\t\t? getInvolvedDataModelObjects<PageContextPathTarget>(metaModel.createBindingContext(manifestSettings.contextPath) as Context)\n\t\t: getInvolvedDataModelObjects<PageContextPathTarget>(metaModel.createBindingContext(`/${manifestSettings.entitySet}`));\n\treturn new ConverterContext<PageContextPathTarget>(\n\t\tconvertedTypes,\n\t\tnew ManifestWrapper(manifestSettings),\n\t\tgetFakeDiagnostics(),\n\t\tdataModelPath\n\t);\n};\nconst metaModelCache: any = {};\nexport const getMetaModel = async function (sMetadataUrl: string) {\n\tconst oRequestor = _MetadataRequestor.create({}, \"4.0\", undefined, {}, {}, function () {\n\t\treturn null;\n\t});\n\tif (!metaModelCache[sMetadataUrl]) {\n\t\tconst oMetaModel = new (ODataMetaModel as any)(oRequestor, sMetadataUrl, undefined, { _requestAnnotationChanges: () => [] });\n\t\tawait oMetaModel.fetchEntityContainer();\n\t\tmetaModelCache[sMetadataUrl] = oMetaModel;\n\t}\n\n\treturn metaModelCache[sMetadataUrl];\n};\n\nexport const getDataModelObjectPathForProperty = function <T = Property | EntitySet | AnyAnnotation>(\n\tentitySet: EntitySet,\n\tconvertedTypes: ConvertedMetadata,\n\tproperty?: T\n): DataModelObjectPath<T> {\n\tconst targetPath: DataModelObjectPath<T> = {\n\t\tstartingEntitySet: entitySet,\n\t\tnavigationProperties: [],\n\t\ttargetObject: property,\n\t\ttargetEntitySet: entitySet,\n\t\ttargetEntityType: entitySet.entityType,\n\t\tconvertedTypes: convertedTypes\n\t};\n\ttargetPath.contextLocation = targetPath as DataModelObjectPath<EntitySet>;\n\treturn targetPath;\n};\n\nexport const evaluateBinding = function (bindingString: string, ...args: any[]) {\n\tconst bindingElement = BindingInfo.parse(bindingString);\n\treturn bindingElement.formatter.apply(undefined, args);\n};\n\ntype ModelContent = {\n\t[name: string]: any;\n};\n\n/**\n * Evaluate a binding against a model.\n * @param bindingString The binding string.\n * @param modelContent Content of the default model to use for evaluation.\n * @param namedModelsContent Contents of additional, named models to use.\n * @returns The evaluated binding.\n */\nexport function evaluateBindingWithModel(\n\tbindingString: string | undefined,\n\tmodelContent: ModelContent,\n\tnamedModelsContent?: { [modelName: string]: ModelContent }\n): string {\n\tconst bindingElement = BindingInfo.parse(bindingString, null, false, false, false, false, {\n\t\t\".\": {\n\t\t\t_formatters: {\n\t\t\t\tValueFormatter: ValueFormatter\n\t\t\t}\n\t\t}\n\t});\n\tconst text = new InvisibleText();\n\ttext.bindProperty(\"text\", bindingElement);\n\n\tconst defaultModel = new JSONModel(modelContent);\n\ttext.setModel(defaultModel);\n\ttext.setBindingContext(defaultModel.createBindingContext(\"/\"));\n\n\tif (namedModelsContent) {\n\t\tfor (const [name, content] of Object.entries(namedModelsContent)) {\n\t\t\tconst model = new JSONModel(content);\n\t\t\ttext.setModel(model, name);\n\t\t\ttext.setBindingContext(model.createBindingContext(\"/\"), name);\n\t\t}\n\t}\n\n\treturn text.getText();\n}\n\nconst TESTVIEWID = \"testViewId\";\n\nconst applyFlexChanges = async function (flexChanges: { [x: string]: object[] }, oMetaModel: MetaModel, resultXML: any) {\n\t// prefix Ids\n\t[...resultXML.querySelectorAll(\"[id]\")].forEach((node) => {\n\t\tnode.id = `${TESTVIEWID}--${node.id}`;\n\t});\n\tconst changes = createFlexibilityChangesObject(TESTVIEWID, flexChanges);\n\tconst appId = \"someComponent\";\n\tconst oManifest = {\n\t\t\"sap.app\": {\n\t\t\tid: appId,\n\t\t\ttype: \"application\",\n\t\t\tcrossNavigation: {\n\t\t\t\toutbounds: []\n\t\t\t}\n\t\t}\n\t};\n\tconst oAppComponent: AppComponent = {\n\t\tgetDiagnostics: jest.fn().mockReturnValue(getFakeDiagnostics()),\n\t\tgetModel: jest.fn().mockReturnValue({\n\t\t\tgetMetaModel: jest.fn().mockReturnValue(oMetaModel)\n\t\t}),\n\t\tgetComponentData: jest.fn().mockReturnValue({}),\n\t\tgetManifestObject: jest.fn().mockReturnValue({\n\t\t\tgetEntry: function (name: string) {\n\t\t\t\treturn (oManifest as any)[name];\n\t\t\t}\n\t\t}),\n\t\tgetLocalId: jest.fn((sId) => sId)\n\t} as unknown as AppComponent;\n\t//fake changes\n\tjest.spyOn(AppStorage, \"loadFlexData\").mockReturnValue(Promise.resolve(changes));\n\tjest.spyOn(Loader, \"getFlexData\").mockReturnValue(Promise.resolve({ data: changes }));\n\tjest.spyOn(Loader, \"getCachedFlexData\").mockReturnValue(changes);\n\n\tjest.spyOn(Component as unknown as { getComponentById: () => AppComponent }, \"getComponentById\").mockReturnValue(oAppComponent);\n\tjest.spyOn(Utils, \"getAppComponentForControl\").mockReturnValue(oAppComponent);\n\tawait FlexState.initialize({\n\t\tcomponentId: appId\n\t});\n\tresultXML = await XmlPreprocessor.process(resultXML, { name: \"Test Fragment\", componentId: appId, id: TESTVIEWID });\n\n\t//Assert that all changes have been applied\n\tconst changesApplied = getChangesFromXML(resultXML);\n\texpect(changesApplied.length).toBe(flexChanges?.changes?.length ?? 0 + flexChanges?.variantDependentControlChanges?.length ?? 0);\n\treturn resultXML;\n};\n\nexport const getChangesFromXML = (xml: any) =>\n\t[...xml.querySelectorAll(\"*\")]\n\t\t.flatMap((e) => [...e.attributes].map((a) => a.name))\n\t\t.filter((attr) => attr.includes(\"sap.ui.fl.appliedChanges\"));\n\nexport const getTemplatingResult = async function (\n\txmlInput: string,\n\tsMetadataUrl: string | undefined,\n\tmBindingContexts: { [x: string]: any; entitySet?: string },\n\tmModels: { [x: string]: any },\n\tflexChanges?: { [x: string]: object[] },\n\tfakeSideEffectService?: unknown\n) {\n\tif (!mModels[\"sap.fe.i18n\"]) {\n\t\tmModels[\"sap.fe.i18n\"] = createMockResourceModel();\n\t}\n\n\tconst templatedXml = `<root>${xmlInput}</root>`;\n\tconst parser = new window.DOMParser();\n\tconst xmlDoc = parser.parseFromString(templatedXml, \"text/xml\");\n\t// To ensure our macro can use #setBindingContext we ensure there is a pre existing JSONModel for converterContext\n\t// if not already passed to teh templating\n\n\tconst oPreprocessorSettings = await _buildPreProcessorSettings(sMetadataUrl, mBindingContexts, mModels, fakeSideEffectService);\n\n\t//This context for macro testing\n\tif (oPreprocessorSettings.models[\"this\"]) {\n\t\toPreprocessorSettings.bindingContexts[\"this\"] = oPreprocessorSettings.models[\"this\"].createBindingContext(\"/\");\n\t}\n\n\tlet resultXML = (await XMLPreprocessor.process(xmlDoc.firstElementChild!, { name: \"Test Fragment\" }, oPreprocessorSettings)) as any;\n\n\tif (sMetadataUrl && flexChanges) {\n\t\t// apply flex changes\n\t\tconst oMetaModel = await getMetaModel(sMetadataUrl);\n\t\tresultXML = await applyFlexChanges(flexChanges, oMetaModel, resultXML);\n\t}\n\treturn resultXML;\n};\n\nexport const getTemplatedXML = async function (\n\txmlInput: string,\n\tsMetadataUrl: string | undefined,\n\tmBindingContexts: { [x: string]: string },\n\tmModels: { [x: string]: any },\n\tflexChanges?: { [x: string]: object[] },\n\tfakeSideEffectService?: unknown\n): Promise<string> {\n\treturn jsx.defineXMLNamespaceMap(reveseNamespaceMap, async () => {\n\t\tconst templatedXML = await getTemplatingResult(\n\t\t\txmlInput,\n\t\t\tsMetadataUrl,\n\t\t\tmBindingContexts,\n\t\t\tmModels,\n\t\t\tflexChanges,\n\t\t\tfakeSideEffectService\n\t\t);\n\t\tconst serialiedXML = serializeXML(templatedXML, undefined);\n\t\texpect(serialiedXML).not.toHaveTemplatingErrors();\n\t\treturn serialiedXML;\n\t}) as unknown as Promise<string>;\n};\n\n/**\n * Process the requested view with the provided data.\n * @param name Fully qualified name of the view to be tested.\n * @param sMetadataUrl Url of the metadata.\n * @param mBindingContexts Map of the bindingContexts to set on the models.\n * @param mModels Map of the models.\n * @param flexChanges Object with UI changes like 'changes' or 'variantDependentControlChanges'\n * @returns Templated view as string\n */\nexport async function processView(\n\tname: string,\n\tsMetadataUrl: string,\n\tmBindingContexts: { [x: string]: string },\n\tmModels: { [x: string]: any },\n\tflexChanges?: { [x: string]: object[] }\n): Promise<JestTemplatedView> {\n\tconst oMetaModel = await getMetaModel(sMetadataUrl);\n\tconst oViewDocument = _loadResourceView(name);\n\tconst oPreprocessorSettings = await _buildPreProcessorSettings(sMetadataUrl, mBindingContexts, mModels);\n\tlet oPreprocessedView = await XMLPreprocessor.process(oViewDocument, { name: name }, oPreprocessorSettings);\n\tif (flexChanges) {\n\t\toPreprocessedView = await applyFlexChanges(flexChanges ?? [], oMetaModel, oPreprocessedView);\n\t}\n\treturn {\n\t\tasElement: oPreprocessedView,\n\t\tasString: formatXML(oPreprocessedView?.outerHTML || \"\")\n\t};\n}\n\n/**\n * Process the requested XML fragment with the provided data.\n * @param name Fully qualified name of the fragment to be tested.\n * @param testData Test data consisting\n * @returns Templated fragment as string\n */\nexport async function processFragment(name: string, testData: { [model: string]: object }): Promise<string> {\n\tconst inputXml = `<root><core:Fragment fragmentName=\"${name}\" type=\"XML\" xmlns:core=\"sap.ui.core\" /></root>`;\n\tconst parser = new window.DOMParser();\n\n\tconst inputDoc = parser.parseFromString(inputXml, \"text/xml\");\n\n\t// build model and bindings for given test data\n\tconst settings = {\n\t\tmodels: {} as { [name: string]: JSONModel },\n\t\tbindingContexts: {} as { [name: string]: object },\n\t\tappComponent: { getSideEffectsService: jest.fn(), getDiagnostics: () => undefined }\n\t};\n\tfor (const model in testData) {\n\t\tconst jsonModel = new JSONModel();\n\t\tjsonModel.setData(testData[model]);\n\t\tsettings.models[model] = jsonModel;\n\t\tsettings.bindingContexts[model] = settings.models[model].createBindingContext(\"/\");\n\t}\n\tsettings.appComponent.getSideEffectsService.mockReturnValue(defaultFakeSideEffectService);\n\n\t// execute the pre-processor\n\tconst resultDoc = await XMLPreprocessor.process(inputDoc.firstElementChild, { name }, settings);\n\n\t// exclude nested fragments from test snapshots\n\tconst fragments = resultDoc.getElementsByTagName(\"core:Fragment\") as any;\n\tif (fragments?.length > 0) {\n\t\tfor (const fragment of fragments) {\n\t\t\tfragment.innerHTML = \"\";\n\t\t}\n\t}\n\n\t// Keep the fragment result as child of root node when fragment generates multiple root controls\n\tconst xmlResult = resultDoc.children.length > 1 ? resultDoc.outerHTML : resultDoc.innerHTML;\n\n\treturn formatXML(xmlResult);\n}\n\nexport function serializeControl(controlToSerialize?: UI5Element | UI5Element[], showCustomStyleClasses = false) {\n\tlet tabCount = 0;\n\tconst UID = /uid--id-\\d{13}-\\d{1,3}/;\n\tconst CONTROLID = /id-\\d{13}-\\d{1,3}/;\n\tfunction getTab(toAdd = 0) {\n\t\tlet tab = \"\";\n\t\tfor (let i = 0; i < tabCount + toAdd; i++) {\n\t\t\ttab += \"\\t\";\n\t\t}\n\t\treturn tab;\n\t}\n\tconst serializeDelegate = {\n\t\tstart: function (control: any, sAggregationName: string) {\n\t\t\tlet controlDetail = \"\";\n\t\t\tif (sAggregationName) {\n\t\t\t\tif (control.getParent()) {\n\t\t\t\t\tconst indexInParent = (control.getParent().getAggregation(sAggregationName) as ManagedObject[])?.indexOf?.(control);\n\t\t\t\t\tif (indexInParent > 0) {\n\t\t\t\t\t\tcontrolDetail += `,\\n${getTab()}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontrolDetail += `${control.getMetadata().getName()}(`;\n\t\t\treturn controlDetail;\n\t\t},\n\t\tend: function () {\n\t\t\treturn \"})\";\n\t\t},\n\t\tmiddle: function (control: any) {\n\t\t\tlet id = control.getId();\n\t\t\tid = typeof id === \"string\" ? id?.replace?.(CONTROLID, \"id\") : id;\n\t\t\tlet data = `{id: ${ManagedObjectMetadata.isGeneratedId(id) ? \"__dynamicId\" : id}`;\n\t\t\tfor (const oControlKey in control.mProperties) {\n\t\t\t\tif (control.mProperties.hasOwnProperty(oControlKey)) {\n\t\t\t\t\tlet propertyValue = control.mProperties[oControlKey];\n\t\t\t\t\tpropertyValue = typeof propertyValue === \"string\" ? propertyValue?.replace?.(UID, \"uid--id\") : propertyValue;\n\t\t\t\t\tpropertyValue = typeof propertyValue === \"string\" ? propertyValue?.replace?.(CONTROLID, \"id\") : propertyValue;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpropertyValue = typeof propertyValue === \"object\" ? JSON.stringify(propertyValue) : propertyValue;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// Stringify may fail for circular references but it's not the end of the world\n\t\t\t\t\t}\n\n\t\t\t\t\tdata += `,\\n${getTab()} ${oControlKey}: ${propertyValue}`;\n\t\t\t\t} else if (control.mBindingInfos.hasOwnProperty(oControlKey)) {\n\t\t\t\t\tconst bindingDetail = { ...control.mBindingInfos[oControlKey] };\n\t\t\t\t\tif (bindingDetail.type?.oOutputFormat) {\n\t\t\t\t\t\tdelete bindingDetail.type.oOutputFormat;\n\t\t\t\t\t}\n\t\t\t\t\tif (bindingDetail.binding) {\n\t\t\t\t\t\tdelete bindingDetail.binding;\n\t\t\t\t\t}\n\t\t\t\t\tdata += `,\\n${getTab()} ${oControlKey}: ${JSON.stringify(bindingDetail)}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const oControlKey in control.mAssociations) {\n\t\t\t\tif (control.mAssociations.hasOwnProperty(oControlKey)) {\n\t\t\t\t\tlet associationValue = control.mAssociations[oControlKey];\n\t\t\t\t\tif (!Array.isArray(associationValue)) {\n\t\t\t\t\t\tassociationValue = [associationValue];\n\t\t\t\t\t}\n\t\t\t\t\tassociationValue = associationValue.map((associationValueElement: string) => {\n\t\t\t\t\t\tif (typeof associationValueElement === \"string\") {\n\t\t\t\t\t\t\treturn ManagedObjectMetadata.isGeneratedId(associationValueElement)\n\t\t\t\t\t\t\t\t? \"__dynamicId\"\n\t\t\t\t\t\t\t\t: associationValueElement?.replace?.(CONTROLID, \"id\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn associationValueElement;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tdata += `,\\n${getTab()} ${oControlKey}: ${(associationValue?.join?.(\",\") ?? associationValue) || undefined}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (showCustomStyleClasses && control.aCustomStyleClasses?.length > 0) {\n\t\t\t\tdata += `,\\n${getTab()} customStyleClasses : ${control.aCustomStyleClasses.join(\", \")}`;\n\t\t\t}\n\t\t\tfor (const oControlKey in control.mEventRegistry) {\n\t\t\t\tif (control.mEventRegistry.hasOwnProperty(oControlKey)) {\n\t\t\t\t\tdata += `,\\n${getTab()} ${oControlKey}: true`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdata += ``;\n\t\t\treturn data;\n\t\t},\n\t\tstartAggregation: function (control: { mBindingInfos: Record<string, BaseAggregationBindingInfo> }, sName: string) {\n\t\t\tlet out = `,\\n${getTab()}${sName}`;\n\t\t\ttabCount++;\n\n\t\t\tif (control.mBindingInfos[sName]) {\n\t\t\t\tout += `={ path:'${control.mBindingInfos[sName].path}', template:\\n${getTab()}`;\n\t\t\t} else {\n\t\t\t\tout += `=[\\n${getTab()}`;\n\t\t\t}\n\t\t\treturn out;\n\t\t},\n\t\tendAggregation: function (control: any, sName: string) {\n\t\t\ttabCount--;\n\t\t\tif (control.mBindingInfos[sName]) {\n\t\t\t\treturn `\\n${getTab()}}`;\n\t\t\t} else {\n\t\t\t\treturn `\\n${getTab()}]`;\n\t\t\t}\n\t\t}\n\t};\n\tif (Array.isArray(controlToSerialize)) {\n\t\treturn controlToSerialize.map((controlToRender: UI5Element) => {\n\t\t\treturn new Serializer(controlToRender, serializeDelegate).serialize();\n\t\t});\n\t} else {\n\t\treturn new Serializer(controlToSerialize, serializeDelegate).serialize();\n\t}\n}\n\nexport function serializeControlAsXML(\n\tcontrolToSerialize?: ManagedObject | ManagedObject[] | null,\n\tshowCustomStyleClasses = false,\n\tpreferValue = false\n) {\n\tlet tabCount = 0;\n\tconst UID = /uid--id-\\d{13}-\\d{1,3}/;\n\tconst CONTROLID = /id-\\d{13}-\\d{1,3}/;\n\tconst definedNamespaces: Record<string, number> = {};\n\n\tfunction getNamespaceAlias(className: string): string {\n\t\tconst namesSplit = className.split(\".\");\n\t\tconst namespace = namesSplit.slice(0, -1);\n\t\tconst name = namesSplit[namesSplit.length - 1];\n\t\tlet namespaceAlias = namespace[namespace.length - 1];\n\t\tif (reveseNamespaceMap[namespace.join(\".\")]) {\n\t\t\tnamespaceAlias = reveseNamespaceMap[namespace.join(\".\")];\n\t\t}\n\t\tif (namespaceAlias === undefined) {\n\t\t\tnamespaceAlias = \"test\";\n\t\t}\n\t\treturn namespaceAlias;\n\t}\n\n\tfunction getTab(toAdd = 0) {\n\t\tlet tab = \"\";\n\t\tfor (let i = 0; i < tabCount + toAdd; i++) {\n\t\t\ttab += \"\\t\";\n\t\t}\n\t\treturn tab;\n\t}\n\tconst serializeDelegate = {\n\t\tstart: function (control: any, sAggregationName: string) {\n\t\t\tlet controlDetail = \"\";\n\t\t\tif (sAggregationName) {\n\t\t\t\tif (control.getParent()) {\n\t\t\t\t\tconst indexInParent = (control.getParent().getAggregation(sAggregationName) as ManagedObject[])?.indexOf?.(control);\n\t\t\t\t\tif (indexInParent > 0) {\n\t\t\t\t\t\tcontrolDetail += `\\n${getTab()}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst nameFull = control.getMetadata().getName();\n\t\t\tconst namesSplit = nameFull.split(\".\");\n\t\t\tconst name = namesSplit[namesSplit.length - 1];\n\t\t\tconst namespaceAlias = getNamespaceAlias(nameFull);\n\t\t\tcontrolDetail += `<${namespaceAlias}:${name}\\n`;\n\t\t\tif (!definedNamespaces[namespaceAlias]) {\n\t\t\t\tdefinedNamespaces[namespaceAlias] = 1;\n\t\t\t\tcontrolDetail += `${getTab()}xmlns:${namespaceAlias}=\"${nameSpaceMap[namespaceAlias]}\"\\n`;\n\t\t\t} else {\n\t\t\t\tdefinedNamespaces[namespaceAlias]++;\n\t\t\t}\n\t\t\treturn controlDetail;\n\t\t},\n\t\tend: function (control: any) {\n\t\t\tconst nameFull = control.getMetadata().getName();\n\t\t\tconst namesSplit = nameFull.split(\".\");\n\t\t\tconst name = namesSplit[namesSplit.length - 1];\n\t\t\tconst namespaceAlias = getNamespaceAlias(nameFull);\n\t\t\tlet hasAggregation = false;\n\t\t\tfor (const mAggregationsKey in control.mAggregations) {\n\t\t\t\tif (\n\t\t\t\t\t(!Array.isArray(control.mAggregations[mAggregationsKey]) &&\n\t\t\t\t\t\tcontrol.mAggregations[mAggregationsKey] !== null &&\n\t\t\t\t\t\tcontrol.mAggregations[mAggregationsKey] !== undefined) ||\n\t\t\t\t\t(Array.isArray(control.mAggregations[mAggregationsKey]) && control.mAggregations[mAggregationsKey].length > 0)\n\t\t\t\t) {\n\t\t\t\t\thasAggregation = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefinedNamespaces[namespaceAlias]--;\n\t\t\tif (hasAggregation) {\n\t\t\t\treturn `</${namespaceAlias}:${name}>`;\n\t\t\t} else {\n\t\t\t\treturn `/>`;\n\t\t\t}\n\t\t},\n\t\tmiddle: function (control: any) {\n\t\t\tlet id = control.getId();\n\t\t\tid = typeof id === \"string\" ? id?.replace?.(CONTROLID, \"id\") : id;\n\t\t\tlet data = \"\";\n\t\t\tif (!ManagedObjectMetadata.isGeneratedId(id)) {\n\t\t\t\tdata = `id=\"${id}\"`;\n\t\t\t}\n\t\t\tlet keys = Object.keys(control.mProperties)\n\t\t\t\t.filter((propName) => propName !== \"id\")\n\t\t\t\t.concat(Object.keys(control.mBindingInfos))\n\t\t\t\t.concat(Object.keys(control.mAssociations))\n\t\t\t\t.concat(Object.keys(control.mEventRegistry));\n\t\t\tkeys = keys.sort((a, b) => a.localeCompare(b));\n\t\t\tconst uniqueKeys = new Set(keys);\n\t\t\tkeys = Array.from(uniqueKeys);\n\t\t\tfor (const oControlKey of keys) {\n\t\t\t\tif (!preferValue && control.mBindingInfos.hasOwnProperty(oControlKey)) {\n\t\t\t\t\tconst bindingDetail = { ...control.mBindingInfos[oControlKey] };\n\t\t\t\t\tif (bindingDetail.bindingString) {\n\t\t\t\t\t\tdata += `\\n${getTab()}${oControlKey}=\"${bindingDetail.bindingString.replace(\">\", \"&gt;\")}\"`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (bindingDetail.type?.oOutputFormat) {\n\t\t\t\t\t\t\tdelete bindingDetail.type.oOutputFormat;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (bindingDetail.binding) {\n\t\t\t\t\t\t\tdelete bindingDetail.binding;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (bindingDetail.template) {\n\t\t\t\t\t\t\tdelete bindingDetail.template;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdata += `\\n${getTab()}${oControlKey}='${JSON.stringify(bindingDetail)}'`;\n\t\t\t\t\t}\n\t\t\t\t} else if (control.mProperties.hasOwnProperty(oControlKey) && control.mProperties[oControlKey] !== undefined) {\n\t\t\t\t\tlet propertyValue = control.mProperties[oControlKey];\n\t\t\t\t\tif (typeof propertyValue === \"string\") {\n\t\t\t\t\t\tpropertyValue = propertyValue.replace(UID, \"uid--id\").replace(CONTROLID, \"id\").replace(/\"/g, \"&quot;\");\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpropertyValue =\n\t\t\t\t\t\t\ttypeof propertyValue === \"object\" ? JSON.stringify(propertyValue).replace(/\"/g, \"&quot;\") : propertyValue;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// Stringify may fail for circular references but it's not the end of the world\n\t\t\t\t\t}\n\n\t\t\t\t\tdata += `\\n${getTab()} ${oControlKey}=\"${propertyValue}\"`;\n\t\t\t\t} else if (control.mAssociations.hasOwnProperty(oControlKey)) {\n\t\t\t\t\tlet associationValue = control.mAssociations[oControlKey];\n\t\t\t\t\tif (!Array.isArray(associationValue)) {\n\t\t\t\t\t\tassociationValue = [associationValue];\n\t\t\t\t\t}\n\t\t\t\t\tassociationValue = associationValue.map((associationValueElement: string) => {\n\t\t\t\t\t\treturn typeof associationValueElement === \"string\"\n\t\t\t\t\t\t\t? associationValueElement?.replace?.(CONTROLID, \"id\")\n\t\t\t\t\t\t\t: associationValueElement;\n\t\t\t\t\t});\n\n\t\t\t\t\tdata += `\\n${getTab()} ${oControlKey}=\"${(associationValue?.join?.(\",\") ?? associationValue) || undefined}\"`;\n\t\t\t\t} else if (control.mEventRegistry.hasOwnProperty(oControlKey)) {\n\t\t\t\t\tif (control.mEventRegistry[oControlKey][0]?.fFunction?.name) {\n\t\t\t\t\t\tdata += `\\n${getTab()} ${oControlKey}=\"${control.mEventRegistry[oControlKey][0]?.fFunction?.name}\"`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata += `\\n${getTab()} ${oControlKey}=\"someEventHandler\"`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (showCustomStyleClasses && control.aCustomStyleClasses?.length > 0) {\n\t\t\t\tdata += `\\n${getTab()} customStyleClasses : ${control.aCustomStyleClasses.join(\", \")}`;\n\t\t\t}\n\t\t\tdata += `\\n`;\n\t\t\tlet hasAggregation = false;\n\t\t\tfor (const mAggregationsKey in control.mAggregations) {\n\t\t\t\tif (\n\t\t\t\t\t(!Array.isArray(control.mAggregations[mAggregationsKey]) &&\n\t\t\t\t\t\tcontrol.mAggregations[mAggregationsKey] !== null &&\n\t\t\t\t\t\tcontrol.mAggregations[mAggregationsKey] !== undefined) ||\n\t\t\t\t\t(Array.isArray(control.mAggregations[mAggregationsKey]) && control.mAggregations[mAggregationsKey].length > 0)\n\t\t\t\t) {\n\t\t\t\t\thasAggregation = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasAggregation) {\n\t\t\t\tdata += \">\";\n\t\t\t}\n\t\t\treturn data;\n\t\t},\n\t\tstartAggregation: function (control: any, sName: string) {\n\t\t\tconst namespaceAlias = getNamespaceAlias(control.getMetadata().getName());\n\t\t\tlet out = `\\n${getTab()}<${namespaceAlias}:${sName}>`;\n\t\t\ttabCount++;\n\t\t\tout += `\\n${getTab()}`;\n\t\t\treturn out;\n\t\t},\n\t\tendAggregation: function (control: any, sName: string) {\n\t\t\ttabCount--;\n\t\t\tconst namespaceAlias = getNamespaceAlias(control.getMetadata().getName());\n\t\t\tif (control.mBindingInfos[sName]) {\n\t\t\t\treturn `\\n${getTab()}</${namespaceAlias}:${sName}>\\n`;\n\t\t\t} else {\n\t\t\t\treturn `\\n${getTab()}</${namespaceAlias}:${sName}>\\n`;\n\t\t\t}\n\t\t}\n\t};\n\tlet outXML;\n\tif (Array.isArray(controlToSerialize)) {\n\t\toutXML = controlToSerialize.map((controlToRender: ManagedObject) => {\n\t\t\treturn new Serializer(controlToRender, serializeDelegate).serialize();\n\t\t});\n\t} else {\n\t\toutXML = new Serializer(controlToSerialize, serializeDelegate).serialize();\n\t}\n\treturn formatXML(`<root>${outXML}</root>`);\n}\n\nexport function createAwaiter() {\n\tlet fnResolve!: Function;\n\tconst myPromise = new Promise((resolve) => {\n\t\tfnResolve = resolve;\n\t});\n\treturn { promise: myPromise, resolve: fnResolve };\n}\n\nexport function registerMockFragments(...fragments: MockFragment[]): jest.SpyInstance {\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tconst originalLoadTemplate = (XMLTemplateProcessor as any).loadTemplatePromise;\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tconst loadTemplateStub = jest.spyOn(XMLTemplateProcessor as any, \"loadTemplatePromise\");\n\tloadTemplateStub.mockImplementation(((templateName: string, extension: string) => {\n\t\tfor (const fragment of fragments) {\n\t\t\tif (fragment.name === templateName) {\n\t\t\t\treturn parseXMLString(fragment.content)[0];\n\t\t\t}\n\t\t}\n\t\treturn originalLoadTemplate(templateName, extension);\n\t}) as (() => Element) | undefined);\n\treturn loadTemplateStub;\n}\n\n/**\n * Creates a new instance of an appComponent and templateComponent with the given options.\n * @param options\n * @param options.cdsFile The path to the CDS file to use for the appComponent\n * @param options.mainContextPath The main context path to use for the appComponent\n * @param options.pageContent The page content to use for the appComponent\n * @param options.content The content to use for the app Component\n * @param options.componentId\n * @param options.manifestSettings\n * @param name The name to use for the appComponent\n * @param viewLevel The view level to use for the appComponent\n * @returns The appcomponent and templateComponent to use for testing\n */\nexport async function initializeAppComponent(\n\toptions?: {\n\t\tcdsFile?: string;\n\t\tcomponentId?: string;\n\t\tmainContextPath?: string;\n\t\tpageContent?: Function;\n\t\tmanifestSettings?: Partial<ListReportManifestSettings | ObjectPageManifestSettings>;\n\t\tfeManifestSettings?: Partial<ManifestContent[\"sap.fe\"]>;\n\t\tcontent?: Partial<ListReportManifestSettings[\"content\"] | ObjectPageManifestSettings[\"content\"]>;\n\t\tguid?: string;\n\t},\n\tname?: string,\n\tviewLevel?: number\n): Promise<{ appComponent: AppComponent; templateComponent: TemplateComponent }> {\n\tjest.spyOn(ODataModel.prototype, \"setOptimisticBatchEnabler\").mockReturnValue(undefined);\n\tlet cdsFile = options?.cdsFile;\n\tif (!cdsFile) {\n\t\tcdsFile = compileCDS(path.join(__dirname, \"./data/Products.cds\"));\n\t}\n\tconst guid = options?.guid ?? uid();\n\tconst id = options?.componentId ?? `sap.fe.test.${guid}`;\n\tconst cdsContent = fs.readFileSync(cdsFile).toString();\n\twindow.jestUI5.mockUrl(`/sap/fe/core/mock/${guid}/$metadata?sap-language=EN`, cdsContent);\n\tif (!options?.pageContent) {\n\t\tjest.spyOn(PageController.prototype, \"_onInternalAfterBinding\").mockImplementation(jest.fn());\n\t}\n\tclass DefaultPageContent extends PageController {\n\t\trender() {\n\t\t\treturn <Page></Page>;\n\t\t}\n\t}\n\tsap.ui.define(`sap/fe/test/${guid}/Component`, [\"sap/fe/core/AppComponent\"], function (_AppComponent: AppComponent) {\n\t\t\"use strict\";\n\n\t\treturn AppComponent.extend(`sap.fe.test.${guid}.Component`, {\n\t\t\tmetadata: {\n\t\t\t\tmanifest: {\n\t\t\t\t\t\"sap.app\": {\n\t\t\t\t\t\tid: `test${guid}`,\n\t\t\t\t\t\ttitle: \"App Title\",\n\t\t\t\t\t\tdataSources: {\n\t\t\t\t\t\t\tmainService: {\n\t\t\t\t\t\t\t\turi: `/sap/fe/core/mock/${guid}/`,\n\t\t\t\t\t\t\t\ttype: \"OData\",\n\t\t\t\t\t\t\t\tsettings: {\n\t\t\t\t\t\t\t\t\todataVersion: \"4.0\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sap.ui5\": {\n\t\t\t\t\t\tmodels: {\n\t\t\t\t\t\t\t\"\": {\n\t\t\t\t\t\t\t\tdataSource: \"mainService\",\n\t\t\t\t\t\t\t\tsettings: {}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\trouting: {\n\t\t\t\t\t\t\ttargets: {\n\t\t\t\t\t\t\t\tDefault: {\n\t\t\t\t\t\t\t\t\ttype: \"Component\",\n\t\t\t\t\t\t\t\t\tname: name ?? \"sap.fe.core.fpm\",\n\t\t\t\t\t\t\t\t\tid: \"Default\",\n\t\t\t\t\t\t\t\t\tviewLevel: viewLevel,\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\tsettings: {\n\t\t\t\t\t\t\t\t\t\t\t...(options?.manifestSettings ?? {}),\n\t\t\t\t\t\t\t\t\t\t\tcontextPath: options?.mainContextPath ?? \"/Products\",\n\t\t\t\t\t\t\t\t\t\t\tviewType: \"JSX\",\n\t\t\t\t\t\t\t\t\t\t\tviewContent: options?.pageContent ?? DefaultPageContent,\n\t\t\t\t\t\t\t\t\t\t\tcontent: options?.content\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\troutes: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tpattern: \":?query:\",\n\t\t\t\t\t\t\t\t\tname: \"Default\",\n\t\t\t\t\t\t\t\t\ttarget: \"Default\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"sap.fe\": options?.feManifestSettings ?? {}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\tconst mockAppComponent = (await Component.create({ name: `sap.fe.test.${guid}`, id: id })) as AppComponent;\n\n\tawait mockAppComponent.initialized;\n\tconst v = await (mockAppComponent.getRouter().getTarget(\"Default\") as { load?: Function }).load?.();\n\treturn { appComponent: mockAppComponent, templateComponent: v.object };\n}\n\n/**\n * Find an element in a collection that matches the given selector.\n * @param collection\n * @param selector\n * @returns The element that matches the selector or undefined if no element matches the selector\n */\nexport function findElement(collection: HTMLCollection, selector: (element: HTMLElement) => boolean): HTMLElement | undefined {\n\tfor (let i = 0; i < collection.length; i++) {\n\t\tconst element = collection.item(i) as HTMLElement;\n\t\tif (selector(element)) {\n\t\t\treturn element;\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Wait for an event to be resolved before continuing.\n * @param control\n * @param eventName\n * @returns A Promise that resolves when the event is received\n */\nexport async function waitForEvent<T extends {}>(control: EventProvider, eventName: string): Promise<UI5Event<T>> {\n\treturn new Promise((resolve) => {\n\t\tcontrol.attachEventOnce(eventName, (event: Event) => {\n\t\t\tresolve(event as unknown as UI5Event<T>);\n\t\t});\n\t});\n}\n\n/**\n * Tell the binding parser to keep the binding strings for testing.\n * @param enabled\n */\nexport function keepBindingStringForTest(enabled: boolean): void {\n\tBindingParser._keepBindingStrings = enabled;\n}\n\nexport async function delayFor(delay: number): Promise<void> {\n\treturn new Promise<void>((resolve) => {\n\t\tsetTimeout(resolve, delay);\n\t});\n}\n"],"mappings":"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","ignoreList":[]}