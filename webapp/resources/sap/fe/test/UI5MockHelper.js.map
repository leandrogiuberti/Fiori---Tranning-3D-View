{"version":3,"file":"UI5MockHelper.js","names":["createMockContext","oContextData","oBinding","isInactive","mocked","mock","Object","getPrototypeOf","Context","createNewContext","_isKeptAlive","_contextData","_oBinding","_isInactive","isA","mockImplementation","sClassName","getProperty","key","requestProperty","keyOrKeys","Array","isArray","Promise","resolve","map","requestObject","setProperty","value","getObject","path","result","includes","parts","split","reduce","sum","part","getPath","getBinding","getModel","setKeepAlive","bool","_fnOnBeforeDestroy","_bRequestMessages","isKeepAlive","_exports","MockContext","createMockEvent","params","source","Event","_params","getSource","mockReturnValue","getParameter","name","getParameters","MockEvent","createMockListBinding","aContextData","oMockModel","ODataListBinding","_aMockContexts","contextData","_mockModel","setModel","model","requestContexts","getCurrentContexts","getAllCurrentContexts","getLength","length","getContexts","getUpdateGroupId","MockListBinding","createMockPropertyBinding","ODataPropertyBinding","_value","_path","getValue","MockPropertyBinding","createMockCompositeBinding","aBindings","CompositeBinding","_aBindings","getBindings","binding","MockCompositeBinding","createMockContextBinding","oContext","ODataContextBinding","mockModel","oMockContext","getInternalMockContext","oModel","getBoundContext","invoke","mockResolvedValue","MockContextBinding","createMockMetaModel","oMetaData","ODataMetaModel","oMetaContext","getMetaContext","sPath","$path","createBindingContext","getMetaPath","metamodel","MockMetaModel","createMockModel","oMockListBinding","oMockContextBinding","ODataModel","fnOptimisticBatchEnabler","mockListBinding","mockContextBinding","setMetaModel","oMetaModel","bindList","bindContext","getMetaModel","MockModel","createMockModelFromListBinding","createMockModelFromContextBinding","undefined","createMockView","View","MockView","createMockController","Controller","_routing","InternalRouting","_sideEffects","SideEffects","_intentBasedNavigation","InternalIntentBasedNavigation","editFlow","EditFlow","share","Share","collaborativeDraft","CollaborativeDraft","recommendations","Recommendations","messageHandler","MessageHandler","getAppComponent","jest","fn","AppComponent","getView","MockController","mockMVC","existing","view","controller","getController","getText","textID","parameters","metaPath","resourceModel","ResourceModel","bundleName","enhanceWith","async","createMockResourceModel"],"sources":["./UI5MockHelper.ts"],"sourcesContent":["import type { WithMock } from \"@sap-ux/jest-mock-ui5/dist/generic\";\nimport { mock } from \"@sap-ux/jest-mock-ui5/dist/generic\";\nimport AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport ResourceModel from \"sap/fe/core/ResourceModel\";\nimport CollaborativeDraft from \"sap/fe/core/controllerextensions/CollaborativeDraft\";\nimport EditFlow from \"sap/fe/core/controllerextensions/EditFlow\";\nimport InternalIntentBasedNavigation from \"sap/fe/core/controllerextensions/InternalIntentBasedNavigation\";\nimport InternalRouting from \"sap/fe/core/controllerextensions/InternalRouting\";\nimport MessageHandler from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport Recommendations from \"sap/fe/core/controllerextensions/Recommendations\";\nimport Share from \"sap/fe/core/controllerextensions/Share\";\nimport SideEffects from \"sap/fe/core/controllerextensions/SideEffects\";\nimport Event from \"sap/ui/base/Event\";\nimport type EventProvider from \"sap/ui/base/EventProvider\";\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport View from \"sap/ui/core/mvc/View\";\nimport CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport Context from \"sap/ui/model/odata/v4/Context\";\nimport ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\n\n/**\n * Utility type to mock a sap.ui.model.odata.v4.Context\n */\nexport type MockContext = WithMock<Context> & {\n\t_isKeptAlive: boolean;\n\t_contextData: any;\n\t_oBinding: any;\n\t_isInactive: boolean;\n};\n/**\n * Factory function to create a new MockContext.\n * @param oContextData A map of the different properties of the context. The value for the key '$path' will be returned by the 'getPath' method\n * @param oBinding The binding of the context\n * @param isInactive Is the context iniactive or not\n * @returns A new MockContext\n */\nexport function createMockContext(oContextData?: any, oBinding?: any, isInactive?: boolean): MockContext {\n\t// Ugly workaround to get a proper mock pbject, as Context isn't properly exported from UI5\n\tconst mocked = mock(Object.getPrototypeOf((Context as any).createNewContext(null, null, \"/e\"))) as MockContext;\n\tmocked._isKeptAlive = false;\n\tmocked._contextData = oContextData || {};\n\tmocked._oBinding = oBinding;\n\tmocked._isInactive = !!isInactive;\n\n\t// Default behavior\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.model.odata.v4.Context\";\n\t});\n\tmocked.mock.getProperty.mockImplementation((key: string) => {\n\t\treturn mocked._contextData[key];\n\t});\n\tmocked.mock.requestProperty.mockImplementation((keyOrKeys: string | string[]) => {\n\t\tif (Array.isArray(keyOrKeys)) {\n\t\t\treturn Promise.resolve(keyOrKeys.map((key) => mocked._contextData[key]));\n\t\t}\n\t\treturn Promise.resolve(mocked._contextData[keyOrKeys]);\n\t});\n\tmocked.mock.requestObject.mockImplementation((key: string | undefined) => {\n\t\treturn key ? Promise.resolve(mocked._contextData[key]) : mocked._contextData;\n\t});\n\tmocked.mock.setProperty.mockImplementation((key: string, value: any) => {\n\t\tmocked._contextData[key] = value;\n\t\treturn mocked._contextData[key];\n\t});\n\n\tmocked.mock.getObject.mockImplementation((path: string) => {\n\t\tlet result = path ? mocked._contextData[path] : mocked._contextData;\n\n\t\tif (!result && path && path.includes(\"/\")) {\n\t\t\tconst parts = path.split(\"/\");\n\t\t\tresult = parts.reduce((sum, part: any) => {\n\t\t\t\tsum = part && sum ? sum[part] : sum;\n\t\t\t\treturn sum;\n\t\t\t}, mocked._contextData);\n\t\t}\n\n\t\treturn result;\n\t});\n\n\tmocked.mock.getPath.mockImplementation(() => mocked._contextData[\"$path\"]);\n\tmocked.mock.getBinding.mockImplementation(() => mocked._oBinding);\n\tmocked.mock.getModel.mockImplementation(() => mocked._oBinding?.getModel());\n\tmocked.mock.setKeepAlive.mockImplementation((bool: boolean, _fnOnBeforeDestroy?: any, _bRequestMessages?: boolean) => {\n\t\tmocked._isKeptAlive = bool;\n\t});\n\tmocked.mock.isKeepAlive.mockImplementation(() => mocked._isKeptAlive);\n\tmocked.mock.isInactive.mockImplementation(() => mocked._isInactive);\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockContext instead.\n */\nexport const MockContext: new (oValues?: any, oBinding?: any, isInactive?: boolean) => MockContext = createMockContext as any;\n\n/**\n * Utility type to mock a sap.ui.base.Event\n */\nexport type MockEvent = WithMock<Event> & {\n\t_params: { [key: string]: any };\n};\n/**\n * Factory function to create a new MockEvent.\n * @param params The parameters of the event\n * @param source\n * @returns A new MockEvent\n */\nexport function createMockEvent(params?: { [key: string]: unknown }, source?: EventProvider): MockEvent {\n\tconst mocked = mock(Event) as MockEvent;\n\tmocked._params = params || {};\n\n\tif (source) {\n\t\tmocked.mock.getSource.mockReturnValue(source);\n\t}\n\n\t// Default behavior\n\tmocked.mock.getParameter.mockImplementation((name) => mocked._params[name]);\n\tmocked.mock.getParameters.mockImplementation(() => {\n\t\treturn mocked._params;\n\t});\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockEvent instead.\n */\nexport const MockEvent: new (params?: { [key: string]: any }) => MockEvent = createMockEvent as any;\n\n/**\n * Utility type to mock a sap.ui.model.odata.v4.ODataListBinding\n */\nexport type MockListBinding = WithMock<ODataListBinding> & {\n\t_aMockContexts: MockContext[];\n\t_mockModel?: MockModel;\n\n\t/**\n\t * Utility method to set the model of the ListBinding\n\t */\n\tsetModel: (model: MockModel) => void;\n};\n/**\n * Factory function to create a new MockListBinding.\n * @param aContextData An array of objects holding the different properties of the contexts referenced by the ListBinding\n * @param oMockModel The model of the ListBinding\n * @returns A new MockListBinding\n */\nexport function createMockListBinding(aContextData?: any[], oMockModel?: MockModel): MockListBinding {\n\tconst mocked = mock(ODataListBinding) as MockListBinding;\n\taContextData = aContextData || [];\n\tmocked._aMockContexts = aContextData.map((contextData) => {\n\t\treturn createMockContext(contextData, mocked);\n\t});\n\tmocked._mockModel = oMockModel;\n\n\t// Utility API\n\tmocked.setModel = (model: MockModel) => {\n\t\tmocked._mockModel = model;\n\t};\n\n\t// Default behavior\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.model.odata.v4.ODataListBinding\";\n\t});\n\tmocked.mock.requestContexts.mockImplementation(() => {\n\t\treturn Promise.resolve(mocked._aMockContexts);\n\t});\n\tmocked.mock.getCurrentContexts.mockImplementation(() => {\n\t\treturn mocked._aMockContexts;\n\t});\n\tmocked.mock.getAllCurrentContexts.mockImplementation(() => {\n\t\treturn mocked._aMockContexts;\n\t});\n\tmocked.mock.getLength.mockImplementation(() => {\n\t\treturn mocked._aMockContexts.length;\n\t});\n\tmocked.mock.getContexts.mockImplementation(() => {\n\t\treturn mocked._aMockContexts;\n\t});\n\tmocked.mock.getModel.mockImplementation(() => {\n\t\treturn mocked._mockModel;\n\t});\n\tmocked.mock.getUpdateGroupId.mockReturnValue(\"auto\");\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockListBinding instead.\n */\nexport const MockListBinding: new (aContexts?: any[], mockModel?: MockModel) => MockListBinding = createMockListBinding as any;\n\n/**\n * Utility type to mock a sap.ui.model.odata.v4.ODataPropertyBinding\n */\nexport type MockPropertyBinding = WithMock<ODataPropertyBinding> & {\n\t_value?: any;\n\t_path?: string;\n\t_mockModel?: MockModel;\n};\n/**\n * Factory function to create a new MockPropertyBinding.\n * @param value The value returnd by the PropertyBinding\n * @param path The path of the PropertyBinding\n * @param oMockModel The model of the PropertyBinding\n * @returns A new MockPropertyBinding\n */\nexport function createMockPropertyBinding(value: any, path?: string, oMockModel?: MockModel): MockPropertyBinding {\n\tconst mocked = mock(ODataPropertyBinding) as MockPropertyBinding;\n\tmocked._mockModel = oMockModel;\n\tmocked._value = value;\n\tmocked._path = path;\n\n\t// Default behavior\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.model.odata.v4.ODataPropertyBinding\";\n\t});\n\tmocked.mock.getModel.mockImplementation(() => {\n\t\treturn mocked._mockModel;\n\t});\n\tmocked.mock.getValue.mockImplementation(() => {\n\t\treturn mocked._value;\n\t});\n\tmocked.mock.getPath.mockImplementation(() => {\n\t\treturn mocked._path;\n\t});\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockPropertyBinding instead.\n */\nexport const MockPropertyBinding: new (value: any, oMockModel?: MockModel) => MockPropertyBinding = createMockPropertyBinding as any;\n\n/**\n * Utility type to mock a sap.ui.model.CompositeBinding\n */\nexport type MockCompositeBinding = WithMock<CompositeBinding> & {\n\t_aBindings: MockPropertyBinding[];\n};\n/**\n * Factory function to create a new MockCompositeBinding.\n * @param aBindings The bindings of the CompositeBinding\n * @returns A new MockCompositeBinding\n */\nexport function createMockCompositeBinding(aBindings: MockPropertyBinding[]): MockCompositeBinding {\n\tconst mocked = mock(CompositeBinding) as MockCompositeBinding;\n\tmocked._aBindings = aBindings;\n\n\t// Default behavior\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.model.CompositeBinding\";\n\t});\n\tmocked.mock.getBindings.mockImplementation(() => {\n\t\treturn mocked._aBindings;\n\t});\n\tmocked.mock.getValue.mockImplementation(() => {\n\t\treturn mocked._aBindings.map((binding) => binding.getValue());\n\t});\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockCompositeBinding instead.\n */\nexport const MockCompositeBinding: new (aBindings: MockPropertyBinding[]) => MockCompositeBinding = createMockCompositeBinding as any;\n\n/**\n * Utility type to mock a sap.ui.model.odata.v4.ODataContextBinding\n */\nexport type MockContextBinding = WithMock<ODataContextBinding> & {\n\toMockContext: MockContext;\n\tisKeptAlive: boolean;\n\tmockModel?: MockModel;\n\n\t/**\n\t * Utility method to access the internal MockContext of the ContextBinding\n\t */\n\tgetInternalMockContext: () => MockContext;\n\t/**\n\t * Utility method to set the model of the ContextBinding\n\t */\n\tsetModel: (oModel: MockModel) => void;\n};\n/**\n * Factory function to create a new MockContextBinding.\n * @param oContext The context of the ContextBinding\n * @param oMockModel The model of the ContextBinding\n * @returns A new MockContextBinding\n */\nexport function createMockContextBinding(oContext?: any, oMockModel?: MockModel): MockContextBinding {\n\tconst mocked = mock(ODataContextBinding) as MockContextBinding;\n\tmocked.mockModel = oMockModel;\n\tmocked.oMockContext = createMockContext(oContext || {}, mocked);\n\n\t// Utility API\n\tmocked.getInternalMockContext = () => {\n\t\treturn mocked.oMockContext;\n\t};\n\tmocked.setModel = (oModel: MockModel) => {\n\t\tmocked.mockModel = oModel;\n\t};\n\n\t// Default behavior\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.model.odata.v4.ODataContextBinding\";\n\t});\n\tmocked.mock.getBoundContext.mockImplementation(() => {\n\t\treturn mocked.oMockContext;\n\t});\n\tmocked.mock.getModel.mockImplementation(() => {\n\t\treturn mocked.mockModel;\n\t});\n\tmocked.mock.invoke.mockResolvedValue(true);\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockContextBinding instead.\n */\nexport const MockContextBinding: new (oContext?: any, oMockModel?: MockModel) => MockContextBinding = createMockContextBinding as any;\n\n/**\n * Utility type to mock a sap.ui.model.odata.v4.ODataMetaModel\n */\nexport type MockMetaModel = WithMock<ODataMetaModel> & {\n\toMetaContext: MockContext;\n};\n/**\n * Factory function to create a new MockMetaModel.\n * @param oMetaData A map of the different metadata properties of the MetaModel (path -> value).\n * @returns A new MockMetaModel\n */\nexport function createMockMetaModel(oMetaData?: any): MockMetaModel {\n\tconst mocked = mock(ODataMetaModel) as MockMetaModel;\n\tmocked.oMetaContext = createMockContext(oMetaData || {});\n\n\t// Default behavior\n\tmocked.mock.getMetaContext.mockImplementation((sPath: string) => {\n\t\treturn createMockContext({ $path: sPath });\n\t});\n\tmocked.mock.getObject.mockImplementation((sPath: string) => {\n\t\treturn mocked.oMetaContext.getProperty(sPath);\n\t});\n\tmocked.mock.createBindingContext.mockImplementation((sPath: string) => {\n\t\treturn createMockContext({ $path: sPath });\n\t});\n\tmocked.mock.getMetaPath.mockImplementation((sPath: string) => {\n\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t// @ts-ignore\n\t\tconst metamodel = new ODataMetaModel();\n\t\treturn sPath ? metamodel.getMetaPath(sPath) : sPath;\n\t});\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.model.odata.v4.ODataMetaModel\";\n\t});\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockMetaModel instead.\n */\nexport const MockMetaModel: new (oMetaData?: any) => MockMetaModel = createMockMetaModel as any;\n\n/**\n * Utility type to mock a sap.ui.model.odata.v4.ODataModel\n */\nexport type MockModel = WithMock<ODataModel> & {\n\toMetaModel?: MockMetaModel;\n\tmockListBinding?: MockListBinding;\n\tmockContextBinding?: MockContextBinding;\n\n\t/**\n\t * Utility method to set the metamodel of the MockModel\n\t */\n\tsetMetaModel: (oMetaModel: MockMetaModel) => void;\n};\n/**\n * Factory function to create a new MockModel.\n * @param oMockListBinding A list binding that will be returned when calling bindList.\n * @param oMockContextBinding A context binding that will be returned when calling bindContext.\n * @returns A new MockModel\n */\nexport function createMockModel(oMockListBinding?: MockListBinding, oMockContextBinding?: MockContextBinding): MockModel {\n\tconst mocked = mock(ODataModel) as MockModel;\n\tmocked.fnOptimisticBatchEnabler = null;\n\tmocked.mockListBinding = oMockListBinding;\n\tmocked.mockContextBinding = oMockContextBinding;\n\tif (oMockListBinding) {\n\t\toMockListBinding.setModel(mocked);\n\t}\n\tif (oMockContextBinding) {\n\t\toMockContextBinding.setModel(mocked);\n\t}\n\n\t// Utility API\n\tmocked.setMetaModel = (oMetaModel: MockMetaModel) => {\n\t\tmocked.oMetaModel = oMetaModel;\n\t};\n\n\t// Default behavior\n\tmocked.mock.bindList.mockImplementation(() => {\n\t\treturn mocked.mockListBinding;\n\t});\n\tmocked.mock.bindContext.mockImplementation(() => {\n\t\treturn mocked.mockContextBinding;\n\t});\n\tmocked.mock.getMetaModel.mockImplementation(() => {\n\t\treturn mocked.oMetaModel;\n\t});\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.model.odata.v4.ODataModel\";\n\t});\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockModel instead.\n */\nexport const MockModel: new (oMockListBinding?: MockListBinding, oMockContextBinding?: MockContextBinding) => MockModel =\n\tcreateMockModel as any;\n/**\n * Factory function to create a new MockModel used with a listBinding.\n * @param oMockListBinding A list binding that will be returned when calling bindList.\n * @returns A new MockModel\n */\nexport function createMockModelFromListBinding(oMockListBinding: MockListBinding): MockModel {\n\treturn createMockModel(oMockListBinding);\n}\n/**\n *  Factory function to create a new MockModel used with a contextBinding.\n * @param oMockContextBinding A context binding that will be returned when calling bindContext.\n * @returns A new MockModel\n */\nexport function createMockModelFromContextBinding(oMockContextBinding: MockContextBinding): MockModel {\n\treturn createMockModel(undefined, oMockContextBinding);\n}\n\n/**\n * Utility type to mock a sap.ui.core.mvc.View\n */\nexport type MockView = WithMock<FEView>;\n/**\n * Factory function to create a new MockView.\n * @returns A new MockView\n */\nexport function createMockView(): MockView {\n\tconst mocked = mock(View);\n\n\t// Default behavior\n\tmocked.mock.isA.mockImplementation((sClassName: string) => {\n\t\treturn sClassName === \"sap.ui.core.mvc.View\";\n\t});\n\n\treturn mocked as MockView;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function createMockView instead.\n */\nexport const MockView: new () => MockView = createMockView as any;\n\n/**\n * Utility type to mock a sap.fe.core.PageController\n */\nexport type MockController = WithMock<Controller> & {\n\t_routing: WithMock<InternalRouting>;\n\t_sideEffects: WithMock<SideEffects>;\n\t_intentBasedNavigation: WithMock<InternalIntentBasedNavigation>;\n\teditFlow: WithMock<EditFlow>;\n\tshare: WithMock<Share>;\n\trecommendations: WithMock<Recommendations>;\n\tcollaborativeDraft: WithMock<CollaborativeDraft>;\n\tmessageHandler: WithMock<MessageHandler>;\n\tgetAppComponent: () => WithMock<AppComponent>;\n\tgetModel: () => MockModel;\n};\n\n/**\n * Factory function to create a new MockController.\n * @param model Optional model that should be returned by the getModel method\n * @returns A new MockController\n */\nexport function createMockController(model?: MockModel): MockController {\n\tconst mocked = mock(Controller) as MockController;\n\tmocked._routing = mock(InternalRouting);\n\tmocked._sideEffects = mock(SideEffects);\n\tmocked._intentBasedNavigation = mock(InternalIntentBasedNavigation);\n\tmocked.editFlow = mock(EditFlow);\n\tmocked.share = mock(Share);\n\tmocked.collaborativeDraft = mock(CollaborativeDraft);\n\tmocked.recommendations = mock(Recommendations);\n\tmocked.messageHandler = mock(MessageHandler);\n\tmocked.getAppComponent = jest.fn().mockReturnValue(mock(AppComponent));\n\t// Default Behavior\n\tmocked.mock.getView.mockReturnValue(createMockView());\n\tmocked.mock.isA.mockReturnValue(false);\n\tmocked.getModel = jest.fn().mockReturnValue(model);\n\n\treturn mocked;\n}\n/**\n * For compatibility reasons, we keep a new operator. Use the factory function mockController instead.\n */\nexport const MockController: new () => MockController = createMockController as any;\n\nexport interface MVCMock {\n\tmodel: MockModel;\n\tview: MockView;\n\tcontroller: MockController;\n}\n/**\n * Generate model, view and controller mocks that refer to each other.\n * @param existing Optional existing mocked instances that should be used\n * @returns Mocked model, view and controller instances\n */\nexport function mockMVC(existing?: Partial<MVCMock>): MVCMock {\n\tconst model = existing?.model || createMockModel();\n\tconst view = existing?.view || createMockView();\n\tconst controller = existing?.controller || createMockController(model);\n\n\tview.mock.getController.mockReturnValue(controller);\n\tview.mock.getModel.mockReturnValue(model);\n\tcontroller.mock.getView.mockReturnValue(view);\n\n\treturn { model, view, controller };\n}\n\n/**\n * To be used to load messages bundles for tests without app/page component.\n * @param textID ID of the Text\n * @param parameters Array of parameters that are used to create the text\n * @param metaPath Entity set name or action name to overload a text\n * @returns Determined text\n */\nexport function getText(textID: string, parameters?: any[], metaPath?: string) {\n\tconst resourceModel = new ResourceModel({\n\t\tbundleName: \"sap.fe.core.messagebundle\",\n\t\tenhanceWith: [{ bundleName: \"sap.fe.macros.messagebundle\" }, { bundleName: \"sap.fe.templates.messagebundle\" }],\n\t\tasync: false\n\t});\n\treturn resourceModel.getText(textID, parameters, metaPath);\n}\n\n/**\n * Utility type to mock ResourceModel\n */\nexport type MockResourceModel = WithMock<ResourceModel>;\n/**\n * Factory function to create a new MockView.\n * @returns A new MockView\n */\nexport function createMockResourceModel(): MockResourceModel {\n\tconst mocked = mock(ResourceModel);\n\tmocked.getText = jest.fn().mockImplementation(getText);\n\treturn mocked;\n}\n"],"mappings":"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","ignoreList":[]}