{"version":3,"file":"FiscalDate.js","names":["FiscalDate","_dec","defineUI5Class","_class","_FiscalDate","_ODataStringType","formatOptions","constraints","_this","fiscalType","maxLength","call","this","annotationType","format","dateFormats","formatter","FiscalFormat","getDateInstance","calendarType","CalendarType","Gregorian","_inheritsLoose","_proto","prototype","getPattern","formatValue","value","targetType","parseValue","sourceType","parse","validateValue","error","validate","ValidateException","getErrorMessage","sValue","fullYear","Date","getFullYear","toString","Library","getResourceBundleFor","getText","getName","getFormatter","ODataStringType"],"sources":["./FiscalDate.ts"],"sourcesContent":["import { CommonAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport CalendarType from \"sap/base/i18n/date/CalendarType\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport FiscalFormat from \"sap/fe/core/formatters/FiscalFormat\";\nimport Library from \"sap/ui/core/Lib\";\nimport ValidateException from \"sap/ui/model/ValidateException\";\nimport ODataStringType from \"sap/ui/model/odata/type/String\";\n\n/**\n * Define the UI5 class for a type of fiscal date.\n *\n * The data type Fiscal Date supports the parsing and formatting of fiscal dates that follow the pattern 'yM'.\n * @since 1.110.0\n */\n@defineUI5Class(\"sap.fe.core.type.FiscalDate\")\nclass FiscalDate extends ODataStringType {\n\tprivate annotationType: string | undefined;\n\n\tprivate fullYear: string | undefined;\n\n\tprivate static dateFormats = {\n\t\t[CommonAnnotationTerms.IsFiscalYear]: \"YYYY\",\n\t\t[CommonAnnotationTerms.IsFiscalPeriod]: \"PPP\",\n\t\t[CommonAnnotationTerms.IsFiscalYearPeriod]: \"YYYYPPP\",\n\t\t[CommonAnnotationTerms.IsFiscalQuarter]: \"Q\",\n\t\t[CommonAnnotationTerms.IsFiscalYearQuarter]: \"YYYYQ\",\n\t\t[CommonAnnotationTerms.IsFiscalWeek]: \"WW\",\n\t\t[CommonAnnotationTerms.IsFiscalYearWeek]: \"YYYYWW\",\n\t\t[CommonAnnotationTerms.IsDayOfFiscalYear]: \"d\",\n\t\t[CommonAnnotationTerms.IsFiscalYearVariant]: \"\"\n\t};\n\n\tprivate formatter: FiscalFormat | undefined;\n\n\t/**\n\t * @param formatOptions Format options\n\t * @param formatOptions.fiscalType String with a fiscal annotation type\n\t * @param formatOptions.parseKeepsEmptyString Whether empty string should be kept or not\n\t * @param constraints Constraints\n\t * @param constraints.maxLength Maximum length of the field\n\t */\n\tconstructor(formatOptions: { fiscalType: string; parseKeepsEmptyString?: boolean }, constraints?: { maxLength?: number }) {\n\t\tif (\n\t\t\t(formatOptions.fiscalType === CommonAnnotationTerms.IsFiscalYearPeriod ||\n\t\t\t\tformatOptions.fiscalType === CommonAnnotationTerms.IsFiscalYearQuarter ||\n\t\t\t\tformatOptions.fiscalType === CommonAnnotationTerms.IsFiscalYearWeek) &&\n\t\t\tconstraints?.maxLength\n\t\t) {\n\t\t\t// We increase maxLength for +1 for any fiscal type that have delimiter in locale format.\n\t\t\t// It's necessary for validation to work correctly.\n\t\t\t// Also for validation to function properly user also should specify constraints.isDigitSequence = true\n\t\t\t// isDigitSequence and maxLength combination ensures that missing characters will be populated with leading zeros\n\t\t\t// that will ensure user will receive correct validation results.\n\t\t\tconstraints.maxLength = constraints.maxLength + 1;\n\t\t}\n\t\tsuper(formatOptions, constraints);\n\t\tthis.annotationType = formatOptions.fiscalType;\n\t\tconst format = FiscalDate.dateFormats[this.annotationType as keyof typeof FiscalDate.dateFormats];\n\t\tif (format) {\n\t\t\tthis.formatter = FiscalFormat.getDateInstance({\n\t\t\t\tformat,\n\t\t\t\tcalendarType: CalendarType.Gregorian\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Return pattern for fiscal date type.\n\t * @returns The fiscal date pattern\n\t */\n\tpublic getPattern(): string | undefined {\n\t\treturn this.formatter?.getPattern();\n\t}\n\n\t/**\n\t * Formats the given value to the given fiscal type.\n\t * @param value The value to be formatted\n\t * @returns The formatted output value; <code>undefined</code> is always formatted to <code>null</code>\n\t * @override\n\t */\n\tpublic formatValue(value: string, targetType: string): string | number | boolean {\n\t\treturn this.formatter ? this.formatter.format(super.formatValue(value, targetType)) : super.formatValue(value, targetType);\n\t}\n\n\t/**\n\t * Parses the given value, which is expected to be of the fiscal type, to a string.\n\t * @param value The value to be parsed\n\t * @returns The parsed value\n\t * @override\n\t */\n\tpublic parseValue(value: string | number | boolean, sourceType: string): string {\n\t\treturn this.formatter ? this.formatter.parse(super.parseValue(value, sourceType)) : super.parseValue(value, sourceType);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic validateValue(value: string): void {\n\t\ttry {\n\t\t\tsuper.validateValue(value);\n\t\t} catch (error) {\n\t\t\tif (!this.formatter) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (!this.formatter.validate(value)) {\n\t\t\t\tthrow new ValidateException(this.getErrorMessage(this.annotationType));\n\t\t\t}\n\t\t}\n\n\t\tif (!this.formatter || value === \"\" || value === null) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.formatter.validate(value)) {\n\t\t\tthrow new ValidateException(this.getErrorMessage(this.annotationType));\n\t\t}\n\t}\n\n\t/**\n\t * Returns the matching locale-dependent error message for the type based on the fiscal annotation.\n\t * @param annotationType The fiscal annotation type\n\t * @returns The locale-dependent error message\n\t */\n\tpublic getErrorMessage(annotationType: string | undefined): string {\n\t\tlet sValue = \"\";\n\t\tthis.fullYear = this.fullYear || new Date().getFullYear().toString();\n\n\t\tswitch (annotationType) {\n\t\t\tcase CommonAnnotationTerms.IsFiscalYear:\n\t\t\t\tsValue = this.fullYear;\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalPeriod:\n\t\t\t\tsValue = \"001\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearPeriod:\n\t\t\t\tsValue = this.fullYear + \"001\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalQuarter:\n\t\t\t\tsValue = \"1\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearQuarter:\n\t\t\t\tsValue = this.fullYear + \"1\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalWeek:\n\t\t\t\tsValue = \"01\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearWeek:\n\t\t\t\tsValue = this.fullYear + \"01\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsDayOfFiscalYear:\n\t\t\t\tsValue = \"1\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearVariant:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsValue = this.fullYear;\n\t\t}\n\n\t\treturn Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"FISCAL_VALIDATION_FAILS\", [this.formatValue(sValue, \"string\")]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getName(): string {\n\t\treturn \"sap.fe.core.type.FiscalDate\";\n\t}\n\n\t/**\n\t * Returns the formatter that is assigned to this particular FiscalDate type.\n\t * @returns The assigned instance of FiscalFormat\n\t */\n\tpublic getFormatter(): FiscalFormat | undefined {\n\t\treturn this.formatter;\n\t}\n}\nexport default FiscalDate;\n"],"mappings":";;;;4dAQA,IAOMA,GAAUC,EADfC,EAAe,+BAA8BD,EAAAE,GAAAC,EAAA,SAAAC,GA2B7C,SAAAL,EAAYM,EAAwEC,GAAsC,IAAAC,EACzH,IACEF,EAAcG,aAAU,qDACxBH,EAAcG,aAAU,sDACxBH,EAAcG,aAAU,oDACzBF,GAAaG,UACZ,CAMDH,EAAYG,UAAYH,EAAYG,UAAY,CACjD,CACAF,EAAAH,EAAAM,KAAAC,KAAMN,EAAeC,IAAYK,KACjCJ,EAAKK,eAAiBP,EAAcG,WACpC,MAAMK,EAASd,EAAWe,YAAYP,EAAKK,gBAC3C,GAAIC,EAAQ,CACXN,EAAKQ,UAAYC,EAAaC,gBAAgB,CAC7CJ,SACAK,aAAcC,EAAaC,WAE7B,CAAC,OAAAb,CACF,CAEAc,EAAAtB,EAAAK,GAAA,IAAAkB,EAAAvB,EAAAwB,UAAAD,EAIOE,WAAP,SAAOA,IACN,OAAOb,KAAKI,WAAWS,YACxB,EAEAF,EAMOG,YAAP,SAAOA,EAAYC,EAAeC,GACjC,OAAOhB,KAAKI,UAAYJ,KAAKI,UAAUF,OAAMT,EAAAmB,UAAOE,YAAWf,KAAAC,KAACe,EAAOC,IAAYvB,EAAAmB,UAASE,YAAWf,KAAAC,KAACe,EAAOC,EAChH,EAEAL,EAMOM,WAAP,SAAOA,EAAWF,EAAkCG,GACnD,OAAOlB,KAAKI,UAAYJ,KAAKI,UAAUe,MAAK1B,EAAAmB,UAAOK,WAAUlB,KAAAC,KAACe,EAAOG,IAAYzB,EAAAmB,UAASK,WAAUlB,KAAAC,KAACe,EAAOG,EAC7G,EAEAP,EAGOS,cAAP,SAAOA,EAAcL,GACpB,IACCtB,EAAAmB,UAAMQ,cAAarB,KAAAC,KAACe,EACrB,CAAE,MAAOM,GACR,IAAKrB,KAAKI,UAAW,CACpB,MAAMiB,CACP,CACA,IAAKrB,KAAKI,UAAUkB,SAASP,GAAQ,CACpC,MAAM,IAAIQ,EAAkBvB,KAAKwB,gBAAgBxB,KAAKC,gBACvD,CACD,CAEA,IAAKD,KAAKI,WAAaW,IAAU,IAAMA,IAAU,KAAM,CACtD,MACD,CACA,IAAKf,KAAKI,UAAUkB,SAASP,GAAQ,CACpC,MAAM,IAAIQ,EAAkBvB,KAAKwB,gBAAgBxB,KAAKC,gBACvD,CACD,EAEAU,EAKOa,gBAAP,SAAOA,EAAgBvB,GACtB,IAAIwB,EAAS,GACbzB,KAAK0B,SAAW1B,KAAK0B,WAAY,IAAIC,MAAOC,cAAcC,WAE1D,OAAQ5B,GACP,kDACCwB,EAASzB,KAAK0B,SACd,MACD,oDACCD,EAAS,MACT,MACD,wDACCA,EAASzB,KAAK0B,SAAW,MACzB,MACD,qDACCD,EAAS,IACT,MACD,yDACCA,EAASzB,KAAK0B,SAAW,IACzB,MACD,kDACCD,EAAS,KACT,MACD,sDACCA,EAASzB,KAAK0B,SAAW,KACzB,MACD,uDACCD,EAAS,IACT,MACD,yDACC,MACD,QACCA,EAASzB,KAAK0B,SAGhB,OAAOI,EAAQC,qBAAqB,eAAgBC,QAAQ,0BAA2B,CAAChC,KAAKc,YAAYW,EAAQ,WAClH,EAEAd,EAGOsB,QAAP,SAAOA,IACN,MAAO,6BACR,EAEAtB,EAIOuB,aAAP,SAAOA,IACN,OAAOlC,KAAKI,SACb,EAAC,OAAAhB,CAAA,CA/J4C,CACrB+C,GAAe3C,EAKxBW,YAAc,CAC5B,gDAAsC,OACtC,kDAAwC,MACxC,sDAA4C,UAC5C,mDAAyC,IACzC,uDAA6C,QAC7C,gDAAsC,KACtC,oDAA0C,SAC1C,qDAA2C,IAC3C,uDAA6C,IAC7CX,KAAAD,GAAA,OAiJaH,CAAU","ignoreList":[]}