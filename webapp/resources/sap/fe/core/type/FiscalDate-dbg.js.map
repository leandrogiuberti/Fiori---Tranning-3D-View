{"version":3,"names":["FiscalDate","_dec","defineUI5Class","_class","_FiscalDate","_ODataStringType","formatOptions","constraints","_this","fiscalType","maxLength","call","annotationType","format","dateFormats","formatter","FiscalFormat","getDateInstance","calendarType","CalendarType","Gregorian","_inheritsLoose","_proto","prototype","getPattern","formatValue","value","targetType","parseValue","sourceType","parse","validateValue","error","validate","ValidateException","getErrorMessage","sValue","fullYear","Date","getFullYear","toString","Library","getResourceBundleFor","getText","getName","getFormatter","ODataStringType"],"sourceRoot":".","sources":["FiscalDate.ts"],"sourcesContent":["import { CommonAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport CalendarType from \"sap/base/i18n/date/CalendarType\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport FiscalFormat from \"sap/fe/core/formatters/FiscalFormat\";\nimport Library from \"sap/ui/core/Lib\";\nimport ValidateException from \"sap/ui/model/ValidateException\";\nimport ODataStringType from \"sap/ui/model/odata/type/String\";\n\n/**\n * Define the UI5 class for a type of fiscal date.\n *\n * The data type Fiscal Date supports the parsing and formatting of fiscal dates that follow the pattern 'yM'.\n * @since 1.110.0\n */\n@defineUI5Class(\"sap.fe.core.type.FiscalDate\")\nclass FiscalDate extends ODataStringType {\n\tprivate annotationType: string | undefined;\n\n\tprivate fullYear: string | undefined;\n\n\tprivate static dateFormats = {\n\t\t[CommonAnnotationTerms.IsFiscalYear]: \"YYYY\",\n\t\t[CommonAnnotationTerms.IsFiscalPeriod]: \"PPP\",\n\t\t[CommonAnnotationTerms.IsFiscalYearPeriod]: \"YYYYPPP\",\n\t\t[CommonAnnotationTerms.IsFiscalQuarter]: \"Q\",\n\t\t[CommonAnnotationTerms.IsFiscalYearQuarter]: \"YYYYQ\",\n\t\t[CommonAnnotationTerms.IsFiscalWeek]: \"WW\",\n\t\t[CommonAnnotationTerms.IsFiscalYearWeek]: \"YYYYWW\",\n\t\t[CommonAnnotationTerms.IsDayOfFiscalYear]: \"d\",\n\t\t[CommonAnnotationTerms.IsFiscalYearVariant]: \"\"\n\t};\n\n\tprivate formatter: FiscalFormat | undefined;\n\n\t/**\n\t * @param formatOptions Format options\n\t * @param formatOptions.fiscalType String with a fiscal annotation type\n\t * @param formatOptions.parseKeepsEmptyString Whether empty string should be kept or not\n\t * @param constraints Constraints\n\t * @param constraints.maxLength Maximum length of the field\n\t */\n\tconstructor(formatOptions: { fiscalType: string; parseKeepsEmptyString?: boolean }, constraints?: { maxLength?: number }) {\n\t\tif (\n\t\t\t(formatOptions.fiscalType === CommonAnnotationTerms.IsFiscalYearPeriod ||\n\t\t\t\tformatOptions.fiscalType === CommonAnnotationTerms.IsFiscalYearQuarter ||\n\t\t\t\tformatOptions.fiscalType === CommonAnnotationTerms.IsFiscalYearWeek) &&\n\t\t\tconstraints?.maxLength\n\t\t) {\n\t\t\t// We increase maxLength for +1 for any fiscal type that have delimiter in locale format.\n\t\t\t// It's necessary for validation to work correctly.\n\t\t\t// Also for validation to function properly user also should specify constraints.isDigitSequence = true\n\t\t\t// isDigitSequence and maxLength combination ensures that missing characters will be populated with leading zeros\n\t\t\t// that will ensure user will receive correct validation results.\n\t\t\tconstraints.maxLength = constraints.maxLength + 1;\n\t\t}\n\t\tsuper(formatOptions, constraints);\n\t\tthis.annotationType = formatOptions.fiscalType;\n\t\tconst format = FiscalDate.dateFormats[this.annotationType as keyof typeof FiscalDate.dateFormats];\n\t\tif (format) {\n\t\t\tthis.formatter = FiscalFormat.getDateInstance({\n\t\t\t\tformat,\n\t\t\t\tcalendarType: CalendarType.Gregorian\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Return pattern for fiscal date type.\n\t * @returns The fiscal date pattern\n\t */\n\tpublic getPattern(): string | undefined {\n\t\treturn this.formatter?.getPattern();\n\t}\n\n\t/**\n\t * Formats the given value to the given fiscal type.\n\t * @param value The value to be formatted\n\t * @returns The formatted output value; <code>undefined</code> is always formatted to <code>null</code>\n\t * @override\n\t */\n\tpublic formatValue(value: string, targetType: string): string | number | boolean {\n\t\treturn this.formatter ? this.formatter.format(super.formatValue(value, targetType)) : super.formatValue(value, targetType);\n\t}\n\n\t/**\n\t * Parses the given value, which is expected to be of the fiscal type, to a string.\n\t * @param value The value to be parsed\n\t * @returns The parsed value\n\t * @override\n\t */\n\tpublic parseValue(value: string | number | boolean, sourceType: string): string {\n\t\treturn this.formatter ? this.formatter.parse(super.parseValue(value, sourceType)) : super.parseValue(value, sourceType);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic validateValue(value: string): void {\n\t\ttry {\n\t\t\tsuper.validateValue(value);\n\t\t} catch (error) {\n\t\t\tif (!this.formatter) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tif (!this.formatter.validate(value)) {\n\t\t\t\tthrow new ValidateException(this.getErrorMessage(this.annotationType));\n\t\t\t}\n\t\t}\n\n\t\tif (!this.formatter || value === \"\" || value === null) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.formatter.validate(value)) {\n\t\t\tthrow new ValidateException(this.getErrorMessage(this.annotationType));\n\t\t}\n\t}\n\n\t/**\n\t * Returns the matching locale-dependent error message for the type based on the fiscal annotation.\n\t * @param annotationType The fiscal annotation type\n\t * @returns The locale-dependent error message\n\t */\n\tpublic getErrorMessage(annotationType: string | undefined): string {\n\t\tlet sValue = \"\";\n\t\tthis.fullYear = this.fullYear || new Date().getFullYear().toString();\n\n\t\tswitch (annotationType) {\n\t\t\tcase CommonAnnotationTerms.IsFiscalYear:\n\t\t\t\tsValue = this.fullYear;\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalPeriod:\n\t\t\t\tsValue = \"001\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearPeriod:\n\t\t\t\tsValue = this.fullYear + \"001\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalQuarter:\n\t\t\t\tsValue = \"1\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearQuarter:\n\t\t\t\tsValue = this.fullYear + \"1\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalWeek:\n\t\t\t\tsValue = \"01\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearWeek:\n\t\t\t\tsValue = this.fullYear + \"01\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsDayOfFiscalYear:\n\t\t\t\tsValue = \"1\";\n\t\t\t\tbreak;\n\t\t\tcase CommonAnnotationTerms.IsFiscalYearVariant:\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsValue = this.fullYear;\n\t\t}\n\n\t\treturn Library.getResourceBundleFor(\"sap.fe.core\")!.getText(\"FISCAL_VALIDATION_FAILS\", [this.formatValue(sValue, \"string\")]);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tpublic getName(): string {\n\t\treturn \"sap.fe.core.type.FiscalDate\";\n\t}\n\n\t/**\n\t * Returns the formatter that is assigned to this particular FiscalDate type.\n\t * @returns The assigned instance of FiscalFormat\n\t */\n\tpublic getFormatter(): FiscalFormat | undefined {\n\t\treturn this.formatter;\n\t}\n}\nexport default FiscalDate;\n"],"mappings":"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","ignoreList":[],"file":"FiscalDate-dbg.js"}