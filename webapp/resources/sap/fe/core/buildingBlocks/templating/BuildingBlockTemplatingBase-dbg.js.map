{"version":3,"names":["BuildingBlockTemplatingBase","props","_controlConfiguration","_visitorSettings","isPublic","getConverterContext","dataModelObjectPath","contextPath","settings","extraParams","appComponent","originalViewData","models","viewData","getData","Object","assign","resourceModel","deepClone","controlConfiguration","relativePath","getTargetObjectPath","contextLocation","entitySetName","targetEntitySet","name","entitySet","merge","ConverterContext","createConverterContextForMacro","startingEntitySet","metaModel","getDiagnostics","ManifestWrapper","keys","forEach","propName","_exports","_proto","prototype","createId","id","_len","arguments","length","stringParts","Array","_key","generate","undefined","getContentId","buildingBlockId","getTranslatedText","textID","parameters","metaPath","getText","getProperties","allProperties","oInstanceKey","hasOwnProperty","register","registerBuildingBlock","unregister","unregisterBuildingBlock","addConditionally","condition","partToAdd","addConditionallyToXML","attr","attributeName","value","addAttributeToXML","_createClass","key","get","internalMetadata","set","newValue","isRuntime"],"sourceRoot":".","sources":["BuildingBlockTemplatingBase.ts"],"sourcesContent":["import deepClone from \"sap/base/util/deepClone\";\nimport merge from \"sap/base/util/merge\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type { BuildingBlockMetadata, ObjectValue } from \"sap/fe/core/buildingBlocks/templating/BuildingBlockSupport\";\nimport type {\n\tTemplateProcessorSettings,\n\tXMLProcessorTypeValue\n} from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport {\n\taddAttributeToXML,\n\taddConditionallyToXML,\n\tregisterBuildingBlock,\n\tunregisterBuildingBlock\n} from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport ManifestWrapper from \"sap/fe/core/converters/ManifestWrapper\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\n\n/**\n * Base class for building blocks\n */\nexport default class BuildingBlockTemplatingBase {\n\tprivate static internalMetadata: BuildingBlockMetadata;\n\n\tpublic static get metadata(): BuildingBlockMetadata {\n\t\treturn this.internalMetadata;\n\t}\n\n\tpublic static set metadata(newValue: BuildingBlockMetadata) {\n\t\tthis.internalMetadata = newValue;\n\t}\n\n\tpublic static readonly isRuntime: boolean = false;\n\n\tprotected isPublic = false;\n\n\tprivate resourceModel?: ResourceModel;\n\n\tpublic id?: string;\n\n\tconstructor(props: $ControlSettings, _controlConfiguration?: unknown, _visitorSettings?: TemplateProcessorSettings) {\n\t\tObject.keys(props).forEach((propName) => {\n\t\t\tthis[propName as keyof this] = props[propName as keyof $ControlSettings] as never;\n\t\t});\n\n\t\tthis.resourceModel = _visitorSettings?.models?.[\"sap.fe.i18n\"];\n\t}\n\n\t/**\n\t * Only used internally\n\t *\n\t */\n\tpublic getTemplate?(oNode?: Element): string | Promise<string | undefined> | undefined;\n\n\t/**\n\t * Convert the given local element ID to a globally unique ID by prefixing with the Building Block ID.\n\t * @param stringParts\n\t * @returns Either the global ID or undefined if the Building Block doesn't have an ID\n\t */\n\tprotected createId(...stringParts: string[]): string | undefined {\n\t\t// If the child instance has an ID property use it otherwise return undefined\n\t\tif (this.id) {\n\t\t\treturn generate([this.id, ...stringParts]);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Get the ID of the content control.\n\t * @param buildingBlockId\n\t * @returns Return the ID\n\t */\n\tprotected getContentId(buildingBlockId: string): string {\n\t\treturn `${buildingBlockId}-content`;\n\t}\n\n\t/**\n\t * Returns translated text for a given resource key.\n\t * @param textID ID of the Text\n\t * @param parameters Array of parameters that are used to create the text\n\t * @param metaPath Entity set name or action name to overload a text\n\t * @returns Determined text\n\t */\n\tgetTranslatedText(textID: string, parameters?: unknown[], metaPath?: string): string {\n\t\treturn this.resourceModel?.getText(textID, parameters, metaPath) || textID;\n\t}\n\n\tprotected getConverterContext = function (\n\t\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\t\tcontextPath: string | undefined,\n\t\tsettings: TemplateProcessorSettings,\n\t\textraParams?: Record<string, unknown>\n\t): ConverterContext<PageContextPathTarget> {\n\t\tconst appComponent = settings.appComponent;\n\t\tconst originalViewData = settings.models.viewData?.getData();\n\t\tlet viewData = Object.assign({}, originalViewData);\n\t\tdelete viewData.resourceModel;\n\t\tdelete viewData.appComponent;\n\t\tviewData = deepClone(viewData);\n\t\tlet controlConfiguration = {};\n\n\t\t// Only merge in page control configuration if the building block is on the same context\n\t\tconst relativePath = getTargetObjectPath(dataModelObjectPath.contextLocation ?? dataModelObjectPath);\n\t\tconst entitySetName = dataModelObjectPath.contextLocation?.targetEntitySet?.name ?? dataModelObjectPath.targetEntitySet?.name;\n\t\tif (\n\t\t\trelativePath === originalViewData?.contextPath ||\n\t\t\trelativePath === `/${originalViewData?.entitySet}` ||\n\t\t\tentitySetName === originalViewData?.entitySet\n\t\t) {\n\t\t\tcontrolConfiguration = viewData.controlConfiguration;\n\t\t}\n\t\tviewData.controlConfiguration = merge(controlConfiguration, extraParams || {});\n\t\treturn ConverterContext.createConverterContextForMacro(\n\t\t\tdataModelObjectPath.startingEntitySet.name,\n\t\t\tsettings.models.metaModel,\n\t\t\tappComponent?.getDiagnostics(),\n\t\t\tmerge,\n\t\t\tdataModelObjectPath.contextLocation,\n\t\t\tnew ManifestWrapper(viewData, appComponent)\n\t\t);\n\t};\n\n\t/**\n\t * Only used internally.\n\t * @returns All the properties defined on the object with their values\n\t */\n\tpublic getProperties(): Record<string, ObjectValue> {\n\t\tconst allProperties: Record<string, ObjectValue> = {};\n\t\tfor (const oInstanceKey in this) {\n\t\t\tif (this.hasOwnProperty(oInstanceKey)) {\n\t\t\t\tallProperties[oInstanceKey] = this[oInstanceKey] as unknown as ObjectValue;\n\t\t\t}\n\t\t}\n\t\treturn allProperties;\n\t}\n\n\tstatic register(): void {\n\t\tregisterBuildingBlock(this);\n\t}\n\n\tstatic unregister(): void {\n\t\tunregisterBuildingBlock(this);\n\t}\n\n\t/**\n\t * Add a part of string based on the condition.\n\t * @param condition\n\t * @param partToAdd\n\t * @returns The part to add if the condition is true, otherwise an empty string\n\t */\n\tprotected addConditionally(condition: boolean, partToAdd: string): string {\n\t\treturn addConditionallyToXML(condition, partToAdd);\n\t}\n\n\t/**\n\t * Add an attribute depending on the current value of the property.\n\t * If it's undefined the attribute is not added.\n\t * @param attributeName\n\t * @param value\n\t * @returns The attribute to add if the value is not undefined, otherwise an empty string\n\t */\n\tprotected attr(attributeName: string, value?: XMLProcessorTypeValue): () => string {\n\t\treturn addAttributeToXML(attributeName, value);\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"BuildingBlockTemplatingBase-dbg.js"}