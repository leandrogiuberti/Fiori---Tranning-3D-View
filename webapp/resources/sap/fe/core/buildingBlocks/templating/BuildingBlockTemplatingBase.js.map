{"version":3,"file":"BuildingBlockTemplatingBase.js","names":["BuildingBlockTemplatingBase","props","_controlConfiguration","_visitorSettings","this","isPublic","getConverterContext","dataModelObjectPath","contextPath","settings","extraParams","appComponent","originalViewData","models","viewData","getData","Object","assign","resourceModel","deepClone","controlConfiguration","relativePath","getTargetObjectPath","contextLocation","entitySetName","targetEntitySet","name","entitySet","merge","ConverterContext","createConverterContextForMacro","startingEntitySet","metaModel","getDiagnostics","ManifestWrapper","keys","forEach","propName","_exports","_proto","prototype","createId","id","_len","arguments","length","stringParts","Array","_key","generate","undefined","getContentId","buildingBlockId","getTranslatedText","textID","parameters","metaPath","getText","getProperties","allProperties","oInstanceKey","hasOwnProperty","register","registerBuildingBlock","unregister","unregisterBuildingBlock","addConditionally","condition","partToAdd","addConditionallyToXML","attr","attributeName","value","addAttributeToXML","_createClass","key","get","internalMetadata","set","newValue","isRuntime"],"sources":["./BuildingBlockTemplatingBase.ts"],"sourcesContent":["import deepClone from \"sap/base/util/deepClone\";\nimport merge from \"sap/base/util/merge\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type { BuildingBlockMetadata, ObjectValue } from \"sap/fe/core/buildingBlocks/templating/BuildingBlockSupport\";\nimport type {\n\tTemplateProcessorSettings,\n\tXMLProcessorTypeValue\n} from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport {\n\taddAttributeToXML,\n\taddConditionallyToXML,\n\tregisterBuildingBlock,\n\tunregisterBuildingBlock\n} from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplateProcessor\";\nimport ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport ManifestWrapper from \"sap/fe/core/converters/ManifestWrapper\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type { $ControlSettings } from \"sap/ui/core/Control\";\n\n/**\n * Base class for building blocks\n */\nexport default class BuildingBlockTemplatingBase {\n\tprivate static internalMetadata: BuildingBlockMetadata;\n\n\tpublic static get metadata(): BuildingBlockMetadata {\n\t\treturn this.internalMetadata;\n\t}\n\n\tpublic static set metadata(newValue: BuildingBlockMetadata) {\n\t\tthis.internalMetadata = newValue;\n\t}\n\n\tpublic static readonly isRuntime: boolean = false;\n\n\tprotected isPublic = false;\n\n\tprivate resourceModel?: ResourceModel;\n\n\tpublic id?: string;\n\n\tconstructor(props: $ControlSettings, _controlConfiguration?: unknown, _visitorSettings?: TemplateProcessorSettings) {\n\t\tObject.keys(props).forEach((propName) => {\n\t\t\tthis[propName as keyof this] = props[propName as keyof $ControlSettings] as never;\n\t\t});\n\n\t\tthis.resourceModel = _visitorSettings?.models?.[\"sap.fe.i18n\"];\n\t}\n\n\t/**\n\t * Only used internally\n\t *\n\t */\n\tpublic getTemplate?(oNode?: Element): string | Promise<string | undefined> | undefined;\n\n\t/**\n\t * Convert the given local element ID to a globally unique ID by prefixing with the Building Block ID.\n\t * @param stringParts\n\t * @returns Either the global ID or undefined if the Building Block doesn't have an ID\n\t */\n\tprotected createId(...stringParts: string[]): string | undefined {\n\t\t// If the child instance has an ID property use it otherwise return undefined\n\t\tif (this.id) {\n\t\t\treturn generate([this.id, ...stringParts]);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Get the ID of the content control.\n\t * @param buildingBlockId\n\t * @returns Return the ID\n\t */\n\tprotected getContentId(buildingBlockId: string): string {\n\t\treturn `${buildingBlockId}-content`;\n\t}\n\n\t/**\n\t * Returns translated text for a given resource key.\n\t * @param textID ID of the Text\n\t * @param parameters Array of parameters that are used to create the text\n\t * @param metaPath Entity set name or action name to overload a text\n\t * @returns Determined text\n\t */\n\tgetTranslatedText(textID: string, parameters?: unknown[], metaPath?: string): string {\n\t\treturn this.resourceModel?.getText(textID, parameters, metaPath) || textID;\n\t}\n\n\tprotected getConverterContext = function (\n\t\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\t\tcontextPath: string | undefined,\n\t\tsettings: TemplateProcessorSettings,\n\t\textraParams?: Record<string, unknown>\n\t): ConverterContext<PageContextPathTarget> {\n\t\tconst appComponent = settings.appComponent;\n\t\tconst originalViewData = settings.models.viewData?.getData();\n\t\tlet viewData = Object.assign({}, originalViewData);\n\t\tdelete viewData.resourceModel;\n\t\tdelete viewData.appComponent;\n\t\tviewData = deepClone(viewData);\n\t\tlet controlConfiguration = {};\n\n\t\t// Only merge in page control configuration if the building block is on the same context\n\t\tconst relativePath = getTargetObjectPath(dataModelObjectPath.contextLocation ?? dataModelObjectPath);\n\t\tconst entitySetName = dataModelObjectPath.contextLocation?.targetEntitySet?.name ?? dataModelObjectPath.targetEntitySet?.name;\n\t\tif (\n\t\t\trelativePath === originalViewData?.contextPath ||\n\t\t\trelativePath === `/${originalViewData?.entitySet}` ||\n\t\t\tentitySetName === originalViewData?.entitySet\n\t\t) {\n\t\t\tcontrolConfiguration = viewData.controlConfiguration;\n\t\t}\n\t\tviewData.controlConfiguration = merge(controlConfiguration, extraParams || {});\n\t\treturn ConverterContext.createConverterContextForMacro(\n\t\t\tdataModelObjectPath.startingEntitySet.name,\n\t\t\tsettings.models.metaModel,\n\t\t\tappComponent?.getDiagnostics(),\n\t\t\tmerge,\n\t\t\tdataModelObjectPath.contextLocation,\n\t\t\tnew ManifestWrapper(viewData, appComponent)\n\t\t);\n\t};\n\n\t/**\n\t * Only used internally.\n\t * @returns All the properties defined on the object with their values\n\t */\n\tpublic getProperties(): Record<string, ObjectValue> {\n\t\tconst allProperties: Record<string, ObjectValue> = {};\n\t\tfor (const oInstanceKey in this) {\n\t\t\tif (this.hasOwnProperty(oInstanceKey)) {\n\t\t\t\tallProperties[oInstanceKey] = this[oInstanceKey] as unknown as ObjectValue;\n\t\t\t}\n\t\t}\n\t\treturn allProperties;\n\t}\n\n\tstatic register(): void {\n\t\tregisterBuildingBlock(this);\n\t}\n\n\tstatic unregister(): void {\n\t\tunregisterBuildingBlock(this);\n\t}\n\n\t/**\n\t * Add a part of string based on the condition.\n\t * @param condition\n\t * @param partToAdd\n\t * @returns The part to add if the condition is true, otherwise an empty string\n\t */\n\tprotected addConditionally(condition: boolean, partToAdd: string): string {\n\t\treturn addConditionallyToXML(condition, partToAdd);\n\t}\n\n\t/**\n\t * Add an attribute depending on the current value of the property.\n\t * If it's undefined the attribute is not added.\n\t * @param attributeName\n\t * @param value\n\t * @returns The attribute to add if the value is not undefined, otherwise an empty string\n\t */\n\tprotected attr(attributeName: string, value?: XMLProcessorTypeValue): () => string {\n\t\treturn addAttributeToXML(attributeName, value);\n\t}\n}\n"],"mappings":";;;;wlCAsBA,IAGqBA,EAA2B,WAmB/C,SAAAA,EAAYC,EAAyBC,EAAiCC,GAA8CC,KAN1GC,SAAW,MAAKD,KAqDhBE,oBAAsB,SAC/BC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAeF,EAASE,aAC9B,MAAMC,EAAmBH,EAASI,OAAOC,UAAUC,UACnD,IAAID,EAAWE,OAAOC,OAAO,CAAC,EAAGL,UAC1BE,EAASI,qBACTJ,EAASH,aAChBG,EAAWK,EAAUL,GACrB,IAAIM,EAAuB,CAAC,EAG5B,MAAMC,EAAeC,EAAoBf,EAAoBgB,iBAAmBhB,GAChF,MAAMiB,EAAgBjB,EAAoBgB,iBAAiBE,iBAAiBC,MAAQnB,EAAoBkB,iBAAiBC,KACzH,GACCL,IAAiBT,GAAkBJ,aACnCa,IAAiB,IAAIT,GAAkBe,aACvCH,IAAkBZ,GAAkBe,UACnC,CACDP,EAAuBN,EAASM,oBACjC,CACAN,EAASM,qBAAuBQ,EAAMR,EAAsBV,GAAe,CAAC,GAC5E,OAAOmB,EAAiBC,+BACvBvB,EAAoBwB,kBAAkBL,KACtCjB,EAASI,OAAOmB,UAChBrB,GAAcsB,iBACdL,EACArB,EAAoBgB,gBACpB,IAAIW,EAAgBpB,EAAUH,GAEhC,EA/ECK,OAAOmB,KAAKlC,GAAOmC,QAASC,IAC3BjC,KAAKiC,GAA0BpC,EAAMoC,KAGtCjC,KAAKc,cAAgBf,GAAkBU,SAAS,cACjD,CAEAyB,EAAAtC,EAAA,IAAAuC,EAAAvC,EAAAwC,UAMAD,EAKUE,SAAV,SAAUA,IAET,GAAIrC,KAAKsC,GAAI,SAAAC,EAAAC,UAAAC,OAFQC,EAAW,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAAXF,EAAWE,GAAAJ,UAAAI,EAAA,CAG/B,OAAOC,EAAS,CAAC7C,KAAKsC,MAAOI,GAC9B,CACA,OAAOI,SACR,EAEAX,EAKUY,aAAV,SAAUA,EAAaC,GACtB,MAAO,GAAGA,WACX,EAEAb,EAOAc,kBAAA,SAAAA,EAAkBC,EAAgBC,EAAwBC,GACzD,OAAOpD,KAAKc,eAAeuC,QAAQH,EAAQC,EAAYC,IAAaF,CACrE,EAqCAf,EAIOmB,cAAP,SAAOA,IACN,MAAMC,EAA6C,CAAC,EACpD,IAAK,MAAMC,KAAgBxD,KAAM,CAChC,GAAIA,KAAKyD,eAAeD,GAAe,CACtCD,EAAcC,GAAgBxD,KAAKwD,EACpC,CACD,CACA,OAAOD,CACR,EAAC3D,EAEM8D,SAAP,SAAOA,IACNC,EAAsB3D,KACvB,EAACJ,EAEMgE,WAAP,SAAOA,IACNC,EAAwB7D,KACzB,EAEAmC,EAMU2B,iBAAV,SAAUA,EAAiBC,EAAoBC,GAC9C,OAAOC,EAAsBF,EAAWC,EACzC,EAEA7B,EAOU+B,KAAV,SAAUA,EAAKC,EAAuBC,GACrC,OAAOC,EAAkBF,EAAeC,EACzC,EAAC,OAAAE,EAAA1E,EAAA,OAAA2E,IAAA,WAAAC,IA3ID,WACC,OAAOxE,KAAKyE,gBACb,EAACC,IAED,SAA2BC,GAC1B3E,KAAKyE,iBAAmBE,CACzB,IAAC,CAT8C,GAA3B/E,EAWGgF,UAAqB,MAAK1C,EAAAtC,EAAA,OAAAsC,CAAA","ignoreList":[]}