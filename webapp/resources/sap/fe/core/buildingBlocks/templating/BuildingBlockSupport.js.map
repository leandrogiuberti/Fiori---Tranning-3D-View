{"version":3,"file":"BuildingBlockSupport.js","names":["blockAttribute","attributeDefinition","target","propertyKey","propertyDescriptor","metadata","ensureMetadata","constructor","defaultValue","initializer","properties","toString","undefined","_exports","blockEvent","type","isPublic","blockAggregation","aggregationDefinition","aggregations","isDefault","defaultAggregation","Object","getOwnPropertyNames","includes","merge","namespace","name","stereotype","defineBuildingBlock","buildingBlockDefinition","classDefinition","publicNamespace","xmlTag","fragment","designtime","isOpen","libraries","convertBuildingBlockMetadata","baseMetadata","controllerExtensions","associations","references","methods","events","interfaces","bbDefaultAggregation","currentProperty","isAssociation","underlyingType","multiple","aggregationKey","buildingBlockMetadata"],"sources":["./BuildingBlockSupport.ts"],"sourcesContent":["import merge from \"sap/base/util/merge\";\nimport type { UI5AggregationMetadata, UI5ControlMetadataDefinition } from \"sap/fe/base/ClassSupport\";\nimport type BuildingBlockTemplatingBase from \"sap/fe/core/buildingBlocks/templating/BuildingBlockTemplatingBase\";\nimport type Context from \"sap/ui/model/Context\";\n\nexport type ObjectValue2 = string | boolean | number | Context | undefined | object | null;\ntype ObjectValue3<T> = T | Record<string, T> | T[];\nexport type ObjectValue = ObjectValue3<ObjectValue2 | Record<string, ObjectValue2> | ObjectValue2[]>;\n\n/**\n * Type for the accessor decorator that we end up with in babel.\n */\ntype AccessorDescriptor<T> = TypedPropertyDescriptor<T> & { initializer?: () => T };\ntype BaseBuildingBlockPropertyDefinition = {\n\ttype: string;\n\tunderlyingType?: string;\n\tdefaultClass?: Function;\n\tisPublic?: boolean;\n\t/** Make sure to type the optionality of your TypeScript property correctly */\n\trequired?: boolean;\n\t/** This property is only considered for runtime building blocks */\n\tbindable?: boolean;\n\t/** Function that allows to validate or transform the given input */\n\tvalidate?: Function;\n\t/** Define the allowed values in the metadata */\n\tallowedValues?: string[];\n\t/** Whether this should point to an association */\n\tisAssociation?: boolean;\n};\nexport type BuildingBlockMetadataContextDefinition = BaseBuildingBlockPropertyDefinition & {\n\ttype: \"sap.ui.model.Context\";\n\texpectedTypes: string[];\n\t// For documentation only\n\texpectedAnnotations: string[];\n\t// Enforces the type\n\texpectedAnnotationTypes: string[];\n};\n/**\n * Available properties to define a building block property\n */\nexport type BuildingBlockPropertyDefinition = BaseBuildingBlockPropertyDefinition | BuildingBlockMetadataContextDefinition;\n\n/**\n * Available properties to define a building block aggregation\n */\nexport type BuildingBlockAggregationDefinition = {\n\tisPublic?: boolean;\n\ttype: string;\n\taltTypes?: string[];\n\tslot?: string;\n\tisDefault?: boolean;\n\tmultiple?: boolean;\n\tskipKey?: boolean;\n\n\t/** Defines whether the element is based on an actual node that will be rendered or only on XML that will be interpreted */\n\thasVirtualNode?: boolean;\n\tprocessAggregations?: Function;\n};\n\n/**\n * Available properties to define a building block class\n */\nexport type BuildingBlockDefinition = {\n\tname: string;\n\tnamespace?: string;\n\tpublicNamespace?: string;\n\txmlTag?: string;\n\tfragment?: string;\n\tdesigntime?: string;\n\tisOpen?: boolean;\n\treturnTypes?: string[];\n\tlibraries?: string[];\n} & ({ namespace: string } | { publicNamespace: string });\n\n/**\n * Metadata attached to each building block class\n */\nexport type BuildingBlockMetadata = BuildingBlockDefinition & {\n\tproperties: Record<string, BuildingBlockPropertyDefinition & { defaultValue?: unknown }>;\n\taggregations: Record<string, BuildingBlockAggregationDefinition>;\n\tstereotype: string;\n\tdefaultAggregation?: string;\n\tlibraries?: string[];\n};\n\n/**\n * Indicates that you must declare the property to be used as an XML attribute that can be used from outside the building block.\n *\n * When you define a runtime building block, ensure that you use the correct type: Depending on its metadata,\n * a property can either be a {@link sap.ui.model.Context} (<code>type: 'sap.ui.model.Context'</code>),\n * a constant (<code>bindable: false</code>), or a {@link BindingToolkitExpression} (<code>bindable: true</code>).\n *\n * Use this decorator only for properties that are to be set from outside or are used in inner XML templating.\n * If you just need simple computed properties, use undecorated, private TypeScript properties.\n * @param attributeDefinition\n * @returns The decorated property\n */\nexport function blockAttribute(attributeDefinition: BuildingBlockPropertyDefinition): PropertyDecorator {\n\treturn function (target: BuildingBlockTemplatingBase, propertyKey: string | Symbol, propertyDescriptor: AccessorDescriptor<unknown>) {\n\t\tconst metadata = ensureMetadata(target.constructor);\n\t\t// If there is no defaultValue we can take the value from the initializer (natural way of defining defaults)\n\t\t(attributeDefinition as { defaultValue?: unknown }).defaultValue = propertyDescriptor.initializer?.();\n\t\tdelete propertyDescriptor.initializer;\n\t\tif (\n\t\t\tmetadata.properties[propertyKey.toString()] === undefined ||\n\t\t\tmetadata.properties[propertyKey.toString()] !== attributeDefinition\n\t\t) {\n\t\t\tmetadata.properties[propertyKey.toString()] = attributeDefinition;\n\t\t}\n\n\t\treturn propertyDescriptor;\n\t} as unknown as PropertyDecorator; // Needed to make TS happy with those decorators;\n}\n\n/**\n * Decorator for building blocks.\n *\n * This is an alias for @blockAttribute({ type: \"function\" }).\n * @returns The decorated property\n */\nexport function blockEvent(): PropertyDecorator {\n\treturn blockAttribute({ type: \"function\", isPublic: true });\n}\n\n/**\n * Indicates that the property shall be declared as an xml aggregation that can be used from the outside of the building block.\n * @param aggregationDefinition\n * @returns The decorated property\n */\nexport function blockAggregation(aggregationDefinition: BuildingBlockAggregationDefinition): PropertyDecorator {\n\treturn function (target: BuildingBlockTemplatingBase, propertyKey: string, propertyDescriptor: AccessorDescriptor<unknown>) {\n\t\tconst metadata = ensureMetadata(target.constructor);\n\t\tdelete propertyDescriptor.initializer;\n\t\tif (metadata.aggregations[propertyKey] === undefined || metadata.aggregations[propertyKey] !== aggregationDefinition) {\n\t\t\tmetadata.aggregations[propertyKey] = aggregationDefinition;\n\t\t}\n\t\tif (aggregationDefinition.isDefault === true) {\n\t\t\tmetadata.defaultAggregation = propertyKey;\n\t\t}\n\n\t\treturn propertyDescriptor;\n\t} as unknown as PropertyDecorator;\n}\n\n/**\n * Ensure to create the relevant metadata for the Building block.\n * @param target The building block definition\n * @returns The metadata of the building block\n */\nfunction ensureMetadata(target: Partial<typeof BuildingBlockTemplatingBase>): BuildingBlockMetadata {\n\tif (!Object.getOwnPropertyNames(target).includes(\"metadata\") || target.metadata === undefined) {\n\t\ttarget.metadata = merge(\n\t\t\t{\n\t\t\t\tnamespace: \"\",\n\t\t\t\tname: \"\",\n\t\t\t\tproperties: {},\n\t\t\t\taggregations: {},\n\t\t\t\tstereotype: \"xmlmacro\"\n\t\t\t},\n\t\t\ttarget.metadata ?? {}\n\t\t) as BuildingBlockMetadata;\n\t}\n\treturn target.metadata;\n}\n\nexport function defineBuildingBlock(buildingBlockDefinition: BuildingBlockDefinition): ClassDecorator {\n\treturn function (classDefinition: Partial<typeof BuildingBlockTemplatingBase>) {\n\t\tconst metadata = ensureMetadata(classDefinition);\n\t\tmetadata.namespace = buildingBlockDefinition.namespace;\n\t\tmetadata.publicNamespace = buildingBlockDefinition.publicNamespace;\n\t\tmetadata.name = buildingBlockDefinition.name;\n\t\tmetadata.xmlTag = buildingBlockDefinition.xmlTag;\n\t\tmetadata.fragment = buildingBlockDefinition.fragment;\n\t\tmetadata.designtime = buildingBlockDefinition.designtime;\n\t\tmetadata.isOpen = buildingBlockDefinition.isOpen;\n\t\tmetadata.libraries = buildingBlockDefinition.libraries;\n\t};\n}\n\n/**\n * Convert an existing building block metadata into a ui5 control metadata.\n * @param buildingBlockDefinition\n * @returns The equivalent ui5 control metadata\n */\nexport function convertBuildingBlockMetadata(buildingBlockDefinition: typeof BuildingBlockTemplatingBase): UI5ControlMetadataDefinition {\n\tconst baseMetadata: UI5ControlMetadataDefinition = {\n\t\tcontrollerExtensions: {},\n\t\tproperties: {},\n\t\taggregations: {},\n\t\tassociations: {},\n\t\treferences: {},\n\t\tmethods: {},\n\t\tevents: {},\n\t\tinterfaces: []\n\t};\n\tconst metadata = ensureMetadata(buildingBlockDefinition);\n\tlet bbDefaultAggregation = metadata.defaultAggregation;\n\tfor (const propertyKey in metadata.properties) {\n\t\tconst currentProperty = { ...metadata.properties[propertyKey] };\n\t\tif (propertyKey === \"visible\") {\n\t\t\tcurrentProperty.defaultValue = true;\n\t\t}\n\t\tif (currentProperty.type === \"function\") {\n\t\t\tbaseMetadata.events[propertyKey] = {};\n\t\t} else if (currentProperty.isAssociation === true) {\n\t\t\tbaseMetadata.associations[propertyKey] = { type: \"sap.ui.core.Control\" };\n\t\t} else if (currentProperty.type === \"object\") {\n\t\t\tcurrentProperty.type = currentProperty.underlyingType ?? \"sap.fe.macros.controls.BuildingBlockObjectProperty\";\n\t\t\t(currentProperty as UI5AggregationMetadata).multiple = false;\n\t\t\tbaseMetadata.aggregations[propertyKey] = currentProperty;\n\t\t\tbbDefaultAggregation ??= propertyKey;\n\t\t} else if (currentProperty.type === \"array\") {\n\t\t\tcurrentProperty.type = currentProperty.underlyingType ?? \"sap.fe.macros.controls.BuildingBlockObjectProperty\";\n\t\t\t(currentProperty as UI5AggregationMetadata).multiple = true;\n\t\t\tbaseMetadata.aggregations[propertyKey] = currentProperty;\n\t\t\tbbDefaultAggregation ??= propertyKey;\n\t\t} else {\n\t\t\tif (currentProperty.type === \"sap.ui.model.Context\") {\n\t\t\t\tcurrentProperty.type = \"string\";\n\t\t\t}\n\t\t\tbaseMetadata.properties[propertyKey] = { ...currentProperty };\n\t\t}\n\t}\n\tfor (const aggregationKey in metadata.aggregations) {\n\t\tbaseMetadata.aggregations[aggregationKey] = metadata.aggregations[aggregationKey];\n\t}\n\tbaseMetadata.defaultAggregation = bbDefaultAggregation;\n\tbaseMetadata.buildingBlockMetadata = metadata;\n\treturn baseMetadata;\n}\n"],"mappings":"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","ignoreList":[]}