{"version":3,"file":"ActionHelper.js","names":["getIsActionCriticalExpression","actionTarget","convertedTypes","bindingParameterFullName","isBound","parameters","fullyQualifiedName","undefined","isActionCriticalExp","getExpressionFromAnnotation","annotations","Common","IsActionCritical","path","bindingContextPathVisitor","equal","_exports","isActionParameterRequired","context","actionParameterPath","getInterface","getPath","actionPath","metaModel","getModel","convertTypes","actionParameterTarget","resolvePath","actionParameter","target","action","compileExpression","isActionParameterRequiredExpression","requiresIContext"],"sources":["./ActionHelper.ts"],"sourcesContent":["import type {\n\tAction,\n\tActionParameter,\n\tAnnotationTerm,\n\tConvertedMetadata,\n\tBoolean as EdmBoolean,\n\tPropertyAnnotationValue\n} from \"@sap-ux/vocabularies-types\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, equal, getExpressionFromAnnotation } from \"sap/fe/base/BindingToolkit\";\nimport type { IContext } from \"sap/ui/core/util/XMLPreprocessor\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport { convertTypes } from \"../converters/MetaModelConverter\";\nimport { bindingContextPathVisitor } from \"../helpers/BindingHelper\";\nimport { isActionParameterRequiredExpression } from \"./FieldControlHelper\";\n\n/**\n * Get binding toolkit expressiono for 'is action critical'.\n * @param actionTarget Action\n * @param convertedTypes ConvertedMetadata\n * @returns BindingToolkitExpression\n */\nexport function getIsActionCriticalExpression(actionTarget: Action, convertedTypes: ConvertedMetadata): BindingToolkitExpression<boolean> {\n\tconst bindingParameterFullName = actionTarget.isBound ? actionTarget.parameters[0]?.fullyQualifiedName : undefined;\n\tconst isActionCriticalExp = getExpressionFromAnnotation(\n\t\tactionTarget.annotations.Common?.IsActionCritical as unknown as AnnotationTerm<PropertyAnnotationValue<EdmBoolean>>,\n\t\t[],\n\t\tundefined,\n\t\t(path: string) => bindingContextPathVisitor(path, convertedTypes, bindingParameterFullName)\n\t);\n\treturn equal(isActionCriticalExp, true);\n}\n\n/**\n * Checks whether action parameter is required.\n * @param context Interface context to function arguments' contexts.\n * @returns Compiled expression\n */\nexport const isActionParameterRequired = function (context: IContext): CompiledBindingToolkitExpression {\n\tconst actionParameterPath = context.getInterface(0).getPath();\n\tconst actionPath = context.getInterface(1).getPath();\n\tconst metaModel = context.getInterface(0).getModel();\n\n\tif (actionParameterPath && actionPath && metaModel) {\n\t\tconst convertedTypes = convertTypes(metaModel as ODataMetaModel);\n\t\tconst actionParameterTarget = convertedTypes.resolvePath<ActionParameter>(actionParameterPath);\n\t\tconst actionParameter = actionParameterTarget.target;\n\t\tconst actionTarget = convertedTypes.resolvePath<Action>(actionPath);\n\t\tconst action = actionTarget.target;\n\t\tif (actionParameter && action) {\n\t\t\treturn compileExpression(isActionParameterRequiredExpression(actionParameter, action, convertedTypes));\n\t\t}\n\t}\n};\nisActionParameterRequired.requiresIContext = true;\n"],"mappings":";;;;yVAsBO,SAASA,EAA8BC,EAAsBC,GACnE,MAAMC,EAA2BF,EAAaG,QAAUH,EAAaI,WAAW,IAAIC,mBAAqBC,UACzG,MAAMC,EAAsBC,EAC3BR,EAAaS,YAAYC,QAAQC,iBACjC,GACAL,UACCM,GAAiBC,EAA0BD,EAAMX,EAAgBC,IAEnE,OAAOY,EAAMP,EAAqB,KACnC,CAEAQ,EAAAhB,gCAKO,MAAMiB,EAA4B,SAAUC,GAClD,MAAMC,EAAsBD,EAAQE,aAAa,GAAGC,UACpD,MAAMC,EAAaJ,EAAQE,aAAa,GAAGC,UAC3C,MAAME,EAAYL,EAAQE,aAAa,GAAGI,WAE1C,GAAIL,GAAuBG,GAAcC,EAAW,CACnD,MAAMrB,EAAiBuB,EAAaF,GACpC,MAAMG,EAAwBxB,EAAeyB,YAA6BR,GAC1E,MAAMS,EAAkBF,EAAsBG,OAC9C,MAAM5B,EAAeC,EAAeyB,YAAoBL,GACxD,MAAMQ,EAAS7B,EAAa4B,OAC5B,GAAID,GAAmBE,EAAQ,CAC9B,OAAOC,EAAkBC,EAAoCJ,EAAiBE,EAAQ5B,GACvF,CACD,CACD,EACAe,EAA0BgB,iBAAmB,KAAKjB,EAAAC,4BAAA,OAAAD,CAAA","ignoreList":[]}