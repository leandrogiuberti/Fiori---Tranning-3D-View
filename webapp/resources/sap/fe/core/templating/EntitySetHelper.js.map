{"version":3,"file":"EntitySetHelper.js","names":["getPropertiesRestrictionsBasedOnEntities","entitySet","targetEntitySet","parentNavigationPath","restrictionsFromNavigationRestrictions","nonSortableProperties","getSortRestrictionsfromNavigationRestrictions","nonFilterableProperties","getFilterRestrictionsfromNavigationRestrictions","directRestrictions","getDirectSortRestrictions","getDirectFilterRestrictions","Array","from","Set","getRestrictionsOnProperties","converterContext","propertiesRestrictions","dataModelObjectPath","getDataModelObjectPath","parentEntitySet","getTargetEntitySetInfo","isEntitySet","undefined","_exports","sortRestrictionsFromNavigationRestrictions","annotations","Capabilities","NavigationRestrictions","RestrictedProperties","forEach","navigationRestriction","NavigationProperty","value","SortRestrictions","Sortable","navigationProperty","$target","push","getAllPropertiesOfNavigationProperty","nonSortableNavigationProperties","NonSortableProperties","map","property","getRestrictedPropertyRelativePath","length","sortRestrictionsOnEntitySet","entityType","entityProperties","name","includes","filterRestrictionsFromNavigationRestrictions","FilterRestrictions","Filterable","nonFilterableNavigationProperties","NonFilterableProperties","navigationPathBasedOnParent","replace","targetType","filterRestrictionsOnEntitySet","propertyPath"],"sources":["./EntitySetHelper.ts"],"sourcesContent":["import type { EntitySet, NavigationProperty, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { NavigationPropertyRestriction } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport { isEntitySet } from \"sap/fe/core/helpers/TypeGuards\";\nimport { getTargetEntitySetInfo } from \"./DataModelPathHelper\";\n\nexport type RestrictionsOnProperties = {\n\tnonSortableProperties: string[];\n\tnonFilterableProperties: string[];\n};\n\n/**\n * Reads all FilterRestrictions and SortRestrictions of the main and child entities and their dedicated navigation restrictions.\n1. For containment scenario:\n   1.1. For LR, Navigation restrictions are evaluated first, followed by the restrictions on the root entity. If Navigation property restriction and a direct restriction exist, both are considered.\n   1.2 For the OP, Restrictions are only calculated on the root entity, as there are no child entities. The same approach described in point 1.1 is applied.\n2. For a non containment scenario:\n   2.1 The same logic described in point 1.1 applies.\n   2.2 For the OP, the direct restrictions configured for the OP are considered along with the navigation restrictions on the target (child) entity displayed.\n * @param entitySet Entity set to be analyzed (target or parent entity set).\n * @param targetEntitySet The target entity set, if available.  Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable and non-sortable properties\n */\nconst getPropertiesRestrictionsBasedOnEntities = function (\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): RestrictionsOnProperties {\n\tconst restrictionsFromNavigationRestrictions = {\n\t\tnonSortableProperties: getSortRestrictionsfromNavigationRestrictions(entitySet, targetEntitySet, parentNavigationPath),\n\t\tnonFilterableProperties: getFilterRestrictionsfromNavigationRestrictions(entitySet, targetEntitySet, parentNavigationPath)\n\t};\n\tconst directRestrictions = {\n\t\tnonSortableProperties: getDirectSortRestrictions(entitySet, targetEntitySet, parentNavigationPath),\n\t\tnonFilterableProperties: getDirectFilterRestrictions(entitySet, targetEntitySet, parentNavigationPath)\n\t};\n\treturn {\n\t\tnonSortableProperties: Array.from(\n\t\t\tnew Set([...restrictionsFromNavigationRestrictions.nonSortableProperties, ...directRestrictions.nonSortableProperties])\n\t\t),\n\t\tnonFilterableProperties: Array.from(\n\t\t\tnew Set([...restrictionsFromNavigationRestrictions.nonFilterableProperties, ...directRestrictions.nonFilterableProperties])\n\t\t)\n\t};\n};\n\n/**\n * Gets all SortRestrictions and FilterRestrictions for a given context.\n * This function verifies whether we are in a containment scenario.\n * @param converterContext The converter context.\n * @returns Object containing all property names of restrictions separated by sortable and filterable capabilities.\n */\nexport const getRestrictionsOnProperties = function (converterContext: ConverterContext): RestrictionsOnProperties {\n\tlet propertiesRestrictions: RestrictionsOnProperties = { nonSortableProperties: [], nonFilterableProperties: [] };\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst { parentEntitySet, targetEntitySet, parentNavigationPath } = getTargetEntitySetInfo(dataModelObjectPath);\n\tif (isEntitySet(targetEntitySet)) {\n\t\t// Get the restrictions on the target navigation entity set\n\t\treturn getPropertiesRestrictionsBasedOnEntities(targetEntitySet);\n\t} else if (parentEntitySet && isEntitySet(parentEntitySet)) {\n\t\t// Find the restrictions on the parent entity set, this applies for containment as there isn't an entity set available on the OP\n\t\treturn getPropertiesRestrictionsBasedOnEntities(parentEntitySet, undefined, parentNavigationPath);\n\t}\n\treturn propertiesRestrictions;\n};\n\n/**\n * Gets the sort restrictions from the navigation restrictions.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties from navigation restrictions.\n */\nfunction getSortRestrictionsfromNavigationRestrictions(\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst sortRestrictionsFromNavigationRestrictions: string[] = [];\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// if containment enabled get only the sort restrictions of the related navigation path\n\t\tif (parentNavigationPath && parentNavigationPath !== navigationRestriction?.NavigationProperty?.value) {\n\t\t\treturn;\n\t\t}\n\t\tif (navigationRestriction?.SortRestrictions?.Sortable === false) {\n\t\t\t// find navigation property\n\t\t\tconst navigationProperty = navigationRestriction.NavigationProperty.$target;\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonSortableProperties\n\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t...getAllPropertiesOfNavigationProperty(navigationProperty, navigationRestriction, parentNavigationPath)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst nonSortableNavigationProperties = navigationRestriction?.SortRestrictions?.NonSortableProperties?.map((property) => {\n\t\t\t\treturn getRestrictedPropertyRelativePath(property, targetEntitySet, parentNavigationPath);\n\t\t\t});\n\t\t\tif (nonSortableNavigationProperties?.length) {\n\t\t\t\tsortRestrictionsFromNavigationRestrictions.push(...nonSortableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn sortRestrictionsFromNavigationRestrictions;\n}\n\n/**\n * Gets the sort restrictions directly from the entity set.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-sortable properties.\n */\nfunction getDirectSortRestrictions(entitySet: EntitySet, targetEntitySet?: EntitySet, parentNavigationPath?: string): string[] {\n\tconst sortRestrictionsOnEntitySet: string[] = [];\n\tif (entitySet.annotations.Capabilities?.SortRestrictions?.Sortable === false) {\n\t\t// add all properties of the entity set to the nonSortableProperties\n\t\tsortRestrictionsOnEntitySet.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tconst nonSortableProperties: string[] = [];\n\t\tentitySet.annotations.Capabilities?.SortRestrictions?.NonSortableProperties?.forEach((property) => {\n\t\t\tif (parentNavigationPath && !property.value.includes(parentNavigationPath)) {\n\t\t\t\t// skip the non sortable property if it doesn't belong to the parent navigation path in case of containment\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnonSortableProperties.push(getRestrictedPropertyRelativePath(property, targetEntitySet, parentNavigationPath));\n\t\t});\n\t\tif (nonSortableProperties?.length) {\n\t\t\tsortRestrictionsOnEntitySet.push(...nonSortableProperties);\n\t\t}\n\t}\n\treturn sortRestrictionsOnEntitySet;\n}\n\n/**\n * Gets the filter restrictions from the navigation restrictions.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties from navigation restrictions.\n */\nfunction getFilterRestrictionsfromNavigationRestrictions(\n\tentitySet: EntitySet,\n\ttargetEntitySet?: EntitySet,\n\tparentNavigationPath?: string\n): string[] {\n\tconst filterRestrictionsFromNavigationRestrictions: string[] = [];\n\tentitySet.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties?.forEach((navigationRestriction) => {\n\t\t// Get the filter restrictions of the related navigation path\n\t\t// The navigationRestriction is also relevant if it contains the parent navigation path\n\t\tif (parentNavigationPath && !navigationRestriction?.NavigationProperty?.value.includes(parentNavigationPath)) {\n\t\t\treturn;\n\t\t}\n\t\tif (navigationRestriction?.FilterRestrictions?.Filterable === false) {\n\t\t\t// find navigation property\n\t\t\tconst navigationProperty = navigationRestriction.NavigationProperty.$target;\n\t\t\tif (navigationProperty) {\n\t\t\t\t// add all properties of the navigation property to the nonFilterableProperties\n\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(\n\t\t\t\t\t...getAllPropertiesOfNavigationProperty(navigationProperty, navigationRestriction, parentNavigationPath)\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst nonFilterableNavigationProperties = navigationRestriction?.FilterRestrictions?.NonFilterableProperties?.map(\n\t\t\t\t(property) => {\n\t\t\t\t\treturn getRestrictedPropertyRelativePath(property, targetEntitySet, parentNavigationPath);\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (nonFilterableNavigationProperties?.length) {\n\t\t\t\tfilterRestrictionsFromNavigationRestrictions.push(...nonFilterableNavigationProperties);\n\t\t\t}\n\t\t}\n\t});\n\treturn filterRestrictionsFromNavigationRestrictions;\n}\n\n/**\n * Gets all properties of a navigation property based on the navigation restriction and parent navigation path.\n * @param navigationProperty The navigation property to be analyzed.\n * @param navigationRestriction The navigation restriction to be applied.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns The array of property names of the navigation property.\n */\nfunction getAllPropertiesOfNavigationProperty(\n\tnavigationProperty: NavigationProperty,\n\tnavigationRestriction?: NavigationPropertyRestriction,\n\tparentNavigationPath?: string\n): string[] {\n\tif (parentNavigationPath) {\n\t\t// for containment scenario only\n\t\tif (navigationRestriction?.NavigationProperty?.value !== navigationProperty.name) {\n\t\t\t// in case the target entity set is a child entity set (OP), we need to get the properties based on OP target entity set\n\t\t\tconst navigationPathBasedOnParent = navigationRestriction?.NavigationProperty?.value.replace(`${parentNavigationPath}/`, \"\");\n\t\t\treturn navigationProperty.targetType.entityProperties.map((property) => `${navigationPathBasedOnParent}/${property.name}`);\n\t\t} else {\n\t\t\treturn navigationProperty.targetType.entityProperties.map((property) => property.name);\n\t\t}\n\t} else {\n\t\treturn navigationProperty.targetType.entityProperties.map((property) => `${navigationProperty.name}/${property.name}`);\n\t}\n}\n\n/**\n * Gets the relative path of the property restricted based on the target entity set and parent navigation path.\n * @param property The property to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not present in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns The relative path of the restricted property.\n */\nfunction getRestrictedPropertyRelativePath(\n\tproperty: PropertyPath,\n\ttargetEntitySet: EntitySet | undefined,\n\tparentNavigationPath?: string\n): string {\n\tif (parentNavigationPath && property.value.includes(parentNavigationPath)) {\n\t\t// if the parentNavigationPath is available, we need to check if the property belongs to the parent navigation path\n\t\t// we need to get the property path based on target entity for the child entity set (OP)\n\t\treturn property.value.replace(`${parentNavigationPath}/`, \"\");\n\t} else if (targetEntitySet && property.$target?.name) {\n\t\t// we need the property name from the navigation restriction definition when the targetEntitySet is available and it's not a containment scenario\n\t\treturn property.$target?.name;\n\t} else {\n\t\t// leave the property path unchanged (it is relative to the annotation target!)\n\t\treturn property.value;\n\t}\n}\n\n/**\n * Gets the filter restrictions directly from the entity set.\n * @param entitySet Entity set to be analyzed.\n * @param targetEntitySet The target entity set, if available. Not used in the case of containment.\n * @param parentNavigationPath The parent navigation path, specific for containment scenario to get the correct property based on the parent navigation path.\n * @returns Array containing the property names of all non-filterable properties.\n */\nfunction getDirectFilterRestrictions(entitySet: EntitySet, targetEntitySet?: EntitySet, parentNavigationPath?: string): string[] {\n\tconst filterRestrictionsOnEntitySet: string[] = [];\n\tif (entitySet.annotations.Capabilities?.FilterRestrictions?.Filterable === false) {\n\t\t// add all properties of the entity set to the nonFilterableProperties\n\t\tfilterRestrictionsOnEntitySet.push(...entitySet.entityType.entityProperties.map((property) => property.name));\n\t} else {\n\t\tconst nonFilterableProperties: string[] = [];\n\t\tentitySet.annotations.Capabilities?.FilterRestrictions?.NonFilterableProperties?.forEach((propertyPath) => {\n\t\t\tif (parentNavigationPath && !propertyPath.value.includes(parentNavigationPath)) {\n\t\t\t\t// skip the non filterable property if it doesn't belong to the parent navigation path in case of containment\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tnonFilterableProperties.push(getRestrictedPropertyRelativePath(propertyPath, targetEntitySet, parentNavigationPath));\n\t\t});\n\t\tif (nonFilterableProperties?.length) {\n\t\t\tfilterRestrictionsOnEntitySet.push(...nonFilterableProperties);\n\t\t}\n\t}\n\treturn filterRestrictionsOnEntitySet;\n}\n"],"mappings":"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","ignoreList":[]}