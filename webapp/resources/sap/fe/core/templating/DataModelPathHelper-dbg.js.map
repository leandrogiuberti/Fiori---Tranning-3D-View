{"version":3,"names":["getRelativePaths","contextPath","skipCleanup","getPathRelativeLocation","contextLocation","navigationProperties","map","np","name","_exports","visitedNavProps","arguments","length","undefined","cleanUpNavProp","navProps","currentIdx","currentNav","nextNavProp","isNavigationProperty","partner","splice","getAdditionalNavProp","referenceProps","otherProps","keepReference","additionalNavProps","forEach","navProp","navIndex","push","remainingNavProps","concat","slice","extraNavProp","targetType","find","enhanceDataModelPath","dataModelObjectPath","propertyPath","sPropertyPath","isPathAnnotationExpression","path","target","$target","containsAComplexType","convertedTypes","resolvePath","getTargetNavigationPath","startsWith","substring","targetEntityType","pathSplits","split","newDataModelObjectPath","pathPart","enhanceFromPath","targetObject","targetEntitySet","navigationIndex","referenceEntityType","isEntityType","isComplexType","currentEntitySet","potentialNavProp","navigationPathFromPreviousEntitySet","getNavigationBindingFromPreviousEntitySet","navigationPropertyBinding","hasOwnProperty","potentialComplexType","entityProperties","properties","_type","startingEntitySet","navigation","navigationPropertyLength","lastNavigation","isComplexTypeLastNavigation","navigationPath","i","navigationProperty","getTargetEntitySetPath","initialPath","targetEntitySetPath","replace","bRelative","setTrailingSlash","join","getTargetObjectPath","isServiceObject","isEntitySet","isProperty","isAnnotationTerm","term","qualifier","getContextRelativeTargetObjectPath","forBindingExpression","forFilterConditionPath","_getContextRelativeTargetObjectPath","navProperties","some","isMultipleNavigationProperty","isCollection","isPropertyPathExpression","value","getContextPropertyRestriction","checkFunction","onContext","source","lastNavProp","annotations","Capabilities","isPathUpdatable","extractionParametersOnPath","checkOnPath","annotationObject","UpdateRestrictions","Updatable","getHierarchyParentNavigationPropertyPath","hierarchyQualifier","Aggregation","ParentNavigationProperty","fullyQualifiedName","getNonUpdatableNavigationProperties","nonUpdatableNavigationProperties","NonUpdatableNavigationProperties","nonUpdatableNavigationProperty","navigationPropertyPath","isPathSearchable","SearchRestrictions","Searchable","isPathDeletable","DeleteRestrictions","Deletable","isPathInsertable","InsertRestrictions","Insertable","isPathFilterable","FilterRestrictions","Filterable","checkFilterExpressionRestrictions","allowedExpression","filterExpressionRestrictions","FilterExpressionRestrictions","currentObjectRestriction","restriction","Property","includes","AllowedExpressions","toString","getTargetEntitySetInfo","resetVisitedNavProps","visitedNavigationPropsName","parentEntitySet","parentNavigationPath","containsTarget","checkOnParentNavigation","navigationProps","restrictions","restrictedNavProp","NavigationRestrictions","RestrictedProperties","NavigationProperty","restrictionDefinition","valueOf","isConstant","getExpressionFromAnnotation","constant","_navigationProps","pathRelativeLocation","pathVisitorFunction","pathVisitor","getPathVisitorForSingleton","equal","checkOnTarget","targetRestrictions","ignoreTargetCollection","authorizeUnresolvable","unresolvableExpression","endsWith"],"sourceRoot":".","sources":["DataModelPathHelper.ts"],"sourcesContent":["import type {\n\tComplexType,\n\tConvertedMetadata,\n\tEntitySet,\n\tEntityType,\n\tNavigationProperty,\n\tProperty,\n\tPropertyPath,\n\tServiceObject,\n\tSingleton\n} from \"@sap-ux/vocabularies-types\";\nimport type { NavigationPropertyPath } from \"@sap-ux/vocabularies-types/Edm\";\nimport type {\n\tFilterExpressionRestrictionTypeTypes,\n\tNavigationPropertyRestriction\n} from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type {\n\tEntitySetAnnotations_Capabilities,\n\tEntityTypeAnnotations_Capabilities,\n\tSingletonAnnotations_Capabilities\n} from \"@sap-ux/vocabularies-types/vocabularies/Capabilities_Edm\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { constant, equal, getExpressionFromAnnotation, isConstant, unresolvableExpression } from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport {\n\tisAnnotationTerm,\n\tisComplexType,\n\tisEntitySet,\n\tisEntityType,\n\tisMultipleNavigationProperty,\n\tisNavigationProperty,\n\tisPathAnnotationExpression,\n\tisProperty,\n\tisPropertyPathExpression,\n\tisServiceObject\n} from \"sap/fe/core/helpers/TypeGuards\";\nimport type { PropertyOrPath } from \"sap/fe/core/templating/DisplayModeFormatter\";\n\nexport type DataModelObjectContext = {\n\tstartingEntitySet: Singleton | EntitySet;\n\tnavigationProperties: (NavigationProperty | Property)[];\n\ttargetEntitySet?: Singleton | EntitySet;\n\ttargetEntityType: EntityType;\n\tconvertedTypes: ConvertedMetadata;\n};\n\nexport type DataModelObjectPath<T> = DataModelObjectContext & {\n\tcontextLocation?: DataModelObjectContext;\n\ttargetObject?: T;\n};\n\ntype ExtractionParametersOnPath = {\n\tpropertyPath?: PropertyOrPath<Property>;\n\tpathVisitor?: Function;\n\tignoreTargetCollection?: boolean;\n\tauthorizeUnresolvable?: boolean;\n};\n\n/**\n * Function that returns the relative path to the property from the DataModelObjectPath.\n * @param contextPath The DataModelObjectPath object to the property\n * @param skipCleanup Don't clean up circular navigation properties\n * @returns The path from the root entity set\n */\nexport const getRelativePaths = function (contextPath: DataModelObjectPath<unknown> | undefined, skipCleanup?: boolean): string[] {\n\treturn getPathRelativeLocation(contextPath?.contextLocation, contextPath?.navigationProperties, skipCleanup).map((np) => np.name);\n};\n\n/**\n * Gets the navigation properties from a dataModelObjectPath to the targeted navigation properties.\n * @param contextPath The dataModelObjectPath\n * @param visitedNavProps The targeted navigation properties\n * @param skipCleanup Don't clean up circular navigation properties\n * @returns An array of navigation properties to reach the targeted navigation properties\n */\nexport const getPathRelativeLocation = function (\n\tcontextPath?: DataModelObjectContext,\n\tvisitedNavProps: (NavigationProperty | Property)[] = [],\n\tskipCleanup = false\n): (NavigationProperty | Property)[] {\n\tconst cleanUpNavProp = (navProps: (NavigationProperty | Property)[]): (NavigationProperty | Property)[] => {\n\t\tlet currentIdx = 0;\n\t\twhile (navProps.length > 1 && currentIdx != navProps.length - 1) {\n\t\t\tconst currentNav = navProps[currentIdx];\n\t\t\tconst nextNavProp = navProps[currentIdx + 1];\n\t\t\tif (isNavigationProperty(currentNav) && currentNav.partner === nextNavProp.name) {\n\t\t\t\tnavProps.splice(currentIdx, 2);\n\t\t\t} else {\n\t\t\t\tcurrentIdx++;\n\t\t\t}\n\t\t}\n\t\treturn navProps;\n\t};\n\n\tconst getAdditionalNavProp = (\n\t\treferenceProps: (NavigationProperty | Property)[],\n\t\totherProps: (NavigationProperty | Property)[],\n\t\tkeepReference: boolean\n\t): (NavigationProperty | Property)[] => {\n\t\tconst additionalNavProps: (NavigationProperty | Property)[] = [];\n\t\treferenceProps.forEach((navProp, navIndex) => {\n\t\t\tif (otherProps[navIndex] !== navProp) {\n\t\t\t\tadditionalNavProps.push(keepReference ? navProp : otherProps[navIndex]);\n\t\t\t}\n\t\t});\n\t\treturn additionalNavProps;\n\t};\n\n\tif (!contextPath) {\n\t\treturn visitedNavProps;\n\t}\n\tif (visitedNavProps.length >= contextPath.navigationProperties.length) {\n\t\tlet remainingNavProps = getAdditionalNavProp(contextPath.navigationProperties, visitedNavProps, false);\n\t\tremainingNavProps = remainingNavProps.concat(visitedNavProps.slice(contextPath.navigationProperties.length));\n\t\treturn skipCleanup ? remainingNavProps : cleanUpNavProp(remainingNavProps);\n\t}\n\tlet extraNavProp = getAdditionalNavProp(visitedNavProps, contextPath.navigationProperties, true);\n\textraNavProp = extraNavProp.concat(contextPath.navigationProperties.slice(visitedNavProps.length));\n\tif (!skipCleanup) {\n\t\tcleanUpNavProp(extraNavProp);\n\t}\n\textraNavProp = extraNavProp.map((navProp) => {\n\t\treturn isNavigationProperty(navProp)\n\t\t\t? (navProp.targetType.navigationProperties.find((np) => np.name === navProp.partner) as NavigationProperty)\n\t\t\t: navProp;\n\t});\n\treturn extraNavProp;\n};\n\n/**\n * Gets a new enhanced dataModelObjectPath matching with the provided property.\n * @param dataModelObjectPath The initial dataModelObjectPath\n * @param propertyPath The property path or property to reach\n * @returns A new dataModelObjectPath\n */\nexport const enhanceDataModelPath = function <T>(\n\tdataModelObjectPath: DataModelObjectPath<unknown> | DataModelObjectContext,\n\tpropertyPath?: PropertyOrPath<Property>\n): DataModelObjectPath<T> {\n\tlet sPropertyPath = \"\";\n\tif (isPathAnnotationExpression(propertyPath)) {\n\t\tsPropertyPath = propertyPath.path;\n\t} else if (typeof propertyPath === \"string\") {\n\t\tsPropertyPath = propertyPath;\n\t}\n\tlet target;\n\tif (isPathAnnotationExpression(propertyPath)) {\n\t\ttarget = propertyPath.$target;\n\t} else if (containsAComplexType(dataModelObjectPath)) {\n\t\ttarget = dataModelObjectPath.convertedTypes.resolvePath(`${getTargetNavigationPath(dataModelObjectPath)}/${sPropertyPath}`)?.target;\n\t} else {\n\t\tif (sPropertyPath.startsWith(\"/\")) {\n\t\t\t// remove the leading \"/\" because the path is going to be resolved from the entity type, so it should not be absolute\n\t\t\tsPropertyPath = sPropertyPath.substring(1);\n\t\t}\n\t\ttarget = dataModelObjectPath.targetEntityType.resolvePath(sPropertyPath);\n\t}\n\n\tconst pathSplits = sPropertyPath.split(\"/\");\n\n\tlet newDataModelObjectPath: DataModelObjectPath<T> = dataModelObjectPath as DataModelObjectPath<T>;\n\tfor (const pathPart of pathSplits) {\n\t\tnewDataModelObjectPath = enhanceFromPath(newDataModelObjectPath, pathPart);\n\t}\n\tnewDataModelObjectPath.targetObject = target;\n\treturn newDataModelObjectPath;\n};\n\n/**\n * Gets a new enhanced dataModelObjectPath matching with the provided path\n * The targetObject is not updated by this internal function.\n * @param dataModelObjectPath The initial dataModelObjectPath\n * @param path The object path to reach\n * @returns A new dataModelObjectPath\n */\n\nconst enhanceFromPath = function <T>(dataModelObjectPath: DataModelObjectPath<unknown>, path: string): DataModelObjectPath<T> {\n\tlet targetEntitySet: EntitySet | undefined;\n\tlet targetEntityType: EntityType | undefined;\n\tconst navigationProperties = dataModelObjectPath.navigationProperties.concat();\n\tconst navigationIndex = navigationProperties.length;\n\tconst referenceEntityType = navigationIndex\n\t\t? navigationProperties[navigationIndex - 1].targetType\n\t\t: dataModelObjectPath.targetEntityType;\n\tif (!referenceEntityType) {\n\t\treturn dataModelObjectPath as DataModelObjectPath<T>;\n\t} else if (isEntityType(referenceEntityType) || isComplexType(referenceEntityType)) {\n\t\tconst currentEntitySet = dataModelObjectPath.targetEntitySet;\n\t\tconst potentialNavProp = referenceEntityType.navigationProperties.find((navProp) => navProp.name === path);\n\t\tif (potentialNavProp) {\n\t\t\tnavigationProperties.push(potentialNavProp);\n\t\t\ttargetEntityType = potentialNavProp.targetType;\n\n\t\t\tconst navigationPathFromPreviousEntitySet = getNavigationBindingFromPreviousEntitySet(navigationProperties);\n\t\t\tif (\n\t\t\t\tnavigationPathFromPreviousEntitySet &&\n\t\t\t\tcurrentEntitySet?.navigationPropertyBinding.hasOwnProperty(navigationPathFromPreviousEntitySet)\n\t\t\t) {\n\t\t\t\ttargetEntitySet = currentEntitySet.navigationPropertyBinding[navigationPathFromPreviousEntitySet] as EntitySet;\n\t\t\t}\n\t\t} else {\n\t\t\tconst potentialComplexType = (\n\t\t\t\t(referenceEntityType as EntityType).entityProperties || (referenceEntityType as ComplexType).properties\n\t\t\t).find((navProp) => navProp.name === path);\n\t\t\tif (potentialComplexType?.targetType?._type === \"ComplexType\") {\n\t\t\t\tnavigationProperties.push(potentialComplexType);\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tstartingEntitySet: dataModelObjectPath.startingEntitySet,\n\t\tnavigationProperties: navigationProperties,\n\t\tcontextLocation: dataModelObjectPath.contextLocation,\n\t\ttargetEntitySet: targetEntitySet ?? dataModelObjectPath.targetEntitySet,\n\t\ttargetEntityType: targetEntityType ?? dataModelObjectPath.targetEntityType,\n\t\ttargetObject: dataModelObjectPath.targetObject as T,\n\t\tconvertedTypes: dataModelObjectPath.convertedTypes\n\t};\n};\n\n/**\n * Detects if the DataModelObjectPath has navigated threw a complexType.\n * @param dataModelObjectPath The dataModelObjectPath\n * @returns Is there a complexType into the DataModelObjectPath.\n */\nconst containsAComplexType = function (dataModelObjectPath: DataModelObjectContext): boolean {\n\treturn dataModelObjectPath.navigationProperties.find((navigation) => isComplexType(navigation?.targetType)) !== undefined;\n};\n\n/**\n * Gets the navigation binding from the previous entitySet listed into the navigation properties.\n * @param navigationProperties The navigation properties\n * @returns A new dataModelObjectPath.\n */\nconst getNavigationBindingFromPreviousEntitySet = function (navigationProperties: (NavigationProperty | Property)[]): string {\n\tconst navigationPropertyLength = navigationProperties.length;\n\tif (navigationPropertyLength) {\n\t\tconst lastNavigation = navigationProperties[navigationPropertyLength - 1];\n\t\tconst isComplexTypeLastNavigation = isComplexType(lastNavigation.targetType);\n\t\tlet navigationPath = \"\";\n\t\tif (navigationPropertyLength > 1 && !isComplexTypeLastNavigation) {\n\t\t\tfor (let i = 0; i < navigationPropertyLength - 1; i++) {\n\t\t\t\tconst navigationProperty = navigationProperties[i];\n\t\t\t\tif (isComplexType(navigationProperty.targetType)) {\n\t\t\t\t\tnavigationPath += `${navigationProperty.name}/`;\n\t\t\t\t} else {\n\t\t\t\t\tnavigationPath = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn isComplexTypeLastNavigation ? \"\" : `${navigationPath}${lastNavigation.name}`;\n\t}\n\treturn \"\";\n};\n\n/**\n * Gets the path of the targeted entitySet.\n * @param dataModelObjectPath The dataModelObjectPath\n * @returns The path.\n */\nexport const getTargetEntitySetPath = function (dataModelObjectPath: DataModelObjectPath<unknown>): string {\n\tconst initialPath = `/${dataModelObjectPath.startingEntitySet.name}`;\n\tlet targetEntitySetPath = initialPath;\n\tlet currentEntitySet = dataModelObjectPath.startingEntitySet;\n\tconst navigationProperties = dataModelObjectPath.navigationProperties;\n\tlet navigationPath: string;\n\tfor (let i = 0; i < navigationProperties.length; i++) {\n\t\tnavigationPath = getNavigationBindingFromPreviousEntitySet(navigationProperties.slice(0, i + 1));\n\t\tif (currentEntitySet && currentEntitySet.navigationPropertyBinding.hasOwnProperty(navigationPath)) {\n\t\t\ttargetEntitySetPath += `/$NavigationPropertyBinding/${navigationPath.replace(\"/\", \"%2F\")}`;\n\t\t\tcurrentEntitySet = currentEntitySet.navigationPropertyBinding[navigationPath] as EntitySet;\n\t\t}\n\t}\n\n\ttargetEntitySetPath += \"/$\";\n\treturn targetEntitySetPath;\n};\n\n/**\n * Gets the path of the targeted navigation.\n * @param dataModelObjectPath The dataModelObjectPath\n * @param bRelative\n * @returns The path.\n */\n\nexport const getTargetNavigationPath = function (dataModelObjectPath: DataModelObjectPath<unknown>, bRelative = false): string {\n\tlet path = \"\";\n\tif (!dataModelObjectPath.startingEntitySet) {\n\t\treturn \"/\";\n\t}\n\tif (!bRelative) {\n\t\tpath += `/${dataModelObjectPath.startingEntitySet.name}`;\n\t}\n\tif (dataModelObjectPath.navigationProperties.length > 0) {\n\t\tpath = setTrailingSlash(path);\n\t\tpath += dataModelObjectPath.navigationProperties.map((navProp) => navProp.name).join(\"/\");\n\t}\n\treturn path;\n};\n\n/**\n * Gets the path of the targeted object.\n * @param dataModelObjectPath The dataModelObjectPath\n * @param bRelative\n * @returns The path.\n */\nexport const getTargetObjectPath = function (dataModelObjectPath: DataModelObjectPath<unknown>, bRelative = false): string {\n\tlet path = getTargetNavigationPath(dataModelObjectPath, bRelative);\n\tif (\n\t\tisServiceObject(dataModelObjectPath.targetObject) &&\n\t\t!isNavigationProperty(dataModelObjectPath.targetObject) &&\n\t\t!isEntityType(dataModelObjectPath.targetObject) &&\n\t\t!isEntitySet(dataModelObjectPath.targetObject) &&\n\t\t(!isProperty(dataModelObjectPath.targetObject) || !isComplexType(dataModelObjectPath.targetObject?.targetType)) &&\n\t\tdataModelObjectPath.targetObject !== dataModelObjectPath.startingEntitySet\n\t) {\n\t\tpath = setTrailingSlash(path);\n\t\tpath += `${dataModelObjectPath.targetObject.name}`;\n\t} else if (dataModelObjectPath.targetObject && isAnnotationTerm(dataModelObjectPath.targetObject)) {\n\t\tpath = setTrailingSlash(path);\n\t\tpath += `@${dataModelObjectPath.targetObject.term}`;\n\t\tif (dataModelObjectPath.targetObject.hasOwnProperty(\"qualifier\") && !!dataModelObjectPath.targetObject.qualifier) {\n\t\t\tpath += `#${dataModelObjectPath.targetObject.qualifier}`;\n\t\t}\n\t}\n\treturn path;\n};\n\nexport const getContextRelativeTargetObjectPath = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\tforBindingExpression = false,\n\tforFilterConditionPath = false\n): string | undefined {\n\tif (dataModelObjectPath.contextLocation?.startingEntitySet !== dataModelObjectPath.startingEntitySet) {\n\t\treturn getTargetObjectPath(dataModelObjectPath);\n\t}\n\treturn _getContextRelativeTargetObjectPath(dataModelObjectPath, forBindingExpression, forFilterConditionPath);\n};\n\nconst _getContextRelativeTargetObjectPath = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\tforBindingExpression = false,\n\tforFilterConditionPath = false\n): string | undefined {\n\tif (!dataModelObjectPath.targetObject) {\n\t\treturn undefined;\n\t}\n\tconst navProperties = getPathRelativeLocation(dataModelObjectPath.contextLocation, dataModelObjectPath.navigationProperties);\n\tif (forBindingExpression) {\n\t\tif (navProperties.some(isMultipleNavigationProperty)) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\tlet path = forFilterConditionPath\n\t\t? navProperties\n\t\t\t\t.map((navProp) => {\n\t\t\t\t\tconst isCollection = isMultipleNavigationProperty(navProp);\n\t\t\t\t\treturn isCollection ? `${navProp.name}*` : navProp.name;\n\t\t\t\t})\n\t\t\t\t.join(\"/\")\n\t\t: navProperties.map((navProp) => navProp.name).join(\"/\");\n\n\tif (\n\t\t((isServiceObject(dataModelObjectPath.targetObject) && dataModelObjectPath.targetObject.name) ||\n\t\t\t(isPropertyPathExpression(dataModelObjectPath.targetObject) && dataModelObjectPath.targetObject.value)) &&\n\t\t!isNavigationProperty(dataModelObjectPath.targetObject) &&\n\t\t!isEntityType(dataModelObjectPath.targetObject) &&\n\t\t!isEntitySet(dataModelObjectPath.targetObject) &&\n\t\t(!isProperty(dataModelObjectPath.targetObject) || !isComplexType(dataModelObjectPath.targetObject?.targetType)) &&\n\t\tdataModelObjectPath.targetObject !== dataModelObjectPath.startingEntitySet\n\t) {\n\t\tpath = setTrailingSlash(path);\n\t\tpath += isPropertyPathExpression(dataModelObjectPath.targetObject)\n\t\t\t? `${dataModelObjectPath.targetObject.value}`\n\t\t\t: `${dataModelObjectPath.targetObject.name}`;\n\t} else if (isAnnotationTerm(dataModelObjectPath.targetObject)) {\n\t\tpath = setTrailingSlash(path);\n\t\tpath += `@${dataModelObjectPath.targetObject.term}`;\n\t\tif (dataModelObjectPath.targetObject.hasOwnProperty(\"qualifier\") && !!dataModelObjectPath.targetObject.qualifier) {\n\t\t\tpath += `#${dataModelObjectPath.targetObject.qualifier}`;\n\t\t}\n\t}\n\treturn path;\n};\n\n/**\n * Gets an array of properties where a specific restriction is applied.\n * @param dataModelObjectPath The dataModelObjectPath\n * @param checkFunction The function testing the restriction and returning the array of properties\n * @param onContext Is the restriction tested on the target object or its context\n * @returns The properties.\n */\nexport const getContextPropertyRestriction = (\n\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\tcheckFunction: (\n\t\tcapabilities: EntitySetAnnotations_Capabilities | SingletonAnnotations_Capabilities | undefined\n\t) => PropertyPath[] | undefined,\n\tonContext = true\n): PropertyPath[] => {\n\tconst source = onContext ? dataModelObjectPath.contextLocation : dataModelObjectPath;\n\tconst lastNavProp = source?.navigationProperties?.slice(-1)[0];\n\tconst properties = checkFunction(lastNavProp?.annotations?.Capabilities);\n\treturn properties?.length ? properties : checkFunction(source?.targetEntitySet?.annotations?.Capabilities) || [];\n};\n\nexport const isPathUpdatable = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown> | undefined,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> {\n\treturn checkOnPath(\n\t\tdataModelObjectPath,\n\t\t(annotationObject: NavigationPropertyRestriction | EntitySetAnnotations_Capabilities) => {\n\t\t\treturn annotationObject?.UpdateRestrictions?.Updatable;\n\t\t},\n\t\textractionParametersOnPath\n\t);\n};\n\n/**\n * Gets the parent navigation property of the given node hierarchy.\n * @param dataModelObjectPath The dataModelObjectPath\n * @param hierarchyQualifier The qualifier of the hierarchy set in the manifest\n * @returns The parent navigation property.\n */\nexport const getHierarchyParentNavigationPropertyPath = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\thierarchyQualifier: string\n): string | undefined {\n\treturn dataModelObjectPath.targetEntityType.annotations.Aggregation?.[`RecursiveHierarchy#${hierarchyQualifier}`]\n\t\t?.ParentNavigationProperty.$target?.fullyQualifiedName;\n};\n\n/**\n * Gets an array of navigation properties where an update restriction is applied.\n * @param dataModelObjectPath The dataModelObjectPath\n * @returns The navigation properties with the restriction.\n */\nexport const getNonUpdatableNavigationProperties = function (\n\tdataModelObjectPath: DataModelObjectPath<PageContextPathTarget>\n): (string | undefined)[] | undefined {\n\t// UpdateRestrictions.NonUpdatableNavigationProperties on the parent navigation:\n\t// REVIEW: This is wrong ? the updateRestriction annotation needs to be on entityset but our test sometimes put it on the navigation property\n\tconst nonUpdatableNavigationProperties = (dataModelObjectPath.targetObject as EntitySet)?.annotations?.Capabilities?.UpdateRestrictions\n\t\t?.NonUpdatableNavigationProperties;\n\tif (nonUpdatableNavigationProperties && nonUpdatableNavigationProperties?.length > 0) {\n\t\treturn nonUpdatableNavigationProperties.map(\n\t\t\t(nonUpdatableNavigationProperty: NavigationPropertyPath) =>\n\t\t\t\tdataModelObjectPath.contextLocation &&\n\t\t\t\tenhanceDataModelPath<ServiceObject>(dataModelObjectPath.contextLocation, nonUpdatableNavigationProperty.value).targetObject!\n\t\t\t\t\t.fullyQualifiedName\n\t\t);\n\t}\n\t// UpdateRestrictions.NonUpdatableNavigationProperties on the entitySet (or entityType):\n\treturn dataModelObjectPath.targetEntitySet?.annotations.Capabilities?.UpdateRestrictions?.NonUpdatableNavigationProperties?.map(\n\t\t(navigationPropertyPath) => navigationPropertyPath.$target?.fullyQualifiedName\n\t);\n};\n\nexport const isPathSearchable = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown> | undefined,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> {\n\treturn checkOnPath(\n\t\tdataModelObjectPath,\n\t\t(annotationObject: NavigationPropertyRestriction | EntitySetAnnotations_Capabilities) => {\n\t\t\treturn annotationObject?.SearchRestrictions?.Searchable;\n\t\t},\n\t\textractionParametersOnPath\n\t);\n};\n\nexport const isPathDeletable = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown> | undefined,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> {\n\treturn checkOnPath(\n\t\tdataModelObjectPath,\n\t\t(annotationObject: NavigationPropertyRestriction | EntitySetAnnotations_Capabilities) => {\n\t\t\treturn annotationObject?.DeleteRestrictions?.Deletable;\n\t\t},\n\t\textractionParametersOnPath\n\t);\n};\n\nexport const isPathInsertable = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown> | undefined,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> {\n\treturn checkOnPath(\n\t\tdataModelObjectPath,\n\t\t(annotationObject: NavigationPropertyRestriction | EntitySetAnnotations_Capabilities) => {\n\t\t\treturn annotationObject?.InsertRestrictions?.Insertable;\n\t\t},\n\t\textractionParametersOnPath\n\t);\n};\n\nexport const isPathFilterable = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown> | undefined,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> {\n\treturn checkOnPath(\n\t\tdataModelObjectPath,\n\t\t(annotationObject: NavigationPropertyRestriction | EntitySetAnnotations_Capabilities) => {\n\t\t\treturn annotationObject?.FilterRestrictions?.Filterable;\n\t\t},\n\t\textractionParametersOnPath\n\t);\n};\n\nexport const checkFilterExpressionRestrictions = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\tallowedExpression: (string | undefined)[]\n): BindingToolkitExpression<boolean> {\n\treturn checkOnPath(\n\t\tdataModelObjectPath,\n\t\t(annotationObject: NavigationPropertyRestriction | EntitySetAnnotations_Capabilities | EntityTypeAnnotations_Capabilities) => {\n\t\t\tif (annotationObject && \"FilterRestrictions\" in annotationObject) {\n\t\t\t\tconst filterExpressionRestrictions: FilterExpressionRestrictionTypeTypes[] =\n\t\t\t\t\t(annotationObject?.FilterRestrictions?.FilterExpressionRestrictions as FilterExpressionRestrictionTypeTypes[]) || [];\n\t\t\t\tconst currentObjectRestriction = filterExpressionRestrictions.find((restriction) => {\n\t\t\t\t\treturn (restriction.Property as PropertyPath).$target === dataModelObjectPath.targetObject;\n\t\t\t\t});\n\t\t\t\tif (currentObjectRestriction) {\n\t\t\t\t\treturn allowedExpression.includes(currentObjectRestriction?.AllowedExpressions?.toString());\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t);\n};\n\ntype EntityOrSingleton = Singleton | EntitySet | null;\n/**\n * Gets the target entitySet, its parent and the navigation path from the parent to the target entitySet\n * The target entitySet pointing to either null (in case of containment navprop a last part), or the actual target (non containment as target)\n * The parent entitySet pointing to the previous entitySet used in the path.\n * @param dataModelObjectPath The dataModelObjectPath\n * @returns The target entityset, its parent and the navigation path\n */\nexport const getTargetEntitySetInfo = (\n\tdataModelObjectPath: DataModelObjectPath<unknown>\n): {\n\tparentEntitySet: EntityOrSingleton;\n\ttargetEntitySet: EntityOrSingleton;\n\tparentNavigationPath: string;\n} => {\n\tlet resetVisitedNavProps = false;\n\tlet visitedNavigationPropsName: string[] = [];\n\tlet currentEntitySet: EntityOrSingleton = dataModelObjectPath.startingEntitySet;\n\tlet parentEntitySet: EntityOrSingleton = null;\n\tlet targetEntitySet: EntityOrSingleton = currentEntitySet;\n\tlet parentNavigationPath = \"\";\n\n\tfor (const navigationProperty of dataModelObjectPath.navigationProperties) {\n\t\tif (resetVisitedNavProps) {\n\t\t\tvisitedNavigationPropsName = [];\n\t\t}\n\t\tvisitedNavigationPropsName.push(navigationProperty.name);\n\t\tparentNavigationPath = visitedNavigationPropsName.join(\"/\");\n\t\tif (isProperty(navigationProperty) || !navigationProperty.containsTarget) {\n\t\t\t// We should have a navigationPropertyBinding associated with the path so far which can consist of ([ContainmentNavProp]/)*[NavProp]\n\t\t\tif (currentEntitySet && currentEntitySet.navigationPropertyBinding.hasOwnProperty(parentNavigationPath)) {\n\t\t\t\tparentEntitySet = currentEntitySet;\n\t\t\t\tcurrentEntitySet = currentEntitySet.navigationPropertyBinding[parentNavigationPath];\n\t\t\t\ttargetEntitySet = currentEntitySet;\n\t\t\t\t// If we reached a navigation property with a navigationpropertybinding, we need to reset the visited path on the next iteration (if there is one)\n\t\t\t\tresetVisitedNavProps = true;\n\t\t\t} else {\n\t\t\t\t// We really should not end up here but at least let's try to avoid incorrect behavior\n\t\t\t\tparentEntitySet = currentEntitySet;\n\t\t\t\tcurrentEntitySet = null;\n\t\t\t\tresetVisitedNavProps = true;\n\t\t\t}\n\t\t} else {\n\t\t\tparentEntitySet = currentEntitySet;\n\t\t\ttargetEntitySet = null;\n\t\t}\n\t}\n\n\treturn { parentEntitySet, targetEntitySet, parentNavigationPath };\n};\n\n/**\n * Gets the restrictions set on the parent navigation.\n * @param dataModelObjectPath The dataModelObjectPath\n * @param checkFunction The function to check the annotation\n * @param extractionParametersOnPath The extraction parameters\n * @returns The binding expression.\n */\nconst checkOnParentNavigation = (\n\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\tcheckFunction: Function,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> | undefined => {\n\tconst navigationProps = dataModelObjectPath.navigationProperties;\n\tconst { parentEntitySet, parentNavigationPath } = getTargetEntitySetInfo(dataModelObjectPath);\n\tlet restrictions: BindingToolkitExpression<boolean> | undefined, visitedNavProps: (Property | NavigationProperty)[];\n\tfor (const restrictedNavProp of parentEntitySet?.annotations?.Capabilities?.NavigationRestrictions?.RestrictedProperties ?? []) {\n\t\tif (parentNavigationPath === restrictedNavProp.NavigationProperty.value) {\n\t\t\tconst restrictionDefinition = checkFunction(restrictedNavProp)?.valueOf();\n\t\t\tif (restrictionDefinition !== undefined) {\n\t\t\t\tif (isConstant(getExpressionFromAnnotation(restrictionDefinition))) {\n\t\t\t\t\trestrictions = constant(restrictionDefinition);\n\t\t\t\t} else {\n\t\t\t\t\tconst _navigationProps = navigationProps.slice(0, -1);\n\t\t\t\t\tvisitedNavProps = _navigationProps;\n\t\t\t\t\tif (\n\t\t\t\t\t\tdataModelObjectPath.contextLocation &&\n\t\t\t\t\t\tvisitedNavProps.length < dataModelObjectPath.contextLocation?.navigationProperties.length && // We need to go backward to get the relative path\n\t\t\t\t\t\t!(navigationProps[navigationProps.length - 1] as NavigationProperty).partner\n\t\t\t\t\t) {\n\t\t\t\t\t\t// To go backward we need the partner\n\t\t\t\t\t\trestrictions = undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pathRelativeLocation = getPathRelativeLocation(dataModelObjectPath.contextLocation, visitedNavProps).map(\n\t\t\t\t\t\t\t(np) => np.name\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst pathVisitorFunction = extractionParametersOnPath?.pathVisitor\n\t\t\t\t\t\t\t? getPathVisitorForSingleton(extractionParametersOnPath.pathVisitor, pathRelativeLocation)\n\t\t\t\t\t\t\t: undefined; // send pathVisitor function only when it is defined and only send function or defined as a parameter\n\t\t\t\t\t\trestrictions = equal(\n\t\t\t\t\t\t\tgetExpressionFromAnnotation(restrictionDefinition, pathRelativeLocation, undefined, pathVisitorFunction),\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn restrictions;\n};\n\n/**\n * Gets the restrictions set on the target entitySet.\n * @param dataModelObjectPath The dataModelObjectPath\n * @param checkFunction The function to check the annotation\n * @param extractionParametersOnPath The extraction parameters\n * @returns The binding expression.\n */\nconst checkOnTarget = (\n\tdataModelObjectPath: DataModelObjectPath<unknown>,\n\tcheckFunction: Function,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> | undefined => {\n\tconst targetEntityType: EntityType | null = dataModelObjectPath.targetEntityType;\n\tlet targetRestrictions;\n\tconst { targetEntitySet } = getTargetEntitySetInfo(dataModelObjectPath);\n\tlet restrictionDefinition = checkFunction(targetEntitySet?.annotations?.Capabilities);\n\tif (targetEntitySet === null && restrictionDefinition === undefined) {\n\t\trestrictionDefinition = checkFunction(targetEntityType?.annotations?.Capabilities);\n\t}\n\tif (restrictionDefinition !== undefined) {\n\t\tconst pathRelativeLocation = getRelativePaths(dataModelObjectPath);\n\t\tconst pathVisitorFunction = extractionParametersOnPath?.pathVisitor\n\t\t\t? getPathVisitorForSingleton(extractionParametersOnPath.pathVisitor, pathRelativeLocation)\n\t\t\t: undefined;\n\t\ttargetRestrictions = equal(\n\t\t\tgetExpressionFromAnnotation(restrictionDefinition, pathRelativeLocation, undefined, pathVisitorFunction),\n\t\t\ttrue\n\t\t);\n\t}\n\treturn targetRestrictions;\n};\n\n/**\n * Gets the restrictions applied on the target\n * The restriction is caluclated according to the parent and the target.\n * @param dataModelObjectPath The dataModelObjectPath\n * @param checkFunction The function to check the annotation\n * @param extractionParametersOnPath The extraction parameters\n * @returns The binding expression.\n */\nexport const checkOnPath = function (\n\tdataModelObjectPath: DataModelObjectPath<unknown> | undefined,\n\tcheckFunction: Function,\n\textractionParametersOnPath?: ExtractionParametersOnPath\n): BindingToolkitExpression<boolean> {\n\tif (!dataModelObjectPath || !dataModelObjectPath.startingEntitySet) {\n\t\treturn constant(true);\n\t}\n\n\tdataModelObjectPath = enhanceDataModelPath(dataModelObjectPath, extractionParametersOnPath?.propertyPath);\n\n\t// Restrictions should be evaluated as ParentEntitySet.NavRestrictions[NavPropertyPath] || TargetEntitySet.Restrictions\n\tconst restrictions = checkOnParentNavigation(dataModelObjectPath, checkFunction, extractionParametersOnPath);\n\tconst targetRestrictions = extractionParametersOnPath?.ignoreTargetCollection\n\t\t? undefined\n\t\t: checkOnTarget(dataModelObjectPath, checkFunction, extractionParametersOnPath);\n\n\treturn (\n\t\trestrictions || targetRestrictions || (extractionParametersOnPath?.authorizeUnresolvable ? unresolvableExpression : constant(true))\n\t);\n};\n\n/**\n * Set a trailing slash to a path if not already set.\n * @param path The path\n * @returns The path with a trailing slash\n */\nconst setTrailingSlash = function (path: string): string {\n\tif (path.length && !path.endsWith(\"/\")) {\n\t\treturn `${path}/`;\n\t}\n\treturn path;\n};\n\n// This helper method is used to add relative path location argument to singletonPathVisitorFunction i.e. pathVisitor\n// pathVisitor method is used later to get the correct bindings for singleton entity\n// method is invoked later in pathInModel() method to get the correct binding.\nconst getPathVisitorForSingleton = function (pathVisitor: Function, pathRelativeLocation: string[]): Function {\n\treturn function (path: string) {\n\t\treturn pathVisitor(path, pathRelativeLocation);\n\t};\n};\n"],"mappings":"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","ignoreList":[],"file":"DataModelPathHelper-dbg.js"}