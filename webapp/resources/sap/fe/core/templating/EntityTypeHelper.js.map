{"version":3,"file":"EntityTypeHelper.js","names":["getTitleExpression","entityType","headerInfoTitle","annotations","UI","HeaderInfo","Title","$Type","getExpressionFromAnnotation","Value","Log","error","TypeName","semanticKeys","Common","SemanticKey","concat","map","key","pathInModel","value","_exports"],"sources":["./EntityTypeHelper.ts"],"sourcesContent":["import type { EntityType } from \"@sap-ux/vocabularies-types\";\nimport type { DataField, DataFieldForAnnotation } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { concat, getExpressionFromAnnotation, pathInModel } from \"sap/fe/base/BindingToolkit\";\n\n// Collection of helper functions to retrieve information from an EntityType.\n\n// This is still a work in progress\n\n/**\n * Retrieve the binding expression required to display the title of an entity.\n *\n * This is usually defined as:\n * - the HeaderInfo.Title value\n * - the SemanticKeys properties\n * - the keys properties.\n * @param entityType The target entityType\n * @returns The title binding expression\n */\nexport const getTitleExpression = (entityType: EntityType): BindingToolkitExpression<unknown> | undefined => {\n\t// HeaderInfo can be a [DataField] and any of its children, or a [DataFieldForAnnotation] targeting [ConnectedFields](#ConnectedFields).\n\tconst headerInfoTitle = entityType.annotations?.UI?.HeaderInfo?.Title as DataField | DataFieldForAnnotation;\n\tif (headerInfoTitle) {\n\t\tswitch (headerInfoTitle.$Type) {\n\t\t\tcase UIAnnotationTypes.DataField:\n\t\t\t\treturn getExpressionFromAnnotation(headerInfoTitle.Value);\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\tLog.error(\"DataFieldForAnnotation with connected fields not supported for HeaderInfo.Title\");\n\t\t\t\treturn getExpressionFromAnnotation(entityType.annotations?.UI?.HeaderInfo?.TypeName);\n\t\t}\n\t}\n\tconst semanticKeys = entityType.annotations?.Common?.SemanticKey;\n\tif (semanticKeys) {\n\t\treturn concat(...semanticKeys.map((key) => pathInModel(key.value)));\n\t}\n};\n"],"mappings":";;;;uKAqBO,MAAMA,EAAsBC,IAElC,MAAMC,EAAkBD,EAAWE,aAAaC,IAAIC,YAAYC,MAChE,GAAIJ,EAAiB,CACpB,OAAQA,EAAgBK,OACvB,2CACC,OAAOC,EAA4BN,EAAgBO,OACpD,wDACCC,EAAIC,MAAM,mFACV,OAAOH,EAA4BP,EAAWE,aAAaC,IAAIC,YAAYO,UAE9E,CACA,MAAMC,EAAeZ,EAAWE,aAAaW,QAAQC,YACrD,GAAIF,EAAc,CACjB,OAAOG,KAAUH,EAAaI,IAAKC,GAAQC,EAAYD,EAAIE,QAC5D,GACCC,EAAArB,qBAAA,OAAAqB,CAAA","ignoreList":[]}