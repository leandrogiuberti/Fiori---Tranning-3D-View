{"version":3,"names":["getTitleExpression","entityType","headerInfoTitle","annotations","UI","HeaderInfo","Title","$Type","getExpressionFromAnnotation","Value","Log","error","TypeName","semanticKeys","Common","SemanticKey","concat","map","key","pathInModel","value","_exports"],"sourceRoot":".","sources":["EntityTypeHelper.ts"],"sourcesContent":["import type { EntityType } from \"@sap-ux/vocabularies-types\";\nimport type { DataField, DataFieldForAnnotation } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { concat, getExpressionFromAnnotation, pathInModel } from \"sap/fe/base/BindingToolkit\";\n\n// Collection of helper functions to retrieve information from an EntityType.\n\n// This is still a work in progress\n\n/**\n * Retrieve the binding expression required to display the title of an entity.\n *\n * This is usually defined as:\n * - the HeaderInfo.Title value\n * - the SemanticKeys properties\n * - the keys properties.\n * @param entityType The target entityType\n * @returns The title binding expression\n */\nexport const getTitleExpression = (entityType: EntityType): BindingToolkitExpression<unknown> | undefined => {\n\t// HeaderInfo can be a [DataField] and any of its children, or a [DataFieldForAnnotation] targeting [ConnectedFields](#ConnectedFields).\n\tconst headerInfoTitle = entityType.annotations?.UI?.HeaderInfo?.Title as DataField | DataFieldForAnnotation;\n\tif (headerInfoTitle) {\n\t\tswitch (headerInfoTitle.$Type) {\n\t\t\tcase UIAnnotationTypes.DataField:\n\t\t\t\treturn getExpressionFromAnnotation(headerInfoTitle.Value);\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\tLog.error(\"DataFieldForAnnotation with connected fields not supported for HeaderInfo.Title\");\n\t\t\t\treturn getExpressionFromAnnotation(entityType.annotations?.UI?.HeaderInfo?.TypeName);\n\t\t}\n\t}\n\tconst semanticKeys = entityType.annotations?.Common?.SemanticKey;\n\tif (semanticKeys) {\n\t\treturn concat(...semanticKeys.map((key) => pathInModel(key.value)));\n\t}\n};\n"],"mappings":";;;;;;;;;;;EAOA;;EAEA;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACO,MAAMA,kBAAkB,GAAIC,UAAsB,IAAoD;IAC5G;IACA,MAAMC,eAAe,GAAGD,UAAU,CAACE,WAAW,EAAEC,EAAE,EAAEC,UAAU,EAAEC,KAA2C;IAC3G,IAAIJ,eAAe,EAAE;MACpB,QAAQA,eAAe,CAACK,KAAK;QAC5B;UACC,OAAOC,2BAA2B,CAACN,eAAe,CAACO,KAAK,CAAC;QAC1D;UACCC,GAAG,CAACC,KAAK,CAAC,iFAAiF,CAAC;UAC5F,OAAOH,2BAA2B,CAACP,UAAU,CAACE,WAAW,EAAEC,EAAE,EAAEC,UAAU,EAAEO,QAAQ,CAAC;MACtF;IACD;IACA,MAAMC,YAAY,GAAGZ,UAAU,CAACE,WAAW,EAAEW,MAAM,EAAEC,WAAW;IAChE,IAAIF,YAAY,EAAE;MACjB,OAAOG,MAAM,CAAC,GAAGH,YAAY,CAACI,GAAG,CAAEC,GAAG,IAAKC,WAAW,CAACD,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;IACpE;EACD,CAAC;EAACC,QAAA,CAAArB,kBAAA,GAAAA,kBAAA;EAAA,OAAAqB,QAAA;AAAA","ignoreList":[],"file":"EntityTypeHelper-dbg.js"}