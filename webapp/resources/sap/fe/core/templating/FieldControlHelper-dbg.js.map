{"version":3,"names":["isReadOnlyExpression","oTarget","relativePath","fieldControlExpression","getExpressionFromAnnotation","annotations","Common","FieldControl","isConstant","or","equal","_exports","isDisabledExpression","isNonEditableExpression","hasFieldControlNotMandatory","dataFieldForAnnotation","fieldControl","toString","isStaticallyMandatory","target","isMandatory","fc","value","fieldFieldControl","isProperty","isDataFieldForAnnotation","isDataField","undefined","Value","$target","isRequiredExpression","oFieldControlValue","fieldControlValue","_isRequiredExpression","isActionParameterRequiredExpression","actionParameter","actionTarget","convertedTypes","bindingParameterFullName","isBound","parameters","fullyQualifiedName","fieldControlExp","path","bindingContextPathVisitor"],"sourceRoot":".","sources":["FieldControlHelper.ts"],"sourcesContent":["import type { Action, ActionParameter, ConvertedMetadata, Property } from \"@sap-ux/vocabularies-types\";\nimport type { FieldControl } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAnnotation,\n\tDataPoint,\n\tDataPointType,\n\tDataPointTypeTypes,\n\tFieldGroupType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { equal, getExpressionFromAnnotation, isConstant, or } from \"sap/fe/base/BindingToolkit\";\nimport { isDataField, isDataFieldForAnnotation } from \"../converters/annotations/DataField\";\nimport { bindingContextPathVisitor } from \"../helpers/BindingHelper\";\nimport { isProperty } from \"../helpers/TypeGuards\";\n\n/**\n * Create the binding expression to check if the property is read only or not.\n * @param oTarget The target property or DataField\n * @param relativePath Array of navigation properties pointing to the location of field control property\n * @returns The binding expression resolving to a Boolean being true if it's read only\n */\nexport const isReadOnlyExpression = function (\n\toTarget: Property | DataFieldAbstractTypes | DataPointTypeTypes | ActionParameter | undefined,\n\trelativePath?: string[]\n): BindingToolkitExpression<boolean> {\n\tconst fieldControlExpression = getExpressionFromAnnotation(oTarget?.annotations?.Common?.FieldControl, relativePath);\n\tif (!isConstant(fieldControlExpression)) {\n\t\treturn or(equal(fieldControlExpression, 1), equal(fieldControlExpression, \"1\"));\n\t} else {\n\t\treturn or(\n\t\t\tequal(fieldControlExpression, \"Common.FieldControlType/ReadOnly\"),\n\t\t\tequal(fieldControlExpression, 1),\n\t\t\tequal(fieldControlExpression, \"1\")\n\t\t);\n\t}\n};\n\n/**\n * Create the binding expression to check if the property is disabled or not.\n * @param oTarget The target property or DataField\n * @param relativePath Array of navigation properties pointing to the location of field control property\n * @returns The binding expression resolving to a Boolean being true if it's disabled\n */\nexport const isDisabledExpression = function (\n\toTarget: Property | DataFieldAbstractTypes | DataPointTypeTypes | ActionParameter | undefined,\n\trelativePath?: string[]\n): BindingToolkitExpression<boolean> {\n\tconst fieldControlExpression = getExpressionFromAnnotation(oTarget?.annotations?.Common?.FieldControl, relativePath);\n\tif (!isConstant(fieldControlExpression)) {\n\t\treturn or(equal(fieldControlExpression, 0), equal(fieldControlExpression, \"0\"));\n\t} else {\n\t\treturn or(\n\t\t\tequal(fieldControlExpression, \"Common.FieldControlType/Hidden\"), // deprecated version but still used by stakeholders\n\t\t\tequal(fieldControlExpression, \"Common.FieldControlType/Inapplicable\"),\n\t\t\tequal(fieldControlExpression, 0),\n\t\t\tequal(fieldControlExpression, \"0\")\n\t\t);\n\t}\n};\n\n/**\n * Create the binding expression to check if the property is editable or not.\n * @param oTarget The target property or DataField\n * @param relativePath Array of navigation properties pointing to the location of field control property\n * @returns The binding expression resolving to a Boolean being true if it's not editable\n */\nexport const isNonEditableExpression = function (\n\toTarget: Property | DataFieldAbstractTypes | DataPointTypeTypes | undefined,\n\trelativePath?: string[]\n): BindingToolkitExpression<boolean> {\n\treturn or(isReadOnlyExpression(oTarget, relativePath), isDisabledExpression(oTarget, relativePath));\n};\n\n/**\n * Determines if the dataFieldForAnnotation has a fieldControl that is not set to Mandatory.\n * @param dataFieldForAnnotation The dataFieldForAnnotation being processed\n * @returns True if it has a fieldControl set and not Mandatory.\n */\nexport const hasFieldControlNotMandatory = function (dataFieldForAnnotation: DataFieldForAnnotation): boolean {\n\tconst fieldControl = dataFieldForAnnotation.annotations?.Common?.FieldControl;\n\treturn fieldControl && fieldControl.toString() !== \"Common.FieldControlType/Mandatory\" ? true : false;\n};\n\n/**\n * Determines if the target has a field control annotation with static value mandatory .\n * @param target The target to be processed\n * @returns True if it has a static mandatory field control.\n */\nexport function isStaticallyMandatory(target: DataField | DataFieldForAnnotation | DataPoint | Property | undefined): boolean {\n\tconst isMandatory = (fc: FieldControl | undefined): boolean => {\n\t\tconst value = fc?.toString?.();\n\t\treturn value === \"7\" || value === \"Common.FieldControlType/Mandatory\";\n\t};\n\tconst fieldFieldControl = target?.annotations?.Common?.FieldControl;\n\tif (isProperty(target) || isDataFieldForAnnotation(target as DataFieldForAnnotation)) {\n\t\treturn isMandatory(fieldFieldControl);\n\t}\n\tif (isDataField(target)) {\n\t\tif (isMandatory(fieldFieldControl)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (fieldFieldControl?.toString() !== undefined) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn isMandatory(target?.Value?.$target?.annotations?.Common?.FieldControl);\n\t\t}\n\t}\n\treturn isMandatory((target as DataPoint)?.Value?.$target?.annotations?.Common?.FieldControl);\n}\n\n/**\n * Create the binding expression to check if the property is read only or not.\n * @param oTarget The target property or DataField\n * @param relativePath Array of navigation properties pointing to the location of field control property\n * @returns The binding expression resolving to a Boolean being true if it's read only\n */\nexport const isRequiredExpression = function (\n\toTarget: Property | DataFieldAbstractTypes | DataPointType | FieldGroupType | undefined,\n\trelativePath?: string[]\n): BindingToolkitExpression<boolean> {\n\tconst oFieldControlValue = oTarget?.annotations?.Common?.FieldControl;\n\tconst fieldControlValue = getExpressionFromAnnotation(oFieldControlValue, relativePath);\n\treturn _isRequiredExpression(fieldControlValue);\n};\n\n/**\n * Create the binding expression to check if action parameter is required.\n * @param actionParameter Action parameter\n * @param actionTarget Action definition\n * @param convertedTypes Converted Metadata\n * @returns Is required binding expression for parameter.\n */\nexport const isActionParameterRequiredExpression = function (\n\tactionParameter: ActionParameter,\n\tactionTarget: Action,\n\tconvertedTypes: ConvertedMetadata\n): BindingToolkitExpression<boolean> {\n\tconst bindingParameterFullName = actionTarget.isBound ? actionTarget.parameters[0]?.fullyQualifiedName : undefined;\n\tconst fieldControlValue = actionParameter.annotations?.Common?.FieldControl;\n\tconst fieldControlExp = getExpressionFromAnnotation(fieldControlValue, [], undefined, (path: string) =>\n\t\tbindingContextPathVisitor(path, convertedTypes, bindingParameterFullName)\n\t);\n\n\treturn _isRequiredExpression(fieldControlExp);\n};\n\nconst _isRequiredExpression = (fieldControlExp: BindingToolkitExpression<string | number>): BindingToolkitExpression<boolean> => {\n\treturn or(\n\t\tisConstant(fieldControlExp) && equal(fieldControlExp, \"Common.FieldControlType/Mandatory\"),\n\t\tequal(fieldControlExp, 7),\n\t\tequal(fieldControlExp, \"7\")\n\t);\n};\n"],"mappings":"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","ignoreList":[],"file":"FieldControlHelper-dbg.js"}