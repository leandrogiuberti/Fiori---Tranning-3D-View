{"version":3,"names":["getExpressionBinding","expression","compileExpression","_exports","getBindingWithTextArrangement","propertyDataModelPath","propertyBindingExpression","fieldFormatOptions","customFormatter","targetDisplayModeOverride","displayMode","outExpression","propertyDefinition","isPropertyPathExpression","targetObject","$target","targetDisplayMode","UIFormatters","getDisplayMode","commonText","annotations","Common","Text","relativeLocation","getRelativePaths","formatter","valueFormatters","formatWithBrackets","formatWithTypeInformation","getExpressionFromAnnotation","formatResult","getBindingWithText","targetDataModelPath","isPathAnnotationExpression","enhanceDataModelPath","path","pathInModel","getContextRelativeTargetObjectPath","textArrangementBinding","UI","isReferencePropertyStaticallyHidden","DataFieldDefault","undefined"],"sourceRoot":".","sources":["CommonFormatters.ts"],"sourcesContent":["import type { PathAnnotationExpression, Property } from \"@sap-ux/vocabularies-types\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { isPathAnnotationExpression, isPropertyPathExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, getRelativePaths } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type * as DisplayModeFormatter from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport * as UIFormatters from \"sap/fe/core/templating/UIFormatters\";\nimport { isReferencePropertyStaticallyHidden } from \"../converters/helpers/DataFieldHelper\";\nexport type DisplayMode = DisplayModeFormatter.DisplayMode;\n\n// Import-export methods related to the common annotations used by the converter to use them in the templating through the Common Formatters.\n\n/**\n * Retrieves the expressionBinding created out of a binding expression.\n * @param expression The expression which needs to be compiled\n * @returns The expression-binding string\n */\nexport const getExpressionBinding = function (expression: BindingToolkitExpression<unknown>): CompiledBindingToolkitExpression {\n\treturn compileExpression(expression);\n};\nexport const getBindingWithTextArrangement = function (\n\tpropertyDataModelPath: DataModelObjectPath<Property>,\n\tpropertyBindingExpression: BindingToolkitExpression<string>,\n\tfieldFormatOptions?: { displayMode?: DisplayMode },\n\tcustomFormatter?: string\n): BindingToolkitExpression<string> {\n\tconst targetDisplayModeOverride = fieldFormatOptions?.displayMode;\n\tlet outExpression = propertyBindingExpression;\n\tconst propertyDefinition = isPropertyPathExpression(propertyDataModelPath.targetObject)\n\t\t? (propertyDataModelPath.targetObject.$target as Property)\n\t\t: (propertyDataModelPath.targetObject as Property);\n\tconst targetDisplayMode = targetDisplayModeOverride || UIFormatters.getDisplayMode(propertyDataModelPath);\n\tconst commonText = propertyDefinition?.annotations?.Common?.Text;\n\tconst relativeLocation = getRelativePaths(propertyDataModelPath);\n\tconst formatter = customFormatter || valueFormatters.formatWithBrackets;\n\tpropertyBindingExpression = propertyDefinition && formatWithTypeInformation(propertyDefinition, propertyBindingExpression);\n\tif (targetDisplayMode !== \"Value\" && commonText) {\n\t\tswitch (targetDisplayMode) {\n\t\t\tcase \"Description\":\n\t\t\t\toutExpression = getExpressionFromAnnotation(commonText, relativeLocation);\n\t\t\t\tbreak;\n\t\t\tcase \"DescriptionValue\":\n\t\t\t\toutExpression = formatResult(\n\t\t\t\t\t[getExpressionFromAnnotation(commonText, relativeLocation), propertyBindingExpression],\n\t\t\t\t\tformatter\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"ValueDescription\":\n\t\t\t\toutExpression = formatResult(\n\t\t\t\t\t[propertyBindingExpression, getExpressionFromAnnotation(commonText, relativeLocation)],\n\t\t\t\t\tformatter\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn outExpression;\n};\nexport const getBindingWithText = function (\n\ttargetDataModelPath: DataModelObjectPath<Property | PathAnnotationExpression<Property>>,\n\tcustomFormatter?: string\n): CompiledBindingToolkitExpression {\n\tlet propertyDataModelPath: DataModelObjectPath<Property>;\n\tif (isPathAnnotationExpression<Property>(targetDataModelPath?.targetObject)) {\n\t\tpropertyDataModelPath = enhanceDataModelPath<Property>(targetDataModelPath, targetDataModelPath.targetObject?.path);\n\t} else {\n\t\tpropertyDataModelPath = targetDataModelPath as DataModelObjectPath<Property>;\n\t}\n\tconst propertyDefinition = propertyDataModelPath.targetObject as Property;\n\n\tlet propertyBindingExpression = pathInModel(\n\t\tgetContextRelativeTargetObjectPath(propertyDataModelPath)\n\t) as BindingToolkitExpression<string>;\n\n\tpropertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression, true);\n\tconst textArrangementBinding = getBindingWithTextArrangement(propertyDataModelPath, propertyBindingExpression, {}, customFormatter);\n\treturn ((propertyDefinition.annotations.UI &&\n\t\t!isReferencePropertyStaticallyHidden(propertyDefinition.annotations.UI.DataFieldDefault) &&\n\t\tcompileExpression(textArrangementBinding)) ||\n\t\tundefined) as CompiledBindingToolkitExpression;\n};\n"],"mappings":"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","ignoreList":[],"file":"CommonFormatters-dbg.js"}