{"version":3,"file":"ActionRuntime.js","names":["initializeTableActionProperties","internalModelContext","action","forContextMenu","setProperty","handleNoSelectedContexts","promises","bEnabled","aApplicable","aNotApplicable","push","CommonUtils","setContextsBasedOnOperationAvailable","then","handleSelectedContexts","requestPromises","handleTableContexts","selectedContexts","property","length","ActionRuntime","_addMessageForActionParameter","messageParameters","Messaging","addMessages","map","messageParameter","binding","actionParameterInfo","field","getBinding","isMultiValue","Message","message","type","MessageType","Error","processor","getModel","undefined","persistent","target","getResolvedPath","validateProperties","async","actionParameterInfos","resourceModel","Promise","allSettled","validationPromise","requiredParameterInfos","filter","parameterInfo","getRequired","allMessages","getMessageModel","getData","emptyRequiredFields","requiredParameterInfo","fieldId","getId","relevantMessages","msg","getControlIds","some","controlId","includes","value","fieldValue","getValue","isFieldArray","Array","isArray","this","getText","getParent","getAggregation","firstInvalidParameter","find","getVisible","hasError","getValueState","setVisible","focus","setActionEnablement","oInternalModelContext","oActionOperationAvailableMap","aSelectedContexts","sControl","arguments","aPromises","sAction","aRequestPromises","sProperty","selectedContext","oContextData","getObject","_setActionEnablementForTable","getProperty","all","results","flat","setActionEnablementAfterPatch","oView","oListBinding","oInternalModelContextData","oControls","controls","sKey","oTable","byId","isA","oRowBinding","getRowBinding","tableAPI","getBindingContext","JSON","parse","tableDefinition","operationAvailableMap","getSelectedContexts","updateEditButtonVisibilityAndEnablement","iViewLevel","getViewData","viewLevel","isEditable","getIsEditable","oContext","oAppComponent","getAppComponent","sMetaPath","ModelHelper","getMetaPathForContext","sEntitySet","getRootEntitySetPath","metaContext","getMetaModel","getContext","getPath","converterContext","ConverterContext","createConverterContextForMacro","getDiagnostics","merge","entitySet","getEntitySet","entityType","getEntityType","updateHidden","bUpdateHidden","isEntitySet","annotations","UI","UpdateHidden","valueOf","isUpdateHidden","sEditEnableBinding","getEditButtonEnabled","draftRootPath","getDraftRootPath","sStickyRootPath","getStickyRootPath","sPath","oRootContext","bindContext","getBoundContext","sHiddenExpression","compileExpression","equal","getHiddenExpression","updateEditModelContext","sBindingExpression","oHiddenElement","AnyElement","anyText","setBindingContext","addDependent","$$groupId","attachChange","oEvent","oNewValue","getSource","getExternalValue","oSelectedContext","sEnablementFieldName","bActionEnabled","bEnabledForContextMenu","aApplicableForContextMenu","aNotApplicableForContextMenu","sDynamicActionEnabledPath","oTransformedBinding","transformRecursively","oBindingExpression","constant","path","sResult","setDynamicActionContexts","requestProperty"],"sources":["./ActionRuntime.ts"],"sourcesContent":["import type { ActionParameter as EdmActionParameter, PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport merge from \"sap/base/util/merge\";\nimport type { PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, constant, equal, transformRecursively } from \"sap/fe/base/BindingToolkit\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type { _RequestedProperty } from \"sap/fe/core/CommonUtils\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isEntitySet } from \"sap/fe/core/helpers/TypeGuards\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type Label from \"sap/m/Label\";\nimport type Event from \"sap/ui/base/Event\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Field from \"sap/ui/mdc/Field\";\nimport type MultiValueField from \"sap/ui/mdc/MultiValueField\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type MultiValueFieldItem from \"sap/ui/mdc/field/MultiValueFieldItem\";\nimport type PropertyBinding from \"sap/ui/model/PropertyBinding\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport type FileUploader from \"sap/ui/unified/FileUploader\";\nimport AnyElement from \"./controls/AnyElement\";\nimport ConverterContext from \"./converters/ConverterContext\";\nimport type { BaseManifestSettings } from \"./converters/ManifestSettings\";\nimport { getEditButtonEnabled, getHiddenExpression } from \"./converters/objectPage/HeaderAndFooterAction\";\n\nexport type ActionParameterInfo = {\n\tparameter?: EdmActionParameter;\n\tfield: Field | MultiValueField | FileUploader;\n\tisMultiValue: boolean;\n\tvalue?: string | MultiValueFieldItem[] | Record<string, string>;\n\tvalidationPromise?: Promise<string | MultiValueFieldItem[]>;\n\thasError: boolean;\n\tpropertyPath?: string;\n};\n\n/**\n * Initializes the properties of a table action in the internal model context.\n * @param internalModelContext The internal model context where the action properties are set.\n * @param action The name of the action for which properties are initialized.\n * @param forContextMenu Indicates if the action is for a context menu.\n */\nfunction initializeTableActionProperties(internalModelContext: InternalModelContext, action: string, forContextMenu: boolean): void {\n\tinternalModelContext.setProperty(`dynamicActions/${action}/aApplicable`, []);\n\tinternalModelContext.setProperty(`dynamicActions/${action}/aNotApplicable`, []);\n\tif (forContextMenu) {\n\t\tinternalModelContext.setProperty(`dynamicActions/${action}/bEnabledForContextMenu`, false);\n\t} else {\n\t\tinternalModelContext.setProperty(`dynamicActions/${action}/bEnabled`, false);\n\t}\n}\n\n/**\n * Handles the case when no contexts are selected for an action.\n * @param internalModelContext The internal model context where the action properties are set.\n * @param action The name of the action for which properties are initialized.\n * @param promises An array of promises to be resolved after setting the action properties.\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar.\n */\nfunction handleNoSelectedContexts(\n\tinternalModelContext: InternalModelContext,\n\taction: string,\n\tpromises: Promise<void[]>[],\n\tforContextMenu: boolean\n): void {\n\tinternalModelContext.setProperty(`dynamicActions/${action}`, {\n\t\tbEnabled: false,\n\t\taApplicable: [],\n\t\taNotApplicable: []\n\t});\n\tpromises.push(CommonUtils.setContextsBasedOnOperationAvailable(internalModelContext, [], forContextMenu).then(() => []));\n}\n\n/**\n * Handles the case when contexts are selected for an action.\n * @param internalModelContext The internal model context where the action properties are set.\n * @param requestPromises An array of promises to be resolved after setting the action properties.\n * @param promises\tAn array of promises to be resolved after setting the action properties.\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar.\n */\nfunction handleSelectedContexts(\n\tinternalModelContext: InternalModelContext,\n\trequestPromises: Promise<_RequestedProperty>[],\n\tpromises: Promise<void[]>[],\n\tforContextMenu: boolean\n): void {\n\tpromises.push(CommonUtils.setContextsBasedOnOperationAvailable(internalModelContext, requestPromises, forContextMenu).then(() => []));\n}\n\n/**\n * Handles the action enablement for table contexts.\n * @param selectedContexts  Selected contexts for the action.\n * @param internalModelContext \tInternal model context where the action properties are set.\n * @param action Name of the action for which properties are initialized.\n * @param property Property to be checked for the action.\n * @param requestPromises Promises to be resolved after setting the action properties.\n * @param forContextMenu True if the action appears in the context menu, false if it appears in the table toolbar.\n * @param promises Pâ€šromises to be resolved after setting the action properties.\n */\nfunction handleTableContexts(\n\tselectedContexts: Context[],\n\tinternalModelContext: InternalModelContext,\n\taction: string,\n\tproperty: string,\n\trequestPromises: Promise<_RequestedProperty>[],\n\tforContextMenu: boolean,\n\tpromises: Promise<void[]>[]\n): void {\n\tif (!selectedContexts.length) {\n\t\thandleNoSelectedContexts(internalModelContext, action, promises, forContextMenu);\n\t} else if (selectedContexts.length && typeof property === \"string\") {\n\t\thandleSelectedContexts(internalModelContext, requestPromises, promises, forContextMenu);\n\t}\n}\n\nconst ActionRuntime = {\n\t/**\n\t * Adds error messages for an action parameter field to the message manager.\n\t * @param messageParameters Information identifying an action parameter and messages referring to this parameter\n\t */\n\t_addMessageForActionParameter: function (messageParameters: { actionParameterInfo: ActionParameterInfo; message: string }[]): void {\n\t\tMessaging.addMessages(\n\t\t\tmessageParameters.map((messageParameter) => {\n\t\t\t\tconst binding = messageParameter.actionParameterInfo.field.getBinding(\n\t\t\t\t\tmessageParameter.actionParameterInfo.isMultiValue ? \"items\" : \"value\"\n\t\t\t\t);\n\t\t\t\treturn new Message({\n\t\t\t\t\tmessage: messageParameter.message,\n\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\tprocessor: binding?.getModel() ?? undefined, // getModel(): null | Model ~~> processor?: MessageProcessor\n\t\t\t\t\tpersistent: true,\n\t\t\t\t\ttarget: binding?.getResolvedPath()\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t},\n\n\t/**\n\t * Checks if all required action parameters contain data and checks for all action parameters if the\n\t * contained data is valid.\n\t * @param actionParameterInfos Information identifying an action parameter\n\t * @param resourceModel The model to load text resources\n\t * @returns The validation result can be true or false\n\t */\n\tvalidateProperties: async function (actionParameterInfos: ActionParameterInfo[], resourceModel: ResourceModel): Promise<boolean> {\n\t\tawait Promise.allSettled(\n\t\t\tactionParameterInfos.map(\n\t\t\t\t(actionParameterInfo): Promise<string | MultiValueFieldItem[]> | undefined => actionParameterInfo.validationPromise\n\t\t\t)\n\t\t);\n\n\t\tconst requiredParameterInfos = actionParameterInfos.filter(\n\t\t\t(parameterInfo) =>\n\t\t\t\t(parameterInfo.field as Field | MultiValueField).getRequired &&\n\t\t\t\t(parameterInfo.field as Field | MultiValueField).getRequired()\n\t\t);\n\n\t\tconst allMessages = Messaging.getMessageModel().getData();\n\t\tconst emptyRequiredFields = requiredParameterInfos.filter((requiredParameterInfo) => {\n\t\t\tconst fieldId = requiredParameterInfo.field.getId();\n\t\t\tconst relevantMessages = allMessages.filter((msg: Message) =>\n\t\t\t\tmsg.getControlIds().some((controlId: string) => controlId.includes(fieldId))\n\t\t\t);\n\t\t\tif (relevantMessages.length > 0) {\n\t\t\t\treturn false;\n\t\t\t} else if (requiredParameterInfo.isMultiValue) {\n\t\t\t\treturn requiredParameterInfo.value === undefined || !requiredParameterInfo.value.length;\n\t\t\t} else {\n\t\t\t\tconst fieldValue = (requiredParameterInfo.field as Field).getValue();\n\t\t\t\tconst isFieldArray = Array.isArray((requiredParameterInfo.field as Field).getValue());\n\t\t\t\tif (isFieldArray) {\n\t\t\t\t\t// only first value check is enough as the field value comes on [0] rest of the array includes currency and currency code\n\t\t\t\t\t// both of which can or cannot be null, so we shall check only the field value\n\t\t\t\t\treturn fieldValue[0] === null || fieldValue[0] === \"\";\n\t\t\t\t}\n\t\t\t\treturn fieldValue === undefined || fieldValue === null || fieldValue === \"\";\n\t\t\t}\n\t\t});\n\t\t/* Message for missing mandatory value of the action parameter */\n\t\tif (emptyRequiredFields.length) {\n\t\t\tthis._addMessageForActionParameter(\n\t\t\t\temptyRequiredFields.map((actionParameterInfo) => ({\n\t\t\t\t\tactionParameterInfo: actionParameterInfo,\n\t\t\t\t\tmessage: resourceModel.getText(\"C_OPERATIONS_ACTION_PARAMETER_DIALOG_MISSING_MANDATORY_MSG\", [\n\t\t\t\t\t\t(actionParameterInfo.field.getParent()?.getAggregation(\"label\") as Label).getText()\n\t\t\t\t\t])\n\t\t\t\t}))\n\t\t\t);\n\t\t}\n\t\t/* Check value state of all parameters */\n\t\tconst firstInvalidParameter = actionParameterInfos.find(\n\t\t\t(parameterInfo) =>\n\t\t\t\tparameterInfo.field.getVisible() &&\n\t\t\t\t(parameterInfo.hasError || parameterInfo.field.getValueState() === \"Error\" || emptyRequiredFields.includes(parameterInfo))\n\t\t);\n\t\tif (firstInvalidParameter) {\n\t\t\tfirstInvalidParameter.field.setVisible(true);\n\t\t\tfirstInvalidParameter.field.focus();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t},\n\n\t/**\n\t * Sets the action enablement.\n\t * @param oInternalModelContext Object containing the context model\n\t * @param oActionOperationAvailableMap Map containing the operation availability of actions\n\t * @param aSelectedContexts Array containing selected contexts of the chart\n\t * @param sControl Control name\n\t * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n\t * @returns The action enablement promises\n\t */\n\tsetActionEnablement: async function (\n\t\toInternalModelContext: InternalModelContext,\n\t\toActionOperationAvailableMap: Record<string, string>,\n\t\taSelectedContexts: Context[],\n\t\tsControl: string,\n\t\tforContextMenu = false\n\t): Promise<void[]> {\n\t\tconst aPromises: Promise<void[]>[] = [];\n\t\tfor (const sAction in oActionOperationAvailableMap) {\n\t\t\tlet aRequestPromises: Promise<_RequestedProperty>[] = [];\n\t\t\toInternalModelContext.setProperty(sAction, false);\n\t\t\tif (sControl === \"table\") {\n\t\t\t\tinitializeTableActionProperties(oInternalModelContext, sAction, forContextMenu);\n\t\t\t}\n\t\t\tconst sProperty = oActionOperationAvailableMap[sAction];\n\t\t\tfor (const selectedContext of aSelectedContexts) {\n\t\t\t\tif (selectedContext) {\n\t\t\t\t\tconst oContextData = selectedContext.getObject() as Record<string, unknown>;\n\t\t\t\t\tif (sControl === \"chart\") {\n\t\t\t\t\t\tif ((sProperty === null && !!oContextData[`#${sAction}`]) || selectedContext.getObject(sProperty)) {\n\t\t\t\t\t\t\t//look for action advertisement if present and its value is not null\n\t\t\t\t\t\t\toInternalModelContext.setProperty(sAction, true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (sControl === \"table\") {\n\t\t\t\t\t\taRequestPromises = this._setActionEnablementForTable(\n\t\t\t\t\t\t\tselectedContext,\n\t\t\t\t\t\t\toInternalModelContext,\n\t\t\t\t\t\t\tsAction,\n\t\t\t\t\t\t\tsProperty,\n\t\t\t\t\t\t\taRequestPromises,\n\t\t\t\t\t\t\tforContextMenu\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (sControl === \"table\") {\n\t\t\t\thandleTableContexts(\n\t\t\t\t\taSelectedContexts,\n\t\t\t\t\toInternalModelContext,\n\t\t\t\t\tsAction,\n\t\t\t\t\tsProperty,\n\t\t\t\t\taRequestPromises,\n\t\t\t\t\tforContextMenu,\n\t\t\t\t\taPromises\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (aSelectedContexts.length > 0) {\n\t\t\t// trigger an explicit refresh of the selected context to update\n\t\t\t// also the contexts in case of custom actions\n\t\t\tconst selectedContexts = oInternalModelContext.getProperty(\"selectedContexts\") || [];\n\t\t\toInternalModelContext.setProperty(\"selectedContexts\", []);\n\t\t\toInternalModelContext.setProperty(\"selectedContexts\", selectedContexts);\n\t\t}\n\n\t\treturn Promise.all(aPromises).then((results) => results.flat());\n\t},\n\tsetActionEnablementAfterPatch: function (\n\t\toView: View,\n\t\toListBinding: ODataListBinding,\n\t\toInternalModelContext: InternalModelContext\n\t): void {\n\t\tconst oInternalModelContextData = oInternalModelContext?.getObject() as Record<string, unknown>;\n\t\tconst oControls = (oInternalModelContextData?.controls || {}) as Record<string, { controlId?: string }>;\n\t\tfor (const sKey in oControls) {\n\t\t\tif (oControls[sKey] && oControls[sKey].controlId) {\n\t\t\t\tconst oTable = oView.byId(sKey);\n\t\t\t\tif (oTable && oTable.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\t\t\t\tconst oRowBinding = oTable.getRowBinding();\n\t\t\t\t\tif (oRowBinding == oListBinding) {\n\t\t\t\t\t\tconst tableAPI = oTable.getParent() as TableAPI;\n\t\t\t\t\t\tActionRuntime.setActionEnablement(\n\t\t\t\t\t\t\toTable.getBindingContext(\"internal\") as InternalModelContext,\n\t\t\t\t\t\t\tJSON.parse(tableAPI.tableDefinition.operationAvailableMap),\n\t\t\t\t\t\t\toTable.getSelectedContexts() as Context[],\n\t\t\t\t\t\t\t\"table\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tupdateEditButtonVisibilityAndEnablement(oView: FEView): void {\n\t\tconst iViewLevel = (oView.getViewData() as BaseManifestSettings)?.viewLevel,\n\t\t\tisEditable = CommonUtils.getIsEditable(oView);\n\t\tif ((iViewLevel as number) > 1 && isEditable !== true) {\n\t\t\tconst oContext = oView.getBindingContext();\n\t\t\tconst oAppComponent = CommonUtils.getAppComponent(oView);\n\t\t\tconst sMetaPath = ModelHelper.getMetaPathForContext(oContext);\n\t\t\tconst sEntitySet = ModelHelper.getRootEntitySetPath(sMetaPath);\n\t\t\tconst metaContext = oContext\n\t\t\t\t?.getModel()\n\t\t\t\t.getMetaModel()\n\t\t\t\t?.getContext(oContext?.getPath());\n\t\t\tconst converterContext = ConverterContext?.createConverterContextForMacro(\n\t\t\t\tsEntitySet,\n\t\t\t\tmetaContext,\n\t\t\t\toAppComponent.getDiagnostics(),\n\t\t\t\tmerge\n\t\t\t);\n\t\t\tconst entitySet = converterContext.getEntitySet();\n\t\t\tconst entityType = converterContext.getEntityType();\n\t\t\tlet updateHidden;\n\t\t\t//Find the Update Hidden of the root entity set and bind the property to AnyElement, any changes in the path of the root UpdateHidden will be updated via the property, internal model context is updated based on the property\n\t\t\tconst bUpdateHidden = isEntitySet(entitySet) && entitySet.annotations.UI?.UpdateHidden?.valueOf();\n\t\t\tif (bUpdateHidden !== true) {\n\t\t\t\tupdateHidden = ModelHelper.isUpdateHidden(entitySet, entityType);\n\t\t\t}\n\t\t\t//Find the operation available property of the root edit configuration and fetch the property using AnyElement\n\t\t\tconst sEditEnableBinding = getEditButtonEnabled(converterContext);\n\t\t\tconst draftRootPath = ModelHelper.getDraftRootPath(oContext);\n\t\t\tconst sStickyRootPath = ModelHelper.getStickyRootPath(oContext);\n\t\t\tconst sPath = draftRootPath || sStickyRootPath;\n\t\t\tconst oInternalModelContext = oView.getBindingContext(\"internal\") as InternalModelContext;\n\t\t\tif (sPath) {\n\t\t\t\tconst oRootContext = oView.getModel().bindContext(sPath).getBoundContext();\n\t\t\t\tif (updateHidden !== undefined) {\n\t\t\t\t\tconst sHiddenExpression = compileExpression(equal(getHiddenExpression(converterContext, updateHidden), false));\n\t\t\t\t\tthis.updateEditModelContext(sHiddenExpression, oView, oRootContext, \"rootEditVisible\", oInternalModelContext);\n\t\t\t\t}\n\t\t\t\tif (sEditEnableBinding) {\n\t\t\t\t\tthis.updateEditModelContext(sEditEnableBinding, oView, oRootContext, \"rootEditEnabled\", oInternalModelContext);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tupdateEditModelContext: function (\n\t\tsBindingExpression: string | undefined,\n\t\toView: View,\n\t\toRootContext: Context,\n\t\tsProperty: string,\n\t\toInternalModelContext: InternalModelContext\n\t): void {\n\t\tif (sBindingExpression) {\n\t\t\tconst oHiddenElement = new AnyElement({ anyText: sBindingExpression });\n\t\t\toHiddenElement.setBindingContext(null);\n\t\t\toView.addDependent(oHiddenElement);\n\t\t\toHiddenElement.getBinding(\"anyText\");\n\t\t\tconst oContext = oHiddenElement\n\t\t\t\t.getModel()\n\t\t\t\t?.bindContext(oRootContext.getPath(), oRootContext, { $$groupId: \"$auto.Heroes\" })\n\t\t\t\t?.getBoundContext();\n\t\t\toHiddenElement.setBindingContext(oContext);\n\t\t\toHiddenElement?.getBinding(\"anyText\")?.attachChange((oEvent: Event<{}, PropertyBinding>) => {\n\t\t\t\tconst oNewValue = oEvent.getSource().getExternalValue();\n\t\t\t\toInternalModelContext.setProperty(sProperty, oNewValue);\n\t\t\t});\n\t\t}\n\t},\n\n\t_setActionEnablementForTable: function (\n\t\toSelectedContext: Context | undefined,\n\t\toInternalModelContext: InternalModelContext,\n\t\tsAction: string,\n\t\tsProperty: string,\n\t\taRequestPromises: Promise<_RequestedProperty>[],\n\t\tforContextMenu = false\n\t): Promise<_RequestedProperty>[] {\n\t\t// Retrieve previously checked contexts in case of !forContextMenu\n\t\tconst sEnablementFieldName = forContextMenu ? \"bEnabledForContextMenu\" : \"bEnabled\",\n\t\t\taApplicable: [Context | undefined] = oInternalModelContext.getProperty(`dynamicActions/${sAction}/aApplicable`) || [],\n\t\t\taNotApplicable: [Context | undefined] = oInternalModelContext.getProperty(`dynamicActions/${sAction}/aNotApplicable`) || [];\n\t\tlet bActionEnabled: boolean = oInternalModelContext.getProperty(`dynamicActions/${sAction}/${sEnablementFieldName}`) || false;\n\n\t\tif (!forContextMenu) {\n\t\t\toInternalModelContext.setProperty(`dynamicActions/${sAction}`, {\n\t\t\t\tbEnabled: false,\n\t\t\t\taApplicable: [],\n\t\t\t\taNotApplicable: []\n\t\t\t});\n\t\t} else {\n\t\t\toInternalModelContext.setProperty(`dynamicActions/${sAction}`, {\n\t\t\t\t// Do not change enabled, aApplicable and aNotApplicable property in case of context menu calculation\n\t\t\t\t// in case of context menu, only the clicked context goes into the processing - other selected contexts must be kept in the model\n\t\t\t\tbEnabled: oInternalModelContext.getProperty(`dynamicActions/${sAction}/bEnabled`),\n\t\t\t\taApplicable: oInternalModelContext.getProperty(`dynamicActions/${sAction}/aApplicable`),\n\t\t\t\taNotApplicable: oInternalModelContext.getProperty(`dynamicActions/${sAction}/aNotApplicable`),\n\t\t\t\tbEnabledForContextMenu: false,\n\t\t\t\taApplicableForContextMenu: [],\n\t\t\t\taNotApplicableForContextMenu: []\n\t\t\t});\n\t\t}\n\t\t// Note that non dynamic actions are not processed here. They are enabled because\n\t\t// one or more are selected and the second part of the condition in the templating\n\t\t// is then undefined and thus the button takes the default enabling, which is true!\n\t\tconst sDynamicActionEnabledPath = `${oInternalModelContext.getPath()}/dynamicActions/${sAction}/${sEnablementFieldName}`;\n\n\t\tif (typeof sProperty === \"object\" && sProperty !== null && sProperty !== undefined) {\n\t\t\tif (oSelectedContext) {\n\t\t\t\tconst oContextData = oSelectedContext.getObject() as Record<string, PrimitiveType>;\n\t\t\t\tconst oTransformedBinding = transformRecursively(\n\t\t\t\t\tsProperty,\n\t\t\t\t\t\"PathInModel\",\n\t\t\t\t\t// eslint-disable-next-line no-loop-func\n\t\t\t\t\tfunction (oBindingExpression: PathInModelExpression<PrimitiveType>) {\n\t\t\t\t\t\treturn oContextData ? constant(oContextData[oBindingExpression.path]) : constant(false);\n\t\t\t\t\t},\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tconst sResult = compileExpression(oTransformedBinding);\n\t\t\t\tbActionEnabled = bActionEnabled || sResult === \"true\";\n\t\t\t\toInternalModelContext.getModel().setProperty(sDynamicActionEnabledPath, bActionEnabled);\n\t\t\t\t(sResult === \"true\" ? aApplicable : aNotApplicable).push(oSelectedContext);\n\t\t\t}\n\t\t\tCommonUtils.setDynamicActionContexts(oInternalModelContext, sAction, aApplicable, aNotApplicable, forContextMenu);\n\t\t} else {\n\t\t\tconst oContextData = oSelectedContext?.getObject() as Record<string, PrimitiveType>;\n\t\t\tif (sProperty === null && !!oContextData[`#${sAction}`]) {\n\t\t\t\t//look for action advertisement if present and its value is not null\n\t\t\t\toInternalModelContext.getModel().setProperty(sDynamicActionEnabledPath, true);\n\t\t\t} else if (oSelectedContext !== undefined) {\n\t\t\t\t// Collect promises to retrieve singleton or normal property value asynchronously\n\t\t\t\taRequestPromises.push(CommonUtils.requestProperty(oSelectedContext, sAction, sProperty, sDynamicActionEnabledPath));\n\t\t\t}\n\t\t}\n\t\treturn aRequestPromises;\n\t}\n};\nexport default ActionRuntime;\n"],"mappings":"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","ignoreList":[]}