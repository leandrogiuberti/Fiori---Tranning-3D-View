{"version":3,"file":"KeepAliveHelper.js","names":["_fnSimplifyEntitySetPath","metaModel","entitySetPathToUse","entitySetPath","ModelHelper","getEntitySetPath","entitySet","includes","getObject","_fnIsApplicable","primaryPath","key","strategy","RefreshStrategyType","IncludingDependents","startsWith","_isPathApplicableToContextPath","contextPath","path","contextPathToCheck","pathToCheck","getControlsForRefresh","view","controls","controlsForRefresh","getModel","getMetaModel","internalModel","refreshStrategy","getProperty","PATH_TO_STORE","forEach","control","data","push","getControlRefreshStrategyForContextPath","strategyToCheck","getViewRefreshInfo","viewData","getViewData","KeepAliveHelper","getRefreshStrategyForIntent","refreshStrategies","semanticObject","action","soAction","intents","soActionIntentMatch","soIntentMatch","defaultBehavior","_feDefault","storeControlRefreshStrategyForHash","hash","setProperty","restoreView","async","internalModelContext","getBindingContext","controller","getController","viewState","refreshBindings","Promise","resolve","refreshViewBindings","then","Log","info","getId","catch","err","warning","onRestore","error"],"sources":["./KeepAliveHelper.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type { BaseManifestSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { RefreshStrategies, SOAction, SORefreshStrategy } from \"sap/fe/core/helpers/KeepAliveRefreshTypes\";\nimport { PATH_TO_STORE, RefreshStrategyType } from \"sap/fe/core/helpers/KeepAliveRefreshTypes\";\nimport type Control from \"sap/ui/core/Control\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { InternalModelContext } from \"./ModelHelper\";\nimport ModelHelper from \"./ModelHelper\";\n\n// Private functions - start\nconst _fnSimplifyEntitySetPath = function (metaModel: ODataMetaModel, entitySetPathToUse: string): string {\n\tconst entitySetPath = ModelHelper.getEntitySetPath(entitySetPathToUse);\n\tconst entitySet = entitySetPath.includes(\"$NavigationPropertyBinding\") && metaModel.getObject(entitySetPath);\n\treturn entitySet ? `/${entitySet}` : entitySetPathToUse;\n};\nconst _fnIsApplicable = function (primaryPath: string, key: string, strategy: RefreshStrategyType): boolean {\n\treturn primaryPath === key || (strategy === RefreshStrategyType.IncludingDependents && primaryPath.startsWith(key));\n};\n/**\n * Check if given path resides in the context path provided.\n * @param metaModel MetaModel to be used\n * @param contextPath Context path to be used\n * @param path Path to be used\n * @param strategy Strategy, it could be 'self' | 'includingDependents'\n * @returns Returns true if the context path is applicable.\n */\nconst _isPathApplicableToContextPath = function (\n\tmetaModel: ODataMetaModel,\n\tcontextPath: string,\n\tpath: string,\n\tstrategy: RefreshStrategyType\n): boolean {\n\tlet contextPathToCheck = contextPath.startsWith(\"/\") ? contextPath : `/${contextPath}`,\n\t\tpathToCheck = path.startsWith(\"/\") ? path : `/${path}`;\n\tif (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {\n\t\tcontextPathToCheck = _fnSimplifyEntitySetPath(metaModel, contextPathToCheck);\n\t\tif (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {\n\t\t\tpathToCheck = _fnSimplifyEntitySetPath(metaModel, pathToCheck);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn _fnIsApplicable(contextPathToCheck, pathToCheck, strategy);\n};\n// Private functions - end\n/**\n * Get controls to refresh in a view.\n * @param view View of the controls\n * @param controls Context path to be used\n * @returns Returns controls that need to be refreshed.\n */\nconst getControlsForRefresh = function (view: FEView, controls: Control[]): Control[] {\n\tconst controlsForRefresh: Control[] = [];\n\tconst metaModel = view.getModel().getMetaModel();\n\tconst internalModel = view.getModel(\"internal\");\n\tconst refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};\n\tif (controls) {\n\t\tcontrols.forEach(function (control) {\n\t\t\tconst contextPath = control.data(\"targetCollectionPath\");\n\t\t\tfor (const key in refreshStrategy) {\n\t\t\t\tconst strategy = refreshStrategy[key];\n\t\t\t\tif (!controlsForRefresh.includes(control) && _isPathApplicableToContextPath(metaModel, contextPath, key, strategy)) {\n\t\t\t\t\tcontrolsForRefresh.push(control);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn controlsForRefresh;\n};\n/**\n * Get refresh strategy for the control for a context path.\n * @param control Control from which refresh info is needed\n * @param contextPath ContextPath for properities\n * @returns Returns strategy for control refresh.\n */\nconst getControlRefreshStrategyForContextPath = function (control: Control, contextPath: string): RefreshStrategyType | undefined {\n\tconst metaModel = (control.getModel() as ODataModel).getMetaModel();\n\tconst internalModel = control.getModel(\"internal\") as JSONModel;\n\tconst refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};\n\tlet strategy;\n\tif (contextPath) {\n\t\tfor (const key in refreshStrategy) {\n\t\t\tconst strategyToCheck = refreshStrategy[key];\n\t\t\tif (_isPathApplicableToContextPath(metaModel, contextPath, key, strategyToCheck)) {\n\t\t\t\tstrategy = strategyToCheck;\n\t\t\t\tif (strategy === \"includingDependents\") {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn strategy;\n};\n/**\n * Get refresh info from view.\n * @param view View from which refresh info is needed\n * @returns Returns strategy for view refresh.\n */\nconst getViewRefreshInfo = function (view: View): RefreshStrategyType | undefined {\n\tconst viewData = view.getViewData() as BaseManifestSettings,\n\t\tcontextPath = viewData && (viewData?.contextPath || `/${viewData?.entitySet}`);\n\treturn KeepAliveHelper.getControlRefreshStrategyForContextPath(view, contextPath);\n};\n\n/**\n * Get refresh strategy for an intent.\n * @param refreshStrategies RefreshStrategies to consider\n * @param semanticObject Outbound Semantic Object\n * @param action Outbound Action\n * @returns Returns refresh strategies to use for the intent.\n */\nconst getRefreshStrategyForIntent = function (\n\trefreshStrategies: RefreshStrategies,\n\tsemanticObject?: string,\n\taction?: string\n): SORefreshStrategy | undefined {\n\tconst soAction = semanticObject && action && `${semanticObject}-${action}`;\n\tconst intents = refreshStrategies.intents;\n\tconst soActionIntentMatch = intents && soAction && intents[soAction];\n\tconst soIntentMatch = !soActionIntentMatch && intents && semanticObject && intents[semanticObject];\n\n\treturn soActionIntentMatch || soIntentMatch || refreshStrategies?.defaultBehavior || refreshStrategies?._feDefault;\n};\n/**\n * Store control refresh strategy for hash in the internal model.\n * @param control Control for the refresh strategy\n * @param hash Shell hash object\n */\nconst storeControlRefreshStrategyForHash = function (control: Control, hash: SOAction): void {\n\tif (control && control.getModel(\"viewData\") && control.getModel(\"internal\")) {\n\t\tconst viewData = control.getModel(\"viewData\") as JSONModel;\n\t\tconst refreshStrategies: RefreshStrategies = viewData.getProperty(PATH_TO_STORE);\n\t\tif (refreshStrategies) {\n\t\t\tconst internalModel = control.getModel(\"internal\");\n\t\t\tconst refreshStrategy: SORefreshStrategy | undefined = KeepAliveHelper.getRefreshStrategyForIntent(\n\t\t\t\trefreshStrategies,\n\t\t\t\thash?.semanticObject,\n\t\t\t\thash?.action\n\t\t\t);\n\t\t\t(internalModel as JSONModel).setProperty(PATH_TO_STORE, refreshStrategy);\n\t\t}\n\t}\n};\n\n/**\n * Method to refresh and restore the view if neccessary.\n * @param view Control for the refresh strategy\n * @returns A promise after view refresh and restore are triggered\n */\nconst restoreView = async function (view: FEView): Promise<void> {\n\tconst internalModelContext = view.getBindingContext(\"internal\") as InternalModelContext;\n\tconst controller = view.getController();\n\tconst viewState = controller?.viewState;\n\tlet refreshBindings = Promise.resolve();\n\tif (internalModelContext && internalModelContext.getProperty(\"restoreStatus\") === \"pending\") {\n\t\tif (viewState.refreshViewBindings) {\n\t\t\trefreshBindings = viewState.refreshViewBindings();\n\t\t\trefreshBindings\n\t\t\t\t.then(function (): void {\n\t\t\t\t\tLog.info(`FE V4: Refresh was triggered successfull: ${view.getId()}`);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tLog.warning(`FE V4: Refresh was unsuccessfull: ${view.getId()}`, err);\n\t\t\t\t});\n\t\t}\n\t\trefreshBindings = refreshBindings\n\t\t\t.then(function (): void {\n\t\t\t\tviewState.onRestore();\n\t\t\t\tinternalModelContext.setProperty(\"restoreStatus\", \"done\");\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function (error) {\n\t\t\t\tLog.warning(`FE V4: Restore was unsuccessfull: ${view.getId()}`, error);\n\t\t\t});\n\t}\n\treturn refreshBindings;\n};\n\n/**\n * helper class for KeepAlive feature in sap.fe.\n */\nconst KeepAliveHelper = {\n\tgetControlsForRefresh,\n\tgetControlRefreshStrategyForContextPath,\n\tgetViewRefreshInfo,\n\tgetRefreshStrategyForIntent,\n\tstoreControlRefreshStrategyForHash,\n\trestoreView\n};\nexport default KeepAliveHelper;\n"],"mappings":"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","ignoreList":[]}