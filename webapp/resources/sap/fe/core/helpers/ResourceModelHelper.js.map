{"version":3,"file":"ResourceModelHelper.js","names":["getResourceModel","scope","isA","getView","getModel","i18nModel","Component","getOwnerComponentFor","_exports","getLocalizedText","textOrToken","control","matches","exec","getText","resourceBundle","getResourceBundle","e","Log","info"],"sources":["./ResourceModelHelper.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport Component from \"sap/ui/core/Component\";\nimport type Control from \"sap/ui/core/Control\";\nimport type Controller from \"sap/ui/core/mvc/Controller\";\nimport type ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport type View from \"sap/ui/core/mvc/View\";\n\n/**\n * Determines the resource model for a given control, view, controller or appComponent.\n * @param scope The control, view, controller or appComponent for which the resource model should be determined.\n * @returns The resource model\n */\nexport function getResourceModel(\n\tscope: Control | AppComponent | TemplateComponent | Controller | ControllerExtension | View\n): ResourceModel {\n\tif (scope.isA<Controller>(\"sap.ui.core.mvc.Controller\") || scope.isA<ControllerExtension>(\"sap.ui.core.mvc.ControllerExtension\")) {\n\t\treturn scope.getView()?.getModel(\"sap.fe.i18n\") as ResourceModel;\n\t} else {\n\t\tlet i18nModel = scope.getModel(\"sap.fe.i18n\") as ResourceModel | undefined;\n\t\tif (!i18nModel) {\n\t\t\ti18nModel = Component.getOwnerComponentFor(scope)?.getModel(\"sap.fe.i18n\") as ResourceModel;\n\t\t}\n\t\treturn i18nModel;\n\t}\n}\n\n/**\n * Determines the resource model text for a reference.\n * @param textOrToken Text reference like {i18n>TOKEN} or {sap.fe.i18n>TOKEN}.\n * @param control A control, app component or page controller.\n * @returns The translated text\n */\nexport function getLocalizedText(textOrToken: string, control: Control | AppComponent | PageController): string {\n\tconst matches = /{([A-Za-z0-9_.|@]+)>([A-Za-z0-9_.|]+)}/.exec(textOrToken);\n\tif (matches) {\n\t\ttry {\n\t\t\tif (matches[1] === \"sap.fe.i18n\") {\n\t\t\t\t// Since our internal resource model is asynchronous we need to access the text like below, otherwise we\n\t\t\t\t// get back a promise\n\t\t\t\treturn getResourceModel(control).getText(matches[2]);\n\t\t\t} else {\n\t\t\t\t// For synchronous resource models like i18n used for custom columns we access the text like below\n\t\t\t\tconst resourceBundle = (control.getModel(matches[1]) as ResourceModel).getResourceBundle() as ResourceBundle;\n\t\t\t\treturn resourceBundle.getText(matches[2]);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tLog.info(`Unable to retrieve localized text ${textOrToken}`);\n\t\t}\n\t}\n\treturn textOrToken;\n}\n\nexport default {\n\tgetResourceModel,\n\tgetLocalizedText\n};\n"],"mappings":";;;;2FAiBO,SAASA,EACfC,GAEA,GAAIA,EAAMC,IAAgB,+BAAiCD,EAAMC,IAAyB,uCAAwC,CACjI,OAAOD,EAAME,WAAWC,SAAS,cAClC,KAAO,CACN,IAAIC,EAAYJ,EAAMG,SAAS,eAC/B,IAAKC,EAAW,CACfA,EAAYC,EAAUC,qBAAqBN,IAAQG,SAAS,cAC7D,CACA,OAAOC,CACR,CACD,CAEAG,EAAAR,mBAMO,SAASS,EAAiBC,EAAqBC,GACrD,MAAMC,EAAU,yCAAyCC,KAAKH,GAC9D,GAAIE,EAAS,CACZ,IACC,GAAIA,EAAQ,KAAO,cAAe,CAGjC,OAAOZ,EAAiBW,GAASG,QAAQF,EAAQ,GAClD,KAAO,CAEN,MAAMG,EAAkBJ,EAAQP,SAASQ,EAAQ,IAAsBI,oBACvE,OAAOD,EAAeD,QAAQF,EAAQ,GACvC,CACD,CAAE,MAAOK,GACRC,EAAIC,KAAK,qCAAqCT,IAC/C,CACD,CACA,OAAOA,CACR,CAACF,EAAAC,mBAAA,MAEc,CACdT,mBACAS,mBACA","ignoreList":[]}