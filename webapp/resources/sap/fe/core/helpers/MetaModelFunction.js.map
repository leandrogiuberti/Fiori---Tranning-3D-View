{"version":3,"file":"MetaModelFunction.js","names":["getSearchRestrictions","fullPath","metaModel","searchRestrictions","navigationSearchRestrictions","navigationText","searchRestrictionsTerm","entityTypePathParts","replaceAll","split","filter","ModelHelper","filterOutNavPropBinding","entitySetPath","getEntitySetPath","entitySetPathParts","isContainment","getObject","join","containmentNavPath","length","navPath","joinString","parentEntitySetPath","slice","navigationRestrictions","METAMODEL_FUNCTIONS","getNavigationRestrictions","SearchRestrictions","_exports","metaModelContext","navigationPath","restrictedProperties","RestrictedProperties","find","restrictedProperty","NavigationProperty","$NavigationPropertyPath","isInNonFilterableProperties","metamodelContext","contextPath","isNotFilterable","filterRestrictionsAnnotation","NonFilterableProperties","some","property","$PropertyPath","isCustomAggregate","interanlIsCustomAggregate","isApplySupported","entitySetAnnotations","customAggregatesAnnotations","getAllCustomAggregates","customAggregates","Object","keys","undefined","includes","checkEntitySetIsFilterable","navigationContext","isFilterable","isContextPathFilterable","propertyDataType","getPropertyDataType","isTypeFilterable","esParts","splice","contexts","isNoFilterable","context","item","index","array","filterRestrictions","FilterRestrictions","nonFilterableProperties","targetPropertyPath","propertyPath","dataType","getProperty","annotationPath","isPropertyFilterable","skipHiddenFilters","Error","createBindingContext","hiddenPath","hiddenFilterPath","compileExpression","not","or","pathInModel","getCreatePopupFields","path","appComponent","dataModel","getInvolvedDataModelObjects","getContext","nonComputedVisibleKeys","immutableVisibleFields","visibileRequiredProperties","requiredProperties","getRequiredPropertiesFromInsertRestrictions","entityProperties","targetEntityType","prop","annotations","isKey","propName","name","isImmutable","Core","Immutable","valueOf","isNonComputed","Computed","isVisible","UI","Hidden","isComputedDefaultValue","ComputedDefaultValue","isKeyComputedDefaultValueWithText","type","Common","Text","push","diagnostics","getDiagnostics","message","addIssue","IssueCategory","Annotation","IssueSeverity","Medium","IssueCategoryType","Annotations","IgnoredAnnotation","concat","getRequiredProperties","checkUpdateRestrictions","arguments","requiredPropertiesWithPath","entitySetAnnotation","endsWith","replace","joinText","hasRestrictedPropertiesInAnnotations","UpdateRestrictions","RequiredProperties","InsertRestrictions","getRequiredPropertiesFromAnnotations","forEach","requiredProperty","getRequiredPropertiesFromUpdateRestrictions","isNavigationRestrictions","navAnnotations","entityAnnotations","entitytSetAnnotations","annotation","annotationKey","startsWith","annotationParts","customAggregate","contextDefiningProperties","label","sortable","sortOrder","custom","getSortRestrictionsInfo","sortRestrictionsInfo","propertyInfo","sortRestrictions","Sortable","propertyItem","NonSortableProperties","propertyName","AscendingOnlyProperties","sortDirection","DescendingOnlyProperties","getFilterRestrictionsInfo","i","filterRestrictionsInfo","filterable","requiresFilter","RequiresFilter","Filterable","map","filterableProperties","FilterExpressionRestrictions","Property","getFilterableData","AllowedExpressions","filterDataObj","isMultiValueFilterExpression","filterExpression","isMultiValue"],"sources":["./MetaModelFunction.ts"],"sourcesContent":["// The goal of this file is to disappear as soon as we can.\n// It is a temporary solution to move all metamodel related operation from CommonUtils to a separate file.\n\nimport type * as Edm from \"@sap-ux/vocabularies-types/Edm\";\nimport type {\n\tFilterRestrictionsType,\n\tNavigationPropertyRestrictionTypes,\n\tNavigationRestrictionsType,\n\tSearchRestrictionsType\n} from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, not, or, pathInModel } from \"sap/fe/base/BindingToolkit\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport { IssueCategory, IssueCategoryType, IssueSeverity } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport type { DefaultTypeForEdmType } from \"sap/fe/core/type/EDM\";\nimport { isTypeFilterable } from \"sap/fe/core/type/EDM\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { ExpandPathType, MetaModelEntitySetAnnotation, MetaModelType } from \"types/metamodel_types\";\nimport { getInvolvedDataModelObjects } from \"../converters/MetaModelConverter\";\n\n// From FilterBar.block.ts only\nexport function getSearchRestrictions(fullPath: string, metaModel: ODataMetaModel): MetaModelType<SearchRestrictionsType> | undefined {\n\tlet searchRestrictions;\n\tlet navigationSearchRestrictions;\n\tconst navigationText = \"$NavigationPropertyBinding\";\n\tconst searchRestrictionsTerm = \"@Org.OData.Capabilities.V1.SearchRestrictions\";\n\tconst entityTypePathParts = fullPath.replaceAll(\"%2F\", \"/\").split(\"/\").filter(ModelHelper.filterOutNavPropBinding);\n\tconst entitySetPath = ModelHelper.getEntitySetPath(fullPath, metaModel);\n\tconst entitySetPathParts = entitySetPath.split(\"/\").filter(ModelHelper.filterOutNavPropBinding);\n\tconst isContainment = metaModel.getObject(`/${entityTypePathParts.join(\"/\")}/$ContainsTarget`) ? true : false;\n\tconst containmentNavPath = isContainment ? entityTypePathParts[entityTypePathParts.length - 1] : \"\";\n\n\t//LEAST PRIORITY - Search restrictions directly at Entity Set\n\t//e.g. FR in \"NS.EntityContainer/SalesOrderManage\" ContextPath: /SalesOrderManage\n\tif (!isContainment) {\n\t\tsearchRestrictions = metaModel.getObject(`${entitySetPath}${searchRestrictionsTerm}`) as\n\t\t\t| MetaModelType<SearchRestrictionsType>\n\t\t\t| undefined;\n\t}\n\tif (entityTypePathParts.length > 1) {\n\t\tconst navPath: string = isContainment ? containmentNavPath : entitySetPathParts[entitySetPathParts.length - 1];\n\t\t// In case of containment we take entitySet provided as parent. And in case of normal we would remove the last navigation from entitySetPath.\n\t\tconst joinString = `/${navigationText}/`;\n\t\tconst parentEntitySetPath = isContainment ? entitySetPath : `/${entitySetPathParts.slice(0, -1).join(joinString)}`;\n\n\t\t//HIGHEST priority - Navigation restrictions\n\t\t//e.g. Parent \"/Customer\" with NavigationPropertyPath=\"Set\" ContextPath: Customer/Set\n\t\tconst navigationRestrictions = METAMODEL_FUNCTIONS.getNavigationRestrictions(\n\t\t\tmetaModel,\n\t\t\tparentEntitySetPath,\n\t\t\tnavPath.replaceAll(\"%2F\", \"/\")\n\t\t);\n\t\tnavigationSearchRestrictions = navigationRestrictions?.SearchRestrictions;\n\t}\n\treturn navigationSearchRestrictions ?? searchRestrictions;\n}\n\n// From CommonUtils\nexport function getNavigationRestrictions(\n\tmetaModelContext: ODataMetaModel,\n\tentitySetPath: string,\n\tnavigationPath: string\n): MetaModelType<NavigationPropertyRestrictionTypes> | undefined {\n\tconst navigationRestrictions = metaModelContext.getObject(`${entitySetPath}@Org.OData.Capabilities.V1.NavigationRestrictions`) as\n\t\t| MetaModelType<NavigationRestrictionsType>\n\t\t| undefined;\n\tconst restrictedProperties = navigationRestrictions?.RestrictedProperties;\n\treturn restrictedProperties?.find(function (restrictedProperty) {\n\t\treturn restrictedProperty.NavigationProperty?.$NavigationPropertyPath === navigationPath;\n\t});\n}\n\n// Internal usage only\nfunction isInNonFilterableProperties(metamodelContext: ODataMetaModel, entitySetPath: string, contextPath: string): boolean {\n\tlet isNotFilterable = false;\n\tconst filterRestrictionsAnnotation = metamodelContext.getObject(`${entitySetPath}@Org.OData.Capabilities.V1.FilterRestrictions`) as\n\t\t| MetaModelType<FilterRestrictionsType>\n\t\t| undefined;\n\tif (filterRestrictionsAnnotation?.NonFilterableProperties) {\n\t\tisNotFilterable = filterRestrictionsAnnotation.NonFilterableProperties.some(function (property) {\n\t\t\treturn (\n\t\t\t\t(property as unknown as ExpandPathType<Edm.NavigationPropertyPath>).$NavigationPropertyPath === contextPath ||\n\t\t\t\tproperty.$PropertyPath === contextPath\n\t\t\t);\n\t\t});\n\t}\n\treturn isNotFilterable;\n}\n\n// Internal usage only\nexport function isCustomAggregate(metamodelContext: ODataMetaModel, entitySetPath: string, contextPath: string): boolean {\n\tlet interanlIsCustomAggregate = false;\n\t// eslint-disable-next-line regex/invalid-warn\n\tconst isApplySupported = metamodelContext.getObject(entitySetPath + \"@Org.OData.Aggregation.V1.ApplySupported\") ? true : false;\n\tif (isApplySupported) {\n\t\tconst entitySetAnnotations = metamodelContext.getObject(`${entitySetPath}@`) as MetaModelEntitySetAnnotation;\n\t\tconst customAggregatesAnnotations = METAMODEL_FUNCTIONS.getAllCustomAggregates(entitySetAnnotations) as object | undefined;\n\t\tconst customAggregates = customAggregatesAnnotations ? Object.keys(customAggregatesAnnotations) : undefined;\n\t\tif (customAggregates?.includes(contextPath)) {\n\t\t\tinteranlIsCustomAggregate = true;\n\t\t}\n\t}\n\treturn interanlIsCustomAggregate;\n}\n\n// Internal usage only\n\nfunction checkEntitySetIsFilterable(\n\tentitySetPath: string,\n\tmetaModelContext: ODataMetaModel,\n\tproperty: string,\n\tnavigationContext: Context | null\n): boolean {\n\tlet isFilterable =\n\t\tentitySetPath.split(\"/\").length === 2 && !property.includes(\"/\")\n\t\t\t? !isInNonFilterableProperties(metaModelContext, entitySetPath, property)\n\t\t\t: !isContextPathFilterable(metaModelContext, entitySetPath, property);\n\t// check if type can be used for filtering\n\tif (isFilterable && navigationContext) {\n\t\tconst propertyDataType = getPropertyDataType(navigationContext);\n\t\tif (propertyDataType) {\n\t\t\tisFilterable = propertyDataType ? isTypeFilterable(propertyDataType as keyof typeof DefaultTypeForEdmType) : false;\n\t\t} else {\n\t\t\tisFilterable = false;\n\t\t}\n\t}\n\treturn isFilterable;\n}\n\n// Internal usage only\nfunction isContextPathFilterable(metaModelContext: ODataMetaModel, entitySetPath: string, contextPath: string): boolean {\n\tconst fullPath = `${entitySetPath}/${contextPath}`,\n\t\tesParts = fullPath.split(\"/\").splice(0, 2),\n\t\tcontexts = fullPath.split(\"/\").splice(2);\n\tlet isNoFilterable = false,\n\t\tcontext = \"\";\n\n\tentitySetPath = esParts.join(\"/\");\n\n\tisNoFilterable = contexts.some(function (item: string, index: number, array: string[]) {\n\t\tif (context.length > 0) {\n\t\t\tcontext += `/${item}`;\n\t\t} else {\n\t\t\tcontext = item;\n\t\t}\n\t\tif (index === array.length - 2) {\n\t\t\t// In case of \"/Customer/Set/Property\" this is to check navigation restrictions of \"Customer\" for non-filterable properties in \"Set\"\n\t\t\tconst navigationRestrictions = METAMODEL_FUNCTIONS.getNavigationRestrictions(metaModelContext, entitySetPath, item);\n\t\t\tconst filterRestrictions = navigationRestrictions?.FilterRestrictions;\n\t\t\tconst nonFilterableProperties = filterRestrictions?.NonFilterableProperties;\n\t\t\tconst targetPropertyPath = array[array.length - 1];\n\t\t\tif (\n\t\t\t\tnonFilterableProperties?.find(function (propertyPath) {\n\t\t\t\t\treturn propertyPath.$PropertyPath === targetPropertyPath;\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\tif (index === array.length - 1) {\n\t\t\t//last path segment\n\t\t\tisNoFilterable = isInNonFilterableProperties(metaModelContext, entitySetPath, context);\n\t\t} else if (metaModelContext.getObject(`${entitySetPath}/$NavigationPropertyBinding/${item}`)) {\n\t\t\t//check existing context path and initialize it\n\t\t\tisNoFilterable = isInNonFilterableProperties(metaModelContext, entitySetPath, context);\n\t\t\tcontext = \"\";\n\t\t\t//set the new EntitySet\n\t\t\tentitySetPath = \"/\" + metaModelContext.getObject(`${entitySetPath}/$NavigationPropertyBinding/${item}`);\n\t\t}\n\t\treturn isNoFilterable;\n\t});\n\treturn isNoFilterable;\n}\n\n// Internal usage only\n\nfunction getPropertyDataType(navigationContext: Context): string | undefined {\n\tlet dataType = navigationContext.getProperty(\"$Type\") as string | undefined;\n\t// if $kind exists, it's not a DataField and we have the final type already\n\tif (!navigationContext.getProperty(\"$kind\")) {\n\t\tswitch (dataType) {\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAction\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\":\n\t\t\t\tdataType = undefined;\n\t\t\t\tbreak;\n\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataField\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithUrl\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation\":\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldWithAction\":\n\t\t\t\tdataType = navigationContext.getProperty(\"Value/$Path/$Type\") as string | undefined;\n\t\t\t\tbreak;\n\n\t\t\tcase \"com.sap.vocabularies.UI.v1.DataFieldForAnnotation\":\n\t\t\tdefault:\n\t\t\t\tconst annotationPath = navigationContext.getProperty(\"Target/$AnnotationPath\") as string | undefined;\n\t\t\t\tif (annotationPath) {\n\t\t\t\t\tif (annotationPath.includes(\"com.sap.vocabularies.Communication.v1.Contact\")) {\n\t\t\t\t\t\tdataType = navigationContext.getProperty(\"Target/$AnnotationPath/fn/$Path/$Type\") as string | undefined;\n\t\t\t\t\t} else if (annotationPath.includes(\"com.sap.vocabularies.UI.v1.DataPoint\")) {\n\t\t\t\t\t\tdataType = navigationContext.getProperty(\"Value/$Path/$Type\") as string | undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// e.g. FieldGroup or Chart\n\t\t\t\t\t\tdataType = undefined;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdataType = undefined;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn dataType;\n}\n\n// From CommonUtils, CommonHelper, FilterBarDelegate, FilterField, ValueListHelper, TableDelegate\n// TODO check used places and rework this\nexport function isPropertyFilterable(\n\tmetaModelContext: ODataMetaModel,\n\tentitySetPath: string,\n\tproperty: string,\n\tskipHiddenFilters?: boolean\n): boolean | CompiledBindingToolkitExpression {\n\tif (typeof property !== \"string\") {\n\t\tthrow new Error(\"sProperty parameter must be a string\");\n\t}\n\n\t// Parameters should be rendered as filterfields\n\tif (metaModelContext.getObject(`${entitySetPath}/@com.sap.vocabularies.Common.v1.ResultContext`) === true) {\n\t\treturn true;\n\t}\n\n\tconst navigationContext = metaModelContext.createBindingContext(`${entitySetPath}/${property}`);\n\n\tif (navigationContext && !skipHiddenFilters) {\n\t\tif (\n\t\t\tnavigationContext.getProperty(\"@com.sap.vocabularies.UI.v1.Hidden\") === true ||\n\t\t\tnavigationContext.getProperty(\"@com.sap.vocabularies.UI.v1.HiddenFilter\") === true\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\tconst hiddenPath = navigationContext.getProperty(\"@com.sap.vocabularies.UI.v1.Hidden/$Path\") as string | undefined;\n\t\tconst hiddenFilterPath = navigationContext.getProperty(\"@com.sap.vocabularies.UI.v1.HiddenFilter/$Path\") as string | undefined;\n\n\t\tif (hiddenPath && hiddenFilterPath) {\n\t\t\treturn compileExpression(not(or(pathInModel(hiddenPath), pathInModel(hiddenFilterPath))));\n\t\t} else if (hiddenPath) {\n\t\t\treturn compileExpression(not(pathInModel(hiddenPath)));\n\t\t} else if (hiddenFilterPath) {\n\t\t\treturn compileExpression(not(pathInModel(hiddenFilterPath)));\n\t\t}\n\t}\n\treturn checkEntitySetIsFilterable(entitySetPath, metaModelContext, property, navigationContext);\n}\n\n/**\n * This function processes the entity properties and returns an array of required, non-computed key and immutable fields.\n * @param metaModel Metamodel\n * @param path Entityset Path\n * @param appComponent App Component\n * @returns An array of required, non-computed key and immutable fields\n */\nexport function getCreatePopupFields(metaModel: ODataMetaModel, path: string, appComponent?: AppComponent): string[] {\n\tconst dataModel = getInvolvedDataModelObjects(metaModel.getContext(path));\n\tconst nonComputedVisibleKeys: string[] = [];\n\tconst immutableVisibleFields: string[] = [];\n\tconst visibileRequiredProperties: string[] = [];\n\t//We first process the required properties\n\tconst requiredProperties = METAMODEL_FUNCTIONS.getRequiredPropertiesFromInsertRestrictions(path, metaModel);\n\tconst entityProperties = dataModel.targetEntityType.entityProperties;\n\tfor (const prop of entityProperties) {\n\t\tconst annotations = prop.annotations,\n\t\t\tisKey = prop.isKey,\n\t\t\tpropName = prop.name,\n\t\t\tisImmutable = annotations.Core?.Immutable?.valueOf() === true,\n\t\t\tisNonComputed = !(annotations.Core?.Computed?.valueOf() === true),\n\t\t\tisVisible = !(annotations.UI?.Hidden?.valueOf() === true),\n\t\t\tisComputedDefaultValue = annotations.Core?.ComputedDefaultValue?.valueOf() === true,\n\t\t\tisKeyComputedDefaultValueWithText =\n\t\t\t\tisKey && prop.type === \"Edm.Guid\" ? isComputedDefaultValue && annotations.Common?.Text : false;\n\t\tif ((isKeyComputedDefaultValueWithText || (isKey && prop.type !== \"Edm.Guid\")) && isNonComputed && isVisible) {\n\t\t\tnonComputedVisibleKeys.push(propName);\n\t\t} else if (requiredProperties.includes(propName) && isVisible && !(isKey && !nonComputedVisibleKeys.includes(propName))) {\n\t\t\tvisibileRequiredProperties.push(propName);\n\t\t} else if (isImmutable && isNonComputed && isVisible) {\n\t\t\timmutableVisibleFields.push(propName);\n\t\t}\n\n\t\tif (!isNonComputed && isComputedDefaultValue && appComponent) {\n\t\t\tconst diagnostics = appComponent.getDiagnostics();\n\t\t\tconst message = \"Core.ComputedDefaultValue is ignored as Core.Computed is already set to true\";\n\t\t\tdiagnostics.addIssue(\n\t\t\t\tIssueCategory.Annotation,\n\t\t\t\tIssueSeverity.Medium,\n\t\t\t\tmessage,\n\t\t\t\tIssueCategoryType,\n\t\t\t\tIssueCategoryType.Annotations.IgnoredAnnotation\n\t\t\t);\n\t\t}\n\t}\n\t//The order of fields will be non computed key fields, required properties and then non computed immutable fields.\n\treturn nonComputedVisibleKeys.concat(visibileRequiredProperties).concat(immutableVisibleFields);\n}\n// Internal only, exposed for tests\nfunction getRequiredProperties(path: string, metaModelContext: ODataMetaModel, checkUpdateRestrictions = false): string[] {\n\tconst requiredProperties: string[] = [];\n\tlet requiredPropertiesWithPath: { $PropertyPath: string }[] = [];\n\tconst navigationText = \"$NavigationPropertyBinding\";\n\tlet entitySetAnnotation: MetaModelEntitySetAnnotation | null = null;\n\tif (path.endsWith(\"$\")) {\n\t\t// if sPath comes with a $ in the end, removing it as it is of no significance\n\t\tpath = path.replace(\"/$\", \"\");\n\t}\n\tconst entityTypePathParts = path.replaceAll(\"%2F\", \"/\").split(\"/\").filter(ModelHelper.filterOutNavPropBinding);\n\tconst entitySetPath = ModelHelper.getEntitySetPath(path, metaModelContext);\n\tconst entitySetPathParts = entitySetPath.split(\"/\").filter(ModelHelper.filterOutNavPropBinding);\n\tconst isContainment = metaModelContext.getObject(`/${entityTypePathParts.join(\"/\")}/$ContainsTarget`) ? true : false;\n\tconst containmentNavPath = isContainment ? entityTypePathParts[entityTypePathParts.length - 1] : \"\";\n\n\t//Restrictions directly at Entity Set\n\t//e.g. FR in \"NS.EntityContainer/SalesOrderManage\" ContextPath: /SalesOrderManage\n\tif (!isContainment) {\n\t\tentitySetAnnotation = metaModelContext.getObject(`${entitySetPath}@`) as MetaModelEntitySetAnnotation;\n\t}\n\tif (entityTypePathParts.length > 1) {\n\t\tconst navPath = isContainment ? containmentNavPath : entitySetPathParts[entitySetPathParts.length - 1];\n\t\tconst joinText = `/${navigationText}/`;\n\t\tconst parentEntitySetPath = isContainment ? entitySetPath : `/${entitySetPathParts.slice(0, -1).join(joinText)}`;\n\t\t//Navigation restrictions\n\t\t//e.g. Parent \"/Customer\" with NavigationPropertyPath=\"Set\" ContextPath: Customer/Set\n\t\tconst navigationRestrictions = METAMODEL_FUNCTIONS.getNavigationRestrictions(\n\t\t\tmetaModelContext,\n\t\t\tparentEntitySetPath,\n\t\t\tnavPath.replaceAll(\"%2F\", \"/\")\n\t\t);\n\n\t\tif (\n\t\t\tnavigationRestrictions !== undefined &&\n\t\t\tMETAMODEL_FUNCTIONS.hasRestrictedPropertiesInAnnotations(navigationRestrictions, true, checkUpdateRestrictions)\n\t\t) {\n\t\t\trequiredPropertiesWithPath = checkUpdateRestrictions\n\t\t\t\t? navigationRestrictions.UpdateRestrictions?.RequiredProperties ?? []\n\t\t\t\t: navigationRestrictions.InsertRestrictions?.RequiredProperties ?? [];\n\t\t}\n\t\tif (\n\t\t\t!requiredPropertiesWithPath.length &&\n\t\t\tMETAMODEL_FUNCTIONS.hasRestrictedPropertiesInAnnotations(entitySetAnnotation, false, checkUpdateRestrictions)\n\t\t) {\n\t\t\trequiredPropertiesWithPath = METAMODEL_FUNCTIONS.getRequiredPropertiesFromAnnotations(\n\t\t\t\tentitySetAnnotation,\n\t\t\t\tcheckUpdateRestrictions\n\t\t\t);\n\t\t}\n\t} else if (METAMODEL_FUNCTIONS.hasRestrictedPropertiesInAnnotations(entitySetAnnotation, false, checkUpdateRestrictions)) {\n\t\trequiredPropertiesWithPath = METAMODEL_FUNCTIONS.getRequiredPropertiesFromAnnotations(entitySetAnnotation, checkUpdateRestrictions);\n\t}\n\trequiredPropertiesWithPath.forEach(function (requiredProperty) {\n\t\tconst propertyPath = requiredProperty.$PropertyPath;\n\t\trequiredProperties.push(propertyPath);\n\t});\n\treturn requiredProperties;\n}\n\n// TransactionHelper // InternalField\nexport function getRequiredPropertiesFromInsertRestrictions(path: string, metamodelContext: ODataMetaModel): string[] {\n\treturn METAMODEL_FUNCTIONS.getRequiredProperties(path, metamodelContext);\n}\n\n// InternalField\nexport function getRequiredPropertiesFromUpdateRestrictions(path: string, metamodelContext: ODataMetaModel): string[] {\n\treturn METAMODEL_FUNCTIONS.getRequiredProperties(path, metamodelContext, true);\n}\n\n// Internal only, exposed for tests\nfunction getRequiredPropertiesFromAnnotations(\n\tannotations: MetaModelEntitySetAnnotation | null,\n\tcheckUpdateRestrictions = false\n): { $PropertyPath: string }[] {\n\tif (checkUpdateRestrictions) {\n\t\treturn annotations?.[\"@Org.OData.Capabilities.V1.UpdateRestrictions\"]?.RequiredProperties ?? [];\n\t}\n\treturn annotations?.[\"@Org.OData.Capabilities.V1.InsertRestrictions\"]?.RequiredProperties ?? [];\n}\n\n// Internal only, exposed for tests\nfunction hasRestrictedPropertiesInAnnotations(\n\tannotations: MetaModelType<NavigationPropertyRestrictionTypes> | MetaModelEntitySetAnnotation | null,\n\tisNavigationRestrictions = false,\n\tcheckUpdateRestrictions = false\n): boolean {\n\tif (isNavigationRestrictions) {\n\t\tconst navAnnotations = annotations as MetaModelType<NavigationPropertyRestrictionTypes> | undefined;\n\t\tif (checkUpdateRestrictions) {\n\t\t\treturn navAnnotations?.UpdateRestrictions?.RequiredProperties ? true : false;\n\t\t}\n\t\treturn navAnnotations?.InsertRestrictions?.RequiredProperties ? true : false;\n\t} else if (checkUpdateRestrictions) {\n\t\tconst entityAnnotations = annotations as MetaModelEntitySetAnnotation | undefined;\n\t\treturn entityAnnotations?.[\"@Org.OData.Capabilities.V1.UpdateRestrictions\"]?.RequiredProperties ? true : false;\n\t}\n\tconst entitytSetAnnotations = annotations as MetaModelEntitySetAnnotation | undefined;\n\treturn entitytSetAnnotations?.[\"@Org.OData.Capabilities.V1.InsertRestrictions\"]?.RequiredProperties ? true : false;\n}\n\nexport type CustomAggregateDefinition = {\n\tcontextDefiningProperties?: string[];\n\tlabel?: string;\n\tname?: string;\n\tpropertyPath?: string;\n\tsortable?: boolean;\n\tsortOrder?: string;\n\tcustom?: boolean;\n};\n\n// Used in this file and FilterUtils\n/**\n * Returns custom aggregates for a given entitySet.\n * @param annotations A list of annotations of the entity set\n * @returns A map to the custom aggregates keyed by their qualifiers\n */\nexport function getAllCustomAggregates(annotations: MetaModelEntitySetAnnotation): Record<string, CustomAggregateDefinition> {\n\tconst customAggregates: Record<string, CustomAggregateDefinition> = {};\n\tlet annotation;\n\tfor (const annotationKey in annotations) {\n\t\tif (annotationKey.startsWith(\"@Org.OData.Aggregation.V1.CustomAggregate\")) {\n\t\t\tannotation = annotationKey.replace(\"@Org.OData.Aggregation.V1.CustomAggregate#\", \"\");\n\t\t\tconst annotationParts = annotation.split(\"@\");\n\n\t\t\tif (annotationParts.length == 2) {\n\t\t\t\tconst customAggregate: CustomAggregateDefinition = {};\n\t\t\t\t//inner annotation that is not part of \tValidation.AggregatableTerms\n\t\t\t\tif (annotationParts[1] == \"Org.OData.Aggregation.V1.ContextDefiningProperties\") {\n\t\t\t\t\tcustomAggregate.contextDefiningProperties = annotations[annotationKey] as string[];\n\t\t\t\t}\n\n\t\t\t\tif (annotationParts[1] == \"com.sap.vocabularies.Common.v1.Label\") {\n\t\t\t\t\tcustomAggregate.label = annotations[annotationKey] as string;\n\t\t\t\t}\n\t\t\t\tcustomAggregates[annotationParts[0]] = customAggregate;\n\t\t\t} else if (annotationParts.length == 1) {\n\t\t\t\tcustomAggregates[annotationParts[0]] = {\n\t\t\t\t\tname: annotationParts[0],\n\t\t\t\t\tpropertyPath: annotationParts[0],\n\t\t\t\t\tlabel: `Custom Aggregate (${annotation})`,\n\t\t\t\t\tsortable: true,\n\t\t\t\t\tsortOrder: \"both\",\n\t\t\t\t\tcustom: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn customAggregates;\n}\n\n// Used in ValueListHelper, ChartDelegate and ValueHelp-TableDelegate\nexport type SortRestrictionsPropertyInfoType = {\n\tsortable: boolean;\n\tsortDirection?: string;\n};\n\nexport type SortRestrictionsInfoType = {\n\tsortable: boolean;\n\tpropertyInfo: Record<string, SortRestrictionsPropertyInfoType>;\n};\n/**\n * Determines the sorting information from the restriction annotation.\n * @param entitySetAnnotations EntitySet or collection annotations with the sort restrictions annotation\n * @returns An object containing the sort restriction information\n */\nexport function getSortRestrictionsInfo(entitySetAnnotations: MetaModelEntitySetAnnotation): SortRestrictionsInfoType {\n\tconst sortRestrictionsInfo: SortRestrictionsInfoType = {\n\t\tsortable: true,\n\t\tpropertyInfo: {}\n\t};\n\n\tconst sortRestrictions = entitySetAnnotations[\"@Org.OData.Capabilities.V1.SortRestrictions\"];\n\n\tif (!sortRestrictions) {\n\t\treturn sortRestrictionsInfo;\n\t}\n\n\tif (sortRestrictions.Sortable === false) {\n\t\tsortRestrictionsInfo.sortable = false;\n\t}\n\n\tfor (const propertyItem of sortRestrictions.NonSortableProperties || []) {\n\t\tconst propertyName = propertyItem.$PropertyPath;\n\t\tsortRestrictionsInfo.propertyInfo[propertyName] = {\n\t\t\tsortable: false\n\t\t};\n\t}\n\n\tfor (const propertyItem of sortRestrictions.AscendingOnlyProperties || []) {\n\t\tconst propertyName = propertyItem.$PropertyPath;\n\t\tsortRestrictionsInfo.propertyInfo[propertyName] = {\n\t\t\tsortable: true,\n\t\t\tsortDirection: \"asc\" // not used, yet\n\t\t};\n\t}\n\n\tfor (const propertyItem of sortRestrictions.DescendingOnlyProperties || []) {\n\t\tconst propertyName = propertyItem.$PropertyPath;\n\t\tsortRestrictionsInfo.propertyInfo[propertyName] = {\n\t\t\tsortable: true,\n\t\t\tsortDirection: \"desc\" // not used, yet\n\t\t};\n\t}\n\n\treturn sortRestrictionsInfo;\n}\n\n// Used in ChartDelegate and ValueHelp-TableDelegate\nexport type FilterRestrictionsPropertyInfoType = {\n\tfilterable: boolean;\n\tallowedExpressions?: string[];\n};\n\nexport type FilterRestrictionsInfoType = {\n\tfilterable: boolean;\n\trequiresFilter: boolean;\n\tpropertyInfo: Record<string, FilterRestrictionsPropertyInfoType>;\n\trequiredProperties: string[];\n};\n/**\n * Determines the filter information based on the filter restrictions annoation.\n * @param filterRestrictions The filter restrictions annotation\n * @returns An object containing the filter restriction information\n */\nexport function getFilterRestrictionsInfo(filterRestrictions?: MetaModelType<FilterRestrictionsType>): FilterRestrictionsInfoType {\n\tlet i, propertyName;\n\tconst filterRestrictionsInfo: FilterRestrictionsInfoType = {\n\t\tfilterable: true,\n\t\trequiresFilter: filterRestrictions?.RequiresFilter || false,\n\t\tpropertyInfo: {},\n\t\trequiredProperties: []\n\t};\n\n\tif (!filterRestrictions) {\n\t\treturn filterRestrictionsInfo;\n\t}\n\n\tif (filterRestrictions.Filterable === false) {\n\t\tfilterRestrictionsInfo.filterable = false;\n\t}\n\n\t//Hierarchical Case\n\tif (filterRestrictions.RequiredProperties) {\n\t\tfor (i = 0; i < filterRestrictions.RequiredProperties.length; i++) {\n\t\t\tpropertyName = filterRestrictions.RequiredProperties[i].$PropertyPath;\n\t\t\tfilterRestrictionsInfo.requiredProperties.push(propertyName);\n\t\t}\n\t}\n\n\tconst nonFilterableProperties = filterRestrictions.NonFilterableProperties?.map((prop) => prop.$PropertyPath) || [];\n\tconst filterableProperties = filterRestrictions.FilterExpressionRestrictions?.map((prop) => prop.Property?.$PropertyPath) || [];\n\tgetFilterableData(filterRestrictionsInfo.propertyInfo, nonFilterableProperties, filterableProperties);\n\n\tif (filterRestrictions.FilterExpressionRestrictions) {\n\t\t//TBD\n\t\tfor (i = 0; i < filterRestrictions.FilterExpressionRestrictions.length; i++) {\n\t\t\tpropertyName = filterRestrictions.FilterExpressionRestrictions[i].Property?.$PropertyPath;\n\t\t\tif (propertyName) {\n\t\t\t\tfilterRestrictionsInfo.propertyInfo[propertyName][\"allowedExpressions\"] = filterRestrictions.FilterExpressionRestrictions[i]\n\t\t\t\t\t.AllowedExpressions as unknown as string[];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn filterRestrictionsInfo;\n}\n\n/**\n * This function will update the obj to have list of properties which can be filtered or not.\n * @param filterDataObj\n * @param nonFilterableProperties\n * @param filterableProperties\n */\nexport function getFilterableData(\n\tfilterDataObj: Record<string, FilterRestrictionsPropertyInfoType>,\n\tnonFilterableProperties: string[],\n\tfilterableProperties: (string | undefined)[]\n): void {\n\tfor (let i = 0; i < nonFilterableProperties.length; i++) {\n\t\tfilterDataObj[nonFilterableProperties[i]] = {\n\t\t\tfilterable: false\n\t\t};\n\t}\n\tfor (let i = 0; i < filterableProperties.length; i++) {\n\t\tconst propName = filterableProperties[i];\n\t\tif (propName) {\n\t\t\tfilterDataObj[propName] = {\n\t\t\t\tfilterable: true\n\t\t\t};\n\t\t}\n\t}\n}\n\n// Used in ChartDelegate and ValueHelp-TableDelegate\n/**\n * Provides the information if the FilterExpression is a multiValue Filter Expression.\n * @param filterExpression The FilterExpressionType\n * @returns A boolean value wether it is a multiValue Filter Expression or not\n */\nexport function isMultiValueFilterExpression(filterExpression: string): boolean {\n\tlet isMultiValue = true;\n\n\t//SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression\n\tswitch (filterExpression) {\n\t\tcase \"SearchExpression\":\n\t\tcase \"SingleRange\":\n\t\tcase \"SingleValue\":\n\t\t\tisMultiValue = false;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn isMultiValue;\n}\n\n// DO NOT USE, only for tests and internally in this file\nexport const METAMODEL_FUNCTIONS = {\n\tgetRequiredProperties,\n\tgetRequiredPropertiesFromAnnotations,\n\thasRestrictedPropertiesInAnnotations,\n\tgetRequiredPropertiesFromInsertRestrictions,\n\tgetNavigationRestrictions,\n\tgetAllCustomAggregates,\n\tgetFilterableData\n};\n"],"mappings":"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","ignoreList":[]}