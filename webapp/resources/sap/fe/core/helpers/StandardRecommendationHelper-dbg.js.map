{"version":3,"names":["rootContext","standardRecommendationHelper","storeRecommendations","recommendations","internalModel","recommendationsContexts","recommendationsData","getProperty","clearRecommendationsDataFromModelForGivenContexts","enhanceRecommendationModel","updateFetchedContextPaths","updateContextsKeysInModel","setProperty","refresh","ignoreRecommendationForContexts","contexts","recommendationContexts","recommendationData","ignoredContextPaths","forEach","context","ignoredContextPath","getPath","push","filter","contextInfo","startsWith","Object","keys","data","clearIgnoredContexts","contextPath","checkIfRecommendationRoleExistsForContext","recommendationsRegistry","dataModelObject","MetaModelConverter","getInvolvedDataModelObjectsForTargetPath","getModel","getMetaModel","entityType","targetEntityType","name","roles","includes","hasOwnProperty","keysData","metaModel","metaPath","getMetaPath","dataModel","getInvolvedDataModelObjects","getMetaContext","semanticKeysForGivenMetaPath","annotations","Common","SemanticKey","map","i","value","target","idx","lastIndexOf","find","substring","recommendation","AIRecommendedFieldPath","recommendationValues","isPlaceholderValueFound","_AIAltvRecmddFldVals","alternativeRecommendation","recommendationValue","AIRecommendedFieldValue","probability","AIRecommendedFieldScoreValue","undefined","text","AIRecommendedFieldDescription","additionalValues","getStandardRecommendations","bindingContext","propertyPath","fullPath","getDisplayModeForTargetPath","targetPath","involvedDataModelObject","displayMode","getDisplayMode","isRecommendationFieldNull","key","property","isPathAnnotationExpression","targetObject","Text","path","fetchedContextPaths","getContextsWithNoRecommendations","contextsInfo","resetRecommendations","recommendationsDataInModel","getCurrentRootContext","setCurrentRootContext","addContextIdentifierText","params","viewPath","index","identifierValues","contextIdentifier","idPath","contextText","getTextForKey","contextIdentifierText","getEntityName","typeName","UI","HeaderInfo","TypeName","compileExpression","getExpressionFromAnnotation","keyPath","isPropertyPathExpression","$target","evaluateExpression","getObject","_exports"],"sourceRoot":".","sources":["StandardRecommendationHelper.ts"],"sourcesContent":["import type { Property } from \"@sap-ux/vocabularies-types\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation } from \"sap/fe/base/BindingToolkit\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { RecommendationsRegistry } from \"sap/fe/core/services/SideEffectsServiceFactory\";\nimport type Context from \"sap/ui/model/Context\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { AcceptAllParams } from \"../controllerextensions/Recommendations\";\nimport type { DataModelObjectPath } from \"../templating/DataModelPathHelper\";\nimport { getDisplayMode } from \"../templating/UIFormatters\";\nimport { evaluateExpression } from \"./BindingToolkitEvaluator\";\nimport type { RecommendationValueType } from \"./RecommendationHelper\";\nimport { isPathAnnotationExpression, isPropertyPathExpression } from \"./TypeGuards\";\n\nexport type StandardRecommendationResponse = {\n\tAIRecommendedFieldPath?: string;\n\tAIRecommendedFieldValue?: string;\n\tAIRecommendedFieldDescription?: string;\n\t_AIAltvRecmddFldVals?: AlternativeRecommendationResponseType[];\n};\n\nexport type RecommendationContextsInfo = {\n\tcontext?: ODataV4Context;\n\tcontextIdentifier?: string[];\n};\n\nexport type AlternativeRecommendationResponseType = {\n\tAIRecommendedFieldValue: string;\n\tAIRecommendedFieldScoreValue?: number;\n};\n\nexport type StandardRecommendationDataType = {\n\tvalue?: string;\n\ttext?: string;\n\tadditionalValues?: RecommendationValueType[];\n};\n\ntype StandardBaseRecommendation = {\n\tversion?: number;\n\tkeys?: Record<string, string[]>;\n};\n\nexport type BaseDynamicRecommendation = Record<string, StandardRecommendationDataType>;\n\nexport type RecommendationInfo = StandardBaseRecommendation & BaseDynamicRecommendation;\n\nlet rootContext: ODataV4Context;\n\nexport const standardRecommendationHelper = {\n\t/**\n\t * This function will process and set the recommendations according to data received from backend.\n\t * @param recommendations The data received from backend\n\t * @param internalModel The internal json model\n\t * @param recommendationsContexts The contexts for which recommendations are being fetched\n\t */\n\tstoreRecommendations: (\n\t\trecommendations: StandardRecommendationResponse[],\n\t\tinternalModel: JSONModel,\n\t\trecommendationsContexts: ODataV4Context[]\n\t): void => {\n\t\tconst recommendationsData = (internalModel.getProperty(\"/recommendationsData\") as RecommendationInfo) || {};\n\t\tstandardRecommendationHelper.clearRecommendationsDataFromModelForGivenContexts(recommendationsData, recommendationsContexts);\n\t\tstandardRecommendationHelper.enhanceRecommendationModel(recommendations, recommendationsData);\n\t\tstandardRecommendationHelper.updateFetchedContextPaths(recommendationsContexts, internalModel);\n\t\tstandardRecommendationHelper.updateContextsKeysInModel(recommendationsData, recommendationsContexts);\n\t\t//Setting the version to 2.0 to segregate the processing\n\t\trecommendationsData[\"version\"] = 2.0;\n\t\tinternalModel.setProperty(\"/recommendationsData\", recommendationsData);\n\t\tinternalModel.refresh(true);\n\t},\n\n\tignoreRecommendationForContexts: (contexts: ODataV4Context[], internalModel: JSONModel): void => {\n\t\tlet recommendationContexts: RecommendationContextsInfo[] = internalModel.getProperty(\"/recommendationContexts\") || [];\n\t\tconst recommendationData = internalModel.getProperty(\"/recommendationsData\");\n\t\tconst ignoredContextPaths = internalModel.getProperty(\"/ignoredContextPaths\") || [];\n\t\tcontexts.forEach((context: ODataV4Context) => {\n\t\t\tconst ignoredContextPath = context.getPath();\n\t\t\tignoredContextPaths.push(ignoredContextPath);\n\t\t\t// delete recommendation data for a context or its children filter recommendationContexts which do not match\n\t\t\t// a path. This will be the list of recommendations contexts to be kept in model\n\t\t\trecommendationContexts = recommendationContexts.filter((contextInfo: RecommendationContextsInfo) => {\n\t\t\t\treturn !(contextInfo?.context as ODataV4Context).getPath().startsWith(ignoredContextPath);\n\t\t\t});\n\t\t\tObject.keys(recommendationData).forEach((data) => {\n\t\t\t\tif (data.startsWith(ignoredContextPath)) {\n\t\t\t\t\tdelete recommendationData[data];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tinternalModel.setProperty(\"/recommendationsData\", recommendationData);\n\t\tinternalModel.setProperty(\"/recommendationContexts\", recommendationContexts);\n\t\tinternalModel.setProperty(\"/ignoredContextPaths\", ignoredContextPaths);\n\t},\n\n\tclearIgnoredContexts: (internalModel: JSONModel, contextPath: string): void => {\n\t\tlet ignoredContextPaths = internalModel.getProperty(\"/ignoredContextPaths\") || [];\n\t\tignoredContextPaths = ignoredContextPaths.filter((ignoredContextPath: string) => {\n\t\t\treturn !ignoredContextPath.startsWith(contextPath);\n\t\t});\n\t\tinternalModel.setProperty(\"/ignoredContextPaths\", ignoredContextPaths);\n\t},\n\n\t/**\n\t * This function checks if there are recommendation roles for context entity type.\n\t * @param contextInfo Contains context and contextIdentifier\n\t * @param recommendationsRegistry Registry which holds the recommendation roles for all entity types\n\t * @returns Boolean value based on whether recommendation role exists for entityType annotation or not\n\t */\n\tcheckIfRecommendationRoleExistsForContext: (\n\t\tcontextInfo: RecommendationContextsInfo,\n\t\trecommendationsRegistry: RecommendationsRegistry\n\t): boolean => {\n\t\tconst dataModelObject = MetaModelConverter.getInvolvedDataModelObjectsForTargetPath(\n\t\t\t(contextInfo?.context as ODataV4Context).getPath(),\n\t\t\t(contextInfo?.context as ODataV4Context).getModel()?.getMetaModel()\n\t\t);\n\t\tconst entityType = dataModelObject?.targetEntityType.name as string;\n\t\treturn Object.keys(recommendationsRegistry.roles).includes(entityType);\n\t},\n\n\t/**\n\t * This function updates recommendation data with keys of all contexts. This must be shown in the Accept Recommendations Dialog based on the use case.\n\t * @param recommendationsData\n\t * @param recommendationContexts\n\t */\n\tupdateContextsKeysInModel: (recommendationsData: RecommendationInfo, recommendationContexts: ODataV4Context[]): void => {\n\t\tif (!recommendationsData.hasOwnProperty(\"keys\")) {\n\t\t\trecommendationsData[\"keys\"] = {};\n\t\t}\n\t\tconst keysData = recommendationsData[\"keys\"];\n\t\trecommendationContexts.forEach((context: ODataV4Context) => {\n\t\t\tconst metaModel = context.getModel()?.getMetaModel();\n\t\t\tconst metaPath = metaModel.getMetaPath(context?.getPath());\n\t\t\tconst dataModel = MetaModelConverter.getInvolvedDataModelObjects(metaModel.getMetaContext(metaPath));\n\t\t\tconst semanticKeysForGivenMetaPath = dataModel.targetEntityType.annotations.Common?.SemanticKey;\n\t\t\tif (semanticKeysForGivenMetaPath) {\n\t\t\t\tif (keysData && !keysData.hasOwnProperty(metaPath) && semanticKeysForGivenMetaPath) {\n\t\t\t\t\tkeysData[metaPath] = semanticKeysForGivenMetaPath.map((i) => i.value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * This function clears the old recommendations for the context.\n\t * @param recommendationsData The recommendation data which is stored\n\t * @param recommendationsContexts The contexts for which recommendations are being fetched\n\t */\n\tclearRecommendationsDataFromModelForGivenContexts: (\n\t\trecommendationsData: RecommendationInfo,\n\t\trecommendationsContexts?: ODataV4Context[]\n\t): void => {\n\t\tif (recommendationsContexts) {\n\t\t\tObject.keys(recommendationsData).forEach((target) => {\n\t\t\t\tconst idx = target.lastIndexOf(\")\");\n\t\t\t\tif (\n\t\t\t\t\trecommendationsContexts.find((context) => {\n\t\t\t\t\t\treturn context.getPath() === target.substring(0, idx + 1);\n\t\t\t\t\t})\n\t\t\t\t) {\n\t\t\t\t\tdelete recommendationsData[target];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * This function will enhance the recommendations according to data received from backend.\n\t * @param recommendations The data received from backend\n\t * @param recommendationsData The existing recommendation Model\n\t */\n\tenhanceRecommendationModel: (\n\t\trecommendations: Array<StandardRecommendationResponse>,\n\t\trecommendationsData: Record<string, object>\n\t): void => {\n\t\trecommendations?.forEach((recommendation: StandardRecommendationResponse) => {\n\t\t\tconst target = recommendation.AIRecommendedFieldPath;\n\t\t\tif (target) {\n\t\t\t\t// loop through all the recommendations sent from backend\n\t\t\t\tconst recommendationValues: RecommendationValueType[] = [];\n\t\t\t\tlet isPlaceholderValueFound = false;\n\n\t\t\t\t// set the other alternatives as recommendations\n\t\t\t\trecommendation._AIAltvRecmddFldVals?.forEach((alternativeRecommendation: AlternativeRecommendationResponseType) => {\n\t\t\t\t\tconst recommendationValue: RecommendationValueType = {\n\t\t\t\t\t\tvalue: alternativeRecommendation.AIRecommendedFieldValue,\n\t\t\t\t\t\tprobability: alternativeRecommendation.AIRecommendedFieldScoreValue\n\t\t\t\t\t};\n\t\t\t\t\tif (recommendation.AIRecommendedFieldValue === alternativeRecommendation.AIRecommendedFieldValue) {\n\t\t\t\t\t\tisPlaceholderValueFound = true;\n\t\t\t\t\t}\n\n\t\t\t\t\trecommendationValues.push(recommendationValue);\n\t\t\t\t});\n\t\t\t\trecommendationsData[target] = {\n\t\t\t\t\tvalue: isPlaceholderValueFound ? recommendation.AIRecommendedFieldValue : undefined,\n\t\t\t\t\ttext: isPlaceholderValueFound ? recommendation.AIRecommendedFieldDescription : undefined,\n\t\t\t\t\tadditionalValues: recommendationValues\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * This function returns recommendations from standard recommendations model.\n\t * @param bindingContext Binding Context of the field\n\t * @param propertyPath Property path of the field\n\t * @param recommendationData Object containing recommendations\n\t * @returns Recommendation data for the field\n\t */\n\tgetStandardRecommendations: function (\n\t\tbindingContext: Context,\n\t\tpropertyPath: string,\n\t\trecommendationData: RecommendationInfo\n\t): StandardRecommendationDataType | undefined {\n\t\tif (bindingContext && propertyPath) {\n\t\t\tconst fullPath = bindingContext.getPath() + \"/\" + propertyPath;\n\t\t\treturn recommendationData[fullPath] || undefined;\n\t\t}\n\t},\n\t/**\n\t * Fetches the display mode for a given target path.\n\t * @param targetPath\n\t * @param metaModel\n\t * @returns Display mode for target path\n\t */\n\tgetDisplayModeForTargetPath(targetPath: string, metaModel: ODataMetaModel): string {\n\t\tconst involvedDataModelObject = MetaModelConverter.getInvolvedDataModelObjectsForTargetPath<Property>(targetPath, metaModel);\n\t\tconst displayMode = involvedDataModelObject && getDisplayMode(involvedDataModelObject);\n\t\treturn displayMode ? displayMode : \"DescriptionValue\";\n\t},\n\n\t/**\n\t * Function which informs whether a recommendation field is null or not.\n\t * @param context\n\t * @param key\n\t * @param propertyPath\n\t * @returns boolean value based on whether a recommendation field is null or not\n\t */\n\n\tisRecommendationFieldNull(context: ODataV4Context, key: string, propertyPath: string): boolean {\n\t\tconst property = MetaModelConverter.getInvolvedDataModelObjectsForTargetPath<Property>(key, context.getModel()?.getMetaModel());\n\t\tif (!context?.getProperty(propertyPath)) {\n\t\t\tconst displayMode = standardRecommendationHelper.getDisplayModeForTargetPath(key, context?.getModel()?.getMetaModel());\n\t\t\tif (displayMode && displayMode !== \"Value\") {\n\t\t\t\tconst text =\n\t\t\t\t\tisPathAnnotationExpression(property?.targetObject?.annotations?.Common?.Text) &&\n\t\t\t\t\tproperty?.targetObject?.annotations?.Common?.Text?.path;\n\t\t\t\treturn text ? !context?.getProperty(text) : true;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t},\n\n\tupdateFetchedContextPaths: function (contexts: ODataV4Context[], internalModel: JSONModel): void {\n\t\tconst fetchedContextPaths: string[] = [];\n\t\tcontexts?.forEach((context) => {\n\t\t\tconst contextPath = context?.getPath();\n\t\t\tif (contextPath && !fetchedContextPaths.includes(contextPath)) {\n\t\t\t\tfetchedContextPaths.push(contextPath);\n\t\t\t}\n\t\t});\n\n\t\tinternalModel?.setProperty(\"/fetchedContextPaths\", fetchedContextPaths);\n\t\tinternalModel.refresh();\n\t},\n\n\tgetContextsWithNoRecommendations: function (\n\t\tcontextsInfo: RecommendationContextsInfo[],\n\t\tinternalModel: JSONModel\n\t): RecommendationContextsInfo[] {\n\t\tconst fetchedContextPaths = internalModel.getProperty(\"/fetchedContextPaths\") || [];\n\t\tconst ignoredContextPaths = internalModel.getProperty(\"/ignoredContextPaths\") || [];\n\t\treturn contextsInfo.filter((contextInfo) => {\n\t\t\tconst contextPath = (contextInfo?.context as ODataV4Context).getPath();\n\t\t\treturn !fetchedContextPaths.includes(contextPath) && !ignoredContextPaths.includes(contextPath);\n\t\t});\n\t},\n\n\tresetRecommendations: function (internalModel: JSONModel): void {\n\t\t// we have version key maintained only for standard solution of recommendations\n\t\t//and only if this is standard implementation, we should reset recommendations\n\t\tconst recommendationsDataInModel = internalModel.getProperty(\"/recommendationsData\");\n\t\tif (recommendationsDataInModel && recommendationsDataInModel.hasOwnProperty(\"version\")) {\n\t\t\tinternalModel.setProperty(\"/recommendationsData\", {});\n\t\t\tinternalModel?.setProperty(\"/fetchedContextPaths\", []);\n\t\t\tinternalModel?.setProperty(\"/ignoredContextPaths\", []);\n\t\t\tinternalModel.refresh(true);\n\t\t}\n\t},\n\n\tgetCurrentRootContext: function (): ODataV4Context | undefined {\n\t\treturn rootContext;\n\t},\n\n\tsetCurrentRootContext: function (context: ODataV4Context): void {\n\t\trootContext = context;\n\t},\n\t/**\n\t * Adds the text of ContextIdentifier else will add its value to the acceptAllParams.\n\t * @param params\n\t * @param viewPath Context Path of view\n\t */\n\taddContextIdentifierText(params: AcceptAllParams, viewPath: string | undefined): void {\n\t\tfor (const recommendationData of params?.recommendationData || []) {\n\t\t\tlet index = 0;\n\t\t\tconst identifierValues: string[] = [];\n\t\t\t// for recommendation fields which are directly on page, we do not want to show identifier values\n\t\t\t// so we exclude that calculation\n\t\t\tif (recommendationData.context?.getPath() !== viewPath) {\n\t\t\t\tif (recommendationData.contextIdentifier && recommendationData.context) {\n\t\t\t\t\trecommendationData.contextIdentifier.forEach((contextIdentifier) => {\n\t\t\t\t\t\tconst idPath = `${recommendationData.context?.getPath()})/${contextIdentifier}`;\n\t\t\t\t\t\tconst contextText = this.getTextForKey(recommendationData.context as ODataV4Context, idPath, contextIdentifier);\n\t\t\t\t\t\tif (contextText) {\n\t\t\t\t\t\t\tidentifierValues.push(index === 0 ? `${contextText}` : ` ${contextText}`);\n\t\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\trecommendationData.contextIdentifierText = identifierValues;\n\t\t}\n\t},\n\t/**\n\t * Fetches table name based on the context.\n\t * @param context\n\t * @returns Table name\n\t */\n\n\tgetEntityName(context: ODataV4Context): CompiledBindingToolkitExpression | undefined {\n\t\tconst dataModelObject = MetaModelConverter.getInvolvedDataModelObjectsForTargetPath(\n\t\t\tcontext.getPath(),\n\t\t\tcontext.getModel()?.getMetaModel()\n\t\t);\n\t\tconst typeName = dataModelObject?.targetEntityType?.annotations?.UI?.HeaderInfo?.TypeName;\n\t\treturn typeName && compileExpression(getExpressionFromAnnotation(typeName));\n\t},\n\t/**\n\t * Fetches Text for key if it exists else will return its value.\n\t * @param context\n\t * @param keyPath\n\t * @param key\n\t * @returns Text or Value for a key\n\t */\n\n\tgetTextForKey(context: ODataV4Context, keyPath: string, key: string): string {\n\t\tlet value = \"\";\n\t\tconst involvedDataModelObject: DataModelObjectPath<Property> | undefined =\n\t\t\tMetaModelConverter.getInvolvedDataModelObjectsForTargetPath<Property>(keyPath, context?.getModel()?.getMetaModel());\n\t\tconst targetObject = involvedDataModelObject?.targetObject;\n\t\tconst property =\n\t\t\t((isPathAnnotationExpression(targetObject) || isPropertyPathExpression(targetObject)) && targetObject.$target) ||\n\t\t\t(targetObject as Property);\n\t\tconst text = getExpressionFromAnnotation(property?.annotations?.Common?.Text);\n\t\tif (text) {\n\t\t\ttry {\n\t\t\t\tvalue = evaluateExpression(text, { \"\": context.getObject() }) as string;\n\t\t\t\tvalue = value ? value : context.getProperty(key);\n\t\t\t} catch {\n\t\t\t\tvalue = context.getProperty(key);\n\t\t\t}\n\t\t}\n\t\treturn value ?? context.getProperty(key);\n\t}\n};\n"],"mappings":"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","ignoreList":[],"file":"StandardRecommendationHelper-dbg.js"}