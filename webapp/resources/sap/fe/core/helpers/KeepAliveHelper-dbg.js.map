{"version":3,"names":["_fnSimplifyEntitySetPath","metaModel","entitySetPathToUse","entitySetPath","ModelHelper","getEntitySetPath","entitySet","includes","getObject","_fnIsApplicable","primaryPath","key","strategy","RefreshStrategyType","IncludingDependents","startsWith","_isPathApplicableToContextPath","contextPath","path","contextPathToCheck","pathToCheck","getControlsForRefresh","view","controls","controlsForRefresh","getModel","getMetaModel","internalModel","refreshStrategy","getProperty","PATH_TO_STORE","forEach","control","data","push","getControlRefreshStrategyForContextPath","strategyToCheck","getViewRefreshInfo","viewData","getViewData","KeepAliveHelper","getRefreshStrategyForIntent","refreshStrategies","semanticObject","action","soAction","intents","soActionIntentMatch","soIntentMatch","defaultBehavior","_feDefault","storeControlRefreshStrategyForHash","hash","setProperty","restoreView","internalModelContext","getBindingContext","controller","getController","viewState","refreshBindings","Promise","resolve","refreshViewBindings","then","Log","info","getId","catch","err","warning","onRestore","error"],"sourceRoot":".","sources":["KeepAliveHelper.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type { BaseManifestSettings } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { RefreshStrategies, SOAction, SORefreshStrategy } from \"sap/fe/core/helpers/KeepAliveRefreshTypes\";\nimport { PATH_TO_STORE, RefreshStrategyType } from \"sap/fe/core/helpers/KeepAliveRefreshTypes\";\nimport type Control from \"sap/ui/core/Control\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { InternalModelContext } from \"./ModelHelper\";\nimport ModelHelper from \"./ModelHelper\";\n\n// Private functions - start\nconst _fnSimplifyEntitySetPath = function (metaModel: ODataMetaModel, entitySetPathToUse: string): string {\n\tconst entitySetPath = ModelHelper.getEntitySetPath(entitySetPathToUse);\n\tconst entitySet = entitySetPath.includes(\"$NavigationPropertyBinding\") && metaModel.getObject(entitySetPath);\n\treturn entitySet ? `/${entitySet}` : entitySetPathToUse;\n};\nconst _fnIsApplicable = function (primaryPath: string, key: string, strategy: RefreshStrategyType): boolean {\n\treturn primaryPath === key || (strategy === RefreshStrategyType.IncludingDependents && primaryPath.startsWith(key));\n};\n/**\n * Check if given path resides in the context path provided.\n * @param metaModel MetaModel to be used\n * @param contextPath Context path to be used\n * @param path Path to be used\n * @param strategy Strategy, it could be 'self' | 'includingDependents'\n * @returns Returns true if the context path is applicable.\n */\nconst _isPathApplicableToContextPath = function (\n\tmetaModel: ODataMetaModel,\n\tcontextPath: string,\n\tpath: string,\n\tstrategy: RefreshStrategyType\n): boolean {\n\tlet contextPathToCheck = contextPath.startsWith(\"/\") ? contextPath : `/${contextPath}`,\n\t\tpathToCheck = path.startsWith(\"/\") ? path : `/${path}`;\n\tif (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {\n\t\tcontextPathToCheck = _fnSimplifyEntitySetPath(metaModel, contextPathToCheck);\n\t\tif (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {\n\t\t\tpathToCheck = _fnSimplifyEntitySetPath(metaModel, pathToCheck);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn _fnIsApplicable(contextPathToCheck, pathToCheck, strategy);\n};\n// Private functions - end\n/**\n * Get controls to refresh in a view.\n * @param view View of the controls\n * @param controls Context path to be used\n * @returns Returns controls that need to be refreshed.\n */\nconst getControlsForRefresh = function (view: FEView, controls: Control[]): Control[] {\n\tconst controlsForRefresh: Control[] = [];\n\tconst metaModel = view.getModel().getMetaModel();\n\tconst internalModel = view.getModel(\"internal\");\n\tconst refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};\n\tif (controls) {\n\t\tcontrols.forEach(function (control) {\n\t\t\tconst contextPath = control.data(\"targetCollectionPath\");\n\t\t\tfor (const key in refreshStrategy) {\n\t\t\t\tconst strategy = refreshStrategy[key];\n\t\t\t\tif (!controlsForRefresh.includes(control) && _isPathApplicableToContextPath(metaModel, contextPath, key, strategy)) {\n\t\t\t\t\tcontrolsForRefresh.push(control);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn controlsForRefresh;\n};\n/**\n * Get refresh strategy for the control for a context path.\n * @param control Control from which refresh info is needed\n * @param contextPath ContextPath for properities\n * @returns Returns strategy for control refresh.\n */\nconst getControlRefreshStrategyForContextPath = function (control: Control, contextPath: string): RefreshStrategyType | undefined {\n\tconst metaModel = (control.getModel() as ODataModel).getMetaModel();\n\tconst internalModel = control.getModel(\"internal\") as JSONModel;\n\tconst refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};\n\tlet strategy;\n\tif (contextPath) {\n\t\tfor (const key in refreshStrategy) {\n\t\t\tconst strategyToCheck = refreshStrategy[key];\n\t\t\tif (_isPathApplicableToContextPath(metaModel, contextPath, key, strategyToCheck)) {\n\t\t\t\tstrategy = strategyToCheck;\n\t\t\t\tif (strategy === \"includingDependents\") {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn strategy;\n};\n/**\n * Get refresh info from view.\n * @param view View from which refresh info is needed\n * @returns Returns strategy for view refresh.\n */\nconst getViewRefreshInfo = function (view: View): RefreshStrategyType | undefined {\n\tconst viewData = view.getViewData() as BaseManifestSettings,\n\t\tcontextPath = viewData && (viewData?.contextPath || `/${viewData?.entitySet}`);\n\treturn KeepAliveHelper.getControlRefreshStrategyForContextPath(view, contextPath);\n};\n\n/**\n * Get refresh strategy for an intent.\n * @param refreshStrategies RefreshStrategies to consider\n * @param semanticObject Outbound Semantic Object\n * @param action Outbound Action\n * @returns Returns refresh strategies to use for the intent.\n */\nconst getRefreshStrategyForIntent = function (\n\trefreshStrategies: RefreshStrategies,\n\tsemanticObject?: string,\n\taction?: string\n): SORefreshStrategy | undefined {\n\tconst soAction = semanticObject && action && `${semanticObject}-${action}`;\n\tconst intents = refreshStrategies.intents;\n\tconst soActionIntentMatch = intents && soAction && intents[soAction];\n\tconst soIntentMatch = !soActionIntentMatch && intents && semanticObject && intents[semanticObject];\n\n\treturn soActionIntentMatch || soIntentMatch || refreshStrategies?.defaultBehavior || refreshStrategies?._feDefault;\n};\n/**\n * Store control refresh strategy for hash in the internal model.\n * @param control Control for the refresh strategy\n * @param hash Shell hash object\n */\nconst storeControlRefreshStrategyForHash = function (control: Control, hash: SOAction): void {\n\tif (control && control.getModel(\"viewData\") && control.getModel(\"internal\")) {\n\t\tconst viewData = control.getModel(\"viewData\") as JSONModel;\n\t\tconst refreshStrategies: RefreshStrategies = viewData.getProperty(PATH_TO_STORE);\n\t\tif (refreshStrategies) {\n\t\t\tconst internalModel = control.getModel(\"internal\");\n\t\t\tconst refreshStrategy: SORefreshStrategy | undefined = KeepAliveHelper.getRefreshStrategyForIntent(\n\t\t\t\trefreshStrategies,\n\t\t\t\thash?.semanticObject,\n\t\t\t\thash?.action\n\t\t\t);\n\t\t\t(internalModel as JSONModel).setProperty(PATH_TO_STORE, refreshStrategy);\n\t\t}\n\t}\n};\n\n/**\n * Method to refresh and restore the view if neccessary.\n * @param view Control for the refresh strategy\n * @returns A promise after view refresh and restore are triggered\n */\nconst restoreView = async function (view: FEView): Promise<void> {\n\tconst internalModelContext = view.getBindingContext(\"internal\") as InternalModelContext;\n\tconst controller = view.getController();\n\tconst viewState = controller?.viewState;\n\tlet refreshBindings = Promise.resolve();\n\tif (internalModelContext && internalModelContext.getProperty(\"restoreStatus\") === \"pending\") {\n\t\tif (viewState.refreshViewBindings) {\n\t\t\trefreshBindings = viewState.refreshViewBindings();\n\t\t\trefreshBindings\n\t\t\t\t.then(function (): void {\n\t\t\t\t\tLog.info(`FE V4: Refresh was triggered successfull: ${view.getId()}`);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tLog.warning(`FE V4: Refresh was unsuccessfull: ${view.getId()}`, err);\n\t\t\t\t});\n\t\t}\n\t\trefreshBindings = refreshBindings\n\t\t\t.then(function (): void {\n\t\t\t\tviewState.onRestore();\n\t\t\t\tinternalModelContext.setProperty(\"restoreStatus\", \"done\");\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch(function (error) {\n\t\t\t\tLog.warning(`FE V4: Restore was unsuccessfull: ${view.getId()}`, error);\n\t\t\t});\n\t}\n\treturn refreshBindings;\n};\n\n/**\n * helper class for KeepAlive feature in sap.fe.\n */\nconst KeepAliveHelper = {\n\tgetControlsForRefresh,\n\tgetControlRefreshStrategyForContextPath,\n\tgetViewRefreshInfo,\n\tgetRefreshStrategyForIntent,\n\tstoreControlRefreshStrategyForHash,\n\trestoreView\n};\nexport default KeepAliveHelper;\n"],"mappings":"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","ignoreList":[],"file":"KeepAliveHelper-dbg.js"}