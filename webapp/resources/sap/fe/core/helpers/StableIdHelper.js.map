{"version":3,"file":"StableIdHelper.js","names":["_getStableIdPartFromIBN","dataField","idParts","isPathAnnotationExpression","SemanticObject","path","valueOf","Action","RequiresContext","push","filter","id","join","_getStableIdPartFromValue","value","Value","$Apply","$Function","map","app","$Path","replaceSpecialChars","replace","_getStableIdPartFromUrlOrPath","url","Url","_isValid","test","_removeNamespaces","createIdForAnnotation","annotation","idPreparation","arguments","length","undefined","$Type","ID","Target","Label","getStableIdPartFromDataField","toString","prepareId","_exports","generate","stableIdParts","ids","element","targetObject","result","ignoreForCompatibility","type","includes","Error","slice"],"sources":["./StableIdHelper.ts"],"sourcesContent":["import type { PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport { type ApplyAnnotationExpression } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForIntentBasedNavigation,\n\tDataFieldWithAction,\n\tDataFieldWithIntentBasedNavigation,\n\tDataFieldWithNavigationPath,\n\tDataFieldWithUrl,\n\tFacetTypes,\n\tFieldGroup\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"../templating/DataModelPathHelper\";\n\nexport type AuthorizedIdAnnotationsType = FacetTypes | FieldGroup | DataFieldAbstractTypes;\n\n/**\n * Generates the ID from an IBN.\n *\n * The ID contains the value, the potential action and context.\n * @param dataField The IBN annotation\n * @returns The ID\n */\nconst _getStableIdPartFromIBN = (dataField: DataFieldForIntentBasedNavigation | DataFieldWithIntentBasedNavigation): string => {\n\tconst idParts = [\n\t\tisPathAnnotationExpression(dataField.SemanticObject) ? dataField.SemanticObject.path : dataField.SemanticObject.valueOf(),\n\t\tdataField.Action?.valueOf()\n\t];\n\tif ((dataField as DataFieldForIntentBasedNavigation).RequiresContext) {\n\t\tidParts.push(\"RequiresContext\");\n\t}\n\treturn idParts.filter((id) => id).join(\"::\");\n};\n\n/**\n * Generates the ID part related to the value of the DataField.\n * @param dataField The DataField\n * @returns String related to the DataField value\n */\nconst _getStableIdPartFromValue = (\n\tdataField: DataField | DataFieldWithAction | DataFieldWithIntentBasedNavigation | DataFieldWithUrl | DataFieldWithNavigationPath\n): string => {\n\tconst value = dataField.Value;\n\tif (value.path) {\n\t\treturn value.path as string;\n\t} else if (value.$Apply && value.$Function === \"odata.concat\") {\n\t\treturn value.$Apply.map((app: { $Path?: string }) => app.$Path).join(\"::\");\n\t}\n\treturn replaceSpecialChars(value.replace(/ /g, \"_\"));\n};\n\n/**\n * Generates the ID part related to the value or url of the DataFieldWithUrl.\n * @param dataField The DataFieldWithUrl\n * @returns String related to the DataFieldWithUrl value or url\n */\nconst _getStableIdPartFromUrlOrPath = (dataField: DataFieldWithUrl): string => {\n\tconst value = dataField.Value;\n\tif (value?.path) {\n\t\treturn value.path as string;\n\t} else if (value?.$Apply && value.$Function === \"odata.concat\") {\n\t\treturn value.$Apply.map((app: { $Path?: string }) => app.$Path).join(\"::\");\n\t}\n\tconst url = dataField.Url as unknown as PropertyAnnotationValue<String>;\n\tif (isPathAnnotationExpression(url) && url?.path) {\n\t\treturn url.path;\n\t} else if (\n\t\t(url as ApplyAnnotationExpression<String>)?.$Apply &&\n\t\t(url as ApplyAnnotationExpression<String>).$Function === \"odata.concat\"\n\t) {\n\t\treturn (url as { $Apply: { $Path?: string }[] }).$Apply.map((app) => app.$Path).join(\"::\");\n\t}\n\treturn replaceSpecialChars(value?.replace(/ /g, \"_\"));\n};\n\n/**\n * Copy for the Core.isValid function to be independent.\n * @param value String to validate\n * @returns Whether the value is valid or not\n */\nconst _isValid = (value: string): boolean => {\n\treturn /^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(value);\n};\n\n/**\n * Removes the annotation namespaces.\n * @param id String to manipulate\n * @returns String without the annotation namespaces\n */\nconst _removeNamespaces = (id: string): string => {\n\tid = id.replace(\"com.sap.vocabularies.UI.v1.\", \"\");\n\tid = id.replace(\"com.sap.vocabularies.Communication.v1.\", \"\");\n\treturn id;\n};\n\n/**\n * Generates the ID from an annotation.\n * @param annotation The annotation\n * @param idPreparation Determines whether the ID needs to be prepared for final usage\n * @returns The ID\n */\nexport const createIdForAnnotation = (annotation: AuthorizedIdAnnotationsType, idPreparation = true): string | undefined => {\n\tlet id;\n\tswitch (annotation.$Type) {\n\t\tcase UIAnnotationTypes.ReferenceFacet:\n\t\t\tid = annotation.ID ?? annotation.Target.value;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.CollectionFacet:\n\t\t\tid = annotation.ID ?? \"undefined\"; // CollectionFacet without Id is not supported but doesn't necessary fail right now\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.FieldGroupType:\n\t\t\tid = annotation.Label;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tid = getStableIdPartFromDataField(annotation as DataFieldAbstractTypes);\n\t\t\tbreak;\n\t}\n\tid = id?.toString();\n\treturn id && idPreparation ? prepareId(id) : id;\n};\n\n/**\n * Generates a stable ID based on the given parameters.\n *\n * Parameters are combined in the same order in which they are provided and are separated by '::'.\n * Generate(['Stable', 'Id']) would result in 'Stable::Id' as the stable ID.\n * Currently supported annotations are Facets, FieldGroup and all kinds of DataField.\n * @param stableIdParts Array of strings, undefined, dataModelObjectPath or annotations\n * @returns Stable ID constructed from the provided parameters\n */\nexport const generate = (\n\tstableIdParts: Array<string | undefined | DataModelObjectPath<AuthorizedIdAnnotationsType> | AuthorizedIdAnnotationsType>\n): string => {\n\tconst ids: (string | undefined)[] = stableIdParts.map((element) => {\n\t\tif (typeof element === \"string\" || !element) {\n\t\t\treturn element;\n\t\t}\n\t\treturn createIdForAnnotation(\n\t\t\t(element as DataModelObjectPath<AuthorizedIdAnnotationsType>).targetObject || (element as AuthorizedIdAnnotationsType),\n\t\t\tfalse\n\t\t);\n\t});\n\tconst result = ids.filter((id) => id).join(\"::\");\n\treturn prepareId(result);\n};\n\n/**\n * Generates the ID from a DataField.\n * @param dataField The DataField\n * @param ignoreForCompatibility Ignore a part of the ID on the DataFieldWithNavigationPath to be aligned with previous versions\n * @returns The ID\n */\nexport const getStableIdPartFromDataField = (dataField: DataFieldAbstractTypes, ignoreForCompatibility = false): string | undefined => {\n\tlet id = \"\";\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tid = `DataFieldForAction::${dataField.Action}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\t\t// DataFieldForActionGroup comes with ID property unlike other DataField types\n\t\t\tid = `DataFieldForActionGroup::${dataField.ID}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tid = `DataFieldForIntentBasedNavigation::${_getStableIdPartFromIBN(dataField)}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\tid = `DataFieldForAnnotation::${dataField.Target.value}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tid = `DataFieldWithAction::${_getStableIdPartFromValue(dataField)}::${dataField.Action}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataField:\n\t\t\tid = `DataField::${_getStableIdPartFromValue(dataField)}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\tid = `DataFieldWithIntentBasedNavigation::${_getStableIdPartFromValue(dataField)}::${_getStableIdPartFromIBN(dataField)}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\tid = `DataFieldWithNavigationPath::${_getStableIdPartFromValue(dataField)}`;\n\t\t\tif (dataField.Target.type === \"NavigationPropertyPath\" && !ignoreForCompatibility) {\n\t\t\t\tid = `${id}::${dataField.Target.value}`;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\tid = `DataFieldWithUrl::${_getStableIdPartFromUrlOrPath(dataField)}`;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn id ? prepareId(id) : undefined;\n};\n\n/**\n * Removes or replaces with \"::\" some special characters.\n * Special characters (@, /, #) are replaced by '::' if they are in the middle of the stable ID and removed altogether if they are at the beginning or end.\n * @param id String to manipulate\n * @returns String without the special characters\n */\nexport const replaceSpecialChars = (id: string): string => {\n\tif (id.includes(\" \")) {\n\t\tthrow Error(`${id} - Spaces are not allowed in ID parts.`);\n\t}\n\tid = id\n\t\t.replace(/^\\/|^@|^#|^\\*/, \"\") // remove special characters from the beginning of the string\n\t\t.replace(/\\/$|@$|#$|\\*$/, \"\") // remove special characters from the end of the string\n\t\t.replace(/[/|@()#]/g, \"::\"); // replace special characters with ::\n\n\t// Replace double occurrences of the separator with a single separator\n\twhile (id.includes(\"::::\")) {\n\t\tid = id.replace(\"::::\", \"::\");\n\t}\n\n\t// If there is a :: at the end of the ID remove it\n\tif (id.slice(-2) == \"::\") {\n\t\tid = id.slice(0, -2);\n\t}\n\n\treturn id;\n};\n\n/**\n * Prepares the ID.\n *\n * Removes namespaces and special characters and checks the validity of this ID.\n * @param id The ID\n * @returns The ID or throws an error\n */\nexport const prepareId = function (id: string): string {\n\tid = replaceSpecialChars(_removeNamespaces(id));\n\tif (_isValid(id)) {\n\t\treturn id;\n\t} else {\n\t\tthrow Error(`${id} - Stable Id could not be generated due to insufficient information.`);\n\t}\n};\n"],"mappings":"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","ignoreList":[]}