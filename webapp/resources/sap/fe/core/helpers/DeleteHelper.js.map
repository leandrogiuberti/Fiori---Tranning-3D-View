{"version":3,"file":"DeleteHelper.js","names":["DeleteOptionTypes","DeleteDialogContentControl","getUpdatedSelections","internalModelContext","type","selectedContexts","contextsToRemove","retSelectedContexts","forEach","context","idx","indexOf","splice","setProperty","clearSelectedContextsForOption","option","getProperty","deletableContexts","draftSiblingPairs","draftsWithDeletableActive","drafts","map","contextPair","draft","length","afterDeleteProcess","parameters","options","contexts","resourceModel","lastDeletedRowIndex","entitySetName","undefined","selected","some","isMultiValueField","parentControl","getMetadata","getName","shouldShowToast","silentMode","messageKey","MessageToast","show","getText","deleteHelper","setFocusAfterDelete","contextPath","getPath","getModel","localAnnotationModel","getLocalAnnotationModel","annotationObject","getObject","key","Object","keys","includes","async","table","deletedRowsCount","tableRowsCount","getRowBinding","getCount","originalTableRowsCount","nextFocusRowIndex","focusRow","focus","getLockedContextUser","lockedContext","draftAdminData","getLockedObjectsText","numberOfSelectedContexts","lockedContexts","retTxt","lockedUser","getNonDeletableActivesOfDraftsText","numberOfDrafts","totalDeletable","getUnSavedContextUser","unSavedContext","sLastChangedByUser","getUnsavedContextsText","unSavedContexts","infoTxt","optionTxt","optionWithoutTxt","lastChangedByUser","getNonDeletableText","mParameters","totalNumDeletableContexts","draftsWithNonDeletableActive","nonDeletableContexts","Text","text","getConfirmedDeletableContext","reduce","result","draftsToDeleteBeforeActive","concat","getDraftsToDeleteBeforeActive","updateDraftOptionsForDeletableTexts","vContexts","items","lockedContextsTxt","deletableDraftInfo","push","siblingInfo","targetContext","nonDeletableExists","nonDeletableTextCtrl","unsavedChangesTxts","control","CHECKBOX","nonDeletableActivesOfDraftsText","TEXT","updateContentForDeleteDialog","setText","CheckBox","select","oEvent","checkBox","getSource","getSelected","_getOriginalSelectedRecord","contextToDelete","ret","find","draftSiblingPair","getOptionsForDeletableTexts","directDeletableContexts","description","oTable","sKey","getParent","getIdentifierColumn","txt","descriptionPath","path","oLineContextData","sKeyValue","sDescription","deletableOptionTxt","unshift","allDeletableTxt","deleteDraftsBeforeActivesAndGetErrors","messageHandler","appComponent","enableStrictHandling","draftErrors","Promise","allSettled","deleteDraft","e","Log","error","removeDescendantContexts","tempContexts","parentContext","parentIndex","childIndex","childContext","isAncestorOf","setSelected","filter","deleteConfirmHandler","draftEnabled","bindingType","messageHandlingKey","registerToHoldMessages","getIndex","beforeDeleteCallBack","contextsToDelete","all","draftWithDeletableActive","resetChanges","delete","getCanonicalPath","Error","removeHoldKey","oError","addGenericDeleteFailureMessage","showMessages","unHoldKey","Messaging","addMessages","Message","message","MessageType","target","persistent","code","technicalDetails","fe","changeSetPreTextForSingleError","updateInfoFromSibling","info","deletablePath","staticDeletable","isActive","hasActive","siblingInformation","computeSiblingInformation","siblingDeletable","requestProperty","hasDraft","propertiesToFetch","locked","pathMapping","deletable","_e","getContextInfos","isTransient","isInactive","metaContext","getMetaModel","getMetaContext","isDraftRoot","isDraftNode","isInactiveContext","contextData","DraftAdministrativeData","InProcessByUser","HasDraftEntity","IsActiveEntity","HasActiveEntity","updateDeleteInfoForSelectedContexts","forContextMenu","arguments","contextInfos","buckets","value"],"sources":["./DeleteHelper.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { SiblingInformation } from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport draft from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport type MessageHandler from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport type { CheckBox$SelectEvent } from \"sap/m/CheckBox\";\nimport CheckBox from \"sap/m/CheckBox\";\nimport Text from \"sap/m/Text\";\n\nimport type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport MessageToast from \"sap/m/MessageToast\";\nimport type Control from \"sap/ui/core/Control\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type { InternalModelContext } from \"./ModelHelper\";\n\nenum DeleteOptionTypes {\n\tdeletableContexts = \"deletableContexts\",\n\tdraftsWithDeletableActive = \"draftsWithDeletableActive\",\n\tunSavedContexts = \"unSavedContexts\",\n\tdraftsWithNonDeletableActive = \"draftsWithNonDeletableActive\",\n\tdraftsToDeleteBeforeActive = \"draftsToDeleteBeforeActive\"\n}\n\nenum DeleteDialogContentControl {\n\tCHECKBOX = \"checkBox\",\n\tTEXT = \"text\"\n}\n\nexport type DraftSiblingPair = {\n\tdraft: ODataV4Context;\n\tsiblingInfo: SiblingInformation;\n};\n\nexport type DeleteOption = {\n\ttype: DeleteOptionTypes;\n\tcontexts: ODataV4Context[];\n\tselected: boolean;\n\ttext?: string;\n\tcontrol?: DeleteDialogContentControl;\n};\n\nexport type ContextInfo = {\n\tcontext: ODataV4Context;\n\tsiblingInfo: SiblingInformation | undefined;\n\tisDraftRoot: boolean;\n\tisDraftNode: boolean;\n\tisActive: boolean;\n\thasActive: boolean;\n\thasDraft: boolean;\n\tlocked: boolean;\n\tdeletable: boolean;\n\tsiblingDeletable: boolean;\n\tisInactiveContext: boolean;\n};\n\nexport type DraftAdministrativeDataType = {\n\tDraftUUID: string;\n\tInProcessByUser?: string;\n\tInProcessByUserDescription?: string;\n\tCreatedByUserDescription?: string;\n\tCreatedByUser?: string;\n\tLastChangedByUserDescription?: string;\n\tLastChangedByUser?: string;\n};\n\nexport type DeleteParameters = {\n\tinternalModelContext?: InternalModelContext | null;\n\tnumberOfSelectedContexts?: number;\n\tentitySetName?: string;\n\tparentControl?: Control;\n\tdescription?: string | { path: string };\n\tbeforeDeleteCallBack?: Function;\n\tunSavedContexts?: ODataV4Context[];\n\tdraftsWithNonDeletableActive?: ODataV4Context[];\n\tlockedContexts?: ODataV4Context[];\n\tdraftsWithDeletableActive?: DraftSiblingPair[];\n\tsilentMode?: boolean;\n};\n\nexport type DeleteTextInfo = {\n\tinfoTxt?: string;\n\toptionTxt?: string;\n\toptionWithoutTxt?: boolean;\n};\n\nfunction getUpdatedSelections(\n\tinternalModelContext: InternalModelContext,\n\ttype: DeleteOptionTypes,\n\tselectedContexts: ODataV4Context[],\n\tcontextsToRemove: ODataV4Context[]\n): ODataV4Context[] {\n\tconst retSelectedContexts: ODataV4Context[] = [...selectedContexts];\n\tcontextsToRemove.forEach((context: ODataV4Context) => {\n\t\tconst idx = retSelectedContexts.indexOf(context);\n\t\tif (idx !== -1) {\n\t\t\tretSelectedContexts.splice(idx, 1);\n\t\t}\n\t});\n\tinternalModelContext.setProperty(type, []);\n\n\treturn retSelectedContexts;\n}\n\nfunction clearSelectedContextsForOption(internalModelContext: InternalModelContext, option: DeleteOption): void {\n\tlet selectedContexts = (internalModelContext.getProperty(\"selectedContexts\") as ODataV4Context[]) || [];\n\n\tif (option.type === DeleteOptionTypes.deletableContexts) {\n\t\tselectedContexts = getUpdatedSelections(\n\t\t\tinternalModelContext,\n\t\t\tDeleteOptionTypes.deletableContexts,\n\t\t\tselectedContexts,\n\t\t\tinternalModelContext.getProperty(DeleteOptionTypes.deletableContexts) || []\n\t\t);\n\n\t\tconst draftSiblingPairs = internalModelContext.getProperty(DeleteOptionTypes.draftsWithDeletableActive) || [];\n\t\tconst drafts = draftSiblingPairs.map((contextPair: DraftSiblingPair) => {\n\t\t\treturn contextPair.draft;\n\t\t});\n\t\tselectedContexts = getUpdatedSelections(\n\t\t\tinternalModelContext,\n\t\t\tDeleteOptionTypes.draftsWithDeletableActive,\n\t\t\tselectedContexts,\n\t\t\tdrafts\n\t\t);\n\t} else {\n\t\tconst contextsToRemove = internalModelContext.getProperty(option.type) || [];\n\t\tselectedContexts = getUpdatedSelections(internalModelContext, option.type, selectedContexts, contextsToRemove);\n\t}\n\tinternalModelContext.setProperty(\"selectedContexts\", selectedContexts);\n\tinternalModelContext.setProperty(\"numberOfSelectedContexts\", selectedContexts.length);\n}\n\nfunction afterDeleteProcess(\n\tparameters: DeleteParameters,\n\toptions: DeleteOption[],\n\tcontexts: ODataV4Context[],\n\tresourceModel: ResourceModel,\n\tlastDeletedRowIndex: number\n): void {\n\tconst { internalModelContext, entitySetName } = parameters;\n\tif (internalModelContext) {\n\t\tif (internalModelContext.getProperty(\"deleteEnabled\") != undefined) {\n\t\t\toptions.forEach((option) => {\n\t\t\t\t// if an option is selected, then it is deleted. So, we need to remove them from selected contexts.\n\t\t\t\tif (option.selected) {\n\t\t\t\t\tclearSelectedContextsForOption(internalModelContext, option);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t// if at least one of the options is not selected, then the delete button needs to be enabled.\n\t\tinternalModelContext.setProperty(\n\t\t\t\"deleteEnabled\",\n\t\t\toptions.some((option) => !option.selected)\n\t\t);\n\t}\n\n\tconst isMultiValueField = parameters.parentControl?.getMetadata().getName() === \"sap.ui.mdc.MultiValueField\";\n\tconst shouldShowToast = !parameters.parentControl || !isMultiValueField;\n\n\tif (shouldShowToast && parameters.silentMode !== true) {\n\t\tconst messageKey =\n\t\t\tcontexts.length === 1 ? \"C_TRANSACTION_HELPER_DELETE_TOAST_SINGULAR\" : \"C_TRANSACTION_HELPER_DELETE_TOAST_PLURAL\";\n\t\tMessageToast.show(resourceModel.getText(messageKey, undefined, entitySetName));\n\t}\n\n\t// The MultiValueField does not need resetting of focus like the table, with the resetting we get console errors we avoid trough this check\n\tif (parameters.parentControl && !isMultiValueField) {\n\t\tdeleteHelper.setFocusAfterDelete(parameters.parentControl as Table, contexts.length, lastDeletedRowIndex);\n\t}\n\n\tif (contexts?.length) {\n\t\tcontexts.forEach((context) => {\n\t\t\tconst contextPath = context.getPath();\n\t\t\tif (contextPath && context.getModel()) {\n\t\t\t\tconst localAnnotationModel = context.getModel().getLocalAnnotationModel();\n\t\t\t\tconst annotationObject = localAnnotationModel.getObject(contextPath);\n\t\t\t\tif (annotationObject && typeof annotationObject === \"object\") {\n\t\t\t\t\tfor (const key of Object.keys(annotationObject)) {\n\t\t\t\t\t\tif (key.includes(\"ui5.fe.recommendations\")) {\n\t\t\t\t\t\t\tdelete annotationObject[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlocalAnnotationModel.setProperty(contextPath, annotationObject);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nasync function setFocusAfterDelete(table: Table, deletedRowsCount: number, lastDeletedRowIndex: number): Promise<void> {\n\tconst tableRowsCount = table.getRowBinding?.()?.getCount();\n\tconst originalTableRowsCount = (tableRowsCount ?? 0) + deletedRowsCount;\n\tlet nextFocusRowIndex;\n\n\tif (lastDeletedRowIndex !== -1 && tableRowsCount !== undefined && tableRowsCount > 0) {\n\t\t//If the last row is deleted, move the focus to previous row to it\n\t\tif (lastDeletedRowIndex === originalTableRowsCount - 1) {\n\t\t\tnextFocusRowIndex = tableRowsCount - 1;\n\t\t\t//For the normal scenario, move the focus to the next row\n\t\t} else {\n\t\t\tnextFocusRowIndex = lastDeletedRowIndex - deletedRowsCount + 1;\n\t\t}\n\t\tawait table.focusRow(nextFocusRowIndex, false);\n\t} else {\n\t\t// For zero rows or default case, move focus to table\n\t\ttable.focus();\n\t}\n}\n\nfunction getLockedContextUser(lockedContext: ODataV4Context): string {\n\tconst draftAdminData = lockedContext.getObject()[\"DraftAdministrativeData\"] as DraftAdministrativeDataType;\n\treturn (draftAdminData && draftAdminData[\"InProcessByUser\"]) || \"\";\n}\n\nfunction getLockedObjectsText(resourceModel: ResourceModel, numberOfSelectedContexts: number, lockedContexts: ODataV4Context[]): string {\n\tlet retTxt = \"\";\n\n\tif (numberOfSelectedContexts === 1 && lockedContexts.length === 1) {\n\t\t//only one unsaved object\n\t\tconst lockedUser = getLockedContextUser(lockedContexts[0]);\n\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_OBJECT_LOCKED\", [lockedUser]);\n\t} else if (lockedContexts.length == 1) {\n\t\tconst lockedUser = getLockedContextUser(lockedContexts[0]);\n\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_ONE_OBJECT_LOCKED\", [\n\t\t\tnumberOfSelectedContexts,\n\t\t\tlockedUser\n\t\t]);\n\t} else if (lockedContexts.length > 1) {\n\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_LOCKED\", [\n\t\t\tlockedContexts.length,\n\t\t\tnumberOfSelectedContexts\n\t\t]);\n\t}\n\n\treturn retTxt;\n}\n\nfunction getNonDeletableActivesOfDraftsText(resourceModel: ResourceModel, numberOfDrafts: number, totalDeletable: number): string {\n\tlet retTxt = \"\";\n\n\tif (totalDeletable === numberOfDrafts) {\n\t\tif (numberOfDrafts === 1) {\n\t\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_ONLY_DRAFT_OF_NON_DELETABLE_ACTIVE\");\n\t\t} else {\n\t\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_ONLY_DRAFTS_OF_NON_DELETABLE_ACTIVE\");\n\t\t}\n\t} else if (numberOfDrafts === 1) {\n\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_DRAFT_OF_NON_DELETABLE_ACTIVE\");\n\t} else {\n\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_DRAFTS_OF_NON_DELETABLE_ACTIVE\");\n\t}\n\n\treturn retTxt;\n}\n\nfunction getUnSavedContextUser(unSavedContext: ODataV4Context): string {\n\tconst draftAdminData = unSavedContext.getObject()[\"DraftAdministrativeData\"] as DraftAdministrativeDataType;\n\tlet sLastChangedByUser = \"\";\n\tif (draftAdminData) {\n\t\tsLastChangedByUser = draftAdminData[\"LastChangedByUserDescription\"] || draftAdminData[\"LastChangedByUser\"] || \"\";\n\t}\n\n\treturn sLastChangedByUser;\n}\n\nfunction getUnsavedContextsText(\n\tresourceModel: ResourceModel,\n\tnumberOfSelectedContexts: number,\n\tunSavedContexts: ODataV4Context[],\n\ttotalDeletable: number\n): DeleteTextInfo {\n\tlet infoTxt = \"\",\n\t\toptionTxt = \"\",\n\t\toptionWithoutTxt = false;\n\tif (numberOfSelectedContexts === 1 && unSavedContexts.length === 1) {\n\t\t//only one unsaved object are selected\n\t\tconst lastChangedByUser = getUnSavedContextUser(unSavedContexts[0]);\n\t\tinfoTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_CHANGES\", [lastChangedByUser]);\n\t\toptionWithoutTxt = true;\n\t} else if (numberOfSelectedContexts === unSavedContexts.length) {\n\t\t//only multiple unsaved objects are selected\n\t\tinfoTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_CHANGES_MULTIPLE_OBJECTS\");\n\t\toptionWithoutTxt = true;\n\t} else if (totalDeletable === unSavedContexts.length) {\n\t\t// non-deletable/locked exists, all deletable are unsaved by others\n\t\tif (unSavedContexts.length === 1) {\n\t\t\tconst lastChangedByUser = getUnSavedContextUser(unSavedContexts[0]);\n\t\t\tinfoTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_AND_FEW_OBJECTS_LOCKED_SINGULAR\", [\n\t\t\t\tlastChangedByUser\n\t\t\t]);\n\t\t} else {\n\t\t\tinfoTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_AND_FEW_OBJECTS_LOCKED_PLURAL\");\n\t\t}\n\t\toptionWithoutTxt = true;\n\t} else if (totalDeletable > unSavedContexts.length) {\n\t\t// non-deletable/locked exists, deletable include unsaved and other types.\n\t\tif (unSavedContexts.length === 1) {\n\t\t\tconst lastChangedByUser = getUnSavedContextUser(unSavedContexts[0]);\n\t\t\toptionTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_UNSAVED_SINGULAR\", [\n\t\t\t\tlastChangedByUser\n\t\t\t]);\n\t\t} else {\n\t\t\toptionTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_UNSAVED_PLURAL\");\n\t\t}\n\t}\n\n\treturn { infoTxt, optionTxt, optionWithoutTxt };\n}\n\nfunction getNonDeletableText(\n\tmParameters: DeleteParameters,\n\ttotalNumDeletableContexts: number,\n\tresourceModel: ResourceModel\n): Text | undefined {\n\tconst { numberOfSelectedContexts, entitySetName, lockedContexts = [], draftsWithNonDeletableActive = [] } = mParameters;\n\tconst nonDeletableContexts =\n\t\tnumberOfSelectedContexts! - (lockedContexts.length + totalNumDeletableContexts - draftsWithNonDeletableActive.length);\n\tlet retTxt = \"\";\n\n\tif (\n\t\tnonDeletableContexts > 0 &&\n\t\t(totalNumDeletableContexts === 0 || draftsWithNonDeletableActive.length === totalNumDeletableContexts)\n\t) {\n\t\t// 1. None of the ccontexts are deletable\n\t\t// 2. Only drafts of non deletable contexts exist.\n\t\tif (lockedContexts.length > 0) {\n\t\t\t// Locked contexts exist\n\t\t\tif (nonDeletableContexts === 1) {\n\t\t\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_ALL_REMAINING_NON_DELETABLE_SINGULAR\");\n\t\t\t} else {\n\t\t\t\tretTxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_ALL_REMAINING_NON_DELETABLE_PLURAL\");\n\t\t\t}\n\t\t} else if (nonDeletableContexts === 1) {\n\t\t\t// Only pure non-deletable contexts exist single\n\t\t\tretTxt = resourceModel.getText(\n\t\t\t\t\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_AND_ONE_OBJECT_NON_DELETABLE\",\n\t\t\t\tundefined,\n\t\t\t\tentitySetName\n\t\t\t);\n\t\t} else {\n\t\t\t// Only pure non-deletable contexts exist multiple\n\t\t\tretTxt = resourceModel.getText(\n\t\t\t\t\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_MULTIPLE_AND_ALL_OBJECT_NON_DELETABLE\",\n\t\t\t\tundefined,\n\t\t\t\tentitySetName\n\t\t\t);\n\t\t}\n\t} else if (nonDeletableContexts === 1) {\n\t\t// deletable and non-deletable exists together, single\n\t\tretTxt = resourceModel.getText(\n\t\t\t\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_ONE_OBJECT_NON_DELETABLE\",\n\t\t\t[numberOfSelectedContexts],\n\t\t\tentitySetName\n\t\t);\n\t} else if (nonDeletableContexts > 1) {\n\t\t// deletable and non-deletable exists together, multiple\n\t\tretTxt = resourceModel.getText(\n\t\t\t\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_NON_DELETABLE\",\n\t\t\t[nonDeletableContexts, numberOfSelectedContexts],\n\t\t\tentitySetName\n\t\t);\n\t}\n\n\treturn retTxt ? new Text({ text: retTxt }) : undefined;\n}\n\nfunction getConfirmedDeletableContext(contexts: ODataV4Context[], options: DeleteOption[]): ODataV4Context[] {\n\treturn options.reduce((result, option) => {\n\t\treturn option.selected && option.type !== DeleteOptionTypes.draftsToDeleteBeforeActive ? result.concat(option.contexts) : result;\n\t}, contexts);\n}\n\nfunction getDraftsToDeleteBeforeActive(options: DeleteOption[]): ODataV4Context[] {\n\tconst contexts: ODataV4Context[] = [];\n\treturn options.reduce((result, option) => {\n\t\treturn option.selected && option.type === DeleteOptionTypes.draftsToDeleteBeforeActive ? result.concat(option.contexts) : result;\n\t}, contexts);\n}\n\nfunction updateDraftOptionsForDeletableTexts(\n\tmParameters: DeleteParameters,\n\tvContexts: ODataV4Context[],\n\ttotalDeletable: number,\n\tresourceModel: ResourceModel,\n\titems: Control[],\n\toptions: DeleteOption[]\n): void {\n\tlet { numberOfSelectedContexts, draftsWithDeletableActive, unSavedContexts, lockedContexts, draftsWithNonDeletableActive } =\n\t\tmParameters;\n\tdraftsWithDeletableActive ??= [];\n\tunSavedContexts ??= [];\n\tlockedContexts ??= [];\n\tdraftsWithNonDeletableActive ??= [];\n\tnumberOfSelectedContexts ??= 0;\n\tlet lockedContextsTxt = \"\";\n\n\t// drafts with active\n\tif (draftsWithDeletableActive.length > 0) {\n\t\tconst draftsToDeleteBeforeActive: ODataV4Context[] = [];\n\t\tdraftsWithDeletableActive.forEach((deletableDraftInfo: DraftSiblingPair) => {\n\t\t\t// In either cases, if an own draft is locked or not the draft needs to be discarded before deleting active record.\n\t\t\tdraftsToDeleteBeforeActive.push(deletableDraftInfo.draft);\n\t\t\tvContexts.push(deletableDraftInfo.siblingInfo.targetContext);\n\t\t});\n\t\tif (draftsToDeleteBeforeActive.length > 0) {\n\t\t\toptions.push({\n\t\t\t\ttype: DeleteOptionTypes.draftsToDeleteBeforeActive,\n\t\t\t\tcontexts: draftsToDeleteBeforeActive,\n\t\t\t\tselected: true\n\t\t\t});\n\t\t}\n\t}\n\n\t// items locked msg\n\tif (lockedContexts.length > 0) {\n\t\tlockedContextsTxt = deleteHelper.getLockedObjectsText(resourceModel, numberOfSelectedContexts, lockedContexts) || \"\";\n\t\titems.push(new Text({ text: lockedContextsTxt }));\n\t}\n\n\t// non deletable msg\n\tconst nonDeletableExists = numberOfSelectedContexts != totalDeletable - draftsWithNonDeletableActive.length + lockedContexts.length;\n\tconst nonDeletableTextCtrl = nonDeletableExists && deleteHelper.getNonDeletableText(mParameters, totalDeletable, resourceModel);\n\tif (nonDeletableTextCtrl) {\n\t\titems.push(nonDeletableTextCtrl);\n\t}\n\n\t// option: unsaved changes by others\n\tif (unSavedContexts.length > 0) {\n\t\tconst unsavedChangesTxts =\n\t\t\tdeleteHelper.getUnsavedContextsText(resourceModel, numberOfSelectedContexts, unSavedContexts, totalDeletable) || {};\n\t\tif (unsavedChangesTxts.infoTxt) {\n\t\t\titems.push(new Text({ text: unsavedChangesTxts.infoTxt }));\n\t\t}\n\t\tif (unsavedChangesTxts.optionTxt || unsavedChangesTxts.optionWithoutTxt) {\n\t\t\toptions.push({\n\t\t\t\ttype: DeleteOptionTypes.unSavedContexts,\n\t\t\t\tcontexts: unSavedContexts,\n\t\t\t\ttext: unsavedChangesTxts.optionTxt,\n\t\t\t\tselected: true,\n\t\t\t\tcontrol: DeleteDialogContentControl.CHECKBOX\n\t\t\t});\n\t\t}\n\t}\n\n\t// option: drafts with active not deletable\n\tif (draftsWithNonDeletableActive.length > 0) {\n\t\tconst nonDeletableActivesOfDraftsText =\n\t\t\tdeleteHelper.getNonDeletableActivesOfDraftsText(resourceModel, draftsWithNonDeletableActive.length, totalDeletable) || \"\";\n\t\tif (nonDeletableActivesOfDraftsText) {\n\t\t\toptions.push({\n\t\t\t\ttype: DeleteOptionTypes.draftsWithNonDeletableActive,\n\t\t\t\tcontexts: draftsWithNonDeletableActive,\n\t\t\t\ttext: nonDeletableActivesOfDraftsText,\n\t\t\t\tselected: true,\n\t\t\t\tcontrol: totalDeletable > 0 ? DeleteDialogContentControl.CHECKBOX : DeleteDialogContentControl.TEXT\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction updateContentForDeleteDialog(options: DeleteOption[], items: Control[]): void {\n\tif (options.length === 1) {\n\t\t// Single option doesn't need checkBox\n\t\tconst option = options[0];\n\t\tif (option.text) {\n\t\t\tconst text = new Text();\n\t\t\ttext.setText(option.text);\n\t\t\titems.push(text);\n\t\t}\n\t} else if (options.length > 1) {\n\t\t// Multiple Options\n\n\t\t// Texts\n\t\toptions.forEach((option: DeleteOption) => {\n\t\t\tif (option.control === \"text\" && option.text) {\n\t\t\t\tconst text = new Text();\n\t\t\t\ttext.setText(option.text);\n\t\t\t\titems.push(text);\n\t\t\t}\n\t\t});\n\t\t// CheckBoxs\n\t\toptions.forEach((option: DeleteOption) => {\n\t\t\tif (option.control === \"checkBox\" && option.text) {\n\t\t\t\titems.push(\n\t\t\t\t\tnew CheckBox({\n\t\t\t\t\t\ttext: option.text,\n\t\t\t\t\t\tselected: true,\n\t\t\t\t\t\tselect: function (oEvent: CheckBox$SelectEvent): void {\n\t\t\t\t\t\t\tconst checkBox = oEvent.getSource();\n\t\t\t\t\t\t\tconst selected = checkBox.getSelected();\n\t\t\t\t\t\t\toption.selected = selected;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Get the original record selected on the UI.\n *\n * In the case the context to delete is an active record but the selected context is a draft record.\n * @param mParameters Delete parameters and information of selected contexts.\n * @param contextToDelete ODataV4Context to check.\n * @returns ODataV4Context for delete.\n */\nfunction _getOriginalSelectedRecord(mParameters: DeleteParameters, contextToDelete: ODataV4Context): ODataV4Context {\n\tconst { draftsWithDeletableActive } = mParameters;\n\tconst ret = draftsWithDeletableActive?.find((draftSiblingPair) => draftSiblingPair.siblingInfo.targetContext === contextToDelete);\n\treturn ret?.draft ? ret.draft : contextToDelete;\n}\n\n/**\n * Get the possible options for deletion of the selected contexts.\n * @param mParameters Delete parameters and information of selected contexts.\n * @param directDeletableContexts Contexts that can be deletable directly.\n * @param resourceModel Resource model.\n * @returns Options that are possible for selected records.\n */\nfunction getOptionsForDeletableTexts(\n\tmParameters: DeleteParameters,\n\tdirectDeletableContexts: ODataV4Context[],\n\tresourceModel: ResourceModel\n): DeleteOption[] {\n\tlet { numberOfSelectedContexts, lockedContexts, draftsWithNonDeletableActive, unSavedContexts } = mParameters;\n\tconst { entitySetName, parentControl, description } = mParameters;\n\tdraftsWithNonDeletableActive ??= [];\n\tunSavedContexts ??= [];\n\tlockedContexts ??= [];\n\tdraftsWithNonDeletableActive ??= [];\n\tnumberOfSelectedContexts ??= 0;\n\tconst totalDeletable = directDeletableContexts.length + draftsWithNonDeletableActive.length + unSavedContexts.length;\n\tconst nonDeletableContexts = numberOfSelectedContexts - (lockedContexts.length + totalDeletable - draftsWithNonDeletableActive.length);\n\tconst options: DeleteOption[] = [];\n\n\tif (numberOfSelectedContexts === 1 && numberOfSelectedContexts === directDeletableContexts.length) {\n\t\t// single deletable context\n\t\tconst oTable = parentControl as Table;\n\t\tconst sKey = oTable && ((oTable.getParent() as TableAPI).getIdentifierColumn() as string);\n\t\tlet txt;\n\t\tif (sKey) {\n\t\t\tconst descriptionPath = description && (description as { path?: string }).path;\n\t\t\t// In case the selected record is draft(in UI). The Active record needs to be deleted(directDeletableContexts has active record), but data is not requested or partial. We get data from the draft.\n\t\t\tconst oLineContextData = _getOriginalSelectedRecord(mParameters, directDeletableContexts[0]).getObject();\n\t\t\tconst sKeyValue = sKey ? oLineContextData[sKey] : undefined;\n\t\t\tconst sDescription = descriptionPath && oLineContextData[descriptionPath];\n\t\t\tif (sKeyValue) {\n\t\t\t\tif (sDescription && description && sKey !== (description as { path?: string }).path) {\n\t\t\t\t\ttxt = resourceModel.getText(\n\t\t\t\t\t\t\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO\",\n\t\t\t\t\t\t[sKeyValue, sDescription],\n\t\t\t\t\t\tentitySetName\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\ttxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_ONLY\", [sKeyValue], entitySetName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR\", undefined, entitySetName);\n\t\t\t}\n\t\t} else {\n\t\t\ttxt = resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR\", undefined, entitySetName);\n\t\t}\n\t\toptions.push({\n\t\t\ttype: DeleteOptionTypes.deletableContexts,\n\t\t\tcontexts: directDeletableContexts,\n\t\t\ttext: txt,\n\t\t\tselected: true,\n\t\t\tcontrol: DeleteDialogContentControl.TEXT\n\t\t});\n\t} else if (\n\t\tunSavedContexts.length !== totalDeletable &&\n\t\tnumberOfSelectedContexts > 0 &&\n\t\t(directDeletableContexts.length > 0 || (unSavedContexts.length > 0 && draftsWithNonDeletableActive.length > 0))\n\t) {\n\t\tif (numberOfSelectedContexts > directDeletableContexts.length && nonDeletableContexts + lockedContexts.length > 0) {\n\t\t\t// other types exists with pure deletable ones\n\t\t\tlet deletableOptionTxt = \"\";\n\t\t\tif (totalDeletable === 1) {\n\t\t\t\tdeletableOptionTxt = resourceModel.getText(\n\t\t\t\t\t\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR_NON_DELETABLE\",\n\t\t\t\t\tundefined,\n\t\t\t\t\tentitySetName\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tdeletableOptionTxt = resourceModel.getText(\n\t\t\t\t\t\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_PLURAL_NON_DELETABLE\",\n\t\t\t\t\tundefined,\n\t\t\t\t\tentitySetName\n\t\t\t\t);\n\t\t\t}\n\t\t\toptions.unshift({\n\t\t\t\ttype: DeleteOptionTypes.deletableContexts,\n\t\t\t\tcontexts: directDeletableContexts,\n\t\t\t\ttext: deletableOptionTxt,\n\t\t\t\tselected: true,\n\t\t\t\tcontrol: DeleteDialogContentControl.TEXT\n\t\t\t});\n\t\t} else {\n\t\t\t// only deletable\n\t\t\tconst allDeletableTxt =\n\t\t\t\ttotalDeletable === 1\n\t\t\t\t\t? resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR\", undefined, entitySetName)\n\t\t\t\t\t: resourceModel.getText(\"C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_PLURAL\", undefined, entitySetName);\n\t\t\toptions.push({\n\t\t\t\ttype: DeleteOptionTypes.deletableContexts,\n\t\t\t\tcontexts: directDeletableContexts,\n\t\t\t\ttext: allDeletableTxt,\n\t\t\t\tselected: true,\n\t\t\t\tcontrol: DeleteDialogContentControl.TEXT\n\t\t\t});\n\t\t}\n\t}\n\n\treturn options;\n}\n\nasync function deleteDraftsBeforeActivesAndGetErrors(\n\tdraftsToDeleteBeforeActive: ODataV4Context[],\n\tmessageHandler: MessageHandler,\n\tappComponent: AppComponent,\n\tenableStrictHandling: boolean\n): Promise<unknown[]> {\n\tconst draftErrors: unknown[] = [];\n\tawait Promise.allSettled(\n\t\tdraftsToDeleteBeforeActive.map(async function (context: ODataV4Context) {\n\t\t\ttry {\n\t\t\t\treturn await draft.deleteDraft(context, messageHandler, appComponent, enableStrictHandling);\n\t\t\t} catch (e: unknown) {\n\t\t\t\tLog.error(`FE : core : DeleteHelper : Error while discarding draft with path : ${context.getPath()}`);\n\t\t\t\tdraftErrors.push(e);\n\t\t\t}\n\t\t})\n\t);\n\treturn draftErrors;\n}\n\n/**\n * In case of a tree table, we shall not delete a context if one if its ancestors is also to be deleted.\n * This functions filters out such contexts.\n * @param contexts\n * @returns The filtered contexts\n */\nfunction removeDescendantContexts(contexts: ODataV4Context[]): ODataV4Context[] {\n\tconst tempContexts: (ODataV4Context | undefined)[] = [...contexts];\n\t// Filter out contexts whose ancestor is also deleted, as they will be deleted with their ancestor\n\ttempContexts.forEach((parentContext, parentIndex) => {\n\t\tif (parentContext === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (let childIndex = parentIndex + 1; childIndex < tempContexts.length; childIndex++) {\n\t\t\tconst childContext = tempContexts[childIndex];\n\t\t\tif (childContext && parentContext.isAncestorOf(childContext)) {\n\t\t\t\ttempContexts[childIndex]?.setSelected(false);\n\t\t\t\ttempContexts[childIndex] = undefined;\n\t\t\t}\n\t\t}\n\t});\n\n\treturn tempContexts.filter((context) => context !== undefined) as ODataV4Context[];\n}\n\nasync function deleteConfirmHandler(\n\toptions: DeleteOption[],\n\tmParameters: DeleteParameters,\n\tmessageHandler: MessageHandler,\n\tresourceModel: ResourceModel,\n\tappComponent: AppComponent,\n\tdraftEnabled: boolean,\n\tbindingType?: \"Tree\" | \"Analytical\"\n): Promise<void> {\n\tconst messageHandlingKey = messageHandler.registerToHoldMessages();\n\tlet contexts: ODataV4Context[] = [];\n\ttry {\n\t\tcontexts = deleteHelper.getConfirmedDeletableContext([], options);\n\t\tconst lastDeletedRowIndex = contexts[contexts.length - 1].getIndex() ?? -1;\n\t\tconst draftsToDeleteBeforeActive = getDraftsToDeleteBeforeActive(options);\n\n\t\tconst { beforeDeleteCallBack } = mParameters;\n\t\tif (beforeDeleteCallBack) {\n\t\t\tawait beforeDeleteCallBack({ contexts: contexts });\n\t\t}\n\n\t\tif (contexts.length) {\n\t\t\tconst enableStrictHandling = contexts.length === 1 ? true : false;\n\t\t\tconst draftErrors: unknown[] = await deleteDraftsBeforeActivesAndGetErrors(\n\t\t\t\tdraftsToDeleteBeforeActive,\n\t\t\t\tmessageHandler,\n\t\t\t\tappComponent,\n\t\t\t\tenableStrictHandling\n\t\t\t);\n\n\t\t\tlet contextsToDelete = contexts;\n\t\t\tif (bindingType === \"Tree\") {\n\t\t\t\tcontextsToDelete = removeDescendantContexts(contexts);\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tcontextsToDelete.map(async function (context: ODataV4Context) {\n\t\t\t\t\t// If the context to delete is a draft (i.e. acutally we just wnat to discard), we should use draft.deleteDraft in order to use a discard action if defined\n\t\t\t\t\t// However, draft.deleteDraft uses getProperty, which returns undefined if the context is not read from the backend.\n\t\t\t\t\t// This can be the case, if we have retrieved this context via the sibling (e.g. when a draft existed and we want to delete both - in that case\n\t\t\t\t\t// we have already discarded the draft above, and now need to delete the active one). To identify this situation, we must not use getProperty\n\t\t\t\t\t// (as the context is not read), but check the same in the mParameters.\n\t\t\t\t\t// In this case, we can just delete the context. But we should not use context.delete (also updating bindings, which fails in the described situation),\n\t\t\t\t\t// but model.delete (only sending the delete). In other cases (e.g. non-draft), this is also sufficient, as we anyway take care of setting\n\t\t\t\t\t// correct bidnings with the navigation triggered by the deletion.\n\t\t\t\t\t// In case on analytical table, we also don't want to call context.delete, as it will fail.\n\t\t\t\t\tif (\n\t\t\t\t\t\t!draftEnabled ||\n\t\t\t\t\t\tmParameters.draftsWithDeletableActive?.find(\n\t\t\t\t\t\t\t(draftWithDeletableActive) => draftWithDeletableActive.siblingInfo.targetContext === context\n\t\t\t\t\t\t) ||\n\t\t\t\t\t\tbindingType === \"Analytical\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontext.resetChanges();\n\t\t\t\t\t\treturn context.getModel().delete(context.getCanonicalPath());\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn draft.deleteDraft(context, messageHandler, appComponent, enableStrictHandling);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tdeleteHelper.afterDeleteProcess(mParameters, options, contexts, resourceModel, lastDeletedRowIndex);\n\t\t\tif (draftErrors.length > 0) {\n\t\t\t\tthrow Error(`FE : core : DeleteHelper : Errors on draft delete : ${draftErrors}`);\n\t\t\t}\n\t\t}\n\t\tmessageHandler.removeHoldKey(messageHandlingKey);\n\t} catch (oError) {\n\t\tif (contexts.length > 1) {\n\t\t\tdeleteHelper.addGenericDeleteFailureMessage(resourceModel);\n\t\t}\n\t\tawait messageHandler.showMessages({ unHoldKey: messageHandlingKey });\n\t\t// re-throw error to enforce rejecting the general promise\n\t\tthrow oError;\n\t}\n}\n\n/**\n * Adding a generic delete failure message to message model for readability.\n * @param resourceModel Resource model for message text\n */\nfunction addGenericDeleteFailureMessage(resourceModel: ResourceModel): void {\n\tMessaging.addMessages(\n\t\tnew Message({\n\t\t\tmessage: resourceModel.getText(\"C_COMMON_DELETE_CHANGESET_FAILURE_MULTIPLE_ERRORS_TEXT\"),\n\t\t\ttype: MessageType.Error,\n\t\t\ttarget: undefined,\n\t\t\tpersistent: true,\n\t\t\tcode: \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\",\n\t\t\tdescription: resourceModel.getText(\"C_COMMON_DELETE_CHANGESET_FAILURE_MULTIPLE_ERRORS_DETAILS_TEXT\"),\n\t\t\ttechnicalDetails: {\n\t\t\t\tfe: {\n\t\t\t\t\tchangeSetPreTextForSingleError: resourceModel.getText(\"C_COMMON_DELETE_CHANGESET_FAILURE_SINGLE_ERROR_TEXT\")\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n}\n\n/**\n * Updates a ContextInfo using its sibling context, if needed.\n * Requests the sibling context and updates the siblingDeletable property.\n * Also manages the case where the main context is active but has a draft sibling (--> swap between main and sibling context).\n * @param info\n * @param deletablePath\n * @param staticDeletable\n */\nasync function updateInfoFromSibling(info: ContextInfo, deletablePath: string | undefined, staticDeletable: boolean): Promise<void> {\n\ttry {\n\t\tif (!info.isActive && info.hasActive) {\n\t\t\t// Case 1: the context is a draft, we need to get its active sibling\n\t\t\tconst siblingInformation = await draft.computeSiblingInformation(info.context, info.context);\n\t\t\tinfo.siblingInfo = siblingInformation;\n\t\t\tinfo.siblingDeletable = deletablePath\n\t\t\t\t? await siblingInformation?.targetContext?.requestProperty(deletablePath)\n\t\t\t\t: staticDeletable;\n\t\t} else if (info.isActive && info.hasDraft) {\n\t\t\t// Case 2: the context is active, we need to get its draft sibling\n\t\t\tconst siblingInformation = await draft.computeSiblingInformation(info.context, info.context);\n\t\t\tif (siblingInformation?.targetContext) {\n\t\t\t\t// We were able to retrieve the draft sibling from the active instance --> fallback to case 1\n\t\t\t\t// by exchanging the context with the sibling context in the info object.\n\t\t\t\tconst propertiesToFetch = [\"IsActiveEntity\", \"HasActiveEntity\"];\n\t\t\t\tif (deletablePath) {\n\t\t\t\t\tpropertiesToFetch.push(deletablePath);\n\t\t\t\t}\n\t\t\t\tawait siblingInformation.targetContext.requestProperty(propertiesToFetch);\n\t\t\t\tinfo.locked = false;\n\t\t\t\tinfo.hasDraft = false;\n\t\t\t\tinfo.isActive = false;\n\t\t\t\tinfo.hasActive = true;\n\t\t\t\t// Exchange context with sibling context\n\t\t\t\tinfo.siblingInfo = { targetContext: info.context, pathMapping: [] };\n\t\t\t\tinfo.context = siblingInformation.targetContext;\n\t\t\t\t// Exchange deletable with sibling deletable\n\t\t\t\tinfo.siblingDeletable = info.deletable;\n\t\t\t\tinfo.deletable = deletablePath ? siblingInformation.targetContext.getProperty(deletablePath) : staticDeletable;\n\t\t\t}\n\t\t}\n\t} catch (_e) {\n\t\t// Do nothing\n\t}\n}\n\n/**\n * Collect context information (isDraftRoot, isDraftNode, HasDraftEntity, IsActiveEntity, HasActiveEntity, isLocked, isInactive).\n * @param context Context to evaluate.\n * @returns The context info promise.\n */\nasync function getContextInfos(context: ODataV4Context): Promise<ContextInfo> {\n\tconst isTransient = !!context?.getObject()?.[\"@$ui5.context.isTransient\"];\n\tconst isInactive = context?.isInactive();\n\tconst metaContext =\n\t\tisInactive || (!isInactive && isTransient)\n\t\t\t? undefined\n\t\t\t: context.getModel().getMetaModel().getMetaContext(context.getCanonicalPath());\n\tconst deletablePath = metaContext?.getProperty(\"@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable/$Path\");\n\tconst staticDeletable = !deletablePath && metaContext?.getProperty(\"@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable\") !== false;\n\tconst deletable = deletablePath ? context.getProperty(deletablePath) : staticDeletable;\n\n\tconst info: ContextInfo = {\n\t\tcontext: context,\n\t\tisDraftRoot: !!metaContext?.getProperty(\"@com.sap.vocabularies.Common.v1.DraftRoot\"),\n\t\tisDraftNode: !!metaContext?.getProperty(\"@com.sap.vocabularies.Common.v1.DraftNode\"),\n\t\tisActive: true,\n\t\thasActive: false,\n\t\thasDraft: false,\n\t\tlocked: false,\n\t\t// for an emptyRow (inactive context) it's always deletable as long as the context kept inactive..\n\t\tdeletable: deletable,\n\t\tsiblingInfo: undefined,\n\t\tsiblingDeletable: false,\n\t\tisInactiveContext: !!context.isInactive()\n\t};\n\tif (!context.isInactive() && info.isDraftRoot) {\n\t\tconst contextData = context.getObject();\n\t\tinfo.locked = !!contextData.DraftAdministrativeData?.InProcessByUser;\n\t\tinfo.hasDraft = contextData.HasDraftEntity;\n\t\tinfo.isActive = contextData.IsActiveEntity;\n\t\tinfo.hasActive = contextData.HasActiveEntity;\n\t\tawait updateInfoFromSibling(info, deletablePath, staticDeletable);\n\t}\n\treturn info;\n}\n\n// Table Runtime Helpers:\n\n/* refreshes data in internal model relevant for enablement of delete button according to selected contexts\nrelevant data are: deletableContexts, draftsWithDeletableActive, draftsWithNonDeletableActive, unSavedContexts, deleteEnabled\nnot relevant: lockedContexts\n*/\nasync function updateDeleteInfoForSelectedContexts(\n\tinternalModelContext: InternalModelContext,\n\tselectedContexts: ODataV4Context[],\n\tforContextMenu = false\n): Promise<void> {\n\tconst contextInfos = await Promise.all(selectedContexts.map(getContextInfos));\n\n\tconst buckets = [\n\t\t{\n\t\t\tkey: \"draftsWithDeletableActive\",\n\t\t\t// only for draft root: In that case, the delete request needs to be sent for the active (i.e. the sibling),\n\t\t\t// while in draft node, the delete request needs to be send for the draft itself\n\t\t\tvalue: contextInfos.filter(\n\t\t\t\t(info) => !info.isInactiveContext && info.isDraftRoot && !info.isActive && info.hasActive && info.siblingDeletable\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tkey: \"draftsWithNonDeletableActive\",\n\t\t\t// only for draft root: For draft node, we only rely on information in the draft itself (not its active sibling)\n\t\t\t// application has to take care to set this correctly (in case active sibling must not be deletable, activation\n\t\t\t// of draft with deleted node would also delte active sibling => deletion of draft node to be avoided)\n\t\t\tvalue: contextInfos.filter(\n\t\t\t\t(info) => !info.isInactiveContext && info.isDraftRoot && !info.isActive && info.hasActive && !info.siblingDeletable\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tkey: \"lockedContexts\",\n\t\t\tvalue: contextInfos.filter(\n\t\t\t\t(info) => !info.isInactiveContext && info.isDraftRoot && info.isActive && info.hasDraft && info.locked\n\t\t\t)\n\t\t},\n\t\t{\n\t\t\tkey: \"unSavedContexts\",\n\t\t\tvalue: contextInfos.filter(\n\t\t\t\t(info) => !info.isInactiveContext && info.isDraftRoot && info.isActive && info.hasDraft && !info.locked\n\t\t\t)\n\t\t},\n\t\t// non-draft/sticky and deletable\n\t\t// active draft root without any draft and deletable\n\t\t// created draft root (regardless of deletable)\n\t\t// draft node only according to its annotation\n\t\t{\n\t\t\tkey: \"deletableContexts\",\n\t\t\tvalue: contextInfos.filter(\n\t\t\t\t(info) =>\n\t\t\t\t\tinfo.isInactiveContext ||\n\t\t\t\t\t(!info.isDraftRoot && !info.isDraftNode && info.deletable) ||\n\t\t\t\t\t(info.isDraftRoot && info.isActive && !info.hasDraft && info.deletable) ||\n\t\t\t\t\t(info.isDraftRoot && !info.isActive && !info.hasActive) || // we say that draft with an active version are not deletable to go through another mechanism via the selected contexts\n\t\t\t\t\t(info.isDraftNode && info.deletable)\n\t\t\t)\n\t\t}\n\t];\n\tconst contextPath = !forContextMenu ? \"\" : \"contextmenu/\";\n\tfor (const { key, value } of buckets) {\n\t\tinternalModelContext.setProperty(\n\t\t\tcontextPath + key,\n\t\t\t// Currently, bucket draftsWithDeletableActive has a different structure (containing also sibling information, which is used\n\t\t\t// in case of deletion). Possible improvement: Read sibling information only when needed, and build all buckets with same\n\t\t\t// structure. However, in that case siblingInformation might need to be read twice (if already needed for button enablement),\n\t\t\t// thus a buffer probably would make sense.\n\t\t\tvalue.map((info) =>\n\t\t\t\tkey === \"draftsWithDeletableActive\" ? { draft: info.context, siblingInfo: info.siblingInfo } : info.context\n\t\t\t)\n\t\t);\n\t}\n}\n\nconst deleteHelper = {\n\tgetNonDeletableText,\n\tdeleteConfirmHandler,\n\tgetOptionsForDeletableTexts,\n\tupdateContentForDeleteDialog,\n\tupdateDraftOptionsForDeletableTexts,\n\tgetConfirmedDeletableContext,\n\tgetLockedObjectsText,\n\tgetUnsavedContextsText,\n\tgetNonDeletableActivesOfDraftsText,\n\tafterDeleteProcess,\n\tupdateDeleteInfoForSelectedContexts,\n\tDeleteOptionTypes,\n\tDeleteDialogContentControl,\n\tsetFocusAfterDelete,\n\tgetContextInfos,\n\taddGenericDeleteFailureMessage,\n\tremoveDescendantContexts\n};\n\nexport default deleteHelper;\n"],"mappings":"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","ignoreList":[]}