{"version":3,"file":"BindingHelper.js","names":["UI","IsCreateMode","pathInModel","IsEditable","IsTransientBinding","equal","IsTotal","IsExpanded","NodeLevel","IsInactive","isNodeLevelNavigable","hasCollaborationAuthorization","_exports","Entity","HasDraft","HasActive","IsActive","Draft","IsNewObject","and","not","HasNoDraftForCurrentUser","or","getSingleton","convertedTypes","fullyQualifiedName","singletons","find","singleton","singletonPathVisitor","path","visitedNavigationPaths","indexOf","parts","split","filter","Boolean","propertyName","pop","entitySetName","join","name","localPath","concat","push","bindingContextPathVisitor","bindingParameterFullName","bindingParameterPrefix","substring","lastIndexOf","startsWith","length"],"sources":["./BindingHelper.ts"],"sourcesContent":["import type { ConvertedMetadata, Singleton } from \"@sap-ux/vocabularies-types\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { and, equal, not, or, pathInModel } from \"sap/fe/base/BindingToolkit\";\n\nexport const UI = {\n\tIsCreateMode: pathInModel(\"createMode\", \"pageInternal\") as BindingToolkitExpression<boolean>,\n\tIsEditable: pathInModel(\"isEditable\", \"ui\") as BindingToolkitExpression<boolean>,\n\tIsTransientBinding: equal(pathInModel(\"@$ui5.context.isTransient\"), true),\n\tIsTotal: equal(pathInModel(\"@$ui5.node.isTotal\"), true),\n\tIsExpanded: equal(pathInModel(\"@$ui5.node.isExpanded\"), true),\n\tNodeLevel: pathInModel(\"@$ui5.node.level\"),\n\tIsInactive: pathInModel(\"@$ui5.context.isInactive\"),\n\tisNodeLevelNavigable: pathInModel(\"isNodeLevelNavigable\", \"internal\"),\n\thasCollaborationAuthorization: pathInModel(\"hasCollaborationAuthorization\", \"ui\") as BindingToolkitExpression<boolean>\n};\n\nexport const Entity = {\n\tHasDraft: pathInModel(\"HasDraftEntity\"),\n\tHasActive: pathInModel(\"HasActiveEntity\"),\n\tIsActive: pathInModel(\"IsActiveEntity\")\n};\n\nexport const Draft = {\n\tIsNewObject: and(not(Entity.HasActive), not(Entity.IsActive)),\n\tHasNoDraftForCurrentUser: or(\n\t\tnot(Entity.HasDraft),\n\t\tand(Entity.HasDraft, not(pathInModel(\"DraftAdministrativeData/DraftIsCreatedByMe\") as BindingToolkitExpression<boolean>))\n\t)\n};\n\n/**\n * Gets a singleton based on the fully qualified name.\n * @param convertedTypes The converted types\n * @param fullyQualifiedName The fully qualified name of the singleton\n * @returns The singleton instance.\n */\nfunction getSingleton(convertedTypes: ConvertedMetadata, fullyQualifiedName: string): Singleton | undefined {\n\treturn convertedTypes.singletons.find((singleton) => singleton.fullyQualifiedName === fullyQualifiedName);\n}\n\n/**\n * Function to adjust singleton paths in the annotation.\n * The absolute path via EntityContainer needs to be shortened to /SingletonName/PropertyName.\n * @param path The path configured in the annotation\n * @param convertedTypes The instance of the converter context\n * @param visitedNavigationPaths The array of visited navigation paths\n * @returns The adjusted path for the reference of the singleton property, otherwise the input path itself.\n */\nexport const singletonPathVisitor = function (path: string, convertedTypes: ConvertedMetadata, visitedNavigationPaths: string[]): string {\n\t// Determine whether the path is absolute and whether it points to a singleton.\n\tif (path.indexOf(\"/\") === 0) {\n\t\tconst parts = path.split(\"/\").filter(Boolean),\n\t\t\tpropertyName = parts.pop(),\n\t\t\tentitySetName = parts.join(\"/\"),\n\t\t\tsingleton = getSingleton(convertedTypes, entitySetName);\n\t\tif (singleton) {\n\t\t\t// Set the absolute binding path to access the singleton property\n\t\t\tpath = `/${singleton.name}/${propertyName}`;\n\t\t}\n\t} else {\n\t\t// Not a singleton reference.\n\t\t// Prefix the navigation path to the property path\n\t\tconst localPath = visitedNavigationPaths.concat();\n\t\tlocalPath.push(path);\n\t\tpath = localPath.join(\"/\");\n\t}\n\treturn path;\n};\n\n/**\n * Function to adjust property paths defined in the binding of an action.\n *\n * The binding parameter name needs to be removed. Singleton paths need to be resolved.\n * @param path The path configured in the annotation\n * @param convertedTypes Convertered metadata\n * @param bindingParameterFullName The fully qualified name of the binding parameter\n * @returns The adjusted property path\n */\nexport function bindingContextPathVisitor(path: string, convertedTypes: ConvertedMetadata, bindingParameterFullName?: string): string {\n\tif (bindingParameterFullName) {\n\t\tconst bindingParameterPrefix = `${bindingParameterFullName?.substring(bindingParameterFullName.lastIndexOf(\"/\") + 1)}/`;\n\t\t// Strip the binding parameter name from OperationAvailable path\n\t\t// For e.g. _it/property1 --> property1\n\t\tif (path.startsWith(bindingParameterPrefix)) {\n\t\t\treturn path.substring(bindingParameterPrefix.length);\n\t\t}\n\t}\n\treturn singletonPathVisitor(path, convertedTypes, []);\n}\n"],"mappings":";;;;oJAIO,MAAMA,EAAK,CACjBC,aAAcC,EAAY,aAAc,gBACxCC,WAAYD,EAAY,aAAc,MACtCE,mBAAoBC,EAAMH,EAAY,6BAA8B,MACpEI,QAASD,EAAMH,EAAY,sBAAuB,MAClDK,WAAYF,EAAMH,EAAY,yBAA0B,MACxDM,UAAWN,EAAY,oBACvBO,WAAYP,EAAY,4BACxBQ,qBAAsBR,EAAY,uBAAwB,YAC1DS,8BAA+BT,EAAY,gCAAiC,OAC3EU,EAAAZ,KAEK,MAAMa,EAAS,CACrBC,SAAUZ,EAAY,kBACtBa,UAAWb,EAAY,mBACvBc,SAAUd,EAAY,mBACrBU,EAAAC,SAEK,MAAMI,EAAQ,CACpBC,YAAaC,EAAIC,EAAIP,EAAOE,WAAYK,EAAIP,EAAOG,WACnDK,yBAA0BC,EACzBF,EAAIP,EAAOC,UACXK,EAAIN,EAAOC,SAAUM,EAAIlB,EAAY,kDAIvCU,EAAAK,QAMA,SAASM,EAAaC,EAAmCC,GACxD,OAAOD,EAAeE,WAAWC,KAAMC,GAAcA,EAAUH,qBAAuBA,EACvF,CAUO,MAAMI,EAAuB,SAAUC,EAAcN,EAAmCO,GAE9F,GAAID,EAAKE,QAAQ,OAAS,EAAG,CAC5B,MAAMC,EAAQH,EAAKI,MAAM,KAAKC,OAAOC,SACpCC,EAAeJ,EAAMK,MACrBC,EAAgBN,EAAMO,KAAK,KAC3BZ,EAAYL,EAAaC,EAAgBe,GAC1C,GAAIX,EAAW,CAEdE,EAAO,IAAIF,EAAUa,QAAQJ,GAC9B,CACD,KAAO,CAGN,MAAMK,EAAYX,EAAuBY,SACzCD,EAAUE,KAAKd,GACfA,EAAOY,EAAUF,KAAK,IACvB,CACA,OAAOV,CACR,EAEAlB,EAAAiB,uBASO,SAASgB,EAA0Bf,EAAcN,EAAmCsB,GAC1F,GAAIA,EAA0B,CAC7B,MAAMC,EAAyB,GAAGD,GAA0BE,UAAUF,EAAyBG,YAAY,KAAO,MAGlH,GAAInB,EAAKoB,WAAWH,GAAyB,CAC5C,OAAOjB,EAAKkB,UAAUD,EAAuBI,OAC9C,CACD,CACA,OAAOtB,EAAqBC,EAAMN,EAAgB,GACnD,CAACZ,EAAAiC,4BAAA,OAAAjC,CAAA","ignoreList":[]}