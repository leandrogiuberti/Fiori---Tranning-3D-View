{"version":3,"names":["_getStableIdPartFromIBN","dataField","idParts","isPathAnnotationExpression","SemanticObject","path","valueOf","Action","RequiresContext","push","filter","id","join","_getStableIdPartFromValue","value","Value","$Apply","$Function","map","app","$Path","replaceSpecialChars","replace","_getStableIdPartFromUrlOrPath","url","Url","_isValid","test","_removeNamespaces","createIdForAnnotation","annotation","idPreparation","arguments","length","undefined","$Type","ID","Target","Label","getStableIdPartFromDataField","toString","prepareId","_exports","generate","stableIdParts","ids","element","targetObject","result","ignoreForCompatibility","type","includes","Error","slice"],"sourceRoot":".","sources":["StableIdHelper.ts"],"sourcesContent":["import type { PropertyAnnotationValue } from \"@sap-ux/vocabularies-types\";\nimport { type ApplyAnnotationExpression } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForIntentBasedNavigation,\n\tDataFieldWithAction,\n\tDataFieldWithIntentBasedNavigation,\n\tDataFieldWithNavigationPath,\n\tDataFieldWithUrl,\n\tFacetTypes,\n\tFieldGroup\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"../templating/DataModelPathHelper\";\n\nexport type AuthorizedIdAnnotationsType = FacetTypes | FieldGroup | DataFieldAbstractTypes;\n\n/**\n * Generates the ID from an IBN.\n *\n * The ID contains the value, the potential action and context.\n * @param dataField The IBN annotation\n * @returns The ID\n */\nconst _getStableIdPartFromIBN = (dataField: DataFieldForIntentBasedNavigation | DataFieldWithIntentBasedNavigation): string => {\n\tconst idParts = [\n\t\tisPathAnnotationExpression(dataField.SemanticObject) ? dataField.SemanticObject.path : dataField.SemanticObject.valueOf(),\n\t\tdataField.Action?.valueOf()\n\t];\n\tif ((dataField as DataFieldForIntentBasedNavigation).RequiresContext) {\n\t\tidParts.push(\"RequiresContext\");\n\t}\n\treturn idParts.filter((id) => id).join(\"::\");\n};\n\n/**\n * Generates the ID part related to the value of the DataField.\n * @param dataField The DataField\n * @returns String related to the DataField value\n */\nconst _getStableIdPartFromValue = (\n\tdataField: DataField | DataFieldWithAction | DataFieldWithIntentBasedNavigation | DataFieldWithUrl | DataFieldWithNavigationPath\n): string => {\n\tconst value = dataField.Value;\n\tif (value.path) {\n\t\treturn value.path as string;\n\t} else if (value.$Apply && value.$Function === \"odata.concat\") {\n\t\treturn value.$Apply.map((app: { $Path?: string }) => app.$Path).join(\"::\");\n\t}\n\treturn replaceSpecialChars(value.replace(/ /g, \"_\"));\n};\n\n/**\n * Generates the ID part related to the value or url of the DataFieldWithUrl.\n * @param dataField The DataFieldWithUrl\n * @returns String related to the DataFieldWithUrl value or url\n */\nconst _getStableIdPartFromUrlOrPath = (dataField: DataFieldWithUrl): string => {\n\tconst value = dataField.Value;\n\tif (value?.path) {\n\t\treturn value.path as string;\n\t} else if (value?.$Apply && value.$Function === \"odata.concat\") {\n\t\treturn value.$Apply.map((app: { $Path?: string }) => app.$Path).join(\"::\");\n\t}\n\tconst url = dataField.Url as unknown as PropertyAnnotationValue<String>;\n\tif (isPathAnnotationExpression(url) && url?.path) {\n\t\treturn url.path;\n\t} else if (\n\t\t(url as ApplyAnnotationExpression<String>)?.$Apply &&\n\t\t(url as ApplyAnnotationExpression<String>).$Function === \"odata.concat\"\n\t) {\n\t\treturn (url as { $Apply: { $Path?: string }[] }).$Apply.map((app) => app.$Path).join(\"::\");\n\t}\n\treturn replaceSpecialChars(value?.replace(/ /g, \"_\"));\n};\n\n/**\n * Copy for the Core.isValid function to be independent.\n * @param value String to validate\n * @returns Whether the value is valid or not\n */\nconst _isValid = (value: string): boolean => {\n\treturn /^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(value);\n};\n\n/**\n * Removes the annotation namespaces.\n * @param id String to manipulate\n * @returns String without the annotation namespaces\n */\nconst _removeNamespaces = (id: string): string => {\n\tid = id.replace(\"com.sap.vocabularies.UI.v1.\", \"\");\n\tid = id.replace(\"com.sap.vocabularies.Communication.v1.\", \"\");\n\treturn id;\n};\n\n/**\n * Generates the ID from an annotation.\n * @param annotation The annotation\n * @param idPreparation Determines whether the ID needs to be prepared for final usage\n * @returns The ID\n */\nexport const createIdForAnnotation = (annotation: AuthorizedIdAnnotationsType, idPreparation = true): string | undefined => {\n\tlet id;\n\tswitch (annotation.$Type) {\n\t\tcase UIAnnotationTypes.ReferenceFacet:\n\t\t\tid = annotation.ID ?? annotation.Target.value;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.CollectionFacet:\n\t\t\tid = annotation.ID ?? \"undefined\"; // CollectionFacet without Id is not supported but doesn't necessary fail right now\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.FieldGroupType:\n\t\t\tid = annotation.Label;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tid = getStableIdPartFromDataField(annotation as DataFieldAbstractTypes);\n\t\t\tbreak;\n\t}\n\tid = id?.toString();\n\treturn id && idPreparation ? prepareId(id) : id;\n};\n\n/**\n * Generates a stable ID based on the given parameters.\n *\n * Parameters are combined in the same order in which they are provided and are separated by '::'.\n * Generate(['Stable', 'Id']) would result in 'Stable::Id' as the stable ID.\n * Currently supported annotations are Facets, FieldGroup and all kinds of DataField.\n * @param stableIdParts Array of strings, undefined, dataModelObjectPath or annotations\n * @returns Stable ID constructed from the provided parameters\n */\nexport const generate = (\n\tstableIdParts: Array<string | undefined | DataModelObjectPath<AuthorizedIdAnnotationsType> | AuthorizedIdAnnotationsType>\n): string => {\n\tconst ids: (string | undefined)[] = stableIdParts.map((element) => {\n\t\tif (typeof element === \"string\" || !element) {\n\t\t\treturn element;\n\t\t}\n\t\treturn createIdForAnnotation(\n\t\t\t(element as DataModelObjectPath<AuthorizedIdAnnotationsType>).targetObject || (element as AuthorizedIdAnnotationsType),\n\t\t\tfalse\n\t\t);\n\t});\n\tconst result = ids.filter((id) => id).join(\"::\");\n\treturn prepareId(result);\n};\n\n/**\n * Generates the ID from a DataField.\n * @param dataField The DataField\n * @param ignoreForCompatibility Ignore a part of the ID on the DataFieldWithNavigationPath to be aligned with previous versions\n * @returns The ID\n */\nexport const getStableIdPartFromDataField = (dataField: DataFieldAbstractTypes, ignoreForCompatibility = false): string | undefined => {\n\tlet id = \"\";\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tid = `DataFieldForAction::${dataField.Action}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\t\t// DataFieldForActionGroup comes with ID property unlike other DataField types\n\t\t\tid = `DataFieldForActionGroup::${dataField.ID}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tid = `DataFieldForIntentBasedNavigation::${_getStableIdPartFromIBN(dataField)}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\tid = `DataFieldForAnnotation::${dataField.Target.value}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tid = `DataFieldWithAction::${_getStableIdPartFromValue(dataField)}::${dataField.Action}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataField:\n\t\t\tid = `DataField::${_getStableIdPartFromValue(dataField)}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\tid = `DataFieldWithIntentBasedNavigation::${_getStableIdPartFromValue(dataField)}::${_getStableIdPartFromIBN(dataField)}`;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\tid = `DataFieldWithNavigationPath::${_getStableIdPartFromValue(dataField)}`;\n\t\t\tif (dataField.Target.type === \"NavigationPropertyPath\" && !ignoreForCompatibility) {\n\t\t\t\tid = `${id}::${dataField.Target.value}`;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\tid = `DataFieldWithUrl::${_getStableIdPartFromUrlOrPath(dataField)}`;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn id ? prepareId(id) : undefined;\n};\n\n/**\n * Removes or replaces with \"::\" some special characters.\n * Special characters (@, /, #) are replaced by '::' if they are in the middle of the stable ID and removed altogether if they are at the beginning or end.\n * @param id String to manipulate\n * @returns String without the special characters\n */\nexport const replaceSpecialChars = (id: string): string => {\n\tif (id.includes(\" \")) {\n\t\tthrow Error(`${id} - Spaces are not allowed in ID parts.`);\n\t}\n\tid = id\n\t\t.replace(/^\\/|^@|^#|^\\*/, \"\") // remove special characters from the beginning of the string\n\t\t.replace(/\\/$|@$|#$|\\*$/, \"\") // remove special characters from the end of the string\n\t\t.replace(/[/|@()#]/g, \"::\"); // replace special characters with ::\n\n\t// Replace double occurrences of the separator with a single separator\n\twhile (id.includes(\"::::\")) {\n\t\tid = id.replace(\"::::\", \"::\");\n\t}\n\n\t// If there is a :: at the end of the ID remove it\n\tif (id.slice(-2) == \"::\") {\n\t\tid = id.slice(0, -2);\n\t}\n\n\treturn id;\n};\n\n/**\n * Prepares the ID.\n *\n * Removes namespaces and special characters and checks the validity of this ID.\n * @param id The ID\n * @returns The ID or throws an error\n */\nexport const prepareId = function (id: string): string {\n\tid = replaceSpecialChars(_removeNamespaces(id));\n\tif (_isValid(id)) {\n\t\treturn id;\n\t} else {\n\t\tthrow Error(`${id} - Stable Id could not be generated due to insufficient information.`);\n\t}\n};\n"],"mappings":"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","ignoreList":[],"file":"StableIdHelper-dbg.js"}