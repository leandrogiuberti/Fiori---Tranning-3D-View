{"version":3,"names":["AppStartupHelper","_getKeysFromStartupParams","aKeyNames","oStartupParameters","bAllFound","aKeys","map","name","length","value","undefined","_createFilterFromKeys","bDraftMode","oMetaModel","bFilterCaseSensitive","ModelHelper","isFilteringCaseSensitive","bFilterOnActiveEntity","aFilters","key","Filter","path","operator","FilterOperator","EQ","value1","caseSensitive","oDraftFilter","filters","and","push","_sanitizeKeys","keys","entityType","forEach","propertyType","$Type","trim","formattedGuid","unFormattedGuid","matchFormatted","exec","matchUnformatted","replace","_requestObjectsFromParameters","aStartupPages","oModel","aContextPromises","pageInfo","getMetaModel","getObject","contextPath","technicalKeys","SemanticKeyHelper","getPathContent","context","bindContext","getBoundContext","Promise","resolve","semanticKeys","oFilter","draftMode","oListBind","bindList","$select","join","requestContexts","all","_getRightMostTargetName","route","manifestRouting","Array","isArray","target","reverseTargets","reverse","find","targetID","currentTarget","targets","includes","_getReachablePageInfoFromRoute","oRoute","oManifestRouting","sPattern","pattern","endsWith","sTargetName","oTarget","aPatternSegments","split","pageLevel","options","settings","allowDeepLinking","sContextPath","entitySet","metaContext","createBindingContext","objectPath","getInvolvedDataModelObjects","targetEntitySet","oEntityType","semanticKeyNames","semKey","$PropertyPath","technicalKeyNames","every","aSemantickKeys","aTechnicalKeys","targetResolutionValue","_getReachablePages","aRoutes","routes","mPagesByLevel","oPageInfo","aReachablePages","level","_getStartupPagesFromStartupParams","inboundParameterForTargetResolution","parameterValueForTargetResolution","result","current","findRecursive","aCurrentLevelPages","lastPage","nextPage","indexOf","pop","currentPage","slice","_getDeepLinkObject","aContexts","hash","oContext","getPath","getDeepLinkStartupHash","targetResolutionParameter","requestObject","startupPages","allContexts","contextsForStartup","foundContexts","getCreateStartupHash","oRouter","then","oEntitySetAnnotations","sMetaPath","bCreatable","bNewActionOperationAvailable","oInsertRestrictions","Insertable","getDefaultCreateHash","sDefaultCreateHash","preferredMode","sHash","substring","getRouteInfoByHash","Error","verifyEditAnnotations","metaModel","entitySetAnnotations","updateHidden","operationAvailable"],"sourceRoot":".","sources":["AppStartupHelper.ts"],"sourcesContent":["import type { PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { StartupParameters } from \"sap/fe/core/AppComponent\";\nimport type { RoutingConfiguration, RoutingRoute } from \"sap/ui/core/Manifest\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { ExpandPathType, MetaModelEntitySetAnnotation } from \"types/metamodel_types\";\nimport { getInvolvedDataModelObjects } from \"../converters/MetaModelConverter\";\nimport ModelHelper from \"./ModelHelper\";\nimport SemanticKeyHelper from \"./SemanticKeyHelper\";\n\ntype ValuedKey = {\n\tname: string;\n\tvalue: string;\n};\n\ntype PageInfo = {\n\tpattern: string;\n\tcontextPath: string;\n\tdraftMode: boolean;\n\ttechnicalKeys: ValuedKey[] | undefined;\n\tsemanticKeys: ValuedKey[] | undefined;\n\ttarget: string;\n\tpageLevel: number;\n\ttargetResolutionValue: string | undefined;\n};\n\nconst AppStartupHelper = {\n\t/**\n\t * Retrieves a set of key values from the startup parameters.\n\t * @param aKeyNames The array of key names\n\t * @param oStartupParameters The startup parameters\n\t * @returns An array of pairs \\{name, value\\} if all the key values could be found in the startup parameters. Otherwise, it is undefined.\n\t */\n\t_getKeysFromStartupParams: function (aKeyNames: string[], oStartupParameters: StartupParameters | null): ValuedKey[] | undefined {\n\t\tlet bAllFound = true;\n\t\tconst aKeys = aKeyNames.map((name) => {\n\t\t\tif (oStartupParameters?.[name] && oStartupParameters[name].length === 1) {\n\t\t\t\treturn { name, value: oStartupParameters[name][0] as string };\n\t\t\t} else {\n\t\t\t\t// A unique key value couldn't be found in the startup parameters\n\t\t\t\tbAllFound = false;\n\t\t\t\treturn { name, value: \"\" };\n\t\t\t}\n\t\t});\n\n\t\treturn bAllFound ? aKeys : undefined;\n\t},\n\n\t/**\n\t * Creates a filter from a list of key values.\n\t * @param aKeys Array of semantic keys or technical keys (with values)\n\t * @param bDraftMode True if the entity supports draft mode\n\t * @param oMetaModel The metamodel\n\t * @returns The filter\n\t */\n\t_createFilterFromKeys: function (aKeys: ValuedKey[], bDraftMode: Boolean, oMetaModel: ODataMetaModel): Filter {\n\t\tconst bFilterCaseSensitive = ModelHelper.isFilteringCaseSensitive(oMetaModel);\n\n\t\tlet bFilterOnActiveEntity = false;\n\t\tconst aFilters = aKeys.map((key) => {\n\t\t\tif (key.name === \"IsActiveEntity\") {\n\t\t\t\tbFilterOnActiveEntity = true;\n\t\t\t}\n\t\t\treturn new Filter({\n\t\t\t\tpath: key.name,\n\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\tvalue1: key.value,\n\t\t\t\tcaseSensitive: bFilterCaseSensitive\n\t\t\t});\n\t\t});\n\t\tif (bDraftMode && !bFilterOnActiveEntity) {\n\t\t\tconst oDraftFilter = new Filter({\n\t\t\t\tfilters: [new Filter(\"IsActiveEntity\", \"EQ\", false), new Filter(\"SiblingEntity/IsActiveEntity\", \"EQ\", null)],\n\t\t\t\tand: false\n\t\t\t});\n\t\t\taFilters.push(oDraftFilter);\n\t\t}\n\n\t\treturn new Filter(aFilters, true);\n\t},\n\n\t/**\n\t * Makes sure key values have the correct format.\n\t * This is to handle special cases, for example, where Boolean values are 'X' or '', or guid values have the following format: guid'00000000-0000-0000-0000-000000000000'.\".\n\t * @param keys\n\t * @param entityType\n\t */\n\t_sanitizeKeys: function (keys: ValuedKey[], entityType: Record<string, { $Type: string }>): void {\n\t\tkeys.forEach((key) => {\n\t\t\tconst propertyType = entityType[key.name].$Type;\n\t\t\tswitch (propertyType) {\n\t\t\t\tcase \"Edm.Boolean\":\n\t\t\t\t\tif (key.value !== \"true\" && key.value !== \"false\") {\n\t\t\t\t\t\t// If the value is neither \"true\" nor \"false\", it's considered as false if it contains only whitespaces (e.g. to handle 'X'/'' for true/false values)\n\t\t\t\t\t\tkey.value = key.value.trim().length ? \"true\" : \"false\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"Edm.Guid\": {\n\t\t\t\t\tconst formattedGuid = /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/i; // XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n\t\t\t\t\tconst unFormattedGuid = /[0-9a-f]{32}/i;\n\t\t\t\t\tconst matchFormatted = formattedGuid.exec(key.value);\n\t\t\t\t\tconst matchUnformatted = unFormattedGuid.exec(key.value);\n\t\t\t\t\tif (matchFormatted) {\n\t\t\t\t\t\tkey.value = matchFormatted[0];\n\t\t\t\t\t} else if (matchUnformatted) {\n\t\t\t\t\t\t// Reformat the guid value properly\n\t\t\t\t\t\tkey.value = matchUnformatted[0].replace(\n\t\t\t\t\t\t\t/^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/i,\n\t\t\t\t\t\t\t\"$1-$2-$3-$4-$5\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t// Do nothing\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Loads all contexts for a list of page infos.\n\t * @param aStartupPages The list of page infos\n\t * @param oModel The model used to load the contexts\n\t * @returns A Promise for all contexts\n\t */\n\t_requestObjectsFromParameters: async function (aStartupPages: PageInfo[], oModel: ODataModel): Promise<Context[][]> {\n\t\t// Load the respective objects for all object pages found in aExternallyNavigablePages\n\t\tconst aContextPromises = aStartupPages.map(async (pageInfo) => {\n\t\t\tconst entityType = oModel.getMetaModel().getObject(`${pageInfo.contextPath}/`);\n\t\t\tif (pageInfo.technicalKeys) {\n\t\t\t\tthis._sanitizeKeys(pageInfo.technicalKeys, entityType);\n\t\t\t\t// Create a context with the proper path\n\t\t\t\tconst path = `${pageInfo.contextPath}(${SemanticKeyHelper.getPathContent(pageInfo.technicalKeys, entityType)})`;\n\t\t\t\tconst context = oModel.bindContext(path).getBoundContext();\n\t\t\t\treturn Promise.resolve([context]);\n\t\t\t} else {\n\t\t\t\tconst aKeys = pageInfo.semanticKeys ?? [];\n\t\t\t\tthis._sanitizeKeys(aKeys, entityType);\n\t\t\t\tconst oFilter = this._createFilterFromKeys(aKeys, pageInfo.draftMode, oModel.getMetaModel());\n\n\t\t\t\t// only request a minimum of fields to boost backend performance since this is only used to check if an object exists\n\t\t\t\tconst oListBind = oModel.bindList(pageInfo.contextPath, undefined, undefined, oFilter, {\n\t\t\t\t\t$select: aKeys\n\t\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\t\treturn key.name;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join(\",\")\n\t\t\t\t});\n\t\t\t\treturn oListBind.requestContexts(0, 2);\n\t\t\t}\n\t\t});\n\n\t\treturn Promise.all(aContextPromises);\n\t},\n\n\t/**\n\t * Returns the rightmost target name for a given route.\n\t * @param route\n\t * @param manifestRouting\n\t * @returns The target name (or undefined if no valid target was found)\n\t */\n\t_getRightMostTargetName(route: RoutingRoute, manifestRouting: RoutingConfiguration | undefined): string | undefined {\n\t\tif (Array.isArray(route.target)) {\n\t\t\t// Get the rightmost target for this route (ignore targets corresponding to reuse components)\n\t\t\tconst reverseTargets = [...route.target].reverse();\n\t\t\treturn reverseTargets.find((targetID) => {\n\t\t\t\tconst currentTarget = manifestRouting?.targets?.[targetID];\n\t\t\t\treturn (\n\t\t\t\t\tcurrentTarget?.name &&\n\t\t\t\t\t[\"sap.fe.templates.ListReport\", \"sap.fe.templates.ObjectPage\", \"sap.fe.core.fpm\"].includes(currentTarget.name)\n\t\t\t\t);\n\t\t\t});\n\t\t} else {\n\t\t\treturn route.target;\n\t\t}\n\t},\n\n\t/**\n\t * Creates a PageInfo from a route if it's reachable from the startup parameters.\n\t * @param oRoute The route\n\t * @param oManifestRouting The app manifest routing section\n\t * @param oStartupParameters The startup parameters\n\t * @param oMetaModel The app metamodel\n\t * @returns A page info if the page is reachable, undefined otherwise\n\t */\n\t_getReachablePageInfoFromRoute: function (\n\t\toRoute: RoutingRoute,\n\t\toManifestRouting: RoutingConfiguration | undefined,\n\t\toStartupParameters: StartupParameters | null,\n\t\toMetaModel: ODataMetaModel\n\t): PageInfo | undefined {\n\t\t// Remove trailing ':?query:' and '/'\n\t\tlet sPattern: string = oRoute.pattern!.replace(\":?query:\", \"\");\n\t\tsPattern = sPattern.replace(/\\/$/, \"\");\n\n\t\tif (!sPattern || !sPattern.endsWith(\")\")) {\n\t\t\t// Ignore level-0 routes (ListReport) or routes corresponding to a 1-1 relation (no keys in the URL in this case)\n\t\t\treturn undefined;\n\t\t}\n\n\t\tsPattern = sPattern.replace(/\\(\\{[^}]*\\}\\)/g, \"(#)\"); // Replace keys with #\n\n\t\tconst sTargetName = this._getRightMostTargetName(oRoute, oManifestRouting);\n\t\tif (!sTargetName) {\n\t\t\t// No target found for this route\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst oTarget = oManifestRouting?.targets?.[sTargetName];\n\n\t\tconst aPatternSegments = sPattern.split(\"/\");\n\t\tconst pageLevel = aPatternSegments.length - 1;\n\n\t\tif (pageLevel !== 0 && oTarget?.options?.settings?.allowDeepLinking !== true) {\n\t\t\t// The first level of object page allows deep linking by default.\n\t\t\t// Otherwise, the target must allow deep linking explicitely in the manifest\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet sContextPath = \"\";\n\t\tif (oTarget?.options?.settings?.entitySet) {\n\t\t\tsContextPath = `/${oTarget.options.settings.entitySet}`;\n\t\t} else if (oTarget?.options?.settings?.contextPath) {\n\t\t\tconst metaContext = oMetaModel.createBindingContext(oTarget.options.settings.contextPath)!;\n\t\t\tconst objectPath = getInvolvedDataModelObjects(metaContext);\n\t\t\tif (objectPath.targetEntitySet) {\n\t\t\t\tsContextPath = `/${objectPath.targetEntitySet.name}`;\n\t\t\t}\n\t\t}\n\n\t\tif (!sContextPath) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst oEntityType = sContextPath && oMetaModel.getObject(`/$EntityContainer${sContextPath}/`);\n\n\t\tif (!oEntityType) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Get the semantic key values for the entity\n\t\tlet semanticKeyNames = (\n\t\t\toMetaModel.getObject(`/$EntityContainer${sContextPath}/@com.sap.vocabularies.Common.v1.SemanticKey`) as\n\t\t\t\t| ExpandPathType<PropertyPath>[]\n\t\t\t\t| undefined\n\t\t)?.map((semKey) => {\n\t\t\treturn semKey.$PropertyPath;\n\t\t});\n\n\t\t// If we're on a first level object page and the semantic keys are the same as the technical keys, we use technical keys directly,\n\t\t// to avoid the additional query used to load the object from its semantic keys in _requestObjectsFromParameters\n\t\tconst technicalKeyNames = oEntityType[\"$Key\"];\n\t\tif (\n\t\t\tpageLevel === 0 &&\n\t\t\tsemanticKeyNames &&\n\t\t\tsemanticKeyNames.length === technicalKeyNames.length &&\n\t\t\tsemanticKeyNames.every((key) => technicalKeyNames.includes(key))\n\t\t) {\n\t\t\tsemanticKeyNames = undefined;\n\t\t}\n\n\t\tconst aSemantickKeys = semanticKeyNames ? this._getKeysFromStartupParams(semanticKeyNames, oStartupParameters) : undefined;\n\n\t\t// Get the technical keys only if we couldn't find the semantic key values, and on first level OP\n\t\tconst aTechnicalKeys =\n\t\t\t!aSemantickKeys && pageLevel === 0 ? this._getKeysFromStartupParams(technicalKeyNames, oStartupParameters) : undefined;\n\n\t\tif (aSemantickKeys === undefined && aTechnicalKeys === undefined) {\n\t\t\t// We couldn't find the semantic/technical keys in the startup parameters\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// The startup parameters contain values for all semantic keys (or technical keys) --> we can store the page info in the corresponding level\n\t\tconst draftMode =\n\t\t\toMetaModel.getObject(`/$EntityContainer${sContextPath}@com.sap.vocabularies.Common.v1.DraftRoot`) ||\n\t\t\toMetaModel.getObject(`/$EntityContainer${sContextPath}@com.sap.vocabularies.Common.v1.DraftNode`)\n\t\t\t\t? true\n\t\t\t\t: false;\n\n\t\treturn {\n\t\t\tpattern: sPattern,\n\t\t\tcontextPath: sContextPath,\n\t\t\tdraftMode,\n\t\t\ttechnicalKeys: aTechnicalKeys,\n\t\t\tsemanticKeys: aSemantickKeys,\n\t\t\ttarget: sTargetName,\n\t\t\ttargetResolutionValue: oTarget?.options?.settings?.targetResolutionValue as string | undefined,\n\t\t\tpageLevel\n\t\t};\n\t},\n\n\t/**\n\t * Returns the list of all pages that allow deeplink and that can be reached using the startup parameters.\n\t * @param oManifestRouting The routing information from the app manifest\n\t * @param oStartupParameters The startup parameters\n\t * @param oMetaModel The metamodel\n\t * @returns The reachable pages\n\t */\n\t_getReachablePages: function (\n\t\toManifestRouting: RoutingConfiguration | undefined,\n\t\toStartupParameters: StartupParameters | null,\n\t\toMetaModel: ODataMetaModel\n\t): PageInfo[][] {\n\t\tconst aRoutes: RoutingRoute[] = oManifestRouting?.routes ?? [];\n\t\tconst mPagesByLevel: Record<number, PageInfo[]> = {};\n\n\t\taRoutes.forEach((oRoute) => {\n\t\t\tconst oPageInfo = this._getReachablePageInfoFromRoute(oRoute, oManifestRouting, oStartupParameters, oMetaModel);\n\n\t\t\tif (oPageInfo) {\n\t\t\t\tif (!mPagesByLevel[oPageInfo.pageLevel]) {\n\t\t\t\t\tmPagesByLevel[oPageInfo.pageLevel] = [];\n\t\t\t\t}\n\t\t\t\tmPagesByLevel[oPageInfo.pageLevel].push(oPageInfo);\n\t\t\t}\n\t\t});\n\n\t\t// A page is reachable only if all its parents are also reachable\n\t\t// So if we couldn't find any pages for a given level, all pages with a higher level won't be reachable anyway\n\t\tconst aReachablePages: PageInfo[][] = [];\n\t\tlet level = 0;\n\t\twhile (mPagesByLevel[level]) {\n\t\t\taReachablePages.push(mPagesByLevel[level]);\n\t\t\tlevel++;\n\t\t}\n\n\t\treturn aReachablePages;\n\t},\n\n\t/**\n\t * Get the list of startup pages.\n\t * @param oManifestRouting The routing information from the app manifest\n\t * @param oStartupParameters The startup parameters\n\t * @param oMetaModel The metamodel\n\t * @param inboundParameterForTargetResolution The target resolution parameter from the app manifest\n\t * @returns An array of startup page infos\n\t */\n\t_getStartupPagesFromStartupParams: function (\n\t\toManifestRouting: RoutingConfiguration | undefined,\n\t\toStartupParameters: StartupParameters | null,\n\t\toMetaModel: ODataMetaModel,\n\t\tinboundParameterForTargetResolution: string | undefined\n\t): PageInfo[] {\n\t\tconst parameterValueForTargetResolution =\n\t\t\tinboundParameterForTargetResolution &&\n\t\t\toStartupParameters &&\n\t\t\toStartupParameters[inboundParameterForTargetResolution] &&\n\t\t\toStartupParameters[inboundParameterForTargetResolution][0];\n\n\t\t// Find all pages that can be reached with the startup parameters\n\t\tconst aReachablePages = this._getReachablePages(oManifestRouting, oStartupParameters, oMetaModel);\n\n\t\tif (aReachablePages.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Find the longest sequence of pages that can be reached (recursively)\n\t\tlet result: PageInfo[] = [];\n\t\tconst current: PageInfo[] = [];\n\n\t\tfunction findRecursive(level: number): void {\n\t\t\tconst aCurrentLevelPages = aReachablePages[level];\n\t\t\tconst lastPage = current.length ? current[current.length - 1] : undefined;\n\n\t\t\tif (aCurrentLevelPages) {\n\t\t\t\taCurrentLevelPages.forEach(function (nextPage) {\n\t\t\t\t\tif (!lastPage || nextPage.pattern.indexOf(lastPage.pattern) === 0) {\n\t\t\t\t\t\t// We only consider pages that can be reached from the page at the previous level,\n\t\t\t\t\t\t// --> their pattern must be the pattern of the previous page with another segment appended\n\t\t\t\t\t\tcurrent.push(nextPage);\n\t\t\t\t\t\tfindRecursive(level + 1);\n\t\t\t\t\t\tcurrent.pop();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (current.length > result.length) {\n\t\t\t\tconst currentPage = current.slice(-1)[0];\n\t\t\t\tif (parameterValueForTargetResolution) {\n\t\t\t\t\tif (currentPage.targetResolutionValue === parameterValueForTargetResolution) {\n\t\t\t\t\t\tresult = current.slice(); // We have found a sequence longer than our previous best with the right target resolution parameter --> store it as the new longest\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult = current.slice(); // We have found a sequence longer than our previous best --> store it as the new longest\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfindRecursive(0);\n\t\treturn result;\n\t},\n\n\t/**\n\t * Creates the startup object from the list of pages and contexts.\n\t * @param aStartupPages The pages\n\t * @param aContexts The contexts\n\t * @returns An object containing either a hash or a context to navigate to, or an empty object if no deep link was found\n\t */\n\t_getDeepLinkObject: function (aStartupPages: PageInfo[], aContexts: Context[]): { hash?: string; context?: Context } {\n\t\tif (aContexts.length === 1) {\n\t\t\treturn { context: aContexts[0] };\n\t\t} else if (aContexts.length > 1) {\n\t\t\t// Navigation to a deeper level --> use the pattern of the deepest object page\n\t\t\t// and replace the parameters by the ID from the contexts\n\t\t\tlet hash = aStartupPages[aStartupPages.length - 1].pattern;\n\t\t\taContexts.forEach(function (oContext) {\n\t\t\t\thash = hash.replace(\"(#)\", `(${oContext.getPath().split(\"(\")[1]}`);\n\t\t\t});\n\n\t\t\treturn { hash };\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t},\n\n\t/**\n\t * Calculates startup parameters for a deeplink case, from startup parameters and routing information.\n\t * @param oManifestRouting The routing information from the app manifest\n\t * @param oStartupParameters The startup parameters\n\t * @param oModel The OData model\n\t * @param targetResolutionParameter The inbound parameter for target resolution\n\t * @returns An object containing either a hash or a context to navigate to, or an empty object if no deep link was found\n\t */\n\tgetDeepLinkStartupHash: async function (\n\t\toManifestRouting: RoutingConfiguration | undefined,\n\t\toStartupParameters: StartupParameters | null,\n\t\toModel: ODataModel,\n\t\ttargetResolutionParameter: string | undefined\n\t): Promise<{ hash?: string; context?: Context }> {\n\t\tawait oModel.getMetaModel().requestObject(\"/$EntityContainer/\");\n\n\t\t// Check if semantic keys are present in url parameters for every object page at each level\n\t\tconst startupPages = this._getStartupPagesFromStartupParams(\n\t\t\toManifestRouting,\n\t\t\toStartupParameters,\n\t\t\toModel.getMetaModel(),\n\t\t\ttargetResolutionParameter\n\t\t);\n\n\t\t// Load the contexts\n\t\tconst allContexts = await this._requestObjectsFromParameters(startupPages, oModel);\n\t\tif (allContexts.length) {\n\t\t\t// Make sure we only get 1 context per promise, and flatten the array\n\t\t\tconst contextsForStartup: Context[] = [];\n\t\t\tallContexts.forEach(function (foundContexts) {\n\t\t\t\tif (foundContexts.length === 1) {\n\t\t\t\t\tcontextsForStartup.push(foundContexts[0]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn contextsForStartup.length === allContexts.length ? this._getDeepLinkObject(startupPages, contextsForStartup) : {};\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t},\n\n\t/**\n\t * Calculates the new hash based on the startup parameters.\n\t * @param oStartupParameters The startup parameter values (map parameter name -> array of values)\n\t * @param sContextPath The context path for the startup of the app (generally the path to the main entity set)\n\t * @param oRouter The router instance\n\t * @param oMetaModel The meta model\n\t * @returns A promise containing the hash to navigate to, or an empty string if there's no need to navigate\n\t */\n\tgetCreateStartupHash: async function (\n\t\toStartupParameters: StartupParameters,\n\t\tsContextPath: string,\n\t\toRouter: Router,\n\t\toMetaModel: ODataMetaModel\n\t): Promise<string> {\n\t\treturn oMetaModel.requestObject(`${sContextPath}@`).then((oEntitySetAnnotations: MetaModelEntitySetAnnotation) => {\n\t\t\tlet sMetaPath = \"\";\n\t\t\tlet bCreatable = true;\n\n\t\t\tif (\n\t\t\t\toEntitySetAnnotations[\"@com.sap.vocabularies.Common.v1.DraftRoot\"] &&\n\t\t\t\toEntitySetAnnotations[\"@com.sap.vocabularies.Common.v1.DraftRoot\"][\"NewAction\"]\n\t\t\t) {\n\t\t\t\tsMetaPath = `${sContextPath}@com.sap.vocabularies.Common.v1.DraftRoot/NewAction@Org.OData.Core.V1.OperationAvailable`;\n\t\t\t} else if (\n\t\t\t\toEntitySetAnnotations[\"@com.sap.vocabularies.Session.v1.StickySessionSupported\"] &&\n\t\t\t\toEntitySetAnnotations[\"@com.sap.vocabularies.Session.v1.StickySessionSupported\"][\"NewAction\"]\n\t\t\t) {\n\t\t\t\tsMetaPath = `${sContextPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/NewAction@Org.OData.Core.V1.OperationAvailable`;\n\t\t\t}\n\n\t\t\tif (sMetaPath) {\n\t\t\t\tconst bNewActionOperationAvailable = oMetaModel.getObject(sMetaPath);\n\t\t\t\tif (bNewActionOperationAvailable === false) {\n\t\t\t\t\tbCreatable = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst oInsertRestrictions = oEntitySetAnnotations[\"@Org.OData.Capabilities.V1.InsertRestrictions\"];\n\t\t\t\tif (oInsertRestrictions && oInsertRestrictions.Insertable === false) {\n\t\t\t\t\tbCreatable = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (bCreatable) {\n\t\t\t\treturn this.getDefaultCreateHash(oStartupParameters, sContextPath, oRouter);\n\t\t\t} else {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Calculates the hash to create a new object.\n\t * @param oStartupParameters The startup parameter values (map parameter name -> array of values)\n\t * @param sContextPath The context path of the entity set to be used for the creation\n\t * @param oRouter The router instance\n\t * @returns The hash\n\t */\n\tgetDefaultCreateHash: function (\n\t\toStartupParameters: StartupParameters | null | undefined,\n\t\tsContextPath: string,\n\t\toRouter: Router\n\t): string {\n\t\tlet sDefaultCreateHash = oStartupParameters && oStartupParameters.preferredMode ? oStartupParameters.preferredMode[0] : \"create\";\n\t\tlet sHash = \"\";\n\n\t\tsDefaultCreateHash =\n\t\t\tsDefaultCreateHash.includes(\":\") && sDefaultCreateHash.length > sDefaultCreateHash.indexOf(\":\") + 1\n\t\t\t\t? sDefaultCreateHash.substring(0, sDefaultCreateHash.indexOf(\":\"))\n\t\t\t\t: \"create\";\n\t\tsHash = `${sContextPath.substring(1)}(...)?i-action=${sDefaultCreateHash}`;\n\t\tif (oRouter.getRouteInfoByHash(sHash)) {\n\t\t\treturn sHash;\n\t\t} else {\n\t\t\tthrow new Error(`No route match for creating a new ${sContextPath.substring(1)}`);\n\t\t}\n\t},\n\n\t/**\n\t * Verifies whether the entity in the given context path is editable by looking at the following annotations:\n\t *\n\t * - @Core.OperationAvailable of the edit action\n\t * - @UI.UpdateHidden\n\t *\n\t * Only static values (true/false) are considered here as we don't have the actual binding context to evaluate dynamic bindings.\n\t * @param contextPath\n\t * @param metaModel\n\t * @returns Whether the entity is editable or not\n\t */\n\tverifyEditAnnotations: async function (contextPath: string, metaModel: ODataMetaModel): Promise<boolean> {\n\t\tconst entitySetAnnotations: MetaModelEntitySetAnnotation = await metaModel.requestObject(`${contextPath}@`);\n\t\tconst updateHidden = entitySetAnnotations?.[\"@com.sap.vocabularies.UI.v1.UpdateHidden\"];\n\t\tlet operationAvailable = true;\n\n\t\tif (entitySetAnnotations?.[\"@com.sap.vocabularies.Common.v1.DraftRoot\"]?.[\"EditAction\"]) {\n\t\t\toperationAvailable = metaModel.getObject(\n\t\t\t\t`${contextPath}@com.sap.vocabularies.Common.v1.DraftRoot/EditAction@Org.OData.Core.V1.OperationAvailable`\n\t\t\t);\n\t\t}\n\n\t\treturn operationAvailable !== false && updateHidden !== true;\n\t}\n};\n\nexport default AppStartupHelper;\n"],"mappings":"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","ignoreList":[],"file":"AppStartupHelper-dbg.js"}