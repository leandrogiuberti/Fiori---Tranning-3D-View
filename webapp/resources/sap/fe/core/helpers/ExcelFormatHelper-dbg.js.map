{"version":3,"names":["ExcelFormatHelper","getExcelDatefromJSDate","sJSDateFormat","DateFormat","getDateInstance","oFormatOptions","pattern","toLowerCase","regex","exec","replace","getExcelDateTimefromJSDateTime","sJSDateTimeFormat","getDateTimeInstance","regexYear","includes","getExcelTimefromJSTime","sJSTimeFormat","getTimeInstance"],"sourceRoot":".","sources":["ExcelFormatHelper.ts"],"sourcesContent":["import type CalendarType from \"sap/base/i18n/date/CalendarType\";\nimport type CalendarWeekNumbering from \"sap/base/i18n/date/CalendarWeekNumbering\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\n\ntype DateFormatOptions = {\n\t/**\n\t * since 1.108.0 specifies the calendar week numbering. If specified, this overwrites `oFormatOptions.firstDayOfWeek`\n\t * and `oFormatOptions.minimalDaysInFirstWeek`.\n\t */\n\tcalendarWeekNumbering?: CalendarWeekNumbering;\n\t/**\n\t * since 1.105.0 specifies the first day of the week starting with `0` (which is Sunday); if not defined,\n\t * the value taken from the locale is used\n\t */\n\tfirstDayOfWeek?: int;\n\t/**\n\t * since 1.105.0 minimal days at the beginning of the year which define the first calendar week; if not\n\t * defined, the value taken from the locale is used\n\t */\n\tminimalDaysInFirstWeek?: int;\n\t/**\n\t * since 1.34.0 contains pattern symbols (e.g. \"yMMMd\" or \"Hms\") which will be converted into the pattern\n\t * in the used locale, which matches the wanted symbols best. The symbols must be in canonical order, that\n\t * is: Era (G), Year (y/Y), Quarter (q/Q), Month (M/L), Week (w), Day-Of-Week (E/e/c), Day (d), Hour (h/H/k/K/j/J),\n\t * Minute (m), Second (s), Timezone (z/Z/v/V/O/X/x) See {@link http://unicode.org/reports/tr35/tr35-dates.html#availableFormats_appendItems}\n\t */\n\tformat?: string;\n\t/**\n\t * a data pattern in LDML format. It is not verified whether the pattern represents only a date.\n\t */\n\tpattern?: string;\n\t/**\n\t * can be either 'short, 'medium', 'long' or 'full'. If no pattern is given, a locale dependent default\n\t * date pattern of that style is used from the LocaleData class.\n\t */\n\tstyle?: string;\n\t/**\n\t * if true, by parsing it is checked if the value is a valid date\n\t */\n\tstrictParsing?: boolean;\n\t/**\n\t * if true, the date is formatted relatively to todays date if it is within the given day range, e.g. \"today\",\n\t * \"1 day ago\", \"in 5 days\"\n\t */\n\trelative?: boolean;\n\t/**\n\t * the day range used for relative formatting. If `oFormatOptions.relativeScale` is set to default value\n\t * 'day', the relativeRange is by default [-6, 6], which means only the last 6 days, today and the next\n\t * 6 days are formatted relatively. Otherwise when `oFormatOptions.relativeScale` is set to 'auto', all\n\t * dates are formatted relatively.\n\t */\n\trelativeRange?: int[];\n\t/**\n\t * if 'auto' is set, new relative time format is switched on for all Date/Time Instances. The relative scale\n\t * is chosen depending on the difference between the given date and now.\n\t */\n\trelativeScale?: string;\n\t/**\n\t * since 1.32.10, 1.34.4 the style of the relative format. The valid values are \"wide\", \"short\", \"narrow\"\n\t */\n\trelativeStyle?: string;\n\t/**\n\t * since 1.48.0 if true, the {@link sap.ui.core.format.DateFormat#format format} method expects an array\n\t * with two dates as the first argument and formats them as interval. Further interval \"Jan 10, 2008 - Jan\n\t * 12, 2008\" will be formatted as \"Jan 10-12, 2008\" if the 'format' option is set with necessary symbols.\n\t * Otherwise the two given dates are formatted separately and concatenated with local dependent pattern.\n\t */\n\tinterval?: boolean;\n\t/**\n\t * Since 1.113.0, a delimiter for intervals. With a given interval delimiter a specific interval format\n\t * is created. **Example:** If `oFormatOptions.intervalDelimiter` is set to \"...\", an interval would be\n\t * given as \"Jan 10, 2008...Feb 12, 2008\". **Note:** If this format option is set, the locale-specific interval\n\t * notation is overruled, for example \"Jan 10 â€“ Feb 12, 2008\" becomes \"Jan 10, 2008...Feb 12, 2008\".\n\t */\n\tintervalDelimiter?: string;\n\t/**\n\t * Only relevant if oFormatOptions.interval is set to 'true'. This allows to pass an array with only one\n\t * date object to the {@link sap.ui.core.format.DateFormat#format format} method.\n\t */\n\tsingleIntervalValue?: boolean;\n\t/**\n\t * if true, the date is formatted and parsed as UTC instead of the local timezone\n\t */\n\tUTC?: boolean;\n\t/**\n\t * The calender type which is used to format and parse the date. This value is by default either set in\n\t * configuration or calculated based on current locale.\n\t */\n\tcalendarType?: CalendarType;\n};\nconst ExcelFormatHelper = {\n\t/**\n\t * Method for converting JS Date format to Excel custom date format.\n\t * @returns Format for the Date column to be used on excel.\n\t */\n\tgetExcelDatefromJSDate: function (): string | undefined {\n\t\t// Get date Format(pattern), which will be used for date format mapping between sapui5 and excel.\n\t\t// UI5_ANY\n\t\tlet sJSDateFormat = (DateFormat.getDateInstance() as { oFormatOptions?: DateFormatOptions }).oFormatOptions?.pattern?.toLowerCase();\n\t\tif (sJSDateFormat) {\n\t\t\t// Checking for the existence of single 'y' in the pattern.\n\t\t\tconst regex = /^[^y]*y[^y]*$/m;\n\t\t\tif (regex.exec(sJSDateFormat)) {\n\t\t\t\tsJSDateFormat = sJSDateFormat.replace(\"y\", \"yyyy\");\n\t\t\t}\n\t\t}\n\t\treturn sJSDateFormat;\n\t},\n\tgetExcelDateTimefromJSDateTime: function (): string | undefined {\n\t\t// Get date Format(pattern), which will be used for date time format mapping between sapui5 and excel.\n\t\t// UI5_ANY\n\t\tlet sJSDateTimeFormat = (\n\t\t\tDateFormat.getDateTimeInstance() as { oFormatOptions?: DateFormatOptions }\n\t\t).oFormatOptions?.pattern?.toLowerCase();\n\t\tif (sJSDateTimeFormat) {\n\t\t\t// Checking for the existence of single 'y' in the pattern.\n\t\t\tconst regexYear = /^[^y]*y[^y]*$/m;\n\t\t\tif (regexYear.exec(sJSDateTimeFormat)) {\n\t\t\t\tsJSDateTimeFormat = sJSDateTimeFormat.replace(\"y\", \"yyyy\");\n\t\t\t}\n\t\t\tif (sJSDateTimeFormat.includes(\"a\")) {\n\t\t\t\tsJSDateTimeFormat = sJSDateTimeFormat.replace(\"a\", \"AM/PM\");\n\t\t\t}\n\t\t}\n\t\treturn sJSDateTimeFormat;\n\t},\n\tgetExcelTimefromJSTime: function (): string | undefined {\n\t\t// Get date Format(pattern), which will be used for date time format mapping between sapui5 and excel.\n\t\t// UI5_ANY\n\t\tlet sJSTimeFormat = (DateFormat.getTimeInstance() as { oFormatOptions?: DateFormatOptions }).oFormatOptions?.pattern;\n\t\tif (sJSTimeFormat && sJSTimeFormat.includes(\"a\")) {\n\t\t\tsJSTimeFormat = sJSTimeFormat.replace(\"a\", \"AM/PM\");\n\t\t}\n\t\treturn sJSTimeFormat;\n\t}\n};\n\nexport default ExcelFormatHelper;\n"],"mappings":";;;;;;;EA0FA,MAAMA,iBAAiB,GAAG;IACzB;AACD;AACA;AACA;IACCC,sBAAsB,EAAE,SAAAA,CAAA,EAAgC;MACvD;MACA;MACA,IAAIC,aAAa,GAAIC,UAAU,CAACC,eAAe,CAAC,CAAC,CAA4CC,cAAc,EAAEC,OAAO,EAAEC,WAAW,CAAC,CAAC;MACnI,IAAIL,aAAa,EAAE;QAClB;QACA,MAAMM,KAAK,GAAG,gBAAgB;QAC9B,IAAIA,KAAK,CAACC,IAAI,CAACP,aAAa,CAAC,EAAE;UAC9BA,aAAa,GAAGA,aAAa,CAACQ,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC;QACnD;MACD;MACA,OAAOR,aAAa;IACrB,CAAC;IACDS,8BAA8B,EAAE,SAAAA,CAAA,EAAgC;MAC/D;MACA;MACA,IAAIC,iBAAiB,GACpBT,UAAU,CAACU,mBAAmB,CAAC,CAAC,CAC/BR,cAAc,EAAEC,OAAO,EAAEC,WAAW,CAAC,CAAC;MACxC,IAAIK,iBAAiB,EAAE;QACtB;QACA,MAAME,SAAS,GAAG,gBAAgB;QAClC,IAAIA,SAAS,CAACL,IAAI,CAACG,iBAAiB,CAAC,EAAE;UACtCA,iBAAiB,GAAGA,iBAAiB,CAACF,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC;QAC3D;QACA,IAAIE,iBAAiB,CAACG,QAAQ,CAAC,GAAG,CAAC,EAAE;UACpCH,iBAAiB,GAAGA,iBAAiB,CAACF,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;QAC5D;MACD;MACA,OAAOE,iBAAiB;IACzB,CAAC;IACDI,sBAAsB,EAAE,SAAAA,CAAA,EAAgC;MACvD;MACA;MACA,IAAIC,aAAa,GAAId,UAAU,CAACe,eAAe,CAAC,CAAC,CAA4Cb,cAAc,EAAEC,OAAO;MACpH,IAAIW,aAAa,IAAIA,aAAa,CAACF,QAAQ,CAAC,GAAG,CAAC,EAAE;QACjDE,aAAa,GAAGA,aAAa,CAACP,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC;MACpD;MACA,OAAOO,aAAa;IACrB;EACD,CAAC;EAAC,OAEajB,iBAAiB;AAAA","ignoreList":[],"file":"ExcelFormatHelper-dbg.js"}