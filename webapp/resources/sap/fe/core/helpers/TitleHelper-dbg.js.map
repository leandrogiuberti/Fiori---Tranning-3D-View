{"version":3,"names":["formatValueRecursively","bindingExpressionToEnhance","fullContextPath","transformRecursively","expression","outExpression","modelName","undefined","oPropertyDataModelPath","enhanceDataModelPath","path","formatWithTypeInformation","targetObject","_exports","getPropertyDefinition","propertyDataModelObject","propertyPathOrProperty","isPropertyPathExpression","$target","isOrHasActiveEntity","draftRoot","targetEntitySet","annotations","Common","DraftRoot","draftNode","DraftNode","not","Draft","IsNewObject","isTitleEmptyBooleanExpression","titleValueExpression","_type","constant","value","isEmpty","getTitleBindingWithTextArrangement","propertyDataModelPath","propertyBindingExpression","formatOptions","targetDisplayModeOverride","displayMode","propertyDefinition","targetDisplayMode","UIFormatters","getDisplayMode","commonText","Text","relativeLocation","getRelativePaths","params","getExpressionFromAnnotation","targetExpression","splitTitleOnTwoLines","ifElse","UI","TextArrangement","addTextArrangementToTitleBindingExpression","getCreateModeTitle","targetNavigationPath","getTargetNavigationPath","baseKey","fullKey","baseTranslation","pathInModel","fullTranslation","formatResult","valueFormatters","formatCreationTitle","shouldForceEmptyString","Core","Computed","IsInactive","getTitleValueExpressionFromHeaderInfo","headerInfoTitle","getTextBindingExpression","$Type","Value","Target","connectedFieldsPath","getLabelForConnectedFields","getTitleBindingExpression","headerInfo","viewData","customFormatter","formatter","formatTitle","createModeTitle","isHeaderInfoTitleEmpty","extIdHeaderInfoTitle","isDataField","Title","ExternalID","isConstant","toString","compileExpression","isPathAnnotationExpression","getContextRelativeTargetObjectPath","Array","isArray","isProperty","isTitleEmpty","forceEmptyString","formattedExpression","or","isUndefinedExpression","IsCreateMode","resourceModel","getText"],"sourceRoot":".","sources":["TitleHelper.ts"],"sourcesContent":["import type { EntitySet, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { ConnectedFields, DataFieldAbstractTypes, DataFieldTypes, HeaderInfoType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tcompileExpression,\n\tconstant,\n\tformatResult,\n\tformatWithTypeInformation,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tisConstant,\n\tisEmpty,\n\tisUndefinedExpression,\n\tnot,\n\tor,\n\tpathInModel,\n\ttransformRecursively\n} from \"sap/fe/base/BindingToolkit\";\nimport valueFormatters from \"sap/fe/core/formatters/ValueFormatter\";\nimport { Draft, UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport { isPathAnnotationExpression, isProperty, isPropertyPathExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { ViewData } from \"sap/fe/core/services/TemplatedViewServiceFactory\";\nimport { getLabelForConnectedFields } from \"sap/fe/core/templating/DataFieldFormatters\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport {\n\tenhanceDataModelPath,\n\tgetContextRelativeTargetObjectPath,\n\tgetRelativePaths,\n\tgetTargetNavigationPath\n} from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type { DisplayMode } from \"sap/fe/core/templating/UIFormatters\";\nimport * as UIFormatters from \"sap/fe/core/templating/UIFormatters\";\nimport { isDataField } from \"../converters/annotations/DataField\";\n\ntype BindingExpressionTuple = [BindingToolkitExpression<string>, BindingToolkitExpression<string>] | [BindingToolkitExpression<string>];\n\nexport const formatValueRecursively = function (\n\tbindingExpressionToEnhance: BindingToolkitExpression<string>,\n\tfullContextPath: DataModelObjectPath<Property | PropertyPath>\n): BindingToolkitExpression<string> {\n\treturn transformRecursively(bindingExpressionToEnhance, \"PathInModel\", (expression) => {\n\t\tlet outExpression = expression;\n\t\tif (expression.modelName === undefined) {\n\t\t\t// In case of default model we then need to resolve the text arrangement property\n\t\t\tconst oPropertyDataModelPath = enhanceDataModelPath<Property>(fullContextPath, expression.path);\n\t\t\toutExpression = formatWithTypeInformation(oPropertyDataModelPath.targetObject!, expression);\n\t\t}\n\t\treturn outExpression;\n\t});\n};\n\n/**\n * Get property definition from data model object path.\n * @param propertyDataModelObject The property data model object\n * @returns The property\n */\nconst getPropertyDefinition = (propertyDataModelObject: DataModelObjectPath<Property | PropertyPath>): Property | undefined => {\n\tconst propertyPathOrProperty = propertyDataModelObject.targetObject;\n\treturn isPropertyPathExpression(propertyPathOrProperty) ? propertyPathOrProperty.$target : propertyPathOrProperty;\n};\n\n/**\n * Checks whether an associated active entity exists.\n * @param fullContextPath The full path to the context\n * @returns The expression-binding string\n */\nconst isOrHasActiveEntity = (fullContextPath: DataModelObjectPath<unknown>): boolean | BindingToolkitExpression<boolean> => {\n\tconst draftRoot = (fullContextPath.targetEntitySet as EntitySet | undefined)?.annotations?.Common?.DraftRoot;\n\tconst draftNode = (fullContextPath.targetEntitySet as EntitySet | undefined)?.annotations?.Common?.DraftNode;\n\tif (!!draftRoot || !!draftNode) {\n\t\treturn not(Draft.IsNewObject);\n\t}\n\treturn true;\n};\n\n/**\n * Checks if title value expression is empty.\n * @param titleValueExpression The title value expression\n * @returns The expression-binding string\n */\nconst isTitleEmptyBooleanExpression = (titleValueExpression: BindingToolkitExpression<string>): BindingToolkitExpression<boolean> =>\n\ttitleValueExpression._type === \"Constant\" ? constant(!titleValueExpression.value) : isEmpty(titleValueExpression);\n\n/**\n * Retrieves the title expression binding.\n * @param propertyDataModelPath The full path to the property context\n * @param propertyBindingExpression The binding expression of the property above\n * @param [formatOptions] The format options of the field\n * @param formatOptions.displayMode\n * @returns The expression-binding parameters\n */\nconst getTitleBindingWithTextArrangement = function (\n\tpropertyDataModelPath: DataModelObjectPath<Property>,\n\tpropertyBindingExpression: BindingToolkitExpression<string>,\n\tformatOptions?: Partial<{ displayMode?: DisplayMode; splitTitleOnTwoLines?: boolean }>\n): BindingExpressionTuple {\n\tconst targetDisplayModeOverride = formatOptions?.displayMode;\n\tconst propertyDefinition = getPropertyDefinition(propertyDataModelPath);\n\tconst targetDisplayMode = targetDisplayModeOverride || UIFormatters.getDisplayMode(propertyDataModelPath);\n\tconst commonText = propertyDefinition?.annotations?.Common?.Text;\n\tconst relativeLocation = getRelativePaths(propertyDataModelPath);\n\n\tif (propertyDefinition) {\n\t\tpropertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression);\n\t}\n\n\tlet params: BindingExpressionTuple = [propertyBindingExpression];\n\tif (targetDisplayMode !== \"Value\" && commonText) {\n\t\tswitch (targetDisplayMode) {\n\t\t\tcase \"Description\":\n\t\t\t\tparams = [getExpressionFromAnnotation(commonText, relativeLocation)];\n\t\t\t\tbreak;\n\t\t\tcase \"DescriptionValue\":\n\t\t\t\tconst targetExpression =\n\t\t\t\t\tformatOptions?.splitTitleOnTwoLines === undefined\n\t\t\t\t\t\t? ifElse(!!commonText.annotations?.UI?.TextArrangement, propertyBindingExpression, constant(\"\"))\n\t\t\t\t\t\t: ifElse(!!formatOptions?.splitTitleOnTwoLines, constant(\"\"), propertyBindingExpression);\n\t\t\t\tparams = [getExpressionFromAnnotation(commonText, relativeLocation), targetExpression];\n\t\t\t\tbreak;\n\t\t\tcase \"ValueDescription\":\n\t\t\t\tparams = [\n\t\t\t\t\tpropertyBindingExpression,\n\t\t\t\t\tifElse(!!formatOptions?.splitTitleOnTwoLines, constant(\"\"), getExpressionFromAnnotation(commonText, relativeLocation))\n\t\t\t\t];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn params;\n};\n\n/**\n * Recursively add the text arrangement to a title binding expression.\n * @param bindingExpressionToEnhance The binding expression to be enhanced\n * @param path The data field data model object path\n * @returns An updated expression containing the text arrangement binding parameters\n */\nconst addTextArrangementToTitleBindingExpression = function (\n\tbindingExpressionToEnhance: BindingToolkitExpression<string>,\n\tpath: DataModelObjectPath<Property>\n): BindingToolkitExpression<string> {\n\treturn transformRecursively(bindingExpressionToEnhance, \"PathInModel\", (expression: PathInModelExpression<unknown>) => {\n\t\tif (expression.modelName !== undefined) return expression;\n\t\t// In case of default model we then need to resolve the text arrangement property\n\t\tconst propertyDataModelPath = enhanceDataModelPath<Property>(path, expression.path);\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\treturn getTitleBindingWithTextArrangement(propertyDataModelPath, expression) as unknown as BindingToolkitExpression<any>;\n\t});\n};\n\n/**\n * Gets binding expression for create mode title.\n * @param path The meta path pointing to the property used for the title\n * @returns The expression-binding string\n */\nexport const getCreateModeTitle = function (path: DataModelObjectPath<Property>): BindingToolkitExpression<string> {\n\tconst targetNavigationPath = getTargetNavigationPath(path, true);\n\tconst baseKey = \"T_NEW_OBJECT\";\n\tconst fullKey = targetNavigationPath ? `${baseKey}|${targetNavigationPath}` : baseKey;\n\n\tconst baseTranslation = pathInModel(baseKey, \"sap.fe.i18n\");\n\tconst fullTranslation = pathInModel(fullKey, \"sap.fe.i18n\");\n\n\treturn formatResult([baseTranslation, fullTranslation], valueFormatters.formatCreationTitle);\n};\n\n/**\n * Checks whether an empty string should be used.\n * @param path The meta path pointing to the property used for the title\n * @returns The expression-binding string\n */\nconst shouldForceEmptyString = (path: DataModelObjectPath<Property | PropertyPath>): BindingToolkitExpression<boolean> => {\n\tconst propertyDefinition = getPropertyDefinition(path);\n\tif (propertyDefinition && propertyDefinition.annotations?.Core?.Computed) {\n\t\treturn UI.IsInactive;\n\t} else {\n\t\treturn constant(false);\n\t}\n};\n\n/**\n * Gets title value expression from object page header info.\n * @param fullContextPath The full path to the context\n * @param headerInfoTitle The title value from the object page header info\n * @param getTextBindingExpression The function to get the text binding expression\n * @returns The expression-binding string\n */\nconst getTitleValueExpressionFromHeaderInfo = function (\n\tfullContextPath: DataModelObjectPath<Property>,\n\theaderInfoTitle: DataFieldAbstractTypes,\n\tgetTextBindingExpression: Function\n): BindingToolkitExpression<string> | undefined {\n\tlet titleValueExpression: BindingToolkitExpression<string> | undefined;\n\tif (headerInfoTitle.$Type === UIAnnotationTypes.DataField) {\n\t\ttitleValueExpression = getExpressionFromAnnotation(headerInfoTitle.Value);\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\tif ((headerInfoTitle as DataFieldTypes).Value?.$target?.annotations.Common?.Text?.annotations?.UI?.TextArrangement) {\n\t\t\t// In case an explicit text arrangement was set we make use of it in the description as well\n\t\t\ttitleValueExpression = addTextArrangementToTitleBindingExpression(titleValueExpression, fullContextPath);\n\t\t}\n\t\ttitleValueExpression = formatValueRecursively(titleValueExpression, fullContextPath);\n\t}\n\tif (\n\t\theaderInfoTitle.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\theaderInfoTitle.Target.$target?.$Type === UIAnnotationTypes.ConnectedFieldsType\n\t) {\n\t\tconst connectedFieldsPath = enhanceDataModelPath<ConnectedFields>(\n\t\t\tfullContextPath,\n\t\t\t\"$Type/@UI.HeaderInfo/Title/Target/$AnnotationPath\"\n\t\t);\n\t\ttitleValueExpression = getLabelForConnectedFields(\n\t\t\tconnectedFieldsPath,\n\t\t\tgetTextBindingExpression,\n\t\t\tfalse\n\t\t) as BindingToolkitExpression<string>;\n\t}\n\treturn titleValueExpression;\n};\n\n/**\n * Creates binding expression for Object Page, Quick View, and other titles.\n * @param path The data model object path\n * @param getTextBindingExpression The function to get the text binding expression\n * @param [formatOptions] The format options of the field\n * @param formatOptions.displayMode\n * @param [headerInfo] The object page header info\n * @param [viewData] The associated view data\n * @param customFormatter\n * @returns The compiled expression-binding string\n */\nexport const getTitleBindingExpression = function (\n\tpath: DataModelObjectPath<Property>,\n\tgetTextBindingExpression: Function,\n\tformatOptions?: Partial<{ displayMode?: DisplayMode; splitTitleOnTwoLines?: boolean }>,\n\theaderInfo?: HeaderInfoType,\n\tviewData?: ViewData,\n\tcustomFormatter?: string\n): string | undefined {\n\tconst formatter = customFormatter || valueFormatters.formatTitle;\n\n\tlet createModeTitle: BindingToolkitExpression<string> | string = getCreateModeTitle(path);\n\tlet titleValueExpression;\n\tlet isHeaderInfoTitleEmpty = false;\n\n\t//If the title contains a guid with an external ID we want to behave as if the title annotation would point to the target\n\t//of the externalID annotation\n\tlet extIdHeaderInfoTitle;\n\tif (isDataField(headerInfo?.Title) && headerInfo?.Title.Value?.$target?.annotations?.Common?.ExternalID) {\n\t\textIdHeaderInfoTitle = {\n\t\t\t...headerInfo.Title,\n\t\t\tValue: { ...headerInfo.Title.Value, $target: { ...headerInfo.Title.Value.$target } }\n\t\t};\n\t\textIdHeaderInfoTitle.Value.path = headerInfo.Title.Value.$target?.annotations?.Common?.ExternalID.path;\n\t\textIdHeaderInfoTitle.Value.$target = headerInfo.Title.Value.$target?.annotations?.Common?.ExternalID.$target;\n\t}\n\n\t// If we have a headerInfo but no title, or empty title we need to display an empty string when we are on an active object\n\t// received header info for object page\n\tif (headerInfo?.Title?.$Type && viewData) {\n\t\tif (extIdHeaderInfoTitle === undefined) {\n\t\t\ttitleValueExpression = getTitleValueExpressionFromHeaderInfo(path, headerInfo.Title, getTextBindingExpression);\n\t\t} else {\n\t\t\ttitleValueExpression = getTitleValueExpressionFromHeaderInfo(path, extIdHeaderInfoTitle, getTextBindingExpression);\n\t\t}\n\t\tcreateModeTitle = getCreateModeTitle(path);\n\t\tif (isConstant(titleValueExpression) && titleValueExpression.value === \"\") {\n\t\t\tisHeaderInfoTitleEmpty = true;\n\t\t}\n\t} else if (headerInfo && (headerInfo.Title === undefined || headerInfo.Title.toString() === \"\")) {\n\t\tisHeaderInfoTitleEmpty = true;\n\t\t// received header info for objectPage\n\t\tif (!viewData) {\n\t\t\ttitleValueExpression = constant(\"\");\n\t\t}\n\t}\n\tif (titleValueExpression && isConstant(titleValueExpression)) {\n\t\treturn compileExpression(titleValueExpression);\n\t}\n\n\t// needed for quickview\n\tif (isPathAnnotationExpression(path.targetObject)) {\n\t\tpath = enhanceDataModelPath(path, path.targetObject.path);\n\t}\n\n\tconst propertyBindingExpression: BindingToolkitExpression<unknown> = pathInModel(getContextRelativeTargetObjectPath(path));\n\tlet params: BindingExpressionTuple | undefined;\n\tif (titleValueExpression) {\n\t\tparams = Array.isArray(titleValueExpression) ? (titleValueExpression as unknown as BindingExpressionTuple) : [titleValueExpression];\n\t} else if (path.targetObject && isProperty(path.targetObject)) {\n\t\tparams = getTitleBindingWithTextArrangement(path, propertyBindingExpression, formatOptions);\n\t}\n\tconst isTitleEmpty = params === undefined || isTitleEmptyBooleanExpression(params[0]);\n\tconst forceEmptyString = shouldForceEmptyString(path);\n\tconst formattedExpression = params != undefined && formatResult(params, formatter);\n\ttitleValueExpression = ifElse(\n\t\tisTitleEmpty,\n\t\tifElse(\n\t\t\tor(isHeaderInfoTitleEmpty && isOrHasActiveEntity(path), forceEmptyString),\n\t\t\t\"\",\n\t\t\tifElse(\n\t\t\t\tisUndefinedExpression(constant(customFormatter)),\n\t\t\t\tifElse(\n\t\t\t\t\tor(UI.IsCreateMode, not(isOrHasActiveEntity(path))),\n\t\t\t\t\tcreateModeTitle,\n\t\t\t\t\tpathInModel(\"T_ANNOTATION_HELPER_DEFAULT_HEADER_TITLE_NO_HEADER_INFO\", \"sap.fe.i18n\")\n\t\t\t\t),\n\t\t\t\tifElse(\n\t\t\t\t\tnot(isOrHasActiveEntity(path)),\n\t\t\t\t\tviewData?.resourceModel.getText(\"T_NEW_OBJECT\"),\n\t\t\t\t\tviewData?.resourceModel.getText(\"T_ANNOTATION_HELPER_DEFAULT_HEADER_TITLE_NO_HEADER_INFO\")\n\t\t\t\t)\n\t\t\t)\n\t\t),\n\t\tformattedExpression\n\t);\n\n\treturn compileExpression(titleValueExpression);\n};\n"],"mappings":"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","ignoreList":[],"file":"TitleHelper-dbg.js"}