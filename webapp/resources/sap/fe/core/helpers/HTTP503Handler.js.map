{"version":3,"file":"HTTP503Handler.js","names":["handler","createDialog","settings","Dialog","_handleDelayBusy","delayInMs","rootControl","BusyLocker","lock","Promise","resolve","setTimeout","unlock","undefined","_handleDelayProgressBar","error","resourceModel","promiseKeeper","PromiseKeeper","dialogTextRemaining","Text","dialogProgress","ProgressIndicator","displayOnly","percentValue","showValue","content","VBox","items","text","getText","message","addItem","replaceAll","updateContent","remainingTime","retryAfter","getTime","Date","now","progress","setPercentValue","remainingInSeconds","Math","ceil","remainingMinutes","floor","remainingSeconds","setText","progressAnimationTimer","setInterval","clearInterval","dialog","close","onCancel","reject","this","type","title","endButton","Button","press","state","open","promise","handle503Delay"],"sources":["./HTTP503Handler.ts"],"sourcesContent":["import type ResourceModel from \"sap/fe/core/ResourceModel\";\nimport BusyLocker from \"sap/fe/core/controllerextensions/BusyLocker\";\nimport PromiseKeeper from \"sap/fe/core/helpers/PromiseKeeper\";\nimport Button from \"sap/m/Button\";\nimport Dialog, { type $DialogSettings } from \"sap/m/Dialog\";\nimport ProgressIndicator from \"sap/m/ProgressIndicator\";\nimport Text from \"sap/m/Text\";\nimport VBox from \"sap/m/VBox\";\nimport type Control from \"sap/ui/core/Control\";\n\nconst handler = {\n\t/**\n\t * Creates a dialog from settings (exported for test purposes).\n\t * @param settings\n\t * @returns The dialog\n\t */\n\tcreateDialog(settings: $DialogSettings): Dialog {\n\t\treturn new Dialog(settings);\n\t},\n\n\t/**\n\t * Displays a busy indicator for a given amount of time.\n\t * @param delayInMs\n\t * @param rootControl\n\t * @returns A promise that resolves after the given amount of time.\n\t */\n\tasync _handleDelayBusy(delayInMs: number, rootControl: Control): Promise<undefined> {\n\t\tBusyLocker.lock(rootControl);\n\t\treturn new Promise<undefined>((resolve) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tBusyLocker.unlock(rootControl);\n\t\t\t\tresolve(undefined);\n\t\t\t}, delayInMs);\n\t\t});\n\t},\n\n\t/**\n\t * Displays a dialog with a progress bar and a text for a given amount of time.\n\t * @param delayInMs\n\t * @param error\n\t * @param error.retryAfter\n\t * @param resourceModel\n\t * @returns A promise that resolves after the given amount of time, or rejected if the user clicks Cancel.\n\t */\n\tasync _handleDelayProgressBar(\n\t\tdelayInMs: number,\n\t\terror: Error & { retryAfter?: Date },\n\t\tresourceModel: ResourceModel\n\t): Promise<undefined> {\n\t\tconst promiseKeeper = new PromiseKeeper<undefined>();\n\t\tconst dialogTextRemaining = new Text();\n\t\tconst dialogProgress = new ProgressIndicator({ displayOnly: true, percentValue: 0, showValue: false });\n\n\t\tconst content = new VBox({ items: [new Text({ text: resourceModel.getText(\"C_MESSAGE_HANDLING_SAPFE_503_TITLE\") })] });\n\t\tif (error.message) {\n\t\t\tcontent.addItem(new Text({ text: error.message.replaceAll(/[\\n\\r]/g, \" \") }));\n\t\t}\n\t\tcontent.addItem(dialogTextRemaining);\n\t\tcontent.addItem(dialogProgress);\n\n\t\tfunction updateContent(): boolean {\n\t\t\tconst remainingTime = error.retryAfter!.getTime() - Date.now();\n\t\t\tif (remainingTime <= 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tconst progress = 100 - (remainingTime / delayInMs) * 100;\n\t\t\t\tdialogProgress.setPercentValue(progress);\n\t\t\t\tconst remainingInSeconds = Math.ceil(remainingTime / 1000);\n\t\t\t\tconst remainingMinutes = Math.floor(remainingInSeconds / 60);\n\t\t\t\tconst remainingSeconds = remainingInSeconds % 60;\n\t\t\t\tif (remainingMinutes > 0) {\n\t\t\t\t\tdialogTextRemaining.setText(\n\t\t\t\t\t\tresourceModel.getText(\"C_UNAVAILABLE_SERVER_MESSAGE_MINUTES_SECONDS\", [remainingMinutes, remainingSeconds])\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tdialogTextRemaining.setText(resourceModel.getText(\"C_UNAVAILABLE_SERVER_MESSAGE_SECONDS\", [remainingSeconds]));\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tconst progressAnimationTimer = setInterval(() => {\n\t\t\tif (!updateContent()) {\n\t\t\t\tclearInterval(progressAnimationTimer);\n\t\t\t\tdialog.close();\n\t\t\t\tpromiseKeeper.resolve(undefined);\n\t\t\t}\n\t\t}, 100);\n\n\t\tconst onCancel = (): void => {\n\t\t\tclearInterval(progressAnimationTimer);\n\t\t\tdialog.close();\n\t\t\tdelete error.retryAfter; // We can ignore the expected date, as it was already displayed in the progress dialog\n\t\t\tpromiseKeeper.reject(error);\n\t\t};\n\n\t\tconst dialog = this.createDialog({\n\t\t\ttype: \"Message\",\n\t\t\ttitle: resourceModel.getText(\"WARNING\"),\n\t\t\tcontent: [content],\n\t\t\tendButton: new Button({ text: resourceModel.getText(\"C_COMMON_DIALOG_CANCEL\"), press: onCancel }),\n\t\t\tstate: \"Warning\"\n\t\t});\n\t\tupdateContent();\n\t\tdialog.open();\n\n\t\treturn promiseKeeper.promise;\n\t},\n\n\t/**\n\t * Handles an HTTP 503 error with a delay.\n\t * @param error\n\t * @param error.retryAfter\n\t * @param rootControl\n\t * @param resourceModel\n\t * @returns A promise that resolves after the delay, or rejected if the user clicks Cancel.\n\t */\n\tasync handle503Delay(error: Error & { retryAfter?: Date }, rootControl: Control, resourceModel: ResourceModel): Promise<undefined> {\n\t\tif (error.retryAfter === undefined) {\n\t\t\t// No retry-after parameter -> rethrow error\n\t\t\treturn Promise.reject(error);\n\t\t}\n\n\t\tconst delayInMs = error.retryAfter.getTime() - Date.now();\n\t\tif (delayInMs < 5000) {\n\t\t\t// Less than 5 seconds -> show busy indicator\n\t\t\treturn this._handleDelayBusy(delayInMs, rootControl);\n\t\t} else if (delayInMs < 600000) {\n\t\t\t// Between 5s and 10min -> show progress bar\n\t\t\treturn this._handleDelayProgressBar(delayInMs, error as Error & { retryAfter: Date }, resourceModel);\n\t\t} else {\n\t\t\t// More than 10 minutes or undefined --> standard error\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n};\n\nexport default handler;\n"],"mappings":";;;;yNAUA,MAAMA,EAAU,CAMfC,aAAaC,GACZ,OAAO,IAAIC,EAAOD,EACnB,EAQA,sBAAME,CAAiBC,EAAmBC,GACzCC,EAAWC,KAAKF,GAChB,OAAO,IAAIG,QAAoBC,IAC9BC,WAAW,KACVJ,EAAWK,OAAON,GAClBI,EAAQG,YACNR,IAEL,EAUA,6BAAMS,CACLT,EACAU,EACAC,GAEA,MAAMC,EAAgB,IAAIC,EAC1B,MAAMC,EAAsB,IAAIC,EAChC,MAAMC,EAAiB,IAAIC,EAAkB,CAAEC,YAAa,KAAMC,aAAc,EAAGC,UAAW,QAE9F,MAAMC,EAAU,IAAIC,EAAK,CAAEC,MAAO,CAAC,IAAIR,EAAK,CAAES,KAAMb,EAAcc,QAAQ,2CAC1E,GAAIf,EAAMgB,QAAS,CAClBL,EAAQM,QAAQ,IAAIZ,EAAK,CAAES,KAAMd,EAAMgB,QAAQE,WAAW,UAAW,OACtE,CACAP,EAAQM,QAAQb,GAChBO,EAAQM,QAAQX,GAEhB,SAASa,IACR,MAAMC,EAAgBpB,EAAMqB,WAAYC,UAAYC,KAAKC,MACzD,GAAIJ,GAAiB,EAAG,CACvB,OAAO,KACR,KAAO,CACN,MAAMK,EAAW,IAAOL,EAAgB9B,EAAa,IACrDgB,EAAeoB,gBAAgBD,GAC/B,MAAME,EAAqBC,KAAKC,KAAKT,EAAgB,KACrD,MAAMU,EAAmBF,KAAKG,MAAMJ,EAAqB,IACzD,MAAMK,EAAmBL,EAAqB,GAC9C,GAAIG,EAAmB,EAAG,CACzB1B,EAAoB6B,QACnBhC,EAAcc,QAAQ,+CAAgD,CAACe,EAAkBE,IAE3F,KAAO,CACN5B,EAAoB6B,QAAQhC,EAAcc,QAAQ,uCAAwC,CAACiB,IAC5F,CAEA,OAAO,IACR,CACD,CAEA,MAAME,EAAyBC,YAAY,KAC1C,IAAKhB,IAAiB,CACrBiB,cAAcF,GACdG,EAAOC,QACPpC,EAAcP,QAAQG,UACvB,GACE,KAEH,MAAMyC,EAAWA,KAChBH,cAAcF,GACdG,EAAOC,eACAtC,EAAMqB,WACbnB,EAAcsC,OAAOxC,IAGtB,MAAMqC,EAASI,KAAKvD,aAAa,CAChCwD,KAAM,UACNC,MAAO1C,EAAcc,QAAQ,WAC7BJ,QAAS,CAACA,GACViC,UAAW,IAAIC,EAAO,CAAE/B,KAAMb,EAAcc,QAAQ,0BAA2B+B,MAAOP,IACtFQ,MAAO,YAER5B,IACAkB,EAAOW,OAEP,OAAO9C,EAAc+C,OACtB,EAUA,oBAAMC,CAAelD,EAAsCT,EAAsBU,GAChF,GAAID,EAAMqB,aAAevB,UAAW,CAEnC,OAAOJ,QAAQ8C,OAAOxC,EACvB,CAEA,MAAMV,EAAYU,EAAMqB,WAAWC,UAAYC,KAAKC,MACpD,GAAIlC,EAAY,IAAM,CAErB,OAAOmD,KAAKpD,iBAAiBC,EAAWC,EACzC,MAAO,GAAID,EAAY,IAAQ,CAE9B,OAAOmD,KAAK1C,wBAAwBT,EAAWU,EAAuCC,EACvF,KAAO,CAEN,OAAOP,QAAQ8C,OAAOxC,EACvB,CACD,GACC,OAEaf,CAAO","ignoreList":[]}