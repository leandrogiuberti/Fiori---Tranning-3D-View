{"version":3,"file":"PromiseKeeper.js","names":["PromiseKeeper","this","promise","Promise","resolve","reject","resolver","rejector","_exports","_proto","prototype","result","error","undefined","Error"],"sources":["./PromiseKeeper.ts"],"sourcesContent":["/**\n * Helper class that allows to create a Promise and resolve it \"from the outside\".\n *\n * For example, to return a string promise that is resolved when an event is fired:\n * <code>\n * \t\tconst keeper = new PromiseKeeper<string>();\n * \t\teventProvider.attachEvent('myEvent', () => {\n * \t\t\tkeeper.resolve(\"I'm resolved!!\");\n * \t\t});\n *\n * \t\treturn keeper.promise;\n * </code>\n */\nexport default class PromiseKeeper<Type> {\n\tprivate resolver?: (result: Type) => void;\n\n\tprivate rejector?: (error: Error) => void;\n\n\t/**\n\t * The Promise wrapped by the PromiseKeeper\n\t */\n\tpublic readonly promise: Promise<Type>;\n\n\tconstructor() {\n\t\tthis.promise = new Promise<Type>((resolve, reject) => {\n\t\t\tthis.resolver = resolve;\n\t\t\tthis.rejector = reject;\n\t\t});\n\t}\n\n\t/**\n\t * Resolves the wrapped Promise.\n\t * @param result The resolved value.\n\t */\n\tresolve(result: Type): void {\n\t\tif (this.resolver) {\n\t\t\tthis.resolver(result);\n\t\t}\n\t}\n\n\t/**\n\t * Rejects the wrapped Promise. The promise is always rejected using an Error object.\n\t * @param error The error or error message for the rejection.\n\t */\n\treject(error?: string | Error): void {\n\t\tif (this.rejector) {\n\t\t\tif (error === undefined || typeof error === \"string\") {\n\t\t\t\tthis.rejector(new Error(error));\n\t\t\t} else {\n\t\t\t\tthis.rejector(error);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":";;;;kDAAA,IAaqBA,EAAa,WAUjC,SAAAA,IACCC,KAAKC,QAAU,IAAIC,QAAc,CAACC,EAASC,KAC1CJ,KAAKK,SAAWF,EAChBH,KAAKM,SAAWF,GAElB,CAEAG,EAAAR,EAAA,IAAAS,EAAAT,EAAAU,UAAAD,EAIAL,QAAA,SAAAA,EAAQO,GACP,GAAIV,KAAKK,SAAU,CAClBL,KAAKK,SAASK,EACf,CACD,EAEAF,EAIAJ,OAAA,SAAAA,EAAOO,GACN,GAAIX,KAAKM,SAAU,CAClB,GAAIK,IAAUC,kBAAoBD,IAAU,SAAU,CACrDX,KAAKM,SAAS,IAAIO,MAAMF,GACzB,KAAO,CACNX,KAAKM,SAASK,EACf,CACD,CACD,EAAC,OAAAZ,CAAA,CAvCgC,GAuChCQ,EAAAR,EAAA,OAAAQ,CAAA","ignoreList":[]}