{"version":3,"names":["getInfoForEntityProperty","propertyPath","rowBindingPath","metaContext","metaModel","enablePastingOfComputedProperties","arguments","length","undefined","forceIgnore","property","getProperty","formatOptions","parseKeepsEmptyString","type","getUI5Type","isIgnored","computed","ignore","displayErrorMessages","errorMessages","messageDetails","resourceBundle","Library","getResourceBundleFor","errorCorrectionMessage","getText","noteMessage","pasteErrorMessage","unshift","MessageBox","error","title","details","join","PasteHelper","formatCustomMessage","validationMessages","iRowNumber","errorMessage","numberMessages","i18nRow","forEach","message","indexMessage","messageText","getColumnInfo","table","columns","ignoreNavigationProperty","model","getRowBinding","getModel","getMetaModel","resolve","getPath","getContext","getMetaContext","entityTypeProperties","MetaModelConverter","getInvolvedDataModelObjects","targetEntityType","entityProperties","columnArrangementProperty","tableDefinition","getParent","getTableDefinition","getColumnFromPropertyInfos","dataProperty","hasValueHelp","text","push","exportSettings","includes","path","control","propertyInfo","getEnhancedFetchedPropertyInfos","propertyInfoDict","Object","assign","map","key","columnInfos","getColumns","column","infoProperty","getPropertyKey","propertyInfos","hasValueHelpProperty","columnToPush","exportDataPointTargetValue","find","p","name","annotations","Common","ValueList","parsePastedData","rawData","pasteInfos","pastedColumnCount","firstEditableColumnIndex","I","computedProperties","filter","info","computedProperty","columnPosition","indexOf","isColEmpty","every","row","parseResult","parsedData","errors","CorePasteHelper","parse","oElement","_updateContexts","contexts","data","index","setPropertyPromises","rowContext","getPropertyEditMode","FieldEditMode","Editable","setProperty","Log","warning","getIndex","Promise","allSettled","getPasteInformationForReponsiveTable","cellSelection","posFirstSelectedRow","numberOfNewCreationRows","posFirstInlineCreationRowInTable","getCurrentContexts","findIndex","context","isTransient","rows","updatedRowCount","slice","lastInlineCreationRowInSelection","pop","posLastInlineCreationRowInSelection","Math","min","getPasteInformationForGridTable","tableRowcCount","getLength","getPasteInformation","pasteInformation","getCreationMode","getName","CreationMode","InlineCreationRows","pasteRangeData","pasteInfo","createEmptyRows","requestContexts","posFirstInlineCreationRow","focusRow","updatedColCount","keys","pasteData","controller","editFlow","aData","then","aParsedData","all","mData","validateDocument","getBindingContext","customValidationFunction","aValidationMessages","aErrorMessages","reduce","aMessages","aCustomMessages","messages","aRowMessages","mError","aValidatedData","transientContexts","lastTransientContext","lastTransientContextHasErrorMessage","Messaging","getMessageModel","getData","getTargets","newContexts","createMultipleDocuments","createAtEnd","onBeforeCreate","delete","catch","oError"],"sourceRoot":".","sources":["PasteHelper.ts"],"sourcesContent":["import type { ArrayWithIndex, Property } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type { EnhancedFEPropertyInfo } from \"sap/fe/macros/table/TableAPI\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport * as CorePasteHelper from \"sap/ui/core/util/PasteHelper\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Column from \"sap/ui/mdc/table/Column\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataType from \"sap/ui/model/odata/type/ODataType\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport { CreationMode } from \"../converters/ManifestSettings\";\nimport { FieldEditMode } from \"../templating/UIFormatters\";\n\nexport type customValidationMessage = {\n\tmessageText?: string;\n\tmessageTarget?: string;\n};\n\ntype PasteInformation = {\n\trows: ODataV4Context[];\n\tcolumns: Column[];\n\tupdatedRowCount: number;\n\tnumberOfNewCreationRows: number;\n};\n\nconst getInfoForEntityProperty = function (\n\tpropertyPath: string,\n\trowBindingPath: string,\n\tmetaContext: Context,\n\tmetaModel: ODataMetaModel,\n\tenablePastingOfComputedProperties = false,\n\tforceIgnore = false\n): PasteColumnInfo {\n\tconst property = metaContext.getProperty(propertyPath),\n\t\tformatOptions = { parseKeepsEmptyString: true },\n\t\ttype = metaModel.getUI5Type(`${rowBindingPath}/${propertyPath}`, formatOptions);\n\tlet isIgnored, computed;\n\tif (enablePastingOfComputedProperties === true) {\n\t\tisIgnored = !property;\n\t\tcomputed = metaContext.getProperty(`${propertyPath}@Org.OData.Core.V1.Computed`);\n\t} else {\n\t\tisIgnored = !property || metaContext.getProperty(`${propertyPath}@Org.OData.Core.V1.Computed`);\n\t}\n\n\treturn {\n\t\tproperty: propertyPath,\n\t\tignore: forceIgnore || isIgnored,\n\t\tcomputed: computed,\n\t\ttype: type\n\t};\n};\n\nconst displayErrorMessages = function (errorMessages: string[]): void {\n\tconst messageDetails = [...errorMessages];\n\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!,\n\t\terrorCorrectionMessage = resourceBundle.getText(\"C_PASTE_HELPER_SAPFE_PASTE_ERROR_CORRECTION_MESSAGE\"),\n\t\tnoteMessage = resourceBundle.getText(\"C_PASTE_HELPER_SAPFE_PASTE_ERROR_CORRECTION_NOTE\");\n\tlet pasteErrorMessage;\n\n\tif (messageDetails.length > 1) {\n\t\tpasteErrorMessage = resourceBundle.getText(\"C_PASTE_HELPER_SAPFE_PASTE_ERROR_MESSAGE_PLURAL\", [messageDetails.length]);\n\t} else {\n\t\tpasteErrorMessage = resourceBundle.getText(\"C_PASTE_HELPER_SAPFE_PASTE_ERROR_MESSAGE_SINGULAR\");\n\t}\n\tmessageDetails.unshift(\"\"); // To show space between the short text and the list of errors\n\tmessageDetails.unshift(noteMessage);\n\tmessageDetails.unshift(errorCorrectionMessage);\n\tMessageBox.error(pasteErrorMessage, {\n\t\ttitle: resourceBundle.getText(\"C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR\"),\n\t\tdetails: messageDetails.join(\"<br>\")\n\t});\n};\n\ntype PasteColumnInfo = {\n\tproperty: string | undefined;\n\ttype?: ODataType | null;\n\tignore: boolean;\n\tcomputed?: boolean;\n};\n\nconst PasteHelper = {\n\tdisplayErrorMessages: displayErrorMessages,\n\tformatCustomMessage: function (validationMessages: customValidationMessage[], iRowNumber: number): string {\n\t\tlet errorMessage = \"\";\n\t\tconst numberMessages = validationMessages.length;\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!,\n\t\t\ti18nRow = resourceBundle.getText(\"T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW\");\n\t\tif (numberMessages > 0) {\n\t\t\terrorMessage += `${i18nRow} ${iRowNumber}: `;\n\t\t\tvalidationMessages.forEach((message, indexMessage) => {\n\t\t\t\tif (message.messageText) {\n\t\t\t\t\terrorMessage += message.messageText + (indexMessage + 1 !== numberMessages ? \" \" : \"\");\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn errorMessage;\n\t},\n\t/**\n\t * Get details about table columns.\n\t * @param table The table which contains the columns to be analyzed\n\t * @param columns A list of columns to be analyzed. If undefined, all columns from the table are analyzed\n\t * @param ignoreNavigationProperty If true, navigation properties are ignored\n\t * @returns An array of objects providing details about columns.\n\t */\n\tgetColumnInfo: function (table: Table, columns?: Column[], ignoreNavigationProperty = true): PasteColumnInfo[] {\n\t\tconst model = table.getRowBinding().getModel(),\n\t\t\tmetaModel = model.getMetaModel(),\n\t\t\trowBindingPath = model.resolve(table.getRowBinding().getPath(), table.getRowBinding().getContext()),\n\t\t\tmetaContext = metaModel.getMetaContext(rowBindingPath),\n\t\t\tentityTypeProperties = MetaModelConverter.getInvolvedDataModelObjects(metaContext).targetEntityType.entityProperties,\n\t\t\tcolumnArrangementProperty: string[] = [],\n\t\t\ttableDefinition = (table.getParent() as TableAPI).getTableDefinition();\n\t\tfunction getColumnFromPropertyInfos(\n\t\t\tdataProperty: EnhancedFEPropertyInfo,\n\t\t\thasValueHelp: boolean,\n\t\t\tproperty: string\n\t\t): PasteColumnInfo | undefined {\n\t\t\t// If we have a textArrangement, we want to remove it if it has a ValueList associated.\n\t\t\tif (dataProperty.text && hasValueHelp) {\n\t\t\t\tcolumnArrangementProperty.push(dataProperty.text);\n\t\t\t}\n\t\t\t// Non exported columns should be part of the columnInfos\n\t\t\tif (dataProperty.exportSettings !== null) {\n\t\t\t\t// Check a navigation property within the current Complex property --> ignore\n\t\t\t\tif (ignoreNavigationProperty && property.includes(\"/\")) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tproperty: dataProperty.path,\n\t\t\t\t\t\tignore: true\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tlet forceIgnore = false;\n\t\t\t\t\tif (dataProperty.path) {\n\t\t\t\t\t\tforceIgnore = columnArrangementProperty.includes(dataProperty.path);\n\t\t\t\t\t}\n\t\t\t\t\t// The object this is weird in a function, so changing it to PasteHelper instead.\n\t\t\t\t\treturn PasteHelper.getInfoForEntityProperty(\n\t\t\t\t\t\tdataProperty.path!,\n\t\t\t\t\t\trowBindingPath,\n\t\t\t\t\t\tmetaContext,\n\t\t\t\t\t\tmetaModel,\n\t\t\t\t\t\ttableDefinition.control.enablePastingOfComputedProperties,\n\t\t\t\t\t\tforceIgnore\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst propertyInfo = (table.getParent() as TableAPI).getEnhancedFetchedPropertyInfos();\n\t\tconst propertyInfoDict: Record<string, EnhancedFEPropertyInfo> = Object.assign(\n\t\t\t{},\n\t\t\t...propertyInfo.map((property) => ({ [property.key]: property }))\n\t\t);\n\t\tconst columnInfos: PasteColumnInfo[] = [];\n\t\t(columns ?? table.getColumns()).forEach((column) => {\n\t\t\tconst infoProperty = propertyInfoDict[column.getPropertyKey()];\n\t\t\t// Check if it's a complex property (property associated to multiple simple properties)\n\t\t\tif (infoProperty.propertyInfos) {\n\t\t\t\t// Get data from simple property\n\t\t\t\tinfoProperty.propertyInfos.forEach((property: string) => {\n\t\t\t\t\tconst dataProperty = propertyInfoDict[property],\n\t\t\t\t\t\thasValueHelp = this.hasValueHelpProperty(entityTypeProperties, dataProperty),\n\t\t\t\t\t\tcolumnToPush = getColumnFromPropertyInfos(dataProperty, hasValueHelp, property);\n\t\t\t\t\tif (columnToPush) {\n\t\t\t\t\t\tcolumnInfos.push(columnToPush);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (infoProperty.exportDataPointTargetValue) {\n\t\t\t\t\tcolumnInfos.push({\n\t\t\t\t\t\tproperty: \"targetValueFromDataPoint\",\n\t\t\t\t\t\tignore: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t// Non exported columns should be part of the columnInfos\n\t\t\t} else if (infoProperty.exportSettings !== null) {\n\t\t\t\tif (infoProperty.path) {\n\t\t\t\t\tcolumnInfos.push(\n\t\t\t\t\t\tPasteHelper.getInfoForEntityProperty(\n\t\t\t\t\t\t\tinfoProperty.path,\n\t\t\t\t\t\t\trowBindingPath,\n\t\t\t\t\t\t\tmetaContext,\n\t\t\t\t\t\t\tmetaModel,\n\t\t\t\t\t\t\ttableDefinition.control.enablePastingOfComputedProperties\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// Empty column --> ignore\n\t\t\t\t\tcolumnInfos.push({\n\t\t\t\t\t\tproperty: \"unused\",\n\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\tignore: true\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn columnInfos;\n\t},\n\tgetInfoForEntityProperty: getInfoForEntityProperty,\n\n\t/**\n\t * Returns whether a property has a value list or not.\n\t * @param entityTypeProperties The entity properties\n\t * @param dataProperty The property we want to check\n\t * @returns Boolean `true` if the property has a value list.\n\t */\n\thasValueHelpProperty: function (\n\t\tentityTypeProperties: ArrayWithIndex<Property, \"name\" | \"fullyQualifiedName\">,\n\t\tdataProperty: EnhancedFEPropertyInfo\n\t): boolean {\n\t\tconst property = entityTypeProperties.find((p) => p.name === dataProperty.path);\n\t\tif (property) {\n\t\t\treturn !!property.annotations?.Common?.ValueList;\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * Transform an array of data by parsing it into an array of objects, facilitating the mapping of columns and data.\n\t * @param rawData The table which contains the columns to be analyzed\n\t * @param table The table which receives the data\n\t * @param columns A list of columns to be used to map the data. If undefined, all table columns are used\n\t * @param ignoreNavigationProperty If true, navigation properties are ignored\n\t * @returns A collection of objects that associates data with corresponding columns.\n\t */\n\tparsePastedData: async function (\n\t\trawData: unknown[][],\n\t\ttable: Table,\n\t\tcolumns?: Column[],\n\t\tignoreNavigationProperty = true\n\t): Promise<Record<string, unknown>[]> {\n\t\tconst pasteInfos = this.getColumnInfo(table, columns, ignoreNavigationProperty);\n\t\tconst tableDefinition = (table.getParent() as TableAPI).getTableDefinition();\n\t\t// Check if we have data for at least the first editable column\n\t\tconst pastedColumnCount = rawData.length ? rawData[0].length : 0;\n\t\tlet firstEditableColumnIndex = -1;\n\t\tfor (let I = 0; I < pasteInfos.length && firstEditableColumnIndex < 0; I++) {\n\t\t\tif (!pasteInfos[I].ignore && !pasteInfos[I].computed) {\n\t\t\t\tfirstEditableColumnIndex = I;\n\t\t\t}\n\t\t}\n\n\t\tif (tableDefinition.control.enablePastingOfComputedProperties) {\n\t\t\tconst computedProperties = pasteInfos.filter(function (info) {\n\t\t\t\treturn info.computed;\n\t\t\t});\n\t\t\t//for each computed property, check if the column is empty . If yes, ignore it\n\t\t\tcomputedProperties.forEach(function (computedProperty) {\n\t\t\t\tconst columnPosition = pasteInfos.indexOf(computedProperty);\n\t\t\t\tconst isColEmpty = rawData.every((row) => row[columnPosition] === \"\");\n\t\t\t\tif (isColEmpty) {\n\t\t\t\t\tcomputedProperty.ignore = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst parseResult = await (firstEditableColumnIndex < 0 || firstEditableColumnIndex > pastedColumnCount - 1\n\t\t\t? { parsedData: [], errors: null } // We don't have data for an editable column --> return empty parsed data\n\t\t\t: CorePasteHelper.parse(rawData, pasteInfos));\n\t\tif (parseResult.errors) {\n\t\t\tconst errorMessages = parseResult.errors.map(function (oElement) {\n\t\t\t\treturn oElement.message;\n\t\t\t});\n\t\t\tthis.displayErrorMessages(errorMessages);\n\t\t\treturn []; // Errors --> return nothing\n\t\t} else {\n\t\t\treturn parseResult.parsedData;\n\t\t}\n\t},\n\n\t/**\n\t * Update an array of contexts.\n\t * @param table The table which contains the contexts to be updated\n\t * @param contexts Array of contexts to be updated\n\t * @param data Array of object containing the data to be used to update the contexts\n\t * @returns Promise\n\t */\n\t_updateContexts: async function (\n\t\ttable: Table,\n\t\tcontexts: (ODataV4Context | undefined)[],\n\t\tdata: Record<string, unknown>[]\n\t): Promise<void> {\n\t\tlet index = 0;\n\t\tconst setPropertyPromises = [];\n\t\tfor (const row of data) {\n\t\t\tconst rowContext = contexts[index++];\n\t\t\tif (rowContext) {\n\t\t\t\tfor (const dataProperty in row) {\n\t\t\t\t\tif ((table.getParent() as TableAPI).getPropertyEditMode(dataProperty, rowContext) === FieldEditMode.Editable) {\n\t\t\t\t\t\tsetPropertyPromises.push(rowContext.setProperty(dataProperty, row[dataProperty]));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLog.warning(`Property ${dataProperty} is not editable for row ${rowContext.getIndex()}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait Promise.allSettled(setPropertyPromises);\n\t},\n\n\t/**\n\t *  Get information about the paste operation on ResponsiveTable.\n\t * @param rawData\n\t * @param cellSelection\n\t * @param cellSelection.columns\n\t * @param cellSelection.rows\n\t * @param posFirstSelectedRow\n\t * @param table\n\t * @returns Objet containing Information about the pasting operation\n\t */\n\tgetPasteInformationForReponsiveTable: function (\n\t\trawData: string[][],\n\t\tcellSelection: { columns: Column[]; rows: ODataV4Context[] },\n\t\tposFirstSelectedRow: number,\n\t\ttable: Table\n\t): PasteInformation {\n\t\tlet numberOfNewCreationRows = 0;\n\t\tconst posFirstInlineCreationRowInTable = table\n\t\t\t.getRowBinding()\n\t\t\t.getCurrentContexts()\n\t\t\t.findIndex((context) => context.isTransient());\n\t\tconst rows = cellSelection.rows;\n\t\tlet updatedRowCount = 0;\n\t\tconst columns =\n\t\t\tcellSelection.columns.length > 1\n\t\t\t\t? cellSelection.columns\n\t\t\t\t: table.getColumns().slice(table.getColumns().indexOf(cellSelection.columns[0]));\n\n\t\t// only one cell is selected\n\t\tif (cellSelection.columns.length === 1 && cellSelection.rows.length === 1) {\n\t\t\t// check if the inline creation row is in the targeted range\n\t\t\tif (\n\t\t\t\tposFirstSelectedRow <= posFirstInlineCreationRowInTable &&\n\t\t\t\tposFirstSelectedRow + rawData.length > posFirstInlineCreationRowInTable\n\t\t\t) {\n\t\t\t\tnumberOfNewCreationRows = rawData.length - (posFirstInlineCreationRowInTable - posFirstSelectedRow) - 1;\n\t\t\t\tupdatedRowCount = rawData.length;\n\t\t\t} else {\n\t\t\t\t// the inline creation row is not in the targeted range\n\t\t\t\tnumberOfNewCreationRows = 0;\n\t\t\t\tupdatedRowCount = rawData.length;\n\t\t\t}\n\t\t} else {\n\t\t\t// multiple cells are selected\n\t\t\tconst lastInlineCreationRowInSelection = rows.filter((context) => context.isTransient())?.pop();\n\t\t\tconst posLastInlineCreationRowInSelection = lastInlineCreationRowInSelection\n\t\t\t\t? rows.indexOf(lastInlineCreationRowInSelection)\n\t\t\t\t: -1;\n\t\t\tupdatedRowCount = Math.min(rawData.length, cellSelection.rows.length);\n\t\t\t// check if the inline creation row is in the selected range\n\t\t\tif (posLastInlineCreationRowInSelection > -1) {\n\t\t\t\tupdatedRowCount = posLastInlineCreationRowInSelection === cellSelection.rows.length - 1 ? rawData.length : updatedRowCount;\n\t\t\t\tnumberOfNewCreationRows =\n\t\t\t\t\tposLastInlineCreationRowInSelection === cellSelection.rows.length - 1\n\t\t\t\t\t\t? rawData.length - posLastInlineCreationRowInSelection - 1\n\t\t\t\t\t\t: 0;\n\t\t\t}\n\t\t}\n\t\treturn { rows, columns, updatedRowCount, numberOfNewCreationRows };\n\t},\n\n\t/**\n\t *  Get information about the paste operation on GridTable.\n\t * @param rawData\n\t * @param cellSelection\n\t * @param cellSelection.columns\n\t * @param cellSelection.rows\n\t * @param posFirstSelectedRow\n\t * @param table\n\t * @returns Objet containing Information about the pasting operation\n\t */\n\tgetPasteInformationForGridTable: function (\n\t\trawData: string[][],\n\t\tcellSelection: { columns: Column[]; rows: ODataV4Context[] },\n\t\tposFirstSelectedRow: number,\n\t\ttable: Table\n\t): PasteInformation {\n\t\tlet numberOfNewCreationRows = 0;\n\t\tconst rows = cellSelection.rows;\n\t\tlet updatedRowCount = 0;\n\t\tconst tableRowcCount = table.getRowBinding().getLength();\n\t\tlet columns =\n\t\t\tcellSelection.columns.length > 1\n\t\t\t\t? cellSelection.columns\n\t\t\t\t: table.getColumns().slice(table.getColumns().indexOf(cellSelection.columns[0]));\n\t\tif (cellSelection.columns.length === 1 && cellSelection.rows.length === 1) {\n\t\t\tnumberOfNewCreationRows =\n\t\t\t\tposFirstSelectedRow + rawData.length > tableRowcCount ? posFirstSelectedRow + rawData.length - tableRowcCount : 0;\n\t\t\tcolumns = table.getColumns().slice(table.getColumns().indexOf(cellSelection.columns[0]));\n\t\t\tupdatedRowCount = rawData.length;\n\t\t} else {\n\t\t\t// multiple cells are selected\n\t\t\tnumberOfNewCreationRows =\n\t\t\t\tposFirstSelectedRow + rows.length >= tableRowcCount ? posFirstSelectedRow + rawData.length - tableRowcCount : 0;\n\t\t\tupdatedRowCount = numberOfNewCreationRows === 0 ? Math.min(rawData.length, cellSelection.rows.length) : rawData.length;\n\t\t}\n\t\treturn { rows, columns, updatedRowCount, numberOfNewCreationRows };\n\t},\n\n\t/**\n\t *  Get information about the paste operation.\n\t * @param rawData\n\t * @param cellSelection\n\t * @param cellSelection.columns\n\t * @param cellSelection.rows\n\t * @param posFirstSelectedRow\n\t * @param table\n\t * @returns Objet containing Information about the pasting operation\n\t */\n\tgetPasteInformation: function (\n\t\trawData: string[][],\n\t\tcellSelection: { columns: Column[]; rows: ODataV4Context[] },\n\t\tposFirstSelectedRow: number,\n\t\ttable: Table\n\t): PasteInformation | null {\n\t\tlet pasteInformation: PasteInformation | null = null;\n\n\t\tswitch (table.data(\"tableType\")) {\n\t\t\tcase \"GridTable\":\n\t\t\t\tpasteInformation = this.getPasteInformationForGridTable(rawData, cellSelection, posFirstSelectedRow, table);\n\t\t\t\tbreak;\n\t\t\tcase \"ResponsiveTable\":\n\t\t\t\tpasteInformation = this.getPasteInformationForReponsiveTable(rawData, cellSelection, posFirstSelectedRow, table);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLog.warning(`Paste operation is not supported for table type ${table.data(\"tableType\")}`);\n\t\t}\n\n\t\tif (\n\t\t\tpasteInformation &&\n\t\t\tpasteInformation?.numberOfNewCreationRows > 0 &&\n\t\t\t(table.getParent() as TableAPI & { getCreationMode: Function }).getCreationMode().getName() !== CreationMode.InlineCreationRows\n\t\t) {\n\t\t\tpasteInformation.updatedRowCount -= pasteInformation.numberOfNewCreationRows;\n\t\t\tpasteInformation.numberOfNewCreationRows = 0;\n\t\t}\n\n\t\treturn pasteInformation;\n\t},\n\n\t/**\n\t * Paste data into a table using a selection of column and rows.\n\t * @param rawData The data to be pasted into the table\n\t * @param cellSelection The columns and the rows to be updated\n\t * @param cellSelection.columns The columns to be updated\n\t * @param cellSelection.rows The rows to be updated\n\t * @param table The table\n\t * @returns Object containing information about the paste\n\t */\n\tpasteRangeData: async function (\n\t\trawData: string[][],\n\t\tcellSelection: { columns: Column[]; rows: ODataV4Context[] },\n\t\ttable: Table\n\t): Promise<\n\t\t| {\n\t\t\t\tupdatedRowCount: number;\n\t\t\t\tupdatedColCount: number;\n\t\t\t\tnumberOfNewCreationRows: number;\n\t\t\t\tposFirstInlineCreationRow: number | undefined;\n\t\t  }\n\t\t| undefined\n\t> {\n\t\tconst posFirstSelectedRow = cellSelection.rows[0].getIndex()!;\n\n\t\tconst pasteInfo = this.getPasteInformation(rawData, cellSelection, posFirstSelectedRow, table);\n\t\tif (!pasteInfo) return;\n\n\t\tconst parsedData = await this.parsePastedData(rawData, table, pasteInfo.columns, false);\n\t\tif (parsedData.length > 0) {\n\t\t\tif (pasteInfo.numberOfNewCreationRows > 0) {\n\t\t\t\tawait (table.getParent() as TableAPI).createEmptyRows(\n\t\t\t\t\ttable.getRowBinding(),\n\t\t\t\t\ttable,\n\t\t\t\t\tfalse,\n\t\t\t\t\tpasteInfo.numberOfNewCreationRows,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t//load missing rows if needed including the newly created rows\n\t\t\tpasteInfo.rows = await table.getRowBinding().requestContexts(posFirstSelectedRow, pasteInfo.updatedRowCount);\n\t\t\tawait this._updateContexts(table, pasteInfo.rows, parsedData);\n\n\t\t\t// focusing on the first available creation row\n\t\t\tconst posFirstInlineCreationRow = pasteInfo.rows.find((context) => context.isTransient())?.getIndex();\n\t\t\tif (posFirstInlineCreationRow) {\n\t\t\t\ttable.focusRow(posFirstInlineCreationRow);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tupdatedRowCount: pasteInfo.updatedRowCount,\n\t\t\t\tupdatedColCount: Object.keys(parsedData[0]).length,\n\t\t\t\tnumberOfNewCreationRows: pasteInfo.numberOfNewCreationRows < 0 ? 0 : pasteInfo.numberOfNewCreationRows,\n\t\t\t\tposFirstInlineCreationRow\n\t\t\t};\n\t\t}\n\t},\n\tpasteData: async function (rawData: string[][], table: Table, controller: PageController): Promise<Context[] | undefined> {\n\t\tconst editFlow = controller.editFlow;\n\t\tconst tableDefinition = (table.getParent() as TableAPI).getTableDefinition();\n\t\tlet aData: Record<string, unknown>[] = [];\n\t\treturn this.parsePastedData(rawData, table)\n\t\t\t.then(async (aParsedData: Record<string, unknown>[]) => {\n\t\t\t\taData = aParsedData || [];\n\t\t\t\treturn Promise.all(\n\t\t\t\t\taData.map(async (mData) =>\n\t\t\t\t\t\teditFlow.validateDocument(table.getBindingContext() as ODataV4Context, {\n\t\t\t\t\t\t\tdata: mData,\n\t\t\t\t\t\t\tcustomValidationFunction: tableDefinition?.control?.customValidationFunction\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t})\n\t\t\t.then((aValidationMessages) => {\n\t\t\t\tconst aErrorMessages: { messages: { messageTarget?: string; messageText: string }[]; row: number }[] =\n\t\t\t\t\taValidationMessages.reduce(\n\t\t\t\t\t\tfunction (aMessages, aCustomMessages, index) {\n\t\t\t\t\t\t\tif (aCustomMessages.length > 0) {\n\t\t\t\t\t\t\t\taMessages.push({ messages: aCustomMessages, row: index + 1 });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn aMessages;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t[] as { messages: { messageTarget?: string; messageText: string }[]; row: number }[]\n\t\t\t\t\t);\n\t\t\t\tif (aErrorMessages.length > 0) {\n\t\t\t\t\tconst aRowMessages = aErrorMessages.map((mError) => this.formatCustomMessage(mError.messages, mError.row));\n\t\t\t\t\tthis.displayErrorMessages(aRowMessages);\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn aData;\n\t\t\t})\n\t\t\t.then(async (aValidatedData): Promise<Context[] | undefined> => {\n\t\t\t\t// remove the last transient context if it exists\n\t\t\t\tconst transientContexts = table\n\t\t\t\t\t.getRowBinding()\n\t\t\t\t\t.getCurrentContexts()\n\t\t\t\t\t.filter((context) => context.isTransient());\n\t\t\t\tconst lastTransientContext = transientContexts.pop();\n\t\t\t\t//check if the last transient context has an error message\n\t\t\t\tconst lastTransientContextHasErrorMessage = !!Messaging.getMessageModel()\n\t\t\t\t\t.getData()\n\t\t\t\t\t.find((message: Message) => lastTransientContext && message.getTargets()[0].includes(lastTransientContext.getPath()));\n\t\t\t\tconst newContexts =\n\t\t\t\t\taValidatedData.length > 0\n\t\t\t\t\t\t? await editFlow.createMultipleDocuments(\n\t\t\t\t\t\t\t\ttable.getRowBinding(),\n\t\t\t\t\t\t\t\taValidatedData,\n\t\t\t\t\t\t\t\ttableDefinition?.control?.createAtEnd,\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t\tcontroller.editFlow.onBeforeCreate\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: undefined;\n\t\t\t\t// if the last transient context has no error message, delete it and recreate a new one at the last position\n\t\t\t\tif (lastTransientContext && !lastTransientContextHasErrorMessage) {\n\t\t\t\t\tlastTransientContext?.delete();\n\t\t\t\t\tawait (table.getParent() as TableAPI).createEmptyRows(table.getRowBinding(), table, false, 1);\n\t\t\t\t}\n\t\t\t\treturn newContexts;\n\t\t\t})\n\t\t\t.catch((oError) => {\n\t\t\t\tLog.error(\"Error while pasting data\", oError);\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n};\n\nexport default PasteHelper;\n"],"mappings":"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","ignoreList":[],"file":"PasteHelper-dbg.js"}