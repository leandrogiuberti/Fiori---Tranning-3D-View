{"version":3,"file":"AppStateHandler.js","names":["NavType","library","SKIP_MERGE_KEY","REPLACE_COMPLETE_APPSTATE","AppStateHandler","_dec","defineUI5Class","_class","_AppStateHandler","_BaseObject","oAppComponent","_this","call","this","_mCurrentAppState","sId","getId","simultaneousCreateRequest","bNoRouteChange","Log","info","_inheritsLoose","_proto","prototype","_getInnerAppStateForView","innerAppState","stateIdentifier","_addAppStateInHash","appStateKey","appComponent","navigationService","getNavigationService","routerProxy","getRouterProxy","hash","getHash","isStickyMode","ModelHelper","isStickySessionSupported","getMetaModel","newHash","replaceInnerAppStateKey","navToHash","undefined","_createAppStateKey","async","appStateData","storeInnerAppStateAsync","_getAppStateInfo","createAppParameters","replaceHash","viewId","appState","currentStateToUpdate","deepEqual","oError","error","findAppStateInHash","createAppState","getEnvironmentCapabilities","getCapabilities","AppState","BusyLocker","isLocked","skipMerge","rootController","getRootControl","getController","viewState","Error","getMetadata","getName","routingIsComplete","retrieveViewState","_createNavigationParameters","oAppData","sNavType","Object","assign","selectionVariantDefaults","oDefaultedSelectionVariant","selectionVariant","oSelectionVariant","requiresStandardVariant","bNavSelVarHasDefaultsOnly","navigationType","setRTAVersionWasActivated","id","value","versionActivationStatus","getRTAVersionWasActivated","_checkIfLastSeenRecord","view","internalModelContext","getBindingContext","getProperty","technicalKeysObject","bindingContext","path","getPath","metaModel","getModel","metaPath","getMetaPath","technicalKeys","getObject","element","keyValue","setProperty","_getAppStateData","navType","key","i","hybrid","iAppState","keys","length","applyAppState","Promise","resolve","checkIfLastSeenRecord","lock","oNavigationService","toES6Promise","parseNavigation","catch","aErrorData","warning","then","aResults","initial","oRootController","shouldApplyState","_isStateEmptyForIAppStateNavType","_getInitialStateApplied","_setInitialStateApplied","applyViewState","finally","unlock","checkIfRouteChangedByIApp","resetRouteChangedByIApp","resetVersionActivationStatus","hasOwnProperty","BaseObject"],"sources":["./AppStateHandler.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { NavigationParameter } from \"sap/fe/core/controllerextensions/ViewState\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport toES6Promise from \"sap/fe/core/helpers/ToES6Promise\";\nimport type { InnerAppData } from \"sap/fe/navigation/NavigationHandler\";\nimport type { SelectionVariant } from \"sap/fe/navigation/SelectionVariant\";\nimport library from \"sap/fe/navigation/library\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport BusyLocker from \"./controllerextensions/BusyLocker\";\nimport ModelHelper from \"./helpers/ModelHelper\";\n\nconst NavType = library.NavType;\ntype AppState = {\n\tskipMerge?: boolean;\n\t[key: string]: unknown;\n};\nexport type AppData = {\n\toDefaultedSelectionVariant: SelectionVariant;\n\toSelectionVariant: SelectionVariant;\n\tbNavSelVarHasDefaultsOnly: boolean;\n\tappState: AppState;\n\tiAppState?: {\n\t\tappState: AppState;\n\t};\n};\nconst SKIP_MERGE_KEY = \"skipMerge\";\nexport type IAppState = {\n\tappState: Record<string, unknown>;\n};\n\nexport type AppDataInfo = {\n\tappStateData: { appState: object | undefined };\n\tappStateKey: string | null;\n};\n\nexport type CreateAppParameters = {\n\treplaceHash?: boolean;\n\tskipMerge?: boolean;\n\tviewId?: string;\n};\n\nexport type VersionActivated = {\n\tversionWasActivated: boolean;\n};\n\nconst REPLACE_COMPLETE_APPSTATE = \"REPLACE_COMPLETE_APPSTATE\";\n\n@defineUI5Class(\"sap.fe.core.AppStateHandler\")\nclass AppStateHandler extends BaseObject {\n\tpublic sId: string;\n\n\tpublic oAppComponent: AppComponent;\n\n\tpublic bNoRouteChange: boolean;\n\n\tprivate _mCurrentAppState?: AppState = {};\n\n\tsimultaneousCreateRequest: Record<string, number>;\n\n\tstatic versionActivationStatus: Record<string, boolean> = {};\n\n\tconstructor(oAppComponent: AppComponent) {\n\t\tsuper();\n\t\tthis.oAppComponent = oAppComponent;\n\t\tthis.sId = `${oAppComponent.getId()}/AppStateHandler`;\n\t\tthis.simultaneousCreateRequest = {};\n\t\tthis.bNoRouteChange = false;\n\t\tLog.info(\"APPSTATE : Appstate handler initialized\");\n\t}\n\n\tgetId(): string {\n\t\treturn this.sId;\n\t}\n\n\t/**\n\t * Get view specific appstate.\n\t * @param innerAppState Overall appstate\n\t * @param stateIdentifier State identifier. Id of the local view\n\t * @returns Inner appstate\n\t */\n\t_getInnerAppStateForView(innerAppState: InnerAppData | undefined, stateIdentifier: string): InnerAppData | undefined {\n\t\tif (stateIdentifier === REPLACE_COMPLETE_APPSTATE || !innerAppState) {\n\t\t\t// overall app state needs to be considered.\n\t\t\treturn innerAppState;\n\t\t}\n\n\t\t// we take the subset of the app state wrt to the local view id.\n\t\treturn {\n\t\t\t[stateIdentifier]: innerAppState[stateIdentifier as keyof typeof innerAppState] || {}\n\t\t};\n\t}\n\n\t/**\n\t * Add appstate in hash.\n\t * @param appStateKey Appstate key\n\t * @param stateIdentifier State identifier. Id of the local view\n\t */\n\t_addAppStateInHash(appStateKey: string, stateIdentifier: string): void {\n\t\tconst appComponent = this.oAppComponent,\n\t\t\tnavigationService = appComponent.getNavigationService(),\n\t\t\trouterProxy = appComponent.getRouterProxy(),\n\t\t\thash = routerProxy.getHash(),\n\t\t\tisStickyMode = ModelHelper.isStickySessionSupported(appComponent.getMetaModel()),\n\t\t\tnewHash = navigationService.replaceInnerAppStateKey(routerProxy.getHash(), appStateKey);\n\n\t\tif (newHash && this.simultaneousCreateRequest[stateIdentifier] === 0 && newHash !== hash) {\n\t\t\trouterProxy.navToHash(newHash, undefined, undefined, undefined, !isStickyMode);\n\t\t\tthis.bNoRouteChange = true;\n\t\t}\n\t\tLog.info(\"APPSTATE: navToHash\");\n\t}\n\n\t/**\n\t * Create Appstate Key.\n\t * @param appStateData Appstate\n\t * @param stateIdentifier State identifier. Id of the local view\n\t * @returns Appstate Key\n\t */\n\tasync _createAppStateKey(appStateData: InnerAppData, stateIdentifier: string): Promise<string> {\n\t\tconst appComponent = this.oAppComponent,\n\t\t\tnavigationService = appComponent.getNavigationService();\n\n\t\tif (this.simultaneousCreateRequest[stateIdentifier]) {\n\t\t\t// any other value\n\t\t\tthis.simultaneousCreateRequest[stateIdentifier]++;\n\t\t} else {\n\t\t\t// 0 or undefined\n\t\t\tthis.simultaneousCreateRequest[stateIdentifier] = 1;\n\t\t}\n\n\t\tconst appStateKey = await navigationService.storeInnerAppStateAsync(appStateData, true, true);\n\n\t\tthis.simultaneousCreateRequest[stateIdentifier]--;\n\n\t\tLog.info(\"APPSTATE: Appstate stored\");\n\t\treturn appStateKey;\n\t}\n\n\t/**\n\t * Creates appstate info.\n\t * @param innerAppState\n\t * @param createAppParameters Parameters for creating new appstate\n\t * @param createAppParameters.replaceHash Boolean which determines to replace the hash with the new generated key\n\t * @param createAppParameters.viewId Id of the view for which we need to create the app state. This is to create or update view specific appstate.\n\t * @returns A promise resolving the stored data or appstate key\n\t */\n\tasync _getAppStateInfo(innerAppState: InnerAppData | undefined, createAppParameters?: CreateAppParameters): Promise<AppDataInfo> {\n\t\tconst appComponent = this.oAppComponent;\n\t\tconst { replaceHash = true, viewId: stateIdentifier = REPLACE_COMPLETE_APPSTATE } = createAppParameters ?? {};\n\n\t\tlet appStateKey: string | null = null;\n\t\tlet appStateData = { appState: this._mCurrentAppState };\n\n\t\tconst currentStateToUpdate = this._getInnerAppStateForView(this._mCurrentAppState, stateIdentifier);\n\t\tif (innerAppState && !deepEqual(currentStateToUpdate, innerAppState)) {\n\t\t\t//\n\t\t\tthis._mCurrentAppState = { ...this._mCurrentAppState, ...(innerAppState as Record<string, unknown>) };\n\t\t\tappStateData = { appState: this._mCurrentAppState };\n\t\t\ttry {\n\t\t\t\tappStateKey = await this._createAppStateKey(appStateData, stateIdentifier);\n\t\t\t\tif (replaceHash === true) {\n\t\t\t\t\tthis._addAppStateInHash(appStateKey, stateIdentifier);\n\t\t\t\t}\n\t\t\t} catch (oError: unknown) {\n\t\t\t\tLog.error(oError as string);\n\t\t\t}\n\t\t} else {\n\t\t\tconst routerProxy = appComponent.getRouterProxy(),\n\t\t\t\thash = routerProxy.getHash();\n\t\t\tappStateKey = routerProxy.findAppStateInHash(hash) as string;\n\t\t}\n\t\treturn {\n\t\t\tappStateData,\n\t\t\tappStateKey\n\t\t};\n\t}\n\n\t/**\n\t * Creates or updates the appstate.\n\t * Replaces the hash with the new appstate based on replaceHash.\n\t * @param createAppParameters Parameters for creating new appstate\n\t * @param createAppParameters.replaceHash Boolean which determines to replace the hash with the new generated key\n\t * @param createAppParameters.skipMerge Boolean which determines to skip the key user shine through\n\t * @param createAppParameters.viewId Id of the view for which we need to create the app state. This is to create or update view specific appstate\n\t * @returns A promise resolving the stored data or appstate key\n\t */\n\tasync createAppState(createAppParameters?: CreateAppParameters): Promise<void | AppDataInfo> {\n\t\tconst appComponent = this.oAppComponent;\n\t\tif (!appComponent.getEnvironmentCapabilities().getCapabilities().AppState || BusyLocker.isLocked(this)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { skipMerge = false, viewId: stateIdentifier = REPLACE_COMPLETE_APPSTATE } = createAppParameters ?? {},\n\t\t\trootController = appComponent.getRootControl().getController();\n\n\t\tif (!rootController.viewState) {\n\t\t\tthrow new Error(`viewState controller extension not available for controller: ${rootController.getMetadata().getName()}`);\n\t\t}\n\n\t\t// In case, on load of FCL app we have multiple views(LR, OP, sub-OP...) and url has iAppState(1).\n\t\t// The LR view loads with applied iAppState(1) and calls createAppState(example: onSearch event in LR) before OP is loaded.\n\t\t// This creates iAppState(2) before iAppState(1) is applied to OP.\n\t\t// So, we try to wait till the routing is complete.\n\t\tawait rootController.routingIsComplete();\n\n\t\t// Get appState to update\n\t\tlet innerAppState = (await rootController.viewState.retrieveViewState()) as InnerAppData | undefined;\n\t\tinnerAppState = this._getInnerAppStateForView(innerAppState, stateIdentifier);\n\t\tif (skipMerge) {\n\t\t\tinnerAppState = { ...innerAppState, ...{ skipMerge } };\n\t\t}\n\n\t\treturn this._getAppStateInfo(innerAppState, createAppParameters);\n\t}\n\n\t_createNavigationParameters(oAppData: AppData, sNavType: string): NavigationParameter {\n\t\treturn Object.assign({}, oAppData, {\n\t\t\tselectionVariantDefaults: oAppData.oDefaultedSelectionVariant,\n\t\t\tselectionVariant: oAppData.oSelectionVariant,\n\t\t\trequiresStandardVariant: !oAppData.bNavSelVarHasDefaultsOnly,\n\t\t\tnavigationType: sNavType\n\t\t});\n\t}\n\n\t/**\n\t * Sets the RTA (Runtime Adaptation) version activation status for a specific ID.\n\t * @param id The unique identifier.\n\t * @param value The value indicating whether the RTA version was activated.\n\t */\n\tstatic setRTAVersionWasActivated(id: string, value: boolean): void {\n\t\tthis.versionActivationStatus[id] = value;\n\t}\n\n\t/**\n\t * Retrieves the RTA (Runtime Adaptation) version activation status for a specific ID.\n\t * @param id The unique identifier.\n\t * @returns The activation status or undefined if not set.\n\t */\n\tstatic getRTAVersionWasActivated(id: string): boolean | undefined {\n\t\treturn this.versionActivationStatus[id];\n\t}\n\n\t_checkIfLastSeenRecord(view?: View): boolean {\n\t\t//getting the internal model context in order to fetch the technicalkeys of last seen record and close column flag set in the internalrouting for retaining settings in persistence mode\n\t\tconst internalModelContext = view && (view.getBindingContext(\"internal\") as InternalModelContext);\n\t\tif (internalModelContext && internalModelContext.getProperty(\"fclColumnClosed\") === true) {\n\t\t\tconst technicalKeysObject = internalModelContext.getProperty(\"technicalKeysOfLastSeenRecord\");\n\t\t\tconst bindingContext = view?.getBindingContext() as Context;\n\t\t\tconst path = (bindingContext && bindingContext.getPath()) || \"\";\n\t\t\tconst metaModel = bindingContext?.getModel().getMetaModel();\n\t\t\tconst metaPath = metaModel?.getMetaPath(path);\n\t\t\tconst technicalKeys = metaModel?.getObject(`${metaPath}/$Type/$Key`);\n\t\t\tif (technicalKeys) {\n\t\t\t\tfor (const element of technicalKeys) {\n\t\t\t\t\tconst keyValue = bindingContext.getObject()[element];\n\t\t\t\t\tif (keyValue !== technicalKeysObject[element]) {\n\t\t\t\t\t\tinternalModelContext.setProperty(\"fclColumnClosed\", false);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//the record opened is not the last seen one : no need to persist the changes, reset to default instead\n\t\t}\n\t\treturn false;\n\t}\n\n\t_getAppStateData(oAppData: AppData, viewId?: string, navType?: string): Record<string, unknown> | undefined {\n\t\tlet key = \"\",\n\t\t\ti = 0;\n\t\tconst appStateData = navType === NavType.hybrid ? oAppData.iAppState : oAppData;\n\n\t\tif (appStateData?.appState) {\n\t\t\tfor (i; i < Object.keys(appStateData.appState).length; i++) {\n\t\t\t\tif (Object.keys(appStateData.appState)[i] === viewId) {\n\t\t\t\t\tkey = Object.keys(appStateData.appState)[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (appStateData?.appState) {\n\t\t\treturn {\n\t\t\t\t[Object.keys(appStateData.appState)[i]]: appStateData.appState[key] || {}\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Applies an appstate by fetching appdata and passing it to _applyAppstateToPage.\n\t * @param viewId\n\t * @param view\n\t * @returns A promise for async handling\n\t */\n\tasync applyAppState(viewId?: string, view?: View): Promise<void | {}> {\n\t\tif (AppStateHandler.getRTAVersionWasActivated(this.oAppComponent.getId())) {\n\t\t\tAppStateHandler.setRTAVersionWasActivated(this.oAppComponent.getId(), false);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tif (!this.oAppComponent.getEnvironmentCapabilities().getCapabilities().AppState || BusyLocker.isLocked(this, viewId)) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst checkIfLastSeenRecord = this._checkIfLastSeenRecord(view);\n\t\tif (checkIfLastSeenRecord === true) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\t// lock the apply state for the current view\n\t\tBusyLocker.lock(this, viewId);\n\t\t// lock the App State handler, used to avoid a creation of app state during apply\n\t\tBusyLocker.lock(this);\n\t\t// Done for busy indicator\n\t\tBusyLocker.lock(this.oAppComponent.getRootControl());\n\t\tconst oNavigationService = this.oAppComponent.getNavigationService();\n\t\t// TODO oNavigationService.parseNavigation() should return ES6 promise instead jQuery.promise\n\t\treturn toES6Promise<unknown[]>(oNavigationService.parseNavigation())\n\t\t\t.catch(function (aErrorData: unknown[]) {\n\t\t\t\tif (!aErrorData) {\n\t\t\t\t\taErrorData = [];\n\t\t\t\t}\n\t\t\t\tLog.warning(\"APPSTATE: Parse Navigation failed\", aErrorData[0] as string);\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\t/* app data */\n\t\t\t\t\t},\n\t\t\t\t\taErrorData[1],\n\t\t\t\t\taErrorData[2]\n\t\t\t\t];\n\t\t\t})\n\t\t\t.then(async (aResults: unknown[]) => {\n\t\t\t\tLog.info(\"APPSTATE: Parse Navigation done\");\n\n\t\t\t\t// aResults[1] => oStartupParameters (not evaluated)\n\t\t\t\tconst oAppData = (aResults[0] || {}) as AppData,\n\t\t\t\t\tsNavType = (aResults[2] as string) || NavType.initial,\n\t\t\t\t\toRootController = this.oAppComponent.getRootControl().getController();\n\t\t\t\t// apply the appstate depending upon the view (LR/OP)\n\t\t\t\tconst appStateData = this._getAppStateData(oAppData, viewId, sNavType);\n\t\t\t\t// fetch the skipMerge flag from appState for save as tile\n\t\t\t\tconst skipMerge: boolean | undefined = oAppData?.appState?.[SKIP_MERGE_KEY];\n\t\t\t\tthis._mCurrentAppState =\n\t\t\t\t\tsNavType === NavType.iAppState || sNavType === NavType.hybrid ? { ...this._mCurrentAppState, ...appStateData } : {};\n\t\t\t\tlet shouldApplyState = true;\n\n\t\t\t\tif (!oRootController.viewState) {\n\t\t\t\t\tthrow new Error(`viewState extension required for controller ${oRootController.getMetadata().getName()}`);\n\t\t\t\t}\n\t\t\t\tif (oRootController.viewState._isStateEmptyForIAppStateNavType(oAppData, sNavType)) {\n\t\t\t\t\tif (!oRootController.viewState._getInitialStateApplied()) {\n\t\t\t\t\t\toRootController.viewState._setInitialStateApplied();\n\t\t\t\t\t}\n\t\t\t\t\tshouldApplyState = false;\n\t\t\t\t}\n\t\t\t\tconst applyViewState = await oRootController.viewState.applyViewState(\n\t\t\t\t\tthis._mCurrentAppState as Record<string, unknown>,\n\t\t\t\t\tthis._createNavigationParameters(oAppData, sNavType),\n\t\t\t\t\tskipMerge\n\t\t\t\t);\n\t\t\t\tif (!shouldApplyState) {\n\t\t\t\t\treturn {};\n\t\t\t\t} else {\n\t\t\t\t\treturn applyViewState;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function (oError: unknown) {\n\t\t\t\tLog.error(\"appState could not be applied\", oError as string);\n\t\t\t\tthrow oError;\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\t// unlock apply state for the current view\n\t\t\t\tBusyLocker.unlock(this, viewId);\n\t\t\t\t// unlock the app state handler, so that app state creation can happen now.\n\t\t\t\tBusyLocker.unlock(this);\n\t\t\t\t// unlock the RootControl to remove the busy indicator.\n\t\t\t\tBusyLocker.unlock(this.oAppComponent.getRootControl());\n\t\t\t});\n\t}\n\n\t/**\n\t * To check is route is changed by change in the iAPPState.\n\t * @returns `true` if the route has chnaged\n\t */\n\tcheckIfRouteChangedByIApp(): boolean {\n\t\treturn this.bNoRouteChange;\n\t}\n\n\t/**\n\t * Reset the route changed by iAPPState.\n\t */\n\tresetRouteChangedByIApp(): void {\n\t\tif (this.bNoRouteChange) {\n\t\t\tthis.bNoRouteChange = false;\n\t\t}\n\t}\n\n\t// Reset all activation statuses in AppStateHandler.versionActivationStatus to false\n\tstatic resetVersionActivationStatus(): void {\n\t\tfor (const id in this.versionActivationStatus) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.versionActivationStatus, id)) {\n\t\t\t\tthis.versionActivationStatus[id] = false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @global\n */\nexport default AppStateHandler;\n"],"mappings":"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","ignoreList":[]}