{"version":3,"file":"ResourceModel.js","names":["ResourceModel","_dec","defineUI5Class","_class","_UI5ResourceModel","apply","this","arguments","_inheritsLoose","_proto","prototype","getText","textID","parameters","metaPath","resourceKey","resourceBundle","_oResourceBundle","resourceKeyExists","checkIfResourceKeyExists","_checkIfResourceKeyExists","aCustomBundles","bundles","length","i","sValue","hasText","UI5ResourceModel"],"sources":["./ResourceModel.ts"],"sourcesContent":["import type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport UI5ResourceModel from \"sap/ui/model/resource/ResourceModel\";\n\ntype InternalResourceBundle = ResourceBundle & {\n\taCustomBundles: InternalResourceBundle[];\n};\n\n@defineUI5Class(\"sap.fe.core.ResourceModel\")\nclass ResourceModel extends UI5ResourceModel {\n\tprivate _oResourceBundle!: InternalResourceBundle;\n\n\t/**\n\t * Returns text for a given resource key.\n\t * @param textID ID of the Text\n\t * @param parameters Array of parameters that are used to create the text\n\t * @param metaPath Entity set name or action name to overload a text\n\t * @returns Determined text\n\t */\n\tgetText(textID: string, parameters?: unknown[], metaPath?: string): string {\n\t\tlet resourceKey = textID;\n\t\tconst resourceBundle = this._oResourceBundle;\n\n\t\tif (metaPath) {\n\t\t\tconst resourceKeyExists = this.checkIfResourceKeyExists(`${resourceKey}|${metaPath}`);\n\n\t\t\t// if resource key with metapath (i.e. entity set name) for instance specific text overriding is provided by the application\n\t\t\t// then use the same key otherwise use the Framework key\n\t\t\tresourceKey = resourceKeyExists ? `${resourceKey}|${metaPath}` : resourceKey;\n\t\t}\n\n\t\treturn resourceBundle?.getText(resourceKey, parameters, true) || textID;\n\t}\n\n\t/**\n\t * Check if a text exists for a given resource key.\n\t * @param textID ID of the Text\n\t * @returns True in case the text exists\n\t */\n\tcheckIfResourceKeyExists(textID: string): boolean {\n\t\t// There are console errors logged when making calls to getText for keys that are not defined in the resource bundle\n\t\t// for instance keys which are supposed to be provided by the application, e.g, <key>|<entitySet> to override instance specific text\n\t\t// hence check if text exists (using \"hasText\") in the resource bundle before calling \"getText\"\n\n\t\t// \"hasText\" only checks for the key in the immediate resource bundle and not it's custom bundles\n\t\t// hence we need to do this recurrsively to check if the key exists in any of the bundles the forms the FE resource bundle\n\t\treturn this._checkIfResourceKeyExists(textID, this._oResourceBundle.aCustomBundles);\n\t}\n\n\t_checkIfResourceKeyExists(textID: string, bundles?: InternalResourceBundle[]): boolean {\n\t\tif (bundles?.length) {\n\t\t\tfor (let i = bundles.length - 1; i >= 0; i--) {\n\t\t\t\tconst sValue = bundles[i].hasText(textID);\n\t\t\t\t// text found return true\n\t\t\t\tif (sValue) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tthis._checkIfResourceKeyExists(textID, bundles[i].aCustomBundles);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport default ResourceModel;\n"],"mappings":";;;;gWASMA,GAAaC,EADlBC,EAAe,6BAA4BD,EAAAE,EAAA,SAAAC,GAAA,SAAAJ,IAAA,OAAAI,EAAAC,MAAAC,KAAAC,YAAAD,IAAA,CAAAE,EAAAR,EAAAI,GAAA,IAAAK,EAAAT,EAAAU,UAI3CD,EAOAE,QAAA,SAAAA,EAAQC,EAAgBC,EAAwBC,GAC/C,IAAIC,EAAcH,EAClB,MAAMI,EAAiBV,KAAKW,iBAE5B,GAAIH,EAAU,CACb,MAAMI,EAAoBZ,KAAKa,yBAAyB,GAAGJ,KAAeD,KAI1EC,EAAcG,EAAoB,GAAGH,KAAeD,IAAaC,CAClE,CAEA,OAAOC,GAAgBL,QAAQI,EAAaF,EAAY,OAASD,CAClE,EAEAH,EAKAU,yBAAA,SAAAA,EAAyBP,GAOxB,OAAON,KAAKc,0BAA0BR,EAAQN,KAAKW,iBAAiBI,eACrE,EAACZ,EAEDW,0BAAA,SAAAA,EAA0BR,EAAgBU,GACzC,GAAIA,GAASC,OAAQ,CACpB,IAAK,IAAIC,EAAIF,EAAQC,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAC7C,MAAMC,EAASH,EAAQE,GAAGE,QAAQd,GAElC,GAAIa,EAAQ,CACX,OAAO,IACR,CACAnB,KAAKc,0BAA0BR,EAAQU,EAAQE,GAAGH,eACnD,CACD,CACA,OAAO,KACR,EAAC,OAAArB,CAAA,CArD0C,CAChB2B,KAAgBxB,GAAA,OAuD7BH,CAAa","ignoreList":[]}