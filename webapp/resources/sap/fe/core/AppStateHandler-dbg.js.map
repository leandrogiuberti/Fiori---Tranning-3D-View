{"version":3,"names":["NavType","library","SKIP_MERGE_KEY","REPLACE_COMPLETE_APPSTATE","AppStateHandler","_dec","defineUI5Class","_class","_AppStateHandler","_BaseObject","oAppComponent","_this","call","_mCurrentAppState","sId","getId","simultaneousCreateRequest","bNoRouteChange","Log","info","_inheritsLoose","_proto","prototype","_getInnerAppStateForView","innerAppState","stateIdentifier","_addAppStateInHash","appStateKey","appComponent","navigationService","getNavigationService","routerProxy","getRouterProxy","hash","getHash","isStickyMode","ModelHelper","isStickySessionSupported","getMetaModel","newHash","replaceInnerAppStateKey","navToHash","undefined","_createAppStateKey","appStateData","storeInnerAppStateAsync","_getAppStateInfo","createAppParameters","replaceHash","viewId","appState","currentStateToUpdate","deepEqual","oError","error","findAppStateInHash","createAppState","getEnvironmentCapabilities","getCapabilities","AppState","BusyLocker","isLocked","skipMerge","rootController","getRootControl","getController","viewState","Error","getMetadata","getName","routingIsComplete","retrieveViewState","_createNavigationParameters","oAppData","sNavType","Object","assign","selectionVariantDefaults","oDefaultedSelectionVariant","selectionVariant","oSelectionVariant","requiresStandardVariant","bNavSelVarHasDefaultsOnly","navigationType","setRTAVersionWasActivated","id","value","versionActivationStatus","getRTAVersionWasActivated","_checkIfLastSeenRecord","view","internalModelContext","getBindingContext","getProperty","technicalKeysObject","bindingContext","path","getPath","metaModel","getModel","metaPath","getMetaPath","technicalKeys","getObject","element","keyValue","setProperty","_getAppStateData","navType","key","i","hybrid","iAppState","keys","length","applyAppState","Promise","resolve","checkIfLastSeenRecord","lock","oNavigationService","toES6Promise","parseNavigation","catch","aErrorData","warning","then","aResults","initial","oRootController","shouldApplyState","_isStateEmptyForIAppStateNavType","_getInitialStateApplied","_setInitialStateApplied","applyViewState","finally","unlock","checkIfRouteChangedByIApp","resetRouteChangedByIApp","resetVersionActivationStatus","hasOwnProperty","BaseObject"],"sourceRoot":".","sources":["AppStateHandler.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport { defineUI5Class } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { NavigationParameter } from \"sap/fe/core/controllerextensions/ViewState\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport toES6Promise from \"sap/fe/core/helpers/ToES6Promise\";\nimport type { InnerAppData } from \"sap/fe/navigation/NavigationHandler\";\nimport type { SelectionVariant } from \"sap/fe/navigation/SelectionVariant\";\nimport library from \"sap/fe/navigation/library\";\nimport BaseObject from \"sap/ui/base/Object\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport BusyLocker from \"./controllerextensions/BusyLocker\";\nimport ModelHelper from \"./helpers/ModelHelper\";\n\nconst NavType = library.NavType;\ntype AppState = {\n\tskipMerge?: boolean;\n\t[key: string]: unknown;\n};\nexport type AppData = {\n\toDefaultedSelectionVariant: SelectionVariant;\n\toSelectionVariant: SelectionVariant;\n\tbNavSelVarHasDefaultsOnly: boolean;\n\tappState: AppState;\n\tiAppState?: {\n\t\tappState: AppState;\n\t};\n};\nconst SKIP_MERGE_KEY = \"skipMerge\";\nexport type IAppState = {\n\tappState: Record<string, unknown>;\n};\n\nexport type AppDataInfo = {\n\tappStateData: { appState: object | undefined };\n\tappStateKey: string | null;\n};\n\nexport type CreateAppParameters = {\n\treplaceHash?: boolean;\n\tskipMerge?: boolean;\n\tviewId?: string;\n};\n\nexport type VersionActivated = {\n\tversionWasActivated: boolean;\n};\n\nconst REPLACE_COMPLETE_APPSTATE = \"REPLACE_COMPLETE_APPSTATE\";\n\n@defineUI5Class(\"sap.fe.core.AppStateHandler\")\nclass AppStateHandler extends BaseObject {\n\tpublic sId: string;\n\n\tpublic oAppComponent: AppComponent;\n\n\tpublic bNoRouteChange: boolean;\n\n\tprivate _mCurrentAppState?: AppState = {};\n\n\tsimultaneousCreateRequest: Record<string, number>;\n\n\tstatic versionActivationStatus: Record<string, boolean> = {};\n\n\tconstructor(oAppComponent: AppComponent) {\n\t\tsuper();\n\t\tthis.oAppComponent = oAppComponent;\n\t\tthis.sId = `${oAppComponent.getId()}/AppStateHandler`;\n\t\tthis.simultaneousCreateRequest = {};\n\t\tthis.bNoRouteChange = false;\n\t\tLog.info(\"APPSTATE : Appstate handler initialized\");\n\t}\n\n\tgetId(): string {\n\t\treturn this.sId;\n\t}\n\n\t/**\n\t * Get view specific appstate.\n\t * @param innerAppState Overall appstate\n\t * @param stateIdentifier State identifier. Id of the local view\n\t * @returns Inner appstate\n\t */\n\t_getInnerAppStateForView(innerAppState: InnerAppData | undefined, stateIdentifier: string): InnerAppData | undefined {\n\t\tif (stateIdentifier === REPLACE_COMPLETE_APPSTATE || !innerAppState) {\n\t\t\t// overall app state needs to be considered.\n\t\t\treturn innerAppState;\n\t\t}\n\n\t\t// we take the subset of the app state wrt to the local view id.\n\t\treturn {\n\t\t\t[stateIdentifier]: innerAppState[stateIdentifier as keyof typeof innerAppState] || {}\n\t\t};\n\t}\n\n\t/**\n\t * Add appstate in hash.\n\t * @param appStateKey Appstate key\n\t * @param stateIdentifier State identifier. Id of the local view\n\t */\n\t_addAppStateInHash(appStateKey: string, stateIdentifier: string): void {\n\t\tconst appComponent = this.oAppComponent,\n\t\t\tnavigationService = appComponent.getNavigationService(),\n\t\t\trouterProxy = appComponent.getRouterProxy(),\n\t\t\thash = routerProxy.getHash(),\n\t\t\tisStickyMode = ModelHelper.isStickySessionSupported(appComponent.getMetaModel()),\n\t\t\tnewHash = navigationService.replaceInnerAppStateKey(routerProxy.getHash(), appStateKey);\n\n\t\tif (newHash && this.simultaneousCreateRequest[stateIdentifier] === 0 && newHash !== hash) {\n\t\t\trouterProxy.navToHash(newHash, undefined, undefined, undefined, !isStickyMode);\n\t\t\tthis.bNoRouteChange = true;\n\t\t}\n\t\tLog.info(\"APPSTATE: navToHash\");\n\t}\n\n\t/**\n\t * Create Appstate Key.\n\t * @param appStateData Appstate\n\t * @param stateIdentifier State identifier. Id of the local view\n\t * @returns Appstate Key\n\t */\n\tasync _createAppStateKey(appStateData: InnerAppData, stateIdentifier: string): Promise<string> {\n\t\tconst appComponent = this.oAppComponent,\n\t\t\tnavigationService = appComponent.getNavigationService();\n\n\t\tif (this.simultaneousCreateRequest[stateIdentifier]) {\n\t\t\t// any other value\n\t\t\tthis.simultaneousCreateRequest[stateIdentifier]++;\n\t\t} else {\n\t\t\t// 0 or undefined\n\t\t\tthis.simultaneousCreateRequest[stateIdentifier] = 1;\n\t\t}\n\n\t\tconst appStateKey = await navigationService.storeInnerAppStateAsync(appStateData, true, true);\n\n\t\tthis.simultaneousCreateRequest[stateIdentifier]--;\n\n\t\tLog.info(\"APPSTATE: Appstate stored\");\n\t\treturn appStateKey;\n\t}\n\n\t/**\n\t * Creates appstate info.\n\t * @param innerAppState\n\t * @param createAppParameters Parameters for creating new appstate\n\t * @param createAppParameters.replaceHash Boolean which determines to replace the hash with the new generated key\n\t * @param createAppParameters.viewId Id of the view for which we need to create the app state. This is to create or update view specific appstate.\n\t * @returns A promise resolving the stored data or appstate key\n\t */\n\tasync _getAppStateInfo(innerAppState: InnerAppData | undefined, createAppParameters?: CreateAppParameters): Promise<AppDataInfo> {\n\t\tconst appComponent = this.oAppComponent;\n\t\tconst { replaceHash = true, viewId: stateIdentifier = REPLACE_COMPLETE_APPSTATE } = createAppParameters ?? {};\n\n\t\tlet appStateKey: string | null = null;\n\t\tlet appStateData = { appState: this._mCurrentAppState };\n\n\t\tconst currentStateToUpdate = this._getInnerAppStateForView(this._mCurrentAppState, stateIdentifier);\n\t\tif (innerAppState && !deepEqual(currentStateToUpdate, innerAppState)) {\n\t\t\t//\n\t\t\tthis._mCurrentAppState = { ...this._mCurrentAppState, ...(innerAppState as Record<string, unknown>) };\n\t\t\tappStateData = { appState: this._mCurrentAppState };\n\t\t\ttry {\n\t\t\t\tappStateKey = await this._createAppStateKey(appStateData, stateIdentifier);\n\t\t\t\tif (replaceHash === true) {\n\t\t\t\t\tthis._addAppStateInHash(appStateKey, stateIdentifier);\n\t\t\t\t}\n\t\t\t} catch (oError: unknown) {\n\t\t\t\tLog.error(oError as string);\n\t\t\t}\n\t\t} else {\n\t\t\tconst routerProxy = appComponent.getRouterProxy(),\n\t\t\t\thash = routerProxy.getHash();\n\t\t\tappStateKey = routerProxy.findAppStateInHash(hash) as string;\n\t\t}\n\t\treturn {\n\t\t\tappStateData,\n\t\t\tappStateKey\n\t\t};\n\t}\n\n\t/**\n\t * Creates or updates the appstate.\n\t * Replaces the hash with the new appstate based on replaceHash.\n\t * @param createAppParameters Parameters for creating new appstate\n\t * @param createAppParameters.replaceHash Boolean which determines to replace the hash with the new generated key\n\t * @param createAppParameters.skipMerge Boolean which determines to skip the key user shine through\n\t * @param createAppParameters.viewId Id of the view for which we need to create the app state. This is to create or update view specific appstate\n\t * @returns A promise resolving the stored data or appstate key\n\t */\n\tasync createAppState(createAppParameters?: CreateAppParameters): Promise<void | AppDataInfo> {\n\t\tconst appComponent = this.oAppComponent;\n\t\tif (!appComponent.getEnvironmentCapabilities().getCapabilities().AppState || BusyLocker.isLocked(this)) {\n\t\t\treturn;\n\t\t}\n\t\tconst { skipMerge = false, viewId: stateIdentifier = REPLACE_COMPLETE_APPSTATE } = createAppParameters ?? {},\n\t\t\trootController = appComponent.getRootControl().getController();\n\n\t\tif (!rootController.viewState) {\n\t\t\tthrow new Error(`viewState controller extension not available for controller: ${rootController.getMetadata().getName()}`);\n\t\t}\n\n\t\t// In case, on load of FCL app we have multiple views(LR, OP, sub-OP...) and url has iAppState(1).\n\t\t// The LR view loads with applied iAppState(1) and calls createAppState(example: onSearch event in LR) before OP is loaded.\n\t\t// This creates iAppState(2) before iAppState(1) is applied to OP.\n\t\t// So, we try to wait till the routing is complete.\n\t\tawait rootController.routingIsComplete();\n\n\t\t// Get appState to update\n\t\tlet innerAppState = (await rootController.viewState.retrieveViewState()) as InnerAppData | undefined;\n\t\tinnerAppState = this._getInnerAppStateForView(innerAppState, stateIdentifier);\n\t\tif (skipMerge) {\n\t\t\tinnerAppState = { ...innerAppState, ...{ skipMerge } };\n\t\t}\n\n\t\treturn this._getAppStateInfo(innerAppState, createAppParameters);\n\t}\n\n\t_createNavigationParameters(oAppData: AppData, sNavType: string): NavigationParameter {\n\t\treturn Object.assign({}, oAppData, {\n\t\t\tselectionVariantDefaults: oAppData.oDefaultedSelectionVariant,\n\t\t\tselectionVariant: oAppData.oSelectionVariant,\n\t\t\trequiresStandardVariant: !oAppData.bNavSelVarHasDefaultsOnly,\n\t\t\tnavigationType: sNavType\n\t\t});\n\t}\n\n\t/**\n\t * Sets the RTA (Runtime Adaptation) version activation status for a specific ID.\n\t * @param id The unique identifier.\n\t * @param value The value indicating whether the RTA version was activated.\n\t */\n\tstatic setRTAVersionWasActivated(id: string, value: boolean): void {\n\t\tthis.versionActivationStatus[id] = value;\n\t}\n\n\t/**\n\t * Retrieves the RTA (Runtime Adaptation) version activation status for a specific ID.\n\t * @param id The unique identifier.\n\t * @returns The activation status or undefined if not set.\n\t */\n\tstatic getRTAVersionWasActivated(id: string): boolean | undefined {\n\t\treturn this.versionActivationStatus[id];\n\t}\n\n\t_checkIfLastSeenRecord(view?: View): boolean {\n\t\t//getting the internal model context in order to fetch the technicalkeys of last seen record and close column flag set in the internalrouting for retaining settings in persistence mode\n\t\tconst internalModelContext = view && (view.getBindingContext(\"internal\") as InternalModelContext);\n\t\tif (internalModelContext && internalModelContext.getProperty(\"fclColumnClosed\") === true) {\n\t\t\tconst technicalKeysObject = internalModelContext.getProperty(\"technicalKeysOfLastSeenRecord\");\n\t\t\tconst bindingContext = view?.getBindingContext() as Context;\n\t\t\tconst path = (bindingContext && bindingContext.getPath()) || \"\";\n\t\t\tconst metaModel = bindingContext?.getModel().getMetaModel();\n\t\t\tconst metaPath = metaModel?.getMetaPath(path);\n\t\t\tconst technicalKeys = metaModel?.getObject(`${metaPath}/$Type/$Key`);\n\t\t\tif (technicalKeys) {\n\t\t\t\tfor (const element of technicalKeys) {\n\t\t\t\t\tconst keyValue = bindingContext.getObject()[element];\n\t\t\t\t\tif (keyValue !== technicalKeysObject[element]) {\n\t\t\t\t\t\tinternalModelContext.setProperty(\"fclColumnClosed\", false);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t//the record opened is not the last seen one : no need to persist the changes, reset to default instead\n\t\t}\n\t\treturn false;\n\t}\n\n\t_getAppStateData(oAppData: AppData, viewId?: string, navType?: string): Record<string, unknown> | undefined {\n\t\tlet key = \"\",\n\t\t\ti = 0;\n\t\tconst appStateData = navType === NavType.hybrid ? oAppData.iAppState : oAppData;\n\n\t\tif (appStateData?.appState) {\n\t\t\tfor (i; i < Object.keys(appStateData.appState).length; i++) {\n\t\t\t\tif (Object.keys(appStateData.appState)[i] === viewId) {\n\t\t\t\t\tkey = Object.keys(appStateData.appState)[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (appStateData?.appState) {\n\t\t\treturn {\n\t\t\t\t[Object.keys(appStateData.appState)[i]]: appStateData.appState[key] || {}\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Applies an appstate by fetching appdata and passing it to _applyAppstateToPage.\n\t * @param viewId\n\t * @param view\n\t * @returns A promise for async handling\n\t */\n\tasync applyAppState(viewId?: string, view?: View): Promise<void | {}> {\n\t\tif (AppStateHandler.getRTAVersionWasActivated(this.oAppComponent.getId())) {\n\t\t\tAppStateHandler.setRTAVersionWasActivated(this.oAppComponent.getId(), false);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tif (!this.oAppComponent.getEnvironmentCapabilities().getCapabilities().AppState || BusyLocker.isLocked(this, viewId)) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst checkIfLastSeenRecord = this._checkIfLastSeenRecord(view);\n\t\tif (checkIfLastSeenRecord === true) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\t// lock the apply state for the current view\n\t\tBusyLocker.lock(this, viewId);\n\t\t// lock the App State handler, used to avoid a creation of app state during apply\n\t\tBusyLocker.lock(this);\n\t\t// Done for busy indicator\n\t\tBusyLocker.lock(this.oAppComponent.getRootControl());\n\t\tconst oNavigationService = this.oAppComponent.getNavigationService();\n\t\t// TODO oNavigationService.parseNavigation() should return ES6 promise instead jQuery.promise\n\t\treturn toES6Promise<unknown[]>(oNavigationService.parseNavigation())\n\t\t\t.catch(function (aErrorData: unknown[]) {\n\t\t\t\tif (!aErrorData) {\n\t\t\t\t\taErrorData = [];\n\t\t\t\t}\n\t\t\t\tLog.warning(\"APPSTATE: Parse Navigation failed\", aErrorData[0] as string);\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\t/* app data */\n\t\t\t\t\t},\n\t\t\t\t\taErrorData[1],\n\t\t\t\t\taErrorData[2]\n\t\t\t\t];\n\t\t\t})\n\t\t\t.then(async (aResults: unknown[]) => {\n\t\t\t\tLog.info(\"APPSTATE: Parse Navigation done\");\n\n\t\t\t\t// aResults[1] => oStartupParameters (not evaluated)\n\t\t\t\tconst oAppData = (aResults[0] || {}) as AppData,\n\t\t\t\t\tsNavType = (aResults[2] as string) || NavType.initial,\n\t\t\t\t\toRootController = this.oAppComponent.getRootControl().getController();\n\t\t\t\t// apply the appstate depending upon the view (LR/OP)\n\t\t\t\tconst appStateData = this._getAppStateData(oAppData, viewId, sNavType);\n\t\t\t\t// fetch the skipMerge flag from appState for save as tile\n\t\t\t\tconst skipMerge: boolean | undefined = oAppData?.appState?.[SKIP_MERGE_KEY];\n\t\t\t\tthis._mCurrentAppState =\n\t\t\t\t\tsNavType === NavType.iAppState || sNavType === NavType.hybrid ? { ...this._mCurrentAppState, ...appStateData } : {};\n\t\t\t\tlet shouldApplyState = true;\n\n\t\t\t\tif (!oRootController.viewState) {\n\t\t\t\t\tthrow new Error(`viewState extension required for controller ${oRootController.getMetadata().getName()}`);\n\t\t\t\t}\n\t\t\t\tif (oRootController.viewState._isStateEmptyForIAppStateNavType(oAppData, sNavType)) {\n\t\t\t\t\tif (!oRootController.viewState._getInitialStateApplied()) {\n\t\t\t\t\t\toRootController.viewState._setInitialStateApplied();\n\t\t\t\t\t}\n\t\t\t\t\tshouldApplyState = false;\n\t\t\t\t}\n\t\t\t\tconst applyViewState = await oRootController.viewState.applyViewState(\n\t\t\t\t\tthis._mCurrentAppState as Record<string, unknown>,\n\t\t\t\t\tthis._createNavigationParameters(oAppData, sNavType),\n\t\t\t\t\tskipMerge\n\t\t\t\t);\n\t\t\t\tif (!shouldApplyState) {\n\t\t\t\t\treturn {};\n\t\t\t\t} else {\n\t\t\t\t\treturn applyViewState;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function (oError: unknown) {\n\t\t\t\tLog.error(\"appState could not be applied\", oError as string);\n\t\t\t\tthrow oError;\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\t// unlock apply state for the current view\n\t\t\t\tBusyLocker.unlock(this, viewId);\n\t\t\t\t// unlock the app state handler, so that app state creation can happen now.\n\t\t\t\tBusyLocker.unlock(this);\n\t\t\t\t// unlock the RootControl to remove the busy indicator.\n\t\t\t\tBusyLocker.unlock(this.oAppComponent.getRootControl());\n\t\t\t});\n\t}\n\n\t/**\n\t * To check is route is changed by change in the iAPPState.\n\t * @returns `true` if the route has chnaged\n\t */\n\tcheckIfRouteChangedByIApp(): boolean {\n\t\treturn this.bNoRouteChange;\n\t}\n\n\t/**\n\t * Reset the route changed by iAPPState.\n\t */\n\tresetRouteChangedByIApp(): void {\n\t\tif (this.bNoRouteChange) {\n\t\t\tthis.bNoRouteChange = false;\n\t\t}\n\t}\n\n\t// Reset all activation statuses in AppStateHandler.versionActivationStatus to false\n\tstatic resetVersionActivationStatus(): void {\n\t\tfor (const id in this.versionActivationStatus) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(this.versionActivationStatus, id)) {\n\t\t\t\tthis.versionActivationStatus[id] = false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @global\n */\nexport default AppStateHandler;\n"],"mappings":"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","ignoreList":[],"file":"AppStateHandler-dbg.js"}