{"version":3,"file":"RootViewBaseController.js","names":["RootViewBaseController","_dec","defineUI5Class","_dec2","usingExtension","Placeholder","_dec3","ViewState","_class","_class2","_BaseController","_this","_len","arguments","length","args","Array","_key","call","this","_initializerDefineProperty","_descriptor","_descriptor2","bIsComputingTitleHierachy","_numberOfRoutesInProgress","_inheritsLoose","_proto","prototype","onInit","SizeHelper","init","_aHelperModels","getPlaceholder","oPlaceholder","attachRouteMatchers","getAppComponent","getRoutingService","attachAfterRouteMatched","onAfterRouteMatched","onExit","detachAfterRouteMatched","oRouter","undefined","exit","forEach","oModel","destroy","getViewFromContainer","container","result","isA","getComponentInstance","getRootControl","getViewsFromPages","pages","views","page","view","push","getResourceBundle","getOwnerComponent","getModel","getRouter","_createHelperModel","JSONModel","routingIsComplete","async","_routingIsComplete","promise","Promise","resolve","waitForRightMostViewReady","oEvent","reject","aContainers","getParameter","aFEContainers","defaultView","oContainer","oView","oComponentInstance","getController","pageReady","oRightMostFEView","isPageReady","attachEventOnce","Error","restoreFocusFromHistory","history","state","focusInfo","type","table","Element","getElementById","tableId","pos","getRowBinding","getCurrentContexts","findIndex","context","getPath","contextPathFocus","focusRow","controlId","focus","replaceState","Object","assign","event","PromiseKeeper","currentRouteId","getVisibleViews","includes","rootControl","getView","getContent","getAutoFocus","setProperty","appComponent","_scrollTablesToLastNavigatedItems","getEnvironmentCapabilities","getCapabilities","UShell","computeTitleHierarchy","forceFocus","getRouterProxy","isFocusForced","setFocusForced","getParent","onPageReady","getLastHistoryEntry","focusControlId","restoreFocusForCurrentHash","onContainerReady","error","Log","_getTitleHierarchyCache","oTitleHierarchyCache","clearTitleHierarchyCache","path","_computeTitleInfo","title","subtitle","sIntent","description","icon","aParts","split","intent","_formatTitle","displayMode","titleValue","titleDescription","formattedTitle","_fetchTitleValue","model","metaModel","getMetaModel","metaPath","getMetaPath","bindingViewContext","createBindingContext","headerInfoTitleValueAnnotation","getObject","valueExpression","AnnotationHelper","format","$Function","anyObject","Any","any","setModel","setBindingContext","textBinding","getBinding","all","getBindings","map","binding","requestValue","infoTitle","getAny","textExpression","propertyContext","promises","parsedvalueExpression","BindingInfo","parse","promiseForDisplayMode","CommonUtils","computeDisplayMode","valuePath","parts","fnValueFormatter","formatter","valueBinding","bindProperty","$$groupId","initialize","promiseForTitleValue","fnChange","targetValue","getSource","getValue","detachChange","attachChange","parsedTextExpression","textPath","lastIndexOf","slice","fnTextFormatter","promiseForTitleText","targetText","titleInfo","getAppSpecificHash","hashChanger","HashChanger","getInstance","hrefForAppSpecificHash","URI","decode","_getHash","getHash","getTitleInfoFromPath","sPath","oMetaModel","sEntityPath","sTypeName","sAppSpecificHash","then","sTitle","oTitleInfo","_ensureHierarchyElementsAreStrings","aHierarchy","aHierarchyShell","level","oHierarchy","oShellHierarchy","key","String","getTargetOptionsFromHash","sHash","oAppComponent","aRoutes","getManifestEntry","routing","routes","route","oRoute","getRoute","name","match","sTarget","getRouteTargetNames","target","getTarget","_oOptions","getTargetTypeFromHash","_getBrowserTitle","titleInfoHierarchyShell","pageTitleInformation","breadcrumbTexts","firstPart","secondPart","titleInfoHierarchy","pop","toString","trim","join","headerText","_setTitles","appTitle","browserTitle","_setShellMenuTitle","removeEmptyParamFromHash","appSpecificHash","shellServiceHelper","getShellServices","parsedUrl","parseShellHash","params","startsWith","constructShellHash","getBindingContext","currentPage","titleInfoHierarchySeq","manifestAppSettings","appSubTitle","subTitle","appIcon","newPath","_getPageTitleInformation","getRootLevelTitleInformation","pathParts","shift","pathPart","getRouteInfoByHash","parameterPath","isParameterized","hash","endsWith","substring","reverse","setHierarchy","errorMessage","calculateLayout","iNextFCLLevel","sProposedLayout","keepCurrentLayout","onContextBoundToView","oContext","sDeepestPath","getProperty","sViewContextPath","indexOf","displayErrorPage","_errorMessage","_parameters","_FCLLevel","updateUIStateForView","FCLLevel","getInstancedViews","isFclEnabled","sAppTitle","additionalInformation","setTitle","getAppContentContainer","appContentId","config","byId","BaseController","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./RootViewBaseController.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport type FlexibleColumnLayout from \"sap/f/FlexibleColumnLayout\";\nimport { defineUI5Class, usingExtension } from \"sap/fe/base/ClassSupport\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport BaseController from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport { type NavigationToErrorPageResult } from \"sap/fe/core/controllerextensions/MessageHandler\";\nimport Placeholder from \"sap/fe/core/controllerextensions/Placeholder\";\nimport ViewState from \"sap/fe/core/controllerextensions/ViewState\";\nimport { getRouteTargetNames } from \"sap/fe/core/helpers/ManifestHelper\";\nimport PromiseKeeper from \"sap/fe/core/helpers/PromiseKeeper\";\nimport SizeHelper from \"sap/fe/core/helpers/SizeHelper\";\nimport type FclController from \"sap/fe/core/rootView/Fcl.controller\";\nimport type NavContainer from \"sap/m/NavContainer\";\nimport BindingInfo from \"sap/ui/base/BindingInfo\";\nimport type ComponentContainer from \"sap/ui/core/ComponentContainer\";\nimport type Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport HashChanger from \"sap/ui/core/routing/HashChanger\";\nimport type { Route$MatchedEvent } from \"sap/ui/core/routing/Route\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type Context from \"sap/ui/model/Context\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport AnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\nimport type { ODataPropertyBinding$ChangeEvent } from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport type ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport URI from \"sap/ui/thirdparty/URI\";\nimport type { TitleAdditionalInfo } from \"sap/ushell/ui5service/ShellUIService\";\nimport type AppComponent from \"../AppComponent\";\nimport Any from \"../controls/Any\";\n\nexport type TitleInformation = {\n\ttitle?: string;\n\tsubtitle?: string;\n\ticon?: string;\n\tintent?: string;\n\tdescription?: string;\n};\n\ntype TargetOptions = {\n\tname: string;\n\toptions?: {\n\t\tsettings?: {\n\t\t\tcontextPath?: string;\n\t\t\tentitySet?: string;\n\t\t};\n\t};\n};\n\n@defineUI5Class(\"sap.fe.core.rootView.RootViewBaseController\")\nclass RootViewBaseController extends BaseController {\n\t@usingExtension(Placeholder)\n\toPlaceholder!: Placeholder;\n\n\t@usingExtension(ViewState)\n\tviewState!: ViewState;\n\n\tprivate _aHelperModels!: JSONModel[];\n\n\tprivate oRouter?: Router;\n\n\tprivate oTitleHierarchyCache?: Record<string, TitleInformation>;\n\n\tprivate bIsComputingTitleHierachy = false;\n\n\tprivate _routingIsComplete?: PromiseKeeper<void>;\n\n\tprivate _numberOfRoutesInProgress = 0;\n\n\tonInit(): void {\n\t\tSizeHelper.init();\n\n\t\tthis._aHelperModels = [];\n\t}\n\n\tgetPlaceholder(): Placeholder {\n\t\treturn this.oPlaceholder;\n\t}\n\n\tattachRouteMatchers(): void {\n\t\tthis.oPlaceholder.attachRouteMatchers();\n\t\tthis.getAppComponent().getRoutingService().attachAfterRouteMatched({}, this.onAfterRouteMatched, this);\n\t}\n\n\tonExit(): void {\n\t\tthis.getAppComponent().getRoutingService().detachAfterRouteMatched(this.onAfterRouteMatched, this);\n\t\tthis.oRouter = undefined;\n\n\t\tSizeHelper.exit();\n\n\t\t// Destroy all JSON models created dynamically for the views\n\t\tthis._aHelperModels.forEach(function (oModel: JSONModel) {\n\t\t\toModel.destroy();\n\t\t});\n\t}\n\n\tgetViewFromContainer(container: Control): View | undefined {\n\t\tconst result = container.isA<ComponentContainer>(\"sap.ui.core.ComponentContainer\")\n\t\t\t? container.getComponentInstance().getRootControl()\n\t\t\t: container;\n\n\t\treturn result?.isA<View>(\"sap.ui.core.mvc.View\") ? result : undefined;\n\t}\n\n\t/**\n\t * Analyze the pages and return the corresponding views.\n\t * @param pages The pages to be analyzed.\n\t * @returns The views\n\t */\n\tprotected getViewsFromPages(pages: Control[]): View[] {\n\t\tconst views: View[] = [];\n\n\t\tpages.forEach((page) => {\n\t\t\tconst view = this.getViewFromContainer(page);\n\n\t\t\tif (view !== undefined) {\n\t\t\t\tviews.push(view);\n\t\t\t}\n\t\t});\n\n\t\treturn views;\n\t}\n\n\t/**\n\t * Convenience method for getting the resource bundle.\n\t * @public\n\t * @returns The resourceModel of the component\n\t */\n\tgetResourceBundle(): ResourceBundle | Promise<ResourceBundle> {\n\t\treturn (this.getOwnerComponent().getModel(\"i18n\") as ResourceModel).getResourceBundle();\n\t}\n\n\tgetRouter(): Router {\n\t\tif (!this.oRouter) {\n\t\t\tthis.oRouter = this.getAppComponent().getRouter();\n\t\t}\n\n\t\treturn this.oRouter;\n\t}\n\n\t_createHelperModel(): JSONModel {\n\t\t// We keep a reference on the models created dynamically, as they don't get destroyed\n\t\t// automatically when the view is destroyed.\n\t\t// This is done during onExit\n\t\tconst oModel = new JSONModel();\n\t\tthis._aHelperModels.push(oModel);\n\n\t\treturn oModel;\n\t}\n\n\tasync routingIsComplete(): Promise<void> {\n\t\tawait (this._routingIsComplete?.promise || Promise.resolve());\n\t}\n\n\t/**\n\t * Function waiting for the Right most view to be ready.\n\t * @param oEvent Reference an Event parameter coming from routeMatched event\n\t * @returns A promise indicating when the right most view is ready\n\t */\n\tasync waitForRightMostViewReady(oEvent: Route$MatchedEvent): Promise<FEView> {\n\t\treturn new Promise(function (resolve: (value: FEView) => void, reject: (reason?: Error) => void) {\n\t\t\tconst aContainers = oEvent.getParameter(\"views\") ?? [],\n\t\t\t\t// There can also be reuse components in the view, remove them before processing.\n\t\t\t\taFEContainers: FEView[] = [];\n\t\t\tlet defaultView: FEView | undefined;\n\t\t\taContainers.forEach(function (oContainer: View | ComponentContainer | undefined) {\n\t\t\t\tlet oView = oContainer as FEView | undefined;\n\t\t\t\tif (oContainer && (oContainer as ComponentContainer).getComponentInstance) {\n\t\t\t\t\tconst oComponentInstance = (oContainer as ComponentContainer).getComponentInstance();\n\t\t\t\t\toView = oComponentInstance.getRootControl() as FEView;\n\t\t\t\t}\n\t\t\t\tif (oView && oView.getController() && oView.getController().pageReady) {\n\t\t\t\t\taFEContainers.push(oView);\n\t\t\t\t} else if (oView) {\n\t\t\t\t\tdefaultView = oView;\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst oRightMostFEView = aFEContainers[aFEContainers.length - 1];\n\t\t\tif (oRightMostFEView && oRightMostFEView.getController().pageReady.isPageReady()) {\n\t\t\t\tresolve(oRightMostFEView);\n\t\t\t} else if (oRightMostFEView) {\n\t\t\t\toRightMostFEView.getController().pageReady.attachEventOnce(\"pageReady\", function () {\n\t\t\t\t\tresolve(oRightMostFEView);\n\t\t\t\t});\n\t\t\t} else if (defaultView) {\n\t\t\t\tresolve(defaultView);\n\t\t\t} else {\n\t\t\t\treject(new Error(\"No view was found during onAfterRouteMatched\"));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Method to restore the focusInformation from the history Object.\n\t */\n\tprotected restoreFocusFromHistory(): void {\n\t\tswitch (history.state.focusInfo.type) {\n\t\t\tcase \"Row\":\n\t\t\t\tconst table = Element.getElementById(history.state.focusInfo.tableId) as Table;\n\t\t\t\tconst pos = table\n\t\t\t\t\t.getRowBinding()\n\t\t\t\t\t.getCurrentContexts()\n\t\t\t\t\t.findIndex((context) => context.getPath() === history.state.focusInfo.contextPathFocus);\n\t\t\t\tif (pos !== -1) {\n\t\t\t\t\ttable.focusRow(pos);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tElement.getElementById(history.state.focusInfo.controlId)?.focus();\n\t\t}\n\t\t//once applied, the focus info is removed to prevent focusing on it each time the user do a back navigation to this page\n\t\thistory.replaceState(Object.assign(history.state, { focusInfo: null }), \"\");\n\t}\n\n\t/**\n\t * Callback when the navigation is done.\n\t * - update the shell title.\n\t * - update table scroll.\n\t * - call onPageReady on the rightMostView.\n\t * @param event\n\t * @returns A promise for the current navigation\n\t */\n\tasync onAfterRouteMatched(event: Route$MatchedEvent): Promise<FEView | undefined> {\n\t\t// We create a debouncer for '_routingIsComplete' to handler multiple 'onAfterRouteMatched' calls.\n\t\tthis._routingIsComplete = this._routingIsComplete ?? new PromiseKeeper<void>();\n\t\tthis._numberOfRoutesInProgress = ++this._numberOfRoutesInProgress;\n\t\tconst currentRouteId = this._numberOfRoutesInProgress;\n\n\t\ttry {\n\t\t\tconst view = await this.waitForRightMostViewReady(event);\n\n\t\t\tif (view && this.getVisibleViews().includes(view)) {\n\t\t\t\t// The autoFocus is initially disabled on the navContainer or the FCL, so that the focus stays on the Shell menu\n\t\t\t\t// even if the app takes a long time to launch\n\t\t\t\t// The first time the view is displayed, we need to enable the autofocus so that it's managed properly during navigation\n\t\t\t\tconst rootControl = this.getView().getContent()[0];\n\t\t\t\tif (\n\t\t\t\t\trootControl &&\n\t\t\t\t\t(rootControl as FlexibleColumnLayout).getAutoFocus &&\n\t\t\t\t\t!(rootControl as FlexibleColumnLayout).getAutoFocus()\n\t\t\t\t) {\n\t\t\t\t\trootControl.setProperty(\"autoFocus\", true, true); // Do not mark the container as invalid, otherwise it's re-rendered\n\t\t\t\t}\n\n\t\t\t\tconst appComponent = this.getAppComponent();\n\t\t\t\tthis._scrollTablesToLastNavigatedItems();\n\t\t\t\tif (appComponent.getEnvironmentCapabilities().getCapabilities().UShell) {\n\t\t\t\t\tthis.computeTitleHierarchy(view);\n\t\t\t\t}\n\t\t\t\tconst forceFocus = appComponent.getRouterProxy().isFocusForced();\n\t\t\t\tappComponent.getRouterProxy().setFocusForced(false); // reset\n\t\t\t\tif (view.getController() && (view.getParent() as TemplateComponent).onPageReady) {\n\t\t\t\t\t(view.getParent() as TemplateComponent).onPageReady({ forceFocus: forceFocus });\n\t\t\t\t}\n\t\t\t\tif (history.state.focusInfo) {\n\t\t\t\t\tthis.restoreFocusFromHistory();\n\t\t\t\t} else if (appComponent.getRouterProxy().getLastHistoryEntry().focusControlId) {\n\t\t\t\t\t// Try to restore the focus on where it was when we last visited the current hash\n\t\t\t\t\tappComponent.getRouterProxy().restoreFocusForCurrentHash();\n\t\t\t\t}\n\t\t\t\tif (this.onContainerReady) {\n\t\t\t\t\tthis.onContainerReady();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn view;\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"An error occurs while computing the title hierarchy and calling focus method\", error as string);\n\t\t\treturn undefined;\n\t\t} finally {\n\t\t\tif (currentRouteId === this._numberOfRoutesInProgress) {\n\t\t\t\t// We reset the debouncer logic after completion of latest route match.\n\t\t\t\tthis._numberOfRoutesInProgress = 0;\n\t\t\t\tthis._routingIsComplete.resolve();\n\t\t\t\tthis._routingIsComplete = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This function returns the TitleHierarchy cache ( or initializes it if undefined).\n\t * @returns  The TitleHierarchy cache\n\t */\n\t_getTitleHierarchyCache(): Record<string, TitleInformation> {\n\t\tif (!this.oTitleHierarchyCache) {\n\t\t\tthis.oTitleHierarchyCache = {};\n\t\t}\n\t\treturn this.oTitleHierarchyCache;\n\t}\n\n\t/**\n\t * This function clear the TitleHierarchy cache for the given context path.\n\t * @param  path The path of the context to clear the cache for\n\t */\n\tclearTitleHierarchyCache(path: string): void {\n\t\tdelete this._getTitleHierarchyCache()[path];\n\t}\n\n\t/**\n\t * This function returns a titleInfo object.\n\t * @param title The application's title\n\t * @param subtitle The application's subTitle\n\t * @param sIntent The intent path to be redirected to\n\t * @param description The application's description\n\t * @param icon The application's icon\n\t * @returns The title information\n\t */\n\t_computeTitleInfo(title: string, subtitle: string, sIntent: string, description?: string, icon = \"\"): TitleInformation {\n\t\tconst aParts = sIntent.split(\"/\");\n\t\tif (!aParts[aParts.length - 1].includes(\"?\")) {\n\t\t\tsIntent += \"?restoreHistory=true\";\n\t\t} else {\n\t\t\tsIntent += \"&restoreHistory=true\";\n\t\t}\n\t\treturn {\n\t\t\ttitle: title,\n\t\t\tsubtitle: subtitle,\n\t\t\tintent: sIntent,\n\t\t\ticon: icon,\n\t\t\tdescription: description\n\t\t};\n\t}\n\n\t_formatTitle(displayMode: string, titleValue: string, titleDescription: string): string {\n\t\tlet formattedTitle = \"\";\n\t\tswitch (displayMode) {\n\t\t\tcase \"Value\":\n\t\t\t\tformattedTitle = `${titleValue}`;\n\t\t\t\tbreak;\n\t\t\tcase \"ValueDescription\":\n\t\t\t\tformattedTitle = `${titleValue} (${titleDescription})`;\n\t\t\t\tbreak;\n\t\t\tcase \"DescriptionValue\":\n\t\t\t\tformattedTitle = `${titleDescription} (${titleValue})`;\n\t\t\t\tbreak;\n\t\t\tcase \"Description\":\n\t\t\t\tformattedTitle = `${titleDescription}`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\treturn formattedTitle;\n\t}\n\n\t/**\n\t * Fetches the value of the HeaderInfo title for a given path.\n\t * @param path The path to the entity\n\t * @returns A promise containing the formatted title, or an empty string if no HeaderInfo title annotation is available\n\t */\n\tasync _fetchTitleValue(path: string): Promise<string> {\n\t\tconst appComponent = this.getAppComponent(),\n\t\t\tmodel = this.getView().getModel(),\n\t\t\tmetaModel = appComponent.getMetaModel(),\n\t\t\tmetaPath = metaModel.getMetaPath(path),\n\t\t\tbindingViewContext = model.createBindingContext(path),\n\t\t\theaderInfoTitleValueAnnotation = metaModel.getObject(`${metaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value`),\n\t\t\tvalueExpression = AnnotationHelper.format(headerInfoTitleValueAnnotation, { context: metaModel.createBindingContext(\"/\") });\n\t\tif (!valueExpression) {\n\t\t\treturn Promise.resolve(\"\");\n\t\t}\n\t\tif (headerInfoTitleValueAnnotation.$Function === \"odata.concat\") {\n\t\t\tconst anyObject = new Any({ any: valueExpression });\n\t\t\tanyObject.setModel(model);\n\t\t\tanyObject.setBindingContext(bindingViewContext);\n\t\t\tconst textBinding = anyObject.getBinding(\"any\");\n\t\t\tif (textBinding?.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\tawait Promise.all(textBinding.getBindings().map((binding) => binding.requestValue?.()));\n\t\t\t}\n\t\t\tconst infoTitle = anyObject.getAny();\n\t\t\tanyObject.destroy();\n\t\t\treturn Promise.resolve(infoTitle as string);\n\t\t}\n\t\tconst textExpression = AnnotationHelper.format(\n\t\t\t\tmetaModel.getObject(\n\t\t\t\t\t`${metaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@com.sap.vocabularies.Common.v1.Text`\n\t\t\t\t),\n\t\t\t\t{ context: metaModel.createBindingContext(\"/\") }\n\t\t\t),\n\t\t\tpropertyContext = metaModel.getObject(`${metaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@`),\n\t\t\tpromises: Promise<string>[] = [],\n\t\t\tparsedvalueExpression = BindingInfo.parse(valueExpression),\n\t\t\tpromiseForDisplayMode = new Promise(function (resolve: (value: string) => void) {\n\t\t\t\tconst displayMode = CommonUtils.computeDisplayMode(propertyContext);\n\t\t\t\tresolve(displayMode);\n\t\t\t});\n\t\tpromises.push(promiseForDisplayMode);\n\t\tconst valuePath = parsedvalueExpression.parts ? parsedvalueExpression.parts[0].path : parsedvalueExpression.path,\n\t\t\tfnValueFormatter = parsedvalueExpression.formatter,\n\t\t\tvalueBinding = model.bindProperty(valuePath, bindingViewContext, { $$groupId: \"$auto.Heroes\" });\n\t\tvalueBinding.initialize();\n\t\tconst promiseForTitleValue = new Promise(function (resolve: (value: string) => void) {\n\t\t\tconst fnChange = function (event: ODataPropertyBinding$ChangeEvent): void {\n\t\t\t\tconst targetValue = fnValueFormatter ? fnValueFormatter(event.getSource().getValue()) : event.getSource().getValue();\n\n\t\t\t\tvalueBinding.detachChange(fnChange);\n\t\t\t\tresolve(targetValue);\n\t\t\t};\n\t\t\tvalueBinding.attachChange(fnChange);\n\t\t});\n\t\tpromises.push(promiseForTitleValue);\n\n\t\tif (textExpression) {\n\t\t\tconst parsedTextExpression = BindingInfo.parse(textExpression);\n\t\t\tlet textPath = parsedTextExpression.parts ? parsedTextExpression.parts[0].path : parsedTextExpression.path;\n\t\t\ttextPath = valuePath.lastIndexOf(\"/\") > -1 ? `${valuePath.slice(0, valuePath.lastIndexOf(\"/\"))}/${textPath}` : textPath;\n\n\t\t\tconst fnTextFormatter = parsedTextExpression.formatter,\n\t\t\t\ttextBinding = model.bindProperty(textPath, bindingViewContext, { $$groupId: \"$auto.Heroes\" });\n\t\t\ttextBinding.initialize();\n\t\t\tconst promiseForTitleText = new Promise(function (resolve: (description: string) => void) {\n\t\t\t\tconst fnChange = function (event: ODataPropertyBinding$ChangeEvent): void {\n\t\t\t\t\tconst targetText = fnTextFormatter ? fnTextFormatter(event.getSource().getValue()) : event.getSource().getValue();\n\n\t\t\t\t\ttextBinding.detachChange(fnChange);\n\t\t\t\t\tresolve(targetText);\n\t\t\t\t};\n\n\t\t\t\ttextBinding.attachChange(fnChange);\n\t\t\t});\n\t\t\tpromises.push(promiseForTitleText);\n\t\t}\n\t\ttry {\n\t\t\tconst titleInfo: string[] = await Promise.all(promises);\n\t\t\tlet formattedTitle = \"\";\n\t\t\tif (typeof titleInfo !== \"string\") {\n\t\t\t\tformattedTitle = this._formatTitle(titleInfo[0], titleInfo[1], titleInfo[2]);\n\t\t\t}\n\t\t\treturn formattedTitle;\n\t\t} catch (error: unknown) {\n\t\t\tLog.error(\"Error while fetching the title from the header info :\" + error);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Function returning the decoded application-specific hash.\n\t * @returns Decoded application-specific hash\n\t */\n\tgetAppSpecificHash(): string {\n\t\t// HashChanged isShellNavigationHashChanger\n\t\tconst hashChanger = HashChanger.getInstance();\n\t\treturn hashChanger.hrefForAppSpecificHash ? URI.decode(hashChanger.hrefForAppSpecificHash(\"\")) : \"#/\";\n\t}\n\n\t_getHash(): string {\n\t\treturn HashChanger.getInstance().getHash();\n\t}\n\n\t/**\n\t * This function returns titleInformation from a path.\n\t * It updates the cache to store title information if necessary\n\t * @param {*} sPath path of the context to retrieve title information from MetaModel\n\t * @returns {Promise}  oTitleinformation returned as promise\n\t */\n\n\tasync getTitleInfoFromPath(sPath: string): Promise<TitleInformation> {\n\t\tconst oTitleHierarchyCache = this._getTitleHierarchyCache();\n\n\t\tif (oTitleHierarchyCache[sPath]) {\n\t\t\t// The title info is already stored in the cache\n\t\t\treturn Promise.resolve(oTitleHierarchyCache[sPath]);\n\t\t}\n\n\t\tconst oMetaModel = this.getAppComponent().getMetaModel();\n\t\tconst sEntityPath = oMetaModel.getMetaPath(sPath);\n\t\tconst sTypeName = oMetaModel.getObject(`${sEntityPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/TypeName`);\n\t\tconst sAppSpecificHash = this.getAppSpecificHash();\n\t\tconst sIntent = sAppSpecificHash + sPath.slice(1);\n\t\treturn this._fetchTitleValue(sPath).then((sTitle: string) => {\n\t\t\tconst oTitleInfo = this._computeTitleInfo(sTypeName, sTitle, sIntent);\n\t\t\toTitleHierarchyCache[sPath] = oTitleInfo;\n\t\t\treturn oTitleInfo;\n\t\t});\n\t}\n\n\t/**\n\t * Ensure that the ushell service receives all elements\n\t * (title, subtitle, intent, icon) as strings.\n\t *\n\t * Annotation HeaderInfo allows for binding of title and description\n\t * (which are used here as title and subtitle) to any element in the entity\n\t * (such types as Boolean, timestamp, double, and others are possible)\n\t *\n\t * Creates a new hierarchy and converts non-string types to string.\n\t * @param aHierarchy Shell title hierarchy\n\t * @returns Copy of shell title hierarchy containing all elements as strings\n\t */\n\t_ensureHierarchyElementsAreStrings(aHierarchy: TitleInformation[]): object[] {\n\t\tconst aHierarchyShell = [];\n\t\tfor (const level in aHierarchy) {\n\t\t\tconst oHierarchy = aHierarchy[level];\n\t\t\tconst oShellHierarchy: Record<string, string> = {};\n\t\t\tfor (const key in oHierarchy) {\n\t\t\t\toShellHierarchy[key] = (\n\t\t\t\t\ttypeof oHierarchy[key as keyof TitleInformation] !== \"string\"\n\t\t\t\t\t\t? String(oHierarchy[key as keyof TitleInformation])\n\t\t\t\t\t\t: oHierarchy[key as keyof TitleInformation]\n\t\t\t\t) as string;\n\t\t\t}\n\t\t\taHierarchyShell.push(oShellHierarchy);\n\t\t}\n\t\treturn aHierarchyShell;\n\t}\n\n\t/**\n\t * Get target options from the hash.\n\t * @param sHash The hash to get the target options from\n\t * @returns Target options from the corresponding route target\n\t */\n\tgetTargetOptionsFromHash(sHash: string): TargetOptions | undefined {\n\t\tconst oAppComponent = this.getAppComponent();\n\n\t\tconst aRoutes = oAppComponent.getManifestEntry(\"sap.ui5\").routing?.routes ?? [];\n\t\tfor (const route of aRoutes) {\n\t\t\tconst oRoute = oAppComponent.getRouter().getRoute(route.name);\n\t\t\tif (oRoute?.match(sHash)) {\n\t\t\t\tconst sTarget = getRouteTargetNames(route.target)[0];\n\t\t\t\treturn (oAppComponent.getRouter().getTarget(sTarget) as unknown as { _oOptions: TargetOptions })._oOptions;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the target type name from the hash.\n\t * @param sHash The hash to get the target type from\n\t * @returns Target type name from the corresponding route target\n\t */\n\tgetTargetTypeFromHash(sHash: string): string {\n\t\treturn this.getTargetOptionsFromHash(sHash)?.name || \"\";\n\t}\n\n\t/**\n\t * Helper method to determine the format of the browser title based on the current view.\n\t * @param titleInfoHierarchyShell TitleInformation array\n\t * @param pageTitleInformation TitleInformation object\n\t * @returns An object with a header text and an additional context\n\t */\n\t_getBrowserTitle(titleInfoHierarchyShell: TitleInformation[], pageTitleInformation: TitleInformation): { headerText: string } {\n\t\tconst breadcrumbTexts = [];\n\t\tlet firstPart = \"\",\n\t\t\tsecondPart = \"\";\n\n\t\tconst titleInfoHierarchy = [...titleInfoHierarchyShell];\n\t\tif (titleInfoHierarchy.length > 1) {\n\t\t\ttitleInfoHierarchy.pop();\n\t\t\ttitleInfoHierarchy.forEach((titleInfo) => {\n\t\t\t\tif (titleInfo.subtitle) {\n\t\t\t\t\tbreadcrumbTexts.push(titleInfo.subtitle);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (pageTitleInformation.title) {\n\t\t\tbreadcrumbTexts.push(pageTitleInformation.title);\n\t\t}\n\t\tif (pageTitleInformation.description) {\n\t\t\tfirstPart = `${pageTitleInformation.subtitle?.toString().trim()} (${pageTitleInformation.description})`;\n\t\t} else {\n\t\t\tfirstPart = `${pageTitleInformation.subtitle}`;\n\t\t}\n\t\tsecondPart = breadcrumbTexts.join(\" - \");\n\n\t\treturn {\n\t\t\theaderText: secondPart ? `${firstPart} - ${secondPart}` : firstPart\n\t\t};\n\t}\n\n\t/**\n\t * Calculate the browser title and menu title, then trigger the set API of the shell.\n\t * @param appTitle Application title\n\t * @param titleInfoHierarchyShell An object for title information\n\t * @param pageTitleInformation TitleInformation object\n\t */\n\tasync _setTitles(appTitle: string, titleInfoHierarchyShell: TitleInformation[], pageTitleInformation: TitleInformation): Promise<void> {\n\t\t// Get the title of the browser\n\t\tlet browserTitle;\n\t\tconst appComponent = this.getAppComponent(),\n\t\t\ttitle = pageTitleInformation.title ?? \"\";\n\t\tif (titleInfoHierarchyShell.length) {\n\t\t\tbrowserTitle = this._getBrowserTitle(titleInfoHierarchyShell, pageTitleInformation);\n\t\t}\n\t\tawait this._setShellMenuTitle(appComponent, title, appTitle, browserTitle);\n\t}\n\n\tremoveEmptyParamFromHash(appComponent: AppComponent, appSpecificHash: string): string {\n\t\tconst shellServiceHelper = appComponent.getShellServices();\n\t\tconst parsedUrl = shellServiceHelper.parseShellHash(appSpecificHash);\n\t\tfor (const key in parsedUrl?.params) {\n\t\t\tif (!key.startsWith(\"sap-\") && parsedUrl.params[key][0] === \"\") {\n\t\t\t\tdelete parsedUrl.params[key];\n\t\t\t}\n\t\t}\n\t\tif (parsedUrl?.params) {\n\t\t\tdelete parsedUrl.params[\"sap-xapp-state\"];\n\t\t}\n\t\treturn `#${shellServiceHelper.constructShellHash(parsedUrl)}`;\n\t}\n\t/**\n\t * This function updates the shell title after each navigation.\n\t * @param view The current view\n\t * @returns A Promise that is resolved when the menu is filled properly\n\t * @private\n\t */\n\tasync computeTitleHierarchy(view: View): Promise<void> {\n\t\tconst appComponent = this.getAppComponent(),\n\t\t\tcontext = view.getBindingContext(),\n\t\t\tcurrentPage = view.getParent(),\n\t\t\ttitleInfoHierarchySeq: TitleInformation[] = [],\n\t\t\tappSpecificHash = this.getAppSpecificHash(),\n\t\t\tmanifestAppSettings = appComponent.getManifestEntry(\"sap.app\"),\n\t\t\tappTitle = manifestAppSettings.title || \"\",\n\t\t\tappSubTitle = manifestAppSettings.subTitle || \"\",\n\t\t\tappIcon = manifestAppSettings.icon || \"\";\n\t\tlet pageTitleInformation: TitleInformation, newPath: string | undefined;\n\n\t\tif (currentPage && (currentPage as TemplateComponent)._getPageTitleInformation) {\n\t\t\tif (context) {\n\t\t\t\t// If the first page of the application is a LR, use the title and subtitle from the manifest\n\t\t\t\tif (this.getTargetTypeFromHash(\"\") === \"sap.fe.templates.ListReport\") {\n\t\t\t\t\ttitleInfoHierarchySeq.push(\n\t\t\t\t\t\tawait this.getRootLevelTitleInformation(\n\t\t\t\t\t\t\tthis.removeEmptyParamFromHash(appComponent, appSpecificHash),\n\t\t\t\t\t\t\tappTitle,\n\t\t\t\t\t\t\tappSubTitle,\n\t\t\t\t\t\t\tappIcon\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\t// Then manage other pages\n\t\t\t\tnewPath = context.getPath();\n\t\t\t\tconst pathParts = newPath.split(\"/\");\n\t\t\t\tlet path = \"\";\n\n\t\t\t\tpathParts.shift(); // Remove the first segment (empty string) as it has been managed above\n\t\t\t\tpathParts.pop(); // Remove the last segment as it corresponds to the current page and shouldn't appear in the menu\n\n\t\t\t\tfor (const pathPart of pathParts) {\n\t\t\t\t\tpath += `/${pathPart}`;\n\t\t\t\t\t//if the associated target is not declared in the routes, we skip it\n\t\t\t\t\tif (!appComponent.getRouter().getRouteInfoByHash(path)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst metaModel = appComponent.getMetaModel(),\n\t\t\t\t\t\tparameterPath = metaModel.getMetaPath(path),\n\t\t\t\t\t\tisParameterized = metaModel.getObject(`${parameterPath}/@com.sap.vocabularies.Common.v1.ResultContext`);\n\t\t\t\t\tif (!isParameterized) {\n\t\t\t\t\t\ttitleInfoHierarchySeq.push(await this.getTitleInfoFromPath(path));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Current page\n\t\t\tpageTitleInformation = await (currentPage as TemplateComponent)._getPageTitleInformation();\n\t\t\tconst hash = this._getHash();\n\t\t\tconst intent =\n\t\t\t\tappSpecificHash.endsWith(\"/\") && hash.startsWith(\"/\") ? appSpecificHash + hash.substring(1) : appSpecificHash + hash;\n\t\t\tpageTitleInformation = this._computeTitleInfo(\n\t\t\t\tpageTitleInformation.title ?? \"\",\n\t\t\t\tpageTitleInformation.subtitle ?? \"\",\n\t\t\t\tintent,\n\t\t\t\tpageTitleInformation.description\n\t\t\t);\n\n\t\t\tif (context && newPath) {\n\t\t\t\tthis._getTitleHierarchyCache()[newPath] = pageTitleInformation;\n\t\t\t} else if (!this._getTitleHierarchyCache()[appSpecificHash]) {\n\t\t\t\tthis._getTitleHierarchyCache()[appSpecificHash] = pageTitleInformation;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"Title information missing in HeaderInfo\");\n\t\t}\n\t\ttry {\n\t\t\t//We now use directly the hierarchy already sequentially resolved\n\t\t\tconst titleInfoHierarchy = titleInfoHierarchySeq;\n\t\t\t// workaround for shell which is expecting all elements being of type string\n\t\t\tconst titleInfoHierarchyShell = this._ensureHierarchyElementsAreStrings(titleInfoHierarchy);\n\t\t\ttitleInfoHierarchyShell.reverse();\n\t\t\tawait appComponent.getShellServices().setHierarchy(titleInfoHierarchyShell);\n\n\t\t\tawait this._setTitles(appTitle, titleInfoHierarchyShell as unknown as TitleInformation[], pageTitleInformation);\n\t\t\treturn;\n\t\t} catch (errorMessage: unknown) {\n\t\t\tLog.error(errorMessage as string);\n\t\t} finally {\n\t\t\tthis.bIsComputingTitleHierachy = false;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the title information for the root level.\n\t * @param appSpecificHash The application-specific hash\n\t * @param appTitle The application title\n\t * @param appSubTitle The application subtitle\n\t * @param appIcon The application icon\n\t * @returns A Promise containing the title information\n\t */\n\tasync getRootLevelTitleInformation(\n\t\tappSpecificHash: string,\n\t\tappTitle: string,\n\t\tappSubTitle: string,\n\t\tappIcon: string\n\t): Promise<TitleInformation> {\n\t\tconst oTitleHierarchyCache = this._getTitleHierarchyCache();\n\n\t\tif (oTitleHierarchyCache[appSpecificHash]) {\n\t\t\t// The title info is already stored in the cache\n\t\t\treturn Promise.resolve(oTitleHierarchyCache[appSpecificHash]);\n\t\t} else {\n\t\t\treturn Promise.resolve(this._computeTitleInfo(appTitle, appSubTitle, appSpecificHash, undefined, appIcon));\n\t\t}\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tcalculateLayout(iNextFCLLevel: number, sHash: string, sProposedLayout: string | undefined, keepCurrentLayout = false): string {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Callback after a view has been bound to a context.\n\t * @param oContext The context that has been bound to a view\n\t */\n\tonContextBoundToView(oContext: Context | undefined | null): void {\n\t\tif (oContext) {\n\t\t\tconst sDeepestPath = this.getView().getModel(\"internal\").getProperty(\"/deepestPath\"),\n\t\t\t\tsViewContextPath = oContext.getPath();\n\n\t\t\tif (!sDeepestPath || sDeepestPath.indexOf(sViewContextPath) !== 0) {\n\t\t\t\t// There was no previous value for the deepest reached path, or the path\n\t\t\t\t// for the view isn't a subpath of the previous deepest path --> update\n\t\t\t\tthis.getView().getModel(\"internal\").setProperty(\"/deepestPath\", sViewContextPath, undefined, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync displayErrorPage(_errorMessage: string, _parameters: NavigationToErrorPageResult, _FCLLevel = 0): Promise<boolean> {\n\t\t// To be overridden\n\t\treturn Promise.resolve(true);\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tupdateUIStateForView(oView: FEView, FCLLevel: number): void {\n\t\t// To be overriden\n\t}\n\n\tgetInstancedViews(): View[] {\n\t\treturn [];\n\t\t// To be overriden\n\t}\n\n\t/**\n\t * Return all visible views.\n\t * @returns The visible views\n\t */\n\tgetVisibleViews(): View[] {\n\t\treturn [];\n\t\t// To be overriden\n\t}\n\n\t_scrollTablesToLastNavigatedItems(): void {\n\t\t// To be overriden\n\t}\n\n\tisFclEnabled(): this is FclController {\n\t\treturn false;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync _setShellMenuTitle(\n\t\toAppComponent: AppComponent,\n\t\tsTitle: string,\n\t\tsAppTitle: string,\n\t\tadditionalInformation?: TitleAdditionalInfo\n\t): Promise<void> {\n\t\t// To be overriden by FclController\n\t\tawait oAppComponent.getShellServices().setTitle(sTitle, additionalInformation);\n\t}\n\n\tgetAppContentContainer(): NavContainer | FlexibleColumnLayout {\n\t\tconst oAppComponent = this.getAppComponent();\n\t\tconst appContentId = oAppComponent.getManifestEntry(\"sap.ui5\").routing?.config?.controlId ?? \"appContent\";\n\t\treturn this.getView().byId(appContentId) as NavContainer | FlexibleColumnLayout;\n\t}\n}\ninterface RootViewBaseController {\n\tonContainerReady?(): void;\n}\n\nexport default RootViewBaseController;\n"],"mappings":"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","ignoreList":[]}