{"version":3,"file":"DataField.js","names":["isDataFieldForActionAbstract","dataField","hasOwnProperty","_exports","isDataFieldForActionGroup","$Type","isDataFieldForAnnotation","isDataFieldForAction","isDataFieldForIntentBasedNavigation","isDataFieldTypes","isDataField","hasFieldGroupTarget","dataFieldForAnnotation","dataFieldTarget","Target","$target","isAnnotationOfType","hasIdentificationTarget","isAnnotationOfTerm","hasDataPointTarget","visibleExpression","converterContext","not","equal","getExpressionFromAnnotation","annotations","UI","Hidden","undefined","getRelativeModelPathFunction","isDataModelObjectPathForActionWithDialog","dataModelObjectPath","target","targetObject","isActionWithDialog","action","ActionTarget","bCritical","Common","IsActionCritical","parameters","length","getTargetValueOnDataPoint","source","targetValue","isProperty","dataPoint","DataFieldDefault","TargetValue","MaximumValue","toString","isPathAnnotationExpression","isDataPointFromDataFieldDefault","property","isRatingVisualizationFromDataFieldDefault","Visualization","isAProgressTypeFromDataPoint","getSemanticObjectPath","object","Value","SemanticObject","getEntitySetBasedAnnotationPath","fullyQualifiedName","_getNavigationPathPrefix","path","includes","substring","lastIndexOf","_collectAdditionalPropertiesForAnalyticalTable","navigationPathPrefix","tableType","relatedProperties","hiddenAnnotation","hiddenAnnotationPropertyPath","additionalProperties","criticality","Criticality","criticalityPropertyPath","_setRelatedPropertiesAndGetIndex","key","value","displayModeOfPropertyUsedAsDescription","properties","annotationProperty","Object","keys","indexOf","_appendTemplate","exportSettings","template","collectRelatedProperties","ignoreSelf","arguments","addUnitInTemplate","isAnnotatedAsHidden","valueIndex","externalIdPath","getAssociatedExternalIdPropertyPath","externalIdProperty","getAssociatedExternalIdProperty","entityType","getEntityType","aggregationHelper","AggregationHelper","textProperty","getAssociatedTextProperty","textPropertyPath","getAssociatedTextPropertyPath","getConverterContextFor","getContextPath","getDataModelObjectPath","propertyDataModelObjectPath","enhanceDataModelPath","relativePath","getContextRelativeTargetObjectPath","textPropertyDataModelObjectPath","textRelativePath","wrap","textArrangementToBeConsidered","isPropertyGroupable","pathForText","propertyForText","displayMode","getDisplayMode","descriptionIndex","currencyProperty","getAssociatedCurrencyProperty","unitProperty","getAssociatedUnitProperty","currencyOrUoMProperty","currencyOrUnitAnnotation","Measures","ISOCurrency","Unit","timezoneProperty","getAssociatedTimezoneProperty","timezoneAnnotation","Timezone","collectCurrencyOrUnitProperties","collectTimezoneProperties","ValueFormat","collectDataPointProperties","contactProperty","fn","contactPropertyPath","unit","isCurrency","timezone","getDataPointVisualization","dataPointProperty","datapointTarget","dataPointDefaultProperty","dataPointIndex","name","dataPointTargetValue","hasStaticPercentUnit","timezoneOrUoMIndex","currencyOrUnitPropertyPath","getAssociatedCurrencyPropertyPath","getAssociatedUnitPropertyPath","unitOrCurrencyPropertyDataModelObjectPath","unitOrCurrencyRelativePath","currencyOrUoMIndex","scale","collectRelatedPropertiesRecursively","isEmbedded","isStaticallyHidden","isReferencePropertyStaticallyHidden","Data","forEach","innerDataField","dataFieldContact","getDataFieldDataType","oDataField","type","sDataType","$Path"],"sources":["./DataField.ts"],"sourcesContent":["import type { AnnotationTerm, Decimal, PathAnnotationExpression, PrimitiveType, Property } from \"@sap-ux/vocabularies-types\";\nimport type { Contact } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport { CommunicationAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAction,\n\tDataFieldForActionAbstractTypes,\n\tDataFieldForActionGroup,\n\tDataFieldForAnnotation,\n\tDataFieldForIntentBasedNavigation,\n\tDataFieldTypes,\n\tDataPoint,\n\tDataPointType,\n\tDataPointTypeTypes,\n\tFieldGroup,\n\tIdentification,\n\tReferenceFacet\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes, VisualizationType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { equal, getExpressionFromAnnotation, not } from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { TableType } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { ColumnExportSettings } from \"sap/fe/core/converters/controls/Common/table/Columns\";\nimport { AggregationHelper } from \"sap/fe/core/converters/helpers/Aggregation\";\nimport { isAnnotationOfTerm, isAnnotationOfType, isPathAnnotationExpression, isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport { getDisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport {\n\tgetAssociatedCurrencyProperty,\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedExternalIdProperty,\n\tgetAssociatedExternalIdPropertyPath,\n\tgetAssociatedTextProperty,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedTimezoneProperty,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\thasStaticPercentUnit\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, type DataModelObjectPath } from \"../../templating/DataModelPathHelper\";\nimport type { DisplayMode } from \"../../templating/UIFormatters\";\nimport type ConverterContext from \"../ConverterContext\";\nimport { isReferencePropertyStaticallyHidden } from \"../helpers/DataFieldHelper\";\n\nexport type ComplexPropertyInfo = {\n\tproperties: Record<string, { annotationProperty: Property; displayModeOfPropertyUsedAsDescription?: DisplayMode }>;\n\tadditionalProperties: Record<string, Property>;\n\texportSettings: ColumnExportSettings;\n};\n\n/**\n * Identifies if the given dataFieldAbstract that is passed is a \"DataFieldForActionAbstract\".\n * DataFieldForActionAbstract has an inline action defined.\n * @param dataField DataField to be evaluated\n * @returns Validates that dataField is a DataFieldForActionAbstractType\n */\nexport function isDataFieldForActionAbstract(dataField: DataFieldAbstractTypes): dataField is DataFieldForActionAbstractTypes {\n\treturn (dataField as DataFieldForActionAbstractTypes).hasOwnProperty(\"Action\");\n}\n\n/**\n * Identifies if the given dataFieldAbstract that is passed is a \"DataFieldForActionGroup\".\n * @param dataField DataField to be evaluated\n * @returns Validates that dataField is a DataFieldForActionGroup\n */\nexport function isDataFieldForActionGroup(dataField: DataFieldAbstractTypes): dataField is DataFieldForActionGroup {\n\treturn dataField.$Type === UIAnnotationTypes.DataFieldForActionGroup;\n}\n\n/**\n * Identifies if the given dataFieldAbstract that is passed is a \"isDataFieldForAnnotation\".\n * isDataFieldForAnnotation has an inline $Type property that can be used.\n * @param dataField DataField to be evaluated\n * @returns Validates that dataField is a DataFieldForAnnotation\n */\nexport function isDataFieldForAnnotation(\n\tdataField: DataFieldAbstractTypes | DataPointTypeTypes | undefined\n): dataField is DataFieldForAnnotation {\n\treturn dataField?.$Type === UIAnnotationTypes.DataFieldForAnnotation;\n}\n\nexport function isDataFieldForAction(dataField: DataFieldAbstractTypes | undefined): dataField is DataFieldForAction {\n\treturn dataField?.$Type === UIAnnotationTypes.DataFieldForAction;\n}\n\n/**\n * Identifies if the given dataFieldAbstract that is passed is a \"DataFieldForIntentBasedNavigation\".\n * DataFieldForIntentBasedNavigation has an inline $Type property that can be used.\n * @param dataField DataField to be evaluated\n * @returns Validates that dataField is a DataFieldForIntentBasedNavigation\n */\nexport function isDataFieldForIntentBasedNavigation(dataField: DataFieldAbstractTypes): dataField is DataFieldForIntentBasedNavigation {\n\treturn dataField.$Type === UIAnnotationTypes.DataFieldForIntentBasedNavigation;\n}\n\n/**\n * Identifies if the given dataFieldAbstract that is passed is a \"DataFieldTypes\".\n * DataField has a value defined.\n * @param dataField DataField to be evaluated\n * @returns Validate that dataField is a DataFieldTypes\n */\nexport function isDataFieldTypes(dataField: DataFieldAbstractTypes | unknown): dataField is DataFieldTypes {\n\treturn (dataField as DataFieldTypes).hasOwnProperty(\"Value\");\n}\n\n/**\n * Identifies if the given dataFieldAbstract that is passed is a \"DataField\".\n * DataField has a value defined.\n * @param dataField DataField to be evaluated\n * @returns Validate that dataField is a DataField\n */\nexport function isDataField(dataField: DataField | unknown): dataField is DataField {\n\treturn (dataField as DataField)?.hasOwnProperty(\"Value\");\n}\n\n/**\n * Determines if the dataFieldForAnnotation is a field group.\n * @param dataFieldForAnnotation The dataFieldForAnnotation being processed\n * @returns True if the dataFieldForAnnotation is a field group.\n */\nexport function hasFieldGroupTarget(dataFieldForAnnotation: DataFieldForAnnotation | ReferenceFacet): boolean {\n\tconst dataFieldTarget = dataFieldForAnnotation.Target.$target;\n\treturn isAnnotationOfType<FieldGroup>(dataFieldTarget, UIAnnotationTypes.FieldGroupType);\n}\n\n/**\n * Determines if the dataFieldForAnnotation is a field group.\n * @param dataFieldForAnnotation The dataFieldForAnnotation being processed\n * @returns True if the dataFieldForAnnotation is a field group.\n */\nexport function hasIdentificationTarget(dataFieldForAnnotation: DataFieldForAnnotation | ReferenceFacet): boolean {\n\tconst dataFieldTarget = dataFieldForAnnotation.Target.$target;\n\treturn isAnnotationOfTerm<Identification>(dataFieldTarget, UIAnnotationTerms.Identification);\n}\n\n/**\n * Determines if the dataFieldForAnnotation is a data point.\n * @param dataFieldForAnnotation The dataFieldForAnnotation being processed\n * @returns True if the dataFieldForAnnotation is a data point.\n */\nexport function hasDataPointTarget(dataFieldForAnnotation: DataFieldForAnnotation): boolean {\n\tconst dataFieldTarget = dataFieldForAnnotation.Target.$target;\n\treturn isAnnotationOfType<DataPoint>(dataFieldTarget, UIAnnotationTypes.DataPointType);\n}\n\n/**\n * Gets the binding expression for 'visible' setting for the action.\n * @param dataField The data field record which could be DataFieldForAction, DataFieldForIntentBasedNavigation or DataFieldForActionGroup\n * @param converterContext The converter context\n * @returns The binding expression to be used for setting 'visible' based on UI.Hidden configuration\n */\nexport function visibleExpression(\n\tdataField: DataFieldForAction | DataFieldForIntentBasedNavigation | DataFieldForActionGroup | undefined,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): BindingToolkitExpression<boolean> {\n\treturn not(\n\t\tequal(\n\t\t\tgetExpressionFromAnnotation(dataField?.annotations?.UI?.Hidden, [], undefined, converterContext.getRelativeModelPathFunction()),\n\t\t\ttrue\n\t\t)\n\t);\n}\n\n/**\n * Determine if the data model object path targeting a dataField for action opens up a dialog.\n * @param dataModelObjectPath DataModelObjectPath\n * @returns `Dialog` | `None` if a dialog is needed\n */\nexport function isDataModelObjectPathForActionWithDialog(\n\tdataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>\n): \"Dialog\" | \"None\" {\n\tconst target = dataModelObjectPath.targetObject;\n\treturn isActionWithDialog(isDataFieldForAction(target) ? target : undefined);\n}\n\n/**\n * Determine if the dataField for action opens up a dialog.\n * @param dataField DataField for action\n * @returns `Dialog` | `None` if a dialog is needed\n */\nexport function isActionWithDialog(dataField?: DataFieldForAction): \"Dialog\" | \"None\" {\n\tconst action = dataField?.ActionTarget;\n\tif (action) {\n\t\tconst bCritical = action.annotations?.Common?.IsActionCritical;\n\t\tif (action.parameters.length > 1 || bCritical) {\n\t\t\treturn \"Dialog\";\n\t\t} else {\n\t\t\treturn \"None\";\n\t\t}\n\t} else {\n\t\treturn \"None\";\n\t}\n}\n\n/**\n * Retrieves the TargetValue from a DataPoint.\n * @param source The target property or DataPoint\n * @returns The TargetValue as a decimal or a property path\n */\n\nexport function getTargetValueOnDataPoint(source: Property | DataPointType): PathAnnotationExpression<unknown> | string {\n\tlet targetValue: Decimal | undefined | PathAnnotationExpression<unknown> | string;\n\tif (isProperty(source)) {\n\t\tconst dataPoint = (source.annotations?.UI?.DataFieldDefault as DataFieldForAnnotation)?.Target?.$target as DataPointType;\n\t\ttargetValue = dataPoint?.TargetValue ?? dataPoint?.MaximumValue;\n\t} else {\n\t\ttargetValue = source.TargetValue ?? source.MaximumValue;\n\t}\n\tif (typeof targetValue === \"number\") {\n\t\treturn targetValue.toString();\n\t}\n\treturn isPathAnnotationExpression(targetValue) ? targetValue : \"100\";\n}\n\n/**\n * Check if a property uses a DataPoint within a DataFieldDefault.\n * @param property The property to be checked\n * @returns `true` if the referenced property has a DataPoint within the DataFieldDefault, false else\n */\n\nexport const isDataPointFromDataFieldDefault = function (property: Property): boolean {\n\treturn (\n\t\t(property.annotations?.UI?.DataFieldDefault as DataFieldForAnnotation)?.Target?.$target?.$Type === UIAnnotationTypes.DataPointType\n\t);\n};\n\n/**\n * Check if a property uses a default visualization Rating through a DataFieldDefault.\n * @param property The property to be checked\n * @returns `true` if the visualization through a DataFieldDefault is a Rating\n */\n\nexport const isRatingVisualizationFromDataFieldDefault = function (property: Property): boolean {\n\treturn (\n\t\tisDataPointFromDataFieldDefault(property) &&\n\t\t((property.annotations?.UI?.DataFieldDefault as DataFieldForAnnotation)?.Target?.$target as AnnotationTerm<DataPoint>)\n\t\t\t?.Visualization === \"UI.VisualizationType/Rating\"\n\t);\n};\n\n/**\n * Check if a property uses a Progress visualization Rating through a DataFieldDefault or a direct DataPoint.\n * @param property The property to be checked\n * @returns `true` if the visualization is a Progress\n */\n\nexport const isAProgressTypeFromDataPoint = function (property: Property | DataFieldForAnnotation): boolean {\n\tif (isProperty(property) && isDataPointFromDataFieldDefault(property)) {\n\t\tproperty = property.annotations.UI?.DataFieldDefault as DataFieldForAnnotation;\n\t}\n\treturn ((property as DataFieldForAnnotation).Target?.$target as DataPointType)?.Visualization === \"UI.VisualizationType/Progress\";\n};\n\nexport function getSemanticObjectPath(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tobject: DataFieldAbstractTypes | Property\n): string | undefined {\n\tif (typeof object === \"object\") {\n\t\tif (isDataFieldTypes(object) && object.Value?.$target) {\n\t\t\tconst property = object.Value?.$target;\n\t\t\tif (property?.annotations?.Common?.SemanticObject !== undefined) {\n\t\t\t\treturn converterContext.getEntitySetBasedAnnotationPath(property?.fullyQualifiedName);\n\t\t\t}\n\t\t} else if (isProperty(object)) {\n\t\t\tif (object?.annotations?.Common?.SemanticObject !== undefined) {\n\t\t\t\treturn converterContext.getEntitySetBasedAnnotationPath(object?.fullyQualifiedName);\n\t\t\t}\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Returns the navigation path prefix for a property path.\n * @param path The property path For e.g. /EntityType/Navigation/Property\n * @returns The navigation path prefix For e.g. /EntityType/Navigation/\n */\nfunction _getNavigationPathPrefix(path: string | undefined): string {\n\tif (path) {\n\t\treturn path.includes(\"/\") ? path.substring(0, path.lastIndexOf(\"/\") + 1) : \"\";\n\t}\n\treturn \"\";\n}\n\n/**\n * Collect additional properties for the ALP table use-case.\n *\n * For e.g. If UI.Hidden points to a property, include this property in the additionalProperties of ComplexPropertyInfo object.\n * @param target Property or DataField being processed\n * @param navigationPathPrefix Navigation path prefix, applicable in case of navigation properties.\n * @param tableType Table type.\n * @param relatedProperties The related properties identified so far.\n * @returns The related properties identified.\n */\nfunction _collectAdditionalPropertiesForAnalyticalTable(\n\ttarget: PrimitiveType,\n\tnavigationPathPrefix: string,\n\ttableType: TableType,\n\trelatedProperties: ComplexPropertyInfo\n): ComplexPropertyInfo {\n\tif (tableType === \"AnalyticalTable\") {\n\t\tconst hiddenAnnotation = target.annotations?.UI?.Hidden;\n\t\tif (hiddenAnnotation?.path && isProperty(hiddenAnnotation.$target)) {\n\t\t\tconst hiddenAnnotationPropertyPath = navigationPathPrefix + hiddenAnnotation.path;\n\t\t\t// This property should be added to additionalProperties map for the ALP table use-case.\n\t\t\trelatedProperties.additionalProperties[hiddenAnnotationPropertyPath] = hiddenAnnotation.$target;\n\t\t}\n\n\t\tconst criticality = target.Criticality;\n\t\tif (criticality?.path && isProperty(criticality?.$target)) {\n\t\t\tconst criticalityPropertyPath = navigationPathPrefix + criticality.path;\n\t\t\trelatedProperties.additionalProperties[criticalityPropertyPath] = criticality?.$target;\n\t\t}\n\t}\n\treturn relatedProperties;\n}\n\n/**\n * Helper for collectRelatedProperties to push unique related properties.\n * @param relatedProperties\n * @param key The property path\n * @param value The properties object containing value property, description property...\n * @param displayModeOfPropertyUsedAsDescription The display mode if the property is referenced as description on text arrangement\n * @returns Index at which the property is available\n */\nfunction _setRelatedPropertiesAndGetIndex(\n\trelatedProperties: ComplexPropertyInfo,\n\tkey: string,\n\tvalue: Property,\n\tdisplayModeOfPropertyUsedAsDescription?: DisplayMode\n): number {\n\tif (!relatedProperties.properties.hasOwnProperty(key)) {\n\t\trelatedProperties.properties[key] = { annotationProperty: value };\n\t\tif (displayModeOfPropertyUsedAsDescription) {\n\t\t\trelatedProperties.properties[key].displayModeOfPropertyUsedAsDescription = displayModeOfPropertyUsedAsDescription;\n\t\t}\n\t}\n\treturn Object.keys(relatedProperties.properties).indexOf(key);\n}\n\n/**\n * Helper for collectRelatedProperties to append the export settings template with a formatted text.\n * @param relatedProperties\n * @param value Formatted text\n */\nfunction _appendTemplate(relatedProperties: ComplexPropertyInfo, value: string): void {\n\trelatedProperties.exportSettings.template = relatedProperties.exportSettings?.template\n\t\t? `${relatedProperties.exportSettings.template}${value}`\n\t\t: `${value}`;\n}\n\n/**\n * Collect related properties from a property's annotations.\n * @param path The property path\n * @param property The property to be considered\n * @param converterContext The converter context\n * @param ignoreSelf Whether to exclude the same property from the related properties.\n * @param tableType The table type.\n * @param relatedProperties The related properties identified so far.\n * @param addUnitInTemplate True if the unit/currency property needs to be added in the export template\n * @param isAnnotatedAsHidden True if the DataField or the property are statically hidden\n * @returns The related properties identified.\n */\nexport function collectRelatedProperties(\n\tpath: string,\n\tproperty: PrimitiveType,\n\tconverterContext: ConverterContext,\n\tignoreSelf: boolean,\n\ttableType: TableType,\n\trelatedProperties: ComplexPropertyInfo = {\n\t\tproperties: {},\n\t\tadditionalProperties: {},\n\t\texportSettings: {}\n\t},\n\taddUnitInTemplate = false,\n\tisAnnotatedAsHidden = false\n): ComplexPropertyInfo {\n\tif (path && property) {\n\t\tlet valueIndex: number;\n\t\t/* EXTERNALID */\n\t\tconst externalIdPath = getAssociatedExternalIdPropertyPath(property);\n\t\tconst externalIdProperty = getAssociatedExternalIdProperty(property);\n\n\t\tif (isAnnotatedAsHidden) {\n\t\t\t// Collect underlying property\n\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, path, property);\n\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}`);\n\t\t\treturn relatedProperties;\n\t\t}\n\t\tconst navigationPathPrefix = _getNavigationPathPrefix(path);\n\n\t\tconst entityType = converterContext.getEntityType();\n\t\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\n\t\t// Check for Text annotation.\n\t\tconst textProperty = getAssociatedTextProperty(externalIdProperty || property);\n\t\tconst textPropertyPath = getAssociatedTextPropertyPath(externalIdProperty || property);\n\n\t\t// get the DataModelObjectPath for the column\n\t\tconst dataModelObjectPath = converterContext.getConverterContextFor(converterContext.getContextPath()).getDataModelObjectPath();\n\t\tconst propertyDataModelObjectPath = enhanceDataModelPath<Property>(dataModelObjectPath, externalIdPath || path);\n\t\tconst relativePath = getContextRelativeTargetObjectPath(propertyDataModelObjectPath);\n\t\tconst textPropertyDataModelObjectPath = enhanceDataModelPath<Property>(propertyDataModelObjectPath, textPropertyPath);\n\t\tconst textRelativePath = getContextRelativeTargetObjectPath(textPropertyDataModelObjectPath);\n\n\t\tif (relatedProperties.exportSettings?.template) {\n\t\t\t// FieldGroup use-case. Need to add each Field in new line.\n\t\t\t_appendTemplate(relatedProperties, \"\\n\");\n\t\t\trelatedProperties.exportSettings.wrap = true;\n\t\t}\n\n\t\t// The text arrangement will be considered only if the text property is groupable\n\t\tconst textArrangementToBeConsidered =\n\t\t\ttableType === \"AnalyticalTable\" && !!aggregationHelper.isPropertyGroupable(property)\n\t\t\t\t? !!textProperty && !!aggregationHelper.isPropertyGroupable(textProperty)\n\t\t\t\t: true;\n\t\tif (textProperty && textRelativePath) {\n\t\t\tif (textArrangementToBeConsidered) {\n\t\t\t\tconst pathForText = externalIdPath ? externalIdPath : path;\n\t\t\t\tconst propertyForText = externalIdProperty ? externalIdProperty : property;\n\t\t\t\t// Check for Text Arrangement.\n\t\t\t\tconst displayMode = getDisplayMode(propertyForText, propertyDataModelObjectPath);\n\t\t\t\tlet descriptionIndex: number;\n\t\t\t\tswitch (displayMode) {\n\t\t\t\t\tcase \"Description\":\n\t\t\t\t\t\tdescriptionIndex = _setRelatedPropertiesAndGetIndex(\n\t\t\t\t\t\t\trelatedProperties,\n\t\t\t\t\t\t\ttextRelativePath,\n\t\t\t\t\t\t\ttextProperty,\n\t\t\t\t\t\t\t\"Description\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\t_appendTemplate(relatedProperties, `{${descriptionIndex}}`);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"ValueDescription\":\n\t\t\t\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, pathForText, propertyForText);\n\t\t\t\t\t\tdescriptionIndex = _setRelatedPropertiesAndGetIndex(\n\t\t\t\t\t\t\trelatedProperties,\n\t\t\t\t\t\t\ttextRelativePath,\n\t\t\t\t\t\t\ttextProperty,\n\t\t\t\t\t\t\t\"ValueDescription\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}} ({${descriptionIndex}})`);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"DescriptionValue\":\n\t\t\t\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, pathForText, propertyForText);\n\t\t\t\t\t\tdescriptionIndex = _setRelatedPropertiesAndGetIndex(\n\t\t\t\t\t\t\trelatedProperties,\n\t\t\t\t\t\t\ttextRelativePath,\n\t\t\t\t\t\t\ttextProperty,\n\t\t\t\t\t\t\t\"DescriptionValue\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\t_appendTemplate(relatedProperties, `{${descriptionIndex}} ({${valueIndex}})`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, pathForText, propertyForText);\n\t\t\t\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Collect underlying property\n\t\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, path, property);\n\t\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}`);\n\t\t\t}\n\t\t} else {\n\t\t\t// Check for field containing Currency Or Unit Properties or Timezone\n\t\t\tconst currencyProperty = getAssociatedCurrencyProperty(property);\n\t\t\tconst unitProperty = getAssociatedUnitProperty(property);\n\t\t\tconst currencyOrUoMProperty = currencyProperty ?? unitProperty;\n\t\t\tconst currencyOrUnitAnnotation: PathAnnotationExpression<string> =\n\t\t\t\tproperty?.annotations?.Measures?.ISOCurrency || property?.annotations?.Measures?.Unit;\n\t\t\tconst timezoneProperty = getAssociatedTimezoneProperty(property);\n\t\t\tconst timezoneAnnotation = property?.annotations?.Common?.Timezone;\n\n\t\t\tif (currencyOrUoMProperty) {\n\t\t\t\tcollectCurrencyOrUnitProperties(\n\t\t\t\t\trelatedProperties,\n\t\t\t\t\trelativePath ?? path,\n\t\t\t\t\taddUnitInTemplate,\n\t\t\t\t\tpropertyDataModelObjectPath,\n\t\t\t\t\tcurrencyOrUoMProperty,\n\t\t\t\t\tcurrencyProperty\n\t\t\t\t);\n\t\t\t} else if (timezoneProperty && timezoneAnnotation?.$target) {\n\t\t\t\tcollectTimezoneProperties(property, relatedProperties, path, addUnitInTemplate);\n\t\t\t} else if (\n\t\t\t\t(property.Target?.$target?.$Type === UIAnnotationTypes.DataPointType && !property.Target?.$target?.ValueFormat) ||\n\t\t\t\tproperty.annotations?.UI?.DataFieldDefault?.Target?.$target?.$Type === UIAnnotationTypes.DataPointType\n\t\t\t) {\n\t\t\t\tcollectDataPointProperties(property, relatedProperties, relativePath);\n\t\t\t} else if (property.$Type === CommunicationAnnotationTypes.ContactType) {\n\t\t\t\tconst contactProperty = property.fn?.$target;\n\t\t\t\tconst contactPropertyPath = property.fn?.path;\n\t\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(\n\t\t\t\t\trelatedProperties,\n\t\t\t\t\tnavigationPathPrefix ? navigationPathPrefix + contactPropertyPath : contactPropertyPath,\n\t\t\t\t\tcontactProperty\n\t\t\t\t);\n\t\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}`);\n\t\t\t} else if (!ignoreSelf) {\n\t\t\t\t// Collect underlying property\n\t\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, path, property);\n\t\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}`);\n\t\t\t\tif (currencyOrUnitAnnotation) {\n\t\t\t\t\trelatedProperties.exportSettings.unit = `${currencyOrUnitAnnotation}`; // Hard-coded currency/unit\n\t\t\t\t\tif (property?.annotations?.Measures?.ISOCurrency) {\n\t\t\t\t\t\trelatedProperties.exportSettings.isCurrency = true;\n\t\t\t\t\t}\n\t\t\t\t} else if (timezoneAnnotation) {\n\t\t\t\t\trelatedProperties.exportSettings.timezone = `${timezoneAnnotation}`; // Hard-coded timezone\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\trelatedProperties = _collectAdditionalPropertiesForAnalyticalTable(property, navigationPathPrefix, tableType, relatedProperties);\n\t\tif (Object.keys(relatedProperties.additionalProperties).length > 0 && relativePath) {\n\t\t\t// We don't need to consider additionalProperties for the export\n\t\t\trelatedProperties.exportSettings.property = [relativePath];\n\t\t}\n\t\tif (Object.keys(relatedProperties.additionalProperties).length > 0 && Object.keys(relatedProperties.properties).length === 0) {\n\t\t\t// Collect underlying property if not collected already.\n\t\t\t// This is to ensure that additionalProperties are made available only to complex property infos.\n\t\t\tvalueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, path, property);\n\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}`);\n\t\t}\n\t}\n\treturn relatedProperties;\n}\n\n/**\n * Gets the type of Visualization of the DataPoint.\n * @param source Source of the DataPoint.\n * @returns The type of Visualization or undefined if there's none.\n */\nfunction getDataPointVisualization(source: Property | DataPointType): VisualizationType {\n\tlet dataPoint: DataPointType;\n\tif (isProperty(source)) {\n\t\tdataPoint = (source.annotations?.UI?.DataFieldDefault as DataFieldForAnnotation)?.Target?.$target as DataPointType;\n\t} else {\n\t\tdataPoint = source;\n\t}\n\treturn dataPoint.Visualization ?? VisualizationType.Number;\n}\n\n/**\n *\tCollect the related properties from a DataPoint.\n * @param property The property to be considered.\n * @param relatedProperties The related properties identified so far.\n * @param path The property path.\n */\nfunction collectDataPointProperties(property: PrimitiveType, relatedProperties: ComplexPropertyInfo, path: string | undefined): void {\n\t// path must not be undefined, getContextRelativeTargetObjectPath may return undefined\n\tif (path === undefined) {\n\t\treturn;\n\t}\n\tconst dataPointProperty = property.Target?.$target?.Value.$target as Property;\n\tconst datapointTarget = property.Target?.$target;\n\tconst navigationPathPrefix = _getNavigationPathPrefix(path);\n\t// DataPoint use-case using DataFieldDefault.\n\tconst dataPointDefaultProperty = property.annotations?.UI?.DataFieldDefault;\n\tconst valueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, path, dataPointDefaultProperty ? property : dataPointProperty);\n\t// If we have a DataPoint without visualization, or a Number, we don't have a TargetValue/MaximumValue\n\tif (getDataPointVisualization(dataPointDefaultProperty ? property : datapointTarget) === VisualizationType.Number) {\n\t\treturn;\n\t}\n\tconst targetValue = getTargetValueOnDataPoint(dataPointDefaultProperty ? property : datapointTarget);\n\tif (isPathAnnotationExpression(targetValue)) {\n\t\tif (targetValue.$target) {\n\t\t\t//in case it's a dynamic targetValue\n\t\t\tconst dataPointIndex = _setRelatedPropertiesAndGetIndex(\n\t\t\t\trelatedProperties,\n\t\t\t\tnavigationPathPrefix ? navigationPathPrefix + targetValue.$target.name : targetValue.$target.name,\n\t\t\t\ttargetValue.$target\n\t\t\t);\n\t\t\trelatedProperties.exportSettings.dataPointTargetValue = targetValue.path;\n\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}/{${dataPointIndex}}`);\n\t\t}\n\t} else if (hasStaticPercentUnit(dataPointDefaultProperty ? property : dataPointProperty) && isAProgressTypeFromDataPoint(property)) {\n\t\trelatedProperties.exportSettings.unit = \"%\";\n\t} else {\n\t\trelatedProperties.exportSettings.dataPointTargetValue = targetValue;\n\t\t_appendTemplate(relatedProperties, `{${valueIndex}}/${targetValue}`);\n\t}\n}\n\n/**\n *\tCollect the related properties from a property with Timezone.\n * @param property The property to be considered.\n * @param relatedProperties The related properties identified so far.\n * @param path The property path.\n * @param addUnitInTemplate Should we add the unit in the template.\n */\nfunction collectTimezoneProperties(\n\tproperty: PrimitiveType,\n\trelatedProperties: ComplexPropertyInfo,\n\tpath: string,\n\taddUnitInTemplate: boolean\n): void {\n\tconst timezoneAnnotation = property.annotations.Common.Timezone;\n\tconst navigationPathPrefix = _getNavigationPathPrefix(path);\n\tconst valueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, path, property);\n\n\tconst timezoneOrUoMIndex = _setRelatedPropertiesAndGetIndex(\n\t\trelatedProperties,\n\t\tnavigationPathPrefix + timezoneAnnotation.path,\n\t\ttimezoneAnnotation.$target\n\t);\n\tif (addUnitInTemplate) {\n\t\t_appendTemplate(relatedProperties, `{${valueIndex}}  {${timezoneOrUoMIndex}}`);\n\t} else {\n\t\trelatedProperties.exportSettings.timezoneProperty = navigationPathPrefix + timezoneAnnotation.path;\n\t}\n}\n\n/**\n * Collect the related properties from a property with currencies or units.\n * @param relatedProperties The related properties identified so far for the column.\n * @param relativePath The property relative path.\n * @param addUnitInTemplate Specify if the unit should be added in the template.\n * @param propertyDataModelObjectPath The data model object path of the property to be considered.\n * @param currencyOrUoMProperty The currency or unit of measure property linked to the column.\n * @param currencyProperty The currency property linked to the column.\n */\nfunction collectCurrencyOrUnitProperties(\n\trelatedProperties: ComplexPropertyInfo,\n\trelativePath: string,\n\taddUnitInTemplate: boolean,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\tcurrencyOrUoMProperty: Property,\n\tcurrencyProperty?: Property\n): void {\n\tconst property = propertyDataModelObjectPath.targetObject;\n\tif (property) {\n\t\tconst currencyOrUnitPropertyPath = getAssociatedCurrencyPropertyPath(property) || getAssociatedUnitPropertyPath(property);\n\t\tconst unitOrCurrencyPropertyDataModelObjectPath = enhanceDataModelPath<Property>(\n\t\t\tpropertyDataModelObjectPath,\n\t\t\tcurrencyOrUnitPropertyPath\n\t\t);\n\t\tconst unitOrCurrencyRelativePath = getContextRelativeTargetObjectPath(unitOrCurrencyPropertyDataModelObjectPath);\n\t\tconst valueIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, relativePath, property);\n\t\tconst currencyOrUoMIndex = _setRelatedPropertiesAndGetIndex(relatedProperties, unitOrCurrencyRelativePath!, currencyOrUoMProperty);\n\t\tif (addUnitInTemplate) {\n\t\t\t_appendTemplate(relatedProperties, `{${valueIndex}}  {${currencyOrUoMIndex}}`);\n\t\t} else {\n\t\t\trelatedProperties.exportSettings.unitProperty = unitOrCurrencyRelativePath;\n\t\t}\n\t\tif (currencyProperty) {\n\t\t\trelatedProperties.exportSettings.isCurrency = true;\n\t\t}\n\t\trelatedProperties.exportSettings.scale = property.scale;\n\t}\n}\n\n/**\n * Collect properties consumed by a DataField.\n * This is for populating the ComplexPropertyInfos of the table delegate.\n * @param dataField The DataField for which the properties need to be identified.\n * @param converterContext The converter context.\n * @param tableType The table type.\n * @param relatedProperties The properties identified so far.\n * @param isEmbedded True if the DataField is embedded in another annotation (such as FieldGroup).\n * @returns The properties related to the DataField.\n */\nexport function collectRelatedPropertiesRecursively(\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext,\n\ttableType: TableType,\n\trelatedProperties: ComplexPropertyInfo = {\n\t\tproperties: {},\n\t\tadditionalProperties: {},\n\t\texportSettings: {}\n\t},\n\tisEmbedded = false\n): ComplexPropertyInfo {\n\tlet isStaticallyHidden = false;\n\tswitch (dataField?.$Type) {\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tif (dataField.Value) {\n\t\t\t\tconst property = dataField.Value;\n\t\t\t\tisStaticallyHidden = isReferencePropertyStaticallyHidden(dataField);\n\t\t\t\trelatedProperties = collectRelatedProperties(\n\t\t\t\t\tproperty.path,\n\t\t\t\t\tproperty.$target,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tfalse,\n\t\t\t\t\ttableType,\n\t\t\t\t\trelatedProperties,\n\t\t\t\t\tisEmbedded,\n\t\t\t\t\tisStaticallyHidden\n\t\t\t\t);\n\t\t\t\tconst navigationPathPrefix = _getNavigationPathPrefix(property.path);\n\t\t\t\trelatedProperties = _collectAdditionalPropertiesForAnalyticalTable(\n\t\t\t\t\tdataField,\n\t\t\t\t\tnavigationPathPrefix,\n\t\t\t\t\ttableType,\n\t\t\t\t\trelatedProperties\n\t\t\t\t);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tbreak;\n\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\tswitch (dataField.Target?.$target?.$Type) {\n\t\t\t\tcase UIAnnotationTypes.FieldGroupType:\n\t\t\t\t\tdataField.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes) => {\n\t\t\t\t\t\trelatedProperties = collectRelatedPropertiesRecursively(\n\t\t\t\t\t\t\tinnerDataField,\n\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\ttableType,\n\t\t\t\t\t\t\trelatedProperties,\n\t\t\t\t\t\t\ttrue\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase UIAnnotationTypes.DataPointType:\n\t\t\t\t\tisStaticallyHidden = isReferencePropertyStaticallyHidden(dataField);\n\t\t\t\t\trelatedProperties = collectRelatedProperties(\n\t\t\t\t\t\tdataField.Target.$target.Value.path,\n\t\t\t\t\t\tdataField,\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ttableType,\n\t\t\t\t\t\trelatedProperties,\n\t\t\t\t\t\tisEmbedded,\n\t\t\t\t\t\tisStaticallyHidden\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CommunicationAnnotationTypes.ContactType:\n\t\t\t\t\tconst dataFieldContact = dataField.Target.$target as Contact;\n\t\t\t\t\tisStaticallyHidden = isReferencePropertyStaticallyHidden(dataField);\n\t\t\t\t\trelatedProperties = collectRelatedProperties(\n\t\t\t\t\t\tdataField.Target.value,\n\t\t\t\t\t\tdataFieldContact,\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tisStaticallyHidden,\n\t\t\t\t\t\ttableType,\n\t\t\t\t\t\trelatedProperties,\n\t\t\t\t\t\tisEmbedded,\n\t\t\t\t\t\tisStaticallyHidden\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\treturn relatedProperties;\n}\n\nexport const getDataFieldDataType = function (oDataField: DataFieldAbstractTypes | Property): string | undefined {\n\tif (isProperty(oDataField)) {\n\t\treturn oDataField.type;\n\t}\n\tlet sDataType: string | undefined;\n\tswitch (oDataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\tcase UIAnnotationTypes.DataFieldWithActionGroup:\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tsDataType = undefined;\n\t\t\tbreak;\n\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tsDataType = (oDataField as DataField)?.Value?.$target?.type;\n\t\t\tbreak;\n\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\tdefault:\n\t\t\tif (oDataField.Target?.$target?.$Type) {\n\t\t\t\tconst dataFieldTarget = oDataField.Target.$target;\n\t\t\t\tif (dataFieldTarget.$Type === CommunicationAnnotationTypes.ContactType && isPathAnnotationExpression(dataFieldTarget.fn)) {\n\t\t\t\t\tsDataType = dataFieldTarget.fn.$target?.type;\n\t\t\t\t} else if (dataFieldTarget.$Type === UIAnnotationTypes.DataPointType) {\n\t\t\t\t\tsDataType = dataFieldTarget.Value?.$Path?.$Type || dataFieldTarget.Value?.$target?.type;\n\t\t\t\t} else {\n\t\t\t\t\t// e.g. FieldGroup or Chart\n\t\t\t\t\t// FieldGroup Properties have no type, so we define it as a boolean type to prevent exceptions during the calculation of the width\n\t\t\t\t\tsDataType =\n\t\t\t\t\t\toDataField.Target.$target.$Type === \"com.sap.vocabularies.UI.v1.ChartDefinitionType\" ? undefined : \"Edm.Boolean\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsDataType = undefined;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\n\treturn sDataType;\n};\n"],"mappings":"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","ignoreList":[]}