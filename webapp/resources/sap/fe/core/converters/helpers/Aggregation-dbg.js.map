{"version":3,"names":["AggregationHelper","entityType","converterContext","considerOldAnnotations","arguments","length","undefined","_entityType","_converterContext","_oAggregationAnnotationTarget","_determineAggregationAnnotationTarget","isNavigationProperty","isEntityType","isEntitySet","oTargetAggregationAnnotations","annotations","Aggregation","_bApplySupported","ApplySupported","_aGroupableProperties","GroupableProperties","_aAggregatableProperties","AggregatableProperties","oContainerAggregationAnnotation","getEntityContainer","entityProperties","_getEntityProperties","filter","property","Aggregatable","_exports","_proto","prototype","bIsParameterized","getDataModelObjectPath","startingEntitySet","Common","ResultContext","oAggregationAnnotationSource","oDataModelObjectPath","oNavigationPropertyObject","targetObject","oEntityTypeObject","targetEntityType","hasOwnProperty","oEntitySetObject","getEntitySet","getEntityType","isAnalyticsSupported","isPropertyGroupable","some","path","$target","isPropertyAggregatable","aCustomAggregateAnnotations","getAnnotationsByTerm","annotation","name","qualifier","getGroupableProperties","getAggregatableProperties","getAggregatedProperties","getAggregatedProperty","getTransAggregations","aAggregatedPropertyObjects","aggregatedProperty","_getAggregatableAggregates","AggregatableProperty","aAggregatableProperties","find","obj","prop","isProperty","Property","value","getCustomAggregateDefinitions","getAllowedTransformations","Transformations","ApplySupportedDefaults"],"sourceRoot":".","sources":["Aggregation.ts"],"sourcesContent":["import type { AnnotationTerm, EntitySet, EntityType, NavigationProperty, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { MultipleNavigationProperty } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { AggregatablePropertyType, CustomAggregate } from \"@sap-ux/vocabularies-types/vocabularies/Aggregation\";\nimport { AggregationAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Aggregation\";\nimport type {\n\tCollectionAnnotations_Aggregation,\n\tEntityContainerAnnotations_Aggregation,\n\tEntitySetAnnotations_Aggregation,\n\tEntityTypeAnnotations_Aggregation\n} from \"@sap-ux/vocabularies-types/vocabularies/Aggregation_Edm\";\nimport type { AggregatedProperties, AggregatedProperty, AggregatedPropertyType } from \"@sap-ux/vocabularies-types/vocabularies/Analytics\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { isEntitySet, isEntityType, isNavigationProperty, isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type ConverterContext from \"../ConverterContext\";\n\n/**\n * helper class for Aggregation annotations.\n */\nexport class AggregationHelper {\n\t_entityType: EntityType;\n\n\t_converterContext: ConverterContext<PageContextPathTarget>;\n\n\t_bApplySupported: boolean;\n\n\t_aGroupableProperties?: PropertyPath[];\n\n\t_aAggregatableProperties?: AggregatablePropertyType[] | Property[];\n\n\t_oAggregationAnnotationTarget: EntityType | EntitySet | NavigationProperty | undefined;\n\n\toTargetAggregationAnnotations?:\n\t\t| CollectionAnnotations_Aggregation\n\t\t| EntityTypeAnnotations_Aggregation\n\t\t| EntitySetAnnotations_Aggregation;\n\n\toContainerAggregationAnnotation?: EntityContainerAnnotations_Aggregation;\n\n\t/**\n\t * Creates a helper for a specific entity type and a converter context.\n\t * @param entityType The EntityType\n\t * @param converterContext The ConverterContext\n\t * @param [considerOldAnnotations] The flag to indicate whether or not to consider old annotations\n\t */\n\tconstructor(entityType: EntityType, converterContext: ConverterContext<PageContextPathTarget>, considerOldAnnotations = false) {\n\t\t//considerOldAnnotations will be true and sent only for chart\n\t\tthis._entityType = entityType;\n\t\tthis._converterContext = converterContext;\n\n\t\tthis._oAggregationAnnotationTarget = this._determineAggregationAnnotationTarget();\n\t\tif (\n\t\t\tisNavigationProperty(this._oAggregationAnnotationTarget) ||\n\t\t\tisEntityType(this._oAggregationAnnotationTarget) ||\n\t\t\tisEntitySet(this._oAggregationAnnotationTarget)\n\t\t) {\n\t\t\tthis.oTargetAggregationAnnotations = this._oAggregationAnnotationTarget.annotations.Aggregation;\n\t\t}\n\t\tthis._bApplySupported = this.oTargetAggregationAnnotations?.ApplySupported ? true : false;\n\n\t\tif (this._bApplySupported) {\n\t\t\tthis._aGroupableProperties = this.oTargetAggregationAnnotations?.ApplySupported?.GroupableProperties as PropertyPath[];\n\t\t\tthis._aAggregatableProperties = this.oTargetAggregationAnnotations?.ApplySupported?.AggregatableProperties;\n\n\t\t\tthis.oContainerAggregationAnnotation = converterContext.getEntityContainer().annotations\n\t\t\t\t.Aggregation as EntityContainerAnnotations_Aggregation;\n\t\t}\n\t\tif (!this._aAggregatableProperties && considerOldAnnotations) {\n\t\t\tconst entityProperties = this._getEntityProperties();\n\t\t\tthis._aAggregatableProperties = entityProperties?.filter((property) => {\n\t\t\t\treturn property.annotations?.Aggregation?.Aggregatable;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Determines the most appropriate target for the aggregation annotations.\n\t * @returns  EntityType, EntitySet or NavigationProperty where aggregation annotations should be read from.\n\t */\n\tprivate _determineAggregationAnnotationTarget(): EntityType | EntitySet | NavigationProperty | undefined {\n\t\tconst bIsParameterized = this._converterContext.getDataModelObjectPath()?.startingEntitySet?.entityType?.annotations?.Common\n\t\t\t?.ResultContext\n\t\t\t? true\n\t\t\t: false;\n\t\tlet oAggregationAnnotationSource: EntityType | EntitySet | NavigationProperty | undefined;\n\n\t\t// find ApplySupported\n\t\tif (bIsParameterized) {\n\t\t\t// if this is a parameterized view then applysupported can be found at either the navProp pointing to the result set or entityType.\n\t\t\t// If applySupported is present at both the navProp and the entityType then navProp is more specific so take annotations from there\n\t\t\t// targetObject in the converter context for a parameterized view is the navigation property pointing to th result set\n\t\t\tconst oDataModelObjectPath = this._converterContext.getDataModelObjectPath();\n\t\t\tconst oNavigationPropertyObject = oDataModelObjectPath?.targetObject as MultipleNavigationProperty;\n\t\t\tconst oEntityTypeObject = oDataModelObjectPath?.targetEntityType;\n\t\t\tif (oNavigationPropertyObject?.annotations?.Aggregation?.hasOwnProperty(\"ApplySupported\")) {\n\t\t\t\toAggregationAnnotationSource = oNavigationPropertyObject;\n\t\t\t} else if (oEntityTypeObject?.annotations?.Aggregation?.ApplySupported) {\n\t\t\t\toAggregationAnnotationSource = oEntityTypeObject;\n\t\t\t}\n\t\t} else {\n\t\t\t// For the time being, we ignore annotations at the container level, until the vocabulary is stabilized\n\t\t\tconst oEntitySetObject = this._converterContext.getEntitySet();\n\t\t\tif (isEntitySet(oEntitySetObject) && oEntitySetObject.annotations.Aggregation?.ApplySupported) {\n\t\t\t\toAggregationAnnotationSource = oEntitySetObject;\n\t\t\t} else {\n\t\t\t\toAggregationAnnotationSource = this._converterContext.getEntityType();\n\t\t\t}\n\t\t}\n\t\treturn oAggregationAnnotationSource;\n\t}\n\n\t/**\n\t * Checks if the entity supports analytical queries.\n\t * @returns `true` if analytical queries are supported, false otherwise.\n\t */\n\tpublic isAnalyticsSupported(): boolean {\n\t\treturn this._bApplySupported;\n\t}\n\n\t/**\n\t * Checks if a property is groupable.\n\t * @param property The property to check\n\t * @returns `undefined` if the entity doesn't support analytical queries, true or false otherwise\n\t */\n\tpublic isPropertyGroupable(property: Property): boolean | undefined {\n\t\tif (!this._bApplySupported) {\n\t\t\treturn undefined;\n\t\t} else if (!this._aGroupableProperties || this._aGroupableProperties.length === 0) {\n\t\t\t// No groupableProperties --> all properties are groupable\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn this._aGroupableProperties.some((path) => path.$target === property);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a property is aggregatable.\n\t * @param property The property to check\n\t * @returns `undefined` if the entity doesn't support analytical queries, true or false otherwise\n\t */\n\tpublic isPropertyAggregatable(property: Property): boolean | undefined {\n\t\tif (!this._bApplySupported) {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\t// Get the custom aggregates\n\t\t\tconst aCustomAggregateAnnotations: CustomAggregate[] = this._converterContext.getAnnotationsByTerm(\n\t\t\t\t\"Aggregation\",\n\t\t\t\tAggregationAnnotationTerms.CustomAggregate,\n\t\t\t\t[this._oAggregationAnnotationTarget]\n\t\t\t);\n\n\t\t\t// Check if a custom aggregate has a qualifier that corresponds to the property name\n\t\t\treturn aCustomAggregateAnnotations.some((annotation) => {\n\t\t\t\treturn property.name === annotation.qualifier;\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic getGroupableProperties(): PropertyPath[] | undefined {\n\t\treturn this._aGroupableProperties;\n\t}\n\n\tpublic getAggregatableProperties(): AggregatablePropertyType[] | Property[] | undefined {\n\t\treturn this._aAggregatableProperties;\n\t}\n\n\tpublic getEntityType(): EntityType {\n\t\treturn this._entityType;\n\t}\n\n\t/**\n\t * Returns AggregatedProperties or AggregatedProperty based on param Term.\n\t * The Term here indicates if the AggregatedProperty should be retrieved or the deprecated AggregatedProperties.\n\t * @returns Annotations The appropriate annotations based on the given Term.\n\t */\n\tpublic getAggregatedProperties(): AggregatedProperties[] {\n\t\treturn this._converterContext.getAnnotationsByTerm(\"Analytics\", \"com.sap.vocabularies.Analytics.v1.AggregatedProperties\", [\n\t\t\tthis._converterContext.getEntityContainer(),\n\t\t\tthis._converterContext.getEntityType()\n\t\t]);\n\t}\n\n\tpublic getAggregatedProperty(): AggregatedProperty[] {\n\t\treturn this._converterContext.getAnnotationsByTerm(\"Analytics\", \"com.sap.vocabularies.Analytics.v1.AggregatedProperty\", [\n\t\t\tthis._converterContext.getEntityContainer(),\n\t\t\tthis._converterContext.getEntityType()\n\t\t]);\n\t}\n\n\t// retirve all transformation aggregates by prioritizing AggregatedProperty over AggregatedProperties objects\n\tpublic getTransAggregations(): AggregatedProperty[] {\n\t\tlet aAggregatedPropertyObjects = this.getAggregatedProperty();\n\t\tif (!aAggregatedPropertyObjects || aAggregatedPropertyObjects.length === 0) {\n\t\t\taAggregatedPropertyObjects = this.getAggregatedProperties()[0] as unknown as AggregatedProperty[];\n\t\t}\n\t\treturn aAggregatedPropertyObjects?.filter((aggregatedProperty: AggregatedPropertyType) => {\n\t\t\tif (this._getAggregatableAggregates(aggregatedProperty.AggregatableProperty)) {\n\t\t\t\treturn aggregatedProperty;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Check if each transformation is aggregatable.\n\t * @param property The property to check\n\t * @returns 'aggregatedProperty'\n\t */\n\n\tprivate _getAggregatableAggregates(\n\t\tproperty: PropertyPath | AnnotationTerm<CustomAggregate>\n\t): AggregatablePropertyType | Property | undefined {\n\t\tconst aAggregatableProperties = this.getAggregatableProperties() || [];\n\t\treturn aAggregatableProperties.find(function (obj: AggregatablePropertyType | Property) {\n\t\t\tconst prop = (property as AnnotationTerm<CustomAggregate>).qualifier\n\t\t\t\t? (property as AnnotationTerm<CustomAggregate>).qualifier\n\t\t\t\t: (property as PropertyPath).$target?.name;\n\t\t\tif (isProperty(obj)) {\n\t\t\t\treturn obj?.name === prop;\n\t\t\t} else if (obj?.Property?.value) {\n\t\t\t\treturn obj.Property.value === prop;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getEntityProperties(): Property[] | undefined {\n\t\tlet entityProperties;\n\t\tif (isEntitySet(this._oAggregationAnnotationTarget)) {\n\t\t\tentityProperties = this._oAggregationAnnotationTarget?.entityType?.entityProperties;\n\t\t} else if (isEntityType(this._oAggregationAnnotationTarget)) {\n\t\t\tentityProperties = this._oAggregationAnnotationTarget?.entityProperties;\n\t\t}\n\t\treturn entityProperties;\n\t}\n\n\t/**\n\t * Returns the list of custom aggregate definitions for the entity type.\n\t * @returns A map (propertyName --> array of context-defining property names) for each custom aggregate corresponding to a property. The array of\n\t * context-defining property names is empty if the custom aggregate doesn't have any context-defining property.\n\t */\n\tpublic getCustomAggregateDefinitions(): CustomAggregate[] {\n\t\t// Get the custom aggregates\n\t\tconst aCustomAggregateAnnotations: CustomAggregate[] = this._converterContext.getAnnotationsByTerm(\n\t\t\t\"Aggregation\",\n\t\t\tAggregationAnnotationTerms.CustomAggregate,\n\t\t\t[this._oAggregationAnnotationTarget]\n\t\t);\n\t\treturn aCustomAggregateAnnotations;\n\t}\n\n\t/**\n\t * Returns the list of allowed transformations in the $apply.\n\t * First look at the current EntitySet, then look at the default values provided at the container level.\n\t * @returns The list of transformations, or undefined if no list is found\n\t */\n\tpublic getAllowedTransformations(): String[] | undefined {\n\t\treturn (\n\t\t\t(this.oTargetAggregationAnnotations?.ApplySupported?.Transformations as String[]) ||\n\t\t\t(this.oContainerAggregationAnnotation?.ApplySupportedDefaults?.Transformations as String[])\n\t\t);\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"Aggregation-dbg.js"}