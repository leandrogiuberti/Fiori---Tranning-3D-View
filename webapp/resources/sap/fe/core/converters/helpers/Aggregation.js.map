{"version":3,"file":"Aggregation.js","names":["AggregationHelper","entityType","converterContext","considerOldAnnotations","arguments","length","undefined","this","_entityType","_converterContext","_oAggregationAnnotationTarget","_determineAggregationAnnotationTarget","isNavigationProperty","isEntityType","isEntitySet","oTargetAggregationAnnotations","annotations","Aggregation","_bApplySupported","ApplySupported","_aGroupableProperties","GroupableProperties","_aAggregatableProperties","AggregatableProperties","oContainerAggregationAnnotation","getEntityContainer","entityProperties","_getEntityProperties","filter","property","Aggregatable","_exports","_proto","prototype","bIsParameterized","getDataModelObjectPath","startingEntitySet","Common","ResultContext","oAggregationAnnotationSource","oDataModelObjectPath","oNavigationPropertyObject","targetObject","oEntityTypeObject","targetEntityType","hasOwnProperty","oEntitySetObject","getEntitySet","getEntityType","isAnalyticsSupported","isPropertyGroupable","some","path","$target","isPropertyAggregatable","aCustomAggregateAnnotations","getAnnotationsByTerm","annotation","name","qualifier","getGroupableProperties","getAggregatableProperties","getAggregatedProperties","getAggregatedProperty","getTransAggregations","aAggregatedPropertyObjects","aggregatedProperty","_getAggregatableAggregates","AggregatableProperty","aAggregatableProperties","find","obj","prop","isProperty","Property","value","getCustomAggregateDefinitions","getAllowedTransformations","Transformations","ApplySupportedDefaults"],"sources":["./Aggregation.ts"],"sourcesContent":["import type { AnnotationTerm, EntitySet, EntityType, NavigationProperty, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { MultipleNavigationProperty } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { AggregatablePropertyType, CustomAggregate } from \"@sap-ux/vocabularies-types/vocabularies/Aggregation\";\nimport { AggregationAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Aggregation\";\nimport type {\n\tCollectionAnnotations_Aggregation,\n\tEntityContainerAnnotations_Aggregation,\n\tEntitySetAnnotations_Aggregation,\n\tEntityTypeAnnotations_Aggregation\n} from \"@sap-ux/vocabularies-types/vocabularies/Aggregation_Edm\";\nimport type { AggregatedProperties, AggregatedProperty, AggregatedPropertyType } from \"@sap-ux/vocabularies-types/vocabularies/Analytics\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { isEntitySet, isEntityType, isNavigationProperty, isProperty } from \"sap/fe/core/helpers/TypeGuards\";\nimport type ConverterContext from \"../ConverterContext\";\n\n/**\n * helper class for Aggregation annotations.\n */\nexport class AggregationHelper {\n\t_entityType: EntityType;\n\n\t_converterContext: ConverterContext<PageContextPathTarget>;\n\n\t_bApplySupported: boolean;\n\n\t_aGroupableProperties?: PropertyPath[];\n\n\t_aAggregatableProperties?: AggregatablePropertyType[] | Property[];\n\n\t_oAggregationAnnotationTarget: EntityType | EntitySet | NavigationProperty | undefined;\n\n\toTargetAggregationAnnotations?:\n\t\t| CollectionAnnotations_Aggregation\n\t\t| EntityTypeAnnotations_Aggregation\n\t\t| EntitySetAnnotations_Aggregation;\n\n\toContainerAggregationAnnotation?: EntityContainerAnnotations_Aggregation;\n\n\t/**\n\t * Creates a helper for a specific entity type and a converter context.\n\t * @param entityType The EntityType\n\t * @param converterContext The ConverterContext\n\t * @param [considerOldAnnotations] The flag to indicate whether or not to consider old annotations\n\t */\n\tconstructor(entityType: EntityType, converterContext: ConverterContext<PageContextPathTarget>, considerOldAnnotations = false) {\n\t\t//considerOldAnnotations will be true and sent only for chart\n\t\tthis._entityType = entityType;\n\t\tthis._converterContext = converterContext;\n\n\t\tthis._oAggregationAnnotationTarget = this._determineAggregationAnnotationTarget();\n\t\tif (\n\t\t\tisNavigationProperty(this._oAggregationAnnotationTarget) ||\n\t\t\tisEntityType(this._oAggregationAnnotationTarget) ||\n\t\t\tisEntitySet(this._oAggregationAnnotationTarget)\n\t\t) {\n\t\t\tthis.oTargetAggregationAnnotations = this._oAggregationAnnotationTarget.annotations.Aggregation;\n\t\t}\n\t\tthis._bApplySupported = this.oTargetAggregationAnnotations?.ApplySupported ? true : false;\n\n\t\tif (this._bApplySupported) {\n\t\t\tthis._aGroupableProperties = this.oTargetAggregationAnnotations?.ApplySupported?.GroupableProperties as PropertyPath[];\n\t\t\tthis._aAggregatableProperties = this.oTargetAggregationAnnotations?.ApplySupported?.AggregatableProperties;\n\n\t\t\tthis.oContainerAggregationAnnotation = converterContext.getEntityContainer().annotations\n\t\t\t\t.Aggregation as EntityContainerAnnotations_Aggregation;\n\t\t}\n\t\tif (!this._aAggregatableProperties && considerOldAnnotations) {\n\t\t\tconst entityProperties = this._getEntityProperties();\n\t\t\tthis._aAggregatableProperties = entityProperties?.filter((property) => {\n\t\t\t\treturn property.annotations?.Aggregation?.Aggregatable;\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Determines the most appropriate target for the aggregation annotations.\n\t * @returns  EntityType, EntitySet or NavigationProperty where aggregation annotations should be read from.\n\t */\n\tprivate _determineAggregationAnnotationTarget(): EntityType | EntitySet | NavigationProperty | undefined {\n\t\tconst bIsParameterized = this._converterContext.getDataModelObjectPath()?.startingEntitySet?.entityType?.annotations?.Common\n\t\t\t?.ResultContext\n\t\t\t? true\n\t\t\t: false;\n\t\tlet oAggregationAnnotationSource: EntityType | EntitySet | NavigationProperty | undefined;\n\n\t\t// find ApplySupported\n\t\tif (bIsParameterized) {\n\t\t\t// if this is a parameterized view then applysupported can be found at either the navProp pointing to the result set or entityType.\n\t\t\t// If applySupported is present at both the navProp and the entityType then navProp is more specific so take annotations from there\n\t\t\t// targetObject in the converter context for a parameterized view is the navigation property pointing to th result set\n\t\t\tconst oDataModelObjectPath = this._converterContext.getDataModelObjectPath();\n\t\t\tconst oNavigationPropertyObject = oDataModelObjectPath?.targetObject as MultipleNavigationProperty;\n\t\t\tconst oEntityTypeObject = oDataModelObjectPath?.targetEntityType;\n\t\t\tif (oNavigationPropertyObject?.annotations?.Aggregation?.hasOwnProperty(\"ApplySupported\")) {\n\t\t\t\toAggregationAnnotationSource = oNavigationPropertyObject;\n\t\t\t} else if (oEntityTypeObject?.annotations?.Aggregation?.ApplySupported) {\n\t\t\t\toAggregationAnnotationSource = oEntityTypeObject;\n\t\t\t}\n\t\t} else {\n\t\t\t// For the time being, we ignore annotations at the container level, until the vocabulary is stabilized\n\t\t\tconst oEntitySetObject = this._converterContext.getEntitySet();\n\t\t\tif (isEntitySet(oEntitySetObject) && oEntitySetObject.annotations.Aggregation?.ApplySupported) {\n\t\t\t\toAggregationAnnotationSource = oEntitySetObject;\n\t\t\t} else {\n\t\t\t\toAggregationAnnotationSource = this._converterContext.getEntityType();\n\t\t\t}\n\t\t}\n\t\treturn oAggregationAnnotationSource;\n\t}\n\n\t/**\n\t * Checks if the entity supports analytical queries.\n\t * @returns `true` if analytical queries are supported, false otherwise.\n\t */\n\tpublic isAnalyticsSupported(): boolean {\n\t\treturn this._bApplySupported;\n\t}\n\n\t/**\n\t * Checks if a property is groupable.\n\t * @param property The property to check\n\t * @returns `undefined` if the entity doesn't support analytical queries, true or false otherwise\n\t */\n\tpublic isPropertyGroupable(property: Property): boolean | undefined {\n\t\tif (!this._bApplySupported) {\n\t\t\treturn undefined;\n\t\t} else if (!this._aGroupableProperties || this._aGroupableProperties.length === 0) {\n\t\t\t// No groupableProperties --> all properties are groupable\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn this._aGroupableProperties.some((path) => path.$target === property);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if a property is aggregatable.\n\t * @param property The property to check\n\t * @returns `undefined` if the entity doesn't support analytical queries, true or false otherwise\n\t */\n\tpublic isPropertyAggregatable(property: Property): boolean | undefined {\n\t\tif (!this._bApplySupported) {\n\t\t\treturn undefined;\n\t\t} else {\n\t\t\t// Get the custom aggregates\n\t\t\tconst aCustomAggregateAnnotations: CustomAggregate[] = this._converterContext.getAnnotationsByTerm(\n\t\t\t\t\"Aggregation\",\n\t\t\t\tAggregationAnnotationTerms.CustomAggregate,\n\t\t\t\t[this._oAggregationAnnotationTarget]\n\t\t\t);\n\n\t\t\t// Check if a custom aggregate has a qualifier that corresponds to the property name\n\t\t\treturn aCustomAggregateAnnotations.some((annotation) => {\n\t\t\t\treturn property.name === annotation.qualifier;\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic getGroupableProperties(): PropertyPath[] | undefined {\n\t\treturn this._aGroupableProperties;\n\t}\n\n\tpublic getAggregatableProperties(): AggregatablePropertyType[] | Property[] | undefined {\n\t\treturn this._aAggregatableProperties;\n\t}\n\n\tpublic getEntityType(): EntityType {\n\t\treturn this._entityType;\n\t}\n\n\t/**\n\t * Returns AggregatedProperties or AggregatedProperty based on param Term.\n\t * The Term here indicates if the AggregatedProperty should be retrieved or the deprecated AggregatedProperties.\n\t * @returns Annotations The appropriate annotations based on the given Term.\n\t */\n\tpublic getAggregatedProperties(): AggregatedProperties[] {\n\t\treturn this._converterContext.getAnnotationsByTerm(\"Analytics\", \"com.sap.vocabularies.Analytics.v1.AggregatedProperties\", [\n\t\t\tthis._converterContext.getEntityContainer(),\n\t\t\tthis._converterContext.getEntityType()\n\t\t]);\n\t}\n\n\tpublic getAggregatedProperty(): AggregatedProperty[] {\n\t\treturn this._converterContext.getAnnotationsByTerm(\"Analytics\", \"com.sap.vocabularies.Analytics.v1.AggregatedProperty\", [\n\t\t\tthis._converterContext.getEntityContainer(),\n\t\t\tthis._converterContext.getEntityType()\n\t\t]);\n\t}\n\n\t// retirve all transformation aggregates by prioritizing AggregatedProperty over AggregatedProperties objects\n\tpublic getTransAggregations(): AggregatedProperty[] {\n\t\tlet aAggregatedPropertyObjects = this.getAggregatedProperty();\n\t\tif (!aAggregatedPropertyObjects || aAggregatedPropertyObjects.length === 0) {\n\t\t\taAggregatedPropertyObjects = this.getAggregatedProperties()[0] as unknown as AggregatedProperty[];\n\t\t}\n\t\treturn aAggregatedPropertyObjects?.filter((aggregatedProperty: AggregatedPropertyType) => {\n\t\t\tif (this._getAggregatableAggregates(aggregatedProperty.AggregatableProperty)) {\n\t\t\t\treturn aggregatedProperty;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Check if each transformation is aggregatable.\n\t * @param property The property to check\n\t * @returns 'aggregatedProperty'\n\t */\n\n\tprivate _getAggregatableAggregates(\n\t\tproperty: PropertyPath | AnnotationTerm<CustomAggregate>\n\t): AggregatablePropertyType | Property | undefined {\n\t\tconst aAggregatableProperties = this.getAggregatableProperties() || [];\n\t\treturn aAggregatableProperties.find(function (obj: AggregatablePropertyType | Property) {\n\t\t\tconst prop = (property as AnnotationTerm<CustomAggregate>).qualifier\n\t\t\t\t? (property as AnnotationTerm<CustomAggregate>).qualifier\n\t\t\t\t: (property as PropertyPath).$target?.name;\n\t\t\tif (isProperty(obj)) {\n\t\t\t\treturn obj?.name === prop;\n\t\t\t} else if (obj?.Property?.value) {\n\t\t\t\treturn obj.Property.value === prop;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getEntityProperties(): Property[] | undefined {\n\t\tlet entityProperties;\n\t\tif (isEntitySet(this._oAggregationAnnotationTarget)) {\n\t\t\tentityProperties = this._oAggregationAnnotationTarget?.entityType?.entityProperties;\n\t\t} else if (isEntityType(this._oAggregationAnnotationTarget)) {\n\t\t\tentityProperties = this._oAggregationAnnotationTarget?.entityProperties;\n\t\t}\n\t\treturn entityProperties;\n\t}\n\n\t/**\n\t * Returns the list of custom aggregate definitions for the entity type.\n\t * @returns A map (propertyName --> array of context-defining property names) for each custom aggregate corresponding to a property. The array of\n\t * context-defining property names is empty if the custom aggregate doesn't have any context-defining property.\n\t */\n\tpublic getCustomAggregateDefinitions(): CustomAggregate[] {\n\t\t// Get the custom aggregates\n\t\tconst aCustomAggregateAnnotations: CustomAggregate[] = this._converterContext.getAnnotationsByTerm(\n\t\t\t\"Aggregation\",\n\t\t\tAggregationAnnotationTerms.CustomAggregate,\n\t\t\t[this._oAggregationAnnotationTarget]\n\t\t);\n\t\treturn aCustomAggregateAnnotations;\n\t}\n\n\t/**\n\t * Returns the list of allowed transformations in the $apply.\n\t * First look at the current EntitySet, then look at the default values provided at the container level.\n\t * @returns The list of transformations, or undefined if no list is found\n\t */\n\tpublic getAllowedTransformations(): String[] | undefined {\n\t\treturn (\n\t\t\t(this.oTargetAggregationAnnotations?.ApplySupported?.Transformations as String[]) ||\n\t\t\t(this.oContainerAggregationAnnotation?.ApplySupportedDefaults?.Transformations as String[])\n\t\t);\n\t}\n}\n"],"mappings":";;;;4KAeA,IAGaA,EAAiB,WA0B7B,SAAAA,EAAYC,EAAwBC,GAA2F,IAAhCC,EAAsBC,UAAAC,OAAA,GAAAD,UAAA,KAAAE,UAAAF,UAAA,GAAG,MAEvHG,KAAKC,YAAcP,EACnBM,KAAKE,kBAAoBP,EAEzBK,KAAKG,8BAAgCH,KAAKI,wCAC1C,GACCC,EAAqBL,KAAKG,gCAC1BG,EAAaN,KAAKG,gCAClBI,EAAYP,KAAKG,+BAChB,CACDH,KAAKQ,8BAAgCR,KAAKG,8BAA8BM,YAAYC,WACrF,CACAV,KAAKW,iBAAmBX,KAAKQ,+BAA+BI,eAAiB,KAAO,MAEpF,GAAIZ,KAAKW,iBAAkB,CAC1BX,KAAKa,sBAAwBb,KAAKQ,+BAA+BI,gBAAgBE,oBACjFd,KAAKe,yBAA2Bf,KAAKQ,+BAA+BI,gBAAgBI,uBAEpFhB,KAAKiB,gCAAkCtB,EAAiBuB,qBAAqBT,YAC3EC,WACH,CACA,IAAKV,KAAKe,0BAA4BnB,EAAwB,CAC7D,MAAMuB,EAAmBnB,KAAKoB,uBAC9BpB,KAAKe,yBAA2BI,GAAkBE,OAAQC,GAClDA,EAASb,aAAaC,aAAaa,aAE5C,CACD,CAEAC,EAAA/B,oBAAA,IAAAgC,EAAAhC,EAAAiC,UAAAD,EAIQrB,sCAAR,SAAQA,IACP,MAAMuB,EAAmB3B,KAAKE,kBAAkB0B,0BAA0BC,mBAAmBnC,YAAYe,aAAaqB,QACnHC,cACA,KACA,MACH,IAAIC,EAGJ,GAAIL,EAAkB,CAIrB,MAAMM,EAAuBjC,KAAKE,kBAAkB0B,yBACpD,MAAMM,EAA4BD,GAAsBE,aACxD,MAAMC,EAAoBH,GAAsBI,iBAChD,GAAIH,GAA2BzB,aAAaC,aAAa4B,eAAe,kBAAmB,CAC1FN,EAA+BE,CAChC,MAAO,GAAIE,GAAmB3B,aAAaC,aAAaE,eAAgB,CACvEoB,EAA+BI,CAChC,CACD,KAAO,CAEN,MAAMG,EAAmBvC,KAAKE,kBAAkBsC,eAChD,GAAIjC,EAAYgC,IAAqBA,EAAiB9B,YAAYC,aAAaE,eAAgB,CAC9FoB,EAA+BO,CAChC,KAAO,CACNP,EAA+BhC,KAAKE,kBAAkBuC,eACvD,CACD,CACA,OAAOT,CACR,EAEAP,EAIOiB,qBAAP,SAAOA,IACN,OAAO1C,KAAKW,gBACb,EAEAc,EAKOkB,oBAAP,SAAOA,EAAoBrB,GAC1B,IAAKtB,KAAKW,iBAAkB,CAC3B,OAAOZ,SACR,MAAO,IAAKC,KAAKa,uBAAyBb,KAAKa,sBAAsBf,SAAW,EAAG,CAElF,OAAO,IACR,KAAO,CACN,OAAOE,KAAKa,sBAAsB+B,KAAMC,GAASA,EAAKC,UAAYxB,EACnE,CACD,EAEAG,EAKOsB,uBAAP,SAAOA,EAAuBzB,GAC7B,IAAKtB,KAAKW,iBAAkB,CAC3B,OAAOZ,SACR,KAAO,CAEN,MAAMiD,EAAiDhD,KAAKE,kBAAkB+C,qBAC7E,cAAa,2CAEb,CAACjD,KAAKG,gCAIP,OAAO6C,EAA4BJ,KAAMM,GACjC5B,EAAS6B,OAASD,EAAWE,UAEtC,CACD,EAAC3B,EAEM4B,uBAAP,SAAOA,IACN,OAAOrD,KAAKa,qBACb,EAACY,EAEM6B,0BAAP,SAAOA,IACN,OAAOtD,KAAKe,wBACb,EAACU,EAEMgB,cAAP,SAAOA,IACN,OAAOzC,KAAKC,WACb,EAEAwB,EAKO8B,wBAAP,SAAOA,IACN,OAAOvD,KAAKE,kBAAkB+C,qBAAqB,YAAa,yDAA0D,CACzHjD,KAAKE,kBAAkBgB,qBACvBlB,KAAKE,kBAAkBuC,iBAEzB,EAAChB,EAEM+B,sBAAP,SAAOA,IACN,OAAOxD,KAAKE,kBAAkB+C,qBAAqB,YAAa,uDAAwD,CACvHjD,KAAKE,kBAAkBgB,qBACvBlB,KAAKE,kBAAkBuC,iBAEzB,EAEAhB,EACOgC,qBAAP,SAAOA,IACN,IAAIC,EAA6B1D,KAAKwD,wBACtC,IAAKE,GAA8BA,EAA2B5D,SAAW,EAAG,CAC3E4D,EAA6B1D,KAAKuD,0BAA0B,EAC7D,CACA,OAAOG,GAA4BrC,OAAQsC,IAC1C,GAAI3D,KAAK4D,2BAA2BD,EAAmBE,sBAAuB,CAC7E,OAAOF,CACR,GAEF,EAEAlC,EAMQmC,2BAAR,SAAQA,EACPtC,GAEA,MAAMwC,EAA0B9D,KAAKsD,6BAA+B,GACpE,OAAOQ,EAAwBC,KAAK,SAAUC,GAC7C,MAAMC,EAAQ3C,EAA6C8B,UACvD9B,EAA6C8B,UAC7C9B,EAA0BwB,SAASK,KACvC,GAAIe,EAAWF,GAAM,CACpB,OAAOA,GAAKb,OAASc,CACtB,MAAO,GAAID,GAAKG,UAAUC,MAAO,CAChC,OAAOJ,EAAIG,SAASC,QAAUH,CAC/B,CACD,EACD,EAACxC,EAEOL,qBAAR,SAAQA,IACP,IAAID,EACJ,GAAIZ,EAAYP,KAAKG,+BAAgC,CACpDgB,EAAmBnB,KAAKG,+BAA+BT,YAAYyB,gBACpE,MAAO,GAAIb,EAAaN,KAAKG,+BAAgC,CAC5DgB,EAAmBnB,KAAKG,+BAA+BgB,gBACxD,CACA,OAAOA,CACR,EAEAM,EAKO4C,8BAAP,SAAOA,IAEN,MAAMrB,EAAiDhD,KAAKE,kBAAkB+C,qBAC7E,cAAa,2CAEb,CAACjD,KAAKG,gCAEP,OAAO6C,CACR,EAEAvB,EAKO6C,0BAAP,SAAOA,IACN,OACEtE,KAAKQ,+BAA+BI,gBAAgB2D,iBACpDvE,KAAKiB,iCAAiCuD,wBAAwBD,eAEjE,EAAC,OAAA9E,CAAA,CAhP4B,GAgP5B+B,EAAA/B,oBAAA,OAAA+B,CAAA","ignoreList":[]}