{"version":3,"file":"InsightsHelpers.js","names":["getInsightsVisibility","cardType","converterContext","visualizationPath","standardActionsContext","tableManifestConfig","isResponsiveTable","isMultiEntity","getManifestWrapper","hasMultipleEntitySets","isMultipleVisualizations","hasMultipleVisualizations","viewConfig","getViewConfiguration","isMultiTabs","undefined","paths","length","templateBindingExpression","getTemplateType","TemplateType","ListReport","vizPathConfiguration","getManifestControlConfiguration","enableAddCardToInsights","tableSettings","tableManifestConfiguration","type","and","constant","equal","pathInModel","_exports","getInsightsEnablement"],"sources":["./InsightsHelpers.ts"],"sourcesContent":["import { and, constant, equal, pathInModel, type BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type ConverterContext from \"../ConverterContext\";\nimport type { ChartManifestConfiguration, TableManifestConfiguration } from \"../ManifestSettings\";\nimport { TemplateType } from \"../ManifestSettings\";\nimport type { StandardActionsContext } from \"../controls/Common/table/StandardActions\";\n\n/**\n * Gets the boolean value for the 'visible' property of the 'AddCardToInsights' action.\n * @param cardType\n * @param converterContext\n * @param visualizationPath\n * @param standardActionsContext\n * @returns Boolean value for the 'visible' property of the 'AddCardToInsights' action.\n */\nexport function getInsightsVisibility(\n\tcardType: \"Analytical\" | \"Table\",\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tvisualizationPath: string,\n\tstandardActionsContext?: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tlet tableManifestConfig, isResponsiveTable;\n\n\tconst isMultiEntity = converterContext.getManifestWrapper().hasMultipleEntitySets();\n\tconst isMultipleVisualizations = converterContext.getManifestWrapper().hasMultipleVisualizations();\n\tconst viewConfig = converterContext.getManifestWrapper().getViewConfiguration();\n\tconst isMultiTabs = viewConfig !== undefined && viewConfig.paths.length > 1 ? true : false;\n\tconst templateBindingExpression = converterContext.getTemplateType() === TemplateType.ListReport;\n\tconst vizPathConfiguration = converterContext.getManifestControlConfiguration<TableManifestConfiguration | ChartManifestConfiguration>(\n\t\tvisualizationPath\n\t);\n\tconst enableAddCardToInsights =\n\t\tcardType === \"Analytical\"\n\t\t\t? (vizPathConfiguration as ChartManifestConfiguration)?.enableAddCardToInsights ?? true\n\t\t\t: (vizPathConfiguration as TableManifestConfiguration)?.tableSettings?.enableAddCardToInsights ?? true;\n\n\tif (cardType === \"Table\") {\n\t\ttableManifestConfig = standardActionsContext?.tableManifestConfiguration;\n\t\tisResponsiveTable = tableManifestConfig?.type === \"ResponsiveTable\";\n\t}\n\n\treturn and(\n\t\tconstant(enableAddCardToInsights),\n\t\tconstant(templateBindingExpression),\n\t\tconstant(!isMultiEntity),\n\t\tconstant(!isMultiTabs),\n\t\tconstant(cardType === \"Table\" ? (isResponsiveTable ?? false) && !isMultipleVisualizations : true),\n\t\tequal(pathInModel(\"isInsightsSupported\", \"pageInternal\"), true)\n\t);\n}\n\nexport function getInsightsEnablement(): BindingToolkitExpression<boolean> {\n\treturn equal(pathInModel(\"isInsightsEnabled\", \"internal\"), true);\n}\n"],"mappings":";;;;2LAeO,SAASA,EACfC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAqBC,EAEzB,MAAMC,EAAgBL,EAAiBM,qBAAqBC,wBAC5D,MAAMC,EAA2BR,EAAiBM,qBAAqBG,4BACvE,MAAMC,EAAaV,EAAiBM,qBAAqBK,uBACzD,MAAMC,EAAcF,IAAeG,WAAaH,EAAWI,MAAMC,OAAS,EAAI,KAAO,MACrF,MAAMC,EAA4BhB,EAAiBiB,oBAAsBC,EAAaC,WACtF,MAAMC,EAAuBpB,EAAiBqB,gCAC7CpB,GAED,MAAMqB,EACLvB,IAAa,aACTqB,GAAqDE,yBAA2B,KAChFF,GAAqDG,eAAeD,yBAA2B,KAEpG,GAAIvB,IAAa,QAAS,CACzBI,EAAsBD,GAAwBsB,2BAC9CpB,EAAoBD,GAAqBsB,OAAS,iBACnD,CAEA,OAAOC,EACNC,EAASL,GACTK,EAASX,GACTW,GAAUtB,GACVsB,GAAUf,GACVe,EAAS5B,IAAa,SAAWK,GAAqB,SAAWI,EAA2B,MAC5FoB,EAAMC,EAAY,sBAAuB,gBAAiB,MAE5D,CAACC,EAAAhC,wBAEM,SAASiC,IACf,OAAOH,EAAMC,EAAY,oBAAqB,YAAa,KAC5D,CAACC,EAAAC,wBAAA,OAAAD,CAAA","ignoreList":[]}