{"version":3,"file":"FormMenuActions.js","names":["ActionType","mergeFormActions","source","target","key","hasOwnProperty","_exports","getFormHiddenActions","facetDefinition","converterContext","formActions","getFormActions","annotations","getEntityType","UI","hiddenFormActions","property","annotationProperty","isAnnotationOfType","Data","forEach","dataField","$Type","Action","Hidden","valueOf","push","type","Default","KeyHelper","generateKeyFromDataField","isAnnotationOfTerm","manifestWrapper","getManifestWrapper","targetValue","manifestFormContainer","actions","Facets","facet","Target","value","getFormContainer","actionKey","facetName","fullyQualifiedName"],"sources":["./FormMenuActions.ts"],"sourcesContent":["import type {\n\tDataFieldAbstractTypes,\n\tFacetTypes,\n\tFieldGroup,\n\tIdentification,\n\tReferenceFacet,\n\tStatusInfo\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { FormManifestConfiguration, ManifestAction } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { BaseAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { ConfigurableRecord } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { KeyHelper } from \"sap/fe/core/converters/helpers/Key\";\nimport { isAnnotationOfTerm, isAnnotationOfType } from \"sap/fe/core/helpers/TypeGuards\";\nimport type ConverterContext from \"../ConverterContext\";\n\nenum ActionType {\n\tDefault = \"Default\"\n}\n\nexport const mergeFormActions = (\n\tsource: ConfigurableRecord<ManifestAction>,\n\ttarget: ConfigurableRecord<ManifestAction>\n): ConfigurableRecord<ManifestAction> => {\n\tfor (const key in source) {\n\t\tif (source.hasOwnProperty(key)) {\n\t\t\ttarget[key] = source[key];\n\t\t}\n\t}\n\treturn source;\n};\n\nexport const getFormHiddenActions = (\n\tfacetDefinition: FacetTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): BaseAction[] => {\n\tconst formActions: ConfigurableRecord<ManifestAction> = getFormActions(facetDefinition, converterContext) || [],\n\t\tannotations = converterContext?.getEntityType()?.annotations?.UI as unknown as Record<string, unknown>;\n\tconst hiddenFormActions: BaseAction[] = [];\n\tfor (const property in annotations) {\n\t\tconst annotationProperty = annotations[property];\n\t\tif (isAnnotationOfType<FieldGroup>(annotationProperty, UIAnnotationTypes.FieldGroupType)) {\n\t\t\tannotationProperty?.Data.forEach((dataField: DataFieldAbstractTypes) => {\n\t\t\t\tif (\n\t\t\t\t\t(dataField.$Type === \"com.sap.vocabularies.UI.v1.DataFieldForAction\" &&\n\t\t\t\t\t\tformActions.hasOwnProperty(`DataFieldForAction::${dataField.Action}`)) ||\n\t\t\t\t\t(dataField.$Type === \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\" &&\n\t\t\t\t\t\tformActions.hasOwnProperty(`DataFieldForIntentBasedNavigation::${dataField.Action}`))\n\t\t\t\t) {\n\t\t\t\t\tif (dataField?.annotations?.UI?.Hidden?.valueOf() === true) {\n\t\t\t\t\t\thiddenFormActions.push({\n\t\t\t\t\t\t\ttype: ActionType.Default,\n\t\t\t\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} else if (\n\t\t\tisAnnotationOfTerm<Identification>(annotationProperty, UIAnnotationTerms.Identification) ||\n\t\t\tisAnnotationOfTerm<StatusInfo>(annotationProperty, UIAnnotationTerms.StatusInfo)\n\t\t) {\n\t\t\tannotationProperty?.forEach((dataField: DataFieldAbstractTypes) => {\n\t\t\t\tif (\n\t\t\t\t\t(dataField.$Type === \"com.sap.vocabularies.UI.v1.DataFieldForAction\" &&\n\t\t\t\t\t\tformActions.hasOwnProperty(`DataFieldForAction::${dataField.Action}`)) ||\n\t\t\t\t\t(dataField.$Type === \"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation\" &&\n\t\t\t\t\t\tformActions.hasOwnProperty(`DataFieldForIntentBasedNavigation::${dataField.Action}`))\n\t\t\t\t) {\n\t\t\t\t\tif (dataField?.annotations?.UI?.Hidden?.valueOf() === true) {\n\t\t\t\t\t\thiddenFormActions.push({\n\t\t\t\t\t\t\ttype: ActionType.Default,\n\t\t\t\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\treturn hiddenFormActions;\n};\n\nexport const getFormActions = (\n\tfacetDefinition: FacetTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): ConfigurableRecord<ManifestAction> => {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tlet targetValue: string, manifestFormContainer: FormManifestConfiguration;\n\tlet actions: ConfigurableRecord<ManifestAction> = {};\n\tif (facetDefinition?.$Type === \"com.sap.vocabularies.UI.v1.CollectionFacet\") {\n\t\tif (facetDefinition?.Facets) {\n\t\t\tfacetDefinition?.Facets.forEach((facet: FacetTypes) => {\n\t\t\t\tif (isAnnotationOfType<ReferenceFacet>(facet, UIAnnotationTypes.ReferenceFacet)) {\n\t\t\t\t\ttargetValue = facet?.Target?.value;\n\t\t\t\t\tmanifestFormContainer = manifestWrapper.getFormContainer(targetValue);\n\t\t\t\t\tif (manifestFormContainer?.actions) {\n\t\t\t\t\t\tfor (const actionKey in manifestFormContainer.actions) {\n\t\t\t\t\t\t\t// store the correct facet an action is belonging to for the case it's an inline form action\n\t\t\t\t\t\t\tmanifestFormContainer.actions[actionKey].facetName = facet.fullyQualifiedName;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tactions = mergeFormActions(manifestFormContainer?.actions, actions);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} else if (facetDefinition?.$Type === \"com.sap.vocabularies.UI.v1.ReferenceFacet\") {\n\t\ttargetValue = facetDefinition?.Target?.value;\n\t\tmanifestFormContainer = manifestWrapper.getFormContainer(targetValue);\n\t\tif (manifestFormContainer?.actions) {\n\t\t\tfor (const actionKey in manifestFormContainer.actions) {\n\t\t\t\t// store the correct facet an action is belonging to for the case it's an inline form action\n\t\t\t\tmanifestFormContainer.actions[actionKey].facetName = facetDefinition.fullyQualifiedName;\n\t\t\t}\n\t\t\tactions = manifestFormContainer.actions;\n\t\t}\n\t}\n\treturn actions;\n};\n"],"mappings":";;;;sMAiBKA,EAAU,SAAVA,KAAU,4BAAVA,CAAU,EAAVA,GAAU,IAIR,MAAMC,EAAmBA,CAC/BC,EACAC,KAEA,IAAK,MAAMC,KAAOF,EAAQ,CACzB,GAAIA,EAAOG,eAAeD,GAAM,CAC/BD,EAAOC,GAAOF,EAAOE,EACtB,CACD,CACA,OAAOF,GACNI,EAAAL,mBAEK,MAAMM,EAAuBA,CACnCC,EACAC,KAEA,MAAMC,EAAkDC,EAAeH,EAAiBC,IAAqB,GAC5GG,EAAcH,GAAkBI,iBAAiBD,aAAaE,GAC/D,MAAMC,EAAkC,GACxC,IAAK,MAAMC,KAAYJ,EAAa,CACnC,MAAMK,EAAqBL,EAAYI,GACvC,GAAIE,EAA+BD,EAAkB,6CAAqC,CACzFA,GAAoBE,KAAKC,QAASC,IACjC,GACEA,EAAUC,QAAU,iDACpBZ,EAAYL,eAAe,uBAAuBgB,EAAUE,WAC5DF,EAAUC,QAAU,gEACpBZ,EAAYL,eAAe,sCAAsCgB,EAAUE,UAC3E,CACD,GAAIF,GAAWT,aAAaE,IAAIU,QAAQC,YAAc,KAAM,CAC3DV,EAAkBW,KAAK,CACtBC,KAAM3B,EAAW4B,QACjBxB,IAAKyB,EAAUC,yBAAyBT,IAE1C,CACD,GAEF,MAAO,GACNU,EAAmCd,EAAkB,8CACrDc,EAA+Bd,EAAkB,yCAChD,CACDA,GAAoBG,QAASC,IAC5B,GACEA,EAAUC,QAAU,iDACpBZ,EAAYL,eAAe,uBAAuBgB,EAAUE,WAC5DF,EAAUC,QAAU,gEACpBZ,EAAYL,eAAe,sCAAsCgB,EAAUE,UAC3E,CACD,GAAIF,GAAWT,aAAaE,IAAIU,QAAQC,YAAc,KAAM,CAC3DV,EAAkBW,KAAK,CACtBC,KAAM3B,EAAW4B,QACjBxB,IAAKyB,EAAUC,yBAAyBT,IAE1C,CACD,GAEF,CACD,CACA,OAAON,GACNT,EAAAC,uBAEK,MAAMI,EAAiBA,CAC7BH,EACAC,KAEA,MAAMuB,EAAkBvB,EAAiBwB,qBACzC,IAAIC,EAAqBC,EACzB,IAAIC,EAA8C,CAAC,EACnD,GAAI5B,GAAiBc,QAAU,6CAA8C,CAC5E,GAAId,GAAiB6B,OAAQ,CAC5B7B,GAAiB6B,OAAOjB,QAASkB,IAChC,GAAIpB,EAAmCoB,EAAK,6CAAqC,CAChFJ,EAAcI,GAAOC,QAAQC,MAC7BL,EAAwBH,EAAgBS,iBAAiBP,GACzD,GAAIC,GAAuBC,QAAS,CACnC,IAAK,MAAMM,KAAaP,EAAsBC,QAAS,CAEtDD,EAAsBC,QAAQM,GAAWC,UAAYL,EAAMM,kBAC5D,CACAR,EAAUnC,EAAiBkC,GAAuBC,QAASA,EAC5D,CACD,GAEF,CACD,MAAO,GAAI5B,GAAiBc,QAAU,4CAA6C,CAClFY,EAAc1B,GAAiB+B,QAAQC,MACvCL,EAAwBH,EAAgBS,iBAAiBP,GACzD,GAAIC,GAAuBC,QAAS,CACnC,IAAK,MAAMM,KAAaP,EAAsBC,QAAS,CAEtDD,EAAsBC,QAAQM,GAAWC,UAAYnC,EAAgBoC,kBACtE,CACAR,EAAUD,EAAsBC,OACjC,CACD,CACA,OAAOA,GACN9B,EAAAK,iBAAA,OAAAL,CAAA","ignoreList":[]}