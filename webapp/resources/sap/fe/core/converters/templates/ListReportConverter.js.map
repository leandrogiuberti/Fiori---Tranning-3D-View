{"version":3,"file":"ListReportConverter.js","names":["ViewSettingsType","ViewDefinitionType","isViewSettingsOfType","potentialViewSettings","type","isViewDefinitionOfType","potentialViewDefinition","viewType","getTableVisualizations","views","tables","forEach","view","Custom","visualizations","Combined","secondaryVisualization","presentation","visualization","VisualizationType","Table","push","getChartVisualizations","charts","primaryVisualization","Chart","getDefaultSemanticDates","filterFields","defaultSemanticDates","filterField","settings","defaultValues","length","getCompliantVisualizationAnnotation","entityType","converterContext","isALP","annotationPath","getManifestWrapper","getDefaultTemplateAnnotationPath","selectionPresentationVariant","getSelectionPresentationVariant","errorMessageForALP","presentationVariant","PresentationVariant","Error","isPresentationCompliant","undefined","isSelectionPresentationCompliant","annotations","UI","getDefaultLineItem","createAlpView","presentations","defaultPath","viewSettings","createAlpVisualization","tableControlId","annotation","id","chartControlId","visible","Multi","createSingleVisualizationView","tableId","getViewControl","baseSettings","title","getViewTitle","selectionVariantPath","getViewSelectionVariant","SingleTable","SingleChart","isPrimary","presentationCreated","Object","assign","defaultVisualization","find","messageInfo","getAlpPresentation","item","resolvedTarget","getEntityTypeAnnotation","targetAnnotation","getTemplateType","TemplateType","AnalyticalListPage","getDataVisualizationConfiguration","getRelativeAnnotationPath","fullyQualifiedName","getEntityType","isCondensedTableLayoutCompliant","shouldCreateTemplateChartVisualization","configureMultiViews","filters","control","hiddenFilters","paths","keepPreviousPersonalization","getTableID","key","apiId","generate","getChartID","multiViews","getCustomView","label","fragment","template","customTabId","getCustomTabID","visualizationType","viewAnnotation","compileExpression","getExpressionFromAnnotation","Text","isAnnotationOfType","SelectionVariant","split","getViewVisualizationPath","getView","multiViewSettings","associatedSelectionVariant","selectionVariant","isMacroOrMultipleView","primary","secondary","inMultiView","getViews","multipleViewConfig","viewConverterConfigs","manifestWrapper","path","isCombinedViewConfiguration","isCustomViewConfiguration","viewConverterContext","getConverterContextFor","contextPath","entitySet","getContextPath","term","createAlpViewSettings","Default","map","viewConverterConfig","getMultiViewsControl","viewsDefinition","getViewConfiguration","hasMultiVisualizations","showTabCounts","showCounts","hasMultipleEntitySets","getIconTabBarID","viewConfigs","chart","table","getDefaultChart","hasMultipleVisualizations","getHeaderActions","headerActions","insertCustomElements","getActionsFromManifest","actions","ActionUtilities","ensurePrimaryActionNeverOverflows","_exports","checkChartFilterBarId","filterBarId","visualizationDefinition","filterId","convertPage","capabilities","sContextPath","lrTableVisualizations","lrChartVisualizations","showPinnableToggle","some","singleTableId","singleChartId","dynamicListReportId","getDynamicListReportID","getFilterBarID","filterVariantManagementID","getFilterVariantManagementID","fbConfig","getFilterConfiguration","filterInitialLayout","initialLayout","toLowerCase","filterLayout","layout","useSemanticDateRange","showClearButton","config","getContentAreaId","chartId","useHiddenFilterBar","hideFilterBar","isFilterBarHidden","lrFilterProperties","getSelectionFields","selectionFields","propertyInfoFields","sPropertyInfo","hideBasicSearch","getFilterBarHideBasicSearch","multiViewControl","getSelectionVariant","getManifestFilterFields","visualizationIds","concat","targetControlIds","getVariantManagement","VariantManagementType","Control","stickySubheaderProvider","getStickyMultiTabHeaderConfiguration","disableDraftEditStateFilter","HiddenDraft","enabled","every","tableVisualization","enableAnalytics","collection","mainEntitySet","mainEntityType","multiViewsControl","easyFilterEnabled","MagicFiltering","filterBar","propertyInfo","showDraftEditStatus","filterConditions","variantManagement","join","templateType","kpiDefinitions","getKPIDefinitions","collapsedHeaderFragment","getCollapsedHeaderFragment","expandedHeaderFragment","getExpandedHeaderFragment"],"sources":["./ListReportConverter.ts"],"sourcesContent":["import type { EntityType } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tChart,\n\tLineItem,\n\tPresentationVariant,\n\tSelectionPresentationVariant,\n\tSelectionVariant,\n\tSelectionVariantType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation } from \"sap/fe/base/BindingToolkit\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { BaseAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport { getActionsFromManifest } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { ChartVisualization } from \"sap/fe/core/converters/controls/Common/Chart\";\nimport type { TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { CustomElementFilterField, FilterField } from \"sap/fe/core/converters/controls/ListReport/FilterBar\";\nimport {\n\tgetFilterBarHideBasicSearch,\n\tgetManifestFilterFields,\n\tgetSelectionFields,\n\tshowDraftEditStatus\n} from \"sap/fe/core/converters/controls/ListReport/FilterBar\";\nimport type { ConfigurableObject } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { insertCustomElements } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport ActionUtilities from \"sap/fe/core/helpers/ActionUtilities\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport type { EnvironmentCapabilities } from \"sap/fe/core/services/EnvironmentServiceFactory\";\nimport { isAnnotationOfType } from \"../../helpers/TypeGuards\";\nimport type {\n\tCombinedViewDefaultPath,\n\tDefaultOperator,\n\tHiddenDraft,\n\tMultipleViewsConfiguration,\n\tSingleViewPathConfiguration\n} from \"../ManifestSettings\";\nimport { TemplateType, VariantManagementType, VisualizationType } from \"../ManifestSettings\";\nimport type { DataVisualizationDefinition } from \"../controls/Common/DataVisualization\";\nimport {\n\tgetDataVisualizationConfiguration,\n\tgetDefaultChart,\n\tgetDefaultLineItem,\n\tgetSelectionPresentationVariant,\n\tgetSelectionVariant,\n\tisPresentationCompliant,\n\tisSelectionPresentationCompliant\n} from \"../controls/Common/DataVisualization\";\nimport type { KPIDefinition } from \"../controls/Common/KPI\";\nimport { getKPIDefinitions } from \"../controls/Common/KPI\";\nimport {\n\tgetChartID,\n\tgetCustomTabID,\n\tgetDynamicListReportID,\n\tgetFilterBarID,\n\tgetFilterVariantManagementID,\n\tgetIconTabBarID,\n\tgetTableID\n} from \"../helpers/ID\";\n\ntype VariantManagementDefinition = {\n\tid: string;\n\ttargetControlIds: string;\n};\n\nenum ViewSettingsType {\n\tMulti = \"Multi\",\n\tCombined = \"Combined\",\n\tCustom = \"Custom\",\n\tDefault = \"Default\"\n}\n\ntype CombinedViewSettings = {\n\tconverterContext: ConverterContext<PageContextPathTarget>;\n\tprimary: SingleViewPathConfiguration[];\n\tsecondary: SingleViewPathConfiguration[];\n\tdefaultPath?: CombinedViewDefaultPath;\n\ttype: ViewSettingsType.Combined;\n};\ntype CustomViewSettings = {\n\tkey?: string;\n\tlabel?: string;\n\ttemplate: string;\n\ttype: ViewSettingsType.Custom;\n\tvisible?: string;\n};\n\ntype MultiDefaultViewSettings = {\n\tconverterContext: ConverterContext<PageContextPathTarget>;\n\tselectionVariant?: SelectionVariantType;\n\tannotation?: LineItem | PresentationVariant | SelectionPresentationVariant | Chart;\n\tannotationPath: string;\n\tkeepPreviousPersonalization?: boolean;\n\tkey?: string;\n\tvisible?: string;\n\ttype: ViewSettingsType.Multi;\n};\ntype DefaultViewSettings = {\n\tconverterContext: ConverterContext<PageContextPathTarget>;\n\tannotation?: LineItem | PresentationVariant | SelectionPresentationVariant;\n\ttype: ViewSettingsType.Default;\n};\n\ntype ViewConverterSettings = DefaultViewSettings | CombinedViewSettings | MultiDefaultViewSettings | CustomViewSettings;\n\ntype DefaultSemanticDate = ConfigurableObject & {\n\toperator: string;\n};\ntype MultiViewsControlConfiguration = {\n\tid: string;\n\tshowTabCounts?: boolean;\n};\ntype LrVisualizationType<T> = T extends VisualizationType.Table ? TableVisualization | undefined : ChartVisualization | undefined;\n\nexport type ListReportDefinition = {\n\tmainEntitySet: string;\n\tmainEntityType: string; // entityType> at the start of LR templating\n\tsingleTableId?: string; // only with single Table mode\n\tsingleChartId?: string; // only with single Table mode\n\tdynamicListReportId: string;\n\tstickySubheaderProvider?: string;\n\tmultiViewsControl?: MultiViewsControlConfiguration; // only with multi Table mode\n\theaderActions: BaseAction[];\n\teasyFilterEnabled?: boolean;\n\tshowPinnableToggle?: boolean;\n\tfilterBar: {\n\t\tpropertyInfo: string;\n\t\tselectionFields: FilterField[];\n\t\thideBasicSearch: boolean;\n\t\tshowClearButton?: boolean;\n\t\tdisableDraftEditStateFilter: boolean;\n\t\tshowDraftEditStatus: boolean;\n\t};\n\tviews: ListReportViewDefinition[];\n\tfilterConditions: {\n\t\tselectionVariant: SelectionVariantType | undefined;\n\t\tdefaultSemanticDates: Record<string, DefaultSemanticDate> | {};\n\t};\n\tfilterBarId: string;\n\tvariantManagement: VariantManagementDefinition;\n\thasMultiVisualizations: boolean;\n\ttemplateType: TemplateType;\n\tuseSemanticDateRange?: boolean;\n\tfilterInitialLayout?: string;\n\tfilterLayout?: string;\n\tkpiDefinitions: KPIDefinition[];\n\thideFilterBar: boolean;\n\tuseHiddenFilterBar: boolean;\n\texpandedHeaderFragment?: string;\n\tcollapsedHeaderFragment?: string;\n};\ntype ListReportViewDefinition = SingleViewDefinition | CustomViewDefinition | CombinedViewDefinition;\n\nenum ViewDefinitionType {\n\tSingleTable = \"SingleTable\",\n\tSingleChart = \"SingleChart\",\n\tCombined = \"Combined\",\n\tCustom = \"Custom\"\n}\n\nexport type CombinedViewDefinition = {\n\tselectionVariantPath?: string; // only with on multi Table mode\n\ttitle?: string; // only with multi Table mode\n\tprimaryVisualization: DataVisualizationDefinition;\n\tsecondaryVisualization: DataVisualizationDefinition;\n\ttableControlId: string;\n\tchartControlId: string;\n\tdefaultPath?: string;\n\tvisible?: string;\n\tviewType: ViewDefinitionType.Combined;\n};\nexport type CustomViewDefinition = {\n\ttitle?: string; // only with multi Table mode\n\tfragment: string;\n\ttype: string;\n\tcustomTabId: string;\n\tvisible?: string;\n\tviewType: ViewDefinitionType.Custom;\n};\nexport type SingleViewDefinition = SingleTableViewDefinition | SingleChartViewDefinition;\nexport type BaseSingleViewDefinition = {\n\tselectionVariantPath?: string; // only with on multi Table mode\n\ttitle?: string; // only with multi Table mode\n\tpresentation: DataVisualizationDefinition;\n\tvisible?: string;\n};\nexport type SingleTableViewDefinition = BaseSingleViewDefinition & {\n\ttableControlId?: string;\n\tviewType: ViewDefinitionType.SingleTable;\n};\nexport type SingleChartViewDefinition = BaseSingleViewDefinition & {\n\tchartControlId?: string;\n\tviewType: ViewDefinitionType.SingleChart;\n};\n\ntype ContentAreaID = {\n\tchartId: string;\n\ttableId: string;\n};\n\n/**\n * Returns true if the view settings matches the provided type.\n * @param potentialViewSettings The view settings\n * @param type The type to match\n * @returns `true` if the view settings matches the provided type\n */\nconst isViewSettingsOfType = function <T extends ViewConverterSettings>(\n\tpotentialViewSettings: ViewConverterSettings,\n\ttype: T[\"type\"]\n): potentialViewSettings is T {\n\treturn potentialViewSettings.type === type;\n};\n\n/**\n * Returns true if the view definition matches the provided type.\n * @param potentialViewDefinition The view definition\n * @param type The type to match\n * @returns `true` if the view definition matches the provided type\n */\nconst isViewDefinitionOfType = function <T extends ListReportViewDefinition>(\n\tpotentialViewDefinition: ListReportViewDefinition,\n\ttype: T[\"viewType\"]\n): potentialViewDefinition is T {\n\treturn potentialViewDefinition.viewType === type;\n};\n\n/**\n * Retrieves all list report tables.\n * @param views The list report views configured in the manifest\n * @returns The list report tables\n */\nfunction getTableVisualizations(views: ListReportViewDefinition[]): TableVisualization[] {\n\tconst tables: TableVisualization[] = [];\n\tviews.forEach(function (view) {\n\t\tif (!isViewDefinitionOfType<CustomViewDefinition>(view, ViewDefinitionType.Custom)) {\n\t\t\tconst visualizations = isViewDefinitionOfType<CombinedViewDefinition>(view, ViewDefinitionType.Combined)\n\t\t\t\t? view.secondaryVisualization.visualizations\n\t\t\t\t: view.presentation.visualizations;\n\t\t\tvisualizations.forEach(function (visualization) {\n\t\t\t\tif (visualization.type === VisualizationType.Table) {\n\t\t\t\t\ttables.push(visualization);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn tables;\n}\n\n/**\n * Retrieves all list report charts.\n * @param views The list report views configured in the manifest\n * @returns The list report charts\n */\nfunction getChartVisualizations(views: ListReportViewDefinition[]): ChartVisualization[] {\n\tconst charts: ChartVisualization[] = [];\n\tviews.forEach(function (view) {\n\t\tif (!isViewDefinitionOfType<CustomViewDefinition>(view, ViewDefinitionType.Custom)) {\n\t\t\tconst visualizations = isViewDefinitionOfType<CombinedViewDefinition>(view, ViewDefinitionType.Combined)\n\t\t\t\t? view.primaryVisualization.visualizations\n\t\t\t\t: view.presentation.visualizations;\n\t\t\tvisualizations.forEach(function (visualization) {\n\t\t\t\tif (visualization.type === VisualizationType.Chart) {\n\t\t\t\t\tcharts.push(visualization);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\treturn charts;\n}\nconst getDefaultSemanticDates = function (\n\tfilterFields: Record<string, CustomElementFilterField>\n): Record<string, DefaultOperator[] | undefined> {\n\tconst defaultSemanticDates: Record<string, DefaultOperator[] | undefined> = {};\n\tfor (const filterField in filterFields) {\n\t\tif (filterFields[filterField]?.settings?.defaultValues?.length) {\n\t\t\tdefaultSemanticDates[filterField] = filterFields[filterField]?.settings?.defaultValues;\n\t\t}\n\t}\n\treturn defaultSemanticDates;\n};\n/**\n * Find a visualization annotation that can be used for rendering the list report.\n * @param entityType The current EntityType\n * @param converterContext\n * @param isALP\n * @returns A compliant annotation for rendering the list report\n */\nfunction getCompliantVisualizationAnnotation(\n\tentityType: EntityType,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tisALP: boolean\n): LineItem | PresentationVariant | SelectionPresentationVariant | undefined {\n\tconst annotationPath = converterContext.getManifestWrapper().getDefaultTemplateAnnotationPath();\n\tconst selectionPresentationVariant = getSelectionPresentationVariant(entityType, annotationPath, converterContext);\n\tconst errorMessageForALP = \"ALP flavor needs both chart and table to load the application\";\n\tif (selectionPresentationVariant) {\n\t\tif (annotationPath) {\n\t\t\tconst presentationVariant = selectionPresentationVariant.PresentationVariant;\n\t\t\tif (!presentationVariant) {\n\t\t\t\tthrow new Error(\"Presentation Variant is not configured in the SPV mentioned in the manifest\");\n\t\t\t}\n\t\t\tif (!isPresentationCompliant(presentationVariant, isALP)) {\n\t\t\t\tif (isALP) {\n\t\t\t\t\tthrow new Error(errorMessageForALP);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t\tif (isSelectionPresentationCompliant(selectionPresentationVariant, isALP) === true) {\n\t\t\treturn selectionPresentationVariant;\n\t\t} else if (isALP) {\n\t\t\tthrow new Error(errorMessageForALP);\n\t\t}\n\t}\n\tconst presentationVariant = entityType.annotations?.UI?.PresentationVariant;\n\tif (presentationVariant) {\n\t\tif (isPresentationCompliant(presentationVariant, isALP)) {\n\t\t\treturn presentationVariant;\n\t\t} else if (isALP) {\n\t\t\tthrow new Error(errorMessageForALP);\n\t\t}\n\t}\n\tif (!isALP) {\n\t\treturn getDefaultLineItem(entityType);\n\t}\n\treturn undefined;\n}\n\n/**\n * Creates the view for the analytical list page.\n * @param presentations The data visualizations to configure\n * @param defaultPath The default path of the page\n * @param viewSettings The settings of the view\n * @returns The ALP view definition\n */\nconst createAlpView = function (\n\tpresentations: DataVisualizationDefinition[],\n\tdefaultPath: CombinedViewDefaultPath | undefined,\n\tviewSettings: ViewConverterSettings\n): CombinedViewDefinition | undefined {\n\tconst primaryVisualization = createAlpVisualization(presentations[0], true);\n\tconst secondaryVisualization = createAlpVisualization(presentations[1] ? presentations[1] : presentations[0], false);\n\tif (primaryVisualization && secondaryVisualization) {\n\t\tconst view: CombinedViewDefinition = {\n\t\t\tprimaryVisualization,\n\t\t\tsecondaryVisualization,\n\t\t\ttableControlId:\n\t\t\t\tsecondaryVisualization.visualizations[0]?.type === VisualizationType.Table\n\t\t\t\t\t? secondaryVisualization.visualizations[0].annotation?.id\n\t\t\t\t\t: \"\",\n\t\t\tchartControlId:\n\t\t\t\tprimaryVisualization.visualizations[0]?.type === VisualizationType.Chart ? primaryVisualization.visualizations[0].id : \"\",\n\t\t\tdefaultPath,\n\t\t\tviewType: ViewDefinitionType.Combined,\n\t\t\tvisible: isViewSettingsOfType<MultiDefaultViewSettings>(viewSettings, ViewSettingsType.Multi) ? viewSettings.visible : undefined\n\t\t};\n\t\treturn view;\n\t}\n};\n\n/**\n * Creates the visualizations for a single visualization view.\n * @param converterContext The converted context\n * @param presentation The presentation to configure\n * @param viewSettings The settings of the view\n * @returns The ALP visualization definition\n */\nconst createSingleVisualizationView = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tpresentation: DataVisualizationDefinition,\n\tviewSettings: ViewConverterSettings\n): SingleViewDefinition {\n\tconst tableId = getViewControl(presentation, VisualizationType.Table)?.annotation.id;\n\tconst baseSettings = {\n\t\tpresentation,\n\t\ttitle: getViewTitle(converterContext, viewSettings),\n\t\tselectionVariantPath: getViewSelectionVariant(viewSettings),\n\t\tvisible: isViewSettingsOfType<MultiDefaultViewSettings>(viewSettings, ViewSettingsType.Multi) ? viewSettings.visible : undefined\n\t};\n\tif (tableId) {\n\t\treturn {\n\t\t\t...baseSettings,\n\t\t\t...{\n\t\t\t\ttableControlId: tableId,\n\t\t\t\tviewType: ViewDefinitionType.SingleTable\n\t\t\t}\n\t\t};\n\t}\n\treturn {\n\t\t...baseSettings,\n\t\t...{\n\t\t\tchartControlId: getViewControl(presentation, VisualizationType.Chart)?.id,\n\t\t\tviewType: ViewDefinitionType.SingleChart\n\t\t}\n\t};\n};\n\n/**\n * Creates the visualizations for the analytical list page.\n * @param presentation The presentation to configure\n * @param isPrimary Is a primary presentation\n * @returns The ALP visualization definition\n */\nconst createAlpVisualization = function (presentation: DataVisualizationDefinition, isPrimary?: boolean): DataVisualizationDefinition {\n\tconst presentationCreated = Object.assign({}, presentation);\n\tconst defaultVisualization = presentation.visualizations.find(\n\t\t(visualization): visualization is TableVisualization | ChartVisualization =>\n\t\t\t(!!isPrimary && visualization.type === VisualizationType.Chart) ||\n\t\t\t(!isPrimary && visualization.type === VisualizationType.Table)\n\t);\n\n\tif (defaultVisualization) {\n\t\tpresentationCreated.visualizations = [defaultVisualization];\n\t} else {\n\t\tconst messageInfo = isPrimary ? { visualization: \"Primary\", type: \"chart\" } : { visualization: \"Secondary\", type: \"table\" };\n\t\tthrow new Error(`${messageInfo.visualization} visualization needs valid ${messageInfo.type}`);\n\t}\n\treturn presentationCreated;\n};\n\n/**\n * Gets the presentation of the analytical list page.\n * @param converterContext The converted context\n * @param item The item configuration\n * @param isPrimary Is a primary presentation\n * @returns The ALP presentation definition\n */\nconst getAlpPresentation = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\titem: SingleViewPathConfiguration,\n\tisPrimary: boolean\n): DataVisualizationDefinition {\n\tconst resolvedTarget = converterContext.getEntityTypeAnnotation(item.annotationPath);\n\tconst targetAnnotation = resolvedTarget.annotation;\n\tconverterContext = resolvedTarget.converterContext;\n\tconst annotation = targetAnnotation;\n\tif (annotation || converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {\n\t\treturn getDataVisualizationConfiguration(\n\t\t\tannotation ? converterContext.getRelativeAnnotationPath(annotation.fullyQualifiedName, converterContext.getEntityType()) : \"\",\n\t\t\tconverterContext,\n\t\t\t{\n\t\t\t\tisCondensedTableLayoutCompliant: true,\n\t\t\t\tshouldCreateTemplateChartVisualization: true\n\t\t\t}\n\t\t);\n\t} else {\n\t\tthrow new Error(\n\t\t\t`Annotation Path for the ${isPrimary ? \"primary\" : \"secondary\"} visualization mentioned in the manifest is not found`\n\t\t);\n\t}\n};\n\n/**\n * Configures the multi view configuration with additional keys.\n * @param presentation The presentation to configure\n * @param viewSettings The settings of the view\n */\nconst configureMultiViews = function (presentation: DataVisualizationDefinition, viewSettings: MultiDefaultViewSettings): void {\n\t// Need to loop on table into views since multi table mode get specific configuration (hidden filters or Table Id)\n\tfor (const visualization of presentation.visualizations) {\n\t\tswitch (visualization.type) {\n\t\t\tcase VisualizationType.Table:\n\t\t\t\tconst filters = visualization.control.filters || {};\n\t\t\t\tfilters.hiddenFilters = filters.hiddenFilters || { paths: [] };\n\t\t\t\tif (!viewSettings.keepPreviousPersonalization) {\n\t\t\t\t\t// Need to override Table Id to match with Tab Key (currently only table is managed in multiple view mode)\n\t\t\t\t\tvisualization.annotation.id = getTableID(viewSettings.key ?? \"\", \"LineItem\");\n\t\t\t\t\tvisualization.annotation.apiId = generate([visualization.annotation.id, \"Table\"]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase VisualizationType.Chart:\n\t\t\t\tvisualization.id = getChartID(viewSettings.key || \"\", \"Chart\");\n\t\t\t\tvisualization.multiViews = true;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n};\n\n/**\n * Gets the custom view configuration.\n * @param viewSettings The settings of the view\n * @returns The custom view definition\n */\nconst getCustomView = function (viewSettings: CustomViewSettings): CustomViewDefinition {\n\treturn {\n\t\ttitle: viewSettings.label,\n\t\tfragment: viewSettings.template,\n\t\ttype: viewSettings.type,\n\t\tcustomTabId: getCustomTabID(viewSettings.key ?? \"\"),\n\t\tvisible: viewSettings.visible,\n\t\tviewType: ViewDefinitionType.Custom\n\t};\n};\n\n/**\n * Gets the configured control of the view.\n * @param presentation The presentation of the view\n * @param visualizationType The type of the visualization to find\n * @returns The visualization if the type matches, undefined otherwise\n */\nconst getViewControl = function <T extends VisualizationType.Table | VisualizationType.Chart>(\n\tpresentation: DataVisualizationDefinition,\n\tvisualizationType: T\n): LrVisualizationType<T> {\n\treturn presentation.visualizations.find((visualization) => visualization.type === visualizationType) as LrVisualizationType<T>;\n};\n\n/**\n * Gets the title of the view.\n * @param converterContext The converted context\n * @param viewSettings The settings of the view\n * @returns The title\n */\nconst getViewTitle = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tviewSettings: ViewConverterSettings\n): CompiledBindingToolkitExpression {\n\tif (isViewSettingsOfType<MultiDefaultViewSettings>(viewSettings, ViewSettingsType.Multi)) {\n\t\tconst viewAnnotation = converterContext.getEntityTypeAnnotation(viewSettings.annotationPath).annotation as\n\t\t\t| SelectionVariant\n\t\t\t| SelectionPresentationVariant;\n\t\treturn compileExpression(getExpressionFromAnnotation(viewAnnotation.Text));\n\t}\n\treturn \"\";\n};\n\n/**\n * Gets the configured SelectionVariant  of the view.\n * @param viewSettings The settings of the view\n * @returns The SelectionVariant if there is one, undefined otherwise\n */\nconst getViewSelectionVariant = function (viewSettings: ViewConverterSettings): string | undefined {\n\tif (isViewSettingsOfType<MultiDefaultViewSettings>(viewSettings, ViewSettingsType.Multi)) {\n\t\treturn viewSettings.annotation &&\n\t\t\tisAnnotationOfType<SelectionPresentationVariant>(viewSettings.annotation, UIAnnotationTypes.SelectionPresentationVariantType)\n\t\t\t? `@${viewSettings.annotation.SelectionVariant?.fullyQualifiedName.split(\"@\")[1]}`\n\t\t\t: viewSettings.annotationPath;\n\t}\n\treturn undefined;\n};\n\n/**\n * Gets the visualization path of the view.\n * @param viewSettings The settings of the view\n * @returns The SelectionVariant if there is one, undefined otherwise\n */\nconst getViewVisualizationPath = function (viewSettings: ViewConverterSettings): string {\n\tif (!isViewSettingsOfType<CustomViewSettings>(viewSettings, ViewSettingsType.Custom)) {\n\t\treturn !isViewSettingsOfType<CombinedViewSettings>(viewSettings, ViewSettingsType.Combined) && viewSettings.annotation\n\t\t\t? viewSettings.converterContext.getRelativeAnnotationPath(\n\t\t\t\t\tviewSettings.annotation.fullyQualifiedName,\n\t\t\t\t\tviewSettings.converterContext.getEntityType()\n\t\t\t  )\n\t\t\t: \"\";\n\t}\n\treturn \"\";\n};\n\n/**\n * Gets the list report view definition.\n * @param viewSettings The settings of the view\n * @returns The  definition\n */\nconst getView = function (viewSettings: ViewConverterSettings): ListReportViewDefinition {\n\tif (!isViewSettingsOfType<CustomViewSettings>(viewSettings, ViewSettingsType.Custom)) {\n\t\tconst converterContext = viewSettings.converterContext;\n\t\tconst multiViewSettings = isViewSettingsOfType<MultiDefaultViewSettings>(viewSettings, ViewSettingsType.Multi)\n\t\t\t? {\n\t\t\t\t\tassociatedSelectionVariant: viewSettings.selectionVariant,\n\t\t\t\t\tisMacroOrMultipleView: true\n\t\t\t  }\n\t\t\t: {};\n\n\t\tconst presentation = getDataVisualizationConfiguration(getViewVisualizationPath(viewSettings), converterContext, {\n\t\t\t...{ isCondensedTableLayoutCompliant: true },\n\t\t\t...multiViewSettings\n\t\t});\n\n\t\tif (\n\t\t\t!isViewSettingsOfType<CombinedViewSettings>(viewSettings, ViewSettingsType.Combined) &&\n\t\t\tpresentation.visualizations.length === 2 &&\n\t\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage\n\t\t) {\n\t\t\tconst view = createAlpView([presentation], \"both\", viewSettings);\n\t\t\tif (view) {\n\t\t\t\treturn view;\n\t\t\t}\n\t\t} else if (isViewSettingsOfType<CombinedViewSettings>(viewSettings, ViewSettingsType.Combined)) {\n\t\t\tconst { primary, secondary } = viewSettings;\n\t\t\tif (primary?.length && secondary?.length) {\n\t\t\t\tconst view = createAlpView(\n\t\t\t\t\t[getAlpPresentation(converterContext, primary[0], true), getAlpPresentation(converterContext, secondary[0], false)],\n\t\t\t\t\tviewSettings.defaultPath,\n\t\t\t\t\tviewSettings\n\t\t\t\t);\n\t\t\t\tif (view) {\n\t\t\t\t\treturn view;\n\t\t\t\t}\n\t\t\t} else if (converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {\n\t\t\t\tthrow new Error(\"SecondaryItems in the Views is not present\");\n\t\t\t}\n\t\t} else if (isViewSettingsOfType<MultiDefaultViewSettings>(viewSettings, ViewSettingsType.Multi)) {\n\t\t\tconfigureMultiViews(presentation, viewSettings);\n\t\t}\n\t\tconst view = createSingleVisualizationView(converterContext, presentation, viewSettings);\n\t\tview.presentation.inMultiView = !!multiViewSettings.isMacroOrMultipleView;\n\n\t\treturn view;\n\t} else {\n\t\treturn getCustomView(viewSettings);\n\t}\n};\n\n/**\n * Gets the list report view definitions.\n * @param converterContext The converted context\n * @param multipleViewConfig The manifest configuration related of the multi views\n * @returns The  definitions\n */\nconst getViews = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tmultipleViewConfig: MultipleViewsConfiguration | undefined\n): ListReportViewDefinition[] {\n\tlet viewConverterConfigs: ViewConverterSettings[] = [];\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tif (multipleViewConfig) {\n\t\tmultipleViewConfig.paths.forEach((path) => {\n\t\t\tif (manifestWrapper.isCombinedViewConfiguration(path)) {\n\t\t\t\tif (multipleViewConfig.paths.length > 1) {\n\t\t\t\t\tthrow new Error(\"ALP flavor cannot have multiple views\");\n\t\t\t\t} else {\n\t\t\t\t\tviewConverterConfigs.push({\n\t\t\t\t\t\tconverterContext: converterContext,\n\t\t\t\t\t\tprimary: path.primary,\n\t\t\t\t\t\tsecondary: path.secondary,\n\t\t\t\t\t\tdefaultPath: path.defaultPath,\n\t\t\t\t\t\ttype: ViewSettingsType.Combined\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else if (manifestWrapper.isCustomViewConfiguration(path)) {\n\t\t\t\tviewConverterConfigs.push({\n\t\t\t\t\tkey: path.key,\n\t\t\t\t\tlabel: path.label,\n\t\t\t\t\ttemplate: path.template,\n\t\t\t\t\ttype: ViewSettingsType.Custom,\n\t\t\t\t\tvisible: path.visible\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst viewConverterContext = converterContext.getConverterContextFor<PageContextPathTarget>(\n\t\t\t\t\t\tpath.contextPath || (path.entitySet && `/${path.entitySet}`) || converterContext.getContextPath()\n\t\t\t\t\t),\n\t\t\t\t\tentityType = viewConverterContext.getEntityType();\n\t\t\t\tif (entityType && viewConverterContext) {\n\t\t\t\t\tlet annotation;\n\t\t\t\t\tconst resolvedTarget = viewConverterContext.getEntityTypeAnnotation(path.annotationPath);\n\t\t\t\t\tconst targetAnnotation = resolvedTarget.annotation as SelectionVariant | SelectionPresentationVariant;\n\t\t\t\t\tif (targetAnnotation) {\n\t\t\t\t\t\tannotation =\n\t\t\t\t\t\t\ttargetAnnotation.term === UIAnnotationTerms.SelectionVariant\n\t\t\t\t\t\t\t\t? getCompliantVisualizationAnnotation(entityType, viewConverterContext, false)\n\t\t\t\t\t\t\t\t: targetAnnotation;\n\t\t\t\t\t\tviewConverterConfigs.push({\n\t\t\t\t\t\t\tselectionVariant: targetAnnotation.term === UIAnnotationTerms.SelectionVariant ? targetAnnotation : undefined,\n\t\t\t\t\t\t\tconverterContext: viewConverterContext,\n\t\t\t\t\t\t\tannotation,\n\t\t\t\t\t\t\tannotationPath: path.annotationPath,\n\t\t\t\t\t\t\tkeepPreviousPersonalization: path.keepPreviousPersonalization,\n\t\t\t\t\t\t\tkey: path.key,\n\t\t\t\t\t\t\tvisible: path.visible,\n\t\t\t\t\t\t\ttype: ViewSettingsType.Multi\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// TODO Diagnostics message\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconst entityType = converterContext.getEntityType();\n\t\tif (converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {\n\t\t\tviewConverterConfigs = createAlpViewSettings(converterContext, viewConverterConfigs);\n\t\t} else {\n\t\t\tviewConverterConfigs.push({\n\t\t\t\tannotation: getCompliantVisualizationAnnotation(entityType, converterContext, false),\n\t\t\t\tconverterContext: converterContext,\n\t\t\t\ttype: ViewSettingsType.Default\n\t\t\t});\n\t\t}\n\t}\n\treturn viewConverterConfigs.map((viewConverterConfig) => {\n\t\treturn getView(viewConverterConfig);\n\t});\n};\nconst getMultiViewsControl = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tviews: ListReportViewDefinition[]\n): MultiViewsControlConfiguration | undefined {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tconst viewsDefinition: MultipleViewsConfiguration | undefined = manifestWrapper.getViewConfiguration();\n\tif (views.length > 1 && !hasMultiVisualizations(converterContext)) {\n\t\treturn {\n\t\t\tshowTabCounts: viewsDefinition ? viewsDefinition.showCounts ?? manifestWrapper.hasMultipleEntitySets() : undefined, // with multi EntitySets, tab counts are displayed by default\n\t\t\tid: getIconTabBarID()\n\t\t};\n\t}\n\treturn undefined;\n};\n\n/**\n * Creates the settings related to an ALP view.\n * @param converterContext The converted context\n * @param viewConfigs The configs of the other list report views\n * @returns The configs of the list report views\n */\nfunction createAlpViewSettings(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tviewConfigs: ViewConverterSettings[]\n): ViewConverterSettings[] {\n\tconst entityType = converterContext.getEntityType();\n\tconst annotation = getCompliantVisualizationAnnotation(entityType, converterContext, true);\n\tlet chart, table;\n\tif (annotation) {\n\t\tviewConfigs.push({\n\t\t\tannotation: annotation,\n\t\t\tconverterContext,\n\t\t\ttype: ViewSettingsType.Default\n\t\t});\n\t} else {\n\t\tchart = getDefaultChart(entityType);\n\t\ttable = getDefaultLineItem(entityType);\n\t\tif (chart && table) {\n\t\t\tconst primary = [{ annotationPath: \"@\" + chart.term }];\n\t\t\tconst secondary = [{ annotationPath: \"@\" + table.term }];\n\t\t\tviewConfigs.push({\n\t\t\t\tconverterContext: converterContext,\n\t\t\t\tprimary: primary,\n\t\t\t\tsecondary: secondary,\n\t\t\t\tdefaultPath: \"both\",\n\t\t\t\ttype: ViewSettingsType.Combined\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error(\"ALP flavor needs both chart and table to load the application\");\n\t\t}\n\t}\n\treturn viewConfigs;\n}\nfunction hasMultiVisualizations(converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\treturn (\n\t\tconverterContext.getManifestWrapper().hasMultipleVisualizations() ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage\n\t);\n}\nexport const getHeaderActions = function (converterContext: ConverterContext<PageContextPathTarget>): BaseAction[] {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tconst headerActions = insertCustomElements<BaseAction>(\n\t\t[],\n\t\tgetActionsFromManifest(manifestWrapper.getHeaderActions(), converterContext).actions\n\t);\n\t// Apply primary action overflow protection\n\treturn ActionUtilities.ensurePrimaryActionNeverOverflows(headerActions);\n};\n\n/**\n * Sets the filterBarId on the scenario with multi-entity sets.\n * @param views The definition of the list report views\n * @param filterBarId\n */\nconst checkChartFilterBarId = function (views: ListReportViewDefinition[], filterBarId: string): void {\n\tviews.forEach((view) => {\n\t\tif (\n\t\t\t!isViewDefinitionOfType<CustomViewDefinition>(view, ViewDefinitionType.Custom) &&\n\t\t\t!isViewDefinitionOfType<CombinedViewDefinition>(view, ViewDefinitionType.Combined)\n\t\t) {\n\t\t\tview.presentation.visualizations.forEach((visualizationDefinition) => {\n\t\t\t\tif (visualizationDefinition.type === VisualizationType.Chart && visualizationDefinition.filterId !== filterBarId) {\n\t\t\t\t\tvisualizationDefinition.filterId = filterBarId;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\n/**\n * Creates the ListReportDefinition for multiple entity sets (multiple table mode).\n * @param converterContext The converter context\n * @param capabilities The predefined environment capabilities\n * @returns The list report definition based on annotation + manifest\n */\nexport const convertPage = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tcapabilities?: EnvironmentCapabilities\n): ListReportDefinition {\n\tconst entityType = converterContext.getEntityType();\n\tconst sContextPath = converterContext.getContextPath();\n\tif (!sContextPath) {\n\t\t// If we don't have an entitySet at this point we have an issue I'd say\n\t\tthrow new Error(\n\t\t\t\"An EntitySet is required to be able to display a ListReport, please adjust your `entitySet` property to point to one.\"\n\t\t);\n\t}\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tconst viewsDefinition = manifestWrapper.getViewConfiguration();\n\tconst hasMultipleEntitySets = manifestWrapper.hasMultipleEntitySets();\n\tconst views = getViews(converterContext, viewsDefinition);\n\tconst lrTableVisualizations = getTableVisualizations(views);\n\tconst lrChartVisualizations = getChartVisualizations(views);\n\tconst showPinnableToggle = lrTableVisualizations.some((table) => table.control.type === \"ResponsiveTable\");\n\tlet singleTableId = \"\";\n\tlet singleChartId = \"\";\n\tconst dynamicListReportId = getDynamicListReportID();\n\tconst filterBarId = getFilterBarID(sContextPath);\n\tconst filterVariantManagementID = getFilterVariantManagementID(filterBarId);\n\tconst fbConfig = manifestWrapper.getFilterConfiguration();\n\tconst filterInitialLayout = fbConfig?.initialLayout !== undefined ? fbConfig?.initialLayout.toLowerCase() : \"compact\";\n\tconst filterLayout = fbConfig?.layout !== undefined ? fbConfig?.layout.toLowerCase() : \"compact\";\n\tconst useSemanticDateRange = fbConfig.useSemanticDateRange !== undefined ? fbConfig.useSemanticDateRange : true;\n\tconst showClearButton = fbConfig.showClearButton !== undefined ? fbConfig.showClearButton : false;\n\tconst config = getContentAreaId(views);\n\tif (config) {\n\t\tsingleChartId = config.chartId;\n\t\tsingleTableId = config.tableId;\n\t}\n\tconst useHiddenFilterBar = manifestWrapper.useHiddenFilterBar();\n\t// Chart has a dependency to filter bar (issue with loading data). Once resolved, the check for chart should be removed here.\n\t// Until then, hiding filter bar is now allowed if a chart is being used on LR.\n\tconst hideFilterBar = (manifestWrapper.isFilterBarHidden() || useHiddenFilterBar) && singleChartId === \"\";\n\tconst lrFilterProperties = getSelectionFields(converterContext, lrTableVisualizations);\n\tconst selectionFields = lrFilterProperties.selectionFields;\n\tconst propertyInfoFields = lrFilterProperties.sPropertyInfo;\n\tconst hideBasicSearch = getFilterBarHideBasicSearch(lrTableVisualizations, lrChartVisualizations, converterContext);\n\tconst multiViewControl = getMultiViewsControl(converterContext, views);\n\tconst selectionVariant = multiViewControl ? undefined : getSelectionVariant(entityType, converterContext);\n\tconst defaultSemanticDates = useSemanticDateRange ? getDefaultSemanticDates(getManifestFilterFields(entityType, converterContext)) : {};\n\t// Sort header actions according to position attributes in manifest\n\tconst headerActions = getHeaderActions(converterContext);\n\tif (hasMultipleEntitySets) {\n\t\tcheckChartFilterBarId(views, filterBarId);\n\t}\n\tconst visualizationIds = lrTableVisualizations\n\t\t.map((visualization) => {\n\t\t\t//pick up the table API id for the table, since that is the external control.\n\t\t\t// variant management still works because it can handle a control where the child has flex changes.\n\t\t\treturn visualization.annotation.apiId;\n\t\t})\n\t\t.concat(\n\t\t\tlrChartVisualizations.map((visualization) => {\n\t\t\t\treturn visualization.apiId;\n\t\t\t})\n\t\t);\n\tconst targetControlIds = [\n\t\t...(hideFilterBar && !useHiddenFilterBar ? [] : [filterBarId]),\n\t\t...(manifestWrapper.getVariantManagement() !== VariantManagementType.Control ? visualizationIds : []),\n\t\t...(multiViewControl ? [multiViewControl.id] : [])\n\t];\n\tconst stickySubheaderProvider =\n\t\tmultiViewControl && manifestWrapper.getStickyMultiTabHeaderConfiguration() ? multiViewControl.id : undefined;\n\n\t// Check if all tables on the main entity set are Tree or analytical tables. If that's the case, the draft editState filter shall not be shown\n\tconst disableDraftEditStateFilter =\n\t\t(capabilities?.HiddenDraft as HiddenDraft)?.enabled ||\n\t\tlrTableVisualizations.every((tableVisualization) => {\n\t\t\treturn (\n\t\t\t\ttableVisualization.control.type === \"TreeTable\" ||\n\t\t\t\ttableVisualization.enableAnalytics ||\n\t\t\t\ttableVisualization.annotation.collection !== sContextPath\n\t\t\t);\n\t\t});\n\n\treturn {\n\t\tmainEntitySet: sContextPath,\n\t\tmainEntityType: `${sContextPath}/`,\n\t\tmultiViewsControl: multiViewControl,\n\t\tstickySubheaderProvider,\n\t\tsingleTableId,\n\t\tsingleChartId,\n\t\tdynamicListReportId,\n\t\theaderActions,\n\t\teasyFilterEnabled: !hideFilterBar && capabilities?.MagicFiltering,\n\t\tshowPinnableToggle: showPinnableToggle,\n\t\tfilterBar: {\n\t\t\tpropertyInfo: propertyInfoFields,\n\t\t\tselectionFields,\n\t\t\thideBasicSearch,\n\t\t\tshowClearButton,\n\t\t\tdisableDraftEditStateFilter,\n\t\t\tshowDraftEditStatus: showDraftEditStatus(converterContext)\n\t\t},\n\t\tviews: views,\n\t\tfilterBarId: hideFilterBar && !useHiddenFilterBar ? \"\" : filterBarId,\n\t\tfilterConditions: {\n\t\t\tselectionVariant: selectionVariant,\n\t\t\tdefaultSemanticDates: defaultSemanticDates\n\t\t},\n\t\tvariantManagement: {\n\t\t\tid: filterVariantManagementID,\n\t\t\ttargetControlIds: targetControlIds.join(\",\")\n\t\t},\n\t\thasMultiVisualizations: hasMultiVisualizations(converterContext),\n\t\ttemplateType: manifestWrapper.getTemplateType(),\n\t\tuseSemanticDateRange,\n\t\tfilterInitialLayout,\n\t\tfilterLayout,\n\t\tkpiDefinitions: getKPIDefinitions(converterContext),\n\t\thideFilterBar,\n\t\tuseHiddenFilterBar,\n\t\tcollapsedHeaderFragment: manifestWrapper.getCollapsedHeaderFragment(),\n\t\texpandedHeaderFragment: manifestWrapper.getExpandedHeaderFragment()\n\t};\n};\n\n/**\n * Gets the content area ids of the list report.\n * @param views The definitions of the list report views\n * @returns The content area ids\n */\nfunction getContentAreaId(views: ListReportViewDefinition[]): ContentAreaID | undefined {\n\tconst singleTableId =\n\t\t\tviews.find(\n\t\t\t\t(view): view is CombinedViewDefinition | SingleTableViewDefinition =>\n\t\t\t\t\t(isViewDefinitionOfType<CombinedViewDefinition>(view, ViewDefinitionType.Combined) ||\n\t\t\t\t\t\tisViewDefinitionOfType<SingleTableViewDefinition>(view, ViewDefinitionType.SingleTable)) &&\n\t\t\t\t\t!!view.tableControlId\n\t\t\t)?.tableControlId ?? \"\",\n\t\tsingleChartId =\n\t\t\tviews.find(\n\t\t\t\t(view): view is CombinedViewDefinition | SingleChartViewDefinition =>\n\t\t\t\t\t(isViewDefinitionOfType<CombinedViewDefinition>(view, ViewDefinitionType.Combined) ||\n\t\t\t\t\t\tisViewDefinitionOfType<SingleChartViewDefinition>(view, ViewDefinitionType.SingleChart)) &&\n\t\t\t\t\t!!view.chartControlId\n\t\t\t)?.chartControlId ?? \"\";\n\tif (singleTableId || singleChartId) {\n\t\treturn {\n\t\t\tchartId: singleChartId,\n\t\t\ttableId: singleTableId\n\t\t};\n\t}\n\treturn undefined;\n}\n"],"mappings":"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","ignoreList":[]}