{"version":3,"names":["isAnnotationTerm","vAnnotationPath","getDataModelPathForEntitySet","resolvedMetaPath","convertedTypes","rootEntitySet","currentEntitySet","previousEntitySet","currentEntityType","navigatedPaths","navigationProperties","objectPath","forEach","objectPart","isServiceObject","_type","push","name","targetType","navigationPropertyBinding","hasOwnProperty","join","undefined","entityType","dataModelPath","startingEntitySet","targetEntityType","targetEntitySet","contextLocation","targetObject","target","ConverterContext","manifestWrapper","diagnostics","targetDataModelPath","baseContextPath","getTargetObjectPath","_proto","prototype","_getEntityTypeFromFullyQualifiedName","fullyQualifiedName","entityTypes","find","startsWith","replaceAnnotation","replace","getAnnotationEntityType","annotation","annotationPath","Error","getManifestControlConfiguration","getControlConfiguration","hasEntitySetKeyInManifest","getEntitySet","length","hasContextPathKeyInManifest","getContextPath","isPathAbsolute","hasMultipleEntitySets","Object","keys","getAbsoluteAnnotationPath","sAnnotationPath","getDataModelObjectPath","getEntityContainer","entityContainer","getEntityType","getParameterEntityType","parameterEntityType","isParameterized","annotations","Common","ResultContext","getEntityTypeAnnotation","includes","isAbsolute","path","base","split","endsWith","resolveAbsolutePath","dataModelObjectPath","getInvolvedDataModelObjectFromPath","visitedObjects","converterContext","getTemplateType","getConvertedTypes","getRelativeAnnotationPath","getEntitySetBasedAnnotationPath","entityTypeFQN","match","replacedAnnotationPath","substring","getManifestWrapper","getDiagnostics","resolvePath","getConverterContextFor","contextPath","targetPath","getAnnotationsByTerm","vocabularyName","annotationTerm","annotationSources","arguments","outAnnotations","annotationSource","filter","term","reduce","previousValue","key","getRelativeModelPathFunction","convertedMetaModel","sPath","singletonPath","singletonPathVisitor","enhancedPath","enhanceDataModelPath","contextRelativePath","getContextRelativeTargetObjectPath","createConverterContextForMacro","entityName","oMetaModelContext","mergeFn","oMetaModel","isA","getModel","oConvertedMetadata","convertTypes","entitySets","entitySet","singletons","ManifestWrapper","fetchTextFromMetaModel","ModelHelper"],"sourceRoot":".","sources":["ConverterContext.ts"],"sourcesContent":["import type {\n\tAnnotationTerm,\n\tConvertedMetadata,\n\tEntityContainer,\n\tEntitySet,\n\tEntityType,\n\tNavigationProperty,\n\tResolutionTarget,\n\tServiceObject,\n\tServiceObjectAndAnnotation,\n\tSingleton\n} from \"@sap-ux/vocabularies-types\";\nimport type { RecordComplexType } from \"@sap-ux/vocabularies-types/Edm\";\nimport type { EntityTypeAnnotations } from \"@sap-ux/vocabularies-types/vocabularies/Edm_Types\";\nimport type { BaseManifestSettings, ControlManifestConfiguration, TemplateType } from \"sap/fe/core/converters/ManifestSettings\";\nimport ManifestWrapper from \"sap/fe/core/converters/ManifestWrapper\";\nimport { convertTypes, getInvolvedDataModelObjectFromPath } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { IDiagnostics, PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { singletonPathVisitor } from \"sap/fe/core/helpers/BindingHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isServiceObject } from \"sap/fe/core/helpers/TypeGuards\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { enhanceDataModelPath, getContextRelativeTargetObjectPath, getTargetObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\n\nexport type ResolvedAnnotationContext<T> = {\n\tannotation: AnnotationTerm<T> | undefined;\n\tconverterContext: ConverterContext<PageContextPathTarget>;\n};\n\n/**\n * Checks whether an object is an annotation term.\n * @param vAnnotationPath\n * @returns `true` if it's an annotation term\n */\nconst isAnnotationTerm = function <T>(vAnnotationPath: string | AnnotationTerm<T>): vAnnotationPath is AnnotationTerm<T> {\n\treturn typeof vAnnotationPath === \"object\";\n};\n\nconst getDataModelPathForEntitySet = function <T>(\n\tresolvedMetaPath: ResolutionTarget<T>,\n\tconvertedTypes: ConvertedMetadata\n): DataModelObjectPath<T> {\n\tlet rootEntitySet: EntitySet | undefined;\n\tlet currentEntitySet: EntitySet | undefined;\n\tlet previousEntitySet: EntitySet | undefined;\n\tlet currentEntityType: EntityType | undefined;\n\tlet navigatedPaths: string[] = [];\n\tconst navigationProperties: NavigationProperty[] = [];\n\tresolvedMetaPath.objectPath.forEach((objectPart: ServiceObjectAndAnnotation) => {\n\t\tif (isServiceObject(objectPart)) {\n\t\t\tswitch (objectPart._type) {\n\t\t\t\tcase \"NavigationProperty\":\n\t\t\t\t\tnavigatedPaths.push(objectPart.name);\n\t\t\t\t\tnavigationProperties.push(objectPart);\n\t\t\t\t\tcurrentEntityType = objectPart.targetType;\n\t\t\t\t\tif (previousEntitySet && previousEntitySet.navigationPropertyBinding.hasOwnProperty(navigatedPaths.join(\"/\"))) {\n\t\t\t\t\t\tcurrentEntitySet = previousEntitySet.navigationPropertyBinding[navigatedPaths.join(\"/\")] as EntitySet;\n\t\t\t\t\t\tpreviousEntitySet = currentEntitySet;\n\t\t\t\t\t\tnavigatedPaths = [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentEntitySet = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"EntitySet\":\n\t\t\t\t\tif (rootEntitySet === undefined) {\n\t\t\t\t\t\trootEntitySet = objectPart;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentEntitySet = objectPart;\n\t\t\t\t\tpreviousEntitySet = currentEntitySet;\n\t\t\t\t\tcurrentEntityType = currentEntitySet?.entityType;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n\tconst dataModelPath: DataModelObjectPath<T> = {\n\t\tstartingEntitySet: rootEntitySet as EntitySet,\n\t\ttargetEntityType: currentEntityType as EntityType,\n\t\ttargetEntitySet: currentEntitySet,\n\t\tnavigationProperties: navigationProperties,\n\t\tcontextLocation: undefined,\n\t\ttargetObject: resolvedMetaPath.target,\n\t\tconvertedTypes: convertedTypes\n\t};\n\tdataModelPath.contextLocation = dataModelPath;\n\treturn dataModelPath;\n};\n\n/**\n * Create a ConverterContext object that will be used within the converters.\n * @param {ConvertedMetadata} oConvertedTypes The converted annotation and service types\n * @param {BaseManifestSettings} oManifestSettings The manifestSettings that applies to this page\n * @param {TemplateType} templateType The type of template we're looking at right now\n * @param {IDiagnostics} diagnostics The diagnostics shim\n * @param {Function} mergeFn The function to be used to perfom some deep merges between object\n * @param {DataModelObjectPath} targetDataModelPath The global path to reach the entitySet\n * @returns {ConverterContext} A converter context for the converters\n */\nclass ConverterContext<T = PageContextPathTarget> {\n\t//private manifestWrapper: ManifestWrapper;\n\n\tprivate baseContextPath: string;\n\n\tconstructor(\n\t\tprivate convertedTypes: ConvertedMetadata,\n\t\tprivate readonly manifestWrapper: ManifestWrapper,\n\t\tprivate diagnostics: IDiagnostics,\n\t\tprivate targetDataModelPath: DataModelObjectPath<T>\n\t) {\n\t\tthis.baseContextPath = getTargetObjectPath(this.targetDataModelPath);\n\t}\n\n\tprivate _getEntityTypeFromFullyQualifiedName(fullyQualifiedName: string): EntityType | undefined {\n\t\treturn this.convertedTypes.entityTypes.find((entityType) => {\n\t\t\tif (fullyQualifiedName.startsWith(entityType.fullyQualifiedName)) {\n\t\t\t\tconst replaceAnnotation = fullyQualifiedName.replace(entityType.fullyQualifiedName, \"\");\n\t\t\t\treturn replaceAnnotation.startsWith(\"/\") || replaceAnnotation.startsWith(\"@\");\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\t/**\n\t * Retrieve the entityType associated with an annotation object.\n\t * @param annotation The annotation object for which we want to find the entityType\n\t * @returns The EntityType the annotation refers to\n\t */\n\tgetAnnotationEntityType<TT extends ServiceObjectAndAnnotation>(\n\t\tannotation?: TT extends ServiceObject ? TT : AnnotationTerm<TT>\n\t): EntityType {\n\t\tif (annotation && typeof annotation === \"object\") {\n\t\t\tconst annotationPath = annotation.fullyQualifiedName;\n\t\t\tconst targetEntityType = this._getEntityTypeFromFullyQualifiedName(annotationPath);\n\t\t\tif (!targetEntityType) {\n\t\t\t\tthrow new Error(`Cannot find Entity Type for ${annotation.fullyQualifiedName}`);\n\t\t\t}\n\t\t\treturn targetEntityType;\n\t\t} else {\n\t\t\treturn this.targetDataModelPath.targetEntityType;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the manifest settings defined for a specific control within controlConfiguration.\n\t * @param annotationPath The annotation path or object to evaluate\n\t * @returns The control configuration for that specific annotation path if it exists\n\t */\n\tgetManifestControlConfiguration<TT = ControlManifestConfiguration>(annotationPath: string | AnnotationTerm<unknown>): TT {\n\t\tif (isAnnotationTerm(annotationPath)) {\n\t\t\treturn this.manifestWrapper.getControlConfiguration<TT>(\n\t\t\t\tannotationPath.fullyQualifiedName.replace(this.targetDataModelPath.targetEntityType.fullyQualifiedName, \"\")\n\t\t\t);\n\t\t}\n\t\tconst hasEntitySetKeyInManifest =\n\t\t\ttypeof this.manifestWrapper.getEntitySet() === \"string\" && this.manifestWrapper.getEntitySet()!.length > 0;\n\t\tconst hasContextPathKeyInManifest =\n\t\t\ttypeof this.manifestWrapper.getContextPath() === \"string\" && this.manifestWrapper.getContextPath()!.length > 0;\n\t\tconst isPathAbsolute = annotationPath.startsWith(\"/\");\n\t\t// In case of multiple-entitySet, we compare the entity set of the ControlConfiguration with what is specified either in the 'entitySet' or 'contextPath' manifest setting.\n\t\tif (!this.manifestWrapper.hasMultipleEntitySets()) {\n\t\t\treturn this.manifestWrapper.getControlConfiguration(annotationPath);\n\t\t} else if (\n\t\t\t!isPathAbsolute &&\n\t\t\t((hasEntitySetKeyInManifest && this.baseContextPath !== `/${this.manifestWrapper.getEntitySet()}`) ||\n\t\t\t\t(hasContextPathKeyInManifest && this.baseContextPath !== this.manifestWrapper.getContextPath()))\n\t\t) {\n\t\t\treturn this.manifestWrapper.getControlConfiguration(`${this.baseContextPath}/${annotationPath}`);\n\t\t} else if (Object.keys(this.manifestWrapper.getControlConfiguration(`${this.baseContextPath}/${annotationPath}`)).length > 0) {\n\t\t\treturn this.manifestWrapper.getControlConfiguration(`${this.baseContextPath}/${annotationPath}`);\n\t\t} else if (Object.keys(this.manifestWrapper.getControlConfiguration(annotationPath)).length > 0) {\n\t\t\treturn this.manifestWrapper.getControlConfiguration(annotationPath);\n\t\t}\n\t\treturn this.manifestWrapper.getControlConfiguration(`${this.baseContextPath}/${annotationPath}`);\n\t}\n\n\t/**\n\t * Create an absolute annotation path based on the current meta model context.\n\t * @param sAnnotationPath The relative annotation path\n\t * @returns The correct annotation path based on the current context\n\t */\n\tgetAbsoluteAnnotationPath(sAnnotationPath: string): string {\n\t\tif (!sAnnotationPath) {\n\t\t\treturn sAnnotationPath;\n\t\t}\n\t\tif (sAnnotationPath[0] === \"/\") {\n\t\t\treturn sAnnotationPath;\n\t\t}\n\t\treturn `${this.baseContextPath}/${sAnnotationPath}`;\n\t}\n\n\t/**\n\t * Retrieve the current entitySet.\n\t * @returns The current EntitySet if it exists.\n\t */\n\tgetEntitySet(): EntitySet | Singleton | undefined {\n\t\treturn this.targetDataModelPath.targetEntitySet as EntitySet | Singleton;\n\t}\n\n\t/**\n\t * Retrieve the context path.\n\t * @returns The context path of the converter.\n\t */\n\tgetContextPath(): string {\n\t\treturn this.baseContextPath;\n\t}\n\n\t/**\n\t * Retrieve the current data model object path.\n\t * @returns The current data model object path\n\t */\n\tgetDataModelObjectPath(): DataModelObjectPath<T> {\n\t\treturn this.targetDataModelPath;\n\t}\n\n\t/**\n\t * Get the EntityContainer.\n\t * @returns The current service EntityContainer\n\t */\n\tgetEntityContainer(): EntityContainer {\n\t\treturn this.convertedTypes.entityContainer;\n\t}\n\n\t/**\n\t * Get the EntityType based on the fully qualified name.\n\t * @returns The current EntityType.\n\t */\n\tgetEntityType(): EntityType {\n\t\treturn this.targetDataModelPath.targetEntityType;\n\t}\n\n\t/**\n\t * Gets the entity type of the parameter in case of a parameterized service.\n\t * @returns The entity type of the parameter\n\t */\n\tgetParameterEntityType(): EntityType {\n\t\tconst parameterEntityType = this.targetDataModelPath.startingEntitySet.entityType;\n\t\tconst isParameterized = !!parameterEntityType.annotations?.Common?.ResultContext;\n\t\treturn (isParameterized && parameterEntityType) as EntityType;\n\t}\n\n\t/**\n\t * Retrieves an annotation from an entity type based on annotation path.\n\t * @param annotationPath The annotation path to be evaluated\n\t * @returns The target annotation path as well as a converter context to go with it\n\t */\n\tgetEntityTypeAnnotation<TT extends ServiceObject | RecordComplexType>(annotationPath: string): ResolvedAnnotationContext<TT> {\n\t\tif (!annotationPath.includes(\"@\")) {\n\t\t\tthrow new Error(`Not an annotation path: '${annotationPath}'`);\n\t\t}\n\n\t\tconst isAbsolute = annotationPath.startsWith(\"/\");\n\t\tlet path: string;\n\n\t\tif (isAbsolute) {\n\t\t\t// path can be used as-is\n\t\t\tpath = annotationPath;\n\t\t} else {\n\t\t\t// build an absolute path based on the entity type (this function works on the type!)\n\t\t\tconst base = this.getContextPath().split(\"@\", 1)[0];\n\t\t\tpath = base.endsWith(\"/\") ? base + annotationPath : `${base}/${annotationPath}`;\n\t\t}\n\n\t\tconst target: ResolutionTarget<AnnotationTerm<TT>> = this.resolveAbsolutePath(path);\n\n\t\tconst dataModelObjectPath = getInvolvedDataModelObjectFromPath<PageContextPathTarget>(\n\t\t\t{ target: target.target as ServiceObject, visitedObjects: target.objectPath },\n\t\t\tthis.convertedTypes,\n\t\t\tisAbsolute ? undefined : this.targetDataModelPath.contextLocation,\n\t\t\ttrue\n\t\t);\n\n\t\treturn {\n\t\t\tannotation: target.target,\n\t\t\tconverterContext: new ConverterContext(this.convertedTypes, this.manifestWrapper, this.diagnostics, dataModelObjectPath)\n\t\t};\n\t}\n\n\t/**\n\t * Retrieve the type of template we're working on (e.g. ListReport / ObjectPage / ...).\n\t * @returns The current tenplate type\n\t */\n\tgetTemplateType(): TemplateType {\n\t\treturn this.manifestWrapper.getTemplateType();\n\t}\n\n\t/**\n\t * Retrieve the converted types.\n\t * @returns The current converted types\n\t */\n\tgetConvertedTypes(): ConvertedMetadata {\n\t\treturn this.convertedTypes;\n\t}\n\n\t/**\n\t * Retrieve a relative annotation path between an annotation path and an entity type.\n\t * @param annotationPath\n\t * @param entityType\n\t * @returns The relative anntotation path.\n\t */\n\tgetRelativeAnnotationPath(annotationPath: string, entityType: EntityType): string {\n\t\treturn annotationPath.replace(entityType.fullyQualifiedName, \"\");\n\t}\n\n\t/**\n\t * Transform an entityType based path to an entitySet based one (ui5 templating generally expect an entitySetBasedPath).\n\t * @param annotationPath\n\t * @returns The EntitySet based annotation path\n\t */\n\tgetEntitySetBasedAnnotationPath(annotationPath: string): string {\n\t\tif (!annotationPath) {\n\t\t\treturn annotationPath;\n\t\t}\n\t\tconst entityTypeFQN = this.targetDataModelPath.targetEntityType.fullyQualifiedName;\n\t\tif (\n\t\t\tthis.targetDataModelPath.targetEntitySet ||\n\t\t\t((this.baseContextPath.startsWith(\"/\") && this.baseContextPath.match(/\\//g)) || []).length > 1\n\t\t) {\n\t\t\tlet replacedAnnotationPath = annotationPath.replace(entityTypeFQN, \"/\");\n\t\t\tif (replacedAnnotationPath.length > 2 && replacedAnnotationPath[0] === \"/\" && replacedAnnotationPath[1] === \"/\") {\n\t\t\t\treplacedAnnotationPath = replacedAnnotationPath.substring(1);\n\t\t\t}\n\t\t\treturn this.baseContextPath + (replacedAnnotationPath.startsWith(\"/\") ? replacedAnnotationPath : `/${replacedAnnotationPath}`);\n\t\t} else {\n\t\t\treturn `/${annotationPath}`;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the manifest wrapper for the current context.\n\t * @returns The current manifest wrapper\n\t */\n\tgetManifestWrapper(): ManifestWrapper {\n\t\treturn this.manifestWrapper;\n\t}\n\n\tgetDiagnostics(): IDiagnostics {\n\t\treturn this.diagnostics;\n\t}\n\n\t/**\n\t * Retrieve the target from an absolute path.\n\t * @param path The path we want to get the target\n\t * @returns The absolute path\n\t */\n\tresolveAbsolutePath<TT>(path: string): ResolutionTarget<TT> {\n\t\treturn this.convertedTypes.resolvePath(path);\n\t}\n\n\t/**\n\t * Retrieve a new converter context, scoped for a different context path.\n\t * @param contextPath The path we want to orchestrate the converter context around\n\t * @returns The converted context for the sub path\n\t */\n\tgetConverterContextFor<K>(contextPath: string): ConverterContext<K> {\n\t\tconst resolvedMetaPath: ResolutionTarget<K> = this.convertedTypes.resolvePath<K>(contextPath);\n\t\tconst targetPath = getDataModelPathForEntitySet(resolvedMetaPath, this.convertedTypes);\n\t\treturn new ConverterContext<K>(this.convertedTypes, this.manifestWrapper, this.diagnostics, targetPath);\n\t}\n\n\t/**\n\t * Get all annotations of a given term and vocabulary on an entity type\n\t * (or on the current entity type if entityType isn't specified).\n\t * @param vocabularyName\n\t * @param annotationTerm\n\t * @param [annotationSources]\n\t * @returns All the annotation for a specific term and vocabulary from an entity type\n\t */\n\tgetAnnotationsByTerm<TT>(\n\t\tvocabularyName: keyof EntityTypeAnnotations,\n\t\tannotationTerm: string,\n\t\tannotationSources: (ServiceObject | undefined)[] = [this.getEntityType()]\n\t): AnnotationTerm<TT>[] {\n\t\tlet outAnnotations: AnnotationTerm<TT>[] = [];\n\t\tannotationSources.forEach((annotationSource) => {\n\t\t\tif (annotationSource) {\n\t\t\t\tconst annotations: Record<string, AnnotationTerm<TT> & { term: string }> =\n\t\t\t\t\tannotationSource?.annotations[vocabularyName] || {};\n\t\t\t\tif (annotations) {\n\t\t\t\t\toutAnnotations = Object.keys(annotations)\n\t\t\t\t\t\t.filter((annotation) => annotations[annotation].term === annotationTerm)\n\t\t\t\t\t\t.reduce((previousValue: AnnotationTerm<TT>[], key: string) => {\n\t\t\t\t\t\t\tpreviousValue.push(annotations[key]);\n\t\t\t\t\t\t\treturn previousValue;\n\t\t\t\t\t\t}, outAnnotations);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn outAnnotations;\n\t}\n\n\t/**\n\t * Retrieves the relative model path based on the current context path.\n\t * @returns The relative model path or undefined if the path is not resolveable\n\t */\n\tgetRelativeModelPathFunction(): Function {\n\t\tconst targetDataModelPath = this.targetDataModelPath;\n\t\tconst convertedMetaModel = this.convertedTypes;\n\t\treturn function (sPath: string) {\n\t\t\tconst singletonPath = singletonPathVisitor(sPath, convertedMetaModel, []);\n\t\t\tconst enhancedPath = enhanceDataModelPath(targetDataModelPath, sPath);\n\t\t\tconst contextRelativePath = getContextRelativeTargetObjectPath(enhancedPath, true);\n\t\t\tif (contextRelativePath) {\n\t\t\t\treturn contextRelativePath;\n\t\t\t}\n\t\t\treturn singletonPath;\n\t\t};\n\t}\n\n\t/**\n\t * Create the converter context necessary for a macro based on a metamodel context.\n\t * @param entityName\n\t * @param oMetaModelContext\n\t * @param diagnostics\n\t * @param mergeFn\n\t * @param targetDataModelPath\n\t * @param manifestWrapper\n\t * @returns The current converter context\n\t */\n\tstatic createConverterContextForMacro(\n\t\tentityName: string,\n\t\toMetaModelContext: Context | ODataMetaModel,\n\t\tdiagnostics: IDiagnostics,\n\t\tmergeFn: Function,\n\t\ttargetDataModelPath?: DataModelObjectPath<PageContextPathTarget>,\n\t\tmanifestWrapper?: ManifestWrapper\n\t): ConverterContext<PageContextPathTarget> {\n\t\tconst oMetaModel: ODataMetaModel = oMetaModelContext.isA(\"sap.ui.model.odata.v4.ODataMetaModel\")\n\t\t\t? (oMetaModelContext as ODataMetaModel)\n\t\t\t: ((oMetaModelContext as Context).getModel() as unknown as ODataMetaModel);\n\t\tconst oConvertedMetadata = convertTypes(oMetaModel);\n\t\tlet targetEntitySet: Singleton | EntitySet = oConvertedMetadata.entitySets.find(\n\t\t\t(entitySet) => entitySet.name === entityName\n\t\t) as EntitySet;\n\t\tif (!targetEntitySet) {\n\t\t\ttargetEntitySet = oConvertedMetadata.singletons.find((entitySet) => entitySet.name === entityName) as Singleton;\n\t\t}\n\t\tif (!targetDataModelPath || targetEntitySet !== targetDataModelPath.startingEntitySet) {\n\t\t\ttargetDataModelPath = {\n\t\t\t\tstartingEntitySet: targetEntitySet,\n\t\t\t\tnavigationProperties: [],\n\t\t\t\ttargetEntitySet: targetEntitySet,\n\t\t\t\t// contained entity does not have an entity set but only entity type\n\t\t\t\ttargetEntityType:\n\t\t\t\t\ttargetEntitySet?.entityType || oConvertedMetadata.entityTypes.find((entityType) => entityType.name === entityName),\n\t\t\t\ttargetObject: targetEntitySet as EntitySet,\n\t\t\t\tconvertedTypes: oConvertedMetadata\n\t\t\t};\n\t\t}\n\t\tif (!manifestWrapper) {\n\t\t\tmanifestWrapper = new ManifestWrapper({} as BaseManifestSettings);\n\t\t}\n\t\treturn new ConverterContext(oConvertedMetadata, manifestWrapper, diagnostics, targetDataModelPath);\n\t}\n\n\t/**\n\t * Resolves a metadata binding to its text.\n\t * @param path\n\t * @returns The resolved text if possible, else the input value or an empty string if the path was undefined\n\t */\n\tfetchTextFromMetaModel(path: string | undefined): string {\n\t\treturn ModelHelper.fetchTextFromMetaModel(path, this);\n\t}\n}\n\nexport default ConverterContext;\n"],"mappings":"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","ignoreList":[],"file":"ConverterContext-dbg.js"}