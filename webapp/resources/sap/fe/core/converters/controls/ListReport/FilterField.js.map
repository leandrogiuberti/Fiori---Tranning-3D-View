{"version":3,"file":"FilterField.js","names":["ALLOWED_EXPRESSIONS_PRIORITY","getSpecificAllowedExpression","expressions","sort","a","b","indexOf","getAllowedFilterExpressionForFilterRestictions","propertyName","filterRestictions","fR","FilterExpressionRestrictions","find","fr","Property","value","AllowedExpressions","toString","getAllowedFilterExpressionForProperty","propertyObjectPath","targetEntityType","annotations","Common","ResultContext","valueOf","navProps","navigationProperties","lastNavProp","length","isContainment","containsTarget","targetObject","name","Log","warning","allowedExps","navPropFR","Capabilities","FilterRestrictions","navPropAllowedExp","concat","parentEntitySet","parentNavigationPath","getTargetEntitySetInfo","parentFRAllowedExp","parentNR","NavigationRestrictions","RestrictedProperties","rp","NavigationProperty","parentNRAllowedExp","legacyParenNRtAllowedExp","targetEntitySet","allowedExp","_exports","getMaxConditions","max","allowedExpression","type"],"sources":["./FilterField.ts"],"sourcesContent":["import type { NavigationProperty, Property } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tFilterExpressionType,\n\tFilterRestrictions,\n\tFilterRestrictionsType\n} from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type { EntitySetAnnotations_Capabilities } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities_Edm\";\nimport Log from \"sap/base/Log\";\nimport { getTargetEntitySetInfo, type DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\n\nconst ALLOWED_EXPRESSIONS_PRIORITY = [\n\t\"SingleValue\",\n\t\"MultiValue\",\n\t\"SingleRange\",\n\t\"MultiRange\",\n\t\"SearchExpression\",\n\t\"MultiRangeOrSearchExpression\"\n];\n\n/**\n * Get allowed filter expression by priority.\n * @param expressions Allowed filter expressions from different sources.\n * @returns Allowed filter expression\n */\nfunction getSpecificAllowedExpression(expressions: string[]): string {\n\texpressions.sort(function (a: string, b: string) {\n\t\treturn ALLOWED_EXPRESSIONS_PRIORITY.indexOf(a) - ALLOWED_EXPRESSIONS_PRIORITY.indexOf(b);\n\t});\n\n\treturn expressions[0];\n}\n\n/**\n * Get allowed filter expression from filter restrictions.\n * @param propertyName Property name\n * @param filterRestictions Filter restrictions\n * @returns Allowed filter expression\n */\nfunction getAllowedFilterExpressionForFilterRestictions(\n\tpropertyName: string,\n\tfilterRestictions?: FilterRestrictions | FilterRestrictionsType\n): string | undefined {\n\tconst fR = filterRestictions?.FilterExpressionRestrictions?.find((fr) => fr.Property?.value === propertyName);\n\treturn fR?.AllowedExpressions?.toString();\n}\n\n/**\n * Get the allowed filter expression for a property.\n * @param propertyObjectPath Property object path\n * @returns Allowed filter expression\n */\nexport function getAllowedFilterExpressionForProperty<T extends Property>(\n\tpropertyObjectPath: DataModelObjectPath<T>\n): FilterExpressionType | undefined {\n\tif (propertyObjectPath.targetEntityType.annotations.Common?.ResultContext?.valueOf() === true) {\n\t\t// It is a Parameter\n\t\treturn \"SingleValue\";\n\t}\n\n\tconst navProps = propertyObjectPath.navigationProperties as NavigationProperty[];\n\tconst lastNavProp = navProps[navProps.length - 1];\n\tconst isContainment = lastNavProp?.containsTarget;\n\tconst propertyName = propertyObjectPath.targetObject?.name;\n\tif (!propertyName) {\n\t\tLog.warning(`Property name not found!`);\n\t\treturn;\n\t}\n\tlet allowedExps: string[] = [];\n\tif (lastNavProp) {\n\t\t// Allowed Exp at parent navigation property\n\t\tconst navPropFR = (lastNavProp.annotations.Capabilities as EntitySetAnnotations_Capabilities)?.FilterRestrictions;\n\t\tconst navPropAllowedExp = getAllowedFilterExpressionForFilterRestictions(propertyName, navPropFR);\n\t\tallowedExps = allowedExps.concat(navPropAllowedExp ? [navPropAllowedExp] : []);\n\n\t\tconst { parentEntitySet, parentNavigationPath } = getTargetEntitySetInfo(propertyObjectPath);\n\n\t\t// Allowed Exp at parent entitySet.\n\t\tconst parentFRAllowedExp = getAllowedFilterExpressionForFilterRestictions(\n\t\t\t`${parentNavigationPath}/${propertyName}`,\n\t\t\t(parentEntitySet?.annotations.Capabilities as EntitySetAnnotations_Capabilities)?.FilterRestrictions\n\t\t);\n\t\tallowedExps = allowedExps.concat(parentFRAllowedExp ? [parentFRAllowedExp] : []);\n\n\t\t// Allowed Exp at parent entitySet Nav Restrictions.\n\t\tconst parentNR = parentEntitySet?.annotations.Capabilities?.NavigationRestrictions?.RestrictedProperties.find(\n\t\t\t(rp) => rp.NavigationProperty.value === parentNavigationPath\n\t\t);\n\t\t// New way property name in restriction is expected to have navigation path at the start of it.\n\t\tconst parentNRAllowedExp = getAllowedFilterExpressionForFilterRestictions(\n\t\t\t`${parentNavigationPath}/${propertyName}`,\n\t\t\tparentNR?.FilterRestrictions\n\t\t);\n\t\tallowedExps = allowedExps.concat(parentNRAllowedExp ? [parentNRAllowedExp] : []);\n\n\t\t// Old way property name in restriction is relative to navigation path of the navigation restriction.\n\t\tconst legacyParenNRtAllowedExp = getAllowedFilterExpressionForFilterRestictions(propertyName, parentNR?.FilterRestrictions);\n\t\tallowedExps = allowedExps.concat(legacyParenNRtAllowedExp ? [legacyParenNRtAllowedExp] : []);\n\t}\n\n\t// Allowed Exp at target entitySet.\n\tif (!isContainment && propertyObjectPath.targetEntitySet) {\n\t\tconst targetEntitySet = propertyObjectPath.targetEntitySet;\n\t\tconst filterRestictions = (targetEntitySet.annotations.Capabilities as EntitySetAnnotations_Capabilities)?.FilterRestrictions;\n\n\t\tconst allowedExp = getAllowedFilterExpressionForFilterRestictions(propertyName, filterRestictions);\n\t\tallowedExps = allowedExps.concat(allowedExp ? [allowedExp] : []);\n\t}\n\treturn getSpecificAllowedExpression(allowedExps);\n}\n\n/**\n * Checks the maximum number of filter conditions for a property.\n * @param propertyObjectPath Property object path\n * @returns The number of maximum allowed conditions or -1 if there is no limit.\n */\nexport function getMaxConditions<T extends Property>(propertyObjectPath: DataModelObjectPath<T>): number {\n\tlet max = -1;\n\n\tconst allowedExpression = getAllowedFilterExpressionForProperty(propertyObjectPath);\n\tif (\n\t\tpropertyObjectPath.targetObject?.type === \"Edm.Boolean\" ||\n\t\tallowedExpression === \"SingleValue\" ||\n\t\tallowedExpression === \"SingleRange\"\n\t) {\n\t\tmax = 1;\n\t}\n\n\treturn max;\n}\n"],"mappings":";;;;+IAUA,MAAMA,EAA+B,CACpC,cACA,aACA,cACA,aACA,mBACA,gCAQD,SAASC,EAA6BC,GACrCA,EAAYC,KAAK,SAAUC,EAAWC,GACrC,OAAOL,EAA6BM,QAAQF,GAAKJ,EAA6BM,QAAQD,EACvF,GAEA,OAAOH,EAAY,EACpB,CAQA,SAASK,EACRC,EACAC,GAEA,MAAMC,EAAKD,GAAmBE,8BAA8BC,KAAMC,GAAOA,EAAGC,UAAUC,QAAUP,GAChG,OAAOE,GAAIM,oBAAoBC,UAChC,CAOO,SAASC,EACfC,GAEA,GAAIA,EAAmBC,iBAAiBC,YAAYC,QAAQC,eAAeC,YAAc,KAAM,CAE9F,MAAO,aACR,CAEA,MAAMC,EAAWN,EAAmBO,qBACpC,MAAMC,EAAcF,EAASA,EAASG,OAAS,GAC/C,MAAMC,EAAgBF,GAAaG,eACnC,MAAMtB,EAAeW,EAAmBY,cAAcC,KACtD,IAAKxB,EAAc,CAClByB,EAAIC,QAAQ,4BACZ,MACD,CACA,IAAIC,EAAwB,GAC5B,GAAIR,EAAa,CAEhB,MAAMS,EAAaT,EAAYN,YAAYgB,cAAoDC,mBAC/F,MAAMC,EAAoBhC,EAA+CC,EAAc4B,GACvFD,EAAcA,EAAYK,OAAOD,EAAoB,CAACA,GAAqB,IAE3E,MAAME,gBAAEA,EAAeC,qBAAEA,GAAyBC,EAAuBxB,GAGzE,MAAMyB,EAAqBrC,EAC1B,GAAGmC,KAAwBlC,IAC1BiC,GAAiBpB,YAAYgB,cAAoDC,oBAEnFH,EAAcA,EAAYK,OAAOI,EAAqB,CAACA,GAAsB,IAG7E,MAAMC,EAAWJ,GAAiBpB,YAAYgB,cAAcS,wBAAwBC,qBAAqBnC,KACvGoC,GAAOA,EAAGC,mBAAmBlC,QAAU2B,GAGzC,MAAMQ,EAAqB3C,EAC1B,GAAGmC,KAAwBlC,IAC3BqC,GAAUP,oBAEXH,EAAcA,EAAYK,OAAOU,EAAqB,CAACA,GAAsB,IAG7E,MAAMC,EAA2B5C,EAA+CC,EAAcqC,GAAUP,oBACxGH,EAAcA,EAAYK,OAAOW,EAA2B,CAACA,GAA4B,GAC1F,CAGA,IAAKtB,GAAiBV,EAAmBiC,gBAAiB,CACzD,MAAMA,EAAkBjC,EAAmBiC,gBAC3C,MAAM3C,EAAqB2C,EAAgB/B,YAAYgB,cAAoDC,mBAE3G,MAAMe,EAAa9C,EAA+CC,EAAcC,GAChF0B,EAAcA,EAAYK,OAAOa,EAAa,CAACA,GAAc,GAC9D,CACA,OAAOpD,EAA6BkC,EACrC,CAEAmB,EAAApC,wCAKO,SAASqC,EAAqCpC,GACpD,IAAIqC,GAAO,EAEX,MAAMC,EAAoBvC,EAAsCC,GAChE,GACCA,EAAmBY,cAAc2B,OAAS,eAC1CD,IAAsB,eACtBA,IAAsB,cACrB,CACDD,EAAM,CACP,CAEA,OAAOA,CACR,CAACF,EAAAC,mBAAA,OAAAD,CAAA","ignoreList":[]}