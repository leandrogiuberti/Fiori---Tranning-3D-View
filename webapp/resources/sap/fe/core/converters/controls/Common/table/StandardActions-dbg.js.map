{"version":3,"names":["StandardActionKeys","Cut","Copy","Create","Delete","CreationRow","Paste","MassEdit","Insights","MoveUp","MoveDown","_exports","generateStandardActionsContext","converterContext","creationMode","tableManifestConfiguration","collectionPath","getTargetObjectPath","getDataModelObjectPath","hiddenAnnotation","create","isActionAnnotatedHidden","delete","update","isDraftOrStickySupported","newAction","getNewAction","restrictions","getRestrictions","dataModelObjectPath","bIsDraftSupported","ModelHelper","isObjectPathDraftSupported","bIsStickySessionSupported","startingEntitySet","annotations","Session","StickySessionSupported","currentEntitySet","getEntitySet","isEntitySet","Common","DraftRoot","NewAction","undefined","newActionName","toString","availableProperty","getEntityType","actions","Core","OperationAvailable","name","available","getExpressionFromAnnotation","sAnnotationTerm","bWithNavigationPath","arguments","length","actionAnnotationValue","isSingleton","UI","constant","visitedNavigationPaths","getRelativePaths","path","singletonPathVisitor","getConvertedTypes","restrictionsDef","key","function","isPathInsertable","isPathUpdatable","isPathDeletable","result","forEach","def","defFunction","expression","apply","pathVisitor","navigationPaths","navigationExpression","ignoreTargetCollection","authorizeUnresolvable","getInsertUpdateActionsTemplating","standardActionsContext","isDraftOrSticky","CreationMode","External","getStandardActionCreate","createVisibility","getCreateVisibility","isTemplated","compileExpression","getCreateTemplating","visible","visibleExpression","enabled","getCreateEnablement","enabledForContextMenu","type","ActionType","Standard","getStandardActionCut","cutVisibility","getCutVisibility","getDefaultTemplating","getCutEnablement","getStandardActionCopy","copyVisibility","getCopyVisibility","getCopyEnablement","getStandardActionMoveUpDown","forUp","canChangeSibling","Hierarchy","hierarchyQualifier","ChangeNextSiblingAction","moveVisibility","and","getMoveUpDownEnablement","getStandardActionDelete","deleteVisibility","getDeleteVisibility","getDeleteEnablement","getCreationRow","creationRowVisibility","getCreationRowEnablement","pathUpdatableExpression","isUpdatable","templateBindingExpression","getTemplateType","TemplateType","ListReport","IsEditable","ifElse","equal","isHierarchyParentNodeUpdatable","not","isConstant","availableCopyAction","CopyAction","getStandardActionPaste","isInsertUpdateActionsTemplated","pasteVisibility","getPasteVisibility","pasteEnablement","getPasteEnablement","pasteEnablementForContextMenu","getStandardActionMassEdit","massEditVisibility","getMassEditVisibility","getMassEditEnablement","getStandardActionInsights","visualizationPath","insightsVisibility","getInsightsVisibility","insightsEnablement","getInsightsEnablement","isForCreationRow","or","actionVisibility","hideCreateDeleteInAnalyticalTable","isForPaste","isInsertable","isCreateHidden","InlineCreationRows","inlineCreationRowsHiddenInEditMode","IsCreateMode","isPathInModelExpression","isDeleteHidden","pathDeletableExpression","isDeletable","AnalyticalListPage","updateOnNavigation","_type","notEqual","enablePaste","includes","isUpdateHidden","massEditEnabledInManifest","massEdit","ObjectPage","FreeStylePage","restrictionsInsertable","indexOf","navigationProperties","lastNav","partner","isNavigationProperty","disableAddRowButtonForEmptyData","formatResult","pathInModel","tableFormatters","validateCreationRowFields","forContextMenu","conditions","contextPath","push","CollectionType","resolveAbsolutePath","target","lessOrEqual","createEnablement","deletableContexts","unSavedContexts","draftsWithDeletableActive","draftsWithNonDeletableActive","greaterThan","pasteEnablementPath","isOnlyDynamicOnCurrentEntity","numberOfSelectedContextProperty","updatableContextProperty","numberOfSelectedContexts","greaterOrEqual","numberOfUpdatableContexts","bDisplayMode","isInDisplayMode","runtimeBinding","cutableContextsPath","copyableContextsPath","moveUpDownVisibility","singleContextMovableUp","singleContextMovableDown","checkMultipleVisualization","getManifestWrapper","hasInlineEdit","templateType","hasMultipleVisualizations"],"sourceRoot":".","sources":["StandardActions.ts"],"sourcesContent":["import type { Boolean, EntitySet } from \"@sap-ux/vocabularies-types\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tgreaterOrEqual,\n\tgreaterThan,\n\tifElse,\n\tisConstant,\n\tisPathInModelExpression,\n\tlength,\n\tlessOrEqual,\n\tnot,\n\tnotEqual,\n\tor,\n\tpathInModel\n} from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { BaseAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { isEntitySet, isNavigationProperty, isSingleton } from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tgetRelativePaths,\n\tgetTargetObjectPath,\n\tisPathDeletable,\n\tisPathInsertable,\n\tisPathUpdatable\n} from \"sap/fe/core/templating/DataModelPathHelper\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport tableFormatters from \"sap/fe/macros/formatters/TableFormatter\";\nimport { UI, singletonPathVisitor } from \"../../../../helpers/BindingHelper\";\nimport type ConverterContext from \"../../../ConverterContext\";\nimport { ActionType, CreationMode, TemplateType } from \"../../../ManifestSettings\";\nimport { getInsightsEnablement, getInsightsVisibility } from \"../../../helpers/InsightsHelpers\";\nimport type { TableControlConfiguration } from \"../Table\";\n\nexport type StandardAction = BaseAction & {\n\ttype: ActionType.Standard;\n\tisTemplated?: CompiledBindingToolkitExpression;\n\tvisible: CompiledBindingToolkitExpression;\n\tvisibleExpression?: BindingToolkitExpression<boolean>;\n\tenabled: CompiledBindingToolkitExpression;\n\tenabledForContextMenu?: CompiledBindingToolkitExpression;\n};\n\ntype ExpressionRestrictionsType = {\n\texpression: BindingToolkitExpression<boolean>;\n\tnavigationExpression: BindingToolkitExpression<boolean>;\n};\ntype StandardActionsRestrictionsType = Record<string, ExpressionRestrictionsType>;\n\nexport type StandardActionsContext = {\n\tcollectionPath: string;\n\thiddenAnnotation: {\n\t\tcreate: BindingToolkitExpression<boolean>;\n\t\tdelete: BindingToolkitExpression<boolean>;\n\t\tupdate: BindingToolkitExpression<boolean>;\n\t};\n\tcreationMode: CreationMode;\n\tisDraftOrStickySupported: boolean;\n\tnewAction?: {\n\t\tname: string;\n\t\tavailable: BindingToolkitExpression<boolean>;\n\t};\n\ttableManifestConfiguration: TableControlConfiguration;\n\trestrictions: StandardActionsRestrictionsType;\n};\n\nexport const StandardActionKeys = {\n\tCut: \"StandardAction::Cut\",\n\tCopy: \"StandardAction::Copy\",\n\tCreate: \"StandardAction::Create\",\n\tDelete: \"StandardAction::Delete\",\n\tCreationRow: \"StandardAction::CreationRow\",\n\tPaste: \"StandardAction::Paste\",\n\tMassEdit: \"StandardAction::MassEdit\",\n\tInsights: \"StandardAction::Insights\",\n\tMoveUp: \"StandardAction::MoveUp\",\n\tMoveDown: \"StandardAction::MoveDown\"\n};\n\n/**\n * Generates context for the standard actions.\n * @param converterContext\n * @param creationMode\n * @param tableManifestConfiguration\n * @returns  The context for table actions\n */\nexport function generateStandardActionsContext(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tcreationMode: CreationMode,\n\ttableManifestConfiguration: TableControlConfiguration\n): StandardActionsContext {\n\treturn {\n\t\tcollectionPath: getTargetObjectPath(converterContext.getDataModelObjectPath()),\n\t\thiddenAnnotation: {\n\t\t\tcreate: isActionAnnotatedHidden(converterContext, \"CreateHidden\"),\n\t\t\tdelete: isActionAnnotatedHidden(converterContext, \"DeleteHidden\"),\n\t\t\tupdate: isActionAnnotatedHidden(converterContext, \"UpdateHidden\")\n\t\t},\n\t\tcreationMode: creationMode,\n\t\tisDraftOrStickySupported: isDraftOrStickySupported(converterContext),\n\t\tnewAction: getNewAction(converterContext),\n\t\ttableManifestConfiguration: tableManifestConfiguration,\n\t\trestrictions: getRestrictions(converterContext)\n\t};\n}\n\n/**\n * Checks if sticky or draft is supported.\n * @param converterContext\n * @returns `true` if it is supported\n */\nexport function isDraftOrStickySupported(converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst bIsDraftSupported = ModelHelper.isObjectPathDraftSupported(dataModelObjectPath);\n\tconst bIsStickySessionSupported = (dataModelObjectPath.startingEntitySet as EntitySet)?.annotations?.Session?.StickySessionSupported\n\t\t? true\n\t\t: false;\n\n\treturn bIsDraftSupported || bIsStickySessionSupported;\n}\n\n/**\n * Gets the configured newAction into annotation.\n * @param converterContext\n * @returns The new action info\n */\nexport function getNewAction(\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): { name: string; available: BindingToolkitExpression<boolean> } | undefined {\n\tconst currentEntitySet = converterContext.getEntitySet();\n\tconst newAction = isEntitySet(currentEntitySet)\n\t\t? currentEntitySet.annotations.Common?.DraftRoot?.NewAction ??\n\t\t  currentEntitySet.annotations.Session?.StickySessionSupported?.NewAction\n\t\t: undefined;\n\tconst newActionName: CompiledBindingToolkitExpression = newAction?.toString();\n\tif (newActionName) {\n\t\tconst availableProperty = converterContext?.getEntityType().actions[newActionName]?.annotations?.Core?.OperationAvailable;\n\t\treturn {\n\t\t\tname: newActionName,\n\t\t\tavailable: getExpressionFromAnnotation<Boolean>(availableProperty, [], true)\n\t\t};\n\t}\n\treturn undefined;\n}\n\n/**\n * Gets the binding expression for the action visibility configured into annotation.\n * @param converterContext\n * @param sAnnotationTerm\n * @param bWithNavigationPath\n * @returns The binding expression for the action visibility\n */\nexport function isActionAnnotatedHidden(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tsAnnotationTerm: \"CreateHidden\" | \"UpdateHidden\" | \"DeleteHidden\",\n\tbWithNavigationPath = true\n): BindingToolkitExpression<boolean> {\n\t// The annotations in question (CreateHidden, DeleteHidden, UpdateHidden) most specifically can be defined on EntitySet.\n\t// In several cases, fallback to EntityType needs to be checked:\n\t// - In case of singleton (annotations do not apply)\n\t// - EntitySet cannot be determined (containment or no navigationPropertyBinding)\n\t// - EntitySet can be determined, but the annotation is not defined there\n\n\tconst currentEntitySet = converterContext.getEntitySet();\n\tconst actionAnnotationValue =\n\t\t(!isSingleton(currentEntitySet) && currentEntitySet?.annotations.UI?.[sAnnotationTerm]) ||\n\t\tconverterContext.getEntityType().annotations.UI?.[sAnnotationTerm];\n\n\tif (!actionAnnotationValue) {\n\t\treturn constant(false);\n\t}\n\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst visitedNavigationPaths = getRelativePaths(dataModelObjectPath);\n\treturn getExpressionFromAnnotation(actionAnnotationValue, visitedNavigationPaths, undefined, (path: string) =>\n\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), visitedNavigationPaths)\n\t);\n}\n\n/**\n * Gets the annotated restrictions for the actions.\n * @param converterContext\n * @returns The restriction information\n */\nexport function getRestrictions(converterContext: ConverterContext<PageContextPathTarget>): StandardActionsRestrictionsType {\n\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\tconst restrictionsDef = [\n\t\t{\n\t\t\tkey: \"isInsertable\",\n\t\t\tfunction: isPathInsertable\n\t\t},\n\t\t{\n\t\t\tkey: \"isUpdatable\",\n\t\t\tfunction: isPathUpdatable\n\t\t},\n\t\t{\n\t\t\tkey: \"isDeletable\",\n\t\t\tfunction: isPathDeletable\n\t\t}\n\t];\n\tconst result: Record<string, ExpressionRestrictionsType> = {};\n\trestrictionsDef.forEach(function (def) {\n\t\tconst defFunction = def[\"function\"];\n\t\tresult[def.key] = {\n\t\t\texpression: defFunction.apply(null, [\n\t\t\t\tdataModelObjectPath,\n\t\t\t\t{\n\t\t\t\t\tpathVisitor: (path: string, navigationPaths: string[]) =>\n\t\t\t\t\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)\n\t\t\t\t}\n\t\t\t]),\n\t\t\tnavigationExpression: defFunction.apply(null, [\n\t\t\t\tdataModelObjectPath,\n\t\t\t\t{\n\t\t\t\t\tignoreTargetCollection: true,\n\t\t\t\t\tauthorizeUnresolvable: true,\n\t\t\t\t\tpathVisitor: (path: string, navigationPaths: string[]) =>\n\t\t\t\t\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)\n\t\t\t\t}\n\t\t\t])\n\t\t};\n\t});\n\treturn result;\n}\n\n/**\n * Checks if templating for insert/update actions is mandatory.\n * @param standardActionsContext\n * @param isDraftOrSticky\n * @returns True if we need to template insert or update actions, false otherwise\n */\nexport function getInsertUpdateActionsTemplating(standardActionsContext: StandardActionsContext, isDraftOrSticky: boolean): boolean {\n\treturn isDraftOrSticky || standardActionsContext.creationMode === CreationMode.External;\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Create' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The standard action info\n */\nexport function getStandardActionCreate(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst createVisibility = getCreateVisibility(converterContext, standardActionsContext);\n\treturn {\n\t\tisTemplated: compileExpression(getCreateTemplating(standardActionsContext, createVisibility)),\n\t\tvisible: compileExpression(createVisibility),\n\t\tvisibleExpression: createVisibility,\n\t\tenabled: compileExpression(getCreateEnablement(converterContext, standardActionsContext, createVisibility)),\n\t\tenabledForContextMenu: compileExpression(getCreateEnablement(converterContext, standardActionsContext, createVisibility, true)),\n\t\tkey: StandardActionKeys.Create,\n\t\ttype: ActionType.Standard\n\t};\n}\n/**\n * Gets the binding expressions for the properties of the 'Cut' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The standard action info\n */\nexport function getStandardActionCut(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst cutVisibility = getCutVisibility(converterContext, standardActionsContext);\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(cutVisibility)),\n\t\tvisible: compileExpression(cutVisibility),\n\t\tenabled: compileExpression(getCutEnablement(cutVisibility, standardActionsContext, false)),\n\t\tenabledForContextMenu: compileExpression(getCutEnablement(cutVisibility, standardActionsContext, true)),\n\t\tkey: StandardActionKeys.Cut,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Copy' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The standard action info\n */\nexport function getStandardActionCopy(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst copyVisibility = getCopyVisibility(converterContext, standardActionsContext);\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(copyVisibility)),\n\t\tvisible: compileExpression(copyVisibility),\n\t\tenabled: compileExpression(getCopyEnablement(copyVisibility, false)),\n\t\tenabledForContextMenu: compileExpression(getCopyEnablement(copyVisibility, true)),\n\t\tkey: StandardActionKeys.Copy,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Move up' and 'Move down' actions.\n * @param converterContext\n * @param standardActionsContext\n * @param forUp\n * @returns The standard action info\n */\nexport function getStandardActionMoveUpDown(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tforUp: boolean\n): StandardAction {\n\tconst canChangeSibling =\n\t\tconverterContext.getEntityType().annotations.Hierarchy?.[\n\t\t\t`RecursiveHierarchyActions#${standardActionsContext.tableManifestConfiguration.hierarchyQualifier ?? \"\"}`\n\t\t]?.ChangeNextSiblingAction !== undefined;\n\tconst moveVisibility = and(getCutVisibility(converterContext, standardActionsContext), canChangeSibling);\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(moveVisibility)),\n\t\tvisible: compileExpression(moveVisibility),\n\t\tenabled: compileExpression(getMoveUpDownEnablement(moveVisibility, standardActionsContext, forUp)),\n\t\tenabledForContextMenu: compileExpression(getMoveUpDownEnablement(moveVisibility, standardActionsContext, forUp, true)),\n\t\tkey: forUp ? StandardActionKeys.MoveUp : StandardActionKeys.MoveDown,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Delete' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expressions for the properties of the 'Delete' action.\n */\nexport function getStandardActionDelete(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst deleteVisibility = getDeleteVisibility(converterContext, standardActionsContext);\n\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(deleteVisibility)),\n\t\tvisible: compileExpression(deleteVisibility),\n\t\tenabled: compileExpression(getDeleteEnablement(converterContext, standardActionsContext, deleteVisibility, false)),\n\t\tenabledForContextMenu: compileExpression(getDeleteEnablement(converterContext, standardActionsContext, deleteVisibility, true)),\n\t\tkey: StandardActionKeys.Delete,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'CreationRow' action.\n *\n * Note that this is not actually an action that is templated as a button but its properties are used to configure an MDC feature.\n * @param converterContext\n * @param standardActionsContext\n * @returns StandardAction\n */\nexport function getCreationRow(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst creationRowVisibility = getCreateVisibility(converterContext, standardActionsContext, true);\n\n\treturn {\n\t\tisTemplated: compileExpression(getCreateTemplating(standardActionsContext, creationRowVisibility, true)),\n\t\tvisible: compileExpression(creationRowVisibility),\n\t\tenabled: compileExpression(getCreationRowEnablement(converterContext, standardActionsContext, creationRowVisibility)),\n\t\tkey: StandardActionKeys.CreationRow,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Cut' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'Cut' action.\n */\nexport function getCutVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst pathUpdatableExpression = standardActionsContext.restrictions?.isUpdatable?.expression;\n\tconst templateBindingExpression =\n\t\tconverterContext.getTemplateType() !== TemplateType.ListReport\n\t\t\t? UI.IsEditable\n\t\t\t: (converterContext.getEntitySet() as EntitySet)?.annotations.Common?.DraftRoot !== undefined; // To allow cut/paste for a draft TreeTable in a ListReport\n\treturn ifElse(\n\t\tequal(standardActionsContext.tableManifestConfiguration?.type, \"TreeTable\"),\n\t\tand(\n\t\t\tstandardActionsContext.tableManifestConfiguration.isHierarchyParentNodeUpdatable!,\n\t\t\tnot(and(isConstant(pathUpdatableExpression), equal(pathUpdatableExpression, false))),\n\t\t\ttemplateBindingExpression\n\t\t),\n\t\tfalse\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Copy' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'Copy' action.\n */\nexport function getCopyVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst availableCopyAction = converterContext?.getEntityType().annotations.Hierarchy?.[\n\t\t`RecursiveHierarchyActions#${standardActionsContext.tableManifestConfiguration.hierarchyQualifier ?? \"\"}`\n\t]?.CopyAction as string | undefined;\n\n\tif (!availableCopyAction) {\n\t\treturn constant(false);\n\t}\n\n\tconst templateBindingExpression =\n\t\tconverterContext.getTemplateType() !== TemplateType.ListReport\n\t\t\t? UI.IsEditable\n\t\t\t: (converterContext.getEntitySet() as EntitySet)?.annotations.Common?.DraftRoot !== undefined; // To allow cut/paste for a draft TreeTable in a ListReport\n\treturn ifElse(equal(standardActionsContext.tableManifestConfiguration?.type, \"TreeTable\"), templateBindingExpression, false);\n}\n\n/**\n * Gets the binding expressions for the properties of the 'Paste' action.\n *\n * Note that this is not actually an action that is displayed as a button but its properties are used to configure an MDC feature.\n * @param converterContext\n * @param standardActionsContext\n * @param isInsertUpdateActionsTemplated\n * @returns The binding expressions for the properties of the 'Paste' action.\n */\nexport function getStandardActionPaste(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tisInsertUpdateActionsTemplated: boolean\n): StandardAction {\n\tconst cutVisibility = getCutVisibility(converterContext, standardActionsContext);\n\tconst copyVisibility = getCopyVisibility(converterContext, standardActionsContext);\n\tconst createVisibility = getCreateVisibility(converterContext, standardActionsContext, false, true);\n\tconst pasteVisibility = getPasteVisibility(\n\t\tconverterContext,\n\t\tstandardActionsContext,\n\t\tcreateVisibility,\n\t\tcutVisibility,\n\t\tcopyVisibility,\n\t\tisInsertUpdateActionsTemplated\n\t);\n\tconst pasteEnablement = getPasteEnablement(pasteVisibility, standardActionsContext, false);\n\tconst pasteEnablementForContextMenu = getPasteEnablement(pasteVisibility, standardActionsContext, true);\n\treturn {\n\t\tvisible: compileExpression(pasteVisibility),\n\t\tenabled: compileExpression(pasteEnablement),\n\t\tenabledForContextMenu: compileExpression(pasteEnablementForContextMenu),\n\t\tkey: StandardActionKeys.Paste,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'MassEdit' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expressions for the properties of the 'MassEdit' action.\n */\nexport function getStandardActionMassEdit(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): StandardAction {\n\tconst massEditVisibility = getMassEditVisibility(converterContext, standardActionsContext);\n\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(massEditVisibility)),\n\t\tvisible: compileExpression(massEditVisibility),\n\t\tenabled: compileExpression(getMassEditEnablement(converterContext, standardActionsContext, massEditVisibility)),\n\t\tenabledForContextMenu: compileExpression(getMassEditEnablement(converterContext, standardActionsContext, massEditVisibility, true)),\n\t\tkey: StandardActionKeys.MassEdit,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expressions for the properties of the 'AddCardsToInsights' action.\n * @param converterContext\n * @param standardActionsContext\n * @param visualizationPath\n * @returns The binding expressions for the properties of the 'AddCardsToInsights' action.\n */\nexport function getStandardActionInsights(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tvisualizationPath: string\n): StandardAction {\n\tconst insightsVisibility = getInsightsVisibility(\"Table\", converterContext, visualizationPath, standardActionsContext);\n\tconst insightsEnablement = and(insightsVisibility, getInsightsEnablement());\n\treturn {\n\t\tisTemplated: compileExpression(getDefaultTemplating(insightsVisibility)),\n\t\tvisible: compileExpression(insightsVisibility),\n\t\tenabled: compileExpression(insightsEnablement),\n\t\tkey: StandardActionKeys.Insights,\n\t\ttype: ActionType.Standard\n\t};\n}\n\n/**\n * Gets the binding expression for the templating of the 'Create' action.\n * @param standardActionsContext\n * @param createVisibility\n * @param isForCreationRow\n * @returns The create binding expression\n */\nexport function getCreateTemplating(\n\tstandardActionsContext: StandardActionsContext,\n\tcreateVisibility: BindingToolkitExpression<boolean>,\n\tisForCreationRow = false\n): BindingToolkitExpression<boolean> {\n\t//Templating of Create Button is not done:\n\t// \t - If Button is never visible(covered the External create button, new Action)\n\t//\t - or CreationMode is on CreationRow for Create Button\n\t//\t - or CreationMode is not on CreationRow for CreationRow Button\n\n\treturn and(\n\t\t//XNOR gate\n\t\tor(\n\t\t\tand(isForCreationRow, standardActionsContext.creationMode === CreationMode.CreationRow),\n\t\t\tand(!isForCreationRow, standardActionsContext.creationMode !== CreationMode.CreationRow)\n\t\t),\n\t\tor(not(isConstant(createVisibility)), createVisibility)\n\t);\n}\n\n/**\n * Gets the binding expression for the templating of the non-Create actions.\n * @param actionVisibility\n * @returns The binding expression for the templating of the non-Create actions.\n */\nexport function getDefaultTemplating(actionVisibility: BindingToolkitExpression<boolean>): BindingToolkitExpression<boolean> {\n\treturn or(not(isConstant(actionVisibility)), actionVisibility);\n}\n\n/**\n * Checks if Create/Delete buttons shall be hidden in an analytical.\n * @param converterContext\n * @param standardActionsContext\n * @returns True if buttons shall be hidden, false otherwise.\n */\nfunction hideCreateDeleteInAnalyticalTable(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): boolean {\n\t// We show Create/Delete buttons in Analytical tables only in a ListReport.\n\treturn (\n\t\tconverterContext.getTemplateType() !== TemplateType.ListReport &&\n\t\tstandardActionsContext.tableManifestConfiguration?.type === \"AnalyticalTable\"\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Create' action.\n * @param converterContext\n * @param standardActionsContext\n * @param isForCreationRow\n * @param isForPaste\n * @returns The binding expression for the 'visible' property of the 'Create' action.\n */\nexport function getCreateVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tisForCreationRow = false,\n\tisForPaste = false\n): BindingToolkitExpression<boolean> {\n\tconst isInsertable = standardActionsContext.restrictions.isInsertable.expression;\n\tconst isCreateHidden =\n\t\thideCreateDeleteInAnalyticalTable(converterContext, standardActionsContext) ||\n\t\t(isForCreationRow\n\t\t\t? isActionAnnotatedHidden(converterContext, \"CreateHidden\", false)\n\t\t\t: standardActionsContext.hiddenAnnotation.create);\n\tconst newAction = standardActionsContext.newAction;\n\t// Create Button is visible:\n\t// \t - For analytical tables: only in a ListReport\n\t// \t - If the creation mode is external\n\t//      - If we're on the list report and create is not hidden\n\t//\t\t- Otherwise this depends on the value of the UI.IsEditable\n\t//\t - Otherwise\n\t//\t\t- If any of the following conditions is valid then create button isn't visible\n\t//\t\t\t- no newAction available\n\t//\t\t\t- It's not insertable and there is not a new action\n\t//\t\t\t- create is hidden\n\t//\t\t\t- There are multiple visualizations\n\t//\t\t\t- It's an Analytical List Page\n\t//\t\t\t- Uses InlineCreationRows mode and a Responsive table type, with the parameter inlineCreationRowsHiddenInEditMode to true while not in create mode\n\t//          \t- when calculating paste button visibility,  we force the condition to false with the isForPaste property\n\t//   - Otherwise\n\t// \t \t- If we're on the list report ->\n\t// \t \t\t- If UI.CreateHidden points to a property path -> provide a negated binding to this path\n\t// \t \t\t- Otherwise, create is visible\n\t// \t \t- Otherwise\n\t// \t  \t - This depends on the value of the UI.IsEditable\n\treturn ifElse(\n\t\tstandardActionsContext.creationMode === CreationMode.External,\n\t\tand(not(isCreateHidden), or(converterContext.getTemplateType() === TemplateType.ListReport, UI.IsEditable)),\n\t\tifElse(\n\t\t\tor(\n\t\t\t\tand(isConstant(newAction?.available), equal(newAction?.available, false)),\n\t\t\t\tand(isConstant(isInsertable), equal(isInsertable, false), !newAction),\n\t\t\t\tand(isConstant(isCreateHidden), equal(isCreateHidden, true)),\n\t\t\t\tand(\n\t\t\t\t\tstandardActionsContext.creationMode === CreationMode.InlineCreationRows,\n\t\t\t\t\tstandardActionsContext.tableManifestConfiguration?.type === \"ResponsiveTable\",\n\t\t\t\t\tifElse(\n\t\t\t\t\t\tand(\n\t\t\t\t\t\t\tstandardActionsContext?.tableManifestConfiguration?.inlineCreationRowsHiddenInEditMode === false,\n\t\t\t\t\t\t\tnot(isForPaste)\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttrue,\n\t\t\t\t\t\tUI.IsCreateMode\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t),\n\t\t\tfalse,\n\t\t\tifElse(\n\t\t\t\tconverterContext.getTemplateType() === TemplateType.ListReport,\n\t\t\t\tor(not(isPathInModelExpression(isCreateHidden)), not(isCreateHidden)),\n\t\t\t\tand(not(isCreateHidden), UI.IsEditable)\n\t\t\t)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Delete' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'Delete' action.\n */\nexport function getDeleteVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst isDeleteHidden = standardActionsContext.hiddenAnnotation.delete;\n\tconst pathDeletableExpression = standardActionsContext.restrictions.isDeletable.expression;\n\n\t//Delete Button is visible:\n\t// \t Prerequisites:\n\t//\t - If we're not on ALP\n\t//   - If restrictions on deletable set to false -> not visible\n\t//\t - Analytical table not in a ListReport -> not visible\n\t//   - Otherwise\n\t//\t\t\t- If UI.DeleteHidden is true -> not visible\n\t//\t\t\t- Otherwise\n\t// \t \t\t\t- If we're on OP -> depending if UI is editable and restrictions on deletable\n\t//\t\t\t\t- Otherwise\n\t//\t\t\t\t \t- If UI.DeleteHidden points to a property path -> provide a negated binding to this path\n\t//\t \t \t\t \t- Otherwise, delete is visible\n\n\treturn ifElse(\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage ||\n\t\t\thideCreateDeleteInAnalyticalTable(converterContext, standardActionsContext),\n\t\tfalse,\n\t\tifElse(\n\t\t\tand(isConstant(pathDeletableExpression), equal(pathDeletableExpression, false)),\n\t\t\tfalse,\n\t\t\tifElse(\n\t\t\t\tand(isConstant(isDeleteHidden), equal(isDeleteHidden, constant(true))),\n\t\t\t\tfalse,\n\t\t\t\tifElse(\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.ListReport,\n\t\t\t\t\tand(not(isDeleteHidden), UI.IsEditable),\n\t\t\t\t\tnot(and(isPathInModelExpression(isDeleteHidden), isDeleteHidden))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'Paste' action.\n * @param converterContext\n * @param standardActionsContext\n * @param createVisibility\n * @param cutVisibility\n * @param copyVisibility\n * @param isInsertUpdateActionsTemplated\n * @returns The binding expression for the 'visible' property of the 'Paste' action.\n */\nexport function getPasteVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tcreateVisibility: BindingToolkitExpression<boolean>,\n\tcutVisibility: BindingToolkitExpression<boolean>,\n\tcopyVisibility: BindingToolkitExpression<boolean>,\n\tisInsertUpdateActionsTemplated: boolean\n): BindingToolkitExpression<boolean> {\n\t//If it isn't deactivated within the manifest and we're operating in OP/blocks outside Fiori elements templates,\n\t//the treeTable's visibility relies on the cutvisibility,\n\t//while the visibility of the other table is determined by insertable restrictions and create visibility.\n\tlet updateOnNavigation = standardActionsContext.restrictions?.isUpdatable?.navigationExpression;\n\tif (updateOnNavigation?._type === \"Unresolvable\") {\n\t\tupdateOnNavigation = constant(true);\n\t}\n\treturn and(\n\t\tstandardActionsContext.tableManifestConfiguration.type === \"TreeTable\"\n\t\t\t? or(cutVisibility, copyVisibility)\n\t\t\t: and(\n\t\t\t\t\tor(\n\t\t\t\t\t\tand(createVisibility, standardActionsContext.restrictions.isInsertable.expression),\n\t\t\t\t\t\tand(UI.IsEditable, updateOnNavigation)\n\t\t\t\t\t),\n\t\t\t\t\tnotEqual(standardActionsContext.tableManifestConfiguration.enablePaste, false),\n\t\t\t\t\t![TemplateType.ListReport, TemplateType.AnalyticalListPage].includes(converterContext.getTemplateType())\n\t\t\t  ),\n\t\tisInsertUpdateActionsTemplated\n\t);\n}\n\n/**\n * Gets the binding expression for the 'visible' property of the 'MassEdit' action.\n * @param converterContext\n * @param standardActionsContext\n * @returns The binding expression for the 'visible' property of the 'MassEdit' action.\n */\nexport function getMassEditVisibility(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext\n): BindingToolkitExpression<boolean> {\n\tconst isUpdateHidden = standardActionsContext.hiddenAnnotation.update,\n\t\tpathUpdatableExpression = standardActionsContext.restrictions.isUpdatable.expression,\n\t\tmassEditEnabledInManifest: boolean = standardActionsContext.tableManifestConfiguration?.massEdit.enabled || false;\n\tconst templateBindingExpression =\n\t\tconverterContext.getTemplateType() === TemplateType.ObjectPage\n\t\t\t? UI.IsEditable\n\t\t\t: [TemplateType.ListReport, TemplateType.FreeStylePage].includes(converterContext.getTemplateType());\n\t//MassEdit is visible\n\t// If\n\t//\t\t- there is no static restrictions set to false\n\t//\t\t- and enableMassEdit is not set to false into the manifest\n\t//\t\t- and the selectionMode is relevant\n\t//\tThen MassEdit is always visible in LR or dynamically visible in OP according to ui>Editable and hiddenAnnotation\n\t//  Button is hidden for all other cases\n\treturn and(\n\t\tnot(and(isConstant(pathUpdatableExpression), equal(pathUpdatableExpression, false))),\n\t\tmassEditEnabledInManifest,\n\t\ttemplateBindingExpression,\n\t\tnot(isUpdateHidden)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the creationRow.\n * @param converterContext\n * @param standardActionsContext\n * @param creationRowVisibility\n * @returns The binding expression for the 'enabled' property of the creationRow.\n */\nexport function getCreationRowEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tcreationRowVisibility: BindingToolkitExpression<boolean>\n): BindingToolkitExpression<boolean> {\n\tconst restrictionsInsertable = isPathInsertable(converterContext.getDataModelObjectPath(), {\n\t\tignoreTargetCollection: true,\n\t\tauthorizeUnresolvable: true,\n\t\tpathVisitor: (path: string, navigationPaths: string[]) => {\n\t\t\tif (path.indexOf(\"/\") === 0) {\n\t\t\t\tpath = singletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths);\n\t\t\t\treturn path;\n\t\t\t}\n\t\t\tconst navigationProperties = converterContext.getDataModelObjectPath().navigationProperties;\n\t\t\tif (navigationProperties) {\n\t\t\t\tconst lastNav = navigationProperties[navigationProperties.length - 1];\n\t\t\t\tconst partner = isNavigationProperty(lastNav) && lastNav.partner;\n\t\t\t\tif (partner) {\n\t\t\t\t\tpath = `${partner}/${path}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn path;\n\t\t}\n\t});\n\tconst isInsertable =\n\t\trestrictionsInsertable._type === \"Unresolvable\"\n\t\t\t? isPathInsertable(converterContext.getDataModelObjectPath(), {\n\t\t\t\t\tpathVisitor: (path: string) => singletonPathVisitor(path, converterContext.getConvertedTypes(), [])\n\t\t\t  })\n\t\t\t: restrictionsInsertable;\n\n\treturn and(\n\t\tcreationRowVisibility,\n\t\tisInsertable,\n\t\tor(\n\t\t\t!standardActionsContext.tableManifestConfiguration.disableAddRowButtonForEmptyData,\n\t\t\tformatResult([pathInModel(\"creationRowFieldValidity\", \"internal\")], tableFormatters.validateCreationRowFields)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Create' action.\n * @param converterContext\n * @param standardActionsContext\n * @param createVisibility\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'Create' action.\n */\nexport function getCreateEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tcreateVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\tconst conditions: BindingToolkitExpression<boolean>[] = [];\n\tconst contextPath: string = !forContextMenu ? \"\" : \"contextmenu/\";\n\n\tif (standardActionsContext.creationMode === CreationMode.InlineCreationRows) {\n\t\t// for Inline creation rows create can be hidden via manifest and this should not impact its enablement\n\t\tconditions.push(and(not(standardActionsContext.hiddenAnnotation.create), UI.IsEditable));\n\t} else {\n\t\tconditions.push(createVisibility);\n\t}\n\n\tconst isInsertable = standardActionsContext.restrictions.isInsertable.expression;\n\tconst CollectionType = converterContext.resolveAbsolutePath<EntitySet>(standardActionsContext.collectionPath).target;\n\tconditions.push(\n\t\tor(\n\t\t\tisEntitySet(CollectionType),\n\t\t\tand(isInsertable, or(converterContext.getTemplateType() !== TemplateType.ObjectPage, UI.IsEditable))\n\t\t)\n\t);\n\n\tif (standardActionsContext.tableManifestConfiguration.type === \"TreeTable\") {\n\t\t// In case of a TreeTable, the create button shall be active only if 0 or 1 items are selected (parent node)\n\t\t// We do not need this condition on the ContextMenu, as we only create on the selected node\n\t\tconditions.push(lessOrEqual(pathInModel(contextPath + \"numberOfSelectedContexts\", \"internal\"), 1));\n\n\t\tif (standardActionsContext.tableManifestConfiguration.createEnablement) {\n\t\t\t// There's a createEnablement callback function for additionnal conditions\n\t\t\t// These conditions will be reflected in the internal model\n\t\t\tconditions.push(notEqual(pathInModel(contextPath + \"createEnablement/Create\", \"internal\"), false));\n\t\t}\n\t}\n\n\treturn and(...conditions);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Delete' action.\n * @param converterContext\n * @param standardActionsContext\n * @param deleteVisibility\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @returns The binding expression for the 'enabled' property of the 'Delete' action.\n */\nexport function getDeleteEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tdeleteVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\t// The following contexts are filled at runtime when a user selects one or more items from a list.\n\t// Checks are then made in function updateDeleteInfoForSelectedContexts in file DeleteHelper to see if there\n\t// are items that can be deleted, thus the delete button should be enabled in these cases.\n\tconst contextPath = !forContextMenu ? \"\" : \"contextmenu/\";\n\tconst deletableContexts = pathInModel(contextPath + \"deletableContexts\", \"internal\");\n\tconst unSavedContexts = pathInModel(contextPath + \"unSavedContexts\", \"internal\");\n\tconst draftsWithDeletableActive = pathInModel(contextPath + \"draftsWithDeletableActive\", \"internal\");\n\tconst draftsWithNonDeletableActive = pathInModel(contextPath + \"draftsWithNonDeletableActive\", \"internal\");\n\n\t// \"Unresolvable\" in navigationExpression is interpreted to mean that there are no navigationExpressions\n\t// defined.\n\t// standardActionsContext.restrictions.isDeletable.expression is a binding expression that comes\n\t// from the Delete restrictions defined in NavigationRestrictions for this entity. In order to\n\t// be deletable, the item must also be allowed to be deletable according to the Delete Restrictions\n\t// on the entity itself.\n\treturn and(\n\t\tdeleteVisibility,\n\t\tor(\n\t\t\tstandardActionsContext.restrictions.isDeletable.navigationExpression._type === \"Unresolvable\",\n\t\t\tstandardActionsContext.restrictions.isDeletable.expression\n\t\t),\n\t\tor(\n\t\t\tgreaterThan(length(deletableContexts, true), 0),\n\t\t\tgreaterThan(length(draftsWithDeletableActive, true), 0),\n\t\t\tgreaterThan(length(draftsWithNonDeletableActive, true), 0),\n\t\t\tgreaterThan(length(unSavedContexts, true), 0)\n\t\t)\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Paste' action.\n * @param pasteVisibility\n * @param standardActionsContext\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'Paste' action.\n */\nexport function getPasteEnablement(\n\tpasteVisibility: BindingToolkitExpression<boolean>,\n\tstandardActionsContext: StandardActionsContext,\n\tforContextMenu: boolean\n): BindingToolkitExpression<boolean> {\n\tconst pasteEnablementPath = !forContextMenu ? \"nodeUpdatesInfo/pasteEnablement\" : \"contextmenu/nodeUpdatesInfo/pasteEnablement\";\n\tif (standardActionsContext.tableManifestConfiguration.type === \"TreeTable\") {\n\t\treturn and(\n\t\t\tpasteVisibility,\n\t\t\tor(\n\t\t\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\",\n\t\t\t\tstandardActionsContext.restrictions.isUpdatable.expression\n\t\t\t),\n\t\t\tifElse(\n\t\t\t\tor(\n\t\t\t\t\tlessOrEqual(length(pathInModel(\"selectedContexts\", \"internal\")), 1),\n\t\t\t\t\tlessOrEqual(length(pathInModel(\"contextmenu/selectedContexts\", \"internal\")), 1)\n\t\t\t\t),\n\t\t\t\tequal(pathInModel(pasteEnablementPath, \"internal\"), true),\n\n\t\t\t\tfalse\n\t\t\t)\n\t\t);\n\t}\n\tlet updateOnNavigation = standardActionsContext.restrictions?.isUpdatable?.navigationExpression;\n\tif (updateOnNavigation?._type === \"Unresolvable\") {\n\t\tupdateOnNavigation = constant(true);\n\t}\n\treturn and(updateOnNavigation, pasteVisibility);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'MassEdit' action.\n * @param converterContext\n * @param standardActionsContext\n * @param massEditVisibility\n * @param forContextMenu Indicates if the action appears in the context menu. If false, the action appears in the table toolbar\n * @returns The binding expression for the 'enabled' property of the 'MassEdit' action.\n */\nexport function getMassEditEnablement(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tstandardActionsContext: StandardActionsContext,\n\tmassEditVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\tconst pathUpdatableExpression = standardActionsContext.restrictions.isUpdatable.expression;\n\tconst isOnlyDynamicOnCurrentEntity =\n\t\t!isConstant(pathUpdatableExpression) &&\n\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\";\n\tconst numberOfSelectedContextProperty = !forContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\";\n\tconst updatableContextProperty = !forContextMenu ? \"updatableContexts\" : \"contextmenu/updatableContexts\";\n\tconst numberOfSelectedContexts = greaterOrEqual(pathInModel(numberOfSelectedContextProperty, \"internal\"), 1);\n\tconst numberOfUpdatableContexts = greaterOrEqual(length(pathInModel(updatableContextProperty, \"internal\")), 1);\n\tconst bIsDraftSupported = ModelHelper.isObjectPathDraftSupported(converterContext.getDataModelObjectPath());\n\tconst bDisplayMode = isInDisplayMode(converterContext);\n\n\t// numberOfUpdatableContexts needs to be added to the binding in case\n\t// 1. Update is dependent on current entity property (isOnlyDynamicOnCurrentEntity is true).\n\t// 2. The table is read only and draft enabled(like LR), in this case only active contexts can be mass edited.\n\t//    So, update depends on 'IsActiveEntity' value which needs to be checked runtime.\n\tconst runtimeBinding = ifElse(\n\t\tor(and(bDisplayMode, bIsDraftSupported), isOnlyDynamicOnCurrentEntity),\n\t\tand(numberOfSelectedContexts, numberOfUpdatableContexts),\n\t\tand(numberOfSelectedContexts)\n\t);\n\n\treturn and(massEditVisibility, ifElse(isOnlyDynamicOnCurrentEntity, runtimeBinding, and(runtimeBinding, pathUpdatableExpression)));\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Cut' action.\n * @param cutVisibility\n * @param standardActionsContext\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'MassEdit' action.\n */\nexport function getCutEnablement(\n\tcutVisibility: BindingToolkitExpression<boolean>,\n\tstandardActionsContext: StandardActionsContext,\n\tforContextMenu: boolean\n): BindingToolkitExpression<boolean> {\n\tconst cutableContextsPath = !forContextMenu ? \"nodeUpdatesInfo/cutEnablement\" : \"contextmenu/nodeUpdatesInfo/cutEnablement\";\n\tconst runtimeBinding = pathInModel(cutableContextsPath, \"internal\");\n\treturn and(\n\t\tcutVisibility,\n\t\tor(\n\t\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\",\n\t\t\tstandardActionsContext.restrictions.isUpdatable.expression\n\t\t),\n\t\truntimeBinding\n\t);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Copy' action.\n * @param copyVisibility\n * @param forContextMenu\n * @returns The binding expression for the 'enabled' property of the 'Copy' action.\n */\nexport function getCopyEnablement(\n\tcopyVisibility: BindingToolkitExpression<boolean>,\n\tforContextMenu: boolean\n): BindingToolkitExpression<boolean> {\n\tconst copyableContextsPath = !forContextMenu ? \"nodeUpdatesInfo/copyEnablement\" : \"contextmenu/nodeUpdatesInfo/copyEnablement\";\n\tconst runtimeBinding = pathInModel(copyableContextsPath, \"internal\");\n\treturn and(copyVisibility, runtimeBinding);\n}\n\n/**\n * Gets the binding expression for the 'enabled' property of the 'Move up' and 'Move down' actions.\n * @param moveUpDownVisibility\n * @param standardActionsContext\n * @param forUp\n * @param forContextMenu\n * @returns The binding expression\n */\nfunction getMoveUpDownEnablement(\n\tmoveUpDownVisibility: BindingToolkitExpression<boolean>,\n\tstandardActionsContext: StandardActionsContext,\n\tforUp: boolean,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\tconst singleContextMovableUp = !forContextMenu ? \"singleContextMovableUp\" : \"contextmenu/singleContextMovableUp\";\n\tconst singleContextMovableDown = !forContextMenu ? \"singleContextMovableDown\" : \"contextmenu/singleContextMovableDown\";\n\tconst runtimeBinding = forUp\n\t\t? equal(pathInModel(singleContextMovableUp, \"internal\"), true)\n\t\t: equal(pathInModel(singleContextMovableDown, \"internal\"), true);\n\treturn and(\n\t\tmoveUpDownVisibility,\n\t\tor(\n\t\t\tstandardActionsContext.restrictions.isUpdatable.navigationExpression._type === \"Unresolvable\",\n\t\t\tstandardActionsContext.restrictions.isUpdatable.expression\n\t\t),\n\t\truntimeBinding\n\t);\n}\n\n/**\n * Tells if the table in template is in display mode.\n * @param converterContext\n * @param checkMultipleVisualization\n * @returns `true` if the table is in display mode\n */\nexport function isInDisplayMode(converterContext: ConverterContext<PageContextPathTarget>, checkMultipleVisualization = false): boolean {\n\tif (converterContext.getManifestWrapper().hasInlineEdit()) {\n\t\t//if there is inline edit in the page we cannot force the table to display based on the template type\n\t\treturn false;\n\t}\n\tconst templateType = converterContext.getTemplateType();\n\tif (\n\t\ttemplateType === TemplateType.ListReport ||\n\t\ttemplateType === TemplateType.AnalyticalListPage ||\n\t\t(checkMultipleVisualization && converterContext.getManifestWrapper().hasMultipleVisualizations())\n\t) {\n\t\treturn true;\n\t}\n\t// updatable will be handled at the property level\n\treturn false;\n}\n"],"mappings":"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","ignoreList":[],"file":"StandardActions-dbg.js"}