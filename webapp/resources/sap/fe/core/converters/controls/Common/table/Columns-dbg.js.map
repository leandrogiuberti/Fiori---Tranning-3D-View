{"version":3,"names":["ColumnType","_exports","getTableColumns","lineItemAnnotation","tableType","visualizationPath","converterContext","annotationColumns","getColumnsFromAnnotations","manifestColumns","getColumnsFromManifest","getManifestControlConfiguration","columns","getAnnotationEntityType","tableColumns","insertCustomElements","width","OverrideType","overwrite","widthIncludingColumnHeader","importance","horizontalAlign","availability","isNavigable","settings","formatOptions","exportSettings","addComputedColumns","findColumnByPath","path","find","column","annotationColumn","propertyInfos","undefined","relativePath","updateLinkedProperties","dataModelObjectPath","getConverterContextFor","getContextPath","getDataModelObjectPath","forEach","oColumn","tableColumn","propertyDataModelObjectPath","enhanceDataModelPath","property","targetObject","addCurrencyOrUoMToProperty","timezoneProperty","getAssociatedTimezoneProperty","timezone","annotations","Common","Timezone","oTimezoneColumn","name","timezoneText","toString","addTextArrangentInfoToProperty","currencyOrUoMProperty","getAssociatedCurrencyPropertyPath","getAssociatedUnitPropertyPath","currencyOrUoMPropertyDataModelObjectPath","currencyOrUoMRelativePath","getContextRelativeTargetObjectPath","unitColumn","unit","Measures","ISOCurrency","Unit","unitText","displayMode","getDisplayMode","textPropertyPath","getAssociatedTextPropertyPath","textPropertyDataModelObjectPath","textRelativePath","textColumn","textArrangement","textProperty","mode","type","getColumnsFromEntityType","columnsToBeCreated","entityType","tableCreationMode","displayModeOfDescriptionPropertiesMap","restrictionsOnProperties","propertiesNotToBeConsidered","aggregationHelper","AggregationHelper","groupableProperties","getGroupableProperties","isAnalyticsSupported","map","$target","filter","target","getAssociatedTextProperty","textProp","isPropertyGroupable","prop","entityProperties","exists","some","targetType","includes","relatedPropertiesInfo","collectRelatedProperties","relatedPropertyNames","Object","keys","properties","additionalPropertyNames","additionalProperties","addPropertyToDisplayModeOfDescriptionPropertiesMap","columnInfo","getColumnDefinitionFromProperty","getEntitySetBasedAnnotationPath","fullyQualifiedName","length","dataPointTargetValue","exportDataPointTargetValue","annotationProperty","additionalPropertyInfos","additionalPropertyName","push","nonSortableProperties","isPathAnnotationExpression","Text","relatedColumns","_createRelatedColumns","concat","fullPropertyPath","useDataFieldPrefix","availableForAdaptation","relativePathForMultiValue","semanticObjectAnnotationPath","getSemanticObjectPath","isHidden","isReferencePropertyStaticallyHidden","groupPath","_sliceAtSlash","isGroup","label","getLabel","dataType","getDataFieldDataType","propertyTypeConfig","getTypeConfig","isAPropertyFromTextOnlyAnnotation","sortable","filterable","nonFilterableProperties","groupable","typeConfig","className","constraints","_isExportableColumn","createColumnExportSettings","collectedNavigationPropertyLabels","_getCollectedNavigationPropertyLabels","key","replaceSpecialChars","Annotation","groupLabel","group","annotationPath","semanticObjectPath","isGroupable","isKey","caseSensitive","isFilteringCaseSensitive","getImportance","UI","DataFieldDefault","required","isRequiredColumn","additionalLabels","_addToolTip","_setExportSettingsForDataPoint","ModelHelper","isObjectPathDraftSupported","extension","technicallyAggregatable","technicallyGroupable","unitProperty","utc","isATimezone","currencyProperty","scale","isProperty","getAssociatedUnitProperty","getAssociatedCurrencyProperty","getStaticUnitOrCurrency","getStaticTimezone","isTimezone","exportType","getExportDataType","inputFormat","getDateInputFormat","delimiter","getDelimiter","template","wrap","autoScale","removeUndefinedFromExportSettings","setting","source","propertyType","dataFieldDefaultProperty","$Type","Target","Value","Core","MediaType","term","isURL","_isValidColumn","dataField","Inline","_getVisibleExpression","dataFieldModelPath","propertyValue","isAnalyticalGroupHeaderExpanded","constant","isAnalyticalLeaf","and","not","equal","getExpressionFromAnnotation","Hidden","ifElse","or","_getFieldGroupHiddenExpressions","dataFieldGroup","fieldGroupHiddenExpressions","compileExpression","Data","innerDataField","arguments","isNavigationProperty","dataFieldDefault","qualifier","Label","isDataFieldTypes","valueOf","_getTooltip","QuickInfo","datapointTarget","getRowStatusVisibility","colName","isSemanticKeyInFieldGroup","formatResult","pathInModel","tableFormatters","getErrorStatusTextVisibilityFormatter","existingColumns","relatedPropertyNameMap","getAbsoluteAnnotationPath","relatedColumn","propertyObjectPath","isMultiValueField","newNameRelativeTargetPath","computeHiddenOnRelatedColumns","newName","propertyInfo","_getAnnotationColumnName","KeyHelper","generateKeyFromDataField","_getShowDataFieldsLabel","fieldGroupName","columnKeys","showDataFieldsLabel","_getRelativePath","value","isLastSlash","isLastPart","iSlashIndex","lastIndexOf","indexOf","substring","_isColumnMultiValued","_isColumnSortable","propertyPath","nonSortableColumns","propName","filterFunctions","_getFilterFunctions","ConverterContext","entitySet","getEntitySet","TypeGuards","isEntitySet","Capabilities","FilterFunctions","getEntityContainer","_getDefaultFormatOptionsForTable","textLinesEdit","_findSemanticKeyValues","semanticKeys","aSemanticKeyValues","bSemanticKeyFound","i","values","semanticKeyFound","_findProperties","semanticKeyValues","fieldGroupProperties","semanticKeyHasPropertyInFieldGroup","sPropertyPath","tmp","fieldGroupPropertyPath","_findSemanticKeyValuesInFieldGroup","aProperties","_propertiesFound","getDefaultDraftIndicatorForColumn","semanticKey","semanticKeyInFieldGroup","fieldGroupDraftIndicatorPropertyPath","showErrorObjectStatus","hasDraftIndicator","_getImpNumber","Importance","_getDataFieldImportance","split","None","targetValuefromDP","getTargetValueOnDataPoint","isDataPointFromDataFieldDefault","_getMaxImportance","fields","maxImpNumber","impNumber","DataFieldWithMaxImportance","field","targetEntityType","SemanticKey","requiredProperties","getRequiredProperties","highKeys","fieldsWithImportance","isAnnotationOfType","dataFieldTarget","fieldGroupData","fieldGroupDataField","High","item","getRestrictionsOnProperties","tableManifestSettings","defaultCreationMode","getManifestWrapper","getSapFeManifestConfiguration","macros","table","CreationMode","InlineCreationRows","tableSettings","creationMode","getAnnotationsByTerm","getEntityType","tableConverterContext","getTargetObjectPath","collectRelatedPropertiesRecursively","isFieldGroupColumn","navigationProperties","situationsNavProps","navigationProperty","isCollection","SAPObjectNodeType","Name","situationsNavProp","hasSituationsIndicator","isMultiValue","visualSettings","widthCalculation","FieldGroupHiddenExpressions","HTML5","CssDefaults","isPartOfLineItem","tooltip","relatedPropertyName","displayModeOfPropertyUsedAsDescription","createPropertyAnnotatedTextOnly","_getPropertyNames","matchedProperties","Array","isArray","resolvePath","isRequiredFieldGroup","fieldGroup","isDataField","isStaticallyMandatory","isAnnotatedRequiredProperty","isRequiredDataFieldForAnnotation","dataFieldForAnnotation","DataFieldForAnnotationFieldControlNotMandatory","hasFieldControlNotMandatory","hasFieldGroupTarget","hasDataPointTarget","Visualization","isRequiredDataPoint","isRequiredProperty","isRatingVisualizationFromDataFieldDefault","dataPoint","getTemplateType","TemplateType","ListReport","AnalyticalListPage","IsEditable","isDataFieldForAnnotation","_appendCustomTemplate","exportProperties","join","internalColumns","isColumnOverride","isSlotColumn","manifestColumn","Slot","isCustomColumn","_updateLinkedPropertiesOnCustomColumns","annotationTableColumns","replace","isPartOfCustomColumn","validateKey","baseTableColumn","position","anchor","placement","Placement","After","propertiesToOverwriteAnnotationColumn","disableExport","getCustomExportSettings","tooltipText","fetchTextFromMetaModel","headerText","header","customColumnExportSettings","baseManifestColumn","HorizontalAlign","Begin","id","customTableColumn","Default","message","getDiagnostics","addIssue","IssueCategory","Manifest","IssueSeverity","Low","IssueCategoryType","AnnotationColumns","InvalidKey","columnWithSituationsIndicator","situationsIndicatorColumn","propertyKey","isSituationsIndicator","Computed","clipboardSettings","indexOfFirstVisibleColumn","findIndex","splice","columnsWithDraftIndicator","isDraftNode","isDraftRoot","columnWithDraftIndicator","draftIndicatorColumn","isDraftIndicator","columnIndexToInsertAfter","getContextPropertyRestriction","capabilities","InsertRestrictions","RequiredProperties","isCurrency","exportDataType","navProperty","lineItem","isPropertyNavigated","inheredPropertyDataModelObjectPath","isInheredPropertyNavigated","targetMapping","isTypeDefinition","EDM_TYPE_MAPPING","underlyingType","setUpConstraints","parseAsString","emptyString","nullable","parseKeepsEmptyString","relatedAnnotationColumns","existingColumn","columnKey","columnFromAnnotations","enableWrapping","customExportSettings","textAlign","trueValue","falseValue","valueMap"],"sourceRoot":".","sources":["Columns.ts"],"sourcesContent":["import type { EntityType, NavigationProperty, Property, PropertyPath } from \"@sap-ux/vocabularies-types\";\nimport type { FilterFunctions } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities\";\nimport type { EntitySetAnnotations_Capabilities } from \"@sap-ux/vocabularies-types/vocabularies/Capabilities_Edm\";\nimport type { SemanticKey } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport { CommonAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type {\n\tDataField,\n\tDataFieldAbstractTypes,\n\tDataFieldForAnnotation,\n\tDataFieldTypes,\n\tDataPoint,\n\tDataPointTypeTypes,\n\tFieldGroup,\n\tLineItem\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tEDM_TYPE_MAPPING,\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tnot,\n\tor,\n\tpathInModel,\n\tsetUpConstraints\n} from \"sap/fe/base/BindingToolkit\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport type {\n\tAvailabilityType,\n\tCustomDefinedTableColumn,\n\tCustomDefinedTableColumnForOverride,\n\tFormatOptionsType,\n\tTableColumnSettings,\n\tTableManifestConfiguration\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport { CreationMode, HorizontalAlign, Importance, TemplateType } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { ComplexPropertyInfo } from \"sap/fe/core/converters/annotations/DataField\";\nimport {\n\tcollectRelatedProperties,\n\tcollectRelatedPropertiesRecursively,\n\tgetDataFieldDataType,\n\tgetSemanticObjectPath,\n\tgetTargetValueOnDataPoint,\n\thasDataPointTarget,\n\thasFieldGroupTarget,\n\tisDataField,\n\tisDataFieldForAnnotation,\n\tisDataFieldTypes,\n\tisDataPointFromDataFieldDefault,\n\tisRatingVisualizationFromDataFieldDefault\n} from \"sap/fe/core/converters/annotations/DataField\";\nimport { type TableType } from \"sap/fe/core/converters/controls/Common/Table\";\nimport { AggregationHelper } from \"sap/fe/core/converters/helpers/Aggregation\";\nimport type { ConfigurableObject, CustomElement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { OverrideType, Placement, insertCustomElements } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { isReferencePropertyStaticallyHidden } from \"sap/fe/core/converters/helpers/DataFieldHelper\";\nimport { IssueCategory, IssueCategoryType, IssueSeverity } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport { KeyHelper } from \"sap/fe/core/converters/helpers/Key\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { replaceSpecialChars } from \"sap/fe/core/helpers/StableIdHelper\";\nimport * as TypeGuards from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tisAnnotationOfType,\n\tisNavigationProperty,\n\tisPathAnnotationExpression,\n\tisProperty,\n\tisTypeDefinition\n} from \"sap/fe/core/helpers/TypeGuards\";\nimport {\n\tenhanceDataModelPath,\n\tgetContextPropertyRestriction,\n\tgetContextRelativeTargetObjectPath,\n\tgetTargetObjectPath,\n\ttype DataModelObjectPath\n} from \"sap/fe/core/templating/DataModelPathHelper\";\nimport { getDisplayMode, type DisplayMode } from \"sap/fe/core/templating/DisplayModeFormatter\";\nimport { getRestrictionsOnProperties, type RestrictionsOnProperties } from \"sap/fe/core/templating/EntitySetHelper\";\nimport { hasFieldControlNotMandatory, isStaticallyMandatory } from \"sap/fe/core/templating/FieldControlHelper\";\nimport {\n\tgetAssociatedCurrencyProperty,\n\tgetAssociatedCurrencyPropertyPath,\n\tgetAssociatedTextProperty,\n\tgetAssociatedTextPropertyPath,\n\tgetAssociatedTimezoneProperty,\n\tgetAssociatedUnitProperty,\n\tgetAssociatedUnitPropertyPath,\n\tgetStaticTimezone,\n\tgetStaticUnitOrCurrency,\n\tisTimezone\n} from \"sap/fe/core/templating/PropertyHelper\";\nimport { isMultiValueField } from \"sap/fe/core/templating/UIFormatters\";\nimport type { DefaultTypeForEdmType } from \"sap/fe/core/type/EDM\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport tableFormatters from \"sap/fe/macros/formatters/TableFormatter\";\nimport type Control from \"sap/ui/core/Control\";\nimport type { MDCTablePropertyInfo as PropertyInfo, VisualSettings } from \"sap/ui/mdc/Table\";\nimport type SimpleType from \"sap/ui/model/SimpleType\";\n\n// Custom Column from Manifest\ntype ManifestDefinedCustomColumn = CustomDefinedTableColumn & {\n\ttype?: ColumnType.Default;\n};\n\n// Slot Column from Building Block\ntype FragmentDefinedSlotColumn = CustomDefinedTableColumn & {\n\ttype: ColumnType.Slot;\n};\n// Properties all ColumnTypes have:\ntype BaseTableColumn = ConfigurableObject & {\n\ttype: ColumnType; //Origin of the source where we are getting the templated information from\n\twidth?: string;\n\twidthIncludingColumnHeader?: boolean;\n\timportance?: Importance;\n\thorizontalAlign?: HorizontalAlign;\n\tavailability?: AvailabilityType;\n\tisNavigable?: boolean;\n\tcaseSensitive?: boolean;\n\tlabel?: string;\n\ttooltip?: string;\n\tdisableExport?: boolean;\n};\n\n// Properties on Custom Columns and Slot Columns\nexport type CustomBasedTableColumn = BaseTableColumn & {\n\tid: string;\n\tname: string;\n\theader?: string;\n\ttemplate: string | Control;\n\tpropertyInfos?: string[];\n\texportSettings?: ColumnExportSettings | null;\n\tformatOptions: FormatOptionsType;\n\tisGroupable: boolean;\n\tisNavigable: boolean;\n\tsortable: boolean;\n\tvisualSettings: { widthCalculation: null };\n\tproperties?: string[];\n\trequired?: CompiledBindingToolkitExpression;\n};\n\nexport type ComputedTableColumn = BaseTableColumn & {\n\tname: string;\n\tlabel: string;\n\tpropertyKey: string;\n\tisDraftIndicator?: boolean;\n\tisSituationsIndicator?: boolean;\n\tformatOptions?: FormatOptionsType | null;\n\tpropertyInfos?: string[];\n\texportSettings?: ColumnExportSettings | null;\n\tclipboardSettings?: Object | null;\n\trequired?: CompiledBindingToolkitExpression;\n};\n\n// Properties derived from Manifest to override Annotation configurations\ntype AnnotationTableColumnForOverride = BaseTableColumn & {\n\tsettings?: TableColumnSettings;\n\tformatOptions?: FormatOptionsType;\n\texportSettings?: ColumnExportSettings | null;\n};\n\nexport type PropertyTypeConstraints = Partial<{\n\tscale: number;\n\tprecision: number;\n\tmaxLength: number;\n\tnullable: boolean;\n\tminimum: string;\n\tmaximum: string;\n\tisDigitSequence: boolean;\n}>;\n\nexport type PropertyTypeFormatOptions = Partial<{\n\tparseAsString: boolean;\n\temptyString: string;\n\tparseKeepsEmptyString: boolean;\n\tstyle: string;\n}>;\n\nexport type PropertyTypeConfig = {\n\ttype?: string;\n\tconstraints?: PropertyTypeConstraints;\n\tformatOptions?: PropertyTypeFormatOptions;\n\ttypeInstance?: SimpleType;\n\tbaseType?: string;\n\tclassName?: keyof typeof DefaultTypeForEdmType;\n};\n\nexport type ColumnExportSettings = PropertyInfo[\"exportSettings\"] & {\n\tdataPointTargetValue?: string;\n\tisCurrency?: boolean;\n};\n\n// Properties for Annotation Columns\nexport type AnnotationTableColumn = PropertyInfo &\n\tAnnotationTableColumnForOverride & {\n\t\tname: string;\n\t\tannotationPath: string;\n\t\trelativePath: string;\n\t\ttooltip?: string;\n\t\tgroupLabel?: string;\n\t\tgroup?: string;\n\t\tFieldGroupHiddenExpressions?: CompiledBindingToolkitExpression;\n\t\tshowDataFieldsLabel?: boolean;\n\t\trequired?: CompiledBindingToolkitExpression;\n\t\tisGroupable?: boolean;\n\t\tunitText?: string;\n\t\ttimezoneText?: string;\n\t\ttimezone?: string;\n\t\tsemanticObjectPath?: string;\n\t\ttextArrangement?: {\n\t\t\ttextProperty: string;\n\t\t\tmode: DisplayMode;\n\t\t};\n\t\tadditionalPropertyInfos?: string[];\n\t\ttypeConfig?: PropertyTypeConfig;\n\t\tisPartOfLineItem?: boolean; // temporary indicator to only allow filtering on navigation properties when they're part of a line item\n\t\tisPartOfCustomColumn?: boolean;\n\t\tadditionalLabels?: string[];\n\t\texportDataPointTargetValue?: string;\n\t\textension?: ExtensionForAnalytics;\n\t\tisMultiValue?: boolean;\n\t\tdescriptionProperty?: string;\n\t\tmode?: DisplayMode;\n\t\tvalueProperty?: string;\n\t};\n\nexport type ExtensionForAnalytics = PropertyInfo[\"extension\"] & {\n\tadditionalProperties?: string[];\n};\n\nexport type TableColumn = CustomBasedTableColumn | AnnotationTableColumn | ComputedTableColumn;\n\ntype ManifestColumn = CustomElement<CustomBasedTableColumn | AnnotationTableColumnForOverride>;\n\nexport enum ColumnType {\n\tDefault = \"Default\", // Default Type (Custom Column)\n\tAnnotation = \"Annotation\",\n\tSlot = \"Slot\",\n\tComputed = \"Computed\"\n}\n/**\n * Returns an array of all columns, annotation-based as well as manifest-based.\n * They are sorted and some properties can be overwritten via the manifest (check out the keys that can be overwritten).\n * @param lineItemAnnotation Collection of data fields for representation in a table or list\n * @param tableType The type of the table\n * @param visualizationPath\n * @param converterContext\n * @returns Returns all table columns that should be available, regardless of templating or personalization or their origin\n */\nexport function getTableColumns(\n\tlineItemAnnotation: LineItem,\n\ttableType: TableType,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): TableColumn[] {\n\tconst annotationColumns = getColumnsFromAnnotations(lineItemAnnotation, tableType, visualizationPath, converterContext);\n\tconst manifestColumns = getColumnsFromManifest(\n\t\tconverterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath).columns ?? {},\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\tconverterContext.getAnnotationEntityType(lineItemAnnotation)\n\t);\n\n\tconst tableColumns: TableColumn[] = insertCustomElements(\n\t\tannotationColumns as TableColumn[],\n\t\tmanifestColumns as Record<string, CustomElement<TableColumn>>,\n\t\t{\n\t\t\twidth: OverrideType.overwrite,\n\t\t\twidthIncludingColumnHeader: OverrideType.overwrite,\n\t\t\timportance: OverrideType.overwrite,\n\t\t\thorizontalAlign: OverrideType.overwrite,\n\t\t\tavailability: OverrideType.overwrite,\n\t\t\tisNavigable: OverrideType.overwrite,\n\t\t\tsettings: OverrideType.overwrite,\n\t\t\tformatOptions: OverrideType.overwrite,\n\t\t\texportSettings: OverrideType.overwrite\n\t\t}\n\t);\n\n\treturn addComputedColumns(tableColumns, tableType, visualizationPath, converterContext);\n}\n\nexport function findColumnByPath(path: string, tableColumns: TableColumn[]): TableColumn | undefined {\n\treturn tableColumns.find((column) => {\n\t\tconst annotationColumn = column as AnnotationTableColumn;\n\t\treturn annotationColumn.propertyInfos === undefined && annotationColumn.relativePath === path;\n\t});\n}\n\n/**\n * Sets the 'unit', 'textArrangement', 'timezone' and 'exportsettings' properties in columns when necessary.\n * @param converterContext The instance of the converter context\n * @param tableColumns The columns to be updated\n */\nexport function updateLinkedProperties(converterContext: ConverterContext, tableColumns: TableColumn[]): void {\n\tconst dataModelObjectPath = converterContext.getConverterContextFor(converterContext.getContextPath()).getDataModelObjectPath();\n\ttableColumns.forEach((oColumn) => {\n\t\tconst tableColumn = oColumn as AnnotationTableColumn;\n\t\tif (tableColumn.propertyInfos === undefined && tableColumn.relativePath) {\n\t\t\tconst propertyDataModelObjectPath = enhanceDataModelPath<Property>(dataModelObjectPath, tableColumn.relativePath);\n\t\t\tconst property = propertyDataModelObjectPath.targetObject;\n\t\t\tif (property) {\n\t\t\t\taddCurrencyOrUoMToProperty(property, propertyDataModelObjectPath, tableColumns, tableColumn);\n\t\t\t\tconst timezoneProperty = getAssociatedTimezoneProperty(property);\n\t\t\t\tconst timezone = property?.annotations?.Common?.Timezone;\n\t\t\t\tif (timezoneProperty) {\n\t\t\t\t\tconst oTimezoneColumn = findColumnByPath(timezoneProperty.name, tableColumns);\n\t\t\t\t\ttableColumn.timezone = oTimezoneColumn?.name;\n\t\t\t\t} else if (timezone) {\n\t\t\t\t\ttableColumn.timezoneText = timezone.toString();\n\t\t\t\t}\n\t\t\t\taddTextArrangentInfoToProperty(property, propertyDataModelObjectPath, tableColumns, tableColumn);\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Adds the \"unit\" property into the columns when neccesary for columns with unit of measure and currencies.\n * @param property The property referenced on the column\n * @param propertyDataModelObjectPath The property DataModelObjectPath.\n * @param tableColumns The list of columns displayed on the table\n * @param tableColumn The table column which adds the currency or unit\n */\nfunction addCurrencyOrUoMToProperty(\n\tproperty: Property,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\ttableColumns: TableColumn[],\n\ttableColumn: AnnotationTableColumn\n): void {\n\tconst currencyOrUoMProperty = getAssociatedCurrencyPropertyPath(property) || getAssociatedUnitPropertyPath(property);\n\tif (currencyOrUoMProperty) {\n\t\tconst currencyOrUoMPropertyDataModelObjectPath = enhanceDataModelPath<Property>(propertyDataModelObjectPath, currencyOrUoMProperty);\n\t\tconst currencyOrUoMRelativePath = getContextRelativeTargetObjectPath(currencyOrUoMPropertyDataModelObjectPath);\n\t\tif (currencyOrUoMRelativePath) {\n\t\t\tconst unitColumn = findColumnByPath(currencyOrUoMRelativePath, tableColumns);\n\t\t\ttableColumn.unit = unitColumn?.name;\n\t\t}\n\t} else {\n\t\tconst unit = property?.annotations?.Measures?.ISOCurrency || property?.annotations?.Measures?.Unit;\n\t\tif (unit) {\n\t\t\ttableColumn.unitText = `${unit}`;\n\t\t}\n\t}\n}\n\n/**\n * Add the \"textArrangement\" object to columns when necessary for columns containing text, such as descriptions.\n * @param property The property referenced by the column\n * @param propertyDataModelObjectPath The property DataModelObjectPath.\n * @param tableColumns The list of columns displayed on the table\n * @param tableColumn The table column which adds the text\n */\nfunction addTextArrangentInfoToProperty(\n\tproperty: Property,\n\tpropertyDataModelObjectPath: DataModelObjectPath<Property>,\n\ttableColumns: TableColumn[],\n\ttableColumn: AnnotationTableColumn\n): void {\n\tconst displayMode = getDisplayMode(property),\n\t\ttextPropertyPath = getAssociatedTextPropertyPath(property);\n\tif (textPropertyPath && displayMode !== \"Value\") {\n\t\tconst textPropertyDataModelObjectPath = enhanceDataModelPath<Property>(propertyDataModelObjectPath, textPropertyPath);\n\t\tconst textRelativePath = getContextRelativeTargetObjectPath(textPropertyDataModelObjectPath);\n\t\tif (textRelativePath) {\n\t\t\tconst textColumn = findColumnByPath(textRelativePath, tableColumns);\n\t\t\tif (textColumn && textColumn.name !== tableColumn.name) {\n\t\t\t\ttableColumn.textArrangement = {\n\t\t\t\t\ttextProperty: textColumn.name,\n\t\t\t\t\tmode: displayMode\n\t\t\t\t};\n\t\t\t\t// If text properties are used but hidden, we must include them to the export as there are used in the paste\n\t\t\t\tif (!textColumn.exportSettings) {\n\t\t\t\t\ttextColumn.exportSettings = { type: \"String\" };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Retrieve the columns from the entityType.\n * @param columnsToBeCreated The columns to be created.\n * @param entityType The target entity type.\n * @param annotationColumns The array of columns created based on LineItem annotations.\n * @param converterContext The converter context.\n * @param tableType The table type.\n * @param tableCreationMode The creation mode of the table.\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as description on a text arrangement annotation.\n * @param restrictionsOnProperties The existing restrictions on properties\n * @returns The column from the entityType\n */\nexport const getColumnsFromEntityType = function (\n\tcolumnsToBeCreated: Record<string, Property>,\n\tentityType: EntityType,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttableType: TableType,\n\ttableCreationMode: CreationMode,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trestrictionsOnProperties?: RestrictionsOnProperties\n): AnnotationTableColumn[] {\n\tif (annotationColumns === undefined) {\n\t\tannotationColumns = [];\n\t}\n\n\tlet propertiesNotToBeConsidered: string[] = [];\n\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\tconst groupableProperties = aggregationHelper.getGroupableProperties();\n\t//For Analytical table, we exclude all properties that are not groupable and used as Text in a groupable Property.\n\tif (tableType === \"AnalyticalTable\" && aggregationHelper.isAnalyticsSupported() && groupableProperties) {\n\t\tpropertiesNotToBeConsidered = groupableProperties\n\t\t\t.map((property) => property.$target)\n\t\t\t.filter((target) => target !== undefined)\n\t\t\t.map((target) => getAssociatedTextProperty(target as Property))\n\t\t\t.filter((textProp) => textProp && !aggregationHelper.isPropertyGroupable(textProp))\n\t\t\t.map((prop) => prop?.name)\n\t\t\t.filter((name) => name !== undefined) as string[];\n\t}\n\tentityType.entityProperties.forEach((property: Property) => {\n\t\t// Catch already existing columns - which were added before by LineItem Annotations\n\t\tconst exists = annotationColumns.some((column) => {\n\t\t\treturn column.name === property.name;\n\t\t});\n\t\t// if target type exists, it is a complex property and should be ignored\n\t\tif (!property.targetType && !exists && !propertiesNotToBeConsidered.includes(property.name)) {\n\t\t\tconst relatedPropertiesInfo: ComplexPropertyInfo = collectRelatedProperties(\n\t\t\t\tproperty.name,\n\t\t\t\tproperty,\n\t\t\t\tconverterContext,\n\t\t\t\ttrue,\n\t\t\t\ttableType\n\t\t\t);\n\t\t\tconst relatedPropertyNames: string[] = Object.keys(relatedPropertiesInfo.properties);\n\t\t\tconst additionalPropertyNames: string[] = Object.keys(relatedPropertiesInfo.additionalProperties);\n\t\t\t// Include the text properties and their corresponding text arrangement\n\t\t\trelatedPropertyNames.forEach((name) => {\n\t\t\t\taddPropertyToDisplayModeOfDescriptionPropertiesMap(displayModeOfDescriptionPropertiesMap, relatedPropertiesInfo, name);\n\t\t\t});\n\n\t\t\tconst columnInfo = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tconverterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName),\n\t\t\t\tproperty.name,\n\t\t\t\ttrue,\n\t\t\t\ttrue,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\ttableType,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode,\n\t\t\t\trelatedPropertiesInfo\n\t\t\t);\n\t\t\tif (relatedPropertyNames.length > 0) {\n\t\t\t\tcolumnInfo.propertyInfos = relatedPropertyNames;\n\t\t\t\tif (relatedPropertiesInfo.exportSettings.dataPointTargetValue) {\n\t\t\t\t\tcolumnInfo.exportDataPointTargetValue = relatedPropertiesInfo.exportSettings.dataPointTargetValue;\n\t\t\t\t}\n\t\t\t\t// Collect information of related columns to be created.\n\t\t\t\trelatedPropertyNames.forEach((name) => {\n\t\t\t\t\tcolumnsToBeCreated[name] = relatedPropertiesInfo.properties[name].annotationProperty;\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (additionalPropertyNames.length > 0) {\n\t\t\t\tcolumnInfo.additionalPropertyInfos = additionalPropertyNames;\n\t\t\t\t// Create columns for additional properties identified for ALP use case.\n\t\t\t\tadditionalPropertyNames.forEach((additionalPropertyName) => {\n\t\t\t\t\t// Intentional overwrite as we require only one new PropertyInfo for a related Property.\n\t\t\t\t\tcolumnsToBeCreated[additionalPropertyName] = relatedPropertiesInfo.additionalProperties[additionalPropertyName];\n\t\t\t\t});\n\t\t\t}\n\t\t\tannotationColumns.push(columnInfo);\n\t\t}\n\t\t// In case a property has defined a #TextOnly text arrangement that points to a text property (and not a 'hard coded text') don't only create the complex property with the text property as a child property,\n\t\t// but also the property itself as it can be used as within the sortConditions or on custom columns.\n\t\t// This step must be valid also from the columns added via LineItems or from a column available on the p13n.\n\t\tif (getDisplayMode(property) === \"Description\") {\n\t\t\trestrictionsOnProperties?.nonSortableProperties.push(property.name);\n\t\t\tif (isPathAnnotationExpression(property?.annotations?.Common?.Text)) {\n\t\t\t\tannotationColumns.push(\n\t\t\t\t\tgetColumnDefinitionFromProperty(\n\t\t\t\t\t\tproperty,\n\t\t\t\t\t\tconverterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName),\n\t\t\t\t\t\tproperty.name,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\taggregationHelper,\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\t\ttableType,\n\t\t\t\t\t\trestrictionsOnProperties,\n\t\t\t\t\t\ttableCreationMode\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t});\n\t// Create a propertyInfo for each related property.\n\tconst relatedColumns = _createRelatedColumns(\n\t\tcolumnsToBeCreated,\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\tentityType,\n\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\ttableType,\n\t\ttableCreationMode,\n\t\trestrictionsOnProperties\n\t);\n\treturn annotationColumns.concat(relatedColumns);\n};\n\n/**\n * Create a column definition from a property.\n * @param property Entity type property for which the column is created\n * @param fullPropertyPath The full path to the target property\n * @param relativePath The relative path to the target property based on the context\n * @param useDataFieldPrefix Should be prefixed with \"DataField::\", else it will be prefixed with \"Property::\"\n * @param availableForAdaptation Decides whether the column should be available for adaptation\n * @param aggregationHelper The aggregationHelper for the entity\n * @param converterContext The converter context\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as description on a text arrangement annotation\n * @param restrictionsOnProperties The existing restrictions on properties\n * @param tableCreationMode The creation mode of the table\n * @param relatedPropertiesInfo The properties identified so far for the column\n * @param relativePathForMultiValue The MDC path used for the 1:n property to allow filtering from MDC\n * @returns The annotation column definition\n */\nconst getColumnDefinitionFromProperty = function (\n\tproperty: Property,\n\tfullPropertyPath: string,\n\trelativePath: string,\n\tuseDataFieldPrefix: boolean,\n\tavailableForAdaptation: boolean,\n\taggregationHelper: AggregationHelper,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\ttableType?: TableType,\n\trestrictionsOnProperties?: RestrictionsOnProperties,\n\ttableCreationMode?: CreationMode,\n\trelatedPropertiesInfo?: ComplexPropertyInfo,\n\trelativePathForMultiValue?: string\n): AnnotationTableColumn {\n\tconst semanticObjectAnnotationPath = getSemanticObjectPath(converterContext, property);\n\tconst isHidden = isReferencePropertyStaticallyHidden(property);\n\tconst groupPath: string | undefined = property.name ? _sliceAtSlash(property.name, true, false) : undefined;\n\tconst isGroup: boolean = groupPath != property.name;\n\tconst label = getLabel(property, isGroup);\n\tconst dataType = getDataFieldDataType(property);\n\tconst propertyTypeConfig = getTypeConfig(property, dataType);\n\tconst isAPropertyFromTextOnlyAnnotation = displayModeOfDescriptionPropertiesMap[relativePath] === \"Description\";\n\tconst sortable =\n\t\t(!isHidden || isAPropertyFromTextOnlyAnnotation) && !restrictionsOnProperties?.nonSortableProperties.includes(relativePath);\n\tconst filterable = !restrictionsOnProperties?.nonFilterableProperties.includes(relativePath);\n\tconst groupable =\n\t\taggregationHelper.isAnalyticsSupported() && tableType === \"AnalyticalTable\"\n\t\t\t? !!aggregationHelper.isPropertyGroupable(property)\n\t\t\t: sortable;\n\tconst typeConfig = {\n\t\tclassName: property.type || dataType,\n\t\tformatOptions: propertyTypeConfig.formatOptions,\n\t\tconstraints: propertyTypeConfig.constraints\n\t};\n\tlet exportSettings: PropertyInfo[\"exportSettings\"] = null;\n\tif (_isExportableColumn(property)) {\n\t\texportSettings = createColumnExportSettings(property, relatedPropertiesInfo);\n\t}\n\tconst availability = !isHidden && availableForAdaptation ? \"Adaptation\" : \"Hidden\";\n\tconst collectedNavigationPropertyLabels: string[] | undefined = _getCollectedNavigationPropertyLabels(relativePath, converterContext);\n\tif (relativePathForMultiValue) {\n\t\trelativePath = relativePathForMultiValue;\n\t}\n\tconst name = useDataFieldPrefix ? relativePath : `Property::${relativePath}`;\n\tconst key = (useDataFieldPrefix ? \"DataField::\" : \"Property::\") + replaceSpecialChars(relativePath);\n\n\tconst column: AnnotationTableColumn = {\n\t\tkey: key,\n\t\ttype: ColumnType.Annotation,\n\t\tdataType: dataType ?? property.type,\n\t\tlabel: label ?? property.name,\n\t\tgroupLabel: isGroup ? getLabel(property) : undefined,\n\t\tgroup: isGroup ? groupPath : undefined,\n\t\tannotationPath: fullPropertyPath,\n\t\tsemanticObjectPath: semanticObjectAnnotationPath,\n\t\tavailability: availability,\n\t\tname: name,\n\t\trelativePath: relativePath,\n\t\tsortable: sortable,\n\t\tfilterable: filterable,\n\t\tisGroupable: groupable,\n\t\tisKey: property.isKey,\n\t\texportSettings: exportSettings,\n\t\tcaseSensitive: isFilteringCaseSensitive(converterContext),\n\t\ttypeConfig: typeConfig as PropertyTypeConfig,\n\t\timportance: getImportance(converterContext, property.annotations?.UI?.DataFieldDefault),\n\t\trequired: isRequiredColumn(converterContext, property, tableCreationMode),\n\t\tadditionalLabels: collectedNavigationPropertyLabels\n\t};\n\t_addToolTip(property, column);\n\t_setExportSettingsForDataPoint(property, column);\n\n\tif (\n\t\taggregationHelper.isAnalyticsSupported() &&\n\t\tModelHelper.isObjectPathDraftSupported(converterContext.getDataModelObjectPath()) &&\n\t\t(relativePath === \"HasActiveEntity\" || relativePath === \"HasDraftEntity\" || relativePath === \"IsActiveEntity\")\n\t) {\n\t\t// In case of analytical table on a draft-enabled entity, we always consider the HasDraftEntity, HasActiveEntity and IsActiveEntity properties as\n\t\t// technically groupable, as we need to load them for our internal logic.\n\t\tcolumn.extension = {\n\t\t\ttechnicallyAggregatable: false,\n\t\t\ttechnicallyGroupable: true\n\t\t};\n\t}\n\treturn column;\n};\n\n/**\n * Create the export settings for a given column.\n * @param column The given column from a line item as a data field or a property from the entity type\n * @param relatedPropertiesInfo The related properties linked to the column (named also complex property)\n * @returns The export settings in a the given column\n */\nconst createColumnExportSettings = function (\n\tcolumn: Property | DataFieldAbstractTypes,\n\trelatedPropertiesInfo?: ComplexPropertyInfo\n): ColumnExportSettings {\n\tlet unitProperty, timezoneProperty, unitText, timezoneText, utc, isATimezone, currencyProperty, scale;\n\tconst relatedPropertyNames = relatedPropertiesInfo ? Object.keys(relatedPropertiesInfo.properties) : [];\n\tif (relatedPropertiesInfo && relatedPropertyNames?.length === 1) {\n\t\t// Create the export settings of a column based on the related (child) property in case there is only one.\n\t\t// This is required when we have a text only annotation to compute the export settings from the text instead of the value\n\t\tcolumn = relatedPropertiesInfo.properties[relatedPropertyNames[0]].annotationProperty;\n\t}\n\tconst dataType = getDataFieldDataType(column);\n\tif (isProperty(column)) {\n\t\tunitProperty = getAssociatedUnitProperty(column);\n\t\tcurrencyProperty = getAssociatedCurrencyProperty(column);\n\t\ttimezoneProperty = getAssociatedTimezoneProperty(column);\n\t\tunitText = getStaticUnitOrCurrency(column);\n\t\ttimezoneText = getStaticTimezone(column);\n\t\tisATimezone = isTimezone(column);\n\t\tscale = column.scale;\n\t}\n\tunitProperty = relatedPropertiesInfo?.exportSettings?.unitProperty ?? unitProperty?.name ?? currencyProperty?.name;\n\ttimezoneProperty = relatedPropertiesInfo?.exportSettings?.timezoneProperty ?? timezoneProperty?.name;\n\tscale = relatedPropertiesInfo?.exportSettings?.scale ?? scale;\n\tconst exportType = getExportDataType(dataType, isATimezone, !!currencyProperty, relatedPropertiesInfo?.exportSettings);\n\tif (timezoneProperty || (exportType === \"DateTime\" && !timezoneText)) {\n\t\tutc = false;\n\t}\n\tconst exportSettings: ColumnExportSettings = {\n\t\ttype: exportType,\n\t\tinputFormat: getDateInputFormat(dataType),\n\t\tdelimiter: getDelimiter(dataType),\n\t\tscale: scale,\n\t\tunitProperty: unitProperty,\n\t\tunit: relatedPropertiesInfo?.exportSettings.unit ?? unitText,\n\t\ttimezoneProperty: timezoneProperty,\n\t\ttimezone: relatedPropertiesInfo?.exportSettings.timezone ?? timezoneText?.toString(),\n\t\ttemplate: relatedPropertiesInfo?.exportSettings.template,\n\t\t//only in case of complex properties, wrap the cell content\ton the excel exported file\n\t\twrap: relatedPropertiesInfo?.exportSettings.wrap,\n\t\tutc: utc,\n\t\tproperty: relatedPropertiesInfo?.exportSettings.property\n\t};\n\tif (exportSettings.unitProperty || exportSettings.unit) {\n\t\texportSettings.autoScale = true;\n\t}\n\treturn removeUndefinedFromExportSettings(exportSettings);\n};\n\n/**\n * Gets the export format template for columns with dates.\n * @param dataType The data type of the column\n * @returns The inputFormat\n */\nconst getDateInputFormat = function (dataType?: string): string | undefined {\n\treturn dataType === \"Edm.Date\" ? \"YYYY-MM-DD\" : undefined;\n};\n\n/**\n * Gets the delimiter in numeric columns.\n * The delimiter is used to display thousands separator in numeric columns.\n * @param dataType The data type of the column\n * @returns True to display thousands separator in numeric columns\n */\nconst getDelimiter = function (dataType?: string): boolean | undefined {\n\treturn dataType === \"Edm.Int64\" ? true : undefined;\n};\n\n/**\n * Removes undefined values from the export settings object of a column.\n * @param exportSettings The export settings configurations for a column\n * @returns The export settings configurations without undefined values\n */\nconst removeUndefinedFromExportSettings = function (exportSettings: ColumnExportSettings): ColumnExportSettings {\n\t//Remove undefined settings from exportSetting object\n\tfor (const setting in exportSettings) {\n\t\tif (exportSettings[setting as keyof ColumnExportSettings] === undefined) {\n\t\t\tdelete exportSettings[setting as keyof ColumnExportSettings];\n\t\t}\n\t}\n\treturn exportSettings;\n};\n\n/**\n * Returns Boolean true for exportable columns, false for non exportable columns.\n * @param source The dataField or property to be evaluated\n * @returns True for exportable column, false for non exportable column\n */\nfunction _isExportableColumn(source: DataFieldAbstractTypes | Property): boolean {\n\tlet propertyType, property;\n\tconst dataFieldDefaultProperty = (source as Property).annotations.UI?.DataFieldDefault;\n\tif (isProperty(source)) {\n\t\tif (isReferencePropertyStaticallyHidden(source)) {\n\t\t\treturn false;\n\t\t}\n\t\tpropertyType = dataFieldDefaultProperty?.$Type;\n\t} else if (isReferencePropertyStaticallyHidden(source)) {\n\t\treturn false;\n\t} else {\n\t\tproperty = source;\n\t\tpropertyType = property.$Type;\n\t\tif (propertyType === UIAnnotationTypes.DataFieldForAnnotation && (property as DataFieldForAnnotation).Target?.$target?.$Type) {\n\t\t\t//For Chart\n\t\t\tpropertyType = (property as DataFieldForAnnotation).Target?.$target?.$Type;\n\t\t\treturn propertyType !== undefined && !UIAnnotationTypes.ChartDefinitionType.includes(propertyType);\n\t\t} else if (\n\t\t\t(property as DataField).Value?.$target?.annotations?.Core?.MediaType?.term === \"Org.OData.Core.V1.MediaType\" &&\n\t\t\t(property as DataField).Value?.$target?.annotations?.Core?.isURL !== true\n\t\t) {\n\t\t\t//For Stream\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn propertyType\n\t\t? ![\n\t\t\t\tUIAnnotationTypes.DataFieldForAction,\n\t\t\t\tUIAnnotationTypes.DataFieldForIntentBasedNavigation,\n\t\t\t\tUIAnnotationTypes.DataFieldForActionGroup\n\t\t  ].includes(propertyType)\n\t\t: true;\n}\n\n/**\n * Returns Boolean true for valid columns, false for invalid columns.\n * @param dataField Different DataField types defined in the annotations\n * @returns True for valid columns, false for invalid columns\n */\nconst _isValidColumn = function (dataField: DataFieldAbstractTypes): boolean {\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\treturn !!dataField.Inline;\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\treturn true;\n\t\tdefault:\n\t\t\t// Todo: Replace with proper Log statement once available\n\t\t\t//  throw new Error(\"Unhandled DataField Abstract type: \" + dataField.$Type);\n\t\t\treturn false;\n\t}\n};\n\n/**\n * Returns the binding expression to evaluate the visibility of a DataField or DataPoint annotation.\n *\n * SAP Fiori elements will evaluate either the UI.Hidden annotation defined on the annotation itself or on the target property.\n * @param dataFieldModelPath The metapath referring to the annotation that is evaluated by SAP Fiori elements.\n * @returns An expression that you can bind to the UI.\n */\nconst _getVisibleExpression = function (\n\tdataFieldModelPath: DataModelObjectPath<DataFieldAbstractTypes | DataPointTypeTypes>\n): BindingToolkitExpression<boolean> {\n\tconst targetObject = dataFieldModelPath.targetObject;\n\tlet propertyValue;\n\tif (targetObject) {\n\t\tswitch (targetObject.$Type) {\n\t\t\tcase UIAnnotationTypes.DataField:\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\tcase UIAnnotationTypes.DataPointType:\n\t\t\t\tpropertyValue = targetObject.Value.$target;\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\t// if it is a DataFieldForAnnotation pointing to a DataPoint we look at the dataPoint's value\n\t\t\t\tif (targetObject?.Target?.$target?.$Type === UIAnnotationTypes.DataPointType) {\n\t\t\t\t\tpropertyValue = targetObject.Target.$target?.Value.$target;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\tdefault:\n\t\t\t\tpropertyValue = undefined;\n\t\t}\n\t}\n\tconst isAnalyticalGroupHeaderExpanded = /*formatOptions?.isAnalytics ? UI.IsExpanded :*/ constant(false);\n\tconst isAnalyticalLeaf = /*formatOptions?.isAnalytics ? equal(UI.NodeLevel, 0) :*/ constant(false);\n\t// A data field is visible if:\n\t// - the UI.Hidden expression in the original annotation does not evaluate to 'true'\n\t// - the UI.Hidden expression in the target property does not evaluate to 'true'\n\t// - in case of Analytics it's not visible for an expanded GroupHeader\n\treturn and(\n\t\t...[\n\t\t\tnot(equal(getExpressionFromAnnotation(targetObject?.annotations?.UI?.Hidden), true)),\n\t\t\tifElse(\n\t\t\t\t!!propertyValue,\n\t\t\t\tpropertyValue && not(equal(getExpressionFromAnnotation(propertyValue.annotations?.UI?.Hidden), true)),\n\t\t\t\ttrue\n\t\t\t),\n\t\t\tor(not(isAnalyticalGroupHeaderExpanded), isAnalyticalLeaf)\n\t\t]\n\t);\n};\n\n/**\n * Returns hidden binding expressions for a field group.\n * @param dataFieldGroup DataField defined in the annotations\n * @returns Compile binding of field group expressions.\n */\nconst _getFieldGroupHiddenExpressions = function (dataFieldGroup: DataFieldAbstractTypes): CompiledBindingToolkitExpression | undefined {\n\tconst fieldGroupHiddenExpressions: BindingToolkitExpression<boolean>[] = [];\n\tif (\n\t\tdataFieldGroup.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\tdataFieldGroup.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t) {\n\t\tif (dataFieldGroup?.annotations?.UI?.Hidden) {\n\t\t\treturn compileExpression(not(equal(getExpressionFromAnnotation(dataFieldGroup.annotations.UI.Hidden), true)));\n\t\t} else {\n\t\t\tdataFieldGroup.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes | DataPointTypeTypes) => {\n\t\t\t\tfieldGroupHiddenExpressions.push(\n\t\t\t\t\t_getVisibleExpression({ targetObject: innerDataField } as DataModelObjectPath<\n\t\t\t\t\t\tDataFieldAbstractTypes | DataPointTypeTypes\n\t\t\t\t\t>)\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn compileExpression(ifElse(or(...fieldGroupHiddenExpressions), constant(true), constant(false)));\n\t\t}\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\n/**\n * Returns the label for the property and dataField.\n * @param [property] Property, DataField or Navigation Property defined in the annotations\n * @param isGroup\n * @returns Label of the property or DataField\n */\nconst getLabel = function (property: DataFieldAbstractTypes | Property | NavigationProperty, isGroup = false): string | undefined {\n\tif (!property) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(property) || isNavigationProperty(property)) {\n\t\tconst dataFieldDefault = (property as Property).annotations?.UI?.DataFieldDefault;\n\t\tif (dataFieldDefault && !dataFieldDefault.qualifier && dataFieldDefault.Label) {\n\t\t\treturn dataFieldDefault.Label?.toString();\n\t\t}\n\t\treturn property.annotations.Common?.Label?.toString() ?? property.name;\n\t} else if (isDataFieldTypes(property)) {\n\t\tif (!!isGroup && property.$Type === UIAnnotationTypes.DataFieldWithIntentBasedNavigation) {\n\t\t\treturn property?.Label?.toString();\n\t\t}\n\t\treturn (\n\t\t\tproperty?.Label?.toString() ??\n\t\t\tcompileExpression(\n\t\t\t\tgetExpressionFromAnnotation(property.Value?.$target?.annotations?.Common?.Label, [], property.Value?.$target?.name)\n\t\t\t)\n\t\t);\n\t} else if (property.$Type === UIAnnotationTypes.DataFieldForAnnotation) {\n\t\treturn (\n\t\t\tproperty.Label?.toString() ??\n\t\t\tcompileExpression(\n\t\t\t\tgetExpressionFromAnnotation((property.Target?.$target as DataPoint)?.Value?.$target?.annotations?.Common?.Label?.valueOf())\n\t\t\t)\n\t\t);\n\t} else {\n\t\treturn property.Label?.toString();\n\t}\n};\n\nconst _getTooltip = function (source: DataFieldAbstractTypes | Property): string | undefined {\n\tif (!source) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(source) || source.annotations?.Common?.QuickInfo) {\n\t\treturn source.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(source.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else if (isDataFieldTypes(source)) {\n\t\treturn source.Value?.$target?.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(source.Value.$target.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else if (source.$Type === UIAnnotationTypes.DataFieldForAnnotation) {\n\t\tconst datapointTarget = source.Target?.$target as DataPoint;\n\t\treturn datapointTarget?.Value?.$target?.annotations?.Common?.QuickInfo\n\t\t\t? compileExpression(getExpressionFromAnnotation(datapointTarget.Value.$target.annotations.Common.QuickInfo))\n\t\t\t: undefined;\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\nexport function getRowStatusVisibility(colName: string, isSemanticKeyInFieldGroup?: boolean): BindingToolkitExpression<boolean> {\n\treturn formatResult(\n\t\t[\n\t\t\tpathInModel(`semanticKeyHasDraftIndicator`, \"internal\"),\n\t\t\tpathInModel(`filteredMessages`, \"internal\"),\n\t\t\tcolName,\n\t\t\tisSemanticKeyInFieldGroup\n\t\t],\n\t\ttableFormatters.getErrorStatusTextVisibilityFormatter\n\t);\n}\n\n/**\n * Creates a PropertyInfo for each identified property consumed by a LineItem.\n * @param columnsToBeCreated Identified properties.\n * @param existingColumns The list of columns created for LineItems and Properties of entityType.\n * @param converterContext The converter context.\n * @param entityType The entity type for the LineItem\n * @param displayModeOfDescriptionPropertiesMap The map of properties referenced as text on a text arrangement annotation.\n * @param tableCreationMode The creation mode of the table\n * @param restrictionsOnProperties The existing restrictions on properties\n * @returns The array of columns created.\n */\nconst _createRelatedColumns = function (\n\tcolumnsToBeCreated: Record<string, Property>,\n\texistingColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType,\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\ttableType?: TableType,\n\ttableCreationMode?: CreationMode,\n\trestrictionsOnProperties?: RestrictionsOnProperties\n): AnnotationTableColumn[] {\n\tconst relatedColumns: AnnotationTableColumn[] = [];\n\tconst relatedPropertyNameMap: Record<string, string> = {};\n\tconst aggregationHelper = new AggregationHelper(entityType, converterContext);\n\tObject.keys(columnsToBeCreated).forEach((name) => {\n\t\tconst property = columnsToBeCreated[name],\n\t\t\tannotationPath = converterContext.getAbsoluteAnnotationPath(name),\n\t\t\t// Check whether the related column already exists.\n\t\t\trelatedColumn = existingColumns.find((column) => column.name === name);\n\t\tconst dataModelObjectPath = converterContext.getConverterContextFor(converterContext.getContextPath()).getDataModelObjectPath();\n\t\tconst propertyObjectPath = enhanceDataModelPath<PageContextPathTarget>(dataModelObjectPath, name);\n\t\tif (isMultiValueField(propertyObjectPath)) {\n\t\t\tconst newNameRelativeTargetPath = getContextRelativeTargetObjectPath(propertyObjectPath, false, true);\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\ttableType,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode,\n\t\t\t\tundefined,\n\t\t\t\tnewNameRelativeTargetPath\n\t\t\t);\n\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\trelatedColumns.push(column);\n\t\t\trelatedPropertyNameMap[name] = newNameRelativeTargetPath ?? name;\n\t\t} else if (relatedColumn === undefined) {\n\t\t\t// Case 1: Key contains DataField prefix to ensure all property columns have the same key format.\n\t\t\t// New created property column is set to hidden.\n\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\tproperty,\n\t\t\t\tannotationPath,\n\t\t\t\tname,\n\t\t\t\ttrue,\n\t\t\t\tfalse,\n\t\t\t\taggregationHelper,\n\t\t\t\tconverterContext,\n\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\ttableType,\n\t\t\t\trestrictionsOnProperties,\n\t\t\t\ttableCreationMode\n\t\t\t);\n\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\trelatedColumns.push(column);\n\t\t} else if (relatedColumn.annotationPath !== annotationPath || relatedColumn.propertyInfos) {\n\t\t\t// Case 2: The existing column points to a LineItem (or)\n\t\t\t// Case 3: This is a self reference from an existing column\n\t\t\tconst newName = `Property::${name}`;\n\t\t\t// Checking whether the related property column has already been created in a previous iteration.\n\t\t\tif (!existingColumns.some((column) => column.name === newName)) {\n\t\t\t\t// Create a new property column with 'Property::' prefix,\n\t\t\t\t// Set it to hidden as it is only consumed by Complex property infos.\n\t\t\t\tconst column = getColumnDefinitionFromProperty(\n\t\t\t\t\tproperty,\n\t\t\t\t\tannotationPath,\n\t\t\t\t\tname,\n\t\t\t\t\tfalse,\n\t\t\t\t\tfalse,\n\t\t\t\t\taggregationHelper,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\ttableType,\n\t\t\t\t\trestrictionsOnProperties,\n\t\t\t\t\ttableCreationMode\n\t\t\t\t);\n\t\t\t\tcomputeHiddenOnRelatedColumns(existingColumns, name, column);\n\t\t\t\trelatedColumns.push(column);\n\t\t\t\trelatedPropertyNameMap[name] = newName;\n\t\t\t} else if (\n\t\t\t\texistingColumns.some((column) => column.name === newName) &&\n\t\t\t\texistingColumns.some((column) => column.propertyInfos?.includes(name))\n\t\t\t) {\n\t\t\t\trelatedPropertyNameMap[name] = newName;\n\t\t\t}\n\t\t}\n\t});\n\t// The property 'name' has been prefixed with 'Property::' for uniqueness.\n\t// Update the same in other propertyInfos[] references which point to this property.\n\texistingColumns.forEach((column) => {\n\t\tcolumn.propertyInfos = column.propertyInfos?.map((propertyInfo) => relatedPropertyNameMap[propertyInfo] ?? propertyInfo);\n\t\tcolumn.additionalPropertyInfos = column.additionalPropertyInfos?.map(\n\t\t\t(propertyInfo) => relatedPropertyNameMap[propertyInfo] ?? propertyInfo\n\t\t);\n\t});\n\treturn relatedColumns;\n};\n\n/**\n * Getting the Column Name\n * If it points to a DataField with one property or DataPoint with one property, it will use the property name\n * here to be consistent with the existing flex changes.\n * @param dataField Different DataField types defined in the annotations\n * @returns The name of annotation columns\n */\nconst _getAnnotationColumnName = function (dataField: DataFieldAbstractTypes): string {\n\t// This is needed as we have flexibility changes already that we have to check against\n\tif (isDataFieldTypes(dataField) && dataField.Value?.path) {\n\t\treturn dataField.Value?.path;\n\t} else if (dataField.$Type === UIAnnotationTypes.DataFieldForAnnotation && (dataField.Target?.$target as DataPoint)?.Value?.path) {\n\t\t// This is for removing duplicate properties. For example, 'Progress' Property is removed if it is already defined as a DataPoint\n\t\treturn (dataField.Target?.$target as DataPoint)?.Value.path;\n\t} else {\n\t\treturn KeyHelper.generateKeyFromDataField(dataField);\n\t}\n};\n\n/**\n * Determines if the data field labels have to be displayed in the table.\n * @param fieldGroupName The `DataField` name being processed.\n * @param visualizationPath\n * @param converterContext\n * @returns `showDataFieldsLabel` value from the manifest\n */\nconst _getShowDataFieldsLabel = function (\n\tfieldGroupName: string,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean | undefined {\n\tconst columns = converterContext.getManifestControlConfiguration<TableManifestConfiguration>(visualizationPath)?.columns;\n\tconst columnKeys = columns && Object.keys(columns);\n\treturn (\n\t\tcolumnKeys &&\n\t\t!!columnKeys.find(function (key: string) {\n\t\t\treturn key === fieldGroupName && (columns[key] as CustomDefinedTableColumnForOverride).showDataFieldsLabel;\n\t\t})\n\t);\n};\n\n/**\n * Determines the relative path of the property with respect to the root entity.\n * @param dataField The `DataField` being processed.\n * @returns The relative path\n */\nconst _getRelativePath = function (dataField: DataFieldAbstractTypes): string {\n\tlet relativePath = \"\";\n\tswitch (dataField.$Type) {\n\t\tcase UIAnnotationTypes.DataField:\n\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\tcase UIAnnotationTypes.DataFieldWithIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldWithAction:\n\t\t\trelativePath = (dataField as DataField)?.Value?.path;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\trelativePath = dataField?.Target?.value;\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\tcase UIAnnotationTypes.DataFieldWithActionGroup:\n\t\t\trelativePath = KeyHelper.generateKeyFromDataField(dataField);\n\t\t\tbreak;\n\t}\n\treturn relativePath;\n};\n\nconst _sliceAtSlash = function (path: string, isLastSlash: boolean, isLastPart: boolean): string {\n\tconst iSlashIndex = isLastSlash ? path.lastIndexOf(\"/\") : path.indexOf(\"/\");\n\tif (iSlashIndex === -1) {\n\t\treturn path;\n\t}\n\treturn isLastPart ? path.substring(iSlashIndex + 1, path.length) : path.substring(0, iSlashIndex);\n};\n\n/**\n * Determines if the column contains a multi-value field.\n * @param dataField The DataField being processed\n * @param converterContext The converter context\n * @returns True if the DataField corresponds to a multi-value field.\n */\nconst _isColumnMultiValued = function (\n\tdataField: DataFieldAbstractTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean {\n\tif (isDataFieldTypes(dataField) && isPathAnnotationExpression(dataField.Value)) {\n\t\tconst propertyObjectPath = enhanceDataModelPath<PageContextPathTarget>(\n\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\tdataField.Value.path\n\t\t);\n\t\treturn isMultiValueField(propertyObjectPath);\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Determine whether a column is sortable.\n * @param dataField The data field being processed\n * @param propertyPath The property path\n * @param nonSortableColumns Collection of non-sortable column names as per annotation\n * @param relatedPropertiesInfo The related properties linked to the column\n * @returns True if the column is sortable\n */\nconst _isColumnSortable = function (\n\tdataField: DataFieldAbstractTypes,\n\tpropertyPath: string,\n\tnonSortableColumns: string[],\n\trelatedPropertiesInfo: ComplexPropertyInfo\n): boolean {\n\treturn (\n\t\t!nonSortableColumns.includes(propertyPath) && // Column is not marked as non-sortable via annotation\n\t\t(((dataField.$Type === UIAnnotationTypes.DataField || dataField.$Type === UIAnnotationTypes.DataFieldForAnnotation) &&\n\t\t\tObject.keys(relatedPropertiesInfo.properties).some((propName) => {\n\t\t\t\tconst isHidden = isReferencePropertyStaticallyHidden(relatedPropertiesInfo.properties[propName].annotationProperty);\n\t\t\t\treturn !isHidden && !nonSortableColumns.includes(propName);\n\t\t\t})) ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithUrl ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithIntentBasedNavigation ||\n\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldWithAction)\n\t);\n};\n\n/**\n * Returns whether filtering on the table is case sensitive.\n * @param converterContext The instance of the converter context\n * @returns Returns 'false' if FilterFunctions annotation supports 'tolower', else 'true'\n */\nexport const isFilteringCaseSensitive = function (converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\tconst filterFunctions: FilterFunctions | undefined = _getFilterFunctions(converterContext);\n\treturn ModelHelper.isFilteringCaseSensitive(undefined, filterFunctions);\n};\n\nfunction _getFilterFunctions(ConverterContext: ConverterContext<PageContextPathTarget>): FilterFunctions | undefined {\n\tconst entitySet = ConverterContext.getEntitySet();\n\tif (TypeGuards.isEntitySet(entitySet)) {\n\t\treturn (\n\t\t\tentitySet.annotations.Capabilities?.FilterFunctions ??\n\t\t\tConverterContext.getEntityContainer().annotations.Capabilities?.FilterFunctions\n\t\t);\n\t}\n\treturn undefined;\n}\n\n/**\n * Returns default format options for text fields in a table.\n * @param formatOptions\n * @returns Collection of format options with default values\n */\nfunction _getDefaultFormatOptionsForTable(formatOptions: FormatOptionsType | undefined): FormatOptionsType | undefined {\n\treturn formatOptions === undefined\n\t\t? undefined\n\t\t: {\n\t\t\t\ttextLinesEdit: 4,\n\t\t\t\t...formatOptions\n\t\t  };\n}\n\nfunction _findSemanticKeyValues(semanticKeys: SemanticKey, name: string): { values: string[]; semanticKeyFound: boolean } {\n\tconst aSemanticKeyValues: string[] = [];\n\tlet bSemanticKeyFound = false;\n\tfor (let i = 0; i < semanticKeys.length; i++) {\n\t\taSemanticKeyValues.push(semanticKeys[i].value);\n\t\tif (semanticKeys[i].value === name) {\n\t\t\tbSemanticKeyFound = true;\n\t\t}\n\t}\n\treturn {\n\t\tvalues: aSemanticKeyValues,\n\t\tsemanticKeyFound: bSemanticKeyFound\n\t};\n}\n\nfunction _findProperties(\n\tsemanticKeyValues: string[],\n\tfieldGroupProperties: string[]\n): { semanticKeyHasPropertyInFieldGroup: boolean; fieldGroupPropertyPath?: string } {\n\tlet semanticKeyHasPropertyInFieldGroup = false;\n\tlet sPropertyPath;\n\tif (semanticKeyValues && semanticKeyValues.length >= 1 && fieldGroupProperties && fieldGroupProperties.length >= 1) {\n\t\tfor (let i = 0; i < semanticKeyValues.length; i++) {\n\t\t\tif ([semanticKeyValues[i]].some((tmp) => fieldGroupProperties.includes(tmp))) {\n\t\t\t\tsemanticKeyHasPropertyInFieldGroup = true;\n\t\t\t\tsPropertyPath = semanticKeyValues[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tsemanticKeyHasPropertyInFieldGroup: semanticKeyHasPropertyInFieldGroup,\n\t\tfieldGroupPropertyPath: sPropertyPath\n\t};\n}\n\n/**\n * Find the first property in the fieldGroup that is part of the semantic keys.\n * @param dataFieldGroup\n * @param semanticKeyValues\n * @returns An object containing a flag true if a property is found and a propertyPath.\n */\nfunction _findSemanticKeyValuesInFieldGroup(\n\tdataFieldGroup: DataFieldAbstractTypes | null,\n\tsemanticKeyValues: string[]\n): { semanticKeyHasPropertyInFieldGroup: boolean; propertyPath?: string } {\n\t// this info is used in FieldHelper#isDraftIndicatorVisibleInFieldGroup to show a draft indicator at the end of a field group\n\tconst aProperties: string[] = [];\n\tlet _propertiesFound: { semanticKeyHasPropertyInFieldGroup: boolean; fieldGroupPropertyPath?: string } = {\n\t\tsemanticKeyHasPropertyInFieldGroup: false,\n\t\tfieldGroupPropertyPath: undefined\n\t};\n\tif (\n\t\tdataFieldGroup &&\n\t\tdataFieldGroup.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\tdataFieldGroup.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t) {\n\t\tdataFieldGroup.Target.$target.Data?.forEach((innerDataField: DataFieldAbstractTypes) => {\n\t\t\tif (\n\t\t\t\t(innerDataField.$Type === UIAnnotationTypes.DataField || innerDataField.$Type === UIAnnotationTypes.DataFieldWithUrl) &&\n\t\t\t\tinnerDataField.Value\n\t\t\t) {\n\t\t\t\taProperties.push(innerDataField.Value.path);\n\t\t\t}\n\t\t\t_propertiesFound = _findProperties(semanticKeyValues, aProperties);\n\t\t});\n\t}\n\treturn {\n\t\tsemanticKeyHasPropertyInFieldGroup: _propertiesFound.semanticKeyHasPropertyInFieldGroup,\n\t\tpropertyPath: _propertiesFound.fieldGroupPropertyPath\n\t};\n}\n\n/**\n * Returns default format options with draftIndicator for a column.\n * @param name\n * @param semanticKeys\n * @param dataFieldGroup\n * @returns Collection of format options with default values\n */\nfunction getDefaultDraftIndicatorForColumn(\n\tname: string,\n\tsemanticKeys: SemanticKey,\n\tdataFieldGroup: DataFieldAbstractTypes | null\n): Partial<{\n\tfieldGroupDraftIndicatorPropertyPath: string;\n\tfieldGroupName: string;\n\tshowErrorObjectStatus: CompiledBindingToolkitExpression;\n\thasDraftIndicator: boolean;\n}> {\n\tif (!semanticKeys) {\n\t\treturn {};\n\t}\n\tconst semanticKey = _findSemanticKeyValues(semanticKeys, name);\n\tconst semanticKeyInFieldGroup = _findSemanticKeyValuesInFieldGroup(dataFieldGroup, semanticKey.values);\n\tif (semanticKeyInFieldGroup.semanticKeyHasPropertyInFieldGroup) {\n\t\t// Semantic Key has a property in a FieldGroup\n\t\treturn {\n\t\t\t//TODO we should rather store hasSemanticKeyInFieldGroup\n\t\t\tfieldGroupDraftIndicatorPropertyPath: semanticKeyInFieldGroup.propertyPath,\n\t\t\tfieldGroupName: name,\n\t\t\tshowErrorObjectStatus: compileExpression(getRowStatusVisibility(name, true))\n\t\t};\n\t} else if (semanticKey.semanticKeyFound) {\n\t\treturn {\n\t\t\thasDraftIndicator: true,\n\t\t\tshowErrorObjectStatus: compileExpression(getRowStatusVisibility(name, false))\n\t\t};\n\t}\n\treturn {};\n}\n\nfunction _getImpNumber(dataField: DataFieldTypes): number {\n\tconst importance = dataField?.annotations?.UI?.Importance as string;\n\tif (importance && importance.includes(\"UI.ImportanceType/High\")) {\n\t\treturn 3;\n\t}\n\tif (importance && importance.includes(\"UI.ImportanceType/Medium\")) {\n\t\treturn 2;\n\t}\n\tif (importance && importance.includes(\"UI.ImportanceType/Low\")) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nfunction _getDataFieldImportance(dataField: DataFieldTypes): Importance {\n\tconst importance = dataField?.annotations?.UI?.Importance as string;\n\treturn importance ? (importance.split(\"/\")[1] as Importance) : Importance.None;\n}\n\n/**\n * Sets the export settings of a column containing datapoints.\n * @param property The property referenced on a given column\n * @param column The column to be updated\n */\nfunction _setExportSettingsForDataPoint(property: Property, column: AnnotationTableColumn): void {\n\tconst targetValuefromDP = getTargetValueOnDataPoint(property);\n\tif (\n\t\tisDataPointFromDataFieldDefault(property) &&\n\t\ttypeof targetValuefromDP === \"string\" &&\n\t\tcolumn.exportSettings &&\n\t\tcolumn.exportSettings?.unit !== \"%\"\n\t) {\n\t\tcolumn.exportDataPointTargetValue = targetValuefromDP;\n\t\tcolumn.exportSettings.template = \"{0}/\" + targetValuefromDP;\n\t}\n}\n\nfunction _getMaxImportance(fields: DataFieldTypes[]): Importance {\n\tif (fields && fields.length > 0) {\n\t\tlet maxImpNumber = -1;\n\t\tlet impNumber = -1;\n\t\tlet DataFieldWithMaxImportance;\n\t\tfor (const field of fields) {\n\t\t\timpNumber = _getImpNumber(field);\n\t\t\tif (impNumber > maxImpNumber) {\n\t\t\t\tmaxImpNumber = impNumber;\n\t\t\t\tDataFieldWithMaxImportance = field;\n\t\t\t}\n\t\t}\n\t\treturn _getDataFieldImportance(DataFieldWithMaxImportance as DataFieldTypes);\n\t}\n\treturn Importance.None;\n}\n\n/**\n * Returns the importance value for a column.\n * @param converterContext\n * @param dataField\n * @returns The importance value\n */\nexport function getImportance(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataField: DataFieldAbstractTypes | undefined\n): Importance | undefined {\n\tif (!dataField) {\n\t\treturn undefined;\n\t}\n\tconst semanticKeys = converterContext.getDataModelObjectPath().targetEntityType.annotations.Common?.SemanticKey ?? [];\n\tconst requiredProperties = getRequiredProperties(converterContext);\n\tconst highKeys = [...semanticKeys, ...requiredProperties].map((propertyPath) => propertyPath.$target?.fullyQualifiedName);\n\t//Evaluate default Importance is not set explicitly\n\tlet fieldsWithImportance;\n\tif (isAnnotationOfType<DataFieldForAnnotation>(dataField, UIAnnotationTypes.DataFieldForAnnotation)) {\n\t\tconst dataFieldTarget = dataField.Target.$target;\n\t\tif (isAnnotationOfType<FieldGroup>(dataFieldTarget, UIAnnotationTypes.FieldGroupType)) {\n\t\t\tconst fieldGroupData = dataFieldTarget.Data;\n\t\t\t//If a FieldGroup contains a semanticKey or required property, importance set to High\n\t\t\tif (\n\t\t\t\tfieldGroupData.some(function (fieldGroupDataField: DataFieldAbstractTypes): boolean {\n\t\t\t\t\treturn (\n\t\t\t\t\t\tisDataFieldTypes(fieldGroupDataField) && highKeys.includes(fieldGroupDataField.Value?.$target?.fullyQualifiedName)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\treturn Importance.High;\n\t\t\t} else {\n\t\t\t\t//If the DataFieldForAnnotation has an Importance we take it\n\t\t\t\tif (dataField?.annotations?.UI?.Importance) {\n\t\t\t\t\treturn _getDataFieldImportance(dataField as unknown as DataFieldTypes);\n\t\t\t\t}\n\t\t\t\t// else the highest importance (if any) is returned\n\t\t\t\tfieldsWithImportance = fieldGroupData.filter(function (item) {\n\t\t\t\t\treturn item?.annotations?.UI?.Importance;\n\t\t\t\t});\n\t\t\t\treturn _getMaxImportance(fieldsWithImportance as DataFieldTypes[]);\n\t\t\t}\n\t\t}\n\t}\n\treturn highKeys.includes((dataField as DataFieldTypes).Value?.$target?.fullyQualifiedName)\n\t\t? Importance.High\n\t\t: _getDataFieldImportance(dataField as unknown as DataFieldTypes);\n}\n\n/**\n * Returns line items from metadata annotations.\n * @param lineItemAnnotation Collection of data fields with their annotations\n * @param tableType The table type\n * @param visualizationPath The visualization path\n * @param converterContext The converter context\n * @returns The columns from the annotations\n */\nconst getColumnsFromAnnotations = function (\n\tlineItemAnnotation: LineItem,\n\ttableType: TableType,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): AnnotationTableColumn[] {\n\tconst entityType: EntityType = converterContext.getAnnotationEntityType(lineItemAnnotation),\n\t\tannotationColumns: AnnotationTableColumn[] = [],\n\t\tcolumnsToBeCreated: Record<string, Property> = {},\n\t\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode> = {},\n\t\trestrictionsOnProperties = getRestrictionsOnProperties(converterContext),\n\t\ttableManifestSettings: TableManifestConfiguration = converterContext.getManifestControlConfiguration(visualizationPath),\n\t\tdefaultCreationMode =\n\t\t\tconverterContext.getManifestWrapper().getSapFeManifestConfiguration()?.macros?.table?.defaultCreationMode ===\n\t\t\t\"InlineCreationRows\"\n\t\t\t\t? CreationMode.InlineCreationRows\n\t\t\t\t: undefined,\n\t\ttableCreationMode: CreationMode =\n\t\t\ttableManifestSettings?.tableSettings?.creationMode?.name ?? defaultCreationMode ?? CreationMode.Inline;\n\tconst semanticKeys: SemanticKey = converterContext.getAnnotationsByTerm(\"Common\", CommonAnnotationTerms.SemanticKey, [\n\t\tconverterContext.getEntityType()\n\t])[0] as SemanticKey;\n\tif (lineItemAnnotation) {\n\t\tconst tableConverterContext = converterContext.getConverterContextFor<PageContextPathTarget>(\n\t\t\tgetTargetObjectPath(converterContext.getDataModelObjectPath())\n\t\t);\n\t\tlineItemAnnotation.forEach((dataField) => {\n\t\t\t// TODO: variable name should be datafield and not lineItem\n\t\t\tif (!_isValidColumn(dataField)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet exportSettings: PropertyInfo[\"exportSettings\"] = null;\n\t\t\tconst semanticObjectAnnotationPath =\n\t\t\t\tisDataFieldTypes(dataField) && dataField.Value?.$target?.fullyQualifiedName\n\t\t\t\t\t? getSemanticObjectPath(converterContext, dataField)\n\t\t\t\t\t: undefined;\n\t\t\tconst relativePath = _getRelativePath(dataField);\n\t\t\t// Determine properties which are consumed by this LineItem.\n\t\t\tconst relatedPropertiesInfo: ComplexPropertyInfo = collectRelatedPropertiesRecursively(dataField, converterContext, tableType);\n\t\t\tconst relatedPropertyNames: string[] = Object.keys(relatedPropertiesInfo.properties);\n\t\t\tconst additionalPropertyNames: string[] = Object.keys(relatedPropertiesInfo.additionalProperties);\n\t\t\tconst groupPath: string | undefined = relativePath ? _sliceAtSlash(relativePath, true, false) : undefined;\n\t\t\tconst isGroup: boolean = groupPath != relativePath;\n\t\t\tconst label = getLabel(dataField, isGroup);\n\t\t\tconst name = _getAnnotationColumnName(dataField);\n\t\t\tconst isFieldGroupColumn: boolean = groupPath ? groupPath.includes(`@${UIAnnotationTerms.FieldGroup}`) : false;\n\t\t\tconst showDataFieldsLabel: boolean | undefined = isFieldGroupColumn\n\t\t\t\t? _getShowDataFieldsLabel(name, visualizationPath, converterContext)\n\t\t\t\t: false;\n\t\t\tconst dataType: string | undefined = getDataFieldDataType(dataField);\n\t\t\tconst formatOptions = _getDefaultFormatOptionsForTable(getDefaultDraftIndicatorForColumn(name, semanticKeys, dataField));\n\t\t\tconst propertyDataModelObjectPath = enhanceDataModelPath<DataFieldAbstractTypes>(\n\t\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\t\trelativePath\n\t\t\t);\n\t\t\t// Determine if we need a situations indicator\n\t\t\tconst navigationProperties: NavigationProperty[] = propertyDataModelObjectPath.targetEntityType.navigationProperties;\n\t\t\tconst situationsNavProps = navigationProperties.filter(\n\t\t\t\t(navigationProperty) =>\n\t\t\t\t\t!navigationProperty.isCollection &&\n\t\t\t\t\tnavigationProperty.targetType.annotations.Common?.SAPObjectNodeType?.Name === \"BusinessSituation\"\n\t\t\t);\n\t\t\tconst situationsNavProp: NavigationProperty | undefined = situationsNavProps.length >= 1 ? situationsNavProps[0] : undefined;\n\t\t\tif (situationsNavProp && formatOptions) {\n\t\t\t\tformatOptions.hasSituationsIndicator = true;\n\t\t\t}\n\n\t\t\tlet fieldGroupHiddenExpressions: CompiledBindingToolkitExpression;\n\t\t\tif (\n\t\t\t\tdataField.$Type === UIAnnotationTypes.DataFieldForAnnotation &&\n\t\t\t\tdataField.Target?.$target?.$Type === UIAnnotationTypes.FieldGroupType\n\t\t\t) {\n\t\t\t\tfieldGroupHiddenExpressions = _getFieldGroupHiddenExpressions(dataField);\n\t\t\t}\n\t\t\tconst isMultiValue = _isColumnMultiValued(dataField, tableConverterContext);\n\t\t\tif (!isMultiValue && _isExportableColumn(dataField)) {\n\t\t\t\t//exclude the types listed above for the Export (generates error on Export as PDF)\n\t\t\t\texportSettings = createColumnExportSettings(dataField, relatedPropertiesInfo);\n\t\t\t}\n\t\t\tlet propertyTypeConfig: PropertyTypeConfig | undefined;\n\t\t\tif (dataType) {\n\t\t\t\tpropertyTypeConfig = getTypeConfig(dataField, dataType);\n\t\t\t}\n\t\t\tconst typeConfig: PropertyTypeConfig = {\n\t\t\t\tclassName: dataType as keyof typeof DefaultTypeForEdmType,\n\t\t\t\tformatOptions: {\n\t\t\t\t\t...formatOptions,\n\t\t\t\t\t...propertyTypeConfig?.formatOptions\n\t\t\t\t},\n\t\t\t\tconstraints: propertyTypeConfig?.constraints\n\t\t\t};\n\t\t\tconst visualSettings: VisualSettings = {};\n\t\t\tif (!dataType || !typeConfig) {\n\t\t\t\t// for charts\n\t\t\t\tvisualSettings.widthCalculation = null;\n\t\t\t}\n\t\t\tconst sortable =\n\t\t\t\t!isMultiValue &&\n\t\t\t\t_isColumnSortable(dataField, relativePath, restrictionsOnProperties.nonSortableProperties, relatedPropertiesInfo);\n\t\t\tconst availability = isReferencePropertyStaticallyHidden(dataField) ? \"Hidden\" : \"Default\";\n\t\t\tconst column: AnnotationTableColumn = {\n\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\ttype: ColumnType.Annotation,\n\t\t\t\tlabel: label ?? name,\n\t\t\t\tgroupLabel: isGroup ? getLabel(dataField) : undefined,\n\t\t\t\tgroup: isGroup ? groupPath : undefined,\n\t\t\t\tFieldGroupHiddenExpressions: fieldGroupHiddenExpressions,\n\t\t\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),\n\t\t\t\tsemanticObjectPath: semanticObjectAnnotationPath,\n\t\t\t\tavailability: availability,\n\t\t\t\tname: name,\n\t\t\t\tshowDataFieldsLabel: showDataFieldsLabel,\n\t\t\t\trequired: isRequiredColumn(converterContext, dataField as DataFieldTypes, tableCreationMode),\n\t\t\t\trelativePath: relativePath,\n\t\t\t\tsortable: sortable,\n\t\t\t\tpropertyInfos: relatedPropertyNames.length ? relatedPropertyNames : undefined,\n\t\t\t\tadditionalPropertyInfos: additionalPropertyNames.length > 0 ? additionalPropertyNames : undefined,\n\t\t\t\texportSettings: exportSettings,\n\t\t\t\twidth: (dataField.annotations?.HTML5?.CssDefaults?.width?.valueOf() as string) || undefined,\n\t\t\t\timportance: getImportance(converterContext, dataField as DataFieldTypes),\n\t\t\t\tisNavigable: true,\n\t\t\t\tformatOptions: formatOptions,\n\t\t\t\tcaseSensitive: isFilteringCaseSensitive(converterContext),\n\t\t\t\ttypeConfig: typeConfig,\n\t\t\t\tvisualSettings: visualSettings as PropertyInfo[\"visualSettings\"],\n\t\t\t\ttimezoneText: exportSettings?.timezone,\n\t\t\t\tisPartOfLineItem: true,\n\t\t\t\tdataType: dataType ?? (\"Edm.String\" as keyof typeof DefaultTypeForEdmType),\n\t\t\t\tisMultiValue\n\t\t\t};\n\t\t\tconst tooltip = _getTooltip(dataField) ?? label;\n\t\t\tif (tooltip) {\n\t\t\t\tcolumn.tooltip = tooltip;\n\t\t\t}\n\t\t\tif (relatedPropertiesInfo.exportSettings.dataPointTargetValue) {\n\t\t\t\tcolumn.exportDataPointTargetValue = relatedPropertiesInfo.exportSettings.dataPointTargetValue;\n\t\t\t}\n\t\t\tannotationColumns.push(column);\n\t\t\t// Collect information of related columns to be created.\n\t\t\trelatedPropertyNames.forEach((relatedPropertyName) => {\n\t\t\t\tcolumnsToBeCreated[relatedPropertyName] = relatedPropertiesInfo.properties[relatedPropertyName].annotationProperty;\n\t\t\t\t// In case of a multi-value, related properties cannot be sorted as we go through a 1-n relation\n\t\t\t\tif (isMultiValue) {\n\t\t\t\t\trestrictionsOnProperties.nonSortableProperties.push(relatedPropertyName);\n\t\t\t\t}\n\t\t\t\taddPropertyToDisplayModeOfDescriptionPropertiesMap(\n\t\t\t\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\t\t\t\trelatedPropertiesInfo,\n\t\t\t\t\trelatedPropertyName\n\t\t\t\t);\n\t\t\t\t// In case the lineItem points to a navigation property with a textArrangement TextOnly, we need to create the column with the value navigation property.\n\t\t\t\t// The text property is referenced on the related properties of the lineItem, so will be created on the _createRelatedColumns method.\n\t\t\t\tif (relatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription === \"Description\") {\n\t\t\t\t\tcreatePropertyAnnotatedTextOnly(\n\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\tpropertyDataModelObjectPath,\n\t\t\t\t\t\tdataField,\n\t\t\t\t\t\tcolumnsToBeCreated,\n\t\t\t\t\t\trelativePath,\n\t\t\t\t\t\trestrictionsOnProperties\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// Create columns for additional properties identified for ALP use case.\n\t\t\tadditionalPropertyNames.forEach((additionalPropertyName) => {\n\t\t\t\t// Intentional overwrite as we require only one new PropertyInfo for a related Property.\n\t\t\t\tcolumnsToBeCreated[additionalPropertyName] = relatedPropertiesInfo.additionalProperties[additionalPropertyName];\n\t\t\t});\n\t\t});\n\t}\n\t// Get columns from the Properties of EntityType\n\treturn getColumnsFromEntityType(\n\t\tcolumnsToBeCreated,\n\t\tentityType,\n\t\tannotationColumns,\n\t\tconverterContext,\n\t\ttableType,\n\t\ttableCreationMode,\n\t\tdisplayModeOfDescriptionPropertiesMap,\n\t\trestrictionsOnProperties\n\t);\n};\n\n/**\n * Gets the property names from the manifest and checks against existing properties already added by annotations.\n * If a not yet stored property is found it adds it for sorting and filtering only to the annotationColumns.\n * @param properties\n * @param annotationColumns\n * @param converterContext\n * @param entityType\n * @returns The columns from the annotations\n */\nconst _getPropertyNames = function (\n\tproperties: string[] | string | undefined,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType\n): string[] | undefined {\n\tlet matchedProperties: string[] | undefined;\n\tif (Array.isArray(properties)) {\n\t\tmatchedProperties = properties.map(function (propertyPath) {\n\t\t\tconst annotationColumn = annotationColumns.find(function (annotationColumn) {\n\t\t\t\treturn annotationColumn.relativePath === propertyPath && annotationColumn.propertyInfos === undefined;\n\t\t\t});\n\t\t\tif (annotationColumn) {\n\t\t\t\treturn annotationColumn.name;\n\t\t\t} else {\n\t\t\t\tconst relatedColumns = _createRelatedColumns(\n\t\t\t\t\t{ [propertyPath]: entityType.resolvePath(propertyPath) },\n\t\t\t\t\tannotationColumns,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\tentityType,\n\t\t\t\t\t{}\n\t\t\t\t);\n\t\t\t\tannotationColumns.push(relatedColumns[0]);\n\t\t\t\treturn relatedColumns[0].name;\n\t\t\t}\n\t\t});\n\t}\n\treturn matchedProperties;\n};\n\n/**\n * Determines if the field group has to be flagged as required.\n * @param converterContext The converter context\n * @param fieldGroup The fieldGroup being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the fieldGroup is required.\n */\nconst isRequiredFieldGroup = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tfieldGroup: FieldGroup,\n\ttableCreationMode: CreationMode\n): boolean {\n\tconst fieldGroupData = fieldGroup.Data;\n\treturn fieldGroupData.some(function (item) {\n\t\t// we exclude boolean type, the end-user may want to keep the underlying check box empty on purpose\n\t\tif (isDataField(item) && item?.Value?.$target.type !== \"Edm.Boolean\") {\n\t\t\treturn (\n\t\t\t\tisStaticallyMandatory(item) ||\n\t\t\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\t\t\tisAnnotatedRequiredProperty(item.Value.$target.fullyQualifiedName, converterContext))\n\t\t\t);\n\t\t}\n\t});\n};\n\n/**\n * Determines if the dataFieldForAnnotation has to be flagged as required.\n * @param converterContext The converter context\n * @param dataFieldForAnnotation The property being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the property is required.\n */\nconst isRequiredDataFieldForAnnotation = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataFieldForAnnotation: DataFieldForAnnotation,\n\ttableCreationMode: CreationMode\n): boolean {\n\tconst dataFieldTarget = dataFieldForAnnotation.Target.$target;\n\tconst DataFieldForAnnotationFieldControlNotMandatory = hasFieldControlNotMandatory(dataFieldForAnnotation);\n\t// Check if the DataFieldForAnnotation points to a FieldGroup\n\tif (hasFieldGroupTarget(dataFieldForAnnotation)) {\n\t\tif (isRequiredFieldGroup(converterContext, dataFieldTarget as FieldGroup, tableCreationMode)) {\n\t\t\treturn true;\n\t\t}\n\t\tconst fieldGroupData = (dataFieldTarget as FieldGroup).Data;\n\t\treturn fieldGroupData.some((innerDataField: DataFieldAbstractTypes) => {\n\t\t\treturn isRequiredColumn(converterContext, innerDataField, tableCreationMode);\n\t\t});\n\t}\n\t/*If the underlying datapoint is a rating indicator, the end-user may want to keep the rating empty (value 0) on purpose.\n\tBesides, currently, only a fieldControl set on a dataFieldForAnnotation pointing to a dataPoint has an influence in the table.\n\tAccordingly, if a datapoint comes from a dataFieldForAnnotation with a fieldControl set as not mandatory, this dataPoint must not be flagged as \"required\"*/\n\tif (hasDataPointTarget(dataFieldForAnnotation) && (dataFieldTarget as DataPoint).Visualization !== \"UI.VisualizationType/Rating\") {\n\t\tif (DataFieldForAnnotationFieldControlNotMandatory) {\n\t\t\treturn false;\n\t\t}\n\t\tif (isStaticallyMandatory(dataFieldForAnnotation)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn isRequiredDataPoint(converterContext, dataFieldTarget as DataPoint, tableCreationMode);\n\t}\n\treturn false;\n};\n\n/**\n * Determines if the property has to be flagged as required.\n * @param converterContext The converter context\n * @param property The property being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the property is required.\n */\nconst isRequiredProperty = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tproperty: Property,\n\ttableCreationMode: CreationMode\n): boolean {\n\treturn (\n\t\tproperty.type !== \"Edm.Boolean\" &&\n\t\t!isRatingVisualizationFromDataFieldDefault(property) &&\n\t\t(isStaticallyMandatory(property) ||\n\t\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\t\tisAnnotatedRequiredProperty(property.fullyQualifiedName, converterContext)))\n\t);\n};\n\n/**\n * Determines if the dataPoint has to be flagged as required.\n * @param converterContext The converter context\n * @param dataPoint The dataPoint being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns True if the dataPoint is required.\n */\nconst isRequiredDataPoint = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tdataPoint: DataPoint,\n\ttableCreationMode: CreationMode\n): boolean {\n\treturn (\n\t\tisStaticallyMandatory(dataPoint) ||\n\t\t(tableCreationMode === CreationMode.InlineCreationRows &&\n\t\t\tisAnnotatedRequiredProperty(dataPoint.Value.$target.fullyQualifiedName, converterContext))\n\t);\n};\n\n/**\n * Determines if the underlying column has to be flagged as required.\n * @param converterContext The converter context\n * @param target The target being processed\n * @param tableCreationMode The creation mode of the underlying table\n * @returns The binding expression for the 'required' property of the table column.\n */\nconst isRequiredColumn = function (\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\ttarget: DataFieldAbstractTypes | Property,\n\ttableCreationMode?: CreationMode\n): CompiledBindingToolkitExpression {\n\tconst creationMode = tableCreationMode || CreationMode.Inline;\n\tif (\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage\n\t) {\n\t\treturn undefined;\n\t}\n\tif (isProperty(target)) {\n\t\treturn isRequiredProperty(converterContext, target, creationMode) ? compileExpression(UI.IsEditable) : undefined;\n\t}\n\t// Check if the dataField is of type DataFieldForAnnotation\n\tif (isDataFieldForAnnotation(target)) {\n\t\treturn isRequiredDataFieldForAnnotation(converterContext, target, creationMode) ? compileExpression(UI.IsEditable) : undefined;\n\t}\n\t//If the underlying property is a boolean, the end-user may want to keep the check box empty on purpose\n\tif (isDataField(target) && target.Value?.$target?.type !== \"Edm.Boolean\") {\n\t\treturn isStaticallyMandatory(target) ||\n\t\t\t(creationMode === CreationMode.InlineCreationRows &&\n\t\t\t\tisAnnotatedRequiredProperty(target.Value.$target.fullyQualifiedName, converterContext))\n\t\t\t? compileExpression(UI.IsEditable)\n\t\t\t: undefined;\n\t}\n\treturn undefined;\n};\n\nconst _appendCustomTemplate = function (\n\tproperties: string[] | undefined,\n\texportProperties: string[] | string | undefined\n): string | undefined {\n\tif (Array.isArray(exportProperties)) {\n\t\tproperties = exportProperties;\n\t}\n\tif (properties) {\n\t\treturn properties\n\t\t\t.map((property) => {\n\t\t\t\treturn `{${properties!.indexOf(property)}}`;\n\t\t\t})\n\t\t\t.join(`${\"\\n\"}`);\n\t}\n\treturn undefined;\n};\n\n/**\n * Returns table column definitions from manifest.\n *\n * These may be custom columns defined in the manifest, slot columns coming through\n * a building block, or annotation columns to overwrite annotation-based columns.\n * @param columns\n * @param annotationColumns\n * @param converterContext\n * @param entityType\n * @returns The columns from the manifest\n */\nconst getColumnsFromManifest = function (\n\tcolumns: Record<string, CustomDefinedTableColumn | CustomDefinedTableColumnForOverride>,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType\n): Record<string, ManifestColumn> {\n\tconst internalColumns: Record<string, ManifestColumn> = {};\n\tfunction isColumnOverride(\n\t\tcolumn: CustomDefinedTableColumn | CustomDefinedTableColumnForOverride,\n\t\tkey: string\n\t): column is CustomDefinedTableColumnForOverride {\n\t\treturn annotationColumns.some((annotationColumn) => annotationColumn.key === key);\n\t}\n\tfunction isSlotColumn(manifestColumn: CustomDefinedTableColumn): manifestColumn is FragmentDefinedSlotColumn {\n\t\treturn manifestColumn.type === ColumnType.Slot;\n\t}\n\tfunction isCustomColumn(manifestColumn: CustomDefinedTableColumn): manifestColumn is ManifestDefinedCustomColumn {\n\t\treturn manifestColumn.type === undefined && !!manifestColumn.template;\n\t}\n\tfunction _updateLinkedPropertiesOnCustomColumns(propertyInfos: string[], annotationTableColumns: AnnotationTableColumn[]): void {\n\t\tconst restrictionsOnProperties = getRestrictionsOnProperties(converterContext);\n\t\tpropertyInfos.forEach((property) => {\n\t\t\tannotationTableColumns.forEach((prop) => {\n\t\t\t\tif (prop.name === property) {\n\t\t\t\t\tprop.sortable = !restrictionsOnProperties.nonSortableProperties.includes(property.replace(\"Property::\", \"\"));\n\t\t\t\t\tprop.isGroupable = prop.sortable;\n\t\t\t\t\tprop.filterable = !restrictionsOnProperties.nonFilterableProperties.includes(property.replace(\"Property::\", \"\"));\n\t\t\t\t\tprop.isPartOfCustomColumn = true;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\tfor (const key in columns) {\n\t\tconst manifestColumn = columns[key];\n\t\tKeyHelper.validateKey(key);\n\t\t// BaseTableColumn\n\t\tconst baseTableColumn = {\n\t\t\tkey: key,\n\t\t\twidthIncludingColumnHeader: manifestColumn.widthIncludingColumnHeader,\n\t\t\twidth: manifestColumn.width || undefined,\n\t\t\tposition: {\n\t\t\t\tanchor: manifestColumn.position?.anchor,\n\t\t\t\tplacement: manifestColumn.position === undefined ? Placement.After : manifestColumn.position.placement\n\t\t\t},\n\t\t\tcaseSensitive: isFilteringCaseSensitive(converterContext)\n\t\t};\n\t\tif (isColumnOverride(manifestColumn, key)) {\n\t\t\tconst propertiesToOverwriteAnnotationColumn: CustomElement<AnnotationTableColumnForOverride> = {\n\t\t\t\t...baseTableColumn,\n\t\t\t\timportance: manifestColumn?.importance,\n\t\t\t\thorizontalAlign: manifestColumn?.horizontalAlign,\n\t\t\t\tavailability: manifestColumn?.availability,\n\t\t\t\ttype: ColumnType.Annotation,\n\t\t\t\tisNavigable: undefined,\n\t\t\t\tsettings: manifestColumn.settings,\n\t\t\t\tformatOptions: _getDefaultFormatOptionsForTable(manifestColumn.formatOptions),\n\t\t\t\texportSettings: manifestColumn.disableExport\n\t\t\t\t\t? null\n\t\t\t\t\t: getCustomExportSettings(\n\t\t\t\t\t\t\tmanifestColumn?.exportSettings,\n\t\t\t\t\t\t\tannotationColumns,\n\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\tentityType,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tkey\n\t\t\t\t\t  )\n\t\t\t};\n\t\t\tinternalColumns[key] = propertiesToOverwriteAnnotationColumn;\n\t\t} else {\n\t\t\tconst propertyInfos: string[] | undefined = _getPropertyNames(\n\t\t\t\tmanifestColumn.properties,\n\t\t\t\tannotationColumns,\n\t\t\t\tconverterContext,\n\t\t\t\tentityType\n\t\t\t);\n\t\t\tconst tooltipText = converterContext.fetchTextFromMetaModel(manifestColumn.tooltip),\n\t\t\t\theaderText = converterContext.fetchTextFromMetaModel(manifestColumn.header);\n\n\t\t\tconst customColumnExportSettings: ColumnExportSettings | null =\n\t\t\t\tpropertyInfos && !manifestColumn.disableExport\n\t\t\t\t\t? getCustomExportSettings(\n\t\t\t\t\t\t\tmanifestColumn?.exportSettings,\n\t\t\t\t\t\t\tannotationColumns,\n\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\tentityType,\n\t\t\t\t\t\t\tpropertyInfos\n\t\t\t\t\t  )\n\t\t\t\t\t: null;\n\t\t\tconst baseManifestColumn = {\n\t\t\t\t...baseTableColumn,\n\t\t\t\theader: headerText,\n\t\t\t\timportance: manifestColumn?.importance || Importance.None,\n\t\t\t\thorizontalAlign: manifestColumn?.horizontalAlign || HorizontalAlign.Begin,\n\t\t\t\tavailability: manifestColumn?.availability || \"Default\",\n\t\t\t\ttemplate: manifestColumn.template,\n\t\t\t\tpropertyInfos: propertyInfos,\n\t\t\t\texportSettings: customColumnExportSettings,\n\t\t\t\tid: `CustomColumn::${key}`,\n\t\t\t\tname: `CustomColumn::${key}`,\n\t\t\t\t//Needed for MDC:\n\t\t\t\tformatOptions: { textLinesEdit: 4 },\n\t\t\t\tisGroupable: false,\n\t\t\t\tisNavigable: false,\n\t\t\t\tsortable: false,\n\t\t\t\tvisualSettings: { widthCalculation: null },\n\t\t\t\ttooltip: tooltipText ? tooltipText : headerText,\n\t\t\t\tproperties: manifestColumn.properties,\n\t\t\t\trequired:\n\t\t\t\t\tmanifestColumn.required &&\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.ListReport &&\n\t\t\t\t\tconverterContext.getTemplateType() !== TemplateType.AnalyticalListPage\n\t\t\t\t\t\t? compileExpression(UI.IsEditable)\n\t\t\t\t\t\t: undefined\n\t\t\t};\n\t\t\tif (propertyInfos) {\n\t\t\t\t_updateLinkedPropertiesOnCustomColumns(propertyInfos, annotationColumns);\n\t\t\t}\n\t\t\tif (isSlotColumn(manifestColumn)) {\n\t\t\t\tconst customTableColumn: CustomElement<CustomBasedTableColumn> = {\n\t\t\t\t\t...baseManifestColumn,\n\t\t\t\t\ttype: ColumnType.Slot\n\t\t\t\t};\n\t\t\t\tinternalColumns[key] = customTableColumn;\n\t\t\t} else if (isCustomColumn(manifestColumn)) {\n\t\t\t\tconst customTableColumn: CustomElement<CustomBasedTableColumn> = {\n\t\t\t\t\t...baseManifestColumn,\n\t\t\t\t\ttype: ColumnType.Default\n\t\t\t\t};\n\t\t\t\tinternalColumns[key] = customTableColumn;\n\t\t\t} else {\n\t\t\t\tconst message = `The annotation column '${key}' referenced in the manifest is not found`;\n\t\t\t\tconverterContext\n\t\t\t\t\t.getDiagnostics()\n\t\t\t\t\t.addIssue(\n\t\t\t\t\t\tIssueCategory.Manifest,\n\t\t\t\t\t\tIssueSeverity.Low,\n\t\t\t\t\t\tmessage,\n\t\t\t\t\t\tIssueCategoryType,\n\t\t\t\t\t\tIssueCategoryType?.AnnotationColumns?.InvalidKey\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\treturn internalColumns;\n};\n\n/**\n * Adds computed columns such as the draft status and situations status.\n * @param tableColumns The table columns collected so far\n * @param tableType The table type\n * @param visualizationPath\n * @param converterContext\n * @returns The enriched set of table columns\n */\nexport function addComputedColumns(\n\ttableColumns: TableColumn[],\n\ttableType: TableType,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): TableColumn[] {\n\tif (![\"GridTable\", \"TreeTable\", \"AnalyticalTable\"].includes(tableType)) {\n\t\t// Computed columns are not used in Responsive tables\n\t\treturn tableColumns;\n\t}\n\n\t// In case a grid table or tree table is used, we display the situations indicator in a separate column\n\t// so we have to disable it here to ensure, that the field building block\n\t// does not render it into the ID column\n\tconst columnWithSituationsIndicator: TableColumn | undefined = tableColumns.find(\n\t\t(column) => column.formatOptions?.hasSituationsIndicator !== undefined && column.formatOptions?.hasSituationsIndicator === true\n\t);\n\tif (columnWithSituationsIndicator?.formatOptions) {\n\t\t// Switch off the situations indicator in the found column\n\t\tcolumnWithSituationsIndicator.formatOptions.hasSituationsIndicator = false;\n\n\t\t// Insert a separate situations indicator column\n\t\tconst situationsIndicatorColumn: ComputedTableColumn = {\n\t\t\tkey: \"situationsIndicator\",\n\t\t\tname: \"situationsIndicator\",\n\t\t\tpropertyKey: columnWithSituationsIndicator.name,\n\t\t\tisSituationsIndicator: true,\n\t\t\tavailability: \"Default\",\n\t\t\tlabel: \"{sap.fe.i18n>C_SITUATIONS_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttooltip: \"{sap.fe.i18n>C_SITUATIONS_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttype: ColumnType.Computed,\n\t\t\tformatOptions: null,\n\t\t\texportSettings: null,\n\t\t\tclipboardSettings: null,\n\t\t\tpropertyInfos: undefined,\n\t\t\tcaseSensitive: false\n\t\t};\n\n\t\t// Place the draft status column after the first visible column\n\t\tconst indexOfFirstVisibleColumn: int = tableColumns.findIndex((column) => column.availability !== \"Hidden\");\n\t\ttableColumns.splice(indexOfFirstVisibleColumn + 1, 0, situationsIndicatorColumn);\n\t}\n\n\t// In case a grid table or tree table is used, we display the draft indicator in a separate column\n\t// so we have to disable it here to ensure, that the field building block\n\t// does not render it into the ID column\n\t// The additional column is only added for tables on a LR and in case tehe entity is draft enabled!\n\tconst columnsWithDraftIndicator: TableColumn[] = tableColumns.filter((column) => column.formatOptions?.hasDraftIndicator === true);\n\tif (\n\t\tcolumnsWithDraftIndicator.length &&\n\t\tconverterContext.getTemplateType() === TemplateType.ListReport &&\n\t\t(ModelHelper.isDraftNode(converterContext.getEntitySet()) || ModelHelper.isDraftRoot(converterContext.getEntitySet()))\n\t) {\n\t\t// Switch off the draft indicator in the found column\n\t\tcolumnsWithDraftIndicator.forEach((columnWithDraftIndicator: TableColumn) => {\n\t\t\tif (columnWithDraftIndicator?.formatOptions) {\n\t\t\t\tcolumnWithDraftIndicator.formatOptions.hasDraftIndicator = false;\n\t\t\t}\n\t\t});\n\n\t\t// Insert a separate draft indicator column\n\t\tconst draftIndicatorColumn: ComputedTableColumn = {\n\t\t\tkey: \"draftStatus\",\n\t\t\tname: \"draftStatus\",\n\t\t\tpropertyKey: columnsWithDraftIndicator[0].name,\n\t\t\tisDraftIndicator: true,\n\t\t\tavailability: \"Default\",\n\t\t\tlabel: \"{sap.fe.i18n>C_DRAFT_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttooltip: \"{sap.fe.i18n>C_DRAFT_STATUS_COLUMN_LABEL_TOOLTIP}\",\n\t\t\ttype: ColumnType.Computed,\n\t\t\tformatOptions: null,\n\t\t\texportSettings: null,\n\t\t\tcaseSensitive: false,\n\t\t\tclipboardSettings: null\n\t\t};\n\t\tlet columnIndexToInsertAfter: int = 0;\n\t\tif (columnWithSituationsIndicator) {\n\t\t\t// If there's a situations indicator column, place the draft status column before it\n\t\t\tcolumnIndexToInsertAfter =\n\t\t\t\ttableColumns.findIndex((column) => (column as ComputedTableColumn).isSituationsIndicator === true) - 1;\n\t\t} else {\n\t\t\t// Otherwise place the draft status column after the first visible column\n\t\t\tcolumnIndexToInsertAfter = tableColumns.findIndex((column) => column.availability !== \"Hidden\");\n\t\t}\n\t\ttableColumns.splice(columnIndexToInsertAfter + 1, 0, draftIndicatorColumn);\n\t}\n\n\treturn tableColumns;\n}\n\n/**\n * Provides the required properties set on the annotations.\n * @param converterContext  The instance of the converter context\n * @returns The paths of the restricted properties\n */\nexport function getRequiredProperties(converterContext: ConverterContext<PageContextPathTarget>): PropertyPath[] {\n\treturn getContextPropertyRestriction(\n\t\tconverterContext.getDataModelObjectPath(),\n\t\t(capabilities) => {\n\t\t\treturn (capabilities as EntitySetAnnotations_Capabilities | undefined)?.InsertRestrictions?.RequiredProperties;\n\t\t},\n\t\tfalse\n\t);\n}\n\n/**\n * Determines if the property is annotated as a required property.\n * @param name The name of the property\n * @param converterContext The instance of the converter context\n * @returns True if the property is required\n */\nfunction isAnnotatedRequiredProperty(name: string, converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\treturn getRequiredProperties(converterContext)\n\t\t.map((property) => property.$target?.fullyQualifiedName)\n\t\t.includes(name);\n}\n\n/**\n * Gets the data type of a column for the export.\n * @param dataType The data type of a property, column\n * @param isATimezone Is the given property a timezone\n * @param isCurrency Is the given property a currency\n * @param exportSettings The already detected export settings from datafields\n * @returns The supported export type\n */\nfunction getExportDataType(\n\tdataType: string | undefined,\n\tisATimezone = false,\n\tisCurrency = false,\n\texportSettings?: ColumnExportSettings\n): string {\n\tlet exportDataType = \"String\";\n\tif (!dataType || exportSettings?.dataPointTargetValue) {\n\t\treturn exportDataType;\n\t}\n\tif (exportSettings?.isCurrency || isCurrency) {\n\t\treturn \"Currency\";\n\t}\n\tif (isATimezone) {\n\t\treturn \"Timezone\";\n\t}\n\tif (exportSettings?.wrap) {\n\t\treturn exportDataType;\n\t}\n\tswitch (dataType) {\n\t\tcase \"Edm.Decimal\":\n\t\tcase \"Edm.Int32\":\n\t\tcase \"Edm.Int64\":\n\t\tcase \"Edm.Double\":\n\t\tcase \"Edm.Byte\":\n\t\t\texportDataType = \"Number\";\n\t\t\tbreak;\n\t\tcase \"Edm.DateOfTime\":\n\t\tcase \"Edm.Date\":\n\t\t\texportDataType = \"Date\";\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\texportDataType = \"DateTime\";\n\t\t\tbreak;\n\t\tcase \"Edm.TimeOfDay\":\n\t\t\texportDataType = \"Time\";\n\t\t\tbreak;\n\t\tcase \"Edm.Boolean\":\n\t\t\texportDataType = \"Boolean\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\texportDataType = \"String\";\n\t}\n\treturn exportDataType;\n}\n\n/**\n * Adds the tooltip configuration for a given column.\n * @param property The property referenced on the column\n * @param column The column to be updated\n */\nfunction _addToolTip(property: Property, column: AnnotationTableColumn): void {\n\tconst tooltip = _getTooltip(property) ?? column.label;\n\tif (tooltip) {\n\t\tcolumn.tooltip = tooltip;\n\t}\n}\n\nfunction _getCollectedNavigationPropertyLabels(\n\trelativePath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): string[] | undefined {\n\tconst navigationProperties = enhanceDataModelPath(converterContext.getDataModelObjectPath(), relativePath).navigationProperties;\n\tif (navigationProperties?.length > 0) {\n\t\tconst collectedNavigationPropertyLabels: string[] = [];\n\t\tnavigationProperties.forEach((navProperty) => {\n\t\t\tcollectedNavigationPropertyLabels.push(getLabel(navProperty) || navProperty.name);\n\t\t});\n\t\treturn collectedNavigationPropertyLabels;\n\t}\n}\n\n/**\n * Creates a property using the text arrangement annotation set to text only.\n * @param converterContext The converter context.\n * @param propertyDataModelObjectPath The corresponding DataModelObjectPath.\n * @param lineItem The column to be evaluated.\n * @param columnsToBeCreated The list of columns to be created.\n * @param relativePath The relative path to the target property based on the context.\n * @param restrictionsOnProperties The existing restrictions on properties\n */\nfunction createPropertyAnnotatedTextOnly(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tpropertyDataModelObjectPath: DataModelObjectPath<DataFieldAbstractTypes>,\n\tlineItem: DataFieldAbstractTypes,\n\tcolumnsToBeCreated: Record<string, Property>,\n\trelativePath: string,\n\trestrictionsOnProperties: RestrictionsOnProperties\n): void {\n\tconst isPropertyNavigated =\n\t\tpropertyDataModelObjectPath.navigationProperties.length !== converterContext.getDataModelObjectPath().navigationProperties.length;\n\tif (isPropertyNavigated && isDataField(lineItem)) {\n\t\tcolumnsToBeCreated[relativePath] = lineItem.Value.$target;\n\t\trestrictionsOnProperties.nonSortableProperties.push(relativePath);\n\t} else if (isDataFieldForAnnotation(lineItem) && hasFieldGroupTarget(lineItem)) {\n\t\t(lineItem.Target.$target as FieldGroup).Data.forEach((field) => {\n\t\t\tif (isDataField(field) && getDisplayMode(field.Value.$target) === \"Description\") {\n\t\t\t\tconst inheredPropertyDataModelObjectPath = enhanceDataModelPath(\n\t\t\t\t\tconverterContext.getDataModelObjectPath(),\n\t\t\t\t\tfield.Value.path\n\t\t\t\t);\n\t\t\t\tconst isInheredPropertyNavigated =\n\t\t\t\t\tinheredPropertyDataModelObjectPath.navigationProperties.length !==\n\t\t\t\t\tconverterContext.getDataModelObjectPath().navigationProperties.length;\n\t\t\t\tif (isInheredPropertyNavigated) {\n\t\t\t\t\tcolumnsToBeCreated[field.Value.path] = field.Value.$target;\n\t\t\t\t\trestrictionsOnProperties.nonSortableProperties.push(field.Value.path);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Retrieves the property type configuration based on the provided property or data type.\n * @param property The property or data field to determine the type configuration for.\n * @param dataType The data type to use for type configuration if not determined from the property.\n * @returns The property type configuration object.\n */\nexport function getTypeConfig(property: Property | DataFieldAbstractTypes | undefined, dataType?: string): PropertyTypeConfig {\n\tlet targetMapping,\n\t\tformatOptions: PropertyTypeFormatOptions | undefined = {};\n\tif (isProperty(property)) {\n\t\ttargetMapping = isTypeDefinition(property.targetType)\n\t\t\t? EDM_TYPE_MAPPING[property.targetType.underlyingType]\n\t\t\t: EDM_TYPE_MAPPING[property.type];\n\t}\n\tif (!targetMapping && dataType !== undefined) {\n\t\ttargetMapping = EDM_TYPE_MAPPING[dataType];\n\t}\n\tconst propertyTypeConfig: PropertyTypeConfig = {\n\t\ttype: targetMapping?.type\n\t};\n\tif (targetMapping && isProperty(property)) {\n\t\tconst constraints = setUpConstraints(targetMapping, property);\n\t\tif (Object.keys(constraints).length) {\n\t\t\tpropertyTypeConfig.constraints = constraints;\n\t\t}\n\t}\n\tif (propertyTypeConfig.type !== \"sap.ui.model.odata.type.Stream\") {\n\t\tif (\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Int\") === 0 ||\n\t\t\tpropertyTypeConfig?.type?.indexOf(\"sap.ui.model.odata.type.Double\") === 0\n\t\t) {\n\t\t\tformatOptions = { parseAsString: false, emptyString: \"\" };\n\t\t}\n\t\tif (propertyTypeConfig.type === \"sap.ui.model.odata.type.String\" && propertyTypeConfig.constraints?.nullable === false) {\n\t\t\tformatOptions = { parseKeepsEmptyString: true };\n\t\t}\n\t}\n\tif (Object.keys(formatOptions).length) {\n\t\tpropertyTypeConfig.formatOptions = formatOptions;\n\t}\n\treturn propertyTypeConfig;\n}\n\n/**\n * Add a description property to the list of description properties used by the columns of a table.\n * @param displayModeOfDescriptionPropertiesMap The list of properties referenced as text on a text arrangement annotation\n * @param relatedPropertiesInfo The related properties linked to the column (named also complex property)\n * @param relatedPropertyName The property name to be added\n */\nfunction addPropertyToDisplayModeOfDescriptionPropertiesMap(\n\tdisplayModeOfDescriptionPropertiesMap: Record<string, DisplayMode>,\n\trelatedPropertiesInfo: ComplexPropertyInfo,\n\trelatedPropertyName: string\n): void {\n\tif (\n\t\trelatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription &&\n\t\t!displayModeOfDescriptionPropertiesMap[relatedPropertyName]\n\t) {\n\t\tdisplayModeOfDescriptionPropertiesMap[relatedPropertyName] =\n\t\t\trelatedPropertiesInfo.properties[relatedPropertyName].displayModeOfPropertyUsedAsDescription!;\n\t}\n}\n\n/**\n * Computes the referenced properties of a LineItem in case the LineItem is annotated as hidden.\n * @param existingColumns The list of columns created from LineItems and from properties of entityType\n * @param name The name of the property to be evaluated\n * @param column The given column from lineItem or property of entitySet\n */\nfunction computeHiddenOnRelatedColumns(existingColumns: AnnotationTableColumn[], name: string, column: AnnotationTableColumn): void {\n\tconst relatedAnnotationColumns = existingColumns.filter(\n\t\t(existingColumn) =>\n\t\t\t(existingColumn.propertyInfos?.includes(name) && existingColumn.isPartOfLineItem) ||\n\t\t\t(existingColumn.isPartOfLineItem && existingColumn.relativePath === column.relativePath)\n\t);\n\tcolumn.isPartOfLineItem = !!relatedAnnotationColumns.length;\n\tif (\n\t\trelatedAnnotationColumns.length &&\n\t\t!relatedAnnotationColumns?.some((annotationColumn) => annotationColumn.availability !== \"Hidden\")\n\t) {\n\t\tcolumn.sortable = false;\n\t\tcolumn.isGroupable = false;\n\t\tcolumn.filterable = false;\n\t}\n}\n\n/**\n * Gets the export settings properties of a manifest column.\n * @param exportSettings The customized/overwritten export settings of a manifest column\n * @param annotationColumns The list of columns created from LineItems\n * @param converterContext The converter context\n * @param entityType The target entity type\n * @param propertyInfos The properties linked to a complex column\n * @param columnKey The column key of the column to be overwritten\n * @returns The export settings of the column merging customized export settings with the default values detected on the annotation column\n */\nfunction getCustomExportSettings(\n\texportSettings: ColumnExportSettings | undefined,\n\tannotationColumns: AnnotationTableColumn[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tentityType: EntityType,\n\tpropertyInfos?: string[],\n\tcolumnKey?: string\n): ColumnExportSettings | null {\n\tlet columnFromAnnotations;\n\tif (columnKey) {\n\t\tcolumnFromAnnotations = annotationColumns.find((annotationColumn) => annotationColumn.key === columnKey);\n\t\tif (columnFromAnnotations?.exportSettings === null) {\n\t\t\treturn columnFromAnnotations?.exportSettings;\n\t\t}\n\t}\n\tconst enableWrapping =\n\t\texportSettings?.wrap ??\n\t\t(!!(exportSettings?.property && exportSettings.property?.length > 1) || !!(propertyInfos && propertyInfos.length > 1));\n\n\tconst customExportSettings: ColumnExportSettings = {\n\t\t...columnFromAnnotations?.exportSettings,\n\t\ttype: exportSettings?.type ?? columnFromAnnotations?.exportSettings?.type,\n\t\ttemplate:\n\t\t\texportSettings?.template ??\n\t\t\t_appendCustomTemplate(propertyInfos, exportSettings?.property) ??\n\t\t\tcolumnFromAnnotations?.exportSettings?.template,\n\t\tproperty: exportSettings?.property,\n\t\twidth: exportSettings?.width,\n\t\twrap: enableWrapping,\n\t\tlabel: exportSettings?.label,\n\t\ttextAlign: exportSettings?.textAlign,\n\t\ttrueValue: exportSettings?.trueValue,\n\t\tfalseValue: exportSettings?.falseValue,\n\t\tvalueMap: exportSettings?.valueMap\n\t};\n\treturn removeUndefinedFromExportSettings(customExportSettings);\n}\n"],"mappings":"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","ignoreList":[],"file":"Columns-dbg.js"}