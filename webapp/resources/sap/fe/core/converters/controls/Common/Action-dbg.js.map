{"version":3,"names":["ButtonType","_exports","aiIcon","PRINT_ICON","EXPORT_TO_SPREADSHEET_ICON","EXPORT_TO_CSV_ICON","EXPORT_TO_PDF_ICON","getVisibilityEnablementMenuActions","actions","menuActionNotVisible","menuActionVisiblePaths","atleastOneMenuItemsVisible","menuItemsVisiblePaths","forEach","menuAction","visible","valueOf","push","menu","length","menuItem","menuItemVisible","toString","compileExpression","resolveBindingString","visibleExpressions","map","menuItemVisiblePath","and","or","addCollaborationCondition","action","type","not","equal","UI","hasCollaborationAuthorization","mapActionByKey","manifestActions","annotationActions","actionKey","annotationAction","find","key","manifestAction","resultAction","Object","keys","filter","actionAnnotation","ActionType","Menu","enabled","prop","propKey","canBeMenuItem","DataFieldForAction","DataFieldForIntentBasedNavigation","mapMenuDefaultAction","commandActions","defaultAction","command","mapMenuItems","mappedMenuItems","matchingAnnotationAction","menuItemKey","mappedMenuAction","transformMenuActionsAndIdentifyCommands","allActions","actionKeysToDelete","undefined","_getManifestEnabled","isAnnotationAction","converterContext","forContextMenu","arguments","result","getManifestActionBooleanPropertyWithFormatter","internalModelProperty","ifElse","requiresSelection","enableOnSelect","pathInModel","greaterOrEqual","_getManifestVisible","overrideManifestConfigurationWithAnnotation","annotationPath","press","getActionsFromManifest","navigationSettings","considerNavigationSettings","hiddenActions","facetName","lastDotIndex","lastIndexOf","id","startsWith","getCustomActionID","Default","enabledForContextMenu","handlerModule","substring","replace","handlerMethod","text","noWrap","__noWrap","replaceSpecialChars","defaultValuesExtensionFunction","defaultValuesFunction","position","anchor","placement","Placement","After","isNavigable","isActionNavigable","enableAutoScroll","inline","isAIOperation","priority","group","propertyValue","resolvedBinding","isConstant","value","constant","methodPath","formatResult","fpmFormatter","customBooleanPropertyCheck","getDataModelObjectPath","contextLocation","targetEntityType","getEntityType","removeDuplicateActions","oMenuItemKeys","actionMenu","reduce","item","_ref","getEnabledForAnnotationActionExpression","actionTarget","pathFromContextLocation","annotations","Core","OperationAvailable","dataModelObjectPath","isEnabledExp","getActionEnabledExpression","getConvertedTypes","collaborationOnRoot","ModelHelper","isCollaborationDraftSupportedFromConverterContext","getDraftRoot","getEntitySet","getEnabledForAnnotationAction","getSemanticObjectMapping","mappings","mapping","LocalProperty","$PropertyPath","SemanticObjectProperty","bIsNavigationConfigured","detailOrDisplay","detail","display","route","afterExecution","navigateToInstance","dataFieldIsCopyAction","dataField","IsCopyAction","$Type","getCopyAction","copyDataFields","Log","error","getAnnotationMenuActionItems","menuActionItems","getMatchingManifestAction","annotationMenuItems","matchingManifestActions","prepareMenuActions","unpreparedActions","overrideMenuActions","foundAction","menuItemIndex","overrideMenuAction","splice","isMenuAIOperation","isAIOperationOccurrences","isActionAIOperation","isCustomActionAIOperation","ActionTarget","IsAIOperation","customAction","addSeparators","groupsUsed","includes","Separator","Before"],"sourceRoot":".","sources":["Action.ts"],"sourcesContent":["import type { Action } from \"@sap-ux/vocabularies-types\";\nimport type { SemanticObjectMappingType } from \"@sap-ux/vocabularies-types/vocabularies/Common\";\nimport type {\n\tDataFieldForActionAbstractTypes,\n\tDataFieldForActionGroupTypes,\n\tDataFieldForActionTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tformatResult,\n\tgreaterOrEqual,\n\tifElse,\n\tisConstant,\n\tnot,\n\tor,\n\tpathInModel,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport type {\n\tCustomDefinedTableColumnForOverride,\n\tManifestAction,\n\tNavigationSettingsConfiguration\n} from \"sap/fe/core/converters/ManifestSettings\";\nimport { ActionType } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { ConfigurableObject, CustomElement, OverrideType } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { Placement } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { getCustomActionID } from \"sap/fe/core/converters/helpers/ID\";\nimport fpmFormatter from \"sap/fe/core/formatters/FPMFormatter\";\nimport { UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { replaceSpecialChars } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { getActionEnabledExpression } from \"sap/fe/core/templating/UIFormatters\";\nimport type { OverflowToolbarPriority } from \"sap/m/library\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type Context from \"sap/ui/model/Context\";\nimport type { MetaModelType } from \"types/metamodel_types\";\nimport type ConverterContext from \"../../ConverterContext\";\n\nexport enum ButtonType {\n\tAccept = \"Accept\",\n\tAttention = \"Attention\",\n\tBack = \"Back\",\n\tCritical = \"Critical\",\n\tDefault = \"Default\",\n\tEmphasized = \"Emphasized\",\n\tGhost = \"Ghost\",\n\tNegative = \"Negative\",\n\tNeutral = \"Neutral\",\n\tReject = \"Reject\",\n\tSuccess = \"Success\",\n\tTransparent = \"Transparent\",\n\tUnstyled = \"Unstyled\",\n\tUp = \"Up\"\n}\n\nexport const aiIcon = \"sap-icon://ai\";\nexport const PRINT_ICON = \"sap-icon://print\";\nexport const EXPORT_TO_SPREADSHEET_ICON = \"sap-icon://excel-attachment\";\nexport const EXPORT_TO_CSV_ICON = \"sap-icon://document\";\nexport const EXPORT_TO_PDF_ICON = \"sap-icon://pdf-attachment\";\n\nexport type BaseAction = ConfigurableObject & {\n\tid?: string;\n\ttext?: string;\n\ttype?: ActionType;\n\tpress?: string;\n\tenabled?: CompiledBindingToolkitExpression;\n\tenabledForContextMenu?: CompiledBindingToolkitExpression;\n\tvisible?: CompiledBindingToolkitExpression;\n\tenableOnSelect?: string;\n\tannotationPath?: string;\n\tdefaultValuesExtensionFunction?: string;\n\tisNavigable?: boolean;\n\tenableAutoScroll?: boolean;\n\tparentEntityDeleteEnabled?: CompiledBindingToolkitExpression;\n\tmenu?: BaseAction[];\n\tfacetName?: string;\n\tcommand?: string | undefined;\n\tisAIOperation?: boolean;\n\tpriority?: OverflowToolbarPriority;\n\tgroup?: number;\n};\n\nexport type AnnotationAction = BaseAction & {\n\ttype: ActionType.DataFieldForIntentBasedNavigation | ActionType.DataFieldForAction | ActionType.Menu | ActionType.Copy;\n\tannotationPath: string;\n\tcustomData?: string;\n\trequiresDialog?: string;\n\tbinding?: string;\n\tbuttonType?: ButtonType.Ghost | ButtonType.Transparent | string;\n};\n\nexport type AnnotationActionActionGroup = BaseAction & {\n\t// implements DataFieldForActionGroup\n\ttype: ActionType.Menu;\n\tmenu: AnnotationAction[];\n};\n\nexport type CustomAction = CustomElement<\n\tBaseAction & {\n\t\thandlerMethod?: string;\n\t\thandlerModule?: string;\n\t\tnoWrap?: boolean; // Indicates that we want to avoid the wrapping from the FPMHelper\n\t\trequiresSelection?: boolean;\n\t\tdefaultAction?: string | BaseAction | CustomAction; // Indicates whether a default action exists in this context\n\t}\n>;\n\nexport type AnnotationActionGroup = BaseAction & {\n\t// implements DataFieldForActionGroup\n\ttype: ActionType.Menu;\n\tmenu: AnnotationAction[];\n};\n\nexport type CombinedAction = {\n\tactions: BaseAction[];\n\tcommandActions: Record<string, CustomAction>;\n};\n\nexport type OverrideTypeAction = {\n\tenableAutoScroll?: OverrideType.overwrite;\n\tdefaultValuesExtensionFunction?: OverrideType.overwrite;\n\tisNavigable?: OverrideType.overwrite;\n\tenableOnSelect?: OverrideType.overwrite;\n\tmenu?: OverrideType.overwrite;\n\n\t// Can be overwritten by manifest configuration and should be aligned for all actions\n\tenabled: OverrideType.overwrite;\n\tvisible: OverrideType.overwrite;\n\tcommand: OverrideType.overwrite;\n\tposition: OverrideType.overwrite;\n\tpriority?: OverrideType.overwrite;\n\tgroup?: OverrideType.overwrite;\n};\n\nexport type DataFieldForActionOrActionGroup = DataFieldForActionTypes | DataFieldForActionGroupTypes;\n\ntype MenuAction =\n\t| BaseAction\n\t| {\n\t\t\tvisible?: string[];\n\t\t\tenabled?: string[];\n\t\t\tmenu?: BaseAction[];\n\t  };\n\n/**\n * Method provides actions collection after calculating the visible setting for all actions of type menu depending on its visible setting and its menu items visible settings.\n * @param actions Collection of actions\n * @returns Collection of actions with visible setting set for actions of type menu\n */\nexport const getVisibilityEnablementMenuActions = (actions: CustomAction[]): CustomAction[] => {\n\tlet menuActionNotVisible: string | boolean,\n\t\tmenuActionVisiblePaths: string[],\n\t\tatleastOneMenuItemsVisible: boolean,\n\t\tmenuItemsVisiblePaths: string[];\n\tactions.forEach((menuAction: MenuAction) => {\n\t\tmenuActionNotVisible = menuAction.visible?.valueOf() === \"false\";\n\t\tatleastOneMenuItemsVisible = false;\n\t\tmenuItemsVisiblePaths = [];\n\t\tmenuActionVisiblePaths = [];\n\t\tif (menuAction.visible && !(menuAction.visible.valueOf() === \"true\" || menuAction.visible.valueOf() === \"false\")) {\n\t\t\tmenuActionVisiblePaths.push(menuAction.visible as string);\n\t\t}\n\t\tif (menuAction?.menu?.length) {\n\t\t\tmenuAction?.menu?.forEach((menuItem: BaseAction): void => {\n\t\t\t\tconst menuItemVisible = menuItem.visible;\n\t\t\t\tif (menuItemVisible && (typeof menuItemVisible === \"boolean\" || menuItemVisible.valueOf() === \"true\")) {\n\t\t\t\t\tatleastOneMenuItemsVisible = true;\n\t\t\t\t} else if (menuItemVisible && menuItemVisible.valueOf() !== \"false\") {\n\t\t\t\t\tmenuItemsVisiblePaths.push(menuItemVisible.valueOf());\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (menuActionNotVisible) {\n\t\t\t\t// if menu is statically visible false\n\t\t\t\tmenuAction.visible = false.toString();\n\t\t\t} else if (!atleastOneMenuItemsVisible && !menuItemsVisiblePaths.length) {\n\t\t\t\t// if all menu items are statically visible false\n\t\t\t\tmenuAction.visible = false.toString();\n\t\t\t} else if (atleastOneMenuItemsVisible && !menuActionVisiblePaths.length) {\n\t\t\t\t// if at least one menu item is statically visible true and no visible setting for menu\n\t\t\t\tmenuAction.visible = true.toString();\n\t\t\t} else if (atleastOneMenuItemsVisible) {\n\t\t\t\t// if at least one menu item, then just consider visible setting of the menu\n\t\t\t\tmenuAction.visible = compileExpression(resolveBindingString(menuAction.visible as string));\n\t\t\t} else if (menuActionVisiblePaths.length || menuItemsVisiblePaths.length) {\n\t\t\t\t// If the menu is set to invisible, it should be invisible, otherwise the visibility should be calculated from the items\n\t\t\t\tconst visibleExpressions: BindingToolkitExpression<boolean>[] = menuItemsVisiblePaths.map((menuItemVisiblePath) =>\n\t\t\t\t\tresolveBindingString(menuItemVisiblePath, \"boolean\")\n\t\t\t\t);\n\t\t\t\tmenuAction.visible = compileExpression(\n\t\t\t\t\tand(resolveBindingString((menuAction.visible as string) || true, \"boolean\"), or(...visibleExpressions))\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmenuAction.visible = (!menuActionNotVisible).toString();\n\t\t\t}\n\t\t}\n\t});\n\treturn actions;\n};\n\n/**\n * Adds the collaboration condition to all actions with type ForAction.\n * This disables the actions if the collaboration is enabled, but the user doesn't have the authorization from the back end.\n * @param actions The list of definitions of the table actions.\n */\nexport function addCollaborationCondition(actions: CustomAction[]): void {\n\tactions.forEach((action) => {\n\t\tif (action.visible?.valueOf() === \"false\") {\n\t\t\treturn;\n\t\t}\n\t\tif (action.type === \"ForAction\") {\n\t\t\taction.visible = compileExpression(\n\t\t\t\tand(resolveBindingString(action.visible as string, \"boolean\"), not(equal(UI.hasCollaborationAuthorization, false)))\n\t\t\t);\n\t\t}\n\t});\n}\n\n/**\n * Maps an action by its key, based on the given annotation actions and manifest configuration. The result already represents the\n * merged action from both configuration sources.\n *\n * This function also returns an indication whether the action can be a menu item, saying whether it is visible or of a specific type\n * that allows this.\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @param actionKey Action Key to look up\n * @returns Merged action and indicator whether it can be a menu item\n */\nfunction mapActionByKey(\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[],\n\tactionKey: string\n): { action: BaseAction | CustomAction; canBeMenuItem: boolean | CompiledBindingToolkitExpression } {\n\tconst annotationAction = annotationActions.find((action) => action.key === actionKey);\n\tconst manifestAction = manifestActions[actionKey];\n\tlet resultAction: PartiallyConvertedCustomAction | BaseAction = { ...(annotationAction ?? manifestAction) };\n\n\t// actions inside menus can't be found on top level, so assign actions from menu to it\n\tif (Object.keys(resultAction).length === 0) {\n\t\tannotationActions\n\t\t\t.filter((actionAnnotation: BaseAction) => {\n\t\t\t\treturn actionAnnotation.type === ActionType.Menu;\n\t\t\t})\n\t\t\t.forEach((menuAction: BaseAction) => {\n\t\t\t\tmenuAction.menu?.forEach((menuItem: BaseAction) => {\n\t\t\t\t\tif (menuItem.key === actionKey) {\n\t\t\t\t\t\tresultAction = menuItem;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\t// Annotation action and manifest configuration already has to be merged here as insertCustomElements only considers top-level actions\n\tif (annotationAction) {\n\t\t// If enabled or visible is not set in the manifest, use the annotation value and hence do not overwrite\n\t\tresultAction.enabled = manifestAction?.enabled ?? annotationAction.enabled;\n\t\tresultAction.visible = manifestAction?.visible ?? annotationAction.visible;\n\n\t\tfor (const prop in manifestAction || {}) {\n\t\t\tconst propKey = prop as keyof BaseAction;\n\t\t\tif (!annotationAction[propKey] && propKey !== \"menu\") {\n\t\t\t\tresultAction[propKey] = manifestAction[propKey] as never;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst canBeMenuItem =\n\t\tresultAction?.visible ||\n\t\tresultAction?.type === ActionType.DataFieldForAction ||\n\t\tresultAction?.type === ActionType.DataFieldForIntentBasedNavigation;\n\n\treturn {\n\t\taction: resultAction as BaseAction | CustomAction,\n\t\tcanBeMenuItem\n\t};\n}\n\n/**\n * Map the default action key of a menu to its actual action configuration and identify whether this default action is a command.\n * @param menuAction Menu action to map the default action for\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @param commandActions Array of command actions to push the default action to if applicable\n */\nfunction mapMenuDefaultAction(\n\tmenuAction: PartiallyConvertedCustomAction,\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[],\n\tcommandActions: Record<string, CustomAction | BaseAction>\n): void {\n\tconst { action, canBeMenuItem } = mapActionByKey(manifestActions, annotationActions, menuAction.defaultAction as string);\n\n\tif (canBeMenuItem) {\n\t\tmenuAction.defaultAction = action;\n\t}\n\n\tif (action.command) {\n\t\tcommandActions[action.key] = action;\n\t}\n}\n\n/**\n * Map the menu item keys of a menu to their actual action configurations and identify whether they are commands.\n * @param menuAction Menu action to map the menu items for\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @param commandActions Array of command actions to push the menu item actions to if applicable\n */\nfunction mapMenuItems(\n\tmenuAction: PartiallyConvertedCustomAction,\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[],\n\tcommandActions: Record<string, BaseAction | CustomAction>\n): void {\n\tconst mappedMenuItems: (CustomAction | BaseAction)[] = [];\n\tconst matchingAnnotationAction = annotationActions.find((annotationAction) => annotationAction.key === menuAction.key);\n\n\tif (menuAction.menu?.length !== 0) {\n\t\tfor (const menuItemKey of menuAction.menu ?? []) {\n\t\t\tconst { action, canBeMenuItem } = mapActionByKey(manifestActions, annotationActions, menuItemKey);\n\n\t\t\tif (canBeMenuItem) {\n\t\t\t\tmappedMenuItems.push(action);\n\t\t\t}\n\n\t\t\tif (action.command) {\n\t\t\t\tcommandActions[menuItemKey] = action;\n\t\t\t}\n\t\t}\n\t}\n\n\t// If no menu items are assigned to the manifest-override-menu, it inherits the items from the previous menu\n\telse if (matchingAnnotationAction) {\n\t\tmatchingAnnotationAction.menu?.forEach((menuItem) => mappedMenuItems.push(menuItem));\n\t}\n\n\tconst mappedMenuAction = menuAction as CustomAction;\n\tmappedMenuAction.menu = mappedMenuItems;\n\n\t// If the menu is set to invisible, it should be invisible, otherwise the visibility should be calculated from the items\n\tconst visibleExpressions: BindingToolkitExpression<boolean>[] = mappedMenuItems.map((menuItem) =>\n\t\tresolveBindingString(menuItem.visible as string, \"boolean\")\n\t);\n\tmappedMenuAction.visible = compileExpression(\n\t\tand(resolveBindingString(menuAction.visible as string, \"boolean\"), or(...visibleExpressions))\n\t);\n}\n\n/**\n * Transforms the flat collection of actions into a nested structures of menus. The result is a record of actions that are either menus or\n * ones that do not appear in menus as menu items. It also returns a list of actions that have an assigned command.\n *\n * Note that menu items are already the merged result of annotation actions and their manifest configuration, as {@link insertCustomElements}\n * only considers root-level actions.\n * @param manifestActions Actions defined in the manifest\n * @param annotationActions Actions defined through annotations\n * @returns The transformed actions from the manifest and a list of command actions\n */\nfunction transformMenuActionsAndIdentifyCommands(\n\tmanifestActions: Record<string, PartiallyConvertedCustomAction>,\n\tannotationActions: BaseAction[]\n): Record<string, Record<string, CustomAction>> {\n\tconst allActions: Record<string, CustomAction> = {};\n\tconst actionKeysToDelete: string[] = [];\n\tconst commandActions: Record<string, CustomAction> = {};\n\n\tfor (const actionKey in manifestActions) {\n\t\tconst manifestAction: PartiallyConvertedCustomAction = manifestActions[actionKey];\n\n\t\tif (manifestAction.defaultAction !== undefined) {\n\t\t\tmapMenuDefaultAction(manifestAction, manifestActions, annotationActions, commandActions);\n\t\t}\n\n\t\tif (manifestAction.type === ActionType.Menu) {\n\t\t\tmapMenuItems(manifestAction, manifestActions, annotationActions, commandActions);\n\n\t\t\t// Menu has no visible items, so remove it\n\t\t\tif (!manifestAction.menu?.length) {\n\t\t\t\tactionKeysToDelete.push(manifestAction.key);\n\t\t\t}\n\t\t}\n\n\t\tif (manifestAction.command) {\n\t\t\tcommandActions[actionKey] = manifestAction as CustomAction;\n\t\t}\n\n\t\tallActions[actionKey] = manifestAction as CustomAction;\n\t}\n\n\tactionKeysToDelete.forEach((actionKey: string) => delete allActions[actionKey]);\n\n\treturn {\n\t\tactions: allActions,\n\t\tcommandActions: commandActions\n\t};\n}\n\n/**\n * Gets the binding expression for the enablement of a manifest action.\n * @param manifestAction The action configured in the manifest\n * @param isAnnotationAction Whether the action, defined in manifest, corresponds to an existing annotation action.\n * @param converterContext\n * @param forContextMenu\n * @returns Determined property value for the enablement\n */\nconst _getManifestEnabled = function (\n\tmanifestAction: ManifestAction,\n\tisAnnotationAction: boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tforContextMenu = false\n): CompiledBindingToolkitExpression | undefined {\n\tif (isAnnotationAction && manifestAction.enabled === undefined) {\n\t\t// If annotation action has no property defined in manifest,\n\t\t// do not overwrite it with manifest action's default value.\n\t\treturn undefined;\n\t}\n\n\tconst result = getManifestActionBooleanPropertyWithFormatter(manifestAction.enabled, converterContext, forContextMenu);\n\n\t// Consider requiresSelection property to include selectedContexts in the binding expression\n\tconst internalModelProperty = !forContextMenu ? \"numberOfSelectedContexts\" : \"contextmenu/numberOfSelectedContexts\";\n\treturn compileExpression(\n\t\tifElse(\n\t\t\tmanifestAction.requiresSelection === true,\n\t\t\tifElse(\n\t\t\t\tmanifestAction.enableOnSelect === \"single\",\n\t\t\t\tand(equal(pathInModel(internalModelProperty, \"internal\"), 1), result),\n\t\t\t\tand(greaterOrEqual(pathInModel(internalModelProperty, \"internal\"), 1), result)\n\t\t\t),\n\t\t\tresult\n\t\t)\n\t);\n};\n\n/**\n * Gets the binding expression for the visibility of a manifest action.\n * @param manifestAction The action configured in the manifest\n * @param isAnnotationAction Whether the action, defined in the manifest, corresponds to an existing annotation action.\n * @param converterContext\n * @param forContextMenu\n * @returns Determined property value for the visibility\n */\nconst _getManifestVisible = function (\n\tmanifestAction: ManifestAction,\n\tisAnnotationAction: boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): CompiledBindingToolkitExpression | undefined {\n\tif (isAnnotationAction && manifestAction.visible === undefined) {\n\t\t// If annotation action has no property defined in manifest,\n\t\t// do not overwrite it with manifest action's default value.\n\t\treturn undefined;\n\t}\n\n\tconst result = getManifestActionBooleanPropertyWithFormatter(manifestAction.visible, converterContext);\n\treturn compileExpression(result);\n};\n\ntype PartiallyConvertedCustomAction = Omit<CustomAction, \"menu\"> & {\n\tmenu: string[] | undefined;\n\tpriority?: OverflowToolbarPriority;\n\tgroup?: number;\n};\n\n/**\n * As some properties should not be overridable by the manifest, make sure that the manifest configuration gets the annotation values for these.\n * @param manifestAction Action defined in the manifest\n * @param annotationAction Action defined through annotations\n */\nfunction overrideManifestConfigurationWithAnnotation(manifestAction: PartiallyConvertedCustomAction, annotationAction?: BaseAction): void {\n\tif (!annotationAction) {\n\t\treturn;\n\t}\n\n\t// Do not override the 'type' given in an annotation action\n\tmanifestAction.type = annotationAction.type;\n\tmanifestAction.annotationPath = annotationAction.annotationPath;\n\tmanifestAction.press = annotationAction.press;\n\n\t// Only use the annotation values for enablement and visibility if not set in the manifest\n\tmanifestAction.enabled = manifestAction.enabled ?? annotationAction.enabled;\n\tmanifestAction.visible = manifestAction.visible ?? annotationAction.visible;\n}\n\n/**\n * Creates the action configuration based on the manifest settings.\n * @param manifestActions The manifest actions\n * @param converterContext The converter context\n * @param annotationActions The annotation actions definition\n * @param navigationSettings The navigation settings\n * @param considerNavigationSettings The navigation settings to be considered\n * @param hiddenActions Actions that are configured as hidden (additional to the visible property)\n * @param facetName The facet where an action is displayed if it is inline\n * @returns The actions from the manifest\n */\nexport function getActionsFromManifest(\n\tmanifestActions: Record<string, ManifestAction> | undefined,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tannotationActions?: BaseAction[],\n\tnavigationSettings?: NavigationSettingsConfiguration,\n\tconsiderNavigationSettings?: boolean,\n\thiddenActions?: BaseAction[],\n\tfacetName?: string\n): Record<string, Record<string, CustomAction>> {\n\tconst actions: Record<string, PartiallyConvertedCustomAction> = {};\n\tfor (const actionKey in manifestActions) {\n\t\tconst manifestAction: ManifestAction = manifestActions[actionKey];\n\t\tconst lastDotIndex = manifestAction.press?.lastIndexOf(\".\") || -1;\n\t\tlet annotationAction: BaseAction | undefined;\n\n\t\tif (annotationActions) {\n\t\t\tfor (const action of annotationActions) {\n\t\t\t\t// SubSection.ts#createFormActionReducer uses insertCustomElements which results in annotation actions mixing up with manifest action\n\t\t\t\t// this is why we may find an action that has a CustomAction prefix\n\t\t\t\tif (action.id?.startsWith(\"CustomAction::\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (action.key === actionKey) {\n\t\t\t\t\tannotationAction = action;\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (action.type === \"Menu\") {\n\t\t\t\t\t// If not found, check inside menus\n\t\t\t\t\tannotationAction = action.menu?.find((menuItem: BaseAction) => {\n\t\t\t\t\t\treturn menuItem.key === actionKey;\n\t\t\t\t\t});\n\t\t\t\t\tif (annotationAction) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// To identify the annotation action property overwrite via manifest use-case.\n\t\tconst isAnnotationAction = !!annotationAction;\n\t\tif (manifestAction.facetName) {\n\t\t\tfacetName = manifestAction.facetName;\n\t\t}\n\n\t\tactions[actionKey] = {\n\t\t\tid: annotationAction ? actionKey : getCustomActionID(actionKey),\n\t\t\ttype: manifestAction.menu ? ActionType.Menu : ActionType.Default,\n\t\t\tvisible: _getManifestVisible(manifestAction, isAnnotationAction, converterContext),\n\t\t\tenabled: _getManifestEnabled(manifestAction, isAnnotationAction, converterContext),\n\t\t\tenabledForContextMenu: _getManifestEnabled(manifestAction, isAnnotationAction, converterContext, true),\n\t\t\thandlerModule: manifestAction.press && manifestAction.press.substring(0, lastDotIndex).replace(/\\./gi, \"/\"),\n\t\t\thandlerMethod: manifestAction.press && manifestAction.press.substring(lastDotIndex + 1),\n\t\t\tpress: manifestAction.press,\n\t\t\ttext: manifestAction.text,\n\t\t\tnoWrap: manifestAction.__noWrap,\n\t\t\tkey: replaceSpecialChars(actionKey),\n\t\t\tenableOnSelect: manifestAction.enableOnSelect,\n\t\t\tdefaultValuesExtensionFunction: manifestAction.defaultValuesFunction,\n\t\t\tposition: {\n\t\t\t\tanchor: manifestAction.position?.anchor,\n\t\t\t\tplacement: manifestAction.position === undefined ? Placement.After : manifestAction.position.placement\n\t\t\t},\n\t\t\tisNavigable: isActionNavigable(manifestAction, navigationSettings, considerNavigationSettings),\n\t\t\tcommand: manifestAction.command,\n\t\t\trequiresSelection: manifestAction.requiresSelection === undefined ? false : manifestAction.requiresSelection,\n\t\t\tenableAutoScroll: enableAutoScroll(manifestAction),\n\t\t\tmenu: manifestAction.menu ?? (annotationAction?.type === ActionType.Menu ? [] : undefined),\n\t\t\tfacetName: manifestAction.inline ? facetName : undefined,\n\t\t\tdefaultAction: manifestAction.defaultAction,\n\t\t\tisAIOperation: manifestAction?.isAIOperation ?? undefined,\n\t\t\tpriority: manifestAction?.priority ?? undefined,\n\t\t\tgroup: manifestAction?.group ?? undefined\n\t\t};\n\n\t\toverrideManifestConfigurationWithAnnotation(actions[actionKey], annotationAction);\n\t}\n\n\treturn transformMenuActionsAndIdentifyCommands(actions, annotationActions ?? []);\n}\n\n/**\n * Gets a binding expression representing a Boolean manifest property that can either be represented by a static value, a binding string,\n * or a runtime formatter function.\n * @param propertyValue String representing the configured property value\n * @param converterContext\n * @param forContextMenu Indicates whether the property is requested for a context menu action\n * @returns A binding expression representing the property\n */\nfunction getManifestActionBooleanPropertyWithFormatter(\n\tpropertyValue: string | undefined | boolean,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tforContextMenu = false\n): BindingToolkitExpression<boolean> {\n\tconst resolvedBinding = resolveBindingString<boolean | string>(propertyValue as string, \"boolean\");\n\tlet result: BindingToolkitExpression<boolean>;\n\tif (isConstant(resolvedBinding) && resolvedBinding.value === undefined) {\n\t\t// No property value configured in manifest for the custom action --> default value is true\n\t\tresult = constant(true);\n\t} else if (isConstant(resolvedBinding) && typeof resolvedBinding.value === \"string\") {\n\t\t// Then it's a module-method reference \"sap.xxx.yyy.doSomething\"\n\t\tconst methodPath = resolvedBinding.value;\n\t\t// FIXME: The custom \"isEnabled\" check does not trigger (because none of the bound values changes)\n\t\tresult = formatResult(\n\t\t\t[pathInModel<View>(\"/\", \"$view\"), methodPath, pathInModel<Context[]>(\"selectedContexts\", \"internal\")],\n\t\t\tfpmFormatter.customBooleanPropertyCheck,\n\t\t\t!forContextMenu\n\t\t\t\t? converterContext.getDataModelObjectPath().contextLocation?.targetEntityType || converterContext.getEntityType()\n\t\t\t\t: undefined\n\t\t);\n\t} else {\n\t\t// then it's a binding\n\t\tresult = resolvedBinding as BindingToolkitExpression<boolean>;\n\t}\n\n\treturn result;\n}\n\nexport const removeDuplicateActions = (actions: CustomAction[]): CustomAction[] => {\n\tlet oMenuItemKeys: Record<string, boolean> = {};\n\tactions.forEach((action) => {\n\t\tif (action?.menu?.length) {\n\t\t\tconst actionMenu = action.menu;\n\t\t\toMenuItemKeys = actionMenu.reduce((item: Record<string, boolean>, { key }) => {\n\t\t\t\tif (key && !item[key]) {\n\t\t\t\t\titem[key] = true;\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t}, oMenuItemKeys);\n\t\t}\n\t});\n\treturn actions.filter((action) => !oMenuItemKeys[action.key]);\n};\n\nexport function getEnabledForAnnotationActionExpression(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tactionTarget: Action | undefined,\n\tpathFromContextLocation = false\n): BindingToolkitExpression<boolean> {\n\tif (actionTarget?.annotations.Core?.OperationAvailable) {\n\t\tconst dataModelObjectPath = converterContext.getDataModelObjectPath();\n\t\tlet isEnabledExp = getActionEnabledExpression(\n\t\t\tactionTarget,\n\t\t\tconverterContext.getConvertedTypes(),\n\t\t\tdataModelObjectPath,\n\t\t\tpathFromContextLocation\n\t\t);\n\t\tconst collaborationOnRoot =\n\t\t\tModelHelper.isCollaborationDraftSupportedFromConverterContext(converterContext) &&\n\t\t\tModelHelper.getDraftRoot(converterContext.getEntitySet());\n\t\tif (collaborationOnRoot) {\n\t\t\tisEnabledExp = and(isEnabledExp, not(equal(UI.hasCollaborationAuthorization, false)));\n\t\t}\n\t\treturn isEnabledExp;\n\t}\n\treturn constant(true);\n}\n\n/**\n * Method to determine the value of the 'enabled' property of an annotation-based action.\n * @param converterContext The instance of the converter context\n * @param actionTarget The instance of the action\n * @param pathFromContextLocation Is the binding path calculated  from the converter context location\n * @returns The binding expression for the 'enabled' property of the action button.\n */\nexport function getEnabledForAnnotationAction(\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tactionTarget: Action | undefined,\n\tpathFromContextLocation = false\n): CompiledBindingToolkitExpression {\n\treturn compileExpression(getEnabledForAnnotationActionExpression(converterContext, actionTarget, pathFromContextLocation));\n}\n\nexport function getSemanticObjectMapping(mappings?: SemanticObjectMappingType[]): MetaModelType<SemanticObjectMappingType>[] {\n\treturn mappings\n\t\t? mappings.map((mapping) => {\n\t\t\t\treturn {\n\t\t\t\t\tLocalProperty: {\n\t\t\t\t\t\t$PropertyPath: mapping.LocalProperty.value\n\t\t\t\t\t},\n\t\t\t\t\tSemanticObjectProperty: mapping.SemanticObjectProperty.toString()\n\t\t\t\t};\n\t\t  })\n\t\t: [];\n}\n\nexport function isActionNavigable(\n\taction: ManifestAction | CustomDefinedTableColumnForOverride | undefined,\n\tnavigationSettings?: NavigationSettingsConfiguration,\n\tconsiderNavigationSettings?: boolean\n): boolean {\n\tlet bIsNavigationConfigured = true;\n\tif (considerNavigationSettings) {\n\t\tconst detailOrDisplay = navigationSettings && (navigationSettings.detail || navigationSettings.display);\n\t\tbIsNavigationConfigured = detailOrDisplay?.route ? true : false;\n\t}\n\t// when enableAutoScroll is true the navigateToInstance feature is disabled\n\tif (\n\t\t(action &&\n\t\t\taction.afterExecution &&\n\t\t\t(action.afterExecution?.navigateToInstance === false || action.afterExecution?.enableAutoScroll === true)) ||\n\t\t!bIsNavigationConfigured\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nexport function enableAutoScroll(action: ManifestAction): boolean {\n\treturn action?.afterExecution?.enableAutoScroll === true;\n}\n\nexport function dataFieldIsCopyAction(dataField: DataFieldForActionTypes): boolean {\n\treturn dataField.annotations?.UI?.IsCopyAction?.valueOf() === true && dataField.$Type === UIAnnotationTypes.DataFieldForAction;\n}\n\nexport function getCopyAction(copyDataFields: DataFieldForActionTypes[]): DataFieldForActionTypes | undefined {\n\tif (copyDataFields.length === 1) {\n\t\treturn copyDataFields[0];\n\t}\n\tif (copyDataFields.length > 1) {\n\t\tLog.error(\"Multiple actions are annotated with isCopyAction. There can be only one standard copy action.\");\n\t}\n\treturn undefined;\n}\n\n/**\n * Method to extract menu items from actions of type menus.\n * @param annotationActions Collection of annotation based actions\n * @returns Collection of actions which are menu items in one of the annotation based menus\n */\nexport function getAnnotationMenuActionItems(annotationActions: BaseAction[]): BaseAction[] {\n\tconst menuActionItems: BaseAction[] = [];\n\n\tannotationActions.forEach((action: BaseAction) => {\n\t\tif (action.type === \"Menu\" && !action.id?.startsWith(\"CustomAction::\") && action.menu) {\n\t\t\tmenuActionItems.push(...action.menu);\n\t\t}\n\t});\n\n\treturn menuActionItems;\n}\n\n/**\n * Method to find the matching manifest actions which override the annotation menu items.\n * @param annotationMenuItems Collection of annotation based menu items\n * @param manifestActions Collection of manifest based actions\n * @returns Collection of actions which are menu items in one of the annotation based menus\n */\nexport function getMatchingManifestAction(\n\tannotationMenuItems: BaseAction[],\n\tmanifestActions: Record<string, CustomAction>\n): Record<string, CustomAction> {\n\tconst matchingManifestActions: Record<string, CustomAction> = {};\n\n\tfor (const manifestAction in manifestActions) {\n\t\tif (\n\t\t\tmanifestAction.startsWith(\"DataFieldForAction::\") &&\n\t\t\tannotationMenuItems.find((menuActionItems) => {\n\t\t\t\treturn menuActionItems.key === manifestAction;\n\t\t\t})\n\t\t) {\n\t\t\tmatchingManifestActions[manifestAction] = manifestActions[manifestAction];\n\t\t}\n\t}\n\n\treturn matchingManifestActions;\n}\n\n/**\n * Method to transform the menus by replacing the menu items with their overriding actions.\n * @param unpreparedActions Collection of all actions after merging manifest and annotation actions\n * @param overrideMenuActions Collection of all overriden menu items\n */\nexport function prepareMenuActions(unpreparedActions: CustomAction[], overrideMenuActions: BaseAction[]): void {\n\tlet foundAction;\n\n\tunpreparedActions.forEach((action: CustomAction) => {\n\t\tif (action.type === ActionType.Menu) {\n\t\t\taction.menu?.forEach((menuItem: BaseAction, menuItemIndex: number) => {\n\t\t\t\tfoundAction = overrideMenuActions.find((overrideMenuAction: BaseAction) => {\n\t\t\t\t\treturn overrideMenuAction.key === menuItem.key;\n\t\t\t\t});\n\n\t\t\t\tif (foundAction) {\n\t\t\t\t\taction.menu?.splice(menuItemIndex, 1, foundAction);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Menu has isAIOperation set to true on each menu item has isAIOperation set to true\n\t\t\tconst isAIOperation = isMenuAIOperation(action.menu as unknown as CustomAction[]);\n\t\t\tif (isAIOperation) {\n\t\t\t\taction.isAIOperation = isAIOperation;\n\t\t\t}\n\t\t}\n\t});\n}\n\n/**\n * Method to determine if the menu consists of all AI operation actions.\n * @param actions Collection of DataFieldForActionAbstractTypes or CustomAction in the menu\n * @returns A boolean true if all records in the menu are AI operations, false otherwise\n */\nexport function isMenuAIOperation(actions: DataFieldForActionAbstractTypes[] | CustomAction[]): boolean {\n\tlet isAIOperationOccurrences = 0;\n\tactions.forEach((action) => {\n\t\tif ((action as DataFieldForActionAbstractTypes).$Type !== undefined) {\n\t\t\tif (isActionAIOperation(action as DataFieldForActionAbstractTypes)) {\n\t\t\t\tisAIOperationOccurrences++;\n\t\t\t}\n\t\t} else if ((action as CustomAction).type !== undefined) {\n\t\t\tif (isCustomActionAIOperation(action as CustomAction)) {\n\t\t\t\tisAIOperationOccurrences++;\n\t\t\t}\n\t\t}\n\t});\n\tif (isAIOperationOccurrences === actions?.length) return true;\n\n\treturn false;\n}\n\n/**\n * Method to determine if the given record is an AI operation.\n * @param dataField The record of type DataFieldForAction or DataFieldForIntentBasedNavigation\n * @returns A boolean true if the given record is an AI operation, false otherwise\n */\nexport function isActionAIOperation(dataField: DataFieldForActionAbstractTypes): boolean {\n\tif (dataField.$Type === UIAnnotationTypes.DataFieldForAction) {\n\t\treturn dataField.ActionTarget?.annotations.UI?.IsAIOperation?.valueOf() === true;\n\t}\n\treturn false;\n}\n\n/**\n * Method to determine if the given custom action is an AI operation.\n * @param customAction The record of type CustomAction\n * @returns A boolean true if the given record is an AI operation, false otherwise\n */\nfunction isCustomActionAIOperation(customAction: CustomAction): boolean {\n\treturn customAction?.isAIOperation === true;\n}\n\n/**\n * Method to add toolbar separators if actions are grouped in more than one group.\n * @param actions Collection of merged actions from annotations and manifest\n * @returns Collection of merged actions with toolbar separators\n */\nexport function addSeparators(actions: BaseAction[]): BaseAction[] {\n\tconst result: BaseAction[] = [];\n\tconst groupsUsed: number[] = [];\n\tactions.forEach((action: BaseAction) => {\n\t\t// if a new group is found\n\t\tif (action.group !== undefined && !groupsUsed.includes(action.group)) {\n\t\t\tgroupsUsed.push(action.group);\n\t\t\t// if there are two or more groups, add separator\n\t\t\tif (groupsUsed.length > 1) {\n\t\t\t\tresult.push({\n\t\t\t\t\ttype: ActionType.Separator,\n\t\t\t\t\tkey: \"Separator::\" + action.group,\n\t\t\t\t\tgroup: action.group,\n\t\t\t\t\tposition: {\n\t\t\t\t\t\tanchor: action.key,\n\t\t\t\t\t\tplacement: Placement.Before\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tresult.push(action);\n\t});\n\treturn result;\n}\n"],"mappings":"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","ignoreList":[],"file":"Action-dbg.js"}