{"version":3,"file":"DataVisualization.js","names":["getVisualizationsFromAnnotation","annotation","visualizationPath","converterContext","isMacroOrMultipleView","presentation","selectionVariant","isAnnotationOfType","undefined","PresentationVariant","SelectionVariant","visualizationAnnotations","isALP","isAlpAnnotation","finalSelectionVariant","getTemplateType","TemplateType","ListReport","baseVisualizationPath","split","isPresentationCompliant","annotationExistsInPresentationVariant","defaultLineItemAnnotation","prepareDefaultVisualization","push","defaultChartAnnotation","visualizations","Visualizations","pushFirstVizOfType","allowedTerms","firstViz","find","viz","$target","includes","term","visualization","annotationPath","value","_exports","getSelectionPresentationVariant","entityType","resolvedTarget","getEntityTypeAnnotation","selectionPresentationVariant","Error","annotations","UI","SelectionPresentationVariant","isSelectionPresentationCompliant","presentationVariant","arguments","length","hasTable","hasChart","forEach","getDefaultLineItem","LineItem","getDefaultChart","Chart","getDefaultSelectionVariant","getSelectionVariant","getManifestWrapper","getDefaultTemplateAnnotationPath","getVisualizationsAndPaths","concat","getDataVisualizationPresentation","inConverterContext","getDataVisualizationConfiguration","params","isCondensedTableLayoutCompliant","doNotCheckApplySupported","associatedSelectionVariant","shouldCreateTemplateChartVisualization","resolvedVisualization","chartVisualization","tableVisualization","visualizationAndPath","createChartVisualizationForTemplating","createChartVisualization","Table","createTableVisualization","presentationVariantAnnotation","selectionVariantAnnotation","createDefaultTableVisualization","getDiagnostics","addIssue","IssueCategory","Annotation","IssueSeverity","Medium","IssueType","MISSING_LINEITEM","createBlankChartVisualization","MISSING_CHART","filter","isVisualization","getEntitySetBasedAnnotationPath","fullyQualifiedName","associatedSelectionVariantPath","VisualizationType","type","validatePresentationMetaPath","metaPath","objectTerm","slice","lastIndexOf","some","search","RegExp","getUiControl","presentationContext","controlPath","getPath","MetaModelConverter","convertMetaModelContext","model","getModel","Array","isArray","getMetaContext","getObject","annotationTerm","visualizationType","getEntityType","defaultAnnotation","getRelativeAnnotationPath","hasMultipleVisualizations","AnalyticalListPage"],"sources":["./DataVisualization.ts"],"sourcesContent":["import type { EntityType } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tChart,\n\tLineItem,\n\tPresentationVariant,\n\tPresentationVariantType,\n\tSelectionPresentationVariant,\n\tSelectionVariant,\n\tSelectionVariantType\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport { IssueCategory, IssueSeverity, IssueType } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport { isAnnotationOfType } from \"sap/fe/core/helpers/TypeGuards\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ConverterContext from \"../../ConverterContext\";\nimport type { ResolvedAnnotationContext } from \"../../ConverterContext\";\nimport { TemplateType, VisualizationType } from \"../../ManifestSettings\";\nimport type { ChartVisualization } from \"./Chart\";\nimport { createBlankChartVisualization, createChartVisualization, createChartVisualizationForTemplating } from \"./Chart\";\nimport type { TableVisualization } from \"./Table\";\nimport Table from \"./Table\";\n\nexport type DataVisualizationAnnotations = LineItem | Chart | PresentationVariant | SelectionVariant | SelectionPresentationVariant;\nexport type ActualVisualizationAnnotations = LineItem | Chart;\nexport type PresentationVisualizationAnnotations = UIAnnotationTerms.LineItem | UIAnnotationTerms.Chart;\nexport type VisualizationAndPath = {\n\tvisualization: ActualVisualizationAnnotations;\n\tannotationPath: string;\n\tselectionVariant?: SelectionVariantType;\n\tconverterContext: ConverterContext<PageContextPathTarget>;\n};\nexport type DataVisualizationDefinition = {\n\tvisualizations: (TableVisualization | ChartVisualization)[];\n\tannotationPath?: string;\n\tassociatedSelectionVariantPath?: string;\n\tinMultiView?: boolean;\n};\n\nexport const getVisualizationsFromAnnotation = function (\n\tannotation: PresentationVariantType | SelectionPresentationVariant,\n\tvisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tisMacroOrMultipleView?: boolean\n): VisualizationAndPath[] {\n\tconst { presentation, selectionVariant } = isAnnotationOfType<PresentationVariantType>(\n\t\tannotation,\n\t\tUIAnnotationTypes.PresentationVariantType\n\t)\n\t\t? { presentation: annotation, selectionVariant: undefined }\n\t\t: { presentation: annotation.PresentationVariant, selectionVariant: annotation.SelectionVariant };\n\tconst visualizationAnnotations: VisualizationAndPath[] = [];\n\tconst isALP = isAlpAnnotation(converterContext);\n\tconst finalSelectionVariant =\n\t\t!isALP && // Don't add the SelectionVariant on ALP -> will be managed by FIORITECHP1-26237\n\t\t!(converterContext.getTemplateType() === TemplateType.ListReport && !isMacroOrMultipleView) //On ListReport with single view the SelectionVariant is managed by FilterBar\n\t\t\t? selectionVariant\n\t\t\t: undefined;\n\tconst baseVisualizationPath = visualizationPath.split(\"@\")[0];\n\tif ((isMacroOrMultipleView === true || isALP) && !isPresentationCompliant(presentation, isALP)) {\n\t\tif (!annotationExistsInPresentationVariant(presentation, UIAnnotationTerms.LineItem)) {\n\t\t\tconst defaultLineItemAnnotation = prepareDefaultVisualization(\n\t\t\t\tUIAnnotationTerms.LineItem,\n\t\t\t\tbaseVisualizationPath,\n\t\t\t\tconverterContext\n\t\t\t);\n\t\t\tif (defaultLineItemAnnotation) {\n\t\t\t\tvisualizationAnnotations.push({ ...defaultLineItemAnnotation, ...{ selectionVariant: finalSelectionVariant } });\n\t\t\t}\n\t\t}\n\t\tif (!annotationExistsInPresentationVariant(presentation, UIAnnotationTerms.Chart)) {\n\t\t\tconst defaultChartAnnotation = prepareDefaultVisualization(UIAnnotationTerms.Chart, baseVisualizationPath, converterContext);\n\t\t\tif (defaultChartAnnotation) {\n\t\t\t\tvisualizationAnnotations.push(defaultChartAnnotation);\n\t\t\t}\n\t\t}\n\t}\n\tconst visualizations = presentation.Visualizations;\n\tconst pushFirstVizOfType = function (allowedTerms: string[]): void {\n\t\tconst firstViz = visualizations?.find((viz) => viz.$target !== undefined && allowedTerms.includes(viz.$target.term));\n\t\tif (firstViz) {\n\t\t\tvisualizationAnnotations.push({\n\t\t\t\tvisualization: firstViz.$target as ActualVisualizationAnnotations,\n\t\t\t\tannotationPath: `${baseVisualizationPath}${firstViz.value}`,\n\t\t\t\tconverterContext: converterContext,\n\t\t\t\tselectionVariant: finalSelectionVariant\n\t\t\t});\n\t\t}\n\t};\n\tif (isALP) {\n\t\t// In case of ALP, we use the first LineItem and the first Chart\n\t\tpushFirstVizOfType([UIAnnotationTerms.LineItem]);\n\t\tpushFirstVizOfType([UIAnnotationTerms.Chart]);\n\t} else {\n\t\t// Otherwise, we use the first viz only (Chart or LineItem)\n\t\tpushFirstVizOfType([UIAnnotationTerms.LineItem, UIAnnotationTerms.Chart]);\n\t}\n\treturn visualizationAnnotations;\n};\nexport function getSelectionPresentationVariant(\n\tentityType: EntityType,\n\tannotationPath: string | undefined,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): SelectionPresentationVariant | undefined {\n\tif (annotationPath) {\n\t\tconst resolvedTarget = converterContext.getEntityTypeAnnotation(annotationPath);\n\t\tconst selectionPresentationVariant = resolvedTarget.annotation as SelectionPresentationVariant;\n\t\tif (selectionPresentationVariant) {\n\t\t\tif (selectionPresentationVariant.term === UIAnnotationTerms.SelectionPresentationVariant) {\n\t\t\t\treturn selectionPresentationVariant;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(\"Annotation Path for the SPV mentioned in the manifest is not found, Please add the SPV in the annotation\");\n\t\t}\n\t} else {\n\t\treturn entityType.annotations?.UI?.SelectionPresentationVariant;\n\t}\n}\nexport function isSelectionPresentationCompliant(\n\tselectionPresentationVariant: SelectionPresentationVariant,\n\tisALP: boolean\n): boolean | undefined {\n\tconst presentationVariant = selectionPresentationVariant && selectionPresentationVariant.PresentationVariant;\n\tif (presentationVariant) {\n\t\treturn isPresentationCompliant(presentationVariant, isALP);\n\t} else {\n\t\tthrow new Error(\"Presentation Variant is not present in the SPV annotation\");\n\t}\n}\nexport function isPresentationCompliant(presentationVariant: PresentationVariantType, isALP = false): boolean {\n\tlet hasTable = false,\n\t\thasChart = false;\n\tif (isALP) {\n\t\tif (presentationVariant?.Visualizations) {\n\t\t\tconst visualizations = presentationVariant.Visualizations;\n\t\t\tvisualizations.forEach((visualization) => {\n\t\t\t\tif (visualization.$target?.term === UIAnnotationTerms.LineItem) {\n\t\t\t\t\thasTable = true;\n\t\t\t\t}\n\t\t\t\tif (visualization.$target?.term === UIAnnotationTerms.Chart) {\n\t\t\t\t\thasChart = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn hasChart && hasTable;\n\t} else {\n\t\treturn (\n\t\t\tpresentationVariant?.Visualizations &&\n\t\t\t!!presentationVariant.Visualizations.find((visualization) => {\n\t\t\t\treturn (\n\t\t\t\t\tvisualization.$target?.term === UIAnnotationTerms.LineItem || visualization.$target?.term === UIAnnotationTerms.Chart\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t}\n}\nexport function getDefaultLineItem(entityType: EntityType): LineItem | undefined {\n\treturn entityType.annotations.UI?.LineItem;\n}\nexport function getDefaultChart(entityType: EntityType): Chart | undefined {\n\treturn entityType.annotations.UI?.Chart;\n}\nexport function getDefaultSelectionVariant(entityType: EntityType): SelectionVariant | undefined {\n\treturn entityType.annotations?.UI?.SelectionVariant;\n}\nexport function getSelectionVariant(\n\tentityType: EntityType,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): SelectionVariantType | undefined {\n\tconst annotationPath = converterContext.getManifestWrapper().getDefaultTemplateAnnotationPath();\n\tconst selectionPresentationVariant = getSelectionPresentationVariant(entityType, annotationPath, converterContext);\n\tlet selectionVariant;\n\tif (selectionPresentationVariant) {\n\t\tselectionVariant = selectionPresentationVariant.SelectionVariant as SelectionVariant;\n\t\tif (selectionVariant) {\n\t\t\treturn selectionVariant;\n\t\t}\n\t} else {\n\t\tselectionVariant = getDefaultSelectionVariant(entityType);\n\t\treturn selectionVariant;\n\t}\n}\n\n/**\n * Gets the configuration of the visualizations related to an annotation.\n * @param resolvedTarget The annotation\n * @param visualizationPath The path to the visualization annotation\n * @param isMacroOrMultipleView True if it's for a building block or a multiple views configuration\n * @returns The visualizations with their configuration\n */\nfunction getVisualizationsAndPaths(\n\tresolvedTarget: ResolvedAnnotationContext<DataVisualizationAnnotations>,\n\tvisualizationPath: string,\n\tisMacroOrMultipleView?: boolean\n): VisualizationAndPath[] {\n\tconst { annotation, converterContext } = resolvedTarget;\n\tconst term = annotation?.term;\n\tlet visualizationAnnotations: VisualizationAndPath[] = [];\n\tif (term) {\n\t\tswitch (term) {\n\t\t\tcase UIAnnotationTerms.LineItem:\n\t\t\tcase UIAnnotationTerms.Chart:\n\t\t\t\tvisualizationAnnotations.push({\n\t\t\t\t\tvisualization: annotation as ActualVisualizationAnnotations,\n\t\t\t\t\tannotationPath: visualizationPath,\n\t\t\t\t\tconverterContext: converterContext\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTerms.PresentationVariant:\n\t\t\tcase UIAnnotationTerms.SelectionPresentationVariant:\n\t\t\t\tvisualizationAnnotations = visualizationAnnotations.concat(\n\t\t\t\t\tgetVisualizationsFromAnnotation(annotation, visualizationPath, converterContext, isMacroOrMultipleView)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn visualizationAnnotations;\n}\n\n/**\n * Gets the presentation of the visualizations related to a visualizationPath.\n * @param visualizationPath The path to the visualization annotation\n * @param inConverterContext The converted context\n * @returns The presentation variant\n */\nfunction getDataVisualizationPresentation(\n\tvisualizationPath: string,\n\tinConverterContext: ConverterContext<PageContextPathTarget>\n): PresentationVariantType | undefined {\n\tif (visualizationPath === \"\") {\n\t\treturn undefined;\n\t}\n\n\tconst annotation = inConverterContext.getEntityTypeAnnotation(visualizationPath).annotation as DataVisualizationAnnotations;\n\tif (isAnnotationOfType<SelectionPresentationVariant>(annotation, UIAnnotationTypes.SelectionPresentationVariantType)) {\n\t\treturn annotation.PresentationVariant;\n\t} else if (annotation.term === UIAnnotationTerms.PresentationVariant) {\n\t\treturn annotation;\n\t}\n\treturn undefined;\n}\n\n/**\n * Gets the presentation of the visualizations related to a visualizationPath.\n * @param visualizationPath The path to the visualization annotation\n * @param inConverterContext The converted context\n * @param params\n * @param params.isCondensedTableLayoutCompliant True if it's for a condensed layout\n * @param params.viewConfiguration The view configuration\n * @param params.doNotCheckApplySupported True if the check to \"ApplySupported\" is skipped\n * @param params.associatedPresentationVariantPath The path of the presentation to apply\n * @param params.isMacroOrMultipleView True if it's for a building block or a multiple views configuration\n * @param params.shouldCreateTemplateChartVisualization True if we need to create chart visualization for templating\n * @returns The definition of the data visualizations\n */\nexport function getDataVisualizationConfiguration(\n\tvisualizationPath: string,\n\tinConverterContext: ConverterContext<PageContextPathTarget>,\n\tparams: Partial<{\n\t\tisCondensedTableLayoutCompliant: boolean;\n\t\tdoNotCheckApplySupported: boolean;\n\t\tassociatedSelectionVariant: SelectionVariantType;\n\t\tisMacroOrMultipleView: boolean;\n\t\tshouldCreateTemplateChartVisualization: boolean;\n\t}>\n): DataVisualizationDefinition {\n\tconst {\n\t\tisCondensedTableLayoutCompliant,\n\t\tdoNotCheckApplySupported,\n\t\tassociatedSelectionVariant,\n\t\tisMacroOrMultipleView,\n\t\tshouldCreateTemplateChartVisualization\n\t} = params;\n\tconst resolvedTarget =\n\t\tvisualizationPath !== \"\"\n\t\t\t? inConverterContext.getEntityTypeAnnotation<DataVisualizationAnnotations>(visualizationPath)\n\t\t\t: { annotation: undefined, converterContext: inConverterContext };\n\tconst resolvedVisualization = resolvedTarget.annotation as DataVisualizationAnnotations;\n\n\tlet chartVisualization, tableVisualization;\n\tconst term = resolvedVisualization?.term;\n\tfor (const visualizationAndPath of getVisualizationsAndPaths(resolvedTarget, visualizationPath, isMacroOrMultipleView)) {\n\t\tconst { visualization, annotationPath, converterContext, selectionVariant } = visualizationAndPath;\n\t\tswitch (visualization.term) {\n\t\t\tcase UIAnnotationTerms.Chart:\n\t\t\t\tchartVisualization = shouldCreateTemplateChartVisualization\n\t\t\t\t\t? createChartVisualizationForTemplating(converterContext, annotationPath, visualization)\n\t\t\t\t\t: createChartVisualization(\n\t\t\t\t\t\t\tvisualization,\n\t\t\t\t\t\t\tannotationPath,\n\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\tdoNotCheckApplySupported,\n\t\t\t\t\t\t\tisAnnotationOfType<SelectionPresentationVariant>(\n\t\t\t\t\t\t\t\tresolvedVisualization,\n\t\t\t\t\t\t\t\tUIAnnotationTypes.SelectionPresentationVariantType\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t? visualizationPath\n\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t  );\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTerms.LineItem:\n\t\t\tdefault:\n\t\t\t\ttableVisualization = Table.createTableVisualization(visualization, annotationPath, converterContext, {\n\t\t\t\t\tpresentationVariantAnnotation: getDataVisualizationPresentation(visualizationPath, inConverterContext),\n\t\t\t\t\tselectionVariantAnnotation: associatedSelectionVariant ?? selectionVariant,\n\t\t\t\t\tisCondensedTableLayoutCompliant\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tinConverterContext = resolvedTarget.converterContext;\n\tconst isALP = isAlpAnnotation(inConverterContext);\n\tif (!term || (isALP && tableVisualization === undefined)) {\n\t\ttableVisualization = Table.createDefaultTableVisualization(inConverterContext, isMacroOrMultipleView !== true);\n\t\tinConverterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.MISSING_LINEITEM);\n\t}\n\tif (isALP && chartVisualization === undefined) {\n\t\tchartVisualization = createBlankChartVisualization(inConverterContext);\n\t\tinConverterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.MISSING_CHART);\n\t}\n\n\treturn {\n\t\tvisualizations: [chartVisualization, tableVisualization].filter(isVisualization),\n\t\tannotationPath: inConverterContext.getEntitySetBasedAnnotationPath(resolvedVisualization?.fullyQualifiedName ?? \"/\"),\n\t\tassociatedSelectionVariantPath: params.associatedSelectionVariant\n\t\t\t? inConverterContext.getEntitySetBasedAnnotationPath(params.associatedSelectionVariant.fullyQualifiedName)\n\t\t\t: undefined\n\t};\n}\n\nfunction isVisualization(visualization: unknown): visualization is ChartVisualization | TableVisualization {\n\treturn [VisualizationType.Table, VisualizationType.Chart].includes((visualization as ChartVisualization | TableVisualization)?.type);\n}\n\nexport function validatePresentationMetaPath(metaPath: string, objectTerm: string): void {\n\t// perform validation only if annotation set (to avoid backwards compatibility issues for test without annotations)\n\tif (metaPath.includes(objectTerm.slice(0, objectTerm.lastIndexOf(\".\")))) {\n\t\tconst allowedTerms = [UIAnnotationTerms.PresentationVariant, UIAnnotationTerms.SelectionPresentationVariant, objectTerm];\n\t\tif (\n\t\t\t!allowedTerms.some((term) => {\n\t\t\t\treturn metaPath.search(new RegExp(`${term}(#|/|$)`)) > -1;\n\t\t\t})\n\t\t) {\n\t\t\tthrow new Error(`Annotation Path ${metaPath} mentioned in the manifest is not valid for ${objectTerm}`);\n\t\t}\n\t}\n}\n/**\n * Returns the context of the UI controls (either a UI.LineItem, or a UI.Chart).\n * @param presentationContext Object of the presentation context (either a presentation variant, or a UI.LineItem, or a UI.Chart)\n * @param controlPath Control path\n * @returns The context of the control (either a UI.LineItem, or a UI.Chart)\n */\nexport function getUiControl(presentationContext: Context, controlPath: string): Context {\n\tvalidatePresentationMetaPath(presentationContext.getPath(), controlPath);\n\tconst presentation = MetaModelConverter.convertMetaModelContext(presentationContext),\n\t\tmodel = presentationContext.getModel() as ODataMetaModel;\n\tif (presentation) {\n\t\tif (\n\t\t\tisAnnotationOfType<SelectionPresentationVariant>(presentation, UIAnnotationTypes.SelectionPresentationVariantType) ||\n\t\t\tisAnnotationOfType<PresentationVariant>(presentation, UIAnnotationTypes.PresentationVariantType)\n\t\t) {\n\t\t\tlet visualizations;\n\t\t\tif (\n\t\t\t\tisAnnotationOfType<SelectionPresentationVariant>(presentation, UIAnnotationTypes.SelectionPresentationVariantType) &&\n\t\t\t\tpresentation.PresentationVariant\n\t\t\t) {\n\t\t\t\tvisualizations = presentation.PresentationVariant.Visualizations;\n\t\t\t} else if (isAnnotationOfType<PresentationVariant>(presentation, UIAnnotationTypes.PresentationVariantType)) {\n\t\t\t\tvisualizations = presentation.Visualizations;\n\t\t\t}\n\t\t\tif (Array.isArray(visualizations)) {\n\t\t\t\tfor (const visualization of visualizations) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tvisualization.type == \"AnnotationPath\" &&\n\t\t\t\t\t\tvisualization.value.includes(controlPath) &&\n\t\t\t\t\t\t// check if object exists for PresentationVariant visualization\n\t\t\t\t\t\t!!model.getMetaContext(presentationContext.getPath().split(\"@\")[0] + visualization.value).getObject()\n\t\t\t\t\t) {\n\t\t\t\t\t\tcontrolPath = visualization.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn presentationContext;\n\t\t}\n\t}\n\treturn model.getMetaContext(presentationContext.getPath().split(\"@\")[0] + controlPath);\n}\nexport const annotationExistsInPresentationVariant = function (\n\tpresentationVariantAnnotation: PresentationVariantType,\n\tannotationTerm: PresentationVisualizationAnnotations\n): boolean {\n\treturn presentationVariantAnnotation.Visualizations?.some((visualization) => visualization.value.includes(annotationTerm)) ?? false;\n};\nconst prepareDefaultVisualization = function (\n\tvisualizationType: PresentationVisualizationAnnotations,\n\tbaseVisualizationPath: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): VisualizationAndPath | undefined {\n\tconst entityType = converterContext.getEntityType();\n\tconst defaultAnnotation =\n\t\tvisualizationType === UIAnnotationTerms.LineItem ? getDefaultLineItem(entityType) : getDefaultChart(entityType);\n\tif (defaultAnnotation) {\n\t\treturn {\n\t\t\tvisualization: defaultAnnotation,\n\t\t\tannotationPath: `${baseVisualizationPath}${converterContext.getRelativeAnnotationPath(\n\t\t\t\tdefaultAnnotation.fullyQualifiedName,\n\t\t\t\tentityType\n\t\t\t)}`,\n\t\t\tconverterContext: converterContext\n\t\t};\n\t}\n\treturn undefined;\n};\nexport const isAlpAnnotation = function (converterContext: ConverterContext<PageContextPathTarget>): boolean {\n\treturn (\n\t\tconverterContext.getManifestWrapper().hasMultipleVisualizations() ||\n\t\tconverterContext.getTemplateType() === TemplateType.AnalyticalListPage\n\t);\n};\n"],"mappings":";;;;ieAyCO,MAAMA,EAAkC,SAC9CC,EACAC,EACAC,EACAC,GAEA,MAAMC,aAAEA,EAAYC,iBAAEA,GAAqBC,EAC1CN,EAAU,sDAGR,CAAEI,aAAcJ,EAAYK,iBAAkBE,WAC9C,CAAEH,aAAcJ,EAAWQ,oBAAqBH,iBAAkBL,EAAWS,kBAChF,MAAMC,EAAmD,GACzD,MAAMC,EAAQC,EAAgBV,GAC9B,MAAMW,GACJF,KACCT,EAAiBY,oBAAsBC,EAAaC,aAAeb,GAClEE,EACAE,UACJ,MAAMU,EAAwBhB,EAAkBiB,MAAM,KAAK,GAC3D,IAAKf,IAA0B,MAAQQ,KAAWQ,EAAwBf,EAAcO,GAAQ,CAC/F,IAAKS,EAAsChB,EAAY,uCAA+B,CACrF,MAAMiB,EAA4BC,EAA2B,sCAE5DL,EACAf,GAED,GAAImB,EAA2B,CAC9BX,EAAyBa,KAAK,IAAKF,KAA8B,CAAEhB,iBAAkBQ,IACtF,CACD,CACA,IAAKO,EAAsChB,EAAY,oCAA4B,CAClF,MAAMoB,EAAyBF,EAA2B,mCAA0BL,EAAuBf,GAC3G,GAAIsB,EAAwB,CAC3Bd,EAAyBa,KAAKC,EAC/B,CACD,CACD,CACA,MAAMC,EAAiBrB,EAAasB,eACpC,MAAMC,EAAqB,SAAUC,GACpC,MAAMC,EAAWJ,GAAgBK,KAAMC,GAAQA,EAAIC,UAAYzB,WAAaqB,EAAaK,SAASF,EAAIC,QAAQE,OAC9G,GAAIL,EAAU,CACbnB,EAAyBa,KAAK,CAC7BY,cAAeN,EAASG,QACxBI,eAAgB,GAAGnB,IAAwBY,EAASQ,QACpDnC,iBAAkBA,EAClBG,iBAAkBQ,GAEpB,CACD,EACA,GAAIF,EAAO,CAEVgB,EAAmB,yCACnBA,EAAmB,qCACpB,KAAO,CAENA,EAAmB,2EACpB,CACA,OAAOjB,CACR,EAAE4B,EAAAvC,kCACK,SAASwC,EACfC,EACAJ,EACAlC,GAEA,GAAIkC,EAAgB,CACnB,MAAMK,EAAiBvC,EAAiBwC,wBAAwBN,GAChE,MAAMO,EAA+BF,EAAezC,WACpD,GAAI2C,EAA8B,CACjC,GAAIA,EAA6BT,OAAI,0DAAqD,CACzF,OAAOS,CACR,CACD,KAAO,CACN,MAAM,IAAIC,MAAM,2GACjB,CACD,KAAO,CACN,OAAOJ,EAAWK,aAAaC,IAAIC,4BACpC,CACD,CAACT,EAAAC,kCACM,SAASS,EACfL,EACAhC,GAEA,MAAMsC,EAAsBN,GAAgCA,EAA6BnC,oBACzF,GAAIyC,EAAqB,CACxB,OAAO9B,EAAwB8B,EAAqBtC,EACrD,KAAO,CACN,MAAM,IAAIiC,MAAM,4DACjB,CACD,CAACN,EAAAU,mCACM,SAAS7B,EAAwB8B,GAAsE,IAAxBtC,EAAKuC,UAAAC,OAAA,GAAAD,UAAA,KAAA3C,UAAA2C,UAAA,GAAG,MAC7F,IAAIE,EAAW,MACdC,EAAW,MACZ,GAAI1C,EAAO,CACV,GAAIsC,GAAqBvB,eAAgB,CACxC,MAAMD,EAAiBwB,EAAoBvB,eAC3CD,EAAe6B,QAASnB,IACvB,GAAIA,EAAcH,SAASE,OAAI,sCAAiC,CAC/DkB,EAAW,IACZ,CACA,GAAIjB,EAAcH,SAASE,OAAI,mCAA8B,CAC5DmB,EAAW,IACZ,GAEF,CACA,OAAOA,GAAYD,CACpB,KAAO,CACN,OACCH,GAAqBvB,kBACnBuB,EAAoBvB,eAAeI,KAAMK,GAEzCA,EAAcH,SAASE,OAAI,uCAAmCC,EAAcH,SAASE,OAAI,mCAI7F,CACD,CAACI,EAAAnB,0BACM,SAASoC,EAAmBf,GAClC,OAAOA,EAAWK,YAAYC,IAAIU,QACnC,CAAClB,EAAAiB,qBACM,SAASE,EAAgBjB,GAC/B,OAAOA,EAAWK,YAAYC,IAAIY,KACnC,CAACpB,EAAAmB,kBACM,SAASE,EAA2BnB,GAC1C,OAAOA,EAAWK,aAAaC,IAAIrC,gBACpC,CAAC6B,EAAAqB,6BACM,SAASC,EACfpB,EACAtC,GAEA,MAAMkC,EAAiBlC,EAAiB2D,qBAAqBC,mCAC7D,MAAMnB,EAA+BJ,EAAgCC,EAAYJ,EAAgBlC,GACjG,IAAIG,EACJ,GAAIsC,EAA8B,CACjCtC,EAAmBsC,EAA6BlC,iBAChD,GAAIJ,EAAkB,CACrB,OAAOA,CACR,CACD,KAAO,CACNA,EAAmBsD,EAA2BnB,GAC9C,OAAOnC,CACR,CACD,CAEAiC,EAAAsB,sBAOA,SAASG,EACRtB,EACAxC,EACAE,GAEA,MAAMH,WAAEA,EAAUE,iBAAEA,GAAqBuC,EACzC,MAAMP,EAAOlC,GAAYkC,KACzB,IAAIxB,EAAmD,GACvD,GAAIwB,EAAM,CACT,OAAQA,GACP,0CACA,uCACCxB,EAAyBa,KAAK,CAC7BY,cAAenC,EACfoC,eAAgBnC,EAChBC,iBAAkBA,IAEnB,MACD,qDACA,8DACCQ,EAA2BA,EAAyBsD,OACnDjE,EAAgCC,EAAYC,EAAmBC,EAAkBC,IAElF,MACD,QACC,MAEH,CACA,OAAOO,CACR,CAQA,SAASuD,EACRhE,EACAiE,GAEA,GAAIjE,IAAsB,GAAI,CAC7B,OAAOM,SACR,CAEA,MAAMP,EAAakE,EAAmBxB,wBAAwBzC,GAAmBD,WACjF,GAAIM,EAAiDN,EAAU,+DAAuD,CACrH,OAAOA,EAAWQ,mBACnB,MAAO,GAAIR,EAAWkC,OAAI,iDAA4C,CACrE,OAAOlC,CACR,CACA,OAAOO,SACR,CAeO,SAAS4D,EACflE,EACAiE,EACAE,GAQA,MAAMC,gCACLA,EAA+BC,yBAC/BA,EAAwBC,2BACxBA,EAA0BpE,sBAC1BA,EAAqBqE,uCACrBA,GACGJ,EACJ,MAAM3B,EACLxC,IAAsB,GACnBiE,EAAmBxB,wBAAsDzC,GACzE,CAAED,WAAYO,UAAWL,iBAAkBgE,GAC/C,MAAMO,EAAwBhC,EAAezC,WAE7C,IAAI0E,EAAoBC,EACxB,MAAMzC,EAAOuC,GAAuBvC,KACpC,IAAK,MAAM0C,KAAwBb,EAA0BtB,EAAgBxC,EAAmBE,GAAwB,CACvH,MAAMgC,cAAEA,EAAaC,eAAEA,EAAclC,iBAAEA,EAAgBG,iBAAEA,GAAqBuE,EAC9E,OAAQzC,EAAcD,MACrB,uCACCwC,EAAqBF,EAClBK,EAAsC3E,EAAkBkC,EAAgBD,GACxE2C,EACA3C,EACAC,EACAlC,EACAoE,EACAhE,EACCmE,EAAqB,+DAGnBxE,EACAM,WAEN,MACD,0CACA,QACCoE,EAAqBI,EAAMC,yBAAyB7C,EAAeC,EAAgBlC,EAAkB,CACpG+E,8BAA+BhB,EAAiChE,EAAmBiE,GACnFgB,2BAA4BX,GAA8BlE,EAC1DgE,oCAED,MAEH,CAEAH,EAAqBzB,EAAevC,iBACpC,MAAMS,EAAQC,EAAgBsD,GAC9B,IAAKhC,GAASvB,GAASgE,IAAuBpE,UAAY,CACzDoE,EAAqBI,EAAMI,gCAAgCjB,EAAoB/D,IAA0B,MACzG+D,EAAmBkB,iBAAiBC,SAASC,EAAcC,WAAYC,EAAcC,OAAQC,EAAUC,iBACxG,CACA,GAAIhF,GAAS+D,IAAuBnE,UAAW,CAC9CmE,EAAqBkB,EAA8B1B,GACnDA,EAAmBkB,iBAAiBC,SAASC,EAAcC,WAAYC,EAAcC,OAAQC,EAAUG,cACxG,CAEA,MAAO,CACNpE,eAAgB,CAACiD,EAAoBC,GAAoBmB,OAAOC,GAChE3D,eAAgB8B,EAAmB8B,gCAAgCvB,GAAuBwB,oBAAsB,KAChHC,+BAAgC9B,EAAOG,2BACpCL,EAAmB8B,gCAAgC5B,EAAOG,2BAA2B0B,oBACrF1F,UAEL,CAAC+B,EAAA6B,oCAED,SAAS4B,EAAgB5D,GACxB,MAAO,CAACgE,EAAkBpB,MAAOoB,EAAkBzC,OAAOzB,SAAUE,GAA2DiE,KAChI,CAEO,SAASC,EAA6BC,EAAkBC,GAE9D,GAAID,EAASrE,SAASsE,EAAWC,MAAM,EAAGD,EAAWE,YAAY,OAAQ,CACxE,MAAM7E,EAAe,4GAAwF2E,GAC7G,IACE3E,EAAa8E,KAAMxE,GACZoE,EAASK,OAAO,IAAIC,OAAO,GAAG1E,cAAmB,GAExD,CACD,MAAM,IAAIU,MAAM,mBAAmB0D,gDAAuDC,IAC3F,CACD,CACD,CACAjE,EAAA+D,+BAMO,SAASQ,EAAaC,EAA8BC,GAC1DV,EAA6BS,EAAoBE,UAAWD,GAC5D,MAAM3G,EAAe6G,EAAmBC,wBAAwBJ,GAC/DK,EAAQL,EAAoBM,WAC7B,GAAIhH,EAAc,CACjB,GACCE,EAAiDF,EAAY,gEAC7DE,EAAwCF,EAAY,sDACnD,CACD,IAAIqB,EACJ,GACCnB,EAAiDF,EAAY,gEAC7DA,EAAaI,oBACZ,CACDiB,EAAiBrB,EAAaI,oBAAoBkB,cACnD,MAAO,GAAIpB,EAAwCF,EAAY,sDAA8C,CAC5GqB,EAAiBrB,EAAasB,cAC/B,CACA,GAAI2F,MAAMC,QAAQ7F,GAAiB,CAClC,IAAK,MAAMU,KAAiBV,EAAgB,CAC3C,GACCU,EAAciE,MAAQ,kBACtBjE,EAAcE,MAAMJ,SAAS8E,MAE3BI,EAAMI,eAAeT,EAAoBE,UAAU9F,MAAM,KAAK,GAAKiB,EAAcE,OAAOmF,YACzF,CACDT,EAAc5E,EAAcE,MAC5B,KACD,CACD,CACD,CACD,KAAO,CACN,OAAOyE,CACR,CACD,CACA,OAAOK,EAAMI,eAAeT,EAAoBE,UAAU9F,MAAM,KAAK,GAAK6F,EAC3E,CAACzE,EAAAuE,eACM,MAAMzF,EAAwC,SACpD6D,EACAwC,GAEA,OAAOxC,EAA8BvD,gBAAgBgF,KAAMvE,GAAkBA,EAAcE,MAAMJ,SAASwF,KAAoB,KAC/H,EAAEnF,EAAAlB,wCACF,MAAME,EAA8B,SACnCoG,EACAzG,EACAf,GAEA,MAAMsC,EAAatC,EAAiByH,gBACpC,MAAMC,EACLF,IAAiB,sCAAkCnE,EAAmBf,GAAciB,EAAgBjB,GACrG,GAAIoF,EAAmB,CACtB,MAAO,CACNzF,cAAeyF,EACfxF,eAAgB,GAAGnB,IAAwBf,EAAiB2H,0BAC3DD,EAAkB3B,mBAClBzD,KAEDtC,iBAAkBA,EAEpB,CACA,OAAOK,SACR,EACO,MAAMK,EAAkB,SAAUV,GACxC,OACCA,EAAiB2D,qBAAqBiE,6BACtC5H,EAAiBY,oBAAsBC,EAAagH,kBAEtD,EAAEzF,EAAA1B,kBAAA,OAAA0B,CAAA","ignoreList":[]}