{"version":3,"file":"Avatar.js","names":["isNaturalPersonExpression","converterContext","getExpressionFromAnnotation","getEntityType","annotations","Common","IsNaturalPerson","compileAvatarShape","expression","compileExpression","ifElse","AvatarShape","Circle","Square","compileFallBackIcon","getFallBackIcon","headerInfo","UI","HeaderInfo","ImageUrl","TypeImageUrl","undefined","getSource","getAvatar","oSource","Initials","src","initials","fallbackIcon","displayShape","_exports"],"sources":["./Avatar.ts"],"sourcesContent":["import type { CompiledBindingToolkitExpression, ExpressionOrPrimitive } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation, ifElse } from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport AvatarShape from \"sap/m/AvatarShape\";\nimport type ConverterContext from \"../../ConverterContext\";\n\nexport type Avatar = {\n\tsrc?: CompiledBindingToolkitExpression;\n\tinitials: CompiledBindingToolkitExpression;\n\tfallbackIcon?: CompiledBindingToolkitExpression;\n\tdisplayShape: CompiledBindingToolkitExpression;\n};\n\nconst isNaturalPersonExpression = (converterContext: ConverterContext<PageContextPathTarget>): ExpressionOrPrimitive<boolean> => {\n\treturn getExpressionFromAnnotation(converterContext.getEntityType().annotations.Common?.IsNaturalPerson);\n};\n\nconst compileAvatarShape = (expression: ExpressionOrPrimitive<boolean>): CompiledBindingToolkitExpression => {\n\treturn compileExpression(ifElse(expression, AvatarShape.Circle, AvatarShape.Square));\n};\n\n// The shape of the Avatar depends upon whether the entity instance represents a natural person.\n// This can depend upon a property in the entity. Unlike the shape of an avatar defined in a field, it\n// doesn't make sense to make the image at the object page header dependent upon the property containg\n// the image or imageURL.\nconst compileFallBackIcon = (expression: ExpressionOrPrimitive<boolean>): CompiledBindingToolkitExpression => {\n\treturn compileExpression(ifElse(expression, \"sap-icon://person-placeholder\", \"sap-icon://product\"));\n};\n\nconst getFallBackIcon = (converterContext: ConverterContext<PageContextPathTarget>): CompiledBindingToolkitExpression | undefined => {\n\tconst headerInfo = converterContext.getEntityType().annotations?.UI?.HeaderInfo;\n\tif (!headerInfo || (headerInfo && !headerInfo.ImageUrl && !headerInfo.TypeImageUrl)) {\n\t\treturn undefined;\n\t}\n\tif (headerInfo.ImageUrl && headerInfo.TypeImageUrl) {\n\t\treturn compileExpression(getExpressionFromAnnotation(headerInfo.TypeImageUrl));\n\t}\n\treturn compileFallBackIcon(isNaturalPersonExpression(converterContext));\n};\n\nconst getSource = (converterContext: ConverterContext<PageContextPathTarget>): CompiledBindingToolkitExpression | undefined => {\n\tconst headerInfo = converterContext.getEntityType().annotations?.UI?.HeaderInfo;\n\tif (!headerInfo || !(headerInfo.ImageUrl || headerInfo.TypeImageUrl)) {\n\t\treturn undefined;\n\t}\n\treturn compileExpression(getExpressionFromAnnotation(headerInfo.ImageUrl || headerInfo.TypeImageUrl));\n};\n\nexport const getAvatar = (converterContext: ConverterContext<PageContextPathTarget>): Avatar | undefined => {\n\tconst headerInfo = converterContext.getEntityType().annotations?.UI?.HeaderInfo;\n\tconst oSource = headerInfo && (headerInfo.ImageUrl || headerInfo.TypeImageUrl || headerInfo.Initials);\n\tif (!oSource) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\tsrc: getSource(converterContext),\n\t\tinitials: compileExpression(getExpressionFromAnnotation(headerInfo?.Initials, [], \"\")),\n\t\tfallbackIcon: getFallBackIcon(converterContext),\n\t\tdisplayShape: compileAvatarShape(isNaturalPersonExpression(converterContext))\n\t};\n};\n"],"mappings":";;;;kLAaA,MAAMA,EAA6BC,GAC3BC,EAA4BD,EAAiBE,gBAAgBC,YAAYC,QAAQC,iBAGzF,MAAMC,EAAsBC,GACpBC,EAAkBC,EAAOF,EAAYG,EAAYC,OAAQD,EAAYE,SAO7E,MAAMC,EAAuBN,GACrBC,EAAkBC,EAAOF,EAAY,gCAAiC,uBAG9E,MAAMO,EAAmBd,IACxB,MAAMe,EAAaf,EAAiBE,gBAAgBC,aAAaa,IAAIC,WACrE,IAAKF,GAAeA,IAAeA,EAAWG,WAAaH,EAAWI,aAAe,CACpF,OAAOC,SACR,CACA,GAAIL,EAAWG,UAAYH,EAAWI,aAAc,CACnD,OAAOX,EAAkBP,EAA4Bc,EAAWI,cACjE,CACA,OAAON,EAAoBd,EAA0BC,KAGtD,MAAMqB,EAAarB,IAClB,MAAMe,EAAaf,EAAiBE,gBAAgBC,aAAaa,IAAIC,WACrE,IAAKF,KAAgBA,EAAWG,UAAYH,EAAWI,cAAe,CACrE,OAAOC,SACR,CACA,OAAOZ,EAAkBP,EAA4Bc,EAAWG,UAAYH,EAAWI,gBAGjF,MAAMG,EAAatB,IACzB,MAAMe,EAAaf,EAAiBE,gBAAgBC,aAAaa,IAAIC,WACrE,MAAMM,EAAUR,IAAeA,EAAWG,UAAYH,EAAWI,cAAgBJ,EAAWS,UAC5F,IAAKD,EAAS,CACb,OAAOH,SACR,CACA,MAAO,CACNK,IAAKJ,EAAUrB,GACf0B,SAAUlB,EAAkBP,EAA4Bc,GAAYS,SAAU,GAAI,KAClFG,aAAcb,EAAgBd,GAC9B4B,aAActB,EAAmBP,EAA0BC,MAE3D6B,EAAAP,YAAA,OAAAO,CAAA","ignoreList":[]}