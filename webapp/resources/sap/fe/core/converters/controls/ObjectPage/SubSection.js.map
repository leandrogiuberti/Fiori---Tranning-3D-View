{"version":3,"file":"SubSection.js","names":["SubSectionType","_exports","visualizationTerms","createSubSections","facetCollection","converterContext","isHeaderSection","useSingleTextAreaFieldAsNotes","facetsToCreate","reduce","facetDefinition","$Type","push","Facets","find","facetType","splice","length","map","facet","createSubSection","createCustomHeaderFacetSubSections","customHeaderFacets","getHeaderFacetsFromManifest","getManifestWrapper","getHeaderFacets","aCustomHeaderFacets","Object","keys","forEach","key","customHeaderFacet","templateEdit","createCustomHeaderFacetSubSection","subSectionID","getCustomSubSectionID","subSection","id","title","type","XMLFragment","template","visible","level","sideContent","undefined","stashed","flexSettings","actions","objectPageLazyLoaderEnabled","getSubSectionKey","fallback","ID","toString","Label","addFormMenuActions","reverseIndex","startsWith","hiddenActions","getFormHiddenActions","actionOverwriteConfig","enabled","OverrideType","overwrite","command","position","menu","priority","group","formActions","getFormActions","manifestActions","getActionsFromManifest","annotationMenuActionItems","getAnnotationMenuActionItems","matchingManifestActions","getMatchingManifestAction","overwrittenMenuActionItems","insertCustomElements","manifestAction","formAllActions","prepareMenuActions","removeDuplicateActions","getVisibilityEnablementMenuActions","ActionUtilities","ensurePrimaryActionNeverOverflows","action","ActionType","Menu","defaultAction","Default","commandActions","getFacetActions","filter","subFacetDefinition","isReferenceFacet","actionReducer","referenceFacet","createFormActionReducer","getButtonType","emphasized","buttonTypeCondition","equal","getExpressionFromAnnotation","compileExpression","ifElse","ButtonType","Ghost","Transparent","hasSingleContent","getSubSectionID","hiddenAnnotation","annotations","UI","Hidden","isVisibleExpression","not","path","singletonPathVisitor","getConvertedTypes","isVisibilityDynamic","isConstant","isPathAnnotationExpression","Unknown","annotationPath","getEntitySetBasedAnnotationPath","fullyQualifiedName","getEnableLazyLoading","getStashedSettingsForHeaderFacet","designtime","getDesignTimeMetadataSettingsForHeaderFacet","unsupportedText","facets","visualizationFacets","index","_ref","Target","$target","includes","term","nonVisualizationFacets","visualization","visualizationContent","formContent","mixedContent","Log","warning","fakeFormFacet","_ref2","mixedSubSection","Mixed","content","facetActions","formCollectionSubSection","Form","formDefinition","createFormDefinition","facetName","value","presentation","getDataVisualizationConfiguration","isCondensedTableLayoutCompliant","getCondensedTableLayoutCompliance","doNotCheckApplySupported","shouldCreateTemplateChartVisualization","subSectionTitle","controlTitle","visualizations","annotation","isPartOfPreview","PartOfPreview","valueOf","showSubSectionTitle","getShowSubSectionTitle","dataVisualizationTitleVisible","and","dataVisualizationSubSection","DataVisualization","formElementSubSection","Notes","unsupportedSubSection","text","or","notEqual","resolveBindingString","referenceTarget","targetValue","dataFieldCollection","navigationPropertyPath","split","lastIndexOf","substring","Data","getManifestControlConfiguration","qualifier","dataField","RequiresContext","getDiagnostics","addIssue","IssueCategory","Annotation","IssueSeverity","Low","IssueType","MALFORMED_DATAFIELD_FOR_IBN","REQUIRESCONTEXT","Inline","INLINE","Determining","DETERMINING","mNavigationParameters","Mapping","semanticObjectMapping","getSemanticObjectMapping","DataFieldForIntentBasedNavigation","getFormID","KeyHelper","generateKeyFromDataField","NavigationAvailable","buttonType","Emphasized","press","fn","SemanticObject","Action","customData","semanticObject","formManifestActionsConfiguration","getDataFieldAnnotationAction","isAIOperation","isMenuAIOperation","Actions","formManifestMenuActionsConfiguration","DataFieldForAction","getEnabledForAnnotationAction","ActionTarget","binding","requiresDialog","isActionWithDialog","isActionAIOperation","contexts","pathInModel","invocationGrouping","InvocationGrouping","label","model","isNavigable","isActionNavigable","ref","isDialog","actionDefinition","bCritical","Common","IsActionCritical","parameters","createCustomSubSections","manifestSubSections","subSections","subSectionKey","createCustomSubSection","manifestSubSection","getSideContentID","equalSplit","placement","Placement","After","isVisible","isDynamicExpression","indexOf","values","previousAction","currentAction","subSectionDefinition","enableLazyLoading","componentName","settings","applyState","retrieveState","name","embeddedComponent","EmbeddedComponent","JSON","stringify","Placeholder","currentFacet","facetsToCreateInSection","manifestWrapper","useIconTabBar","hasNoOtherVisibleTableInTargets","entityType","getEntityType","every","subFacet","refFacet","subCollectionFacet","subRefFacet"],"sources":["./SubSection.ts"],"sourcesContent":["import type { Action } from \"@sap-ux/vocabularies-types/Edm\";\nimport { CommunicationAnnotationTerms } from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport type {\n\tCollectionFacet,\n\tCollectionFacetTypes,\n\tDataFieldAbstractTypes,\n\tDataFieldForActionTypes,\n\tEmphasized,\n\tFacetTypes,\n\tFieldGroup,\n\tOperationGroupingType,\n\tReferenceFacetTypes\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tequal,\n\tfn,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tisConstant,\n\tnot,\n\tnotEqual,\n\tor,\n\tpathInModel,\n\tref,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport type { NavigationParameters } from \"sap/fe/core/controllerextensions/InternalIntentBasedNavigation\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type {\n\tAnnotationAction,\n\tBaseAction,\n\tCombinedAction,\n\tCustomAction,\n\tOverrideTypeAction\n} from \"sap/fe/core/converters/controls/Common/Action\";\nimport {\n\tButtonType,\n\tgetActionsFromManifest,\n\tgetAnnotationMenuActionItems,\n\tgetEnabledForAnnotationAction,\n\tgetMatchingManifestAction,\n\tgetSemanticObjectMapping,\n\tgetVisibilityEnablementMenuActions,\n\tisActionAIOperation,\n\tisActionNavigable,\n\tisMenuAIOperation,\n\tprepareMenuActions,\n\tremoveDuplicateActions\n} from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { ChartVisualization } from \"sap/fe/core/converters/controls/Common/Chart\";\nimport type { TableVisualization } from \"sap/fe/core/converters/controls/Common/Table\";\nimport type { CustomObjectPageHeaderFacet, FlexSettings } from \"sap/fe/core/converters/controls/ObjectPage/HeaderFacet\";\nimport {\n\tgetDesignTimeMetadataSettingsForHeaderFacet,\n\tgetHeaderFacetsFromManifest,\n\tgetStashedSettingsForHeaderFacet\n} from \"sap/fe/core/converters/controls/ObjectPage/HeaderFacet\";\nimport { IssueCategory, IssueSeverity, IssueType } from \"sap/fe/core/converters/helpers/IssueManager\";\nimport { KeyHelper } from \"sap/fe/core/converters/helpers/Key\";\nimport ActionUtilities from \"sap/fe/core/helpers/ActionUtilities\";\nimport { singletonPathVisitor } from \"sap/fe/core/helpers/BindingHelper\";\nimport { isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport type ConverterContext from \"../../ConverterContext\";\nimport type { FormManifestConfiguration, ManifestAction, ManifestSubSection } from \"../../ManifestSettings\";\nimport { ActionType } from \"../../ManifestSettings\";\nimport { isActionWithDialog } from \"../../annotations/DataField\";\nimport type { ConfigurableObject, ConfigurableRecord, CustomElement } from \"../../helpers/ConfigurableObject\";\nimport { OverrideType, Placement, insertCustomElements } from \"../../helpers/ConfigurableObject\";\nimport { getCustomSubSectionID, getFormID, getSideContentID, getSubSectionID } from \"../../helpers/ID\";\nimport { getFormActions, getFormHiddenActions } from \"../../objectPage/FormMenuActions\";\nimport type { DataVisualizationDefinition } from \"../Common/DataVisualization\";\nimport { getDataVisualizationConfiguration } from \"../Common/DataVisualization\";\nimport type { FormDefinition } from \"../Common/Form\";\nimport { createFormDefinition, isReferenceFacet } from \"../Common/Form\";\n\nexport enum SubSectionType {\n\tUnknown = \"Unknown\", // Default Type\n\tForm = \"Form\",\n\tNotes = \"Notes\",\n\tDataVisualization = \"DataVisualization\",\n\tXMLFragment = \"XMLFragment\",\n\tPlaceholder = \"Placeholder\",\n\tMixed = \"Mixed\",\n\tEmbeddedComponent = \"EmbeddedComponent\"\n}\n\nexport type ObjectPageSubSection =\n\t| UnsupportedSubSection\n\t| FormSubSection\n\t| DataVisualizationSubSection\n\t| ContactSubSection\n\t| XMLFragmentSubSection\n\t| PlaceholderFragmentSubSection\n\t| MixedSubSection\n\t| ReuseComponentSubSection\n\t| NoteSubSection;\n\ntype BaseSubSection = {\n\tid: string;\n\tkey: string;\n\ttitle: CompiledBindingToolkitExpression;\n\tannotationPath: string;\n\ttype: SubSectionType;\n\tvisible: CompiledBindingToolkitExpression;\n\tisVisibilityDynamic?: boolean | \"\";\n\tflexSettings?: FlexSettings;\n\tstashed?: boolean;\n\tlevel: number;\n\tcontent?: Array<ObjectPageSubSection>;\n\tsideContent?: SideContentDef;\n\tobjectPageLazyLoaderEnabled: boolean;\n\tclass?: string;\n\tapplyState?: string;\n\tretrieveState?: string;\n};\n\ntype UnsupportedSubSection = BaseSubSection & {\n\ttype: SubSectionType.Unknown;\n\ttext: string;\n};\n\nexport type DataVisualizationSubSection = BaseSubSection & {\n\ttype: SubSectionType.DataVisualization;\n\tpresentation: DataVisualizationDefinition;\n\tisPartOfPreview?: boolean;\n\tshowSubSectionTitle: boolean | CompiledBindingToolkitExpression;\n\tdataVisualizationTitleVisible?: string | boolean;\n\tdataVisualizationOptions?: Record<string, unknown>;\n};\n\ntype ContactSubSection = UnsupportedSubSection;\ntype NoteSubSection = BaseSubSection & {\n\ttype: SubSectionType.Notes;\n};\ntype XMLFragmentSubSection = Omit<BaseSubSection, \"annotationPath\"> & {\n\ttype: SubSectionType.XMLFragment;\n\ttemplate: string;\n\tactions: Record<string, CustomAction>;\n};\n\ntype ReuseComponentSubSection = BaseSubSection & {\n\ttype: SubSectionType.EmbeddedComponent;\n\tcomponentName: string;\n\tsettings: string;\n};\n\ntype PlaceholderFragmentSubSection = Omit<BaseSubSection, \"annotationPath\"> & {\n\ttype: SubSectionType.Placeholder;\n\tactions: Record<string, CustomAction>;\n};\n\nexport type MixedSubSection = BaseSubSection & {\n\ttype: SubSectionType.Mixed;\n\tcontent: Array<ObjectPageSubSection>;\n};\n\nexport type FormSubSection = BaseSubSection & {\n\ttype: SubSectionType.Form;\n\tformDefinition: FormDefinition;\n\tactions: BaseAction[];\n\tcommandActions: Record<string, CustomAction>;\n};\n\nexport type ObjectPageSection = ConfigurableObject & {\n\tid: string;\n\ttitle: CompiledBindingToolkitExpression;\n\tshowTitle?: boolean;\n\tvisible: CompiledBindingToolkitExpression;\n\tsubSections: ObjectPageSubSection[];\n\tuseSingleTextAreaFieldAsNotes?: boolean;\n\tapplyState?: string;\n\tretrieveState?: string;\n};\n\ntype SideContentDef = {\n\ttemplate?: string;\n\tid?: string;\n\tsideContentFallDown?: string;\n\tcontainerQuery?: string;\n\tvisible?: boolean;\n\tequalSplit?: boolean;\n};\n\nexport type CustomObjectPageSection = CustomElement<ObjectPageSection> & {\n\tonSectionLoaded?: string;\n};\n\nexport type CustomObjectPageSubSection = CustomElement<ObjectPageSubSection>;\n\nconst visualizationTerms: string[] = [\n\tUIAnnotationTerms.LineItem,\n\tUIAnnotationTerms.Chart,\n\tUIAnnotationTerms.PresentationVariant,\n\tUIAnnotationTerms.SelectionPresentationVariant,\n\tUIAnnotationTerms.Note\n];\n\n/**\n * Create subsections based on facet definition.\n * @param facetCollection Collection of facets\n * @param converterContext The converter context\n * @param isHeaderSection True if header section is generated in this iteration\n * @param useSingleTextAreaFieldAsNotes If the only field within a form container is a text-area field, the label is hidden\n * @returns The current subsections\n */\nexport function createSubSections(\n\tfacetCollection: FacetTypes[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tisHeaderSection?: boolean,\n\tuseSingleTextAreaFieldAsNotes?: boolean\n): ObjectPageSubSection[] {\n\t// First we determine which sub section we need to create\n\tconst facetsToCreate = facetCollection.reduce((facetsToCreate: FacetTypes[], facetDefinition) => {\n\t\tswitch (facetDefinition.$Type) {\n\t\t\tcase UIAnnotationTypes.ReferenceFacet:\n\t\t\t\tfacetsToCreate.push(facetDefinition);\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.CollectionFacet:\n\t\t\t\t// TODO If the Collection Facet has a child of type Collection Facet we bring them up one level (Form + Table use case) ?\n\t\t\t\t// first case facet Collection is combination of collection and reference facet or not all facets are reference facets.\n\t\t\t\tif (facetDefinition.Facets.find((facetType) => facetType.$Type === UIAnnotationTypes.CollectionFacet)) {\n\t\t\t\t\tfacetsToCreate.splice(facetsToCreate.length, 0, ...facetDefinition.Facets);\n\t\t\t\t} else {\n\t\t\t\t\tfacetsToCreate.push(facetDefinition);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.ReferenceURLFacet:\n\t\t\t\t// Not supported\n\t\t\t\tbreak;\n\t\t}\n\t\treturn facetsToCreate;\n\t}, []);\n\n\t// Then we create the actual subsections\n\treturn facetsToCreate.map((facet) =>\n\t\tcreateSubSection(\n\t\t\tfacet,\n\t\t\tfacetsToCreate,\n\t\t\tconverterContext,\n\t\t\t0,\n\t\t\t!(facet as CollectionFacet)?.Facets?.length,\n\t\t\tisHeaderSection,\n\t\t\tuseSingleTextAreaFieldAsNotes\n\t\t)\n\t);\n}\n\n/**\n * Creates subsections based on the definition of the custom header facet.\n * @param converterContext The converter context\n * @returns The current subsections\n */\nexport function createCustomHeaderFacetSubSections(converterContext: ConverterContext<PageContextPathTarget>): ObjectPageSubSection[] {\n\tconst customHeaderFacets: Record<string, CustomObjectPageHeaderFacet> = getHeaderFacetsFromManifest(\n\t\tconverterContext.getManifestWrapper().getHeaderFacets()\n\t);\n\tconst aCustomHeaderFacets: CustomObjectPageHeaderFacet[] = [];\n\tObject.keys(customHeaderFacets).forEach(function (key) {\n\t\taCustomHeaderFacets.push(customHeaderFacets[key]);\n\t\treturn aCustomHeaderFacets;\n\t});\n\tconst facetsToCreate = aCustomHeaderFacets.reduce((facetsToCreate: CustomObjectPageHeaderFacet[], customHeaderFacet) => {\n\t\tif (customHeaderFacet.templateEdit) {\n\t\t\tfacetsToCreate.push(customHeaderFacet);\n\t\t}\n\t\treturn facetsToCreate;\n\t}, []);\n\n\treturn facetsToCreate.map((customHeaderFacet) => createCustomHeaderFacetSubSection(customHeaderFacet));\n}\n\n/**\n * Creates a subsection based on a custom header facet.\n * @param customHeaderFacet A custom header facet\n * @returns A definition for a subsection\n */\nfunction createCustomHeaderFacetSubSection(customHeaderFacet: CustomObjectPageHeaderFacet): ObjectPageSubSection {\n\tconst subSectionID = getCustomSubSectionID(customHeaderFacet.key);\n\tconst subSection: XMLFragmentSubSection = {\n\t\tid: subSectionID,\n\t\tkey: customHeaderFacet.key,\n\t\ttitle: customHeaderFacet.title,\n\t\ttype: SubSectionType.XMLFragment,\n\t\ttemplate: customHeaderFacet.templateEdit || \"\",\n\t\tvisible: customHeaderFacet.visible,\n\t\tlevel: 1,\n\t\tsideContent: undefined,\n\t\tstashed: customHeaderFacet.stashed,\n\t\tflexSettings: customHeaderFacet.flexSettings,\n\t\tactions: {},\n\t\tobjectPageLazyLoaderEnabled: false\n\t};\n\treturn subSection;\n}\n\nconst getSubSectionKey = (facetDefinition: FacetTypes, fallback: string): string => {\n\treturn facetDefinition.ID?.toString() || facetDefinition.Label?.toString() || fallback;\n};\n/**\n * Adds Form menu action to all form actions, removes duplicate actions and hidden actions.\n * @param actions The actions involved\n * @param facetDefinition The definition for the facet\n * @param converterContext The converter context\n * @returns The form menu actions\n */\nfunction addFormMenuActions(\n\tactions: BaseAction[],\n\tfacetDefinition: FacetTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): CombinedAction {\n\t// annotation actions possibly has CustomActions, which are added at Subsection.ts#createFormActionReducer\n\t// those action are incorrect and cause unwanted results, so we need to carefully remove incorrect ones here\n\tfor (let reverseIndex = actions.length - 1; reverseIndex >= 0; reverseIndex--) {\n\t\tif (\n\t\t\tactions[reverseIndex].id?.startsWith(\"CustomAction::\") &&\n\t\t\t(actions[reverseIndex].key.startsWith(\"DataFieldForAction::\") ||\n\t\t\t\tactions[reverseIndex].key.startsWith(\"DataFieldForIntentBasedNavigation::\"))\n\t\t) {\n\t\t\tactions.splice(reverseIndex, 1);\n\t\t}\n\t}\n\tconst hiddenActions: BaseAction[] = getFormHiddenActions(facetDefinition, converterContext) || [],\n\t\tactionOverwriteConfig: OverrideTypeAction = {\n\t\t\tenabled: OverrideType.overwrite,\n\t\t\tvisible: OverrideType.overwrite,\n\t\t\tcommand: OverrideType.overwrite,\n\t\t\tposition: OverrideType.overwrite,\n\t\t\tmenu: OverrideType.overwrite,\n\t\t\tpriority: OverrideType.overwrite,\n\t\t\tgroup: OverrideType.overwrite\n\t\t},\n\t\tformActions: ConfigurableRecord<ManifestAction> = getFormActions(facetDefinition, converterContext),\n\t\t// 1. Get actions from annotations -> actions are passed to this method\n\t\t// 2. Get actions from manifest\n\t\tmanifestActions = getActionsFromManifest(formActions, converterContext, actions, undefined, undefined, hiddenActions),\n\t\t// 3. Get all annotation menu items\n\t\tannotationMenuActionItems = getAnnotationMenuActionItems(actions),\n\t\t// 4. Find manifest actions which override any annotation menu items\n\t\tmatchingManifestActions = getMatchingManifestAction(annotationMenuActionItems, manifestActions.actions),\n\t\t// 5. Get overridden annotation menu items\n\t\toverwrittenMenuActionItems = insertCustomElements(\n\t\t\tannotationMenuActionItems,\n\t\t\tmatchingManifestActions,\n\t\t\tactionOverwriteConfig\n\t\t) as CustomAction[];\n\t// If there is a manifest action defined for a neighbouring reference facet, it would not be part of manifest actions here\n\t// In this for-loop, ensuring a pure manifest action coming from another reference facet is not lost\n\tfor (let reverseIndex = actions.length - 1; reverseIndex >= 0; reverseIndex--) {\n\t\tif (actions[reverseIndex].id?.startsWith(\"CustomAction::\")) {\n\t\t\tfor (const manifestAction in manifestActions.actions) {\n\t\t\t\tif (manifestAction === actions[reverseIndex].key) {\n\t\t\t\t\tactions.splice(reverseIndex, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// 6. Override all actions\n\tlet formAllActions = insertCustomElements(actions, manifestActions.actions, actionOverwriteConfig) as CustomAction[];\n\t// 7. Replace original menu items with their corresponding overridden menu items\n\tprepareMenuActions(formAllActions, overwrittenMenuActionItems);\n\t// 8. Remove duplicate actions which are menu items\n\tformAllActions = removeDuplicateActions(formAllActions);\n\t// 9. Hide menus where all menu items are hidden\n\tformAllActions = getVisibilityEnablementMenuActions(formAllActions);\n\t// 10. Apply primary action overflow protection\n\tformAllActions = ActionUtilities.ensurePrimaryActionNeverOverflows(formAllActions) as CustomAction[];\n\t// 11. (Only for this subsection UI area) defaultAction of a menu must be of type ActionType.Default\n\tformAllActions.forEach((action) => {\n\t\tif (action.type === ActionType.Menu && !!action.defaultAction) {\n\t\t\t(action.defaultAction as CustomAction).type = ActionType.Default;\n\t\t}\n\t});\n\n\treturn {\n\t\tactions: formAllActions ?? actions,\n\t\tcommandActions: manifestActions.commandActions\n\t};\n}\n\n/**\n * Retrieves the action form a facet.\n * @param facetDefinition\n * @param converterContext\n * @returns The current facet actions\n */\nfunction getFacetActions(facetDefinition: FacetTypes, converterContext: ConverterContext<PageContextPathTarget>): CombinedAction {\n\tlet actions: BaseAction[] = [];\n\tswitch (facetDefinition.$Type) {\n\t\tcase UIAnnotationTypes.CollectionFacet:\n\t\t\tactions = (\n\t\t\t\tfacetDefinition.Facets.filter((subFacetDefinition) => isReferenceFacet(subFacetDefinition)) as ReferenceFacetTypes[]\n\t\t\t).reduce(\n\t\t\t\t(actionReducer: BaseAction[], referenceFacet) => createFormActionReducer(actionReducer, referenceFacet, converterContext),\n\t\t\t\t[]\n\t\t\t);\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.ReferenceFacet:\n\t\t\tactions = createFormActionReducer([], facetDefinition, converterContext);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn addFormMenuActions(actions, facetDefinition, converterContext);\n}\n/**\n * Returns the button type based on @UI.Emphasized annotation.\n * @param emphasized Emphasized annotation value.\n * @returns The button type or path based expression.\n */\nfunction getButtonType(emphasized: Emphasized | undefined): ButtonType {\n\t// Emphasized is a boolean so if it's equal to true we show the button as Ghost, otherwise as Transparent\n\tconst buttonTypeCondition = equal(getExpressionFromAnnotation(emphasized), true);\n\treturn compileExpression(ifElse(buttonTypeCondition, ButtonType.Ghost, ButtonType.Transparent)) as ButtonType;\n}\n\n/**\n * Create a subsection based on FacetTypes.\n * @param facetDefinition\n * @param facetsToCreate\n * @param converterContext\n * @param level\n * @param hasSingleContent\n * @param isHeaderSection\n * @param useSingleTextAreaFieldAsNotes If the only field within a form container is a text-area field, the label is hidden\n * @returns A subsection definition\n */\nexport function createSubSection(\n\tfacetDefinition: FacetTypes,\n\tfacetsToCreate: FacetTypes[],\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tlevel: number,\n\thasSingleContent: boolean,\n\tisHeaderSection?: boolean,\n\tuseSingleTextAreaFieldAsNotes?: boolean\n): ObjectPageSubSection {\n\tconst subSectionID = getSubSectionID(facetDefinition);\n\tconst hiddenAnnotation = facetDefinition.annotations?.UI?.Hidden;\n\tconst isVisibleExpression = not(\n\t\tequal(\n\t\t\ttrue,\n\t\t\tgetExpressionFromAnnotation(hiddenAnnotation, [], false, (path: string) =>\n\t\t\t\tsingletonPathVisitor(path, converterContext.getConvertedTypes(), [])\n\t\t\t)\n\t\t)\n\t);\n\tconst isVisibilityDynamic = !isConstant(isVisibleExpression) && !isPathAnnotationExpression(hiddenAnnotation);\n\tconst title = facetDefinition.Label !== undefined ? compileExpression(getExpressionFromAnnotation(facetDefinition.Label)) : undefined;\n\tconst subSection: BaseSubSection = {\n\t\tid: subSectionID,\n\t\tkey: getSubSectionKey(facetDefinition, subSectionID),\n\t\ttitle: title,\n\t\ttype: SubSectionType.Unknown,\n\t\tannotationPath: converterContext.getEntitySetBasedAnnotationPath(facetDefinition.fullyQualifiedName),\n\t\tvisible: compileExpression(isVisibleExpression),\n\t\tisVisibilityDynamic: isVisibilityDynamic,\n\t\tlevel: level,\n\t\tsideContent: undefined,\n\t\tobjectPageLazyLoaderEnabled: converterContext.getManifestWrapper().getEnableLazyLoading()\n\t};\n\tif (isHeaderSection) {\n\t\tsubSection.stashed = getStashedSettingsForHeaderFacet(facetDefinition, facetDefinition, converterContext);\n\t\tsubSection.flexSettings = {\n\t\t\tdesigntime: getDesignTimeMetadataSettingsForHeaderFacet(facetDefinition, facetDefinition, converterContext)\n\t\t};\n\t}\n\tlet unsupportedText = \"\";\n\tlevel++;\n\tswitch (facetDefinition.$Type) {\n\t\tcase UIAnnotationTypes.CollectionFacet:\n\t\t\tconst facets = facetDefinition.Facets;\n\n\t\t\t// Filter for all facets of this subsection that are referring to an annotation describing a visualization (e.g. table or chart)\n\t\t\tconst visualizationFacets = facets\n\t\t\t\t.map((facet, index) => ({ index, facet })) // Remember the index assigned to each facet\n\t\t\t\t.filter(({ facet }) => {\n\t\t\t\t\treturn isReferenceFacet(facet) && facet.Target.$target && visualizationTerms.includes(facet.Target.$target.term);\n\t\t\t\t});\n\n\t\t\t// Filter out all visualization facets; \"visualizationFacets\" and \"nonVisualizationFacets\" are disjoint\n\t\t\tconst nonVisualizationFacets = facets.filter(\n\t\t\t\t(facet) => !visualizationFacets.find((visualization) => visualization.facet === facet)\n\t\t\t);\n\n\t\t\tif (visualizationFacets.length > 0) {\n\t\t\t\t// CollectionFacets with visualizations must be handled separately as they cannot be included in forms\n\t\t\t\tconst visualizationContent: ObjectPageSubSection[] = [];\n\t\t\t\tconst formContent: ObjectPageSubSection[] = [];\n\t\t\t\tconst mixedContent: ObjectPageSubSection[] = [];\n\n\t\t\t\t// Create each visualization facet as if it was its own subsection (via recursion), and keep their relative ordering\n\t\t\t\tfor (const { facet } of visualizationFacets) {\n\t\t\t\t\tvisualizationContent.push(createSubSection(facet, [], converterContext, level, true, isHeaderSection));\n\t\t\t\t}\n\n\t\t\t\tif (nonVisualizationFacets.length > 0) {\n\t\t\t\t\t// This subsection includes visualizations and other content, so it is a \"Mixed\" subsection\n\t\t\t\t\tLog.warning(\n\t\t\t\t\t\t`Warning: CollectionFacet '${facetDefinition.ID}' includes a combination of either a chart or a table and other content. This can lead to rendering issues. Consider moving the chart or table into a separate CollectionFacet.`\n\t\t\t\t\t);\n\n\t\t\t\t\tconst fakeFormFacet = { ...facetDefinition };\n\t\t\t\t\tfakeFormFacet.Facets = nonVisualizationFacets;\n\t\t\t\t\t// Create a joined form of all facets that are not referring to visualizations\n\t\t\t\t\tformContent.push(createSubSection(fakeFormFacet, [], converterContext, level, hasSingleContent, isHeaderSection));\n\t\t\t\t}\n\n\t\t\t\t// Merge the visualization content with the form content\n\t\t\t\tif (visualizationFacets.find(({ index }) => index === 0)) {\n\t\t\t\t\t// If the first facet is a visualization, display the visualizations first\n\t\t\t\t\tmixedContent.push(...visualizationContent);\n\t\t\t\t\tmixedContent.push(...formContent);\n\t\t\t\t} else {\n\t\t\t\t\t// Otherwise, display the form first\n\t\t\t\t\tmixedContent.push(...formContent);\n\t\t\t\t\tmixedContent.push(...visualizationContent);\n\t\t\t\t}\n\n\t\t\t\tconst mixedSubSection: MixedSubSection = {\n\t\t\t\t\t...subSection,\n\t\t\t\t\ttype: SubSectionType.Mixed,\n\t\t\t\t\tlevel: level,\n\t\t\t\t\tcontent: mixedContent\n\t\t\t\t};\n\t\t\t\treturn mixedSubSection;\n\t\t\t} else {\n\t\t\t\t// This CollectionFacet only includes content that can be rendered in a merged form\n\t\t\t\tconst facetActions = getFacetActions(facetDefinition, converterContext),\n\t\t\t\t\tformCollectionSubSection: FormSubSection = {\n\t\t\t\t\t\t...subSection,\n\t\t\t\t\t\ttype: SubSectionType.Form,\n\t\t\t\t\t\tformDefinition: createFormDefinition(\n\t\t\t\t\t\t\tfacetDefinition,\n\t\t\t\t\t\t\tcompileExpression(isVisibleExpression),\n\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\tfacetActions.actions,\n\t\t\t\t\t\t\t{ useSingleTextAreaFieldAsNotes }\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlevel: level,\n\t\t\t\t\t\tactions: facetActions.actions.filter((action) => action.facetName === undefined),\n\t\t\t\t\t\tcommandActions: facetActions.commandActions\n\t\t\t\t\t};\n\t\t\t\treturn formCollectionSubSection;\n\t\t\t}\n\t\tcase UIAnnotationTypes.ReferenceFacet:\n\t\t\tif (!facetDefinition.Target.$target) {\n\t\t\t\tunsupportedText = `Unable to find annotationPath ${facetDefinition.Target.value}`;\n\t\t\t} else {\n\t\t\t\tswitch (facetDefinition.Target.$target.term) {\n\t\t\t\t\tcase UIAnnotationTerms.LineItem:\n\t\t\t\t\tcase UIAnnotationTerms.Chart:\n\t\t\t\t\tcase UIAnnotationTerms.PresentationVariant:\n\t\t\t\t\tcase UIAnnotationTerms.SelectionPresentationVariant:\n\t\t\t\t\t\tconst presentation = getDataVisualizationConfiguration(facetDefinition.Target.value, converterContext, {\n\t\t\t\t\t\t\tisCondensedTableLayoutCompliant: getCondensedTableLayoutCompliance(\n\t\t\t\t\t\t\t\tfacetDefinition,\n\t\t\t\t\t\t\t\tfacetsToCreate,\n\t\t\t\t\t\t\t\tconverterContext\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tdoNotCheckApplySupported: isHeaderSection,\n\t\t\t\t\t\t\tshouldCreateTemplateChartVisualization: true\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst subSectionTitle: string = subSection.title ? subSection.title : \"\";\n\t\t\t\t\t\tconst controlTitle =\n\t\t\t\t\t\t\t(presentation.visualizations[0] as TableVisualization)?.annotation?.title ||\n\t\t\t\t\t\t\t(presentation.visualizations[0] as ChartVisualization)?.title;\n\t\t\t\t\t\tconst isPartOfPreview = facetDefinition.annotations?.UI?.PartOfPreview?.valueOf() !== false;\n\t\t\t\t\t\tconst showSubSectionTitle = getShowSubSectionTitle(controlTitle ?? \"\", subSectionTitle, hasSingleContent);\n\n\t\t\t\t\t\t// Either calculate the title visibility statically or dynamically\n\t\t\t\t\t\t// Additionally to checking whether a title exists,\n\t\t\t\t\t\t// we also need to check that the facet title is not the same as the control (i.e. visualization) title;\n\t\t\t\t\t\t// this is done by including \"showSubSectionTitle\" in the and expression\n\t\t\t\t\t\tconst dataVisualizationTitleVisible = ifElse(\n\t\t\t\t\t\t\tisVisibilityDynamic,\n\t\t\t\t\t\t\tand(isVisibleExpression, not(equal(title, \"undefined\")), showSubSectionTitle),\n\t\t\t\t\t\t\tand(\n\t\t\t\t\t\t\t\tcompileExpression(isVisibleExpression) !== undefined,\n\t\t\t\t\t\t\t\ttitle !== \"undefined\",\n\t\t\t\t\t\t\t\ttitle !== undefined,\n\t\t\t\t\t\t\t\tisVisibleExpression,\n\t\t\t\t\t\t\t\tshowSubSectionTitle\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst dataVisualizationSubSection: DataVisualizationSubSection = {\n\t\t\t\t\t\t\t...subSection,\n\t\t\t\t\t\t\ttype: SubSectionType.DataVisualization,\n\t\t\t\t\t\t\tlevel: level,\n\t\t\t\t\t\t\tpresentation: presentation,\n\t\t\t\t\t\t\tisPartOfPreview,\n\t\t\t\t\t\t\tshowSubSectionTitle: compileExpression(showSubSectionTitle), // This is used on the ObjectPageSubSection\n\t\t\t\t\t\t\tdataVisualizationTitleVisible: compileExpression(dataVisualizationTitleVisible) // This is used to hide the Title control above data visualizations\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn dataVisualizationSubSection;\n\n\t\t\t\t\tcase UIAnnotationTerms.FieldGroup:\n\t\t\t\t\tcase UIAnnotationTerms.Identification:\n\t\t\t\t\tcase UIAnnotationTerms.DataPoint:\n\t\t\t\t\tcase UIAnnotationTerms.StatusInfo:\n\t\t\t\t\tcase CommunicationAnnotationTerms.Contact:\n\t\t\t\t\t\t// All those element belong to a from facet\n\t\t\t\t\t\tconst facetActions = getFacetActions(facetDefinition, converterContext),\n\t\t\t\t\t\t\tformElementSubSection: FormSubSection = {\n\t\t\t\t\t\t\t\t...subSection,\n\t\t\t\t\t\t\t\ttype: SubSectionType.Form,\n\t\t\t\t\t\t\t\tlevel: level,\n\t\t\t\t\t\t\t\tformDefinition: createFormDefinition(\n\t\t\t\t\t\t\t\t\tfacetDefinition,\n\t\t\t\t\t\t\t\t\tcompileExpression(isVisibleExpression),\n\t\t\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\t\t\tfacetActions.actions,\n\t\t\t\t\t\t\t\t\t{ useSingleTextAreaFieldAsNotes }\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tactions: facetActions.actions.filter((action) => action.facetName === undefined),\n\t\t\t\t\t\t\t\tcommandActions: facetActions.commandActions\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\treturn formElementSubSection;\n\n\t\t\t\t\tcase UIAnnotationTerms.Note:\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t...subSection,\n\t\t\t\t\t\t\ttype: SubSectionType.Notes\n\t\t\t\t\t\t};\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tunsupportedText = `For ${facetDefinition.Target.$target.term} Fragment`;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase UIAnnotationTypes.ReferenceURLFacet:\n\t\t\tunsupportedText = \"For Reference URL Facet\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t// If we reach here we ended up with an unsupported SubSection type\n\tconst unsupportedSubSection: UnsupportedSubSection = {\n\t\t...subSection,\n\t\ttype: SubSectionType.Unknown,\n\t\ttext: unsupportedText\n\t};\n\treturn unsupportedSubSection;\n}\n\n/**\n * Checks whether to hide or show the subsection title.\n * @param controlTitle\n * @param subSectionTitle\n * @param hasSingleContent\n * @returns Boolean value or expression for showSubSectionTitle\n */\nexport function getShowSubSectionTitle(\n\tcontrolTitle: string,\n\tsubSectionTitle: string,\n\thasSingleContent: boolean\n): BindingToolkitExpression<boolean> {\n\t// visible shall be true if there are multiple content or if the control and subsection title are different\n\treturn or(not(hasSingleContent), notEqual(resolveBindingString(controlTitle), resolveBindingString(subSectionTitle)));\n}\n\nfunction createFormActionReducer(\n\tactions: BaseAction[],\n\tfacetDefinition: ReferenceFacetTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): BaseAction[] {\n\tconst referenceTarget = facetDefinition.Target.$target;\n\tconst targetValue = facetDefinition.Target.value;\n\tlet manifestActions: Record<string, CustomAction> = {};\n\tlet dataFieldCollection: DataFieldAbstractTypes[] = [];\n\tlet navigationPropertyPath: string | undefined;\n\t[navigationPropertyPath] = targetValue.split(\"@\");\n\tif (navigationPropertyPath.length > 0) {\n\t\tif (navigationPropertyPath.lastIndexOf(\"/\") === navigationPropertyPath.length - 1) {\n\t\t\tnavigationPropertyPath = navigationPropertyPath.substring(0, navigationPropertyPath.length - 1);\n\t\t}\n\t} else {\n\t\tnavigationPropertyPath = undefined;\n\t}\n\n\tif (referenceTarget) {\n\t\tswitch (referenceTarget.term) {\n\t\t\tcase UIAnnotationTerms.FieldGroup:\n\t\t\t\tdataFieldCollection = (referenceTarget as FieldGroup).Data;\n\t\t\t\tmanifestActions = getActionsFromManifest(\n\t\t\t\t\tconverterContext.getManifestControlConfiguration<FormManifestConfiguration>(referenceTarget).actions as\n\t\t\t\t\t\t| Record<string, ManifestAction>\n\t\t\t\t\t\t| undefined,\n\t\t\t\t\tconverterContext,\n\t\t\t\t\t[],\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tfacetDefinition.fullyQualifiedName\n\t\t\t\t).actions;\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTerms.Identification:\n\t\t\tcase UIAnnotationTerms.StatusInfo:\n\t\t\t\tif (referenceTarget.qualifier) {\n\t\t\t\t\tdataFieldCollection = referenceTarget;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tactions = dataFieldCollection.reduce((actionReducer, dataField: DataFieldAbstractTypes) => {\n\t\t\tswitch (dataField.$Type) {\n\t\t\t\tcase UIAnnotationTypes.DataFieldForIntentBasedNavigation:\n\t\t\t\t\tif (dataField.RequiresContext?.valueOf() === true) {\n\t\t\t\t\t\tconverterContext\n\t\t\t\t\t\t\t.getDiagnostics()\n\t\t\t\t\t\t\t.addIssue(IssueCategory.Annotation, IssueSeverity.Low, IssueType.MALFORMED_DATAFIELD_FOR_IBN.REQUIRESCONTEXT);\n\t\t\t\t\t}\n\t\t\t\t\tif (dataField.Inline?.valueOf() === true) {\n\t\t\t\t\t\tconverterContext\n\t\t\t\t\t\t\t.getDiagnostics()\n\t\t\t\t\t\t\t.addIssue(IssueCategory.Annotation, IssueSeverity.Low, IssueType.MALFORMED_DATAFIELD_FOR_IBN.INLINE);\n\t\t\t\t\t}\n\t\t\t\t\tif (dataField.Determining?.valueOf() === true) {\n\t\t\t\t\t\tconverterContext\n\t\t\t\t\t\t\t.getDiagnostics()\n\t\t\t\t\t\t\t.addIssue(IssueCategory.Annotation, IssueSeverity.Low, IssueType.MALFORMED_DATAFIELD_FOR_IBN.DETERMINING);\n\t\t\t\t\t}\n\t\t\t\t\tconst mNavigationParameters: NavigationParameters = {};\n\t\t\t\t\tif (dataField.Mapping) {\n\t\t\t\t\t\tmNavigationParameters.semanticObjectMapping = getSemanticObjectMapping(dataField.Mapping);\n\t\t\t\t\t}\n\t\t\t\t\tactionReducer.push({\n\t\t\t\t\t\ttype: ActionType.DataFieldForIntentBasedNavigation,\n\t\t\t\t\t\tid: getFormID(facetDefinition, dataField),\n\t\t\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\t\t\ttext: dataField.Label?.toString(),\n\t\t\t\t\t\tannotationPath: \"\",\n\t\t\t\t\t\tenabled:\n\t\t\t\t\t\t\tdataField.NavigationAvailable !== undefined\n\t\t\t\t\t\t\t\t? compileExpression(equal(getExpressionFromAnnotation(dataField.NavigationAvailable), true))\n\t\t\t\t\t\t\t\t: \"true\",\n\t\t\t\t\t\tvisible: compileExpression(not(equal(getExpressionFromAnnotation(dataField.annotations?.UI?.Hidden), true))),\n\t\t\t\t\t\tbuttonType: getButtonType(dataField.annotations?.UI?.Emphasized),\n\t\t\t\t\t\tpress: compileExpression(\n\t\t\t\t\t\t\tfn(\"._intentBasedNavigation.navigate\", [\n\t\t\t\t\t\t\t\tgetExpressionFromAnnotation(dataField.SemanticObject),\n\t\t\t\t\t\t\t\tgetExpressionFromAnnotation(dataField.Action),\n\t\t\t\t\t\t\t\tmNavigationParameters\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t),\n\t\t\t\t\t\tcustomData: compileExpression({\n\t\t\t\t\t\t\tsemanticObject: getExpressionFromAnnotation(dataField.SemanticObject),\n\t\t\t\t\t\t\taction: getExpressionFromAnnotation(dataField.Action)\n\t\t\t\t\t\t})\n\t\t\t\t\t} as AnnotationAction);\n\t\t\t\t\tbreak;\n\t\t\t\tcase UIAnnotationTypes.DataFieldForAction:\n\t\t\t\t\tconst formManifestActionsConfiguration =\n\t\t\t\t\t\tconverterContext.getManifestControlConfiguration<FormManifestConfiguration>(referenceTarget).actions;\n\t\t\t\t\tactionReducer.push(\n\t\t\t\t\t\tgetDataFieldAnnotationAction(\n\t\t\t\t\t\t\tdataField,\n\t\t\t\t\t\t\tfacetDefinition,\n\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\tformManifestActionsConfiguration,\n\t\t\t\t\t\t\tnavigationPropertyPath\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase UIAnnotationTypes.DataFieldForActionGroup:\n\t\t\t\t\tactionReducer.push({\n\t\t\t\t\t\ttype: ActionType.Menu,\n\t\t\t\t\t\ttext: dataField.Label?.toString(),\n\t\t\t\t\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\t\t\t\t\tid: getFormID(facetDefinition, dataField),\n\t\t\t\t\t\tvisible: compileExpression(not(equal(getExpressionFromAnnotation(dataField.annotations?.UI?.Hidden), true))),\n\t\t\t\t\t\tisAIOperation: isMenuAIOperation(dataField.Actions) === true || undefined,\n\t\t\t\t\t\tmenu: dataField.Actions.map((action) => {\n\t\t\t\t\t\t\tconst formManifestMenuActionsConfiguration =\n\t\t\t\t\t\t\t\tconverterContext.getManifestControlConfiguration<FormManifestConfiguration>(referenceTarget).actions;\n\t\t\t\t\t\t\treturn getDataFieldAnnotationAction(\n\t\t\t\t\t\t\t\taction as DataFieldForActionTypes,\n\t\t\t\t\t\t\t\tfacetDefinition,\n\t\t\t\t\t\t\t\tconverterContext,\n\t\t\t\t\t\t\t\tformManifestMenuActionsConfiguration,\n\t\t\t\t\t\t\t\tnavigationPropertyPath\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn actionReducer;\n\t\t}, actions);\n\t}\n\n\t// no overrides here, they are done in a later step in addFormMenuActions\n\treturn insertCustomElements(actions, manifestActions);\n}\n\nfunction getDataFieldAnnotationAction(\n\tdataField: DataFieldForActionTypes,\n\tfacetDefinition: ReferenceFacetTypes,\n\tconverterContext: ConverterContext<PageContextPathTarget>,\n\tformManifestActionsConfiguration: Record<string, ManifestAction> | undefined,\n\tnavigationPropertyPath?: string\n): AnnotationAction {\n\tconst key = KeyHelper.generateKeyFromDataField(dataField);\n\treturn {\n\t\ttype: ActionType.DataFieldForAction,\n\t\tid: getFormID(facetDefinition, dataField),\n\t\tkey: KeyHelper.generateKeyFromDataField(dataField),\n\t\ttext: dataField.Label?.toString(),\n\t\tannotationPath: \"\",\n\t\tenabled: getEnabledForAnnotationAction(converterContext, dataField.ActionTarget),\n\t\tbinding: navigationPropertyPath && !dataField.Inline ? `{ 'path' : '${navigationPropertyPath}'}` : undefined, // Inline Actions don't need the binding as they are inside the Form\n\t\tvisible: compileExpression(not(equal(getExpressionFromAnnotation(dataField.annotations?.UI?.Hidden), true))),\n\t\trequiresDialog: isActionWithDialog(dataField),\n\t\tbuttonType: getButtonType(dataField.annotations?.UI?.Emphasized),\n\t\tisAIOperation: isActionAIOperation(dataField) === true || undefined,\n\t\tpress: compileExpression(\n\t\t\tfn(\n\t\t\t\t\"invokeAction\",\n\t\t\t\t[\n\t\t\t\t\tdataField.Action,\n\t\t\t\t\t{\n\t\t\t\t\t\tcontexts: fn(\"getBindingContext\", [], pathInModel(\"\", \"$source\")),\n\t\t\t\t\t\tinvocationGrouping: (dataField.InvocationGrouping === \"UI.OperationGroupingType/ChangeSet\"\n\t\t\t\t\t\t\t? \"ChangeSet\"\n\t\t\t\t\t\t\t: \"Isolated\") as OperationGroupingType,\n\t\t\t\t\t\tlabel: dataField.Label?.toString(),\n\t\t\t\t\t\tmodel: fn(\"getModel\", [], pathInModel(\"/\", \"$source\")),\n\t\t\t\t\t\tisNavigable: isActionNavigable(formManifestActionsConfiguration && formManifestActionsConfiguration[key])\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tref(\".editFlow\")\n\t\t\t)\n\t\t),\n\t\tfacetName: dataField.Inline ? facetDefinition.fullyQualifiedName : undefined\n\t};\n}\n\nexport function isDialog(actionDefinition: Action | undefined): string {\n\tif (actionDefinition) {\n\t\tconst bCritical = actionDefinition.annotations?.Common?.IsActionCritical;\n\t\tif (actionDefinition.parameters.length > 1 || bCritical) {\n\t\t\treturn \"Dialog\";\n\t\t} else {\n\t\t\treturn \"None\";\n\t\t}\n\t} else {\n\t\treturn \"None\";\n\t}\n}\n\nexport function createCustomSubSections(\n\tmanifestSubSections: Record<string, ManifestSubSection>,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): Record<string, CustomObjectPageSubSection> {\n\tconst subSections: Record<string, CustomObjectPageSubSection> = {};\n\tObject.keys(manifestSubSections).forEach(\n\t\t(subSectionKey) =>\n\t\t\t(subSections[subSectionKey] = createCustomSubSection(manifestSubSections[subSectionKey], subSectionKey, converterContext))\n\t);\n\treturn subSections;\n}\n\nexport function createCustomSubSection(\n\tmanifestSubSection: ManifestSubSection,\n\tsubSectionKey: string,\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): CustomObjectPageSubSection {\n\tconst sideContent: SideContentDef | undefined = manifestSubSection.sideContent\n\t\t? {\n\t\t\t\ttemplate: manifestSubSection.sideContent.template,\n\t\t\t\tid: getSideContentID(subSectionKey),\n\t\t\t\tvisible: false,\n\t\t\t\tequalSplit: manifestSubSection.sideContent.equalSplit\n\t\t  }\n\t\t: undefined;\n\tlet position = manifestSubSection.position;\n\tif (!position) {\n\t\tposition = {\n\t\t\tplacement: Placement.After\n\t\t};\n\t}\n\tconst isVisible = manifestSubSection.visible !== undefined ? manifestSubSection.visible : true;\n\tconst isDynamicExpression = isVisible && typeof isVisible === \"string\" && isVisible.indexOf(\"{=\") === 0;\n\tconst manifestActions = getActionsFromManifest(manifestSubSection.actions, converterContext);\n\tmanifestActions.actions = removeDuplicateActions(Object.values(manifestActions.actions))?.reduce(\n\t\t(previousAction, currentAction) => ({ ...previousAction, [currentAction.key]: currentAction }),\n\t\t{}\n\t);\n\tconst subSectionDefinition = {\n\t\ttype: SubSectionType.Unknown,\n\t\tid: manifestSubSection.id || getCustomSubSectionID(subSectionKey),\n\t\tactions: manifestActions.actions,\n\t\tkey: subSectionKey,\n\t\ttitle: manifestSubSection.title,\n\t\tlevel: 1,\n\t\tposition: position,\n\t\tvisible: manifestSubSection.visible !== undefined ? manifestSubSection.visible : \"true\",\n\t\tsideContent: sideContent,\n\t\tisVisibilityDynamic: isDynamicExpression,\n\t\tobjectPageLazyLoaderEnabled: manifestSubSection.enableLazyLoading ?? false,\n\t\tcomponentName: \"\",\n\t\tsettings: \"\",\n\t\tapplyState: manifestSubSection.applyState,\n\t\tretrieveState: manifestSubSection.retrieveState\n\t};\n\tif (manifestSubSection.template || manifestSubSection.name) {\n\t\tsubSectionDefinition.type = SubSectionType.XMLFragment;\n\t\t(subSectionDefinition as unknown as XMLFragmentSubSection).template = manifestSubSection.template || manifestSubSection.name || \"\";\n\t} else if (manifestSubSection.embeddedComponent !== undefined) {\n\t\tsubSectionDefinition.type = SubSectionType.EmbeddedComponent;\n\t\tsubSectionDefinition.componentName = manifestSubSection.embeddedComponent.name;\n\t\tif (manifestSubSection.embeddedComponent.settings !== undefined) {\n\t\t\tsubSectionDefinition.settings = JSON.stringify(manifestSubSection.embeddedComponent.settings);\n\t\t}\n\t} else {\n\t\tsubSectionDefinition.type = SubSectionType.Placeholder;\n\t}\n\treturn subSectionDefinition as CustomObjectPageSubSection;\n}\n\n/**\n * Evaluate if the condensed mode can be applied on the table.\n * @param currentFacet\n * @param facetsToCreateInSection\n * @param converterContext\n * @returns `true` for compliant, false otherwise\n */\nfunction getCondensedTableLayoutCompliance(\n\tcurrentFacet: FacetTypes,\n\tfacetsToCreateInSection: FacetTypes[],\n\tconverterContext: ConverterContext<PageContextPathTarget>\n): boolean {\n\tconst manifestWrapper = converterContext.getManifestWrapper();\n\tif (manifestWrapper.useIconTabBar()) {\n\t\t// If the OP use the tab based we check if the facets that will be created for this section are all non visible\n\t\treturn hasNoOtherVisibleTableInTargets(currentFacet, facetsToCreateInSection);\n\t} else {\n\t\tconst entityType = converterContext.getEntityType();\n\t\tif (entityType.annotations?.UI?.Facets?.length && entityType.annotations?.UI?.Facets?.length > 1) {\n\t\t\treturn hasNoOtherVisibleTableInTargets(currentFacet, facetsToCreateInSection);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\nfunction hasNoOtherVisibleTableInTargets(currentFacet: FacetTypes, facetsToCreateInSection: FacetTypes[]): boolean {\n\treturn facetsToCreateInSection.every(function (subFacet) {\n\t\tif (subFacet !== currentFacet) {\n\t\t\tif (subFacet.$Type === UIAnnotationTypes.ReferenceFacet) {\n\t\t\t\tconst refFacet = subFacet;\n\t\t\t\tif (\n\t\t\t\t\trefFacet.Target?.$target?.term === UIAnnotationTerms.LineItem ||\n\t\t\t\t\trefFacet.Target?.$target?.term === UIAnnotationTerms.PresentationVariant ||\n\t\t\t\t\trefFacet.Target.$target?.term === UIAnnotationTerms.SelectionPresentationVariant\n\t\t\t\t) {\n\t\t\t\t\treturn refFacet.annotations?.UI?.Hidden !== undefined ? refFacet.annotations?.UI?.Hidden : false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconst subCollectionFacet = subFacet as CollectionFacetTypes;\n\t\t\t\treturn subCollectionFacet.Facets.every(function (facet) {\n\t\t\t\t\tconst subRefFacet = facet as ReferenceFacetTypes;\n\t\t\t\t\tif (\n\t\t\t\t\t\tsubRefFacet.Target?.$target?.term === UIAnnotationTerms.LineItem ||\n\t\t\t\t\t\tsubRefFacet.Target?.$target?.term === UIAnnotationTerms.PresentationVariant ||\n\t\t\t\t\t\tsubRefFacet.Target?.$target?.term === UIAnnotationTerms.SelectionPresentationVariant\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn subRefFacet.annotations?.UI?.Hidden !== undefined ? subRefFacet.annotations?.UI?.Hidden : false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t});\n}\n"],"mappings":"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","ignoreList":[]}