{"version":3,"names":["isNaturalPersonExpression","converterContext","getExpressionFromAnnotation","getEntityType","annotations","Common","IsNaturalPerson","compileAvatarShape","expression","compileExpression","ifElse","AvatarShape","Circle","Square","compileFallBackIcon","getFallBackIcon","headerInfo","UI","HeaderInfo","ImageUrl","TypeImageUrl","undefined","getSource","getAvatar","oSource","Initials","src","initials","fallbackIcon","displayShape","_exports"],"sourceRoot":".","sources":["Avatar.ts"],"sourcesContent":["import type { CompiledBindingToolkitExpression, ExpressionOrPrimitive } from \"sap/fe/base/BindingToolkit\";\nimport { compileExpression, getExpressionFromAnnotation, ifElse } from \"sap/fe/base/BindingToolkit\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport AvatarShape from \"sap/m/AvatarShape\";\nimport type ConverterContext from \"../../ConverterContext\";\n\nexport type Avatar = {\n\tsrc?: CompiledBindingToolkitExpression;\n\tinitials: CompiledBindingToolkitExpression;\n\tfallbackIcon?: CompiledBindingToolkitExpression;\n\tdisplayShape: CompiledBindingToolkitExpression;\n};\n\nconst isNaturalPersonExpression = (converterContext: ConverterContext<PageContextPathTarget>): ExpressionOrPrimitive<boolean> => {\n\treturn getExpressionFromAnnotation(converterContext.getEntityType().annotations.Common?.IsNaturalPerson);\n};\n\nconst compileAvatarShape = (expression: ExpressionOrPrimitive<boolean>): CompiledBindingToolkitExpression => {\n\treturn compileExpression(ifElse(expression, AvatarShape.Circle, AvatarShape.Square));\n};\n\n// The shape of the Avatar depends upon whether the entity instance represents a natural person.\n// This can depend upon a property in the entity. Unlike the shape of an avatar defined in a field, it\n// doesn't make sense to make the image at the object page header dependent upon the property containg\n// the image or imageURL.\nconst compileFallBackIcon = (expression: ExpressionOrPrimitive<boolean>): CompiledBindingToolkitExpression => {\n\treturn compileExpression(ifElse(expression, \"sap-icon://person-placeholder\", \"sap-icon://product\"));\n};\n\nconst getFallBackIcon = (converterContext: ConverterContext<PageContextPathTarget>): CompiledBindingToolkitExpression | undefined => {\n\tconst headerInfo = converterContext.getEntityType().annotations?.UI?.HeaderInfo;\n\tif (!headerInfo || (headerInfo && !headerInfo.ImageUrl && !headerInfo.TypeImageUrl)) {\n\t\treturn undefined;\n\t}\n\tif (headerInfo.ImageUrl && headerInfo.TypeImageUrl) {\n\t\treturn compileExpression(getExpressionFromAnnotation(headerInfo.TypeImageUrl));\n\t}\n\treturn compileFallBackIcon(isNaturalPersonExpression(converterContext));\n};\n\nconst getSource = (converterContext: ConverterContext<PageContextPathTarget>): CompiledBindingToolkitExpression | undefined => {\n\tconst headerInfo = converterContext.getEntityType().annotations?.UI?.HeaderInfo;\n\tif (!headerInfo || !(headerInfo.ImageUrl || headerInfo.TypeImageUrl)) {\n\t\treturn undefined;\n\t}\n\treturn compileExpression(getExpressionFromAnnotation(headerInfo.ImageUrl || headerInfo.TypeImageUrl));\n};\n\nexport const getAvatar = (converterContext: ConverterContext<PageContextPathTarget>): Avatar | undefined => {\n\tconst headerInfo = converterContext.getEntityType().annotations?.UI?.HeaderInfo;\n\tconst oSource = headerInfo && (headerInfo.ImageUrl || headerInfo.TypeImageUrl || headerInfo.Initials);\n\tif (!oSource) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\tsrc: getSource(converterContext),\n\t\tinitials: compileExpression(getExpressionFromAnnotation(headerInfo?.Initials, [], \"\")),\n\t\tfallbackIcon: getFallBackIcon(converterContext),\n\t\tdisplayShape: compileAvatarShape(isNaturalPersonExpression(converterContext))\n\t};\n};\n"],"mappings":";;;;;;;;;;;EAaA,MAAMA,yBAAyB,GAAIC,gBAAyD,IAAqC;IAChI,OAAOC,2BAA2B,CAACD,gBAAgB,CAACE,aAAa,CAAC,CAAC,CAACC,WAAW,CAACC,MAAM,EAAEC,eAAe,CAAC;EACzG,CAAC;EAED,MAAMC,kBAAkB,GAAIC,UAA0C,IAAuC;IAC5G,OAAOC,iBAAiB,CAACC,MAAM,CAACF,UAAU,EAAEG,WAAW,CAACC,MAAM,EAAED,WAAW,CAACE,MAAM,CAAC,CAAC;EACrF,CAAC;;EAED;EACA;EACA;EACA;EACA,MAAMC,mBAAmB,GAAIN,UAA0C,IAAuC;IAC7G,OAAOC,iBAAiB,CAACC,MAAM,CAACF,UAAU,EAAE,+BAA+B,EAAE,oBAAoB,CAAC,CAAC;EACpG,CAAC;EAED,MAAMO,eAAe,GAAId,gBAAyD,IAAmD;IACpI,MAAMe,UAAU,GAAGf,gBAAgB,CAACE,aAAa,CAAC,CAAC,CAACC,WAAW,EAAEa,EAAE,EAAEC,UAAU;IAC/E,IAAI,CAACF,UAAU,IAAKA,UAAU,IAAI,CAACA,UAAU,CAACG,QAAQ,IAAI,CAACH,UAAU,CAACI,YAAa,EAAE;MACpF,OAAOC,SAAS;IACjB;IACA,IAAIL,UAAU,CAACG,QAAQ,IAAIH,UAAU,CAACI,YAAY,EAAE;MACnD,OAAOX,iBAAiB,CAACP,2BAA2B,CAACc,UAAU,CAACI,YAAY,CAAC,CAAC;IAC/E;IACA,OAAON,mBAAmB,CAACd,yBAAyB,CAACC,gBAAgB,CAAC,CAAC;EACxE,CAAC;EAED,MAAMqB,SAAS,GAAIrB,gBAAyD,IAAmD;IAC9H,MAAMe,UAAU,GAAGf,gBAAgB,CAACE,aAAa,CAAC,CAAC,CAACC,WAAW,EAAEa,EAAE,EAAEC,UAAU;IAC/E,IAAI,CAACF,UAAU,IAAI,EAAEA,UAAU,CAACG,QAAQ,IAAIH,UAAU,CAACI,YAAY,CAAC,EAAE;MACrE,OAAOC,SAAS;IACjB;IACA,OAAOZ,iBAAiB,CAACP,2BAA2B,CAACc,UAAU,CAACG,QAAQ,IAAIH,UAAU,CAACI,YAAY,CAAC,CAAC;EACtG,CAAC;EAEM,MAAMG,SAAS,GAAItB,gBAAyD,IAAyB;IAC3G,MAAMe,UAAU,GAAGf,gBAAgB,CAACE,aAAa,CAAC,CAAC,CAACC,WAAW,EAAEa,EAAE,EAAEC,UAAU;IAC/E,MAAMM,OAAO,GAAGR,UAAU,KAAKA,UAAU,CAACG,QAAQ,IAAIH,UAAU,CAACI,YAAY,IAAIJ,UAAU,CAACS,QAAQ,CAAC;IACrG,IAAI,CAACD,OAAO,EAAE;MACb,OAAOH,SAAS;IACjB;IACA,OAAO;MACNK,GAAG,EAAEJ,SAAS,CAACrB,gBAAgB,CAAC;MAChC0B,QAAQ,EAAElB,iBAAiB,CAACP,2BAA2B,CAACc,UAAU,EAAES,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;MACtFG,YAAY,EAAEb,eAAe,CAACd,gBAAgB,CAAC;MAC/C4B,YAAY,EAAEtB,kBAAkB,CAACP,yBAAyB,CAACC,gBAAgB,CAAC;IAC7E,CAAC;EACF,CAAC;EAAC6B,QAAA,CAAAP,SAAA,GAAAA,SAAA;EAAA,OAAAO,QAAA;AAAA","ignoreList":[],"file":"Avatar-dbg.js"}