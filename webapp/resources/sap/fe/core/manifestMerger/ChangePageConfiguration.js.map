{"version":3,"file":"ChangePageConfiguration.js","names":["applyChange","manifest","change","changeContent","getContent","pageId","page","propertyChange","entityPropertyChange","operation","propertyPath","propertyValue","undefined","startsWith","Log","error","changeConfiguration","_exports","path","value","lateChange","appComponent","pageSAPfe","retrievePropertyPath","pageSettings","getPageSettings","manageSpecificFormat","ObjectPath","set","pageConfigurationChanges","push","length","i","get","slice","split","annotationPath","includes","concat","targets","routing","p","id","name","options","settings","applyPageConfigurationChanges","viewData","pageChanges","manifestValue"],"sources":["./ChangePageConfiguration.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport ObjectPath from \"sap/base/util/ObjectPath\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { ViewData } from \"sap/fe/core/services/TemplatedViewServiceFactory\";\nimport type { ManifestContent } from \"sap/ui/core/Manifest\";\n\nexport type Change = {\n\tgetContent(): ChangeContent;\n};\n\ntype ChangeContent = {\n\tpage: string; // ID of the page to be changed\n\tentityPropertyChange: EntityPropertyChange;\n};\n\ntype EntityPropertyChange = {\n\tpropertyPath: string; // path to the property to be changed\n\toperation: string; // only UPSERT supported\n\tpropertyValue: string | Object; //what to be changed\n};\n\n/**\n * Apply change method.\n *\n * This method is being called by the FLEX framework in case a manifest change with the change type\n * 'appdescr_fe_changePageConfiguration' was created for the current application. This method is not meant to be\n * called by anyone else but the FLEX framework.\n * @param manifest The original manifest.\n * @param change The change content.\n * @returns The changed or unchanged manifest.\n */\nexport function applyChange(manifest: ManifestContent, change: Change): object {\n\tconst changeContent = change.getContent();\n\tconst pageId = changeContent?.page;\n\tconst propertyChange = changeContent?.entityPropertyChange;\n\n\t// return unmodified manifest in case change not valid\n\tif (\n\t\tpropertyChange?.operation !== \"UPSERT\" ||\n\t\t!propertyChange?.propertyPath ||\n\t\tpropertyChange?.propertyValue === undefined ||\n\t\tpropertyChange?.propertyPath.startsWith(\"/\")\n\t) {\n\t\tLog.error(\"Change content is not a valid\");\n\t\treturn manifest;\n\t}\n\n\treturn changeConfiguration(manifest, pageId, propertyChange.propertyPath, propertyChange.propertyValue);\n}\n\n/**\n * Changes the page configuration of SAP Fiori elements.\n *\n * This method enables you to change the page configuration of SAP Fiori elements.\n * @param manifest The original manifest.\n * @param pageId The ID of the page for which the configuration is to be changed.\n * @param path The path in the page settings for which the configuration is to be changed.\n * @param value The new value of the configuration. This could be a plain value like a string, or a Boolean, or a structured object.\n * @param lateChange Indicates that the change was done after application startup (for example when using the feature toggle).\n * @param appComponent The appComponent, in case the change is done after application startup.\n * @returns The changed or unchanged manifest.\n */\nexport function changeConfiguration(\n\tmanifest: ManifestContent,\n\tpageId: string,\n\tpath: string,\n\tvalue: unknown,\n\tlateChange?: boolean,\n\tappComponent?: AppComponent\n): object {\n\tconst pageSAPfe = \"sap.fe\";\n\tlet propertyPath: string[] = retrievePropertyPath(path);\n\tlet pageSettings;\n\tif (pageId === pageSAPfe) {\n\t\tpropertyPath = [pageSAPfe, ...propertyPath];\n\t\tpageSettings = manifest;\n\t} else {\n\t\tpageSettings = getPageSettings(manifest, pageId);\n\t}\n\n\tif (pageSettings) {\n\t\tmanageSpecificFormat(propertyPath, pageSettings);\n\t\tObjectPath.set(propertyPath, value, pageSettings);\n\t\tif (lateChange && appComponent) {\n\t\t\tappComponent.pageConfigurationChanges[pageId] = appComponent.pageConfigurationChanges[pageId] || [];\n\t\t\tappComponent.pageConfigurationChanges[pageId].push(path);\n\t\t}\n\t} else {\n\t\tLog.error(`No Fiori elements page with ID ${pageId} found in routing targets.`);\n\t}\n\n\treturn manifest;\n}\n/**\n * Manages specific formats in the property path.\n * On some specific cases, the ancestor of the property is not an object (boolean, etc.)\n * This ancestor is changed to an object to accept children.\n * @param propertyPath The path to the property related to a change\n * @param pageSettings The page settings in the manifest\n */\nfunction manageSpecificFormat(propertyPath: string[], pageSettings: object): void {\n\tif (propertyPath.length > 1) {\n\t\tfor (let i = 0; i < propertyPath.length - 1; i++) {\n\t\t\tif (typeof ObjectPath.get(propertyPath.slice(0, i + 1), pageSettings) !== \"object\") {\n\t\t\t\tObjectPath.set(propertyPath.slice(0, i + 1), {}, pageSettings);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Retrieves an array with the property path parts and consider the controlConfiguration specially.\n * @param path The given property path\n * @returns An array with the property path parts.\n */\nfunction retrievePropertyPath(path: string): string[] {\n\tlet propertyPath = path.split(\"/\");\n\tif (propertyPath[0] === \"controlConfiguration\") {\n\t\tlet annotationPath = \"\";\n\t\t// the annotation path in the control configuration has to stay together. For now rely on the fact the @ is in the last part\n\t\tfor (let i = 1; i < propertyPath.length; i++) {\n\t\t\tannotationPath += (i > 1 ? \"/\" : \"\") + propertyPath[i];\n\t\t\tif (annotationPath.includes(\"@\")) {\n\t\t\t\tpropertyPath = [\"controlConfiguration\", annotationPath].concat(propertyPath.slice(i + 1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn propertyPath;\n}\n\n/**\n * Search the page settings in the manifest for a given page ID.\n * @param manifest The manifest where the search is carried out to find the page settings.\n * @param pageId The ID of the page.\n * @returns The page settings for the page ID or undefined if not found.\n */\nfunction getPageSettings(manifest: ManifestContent, pageId: string): object | undefined {\n\tlet pageSettings;\n\tconst targets = manifest[\"sap.ui5\"]?.routing?.targets ?? {};\n\tfor (const p in targets) {\n\t\tif (targets[p].id === pageId && targets[p].name.startsWith(\"sap.fe.\")) {\n\t\t\tpageSettings = targets[p].options?.settings ?? {};\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn pageSettings;\n}\n\n/**\n * Applies page configuration changes to view data object.\n *\n * UI5 routing clones the manifest settings during the app init, even before the router was initialized.\n * As we allow changing the manifest in the async initializeFeatureToggle hook, the view data might not fit the current\n * manifest settings, therefore (re)applying the registered page configuration changes to the view data object.\n * @param manifest The current page manifest settings.\n * @param viewData The current viewData settings.\n * @param appComponent The app component instance.\n * @param pageId The ID of the page.\n * @returns The updated viewData settings.\n */\nexport function applyPageConfigurationChanges(manifest: object, viewData: ViewData, appComponent: AppComponent, pageId: string): ViewData {\n\tviewData = viewData ?? {};\n\tconst pageChanges: string[] = appComponent.pageConfigurationChanges[pageId] || [];\n\tfor (const path of pageChanges) {\n\t\tconst propertyPath = retrievePropertyPath(path);\n\t\tconst manifestValue = ObjectPath.get(propertyPath, manifest);\n\t\tObjectPath.set(propertyPath, manifestValue, viewData);\n\t}\n\treturn viewData;\n}\n"],"mappings":";;;;8FA+BO,SAASA,EAAYC,EAA2BC,GACtD,MAAMC,EAAgBD,EAAOE,aAC7B,MAAMC,EAASF,GAAeG,KAC9B,MAAMC,EAAiBJ,GAAeK,qBAGtC,GACCD,GAAgBE,YAAc,WAC7BF,GAAgBG,cACjBH,GAAgBI,gBAAkBC,WAClCL,GAAgBG,aAAaG,WAAW,KACvC,CACDC,EAAIC,MAAM,iCACV,OAAOd,CACR,CAEA,OAAOe,EAAoBf,EAAUI,EAAQE,EAAeG,aAAcH,EAAeI,cAC1F,CAEAM,EAAAjB,cAYO,SAASgB,EACff,EACAI,EACAa,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAY,SAClB,IAAIZ,EAAyBa,EAAqBL,GAClD,IAAIM,EACJ,GAAInB,IAAWiB,EAAW,CACzBZ,EAAe,CAACY,KAAcZ,GAC9Bc,EAAevB,CAChB,KAAO,CACNuB,EAAeC,EAAgBxB,EAAUI,EAC1C,CAEA,GAAImB,EAAc,CACjBE,EAAqBhB,EAAcc,GACnCG,EAAWC,IAAIlB,EAAcS,EAAOK,GACpC,GAAIJ,GAAcC,EAAc,CAC/BA,EAAaQ,yBAAyBxB,GAAUgB,EAAaQ,yBAAyBxB,IAAW,GACjGgB,EAAaQ,yBAAyBxB,GAAQyB,KAAKZ,EACpD,CACD,KAAO,CACNJ,EAAIC,MAAM,kCAAkCV,8BAC7C,CAEA,OAAOJ,CACR,CACAgB,EAAAD,sBAOA,SAASU,EAAqBhB,EAAwBc,GACrD,GAAId,EAAaqB,OAAS,EAAG,CAC5B,IAAK,IAAIC,EAAI,EAAGA,EAAItB,EAAaqB,OAAS,EAAGC,IAAK,CACjD,UAAWL,EAAWM,IAAIvB,EAAawB,MAAM,EAAGF,EAAI,GAAIR,KAAkB,SAAU,CACnFG,EAAWC,IAAIlB,EAAawB,MAAM,EAAGF,EAAI,GAAI,CAAC,EAAGR,EAClD,CACD,CACD,CACD,CAOA,SAASD,EAAqBL,GAC7B,IAAIR,EAAeQ,EAAKiB,MAAM,KAC9B,GAAIzB,EAAa,KAAO,uBAAwB,CAC/C,IAAI0B,EAAiB,GAErB,IAAK,IAAIJ,EAAI,EAAGA,EAAItB,EAAaqB,OAAQC,IAAK,CAC7CI,IAAmBJ,EAAI,EAAI,IAAM,IAAMtB,EAAasB,GACpD,GAAII,EAAeC,SAAS,KAAM,CACjC3B,EAAe,CAAC,uBAAwB0B,GAAgBE,OAAO5B,EAAawB,MAAMF,EAAI,IACtF,KACD,CACD,CACD,CACA,OAAOtB,CACR,CAQA,SAASe,EAAgBxB,EAA2BI,GACnD,IAAImB,EACJ,MAAMe,EAAUtC,EAAS,YAAYuC,SAASD,SAAW,CAAC,EAC1D,IAAK,MAAME,KAAKF,EAAS,CACxB,GAAIA,EAAQE,GAAGC,KAAOrC,GAAUkC,EAAQE,GAAGE,KAAK9B,WAAW,WAAY,CACtEW,EAAee,EAAQE,GAAGG,SAASC,UAAY,CAAC,EAChD,KACD,CACD,CACA,OAAOrB,CACR,CAcO,SAASsB,EAA8B7C,EAAkB8C,EAAoB1B,EAA4BhB,GAC/G0C,EAAWA,GAAY,CAAC,EACxB,MAAMC,EAAwB3B,EAAaQ,yBAAyBxB,IAAW,GAC/E,IAAK,MAAMa,KAAQ8B,EAAa,CAC/B,MAAMtC,EAAea,EAAqBL,GAC1C,MAAM+B,EAAgBtB,EAAWM,IAAIvB,EAAcT,GACnD0B,EAAWC,IAAIlB,EAAcuC,EAAeF,EAC7C,CACA,OAAOA,CACR,CAAC9B,EAAA6B,gCAAA,OAAA7B,CAAA","ignoreList":[]}