{"version":3,"file":"ReuseComponent.js","names":["ReuseComponent","_dec","defineUI5Class","_dec2","property","type","_dec3","event","_class","_class2","_FPMComponent","_this","_len","arguments","length","args","Array","_key","call","this","_initializerDefineProperty","_descriptor","_descriptor2","hooksApplied","_inheritsLoose","_proto","prototype","setContainer","container","router","getRouter","initialize","applyHooks","pageController","getPageComponent","getRootController","controllerExtensionOverrideName","override","controllerExtensionOverride","pageControllerExtension","Log","error","hookName","attachHook","String","handlerFunction","getView","attachBeforeExit","fireEvent","createContent","async","attachModelContextChange","bind","Promise","resolve","rootControlCreated","setAggregation","aggregationName","object","suppressInvalidate","rootControl","getContextPath","contextPath","startsWith","currentView","CommonUtils","getCurrentPageView","getAppComponent","parentContextPath","getViewData","entitySet","getViewName","rootViewName","getManifestEntry","rootView","viewName","Error","parent","getParent","Component","getOwnerComponentFor","getExtensionAPI","FPMComponent","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer"],"sources":["./ReuseComponent.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport { defineUI5Class, event, property } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type ExtensionAPI from \"sap/fe/core/ExtensionAPI\";\nimport type TemplateComponent from \"sap/fe/core/TemplateComponent\";\nimport FPMComponent from \"sap/fe/core/fpm/Component\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport Component from \"sap/ui/core/Component\";\nimport type ComponentContainer from \"sap/ui/core/ComponentContainer\";\nimport type Control from \"sap/ui/core/Control\";\n\n@defineUI5Class(\"sap.fe.core.ReuseComponent\")\nclass ReuseComponent extends FPMComponent {\n\t@property({ type: \"object\" })\n\toverride?: Record<string, object>;\n\n\t// event that is fired once the component is initialized\n\t@event()\n\tinitialized!: Function;\n\n\tcontainer!: ComponentContainer;\n\n\thooksApplied = false;\n\n\trootControlCreated!: (control: Control) => void;\n\n\t/**\n\t * Sets the container of the component.\n\t *\n\t * This is being called by UI5. We override this method to keep track of the container and to initialize the router.\n\t * @param container The container\n\t * @returns The instance of the component\n\t */\n\tsetContainer(container: ComponentContainer): this {\n\t\tsuper.setContainer(container);\n\t\tthis.container = container;\n\n\t\tconst router = this.getRouter();\n\t\tif (router) {\n\t\t\t// once the container is set, we can initialize the router\n\t\t\trouter.initialize();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tapplyHooks(): void {\n\t\ttype FunctionMap = {\n\t\t\t[key: string]: Function;\n\t\t};\n\t\ttype DeepFunctionMap = {\n\t\t\t[key: string]: FunctionMap;\n\t\t};\n\n\t\tif (this.hooksApplied || !this.container) {\n\t\t\treturn;\n\t\t}\n\t\tconst pageController = this.getPageComponent().getRootController();\n\n\t\tif (!pageController) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const controllerExtensionOverrideName in this.override) {\n\t\t\tconst controllerExtensionOverride = this.override[controllerExtensionOverrideName];\n\t\t\tconst pageControllerExtension = (pageController as unknown as DeepFunctionMap)[controllerExtensionOverrideName];\n\n\t\t\tif (!pageControllerExtension) {\n\t\t\t\tLog.error(`The controller extension ${controllerExtensionOverrideName} does not exist in the page controller.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const hookName in controllerExtensionOverride) {\n\t\t\t\tconst attachHook = pageControllerExtension[`attach${String(hookName)}`];\n\t\t\t\tif (!attachHook) {\n\t\t\t\t\tLog.error(`The hook ${hookName} does not exist in the page controller extension ${controllerExtensionOverrideName}.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst handlerFunction = (controllerExtensionOverride as FunctionMap)[hookName];\n\n\t\t\t\tattachHook(handlerFunction);\n\t\t\t\tpageController.getView().attachBeforeExit(() => {\n\t\t\t\t\tthis.hooksApplied = false;\n\t\t\t\t\tpageControllerExtension[`detach${String(hookName)}`](handlerFunction);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis.hooksApplied = true;\n\t\tthis.fireEvent(\"initialized\");\n\t}\n\n\t/**\n\t * Creates the content of the component.\n\t *\n\t * This is being called by UI5. We override this method to implement our own template logic\n\t * and to inform UI5 when the root control is being created.\n\t * @returns A promise that resolves with the root control\n\t */\n\tasync createContent(): Promise<Control> {\n\t\tthis.attachModelContextChange(this.applyHooks.bind(this));\n\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.rootControlCreated = resolve;\n\t\t});\n\t}\n\n\t/**\n\t * Sets an aggregation of the component.\n\t *\n\t * This is being called by UI5. We override this method to know when the rootControl is being set.\n\t * @param aggregationName The name of the aggregation\n\t * @param object The object to set\n\t * @param suppressInvalidate Whether to suppress invalidation\n\t * @returns The instance of the component\n\t */\n\tsetAggregation(aggregationName: string, object: ManagedObject, suppressInvalidate?: boolean): this {\n\t\tif (aggregationName === \"rootControl\") {\n\t\t\tconst rootControl = object as Control;\n\t\t\tthis.rootControlCreated(rootControl);\n\t\t}\n\t\treturn super.setAggregation(aggregationName, object, suppressInvalidate);\n\t}\n\n\tgetContextPath(): string {\n\t\tconst contextPath = this.contextPath;\n\t\tif (contextPath?.startsWith(\"/\")) {\n\t\t\t// absolute path\n\t\t\treturn contextPath;\n\t\t} else {\n\t\t\t// relative path - we need to prepend the context path of the parent view\n\t\t\tconst currentView = CommonUtils.getCurrentPageView(this.getAppComponent());\n\t\t\tconst parentContextPath = currentView.getViewData().contextPath || \"/\" + currentView.getViewData().entitySet;\n\t\t\tif (contextPath) {\n\t\t\t\treturn parentContextPath + \"/\" + contextPath;\n\t\t\t} else {\n\t\t\t\treturn parentContextPath;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the view name of the reuse component.\n\t * This is being called by the template service to create the view.\n\t * @returns The view name\n\t */\n\tgetViewName(): string {\n\t\tconst rootViewName = this.getManifestEntry(\"sap.ui5\").rootView?.viewName;\n\t\tif (!rootViewName && !this.viewName) {\n\t\t\tthrow new Error(\"No root view defined in the manifest nor viewName set in the component\");\n\t\t}\n\t\treturn rootViewName || this.viewName;\n\t}\n\n\t/**\n\t * Returns the page component that owns the reuse component.\n\t * @returns The page component\n\t */\n\tgetPageComponent(): TemplateComponent {\n\t\t// the owner of the reuse component is not the page component but the app component.\n\t\t// we rely on the parent of the container to be the owned by the page component\n\t\t// and get the extensionAPI from there. If the parent is not a control, we throw an error\n\t\tconst parent = this.container?.getParent();\n\t\tif (!parent) {\n\t\t\tthrow new Error(\"The parent of the reuse component is not yet set. Thus, the page component cannot be retrieved.\");\n\t\t}\n\t\treturn Component.getOwnerComponentFor(parent) as TemplateComponent;\n\t}\n\n\t/**\n\t * Returns the extension API of the page component that owns the reuse component.\n\t * @returns The extension API\n\t */\n\tgetExtensionAPI(): ExtensionAPI {\n\t\treturn this.getPageComponent().getExtensionAPI();\n\t}\n}\n\nexport default ReuseComponent;\n"],"mappings":";;;;yrCAYMA,GAAcC,EADnBC,EAAe,8BAA6BC,EAE3CC,EAAS,CAAEC,KAAM,WAAWC,EAI5BC,IAAON,EAAAO,GAAAC,EAAA,SAAAC,GAAA,SAAAV,IAAA,IAAAW,EAAA,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAA,CAAAF,EAAAE,GAAAJ,UAAAI,EAAA,CAAAN,EAAAD,EAAAQ,KAAAC,QAAAJ,IAAAI,KAAAC,EAAAT,EAAA,WAAAU,EAAAV,GADRS,EAAAT,EAAA,cAAAW,EAAAX,KAMAY,aAAe,MAAK,OAAAZ,CAAA,CAAAa,EAAAxB,EAAAU,GAAA,IAAAe,EAAAzB,EAAA0B,UAIpBD,EAOAE,aAAA,SAAAA,EAAaC,GACZlB,EAAAgB,UAAMC,aAAYT,KAAAC,KAACS,GACnBT,KAAKS,UAAYA,EAEjB,MAAMC,EAASV,KAAKW,YACpB,GAAID,EAAQ,CAEXA,EAAOE,YACR,CAEA,OAAOZ,IACR,EAACM,EAEDO,WAAA,SAAAA,IAQC,GAAIb,KAAKI,eAAiBJ,KAAKS,UAAW,CACzC,MACD,CACA,MAAMK,EAAiBd,KAAKe,mBAAmBC,oBAE/C,IAAKF,EAAgB,CACpB,MACD,CAEA,IAAK,MAAMG,KAAmCjB,KAAKkB,SAAU,CAC5D,MAAMC,EAA8BnB,KAAKkB,SAASD,GAClD,MAAMG,EAA2BN,EAA8CG,GAE/E,IAAKG,EAAyB,CAC7BC,EAAIC,MAAM,4BAA4BL,4CACtC,QACD,CACA,IAAK,MAAMM,KAAYJ,EAA6B,CACnD,MAAMK,EAAaJ,EAAwB,SAASK,OAAOF,MAC3D,IAAKC,EAAY,CAChBH,EAAIC,MAAM,YAAYC,qDAA4DN,MAClF,QACD,CACA,MAAMS,EAAmBP,EAA4CI,GAErEC,EAAWE,GACXZ,EAAea,UAAUC,iBAAiB,KACzC5B,KAAKI,aAAe,MACpBgB,EAAwB,SAASK,OAAOF,MAAaG,IAEvD,CACD,CACA1B,KAAKI,aAAe,KACpBJ,KAAK6B,UAAU,cAChB,EAEAvB,EAOMwB,cAANC,eAAMD,IACL9B,KAAKgC,yBAAyBhC,KAAKa,WAAWoB,KAAKjC,OAEnD,OAAO,IAAIkC,QAASC,IACnBnC,KAAKoC,mBAAqBD,GAE5B,EAEA7B,EASA+B,eAAA,SAAAA,EAAeC,EAAyBC,EAAuBC,GAC9D,GAAIF,IAAoB,cAAe,CACtC,MAAMG,EAAcF,EACpBvC,KAAKoC,mBAAmBK,EACzB,CACA,OAAAlD,EAAAgB,UAAa8B,eAActC,KAAAC,KAACsC,EAAiBC,EAAQC,EACtD,EAAClC,EAEDoC,eAAA,SAAAA,IACC,MAAMC,EAAc3C,KAAK2C,YACzB,GAAIA,GAAaC,WAAW,KAAM,CAEjC,OAAOD,CACR,KAAO,CAEN,MAAME,EAAcC,EAAYC,mBAAmB/C,KAAKgD,mBACxD,MAAMC,EAAoBJ,EAAYK,cAAcP,aAAe,IAAME,EAAYK,cAAcC,UACnG,GAAIR,EAAa,CAChB,OAAOM,EAAoB,IAAMN,CAClC,KAAO,CACN,OAAOM,CACR,CACD,CACD,EAEA3C,EAKA8C,YAAA,SAAAA,IACC,MAAMC,EAAerD,KAAKsD,iBAAiB,WAAWC,UAAUC,SAChE,IAAKH,IAAiBrD,KAAKwD,SAAU,CACpC,MAAM,IAAIC,MAAM,yEACjB,CACA,OAAOJ,GAAgBrD,KAAKwD,QAC7B,EAEAlD,EAIAS,iBAAA,SAAAA,IAIC,MAAM2C,EAAS1D,KAAKS,WAAWkD,YAC/B,IAAKD,EAAQ,CACZ,MAAM,IAAID,MAAM,kGACjB,CACA,OAAOG,EAAUC,qBAAqBH,EACvC,EAEApD,EAIAwD,gBAAA,SAAAA,IACC,OAAO9D,KAAKe,mBAAmB+C,iBAChC,EAAC,OAAAjF,CAAA,CA5JO,CALoBkF,GAAY7D,EAAA8D,EAAA1E,EAAAiB,UAAA,YAAAvB,GAAA,CAAAiF,aAAA,KAAAC,WAAA,KAAAC,SAAA,KAAAC,YAAA,OAAAjE,EAAA6D,EAAA1E,EAAAiB,UAAA,eAAApB,GAAA,CAAA8E,aAAA,KAAAC,WAAA,KAAAC,SAAA,KAAAC,YAAA,OAAA9E,KAAAD,GAAA,OAoK1BR,CAAc","ignoreList":[]}