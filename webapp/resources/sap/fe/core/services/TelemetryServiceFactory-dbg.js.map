{"version":3,"names":["ParameterMap","name","type","TelemetryService","_Service","_this","_len","arguments","length","args","Array","_key","call","isEnabled","_exports","_inheritsLoose","_proto","prototype","init","context","getContext","appComponent","scopeObject","fioriDefinition","getManifestEntry","appId","registrationIds","join","initialize","urlParams","URLSearchParams","window","location","search","get","toLowerCase","Promise","resolve","storeAction","action","sourceTemplate","telemetryEvent","template","storeAndFlush","e","Log","debug","_telemetryEvent","validateEventCountPolicy","validateEndpointPolicy","eventsAsStr","localStorage","getItem","EventStoreKey","events","JSON","parse","push","CountBeforeFlush","flush","incrementEventCountStore","clearEndpointStore","updateEndpointStore","telemetryEventStr","stringify","setItem","body","buildRequestBody","fetch","targetUrl","method","map","event","parameterPerType","paramPart","_ref","paramName","paramType","parameters","updateEventCountStore","value","EventCountStoreKey","eventCountStr","eventCount","parseInt","isNaN","MaxTelemetry","EndpointStoreKey","Date","now","removeItem","timestamp","lastCheckTime","EndpointRetryPeriod","Service","TelemetryServiceFactory","_ServiceFactory","apply","_proto2","createInstance","oServiceContext","instance","ServiceFactory"],"sourceRoot":".","sources":["TelemetryServiceFactory.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { TemplateType } from \"sap/fe/core/converters/ManifestSettings\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type { ServiceContext } from \"types/metamodel_types\";\n\ntype TelemetryServiceSettings = {};\nexport type TelemetryFiterBarSearchEventType = \"FE.FilterBarSearch\";\nexport type TelemetryRecommendationType = \"FE.Recommendations\";\n\nexport type TelemetryEvent = {\n\ttype: TelemetryFiterBarSearchEventType | TelemetryRecommendationType;\n\tparameters: Record<string, string | number | boolean>;\n};\n\nexport type RecommendationTelemetry = {\n\t// How many times do we re-read the data?\n\t// number of times recommendations were fetched in the current view (irrespective of page/table context)\n\tnumberOfTimesRecommendationsFetched: number;\n\t// How long did the recommendation call take?\n\t// maximum time taken to receive recommendations\n\tmaxTimeTakenToReceiveRecommendations: number;\n\t// manimum time taken to receive recommendations\n\tminTimeTakenToReceiveRecommendations: number;\n\t// average time taken to receive recommendations\n\taverageTimeTakenToReceiveRecommendations: number;\n\t//number of times, placeholder is not seen on UI\n\tnumberOfTimesNoPlaceholderIsShownOnUI: number;\n\t// number of Field having recommendations\n\tnumberOfRecommendedFields: number;\n\t// number of Fields directly accepted through Accept button\n\tnumberOfFieldsAcceptedThroughAcceptButton: number;\n\t// number of Fields ignored through Accept button\n\tnumberOfFieldsIgnoredThroughIgnoreButton: number;\n\t// number of times top recommendation was selected\n\tnumberOfTimesTopRecommendationsSelected: number;\n\t// number of times non-top recommendation was selected\n\tnumberOfTimesNonTopRecommendationsSelected: number;\n\t// number of times non-recommended value was selected\n\tnumberOfTimesNonRecommendedValueWasSelected: number;\n\t// number of times empty recommendations were received from backend\n\tnumberOfTimesEmptyRecommendations: number;\n\t// number of times formatter was called to show recommended state\n\tnumberofTimesFormatterCalled: number;\n\t// total numberOfRecommendationsReceived\n\ttotalNumberOfRecommendationsReceived: number;\n\t// number of times formatter not called\n\tnumberOfTimesFormatterNotCalled: number;\n\t// total time taken\n\ttotalTimeTaken: number;\n};\n\nexport type TelemetryFilterBarSearchEvent = TelemetryEvent & {\n\ttype: \"FE.FilterBarSearch\";\n\tparameters: {\n\t\tcountFilterActions: number; //  How many filterChanged actions are performed\n\t\tcountFilters: number; // How many different filters are applied\n\t\tcountVariantFilters: number; // How many filter belong to a variant\n\t\tvariantLayer: string; // Type of variant\n\t\tautoLoad: boolean; // Is the app using auto load of table data\n\t};\n\ttemplate?: TemplateType;\n};\n\nexport type TelemetryRecommendations = TelemetryEvent & {\n\ttype: \"FE.Recommendations\";\n\tparameters: RecommendationTelemetry;\n\ttemplate?: TemplateType;\n};\n\nconst ParameterMap = {\n\t\"FE.FilterBarSearch\": [\n\t\t{ name: \"countFilterActions\", type: \"number\" },\n\t\t{ name: \"countFilters\", type: \"number\" },\n\t\t{ name: \"countVariantFilters\", type: \"number\" },\n\t\t{ name: \"variantLayer\", type: \"string\" },\n\t\t{ name: \"autoLoad\", type: \"boolean\" }\n\t],\n\t\"FE.Recommendations\": [\n\t\t{\n\t\t\tname: \"numberOfTimesRecommendationsFetched\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"maxTimeTakenToReceiveRecommendations\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"minTimeTakenToReceiveRecommendations\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"averageTimeTakenToReceiveRecommendations\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfFieldsAcceptedThroughAcceptButton\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfFieldsIgnoredThroughIgnoreButton\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfTimesNoPlaceholderIsShownOnUI\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfRecommendedFields\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfTimesTopRecommendationsSelected\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfTimesNonTopRecommendationsSelected\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfTimesNonRecommendedValueWasSelected\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfTimesEmptyRecommendations\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberofTimesFormatterCalled\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"totalNumberOfRecommendationsReceived\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"numberOfTimesFormatterNotCalled\",\n\t\t\ttype: \"number\"\n\t\t},\n\t\t{\n\t\t\tname: \"totalTimeTaken\",\n\t\t\ttype: \"number\"\n\t\t}\n\t]\n};\n\nexport type TelemetryEvents = TelemetryFilterBarSearchEvent | TelemetryRecommendations;\n\nexport class TelemetryService extends Service<TelemetryServiceSettings> {\n\tappId?: string;\n\n\tappComponent!: AppComponent;\n\n\tisEnabled = false;\n\n\tstatic MaxTelemetry = 500;\n\n\tstatic CountBeforeFlush = 50;\n\n\tstatic EndpointRetryPeriod = 1000 * 60 * 60 * 24; // 1 day\n\n\tstatic targetUrl = \"/sap/bc/ui2/flp;sap-metrics-only\";\n\n\tstatic EventStoreKey = \"EventStore\";\n\n\tstatic EndpointStoreKey = \"EndpointStore\";\n\n\tstatic EventCountStoreKey = \"EventCountStore\";\n\n\tinit(): void {\n\t\tconst context = this.getContext();\n\t\tthis.appComponent = context?.scopeObject as AppComponent;\n\t\tconst fioriDefinition = this.appComponent.getManifestEntry(\"sap.fiori\");\n\n\t\tthis.appId = fioriDefinition?.registrationIds?.join(\"-\");\n\t}\n\n\tasync initialize(): Promise<this> {\n\t\t// const environmentCapabilitiesService = (await this.appComponent.getService(\n\t\t// \t\"environmentCapabilities\"\n\t\t// )) as EnvironmentCapabilitiesService;\n\t\t// const feDefinition = this.appComponent.getManifestEntry(\"sap.fe\");\n\t\t// if (\n\t\t// \twindow.localStorage &&\n\t\t// \tfeDefinition?.app?.enableTelemetry === true &&\n\t\t// \tenvironmentCapabilitiesService.getCapabilities().InsightsSupported &&\n\t\t// \tthis.appId !== undefined\n\t\t// ) {\n\t\t// \tthis.isEnabled = true;\n\t\t// }\n\n\t\tconst urlParams = new URLSearchParams(window.location.search);\n\t\tif (urlParams.get(\"sap-ui-xx-feEnableGSM\")?.toLowerCase() === \"true\") {\n\t\t\tthis.isEnabled = true;\n\t\t}\n\n\t\treturn Promise.resolve(this);\n\t}\n\n\t/**\n\t * Entry point for FE telemetry data reporting. It catches all exceptions so that\n\t * any unhandled errors do not affect regular FE app functionalities.\n\t * @param action A telemetry event that contain metrics to be reported to GSM.\n\t * @param sourceTemplate The template that this originated from.\n\t */\n\tasync storeAction(action: TelemetryEvents, sourceTemplate: TemplateType): Promise<void> {\n\t\tif (this.isEnabled) {\n\t\t\tconst telemetryEvent = {\n\t\t\t\t...action,\n\t\t\t\ttemplate: sourceTemplate\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tawait this.storeAndFlush(telemetryEvent);\n\t\t\t} catch (e) {\n\t\t\t\tLog.debug(e as string);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Instead of directly sending individual telemetry\n\t * events to backend, this API implements multiple strategies to reduce the frequency of sending\n\t * telemetry events, and automatically turn off sending telemetry after collecting adequate data\n\t * samples.\n\t * @param _telemetryEvent A telemetry event that contain metrics to be reported to GSM.\n\t */\n\tprivate async storeAndFlush(_telemetryEvent: TelemetryEvent): Promise<void> {\n\t\t// Skip if reach max count we should collect\n\t\tif (!this.validateEventCountPolicy()) {\n\t\t\treturn;\n\t\t}\n\t\t// Skip if the endpoint didn't work recently\n\t\tif (!this.validateEndpointPolicy()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fetch telemetry events from store\n\t\tconst eventsAsStr = window.localStorage.getItem(TelemetryService.EventStoreKey);\n\t\tlet events: TelemetryEvent[];\n\t\tif (!eventsAsStr) {\n\t\t\tevents = [];\n\t\t} else {\n\t\t\tevents = JSON.parse(eventsAsStr);\n\t\t}\n\t\tevents.push(_telemetryEvent);\n\n\t\t// Once we have CountBeforeFlush entries flush them\n\t\tif (events.length >= TelemetryService.CountBeforeFlush) {\n\t\t\ttry {\n\t\t\t\tawait this.flush(events);\n\t\t\t\t// Keep count of how many batches we have submitted in total\n\t\t\t\tthis.incrementEventCountStore(events.length);\n\t\t\t\tthis.clearEndpointStore();\n\t\t\t} catch {\n\t\t\t\t// Keep track if the endpoint was not reachable\n\t\t\t\tthis.updateEndpointStore();\n\t\t\t}\n\n\t\t\t// No matter endpoint is reachable or not, we clean the storage anyway.\n\t\t\t// To avoid risk of accumulating large amount of telemetry data.\n\t\t\t// Hope we will collect useful data in the future.\n\t\t\tevents = [];\n\t\t}\n\n\t\t// Save telemetry events back to store\n\t\tconst telemetryEventStr = JSON.stringify(events);\n\t\twindow.localStorage.setItem(TelemetryService.EventStoreKey, telemetryEventStr);\n\t}\n\n\t/**\n\t * Send a batch of telemetry events to GSM endpoint.\n\t * @param events An array of telemetry events\n\t * @returns The response from the GSM endpoint\n\t */\n\tprivate async flush(events: TelemetryEvent[]): Promise<Response | undefined> {\n\t\tconst body = this.buildRequestBody(events);\n\n\t\t// Send a batch of 50 events to backend.\n\t\treturn fetch(TelemetryService.targetUrl, {\n\t\t\tmethod: \"POST\",\n\t\t\tbody\n\t\t});\n\t}\n\n\t/**\n\t * Utility function to serialize telemetry event to string format accepted by GSM endpoint.\n\t * Example output of a batch of 2 telemetry events looks like:\n\t * ui5_action{ type=\"FE.FilterBarSearch\", countFilterActions=2, countFilters=1, countVariantFilters=1, variantLayer=\"variant0\", autoLoad=true } 1\n\t * ui5_action{ type=\"FE.FilterBarSearch\", countFilterActions=3, countFilters=1, countVariantFilters=0, variantLayer=\"variant1\", autoLoad=false } 1\n\t * This will then be used with the gsm endpoint.\n\t * @param events An array of telemetry events\n\t * @returns Serialized data to be posted to GSM endpoint\n\t */\n\tprivate buildRequestBody(events: TelemetryEvent[]): string | undefined {\n\t\t// This method is triggered when event size is greater or equal than TelemetryService.MaxTelemetry\n\t\t// Input is always an array list of events >= 0\n\n\t\treturn events\n\t\t\t.map((event) => {\n\t\t\t\tconst parameterPerType = ParameterMap[event.type];\n\t\t\t\tconst paramPart: string[] = parameterPerType.map(({ name: paramName, type: paramType }) => {\n\t\t\t\t\tswitch (paramType) {\n\t\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\tcase \"boolean\":\n\t\t\t\t\t\t\treturn `${paramName}=${event.parameters[paramName]}`;\n\t\t\t\t\t\tcase \"string\":\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn `${paramName}=\"${event.parameters[paramName]}`;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn `ui5_action{ type=\"${event.type}\", ${paramPart.join(\", \")} } 1\\n`;\n\t\t\t})\n\t\t\t.join(\"\");\n\t}\n\n\t/**\n\t * Set value to an entry in localStorage.\n\t * @param value New value in localStorage\n\t */\n\tprivate updateEventCountStore(value: number): void {\n\t\twindow.localStorage.setItem(TelemetryService.EventCountStoreKey, `${value}`);\n\t}\n\n\t/**\n\t * Add the input value to the existing value in an entry in localStorage.\n\t * @param value Amount incremented to an existing value\n\t */\n\tprivate incrementEventCountStore(value: number): void {\n\t\tconst eventCountStr = window.localStorage.getItem(TelemetryService.EventCountStoreKey);\n\n\t\t// If store is empty, treat it as having value 0. Increment from 0 by amount 'value'.\n\t\tif (!eventCountStr) {\n\t\t\tthis.updateEventCountStore(value);\n\t\t\treturn;\n\t\t}\n\n\t\t// validateEventCountPolicy already sanitizes invalid events\n\t\tconst eventCount = parseInt(eventCountStr, 10);\n\t\tthis.updateEventCountStore(eventCount + value);\n\t}\n\n\t/**\n\t * To avoid risk of filling backend storage with telemetry data, this policy\n\t * tracks total amount of telemetry events sent to backend from a client, and\n\t * terminates sending telemetry events if max threshold reached.\n\t *\n\t * This is a best effort implementation. If localStorage is cleared by FE end user,\n\t * telemetry events will be sent again.\n\t * @returns `true` - submitted telemetry event count doesn't exceed limit\n\t *  `true` - no valid count was found, restart from 0\n\t *  `false` - submitted teleemtry event count exceeds limit\n\t */\n\tprivate validateEventCountPolicy(): boolean {\n\t\tconst eventCountStr = window.localStorage.getItem(TelemetryService.EventCountStoreKey);\n\n\t\tif (!eventCountStr) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst eventCount = parseInt(eventCountStr, 10);\n\t\tif (isNaN(eventCount)) {\n\t\t\t// If invalid stored value found, reset it\n\t\t\tthis.updateEventCountStore(0);\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn eventCount < TelemetryService.MaxTelemetry;\n\t\t}\n\t}\n\n\tprivate updateEndpointStore(): void {\n\t\twindow.localStorage.setItem(TelemetryService.EndpointStoreKey, `${Date.now()}`);\n\t}\n\n\tprivate clearEndpointStore(): void {\n\t\twindow.localStorage.removeItem(TelemetryService.EndpointStoreKey);\n\t}\n\n\t/**\n\t * Compare current timeInMilliseconds with the timeInMilliseconds stored in localStorage.\n\t * Usage: If connection to endpoint failed, it is likely the endpoint is not available on the target\n\t * system, stop collecting and send telemetry for period of time defined in TelemetryService.EndpointRetryPeriod.\n\t * @returns `true` - if there is no timestamp stored in localStorage.\n\t * \t`true` - if the elapsed time is greater than the value defined in TelemetryService.EndpointRetryPeriod.\n\t *  `false` - if the elapsed time is smaller than the value defined in TelemetryService.EndpointRetryPeriod.\n\t */\n\tprivate validateEndpointPolicy(): boolean {\n\t\tconst timestamp = window.localStorage.getItem(TelemetryService.EndpointStoreKey);\n\n\t\tif (!timestamp) {\n\t\t\treturn true;\n\t\t}\n\t\tconst now = Date.now();\n\n\t\tconst lastCheckTime = parseInt(timestamp, 10);\n\t\tif (isNaN(lastCheckTime)) {\n\t\t\t// time stamp of last failed endpoint connection is corrupted\n\t\t\tthis.updateEndpointStore();\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn now - lastCheckTime > TelemetryService.EndpointRetryPeriod;\n\t\t}\n\t}\n}\n\nexport default class TelemetryServiceFactory extends ServiceFactory<TelemetryServiceSettings> {\n\tasync createInstance(oServiceContext: ServiceContext<TelemetryServiceSettings>): Promise<TelemetryService> {\n\t\tconst instance = new TelemetryService(oServiceContext);\n\t\treturn instance.initialize();\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"TelemetryServiceFactory-dbg.js"}