{"version":3,"file":"NavigationServiceFactory.js","names":["NavigationService","_Service","apply","this","arguments","_exports","_inheritsLoose","_proto","prototype","init","oContext","getContext","oComponent","scopeObject","oNavHandler","NavigationHandler","setModel","getModel","initPromise","Promise","resolve","exit","destroy","navigate","sSemanticObject","sActionName","vNavigationParameters","oInnerAppData","fnOnError","oExternalAppData","sNavMode","parseNavigation","getAppSpecificHash","async","appHash","_getAppSpecificHash","getAppStateKeyAndUrlParameters","sSelectionVariant","_getAppStateKeyAndUrlParameters","getTechnicalParameters","setTechnicalParameters","aTechnicalParameters","oModel","storeInnerAppStateAsync","mInnerAppData","bImmediateHashReplace","bSkipHashReplace","appComponent","getRouterProxy","setAppStateUpdating","reject","then","result","replaceHash","sAppStateKey","replaceInnerAppStateKey","sAppHash","_replaceInnerAppStateKey","getUrlParametersFromSelectionVariant","vSelectionVariant","_getURLParametersFromSelectionVariant","saveAppStateWithImmediateReturn","oInSelectionVariant","toJSONString","oSelectionVariant","JSON","parse","oXAppStateObject","selectionVariant","oReturn","_saveAppStateWithImmediateReturn","appStateKey","undefined","mixAttributesAndSelectionVariant","vSemanticAttributes","iSuppressionBehavior","constructContextUrl","sEntitySetName","getInterface","getIAppStateKey","checkIsPotentiallySensitive","oData","_checkIsPotentiallySensitive","Service","fnGetEmptyObject","fnGetPromise","fnGetJQueryPromise","oMyDeffered","jQuery","Deferred","promise","fnGetEmptyString","NavigationServicesMock","_ServiceFactory","_this","call","createEmptyAppState","getAppState","getStartupAppState","_proto2","ServiceFactory","NavigationServiceFactory","_ServiceFactory2","_proto3","createInstance","oServiceContext","oNavigationService","sap","ui","require","oService"],"sources":["./NavigationServiceFactory.ts"],"sourcesContent":["import type { InnerAppData } from \"sap/fe/navigation/NavigationHandler\";\nimport NavigationHandler from \"sap/fe/navigation/NavigationHandler\";\nimport type SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type { SerializedSelectionVariant } from \"sap/fe/navigation/SelectionVariant\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport jQuery from \"sap/ui/thirdparty/jquery\";\nimport type { ServiceContext } from \"types/metamodel_types\";\n\ntype NavigationServiceSettings = {};\nexport class NavigationService extends Service<NavigationServiceSettings> {\n\tinitPromise!: Promise<this>;\n\n\toNavHandler!: NavigationHandler;\n\n\tinit(): void {\n\t\tconst oContext = this.getContext(),\n\t\t\toComponent = oContext && oContext.scopeObject;\n\n\t\tthis.oNavHandler = new NavigationHandler(oComponent);\n\t\tthis.oNavHandler.setModel(oComponent.getModel());\n\t\tthis.initPromise = Promise.resolve(this);\n\t}\n\n\texit(): void {\n\t\tthis.oNavHandler.destroy();\n\t}\n\n\t/**\n\t * Triggers a cross-app navigation after saving the inner and the cross-app states.\n\t * @param sSemanticObject Semantic object of the target app\n\t * @param sActionName Action of the target app\n\t * @param [vNavigationParameters] Navigation parameters as an object with key/value pairs or as a string representation of\n\t *        such an object. If passed as an object, the properties are not checked against the <code>IsPotentialSensitive</code> or\n\t *        <code>Measure</code> type.\n\t * @param [oInnerAppData] Object for storing current state of the app\n\t * @param [fnOnError] Callback that is called if an error occurs during navigation <br>\n\t * @param [oExternalAppData] Object for storing the state which will be forwarded to the target component.\n\t * @param oExternalAppData.valueTexts\n\t * @param oExternalAppData.presentationVariant\n\t * @param oExternalAppData.selectionVariant\n\t * @param [sNavMode] Argument is used to overwrite the FLP-configured target for opening a URL. If used, only the\n\t *        <code>explace</code> or <code>inplace</code> values are allowed. Any other value will lead to an exception\n\t *        <code>NavigationHandler.INVALID_NAV_MODE</code>.\n\t */\n\tnavigate(\n\t\tsSemanticObject: string,\n\t\tsActionName: string,\n\t\tvNavigationParameters: string | object,\n\t\toInnerAppData?: InnerAppData,\n\t\tfnOnError?: Function,\n\t\toExternalAppData?: {\n\t\t\tvalueTexts?: object | undefined;\n\t\t\tpresentationVariant?: object | undefined;\n\t\t\tselectionVariant?: object | undefined;\n\t\t},\n\t\tsNavMode?: string\n\t): void {\n\t\t// TODO: Navigation Handler does not handle navigation without a context\n\t\t// but in v4 DataFieldForIBN with requiresContext false can trigger a navigation without any context\n\t\t// This should be handled\n\t\tthis.oNavHandler.navigate(\n\t\t\tsSemanticObject,\n\t\t\tsActionName,\n\t\t\tvNavigationParameters,\n\t\t\toInnerAppData,\n\t\t\tfnOnError,\n\t\t\toExternalAppData,\n\t\t\tsNavMode\n\t\t);\n\t}\n\n\t/**\n\t * Parses the incoming URL and returns a Promise.\n\t * @returns A Promise object which returns the\n\t * extracted app state, the startup parameters, and the type of navigation when execution is successful,\n\t */\n\tparseNavigation(): jQuery.Promise<unknown[]> {\n\t\treturn this.oNavHandler.parseNavigation() as jQuery.Promise<unknown[]>;\n\t}\n\n\t/**\n\t * Get App specific hash.\n\t * @param appHash The path string\n\t * @returns A string representing base path\n\t */\n\tasync getAppSpecificHash(appHash: string): Promise<string | undefined> {\n\t\treturn this.oNavHandler._getAppSpecificHash(appHash);\n\t}\n\n\t/**\n\t * Processes selectionVariant string and returns a Promise object (semanticAttributes and AppStateKey).\n\t * @param sSelectionVariant Stringified JSON object\n\t * @returns A Promise object to monitor when all actions in the function have been executed; if the execution is successful, the\n\t *          semanticAttributes as well as the appStateKey are returned; if an error occurs, an error object of type\n\t *          {@link sap.fe.navigation.NavError} is returned\n\t * <br>\n\t * @example <code>\n\t *\n\t * \t\tvar oSelectionVariant = new sap.fe.navigation.SelectionVariant();\n\t * \t\toSelectionVariant.addSelectOption(\"CompanyCode\", \"I\", \"EQ\", \"0001\");\n\t * \t\toSelectionVariant.addSelectOption(\"Customer\", \"I\", \"EQ\", \"C0001\");\n\t * \t\tvar sSelectionVariant= oSelectionVariant.toJSONString();\n\t *\n\t * \t\tvar oNavigationHandler = new sap.fe.navigation.NavigationHandler(oController);\n\t * \t\tvar oPromiseObject = oNavigationHandler._getAppStateKeyAndUrlParameters(sSelectionVariant);\n\t *\n\t * \t\toPromiseObject.done(function(oSemanticAttributes, sAppStateKey){\n\t * \t\t\t// here you can add coding that should run after all app state and the semantic attributes have been returned.\n\t * \t\t});\n\t *\n\t * \t\toPromiseObject.fail(function(oError){\n\t * \t\t\t//some error handling\n\t * \t\t});\n\t *\n\t * </code>\n\t */\n\t// eslint-disable-next-line @typescript-eslint/promise-function-async\n\tgetAppStateKeyAndUrlParameters(sSelectionVariant: string): JQuery.Promise<string[], unknown, unknown> {\n\t\treturn this.oNavHandler._getAppStateKeyAndUrlParameters(sSelectionVariant);\n\t}\n\n\t/**\n\t * Gets the application specific technical parameters.\n\t * @returns Containing the technical parameters.\n\t */\n\tgetTechnicalParameters(): string[] {\n\t\treturn this.oNavHandler.getTechnicalParameters();\n\t}\n\n\t/**\n\t * Sets the application specific technical parameters. Technical parameters will not be added to the selection variant passed to the\n\t * application.\n\t * As a default sap-system, sap-ushell-defaultedParameterNames and hcpApplicationId are considered as technical parameters.\n\t * @param aTechnicalParameters List of parameter names to be considered as technical parameters. <code>null</code> or\n\t *        <code>undefined</code> may be used to reset the complete list.\n\t */\n\tsetTechnicalParameters(aTechnicalParameters: unknown[]): void {\n\t\tthis.oNavHandler.setTechnicalParameters(aTechnicalParameters);\n\t}\n\n\t/**\n\t * Sets the model that is used for verification of sensitive information. If the model is not set, the unnamed component model is used for the\n\t * verification of sensitive information.\n\t * @param oModel Model For checking sensitive information\n\t */\n\tsetModel(oModel: ODataModel): void {\n\t\tthis.oNavHandler.setModel(oModel);\n\t}\n\n\t/**\n\t * Changes the URL according to the current app state and stores the app state for later retrieval.\n\t * @param mInnerAppData Object containing the current state of the app\n\t * @param [bImmediateHashReplace] If set to false, the inner app hash will not be replaced until storing is successful; do not\n\t *        set to false if you cannot react to the resolution of the Promise, for example, when calling the beforeLinkPressed event\n\t * @param [bSkipHashReplace] If set to true, the inner app hash will not be replaced in the storeInnerAppState. Also the bImmediateHashReplace\n\t * \t\t  will be ignored.\n\t * @returns A Promise object to monitor when all the actions of the function have been executed; if the execution is successful, the\n\t *          app state key is returned; if an error occurs, an object of type {@link sap.fe.navigation.NavError} is\n\t *          returned\n\t */\n\tasync storeInnerAppStateAsync(\n\t\tmInnerAppData: InnerAppData,\n\t\tbImmediateHashReplace?: boolean,\n\t\tbSkipHashReplace?: boolean\n\t): Promise<string> {\n\t\t// safely converting JQuerry deferred to ES6 promise\n\t\tconst appComponent = this.getContext() && this.getContext().scopeObject;\n\t\tappComponent?.getRouterProxy().setAppStateUpdating(true);\n\t\treturn new Promise<string>((resolve, reject) =>\n\t\t\tthis.oNavHandler.storeInnerAppStateAsync(mInnerAppData, bImmediateHashReplace, bSkipHashReplace).then(resolve, reject)\n\t\t).then((result) => {\n\t\t\tappComponent?.getRouterProxy().setAppStateUpdating(false);\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t/**\n\t * Changes the URL according to the current sAppStateKey. As an reaction route change event will be triggered.\n\t * @param sAppStateKey The new app state key.\n\t */\n\treplaceHash(sAppStateKey: string): void {\n\t\tthis.oNavHandler.replaceHash(sAppStateKey);\n\t}\n\n\treplaceInnerAppStateKey(sAppHash: string, sAppStateKey: string): string | undefined {\n\t\treturn this.oNavHandler._replaceInnerAppStateKey(sAppHash, sAppStateKey);\n\t}\n\n\t/**\n\t * Get single values from SelectionVariant for url parameters.\n\t * @param [vSelectionVariant]\n\t * @param [vSelectionVariant.oUrlParamaters]\n\t * @returns The url parameters\n\t */\n\tgetUrlParametersFromSelectionVariant(vSelectionVariant: string | SelectionVariant | undefined): Record<string, string> {\n\t\treturn this.oNavHandler._getURLParametersFromSelectionVariant(vSelectionVariant);\n\t}\n\n\t/**\n\t * Save app state and return immediately without waiting for response.\n\t * @param oInSelectionVariant Instance of sap.fe.navigation.SelectionVariant\n\t * @returns AppState key\n\t */\n\tsaveAppStateWithImmediateReturn(oInSelectionVariant: SelectionVariant): string | undefined {\n\t\tif (oInSelectionVariant) {\n\t\t\tconst sSelectionVariant = oInSelectionVariant.toJSONString(), // create an SV for app state in string format\n\t\t\t\toSelectionVariant = JSON.parse(sSelectionVariant), // convert string into JSON to store in AppState\n\t\t\t\toXAppStateObject = {\n\t\t\t\t\tselectionVariant: oSelectionVariant\n\t\t\t\t},\n\t\t\t\toReturn = this.oNavHandler._saveAppStateWithImmediateReturn(oXAppStateObject);\n\t\t\treturn oReturn?.appStateKey ? oReturn.appStateKey : \"\";\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Mix Attributes and selectionVariant.\n\t * @param vSemanticAttributes Object/(Array of Objects) containing key/value pairs\n\t * @param sSelectionVariant The selection variant in string format as provided by the SmartFilterBar control\n\t * @param iSuppressionBehavior Indicates whether semantic\n\t *        attributes with special values (see {@link sap.fe.navigation.SuppressionBehavior suppression behavior}) must be\n\t *        suppressed before they are combined with the selection variant; several\n\t *        {@link sap.fe.navigation.SuppressionBehavior suppression behaviors} can be combined with the bitwise OR operator\n\t *        (|)\n\t * @returns Instance of {@link sap.fe.navigation.SelectionVariant}\n\t */\n\tmixAttributesAndSelectionVariant(\n\t\tvSemanticAttributes: object | unknown[],\n\t\tsSelectionVariant: string | SerializedSelectionVariant,\n\t\tiSuppressionBehavior?: number\n\t): SelectionVariant {\n\t\treturn this.oNavHandler.mixAttributesAndSelectionVariant(vSemanticAttributes, sSelectionVariant, iSuppressionBehavior);\n\t}\n\n\t/**\n\t * The method creates a context url based on provided data. This context url can either be used as.\n\t * @param sEntitySetName Used for url determination\n\t * @param oModel The ODataModel used for url determination. If omitted, the NavigationHandler model is used.\n\t * @returns The context url for the given entities\n\t */\n\tconstructContextUrl(sEntitySetName: string, oModel: ODataModel): string {\n\t\treturn this.oNavHandler.constructContextUrl(sEntitySetName, oModel);\n\t}\n\n\tgetInterface(): this {\n\t\treturn this;\n\t}\n\n\t/**\n\t * The method returns iAppState key for the current navgation handler instance.\n\t * @returns IAppState key\n\t */\n\tgetIAppStateKey(): string | undefined {\n\t\treturn this.oNavHandler.getIAppStateKey();\n\t}\n\n\tcheckIsPotentiallySensitive(oData: Object): unknown {\n\t\treturn this.oNavHandler._checkIsPotentiallySensitive(oData);\n\t}\n}\nfunction fnGetEmptyObject(): {} {\n\treturn {};\n}\n\nasync function fnGetPromise(): Promise<{}> {\n\treturn Promise.resolve({});\n}\n// eslint-disable-next-line @typescript-eslint/promise-function-async\nfunction fnGetJQueryPromise(): JQuery.Promise<unknown> {\n\tconst oMyDeffered = jQuery.Deferred();\n\toMyDeffered.resolve({}, {}, \"initial\");\n\treturn oMyDeffered.promise();\n}\n\nfunction fnGetEmptyString(): string {\n\treturn \"\";\n}\nexport class NavigationServicesMock extends ServiceFactory<NavigationServiceSettings> {\n\tinitPromise: Promise<this>;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.initPromise = Promise.resolve(this);\n\t}\n\n\tgetInterface(): this {\n\t\treturn this;\n\t}\n\n\t// return empty object\n\tcreateEmptyAppState = fnGetEmptyObject;\n\n\tmixAttributesAndSelectionVariant = fnGetEmptyObject;\n\n\t// return promise\n\tgetAppState = fnGetPromise;\n\n\tgetStartupAppState = fnGetPromise;\n\n\tparseNavigation = fnGetJQueryPromise;\n\n\t// return empty string\n\tconstructContextUrl = fnGetEmptyString;\n\n\treplaceInnerAppStateKey(sAppHash: string): string {\n\t\treturn sAppHash ? sAppHash : \"\";\n\t}\n\n\tgetIAppStateKey = fnGetEmptyString;\n\n\tnavigate(): void {\n\t\t// Don't do anything\n\t}\n}\n\nclass NavigationServiceFactory extends ServiceFactory<NavigationServiceSettings> {\n\tasync createInstance(oServiceContext: ServiceContext<NavigationServiceSettings>): Promise<NavigationService> {\n\t\tconst oNavigationService = sap.ui.require(\"sap/ushell/Container\")\n\t\t\t? new NavigationService(oServiceContext)\n\t\t\t: new NavigationServicesMock();\n\t\t// Wait For init\n\t\treturn oNavigationService.initPromise.then(function (oService) {\n\t\t\treturn oService as NavigationService;\n\t\t});\n\t}\n}\n\nexport default NavigationServiceFactory;\n"],"mappings":"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","ignoreList":[]}