{"version":3,"file":"ValueHelpHistoryServiceFactory.js","names":["APP_LANGUAGE","ValueHelpHistoryService","_Service","apply","this","arguments","_exports","_inheritsLoose","_proto","prototype","init","initialize","async","context","getContext","appComponent","scopeObject","environmentCapabilities","shellServices","Promise","all","getService","appId","getManifestEntry","id","hasUshell","getCapabilities","UShell","enabled","getShellConfig","apps","inputFieldHistory","historyOptOutProvider","HistoryOptOutProvider","err","Log","error","Error","message","String","registerShellHook","createOptOutUserProfileEntry","EventBus","getInstance","subscribeOnce","getShellExtensionService","getExtensionService","getPersonalizer","containerId","itemId","persIdObj","container","item","scope","undefined","getGlobalPersonalizer","globalPersonalizer","historyPrefix","getGlobalDefaultData","historyEnabled","suggestionsEnabled","getGlobalHistoryData","globalHistoryData","persData","getPersData","getHistoryEnabled","setHistoryEnabled","setPersData","createAppContainerId","uuid","replace","char","random","Math","toString","addAppToGlobalHistory","getAppPersonalizer","appPersonalizer","getAppDefaultData","appHistoryData","appDataKey","getAppHistoryData","getFieldDataFromService","fieldPath","appData","fieldData","appLanguage","Localization","getLanguage","filter","data","setFieldDataWithService","historyAppData","getDistinct","dataList","uniqueFlags","distinct","key","Object","values","join","push","deleteHistoryForAllApps","deletePromises","appIds","keys","deletePersonalizationContainer","getFieldData","historyEnabledShell","Boolean","historyEnabledUser","map","obj","entries","_ref","_","startsWith","reduce","accumulator","_ref2","value","setFieldData","fieldOldData","dataToSet","reverse","concat","slice","maxHistoryItems","Service","ValueHelpHistoryServiceFactory","_ServiceFactory","_proto2","createInstance","serviceContext","instance","ServiceFactory"],"sources":["./ValueHelpHistoryServiceFactory.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport Localization from \"sap/base/i18n/Localization\";\nimport type { IShellServices, PersonalizerType } from \"sap/fe/core/services/ShellServicesFactory\";\nimport HistoryOptOutProvider from \"sap/fe/core/services/valueHelpService/HistoryOptOutProvider\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type Extension from \"sap/ushell/services/Extension\";\nimport type { ServiceContext } from \"types/metamodel_types\";\nimport type AppComponent from \"../AppComponent\";\nimport type { EnvironmentCapabilitiesService } from \"./EnvironmentServiceFactory\";\n\n//\n// Some remarks:\n// To store history data in LREP via ushell personalisation service, we use the same data structures as in V2:\n// - \"Global\" History Data: A mapping from appId to a uuid-like containerID; and a user-specific 'history enabled' switch\n// - App History Data: A mapping from container ID to the valuehelp fields and its history data\n// To avoid backend calls, we cache the data also in the class.\n//\n\ntype AppIdType = string;\ntype ContainerIdType = string;\n\ntype GlobalHistoryDataType = {\n\thistoryEnabled: boolean;\n\tsuggestionsEnabled: boolean;\n\tapps: Record<AppIdType, ContainerIdType>;\n};\n\nexport type FieldDataType = { [key: string]: string | number | boolean | null | FieldDataType };\n\ntype ContainerId2FieldDataType = Record<string, FieldDataType[] | undefined>;\n\ntype AppHistoryDataType = Record<ContainerIdType, ContainerId2FieldDataType>;\n\nexport type ValueHelpHistorySettings = {};\n\nconst APP_LANGUAGE = \"@AppLanguage\";\n\n/**\n * @interface IValueHelpHistoryService\n */\nexport interface IValueHelpHistoryService {\n\tgetHistoryEnabled(): Promise<boolean>;\n\n\tsetHistoryEnabled(enabled: boolean): Promise<void>;\n\n\tdeleteHistoryForAllApps(): Promise<void>;\n\n\tgetFieldData(fieldPath: string): Promise<FieldDataType[]>;\n\n\tsetFieldData(fieldPath: string, fieldData: FieldDataType[]): Promise<void>;\n\n\tgetShellExtensionService(): Extension;\n}\n\n/**\n * Base implementation of the ValueHelpHistoryService\n *\n */\nexport class ValueHelpHistoryService extends Service<ValueHelpHistorySettings> implements IValueHelpHistoryService {\n\tprivate appId!: string; // set in init\n\n\tprivate historyOptOutProvider!: HistoryOptOutProvider;\n\n\tprivate shellServices!: IShellServices;\n\n\tprivate globalHistoryData?: GlobalHistoryDataType;\n\n\tprivate appHistoryData?: AppHistoryDataType;\n\n\tprivate globalPersonalizer?: PersonalizerType;\n\n\tprivate appPersonalizer?: PersonalizerType;\n\n\tprivate static readonly appDataKey = \"sapui5.history\";\n\n\tprivate static readonly maxHistoryItems = 5;\n\n\t/**\n\t * Constructor for the class.\n\t */\n\tinit(): void {}\n\n\t/**\n\t * Initialize the history service.\n\t * It checks the enablement of the history service and starts the creation of the History opt-out dialog.\n\t * @returns Promise that is resolved when environment service and shell service are checked.\n\t */\n\tasync initialize(): Promise<this> {\n\t\tconst context = this.getContext(),\n\t\t\tappComponent = context.scopeObject as AppComponent;\n\n\t\ttry {\n\t\t\tconst [environmentCapabilities, shellServices] = await Promise.all([\n\t\t\t\tappComponent.getService(\"environmentCapabilities\"),\n\t\t\t\tappComponent.getService(\"shellServices\")\n\t\t\t]);\n\t\t\tthis.shellServices = shellServices;\n\t\t\tthis.appId = appComponent.getManifestEntry(\"sap.app\").id || \"unknownAppId\";\n\n\t\t\tconst hasUshell = (environmentCapabilities as EnvironmentCapabilitiesService).getCapabilities().UShell,\n\t\t\t\tenabled = (shellServices as IShellServices).getShellConfig()?.apps?.inputFieldHistory?.enabled;\n\n\t\t\tif (hasUshell && enabled) {\n\t\t\t\tthis.historyOptOutProvider = new HistoryOptOutProvider(this);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tLog.error(\"Cannot retrieve EnvironmentCapabilities or ShellServices\", err instanceof Error ? err.message : String(err));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register the dedicated menu in the shell to maintain user preferences.\n\t */\n\tpublic async registerShellHook(): Promise<void> {\n\t\tif (this.historyOptOutProvider) {\n\t\t\tawait this.historyOptOutProvider.createOptOutUserProfileEntry();\n\n\t\t\t// If the mneu was never loaded, on first load it removes all the custom actions\n\t\t\tEventBus.getInstance().subscribeOnce(\"shell\", \"userActionsMenuCompLoaded\", async () => {\n\t\t\t\tawait this.historyOptOutProvider.createOptOutUserProfileEntry();\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the shell extension service.\n\t * This is used by the HistOptOutProvider to add a user menu entry.\n\t * @returns Shell extension service\n\t */\n\tgetShellExtensionService(): Extension {\n\t\treturn this.shellServices.getExtensionService();\n\t}\n\n\t/**\n\t * Get the personalizer from the shell service.\n\t * @param containerId The container ID to access the personalization data\n\t * @param itemId The item ID to access the personalization data\n\t * @returns Personalizer from the shell service\n\t */\n\tprivate async getPersonalizer(containerId: string, itemId: string): Promise<PersonalizerType> {\n\t\tconst persIdObj = {\n\t\t\t\tcontainer: containerId,\n\t\t\t\titem: itemId\n\t\t\t},\n\t\t\tscope = {}; // use defaults from shellServices\n\n\t\treturn this.shellServices.getPersonalizer(persIdObj, scope, undefined);\n\t}\n\n\t//\n\t// The following methodsare based on: sap\\ui\\comp\\historyvalues\\HistoryGlobalDataService.js\n\t//\n\n\t/**\n\t * Get the global personalizer from the shell service and store it in this class.\n\t * @returns Global personalizer from the shell service\n\t */\n\tprivate async getGlobalPersonalizer(): Promise<PersonalizerType> {\n\t\tif (!this.globalPersonalizer) {\n\t\t\tconst historyPrefix = \"sapui5.history.\";\n\t\t\tconst containerId = historyPrefix + \"HistorySettings\";\n\t\t\tconst itemId = historyPrefix + \"settings\";\n\t\t\tthis.globalPersonalizer = await this.getPersonalizer(containerId, itemId);\n\t\t}\n\t\treturn this.globalPersonalizer;\n\t}\n\n\t/**\n\t * Get the global history default data.\n\t * This is the initial data structure if no global history data is stored yet.\n\t * @returns Global history default data\n\t */\n\tprivate getGlobalDefaultData(): GlobalHistoryDataType {\n\t\treturn {\n\t\t\thistoryEnabled: true,\n\t\t\tsuggestionsEnabled: false,\n\t\t\tapps: {}\n\t\t};\n\t}\n\n\t/**\n\t * Get the global history data from the personalization service or create default data.\n\t * @returns Promise which is resolved to global history data\n\t */\n\tprivate async getGlobalHistoryData(): Promise<GlobalHistoryDataType> {\n\t\tif (!this.globalHistoryData) {\n\t\t\tconst globalPersonalizer = await this.getGlobalPersonalizer();\n\t\t\tconst persData = (await globalPersonalizer.getPersData()) as GlobalHistoryDataType | undefined;\n\t\t\tthis.globalHistoryData = persData ? { ...persData } : this.getGlobalDefaultData();\n\t\t}\n\t\treturn this.globalHistoryData;\n\t}\n\n\t/**\n\t * Get the status of the user-specific history enabled switch from the global history data.\n\t * @returns Promise which is resolved to a boolean value for the history enabled switch\n\t */\n\tasync getHistoryEnabled(): Promise<boolean> {\n\t\t// The history enabled switch which can be changed in the 'Input History Settings' dialog.\n\t\tconst globalHistoryData = await this.getGlobalHistoryData();\n\n\t\treturn globalHistoryData.historyEnabled;\n\t}\n\n\t/**\n\t * Set the the status of the user-specific history enabled switch in the global history data.\n\t * @param enabled A boolean value for the history enabled switch\n\t * @returns Promise which is resolved when the status is changed in the personalization data\n\t */\n\tasync setHistoryEnabled(enabled: boolean): Promise<void> {\n\t\tconst globalHistoryData = await this.getGlobalHistoryData();\n\n\t\tglobalHistoryData.historyEnabled = enabled;\n\t\tconst globalPersonalizer = await this.getGlobalPersonalizer();\n\t\tglobalPersonalizer.setPersData(globalHistoryData);\n\t}\n\n\t//\n\t// The following methodsare based on: sap\\ui\\comp\\historyvalues\\HistoryAppDataService.js\n\t//\n\n\t/**\n\t * Create a random UUID-like container ID.\n\t * @returns Container ID\n\t */\n\tprivate static createAppContainerId(): string {\n\t\t// Here we use the same coding as in V2 to create a random UUID-like container ID\n\t\tconst uuid = \"xxxxxxxx.xxxx.4xxx.yxxx.xxxxxxxxxxxx\".replace(/[xy]/g, function (char) {\n\t\t\tlet random = (Math.random() * 16) | 0;\n\n\t\t\tif (char === \"y\") {\n\t\t\t\trandom = (random & 0x3) | 0x8;\n\t\t\t}\n\n\t\t\treturn random.toString(16);\n\t\t});\n\n\t\treturn \"ui5.\" + uuid;\n\t}\n\n\t/**\n\t * Add an entry for an app ID to the global history data.\n\t * The entry is a mapping for an app ID to a container ID.\n\t * @param globalHistoryData The global history data structure\n\t * @param appId The app ID\n\t * @returns Newly created container ID\n\t */\n\tprivate async addAppToGlobalHistory(globalHistoryData: GlobalHistoryDataType, appId: string): Promise<string> {\n\t\tconst containerId = ValueHelpHistoryService.createAppContainerId();\n\n\t\tglobalHistoryData.apps[appId] = containerId;\n\t\tconst globalPersonalizer = await this.getGlobalPersonalizer();\n\t\tglobalPersonalizer.setPersData(globalHistoryData);\n\n\t\treturn containerId;\n\t}\n\n\t/**\n\t * Get the app personalizer from the shell service and store it in this class.\n\t * @returns Promise which is resolved to the app personalizer from the shell service.\n\t */\n\tprivate async getAppPersonalizer(): Promise<PersonalizerType> {\n\t\tif (!this.appPersonalizer) {\n\t\t\tconst globalHistoryData = await this.getGlobalHistoryData(),\n\t\t\t\tapps = globalHistoryData.apps,\n\t\t\t\tcontainerId = apps[this.appId] || (await this.addAppToGlobalHistory(globalHistoryData, this.appId)),\n\t\t\t\titemId = \"sapui5.history.appData\";\n\n\t\t\tthis.appPersonalizer = await this.getPersonalizer(containerId, itemId);\n\t\t}\n\t\treturn this.appPersonalizer;\n\t}\n\n\t/**\n\t * Get the app-specific history default data.\n\t * This is the initial data structure if no app history data is stored yet.\n\t * @returns App history default data\n\t */\n\tprivate getAppDefaultData(): AppHistoryDataType {\n\t\tconst appHistoryData: AppHistoryDataType = {};\n\t\tappHistoryData[ValueHelpHistoryService.appDataKey] = {};\n\t\treturn appHistoryData;\n\t}\n\n\t/**\n\t * Get the app-specific history data from the personalization service or create default data.\n\t * @returns Promise which is resolved to app history data\n\t */\n\tprivate async getAppHistoryData(): Promise<AppHistoryDataType> {\n\t\tif (!this.appHistoryData) {\n\t\t\tconst appPersonalizer = await this.getAppPersonalizer(),\n\t\t\t\tpersData = (await appPersonalizer.getPersData?.()) as AppHistoryDataType | undefined;\n\n\t\t\tthis.appHistoryData = persData ? { ...persData } : this.getAppDefaultData(); // In V2 the data is copied. Do we need to copy it?\n\t\t}\n\t\treturn this.appHistoryData;\n\t}\n\n\t/**\n\t * Get the field data for a field path from the personalization service.\n\t * @param fieldPath The field path\n\t * @returns Promise which is resolved to a list of field data\n\t */\n\tprivate async getFieldDataFromService(fieldPath: string): Promise<FieldDataType[]> {\n\t\tconst appHistoryData = await this.getAppHistoryData(),\n\t\t\tappData = appHistoryData[ValueHelpHistoryService.appDataKey],\n\t\t\tfieldData = appData[fieldPath];\n\n\t\t// remove entries with different language\n\t\tconst appLanguage = Localization.getLanguage();\n\t\treturn fieldData?.filter((data) => data[APP_LANGUAGE] === appLanguage) || [];\n\t}\n\n\t/**\n\t * Set the field data for a field path in the personalization service.\n\t * @param fieldPath The field path\n\t * @param data List of field data\n\t * @returns Promise which is resolved when the field data is set\n\t */\n\tprivate async setFieldDataWithService(fieldPath: string, data: FieldDataType[]): Promise<void> {\n\t\tconst historyAppData = await this.getAppHistoryData(),\n\t\t\tappData = historyAppData[ValueHelpHistoryService.appDataKey],\n\t\t\tappPersonalizer = await this.getAppPersonalizer();\n\n\t\tappData[fieldPath] = data;\n\n\t\treturn appPersonalizer.setPersData(historyAppData);\n\t}\n\n\t/**\n\t * Get a field data list with distinct entries.\n\t * @param dataList A list of field data with possible duplicate entries\n\t * @returns List of field data with distinct enrtries\n\t */\n\tprivate static getDistinct(dataList: FieldDataType[]): FieldDataType[] {\n\t\tconst uniqueFlags = {} as Record<string, boolean>,\n\t\t\tdistinct = [] as FieldDataType[];\n\n\t\tfor (const data of dataList) {\n\t\t\tconst key = Object.values(data).join();\n\t\t\tif (!uniqueFlags[key]) {\n\t\t\t\tdistinct.push(data);\n\t\t\t\tuniqueFlags[key] = true;\n\t\t\t}\n\t\t}\n\n\t\treturn distinct;\n\t}\n\n\t/**\n\t * Deletes the history data for all apps from the personalization data.\n\t * This method deletes all app-specific personalization data entries.\n\t * The global history entry is kept, so the mapping from app ID to container ID can be reused.\n\t * @returns Promise which is resolved when the history data is deleted.\n\t */\n\tasync deleteHistoryForAllApps(): Promise<void> {\n\t\tconst shellServices = this.shellServices,\n\t\t\tglobalHistoryData = await this.getGlobalHistoryData(),\n\t\t\tdeletePromises: Promise<unknown>[] = [],\n\t\t\tappIds = globalHistoryData.apps;\n\n\t\tfor (const key of Object.keys(appIds)) {\n\t\t\tdeletePromises.push(shellServices.deletePersonalizationContainer(appIds[key], undefined)); // ts\n\t\t}\n\t\tthis.appHistoryData = undefined; // delete also cached app history data\n\t\tawait Promise.all(deletePromises);\n\t}\n\n\t/**\n\t * Get the field data for a field path from the personalization service if the history service is enabled.\n\t * The history service is enabled if the shell switch and the user-specific switch are both enabled.\n\t * @param fieldPath The field path\n\t * @returns Promise which is resolved to a list of field data\n\t */\n\tasync getFieldData(fieldPath: string): Promise<FieldDataType[]> {\n\t\tconst historyEnabledShell = Boolean(this.historyOptOutProvider),\n\t\t\thistoryEnabledUser = await this.getHistoryEnabled();\n\n\t\tif (historyEnabledShell && historyEnabledUser) {\n\t\t\t// removing the key-value pair that were added for internal usage purposes in the history service (key starts with '@') and returns only the data which is shown on the UI.\n\t\t\tconst fieldData = await this.getFieldDataFromService(fieldPath);\n\t\t\treturn fieldData.map((obj) =>\n\t\t\t\tObject.entries(obj)\n\t\t\t\t\t.filter(([key, _]) => !key.startsWith(\"@\"))\n\t\t\t\t\t.reduce((accumulator, [key, value]) => ({ ...accumulator, [key]: value }), {})\n\t\t\t);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Set the field data for a field path in the personalization service if the history service is enabled.\n\t * The history service is enabled if the shell switch and the user-specific switch are both enabled.\n\t * @param fieldPath The field path\n\t * @param fieldData List of field data\n\t * @returns Promise which is resolved when the field data is set\n\t */\n\tasync setFieldData(fieldPath: string, fieldData: FieldDataType[]): Promise<void> {\n\t\tconst historyEnabledShell = Boolean(this.historyOptOutProvider),\n\t\t\thistoryEnabledUser = await this.getHistoryEnabled();\n\n\t\tif (historyEnabledShell && historyEnabledUser) {\n\t\t\t// Add the current language to every field data entry\n\t\t\tconst appLanguage = Localization.getLanguage();\n\t\t\tfor (const data of fieldData) {\n\t\t\t\tdata[APP_LANGUAGE] = appLanguage;\n\t\t\t}\n\t\t\tconst fieldOldData = await this.getFieldDataFromService(fieldPath),\n\t\t\t\tdataToSet = ValueHelpHistoryService.getDistinct(fieldData.reverse().concat(fieldOldData)).slice(\n\t\t\t\t\t0,\n\t\t\t\t\tValueHelpHistoryService.maxHistoryItems\n\t\t\t\t);\n\n\t\t\treturn this.setFieldDataWithService(fieldPath, dataToSet);\n\t\t}\n\t}\n}\n\n/**\n * Service Factory for the ValueHelpHistoryService\n *\n */\nexport default class ValueHelpHistoryServiceFactory extends ServiceFactory<ValueHelpHistorySettings> {\n\tprivate instance!: ValueHelpHistoryService;\n\n\tasync createInstance(serviceContext: ServiceContext<ValueHelpHistorySettings>): Promise<ValueHelpHistoryService> {\n\t\tthis.instance = new ValueHelpHistoryService(serviceContext);\n\t\treturn this.instance.initialize();\n\t}\n\n\tgetInstance(): ValueHelpHistoryService {\n\t\treturn this.instance;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}