{"version":3,"file":"ShellServicesFactory.js","names":["ShellServiceMock","_Service","apply","this","arguments","_inheritsLoose","_proto","prototype","init","initPromise","Promise","resolve","instanceType","getLinks","async","__fetchSemanticObject","getLinksWithCache","toExternal","getStartupAppState","undefined","isJamActive","backToPreviousApp","hrefForExternal","getHref","getHash","window","location","href","getAppState","createEmptyAppState","createEmptyAppStateAsync","navigate","isNavigationSupported","isInitialNavigation","expandCompactHash","parseShellHash","splitHash","sHash","regex","exec","shellPart","appSpecificRoute","length","constructShellHash","setDirtyFlag","registerDirtyStateProvider","deregisterDirtyStateProvider","getUser","getUserInitials","hasUShell","registerNavigationFilter","unregisterNavigationFilter","setBackNavigation","setHierarchy","setTitle","getContentDensity","document","body","classList","contains","getPrimaryIntent","waitForPluginsLoad","getTitle","getPersonalizer","_persId","_scope","_component","getPersData","historyEnabled","suggestionsEnabled","apps","setPersData","getApplicationPersonalizer","_itemName","getApplicationPersonalizationData","setApplicationPersonalizationData","_object","deletePersonalizationContainer","_key","getShellConfig","getRegisteredPlugins","AppWarmup","RendererExtensions","UserDefaults","UserImage","isFlpOptimisticBatchPluginLoaded","parseParameters","getExtensionService","getInframeUrl","Service","ShellServices","_Service2","_this","_len","args","Array","_key2","call","applicationPersonnalizers","_exports","_proto2","oContext","getContext","appComponent","scopeObject","oShellContainer","settings","shellContainer","linksCache","fnFindSemanticObjectsInCache","oArgs","aCachedSemanticObjects","aNonCachedSemanticObjects","linkFilter","semanticObject","push","links","Object","defineProperty","value","oldArgs","newArgs","cachedLinks","reject","resolveFn","rejectFn","navigationServiceP","getServiceAsync","userInfoServiceP","oUrlParsingServicePromise","oShellNavigationServicePromise","oShellPluginManagerPromise","oShellPersonalizationServicePromise","oShellExtensionServicePromise","all","then","_ref","navigationService","userInfoService","oUrlParsingService","oShellNavigation","oShellPersonalizationService","oShellPluginManager","oShellExtensionService","applicationNavigation","urlParsingService","shellNavigation","shellPersonalizationService","shellPluginManager","extensionService","catch","getSemanticObjects","oCacheResults","aLinks","oSemanticObjectsLinks","i","assign","aMergedLinks","j","item","getShellUIService","getService","getShellContainer","ushellContainer","appUrl","inAppRuntime","getFLPUrlAsync","error","Log","oNavArgumentsArr","oComponent","oTarget","sAppStateKey","aTargets","sHashFragment","getShellHash","flpPluginsRendererExtensions","hasOwnProperty","MANAGE_FE_CACHES","enabled","oNewShellHash","bDirty","fnDirtyStateProvider","getInitials","fnNavFilter","fnCallBack","aHierarchyLevels","sTitle","additionalInformation","sSemanticObject","mParameters","primaryIntent","isArray","getPluginLoadingPromise","fail","oError","persId","scope","component","keyCategory","constants","FIXED_KEY","writeFrequency","LOW","clientStorageAllowed","validity","Infinity","key","deleteContainer","itemName","container","getManifest","id","data","url","ShellServicesFactory","_ServiceFactory","_proto3","createInstance","serviceContext","sap","ui","require","shellService","getShellServices","internalModel","getModel","semanticObjects","setProperty","ServiceFactory"],"sources":["./ShellServicesFactory.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type Component from \"sap/ui/core/Component\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Container from \"sap/ushell/Container\";\nimport type Extension from \"sap/ushell/services/Extension\";\nimport type Navigation from \"sap/ushell/services/Navigation\";\nimport type { Link, LinkFilter, Target } from \"sap/ushell/services/Navigation\";\nimport type PersonalizationV2 from \"sap/ushell/services/PersonalizationV2\";\nimport { type PersId, type Scope } from \"sap/ushell/services/PersonalizationV2\";\nimport type ShellNavigation from \"sap/ushell/services/ShellNavigation\";\nimport type URLParsing from \"sap/ushell/services/URLParsing\";\nimport type { ParsedHash } from \"sap/ushell/services/URLParsing\";\nimport type UserInfo from \"sap/ushell/services/UserInfo\";\nimport type ShellUIService from \"sap/ushell/ui5service/ShellUIService\";\nimport type { TitleAdditionalInfo } from \"sap/ushell/ui5service/ShellUIService\";\nimport type { ServiceContext } from \"types/metamodel_types\";\nimport type AppComponent from \"../AppComponent\";\n\nexport type StartupAppState = {\n\tgetData(): {\n\t\tselectionVariant?: {\n\t\t\tSelectOptions?: {\n\t\t\t\tPropertyName: string;\n\t\t\t\tRanges: {\n\t\t\t\t\tOption: string;\n\t\t\t\t\tSign: string;\n\t\t\t\t\tLow: string;\n\t\t\t\t}[];\n\t\t\t}[];\n\t\t};\n\t};\n};\n\n// see: sap\\ushell\\services\\_Personalization\\constants.js\nexport type PersonalizationWithConstants = PersonalizationV2 & {\n\tconstants: {\n\t\tkeyCategory: {\n\t\t\tFIXED_KEY: string;\n\t\t\tGENERATED_KEY: string;\n\t\t};\n\t\twriteFrequency: {\n\t\t\tHIGH: string;\n\t\t\tLOW: string;\n\t\t};\n\t};\n};\n\nexport type PersonalizerType = {\n\tgetPersData: () => Promise<object>;\n\tsetPersData: (persData: object) => void;\n};\n\nexport type ShellConfigType = {\n\tapps: {\n\t\tinputFieldHistory: {\n\t\t\tenabled: boolean;\n\t\t};\n\t};\n};\n\nexport type FLPPlugin = {\n\tcomponent: string;\n\tenabled: boolean;\n\turl: string;\n\tconfig: Record<string, string>;\n};\n\nexport type RegisteredPluginsMapType = {\n\tAppWarmup: Record<string, FLPPlugin> | {};\n\tRendererExtensions: Record<string, FLPPlugin> | {};\n\tUserDefaults: Record<string, FLPPlugin> | {};\n\tUserImage: Record<string, FLPPlugin> | {};\n};\n\n/**\n * @interface IShellServices\n */\nexport interface IShellServices {\n\tinitPromise: Promise<IShellServices>;\n\tinstanceType: string;\n\tsemanticObjects: string[];\n\n\tgetLinks(oArgs?: Omit<LinkFilter, \"ui5Component\">[]): Promise<Link[][]>;\n\n\tgetLinksWithCache(oArgs?: Omit<LinkFilter, \"ui5Component\">[]): Promise<Link[][]>;\n\n\ttoExternal(oNavArgumentsArr: object, oComponent?: object): void;\n\n\tgetStartupAppState(oArgs: object): Promise<undefined | StartupAppState>;\n\n\tbackToPreviousApp(): void;\n\n\threfForExternal(oArgs?: object, oComponent?: object): Promise<string>;\n\n\tgetHref(oTarget: object, oComponent: Component): Promise<string>;\n\n\tgetAppState(oComponent: Component, sAppStateKey: string): Promise<unknown>;\n\n\tcreateEmptyAppState(oComponent: Component): object;\n\n\tcreateEmptyAppState(oComponent: Component): Promise<unknown>;\n\n\tnavigate(oTarget: Target, oComponent?: Component): Promise<undefined>;\n\n\tisNavigationSupported(oNavArgumentsArr: Array<object>, oComponent?: object): Promise<{ supported: boolean }[]>;\n\n\tisInitialNavigation(): Promise<boolean>;\n\n\texpandCompactHash(sHashFragment: string): Promise<string>;\n\n\tgetHash(): string;\n\n\tparseShellHash(sHash: string): ParsedHash;\n\n\tsplitHash(sHash: string): ReturnType<URLParsing[\"splitHash\"]>;\n\n\tconstructShellHash(oNewShellHash: object): string;\n\n\tsetDirtyFlag(bDirty: boolean): void;\n\n\tregisterDirtyStateProvider(fnDirtyStateProvider: Function): void;\n\n\tderegisterDirtyStateProvider(fnDirtyStateProvider: Function): void;\n\n\tgetUser(): UserInfo;\n\tgetUserInitials(): string;\n\n\thasUShell(): boolean;\n\n\tregisterNavigationFilter(fnNavFilter: Function): void;\n\n\tunregisterNavigationFilter(fnNavFilter: Function): void;\n\n\tsetBackNavigation(fnCallBack?: Function): Promise<void>;\n\n\tsetHierarchy(aHierarchyLevels: Array<object>): Promise<void>;\n\n\tsetTitle(sTitle: string, additionalInformation?: TitleAdditionalInfo): Promise<void>;\n\n\tisJamActive(): boolean;\n\n\tgetContentDensity(): string;\n\n\tgetPrimaryIntent(sSemanticObject: string, mParameters?: object): Promise<Link>;\n\n\twaitForPluginsLoad(): Promise<boolean>;\n\n\tgetRegisteredPlugins(): RegisteredPluginsMapType;\n\n\tisFlpOptimisticBatchPluginLoaded(): boolean;\n\n\tgetTitle(): Promise<string>;\n\n\tgetPersonalizer(persId: PersId, scope: Scope, component?: Component): Promise<PersonalizerType>;\n\n\tdeletePersonalizationContainer(key: string, scope?: object): Promise<void>;\n\n\tgetShellConfig(): ShellConfigType;\n\n\tparseParameters(url: string): ReturnType<URLParsing[\"parseParameters\"]>;\n\n\tgetExtensionService(): Extension;\n\n\tgetInframeUrl(): Promise<string | undefined>;\n\n\tgetApplicationPersonalizer(itemName: string): Promise<PersonalizerType>;\n\n\tgetApplicationPersonalizationData(itemName: string): Promise<Object | undefined>;\n\n\tsetApplicationPersonalizationData(itemName: string, object: Object): Promise<void>;\n}\ntype NavigationExtension = Navigation & {\n\tgetStartupAppState(oAppComponent: Component): Promise<StartupAppState | undefined>;\n\tgetAppState(oAppComponent: Component, sAppStateKey: string): Promise<object>;\n\tcreateEmptyAppState(\n\t\toAppComponent: Component,\n\t\tbTransientEnforced?: boolean,\n\t\tsPersistencyMethod?: string,\n\t\toPersistencySettings?: object\n\t): Promise<object>;\n};\n\n/**\n * Mock implementation of the ShellService for OpenFE\n *\n */\nclass ShellServiceMock extends Service<ShellServicesSettings> implements IShellServices {\n\tinitPromise!: Promise<IShellServices>;\n\n\tinstanceType!: string;\n\n\tsemanticObjects!: string[];\n\n\tinit(): void {\n\t\tthis.initPromise = Promise.resolve(this as IShellServices);\n\t\tthis.instanceType = \"mock\";\n\t}\n\n\tasync getLinks(/*oArgs: object*/): Promise<Link[][]> {\n\t\treturn Promise.resolve([]);\n\t}\n\n\tasync __fetchSemanticObject(): Promise<string[]> {\n\t\treturn Promise.resolve([]);\n\t}\n\n\tasync getLinksWithCache(/*oArgs: object*/): Promise<Link[][]> {\n\t\treturn Promise.resolve([]);\n\t}\n\n\ttoExternal(/*oNavArgumentsArr: Array<object>, oComponent: object*/): void {\n\t\t/* Do Nothing */\n\t}\n\n\tasync getStartupAppState(/*oArgs: object*/): Promise<StartupAppState | undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tisJamActive(): boolean {\n\t\treturn false;\n\t}\n\n\tbackToPreviousApp(): void {\n\t\t/* Do Nothing */\n\t}\n\n\tasync hrefForExternal(/*oArgs?: object, oComponent?: object, bAsync?: boolean*/): Promise<string> {\n\t\treturn Promise.resolve(\"\");\n\t}\n\n\tasync getHref(/*oArgs?: object, oComponent?: object, bAsync?: boolean*/): Promise<string> {\n\t\treturn Promise.resolve(\"\");\n\t}\n\n\tgetHash(): string {\n\t\treturn window.location.href;\n\t}\n\n\tasync getAppState(/*oComponent: object, sAppStateKey: string*/): Promise<unknown> {\n\t\treturn Promise.resolve({});\n\t}\n\n\tasync createEmptyAppState(/*oComponent: object*/): Promise<unknown> {\n\t\treturn Promise.resolve({});\n\t}\n\n\tasync createEmptyAppStateAsync(/*oComponent: object*/): Promise<unknown> {\n\t\treturn Promise.resolve({});\n\t}\n\n\tasync navigate(/*oTarget: Target,oComponent?: Component*/): Promise<undefined> {\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync isNavigationSupported(/*oNavArgumentsArr: Array<object>, oComponent: object*/): Promise<{ supported: boolean }[]> {\n\t\treturn Promise.resolve([]);\n\t}\n\n\tasync isInitialNavigation(): Promise<boolean> {\n\t\treturn Promise.resolve(false);\n\t}\n\n\tasync expandCompactHash(/*sHashFragment: string*/): Promise<string> {\n\t\treturn Promise.resolve(\"\");\n\t}\n\n\tparseShellHash(/*sHash: string*/): ParsedHash {\n\t\treturn {} as unknown as ParsedHash;\n\t}\n\n\tsplitHash(sHash: string): ReturnType<URLParsing[\"splitHash\"]> {\n\t\t/**\n\t\t * For an Application without Shell, the hash is similar to : #/SalesOrderManage(11111111-aaaa-bbbb-cccc-ddddeeeeffff)\n\t\t * this function returns :\n\t\t * {\n\t\t\tshellPart: \"\",\n\t\t\tappSpecificRoute: \"SalesOrderManage(11111111-aaaa-bbbb-cccc-ddddeeeeffff)\"\n\t\t}\n\t\t */\n\t\tconst regex = /#[^/]*\\/(.*)/.exec(sHash);\n\t\treturn {\n\t\t\tshellPart: \"\",\n\t\t\tappSpecificRoute: regex?.length === 2 ? regex[1] : \"\"\n\t\t};\n\t}\n\n\tconstructShellHash(/*oNewShellHash: object*/): string {\n\t\treturn \"\";\n\t}\n\n\tsetDirtyFlag(/*bDirty: boolean*/): void {\n\t\t/* Do Nothing */\n\t}\n\n\tregisterDirtyStateProvider(/*fnDirtyStateProvider: Function*/): void {\n\t\t/* Do Nothing */\n\t}\n\n\tderegisterDirtyStateProvider(/*fnDirtyStateProvider: Function*/): void {\n\t\t/* Do Nothing */\n\t}\n\n\tgetUser(): UserInfo {\n\t\treturn {} as UserInfo;\n\t}\n\n\tgetUserInitials(): string {\n\t\treturn \"\";\n\t}\n\n\thasUShell(): boolean {\n\t\treturn false;\n\t}\n\n\tregisterNavigationFilter(/*fnNavFilter: Function*/): void {\n\t\t/* Do Nothing */\n\t}\n\n\tunregisterNavigationFilter(/*fnNavFilter: Function*/): void {\n\t\t/* Do Nothing */\n\t}\n\n\tasync setBackNavigation(/*fnCallBack?: Function*/): Promise<void> {\n\t\t/* Do Nothing */\n\t\treturn Promise.resolve();\n\t}\n\n\tasync setHierarchy(/*aHierarchyLevels: Array<object>*/): Promise<void> {\n\t\t/* Do Nothing */\n\t\treturn Promise.resolve();\n\t}\n\n\tasync setTitle(/*sTitle: string*/): Promise<void> {\n\t\t/* Do Nothing */\n\t\treturn Promise.resolve();\n\t}\n\n\tgetContentDensity(): string {\n\t\t// in case there is no shell we probably need to look at the classes being defined on the body\n\t\tif (document.body.classList.contains(\"sapUiSizeCozy\")) {\n\t\t\treturn \"cozy\";\n\t\t} else if (document.body.classList.contains(\"sapUiSizeCompact\")) {\n\t\t\treturn \"compact\";\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tasync getPrimaryIntent(/*sSemanticObject: string, mParameters?: object*/): Promise<Link> {\n\t\treturn Promise.resolve(undefined as unknown as Link);\n\t}\n\n\tasync waitForPluginsLoad(): Promise<boolean> {\n\t\treturn Promise.resolve(true);\n\t}\n\n\tasync getTitle(): Promise<string> {\n\t\treturn Promise.resolve(\"\");\n\t}\n\n\tasync getPersonalizer(_persId: PersId, _scope: Scope, _component?: Component): Promise<PersonalizerType> {\n\t\treturn Promise.resolve({\n\t\t\tgetPersData: async () =>\n\t\t\t\tPromise.resolve({\n\t\t\t\t\thistoryEnabled: false,\n\t\t\t\t\tsuggestionsEnabled: false,\n\t\t\t\t\tapps: {}\n\t\t\t\t}),\n\t\t\tsetPersData: () => {}\n\t\t});\n\t}\n\n\tasync getApplicationPersonalizer(_itemName: string): Promise<PersonalizerType> {\n\t\treturn Promise.resolve({\n\t\t\tgetPersData: async () => Promise.resolve({}),\n\t\t\tsetPersData: () => {}\n\t\t});\n\t}\n\n\tasync getApplicationPersonalizationData(_itemName: string): Promise<object> {\n\t\treturn Promise.resolve({});\n\t}\n\n\tasync setApplicationPersonalizationData(_itemName: string, _object: Object): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tasync deletePersonalizationContainer(_key: string, _scope?: object): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tgetShellConfig(): ShellConfigType {\n\t\treturn {} as ShellConfigType;\n\t}\n\n\tgetRegisteredPlugins(): RegisteredPluginsMapType {\n\t\treturn {\n\t\t\tAppWarmup: {},\n\t\t\tRendererExtensions: {},\n\t\t\tUserDefaults: {},\n\t\t\tUserImage: {}\n\t\t};\n\t}\n\n\tisFlpOptimisticBatchPluginLoaded(): boolean {\n\t\treturn false;\n\t}\n\n\tparseParameters(): Record<string, string[]> {\n\t\treturn {};\n\t}\n\n\tgetExtensionService(): Extension {\n\t\treturn {} as Extension;\n\t}\n\n\tasync getInframeUrl(): Promise<string | undefined> {\n\t\treturn Promise.resolve(\"\");\n\t}\n}\n\n/**\n * @typedef ShellServicesSettings\n */\nexport type ShellServicesSettings = {\n\tshellContainer?: Container;\n};\n\ntype ShellPluginManager = {\n\tgetPluginLoadingPromise(category: string): jQuery.Promise;\n\tgetRegisteredPlugins(): RegisteredPluginsMapType;\n};\n\ntype PrivateShellUser = {\n\tgetInitials(): string;\n\tisJamActive(): boolean;\n\tgetContentDensity(): string;\n};\n\n/**\n * Base implementation of the ShellServices\n *\n */\nexport class ShellServices extends Service<Required<ShellServicesSettings>> implements IShellServices {\n\tresolveFn!: Function;\n\n\trejectFn!: () => void;\n\n\tinitPromise!: Promise<IShellServices>;\n\n\tapplicationNavigation!: NavigationExtension;\n\n\tuserInfoService!: UserInfo;\n\n\turlParsingService!: URLParsing;\n\n\tshellNavigation!: ShellNavigation;\n\n\tshellPluginManager!: ShellPluginManager;\n\n\toShellContainer!: Container & { getUser: () => PrivateShellUser };\n\n\tshellPersonalizationService!: PersonalizationWithConstants;\n\n\tinstanceType!: string;\n\n\tlinksCache!: Record<string, { links: Link[] }>;\n\n\tsemanticObjects!: string[];\n\n\tfnFindSemanticObjectsInCache!: Function;\n\n\textensionService!: Extension;\n\n\tappComponent!: Component;\n\n\tprivate applicationPersonnalizers: Record<string, Promise<PersonalizerType>> = {};\n\n\tinit(): void {\n\t\tconst oContext = this.getContext();\n\t\tthis.appComponent = oContext.scopeObject as Component;\n\t\tthis.oShellContainer = oContext.settings.shellContainer;\n\t\tthis.instanceType = \"real\";\n\t\tthis.linksCache = {};\n\t\tthis.fnFindSemanticObjectsInCache = function (oArgs: LinkFilter[]): object {\n\t\t\tconst aCachedSemanticObjects: Link[][] = [];\n\t\t\tconst aNonCachedSemanticObjects: LinkFilter[] = [];\n\t\t\tfor (const linkFilter of oArgs) {\n\t\t\t\tif (!!linkFilter && !!linkFilter.semanticObject) {\n\t\t\t\t\tif (this.linksCache[linkFilter.semanticObject]) {\n\t\t\t\t\t\taCachedSemanticObjects.push(this.linksCache[linkFilter.semanticObject].links);\n\t\t\t\t\t\tObject.defineProperty(linkFilter, \"links\", {\n\t\t\t\t\t\t\tvalue: this.linksCache[linkFilter.semanticObject].links\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\taNonCachedSemanticObjects.push(linkFilter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { oldArgs: oArgs, newArgs: aNonCachedSemanticObjects, cachedLinks: aCachedSemanticObjects };\n\t\t};\n\t\tthis.initPromise = new Promise((resolve, reject) => {\n\t\t\tthis.resolveFn = resolve;\n\t\t\tthis.rejectFn = reject;\n\t\t});\n\t\tconst navigationServiceP = this.oShellContainer.getServiceAsync(\"Navigation\");\n\t\tconst userInfoServiceP = this.oShellContainer.getServiceAsync(\"UserInfo\");\n\t\tconst oUrlParsingServicePromise = this.oShellContainer.getServiceAsync(\"URLParsing\");\n\t\tconst oShellNavigationServicePromise = this.oShellContainer.getServiceAsync(\"ShellNavigationInternal\");\n\t\tconst oShellPluginManagerPromise = this.oShellContainer.getServiceAsync(\"PluginManager\");\n\t\tconst oShellPersonalizationServicePromise = this.oShellContainer.getServiceAsync(\"PersonalizationV2\");\n\t\tconst oShellExtensionServicePromise = this.oShellContainer.getServiceAsync(\"Extension\");\n\n\t\tPromise.all([\n\t\t\tnavigationServiceP,\n\t\t\tuserInfoServiceP,\n\t\t\toUrlParsingServicePromise,\n\t\t\toShellNavigationServicePromise,\n\t\t\toShellPersonalizationServicePromise,\n\t\t\toShellPluginManagerPromise,\n\t\t\toShellExtensionServicePromise\n\t\t])\n\t\t\t.then(\n\t\t\t\t([\n\t\t\t\t\tnavigationService,\n\t\t\t\t\tuserInfoService,\n\t\t\t\t\toUrlParsingService,\n\t\t\t\t\toShellNavigation,\n\t\t\t\t\toShellPersonalizationService,\n\t\t\t\t\toShellPluginManager,\n\t\t\t\t\toShellExtensionService\n\t\t\t\t]) => {\n\t\t\t\t\tthis.applicationNavigation = navigationService as NavigationExtension;\n\t\t\t\t\tthis.userInfoService = userInfoService as UserInfo;\n\t\t\t\t\tthis.urlParsingService = oUrlParsingService as URLParsing;\n\t\t\t\t\tthis.shellNavigation = oShellNavigation as ShellNavigation;\n\t\t\t\t\tthis.shellPersonalizationService = oShellPersonalizationService as PersonalizationWithConstants;\n\t\t\t\t\tthis.shellPluginManager = oShellPluginManager as ShellPluginManager;\n\t\t\t\t\tthis.extensionService = oShellExtensionService as Extension;\n\t\t\t\t\tthis.resolveFn();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t)\n\t\t\t.catch(this.rejectFn);\n\t}\n\n\t/**\n\t * Retrieves the target links configured for a given semantic object & action\n\t * Will retrieve the CrossApplicationNavigation\n\t * service reference call the getLinks method. In case service is not available or any exception\n\t * method throws exception error in console.\n\t * @param oArgs Check the definition of\n\t * sap.ushell.services.CrossApplicationNavigation=>getLinks arguments\n\t * @returns Promise which will be resolved to target links array\n\t */\n\tasync getLinks(oArgs?: LinkFilter[]): Promise<Link[][]> {\n\t\treturn this.applicationNavigation.getLinks(oArgs);\n\t}\n\n\t/**\n\t * Returns a list of semantic objects of the intents the current user can navigate to.\n\t * @returns Promise that resolve with an array of strings representing the semantic objects of the intents the current user can navigate to, or rejects with an error message\n\t */\n\tasync __fetchSemanticObject(): Promise<string[]> {\n\t\treturn this.applicationNavigation.getSemanticObjects();\n\t}\n\n\t/**\n\t * Retrieves the target links configured for a given semantic object & action in cache\n\t * Will retrieve the CrossApplicationNavigation\n\t * service reference call the getLinks method. In case service is not available or any exception\n\t * method throws exception error in console.\n\t * @param oArgs Check the definition of\n\t * sap.ushell.services.CrossApplicationNavigation=>getLinks arguments\n\t * @returns Promise which will be resolved to target links array\n\t */\n\tasync getLinksWithCache(oArgs?: LinkFilter[]): Promise<Link[][]> {\n\t\tif ((oArgs as Object[]).length === 0) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst oCacheResults = this.fnFindSemanticObjectsInCache(oArgs);\n\n\t\t\tif (oCacheResults.newArgs.length === 0) {\n\t\t\t\treturn oCacheResults.cachedLinks;\n\t\t\t} else {\n\t\t\t\tconst aLinks = await this.applicationNavigation.getLinks(oCacheResults.newArgs);\n\t\t\t\tif (aLinks.length !== 0) {\n\t\t\t\t\tconst oSemanticObjectsLinks: Record<string, { links: Link[] }> = {};\n\n\t\t\t\t\tfor (let i = 0; i < aLinks.length; i++) {\n\t\t\t\t\t\tif (aLinks[i].length > 0 && oCacheResults.newArgs[i][0].links === undefined) {\n\t\t\t\t\t\t\toSemanticObjectsLinks[oCacheResults.newArgs[i][0].semanticObject] = {\n\t\t\t\t\t\t\t\tlinks: aLinks[i]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.linksCache = Object.assign(this.linksCache, oSemanticObjectsLinks);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (oCacheResults.cachedLinks.length === 0) {\n\t\t\t\t\treturn aLinks;\n\t\t\t\t} else {\n\t\t\t\t\tconst aMergedLinks = [];\n\t\t\t\t\tlet j = 0;\n\n\t\t\t\t\tfor (const item of oCacheResults.oldArgs) {\n\t\t\t\t\t\tif (j < aLinks.length) {\n\t\t\t\t\t\t\tif (aLinks[j].length > 0 && item[0].semanticObject === oCacheResults.newArgs[j][0].semanticObject) {\n\t\t\t\t\t\t\t\taMergedLinks.push(aLinks[j]);\n\t\t\t\t\t\t\t\tj++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\taMergedLinks.push(item[0].links);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\taMergedLinks.push(item[0].links);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn aMergedLinks;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getShellUIService(): Promise<ShellUIService> {\n\t\treturn this.appComponent.getService(\"ShellUIService\");\n\t}\n\n\t/**\n\t * Will retrieve the ShellContainer.\n\t * @returns Object with predefined shellContainer methods\n\t */\n\tgetShellContainer(): Container {\n\t\treturn this.oShellContainer;\n\t}\n\n\tasync getInframeUrl(): Promise<string | undefined> {\n\t\tconst ushellContainer = this.getShellContainer();\n\t\tlet appUrl: string | undefined;\n\t\tif (ushellContainer?.inAppRuntime()) {\n\t\t\ttry {\n\t\t\t\tappUrl = await ushellContainer.getFLPUrlAsync(true);\n\t\t\t} catch (error) {\n\t\t\t\tLog.error(\"Error while getting the FLP URL\", error as string);\n\t\t\t}\n\t\t}\n\t\treturn appUrl;\n\t}\n\n\t/**\n\t * Will call toExternal method of CrossApplicationNavigation service with Navigation Arguments and oComponent.\n\t * @param oNavArgumentsArr And\n\t * @param oComponent Check the definition of\n\t * sap.ushell.services.CrossApplicationNavigation=>toExternal arguments\n\t */\n\ttoExternal(oNavArgumentsArr: Target, oComponent?: Component): void {\n\t\tthis.navigate(oNavArgumentsArr, oComponent);\n\t}\n\n\t/**\n\t * Retrieves the target startupAppState\n\t * Will check the existance of the ShellContainer and retrieve the CrossApplicationNavigation\n\t * service reference call the getStartupAppState method. In case service is not available or any exception\n\t * method throws exception error in console.\n\t * @param oArgs Check the definition of\n\t * sap.ushell.services.CrossApplicationNavigation=>getStartupAppState arguments\n\t * @returns Promise which will be resolved to Object\n\t */\n\tasync getStartupAppState(oArgs: Component): Promise<undefined | StartupAppState> {\n\t\treturn this.applicationNavigation.getStartupAppState(oArgs);\n\t}\n\n\t/**\n\t * Will call backToPreviousApp method of CrossApplicationNavigation service.\n\t * @returns Something that indicate we've navigated\n\t */\n\tasync backToPreviousApp(): Promise<void> {\n\t\treturn this.applicationNavigation.backToPreviousApp();\n\t}\n\n\t/**\n\t * Will call hrefForExternal method of CrossApplicationNavigation service.\n\t * @param oArgs Check the definition of\n\t * @param oComponent The appComponent\n\t * sap.ushell.services.CrossApplicationNavigation=>hrefForExternal arguments\n\t * @returns Promise which will be resolved to string\n\t */\n\tasync hrefForExternal(oArgs: Target, oComponent?: Component): Promise<string> {\n\t\treturn this.applicationNavigation.getHref(oArgs, oComponent);\n\t}\n\n\t/**\n\t * Returns a promise resolving to a URL that launches an app with certain parameters.\n\t * This API can be used to convert the internal shell hash format into the URL format for use in link tags.\n\t * The resulting href is fully encoded and cannot be used in other APIs that expect the internal decoded hash.\n\t * @param [oTarget] The navigation target to transform. When, omitted the current hash is used as the basis for the calculation.\n\t * @param [oComponent] A UI5 component, used to logically attach any related app state.\n\t * @returns A promise resolving the encoded href.\n\t */\n\tasync getHref(oTarget: Target, oComponent?: Component): Promise<string> {\n\t\treturn this.applicationNavigation.getHref(oTarget, oComponent);\n\t}\n\n\t/**\n\t * Will call getAppState method of CrossApplicationNavigation service with oComponent and oAppStateKey.\n\t * @param oComponent\n\t * @param sAppStateKey Check the definition of\n\t * sap.ushell.services.CrossApplicationNavigation=>getAppState arguments\n\t * @returns Promise which will be resolved to object\n\t */\n\tasync getAppState(oComponent: Component, sAppStateKey: string): Promise<unknown> {\n\t\treturn this.applicationNavigation.getAppState(oComponent, sAppStateKey);\n\t}\n\n\t/**\n\t * Will call createEmptyAppState method of CrossApplicationNavigation service with oComponent.\n\t * @param oComponent Check the definition of\n\t * sap.ushell.services.CrossApplicationNavigation=>createEmptyAppState arguments\n\t * @returns Promise which will be resolved to object\n\t */\n\tasync createEmptyAppState(oComponent: Component): Promise<unknown> {\n\t\treturn this.applicationNavigation.createEmptyAppState(oComponent);\n\t}\n\n\t/**\n\t * Will call isNavigationSupported method of CrossApplicationNavigation service with Navigation Arguments and oComponent.\n\t * @param aTargets\n\t * @param oComponent Check the definition of\n\t * sap.ushell.services.CrossApplicationNavigation=>isNavigationSupported arguments\n\t * @returns Promise which will be resolved to object\n\t */\n\tasync isNavigationSupported(aTargets: Target[], oComponent: Component): Promise<{ supported: boolean }[]> {\n\t\treturn this.applicationNavigation.isNavigationSupported(aTargets, oComponent) as unknown as Promise<{ supported: boolean }[]>;\n\t}\n\n\t/**\n\t * Triggers a navigation to a specified target outside of the currently running application.\n\t * @param oTarget The navigation target.\n\t * @param [oComponent] A UI5 component, used to logically attach any related app state.\n\t * @returns A Promise resolving once the navigation was triggered. The Promise might never reject or resolve\n\t *                    when an error occurs during the navigation.\n\t */\n\tasync navigate(oTarget: Target, oComponent?: Component): Promise<undefined> {\n\t\treturn (await this.applicationNavigation.navigate(oTarget, oComponent)) as unknown as Promise<undefined>;\n\t}\n\n\t/**\n\t * Will call isInitialNavigationAsync method of CrossApplicationNavigation service.\n\t * @returns Promise which will be resolved to boolean\n\t */\n\tasync isInitialNavigation(): Promise<boolean> {\n\t\treturn this.applicationNavigation.isInitialNavigation();\n\t}\n\n\t/**\n\t * Will call expandCompactHash method of CrossApplicationNavigation service.\n\t * @param sHashFragment An (internal format) shell hash\n\t * @returns A promise the success handler of the resolve promise get an expanded shell hash as first argument\n\t */\n\tasync expandCompactHash(sHashFragment: string): Promise<string> {\n\t\treturn Promise.resolve(sHashFragment); //this.navTargetResolution.expandCompactHash(sHashFragment);\n\t}\n\n\tgetHash(): string {\n\t\treturn `#${this.urlParsingService.getShellHash(window.location.href)}`;\n\t}\n\n\t/**\n\t * Returns a map of all the plugins which are registered with the PluginManager, sorted by supported plugin categories.\n\t * @returns Map of registered plugins\n\t */\n\tgetRegisteredPlugins(): RegisteredPluginsMapType {\n\t\treturn this.shellPluginManager.getRegisteredPlugins();\n\t}\n\n\t/**\n\t * Check for the optimistic batch plugin setup in the FLP.\n\t * @returns True if the optimistic batch plugin is set up and enabled.\n\t */\n\tisFlpOptimisticBatchPluginLoaded(): boolean {\n\t\tconst flpPluginsRendererExtensions = this.getRegisteredPlugins().RendererExtensions;\n\t\tif (\n\t\t\tflpPluginsRendererExtensions?.hasOwnProperty(\"MANAGE_FE_CACHES\") &&\n\t\t\t!!(flpPluginsRendererExtensions as Record<string, Record<string, object>>).MANAGE_FE_CACHES.enabled\n\t\t) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Will call parseShellHash method of URLParsing service with given sHash.\n\t * @param sHash Check the definition of\n\t * sap.ushell.services.URLParsing=>parseShellHash arguments\n\t * @returns The parsed url\n\t */\n\tparseShellHash(sHash: string): ParsedHash {\n\t\treturn this.urlParsingService.parseShellHash(sHash);\n\t}\n\n\t/**\n\t * Will call splitHash method of URLParsing service with given sHash.\n\t * @param sHash Check the definition of\n\t * sap.ushell.services.URLParsing=>splitHash arguments\n\t * @returns Promise which will be resolved to object\n\t */\n\tsplitHash(sHash: string): { shellPart?: string; appSpecificRoute?: string } {\n\t\treturn this.urlParsingService.splitHash(sHash);\n\t}\n\n\t/**\n\t * Will call constructShellHash method of URLParsing service with given sHash.\n\t * @param oNewShellHash Check the definition of\n\t * sap.ushell.services.URLParsing=>constructShellHash arguments\n\t * @returns Shell Hash string\n\t */\n\tconstructShellHash(oNewShellHash: object): string {\n\t\treturn this.urlParsingService.constructShellHash(oNewShellHash);\n\t}\n\n\t/**\n\t * Will call setDirtyFlag method with given dirty state.\n\t * @param bDirty Check the definition of sap.ushell.Container.setDirtyFlag arguments\n\t */\n\tsetDirtyFlag(bDirty: boolean): void {\n\t\tthis.oShellContainer.setDirtyFlag(bDirty);\n\t}\n\n\t/**\n\t * Will call registerDirtyStateProvider method with given dirty state provider callback method.\n\t * @param fnDirtyStateProvider Check the definition of sap.ushell.Container.registerDirtyStateProvider arguments\n\t */\n\tregisterDirtyStateProvider(fnDirtyStateProvider: () => boolean): void {\n\t\tthis.oShellContainer.registerDirtyStateProvider(fnDirtyStateProvider);\n\t}\n\n\t/**\n\t * Will call deregisterDirtyStateProvider method with given dirty state provider callback method.\n\t * @param fnDirtyStateProvider Check the definition of sap.ushell.Container.deregisterDirtyStateProvider arguments\n\t */\n\tderegisterDirtyStateProvider(fnDirtyStateProvider: () => boolean): void {\n\t\tthis.oShellContainer.deregisterDirtyStateProvider(fnDirtyStateProvider);\n\t}\n\n\t/**\n\t * Will call getUser method of ushell container.\n\t * @returns Returns User object\n\t */\n\tgetUser(): UserInfo {\n\t\treturn this.userInfoService;\n\t}\n\n\tisJamActive(): boolean {\n\t\treturn this.oShellContainer.getUser().isJamActive();\n\t}\n\n\tgetUserInitials(): string {\n\t\treturn this.oShellContainer.getUser().getInitials();\n\t}\n\n\t/**\n\t * Will check if ushell container is available or not.\n\t * @returns Returns true\n\t */\n\thasUShell(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Will call registerNavigationFilter method of shellNavigation.\n\t * @param fnNavFilter The filter function to register\n\t */\n\tregisterNavigationFilter(fnNavFilter: Function): void {\n\t\tthis.shellNavigation.registerNavigationFilter(fnNavFilter);\n\t}\n\n\t/**\n\t * Will call unregisterNavigationFilter method of shellNavigation.\n\t * @param fnNavFilter The filter function to unregister\n\t */\n\tunregisterNavigationFilter(fnNavFilter: Function): void {\n\t\tthis.shellNavigation.unregisterNavigationFilter(fnNavFilter);\n\t}\n\n\t/**\n\t * Will call setBackNavigation method of ShellUIService\n\t * that displays the back button in the shell header.\n\t * @param fnCallBack A callback function called when the button is clicked in the UI.\n\t */\n\tasync setBackNavigation(fnCallBack: Function): Promise<void> {\n\t\t(await this.getShellUIService()).setBackNavigation(fnCallBack);\n\t}\n\n\t/**\n\t * Will call setHierarchy method of ShellUIService\n\t * that displays the given hierarchy in the shell header.\n\t * @param [aHierarchyLevels] An array representing hierarchies of the currently displayed app.\n\t */\n\tasync setHierarchy(aHierarchyLevels: object[]): Promise<void> {\n\t\t(await this.getShellUIService()).setHierarchy(aHierarchyLevels);\n\t}\n\n\t/**\n\t * Will call setTitle method of ShellUIService\n\t * that displays the given title in the shell header.\n\t * @param [sTitle] The new title. The default title is set if this argument is not given.\n\t * @param [additionalInformation] An object of additional information to be displayed in the browser window title.\n\t */\n\tasync setTitle(sTitle: string, additionalInformation?: TitleAdditionalInfo): Promise<void> {\n\t\t(await this.getShellUIService()).setTitle(sTitle, additionalInformation);\n\t}\n\n\t/**\n\t * Will call getTitle method of ShellUIService\n\t * that displays the given title in the shell header.\n\t * @returns The title of the application.\n\t */\n\tasync getTitle(): Promise<string> {\n\t\treturn (await this.getShellUIService()).getTitle();\n\t}\n\n\t/**\n\t * Retrieves the currently defined content density.\n\t * @returns The content density value\n\t */\n\tgetContentDensity(): string {\n\t\treturn this.oShellContainer.getUser().getContentDensity();\n\t}\n\n\t/**\n\t * For a given semantic object, this method considers all actions associated with the semantic object and\n\t * returns the one tagged as a \"primaryAction\". If no inbound tagged as \"primaryAction\" exists, then it returns\n\t * the intent of the first inbound (after sorting has been applied) matching the action \"displayFactSheet\".\n\t * @param sSemanticObject Semantic object.\n\t * @param mParameters See #CrossApplicationNavigation#getLinks for description.\n\t * @returns Promise which will be resolved with an object containing the intent if it exists.\n\t */\n\tasync getPrimaryIntent(sSemanticObject: string, mParameters?: LinkFilter): Promise<Link> {\n\t\tconst primaryIntent = await this.applicationNavigation.getPrimaryIntent(sSemanticObject, mParameters);\n\t\tif (Array.isArray(primaryIntent)) {\n\t\t\treturn primaryIntent[0];\n\t\t} else {\n\t\t\treturn primaryIntent;\n\t\t}\n\t}\n\n\t/**\n\t * Wait for the render extensions plugin to be loaded.\n\t * @returns True if we are able to wait for it, otherwise we couldn't and cannot rely on it.\n\t */\n\tasync waitForPluginsLoad(): Promise<boolean> {\n\t\treturn new Promise((resolve) => {\n\t\t\tif (!this.shellPluginManager?.getPluginLoadingPromise) {\n\t\t\t\tresolve(false);\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line promise/catch-or-return\n\t\t\t\tthis.shellPluginManager\n\t\t\t\t\t.getPluginLoadingPromise(\"RendererExtensions\")\n\t\t\t\t\t.fail((oError: unknown) => {\n\t\t\t\t\t\tLog.error(oError as string, \"sap.fe.core.services.ShellServicesFactory.waitForPluginsLoad\");\n\t\t\t\t\t\tresolve(false);\n\t\t\t\t\t})\n\t\t\t\t\t.then(() => resolve(true));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Get the personalizer from the shell service.\n\t * We set some defaults for the scope object.\n\t * @param persId Personalization object\n\t * @param scope Scope object\n\t * @param component\n\t * @returns Personalizer object which handles personalization\n\t */\n\tasync getPersonalizer(persId: PersId, scope: Scope, component?: Component): Promise<PersonalizerType> {\n\t\tscope = {\n\t\t\t// merge some defaults\n\t\t\tkeyCategory: this.shellPersonalizationService.constants.keyCategory.FIXED_KEY,\n\t\t\twriteFrequency: this.shellPersonalizationService.constants.writeFrequency.LOW,\n\t\t\tclientStorageAllowed: false,\n\t\t\tvalidity: Infinity,\n\t\t\t...scope\n\t\t};\n\t\treturn (await this.shellPersonalizationService.getPersonalizer(persId, scope, component)) as PersonalizerType;\n\t}\n\n\t/**\n\t * Deletes a container identified by sContainerKey.\n\t * @param key Container key\n\t * @param scope Scope object\n\t * @returns Promise which is resolved when the container is deleted\n\t */\n\tasync deletePersonalizationContainer(key: string, scope?: object): Promise<void> {\n\t\treturn this.shellPersonalizationService.deleteContainer(key, scope as unknown as object) as Promise<void>;\n\t}\n\n\t/**\n\t * This method initializes the personalizer to access the Application data stored in the shell Personalization.\n\t * @param itemName The name of the item for which the personalizer is created.\n\t * @returns A personalizer\n\t */\n\tpublic async getApplicationPersonalizer(itemName: string): Promise<PersonalizerType> {\n\t\tif (!this.applicationPersonnalizers[itemName]) {\n\t\t\tthis.applicationPersonnalizers[itemName] = this.getPersonalizer(\n\t\t\t\t{\n\t\t\t\t\tcontainer: `Application#${(this.appComponent as AppComponent).getManifest()[\"sap.app\"].id}`,\n\t\t\t\t\titem: itemName\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\tthis.appComponent\n\t\t\t);\n\t\t}\n\t\treturn this.applicationPersonnalizers[itemName];\n\t}\n\n\t/**\n\t * This method returns data from the personalization service.\n\t * @param itemName\n\t * @returns Data\n\t */\n\tpublic async getApplicationPersonalizationData(itemName: string): Promise<object | undefined> {\n\t\treturn (await (await this.getApplicationPersonalizer(itemName))?.getPersData()) as object | undefined;\n\t}\n\n\t/**\n\t * This method stores an object in the personalization service.\n\t * @param itemName\n\t * @param data\n\t * @returns A promise\n\t */\n\tpublic async setApplicationPersonalizationData(itemName: string, data: object): Promise<void> {\n\t\t(await this.getApplicationPersonalizer(itemName)).setPersData(data);\n\t}\n\n\t/**\n\t * Get the shell config from the windows object.\n\t * @returns Shell config object\n\t */\n\tgetShellConfig(): ShellConfigType {\n\t\treturn (window as unknown as Record<string, object>)[\"sap-ushell-config\"] as ShellConfigType;\n\t}\n\n\t/**\n\t * Parse parameters from a URI query string (starting with ?) into a parameter object.\n\t * @param url Check the definition of\n\t * Parameter string\n\t * @returns An object containg string arrays\n\t */\n\tparseParameters(url: string): Record<string, string[]> {\n\t\treturn this.urlParsingService.parseParameters(url);\n\t}\n\n\t/**\n\t * Get the shell extension service.\n\t * @returns Shell extension service\n\t */\n\tgetExtensionService(): Extension {\n\t\treturn this.extensionService;\n\t}\n}\n\n/**\n * Service Factory for the ShellServices\n *\n */\nclass ShellServicesFactory extends ServiceFactory<ShellServicesSettings> {\n\t/**\n\t * Creates either a standard or a mock Shell service depending on the configuration.\n\t * @param serviceContext The shellservice context\n\t * @returns A promise for a shell service implementation\n\t * @see ServiceFactory#createInstance\n\t */\n\tasync createInstance(serviceContext: ServiceContext<ShellServicesSettings>): Promise<IShellServices> {\n\t\tserviceContext.settings.shellContainer = sap.ui.require(\"sap/ushell/Container\");\n\t\tconst shellService = serviceContext.settings.shellContainer\n\t\t\t? new ShellServices(serviceContext as ServiceContext<Required<ShellServicesSettings>>)\n\t\t\t: new ShellServiceMock(serviceContext);\n\t\tawait shellService.initPromise;\n\t\t// Enrich the appComponent with this method\n\t\tconst appComponent = serviceContext.scopeObject;\n\t\tappComponent.getShellServices = (): IShellServices => shellService;\n\t\tconst internalModel = appComponent.getModel(\"internal\");\n\t\tif (internalModel) {\n\t\t\tlet semanticObjects: string[] = [];\n\t\t\ttry {\n\t\t\t\tsemanticObjects = await shellService.__fetchSemanticObject();\n\t\t\t} catch (error: unknown) {\n\t\t\t\tLog.error(\"Error while calling getSemanticObjects\", error as string);\n\t\t\t} finally {\n\t\t\t\t(internalModel as JSONModel).setProperty(\"/semanticObjects\", semanticObjects);\n\t\t\t}\n\t\t}\n\t\treturn shellService;\n\t}\n}\n\nexport default ShellServicesFactory;\n"],"mappings":"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","ignoreList":[]}