{"version":3,"names":["APP_LANGUAGE","ValueHelpHistoryService","_Service","apply","arguments","_exports","_inheritsLoose","_proto","prototype","init","initialize","context","getContext","appComponent","scopeObject","environmentCapabilities","shellServices","Promise","all","getService","appId","getManifestEntry","id","hasUshell","getCapabilities","UShell","enabled","getShellConfig","apps","inputFieldHistory","historyOptOutProvider","HistoryOptOutProvider","err","Log","error","Error","message","String","registerShellHook","createOptOutUserProfileEntry","EventBus","getInstance","subscribeOnce","getShellExtensionService","getExtensionService","getPersonalizer","containerId","itemId","persIdObj","container","item","scope","undefined","getGlobalPersonalizer","globalPersonalizer","historyPrefix","getGlobalDefaultData","historyEnabled","suggestionsEnabled","getGlobalHistoryData","globalHistoryData","persData","getPersData","getHistoryEnabled","setHistoryEnabled","setPersData","createAppContainerId","uuid","replace","char","random","Math","toString","addAppToGlobalHistory","getAppPersonalizer","appPersonalizer","getAppDefaultData","appHistoryData","appDataKey","getAppHistoryData","getFieldDataFromService","fieldPath","appData","fieldData","appLanguage","Localization","getLanguage","filter","data","setFieldDataWithService","historyAppData","getDistinct","dataList","uniqueFlags","distinct","key","Object","values","join","push","deleteHistoryForAllApps","deletePromises","appIds","keys","deletePersonalizationContainer","getFieldData","historyEnabledShell","Boolean","historyEnabledUser","map","obj","entries","_ref","_","startsWith","reduce","accumulator","_ref2","value","setFieldData","fieldOldData","dataToSet","reverse","concat","slice","maxHistoryItems","Service","ValueHelpHistoryServiceFactory","_ServiceFactory","_proto2","createInstance","serviceContext","instance","ServiceFactory"],"sourceRoot":".","sources":["ValueHelpHistoryServiceFactory.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport Localization from \"sap/base/i18n/Localization\";\nimport type { IShellServices, PersonalizerType } from \"sap/fe/core/services/ShellServicesFactory\";\nimport HistoryOptOutProvider from \"sap/fe/core/services/valueHelpService/HistoryOptOutProvider\";\nimport EventBus from \"sap/ui/core/EventBus\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type Extension from \"sap/ushell/services/Extension\";\nimport type { ServiceContext } from \"types/metamodel_types\";\nimport type AppComponent from \"../AppComponent\";\nimport type { EnvironmentCapabilitiesService } from \"./EnvironmentServiceFactory\";\n\n//\n// Some remarks:\n// To store history data in LREP via ushell personalisation service, we use the same data structures as in V2:\n// - \"Global\" History Data: A mapping from appId to a uuid-like containerID; and a user-specific 'history enabled' switch\n// - App History Data: A mapping from container ID to the valuehelp fields and its history data\n// To avoid backend calls, we cache the data also in the class.\n//\n\ntype AppIdType = string;\ntype ContainerIdType = string;\n\ntype GlobalHistoryDataType = {\n\thistoryEnabled: boolean;\n\tsuggestionsEnabled: boolean;\n\tapps: Record<AppIdType, ContainerIdType>;\n};\n\nexport type FieldDataType = { [key: string]: string | number | boolean | null | FieldDataType };\n\ntype ContainerId2FieldDataType = Record<string, FieldDataType[] | undefined>;\n\ntype AppHistoryDataType = Record<ContainerIdType, ContainerId2FieldDataType>;\n\nexport type ValueHelpHistorySettings = {};\n\nconst APP_LANGUAGE = \"@AppLanguage\";\n\n/**\n * @interface IValueHelpHistoryService\n */\nexport interface IValueHelpHistoryService {\n\tgetHistoryEnabled(): Promise<boolean>;\n\n\tsetHistoryEnabled(enabled: boolean): Promise<void>;\n\n\tdeleteHistoryForAllApps(): Promise<void>;\n\n\tgetFieldData(fieldPath: string): Promise<FieldDataType[]>;\n\n\tsetFieldData(fieldPath: string, fieldData: FieldDataType[]): Promise<void>;\n\n\tgetShellExtensionService(): Extension;\n}\n\n/**\n * Base implementation of the ValueHelpHistoryService\n *\n */\nexport class ValueHelpHistoryService extends Service<ValueHelpHistorySettings> implements IValueHelpHistoryService {\n\tprivate appId!: string; // set in init\n\n\tprivate historyOptOutProvider!: HistoryOptOutProvider;\n\n\tprivate shellServices!: IShellServices;\n\n\tprivate globalHistoryData?: GlobalHistoryDataType;\n\n\tprivate appHistoryData?: AppHistoryDataType;\n\n\tprivate globalPersonalizer?: PersonalizerType;\n\n\tprivate appPersonalizer?: PersonalizerType;\n\n\tprivate static readonly appDataKey = \"sapui5.history\";\n\n\tprivate static readonly maxHistoryItems = 5;\n\n\t/**\n\t * Constructor for the class.\n\t */\n\tinit(): void {}\n\n\t/**\n\t * Initialize the history service.\n\t * It checks the enablement of the history service and starts the creation of the History opt-out dialog.\n\t * @returns Promise that is resolved when environment service and shell service are checked.\n\t */\n\tasync initialize(): Promise<this> {\n\t\tconst context = this.getContext(),\n\t\t\tappComponent = context.scopeObject as AppComponent;\n\n\t\ttry {\n\t\t\tconst [environmentCapabilities, shellServices] = await Promise.all([\n\t\t\t\tappComponent.getService(\"environmentCapabilities\"),\n\t\t\t\tappComponent.getService(\"shellServices\")\n\t\t\t]);\n\t\t\tthis.shellServices = shellServices;\n\t\t\tthis.appId = appComponent.getManifestEntry(\"sap.app\").id || \"unknownAppId\";\n\n\t\t\tconst hasUshell = (environmentCapabilities as EnvironmentCapabilitiesService).getCapabilities().UShell,\n\t\t\t\tenabled = (shellServices as IShellServices).getShellConfig()?.apps?.inputFieldHistory?.enabled;\n\n\t\t\tif (hasUshell && enabled) {\n\t\t\t\tthis.historyOptOutProvider = new HistoryOptOutProvider(this);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tLog.error(\"Cannot retrieve EnvironmentCapabilities or ShellServices\", err instanceof Error ? err.message : String(err));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Register the dedicated menu in the shell to maintain user preferences.\n\t */\n\tpublic async registerShellHook(): Promise<void> {\n\t\tif (this.historyOptOutProvider) {\n\t\t\tawait this.historyOptOutProvider.createOptOutUserProfileEntry();\n\n\t\t\t// If the mneu was never loaded, on first load it removes all the custom actions\n\t\t\tEventBus.getInstance().subscribeOnce(\"shell\", \"userActionsMenuCompLoaded\", async () => {\n\t\t\t\tawait this.historyOptOutProvider.createOptOutUserProfileEntry();\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Get the shell extension service.\n\t * This is used by the HistOptOutProvider to add a user menu entry.\n\t * @returns Shell extension service\n\t */\n\tgetShellExtensionService(): Extension {\n\t\treturn this.shellServices.getExtensionService();\n\t}\n\n\t/**\n\t * Get the personalizer from the shell service.\n\t * @param containerId The container ID to access the personalization data\n\t * @param itemId The item ID to access the personalization data\n\t * @returns Personalizer from the shell service\n\t */\n\tprivate async getPersonalizer(containerId: string, itemId: string): Promise<PersonalizerType> {\n\t\tconst persIdObj = {\n\t\t\t\tcontainer: containerId,\n\t\t\t\titem: itemId\n\t\t\t},\n\t\t\tscope = {}; // use defaults from shellServices\n\n\t\treturn this.shellServices.getPersonalizer(persIdObj, scope, undefined);\n\t}\n\n\t//\n\t// The following methodsare based on: sap\\ui\\comp\\historyvalues\\HistoryGlobalDataService.js\n\t//\n\n\t/**\n\t * Get the global personalizer from the shell service and store it in this class.\n\t * @returns Global personalizer from the shell service\n\t */\n\tprivate async getGlobalPersonalizer(): Promise<PersonalizerType> {\n\t\tif (!this.globalPersonalizer) {\n\t\t\tconst historyPrefix = \"sapui5.history.\";\n\t\t\tconst containerId = historyPrefix + \"HistorySettings\";\n\t\t\tconst itemId = historyPrefix + \"settings\";\n\t\t\tthis.globalPersonalizer = await this.getPersonalizer(containerId, itemId);\n\t\t}\n\t\treturn this.globalPersonalizer;\n\t}\n\n\t/**\n\t * Get the global history default data.\n\t * This is the initial data structure if no global history data is stored yet.\n\t * @returns Global history default data\n\t */\n\tprivate getGlobalDefaultData(): GlobalHistoryDataType {\n\t\treturn {\n\t\t\thistoryEnabled: true,\n\t\t\tsuggestionsEnabled: false,\n\t\t\tapps: {}\n\t\t};\n\t}\n\n\t/**\n\t * Get the global history data from the personalization service or create default data.\n\t * @returns Promise which is resolved to global history data\n\t */\n\tprivate async getGlobalHistoryData(): Promise<GlobalHistoryDataType> {\n\t\tif (!this.globalHistoryData) {\n\t\t\tconst globalPersonalizer = await this.getGlobalPersonalizer();\n\t\t\tconst persData = (await globalPersonalizer.getPersData()) as GlobalHistoryDataType | undefined;\n\t\t\tthis.globalHistoryData = persData ? { ...persData } : this.getGlobalDefaultData();\n\t\t}\n\t\treturn this.globalHistoryData;\n\t}\n\n\t/**\n\t * Get the status of the user-specific history enabled switch from the global history data.\n\t * @returns Promise which is resolved to a boolean value for the history enabled switch\n\t */\n\tasync getHistoryEnabled(): Promise<boolean> {\n\t\t// The history enabled switch which can be changed in the 'Input History Settings' dialog.\n\t\tconst globalHistoryData = await this.getGlobalHistoryData();\n\n\t\treturn globalHistoryData.historyEnabled;\n\t}\n\n\t/**\n\t * Set the the status of the user-specific history enabled switch in the global history data.\n\t * @param enabled A boolean value for the history enabled switch\n\t * @returns Promise which is resolved when the status is changed in the personalization data\n\t */\n\tasync setHistoryEnabled(enabled: boolean): Promise<void> {\n\t\tconst globalHistoryData = await this.getGlobalHistoryData();\n\n\t\tglobalHistoryData.historyEnabled = enabled;\n\t\tconst globalPersonalizer = await this.getGlobalPersonalizer();\n\t\tglobalPersonalizer.setPersData(globalHistoryData);\n\t}\n\n\t//\n\t// The following methodsare based on: sap\\ui\\comp\\historyvalues\\HistoryAppDataService.js\n\t//\n\n\t/**\n\t * Create a random UUID-like container ID.\n\t * @returns Container ID\n\t */\n\tprivate static createAppContainerId(): string {\n\t\t// Here we use the same coding as in V2 to create a random UUID-like container ID\n\t\tconst uuid = \"xxxxxxxx.xxxx.4xxx.yxxx.xxxxxxxxxxxx\".replace(/[xy]/g, function (char) {\n\t\t\tlet random = (Math.random() * 16) | 0;\n\n\t\t\tif (char === \"y\") {\n\t\t\t\trandom = (random & 0x3) | 0x8;\n\t\t\t}\n\n\t\t\treturn random.toString(16);\n\t\t});\n\n\t\treturn \"ui5.\" + uuid;\n\t}\n\n\t/**\n\t * Add an entry for an app ID to the global history data.\n\t * The entry is a mapping for an app ID to a container ID.\n\t * @param globalHistoryData The global history data structure\n\t * @param appId The app ID\n\t * @returns Newly created container ID\n\t */\n\tprivate async addAppToGlobalHistory(globalHistoryData: GlobalHistoryDataType, appId: string): Promise<string> {\n\t\tconst containerId = ValueHelpHistoryService.createAppContainerId();\n\n\t\tglobalHistoryData.apps[appId] = containerId;\n\t\tconst globalPersonalizer = await this.getGlobalPersonalizer();\n\t\tglobalPersonalizer.setPersData(globalHistoryData);\n\n\t\treturn containerId;\n\t}\n\n\t/**\n\t * Get the app personalizer from the shell service and store it in this class.\n\t * @returns Promise which is resolved to the app personalizer from the shell service.\n\t */\n\tprivate async getAppPersonalizer(): Promise<PersonalizerType> {\n\t\tif (!this.appPersonalizer) {\n\t\t\tconst globalHistoryData = await this.getGlobalHistoryData(),\n\t\t\t\tapps = globalHistoryData.apps,\n\t\t\t\tcontainerId = apps[this.appId] || (await this.addAppToGlobalHistory(globalHistoryData, this.appId)),\n\t\t\t\titemId = \"sapui5.history.appData\";\n\n\t\t\tthis.appPersonalizer = await this.getPersonalizer(containerId, itemId);\n\t\t}\n\t\treturn this.appPersonalizer;\n\t}\n\n\t/**\n\t * Get the app-specific history default data.\n\t * This is the initial data structure if no app history data is stored yet.\n\t * @returns App history default data\n\t */\n\tprivate getAppDefaultData(): AppHistoryDataType {\n\t\tconst appHistoryData: AppHistoryDataType = {};\n\t\tappHistoryData[ValueHelpHistoryService.appDataKey] = {};\n\t\treturn appHistoryData;\n\t}\n\n\t/**\n\t * Get the app-specific history data from the personalization service or create default data.\n\t * @returns Promise which is resolved to app history data\n\t */\n\tprivate async getAppHistoryData(): Promise<AppHistoryDataType> {\n\t\tif (!this.appHistoryData) {\n\t\t\tconst appPersonalizer = await this.getAppPersonalizer(),\n\t\t\t\tpersData = (await appPersonalizer.getPersData?.()) as AppHistoryDataType | undefined;\n\n\t\t\tthis.appHistoryData = persData ? { ...persData } : this.getAppDefaultData(); // In V2 the data is copied. Do we need to copy it?\n\t\t}\n\t\treturn this.appHistoryData;\n\t}\n\n\t/**\n\t * Get the field data for a field path from the personalization service.\n\t * @param fieldPath The field path\n\t * @returns Promise which is resolved to a list of field data\n\t */\n\tprivate async getFieldDataFromService(fieldPath: string): Promise<FieldDataType[]> {\n\t\tconst appHistoryData = await this.getAppHistoryData(),\n\t\t\tappData = appHistoryData[ValueHelpHistoryService.appDataKey],\n\t\t\tfieldData = appData[fieldPath];\n\n\t\t// remove entries with different language\n\t\tconst appLanguage = Localization.getLanguage();\n\t\treturn fieldData?.filter((data) => data[APP_LANGUAGE] === appLanguage) || [];\n\t}\n\n\t/**\n\t * Set the field data for a field path in the personalization service.\n\t * @param fieldPath The field path\n\t * @param data List of field data\n\t * @returns Promise which is resolved when the field data is set\n\t */\n\tprivate async setFieldDataWithService(fieldPath: string, data: FieldDataType[]): Promise<void> {\n\t\tconst historyAppData = await this.getAppHistoryData(),\n\t\t\tappData = historyAppData[ValueHelpHistoryService.appDataKey],\n\t\t\tappPersonalizer = await this.getAppPersonalizer();\n\n\t\tappData[fieldPath] = data;\n\n\t\treturn appPersonalizer.setPersData(historyAppData);\n\t}\n\n\t/**\n\t * Get a field data list with distinct entries.\n\t * @param dataList A list of field data with possible duplicate entries\n\t * @returns List of field data with distinct enrtries\n\t */\n\tprivate static getDistinct(dataList: FieldDataType[]): FieldDataType[] {\n\t\tconst uniqueFlags = {} as Record<string, boolean>,\n\t\t\tdistinct = [] as FieldDataType[];\n\n\t\tfor (const data of dataList) {\n\t\t\tconst key = Object.values(data).join();\n\t\t\tif (!uniqueFlags[key]) {\n\t\t\t\tdistinct.push(data);\n\t\t\t\tuniqueFlags[key] = true;\n\t\t\t}\n\t\t}\n\n\t\treturn distinct;\n\t}\n\n\t/**\n\t * Deletes the history data for all apps from the personalization data.\n\t * This method deletes all app-specific personalization data entries.\n\t * The global history entry is kept, so the mapping from app ID to container ID can be reused.\n\t * @returns Promise which is resolved when the history data is deleted.\n\t */\n\tasync deleteHistoryForAllApps(): Promise<void> {\n\t\tconst shellServices = this.shellServices,\n\t\t\tglobalHistoryData = await this.getGlobalHistoryData(),\n\t\t\tdeletePromises: Promise<unknown>[] = [],\n\t\t\tappIds = globalHistoryData.apps;\n\n\t\tfor (const key of Object.keys(appIds)) {\n\t\t\tdeletePromises.push(shellServices.deletePersonalizationContainer(appIds[key], undefined)); // ts\n\t\t}\n\t\tthis.appHistoryData = undefined; // delete also cached app history data\n\t\tawait Promise.all(deletePromises);\n\t}\n\n\t/**\n\t * Get the field data for a field path from the personalization service if the history service is enabled.\n\t * The history service is enabled if the shell switch and the user-specific switch are both enabled.\n\t * @param fieldPath The field path\n\t * @returns Promise which is resolved to a list of field data\n\t */\n\tasync getFieldData(fieldPath: string): Promise<FieldDataType[]> {\n\t\tconst historyEnabledShell = Boolean(this.historyOptOutProvider),\n\t\t\thistoryEnabledUser = await this.getHistoryEnabled();\n\n\t\tif (historyEnabledShell && historyEnabledUser) {\n\t\t\t// removing the key-value pair that were added for internal usage purposes in the history service (key starts with '@') and returns only the data which is shown on the UI.\n\t\t\tconst fieldData = await this.getFieldDataFromService(fieldPath);\n\t\t\treturn fieldData.map((obj) =>\n\t\t\t\tObject.entries(obj)\n\t\t\t\t\t.filter(([key, _]) => !key.startsWith(\"@\"))\n\t\t\t\t\t.reduce((accumulator, [key, value]) => ({ ...accumulator, [key]: value }), {})\n\t\t\t);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Set the field data for a field path in the personalization service if the history service is enabled.\n\t * The history service is enabled if the shell switch and the user-specific switch are both enabled.\n\t * @param fieldPath The field path\n\t * @param fieldData List of field data\n\t * @returns Promise which is resolved when the field data is set\n\t */\n\tasync setFieldData(fieldPath: string, fieldData: FieldDataType[]): Promise<void> {\n\t\tconst historyEnabledShell = Boolean(this.historyOptOutProvider),\n\t\t\thistoryEnabledUser = await this.getHistoryEnabled();\n\n\t\tif (historyEnabledShell && historyEnabledUser) {\n\t\t\t// Add the current language to every field data entry\n\t\t\tconst appLanguage = Localization.getLanguage();\n\t\t\tfor (const data of fieldData) {\n\t\t\t\tdata[APP_LANGUAGE] = appLanguage;\n\t\t\t}\n\t\t\tconst fieldOldData = await this.getFieldDataFromService(fieldPath),\n\t\t\t\tdataToSet = ValueHelpHistoryService.getDistinct(fieldData.reverse().concat(fieldOldData)).slice(\n\t\t\t\t\t0,\n\t\t\t\t\tValueHelpHistoryService.maxHistoryItems\n\t\t\t\t);\n\n\t\t\treturn this.setFieldDataWithService(fieldPath, dataToSet);\n\t\t}\n\t}\n}\n\n/**\n * Service Factory for the ValueHelpHistoryService\n *\n */\nexport default class ValueHelpHistoryServiceFactory extends ServiceFactory<ValueHelpHistorySettings> {\n\tprivate instance!: ValueHelpHistoryService;\n\n\tasync createInstance(serviceContext: ServiceContext<ValueHelpHistorySettings>): Promise<ValueHelpHistoryService> {\n\t\tthis.instance = new ValueHelpHistoryService(serviceContext);\n\t\treturn this.instance.initialize();\n\t}\n\n\tgetInstance(): ValueHelpHistoryService {\n\t\treturn this.instance;\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"ValueHelpHistoryServiceFactory-dbg.js"}