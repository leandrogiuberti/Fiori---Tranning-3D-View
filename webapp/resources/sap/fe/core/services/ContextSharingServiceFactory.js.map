{"version":3,"file":"ContextSharingServiceFactory.js","names":["ContextSharingService","_Service","apply","this","arguments","_exports","_inheritsLoose","_proto","prototype","init","initPromise","Promise","async","appComponent","getContext","bind","scopeObject","registerProvider","resolve","onExit","contextChannel","unregisterProvider","isContextChannelSupported","environmentCapabilities","getService","getCapabilities","ContextSharingSupported","isContextSharingEnabled","default","ContextChannel","__ui5_require_async","getInstance","err","Log","error","getId","buildContext","shell","getShellServices","view","CommonUtils","getCurrentPageView","app","getManifestEntry","context","app_title","title","id","getViewName","flp","hash","getHash","getRouterProxy","entity","servicePath","getModel","getServiceUrl","entityPath","getBindingContext","getPath","getViewData","fullContextPath","getController","contextSharing","Service","ContextSharingServiceFactory","_ServiceFactory","_proto2","createInstance","oServiceContext","contextSharingService","ServiceFactory"],"sources":["./ContextSharingServiceFactory.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ContextChannel from \"sap/insights/channels/ContextChannel\";\nimport type { IContextProvider } from \"sap/insights/channels/ContextChannel\";\nimport Service from \"sap/ui/core/service/Service\";\nimport ServiceFactory from \"sap/ui/core/service/ServiceFactory\";\nimport type { ServiceContext } from \"types/metamodel_types\";\nimport type AppComponent from \"../AppComponent\";\nimport CommonUtils from \"../CommonUtils\";\nimport type { IShellServices } from \"../services/ShellServicesFactory\";\nimport type { EnvironmentCapabilitiesService } from \"./EnvironmentServiceFactory\";\n\nexport class ContextSharingService extends Service<ContextSharingServiceFactory> implements IContextProvider {\n\tinitPromise!: Promise<ContextSharingService>;\n\n\tprivate appComponent!: AppComponent;\n\n\tprivate contextChannel!: ContextChannel;\n\n\tinit(): void {\n\t\tthis.initPromise = new Promise(async (resolve) => {\n\t\t\tthis.appComponent = super.getContext.bind(this)().scopeObject as AppComponent;\n\t\t\tawait this.registerProvider();\n\t\t\tresolve(this);\n\t\t});\n\t}\n\n\tonExit(): void {\n\t\tthis.contextChannel?.unregisterProvider(this);\n\t}\n\n\tpublic async isContextChannelSupported(): Promise<boolean> {\n\t\tconst environmentCapabilities = (await this.appComponent.getService(\"environmentCapabilities\")) as EnvironmentCapabilitiesService;\n\t\treturn (\n\t\t\tenvironmentCapabilities.getCapabilities().ContextSharingSupported && (await environmentCapabilities.isContextSharingEnabled())\n\t\t);\n\t}\n\n\t/**\n\t * This function is responsible to register the current service as a provider for the Joule context.\n\t */\n\tprivate async registerProvider(): Promise<void> {\n\t\tif (!(await this.isContextChannelSupported())) {\n\t\t\treturn;\n\t\t}\n\t\tconst { default: ContextChannel } = await import(\"sap/insights/channels/ContextChannel\");\n\t\t// joule integration\n\t\ttry {\n\t\t\tthis.contextChannel = await ContextChannel.getInstance();\n\t\t\tthis.contextChannel.registerProvider(this);\n\t\t} catch (err: unknown) {\n\t\t\tLog.error(err as string);\n\t\t}\n\t}\n\n\tgetId(): string {\n\t\treturn this.appComponent.getId();\n\t}\n\n\t/**\n\t * Build a context related to the active view to be shared with the Joule Web Client.\n\t *\n\t * The custom property of this context can be enriched by overriding the #ContextSharing.getContext function.\n\t * @returns A context object\n\t */\n\tbuildContext(): object {\n\t\tconst shell = this.appComponent.getShellServices() as IShellServices & {\n\t\t\tgetContext(): { scopeObject: AppComponent };\n\t\t};\n\t\tconst view = CommonUtils.getCurrentPageView(this.appComponent);\n\t\tconst app = this.appComponent.getManifestEntry(\"sap.app\");\n\t\t/*\n\t\t * Sample of context:\n\t\t * {\n\t\t * \t\"app_title\": \"Manage Sales Orders (V2)\",\n\t\t * \t\"cus.sd.salesorderv2.manage\": {\n\t\t * \t\t\"app\": {\n\t\t * \t\t\t\"view\": \"sap.fe.templates.ObjectPage.ObjectPage\"\n\t\t * \t\t},\n\t\t * \t\tflp: {\n\t\t * \t\t\t\"hash\": \"#SalesOrder-manageV2&/SalesOrderManage('91375')\"\n\t\t * \t\t},\n\t\t * \t\"entity\": {\n\t\t * \t\t\"servicePath\": \"/sap/opu/odata4/sap/c_salesordermanage_srv/srvd/sap/c_salesordermanage_sd/0001\",\n\t\t * \t\t\"entityPath\": \"/SalesOrderManage(ID='91375')\"\n\t\t * \t\t}\n\t\t *  \"custom\" : {\n\t\t * \t\t\"customProp\": \"customValue\"\n\t\t * \t}\n\t\t * }\n\t\t */\n\t\tconst context = {\n\t\t\tapp_title: app.title,\n\t\t\t[app.id]: {\n\t\t\t\tapp: {\n\t\t\t\t\tview: view.getViewName()\n\t\t\t\t},\n\t\t\t\tflp: {\n\t\t\t\t\thash: `${shell.getHash()}&/${shell.getContext().scopeObject.getRouterProxy().getHash()}`\n\t\t\t\t},\n\t\t\t\tentity: {\n\t\t\t\t\tservicePath: view.getModel().getServiceUrl(),\n\t\t\t\t\tentityPath: view.getBindingContext()?.getPath() ?? view.getViewData()?.fullContextPath\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\treturn view.getController().contextSharing.getContext(context);\n\t}\n\n\tasync getContext(): Promise<object> {\n\t\treturn Promise.resolve(this.buildContext());\n\t}\n}\n\nexport default class ContextSharingServiceFactory extends ServiceFactory<ContextSharingServiceFactory> {\n\tpublic async createInstance(oServiceContext: ServiceContext<ContextSharingServiceFactory>): Promise<ContextSharingService> {\n\t\tconst contextSharingService = new ContextSharingService(oServiceContext);\n\t\treturn contextSharingService.initPromise;\n\t}\n}\n"],"mappings":";;;;slBAWaA,EAAqB,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAC,MAAAC,KAAAC,YAAAD,IAAA,CAAAE,EAAAL,wBAAAM,EAAAN,EAAAC,GAAA,IAAAM,EAAAP,EAAAQ,UAAAD,EAOjCE,KAAA,SAAAA,IACCN,KAAKO,YAAc,IAAIC,QAAQC,UAC9BT,KAAKU,aAAeZ,EAAAO,UAAMM,WAAWC,KAAKZ,KAAtBF,GAA8Be,kBAC5Cb,KAAKc,mBACXC,EAAQf,OAEV,EAACI,EAEDY,OAAA,SAAAA,IACChB,KAAKiB,gBAAgBC,mBAAmBlB,KACzC,EAACI,EAEYe,0BAAbV,eAAaU,IACZ,MAAMC,QAAiCpB,KAAKU,aAAaW,WAAW,2BACpE,OACCD,EAAwBE,kBAAkBC,+BAAkCH,EAAwBI,yBAEtG,EAEApB,EAGcU,iBAAdL,eAAcK,IACb,UAAYd,KAAKmB,4BAA8B,CAC9C,MACD,CACA,MAAQM,QAASC,SAAyBC,EAAO,wCAEjD,IACC3B,KAAKiB,qBAAuBS,EAAeE,cAC3C5B,KAAKiB,eAAeH,iBAAiBd,KACtC,CAAE,MAAO6B,GACRC,EAAIC,MAAMF,EACX,CACD,EAACzB,EAED4B,MAAA,SAAAA,IACC,OAAOhC,KAAKU,aAAasB,OAC1B,EAEA5B,EAMA6B,aAAA,SAAAA,IACC,MAAMC,EAAQlC,KAAKU,aAAayB,mBAGhC,MAAMC,EAAOC,EAAYC,mBAAmBtC,KAAKU,cACjD,MAAM6B,EAAMvC,KAAKU,aAAa8B,iBAAiB,WAqB/C,MAAMC,EAAU,CACfC,UAAWH,EAAII,MACf,CAACJ,EAAIK,IAAK,CACTL,IAAK,CACJH,KAAMA,EAAKS,eAEZC,IAAK,CACJC,KAAM,GAAGb,EAAMc,cAAcd,EAAMvB,aAAaE,YAAYoC,iBAAiBD,aAE9EE,OAAQ,CACPC,YAAaf,EAAKgB,WAAWC,gBAC7BC,WAAYlB,EAAKmB,qBAAqBC,WAAapB,EAAKqB,eAAeC,mBAI1E,OAAOtB,EAAKuB,gBAAgBC,eAAejD,WAAW8B,EACvD,EAACrC,EAEKO,WAANF,eAAME,IACL,OAAOH,QAAQO,QAAQf,KAAKiC,eAC7B,EAAC,OAAApC,CAAA,CAnGgC,CAASgE,GAAO3D,EAAAL,wBAAA,IAsG7BiE,EAA4B,SAAAC,GAAA,SAAAD,IAAA,OAAAC,EAAAhE,MAAAC,KAAAC,YAAAD,IAAA,CAAAE,EAAA4D,EAAA3D,EAAA2D,EAAAC,GAAA,IAAAC,EAAAF,EAAAzD,UAAA2D,EACnCC,eAAbxD,eAAawD,EAAeC,GAC3B,MAAMC,EAAwB,IAAItE,EAAsBqE,GACxD,OAAOC,EAAsB5D,WAC9B,EAAC,OAAAuD,CAAA,CAJ+C,CAASM,GAAclE,EAAA4D,EAAA,OAAA5D,CAAA","ignoreList":[]}