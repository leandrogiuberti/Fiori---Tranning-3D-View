{"version":3,"file":"ViewState.js","names":["NavType","NavLibrary","ADDITIONAL_STATES_KEY","getStateUtil","async","__ui5_require_async","default","_mControlStateHandlerMap","retrieve","oVM","variantId","getCurrentVariantKey","apply","controlState","undefined","isVariantIdAvailable","this","_checkIfVariantIdIsAvailable","sVariantReference","getStandardVariantKey","controlsVariantIdUnavailable","push","getFor","ControlVariantApplyAPI","activateVariant","element","variantReference","_setInitialStatesForDeltaCompute","error","Log","invalidateInitialStateForApply","multipleModeControl","selectedKey","content","getSelectedKey","tabBar","selectedItem","getItems","find","item","getKey","setSelectedKey","getModel","getProperty","refreshSelectedInnerControlContent","refreshBinding","oTable","oTableBinding","getRowBinding","oRootBinding","getRootBinding","aggregation","getAggregation","hierarchyQualifier","refresh","oHeaderContext","getHeaderContext","sGroupId","getGroupId","requestSideEffects","$NavigationPropertyPath","info","getId","oSegmentedButton","oControlState","getParent","isA","fireEvent","oSelect","oDynamicPage","headerExpanded","getHeaderExpanded","setHeaderExpanded","oView","oController","getController","viewState","retrieveViewState","oNavParameters","skipMerge","applyViewState","refreshViewBindings","oComponentContainer","oComponent","getComponentInstance","retrieveControlState","getRootControl","applyControlState","ViewState","_dec","defineUI5Class","_dec2","publicExtension","_dec3","finalExtension","_dec4","_dec5","extensible","OverrideExecution","After","_dec6","privateExtension","_dec7","_dec8","_dec9","_dec10","_dec11","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_dec24","_dec25","_dec26","_dec27","_dec28","_dec29","_dec30","_dec31","_dec32","_dec33","_dec34","_dec35","Instead","_dec36","_dec37","_dec38","_dec39","_dec40","_dec41","_dec42","_dec43","_dec44","_dec45","_dec46","_dec47","_dec48","_dec49","_dec50","_dec51","_class","_class2","_ControllerExtension","_this","call","_retrieveCalls","initialControlStatesMapper","viewStateControls","stateContributors","adaptControls","externalStatePromises","controlStateKey","initialControlStates","variantControls","variantManagement","updateInitialState","Promise","all","filter","control","includes","map","_addEventListenersToVariantManagement","externalStatePromise","retrieveExternalState","getStateKey","forEach","initialControlState","i","e","_pInitialStateApplied","resolve","_pInitialStateAppliedResolve","_inheritsLoose","_proto","prototype","aControls","collectResults","base","adaptBindingRefreshControls","oPromiseChain","oControl","then","refreshControlBinding","bind","aCollectedControls","oControlRefreshBindingHandler","getControlRefreshBindingHandler","getMetadata","getName","oRefreshBindingHandler","sType","adaptBindingRefreshHandler","_oControl","_oControlHandler","onSuspend","onRestore","destroy","fnCall","aResults","_len","arguments","length","args","Array","_key","adaptControlStateHandler","aControlHandler","getControlStateHandler","aInternalControlStateHandler","aCustomControlStateHandler","retrieveState","applyState","_control","shouldApplyDiffState","navigationType","hybrid","applyLegacyState","getControlState","Object","assign","concat","adaptStateControls","_aCollectedControls","getView","getLocalId","_retrieveViewState","oViewState","aResolvedStates","vResult","key","value","reduce","oStates","mState","oCurrentState","mergeObjects","prevState","_currentViewState","keys","_addMissingState","mAdditionalStates","_retrieveAdditionalStates","err","viewId","presentRetrieveCall","viewStateResults","allSettled","viewStateSettledPromise","status","retrieveAdditionalStates","aControlStateHandlers","mControlStateHandler","Error","aStates","oFinalState","applyInitialStateOnly","controlKey","adaptApplyStateNavParams","_navParameter","oNavParameter","_getInitialStateApplied","_isStateEmptyForIAppStateNavType","__isRootViewController","onBeforeStateApplied","hasVariantManagement","configOfStateApply","navTypeParameters","state","sortedAdaptStateControls","modifiedControls","isVariantManagementControl","sKey","iAppState","applyAdditionalStates","applyNavigationParameters","promises","_getPromisesForAdaptControls","onAfterStateApplied","_setInitialStateApplied","navParameter","sVariantId","aVariants","getVariants","bIsControlStateVariantAvailable","oVariant","pInitialStateAppliedResolve","navType","rootViewController","aPromises","updateAppStateDebounced","updateAppStateTimer","clearTimeout","setTimeout","getExtensionAPI","updateAppState","registerStateContributor","stateContributor","deregisterStateContributor","targetIndex","findIndex","contributor","splice","getInterface","_getControlState","fullState","initialState","oPayload","variantManagedControls","fnEvent","_updateInitialStatesOnVariantChange","attachSave","attachSelect","vmAssociatedControlsToReset","vmAssociatedcontrolKey","viewControls","controlId","setInitialState","_isInitialStatesApplicable","isNavHybrid","ControllerExtension","_applyDecoratedDescriptor","getOwnPropertyDescriptor"],"sources":["./ViewState.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport mergeObjects from \"sap/base/util/merge\";\nimport type DynamicPage from \"sap/f/DynamicPage\";\nimport { defineUI5Class, extensible, finalExtension, privateExtension, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type IViewStateContributor from \"sap/fe/core/controllerextensions/viewState/IViewStateContributor\";\nimport type SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport NavLibrary from \"sap/fe/navigation/library\";\nimport type MultipleModeControl from \"sap/fe/templates/ListReport/controls/MultipleModeControl\";\nimport type IconTabFilter from \"sap/m/IconTabFilter\";\nimport type SegmentedButton from \"sap/m/SegmentedButton\";\nimport type Select from \"sap/m/Select\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\nimport type BaseObject from \"sap/ui/base/Object\";\nimport type ComponentContainer from \"sap/ui/core/ComponentContainer\";\nimport type Control from \"sap/ui/core/Control\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type VariantManagement from \"sap/ui/fl/variants/VariantManagement\";\nimport type MDCControl from \"sap/ui/mdc/Control\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type MDCTable from \"sap/ui/mdc/Table\";\n\nimport type StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type FclController from \"../rootView/Fcl.controller\";\nimport type NavContainerController from \"../rootView/NavContainer.controller\";\n\n// additionalStates are stored next to control IDs, so name clash avoidance needed. Fortunately IDs have restrictions:\n// \"Allowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons.\"\n// Therefore adding a symbol like # or @\nconst NavType = NavLibrary.NavType;\n\n/**\n * Definition of a navigation parameter\n * @public\n */\nexport type NavigationParameter = {\n\t/**\n\t *  The actual navigation type.\n\t *  @public\n\t */\n\tnavigationType: string;\n\t/**\n\t * The selectionVariant from the navigation.\n\t * @public\n\t */\n\tselectionVariant?: SelectionVariant;\n\t/**\n\t * The selectionVariant defaults from the navigation\n\t *  @public\n\t */\n\tselectionVariantDefaults?: SelectionVariant;\n\t/**\n\t * Defines whether the standard variant must be used in variant management\n\t *  @public\n\t */\n\trequiresStandardVariant?: boolean;\n\t/**\n\t * Defines whether variant IDs from URL parameters should be applied\n\t * @private\n\t */\n\tapplyVariantFromURLParams?: boolean;\n};\n\nconst ADDITIONAL_STATES_KEY = \"#additionalStates\";\n\nexport type ControlState =\n\t| ({\n\t\t\tinitialState?: {\n\t\t\t\tsupplementaryConfig?: object;\n\t\t\t};\n\t\t\tfullState?: {\n\t\t\t\tfilter?: object;\n\t\t\t};\n\t  } & Record<string, unknown>)\n\t| undefined;\n\nexport type NavParameters = {\n\tnavigationType?: string;\n};\nexport type LegacyFilterBarState = {\n\tfilter?: Record<string, Array<object>>;\n} & Record<string, unknown>;\n\n///////////////////////////////////////////////////////////////////\n// methods to retrieve & apply states for the different controls //\n///////////////////////////////////////////////////////////////////\nexport type ControlStateHandler<T extends ManagedObject, K extends unknown | undefined> = {\n\tretrieve?: (oControl: T) => K | Promise<K>;\n\tapply?: (oControl: T, controlState: K, navParameters?: NavigationParameter, skipMerge?: boolean) => Promise<void> | void;\n\trefreshBinding?: (oControl: T) => void;\n};\ntype ControlStateMap = {\n\t\"sap.ui.fl.variants.VariantManagement\": ControlStateHandler<VariantManagement, { variantId: string | null }>;\n\t\"sap.fe.templates.ListReport.controls.MultipleModeControl\": ControlStateHandler<MultipleModeControl, { selectedKey: string }>;\n\t\"sap.ui.mdc.Table\": ControlStateHandler<MDCTable, ControlState>;\n\t\"sap.m.SegmentedButton\": ControlStateHandler<SegmentedButton, { selectedKey: string }>;\n\t\"sap.m.Select\": ControlStateHandler<Select, { selectedKey: string }>;\n\t\"sap.f.DynamicPage\": ControlStateHandler<DynamicPage, { headerExpanded: boolean }>;\n\t\"sap.ui.core.ComponentContainer\": ControlStateHandler<ComponentContainer, object>;\n\t\"sap.ui.core.mvc.View\": ControlStateHandler<FEView, ControlState>;\n};\nconst getStateUtil = async function (): Promise<typeof StateUtil> {\n\treturn (await import(\"sap/ui/mdc/p13n/StateUtil\")).default;\n};\nconst _mControlStateHandlerMap: ControlStateMap = {\n\t\"sap.ui.fl.variants.VariantManagement\": {\n\t\tretrieve: function (oVM: VariantManagement): { variantId: string | null } {\n\t\t\treturn {\n\t\t\t\tvariantId: oVM.getCurrentVariantKey()\n\t\t\t};\n\t\t},\n\t\tapply: async function (this: ViewState, oVM: VariantManagement, controlState?: { variantId?: string | null }): Promise<void> {\n\t\t\ttry {\n\t\t\t\tif (controlState && controlState.variantId !== undefined && controlState.variantId !== oVM.getCurrentVariantKey()) {\n\t\t\t\t\tconst isVariantIdAvailable = this._checkIfVariantIdIsAvailable(oVM, controlState.variantId);\n\t\t\t\t\tlet sVariantReference;\n\t\t\t\t\tif (isVariantIdAvailable) {\n\t\t\t\t\t\tsVariantReference = controlState.variantId;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsVariantReference = oVM.getStandardVariantKey();\n\t\t\t\t\t\tthis.controlsVariantIdUnavailable.push(...oVM.getFor());\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst ControlVariantApplyAPI = (await import(\"sap/ui/fl/apply/api/ControlVariantApplyAPI\")).default;\n\t\t\t\t\t\tawait ControlVariantApplyAPI.activateVariant({\n\t\t\t\t\t\t\telement: oVM,\n\t\t\t\t\t\t\tvariantReference: sVariantReference as string\n\t\t\t\t\t\t});\n\t\t\t\t\t\tawait this._setInitialStatesForDeltaCompute(oVM);\n\t\t\t\t\t} catch (error: unknown) {\n\t\t\t\t\t\tLog.error(error as string);\n\t\t\t\t\t\tthis.invalidateInitialStateForApply.push(...oVM.getFor());\n\t\t\t\t\t\tawait this._setInitialStatesForDeltaCompute(oVM);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._setInitialStatesForDeltaCompute(oVM);\n\t\t\t\t}\n\t\t\t} catch (error: unknown) {\n\t\t\t\tLog.error(error as string);\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.fe.templates.ListReport.controls.MultipleModeControl\": {\n\t\tretrieve: function (multipleModeControl: MultipleModeControl): { selectedKey: string } {\n\t\t\treturn {\n\t\t\t\tselectedKey: multipleModeControl.content.getSelectedKey()\n\t\t\t};\n\t\t},\n\t\tapply: function (multipleModeControl: MultipleModeControl, controlState?: { selectedKey: string }) {\n\t\t\tif (controlState?.selectedKey) {\n\t\t\t\tconst tabBar = multipleModeControl.content;\n\t\t\t\tconst selectedItem = tabBar.getItems().find((item) => (item as IconTabFilter).getKey() === controlState.selectedKey);\n\n\t\t\t\tif (selectedItem) {\n\t\t\t\t\ttabBar.setSelectedKey(controlState.selectedKey);\n\t\t\t\t\tif (multipleModeControl.getModel(\"_pageModel\")?.getProperty(\"/hideFilterBar\") === true) {\n\t\t\t\t\t\tmultipleModeControl.refreshSelectedInnerControlContent();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.ui.mdc.Table\": {\n\t\trefreshBinding: function (oTable: MDCTable) {\n\t\t\tconst oTableBinding = oTable.getRowBinding();\n\t\t\tif (oTableBinding) {\n\t\t\t\tconst oRootBinding = oTableBinding.getRootBinding();\n\t\t\t\tconst aggregation = oTableBinding.getAggregation() as { hierarchyQualifier?: string } | undefined;\n\t\t\t\tif (oRootBinding === oTableBinding && aggregation?.hierarchyQualifier === undefined) {\n\t\t\t\t\t// absolute binding (except TreeTable, where we want to keep expansion states)\n\t\t\t\t\toTableBinding.refresh();\n\t\t\t\t} else {\n\t\t\t\t\t// relative binding or TreeTable\n\t\t\t\t\tconst oHeaderContext = oTableBinding.getHeaderContext();\n\t\t\t\t\tconst sGroupId = oTableBinding.getGroupId();\n\n\t\t\t\t\tif (oHeaderContext) {\n\t\t\t\t\t\toHeaderContext.requestSideEffects([{ $NavigationPropertyPath: \"\" }], sGroupId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tLog.info(`Table: ${oTable.getId()} was not refreshed. No binding found!`);\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.m.SegmentedButton\": {\n\t\tretrieve: function (oSegmentedButton: SegmentedButton): { selectedKey: string } {\n\t\t\treturn {\n\t\t\t\tselectedKey: oSegmentedButton.getSelectedKey()\n\t\t\t};\n\t\t},\n\t\tapply: function (this: ViewState, oSegmentedButton: SegmentedButton, oControlState?: { selectedKey: string }): void {\n\t\t\tif (oControlState?.selectedKey && oControlState.selectedKey !== oSegmentedButton.getSelectedKey()) {\n\t\t\t\toSegmentedButton.setSelectedKey(oControlState.selectedKey);\n\t\t\t\tif (oSegmentedButton.getParent()?.isA(\"sap.ui.mdc.ActionToolbar\")) {\n\t\t\t\t\toSegmentedButton.fireEvent(\"selectionChange\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.m.Select\": {\n\t\tretrieve: function (oSelect: Select): { selectedKey: string } {\n\t\t\treturn {\n\t\t\t\tselectedKey: oSelect.getSelectedKey()\n\t\t\t};\n\t\t},\n\t\tapply: function (this: ViewState, oSelect: Select, oControlState?: { selectedKey: string }): void {\n\t\t\tif (oControlState?.selectedKey && oControlState.selectedKey !== oSelect.getSelectedKey()) {\n\t\t\t\toSelect.setSelectedKey(oControlState.selectedKey);\n\t\t\t\tif (oSelect.getParent()?.isA(\"sap.ui.mdc.ActionToolbar\")) {\n\t\t\t\t\toSelect.fireEvent(\"change\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.f.DynamicPage\": {\n\t\tretrieve: function (oDynamicPage: DynamicPage): { headerExpanded: boolean } {\n\t\t\treturn {\n\t\t\t\theaderExpanded: oDynamicPage.getHeaderExpanded()\n\t\t\t};\n\t\t},\n\t\tapply: function (oDynamicPage: DynamicPage, oControlState?: { headerExpanded: boolean }): void {\n\t\t\tif (oControlState) {\n\t\t\t\toDynamicPage.setHeaderExpanded(oControlState.headerExpanded);\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.ui.core.mvc.View\": {\n\t\tretrieve: function (oView: FEView) {\n\t\t\tconst oController = oView.getController();\n\t\t\tif (oController && oController.viewState) {\n\t\t\t\treturn oController.viewState.retrieveViewState();\n\t\t\t}\n\t\t\treturn {};\n\t\t},\n\t\tapply: async function (oView: FEView, oControlState: ControlState, oNavParameters?: NavigationParameter, skipMerge?: boolean) {\n\t\t\tconst oController = oView.getController();\n\t\t\tif (oController && oController.viewState && oNavParameters) {\n\t\t\t\treturn oController.viewState.applyViewState(oControlState, oNavParameters, skipMerge);\n\t\t\t}\n\t\t},\n\t\trefreshBinding: async function (oView: FEView) {\n\t\t\tconst oController = oView.getController();\n\t\t\tif (oController && oController.viewState) {\n\t\t\t\treturn oController.viewState.refreshViewBindings();\n\t\t\t}\n\t\t}\n\t},\n\t\"sap.ui.core.ComponentContainer\": {\n\t\tretrieve: async function (this: ViewState, oComponentContainer: ComponentContainer): Promise<object> {\n\t\t\tconst oComponent = oComponentContainer.getComponentInstance();\n\t\t\tif (oComponent) {\n\t\t\t\treturn this.retrieveControlState(oComponent.getRootControl());\n\t\t\t}\n\t\t\treturn {} as object;\n\t\t},\n\t\tapply: async function (\n\t\t\tthis: ViewState,\n\t\t\toComponentContainer: ComponentContainer,\n\t\t\toControlState: object,\n\t\t\toNavParameters?: NavigationParameter\n\t\t): Promise<void> {\n\t\t\tconst oComponent = oComponentContainer.getComponentInstance();\n\t\t\tif (oComponent) {\n\t\t\t\treturn this.applyControlState(oComponent.getRootControl(), oControlState, oNavParameters);\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * A controller extension offering hooks for state handling\n *\n * If you need to maintain a specific state for your application, you can use the controller extension.\n * @hideconstructor\n * @public\n * @since 1.85.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.ViewState\")\nclass ViewState extends ControllerExtension {\n\tprivate _retrieveCalls: Promise<Record<string, unknown>>[] = [];\n\n\tprivate _pInitialStateApplied: Promise<unknown>;\n\n\tprivate _pInitialStateAppliedResolve?: Function;\n\n\tpublic base!: PageController;\n\n\tinitialControlStatesMapper: Record<string, unknown> = {};\n\n\tcontrolsVariantIdUnavailable: string[] = [];\n\n\tinvalidateInitialStateForApply: string[] = [];\n\n\tviewStateControls: ManagedObject[] = [];\n\n\tstateContributors: (ManagedObject & IViewStateContributor<unknown>)[] = [];\n\n\t_currentViewState?: Record<string, unknown>;\n\n\tconfigOfStateApply?: {\n\t\tskipMerge?: boolean | undefined;\n\t\tnavTypeParameters?: NavParameters;\n\t\tstate?: Record<string, unknown>;\n\t};\n\n\tprivate updateAppStateTimer: number | undefined;\n\n\t/**\n\t * Constructor.\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis._retrieveCalls = [];\n\t\tthis._pInitialStateApplied = new Promise((resolve) => {\n\t\t\tthis._pInitialStateAppliedResolve = resolve;\n\t\t});\n\t}\n\n\t@publicExtension()\n\t@finalExtension()\n\tasync refreshViewBindings(): Promise<void> {\n\t\tconst aControls = await this.collectResults(this.base.viewState.adaptBindingRefreshControls);\n\t\tlet oPromiseChain = Promise.resolve();\n\t\taControls\n\t\t\t.filter((oControl) => {\n\t\t\t\treturn oControl && oControl.isA && oControl.isA<ManagedObject>(\"sap.ui.base.ManagedObject\");\n\t\t\t})\n\t\t\t.forEach((oControl: ManagedObject) => {\n\t\t\t\toPromiseChain = oPromiseChain.then(this.refreshControlBinding.bind(this, oControl));\n\t\t\t});\n\t\treturn oPromiseChain;\n\t}\n\n\t/**\n\t * This function should add all controls relevant for refreshing to the provided control array.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param aCollectedControls The collected controls\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tadaptBindingRefreshControls(aCollectedControls: ManagedObject[]): void {\n\t\t// to be overriden\n\t}\n\n\t@privateExtension()\n\t@finalExtension()\n\tasync refreshControlBinding(oControl: ManagedObject): Promise<void> {\n\t\tconst oControlRefreshBindingHandler = this.getControlRefreshBindingHandler(oControl);\n\t\tlet oPromiseChain = Promise.resolve();\n\t\tif (typeof oControlRefreshBindingHandler.refreshBinding !== \"function\") {\n\t\t\tLog.info(`refreshBinding handler for control: ${oControl.getMetadata().getName()} is not provided`);\n\t\t} else {\n\t\t\toPromiseChain = oPromiseChain.then(oControlRefreshBindingHandler.refreshBinding.bind(this, oControl));\n\t\t}\n\t\treturn oPromiseChain;\n\t}\n\n\t/**\n\t * Returns a map of <code>refreshBinding</code> function for a certain control.\n\t * @param oControl The control to get state handler for\n\t * @returns A plain object with one function: <code>refreshBinding</code>\n\t */\n\n\t@privateExtension()\n\t@finalExtension()\n\tgetControlRefreshBindingHandler(oControl: ManagedObject): {\n\t\trefreshBinding?: (oControl: ManagedObject) => void;\n\t} {\n\t\tconst oRefreshBindingHandler: {\n\t\t\trefreshBinding?: (oControl: ManagedObject) => void;\n\t\t} = {};\n\t\tif (oControl) {\n\t\t\tfor (const sType in _mControlStateHandlerMap) {\n\t\t\t\tif (oControl.isA(sType)) {\n\t\t\t\t\t// pass only the refreshBinding handler in an object so that :\n\t\t\t\t\t// 1. Application has access only to refreshBinding and not apply and reterive at this stage\n\t\t\t\t\t// 2. Application modifications to the object will be reflected here (as we pass by reference)\n\t\t\t\t\toRefreshBindingHandler[\"refreshBinding\"] =\n\t\t\t\t\t\t(_mControlStateHandlerMap[sType as keyof ControlStateMap].refreshBinding as (oControl: ManagedObject) => void) ||\n\t\t\t\t\t\t{};\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.base.viewState.adaptBindingRefreshHandler(oControl, oRefreshBindingHandler);\n\t\treturn oRefreshBindingHandler;\n\t}\n\n\t/**\n\t * Customize the <code>refreshBinding</code> function for a certain control.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param _oControl The control for which the refresh handler is adapted.\n\t * @param _oControlHandler A plain object which can have one function: <code>refreshBinding</code>\n\t * @param _oControlHandler.refreshBinding\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tadaptBindingRefreshHandler(\n\t\t_oControl: ManagedObject,\n\t\t_oControlHandler: {\n\t\t\trefreshBinding?: (oControl: ManagedObject) => void;\n\t\t}\n\t): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Called when the application is suspended due to keep-alive mode.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonSuspend(): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Called when the application is restored due to keep-alive mode.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonRestore(): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Destructor method for objects.\n\t */\n\tdestroy(): void {\n\t\tdelete this._pInitialStateAppliedResolve;\n\t\tsuper.destroy();\n\t}\n\n\t/**\n\t * Helper function to enable multi override. It is adding an additional parameter (array) to the provided\n\t * function (and its parameters), that will be evaluated via <code>Promise.all</code>.\n\t * @param fnCall The function to be called\n\t * @param args\n\t * @returns A promise to be resolved with the result of all overrides\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tasync collectResults(fnCall: Function, ...args: unknown[]): Promise<Control[]> {\n\t\tconst aResults: Control[] = [];\n\t\targs.push(aResults);\n\t\tfnCall.apply(this, args);\n\t\treturn Promise.all(aResults);\n\t}\n\n\t/**\n\t * Customize the <code>retrieve</code> and <code>apply</code> functions for a certain control.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oControl The control to get state handler for\n\t * @param aControlHandler A list of plain objects with two functions: <code>retrieve</code> and <code>apply</code>\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tadaptControlStateHandler(oControl: ManagedObject, aControlHandler: object[]): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Returns a map of <code>retrieve</code> and <code>apply</code> functions for a certain control.\n\t * @param oControl The control to get state handler for\n\t * @returns A plain object with two functions: <code>retrieve</code> and <code>apply</code>\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tgetControlStateHandler(oControl: ManagedObject): ControlStateHandler<ManagedObject, object>[] {\n\t\tconst aInternalControlStateHandler: ControlStateHandler<ManagedObject, object>[] = [],\n\t\t\taCustomControlStateHandler: ControlStateHandler<ManagedObject, object>[] = [];\n\t\tif (oControl) {\n\t\t\tif (\n\t\t\t\toControl.isA<IViewStateContributor<object>>(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\") &&\n\t\t\t\toControl.retrieveState &&\n\t\t\t\toControl.applyState\n\t\t\t) {\n\t\t\t\taInternalControlStateHandler.push({\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\t\t\tretrieve: async (_control) => oControl.retrieveState.bind(oControl)(),\n\n\t\t\t\t\tapply: async (\n\t\t\t\t\t\t_control: ManagedObject,\n\t\t\t\t\t\tcontrolState?: object,\n\t\t\t\t\t\toNavParameters?: NavigationParameter,\n\t\t\t\t\t\tskipMerge?: boolean\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/require-await\n\t\t\t\t\t) => {\n\t\t\t\t\t\tconst shouldApplyDiffState =\n\t\t\t\t\t\t\t!this.invalidateInitialStateForApply.includes(oControl.getId()) &&\n\t\t\t\t\t\t\t!this.controlsVariantIdUnavailable.includes(oControl.getId()) &&\n\t\t\t\t\t\t\toNavParameters?.navigationType !== NavType.hybrid &&\n\t\t\t\t\t\t\tskipMerge !== true;\n\t\t\t\t\t\tif (!controlState) {\n\t\t\t\t\t\t\tif (oControl.applyLegacyState) {\n\t\t\t\t\t\t\t\tawait oControl.applyLegacyState.bind(oControl)(\n\t\t\t\t\t\t\t\t\tthis.getControlState.bind(this),\n\t\t\t\t\t\t\t\t\toNavParameters,\n\t\t\t\t\t\t\t\t\tshouldApplyDiffState,\n\t\t\t\t\t\t\t\t\tskipMerge\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tawait oControl.applyState.bind(oControl)(controlState, oNavParameters, shouldApplyDiffState, skipMerge);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfor (const sType in _mControlStateHandlerMap) {\n\t\t\t\t\tif (oControl.isA(sType)) {\n\t\t\t\t\t\t// avoid direct manipulation of internal _mControlStateHandlerMap\n\t\t\t\t\t\taInternalControlStateHandler.push(\n\t\t\t\t\t\t\tObject.assign({}, _mControlStateHandlerMap[sType as keyof ControlStateMap]) as ControlStateHandler<\n\t\t\t\t\t\t\t\tManagedObject,\n\t\t\t\t\t\t\t\tobject\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.base.viewState.adaptControlStateHandler(oControl, aCustomControlStateHandler);\n\t\treturn aInternalControlStateHandler.concat(aCustomControlStateHandler);\n\t}\n\n\t/**\n\t * This function should add all controls for given view that should be considered for the state handling to the provided control array.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param _aCollectedControls The collected controls\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tadaptStateControls(_aCollectedControls: ManagedObject[]): void {\n\t\t_aCollectedControls.push(...this.stateContributors);\n\t}\n\n\t/**\n\t * Returns the key to be used for given control.\n\t * @param oControl The control to get state key for\n\t * @returns The key to be used for storing the controls state\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tgetStateKey(oControl: ManagedObject): string {\n\t\treturn this.getView().getLocalId(oControl.getId()) || oControl.getId();\n\t}\n\n\t/**\n\t * Retrieve the view state of this extensions view.\n\t * @returns A promise resolving the view state\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tasync _retrieveViewState(): Promise<Record<string, unknown>> {\n\t\tlet oViewState: Record<string, unknown> = {};\n\n\t\ttry {\n\t\t\tawait this._pInitialStateApplied;\n\t\t\tconst aControls: (ManagedObject | undefined)[] = await this.collectResults(this.base.viewState.adaptStateControls);\n\t\t\tconst aResolvedStates = await Promise.all(\n\t\t\t\t(\n\t\t\t\t\taControls.filter(function (oControl) {\n\t\t\t\t\t\treturn oControl && oControl.isA && oControl.isA<ManagedObject>(\"sap.ui.base.ManagedObject\");\n\t\t\t\t\t}) as ManagedObject[]\n\t\t\t\t).map(async (oControl) => {\n\t\t\t\t\treturn this.retrieveControlState(oControl).then((vResult: unknown) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: this.getStateKey(oControl),\n\t\t\t\t\t\t\tvalue: vResult\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t);\n\t\t\toViewState = aResolvedStates.reduce(function (oStates: Record<string, unknown>, mState: { key: string; value: unknown }) {\n\t\t\t\tconst oCurrentState: Record<string, unknown> = {};\n\t\t\t\toCurrentState[mState.key] = mState.value;\n\t\t\t\treturn mergeObjects(oStates, oCurrentState);\n\t\t\t}, {});\n\t\t\tconst prevState = this._currentViewState;\n\t\t\tif (prevState && Object.keys(prevState).length > 0) {\n\t\t\t\tthis._addMissingState(oViewState, prevState);\n\t\t\t}\n\t\t\tconst mAdditionalStates = await Promise.resolve(this._retrieveAdditionalStates());\n\t\t\tif (mAdditionalStates && Object.keys(mAdditionalStates).length) {\n\t\t\t\toViewState[ADDITIONAL_STATES_KEY] = mAdditionalStates;\n\t\t\t}\n\t\t} catch (err: unknown) {\n\t\t\tconst viewId = this.getView().getId();\n\t\t\tLog.error(`ViewState : ${viewId} : failed to retrieve state!`);\n\t\t}\n\t\treturn oViewState;\n\t}\n\n\t/**\n\t * Retrieve the view state of this extensions view.\n\t * @returns A promise resolving the view state\n\t * @public\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync retrieveViewState(): Promise<Record<string, unknown> | undefined> {\n\t\tconst presentRetrieveCall = this._retrieveViewState();\n\t\tthis._retrieveCalls.push(presentRetrieveCall);\n\t\tawait presentRetrieveCall;\n\n\t\t// If there have been subsequent retrieve calls on the same view state controller extension before earlier retrieval is complete, we await for the latest result.\n\t\t// We shall return the same view state for all pending retrieve calls.\n\t\tconst viewStateResults = await Promise.allSettled(this._retrieveCalls);\n\n\t\tconst viewStateSettledPromise = viewStateResults[viewStateResults.length - 1];\n\t\tconst viewState = viewStateSettledPromise.status === \"fulfilled\" ? viewStateSettledPromise.value : undefined;\n\t\tthis._currentViewState = viewState;\n\t\treturn viewState;\n\t}\n\n\t// To carry forward unapplied state lost due to lazy loading of controls.\n\t//\n\t// If user 1 changes a control's state in a lazy-loaded section and navigates away, then shares the URL with user 2,\n\t// who doesn't visit the lazy-loaded section, the control's state is missed in the new app state.\n\t// This ensures the full state from user 1 is preserved and transferred to user 3 when the URL is shared.\n\t_addMissingState(oViewState: Record<string, unknown>, prevState: Record<string, unknown>): void {\n\t\tfor (const key in prevState) {\n\t\t\tif (!(key in oViewState)) {\n\t\t\t\toViewState[key] = prevState[key];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Extend the map of additional states (not control bound) to be added to the current view state of the given view.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param mAdditionalStates The additional state\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tretrieveAdditionalStates(mAdditionalStates: object): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Returns a map of additional states (not control bound) to be added to the current view state of the given view.\n\t * @returns Additional view states\n\t */\n\t_retrieveAdditionalStates(): unknown {\n\t\tconst mAdditionalStates = {};\n\t\tthis.base.viewState.retrieveAdditionalStates(mAdditionalStates);\n\t\treturn mAdditionalStates;\n\t}\n\n\t/**\n\t * Returns the current state for the given control.\n\t * @param oControl The object to get the state for\n\t * @returns The state for the given control\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tasync retrieveControlState(oControl: ManagedObject): Promise<object> {\n\t\tconst aControlStateHandlers = this.getControlStateHandler(oControl);\n\t\treturn Promise.all(\n\t\t\taControlStateHandlers.map(async (mControlStateHandler) => {\n\t\t\t\tif (typeof mControlStateHandler.retrieve !== \"function\") {\n\t\t\t\t\tthrow new Error(`controlStateHandler.retrieve is not a function for control: ${oControl.getMetadata().getName()}`);\n\t\t\t\t}\n\t\t\t\treturn mControlStateHandler.retrieve.call(this, oControl);\n\t\t\t})\n\t\t).then((aStates: object[]) => {\n\t\t\treturn aStates.reduce(function (oFinalState: Record<string, unknown>, oCurrentState: object) {\n\t\t\t\treturn mergeObjects(oFinalState, oCurrentState);\n\t\t\t}, {});\n\t\t});\n\t}\n\n\t/**\n\t * Defines whether the view state should only be applied once initially.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.Instead}.\n\t *\n\t * Important:\n\t * You should only override this method for custom pages and not for the standard ListReportPage and ObjectPage!\n\t * @returns If <code>true</code>, only the initial view state is applied once,\n\t * else any new view state is also applied on follow-up calls (default)\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.Instead)\n\tapplyInitialStateOnly(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Retrieves the state of a specific control.\n\t * @param control The managed control object whose state is to be retrieved.\n\t * @returns - The state of the specified control.\n\t */\n\tgetControlState(control: ManagedObject): ControlState {\n\t\tconst oViewState = this._currentViewState;\n\t\tlet controlState: ControlState = {};\n\t\tif (oViewState) {\n\t\t\tconst controlKey = this.getStateKey(control);\n\t\t\tcontrolState = oViewState[controlKey] as Record<string, ControlState>;\n\t\t}\n\t\treturn controlState;\n\t}\n\n\t/**\n\t * Customize the navigation parameters before applying the view state.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param _navParameter The navigation parameter to be customized\n\t * @private\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tadaptApplyStateNavParams(_navParameter: NavigationParameter): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Applies the given view state to this extensions view.\n\t * @param oViewState The view state to apply (can be undefined)\n\t * @param oNavParameter The current navigation parameter\n\t * @param oNavParameter.navigationType The actual navigation type\n\t * @param oNavParameter.selectionVariant The selectionVariant from the navigation\n\t * @param oNavParameter.selectionVariantDefaults The selectionVariant defaults from the navigation\n\t * @param oNavParameter.requiresStandardVariant Defines whether the standard variant must be used in variant management\n\t * @param skipMerge Boolean which determines to skip the key user shine through\n\t * @returns Promise for async state handling\n\t * @public\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync applyViewState(\n\t\toViewState: Record<string, unknown> | undefined,\n\t\toNavParameter: NavigationParameter,\n\t\tskipMerge?: boolean\n\t): Promise<void> {\n\t\t// Allow customization of navigation parameters\n\t\tthis.base.viewState.adaptApplyStateNavParams(oNavParameter);\n\t\tif (this.base.viewState.applyInitialStateOnly() && this._getInitialStateApplied() && this._currentViewState) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\t//SNOW: CS20230006765897 For transient AppState, we return without applying the state to controls in RootContainer's children views as there is no state to apply\n\t\t\t//Only need is to resolve the _pInitialStateApplied so that update of AppState can still happen\n\t\t\tif (this._isStateEmptyForIAppStateNavType(oViewState, oNavParameter.navigationType) && !this.__isRootViewController()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.collectResults(this.base.viewState.onBeforeStateApplied, [], oNavParameter.navigationType);\n\t\t\tconst aControls: ManagedObject[] = await this.collectResults(this.base.viewState.adaptStateControls);\n\t\t\tthis.viewStateControls = aControls;\n\t\t\tlet oPromiseChain = Promise.resolve();\n\t\t\tlet hasVariantManagement = false;\n\t\t\tthis._currentViewState = oViewState;\n\n\t\t\tthis.configOfStateApply = this.configOfStateApply ?? {};\n\t\t\tthis.configOfStateApply.skipMerge = skipMerge;\n\t\t\tthis.configOfStateApply.navTypeParameters = oNavParameter;\n\t\t\tthis.configOfStateApply.state = oViewState;\n\n\t\t\t/**\n\t\t\t * This ensures that variantManagement control is applied first to calculate the initial state for delta logic\n\t\t\t */\n\t\t\tconst sortedAdaptStateControls = aControls.reduce((modifiedControls: ManagedObject[], control) => {\n\t\t\t\tif (!control) {\n\t\t\t\t\treturn modifiedControls;\n\t\t\t\t}\n\t\t\t\tconst isVariantManagementControl = control.isA(\"sap.ui.fl.variants.VariantManagement\");\n\t\t\t\tif (!hasVariantManagement) {\n\t\t\t\t\thasVariantManagement = isVariantManagementControl;\n\t\t\t\t}\n\t\t\t\tmodifiedControls = isVariantManagementControl ? [control, ...modifiedControls] : [...modifiedControls, control];\n\t\t\t\treturn modifiedControls;\n\t\t\t}, []);\n\n\t\t\t// In case of no Variant Management, this ensures that initial states is set\n\t\t\tif (!hasVariantManagement) {\n\t\t\t\tthis._setInitialStatesForDeltaCompute();\n\t\t\t}\n\t\t\tsortedAdaptStateControls\n\t\t\t\t.filter(function (oControl) {\n\t\t\t\t\treturn oControl.isA(\"sap.ui.base.ManagedObject\");\n\t\t\t\t})\n\t\t\t\t.forEach((oControl) => {\n\t\t\t\t\tconst sKey = this.getStateKey(oControl);\n\t\t\t\t\toPromiseChain = oPromiseChain.then(\n\t\t\t\t\t\tthis.applyControlState.bind(\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\toControl,\n\t\t\t\t\t\t\t(oViewState ? oViewState[sKey] : undefined) as Record<string, unknown>,\n\t\t\t\t\t\t\toNavParameter,\n\t\t\t\t\t\t\tskipMerge ?? false\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\tawait oPromiseChain;\n\n\t\t\tif (oNavParameter.navigationType === NavType.iAppState || oNavParameter.navigationType === NavType.hybrid) {\n\t\t\t\tawait this.collectResults(\n\t\t\t\t\tthis.base.viewState.applyAdditionalStates,\n\t\t\t\t\toViewState ? oViewState[ADDITIONAL_STATES_KEY] : undefined\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tawait this.collectResults(this.base.viewState.applyNavigationParameters, oNavParameter);\n\t\t\t\tconst promises: Promise<void>[] = [];\n\t\t\t\tthis._getPromisesForAdaptControls(sortedAdaptStateControls, oNavParameter, promises);\n\t\t\t\tawait Promise.all(promises);\n\t\t\t}\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!this._isStateEmptyForIAppStateNavType(oViewState, oNavParameter.navigationType)) {\n\t\t\t\t\tawait this.collectResults(this.base.viewState.onAfterStateApplied);\n\t\t\t\t}\n\t\t\t\tthis._setInitialStateApplied();\n\t\t\t} catch (e: unknown) {\n\t\t\t\tLog.error(e as string);\n\t\t\t}\n\t\t}\n\t}\n\n\t_getPromisesForAdaptControls(\n\t\tsortedAdaptStateControls: ManagedObject[],\n\t\tnavParameter: NavigationParameter,\n\t\tpromises: Promise<void>[]\n\t): Promise<void>[] {\n\t\tsortedAdaptStateControls\n\t\t\t.filter(function (control) {\n\t\t\t\treturn control.isA(\"sap.ui.base.ManagedObject\");\n\t\t\t})\n\t\t\t.forEach((control) => {\n\t\t\t\tif (\n\t\t\t\t\tcontrol.isA<IViewStateContributor<object>>(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\") &&\n\t\t\t\t\tcontrol.applyNavigationParameters\n\t\t\t\t)\n\t\t\t\t\tpromises.push(control.applyNavigationParameters(navParameter));\n\t\t\t});\n\t\treturn promises;\n\t}\n\n\t@privateExtension()\n\t_checkIfVariantIdIsAvailable(oVM: VariantManagement, sVariantId: string | null): boolean {\n\t\tconst aVariants = oVM.getVariants();\n\t\tlet bIsControlStateVariantAvailable = false;\n\t\taVariants.forEach(function (oVariant) {\n\t\t\tif (oVariant.getKey() === sVariantId) {\n\t\t\t\tbIsControlStateVariantAvailable = true;\n\t\t\t}\n\t\t});\n\t\treturn bIsControlStateVariantAvailable;\n\t}\n\n\t_setInitialStateApplied(): void {\n\t\tif (this._pInitialStateAppliedResolve) {\n\t\t\tconst pInitialStateAppliedResolve = this._pInitialStateAppliedResolve;\n\t\t\tdelete this._pInitialStateAppliedResolve;\n\t\t\tpInitialStateAppliedResolve();\n\t\t}\n\t}\n\n\t_getInitialStateApplied(): boolean {\n\t\treturn !this._pInitialStateAppliedResolve;\n\t}\n\n\t_isStateEmptyForIAppStateNavType(viewState: Record<string, unknown> | undefined, navType: string): boolean {\n\t\treturn (!viewState || Object.keys(viewState).length === 0) && navType == NavType.iAppState;\n\t}\n\n\t__isRootViewController(): boolean {\n\t\tconst rootViewController = this.base.getView().getController();\n\t\treturn (\n\t\t\trootViewController.isA<NavContainerController>(\"sap.fe.core.rootView.NavContainer\") ||\n\t\t\trootViewController.isA<FclController>(\"sap.fe.core.rootView.Fcl\")\n\t\t);\n\t}\n\n\t/**\n\t * Hook to react before a state for given view is applied.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @param navigationType Navigation type responsible for the applying the state\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonBeforeStateApplied(aPromises: Promise<unknown>[], navigationType?: string): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Hook to react when state for given view was applied.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonAfterStateApplied(aPromises: Promise<unknown>): void {\n\t\t// to be overriden\n\t}\n\n\t/**\n\t * Applying additional, not control related, states - is called only if navigation type is iAppState.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oViewState The current view state\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tapplyAdditionalStates(oViewState: object, aPromises: Promise<unknown>): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Apply navigation parameters is not called if the navigation type is iAppState\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oNavParameter The current navigation parameter\n\t * @param aPromises Extensible array of promises to be resolved before continuing\n\t * @protected\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tapplyNavigationParameters(\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\toNavParameter: NavigationParameter,\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\taPromises: Promise<unknown>\n\t): void {\n\t\t// to be overridden if needed\n\t}\n\n\t/**\n\t * Applying the given state to the given control.\n\t * @param oControl The object to apply the given state\n\t * @param oControlState The state for the given control\n\t * @param [oNavParameters] The current navigation parameters\n\t * @param [skipMerge] Whether merge should be skipped or not\n\t * @returns Return a promise for async state handling\n\t */\n\t@privateExtension()\n\t@finalExtension()\n\tasync applyControlState(\n\t\toControl: ManagedObject,\n\t\toControlState: object,\n\t\toNavParameters?: NavigationParameter,\n\t\tskipMerge?: boolean\n\t): Promise<void> {\n\t\tconst aControlStateHandlers = this.getControlStateHandler(oControl);\n\t\tlet oPromiseChain = Promise.resolve();\n\t\taControlStateHandlers.forEach((mControlStateHandler) => {\n\t\t\tif (typeof mControlStateHandler.apply !== \"function\") {\n\t\t\t\tthrow new Error(`controlStateHandler.apply is not a function for control: ${oControl.getMetadata().getName()}`);\n\t\t\t}\n\t\t\toPromiseChain = oPromiseChain.then(mControlStateHandler.apply.bind(this, oControl, oControlState, oNavParameters, skipMerge));\n\t\t});\n\t\treturn oPromiseChain;\n\t}\n\n\t@publicExtension()\n\tpublic updateAppStateDebounced(): void {\n\t\tif (this.updateAppStateTimer) {\n\t\t\tclearTimeout(this.updateAppStateTimer);\n\t\t}\n\t\tthis.updateAppStateTimer = setTimeout(() => {\n\t\t\tthis.base.getExtensionAPI().updateAppState();\n\t\t}, 200) as unknown as number;\n\t}\n\n\t/**\n\t * Register a dedicated IViewStateContributor into the whole view state handling.\n\t * @param stateContributor The ViewStateContributor to register\n\t */\n\tregisterStateContributor(stateContributor: ManagedObject & IViewStateContributor<unknown>): void {\n\t\tif (this.stateContributors.includes(stateContributor)) {\n\t\t\t// no need to register the same control again\n\t\t\treturn;\n\t\t}\n\t\tthis.stateContributors.push(stateContributor);\n\t\tif (this._currentViewState) {\n\t\t\tconst controlKey = this.getStateKey(stateContributor);\n\t\t\tconst controlState = this._currentViewState[controlKey];\n\t\t\tconst navigationType = this.configOfStateApply?.navTypeParameters?.navigationType;\n\t\t\tconst skipMerge = this.configOfStateApply?.skipMerge;\n\t\t\tif (controlState && controlState === this.configOfStateApply?.state?.[controlKey]) {\n\t\t\t\t// To check whether diffstate shuold be called or not to applyExternalState\n\t\t\t\tconst shouldApplyDiffState =\n\t\t\t\t\t!this.invalidateInitialStateForApply.includes(stateContributor.getId()) &&\n\t\t\t\t\t!this.controlsVariantIdUnavailable.includes(stateContributor.getId()) &&\n\t\t\t\t\tnavigationType !== NavType.hybrid &&\n\t\t\t\t\tskipMerge !== true;\n\n\t\t\t\tstateContributor.applyState(controlState, undefined, shouldApplyDiffState);\n\t\t\t} else {\n\t\t\t\tthis.updateAppStateDebounced();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Deregister a dedicated IViewStateContributor from the whole view state handling.\n\t * @param stateContributor The ViewStateContributor to deregister\n\t */\n\tderegisterStateContributor(stateContributor: ManagedObject & IViewStateContributor<unknown>): void {\n\t\tconst targetIndex = this.stateContributors.findIndex((contributor) => contributor == stateContributor);\n\t\tif (targetIndex !== -1) {\n\t\t\tthis.stateContributors.splice(targetIndex, 1);\n\t\t}\n\t}\n\n\tgetInterface(): this {\n\t\treturn this;\n\t}\n\n\t// method to get the control state for mdc controls applying the delta logic\n\t_getControlState(controlStateKey: string, controlState: ControlState): ControlState {\n\t\tconst initialControlStatesMapper = this.initialControlStatesMapper;\n\t\tif (Object.keys(initialControlStatesMapper).length > 0 && initialControlStatesMapper[controlStateKey]) {\n\t\t\tif (Object.keys(initialControlStatesMapper[controlStateKey] as object).length === 0) {\n\t\t\t\tinitialControlStatesMapper[controlStateKey] = { ...controlState };\n\t\t\t}\n\t\t\treturn { fullState: controlState as object, initialState: initialControlStatesMapper[controlStateKey] as object };\n\t\t}\n\t\treturn controlState;\n\t}\n\n\t//method to store the initial states for delta computation of mdc controls\n\t_setInitialStatesForDeltaCompute = async (variantManagement?: VariantManagement): Promise<void> => {\n\t\ttry {\n\t\t\tconst adaptControls = this.viewStateControls;\n\n\t\t\tconst externalStatePromises: Promise<object>[] = [];\n\t\t\tconst controlStateKey: string[] = [];\n\t\t\tlet initialControlStates: object[] = [];\n\t\t\tconst variantControls: string[] = variantManagement?.getFor() ?? [];\n\n\t\t\tthis.updateInitialState(variantControls);\n\n\t\t\tawait Promise.all(\n\t\t\t\tadaptControls\n\t\t\t\t\t.filter(function (control) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\tcontrol &&\n\t\t\t\t\t\t\t(!variantManagement || variantControls.includes((control as Control).getId())) &&\n\t\t\t\t\t\t\t((control as BaseObject).isA(\"sap.ui.mdc.Table\") ||\n\t\t\t\t\t\t\t\t(control as BaseObject).isA(\"sap.ui.mdc.FilterBar\") ||\n\t\t\t\t\t\t\t\t(control as BaseObject).isA(\"sap.ui.mdc.Chart\"))\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.map(async (control) => {\n\t\t\t\t\t\tif (variantManagement) {\n\t\t\t\t\t\t\tthis._addEventListenersToVariantManagement(variantManagement, variantControls);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst externalStatePromise = (await getStateUtil()).retrieveExternalState(control as MDCControl);\n\t\t\t\t\t\texternalStatePromises.push(externalStatePromise);\n\t\t\t\t\t\tcontrolStateKey.push(this.getStateKey(control));\n\t\t\t\t\t})\n\t\t\t);\n\n\t\t\tinitialControlStates = await Promise.all(externalStatePromises);\n\t\t\tinitialControlStates.forEach((initialControlState: object, i: number) => {\n\t\t\t\tthis.initialControlStatesMapper[controlStateKey[i]] = initialControlState;\n\t\t\t});\n\t\t} catch (e: unknown) {\n\t\t\tLog.error(e as string);\n\t\t}\n\t};\n\n\t// Attach event to save and select of Variant Management to update the initial Control States on variant change\n\t_addEventListenersToVariantManagement(variantManagement: VariantManagement, variantControls: string[]): void {\n\t\tconst oPayload = { variantManagedControls: variantControls };\n\t\tconst fnEvent = (): void => {\n\t\t\tthis._updateInitialStatesOnVariantChange(variantControls);\n\t\t};\n\t\tvariantManagement.attachSave(oPayload, fnEvent, {});\n\t\tvariantManagement.attachSelect(oPayload, fnEvent, {});\n\t}\n\n\t_updateInitialStatesOnVariantChange(vmAssociatedControlsToReset: string[]): void {\n\t\tconst initialControlStatesMapper = this.initialControlStatesMapper;\n\t\tObject.keys(initialControlStatesMapper).forEach((controlKey) => {\n\t\t\tfor (const vmAssociatedcontrolKey of vmAssociatedControlsToReset) {\n\t\t\t\tif (vmAssociatedcontrolKey.includes(controlKey)) {\n\t\t\t\t\tinitialControlStatesMapper[controlKey] = {};\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.updateInitialState(vmAssociatedControlsToReset);\n\t}\n\n\t/**\n\t * Updates the initial state of the specified variant controls.\n\t * @param variantControls An array of control IDs for which the initial state needs to be updated.\n\t * @returns A promise that resolves when the initial state update is complete.\n\t */\n\tasync updateInitialState(variantControls: string[]): Promise<void> {\n\t\tconst viewControls: (ManagedObject | undefined)[] = this.stateContributors;\n\t\tawait Promise.all(\n\t\t\tviewControls.map(async (control) => {\n\t\t\t\tconst controlId: string = control?.getId() as string;\n\t\t\t\tif (\n\t\t\t\t\tvariantControls.includes(controlId) &&\n\t\t\t\t\tcontrol?.isA<IViewStateContributor<object>>(\"sap.fe.core.controllerextensions.viewState.IViewStateContributor\") &&\n\t\t\t\t\tcontrol.setInitialState\n\t\t\t\t) {\n\t\t\t\t\tawait control.setInitialState();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\t_isInitialStatesApplicable(\n\t\tinitialState: object | undefined,\n\t\tcontrol: FilterBar | MDCTable,\n\t\tskipMerge: boolean | undefined,\n\t\tisNavHybrid?: boolean\n\t): boolean {\n\t\treturn (\n\t\t\t!!initialState &&\n\t\t\t!this.invalidateInitialStateForApply.includes(control.getId()) &&\n\t\t\t!this.controlsVariantIdUnavailable.includes(control.getId()) &&\n\t\t\t(isNavHybrid ?? true) &&\n\t\t\tskipMerge !== true\n\t\t);\n\t}\n}\n\nexport default ViewState;\n"],"mappings":"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","ignoreList":[]}