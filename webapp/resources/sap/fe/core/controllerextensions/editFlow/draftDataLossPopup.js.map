{"version":3,"file":"draftDataLossPopup.js","names":["NavigationType","DraftDataLossOptions","dataLossDialog","DraftDataLossDialog","silentlyKeepDraftOnForwardNavigation","pageController","oManifest","getAppComponent","getManifestEntry","app","async","processFclMode","draftAdminData","fnCancelFunction","oController","processFunctionForDrafts","bSkipBindingToView","context","hiddenDraft","focusOnCancel","CreationDateTime","LastChangeDateTime","editFlow","isDocumentModified","name","open","then","selectedKey","draftDataLossPopup","handleDialogSelection","processNoActiveEntityMode","navigationType","bSilentlyKeepDraftOnForwardNavigation","skipBackNavigation","EditState","isEditStateDirty","BackNavigation","discardDraft","error","Log","ForwardNavigation","processEditingDraftForExistingEntity","oContext","mParameters","skipDiscardPopover","skipBindingToView","cancelDocument","processEditStateDirty","processDraftAdminData","fnProcessFunction","arguments","length","undefined","hasActiveEntity","collaborationConnected","collaborativeDraft","isConnected","disconnect","_len","args","Array","_key","apply","getRootViewController","isFclEnabled","processDataLossOrDraftDiscardConfirmation","alwaysShowInHiddenDraft","oView","getView","oModel","getBindingContext","getModel","oMetaModel","getMetaModel","viewData","getViewData","contextPath","entitySet","isDraftRoot","getObject","bIsEditable","CommonUtils","getIsEditable","originalContext","draftRootPath","getPath","ModelHelper","getDraftRootPath","bindContext","$expand","getBoundContext","getEnvironmentCapabilities","getCapabilities","HiddenDraft","enabled","backNavShowsDialog","getRouterProxy","checkIfBackExitsApp","isDeleted","requestProperty","getProperty","oError","saveDocument","controller","hasInitialContext","isA","_saveDocument","skipBackNavigationValue","params","Save","savedContext","catch","RecommendationDialogDecision","Continue","close","Keep","Discard","discardedDraft"],"sources":["./draftDataLossPopup.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport EditState from \"sap/fe/core/helpers/EditState\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport type ObjectPageControllerController from \"sap/fe/templates/ObjectPage/ObjectPageController.controller\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport DraftDataLossDialog from \"../../controls/DataLossOrDraftDiscard/DraftDataLossDialog\";\nimport { RecommendationDialogDecision } from \"../../controls/Recommendations/ConfirmRecommendationDialog\";\nimport type { HiddenDraft } from \"../../converters/ManifestSettings\";\n\n/* Enum for navigation types */\nenum NavigationType {\n\tBackNavigation = \"BackNavigation\",\n\tForwardNavigation = \"ForwardNavigation\"\n}\n\n/* Enum types for the data loss dialog options */\nenum DraftDataLossOptions {\n\tSave = \"draftDataLossOptionSave\",\n\tKeep = \"draftDataLossOptionKeep\",\n\tDiscard = \"draftDataLossOptionDiscard\"\n}\n\ntype DraftAdministrativeData = {\n\tCreationDateTime: Date;\n\tLastChangeDateTime: Date;\n};\n\n/*Create the data loss dialog*/\nconst dataLossDialog = new DraftDataLossDialog(\"fe::DraftDataLossPopup\");\n\n/**\n * The method checks whether an optional parameter in the manifest is set to silently keep the draft in case a forward navigation is triggered.\n * @param pageController The reference to the current PageController instance\n * @returns Boolean value with true or false to silently keep the draft\n */\nfunction silentlyKeepDraftOnForwardNavigation(pageController: PageController): boolean {\n\tconst oManifest = pageController.getAppComponent().getManifestEntry(\"sap.fe\");\n\treturn oManifest?.app?.silentlyKeepDraftOnForwardNavigation || false;\n}\n\n/**\n * Logic to process the FCL mode.\n * @param draftAdminData Admin data\n * @param fnCancelFunction The cancel function\n * @param oController The current controller referenced\n * @param processFunctionForDrafts The function to process the handler\n * @param bSkipBindingToView The optional parameter to skip the binding to the view\n * @param context The context to be used for the draft operation\n * @param hiddenDraft Boolean value which mentions if hidden draft is enabled or not\n * @returns Nothing\n */\nasync function processFclMode(\n\tdraftAdminData: DraftAdministrativeData,\n\tfnCancelFunction: Function,\n\toController: PageController,\n\tprocessFunctionForDrafts: Function,\n\tbSkipBindingToView?: boolean,\n\tcontext?: ODataV4Context,\n\thiddenDraft?: boolean\n): Promise<void> {\n\t// The application is running in FCL mode so in this case we fall back to\n\t// the old logic since the dirty state handling is not properly working\n\t// for FCL.\n\tlet focusOnCancel;\n\tif (draftAdminData.CreationDateTime === draftAdminData.LastChangeDateTime && !oController.editFlow.isDocumentModified()) {\n\t\tprocessFunctionForDrafts();\n\t} else {\n\t\tfocusOnCancel = hiddenDraft === true && processFunctionForDrafts.name === \"afterCancel\";\n\t\treturn dataLossDialog\n\t\t\t.open(oController, focusOnCancel)\n\t\t\t.then((selectedKey) =>\n\t\t\t\tdraftDataLossPopup.handleDialogSelection(\n\t\t\t\t\tselectedKey as string,\n\t\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\t\tfnCancelFunction,\n\t\t\t\t\toController,\n\t\t\t\t\tbSkipBindingToView,\n\t\t\t\t\tcontext,\n\t\t\t\t\thiddenDraft\n\t\t\t\t)\n\t\t\t);\n\t}\n}\n\n/**\n * Logic to process the mode with no active entity.\n * @param draftAdminData Admin data\n * @param fnCancelFunction The cancel function\n * @param oController The current controller referenced\n * @param processFunctionForDrafts The function to process the handler\n * @param navigationType The navigation type for which the function should be called\n * @param bSilentlyKeepDraftOnForwardNavigation The parameter to determine whether to skip the popup appearance in forward case\n * @param bSkipBindingToView The optional parameter to skip the binding to the view\n * @param context The context to be used for the draft operations\n * @param hiddenDraft Boolean value which mentions if hidden draft is enabled or not\n * @param skipBackNavigation Boolean value which mentions if back navigation should be skipped\n * @returns Nothing\n */\nasync function processNoActiveEntityMode(\n\tdraftAdminData: DraftAdministrativeData,\n\tfnCancelFunction: Function,\n\toController: PageController,\n\tprocessFunctionForDrafts: Function,\n\tnavigationType: NavigationType,\n\tbSilentlyKeepDraftOnForwardNavigation: boolean,\n\tbSkipBindingToView?: boolean,\n\tcontext?: ODataV4Context,\n\thiddenDraft?: boolean,\n\tskipBackNavigation?: boolean\n): Promise<void> {\n\t// There is no active entity so, we are editing either newly created data or\n\t// a draft which has never been saved to active version\n\t// Since we want to react differently in the two situations, we have to check the\n\t// dirty state\n\tif (EditState.isEditStateDirty()) {\n\t\tif (\n\t\t\tdraftAdminData.CreationDateTime === draftAdminData.LastChangeDateTime &&\n\t\t\t!oController.editFlow.isDocumentModified() &&\n\t\t\tnavigationType === NavigationType.BackNavigation\n\t\t) {\n\t\t\t// in case we have untouched changes for the draft and a \"back\"\n\t\t\t// navigation we can silently discard the draft again\n\t\t\t// eslint-disable-next-line promise/no-nesting\n\t\t\ttry {\n\t\t\t\tawait draftDataLossPopup.discardDraft(oController, bSkipBindingToView, context, hiddenDraft, skipBackNavigation);\n\t\t\t\tprocessFunctionForDrafts();\n\t\t\t} catch (error: unknown) {\n\t\t\t\tLog.error(\"Error while canceling the document\", error as string);\n\t\t\t}\n\t\t} else if (navigationType === NavigationType.ForwardNavigation && bSilentlyKeepDraftOnForwardNavigation) {\n\t\t\t// In case we have a \"forward navigation\" and an additional parameter set in the manifest\n\t\t\t// we \"silently\" keep the draft\n\t\t\tprocessFunctionForDrafts();\n\t\t} else {\n\t\t\t// In this case data is being changed or a forward navigation is triggered\n\t\t\t// and, we always want to show the data loss dialog on navigation\n\t\t\treturn dataLossDialog\n\t\t\t\t.open(oController)\n\t\t\t\t.then((selectedKey) =>\n\t\t\t\t\tdraftDataLossPopup.handleDialogSelection(\n\t\t\t\t\t\tselectedKey as string,\n\t\t\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\t\t\tfnCancelFunction,\n\t\t\t\t\t\toController,\n\t\t\t\t\t\tbSkipBindingToView,\n\t\t\t\t\t\tcontext,\n\t\t\t\t\t\thiddenDraft,\n\t\t\t\t\t\tskipBackNavigation\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t}\n\t} else {\n\t\t// We are editing a draft which has been created earlier but never saved to active\n\t\t// version and since the edit state is not dirty, there have been no user changes\n\t\t// so in this case we want to silently navigate and do nothing\n\t\tprocessFunctionForDrafts();\n\t}\n}\n\n/**\n * Logic to process the draft editing for existing entity.\n * @param oController The current controller referenced.\n * @param oContext The context of the current call\n * @param processFunctionForDrafts The function to process the handler\n * @param navigationType The navigation type for which the function should be called\n */\nasync function processEditingDraftForExistingEntity(\n\toController: PageController,\n\toContext: ODataV4Context,\n\tprocessFunctionForDrafts: Function,\n\tnavigationType: NavigationType\n): Promise<void> {\n\t// We are editing a draft for an existing active entity\n\t// The CreationDateTime and LastChangeDateTime are equal, so this draft was\n\t// never saved before, hence we're currently editing a newly created draft for\n\t// an existing active entity for the first time.\n\t// Also, there have so far been no changes made to the draft and in this\n\t// case we want to silently navigate and delete the draft in case of a back\n\t// navigation but in case of a forward navigation we want to silently keep it!\n\tif (navigationType === NavigationType.BackNavigation) {\n\t\tconst mParameters = {\n\t\t\tskipDiscardPopover: true,\n\t\t\tskipBindingToView: true\n\t\t};\n\n\t\ttry {\n\t\t\tawait oController.editFlow.cancelDocument(oContext, mParameters);\n\t\t\tprocessFunctionForDrafts();\n\t\t} catch (error) {\n\t\t\tLog.error(\"Error while canceling the document\", error as Error);\n\t\t}\n\t} else {\n\t\t// In case of a forward navigation we silently keep the draft and only\n\t\t// execute the followup function.\n\t\tprocessFunctionForDrafts();\n\t}\n}\n\n/**\n * Logic to process the context when the edit state is in dirty mode.\n * @param oController The current controller referenced.\n * @param fnCancelFunction The cancel function\n * @param processFunctionForDrafts The function to process the handler\n * @param navigationType The navigation type for which the function should be called\n * @param bSilentlyKeepDraftOnForwardNavigation The parameter to determine whether to skip the popup appearance in forward case\n * @param bSkipBindingToView The optional parameter to skip the binding to the view.\n * @param context The context to be used for the draft operations\n * @param hiddenDraft Boolean value which mentions if hidden draft is enabled or not\n * @returns Nothing\n */\nasync function processEditStateDirty(\n\toController: PageController,\n\tfnCancelFunction: Function,\n\tprocessFunctionForDrafts: Function,\n\tnavigationType: NavigationType,\n\tbSilentlyKeepDraftOnForwardNavigation: boolean,\n\tbSkipBindingToView?: boolean,\n\tcontext?: ODataV4Context,\n\thiddenDraft?: boolean\n): Promise<void> {\n\tif (navigationType === NavigationType.ForwardNavigation && bSilentlyKeepDraftOnForwardNavigation) {\n\t\t// In case we have a \"forward navigation\" and an additional parameter set in the manifest\n\t\t// we \"silently\" keep the draft\n\t\tprocessFunctionForDrafts();\n\t} else {\n\t\t// The CreationDateTime and LastChangeDateTime are NOT equal, so we are currently editing\n\t\t// an existing draft and need to distinguish depending on if any changes\n\t\t// have been made in the current editing session or not\n\t\t// Changes have been made in the current editing session, so we want\n\t\t// to show the data loss dialog and let the user decide\n\t\treturn dataLossDialog\n\t\t\t.open(oController)\n\t\t\t.then((selectedKey) =>\n\t\t\t\tdraftDataLossPopup.handleDialogSelection(\n\t\t\t\t\tselectedKey as string,\n\t\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\t\tfnCancelFunction,\n\t\t\t\t\toController,\n\t\t\t\t\tbSkipBindingToView,\n\t\t\t\t\tcontext,\n\t\t\t\t\thiddenDraft\n\t\t\t\t)\n\t\t\t);\n\t}\n}\n\n/**\n * Logic to process the admin data.\n * @param draftAdminData Admin data\n * @param fnProcessFunction The function to process the handler\n * @param fnCancelFunction The cancel function\n * @param context Context\n * @param oController The current controller referenced\n * @param bSkipBindingToView The optional parameter to skip the binding to the view\n * @param navigationType The navigation type for which the function should be called\n * @param hasActiveEntity Boolean value which mentions if root context has active entity or not\n * @param hiddenDraft Boolean value which mentions if hidden draft is enabled or not\n * @param skipBackNavigation Boolean value which mentions if back navigation should be skipped\n * @returns Nothing\n */\nasync function processDraftAdminData(\n\tdraftAdminData: DraftAdministrativeData,\n\tfnProcessFunction: Function,\n\tfnCancelFunction: Function,\n\tcontext: ODataV4Context,\n\toController: PageController,\n\tbSkipBindingToView?: boolean,\n\tnavigationType: NavigationType = NavigationType.BackNavigation,\n\thasActiveEntity?: boolean,\n\thiddenDraft?: boolean,\n\tskipBackNavigation?: boolean\n): Promise<void> {\n\tconst collaborationConnected = oController.collaborativeDraft.isConnected();\n\tconst processFunctionForDrafts = !collaborationConnected\n\t\t? fnProcessFunction\n\t\t: function (...args: unknown[]): void {\n\t\t\t\toController.collaborativeDraft.disconnect();\n\t\t\t\tfnProcessFunction.apply(null, ...args);\n\t\t  };\n\n\tconst bSilentlyKeepDraftOnForwardNavigation = silentlyKeepDraftOnForwardNavigation(oController);\n\tif (draftAdminData) {\n\t\tif (oController.getAppComponent().getRootViewController().isFclEnabled()) {\n\t\t\tawait processFclMode(\n\t\t\t\tdraftAdminData,\n\t\t\t\tfnCancelFunction,\n\t\t\t\toController,\n\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\tbSkipBindingToView,\n\t\t\t\tcontext,\n\t\t\t\thiddenDraft\n\t\t\t);\n\t\t} else if (!hasActiveEntity) {\n\t\t\tprocessNoActiveEntityMode(\n\t\t\t\tdraftAdminData,\n\t\t\t\tfnCancelFunction,\n\t\t\t\toController,\n\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\tnavigationType,\n\t\t\t\tbSilentlyKeepDraftOnForwardNavigation,\n\t\t\t\tbSkipBindingToView,\n\t\t\t\tundefined,\n\t\t\t\thiddenDraft,\n\t\t\t\tskipBackNavigation\n\t\t\t);\n\t\t} else if (\n\t\t\tdraftAdminData.CreationDateTime === draftAdminData.LastChangeDateTime &&\n\t\t\t(!hiddenDraft || (hiddenDraft && !oController.editFlow.isDocumentModified()))\n\t\t) {\n\t\t\tprocessEditingDraftForExistingEntity(oController, context, processFunctionForDrafts, navigationType);\n\t\t} else if (EditState.isEditStateDirty()) {\n\t\t\tprocessEditStateDirty(\n\t\t\t\toController,\n\t\t\t\tfnCancelFunction,\n\t\t\t\tprocessFunctionForDrafts,\n\t\t\t\tnavigationType,\n\t\t\t\tbSilentlyKeepDraftOnForwardNavigation,\n\t\t\t\tbSkipBindingToView,\n\t\t\t\tcontext,\n\t\t\t\thiddenDraft\n\t\t\t);\n\t\t} else {\n\t\t\t// The user started editing the existing draft but did not make any changes\n\t\t\t// in the current editing session, so in this case we do not want\n\t\t\t// to show the data loss dialog but just keep the draft\n\t\t\tprocessFunctionForDrafts();\n\t\t}\n\t} else {\n\t\tfnProcessFunction();\n\t}\n}\n\n/**\n * The general handler in which the individual steps are called.\n * @param fnProcessFunction Function to process after confirmation.\n * @param fnCancelFunction Function to process on cancel.\n * @param oContext Context for the operation.\n * @param oController Controller of the current view.\n * @param bSkipBindingToView Optional parameter to skip binding to the view.\n * @param navigationType Navigation type for the operation.\n * @param alwaysShowInHiddenDraft Whether to always show dialog in hidden draft mode.\n * @param skipBackNavigation Boolean value which mentions if back navigation should be skipped.\n */\nasync function processDataLossOrDraftDiscardConfirmation(\n\tfnProcessFunction: Function,\n\tfnCancelFunction: Function,\n\toContext: ODataV4Context,\n\toController: PageController,\n\tbSkipBindingToView?: boolean,\n\tnavigationType: NavigationType = NavigationType.BackNavigation,\n\talwaysShowInHiddenDraft?: boolean,\n\tskipBackNavigation?: boolean\n): Promise<void> {\n\tconst oView = oController.getView();\n\tconst oModel = oView.getBindingContext().getModel();\n\tconst oMetaModel = oModel.getMetaModel();\n\tconst viewData = oView.getViewData() as { entitySet?: string; contextPath?: string };\n\tconst contextPath = viewData.contextPath || (viewData.entitySet ? `/${viewData.entitySet}` : undefined);\n\tconst isDraftRoot = contextPath ? !!oMetaModel.getObject(`${contextPath}@com.sap.vocabularies.Common.v1.DraftRoot`) : false;\n\tconst bIsEditable = CommonUtils.getIsEditable(oView);\n\tconst originalContext = oContext;\n\tlet draftRootPath = oContext.getPath();\n\tif (!isDraftRoot) {\n\t\tdraftRootPath = ModelHelper.getDraftRootPath(oContext) ?? draftRootPath;\n\t\toContext = oModel.bindContext(draftRootPath, undefined, { $expand: \"DraftAdministrativeData\" }).getBoundContext();\n\t}\n\tconst hiddenDraft = (oController.getAppComponent().getEnvironmentCapabilities()?.getCapabilities()?.HiddenDraft as HiddenDraft)\n\t\t?.enabled;\n\t// Shouldn't display data loss popover on shell back navigation from sub-object pages (unless there's no page before in the history because of deep linking)\n\t// or when object page is in display mode, or when the object is deleted\n\tconst backNavShowsDialog =\n\t\tisDraftRoot || oController.getAppComponent().getRouterProxy().checkIfBackExitsApp() || (hiddenDraft && alwaysShowInHiddenDraft);\n\tif (originalContext.isDeleted() || (!backNavShowsDialog && navigationType === NavigationType.BackNavigation) || !bIsEditable) {\n\t\tfnProcessFunction();\n\t} else {\n\t\ttry {\n\t\t\t// The following 3 properties are needed to determine the state of the draft, so we ensure they are loaded\n\t\t\tawait oContext.requestProperty([\n\t\t\t\t\"DraftAdministrativeData/CreationDateTime\",\n\t\t\t\t\"DraftAdministrativeData/LastChangeDateTime\",\n\t\t\t\t\"HasActiveEntity\"\n\t\t\t]);\n\t\t\tconst draftAdminData = oContext.getObject(\"DraftAdministrativeData\");\n\t\t\tawait processDraftAdminData(\n\t\t\t\tdraftAdminData,\n\t\t\t\tfnProcessFunction,\n\t\t\t\tfnCancelFunction,\n\t\t\t\thiddenDraft ? originalContext : oContext,\n\t\t\t\toController,\n\t\t\t\tbSkipBindingToView,\n\t\t\t\tnavigationType,\n\t\t\t\toContext.getProperty(\"HasActiveEntity\"),\n\t\t\t\thiddenDraft,\n\t\t\t\tskipBackNavigation\n\t\t\t);\n\t\t} catch (oError: unknown) {\n\t\t\tLog.error(\"Cannot retrieve draftDataContext information\", oError as string);\n\t\t\tfnProcessFunction();\n\t\t}\n\t}\n}\n\n/**\n * Saves the document. If the controller is of type ObjectPage, then internal _saveDocument is called, otherwise saveDocument\n * from EditFlow is called.\n * @param controller Controller of the current view\n * @param context The context to be used for the draft operations\n * @param skipBindingToView The parameter to skip the binding to the view\n * @returns A promise resolved if the save was successful\n */\nasync function saveDocument(controller: PageController, context?: ODataV4Context, skipBindingToView?: boolean): Promise<unknown> {\n\tconst hasInitialContext = context !== undefined;\n\tcontext = context ?? controller.getView().getBindingContext();\n\tif (!hasInitialContext && controller.isA<ObjectPageControllerController>(\"sap.fe.templates.ObjectPage.ObjectPageController\")) {\n\t\treturn controller._saveDocument(skipBindingToView);\n\t} else {\n\t\treturn controller.editFlow.saveDocument(context, { skipBindingToView });\n\t}\n}\n\n/**\n * Discards the draft.\n * @param controller Controller of the current view\n * @param skipBindingToView The parameter to skip the binding to the view\n * @param context The context to be used for the draft operations\n * @param hiddenDraft Boolean value which mentions if hidden draft is enabled or not\n * @param skipBackNavigation Boolean value which determines if back navigation should be skipped\n * @returns A promise resolved if cancelDocument was successful\n */\nasync function discardDraft(\n\tcontroller: PageController,\n\tskipBindingToView: boolean | undefined,\n\tcontext?: ODataV4Context,\n\thiddenDraft?: boolean,\n\tskipBackNavigation?: boolean\n): Promise<unknown> {\n\tcontext = context ?? controller.getView().getBindingContext();\n\tlet skipBackNavigationValue: boolean | undefined = skipBackNavigation;\n\tif (!skipBackNavigation) {\n\t\tskipBackNavigationValue = hiddenDraft === true && !context.getProperty(\"HasActiveEntity\") ? false : true;\n\t}\n\tconst params = {\n\t\tskipBackNavigation: skipBackNavigationValue,\n\t\tskipDiscardPopover: true,\n\t\tskipBindingToView: skipBindingToView !== undefined ? skipBindingToView : true\n\t};\n\treturn controller.editFlow.cancelDocument(context, params);\n}\n\n/**\n * Executes the follow-up functions after an option was selected in the data loss dialog.\n * @param selectedKey The key of the selected option from the data loss dialog\n * @param processFunctionForDrafts The function to process the handler\n * @param fnCancelFunction The function to process the handler\n * @param controller Controller of the current view\n * @param skipBindingToView The parameter to skip the binding to the view\n * @param context The context to be used for the binding\n * @param hiddenDraft Boolean value which mentions if hidden draft is enabled or not\n * @param skipBackNavigation Boolean value which mentions if back navigation should be skipped\n */\nfunction handleDialogSelection(\n\tselectedKey: string,\n\tprocessFunctionForDrafts: Function,\n\tfnCancelFunction: Function,\n\tcontroller: PageController,\n\tskipBindingToView: boolean | undefined,\n\tcontext?: ODataV4Context,\n\thiddenDraft?: boolean,\n\tskipBackNavigation?: boolean\n): void {\n\tswitch (selectedKey) {\n\t\tcase DraftDataLossOptions.Save:\n\t\t\tdraftDataLossPopup\n\t\t\t\t.saveDocument(controller, context, skipBindingToView)\n\t\t\t\t.then((savedContext?) => processFunctionForDrafts(savedContext))\n\t\t\t\t.catch(function (error: string | undefined) {\n\t\t\t\t\tif (error === RecommendationDialogDecision.Continue) {\n\t\t\t\t\t\treturn fnCancelFunction();\n\t\t\t\t\t}\n\t\t\t\t\tLog.error(\"Error while saving document\", error);\n\t\t\t\t});\n\t\t\tdataLossDialog.close();\n\t\t\tbreak;\n\t\tcase DraftDataLossOptions.Keep:\n\t\t\tprocessFunctionForDrafts();\n\t\t\tdataLossDialog.close();\n\t\t\tbreak;\n\t\tcase DraftDataLossOptions.Discard:\n\t\t\tdraftDataLossPopup\n\t\t\t\t.discardDraft(controller, skipBindingToView, context, hiddenDraft, skipBackNavigation)\n\t\t\t\t.then((discardedDraft?) => processFunctionForDrafts(discardedDraft))\n\t\t\t\t.catch(function (error: string | undefined) {\n\t\t\t\t\tLog.error(\"Error while discarding draft\", error);\n\t\t\t\t});\n\t\t\tdataLossDialog.close();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfnCancelFunction();\n\t\t\tdataLossDialog.close();\n\t}\n}\n\nconst draftDataLossPopup = {\n\tprocessDataLossOrDraftDiscardConfirmation: processDataLossOrDraftDiscardConfirmation,\n\tsilentlyKeepDraftOnForwardNavigation: silentlyKeepDraftOnForwardNavigation,\n\tNavigationType: NavigationType,\n\tprocessFclMode: processFclMode,\n\tprocessNoActiveEntityMode: processNoActiveEntityMode,\n\tprocessEditingDraftForExistingEntity: processEditingDraftForExistingEntity,\n\tprocessEditStateDirty: processEditStateDirty,\n\thandleDialogSelection: handleDialogSelection,\n\tsaveDocument: saveDocument,\n\tdiscardDraft: discardDraft\n};\n\nexport default draftDataLossPopup;\n"],"mappings":"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","ignoreList":[]}