{"version":3,"names":["OperationParameters","appComponent","model","convertedAction","skipParametersDialog","parameters","parameterDialog","undefined","parametersValues","startupParameters","actionParameters","actionHelper","getActionParameters","isParameterDialogNeeded","length","name","filter","actionParameter","every","parameter","annotations","UI","Hidden","valueOf","setStartupParameters","_exports","_proto","prototype","componentData","getComponentData","isParameterDialog","isParameterDialogOpened","isOpen","resetParameterDialogState","resetState","closeParameterDialog","closeDialog","getOperationParameters","isMandatoryValuesProvided","getCoreUIFactory","newOperationParameterDialog","contexts","defaultValuesExtensionFunction","isCreateAction","label","view","events","onParameterDialogOpened","onParameterDialogClosed","parameterValues","entitySetName","messageHandler","createDialog","openDialog","waitForParametersValues","i","find","element","value","convertValue","ParameterDefaultValue","hiddenAnnotationSetOnAllActions","Object","keys","fieldControl","Common","FieldControl","isMandatory","toString","parameterValue","TypeMap","__ui5_require_async","default","parameterType","getBaseType","type","typeInstance","getDataTypeInstance","parseValue"],"sourceRoot":".","sources":["OperationParameters.ts"],"sourcesContent":["import type { Action as EdmAction, ActionParameter as EdmActionParameter, PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport { getCoreUIFactory, type StandardOperationParameterDialog } from \"sap/fe/core/UIProvider\";\nimport type MultiValueFieldItem from \"sap/ui/mdc/field/MultiValueFieldItem\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { StartupParameters } from \"../../../AppComponent\";\nimport type MessageHandler from \"../../MessageHandler\";\nimport actionHelper from \"./actionHelper\";\n\ntype BaseTypeParameter = string | number | boolean;\n\nexport default class OperationParameters {\n\tprivate readonly isParameterDialogNeeded: boolean;\n\n\tprivate readonly actionParameters: EdmActionParameter[];\n\n\tprivate parameterDialog: StandardOperationParameterDialog | undefined = undefined;\n\n\tprivate parametersValues: Record<string, PrimitiveType> = {};\n\n\tprivate startupParameters: StartupParameters = {};\n\n\t/**\n\t * Creates an instance of OperationParameters.\n\t * This class is responsible for handling the parameters of an OData action, including\n\t * managing the parameter dialog, retrieving parameter values, and checking if the dialog is needed.\n\t * It checks if the action has parameters and whether a dialog is needed based on the action's parameters.\n\t * If the action has parameters, it will create a dialog to collect the parameter values.\n\t * If the dialog is not needed (e.g., no parameters or all parameters are hidden), it will return the default values.\n\t * @param appComponent The application component\n\t * @param model The OData model\n\t * @param convertedAction The operation\n\t * @param skipParametersDialog If true, the parameter dialog will be skipped if all mandatory values are provided.\n\t * @param parameters The parameters for the operation\n\t * @param parameters.entitySetName The name of the entity set\n\t * @param parameters.contexts The contexts for the action\n\t * @param parameters.defaultValuesExtensionFunction The function to get default values for the parameters\n\t * @param parameters.isCreateAction Indicates if the action is a create action\n\t * @param parameters.label The label for the action\n\t * @param parameters.parameterValues The values for the parameters\n\t * @param parameters.view The view where the action is executed\n\t * @param parameters.messageHandler The message handler for the action\n\t * @param parameters.events The events for the parameter dialog\n\t * @param parameters.events.onParameterDialogOpened The function to call when the parameter dialog is opened\n\t * @param parameters.events.onParameterDialogClosed The function to call when the parameter dialog is closed\n\t */\n\tconstructor(\n\t\tprivate readonly appComponent: AppComponent,\n\t\tprivate readonly model: ODataModel,\n\t\tprivate readonly convertedAction: EdmAction,\n\t\tprivate readonly skipParametersDialog: boolean | undefined,\n\t\tprivate readonly parameters: {\n\t\t\tcontexts: Context[];\n\t\t\tdefaultValuesExtensionFunction?: string;\n\t\t\tisCreateAction?: boolean;\n\t\t\tlabel?: string;\n\t\t\tparameterValues?: Record<string, string | number | boolean | MultiValueFieldItem[]>[];\n\t\t\tentitySetName?: string;\n\t\t\tview?: FEView;\n\t\t\tmessageHandler: MessageHandler;\n\t\t\tevents?: {\n\t\t\t\tonParameterDialogOpened?: () => void;\n\t\t\t\tonParameterDialogClosed?: () => void;\n\t\t\t};\n\t\t}\n\t) {\n\t\t// Check if the action has parameters and would need a parameter dialog\n\t\t// The parameter ResultIsActiveEntity is always hidden in the dialog! Hence if\n\t\t// this is the only parameter, this is treated as no parameter here because the\n\t\t// dialog would be empty!\n\t\tthis.actionParameters = actionHelper.getActionParameters(this.convertedAction);\n\t\tthis.isParameterDialogNeeded =\n\t\t\tthis.actionParameters.length > 0 &&\n\t\t\t!(this.actionParameters.length === 1 && this.actionParameters[0].name === \"ResultIsActiveEntity\");\n\n\t\tthis.skipParametersDialog =\n\t\t\t(this.actionParameters.length &&\n\t\t\tthis.actionParameters\n\t\t\t\t.filter((actionParameter) => actionParameter.name !== \"ResultIsActiveEntity\")\n\t\t\t\t.every((parameter) => parameter.annotations.UI?.Hidden?.valueOf() === true)\n\t\t\t\t? true\n\t\t\t\t: this.skipParametersDialog) ?? false;\n\n\t\tthis.setStartupParameters();\n\t}\n\n\t/**\n\t *  Sets the parameters provided on the startup.\n\t */\n\tprivate setStartupParameters(): void {\n\t\t// Determine startup parameters if provided\n\t\tconst componentData = this.appComponent.getComponentData();\n\t\tthis.startupParameters = componentData?.startupParameters ?? {};\n\t}\n\n\t/**\n\t *  Is the parameter dialog instanced.\n\t * @returns True if the parameter dialog is instanced, otherwise false\n\t */\n\tpublic isParameterDialog(): boolean {\n\t\treturn !!this.parameterDialog;\n\t}\n\n\t/**\n\t *  Is the parameter dialog opened.\n\t * @returns True if the parameter dialog is opened, otherwise false\n\t */\n\tpublic isParameterDialogOpened(): boolean {\n\t\treturn this.parameterDialog?.isOpen() ?? false;\n\t}\n\n\t/**\n\t * Resets the state of the parameter dialog.\n\t */\n\tpublic resetParameterDialogState(): void {\n\t\tthis.parameterDialog?.resetState();\n\t}\n\n\t/**\n\t * Closes the state of the parameter dialog.\n\t * @returns Promise that resolves when the dialog is closed\n\t */\n\tpublic async closeParameterDialog(): Promise<void> {\n\t\treturn this.parameterDialog?.closeDialog();\n\t}\n\n\t/**\n\t * Gets the value of the parameters.\n\t * @returns The value of the parameters\n\t */\n\tpublic async getOperationParameters(): Promise<Record<string, PrimitiveType>> {\n\t\t// In case an action parameter is needed, and we shall skip the dialog, check if values are provided for all parameters\n\t\tif (this.isParameterDialogNeeded && !(this.skipParametersDialog && this.isMandatoryValuesProvided())) {\n\t\t\tif (!this.parameterDialog) {\n\t\t\t\tthis.parameterDialog = getCoreUIFactory().newOperationParameterDialog(\n\t\t\t\t\tthis.convertedAction,\n\t\t\t\t\t{\n\t\t\t\t\t\tappComponent: this.appComponent,\n\t\t\t\t\t\tmodel: this.model,\n\t\t\t\t\t\tcontexts: this.parameters.contexts,\n\t\t\t\t\t\tparametersValues: {},\n\t\t\t\t\t\tdefaultValuesExtensionFunction: this.parameters.defaultValuesExtensionFunction,\n\t\t\t\t\t\tisCreateAction: this.parameters.isCreateAction,\n\t\t\t\t\t\tlabel: this.parameters.label,\n\t\t\t\t\t\tview: this.parameters.view,\n\t\t\t\t\t\tevents: {\n\t\t\t\t\t\t\tonParameterDialogOpened: this.parameters.events?.onParameterDialogOpened,\n\t\t\t\t\t\t\tonParameterDialogClosed: this.parameters.events?.onParameterDialogClosed\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tthis.parameters.parameterValues,\n\t\t\t\t\tthis.parameters.entitySetName,\n\t\t\t\t\tthis.parameters.messageHandler\n\t\t\t\t);\n\t\t\t\tawait this.parameterDialog.createDialog();\n\t\t\t\tthis.parameterDialog.openDialog();\n\t\t\t}\n\t\t\treturn this.parameterDialog.waitForParametersValues();\n\t\t}\n\t\t// If the dialog is skipped, we need to set the default values for the parameters\n\t\tif (this.parameters.parameterValues) {\n\t\t\tfor (const i in this.actionParameters) {\n\t\t\t\tthis.parametersValues[this.actionParameters[i].name] = this.parameters.parameterValues?.find(\n\t\t\t\t\t(element) => element.name === this.actionParameters[i].name\n\t\t\t\t)?.value;\n\t\t\t}\n\t\t} else {\n\t\t\tlet actionParameter;\n\t\t\tfor (const i in this.actionParameters) {\n\t\t\t\tactionParameter = this.actionParameters[i];\n\t\t\t\tthis.parametersValues[actionParameter.name] = await this.convertValue(\n\t\t\t\t\tactionParameter,\n\t\t\t\t\tthis.startupParameters[actionParameter.name]?.[0] ?? actionParameter.annotations?.UI?.ParameterDefaultValue?.valueOf()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn this.parametersValues;\n\t}\n\n\t/**\n\t *  Are values provided for the mandatory parameters.\n\t * @returns True if the information is provided, otherwise false\n\t */\n\tprivate isMandatoryValuesProvided(): boolean {\n\t\tconst hiddenAnnotationSetOnAllActions = this.actionParameters.every(\n\t\t\t(parameter) => parameter?.annotations?.UI?.Hidden?.valueOf() === true\n\t\t);\n\n\t\tif (this.parameters.parameterValues?.length && !hiddenAnnotationSetOnAllActions) {\n\t\t\t// If showDialog is false but there are parameters from the invokeAction call which need to be checked on existence\n\t\t\tfor (const actionParameter of this.actionParameters) {\n\t\t\t\tif (\n\t\t\t\t\tactionParameter.name !== \"ResultIsActiveEntity\" &&\n\t\t\t\t\t!this.parameters.parameterValues?.find((element) => element.name === actionParameter.name)\n\t\t\t\t) {\n\t\t\t\t\t// At least for one parameter no value has been provided, so we can't skip the dialog\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parameters.isCreateAction === true && Object.keys(this.startupParameters).length && !hiddenAnnotationSetOnAllActions) {\n\t\t\t// If parameters have been provided during application launch, we need to check if the set is complete\n\t\t\t// If not, the parameter dialog still needs to be shown.\n\t\t\tfor (const actionParameter of this.actionParameters) {\n\t\t\t\tif (!this.startupParameters[actionParameter.name]) {\n\t\t\t\t\t// At least for one parameter no value has been provided, so we can't skip the dialog\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.actionParameters.length && hiddenAnnotationSetOnAllActions) {\n\t\t\treturn this.actionParameters.every((parameter) => {\n\t\t\t\tconst fieldControl = parameter.annotations?.Common?.FieldControl;\n\t\t\t\tconst isMandatory = fieldControl?.toString() === \"Common.FieldControlType/Mandatory\";\n\n\t\t\t\t// Possible sources may be startupParameters, parameterValues, defaultValues per annotation (ParameterDefaultValue)\n\t\t\t\t// If none is found, return false\n\t\t\t\treturn (\n\t\t\t\t\t!isMandatory ||\n\t\t\t\t\tthis.startupParameters[parameter.name] ||\n\t\t\t\t\tthis.parameters.parameterValues?.find((parameterValue) => parameterValue.name === parameter.name) ||\n\t\t\t\t\tparameter?.annotations?.UI?.ParameterDefaultValue?.valueOf()\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t *  Formats the value provided with a non relevant type.\n\t * @param parameter The parameter\n\t * @param value The value to convert\n\t * @returns The converted value\n\t */\n\tprivate async convertValue(\n\t\tparameter: EdmActionParameter,\n\t\tvalue?: BaseTypeParameter | null\n\t): Promise<BaseTypeParameter | undefined | null> {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn value;\n\t\t}\n\t\tconst TypeMap = (await import(\"sap/ui/mdc/odata/v4/TypeMap\")).default;\n\t\tconst parameterType = TypeMap.getBaseType(parameter.type);\n\t\tconst typeInstance = TypeMap.getDataTypeInstance(parameterType);\n\t\treturn typeInstance.parseValue(value, \"string\");\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"OperationParameters-dbg.js"}