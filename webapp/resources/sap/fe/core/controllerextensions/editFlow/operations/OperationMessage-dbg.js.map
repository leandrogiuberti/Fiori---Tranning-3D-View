{"version":3,"names":["InvocationGrouping","FELibrary","OperationMessage","parameters","isParameterDialogOpened","is412toBeManaged","contexts","length","binding","getBinding","isA","table","ElementRegistry","filter","element","getRowBinding","_exports","_proto","prototype","onParameterDialogClosed","onParameterDialogOpened","onStrictHandling","reactToOperations","operationResults","disableNotification","events","onMessageCollected","isOperationDialogOpen","messageHandler","showMessages","messagePageNavigationCallback","onMessagePageNavigationCallback","onBeforeShowMessage","messages","showMessageParametersIn","actionParameterShowMessageCallback","some","res","status","aSelectedContexts","sActionName","label","entitySet","entitySetName","boundActionName","actionHelper","getActionName","action","control","clearStrictWarningMessages","isErrorIntoParameterDialog","getParameterDialogMessages","actionName","actionParameters","getActionParameters","messageHandling","getMessages","message","getTargets","includes","actionParam","name","isActionSuccessful","filterErrorOrWarning","getType","messagesInModel","Messaging","getMessageModel","getData","nonErrorMessageExistsInDialog","findIndex","nonErrorMessageExistsInModel","isChangeSet","invocationGrouping","ChangeSet","parameterDialogMessages","errorTargetsInAPD","showMessageBox","showMessageDialog","hasTransitionErrorsOrWarnings","singleError","unshift","getGenericMsgForChangeSet","concat","messagesToShow","containsBoundTransition","showMessageInDialog","filterApdAndContextMessages","filteredMessages","fnGetMessageSubtitle","setMessageSubtitle","bind","undefined","showChangeSetErrorDialog","containsBoundTransistion","resourceBundle","Library","getResourceBundleFor","isEditable","CommonUtils","getIsEditable","singleMessage","getText","Message","type","MessageType","Error","target","persistent","code","technicalDetails","fe","changeSetPreTextForSingleError","description","unboundMessages","removeContextMessagesfromModel","removeMessagesForActionParameterDialog"],"sourceRoot":".","sources":["OperationMessage.ts"],"sourcesContent":["import type { Action as EdmAction } from \"@sap-ux/vocabularies-types\";\nimport FELibrary from \"sap/fe/core/library\";\nimport ElementRegistry from \"sap/ui/core/ElementRegistry\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport CommonUtils from \"../../../CommonUtils\";\nimport type MessageHandler from \"../../MessageHandler\";\nimport messageHandling, { type MessageWithHeader, type ShowMessageParameters } from \"../../messageHandler/messageHandling\";\nimport type { OperationResult } from \"./ODataOperation\";\nimport actionHelper from \"./actionHelper\";\nconst InvocationGrouping = FELibrary.InvocationGrouping;\n\n/**\n * Manages the messages for an operation. The messages are displayed in a message box or dialog at\n * the end of the operation (after the strict handling workflow if it is configured). An instance\n * of this class is created for each fiori element operation (multi or single context) and not each\n * oData operation.\n */\n\nexport default class OperationMessage {\n\tprivate readonly table: Table | undefined;\n\n\tprivate isParameterDialogOpened = false;\n\n\tprivate is412toBeManaged = false;\n\n\t/**\n\t *  Creates an instance of OperationMessage.\n\t * This class is responsible for managing messages related to an operation.\n\t * @param parameters The parameters for the operation message.\n\t * @param parameters.messageHandler The message handler to use for displaying messages.\n\t * @param parameters.action The action to be performed.\n\t * @param parameters.contexts The contexts for the operation.\n\t * @param parameters.label The label for the operation.\n\t * @param parameters.invocationGrouping The invocation grouping for the operation.\n\t * @param parameters.entitySetName The name of the entity set for the operation.\n\t * @param parameters.events The events for the operation.\n\t * @param parameters.events.onMessageCollected The function to call when the messages are collected.\n\t * @param parameters.events.onMessagePageNavigationCallback The function to call before page navigation is triggered\n\t * @param parameters.disableNotification If true, the messages will not be displayed in a message box or dialog.\n\t */\n\tconstructor(\n\t\tprivate readonly parameters: {\n\t\t\tmessageHandler: MessageHandler;\n\t\t\taction: EdmAction;\n\t\t\tcontexts: Context[];\n\t\t\tlabel?: string;\n\t\t\tinvocationGrouping?: string;\n\t\t\tentitySetName?: string;\n\t\t\tevents?: {\n\t\t\t\tonMessageCollected?: () => void;\n\t\t\t\tonMessagePageNavigationCallback?: () => void;\n\t\t\t};\n\t\t\tdisableNotification?: boolean;\n\t\t}\n\t) {\n\t\tif (this.parameters.contexts.length) {\n\t\t\tconst binding = this.parameters.contexts[0].getBinding();\n\t\t\tif (binding.isA(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\t\tthis.table = ElementRegistry.filter(\n\t\t\t\t\t(element) => element.isA<Table>(\"sap.ui.mdc.Table\") && element.getRowBinding() === binding\n\t\t\t\t)[0] as Table | undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handler to be called when the action parameter dialog is closed.\n\t */\n\tonParameterDialogClosed(): void {\n\t\tthis.isParameterDialogOpened = false;\n\t}\n\n\t/**\n\t * Handler to be called when the action parameter dialog is opened.\n\t */\n\tonParameterDialogOpened(): void {\n\t\tthis.isParameterDialogOpened = true;\n\t}\n\n\t/**\n\t * Handler to be called when the strict handling of an oData operation is triggered.\n\t */\n\tonStrictHandling(): void {\n\t\tthis.is412toBeManaged = true;\n\t}\n\n\t/**\n\t * Reacts to the results of the operations by showing the messages in a message box or dialog.\n\t * @param operationResults The results of the operations.\n\t */\n\tpublic async reactToOperations(operationResults: PromiseSettledResult<OperationResult>[]): Promise<void> {\n\t\tif (this.parameters.disableNotification === true) {\n\t\t\tthis.parameters.events?.onMessageCollected?.();\n\t\t\treturn;\n\t\t}\n\t\tconst isOperationDialogOpen = this.isParameterDialogOpened;\n\t\tawait this.parameters.messageHandler.showMessages({\n\t\t\tisOperationDialogOpen: isOperationDialogOpen,\n\t\t\tmessagePageNavigationCallback: () => {\n\t\t\t\tthis.parameters.events?.onMessagePageNavigationCallback?.();\n\t\t\t},\n\t\t\tonBeforeShowMessage: (messages: Message[], showMessageParametersIn: ShowMessageParameters) => {\n\t\t\t\treturn this.actionParameterShowMessageCallback(\n\t\t\t\t\tmessages,\n\t\t\t\t\tshowMessageParametersIn,\n\t\t\t\t\t!operationResults.some((res) => res.status === \"rejected\")\n\t\t\t\t);\n\t\t\t},\n\t\t\taSelectedContexts: this.parameters.contexts,\n\t\t\tsActionName: this.parameters.label,\n\t\t\tentitySet: this.parameters.entitySetName,\n\t\t\tboundActionName: actionHelper.getActionName(this.parameters.action),\n\t\t\tcontrol: this.table\n\t\t});\n\t\tthis.parameters.messageHandler.clearStrictWarningMessages();\n\t}\n\n\t/**\n\t * Indicates whether there is an error in the parameter dialog.\n\t * @returns True if there is an error in the parameter dialog, otherwise false\n\t */\n\tpublic isErrorIntoParameterDialog(): boolean {\n\t\treturn !!this.getParameterDialogMessages().length;\n\t}\n\n\t/**\n\t * Gets the messages related to the action parameter dialog.\n\t * @param messages The messages to filter. If not provided, the messages are fetched from the message handling.\n\t * @returns The messages related to the action parameter dialog.\n\t */\n\tprivate getParameterDialogMessages(messages?: Message[]): Message[] {\n\t\tconst actionName = actionHelper.getActionName(this.parameters.action);\n\t\tconst actionParameters = actionHelper.getActionParameters(this.parameters.action);\n\t\treturn (messages ?? messageHandling.getMessages(true, true)).filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.getTargets()?.[0].includes(actionName) &&\n\t\t\t\tactionParameters.some((actionParam) => message.getTargets()?.[0].includes(actionParam.name))\n\t\t);\n\t}\n\n\t/**\n\t * Callback function to show messages in a message box or dialog.\n\t * @param messages The messages\n\t * @param showMessageParametersIn The parameters for showing the message\n\t * @param isActionSuccessful Indicates whether the action was successful\n\t * @returns  The parameters for showing the message\n\t */\n\tprivate actionParameterShowMessageCallback(\n\t\tmessages: Message[],\n\t\tshowMessageParametersIn: ShowMessageParameters,\n\t\tisActionSuccessful: boolean\n\t): ShowMessageParameters {\n\t\tconst filterErrorOrWarning = (message: Message): boolean => [\"Error\", \"Warning\"].includes(message.getType());\n\n\t\tconst messagesInModel = Messaging.getMessageModel().getData();\n\t\tconst nonErrorMessageExistsInDialog = messages.findIndex(filterErrorOrWarning);\n\t\tconst nonErrorMessageExistsInModel = messagesInModel.findIndex(filterErrorOrWarning);\n\n\t\tconst isChangeSet = this.parameters.invocationGrouping === InvocationGrouping.ChangeSet;\n\n\t\tconst parameterDialogMessages = this.getParameterDialogMessages(messages);\n\t\tconst errorTargetsInAPD = !!parameterDialogMessages.length;\n\n\t\tlet showMessageBox = showMessageParametersIn.showMessageBox,\n\t\t\tshowMessageDialog = showMessageParametersIn.showMessageDialog;\n\n\t\tif (isChangeSet) {\n\t\t\tif (\n\t\t\t\t(this.is412toBeManaged || messageHandling.hasTransitionErrorsOrWarnings()) &&\n\t\t\t\t!errorTargetsInAPD &&\n\t\t\t\t!isActionSuccessful &&\n\t\t\t\tnonErrorMessageExistsInDialog !== 1 &&\n\t\t\t\tnonErrorMessageExistsInModel !== -1 && // this check is currently under discussion (may be a typo in the original code)\n\t\t\t\tthis.parameters.contexts.length > 1\n\t\t\t) {\n\t\t\t\tconst singleError = messagesInModel.length === 1;\n\t\t\t\tshowMessageBox = singleError || messages.length === 1;\n\t\t\t\tshowMessageDialog = !showMessageBox;\n\t\t\t\tmessages.unshift(this.getGenericMsgForChangeSet(singleError));\n\t\t\t}\n\t\t} else if (!this.isParameterDialogOpened && errorTargetsInAPD) {\n\t\t\t// If APD is not open and there are messages related to APD, then show in the message dialog. since the parameter dialog\n\t\t\t// is closed on isolated mode\n\t\t\tshowMessageDialog = true;\n\t\t\tmessages = messages.concat(parameterDialogMessages);\n\t\t}\n\n\t\tthis.parameters.events?.onMessageCollected?.();\n\t\tconst { messagesToShow, containsBoundTransition, showMessageInDialog } = this.filterApdAndContextMessages(\n\t\t\tmessages,\n\t\t\terrorTargetsInAPD\n\t\t);\n\t\treturn {\n\t\t\tshowMessageBox: showMessageBox,\n\t\t\tshowMessageDialog: showMessageInDialog ?? showMessageDialog,\n\t\t\tfilteredMessages: messagesToShow,\n\t\t\tfnGetMessageSubtitle: this.table\n\t\t\t\t? messageHandling.setMessageSubtitle.bind({}, this.table, this.parameters.contexts)\n\t\t\t\t: undefined,\n\t\t\tshowChangeSetErrorDialog: isChangeSet,\n\t\t\tcontainsBoundTransistion: containsBoundTransition\n\t\t};\n\t}\n\n\t/**\n\t *  Gets a generic message for a single error in a change set.\n\t * @param singleError Indicates whether there is a single error.\n\t * @returns The generic message.\n\t */\n\tprivate getGenericMsgForChangeSet(singleError: boolean): MessageWithHeader {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\tconst isEditable = (this.table && CommonUtils.getIsEditable(this.table)) ?? false;\n\t\tconst singleMessage = resourceBundle.getText(`C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT${isEditable ? \"_EDIT\" : \"\"}`);\n\t\treturn singleError\n\t\t\t? new Message({\n\t\t\t\t\tmessage: singleMessage,\n\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\ttarget: \"\",\n\t\t\t\t\tpersistent: true,\n\t\t\t\t\tcode: \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\",\n\t\t\t\t\ttechnicalDetails: {\n\t\t\t\t\t\tfe: {\n\t\t\t\t\t\t\tchangeSetPreTextForSingleError: singleMessage\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t  })\n\t\t\t: new Message({\n\t\t\t\t\tmessage: resourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_TEXT\"),\n\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\ttarget: \"\",\n\t\t\t\t\tpersistent: true,\n\t\t\t\t\tcode: \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\",\n\t\t\t\t\tdescription: resourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_DETAIL_TEXT\")\n\t\t\t  });\n\t}\n\n\t/**\n\t * Filters an array of messages based on various conditions and returns an object containing the filtered messages and other properties.\n\t * @param messages The messages to filter.\n\t * @param errorTargetsInAPD Indicates whether error targets are in APD.\n\t * @returns An object containing a boolean indicating whether the result contains a bound transition, an array of messages to show, and a boolean indicating whether to show the message in a dialog.\n\t */\n\tprivate filterApdAndContextMessages(\n\t\tmessages: Message[],\n\t\terrorTargetsInAPD: boolean\n\t): { containsBoundTransition: boolean | undefined; messagesToShow: Message[]; showMessageInDialog?: boolean } {\n\t\tconst unboundMessages = messages.filter((message: Message) => {\n\t\t\treturn message.getTargets()?.[0] === \"\";\n\t\t});\n\t\tconst isOperationDialogOpen = this.isParameterDialogOpened;\n\t\tlet showMessageDialog = true;\n\t\tif (isOperationDialogOpen && errorTargetsInAPD) {\n\t\t\t/* When APD is open, we need to remove the messages which are related to the object page context */\n\t\t\tmessageHandling.removeContextMessagesfromModel(messages, this.parameters.contexts);\n\t\t}\n\t\t// Filter out messages which are not related to the action parameter dialog in the edit mode and display mode\n\t\tlet containsBoundTransition;\n\t\tif (!(this.table && CommonUtils.getIsEditable(this.table))) {\n\t\t\tif (isOperationDialogOpen && errorTargetsInAPD) {\n\t\t\t\tif (unboundMessages.length === 0) {\n\t\t\t\t\tcontainsBoundTransition = false;\n\t\t\t\t\tshowMessageDialog = false;\n\t\t\t\t}\n\t\t\t\tmessages = messageHandling.removeMessagesForActionParameterDialog(messages);\n\t\t\t}\n\t\t} else {\n\t\t\tif (unboundMessages.length === 0) {\n\t\t\t\tcontainsBoundTransition = false;\n\t\t\t}\n\t\t\tmessages = messageHandling.removeMessagesForActionParameterDialog(messages);\n\t\t}\n\t\treturn {\n\t\t\tmessagesToShow: messages,\n\t\t\tcontainsBoundTransition: containsBoundTransition,\n\t\t\tshowMessageInDialog: showMessageDialog\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"OperationMessage-dbg.js"}