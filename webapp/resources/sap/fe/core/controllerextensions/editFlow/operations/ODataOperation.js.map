{"version":3,"file":"ODataOperation.js","names":["InvocationGrouping","FELibrary","ODataOperation","operation","parameters","operationProperties","arguments","length","undefined","this","operationContextBindings","firstIterationOperations","apiGroupIdsToSubmit","Set","bindingParameters","operationParameters","neverSubmitted","failedContexts","operationPromises","apiGroupId","action","isAction","actionName","actionHelper","getActionName","sideEffects","appComponent","getSideEffectsService","getODataActionSideEffects","contexts","isFunction","disableStrictHandling","oDataStrictHandling","ODataStrictHandling","label","invocationGrouping","events","onResponse","onStrictResponse","onValidation","onStrictValidation","bind","onCancel","onStrictCancel","defineOperationParameters","setBindingParameters","isContinueOnErrorCompliant","ChangeSet","groupId","isAPIMode","deferredSubmit","_exports","_proto","prototype","deepClone","enhance$select","existingSelect","$select","split","returnEntityType","metaModel","model","getMetaModel","messagesPath","ModelHelper","getMessagesPath","getPath","isSameEntity","returnCollection","sourceEntityType","entityProperties","find","property","name","includes","$$inheritExpandSelect","getActionParameters","clear","operationContextBinding","destroy","execute","async","result","executeOperation","executeSequentially","Promise","allSettled","executeImport","error","Log","onODataResponse","operationContext","bindContext","push","setParametersValue","promises","invoke","defaultSubmit","afterODataOperationExecution","currentPromiseValues","all","setContinueOnError","map","executeBoundOperation","context","manageStrictHandlingFails","onAfterODataOperationExecution","reduce","promise","id","resolve","finalGroupId","getUpdateGroupId","operationPromise","enhanceSideEffects","returnedContext","ghostContextBindingProtection","origin","requestSideEffects","getRootViewController","getInstancedViews","some","pageView","getBindingContext","InstanceManager","getOpenDialogs","dialog","firstIterationResolve","firstIterationReject","strictHandlingPromise","reject","add","sideEffectsContext","getContext","getBoundContext","operationInvoke","ignoreETag","handleOdataStrictHandling","submitBatch","replaceWithRVC","race","onAfterODataInvoke","boundContext","retriggerFailedContexts","apiRetriggerGroupId","index","failedContext","submit","size","Array","from","values","submitOnModel","onODataSubmit","isStrictCanceled","isCanceled","delete","startsWith","submitMode","getManifestEntry","models","settings","groupProperties","SubmitMode","Auto","Direct","firstSubmit","defaultValues","parametersValues","parameter","type","setParameter","localPromise","sideEffectsService","disableSideEffects","concat","triggerActions","executeAction","pathExpressions","onRequestSideEffects","info"],"sources":["./ODataOperation.ts"],"sourcesContent":["import type { ActionImport, ActionParameter, Action as EdmAction } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport deepClone from \"sap/base/util/deepClone\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport FELibrary from \"sap/fe/core/library\";\nimport InstanceManager from \"sap/m/InstanceManager\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type { default as ODataV4Context } from \"sap/ui/model/odata/v4/Context\";\nimport type ODataContextBinding from \"sap/ui/model/odata/v4/ODataContextBinding\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport SubmitMode from \"sap/ui/model/odata/v4/SubmitMode\";\nimport ModelHelper from \"../../../helpers/ModelHelper\";\nimport { isAction } from \"../../../helpers/TypeGuards\";\nimport type { ActionSideEffectsType } from \"../../../services/SideEffectsServiceFactory\";\nimport type { BindContextParameters } from \"../draft\";\nimport ODataStrictHandling from \"./ODataStrictHandling\";\nimport actionHelper from \"./actionHelper\";\n\nconst InvocationGrouping = FELibrary.InvocationGrouping;\n\nexport type OperationResult = {\n\treturnedContext?: ODataV4Context;\n\tboundContext: ODataV4Context;\n};\n\nexport default class ODataOperation {\n\tprivate operationContextBindings: ODataContextBinding[] = [];\n\n\tprivate readonly firstIterationOperations: Promise<unknown>[] = [];\n\n\tprivate readonly apiGroupIdsToSubmit: Set<string> = new Set();\n\n\tprivate readonly sideEffects: ActionSideEffectsType | undefined;\n\n\tprivate readonly actionName: string;\n\n\tprivate bindingParameters: Record<string, unknown> = {};\n\n\tprivate operationParameters: ActionParameter[] = [];\n\n\tprivate neverSubmitted = true;\n\n\tprivate readonly oDataStrictHandling: ODataStrictHandling | undefined;\n\n\tprivate failedContexts: ODataV4Context[] = [];\n\n\tprivate operationPromises: Promise<OperationResult>[] = [];\n\n\tprivate readonly apiGroupId = \"apiMode\";\n\n\tprivate readonly isContinueOnErrorCompliant: boolean;\n\n\t/**\n\t * Creates an instance of ODataOperation.\n\t * This instance is used to execute on the model an OData operation, which can be an action or an action import.\n\t * @param operation The operation to be executed. This can be an action or an import.\n\t * @param parameters The parameters for the operation\n\t * @param parameters.appComponent The AppComponent instance\n\t * @param parameters.contexts The contexts to be used for the operation\n\t * @param parameters.model The ODataModel instance\n\t * @param parameters.invocationGrouping The invocation grouping for the operation. This can be 'ChangeSet' or 'Isolated'.\n\t * @param parameters.disableStrictHandling If true, the strict handling is disabled\n\t * @param parameters.disableSideEffects If true, the side effects are disabled\n\t * @param parameters.ghostContextBindingProtection If true, the ghost context binding protection is enabled\n\t * @param parameters.label The label for the operation, used in the strict handling\n\t * @param parameters.events The events for the operation\n\t * @param parameters.events.onStrictValidation The event triggered when the strict handling is validated by the end user\n\t * @param parameters.events.onStrictCancel The event triggered when the strict handling is canceled by the end user\n\t * @param parameters.events.onStrictResponse The event triggered when the backend returns 412 messages (strict handling)\n\t * @param parameters.events.onODataResponse The event triggered when all responses related to the Fiori element operations are received\n\t * @param parameters.events.onODataSubmit The event triggered when the batch is submitted (request sent to the back end)\n\t * @param parameters.events.onAfterODataInvoke The event triggered when the promise of invoke method of the oDataContextBinding is resolved\n\t * @param parameters.events.onAfterODataOperationExecution The event triggered when first responses related to the Fiori element operations are received (before strict handling or final response if no 412 are received)\n\t * @param parameters.events.onRequestSideEffects The event triggered when side effects are requested\n\t * @param parameters.parametersValues The values for the parameters of the operation\n\t * @param operationProperties The model properties for the operation\n\t * @param operationProperties.enhance$select If true, the $select parameter is enhanced with additional properties (e.g. Messages)\n\t * @param operationProperties.groupId The groupId for the operation, used for batch processing\n\t * @param operationProperties.bindingParameters The binding parameters for the operation\n\t * @param operationProperties.deferredSubmit If true, the operation is not submitted immediately and must be submitted by the developer\n\t * @param operationProperties.ignoreETag If true, the ETag is ignored for the operation\n\t * @param operationProperties.replaceWithRVC Whether this operation binding's parent context, which must belong to a list binding, is replaced with the operation's return value context (see below) and that list context is returned instead\n\t */\n\tconstructor(\n\t\tprivate readonly operation: EdmAction | ActionImport,\n\t\tprivate readonly parameters: {\n\t\t\tappComponent: AppComponent;\n\t\t\tcontexts: ODataV4Context[];\n\t\t\tmodel: ODataModel;\n\t\t\tinvocationGrouping?: string;\n\t\t\tdisableStrictHandling?: boolean;\n\t\t\tdisableSideEffects?: boolean;\n\t\t\tghostContextBindingProtection?: boolean;\n\t\t\tlabel?: string;\n\t\t\tevents?: {\n\t\t\t\tonStrictValidation?: () => void;\n\t\t\t\tonStrictCancel?: () => void;\n\t\t\t\tonStrictResponse?: (messages412: Message[]) => void;\n\t\t\t\tonODataResponse?: () => void;\n\t\t\t\tonODataSubmit?: () => void;\n\t\t\t\tonAfterODataInvoke?: (odataContextBinding: ODataContextBinding, groupId: string) => Promise<unknown>;\n\t\t\t\tonAfterODataOperationExecution?: () => Promise<unknown>;\n\t\t\t\tonRequestSideEffects?: (\n\t\t\t\t\tsideEffects: ActionSideEffectsType,\n\t\t\t\t\toperation: EdmAction | ActionImport,\n\t\t\t\t\tsideEffectsPromises: Promise<unknown>[]\n\t\t\t\t) => void;\n\t\t\t};\n\t\t\tparametersValues?: Record<string, unknown>;\n\t\t},\n\t\tprivate readonly operationProperties: {\n\t\t\tenhance$select?: boolean;\n\t\t\tgroupId?: string;\n\t\t\tbindingParameters?: BindContextParameters;\n\t\t\tdeferredSubmit?: boolean;\n\t\t\tignoreETag?: boolean;\n\t\t\treplaceWithRVC?: boolean;\n\t\t} = {}\n\t) {\n\t\tconst action = isAction(this.operation) ? this.operation : this.operation.action;\n\t\tthis.actionName = actionHelper.getActionName(action);\n\n\t\tthis.sideEffects = this.parameters.appComponent\n\t\t\t.getSideEffectsService()\n\t\t\t.getODataActionSideEffects(this.actionName, this.parameters.contexts.length ? this.parameters.contexts[0] : undefined);\n\n\t\tif (!action.isFunction && this.parameters.disableStrictHandling !== true) {\n\t\t\tthis.oDataStrictHandling = new ODataStrictHandling({\n\t\t\t\tappComponent: this.parameters.appComponent,\n\t\t\t\tcontexts: this.parameters.contexts,\n\t\t\t\tlabel: this.parameters.label ?? this.actionName,\n\t\t\t\tinvocationGrouping: this.parameters.invocationGrouping,\n\t\t\t\tevents: {\n\t\t\t\t\tonResponse: this.parameters.events?.onStrictResponse,\n\t\t\t\t\tonValidation: this.onStrictValidation.bind(this),\n\t\t\t\t\tonCancel: this.parameters.events?.onStrictCancel\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.defineOperationParameters();\n\t\tthis.setBindingParameters();\n\n\t\tthis.isContinueOnErrorCompliant =\n\t\t\tthis.parameters.invocationGrouping !== InvocationGrouping.ChangeSet &&\n\t\t\tthis.parameters.contexts.length > 1 &&\n\t\t\t(!this.operationProperties.groupId || this.isAPIMode(this.operationProperties.groupId)) &&\n\t\t\tthis.operationProperties.deferredSubmit !== true;\n\t}\n\n\t/**\n\t * Sets the binding parameters for the operations.\n\t */\n\tprivate setBindingParameters(): void {\n\t\tthis.bindingParameters = deepClone(this.operationProperties.bindingParameters ?? {});\n\n\t\tif (\n\t\t\tisAction(this.operation) &&\n\t\t\t!this.operation.isFunction &&\n\t\t\tthis.parameters.contexts.length &&\n\t\t\tthis.operationProperties.enhance$select === true\n\t\t) {\n\t\t\tconst existingSelect = (this.bindingParameters.$select as string | undefined)?.split(\",\") ?? [];\n\t\t\tconst returnEntityType = this.operation.returnEntityType;\n\t\t\tconst metaModel = this.parameters.model.getMetaModel();\n\t\t\tconst messagesPath = ModelHelper.getMessagesPath(metaModel, this.parameters.contexts[0].getPath())!;\n\t\t\tconst isSameEntity =\n\t\t\t\t!this.operation.returnCollection && !!returnEntityType && this.operation.sourceEntityType === returnEntityType;\n\t\t\tif (isSameEntity) {\n\t\t\t\tif (\n\t\t\t\t\t/* The former logic checked if the messagesPath is contained into the SideEffects\n                       but the check was invalid (always true)\n                       To be compliant with former version we don't check the SideEffects..\n\t\t\t\t\t   \n\t\t\t\t\t   this.sideEffects &&\n\t\t\t\t\t   messagesPath &&\n\t\t\t\t\t   (this.sideEffects.pathExpressions ?? []).some((exp) => typeof exp === \"string\" && [messagesPath, \"*\"].includes(exp))*/\n\t\t\t\t\tmessagesPath &&\n\t\t\t\t\t!!returnEntityType?.entityProperties.find((property) => property.name === messagesPath) &&\n\t\t\t\t\t!existingSelect.includes(messagesPath)\n\t\t\t\t) {\n\t\t\t\t\tthis.bindingParameters.$select = this.bindingParameters.$select\n\t\t\t\t\t\t? `${this.bindingParameters.$select},${messagesPath}`\n\t\t\t\t\t\t: messagesPath;\n\n\t\t\t\t\tthis.bindingParameters.$$inheritExpandSelect = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Defines the parameters of the operation.\n\t */\n\tprivate defineOperationParameters(): void {\n\t\tif (!isAction(this.operation)) {\n\t\t\tthis.operationParameters = this.operation.action.parameters;\n\t\t} else {\n\t\t\t//Remove the binding parameters from the parameters list\n\t\t\tthis.operationParameters = actionHelper.getActionParameters(this.operation);\n\t\t}\n\t}\n\n\tpublic clear(): void {\n\t\tfor (const operationContextBinding of this.operationContextBindings) {\n\t\t\toperationContextBinding.destroy();\n\t\t}\n\t\tthis.apiGroupIdsToSubmit.clear();\n\t\tthis.operationContextBindings = [];\n\t\tthis.failedContexts = [];\n\t\tthis.operationPromises = [];\n\t}\n\n\t/**\n\t * Executes the operation.\n\t * @returns The promise of the operation\n\t */\n\tasync execute(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tlet result: PromiseSettledResult<OperationResult>[];\n\t\ttry {\n\t\t\tif (this.parameters.contexts.length) {\n\t\t\t\tresult = await (this.parameters.invocationGrouping === InvocationGrouping.ChangeSet || this.isContinueOnErrorCompliant\n\t\t\t\t\t? this.executeOperation()\n\t\t\t\t\t: this.executeSequentially());\n\t\t\t} else {\n\t\t\t\tresult = await Promise.allSettled([this.executeImport()]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tLog.error(\"Error while executing operation \" + this.actionName, error as string);\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tthis.parameters.events?.onODataResponse?.();\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * Executes the import operation.\n\t * @returns The promise of the operation\n\t */\n\tprivate async executeImport(): Promise<OperationResult> {\n\t\tconst operationContext = this.parameters.model.bindContext(`/${this.actionName}(...)`);\n\t\tthis.operationContextBindings.push(operationContext);\n\t\tthis.setParametersValue(operationContext);\n\t\tconst groupId = this.operationProperties.groupId ?? \"actionImport\";\n\t\tconst promises = [this.invoke(operationContext, groupId)];\n\n\t\tthis.defaultSubmit(groupId);\n\t\tawait Promise.allSettled(this.firstIterationOperations);\n\t\tawait this.afterODataOperationExecution();\n\t\tconst currentPromiseValues = await Promise.all(promises);\n\t\treturn currentPromiseValues[0];\n\t}\n\n\t/**\n\t * Executes the operations.\n\t * @returns The promise of the operations\n\t */\n\tprivate async executeOperation(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tlet groupId = this.operationProperties.groupId;\n\t\tif (this.isContinueOnErrorCompliant) {\n\t\t\tgroupId = groupId ?? this.apiGroupId;\n\t\t\tthis.parameters.model.setContinueOnError(groupId);\n\t\t}\n\t\tthis.operationPromises = this.parameters.contexts.map(async (context) => this.executeBoundOperation(context, groupId));\n\t\tawait Promise.allSettled(this.firstIterationOperations);\n\t\tawait this.afterODataOperationExecution();\n\t\treturn Promise.allSettled(this.operationPromises);\n\t}\n\n\tprivate async afterODataOperationExecution(): Promise<void> {\n\t\tawait this.oDataStrictHandling?.manageStrictHandlingFails();\n\t\tawait this.parameters.events?.onAfterODataOperationExecution?.();\n\t}\n\n\t/**\n\t * Executes the operations sequentially.\n\t * @returns The promise of the operations\n\t */\n\tprivate async executeSequentially(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\t// serialization: executeBoundOperation to be called for each entry only after the promise returned from the one before has been resolved\n\t\tawait this.parameters.contexts.reduce(async (promise: Promise<void>, context: ODataV4Context, id: number): Promise<void> => {\n\t\t\tawait promise;\n\t\t\tthis.operationPromises.push(\n\t\t\t\tthis.executeBoundOperation(context, this.operationProperties.groupId ?? `${this.apiGroupId}${id + 1}`)\n\t\t\t);\n\t\t\tawait Promise.allSettled(this.firstIterationOperations);\n\t\t}, Promise.resolve());\n\t\tawait this.afterODataOperationExecution();\n\t\treturn Promise.allSettled(this.operationPromises);\n\t}\n\n\t/**\n\t * Executes the bound operation.\n\t * @param context The bound context\n\t * @param groupId The groupId of the batch\n\t * @returns The promise of the operation\n\t */\n\tprivate async executeBoundOperation(context: ODataV4Context, groupId?: string): Promise<OperationResult> {\n\t\tconst operationContext = this.parameters.model.bindContext(`${this.actionName}(...)`, context, this.bindingParameters);\n\t\tthis.operationContextBindings.push(operationContext);\n\t\tconst promises: Promise<unknown>[] = [];\n\t\tthis.setParametersValue(operationContext);\n\t\tconst finalGroupId = groupId ?? operationContext.getUpdateGroupId();\n\t\tconst operationPromise = this.invoke(operationContext, finalGroupId);\n\t\tpromises.push(operationPromise);\n\t\tthis.defaultSubmit(finalGroupId);\n\t\tPromise.allSettled(promises);\n\t\treturn operationPromise;\n\t}\n\n\t/**\n\t * Enhances the side effects of the operation\n\t *\n\t * When a new entity is created using a DataFieldForAction, a new\n\t * oDataContextBinding is created to execute the action. By default, this\n\t * oDataContextBinding is relative to the OdataListBinding of the table.\n\t *\n\t * Because of this dependency, when a SideEffects is executed on the\n\t * context into the OdataListBinding where the oDataContextBinding was bound, this SideEffects is also triggered on this\n\t * oDataContextBinding. We don't manage the lifecycle of the\n\t * oDataContextBinding. It means even if the draft related to the action\n\t * is removed, the odataContextBinding is still there, so if a SideEffects\n\t * is executed on the source target into oDataContextBinding, an error from the back end will be\n\t * received because we ask to refresh a property on an unknown entity.\n\t *\n\t * The SideEffects are requested only if the page is still open.\n\t * This avoids generating issues with ghost oDataContextBinding linked to destroyed context.\n\t * @param operationContextBinding The operation\n\t * @param returnedContext The returned context of this operation\n\t */\n\tprivate enhanceSideEffects(operationContextBinding: ODataContextBinding, returnedContext: ODataV4Context | undefined): void {\n\t\tif (returnedContext && this.parameters.ghostContextBindingProtection === true) {\n\t\t\tconst appComponent = this.parameters.appComponent;\n\t\t\tconst origin = operationContextBinding.requestSideEffects.bind(operationContextBinding);\n\t\t\toperationContextBinding.requestSideEffects = async (...args: unknown[]): Promise<void> => {\n\t\t\t\t// We check if one of the pages or an open dialog uses the returned context.\n\t\t\t\t// If not, side effects are not requested.\n\t\t\t\tif (\n\t\t\t\t\tappComponent\n\t\t\t\t\t\t.getRootViewController()\n\t\t\t\t\t\t.getInstancedViews()\n\t\t\t\t\t\t.some((pageView: View) => pageView.getBindingContext() === returnedContext) ||\n\t\t\t\t\tInstanceManager.getOpenDialogs().some((dialog) => dialog.getBindingContext() === returnedContext)\n\t\t\t\t) {\n\t\t\t\t\treturn origin(...args);\n\t\t\t\t}\n\t\t\t\treturn Promise.resolve();\n\t\t\t};\n\t\t}\n\t}\n\n\t/**\n\t * Invokes the operation on the context.\n\t * @param operationContextBinding The operation context binding\n\t * @param groupId The groupId of the batch\n\t * @returns The promise of the operation\n\t */\n\tprivate async invoke(operationContextBinding: ODataContextBinding, groupId: string): Promise<OperationResult> {\n\t\tlet returnedContext;\n\t\tlet firstIterationResolve!: Function;\n\t\tlet firstIterationReject!: Function;\n\t\tconst strictHandlingPromise = new Promise<unknown>(function (resolve, reject) {\n\t\t\tfirstIterationResolve = resolve;\n\t\t\tfirstIterationReject = reject;\n\t\t});\n\t\tthis.firstIterationOperations.push(strictHandlingPromise);\n\t\tif (groupId && this.isAPIMode(groupId)) {\n\t\t\tthis.apiGroupIdsToSubmit.add(groupId);\n\t\t}\n\t\ttry {\n\t\t\tconst sideEffectsContext =\n\t\t\t\t(operationContextBinding.getContext() as ODataV4Context | undefined) ?? operationContextBinding.getBoundContext();\n\t\t\tconst operationInvoke = operationContextBinding.invoke(\n\t\t\t\tgroupId,\n\t\t\t\tthis.operationProperties.ignoreETag,\n\t\t\t\tthis.oDataStrictHandling?.handleOdataStrictHandling.bind(\n\t\t\t\t\tthis.oDataStrictHandling,\n\t\t\t\t\toperationContextBinding,\n\t\t\t\t\tfirstIterationResolve,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tif (this.isContinueOnErrorCompliant) {\n\t\t\t\t\t\t\tthis.parameters.model.setContinueOnError(groupId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.requestSideEffects(sideEffectsContext, groupId, []);\n\t\t\t\t\t\tthis.parameters.model.submitBatch(groupId);\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tthis.operationProperties.replaceWithRVC\n\t\t\t);\n\t\t\tthis.requestSideEffects(sideEffectsContext, groupId, [operationInvoke]);\n\t\t\tawait Promise.race([operationInvoke, strictHandlingPromise]);\n\n\t\t\treturnedContext = await operationInvoke;\n\t\t\tthis.enhanceSideEffects(operationContextBinding, returnedContext);\n\t\t\tfirstIterationResolve();\n\t\t} catch (error) {\n\t\t\tfirstIterationReject(error);\n\t\t\tconst context = operationContextBinding.getContext();\n\t\t\tif (context) {\n\t\t\t\tthis.failedContexts.push(context as ODataV4Context);\n\t\t\t}\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tawait this.parameters.events?.onAfterODataInvoke?.(operationContextBinding, groupId);\n\t\t}\n\n\t\treturn {\n\t\t\treturnedContext,\n\t\t\tboundContext: operationContextBinding.getBoundContext()\n\t\t};\n\t}\n\n\t/**\n\t *  Manages the strict handling validation.\n\t */\n\tprivate onStrictValidation(): void {\n\t\tthis.parameters.events?.onStrictValidation?.();\n\t\tthis.retriggerFailedContexts();\n\t}\n\n\t/**\n\t * Triggers the failed operations when strict handling is true.\n\t * @returns A promise resolved when the new operations are resolved\n\t */\n\tprivate async retriggerFailedContexts(): Promise<void> {\n\t\t//Retry the action execution in case of strict handling and if there is at least one failed context (give it another try to succeed)\n\t\tif (this.parameters.invocationGrouping !== InvocationGrouping.ChangeSet) {\n\t\t\tconst apiRetriggerGroupId = \"apiRetrigger\";\n\t\t\tif (this.isContinueOnErrorCompliant) {\n\t\t\t\tthis.parameters.model.setContinueOnError(apiRetriggerGroupId);\n\t\t\t}\n\t\t\tlet index = 0;\n\t\t\tfor (const failedContext of this.failedContexts) {\n\t\t\t\tconst groupId = `${apiRetriggerGroupId}${this.isContinueOnErrorCompliant ? \"\" : index + 1}`;\n\t\t\t\tindex++;\n\t\t\t\tthis.operationPromises.push(this.executeBoundOperation(failedContext, groupId));\n\t\t\t}\n\t\t\tawait Promise.allSettled(this.operationPromises);\n\t\t}\n\t}\n\n\t/**\n\t * Submits the batch related to the groupId of the operation.\n\t */\n\tpublic submit(): void {\n\t\tif (!this.neverSubmitted || this.apiGroupIdsToSubmit.size === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const groupId of Array.from(this.apiGroupIdsToSubmit.values())) {\n\t\t\tthis.submitOnModel(groupId);\n\t\t}\n\t\tthis.parameters.events?.onODataSubmit?.();\n\t}\n\n\t/**\n\t *  Is strict handling canceled.\n\t * @returns True if it is canceled, otherwise false\n\t */\n\tpublic isStrictCanceled(): boolean {\n\t\treturn this.oDataStrictHandling?.isCanceled() ?? false;\n\t}\n\n\t/**\n\t * Submits the batch at the model level related to the groupId of the operation.\n\t * @param groupId The groupId of the batch\n\t */\n\tprivate submitOnModel(groupId: string): void {\n\t\tthis.parameters.model.submitBatch(groupId);\n\t\tthis.apiGroupIdsToSubmit.delete(groupId);\n\t}\n\n\t/**\n\t * Is the SubmitMode of the groupId set to API.\n\t * @param groupId The groupId of the batch\n\t * @returns True if the SubmitMode is set to API, false otherwise\n\t */\n\tprivate isAPIMode(groupId?: string): boolean {\n\t\tif (!groupId) {\n\t\t\treturn false;\n\t\t}\n\t\tif (groupId.startsWith(\"$auto\") || groupId.startsWith(\"$direct\") || groupId.startsWith(\"$single\")) {\n\t\t\treturn false;\n\t\t}\n\t\tconst submitMode = (\n\t\t\tthis.parameters.appComponent.getManifestEntry(\"sap.ui5\")?.models[\"\"]?.settings as\n\t\t\t\t| { groupProperties?: Record<string, { submit: SubmitMode }> }\n\t\t\t\t| undefined\n\t\t)?.groupProperties?.[groupId]?.submit;\n\n\t\tif (submitMode === undefined || [SubmitMode.Auto, SubmitMode.Direct].includes(submitMode)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Executes the submit of the operation if the submitMode is on API and deferredSubmit is not set to true\n\t * The submitBatch is skipped if the groupId is $auto or $direct since done by the model.\n\t * @param groupId The groupId of the batch\n\t */\n\tprivate defaultSubmit(groupId?: string): void {\n\t\tconst firstSubmit = this.neverSubmitted;\n\t\tconst isAPIMode = this.isAPIMode(groupId);\n\t\tif (!isAPIMode) {\n\t\t\t// The submitBatch is skipped if the groupId is $auto or $direct since done by the model\n\t\t\tthis.neverSubmitted = false;\n\t\t} else if (this.operationProperties.deferredSubmit !== true && groupId) {\n\t\t\tthis.neverSubmitted = false;\n\t\t\tthis.submitOnModel(groupId);\n\t\t}\n\t\tif (firstSubmit && !this.neverSubmitted) {\n\t\t\t//Trigger the callback only once\n\t\t\tthis.parameters.events?.onODataSubmit?.();\n\t\t}\n\t}\n\n\t/**\n\t *  Sets the default values for the parameters of the operation.\n\t * @param operationContextBinding The operation context binding\n\t */\n\tprivate setParametersValue(operationContextBinding: ODataContextBinding): void {\n\t\tif (this.operationParameters.length) {\n\t\t\tconst defaultValues = this.parameters.parametersValues ?? {};\n\t\t\tfor (const parameter of this.operationParameters) {\n\t\t\t\tconst name = parameter.name;\n\t\t\t\tif (!defaultValues[name]) {\n\t\t\t\t\tswitch (parameter.type) {\n\t\t\t\t\t\tcase \"Edm.String\":\n\t\t\t\t\t\t\tdefaultValues[name] = \"\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"Edm.Boolean\":\n\t\t\t\t\t\t\tdefaultValues[name] = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"Edm.Byte\":\n\t\t\t\t\t\tcase \"Edm.Int16\":\n\t\t\t\t\t\tcase \"Edm.Int32\":\n\t\t\t\t\t\tcase \"Edm.Int64\":\n\t\t\t\t\t\t\tdefaultValues[name] = 0;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\toperationContextBinding.setParameter(name, defaultValues[name]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Requests the side effects for the action.\n\t * @param context  The context of the SideEffects\n\t * @param groupId  The groupId of the batch\n\t * @param localPromise The promise of the invoked action\n\t * @returns The promise of the side effect\n\t */\n\tprivate async requestSideEffects(context: ODataV4Context, groupId: string, localPromise?: Promise<unknown>[]): Promise<void> {\n\t\tconst sideEffectsService = this.parameters.appComponent.getSideEffectsService();\n\t\tlet promises: Promise<unknown>[] = localPromise ?? [];\n\t\t// trigger actions from side effects\n\t\tif (this.sideEffects && !this.parameters.disableSideEffects === true) {\n\t\t\tpromises = promises.concat(\n\t\t\t\t(this.sideEffects.triggerActions ?? []).map(async (action) => {\n\t\t\t\t\tif (this.isContinueOnErrorCompliant) {\n\t\t\t\t\t\tthis.submitOnModel(groupId);\n\t\t\t\t\t}\n\t\t\t\t\treturn sideEffectsService.executeAction(action, context, { submitBatch: false, groupId });\n\t\t\t\t}),\n\t\t\t\tthis.sideEffects.pathExpressions\n\t\t\t\t\t? sideEffectsService.requestSideEffects(this.sideEffects.pathExpressions, context, groupId)\n\t\t\t\t\t: []\n\t\t\t);\n\t\t\ttry {\n\t\t\t\tawait Promise.all(promises);\n\t\t\t\tif (this.sideEffects.pathExpressions) {\n\t\t\t\t\tthis.parameters.events?.onRequestSideEffects?.(this.sideEffects, this.operation, promises);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tLog.info(\"Error while requesting side effects for the operation \" + this.actionName, error as string);\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}