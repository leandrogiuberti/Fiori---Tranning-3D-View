{"version":3,"file":"Operation.js","names":["InvocationGrouping","FELibrary","Operation","appComponent","model","convertedAction","parameters","this","executionPromise","Promise","resolve","reject","executionResolve","executionReject","parametersValues","numberOfODataExecutions","externalParametersValues","contexts","setMessageCollectedPromise","entitySetName","isBound","undefined","getMetaModel","getMetaContext","getPath","getObject","operationMessage","OperationMessage","messageHandler","action","label","invocationGrouping","disableNotification","skipMessages","events","onMessageCollected","manageDialogOnMessages","messageCollectedResolve","onMessagePageNavigationCallback","operationParameters","closeParameterDialog","OperationParameters","skipParameterDialog","defaultValuesExtensionFunction","isCreateAction","parameterValues","view","onParameterDialogOpened","bind","onParameterDialogClosed","_exports","_proto","prototype","clear","odataOperation","setDefaultParametersValues","execute","async","internalExecution","operationResult","getOperationParameters","confirmAction","ODataOperation","disableStrictHandling","oDataProperties","disableSideEffects","ghostContextBindingProtection","onStrictValidation","oDataEvents","onStrictCancel","onStrictResponse","messages412","addWarningMessagesToMessageHandler","onStrictHandling","onODataResponse","onODataSubmit","onRequestSideEffects","enhance$select","groupId","replaceWithRVC","ignoreETag","bindingParameters","deferredSubmit","reactToOperations","isParameterDialog","some","isRejected","closeDialog","messageCollectedPromise","isParameterDialogOpened","e","isErrorIntoParameterDialog","actionHelper","isStaticAction","length","resetDialog","ChangeSet","isStrictCanceled","resetParameterDialogState","getOperationResults","isActionCritical","context","isActionCriticalValue","isActionCriticalBindingExp","getIsActionCriticalExpression","convertTypes","isConstant","compileConstant","anyObject","Any","anyBoolean","compileExpression","setModel","getModel","setBindingContext","booleanBinding","getBinding","isA","all","getBindings","map","nestedBinding","requestValue","isCritical","actionName","getActionName","boundActionName","includes","split","suffixResourceKey","MessageBox","confirm","ResourceModelHelper","getResourceModel","getText","title","getConfirmTitle","onClose","Action","OK","Error","Constants","CancelActionDialog","key","resourceModel","titleOverrideExists","checkIfResourceKeyExists","getOperationFromName","name","metaModel","convertedMetaModel","sourceEntityType","getInvolvedDataModelObjects","targetEntityType","replace","namespace","pop","actions","find","importName","entityContainer","fullyQualifiedName","actionImports","actionImport"],"sources":["./Operation.ts"],"sourcesContent":["import type { ActionImport, Action as EdmAction, PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport { compileConstant, compileExpression, isConstant } from \"sap/fe/base/BindingToolkit\";\nimport type { BindContextParameters } from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport Any from \"sap/fe/core/controls/Any\";\nimport { isRejected } from \"sap/fe/core/helpers/TypeGuards\";\nimport FELibrary from \"sap/fe/core/library\";\nimport { getIsActionCriticalExpression } from \"sap/fe/core/templating/ActionHelper\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport type CompositeBinding from \"sap/ui/model/CompositeBinding\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ODataPropertyBinding from \"sap/ui/model/odata/v4/ODataPropertyBinding\";\nimport type AppComponent from \"../../../AppComponent\";\nimport type { FEView } from \"../../../BaseController\";\nimport { convertTypes, getInvolvedDataModelObjects } from \"../../../converters/MetaModelConverter\";\nimport * as ResourceModelHelper from \"../../../helpers/ResourceModelHelper\";\nimport type { ActionSideEffectsType } from \"../../../services/SideEffectsServiceFactory\";\nimport type MessageHandler from \"../../MessageHandler\";\nimport type { OperationResult } from \"./ODataOperation\";\nimport ODataOperation from \"./ODataOperation\";\nimport OperationMessage from \"./OperationMessage\";\nimport OperationParameters from \"./OperationParameters\";\nimport actionHelper from \"./actionHelper\";\n\nconst InvocationGrouping = FELibrary.InvocationGrouping;\n\nexport type OperationParametersType = {\n\tmessageHandler: MessageHandler;\n\tview?: FEView;\n\tparameterValues?: Record<string, PrimitiveType>[];\n\tlabel?: string;\n\tinvocationGrouping?: string;\n\tskipParameterDialog?: boolean;\n\tskipMessages?: boolean;\n\tentitySetName?: string;\n\toDataProperties?: {\n\t\tghostContextBindingProtection?: boolean;\n\t\tenhance$select?: boolean;\n\t\tdisableStrictHandling?: boolean;\n\t\tdisableSideEffects?: boolean;\n\t\tignoreETag?: boolean;\n\t\tgroupId?: string;\n\t\treplaceWithRVC?: boolean;\n\t\tdeferredSubmit?: boolean;\n\t};\n\tisCreateAction?: boolean;\n\tcontexts?: Context[];\n\tbindingParameters?: BindContextParameters;\n\tdefaultValuesExtensionFunction?: string;\n\toDataEvents?: {\n\t\tonODataResponse?: () => void;\n\t\tonODataSubmit?: () => void;\n\t\tonRequestSideEffects?: (\n\t\t\tsideEffects: ActionSideEffectsType,\n\t\t\toperation: EdmAction | ActionImport,\n\t\t\tsideEffectsPromises: Promise<unknown>[]\n\t\t) => void;\n\t\tonStrictCancel?: () => void;\n\t\tonStrictValidation?: () => void;\n\t};\n};\n\nexport default class Operation {\n\tprivate readonly contexts: Context[];\n\n\tprivate readonly entitySetName: string | undefined;\n\n\tprivate executionResolve!: Function;\n\n\tprivate executionReject!: Function;\n\n\tprivate readonly executionPromise = new Promise<PromiseSettledResult<OperationResult>[]>((resolve, reject) => {\n\t\tthis.executionResolve = resolve;\n\t\tthis.executionReject = reject;\n\t});\n\n\tprivate messageCollectedResolve!: Function;\n\n\tprivate messageCollectedPromise!: Promise<void>;\n\n\tprivate readonly operationMessage: OperationMessage;\n\n\tprivate readonly operationParameters: OperationParameters;\n\n\tprivate parametersValues: Record<string, PrimitiveType> = {};\n\n\tprivate numberOfODataExecutions = 0;\n\n\tprivate externalParametersValues = false;\n\n\tprivate odataOperation: ODataOperation | undefined;\n\n\t/**\n\t * Creates an instance of Operation.\n\t * This instance is used to execute an OData operation, which can be an action or an action import.\n\t * The operation can be executed with or without a parameter dialog.\n\t * If the operation is executed with a parameter dialog, the parameters are collected from the user.\n\t * If the operation is executed without a parameter dialog, the parameters must be provided in the constructor.\n\t * The operation can be executed with multiple contexts, which are used to execute the operation on each context.\n\t * The operation can be executed with a message handler, which is used to handle the messages generated by the operation.\n\t * The operation can be executed with OData properties, which are used to configure the OData operation.\n\t * The operation can be executed with OData events, which are used to handle the OData responses and side effects.\n\t * The operation can be executed with binding parameters, which are used to bind the operation to the context.\n\t * The operation can be executed with a default values extension function, which is used to set the default values for the parameters.\n\t * @param appComponent The application component\n\t * @param model The OData model where the operation is executed\n\t * @param convertedAction The converted action to execute\n\t * @param parameters The operation parameters\n\t * @param parameters.contexts The contexts for the operation\n\t * @param parameters.messageHandler The message handler to use for the operation\n\t * @param parameters.view The view where the operation is executed\n\t * @param parameters.parameterValues The values for the parameters of the operation\n\t * @param parameters.label The label for the operation\n\t * @param parameters.invocationGrouping The invocation grouping for the operation\n\t * @param parameters.skipParameterDialog If set to true the parameter dialog is skipped and the parameters are used directly\n\t * @param parameters.skipMessages Whether to skip the messages for the operation\n\t * @param parameters.entitySetName The entity set name for the operation\n\t * @param parameters.oDataProperties The OData properties for the operation\n\t * @param parameters.oDataProperties.ghostContextBindingProtection Whether to enable ghost context binding protection\n\t * @param parameters.oDataProperties.enhance$select Whether to enhance the $select parameter for requesting the sap messages\n\t * @param parameters.oDataProperties.disableStrictHandling Whether to disable the oData strict handling\n\t * @param parameters.oDataProperties.disableSideEffects Whether to disable side effects\n\t * @param parameters.oDataProperties.ignoreETag Whether to ignore the ETag\n\t * @param parameters.oDataProperties.groupId The group ID for the operation\n\t * @param parameters.oDataProperties.replaceWithRVC Whether this operation binding's parent context, which must belong to a list binding, is replaced with the operation's return value context (see below) and that list context is returned instead\n\t * @param parameters.oDataProperties.deferredSubmit If true the operation is not submitted immediately and must be submitted by the developer\n\t * @param parameters.oDataEvents The OData events for the operation\n\t * @param parameters.oDataEvents.onParameterDialogOpened The function to call when the parameter dialog is opened\n\t * @param parameters.oDataEvents.onParameterDialogClosed The function to call when the parameter dialog is closed\n\t * @param parameters.oDataEvents.onMessagePageNavigationCallback The function to call before page navigation is triggered\n\t * @param parameters.oDataEvents.onMessageCollected The function to call when the messages are collected\n\t * @param parameters.oDataEvents.onStrictResponse The function to call when the strict response is received\n\t * @param parameters.oDataEvents.onStrictCancel The function to call when the strict handling is canceled\n\t * @param parameters.oDataEvents.onStrictValidation The function to call when the strict validation is triggered\n\t * @param parameters.oDataEvents.onODataResponse The function to call when the OData response is received\n\t * @param parameters.oDataEvents.onODataSubmit The function to call when the OData submit is triggered\n\t * @param parameters.oDataEvents.onRequestSideEffects The function to call when the request side effects are triggered\n\t * @param parameters.isCreateAction Whether the operation is a create action\n\t * @param parameters.bindingParameters The binding parameters for the operation\n\t * @param parameters.defaultValuesExtensionFunction The default values extension function for the operation\n\t * @param parameters.closeParameterDialog The function to close the parameter dialog\n\t */\n\tconstructor(\n\t\tprivate readonly appComponent: AppComponent,\n\t\tprivate readonly model: ODataModel,\n\t\tprivate readonly convertedAction: EdmAction,\n\t\tprivate readonly parameters: OperationParametersType\n\t) {\n\t\tthis.contexts = parameters.contexts ?? [];\n\n\t\tthis.setMessageCollectedPromise();\n\n\t\t// If entitySetName is not provided, it is derived from the first context as fallback.\n\t\tthis.entitySetName =\n\t\t\tparameters.entitySetName ??\n\t\t\t(this.convertedAction.isBound && this.contexts[0] !== undefined\n\t\t\t\t? this.model.getMetaModel().getMetaContext(this.contexts[0].getPath()).getObject(\"@sapui.name\")\n\t\t\t\t: undefined);\n\n\t\tthis.operationMessage = new OperationMessage({\n\t\t\tmessageHandler: this.parameters.messageHandler,\n\t\t\taction: this.convertedAction,\n\t\t\tcontexts: this.contexts,\n\t\t\tlabel: this.parameters.label,\n\t\t\tinvocationGrouping: this.parameters.invocationGrouping,\n\t\t\tdisableNotification: this.parameters.skipMessages,\n\t\t\tentitySetName: this.entitySetName,\n\t\t\tevents: {\n\t\t\t\tonMessageCollected: (): void => {\n\t\t\t\t\t// Due to the mess into the message handling\n\t\t\t\t\t// the dialog should be closed or not only after the messages are collected\n\t\t\t\t\t// it means in the middle of the message handling workflow via\n\t\t\t\t\t// a callback function\n\t\t\t\t\tthis.manageDialogOnMessages();\n\t\t\t\t\tthis.messageCollectedResolve();\n\t\t\t\t},\n\t\t\t\tonMessagePageNavigationCallback: (): void => {\n\t\t\t\t\tthis.operationParameters.closeParameterDialog();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.operationParameters = new OperationParameters(\n\t\t\tthis.appComponent,\n\t\t\tthis.model,\n\t\t\tthis.convertedAction,\n\t\t\tthis.parameters.skipParameterDialog,\n\t\t\t{\n\t\t\t\tcontexts: this.contexts,\n\t\t\t\tdefaultValuesExtensionFunction: this.parameters.defaultValuesExtensionFunction,\n\t\t\t\tisCreateAction: this.parameters.isCreateAction,\n\t\t\t\tlabel: this.parameters.label,\n\t\t\t\tparameterValues: this.parameters.parameterValues,\n\t\t\t\tentitySetName: this.entitySetName,\n\t\t\t\tview: this.parameters.view,\n\t\t\t\tmessageHandler: this.parameters.messageHandler,\n\t\t\t\tevents: {\n\t\t\t\t\tonParameterDialogOpened: this.operationMessage.onParameterDialogOpened.bind(this.operationMessage),\n\t\t\t\t\tonParameterDialogClosed: this.operationMessage.onParameterDialogClosed.bind(this.operationMessage)\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tclear(): void {\n\t\tthis.operationParameters.closeParameterDialog();\n\t\tthis.odataOperation?.clear();\n\t}\n\n\t/**\n\t * Set the values related to the parameters  for the operation\n\t * If the values are set the operation parameter dialog is skipped.\n\t * @param parametersValues The values for the parameters\n\t */\n\tpublic setDefaultParametersValues(parametersValues: Record<string, PrimitiveType>): void {\n\t\tthis.parametersValues = parametersValues;\n\t\tthis.externalParametersValues = true;\n\t}\n\n\t/**\n\t * Executes the operation.\n\t * @returns A promise containing the results\n\t */\n\tpublic async execute(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\tthis.internalExecution();\n\t\treturn this.executionPromise;\n\t}\n\n\t/**\n\t * Executes the operation.\n\t */\n\tprivate async internalExecution(): Promise<void> {\n\t\tlet operationResult: PromiseSettledResult<OperationResult>[] = [];\n\t\ttry {\n\t\t\tthis.numberOfODataExecutions++;\n\t\t\tif (!this.externalParametersValues) {\n\t\t\t\tthis.parametersValues = await this.operationParameters.getOperationParameters();\n\t\t\t}\n\t\t\tif (this.numberOfODataExecutions === 1) {\n\t\t\t\tawait this.confirmAction();\n\t\t\t}\n\t\t\tthis.odataOperation = new ODataOperation(\n\t\t\t\tthis.convertedAction,\n\t\t\t\t{\n\t\t\t\t\tappComponent: this.appComponent,\n\t\t\t\t\tcontexts: this.contexts,\n\t\t\t\t\tmodel: this.model,\n\t\t\t\t\tlabel: this.parameters.label,\n\t\t\t\t\tinvocationGrouping: this.parameters.invocationGrouping,\n\t\t\t\t\tdisableStrictHandling: this.parameters.oDataProperties?.disableStrictHandling,\n\t\t\t\t\tdisableSideEffects: this.parameters.oDataProperties?.disableSideEffects,\n\t\t\t\t\tghostContextBindingProtection: this.parameters.oDataProperties?.ghostContextBindingProtection,\n\t\t\t\t\tevents: {\n\t\t\t\t\t\tonStrictValidation: this.parameters.oDataEvents?.onStrictValidation,\n\t\t\t\t\t\tonStrictCancel: this.parameters.oDataEvents?.onStrictCancel,\n\t\t\t\t\t\tonStrictResponse: (messages412: Message[]): void => {\n\t\t\t\t\t\t\tthis.parameters.messageHandler.addWarningMessagesToMessageHandler(messages412);\n\t\t\t\t\t\t\tthis.operationMessage.onStrictHandling();\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonODataResponse: this.parameters.oDataEvents?.onODataResponse,\n\t\t\t\t\t\tonODataSubmit: this.parameters.oDataEvents?.onODataSubmit,\n\t\t\t\t\t\tonRequestSideEffects: this.parameters.oDataEvents?.onRequestSideEffects\n\t\t\t\t\t},\n\t\t\t\t\tparametersValues: this.parametersValues\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tenhance$select: this.parameters.oDataProperties?.enhance$select,\n\t\t\t\t\tgroupId: this.parameters.oDataProperties?.groupId,\n\t\t\t\t\treplaceWithRVC: this.parameters.oDataProperties?.replaceWithRVC,\n\t\t\t\t\tignoreETag: this.parameters.oDataProperties?.ignoreETag,\n\t\t\t\t\tbindingParameters: this.parameters.bindingParameters,\n\t\t\t\t\tdeferredSubmit: this.parameters.oDataProperties?.deferredSubmit\n\t\t\t\t}\n\t\t\t);\n\t\t\toperationResult = await this.odataOperation.execute();\n\t\t\tthis.operationMessage.reactToOperations(operationResult);\n\n\t\t\tif (this.operationParameters.isParameterDialog()) {\n\t\t\t\tif (!operationResult.some(isRejected)) {\n\t\t\t\t\tthis.closeDialog();\n\t\t\t\t} else {\n\t\t\t\t\tawait this.messageCollectedPromise;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.operationParameters.isParameterDialogOpened()) {\n\t\t\t\tthis.setMessageCollectedPromise();\n\t\t\t\tthis.internalExecution();\n\t\t\t} else {\n\t\t\t\tthis.executionResolve(operationResult);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.executionReject(e);\n\t\t}\n\t}\n\n\t/**\n\t * Manages the parameter dialog after the messages.\n\t */\n\n\tprivate manageDialogOnMessages(): void {\n\t\tconst isErrorIntoParameterDialog = this.operationMessage.isErrorIntoParameterDialog();\n\n\t\tif (actionHelper.isStaticAction(this.convertedAction) || this.contexts.length === 0) {\n\t\t\t// Don't close the dialog if the action is static or an import\n\t\t\treturn this.resetDialog();\n\t\t} else if (this.parameters.invocationGrouping === InvocationGrouping.ChangeSet) {\n\t\t\t// When the end user cancel the process on the strict dialog, we need to keep the parameter dialog (only on ChangeSet) #6376592\n\t\t\tif (isErrorIntoParameterDialog || this.odataOperation?.isStrictCanceled() === true) {\n\t\t\t\treturn this.resetDialog();\n\t\t\t} else {\n\t\t\t\treturn this.closeDialog();\n\t\t\t}\n\t\t} else if ((this.parameters.contexts && this.parameters.contexts.length > 1) || !isErrorIntoParameterDialog) {\n\t\t\t// does not matter if error is in APD or not, if there are multiple contexts selected or if the error is not the APD, we close it.\n\t\t\treturn this.closeDialog();\n\t\t}\n\t\treturn this.resetDialog();\n\t}\n\n\t/**\n\t * Sets the message collected promise.\n\t * This promise is resolved when the messages are collected.\n\t */\n\tprivate setMessageCollectedPromise(): void {\n\t\tthis.messageCollectedPromise = new Promise<void>((resolve) => {\n\t\t\tthis.messageCollectedResolve = resolve;\n\t\t});\n\t}\n\n\t/**\n\t * Closes the parameter dialog.\n\t */\n\tprivate closeDialog(): void {\n\t\tthis.operationParameters.closeParameterDialog();\n\t}\n\n\t/**\n\t * Resets the parameter dialog.\n\t */\n\tprivate resetDialog(): void {\n\t\tthis.operationParameters.resetParameterDialogState();\n\t}\n\n\t/**\n\t * Gets the result of the operation.\n\t * @returns The result\n\t */\n\tpublic async getOperationResults(): Promise<PromiseSettledResult<OperationResult>[]> {\n\t\treturn this.executionPromise;\n\t}\n\n\t/**\n\t * Checks if action is critical.\n\t * @returns True if the action is critical, otherwise false\n\t */\n\tprivate async isActionCritical(): Promise<boolean> {\n\t\t//only works with single context (as former code);\n\t\tconst context = this.parameters.contexts?.[0];\n\t\t// default is true.\n\t\tlet isActionCriticalValue: boolean | Promise<boolean> = true;\n\t\tconst isActionCriticalBindingExp = getIsActionCriticalExpression(this.convertedAction, convertTypes(this.model.getMetaModel()));\n\t\tif (isConstant(isActionCriticalBindingExp)) {\n\t\t\tisActionCriticalValue = compileConstant(isActionCriticalBindingExp, false, undefined, true) as boolean;\n\t\t} else if (context) {\n\t\t\tconst anyObject = new Any({ anyBoolean: compileExpression(isActionCriticalBindingExp) });\n\t\t\tanyObject.setModel(context.getModel());\n\t\t\tanyObject.setBindingContext(context);\n\t\t\tconst booleanBinding = anyObject.getBinding(\"anyBoolean\") as ODataPropertyBinding | undefined;\n\t\t\tif (booleanBinding) {\n\t\t\t\tif (booleanBinding.isA<CompositeBinding>(\"sap.ui.model.CompositeBinding\")) {\n\t\t\t\t\tawait Promise.all(booleanBinding.getBindings().map((nestedBinding) => nestedBinding.requestValue?.()));\n\t\t\t\t} else {\n\t\t\t\t\tawait booleanBinding.requestValue?.();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn isActionCriticalValue;\n\t}\n\n\t/**\n\t * Manages the message box to display when an action is critical.\n\t * @returns A promise which is resolved if the action is not critical or the message box is closed.\n\t */\n\tprivate async confirmAction(): Promise<void> {\n\t\tif (!this.operationParameters.isParameterDialog()) {\n\t\t\tconst isCritical = await this.isActionCritical();\n\t\t\tif (isCritical) {\n\t\t\t\tconst actionName = actionHelper.getActionName(this.convertedAction);\n\t\t\t\tawait new Promise((resolve, reject) => {\n\t\t\t\t\tconst boundActionName = actionName.includes(\".\") ? actionName.split(\".\")[actionName.split(\".\").length - 1] : actionName;\n\t\t\t\t\tconst suffixResourceKey = boundActionName && this.entitySetName ? `${this.entitySetName}|${boundActionName}` : \"\";\n\n\t\t\t\t\tMessageBox.confirm(\n\t\t\t\t\t\tResourceModelHelper.getResourceModel(this.parameters.view ?? this.appComponent).getText(\n\t\t\t\t\t\t\t\"C_OPERATIONS_ACTION_CONFIRM_MESSAGE\",\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tsuffixResourceKey\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttitle: this.getConfirmTitle(suffixResourceKey),\n\t\t\t\t\t\t\tonClose: (action: string) => {\n\t\t\t\t\t\t\t\tif (action === MessageBox.Action.OK) {\n\t\t\t\t\t\t\t\t\tresolve(true);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treject(new Error(FELibrary.Constants.CancelActionDialog));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tgetConfirmTitle(suffixResourceKey: string): string | undefined {\n\t\t// A title only exists if it has been defined in the extension. Otherwise \"Confirmation\"\n\t\t// is used from the MessageBox control.\n\t\tif (!this.parameters.view) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst key = \"C_OPERATIONS_ACTION_CONFIRM_TITLE\";\n\t\tconst resourceModel = ResourceModelHelper.getResourceModel(this.parameters.view ?? this.appComponent);\n\t\tconst titleOverrideExists = resourceModel.checkIfResourceKeyExists(`${key}|${suffixResourceKey}`);\n\t\tif (titleOverrideExists) {\n\t\t\treturn resourceModel.getText(key, undefined, suffixResourceKey);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the converted operation from its name.\n\t * The operation can be an action or an action import.\n\t * For the bound operation, the context must be provided and one of the following formats is expected:\n\t *  - short name (e.g. \"MyAction\")\n\t *  - short name with entityType (e.g. \"MyEntitytype.MyAction\")\n\t *  - fully qualified name (e.g. \"MyService.MyAction\")\n\t *  - fully qualified name with the overlay (e.g. \"MyService.MyAction(MyEntityType)\")\n\t *  - fully qualified name with the parenthesis for the operations (e.g. \"MyService.MyFunction()\")\n\t * For the imports, one of the following formats is expected:\n\t *  - short name (e.g. \"MyActionImport\")\n\t *  - fully qualified name with entity container (e.g. \"MyService.entityContainer/MyActionImport\")\n\t *  - fully qualified name of the related operation (e.g. \"MyService.MyActionImport\")\n\t *  - fully qualified name of the related operation with parenthesis (e.g. \"MyService.MyActionImport()\").\n\t * @param name The name of the operation\n\t * @param model The OData model\n\t * @param context The context of the operation for bound actions\n\t * @returns The converted operation\n\t */\n\tstatic getOperationFromName(name: string, model: ODataModel, context?: Context): EdmAction | ActionImport | undefined {\n\t\tconst metaModel = model.getMetaModel();\n\t\tconst convertedMetaModel = convertTypes(metaModel);\n\t\tif (context) {\n\t\t\t//looking for bound action\n\t\t\tconst sourceEntityType = getInvolvedDataModelObjects(metaModel.getMetaContext(context.getPath())).targetEntityType.name;\n\t\t\tconst actionName = name\n\t\t\t\t.replace(/\\(.*\\)$/g, \"\") // remove the part related to the overlay\n\t\t\t\t.replace(`${convertedMetaModel.namespace}.`, \"\") // remove the part related to the service name\n\t\t\t\t.split(\".\")\n\t\t\t\t.pop(); // remove the part related to the entity type\n\t\t\treturn convertedMetaModel.actions.find((action: EdmAction) => {\n\t\t\t\treturn (\n\t\t\t\t\taction.name === actionName &&\n\t\t\t\t\taction.isBound &&\n\t\t\t\t\taction.sourceEntityType &&\n\t\t\t\t\tsourceEntityType === action.sourceEntityType.name\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\t\tconst importName = name\n\t\t\t.replace(`${convertedMetaModel.entityContainer.fullyQualifiedName}/`, \"\")\n\t\t\t.replace(`${convertedMetaModel.namespace}.`, \"\")\n\t\t\t.replace(\"()\", \"\");\n\t\t// Remove the entityContainer part (sap.fe.MyService.EntityContainer/myImport) or the service name (sap.fe.MyService.myImport) and the parenthesis (sap.fe.MyService.myImport())\n\t\treturn convertedMetaModel.actionImports.find((actionImport: ActionImport) => {\n\t\t\treturn actionImport.name === importName;\n\t\t});\n\t}\n}\n"],"mappings":"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","ignoreList":[]}