{"version":3,"file":"OperationParameters.js","names":["OperationParameters","appComponent","model","convertedAction","skipParametersDialog","parameters","this","parameterDialog","undefined","parametersValues","startupParameters","actionParameters","actionHelper","getActionParameters","isParameterDialogNeeded","length","name","filter","actionParameter","every","parameter","annotations","UI","Hidden","valueOf","setStartupParameters","_exports","_proto","prototype","componentData","getComponentData","isParameterDialog","isParameterDialogOpened","isOpen","resetParameterDialogState","resetState","closeParameterDialog","async","closeDialog","getOperationParameters","isMandatoryValuesProvided","getCoreUIFactory","newOperationParameterDialog","contexts","defaultValuesExtensionFunction","isCreateAction","label","view","events","onParameterDialogOpened","onParameterDialogClosed","parameterValues","entitySetName","messageHandler","createDialog","openDialog","waitForParametersValues","i","find","element","value","convertValue","ParameterDefaultValue","hiddenAnnotationSetOnAllActions","Object","keys","fieldControl","Common","FieldControl","isMandatory","toString","parameterValue","TypeMap","__ui5_require_async","default","parameterType","getBaseType","type","typeInstance","getDataTypeInstance","parseValue"],"sources":["./OperationParameters.ts"],"sourcesContent":["import type { Action as EdmAction, ActionParameter as EdmActionParameter, PrimitiveType } from \"@sap-ux/vocabularies-types\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport { getCoreUIFactory, type StandardOperationParameterDialog } from \"sap/fe/core/UIProvider\";\nimport type MultiValueFieldItem from \"sap/ui/mdc/field/MultiValueFieldItem\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type { StartupParameters } from \"../../../AppComponent\";\nimport type MessageHandler from \"../../MessageHandler\";\nimport actionHelper from \"./actionHelper\";\n\ntype BaseTypeParameter = string | number | boolean;\n\nexport default class OperationParameters {\n\tprivate readonly isParameterDialogNeeded: boolean;\n\n\tprivate readonly actionParameters: EdmActionParameter[];\n\n\tprivate parameterDialog: StandardOperationParameterDialog | undefined = undefined;\n\n\tprivate parametersValues: Record<string, PrimitiveType> = {};\n\n\tprivate startupParameters: StartupParameters = {};\n\n\t/**\n\t * Creates an instance of OperationParameters.\n\t * This class is responsible for handling the parameters of an OData action, including\n\t * managing the parameter dialog, retrieving parameter values, and checking if the dialog is needed.\n\t * It checks if the action has parameters and whether a dialog is needed based on the action's parameters.\n\t * If the action has parameters, it will create a dialog to collect the parameter values.\n\t * If the dialog is not needed (e.g., no parameters or all parameters are hidden), it will return the default values.\n\t * @param appComponent The application component\n\t * @param model The OData model\n\t * @param convertedAction The operation\n\t * @param skipParametersDialog If true, the parameter dialog will be skipped if all mandatory values are provided.\n\t * @param parameters The parameters for the operation\n\t * @param parameters.entitySetName The name of the entity set\n\t * @param parameters.contexts The contexts for the action\n\t * @param parameters.defaultValuesExtensionFunction The function to get default values for the parameters\n\t * @param parameters.isCreateAction Indicates if the action is a create action\n\t * @param parameters.label The label for the action\n\t * @param parameters.parameterValues The values for the parameters\n\t * @param parameters.view The view where the action is executed\n\t * @param parameters.messageHandler The message handler for the action\n\t * @param parameters.events The events for the parameter dialog\n\t * @param parameters.events.onParameterDialogOpened The function to call when the parameter dialog is opened\n\t * @param parameters.events.onParameterDialogClosed The function to call when the parameter dialog is closed\n\t */\n\tconstructor(\n\t\tprivate readonly appComponent: AppComponent,\n\t\tprivate readonly model: ODataModel,\n\t\tprivate readonly convertedAction: EdmAction,\n\t\tprivate readonly skipParametersDialog: boolean | undefined,\n\t\tprivate readonly parameters: {\n\t\t\tcontexts: Context[];\n\t\t\tdefaultValuesExtensionFunction?: string;\n\t\t\tisCreateAction?: boolean;\n\t\t\tlabel?: string;\n\t\t\tparameterValues?: Record<string, string | number | boolean | MultiValueFieldItem[]>[];\n\t\t\tentitySetName?: string;\n\t\t\tview?: FEView;\n\t\t\tmessageHandler: MessageHandler;\n\t\t\tevents?: {\n\t\t\t\tonParameterDialogOpened?: () => void;\n\t\t\t\tonParameterDialogClosed?: () => void;\n\t\t\t};\n\t\t}\n\t) {\n\t\t// Check if the action has parameters and would need a parameter dialog\n\t\t// The parameter ResultIsActiveEntity is always hidden in the dialog! Hence if\n\t\t// this is the only parameter, this is treated as no parameter here because the\n\t\t// dialog would be empty!\n\t\tthis.actionParameters = actionHelper.getActionParameters(this.convertedAction);\n\t\tthis.isParameterDialogNeeded =\n\t\t\tthis.actionParameters.length > 0 &&\n\t\t\t!(this.actionParameters.length === 1 && this.actionParameters[0].name === \"ResultIsActiveEntity\");\n\n\t\tthis.skipParametersDialog =\n\t\t\t(this.actionParameters.length &&\n\t\t\tthis.actionParameters\n\t\t\t\t.filter((actionParameter) => actionParameter.name !== \"ResultIsActiveEntity\")\n\t\t\t\t.every((parameter) => parameter.annotations.UI?.Hidden?.valueOf() === true)\n\t\t\t\t? true\n\t\t\t\t: this.skipParametersDialog) ?? false;\n\n\t\tthis.setStartupParameters();\n\t}\n\n\t/**\n\t *  Sets the parameters provided on the startup.\n\t */\n\tprivate setStartupParameters(): void {\n\t\t// Determine startup parameters if provided\n\t\tconst componentData = this.appComponent.getComponentData();\n\t\tthis.startupParameters = componentData?.startupParameters ?? {};\n\t}\n\n\t/**\n\t *  Is the parameter dialog instanced.\n\t * @returns True if the parameter dialog is instanced, otherwise false\n\t */\n\tpublic isParameterDialog(): boolean {\n\t\treturn !!this.parameterDialog;\n\t}\n\n\t/**\n\t *  Is the parameter dialog opened.\n\t * @returns True if the parameter dialog is opened, otherwise false\n\t */\n\tpublic isParameterDialogOpened(): boolean {\n\t\treturn this.parameterDialog?.isOpen() ?? false;\n\t}\n\n\t/**\n\t * Resets the state of the parameter dialog.\n\t */\n\tpublic resetParameterDialogState(): void {\n\t\tthis.parameterDialog?.resetState();\n\t}\n\n\t/**\n\t * Closes the state of the parameter dialog.\n\t * @returns Promise that resolves when the dialog is closed\n\t */\n\tpublic async closeParameterDialog(): Promise<void> {\n\t\treturn this.parameterDialog?.closeDialog();\n\t}\n\n\t/**\n\t * Gets the value of the parameters.\n\t * @returns The value of the parameters\n\t */\n\tpublic async getOperationParameters(): Promise<Record<string, PrimitiveType>> {\n\t\t// In case an action parameter is needed, and we shall skip the dialog, check if values are provided for all parameters\n\t\tif (this.isParameterDialogNeeded && !(this.skipParametersDialog && this.isMandatoryValuesProvided())) {\n\t\t\tif (!this.parameterDialog) {\n\t\t\t\tthis.parameterDialog = getCoreUIFactory().newOperationParameterDialog(\n\t\t\t\t\tthis.convertedAction,\n\t\t\t\t\t{\n\t\t\t\t\t\tappComponent: this.appComponent,\n\t\t\t\t\t\tmodel: this.model,\n\t\t\t\t\t\tcontexts: this.parameters.contexts,\n\t\t\t\t\t\tparametersValues: {},\n\t\t\t\t\t\tdefaultValuesExtensionFunction: this.parameters.defaultValuesExtensionFunction,\n\t\t\t\t\t\tisCreateAction: this.parameters.isCreateAction,\n\t\t\t\t\t\tlabel: this.parameters.label,\n\t\t\t\t\t\tview: this.parameters.view,\n\t\t\t\t\t\tevents: {\n\t\t\t\t\t\t\tonParameterDialogOpened: this.parameters.events?.onParameterDialogOpened,\n\t\t\t\t\t\t\tonParameterDialogClosed: this.parameters.events?.onParameterDialogClosed\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tthis.parameters.parameterValues,\n\t\t\t\t\tthis.parameters.entitySetName,\n\t\t\t\t\tthis.parameters.messageHandler\n\t\t\t\t);\n\t\t\t\tawait this.parameterDialog.createDialog();\n\t\t\t\tthis.parameterDialog.openDialog();\n\t\t\t}\n\t\t\treturn this.parameterDialog.waitForParametersValues();\n\t\t}\n\t\t// If the dialog is skipped, we need to set the default values for the parameters\n\t\tif (this.parameters.parameterValues) {\n\t\t\tfor (const i in this.actionParameters) {\n\t\t\t\tthis.parametersValues[this.actionParameters[i].name] = this.parameters.parameterValues?.find(\n\t\t\t\t\t(element) => element.name === this.actionParameters[i].name\n\t\t\t\t)?.value;\n\t\t\t}\n\t\t} else {\n\t\t\tlet actionParameter;\n\t\t\tfor (const i in this.actionParameters) {\n\t\t\t\tactionParameter = this.actionParameters[i];\n\t\t\t\tthis.parametersValues[actionParameter.name] = await this.convertValue(\n\t\t\t\t\tactionParameter,\n\t\t\t\t\tthis.startupParameters[actionParameter.name]?.[0] ?? actionParameter.annotations?.UI?.ParameterDefaultValue?.valueOf()\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn this.parametersValues;\n\t}\n\n\t/**\n\t *  Are values provided for the mandatory parameters.\n\t * @returns True if the information is provided, otherwise false\n\t */\n\tprivate isMandatoryValuesProvided(): boolean {\n\t\tconst hiddenAnnotationSetOnAllActions = this.actionParameters.every(\n\t\t\t(parameter) => parameter?.annotations?.UI?.Hidden?.valueOf() === true\n\t\t);\n\n\t\tif (this.parameters.parameterValues?.length && !hiddenAnnotationSetOnAllActions) {\n\t\t\t// If showDialog is false but there are parameters from the invokeAction call which need to be checked on existence\n\t\t\tfor (const actionParameter of this.actionParameters) {\n\t\t\t\tif (\n\t\t\t\t\tactionParameter.name !== \"ResultIsActiveEntity\" &&\n\t\t\t\t\t!this.parameters.parameterValues?.find((element) => element.name === actionParameter.name)\n\t\t\t\t) {\n\t\t\t\t\t// At least for one parameter no value has been provided, so we can't skip the dialog\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.parameters.isCreateAction === true && Object.keys(this.startupParameters).length && !hiddenAnnotationSetOnAllActions) {\n\t\t\t// If parameters have been provided during application launch, we need to check if the set is complete\n\t\t\t// If not, the parameter dialog still needs to be shown.\n\t\t\tfor (const actionParameter of this.actionParameters) {\n\t\t\t\tif (!this.startupParameters[actionParameter.name]) {\n\t\t\t\t\t// At least for one parameter no value has been provided, so we can't skip the dialog\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.actionParameters.length && hiddenAnnotationSetOnAllActions) {\n\t\t\treturn this.actionParameters.every((parameter) => {\n\t\t\t\tconst fieldControl = parameter.annotations?.Common?.FieldControl;\n\t\t\t\tconst isMandatory = fieldControl?.toString() === \"Common.FieldControlType/Mandatory\";\n\n\t\t\t\t// Possible sources may be startupParameters, parameterValues, defaultValues per annotation (ParameterDefaultValue)\n\t\t\t\t// If none is found, return false\n\t\t\t\treturn (\n\t\t\t\t\t!isMandatory ||\n\t\t\t\t\tthis.startupParameters[parameter.name] ||\n\t\t\t\t\tthis.parameters.parameterValues?.find((parameterValue) => parameterValue.name === parameter.name) ||\n\t\t\t\t\tparameter?.annotations?.UI?.ParameterDefaultValue?.valueOf()\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t *  Formats the value provided with a non relevant type.\n\t * @param parameter The parameter\n\t * @param value The value to convert\n\t * @returns The converted value\n\t */\n\tprivate async convertValue(\n\t\tparameter: EdmActionParameter,\n\t\tvalue?: BaseTypeParameter | null\n\t): Promise<BaseTypeParameter | undefined | null> {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn value;\n\t\t}\n\t\tconst TypeMap = (await import(\"sap/ui/mdc/odata/v4/TypeMap\")).default;\n\t\tconst parameterType = TypeMap.getBaseType(parameter.type);\n\t\tconst typeInstance = TypeMap.getDataTypeInstance(parameterType);\n\t\treturn typeInstance.parseValue(value, \"string\");\n\t}\n}\n"],"mappings":"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","ignoreList":[]}