{"version":3,"file":"OperationMessage.js","names":["InvocationGrouping","FELibrary","OperationMessage","parameters","this","isParameterDialogOpened","is412toBeManaged","contexts","length","binding","getBinding","isA","table","ElementRegistry","filter","element","getRowBinding","_exports","_proto","prototype","onParameterDialogClosed","onParameterDialogOpened","onStrictHandling","reactToOperations","async","operationResults","disableNotification","events","onMessageCollected","isOperationDialogOpen","messageHandler","showMessages","messagePageNavigationCallback","onMessagePageNavigationCallback","onBeforeShowMessage","messages","showMessageParametersIn","actionParameterShowMessageCallback","some","res","status","aSelectedContexts","sActionName","label","entitySet","entitySetName","boundActionName","actionHelper","getActionName","action","control","clearStrictWarningMessages","isErrorIntoParameterDialog","getParameterDialogMessages","actionName","actionParameters","getActionParameters","messageHandling","getMessages","message","getTargets","includes","actionParam","name","isActionSuccessful","filterErrorOrWarning","getType","messagesInModel","Messaging","getMessageModel","getData","nonErrorMessageExistsInDialog","findIndex","nonErrorMessageExistsInModel","isChangeSet","invocationGrouping","ChangeSet","parameterDialogMessages","errorTargetsInAPD","showMessageBox","showMessageDialog","hasTransitionErrorsOrWarnings","singleError","unshift","getGenericMsgForChangeSet","concat","messagesToShow","containsBoundTransition","showMessageInDialog","filterApdAndContextMessages","filteredMessages","fnGetMessageSubtitle","setMessageSubtitle","bind","undefined","showChangeSetErrorDialog","containsBoundTransistion","resourceBundle","Library","getResourceBundleFor","isEditable","CommonUtils","getIsEditable","singleMessage","getText","Message","type","MessageType","Error","target","persistent","code","technicalDetails","fe","changeSetPreTextForSingleError","description","unboundMessages","removeContextMessagesfromModel","removeMessagesForActionParameterDialog"],"sources":["./OperationMessage.ts"],"sourcesContent":["import type { Action as EdmAction } from \"@sap-ux/vocabularies-types\";\nimport FELibrary from \"sap/fe/core/library\";\nimport ElementRegistry from \"sap/ui/core/ElementRegistry\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport CommonUtils from \"../../../CommonUtils\";\nimport type MessageHandler from \"../../MessageHandler\";\nimport messageHandling, { type MessageWithHeader, type ShowMessageParameters } from \"../../messageHandler/messageHandling\";\nimport type { OperationResult } from \"./ODataOperation\";\nimport actionHelper from \"./actionHelper\";\nconst InvocationGrouping = FELibrary.InvocationGrouping;\n\n/**\n * Manages the messages for an operation. The messages are displayed in a message box or dialog at\n * the end of the operation (after the strict handling workflow if it is configured). An instance\n * of this class is created for each fiori element operation (multi or single context) and not each\n * oData operation.\n */\n\nexport default class OperationMessage {\n\tprivate readonly table: Table | undefined;\n\n\tprivate isParameterDialogOpened = false;\n\n\tprivate is412toBeManaged = false;\n\n\t/**\n\t *  Creates an instance of OperationMessage.\n\t * This class is responsible for managing messages related to an operation.\n\t * @param parameters The parameters for the operation message.\n\t * @param parameters.messageHandler The message handler to use for displaying messages.\n\t * @param parameters.action The action to be performed.\n\t * @param parameters.contexts The contexts for the operation.\n\t * @param parameters.label The label for the operation.\n\t * @param parameters.invocationGrouping The invocation grouping for the operation.\n\t * @param parameters.entitySetName The name of the entity set for the operation.\n\t * @param parameters.events The events for the operation.\n\t * @param parameters.events.onMessageCollected The function to call when the messages are collected.\n\t * @param parameters.events.onMessagePageNavigationCallback The function to call before page navigation is triggered\n\t * @param parameters.disableNotification If true, the messages will not be displayed in a message box or dialog.\n\t */\n\tconstructor(\n\t\tprivate readonly parameters: {\n\t\t\tmessageHandler: MessageHandler;\n\t\t\taction: EdmAction;\n\t\t\tcontexts: Context[];\n\t\t\tlabel?: string;\n\t\t\tinvocationGrouping?: string;\n\t\t\tentitySetName?: string;\n\t\t\tevents?: {\n\t\t\t\tonMessageCollected?: () => void;\n\t\t\t\tonMessagePageNavigationCallback?: () => void;\n\t\t\t};\n\t\t\tdisableNotification?: boolean;\n\t\t}\n\t) {\n\t\tif (this.parameters.contexts.length) {\n\t\t\tconst binding = this.parameters.contexts[0].getBinding();\n\t\t\tif (binding.isA(\"sap.ui.model.odata.v4.ODataListBinding\")) {\n\t\t\t\tthis.table = ElementRegistry.filter(\n\t\t\t\t\t(element) => element.isA<Table>(\"sap.ui.mdc.Table\") && element.getRowBinding() === binding\n\t\t\t\t)[0] as Table | undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Handler to be called when the action parameter dialog is closed.\n\t */\n\tonParameterDialogClosed(): void {\n\t\tthis.isParameterDialogOpened = false;\n\t}\n\n\t/**\n\t * Handler to be called when the action parameter dialog is opened.\n\t */\n\tonParameterDialogOpened(): void {\n\t\tthis.isParameterDialogOpened = true;\n\t}\n\n\t/**\n\t * Handler to be called when the strict handling of an oData operation is triggered.\n\t */\n\tonStrictHandling(): void {\n\t\tthis.is412toBeManaged = true;\n\t}\n\n\t/**\n\t * Reacts to the results of the operations by showing the messages in a message box or dialog.\n\t * @param operationResults The results of the operations.\n\t */\n\tpublic async reactToOperations(operationResults: PromiseSettledResult<OperationResult>[]): Promise<void> {\n\t\tif (this.parameters.disableNotification === true) {\n\t\t\tthis.parameters.events?.onMessageCollected?.();\n\t\t\treturn;\n\t\t}\n\t\tconst isOperationDialogOpen = this.isParameterDialogOpened;\n\t\tawait this.parameters.messageHandler.showMessages({\n\t\t\tisOperationDialogOpen: isOperationDialogOpen,\n\t\t\tmessagePageNavigationCallback: () => {\n\t\t\t\tthis.parameters.events?.onMessagePageNavigationCallback?.();\n\t\t\t},\n\t\t\tonBeforeShowMessage: (messages: Message[], showMessageParametersIn: ShowMessageParameters) => {\n\t\t\t\treturn this.actionParameterShowMessageCallback(\n\t\t\t\t\tmessages,\n\t\t\t\t\tshowMessageParametersIn,\n\t\t\t\t\t!operationResults.some((res) => res.status === \"rejected\")\n\t\t\t\t);\n\t\t\t},\n\t\t\taSelectedContexts: this.parameters.contexts,\n\t\t\tsActionName: this.parameters.label,\n\t\t\tentitySet: this.parameters.entitySetName,\n\t\t\tboundActionName: actionHelper.getActionName(this.parameters.action),\n\t\t\tcontrol: this.table\n\t\t});\n\t\tthis.parameters.messageHandler.clearStrictWarningMessages();\n\t}\n\n\t/**\n\t * Indicates whether there is an error in the parameter dialog.\n\t * @returns True if there is an error in the parameter dialog, otherwise false\n\t */\n\tpublic isErrorIntoParameterDialog(): boolean {\n\t\treturn !!this.getParameterDialogMessages().length;\n\t}\n\n\t/**\n\t * Gets the messages related to the action parameter dialog.\n\t * @param messages The messages to filter. If not provided, the messages are fetched from the message handling.\n\t * @returns The messages related to the action parameter dialog.\n\t */\n\tprivate getParameterDialogMessages(messages?: Message[]): Message[] {\n\t\tconst actionName = actionHelper.getActionName(this.parameters.action);\n\t\tconst actionParameters = actionHelper.getActionParameters(this.parameters.action);\n\t\treturn (messages ?? messageHandling.getMessages(true, true)).filter(\n\t\t\t(message) =>\n\t\t\t\tmessage.getTargets()?.[0].includes(actionName) &&\n\t\t\t\tactionParameters.some((actionParam) => message.getTargets()?.[0].includes(actionParam.name))\n\t\t);\n\t}\n\n\t/**\n\t * Callback function to show messages in a message box or dialog.\n\t * @param messages The messages\n\t * @param showMessageParametersIn The parameters for showing the message\n\t * @param isActionSuccessful Indicates whether the action was successful\n\t * @returns  The parameters for showing the message\n\t */\n\tprivate actionParameterShowMessageCallback(\n\t\tmessages: Message[],\n\t\tshowMessageParametersIn: ShowMessageParameters,\n\t\tisActionSuccessful: boolean\n\t): ShowMessageParameters {\n\t\tconst filterErrorOrWarning = (message: Message): boolean => [\"Error\", \"Warning\"].includes(message.getType());\n\n\t\tconst messagesInModel = Messaging.getMessageModel().getData();\n\t\tconst nonErrorMessageExistsInDialog = messages.findIndex(filterErrorOrWarning);\n\t\tconst nonErrorMessageExistsInModel = messagesInModel.findIndex(filterErrorOrWarning);\n\n\t\tconst isChangeSet = this.parameters.invocationGrouping === InvocationGrouping.ChangeSet;\n\n\t\tconst parameterDialogMessages = this.getParameterDialogMessages(messages);\n\t\tconst errorTargetsInAPD = !!parameterDialogMessages.length;\n\n\t\tlet showMessageBox = showMessageParametersIn.showMessageBox,\n\t\t\tshowMessageDialog = showMessageParametersIn.showMessageDialog;\n\n\t\tif (isChangeSet) {\n\t\t\tif (\n\t\t\t\t(this.is412toBeManaged || messageHandling.hasTransitionErrorsOrWarnings()) &&\n\t\t\t\t!errorTargetsInAPD &&\n\t\t\t\t!isActionSuccessful &&\n\t\t\t\tnonErrorMessageExistsInDialog !== 1 &&\n\t\t\t\tnonErrorMessageExistsInModel !== -1 && // this check is currently under discussion (may be a typo in the original code)\n\t\t\t\tthis.parameters.contexts.length > 1\n\t\t\t) {\n\t\t\t\tconst singleError = messagesInModel.length === 1;\n\t\t\t\tshowMessageBox = singleError || messages.length === 1;\n\t\t\t\tshowMessageDialog = !showMessageBox;\n\t\t\t\tmessages.unshift(this.getGenericMsgForChangeSet(singleError));\n\t\t\t}\n\t\t} else if (!this.isParameterDialogOpened && errorTargetsInAPD) {\n\t\t\t// If APD is not open and there are messages related to APD, then show in the message dialog. since the parameter dialog\n\t\t\t// is closed on isolated mode\n\t\t\tshowMessageDialog = true;\n\t\t\tmessages = messages.concat(parameterDialogMessages);\n\t\t}\n\n\t\tthis.parameters.events?.onMessageCollected?.();\n\t\tconst { messagesToShow, containsBoundTransition, showMessageInDialog } = this.filterApdAndContextMessages(\n\t\t\tmessages,\n\t\t\terrorTargetsInAPD\n\t\t);\n\t\treturn {\n\t\t\tshowMessageBox: showMessageBox,\n\t\t\tshowMessageDialog: showMessageInDialog ?? showMessageDialog,\n\t\t\tfilteredMessages: messagesToShow,\n\t\t\tfnGetMessageSubtitle: this.table\n\t\t\t\t? messageHandling.setMessageSubtitle.bind({}, this.table, this.parameters.contexts)\n\t\t\t\t: undefined,\n\t\t\tshowChangeSetErrorDialog: isChangeSet,\n\t\t\tcontainsBoundTransistion: containsBoundTransition\n\t\t};\n\t}\n\n\t/**\n\t *  Gets a generic message for a single error in a change set.\n\t * @param singleError Indicates whether there is a single error.\n\t * @returns The generic message.\n\t */\n\tprivate getGenericMsgForChangeSet(singleError: boolean): MessageWithHeader {\n\t\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\tconst isEditable = (this.table && CommonUtils.getIsEditable(this.table)) ?? false;\n\t\tconst singleMessage = resourceBundle.getText(`C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT${isEditable ? \"_EDIT\" : \"\"}`);\n\t\treturn singleError\n\t\t\t? new Message({\n\t\t\t\t\tmessage: singleMessage,\n\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\ttarget: \"\",\n\t\t\t\t\tpersistent: true,\n\t\t\t\t\tcode: \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\",\n\t\t\t\t\ttechnicalDetails: {\n\t\t\t\t\t\tfe: {\n\t\t\t\t\t\t\tchangeSetPreTextForSingleError: singleMessage\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t  })\n\t\t\t: new Message({\n\t\t\t\t\tmessage: resourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_TEXT\"),\n\t\t\t\t\ttype: MessageType.Error,\n\t\t\t\t\ttarget: \"\",\n\t\t\t\t\tpersistent: true,\n\t\t\t\t\tcode: \"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED\",\n\t\t\t\t\tdescription: resourceBundle.getText(\"C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_DETAIL_TEXT\")\n\t\t\t  });\n\t}\n\n\t/**\n\t * Filters an array of messages based on various conditions and returns an object containing the filtered messages and other properties.\n\t * @param messages The messages to filter.\n\t * @param errorTargetsInAPD Indicates whether error targets are in APD.\n\t * @returns An object containing a boolean indicating whether the result contains a bound transition, an array of messages to show, and a boolean indicating whether to show the message in a dialog.\n\t */\n\tprivate filterApdAndContextMessages(\n\t\tmessages: Message[],\n\t\terrorTargetsInAPD: boolean\n\t): { containsBoundTransition: boolean | undefined; messagesToShow: Message[]; showMessageInDialog?: boolean } {\n\t\tconst unboundMessages = messages.filter((message: Message) => {\n\t\t\treturn message.getTargets()?.[0] === \"\";\n\t\t});\n\t\tconst isOperationDialogOpen = this.isParameterDialogOpened;\n\t\tlet showMessageDialog = true;\n\t\tif (isOperationDialogOpen && errorTargetsInAPD) {\n\t\t\t/* When APD is open, we need to remove the messages which are related to the object page context */\n\t\t\tmessageHandling.removeContextMessagesfromModel(messages, this.parameters.contexts);\n\t\t}\n\t\t// Filter out messages which are not related to the action parameter dialog in the edit mode and display mode\n\t\tlet containsBoundTransition;\n\t\tif (!(this.table && CommonUtils.getIsEditable(this.table))) {\n\t\t\tif (isOperationDialogOpen && errorTargetsInAPD) {\n\t\t\t\tif (unboundMessages.length === 0) {\n\t\t\t\t\tcontainsBoundTransition = false;\n\t\t\t\t\tshowMessageDialog = false;\n\t\t\t\t}\n\t\t\t\tmessages = messageHandling.removeMessagesForActionParameterDialog(messages);\n\t\t\t}\n\t\t} else {\n\t\t\tif (unboundMessages.length === 0) {\n\t\t\t\tcontainsBoundTransition = false;\n\t\t\t}\n\t\t\tmessages = messageHandling.removeMessagesForActionParameterDialog(messages);\n\t\t}\n\t\treturn {\n\t\t\tmessagesToShow: messages,\n\t\t\tcontainsBoundTransition: containsBoundTransition,\n\t\t\tshowMessageInDialog: showMessageDialog\n\t\t};\n\t}\n}\n"],"mappings":"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","ignoreList":[]}