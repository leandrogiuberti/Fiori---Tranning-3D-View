{"version":3,"file":"MessageHandler.js","names":["MessageHandler","_dec","defineUI5Class","_dec2","methodOverride","_dec3","privateExtension","_dec4","extensible","OverrideExecution","Instead","_dec5","_dec6","_dec7","publicExtension","_dec8","_dec9","_dec10","finalExtension","_dec11","_dec12","_dec13","_class","_class2","_ControllerExtension","_this","call","this","strictWarningMessages","holdKeys","holdMsgsToShow","_inheritsLoose","_proto","prototype","onInit","internalModel","base","getAppComponent","getModel","setProperty","undefined","Promise","resolve","addWarningMessagesToMessageHandler","aMessages","concat","isStrictWarningMessage","oMessage","find","message","getCode","getMessage","getType","getDescriptionUrl","deepEqual","getTargets","getPersistent","clearStrictWarningMessages","filterErrorMessages","messages","filter","MessageType","Error","getShowBoundMessagesInMessageDialog","filterContextBoundMessages","transitionMessages","context","beforeShowMessageButton","async","_messageDetails","registerToHoldMessages","key","uniqueKey","uid","includes","push","resetHoldKeys","showMessageDialog","mParameters","getProperty","messagesInModel","Messaging","getMessageModel","getData","duplicateWarningMessage","removeMessages","customMessages","oOPInternalBindingContext","getView","getBindingContext","viewType","getViewData","converterType","isOperationDialogOpen","bShowBoundMessages","oBindingContext","reject","setTimeout","processAndShowMessages","bind","parameters","bindingContext","showBoundTransitionMessages","success","failure","concurrentEditFlag","control","sActionName","onBeforeShowMessage","unHoldKey","forceShowUIElement","overrideUIDecision","showBoundStateMessages","newUIDecisions","messageHandling","getUIDecisions","getResourceModel","updateUIDecisions","removeHoldKey","getId","uiElementIsAvailable","then","showMessagesWithCondtions","arguments","length","showUIElement","checkToShowUIElement","ret","showMessagesInUI","err","Log","error","info","removeTransitionMessages","keepBoundMessage","keepUnboundMessage","sPathToBeRemoved","removeBoundTransitionMessages","removeUnboundTransitionMessages","_checkNavigationToErrorPage","aUnboundMessages","getMessages","bShowBoundTransitionMessages","aBoundTransitionMessages","aCustomMessages","bIsStickyEditMode","CommonUtils","isStickyEditMode","mMessagePageParameters","isDataReceivedError","title","description","navigateBackToOrigin","errorType","isInitialLoad503Error","oTechnicalDetails","getTechnicalDetails","httpStatus","_getHTTP503MessageParameters","technicalDetails","messagePageParameters","secondsBeforeRetry","retryAfter","_getSecondsBeforeRetryAfter","retryAfterMessage","getRetryAfterMessage","dRetryAfter","dCurrentDateTime","Date","iCurrentDateTimeInMilliSeconds","getTime","iRetryAfterDateTimeInMilliSeconds","iSecondsBeforeRetry","oldUIDecisions","allMessagesToShow","mergedUIDecision","messagesToShow","Array","from","Set","elements","uiElementToUse","contextNeedsEtagRefresh","containsBoundTransition","inKey","splice","indexOf","holdMessagesForControl","identifier","releaseHoldByControl","showMessages","messagePageNavigationCallback","handleShellBack","shellBack","oResourceBundle","Library","getResourceBundleFor","_routing","navigateToMessagePage","getText","catch","ControllerExtension","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sources":["./MessageHandler.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport uid from \"sap/base/util/uid\";\nimport { defineUI5Class, extensible, finalExtension, methodOverride, privateExtension, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type {\n\tMessageTechnicalDetails,\n\tMessageUIDecisions,\n\tShowMessageParameters,\n\tSupportedUIElement\n} from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport type Dialog from \"sap/m/Dialog\";\nimport type Control from \"sap/ui/core/Control\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type Context from \"sap/ui/model/Context\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport { getResourceModel } from \"../helpers/ResourceModelHelper\";\n\ntype ObjectWithConverterType = object & {\n\tconverterType: string;\n};\ntype NavigationToErrorPageParameter = {\n\tcustomMessages?: CustomMessage[];\n\tconcurrentEditFlag?: boolean;\n\tisDataReceivedError?: boolean;\n\ttitle?: string;\n\tdescription?: string;\n\tisInitialLoad503Error?: boolean;\n};\nexport type NavigationToErrorPageResult = {\n\ttitle?: string;\n\tdescription?: string;\n\terrorType?: string;\n\tnavigateBackToOrigin?: boolean;\n\thandleShellBack?: boolean;\n};\nexport type CustomMessage = {\n\tcode: string;\n\ttext: string;\n\tpersistent: boolean;\n\ttype: MessageType;\n};\nexport type ShowMessageDialogParameter = {\n\tcustomMessages?: CustomMessage[];\n\tisOperationDialogOpen?: boolean;\n\tcontext?: Context;\n\tconcurrentEditFlag?: boolean;\n\tcontrol?: Control;\n\tsActionName?: string;\n\taSelectedContexts?: Context | Context[] | null;\n\tonBeforeShowMessage?: (messages: Message[], showMessageParameters: ShowMessageParameters) => ShowMessageParameters;\n\tunHoldKey?: string;\n\toverrideUIDecision?: boolean;\n\tshowBoundStateMessages?: boolean;\n\tboundActionName?: string;\n\tentitySet?: string;\n};\n\nexport type ShowMessagesParameters = ShowMessageDialogParameter & {\n\tmessagePageNavigationCallback?: Function;\n\tshellBack?: Function | boolean;\n\tisDataReceivedError?: boolean;\n\tisInitialLoad503Error?: boolean;\n\ttitle?: string;\n\tdescription?: string;\n};\n/**\n *\n * Defines the message detail relevant for the MessageButton building block to display a popover.\n * @public\n */\nexport type MessageDetail = {\n\tmessage: Message;\n\tgroupName?: string;\n\tactiveTitleHandler?: Function;\n};\n\n/**\n * A controller extension offering message handling.\n * @hideconstructor\n * @public\n * @since 1.90.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.MessageHandler\")\nclass MessageHandler extends ControllerExtension {\n\tprivate strictWarningMessages: Message[] = [];\n\n\tprotected base!: PageController;\n\n\tprotected holdKeys: string[] = [];\n\n\tprivate holdMsgsToShow = false;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t@methodOverride()\n\tonInit(): void {\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\tinternalModel.setProperty(\"/messageUIDecision\", undefined);\n\t\tinternalModel.setProperty(\"/messageUIElementIsAvailable\", Promise.resolve());\n\t}\n\n\t/**\n\t * Adds warning messages to the message handler.\n\t * @param aMessages The strict warning messages to be added\n\t */\n\taddWarningMessagesToMessageHandler(aMessages: Message[]): void {\n\t\tthis.strictWarningMessages = this.strictWarningMessages.concat(aMessages);\n\t}\n\n\t/**\n\t * Determines whether or not a message is a strict warning message that was received previously.\n\t * @param oMessage The message to be checked\n\t * @returns Whether or not the message is a strict warning message\n\t */\n\tisStrictWarningMessage(oMessage: Message): boolean {\n\t\treturn (\n\t\t\tthis.strictWarningMessages.find((message) => {\n\t\t\t\treturn (\n\t\t\t\t\tmessage.getCode() === oMessage.getCode() &&\n\t\t\t\t\tmessage.getMessage() === oMessage.getMessage() &&\n\t\t\t\t\tmessage.getType() === oMessage.getType() &&\n\t\t\t\t\tmessage.getDescriptionUrl() === oMessage.getDescriptionUrl() &&\n\t\t\t\t\tdeepEqual(message.getTargets(), oMessage.getTargets()) &&\n\t\t\t\t\tmessage.getPersistent() === oMessage.getPersistent()\n\t\t\t\t);\n\t\t\t}) !== undefined\n\t\t);\n\t}\n\n\t/**\n\t * Clears all strict warning messages from the message handler.\n\t */\n\tclearStrictWarningMessages(): void {\n\t\tthis.strictWarningMessages = [];\n\t}\n\n\tfilterErrorMessages(messages: Message[]): Message[] {\n\t\treturn messages.filter((message) => message.getType() === MessageType.Error);\n\t}\n\n\t/**\n\t * Determines whether or not bound messages are shown in the message dialog.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.Instead}.\n\t *\n\t * If the bound messages are shown to the user with a different control like the (TODO:Link) MessageButton\n\t * this method has to be overridden.\n\t * @returns Determines whether or not bound messages are shown in the message dialog.\n\t */\n\t@privateExtension()\n\t@extensible(OverrideExecution.Instead)\n\tgetShowBoundMessagesInMessageDialog(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determines whether or not bound messages should be removed from the dialog.\n\t *\n\t * For the object page if the bound messages are shown in the message strip, then remove that from the dialog to avoid duplicate messages.\n\t *\n\t * Only remove the messages if more than one message is present in the message model.\n\t * @param transitionMessages The messages that are shown in the message dialog.\n\t * @param context The context of the message dialog.\n\t * @returns Returns the bound messages which should be shown in the message dialog.\n\t */\n\t@privateExtension()\n\t@extensible(OverrideExecution.Instead)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tfilterContextBoundMessages(transitionMessages: Message[], context: Context): Message[] {\n\t\treturn transitionMessages;\n\t}\n\n\t/**\n\t * Allows consumer of a message button BB to decide which bound messages should be shown and how.\n\t *\n\t * This hook is called when the message button BB detects a change in the message model.\n\t * The hooks allows to define behaviour for messages in the message button BB.\n\t *\n\t * Consumers will be able to do the following with this hook.\n\t *\n\t * 1. Filter out messages so that they are not shown on the message button.\n\t * 2. group the messages based on their UI.\n\t * 3. provide a presser handler incase the message should show as a link.\n\t * @param _messageDetails Object containing the details related to the message.\n\t * @param _messageDetails.message The message from the message model.Ideally, it must not be modified directly.\n\t * @param _messageDetails.groupName The group name associated with the current message.\n\t * @param _messageDetails.activeTitleHandler Function to handle the click event on a message in the MessageButton building block.\n\t * @returns A promise that must be returned by the overridden method.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(\"AfterAsync\")\n\tasync beforeShowMessageButton(_messageDetails: MessageDetail[]): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Register to hold messages unitl a process is complete.\n\t *\n\t * The caller can register to hold the message handler from showing messages until the caller's processes are completed.\n\t * On registering the caller is returned a unique key.\n\t * The messages will not be shown in the UI with subsequent 'showMessageDialog()' calls.\n\t * The caller needs to use 'showMessageDialog(<key>)' at the end of all his processes to show the messages in the UI.\n\t *\n\t * If multiple owners register simultaneously, then messages are shown in the UI only after 'showMessageDialog(<respective_key>)' is called by all the processes' owners.\n\t * @param key Unique identifier to use, If not provided, a UID would be created and used to register.\n\t * @returns Unique Key to be used by the caller to show messages at a later point of time.\n\t */\n\tregisterToHoldMessages(key?: string): string {\n\t\tconst uniqueKey = key ?? uid();\n\t\tif (!this.holdKeys.includes(uniqueKey)) {\n\t\t\tthis.holdKeys.push(uniqueKey);\n\t\t}\n\t\treturn uniqueKey;\n\t}\n\n\t/**\n\t * Clear all existing held keys.\n\t */\n\tresetHoldKeys(): void {\n\t\tthis.holdKeys = [];\n\t}\n\n\t/**\n\t * Shows a message dialog with transition messages if there are any.\n\t * The message dialog is shown as a modal dialog. Once the user confirms the dialog, all transition messages\n\t * are removed from the message model. If there is more than one message, a list of messages is shown. The user\n\t * can filter on message types and can display details as well as the long text. If there is one message,\n\t * the dialog immediately shows the details of the message. If there is just one success message, a message\n\t * toast is shown instead.\n\t * @param mParameters PRIVATE\n\t * @returns A promise that is resolved once the user closes the dialog. If there are no messages\n\t * to be shown, the promise is resolved immediately\n\t * @public\n\t * @since 1.90.0\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync showMessageDialog(mParameters?: ShowMessageDialogParameter): Promise<void> {\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\t// remove strict warning messages from the message model before showing the message dialog\n\t\tawait internalModel.getProperty(\"/messageUIElementIsAvailable\");\n\n\t\tconst messagesInModel = Messaging.getMessageModel().getData();\n\t\tconst duplicateWarningMessage = messagesInModel.filter((message: Message) => {\n\t\t\treturn this.isStrictWarningMessage(message);\n\t\t});\n\t\tMessaging.removeMessages(duplicateWarningMessage);\n\n\t\tconst customMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : undefined,\n\t\t\toOPInternalBindingContext = this.base.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\tconst viewType = (this.base.getView().getViewData() as ObjectWithConverterType).converterType;\n\t\t// set isActionParameterDialog open so that it can be used in the controller extension to decide whether message dialog should open or not\n\t\tif (mParameters && mParameters.isOperationDialogOpen && oOPInternalBindingContext) {\n\t\t\toOPInternalBindingContext.setProperty(\"isOperationDialogOpen\", true);\n\t\t}\n\t\tconst bShowBoundMessages = this.getShowBoundMessagesInMessageDialog();\n\t\tconst oBindingContext = (\n\t\t\tmParameters && mParameters.context ? mParameters.context : this.getView().getBindingContext()\n\t\t) as ODataV4Context;\n\t\t//const bEtagMessage = mParameters && mParameters.bHasEtagMessage;\n\t\t// reset  isOperationDialogOpen\n\t\t// cannot do this operations.js since it is not aware of the view\n\t\tif (oOPInternalBindingContext) {\n\t\t\toOPInternalBindingContext.setProperty(\"isOperationDialogOpen\", false);\n\t\t}\n\t\treturn new Promise<void>(\n\t\t\tfunction (this: MessageHandler, resolve: () => void, reject: () => void): void {\n\t\t\t\t// we have to set a timeout to be able to access the most recent messages\n\t\t\t\tsetTimeout(\n\t\t\t\t\tfunction (this: MessageHandler): void {\n\t\t\t\t\t\t// TODO: great API - will be changed later\n\t\t\t\t\t\tthis.processAndShowMessages(\n\t\t\t\t\t\t\tmParameters ?? {},\n\t\t\t\t\t\t\toBindingContext,\n\t\t\t\t\t\t\tbShowBoundMessages,\n\t\t\t\t\t\t\tcustomMessages ?? [],\n\t\t\t\t\t\t\tresolve,\n\t\t\t\t\t\t\treject,\n\t\t\t\t\t\t\tviewType\n\t\t\t\t\t\t);\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}.bind(this)\n\t\t);\n\t}\n\n\t/**\n\t * Process the messages and show them when expected.\n\t *\n\t * We filter the messages to show and hold them until all registered processes call showMessageDialog with their respective held keys.\n\t * @param parameters Parameters to show message dialog.\n\t * @param bindingContext Bind context of the page.\n\t * @param showBoundTransitionMessages Should bound messages be shown.\n\t * @param customMessages Custom messages to add.\n\t * @param success Success callback.\n\t * @param failure Failure callback.\n\t * @param viewType View type, list report or object page.\n\t */\n\tprocessAndShowMessages(\n\t\tparameters: ShowMessageDialogParameter,\n\t\tbindingContext: ODataV4Context,\n\t\tshowBoundTransitionMessages: boolean,\n\t\tcustomMessages: CustomMessage[],\n\t\tsuccess: () => void,\n\t\tfailure: () => void,\n\t\tviewType?: string\n\t): void {\n\t\tconst {\n\t\t\tconcurrentEditFlag,\n\t\t\tcontrol,\n\t\t\tsActionName,\n\t\t\tonBeforeShowMessage,\n\t\t\tunHoldKey,\n\t\t\tisOperationDialogOpen: forceShowUIElement = false,\n\t\t\toverrideUIDecision,\n\t\t\tshowBoundStateMessages\n\t\t} = parameters;\n\t\tthis.holdMsgsToShow = true;\n\n\t\t// Create a UI decision.\n\t\tconst newUIDecisions = messageHandling.getUIDecisions(\n\t\t\tcustomMessages,\n\t\t\tbindingContext,\n\t\t\tshowBoundTransitionMessages,\n\t\t\tconcurrentEditFlag,\n\t\t\tcontrol,\n\t\t\tsActionName,\n\t\t\tonBeforeShowMessage,\n\t\t\tviewType,\n\t\t\tshowBoundStateMessages,\n\t\t\tparameters,\n\t\t\tgetResourceModel(this.getView()),\n\t\t\tthis\n\t\t);\n\t\tthis.updateUIDecisions(newUIDecisions, overrideUIDecision);\n\t\tthis.removeHoldKey(unHoldKey ?? control?.getId());\n\t\tconst uiElementIsAvailable = this.base.getAppComponent().getModel(\"internal\")?.getProperty(\"/messageUIElementIsAvailable\");\n\t\t(this.base.getAppComponent().getModel(\"internal\") as JSONModel)?.setProperty(\n\t\t\t\"/messageUIElementIsAvailable\",\n\t\t\tuiElementIsAvailable.then(\n\t\t\t\tasync function (this: MessageHandler): Promise<void> {\n\t\t\t\t\treturn this.showMessagesWithCondtions(forceShowUIElement, success, failure);\n\t\t\t\t}.bind(this)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Show Messages in the UI based on conditions.\n\t * @param forceShowUIElement\n\t * @param success\n\t * @param failure\n\t */\n\tasync showMessagesWithCondtions(\n\t\tforceShowUIElement = false,\n\t\tsuccess?: (ret?: unknown) => void,\n\t\tfailure?: (err?: unknown) => void\n\t): Promise<void> {\n\t\tconst showUIElement = forceShowUIElement || this.checkToShowUIElement();\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\tif (showUIElement && internalModel.getProperty(\"/messageUIDecision\")) {\n\t\t\t// Show UI element for the present decision and clear the decision.\n\t\t\ttry {\n\t\t\t\tconst ret = await messageHandling.showMessagesInUI(internalModel.getProperty(\"/messageUIDecision\"));\n\t\t\t\tsuccess?.(ret);\n\t\t\t} catch (err: unknown) {\n\t\t\t\tLog.error(`FE : V4 : MessageHandler : Error on trying to show UI element: ${err}`);\n\t\t\t\tfailure?.(err);\n\t\t\t\tinternalModel.setProperty(\"/messageUIElementIsAvailable\", Promise.resolve());\n\t\t\t}\n\t\t\tinternalModel.setProperty(\"/messageUIDecision\", undefined);\n\t\t\tthis.clearStrictWarningMessages();\n\t\t\tthis.holdMsgsToShow = false;\n\t\t} else {\n\t\t\tLog.info(\"FE : V4 : MessageHandler : Holding messages until a registered process \");\n\t\t\tsuccess?.();\n\t\t}\n\t}\n\n\t/**\n\t * You can remove the existing transition message from the message model with this method.\n\t * With every user interaction that causes server communication (like clicking on an action, changing data),\n\t * this method removes the existing transition messages from the message model.\n\t * @param [keepBoundMessage] Checks if the bound transition messages are not to be removed\n\t * @param keepUnboundMessage\n\t * @param sPathToBeRemoved\n\t */\n\t@publicExtension()\n\tremoveTransitionMessages(keepBoundMessage?: boolean, keepUnboundMessage?: boolean, sPathToBeRemoved?: string): void {\n\t\tif (!keepBoundMessage) {\n\t\t\tmessageHandling.removeBoundTransitionMessages(sPathToBeRemoved);\n\t\t}\n\t\tif (!keepUnboundMessage) {\n\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t}\n\t}\n\n\t/**\n\t * Method that returns all the parameters needed to handle the navigation to the error page.\n\t * @param mParameters\n\t * @returns The parameters necessary for the navigation to the error page\n\t */\n\t_checkNavigationToErrorPage(mParameters?: NavigationToErrorPageParameter): NavigationToErrorPageResult | undefined {\n\t\tconst aUnboundMessages = messageHandling.getMessages();\n\t\tconst bShowBoundTransitionMessages = this.getShowBoundMessagesInMessageDialog();\n\t\tconst aBoundTransitionMessages = bShowBoundTransitionMessages ? messageHandling.getMessages(true, true) : [];\n\t\tconst aCustomMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : [];\n\t\tconst bIsStickyEditMode = CommonUtils.isStickyEditMode(this.base.getView());\n\t\tlet mMessagePageParameters: NavigationToErrorPageResult | undefined;\n\n\t\t// TODO: Stick mode check is okay as long as the controller extension is used with sap.fe.core and sap.fe.core.AppComponent.\n\t\t// It might be better to provide an extension to the consumer of the controller extension to provide this value.\n\n\t\t// The message page can only show 1 message today, so we navigate to it when :\n\t\t// 1. There are no bound transition messages to show,\n\t\t// 2. There are no custom messages to show, &\n\t\t// 3. There is exactly 1 unbound message in the message model with statusCode=503 and retry-After available\n\t\t// 4. retryAfter is greater than 120 seconds\n\t\t//\n\t\t// In Addition, navigating away from a sticky session will destroy the session so we do not navigate to message page for now.\n\t\t// TODO: check if navigation should be done in sticky edit mode.\n\t\tif (mParameters?.isDataReceivedError === true) {\n\t\t\tmMessagePageParameters = {\n\t\t\t\ttitle: mParameters.title,\n\t\t\t\tdescription: mParameters.description,\n\t\t\t\tnavigateBackToOrigin: true,\n\t\t\t\terrorType: \"PageNotFound\"\n\t\t\t};\n\t\t} else if (\n\t\t\t!bIsStickyEditMode &&\n\t\t\t!aBoundTransitionMessages.length &&\n\t\t\t!aCustomMessages.length &&\n\t\t\t(aUnboundMessages.length === 1 || mParameters?.isInitialLoad503Error === true)\n\t\t) {\n\t\t\tconst oMessage = aUnboundMessages[0];\n\t\t\tconst oTechnicalDetails = oMessage.getTechnicalDetails() as MessageTechnicalDetails | undefined;\n\t\t\tif (oTechnicalDetails?.httpStatus === 503) {\n\t\t\t\tmMessagePageParameters = this._getHTTP503MessageParameters(oMessage, oTechnicalDetails);\n\t\t\t}\n\t\t}\n\t\treturn mMessagePageParameters;\n\t}\n\n\t_getHTTP503MessageParameters(message: Message, technicalDetails: MessageTechnicalDetails): NavigationToErrorPageResult | undefined {\n\t\tlet messagePageParameters: NavigationToErrorPageResult | undefined;\n\n\t\tconst secondsBeforeRetry =\n\t\t\ttechnicalDetails.retryAfter !== undefined ? this._getSecondsBeforeRetryAfter(technicalDetails.retryAfter) : undefined;\n\n\t\tif (secondsBeforeRetry === undefined || secondsBeforeRetry > 120) {\n\t\t\tconst retryAfterMessage = messageHandling.getRetryAfterMessage(message);\n\t\t\tmessagePageParameters = {\n\t\t\t\tdescription: retryAfterMessage ? `${retryAfterMessage} ${message.getMessage()}` : message.getMessage(),\n\t\t\t\tnavigateBackToOrigin: true,\n\t\t\t\terrorType: \"UnableToLoad\"\n\t\t\t};\n\t\t}\n\n\t\treturn messagePageParameters;\n\t}\n\n\t_getSecondsBeforeRetryAfter(dRetryAfter: Date): number {\n\t\tconst dCurrentDateTime = new Date(),\n\t\t\tiCurrentDateTimeInMilliSeconds = dCurrentDateTime.getTime(),\n\t\t\tiRetryAfterDateTimeInMilliSeconds = dRetryAfter.getTime(),\n\t\t\tiSecondsBeforeRetry = (iRetryAfterDateTimeInMilliSeconds - iCurrentDateTimeInMilliSeconds) / 1000;\n\t\treturn iSecondsBeforeRetry;\n\t}\n\n\t/**\n\t * Update the existing UI decisions with the new ones.\n\t * @param newUIDecisions In comming UI decisions.\n\t * @param overrideUIDecision Override the existing UI decision to show messages with the new one.\n\t *\n\t * 'overrideUIDecision', This would be needed when there is a change in page context and the paramters to create the new UI decision are different.\n\t */\n\tupdateUIDecisions(newUIDecisions: MessageUIDecisions, overrideUIDecision = false): void {\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\tconst oldUIDecisions = internalModel.getProperty(\"/messageUIDecision\") as MessageUIDecisions;\n\t\tlet allMessagesToShow: Message[] = [];\n\t\tlet mergedUIDecision;\n\t\tif (oldUIDecisions && overrideUIDecision === false) {\n\t\t\tif (\n\t\t\t\toldUIDecisions.messagesToShow.length === 1 &&\n\t\t\t\tnewUIDecisions.messagesToShow.length === 1 &&\n\t\t\t\toldUIDecisions.messagesToShow[0].getCode() === \"C_COMMON_SUCCESS_MESSAGE\" &&\n\t\t\t\tnewUIDecisions.messagesToShow[0].getCode() === \"C_COMMON_SUCCESS_MESSAGE\"\n\t\t\t) {\n\t\t\t\t// Check if both are generic success messages, then we show only one message.\n\t\t\t\tallMessagesToShow = oldUIDecisions.messagesToShow;\n\t\t\t} else {\n\t\t\t\tallMessagesToShow = Array.from(new Set([...oldUIDecisions.messagesToShow, ...newUIDecisions.messagesToShow]));\n\t\t\t}\n\t\t\tconst elements = [oldUIDecisions.uiElementToUse, newUIDecisions.uiElementToUse];\n\t\t\t// Default we show dialog\n\t\t\tlet uiElementToUse: SupportedUIElement = allMessagesToShow.length > 0 ? \"Dialog\" : \"None\";\n\n\t\t\tif (allMessagesToShow.length === 1) {\n\t\t\t\t// Single message, we check for specific UI Element to use.\n\t\t\t\tif (elements.includes(\"Toast\")) {\n\t\t\t\t\tuiElementToUse = \"Toast\";\n\t\t\t\t} else if (elements.includes(\"Box\")) {\n\t\t\t\t\tuiElementToUse = \"Box\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmergedUIDecision = {\n\t\t\t\tmessagesToShow: allMessagesToShow,\n\t\t\t\tuiElementToUse,\n\t\t\t\tcontextNeedsEtagRefresh: oldUIDecisions.contextNeedsEtagRefresh || newUIDecisions.contextNeedsEtagRefresh,\n\t\t\t\tcontainsBoundTransition: oldUIDecisions.containsBoundTransition || newUIDecisions.containsBoundTransition\n\t\t\t};\n\t\t} else {\n\t\t\tmergedUIDecision = newUIDecisions;\n\t\t}\n\t\tinternalModel.setProperty(\"/messageUIDecision\", mergedUIDecision);\n\t}\n\n\t/**\n\t * Remove held key.\n\t * @param inKey Key to remove.\n\t */\n\tremoveHoldKey(inKey?: string): void {\n\t\tif (inKey && this.holdKeys.includes(inKey)) {\n\t\t\tthis.holdKeys.splice(this.holdKeys.indexOf(inKey), 1);\n\t\t}\n\t}\n\n\t/**\n\t * Check if UI Element with messages should be shown.\n\t * @returns Boolean\n\t */\n\tcheckToShowUIElement(): boolean {\n\t\treturn this.holdMsgsToShow && (this.holdKeys.length > 0 ? false : true);\n\t}\n\n\t/**\n\t * Hold messages for the control.\n\t * @param control\n\t */\n\tholdMessagesForControl(control: Control): void {\n\t\tconst identifier = control.getId();\n\t\tthis.registerToHoldMessages(identifier);\n\t}\n\n\t/**\n\t * Release message hold by a control.\n\t * @param control\n\t */\n\tasync releaseHoldByControl(control?: Control): Promise<void> {\n\t\tconst identifier = control?.getId();\n\t\tthis.removeHoldKey(identifier);\n\t\tconst uiElementIsAvailable = this.base.getAppComponent().getModel(\"internal\")?.getProperty(\"/messageUIElementIsAvailable\");\n\t\t(this.base.getAppComponent().getModel(\"internal\") as JSONModel)?.setProperty(\n\t\t\t\"/messageUIElementIsAvailable\",\n\t\t\tuiElementIsAvailable?.then(\n\t\t\t\tasync function (this: MessageHandler): Promise<void> {\n\t\t\t\t\treturn this.showMessagesWithCondtions();\n\t\t\t\t}.bind(this)\n\t\t\t)\n\t\t);\n\t\tawait this.base.getAppComponent().getModel(\"internal\")?.getProperty(\"/messageUIElementIsAvailable\");\n\t}\n\n\t/**\n\t * Shows a message page or a message dialog based on the messages in the message dialog.\n\t * @param [parameters]\n\t * @returns A promise that is resolved once the user closes the message dialog or when navigation to the message page is complete. If there are no messages\n\t * to be shown, the promise is resolved immediately\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync showMessages(parameters?: ShowMessagesParameters): Promise<void | boolean | Dialog> {\n\t\tconst messagePageParameters = this._checkNavigationToErrorPage(parameters);\n\n\t\tif (messagePageParameters) {\n\t\t\t// navigate to message page.\n\t\t\t// handler before page navigation is triggered, for example to close the action parameter dialog\n\t\t\tif (parameters?.messagePageNavigationCallback) {\n\t\t\t\tparameters.messagePageNavigationCallback();\n\t\t\t}\n\n\t\t\tmessagePageParameters.handleShellBack = !parameters?.shellBack;\n\t\t\tthis.removeTransitionMessages();\n\t\t\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\n\t\t\treturn new Promise<boolean>((resolve, reject) => {\n\t\t\t\t// we have to set a timeout to be able to access the most recent messages\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// clear all hold keys as we navigate to message page.\n\t\t\t\t\tthis.resetHoldKeys();\n\n\t\t\t\t\t// TODO: great API - will be changed later\n\t\t\t\t\tthis.base._routing\n\t\t\t\t\t\t.navigateToMessagePage(\n\t\t\t\t\t\t\tparameters?.isDataReceivedError === true\n\t\t\t\t\t\t\t\t? oResourceBundle.getText(\"C_COMMON_SAPFE_DATA_RECEIVED_ERROR\")\n\t\t\t\t\t\t\t\t: oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_TITLE\"),\n\t\t\t\t\t\t\tmessagePageParameters\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(resolve)\n\t\t\t\t\t\t.catch(reject);\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t} else {\n\t\t\t// navigate to message dialog\n\t\t\treturn this.showMessageDialog(parameters);\n\t\t}\n\t}\n}\nexport default MessageHandler;\n"],"mappings":"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","ignoreList":[]}