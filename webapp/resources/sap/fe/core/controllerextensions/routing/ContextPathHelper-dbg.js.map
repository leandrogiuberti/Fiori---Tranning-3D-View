{"version":3,"names":["isPathOnDraftRoot","path","metaModel","matches","exec","entitySetPath","getObject","_exports","createFilterFromPath","keys","unquoteAndDecode","value","indexOf","lastIndexOf","length","decodeURIComponent","substring","keyValues","split","finalKeys","finalKeyValues","includes","filter","singleKey","element","startsWith","filteringCaseSensitive","ModelHelper","isFilteringCaseSensitive","filters","keyPart","keyValue","Filter","operator","FilterOperator","EQ","value1","caseSensitive","mKeyValues","forEach","sKeyAssignment","aParts","failed","map","semanticKey","key","undefined","draftFilter","and","push","getContextFromKeys","model","getMetaModel","absolutePath","metaContext","getMetaContext","objectPath","getInvolvedDataModelObjects","technicalKeys","targetEntityType","property","name","listBinding","bindList","getPath","$select","join","$$groupId","contexts","requestContexts","getDraftOrActiveContext","context","getModel","resolvePath","pathToResolve","routingService","router","currentHashNoParams","getHashChanger","getHash","rootEntityName","semanticKeys","SemanticKeyHelper","getSemanticKeys","$PropertyPath","lastSemanticMapping","getLastSemanticMapping","semanticPath","technicalPath","setLastSemanticMapping"],"sourceRoot":".","sources":["ContextPathHelper.ts"],"sourcesContent":["import { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport SemanticKeyHelper from \"sap/fe/core/helpers/SemanticKeyHelper\";\nimport type { RoutingService } from \"sap/fe/core/services/RoutingServiceFactory\";\nimport type Router from \"sap/ui/core/routing/Router\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\n\n/**\n * Checks if a path refers to a draft root path.\n * @param path The path to test\n * @param metaModel The associated metadata model\n * @returns `true` if the path is a draft root path\n */\nexport function isPathOnDraftRoot(path: string, metaModel: ODataMetaModel): boolean {\n\t// Check if the path follows the pattern '/aaa(bbb)'\n\tconst matches = /^[/]?(\\w+)\\([^/]+\\)$/.exec(path);\n\tif (!matches) {\n\t\treturn false;\n\t}\n\n\t// Check if the entity set supports draft\n\tconst entitySetPath = `/${matches[1]}`;\n\treturn metaModel.getObject(`${entitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot`) ? true : false;\n}\n\n/**\n * Creates the filter to retrieve the draft or active instance from a path.\n * @param path The semantic or technical path\n * @param keys The semantic or technical keys for the path\n * @param metaModel The instance of the metamodel\n * @returns The filter\n */\nexport function createFilterFromPath(path: string, keys: string[], metaModel: ODataMetaModel): Filter | null {\n\tconst unquoteAndDecode = function (value: string): string {\n\t\tif (value.indexOf(\"'\") === 0 && value.lastIndexOf(\"'\") === value.length - 1) {\n\t\t\t// Remove the quotes from the value and decode special chars\n\t\t\tvalue = decodeURIComponent(value.substring(1, value.length - 1));\n\t\t}\n\t\treturn value;\n\t};\n\tconst keyValues = path.substring(path.indexOf(\"(\") + 1, path.length - 1).split(\",\");\n\n\tlet finalKeys = keys;\n\tlet finalKeyValues = keyValues;\n\t// If we have technical keys, IsActiveEntity will be present. We need to remove it as we're already adding them at the end.\n\tif (keys.includes(\"IsActiveEntity\")) {\n\t\tfinalKeys = keys.filter((singleKey) => !singleKey.includes(\"IsActiveEntity\"));\n\t\tfinalKeyValues = keyValues.filter((element) => !element.startsWith(\"IsActiveEntity\"));\n\t}\n\n\tif (finalKeys.length != finalKeyValues.length) {\n\t\treturn null;\n\t}\n\n\tconst filteringCaseSensitive = ModelHelper.isFilteringCaseSensitive(metaModel);\n\tlet filters: Filter[];\n\tif (finalKeys.length === 1) {\n\t\t// If this is a technical key, the equal is present because there's at least 2 parameters, a technical key and IsActiveEntity\n\t\tif (finalKeyValues[0].indexOf(\"=\") > 0) {\n\t\t\tconst keyPart = finalKeyValues[0].split(\"=\");\n\t\t\tfinalKeyValues[0] = keyPart[1];\n\t\t}\n\t\t// Take the first key value\n\t\tconst keyValue = unquoteAndDecode(finalKeyValues[0]);\n\t\tfilters = [\n\t\t\tnew Filter({\n\t\t\t\tpath: finalKeys[0],\n\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\tvalue1: keyValue,\n\t\t\t\tcaseSensitive: filteringCaseSensitive\n\t\t\t})\n\t\t];\n\t} else {\n\t\tconst mKeyValues: Record<string, unknown> = {};\n\t\t// Create a map of all key values\n\t\tfinalKeyValues.forEach(function (sKeyAssignment: string) {\n\t\t\tconst aParts = sKeyAssignment.split(\"=\"),\n\t\t\t\tkeyValue = unquoteAndDecode(aParts[1]);\n\n\t\t\tmKeyValues[aParts[0]] = keyValue;\n\t\t});\n\n\t\tlet failed = false;\n\t\tfilters = finalKeys.map(function (semanticKey) {\n\t\t\tconst key = semanticKey,\n\t\t\t\tvalue = mKeyValues[key];\n\n\t\t\tif (value !== undefined) {\n\t\t\t\treturn new Filter({\n\t\t\t\t\tpath: key,\n\t\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\t\tvalue1: value,\n\t\t\t\t\tcaseSensitive: filteringCaseSensitive\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tfailed = true;\n\t\t\t\treturn new Filter({\n\t\t\t\t\tpath: \"XX\"\n\t\t\t\t}); // will be ignored anyway since we return after\n\t\t\t}\n\t\t});\n\n\t\tif (failed) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// Add a draft filter to make sure we take the draft entity if there is one\n\t// Or the active entity otherwise\n\tconst draftFilter = new Filter({\n\t\tfilters: [new Filter(\"IsActiveEntity\", \"EQ\", false), new Filter(\"SiblingEntity/IsActiveEntity\", \"EQ\", null)],\n\t\tand: false\n\t});\n\tfilters.push(draftFilter);\n\n\treturn new Filter(filters, true);\n}\n\n/**\n * Loads a context from a list of keys (semantic or technical).\n * @param keys The keys\n * @param keyValues The key values in a string, e.g. /entity(aa=xx,bb=xx,...)\n * @param model\n * @returns The context (or null if none could be found)\n */\nasync function getContextFromKeys(keys: string[], keyValues: string, model: ODataModel): Promise<Context | null> {\n\tconst metaModel = model.getMetaModel();\n\tif (!keys || keys.length === 0) {\n\t\t// No semantic/technical keys\n\t\treturn null;\n\t}\n\n\t// Create a set of filters corresponding to all keys\n\tconst filter = createFilterFromPath(keyValues, keys, metaModel);\n\tif (filter === null) {\n\t\t// Couldn't interpret the path as a semantic one\n\t\treturn null;\n\t}\n\n\t// Retrieve the entity keys to add them in the $select query parameter\n\tconst absolutePath = keyValues.startsWith(\"/\") ? keyValues : `/${keyValues}`;\n\tconst metaContext = metaModel.getMetaContext(absolutePath);\n\tconst objectPath = getInvolvedDataModelObjects(metaContext);\n\tconst technicalKeys = objectPath.targetEntityType.keys.map((property) => property.name);\n\n\t// Load the corresponding object\n\tconst listBinding = model.bindList(metaContext.getPath(), undefined, undefined, filter, {\n\t\t$select: technicalKeys.join(\",\"),\n\t\t$$groupId: \"$auto.Heroes\"\n\t});\n\n\tconst contexts = await listBinding.requestContexts(0, 2);\n\tif (contexts.length) {\n\t\treturn contexts[0];\n\t} else {\n\t\t// No data could be loaded\n\t\treturn null;\n\t}\n}\n\n/**\n * Get the draft (if it exists) or the active context for a given draft-root context.\n * @param context\n * @returns The draft context if there's one, the active context otherwise\n */\nexport async function getDraftOrActiveContext(context: Context): Promise<Context | null> {\n\tconst model = context.getModel();\n\tconst metaModel = model.getMetaModel();\n\tconst objectPath = getInvolvedDataModelObjects(metaModel.getMetaContext(context.getPath()));\n\tconst keys = objectPath.targetEntityType.keys.map((property) => property.name);\n\n\treturn getContextFromKeys(keys, context.getPath(), model);\n}\n\n/**\n * Transforms a patch (semantic or not) into a technical path.\n * @param pathToResolve The path (semantic or not)\n * @param model\n * @param routingService\n * @param router\n * @returns The technical path corresponding to the pathToResolve\n */\nexport async function resolvePath(\n\tpathToResolve: string,\n\tmodel: ODataModel,\n\troutingService: RoutingService,\n\trouter: Router\n): Promise<string> {\n\tconst metaModel = model.getMetaModel();\n\tlet currentHashNoParams = router.getHashChanger().getHash().split(\"?\")[0];\n\tif (currentHashNoParams?.lastIndexOf(\"/\") === currentHashNoParams?.length - 1) {\n\t\t// Remove trailing '/'\n\t\tcurrentHashNoParams = currentHashNoParams.substring(0, currentHashNoParams.length - 1);\n\t}\n\n\t// If the app is displaying a sub-OP (or below), then we just return the original path\n\tif (!isPathOnDraftRoot(currentHashNoParams, metaModel)) {\n\t\treturn pathToResolve;\n\t}\n\n\tlet rootEntityName = currentHashNoParams?.substring(0, currentHashNoParams.indexOf(\"(\"));\n\tif (rootEntityName[0] === \"/\") {\n\t\trootEntityName = rootEntityName.substring(1);\n\t}\n\n\tconst semanticKeys = SemanticKeyHelper.getSemanticKeys(metaModel, rootEntityName)?.map((key) => key.$PropertyPath);\n\tif (semanticKeys === undefined) {\n\t\t// If we don't have semantic keys, the path we have is technical and can be used as is.\n\t\treturn pathToResolve;\n\t}\n\n\tconst lastSemanticMapping = routingService.getLastSemanticMapping();\n\n\tif (lastSemanticMapping?.semanticPath === pathToResolve) {\n\t\t// This semantic path has been resolved previously\n\t\treturn lastSemanticMapping.technicalPath;\n\t}\n\n\t// We need resolve the semantic path to get the technical keys\n\tconst context = await getContextFromKeys(semanticKeys, currentHashNoParams, model);\n\tconst technicalPath = context?.getPath();\n\n\tif (technicalPath && technicalPath !== pathToResolve) {\n\t\t// The semantic path was resolved (otherwise keep the original value for target)\n\t\troutingService.setLastSemanticMapping({\n\t\t\ttechnicalPath: technicalPath,\n\t\t\tsemanticPath: pathToResolve\n\t\t});\n\t\treturn technicalPath;\n\t}\n\n\treturn pathToResolve;\n}\n"],"mappings":";;;;;;;;;EAWA;AACA;AACA;AACA;AACA;AACA;EACO,SAASA,iBAAiBA,CAACC,IAAY,EAAEC,SAAyB,EAAW;IACnF;IACA,MAAMC,OAAO,GAAG,sBAAsB,CAACC,IAAI,CAACH,IAAI,CAAC;IACjD,IAAI,CAACE,OAAO,EAAE;MACb,OAAO,KAAK;IACb;;IAEA;IACA,MAAME,aAAa,GAAG,IAAIF,OAAO,CAAC,CAAC,CAAC,EAAE;IACtC,OAAOD,SAAS,CAACI,SAAS,CAAC,GAAGD,aAAa,2CAA2C,CAAC,GAAG,IAAI,GAAG,KAAK;EACvG;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EANAE,QAAA,CAAAP,iBAAA,GAAAA,iBAAA;EAOO,SAASQ,oBAAoBA,CAACP,IAAY,EAAEQ,IAAc,EAAEP,SAAyB,EAAiB;IAC5G,MAAMQ,gBAAgB,GAAG,SAAAA,CAAUC,KAAa,EAAU;MACzD,IAAIA,KAAK,CAACC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAID,KAAK,CAACE,WAAW,CAAC,GAAG,CAAC,KAAKF,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;QAC5E;QACAH,KAAK,GAAGI,kBAAkB,CAACJ,KAAK,CAACK,SAAS,CAAC,CAAC,EAAEL,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC,CAAC;MACjE;MACA,OAAOH,KAAK;IACb,CAAC;IACD,MAAMM,SAAS,GAAGhB,IAAI,CAACe,SAAS,CAACf,IAAI,CAACW,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEX,IAAI,CAACa,MAAM,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,GAAG,CAAC;IAEnF,IAAIC,SAAS,GAAGV,IAAI;IACpB,IAAIW,cAAc,GAAGH,SAAS;IAC9B;IACA,IAAIR,IAAI,CAACY,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MACpCF,SAAS,GAAGV,IAAI,CAACa,MAAM,CAAEC,SAAS,IAAK,CAACA,SAAS,CAACF,QAAQ,CAAC,gBAAgB,CAAC,CAAC;MAC7ED,cAAc,GAAGH,SAAS,CAACK,MAAM,CAAEE,OAAO,IAAK,CAACA,OAAO,CAACC,UAAU,CAAC,gBAAgB,CAAC,CAAC;IACtF;IAEA,IAAIN,SAAS,CAACL,MAAM,IAAIM,cAAc,CAACN,MAAM,EAAE;MAC9C,OAAO,IAAI;IACZ;IAEA,MAAMY,sBAAsB,GAAGC,WAAW,CAACC,wBAAwB,CAAC1B,SAAS,CAAC;IAC9E,IAAI2B,OAAiB;IACrB,IAAIV,SAAS,CAACL,MAAM,KAAK,CAAC,EAAE;MAC3B;MACA,IAAIM,cAAc,CAAC,CAAC,CAAC,CAACR,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACvC,MAAMkB,OAAO,GAAGV,cAAc,CAAC,CAAC,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC;QAC5CE,cAAc,CAAC,CAAC,CAAC,GAAGU,OAAO,CAAC,CAAC,CAAC;MAC/B;MACA;MACA,MAAMC,QAAQ,GAAGrB,gBAAgB,CAACU,cAAc,CAAC,CAAC,CAAC,CAAC;MACpDS,OAAO,GAAG,CACT,IAAIG,MAAM,CAAC;QACV/B,IAAI,EAAEkB,SAAS,CAAC,CAAC,CAAC;QAClBc,QAAQ,EAAEC,cAAc,CAACC,EAAE;QAC3BC,MAAM,EAAEL,QAAQ;QAChBM,aAAa,EAAEX;MAChB,CAAC,CAAC,CACF;IACF,CAAC,MAAM;MACN,MAAMY,UAAmC,GAAG,CAAC,CAAC;MAC9C;MACAlB,cAAc,CAACmB,OAAO,CAAC,UAAUC,cAAsB,EAAE;QACxD,MAAMC,MAAM,GAAGD,cAAc,CAACtB,KAAK,CAAC,GAAG,CAAC;UACvCa,QAAQ,GAAGrB,gBAAgB,CAAC+B,MAAM,CAAC,CAAC,CAAC,CAAC;QAEvCH,UAAU,CAACG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGV,QAAQ;MACjC,CAAC,CAAC;MAEF,IAAIW,MAAM,GAAG,KAAK;MAClBb,OAAO,GAAGV,SAAS,CAACwB,GAAG,CAAC,UAAUC,WAAW,EAAE;QAC9C,MAAMC,GAAG,GAAGD,WAAW;UACtBjC,KAAK,GAAG2B,UAAU,CAACO,GAAG,CAAC;QAExB,IAAIlC,KAAK,KAAKmC,SAAS,EAAE;UACxB,OAAO,IAAId,MAAM,CAAC;YACjB/B,IAAI,EAAE4C,GAAG;YACTZ,QAAQ,EAAEC,cAAc,CAACC,EAAE;YAC3BC,MAAM,EAAEzB,KAAK;YACb0B,aAAa,EAAEX;UAChB,CAAC,CAAC;QACH,CAAC,MAAM;UACNgB,MAAM,GAAG,IAAI;UACb,OAAO,IAAIV,MAAM,CAAC;YACjB/B,IAAI,EAAE;UACP,CAAC,CAAC,CAAC,CAAC;QACL;MACD,CAAC,CAAC;MAEF,IAAIyC,MAAM,EAAE;QACX,OAAO,IAAI;MACZ;IACD;;IAEA;IACA;IACA,MAAMK,WAAW,GAAG,IAAIf,MAAM,CAAC;MAC9BH,OAAO,EAAE,CAAC,IAAIG,MAAM,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,IAAIA,MAAM,CAAC,8BAA8B,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;MAC5GgB,GAAG,EAAE;IACN,CAAC,CAAC;IACFnB,OAAO,CAACoB,IAAI,CAACF,WAAW,CAAC;IAEzB,OAAO,IAAIf,MAAM,CAACH,OAAO,EAAE,IAAI,CAAC;EACjC;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;EANAtB,QAAA,CAAAC,oBAAA,GAAAA,oBAAA;EAOA,eAAe0C,kBAAkBA,CAACzC,IAAc,EAAEQ,SAAiB,EAAEkC,KAAiB,EAA2B;IAChH,MAAMjD,SAAS,GAAGiD,KAAK,CAACC,YAAY,CAAC,CAAC;IACtC,IAAI,CAAC3C,IAAI,IAAIA,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;MAC/B;MACA,OAAO,IAAI;IACZ;;IAEA;IACA,MAAMQ,MAAM,GAAGd,oBAAoB,CAACS,SAAS,EAAER,IAAI,EAAEP,SAAS,CAAC;IAC/D,IAAIoB,MAAM,KAAK,IAAI,EAAE;MACpB;MACA,OAAO,IAAI;IACZ;;IAEA;IACA,MAAM+B,YAAY,GAAGpC,SAAS,CAACQ,UAAU,CAAC,GAAG,CAAC,GAAGR,SAAS,GAAG,IAAIA,SAAS,EAAE;IAC5E,MAAMqC,WAAW,GAAGpD,SAAS,CAACqD,cAAc,CAACF,YAAY,CAAC;IAC1D,MAAMG,UAAU,GAAGC,2BAA2B,CAACH,WAAW,CAAC;IAC3D,MAAMI,aAAa,GAAGF,UAAU,CAACG,gBAAgB,CAAClD,IAAI,CAACkC,GAAG,CAAEiB,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC;;IAEvF;IACA,MAAMC,WAAW,GAAGX,KAAK,CAACY,QAAQ,CAACT,WAAW,CAACU,OAAO,CAAC,CAAC,EAAElB,SAAS,EAAEA,SAAS,EAAExB,MAAM,EAAE;MACvF2C,OAAO,EAAEP,aAAa,CAACQ,IAAI,CAAC,GAAG,CAAC;MAChCC,SAAS,EAAE;IACZ,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAG,MAAMN,WAAW,CAACO,eAAe,CAAC,CAAC,EAAE,CAAC,CAAC;IACxD,IAAID,QAAQ,CAACtD,MAAM,EAAE;MACpB,OAAOsD,QAAQ,CAAC,CAAC,CAAC;IACnB,CAAC,MAAM;MACN;MACA,OAAO,IAAI;IACZ;EACD;;EAEA;AACA;AACA;AACA;AACA;EACO,eAAeE,uBAAuBA,CAACC,OAAgB,EAA2B;IACxF,MAAMpB,KAAK,GAAGoB,OAAO,CAACC,QAAQ,CAAC,CAAC;IAChC,MAAMtE,SAAS,GAAGiD,KAAK,CAACC,YAAY,CAAC,CAAC;IACtC,MAAMI,UAAU,GAAGC,2BAA2B,CAACvD,SAAS,CAACqD,cAAc,CAACgB,OAAO,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3F,MAAMvD,IAAI,GAAG+C,UAAU,CAACG,gBAAgB,CAAClD,IAAI,CAACkC,GAAG,CAAEiB,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC;IAE9E,OAAOX,kBAAkB,CAACzC,IAAI,EAAE8D,OAAO,CAACP,OAAO,CAAC,CAAC,EAAEb,KAAK,CAAC;EAC1D;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAPA5C,QAAA,CAAA+D,uBAAA,GAAAA,uBAAA;EAQO,eAAeG,WAAWA,CAChCC,aAAqB,EACrBvB,KAAiB,EACjBwB,cAA8B,EAC9BC,MAAc,EACI;IAClB,MAAM1E,SAAS,GAAGiD,KAAK,CAACC,YAAY,CAAC,CAAC;IACtC,IAAIyB,mBAAmB,GAAGD,MAAM,CAACE,cAAc,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAAC7D,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzE,IAAI2D,mBAAmB,EAAEhE,WAAW,CAAC,GAAG,CAAC,KAAKgE,mBAAmB,EAAE/D,MAAM,GAAG,CAAC,EAAE;MAC9E;MACA+D,mBAAmB,GAAGA,mBAAmB,CAAC7D,SAAS,CAAC,CAAC,EAAE6D,mBAAmB,CAAC/D,MAAM,GAAG,CAAC,CAAC;IACvF;;IAEA;IACA,IAAI,CAACd,iBAAiB,CAAC6E,mBAAmB,EAAE3E,SAAS,CAAC,EAAE;MACvD,OAAOwE,aAAa;IACrB;IAEA,IAAIM,cAAc,GAAGH,mBAAmB,EAAE7D,SAAS,CAAC,CAAC,EAAE6D,mBAAmB,CAACjE,OAAO,CAAC,GAAG,CAAC,CAAC;IACxF,IAAIoE,cAAc,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC9BA,cAAc,GAAGA,cAAc,CAAChE,SAAS,CAAC,CAAC,CAAC;IAC7C;IAEA,MAAMiE,YAAY,GAAGC,iBAAiB,CAACC,eAAe,CAACjF,SAAS,EAAE8E,cAAc,CAAC,EAAErC,GAAG,CAAEE,GAAG,IAAKA,GAAG,CAACuC,aAAa,CAAC;IAClH,IAAIH,YAAY,KAAKnC,SAAS,EAAE;MAC/B;MACA,OAAO4B,aAAa;IACrB;IAEA,MAAMW,mBAAmB,GAAGV,cAAc,CAACW,sBAAsB,CAAC,CAAC;IAEnE,IAAID,mBAAmB,EAAEE,YAAY,KAAKb,aAAa,EAAE;MACxD;MACA,OAAOW,mBAAmB,CAACG,aAAa;IACzC;;IAEA;IACA,MAAMjB,OAAO,GAAG,MAAMrB,kBAAkB,CAAC+B,YAAY,EAAEJ,mBAAmB,EAAE1B,KAAK,CAAC;IAClF,MAAMqC,aAAa,GAAGjB,OAAO,EAAEP,OAAO,CAAC,CAAC;IAExC,IAAIwB,aAAa,IAAIA,aAAa,KAAKd,aAAa,EAAE;MACrD;MACAC,cAAc,CAACc,sBAAsB,CAAC;QACrCD,aAAa,EAAEA,aAAa;QAC5BD,YAAY,EAAEb;MACf,CAAC,CAAC;MACF,OAAOc,aAAa;IACrB;IAEA,OAAOd,aAAa;EACrB;EAACnE,QAAA,CAAAkE,WAAA,GAAAA,WAAA;EAAA,OAAAlE,QAAA;AAAA","ignoreList":[],"file":"ContextPathHelper-dbg.js"}