{"version":3,"names":["MessageHandler","_dec","defineUI5Class","_dec2","methodOverride","_dec3","privateExtension","_dec4","extensible","OverrideExecution","Instead","_dec5","_dec6","_dec7","publicExtension","_dec8","_dec9","_dec10","finalExtension","_dec11","_dec12","_dec13","_class","_class2","_ControllerExtension","_this","call","strictWarningMessages","holdKeys","holdMsgsToShow","_inheritsLoose","_proto","prototype","onInit","internalModel","base","getAppComponent","getModel","setProperty","undefined","Promise","resolve","addWarningMessagesToMessageHandler","aMessages","concat","isStrictWarningMessage","oMessage","find","message","getCode","getMessage","getType","getDescriptionUrl","deepEqual","getTargets","getPersistent","clearStrictWarningMessages","filterErrorMessages","messages","filter","MessageType","Error","getShowBoundMessagesInMessageDialog","filterContextBoundMessages","transitionMessages","context","beforeShowMessageButton","_messageDetails","registerToHoldMessages","key","uniqueKey","uid","includes","push","resetHoldKeys","showMessageDialog","mParameters","getProperty","messagesInModel","Messaging","getMessageModel","getData","duplicateWarningMessage","removeMessages","customMessages","oOPInternalBindingContext","getView","getBindingContext","viewType","getViewData","converterType","isOperationDialogOpen","bShowBoundMessages","oBindingContext","reject","setTimeout","processAndShowMessages","bind","parameters","bindingContext","showBoundTransitionMessages","success","failure","concurrentEditFlag","control","sActionName","onBeforeShowMessage","unHoldKey","forceShowUIElement","overrideUIDecision","showBoundStateMessages","newUIDecisions","messageHandling","getUIDecisions","getResourceModel","updateUIDecisions","removeHoldKey","getId","uiElementIsAvailable","then","showMessagesWithCondtions","arguments","length","showUIElement","checkToShowUIElement","ret","showMessagesInUI","err","Log","error","info","removeTransitionMessages","keepBoundMessage","keepUnboundMessage","sPathToBeRemoved","removeBoundTransitionMessages","removeUnboundTransitionMessages","_checkNavigationToErrorPage","aUnboundMessages","getMessages","bShowBoundTransitionMessages","aBoundTransitionMessages","aCustomMessages","bIsStickyEditMode","CommonUtils","isStickyEditMode","mMessagePageParameters","isDataReceivedError","title","description","navigateBackToOrigin","errorType","isInitialLoad503Error","oTechnicalDetails","getTechnicalDetails","httpStatus","_getHTTP503MessageParameters","technicalDetails","messagePageParameters","secondsBeforeRetry","retryAfter","_getSecondsBeforeRetryAfter","retryAfterMessage","getRetryAfterMessage","dRetryAfter","dCurrentDateTime","Date","iCurrentDateTimeInMilliSeconds","getTime","iRetryAfterDateTimeInMilliSeconds","iSecondsBeforeRetry","oldUIDecisions","allMessagesToShow","mergedUIDecision","messagesToShow","Array","from","Set","elements","uiElementToUse","contextNeedsEtagRefresh","containsBoundTransition","inKey","splice","indexOf","holdMessagesForControl","identifier","releaseHoldByControl","showMessages","messagePageNavigationCallback","handleShellBack","shellBack","oResourceBundle","Library","getResourceBundleFor","_routing","navigateToMessagePage","getText","catch","ControllerExtension","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sourceRoot":".","sources":["MessageHandler.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport deepEqual from \"sap/base/util/deepEqual\";\nimport uid from \"sap/base/util/uid\";\nimport { defineUI5Class, extensible, finalExtension, methodOverride, privateExtension, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport type {\n\tMessageTechnicalDetails,\n\tMessageUIDecisions,\n\tShowMessageParameters,\n\tSupportedUIElement\n} from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport messageHandling from \"sap/fe/core/controllerextensions/messageHandler/messageHandling\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport type Dialog from \"sap/m/Dialog\";\nimport type Control from \"sap/ui/core/Control\";\nimport Library from \"sap/ui/core/Lib\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport type Message from \"sap/ui/core/message/Message\";\nimport MessageType from \"sap/ui/core/message/MessageType\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type Context from \"sap/ui/model/Context\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport { getResourceModel } from \"../helpers/ResourceModelHelper\";\n\ntype ObjectWithConverterType = object & {\n\tconverterType: string;\n};\ntype NavigationToErrorPageParameter = {\n\tcustomMessages?: CustomMessage[];\n\tconcurrentEditFlag?: boolean;\n\tisDataReceivedError?: boolean;\n\ttitle?: string;\n\tdescription?: string;\n\tisInitialLoad503Error?: boolean;\n};\nexport type NavigationToErrorPageResult = {\n\ttitle?: string;\n\tdescription?: string;\n\terrorType?: string;\n\tnavigateBackToOrigin?: boolean;\n\thandleShellBack?: boolean;\n};\nexport type CustomMessage = {\n\tcode: string;\n\ttext: string;\n\tpersistent: boolean;\n\ttype: MessageType;\n};\nexport type ShowMessageDialogParameter = {\n\tcustomMessages?: CustomMessage[];\n\tisOperationDialogOpen?: boolean;\n\tcontext?: Context;\n\tconcurrentEditFlag?: boolean;\n\tcontrol?: Control;\n\tsActionName?: string;\n\taSelectedContexts?: Context | Context[] | null;\n\tonBeforeShowMessage?: (messages: Message[], showMessageParameters: ShowMessageParameters) => ShowMessageParameters;\n\tunHoldKey?: string;\n\toverrideUIDecision?: boolean;\n\tshowBoundStateMessages?: boolean;\n\tboundActionName?: string;\n\tentitySet?: string;\n};\n\nexport type ShowMessagesParameters = ShowMessageDialogParameter & {\n\tmessagePageNavigationCallback?: Function;\n\tshellBack?: Function | boolean;\n\tisDataReceivedError?: boolean;\n\tisInitialLoad503Error?: boolean;\n\ttitle?: string;\n\tdescription?: string;\n};\n/**\n *\n * Defines the message detail relevant for the MessageButton building block to display a popover.\n * @public\n */\nexport type MessageDetail = {\n\tmessage: Message;\n\tgroupName?: string;\n\tactiveTitleHandler?: Function;\n};\n\n/**\n * A controller extension offering message handling.\n * @hideconstructor\n * @public\n * @since 1.90.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.MessageHandler\")\nclass MessageHandler extends ControllerExtension {\n\tprivate strictWarningMessages: Message[] = [];\n\n\tprotected base!: PageController;\n\n\tprotected holdKeys: string[] = [];\n\n\tprivate holdMsgsToShow = false;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t@methodOverride()\n\tonInit(): void {\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\tinternalModel.setProperty(\"/messageUIDecision\", undefined);\n\t\tinternalModel.setProperty(\"/messageUIElementIsAvailable\", Promise.resolve());\n\t}\n\n\t/**\n\t * Adds warning messages to the message handler.\n\t * @param aMessages The strict warning messages to be added\n\t */\n\taddWarningMessagesToMessageHandler(aMessages: Message[]): void {\n\t\tthis.strictWarningMessages = this.strictWarningMessages.concat(aMessages);\n\t}\n\n\t/**\n\t * Determines whether or not a message is a strict warning message that was received previously.\n\t * @param oMessage The message to be checked\n\t * @returns Whether or not the message is a strict warning message\n\t */\n\tisStrictWarningMessage(oMessage: Message): boolean {\n\t\treturn (\n\t\t\tthis.strictWarningMessages.find((message) => {\n\t\t\t\treturn (\n\t\t\t\t\tmessage.getCode() === oMessage.getCode() &&\n\t\t\t\t\tmessage.getMessage() === oMessage.getMessage() &&\n\t\t\t\t\tmessage.getType() === oMessage.getType() &&\n\t\t\t\t\tmessage.getDescriptionUrl() === oMessage.getDescriptionUrl() &&\n\t\t\t\t\tdeepEqual(message.getTargets(), oMessage.getTargets()) &&\n\t\t\t\t\tmessage.getPersistent() === oMessage.getPersistent()\n\t\t\t\t);\n\t\t\t}) !== undefined\n\t\t);\n\t}\n\n\t/**\n\t * Clears all strict warning messages from the message handler.\n\t */\n\tclearStrictWarningMessages(): void {\n\t\tthis.strictWarningMessages = [];\n\t}\n\n\tfilterErrorMessages(messages: Message[]): Message[] {\n\t\treturn messages.filter((message) => message.getType() === MessageType.Error);\n\t}\n\n\t/**\n\t * Determines whether or not bound messages are shown in the message dialog.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.Instead}.\n\t *\n\t * If the bound messages are shown to the user with a different control like the (TODO:Link) MessageButton\n\t * this method has to be overridden.\n\t * @returns Determines whether or not bound messages are shown in the message dialog.\n\t */\n\t@privateExtension()\n\t@extensible(OverrideExecution.Instead)\n\tgetShowBoundMessagesInMessageDialog(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determines whether or not bound messages should be removed from the dialog.\n\t *\n\t * For the object page if the bound messages are shown in the message strip, then remove that from the dialog to avoid duplicate messages.\n\t *\n\t * Only remove the messages if more than one message is present in the message model.\n\t * @param transitionMessages The messages that are shown in the message dialog.\n\t * @param context The context of the message dialog.\n\t * @returns Returns the bound messages which should be shown in the message dialog.\n\t */\n\t@privateExtension()\n\t@extensible(OverrideExecution.Instead)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tfilterContextBoundMessages(transitionMessages: Message[], context: Context): Message[] {\n\t\treturn transitionMessages;\n\t}\n\n\t/**\n\t * Allows consumer of a message button BB to decide which bound messages should be shown and how.\n\t *\n\t * This hook is called when the message button BB detects a change in the message model.\n\t * The hooks allows to define behaviour for messages in the message button BB.\n\t *\n\t * Consumers will be able to do the following with this hook.\n\t *\n\t * 1. Filter out messages so that they are not shown on the message button.\n\t * 2. group the messages based on their UI.\n\t * 3. provide a presser handler incase the message should show as a link.\n\t * @param _messageDetails Object containing the details related to the message.\n\t * @param _messageDetails.message The message from the message model.Ideally, it must not be modified directly.\n\t * @param _messageDetails.groupName The group name associated with the current message.\n\t * @param _messageDetails.activeTitleHandler Function to handle the click event on a message in the MessageButton building block.\n\t * @returns A promise that must be returned by the overridden method.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(\"AfterAsync\")\n\tasync beforeShowMessageButton(_messageDetails: MessageDetail[]): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Register to hold messages unitl a process is complete.\n\t *\n\t * The caller can register to hold the message handler from showing messages until the caller's processes are completed.\n\t * On registering the caller is returned a unique key.\n\t * The messages will not be shown in the UI with subsequent 'showMessageDialog()' calls.\n\t * The caller needs to use 'showMessageDialog(<key>)' at the end of all his processes to show the messages in the UI.\n\t *\n\t * If multiple owners register simultaneously, then messages are shown in the UI only after 'showMessageDialog(<respective_key>)' is called by all the processes' owners.\n\t * @param key Unique identifier to use, If not provided, a UID would be created and used to register.\n\t * @returns Unique Key to be used by the caller to show messages at a later point of time.\n\t */\n\tregisterToHoldMessages(key?: string): string {\n\t\tconst uniqueKey = key ?? uid();\n\t\tif (!this.holdKeys.includes(uniqueKey)) {\n\t\t\tthis.holdKeys.push(uniqueKey);\n\t\t}\n\t\treturn uniqueKey;\n\t}\n\n\t/**\n\t * Clear all existing held keys.\n\t */\n\tresetHoldKeys(): void {\n\t\tthis.holdKeys = [];\n\t}\n\n\t/**\n\t * Shows a message dialog with transition messages if there are any.\n\t * The message dialog is shown as a modal dialog. Once the user confirms the dialog, all transition messages\n\t * are removed from the message model. If there is more than one message, a list of messages is shown. The user\n\t * can filter on message types and can display details as well as the long text. If there is one message,\n\t * the dialog immediately shows the details of the message. If there is just one success message, a message\n\t * toast is shown instead.\n\t * @param mParameters PRIVATE\n\t * @returns A promise that is resolved once the user closes the dialog. If there are no messages\n\t * to be shown, the promise is resolved immediately\n\t * @public\n\t * @since 1.90.0\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync showMessageDialog(mParameters?: ShowMessageDialogParameter): Promise<void> {\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\t// remove strict warning messages from the message model before showing the message dialog\n\t\tawait internalModel.getProperty(\"/messageUIElementIsAvailable\");\n\n\t\tconst messagesInModel = Messaging.getMessageModel().getData();\n\t\tconst duplicateWarningMessage = messagesInModel.filter((message: Message) => {\n\t\t\treturn this.isStrictWarningMessage(message);\n\t\t});\n\t\tMessaging.removeMessages(duplicateWarningMessage);\n\n\t\tconst customMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : undefined,\n\t\t\toOPInternalBindingContext = this.base.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\tconst viewType = (this.base.getView().getViewData() as ObjectWithConverterType).converterType;\n\t\t// set isActionParameterDialog open so that it can be used in the controller extension to decide whether message dialog should open or not\n\t\tif (mParameters && mParameters.isOperationDialogOpen && oOPInternalBindingContext) {\n\t\t\toOPInternalBindingContext.setProperty(\"isOperationDialogOpen\", true);\n\t\t}\n\t\tconst bShowBoundMessages = this.getShowBoundMessagesInMessageDialog();\n\t\tconst oBindingContext = (\n\t\t\tmParameters && mParameters.context ? mParameters.context : this.getView().getBindingContext()\n\t\t) as ODataV4Context;\n\t\t//const bEtagMessage = mParameters && mParameters.bHasEtagMessage;\n\t\t// reset  isOperationDialogOpen\n\t\t// cannot do this operations.js since it is not aware of the view\n\t\tif (oOPInternalBindingContext) {\n\t\t\toOPInternalBindingContext.setProperty(\"isOperationDialogOpen\", false);\n\t\t}\n\t\treturn new Promise<void>(\n\t\t\tfunction (this: MessageHandler, resolve: () => void, reject: () => void): void {\n\t\t\t\t// we have to set a timeout to be able to access the most recent messages\n\t\t\t\tsetTimeout(\n\t\t\t\t\tfunction (this: MessageHandler): void {\n\t\t\t\t\t\t// TODO: great API - will be changed later\n\t\t\t\t\t\tthis.processAndShowMessages(\n\t\t\t\t\t\t\tmParameters ?? {},\n\t\t\t\t\t\t\toBindingContext,\n\t\t\t\t\t\t\tbShowBoundMessages,\n\t\t\t\t\t\t\tcustomMessages ?? [],\n\t\t\t\t\t\t\tresolve,\n\t\t\t\t\t\t\treject,\n\t\t\t\t\t\t\tviewType\n\t\t\t\t\t\t);\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}.bind(this)\n\t\t);\n\t}\n\n\t/**\n\t * Process the messages and show them when expected.\n\t *\n\t * We filter the messages to show and hold them until all registered processes call showMessageDialog with their respective held keys.\n\t * @param parameters Parameters to show message dialog.\n\t * @param bindingContext Bind context of the page.\n\t * @param showBoundTransitionMessages Should bound messages be shown.\n\t * @param customMessages Custom messages to add.\n\t * @param success Success callback.\n\t * @param failure Failure callback.\n\t * @param viewType View type, list report or object page.\n\t */\n\tprocessAndShowMessages(\n\t\tparameters: ShowMessageDialogParameter,\n\t\tbindingContext: ODataV4Context,\n\t\tshowBoundTransitionMessages: boolean,\n\t\tcustomMessages: CustomMessage[],\n\t\tsuccess: () => void,\n\t\tfailure: () => void,\n\t\tviewType?: string\n\t): void {\n\t\tconst {\n\t\t\tconcurrentEditFlag,\n\t\t\tcontrol,\n\t\t\tsActionName,\n\t\t\tonBeforeShowMessage,\n\t\t\tunHoldKey,\n\t\t\tisOperationDialogOpen: forceShowUIElement = false,\n\t\t\toverrideUIDecision,\n\t\t\tshowBoundStateMessages\n\t\t} = parameters;\n\t\tthis.holdMsgsToShow = true;\n\n\t\t// Create a UI decision.\n\t\tconst newUIDecisions = messageHandling.getUIDecisions(\n\t\t\tcustomMessages,\n\t\t\tbindingContext,\n\t\t\tshowBoundTransitionMessages,\n\t\t\tconcurrentEditFlag,\n\t\t\tcontrol,\n\t\t\tsActionName,\n\t\t\tonBeforeShowMessage,\n\t\t\tviewType,\n\t\t\tshowBoundStateMessages,\n\t\t\tparameters,\n\t\t\tgetResourceModel(this.getView()),\n\t\t\tthis\n\t\t);\n\t\tthis.updateUIDecisions(newUIDecisions, overrideUIDecision);\n\t\tthis.removeHoldKey(unHoldKey ?? control?.getId());\n\t\tconst uiElementIsAvailable = this.base.getAppComponent().getModel(\"internal\")?.getProperty(\"/messageUIElementIsAvailable\");\n\t\t(this.base.getAppComponent().getModel(\"internal\") as JSONModel)?.setProperty(\n\t\t\t\"/messageUIElementIsAvailable\",\n\t\t\tuiElementIsAvailable.then(\n\t\t\t\tasync function (this: MessageHandler): Promise<void> {\n\t\t\t\t\treturn this.showMessagesWithCondtions(forceShowUIElement, success, failure);\n\t\t\t\t}.bind(this)\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Show Messages in the UI based on conditions.\n\t * @param forceShowUIElement\n\t * @param success\n\t * @param failure\n\t */\n\tasync showMessagesWithCondtions(\n\t\tforceShowUIElement = false,\n\t\tsuccess?: (ret?: unknown) => void,\n\t\tfailure?: (err?: unknown) => void\n\t): Promise<void> {\n\t\tconst showUIElement = forceShowUIElement || this.checkToShowUIElement();\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\tif (showUIElement && internalModel.getProperty(\"/messageUIDecision\")) {\n\t\t\t// Show UI element for the present decision and clear the decision.\n\t\t\ttry {\n\t\t\t\tconst ret = await messageHandling.showMessagesInUI(internalModel.getProperty(\"/messageUIDecision\"));\n\t\t\t\tsuccess?.(ret);\n\t\t\t} catch (err: unknown) {\n\t\t\t\tLog.error(`FE : V4 : MessageHandler : Error on trying to show UI element: ${err}`);\n\t\t\t\tfailure?.(err);\n\t\t\t\tinternalModel.setProperty(\"/messageUIElementIsAvailable\", Promise.resolve());\n\t\t\t}\n\t\t\tinternalModel.setProperty(\"/messageUIDecision\", undefined);\n\t\t\tthis.clearStrictWarningMessages();\n\t\t\tthis.holdMsgsToShow = false;\n\t\t} else {\n\t\t\tLog.info(\"FE : V4 : MessageHandler : Holding messages until a registered process \");\n\t\t\tsuccess?.();\n\t\t}\n\t}\n\n\t/**\n\t * You can remove the existing transition message from the message model with this method.\n\t * With every user interaction that causes server communication (like clicking on an action, changing data),\n\t * this method removes the existing transition messages from the message model.\n\t * @param [keepBoundMessage] Checks if the bound transition messages are not to be removed\n\t * @param keepUnboundMessage\n\t * @param sPathToBeRemoved\n\t */\n\t@publicExtension()\n\tremoveTransitionMessages(keepBoundMessage?: boolean, keepUnboundMessage?: boolean, sPathToBeRemoved?: string): void {\n\t\tif (!keepBoundMessage) {\n\t\t\tmessageHandling.removeBoundTransitionMessages(sPathToBeRemoved);\n\t\t}\n\t\tif (!keepUnboundMessage) {\n\t\t\tmessageHandling.removeUnboundTransitionMessages();\n\t\t}\n\t}\n\n\t/**\n\t * Method that returns all the parameters needed to handle the navigation to the error page.\n\t * @param mParameters\n\t * @returns The parameters necessary for the navigation to the error page\n\t */\n\t_checkNavigationToErrorPage(mParameters?: NavigationToErrorPageParameter): NavigationToErrorPageResult | undefined {\n\t\tconst aUnboundMessages = messageHandling.getMessages();\n\t\tconst bShowBoundTransitionMessages = this.getShowBoundMessagesInMessageDialog();\n\t\tconst aBoundTransitionMessages = bShowBoundTransitionMessages ? messageHandling.getMessages(true, true) : [];\n\t\tconst aCustomMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : [];\n\t\tconst bIsStickyEditMode = CommonUtils.isStickyEditMode(this.base.getView());\n\t\tlet mMessagePageParameters: NavigationToErrorPageResult | undefined;\n\n\t\t// TODO: Stick mode check is okay as long as the controller extension is used with sap.fe.core and sap.fe.core.AppComponent.\n\t\t// It might be better to provide an extension to the consumer of the controller extension to provide this value.\n\n\t\t// The message page can only show 1 message today, so we navigate to it when :\n\t\t// 1. There are no bound transition messages to show,\n\t\t// 2. There are no custom messages to show, &\n\t\t// 3. There is exactly 1 unbound message in the message model with statusCode=503 and retry-After available\n\t\t// 4. retryAfter is greater than 120 seconds\n\t\t//\n\t\t// In Addition, navigating away from a sticky session will destroy the session so we do not navigate to message page for now.\n\t\t// TODO: check if navigation should be done in sticky edit mode.\n\t\tif (mParameters?.isDataReceivedError === true) {\n\t\t\tmMessagePageParameters = {\n\t\t\t\ttitle: mParameters.title,\n\t\t\t\tdescription: mParameters.description,\n\t\t\t\tnavigateBackToOrigin: true,\n\t\t\t\terrorType: \"PageNotFound\"\n\t\t\t};\n\t\t} else if (\n\t\t\t!bIsStickyEditMode &&\n\t\t\t!aBoundTransitionMessages.length &&\n\t\t\t!aCustomMessages.length &&\n\t\t\t(aUnboundMessages.length === 1 || mParameters?.isInitialLoad503Error === true)\n\t\t) {\n\t\t\tconst oMessage = aUnboundMessages[0];\n\t\t\tconst oTechnicalDetails = oMessage.getTechnicalDetails() as MessageTechnicalDetails | undefined;\n\t\t\tif (oTechnicalDetails?.httpStatus === 503) {\n\t\t\t\tmMessagePageParameters = this._getHTTP503MessageParameters(oMessage, oTechnicalDetails);\n\t\t\t}\n\t\t}\n\t\treturn mMessagePageParameters;\n\t}\n\n\t_getHTTP503MessageParameters(message: Message, technicalDetails: MessageTechnicalDetails): NavigationToErrorPageResult | undefined {\n\t\tlet messagePageParameters: NavigationToErrorPageResult | undefined;\n\n\t\tconst secondsBeforeRetry =\n\t\t\ttechnicalDetails.retryAfter !== undefined ? this._getSecondsBeforeRetryAfter(technicalDetails.retryAfter) : undefined;\n\n\t\tif (secondsBeforeRetry === undefined || secondsBeforeRetry > 120) {\n\t\t\tconst retryAfterMessage = messageHandling.getRetryAfterMessage(message);\n\t\t\tmessagePageParameters = {\n\t\t\t\tdescription: retryAfterMessage ? `${retryAfterMessage} ${message.getMessage()}` : message.getMessage(),\n\t\t\t\tnavigateBackToOrigin: true,\n\t\t\t\terrorType: \"UnableToLoad\"\n\t\t\t};\n\t\t}\n\n\t\treturn messagePageParameters;\n\t}\n\n\t_getSecondsBeforeRetryAfter(dRetryAfter: Date): number {\n\t\tconst dCurrentDateTime = new Date(),\n\t\t\tiCurrentDateTimeInMilliSeconds = dCurrentDateTime.getTime(),\n\t\t\tiRetryAfterDateTimeInMilliSeconds = dRetryAfter.getTime(),\n\t\t\tiSecondsBeforeRetry = (iRetryAfterDateTimeInMilliSeconds - iCurrentDateTimeInMilliSeconds) / 1000;\n\t\treturn iSecondsBeforeRetry;\n\t}\n\n\t/**\n\t * Update the existing UI decisions with the new ones.\n\t * @param newUIDecisions In comming UI decisions.\n\t * @param overrideUIDecision Override the existing UI decision to show messages with the new one.\n\t *\n\t * 'overrideUIDecision', This would be needed when there is a change in page context and the paramters to create the new UI decision are different.\n\t */\n\tupdateUIDecisions(newUIDecisions: MessageUIDecisions, overrideUIDecision = false): void {\n\t\tconst internalModel = this.base.getAppComponent().getModel(\"internal\") as JSONModel;\n\t\tconst oldUIDecisions = internalModel.getProperty(\"/messageUIDecision\") as MessageUIDecisions;\n\t\tlet allMessagesToShow: Message[] = [];\n\t\tlet mergedUIDecision;\n\t\tif (oldUIDecisions && overrideUIDecision === false) {\n\t\t\tif (\n\t\t\t\toldUIDecisions.messagesToShow.length === 1 &&\n\t\t\t\tnewUIDecisions.messagesToShow.length === 1 &&\n\t\t\t\toldUIDecisions.messagesToShow[0].getCode() === \"C_COMMON_SUCCESS_MESSAGE\" &&\n\t\t\t\tnewUIDecisions.messagesToShow[0].getCode() === \"C_COMMON_SUCCESS_MESSAGE\"\n\t\t\t) {\n\t\t\t\t// Check if both are generic success messages, then we show only one message.\n\t\t\t\tallMessagesToShow = oldUIDecisions.messagesToShow;\n\t\t\t} else {\n\t\t\t\tallMessagesToShow = Array.from(new Set([...oldUIDecisions.messagesToShow, ...newUIDecisions.messagesToShow]));\n\t\t\t}\n\t\t\tconst elements = [oldUIDecisions.uiElementToUse, newUIDecisions.uiElementToUse];\n\t\t\t// Default we show dialog\n\t\t\tlet uiElementToUse: SupportedUIElement = allMessagesToShow.length > 0 ? \"Dialog\" : \"None\";\n\n\t\t\tif (allMessagesToShow.length === 1) {\n\t\t\t\t// Single message, we check for specific UI Element to use.\n\t\t\t\tif (elements.includes(\"Toast\")) {\n\t\t\t\t\tuiElementToUse = \"Toast\";\n\t\t\t\t} else if (elements.includes(\"Box\")) {\n\t\t\t\t\tuiElementToUse = \"Box\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmergedUIDecision = {\n\t\t\t\tmessagesToShow: allMessagesToShow,\n\t\t\t\tuiElementToUse,\n\t\t\t\tcontextNeedsEtagRefresh: oldUIDecisions.contextNeedsEtagRefresh || newUIDecisions.contextNeedsEtagRefresh,\n\t\t\t\tcontainsBoundTransition: oldUIDecisions.containsBoundTransition || newUIDecisions.containsBoundTransition\n\t\t\t};\n\t\t} else {\n\t\t\tmergedUIDecision = newUIDecisions;\n\t\t}\n\t\tinternalModel.setProperty(\"/messageUIDecision\", mergedUIDecision);\n\t}\n\n\t/**\n\t * Remove held key.\n\t * @param inKey Key to remove.\n\t */\n\tremoveHoldKey(inKey?: string): void {\n\t\tif (inKey && this.holdKeys.includes(inKey)) {\n\t\t\tthis.holdKeys.splice(this.holdKeys.indexOf(inKey), 1);\n\t\t}\n\t}\n\n\t/**\n\t * Check if UI Element with messages should be shown.\n\t * @returns Boolean\n\t */\n\tcheckToShowUIElement(): boolean {\n\t\treturn this.holdMsgsToShow && (this.holdKeys.length > 0 ? false : true);\n\t}\n\n\t/**\n\t * Hold messages for the control.\n\t * @param control\n\t */\n\tholdMessagesForControl(control: Control): void {\n\t\tconst identifier = control.getId();\n\t\tthis.registerToHoldMessages(identifier);\n\t}\n\n\t/**\n\t * Release message hold by a control.\n\t * @param control\n\t */\n\tasync releaseHoldByControl(control?: Control): Promise<void> {\n\t\tconst identifier = control?.getId();\n\t\tthis.removeHoldKey(identifier);\n\t\tconst uiElementIsAvailable = this.base.getAppComponent().getModel(\"internal\")?.getProperty(\"/messageUIElementIsAvailable\");\n\t\t(this.base.getAppComponent().getModel(\"internal\") as JSONModel)?.setProperty(\n\t\t\t\"/messageUIElementIsAvailable\",\n\t\t\tuiElementIsAvailable?.then(\n\t\t\t\tasync function (this: MessageHandler): Promise<void> {\n\t\t\t\t\treturn this.showMessagesWithCondtions();\n\t\t\t\t}.bind(this)\n\t\t\t)\n\t\t);\n\t\tawait this.base.getAppComponent().getModel(\"internal\")?.getProperty(\"/messageUIElementIsAvailable\");\n\t}\n\n\t/**\n\t * Shows a message page or a message dialog based on the messages in the message dialog.\n\t * @param [parameters]\n\t * @returns A promise that is resolved once the user closes the message dialog or when navigation to the message page is complete. If there are no messages\n\t * to be shown, the promise is resolved immediately\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync showMessages(parameters?: ShowMessagesParameters): Promise<void | boolean | Dialog> {\n\t\tconst messagePageParameters = this._checkNavigationToErrorPage(parameters);\n\n\t\tif (messagePageParameters) {\n\t\t\t// navigate to message page.\n\t\t\t// handler before page navigation is triggered, for example to close the action parameter dialog\n\t\t\tif (parameters?.messagePageNavigationCallback) {\n\t\t\t\tparameters.messagePageNavigationCallback();\n\t\t\t}\n\n\t\t\tmessagePageParameters.handleShellBack = !parameters?.shellBack;\n\t\t\tthis.removeTransitionMessages();\n\t\t\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\n\t\t\treturn new Promise<boolean>((resolve, reject) => {\n\t\t\t\t// we have to set a timeout to be able to access the most recent messages\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t// clear all hold keys as we navigate to message page.\n\t\t\t\t\tthis.resetHoldKeys();\n\n\t\t\t\t\t// TODO: great API - will be changed later\n\t\t\t\t\tthis.base._routing\n\t\t\t\t\t\t.navigateToMessagePage(\n\t\t\t\t\t\t\tparameters?.isDataReceivedError === true\n\t\t\t\t\t\t\t\t? oResourceBundle.getText(\"C_COMMON_SAPFE_DATA_RECEIVED_ERROR\")\n\t\t\t\t\t\t\t\t: oResourceBundle.getText(\"C_MESSAGE_HANDLING_SAPFE_503_TITLE\"),\n\t\t\t\t\t\t\tmessagePageParameters\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.then(resolve)\n\t\t\t\t\t\t.catch(reject);\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t} else {\n\t\t\t// navigate to message dialog\n\t\t\treturn this.showMessageDialog(parameters);\n\t\t}\n\t}\n}\nexport default MessageHandler;\n"],"mappings":"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","ignoreList":[],"file":"MessageHandler-dbg.js"}