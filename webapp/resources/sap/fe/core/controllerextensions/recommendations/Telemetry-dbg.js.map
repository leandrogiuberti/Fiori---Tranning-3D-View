{"version":3,"names":["Telemetry","resetData","_proto","prototype","updateData","key","value","telemetryData","increaseCount","updateResponseTimeInfo","timeTaken","totalRecommendationCalls","maxTimeTakenToReceiveRecommendations","minTimeTakenToReceiveRecommendations","totalTimeTaken","avgTimeTaken","numberOfTimesRecommendationsFetched","averageTimeTakenToReceiveRecommendations","numberOfTimesNoPlaceholderIsShownOnUI","numberOfRecommendedFields","numberOfTimesTopRecommendationsSelected","numberOfTimesNonTopRecommendationsSelected","numberOfTimesNonRecommendedValueWasSelected","numberOfFieldsAcceptedThroughAcceptButton","numberOfFieldsIgnoredThroughIgnoreButton","numberOfTimesEmptyRecommendations","numberofTimesFormatterCalled","totalNumberOfRecommendationsReceived","numberOfTimesFormatterNotCalled","storeData","view","Object","keys","length","getController","telemetry","storeAction","type","parameters","getData","updateDataFromRecommendationResponse","recommendations","i","recommendation","target","AIRecommendedFieldPath","AIRecommendedFieldValue","AIRecommendedFieldDescription","_AIAltvRecmddFldVals","updateTelemetryDataBasedOnUserSelection","fieldPath","selectedValue","recommendationsData","getModel","getProperty","fieldRecommData","valueIndexInRecommendations","additionalValues","findIndex","additionalValue"],"sourceRoot":".","sources":["Telemetry.ts"],"sourcesContent":["import type { FEView } from \"sap/fe/core/BaseController\";\nimport type View from \"sap/ui/core/mvc/View\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type { RecommendationInfo, StandardRecommendationResponse } from \"../../helpers/StandardRecommendationHelper\";\nimport type { RecommendationTelemetry } from \"../../services/TelemetryServiceFactory\";\n\nclass Telemetry {\n\tprivate telemetryData!: RecommendationTelemetry;\n\n\tpublic constructor() {\n\t\tthis.resetData();\n\t}\n\n\tpublic updateData(key: keyof RecommendationTelemetry, value: number): void {\n\t\tthis.telemetryData[key] = value;\n\t}\n\n\tpublic increaseCount(key: keyof RecommendationTelemetry): number {\n\t\treturn ++this.telemetryData[key];\n\t}\n\n\t/**\n\t * This function will update details about the recommendation calls like min, max or avarage time taken for a particular recommendation call.\n\t * @param timeTaken\n\t */\n\tpublic updateResponseTimeInfo(timeTaken: number): void {\n\t\tconst totalRecommendationCalls = this.increaseCount(\"numberOfTimesRecommendationsFetched\");\n\n\t\t// update max time taken\n\t\tif (timeTaken > this.telemetryData.maxTimeTakenToReceiveRecommendations) {\n\t\t\tthis.updateData(\"maxTimeTakenToReceiveRecommendations\", timeTaken);\n\t\t}\n\t\t// update min time taken\n\t\tif (\n\t\t\tthis.telemetryData.minTimeTakenToReceiveRecommendations === 0 ||\n\t\t\ttimeTaken < this.telemetryData.minTimeTakenToReceiveRecommendations\n\t\t) {\n\t\t\tthis.updateData(\"minTimeTakenToReceiveRecommendations\", timeTaken);\n\t\t}\n\n\t\tconst totalTimeTaken = this.telemetryData.totalTimeTaken + timeTaken;\n\t\tconst avgTimeTaken = totalTimeTaken / totalRecommendationCalls;\n\t\tthis.updateData(\"averageTimeTakenToReceiveRecommendations\", avgTimeTaken);\n\t\tthis.updateData(\"totalTimeTaken\", totalTimeTaken);\n\t}\n\n\tpublic resetData(): void {\n\t\tthis.telemetryData = {\n\t\t\tnumberOfTimesRecommendationsFetched: 0,\n\t\t\tmaxTimeTakenToReceiveRecommendations: 0,\n\t\t\tminTimeTakenToReceiveRecommendations: 0,\n\t\t\taverageTimeTakenToReceiveRecommendations: 0,\n\t\t\tnumberOfTimesNoPlaceholderIsShownOnUI: 0,\n\t\t\tnumberOfRecommendedFields: 0,\n\t\t\tnumberOfTimesTopRecommendationsSelected: 0,\n\t\t\tnumberOfTimesNonTopRecommendationsSelected: 0,\n\t\t\tnumberOfTimesNonRecommendedValueWasSelected: 0,\n\t\t\tnumberOfFieldsAcceptedThroughAcceptButton: 0,\n\t\t\tnumberOfFieldsIgnoredThroughIgnoreButton: 0,\n\t\t\tnumberOfTimesEmptyRecommendations: 0,\n\t\t\tnumberofTimesFormatterCalled: 0,\n\t\t\ttotalNumberOfRecommendationsReceived: 0,\n\t\t\tnumberOfTimesFormatterNotCalled: 0,\n\t\t\ttotalTimeTaken: 0\n\t\t};\n\t}\n\n\tpublic storeData(view: FEView): void {\n\t\tif (Object.keys(this.telemetryData).length) {\n\t\t\t// update telemetry information, as per data collected earlier, before sending to backend\n\t\t\tthis.telemetryData[\"numberOfTimesFormatterNotCalled\"] =\n\t\t\t\tthis.telemetryData[\"totalNumberOfRecommendationsReceived\"] - this.telemetryData[\"numberofTimesFormatterCalled\"];\n\t\t}\n\t\tview.getController().telemetry.storeAction({\n\t\t\ttype: \"FE.Recommendations\",\n\t\t\tparameters: this.telemetryData\n\t\t});\n\t}\n\n\tpublic getData(): RecommendationTelemetry {\n\t\treturn this.telemetryData;\n\t}\n\n\t/**\n\t * This function will update telemetry data based on response we got.\n\t * @param recommendations Recommendations obtained from response.\n\t */\n\tpublic updateDataFromRecommendationResponse(recommendations: StandardRecommendationResponse[]): void {\n\t\tfor (let i = 0; i < recommendations.length; i++) {\n\t\t\tconst recommendation = recommendations[i];\n\t\t\tconst target = recommendation.AIRecommendedFieldPath;\n\t\t\tif (!(recommendation.AIRecommendedFieldValue && recommendation.AIRecommendedFieldDescription)) {\n\t\t\t\tthis.increaseCount(\"numberOfTimesNoPlaceholderIsShownOnUI\");\n\t\t\t}\n\t\t\tif (target) {\n\t\t\t\tif (recommendation._AIAltvRecmddFldVals?.length) {\n\t\t\t\t\tthis.increaseCount(\"totalNumberOfRecommendationsReceived\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This function will update data in telemetry as per top/non-top recommendation value was chosen or if non recommended value was chosen.\n\t * @param view\n\t * @param fieldPath\n\t * @param selectedValue\n\t */\n\tpublic updateTelemetryDataBasedOnUserSelection(view: View, fieldPath: string, selectedValue: string): void {\n\t\tconst recommendationsData = (view?.getModel(\"internal\") as JSONModel).getProperty(\"/recommendationsData\") as\n\t\t\t| RecommendationInfo\n\t\t\t| undefined;\n\t\tif (recommendationsData?.[fieldPath]) {\n\t\t\tconst fieldRecommData = recommendationsData[fieldPath];\n\t\t\tconst valueIndexInRecommendations = fieldRecommData.additionalValues?.findIndex(\n\t\t\t\t(additionalValue) => additionalValue.value === selectedValue\n\t\t\t);\n\n\t\t\tif (selectedValue == fieldRecommData.value) {\n\t\t\t\t// top recommendation was selected then store the data in telemetry\n\t\t\t\tthis.increaseCount(\"numberOfTimesTopRecommendationsSelected\");\n\t\t\t} else if (valueIndexInRecommendations !== -1) {\n\t\t\t\t// some other recommendation was selected\n\t\t\t\tthis.increaseCount(\"numberOfTimesNonTopRecommendationsSelected\");\n\t\t\t} else {\n\t\t\t\t// selected value is not from recommendations\n\t\t\t\tthis.increaseCount(\"numberOfTimesNonRecommendedValueWasSelected\");\n\t\t\t}\n\t\t}\n\t}\n}\nexport default Telemetry;\n"],"mappings":"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","ignoreList":[],"file":"Telemetry-dbg.js"}