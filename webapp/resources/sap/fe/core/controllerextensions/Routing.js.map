{"version":3,"file":"Routing.js","names":["Routing","_dec","defineUI5Class","_dec2","publicExtension","_dec3","extensible","_dec4","_dec5","finalExtension","_dec6","_dec7","OverrideExecution","After","_dec8","_dec9","_dec10","_dec11","_class","_class2","_BaseControllerExtens","apply","this","arguments","_inheritsLoose","_proto","prototype","onBeforeNavigation","async","mNavigationParameters","Promise","resolve","navigate","oContext","parameters","internalModel","base","getModel","setProperty","_routing","navigateToContext","onBeforeBinding","onAfterBinding","navigateToRoute","sTargetRouteName","oParameters","oMetaModel","getMetaModel","bIsStickyMode","ModelHelper","isStickySessionSupported","BaseControllerExtension","_applyDecoratedDescriptor","Object","getOwnPropertyDescriptor"],"sources":["./Routing.ts"],"sourcesContent":["import { defineUI5Class, extensible, finalExtension, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport BaseControllerExtension from \"sap/fe/core/controllerextensions/BaseControllerExtension\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\n\n/**\n * A controller extension offering hooks into the routing flow of the application\n * @hideconstructor\n * @public\n * @since 1.86.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.Routing\")\nclass Routing extends BaseControllerExtension {\n\tprivate base!: PageController;\n\n\t/**\n\t * This function can be used to intercept the routing event during the normal navigation process, such as when a table row is clicked to navigate, pagination buttons are used, the Apply button in an object page is clicked, or a sub-object page in a flexible column layout is closed.\n\t *\n\t * The function is NOT called during other means of external outbound navigation (like a navigation configured via a link, or by using navigation buttons).\n\t *\n\t * If declared as an extension, it allows you to intercept and change the normal navigation flow.\n\t * If you decide to do your own navigation processing, you can return `true` to prevent the default routing behavior.\n\t *\n\t * This function is meant to be individually overridden by consuming controllers, but not to be called directly.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param mNavigationParameters Object containing row context and page context\n\t * @param mNavigationParameters.bindingContext The target navigation context\n\t * @returns `true` to prevent the default execution, false to keep the standard behavior\n\t * @public\n\t * @since 1.86.0\n\t */\n\t@publicExtension()\n\t@extensible(\"AfterAsync\")\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tasync onBeforeNavigation(mNavigationParameters: { bindingContext: Context }): Promise<boolean> {\n\t\t// to be overriden by the application\n\t\treturn Promise.resolve(false);\n\t}\n\n\t/**\n\t * Allows navigation to a specific context.\n\t * @param oContext Object containing the context to be navigated to\n\t * @param parameters Object containing the parameters for the navigation\n\t * @param parameters.preserveHistory  By default, the internal algorithm decides whether the navigation preserves the previous entry. This parameter allows you to override this behavior.\n\t * @public\n\t * @since 1.90.0\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tnavigate(oContext: Context, parameters?: { preserveHistory: boolean }): void {\n\t\tconst internalModel = this.base.getModel(\"internal\") as JSONModel;\n\t\t// We have to delete the internal model value for \"paginatorCurrentContext\" to ensure it is re-evaluated by the navigateToContext function\n\t\t// BCP: 2270123820\n\t\tinternalModel.setProperty(\"/paginatorCurrentContext\", null);\n\t\tthis.base._routing.navigateToContext(oContext, parameters);\n\t}\n\n\t/**\n\t * This function is used to intercept the routing event before binding a page.\n\t *\n\t * If it is declared as an extension, it allows you to intercept and change the normal flow of binding.\n\t *\n\t * This function is not called directly, but overridden separately by consuming controllers.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oContext Object containing the context for the navigation\n\t * @public\n\t * @since 1.90.0\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonBeforeBinding(oContext: object | null): void {\n\t\t// to be overriden by the application\n\t}\n\n\t/**\n\t * This function is used to intercept the routing event after binding a page.\n\t *\n\t * If it is declared as an extension, it allows you to intercept and change the normal flow of binding.\n\t *\n\t * This function is not called directly, but overridden separately by consuming controllers.\n\t * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.\n\t * @param oContext Object containing the context to be navigated\n\t * @public\n\t * @since 1.90.0\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonAfterBinding(oContext: object | null): void {\n\t\t// to be overriden by the application\n\t}\n\n\t/**\n\t * Navigate to another target.\n\t * @param sTargetRouteName Name of the target route\n\t * @param oParameters Parameters to be used with route to create the target hash\n\t * @param oParameters.bIsStickyMode PRIVATE\n\t * @param oParameters.preserveHistory PRIVATE\n\t * @returns Promise that is resolved when the navigation is finalized\n\t * @public\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync navigateToRoute(\n\t\tsTargetRouteName: string,\n\t\toParameters?: { bIsStickyMode?: boolean; preserveHistory?: boolean }\n\t): Promise<boolean> {\n\t\tconst oMetaModel = this.base.getModel().getMetaModel();\n\t\tconst bIsStickyMode = ModelHelper.isStickySessionSupported(oMetaModel);\n\t\tif (!oParameters) {\n\t\t\toParameters = {};\n\t\t}\n\t\toParameters.bIsStickyMode = bIsStickyMode;\n\t\treturn this.base._routing.navigateToRoute(sTargetRouteName, oParameters);\n\t}\n}\n\nexport default Routing;\n"],"mappings":";;;;s7BAQA,IAOMA,GAAOC,EADZC,EAAe,4CAA2CC,EAoBzDC,IAAiBC,EACjBC,EAAW,cAAaC,EAexBH,IAAiBI,EACjBC,IAAgBC,EAoBhBN,IAAiBO,EACjBL,EAAWM,EAAkBC,OAAMC,EAiBnCV,IAAiBW,EACjBT,EAAWM,EAAkBC,OAAMG,EAenCZ,IAAiBa,EACjBR,IAAgBR,EAAAiB,GAAAC,EAAA,SAAAC,GAAA,SAAApB,IAAA,OAAAoB,EAAAC,MAAAC,KAAAC,YAAAD,IAAA,CAAAE,EAAAxB,EAAAoB,GAAA,IAAAK,EAAAzB,EAAA0B,UAxFjBD,EAmBME,mBAHNC,eAGMD,EAAmBE,GAExB,OAAOC,QAAQC,QAAQ,MACxB,EAEAN,EAUAO,SAFA,SAEAA,EAASC,EAAmBC,GAC3B,MAAMC,EAAgBb,KAAKc,KAAKC,SAAS,YAGzCF,EAAcG,YAAY,2BAA4B,MACtDhB,KAAKc,KAAKG,SAASC,kBAAkBP,EAAUC,EAChD,EAEAT,EAcAgB,gBAHA,SAGAA,EAAgBR,GACf,EAGDR,EAcAiB,eAHA,SAGAA,EAAeT,GACd,EAGDR,EAWMkB,gBAFNf,eAEMe,EACLC,EACAC,GAEA,MAAMC,EAAaxB,KAAKc,KAAKC,WAAWU,eACxC,MAAMC,EAAgBC,EAAYC,yBAAyBJ,GAC3D,IAAKD,EAAa,CACjBA,EAAc,CAAC,CAChB,CACAA,EAAYG,cAAgBA,EAC5B,OAAO1B,KAAKc,KAAKG,SAASI,gBAAgBC,EAAkBC,EAC7D,EAAC,OAAA7C,CAAA,CAZgB,CA3FImD,GAAuBC,EAAAjC,EAAAO,UAAA,sBAAAvB,EAAAE,GAAAgD,OAAAC,yBAAAnC,EAAAO,UAAA,sBAAAP,EAAAO,WAAA0B,EAAAjC,EAAAO,UAAA,YAAAnB,EAAAC,GAAA6C,OAAAC,yBAAAnC,EAAAO,UAAA,YAAAP,EAAAO,WAAA0B,EAAAjC,EAAAO,UAAA,mBAAAhB,EAAAC,GAAA0C,OAAAC,yBAAAnC,EAAAO,UAAA,mBAAAP,EAAAO,WAAA0B,EAAAjC,EAAAO,UAAA,kBAAAZ,EAAAC,GAAAsC,OAAAC,yBAAAnC,EAAAO,UAAA,kBAAAP,EAAAO,WAAA0B,EAAAjC,EAAAO,UAAA,mBAAAV,EAAAC,GAAAoC,OAAAC,yBAAAnC,EAAAO,UAAA,mBAAAP,EAAAO,WAAAP,KAAAD,GAAA,OA0G9BlB,CAAO","ignoreList":[]}