{"version":3,"file":"InternalIntentBasedNavigation.js","names":["InternalIntentBasedNavigation","_dec","defineUI5Class","_dec2","methodOverride","_dec3","publicExtension","_dec4","finalExtension","_dec5","_dec6","_dec7","_dec8","extensible","OverrideExecution","Instead","_dec9","_dec10","_dec11","privateExtension","_dec12","_dec13","_dec14","_dec15","_dec16","_dec17","_dec18","_dec19","_dec20","_dec21","_dec22","_dec23","_class","_class2","_ControllerExtension","call","this","_inheritsLoose","_proto","prototype","onInit","_oAppComponent","base","getAppComponent","_oMetaModel","getModel","getMetaModel","_oNavigationService","getNavigationService","_oView","getView","navigate","semanticObject","action","navigationParameters","source","navigationAlreadyStarted","_doNavigate","vNavigationContexts","navigationContexts","aNavigationContexts","Array","isArray","vSemanticObjectMapping","semanticObjectMapping","vOutboundParams","additionalNavigationParameters","oTargetInfo","oView","oController","getController","aSemanticAttributes","oSelectionVariant","SelectionVariant","length","forEach","oNavigationContext","oNavigationContextAsContext","oNavigationContextAsObject","isA","oSemanticAttributes","getObject","sMetaPath","getMetaPath","getPath","finalSemanticAttributes","processSemanticAttributes","removeSensitiveData","oNavContext","prepareContextForExternalNavigation","propertiesWithoutConflict","push","semanticAttributes","data","metaPath","mixAttributesAndSelectionVariant","toJSONString","oModel","sEntitySet","getEntitySet","sContextUrl","constructContextUrl","undefined","setFilterContextUrl","_applyOutboundParams","intentBasedNavigation","adaptNavigationContext","_applySemanticObjectMappings","_removeTechnicalParameters","sNavMode","_intentBasedNavigation","getNavigationMode","mRefreshStrategies","refreshStrategies","oInternalModel","getViewData","refreshStrategyOnAppRestore","mViewRefreshStrategies","mergeObjects","mRefreshStrategy","KeepAliveHelper","getRefreshStrategyForIntent","setProperty","navMode","onError","sap","ui","require","MessageBoxClass","oResourceBundle","Library","getResourceBundleFor","error","getText","title","Error","oBindingContext","getBindingContext","oMetaModel","converterType","ModelHelper","isStickySessionSupported","draft","processDataLossOrDraftDiscardConfirmation","bind","Function","NavigationType","ForwardNavigation","oContext","oDistinctKeys","sContextPath","aMetaPathParts","split","filter","Boolean","_findDistinctKeysInObject","LookUpObject","sLookUpObjectMetaPath","sKey","oNewLookUpObject","sMainEntitySetName","sMainEntityTypeName","oPropertiesWithoutConflict","sMainEntityValuePath","sCurrentValuePath","sLastValuePath","originalContextKeys","Object","keys","removedContextKeys","key","includes","sDistinctKey","aConflictingPaths","sWinnerValuePath","i","sPath","sPathInContext","replace","sEntityTypeName","sValue","join","getProperty","sProperty","navigateWithConfirmationDialog","async","sSemanticObject","sAction","mNavigationParameters","shouldContinue","notApplicableContexts","metaModel","entitySetPath","convertedMetadata","convertTypes","entitySet","resolvePath","target","notApplicableContextsDialog","NotApplicableContextDialog","entityType","resourceModel","getResourceModel","applicableContexts","name","actionName","open","removeSelectOption","oAttributes","transAggregations","customAggregates","_getAggregates","getDiagnostics","aProperties","element","_deleteAggregates","aPropertyAnnotations","_getPropertyAnnotations","PersonalData","IsPotentiallySensitive","UI","ExcludeFromNavigationContext","Analytics","Measure","Common","FieldControl","oFieldControl","_isFieldControlPathInapplicable","aggregates","sProp","createBindingContext","oFullContext","MetaModelConverter","getInvolvedDataModelObjects","targetObject","annotations","oDiagnostics","converterContext","_getConverterContext","aggregationHelper","AggregationHelper","getEntityType","isAnalyticsSupported","transAggregationsPreprocessing","getTransAggregations","map","transAgg","Name","Value","getCustomAggregateDefinitions","customAggregate","qualifier","oViewData","contextPath","fullContextPath","CommonUtils","getConverterContextForPath","sFieldControlPath","oAttribute","bInapplicable","aParts","hasOwnProperty","vMappings","oMappings","JSON","parse","item","sLocalProperty","sSemanticObjectProperty","oSelectOption","getSelectOption","renameSelectOption","storeFocusInfoInHistory","focusInfo","focusControl","Element","getActiveElement","focusControlId","getId","focusMDCTable","FPMHelper","getMdcTable","type","controlId","tableId","contextPathFocus","history","replaceState","assign","state","navigateOutbound","sOutbound","aNavParams","oManifestEntry","getManifestEntry","oOutbound","crossNavigation","outbounds","Log","outboundParams","parameters","getOutboundParams","oParams","navParameterValue","aParameters","aSelectProperties","getSelectOptionsPropertyNames","addSelectOption","oOutboundParams","oParamsMapping","oMapping","value","format","onChevronPressNavigateOutBound","sOutboundTarget","sCreatePath","oOutbounds","getRoutingService","getOutbounds","oDisplayOutbound","oRefreshStrategies","intents","oDefaultRefreshStrategy","getMetaPathForContext","RefreshStrategyType","Self","_feDefault","Promise","resolve","context","pathsToRetain","bKeepNavProperties","keepNavigationPropertiesForNavigation","getSemanticAttributesWithoutNavigationProperties","manifest","app","considerNavigationPropertiesForExternalNavigation","ret","navProperties","getNavigationPropertiesFromEntityType","navProp","navPropName","propertyPath","navigationProperties","ControllerExtension","_applyDecoratedDescriptor","getOwnPropertyDescriptor"],"sources":["./InternalIntentBasedNavigation.ts"],"sourcesContent":["import type { EntitySet, EntityType, NavigationProperty, Property } from \"@sap-ux/vocabularies-types\";\nimport type { PropertyAnnotations } from \"@sap-ux/vocabularies-types/vocabularies/Edm_Types\";\nimport Log from \"sap/base/Log\";\nimport mergeObjects from \"sap/base/util/merge\";\nimport { defineUI5Class, extensible, finalExtension, methodOverride, privateExtension, publicExtension } from \"sap/fe/base/ClassSupport\";\nimport type AppComponent from \"sap/fe/core/AppComponent\";\nimport type { FEView } from \"sap/fe/core/BaseController\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type PageController from \"sap/fe/core/PageController\";\nimport NotApplicableContextDialog from \"sap/fe/core/controllerextensions/editFlow/NotApplicableContextDialog\";\nimport draft from \"sap/fe/core/controllerextensions/editFlow/draft\";\nimport type ConverterContext from \"sap/fe/core/converters/ConverterContext\";\nimport * as MetaModelConverter from \"sap/fe/core/converters/MetaModelConverter\";\nimport { convertTypes } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport FPMHelper from \"sap/fe/core/helpers/FPMHelper\";\nimport KeepAliveHelper from \"sap/fe/core/helpers/KeepAliveHelper\";\nimport type { RefreshStrategies, SORefreshStrategy } from \"sap/fe/core/helpers/KeepAliveRefreshTypes\";\nimport { RefreshStrategyType } from \"sap/fe/core/helpers/KeepAliveRefreshTypes\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type { NavigationService } from \"sap/fe/core/services/NavigationServiceFactory\";\nimport type Diagnostics from \"sap/fe/core/support/Diagnostics\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type MessageBox from \"sap/m/MessageBox\";\nimport type Control from \"sap/ui/core/Control\";\nimport Element from \"sap/ui/core/Element\";\nimport Library from \"sap/ui/core/Lib\";\nimport type { ManifestOutboundEntryParameter } from \"sap/ui/core/Manifest\";\nimport ControllerExtension from \"sap/ui/core/mvc/ControllerExtension\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type Context from \"sap/ui/model/Context\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport { AggregationHelper } from \"../converters/helpers/Aggregation\";\n\n/**\n * Navigation Parameters used during navigation\n */\nexport type NavigationParameters = {\n\t/**\n\t * Single instance or multiple instances of {@link sap.ui.model.odata.v4.Context}, or alternatively an object or array of objects, to be passed to the intent.\n\t */\n\tnavigationContexts?: object | ODataV4Context[];\n\t/**\n\t * String representation of SemanticObjectMapping or SemanticObjectMapping that applies to this navigation.\n\t */\n\tsemanticObjectMapping?: string | object;\n\tdefaultRefreshStrategy?: object;\n\trefreshStrategies?: RefreshStrategies;\n\tadditionalNavigationParameters?: Record<string, string>;\n\t/**\n\t * Single instance or multiple instances of {@link sap.ui.model.odata.v4.Context}, or alternatively an object or array of objects, to be passed to the intent and for which the IBN button is enabled\n\t */\n\tapplicableContexts?: ODataV4Context[];\n\t/**\n\t * Single instance or multiple instances of {@link sap.ui.model.odata.v4.Context}, or alternatively an object or array of objects, which cannot be passed to the intent.\n\t * \tif an array of contexts is passed the context is used to determine the meta path and accordingly remove the sensitive data\n\t * If an array of objects is passed, the following format is expected:\n\t * {\n\t * \tdata: {\n\t * \t\tProductID: 7634,\n\t * \t\t\tName: \"Laptop\"\n\t * \t},\n\t * \tmetaPath: \"/SalesOrderManage\"\n\t * }\n\t * The metaPath is used to remove any sensitive data.\n\t */\n\tnotApplicableContexts?: ODataV4Context[];\n\n\tlabel?: string;\n\tnavMode?: string;\n};\n/**\n * {@link sap.ui.core.mvc.ControllerExtension Controller extension}\n * @since 1.84.0\n */\n@defineUI5Class(\"sap.fe.core.controllerextensions.InternalInternalBasedNavigation\")\nclass InternalIntentBasedNavigation extends ControllerExtension {\n\tprotected base!: PageController;\n\n\tprivate _oAppComponent!: AppComponent;\n\n\tprivate _oMetaModel!: ODataMetaModel;\n\n\tprivate _oNavigationService!: NavigationService;\n\n\tprivate _oView!: FEView;\n\n\tnavigationAlreadyStarted: boolean | undefined;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t@methodOverride()\n\tonInit(): void {\n\t\tthis._oAppComponent = this.base.getAppComponent();\n\t\tthis._oMetaModel = this._oAppComponent.getModel().getMetaModel();\n\t\tthis._oNavigationService = this._oAppComponent.getNavigationService();\n\t\tthis._oView = this.base.getView();\n\t}\n\n\t/**\n\t * Enables intent-based navigation (SemanticObject-Action) with the provided context.\n\t * If semantic object mapping is provided, this is also applied to the selection variant after the adaptation by a consumer.\n\t * This takes care of removing any technical parameters and determines if an explace or inplace navigation should take place.\n\t * @param semanticObject Semantic object for the target app\n\t * @param action  Action for the target app\n\t * @param [navigationParameters] Optional parameters to be passed to the external navigation\n\t * @param [navigationParameters.navigationContexts] Uses one of the following to be passed to the intent:\n\t *    a single instance of {@link sap.ui.model.odata.v4.Context}\n\t *    multiple instances of {@link sap.ui.model.odata.v4.Context}\n\t *    an object or an array of objects\n\t *\t\t  If an array of objects is passed, the context is used to determine the metaPath and to remove any sensitive data\n\t *\t\t  If an array of objects is passed, the following format ix expected:\n\t *\t\t  {\n\t *\t\t\tdata: {\n\t *\t \t\t\tProductID: 7634,\n\t *\t\t\t\tName: \"Laptop\"\n\t *\t\t\t },\n\t *\t\t\t metaPath: \"/SalesOrderManage\"\n\t *        }\n\t * @param [navigationParameters.semanticObjectMapping] String representation of the SemanticObjectMapping or SemanticObjectMapping that applies to this navigation\n\t * @param [navigationParameters.defaultRefreshStrategy] Default refresh strategy to be used in case no refresh strategy is specified for the intent in the view.\n\t * @param [navigationParameters.refreshStrategies]\n\t * @param [navigationParameters.additionalNavigationParameters] Additional navigation parameters configured in the crossAppNavigation outbound parameters.\n\t * @param source The control object of the navigation source.\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tnavigate(semanticObject: string, action: string, navigationParameters?: NavigationParameters, source?: Control): void {\n\t\ttry {\n\t\t\tif (this.navigationAlreadyStarted !== true) {\n\t\t\t\tthis.navigationAlreadyStarted = true;\n\t\t\t\tconst _doNavigate = (): void => {\n\t\t\t\t\tconst vNavigationContexts: object | ODataV4Context[] | undefined =\n\t\t\t\t\t\tnavigationParameters && navigationParameters.navigationContexts;\n\t\t\t\t\tconst aNavigationContexts: undefined | (ODataV4Context | object)[] =\n\t\t\t\t\t\tvNavigationContexts && !Array.isArray(vNavigationContexts) ? [vNavigationContexts] : vNavigationContexts;\n\t\t\t\t\tconst vSemanticObjectMapping = navigationParameters && navigationParameters.semanticObjectMapping,\n\t\t\t\t\t\tvOutboundParams = navigationParameters && navigationParameters.additionalNavigationParameters,\n\t\t\t\t\t\toTargetInfo: { semanticObject: string; action: string; propertiesWithoutConflict?: Record<string, string> } = {\n\t\t\t\t\t\t\tsemanticObject: semanticObject,\n\t\t\t\t\t\t\taction: action\n\t\t\t\t\t\t},\n\t\t\t\t\t\toView = this.base.getView(),\n\t\t\t\t\t\toController = oView.getController();\n\n\t\t\t\t\tif (semanticObject && action) {\n\t\t\t\t\t\tlet aSemanticAttributes: unknown[] = [],\n\t\t\t\t\t\t\toSelectionVariant = new SelectionVariant();\n\t\t\t\t\t\t// 1. get SemanticAttributes for navigation\n\t\t\t\t\t\tif (aNavigationContexts && aNavigationContexts.length) {\n\t\t\t\t\t\t\taNavigationContexts.forEach((oNavigationContext) => {\n\t\t\t\t\t\t\t\t// 1.1.a if navigation context is instance of sap.ui.mode.odata.v4.Context\n\t\t\t\t\t\t\t\t// else check if navigation context is of type object\n\t\t\t\t\t\t\t\tconst oNavigationContextAsContext = oNavigationContext as ODataV4Context;\n\t\t\t\t\t\t\t\tconst oNavigationContextAsObject = oNavigationContext as\n\t\t\t\t\t\t\t\t\t| { data: unknown[] | Record<string, unknown>; metaPath: string }\n\t\t\t\t\t\t\t\t\t| undefined;\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\toNavigationContextAsContext.isA &&\n\t\t\t\t\t\t\t\t\toNavigationContextAsContext.isA<ODataV4Context>(\"sap.ui.model.odata.v4.Context\")\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t// 1.1.b remove sensitive data\n\t\t\t\t\t\t\t\t\tlet oSemanticAttributes = oNavigationContextAsContext.getObject();\n\t\t\t\t\t\t\t\t\tconst sMetaPath = this._oMetaModel.getMetaPath(oNavigationContextAsContext.getPath());\n\t\t\t\t\t\t\t\t\t// TODO: also remove sensitive data from  navigation properties\n\t\t\t\t\t\t\t\t\tconst finalSemanticAttributes = this.processSemanticAttributes(\n\t\t\t\t\t\t\t\t\t\toNavigationContextAsContext,\n\t\t\t\t\t\t\t\t\t\toSemanticAttributes\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\toSemanticAttributes = this.removeSensitiveData(finalSemanticAttributes, sMetaPath);\n\t\t\t\t\t\t\t\t\tconst oNavContext = this.prepareContextForExternalNavigation(\n\t\t\t\t\t\t\t\t\t\tfinalSemanticAttributes,\n\t\t\t\t\t\t\t\t\t\toNavigationContextAsContext\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\toTargetInfo[\"propertiesWithoutConflict\"] = oNavContext.propertiesWithoutConflict;\n\t\t\t\t\t\t\t\t\taSemanticAttributes.push(oNavContext.semanticAttributes);\n\t\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\t\toNavigationContextAsObject &&\n\t\t\t\t\t\t\t\t\t!(oNavigationContextAsObject && Array.isArray(oNavigationContextAsObject.data)) &&\n\t\t\t\t\t\t\t\t\ttypeof oNavigationContext === \"object\"\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t// 1.1.b remove sensitive data from object\n\t\t\t\t\t\t\t\t\taSemanticAttributes.push(\n\t\t\t\t\t\t\t\t\t\tthis.removeSensitiveData(oNavigationContextAsObject.data, oNavigationContextAsObject.metaPath)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else if (oNavigationContextAsObject && Array.isArray(oNavigationContextAsObject.data)) {\n\t\t\t\t\t\t\t\t\t// oNavigationContext.data can be array already ex : [{Customer: \"10001\"}, {Customer: \"10091\"}]\n\t\t\t\t\t\t\t\t\t// hence assigning it to the aSemanticAttributes\n\t\t\t\t\t\t\t\t\taSemanticAttributes = this.removeSensitiveData(\n\t\t\t\t\t\t\t\t\t\toNavigationContextAsObject.data,\n\t\t\t\t\t\t\t\t\t\toNavigationContextAsObject.metaPath\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// 2.1 Merge base selection variant and sanitized semantic attributes into one SelectionVariant\n\t\t\t\t\t\tif (aSemanticAttributes && aSemanticAttributes.length) {\n\t\t\t\t\t\t\toSelectionVariant = this._oNavigationService.mixAttributesAndSelectionVariant(\n\t\t\t\t\t\t\t\taSemanticAttributes,\n\t\t\t\t\t\t\t\toSelectionVariant.toJSONString()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 3. Add filterContextUrl to SV so the NavigationHandler can remove any sensitive data based on view entitySet\n\t\t\t\t\t\tconst oModel = this._oView.getModel(),\n\t\t\t\t\t\t\tsEntitySet = this.getEntitySet(),\n\t\t\t\t\t\t\tsContextUrl = sEntitySet ? this._oNavigationService.constructContextUrl(sEntitySet, oModel) : undefined;\n\t\t\t\t\t\tif (sContextUrl) {\n\t\t\t\t\t\t\toSelectionVariant.setFilterContextUrl(sContextUrl);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Apply Outbound Parameters to the SV\n\t\t\t\t\t\tif (vOutboundParams) {\n\t\t\t\t\t\t\tthis._applyOutboundParams(oSelectionVariant, vOutboundParams);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 4. give an opportunity for the application to influence the SelectionVariant\n\t\t\t\t\t\toController.intentBasedNavigation.adaptNavigationContext(oSelectionVariant, oTargetInfo);\n\n\t\t\t\t\t\t// 5. Apply semantic object mappings to the SV\n\t\t\t\t\t\tif (vSemanticObjectMapping) {\n\t\t\t\t\t\t\tthis._applySemanticObjectMappings(oSelectionVariant, vSemanticObjectMapping);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 6. remove technical parameters from Selection Variant\n\t\t\t\t\t\tthis._removeTechnicalParameters(oSelectionVariant);\n\n\t\t\t\t\t\t// 7. check if programming model is sticky and page is editable\n\t\t\t\t\t\tlet sNavMode: string | undefined = oController._intentBasedNavigation.getNavigationMode();\n\n\t\t\t\t\t\t// 8. Updating refresh strategy in internal model\n\t\t\t\t\t\tconst mRefreshStrategies = (navigationParameters && navigationParameters.refreshStrategies) || {},\n\t\t\t\t\t\t\toInternalModel = oView.getModel(\"internal\");\n\t\t\t\t\t\tif (oInternalModel) {\n\t\t\t\t\t\t\tif ((oView && oView.getViewData()).refreshStrategyOnAppRestore) {\n\t\t\t\t\t\t\t\tconst mViewRefreshStrategies = oView.getViewData().refreshStrategyOnAppRestore || {};\n\t\t\t\t\t\t\t\tmergeObjects(mRefreshStrategies, mViewRefreshStrategies);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst mRefreshStrategy = KeepAliveHelper.getRefreshStrategyForIntent(\n\t\t\t\t\t\t\t\tmRefreshStrategies,\n\t\t\t\t\t\t\t\tsemanticObject,\n\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (mRefreshStrategy) {\n\t\t\t\t\t\t\t\toInternalModel.setProperty(\"/refreshStrategyOnAppRestore\", mRefreshStrategy);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// 9. Check if navMode parameter is set and use it\n\t\t\t\t\t\tsNavMode = navigationParameters?.navMode ? navigationParameters?.navMode : sNavMode;\n\n\t\t\t\t\t\t// 10. Navigate via NavigationHandler\n\t\t\t\t\t\tconst onError = function (): void {\n\t\t\t\t\t\t\tsap.ui.require([\"sap/m/MessageBox\"], function (MessageBoxClass: typeof MessageBox) {\n\t\t\t\t\t\t\t\tconst oResourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\t\t\t\t\t\t\t\tMessageBoxClass.error(oResourceBundle.getText(\"C_COMMON_HELPER_NAVIGATION_ERROR_MESSAGE\"), {\n\t\t\t\t\t\t\t\t\ttitle: oResourceBundle.getText(\"C_COMMON_SAPFE_ERROR\")\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis._oNavigationService.navigate(\n\t\t\t\t\t\t\tsemanticObject,\n\t\t\t\t\t\t\taction,\n\t\t\t\t\t\t\toSelectionVariant.toJSONString(),\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tonError,\n\t\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\tsNavMode\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"Semantic Object/action is not provided\");\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tif (source?.data(\"debounce\")) return; //debouncing the IBN navigation\n\t\t\t\tsource?.data(\"debounce\", true);\n\t\t\t\tconst oBindingContext = this.base.getView().getBindingContext();\n\t\t\t\tconst oMetaModel = oBindingContext && oBindingContext.getModel().getMetaModel();\n\t\t\t\tif (\n\t\t\t\t\tthis.base.getView().getViewData().converterType === \"ObjectPage\" &&\n\t\t\t\t\toMetaModel &&\n\t\t\t\t\t!ModelHelper.isStickySessionSupported(oMetaModel) &&\n\t\t\t\t\t!(navigationParameters?.navMode === \"explace\")\n\t\t\t\t) {\n\t\t\t\t\tdraft.processDataLossOrDraftDiscardConfirmation(\n\t\t\t\t\t\t_doNavigate.bind(this),\n\t\t\t\t\t\tFunction.prototype,\n\t\t\t\t\t\tthis.base.getView().getBindingContext(),\n\t\t\t\t\t\tthis.base.getView().getController(),\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\tdraft.NavigationType.ForwardNavigation\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t_doNavigate();\n\t\t\t\t}\n\t\t\t\tsource?.data(\"debounce\", false);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.navigationAlreadyStarted = false;\n\t\t}\n\t}\n\n\t/**\n\t * Prepare attributes to be passed to external navigation.\n\t * @param oSemanticAttributes Context data after removing all sensitive information.\n\t * @param oContext Actual context from which the semanticAttributes were derived.\n\t * @returns Object of prepared attributes for external navigation and no conflict properties.\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tprepareContextForExternalNavigation(\n\t\toSemanticAttributes: Record<string, unknown>,\n\t\toContext: Context\n\t): { semanticAttributes: unknown; propertiesWithoutConflict: Record<string, string> } {\n\t\t// 1. Find all distinct keys in the object SemanticAttributes\n\t\t// Store meta path for each occurence of the key\n\t\tconst oDistinctKeys: Record<string, string[]> = {},\n\t\t\tsContextPath = oContext.getPath(),\n\t\t\toMetaModel = oContext.getModel().getMetaModel() as ODataMetaModel,\n\t\t\tsMetaPath = oMetaModel.getMetaPath(sContextPath),\n\t\t\taMetaPathParts = sMetaPath.split(\"/\").filter(Boolean);\n\n\t\tfunction _findDistinctKeysInObject(LookUpObject: Record<string, unknown>, sLookUpObjectMetaPath: string): void {\n\t\t\tfor (const sKey in LookUpObject) {\n\t\t\t\t// null case??\n\t\t\t\tif (LookUpObject[sKey] === null || typeof LookUpObject[sKey] !== \"object\") {\n\t\t\t\t\tif (!oDistinctKeys[sKey]) {\n\t\t\t\t\t\t// if key is found for the first time then create array\n\t\t\t\t\t\toDistinctKeys[sKey] = [];\n\t\t\t\t\t}\n\t\t\t\t\t// push path to array\n\t\t\t\t\toDistinctKeys[sKey].push(sLookUpObjectMetaPath);\n\t\t\t\t} else {\n\t\t\t\t\t// if a nested object is found\n\t\t\t\t\tconst oNewLookUpObject = LookUpObject[sKey];\n\t\t\t\t\t_findDistinctKeysInObject(oNewLookUpObject as Record<string, unknown>, `${sLookUpObjectMetaPath}/${sKey}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_findDistinctKeysInObject(oSemanticAttributes, sMetaPath);\n\n\t\t// 2. Determine distinct key value and add conflicted paths to semantic attributes\n\t\tconst sMainEntitySetName = aMetaPathParts[0],\n\t\t\tsMainEntityTypeName = oMetaModel.getObject(`/${sMainEntitySetName}/@sapui.name`),\n\t\t\toPropertiesWithoutConflict: Record<string, string> = {};\n\t\tlet sMainEntityValuePath, sCurrentValuePath, sLastValuePath;\n\t\tconst originalContextKeys = Object.keys(oContext.getObject()) || [];\n\t\tconst removedContextKeys = originalContextKeys.filter((key) => !Object.keys(oSemanticAttributes as object).includes(key));\n\t\tfor (const sDistinctKey in oDistinctKeys) {\n\t\t\tif (removedContextKeys.includes(sDistinctKey)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst aConflictingPaths = oDistinctKeys[sDistinctKey];\n\t\t\tlet sWinnerValuePath;\n\t\t\t// Find winner value for each distinct key in case of conflict by the following rule:\n\n\t\t\t// -> A. if any meta path for a distinct key is the same as main entity take that as the value\n\t\t\t// -> B. if A is not met keep the value from the current context (sMetaPath === path of distince key)\n\t\t\t// -> C. if A, B or C are not met take the last path for value\n\t\t\tif (aConflictingPaths.length > 1) {\n\t\t\t\t// conflict\n\t\t\t\tfor (let i = 0; i <= aConflictingPaths.length - 1; i++) {\n\t\t\t\t\tconst sPath = aConflictingPaths[i];\n\t\t\t\t\tlet sPathInContext = sPath.replace(sPath === sMetaPath ? sMetaPath : `${sMetaPath}/`, \"\");\n\t\t\t\t\tsPathInContext = (sPathInContext === \"\" ? sPathInContext : `${sPathInContext}/`) + sDistinctKey;\n\t\t\t\t\tconst sEntityTypeName = oMetaModel.getObject(`${sPath}/@sapui.name`);\n\t\t\t\t\t// rule A\n\n\t\t\t\t\t// rule A\n\t\t\t\t\tif (sEntityTypeName === sMainEntityTypeName) {\n\t\t\t\t\t\tsMainEntityValuePath = sPathInContext;\n\t\t\t\t\t}\n\n\t\t\t\t\t// rule B\n\t\t\t\t\tif (sPath === sMetaPath) {\n\t\t\t\t\t\tsCurrentValuePath = sPathInContext;\n\t\t\t\t\t}\n\n\t\t\t\t\t// rule C\n\t\t\t\t\tsLastValuePath = sPathInContext;\n\n\t\t\t\t\t// add conflicted path to semantic attributes\n\t\t\t\t\t// check if the current path points to main entity and prefix attribute names accordingly\n\t\t\t\t\toSemanticAttributes[\n\t\t\t\t\t\t`${sMetaPath}/${sPathInContext}`\n\t\t\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t\t\t.filter(function (sValue: string) {\n\t\t\t\t\t\t\t\treturn sValue != \"\";\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.join(\".\")\n\t\t\t\t\t] = oContext.getProperty(sPathInContext);\n\t\t\t\t}\n\t\t\t\t// A || B || C\n\t\t\t\tsWinnerValuePath = sMainEntityValuePath || sCurrentValuePath || sLastValuePath;\n\t\t\t\toSemanticAttributes[sDistinctKey] = oContext.getProperty(sWinnerValuePath as string);\n\t\t\t\tsMainEntityValuePath = undefined;\n\t\t\t\tsCurrentValuePath = undefined;\n\t\t\t\tsLastValuePath = undefined;\n\t\t\t} else {\n\t\t\t\t// no conflict, add distinct key without adding paths\n\t\t\t\tconst sPath = aConflictingPaths[0]; // because there is only one and hence no conflict\n\t\t\t\tlet sPathInContext = sPath.replace(sPath === sMetaPath ? sMetaPath : `${sMetaPath}/`, \"\");\n\t\t\t\tsPathInContext = (sPathInContext === \"\" ? sPathInContext : `${sPathInContext}/`) + sDistinctKey;\n\t\t\t\toSemanticAttributes[sDistinctKey] = oContext.getProperty(sPathInContext);\n\t\t\t\toPropertiesWithoutConflict[sDistinctKey] = `${sMetaPath}/${sPathInContext}`\n\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t.filter(function (sValue: string) {\n\t\t\t\t\t\treturn sValue != \"\";\n\t\t\t\t\t})\n\t\t\t\t\t.join(\".\");\n\t\t\t}\n\t\t}\n\t\t// 3. Remove all Navigation properties\n\t\tfor (const sProperty in oSemanticAttributes) {\n\t\t\tif (oSemanticAttributes[sProperty] !== null && typeof oSemanticAttributes[sProperty] === \"object\") {\n\t\t\t\tdelete oSemanticAttributes[sProperty];\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tsemanticAttributes: oSemanticAttributes,\n\t\t\tpropertiesWithoutConflict: oPropertiesWithoutConflict\n\t\t};\n\t}\n\n\t/**\n\t * Get Navigation mode.\n\t * @returns The navigation mode\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.Instead)\n\tgetNavigationMode(): undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Allows for navigation to a given intent (SemanticObject-Action) with the provided context, using a dialog that shows the contexts which cannot be passed\n\t * If semantic object mapping is provided, this setting is also applied to the selection variant after adaptation by a consumer.\n\t * This setting also removes any technical parameters and determines if an inplace or explace navigation should take place.\n\t * @param sSemanticObject Semantic object for the target app\n\t * @param sAction  Action for the target app\n\t * @param [mNavigationParameters] Optional parameters to be passed to the external navigation\n\t * @param source\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tasync navigateWithConfirmationDialog(\n\t\tsSemanticObject: string,\n\t\tsAction: string,\n\t\tmNavigationParameters?: NavigationParameters,\n\t\tsource?: Control\n\t): Promise<void> {\n\t\tlet shouldContinue = true;\n\t\tif (source?.data(\"debounce\")) return; //debouncing the IBN navigation\n\t\tsource?.data(\"debounce\", true);\n\t\tif (mNavigationParameters?.notApplicableContexts && mNavigationParameters.notApplicableContexts?.length >= 1) {\n\t\t\tconst metaModel = this.base.getView().getModel().getMetaModel();\n\t\t\tconst entitySetPath = metaModel.getMetaPath(mNavigationParameters.notApplicableContexts[0].getPath());\n\t\t\tconst convertedMetadata = convertTypes(metaModel);\n\t\t\tconst entitySet = convertedMetadata.resolvePath<EntitySet>(entitySetPath).target!;\n\t\t\t// Show the contexts that are not applicable and will not therefore be processed\n\t\t\tconst notApplicableContextsDialog = new NotApplicableContextDialog({\n\t\t\t\ttitle: \"\",\n\t\t\t\tentityType: entitySet.entityType,\n\t\t\t\tresourceModel: getResourceModel(this.getView()),\n\t\t\t\tnotApplicableContexts: mNavigationParameters.notApplicableContexts,\n\t\t\t\tapplicableContexts: mNavigationParameters?.applicableContexts ?? [],\n\t\t\t\tentitySet: entitySet.name,\n\t\t\t\tactionName: sAction\n\t\t\t});\n\t\t\tmNavigationParameters.navigationContexts = mNavigationParameters.applicableContexts;\n\t\t\tshouldContinue = await notApplicableContextsDialog.open(this.getView());\n\t\t}\n\t\tif (shouldContinue) {\n\t\t\tthis.navigate(sSemanticObject, sAction, mNavigationParameters);\n\t\t}\n\t\tsource?.data(\"debounce\", false);\n\t}\n\n\t_removeTechnicalParameters(oSelectionVariant: SelectionVariant): void {\n\t\toSelectionVariant.removeSelectOption(\"@odata.context\");\n\t\toSelectionVariant.removeSelectOption(\"@odata.metadataEtag\");\n\t\toSelectionVariant.removeSelectOption(\"SAP__Messages\");\n\t}\n\n\t/**\n\t * Get targeted Entity set.\n\t * @returns Entity set name\n\t */\n\t@privateExtension()\n\tgetEntitySet(): string {\n\t\treturn this._oView.getViewData().entitySet!;\n\t}\n\n\t/**\n\t * Removes sensitive data from the semantic attribute with respect to the entitySet.\n\t * @param oAttributes Context data\n\t * @param sMetaPath Meta path to reach the entitySet in the MetaModel\n\t * @param metaModel MetaModel\n\t * @returns Array of semantic Attributes\n\t */\n\t// TO-DO add unit tests for this function in the controller extension qunit.\n\t@publicExtension()\n\t@finalExtension()\n\tremoveSensitiveData<T extends Record<string, unknown> | unknown[]>(oAttributes: T, sMetaPath: string, metaModel?: ODataMetaModel): T {\n\t\tif (oAttributes) {\n\t\t\tconst { transAggregations, customAggregates } = this._getAggregates(\n\t\t\t\tsMetaPath,\n\t\t\t\tthis.base.getView(),\n\t\t\t\tthis.base.getAppComponent().getDiagnostics()\n\t\t\t);\n\t\t\tconst aProperties = Object.keys(oAttributes);\n\t\t\tif (!Array.isArray(oAttributes) && aProperties.length) {\n\t\t\t\tdelete oAttributes[\"@odata.context\"];\n\t\t\t\tdelete oAttributes[\"@odata.metadataEtag\"];\n\t\t\t\tdelete oAttributes[\"SAP__Messages\"];\n\t\t\t\tfor (const element of aProperties) {\n\t\t\t\t\tif (oAttributes[element] && typeof oAttributes[element] === \"object\") {\n\t\t\t\t\t\tthis.removeSensitiveData(oAttributes[element] as Record<string, unknown>, `${sMetaPath}/${element}`, metaModel);\n\t\t\t\t\t}\n\t\t\t\t\tif (element.includes(\"@odata.type\")) {\n\t\t\t\t\t\tdelete oAttributes[element];\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tthis._deleteAggregates([...transAggregations, ...customAggregates], element, oAttributes);\n\t\t\t\t\tconst aPropertyAnnotations = this._getPropertyAnnotations(\n\t\t\t\t\t\telement,\n\t\t\t\t\t\tsMetaPath,\n\t\t\t\t\t\toAttributes,\n\t\t\t\t\t\tmetaModel || this._oMetaModel\n\t\t\t\t\t);\n\t\t\t\t\tif (aPropertyAnnotations) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\taPropertyAnnotations.PersonalData?.IsPotentiallySensitive ||\n\t\t\t\t\t\t\taPropertyAnnotations.UI?.ExcludeFromNavigationContext ||\n\t\t\t\t\t\t\taPropertyAnnotations.Analytics?.Measure\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdelete oAttributes[element];\n\t\t\t\t\t\t} else if (aPropertyAnnotations.Common?.FieldControl) {\n\t\t\t\t\t\t\tconst oFieldControl = aPropertyAnnotations.Common.FieldControl as unknown as {\n\t\t\t\t\t\t\t\t$EnumMember?: string;\n\t\t\t\t\t\t\t\t$Path?: string;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t(oFieldControl[\"$EnumMember\"] && oFieldControl[\"$EnumMember\"].split(\"/\")[1] === \"Inapplicable\") ||\n\t\t\t\t\t\t\t\t(oFieldControl[\"$Path\"] && this._isFieldControlPathInapplicable(oFieldControl[\"$Path\"], oAttributes))\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tdelete oAttributes[element];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn oAttributes;\n\t}\n\n\t/**\n\t * Remove the attribute from navigation data if it is a measure.\n\t * @param aggregates Array of Aggregates\n\t * @param sProp Attribute name\n\t * @param oAttributes SemanticAttributes\n\t */\n\t_deleteAggregates(aggregates: string[] | undefined, sProp: string, oAttributes: Record<string, unknown>): void {\n\t\tif (aggregates && aggregates.includes(sProp)) {\n\t\t\tdelete oAttributes[sProp];\n\t\t}\n\t}\n\n\t/**\n\t * Returns the property annotations.\n\t * @param sProp\n\t * @param sMetaPath\n\t * @param oAttributes\n\t * @param oMetaModel\n\t * @returns - The property annotations\n\t */\n\t_getPropertyAnnotations(\n\t\tsProp: string,\n\t\tsMetaPath: string,\n\t\toAttributes: Record<string, unknown>,\n\t\toMetaModel: ODataMetaModel\n\t): PropertyAnnotations | null | undefined {\n\t\tif (oAttributes[sProp] && sMetaPath && !sMetaPath.includes(\"undefined\")) {\n\t\t\tconst oContext = oMetaModel.createBindingContext(`${sMetaPath}/${sProp}`) as ODataV4Context;\n\t\t\tconst oFullContext = MetaModelConverter.getInvolvedDataModelObjects<Property>(oContext);\n\t\t\treturn oFullContext?.targetObject?.annotations;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the aggregates part of the EntitySet or EntityType.\n\t * @param sMetaPath\n\t * @param oView\n\t * @param oDiagnostics\n\t * @returns - The aggregates\n\t */\n\t_getAggregates(\n\t\tsMetaPath: string,\n\t\toView: FEView,\n\t\toDiagnostics: Diagnostics\n\t): { transAggregations: string[]; customAggregates: string[] } {\n\t\tconst converterContext = this._getConverterContext(sMetaPath, oView, oDiagnostics);\n\t\tconst aggregationHelper = new AggregationHelper(converterContext.getEntityType(), converterContext);\n\t\tconst isAnalyticsSupported = aggregationHelper.isAnalyticsSupported();\n\t\tlet transAggregations: string[], customAggregates;\n\t\tif (isAnalyticsSupported) {\n\t\t\tconst transAggregationsPreprocessing = aggregationHelper.getTransAggregations();\n\t\t\tif (transAggregationsPreprocessing?.length) {\n\t\t\t\ttransAggregations = transAggregationsPreprocessing.map((transAgg) => {\n\t\t\t\t\treturn (transAgg.Name as string) || (transAgg as unknown as { Value: string }).Value;\n\t\t\t\t});\n\t\t\t}\n\t\t\tcustomAggregates = aggregationHelper.getCustomAggregateDefinitions();\n\t\t\tif (customAggregates?.length) {\n\t\t\t\tcustomAggregates = customAggregates.map((customAggregate) => {\n\t\t\t\t\treturn customAggregate.qualifier;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\ttransAggregations ??= [];\n\t\tcustomAggregates = customAggregates ? (customAggregates as string[]) : [];\n\t\treturn { transAggregations, customAggregates };\n\t}\n\n\t/**\n\t * Returns converterContext.\n\t * @param sMetaPath\n\t * @param oView\n\t * @param oDiagnostics\n\t * @returns - ConverterContext\n\t */\n\t_getConverterContext(sMetaPath: string, oView: FEView, oDiagnostics: Diagnostics): ConverterContext<PageContextPathTarget> {\n\t\tconst oViewData = oView.getViewData();\n\t\tlet sEntitySet = oViewData.entitySet;\n\t\tconst sContextPath = oViewData.contextPath;\n\t\tif (sContextPath && (!sEntitySet || sEntitySet.includes(\"/\"))) {\n\t\t\tsEntitySet = oViewData?.fullContextPath.split(\"/\")[1];\n\t\t}\n\t\treturn CommonUtils.getConverterContextForPath(sMetaPath, oView.getModel().getMetaModel(), sEntitySet!, oDiagnostics);\n\t}\n\n\t/**\n\t * Check if path-based FieldControl evaluates to inapplicable.\n\t * @param sFieldControlPath Field control path\n\t * @param oAttribute SemanticAttributes\n\t * @returns `true` if inapplicable\n\t */\n\t_isFieldControlPathInapplicable(sFieldControlPath: string, oAttribute: Record<string, unknown>): boolean {\n\t\tlet bInapplicable = false;\n\t\tconst aParts = sFieldControlPath.split(\"/\");\n\t\t// sensitive data is removed only if the path has already been resolved.\n\t\tif (aParts.length > 1) {\n\t\t\tbInapplicable = !!(\n\t\t\t\toAttribute[aParts[0]] &&\n\t\t\t\t(oAttribute[aParts[0]] as object).hasOwnProperty(aParts[1]) &&\n\t\t\t\t(oAttribute[aParts[0]] as Record<string, number>)[aParts[1]] === 0\n\t\t\t);\n\t\t} else {\n\t\t\tbInapplicable = oAttribute[sFieldControlPath] === 0;\n\t\t}\n\t\treturn bInapplicable;\n\t}\n\n\t/**\n\t * Method to replace Local Properties with Semantic Object mappings.\n\t * @param oSelectionVariant SelectionVariant consisting of filterbar, Table and Page Context\n\t * @param vMappings A string representation of semantic object mapping\n\t * @returns - Modified SelectionVariant with LocalProperty replaced with SemanticObjectProperties.\n\t */\n\t_applySemanticObjectMappings(oSelectionVariant: SelectionVariant, vMappings: object | string): SelectionVariant {\n\t\tconst oMappings = typeof vMappings === \"string\" ? JSON.parse(vMappings) : vMappings;\n\t\tfor (const item of oMappings) {\n\t\t\tconst sLocalProperty =\n\t\t\t\t(item[\"LocalProperty\"] && item[\"LocalProperty\"][\"$PropertyPath\"]) ||\n\t\t\t\t(item[\"@com.sap.vocabularies.Common.v1.LocalProperty\"] && item[\"@com.sap.vocabularies.Common.v1.LocalProperty\"][\"$Path\"]);\n\t\t\tconst sSemanticObjectProperty =\n\t\t\t\titem[\"SemanticObjectProperty\"] || item[\"@com.sap.vocabularies.Common.v1.SemanticObjectProperty\"];\n\t\t\tconst oSelectOption = oSelectionVariant.getSelectOption(sLocalProperty);\n\t\t\tif (oSelectOption && sLocalProperty !== sSemanticObjectProperty) {\n\t\t\t\t//remove the selectOption to be overwritten then rename the one coming from the local property\n\t\t\t\toSelectionVariant.removeSelectOption(sSemanticObjectProperty);\n\t\t\t\toSelectionVariant.renameSelectOption(sLocalProperty, sSemanticObjectProperty);\n\t\t\t}\n\t\t}\n\t\treturn oSelectionVariant;\n\t}\n\n\t/**\n\t * Method to store the focusInformation to the history object.\n\t */\n\tprotected storeFocusInfoInHistory(): void {\n\t\tlet focusInfo = null;\n\t\tconst focusControl = Element.getActiveElement();\n\t\tconst focusControlId = focusControl?.getId();\n\t\tconst focusMDCTable = focusControl && FPMHelper.getMdcTable(focusControl);\n\t\tif (focusControl?.isA(\"sap.m.Button\")) {\n\t\t\tfocusInfo = {\n\t\t\t\ttype: \"Control\",\n\t\t\t\tcontrolId: focusControlId\n\t\t\t};\n\t\t} else if (focusMDCTable) {\n\t\t\tfocusInfo = {\n\t\t\t\ttype: \"Row\",\n\t\t\t\ttableId: focusMDCTable.getId(),\n\t\t\t\tcontextPathFocus: focusControl.getBindingContext()?.getPath()\n\t\t\t};\n\t\t}\n\t\thistory.replaceState(Object.assign({}, history.state, { focusInfo: focusInfo }), \"\");\n\t}\n\n\t/**\n\t * Navigates to an Outbound provided in the manifest.\n\t * @param sOutbound Identifier to location the outbound in the manifest\n\t * @param mNavigationParameters Optional map containing key/value pairs to be passed to the intent\n\t * @since 1.86.0\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tnavigateOutbound(sOutbound: string, mNavigationParameters?: Record<string, unknown | unknown[]>): void {\n\t\tthis.storeFocusInfoInHistory();\n\t\tlet aNavParams: Record<string, string>[] | undefined;\n\t\tconst oManifestEntry = this.base.getAppComponent().getManifestEntry(\"sap.app\"),\n\t\t\toOutbound = oManifestEntry.crossNavigation?.outbounds?.[sOutbound];\n\t\tif (!oOutbound) {\n\t\t\tLog.error(\"Outbound is not defined in manifest!!\");\n\t\t\treturn;\n\t\t}\n\t\tconst sSemanticObject = oOutbound.semanticObject,\n\t\t\tsAction = oOutbound.action,\n\t\t\toutboundParams = oOutbound.parameters && this.getOutboundParams(oOutbound.parameters);\n\n\t\tif (mNavigationParameters) {\n\t\t\taNavParams = [];\n\t\t\tObject.keys(mNavigationParameters).forEach(function (key: string) {\n\t\t\t\tlet oParams: Record<string, string>;\n\t\t\t\tconst navParameterValue = mNavigationParameters![key];\n\t\t\t\tif (Array.isArray(navParameterValue)) {\n\t\t\t\t\tfor (const item of navParameterValue) {\n\t\t\t\t\t\toParams = {};\n\t\t\t\t\t\toParams[key] = item;\n\t\t\t\t\t\taNavParams?.push(oParams);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\toParams = {};\n\t\t\t\t\toParams[key] = navParameterValue as string;\n\t\t\t\t\taNavParams?.push(oParams);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (aNavParams || outboundParams) {\n\t\t\tmNavigationParameters = {\n\t\t\t\tnavigationContexts: {\n\t\t\t\t\tdata: aNavParams || outboundParams\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tthis.base._intentBasedNavigation.navigate(sSemanticObject, sAction, mNavigationParameters);\n\t}\n\n\t/**\n\t * Method to apply outbound parameters defined in the manifest.\n\t * @param oSelectionVariant SelectionVariant consisting of a filter bar, a table, and a page context\n\t * @param vOutboundParams Outbound Properties defined in the manifest\n\t * @returns - The modified SelectionVariant with outbound parameters.\n\t */\n\t_applyOutboundParams(oSelectionVariant: SelectionVariant, vOutboundParams: Record<string, string>): SelectionVariant {\n\t\tconst aParameters = Object.keys(vOutboundParams);\n\t\tconst aSelectProperties = oSelectionVariant.getSelectOptionsPropertyNames();\n\t\taParameters.forEach(function (key: string) {\n\t\t\tif (!aSelectProperties.includes(key)) {\n\t\t\t\toSelectionVariant.addSelectOption(key, \"I\", \"EQ\", vOutboundParams[key]);\n\t\t\t}\n\t\t});\n\t\treturn oSelectionVariant;\n\t}\n\n\t/**\n\t * Method to get the outbound parameters defined in the manifest.\n\t * @param oOutboundParams Parameters defined in the outbounds. Only \"plain\" is supported\n\t * @returns Parameters with the key-Value pair\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tgetOutboundParams(oOutboundParams: Record<string, ManifestOutboundEntryParameter>): Record<string, string> {\n\t\tconst oParamsMapping: Record<string, string> = {};\n\t\tif (oOutboundParams) {\n\t\t\tconst aParameters = Object.keys(oOutboundParams) || [];\n\t\t\tif (aParameters.length > 0) {\n\t\t\t\taParameters.forEach(function (key: string) {\n\t\t\t\t\tconst oMapping = oOutboundParams[key];\n\t\t\t\t\tif (oMapping.value && oMapping.value.value && oMapping.value.format === \"plain\") {\n\t\t\t\t\t\tif (!oParamsMapping[key]) {\n\t\t\t\t\t\t\toParamsMapping[key] = oMapping.value.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn oParamsMapping;\n\t}\n\n\t/**\n\t * Triggers an outbound navigation when a user chooses the chevron.\n\t * @param {object} oController\n\t * @param {string} sOutboundTarget Name of the outbound target (needs to be defined in the manifest)\n\t * @param oContext The context that contains the data for the target app\n\t * @param {string} sCreatePath Create path when the chevron is created.\n\t * @param {string} navMode Opens in new tab or window when set to 'explace'.\n\t * @returns {Promise} Promise which is resolved once the navigation is triggered\n\t */\n\n\t@publicExtension()\n\t@finalExtension()\n\tasync onChevronPressNavigateOutBound(\n\t\toController: PageController,\n\t\tsOutboundTarget: string,\n\t\toContext: ODataV4Context | ODataV4Context[] | undefined,\n\t\tsCreatePath: string,\n\t\tnavMode?: string\n\t): Promise<void> {\n\t\tconst oOutbounds = oController.getAppComponent().getRoutingService().getOutbounds();\n\t\tconst oDisplayOutbound = oOutbounds[sOutboundTarget];\n\t\tlet additionalNavigationParameters;\n\t\tif (oDisplayOutbound && oDisplayOutbound.semanticObject && oDisplayOutbound.action) {\n\t\t\tconst oRefreshStrategies: RefreshStrategies = {\n\t\t\t\tintents: {}\n\t\t\t};\n\t\t\tconst oDefaultRefreshStrategy: SORefreshStrategy = {};\n\t\t\tlet sMetaPath: string;\n\t\t\tlet navigationContexts: ODataV4Context[] = [];\n\t\t\tif (oContext) {\n\t\t\t\tif (Array.isArray(oContext)) {\n\t\t\t\t\tnavigationContexts = oContext;\n\t\t\t\t\tsMetaPath = ModelHelper.getMetaPathForContext(oContext[0]);\n\t\t\t\t} else if (oContext.isA && oContext.isA<ODataV4Context>(\"sap.ui.model.odata.v4.Context\")) {\n\t\t\t\t\tsMetaPath = ModelHelper.getMetaPathForContext(oContext);\n\t\t\t\t\tnavigationContexts = [oContext];\n\t\t\t\t}\n\t\t\t\toDefaultRefreshStrategy[sMetaPath!] = RefreshStrategyType.Self;\n\t\t\t\toRefreshStrategies._feDefault = oDefaultRefreshStrategy;\n\t\t\t}\n\n\t\t\tif (sCreatePath) {\n\t\t\t\tconst sKey = `${oDisplayOutbound.semanticObject}-${oDisplayOutbound.action}`;\n\t\t\t\toRefreshStrategies.intents![sKey] = {};\n\t\t\t\toRefreshStrategies.intents![sKey]![sCreatePath] = RefreshStrategyType.Self;\n\t\t\t}\n\t\t\tif (oDisplayOutbound && oDisplayOutbound.parameters) {\n\t\t\t\tconst oParams = oDisplayOutbound.parameters && this.getOutboundParams(oDisplayOutbound.parameters);\n\t\t\t\tif (Object.keys(oParams).length > 0) {\n\t\t\t\t\tadditionalNavigationParameters = oParams;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toController._intentBasedNavigation.navigate(oDisplayOutbound.semanticObject, oDisplayOutbound.action, {\n\t\t\t\tnavigationContexts: navigationContexts,\n\t\t\t\trefreshStrategies: oRefreshStrategies,\n\t\t\t\tadditionalNavigationParameters: additionalNavigationParameters,\n\t\t\t\tnavMode: navMode\n\t\t\t});\n\n\t\t\t//TODO: check why returning a promise is required\n\t\t\treturn Promise.resolve();\n\t\t} else {\n\t\t\tthrow new Error(`outbound target ${sOutboundTarget} not found in cross navigation definition of manifest`);\n\t\t}\n\t}\n\n\t/**\n\t * Process the semantic attributes based on the navigation properties.\n\t * @param context Context\n\t * @param semanticAttributes Semantic attributes\n\t * @param pathsToRetain Navigation properties to be retained in case of links\n\t * @returns Processed semantic attributes\n\t */\n\tprocessSemanticAttributes(\n\t\tcontext: Context,\n\t\tsemanticAttributes: Record<string, unknown>,\n\t\tpathsToRetain?: Array<string>\n\t): Record<string, unknown> {\n\t\tconst bKeepNavProperties = this.keepNavigationPropertiesForNavigation();\n\t\tif (!bKeepNavProperties) {\n\t\t\treturn this.getSemanticAttributesWithoutNavigationProperties(context, pathsToRetain);\n\t\t} else {\n\t\t\treturn semanticAttributes;\n\t\t}\n\t}\n\n\t/**\n\t * Check if navigation properties has to be considered for the external navigation.\n\t * @returns `true` if navigation properties has to be considered\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tkeepNavigationPropertiesForNavigation(): boolean {\n\t\tlet bKeepNavProperties = false;\n\t\tconst manifest = this.base.getAppComponent().getManifestEntry(\"sap.fe\");\n\t\tbKeepNavProperties = manifest?.app?.considerNavigationPropertiesForExternalNavigation || false;\n\t\treturn bKeepNavProperties;\n\t}\n\n\t/**\n\t * Get semantic attributes from context.\n\t * @param context Context\n\t * @param pathsToRetain Navigation properties to be retained in case of links\n\t * @returns Semantic Attributes\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tgetSemanticAttributesWithoutNavigationProperties(context: Context, pathsToRetain?: Array<string>): Record<string, unknown> {\n\t\tconst metaModel = context.getModel().getMetaModel() as ODataMetaModel,\n\t\t\tcontextPath = context.getPath(),\n\t\t\tmetaPath = metaModel.getMetaPath(contextPath),\n\t\t\tret = context.getObject();\n\t\tconst navProperties = this.getNavigationPropertiesFromEntityType(metaModel, metaPath);\n\t\tif (navProperties && navProperties.length > 0) {\n\t\t\tnavProperties.forEach((navProp: NavigationProperty) => {\n\t\t\t\tconst navPropName = navProp.name;\n\t\t\t\tif (Array.isArray(pathsToRetain) && pathsToRetain.length > 0) {\n\t\t\t\t\t// We consider 1.1 navigation properties which are used for rendering the semantic links to be passed as part of context\n\t\t\t\t\tif (ret.hasOwnProperty(navPropName) && ret[navPropName]) {\n\t\t\t\t\t\tObject.keys(ret[navPropName]).forEach(function (key: string) {\n\t\t\t\t\t\t\tconst propertyPath = `${navPropName}/${key}`;\n\t\t\t\t\t\t\tif (!pathsToRetain?.includes(propertyPath) && ret[navPropName].hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tdelete ret[navPropName][key];\n\t\t\t\t\t\t\t\tif (Object.keys(ret[navPropName]).length === 0) {\n\t\t\t\t\t\t\t\t\tdelete ret[navPropName];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdelete ret[navPropName];\n\t\t\t\t\t}\n\t\t\t\t} else if (ret.hasOwnProperty(navPropName)) {\n\t\t\t\t\tdelete ret[navPropName];\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Retrieve the navigation properties from entityType using metamodel.\n\t * @param metaModel MetaModel\n\t * @param metaPath MetaPath\n\t * @returns Navigation properties\n\t */\n\tgetNavigationPropertiesFromEntityType(metaModel: ODataMetaModel, metaPath: string): NavigationProperty[] {\n\t\tconst convertedMetadata = convertTypes(metaModel);\n\t\tconst entityType = convertedMetadata.resolvePath<EntityType>(`${metaPath}/`).target!;\n\t\treturn entityType?.navigationProperties;\n\t}\n}\n\nexport default InternalIntentBasedNavigation;\n"],"mappings":"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","ignoreList":[]}