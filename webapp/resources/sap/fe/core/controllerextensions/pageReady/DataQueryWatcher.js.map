{"version":3,"file":"DataQueryWatcher.js","names":["DataQueryWatcher","_oEventProvider","_fnOnFinished","this","_aBindingRegistrations","_aOtherEventSources","_isSearchPending","_aMDCTables","_aMDCCharts","_proto","prototype","isSearchPending","isDataReceived","_isDataReceived","resetDataReceived","undefined","reset","forEach","reg","binding","detachEvent","onDataRequested","onDataReceived","oElement","onSearch","register","oEvent","params","getSource","bindingRegistration","find","Log","error","getGroupId","fireEvent","receivedCount","requestedCount","attachEventOnce","triggeredBySearch","bAllDone","some","every","aMDCTableLinkedToFilterBar","filter","oTable","getId","getFilter","getVisible","getParent","getProperty","aMDCChartsLinkedToFilterBar","oChart","length","registerTable","async","innerChartBoundPromise","registerChart","oError","_event","data","table","getRowBinding","chart","getControlDelegate","getInnerChart","getBinding","boundControl","push","registerBinding","arguments","includes","oRowBinding","attachEvent","oInnerChart","registerTableOrChart","element","isA","initialized","getAutoBindOnInit","getDomRef","Utils","whenBound","registerFilterBar","filterBar"],"sources":["./DataQueryWatcher.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport type ChartDelegate from \"sap/fe/macros/chart/ChartDelegate\";\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport Utils from \"sap/fe/macros/table/Utils\";\nimport type Event from \"sap/ui/base/Event\";\nimport type EventProvider from \"sap/ui/base/EventProvider\";\nimport type Control from \"sap/ui/core/Control\";\nimport type Chart from \"sap/ui/mdc/Chart\";\nimport type FilterBar from \"sap/ui/mdc/FilterBar\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { FilterBarBase$SearchEvent } from \"sap/ui/mdc/filterbar/FilterBarBase\";\nimport type Binding from \"sap/ui/model/Binding\";\nimport type ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\n\nclass DataQueryWatcher {\n\tprotected _aBindingRegistrations: { binding: Binding; boundControl?: Control; requestedCount: number; receivedCount: number }[] = [];\n\n\tprotected _aOtherEventSources: EventProvider[] = [];\n\n\tprotected _isSearchPending = false;\n\n\tprotected _isDataReceived?: boolean;\n\n\tprotected _aMDCTables: Table[] = [];\n\n\tprotected _aMDCCharts: Chart[] = [];\n\n\tpublic constructor(\n\t\tprotected _oEventProvider: EventProvider,\n\t\tprotected _fnOnFinished: () => void\n\t) {}\n\n\t// Accessors\n\tpublic isSearchPending(): boolean {\n\t\treturn this._isSearchPending;\n\t}\n\n\tpublic isDataReceived(): boolean | undefined {\n\t\treturn this._isDataReceived;\n\t}\n\n\tpublic resetDataReceived(): void {\n\t\tthis._isDataReceived = undefined;\n\t}\n\n\t/**\n\t * Reset the state: unsubscribe to all data events and remove all registered objects.\n\t */\n\tpublic reset(): void {\n\t\t// Remove all remaining callbacks\n\t\tthis._aBindingRegistrations.forEach((reg) => {\n\t\t\treg.binding.detachEvent(\"dataRequested\", this.onDataRequested, this);\n\t\t\treg.binding.detachEvent(\"dataReceived\", this.onDataReceived, this);\n\t\t});\n\t\tthis._aOtherEventSources.forEach((oElement: EventProvider): void => {\n\t\t\toElement.detachEvent(\"search\", this.onSearch, this);\n\t\t\toElement.detachEvent(\"bindingUpdated\", this.register, this);\n\t\t});\n\t\tthis._aBindingRegistrations = [];\n\t\tthis._aOtherEventSources = [];\n\t\tthis._aMDCTables = [];\n\t\tthis._aMDCCharts = [];\n\t\tthis._isSearchPending = false;\n\t\tthis._isDataReceived = undefined;\n\t}\n\n\t// //////////////////////////////////////////////////\n\t// Callback when data is received on a binding.\n\tprotected onDataReceived(oEvent: Event<{}, Binding>, params: { triggeredBySearch: boolean }): void {\n\t\t// Look for the corresponding binding registration\n\t\tconst binding = oEvent.getSource();\n\t\tconst bindingRegistration = this._aBindingRegistrations.find((reg) => {\n\t\t\treturn reg.binding === binding;\n\t\t});\n\t\tif (!bindingRegistration) {\n\t\t\tLog.error(\"PageReady - data received on an unregistered binding\");\n\t\t\treturn;\n\t\t}\n\t\tswitch ((binding as ODataListBinding).getGroupId()) {\n\t\t\tcase \"$auto.Workers\":\n\t\t\t\tthis._oEventProvider.fireEvent(\"workersBatchReceived\");\n\t\t\t\tbreak;\n\t\t\tcase \"$auto.Heroes\":\n\t\t\t\tthis._oEventProvider.fireEvent(\"heroesBatchReceived\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\tbindingRegistration.receivedCount++;\n\t\tif (bindingRegistration.receivedCount < bindingRegistration.requestedCount) {\n\t\t\t// There are other request pending --> resubscribe to wait until they return\n\t\t\tbinding.attachEventOnce(\"dataReceived\", { triggeredBySearch: params.triggeredBySearch }, this.onDataReceived, this);\n\t\t\treturn;\n\t\t}\n\t\t// Check if at least one binding has requested data, and all bindings that have requested data have received it\n\t\tconst bAllDone =\n\t\t\tthis._aBindingRegistrations.some((reg) => {\n\t\t\t\treturn reg.requestedCount !== 0;\n\t\t\t}) &&\n\t\t\tthis._aBindingRegistrations.every((reg) => {\n\t\t\t\treturn reg.requestedCount === 0 || reg.receivedCount >= reg.requestedCount;\n\t\t\t});\n\t\tif (params.triggeredBySearch || bindingRegistration.receivedCount >= bindingRegistration.requestedCount) {\n\t\t\tthis._isSearchPending = false;\n\t\t}\n\t\tif (bAllDone) {\n\t\t\tthis._isDataReceived = true;\n\t\t\tthis._fnOnFinished();\n\t\t}\n\t}\n\n\t// //////////////////////////////////////////////////\n\t// Callback when data is requested on a binding.\n\tprotected onDataRequested(oEvent: Event<{}, Binding>, params: { triggeredBySearch: boolean }): void {\n\t\t// Look for the corresponding binding registration\n\t\tconst binding = oEvent.getSource();\n\t\tconst bindingRegistration = this._aBindingRegistrations.find((reg) => {\n\t\t\treturn reg.binding === binding;\n\t\t});\n\t\tif (!bindingRegistration) {\n\t\t\tLog.error(\"PageReady - data requested on an unregistered binding\");\n\t\t\treturn;\n\t\t}\n\t\tbindingRegistration.requestedCount++;\n\t\tthis._isDataReceived = false;\n\t\tif (bindingRegistration.requestedCount - bindingRegistration.receivedCount === 1) {\n\t\t\t// Listen to dataReceived only if there's no other request pending\n\t\t\t// Otherwise the 'dataReceived' handler would be called several times when the first query returns\n\t\t\t// and we wouldn't wait for all queries to be finished\n\t\t\t// (we will resubscribe to the dataReceived event in onDataReceived if necessary)\n\t\t\tbinding.attachEventOnce(\"dataReceived\", { triggeredBySearch: params.triggeredBySearch }, this.onDataReceived, this);\n\t\t}\n\t}\n\n\t// //////////////////////////////////////////////////\n\t// Callback when a search is triggered from a filterbar\n\tprotected onSearch(oEvent: FilterBarBase$SearchEvent): void {\n\t\tconst aMDCTableLinkedToFilterBar = this._aMDCTables.filter((oTable) => {\n\t\t\treturn (\n\t\t\t\toEvent.getSource().getId() === oTable.getFilter() &&\n\t\t\t\toTable.getVisible() &&\n\t\t\t\t!oTable.getParent()?.getProperty(\"bindingSuspended\")\n\t\t\t);\n\t\t});\n\t\tconst aMDCChartsLinkedToFilterBar = this._aMDCCharts.filter((oChart) => {\n\t\t\treturn oEvent.getSource().getId() === oChart.getFilter() && oChart.getVisible();\n\t\t});\n\t\tif (aMDCTableLinkedToFilterBar.length > 0 || aMDCChartsLinkedToFilterBar.length > 0) {\n\t\t\tthis._isSearchPending = true;\n\t\t}\n\t\taMDCTableLinkedToFilterBar.forEach((oTable) => {\n\t\t\tthis.registerTable(oTable, true);\n\t\t});\n\t\taMDCChartsLinkedToFilterBar.forEach(async (oChart: Chart & { innerChartBoundPromise?: Promise<void> }) => {\n\t\t\ttry {\n\t\t\t\tif (oChart.innerChartBoundPromise) {\n\t\t\t\t\tawait oChart.innerChartBoundPromise;\n\t\t\t\t}\n\t\t\t\tthis.registerChart(oChart, true);\n\t\t\t} catch (oError: unknown) {\n\t\t\t\tLog.error(\"Cannot find a inner bound chart\", oError as string);\n\t\t\t}\n\t\t});\n\t}\n\n\t// //////////////////////////////////////////////////\n\t// Register a binding (with an optional table/chart)\n\t// and attach callbacks on dateRequested/dataReceived events\n\tpublic register(_event: Event | null, data: { binding?: Binding; table?: Table; chart?: Chart; triggeredBySearch: boolean }): void {\n\t\tconst binding: Binding | undefined =\n\t\t\tdata.binding ||\n\t\t\tdata.table?.getRowBinding() ||\n\t\t\t(data.chart?.getControlDelegate() as typeof ChartDelegate).getInnerChart(data.chart).getBinding(\"data\");\n\t\tconst boundControl = (data.table || data.chart) as Control | undefined;\n\t\tif (!binding) {\n\t\t\treturn;\n\t\t}\n\t\t// Check if the binding is already registered\n\t\tlet bindingRegistration = this._aBindingRegistrations.find((reg) => {\n\t\t\treturn reg.binding === binding;\n\t\t});\n\t\tif (bindingRegistration) {\n\t\t\tif (boundControl) {\n\t\t\t\t// The binding was already registerd without boundControl information --> update boundControl\n\t\t\t\tbindingRegistration.boundControl = boundControl;\n\t\t\t}\n\t\t\t// This binding has already requested data, but we're registering it again (on search) --> attach to dataRequested again\n\t\t\tif (bindingRegistration.requestedCount > 0) {\n\t\t\t\tbinding.detachEvent(\"dataRequested\", this.onDataRequested, this);\n\t\t\t\tbinding.attachEventOnce(\"dataRequested\", { triggeredBySearch: data.triggeredBySearch }, this.onDataRequested, this);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif (boundControl) {\n\t\t\t// Check if there's a different binding registered for the bound control\n\t\t\tbindingRegistration = this._aBindingRegistrations.find((reg) => {\n\t\t\t\treturn reg.boundControl === boundControl;\n\t\t\t});\n\t\t\tif (bindingRegistration && bindingRegistration.binding !== binding) {\n\t\t\t\t// The control had a different binding. This can happen in case of MDC charts who recreated their binding after search\n\t\t\t\t// The previous binding is destroyed, we can replace it with the new and reset counters\n\t\t\t\tbindingRegistration.binding = binding;\n\t\t\t\tbindingRegistration.requestedCount = 0;\n\t\t\t\tbindingRegistration.receivedCount = 0;\n\t\t\t}\n\t\t}\n\t\tif (!bindingRegistration) {\n\t\t\tbindingRegistration = {\n\t\t\t\tbinding: binding,\n\t\t\t\tboundControl: boundControl,\n\t\t\t\trequestedCount: 0,\n\t\t\t\treceivedCount: 0\n\t\t\t};\n\t\t\tthis._aBindingRegistrations.push(bindingRegistration);\n\t\t}\n\t\tbinding.detachEvent(\"dataRequested\", this.onDataRequested, this);\n\t\tbinding.attachEventOnce(\"dataRequested\", { triggeredBySearch: data.triggeredBySearch }, this.onDataRequested, this);\n\t}\n\n\t/**\n\t * Registers a binding for watching its data events (dataRequested and dataReceived).\n\t * @param binding The binding\n\t */\n\tpublic registerBinding(binding: Binding): void {\n\t\tthis.register(null, { binding, triggeredBySearch: false });\n\t}\n\n\t/**\n\t * Registers an MDCTable for watching the data events on its row binding (dataRequested and dataReceived).\n\t * @param table The table\n\t * @param triggeredBySearch True if this registration is triggered by a filterBar search\n\t */\n\tprotected registerTable(table: Table, triggeredBySearch = false): void {\n\t\tif (!this._aMDCTables.includes(table)) {\n\t\t\tthis._aMDCTables.push(table);\n\t\t}\n\t\tconst oRowBinding = table.getRowBinding();\n\t\tif (oRowBinding) {\n\t\t\tthis.register(null, { table, triggeredBySearch });\n\t\t}\n\t\tif (!this._aOtherEventSources.includes(table)) {\n\t\t\ttable.attachEvent(\"bindingUpdated\", { table, triggeredBySearch }, this.register, this);\n\t\t\tthis._aOtherEventSources.push(table);\n\t\t}\n\t}\n\n\t/**\n\t * Registers an MDCChart for watching the data events on its inner data binding (dataRequested and dataReceived).\n\t * @param chart The chart\n\t * @param triggeredBySearch True if this registration is triggered by a filterBar search\n\t */\n\tprotected registerChart(chart: Chart, triggeredBySearch = false): void {\n\t\tif (!this._aMDCCharts.includes(chart)) {\n\t\t\tthis._aMDCCharts.push(chart);\n\t\t}\n\t\tconst oInnerChart = (chart.getControlDelegate() as typeof ChartDelegate).getInnerChart(chart);\n\t\tconst binding = oInnerChart?.getBinding(\"data\");\n\t\tif (binding) {\n\t\t\tthis.register(null, { chart, triggeredBySearch });\n\t\t}\n\t\tif (!this._aOtherEventSources.includes(chart)) {\n\t\t\tchart.attachEvent(\"bindingUpdated\", { chart, triggeredBySearch }, this.register, this);\n\t\t\tthis._aOtherEventSources.push(chart);\n\t\t}\n\t}\n\n\t/**\n\t * Registers an MDCTable or MDCChart for watching the data events on its inner data binding (dataRequested and dataReceived).\n\t * @param element  The table or chart\n\t */\n\tpublic async registerTableOrChart(element: Table | Chart): Promise<void> {\n\t\tif (!element.isA<Table>(\"sap.ui.mdc.Table\") && !element.isA<Chart>(\"sap.ui.mdc.Chart\")) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait element.initialized(); // access binding only after table/chart is bound\n\t\t\tif (element.isA<Table>(\"sap.ui.mdc.Table\")) {\n\t\t\t\tthis.registerTable(element);\n\t\t\t\t//If the autoBindOnInit is enabled, the table will be rebound\n\t\t\t\t//Then we need to wait for this rebind to occur to ensure the pageReady will also wait for the data to be received\n\t\t\t\tif (element.getAutoBindOnInit() && element.getDomRef()) {\n\t\t\t\t\tawait Utils.whenBound(element);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.registerChart(element);\n\t\t\t}\n\t\t} catch (oError: unknown) {\n\t\t\tLog.error(\"PageReady - Cannot register a table or a chart\", oError as string);\n\t\t}\n\t}\n\n\t/**\n\t * Registers an MDCFilterBar for watching its search event.\n\t * @param filterBar The filter bar\n\t */\n\tpublic registerFilterBar(filterBar: FilterBar): void {\n\t\tfilterBar.attachEvent(\"search\", this.onSearch, this);\n\t\tthis._aOtherEventSources.push(filterBar);\n\t}\n}\nexport default DataQueryWatcher;\n"],"mappings":"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","ignoreList":[]}