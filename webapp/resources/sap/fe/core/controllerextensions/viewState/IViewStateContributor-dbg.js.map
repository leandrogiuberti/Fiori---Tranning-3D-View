{"version":3,"names":["IViewStateContributor","_exports"],"sourceRoot":".","sources":["IViewStateContributor.ts"],"sourcesContent":["import type { ControlState, NavigationParameter } from \"sap/fe/core/controllerextensions/ViewState\";\nimport type ManagedObject from \"sap/ui/base/ManagedObject\";\n\nexport default abstract class IViewStateContributor<StateDefinition> {\n\tabstract retrieveState(): Promise<StateDefinition | null> | StateDefinition | null;\n\n\tabstract applyState(\n\t\tstate: StateDefinition,\n\t\toNavParameters?: NavigationParameter,\n\t\tshouldApplyDiffState?: boolean,\n\t\tskipMerge?: boolean\n\t): Promise<void> | void;\n\n\t/**\n\t * Sets the initial state of the control by retrieving the external state at the time of apply.\n\t * Also updates the initial state of the specified variant controls\n\t * @returns A promise that resolves when the initial state has been set.\n\t */\n\tabstract setInitialState?(): Promise<void>;\n\n\t/**\n\t * Abstract method to apply legacy state to a view.\n\t * @abstract\n\t * @param {Function} [getContrilState] Optional function to get the control state, accepting a `ManagedObject` and returning a `ControlState`.\n\t * @param {NavigationParameter} [oNavParameters] Optional navigation parameters that might influence the state application.\n\t * @param {boolean} [shouldApplyDiffState] Optional flag indicating whether a differential state application should be performed.\n\t * @returns {Promise<void>} - A promise that resolves when the state has been applied.\n\t */\n\tabstract applyLegacyState?(\n\t\tgetControlState?: (control: ManagedObject) => ControlState,\n\t\toNavParameters?: NavigationParameter,\n\t\tshouldApplyDiffState?: boolean,\n\t\tskipMerge?: boolean\n\t): Promise<void>;\n\n\tapplyNavigationParameters?(navigationParameter: NavigationParameter): Promise<void>;\n}\n"],"mappings":";;;;;;;;MAG8BA,qBAAqB,YAAAA,sBAAA;EAAAC,QAAA,GAAAD,qBAAA;EAAA,OAAAC,QAAA;AAAA","ignoreList":[],"file":"IViewStateContributor-dbg.js"}