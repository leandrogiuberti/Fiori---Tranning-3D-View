/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2025 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/ui/core/Lib", "sap/ui/core/UIComponent", "sap/ui/core/cache/CacheManager", "sap/ui/core/mvc/View", "sap/ui/core/mvc/ViewType", "sap/ui/model/json/JSONModel", "sap/ui/model/resource/ResourceModel"], function (Log, Lib, UIComponent, CacheManager, View, ViewType, JSONModel, i18nModel) {
  "use strict";

  function _inheritsLoose(t, o) { t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o); }
  function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }
  let RequestSettingsComponent = /*#__PURE__*/function (_UIComponent) {
    function RequestSettingsComponent() {
      return _UIComponent.apply(this, arguments) || this;
    }
    _inheritsLoose(RequestSettingsComponent, _UIComponent);
    var _proto = RequestSettingsComponent.prototype;
    _proto.getWaitInit = async function getWaitInit() {
      return this.waitInit;
    };
    _proto.asyncInit = async function asyncInit() {
      let resolveFunction;
      _UIComponent.prototype.init.call(this);
      this.waitInit = new Promise(resolve => {
        resolveFunction = resolve;
      });
      try {
        await Lib.load({
          name: "sap.fe.controls"
        });
      } catch (error) {
        Log.debug('"Error loading sap.fe.controls library", error');
      }
      const container = sap.ui.require("sap/ushell/Container");
      const personalizationService = await container.getServiceAsync("PersonalizationV2");
      this.model = new JSONModel({});
      this.personalizationService = personalizationService;
      this.scope = {
        clientStorageAllowed: false,
        keyCategory: personalizationService.constants.keyCategory.FIXED_KEY,
        validity: "Infinity",
        writeFrequency: personalizationService.constants.writeFrequency.LOW
      };
      this.personalizationId = {
        container: "sap.ushell.optimisticreq.personalization",
        item: "data"
      };
      const period = await this._getPersonalizedPeriod(personalizationService);
      // Remove old managecache entries via cache manager
      const timeStamp = new Date(Date.now() - period * 86400000);
      const filters = {
        olderThan: timeStamp,
        prefix: "sap.ui.model.odata.v4.managecache"
      };
      CacheManager.delWithFilters(filters);
      // Enhance user activities section with optimistic batch settings
      await this._createActivitiesSection();
      resolveFunction();
    };
    _proto.init = function init() {
      this.asyncInit().catch(err => {
        Log.error(err.message);
      });
    };
    _proto._getPersonalizedPeriod = async function _getPersonalizedPeriod(personalizationService) {
      const personalizer = await personalizationService.getPersonalizer(this.personalizationId, this.scope);
      const personalizationContainer = await personalizer.getPersData();
      // Use personalization service to get/set period
      let period = personalizationContainer?.period;
      period ??= 30;
      this.model.setProperty("/period", period);
      this.model.setProperty("/oldperiod", period);
      return period;
    };
    _proto._setPersonalizedPeriod = async function _setPersonalizedPeriod(personalizationService, period) {
      const personalizer = await personalizationService.getPersonalizer(this.personalizationId, this.scope);
      return personalizer.setPersData(period);
    };
    _proto._createActivitiesSection = async function _createActivitiesSection() {
      const i18n = new i18nModel({
        bundleName: "sap.fe.plugins.managecache.comp.i18n.messagebundle"
      });
      const viewType = ViewType.XML;
      const viewSettings = {
        type: viewType,
        id: "requestCacheView",
        viewName: "sap.fe.plugins.managecache.comp.view.settings"
      };
      const container = sap.ui.require("sap/ushell/Container");
      const frameBoundExtension = await container.getServiceAsync("FrameBoundExtension");
      await frameBoundExtension.addGroupedUserSettingsEntry({
        title: i18n.getResourceBundle().getText("T_GROUP"),
        icon: "sap-icon://laptop",
        entryHelpId: "userActivitiesEntry",
        groupingId: "userActivities",
        groupingTabTitle: i18n.getResourceBundle().getText("title"),
        groupingTabHelpId: "requestCacheUserActivities-helpId",
        value: async function () {
          return Promise.resolve("Request Cache"); //check
        },
        content: async () => {
          return View.create(viewSettings).then(view => {
            view.setModel(this.model);
            view.setModel(i18n, "i18n");
            this.viewInstance = view;
            return this.viewInstance;
          });
        },
        onSave: async () => {
          const period = this.model.getProperty("/period");
          await this._setPersonalizedPeriod(this.personalizationService, {
            period: period
          });
          return this.viewInstance.getController().onSave(period);
        },
        onCancel: () => {
          return this.viewInstance.getController().onCancel();
        }
      });
    };
    return RequestSettingsComponent;
  }(UIComponent);
  return RequestSettingsComponent;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,