{"version":3,"names":["TableScroller","scrollTableToRow","table","rowPath","tableRowBinding","getRowBinding","findAndScroll","tableRow","getAllCurrentContexts","find","item","getPath","getIndex","undefined","scrollToIndex","getGroupConditions","groupLevels","length","tableRowBindingContexts","getLength","some","context","attachEventOnce"],"sourceRoot":".","sources":["TableScroller.ts"],"sourcesContent":["import type MdcTable from \"sap/ui/mdc/Table\";\nconst TableScroller = {\n\t/**\n\t * Scrolls an MDCTable to a given row, identified by its context path.\n\t * If the row with the path can't be found, the table stays unchanged.\n\t * @param table The table that is being scrolled through\n\t * @param rowPath The path identifying the row to scroll to\n\t */\n\tscrollTableToRow: function (table: MdcTable, rowPath: string): void {\n\t\tconst tableRowBinding = table.getRowBinding();\n\t\tconst findAndScroll = function (): void {\n\t\t\tconst tableRow = tableRowBinding.getAllCurrentContexts().find((item) => item.getPath() === rowPath);\n\t\t\tif (tableRow && tableRow.getIndex() !== undefined) {\n\t\t\t\ttable.scrollToIndex(tableRow.getIndex() as number);\n\t\t\t}\n\t\t};\n\t\tif (\n\t\t\t(table.getGroupConditions() === undefined ||\n\t\t\t\t(table.getGroupConditions() as { groupLevels?: object[] })?.groupLevels?.length === 0) &&\n\t\t\ttableRowBinding\n\t\t) {\n\t\t\t// we only scroll if there are no grouping otherwise scrollToIndex doesn't behave as expected\n\t\t\tconst tableRowBindingContexts = tableRowBinding.getAllCurrentContexts();\n\t\t\tif (\n\t\t\t\t(tableRowBindingContexts.length === 0 && tableRowBinding.getLength() > 0) ||\n\t\t\t\ttableRowBindingContexts.some(function (context) {\n\t\t\t\t\treturn context === undefined;\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\t// The contexts are not loaded yet --> wait for a change event before scrolling\n\t\t\t\ttableRowBinding.attachEventOnce(\"dataReceived\", findAndScroll);\n\t\t\t} else {\n\t\t\t\t// Contexts are already loaded --> we can try to scroll immediately\n\t\t\t\tfindAndScroll();\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport default TableScroller;\n"],"mappings":";;;;;;;EACA,MAAMA,aAAa,GAAG;IACrB;AACD;AACA;AACA;AACA;AACA;IACCC,gBAAgB,EAAE,SAAAA,CAAUC,KAAe,EAAEC,OAAe,EAAQ;MACnE,MAAMC,eAAe,GAAGF,KAAK,CAACG,aAAa,CAAC,CAAC;MAC7C,MAAMC,aAAa,GAAG,SAAAA,CAAA,EAAkB;QACvC,MAAMC,QAAQ,GAAGH,eAAe,CAACI,qBAAqB,CAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC,CAAC,KAAKR,OAAO,CAAC;QACnG,IAAII,QAAQ,IAAIA,QAAQ,CAACK,QAAQ,CAAC,CAAC,KAAKC,SAAS,EAAE;UAClDX,KAAK,CAACY,aAAa,CAACP,QAAQ,CAACK,QAAQ,CAAC,CAAW,CAAC;QACnD;MACD,CAAC;MACD,IACC,CAACV,KAAK,CAACa,kBAAkB,CAAC,CAAC,KAAKF,SAAS,IACvCX,KAAK,CAACa,kBAAkB,CAAC,CAAC,EAAiCC,WAAW,EAAEC,MAAM,KAAK,CAAC,KACtFb,eAAe,EACd;QACD;QACA,MAAMc,uBAAuB,GAAGd,eAAe,CAACI,qBAAqB,CAAC,CAAC;QACvE,IACEU,uBAAuB,CAACD,MAAM,KAAK,CAAC,IAAIb,eAAe,CAACe,SAAS,CAAC,CAAC,GAAG,CAAC,IACxED,uBAAuB,CAACE,IAAI,CAAC,UAAUC,OAAO,EAAE;UAC/C,OAAOA,OAAO,KAAKR,SAAS;QAC7B,CAAC,CAAC,EACD;UACD;UACAT,eAAe,CAACkB,eAAe,CAAC,cAAc,EAAEhB,aAAa,CAAC;QAC/D,CAAC,MAAM;UACN;UACAA,aAAa,CAAC,CAAC;QAChB;MACD;IACD;EACD,CAAC;EAAC,OAEaN,aAAa;AAAA","ignoreList":[],"file":"TableScroller-dbg.js"}