{"version":3,"file":"ObjectPageTemplating.js","names":["ButtonType","mLibrary","getExpressionForTitle","fullContextPath","viewData","headerInfo","getTitleBindingExpression","getTextBindingExpression","undefined","_exports","getExpressionForDescription","oHeaderInfo","descriptionBinding","getExpressionFromAnnotation","Description","Value","$target","annotations","Common","Text","UI","TextArrangement","addTextArrangementToBindingExpression","description","compileExpression","formatValueRecursively","getExpressionForSaveButton","oViewData","saveButtonText","resourceModel","getText","createButtonText","saveExpression","startingEntitySet","Session","StickySessionSupported","ifElse","IsCreateMode","Draft","IsNewObject","getExpressionForLabelOnHeaderForm","label","isManifestAction","action","nonManifestActions","includes","type","buildEmphasizedButtonExpression","dataContextPath","identification","targetEntityType","Identification","dataFieldsWithCriticality","filter","dataField","$Type","Criticality","dataFieldsBindingExpressions","length","map","criticalityVisibleBindingExpression","and","not","equal","Hidden","or","constant","Ghost","Emphasized","getElementBinding","sPath","sNavigationPath","ODataModelAnnotationHelper","getNavigationPath","checkDraftState","entitySet","DraftRoot","EditAction","checkCollaborationDraftRoot","ShareAction","getSwitchToActiveVisibility","pathInModel","IsEditable","getSwitchToDraftVisibility","getSwitchDraftAndActiveVisibility","_findAction","aConverterContextHeaderActions","sActionType","oAction","find","oHeaderAction","getDeleteCommandExecutionEnabled","oDeleteAction","enabled","getDeleteCommandExecutionVisible","visible","getEditCommandExecutionVisible","oEditAction","getEditCommandExecutionEnabled","getEditAction","oEntitySet","getPath","aPaths","split","rootEntitySetPath","rootEntitySetAnnnotations","getObject","bDraftRoot","hasOwnProperty","bDraftNode","bStickySession","sActionName","isReadOnlyFromStaticAnnotations","oAnnotations","oFieldControl","bComputed","bImmutable","bReadOnly","Bool","readOnlyExpressionFromDynamicAnnotations","sIsFieldControlPathReadOnly","BindingInfo","parse","getExpressionForMicroChartTitlePress","oConfiguration","targetAnnotationPath","targetAnnotationPathDatModelObject","oManifestOutbound","sCollectionName","getMicroChartControlConfigurationPath","navigationConfiguration","JSON","stringify","getMicroChartTitleAsLink","oControlConfiguration","collectionName","targetControlConfiguration","targetObject","Visualizations","value","getGroupIdFromConfig","oConfigurations","sAnnotationPath","sDefaultGroupId","aAutoPatterns","sGroupId","requestGroupId","some","autoPattern","getGroupIdFromConfigForMicroChart","targetAnnotationPathDataModelObject","getBindingWithGroupIdFromConfig","sKey","sBinding","createBindingForAlternateAndSecondaryKeys","dataModelObjectPath","binding","alternateAndSecondaryKeys","ModelHelper","getAlternateAndSecondaryKeys","targetEntitySet","path","parameters","$select","join","doesFieldGroupContainOnlyOneMultiLineDataField","aFormElements","isValueMultilineText","getShareButtonVisibility","isShareButtonVisibleForMyInbox","shareButtonVisibilityExp","fclEnabled","getVisiblityOfHeaderInfo","oTitleAnnotations","oDescriptionAnnotations","oFieldTitleFieldControl","oFieldDescriptionFieldControl","bIsTitleReadOnly","titleExpression","bIsDescriptionReadOnly","descriptionExpression","combineTitleAndDescriptionExpression","oTitleFieldControl","oDescriptionFieldControl","getPressExpressionForDelete","deletableContexts","title","params","CommonHelper","generateFunction","objectToString","getPressExpressionForEdit","oDataField","sEntitySetName","sEditableContexts","addSingleQuotes","Action","sDataFieldEnumMember","InvocationGrouping","sInvocationGroup","oParams","contexts","entitySetName","invocationGrouping","model","Label","isNavigable","defaultValuesExtensionFunction","getPressExpressionForFooterAnnotationAction","dataFieldModelPath","headerAction","actionContexts","getPressExpressionForPrimaryAction","positiveActionVisible","positiveActionEnabled","editActionVisible","editActionEnabled","sActionContexts","toString","oConditions","getStashableHBoxBinding","oHeaderFacet","Facet","targetAnnotationType","targetAnnotationValue","getHeaderFormHboxRenderType","getDefaultActionHandler","oCtx","oDataFieldForDefaultAction","defaultActionContextOrEntitySet","defaultAction","command","press","noWrap","buildActionWrapper","id","ioEx","isVisualizationIsPartOfPreview","subSection","isPartOfPreview","presentation","visualizations","getFooterVisibilityExpression","context","footerActions","metaModel","getInterface","getModel","_generateBindingsForActions","actions","resolveBindingString","getActionModelPath","annotationPath","actionContext","getContext","getInvolvedDataModelObjects","determiningActions","ActionType","DataFieldForAction","manifestActionBindings","determiningActionBindings","isNotHiddenDeterminingAction","actionContextModelPath","getHeaderLevel","isMoreContent","showSubSectionTitle","level","dataVisualizationTitleVisible","getHeaderFormAriaLabelledBy","headerFormData","formElementIdPrefix","titleId","StableIdHelper","generate","labelId","getFormAriaText","subSectionTitle","resourceBundle","Library","getResourceBundleFor","requiresIContext"],"sources":["./ObjectPageTemplating.ts"],"sourcesContent":["// Formatters for the Object Page\nimport type { EntitySet, NavigationProperty, Property, Singleton } from \"@sap-ux/vocabularies-types\";\nimport type {\n\tChart,\n\tDataFieldAbstractTypes,\n\tDataFieldDefault,\n\tDataFieldForAction,\n\tDataFieldTypes,\n\tFacet,\n\tHeaderInfoType,\n\tPresentationVariant\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTypes } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport type { BindingToolkitExpression, CompiledBindingToolkitExpression, PathInModelExpression } from \"sap/fe/base/BindingToolkit\";\nimport {\n\tand,\n\tcompileExpression,\n\tconstant,\n\tequal,\n\tgetExpressionFromAnnotation,\n\tifElse,\n\tnot,\n\tor,\n\tpathInModel,\n\tresolveBindingString\n} from \"sap/fe/base/BindingToolkit\";\nimport type { MicroChartManifestConfiguration } from \"sap/fe/core/converters/ManifestSettings\";\nimport { ActionType, type ControlConfiguration } from \"sap/fe/core/converters/ManifestSettings\";\nimport type { MetaModelPropertyAnnotations } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport type { PageContextPathTarget } from \"sap/fe/core/converters/TemplateConverter\";\nimport type { BaseAction, CustomAction } from \"sap/fe/core/converters/controls/Common/Action\";\nimport type { AnnotationFormElement } from \"sap/fe/core/converters/controls/Common/Form\";\nimport type { FieldGroupFacet, HeaderFormData } from \"sap/fe/core/converters/controls/ObjectPage/HeaderFacet\";\nimport type { DataVisualizationSubSection } from \"sap/fe/core/converters/controls/ObjectPage/SubSection\";\nimport { Draft, UI } from \"sap/fe/core/helpers/BindingHelper\";\nimport ModelHelper from \"sap/fe/core/helpers/ModelHelper\";\nimport * as StableIdHelper from \"sap/fe/core/helpers/StableIdHelper\";\nimport { getTitleBindingExpression } from \"sap/fe/core/helpers/TitleHelper\";\nimport type { ViewData } from \"sap/fe/core/services/TemplatedViewServiceFactory\";\nimport type { DataModelObjectPath } from \"sap/fe/core/templating/DataModelPathHelper\";\nimport CommonHelper from \"sap/fe/macros/CommonHelper\";\nimport {\n\taddTextArrangementToBindingExpression,\n\tformatValueRecursively,\n\tgetTextBindingExpression\n} from \"sap/fe/macros/field/FieldTemplating\";\nimport mLibrary from \"sap/m/library\";\nimport BindingInfo from \"sap/ui/base/BindingInfo\";\nimport Library from \"sap/ui/core/Lib\";\nimport type { ManifestOutboundEntry } from \"sap/ui/core/Manifest\";\nimport type { IContext } from \"sap/ui/core/util/XMLPreprocessor\";\nimport ODataModelAnnotationHelper from \"sap/ui/model/odata/v4/AnnotationHelper\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type ODataMetaModel from \"sap/ui/model/odata/v4/ODataMetaModel\";\nimport type { MetaModelType } from \"../../../../../../../types/metamodel_types\";\n\nconst ButtonType = mLibrary.ButtonType;\n\nexport const getExpressionForTitle = function (\n\tfullContextPath: DataModelObjectPath<PageContextPathTarget>,\n\tviewData: ViewData,\n\theaderInfo?: HeaderInfoType\n): CompiledBindingToolkitExpression {\n\treturn getTitleBindingExpression(\n\t\tfullContextPath as DataModelObjectPath<Property>,\n\t\tgetTextBindingExpression,\n\t\tundefined,\n\t\theaderInfo,\n\t\tviewData\n\t);\n};\n\n/**\n * Retrieves the expression for the description of an object page.\n * @param fullContextPath The full context path used to reach that object page\n * @param oHeaderInfo The @UI.HeaderInfo annotation content\n * @param oHeaderInfo.Description\n * @returns The binding expression for the object page description\n */\nexport const getExpressionForDescription = function (\n\tfullContextPath: DataModelObjectPath<EntitySet>,\n\toHeaderInfo?: HeaderInfoType\n): CompiledBindingToolkitExpression {\n\tlet descriptionBinding = getExpressionFromAnnotation((oHeaderInfo?.Description as DataFieldTypes)?.Value);\n\tif ((oHeaderInfo?.Description as DataFieldTypes)?.Value?.$target?.annotations?.Common?.Text?.annotations?.UI?.TextArrangement) {\n\t\t// In case an explicit text arrangement was set we make use of it in the description as well\n\t\tdescriptionBinding = addTextArrangementToBindingExpression(descriptionBinding, fullContextPath);\n\t}\n\tconst description = compileExpression(formatValueRecursively(descriptionBinding, fullContextPath));\n\treturn description === \"undefined\" ? \"\" : description;\n};\n\n/**\n * Return the expression for the save button.\n * @param oViewData The current view data\n * @param fullContextPath The path used up until here\n * @returns The binding expression that shows the right save button text\n */\nexport const getExpressionForSaveButton = function (\n\toViewData: ViewData,\n\tfullContextPath: DataModelObjectPath<EntitySet>\n): CompiledBindingToolkitExpression {\n\tconst saveButtonText = oViewData.resourceModel.getText(\"T_OP_OBJECT_PAGE_SAVE\");\n\tconst createButtonText = oViewData.resourceModel.getText(\"T_OP_OBJECT_PAGE_CREATE\");\n\tlet saveExpression;\n\n\tif ((fullContextPath.startingEntitySet as EntitySet).annotations.Session?.StickySessionSupported) {\n\t\t// If we're in sticky mode AND the ui is in create mode, show Create, else show Save\n\t\tsaveExpression = ifElse(UI.IsCreateMode, createButtonText, saveButtonText);\n\t} else {\n\t\t// If we're in draft AND the draft is a new object (!IsActiveEntity && !HasActiveEntity), show create, else show save\n\t\tsaveExpression = ifElse(Draft.IsNewObject, createButtonText, saveButtonText);\n\t}\n\treturn compileExpression(saveExpression);\n};\n\n/**\n * Return the expression of the label for a field into a header form.\n * @param label The label of the header form in an object page.\n * @param viewData The current view data.\n * @returns The binding expression for the translated label of the of the header form in an object page.\n */\nexport const getExpressionForLabelOnHeaderForm = function (label: String, viewData: ViewData): CompiledBindingToolkitExpression {\n\treturn viewData.resourceModel.getText(\"HEADER_FORM_LABEL\", [label]);\n};\n\n/**\n * Method returns Whether the action type is manifest or not.\n * @param action The action object\n * @returns `true` if action is coming from manifest, `false` otherwise\n */\nexport const isManifestAction = function (action: BaseAction | CustomAction): action is CustomAction {\n\tconst nonManifestActions = [\n\t\t\"Primary\",\n\t\t\"DefaultApply\",\n\t\t\"Secondary\",\n\t\t\"ForAction\",\n\t\t\"ForNavigation\",\n\t\t\"SwitchToActiveObject\",\n\t\t\"SwitchToDraftObject\",\n\t\t\"DraftActions\",\n\t\t\"Copy\",\n\t\t\"Standard\"\n\t];\n\treturn !nonManifestActions.includes(action.type ?? \"\");\n};\n\n/**\n * Returns a compiled expression to determine Emphasized  button type based on Criticality across all actions\n * If critical action is rendered, its considered to be the primary action. Hence template's default primary action is set back to Default.\n * @param dataContextPath The dataModelObjectPath related to the context\n * @returns An expression to deduce if button type is Default or Emphasized\n */\nexport const buildEmphasizedButtonExpression = function (\n\tdataContextPath: DataModelObjectPath<EntitySet | NavigationProperty | Singleton>\n): CompiledBindingToolkitExpression {\n\tconst identification = dataContextPath.targetEntityType?.annotations?.UI?.Identification;\n\tconst dataFieldsWithCriticality =\n\t\tidentification?.filter((dataField) => dataField.$Type === UIAnnotationTypes.DataFieldForAction && dataField.Criticality) || [];\n\n\tconst dataFieldsBindingExpressions = dataFieldsWithCriticality.length\n\t\t? dataFieldsWithCriticality.map((dataField) => {\n\t\t\t\tconst criticalityVisibleBindingExpression = getExpressionFromAnnotation(dataField.Criticality);\n\t\t\t\treturn and(\n\t\t\t\t\tnot(equal(getExpressionFromAnnotation(dataField.annotations?.UI?.Hidden), true)),\n\t\t\t\t\tor(\n\t\t\t\t\t\tequal(criticalityVisibleBindingExpression, \"UI.CriticalityType/Negative\"),\n\t\t\t\t\t\tequal(criticalityVisibleBindingExpression, \"1\"),\n\t\t\t\t\t\tequal(criticalityVisibleBindingExpression as BindingToolkitExpression<number>, 1),\n\t\t\t\t\t\tequal(criticalityVisibleBindingExpression, \"UI.CriticalityType/Positive\"),\n\t\t\t\t\t\tequal(criticalityVisibleBindingExpression, \"3\"),\n\t\t\t\t\t\tequal(criticalityVisibleBindingExpression as BindingToolkitExpression<number>, 3)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t  })\n\t\t: ([constant(false)] as BindingToolkitExpression<boolean>[]);\n\n\t// If there is at least one visible dataField with criticality negative or positive, the type is set as Ghost\n\t// else it is emphasized\n\treturn compileExpression(ifElse(or(...dataFieldsBindingExpressions), ButtonType.Ghost, ButtonType.Emphasized));\n};\n\nexport const getElementBinding = function (sPath: string): string {\n\tconst sNavigationPath = ODataModelAnnotationHelper.getNavigationPath(sPath);\n\tif (sNavigationPath) {\n\t\treturn \"{path:'\" + sNavigationPath + \"'}\";\n\t} else {\n\t\t//no navigation property needs empty object\n\t\treturn \"{path: ''}\";\n\t}\n};\n\n/**\n * Function to check if draft pattern is supported.\n * @param entitySet The current entity set.\n * @returns Returns the Boolean value based on draft state\n */\nexport const checkDraftState = function (entitySet: EntitySet): boolean {\n\tif (entitySet.annotations?.Common?.DraftRoot?.EditAction) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Function to check if the entitySet is a draft root that supports collaboration.\n * @param entitySet The current entity set.\n * @returns Returns the Boolean value based on draft state\n */\nexport const checkCollaborationDraftRoot = function (entitySet: EntitySet): boolean {\n\tif (entitySet.annotations?.Common?.DraftRoot?.ShareAction) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Function to get the visibility for the SwitchToActive button in the object page or subobject page.\n * @param entitySet The current entity set.\n * @returns Returns expression binding or Boolean value based on the draft state\n */\nexport const getSwitchToActiveVisibility = function (entitySet: EntitySet): CompiledBindingToolkitExpression | boolean {\n\tif (checkDraftState(entitySet)) {\n\t\tif (checkCollaborationDraftRoot(entitySet)) {\n\t\t\treturn compileExpression(and(pathInModel(\"HasActiveEntity\"), UI.IsEditable));\n\t\t} else {\n\t\t\treturn compileExpression(\n\t\t\t\tand(equal(pathInModel(\"DraftAdministrativeData/DraftIsCreatedByMe\"), true), UI.IsEditable, not(UI.IsCreateMode))\n\t\t\t);\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Function to get the visibility for the SwitchToDraft button in the object page or subobject page.\n * @param entitySet The current entity set.\n * @returns Returns expression binding or Boolean value based on the draft state\n */\nexport const getSwitchToDraftVisibility = function (entitySet: EntitySet): CompiledBindingToolkitExpression | boolean {\n\tif (checkDraftState(entitySet)) {\n\t\tif (checkCollaborationDraftRoot(entitySet)) {\n\t\t\treturn compileExpression(and(pathInModel(\"HasDraftEntity\"), not(UI.IsEditable)));\n\t\t} else {\n\t\t\treturn compileExpression(\n\t\t\t\tand(\n\t\t\t\t\tequal(pathInModel(\"DraftAdministrativeData/DraftIsCreatedByMe\"), true),\n\t\t\t\t\tnot(UI.IsEditable),\n\t\t\t\t\tnot(UI.IsCreateMode),\n\t\t\t\t\tpathInModel(\"HasDraftEntity\")\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Function to get the visibility for the SwitchDraftAndActive button in the object page or subobject page.\n * @param entitySet The current entity set.\n * @returns Returns expression binding or Boolean value based on the draft state\n */\nexport const getSwitchDraftAndActiveVisibility = function (entitySet: EntitySet): CompiledBindingToolkitExpression | boolean {\n\tif (checkDraftState(entitySet)) {\n\t\tif (checkCollaborationDraftRoot(entitySet)) {\n\t\t\t// somehow checking hasDraftEntity and hasActiveEntity does not work, so we check IsActiveEntity first\n\t\t\treturn compileExpression(ifElse(pathInModel(\"IsActiveEntity\"), pathInModel(\"HasDraftEntity\"), pathInModel(\"HasActiveEntity\")));\n\t\t} else {\n\t\t\treturn compileExpression(and(equal(pathInModel(\"DraftAdministrativeData/DraftIsCreatedByMe\"), true), not(UI.IsCreateMode)));\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n};\n\n/**\n * Function to find an action from the array of header actions in the converter context.\n * @param aConverterContextHeaderActions Array of 'header' actions on the object page.\n * @param sActionType The action type\n * @returns The action with the matching action type\n */\nexport const _findAction = function (aConverterContextHeaderActions: BaseAction[], sActionType: string): BaseAction | undefined {\n\tlet oAction: BaseAction | undefined;\n\tif (aConverterContextHeaderActions && aConverterContextHeaderActions.length) {\n\t\toAction = aConverterContextHeaderActions.find(function (oHeaderAction: BaseAction) {\n\t\t\treturn oHeaderAction.type === sActionType;\n\t\t});\n\t}\n\treturn oAction;\n};\n\n/**\n * Function to format the 'enabled' property for the Delete button on the object page or subobject page in case of a Command Execution.\n * @param aConverterContextHeaderActions Array of header actions on the object page\n * @returns Returns expression binding or Boolean value from the converter output\n */\nexport const getDeleteCommandExecutionEnabled = function (aConverterContextHeaderActions: BaseAction[]): string | undefined {\n\tconst oDeleteAction = _findAction(aConverterContextHeaderActions, \"Secondary\");\n\treturn oDeleteAction ? oDeleteAction.enabled : \"false\";\n};\n\n/**\n * Function to format the 'visible' property for the Delete button on the object page or subobject page in case of a Command Execution.\n * @param aConverterContextHeaderActions Array of header actions on the object page\n * @returns Returns expression binding or Boolean value from the converter output\n */\nexport const getDeleteCommandExecutionVisible = function (aConverterContextHeaderActions: BaseAction[]): string | undefined {\n\tconst oDeleteAction = _findAction(aConverterContextHeaderActions, \"Secondary\");\n\treturn oDeleteAction ? oDeleteAction.visible : \"false\";\n};\n\n/**\n * Function to format the 'visible' property for the Edit button on the object page or subobject page in case of a Command Execution.\n * @param aConverterContextHeaderActions Array of header actions on the object page\n * @returns Returns expression binding or Boolean value from the converter output\n */\nexport const getEditCommandExecutionVisible = function (aConverterContextHeaderActions: BaseAction[]): string | undefined {\n\tconst oEditAction = _findAction(aConverterContextHeaderActions, \"Primary\");\n\treturn oEditAction ? oEditAction.visible : \"false\";\n};\n\n/**\n * Function to format the 'enabled' property for the Edit button on the object page or subobject page in case of a Command Execution.\n * @param aConverterContextHeaderActions Array of header actions on the object page\n * @returns Returns expression binding or Boolean value from the converter output\n */\nexport const getEditCommandExecutionEnabled = function (aConverterContextHeaderActions: BaseAction[]): string | undefined {\n\tconst oEditAction = _findAction(aConverterContextHeaderActions, \"Primary\");\n\treturn oEditAction ? oEditAction.enabled : \"false\";\n};\n\n/**\n * Function to get the EditAction from the based on a draft-enabled application or a sticky application.\n * @param [oEntitySet] The value from the expression.\n * @returns Returns expression binding or Boolean value based on vRawValue & oDraftNode\n */\nexport const getEditAction = function (oEntitySet: Context): string {\n\tconst sPath = oEntitySet.getPath();\n\tconst aPaths = sPath.split(\"/\");\n\tconst rootEntitySetPath = \"/\" + aPaths[1];\n\t// get the edit action from root entity sets\n\tconst rootEntitySetAnnnotations = oEntitySet.getObject(rootEntitySetPath + \"@\");\n\tconst bDraftRoot = rootEntitySetAnnnotations.hasOwnProperty(\"@com.sap.vocabularies.Common.v1.DraftRoot\");\n\tconst bDraftNode = rootEntitySetAnnnotations.hasOwnProperty(\"@com.sap.vocabularies.Common.v1.DraftNode\");\n\tconst bStickySession = rootEntitySetAnnnotations.hasOwnProperty(\"@com.sap.vocabularies.Session.v1.StickySessionSupported\");\n\tlet sActionName;\n\tif (bDraftRoot) {\n\t\tsActionName = oEntitySet.getObject(`${rootEntitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot/EditAction`);\n\t} else if (bDraftNode) {\n\t\tsActionName = oEntitySet.getObject(`${rootEntitySetPath}@com.sap.vocabularies.Common.v1.DraftNode/EditAction`);\n\t} else if (bStickySession) {\n\t\tsActionName = oEntitySet.getObject(`${rootEntitySetPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/EditAction`);\n\t}\n\treturn !sActionName ? sActionName : `${rootEntitySetPath}/${sActionName}`;\n};\n\nexport const isReadOnlyFromStaticAnnotations = function (oAnnotations?: MetaModelPropertyAnnotations, oFieldControl?: string): boolean {\n\tlet bComputed, bImmutable, bReadOnly;\n\n\tif (oAnnotations && oAnnotations[\"@Org.OData.Core.V1.Computed\"]) {\n\t\tbComputed = (oAnnotations[\"@Org.OData.Core.V1.Computed\"] as { Bool?: string }).Bool\n\t\t\t? (oAnnotations[\"@Org.OData.Core.V1.Computed\"] as { Bool?: string }).Bool == \"true\"\n\t\t\t: true;\n\t}\n\tif (oAnnotations && oAnnotations[\"@Org.OData.Core.V1.Immutable\"]) {\n\t\tbImmutable = (oAnnotations[\"@Org.OData.Core.V1.Immutable\"] as { Bool?: string }).Bool\n\t\t\t? (oAnnotations[\"@Org.OData.Core.V1.Immutable\"] as { Bool?: string }).Bool == \"true\"\n\t\t\t: true;\n\t}\n\tbReadOnly = bComputed || bImmutable;\n\n\tif (oFieldControl) {\n\t\tbReadOnly = bReadOnly || oFieldControl == \"com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly\";\n\t}\n\tif (bReadOnly) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\nexport const readOnlyExpressionFromDynamicAnnotations = function (oFieldControl?: string): string | undefined {\n\tlet sIsFieldControlPathReadOnly;\n\tif (oFieldControl) {\n\t\tif (BindingInfo.parse(oFieldControl)) {\n\t\t\tsIsFieldControlPathReadOnly = \"%\" + oFieldControl + \" === 1 \";\n\t\t}\n\t}\n\tif (sIsFieldControlPathReadOnly) {\n\t\treturn \"{= \" + sIsFieldControlPathReadOnly + \"? false : true }\";\n\t} else {\n\t\treturn undefined;\n\t}\n};\n\n/*\n * Function to get the expression for chart Title Press\n *\n * @functionw\n * @param {oConfiguration} [oConfigurations] control configuration from manifest\n *  @param {oManifest} [oManifest] Outbounds from manifest\n * returns {String} [sCollectionName] Collection Name of the Micro Chart\n *\n * returns {String} [Expression] Handler Expression for the title press\n *\n */\nexport const getExpressionForMicroChartTitlePress = function (\n\toConfiguration: ControlConfiguration,\n\ttargetAnnotationPath: string,\n\ttargetAnnotationPathDatModelObject: DataModelObjectPath<Chart | PresentationVariant>,\n\toManifestOutbound: Record<string, ManifestOutboundEntry>,\n\tsCollectionName: string\n): string | undefined {\n\ttargetAnnotationPath = getMicroChartControlConfigurationPath(targetAnnotationPath, targetAnnotationPathDatModelObject, sCollectionName);\n\tconst navigationConfiguration = (oConfiguration?.[targetAnnotationPath] as MicroChartManifestConfiguration)?.[\"navigation\"];\n\tif (navigationConfiguration) {\n\t\tif (\n\t\t\t(navigationConfiguration[\"targetOutbound\"] && navigationConfiguration[\"targetOutbound\"][\"outbound\"]) ||\n\t\t\t(navigationConfiguration[\"targetOutbound\"] &&\n\t\t\t\tnavigationConfiguration[\"targetOutbound\"][\"outbound\"] &&\n\t\t\t\tnavigationConfiguration[\"targetSections\"])\n\t\t) {\n\t\t\treturn (\n\t\t\t\t\".handlers.onDataPointTitlePressed($controller, ${$source>/},'\" +\n\t\t\t\tJSON.stringify(oManifestOutbound) +\n\t\t\t\t\"','\" +\n\t\t\t\tnavigationConfiguration[\"targetOutbound\"][\"outbound\"] +\n\t\t\t\t\"','\" +\n\t\t\t\tsCollectionName +\n\t\t\t\t\"' )\"\n\t\t\t);\n\t\t} else if (navigationConfiguration[\"targetSections\"]) {\n\t\t\treturn \".handlers.navigateToSubSection($controller, '\" + JSON.stringify(navigationConfiguration[\"targetSections\"]) + \"')\";\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n};\n\n/*\n * Function to render Chart Title as Link\n *\n * @function\n * @param {oControlConfiguration} [oConfigurations] control configuration from manifest\n * returns {String} [sKey] For the TargetOutbound and TargetSection\n *\n */\nexport const getMicroChartTitleAsLink = function (\n\toControlConfiguration: ControlConfiguration,\n\ttargetAnnotationPath: string,\n\ttargetAnnotationPathDatModelObject: DataModelObjectPath<Chart | PresentationVariant>,\n\tcollectionName: string\n): string {\n\ttargetAnnotationPath = getMicroChartControlConfigurationPath(targetAnnotationPath, targetAnnotationPathDatModelObject, collectionName);\n\tconst targetControlConfiguration = (oControlConfiguration?.[targetAnnotationPath] as MicroChartManifestConfiguration)?.[\"navigation\"];\n\tif (\n\t\ttargetControlConfiguration &&\n\t\t(targetControlConfiguration[\"targetOutbound\"] ||\n\t\t\t(targetControlConfiguration[\"targetOutbound\"] && targetControlConfiguration[\"targetSections\"]))\n\t) {\n\t\treturn \"External\";\n\t} else if (targetControlConfiguration && targetControlConfiguration[\"targetSections\"]) {\n\t\treturn \"InPage\";\n\t} else {\n\t\treturn \"None\";\n\t}\n};\n\nexport const getMicroChartControlConfigurationPath = function (\n\ttargetAnnotationPath: string,\n\ttargetAnnotationPathDatModelObject: DataModelObjectPath<Chart | PresentationVariant>,\n\tcollectionName: string\n): string {\n\tif (targetAnnotationPathDatModelObject?.targetObject?.$Type === \"com.sap.vocabularies.UI.v1.PresentationVariantType\") {\n\t\ttargetAnnotationPath = targetAnnotationPathDatModelObject.targetObject?.Visualizations[0]?.value;\n\t\ttargetAnnotationPath = collectionName ? `${collectionName}/${targetAnnotationPath}` : targetAnnotationPath;\n\t}\n\treturn targetAnnotationPath;\n};\n\n/* Get groupId from control configuration\n *\n * @function\n * @param {Object} [oConfigurations] control configuration from manifest\n * @param {String} [sAnnotationPath] Annotation Path for the configuration\n * @description Used to get the groupId for DataPoints and MicroCharts in the Header.\n *\n */\nexport const getGroupIdFromConfig = function (\n\toConfigurations: ControlConfiguration,\n\tsAnnotationPath: string,\n\tsDefaultGroupId?: string\n): string | undefined {\n\tconst oConfiguration = oConfigurations[sAnnotationPath] as MicroChartManifestConfiguration,\n\t\taAutoPatterns = [\"Heroes\", \"Decoration\", \"Workers\", \"LongRunners\"];\n\tlet sGroupId = sDefaultGroupId;\n\tif (\n\t\toConfiguration &&\n\t\toConfiguration.requestGroupId &&\n\t\taAutoPatterns.some(function (autoPattern: string) {\n\t\t\treturn autoPattern === oConfiguration.requestGroupId;\n\t\t})\n\t) {\n\t\tsGroupId = \"$auto.\" + oConfiguration.requestGroupId;\n\t}\n\treturn sGroupId;\n};\n\n/**\n * Gets groupId from control configuration for micro chart.\n * @param oControlConfiguration Control configuration from manifest\n * @param targetAnnotationPath Annotation path for the configuration\n * @param targetAnnotationPathDataModelObject DataModelObject of Chart or PresentationVariant\n * @param collectionName Collection Name\n * @param sDefaultGroupId Default GroupId\n * @returns GroupId for micro chart\n */\nexport const getGroupIdFromConfigForMicroChart = function (\n\toControlConfiguration: ControlConfiguration,\n\ttargetAnnotationPath: string,\n\ttargetAnnotationPathDataModelObject: DataModelObjectPath<Chart | PresentationVariant>,\n\tcollectionName: string,\n\tsDefaultGroupId?: string\n): string | undefined {\n\ttargetAnnotationPath = getMicroChartControlConfigurationPath(targetAnnotationPath, targetAnnotationPathDataModelObject, collectionName);\n\treturn getGroupIdFromConfig(oControlConfiguration, targetAnnotationPath, sDefaultGroupId);\n};\n\n/*\n * Get Context Binding with groupId from control configuration\n *\n * @function\n * @param {Object} [oConfigurations] control configuration from manifest\n * @param {String} [sKey] Annotation Path for of the configuration\n * @description Used to get the binding for DataPoints in the Header.\n *\n */\nexport const getBindingWithGroupIdFromConfig = function (oConfigurations: ControlConfiguration, sKey: string): string | undefined {\n\tconst sGroupId = getGroupIdFromConfig(oConfigurations, sKey);\n\tlet sBinding;\n\tif (sGroupId) {\n\t\tsBinding = \"{ path : '', parameters : { $$groupId : '\" + sGroupId + \"' } }\";\n\t}\n\treturn sBinding;\n};\n\n/**\n * Generates the binding expression.\n * @param dataModelObjectPath DataModelObjectPath of the navigationPath\n * @returns The Binding expression including path and $select query as parameter depending on the function parameters\n */\nexport const createBindingForAlternateAndSecondaryKeys = function (dataModelObjectPath: DataModelObjectPath<Facet>): string | undefined {\n\tlet binding: Partial<PathInModelExpression<undefined>> | undefined;\n\tconst alternateAndSecondaryKeys = ModelHelper.getAlternateAndSecondaryKeys(\n\t\tdataModelObjectPath?.targetEntityType,\n\t\tdataModelObjectPath?.targetEntitySet as EntitySet\n\t);\n\n\tif (alternateAndSecondaryKeys?.length) {\n\t\tbinding = {\n\t\t\tpath: \"\"\n\t\t};\n\t\tbinding.parameters = { $select: alternateAndSecondaryKeys.join(\",\") || \"\" };\n\t}\n\treturn JSON.stringify(binding);\n};\n\n/**\n * Method to check whether a FieldGroup consists of only 1 DataField with MultiLine text annotation.\n * @param aFormElements A collection of form elements used in the current field group\n * @returns Returns true if only 1 data field with Multiline text annotation exists.\n */\nexport const doesFieldGroupContainOnlyOneMultiLineDataField = function (aFormElements: AnnotationFormElement[]): boolean {\n\treturn aFormElements && aFormElements.length === 1 && !!aFormElements[0].isValueMultilineText;\n};\n\n/**\n *\n * @param viewData Specifies the ViewData model\n * @returns Expression or Boolean value\n */\nexport const getShareButtonVisibility = function (viewData: ViewData): CompiledBindingToolkitExpression {\n\tif (viewData.isShareButtonVisibleForMyInbox === false) {\n\t\treturn \"false\";\n\t}\n\tconst shareButtonVisibilityExp = viewData.fclEnabled\n\t\t? and(pathInModel(\"/showShareIcon\", \"fclhelper\"), not(UI.IsCreateMode))\n\t\t: not(UI.IsCreateMode);\n\treturn compileExpression(shareButtonVisibilityExp);\n};\n\n/*\n * Gets the visibility of the header info in edit mode\n *\n * If either the title or description field from the header annotations are editable, then the\n * editable header info is visible.\n *\n * @function\n * @param {object} [oAnnotations] Annotations object for given entity set\n * @param {object} [oFieldControl] field control\n * returns {*}  binding expression or boolean value resolved form funcitons isReadOnlyFromStaticAnnotations and isReadOnlyFromDynamicAnnotations\n */\nexport const getVisiblityOfHeaderInfo = function (\n\toTitleAnnotations: MetaModelPropertyAnnotations,\n\toDescriptionAnnotations: MetaModelPropertyAnnotations,\n\toFieldTitleFieldControl?: string,\n\toFieldDescriptionFieldControl?: string\n): boolean | string {\n\t// Check Annotations for Title Field\n\t// Set to true and don't take into account, if there are no annotations, i.e. no title exists\n\tconst bIsTitleReadOnly = oTitleAnnotations ? isReadOnlyFromStaticAnnotations(oTitleAnnotations, oFieldTitleFieldControl) : true;\n\tconst titleExpression = readOnlyExpressionFromDynamicAnnotations(oFieldTitleFieldControl);\n\t// There is no expression and the title is not ready only, this is sufficient for an editable header\n\tif (!bIsTitleReadOnly && !titleExpression) {\n\t\treturn true;\n\t}\n\n\t// Check Annotations for Description Field\n\t// Set to true and don't take into account, if there are no annotations, i.e. no description exists\n\tconst bIsDescriptionReadOnly = oDescriptionAnnotations\n\t\t? isReadOnlyFromStaticAnnotations(oDescriptionAnnotations, oFieldDescriptionFieldControl)\n\t\t: true;\n\tconst descriptionExpression = readOnlyExpressionFromDynamicAnnotations(oFieldDescriptionFieldControl);\n\t// There is no expression and the description is not ready only, this is sufficient for an editable header\n\tif (!bIsDescriptionReadOnly && !descriptionExpression) {\n\t\treturn true;\n\t}\n\n\t// Both title and description are not editable and there are no dynamic annotations\n\tif (bIsTitleReadOnly && bIsDescriptionReadOnly && !titleExpression && !descriptionExpression) {\n\t\treturn false;\n\t}\n\n\t// Now combine expressions\n\tif (titleExpression && !descriptionExpression) {\n\t\treturn titleExpression;\n\t} else if (!titleExpression && descriptionExpression) {\n\t\treturn descriptionExpression;\n\t} else {\n\t\treturn combineTitleAndDescriptionExpression(oFieldTitleFieldControl, oFieldDescriptionFieldControl);\n\t}\n};\n\nexport const combineTitleAndDescriptionExpression = function (oTitleFieldControl?: string, oDescriptionFieldControl?: string): string {\n\t// If both header and title field are based on dynmaic field control, the editable header\n\t// is visible if at least one of these is not ready only\n\treturn \"{= %\" + oTitleFieldControl + \" === 1 ? ( %\" + oDescriptionFieldControl + \" === 1 ? false : true ) : true }\";\n};\n\n/*\n * Get Expression of press event for the delete button.\n *\n * @function\n * @param entitySet The current entity set\n * @param computedAnnotationInterface The current templating context\n * returns The function string generated from the CommonHelper's method generateFunction\n */\nexport const getPressExpressionForDelete = function (): string {\n\tconst deletableContexts = \"${$view>/}.getBindingContext()\",\n\t\ttitle = \"${$view>/}.byId('fe::ObjectPage').data('ObjectPageSubtitle')\",\n\t\tdescription = \"${$view>/}.byId('fe::ObjectPage').data('ObjectPageDescription')\";\n\n\tconst params = {\n\t\ttitle: title,\n\t\tdescription: description\n\t};\n\treturn CommonHelper.generateFunction(\".editFlow.deleteDocument\", deletableContexts, CommonHelper.objectToString(params));\n};\n\n/*\n * Get Expression of press event of Edit button.\n *\n * @function\n * @param {object} [oDataField] Data field object\n * @param {string} [sEntitySetName] Entity set name\n * @param {object} [oHeaderAction] Header action object\n * returns {string}  binding expression / function string generated from commanhelper's function generateFunction\n */\nexport const getPressExpressionForEdit = function (\n\toDataField: MetaModelType<DataFieldForAction>,\n\tsEntitySetName: string,\n\toHeaderAction?: BaseAction\n): string {\n\tconst sEditableContexts = CommonHelper.addSingleQuotes(oDataField && oDataField.Action!),\n\t\tsDataFieldEnumMember =\n\t\t\toDataField &&\n\t\t\toDataField.InvocationGrouping &&\n\t\t\t(oDataField.InvocationGrouping as unknown as Record<string, string>)[\"$EnumMember\"],\n\t\tsInvocationGroup = sDataFieldEnumMember === \"com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet\" ? \"ChangeSet\" : \"Isolated\";\n\tconst oParams = {\n\t\tcontexts: \"${$view>/}.getBindingContext()\",\n\t\tentitySetName: CommonHelper.addSingleQuotes(sEntitySetName),\n\t\tinvocationGrouping: CommonHelper.addSingleQuotes(sInvocationGroup),\n\t\tmodel: \"${$source>/}.getModel()\",\n\t\tlabel: CommonHelper.addSingleQuotes(oDataField && oDataField.Label!, true),\n\t\tisNavigable: oHeaderAction && oHeaderAction.isNavigable,\n\t\tdefaultValuesExtensionFunction:\n\t\t\toHeaderAction && oHeaderAction.defaultValuesExtensionFunction ? `'${oHeaderAction.defaultValuesExtensionFunction}'` : undefined\n\t};\n\treturn CommonHelper.generateFunction(\".handlers.onCallAction\", \"${$view>/}\", sEditableContexts, CommonHelper.objectToString(oParams));\n};\n\n/**\n * Gets the expression for the 'press' event in the footer annotation actions.\n * @param dataFieldModelPath The data model path of the data field\n * @param entitySetName The entity set name\n * @param headerAction The header action object\n * @returns  The binding expression or function string\n */\nexport const getPressExpressionForFooterAnnotationAction = function (\n\tdataFieldModelPath: DataModelObjectPath<DataFieldForAction>,\n\tentitySetName: string,\n\theaderAction: CustomAction\n): string {\n\tconst dataField = dataFieldModelPath.targetObject as DataFieldForAction;\n\tconst actionContexts = CommonHelper.addSingleQuotes(dataField.Action as string);\n\tconst oParams = {\n\t\tcontexts: \"${$view>/}.getBindingContext()\",\n\t\tentitySetName: CommonHelper.addSingleQuotes(entitySetName),\n\t\tinvocationGrouping: CommonHelper.addSingleQuotes(\n\t\t\tdataField.InvocationGrouping === \"UI.OperationGroupingType/ChangeSet\" ? \"ChangeSet\" : \"Isolated\"\n\t\t),\n\t\tmodel: \"${$source>/}.getModel()\",\n\t\tlabel: CommonHelper.addSingleQuotes(dataField.Label as string, true),\n\t\tisNavigable: headerAction.isNavigable,\n\t\tdefaultValuesExtensionFunction: headerAction.defaultValuesExtensionFunction\n\t\t\t? `'${headerAction.defaultValuesExtensionFunction}'`\n\t\t\t: undefined\n\t};\n\treturn CommonHelper.generateFunction(\".handlers.onCallAction\", \"${$view>/}\", actionContexts, CommonHelper.objectToString(oParams));\n};\n\n/*\n * Get Expression for executing the event expression of the primary action.\n *\n * @function\n * @param {object} [oDataField] Data field object\n * @param {string} [sEntitySetName] Entity set name\n * @param {object} [oHeaderAction] Header action object\n * @param {CompiledBindingToolkitExpression | string} The visibility of sematic positive action\n * @param {CompiledBindingToolkitExpression | string} The enablement of semantic positive action\n * @param {CompiledBindingToolkitExpression | string} The Edit button visibility\n * @param {CompiledBindingToolkitExpression | string} The enablement of Edit button\n * returns {string}  binding expression / function string generated from commanhelper's function generateFunction\n */\nexport const getPressExpressionForPrimaryAction = function (\n\toDataField: DataFieldForAction | undefined,\n\tsEntitySetName: string | undefined,\n\toHeaderAction: BaseAction | null,\n\tpositiveActionVisible: CompiledBindingToolkitExpression | string,\n\tpositiveActionEnabled: CompiledBindingToolkitExpression | string,\n\teditActionVisible: CompiledBindingToolkitExpression | string,\n\teditActionEnabled: CompiledBindingToolkitExpression | string\n): string {\n\tconst sActionContexts = CommonHelper.addSingleQuotes(oDataField?.Action.toString() ?? \"\"),\n\t\tsDataFieldEnumMember =\n\t\t\toDataField &&\n\t\t\toDataField.InvocationGrouping &&\n\t\t\t(oDataField.InvocationGrouping as unknown as Record<string, string>)[\"$EnumMember\"],\n\t\tsInvocationGroup = sDataFieldEnumMember === \"com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet\" ? \"ChangeSet\" : \"Isolated\";\n\tconst oParams = {\n\t\tcontexts: \"${$view>/}.getBindingContext()\",\n\t\tentitySetName: sEntitySetName ? CommonHelper.addSingleQuotes(sEntitySetName) : \"\",\n\t\tinvocationGrouping: CommonHelper.addSingleQuotes(sInvocationGroup),\n\t\tmodel: \"${$source>/}.getModel()\",\n\t\tlabel: CommonHelper.addSingleQuotes(oDataField?.Label?.toString() ?? \"\", true),\n\t\tisNavigable: oHeaderAction?.isNavigable,\n\t\tdefaultValuesExtensionFunction: oHeaderAction?.defaultValuesExtensionFunction\n\t\t\t? `'${oHeaderAction.defaultValuesExtensionFunction}'`\n\t\t\t: undefined\n\t};\n\tconst oConditions = {\n\t\tpositiveActionVisible,\n\t\tpositiveActionEnabled,\n\t\teditActionVisible,\n\t\teditActionEnabled\n\t};\n\treturn CommonHelper.generateFunction(\n\t\t\".handlers.onPrimaryAction\",\n\t\t\"$controller\",\n\t\t\"${$view>/}\",\n\t\t\"${$view>/}.getBindingContext()\",\n\t\tsActionContexts,\n\t\tCommonHelper.objectToString(oParams),\n\t\tCommonHelper.objectToString(oConditions)\n\t);\n};\n\n/*\n * Gets the binding of the container HBox for the header facet.\n *\n * @function\n * @param {object} [oControlConfiguration] The control configuration form of the viewData model\n * @param {object} [oHeaderFacet] The object of the header facet\n * returns {*}  The binding expression from function getBindingWithGroupIdFromConfig or undefined.\n */\nexport const getStashableHBoxBinding = function (\n\toControlConfiguration: ControlConfiguration,\n\toHeaderFacet: { Facet: FieldGroupFacet }\n): string | undefined {\n\tif (oHeaderFacet && oHeaderFacet.Facet && oHeaderFacet.Facet.targetAnnotationType === \"DataPoint\") {\n\t\treturn getBindingWithGroupIdFromConfig(oControlConfiguration, oHeaderFacet.Facet.targetAnnotationValue!);\n\t}\n};\n\nexport const getHeaderFormHboxRenderType = function (dataField: DataModelObjectPath<DataFieldAbstractTypes>): string | undefined {\n\tif (dataField?.targetObject?.$Type === UIAnnotationTypes.DataFieldForAnnotation) {\n\t\treturn undefined;\n\t}\n\treturn \"Bare\";\n};\n\n/**\n * The default action group handler that is invoked when adding the menu button handling appropriately.\n * @param oCtx The current context in which the handler is called\n * @param oAction The current action context\n * @param oDataFieldForDefaultAction The current dataField for the default action\n * @param defaultActionContextOrEntitySet The current context for the default action\n * @returns The appropriate expression string\n */\nexport function getDefaultActionHandler(\n\toCtx: Context,\n\toAction: CustomAction,\n\toDataFieldForDefaultAction: MetaModelType<DataFieldDefault>,\n\tdefaultActionContextOrEntitySet: string\n): CompiledBindingToolkitExpression {\n\tif (oAction.defaultAction) {\n\t\tconst defaultAction = oAction.defaultAction as CustomAction;\n\t\ttry {\n\t\t\tswitch (defaultAction.type) {\n\t\t\t\tcase \"ForAction\": {\n\t\t\t\t\treturn getPressExpressionForEdit(\n\t\t\t\t\t\toDataFieldForDefaultAction as MetaModelType<DataFieldForAction>,\n\t\t\t\t\t\tdefaultActionContextOrEntitySet,\n\t\t\t\t\t\toAction.defaultAction as BaseAction\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tcase \"ForNavigation\": {\n\t\t\t\t\tif (defaultAction.command) {\n\t\t\t\t\t\treturn \"cmd:\" + defaultAction.command;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn defaultAction.press;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tif (defaultAction.command) {\n\t\t\t\t\t\treturn \"cmd:\" + defaultAction.command;\n\t\t\t\t\t}\n\t\t\t\t\tif (defaultAction.noWrap) {\n\t\t\t\t\t\treturn defaultAction.press;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn CommonHelper.buildActionWrapper(defaultAction, { id: \"forTheObjectPage\" });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (ioEx) {\n\t\t\treturn \"binding for the default action is not working as expected\";\n\t\t}\n\t}\n\treturn undefined;\n}\n\n/**\n * Check if the sub section visualization is part of preview.\n * @param subSection The sub section visualization\n * @returns A Boolean value\n */\nexport function isVisualizationIsPartOfPreview(subSection: DataVisualizationSubSection): boolean {\n\treturn subSection.isPartOfPreview === true || subSection.presentation.visualizations[0].type !== \"Table\";\n}\n\n/**\n * Returns the expression that determines whether the footer of the object page is to be visible or not.\n * @param context The context for the formatter.\n * @param footerActions The list of footer actions.\n * @returns A binding expression\n */\nexport const getFooterVisibilityExpression = function (context: IContext, footerActions: BaseAction[]): CompiledBindingToolkitExpression {\n\tconst metaModel = context.getInterface(1).getModel() as ODataMetaModel;\n\n\tconst _generateBindingsForActions = (actions: BaseAction[]): BindingToolkitExpression<boolean>[] => {\n\t\tif (actions.length) {\n\t\t\treturn actions.map((action) => resolveBindingString(action.visible ?? true, \"boolean\")) as BindingToolkitExpression<boolean>[];\n\t\t}\n\t\treturn [constant(false)];\n\t};\n\n\tconst getActionModelPath = (action: BaseAction): DataModelObjectPath<DataFieldForAction> | undefined => {\n\t\tconst annotationPath = action.annotationPath;\n\t\tif (annotationPath) {\n\t\t\tconst actionContext = metaModel.getContext(annotationPath);\n\t\t\treturn getInvolvedDataModelObjects<DataFieldForAction>(actionContext);\n\t\t}\n\t\treturn undefined;\n\t};\n\n\t// Actions are coming from the converter so only determining actions and not statically hidden are listed\n\tconst determiningActions = footerActions.filter((action) => action.type === ActionType.DataFieldForAction);\n\tconst manifestActionBindings = _generateBindingsForActions(footerActions.filter((action) => isManifestAction(action)));\n\tconst determiningActionBindings = _generateBindingsForActions(determiningActions);\n\n\tconst isNotHiddenDeterminingAction = !!determiningActions.find((action) => {\n\t\tconst actionContextModelPath = getActionModelPath(action);\n\t\treturn !actionContextModelPath?.targetObject?.annotations?.UI?.Hidden;\n\t});\n\n\treturn compileExpression(\n\t\tor(\n\t\t\tisNotHiddenDeterminingAction,\n\t\t\tor(...manifestActionBindings),\n\t\t\tand(or(UI.IsEditable, or(...determiningActionBindings)), not(pathInModel(\"isCreateDialogOpen\", \"internal\")))\n\t\t)\n\t);\n};\n\n/**\n * Get the subsection header level.\n * @param subSection The subsection visualization\n * @param isMoreContent\n * @returns A String value\n */\nexport function getHeaderLevel(subSection: DataVisualizationSubSection, isMoreContent: boolean): string {\n\tif (isMoreContent) {\n\t\tif (!subSection.showSubSectionTitle) {\n\t\t\t// whenever title is merged for sub-section, level should be H4\n\t\t\treturn \"H4\";\n\t\t} else if (subSection.level === 2 && subSection.dataVisualizationTitleVisible === \"true\") {\n\t\t\t// retain old logic\n\t\t\treturn \"H6\";\n\t\t} else {\n\t\t\treturn \"H5\"; // retain old logic\n\t\t}\n\t} else if (!subSection.showSubSectionTitle) {\n\t\t// whenever title is merged for section, level should be H3\n\t\treturn \"H3\";\n\t} else if (subSection.level === 2 && subSection.dataVisualizationTitleVisible === \"true\") {\n\t\t// retain old logic\n\t\treturn \"H5\";\n\t} else {\n\t\treturn \"H4\"; // retain old logic\n\t}\n}\n\n/**\n * Gets the aria-labelledby attribute for the header formelement.\n * @param headerFormData\n * @param formElementIdPrefix\n * @returns The string for the aria-labelledby attribute\n */\nexport const getHeaderFormAriaLabelledBy = function (headerFormData: HeaderFormData, formElementIdPrefix: string): string {\n\tlet titleId = \"\";\n\tif (headerFormData.label) {\n\t\ttitleId = StableIdHelper.generate([headerFormData.id, \"Title\"]);\n\t}\n\tconst labelId = StableIdHelper.generate([formElementIdPrefix, \"Label\"]);\n\treturn titleId ? `${titleId},${labelId}` : labelId;\n};\n\n/**\n * Gets the aria text for form regions on Object Page.\n * @param subSectionTitle The title of the subsection\n * @returns The aria text for the form region\n */\nexport const getFormAriaText = function (subSectionTitle: string | undefined): string | undefined {\n\tconst resourceBundle = Library.getResourceBundleFor(\"sap.fe.core\")!;\n\treturn subSectionTitle !== undefined ? resourceBundle.getText(\"C_FORM_ARIA_TEXT\", [subSectionTitle]) : undefined;\n};\n\ngetFooterVisibilityExpression.requiresIContext = true;\n"],"mappings":"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","ignoreList":[]}