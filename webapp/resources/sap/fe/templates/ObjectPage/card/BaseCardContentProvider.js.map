{"version":3,"file":"BaseCardContentProvider.js","names":["BaseCardContentProvider","convertedTypes","config","this","pathsToQuery","_exports","_proto","prototype","getPathsToQuery","Array","from","Set","addPathsToQuery","pathsToAdd","getCardConfigurationByKey","name","getEntityType","contextPath","resolutionTargetEntityType","resolvePath","target","getBindingForProperty","fieldPath","getPropertyPathForCard","propertyPath","includes","replace","formatTextproperty","property","textProperty","textExpression","propertyBinding","getRelativePath","getTarget","textArrangementType","annotations","Common","Text","UI","TextArrangement","toString","textBinding","getTextBlockVisiblityForDateField","additionalValue","exp","constant","targetIsProperty","edmType","type","valueExists","and","notEqual","pathInModel","undefined","additionalValueExists","additionalValuePath","or","getFormattedTextValue","propertyBindingExpression","getValueBinding","adaptiveBindingExpression","updatePathsAndGetCompiledExpression","expression","navigationPaths","compiledExpression","getAdaptiveCompilerResult","metaPath","isProperty"],"sources":["./BaseCardContentProvider.ts"],"sourcesContent":["import type { ConvertedMetadata, EntityType, Property } from \"@sap-ux/vocabularies-types\";\nimport { TextArrangementType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { and, constant, notEqual, or, pathInModel, type BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { getAdaptiveCompilerResult, type CompiledAdaptiveCardExpression } from \"sap/fe/core/helpers/AdaptiveCardExpressionCompiler\";\nimport type MetaPath from \"sap/fe/core/helpers/MetaPath\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\n\n/**\n * @typedef CardContextInfo\n * @property {string} bindingContextPath - Runtime binding context path for card.\n * @property {string} contextPath - Path to the target entityType of page for the card.\n */\nexport type CardContextInfo = {\n\tbindingContextPath: string;\n\tcontextPath: string;\n};\n\n/**\n * @typedef CardConfig\n * @property {string} objectTitle - Title for the card.\n * @property {string} appUrl - Browser url of the application.\n * @property {string} webUrl - Url to fetch the card data. It shall contain the query parameters like $select and $expand.\n * @property {string} serviceURI - Service url.\n * @property {CardContextInfo} contextInfo - Card's context information.\n */\nexport type CardConfig = {\n\tobjectTitle: string;\n\tappUrl: string;\n\twebUrl: string;\n\tserviceURI: string;\n\tcontextInfo: CardContextInfo;\n};\n\n/**\n * Adaptive card json generator.\n * @param convertedTypes Converted Metadata.\n * @param config Card Configuration.\n */\nexport default class BaseCardContentProvider<GenericConfig extends CardConfig> {\n\tprivate pathsToQuery: string[] = [];\n\n\t/**\n\t * Get property paths to query.\n\t * @returns Property paths that need to be queried.\n\t */\n\tpublic getPathsToQuery(): string[] {\n\t\treturn Array.from(new Set(this.pathsToQuery));\n\t}\n\n\t/**\n\t * Collecting property paths that need to be queried for card creation.\n\t * @param pathsToAdd Property paths that need to be cummulated.\n\t */\n\tpublic addPathsToQuery(pathsToAdd: string[]): void {\n\t\tthis.pathsToQuery = [...this.pathsToQuery, ...pathsToAdd];\n\t}\n\n\t/**\n\t * Get card configuration by key.\n\t * @param name Configuration key name.\n\t * @returns Specific card configuration.\n\t */\n\tpublic getCardConfigurationByKey<K extends keyof GenericConfig>(name: K): GenericConfig[K] {\n\t\treturn this.config[name];\n\t}\n\n\t/**\n\t * Get converted metadata entityType of the card.\n\t * @returns EntityType.\n\t */\n\tpublic getEntityType(): EntityType | undefined {\n\t\tconst { contextPath } = this.getCardConfigurationByKey(\"contextInfo\");\n\t\tconst resolutionTargetEntityType = this.convertedTypes.resolvePath<EntityType>(contextPath);\n\t\treturn resolutionTargetEntityType.target;\n\t}\n\n\t/**\n\t * Get binding path of the field.\n\t * @param fieldPath Path of the field annotation\n\t * @returns Binding path of the field\n\t */\n\tpublic getBindingForProperty(fieldPath: string): string {\n\t\treturn \"${\" + this.getPropertyPathForCard(fieldPath) + \"}\";\n\t}\n\n\t/**\n\t * Replace the navigationproperty path.\n\t * @param propertyPath Path of the field annotation\n\t * @returns Property path along with navigation paths\n\t */\n\tpublic getPropertyPathForCard(propertyPath: string): string {\n\t\t// Check for navigation property path and replace to adaptive card format\n\t\tif (propertyPath && propertyPath?.includes(\"/\")) {\n\t\t\tpropertyPath = propertyPath.replace(\"/\", \".\");\n\t\t}\n\t\tthis.addPathsToQuery([propertyPath]);\n\t\treturn propertyPath;\n\t}\n\n\t/**\n\t * Get binding path of the field which is configured with Text Arrangement.\n\t * @param property Property of the field annotation\n\t * @param textProperty Text property of the field annotation\n\t * @returns Binding path of the field with Text Arrangement\n\t */\n\tprivate formatTextproperty(property: MetaPath<Property>, textProperty?: MetaPath<Property>): string {\n\t\tlet textExpression;\n\t\tconst propertyBinding = this.getPropertyPathForCard(property.getRelativePath());\n\t\tif (textProperty && textProperty.getTarget()) {\n\t\t\tconst textArrangementType = property?.getTarget()?.annotations?.Common?.Text?.annotations?.UI?.TextArrangement?.toString();\n\t\t\tconst textBinding = this.getPropertyPathForCard(textProperty.getRelativePath());\n\t\t\tswitch (textArrangementType) {\n\t\t\t\tcase TextArrangementType.TextLast:\n\t\t\t\t\ttextExpression = `\\${string(${propertyBinding})} (\\${string(${textBinding})})`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextArrangementType.TextOnly:\n\t\t\t\t\ttextExpression = `\\${string(${textBinding})}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextArrangementType.TextSeparate:\n\t\t\t\t\ttextExpression = `\\${string(${propertyBinding})}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextArrangementType.TextFirst:\n\t\t\t\tdefault:\n\t\t\t\t\ttextExpression = `\\${string(${textBinding})} (\\${string(${propertyBinding})})`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\ttextExpression = `\\${string(${this.getPropertyPathForCard(property.getRelativePath())})}`;\n\t\t}\n\t\treturn textExpression;\n\t}\n\n\tpublic getTextBlockVisiblityForDateField(\n\t\tproperty: MetaPath<string>,\n\t\tadditionalValue?: MetaPath<string>\n\t): BindingToolkitExpression<boolean> {\n\t\tlet exp: BindingToolkitExpression<boolean> = constant(true);\n\t\tif (this.targetIsProperty(property)) {\n\t\t\tconst edmType = (property as MetaPath<Property>).getTarget().type;\n\t\t\tconst propertyPath = this.getPropertyPathForCard(property.getRelativePath());\n\t\t\tconst valueExists = and(notEqual(pathInModel(propertyPath), undefined), notEqual(pathInModel(propertyPath), null));\n\t\t\tswitch (edmType) {\n\t\t\t\tcase \"Edm.Date\":\n\t\t\t\tcase \"Edm.DateTimeOffset\":\n\t\t\t\tcase \"Edm.DateTime\":\n\t\t\t\tcase \"Edm.Decimal\": {\n\t\t\t\t\texp = valueExists;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tlet additionalValueExists: BindingToolkitExpression<boolean> = constant(false);\n\t\t\t\t\tif (additionalValue && this.targetIsProperty(additionalValue)) {\n\t\t\t\t\t\tconst additionalValuePath = this.getPropertyPathForCard(additionalValue.getRelativePath());\n\t\t\t\t\t\tadditionalValueExists = and(\n\t\t\t\t\t\t\tnotEqual(pathInModel(additionalValuePath), undefined),\n\t\t\t\t\t\t\tnotEqual(pathInModel(additionalValuePath), null)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\texp = or(valueExists, additionalValueExists);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn exp;\n\t}\n\n\t/**\n\t * Get adaptive card binding expressions of the field which is configured with Text Arrangement.\n\t * @param property Property of the field annotation\n\t * @param textProperty Text property of the field annotation\n\t * @returns Binding path of the field configured with Date, DateTime and Decimal\n\t */\n\tprivate getFormattedTextValue(property: MetaPath<Property>, textProperty?: MetaPath<Property>): string {\n\t\tlet propertyBindingExpression;\n\t\tswitch (property?.getTarget()?.type) {\n\t\t\tcase \"Edm.Date\":\n\t\t\t\tpropertyBindingExpression = `{{DATE(\\${formatDateTime(${this.getPropertyPathForCard(\n\t\t\t\t\tproperty.getRelativePath()\n\t\t\t\t)}, 'yyyy-MM-ddTHH:mm:ssZ')}, SHORT)}}`;\n\t\t\t\tbreak;\n\t\t\tcase \"Edm.DateTimeOffset\":\n\t\t\tcase \"Edm.DateTime\":\n\t\t\t\tpropertyBindingExpression = `\\${formatDateTime(${this.getPropertyPathForCard(property.getRelativePath())})}`;\n\t\t\t\tbreak;\n\t\t\tcase \"Edm.Decimal\":\n\t\t\t\tpropertyBindingExpression = `\\${formatNumber(${this.getPropertyPathForCard(property.getRelativePath())},2)}`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpropertyBindingExpression = this.formatTextproperty(property, textProperty);\n\t\t\t\tbreak;\n\t\t}\n\t\treturn propertyBindingExpression;\n\t}\n\n\t/**\n\t * Get binding path of the field.\n\t * @param property Property of the field annotation\n\t * @param textProperty Text property of the field annotation\n\t * @returns Binding path of the field\n\t */\n\tpublic getValueBinding<T>(property: MetaPath<T> | string, textProperty?: MetaPath<T>): string {\n\t\tlet adaptiveBindingExpression = \"\";\n\t\tif (typeof property === \"string\") {\n\t\t\tadaptiveBindingExpression = property;\n\t\t} else if (this.targetIsProperty(property) && (!textProperty || this.targetIsProperty(textProperty))) {\n\t\t\tadaptiveBindingExpression = this.getFormattedTextValue(property, textProperty);\n\t\t}\n\t\treturn adaptiveBindingExpression;\n\t}\n\n\t/**\n\t * Update paths to query and get compiled expression.\n\t * @param expression Binding toolkit expression\n\t * @param navigationPaths\n\t * @returns Compiled adaptive expression\n\t */\n\tpublic updatePathsAndGetCompiledExpression<T>(\n\t\texpression: BindingToolkitExpression<T>,\n\t\tnavigationPaths?: string\n\t): CompiledAdaptiveCardExpression {\n\t\tconst { pathsToQuery, compiledExpression } = getAdaptiveCompilerResult(expression, navigationPaths);\n\t\tthis.addPathsToQuery(pathsToQuery);\n\t\treturn compiledExpression;\n\t}\n\n\tpublic targetIsProperty(metaPath: MetaPath<unknown> | undefined): metaPath is MetaPath<Property> {\n\t\tconst target = metaPath?.getTarget();\n\t\treturn isProperty(target);\n\t}\n\n\tconstructor(\n\t\tpublic convertedTypes: ConvertedMetadata,\n\t\tprivate config: GenericConfig\n\t) {}\n}\n"],"mappings":";;;;2SAiCA,IAKqBA,EAAuB,WA+L3C,SAAAA,EACQC,EACCC,GACPC,KAjMMC,aAAyB,GAAED,KA+L3BF,iBAAiCE,KAChCD,QACN,CAACG,EAAAL,EAAA,IAAAM,EAAAN,EAAAO,UA/LJD,EAIOE,gBAAP,SAAOA,IACN,OAAOC,MAAMC,KAAK,IAAIC,IAAIR,KAAKC,cAChC,EAEAE,EAIOM,gBAAP,SAAOA,EAAgBC,GACtBV,KAAKC,aAAe,IAAID,KAAKC,gBAAiBS,EAC/C,EAEAP,EAKOQ,0BAAP,SAAOA,EAAyDC,GAC/D,OAAOZ,KAAKD,OAAOa,EACpB,EAEAT,EAIOU,cAAP,SAAOA,IACN,MAAMC,YAAEA,GAAgBd,KAAKW,0BAA0B,eACvD,MAAMI,EAA6Bf,KAAKF,eAAekB,YAAwBF,GAC/E,OAAOC,EAA2BE,MACnC,EAEAd,EAKOe,sBAAP,SAAOA,EAAsBC,GAC5B,MAAO,KAAOnB,KAAKoB,uBAAuBD,GAAa,GACxD,EAEAhB,EAKOiB,uBAAP,SAAOA,EAAuBC,GAE7B,GAAIA,GAAgBA,GAAcC,SAAS,KAAM,CAChDD,EAAeA,EAAaE,QAAQ,IAAK,IAC1C,CACAvB,KAAKS,gBAAgB,CAACY,IACtB,OAAOA,CACR,EAEAlB,EAMQqB,mBAAR,SAAQA,EAAmBC,EAA8BC,GACxD,IAAIC,EACJ,MAAMC,EAAkB5B,KAAKoB,uBAAuBK,EAASI,mBAC7D,GAAIH,GAAgBA,EAAaI,YAAa,CAC7C,MAAMC,EAAsBN,GAAUK,aAAaE,aAAaC,QAAQC,MAAMF,aAAaG,IAAIC,iBAAiBC,WAChH,MAAMC,EAActC,KAAKoB,uBAAuBM,EAAaG,mBAC7D,OAAQE,GACP,sCACCJ,EAAiB,aAAaC,kBAAgCU,OAC9D,MACD,sCACCX,EAAiB,aAAaW,MAC9B,MACD,0CACCX,EAAiB,aAAaC,MAC9B,MACD,uCACA,QACCD,EAAiB,aAAaW,kBAA4BV,OAC1D,MAEH,KAAO,CACND,EAAiB,aAAa3B,KAAKoB,uBAAuBK,EAASI,sBACpE,CACA,OAAOF,CACR,EAACxB,EAEMoC,kCAAP,SAAOA,EACNd,EACAe,GAEA,IAAIC,EAAyCC,EAAS,MACtD,GAAI1C,KAAK2C,iBAAiBlB,GAAW,CACpC,MAAMmB,EAAWnB,EAAgCK,YAAYe,KAC7D,MAAMxB,EAAerB,KAAKoB,uBAAuBK,EAASI,mBAC1D,MAAMiB,EAAcC,EAAIC,EAASC,EAAY5B,GAAe6B,WAAYF,EAASC,EAAY5B,GAAe,OAC5G,OAAQuB,GACP,IAAK,WACL,IAAK,qBACL,IAAK,eACL,IAAK,cAAe,CACnBH,EAAMK,EACN,KACD,CACA,QAAS,CACR,IAAIK,EAA2DT,EAAS,OACxE,GAAIF,GAAmBxC,KAAK2C,iBAAiBH,GAAkB,CAC9D,MAAMY,EAAsBpD,KAAKoB,uBAAuBoB,EAAgBX,mBACxEsB,EAAwBJ,EACvBC,EAASC,EAAYG,GAAsBF,WAC3CF,EAASC,EAAYG,GAAsB,MAE7C,CACAX,EAAMY,EAAGP,EAAaK,EACvB,EAEF,CACA,OAAOV,CACR,EAEAtC,EAMQmD,sBAAR,SAAQA,EAAsB7B,EAA8BC,GAC3D,IAAI6B,EACJ,OAAQ9B,GAAUK,aAAae,MAC9B,IAAK,WACJU,EAA4B,4BAA4BvD,KAAKoB,uBAC5DK,EAASI,yDAEV,MACD,IAAK,qBACL,IAAK,eACJ0B,EAA4B,qBAAqBvD,KAAKoB,uBAAuBK,EAASI,uBACtF,MACD,IAAK,cACJ0B,EAA4B,mBAAmBvD,KAAKoB,uBAAuBK,EAASI,yBACpF,MACD,QACC0B,EAA4BvD,KAAKwB,mBAAmBC,EAAUC,GAC9D,MAEF,OAAO6B,CACR,EAEApD,EAMOqD,gBAAP,SAAOA,EAAmB/B,EAAgCC,GACzD,IAAI+B,EAA4B,GAChC,UAAWhC,IAAa,SAAU,CACjCgC,EAA4BhC,CAC7B,MAAO,GAAIzB,KAAK2C,iBAAiBlB,MAAeC,GAAgB1B,KAAK2C,iBAAiBjB,IAAgB,CACrG+B,EAA4BzD,KAAKsD,sBAAsB7B,EAAUC,EAClE,CACA,OAAO+B,CACR,EAEAtD,EAMOuD,oCAAP,SAAOA,EACNC,EACAC,GAEA,MAAM3D,aAAEA,EAAY4D,mBAAEA,GAAuBC,EAA0BH,EAAYC,GACnF5D,KAAKS,gBAAgBR,GACrB,OAAO4D,CACR,EAAC1D,EAEMwC,iBAAP,SAAOA,EAAiBoB,GACvB,MAAM9C,EAAS8C,GAAUjC,YACzB,OAAOkC,EAAW/C,EACnB,EAAC,OAAApB,CAAA,CA7L0C,GA6L1CK,EAAAL,EAAA,OAAAK,CAAA","ignoreList":[]}