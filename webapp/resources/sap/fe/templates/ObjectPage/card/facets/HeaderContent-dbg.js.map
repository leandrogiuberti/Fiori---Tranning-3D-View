{"version":3,"names":["MAX_COLUMNS","HeaderContent","_BaseCardContentProvi","convertedTypes","config","_this","call","cardElements","headerFacetsForAdaptiveCard","contextPath","getCardConfigurationByKey","headerFacet","MetaPath","customConfigHeaderFacets","getCustomConfigHeaderFacets","createHeaderForms","error","Log","_assertThisInitialized","_exports","_inheritsLoose","_proto","prototype","getHeaderContent","getFieldGroupProperties","referenceFacetTargetMetaPath","dataField","formElementConfig","property","textProperty","textpropertyAnnotation","label","labelText","navigationPath","color","$Type","isPathAnnotationExpression","Value","getMetaPathForObject","getNavigationPathForExpression","getTarget","annotations","Common","Text","Label","$target","valueOf","getCriticalityForDataPoints","dataFieldTargetPath","Target","dataFieldTarget","isAnnotationOfType","contactObject","fn","getVisibleDataFields","dataFields","reduce","visibledataFields","isReferencePropertyStaticallyHidden","isPotentiallySensitive","push","getColumnForDataField","properties","dataPointTitle","items","columns","getColumn","visible","getVisibleForDataField","uom","getTextBlock","size","weight","text","maxLines","wrap","spacing","isSubtle","textBinding","getValueBinding","additionalValue","dateFieldVisibleExp","getTextBlockVisiblityForDateField","undefined","$when","compileToAdaptiveExpression","equal","constant","getFieldGroupContent","formHeader","formElementsConfig","fieldGroup","maxColumns","forms","formTitle","fieldItems","Data","iTotalColums","Math","ceil","length","i","iLoopEnd","iLoopStart","dataFieldcolumnset","getColumnSet","j","key","getStableIdPartFromDataField","dataProperties","dataFieldNext","dataFieldColumns","dataPoint","exp","criticalityProperty","Criticality","criticalityExpression","getExpressionFromAnnotation","getCriticalityExpressionForCards","updatePathsAndGetCompiledExpression","getUomPathBinding","propertyTargetObject","Measures","ISOCurrency","Unit","uomMetaPath","targetPath","targetIsProperty","getDataPointProperties","getDataPointContent","Visualization","dataPointForms","getCustomHeaderFacetConfigElements","headerFacetConfigs","annotatedReferenceFacets","customConfigHeaderFacetNames","Object","keys","customHeaderFacetElements","customConfigHeaderFacetKey","relevantFacetElement","find","headerFacetElement","position","placement","Placement","After","headerFacetMetaPath","referenceFacets","getReferenceFacetFromAnnotations","map","generate","value","customHeaderFacetConfigElements","headerFacetOverwriteConfig","isVisible","OverrideType","overwrite","title","insertCustomElements","configHeaderFacets","previousCardElementIsDataPoint","headerForms","configHeaderFacet","currentIdx","allConfigHeaderFacets","FacetItem","UI","Hidden","facetDefinition","getVisibleForReferenceFacet","toString","term","addEmptyColumns","dataPointColumns","dataPointColumnSet","getAddressContent","bind","cardColumnSet","numColumns","numColumnsToAdd","addressContent","address","addressColumnSet","headerFacets","filter","facet","element","visibilityExp","generateVisibleExpression","getDataModelObjectPath","metaPathObject","navigationProperties","getNavigationProperties","navigatedPaths","forEach","isNavigationProperty","name","replaceAll","BaseCardContentProvider"],"sourceRoot":".","sources":["HeaderContent.ts"],"sourcesContent":["import type { ConvertedMetadata, NavigationProperty, PrimitiveType, Property } from \"@sap-ux/vocabularies-types\";\nimport { type PropertyAnnotationsBase_Common } from \"@sap-ux/vocabularies-types/vocabularies/Common_Edm\";\nimport {\n\tCommunicationAnnotationTerms,\n\tCommunicationAnnotationTypes,\n\ttype Address,\n\ttype Contact\n} from \"@sap-ux/vocabularies-types/vocabularies/Communication\";\nimport type {\n\tDataFieldAbstractTypes,\n\tDataPoint,\n\tDataPointType,\n\tFieldGroup,\n\tHeaderFacets,\n\tReferenceFacet\n} from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { UIAnnotationTerms, UIAnnotationTypes, VisualizationType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport type { BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { constant, equal, getExpressionFromAnnotation } from \"sap/fe/base/BindingToolkit\";\nimport type { ConfigurableObjectKey, CustomElement, Positionable } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { OverrideType, Placement, insertCustomElements } from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport { isPotentiallySensitive, isReferencePropertyStaticallyHidden } from \"sap/fe/core/converters/helpers/DataFieldHelper\";\nimport { compileToAdaptiveExpression, type CompiledAdaptiveCardExpression } from \"sap/fe/core/helpers/AdaptiveCardExpressionCompiler\";\nimport MetaPath from \"sap/fe/core/helpers/MetaPath\";\nimport { generate, getStableIdPartFromDataField } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { isAnnotationOfType, isNavigationProperty, isPathAnnotationExpression } from \"sap/fe/core/helpers/TypeGuards\";\nimport { getCriticalityExpressionForCards } from \"sap/fe/core/templating/CriticalityFormatters\";\nimport { generateVisibleExpression } from \"sap/fe/core/templating/DataFieldFormatters\";\nimport { isVisible } from \"sap/fe/core/templating/UIFormatters\";\nimport { getColumn, getColumnSet, getTextBlock } from \"sap/fe/templates/ObjectPage/card/AdaptiveCardContent\";\nimport BaseCardContentProvider, { type CardConfig } from \"sap/fe/templates/ObjectPage/card/BaseCardContentProvider\";\nimport type { CardColumn, CardColumnSet, CardElement, CardTextBlock } from \"types/adaptiveCard_types\";\n\ntype DataProperties = {\n\tcolor?: CompiledAdaptiveCardExpression;\n\tuom?: string;\n\tlabel?: string;\n\tproperty?: MetaPath<string>;\n\ttextProperty?: MetaPath<string>;\n\tnavigationPath?: string;\n};\n\n// External types for header facet configuration\nexport type FormElementConfig = {\n\tlabelText: string;\n};\nexport type CustomFormElementsConfig = Record<ConfigurableObjectKey, FormElementConfig>;\n\nexport type HeaderFacetConfig = Positionable & {\n\tisVisible?: string | boolean;\n\ttitle?: string;\n\tformElementsConfig?: CustomFormElementsConfig;\n};\n\nexport type CustomHeaderFacetConfigs = Record<ConfigurableObjectKey, HeaderFacetConfig>;\n\nexport type HeaderFacetConfigurable = {\n\theaderFacets?: CustomHeaderFacetConfigs;\n};\n\nexport type CardHeaderFacetsConfig = HeaderFacetConfigurable & CardConfig;\n\n// Internal types for header facet configuration\ntype HeaderFacetConfigElement = HeaderFacetConfig & {\n\tkey: ConfigurableObjectKey;\n\theaderFacet: ReferenceFacet;\n};\n\ntype InternalCustomHeaderFacetElements = Record<ConfigurableObjectKey, CustomElement<HeaderFacetConfigElement>>;\n\nconst MAX_COLUMNS = 3;\n/**\n * Get image and title for card.\n * @param convertedTypes Converted Metadata.\n * @param config Card Configuration.\n */\nexport default class HeaderContent extends BaseCardContentProvider<CardHeaderFacetsConfig> {\n\tprivate cardElements: CardElement[] = [];\n\n\t/**\n\t * Get image and title in column set.\n\t * @returns Column set.\n\t */\n\tpublic getHeaderContent(): CardElement[] {\n\t\treturn this.cardElements;\n\t}\n\n\tconstructor(convertedTypes: ConvertedMetadata, config: CardConfig) {\n\t\tsuper(convertedTypes, config);\n\t\tlet headerFacetsForAdaptiveCard: CardElement[] = [];\n\t\tconst { contextPath } = this.getCardConfigurationByKey(\"contextInfo\");\n\t\ttry {\n\t\t\tconst headerFacet = new MetaPath<HeaderFacets>(convertedTypes, `${contextPath}@${UIAnnotationTerms.HeaderFacets}`, contextPath);\n\t\t\tconst customConfigHeaderFacets = this.getCustomConfigHeaderFacets(headerFacet);\n\t\t\theaderFacetsForAdaptiveCard = this.createHeaderForms(headerFacet, customConfigHeaderFacets);\n\t\t} catch (error) {\n\t\t\tLog.error(`FE : V4 : Adaptive Card header facets : no EntityType found at context path: ${contextPath}`);\n\t\t}\n\t\tthis.cardElements = headerFacetsForAdaptiveCard;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the DataPoint Information from ReferenceFacet.\n\t * @param referenceFacetTargetMetaPath MetaPath pointing to FieldGroup\n\t * @param dataField DataFieldAbstract types\n\t * @param formElementConfig Field configurations\n\t * @returns Properties applicable for the dataPoint annotation\n\t */\n\tprivate getFieldGroupProperties(\n\t\treferenceFacetTargetMetaPath: MetaPath<FieldGroup>,\n\t\tdataField: DataFieldAbstractTypes,\n\t\tformElementConfig?: FormElementConfig\n\t): DataProperties {\n\t\tlet property,\n\t\t\ttextProperty,\n\t\t\ttextpropertyAnnotation,\n\t\t\tlabel = formElementConfig?.labelText,\n\t\t\tnavigationPath,\n\t\t\tcolor;\n\t\tswitch (dataField?.$Type) {\n\t\t\tcase UIAnnotationTypes.DataField:\n\t\t\tcase UIAnnotationTypes.DataFieldWithUrl:\n\t\t\tcase UIAnnotationTypes.DataFieldWithNavigationPath:\n\t\t\t\tif (isPathAnnotationExpression(dataField.Value)) {\n\t\t\t\t\tproperty = referenceFacetTargetMetaPath.getMetaPathForObject(dataField.Value);\n\t\t\t\t\tnavigationPath = this.getNavigationPathForExpression(referenceFacetTargetMetaPath);\n\t\t\t\t\ttextpropertyAnnotation = ((property?.getTarget() as Property)?.annotations?.Common as PropertyAnnotationsBase_Common)\n\t\t\t\t\t\t?.Text;\n\t\t\t\t\ttextProperty = textpropertyAnnotation && referenceFacetTargetMetaPath.getMetaPathForObject(textpropertyAnnotation);\n\t\t\t\t} else {\n\t\t\t\t\tproperty = dataField.Value;\n\t\t\t\t}\n\t\t\t\tlabel = label ?? dataField.Label ?? dataField.Value?.$target?.annotations?.Common?.Label.valueOf() ?? \"\";\n\t\t\t\tcolor = this.getCriticalityForDataPoints(dataField);\n\t\t\t\tbreak;\n\t\t\tcase UIAnnotationTypes.DataFieldForAnnotation:\n\t\t\t\tlabel =\n\t\t\t\t\tlabel ?? dataField.Label ?? (dataField as PrimitiveType)?.Value?.$target?.annotations?.Common?.Label.valueOf() ?? \"\";\n\t\t\t\tconst dataFieldTargetPath = referenceFacetTargetMetaPath.getMetaPathForObject(dataField.Target);\n\t\t\t\tconst dataFieldTarget = dataFieldTargetPath?.getTarget();\n\t\t\t\tnavigationPath = this.getNavigationPathForExpression(dataFieldTargetPath as MetaPath<DataPointType>);\n\t\t\t\tif (isAnnotationOfType<DataPoint>(dataFieldTarget, UIAnnotationTypes.DataPointType)) {\n\t\t\t\t\tif (isPathAnnotationExpression(dataFieldTarget.Value)) {\n\t\t\t\t\t\tproperty = dataFieldTargetPath?.getMetaPathForObject((dataFieldTarget as DataPointType)?.Value);\n\t\t\t\t\t\ttextpropertyAnnotation = property?.getTarget()?.annotations?.Common?.Text;\n\t\t\t\t\t\ttextProperty = textpropertyAnnotation && referenceFacetTargetMetaPath.getMetaPathForObject(textpropertyAnnotation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tproperty = dataFieldTarget.Value;\n\t\t\t\t\t}\n\t\t\t\t\tcolor = this.getCriticalityForDataPoints(dataFieldTarget);\n\t\t\t\t} else if (isAnnotationOfType<Contact>(dataFieldTarget, CommunicationAnnotationTypes.ContactType)) {\n\t\t\t\t\tconst contactObject = dataFieldTarget.fn;\n\t\t\t\t\tif (isPathAnnotationExpression(contactObject)) {\n\t\t\t\t\t\tproperty = dataFieldTargetPath?.getMetaPathForObject(contactObject);\n\t\t\t\t\t\ttextpropertyAnnotation = (property as PrimitiveType)?.getTarget()?.annotations?.Common?.Text;\n\t\t\t\t\t\ttextProperty = textpropertyAnnotation && referenceFacetTargetMetaPath.getMetaPathForObject(textpropertyAnnotation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\treturn { property, label, navigationPath, textProperty, color };\n\t}\n\n\t/**\n\t * Returns the visible dataFields from fieldGroup.\n\t * @param dataFields DataFieldAbstractTypes.\n\t * @returns Visible DataFields.\n\t */\n\tprivate getVisibleDataFields(dataFields: DataFieldAbstractTypes[]): DataFieldAbstractTypes[] {\n\t\treturn dataFields.reduce((visibledataFields, dataField) => {\n\t\t\tif (!isReferencePropertyStaticallyHidden(dataField) && !isPotentiallySensitive(dataField)) {\n\t\t\t\tvisibledataFields.push(dataField);\n\t\t\t}\n\t\t\treturn visibledataFields;\n\t\t}, [] as DataFieldAbstractTypes[]);\n\t}\n\n\t/**\n\t * Update the columnSets for each dataFields.\n\t * @param dataField DataFieldAbstractTypes\n\t * @param properties Properties of the DataField required for adaptive card\n\t * @param dataPointTitle\n\t * @returns ColumnSets containing header facet information which is required for adaptive card\n\t */\n\tprivate getColumnForDataField(\n\t\tdataField?: MetaPath<DataFieldAbstractTypes | DataPointType>,\n\t\tproperties?: DataProperties,\n\t\tdataPointTitle?: boolean\n\t): CardColumn[] {\n\t\tconst items = [];\n\t\tconst columns = [];\n\t\tif (!dataField) {\n\t\t\tcolumns.push(getColumn());\n\t\t} else {\n\t\t\tconst visible = this.getVisibleForDataField(dataField);\n\t\t\tconst { property, label, color, uom, textProperty } = properties || {};\n\t\t\tif (property) {\n\t\t\t\tif (label) {\n\t\t\t\t\tif (dataPointTitle === true) {\n\t\t\t\t\t\titems.push(\n\t\t\t\t\t\t\tgetTextBlock({\n\t\t\t\t\t\t\t\tsize: \"Small\",\n\t\t\t\t\t\t\t\tweight: \"Bolder\",\n\t\t\t\t\t\t\t\ttext: label,\n\t\t\t\t\t\t\t\tmaxLines: 2,\n\t\t\t\t\t\t\t\twrap: true,\n\t\t\t\t\t\t\t\tspacing: \"Medium\",\n\t\t\t\t\t\t\t\tvisible: visible\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\titems.push(getTextBlock({ size: \"Small\", text: `${label}:`, maxLines: 1, isSubtle: true }));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst textBinding = this.getValueBinding(property, textProperty);\n\t\t\t\tconst additionalValue = uom ?? textProperty;\n\t\t\t\tconst dateFieldVisibleExp = this.getTextBlockVisiblityForDateField(\n\t\t\t\t\tproperty,\n\t\t\t\t\ttypeof additionalValue !== \"string\" ? additionalValue : undefined\n\t\t\t\t);\n\t\t\t\titems.push(\n\t\t\t\t\tgetTextBlock({\n\t\t\t\t\t\tsize: \"Small\",\n\t\t\t\t\t\t$when: compileToAdaptiveExpression(dateFieldVisibleExp),\n\t\t\t\t\t\ttext: uom ? `${textBinding} ${uom}` : textBinding,\n\t\t\t\t\t\tmaxLines: 2,\n\t\t\t\t\t\tcolor: color\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\titems.push(\n\t\t\t\t\tgetTextBlock({\n\t\t\t\t\t\tsize: \"Small\",\n\t\t\t\t\t\t$when: compileToAdaptiveExpression(equal(dateFieldVisibleExp, constant(false))),\n\t\t\t\t\t\ttext: \"\\\\-\"\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tcolumns.push(getColumn({ items: items, visible: visible ?? undefined }));\n\t\t\t}\n\t\t}\n\t\treturn columns;\n\t}\n\n\t/**\n\t * Updates the column sets and gets the fieldgroup content.\n\t * @param referenceFacetTargetMetaPath Metapath of the reference facet fieldgroup\n\t * @param formHeader Form Header\n\t * @param visible Visible expression for the FacetHeader\n\t * @param formElementsConfig Fields' configurations\n\t * @returns ColumnSets containing header facet information which is required for adaptive card\n\t */\n\tprivate getFieldGroupContent(\n\t\treferenceFacetTargetMetaPath: MetaPath<FieldGroup>,\n\t\tformHeader: string | undefined,\n\t\tvisible: CompiledAdaptiveCardExpression | boolean,\n\t\tformElementsConfig?: CustomFormElementsConfig\n\t): CardElement[] {\n\t\tconst fieldGroup = referenceFacetTargetMetaPath.getTarget();\n\t\tconst maxColumns = MAX_COLUMNS;\n\t\tconst forms: CardElement[] = [];\n\t\tif (formHeader) {\n\t\t\tconst formTitle: CardTextBlock = getTextBlock({\n\t\t\t\tsize: \"Small\",\n\t\t\t\tweight: \"Bolder\",\n\t\t\t\ttext: formHeader,\n\t\t\t\tmaxLines: 2,\n\t\t\t\tspacing: \"Medium\",\n\t\t\t\twrap: true,\n\t\t\t\tvisible: visible ?? undefined\n\t\t\t});\n\t\t\tforms.push(formTitle);\n\t\t}\n\t\tconst fieldItems = this.getVisibleDataFields(fieldGroup?.Data);\n\t\t/* Column set should contain maximum of three columns\n\t\thence check the number of datafields and decide the columns for each column set */\n\t\tconst iTotalColums = Math.ceil(fieldItems.length / maxColumns);\n\t\tfor (let i = 1; i <= iTotalColums; i++) {\n\t\t\tconst iLoopEnd = i * maxColumns;\n\t\t\tconst iLoopStart = iLoopEnd - maxColumns;\n\t\t\tconst dataFieldcolumnset = getColumnSet([] as CardColumn[], visible ?? undefined);\n\t\t\tfor (let j = iLoopStart; j < iLoopEnd; j++) {\n\t\t\t\tconst dataField: DataFieldAbstractTypes = fieldItems[j];\n\t\t\t\tconst key = dataField && getStableIdPartFromDataField(dataField);\n\t\t\t\tconst formElementConfig = key ? formElementsConfig?.[key] : undefined;\n\t\t\t\tconst dataProperties = this.getFieldGroupProperties(referenceFacetTargetMetaPath, dataField, formElementConfig);\n\t\t\t\tconst dataFieldNext = dataField && referenceFacetTargetMetaPath.getMetaPathForObject(dataField);\n\t\t\t\tconst dataFieldColumns = this.getColumnForDataField(dataFieldNext, dataProperties);\n\t\t\t\tif (dataFieldColumns) {\n\t\t\t\t\tdataFieldcolumnset.columns.push(...dataFieldColumns);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (dataFieldcolumnset) {\n\t\t\t\tforms.push(dataFieldcolumnset);\n\t\t\t}\n\t\t}\n\t\treturn forms;\n\t}\n\n\t/**\n\t * Get the text color for the dataPoint.\n\t * @param dataPoint DataPoint annotation\n\t * @returns Color of the Text\n\t */\n\tpublic getCriticalityForDataPoints(dataPoint: DataPoint | DataFieldAbstractTypes): CompiledAdaptiveCardExpression {\n\t\tlet exp;\n\t\tconst criticalityProperty = dataPoint.Criticality;\n\t\tif (criticalityProperty) {\n\t\t\tconst criticalityExpression: BindingToolkitExpression<string | number> = getExpressionFromAnnotation(criticalityProperty);\n\t\t\texp = getCriticalityExpressionForCards(criticalityExpression, false);\n\t\t} else {\n\t\t\texp = constant(\"default\");\n\t\t}\n\t\treturn this.updatePathsAndGetCompiledExpression(exp);\n\t}\n\n\t/**\n\t * Get the uom path for the dataPoint.\n\t * @param referenceFacetTargetMetaPath MetaPath pointing to datapoints\n\t * @param propertyTargetObject DataPoint property\n\t * @returns Path binding for UOM\n\t */\n\tprivate getUomPathBinding(\n\t\treferenceFacetTargetMetaPath: MetaPath<DataPointType | DataFieldAbstractTypes>,\n\t\tpropertyTargetObject: Property | undefined\n\t): string | undefined {\n\t\tconst uom = propertyTargetObject?.annotations.Measures?.ISOCurrency || propertyTargetObject?.annotations.Measures?.Unit;\n\t\tif (!uom) {\n\t\t\treturn;\n\t\t} else if (isPathAnnotationExpression(uom)) {\n\t\t\tconst uomMetaPath = referenceFacetTargetMetaPath.getMetaPathForObject(uom);\n\t\t\tconst targetPath = uomMetaPath?.getTarget();\n\t\t\treturn targetPath && this.targetIsProperty(uomMetaPath) ? this.getValueBinding(uomMetaPath) : undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Get the DataPoint Information from ReferenceFacet.\n\t * @param referenceFacetTargetMetaPath MetaPath pointing to datapoints\n\t * @param dataPoint DataPoint\n\t * @returns Properties applicable for the dataPoint annotation\n\t */\n\tprivate getDataPointProperties(referenceFacetTargetMetaPath: MetaPath<DataPoint>, dataPoint: DataPoint): DataProperties {\n\t\tconst property = referenceFacetTargetMetaPath.getMetaPathForObject(dataPoint?.Value);\n\t\tconst uom = this.getUomPathBinding(\n\t\t\treferenceFacetTargetMetaPath,\n\t\t\treferenceFacetTargetMetaPath.getMetaPathForObject(dataPoint?.Value)?.getTarget()\n\t\t);\n\t\tconst textpropertyAnnotation = property?.getTarget()?.annotations?.Common?.Text;\n\t\tconst textProperty = textpropertyAnnotation && referenceFacetTargetMetaPath.getMetaPathForObject(textpropertyAnnotation);\n\t\tconst color = this.getCriticalityForDataPoints(dataPoint);\n\t\tconst navigationPath = this.getNavigationPathForExpression(referenceFacetTargetMetaPath);\n\t\treturn { property, color, uom, navigationPath, textProperty };\n\t}\n\n\t/**\n\t * Get the Datapoint content from the facet.\n\t * @param referenceFacetTargetMetaPath MetaPath pointing to Datapoints\n\t * @param formHeader Title of the form header\n\t * @returns Title and content of the datapoint\n\t */\n\tprivate getDataPointContent(referenceFacetTargetMetaPath: MetaPath<DataPoint>, formHeader: string | undefined): CardColumn[] {\n\t\tconst columns = [];\n\t\tconst dataPoint = referenceFacetTargetMetaPath.getTarget();\n\t\tif (dataPoint?.Visualization !== VisualizationType.Rating && dataPoint?.Visualization !== VisualizationType.Progress) {\n\t\t\tconst properties = this.getDataPointProperties(referenceFacetTargetMetaPath, dataPoint);\n\t\t\tproperties.label = formHeader;\n\t\t\tconst dataPointForms = this.getColumnForDataField(referenceFacetTargetMetaPath, properties, true);\n\t\t\tif (dataPointForms) {\n\t\t\t\tcolumns.push(...dataPointForms);\n\t\t\t}\n\t\t}\n\t\treturn columns;\n\t}\n\n\t/**\n\t * Get the custom configured header facet elements.\n\t * @param headerFacetConfigs\n\t * @param annotatedReferenceFacets\n\t * @returns The custom configured header facet elements\n\t */\n\tprivate getCustomHeaderFacetConfigElements(\n\t\theaderFacetConfigs: CustomHeaderFacetConfigs,\n\t\tannotatedReferenceFacets: HeaderFacetConfigElement[]\n\t): InternalCustomHeaderFacetElements {\n\t\tconst customConfigHeaderFacetNames = Object.keys(headerFacetConfigs);\n\t\treturn customConfigHeaderFacetNames.reduce((customHeaderFacetElements, customConfigHeaderFacetKey) => {\n\t\t\tconst relevantFacetElement = annotatedReferenceFacets.find(\n\t\t\t\t(headerFacetElement) => headerFacetElement.key === customConfigHeaderFacetKey\n\t\t\t);\n\n\t\t\tif (relevantFacetElement) {\n\t\t\t\tcustomHeaderFacetElements[customConfigHeaderFacetKey] = {\n\t\t\t\t\tkey: customConfigHeaderFacetKey,\n\t\t\t\t\theaderFacet: relevantFacetElement.headerFacet,\n\t\t\t\t\tposition: {\n\t\t\t\t\t\tplacement: Placement.After\n\t\t\t\t\t},\n\t\t\t\t\t...headerFacetConfigs[customConfigHeaderFacetKey]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn customHeaderFacetElements;\n\t\t}, {} as InternalCustomHeaderFacetElements);\n\t}\n\n\t/**\n\t * Get the custom configured header facets.\n\t * @param headerFacetMetaPath MetaPath object of the annotated header facets\n\t * @returns Reference facets with overridden custom configurations\n\t */\n\tprivate getCustomConfigHeaderFacets(headerFacetMetaPath: MetaPath<HeaderFacets>): HeaderFacetConfigElement[] {\n\t\tconst referenceFacets: ReferenceFacet[] = this.getReferenceFacetFromAnnotations(headerFacetMetaPath.getTarget());\n\t\tlet annotatedReferenceFacets: HeaderFacetConfigElement[] = referenceFacets.map(function (headerFacet) {\n\t\t\treturn { key: generate([headerFacet.Target.value]), headerFacet };\n\t\t});\n\t\t// Get the UI overrides for header facets, if any\n\t\tconst headerFacetConfigs = this.getCardConfigurationByKey(\"headerFacets\");\n\t\tif (headerFacetConfigs && Object.keys(headerFacetConfigs).length > 0) {\n\t\t\tconst customHeaderFacetConfigElements = this.getCustomHeaderFacetConfigElements(headerFacetConfigs, annotatedReferenceFacets);\n\n\t\t\tconst headerFacetOverwriteConfig = {\n\t\t\t\tisVisible: OverrideType.overwrite,\n\t\t\t\ttitle: OverrideType.overwrite,\n\t\t\t\tposition: OverrideType.overwrite,\n\t\t\t\tformElementsConfig: OverrideType.overwrite\n\t\t\t};\n\n\t\t\t// override the annotated header facets to reflect the UI changes on OP\n\t\t\tannotatedReferenceFacets = insertCustomElements(\n\t\t\t\tannotatedReferenceFacets,\n\t\t\t\tcustomHeaderFacetConfigElements,\n\t\t\t\theaderFacetOverwriteConfig\n\t\t\t);\n\t\t}\n\n\t\treturn annotatedReferenceFacets;\n\t}\n\n\t/**\n\t * Get Header Data ColumnSets.\n\t * @param headerFacetMetaPath Array of header Facets\n\t * @param configHeaderFacets Header facets configurations\n\t * @returns ColumnSets containing header facet information which is required for adaptive card\n\t */\n\tprivate createHeaderForms(headerFacetMetaPath: MetaPath<HeaderFacets>, configHeaderFacets: HeaderFacetConfigElement[]): CardElement[] {\n\t\tlet previousCardElementIsDataPoint = false;\n\t\treturn configHeaderFacets.reduce(\n\t\t\tfunction (\n\t\t\t\tthis: HeaderContent,\n\t\t\t\theaderForms: CardElement[],\n\t\t\t\tconfigHeaderFacet: HeaderFacetConfigElement,\n\t\t\t\tcurrentIdx: number,\n\t\t\t\tallConfigHeaderFacets: HeaderFacetConfigElement[]\n\t\t\t): CardElement[] {\n\t\t\t\tconst FacetItem = configHeaderFacet.headerFacet;\n\t\t\t\tif (FacetItem.$Type === UIAnnotationTypes.ReferenceFacet && FacetItem.annotations?.UI?.Hidden?.valueOf() !== true) {\n\t\t\t\t\tconst referenceFacetTargetMetaPath = headerFacetMetaPath.getMetaPathForObject(FacetItem.Target);\n\t\t\t\t\tconst facetDefinition = referenceFacetTargetMetaPath?.getTarget();\n\t\t\t\t\tconst navigationPath = this.getNavigationPathForExpression(\n\t\t\t\t\t\treferenceFacetTargetMetaPath as MetaPath<FieldGroup | DataPointType>\n\t\t\t\t\t);\n\t\t\t\t\tconst visible = configHeaderFacet.isVisible ?? this.getVisibleForReferenceFacet(FacetItem, navigationPath);\n\t\t\t\t\tconst formHeader = configHeaderFacet.title ?? FacetItem.Label?.toString();\n\t\t\t\t\tconst formElementsConfig = configHeaderFacet.formElementsConfig;\n\t\t\t\t\tswitch (facetDefinition?.term) {\n\t\t\t\t\t\tcase UIAnnotationTerms.FieldGroup:\n\t\t\t\t\t\t\tif (previousCardElementIsDataPoint === true) {\n\t\t\t\t\t\t\t\t// If previous header form content was a DataPoint, we add dummy columns.\n\t\t\t\t\t\t\t\tthis.addEmptyColumns(headerForms[headerForms.length - 1] as CardColumnSet);\n\t\t\t\t\t\t\t\tpreviousCardElementIsDataPoint = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\theaderForms.push(\n\t\t\t\t\t\t\t\t...this.getFieldGroupContent(\n\t\t\t\t\t\t\t\t\treferenceFacetTargetMetaPath as MetaPath<FieldGroup>,\n\t\t\t\t\t\t\t\t\tformHeader,\n\t\t\t\t\t\t\t\t\tvisible,\n\t\t\t\t\t\t\t\t\tformElementsConfig\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase UIAnnotationTerms.DataPoint:\n\t\t\t\t\t\t\tif (!isPotentiallySensitive(facetDefinition)) {\n\t\t\t\t\t\t\t\tconst dataPointColumns = this.getDataPointContent(\n\t\t\t\t\t\t\t\t\treferenceFacetTargetMetaPath as MetaPath<DataPoint>,\n\t\t\t\t\t\t\t\t\tconfigHeaderFacet.title ?? formHeader\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst dataPointColumnSet = getColumnSet([] as CardColumn[], visible ?? undefined);\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tpreviousCardElementIsDataPoint &&\n\t\t\t\t\t\t\t\t\t(headerForms[headerForms.length - 1] as CardColumnSet).columns.length !== MAX_COLUMNS\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t(headerForms[headerForms.length - 1] as CardColumnSet).columns.push(...dataPointColumns);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdataPointColumnSet.columns.push(...dataPointColumns);\n\t\t\t\t\t\t\t\t\theaderForms.push(dataPointColumnSet);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpreviousCardElementIsDataPoint = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CommunicationAnnotationTerms.Address:\n\t\t\t\t\t\t\tif (previousCardElementIsDataPoint) {\n\t\t\t\t\t\t\t\t// If previous header form content was a DataPoint, we add dummy columns.\n\t\t\t\t\t\t\t\tthis.addEmptyColumns(headerForms[headerForms.length - 1] as CardColumnSet);\n\t\t\t\t\t\t\t\tpreviousCardElementIsDataPoint = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\theaderForms.push(\n\t\t\t\t\t\t\t\t...this.getAddressContent(\n\t\t\t\t\t\t\t\t\treferenceFacetTargetMetaPath as MetaPath<Address>,\n\t\t\t\t\t\t\t\t\tconfigHeaderFacet.title ?? formHeader,\n\t\t\t\t\t\t\t\t\tvisible\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (currentIdx === allConfigHeaderFacets.length - 1 && previousCardElementIsDataPoint) {\n\t\t\t\t\t// This is the last recursion of the reduce loop.\n\t\t\t\t\t// If previous header form content was a DataPoint, we add dummy columns.\n\t\t\t\t\tthis.addEmptyColumns(headerForms[headerForms.length - 1] as CardColumnSet);\n\t\t\t\t}\n\n\t\t\t\treturn headerForms;\n\t\t\t}.bind(this),\n\t\t\t[] as CardElement[]\n\t\t);\n\t}\n\n\t/**\n\t * Add empty columns to the end of the column set.\n\t *\n\t * Header form with less than the maximum columns need to be added with empty columns to have the consistent layout equal to MAX_COLUMNS.\n\t * This is needs in case of a header form contains DataPoints side by side. We fill the empty space in the layout with a dummy empty column.\n\t * @param cardColumnSet Equivalent of a Header Form\n\t */\n\tprivate addEmptyColumns(cardColumnSet: CardColumnSet): void {\n\t\tconst numColumns = cardColumnSet.columns.length;\n\t\tif (numColumns < MAX_COLUMNS && numColumns > 1) {\n\t\t\t// If only one column exists then we don't have problem as it can freely occupy the whole width of the row.\n\t\t\tconst numColumnsToAdd = MAX_COLUMNS - numColumns;\n\t\t\tfor (let i = 0; i < numColumnsToAdd; i++) {\n\t\t\t\tcardColumnSet.columns.push(...this.getColumnForDataField());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the Address content from the facet.\n\t * @param referenceFacetTargetMetaPath Meta\n\t * @param formHeader Title of the form header\n\t * @param visible Visible expression for the FacetHeader\n\t * @returns Title and content of the address\n\t */\n\tprivate getAddressContent(\n\t\treferenceFacetTargetMetaPath: MetaPath<Address>,\n\t\tformHeader: string | undefined,\n\t\tvisible: CompiledAdaptiveCardExpression | boolean\n\t): CardElement[] {\n\t\tconst addressContent: CardElement[] = [];\n\t\tconst address = referenceFacetTargetMetaPath.getTarget();\n\t\tif (formHeader) {\n\t\t\taddressContent.push(\n\t\t\t\tgetTextBlock({\n\t\t\t\t\tsize: \"Small\",\n\t\t\t\t\tweight: \"Bolder\",\n\t\t\t\t\ttext: formHeader,\n\t\t\t\t\tmaxLines: 2,\n\t\t\t\t\twrap: true,\n\t\t\t\t\tspacing: \"Medium\",\n\t\t\t\t\tvisible: visible\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tconst addressColumnSet = getColumnSet([] as CardColumn[], visible ?? undefined);\n\t\tconst items = [];\n\t\tconst columns = [];\n\t\tif (address?.label) {\n\t\t\titems.push(\n\t\t\t\tgetTextBlock({\n\t\t\t\t\tsize: \"Small\",\n\t\t\t\t\ttext: `${address?.label}`,\n\t\t\t\t\tmaxLines: 2\n\t\t\t\t})\n\t\t\t);\n\t\t\tcolumns.push(getColumn({ items: items, visible: visible ?? undefined }));\n\t\t}\n\t\tif (columns.length > 0) {\n\t\t\taddressColumnSet.columns.push(...columns);\n\t\t}\n\t\taddressContent.push(addressColumnSet);\n\t\treturn addressContent;\n\t}\n\n\t/**\n\t * Gets Reference facets configured in the header facet.\n\t * @param headerFacets HeaderFacets containing referncefacets.\n\t * @returns An Array of ReferenceFacets.\n\t */\n\tprivate getReferenceFacetFromAnnotations(headerFacets: HeaderFacets): ReferenceFacet[] {\n\t\treturn headerFacets ? (headerFacets.filter((facet) => facet.$Type === UIAnnotationTypes.ReferenceFacet) as ReferenceFacet[]) : [];\n\t}\n\n\t/**\n\t * Get referencefacet  visibility.\n\t * @param element Reference facet\n\t * @param navigationPath Visited navigation paths\n\t * @returns Boolean\n\t */\n\tprivate getVisibleForReferenceFacet(element: ReferenceFacet, navigationPath?: string): CompiledAdaptiveCardExpression {\n\t\tconst visibilityExp = isVisible(element);\n\t\treturn this.updatePathsAndGetCompiledExpression(visibilityExp, navigationPath);\n\t}\n\n\t/**\n\t * Get datafield visibility.\n\t * @param dataField DataFieldAbstract\n\t * @param navigationPath Visited navigation paths\n\t * @returns Boolean\n\t */\n\tprivate getVisibleForDataField(\n\t\tdataField: MetaPath<DataFieldAbstractTypes | DataPointType>,\n\t\tnavigationPath?: string\n\t): CompiledAdaptiveCardExpression {\n\t\tconst visibilityExp = generateVisibleExpression(dataField.getDataModelObjectPath());\n\t\treturn this.updatePathsAndGetCompiledExpression(visibilityExp, navigationPath);\n\t}\n\n\t/**\n\t * Get the navigation paths of the properties.\n\t * @param metaPathObject MetaPath of the object\n\t * @returns Navigation paths\n\t */\n\tprivate getNavigationPathForExpression(\n\t\tmetaPathObject: MetaPath<FieldGroup | DataFieldAbstractTypes | DataPointType>\n\t): string | undefined {\n\t\tconst navigationProperties = metaPathObject.getNavigationProperties();\n\t\tconst navigatedPaths: string[] = [];\n\t\tif (navigationProperties.length > 0) {\n\t\t\tnavigationProperties.forEach(function (property: NavigationProperty) {\n\t\t\t\tif (isNavigationProperty(property)) {\n\t\t\t\t\tnavigatedPaths.push(property.name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn navigatedPaths?.toString()?.replaceAll(\",\", \"/\");\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"HeaderContent-dbg.js"}