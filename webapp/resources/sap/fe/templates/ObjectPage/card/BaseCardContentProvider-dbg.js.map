{"version":3,"names":["BaseCardContentProvider","convertedTypes","config","pathsToQuery","_exports","_proto","prototype","getPathsToQuery","Array","from","Set","addPathsToQuery","pathsToAdd","getCardConfigurationByKey","name","getEntityType","contextPath","resolutionTargetEntityType","resolvePath","target","getBindingForProperty","fieldPath","getPropertyPathForCard","propertyPath","includes","replace","formatTextproperty","property","textProperty","textExpression","propertyBinding","getRelativePath","getTarget","textArrangementType","annotations","Common","Text","UI","TextArrangement","toString","textBinding","getTextBlockVisiblityForDateField","additionalValue","exp","constant","targetIsProperty","edmType","type","valueExists","and","notEqual","pathInModel","undefined","additionalValueExists","additionalValuePath","or","getFormattedTextValue","propertyBindingExpression","getValueBinding","adaptiveBindingExpression","updatePathsAndGetCompiledExpression","expression","navigationPaths","compiledExpression","getAdaptiveCompilerResult","metaPath","isProperty"],"sourceRoot":".","sources":["BaseCardContentProvider.ts"],"sourcesContent":["import type { ConvertedMetadata, EntityType, Property } from \"@sap-ux/vocabularies-types\";\nimport { TextArrangementType } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport { and, constant, notEqual, or, pathInModel, type BindingToolkitExpression } from \"sap/fe/base/BindingToolkit\";\nimport { getAdaptiveCompilerResult, type CompiledAdaptiveCardExpression } from \"sap/fe/core/helpers/AdaptiveCardExpressionCompiler\";\nimport type MetaPath from \"sap/fe/core/helpers/MetaPath\";\nimport { isProperty } from \"sap/fe/core/helpers/TypeGuards\";\n\n/**\n * @typedef CardContextInfo\n * @property {string} bindingContextPath - Runtime binding context path for card.\n * @property {string} contextPath - Path to the target entityType of page for the card.\n */\nexport type CardContextInfo = {\n\tbindingContextPath: string;\n\tcontextPath: string;\n};\n\n/**\n * @typedef CardConfig\n * @property {string} objectTitle - Title for the card.\n * @property {string} appUrl - Browser url of the application.\n * @property {string} webUrl - Url to fetch the card data. It shall contain the query parameters like $select and $expand.\n * @property {string} serviceURI - Service url.\n * @property {CardContextInfo} contextInfo - Card's context information.\n */\nexport type CardConfig = {\n\tobjectTitle: string;\n\tappUrl: string;\n\twebUrl: string;\n\tserviceURI: string;\n\tcontextInfo: CardContextInfo;\n};\n\n/**\n * Adaptive card json generator.\n * @param convertedTypes Converted Metadata.\n * @param config Card Configuration.\n */\nexport default class BaseCardContentProvider<GenericConfig extends CardConfig> {\n\tprivate pathsToQuery: string[] = [];\n\n\t/**\n\t * Get property paths to query.\n\t * @returns Property paths that need to be queried.\n\t */\n\tpublic getPathsToQuery(): string[] {\n\t\treturn Array.from(new Set(this.pathsToQuery));\n\t}\n\n\t/**\n\t * Collecting property paths that need to be queried for card creation.\n\t * @param pathsToAdd Property paths that need to be cummulated.\n\t */\n\tpublic addPathsToQuery(pathsToAdd: string[]): void {\n\t\tthis.pathsToQuery = [...this.pathsToQuery, ...pathsToAdd];\n\t}\n\n\t/**\n\t * Get card configuration by key.\n\t * @param name Configuration key name.\n\t * @returns Specific card configuration.\n\t */\n\tpublic getCardConfigurationByKey<K extends keyof GenericConfig>(name: K): GenericConfig[K] {\n\t\treturn this.config[name];\n\t}\n\n\t/**\n\t * Get converted metadata entityType of the card.\n\t * @returns EntityType.\n\t */\n\tpublic getEntityType(): EntityType | undefined {\n\t\tconst { contextPath } = this.getCardConfigurationByKey(\"contextInfo\");\n\t\tconst resolutionTargetEntityType = this.convertedTypes.resolvePath<EntityType>(contextPath);\n\t\treturn resolutionTargetEntityType.target;\n\t}\n\n\t/**\n\t * Get binding path of the field.\n\t * @param fieldPath Path of the field annotation\n\t * @returns Binding path of the field\n\t */\n\tpublic getBindingForProperty(fieldPath: string): string {\n\t\treturn \"${\" + this.getPropertyPathForCard(fieldPath) + \"}\";\n\t}\n\n\t/**\n\t * Replace the navigationproperty path.\n\t * @param propertyPath Path of the field annotation\n\t * @returns Property path along with navigation paths\n\t */\n\tpublic getPropertyPathForCard(propertyPath: string): string {\n\t\t// Check for navigation property path and replace to adaptive card format\n\t\tif (propertyPath && propertyPath?.includes(\"/\")) {\n\t\t\tpropertyPath = propertyPath.replace(\"/\", \".\");\n\t\t}\n\t\tthis.addPathsToQuery([propertyPath]);\n\t\treturn propertyPath;\n\t}\n\n\t/**\n\t * Get binding path of the field which is configured with Text Arrangement.\n\t * @param property Property of the field annotation\n\t * @param textProperty Text property of the field annotation\n\t * @returns Binding path of the field with Text Arrangement\n\t */\n\tprivate formatTextproperty(property: MetaPath<Property>, textProperty?: MetaPath<Property>): string {\n\t\tlet textExpression;\n\t\tconst propertyBinding = this.getPropertyPathForCard(property.getRelativePath());\n\t\tif (textProperty && textProperty.getTarget()) {\n\t\t\tconst textArrangementType = property?.getTarget()?.annotations?.Common?.Text?.annotations?.UI?.TextArrangement?.toString();\n\t\t\tconst textBinding = this.getPropertyPathForCard(textProperty.getRelativePath());\n\t\t\tswitch (textArrangementType) {\n\t\t\t\tcase TextArrangementType.TextLast:\n\t\t\t\t\ttextExpression = `\\${string(${propertyBinding})} (\\${string(${textBinding})})`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextArrangementType.TextOnly:\n\t\t\t\t\ttextExpression = `\\${string(${textBinding})}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextArrangementType.TextSeparate:\n\t\t\t\t\ttextExpression = `\\${string(${propertyBinding})}`;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TextArrangementType.TextFirst:\n\t\t\t\tdefault:\n\t\t\t\t\ttextExpression = `\\${string(${textBinding})} (\\${string(${propertyBinding})})`;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\ttextExpression = `\\${string(${this.getPropertyPathForCard(property.getRelativePath())})}`;\n\t\t}\n\t\treturn textExpression;\n\t}\n\n\tpublic getTextBlockVisiblityForDateField(\n\t\tproperty: MetaPath<string>,\n\t\tadditionalValue?: MetaPath<string>\n\t): BindingToolkitExpression<boolean> {\n\t\tlet exp: BindingToolkitExpression<boolean> = constant(true);\n\t\tif (this.targetIsProperty(property)) {\n\t\t\tconst edmType = (property as MetaPath<Property>).getTarget().type;\n\t\t\tconst propertyPath = this.getPropertyPathForCard(property.getRelativePath());\n\t\t\tconst valueExists = and(notEqual(pathInModel(propertyPath), undefined), notEqual(pathInModel(propertyPath), null));\n\t\t\tswitch (edmType) {\n\t\t\t\tcase \"Edm.Date\":\n\t\t\t\tcase \"Edm.DateTimeOffset\":\n\t\t\t\tcase \"Edm.DateTime\":\n\t\t\t\tcase \"Edm.Decimal\": {\n\t\t\t\t\texp = valueExists;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tlet additionalValueExists: BindingToolkitExpression<boolean> = constant(false);\n\t\t\t\t\tif (additionalValue && this.targetIsProperty(additionalValue)) {\n\t\t\t\t\t\tconst additionalValuePath = this.getPropertyPathForCard(additionalValue.getRelativePath());\n\t\t\t\t\t\tadditionalValueExists = and(\n\t\t\t\t\t\t\tnotEqual(pathInModel(additionalValuePath), undefined),\n\t\t\t\t\t\t\tnotEqual(pathInModel(additionalValuePath), null)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\texp = or(valueExists, additionalValueExists);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn exp;\n\t}\n\n\t/**\n\t * Get adaptive card binding expressions of the field which is configured with Text Arrangement.\n\t * @param property Property of the field annotation\n\t * @param textProperty Text property of the field annotation\n\t * @returns Binding path of the field configured with Date, DateTime and Decimal\n\t */\n\tprivate getFormattedTextValue(property: MetaPath<Property>, textProperty?: MetaPath<Property>): string {\n\t\tlet propertyBindingExpression;\n\t\tswitch (property?.getTarget()?.type) {\n\t\t\tcase \"Edm.Date\":\n\t\t\t\tpropertyBindingExpression = `{{DATE(\\${formatDateTime(${this.getPropertyPathForCard(\n\t\t\t\t\tproperty.getRelativePath()\n\t\t\t\t)}, 'yyyy-MM-ddTHH:mm:ssZ')}, SHORT)}}`;\n\t\t\t\tbreak;\n\t\t\tcase \"Edm.DateTimeOffset\":\n\t\t\tcase \"Edm.DateTime\":\n\t\t\t\tpropertyBindingExpression = `\\${formatDateTime(${this.getPropertyPathForCard(property.getRelativePath())})}`;\n\t\t\t\tbreak;\n\t\t\tcase \"Edm.Decimal\":\n\t\t\t\tpropertyBindingExpression = `\\${formatNumber(${this.getPropertyPathForCard(property.getRelativePath())},2)}`;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpropertyBindingExpression = this.formatTextproperty(property, textProperty);\n\t\t\t\tbreak;\n\t\t}\n\t\treturn propertyBindingExpression;\n\t}\n\n\t/**\n\t * Get binding path of the field.\n\t * @param property Property of the field annotation\n\t * @param textProperty Text property of the field annotation\n\t * @returns Binding path of the field\n\t */\n\tpublic getValueBinding<T>(property: MetaPath<T> | string, textProperty?: MetaPath<T>): string {\n\t\tlet adaptiveBindingExpression = \"\";\n\t\tif (typeof property === \"string\") {\n\t\t\tadaptiveBindingExpression = property;\n\t\t} else if (this.targetIsProperty(property) && (!textProperty || this.targetIsProperty(textProperty))) {\n\t\t\tadaptiveBindingExpression = this.getFormattedTextValue(property, textProperty);\n\t\t}\n\t\treturn adaptiveBindingExpression;\n\t}\n\n\t/**\n\t * Update paths to query and get compiled expression.\n\t * @param expression Binding toolkit expression\n\t * @param navigationPaths\n\t * @returns Compiled adaptive expression\n\t */\n\tpublic updatePathsAndGetCompiledExpression<T>(\n\t\texpression: BindingToolkitExpression<T>,\n\t\tnavigationPaths?: string\n\t): CompiledAdaptiveCardExpression {\n\t\tconst { pathsToQuery, compiledExpression } = getAdaptiveCompilerResult(expression, navigationPaths);\n\t\tthis.addPathsToQuery(pathsToQuery);\n\t\treturn compiledExpression;\n\t}\n\n\tpublic targetIsProperty(metaPath: MetaPath<unknown> | undefined): metaPath is MetaPath<Property> {\n\t\tconst target = metaPath?.getTarget();\n\t\treturn isProperty(target);\n\t}\n\n\tconstructor(\n\t\tpublic convertedTypes: ConvertedMetadata,\n\t\tprivate config: GenericConfig\n\t) {}\n}\n"],"mappings":"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","ignoreList":[],"file":"BaseCardContentProvider-dbg.js"}