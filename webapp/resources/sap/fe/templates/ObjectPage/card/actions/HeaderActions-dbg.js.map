{"version":3,"names":["ACStyle","_exports","ACAction","ACInput","ACTION_OK","HeaderActions","_BaseCardContentProvi","convertedTypes","config","_this","call","actions","contextInfo","getCardConfigurationByKey","contextPath","entityType","getEntityType","Log","error","_assertThisInitialized","getAnnotatedHeaderActions","length","configuredActions","getConfiguredActions","reduce","getActionInAdaptiveCardFormat","bind","err","message","Error","String","_inheritsLoose","_proto","prototype","getCardActions","getAdaptiveCardActionType","edmAction","isBound","isFunction","parameters","needUserInputParameters","ShowCard","Execute","getActionCardBodyWithParameterFields","actionTarget","elements","parameter","index","inputElement","labelTerm","annotations","Common","Label","type","Date","id","name","label","toString","isRequired","getRequired","undefined","push","Text","isMultiline","isMultiLineText","getActionWithParameters","actionDetails","body","verb","title","style","data","actionWithParameters","Positive","card","getAction","dataFieldForAction","ActionTarget","getActionDetails","actionType","retAction","getActionData","bindingContextPath","bindingContextPathRelativeToService","startsWith","substring","serviceURI","contextURL","isConfirmationRequired","getIsCriticalForAdaptiveCardAction","actionToTrigger","Action","replace","getActionStyle","adaptiveCardActions","actionElement","action","titleOverride","isActionVisible","isVisible","getVisibleForAdaptiveCardAction","isEnabled","getEnabledForAdaptiveCardAction","whenValue","test","isStaticAction","isCopyAction","visualUpdates","$when","identificationAnnotation","UI","Identification","filter","dataField","$Type","Determining","annotatedActions","actionConfigs","annotatedActionElements","map","key","getStableIdPartFromDataField","Object","keys","customConfigActionNames","customActionConfigElements","customActionElements","customConfigActionKey","relevantActionElement","find","position","placement","Placement","After","actionOverwriteConfig","OverrideType","overwrite","insertCustomElements","visibilityExp","updatePathsAndGetCompiledExpression","Default","criticality","Criticality","Destructive","isActionCritical","getIsActionCriticalExpression","enabledExpression","getActionEnabledExpression","isCollection","IsCopyAction","valueOf","fieldControlExpression","isActionParameterRequiredExpression","BaseCardContentProvider"],"sourceRoot":".","sources":["HeaderActions.ts"],"sourcesContent":["import type { Action, ActionParameter, ConvertedMetadata, EntityType } from \"@sap-ux/vocabularies-types\";\nimport { UIAnnotationTypes, type DataFieldForAction } from \"@sap-ux/vocabularies-types/vocabularies/UI\";\nimport Log from \"sap/base/Log\";\nimport {\n\tOverrideType,\n\tPlacement,\n\tinsertCustomElements,\n\ttype ConfigurableObjectKey,\n\ttype CustomElement,\n\ttype Positionable\n} from \"sap/fe/core/converters/helpers/ConfigurableObject\";\nimport type { CompiledAdaptiveCardExpression } from \"sap/fe/core/helpers/AdaptiveCardExpressionCompiler\";\nimport { getStableIdPartFromDataField } from \"sap/fe/core/helpers/StableIdHelper\";\nimport { getIsActionCriticalExpression } from \"sap/fe/core/templating/ActionHelper\";\nimport { isActionParameterRequiredExpression } from \"sap/fe/core/templating/FieldControlHelper\";\nimport { isMultiLineText } from \"sap/fe/core/templating/PropertyHelper\";\nimport { getActionEnabledExpression, isVisible } from \"sap/fe/core/templating/UIFormatters\";\nimport BaseCardContentProvider, { type CardConfig } from \"sap/fe/templates/ObjectPage/card/BaseCardContentProvider\";\nimport type { ActionData, CardElement, IACAction, IInputDate, IInputText } from \"types/adaptiveCard_types\";\n\nexport type ActionConfig = Positionable & {\n\ttitle?: string;\n\tisVisible?: boolean;\n};\n\nexport type CustomActionConfigs = Record<ConfigurableObjectKey, ActionConfig>;\n\nexport type ActionConfigurable = {\n\tactions?: CustomActionConfigs;\n};\n\nexport type HeaderActionsConfig = ActionConfigurable & CardConfig;\n\ntype ActionConfigElement = Positionable &\n\tActionConfig & {\n\t\tkey: ConfigurableObjectKey;\n\t\taction: DataFieldForAction;\n\t};\n\ntype InternalCustomActionElements = Record<ConfigurableObjectKey, CustomElement<ActionConfigElement>>;\n\nexport enum ACStyle {\n\tDefault = \"default\",\n\tPositive = \"positive\",\n\tDestructive = \"destructive\"\n}\n\nexport enum ACAction {\n\tExecute = \"Action.Execute\",\n\tShowCard = \"Action.ShowCard\"\n}\n\nexport enum ACInput {\n\tText = \"Input.Text\",\n\tChoiceSet = \"Input.ChoiceSet\",\n\tDate = \"Input.Date\"\n}\n\nconst ACTION_OK = \"OK\";\n\nexport default class HeaderActions extends BaseCardContentProvider<HeaderActionsConfig> {\n\tprivate actions: IACAction[] = [];\n\n\t/**\n\t * Get the card actions.\n\t * @returns Card actions.\n\t */\n\tpublic getCardActions(): IACAction[] {\n\t\treturn this.actions;\n\t}\n\n\tconstructor(convertedTypes: ConvertedMetadata, config: HeaderActionsConfig) {\n\t\tsuper(convertedTypes, config);\n\t\ttry {\n\t\t\tconst contextInfo = this.getCardConfigurationByKey(\"contextInfo\");\n\t\t\tconst { contextPath } = contextInfo;\n\t\t\tconst entityType = this.getEntityType();\n\t\t\tif (!entityType) {\n\t\t\t\tLog.error(`FE : V4 : Adaptive Card header actions : no EntityType found at context path: ${contextPath}`);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tconst actions = this.getAnnotatedHeaderActions(entityType);\n\t\t\tif (actions.length > 0) {\n\t\t\t\tconst configuredActions = this.getConfiguredActions(actions);\n\t\t\t\tthis.actions = configuredActions.reduce(this.getActionInAdaptiveCardFormat.bind(this), [] as IACAction[]);\n\t\t\t}\n\t\t} catch (err: unknown) {\n\t\t\tconst message = err instanceof Error ? err.message : String(err);\n\t\t\tLog.error(\"Error while creating the card defintion\", message);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get action type based on the need for user inputs for action parameters.\n\t * @param edmAction Converted metadata action.\n\t * @returns Action type to use\n\t */\n\tprivate getAdaptiveCardActionType(edmAction: Action): ACAction | undefined {\n\t\tconst { isBound, isFunction, parameters } = edmAction;\n\t\tif (isFunction) {\n\t\t\t// functions are ignored\n\t\t\treturn;\n\t\t}\n\t\tconst needUserInputParameters = parameters.length > (isBound ? 1 : 0);\n\n\t\treturn needUserInputParameters ? ACAction.ShowCard : ACAction.Execute;\n\t}\n\n\t/**\n\t * Get Action parameter elements to add to the action card body.\n\t * @param actionTarget Converted metadata action.\n\t * @returns Input elements for action parameters\n\t */\n\tprivate getActionCardBodyWithParameterFields(actionTarget: Action): CardElement[] {\n\t\tconst { isBound } = actionTarget;\n\t\treturn actionTarget.parameters.reduce((elements, parameter, index) => {\n\t\t\tif (isBound && index === 0) {\n\t\t\t\treturn elements;\n\t\t\t}\n\t\t\tlet inputElement: IInputText | IInputDate;\n\t\t\tconst labelTerm = parameter.annotations.Common?.Label;\n\t\t\tif (parameter.type === \"Edm.Date\" || parameter.type === \"Edm.DateTimeOffset\" || parameter.type === \"Edm.DateTime\") {\n\t\t\t\tinputElement = {\n\t\t\t\t\ttype: ACInput.Date,\n\t\t\t\t\tid: parameter.name,\n\t\t\t\t\tlabel: labelTerm?.toString() ?? parameter.name,\n\t\t\t\t\tisRequired: this.getRequired(parameter, actionTarget) ?? undefined\n\t\t\t\t};\n\t\t\t\telements.push(inputElement);\n\t\t\t} else {\n\t\t\t\tinputElement = {\n\t\t\t\t\ttype: ACInput.Text,\n\t\t\t\t\tid: parameter.name,\n\t\t\t\t\tlabel: labelTerm?.toString() ?? parameter.name,\n\t\t\t\t\tisRequired: this.getRequired(parameter, actionTarget) ?? undefined,\n\t\t\t\t\tisMultiline: isMultiLineText(parameter) ?? undefined\n\t\t\t\t};\n\t\t\t\telements.push(inputElement);\n\t\t\t}\n\t\t\treturn elements;\n\t\t}, [] as CardElement[]);\n\t}\n\n\t/**\n\t * Get action object with parameter elements.\n\t * @param actionTarget Converted metadata action.\n\t * @param actionDetails Action properties.\n\t * @returns Action object with parameters.\n\t */\n\tprivate getActionWithParameters(actionTarget: Action, actionDetails: Partial<IACAction>): IACAction {\n\t\tconst body = this.getActionCardBodyWithParameterFields(actionTarget);\n\t\tconst { verb, title, style, data } = actionDetails;\n\t\tconst actionWithParameters: IACAction = {\n\t\t\ttype: ACAction.Execute,\n\t\t\tverb,\n\t\t\tdata,\n\t\t\ttitle: ACTION_OK,\n\t\t\tstyle: ACStyle.Positive\n\t\t};\n\n\t\treturn {\n\t\t\ttype: ACAction.ShowCard,\n\t\t\ttitle,\n\t\t\tstyle,\n\t\t\tcard: {\n\t\t\t\ttype: \"AdaptiveCard\",\n\t\t\t\tbody,\n\t\t\t\tactions: [actionWithParameters]\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Get action for adaptive card.\n\t * @param dataFieldForAction DataFieldForAction annotation\n\t * @returns Action to add.\n\t */\n\tprivate getAction(dataFieldForAction: DataFieldForAction): IACAction | undefined {\n\t\tconst { ActionTarget: actionTarget } = dataFieldForAction;\n\n\t\tconst actionDetails = this.getActionDetails(dataFieldForAction);\n\t\tif (!actionTarget || !actionDetails) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst actionType = this.getAdaptiveCardActionType(actionTarget);\n\n\t\tlet retAction: IACAction | undefined;\n\t\tif (actionType === ACAction.Execute) {\n\t\t\t// Actions without parameters\n\t\t\tretAction = { type: actionType, ...actionDetails };\n\t\t} else if (actionType === ACAction.ShowCard) {\n\t\t\t// Action with parameters\n\t\t\tretAction = this.getActionWithParameters(actionTarget, actionDetails);\n\t\t}\n\t\treturn retAction;\n\t}\n\n\t/**\n\t * Get data that needs to be part of action.\n\t * @param actionTarget Converted metadata action.\n\t * @returns Action data that needs to be passed with the action.\n\t */\n\tprivate getActionData(actionTarget: Action): ActionData {\n\t\tconst { isBound } = actionTarget;\n\t\tconst contextInfo = this.getCardConfigurationByKey(\"contextInfo\");\n\t\tconst { bindingContextPath } = contextInfo;\n\t\tconst bindingContextPathRelativeToService = bindingContextPath.startsWith(\"/\")\n\t\t\t? bindingContextPath.substring(1)\n\t\t\t: bindingContextPath;\n\t\tconst serviceURI = this.getCardConfigurationByKey(\"serviceURI\");\n\t\tconst contextURL = `${serviceURI}${bindingContextPathRelativeToService}`;\n\t\treturn {\n\t\t\tcontextURL,\n\t\t\tserviceURI: isBound ? undefined : serviceURI,\n\t\t\tisConfirmationRequired: this.getIsCriticalForAdaptiveCardAction(actionTarget) ?? undefined\n\t\t};\n\t}\n\n\t/**\n\t * Get action for adaptive card.\n\t * @param dataFieldForAction DataFieldForAction annotation\n\t * @returns Action to add.\n\t */\n\tprivate getActionDetails(dataFieldForAction: DataFieldForAction): Partial<IACAction> | undefined {\n\t\tconst { ActionTarget: actionTarget } = dataFieldForAction;\n\t\tif (!actionTarget) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Verb creation for actions:\n\t\t//\n\t\t// 1. Bound action:\n\t\t//    Verb needs to be relative to contextURL. format: '<metadata namespace>.<action name>'\n\t\t//    Example:\n\t\t//        Metadata namespace: 'com.c_som_sd'\n\t\t//        Action name: 'boundAction'\n\t\t//        Verb: 'com.c_som_sd.boundAction'\n\t\t//        ContextURL: /SOM(1)\n\t\t//        URL to trigger POST call(this will be created by the BOT, <serviceURI + contextURL + verb>): 'https://<serviceURI>/SOM('1')/com.c_som_sd.boundAction'\n\t\t//\n\t\t// 2. Unbound action:\n\t\t//    Verb needs to be relative to serviceURI. format: '<action name>'\n\t\t//    Example:\n\t\t//        Action name: 'unboundAction'\n\t\t//        Verb: 'unboundAction'\n\t\t//        ContextURL: undefined\n\t\t//        URL to trigger POST call(this will be created by the BOT, <serviceURI + verb>): 'https://<serviceURI>/unboundAction'\n\t\tconst actionToTrigger = actionTarget.isBound ? dataFieldForAction.Action.toString() : actionTarget.name,\n\t\t\t// We remove the overload part from the action. like 'com.c_som_sd.boundAction(com.c_som_sd.returnType)', we need only 'com.c_som_sd.boundAction' as verb.\n\t\t\tverb = actionToTrigger.replace(/\\((.*)\\)$/, \"\"),\n\t\t\ttitle = dataFieldForAction.Label?.toString() ?? actionTarget.name,\n\t\t\tstyle = this.getActionStyle(dataFieldForAction),\n\t\t\tdata = this.getActionData(actionTarget);\n\n\t\treturn { verb, title, style, data };\n\t}\n\n\t/**\n\t * Generates action sets for adaptive card.\n\t *\n\t * As of now, only considering 'Annotated Actions'.\n\t * Not supported:\n\t * 1. Standard actions\n\t * 2. Manifest actions\n\t *\n\t * Presently, only first two actions shall be passed to the adaptive card.\n\t *\n\t * This function can be used by Array.reduce.\n\t * @param adaptiveCardActions Actions array to be returned.\n\t * @param actionElement DataFieldForAction that needs to be converted.\n\t * @returns An Array of Actions that need to be concatenated to card body.\n\t */\n\tprivate getActionInAdaptiveCardFormat(adaptiveCardActions: IACAction[], actionElement: ActionConfigElement): IACAction[] {\n\t\tif (adaptiveCardActions.length > 1) {\n\t\t\t// Note: We only expect first 2 actions in MS teams adaptive cards. This might change in the future.\n\t\t\treturn adaptiveCardActions;\n\t\t}\n\n\t\tconst { action: dataFieldForAction, title: titleOverride } = actionElement;\n\t\tconst { ActionTarget: actionTarget } = dataFieldForAction;\n\n\t\t// No Action in case:\n\t\t// 1. actionTarget not available.\n\t\t// 1. statically not visible.\n\t\t// 2. statically disabled.\n\t\t// 3. action is static action.\n\t\tif (!actionTarget) {\n\t\t\treturn adaptiveCardActions;\n\t\t}\n\n\t\tconst isActionVisible = actionElement.isVisible ?? this.getVisibleForAdaptiveCardAction(dataFieldForAction) ?? undefined;\n\t\tconst isEnabled = this.getEnabledForAdaptiveCardAction(actionTarget) ?? undefined;\n\n\t\t// NOTE: '$when' is used to control visibility of actions. Looks like the value needs to always be an expression of format '${<exp>}'.\n\t\t// So, direct strings like 'true' and 'false' which are expected to work for normal card properties don't work for $when.\n\t\t// We would need to handle such cases independently.\n\t\tlet whenValue: string | undefined;\n\t\tif (typeof isActionVisible === \"boolean\" && isActionVisible === false) {\n\t\t\treturn adaptiveCardActions;\n\t\t} else if (typeof isActionVisible === \"string\" && isActionVisible && /^\\$\\{.*\\}/i.test(isActionVisible)) {\n\t\t\t// visible is an expression of format '${<exp>}'.\n\t\t\twhenValue = isActionVisible;\n\t\t} else if (isActionVisible === \"true\") {\n\t\t\t// statically visible\n\t\t\twhenValue = undefined;\n\t\t} else if (isActionVisible === \"false\") {\n\t\t\t// statically not visible\n\t\t\treturn adaptiveCardActions;\n\t\t}\n\n\t\tif (isEnabled === \"false\" || this.isStaticAction(actionTarget) || this.isCopyAction(dataFieldForAction)) {\n\t\t\treturn adaptiveCardActions;\n\t\t}\n\n\t\tconst action = this.getAction(dataFieldForAction);\n\t\tif (action) {\n\t\t\tconst visualUpdates = {\n\t\t\t\tisEnabled,\n\t\t\t\t$when: whenValue,\n\t\t\t\ttitle: titleOverride ?? action.title\n\t\t\t};\n\t\t\tadaptiveCardActions.push({ ...action, ...visualUpdates });\n\t\t}\n\n\t\treturn adaptiveCardActions;\n\t}\n\n\t/**\n\t * Get the DataFieldForActions for adaptive card.\n\t * @param entityType EntityType.\n\t * @returns DataFieldForActions that are applicable to be shown in the adaptive card.\n\t */\n\tprivate getAnnotatedHeaderActions(entityType: EntityType): DataFieldForAction[] {\n\t\tconst identificationAnnotation = entityType.annotations.UI?.Identification;\n\t\treturn identificationAnnotation\n\t\t\t? (identificationAnnotation.filter(\n\t\t\t\t\t(dataField) => dataField.$Type === UIAnnotationTypes.DataFieldForAction && !dataField.Determining\n\t\t\t  ) as DataFieldForAction[])\n\t\t\t: [];\n\t}\n\n\t/**\n\t * Get configured actions.\n\t * @param annotatedActions Annotated actions from the converted metadata.\n\t * @returns ActionConfigElements to create actions for card definition.\n\t */\n\tprivate getConfiguredActions(annotatedActions: DataFieldForAction[]): ActionConfigElement[] {\n\t\t// Actions from annotations.\n\t\tconst actionConfigs = this.getCardConfigurationByKey(\"actions\");\n\t\tconst annotatedActionElements = annotatedActions.map(\n\t\t\t(action) => ({ key: action && getStableIdPartFromDataField(action), action }) as ActionConfigElement\n\t\t);\n\t\tif (!actionConfigs || Object.keys(actionConfigs).length === 0) {\n\t\t\treturn annotatedActionElements;\n\t\t}\n\n\t\t// Custom Action configs.\n\t\tconst customConfigActionNames = Object.keys(actionConfigs);\n\t\tconst customActionConfigElements = customConfigActionNames.reduce((customActionElements, customConfigActionKey) => {\n\t\t\tconst relevantActionElement = annotatedActionElements.find((actionElement) => actionElement.key === customConfigActionKey);\n\n\t\t\tif (relevantActionElement) {\n\t\t\t\tcustomActionElements[customConfigActionKey] = {\n\t\t\t\t\tkey: customConfigActionKey,\n\t\t\t\t\taction: relevantActionElement.action,\n\t\t\t\t\tposition: {\n\t\t\t\t\t\tplacement: Placement.After\n\t\t\t\t\t},\n\t\t\t\t\t...actionConfigs[customConfigActionKey]\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn customActionElements;\n\t\t}, {} as InternalCustomActionElements);\n\n\t\t// Final action elements\n\t\tconst actionOverwriteConfig = {\n\t\t\ttitle: OverrideType.overwrite,\n\t\t\tposition: OverrideType.overwrite,\n\t\t\tisVisible: OverrideType.overwrite\n\t\t};\n\t\treturn insertCustomElements(annotatedActionElements, customActionConfigElements, actionOverwriteConfig);\n\t}\n\n\t/**************************************************************************/\n\t/* Functions for creating template bindings and getting action properties */\n\t/**************************************************************************/\n\n\t/**\n\t * Get action visibility.\n\t * @param dataFieldForAction DataFieldForAction annotation\n\t * @returns Boolean\n\t */\n\tprivate getVisibleForAdaptiveCardAction(dataFieldForAction: DataFieldForAction): CompiledAdaptiveCardExpression {\n\t\tconst visibilityExp = isVisible(dataFieldForAction);\n\t\treturn this.updatePathsAndGetCompiledExpression(visibilityExp);\n\t}\n\n\t/**\n\t * Get action style for the action button.\n\t * @param dataFieldForAction DataFieldForAction annotation\n\t * @returns Style of the action button\n\t */\n\tprivate getActionStyle(dataFieldForAction: DataFieldForAction): ACStyle {\n\t\t// TODO: compile to adaptive card binding string for dynamic annotation.\n\t\tlet style = ACStyle.Default;\n\t\tconst criticality = dataFieldForAction.Criticality;\n\t\tif (criticality && typeof criticality === \"string\") {\n\t\t\tswitch (criticality) {\n\t\t\t\tcase \"UI.CriticalityType/Positive\":\n\t\t\t\t\tstyle = ACStyle.Positive;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"UI.CriticalityType/Negative\":\n\t\t\t\t\tstyle = ACStyle.Destructive;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstyle = ACStyle.Default;\n\t\t\t}\n\t\t}\n\t\treturn style;\n\t}\n\n\t/**\n\t * Check if action is critical.\n\t * @param actionTarget Action definition.\n\t * @returns Boolean\n\t */\n\tprivate getIsCriticalForAdaptiveCardAction(actionTarget: Action): CompiledAdaptiveCardExpression {\n\t\tconst isActionCritical = getIsActionCriticalExpression(actionTarget, this.convertedTypes);\n\t\treturn this.updatePathsAndGetCompiledExpression(isActionCritical);\n\t}\n\n\t/**\n\t * Get action enablement.\n\t * @param actionTarget Action definition.\n\t * @returns Boolean\n\t */\n\tprivate getEnabledForAdaptiveCardAction(actionTarget: Action): CompiledAdaptiveCardExpression {\n\t\tconst enabledExpression = getActionEnabledExpression(actionTarget, this.convertedTypes);\n\t\treturn this.updatePathsAndGetCompiledExpression(enabledExpression);\n\t}\n\n\t/**\n\t * Check for static action.\n\t * @param actionTarget Action definition.\n\t * @returns Boolean.\n\t */\n\tprivate isStaticAction(actionTarget: Action): boolean {\n\t\tconst { isBound, parameters } = actionTarget;\n\t\treturn isBound && parameters[0] && parameters[0].isCollection;\n\t}\n\n\t/**\n\t * Check for copy action.\n\t * @param dataField Action definition.\n\t * @returns Boolean.\n\t */\n\tprivate isCopyAction(dataField: DataFieldForAction): boolean {\n\t\treturn dataField.annotations?.UI?.IsCopyAction?.valueOf() === true;\n\t}\n\n\t/**\n\t * Check if parameter input is required for action execution.\n\t * @param parameter Action parameter.\n\t * @param actionTarget\n\t * @returns Boolean\n\t */\n\tprivate getRequired(parameter: ActionParameter, actionTarget: Action): CompiledAdaptiveCardExpression {\n\t\tconst fieldControlExpression = isActionParameterRequiredExpression(parameter, actionTarget, this.convertedTypes);\n\t\treturn this.updatePathsAndGetCompiledExpression(fieldControlExpression);\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"HeaderActions-dbg.js"}