{"version":3,"file":"ListReport.designtime.helper.js","names":["getDesigntimeSettings","stickyMultiTabHeader","id","name","description","value","type","variantManagement","enums","keyUser","initialLoad","hideFilterBar","useHiddenFilterBar","showCounts","path","_exports","getGlobalSettings","sideEffectsEventsInteractionType","getAdapationProperties","designtimeSettings","control","propertyValues","viewData","getParent","getViewData","forEach","setting","views","getGlobalSettingsValues","globalSettings","appComponent","CommonUtils","getAppComponent","getGlobalSettingsValue","globalSetting","propertyValue","getManifestEntry","app","getSettings","items","manifestSetting","settingsData","label","tooltip","controlData","enum","push","getSettingsGlobal"],"sources":["./ListReport.designtime.helper.ts"],"sourcesContent":["import CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type { DesigntimeSetting, DesigntimeSettingEnums, PropertyValue, SettingsData } from \"sap/fe/macros/designtime/Designtime.helper\";\nimport type Control from \"sap/ui/core/Control\";\nimport type View from \"sap/ui/core/mvc/View\";\n\ntype propertyValueInConfig = {\n\tstickyMultiTabHeader: false;\n\tvariantManagement: string;\n\tinitialLoad: string;\n\thideFilterBar: false;\n\tuseHiddenFilterBar: false;\n\tviews: {\n\t\tshowCounts: false;\n\t};\n};\n\ntype globalValue = {\n\tsideEffectsEventsInteractionType: string;\n};\n\ntype ControlData = {\n\ttype: string | undefined;\n\tenum: DesigntimeSettingEnums[] | undefined;\n\tvalue: unknown;\n\tid: string;\n};\n/**\n * Return the available designtime settings for the List Report.\n * @returns Designtime settings for List Report\n */\nexport function getDesigntimeSettings(): DesigntimeSetting[] {\n\t// Properties for the ListReport. Most of these are used by the converter.\n\tconst stickyMultiTabHeader: DesigntimeSetting = {\n\t\tid: \"stickyMultiTabHeader\",\n\t\tname: \"RTA_CONFIGURATION_LR_MT_NAME\",\n\t\tdescription: \"RTA_CONFIGURATION_LR_MT_DESC\",\n\t\tvalue: false,\n\t\ttype: \"boolean\"\n\t};\n\tconst variantManagement: DesigntimeSetting = {\n\t\tid: \"variantManagement\",\n\t\tname: \"RTA_CONFIGURATION_LR_VM_NAME\",\n\t\tdescription: \"RTA_CONFIGURATION_LR_VM_DESC\",\n\t\ttype: \"string\",\n\t\tvalue: \"Page\",\n\t\tenums: [\n\t\t\t{ id: \"Control\", name: \"RTA_CONFIGURATION_LR_VM_ENUM_CONTROL\" },\n\t\t\t{ id: \"None\", name: \"RTA_CONFIGURATION_LR_VM_ENUM_NONE\" },\n\t\t\t{ id: \"Page\", name: \"RTA_CONFIGURATION_LR_VM_ENUM_PAGE\" }\n\t\t],\n\t\tkeyUser: true\n\t};\n\tconst initialLoad: DesigntimeSetting = {\n\t\tid: \"initialLoad\",\n\t\tname: \"RTA_CONFIGURATION_LR_INITIALLOAD_NAME\",\n\t\tdescription: \"RTA_CONFIGURATION_LR_INITIALLOAD_DESC\",\n\t\ttype: \"string\",\n\t\tvalue: \"enabled\",\n\t\tenums: [\n\t\t\t{ id: \"Auto\", name: \"RTA_CONFIGURATION_LR_INITIALLOAD_ENUM_AUTO\" },\n\t\t\t{ id: \"Enabled\", name: \"RTA_CONFIGURATION_LR_INITIALLOAD_ENUM_ENABLED\" },\n\t\t\t{ id: \"Disabled\", name: \"RTA_CONFIGURATION_LR_INITIALLOAD_ENUM_DISABLED\" }\n\t\t],\n\t\tkeyUser: true\n\t};\n\n\tconst hideFilterBar: DesigntimeSetting = {\n\t\tid: \"hideFilterBar\",\n\t\tname: \"RTA_CONFIGURATION_LR_HFB_NAME\",\n\t\tdescription: \"RTA_CONFIGURATION_LR_HFB_DESC\",\n\t\ttype: \"boolean\",\n\t\tvalue: true\n\t};\n\n\tconst useHiddenFilterBar: DesigntimeSetting = {\n\t\tid: \"useHiddenFilterBar\",\n\t\tname: \"RTA_CONFIGURATION_LR_UHFB_NAME\",\n\t\tdescription: \"RTA_CONFIGURATION_LR_UHFB_DESC\",\n\t\ttype: \"boolean\",\n\t\tvalue: false\n\t};\n\n\t// If this property is set when multitabs have not been defined, the app does not load\n\tconst showCounts: DesigntimeSetting = {\n\t\tid: \"showCounts\",\n\t\tpath: \"views/showCounts\",\n\t\tname: \"RTA_CONFIGURATION_LR_SC_NAME\",\n\t\tdescription: \"RTA_CONFIGURATION_LR_SC_DESC\",\n\t\ttype: \"boolean\",\n\t\tvalue: false\n\t};\n\n\treturn [stickyMultiTabHeader, variantManagement, initialLoad, hideFilterBar, useHiddenFilterBar, showCounts];\n}\n\n/**\n * Obtains the global settings that are offered in the adaption dialog for ListReport.\n * @returns The settings with metadata required for the dialog to change properties\n */\nexport function getGlobalSettings(): DesigntimeSetting[] {\n\t// Belongs to Global Settings, added here\n\n\tconst sideEffectsEventsInteractionType: DesigntimeSetting = {\n\t\tid: \"sideEffectsEventsInteractionType\",\n\t\tname: \"RTA_CONFIGURATION_LR_SE_NAME\",\n\t\tdescription: \"RTA_CONFIGURATION_LR_SE_DESC\",\n\t\ttype: \"string\",\n\t\tvalue: \"None\",\n\t\tenums: [\n\t\t\t{ id: \"None\", name: \"RTA_CONFIGURATION_LR_SE_ENUM_NONE\" },\n\t\t\t{ id: \"Confirmation\", name: \"RTA_CONFIGURATION_LR_SE_ENUM_CONF\" },\n\t\t\t{ id: \"Notification\", name: \"RTA_CONFIGURATION_LR_SE_ENUM_NOTF\" }\n\t\t]\n\t};\n\n\treturn [sideEffectsEventsInteractionType];\n}\n/**\n * Returns the values of the settings that are defined for list report adaption.\n * @param designtimeSettings Array of the settings for list report\n * @param control Reference to the list report view\n * @returns An object containg the settings with values\n */\nexport function getAdapationProperties(designtimeSettings: DesigntimeSetting[], control: Control): PropertyValue {\n\tconst propertyValues: PropertyValue = {};\n\n\tconst viewData = (control.getParent() as View)!.getViewData() as propertyValueInConfig;\n\n\tdesigntimeSettings.forEach(function (setting) {\n\t\tswitch (setting.id) {\n\t\t\tcase \"stickyMultiTabHeader\":\n\t\t\t\tpropertyValues.stickyMultiTabHeader = viewData.stickyMultiTabHeader;\n\t\t\t\tbreak;\n\t\t\tcase \"variantManagement\":\n\t\t\t\tpropertyValues.variantManagement = viewData.variantManagement;\n\t\t\t\tbreak;\n\t\t\tcase \"initialLoad\":\n\t\t\t\tpropertyValues.initialLoad = viewData.initialLoad;\n\t\t\t\tbreak;\n\t\t\tcase \"hideFilterBar\":\n\t\t\t\tpropertyValues.hideFilterBar = viewData.hideFilterBar;\n\t\t\t\tbreak;\n\t\t\tcase \"useHiddenFilterBar\":\n\t\t\t\tpropertyValues.useHiddenFilterBar = viewData.useHiddenFilterBar;\n\t\t\t\tbreak;\n\t\t\tcase \"showCounts\":\n\t\t\t\tpropertyValues.showCounts = viewData.views?.showCounts;\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\treturn propertyValues;\n}\n\n/**\n * Reads the values of the global settings from the manifest. These have been added to the\n * settings for list report.\n * @param globalSettings\n * @param control\n * @returns The values added into the metadata struture for each global setting\n */\nexport function getGlobalSettingsValues(globalSettings: DesigntimeSetting[], control: Control): PropertyValue {\n\tconst propertyValues: PropertyValue = {};\n\n\tconst appComponent = CommonUtils.getAppComponent(control);\n\n\tglobalSettings.forEach(function (setting) {\n\t\tpropertyValues[setting.id] = getGlobalSettingsValue(setting, control);\n\t});\n\n\treturn propertyValues;\n}\n\n/**\n * Reads the values of a global setting from the manifest.\n * @param globalSetting\n * @param control\n * @returns The value added into the metadata struture for the global setting\n */\nexport function getGlobalSettingsValue(globalSetting: DesigntimeSetting, control: Control): boolean | string | number {\n\tlet propertyValue: boolean | string | number = \"\";\n\tconst appComponent = CommonUtils.getAppComponent(control);\n\n\tswitch (globalSetting.id) {\n\t\tcase \"sideEffectsEventsInteractionType\":\n\t\t\tconst sideEffectsEventsInteractionType = appComponent.getManifestEntry(\"sap.fe\")?.app?.sideEffectsEventsInteractionType;\n\t\t\t// we only support the global setting right now, not the setting per event\n\t\t\tpropertyValue = typeof sideEffectsEventsInteractionType === \"string\" ? sideEffectsEventsInteractionType : \"Notification\";\n\t\t\tbreak;\n\t}\n\n\treturn propertyValue;\n}\n\n/**\n * Returns the values of the settings that are defined for list report adaption.\n * @param propertyValues List of settings and current values for list report\n * @returns Content in list form to be used in adapation dialog\n */\nexport function getSettings(propertyValues: PropertyValue): SettingsData[] {\n\tconst items: SettingsData[] = [];\n\n\tgetDesigntimeSettings().forEach(function (manifestSetting) {\n\t\t//Fill model for adaptation settings data\n\t\tconst settingsData: SettingsData = {\n\t\t\tlabel: manifestSetting.name,\n\t\t\ttooltip: manifestSetting.description,\n\t\t\tcontrol: [],\n\t\t\tkeyUser: manifestSetting.keyUser\n\t\t};\n\n\t\tconst controlData: ControlData = {\n\t\t\ttype: manifestSetting.type,\n\t\t\tenum: manifestSetting.enums,\n\t\t\tvalue: propertyValues[manifestSetting.id],\n\t\t\tid: manifestSetting.id\n\t\t};\n\n\t\tsettingsData.control.push(controlData);\n\t\titems.push(settingsData);\n\t});\n\n\treturn items;\n}\n/**\n * Prepare list of global settings for the the dialog to\n * change settings for the List Report.\n * @param propertyValues\n * @returns The changes in a structure used by flexibility tools\n */\nexport function getSettingsGlobal(propertyValues: PropertyValue): SettingsData[] {\n\tconst items: SettingsData[] = [];\n\n\tgetGlobalSettings().forEach(function (manifestSetting) {\n\t\t//Fill model for adaptation settings data\n\t\tconst settingsData: SettingsData = {\n\t\t\tlabel: manifestSetting.name,\n\t\t\ttooltip: manifestSetting.description,\n\t\t\tcontrol: [],\n\t\t\tkeyUser: manifestSetting.keyUser\n\t\t};\n\n\t\tconst controlData: ControlData = {\n\t\t\ttype: manifestSetting.type,\n\t\t\tenum: manifestSetting.enums,\n\t\t\tvalue: propertyValues[manifestSetting.id as keyof globalValue],\n\t\t\tid: manifestSetting.id\n\t\t};\n\n\t\tsettingsData.control.push(controlData);\n\t\titems.push(settingsData);\n\t});\n\n\treturn items;\n}\n"],"mappings":"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","ignoreList":[]}