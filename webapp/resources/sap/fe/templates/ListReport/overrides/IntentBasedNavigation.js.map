{"version":3,"file":"IntentBasedNavigation.js","names":["IntentBasedNavigationOverride","adaptNavigationContext","selectionVariant","targetInfo","view","this","base","getView","controller","getController","filterBar","_getFilterBarControl","metaModel","getModel","getMetaModel","preparedSV","updatedValues","keepNavigationProperties","_intentBasedNavigation","keepNavigationPropertiesForNavigation","isEmpty","oData","getFilterBarSelectionVariant","toJSONObject","modifiedOData","getAppComponent","getNavigationService","checkIsPotentiallySensitive","filterBarSelectionVariant","SelectionVariant","viewData","getViewData","rootPath","fullContextPath","navProperties","getNavigationPropertiesFromEntityType","removeNavigationPropertiesFromSV","prepareFiltersForExternalNavigation","handleMultiModeControl","updateNonConflictingFilterProperties","filterPropertiesWithoutConflict","propertiesWithoutConflict","exception","message","Error","String","Log","error","multipleModeControl","_getMultiModeControl","tabsModel","getTabsModel","aIgnoredFieldsForTab","getProperty","content","getSelectedKey","Array","isArray","length","forEach","sProperty","removeSelectOption","path","distinctKeysObject","mainEntityValuePath","currentValuePath","winnerValuePath","pathInContext","_findDistinctKeysInObject","LookUpObject","lookUpObjectMetaPath","key","keyInContext","includes","pathParts","split","push","selectOptionsPropertyNames","getSelectOptionsPropertyNames","selectOptionsObject","propertyName","selectOption","getSelectOption","distinctKey","conflictingPaths","i","replaceAll","filter","sValue","join","updatedSV","massAddSelectOption","updatedSelectionVariant","navPropNames","map","navProp","name","reduce","sv","firstNavPart","selectOptions","tablePropertiesWithoutConflict","filterBarPropertiesWithoutConflict","selectOptionPropertyName","filterBarSelectOption","navigationSelectOptionNames","getEntitySet","getCurrentEntitySet"],"sources":["./IntentBasedNavigation.ts"],"sourcesContent":["import { type NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type IntentBasedNavigation from \"sap/fe/core/controllerextensions/IntentBasedNavigation\";\nimport type { SelectOption } from \"sap/fe/navigation/SelectionVariant\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\ntype ExternalNavigationInfo = {\n\ttargetInfo: Record<string, unknown>;\n\tselectionVariant: SelectionVariant;\n};\n\ntype FilterInfoOfExternalNav = {\n\tupdatedSelectionVariant: SelectionVariant;\n\tfilterPropertiesWithoutConflict: Record<string, string>;\n};\n\nconst IntentBasedNavigationOverride = {\n\tadaptNavigationContext: function (\n\t\tthis: IntentBasedNavigation,\n\t\tselectionVariant: SelectionVariant,\n\t\ttargetInfo: {\n\t\t\tpropertiesWithoutConflict?: Record<string, string>;\n\t\t}\n\t): void {\n\t\ttry {\n\t\t\tconst view = this.base.getView(),\n\t\t\t\tcontroller = view.getController() as ListReportController,\n\t\t\t\tfilterBar = controller._getFilterBarControl(),\n\t\t\t\tmetaModel = view.getModel().getMetaModel();\n\t\t\tlet preparedSV, updatedValues;\n\t\t\tconst keepNavigationProperties = controller._intentBasedNavigation.keepNavigationPropertiesForNavigation();\n\t\t\t// Adding filter bar values to the navigation does not make sense if no context has been selected.\n\t\t\t// Hence only consider filter bar values when SelectionVariant is not empty\n\t\t\tif (filterBar && !selectionVariant.isEmpty()) {\n\t\t\t\tconst oData = {\n\t\t\t\t\tselectionVariant: controller.getFilterBarSelectionVariant().toJSONObject()\n\t\t\t\t};\n\t\t\t\tlet modifiedOData = {\n\t\t\t\t\tselectionVariant: {}\n\t\t\t\t};\n\t\t\t\tmodifiedOData = this.base\n\t\t\t\t\t.getAppComponent()\n\t\t\t\t\t.getNavigationService()\n\t\t\t\t\t.checkIsPotentiallySensitive(oData) as typeof modifiedOData;\n\n\t\t\t\tlet filterBarSelectionVariant = new SelectionVariant(modifiedOData?.selectionVariant);\n\t\t\t\tconst viewData = view.getViewData(),\n\t\t\t\t\trootPath = viewData.fullContextPath;\n\t\t\t\tif (!keepNavigationProperties) {\n\t\t\t\t\tconst navProperties = controller._intentBasedNavigation.getNavigationPropertiesFromEntityType(metaModel, rootPath);\n\t\t\t\t\tfilterBarSelectionVariant = IntentBasedNavigationOverride.removeNavigationPropertiesFromSV(\n\t\t\t\t\t\tfilterBarSelectionVariant,\n\t\t\t\t\t\tnavProperties\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tpreparedSV = IntentBasedNavigationOverride.prepareFiltersForExternalNavigation(filterBarSelectionVariant, rootPath);\n\t\t\t\tIntentBasedNavigationOverride.handleMultiModeControl(controller, filterBarSelectionVariant);\n\t\t\t\tupdatedValues = IntentBasedNavigationOverride.updateNonConflictingFilterProperties(\n\t\t\t\t\ttargetInfo,\n\t\t\t\t\tfilterBarSelectionVariant,\n\t\t\t\t\tselectionVariant,\n\t\t\t\t\tpreparedSV.filterPropertiesWithoutConflict\n\t\t\t\t);\n\t\t\t\ttargetInfo = updatedValues.targetInfo;\n\t\t\t\tdelete targetInfo.propertiesWithoutConflict;\n\t\t\t}\n\t\t} catch (exception: unknown) {\n\t\t\tconst message = exception instanceof Error ? exception.message : String(exception);\n\t\t\tLog.error(`Failed to process navigation context - ${message}`);\n\t\t}\n\t},\n\t/**\n\t * Handle multi mode control in external navigation.\n\t * @param controller This is listReportController.\n\t * @param filterBarSelectionVariant Selection variant format of filter conditions.\n\t */\n\thandleMultiModeControl: function (controller: ListReportController, filterBarSelectionVariant: SelectionVariant): void {\n\t\tconst multipleModeControl = controller._getMultiModeControl();\n\t\tif (multipleModeControl) {\n\t\t\t// Do we need to exclude Fields (multi tables mode with multi entity sets)?\n\t\t\tconst tabsModel = multipleModeControl.getTabsModel();\n\t\t\tif (tabsModel) {\n\t\t\t\tconst aIgnoredFieldsForTab = tabsModel.getProperty(\n\t\t\t\t\t`/${multipleModeControl.content?.getSelectedKey()}/notApplicable/fields`\n\t\t\t\t);\n\t\t\t\tif (Array.isArray(aIgnoredFieldsForTab) && aIgnoredFieldsForTab.length > 0) {\n\t\t\t\t\taIgnoredFieldsForTab.forEach(function (sProperty: string) {\n\t\t\t\t\t\tfilterBarSelectionVariant.removeSelectOption(sProperty);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Prepare SV to be passed to external navigation.\n\t * @param filterBarSelectionVariant Selection variant format of filter conditions.\n\t * @param rootPath Root path of the application.\n\t * @returns Object of prepared SV for external navigation and no conflict filters.\n\t */\n\tprepareFiltersForExternalNavigation(filterBarSelectionVariant: SelectionVariant, rootPath: string): FilterInfoOfExternalNav {\n\t\tlet path;\n\t\tconst distinctKeysObject: Record<string, unknown[]> = {};\n\t\tconst filterPropertiesWithoutConflict: Record<string, string> = {};\n\t\tlet mainEntityValuePath = \"\",\n\t\t\tcurrentValuePath = \"\",\n\t\t\tfullContextPath: string,\n\t\t\twinnerValuePath: string,\n\t\t\tpathInContext: string;\n\t\tfunction _findDistinctKeysInObject(LookUpObject: Record<string, SelectOption[]>): void {\n\t\t\tlet lookUpObjectMetaPath;\n\t\t\tfor (const key in LookUpObject) {\n\t\t\t\tlet keyInContext = key;\n\t\t\t\tif (LookUpObject[keyInContext]) {\n\t\t\t\t\tif (keyInContext.includes(\"/\")) {\n\t\t\t\t\t\tlookUpObjectMetaPath = keyInContext; // \"/SalesOrdermanage/_Item/Material\"\n\t\t\t\t\t\tconst pathParts = keyInContext.split(\"/\");\n\t\t\t\t\t\tkeyInContext = pathParts[pathParts.length - 1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlookUpObjectMetaPath = rootPath;\n\t\t\t\t\t}\n\t\t\t\t\tif (!distinctKeysObject[keyInContext]) {\n\t\t\t\t\t\t// if key is found for the first time then create array\n\t\t\t\t\t\tdistinctKeysObject[keyInContext] = [];\n\t\t\t\t\t}\n\t\t\t\t\t// push path to array\n\t\t\t\t\tdistinctKeysObject[keyInContext].push(lookUpObjectMetaPath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst selectOptionsPropertyNames = filterBarSelectionVariant.getSelectOptionsPropertyNames();\n\t\tconst selectOptionsObject: Record<string, SelectOption[]> = {};\n\t\tselectOptionsPropertyNames.forEach((propertyName: string) => {\n\t\t\tconst selectOption = filterBarSelectionVariant.getSelectOption(propertyName);\n\t\t\tif (selectOption) {\n\t\t\t\tselectOptionsObject[`${propertyName}`] = selectOption;\n\t\t\t}\n\t\t});\n\t\t_findDistinctKeysInObject(selectOptionsObject);\n\t\tfor (const distinctKey in distinctKeysObject) {\n\t\t\tconst conflictingPaths = distinctKeysObject[distinctKey];\n\t\t\tif (conflictingPaths.length > 1) {\n\t\t\t\t// conflict\n\t\t\t\tfor (let i = 0; i <= conflictingPaths.length - 1; i++) {\n\t\t\t\t\tpath = conflictingPaths[i];\n\t\t\t\t\tif (path === rootPath) {\n\t\t\t\t\t\tfullContextPath = `${rootPath}/${distinctKey}`;\n\t\t\t\t\t\tpathInContext = distinctKey;\n\t\t\t\t\t\tmainEntityValuePath = distinctKey;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpathInContext = path as string;\n\t\t\t\t\t\tfullContextPath = `${rootPath}/${path}`.replaceAll(/\\*/g, \"\");\n\t\t\t\t\t\tcurrentValuePath = path as string;\n\t\t\t\t\t}\n\t\t\t\t\tselectOptionsObject[\n\t\t\t\t\t\tfullContextPath\n\t\t\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t\t\t.filter(function (sValue: string) {\n\t\t\t\t\t\t\t\treturn sValue != \"\";\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.join(\".\")\n\t\t\t\t\t] = selectOptionsObject[pathInContext];\n\t\t\t\t\tdelete selectOptionsObject[path as string];\n\t\t\t\t}\n\t\t\t\twinnerValuePath = mainEntityValuePath || currentValuePath;\n\t\t\t\tselectOptionsObject[distinctKey] = selectOptionsObject[winnerValuePath];\n\t\t\t} else {\n\t\t\t\t// no conflict, add distinct key without adding paths\n\t\t\t\tpath = conflictingPaths[0];\n\t\t\t\tfullContextPath =\n\t\t\t\t\tpath === rootPath ? `${rootPath}/${distinctKey}` : (`${rootPath}/${path}` as unknown as string).replaceAll(\"*\", \"\");\n\t\t\t\tfilterPropertiesWithoutConflict[distinctKey] = fullContextPath\n\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t.filter(function (sValue: string) {\n\t\t\t\t\t\treturn sValue != \"\";\n\t\t\t\t\t})\n\t\t\t\t\t.join(\".\");\n\t\t\t}\n\t\t}\n\t\t//now we loop through object and update existing SV with updated selection options\n\t\tconst updatedSV = new SelectionVariant();\n\t\tfor (const sProperty in selectOptionsObject) {\n\t\t\tupdatedSV.massAddSelectOption(sProperty, selectOptionsObject[sProperty]);\n\t\t}\n\t\treturn {\n\t\t\tupdatedSelectionVariant: updatedSV,\n\t\t\tfilterPropertiesWithoutConflict: filterPropertiesWithoutConflict\n\t\t};\n\t},\n\n\t/**\n\t * Remove navigation properties from SV.\n\t * @param selectionVariant Selection variant.\n\t * @param navProperties Navigation properties.\n\t * @returns Object of prepared SV for external navigation and no conflict filters.\n\t */\n\tremoveNavigationPropertiesFromSV(selectionVariant: SelectionVariant, navProperties: NavigationProperty[]): SelectionVariant {\n\t\tconst navPropNames = navProperties ? navProperties.map((navProp: NavigationProperty) => navProp.name) : [];\n\t\tconst selectOptionsPropertyNames = selectionVariant.getSelectOptionsPropertyNames();\n\t\treturn selectOptionsPropertyNames.reduce((sv: SelectionVariant, propertyName: string) => {\n\t\t\tif (navPropNames.length > 0) {\n\t\t\t\tconst firstNavPart = propertyName.split(\".\")[0];\n\t\t\t\tif (firstNavPart && navPropNames.includes(firstNavPart)) {\n\t\t\t\t\treturn sv;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst selectOptions = selectionVariant.getSelectOption(propertyName);\n\t\t\tif (selectOptions) {\n\t\t\t\tsv.massAddSelectOption(propertyName, selectOptions);\n\t\t\t}\n\n\t\t\treturn sv;\n\t\t}, new SelectionVariant());\n\t},\n\n\t/**\n\t * Method to add non conflicting filter conditions to SV.\n\t * @param targetInfo Target context\n\t * @param targetInfo.propertiesWithoutConflict Table properties without conflict\n\t * @param filterBarSelectionVariant Conditions from filterbar has been converted to SV and sent here\n\t * @param selectionVariant SV which is finally formed after all the calculations\n\t * @param filterPropertiesWithoutConflict Filter bar conditions without conflict\n\t * @returns The updated targetInfo and selection variant\n\t */\n\tupdateNonConflictingFilterProperties: function (\n\t\ttargetInfo: {\n\t\t\tpropertiesWithoutConflict?: Record<string, string>;\n\t\t},\n\t\tfilterBarSelectionVariant: SelectionVariant,\n\t\tselectionVariant: SelectionVariant,\n\t\tfilterPropertiesWithoutConflict?: Record<string, string>\n\t): ExternalNavigationInfo {\n\t\tconst tablePropertiesWithoutConflict = targetInfo.propertiesWithoutConflict;\n\t\tconst filterBarPropertiesWithoutConflict = filterPropertiesWithoutConflict;\n\t\tfilterBarSelectionVariant.getSelectOptionsPropertyNames().forEach(function (selectOptionPropertyName) {\n\t\t\tconst filterBarSelectOption = filterBarSelectionVariant.getSelectOption(selectOptionPropertyName);\n\t\t\tif (filterBarSelectOption && filterBarSelectOption.length) {\n\t\t\t\tconst navigationSelectOptionNames = selectionVariant.getSelectOptionsPropertyNames();\n\t\t\t\tif (!navigationSelectOptionNames.includes(selectOptionPropertyName)) {\n\t\t\t\t\t// First add all the filterbar SV if they don't exist in navigation SV\n\t\t\t\t\tselectionVariant.massAddSelectOption(selectOptionPropertyName, filterBarSelectOption);\n\t\t\t\t} else {\n\t\t\t\t\t// Now if navigation path is present add it here\n\t\t\t\t\t// Select option paths from table (with navigation path added to the string name) that don't create conflicts with filter bar select option names\n\t\t\t\t\tif (tablePropertiesWithoutConflict && selectOptionPropertyName in tablePropertiesWithoutConflict) {\n\t\t\t\t\t\tselectionVariant.massAddSelectOption(\n\t\t\t\t\t\t\ttablePropertiesWithoutConflict[selectOptionPropertyName],\n\t\t\t\t\t\t\tfilterBarSelectOption\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (filterBarPropertiesWithoutConflict && selectOptionPropertyName in filterBarPropertiesWithoutConflict) {\n\t\t\t\t\t\tselectionVariant.massAddSelectOption(\n\t\t\t\t\t\t\tfilterBarPropertiesWithoutConflict[selectOptionPropertyName],\n\t\t\t\t\t\t\tfilterBarSelectOption\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn { targetInfo, selectionVariant };\n\t},\n\tgetEntitySet: function (this: IntentBasedNavigation): string {\n\t\treturn (this.base as ListReportController).getCurrentEntitySet();\n\t}\n};\n\nexport default IntentBasedNavigationOverride;\n"],"mappings":"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","ignoreList":[]}