{"version":3,"names":["IntentBasedNavigationOverride","adaptNavigationContext","selectionVariant","targetInfo","view","base","getView","controller","getController","filterBar","_getFilterBarControl","metaModel","getModel","getMetaModel","preparedSV","updatedValues","keepNavigationProperties","_intentBasedNavigation","keepNavigationPropertiesForNavigation","isEmpty","oData","getFilterBarSelectionVariant","toJSONObject","modifiedOData","getAppComponent","getNavigationService","checkIsPotentiallySensitive","filterBarSelectionVariant","SelectionVariant","viewData","getViewData","rootPath","fullContextPath","navProperties","getNavigationPropertiesFromEntityType","removeNavigationPropertiesFromSV","prepareFiltersForExternalNavigation","handleMultiModeControl","updateNonConflictingFilterProperties","filterPropertiesWithoutConflict","propertiesWithoutConflict","exception","message","Error","String","Log","error","multipleModeControl","_getMultiModeControl","tabsModel","getTabsModel","aIgnoredFieldsForTab","getProperty","content","getSelectedKey","Array","isArray","length","forEach","sProperty","removeSelectOption","path","distinctKeysObject","mainEntityValuePath","currentValuePath","winnerValuePath","pathInContext","_findDistinctKeysInObject","LookUpObject","lookUpObjectMetaPath","key","keyInContext","includes","pathParts","split","push","selectOptionsPropertyNames","getSelectOptionsPropertyNames","selectOptionsObject","propertyName","selectOption","getSelectOption","distinctKey","conflictingPaths","i","replaceAll","filter","sValue","join","updatedSV","massAddSelectOption","updatedSelectionVariant","navPropNames","map","navProp","name","reduce","sv","firstNavPart","selectOptions","tablePropertiesWithoutConflict","filterBarPropertiesWithoutConflict","selectOptionPropertyName","filterBarSelectOption","navigationSelectOptionNames","getEntitySet","getCurrentEntitySet"],"sourceRoot":".","sources":["IntentBasedNavigation.ts"],"sourcesContent":["import { type NavigationProperty } from \"@sap-ux/vocabularies-types\";\nimport Log from \"sap/base/Log\";\nimport type IntentBasedNavigation from \"sap/fe/core/controllerextensions/IntentBasedNavigation\";\nimport type { SelectOption } from \"sap/fe/navigation/SelectionVariant\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\ntype ExternalNavigationInfo = {\n\ttargetInfo: Record<string, unknown>;\n\tselectionVariant: SelectionVariant;\n};\n\ntype FilterInfoOfExternalNav = {\n\tupdatedSelectionVariant: SelectionVariant;\n\tfilterPropertiesWithoutConflict: Record<string, string>;\n};\n\nconst IntentBasedNavigationOverride = {\n\tadaptNavigationContext: function (\n\t\tthis: IntentBasedNavigation,\n\t\tselectionVariant: SelectionVariant,\n\t\ttargetInfo: {\n\t\t\tpropertiesWithoutConflict?: Record<string, string>;\n\t\t}\n\t): void {\n\t\ttry {\n\t\t\tconst view = this.base.getView(),\n\t\t\t\tcontroller = view.getController() as ListReportController,\n\t\t\t\tfilterBar = controller._getFilterBarControl(),\n\t\t\t\tmetaModel = view.getModel().getMetaModel();\n\t\t\tlet preparedSV, updatedValues;\n\t\t\tconst keepNavigationProperties = controller._intentBasedNavigation.keepNavigationPropertiesForNavigation();\n\t\t\t// Adding filter bar values to the navigation does not make sense if no context has been selected.\n\t\t\t// Hence only consider filter bar values when SelectionVariant is not empty\n\t\t\tif (filterBar && !selectionVariant.isEmpty()) {\n\t\t\t\tconst oData = {\n\t\t\t\t\tselectionVariant: controller.getFilterBarSelectionVariant().toJSONObject()\n\t\t\t\t};\n\t\t\t\tlet modifiedOData = {\n\t\t\t\t\tselectionVariant: {}\n\t\t\t\t};\n\t\t\t\tmodifiedOData = this.base\n\t\t\t\t\t.getAppComponent()\n\t\t\t\t\t.getNavigationService()\n\t\t\t\t\t.checkIsPotentiallySensitive(oData) as typeof modifiedOData;\n\n\t\t\t\tlet filterBarSelectionVariant = new SelectionVariant(modifiedOData?.selectionVariant);\n\t\t\t\tconst viewData = view.getViewData(),\n\t\t\t\t\trootPath = viewData.fullContextPath;\n\t\t\t\tif (!keepNavigationProperties) {\n\t\t\t\t\tconst navProperties = controller._intentBasedNavigation.getNavigationPropertiesFromEntityType(metaModel, rootPath);\n\t\t\t\t\tfilterBarSelectionVariant = IntentBasedNavigationOverride.removeNavigationPropertiesFromSV(\n\t\t\t\t\t\tfilterBarSelectionVariant,\n\t\t\t\t\t\tnavProperties\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tpreparedSV = IntentBasedNavigationOverride.prepareFiltersForExternalNavigation(filterBarSelectionVariant, rootPath);\n\t\t\t\tIntentBasedNavigationOverride.handleMultiModeControl(controller, filterBarSelectionVariant);\n\t\t\t\tupdatedValues = IntentBasedNavigationOverride.updateNonConflictingFilterProperties(\n\t\t\t\t\ttargetInfo,\n\t\t\t\t\tfilterBarSelectionVariant,\n\t\t\t\t\tselectionVariant,\n\t\t\t\t\tpreparedSV.filterPropertiesWithoutConflict\n\t\t\t\t);\n\t\t\t\ttargetInfo = updatedValues.targetInfo;\n\t\t\t\tdelete targetInfo.propertiesWithoutConflict;\n\t\t\t}\n\t\t} catch (exception: unknown) {\n\t\t\tconst message = exception instanceof Error ? exception.message : String(exception);\n\t\t\tLog.error(`Failed to process navigation context - ${message}`);\n\t\t}\n\t},\n\t/**\n\t * Handle multi mode control in external navigation.\n\t * @param controller This is listReportController.\n\t * @param filterBarSelectionVariant Selection variant format of filter conditions.\n\t */\n\thandleMultiModeControl: function (controller: ListReportController, filterBarSelectionVariant: SelectionVariant): void {\n\t\tconst multipleModeControl = controller._getMultiModeControl();\n\t\tif (multipleModeControl) {\n\t\t\t// Do we need to exclude Fields (multi tables mode with multi entity sets)?\n\t\t\tconst tabsModel = multipleModeControl.getTabsModel();\n\t\t\tif (tabsModel) {\n\t\t\t\tconst aIgnoredFieldsForTab = tabsModel.getProperty(\n\t\t\t\t\t`/${multipleModeControl.content?.getSelectedKey()}/notApplicable/fields`\n\t\t\t\t);\n\t\t\t\tif (Array.isArray(aIgnoredFieldsForTab) && aIgnoredFieldsForTab.length > 0) {\n\t\t\t\t\taIgnoredFieldsForTab.forEach(function (sProperty: string) {\n\t\t\t\t\t\tfilterBarSelectionVariant.removeSelectOption(sProperty);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t/**\n\t * Prepare SV to be passed to external navigation.\n\t * @param filterBarSelectionVariant Selection variant format of filter conditions.\n\t * @param rootPath Root path of the application.\n\t * @returns Object of prepared SV for external navigation and no conflict filters.\n\t */\n\tprepareFiltersForExternalNavigation(filterBarSelectionVariant: SelectionVariant, rootPath: string): FilterInfoOfExternalNav {\n\t\tlet path;\n\t\tconst distinctKeysObject: Record<string, unknown[]> = {};\n\t\tconst filterPropertiesWithoutConflict: Record<string, string> = {};\n\t\tlet mainEntityValuePath = \"\",\n\t\t\tcurrentValuePath = \"\",\n\t\t\tfullContextPath: string,\n\t\t\twinnerValuePath: string,\n\t\t\tpathInContext: string;\n\t\tfunction _findDistinctKeysInObject(LookUpObject: Record<string, SelectOption[]>): void {\n\t\t\tlet lookUpObjectMetaPath;\n\t\t\tfor (const key in LookUpObject) {\n\t\t\t\tlet keyInContext = key;\n\t\t\t\tif (LookUpObject[keyInContext]) {\n\t\t\t\t\tif (keyInContext.includes(\"/\")) {\n\t\t\t\t\t\tlookUpObjectMetaPath = keyInContext; // \"/SalesOrdermanage/_Item/Material\"\n\t\t\t\t\t\tconst pathParts = keyInContext.split(\"/\");\n\t\t\t\t\t\tkeyInContext = pathParts[pathParts.length - 1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlookUpObjectMetaPath = rootPath;\n\t\t\t\t\t}\n\t\t\t\t\tif (!distinctKeysObject[keyInContext]) {\n\t\t\t\t\t\t// if key is found for the first time then create array\n\t\t\t\t\t\tdistinctKeysObject[keyInContext] = [];\n\t\t\t\t\t}\n\t\t\t\t\t// push path to array\n\t\t\t\t\tdistinctKeysObject[keyInContext].push(lookUpObjectMetaPath);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst selectOptionsPropertyNames = filterBarSelectionVariant.getSelectOptionsPropertyNames();\n\t\tconst selectOptionsObject: Record<string, SelectOption[]> = {};\n\t\tselectOptionsPropertyNames.forEach((propertyName: string) => {\n\t\t\tconst selectOption = filterBarSelectionVariant.getSelectOption(propertyName);\n\t\t\tif (selectOption) {\n\t\t\t\tselectOptionsObject[`${propertyName}`] = selectOption;\n\t\t\t}\n\t\t});\n\t\t_findDistinctKeysInObject(selectOptionsObject);\n\t\tfor (const distinctKey in distinctKeysObject) {\n\t\t\tconst conflictingPaths = distinctKeysObject[distinctKey];\n\t\t\tif (conflictingPaths.length > 1) {\n\t\t\t\t// conflict\n\t\t\t\tfor (let i = 0; i <= conflictingPaths.length - 1; i++) {\n\t\t\t\t\tpath = conflictingPaths[i];\n\t\t\t\t\tif (path === rootPath) {\n\t\t\t\t\t\tfullContextPath = `${rootPath}/${distinctKey}`;\n\t\t\t\t\t\tpathInContext = distinctKey;\n\t\t\t\t\t\tmainEntityValuePath = distinctKey;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpathInContext = path as string;\n\t\t\t\t\t\tfullContextPath = `${rootPath}/${path}`.replaceAll(/\\*/g, \"\");\n\t\t\t\t\t\tcurrentValuePath = path as string;\n\t\t\t\t\t}\n\t\t\t\t\tselectOptionsObject[\n\t\t\t\t\t\tfullContextPath\n\t\t\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t\t\t.filter(function (sValue: string) {\n\t\t\t\t\t\t\t\treturn sValue != \"\";\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.join(\".\")\n\t\t\t\t\t] = selectOptionsObject[pathInContext];\n\t\t\t\t\tdelete selectOptionsObject[path as string];\n\t\t\t\t}\n\t\t\t\twinnerValuePath = mainEntityValuePath || currentValuePath;\n\t\t\t\tselectOptionsObject[distinctKey] = selectOptionsObject[winnerValuePath];\n\t\t\t} else {\n\t\t\t\t// no conflict, add distinct key without adding paths\n\t\t\t\tpath = conflictingPaths[0];\n\t\t\t\tfullContextPath =\n\t\t\t\t\tpath === rootPath ? `${rootPath}/${distinctKey}` : (`${rootPath}/${path}` as unknown as string).replaceAll(\"*\", \"\");\n\t\t\t\tfilterPropertiesWithoutConflict[distinctKey] = fullContextPath\n\t\t\t\t\t.split(\"/\")\n\t\t\t\t\t.filter(function (sValue: string) {\n\t\t\t\t\t\treturn sValue != \"\";\n\t\t\t\t\t})\n\t\t\t\t\t.join(\".\");\n\t\t\t}\n\t\t}\n\t\t//now we loop through object and update existing SV with updated selection options\n\t\tconst updatedSV = new SelectionVariant();\n\t\tfor (const sProperty in selectOptionsObject) {\n\t\t\tupdatedSV.massAddSelectOption(sProperty, selectOptionsObject[sProperty]);\n\t\t}\n\t\treturn {\n\t\t\tupdatedSelectionVariant: updatedSV,\n\t\t\tfilterPropertiesWithoutConflict: filterPropertiesWithoutConflict\n\t\t};\n\t},\n\n\t/**\n\t * Remove navigation properties from SV.\n\t * @param selectionVariant Selection variant.\n\t * @param navProperties Navigation properties.\n\t * @returns Object of prepared SV for external navigation and no conflict filters.\n\t */\n\tremoveNavigationPropertiesFromSV(selectionVariant: SelectionVariant, navProperties: NavigationProperty[]): SelectionVariant {\n\t\tconst navPropNames = navProperties ? navProperties.map((navProp: NavigationProperty) => navProp.name) : [];\n\t\tconst selectOptionsPropertyNames = selectionVariant.getSelectOptionsPropertyNames();\n\t\treturn selectOptionsPropertyNames.reduce((sv: SelectionVariant, propertyName: string) => {\n\t\t\tif (navPropNames.length > 0) {\n\t\t\t\tconst firstNavPart = propertyName.split(\".\")[0];\n\t\t\t\tif (firstNavPart && navPropNames.includes(firstNavPart)) {\n\t\t\t\t\treturn sv;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst selectOptions = selectionVariant.getSelectOption(propertyName);\n\t\t\tif (selectOptions) {\n\t\t\t\tsv.massAddSelectOption(propertyName, selectOptions);\n\t\t\t}\n\n\t\t\treturn sv;\n\t\t}, new SelectionVariant());\n\t},\n\n\t/**\n\t * Method to add non conflicting filter conditions to SV.\n\t * @param targetInfo Target context\n\t * @param targetInfo.propertiesWithoutConflict Table properties without conflict\n\t * @param filterBarSelectionVariant Conditions from filterbar has been converted to SV and sent here\n\t * @param selectionVariant SV which is finally formed after all the calculations\n\t * @param filterPropertiesWithoutConflict Filter bar conditions without conflict\n\t * @returns The updated targetInfo and selection variant\n\t */\n\tupdateNonConflictingFilterProperties: function (\n\t\ttargetInfo: {\n\t\t\tpropertiesWithoutConflict?: Record<string, string>;\n\t\t},\n\t\tfilterBarSelectionVariant: SelectionVariant,\n\t\tselectionVariant: SelectionVariant,\n\t\tfilterPropertiesWithoutConflict?: Record<string, string>\n\t): ExternalNavigationInfo {\n\t\tconst tablePropertiesWithoutConflict = targetInfo.propertiesWithoutConflict;\n\t\tconst filterBarPropertiesWithoutConflict = filterPropertiesWithoutConflict;\n\t\tfilterBarSelectionVariant.getSelectOptionsPropertyNames().forEach(function (selectOptionPropertyName) {\n\t\t\tconst filterBarSelectOption = filterBarSelectionVariant.getSelectOption(selectOptionPropertyName);\n\t\t\tif (filterBarSelectOption && filterBarSelectOption.length) {\n\t\t\t\tconst navigationSelectOptionNames = selectionVariant.getSelectOptionsPropertyNames();\n\t\t\t\tif (!navigationSelectOptionNames.includes(selectOptionPropertyName)) {\n\t\t\t\t\t// First add all the filterbar SV if they don't exist in navigation SV\n\t\t\t\t\tselectionVariant.massAddSelectOption(selectOptionPropertyName, filterBarSelectOption);\n\t\t\t\t} else {\n\t\t\t\t\t// Now if navigation path is present add it here\n\t\t\t\t\t// Select option paths from table (with navigation path added to the string name) that don't create conflicts with filter bar select option names\n\t\t\t\t\tif (tablePropertiesWithoutConflict && selectOptionPropertyName in tablePropertiesWithoutConflict) {\n\t\t\t\t\t\tselectionVariant.massAddSelectOption(\n\t\t\t\t\t\t\ttablePropertiesWithoutConflict[selectOptionPropertyName],\n\t\t\t\t\t\t\tfilterBarSelectOption\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif (filterBarPropertiesWithoutConflict && selectOptionPropertyName in filterBarPropertiesWithoutConflict) {\n\t\t\t\t\t\tselectionVariant.massAddSelectOption(\n\t\t\t\t\t\t\tfilterBarPropertiesWithoutConflict[selectOptionPropertyName],\n\t\t\t\t\t\t\tfilterBarSelectOption\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn { targetInfo, selectionVariant };\n\t},\n\tgetEntitySet: function (this: IntentBasedNavigation): string {\n\t\treturn (this.base as ListReportController).getCurrentEntitySet();\n\t}\n};\n\nexport default IntentBasedNavigationOverride;\n"],"mappings":"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","ignoreList":[],"file":"IntentBasedNavigation-dbg.js"}