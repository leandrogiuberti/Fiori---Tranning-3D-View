{"version":3,"file":"SideEffects.js","names":["isSideEffectsRequestingTable","controller","headerContext","eventName","sideEffectsService","CommonUtils","getAppComponent","getView","getSideEffectsService","convertedMetaModel","getConvertedMetaModel","metaPath","getModel","getMetaModel","getMetaContext","getPath","tableEntityType","getInvolvedDataModelObjects","targetEntityType","getODataSideEffectsFromContextEvent","some","sideEffects","targetEntities","targetEntity","$NavigationPropertyPath","startsWith","resolvePath","target","entityType","SideEffectsOverride","getDataRefreshText","resourceModel","getResourceModel","this","getText","requestSideEffectsForEvent","path","getController","table","_getTable","dataListBinding","getRowBinding","tableHeaderContext","getHeaderContext","contexts","getCurrentContexts","context","find","isDataPathRelevant","findIndex"],"sources":["./SideEffects.ts"],"sourcesContent":["import type { EntitySet } from \"@sap-ux/vocabularies-types\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport type SideEffectsControllerExtension from \"sap/fe/core/controllerextensions/SideEffects\";\nimport { getInvolvedDataModelObjects } from \"sap/fe/core/converters/MetaModelConverter\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type ODataV4Context from \"sap/ui/model/odata/v4/Context\";\n\n/**\n * Checks if the SideEffects triggers a refresh of the table.\n * The target entity must be an absolute path and point to the same entity type as the table.\n * @param controller The ListReportController\n * @param headerContext The header context of the table\n * @param eventName The event name\n * @returns True if the SideEffects event target the table; otherwise, returns false\n */\nfunction isSideEffectsRequestingTable(controller: ListReportController, headerContext: ODataV4Context, eventName: string): boolean {\n\tconst sideEffectsService = CommonUtils.getAppComponent(controller.getView()).getSideEffectsService();\n\tconst convertedMetaModel = sideEffectsService.getConvertedMetaModel();\n\tconst metaPath = headerContext.getModel().getMetaModel().getMetaContext(headerContext.getPath());\n\tconst tableEntityType = getInvolvedDataModelObjects(metaPath).targetEntityType;\n\treturn sideEffectsService.getODataSideEffectsFromContextEvent(headerContext, eventName).some((sideEffects) => {\n\t\treturn sideEffects.targetEntities.some(\n\t\t\t(targetEntity) =>\n\t\t\t\ttargetEntity.$NavigationPropertyPath.startsWith(\"/\") &&\n\t\t\t\tconvertedMetaModel.resolvePath<EntitySet | undefined>(targetEntity.$NavigationPropertyPath)?.target?.entityType ===\n\t\t\t\t\ttableEntityType\n\t\t);\n\t});\n}\nconst SideEffectsOverride = {\n\t/**\n\t * Get text to be shown for user to indicate data refresh.\n\t *\n\t * According to UX there should be another text in the LR without referencing one item.\n\t * @returns Text to be shown to the user in case of a data refresh\n\t */\n\tgetDataRefreshText: function (this: SideEffectsControllerExtension): string {\n\t\tconst resourceModel = getResourceModel(this.getView());\n\t\treturn resourceModel.getText(\"C_SERVER_EVENTS_NEW_DATA\");\n\t},\n\n\t/**\n\t * Requests the SideEffects for a sideEffect event.\n\t *\n\t * Search the context in the LR table and trigger the side effect for this context if found.\n\t * @param eventName SideEffects event which was triggered\n\t * @param path The path for which this event was triggered\n\t * @returns Promise on SideEffects request\n\t */\n\tasync requestSideEffectsForEvent(this: SideEffectsControllerExtension, eventName: string, path: string): Promise<undefined> {\n\t\tconst controller = this.getView().getController() as ListReportController;\n\t\tconst table = (this.getView().getController() as ListReportController)._getTable();\n\t\tconst dataListBinding = table?.getRowBinding();\n\t\tif (!dataListBinding) {\n\t\t\treturn;\n\t\t}\n\t\tconst tableHeaderContext = dataListBinding.getHeaderContext();\n\t\tif (tableHeaderContext && isSideEffectsRequestingTable(controller, tableHeaderContext, eventName)) {\n\t\t\treturn CommonUtils.getAppComponent(this.getView())\n\t\t\t\t.getSideEffectsService()\n\t\t\t\t.requestSideEffectsForEvent(eventName, tableHeaderContext);\n\t\t}\n\t\tconst contexts = dataListBinding.getCurrentContexts() ?? [];\n\t\tconst context = contexts.find((context: ODataV4Context) => context.getPath() === path);\n\t\tif (context) {\n\t\t\t// use the default implementation from the SideEffects Service\n\t\t\treturn CommonUtils.getAppComponent(this.getView()).getSideEffectsService().requestSideEffectsForEvent(eventName, context);\n\t\t}\n\t},\n\t/**\n\t * Overrides the isDataPathRelevant with LR specific logic to check the current table's contexts.\n\t * @param path The path to be checked\n\t * @param eventName The SideEffects event that is triggered\n\t * @returns True if the data path is shown in table\n\t */\n\tisDataPathRelevant(this: SideEffectsControllerExtension, path: string, eventName: string): boolean {\n\t\tconst controller = this.getView().getController() as ListReportController;\n\t\tconst dataListBinding = controller._getTable()?.getRowBinding();\n\t\tif (!dataListBinding) {\n\t\t\treturn false;\n\t\t}\n\t\tconst tableHeaderContext = dataListBinding.getHeaderContext();\n\t\t// Absolute path to refresh the table\n\t\tif (tableHeaderContext && isSideEffectsRequestingTable(controller, tableHeaderContext, eventName)) {\n\t\t\treturn true;\n\t\t}\n\t\tconst contexts = dataListBinding.getCurrentContexts() ?? [];\n\t\treturn contexts.findIndex((context: ODataV4Context) => context.getPath() === path) > -1;\n\t}\n};\n\nexport default SideEffectsOverride;\n"],"mappings":";;;;0NAgBA,SAASA,EAA6BC,EAAkCC,EAA+BC,GACtG,MAAMC,EAAqBC,EAAYC,gBAAgBL,EAAWM,WAAWC,wBAC7E,MAAMC,EAAqBL,EAAmBM,wBAC9C,MAAMC,EAAWT,EAAcU,WAAWC,eAAeC,eAAeZ,EAAca,WACtF,MAAMC,EAAkBC,EAA4BN,GAAUO,iBAC9D,OAAOd,EAAmBe,oCAAoCjB,EAAeC,GAAWiB,KAAMC,GACtFA,EAAYC,eAAeF,KAChCG,GACAA,EAAaC,wBAAwBC,WAAW,MAChDhB,EAAmBiB,YAAmCH,EAAaC,0BAA0BG,QAAQC,aACpGZ,GAGL,CACA,MAAMa,EAAsB,CAO3BC,mBAAoB,WACnB,MAAMC,EAAgBC,EAAiBC,KAAK1B,WAC5C,OAAOwB,EAAcG,QAAQ,2BAC9B,EAUA,gCAAMC,CAAiEhC,EAAmBiC,GACzF,MAAMnC,EAAagC,KAAK1B,UAAU8B,gBAClC,MAAMC,EAASL,KAAK1B,UAAU8B,gBAAyCE,YACvE,MAAMC,EAAkBF,GAAOG,gBAC/B,IAAKD,EAAiB,CACrB,MACD,CACA,MAAME,EAAqBF,EAAgBG,mBAC3C,GAAID,GAAsB1C,EAA6BC,EAAYyC,EAAoBvC,GAAY,CAClG,OAAOE,EAAYC,gBAAgB2B,KAAK1B,WACtCC,wBACA2B,2BAA2BhC,EAAWuC,EACzC,CACA,MAAME,EAAWJ,EAAgBK,sBAAwB,GACzD,MAAMC,EAAUF,EAASG,KAAMD,GAA4BA,EAAQ/B,YAAcqB,GACjF,GAAIU,EAAS,CAEZ,OAAOzC,EAAYC,gBAAgB2B,KAAK1B,WAAWC,wBAAwB2B,2BAA2BhC,EAAW2C,EAClH,CACD,EAOAE,mBAAyDZ,EAAcjC,GACtE,MAAMF,EAAagC,KAAK1B,UAAU8B,gBAClC,MAAMG,EAAkBvC,EAAWsC,aAAaE,gBAChD,IAAKD,EAAiB,CACrB,OAAO,KACR,CACA,MAAME,EAAqBF,EAAgBG,mBAE3C,GAAID,GAAsB1C,EAA6BC,EAAYyC,EAAoBvC,GAAY,CAClG,OAAO,IACR,CACA,MAAMyC,EAAWJ,EAAgBK,sBAAwB,GACzD,OAAOD,EAASK,UAAWH,GAA4BA,EAAQ/B,YAAcqB,IAAS,CACvF,GACC,OAEaP,CAAmB","ignoreList":[]}