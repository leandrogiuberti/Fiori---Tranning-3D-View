<mvc:View
	xmlns="sap.m"
	xmlns:mvc="sap.ui.core.mvc"
	xmlns:f="sap.f"
	xmlns:macro="sap.fe.macros"
	xmlns:contentSwitcher="sap.fe.macros.contentSwitcher"
	xmlns:macroAI="sap.fe.macros.ai"
	xmlns:macroInternal="sap.fe.macros.internal"
	xmlns:control="sap.fe.core.controls"
	xmlns:core="sap.ui.core"
	xmlns:fragments="sap.fe.templates.ListReport.view.fragments"
	xmlns:l="sap.ui.layout"
	xmlns:fpm="sap.fe.macros.fpm"
	xmlns:dt="sap.ui.dt"
	xmlns:kpiTag="sap.fe.macros.kpiTag"
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	xmlns:filterBar="sap.fe.macros.filterBar"
	xmlns:macroShare="sap.fe.macros.share"
	xmlns:macroMessages="sap.fe.macros.messages"
	xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
	template:require="{
		ID: 'sap/fe/core/helpers/StableIdHelper',
		COMMON: 'sap/fe/macros/CommonHelper',
		FILTER: 'sap/fe/macros/filterBar/FilterHelper',
		LR: 'sap/fe/templates/ListReport/ListReportTemplating',
		UI: 'sap/fe/core/templating/UIFormatters'
	}"
	controllerName="{converterContext>controllerName}"
>
	<template:with path="converterContext>mainEntitySet" var="entitySet">
		<template:with path="converterContext>mainEntityType" var="entityType">
			<f:DynamicPage
				id="fe::ListReport"
				dt:designtime="{converterContext>designtime}"
				stickySubheaderProvider="{converterContext>stickySubheaderProvider}"
				showFooter="false"
				busy="{ui>/busy}"
				busyIndicatorDelay="0"
				class="{= !${converterContext>hasMultiVisualizations} &amp;&amp; ${converterContext>views}.length > 1 ? 'sapUiNoContentPadding' : 'sapUiResponsiveContentPadding'}"
			>
				<f:dependents>
					<template:if test="{converterContext>headerActions}">
						<template:repeat list="{converterContext>headerActions}" var="headerAction">
							<template:if test="{headerAction>command}">
								<control:CommandExecution
									core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
									execute="{= COMMON.buildActionWrapper(${headerAction>})}"
									visible="{headerAction>visible}"
									enabled="{headerAction>enabled}"
									command="{headerAction>command}"
								/>
							</template:if>
						</template:repeat>
					</template:if>
					<template:if test="{= !${converterContext>hideFilterBar} &amp;&amp; !${viewData>/liveMode} }">
						<template:then>
							<control:CommandExecution execute=".handlers.onFilterSearch" command="FE_FilterSearch" />
						</template:then>
					</template:if>
					<template:if test="{viewData>/isInlineEditEnabled}">
						<control:CommandExecution
							execute=".handlers.onInlineEditSave"
							command="Save"
							visible="{= ${ui>/isInlineEditActive} === true}"
						/>
					</template:if>
				</f:dependents>
				<f:title>
					<f:DynamicPageTitle id="fe::DynamicPageTitle" stateChange=".handlers.onDynamicPageTitleStateChanged">
						<f:heading>
							<template:with path="converterContext>kpiDefinitions" var="definitions">
								<template:if test="{definitions>length}">
									<template:then>
										<l:HorizontalLayout class="sapUiNoContentPadding sapUiNoMarginTop sapUiNoMarginBottom">
											<core:Fragment
												fragmentName="sap.fe.templates.ListReport.view.fragments.VariantManagement"
												type="XML"
											/>
											<template:repeat list="{converterContext>kpiDefinitions}" var="kpi">
												<template:if test="{= ${kpi>type} === 'Custom'}">
													<template:then>
														<fpm:CustomFragment
															id="{kpi>key}"
															fragmentName="{kpi>template}"
															contextPath="{contextPath>}"
														/>
													</template:then>
													<template:else>
														<template:with path="kpi>datapoint" var="datapoint">
															<kpiTag:AnalyticalKPITag
																id="{kpi>id}"
																metaPath="{datapoint>annotationPath}"
																kpiModelName="kpiModel"
																hasUnit="{= ${datapoint>unit} !== undefined}"
															/>
														</template:with>
													</template:else>
												</template:if>
											</template:repeat>
										</l:HorizontalLayout>
									</template:then>
									<template:else>
										<core:Fragment
											fragmentName="sap.fe.templates.ListReport.view.fragments.VariantManagement"
											type="XML"
										/>
									</template:else>
								</template:if>
							</template:with>
						</f:heading>
						<f:snappedContent>
							<template:if test="{= !!${converterContext>collapsedHeaderFragment} }">
								<core:Fragment fragmentName="{converterContext>collapsedHeaderFragment}" type="XML" />
							</template:if>
							<template:if test="{= !${viewData>/useHiddenFilterBar} &amp;&amp; !${viewData>/hideFilterBar} }">
								<filterBar:FilterBarSummary filterBar="{= ID.generate([${converterContext>filterBarId},'FilterBar']) }" />
							</template:if>
						</f:snappedContent>
						<f:actions>
							<ToolbarSpacer />
							<template:if test="{converterContext>headerActions}">
								<template:repeat list="{converterContext>headerActions}" var="headerAction">
									<template:if test="{= ${headerAction>type} !== 'Separator' }">
										<template:then>
											<Button
												core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
												id="{= ID.generate(['fe',${headerAction>id}])}"
												text="{headerAction>text}"
												press="{= ${headerAction>command} ? ('cmd:' + ${headerAction>command}) : COMMON.buildActionWrapper(${headerAction>})}"
												type="Ghost"
												visible="{headerAction>visible}"
												enabled="{headerAction>enabled}"
												icon="{= ${headerAction>isAIOperation} === true ? COMMON.getAIIcon() : undefined}"
											>
												<layoutData>
													<OverflowToolbarLayoutData
														priority="{headerAction>priority}"
														group="{headerAction>group}"
													/>
												</layoutData>
											</Button>
										</template:then>
										<template:else>
											<ToolbarSeparator>
												<layoutData>
													<OverflowToolbarLayoutData group="{headerAction>group}" />
												</layoutData>
											</ToolbarSeparator>
										</template:else>
									</template:if>
								</template:repeat>
							</template:if>
							<template:if
								test="{= !${converterContext>hideFilterBar} &amp;&amp; (${converterContext>/filterLayout} === 'compactvisual' || ${converterContext>easyFilterEnabled}) }"
							>
								<contentSwitcher:ContentSwitcher
									id="{= ID.generate([ ${converterContext>filterBarId}, 'LayoutToggle']) }"
									selectedKey="{converterContext>/filterInitialLayout}"
								>
									<contentSwitcher:ContentSwitcherItem
										text="{sap.fe.i18n>M_EASY_FILTER_FILTER_MODE_CLASSIC}"
										icon="sap-icon://filter-fields"
										key="compact"
										controlToSwitch="{converterContext>filterBarId}::FilterBar"
									/>
									<template:if test="{= ${converterContext>/filterLayout} === 'compactvisual' }">
										<contentSwitcher:ContentSwitcherItem
											text="{sap.fe.i18n>T_SEGMENTED_BUTTON_TOOLTIP_VISUAL}"
											icon="sap-icon://filter-analytics"
											key="visual"
											controlToSwitch="{converterContext>filterBarId}::FilterBar"
										/>
									</template:if>
									<template:if test="{converterContext>easyFilterEnabled}">
										<contentSwitcher:ContentSwitcherItem
											text="{sap.fe.i18n>M_EASY_FILTER_FILTER_MODE_AI}"
											controlToSwitch="fe::EasyFilterBar"
											key="ai"
											icon="sap-icon://ai"
										/>
									</template:if>
								</contentSwitcher:ContentSwitcher>
							</template:if>
							<macro:Share
								id="fe::Share"
								visible="{= ${fclhelper>/} ? ${fclhelper>/showShareIcon} : true }"
								priority="{viewData>/shareOverflowPriority}"
							>
								<macro:msTeamsOptions>
									<macroShare:MsTeamsOptions enableCard="false" />
								</macro:msTeamsOptions>
								<macro:shareOptions showCollaborationManager="true" />
							</macro:Share>
						</f:actions>
						<template:if test="{converterContext>useHiddenFilterBar}">
							<template:then>
								<f:dependents>
									<template:with path="converterContext>filterBar" var="filterBarContext">
										<macroInternal:FilterBar
											id="{converterContext>filterBarId}"
											_applyIdToContent="true"
											metaPath="{entityType>}"
											variantBackreference="{= LR.getVariantBackReference(${viewData>}, ${converterContext>} )}"
											selectionFields="{filterBarContext>selectionFields}"
											internalFilterChanged=".handlers.onFiltersChanged"
											filterConditions="{parts:[{path:'converterContext>filterConditions'}, {path:'entitySet>'}, {path:'viewData>'}, {path:'filterBarContext>showDraftEditStatus'}], formatter: 'FILTER.getFilterConditions'}"
											internalSearch=".handlers.onSearch"
											hideBasicSearch="{filterBarContext>hideBasicSearch}"
											liveMode="{viewData>/liveMode}"
											showAdaptFiltersButton="true"
											p13nMode="Item,Value"
											useSemanticDateRange="{converterContext>useSemanticDateRange}"
											suspendSelection="true"
											toggleControlId="{= ${converterContext>/filterLayout} === 'compactvisual' || ${converterContext>easyFilterEnabled} ? ID.generate([ ${converterContext>filterBarId}, 'LayoutToggle']) : undefined }"
											initialLayout="{= ${converterContext>/filterLayout} === 'compactvisual' ? ${converterContext>/filterInitialLayout} : undefined }"
											disableDraftEditStateFilter="{filterBarContext>disableDraftEditStateFilter}"
										/>
									</template:with>
								</f:dependents>
							</template:then>
						</template:if>
						<f:breadcrumbs>
							<template:if test="{viewData>/breadcrumbsHierarchyMode}">
								<template:then>
									<macro:Breadcrumbs
										visible="{= UI.getVisibleExpressionForBreadcrumbs(${viewData>/}) }"
										hierarchyMode="{viewData>/breadcrumbsHierarchyMode}"
									/>
								</template:then>
							</template:if>
						</f:breadcrumbs>
					</f:DynamicPageTitle>
				</f:title>
				<template:if test="{= !${converterContext>hideFilterBar} }">
					<f:header>
						<f:DynamicPageHeader pinnable="{converterContext>showPinnableToggle}">
							<VBox>
								<template:if test="{= !!${converterContext>expandedHeaderFragment} }">
									<template:then>
										<core:Fragment fragmentName="{converterContext>expandedHeaderFragment}" type="XML" />
									</template:then>
								</template:if>
								<template:with path="converterContext>filterBar" var="filterBarContext">
									<macroInternal:FilterBar
										id="{converterContext>filterBarId}"
										_applyIdToContent="true"
										metaPath="{entityType>}"
										variantBackreference="{= LR.getVariantBackReference(${viewData>}, ${converterContext>} )}"
										selectionFields="{filterBarContext>selectionFields}"
										internalFilterChanged=".handlers.onFiltersChanged"
										filterConditions="{parts:[{path:'converterContext>filterConditions'}, {path:'entitySet>'}, {path:'viewData>'}, {path:'filterBarContext>showDraftEditStatus'}], formatter: 'FILTER.getFilterConditions'}"
										internalSearch=".handlers.onSearch"
										hideBasicSearch="{filterBarContext>hideBasicSearch}"
										showClearButton="{filterBarContext>showClearButton}"
										afterClear=".onAfterClear"
										liveMode="{viewData>/liveMode}"
										showAdaptFiltersButton="true"
										p13nMode="Item,Value"
										useSemanticDateRange="{converterContext>useSemanticDateRange}"
										suspendSelection="true"
										toggleControlId="{= ${converterContext>/filterLayout} === 'compactvisual' || ${converterContext>easyFilterEnabled} ? ID.generate([ ${converterContext>filterBarId}, 'LayoutToggle']) : undefined }"
										initialLayout="{= ${converterContext>/filterLayout} === 'compactvisual' ? ${converterContext>/filterInitialLayout} : undefined }"
										disableDraftEditStateFilter="{filterBarContext>disableDraftEditStateFilter}"
									/>
								</template:with>
								<template:if test="{converterContext>easyFilterEnabled}">
									<template:then>
										<macroAI:EasyFilterBar
											id="fe::EasyFilterBar"
											contextPath="{entityType>}"
											filterBar="{converterContext>filterBarId}"
											contentSwitcher="{= ID.generate([ ${converterContext>filterBarId}, 'LayoutToggle']) }"
											contentSwitcherKey="ai"
											visible="false"
										/>
									</template:then>
								</template:if>
							</VBox>
						</f:DynamicPageHeader>
					</f:header>
				</template:if>
				<f:content>
					<template:if test="{= ${converterContext>views}.length > 0}">
						<template:if test="{converterContext>multiViewsControl}">
							<template:then>
								<fragments:MultipleMode />
							</template:then>
							<template:elseif
								test="{= ${converterContext>views}.length === 1 &amp;&amp; !${converterContext>hasMultiVisualizations} }"
							>
								<template:with path="converterContext>views/0/presentation" var="presentationContext">
									<core:Fragment
										fragmentName="sap.fe.templates.ListReport.view.fragments.CollectionVisualization"
										type="XML"
									/>
								</template:with>
							</template:elseif>
							<template:else>
								<core:Fragment
									fragmentName="sap.fe.templates.ListReport.view.fragments.CollectionVisualization"
									type="XML"
								/>
							</template:else>
						</template:if>
					</template:if>
				</f:content>
				<f:footer>
					<template:if test="{viewData>/isInlineEditEnabled}">
						<OverflowToolbar>
							<core:InvisibleText
								id="fe::MessageButton::AriaText"
								text="{sap.fe.i18n>C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_BUTTON_ARIA_TEXT}"
							/>
							<macroMessages:MessageButton
								id="fe::MessageButton"
								ariaLabelledBy="fe::MessageButton::AriaText"
								type="Emphasized"
								ariaHasPopup="Dialog"
							/>
							<ToolbarSpacer />
						</OverflowToolbar>
					</template:if>
				</f:footer>
			</f:DynamicPage>
		</template:with>
	</template:with>
</mvc:View>
