{"version":3,"file":"LRMessageStrip.js","names":["LRMessageStrip","this","customMessageInfo","messageManagerDataBinding","Messaging","getMessageModel","bindList","multiModeControlMessagesMap","_exports","_proto","prototype","getCustomMessageInfo","destroy","detachChange","_eventHandlerCustomMessage","_getMessagesWithSameTargetThanCustomMessage","getData","filter","msg","getTargets","currentMessage","aMessageWithSameTargetThanCustomMessage","isCustomMessageInMessageManager","find","length","removeMessages","addMessages","createCustomMessage","event","oData","message","table","skipMessageManagerUpdate","rowBindingPath","getRowBinding","getPath","customMessageMap","getId","attachEventOnce","onClose","getDataStateIndicator","detachEvent","processor","getModel","oMessage","Message","type","target","persistent","attachChange","attachDataStateIndicatorCloseEvent","fnOnClose","onSelectMultipleModeControl","controller","_getTable","showCustomMessage","tabKey","_tabKey","Array","isArray","isMultiMode","_isMultiMode","multipleModeControl","_getMultiModeControl","attachEvent","getAllInnerControls","forEach","innerControl","index","isA","includes","toString","getContent","getSelectedInnerControl"],"sources":["./LRMessageStrip.ts"],"sourcesContent":["import type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type { InnerControlType } from \"sap/fe/templates/ListReport/controls/MultipleModeControl\";\nimport type Event from \"sap/ui/base/Event\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport type MessageType from \"sap/ui/core/message/MessageType\";\nimport type { default as MDCTable } from \"sap/ui/mdc/Table\";\nimport type ListBinding from \"sap/ui/model/ListBinding\";\nimport type MessageModel from \"sap/ui/model/message/MessageModel\";\n\nexport type LRCustomMessage = {\n\tmessage: string;\n\ttype?: MessageType;\n\tonClose?: Function;\n};\n\nexport class LRMessageStrip {\n\tcustomMessageInfo!: {\n\t\tmessageManagerDataBinding: ListBinding;\n\t\tcurrentMessage?: Message;\n\t\tmultiModeControlMessagesMap: { [key: string]: LRCustomMessage | undefined };\n\t};\n\n\tconstructor() {\n\t\tthis.customMessageInfo = {\n\t\t\tmessageManagerDataBinding: Messaging.getMessageModel().bindList(\"/\"),\n\t\t\tmultiModeControlMessagesMap: {}\n\t\t};\n\t}\n\n\tgetCustomMessageInfo(): {\n\t\tmessageManagerDataBinding: ListBinding;\n\t\tcurrentMessage?: Message;\n\t\tmultiModeControlMessagesMap: { [key: string]: LRCustomMessage | undefined };\n\t} {\n\t\treturn this.customMessageInfo;\n\t}\n\n\tdestroy(): void {\n\t\tthis.customMessageInfo.messageManagerDataBinding.detachChange(this._eventHandlerCustomMessage, this);\n\t}\n\n\t_getMessagesWithSameTargetThanCustomMessage(): MessageModel[] {\n\t\treturn Messaging.getMessageModel()\n\t\t\t.getData()\n\t\t\t.filter(\n\t\t\t\t(msg: Message) =>\n\t\t\t\t\tmsg.getTargets()[0] === this.customMessageInfo.currentMessage?.getTargets()[0] &&\n\t\t\t\t\tmsg !== this.customMessageInfo.currentMessage\n\t\t\t);\n\t}\n\n\t/**\n\t * MessageManager Event Handler responsible to add or remove the current customMessage.\n\t *\n\t */\n\t_eventHandlerCustomMessage(): void {\n\t\tif (this.customMessageInfo.currentMessage) {\n\t\t\tconst aMessageWithSameTargetThanCustomMessage = this._getMessagesWithSameTargetThanCustomMessage();\n\t\t\tconst isCustomMessageInMessageManager = !!Messaging.getMessageModel()\n\t\t\t\t.getData()\n\t\t\t\t.find((msg: Message) => msg === this.customMessageInfo.currentMessage);\n\n\t\t\tif (aMessageWithSameTargetThanCustomMessage.length > 0 && isCustomMessageInMessageManager) {\n\t\t\t\t//if there are other messages with the same message on the MessageManager and the customMessage\n\t\t\t\t//then we need to remove the customeMessage from the MessageManager\n\t\t\t\tMessaging.removeMessages([this.customMessageInfo?.currentMessage]);\n\t\t\t} else if (aMessageWithSameTargetThanCustomMessage.length === 0 && !isCustomMessageInMessageManager) {\n\t\t\t\tMessaging.addMessages([this.customMessageInfo.currentMessage]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This function manages the lifecycle of the custom message (populates the customMessageInfo object, attaches an event to the message manager and inserts a message).\n\t * @param event Event object (optional).\n\t * @param oData Parameters\n\t * @param oData.message The LRCustomMessage to be used to generate the message object\n\t * @param oData.table The table targeted by the message\n\t * @param oData.skipMessageManagerUpdate Should skip to insert the message in the MessageManager\n\t */\n\tcreateCustomMessage(\n\t\tevent: Event | null,\n\t\toData: { message: LRCustomMessage | undefined; table: MDCTable; skipMessageManagerUpdate?: boolean }\n\t): void {\n\t\tconst message = oData.message;\n\t\tconst table = oData.table;\n\t\tconst skipMessageManagerUpdate = oData.skipMessageManagerUpdate;\n\t\tconst rowBindingPath = table.getRowBinding()?.getPath();\n\t\tconst customMessageMap = this.customMessageInfo.multiModeControlMessagesMap;\n\t\tcustomMessageMap[table.getId()] = message;\n\t\tif (!rowBindingPath) {\n\t\t\ttable.attachEventOnce(\"bindingUpdated\", oData, this.createCustomMessage, this);\n\t\t\treturn;\n\t\t}\n\n\t\tif (customMessageMap[table.getId()]?.onClose) {\n\t\t\ttable.getDataStateIndicator().detachEvent(\"close\", customMessageMap[table.getId()]?.onClose as Function, this);\n\t\t}\n\n\t\tconst processor = table.getModel();\n\t\tconst oMessage = message\n\t\t\t? new Message({\n\t\t\t\t\tmessage: message.message,\n\t\t\t\t\ttype: message.type,\n\t\t\t\t\ttarget: [rowBindingPath],\n\t\t\t\t\tpersistent: false,\n\t\t\t\t\tprocessor\n\t\t\t  })\n\t\t\t: null;\n\n\t\tthis.customMessageInfo.messageManagerDataBinding.detachChange(this._eventHandlerCustomMessage, this);\n\t\tif (!skipMessageManagerUpdate) {\n\t\t\tif (this.customMessageInfo.currentMessage) {\n\t\t\t\tMessaging.removeMessages([this.customMessageInfo.currentMessage]);\n\t\t\t}\n\t\t\tif (oMessage) {\n\t\t\t\tthis.customMessageInfo.currentMessage = oMessage;\n\t\t\t} else {\n\t\t\t\tdelete this.customMessageInfo.currentMessage;\n\t\t\t}\n\t\t\tif (oMessage && this._getMessagesWithSameTargetThanCustomMessage().length === 0) {\n\t\t\t\tMessaging.addMessages([oMessage]);\n\t\t\t}\n\t\t}\n\t\tthis.customMessageInfo.messageManagerDataBinding.attachChange(this._eventHandlerCustomMessage, this);\n\n\t\tthis.attachDataStateIndicatorCloseEvent(table, customMessageMap, message?.onClose);\n\t}\n\n\t/**\n\t * This function attaches the onClose event function to the dataStateIndicator.\n\t * @param table The table associated with the dataStateIndicator\n\t * @param customMessageMap The CustomMessageMap object\n\t * @param fnOnClose A function to be attached to the \"close\" event\n\t */\n\tattachDataStateIndicatorCloseEvent(\n\t\ttable: MDCTable,\n\t\tcustomMessageMap: { [key: string]: LRCustomMessage | undefined },\n\t\tfnOnClose?: Function\n\t): void {\n\t\tif (fnOnClose) {\n\t\t\ttable.getDataStateIndicator().attachEventOnce(\"close\", fnOnClose, this);\n\t\t}\n\t\t//When closing the the messageStrip, the associated message is removed\n\t\ttable.getDataStateIndicator().attachEventOnce(\"close\", () => {\n\t\t\tdelete customMessageMap[table.getId()];\n\t\t});\n\t}\n\n\t/**\n\t * MultipleModeControl Event handler responsible for displaying the correct custom message when a specific tab is selected.\n\t *\n\t */\n\n\tonSelectMultipleModeControl(event: Event, controller: ListReportController): void {\n\t\tconst table = controller._getTable() as MDCTable;\n\t\tconst message = this.customMessageInfo.multiModeControlMessagesMap[table.getId()];\n\t\tthis.createCustomMessage(null, { message, table });\n\t}\n\n\t/**\n\t * Provide an option for showing a custom message in the message bar above the list report table.\n\t * @param [message] Custom message along with the message type to be set on the table.\n\t * @param [message.message] Message string to be displayed.\n\t * @param [message.type] Indicates the type of message.\n\t * @param [controller] Controller of the current view.\n\t * @param [tabKey] The entitySet identifying the table in which to display the custom message.\n\t * @param [onClose] A function that is called when the user closes the message bar.\n\t */\n\tshowCustomMessage(\n\t\tmessage: LRCustomMessage | undefined,\n\t\tcontroller: ListReportController,\n\t\ttabKey?: string[] | string | null,\n\t\tonClose?: Function\n\t): void {\n\t\tconst _tabKey = Array.isArray(tabKey) ? tabKey : [tabKey];\n\t\tconst isMultiMode = controller._isMultiMode();\n\t\tlet table: MDCTable;\n\t\tif (message) {\n\t\t\tmessage.onClose = onClose;\n\t\t}\n\t\tif (isMultiMode) {\n\t\t\tconst multipleModeControl = controller._getMultiModeControl();\n\t\t\t//we fisrt need to detach the select event to prevent multiple attachments.\n\t\t\tmultipleModeControl.detachEvent(\"select\", this.onSelectMultipleModeControl, this);\n\t\t\tmultipleModeControl.attachEvent(\"select\", controller, this.onSelectMultipleModeControl, this);\n\n\t\t\tmultipleModeControl.getAllInnerControls(true).forEach((innerControl: InnerControlType, index: number) => {\n\t\t\t\tif (innerControl.isA<TableAPI>(\"sap.fe.macros.table.TableAPI\")) {\n\t\t\t\t\tif (!tabKey || _tabKey.includes(index.toString())) {\n\t\t\t\t\t\ttable = innerControl.getContent();\n\t\t\t\t\t\tthis.createCustomMessage(null, {\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t\tskipMessageManagerUpdate: multipleModeControl.getSelectedInnerControl() !== innerControl\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttable = controller._getTable() as MDCTable;\n\t\tthis.createCustomMessage(null, { message, table });\n\t}\n}\n"],"mappings":"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","ignoreList":[]}