{"version":3,"names":["LRMessageStrip","customMessageInfo","messageManagerDataBinding","Messaging","getMessageModel","bindList","multiModeControlMessagesMap","_exports","_proto","prototype","getCustomMessageInfo","destroy","detachChange","_eventHandlerCustomMessage","_getMessagesWithSameTargetThanCustomMessage","getData","filter","msg","getTargets","currentMessage","aMessageWithSameTargetThanCustomMessage","isCustomMessageInMessageManager","find","length","removeMessages","addMessages","createCustomMessage","event","oData","message","table","skipMessageManagerUpdate","rowBindingPath","getRowBinding","getPath","customMessageMap","getId","attachEventOnce","onClose","getDataStateIndicator","detachEvent","processor","getModel","oMessage","Message","type","target","persistent","attachChange","attachDataStateIndicatorCloseEvent","fnOnClose","onSelectMultipleModeControl","controller","_getTable","showCustomMessage","tabKey","_tabKey","Array","isArray","isMultiMode","_isMultiMode","multipleModeControl","_getMultiModeControl","attachEvent","getAllInnerControls","forEach","innerControl","index","isA","includes","toString","getContent","getSelectedInnerControl"],"sourceRoot":".","sources":["LRMessageStrip.ts"],"sourcesContent":["import type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport type ListReportController from \"sap/fe/templates/ListReport/ListReportController.controller\";\nimport type { InnerControlType } from \"sap/fe/templates/ListReport/controls/MultipleModeControl\";\nimport type Event from \"sap/ui/base/Event\";\nimport Messaging from \"sap/ui/core/Messaging\";\nimport Message from \"sap/ui/core/message/Message\";\nimport type MessageType from \"sap/ui/core/message/MessageType\";\nimport type { default as MDCTable } from \"sap/ui/mdc/Table\";\nimport type ListBinding from \"sap/ui/model/ListBinding\";\nimport type MessageModel from \"sap/ui/model/message/MessageModel\";\n\nexport type LRCustomMessage = {\n\tmessage: string;\n\ttype?: MessageType;\n\tonClose?: Function;\n};\n\nexport class LRMessageStrip {\n\tcustomMessageInfo!: {\n\t\tmessageManagerDataBinding: ListBinding;\n\t\tcurrentMessage?: Message;\n\t\tmultiModeControlMessagesMap: { [key: string]: LRCustomMessage | undefined };\n\t};\n\n\tconstructor() {\n\t\tthis.customMessageInfo = {\n\t\t\tmessageManagerDataBinding: Messaging.getMessageModel().bindList(\"/\"),\n\t\t\tmultiModeControlMessagesMap: {}\n\t\t};\n\t}\n\n\tgetCustomMessageInfo(): {\n\t\tmessageManagerDataBinding: ListBinding;\n\t\tcurrentMessage?: Message;\n\t\tmultiModeControlMessagesMap: { [key: string]: LRCustomMessage | undefined };\n\t} {\n\t\treturn this.customMessageInfo;\n\t}\n\n\tdestroy(): void {\n\t\tthis.customMessageInfo.messageManagerDataBinding.detachChange(this._eventHandlerCustomMessage, this);\n\t}\n\n\t_getMessagesWithSameTargetThanCustomMessage(): MessageModel[] {\n\t\treturn Messaging.getMessageModel()\n\t\t\t.getData()\n\t\t\t.filter(\n\t\t\t\t(msg: Message) =>\n\t\t\t\t\tmsg.getTargets()[0] === this.customMessageInfo.currentMessage?.getTargets()[0] &&\n\t\t\t\t\tmsg !== this.customMessageInfo.currentMessage\n\t\t\t);\n\t}\n\n\t/**\n\t * MessageManager Event Handler responsible to add or remove the current customMessage.\n\t *\n\t */\n\t_eventHandlerCustomMessage(): void {\n\t\tif (this.customMessageInfo.currentMessage) {\n\t\t\tconst aMessageWithSameTargetThanCustomMessage = this._getMessagesWithSameTargetThanCustomMessage();\n\t\t\tconst isCustomMessageInMessageManager = !!Messaging.getMessageModel()\n\t\t\t\t.getData()\n\t\t\t\t.find((msg: Message) => msg === this.customMessageInfo.currentMessage);\n\n\t\t\tif (aMessageWithSameTargetThanCustomMessage.length > 0 && isCustomMessageInMessageManager) {\n\t\t\t\t//if there are other messages with the same message on the MessageManager and the customMessage\n\t\t\t\t//then we need to remove the customeMessage from the MessageManager\n\t\t\t\tMessaging.removeMessages([this.customMessageInfo?.currentMessage]);\n\t\t\t} else if (aMessageWithSameTargetThanCustomMessage.length === 0 && !isCustomMessageInMessageManager) {\n\t\t\t\tMessaging.addMessages([this.customMessageInfo.currentMessage]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * This function manages the lifecycle of the custom message (populates the customMessageInfo object, attaches an event to the message manager and inserts a message).\n\t * @param event Event object (optional).\n\t * @param oData Parameters\n\t * @param oData.message The LRCustomMessage to be used to generate the message object\n\t * @param oData.table The table targeted by the message\n\t * @param oData.skipMessageManagerUpdate Should skip to insert the message in the MessageManager\n\t */\n\tcreateCustomMessage(\n\t\tevent: Event | null,\n\t\toData: { message: LRCustomMessage | undefined; table: MDCTable; skipMessageManagerUpdate?: boolean }\n\t): void {\n\t\tconst message = oData.message;\n\t\tconst table = oData.table;\n\t\tconst skipMessageManagerUpdate = oData.skipMessageManagerUpdate;\n\t\tconst rowBindingPath = table.getRowBinding()?.getPath();\n\t\tconst customMessageMap = this.customMessageInfo.multiModeControlMessagesMap;\n\t\tcustomMessageMap[table.getId()] = message;\n\t\tif (!rowBindingPath) {\n\t\t\ttable.attachEventOnce(\"bindingUpdated\", oData, this.createCustomMessage, this);\n\t\t\treturn;\n\t\t}\n\n\t\tif (customMessageMap[table.getId()]?.onClose) {\n\t\t\ttable.getDataStateIndicator().detachEvent(\"close\", customMessageMap[table.getId()]?.onClose as Function, this);\n\t\t}\n\n\t\tconst processor = table.getModel();\n\t\tconst oMessage = message\n\t\t\t? new Message({\n\t\t\t\t\tmessage: message.message,\n\t\t\t\t\ttype: message.type,\n\t\t\t\t\ttarget: [rowBindingPath],\n\t\t\t\t\tpersistent: false,\n\t\t\t\t\tprocessor\n\t\t\t  })\n\t\t\t: null;\n\n\t\tthis.customMessageInfo.messageManagerDataBinding.detachChange(this._eventHandlerCustomMessage, this);\n\t\tif (!skipMessageManagerUpdate) {\n\t\t\tif (this.customMessageInfo.currentMessage) {\n\t\t\t\tMessaging.removeMessages([this.customMessageInfo.currentMessage]);\n\t\t\t}\n\t\t\tif (oMessage) {\n\t\t\t\tthis.customMessageInfo.currentMessage = oMessage;\n\t\t\t} else {\n\t\t\t\tdelete this.customMessageInfo.currentMessage;\n\t\t\t}\n\t\t\tif (oMessage && this._getMessagesWithSameTargetThanCustomMessage().length === 0) {\n\t\t\t\tMessaging.addMessages([oMessage]);\n\t\t\t}\n\t\t}\n\t\tthis.customMessageInfo.messageManagerDataBinding.attachChange(this._eventHandlerCustomMessage, this);\n\n\t\tthis.attachDataStateIndicatorCloseEvent(table, customMessageMap, message?.onClose);\n\t}\n\n\t/**\n\t * This function attaches the onClose event function to the dataStateIndicator.\n\t * @param table The table associated with the dataStateIndicator\n\t * @param customMessageMap The CustomMessageMap object\n\t * @param fnOnClose A function to be attached to the \"close\" event\n\t */\n\tattachDataStateIndicatorCloseEvent(\n\t\ttable: MDCTable,\n\t\tcustomMessageMap: { [key: string]: LRCustomMessage | undefined },\n\t\tfnOnClose?: Function\n\t): void {\n\t\tif (fnOnClose) {\n\t\t\ttable.getDataStateIndicator().attachEventOnce(\"close\", fnOnClose, this);\n\t\t}\n\t\t//When closing the the messageStrip, the associated message is removed\n\t\ttable.getDataStateIndicator().attachEventOnce(\"close\", () => {\n\t\t\tdelete customMessageMap[table.getId()];\n\t\t});\n\t}\n\n\t/**\n\t * MultipleModeControl Event handler responsible for displaying the correct custom message when a specific tab is selected.\n\t *\n\t */\n\n\tonSelectMultipleModeControl(event: Event, controller: ListReportController): void {\n\t\tconst table = controller._getTable() as MDCTable;\n\t\tconst message = this.customMessageInfo.multiModeControlMessagesMap[table.getId()];\n\t\tthis.createCustomMessage(null, { message, table });\n\t}\n\n\t/**\n\t * Provide an option for showing a custom message in the message bar above the list report table.\n\t * @param [message] Custom message along with the message type to be set on the table.\n\t * @param [message.message] Message string to be displayed.\n\t * @param [message.type] Indicates the type of message.\n\t * @param [controller] Controller of the current view.\n\t * @param [tabKey] The entitySet identifying the table in which to display the custom message.\n\t * @param [onClose] A function that is called when the user closes the message bar.\n\t */\n\tshowCustomMessage(\n\t\tmessage: LRCustomMessage | undefined,\n\t\tcontroller: ListReportController,\n\t\ttabKey?: string[] | string | null,\n\t\tonClose?: Function\n\t): void {\n\t\tconst _tabKey = Array.isArray(tabKey) ? tabKey : [tabKey];\n\t\tconst isMultiMode = controller._isMultiMode();\n\t\tlet table: MDCTable;\n\t\tif (message) {\n\t\t\tmessage.onClose = onClose;\n\t\t}\n\t\tif (isMultiMode) {\n\t\t\tconst multipleModeControl = controller._getMultiModeControl();\n\t\t\t//we fisrt need to detach the select event to prevent multiple attachments.\n\t\t\tmultipleModeControl.detachEvent(\"select\", this.onSelectMultipleModeControl, this);\n\t\t\tmultipleModeControl.attachEvent(\"select\", controller, this.onSelectMultipleModeControl, this);\n\n\t\t\tmultipleModeControl.getAllInnerControls(true).forEach((innerControl: InnerControlType, index: number) => {\n\t\t\t\tif (innerControl.isA<TableAPI>(\"sap.fe.macros.table.TableAPI\")) {\n\t\t\t\t\tif (!tabKey || _tabKey.includes(index.toString())) {\n\t\t\t\t\t\ttable = innerControl.getContent();\n\t\t\t\t\t\tthis.createCustomMessage(null, {\n\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\ttable,\n\t\t\t\t\t\t\tskipMessageManagerUpdate: multipleModeControl.getSelectedInnerControl() !== innerControl\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttable = controller._getTable() as MDCTable;\n\t\tthis.createCustomMessage(null, { message, table });\n\t}\n}\n"],"mappings":"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","ignoreList":[],"file":"LRMessageStrip-dbg.js"}