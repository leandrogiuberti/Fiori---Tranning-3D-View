{"version":3,"file":"ListReportController.controller.js","names":["TemplateContentView","CoreLibrary","InitialLoadMode","ListReportController","_dec","defineUI5Class","_dec2","usingExtension","InternalRouting","override","onAfterBinding","this","getView","getController","_onAfterBinding","_dec3","InternalIntentBasedNavigation","getEntitySet","base","getCurrentEntitySet","_dec4","SideEffects","SideEffectsOverride","_dec5","IntentBasedNavigation","IntentBasedNavigationOverride","_dec6","Share","ShareOverrides","_dec7","ViewState","ViewStateOverrides","_dec8","KPIManagement","_dec9","Placeholder","_dec10","publicExtension","_dec11","finalExtension","_dec12","privateExtension","_dec13","extensible","_dec14","_dec15","OverrideExecution","After","_dec16","_dec17","_dec18","_dec19","_class","_class2","_PageController","_this","_len","arguments","length","args","Array","_key","call","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","_descriptor5","_descriptor6","_descriptor7","_descriptor8","formatters","setALPControlMessageStrip","aIgnoredFields","bIsChart","oApplySupported","sText","oFilterBar","_getFilterBarControl","isArray","aIgnoredLabels","MessageStrip","getLabels","data","getResourceModel","bIsSearchIgnored","enableSearch","getALPText","getText","handlers","onInlineEditSave","inlineEditFlow","inlineEditSave","onFilterSearch","filterBarAPI","getParent","triggerSearch","onFiltersChanged","oEvent","oInternalModelContext","getBindingContext","onPendingFilters","getParameter","setProperty","_storeFilterBarSelectionVariant","onVariantSelected","parameters","getParameters","variantManagement","originalSource","currentVariantKey","multiModeControl","_getMultiModeControl","isA","invalidateContent","setFreezeContent","setTimeout","filterBar","dynamicPage","_getDynamicListReportControl","firstEmptyMandatoryField","getFilterItems","find","filterItem","getRequired","getConditions","setHeaderExpanded","_shouldAutoTriggerSearch","_getApplyAutomaticallyOnVariant","getExtensionAPI","updateAppState","onVariantSaved","onSearch","oMdcChart","getChartControl","bHideDraft","FilterUtils","getEditStateIsHideDraft","_updateALPNotApplicableFields","oPageInternalModelContext","sTemplateContentView","getProperty","getPath","Chart","hasPendingChartChanges","Table","hasPendingTableChanges","Device","system","desktop","getHeaderExpanded","StateUtil","retrieveExternalState","then","oExternalState","filterBarConditions","filter","catch","oError","Log","error","phone","oDynamicPage","_isInitLoadEnabled","setFilterToggleVisibility","onChevronPressNavigateOutBound","oController","sOutboundTarget","oContext","sCreatePath","_intentBasedNavigation","onChartSelectionChanged","getSource","getContent","oTable","_getTable","aData","ChartUtils","setChartFilters","rebind","onSegmentedButtonPressed","selectedKey","key","oChart","_updateTable","_updateChart","Hybrid","focusHandlingForSegmentedButton","onDynamicPageTitleStateChanged","event","InvisibleMessage","getInstance","announce","getAssignedFiltersText","filtersText","InvisibleMessageMode","Assertive","_inheritsLoose","_proto","prototype","extensionAPI","ExtensionAPI","onInit","PageController","apply","_hasMultiVisualizations","alpContentView","_getDefaultPath","getAppComponent","getRouterProxy","waitForRouteMatchBeforeNavigation","_setInitLoad","view","uiModel","getModel","path","getId","isEditable","bindElement","model","onBeforeRendering","dynmicPageHeaderTitle","getTitle","breadcrumbsBB","getBreadcrumbs","setBreadcrumbLinks","onExit","destroy","aTables","_getControls","updateActions","EditState","isEditStateDirty","table","oTableBinding","getRowBinding","tableAPI","CommonUtils","getRoutingService","waitForBindingCleanup","async","isAppComponentBusy","attachEventOnce","_updateTableActions","getTableDefinition","control","type","resetChanges","refresh","e","warning","setEditStateProcessed","internalModelContext","viewId","pageReady","waitFor","_applyAppState","environmentCapabilities","getEnvironmentCapabilities","isInsightsEnabled","onPageReady","mParameters","forceFocus","_setInitialFocus","getShellServices","setBackNavigation","undefined","onViewNeedsRefresh","slice","onAfterClear","aIBNActions","forEach","getIBNActions","updateDataFieldForIBNButtonsVisibility","updateMenuButtonVisiblity","_scrollTablesToRow","sRowPath","TableScroller","scrollTableToRow","_focusSilent","filterField","focusInfo","getFocusInfo","targetInfo","silent","focus","isHeaderExpanded","_isFilterBarHiddenUsed","getShowMessages","setShowMessages","oFilterItem","fieldToFocus","byId","_getFilterBarControlId","focusRow","_getPageTitleInformation","oManifestEntry","getManifestEntry","Promise","resolve","title","subtitle","subTitle","intent","icon","_getDynamicListReportControlId","_getAdaptationFilterBarControl","adaptationFilterBar","getInbuiltFilter","getAppStateHandler","applyAppState","enableRequests","_isFilterBarHidden","_isMultiMode","setCountsOutDated","_getSegmentedButton","sControl","sSegmentedButtonId","_getControlFromPageModelProperty","sPath","controlId","_getPageModel","_getVisualFilterBarControl","sVisualFilterBarId","StableIdHelper","generate","_getFilterBarVariantControl","_getIconTabBar","oControl","getSelectedInnerControl","content","sKey","aControls","oTabMultiMode","getItems","oItem","getKey","includes","push","defaultPath","ListReportTemplating","getDefaultPath","initLoadMode","getViewData","initialLoad","Enabled","_disableInitLoad","_applyAutomaticallyOnStandardVariant","variantManagementId","getVariantBackReference","getData","registerApplyAutomaticallyOnStandardVariant","bind","_setShareModel","fnGetUser","ObjectPath","get","oShareInfo","bookmarkTitle","document","bookmarkCustomUrl","sHash","hasher","getHash","window","location","href","isShareInJamActive","isJamActive","oTemplatePrivateModel","getOwnerComponent","mCache","ignoredFields","aCharts","sChartEntityPath","sChartEntitySet","sCacheKey","getNotApplicableFilters","hideFilterBar","useHiddenFilterBar","variants","getVariants","currentVariant","variant","oVM","Auto","getStandardVariantKey","getCurrentVariantKey","oConditions","startsWith","standardVariant","getExecuteOnSelect","isTableBound","oInnerChart","getControlDelegate","_getChart","isBound","getBindingInfo","buttonVisible","getSegmentedButton","setVisible","segmentedButtonId","addFocusDelegate","segmentedButton","UI5Element","getElementById","eventDelegate","onAfterRendering","removeEventDelegate","addEventDelegate","sv","getSelectionVariant","err","message","Error","String","getFilterBarSelectionVariant","SelectionVariant","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","Object","getOwnPropertyDescriptor"],"sources":["./ListReportController.controller.ts"],"sourcesContent":["import Log from \"sap/base/Log\";\nimport ObjectPath from \"sap/base/util/ObjectPath\";\nimport type DynamicPage from \"sap/f/DynamicPage\";\nimport type { DynamicPageTitle$StateChangeEvent } from \"sap/f/DynamicPageTitle\";\nimport { defineUI5Class, extensible, finalExtension, privateExtension, publicExtension, usingExtension } from \"sap/fe/base/ClassSupport\";\nimport CommonUtils from \"sap/fe/core/CommonUtils\";\nimport PageController from \"sap/fe/core/PageController\";\nimport IntentBasedNavigation from \"sap/fe/core/controllerextensions/IntentBasedNavigation\";\nimport InternalIntentBasedNavigation from \"sap/fe/core/controllerextensions/InternalIntentBasedNavigation\";\nimport InternalRouting from \"sap/fe/core/controllerextensions/InternalRouting\";\nimport KPIManagement from \"sap/fe/core/controllerextensions/KPIManagement\";\nimport Placeholder from \"sap/fe/core/controllerextensions/Placeholder\";\nimport Share from \"sap/fe/core/controllerextensions/Share\";\nimport SideEffects from \"sap/fe/core/controllerextensions/SideEffects\";\nimport ViewState from \"sap/fe/core/controllerextensions/ViewState\";\nimport type { ListReportDefinition } from \"sap/fe/core/converters/templates/ListReportConverter\";\nimport EditState from \"sap/fe/core/helpers/EditState\";\nimport MessageStrip from \"sap/fe/core/helpers/MessageStrip\";\nimport type { InternalModelContext } from \"sap/fe/core/helpers/ModelHelper\";\nimport { getResourceModel } from \"sap/fe/core/helpers/ResourceModelHelper\";\nimport * as StableIdHelper from \"sap/fe/core/helpers/StableIdHelper\";\nimport { generate } from \"sap/fe/core/helpers/StableIdHelper\";\nimport CoreLibrary from \"sap/fe/core/library\";\nimport type Breadcrumbs from \"sap/fe/macros/Breadcrumbs\";\nimport type ChartType from \"sap/fe/macros/Chart\";\nimport type MacroAPI from \"sap/fe/macros/MacroAPI\";\nimport type ChartDelegate from \"sap/fe/macros/chart/ChartDelegate\";\nimport ChartUtils from \"sap/fe/macros/chart/ChartUtils\";\nimport type FilterBar from \"sap/fe/macros/controls/FilterBar\";\nimport FilterUtils from \"sap/fe/macros/filter/FilterUtils\";\nimport type FilterBarAPI from \"sap/fe/macros/filterBar/FilterBarAPI\";\nimport type TableAPI from \"sap/fe/macros/table/TableAPI\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport ExtensionAPI from \"sap/fe/templates/ListReport/ExtensionAPI\";\nimport type MultipleModeControl from \"sap/fe/templates/ListReport/controls/MultipleModeControl\";\nimport SideEffectsOverride from \"sap/fe/templates/ListReport/overrides/SideEffects\";\nimport TableScroller from \"sap/fe/templates/TableScroller\";\nimport type IconTabBar from \"sap/m/IconTabBar\";\nimport type TabContainerItem from \"sap/m/TabContainerItem\";\nimport Device from \"sap/ui/Device\";\nimport type UI5Event from \"sap/ui/base/Event\";\nimport type Control from \"sap/ui/core/Control\";\nimport UI5Element from \"sap/ui/core/Element\";\nimport InvisibleMessage from \"sap/ui/core/InvisibleMessage\";\nimport { InvisibleMessageMode } from \"sap/ui/core/library\";\nimport OverrideExecution from \"sap/ui/core/mvc/OverrideExecution\";\nimport type VariantManagement from \"sap/ui/fl/variants/VariantManagement\";\nimport type { VariantManagement$SelectEvent } from \"sap/ui/fl/variants/VariantManagement\";\nimport type Chart from \"sap/ui/mdc/Chart\";\nimport type FilterField from \"sap/ui/mdc/FilterField\";\nimport type Table from \"sap/ui/mdc/Table\";\nimport type { FilterBarBase$FiltersChangedEvent } from \"sap/ui/mdc/filterbar/FilterBarBase\";\nimport StateUtil from \"sap/ui/mdc/p13n/StateUtil\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport hasher from \"sap/ui/thirdparty/hasher\";\nimport * as ListReportTemplating from \"./ListReportTemplating\";\nimport IntentBasedNavigationOverride from \"./overrides/IntentBasedNavigation\";\nimport ShareOverrides from \"./overrides/Share\";\nimport ViewStateOverrides from \"./overrides/ViewState\";\n\nconst TemplateContentView = CoreLibrary.TemplateContentView,\n\tInitialLoadMode = CoreLibrary.InitialLoadMode;\n\n/**\n * Controller class for the list report page, used inside an SAP Fiori elements application.\n * @hideconstructor\n * @public\n */\n@defineUI5Class(\"sap.fe.templates.ListReport.ListReportController\")\nclass ListReportController extends PageController {\n\t@usingExtension(\n\t\tInternalRouting.override({\n\t\t\tonAfterBinding: function (this: InternalRouting) {\n\t\t\t\t(this.getView().getController() as ListReportController)._onAfterBinding();\n\t\t\t}\n\t\t})\n\t)\n\t_routing!: InternalRouting;\n\n\t@usingExtension(\n\t\tInternalIntentBasedNavigation.override({\n\t\t\tgetEntitySet: function (this: InternalIntentBasedNavigation) {\n\t\t\t\treturn (this.base as ListReportController).getCurrentEntitySet();\n\t\t\t}\n\t\t})\n\t)\n\t_intentBasedNavigation!: InternalIntentBasedNavigation;\n\n\t@usingExtension(SideEffects.override(SideEffectsOverride))\n\t_sideEffects!: SideEffects;\n\n\t@usingExtension(IntentBasedNavigation.override(IntentBasedNavigationOverride))\n\tintentBasedNavigation!: IntentBasedNavigation;\n\n\t@usingExtension(Share.override(ShareOverrides))\n\tshare!: Share;\n\n\t@usingExtension(ViewState.override(ViewStateOverrides))\n\tviewState!: ViewState;\n\n\t@usingExtension(KPIManagement)\n\tkpiManagement!: KPIManagement;\n\n\t@usingExtension(Placeholder)\n\tplaceholder!: Placeholder;\n\n\tprotected extensionAPI?: ExtensionAPI;\n\n\tprivate filterBarConditions?: unknown;\n\n\tprivate hasPendingChartChanges?: boolean;\n\n\tprivate hasPendingTableChanges?: boolean;\n\n\t/**\n\t * Get the extension API for the current page.\n\t * @public\n\t * @returns The extension API.\n\t */\n\t@publicExtension()\n\t@finalExtension()\n\tgetExtensionAPI(): ExtensionAPI {\n\t\tif (!this.extensionAPI) {\n\t\t\tthis.extensionAPI = new ExtensionAPI(this);\n\t\t}\n\t\treturn this.extensionAPI;\n\t}\n\n\tonInit(): void {\n\t\tPageController.prototype.onInit.apply(this);\n\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\tconst filterBar = this._getFilterBarControl();\n\t\tif (filterBar) {\n\t\t\tthis._storeFilterBarSelectionVariant(filterBar, oInternalModelContext);\n\t\t}\n\t\toInternalModelContext.setProperty(\"hasPendingFilters\", true);\n\t\toInternalModelContext.setProperty(\"hideDraftInfo\", false);\n\t\toInternalModelContext.setProperty(\"uom\", {});\n\t\toInternalModelContext.setProperty(\"scalefactor\", {});\n\t\toInternalModelContext.setProperty(\"scalefactorNumber\", {});\n\t\toInternalModelContext.setProperty(\"currency\", {});\n\t\toInternalModelContext.setProperty(\"isInsightsSupported\", false);\n\n\t\tif (this._hasMultiVisualizations()) {\n\t\t\tlet alpContentView = this._getDefaultPath();\n\t\t\tif (!Device.system.desktop && alpContentView === TemplateContentView.Hybrid) {\n\t\t\t\talpContentView = TemplateContentView.Chart;\n\t\t\t}\n\t\t\toInternalModelContext.setProperty(\"alpContentView\", alpContentView);\n\t\t}\n\n\t\t// Store conditions from filter bar\n\t\t// this is later used before navigation to get conditions applied on the filter bar\n\t\tthis.filterBarConditions = {};\n\n\t\t// As AppStateHandler.applyAppState triggers a navigation we want to make sure it will\n\t\t// happen after the routeMatch event has been processed (otherwise the router gets broken)\n\t\tthis.getAppComponent().getRouterProxy().waitForRouteMatchBeforeNavigation();\n\n\t\t// Configure the initial load settings\n\t\tthis._setInitLoad();\n\t\tconst view = this.getView();\n\t\tconst uiModel = view.getModel(\"ui\");\n\t\tconst path = `/${view.getId()}`;\n\t\tuiModel.setProperty(path, { isEditable: false });\n\t\tview.bindElement({ path, model: \"ui\" });\n\t}\n\n\tonBeforeRendering(): void {\n\t\tPageController.prototype.onBeforeRendering.apply(this);\n\t\tconst dynamicPage = this._getDynamicListReportControl();\n\t\tconst dynmicPageHeaderTitle = dynamicPage?.getTitle();\n\t\tconst breadcrumbsBB = dynmicPageHeaderTitle.getBreadcrumbs() as Breadcrumbs | undefined;\n\t\tif (breadcrumbsBB) {\n\t\t\tbreadcrumbsBB.setBreadcrumbLinks(\"\");\n\t\t}\n\t}\n\n\tonExit(): void {\n\t\tdelete this.filterBarConditions;\n\t\tif (this.extensionAPI) {\n\t\t\tthis.extensionAPI.destroy();\n\t\t}\n\t\tdelete this.extensionAPI;\n\t}\n\n\t_onAfterBinding(): void {\n\t\tconst aTables = this._getControls(\"table\") as Table[];\n\t\tlet updateActions = true;\n\t\tif (EditState.isEditStateDirty()) {\n\t\t\tthis._getMultiModeControl()?.invalidateContent();\n\t\t\tconst table = this._getTable();\n\t\t\tconst oTableBinding = table?.getRowBinding();\n\t\t\tif (oTableBinding) {\n\t\t\t\tupdateActions = false;\n\t\t\t\tconst tableAPI = table?.getParent() as TableAPI;\n\n\t\t\t\t// Update the table content using side effects (listBinding.refresh doesn't keep expansion states in a TreeTable)\n\t\t\t\tCommonUtils.getAppComponent(this.getView())\n\t\t\t\t\t.getRoutingService()\n\t\t\t\t\t.waitForBindingCleanup()\n\t\t\t\t\t.then(async () => {\n\t\t\t\t\t\tawait CommonUtils.getAppComponent(this.getView()).isAppComponentBusy();\n\t\t\t\t\t\toTableBinding.attachEventOnce(\"dataReceived\", () => {\n\t\t\t\t\t\t\tthis._updateTableActions(aTables);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (tableAPI.getTableDefinition().control.type === \"TreeTable\") {\n\t\t\t\t\t\t\t// As the refresh on a TreeTable uses side-effects, we need to make sure there are no pending changes\n\t\t\t\t\t\t\t// before the side-effects are queried (e.g. failed PATCH queries that would be resent together with side effects GET)\n\t\t\t\t\t\t\tthis.getModel().resetChanges();\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttableAPI.refresh();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t})\n\t\t\t\t\t.catch((e) => {\n\t\t\t\t\t\tLog.warning(\"Error while waiting refreshing ListReport table\", e);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tEditState.setEditStateProcessed();\n\t\t}\n\n\t\tif (updateActions) {\n\t\t\tthis._updateTableActions(aTables);\n\t\t}\n\n\t\tconst internalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\tif (!internalModelContext.getProperty(\"initialVariantApplied\")) {\n\t\t\tconst viewId = this.getView().getId();\n\t\t\tthis.pageReady.waitFor(this._applyAppState(viewId));\n\t\t\tinternalModelContext.setProperty(\"initialVariantApplied\", true);\n\t\t}\n\t\tconst environmentCapabilities = CommonUtils.getAppComponent(this.getView()).getEnvironmentCapabilities();\n\t\tenvironmentCapabilities\n\t\t\t.isInsightsEnabled()\n\t\t\t.then((isInsightsEnabled: boolean) => {\n\t\t\t\tinternalModelContext.setProperty(\"isInsightsSupported\", isInsightsEnabled);\n\t\t\t\treturn;\n\t\t\t})\n\t\t\t.catch((error: unknown) => {\n\t\t\t\tLog.error(\"Error while checking if insights are enabled\", error as string);\n\t\t\t});\n\t}\n\n\tformatters = {\n\t\tsetALPControlMessageStrip(\n\t\t\tthis: ListReportController,\n\t\t\taIgnoredFields: string[],\n\t\t\tbIsChart: boolean | string,\n\t\t\toApplySupported?: { enableSearch: boolean }\n\t\t): string | undefined {\n\t\t\tlet sText = \"\";\n\t\t\tbIsChart = bIsChart === \"true\" || bIsChart === true;\n\t\t\tconst oFilterBar = this._getFilterBarControl();\n\t\t\tif (oFilterBar && Array.isArray(aIgnoredFields) && aIgnoredFields.length > 0 && bIsChart) {\n\t\t\t\tconst aIgnoredLabels = MessageStrip.getLabels(\n\t\t\t\t\taIgnoredFields,\n\t\t\t\t\toFilterBar.data(\"entityType\"),\n\t\t\t\t\toFilterBar,\n\t\t\t\t\tgetResourceModel(oFilterBar)\n\t\t\t\t);\n\t\t\t\tconst bIsSearchIgnored = !oApplySupported?.enableSearch;\n\t\t\t\tsText = bIsChart\n\t\t\t\t\t? MessageStrip.getALPText(aIgnoredLabels, oFilterBar, bIsSearchIgnored)\n\t\t\t\t\t: MessageStrip.getText(aIgnoredLabels, oFilterBar, \"\");\n\t\t\t\treturn sText;\n\t\t\t}\n\t\t}\n\t};\n\n\t@privateExtension()\n\t@extensible(\"After\")\n\tasync onPageReady(mParameters: { forceFocus?: boolean }): Promise<void> {\n\t\tif (mParameters.forceFocus) {\n\t\t\tthis._setInitialFocus();\n\t\t}\n\t\t// Remove the handler on back navigation that displays Draft confirmation\n\t\tawait this.getAppComponent().getShellServices().setBackNavigation(undefined);\n\t}\n\n\t/**\n\t * Method called when the content of a custom view used in a list report needs to be refreshed.\n\t * This happens either when there is a change on the FilterBar and the search is triggered,\n\t * or when a tab with custom content is selected,\n\t * or when the view is forced to be refreshed through the Extension API for the list report's public method setTabContentToBeRefreshedOnNextOpening.\n\t * This method can be overwritten by the controller extension in case of customization.\n\t * @param mParameters Map containing the filter conditions of the FilterBar, the currentTabID\n\t * and the view refresh cause (tabChanged, search or forcedRefresh).\n\t * The map looks like this:\n\t * <code><pre>\n\t * \t{\n\t * \t\tfilterConditions: {\n\t * \t\t\tCountry: [\n\t * \t\t\t\t{\n\t * \t\t\t\t\toperator: \"EQ\"\n\t *\t\t\t\t\tvalidated: \"NotValidated\"\n\t *\t\t\t\t\tvalues: [\"Germany\", ...]\n\t * \t\t\t\t},\n\t * \t\t\t\t...\n\t * \t\t\t]\n\t * \t\t\t...\n\t * \t\t},\n\t *\t\tcurrentTabId: \"fe::CustomTab::tab1\",\n\t *\t\trefreshCause: \"tabChanged\" | \"search\" | \"forcedRefresh\"\n\t *\t}\n\t * </pre></code>\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\tonViewNeedsRefresh(mParameters: unknown): void {\n\t\t/* To be overriden */\n\t}\n\n\t/**\n\t * Method called when a filter or search value has been changed in the FilterBar,\n\t * but has not been validated yet by the end user (with the 'Go' or 'Search' button).\n\t * Typically, the content of the current tab is greyed out until the filters are validated.\n\t * This method can be overwritten by the controller extension in case of customization.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonPendingFilters(): void {\n\t\t/* To be overriden */\n\t}\n\n\tgetCurrentEntitySet(): string {\n\t\treturn this._getTable()?.data(\"targetCollectionPath\").slice(1);\n\t}\n\n\t/**\n\t * Method called when the 'Clear' button on the FilterBar is pressed.\n\t * @public\n\t */\n\t@publicExtension()\n\t@extensible(OverrideExecution.After)\n\tonAfterClear(): void {\n\t\t/* To be overriden */\n\t}\n\n\t/**\n\t * This method initiates the update of the enabled state of the DataFieldForAction and the visible state of the DataFieldForIBN buttons.\n\t * @param aTables Array of tables in the list report\n\t */\n\t_updateTableActions(aTables: Table[]): void {\n\t\tlet aIBNActions: UI5Element[] = [];\n\t\taTables.forEach(function (oTable) {\n\t\t\taIBNActions = CommonUtils.getIBNActions(oTable, aIBNActions);\n\t\t});\n\t\tCommonUtils.updateDataFieldForIBNButtonsVisibility(aIBNActions, this.getView());\n\t\tCommonUtils.updateMenuButtonVisiblity(aIBNActions);\n\t}\n\n\t/**\n\t * This method scrolls to a specific row on all the available tables.\n\t * @param sRowPath The path of the table row context to be scrolled to\n\t */\n\t_scrollTablesToRow(sRowPath: string): void {\n\t\tthis._getControls(\"table\").forEach(function (oTable: Control) {\n\t\t\tTableScroller.scrollTableToRow(oTable as Table, sRowPath);\n\t\t});\n\t}\n\n\t/**\n\t * Sets a silent focus on the filter field. Suppresses the opening of the type-ahead popup.\n\t * @param filterField The field where the focus should be set after the initial load\n\t */\n\t_focusSilent(filterField: FilterField): void {\n\t\tconst focusInfo = filterField.getFocusInfo() as { targetInfo: object };\n\t\tfocusInfo.targetInfo = { silent: true };\n\t\tfilterField.focus(focusInfo);\n\t}\n\n\t/**\n\t * This method sets the initial focus in a list report based on the User Experience guidelines.\n\t *\n\t */\n\t_setInitialFocus(): void {\n\t\tconst dynamicPage = this._getDynamicListReportControl(),\n\t\t\tisHeaderExpanded = dynamicPage.getHeaderExpanded(),\n\t\t\tfilterBar = this._getFilterBarControl() as FilterBar;\n\t\tif (filterBar && !this._isFilterBarHiddenUsed()) {\n\t\t\t//Enabling mandatory filter fields message dialog\n\t\t\tif (!filterBar.getShowMessages()) {\n\t\t\t\tfilterBar.setShowMessages(true);\n\t\t\t}\n\t\t\tif (isHeaderExpanded) {\n\t\t\t\tconst firstEmptyMandatoryField = filterBar.getFilterItems().find(function (oFilterItem: FilterField) {\n\t\t\t\t\treturn oFilterItem.getRequired() && oFilterItem.getConditions().length === 0;\n\t\t\t\t});\n\t\t\t\t//Focusing on the first empty mandatory filter field, or on the first filter field if the table data is loaded\n\t\t\t\t// Do a \"silent\" focus for FilterField, by adding the silent attribute. The silent attribute suppresses typeahead opening.\n\t\t\t\tif (firstEmptyMandatoryField) {\n\t\t\t\t\tif (firstEmptyMandatoryField.isA<FilterField>(\"sap.ui.mdc.FilterField\")) {\n\t\t\t\t\t\tthis._focusSilent(firstEmptyMandatoryField);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(firstEmptyMandatoryField as Control).focus();\n\t\t\t\t\t}\n\t\t\t\t} else if (this._isInitLoadEnabled() && filterBar.getFilterItems().length > 0) {\n\t\t\t\t\t// Add check for available filterItems\n\t\t\t\t\tconst fieldToFocus = filterBar.getFilterItems()[0];\n\t\t\t\t\tif (fieldToFocus.isA<FilterField>(\"sap.ui.mdc.FilterField\")) {\n\t\t\t\t\t\tthis._focusSilent(fieldToFocus);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t(fieldToFocus as Control).focus();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t//Focusing on the Go button\n\t\t\t\t\tthis.getView().byId(`${this._getFilterBarControlId()}-btnSearch`)?.focus();\n\t\t\t\t}\n\t\t\t} else if (this._isInitLoadEnabled()) {\n\t\t\t\tthis._getTable()\n\t\t\t\t\t?.focusRow(0)\n\t\t\t\t\t.catch(function (error: unknown) {\n\t\t\t\t\t\tLog.error(\"Error while setting initial focus on the table \", error as string);\n\t\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis._getTable()\n\t\t\t\t?.focusRow(0)\n\t\t\t\t.catch(function (error: unknown) {\n\t\t\t\t\tLog.error(\"Error while setting initial focus on the table \", error as string);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tasync _getPageTitleInformation(): Promise<{ title?: string; subtitle: string; intent: string; icon: string }> {\n\t\tconst oManifestEntry = this.getAppComponent().getManifestEntry(\"sap.app\");\n\t\treturn Promise.resolve({\n\t\t\ttitle: oManifestEntry.title,\n\t\t\tsubtitle: oManifestEntry.subTitle || \"\",\n\t\t\tintent: \"\",\n\t\t\ticon: \"\"\n\t\t});\n\t}\n\n\t_getFilterBarControl(): FilterBar | undefined {\n\t\treturn this.getView().byId(this._getFilterBarControlId()) as FilterBar | undefined;\n\t}\n\n\t_getDynamicListReportControl(): DynamicPage {\n\t\treturn this.getView().byId(this._getDynamicListReportControlId()) as DynamicPage;\n\t}\n\n\t_getAdaptationFilterBarControl(): Control {\n\t\t// If the adaptation filter bar is part of the DOM tree, the \"Adapt Filter\" dialog is open,\n\t\t// and we return the adaptation filter bar as an active control (visible for the user)\n\t\tconst adaptationFilterBar = (this._getFilterBarControl() as { getInbuiltFilter?: Function }).getInbuiltFilter?.();\n\t\treturn adaptationFilterBar?.getParent() ? adaptationFilterBar : undefined;\n\t}\n\n\tasync _applyAppState(viewId: string): Promise<void> {\n\t\tawait this.getAppComponent().getAppStateHandler().applyAppState(viewId, this.getView());\n\t\tconst oFilterBar = this._getFilterBarControl();\n\t\tif (oFilterBar) {\n\t\t\toFilterBar.enableRequests(true);\n\t\t} else if (this._isFilterBarHidden()) {\n\t\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\t\toInternalModelContext.setProperty(\"hasPendingFilters\", false);\n\t\t\tif (this._isMultiMode()) {\n\t\t\t\tthis._getMultiModeControl().setCountsOutDated(true);\n\t\t\t}\n\t\t}\n\t}\n\n\t_getSegmentedButton(sControl: string): UI5Element | undefined {\n\t\tconst sSegmentedButtonId = (sControl === \"Chart\" ? this.getChartControl() : this._getTable())?.data(\"segmentedButtonId\");\n\t\treturn this.getView().byId(sSegmentedButtonId);\n\t}\n\n\t_getControlFromPageModelProperty(sPath: string): Control | MacroAPI | undefined {\n\t\tconst controlId = this._getPageModel()?.getProperty(sPath);\n\t\treturn controlId ? (this.getView().byId(controlId) as Control) : undefined;\n\t}\n\n\t_getDynamicListReportControlId(): string {\n\t\treturn this._getPageModel()?.getProperty(\"/dynamicListReportId\") || \"\";\n\t}\n\n\t_getFilterBarControlId(): string {\n\t\treturn this._getPageModel()?.getProperty(\"/filterBarId\") || \"\";\n\t}\n\n\tgetChartControl(): Control | undefined {\n\t\treturn this._getControlFromPageModelProperty(\"/singleChartId\") as ChartType;\n\t}\n\n\t_getVisualFilterBarControl(): UI5Element | undefined {\n\t\tconst sVisualFilterBarId = StableIdHelper.generate([\"visualFilter\", this._getFilterBarControlId()]);\n\t\treturn sVisualFilterBarId ? this.getView().byId(sVisualFilterBarId) : undefined;\n\t}\n\n\t_getFilterBarVariantControl(): VariantManagement {\n\t\treturn this._getControlFromPageModelProperty(\"/variantManagement/id\") as VariantManagement;\n\t}\n\n\t_getMultiModeControl(): MultipleModeControl {\n\t\treturn this.getView().byId(\"fe::TabMultipleMode::Control\") as MultipleModeControl;\n\t}\n\n\t_getIconTabBar(): IconTabBar {\n\t\treturn this.getView().byId(\"fe::TabMultipleMode\") as IconTabBar;\n\t}\n\n\t_getTable(): Table | undefined {\n\t\tif (this._isMultiMode()) {\n\t\t\tconst oControl = this._getMultiModeControl()?.getSelectedInnerControl()?.content;\n\t\t\treturn oControl?.isA(\"sap.ui.mdc.Table\") ? (oControl as Table) : undefined;\n\t\t} else {\n\t\t\treturn this._getControlFromPageModelProperty(\"/singleTableId\") as Table | undefined;\n\t\t}\n\t}\n\n\t_getControls(sKey?: string): Control[] {\n\t\tif (this._isMultiMode()) {\n\t\t\tconst aControls: Control[] = [];\n\t\t\tconst oTabMultiMode = this._getMultiModeControl().content;\n\t\t\toTabMultiMode.getItems().forEach((oItem: unknown) => {\n\t\t\t\tconst oControl = this.getView().byId((oItem as TabContainerItem).getKey()) as Control;\n\t\t\t\tif (oControl && sKey) {\n\t\t\t\t\tif ((oItem as TabContainerItem).getKey().includes(`fe::${sKey}`)) {\n\t\t\t\t\t\taControls.push(oControl);\n\t\t\t\t\t}\n\t\t\t\t} else if (oControl !== undefined && oControl !== null) {\n\t\t\t\t\taControls.push(oControl);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn aControls;\n\t\t} else if (sKey === \"Chart\") {\n\t\t\tconst oChart = this.getChartControl();\n\t\t\treturn oChart ? [oChart] : [];\n\t\t} else {\n\t\t\tconst oTable = this._getTable();\n\t\t\treturn oTable ? [oTable] : [];\n\t\t}\n\t}\n\n\t_getDefaultPath(): string {\n\t\tconst defaultPath = ListReportTemplating.getDefaultPath(this._getPageModel()?.getProperty(\"/views\") || []);\n\t\tswitch (defaultPath) {\n\t\t\tcase \"primary\":\n\t\t\t\treturn TemplateContentView.Chart;\n\t\t\tcase \"secondary\":\n\t\t\t\treturn TemplateContentView.Table;\n\t\t\tcase \"both\":\n\t\t\tdefault:\n\t\t\t\treturn TemplateContentView.Hybrid;\n\t\t}\n\t}\n\n\t/**\n\t * Method to know if ListReport is configured with Multiple Table mode.\n\t * @returns Is Multiple Table mode set?\n\t */\n\t_isMultiMode(): boolean {\n\t\treturn !!this._getPageModel()?.getProperty(\"/multiViewsControl\");\n\t}\n\n\t/**\n\t * Method to know if ListReport is configured to load data at start up.\n\t * @returns Is InitLoad enabled?\n\t */\n\t_isInitLoadEnabled(): boolean {\n\t\tconst initLoadMode = this.getView().getViewData().initialLoad;\n\t\treturn initLoadMode === InitialLoadMode.Enabled;\n\t}\n\n\t_hasMultiVisualizations(): boolean {\n\t\treturn this._getPageModel()?.getProperty(\"/hasMultiVisualizations\");\n\t}\n\n\t/**\n\t * Method to suspend search on the filter bar. The initial loading of data is disabled based on the manifest configuration InitLoad - Disabled/Auto.\n\t * It is enabled later when the view state is set, when it is possible to realize if there are default filters.\n\t */\n\t_disableInitLoad(): void {\n\t\tconst filterBar = this._getFilterBarControl();\n\t\t// check for filter bar hidden\n\t\tif (filterBar) {\n\t\t\tfilterBar.enableRequests(false);\n\t\t}\n\t}\n\n\t/**\n\t * Method called by flex to determine if the applyAutomatically setting on the variant is valid.\n\t * Called only for Standard Variant and only when there is display text set for applyAutomatically (FE only sets it for Auto).\n\t * @returns Boolean true if data should be loaded automatically, false otherwise\n\t */\n\t_applyAutomaticallyOnStandardVariant(): boolean {\n\t\t// We always return false and take care of it when view state is set\n\t\treturn false;\n\t}\n\n\t/**\n\t * Configure the settings for initial load based on\n\t * - manifest setting initLoad - Enabled/Disabled/Auto\n\t * - user's setting of applyAutomatically on variant\n\t * - if there are default filters\n\t * We disable the filter bar search at the beginning and enable it when view state is set.\n\t */\n\t_setInitLoad(): void {\n\t\t// if initLoad is Disabled or Auto, switch off filter bar search temporarily at start\n\t\tif (!this._isInitLoadEnabled()) {\n\t\t\tthis._disableInitLoad();\n\t\t}\n\t\t// set hook for flex for when standard variant is set (at start or by user at runtime)\n\t\t// required to override the user setting 'apply automatically' behaviour if there are no filters\n\t\tconst variantManagementId = ListReportTemplating.getVariantBackReference(\n\t\t\tthis.getView().getViewData(),\n\t\t\tthis._getPageModel()?.getData() as ListReportDefinition\n\t\t);\n\t\tconst variantManagement = variantManagementId && (this.getView().byId(variantManagementId) as VariantManagement);\n\t\tif (variantManagement) {\n\t\t\t(\n\t\t\t\tvariantManagement as { registerApplyAutomaticallyOnStandardVariant?: Function }\n\t\t\t)?.registerApplyAutomaticallyOnStandardVariant?.(this._applyAutomaticallyOnStandardVariant.bind(this));\n\t\t}\n\t}\n\n\t_setShareModel(): void {\n\t\t// TODO: deactivated for now - currently there is no _templPriv anymore, to be discussed\n\t\t// this method is currently not called anymore from the init method\n\n\t\tconst fnGetUser = ObjectPath.get(\"sap.ushell.Container.getUser\");\n\t\t//var oManifest = this.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry(\"sap.ui\");\n\t\t//var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) || \"\";\n\n\t\t//shareModel: Holds all the sharing relevant information and info used in XML view\n\t\tconst oShareInfo = {\n\t\t\tbookmarkTitle: document.title, //To name the bookmark according to the app title.\n\t\t\tbookmarkCustomUrl: function (): string {\n\t\t\t\tconst sHash = hasher.getHash();\n\t\t\t\treturn sHash ? `#${sHash}` : window.location.href;\n\t\t\t},\n\t\t\t/*\n\t\t\t\t\t\t\tTo be activated once the FLP shows the count - see comment above\n\t\t\t\t\t\t\tbookmarkServiceUrl: function() {\n\t\t\t\t\t\t\t\t//var oTable = oTable.getInnerTable(); oTable is already the sap.fe table (but not the inner one)\n\t\t\t\t\t\t\t\t// we should use table.getListBindingInfo instead of the binding\n\t\t\t\t\t\t\t\tvar oBinding = oTable.getBinding(\"rows\") || oTable.getBinding(\"items\");\n\t\t\t\t\t\t\t\treturn oBinding ? fnGetDownloadUrl(oBinding) : \"\";\n\t\t\t\t\t\t\t},*/\n\t\t\tisShareInJamActive: !!fnGetUser && fnGetUser().isJamActive()\n\t\t};\n\n\t\tconst oTemplatePrivateModel = this.getOwnerComponent().getModel(\"_templPriv\") as JSONModel;\n\t\toTemplatePrivateModel.setProperty(\"/listReport/share\", oShareInfo);\n\t}\n\n\t/**\n\t * Method to update the local UI model of the page with the fields that are not applicable to the filter bar (this is specific to the ALP scenario).\n\t * @param oInternalModelContext The internal model context\n\t * @param oFilterBar MDC filter bar\n\t */\n\t_updateALPNotApplicableFields(oInternalModelContext: InternalModelContext, oFilterBar: FilterBar): void {\n\t\tconst mCache: Record<string, string[]> = {};\n\t\tconst ignoredFields: Record<string, string[]> = {},\n\t\t\taTables = this._getControls(\"table\"),\n\t\t\taCharts = this._getControls(\"Chart\");\n\n\t\tif (!aTables.length || !aCharts.length) {\n\t\t\t// If there's not a table and a chart, we're not in the ALP case\n\t\t\treturn;\n\t\t}\n\n\t\t// For the moment, there's nothing for tables...\n\t\taCharts.forEach(function (oChart) {\n\t\t\tconst sChartEntityPath = oChart.data(\"targetCollectionPath\"),\n\t\t\t\tsChartEntitySet = sChartEntityPath.slice(1),\n\t\t\t\tsCacheKey = `${sChartEntitySet}Chart`;\n\t\t\tif (!mCache[sCacheKey]) {\n\t\t\t\tmCache[sCacheKey] = FilterUtils.getNotApplicableFilters(oFilterBar, oChart);\n\t\t\t}\n\t\t\tignoredFields[sCacheKey] = mCache[sCacheKey];\n\t\t});\n\t\toInternalModelContext.setProperty(\"controls/ignoredFields\", ignoredFields);\n\t}\n\n\t/**\n\t * Provides the setting whether FilterBar is hidden based on the manifest setting 'hideFilterBar'.\n\t * Should be used in combination with _isFilterBarHiddenUsed as it may have overridden this setting.\n\t * @returns True if the FilterBar is hidden, false if unknown\n\t */\n\t_isFilterBarHidden(): boolean {\n\t\treturn this.getView().getViewData().hideFilterBar || false;\n\t}\n\n\t/**\n\t * Provides the setting whether FilterBar is hidden but still exists based on the manifest setting 'useHiddenFilterBar'.\n\t * Should be used in combination with _isFilterBarHidden as it can also hide the FilterBar.\n\t * @returns True if the FilterBar is hidden, false if unknown\n\t */\n\t_isFilterBarHiddenUsed(): boolean {\n\t\treturn this.getView().getViewData().useHiddenFilterBar || false;\n\t}\n\n\t_getApplyAutomaticallyOnVariant(variantManagement: VariantManagement, key: string | undefined | null): Boolean {\n\t\tif (!variantManagement || !key) {\n\t\t\treturn false;\n\t\t}\n\t\tconst variants = variantManagement.getVariants();\n\t\tconst currentVariant = variants.find(function (variant) {\n\t\t\treturn variant && variant.getKey() === key;\n\t\t});\n\t\treturn (currentVariant && currentVariant.getProperty(\"executeOnSelect\")) || false;\n\t}\n\n\t_shouldAutoTriggerSearch(oVM: VariantManagement | null | undefined): boolean {\n\t\tif (\n\t\t\tthis.getView().getViewData().initialLoad === InitialLoadMode.Auto &&\n\t\t\t(!oVM || oVM.getStandardVariantKey() === oVM.getCurrentVariantKey())\n\t\t) {\n\t\t\tconst oFilterBar = this._getFilterBarControl();\n\t\t\tif (oFilterBar) {\n\t\t\t\tconst oConditions = oFilterBar.getConditions();\n\t\t\t\tfor (const sKey in oConditions) {\n\t\t\t\t\t// ignore filters starting with $ (e.g. $search, $editState)\n\t\t\t\t\tif (oVM && !sKey.startsWith(\"$\") && Array.isArray(oConditions[sKey]) && oConditions[sKey].length) {\n\t\t\t\t\t\t// load data as per user's setting of applyAutomatically on the variant\n\t\t\t\t\t\tconst standardVariant = oVM.getVariants().find((variant) => {\n\t\t\t\t\t\t\treturn variant.getKey() === oVM.getCurrentVariantKey();\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn standardVariant && standardVariant.getExecuteOnSelect();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t_updateTable(oTable: Table): void {\n\t\tif (!oTable.isTableBound() || this.hasPendingChartChanges) {\n\t\t\toTable.rebind();\n\t\t\tthis.hasPendingChartChanges = false;\n\t\t}\n\t}\n\n\t_updateChart(oChart: Chart): void {\n\t\tconst oInnerChart = (oChart.getControlDelegate() as typeof ChartDelegate)._getChart(oChart);\n\t\tif (!(oInnerChart && oInnerChart.isBound(\"data\")) || this.hasPendingTableChanges) {\n\t\t\t(oChart.getControlDelegate() as typeof ChartDelegate).rebind(oChart, oInnerChart.getBindingInfo(\"data\"));\n\t\t\tthis.hasPendingTableChanges = false;\n\t\t}\n\t}\n\n\t/**\n\t * Set the visibility of the filter toggle button.\n\t * @param buttonVisible Filter toggle button visibility\n\t */\n\tsetFilterToggleVisibility(buttonVisible: boolean): void {\n\t\tconst filterBar = this._getFilterBarControl();\n\t\tfilterBar?.getSegmentedButton()?.setVisible(buttonVisible);\n\t}\n\n\thandlers = {\n\t\tonInlineEditSave(this: ListReportController): void {\n\t\t\tthis.inlineEditFlow.inlineEditSave();\n\t\t},\n\t\tonFilterSearch(this: ListReportController): void {\n\t\t\tconst filterBarAPI = this._getFilterBarControl()!.getParent() as FilterBarAPI;\n\t\t\tfilterBarAPI.triggerSearch();\n\t\t},\n\t\tonFiltersChanged(this: ListReportController, oEvent: FilterBarBase$FiltersChangedEvent): void {\n\t\t\tconst oFilterBar = this._getFilterBarControl();\n\t\t\tif (oFilterBar) {\n\t\t\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\t\t\t// Pending filters into FilterBar to be used for custom views\n\t\t\t\tthis.onPendingFilters();\n\n\t\t\t\tif (oInternalModelContext && oEvent.getParameter(\"conditionsBased\")) {\n\t\t\t\t\toInternalModelContext.setProperty(\"hasPendingFilters\", true);\n\t\t\t\t}\n\t\t\t\tif (oInternalModelContext) {\n\t\t\t\t\tthis._storeFilterBarSelectionVariant(oFilterBar, oInternalModelContext);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonVariantSelected(this: ListReportController, oEvent: VariantManagement$SelectEvent): void {\n\t\t\tconst parameters = (oEvent as UI5Event).getParameters() as Record<string, unknown>;\n\t\t\tconst variantManagement = parameters.originalSource as VariantManagement;\n\t\t\tconst currentVariantKey = oEvent.getParameter(\"key\");\n\t\t\tconst multiModeControl = this._getMultiModeControl();\n\n\t\t\tif (multiModeControl && !variantManagement?.getParent()?.isA(\"sap.ui.mdc.ActionToolbar\")) {\n\t\t\t\t//Not a Control Variant\n\t\t\t\tmultiModeControl?.invalidateContent();\n\t\t\t\tmultiModeControl?.setFreezeContent(true);\n\t\t\t}\n\n\t\t\t// setTimeout cause the variant needs to be applied before judging the auto search or updating the app state\n\t\t\tsetTimeout((): void => {\n\t\t\t\tconst filterBar = this._getFilterBarControl();\n\t\t\t\tconst dynamicPage = this._getDynamicListReportControl();\n\t\t\t\tconst firstEmptyMandatoryField = filterBar?.getFilterItems().find(function (filterItem) {\n\t\t\t\t\treturn filterItem.getRequired() && filterItem.getConditions().length === 0;\n\t\t\t\t});\n\t\t\t\tif (firstEmptyMandatoryField) {\n\t\t\t\t\tdynamicPage.setHeaderExpanded(true);\n\t\t\t\t}\n\t\t\t\tif (this._shouldAutoTriggerSearch(variantManagement)) {\n\t\t\t\t\t// the app state will be updated via onSearch handler\n\t\t\t\t\tconst filterBarAPI = this._getFilterBarControl()!.getParent() as FilterBarAPI;\n\t\t\t\t\tfilterBarAPI.triggerSearch();\n\t\t\t\t} else if (!this._getApplyAutomaticallyOnVariant(variantManagement, currentVariantKey)) {\n\t\t\t\t\tmultiModeControl?.setFreezeContent(false);\n\t\t\t\t\tthis.getExtensionAPI().updateAppState();\n\t\t\t\t\tdynamicPage.setHeaderExpanded(true);\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t},\n\t\tonVariantSaved(this: ListReportController): void {\n\t\t\t//TODO: Should remove this setTimeOut once Variant Management provides an api to fetch the current variant key on save!!!\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.getExtensionAPI().updateAppState();\n\t\t\t}, 1000);\n\t\t},\n\t\tonSearch(this: ListReportController): void {\n\t\t\tconst oFilterBar = this._getFilterBarControl() as FilterBar; // onsearch is called only if the filterbar exists\n\t\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\t\tconst oMdcChart = this.getChartControl();\n\t\t\tconst bHideDraft = FilterUtils.getEditStateIsHideDraft(oFilterBar.getConditions());\n\t\t\toInternalModelContext.setProperty(\"hasPendingFilters\", false);\n\t\t\toInternalModelContext.setProperty(\"hideDraftInfo\", bHideDraft);\n\t\t\tconst dynamicPage = this._getDynamicListReportControl();\n\t\t\tif (!this._getMultiModeControl()) {\n\t\t\t\tthis._updateALPNotApplicableFields(oInternalModelContext, oFilterBar);\n\t\t\t}\n\t\t\tif (oMdcChart) {\n\t\t\t\t// disable bound actions TODO: this clears everything for the chart?\n\t\t\t\t(oMdcChart.getBindingContext(\"internal\") as InternalModelContext).setProperty(\"\", {});\n\n\t\t\t\tconst oPageInternalModelContext = oMdcChart.getBindingContext(\"pageInternal\") as InternalModelContext;\n\t\t\t\tconst sTemplateContentView = oPageInternalModelContext.getProperty(`${oPageInternalModelContext.getPath()}/alpContentView`);\n\t\t\t\tif (sTemplateContentView === TemplateContentView.Chart) {\n\t\t\t\t\tthis.hasPendingChartChanges = true;\n\t\t\t\t}\n\t\t\t\tif (sTemplateContentView === TemplateContentView.Table) {\n\t\t\t\t\tthis.hasPendingTableChanges = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//logic for expansion or collapse of filter bar starts\n\t\t\tif (!Device.system.desktop && oInternalModelContext.getProperty(\"searchTriggeredByInitialLoad\") === true) {\n\t\t\t\tif (dynamicPage.getHeaderExpanded() !== false) {\n\t\t\t\t\tdynamicPage.setHeaderExpanded(false);\n\t\t\t\t}\n\t\t\t\t//setting it to false so that further search or 'Go' triggers won't collapse the filter bar\n\t\t\t\toInternalModelContext.setProperty(\"searchTriggeredByInitialLoad\", false);\n\t\t\t}\n\n\t\t\t// store filter bar conditions to use later while navigation\n\t\t\tStateUtil.retrieveExternalState(oFilterBar)\n\t\t\t\t.then((oExternalState) => {\n\t\t\t\t\tthis.filterBarConditions = oExternalState.filter;\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(function (oError: unknown) {\n\t\t\t\t\tLog.error(\"Error while retrieving the external state\", oError as string);\n\t\t\t\t});\n\n\t\t\tif (Device.system.phone) {\n\t\t\t\tconst oDynamicPage = this._getDynamicListReportControl();\n\t\t\t\tif (!this._isInitLoadEnabled()) {\n\t\t\t\t\toDynamicPage.setHeaderExpanded(true);\n\t\t\t\t} else {\n\t\t\t\t\toDynamicPage.setHeaderExpanded(false);\n\t\t\t\t\tthis.setFilterToggleVisibility(false);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Triggers an outbound navigation when a user chooses the chevron.\n\t\t * @param oController\n\t\t * @param sOutboundTarget Name of the outbound target (needs to be defined in the manifest)\n\t\t * @param oContext The context that contains the data for the target app\n\t\t * @param sCreatePath Create path when the chevron is created.\n\t\t * @returns Promise which is resolved once the navigation is triggered\n\t\t * @final\n\t\t */\n\t\tasync onChevronPressNavigateOutBound(\n\t\t\toController: ListReportController,\n\t\t\tsOutboundTarget: string,\n\t\t\toContext: Context,\n\t\t\tsCreatePath: string\n\t\t): Promise<void> {\n\t\t\treturn oController._intentBasedNavigation.onChevronPressNavigateOutBound(oController, sOutboundTarget, oContext, sCreatePath);\n\t\t},\n\t\tonChartSelectionChanged(this: ListReportController, oEvent: UI5Event<{ data: unknown }, ChartType>): void {\n\t\t\tconst oMdcChart = oEvent.getSource().getContent() as Chart,\n\t\t\t\toTable = this._getTable(),\n\t\t\t\taData = oEvent.getParameter(\"data\"),\n\t\t\t\toInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\t\tif (aData) {\n\t\t\t\tChartUtils.setChartFilters(oMdcChart);\n\t\t\t}\n\t\t\tconst sTemplateContentView = oInternalModelContext.getProperty(`${oInternalModelContext.getPath()}/alpContentView`);\n\t\t\tif (sTemplateContentView === TemplateContentView.Chart) {\n\t\t\t\tthis.hasPendingChartChanges = true;\n\t\t\t} else if (oTable) {\n\t\t\t\toTable.rebind();\n\t\t\t\tthis.hasPendingChartChanges = false;\n\t\t\t}\n\t\t},\n\t\tonSegmentedButtonPressed(this: ListReportController, oEvent: UI5Event): void {\n\t\t\tconst selectedKey: string =\n\t\t\t\t(oEvent.getParameters() as { selectedKey: string }).selectedKey || (oEvent.getParameters() as { key: string }).key;\n\t\t\tconst oInternalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext;\n\t\t\toInternalModelContext.setProperty(\"alpContentView\", selectedKey);\n\t\t\tconst oChart = this.getChartControl();\n\t\t\tconst oTable = this._getTable();\n\n\t\t\tswitch (selectedKey) {\n\t\t\t\tcase TemplateContentView.Table:\n\t\t\t\t\tif (oTable) {\n\t\t\t\t\t\tthis._updateTable(oTable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase TemplateContentView.Chart:\n\t\t\t\t\tif (oChart) {\n\t\t\t\t\t\tthis._updateChart(oChart as Chart);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase TemplateContentView.Hybrid:\n\t\t\t\t\tif (oTable) {\n\t\t\t\t\t\tthis._updateTable(oTable);\n\t\t\t\t\t}\n\t\t\t\t\tif (oChart) {\n\t\t\t\t\t\tthis._updateChart(oChart as Chart);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.getExtensionAPI().updateAppState();\n\t\t\t// setTimeout cause the variant needs to be applied before judging the auto search or updating the app state\n\t\t\tthis.focusHandlingForSegmentedButton(selectedKey);\n\t\t},\n\t\tonDynamicPageTitleStateChanged(this: ListReportController, event: DynamicPageTitle$StateChangeEvent): void {\n\t\t\tconst filterBar = this._getFilterBarControl();\n\t\t\tif (filterBar) {\n\t\t\t\tthis.setFilterToggleVisibility(!!event.getParameter(\"isExpanded\"));\n\t\t\t\tif (event.getParameter(\"isExpanded\") === false) {\n\t\t\t\t\tInvisibleMessage.getInstance().announce(\n\t\t\t\t\t\tfilterBar.getAssignedFiltersText().filtersText as string,\n\t\t\t\t\t\tInvisibleMessageMode.Assertive\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Handles focus for the segmented button based on the selected key.\n\t * @param selectedKey The key representing the selected template content view\n\t */\n\tfocusHandlingForSegmentedButton(selectedKey: string): void {\n\t\tconst oChart = this.getChartControl();\n\t\tconst oTable = this._getTable();\n\t\tlet segmentedButtonId: string;\n\t\tswitch (selectedKey) {\n\t\t\tcase TemplateContentView.Table:\n\t\t\t\tsegmentedButtonId = generate([oTable?.getId(), \"SegmentedButton\", \"TemplateContentView\"]);\n\t\t\t\tthis.addFocusDelegate(segmentedButtonId);\n\t\t\t\tbreak;\n\t\t\tcase TemplateContentView.Chart:\n\t\t\tcase TemplateContentView.Hybrid:\n\t\t\t\tsegmentedButtonId = generate([oChart?.getId(), \"SegmentedButton\", \"TemplateContentView\"]);\n\t\t\t\tthis.addFocusDelegate(segmentedButtonId);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Adds an event delegate to a control and sets focus on it.\n\t * @param segmentedButtonId The control to which the event delegate will be added.\n\t */\n\taddFocusDelegate(segmentedButtonId: string): void {\n\t\tconst segmentedButton = UI5Element.getElementById(segmentedButtonId);\n\t\tif (segmentedButton) {\n\t\t\tconst eventDelegate = {\n\t\t\t\tonAfterRendering: (): void => {\n\t\t\t\t\tsegmentedButton.focus();\n\t\t\t\t\tsegmentedButton.removeEventDelegate(eventDelegate);\n\t\t\t\t}\n\t\t\t};\n\t\t\tsegmentedButton.addEventDelegate(eventDelegate);\n\t\t}\n\t}\n\n\t/**\n\t * Method to update the local UI model of the page with the Selection Variant.\n\t * @param filterBar MDC filter bar\n\t * @param internalModelContext The internal model context\n\t */\n\tasync _storeFilterBarSelectionVariant(filterBar: FilterBar, internalModelContext: InternalModelContext): Promise<void> {\n\t\ttry {\n\t\t\tconst filterBarAPI = filterBar.getParent() as FilterBarAPI;\n\t\t\tconst sv = await filterBarAPI.getSelectionVariant();\n\t\t\tinternalModelContext.setProperty(\"filterBarSelectionVariant\", sv);\n\t\t} catch (err: unknown) {\n\t\t\tconst message = err instanceof Error ? err.message : String(err);\n\t\t\tLog.error(`FE : Error fetching selection variant on filter change: ${message}`);\n\t\t}\n\t}\n\n\t/**\n\t * Method to get the Selection Variant from internal model.\n\t * @returns SelectionVariant\n\t */\n\tgetFilterBarSelectionVariant(): SelectionVariant {\n\t\tconst internalModelContext = this.getView().getBindingContext(\"internal\") as InternalModelContext | undefined;\n\t\treturn (internalModelContext?.getProperty(\"filterBarSelectionVariant\") as SelectionVariant) || new SelectionVariant();\n\t}\n}\n\nexport default ListReportController;\n"],"mappings":"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","ignoreList":[]}