{"version":3,"file":"BatchParser.js","names":["split","input","LF","CRLF","a","pL","p1","indexOf","p2","push","substring","length","BatchContent","data","this","type","stringData","stringSplit","pos","_exports","_proto","prototype","lookLine","readLine","inc","Batch","isChangeSet","boundary","changeSetErrorResponse","parts","getBoundary","headerValue","l","element","ll","trim","readHeader","line","colPos","Error","s0","s1","name","toLowerCase","value","readAppHttp","batchContent","headers","payload","state","rawUrl","undefined","h","method","url","actualBody","JSON","parse","e","body","extractContent","content","contentId","changeSetBoundary","parseBatch","parsePart","boundaryNext","boundaryEnd","isChangeset","arguments","batch","part"],"sources":["./BatchParser.ts"],"sourcesContent":["function split(input: string): string[] {\n\tconst LF = \"\\n\";\n\tconst CRLF = \"\\r\\n\";\n\tconst a = [];\n\n\tlet pL = 0;\n\tlet p1 = input.indexOf(CRLF, pL);\n\tlet p2 = input.indexOf(LF, pL);\n\n\twhile (p1 !== -1 || p2 !== -1) {\n\t\tif (p1 !== -1 && p1 <= p2) {\n\t\t\ta.push(input.substring(pL, p1));\n\t\t\tpL = p1 + 2;\n\t\t} else {\n\t\t\ta.push(input.substring(pL, p2));\n\t\t\tpL = p2 + 1;\n\t\t}\n\t\tp1 = input.indexOf(CRLF, pL);\n\t\tp2 = input.indexOf(LF, pL);\n\t}\n\tif (pL < input.length) {\n\t\ta.push(input.substring(pL));\n\t}\n\treturn a;\n}\n\n/**\n *\n */\nexport class BatchContent {\n\ttype: number;\n\n\tstringData: string;\n\n\tstringSplit: string[];\n\n\tpos: number;\n\n\tpublic constructor(data: string) {\n\t\tthis.type = 0;\n\t\tthis.stringData = data;\n\t\tthis.stringSplit = split(data);\n\t\tthis.pos = 0;\n\t}\n\n\tpublic lookLine(): string {\n\t\treturn this.stringSplit[this.pos];\n\t}\n\n\tpublic readLine(): string {\n\t\treturn this.stringSplit[this.pos++];\n\t}\n\n\tpublic inc(): void {\n\t\tthis.pos++;\n\t}\n}\n\nexport class Batch {\n\tchangeSetErrorResponse: any;\n\n\tparts: BatchPart[];\n\n\tpublic constructor(\n\t\tpublic isChangeSet: boolean,\n\t\tpublic boundary: string\n\t) {\n\t\tif (this.isChangeSet) {\n\t\t\tthis.changeSetErrorResponse = null;\n\t\t}\n\t\tthis.parts = [];\n\t}\n}\n\nexport function getBoundary(headerValue: string): string {\n\tconst l = headerValue.split(\";\");\n\n\tfor (const element of l) {\n\t\tconst ll = element.split(\"=\");\n\t\tif (ll[0].trim() === \"boundary\") {\n\t\t\treturn ll[1];\n\t\t}\n\t}\n\treturn \"\";\n}\n\nfunction readHeader(line: string): any {\n\tconst colPos = line.indexOf(\":\");\n\tif (colPos === -1) {\n\t\tthrow new Error('Invalid header \"content-type\" in batch part');\n\t}\n\n\tconst s0 = line.substring(0, colPos);\n\tconst s1 = line.substring(colPos + 1);\n\treturn {\n\t\tname: s0.toLowerCase(),\n\t\tvalue: s1.trim()\n\t};\n}\nexport type BatchPart = {\n\turl: string;\n\tmethod: string;\n\tbody: any;\n\theaders: Record<string, string>;\n\tcontentId?: string;\n};\n\nfunction readAppHttp(batchContent: BatchContent, boundary: string): BatchPart {\n\tconst headers: any = {};\n\tconst payload = [];\n\n\tlet state = 0; //read url\n\tconst rawUrl = batchContent.readLine();\n\n\tstate = 1; //read header\n\tlet line = batchContent.lookLine();\n\n\twhile (line !== null && line !== undefined && line.indexOf(boundary) !== 0) {\n\t\tif (state === 1) {\n\t\t\tif (line.length === 0) {\n\t\t\t\tstate = 2; //read body\n\t\t\t\tbatchContent.inc();\n\t\t\t} else {\n\t\t\t\tconst h = readHeader(line);\n\t\t\t\theaders[h.name] = h.value;\n\t\t\t\tbatchContent.inc();\n\t\t\t}\n\t\t} else if (state === 2) {\n\t\t\tpayload.push(line);\n\t\t\tbatchContent.inc();\n\t\t}\n\t\tline = batchContent.lookLine();\n\t}\n\tif (line === undefined) {\n\t\tthrow new Error(\"Invalid boundary while parsing batch request. Expect boundary \" + boundary);\n\t}\n\n\tconst [method, url] = rawUrl.split(\" \");\n\n\tlet actualBody: any;\n\tif (payload.length > 0) {\n\t\ttry {\n\t\t\tactualBody = JSON.parse(payload[0]);\n\t\t} catch (e) {\n\t\t\tactualBody = payload[0];\n\t\t}\n\t}\n\treturn {\n\t\turl: `/${url}`,\n\t\tmethod: method,\n\t\theaders: headers,\n\t\tbody: actualBody\n\t};\n}\n\nfunction extractContent(batchContent: BatchContent, headers: any, boundary: string): any {\n\tlet content;\n\tif (!headers[\"content-type\"]) {\n\t\tthrow new Error('Missing header \"content-type\" in batch part');\n\t} else if (headers[\"content-type\"] === \"application/http\") {\n\t\tcontent = readAppHttp(batchContent, boundary);\n\t\tif (headers[\"content-id\"]) {\n\t\t\tcontent.contentId = headers[\"content-id\"];\n\t\t}\n\t} else if (headers[\"content-type\"].indexOf(\"multipart/mixed;\") > -1) {\n\t\tconst changeSetBoundary = getBoundary(headers[\"content-type\"]);\n\t\tcontent = parseBatch(batchContent, changeSetBoundary, true);\n\t}\n\treturn content;\n}\n\nfunction parsePart(batchContent: BatchContent, boundary: string): any {\n\tconst boundaryNext = boundary;\n\tconst boundaryEnd = boundary + \"--\";\n\tconst headers: any = {};\n\tlet content;\n\n\tlet state = 1; //read header\n\tlet line = batchContent.lookLine();\n\n\twhile (line !== null && line !== undefined && line !== boundaryNext && line !== boundaryEnd) {\n\t\tif (state === 1) {\n\t\t\tif (line.length === 0) {\n\t\t\t\tstate = 2; //read body\n\t\t\t\tbatchContent.inc();\n\t\t\t} else {\n\t\t\t\tconst h = readHeader(line);\n\t\t\t\theaders[h.name] = h.value;\n\t\t\t\tbatchContent.inc();\n\t\t\t}\n\t\t} else if (state === 2) {\n\t\t\tcontent = extractContent(batchContent, headers, boundary);\n\t\t}\n\t\tline = batchContent.lookLine();\n\t}\n\tif (line === undefined) {\n\t\tthrow new Error(\"Invalid boundary while parsing batch request. Expect boundary \" + boundary);\n\t}\n\n\treturn content;\n}\n\nexport function parseBatch(content: BatchContent, boundary: string, isChangeset = false): any {\n\tconst boundaryNext = \"--\" + boundary;\n\tconst boundaryEnd = \"--\" + boundary + \"--\";\n\n\tconst batch = new Batch(isChangeset, boundary);\n\n\tlet part;\n\n\tlet line = content.readLine();\n\twhile (line !== null && line !== undefined && line !== boundaryNext) {\n\t\t//read lines before first boundary\n\t\tline = content.readLine();\n\t}\n\tif (line === undefined) {\n\t\tthrow new Error(\"Invalid boundary while parsing batch request\");\n\t}\n\t//line is now read boundary\n\tline = content.lookLine(); //read line behind\n\n\twhile (line !== null && line !== undefined && line !== boundaryEnd) {\n\t\tpart = parsePart(content, boundaryNext) as BatchPart;\n\t\tif (part) {\n\t\t\tbatch.parts.push(part);\n\t\t}\n\t\tline = content.lookLine(); //now on boundary\n\t\tif (line === boundaryNext) {\n\t\t\tline = content.readLine(); //consume boundaryNext\n\t\t}\n\t}\n\n\tcontent.readLine(); //consume boundaryEnd\n\tline = content.lookLine(); //read line behind\n\twhile (line !== null && line !== undefined && line.length === 0) {\n\t\t//read empty lines after first boundary end\n\t\tcontent.readLine();\n\t\tline = content.lookLine();\n\t}\n\n\treturn batch;\n}\n"],"mappings":"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","ignoreList":[]}