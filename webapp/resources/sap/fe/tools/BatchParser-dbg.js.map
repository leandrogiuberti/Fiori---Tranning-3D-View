{"version":3,"names":["split","input","LF","CRLF","a","pL","p1","indexOf","p2","push","substring","length","BatchContent","data","type","stringData","stringSplit","pos","_exports","_proto","prototype","lookLine","readLine","inc","Batch","isChangeSet","boundary","changeSetErrorResponse","parts","getBoundary","headerValue","l","element","ll","trim","readHeader","line","colPos","Error","s0","s1","name","toLowerCase","value","readAppHttp","batchContent","headers","payload","state","rawUrl","undefined","h","method","url","actualBody","JSON","parse","e","body","extractContent","content","contentId","changeSetBoundary","parseBatch","parsePart","boundaryNext","boundaryEnd","isChangeset","arguments","batch","part"],"sourceRoot":".","sources":["BatchParser.ts"],"sourcesContent":["function split(input: string): string[] {\n\tconst LF = \"\\n\";\n\tconst CRLF = \"\\r\\n\";\n\tconst a = [];\n\n\tlet pL = 0;\n\tlet p1 = input.indexOf(CRLF, pL);\n\tlet p2 = input.indexOf(LF, pL);\n\n\twhile (p1 !== -1 || p2 !== -1) {\n\t\tif (p1 !== -1 && p1 <= p2) {\n\t\t\ta.push(input.substring(pL, p1));\n\t\t\tpL = p1 + 2;\n\t\t} else {\n\t\t\ta.push(input.substring(pL, p2));\n\t\t\tpL = p2 + 1;\n\t\t}\n\t\tp1 = input.indexOf(CRLF, pL);\n\t\tp2 = input.indexOf(LF, pL);\n\t}\n\tif (pL < input.length) {\n\t\ta.push(input.substring(pL));\n\t}\n\treturn a;\n}\n\n/**\n *\n */\nexport class BatchContent {\n\ttype: number;\n\n\tstringData: string;\n\n\tstringSplit: string[];\n\n\tpos: number;\n\n\tpublic constructor(data: string) {\n\t\tthis.type = 0;\n\t\tthis.stringData = data;\n\t\tthis.stringSplit = split(data);\n\t\tthis.pos = 0;\n\t}\n\n\tpublic lookLine(): string {\n\t\treturn this.stringSplit[this.pos];\n\t}\n\n\tpublic readLine(): string {\n\t\treturn this.stringSplit[this.pos++];\n\t}\n\n\tpublic inc(): void {\n\t\tthis.pos++;\n\t}\n}\n\nexport class Batch {\n\tchangeSetErrorResponse: any;\n\n\tparts: BatchPart[];\n\n\tpublic constructor(\n\t\tpublic isChangeSet: boolean,\n\t\tpublic boundary: string\n\t) {\n\t\tif (this.isChangeSet) {\n\t\t\tthis.changeSetErrorResponse = null;\n\t\t}\n\t\tthis.parts = [];\n\t}\n}\n\nexport function getBoundary(headerValue: string): string {\n\tconst l = headerValue.split(\";\");\n\n\tfor (const element of l) {\n\t\tconst ll = element.split(\"=\");\n\t\tif (ll[0].trim() === \"boundary\") {\n\t\t\treturn ll[1];\n\t\t}\n\t}\n\treturn \"\";\n}\n\nfunction readHeader(line: string): any {\n\tconst colPos = line.indexOf(\":\");\n\tif (colPos === -1) {\n\t\tthrow new Error('Invalid header \"content-type\" in batch part');\n\t}\n\n\tconst s0 = line.substring(0, colPos);\n\tconst s1 = line.substring(colPos + 1);\n\treturn {\n\t\tname: s0.toLowerCase(),\n\t\tvalue: s1.trim()\n\t};\n}\nexport type BatchPart = {\n\turl: string;\n\tmethod: string;\n\tbody: any;\n\theaders: Record<string, string>;\n\tcontentId?: string;\n};\n\nfunction readAppHttp(batchContent: BatchContent, boundary: string): BatchPart {\n\tconst headers: any = {};\n\tconst payload = [];\n\n\tlet state = 0; //read url\n\tconst rawUrl = batchContent.readLine();\n\n\tstate = 1; //read header\n\tlet line = batchContent.lookLine();\n\n\twhile (line !== null && line !== undefined && line.indexOf(boundary) !== 0) {\n\t\tif (state === 1) {\n\t\t\tif (line.length === 0) {\n\t\t\t\tstate = 2; //read body\n\t\t\t\tbatchContent.inc();\n\t\t\t} else {\n\t\t\t\tconst h = readHeader(line);\n\t\t\t\theaders[h.name] = h.value;\n\t\t\t\tbatchContent.inc();\n\t\t\t}\n\t\t} else if (state === 2) {\n\t\t\tpayload.push(line);\n\t\t\tbatchContent.inc();\n\t\t}\n\t\tline = batchContent.lookLine();\n\t}\n\tif (line === undefined) {\n\t\tthrow new Error(\"Invalid boundary while parsing batch request. Expect boundary \" + boundary);\n\t}\n\n\tconst [method, url] = rawUrl.split(\" \");\n\n\tlet actualBody: any;\n\tif (payload.length > 0) {\n\t\ttry {\n\t\t\tactualBody = JSON.parse(payload[0]);\n\t\t} catch (e) {\n\t\t\tactualBody = payload[0];\n\t\t}\n\t}\n\treturn {\n\t\turl: `/${url}`,\n\t\tmethod: method,\n\t\theaders: headers,\n\t\tbody: actualBody\n\t};\n}\n\nfunction extractContent(batchContent: BatchContent, headers: any, boundary: string): any {\n\tlet content;\n\tif (!headers[\"content-type\"]) {\n\t\tthrow new Error('Missing header \"content-type\" in batch part');\n\t} else if (headers[\"content-type\"] === \"application/http\") {\n\t\tcontent = readAppHttp(batchContent, boundary);\n\t\tif (headers[\"content-id\"]) {\n\t\t\tcontent.contentId = headers[\"content-id\"];\n\t\t}\n\t} else if (headers[\"content-type\"].indexOf(\"multipart/mixed;\") > -1) {\n\t\tconst changeSetBoundary = getBoundary(headers[\"content-type\"]);\n\t\tcontent = parseBatch(batchContent, changeSetBoundary, true);\n\t}\n\treturn content;\n}\n\nfunction parsePart(batchContent: BatchContent, boundary: string): any {\n\tconst boundaryNext = boundary;\n\tconst boundaryEnd = boundary + \"--\";\n\tconst headers: any = {};\n\tlet content;\n\n\tlet state = 1; //read header\n\tlet line = batchContent.lookLine();\n\n\twhile (line !== null && line !== undefined && line !== boundaryNext && line !== boundaryEnd) {\n\t\tif (state === 1) {\n\t\t\tif (line.length === 0) {\n\t\t\t\tstate = 2; //read body\n\t\t\t\tbatchContent.inc();\n\t\t\t} else {\n\t\t\t\tconst h = readHeader(line);\n\t\t\t\theaders[h.name] = h.value;\n\t\t\t\tbatchContent.inc();\n\t\t\t}\n\t\t} else if (state === 2) {\n\t\t\tcontent = extractContent(batchContent, headers, boundary);\n\t\t}\n\t\tline = batchContent.lookLine();\n\t}\n\tif (line === undefined) {\n\t\tthrow new Error(\"Invalid boundary while parsing batch request. Expect boundary \" + boundary);\n\t}\n\n\treturn content;\n}\n\nexport function parseBatch(content: BatchContent, boundary: string, isChangeset = false): any {\n\tconst boundaryNext = \"--\" + boundary;\n\tconst boundaryEnd = \"--\" + boundary + \"--\";\n\n\tconst batch = new Batch(isChangeset, boundary);\n\n\tlet part;\n\n\tlet line = content.readLine();\n\twhile (line !== null && line !== undefined && line !== boundaryNext) {\n\t\t//read lines before first boundary\n\t\tline = content.readLine();\n\t}\n\tif (line === undefined) {\n\t\tthrow new Error(\"Invalid boundary while parsing batch request\");\n\t}\n\t//line is now read boundary\n\tline = content.lookLine(); //read line behind\n\n\twhile (line !== null && line !== undefined && line !== boundaryEnd) {\n\t\tpart = parsePart(content, boundaryNext) as BatchPart;\n\t\tif (part) {\n\t\t\tbatch.parts.push(part);\n\t\t}\n\t\tline = content.lookLine(); //now on boundary\n\t\tif (line === boundaryNext) {\n\t\t\tline = content.readLine(); //consume boundaryNext\n\t\t}\n\t}\n\n\tcontent.readLine(); //consume boundaryEnd\n\tline = content.lookLine(); //read line behind\n\twhile (line !== null && line !== undefined && line.length === 0) {\n\t\t//read empty lines after first boundary end\n\t\tcontent.readLine();\n\t\tline = content.lookLine();\n\t}\n\n\treturn batch;\n}\n"],"mappings":"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","ignoreList":[],"file":"BatchParser-dbg.js"}