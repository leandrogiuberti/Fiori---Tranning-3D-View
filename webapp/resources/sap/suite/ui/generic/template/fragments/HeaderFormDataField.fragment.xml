<core:FragmentDefinition xmlns="sap.m" xmlns:core="sap.ui.core" xmlns:sfi="sap.ui.comp.smartfield" xmlns:sfo="sap.ui.comp.smartform" xmlns:fe="sap.suite.ui.generic.template.genericUtilities"
	xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
	template:require="{AH: 'sap/suite/ui/generic/template/js/AnnotationHelper', AHModel: 'sap/ui/model/odata/AnnotationHelper'}">
	<!--
        @classdesc
        @name: Name: sap.suite.ui.generic.template.fragments.SmartFormDataField.fragment.xml
        @description: This fragment contains label value pairs for the smart form derived from UI.DataFields
        @param {Collection(UI.DataField)} [dataField]
    -->

	<template:if test="{= ${dataField>RecordType} === 'com.sap.vocabularies.UI.v1.DataFieldForAnnotation'}">
		<template:then>
			<template:with path="dataField>Target"
						   helper="AHModel.resolvePath" var="contact">
				<HBox binding="{parts: [{path: 'headerFacet>Target'}, {path: 'entitySet>'}], formatter: 'AH.getNavigationPathWithExpand'}"
					visible="{path: 'dataField>', formatter: 'AH.getBindingForHiddenPath'}">
					<Label id="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Label"
						   labelFor="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Field"
						   text="{path: 'dataField>Label', formatter: 'AHModel.format'}"
						   class="sapSmartTemplatesObjectPageHeaderFormLabel sapUiTinyMarginEnd"
						   showColon="true"
					/>
					<fe:Link id="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Field"
						  press="._templateEventHandlers.onContactDetails"
						  ariaLabelledBy="{:= ${parameter>/stableId}.getStableId({type: 'ObjectPageHeader', subType: 'HeaderTitle', sFacet: ${facetId>id}})} header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Label"
 						  binding="{parts: [{path: 'dataField>Target'}, {path: 'entitySet>'}], formatter: 'AH.getNavigationPathWithExpand'}"
						  text="{path: 'contact>fn', formatter: 'AHModel.format'}"
						  class="sapSmartTemplatesObjectPageHeaderFormField">
						<fe:customData>
							<core:CustomData key="Location" value="Header"/>
							<core:CustomData key="contactDetails" value="{= ${path: 'contact>', formatter: 'AH.getCustomDataForContactPopup'}}"/>
						</fe:customData>
					</fe:Link>
				</HBox>
			</template:with>
		</template:then>
		<template:elseif
				test="{= ${dataField>RecordType} === 'com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation'}">
			<HBox binding="{parts: [{path: 'headerFacet>Target'}, {path: 'entitySet>'}], formatter: 'AH.getNavigationPathWithExpand'}"
				visible="{path: 'dataField>', formatter: 'AH.getBindingForHiddenPath'}">
				<Label
					id="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Label"
					text="{parts: [{path: 'dataField>'}, {path: 'entitySet>'}], formatter: 'AH.getLabelForDFwithIBN'}"
					class="sapSmartTemplatesObjectPageHeaderFormLabel sapUiTinyMarginEnd"
					showColon="true"
				/>
				<fe:Link
						id="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Field"
						text="{parts: [{path: 'dataField>'}, {path: 'entitySet>'}], formatter: 'AH.getLinkTextForDFwithIBN'}"
						press="._templateEventHandlers.onDataFieldWithIntentBasedNavigation"
						wrapping="true"
						class="sapSmartTemplatesObjectPageHeaderFormField"
						ariaLabelledBy="{:= ${parameter>/stableId}.getStableId({type: 'ObjectPageHeader', subType: 'HeaderTitle', sFacet: ${facetId>id}})} header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Label"
						accessibleRole="Button">
					<fe:customData>
						<core:CustomData key="SemanticObject" value="{path: 'dataField>SemanticObject', formatter: 'AHModel.format'}"/>
						<core:CustomData key="Action" value="{path: 'dataField>Action', formatter: 'AHModel.format'}"/>
					</fe:customData>
				</fe:Link>
			</HBox>
		</template:elseif>
		<template:elseif
			test="{= ${dataField>RecordType} === 'com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath'}">
			<template:with path="dataField>Value" helper="AHModel.resolvePath" var="dataFieldValue">
				<HBox
					binding="{parts: [{path: 'headerFacet>Target'}, {path: 'entitySet>'}], formatter: 'AH.getNavigationPathWithExpand'}"
					visible="{path: 'dataField>', formatter: 'AH.getBindingForHiddenPath'}" >
					<sfi:SmartLabel
						showColon="true"
						labelFor="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Field"
						class="sapSmartTemplatesObjectPageHeaderFormLabel sapUiTinyMarginEnd" />

					<sfi:SmartField class="sapSmartTemplatesObjectPageHeaderFormField"
						id="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Field"
						value="{path: 'dataField>Value', formatter: 'AH.getDataFieldValueSimplePath'}"
						textLabel="{parts: [{path: 'dataField>'}, {path: 'entitySet>'}, {path: 'headerFacet>'}], formatter: 'AH.getLabelForDFwithIBN'}"
						editable="{ui>/editable}" linkPress="._templateEventHandlers.onDataFieldWithNavigationPath">
						<sfi:configuration>
							<sfi:Configuration
								displayBehaviour="{parts: [{path: 'dataField>'}, {path: 'entitySet>'}], formatter: 'AH.getTextArrangementForSmartControl'}" />
						</sfi:configuration>
						<sfi:customData>
							<core:CustomData key="defaultTextInEditModeSource" value="{path: 'dataFieldValue>', formatter: 'AH.setValidationForValueList'}" />
							<core:CustomData key="Target" value="{dataField>Target/NavigationPropertyPath}" />
						</sfi:customData>
					</sfi:SmartField>
				</HBox>
			</template:with>
		</template:elseif>
		<template:elseif test="{= ${dataField>RecordType} !== 'com.sap.vocabularies.UI.v1.DataFieldForAction'}">
			<template:with path="dataField>Value" helper="AHModel.resolvePath" var="dataFieldValue">
				<HBox binding="{parts: [{path: 'headerFacet>Target'}, {path: 'entitySet>'}], formatter: 'AH.getNavigationPathWithExpand'}"
					visible="{path: 'dataField>', formatter: 'AH.getBindingForHiddenPath'}">
					<sfi:SmartLabel
							id="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Label"
							labelFor="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Field"
							showColon="true"
							class="{= ${dataField>Criticality} ? 'sapSmartTemplatesObjectPageHeaderFormLabel': 'sapSmartTemplatesObjectPageHeaderFormLabelNCriticcal' }  sapUiTinyMarginEnd"/>
					<!-- TODO: Should also work with ...format -->
					<template:with path="headerFacet>Target" helper="AHModel.gotoEntitySet" var="annotation">
						<sfi:SmartField
								id="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Field"
								contextEditable="false" uomEditable="false" enabled="true" clientSideMandatoryCheck="false"
								ariaLabelledBy="{:= ${parameter>/stableId}.getStableId({type: 'ObjectPageHeader', subType: 'HeaderTitle', sFacet: ${facetId>id}})} header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Label"
								value="{parts: [{path: 'dataField>Value'}, {path: 'entitySet>'}], formatter: 'AH.formatWithExpandSimplePath'}"
								textLabel="{= ${dataField>Label} ? ${path: 'dataField>Label', formatter: 'AHModel.simplePath'} : '' }"
								class="sapSmartTemplatesObjectPageHeaderFormField"
								url="{= ${dataField>Url} ? ${path: 'dataField>Url', formatter: 'AHModel.format'} : ''}"
								fetchValueListReadOnly="{parts:[{path: 'parameter>/entityType'},{path: 'dataField>'}], formatter: 'AH.getValueListReadOnly'}"
								initialise="._templateEventHandlers.onSmartFieldInitialise">
							<sfi:semanticObjectController>
								<core:Fragment fragmentName="sap.suite.ui.generic.template.fragments.SemanticObjectControllerForDataField" type="XML"/>
							</sfi:semanticObjectController>
							<sfi:configuration>
								<sfi:Configuration
										displayBehaviour="{parts: [{path: 'dataField>'}, {path: 'entitySet>'}], formatter: 'AH.getTextArrangementForSmartControl'}"/>
							</sfi:configuration>
							<template:if test="{= ${dataField>Criticality} }">
								<sfi:controlProposal>
									<sfi:ControlProposal>
										<sfi:objectStatus>
											<sfi:ObjectStatus
													criticality="{= ${dataField>Criticality/EnumMember} ? ${dataField>Criticality/EnumMember} : ${path: 'dataField>Criticality', formatter: 'AHModel.simplePath'} }"
													criticalityRepresentationType="{= (${dataField>CriticalityRepresentation/EnumMember} === 'com.sap.vocabularies.UI.v1.CriticalityRepresentationType/WithoutIcon') ? 'WithoutIcon' : 'WithIcon'}"
													class="sapSmartTemplatesObjectPageHeaderFormObjectStatus"/>
										</sfi:objectStatus>
									</sfi:ControlProposal>
								</sfi:controlProposal>
							</template:if>
							<sfi:customData>
								<core:CustomData key="defaultTextInEditModeSource" value="{path: 'dataFieldValue>', formatter: 'AH.setValidationForValueList'}" />
								<core:CustomData
									key="LabelId"
									value="header::{path: 'headerFacet>', formatter: 'AH.getStableIdPartFromFacet'}::{path: 'dataField>', formatter: 'AH.getStableIdPartFromDataField'}::Label"/>
								<core:CustomData key="dateFormatSettings" value='\{"UTC":true,"style":"medium"\}' />
							</sfi:customData>
						</sfi:SmartField>
					</template:with>
				</HBox>
			</template:with>
		</template:elseif>
	</template:if>


</core:FragmentDefinition>
