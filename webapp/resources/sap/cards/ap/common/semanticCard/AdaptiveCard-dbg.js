"use strict";sap.ui.define(["sap/cards/ap/common/thirdparty/sap-ux/semantic-card-generator","../helpers/ApplicationInfo","./BaseCard"],function(e,t,r){"use strict";function n(e,t){try{var r=e()}catch(e){return t(e)}if(r&&r.then){return r.then(void 0,t)}return r}const a=e["CardType"];const o=e["TargetCardType"];const c=e["generateAppCard"];const s=t["ApplicationInfo"];const i=r["BaseCard"];class d extends i{getUpdatedMetadataContextPath(e){try{const t=this;return Promise.resolve(s.getInstance(t.appComponent).fetchDetails()).then(function({contextParametersKeyValue:t}){t.forEach(({key:t,value:r})=>{const n=`{{${t}}}`;if(e.includes(n)){e=e.replace(n,r)}});return e})}catch(e){return Promise.reject(e)}}getWebUrl(e){const t=new URL(window.location?.href);return`${t.origin}${e}`}generateObjectCard(){try{const e=this;return Promise.resolve(n(function(){const t=e.getApplicationManifest();return Promise.resolve(e.getMetadata()).then(function(r){return Promise.resolve(e.getAnnotations()).then(function(n){const s=c(t,r,n,{target:o.AdaptiveCard,cardType:a.Object});return Promise.resolve(e.getUpdatedMetadataContextPath(s.metadata.context.path)).then(function(t){s.metadata.context.path=t;s.metadata.webUrl=e.getWebUrl(t);return s})})})},function(e){const t=e instanceof Error?e.message:"Unknown error";throw new Error(`Failed to generate Adaptive semantic card: ${t}`)}))}catch(e){return Promise.reject(e)}}}var u={__esModule:true};u.AdaptiveCard=d;return u});
//# sourceMappingURL=AdaptiveCard-dbg.js.map