{"version":3,"file":"ODataUtils.js","names":["sap","ui","define","encodeURLParameters","Filter","FilterOperator","V2OdataUtils","V2ODataModel","V4ODataUtils","___v2_MetadataAnalyzer","___v4_MetadataAnalyzer","_catch","body","recover","result","e","then","fetchDataAsync","url","path","urlParameters","bODataV4","queryParams","Object","keys","forEach","key","length","fetchDataAsyncV4","fetchDataAsyncV2","Promise","reject","getContextFromKeys","semanticKeys","contextPath","referenceKeys","model","metaModel","getMetaModel","resolve","filter","createFilterFromPath","absolutePath","startsWith","metaContext","getMetaContext","listBinding","bindList","getPath","undefined","$select","join","requestContexts","contexts","getPropertyReference","getPropertyReferenceKey","getSemanticKeys","isSingleKeyWithoutAssignment","includes","handleSingleProperty","propertyReferenceKey","contextProperties","guidKey","find","property","type","name","guidValue","formatLiteral","map","ref","addIsActiveEntityProperty","currentProperty","split","element","push","unquoteAndDecode","value","endsWith","decodeURIComponent","substring","keyValues","indexOf","keyValuesMap","Map","keyIndex","keyValue","set","filters","semanticKey","semanticKeyValue","get","operator","EQ","value1","getContextPropertiesForODataV4","_exit","_temp2","_result","index","entitySetName","lastIndex","propertyPath","$PropertyPath","_temp","dataContext","dataContextPath","_propertyReferenceKey","getProperty","createContextParameter","oDataV4","_exit2","_temp4","_result2","_temp3","contextParameters","_contextParameters$jo","formattedUrl","format","parameters","sFormattedUrl","fetchFileContent","data","catch","err","Error","oModel","fnSuccess","oData","fnFailure","oError","read","success","error","isODataV4Model","isA","createEntitySetWithContextUris","entityContextPath","entitySet","appModel","entityKeyProperties","updatedDataValues","item","every","contextUri","entries","parameterPlaceholder","replace","getEntitySetWithContextURLs","serviceUrl","results","getContextPath","entitySetWithObjectContextUris","uri","labelWithValue","getEntitySetForDesignMode","appManifest","embeds","ObjectPage","default","getEntitySetWithObjectContext","rootComponent","fetchOptions","_temp6","_exit3","getServiceUrl","sServiceUrl","keyParameters","isDesignMode","_temp5","entitySetWithObjectContextList","entitySetWithObjectContext","_result3","getModel","keyProperties","parameter","formatValue","fetch","response","ok","status","statusText","json","text","errorMessage","message","__exports","__esModule"],"sources":["ODataUtils.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport encodeURLParameters from \"sap/base/security/encodeURLParameters\";\nimport type Component from \"sap/ui/core/Component\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport V2OdataUtils from \"sap/ui/model/odata/ODataUtils\";\nimport V2ODataModel from \"sap/ui/model/odata/v2/ODataModel\";\nimport type Context from \"sap/ui/model/odata/v4/Context\";\nimport type V4ODataListBinding from \"sap/ui/model/odata/v4/ODataListBinding\";\nimport { default as V4ODataModel } from \"sap/ui/model/odata/v4/ODataModel\";\nimport V4ODataUtils from \"sap/ui/model/odata/v4/ODataUtils\";\nimport type { FreeStyleFetchOptions } from \"../types/CommonTypes\";\nimport { getPropertyReference } from \"./v2/MetadataAnalyzer\";\nimport { getPropertyReferenceKey, getSemanticKeys, Property } from \"./v4/MetadataAnalyzer\";\n\nexport type ODataModel = V2ODataModel | V4ODataModel;\n\nexport type EntitySetWithContext = {\n\tname: string;\n\tlabelWithValue: string;\n};\n\n/**\n * Validates if context key follows this pattern /entitySet('12345')\n *\n * @param keys\n * @returns {boolean}\n */\nexport const isSingleKeyWithoutAssignment = (keys: string[]): boolean => keys.length === 1 && !keys[0].includes(\"=\");\n\n/**\n * Handles a single property in the context of OData.\n *\n * If there is only one property in the object context and it is not a semantic key,\n * then it is assumed to be a GUID. The function updates the context properties accordingly.\n *\n * @param propertyReferenceKey - An array of properties to reference.\n * @param contextProperties - An array of context properties to be updated.\n */\nexport const handleSingleProperty = function (propertyReferenceKey: Property[], contextProperties: string[]) {\n\t// If there is only one property in the object context, and it is not semantic key, then it is a guid\n\tconst guidKey = propertyReferenceKey.find((property) => {\n\t\treturn property.type === \"Edm.Guid\";\n\t})?.name;\n\tconst guidValue = contextProperties[0];\n\tcontextProperties[0] = guidKey\n\t\t? `${guidKey}=${V4ODataUtils.formatLiteral(guidValue, \"Edm.Guid\")}`\n\t\t: propertyReferenceKey.map((ref) => `${ref.name}=${guidValue}`).join(\",\");\n\n\treturn contextProperties;\n};\n\n/**\n * Adds the \"IsActiveEntity=true\" property to the context properties if it is not already present.\n *\n * @param contextProperties - An array of context property strings.\n * @param propertyReferenceKey - An array of objects containing property name and type.\n * @returns The updated array of context property strings.\n */\nconst addIsActiveEntityProperty = function (contextProperties: string[], propertyReferenceKey: { name: string; type: string }[]) {\n\tconst currentProperty = contextProperties.map((property: string) => property.split(\"=\")[0]);\n\n\tpropertyReferenceKey.forEach((element) => {\n\t\tif (!currentProperty.includes(element.name) && element.name === \"IsActiveEntity\") {\n\t\t\tcontextProperties.push(\"IsActiveEntity=true\");\n\t\t}\n\t});\n\n\treturn contextProperties;\n};\n\n/**\n * Removes single quotes from the beginning and end of a string and decodes any URI-encoded characters.\n *\n * This function is typically used to process OData key values or other strings that are enclosed in single quotes\n * and may contain URI-encoded characters.\n *\n * @param {string} value - The string to be unquoted and decoded.\n * @returns {string} The unquoted and decoded string.\n *\n */\nexport function unquoteAndDecode(value: string): string {\n\tif (value.startsWith(\"'\") && value.endsWith(\"'\")) {\n\t\tvalue = decodeURIComponent(value.substring(1, value.length - 1));\n\t}\n\treturn value;\n}\n\n/**\n * Creates an SAPUI5 `Filter` object from a given context path and semantic keys.\n *\n * This function parses the `contextPath` to extract key-value pairs, matches them with the provided `semanticKeys`,\n * and constructs a filter object. It supports both single-key and multi-key scenarios.\n *\n * @param {string} contextPath - The semantic or technical path containing key-value pairs.\n * @param {string[]} semanticKeys - An array of semantic keys to match with the key-value pairs in the context path.\n * @returns {Filter | null} An SAPUI5 `Filter` object if the keys match, or `null` if no valid filter can be created.\n *\n */\nfunction createFilterFromPath(contextPath: string, semanticKeys: string[]): Filter | null {\n\tconst keyValues = contextPath.substring(contextPath.indexOf(\"(\") + 1, contextPath.length - 1).split(\",\");\n\n\tif (semanticKeys.length != keyValues.length) {\n\t\treturn null;\n\t}\n\n\tconst keyValuesMap = new Map<string, unknown>();\n\tlet keyIndex = 0;\n\tkeyValues.forEach(function (keyValue) {\n\t\tif (keyValue.indexOf(\"=\") > -1) {\n\t\t\tconst [key, value] = keyValue.split(\"=\");\n\t\t\tkeyValuesMap.set(key, unquoteAndDecode(value));\n\t\t} else {\n\t\t\tkeyValuesMap.set(semanticKeys[keyIndex], unquoteAndDecode(keyValue));\n\t\t}\n\t\tkeyIndex++;\n\t});\n\n\tconst filters: Filter[] = [];\n\n\tsemanticKeys.forEach((semanticKey) => {\n\t\tconst semanticKeyValue = keyValuesMap.get(semanticKey);\n\t\tif (semanticKeyValue !== undefined) {\n\t\t\tfilters.push(\n\t\t\t\tnew Filter({\n\t\t\t\t\tpath: semanticKey,\n\t\t\t\t\toperator: FilterOperator.EQ,\n\t\t\t\t\tvalue1: semanticKeyValue\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t});\n\n\treturn filters.length ? new Filter(filters, true) : null;\n}\n\n/**\n * Retrieves a specific context from an OData model based on semantic keys, a context path, and reference keys.\n *\n * @param {string[]} semanticKeys - An array of semantic keys used to filter the context.\n * @param {string} contextPath - The context path to retrieve the context from.\n * @param {string[]} referenceKeys - An array of reference keys to include in the `$select` query.\n * @param {ODataModel} model - The OData model (V2 or V4) used to retrieve the context.\n * @returns {Promise<Context | null>} A promise that resolves to the retrieved context, or `null` if no context is found.\n */\nasync function getContextFromKeys(\n\tsemanticKeys: string[],\n\tcontextPath: string,\n\treferenceKeys: string[],\n\tmodel: ODataModel\n): Promise<Context | null> {\n\tconst metaModel = model.getMetaModel();\n\n\tif (!semanticKeys || semanticKeys.length === 0) {\n\t\treturn null;\n\t}\n\n\tconst filter = createFilterFromPath(contextPath, semanticKeys);\n\n\tif (filter === null) {\n\t\treturn null;\n\t}\n\n\tconst absolutePath = contextPath.startsWith(\"/\") ? contextPath : `/${contextPath}`;\n\tconst metaContext = metaModel.getMetaContext(absolutePath);\n\tconst listBinding = model.bindList(metaContext?.getPath() ?? \"\", undefined, undefined, filter, {\n\t\t$select: referenceKeys.join(\",\")\n\t});\n\tconst contexts = await (listBinding as V4ODataListBinding).requestContexts(0, 2);\n\n\treturn contexts.length > 0 ? contexts[0] : null;\n}\n\n/**\n * Retrieves context properties for OData V4.\n *\n * @param model - The application model.\n * @param contextPath - The context path.\n * @returns A promise that resolves to an array of context properties.\n */\nconst getContextPropertiesForODataV4 = async function (model: V4ODataModel, contextPath: string) {\n\tconst index = contextPath.indexOf(\"(\");\n\tconst entitySetName = contextPath.substring(0, index);\n\tconst lastIndex = contextPath.indexOf(\")\");\n\tconst propertyPath = contextPath.substring(index + 1, lastIndex);\n\tconst propertyReferenceKey = getPropertyReferenceKey(model, entitySetName);\n\tconst contextProperties = propertyPath.split(\",\");\n\tconst semanticKeys = getSemanticKeys(model.getMetaModel(), entitySetName).map((key) => key.$PropertyPath);\n\tconst referenceKeys = propertyReferenceKey.map((ref) => ref.name);\n\n\tif (semanticKeys.length) {\n\t\tconst dataContext = await getContextFromKeys(semanticKeys, contextPath, referenceKeys, model);\n\t\tconst dataContextPath = dataContext?.getPath();\n\n\t\tif (dataContextPath) {\n\t\t\treturn propertyReferenceKey.map((key) => {\n\t\t\t\tconst value = dataContext?.getProperty(key.name);\n\t\t\t\treturn `${key.name}=${V4ODataUtils.formatLiteral(value, key.type)}`;\n\t\t\t});\n\t\t}\n\t}\n\n\tif (contextProperties.length === 1 && contextProperties[0].indexOf(\"=\") === -1) {\n\t\treturn handleSingleProperty(propertyReferenceKey, contextProperties);\n\t}\n\n\treturn addIsActiveEntityProperty(contextProperties, propertyReferenceKey);\n};\n\n/**\n * Creates context parameters based on the given path, app model, and OData version.\n *\n * @param contextPath - The path to create context parameters for.\n * @param model - The application model.\n * @param oDataV4 - A boolean indicating if OData V4 is used.\n * @returns A promise that resolves to a string of context parameters.\n */\nexport const createContextParameter = async function (contextPath: string, model: V2ODataModel | V4ODataModel, oDataV4: boolean) {\n\tif (oDataV4) {\n\t\tconst contextParameters = await getContextPropertiesForODataV4(model as V4ODataModel, contextPath);\n\t\treturn contextParameters.join(\",\");\n\t}\n\n\tconst index = contextPath.indexOf(\"(\");\n\tconst lastIndex = contextPath.indexOf(\")\");\n\tconst propertyPath = contextPath.substring(index + 1, lastIndex);\n\tconst contextProperties = propertyPath.split(\",\");\n\n\tif (isSingleKeyWithoutAssignment(contextProperties)) {\n\t\tconst entitySetName = contextPath.substring(0, index);\n\t\tconst propertyReferenceKey = getPropertyReference(model as V2ODataModel, entitySetName);\n\t\treturn handleSingleProperty(propertyReferenceKey, contextProperties).join(\",\");\n\t}\n\n\treturn propertyPath;\n};\n\nconst fetchDataAsyncV4 = async function (url: string, path: string, queryParams: Record<string, string>) {\n\tconst formattedUrl = url.endsWith(\"/\") ? url : `${url}/`;\n\tqueryParams.format = \"json\";\n\tconst parameters = encodeURLParameters(queryParams);\n\tconst sFormattedUrl = `${formattedUrl}${path}?${parameters}`;\n\treturn fetchFileContent(sFormattedUrl, \"json\")\n\t\t.then((data) => data)\n\t\t.catch((err) => {\n\t\t\tthrow new Error(err);\n\t\t});\n};\n\nconst fetchDataAsyncV2 = async function (url: string, path: string, queryParams: Record<string, string>) {\n\tconst oModel = new V2ODataModel(url);\n\treturn new Promise(function (resolve, reject) {\n\t\tconst fnSuccess = function (oData: object) {\n\t\t\tresolve(oData);\n\t\t};\n\t\tconst fnFailure = function (oError: Error) {\n\t\t\treject(oError);\n\t\t};\n\t\toModel.read(\"/\" + path, { success: fnSuccess, error: fnFailure, urlParameters: queryParams });\n\t});\n};\n\n/**\n * Helper function to fetch data from the given URL. This function is used to fetch data from the OData V4 service.\n *\n * @param url - The URL to fetch data from.\n * @param path - The path to fetch data for.\n * @param urlParameters - The URL parameters.\n * @returns A promise that resolves to the fetched data.\n */\nexport async function fetchDataAsync(url: string, path: string, urlParameters: Record<string, string> = {}, bODataV4?: boolean) {\n\tconst queryParams: Record<string, string> = {};\n\tObject.keys(urlParameters).forEach((key) => {\n\t\tif (urlParameters[key].length) {\n\t\t\tqueryParams[key] = urlParameters[key];\n\t\t}\n\t});\n\n\tif (bODataV4) {\n\t\treturn fetchDataAsyncV4(url, path, queryParams);\n\t} else {\n\t\treturn fetchDataAsyncV2(url, path, queryParams);\n\t}\n}\n\n/**\n * Checks if the given OData model is an OData V4 model.\n *\n * @param {ODataModel} oModel - The OData model to check.\n * @returns {boolean} `true` if the model is an OData V4 model, otherwise `false`.\n */\nexport function isODataV4Model(oModel: ODataModel): boolean {\n\treturn (oModel && oModel.isA<V4ODataModel>(\"sap.ui.model.odata.v4.ODataModel\")) || false;\n}\n\n/**\n * Creates an array of context URLs using the given data, entity context path, entity set, and application model.\n *\n * @param {Record<string, any>[]} data The data for entity set.\n * @param {string} entityContextPath The entity context path.\n * @param {string} entitySet The entitySet\n * @param {ODataModel} appModel The application model.\n * @returns {string[]} Array of context URLs.\n */\nfunction createEntitySetWithContextUris(\n\tdata: Record<string, any>[],\n\tentityContextPath: string,\n\tentitySet: string,\n\tappModel: ODataModel\n): string[] {\n\tconst bODataV4 = isODataV4Model(appModel);\n\tconst entityKeyProperties = bODataV4\n\t\t? getPropertyReferenceKey(appModel as V4ODataModel, entitySet).map((property) => property.name)\n\t\t: getPropertyReference(appModel as V2ODataModel, entitySet).map((property) => property.name);\n\n\tconst updatedDataValues = data.filter((item) => {\n\t\treturn entityKeyProperties.every((property) => {\n\t\t\treturn item[property] !== undefined && item[property] !== \"\";\n\t\t});\n\t});\n\n\treturn updatedDataValues.map((parameters) => {\n\t\tlet contextUri = entityContextPath;\n\t\tObject.entries(parameters).forEach(([key, value]) => {\n\t\t\tconst parameterPlaceholder = `{{parameters.${key}}}`;\n\t\t\tif (contextUri.includes(parameterPlaceholder)) {\n\t\t\t\tcontextUri = contextUri.replace(parameterPlaceholder, value);\n\t\t\t}\n\t\t});\n\t\treturn entitySet && contextUri ? `${entitySet}(${contextUri})` : \"\";\n\t});\n}\n\n/**\n * fetches data from the OData service (V2 or V4) using the provided service URL and entity set to format the key properties of\n * the entity set as context parameters and constructs the context path.\n *\n * @param {string} serviceUrl - The base URL of the OData service.\n * @param {string} entitySet - The name of the entity set to fetch data for.\n * @param {ODataModel} appModel - The OData model (V2 or V4) used to interact with the service.\n * @returns {Promise<string>} A promise that resolves to the first entity set with its context URL as a string,\n *                            or an empty string if no data is available or an error occurs.\n */\nexport const getEntitySetWithContextURLs = async function (\n\tserviceUrl: string,\n\tentitySet: string,\n\tappModel: ODataModel\n): Promise<EntitySetWithContext[]> {\n\tconst bODataV4 = isODataV4Model(appModel);\n\tconst entityKeyProperties = bODataV4\n\t\t? getPropertyReferenceKey(appModel as V4ODataModel, entitySet).map((property) => property.name)\n\t\t: getPropertyReference(appModel as V2ODataModel, entitySet).map((property) => property.name);\n\tconst urlParameters = {\n\t\t$select: entityKeyProperties.join(\",\")\n\t};\n\n\ttry {\n\t\tconst data = await fetchDataAsync(serviceUrl, entitySet, urlParameters, bODataV4);\n\t\tconst results = bODataV4 ? data.value : data.results;\n\t\tif (results.length > 0) {\n\t\t\tconst entityContextPath = getContextPath(appModel, entitySet);\n\t\t\tconst entitySetWithObjectContextUris = createEntitySetWithContextUris(results, entityContextPath, entitySet, appModel);\n\t\t\treturn entitySetWithObjectContextUris.map((uri: string) => ({\n\t\t\t\tname: uri,\n\t\t\t\tlabelWithValue: uri\n\t\t\t}));\n\t\t}\n\t\treturn [];\n\t} catch (error) {\n\t\treturn [];\n\t}\n};\n\n/**\n * Fetches the application manifest and retrieves the default entity set for the ObjectPage embed configuration in design mode.\n *\n * @returns {Promise<string>} A promise that resolves to the default entity set for the ObjectPage embed configuration,\n *                            or an empty string if not found.\n */\nconst getEntitySetForDesignMode = async function (): Promise<string> {\n\ttry {\n\t\tconst appManifest = await fetchFileContent(\"/manifest.json\", \"json\");\n\t\treturn appManifest[\"sap.cards.ap\"]?.embeds?.ObjectPage?.default || \"\";\n\t} catch (error) {\n\t\treturn \"\";\n\t}\n};\n\n/**\n * Retrieves the entity set with object context.\n *\n * @param {Component} rootComponent - The root component of the application.\n * @param {FreeStyleFetchOptions} fetchOptions - The FreeStyleFetchOptions including isDesignMode, entitySet and keyParameters.\n * @returns {Promise<string | undefined>} If Design mode then the url is formed using service, model and entitySet.\n * \t\t\t\t\t\t\t\t\t\t  In case of Run time entitySet and keyParameters will be used.\n */\nexport const getEntitySetWithObjectContext = async function (\n\trootComponent: Component,\n\tfetchOptions: FreeStyleFetchOptions\n): Promise<string> {\n\tconst appModel = rootComponent.getModel() as ODataModel;\n\tconst isDesignMode = fetchOptions.isDesignMode || false;\n\tconst entitySet = isDesignMode ? await getEntitySetForDesignMode() : fetchOptions.entitySet;\n\tconst bODataV4 = isODataV4Model(appModel);\n\tconst serviceUrl = bODataV4\n\t\t? (appModel as V4ODataModel).getServiceUrl()\n\t\t: (appModel as unknown as { V2ODataModel: V2ODataModel; sServiceUrl: string }).sServiceUrl;\n\n\tif (entitySet && fetchOptions.keyParameters && !isDesignMode) {\n\t\tlet entityContextPath = getContextPath(appModel, entitySet);\n\t\tconst keyParameters = fetchOptions.keyParameters;\n\n\t\tObject.entries(keyParameters).forEach(([key, value]) => {\n\t\t\tconst parameterPlaceholder = `{{parameters.${key}}}`;\n\n\t\t\tif (entityContextPath.includes(parameterPlaceholder)) {\n\t\t\t\tentityContextPath = entityContextPath.replace(parameterPlaceholder, value as string);\n\t\t\t}\n\t\t});\n\n\t\treturn entityContextPath ? `${entitySet}(${entityContextPath})` : \"\";\n\t}\n\n\tif (serviceUrl && entitySet && appModel && isDesignMode) {\n\t\tconst entitySetWithObjectContextList = await getEntitySetWithContextURLs(serviceUrl, entitySet, appModel);\n\t\tconst entitySetWithObjectContext = entitySetWithObjectContextList?.length ? entitySetWithObjectContextList[0].name : \"\";\n\t\treturn entitySetWithObjectContext;\n\t}\n\treturn entitySet;\n};\n\n/**\n * Constructs a context path string by formatting the key properties of the given entity set\n * based on the OData model version (V2 or V4).\n *\n * @param {ODataModel} appModel - The OData model (V2 or V4) used to retrieve key properties.\n * @param {string} entitySet - The name of the entity set for which the context path is constructed.\n * @returns {string} A string representing the context path with formatted key properties.\n */\nfunction getContextPath(appModel: V2ODataModel | V4ODataModel, entitySet: string): string {\n\tconst contextParameters: string[] = [];\n\tconst bODataV4 = appModel && appModel.isA<V4ODataModel>(\"sap.ui.model.odata.v4.ODataModel\");\n\n\tif (bODataV4) {\n\t\tconst keyProperties = getPropertyReferenceKey(appModel, entitySet);\n\t\tkeyProperties.forEach((property) => {\n\t\t\tconst parameter = V4ODataUtils.formatLiteral(`{{parameters.${property.name}}}`, property.type);\n\t\t\tcontextParameters.push(`${property.name}=${parameter}`);\n\t\t});\n\t} else {\n\t\tconst keyProperties = getPropertyReference(appModel, entitySet);\n\t\tkeyProperties.forEach((property) => {\n\t\t\tconst parameter = V2OdataUtils.formatValue(`{{parameters.${property.name}}}`, property.type, true);\n\t\t\tcontextParameters.push(`${property.name}=${parameter}`);\n\t\t});\n\t}\n\n\treturn contextParameters.join(\",\");\n}\n\n/**\n * Fetches the content of a file from the specified URL.\n *\n * @param {string} url - The URL of the file to fetch.\n * @param {string} [format] - Optional format specifier; if \"json\", parses the response as JSON, otherwise returns text.\n * @returns {Promise<any>} - A promise that resolves to the file content as a string or parsed JSON object.\n * @throws {Error} If the fetch fails or the response is not OK.\n */\nexport const fetchFileContent = async (url: string, format?: string): Promise<any> => {\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`Failed to fetch file from ${url}: ${response.status} ${response.statusText}`);\n\t\t}\n\n\t\treturn format === \"json\" ? await response.json() : await response.text();\n\t} catch (error) {\n\t\tconst errorMessage = error instanceof Error ? error.message : \"Unknown error\";\n\t\tthrow new Error(`Error fetching file from ${url}: ${errorMessage}`);\n\t}\n};\n"],"mappings":"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","ignoreList":[]}