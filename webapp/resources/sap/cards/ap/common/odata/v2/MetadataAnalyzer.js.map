{"version":3,"file":"MetadataAnalyzer.js","names":["sap","ui","define","getPropertyInfoFromEntity","model","entitySetName","metaModel","getMetaModel","entitySet","getODataEntitySet","entityType","getODataEntityType","properties","property","map","type","name","getPropertyReference","entityDefinition","propertyRef","key","filter","includes","__exports","__esModule"],"sources":["MetadataAnalyzer.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport { EntitySet, EntityType } from \"sap/ui/model/odata/ODataMetaModel\";\nimport ODataModel from \"sap/ui/model/odata/v2/ODataModel\";\n\ntype Property = {\n\ttype: string;\n\tname: string;\n};\n\n/**\n * Retrieves property information from an entity set.\n *\n * @param {ODataModel} model - The OData model.\n * @param {string} entitySetName - The name of the entity set.\n * @return {Property[]} - An array of property information.\n */\nexport const getPropertyInfoFromEntity = function (model: ODataModel, entitySetName: string): Property[] {\n\tconst metaModel = model.getMetaModel();\n\tconst entitySet = metaModel.getODataEntitySet(entitySetName);\n\tconst entityType = metaModel.getODataEntityType((entitySet as EntitySet).entityType) as EntityType;\n\tconst properties = entityType.property || [];\n\n\treturn properties.map((property) => ({\n\t\ttype: property.type,\n\t\tname: property.name\n\t}));\n};\n\n/**\n * Retrieves property references from an entity set.\n *\n * @param {ODataModel} model - The OData model.\n * @param {string} entitySetName - The name of the entity set.\n * @return {Property[]} - An array of property references.\n */\nexport const getPropertyReference = function (model: ODataModel, entitySetName: string): Property[] {\n\tconst metaModel = model.getMetaModel();\n\tconst entitySet = metaModel.getODataEntitySet(entitySetName) as EntitySet;\n\tconst entityDefinition = metaModel.getODataEntityType(entitySet.entityType) as EntityType;\n\tconst propertyRef = entityDefinition.key.propertyRef.map((property) => property.name);\n\tconst properties = getPropertyInfoFromEntity(model, entitySetName);\n\n\treturn properties.filter((property) => propertyRef.includes(property.name));\n};\n"],"mappings":";;;;AAAA,aAAAA,IAAAC,GAAAC,OAAA,2BAmBO,MAAMC,EAA4B,SAAUC,EAAmBC,GACrE,MAAMC,EAAYF,EAAMG,eACxB,MAAMC,EAAYF,EAAUG,kBAAkBJ,GAC9C,MAAMK,EAAaJ,EAAUK,mBAAoBH,EAAwBE,YACzE,MAAME,EAAaF,EAAWG,UAAY,GAE1C,OAAOD,EAAWE,IAAKD,KACtBE,KAAMF,EAASE,KACfC,KAAMH,EAASG,OAEjB,EASO,MAAMC,EAAuB,SAAUb,EAAmBC,GAChE,MAAMC,EAAYF,EAAMG,eACxB,MAAMC,EAAYF,EAAUG,kBAAkBJ,GAC9C,MAAMa,EAAmBZ,EAAUK,mBAAmBH,EAAUE,YAChE,MAAMS,EAAcD,EAAiBE,IAAID,YAAYL,IAAKD,GAAaA,EAASG,MAChF,MAAMJ,EAAaT,EAA0BC,EAAOC,GAEpD,OAAOO,EAAWS,OAAQR,GAAaM,EAAYG,SAAST,EAASG,MACtE,EAAE,IAAAO,EAAA,CAAAC,WAAA,MAAAD,EAAApB,4BAAAoB,EAAAN,uBAAA,OAAAM,CAAA","ignoreList":[]}