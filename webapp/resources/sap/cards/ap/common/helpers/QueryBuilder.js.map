{"version":3,"file":"QueryBuilder.js","names":["sap","ui","define","updateExpandQuery","contentUrl","integrationCardManifest","indexOf","expandQueryParams","getExpandQueryParams","replace","getSeparatedProperties","stack","navigationPropertiesWithSelect","selectProperties","navigationProperties","forEach","expandQueryParam","hasOpeningBracket","hasClosingBracket","push","pop","length","join","formatExpandQuery","mapProperties","formattedExpandQuery","value","key","substring","getFormattedExpandQuery","properties","Map","property","navigationProperty","existingProperties","get","set","split","propertiesToAdd","prop","includes","cardManifest","configParameters","configuration","parameters","headerExpandQuery","_headerExpandQuery","contentExpandQuery","_contentExpandQuery","headerExpandQueryParams","contentExpandQueryParams","firstQueryParamContent","operatorContent","mergedExpandQueryParams","concat","Array","from","Set","expandQuery","getSelectQueryParams","headerSelectQuery","_headerSelectQuery","contentSelectQuery","_contentSelectQuery","headerSelectQueryParams","contentSelectQueryParams","mergedSelectQueryParams","selectQueryParams","updateSelectQuery","__exports","__esModule"],"sources":["QueryBuilder.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport type { CardManifest } from \"sap/ui/integration/widgets/Card\";\n\n/**\n * Updates the content URL with expand query parameters for an integration card.\n *\n * This function checks if the content URL already contains a placeholder for expand query parameters.\n * If not, it appends this placeholder to the URL. Then, it retrieves the expand query parameters from\n * the integration card manifest. If no parameters are found, it removes the placeholder from the URL.\n * Otherwise, it replaces the placeholder with the actual expand query parameters.\n *\n * @param {string} contentUrl - The original content URL that may or may not contain the expand query placeholder.\n * @param {CardManifest} integrationCardManifest - The manifest of the integration card, which includes configuration for expand queries.\n * @returns {string} The updated content URL with the appropriate expand query parameters inserted, or the placeholder removed if no parameters are found.\n */\nexport const updateExpandQuery = function (contentUrl: string, integrationCardManifest: CardManifest) {\n\tif (contentUrl.indexOf(\"{{parameters._contentExpandQuery}}\") === -1) {\n\t\tcontentUrl += \"{{parameters._contentExpandQuery}}\";\n\t}\n\n\tconst expandQueryParams = getExpandQueryParams(integrationCardManifest);\n\n\tif (!expandQueryParams) {\n\t\treturn contentUrl.replace(\"{{parameters._contentExpandQuery}}\", \"\");\n\t}\n\treturn contentUrl.replace(\"{{parameters._contentExpandQuery}}\", expandQueryParams);\n};\n\n/**\n * Separates expand query parameters into navigation properties with select queries and standalone navigation properties.\n *\n * This function processes an array of expand query parameters and categorizes them into two groups:\n * - Navigation properties with select queries: These are properties that include nested select queries, indicated by parentheses.\n * - Standalone navigation properties: These are properties without nested select queries.\n *\n * The categorization is achieved by iterating through the expand query parameters and using a stack to track\n * nested structures. The function identifies parameters that start with an opening bracket but do not close,\n * parameters that close but do not open, and parameters that are standalone or fully enclosed within brackets.\n *\n * @param {string[]} expandQueryParams - An array of expand query parameters to be categorized.\n * @returns {{ navigationPropertiesWithSelect: string[], navigationProperties: string[] }} An object containing two arrays:\n *          `navigationPropertiesWithSelect` for properties with select queries, and `navigationProperties` for standalone properties.\n */\nexport const getSeparatedProperties = function (expandQueryParams: string[]) {\n\tconst stack: Array<string> = [];\n\tconst navigationPropertiesWithSelect: string[] = [];\n\tlet selectProperties: string[] = [];\n\tconst navigationProperties: string[] = [];\n\n\texpandQueryParams.forEach((expandQueryParam) => {\n\t\tconst hasOpeningBracket = expandQueryParam.indexOf(\"(\") > -1;\n\t\tconst hasClosingBracket = expandQueryParam.indexOf(\")\") > -1;\n\n\t\tif (hasOpeningBracket && hasClosingBracket) {\n\t\t\tnavigationPropertiesWithSelect.push(expandQueryParam);\n\t\t} else if (hasOpeningBracket && !hasClosingBracket) {\n\t\t\tselectProperties = [];\n\t\t\tstack.push(\"(\");\n\t\t\tselectProperties.push(expandQueryParam);\n\t\t} else if (hasClosingBracket) {\n\t\t\tselectProperties.push(expandQueryParam);\n\t\t\tstack.pop();\n\t\t\tif (stack.length === 0) {\n\t\t\t\tnavigationPropertiesWithSelect.push(selectProperties.join(\",\"));\n\t\t\t}\n\t\t} else if (stack.length !== 0) {\n\t\t\tselectProperties.push(expandQueryParam);\n\t\t} else {\n\t\t\tnavigationProperties.push(expandQueryParam);\n\t\t}\n\t});\n\n\treturn {\n\t\tnavigationPropertiesWithSelect,\n\t\tnavigationProperties\n\t};\n};\n\n/**\n * Formats the expand query parameters for OData requests.\n *\n * This function takes a map where each key represents a navigation property and its value is an array of properties to select.\n * It constructs a string for the `$expand` query parameter of an OData request. For navigation properties without any select\n * properties, it appends just the property name. For those with select properties, it appends the property name followed by\n * `($select=...)` specifying the properties to select. The resulting string is a comma-separated list of these formatted properties,\n * suitable for inclusion in an OData query URL.\n *\n * @param {Map<string, string[]>} mapProperties - A map where keys are navigation property names and values are arrays of property names to select.\n * @returns {string} A formatted string representing the `$expand` query parameter for an OData request.\n */\nconst formatExpandQuery = function (mapProperties: Map<string, string[]>) {\n\tlet formattedExpandQuery = \"\";\n\tmapProperties.forEach((value, key) => {\n\t\tif (value.length === 0) {\n\t\t\tformattedExpandQuery += key + \",\";\n\t\t} else {\n\t\t\tformattedExpandQuery += key + \"($select=\" + value.join(\",\") + \"),\";\n\t\t}\n\t});\n\treturn formattedExpandQuery.substring(0, formattedExpandQuery.length - 1);\n};\n\n/**\n * Formats the expand query parameters for OData requests.\n *\n * This function takes an array of expand query parameters and separates them into two categories:\n * navigation properties with select queries and standalone navigation properties. It then constructs\n * a map where each key is a navigation property and its value is an array of properties to select.\n * For navigation properties with select queries, it parses and aggregates the properties to select.\n * Standalone navigation properties are added with an empty array as their value. Finally, it formats\n * this map into a string suitable for the `$expand` query parameter in an OData request.\n *\n * @param {string[]} expandQueryParams - An array of expand query parameters to be formatted.\n * @returns {string} A formatted string representing the `$expand` query parameter for an OData request.\n */\nconst getFormattedExpandQuery = function (expandQueryParams: string[]) {\n\tconst { navigationPropertiesWithSelect, navigationProperties } = getSeparatedProperties(expandQueryParams);\n\tconst properties = new Map<string, string[]>();\n\n\tnavigationPropertiesWithSelect.forEach((property) => {\n\t\tconst navigationProperty = property.substring(0, property.indexOf(\"(\"));\n\t\tproperty = property.replace(navigationProperty, \"\").replace(\"($select=\", \"\").replace(\")\", \"\");\n\t\tconst existingProperties = properties.get(navigationProperty) || [];\n\n\t\tif (existingProperties.length === 0) {\n\t\t\tproperties.set(navigationProperty, property.split(\",\"));\n\t\t} else {\n\t\t\tconst propertiesToAdd = property.split(\",\");\n\t\t\tpropertiesToAdd.forEach((prop) => {\n\t\t\t\tif (!existingProperties.includes(prop)) {\n\t\t\t\t\texistingProperties.push(prop);\n\t\t\t\t}\n\t\t\t});\n\t\t\tproperties.set(navigationProperty, existingProperties);\n\t\t}\n\t});\n\tnavigationProperties.forEach((property) => {\n\t\tproperties.set(property, []);\n\t});\n\treturn formatExpandQuery(properties);\n};\n\n/**\n *\n * Function to get the expand query parameters for the adaptive card content url\n *\n * @param cardManifest\n * @returns\n */\nconst getExpandQueryParams = function (cardManifest: CardManifest) {\n\tconst configParameters = cardManifest[\"sap.card\"].configuration?.parameters;\n\n\tif (!configParameters) {\n\t\treturn \"\";\n\t}\n\n\tconst headerExpandQuery = configParameters?._headerExpandQuery?.value.replace(\"$expand=\", \"\") || \"\";\n\tconst contentExpandQuery = configParameters?._contentExpandQuery?.value.replace(\"$expand=\", \"\") || \"\";\n\tconst headerExpandQueryParams = headerExpandQuery ? headerExpandQuery.split(\",\") : [];\n\tconst contentExpandQueryParams = contentExpandQuery ? contentExpandQuery.split(\",\") : [];\n\n\tif (headerExpandQueryParams.length || contentExpandQueryParams.length) {\n\t\tconst firstQueryParamContent = contentExpandQueryParams[0];\n\t\tconst operatorContent = firstQueryParamContent.indexOf(\"?\") > -1 ? \"?\" : \"&\";\n\n\t\tif (headerExpandQueryParams.length) {\n\t\t\theaderExpandQueryParams[0] = headerExpandQueryParams[0]?.replace(operatorContent, \"\");\n\t\t}\n\n\t\tif (contentExpandQueryParams.length) {\n\t\t\tcontentExpandQueryParams[0] = contentExpandQueryParams[0]?.replace(operatorContent, \"\");\n\t\t}\n\t\tconst mergedExpandQueryParams = headerExpandQueryParams.concat(contentExpandQueryParams);\n\t\tconst expandQueryParams = Array.from(new Set(mergedExpandQueryParams));\n\n\t\tif (headerExpandQuery.indexOf(\"$select\") > -1 || contentExpandQuery.indexOf(\"$select\") > -1) {\n\t\t\tconst expandQuery = getFormattedExpandQuery(expandQueryParams);\n\t\t\treturn expandQuery ? `${operatorContent}$expand=` + expandQuery : \"\";\n\t\t}\n\t\treturn expandQueryParams.length ? `${operatorContent}$expand=` + expandQueryParams.join(\",\") : \"\";\n\t}\n\treturn \"\";\n};\n\n/**\n * Function to form the select query parameters for the adaptive card content url\n *\n * @param cardManifest\n * @returns {string} The select query parameters\n * @private\n */\nconst getSelectQueryParams = function (cardManifest: CardManifest) {\n\tconst configParameters = cardManifest[\"sap.card\"].configuration?.parameters;\n\n\tif (configParameters) {\n\t\tconst headerSelectQuery = configParameters?._headerSelectQuery?.value.replace(\"$select=\", \"\");\n\t\tconst contentSelectQuery = configParameters?._contentSelectQuery?.value.replace(\"$select=\", \"\");\n\n\t\tconst headerSelectQueryParams = headerSelectQuery ? headerSelectQuery.split(\",\") : [];\n\t\tconst contentSelectQueryParams = contentSelectQuery ? contentSelectQuery.split(\",\") : [];\n\n\t\tif (headerSelectQueryParams.length || contentSelectQueryParams.length) {\n\t\t\tconst mergedSelectQueryParams = headerSelectQueryParams.concat(contentSelectQueryParams);\n\t\t\tconst selectQueryParams = Array.from(new Set(mergedSelectQueryParams));\n\n\t\t\treturn selectQueryParams.length ? \"$select=\" + selectQueryParams.join(\",\") : \"\";\n\t\t}\n\t}\n\n\treturn \"\";\n};\n\n/**\n * Updates the content URL with select query parameters for an integration card.\n *\n * This function checks if the content URL already contains a placeholder for select query parameters.\n * If not, it appends this placeholder to the URL. Then, it retrieves the select query parameters from\n * the integration card manifest. If parameters are found, it replaces the placeholder in the URL with\n * these parameters. Otherwise, it removes the placeholder from the URL, preparing it for potential\n * expansion handling in the future.\n *\n * @param {string} contentUrl - The original content URL that may or may not contain the select query placeholder.\n * @param {CardManifest} integrationCardManifest - The manifest of the integration card, which includes configuration for select queries.\n * @returns {string} The updated content URL with the appropriate select query parameters inserted, or the placeholder removed if no parameters are found.\n */\nexport const updateSelectQuery = function (contentUrl: string, integrationCardManifest: CardManifest) {\n\tif (contentUrl.indexOf(\"?{{parameters._contentSelectQuery}}\") === -1) {\n\t\tcontentUrl = contentUrl + \"?{{parameters._contentSelectQuery}}\";\n\t}\n\n\tconst selectQueryParams = getSelectQueryParams(integrationCardManifest);\n\n\tif (selectQueryParams) {\n\t\tcontentUrl = contentUrl.replace(\"{{parameters._contentSelectQuery}}\", selectQueryParams);\n\t} else {\n\t\t// Once we enable $expand, we need to conditionally handle it here.\n\t\tcontentUrl = contentUrl.replace(\"?{{parameters._contentSelectQuery}}\", \"\");\n\t}\n\n\treturn contentUrl;\n};\n"],"mappings":"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","ignoreList":[]}