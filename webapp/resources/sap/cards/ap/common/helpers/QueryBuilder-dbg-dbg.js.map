{"version":3,"file":"QueryBuilder-dbg-dbg.js","names":["sap","ui","define","updateExpandQuery","contentUrl","integrationCardManifest","indexOf","expandQueryParams","getExpandQueryParams","replace","getSeparatedProperties","stack","navigationPropertiesWithSelect","selectProperties","navigationProperties","forEach","expandQueryParam","hasOpeningBracket","hasClosingBracket","push","pop","length","join","formatExpandQuery","mapProperties","formattedExpandQuery","value","key","substring","getFormattedExpandQuery","properties","Map","property","navigationProperty","existingProperties","get","set","split","propertiesToAdd","prop","includes","cardManifest","configParameters","configuration","parameters","headerExpandQuery","_headerExpandQuery","contentExpandQuery","_contentExpandQuery","headerExpandQueryParams","contentExpandQueryParams","firstQueryParamContent","operatorContent","mergedExpandQueryParams","concat","Array","from","Set","expandQuery","getSelectQueryParams","headerSelectQuery","_headerSelectQuery","contentSelectQuery","_contentSelectQuery","headerSelectQueryParams","contentSelectQueryParams","mergedSelectQueryParams","selectQueryParams","updateSelectQuery","__exports","__esModule"],"sources":["QueryBuilder.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport type { CardManifest } from \"sap/ui/integration/widgets/Card\";\n\n/**\n * Updates the content URL with expand query parameters for an integration card.\n *\n * This function checks if the content URL already contains a placeholder for expand query parameters.\n * If not, it appends this placeholder to the URL. Then, it retrieves the expand query parameters from\n * the integration card manifest. If no parameters are found, it removes the placeholder from the URL.\n * Otherwise, it replaces the placeholder with the actual expand query parameters.\n *\n * @param {string} contentUrl - The original content URL that may or may not contain the expand query placeholder.\n * @param {CardManifest} integrationCardManifest - The manifest of the integration card, which includes configuration for expand queries.\n * @returns {string} The updated content URL with the appropriate expand query parameters inserted, or the placeholder removed if no parameters are found.\n */\nexport const updateExpandQuery = function (contentUrl: string, integrationCardManifest: CardManifest) {\n\tif (contentUrl.indexOf(\"{{parameters._contentExpandQuery}}\") === -1) {\n\t\tcontentUrl += \"{{parameters._contentExpandQuery}}\";\n\t}\n\n\tconst expandQueryParams = getExpandQueryParams(integrationCardManifest);\n\n\tif (!expandQueryParams) {\n\t\treturn contentUrl.replace(\"{{parameters._contentExpandQuery}}\", \"\");\n\t}\n\treturn contentUrl.replace(\"{{parameters._contentExpandQuery}}\", expandQueryParams);\n};\n\n/**\n * Separates expand query parameters into navigation properties with select queries and standalone navigation properties.\n *\n * This function processes an array of expand query parameters and categorizes them into two groups:\n * - Navigation properties with select queries: These are properties that include nested select queries, indicated by parentheses.\n * - Standalone navigation properties: These are properties without nested select queries.\n *\n * The categorization is achieved by iterating through the expand query parameters and using a stack to track\n * nested structures. The function identifies parameters that start with an opening bracket but do not close,\n * parameters that close but do not open, and parameters that are standalone or fully enclosed within brackets.\n *\n * @param {string[]} expandQueryParams - An array of expand query parameters to be categorized.\n * @returns {{ navigationPropertiesWithSelect: string[], navigationProperties: string[] }} An object containing two arrays:\n *          `navigationPropertiesWithSelect` for properties with select queries, and `navigationProperties` for standalone properties.\n */\nexport const getSeparatedProperties = function (expandQueryParams: string[]) {\n\tconst stack: Array<string> = [];\n\tconst navigationPropertiesWithSelect: string[] = [];\n\tlet selectProperties: string[] = [];\n\tconst navigationProperties: string[] = [];\n\n\texpandQueryParams.forEach((expandQueryParam) => {\n\t\tconst hasOpeningBracket = expandQueryParam.indexOf(\"(\") > -1;\n\t\tconst hasClosingBracket = expandQueryParam.indexOf(\")\") > -1;\n\n\t\tif (hasOpeningBracket && hasClosingBracket) {\n\t\t\tnavigationPropertiesWithSelect.push(expandQueryParam);\n\t\t} else if (hasOpeningBracket && !hasClosingBracket) {\n\t\t\tselectProperties = [];\n\t\t\tstack.push(\"(\");\n\t\t\tselectProperties.push(expandQueryParam);\n\t\t} else if (hasClosingBracket) {\n\t\t\tselectProperties.push(expandQueryParam);\n\t\t\tstack.pop();\n\t\t\tif (stack.length === 0) {\n\t\t\t\tnavigationPropertiesWithSelect.push(selectProperties.join(\",\"));\n\t\t\t}\n\t\t} else if (stack.length !== 0) {\n\t\t\tselectProperties.push(expandQueryParam);\n\t\t} else {\n\t\t\tnavigationProperties.push(expandQueryParam);\n\t\t}\n\t});\n\n\treturn {\n\t\tnavigationPropertiesWithSelect,\n\t\tnavigationProperties\n\t};\n};\n\n/**\n * Formats the expand query parameters for OData requests.\n *\n * This function takes a map where each key represents a navigation property and its value is an array of properties to select.\n * It constructs a string for the `$expand` query parameter of an OData request. For navigation properties without any select\n * properties, it appends just the property name. For those with select properties, it appends the property name followed by\n * `($select=...)` specifying the properties to select. The resulting string is a comma-separated list of these formatted properties,\n * suitable for inclusion in an OData query URL.\n *\n * @param {Map<string, string[]>} mapProperties - A map where keys are navigation property names and values are arrays of property names to select.\n * @returns {string} A formatted string representing the `$expand` query parameter for an OData request.\n */\nconst formatExpandQuery = function (mapProperties: Map<string, string[]>) {\n\tlet formattedExpandQuery = \"\";\n\tmapProperties.forEach((value, key) => {\n\t\tif (value.length === 0) {\n\t\t\tformattedExpandQuery += key + \",\";\n\t\t} else {\n\t\t\tformattedExpandQuery += key + \"($select=\" + value.join(\",\") + \"),\";\n\t\t}\n\t});\n\treturn formattedExpandQuery.substring(0, formattedExpandQuery.length - 1);\n};\n\n/**\n * Formats the expand query parameters for OData requests.\n *\n * This function takes an array of expand query parameters and separates them into two categories:\n * navigation properties with select queries and standalone navigation properties. It then constructs\n * a map where each key is a navigation property and its value is an array of properties to select.\n * For navigation properties with select queries, it parses and aggregates the properties to select.\n * Standalone navigation properties are added with an empty array as their value. Finally, it formats\n * this map into a string suitable for the `$expand` query parameter in an OData request.\n *\n * @param {string[]} expandQueryParams - An array of expand query parameters to be formatted.\n * @returns {string} A formatted string representing the `$expand` query parameter for an OData request.\n */\nconst getFormattedExpandQuery = function (expandQueryParams: string[]) {\n\tconst { navigationPropertiesWithSelect, navigationProperties } = getSeparatedProperties(expandQueryParams);\n\tconst properties = new Map<string, string[]>();\n\n\tnavigationPropertiesWithSelect.forEach((property) => {\n\t\tconst navigationProperty = property.substring(0, property.indexOf(\"(\"));\n\t\tproperty = property.replace(navigationProperty, \"\").replace(\"($select=\", \"\").replace(\")\", \"\");\n\t\tconst existingProperties = properties.get(navigationProperty) || [];\n\n\t\tif (existingProperties.length === 0) {\n\t\t\tproperties.set(navigationProperty, property.split(\",\"));\n\t\t} else {\n\t\t\tconst propertiesToAdd = property.split(\",\");\n\t\t\tpropertiesToAdd.forEach((prop) => {\n\t\t\t\tif (!existingProperties.includes(prop)) {\n\t\t\t\t\texistingProperties.push(prop);\n\t\t\t\t}\n\t\t\t});\n\t\t\tproperties.set(navigationProperty, existingProperties);\n\t\t}\n\t});\n\tnavigationProperties.forEach((property) => {\n\t\tproperties.set(property, []);\n\t});\n\treturn formatExpandQuery(properties);\n};\n\n/**\n *\n * Function to get the expand query parameters for the adaptive card content url\n *\n * @param cardManifest\n * @returns\n */\nconst getExpandQueryParams = function (cardManifest: CardManifest) {\n\tconst configParameters = cardManifest[\"sap.card\"].configuration?.parameters;\n\n\tif (!configParameters) {\n\t\treturn \"\";\n\t}\n\n\tconst headerExpandQuery = configParameters?._headerExpandQuery?.value.replace(\"$expand=\", \"\") || \"\";\n\tconst contentExpandQuery = configParameters?._contentExpandQuery?.value.replace(\"$expand=\", \"\") || \"\";\n\tconst headerExpandQueryParams = headerExpandQuery ? headerExpandQuery.split(\",\") : [];\n\tconst contentExpandQueryParams = contentExpandQuery ? contentExpandQuery.split(\",\") : [];\n\n\tif (headerExpandQueryParams.length || contentExpandQueryParams.length) {\n\t\tconst firstQueryParamContent = contentExpandQueryParams[0];\n\t\tconst operatorContent = firstQueryParamContent.indexOf(\"?\") > -1 ? \"?\" : \"&\";\n\n\t\tif (headerExpandQueryParams.length) {\n\t\t\theaderExpandQueryParams[0] = headerExpandQueryParams[0]?.replace(operatorContent, \"\");\n\t\t}\n\n\t\tif (contentExpandQueryParams.length) {\n\t\t\tcontentExpandQueryParams[0] = contentExpandQueryParams[0]?.replace(operatorContent, \"\");\n\t\t}\n\t\tconst mergedExpandQueryParams = headerExpandQueryParams.concat(contentExpandQueryParams);\n\t\tconst expandQueryParams = Array.from(new Set(mergedExpandQueryParams));\n\n\t\tif (headerExpandQuery.indexOf(\"$select\") > -1 || contentExpandQuery.indexOf(\"$select\") > -1) {\n\t\t\tconst expandQuery = getFormattedExpandQuery(expandQueryParams);\n\t\t\treturn expandQuery ? `${operatorContent}$expand=` + expandQuery : \"\";\n\t\t}\n\t\treturn expandQueryParams.length ? `${operatorContent}$expand=` + expandQueryParams.join(\",\") : \"\";\n\t}\n\treturn \"\";\n};\n\n/**\n * Function to form the select query parameters for the adaptive card content url\n *\n * @param cardManifest\n * @returns {string} The select query parameters\n * @private\n */\nconst getSelectQueryParams = function (cardManifest: CardManifest) {\n\tconst configParameters = cardManifest[\"sap.card\"].configuration?.parameters;\n\n\tif (configParameters) {\n\t\tconst headerSelectQuery = configParameters?._headerSelectQuery?.value.replace(\"$select=\", \"\");\n\t\tconst contentSelectQuery = configParameters?._contentSelectQuery?.value.replace(\"$select=\", \"\");\n\n\t\tconst headerSelectQueryParams = headerSelectQuery ? headerSelectQuery.split(\",\") : [];\n\t\tconst contentSelectQueryParams = contentSelectQuery ? contentSelectQuery.split(\",\") : [];\n\n\t\tif (headerSelectQueryParams.length || contentSelectQueryParams.length) {\n\t\t\tconst mergedSelectQueryParams = headerSelectQueryParams.concat(contentSelectQueryParams);\n\t\t\tconst selectQueryParams = Array.from(new Set(mergedSelectQueryParams));\n\n\t\t\treturn selectQueryParams.length ? \"$select=\" + selectQueryParams.join(\",\") : \"\";\n\t\t}\n\t}\n\n\treturn \"\";\n};\n\n/**\n * Updates the content URL with select query parameters for an integration card.\n *\n * This function checks if the content URL already contains a placeholder for select query parameters.\n * If not, it appends this placeholder to the URL. Then, it retrieves the select query parameters from\n * the integration card manifest. If parameters are found, it replaces the placeholder in the URL with\n * these parameters. Otherwise, it removes the placeholder from the URL, preparing it for potential\n * expansion handling in the future.\n *\n * @param {string} contentUrl - The original content URL that may or may not contain the select query placeholder.\n * @param {CardManifest} integrationCardManifest - The manifest of the integration card, which includes configuration for select queries.\n * @returns {string} The updated content URL with the appropriate select query parameters inserted, or the placeholder removed if no parameters are found.\n */\nexport const updateSelectQuery = function (contentUrl: string, integrationCardManifest: CardManifest) {\n\tif (contentUrl.indexOf(\"?{{parameters._contentSelectQuery}}\") === -1) {\n\t\tcontentUrl = contentUrl + \"?{{parameters._contentSelectQuery}}\";\n\t}\n\n\tconst selectQueryParams = getSelectQueryParams(integrationCardManifest);\n\n\tif (selectQueryParams) {\n\t\tcontentUrl = contentUrl.replace(\"{{parameters._contentSelectQuery}}\", selectQueryParams);\n\t} else {\n\t\t// Once we enable $expand, we need to conditionally handle it here.\n\t\tcontentUrl = contentUrl.replace(\"?{{parameters._contentSelectQuery}}\", \"\");\n\t}\n\n\treturn contentUrl;\n};\n"],"mappings":"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","ignoreList":[]}