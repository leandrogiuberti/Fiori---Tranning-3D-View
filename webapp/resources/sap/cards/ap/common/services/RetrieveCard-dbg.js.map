{"version":3,"file":"RetrieveCard-dbg.js","names":["sap","ui","define","sap_cards_ap_transpiler_cardTranspiler_Transpile","SelectionVariant","___helpers_ApplicationInfo","___helpers_I18nHelper","___odata_ODataUtils","___semanticCard_CardFactory","_catch","body","recover","result","e","then","convertIntegrationCardToAdaptive","AppType","ApplicationInfo","ODataModelVersion","resolvei18nTextsForIntegrationCard","fetchFileContent","GenerateSemanticCard","createSemanticCardFactory","CardTypes","getCardPath","type","entitySet","applicationManifest","manifest","INTEGRATION","sapCardsAP","undefined","Object","keys","length","cardsConfig","defaultCard","default","localUri","endsWith","cleanupVariantInformation","selectionVariant","hasOwnProperty","SelectionVariantID","PresentationVariantID","Text","ODataFilterExpression","Version","FilterContextUrl","ParameterContextUrl","fetchManifest","url","Promise","resolve","constructCardUrl","applicationUrlOnAbap","cardsPath","isDesignMode","slice","_getObjectPageCardManifest","appComponent","hostOptions","_temp2","cardType","reject","cardUrl","getManifest","sapPlatformAbap","uri","_temp","_fetchManifest","addActionsToCardHeader","cardManifest","applicationInfo","semanticObject","action","variantParameter","contextParametersKeyValue","header","ibnParams","forEach","key","value","addSelectOption","JSON","stringify","toJSONObject","actions","parameters","ibnTarget","checkIfLeanDTCardExists","mApplicationManifest","isSemanticCardGeneration","searchParams","window","location","search","urlParams","URLSearchParams","generateSemanticCardParam","get","Always","Lean","getKeyParameters","fetchOptions","keyParameters","getInstance","fetchDetails","entitySetWithObjectContext","appType","contextParameters","FreeStyle","split","map","parameter","formattedValue","replace","handleHideActions","mManifest","appManifest","embeds","ObjectPage","defaultEntitySet","hideActions","mParameters","configuration","_adaptiveFooterActionParameters","footerActionParameters","footer","updateHeaderDataPath","isODataV4","headerData","data","dataPathHeader","path","getCardManifestForPreview","getObjectPageCardManifestForPreview","_exit","_temp6","_result","freeStyleFetchOptions","componentName","context","resourceBundle","odataModel","navigationURI","_temp4","V4","contentUrl","includes","_temp3","includeActions","cardManifestWithResolvedI18nTexts","appIntent","_temp5","semanticCardInstance","generateObjectCard","semanticObjectCard","__exports","__esModule"],"sources":["RetrieveCard.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport { convertIntegrationCardToAdaptive } from \"sap/cards/ap/transpiler/cardTranspiler/Transpile\";\nimport SelectionVariant from \"sap/fe/navigation/SelectionVariant\";\nimport Component from \"sap/ui/core/Component\";\nimport type { CardManifest } from \"sap/ui/integration/widgets/Card\";\nimport { AppManifest, AppType, ApplicationInfo, ODataModelVersion, type App } from \"../helpers/ApplicationInfo\";\nimport { resolvei18nTextsForIntegrationCard } from \"../helpers/I18nHelper\";\nimport { fetchFileContent } from \"../odata/ODataUtils\";\nimport { GenerateSemanticCard, createSemanticCardFactory } from \"../semanticCard/CardFactory\";\nimport type { FreeStyleFetchOptions } from \"../types/CommonTypes\";\n\nexport type KeyParameter = {\n\tkey: string;\n\tformattedValue: string;\n};\n\n/**\n * The card types\n *\n * @alias sap.cards.ap.common.services.RetrieveCard.CardTypes\n * @private\n * @restricted sap.fe, sap.ui.generic.app\n */\nexport enum CardTypes {\n\t/**\n\t * Integration card\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tINTEGRATION = \"integration\",\n\t/**\n\t * Adaptive card\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tADAPTIVE = \"adaptive\"\n}\ntype CardHostParam = {\n\tcomponentName: string;\n\tentitySet: string;\n\tcardType?: CardTypes;\n};\ntype SelectionVariantJSON = {\n\tSelectionVariantID?: string;\n\tPresentationVariantID?: string;\n\tText?: string;\n\tODataFilterExpression?: string;\n\tVersion?: string;\n\tFilterContextUrl?: string;\n\tParameterContextUrl?: string;\n};\n/**\n * The options for fetching the card manifest\n *\n * @alias sap.cards.ap.common.services.RetrieveCard.CardManifestFetchOptions\n * @private\n * @restricted sap.fe, sap.ui.generic.app\n */\ntype CardManifestFetchOptions = {\n\t/**\n\t * Defines the card type\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tcardType?: CardTypes;\n\t/**\n\t * Defines include actions\n\t * @restricted sap.fe, sap.ui.generic.app\n\t */\n\tincludeActions?: boolean;\n\t/**\n\t * Defines the hide Actions\n\t */\n\thideActions?: boolean;\n\t/**\n\t * Checks whether the app is running in design mode or not will be used to invalidate resource bundle cache and for other design time specific operations\n\t */\n\tisDesignMode?: boolean;\n};\n\ntype FreeStyleCardManifestFetchOptions = CardManifestFetchOptions & {\n\t/**\n\t * Entity Set for FreeStyle card sharing\n\t */\n\tentitySet: string;\n\t/**\n\t * Key Parameters for FreeStyle card sharing\n\t */\n\tkeyParameters: Record<string, unknown>;\n};\n\n/**\n * Fetches the card path from the application manifest\n *\n * @param {CardType} type - The type of card\n * @param {string} entitySet - The entity set\n * @param {AppManifest} applicationManifest - The application manifest\n * @returns The card path\n */\nexport const getCardPath = (type: CardTypes, entitySet: string, applicationManifest: AppManifest) => {\n\tconst manifest = type === CardTypes.INTEGRATION ? \"manifest.json\" : \"adaptive-manifest.json\";\n\tconst sapCardsAP = applicationManifest[\"sap.cards.ap\"];\n\n\tif (sapCardsAP === undefined || Object.keys(sapCardsAP).length === 0) {\n\t\treturn \"\";\n\t}\n\n\tconst cardsConfig = sapCardsAP[\"embeds\"][\"ObjectPage\"];\n\tif (cardsConfig === undefined || Object.keys(cardsConfig[\"manifests\"]).length === 0) {\n\t\treturn \"\";\n\t}\n\n\tconst defaultCard = cardsConfig[\"manifests\"][entitySet || cardsConfig.default][0];\n\tconst localUri = defaultCard.localUri.endsWith(\"/\") ? defaultCard.localUri : defaultCard.localUri + \"/\";\n\treturn \"/\" + localUri + manifest;\n};\n\n/**\n * clean up the unnecessary variant information\n *\n * @param selectionVariant\n * @returns\n */\nconst cleanupVariantInformation = (selectionVariant: SelectionVariantJSON) => {\n\tif (selectionVariant.hasOwnProperty(\"SelectionVariantID\")) {\n\t\tdelete selectionVariant.SelectionVariantID;\n\t} else if (selectionVariant.hasOwnProperty(\"PresentationVariantID\")) {\n\t\tdelete selectionVariant.PresentationVariantID;\n\t}\n\tdelete selectionVariant.Text;\n\tdelete selectionVariant.ODataFilterExpression;\n\tdelete selectionVariant.Version;\n\tdelete selectionVariant.FilterContextUrl;\n\tdelete selectionVariant.ParameterContextUrl;\n\n\treturn selectionVariant;\n};\n\n/**\n * Fetches the manifest from the given url\n *\n * @param {string} url - The url of the manifest\n * @returns The manifest\n */\nexport const fetchManifest = async (url: string) => {\n\ttry {\n\t\treturn await fetchFileContent(url, \"json\");\n\t} catch (error) {\n\t\treturn null;\n\t}\n};\n\n/**\n * Constructs the card URL based on the application URL and card path.\n *\n * @param {string} applicationUrlOnAbap - The base application URL.\n * @param {string} cardsPath - The path to the card.\n * @param {boolean} isDesignMode - Whether the application is in design mode.\n * @returns {string} - The constructed card URL.\n */\nfunction constructCardUrl(applicationUrlOnAbap: string, cardsPath: string, isDesignMode: boolean): string {\n\tif (isDesignMode) {\n\t\treturn cardsPath;\n\t}\n\n\treturn applicationUrlOnAbap.endsWith(\"/\") ? `${applicationUrlOnAbap.slice(0, -1)}${cardsPath}` : `${applicationUrlOnAbap}${cardsPath}`;\n}\n\n/**\n * Fetches the card manifest for the object page\n *\n * @param {Component} appComponent\n * @param {CardHostParam} hostOptions\n * @param {Boolean} isDesignMode\n * @returns The card manifest\n * @private\n */\nexport const _getObjectPageCardManifest = async function (\n\tappComponent: Component,\n\thostOptions: CardHostParam,\n\tisDesignMode: boolean = false\n) {\n\tconst { entitySet, cardType } = hostOptions;\n\tlet applicationManifest = appComponent.getManifest() as AppManifest;\n\tconst sapPlatformAbap = applicationManifest[\"sap.platform.abap\"];\n\tconst applicationUrlOnAbap = sapPlatformAbap?.uri ?? \"\";\n\n\tif (isDesignMode) {\n\t\tapplicationManifest = await fetchManifest(\"/manifest.json\");\n\t}\n\tconst cardsPath = getCardPath(cardType || CardTypes.INTEGRATION, entitySet, applicationManifest);\n\n\tif (cardsPath.length === 0) {\n\t\treturn Promise.reject(\"No cards available for this application\");\n\t}\n\n\tconst cardUrl = constructCardUrl(applicationUrlOnAbap, cardsPath, isDesignMode);\n\n\treturn fetchManifest(cardUrl);\n};\n\n/**\n * Add actions to the card header\n *  - ibnTarget contains the semantic object and action\n *  - ibnParams contains the context parameters and sap-xapp-state-data - which is the stringified selection variant of the context parameters\n *\n * @param cardManifest\n * @param applicationInfo\n */\nexport const addActionsToCardHeader = async function (cardManifest: CardManifest, applicationInfo: App) {\n\tconst { semanticObject, action, variantParameter, contextParametersKeyValue } = applicationInfo;\n\tconst header = cardManifest[\"sap.card\"][\"header\"];\n\tconst ibnParams: Record<string, string> = {};\n\tconst selectionVariant = new SelectionVariant();\n\n\tcontextParametersKeyValue.forEach(({ key, value }) => {\n\t\tibnParams[key] = value;\n\t\tselectionVariant.addSelectOption(key, \"I\", \"EQ\", value);\n\t});\n\n\tif (variantParameter) {\n\t\tibnParams[\"sap-appvar-id\"] = variantParameter;\n\t}\n\n\tibnParams[\"sap-xapp-state-data\"] = JSON.stringify({\n\t\tselectionVariant: cleanupVariantInformation(selectionVariant.toJSONObject())\n\t});\n\theader.actions = [\n\t\t{\n\t\t\ttype: \"Navigation\",\n\t\t\tparameters: {\n\t\t\t\tibnTarget: { semanticObject, action },\n\t\t\t\tibnParams\n\t\t\t}\n\t\t}\n\t];\n};\n/**\n * Checks if the leanDT card exists in the application at runtime or not\n *\n * @param appComponent\n * @param isDesignMode\n * @returns boolean\n */\nconst checkIfLeanDTCardExists = (appComponent: Component, isDesignMode: boolean = false): boolean => {\n\tconst mApplicationManifest = appComponent.getManifest() as AppManifest;\n\treturn !(!mApplicationManifest[\"sap.cards.ap\"] && !isDesignMode);\n};\n\n/**\n * Determines whether semantic card generation should be enabled based on the URL parameter 'generateSemanticCard'\n * and the existence of a leanDT card in the application.\n *\n * - If 'generateSemanticCard' is 'always', semantic card generation is enabled.\n * - If 'generateSemanticCard' is 'lean', semantic card generation is enabled only if the leanDT card does not exist.\n * - Otherwise, semantic card generation is not enabled.\n *\n * @param {Component} appComponent - The application component instance.\n * @returns {boolean} true if semantic card generation should be enabled, false otherwise.\n */\nexport function isSemanticCardGeneration(appComponent: Component): boolean {\n\tconst searchParams = window.location?.search;\n\n\tif (!searchParams) {\n\t\treturn false;\n\t}\n\n\tconst urlParams = new URLSearchParams(searchParams);\n\tconst generateSemanticCardParam = urlParams.get(\"generateSemanticCard\");\n\tif (generateSemanticCardParam === GenerateSemanticCard.Always) {\n\t\treturn true;\n\t}\n\n\tif (generateSemanticCardParam === GenerateSemanticCard.Lean) {\n\t\treturn !checkIfLeanDTCardExists(appComponent);\n\t}\n\n\treturn false;\n}\n\n/**\n * Fetches key parameters for the given application component.\n *\n * @param {Component} appComponent - The application component.\n * @param {FreeStyleFetchOptions} fetchOptions - The Options isDesignMode and for FreeStyle application sharing entitySet and keyParameters.\n * @returns {Promise<KeyParameter[]>} - A promise that resolves to an array of key parameters.\n */\nexport const getKeyParameters = async (\n\tappComponent: Component,\n\tfetchOptions: FreeStyleFetchOptions = {\n\t\tisDesignMode: false,\n\t\tentitySet: \"\",\n\t\tkeyParameters: {}\n\t}\n): Promise<KeyParameter[]> => {\n\tconst applicationInfo = await ApplicationInfo.getInstance(appComponent).fetchDetails(fetchOptions);\n\tconst { entitySetWithObjectContext, appType, contextParameters } = applicationInfo;\n\n\tif (appType === AppType.FreeStyle && !entitySetWithObjectContext) {\n\t\treturn [];\n\t}\n\n\treturn contextParameters.split(\",\").map((parameter) => {\n\t\tconst [key, value] = parameter.split(\"=\");\n\t\tconst formattedValue = value.replace(/guid|datetimeoffset|datetime|'*/g, \"\");\n\n\t\treturn { key, formattedValue };\n\t});\n};\n\n/**\n * Function to handle the hide actions for the card\n *\n * @param appComponent\n * @param mManifest\n */\nconst handleHideActions = function (appComponent: Component, mManifest: CardManifest) {\n\tconst appManifest = appComponent.getManifest() as AppManifest;\n\tconst cardsConfig = appManifest[\"sap.cards.ap\"]?.embeds.ObjectPage;\n\n\tif (cardsConfig && Object.keys(cardsConfig[\"manifests\"]).length > 0) {\n\t\tconst defaultEntitySet = cardsConfig?.[\"default\"];\n\t\tconst hideActions = (defaultEntitySet && cardsConfig[\"manifests\"][defaultEntitySet]?.[0]?.hideActions) || false;\n\t\tconst mParameters = mManifest?.[\"sap.card\"]?.configuration?.parameters;\n\n\t\tif (hideActions && mParameters?._adaptiveFooterActionParameters) {\n\t\t\tdelete mParameters[\"_adaptiveFooterActionParameters\"];\n\t\t}\n\t\tif (hideActions && mParameters?.footerActionParameters) {\n\t\t\tdelete mParameters[\"footerActionParameters\"];\n\t\t}\n\t\tif (hideActions && mManifest?.[\"sap.card\"]?.footer) {\n\t\t\tdelete mManifest[\"sap.card\"][\"footer\"];\n\t\t}\n\t}\n};\n\n/**\n * Updates the data path of the card header in the provided card manifest by reference.\n *\n * @param {CardManifest} cardManifest - The card manifest object that contains the header data.\n */\nexport function updateHeaderDataPath(cardManifest: CardManifest, isODataV4: boolean) {\n\tconst headerData = cardManifest[\"sap.card\"].header.data;\n\tconst dataPathHeader = isODataV4 ? \"/header/\" : \"/header/d/\";\n\n\tif (headerData?.path) {\n\t\theaderData.path = dataPathHeader;\n\t}\n}\n\n/**\n * Fetches the card manifest for the preview\n *\n * @param {Component} appComponent The root component of the application\n * @param {FreeStyleCardManifestFetchOptions} fetchOptions The Fetch options for FreeStyle Cards\n * @returns {Promise<any>} The card manifest\n * @public\n * @since 1.141.0\n */\nexport const getCardManifestForPreview = async function (appComponent: Component, fetchOptions: FreeStyleCardManifestFetchOptions) {\n\tif (!fetchOptions.entitySet || !fetchOptions.keyParameters || Object.keys(fetchOptions.keyParameters).length === 0) {\n\t\treturn Promise.reject(\"Failed to share the card : Missing required parameters either entitySet or keyParameters\");\n\t}\n\n\treturn await getObjectPageCardManifestForPreview(appComponent, fetchOptions);\n};\n\n/**\n * Fetches the card manifest for the object page\n *\n * @param {Component} appComponent The root component of the application\n * @param {CardManifestFetchOptions} fetchOptions The options\n * @returns {Promise<any>} The card manifest\n * @private\n * @since 1.124.0\n * @restricted sap.fe, sap.ui.generic.app\n */\nexport const getObjectPageCardManifestForPreview = async function (appComponent: Component, fetchOptions?: CardManifestFetchOptions) {\n\tif (isSemanticCardGeneration(appComponent)) {\n\t\tconst semanticCardInstance = createSemanticCardFactory(appComponent, {\n\t\t\tcardType: fetchOptions?.cardType\n\t\t});\n\t\tconst semanticObjectCard = await semanticCardInstance.generateObjectCard();\n\t\treturn semanticObjectCard;\n\t}\n\n\tconst isDesignMode = fetchOptions?.isDesignMode ?? false;\n\tconst freeStyleFetchOptions = {\n\t\tisDesignMode: isDesignMode,\n\t\tentitySet: (fetchOptions as FreeStyleCardManifestFetchOptions).entitySet ?? \"\",\n\t\tkeyParameters: (fetchOptions as FreeStyleCardManifestFetchOptions).keyParameters ?? {}\n\t};\n\tconst applicationInfo = await ApplicationInfo.getInstance(appComponent).fetchDetails(freeStyleFetchOptions);\n\tconst { componentName, entitySet, context, resourceBundle, semanticObject, action, odataModel, variantParameter, navigationURI } =\n\t\tapplicationInfo;\n\tconst hostOptions = {\n\t\tcardType: CardTypes.INTEGRATION,\n\t\tcomponentName: componentName,\n\t\tentitySet: entitySet,\n\t\tcontext\n\t};\n\n\tconst cardManifest = await _getObjectPageCardManifest(appComponent, hostOptions, isDesignMode);\n\n\tif (!cardManifest || Object.keys(cardManifest).length === 0) {\n\t\treturn Promise.reject(\"No cards available for this application\");\n\t}\n\n\tconst keyParameters = await getKeyParameters(appComponent, freeStyleFetchOptions);\n\n\tif (fetchOptions?.hideActions ?? true) {\n\t\thandleHideActions(appComponent, cardManifest);\n\t}\n\n\tconst cardType = fetchOptions?.cardType || CardTypes.INTEGRATION;\n\tif (cardType === CardTypes.INTEGRATION) {\n\t\tcardManifest[\"sap.card\"][\"data\"][\"request\"][\"headers\"][\"Accept-Language\"] ??= \"{{parameters.LOCALE}}\";\n\t\tconst parameters = cardManifest[\"sap.card\"].configuration.parameters;\n\t\tconst data = cardManifest[\"sap.card\"][\"data\"];\n\t\tconst contentUrl = data[\"request\"][\"batch\"][\"content\"][\"url\"];\n\t\tif (contentUrl.includes(\"{{parameters.contextParameters}}\")) {\n\t\t\t/**\n\t\t\t * Replace the contextParameters with the object context\n\t\t\t * This is required for the integration card to fetch the data until all the manifests are regenerated.\n\t\t\t */\n\t\t\tcardManifest[\"sap.card\"][\"configuration\"][\"parameters\"][\"contextParameters\"] = {\n\t\t\t\ttype: \"string\",\n\t\t\t\tvalue: hostOptions.context\n\t\t\t};\n\t\t}\n\t\tkeyParameters.forEach((parameter) => {\n\t\t\tif (parameters[parameter.key] !== undefined) {\n\t\t\t\tparameters[parameter.key][\"value\"] = parameter.formattedValue;\n\t\t\t}\n\t\t});\n\n\t\tif (fetchOptions?.includeActions ?? true) {\n\t\t\tawait addActionsToCardHeader(cardManifest, applicationInfo);\n\t\t}\n\n\t\tconst isODataV4 = odataModel === ODataModelVersion.V4;\n\t\tupdateHeaderDataPath(cardManifest, isODataV4);\n\t\treturn resolvei18nTextsForIntegrationCard(cardManifest, resourceBundle);\n\t} else {\n\t\tconst cardManifestWithResolvedI18nTexts = resolvei18nTextsForIntegrationCard(cardManifest, resourceBundle);\n\t\tconst appIntent = variantParameter\n\t\t\t? `${semanticObject}-${action}?sap-appvar-id=${variantParameter}`\n\t\t\t: `${semanticObject}-${action}`;\n\t\treturn convertIntegrationCardToAdaptive(cardManifestWithResolvedI18nTexts, appIntent, keyParameters, navigationURI);\n\t}\n};\n"],"mappings":"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","ignoreList":[]}