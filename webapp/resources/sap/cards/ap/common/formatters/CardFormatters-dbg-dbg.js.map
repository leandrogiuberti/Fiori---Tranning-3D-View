{"version":3,"file":"CardFormatters-dbg-dbg.js","names":["sap","ui","define","whitespaceReplacer","sap_m_library","UI5Date","DateFormat","NumberFormat","sap_ui_core_library","IntegrationUtils","ValueColor","ValueState","CriticalityConstants","StateValues","None","Negative","Critical","Positive","ColorValues","CriticalityTypes","Information","endsWith","value","suffix","indexOf","length","criticality2state","criticality","criticalityState","val","EnumMember","calculateTrendDirection","aggregateValue","referenceValue","downDifferenceValue","upDifferenceValue","undefined","Number","calculateCriticalityState","improvementDirection","deviationLowValue","deviationHighValue","toleranceLowValue","toleranceHighValue","minValue","NEGATIVE_INFINITY","maxValue","POSITIVE_INFINITY","toleranceHigh","parseFloat","deviationHigh","toleranceLow","deviationLow","formatKPIValue","formatterOptions","isUnit","kpiValue","floatFormatterInstance","getFloatInstance","minFractionDigits","NumberOfFractionalDigits","maxFractionDigits","style","showScale","shortRefNumber","formattedValue","format","numberScale","getScale","sLastNumber","slice","percentageAvailable","formatDateValue","pattern","result","year","month","parseInt","substring","getInstance","Date","UTC","startofWeekDay","targetValueFormatter","targetValue","isNaN","scaleFactor","manifestTarget","fractionalDigits","Math","max","min","numberFormatter","formatValueColor","defaultValue","sImprovementDirection","bIsDeviationLowBinding","bIsDeviationHighBinding","bIsToleranceLowBinding","bIsToleranceHighBinding","oCriticalityConfigValues","formatTrendIcon","bIsRefValBinding","bIsDownDiffBinding","downDifference","bIsUpDiffBinding","upDifference","formatNumber","value1","value2","textFragments","formatterInstance","numberOfFractionalDigits","parts","reduce","textFragment","formatCriticality","criticalityValue","type","String","Error","Warning","Success","Good","Neutral","formatWithPercentage","computePercentage","target","percentValue","numerator","denominator","toString","formatCriticalityIcon","formatCriticalityButtonType","formatToKeepWhitespace","returnPercentageChange","kpi","percentNumber","percentFormatterInstance","getPercentInstance","formatCurrency","includeText","currency","currencyCodeText","currencyFormatterInstance","getCurrencyInstance","showMeasure","formatHeaderCount","integerFormatterInstance","getIntegerInstance","decimalSeparator","formatDate","dateValue","oDate","parseJsonDateTime","getDateInstance","kpiValueCriticality","formatCriticalityValueState","formatCriticalityColorMicroChart","getFormatters","__exports","__esModule"],"sources":["CardFormatters.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport whitespaceReplacer from \"sap/base/strings/whitespaceReplacer\";\nimport { ValueColor } from \"sap/m/library\";\nimport UI5Date from \"sap/ui/core/date/UI5Date\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport IntegrationUtils from \"sap/ui/integration/util/Utils\";\n\nconst CriticalityConstants = {\n\tStateValues: {\n\t\tNone: \"None\",\n\t\tNegative: \"Error\",\n\t\tCritical: \"Warning\",\n\t\tPositive: \"Success\"\n\t},\n\tColorValues: {\n\t\tNone: \"Neutral\",\n\t\tNegative: \"Error\",\n\t\tCritical: \"Critical\",\n\t\tPositive: \"Good\"\n\t}\n};\n\nconst CriticalityTypes = {\n\tNegative: \"UI.CriticalityType/Negative\",\n\tCritical: \"UI.CriticalityType/Critical\",\n\tPositive: \"UI.CriticalityType/Positive\",\n\tInformation: \"UI.CriticalityType/Information\"\n};\n\ntype Criticality = {\n\tEnumMember: string;\n};\n\ntype CriticalityState = {\n\tNone: string;\n\tNegative: string;\n\tCritical: string;\n\tPositive: string;\n};\n\ntype KPIFormatterConfig = {\n\tNumberOfFractionalDigits: number;\n\tpercentageAvailable: boolean;\n};\n\ntype CurrencyFormatterConfig = {\n\tscaleFactor: number;\n\tnumberOfFractionalDigits: number;\n};\n\ntype TargetFormatterConfig = {\n\tNumberOfFractionalDigits: number;\n\tmanifestTarget: number;\n};\n\ntype TrendIconFormatterConfig = {\n\tbIsRefValBinding: boolean;\n\tbIsDownDiffBinding: boolean;\n\tbIsUpDiffBinding: boolean;\n\treferenceValue: number;\n\tdownDifference: number;\n\tupDifference: number;\n};\n\nexport type DateFormatterConfig = {\n\tUTC: boolean;\n};\n\nexport type NumberFormatterConfig = {\n\tnumberOfFractionalDigits: number;\n\tstyle: string;\n\tshowScale: boolean;\n\tscaleFactor: number;\n\tmaxFractionDigits: number;\n\tminFractionDigits: number;\n\tshortRefNumber: number;\n};\n\nexport type ValueColorFormatterConfig = {\n\tsImprovementDirection: string;\n\tbIsDeviationLowBinding: boolean;\n\tbIsDeviationHighBinding: boolean;\n\tbIsToleranceLowBinding: boolean;\n\tbIsToleranceHighBinding: boolean;\n\tdeviationLow: number;\n\tdeviationHigh: number;\n\ttoleranceLow: number;\n\ttoleranceHigh: number;\n\toCriticalityConfigValues: CriticalityState;\n};\n\n/**\n * Checks if the provided string ends with the specified suffix.\n *\n *  @param {string} value The string to check.\n *  @param {string} suffix The suffix to look for.\n *  @return {string | boolean} Returns true if the string ends with the suffix, otherwise false.\n *\n */\nconst endsWith = function (value: string, suffix: string): boolean {\n\tif (!value || !suffix) {\n\t\treturn false;\n\t}\n\n\treturn value.indexOf(suffix, value.length - suffix.length) !== -1;\n};\n\n/**\n * Returns the criticality state for the provided criticality value.\n *\n * @param {Criticality | undefined} criticality - The criticality value containing an EnumMember with criticality values.\n * @param {CriticalityState | undefined} criticalityState - The criticality state values for the criticality values.\n * @return {string} - The criticality state for the provided criticality value.\n */\nconst criticality2state = function (criticality: Criticality, criticalityState: CriticalityState | undefined): string {\n\tif (!criticalityState) {\n\t\treturn \"\";\n\t}\n\n\tconst val = criticality?.EnumMember || \"\";\n\tif (endsWith(val, \"Negative\")) {\n\t\treturn criticalityState.Negative;\n\t} else if (endsWith(val, \"Critical\")) {\n\t\treturn criticalityState.Critical;\n\t} else if (endsWith(val, \"Positive\")) {\n\t\treturn criticalityState.Positive;\n\t}\n\n\treturn criticalityState.None || \"\";\n};\n\n/**\n * Returns the trend icon for the provided aggregate value.\n *\n * @param {number | string} aggregateValue - The value provided to get the trend icon based on the values of referenceValue, downDifferenceValue, and upDifferenceValue.\n * @param {number} referenceValue - The reference value used to calculate the trend direction.\n * @param {number} downDifferenceValue - The threshold for determining a \"Down\" trend.\n * @param {number} upDifferenceValue - The threshold for determining an \"Up\" trend.\n * @return {string | undefined} - Returns the trend icon for the provided aggregate value.\n */\nconst calculateTrendDirection = function (\n\taggregateValue: number | string,\n\treferenceValue: number,\n\tdownDifferenceValue: number,\n\tupDifferenceValue: number\n): string | undefined {\n\tif (!aggregateValue || !referenceValue) {\n\t\treturn undefined;\n\t}\n\n\tconst value = Number(aggregateValue);\n\tif (!upDifferenceValue && value - referenceValue >= 0) {\n\t\treturn \"Up\";\n\t}\n\tif (!downDifferenceValue && value - referenceValue <= 0) {\n\t\treturn \"Down\";\n\t}\n\tif (referenceValue && upDifferenceValue && value - referenceValue >= upDifferenceValue) {\n\t\treturn \"Up\";\n\t}\n\tif (referenceValue && downDifferenceValue && value - referenceValue <= downDifferenceValue) {\n\t\treturn \"Down\";\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns the criticality state for the provided value.\n *\n *  @param  {number} value value provided for which criticality state is returned based on the improvement direction value provided\n *  @param  {string} improvementDirection If this value is Minimize/Minimizing, toleranceHigh/deviationHigh will be used for getting criticality state\n\t\t\t\t\t\t\t\t\tIf this value is Maximize/Maximizing, toleranceLow/deviationLow will be used for getting criticality state\n\t\t\t\t\t\t\t\t\tIf this value is Target, toleranceLow,toleranceHigh /deviationLow,deviationHigh will be used for getting criticality state\n *  @param  {string | number} deviationLowValue value provided used in getting criticality state when improvement direction is Maximize/Maximizing\n *  @param  {string | number} deviationHighValue value provided used in getting criticality state when improvement direction is Minimize/Minimizing\n *  @param  {string | number} toleranceLowValue  value provided used in getting criticality state when improvement direction is Maximize/Maximizing\n *  @param  {string | number} toleranceHighValue value provided used in getting criticality state when improvement direction is Minimize/Minimizing\n *  @param  {CriticalityState} criticalityState will have criticality state values for EnumMember of oCriticality provided to criticality2state()\n *  @return {string | undefined} returns criticality state for the value provided based on the improvement direction value provided\n *\n */\nconst calculateCriticalityState = function (\n\tvalue: number,\n\timprovementDirection: string,\n\tdeviationLowValue: string | number,\n\tdeviationHighValue: string | number,\n\ttoleranceLowValue: string | number,\n\ttoleranceHighValue: string | number,\n\tcriticalityState: CriticalityState\n): string {\n\tconst criticality = {\n\t\tEnumMember: \"None\"\n\t};\n\n\t/*\n\t * Consider fallback values for optional threshold values in criticality calculation\n\t * after considering fallback values if all the values required for calculation are not present then the criticality will be neutral\n\t * example - in case of maximizing\n\t * if deviationLowValue is mentioned and toleranceLowValue not mentioned, then toleranceLowValue = deviationLowValue\n\t * if toleranceLowValue is mentioned and deviationLowValue not mentioned, then deviationLowValue = Number.NEGATIVE_INFINITY\n\t * if both values are not mentioned then there will not be any calculation and criticality will be neutral\n\t *\n\t */\n\tconst minValue = Number.NEGATIVE_INFINITY;\n\tconst maxValue = Number.POSITIVE_INFINITY;\n\tlet toleranceHigh = typeof toleranceHighValue === \"string\" ? parseFloat(toleranceHighValue) : toleranceHighValue;\n\tlet deviationHigh = typeof deviationHighValue === \"string\" ? parseFloat(deviationHighValue) : deviationHighValue;\n\tlet toleranceLow = typeof toleranceLowValue === \"string\" ? parseFloat(toleranceLowValue) : toleranceLowValue;\n\tlet deviationLow = typeof deviationLowValue === \"string\" ? parseFloat(deviationLowValue) : deviationLowValue;\n\n\tif (!toleranceLow && toleranceLow !== 0 && (deviationLow || deviationLow === 0)) {\n\t\ttoleranceLow = deviationLow;\n\t}\n\tif (!toleranceHigh && toleranceHigh !== 0 && (deviationHigh || deviationHigh === 0)) {\n\t\ttoleranceHigh = deviationHigh;\n\t}\n\tif (!deviationLow && deviationLow !== 0) {\n\t\tdeviationLow = minValue;\n\t}\n\tif (!deviationHigh && deviationHigh !== 0) {\n\t\tdeviationHigh = maxValue;\n\t}\n\n\t// number could be a zero number so check if it is not undefined\n\t/* eslint-disable  @typescript-eslint/no-unnecessary-condition */\n\tif (value !== undefined) {\n\t\tvalue = Number(value);\n\t\tif (endsWith(improvementDirection, \"Minimize\") || endsWith(improvementDirection, \"Minimizing\")) {\n\t\t\tif ((toleranceHigh || toleranceHigh === 0) && (deviationHigh || deviationHigh === 0)) {\n\t\t\t\tif (value <= toleranceHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\t\t} else if (value > deviationHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\t\t} else {\n\t\t\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (endsWith(improvementDirection, \"Maximize\") || endsWith(improvementDirection, \"Maximizing\")) {\n\t\t\tif ((toleranceLow || toleranceLow === 0) && (deviationLow || deviationLow === 0)) {\n\t\t\t\tif (value >= toleranceLow) {\n\t\t\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\t\t} else if (value < deviationLow) {\n\t\t\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\t\t} else {\n\t\t\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (endsWith(improvementDirection, \"Target\")) {\n\t\t\tif (\n\t\t\t\t(toleranceHigh || toleranceHigh === 0) &&\n\t\t\t\t(deviationHigh || deviationHigh === 0) &&\n\t\t\t\t(toleranceLow || toleranceLow === 0) &&\n\t\t\t\t(deviationLow || deviationLow === 0)\n\t\t\t) {\n\t\t\t\tif (value >= toleranceLow && value <= toleranceHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\t\t} else if (value < deviationLow || value > deviationHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\t\t} else {\n\t\t\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn criticality2state(criticality, criticalityState);\n};\n\n/**\n * Returns formatted KPI value.\n *\n * @param {string} value\n * @param {KPIFormatterConfig} formatterOptions\n * @param {boolean} isUnit - Determines the formatting style based on percentage availability.\n * @return {string} - Returns formatted KPI value.\n */\nconst formatKPIValue = function (value: string, formatterOptions: KPIFormatterConfig, isUnit: boolean): string {\n\tconst kpiValue = Number(value);\n\tconst floatFormatterInstance = NumberFormat.getFloatInstance({\n\t\tminFractionDigits: formatterOptions.NumberOfFractionalDigits,\n\t\tmaxFractionDigits: formatterOptions.NumberOfFractionalDigits,\n\t\tstyle: \"short\",\n\t\tshowScale: true,\n\t\tshortRefNumber: kpiValue\n\t});\n\tconst formattedValue = floatFormatterInstance.format(kpiValue),\n\t\tnumberScale = floatFormatterInstance.getScale() || \"\";\n\n\tif (!isUnit && formattedValue) {\n\t\tconst sLastNumber = formattedValue[formattedValue.length - 1];\n\t\treturn sLastNumber === numberScale ? formattedValue.slice(0, formattedValue.length - 1) : formattedValue;\n\t}\n\n\tif (isUnit) {\n\t\treturn formatterOptions.percentageAvailable ? `${numberScale}%` : numberScale;\n\t}\n\n\treturn \"\";\n};\n\n/**\n * Returns formatted date value based on the provided pattern.\n *\n * @param {string} value - The value to be formatted. If 'YYYYM', pattern is 'yearmonth', <M> no of months will be added to the <YYYY> in the date formatted.\n *                                   If 'YYYYQ', pattern is 'yearquarter', <Q> no of quarters will be added to the <YYYY> in the date formatted.\n *                                   If 'YYYYW', pattern is 'yearweek', <W> no of weeks will be added to the <YYYY> in the date formatted.\n * @param {string} pattern - The pattern provided which can be 'yearmonth', 'yearquarter', or 'yearweek'.\n * @return {UI5Date | Date | undefined} - Returns formatted date value based on the provided pattern.\n */\nconst formatDateValue = function (value: string, pattern: string): UI5Date | Date | undefined {\n\tlet result;\n\tlet year: number, month: number;\n\n\tswitch (pattern) {\n\t\tcase \"yearmonth\":\n\t\t\tyear = parseInt(value.substring(0, 4), 10);\n\t\t\tmonth = parseInt(value.substring(4), 10) - 1; // month attribute in Date constructor is 0-based\n\t\t\tresult = UI5Date.getInstance(Date.UTC(year, month));\n\t\t\tbreak;\n\t\tcase \"yearquarter\":\n\t\t\tyear = parseInt(value.substring(0, 4), 10);\n\t\t\tmonth = parseInt(value.substring(4), 10) * 3 - 3; // month attribute in Date constructor is 0-based\n\t\t\tresult = UI5Date.getInstance(Date.UTC(year, month));\n\t\t\tbreak;\n\t\tcase \"yearweek\":\n\t\t\tyear = parseInt(value.substring(0, 4), 10);\n\t\t\tconst startofWeekDay = 1 + (parseInt(value.substring(4), 10) - 1) * 7; // 1st of January + 7 days for each week\n\t\t\tresult = UI5Date.getInstance(Date.UTC(year, 0, startofWeekDay));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = undefined;\n\t\t\tbreak;\n\t}\n\n\treturn result;\n};\n\n/**\n * Returns formatted target value.\n *\n * @param {number} kpiValue - The KPI value provided which will be taken as scale factor when it is not zero.\n * @param {number} targetValue - The target value provided which will be formatted based on the number of fractional digits & scale factor.\n *                                If this is undefined, manifestTarget of formatterOptions will be used as value to be formatted.\n *                                This will be taken as scale factor when KPI value provided is zero.\n * @param {TargetFormatterConfig} formatterOptions - Can have manifestTarget and will have NumberOfFractionalDigits.\n * @return {string | undefined} - Returns formatted target value based on provided KPI value and target value.\n */\nconst targetValueFormatter = function (kpiValue: number, targetValue: number, formatterOptions: TargetFormatterConfig): string | undefined {\n\tif (isNaN(Number(kpiValue))) {\n\t\treturn \"\";\n\t}\n\n\tconst scaleFactor = kpiValue === 0 ? targetValue : kpiValue;\n\tconst value = targetValue ?? formatterOptions.manifestTarget;\n\tlet fractionalDigits = Number(formatterOptions.NumberOfFractionalDigits) ?? 0;\n\n\tfractionalDigits = Math.max(0, Math.min(fractionalDigits, 2));\n\n\tif (value) {\n\t\tconst numberFormatter = NumberFormat.getFloatInstance({\n\t\t\tminFractionDigits: fractionalDigits,\n\t\t\tmaxFractionDigits: fractionalDigits,\n\t\t\tstyle: \"short\",\n\t\t\tshowScale: true,\n\t\t\tshortRefNumber: scaleFactor\n\t\t});\n\t\treturn numberFormatter.format(+value);\n\t}\n\n\treturn undefined;\n};\n\n/**\n *  Returns the criticality state for the provided value.\n *\n *  @param  {number} value value provided to get the criticality state based on properties of staticValues provided\n *  @param  {ValueColorFormatterConfig} formatterOptions will have values of improvement direction, bIsDeviationLowBinding, bIsDeviationHighBinding, bIsToleranceLowBinding, bIsToleranceHighBinding, deviationLow, deviationHigh, toleranceLow, toleranceHigh, oCriticalityConfigValues\n *  @param  {number} defaultValue value for deviationLow, deviationHigh, toleranceLow, toleranceHigh which will be provided to calculateCriticalityState(), when bIsDeviationLowBinding, bIsDeviationHighBinding, bIsToleranceLowBinding, bIsToleranceHighBinding informatterOptions is true\n *  @return {string | undefined} returns criticality state for the value provided\n *\n */\nconst formatValueColor = function (value: number, formatterOptions: ValueColorFormatterConfig, defaultValue: number): string {\n\treturn calculateCriticalityState(\n\t\tvalue,\n\t\tformatterOptions.sImprovementDirection,\n\t\tformatterOptions.bIsDeviationLowBinding ? defaultValue : formatterOptions.deviationLow,\n\t\tformatterOptions.bIsDeviationHighBinding ? defaultValue : formatterOptions.deviationHigh,\n\t\tformatterOptions.bIsToleranceLowBinding ? defaultValue : formatterOptions.toleranceLow,\n\t\tformatterOptions.bIsToleranceHighBinding ? defaultValue : formatterOptions.toleranceHigh,\n\t\tformatterOptions.oCriticalityConfigValues\n\t);\n};\n\n/**\n * Returns the trend icon for the provided value.\n *\n * @param {number | string} value - The value provided which will be passed to calculateTrendDirection() to get trend icon based on properties of formatterOptions provided.\n * @param {TrendIconFormatterConfig} formatterOptions - Contains properties referenceValue, downDifference, upDifference which will be provided for formatTrendIcon() to get trend icon.\n * @param {number} defaultValue - The default value for referenceValue, downDifference, upDifference in calculateTrendDirection(), when their respective bindings in formatterOptions are true.\n * @return {string | undefined} - Returns trend icon for the value provided.\n */\nconst formatTrendIcon = function (\n\tvalue: number | string,\n\tformatterOptions: TrendIconFormatterConfig,\n\tdefaultValue: number\n): string | undefined {\n\treturn calculateTrendDirection(\n\t\tvalue,\n\t\tformatterOptions.bIsRefValBinding ? defaultValue : formatterOptions.referenceValue,\n\t\tformatterOptions.bIsDownDiffBinding ? defaultValue : formatterOptions.downDifference,\n\t\tformatterOptions.bIsUpDiffBinding ? defaultValue : formatterOptions.upDifference\n\t);\n};\n\n/**\n * Returns formatted values of value1 & value2 provided, depending on values of formatterOptions.\n *\n * @param {string} value1 - Will be formatted based on values of formatterOptions & displayed if 0 is included in textFragments array.\n * @param {string} value2 - Will be formatted based on values of formatterOptions & displayed if 1 is included in textFragments array.\n * @param {NumberFormatterConfig | undefined} formatterOptions - Will have properties numberOfFractionalDigits, style, showScale, scaleFactor.\n * @param {Array<number>} textFragments - If provided array includes [1, 0] formatted values of value2, value1 will be displayed in that order.\n * @return {string} - Returns formatted values of value1 & value2 provided, depending on values of formatterOptions.\n */\nconst formatNumber = function (\n\tvalue1: string,\n\tvalue2: string,\n\tformatterOptions: NumberFormatterConfig | undefined,\n\ttextFragments: Array<number>\n): string {\n\tlet formatterInstance;\n\n\tif (formatterOptions) {\n\t\tconst { numberOfFractionalDigits = 0, style = \"short\", showScale = true, scaleFactor } = formatterOptions;\n\n\t\tformatterInstance = NumberFormat.getFloatInstance({\n\t\t\tminFractionDigits: numberOfFractionalDigits,\n\t\t\tmaxFractionDigits: numberOfFractionalDigits,\n\t\t\tstyle,\n\t\t\tshowScale,\n\t\t\tshortRefNumber: scaleFactor\n\t\t});\n\t}\n\n\tconst parts: Array<string> = [\n\t\t!isNaN(parseFloat(value1)) && formatterInstance ? formatterInstance.format(parseFloat(value1)) : value1,\n\t\t!isNaN(parseFloat(value2)) && formatterInstance ? formatterInstance.format(parseFloat(value2)) : value2\n\t];\n\n\treturn textFragments.reduce(function (value, textFragment) {\n\t\treturn value + (typeof textFragment === \"number\" ? parts[textFragment] : textFragment);\n\t}, \"\");\n};\n\n/**\n * Returns criticality values depending on provided sCriticality and type values.\n *\n * @param {string | number} criticalityValue - The value provided to get the criticality state.\n * @param {string} type - State criticality values will be returned if this value is 'state', color criticality values will be returned if this value is 'color'.\n * @return {string | undefined} - Returns criticality values based on provided criticality and type values.\n */\nconst formatCriticality = function (criticalityValue: string | number, type: string): string | undefined {\n\tconst criticality = String(criticalityValue);\n\n\tif (type === \"state\") {\n\t\tswitch (criticality) {\n\t\t\tcase \"1\":\n\t\t\tcase \"Error\":\n\t\t\t\treturn ValueState.Error;\n\t\t\tcase \"2\":\n\t\t\tcase \"Warning\":\n\t\t\tcase \"Critical\":\n\t\t\t\treturn ValueState.Warning;\n\t\t\tcase \"3\":\n\t\t\tcase \"Success\":\n\t\t\tcase \"Good\":\n\t\t\t\treturn ValueState.Success;\n\t\t\tcase \"4\":\n\t\t\tcase \"Information\":\n\t\t\t\treturn ValueState.Information;\n\t\t\tdefault:\n\t\t\t\treturn ValueState.None;\n\t\t}\n\t}\n\n\tif (type === \"color\") {\n\t\tswitch (criticality) {\n\t\t\tcase \"1\":\n\t\t\tcase \"Error\":\n\t\t\t\treturn ValueColor.Error;\n\t\t\tcase \"2\":\n\t\t\tcase \"Critical\":\n\t\t\t\treturn ValueColor.Critical;\n\t\t\tcase \"3\":\n\t\t\tcase \"Good\":\n\t\t\t\treturn ValueColor.Good;\n\t\t\tcase \"4\":\n\t\t\tcase \"Neutral\":\n\t\t\t\treturn ValueColor.Neutral;\n\t\t\tdefault:\n\t\t\t\treturn ValueColor.None;\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns formatted percentage value.\n *\n * @param {string} value - The string value provided which will be appended with a percentage symbol.\n * @return {string} - Returns the string formatted with a percentage symbol.\n */\nconst formatWithPercentage = function (value?: string): string {\n\treturn value ? `${value} %` : \"\";\n};\n\n/**\n * Returns computed percentage value.\n *\n * @param {string | number} value - Value to be divided by the target provided.\n * @param {string | number} target - Target provided to divide the value provided to compute percentage.\n * @param {string} [isUnit] - Optional parameter, when '%' is provided target is not used to calculate percentage.\n * @return {string} - Returns percentage value computed.\n */\nconst computePercentage = function (value: string | number, target: string | number, isUnit?: string): string | undefined {\n\tlet percentValue: string;\n\n\tif (value === undefined) {\n\t\treturn \"0\";\n\t}\n\n\tconst numerator: number = typeof value === \"string\" ? parseFloat(value) : value;\n\tconst denominator: number = typeof target === \"string\" ? parseFloat(target) : target;\n\tif (isUnit === \"%\") {\n\t\tif (numerator > 100) {\n\t\t\tpercentValue = \"100\";\n\t\t} else if (numerator <= 0) {\n\t\t\tpercentValue = \"0\";\n\t\t} else {\n\t\t\tpercentValue = typeof value === \"string\" ? value : value.toString();\n\t\t}\n\t} else if (numerator > denominator) {\n\t\tpercentValue = \"100\";\n\t} else if (numerator <= 0) {\n\t\tpercentValue = \"0\";\n\t} else {\n\t\tpercentValue = numerator && denominator ? ((numerator / denominator) * 100).toString() : \"0\";\n\t}\n\n\treturn percentValue;\n};\n\n/**\n * Returns message for the provided criticality state.\n *\n * @param {string | number} value - Criticality state provided.\n * @return {string | undefined} - Returns criticality icon message based on the provided criticality state.\n */\nconst formatCriticalityIcon = function (value?: string | number): string {\n\tswitch (value) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"sap-icon://message-error\";\n\t\tcase CriticalityTypes.Critical:\n\t\tcase \"2\":\n\t\tcase 2:\n\t\t\treturn \"sap-icon://message-warning\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"sap-icon://message-success\";\n\t\tcase CriticalityTypes.Information:\n\t\tcase \"5\":\n\t\tcase 5:\n\t\t\treturn \"sap-icon://message-information\";\n\t\tdefault:\n\t\t\treturn \"\";\n\t}\n};\n\n/**\n * Returns criticality button type based on the criticality state provided.\n *\n * @param {string | number} val - Criticality state provided.\n * @return {string} - Returns criticality button type based on the provided criticality state.\n */\nconst formatCriticalityButtonType = function (val?: string | number): string {\n\tswitch (val) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"Reject\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"Accept\";\n\t\tdefault:\n\t\t\treturn \"Default\";\n\t}\n};\n\n/**\n * Returns formatted string value after replacing tab space \\t with a white space & a non-breaking whitespace.\n *\n * @param {string | boolean | number} value - Value provided to be formatted if it's a string; otherwise, the provided value will be returned.\n * @return {string} - Returns formatted string value after replacing tab spaces with a white space & a non-breaking whitespace.\n */\nconst formatToKeepWhitespace = function (value: string | boolean | number): string {\n\treturn value === null || value === undefined ? \"\" : whitespaceReplacer(String(value));\n};\n\n/**\n * Returns percentage change based on provided kpiValue & targetValue.\n *\n * @param {number | string} kpiValue - The value provided from which target value provided will be subtracted to calculate percentage change.\n * @param {number | string} targetValue - The value provided which will be subtracted from the kpi value provided to calculate percentage change.\n * @param {TargetFormatterConfig} formatterOptions - Contains number of fractional digits to be displayed with percentage change.\n * @return {string | undefined} - Returns calculated percentage change.\n */\nconst returnPercentageChange = function (\n\tkpiValue: number | string,\n\ttargetValue: number | string,\n\tformatterOptions: TargetFormatterConfig\n): string | undefined {\n\tif (isNaN(Number(kpiValue))) {\n\t\treturn \"\";\n\t}\n\n\tconst kpi = Number(kpiValue);\n\tlet referenceValue;\n\tif (targetValue) {\n\t\treferenceValue = Number(targetValue);\n\t} else if (formatterOptions.manifestTarget) {\n\t\treferenceValue = Number(formatterOptions.manifestTarget);\n\t} else {\n\t\treferenceValue = undefined;\n\t}\n\n\tlet fractionalDigits = formatterOptions.NumberOfFractionalDigits ? Number(formatterOptions.NumberOfFractionalDigits) : 0;\n\tfractionalDigits = Math.max(0, Math.min(fractionalDigits, 2));\n\n\tif (referenceValue) {\n\t\tconst percentNumber = (kpi - referenceValue) / referenceValue;\n\t\tconst percentFormatterInstance = NumberFormat.getPercentInstance({\n\t\t\tstyle: \"short\",\n\t\t\tminFractionDigits: fractionalDigits,\n\t\t\tmaxFractionDigits: fractionalDigits,\n\t\t\tshowScale: true\n\t\t});\n\t\treturn percentFormatterInstance.format(percentNumber);\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns formatted currency value based on the number of fractional digits, scale factor, currency code text, and currency unit.\n *\n * @param {number} value - Value provided which will be formatted with currency unit and type based on the number of fractional digits & scale factor.\n * @param {CurrencyFormatterConfig} formatterOptions - Contains number of fractional digits & scale factor.\n * @param {boolean} bIncludeText - Determines if the currency type should be appended.\n * @param {string} sCurrency - Currency unit provided, currency value will be prefixed with this currency unit.\n * @param {string} sCurrencyCodeText - Currency type provided, currency value will be suffixed with this currency type if bIncludeText is true.\n * @return {string} - Returns formatted currency value.\n */\nconst formatCurrency = function (\n\tvalue: float,\n\tformatterOptions: CurrencyFormatterConfig,\n\tincludeText: boolean,\n\tcurrency: string,\n\tcurrencyCodeText: string\n): string {\n\tvalue = Number(value);\n\tconst currencyFormatterInstance = NumberFormat.getCurrencyInstance({\n\t\tstyle: \"short\",\n\t\tshowMeasure: true,\n\t\tshortRefNumber: formatterOptions.scaleFactor,\n\t\tminFractionDigits: formatterOptions.numberOfFractionalDigits,\n\t\tmaxFractionDigits: formatterOptions.numberOfFractionalDigits\n\t});\n\n\tconst formattedValue = currencyFormatterInstance.format(value, currency);\n\treturn includeText ? formattedValue + \" (\" + currencyCodeText + \")\" : formattedValue;\n};\n\n/**\n * Returns formatted value of provided header count.\n *\n * @param {string | number} sValue - Part of the value provided before separator. Will be rounded off with no of fractional digits 1 & 1000 as scale factor.\n * @return {string | undefined} - Returns formatted header count value.\n */\nconst formatHeaderCount = function (value: string | number): string | undefined {\n\tif (value) {\n\t\tconst integerFormatterInstance = NumberFormat.getIntegerInstance({\n\t\t\tminFractionDigits: 0,\n\t\t\tmaxFractionDigits: 1,\n\t\t\tdecimalSeparator: \".\",\n\t\t\tstyle: \"short\"\n\t\t});\n\t\treturn integerFormatterInstance.format(Number(value));\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns formatted value of provided date string.\n *\n * @param {string} dateValue - Date string provided which will be taken & formatted in pattern 'M/d/yy', if no locale value is provided to getInstance() of DateFormat.\n * @param {DateFormatterConfig} formatterOptions - Object having a boolean value which is used to format provided date string with respect to UTC if it is true.\n * @return {string | undefined} - Returns formatted date value based on oLocale & UTC value provided, default oLocale value is \"en-US\".\n */\nconst formatDate = function (dateValue: string, formatterOptions: DateFormatterConfig): string | undefined {\n\tif (dateValue) {\n\t\tconst oDate = IntegrationUtils.parseJsonDateTime(dateValue);\n\t\treturn DateFormat.getDateInstance(formatterOptions).format(UI5Date.getInstance(oDate), formatterOptions.UTC);\n\t}\n};\n\n/**\n * Returns criticality state for the provided criticality value.\n *\n * @param {string | number} value - Provided value based on which EnumMember of criticality is selected. This is provided to criticality2state() further to get criticality state.\n * @return {string | undefined} - Returns criticality state for the provided criticality value.\n */\nconst kpiValueCriticality = function (value: string | number): string {\n\tconst criticality = {\n\t\tEnumMember: \"None\"\n\t};\n\n\tswitch (Number(value)) {\n\t\tcase 1:\n\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcriticality.EnumMember = \"None\";\n\t\t\tbreak;\n\t}\n\n\treturn criticality2state(criticality, CriticalityConstants.ColorValues);\n};\n\n/**\n * Returns criticality value state for the provided criticality value.\n *\n * @param {string | number} value - Provided value which is used to get criticality value state.\n * @return {string | undefined} - Returns criticality value state for the provided criticality value.\n */\nconst formatCriticalityValueState = function (value?: string | number): string | undefined {\n\tswitch (value) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"Error\";\n\t\tcase CriticalityTypes.Critical:\n\t\tcase \"2\":\n\t\tcase 2:\n\t\t\treturn \"Warning\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"Success\";\n\t\tcase CriticalityTypes.Information:\n\t\tcase \"5\":\n\t\tcase 5:\n\t\t\treturn \"Information\";\n\t\tdefault:\n\t\t\treturn \"None\";\n\t}\n};\n\n/**\n * Returns criticality color value for the provided criticality value.\n *\n * @param {string | number} value - Provided value which is used to get criticality color value.\n * @return {string} - Returns criticality color value for the provided criticality value.\n */\nconst formatCriticalityColorMicroChart = function (value?: string | number): string {\n\tswitch (value) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"Error\";\n\t\tcase CriticalityTypes.Critical:\n\t\tcase \"2\":\n\t\tcase 2:\n\t\t\treturn \"Critical\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"Good\";\n\t\tdefault:\n\t\t\treturn \"Neutral\";\n\t}\n};\n\nexport const getFormatters = function () {\n\treturn {\n\t\tformatKPIValue,\n\t\tformatDateValue,\n\t\ttargetValueFormatter,\n\t\tformatValueColor,\n\t\tformatTrendIcon,\n\t\tformatNumber,\n\t\tformatCriticality,\n\t\tformatWithPercentage,\n\t\tcomputePercentage,\n\t\tformatCriticalityIcon,\n\t\tformatCriticalityButtonType,\n\t\tformatToKeepWhitespace,\n\t\treturnPercentageChange,\n\t\tformatCurrency,\n\t\tformatHeaderCount,\n\t\tformatDate,\n\t\tkpiValueCriticality,\n\t\tformatCriticalityValueState,\n\t\tformatCriticalityColorMicroChart\n\t};\n};\n"],"mappings":"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","ignoreList":[]}