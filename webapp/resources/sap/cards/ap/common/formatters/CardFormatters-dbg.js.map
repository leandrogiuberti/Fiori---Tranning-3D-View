{"version":3,"file":"CardFormatters-dbg.js","names":["sap","ui","define","whitespaceReplacer","sap_m_library","UI5Date","DateFormat","NumberFormat","sap_ui_core_library","IntegrationUtils","ValueColor","ValueState","CriticalityConstants","StateValues","None","Negative","Critical","Positive","ColorValues","CriticalityTypes","Information","endsWith","value","suffix","indexOf","length","criticality2state","criticality","criticalityState","val","EnumMember","calculateTrendDirection","aggregateValue","referenceValue","downDifferenceValue","upDifferenceValue","undefined","Number","calculateCriticalityState","improvementDirection","deviationLowValue","deviationHighValue","toleranceLowValue","toleranceHighValue","minValue","NEGATIVE_INFINITY","maxValue","POSITIVE_INFINITY","toleranceHigh","parseFloat","deviationHigh","toleranceLow","deviationLow","formatKPIValue","formatterOptions","isUnit","kpiValue","floatFormatterInstance","getFloatInstance","minFractionDigits","NumberOfFractionalDigits","maxFractionDigits","style","showScale","shortRefNumber","formattedValue","format","numberScale","getScale","sLastNumber","slice","percentageAvailable","formatDateValue","pattern","result","year","month","parseInt","substring","getInstance","Date","UTC","startofWeekDay","targetValueFormatter","targetValue","isNaN","scaleFactor","manifestTarget","fractionalDigits","Math","max","min","numberFormatter","formatValueColor","defaultValue","sImprovementDirection","bIsDeviationLowBinding","bIsDeviationHighBinding","bIsToleranceLowBinding","bIsToleranceHighBinding","oCriticalityConfigValues","formatTrendIcon","bIsRefValBinding","bIsDownDiffBinding","downDifference","bIsUpDiffBinding","upDifference","formatNumber","value1","value2","textFragments","formatterInstance","numberOfFractionalDigits","parts","reduce","textFragment","formatCriticality","criticalityValue","type","String","Error","Warning","Success","Good","Neutral","formatWithPercentage","computePercentage","target","percentValue","numerator","denominator","toString","formatCriticalityIcon","formatCriticalityButtonType","formatToKeepWhitespace","returnPercentageChange","kpi","percentNumber","percentFormatterInstance","getPercentInstance","formatCurrency","includeText","currency","currencyCodeText","currencyFormatterInstance","getCurrencyInstance","showMeasure","formatHeaderCount","integerFormatterInstance","getIntegerInstance","decimalSeparator","formatDate","dateValue","oDate","parseJsonDateTime","getDateInstance","kpiValueCriticality","formatCriticalityValueState","formatCriticalityColorMicroChart","getFormatters","__exports","__esModule"],"sources":["CardFormatters.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport whitespaceReplacer from \"sap/base/strings/whitespaceReplacer\";\nimport { ValueColor } from \"sap/m/library\";\nimport UI5Date from \"sap/ui/core/date/UI5Date\";\nimport DateFormat from \"sap/ui/core/format/DateFormat\";\nimport NumberFormat from \"sap/ui/core/format/NumberFormat\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport IntegrationUtils from \"sap/ui/integration/util/Utils\";\n\nconst CriticalityConstants = {\n\tStateValues: {\n\t\tNone: \"None\",\n\t\tNegative: \"Error\",\n\t\tCritical: \"Warning\",\n\t\tPositive: \"Success\"\n\t},\n\tColorValues: {\n\t\tNone: \"Neutral\",\n\t\tNegative: \"Error\",\n\t\tCritical: \"Critical\",\n\t\tPositive: \"Good\"\n\t}\n};\n\nconst CriticalityTypes = {\n\tNegative: \"UI.CriticalityType/Negative\",\n\tCritical: \"UI.CriticalityType/Critical\",\n\tPositive: \"UI.CriticalityType/Positive\",\n\tInformation: \"UI.CriticalityType/Information\"\n};\n\ntype Criticality = {\n\tEnumMember: string;\n};\n\ntype CriticalityState = {\n\tNone: string;\n\tNegative: string;\n\tCritical: string;\n\tPositive: string;\n};\n\ntype KPIFormatterConfig = {\n\tNumberOfFractionalDigits: number;\n\tpercentageAvailable: boolean;\n};\n\ntype CurrencyFormatterConfig = {\n\tscaleFactor: number;\n\tnumberOfFractionalDigits: number;\n};\n\ntype TargetFormatterConfig = {\n\tNumberOfFractionalDigits: number;\n\tmanifestTarget: number;\n};\n\ntype TrendIconFormatterConfig = {\n\tbIsRefValBinding: boolean;\n\tbIsDownDiffBinding: boolean;\n\tbIsUpDiffBinding: boolean;\n\treferenceValue: number;\n\tdownDifference: number;\n\tupDifference: number;\n};\n\nexport type DateFormatterConfig = {\n\tUTC: boolean;\n};\n\nexport type NumberFormatterConfig = {\n\tnumberOfFractionalDigits: number;\n\tstyle: string;\n\tshowScale: boolean;\n\tscaleFactor: number;\n\tmaxFractionDigits: number;\n\tminFractionDigits: number;\n\tshortRefNumber: number;\n};\n\nexport type ValueColorFormatterConfig = {\n\tsImprovementDirection: string;\n\tbIsDeviationLowBinding: boolean;\n\tbIsDeviationHighBinding: boolean;\n\tbIsToleranceLowBinding: boolean;\n\tbIsToleranceHighBinding: boolean;\n\tdeviationLow: number;\n\tdeviationHigh: number;\n\ttoleranceLow: number;\n\ttoleranceHigh: number;\n\toCriticalityConfigValues: CriticalityState;\n};\n\n/**\n * Checks if the provided string ends with the specified suffix.\n *\n *  @param {string} value The string to check.\n *  @param {string} suffix The suffix to look for.\n *  @return {string | boolean} Returns true if the string ends with the suffix, otherwise false.\n *\n */\nconst endsWith = function (value: string, suffix: string): boolean {\n\tif (!value || !suffix) {\n\t\treturn false;\n\t}\n\n\treturn value.indexOf(suffix, value.length - suffix.length) !== -1;\n};\n\n/**\n * Returns the criticality state for the provided criticality value.\n *\n * @param {Criticality | undefined} criticality - The criticality value containing an EnumMember with criticality values.\n * @param {CriticalityState | undefined} criticalityState - The criticality state values for the criticality values.\n * @return {string} - The criticality state for the provided criticality value.\n */\nconst criticality2state = function (criticality: Criticality, criticalityState: CriticalityState | undefined): string {\n\tif (!criticalityState) {\n\t\treturn \"\";\n\t}\n\n\tconst val = criticality?.EnumMember || \"\";\n\tif (endsWith(val, \"Negative\")) {\n\t\treturn criticalityState.Negative;\n\t} else if (endsWith(val, \"Critical\")) {\n\t\treturn criticalityState.Critical;\n\t} else if (endsWith(val, \"Positive\")) {\n\t\treturn criticalityState.Positive;\n\t}\n\n\treturn criticalityState.None || \"\";\n};\n\n/**\n * Returns the trend icon for the provided aggregate value.\n *\n * @param {number | string} aggregateValue - The value provided to get the trend icon based on the values of referenceValue, downDifferenceValue, and upDifferenceValue.\n * @param {number} referenceValue - The reference value used to calculate the trend direction.\n * @param {number} downDifferenceValue - The threshold for determining a \"Down\" trend.\n * @param {number} upDifferenceValue - The threshold for determining an \"Up\" trend.\n * @return {string | undefined} - Returns the trend icon for the provided aggregate value.\n */\nconst calculateTrendDirection = function (\n\taggregateValue: number | string,\n\treferenceValue: number,\n\tdownDifferenceValue: number,\n\tupDifferenceValue: number\n): string | undefined {\n\tif (!aggregateValue || !referenceValue) {\n\t\treturn undefined;\n\t}\n\n\tconst value = Number(aggregateValue);\n\tif (!upDifferenceValue && value - referenceValue >= 0) {\n\t\treturn \"Up\";\n\t}\n\tif (!downDifferenceValue && value - referenceValue <= 0) {\n\t\treturn \"Down\";\n\t}\n\tif (referenceValue && upDifferenceValue && value - referenceValue >= upDifferenceValue) {\n\t\treturn \"Up\";\n\t}\n\tif (referenceValue && downDifferenceValue && value - referenceValue <= downDifferenceValue) {\n\t\treturn \"Down\";\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns the criticality state for the provided value.\n *\n *  @param  {number} value value provided for which criticality state is returned based on the improvement direction value provided\n *  @param  {string} improvementDirection If this value is Minimize/Minimizing, toleranceHigh/deviationHigh will be used for getting criticality state\n\t\t\t\t\t\t\t\t\tIf this value is Maximize/Maximizing, toleranceLow/deviationLow will be used for getting criticality state\n\t\t\t\t\t\t\t\t\tIf this value is Target, toleranceLow,toleranceHigh /deviationLow,deviationHigh will be used for getting criticality state\n *  @param  {string | number} deviationLowValue value provided used in getting criticality state when improvement direction is Maximize/Maximizing\n *  @param  {string | number} deviationHighValue value provided used in getting criticality state when improvement direction is Minimize/Minimizing\n *  @param  {string | number} toleranceLowValue  value provided used in getting criticality state when improvement direction is Maximize/Maximizing\n *  @param  {string | number} toleranceHighValue value provided used in getting criticality state when improvement direction is Minimize/Minimizing\n *  @param  {CriticalityState} criticalityState will have criticality state values for EnumMember of oCriticality provided to criticality2state()\n *  @return {string | undefined} returns criticality state for the value provided based on the improvement direction value provided\n *\n */\nconst calculateCriticalityState = function (\n\tvalue: number,\n\timprovementDirection: string,\n\tdeviationLowValue: string | number,\n\tdeviationHighValue: string | number,\n\ttoleranceLowValue: string | number,\n\ttoleranceHighValue: string | number,\n\tcriticalityState: CriticalityState\n): string {\n\tconst criticality = {\n\t\tEnumMember: \"None\"\n\t};\n\n\t/*\n\t * Consider fallback values for optional threshold values in criticality calculation\n\t * after considering fallback values if all the values required for calculation are not present then the criticality will be neutral\n\t * example - in case of maximizing\n\t * if deviationLowValue is mentioned and toleranceLowValue not mentioned, then toleranceLowValue = deviationLowValue\n\t * if toleranceLowValue is mentioned and deviationLowValue not mentioned, then deviationLowValue = Number.NEGATIVE_INFINITY\n\t * if both values are not mentioned then there will not be any calculation and criticality will be neutral\n\t *\n\t */\n\tconst minValue = Number.NEGATIVE_INFINITY;\n\tconst maxValue = Number.POSITIVE_INFINITY;\n\tlet toleranceHigh = typeof toleranceHighValue === \"string\" ? parseFloat(toleranceHighValue) : toleranceHighValue;\n\tlet deviationHigh = typeof deviationHighValue === \"string\" ? parseFloat(deviationHighValue) : deviationHighValue;\n\tlet toleranceLow = typeof toleranceLowValue === \"string\" ? parseFloat(toleranceLowValue) : toleranceLowValue;\n\tlet deviationLow = typeof deviationLowValue === \"string\" ? parseFloat(deviationLowValue) : deviationLowValue;\n\n\tif (!toleranceLow && toleranceLow !== 0 && (deviationLow || deviationLow === 0)) {\n\t\ttoleranceLow = deviationLow;\n\t}\n\tif (!toleranceHigh && toleranceHigh !== 0 && (deviationHigh || deviationHigh === 0)) {\n\t\ttoleranceHigh = deviationHigh;\n\t}\n\tif (!deviationLow && deviationLow !== 0) {\n\t\tdeviationLow = minValue;\n\t}\n\tif (!deviationHigh && deviationHigh !== 0) {\n\t\tdeviationHigh = maxValue;\n\t}\n\n\t// number could be a zero number so check if it is not undefined\n\t/* eslint-disable  @typescript-eslint/no-unnecessary-condition */\n\tif (value !== undefined) {\n\t\tvalue = Number(value);\n\t\tif (endsWith(improvementDirection, \"Minimize\") || endsWith(improvementDirection, \"Minimizing\")) {\n\t\t\tif ((toleranceHigh || toleranceHigh === 0) && (deviationHigh || deviationHigh === 0)) {\n\t\t\t\tif (value <= toleranceHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\t\t} else if (value > deviationHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\t\t} else {\n\t\t\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (endsWith(improvementDirection, \"Maximize\") || endsWith(improvementDirection, \"Maximizing\")) {\n\t\t\tif ((toleranceLow || toleranceLow === 0) && (deviationLow || deviationLow === 0)) {\n\t\t\t\tif (value >= toleranceLow) {\n\t\t\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\t\t} else if (value < deviationLow) {\n\t\t\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\t\t} else {\n\t\t\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (endsWith(improvementDirection, \"Target\")) {\n\t\t\tif (\n\t\t\t\t(toleranceHigh || toleranceHigh === 0) &&\n\t\t\t\t(deviationHigh || deviationHigh === 0) &&\n\t\t\t\t(toleranceLow || toleranceLow === 0) &&\n\t\t\t\t(deviationLow || deviationLow === 0)\n\t\t\t) {\n\t\t\t\tif (value >= toleranceLow && value <= toleranceHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\t\t} else if (value < deviationLow || value > deviationHigh) {\n\t\t\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\t\t} else {\n\t\t\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn criticality2state(criticality, criticalityState);\n};\n\n/**\n * Returns formatted KPI value.\n *\n * @param {string} value\n * @param {KPIFormatterConfig} formatterOptions\n * @param {boolean} isUnit - Determines the formatting style based on percentage availability.\n * @return {string} - Returns formatted KPI value.\n */\nconst formatKPIValue = function (value: string, formatterOptions: KPIFormatterConfig, isUnit: boolean): string {\n\tconst kpiValue = Number(value);\n\tconst floatFormatterInstance = NumberFormat.getFloatInstance({\n\t\tminFractionDigits: formatterOptions.NumberOfFractionalDigits,\n\t\tmaxFractionDigits: formatterOptions.NumberOfFractionalDigits,\n\t\tstyle: \"short\",\n\t\tshowScale: true,\n\t\tshortRefNumber: kpiValue\n\t});\n\tconst formattedValue = floatFormatterInstance.format(kpiValue),\n\t\tnumberScale = floatFormatterInstance.getScale() || \"\";\n\n\tif (!isUnit && formattedValue) {\n\t\tconst sLastNumber = formattedValue[formattedValue.length - 1];\n\t\treturn sLastNumber === numberScale ? formattedValue.slice(0, formattedValue.length - 1) : formattedValue;\n\t}\n\n\tif (isUnit) {\n\t\treturn formatterOptions.percentageAvailable ? `${numberScale}%` : numberScale;\n\t}\n\n\treturn \"\";\n};\n\n/**\n * Returns formatted date value based on the provided pattern.\n *\n * @param {string} value - The value to be formatted. If 'YYYYM', pattern is 'yearmonth', <M> no of months will be added to the <YYYY> in the date formatted.\n *                                   If 'YYYYQ', pattern is 'yearquarter', <Q> no of quarters will be added to the <YYYY> in the date formatted.\n *                                   If 'YYYYW', pattern is 'yearweek', <W> no of weeks will be added to the <YYYY> in the date formatted.\n * @param {string} pattern - The pattern provided which can be 'yearmonth', 'yearquarter', or 'yearweek'.\n * @return {UI5Date | Date | undefined} - Returns formatted date value based on the provided pattern.\n */\nconst formatDateValue = function (value: string, pattern: string): UI5Date | Date | undefined {\n\tlet result;\n\tlet year: number, month: number;\n\n\tswitch (pattern) {\n\t\tcase \"yearmonth\":\n\t\t\tyear = parseInt(value.substring(0, 4), 10);\n\t\t\tmonth = parseInt(value.substring(4), 10) - 1; // month attribute in Date constructor is 0-based\n\t\t\tresult = UI5Date.getInstance(Date.UTC(year, month));\n\t\t\tbreak;\n\t\tcase \"yearquarter\":\n\t\t\tyear = parseInt(value.substring(0, 4), 10);\n\t\t\tmonth = parseInt(value.substring(4), 10) * 3 - 3; // month attribute in Date constructor is 0-based\n\t\t\tresult = UI5Date.getInstance(Date.UTC(year, month));\n\t\t\tbreak;\n\t\tcase \"yearweek\":\n\t\t\tyear = parseInt(value.substring(0, 4), 10);\n\t\t\tconst startofWeekDay = 1 + (parseInt(value.substring(4), 10) - 1) * 7; // 1st of January + 7 days for each week\n\t\t\tresult = UI5Date.getInstance(Date.UTC(year, 0, startofWeekDay));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresult = undefined;\n\t\t\tbreak;\n\t}\n\n\treturn result;\n};\n\n/**\n * Returns formatted target value.\n *\n * @param {number} kpiValue - The KPI value provided which will be taken as scale factor when it is not zero.\n * @param {number} targetValue - The target value provided which will be formatted based on the number of fractional digits & scale factor.\n *                                If this is undefined, manifestTarget of formatterOptions will be used as value to be formatted.\n *                                This will be taken as scale factor when KPI value provided is zero.\n * @param {TargetFormatterConfig} formatterOptions - Can have manifestTarget and will have NumberOfFractionalDigits.\n * @return {string | undefined} - Returns formatted target value based on provided KPI value and target value.\n */\nconst targetValueFormatter = function (kpiValue: number, targetValue: number, formatterOptions: TargetFormatterConfig): string | undefined {\n\tif (isNaN(Number(kpiValue))) {\n\t\treturn \"\";\n\t}\n\n\tconst scaleFactor = kpiValue === 0 ? targetValue : kpiValue;\n\tconst value = targetValue ?? formatterOptions.manifestTarget;\n\tlet fractionalDigits = Number(formatterOptions.NumberOfFractionalDigits) ?? 0;\n\n\tfractionalDigits = Math.max(0, Math.min(fractionalDigits, 2));\n\n\tif (value) {\n\t\tconst numberFormatter = NumberFormat.getFloatInstance({\n\t\t\tminFractionDigits: fractionalDigits,\n\t\t\tmaxFractionDigits: fractionalDigits,\n\t\t\tstyle: \"short\",\n\t\t\tshowScale: true,\n\t\t\tshortRefNumber: scaleFactor\n\t\t});\n\t\treturn numberFormatter.format(+value);\n\t}\n\n\treturn undefined;\n};\n\n/**\n *  Returns the criticality state for the provided value.\n *\n *  @param  {number} value value provided to get the criticality state based on properties of staticValues provided\n *  @param  {ValueColorFormatterConfig} formatterOptions will have values of improvement direction, bIsDeviationLowBinding, bIsDeviationHighBinding, bIsToleranceLowBinding, bIsToleranceHighBinding, deviationLow, deviationHigh, toleranceLow, toleranceHigh, oCriticalityConfigValues\n *  @param  {number} defaultValue value for deviationLow, deviationHigh, toleranceLow, toleranceHigh which will be provided to calculateCriticalityState(), when bIsDeviationLowBinding, bIsDeviationHighBinding, bIsToleranceLowBinding, bIsToleranceHighBinding informatterOptions is true\n *  @return {string | undefined} returns criticality state for the value provided\n *\n */\nconst formatValueColor = function (value: number, formatterOptions: ValueColorFormatterConfig, defaultValue: number): string {\n\treturn calculateCriticalityState(\n\t\tvalue,\n\t\tformatterOptions.sImprovementDirection,\n\t\tformatterOptions.bIsDeviationLowBinding ? defaultValue : formatterOptions.deviationLow,\n\t\tformatterOptions.bIsDeviationHighBinding ? defaultValue : formatterOptions.deviationHigh,\n\t\tformatterOptions.bIsToleranceLowBinding ? defaultValue : formatterOptions.toleranceLow,\n\t\tformatterOptions.bIsToleranceHighBinding ? defaultValue : formatterOptions.toleranceHigh,\n\t\tformatterOptions.oCriticalityConfigValues\n\t);\n};\n\n/**\n * Returns the trend icon for the provided value.\n *\n * @param {number | string} value - The value provided which will be passed to calculateTrendDirection() to get trend icon based on properties of formatterOptions provided.\n * @param {TrendIconFormatterConfig} formatterOptions - Contains properties referenceValue, downDifference, upDifference which will be provided for formatTrendIcon() to get trend icon.\n * @param {number} defaultValue - The default value for referenceValue, downDifference, upDifference in calculateTrendDirection(), when their respective bindings in formatterOptions are true.\n * @return {string | undefined} - Returns trend icon for the value provided.\n */\nconst formatTrendIcon = function (\n\tvalue: number | string,\n\tformatterOptions: TrendIconFormatterConfig,\n\tdefaultValue: number\n): string | undefined {\n\treturn calculateTrendDirection(\n\t\tvalue,\n\t\tformatterOptions.bIsRefValBinding ? defaultValue : formatterOptions.referenceValue,\n\t\tformatterOptions.bIsDownDiffBinding ? defaultValue : formatterOptions.downDifference,\n\t\tformatterOptions.bIsUpDiffBinding ? defaultValue : formatterOptions.upDifference\n\t);\n};\n\n/**\n * Returns formatted values of value1 & value2 provided, depending on values of formatterOptions.\n *\n * @param {string} value1 - Will be formatted based on values of formatterOptions & displayed if 0 is included in textFragments array.\n * @param {string} value2 - Will be formatted based on values of formatterOptions & displayed if 1 is included in textFragments array.\n * @param {NumberFormatterConfig | undefined} formatterOptions - Will have properties numberOfFractionalDigits, style, showScale, scaleFactor.\n * @param {Array<number>} textFragments - If provided array includes [1, 0] formatted values of value2, value1 will be displayed in that order.\n * @return {string} - Returns formatted values of value1 & value2 provided, depending on values of formatterOptions.\n */\nconst formatNumber = function (\n\tvalue1: string,\n\tvalue2: string,\n\tformatterOptions: NumberFormatterConfig | undefined,\n\ttextFragments: Array<number>\n): string {\n\tlet formatterInstance;\n\n\tif (formatterOptions) {\n\t\tconst { numberOfFractionalDigits = 0, style = \"short\", showScale = true, scaleFactor } = formatterOptions;\n\n\t\tformatterInstance = NumberFormat.getFloatInstance({\n\t\t\tminFractionDigits: numberOfFractionalDigits,\n\t\t\tmaxFractionDigits: numberOfFractionalDigits,\n\t\t\tstyle,\n\t\t\tshowScale,\n\t\t\tshortRefNumber: scaleFactor\n\t\t});\n\t}\n\n\tconst parts: Array<string> = [\n\t\t!isNaN(parseFloat(value1)) && formatterInstance ? formatterInstance.format(parseFloat(value1)) : value1,\n\t\t!isNaN(parseFloat(value2)) && formatterInstance ? formatterInstance.format(parseFloat(value2)) : value2\n\t];\n\n\treturn textFragments.reduce(function (value, textFragment) {\n\t\treturn value + (typeof textFragment === \"number\" ? parts[textFragment] : textFragment);\n\t}, \"\");\n};\n\n/**\n * Returns criticality values depending on provided sCriticality and type values.\n *\n * @param {string | number} criticalityValue - The value provided to get the criticality state.\n * @param {string} type - State criticality values will be returned if this value is 'state', color criticality values will be returned if this value is 'color'.\n * @return {string | undefined} - Returns criticality values based on provided criticality and type values.\n */\nconst formatCriticality = function (criticalityValue: string | number, type: string): string | undefined {\n\tconst criticality = String(criticalityValue);\n\n\tif (type === \"state\") {\n\t\tswitch (criticality) {\n\t\t\tcase \"1\":\n\t\t\tcase \"Error\":\n\t\t\t\treturn ValueState.Error;\n\t\t\tcase \"2\":\n\t\t\tcase \"Warning\":\n\t\t\tcase \"Critical\":\n\t\t\t\treturn ValueState.Warning;\n\t\t\tcase \"3\":\n\t\t\tcase \"Success\":\n\t\t\tcase \"Good\":\n\t\t\t\treturn ValueState.Success;\n\t\t\tcase \"4\":\n\t\t\tcase \"Information\":\n\t\t\t\treturn ValueState.Information;\n\t\t\tdefault:\n\t\t\t\treturn ValueState.None;\n\t\t}\n\t}\n\n\tif (type === \"color\") {\n\t\tswitch (criticality) {\n\t\t\tcase \"1\":\n\t\t\tcase \"Error\":\n\t\t\t\treturn ValueColor.Error;\n\t\t\tcase \"2\":\n\t\t\tcase \"Critical\":\n\t\t\t\treturn ValueColor.Critical;\n\t\t\tcase \"3\":\n\t\t\tcase \"Good\":\n\t\t\t\treturn ValueColor.Good;\n\t\t\tcase \"4\":\n\t\t\tcase \"Neutral\":\n\t\t\t\treturn ValueColor.Neutral;\n\t\t\tdefault:\n\t\t\t\treturn ValueColor.None;\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns formatted percentage value.\n *\n * @param {string} value - The string value provided which will be appended with a percentage symbol.\n * @return {string} - Returns the string formatted with a percentage symbol.\n */\nconst formatWithPercentage = function (value?: string): string {\n\treturn value ? `${value} %` : \"\";\n};\n\n/**\n * Returns computed percentage value.\n *\n * @param {string | number} value - Value to be divided by the target provided.\n * @param {string | number} target - Target provided to divide the value provided to compute percentage.\n * @param {string} [isUnit] - Optional parameter, when '%' is provided target is not used to calculate percentage.\n * @return {string} - Returns percentage value computed.\n */\nconst computePercentage = function (value: string | number, target: string | number, isUnit?: string): string | undefined {\n\tlet percentValue: string;\n\n\tif (value === undefined) {\n\t\treturn \"0\";\n\t}\n\n\tconst numerator: number = typeof value === \"string\" ? parseFloat(value) : value;\n\tconst denominator: number = typeof target === \"string\" ? parseFloat(target) : target;\n\tif (isUnit === \"%\") {\n\t\tif (numerator > 100) {\n\t\t\tpercentValue = \"100\";\n\t\t} else if (numerator <= 0) {\n\t\t\tpercentValue = \"0\";\n\t\t} else {\n\t\t\tpercentValue = typeof value === \"string\" ? value : value.toString();\n\t\t}\n\t} else if (numerator > denominator) {\n\t\tpercentValue = \"100\";\n\t} else if (numerator <= 0) {\n\t\tpercentValue = \"0\";\n\t} else {\n\t\tpercentValue = numerator && denominator ? ((numerator / denominator) * 100).toString() : \"0\";\n\t}\n\n\treturn percentValue;\n};\n\n/**\n * Returns message for the provided criticality state.\n *\n * @param {string | number} value - Criticality state provided.\n * @return {string | undefined} - Returns criticality icon message based on the provided criticality state.\n */\nconst formatCriticalityIcon = function (value?: string | number): string {\n\tswitch (value) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"sap-icon://message-error\";\n\t\tcase CriticalityTypes.Critical:\n\t\tcase \"2\":\n\t\tcase 2:\n\t\t\treturn \"sap-icon://message-warning\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"sap-icon://message-success\";\n\t\tcase CriticalityTypes.Information:\n\t\tcase \"5\":\n\t\tcase 5:\n\t\t\treturn \"sap-icon://message-information\";\n\t\tdefault:\n\t\t\treturn \"\";\n\t}\n};\n\n/**\n * Returns criticality button type based on the criticality state provided.\n *\n * @param {string | number} val - Criticality state provided.\n * @return {string} - Returns criticality button type based on the provided criticality state.\n */\nconst formatCriticalityButtonType = function (val?: string | number): string {\n\tswitch (val) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"Reject\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"Accept\";\n\t\tdefault:\n\t\t\treturn \"Default\";\n\t}\n};\n\n/**\n * Returns formatted string value after replacing tab space \\t with a white space & a non-breaking whitespace.\n *\n * @param {string | boolean | number} value - Value provided to be formatted if it's a string; otherwise, the provided value will be returned.\n * @return {string} - Returns formatted string value after replacing tab spaces with a white space & a non-breaking whitespace.\n */\nconst formatToKeepWhitespace = function (value: string | boolean | number): string {\n\treturn value === null || value === undefined ? \"\" : whitespaceReplacer(String(value));\n};\n\n/**\n * Returns percentage change based on provided kpiValue & targetValue.\n *\n * @param {number | string} kpiValue - The value provided from which target value provided will be subtracted to calculate percentage change.\n * @param {number | string} targetValue - The value provided which will be subtracted from the kpi value provided to calculate percentage change.\n * @param {TargetFormatterConfig} formatterOptions - Contains number of fractional digits to be displayed with percentage change.\n * @return {string | undefined} - Returns calculated percentage change.\n */\nconst returnPercentageChange = function (\n\tkpiValue: number | string,\n\ttargetValue: number | string,\n\tformatterOptions: TargetFormatterConfig\n): string | undefined {\n\tif (isNaN(Number(kpiValue))) {\n\t\treturn \"\";\n\t}\n\n\tconst kpi = Number(kpiValue);\n\tlet referenceValue;\n\tif (targetValue) {\n\t\treferenceValue = Number(targetValue);\n\t} else if (formatterOptions.manifestTarget) {\n\t\treferenceValue = Number(formatterOptions.manifestTarget);\n\t} else {\n\t\treferenceValue = undefined;\n\t}\n\n\tlet fractionalDigits = formatterOptions.NumberOfFractionalDigits ? Number(formatterOptions.NumberOfFractionalDigits) : 0;\n\tfractionalDigits = Math.max(0, Math.min(fractionalDigits, 2));\n\n\tif (referenceValue) {\n\t\tconst percentNumber = (kpi - referenceValue) / referenceValue;\n\t\tconst percentFormatterInstance = NumberFormat.getPercentInstance({\n\t\t\tstyle: \"short\",\n\t\t\tminFractionDigits: fractionalDigits,\n\t\t\tmaxFractionDigits: fractionalDigits,\n\t\t\tshowScale: true\n\t\t});\n\t\treturn percentFormatterInstance.format(percentNumber);\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns formatted currency value based on the number of fractional digits, scale factor, currency code text, and currency unit.\n *\n * @param {number} value - Value provided which will be formatted with currency unit and type based on the number of fractional digits & scale factor.\n * @param {CurrencyFormatterConfig} formatterOptions - Contains number of fractional digits & scale factor.\n * @param {boolean} bIncludeText - Determines if the currency type should be appended.\n * @param {string} sCurrency - Currency unit provided, currency value will be prefixed with this currency unit.\n * @param {string} sCurrencyCodeText - Currency type provided, currency value will be suffixed with this currency type if bIncludeText is true.\n * @return {string} - Returns formatted currency value.\n */\nconst formatCurrency = function (\n\tvalue: float,\n\tformatterOptions: CurrencyFormatterConfig,\n\tincludeText: boolean,\n\tcurrency: string,\n\tcurrencyCodeText: string\n): string {\n\tvalue = Number(value);\n\tconst currencyFormatterInstance = NumberFormat.getCurrencyInstance({\n\t\tstyle: \"short\",\n\t\tshowMeasure: true,\n\t\tshortRefNumber: formatterOptions.scaleFactor,\n\t\tminFractionDigits: formatterOptions.numberOfFractionalDigits,\n\t\tmaxFractionDigits: formatterOptions.numberOfFractionalDigits\n\t});\n\n\tconst formattedValue = currencyFormatterInstance.format(value, currency);\n\treturn includeText ? formattedValue + \" (\" + currencyCodeText + \")\" : formattedValue;\n};\n\n/**\n * Returns formatted value of provided header count.\n *\n * @param {string | number} sValue - Part of the value provided before separator. Will be rounded off with no of fractional digits 1 & 1000 as scale factor.\n * @return {string | undefined} - Returns formatted header count value.\n */\nconst formatHeaderCount = function (value: string | number): string | undefined {\n\tif (value) {\n\t\tconst integerFormatterInstance = NumberFormat.getIntegerInstance({\n\t\t\tminFractionDigits: 0,\n\t\t\tmaxFractionDigits: 1,\n\t\t\tdecimalSeparator: \".\",\n\t\t\tstyle: \"short\"\n\t\t});\n\t\treturn integerFormatterInstance.format(Number(value));\n\t}\n\n\treturn undefined;\n};\n\n/**\n * Returns formatted value of provided date string.\n *\n * @param {string} dateValue - Date string provided which will be taken & formatted in pattern 'M/d/yy', if no locale value is provided to getInstance() of DateFormat.\n * @param {DateFormatterConfig} formatterOptions - Object having a boolean value which is used to format provided date string with respect to UTC if it is true.\n * @return {string | undefined} - Returns formatted date value based on oLocale & UTC value provided, default oLocale value is \"en-US\".\n */\nconst formatDate = function (dateValue: string, formatterOptions: DateFormatterConfig): string | undefined {\n\tif (dateValue) {\n\t\tconst oDate = IntegrationUtils.parseJsonDateTime(dateValue);\n\t\treturn DateFormat.getDateInstance(formatterOptions).format(UI5Date.getInstance(oDate), formatterOptions.UTC);\n\t}\n};\n\n/**\n * Returns criticality state for the provided criticality value.\n *\n * @param {string | number} value - Provided value based on which EnumMember of criticality is selected. This is provided to criticality2state() further to get criticality state.\n * @return {string | undefined} - Returns criticality state for the provided criticality value.\n */\nconst kpiValueCriticality = function (value: string | number): string {\n\tconst criticality = {\n\t\tEnumMember: \"None\"\n\t};\n\n\tswitch (Number(value)) {\n\t\tcase 1:\n\t\t\tcriticality.EnumMember = \"Negative\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tcriticality.EnumMember = \"Critical\";\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tcriticality.EnumMember = \"Positive\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcriticality.EnumMember = \"None\";\n\t\t\tbreak;\n\t}\n\n\treturn criticality2state(criticality, CriticalityConstants.ColorValues);\n};\n\n/**\n * Returns criticality value state for the provided criticality value.\n *\n * @param {string | number} value - Provided value which is used to get criticality value state.\n * @return {string | undefined} - Returns criticality value state for the provided criticality value.\n */\nconst formatCriticalityValueState = function (value?: string | number): string | undefined {\n\tswitch (value) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"Error\";\n\t\tcase CriticalityTypes.Critical:\n\t\tcase \"2\":\n\t\tcase 2:\n\t\t\treturn \"Warning\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"Success\";\n\t\tcase CriticalityTypes.Information:\n\t\tcase \"5\":\n\t\tcase 5:\n\t\t\treturn \"Information\";\n\t\tdefault:\n\t\t\treturn \"None\";\n\t}\n};\n\n/**\n * Returns criticality color value for the provided criticality value.\n *\n * @param {string | number} value - Provided value which is used to get criticality color value.\n * @return {string} - Returns criticality color value for the provided criticality value.\n */\nconst formatCriticalityColorMicroChart = function (value?: string | number): string {\n\tswitch (value) {\n\t\tcase CriticalityTypes.Negative:\n\t\tcase \"1\":\n\t\tcase 1:\n\t\t\treturn \"Error\";\n\t\tcase CriticalityTypes.Critical:\n\t\tcase \"2\":\n\t\tcase 2:\n\t\t\treturn \"Critical\";\n\t\tcase CriticalityTypes.Positive:\n\t\tcase \"3\":\n\t\tcase 3:\n\t\t\treturn \"Good\";\n\t\tdefault:\n\t\t\treturn \"Neutral\";\n\t}\n};\n\nexport const getFormatters = function () {\n\treturn {\n\t\tformatKPIValue,\n\t\tformatDateValue,\n\t\ttargetValueFormatter,\n\t\tformatValueColor,\n\t\tformatTrendIcon,\n\t\tformatNumber,\n\t\tformatCriticality,\n\t\tformatWithPercentage,\n\t\tcomputePercentage,\n\t\tformatCriticalityIcon,\n\t\tformatCriticalityButtonType,\n\t\tformatToKeepWhitespace,\n\t\treturnPercentageChange,\n\t\tformatCurrency,\n\t\tformatHeaderCount,\n\t\tformatDate,\n\t\tkpiValueCriticality,\n\t\tformatCriticalityValueState,\n\t\tformatCriticalityColorMicroChart\n\t};\n};\n"],"mappings":"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","ignoreList":[]}