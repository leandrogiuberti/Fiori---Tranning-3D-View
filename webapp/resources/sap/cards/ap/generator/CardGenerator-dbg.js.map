{"version":3,"file":"CardGenerator-dbg.js","names":["sap","ui","define","Log","sap_cards_ap_common_helpers_ApplicationInfo","sap_cards_ap_common_services_RetrieveCard","MessageBox","Fragment","CoreLib","JSONModel","ResourceModel","___app_CardGeneratorDialogController","___config_PreviewOptions","___helpers_CardGeneratorModel","___helpers_IntegrationCardHelper","___pages_Application","___pages_FreeStyle","___pages_ObjectPage","_catch","body","recover","result","e","then","AppType","getApplicationFloorplan","getObjectPageCardManifestForPreview","CardGeneratorDialogController","setValueStateForAdvancedPanel","PREVIEW_OPTIONS","getCardGeneratorDialogModel","createCardManifest","renderCardPreview","updateCardGroups","Application","FreeStyle","ObjectPage","CardTypes","cardGeneratorDialog","initializeAsync","appComponent","_temp2","isValidConfiguration","applicationInstance","validateCardGeneration","resourceModel","getResourceModelForDialog","warningMsg","getObject","warning","actions","Action","OK","emphasizedAction","Promise","resolve","initializeCardGeneratorDialog","applicationFloorplan","_temp","createInstance","updateObjectContextFreeStyleModel","reject","applyModelsToDialog","dialog","cardManifest","getInstance","entityRelatedInfo","getEntityRelatedInfo","getModel","setModel","previewOptionsModel","freeStyleModel","getFreeStyleModelForDialog","isServiceDetailsView","isApplyServiceDetailsEnabled","_temp3","entitySetWithObjectContext","dialogModel","integrationCardManifest","setProperty","_temp5","oDialog","initialize","open","element","document","getElementById","style","backgroundColor","catch","oError","error","load","id","name","controller","_temp4","cardType","INTEGRATION","includeActions","hideActions","isDesignMode","_getObjectPageCardMan","oResourceBundle","getResourceBundleFor","bundleUrl","oUrlInfo","url","bundle","__exports","__esModule"],"sources":["CardGenerator.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport Log from \"sap/base/Log\";\nimport { AppType, getApplicationFloorplan } from \"sap/cards/ap/common/helpers/ApplicationInfo\";\nimport { getObjectPageCardManifestForPreview } from \"sap/cards/ap/common/services/RetrieveCard\";\nimport type Dialog from \"sap/m/Dialog\";\nimport MessageBox from \"sap/m/MessageBox\";\nimport Component from \"sap/ui/core/Component\";\nimport type Control from \"sap/ui/core/Control\";\nimport Fragment from \"sap/ui/core/Fragment\";\nimport CoreLib from \"sap/ui/core/Lib\";\nimport { CardManifest } from \"sap/ui/integration/widgets/Card\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport { CardGeneratorDialogController, setValueStateForAdvancedPanel } from \"./app/CardGeneratorDialogController\";\nimport { PREVIEW_OPTIONS } from \"./config/PreviewOptions\";\nimport { getCardGeneratorDialogModel } from \"./helpers/CardGeneratorModel\";\nimport { createCardManifest, renderCardPreview, updateCardGroups } from \"./helpers/IntegrationCardHelper\";\nimport { Application } from \"./pages/Application\";\nimport { FreeStyle } from \"./pages/FreeStyle\";\nimport { ObjectPage } from \"./pages/ObjectPage\";\n\nenum CardTypes {\n\tINTEGRATION = \"integration\",\n\tADAPTIVE = \"adaptive\"\n}\n\nlet cardGeneratorDialog: Promise<Control | Control[]> | undefined;\n\n/**\n * Initializes the card generator asynchronously.\n * Determines the application floorplan and validates card generation.\n * If card generation is not valid, displays a warning message.\n * Otherwise, initializes the card generator dialog.\n *\n * @param {Component} appComponent - The root component of the application.\n * @returns {Promise<void>} - A promise that resolves when the initialization is complete.\n */\nexport const initializeAsync = async function (appComponent: Component): Promise<void> {\n\tconst applicationFloorplan = getApplicationFloorplan(appComponent);\n\tlet applicationInstance;\n\n\tif (applicationFloorplan === AppType.ObjectPage) {\n\t\tapplicationInstance = ObjectPage.createInstance(appComponent);\n\t} else {\n\t\tapplicationInstance = FreeStyle.createInstance(appComponent);\n\t\tawait (applicationInstance as FreeStyle).updateObjectContextFreeStyleModel();\n\t}\n\n\tconst isValidConfiguration = applicationInstance.validateCardGeneration();\n\n\tif (!isValidConfiguration) {\n\t\tconst resourceModel = getResourceModelForDialog();\n\t\tconst warningMsg: string = resourceModel.getObject(\"GENERATE_CARD_NOT_SUPPORTED\");\n\t\tMessageBox.warning(warningMsg, {\n\t\t\tactions: MessageBox.Action.OK,\n\t\t\temphasizedAction: MessageBox.Action.OK\n\t\t});\n\t\treturn;\n\t}\n\treturn await initializeCardGeneratorDialog(appComponent);\n};\n\n/**\n * Applies models to the card generator dialog.\n *\n * This function sets up various models for the dialog, including the i18n model, preview options model,\n * and the freeStyle model. It also fetches and sets the card generator dialog model.\n *\n * @param {Dialog} dialog - The dialog to which the models will be applied.\n * @param {Component} appComponent - The root component of the application.\n * @param {CardManifest} [cardManifest] - The card manifest to be used for creating the card.\n * @returns {Promise<void>} - A promise that resolves when the models have been applied to the dialog.\n */\nconst applyModelsToDialog = async function (dialog: Dialog, appComponent: Component, cardManifest?: CardManifest): Promise<void> {\n\tconst applicationInstance = Application.getInstance();\n\tconst entityRelatedInfo = applicationInstance.getEntityRelatedInfo();\n\n\tif (!dialog.getModel(\"i18n\")) {\n\t\tconst resourceModel = getResourceModelForDialog();\n\t\tdialog.setModel(resourceModel, \"i18n\");\n\t}\n\n\tif (!dialog.getModel(\"previewOptions\")) {\n\t\tconst previewOptionsModel = new JSONModel(PREVIEW_OPTIONS);\n\t\tdialog.setModel(previewOptionsModel, \"previewOptions\");\n\t}\n\n\tconst freeStyleModel =\n\t\tapplicationInstance instanceof FreeStyle\n\t\t\t? applicationInstance.getFreeStyleModelForDialog()\n\t\t\t: new JSONModel({\n\t\t\t\t\tisServiceDetailsView: false,\n\t\t\t\t\tisApplyServiceDetailsEnabled: false\n\t\t\t\t});\n\tdialog.setModel(freeStyleModel, \"freeStyle\");\n\n\tif (entityRelatedInfo.entitySetWithObjectContext) {\n\t\tconst dialogModel = await getCardGeneratorDialogModel(appComponent, cardManifest);\n\t\tdialog.setModel(dialogModel);\n\t\tconst integrationCardManifest = await createCardManifest(appComponent, cardManifest as CardManifest, dialogModel);\n\t\trenderCardPreview(integrationCardManifest);\n\t\tupdateCardGroups(dialogModel);\n\t\tsetValueStateForAdvancedPanel();\n\t\tfreeStyleModel.setProperty(\"/isServiceDetailsView\", false);\n\t}\n};\n\n/**\n * Initializes the card generator dialog asynchronously.\n * Loads the card generator dialog fragment, fetches the card manifest, and set the dialog model.\n * Opens the dialog and renders the card preview.\n *\n * @param {Component} appComponent - The root component of the application.\n * @returns {Promise<void>} - A promise that resolves when the dialog is initialized and opened.\n */\nexport const initializeCardGeneratorDialog = async function (appComponent: Component): Promise<void> {\n\tif (!cardGeneratorDialog) {\n\t\tcardGeneratorDialog = Fragment.load({\n\t\t\tid: \"cardGeneratorDialog\",\n\t\t\tname: \"sap.cards.ap.generator.app.CardGeneratorDialog\",\n\t\t\tcontroller: CardGeneratorDialogController\n\t\t});\n\t}\n\n\tlet cardManifest: CardManifest | undefined;\n\n\ttry {\n\t\tcardManifest = (await getObjectPageCardManifestForPreview(appComponent, {\n\t\t\tcardType: CardTypes.INTEGRATION,\n\t\t\tincludeActions: false,\n\t\t\thideActions: false,\n\t\t\tisDesignMode: true\n\t\t})) as CardManifest;\n\t} catch (oError: unknown) {\n\t\tLog.error(\"Error while fetching the card manifest.\");\n\t}\n\n\tcardGeneratorDialog\n\t\t.then(async function (oDialog: Control | Control[]) {\n\t\t\tapplyModelsToDialog(oDialog as Dialog, appComponent, cardManifest);\n\t\t\tCardGeneratorDialogController.initialize();\n\t\t\t(oDialog as Dialog).open();\n\t\t\tconst element = document.getElementById(\"cardGeneratorDialog--contentSplitter\");\n\t\t\tif (element) {\n\t\t\t\telement.style.backgroundColor = \"#f8f8f8\";\n\t\t\t}\n\t\t\treturn oDialog;\n\t\t})\n\t\t.catch(function (oError: Error) {\n\t\t\tLog.error(\"Error while loading or initializing the dialog:\", oError);\n\t\t});\n};\n\n/**\n * Retrieves the resource model for the card generator dialog.\n * Loads the i18n resource bundle and creates a new ResourceModel.\n *\n * @returns {ResourceModel} - The resource model for the card generator dialog.\n */\nexport function getResourceModelForDialog(): ResourceModel {\n\tconst oResourceBundle = CoreLib.getResourceBundleFor(\"sap.cards.ap.generator.i18n\");\n\treturn new ResourceModel({\n\t\tbundleUrl: oResourceBundle.oUrlInfo.url,\n\t\tbundle: oResourceBundle //Reuse created bundle to stop extra network calls\n\t});\n}\n"],"mappings":"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","ignoreList":[]}