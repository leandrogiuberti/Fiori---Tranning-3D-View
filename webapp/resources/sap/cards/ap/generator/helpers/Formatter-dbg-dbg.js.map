{"version":3,"file":"Formatter-dbg-dbg.js","names":["sap","ui","define","sap_ui_integration_formatters_DateTimeFormatter","___utils_CommonUtils","___I18nHelper","date","dateTime","checkForDateType","getYesAndNoTextValues","formatPropertyDropdownValues","property","value","type","yesText","noText","UTC","length","label","processProperties","properties","formatterOptions","forEach","selected","name","parseFloat","selectedKey","processParameters","parameters","formatterArguments","push","parameterValue","formatArguments","content","i","formatter","bindingOrFormatterArray","hasBindingOrFormatter","some","item","startsWith","concat","createFormatterExpression","formatterConfig","formatterName","mParameters","JSON","stringify","getDefaultPropertyFormatterConfig","i18nModel","dateFormatterConfig","isPropertyTypeDate","configData","getDateFormatterConfiguration","getDefaultPropertyFormatterConfigForNavProperties","navProperties","navProperty","propertyName","propertyType","displayName","getText","defaultValue","visible","__exports","__esModule"],"sources":["Formatter.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\ntype SupportedPropertyTypes = \"boolean\" | \"number\" | \"enum\" | \"string\" | \"object\";\nexport type SingleFormatterProperty = {\n\tname: string;\n\tdisplayName: string;\n\ttype: SupportedPropertyTypes;\n\tdefaultValue?: boolean | number | string;\n\tselected?: boolean;\n\tvalue?: string;\n\tselectedKey?: string;\n\tdefaultSelectedKey?: string;\n\tbIsProperty?: boolean;\n\toptions?: Array<{\n\t\tname: string;\n\t\tvalue: string;\n\t}>;\n};\n\nexport type SingleFormatterParameter = {\n\tname: string;\n\tdisplayName: string;\n\ttype: SupportedPropertyTypes;\n\tdefaultValue?: string;\n\tvalue?: string;\n\tselectedKey?: string;\n\tselected?: boolean;\n\tproperties?: Array<SingleFormatterProperty>;\n\tdefaultSelectedKey?: string;\n\toptions?: Array<{\n\t\tname: string;\n\t\tvalue: string;\n\t}>;\n};\n\nexport type FormatterConfiguration = {\n\tproperty?: string;\n\tformatterName: string;\n\tdisplayName: string;\n\tparameters?: Array<SingleFormatterParameter>;\n\ttype: string;\n\tvisible: boolean;\n};\n\nexport type FormatterConfigurationMap = Array<FormatterConfiguration>;\n\nexport type FormatterOption = string | boolean | number;\nexport type FormatterOptions = Record<string, FormatterOption>;\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { date, dateTime } from \"sap/ui/integration/formatters/DateTimeFormatter\";\nimport type { PropertyInfo, PropertyInfoMap } from \"../odata/ODataTypes\";\nimport { checkForDateType } from \"../utils/CommonUtils\";\nimport { getYesAndNoTextValues } from \"./I18nHelper\";\n\n/**\n * Processes the formatter properties and adds them to the formatter options object.\n *\n * @param {SingleFormatterProperty[]} properties - The array of properties to process.\n * @param {FormatterOptions} formatterOptions - The object to which the processed property values will be added.\n */\n\nexport const formatPropertyDropdownValues = function (property: PropertyInfo, value: string) {\n\tconst type = property.type;\n\tconst { yesText, noText } = getYesAndNoTextValues();\n\tswitch (type) {\n\t\tcase \"Edm.Boolean\":\n\t\t\tvalue = value ? yesText : noText;\n\t\t\tbreak;\n\t\tcase \"Edm.Date\":\n\t\tcase \"Edm.DateTime\":\n\t\t\tvalue = date(value, { UTC: true });\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\tvalue = dateTime(value, { UTC: true });\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeInterval\":\n\t\tcase \"Edm.Time\":\n\t\t\tbreak;\n\t\tcase \"Edm.String\":\n\t\t\tif (value?.length === 0) {\n\t\t\t\tvalue = \"<empty>\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"Edm.Integer\":\n\t\tcase \"Edm.Float\":\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn `${property.label} (${value})`;\n};\n\n/**\n * Processes the formatter properties and adds them to the formatter options object.\n *\n * @param {SingleFormatterProperty[]} properties - The array of properties to process.\n * @param {FormatterOptions} formatterOptions - The object to which the processed property values will be added.\n */\nexport function processProperties(properties: SingleFormatterProperty[], formatterOptions: FormatterOptions) {\n\tproperties.forEach(function (property) {\n\t\tswitch (property.type) {\n\t\t\tcase \"boolean\":\n\t\t\t\tif (!property.selected) {\n\t\t\t\t\tproperty.selected = false;\n\t\t\t\t}\n\t\t\t\tformatterOptions[property.name] = property.selected;\n\t\t\t\tbreak;\n\t\t\tcase \"number\":\n\t\t\t\tif (typeof property.value === \"number\") {\n\t\t\t\t\tformatterOptions[property.name] = parseFloat(property.value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"enum\":\n\t\t\t\tif (property.selectedKey) {\n\t\t\t\t\tformatterOptions[property.name] = property.selectedKey;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tformatterOptions[property.name] = property.value ?? \"\";\n\t\t\t\tbreak;\n\t\t}\n\t});\n}\n\n/**\n * Processes the formatter parameters and adds them to the formatter arguments array.\n *\n * @param {SingleFormatterParameter} parameters - The parameter object to process.\n * @param {FormatterOption[]} formatterArguments - The array to which the processed parameter values will be added.\n */\nexport function processParameters(parameters: SingleFormatterParameter, formatterArguments: FormatterOption[]) {\n\tswitch (parameters.type) {\n\t\tcase \"boolean\":\n\t\t\tif (!parameters.selected) {\n\t\t\t\tparameters.selected = false;\n\t\t\t}\n\t\t\tformatterArguments.push(parameters.selected);\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\tconst parameterValue = parameters.value;\n\t\t\tif (parameterValue) {\n\t\t\t\tformatterArguments.push(parseFloat(parameterValue));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"enum\":\n\t\t\tformatterArguments.push(parameters.selectedKey as string);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tformatterArguments.push(parameters.value as string);\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Formats the formatter arguments into a string suitable for a formatter expression.\n *\n *\n * @param {FormatterOption[]} formatterArguments - The array of formatter arguments to format.\n * @returns {string} The formatted arguments as a single string.\n */\nfunction formatArguments(formatterArguments: FormatterOption[]): string {\n\tlet content = formatterArguments[0] as string;\n\n\tfor (let i = 1; i < formatterArguments.length; i++) {\n\t\tconst formatter = formatterArguments[i];\n\t\tconst bindingOrFormatterArray = [\"{\", \"[\", \"$\"];\n\t\tconst hasBindingOrFormatter = bindingOrFormatterArray.some((item) => (formatter as string).startsWith(item));\n\t\tif (typeof formatter === \"string\" && !hasBindingOrFormatter) {\n\t\t\tcontent = content.concat(\", '\" + formatter + \"' \");\n\t\t} else {\n\t\t\tcontent = content.concat(\", \" + formatter);\n\t\t}\n\t}\n\n\treturn content;\n}\n\n/**\n * Creates a formatter expression based on the provided formatter configuration by processing the properties and parameters.\n *\n *\n * @param {FormatterConfiguration} formatterConfig - The configuration object for the formatter.\n * @returns {string} The generated formatter expression.\n */\nexport const createFormatterExpression = function (formatterConfig: FormatterConfiguration): string {\n\tconst formatterArguments: FormatterOption[] = [];\n\tformatterArguments.push(\"${\" + formatterConfig.property + \"}\");\n\tlet content = formatterConfig.formatterName + \"(\"; // dont close brackets here\n\n\tconst formatterOptions: FormatterOptions = {};\n\tformatterConfig.parameters?.forEach(function (mParameters) {\n\t\tconst properties = mParameters.properties;\n\t\tif (properties && properties.length > 0) {\n\t\t\tprocessProperties(properties, formatterOptions);\n\t\t\tif (JSON.stringify(formatterOptions) !== \"{}\") {\n\t\t\t\tformatterArguments.push(JSON.stringify(formatterOptions));\n\t\t\t}\n\t\t} else {\n\t\t\tprocessParameters(mParameters, formatterArguments);\n\t\t}\n\t});\n\tcontent = content.concat(formatArguments(formatterArguments));\n\treturn content + \")\";\n};\n\n/**\n * Generates the default property formatter configuration for date properties.\n *\n * @param {ResourceBundle} i18nModel - The internationalization model used for localization.\n * @param {PropertyInfoMap} properties - The map of property information.\n * @returns {FormatterConfigurationMap} - The configuration map for date formatters.\n */\nexport const getDefaultPropertyFormatterConfig = function (\n\ti18nModel: ResourceBundle,\n\tproperties: PropertyInfoMap\n): FormatterConfigurationMap {\n\tconst dateFormatterConfig: FormatterConfigurationMap = [];\n\tfor (const property of properties) {\n\t\tconst isPropertyTypeDate = checkForDateType(property.type);\n\t\tif (property.name && isPropertyTypeDate) {\n\t\t\tconst configData = getDateFormatterConfiguration(property.name, property.type, i18nModel) as FormatterConfiguration;\n\t\t\tdateFormatterConfig.push(configData);\n\t\t}\n\t}\n\treturn dateFormatterConfig;\n};\n\n/**\n * Generates the default property formatter configuration for navigation properties.\n *\n * @param {ResourceBundle} i18nModel - The internationalization model used for localization.\n * @param {PropertyInfoMap} navProperties - The map of navigation properties.\n * @returns {FormatterConfigurationMap} The formatter configuration map for date properties.\n */\nexport const getDefaultPropertyFormatterConfigForNavProperties = function (\n\ti18nModel: ResourceBundle,\n\tnavProperties: PropertyInfoMap\n): FormatterConfigurationMap {\n\tconst dateFormatterConfig: FormatterConfigurationMap = [];\n\tfor (const navProperty of navProperties) {\n\t\tconst properties = (navProperty.properties as PropertyInfoMap) || [];\n\t\tfor (const property of properties) {\n\t\t\tconst propertyName = navProperty.name + \"/\" + property.name;\n\t\t\tconst isPropertyTypeDate = checkForDateType(property.type);\n\t\t\tif (propertyName && isPropertyTypeDate) {\n\t\t\t\tconst configData = getDateFormatterConfiguration(propertyName, property.type, i18nModel) as FormatterConfiguration;\n\t\t\t\tdateFormatterConfig.push(configData);\n\t\t\t}\n\t\t}\n\t}\n\treturn dateFormatterConfig;\n};\n\n/**\n * Generates configuration data for a given property based on its type.\n *\n * @param {string} propertyName - The name of the property.\n * @param {string} propertyType - The type of the property (e.g., \"Edm.DateTimeOffset\", \"Edm.DateTime\", \"Edm.Date\").\n * @param {ResourceBundle} i18nModel - The internationalization model used to get localized text.\n * @returns {FormatterConfiguration} The configuration data for the specified property.\n */\nfunction getDateFormatterConfiguration(propertyName: string, propertyType: string, i18nModel: ResourceBundle) {\n\tif (propertyType === \"Edm.DateTimeOffset\") {\n\t\tconst configData: FormatterConfiguration = {\n\t\t\tproperty: propertyName,\n\t\t\tformatterName: \"format.dateTime\",\n\t\t\tdisplayName: i18nModel.getText(\"FORMAT_DATETIME\") ?? \"\",\n\t\t\tparameters: [\n\t\t\t\t{\n\t\t\t\t\tname: \"options\",\n\t\t\t\t\tdisplayName: \"Options\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefaultValue: \"\",\n\t\t\t\t\tproperties: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"relative\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"RELATIVE\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"UTC\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"UTC\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false,\n\t\t\t\t\t\t\tselected: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\ttype: \"Date\",\n\t\t\tvisible: true\n\t\t};\n\t\treturn configData;\n\t} else if (propertyType === \"Edm.DateTime\" || propertyType === \"Edm.Date\") {\n\t\tconst configData: FormatterConfiguration = {\n\t\t\tproperty: propertyName,\n\t\t\tformatterName: \"format.date\",\n\t\t\tdisplayName: i18nModel.getText(\"FORMAT_DATE\") ?? \"\",\n\t\t\tparameters: [\n\t\t\t\t{\n\t\t\t\t\tname: \"options\",\n\t\t\t\t\tdisplayName: \"Options\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefaultValue: \"\",\n\t\t\t\t\tproperties: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"UTC\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"UTC\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false,\n\t\t\t\t\t\t\tselected: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\ttype: \"Date\",\n\t\t\tvisible: true\n\t\t};\n\t\treturn configData;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}