{"version":3,"file":"IntegrationCardHelper-dbg.js","names":["sap","ui","define","sap_cards_ap_common_odata_ODataUtils","sap_cards_ap_generator_helpers_NavigationProperty","sap_cards_ap_generator_odata_v2_MetadataAnalyzer","sap_cards_ap_generator_odata_v4_MetadataAnalyzer","VersionInfo","CoreElement","V2OdataUtils","V4ODataUtils","___odata_ODataUtils","___pages_Application","___types_CommonTypes","___utils_CommonUtils","___Batch","___I18nHelper","___PropertyExpression","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","_forTo","array","body","check","i","reject","_cycle","length","enhanceManifestWithInsights","mCardManifest","rootComponent","Promise","resolve","sapAppId","getManifestEntry","id","load","library","_VersionInfo$load","sapCoreVersionInfo","templateName","parentAppId","cardType","versions","ui5","version","buildTimestamp","_forOf","target","step","next","done","return","_fixup","TypeError","values","push","handleSingleProperty","_catch","recover","isSingleKeyWithoutAssignment","getNavigationPropertiesWithLabel","getPropertyReference","getPropertyReferenceKey","getDataType","isODataV4Model","Application","ODataModelVersion","ColorIndicator","extractValueWithoutBooleanExprBinding","getColorForGroup","hasBooleanBindingExpression","updateManifestWithExpandQueryParams","updateManifestWithSelectQueryParams","getYesAndNoTextValues","resolveI18nTextFromResourceModel","extractPathExpressionWithoutUOM","extractPathWithoutUOM","extractPropertyConfigurationWithoutTextArrangement","getTextArrangementFromCardManifest","hasFormatter","isExpression","isI18nExpression","updateAndGetSelectedFormatters","manifest","formatterConfigurationFromCardManifest","createInitialManifest","props","title","subTitle","description","service","serviceModel","entitySetName","entitySetWithObjectContext","data","bODataV4","formatDataForV2","dataPath","dataPathHeader","propertyReferenceKeys","entityKeyPropertiesParameters","yesText","noText","forEach","keyProp","type","name","entityKeyProperties","map","_version","i18n","applicationVersion","technology","icons","icon","extension","configuration","parameters","_contentSelectQuery","join","_headerSelectQuery","_contentExpandQuery","_headerExpandQuery","_entitySet","_yesText","_noText","destinations","defaultUrl","csrfTokens","token1","request","url","method","headers","batch","header","getHeaderBatchUrl","Accept","retryAfter","content","getContentBatchUrl","path","unitOfMeasurement","mainIndicator","number","unit","groups","contentDensities","compact","cozy","dependencies","libs","lazy","getObjectPageContext","entitySet","getInstance","fetchDetails","appModel","getModel","contextParameters","keyProperties","property","parameter","formatLiteral","propertyType","formatValue","getCurrentCardManifest","renderCardPreview","newManifest","oModel","oCard","getElementById","setBaseUrl","setManifest","refresh","updateCardGroups","configurationGroups","getProperty","advancedPanelCriticallity","items","filter","configurationItem","matchedCriticallity","columnItem","navigationProperty","propertyKeyForId","updatedColorState","criticality","criticalityValue","activeCalculation","item","label","showStateIcon","hasActions","actions","actionType","resolvePropertyLabelFromExpression","resourceModel","properties","propertyPath","find","labelWithValue","formatterExpression","selectedFormatter","handleFormatter","extractKeyValue","keyValueStr","rawKey","rawValue","split","cleanedValue","replace","updateDataWithProperties","prop","key","startIndex","indexOf","endIndex","keySegment","slice","getRootComponent","keyReference","resolvedKey","getMainIndicator","mManifest","mainIndicatorKey","trendOptions","referenceValue","downDifference","upDifference","criticalityOptions","updateCriticalityBasedOnGroups","mainIndicatorStatusKey","mainIndicatorNavigationSelectedKey","navigationValue","formatterExpressions","trend","trendValue","regex","match","criticalityConfig","updateCriticalityOptions","includes","group","criticallityState","getCriticallityStateForGroup","navProp","itemExists","some","option","None","getSideIndicators","sideIndicators","targetValue","targetUnit","deviationValue","deviationUnit","targetIndicator","deviationIndicator","formatter","f","getGroupItemValue","getCardGroups","groupItem","isEnabled","isNavigationEnabled","enhanceManifestWithConfigurationParameters","oDialogModel","sapCard","applicationInstance","odataModel","V4","configurationParameters","textArrangements","previewItems","getPreviewItems","propertyFormatting","arrangementType","arrangements","text","Object","keys","addQueryParametersToManifest","cardManifest","cardManifestCopy","JSON","parse","stringify","batchRequest","selectQueryHeader","selectQueryContent","expandQueryHeader","expandQueryContent","headerUrl","contentUrl","configParameters","updateConfigurationParametersWithKeyProperties","updateHeaderDataPath","isODataV4","headerData","updateExistingCardManifest","undefined","componentName","parseCard","integrationCardManifest","subtitle","uom","splice","textArrangementsFromCardManifest","headerUOM","mainIndicatorOptions","sideIndicatorOptions","getUpdatedUnitOfMeasures","unitOfMeasures","formatterConfigsWithUnit","updatedUnitOfMeasures","_temp3","matchingProperty","unitConfig","formatterParameterValue","formatterProperty","_temp2","updatedProperty","propertyKeyForDescription","index","_temp","handleFormatterWithoutMatchingProperty","updateCriticalityForNavProperty","mainIndicatorCriticalityOptions","_temp6","_temp5","criticalityName","_temp4","propertiesWithLabel","navigationKeyForId","navigationKeyForDescription","isNavigationForId","isNavigationForDescription","navigationalPropertiesForId","error","Error","_temp8","sourceProperty","_temp7","createCardManifest","appComponent","dialogModel","sapApp","cardSubtitle","oAppModel","serviceUrl","isNavigationalProperty","propertyName","model","navigationalProperties","navigationalProperty","mainIndicatorProperty","flatMap","__exports","__esModule"],"sources":["IntegrationCardHelper.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport { handleSingleProperty, isSingleKeyWithoutAssignment } from \"sap/cards/ap/common/odata/ODataUtils\";\nimport { getNavigationPropertiesWithLabel } from \"sap/cards/ap/generator/helpers/NavigationProperty\";\nimport { getPropertyReference } from \"sap/cards/ap/generator/odata/v2/MetadataAnalyzer\";\nimport { getPropertyReferenceKey } from \"sap/cards/ap/generator/odata/v4/MetadataAnalyzer\";\nimport VersionInfo from \"sap/ui/VersionInfo\";\nimport Component from \"sap/ui/core/Component\";\nimport CoreElement from \"sap/ui/core/Element\";\nimport Card, {\n\tCardConfigParameters,\n\tCardManifest,\n\tGroup,\n\tGroupItems,\n\tObjectContent,\n\tPropertyFormattingParameters\n} from \"sap/ui/integration/widgets/Card\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport V2OdataUtils from \"sap/ui/model/odata/ODataUtils\";\nimport { default as V2ODataModel } from \"sap/ui/model/odata/v2/ODataModel\";\nimport { default as V4ODataModel } from \"sap/ui/model/odata/v4/ODataModel\";\nimport V4ODataUtils from \"sap/ui/model/odata/v4/ODataUtils\";\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport { ArrangementOptions } from \"../app/controls/ArrangementsEditor\";\nimport { PropertyInfoMap } from \"../odata/ODataTypes\";\nimport { getDataType, isODataV4Model } from \"../odata/ODataUtils\";\nimport { Application, LibVersionInfo, ODataModelVersion } from \"../pages/Application\";\nimport { ColorIndicator } from \"../types/CommonTypes\";\nimport type { UnitOfMeasures } from \"../types/PropertyTypes\";\nimport { extractValueWithoutBooleanExprBinding, getColorForGroup, hasBooleanBindingExpression } from \"../utils/CommonUtils\";\nimport { updateManifestWithExpandQueryParams, updateManifestWithSelectQueryParams } from \"./Batch\";\nimport type { CriticalityOptions, SideIndicatorOptions, TrendOptions } from \"./CardGeneratorModel\";\nimport type { FormatterConfiguration, FormatterConfigurationMap } from \"./Formatter\";\nimport { getYesAndNoTextValues, resolveI18nTextFromResourceModel } from \"./I18nHelper\";\nimport {\n\textractPathExpressionWithoutUOM,\n\textractPathWithoutUOM,\n\textractPropertyConfigurationWithoutTextArrangement,\n\tgetTextArrangementFromCardManifest,\n\thasFormatter,\n\tisExpression,\n\tisI18nExpression,\n\tupdateAndGetSelectedFormatters\n} from \"./PropertyExpression\";\n\nexport type ParsedManifest = {\n\ttitle: string;\n\tsubtitle: string;\n\theaderUOM: string;\n\tmainIndicatorOptions: {\n\t\tmainIndicatorStatusKey: string;\n\t\tcriticalityOptions: Array<object>;\n\t\tmainIndicatorNavigationSelectedKey: string;\n\t\tnavigationValue: string;\n\t\ttrendOptions: TrendOptions;\n\t};\n\tsideIndicatorOptions: SideIndicatorOptions;\n\tgroups: Array<object>;\n\tformatterConfigurationFromCardManifest: FormatterConfigurationMap;\n\ttextArrangementsFromCardManifest: Array<ArrangementOptions>;\n};\n\nexport type CriticalityOptionsPanel = CriticalityOptions[];\n\nlet manifest: CardManifest;\nconst formatterConfigurationFromCardManifest: FormatterConfigurationMap = [];\n\nexport function createInitialManifest(props: any) {\n\tconst {\n\t\ttitle,\n\t\tsubTitle,\n\t\tdescription,\n\t\tservice,\n\t\tserviceModel,\n\t\tsapAppId,\n\t\tsapCoreVersionInfo,\n\t\tentitySetName,\n\t\tentitySetWithObjectContext,\n\t\tdata\n\t} = props;\n\tconst bODataV4 = isODataV4Model(serviceModel);\n\tif (!bODataV4) {\n\t\tformatDataForV2(entitySetWithObjectContext, data);\n\t}\n\tconst dataPath = bODataV4 ? \"/content/\" : \"/content/d/\";\n\tconst dataPathHeader = bODataV4 ? \"/header/\" : \"/header/d/\";\n\tconst propertyReferenceKeys = bODataV4\n\t\t? getPropertyReferenceKey(serviceModel, entitySetName)\n\t\t: getPropertyReference(serviceModel, entitySetName);\n\tconst entityKeyPropertiesParameters: Record<string, { type: string; value: string | boolean }> = {};\n\n\tconst { yesText, noText } = getYesAndNoTextValues();\n\tpropertyReferenceKeys.forEach((keyProp) => {\n\t\tif (keyProp.type === \"Edm.Boolean\" && typeof data[keyProp.name] === \"string\") {\n\t\t\tdata[keyProp.name] = data[keyProp.name] === yesText;\n\t\t}\n\t\tentityKeyPropertiesParameters[keyProp.name] = {\n\t\t\ttype: getDataType(keyProp.type),\n\t\t\tvalue: data[keyProp.name]\n\t\t};\n\t});\n\n\tconst entityKeyProperties = propertyReferenceKeys.map((keyProp) => keyProp.name);\n\n\tmanifest = {\n\t\t_version: \"1.15.0\",\n\t\t\"sap.app\": {\n\t\t\tid: `${sapAppId}.cards.op.${entitySetName}`,\n\t\t\ttype: \"card\",\n\t\t\ti18n: \"../../../i18n/i18n.properties\",\n\t\t\ttitle: title,\n\t\t\tsubTitle: subTitle,\n\t\t\tdescription: description,\n\t\t\tapplicationVersion: {\n\t\t\t\tversion: \"1.0.0\"\n\t\t\t}\n\t\t},\n\t\t\"sap.ui\": {\n\t\t\ttechnology: \"UI5\",\n\t\t\ticons: {\n\t\t\t\ticon: \"sap-icon://switch-classes\"\n\t\t\t}\n\t\t},\n\t\t\"sap.card\": {\n\t\t\textension: \"module:sap/cards/ap/common/extensions/BaseIntegrationCardExtension\",\n\t\t\ttype: \"Object\",\n\t\t\tconfiguration: {\n\t\t\t\tparameters: {\n\t\t\t\t\t...entityKeyPropertiesParameters,\n\t\t\t\t\t_contentSelectQuery: {\n\t\t\t\t\t\tvalue: entityKeyProperties?.length ? `$select=${entityKeyProperties.join(\",\")}` : \"\"\n\t\t\t\t\t},\n\t\t\t\t\t_headerSelectQuery: {\n\t\t\t\t\t\tvalue: entityKeyProperties?.length ? `$select=${entityKeyProperties.join(\",\")}` : \"\"\n\t\t\t\t\t},\n\t\t\t\t\t_contentExpandQuery: {\n\t\t\t\t\t\tvalue: \"\"\n\t\t\t\t\t},\n\t\t\t\t\t_headerExpandQuery: {\n\t\t\t\t\t\tvalue: \"\"\n\t\t\t\t\t},\n\t\t\t\t\t_entitySet: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tvalue: entitySetName\n\t\t\t\t\t},\n\t\t\t\t\t_yesText: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tvalue: yesText\n\t\t\t\t\t},\n\t\t\t\t\t_noText: {\n\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\tvalue: noText\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdestinations: {\n\t\t\t\t\tservice: {\n\t\t\t\t\t\tname: \"(default)\",\n\t\t\t\t\t\tdefaultUrl: \"/\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcsrfTokens: {\n\t\t\t\t\ttoken1: {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\trequest: {\n\t\t\t\t\t\t\t\turl: `{{destinations.service}}${service}`,\n\t\t\t\t\t\t\t\tmethod: \"HEAD\",\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t\"X-CSRF-Token\": \"Fetch\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\trequest: {\n\t\t\t\t\turl: `{{destinations.service}}${service}/$batch`,\n\t\t\t\t\tmethod: \"POST\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t\"X-CSRF-Token\": \"{{csrfTokens.token1}}\",\n\t\t\t\t\t\t\"Accept-Language\": \"{{parameters.LOCALE}}\"\n\t\t\t\t\t},\n\t\t\t\t\tbatch: {\n\t\t\t\t\t\theader: {\n\t\t\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\t\t\turl: getHeaderBatchUrl(),\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t\t\t\t\"Accept-Language\": \"{{parameters.LOCALE}}\"\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tretryAfter: 30\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent: {\n\t\t\t\t\t\t\tmethod: \"GET\",\n\t\t\t\t\t\t\turl: getContentBatchUrl(),\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\t\t\t\t\"Accept-Language\": \"{{parameters.LOCALE}}\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\theader: {\n\t\t\t\tdata: {\n\t\t\t\t\tpath: dataPathHeader\n\t\t\t\t},\n\t\t\t\ttype: \"Numeric\",\n\t\t\t\ttitle: title,\n\t\t\t\tsubTitle: subTitle,\n\t\t\t\tunitOfMeasurement: \"\",\n\t\t\t\tmainIndicator: {\n\t\t\t\t\tnumber: \"\",\n\t\t\t\t\tunit: \"\"\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontent: {\n\t\t\t\tdata: {\n\t\t\t\t\tpath: dataPath\n\t\t\t\t},\n\t\t\t\tgroups: []\n\t\t\t}\n\t\t},\n\t\t\"sap.ui5\": {\n\t\t\t_version: \"1.1.0\",\n\t\t\tcontentDensities: {\n\t\t\t\tcompact: true,\n\t\t\t\tcozy: true\n\t\t\t},\n\t\t\tdependencies: {\n\t\t\t\tlibs: {\n\t\t\t\t\t\"sap.insights\": {\n\t\t\t\t\t\tlazy: false\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"sap.insights\": {\n\t\t\ttemplateName: \"ObjectPage\",\n\t\t\tparentAppId: sapAppId,\n\t\t\tcardType: \"LEAN_DT\",\n\t\t\tversions: {\n\t\t\t\tui5: sapCoreVersionInfo.version + \"-\" + sapCoreVersionInfo.buildTimestamp\n\t\t\t}\n\t\t}\n\t};\n\treturn manifest;\n}\n\nfunction getObjectPageContext() {\n\tconst { rootComponent, entitySet } = Application.getInstance().fetchDetails();\n\tconst appModel = rootComponent.getModel() as V2ODataModel | V4ODataModel;\n\tconst contextParameters: string[] = [];\n\tconst bODataV4 = isODataV4Model(appModel);\n\n\tif (bODataV4) {\n\t\tconst keyProperties = getPropertyReferenceKey(appModel as V4ODataModel, entitySet);\n\t\tkeyProperties.forEach((property) => {\n\t\t\tconst parameter = V4ODataUtils.formatLiteral(`{{parameters.${property.name}}}`, property.type);\n\t\t\tcontextParameters.push(`${property.name}=${parameter}`);\n\t\t});\n\t} else {\n\t\tconst keyProperties = getPropertyReference(appModel as V2ODataModel, entitySet);\n\t\tkeyProperties.forEach((property) => {\n\t\t\tlet parameter = \"\";\n\t\t\tif (property.type === \"Edm.DateTimeOffset\" || property.type === \"Edm.DateTime\") {\n\t\t\t\tconst propertyType = property.type === \"Edm.DateTimeOffset\" ? \"datetimeoffset\" : \"datetime\";\n\t\t\t\tparameter = propertyType + `'{{parameters.${property.name}}}'`;\n\t\t\t} else {\n\t\t\t\tparameter = V2OdataUtils.formatValue(`{{parameters.${property.name}}}`, property.type, true);\n\t\t\t}\n\t\t\tcontextParameters.push(`${property.name}=${parameter}`);\n\t\t});\n\t}\n\n\treturn contextParameters.join(\",\");\n}\n\nfunction getHeaderBatchUrl() {\n\treturn `{{parameters._entitySet}}(${getObjectPageContext()})?{{parameters._headerSelectQuery}}{{parameters._headerExpandQuery}}`;\n}\n\nfunction getContentBatchUrl() {\n\treturn `{{parameters._entitySet}}(${getObjectPageContext()})?{{parameters._contentSelectQuery}}{{parameters._contentExpandQuery}}`;\n}\n\nexport function getCurrentCardManifest(): CardManifest {\n\treturn manifest || {};\n}\n\n/**\n * Render integration card preview\n *\n * @param {CardManifest} newManifest\n */\nexport function renderCardPreview(newManifest: CardManifest, oModel?: JSONModel) {\n\tmanifest = { ...newManifest };\n\tupdateManifestWithSelectQueryParams(manifest);\n\toModel && updateManifestWithExpandQueryParams(manifest);\n\tconst oCard = CoreElement.getElementById(\"cardGeneratorDialog--cardPreview\") as Card;\n\tif (oCard) {\n\t\toCard.setBaseUrl(\"./\");\n\t\toCard.setManifest(manifest);\n\t\toCard.refresh();\n\t}\n}\n\nexport function updateCardGroups(oModel: JSONModel) {\n\tconst configurationGroups: Group[] = oModel.getProperty(\"/configuration/groups\");\n\tconst advancedPanelCriticallity = oModel?.getProperty(\"/configuration/mainIndicatorOptions/criticality\");\n\n\tconst groups = configurationGroups.map(function (configuration) {\n\t\tconst items = configuration?.items\n\t\t\t?.filter(function (configurationItem) {\n\t\t\t\treturn configurationItem.name;\n\t\t\t})\n\t\t\t.map((configurationItem) => {\n\t\t\t\tconst matchedCriticallity = advancedPanelCriticallity?.filter((columnItem: CriticalityOptions) => {\n\t\t\t\t\tif (configurationItem?.navigationProperty) {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t`${columnItem.name}/${columnItem?.propertyKeyForId}` ===\n\t\t\t\t\t\t\t`${configurationItem.name}/${configurationItem.navigationProperty}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\treturn columnItem.name === configurationItem.name;\n\t\t\t\t});\n\t\t\t\tlet updatedColorState;\n\t\t\t\tif (matchedCriticallity?.[0]?.criticality) {\n\t\t\t\t\tconst criticalityValue = matchedCriticallity[0]?.activeCalculation\n\t\t\t\t\t\t? matchedCriticallity[0]\n\t\t\t\t\t\t: matchedCriticallity[0]?.criticality;\n\t\t\t\t\tupdatedColorState = getColorForGroup(criticalityValue);\n\t\t\t\t}\n\t\t\t\tconst item: any = {\n\t\t\t\t\tlabel: configurationItem.label,\n\t\t\t\t\tvalue: configurationItem.value,\n\t\t\t\t\tname: configurationItem.name\n\t\t\t\t};\n\t\t\t\tif (updatedColorState) {\n\t\t\t\t\titem.state = updatedColorState;\n\t\t\t\t\titem.type = \"Status\";\n\t\t\t\t\titem.showStateIcon = true;\n\t\t\t\t}\n\t\t\t\tif (configurationItem.hasActions) {\n\t\t\t\t\titem[\"actions\"] = configurationItem.actions;\n\t\t\t\t\titem[\"hasActions\"] = configurationItem.hasActions;\n\t\t\t\t\titem[\"actionType\"] = configurationItem.actionType;\n\t\t\t\t}\n\t\t\t\treturn item;\n\t\t\t});\n\t\treturn {\n\t\t\ttitle: configuration.title,\n\t\t\titems: items ? items : []\n\t\t};\n\t});\n\t(manifest[\"sap.card\"].content as ObjectContent).groups = groups;\n\trenderCardPreview(manifest, oModel);\n}\n\n/**\n *  Resolves the card header properties from stored manifest\n *  - If path is a string, return the resolved i18n text\n * \t- If path is an expression, resolve the expression then return the labelWithValue of the property\n *  - If path is an expression with formatter, update the formatter configuration and return the labelWithValue of the property\n * @param path\n * @param resourceModel\n * @param properties\n * @returns\n */\nexport function resolvePropertyLabelFromExpression(path: string, resourceModel: ResourceModel, properties: PropertyInfoMap) {\n\tif (isI18nExpression(path)) {\n\t\treturn resolveI18nTextFromResourceModel(path, resourceModel);\n\t}\n\n\tif (isExpression(path) && !hasFormatter(path)) {\n\t\tlet propertyPath = \"\";\n\t\tif (hasBooleanBindingExpression(path)) {\n\t\t\tpropertyPath = extractValueWithoutBooleanExprBinding(path);\n\t\t} else {\n\t\t\tpropertyPath = extractPathWithoutUOM(path);\n\t\t}\n\t\treturn properties.find((property) => property.name === propertyPath)?.labelWithValue ?? \"\";\n\t}\n\n\tif (isExpression(path) && hasFormatter(path)) {\n\t\tconst formatterExpression = extractPathExpressionWithoutUOM(path);\n\t\tconst selectedFormatter = updateAndGetSelectedFormatters(formatterExpression);\n\t\thandleFormatter(selectedFormatter);\n\t\treturn properties.find((property) => property.name === selectedFormatter.property)?.labelWithValue ?? \"\";\n\t}\n\n\treturn path;\n}\n\n/**\n * The function formats the data for OData V2 applications containing the key parameters of type datetimeoffset and guid.\n * @param entitySetWithObjectContext\n * @param data\n */\nexport function formatDataForV2(entitySetWithObjectContext: string, data: Record<string, any>) {\n\tconst extractKeyValue = (keyValueStr: string): [string, any] => {\n\t\tconst [rawKey, rawValue] = keyValueStr.split(\"=\");\n\n\t\tif (rawValue === \"true\" || rawValue === \"false\") {\n\t\t\treturn [rawKey, rawValue === \"true\"];\n\t\t}\n\n\t\tconst cleanedValue = rawValue.replace(/guid|datetimeoffset|datetime|'*/g, \"\");\n\t\treturn [rawKey, cleanedValue];\n\t};\n\n\tconst updateDataWithProperties = (properties: string[]) => {\n\t\tfor (const prop of properties) {\n\t\t\tconst [key, value] = extractKeyValue(prop);\n\t\t\tdata[key] = value;\n\t\t}\n\t};\n\n\tconst startIndex = entitySetWithObjectContext.indexOf(\"(\");\n\tconst endIndex = entitySetWithObjectContext.indexOf(\")\");\n\tconst keySegment = entitySetWithObjectContext.slice(startIndex + 1, endIndex);\n\tconst keyProperties = keySegment.split(\",\");\n\n\tif (isSingleKeyWithoutAssignment(keyProperties)) {\n\t\tconst entitySetName = entitySetWithObjectContext.split(\"(\")[0];\n\t\tconst appModel = Application.getInstance().getRootComponent().getModel();\n\t\tconst keyReference = getPropertyReference(appModel as V2ODataModel, entitySetName);\n\t\tconst resolvedKey = handleSingleProperty(keyReference, keyProperties).join(\",\");\n\t\tconst [key, value] = extractKeyValue(resolvedKey);\n\t\tdata[key] = value;\n\t} else {\n\t\tupdateDataWithProperties(keyProperties);\n\t}\n}\n\nfunction getMainIndicator(mManifest: CardManifest) {\n\tconst mainIndicator = mManifest[\"sap.card\"].header.mainIndicator;\n\tlet mainIndicatorKey = \"\";\n\tlet trendOptions: TrendOptions = {\n\t\treferenceValue: \"\",\n\t\tdownDifference: \"\",\n\t\tupDifference: \"\"\n\t};\n\tconst criticalityOptions: CriticalityOptions[] = [];\n\tconst groups = (mManifest[\"sap.card\"].content as ObjectContent).groups;\n\tif (groups.length > 0) {\n\t\tupdateCriticalityBasedOnGroups(mManifest, criticalityOptions);\n\t}\n\n\tif (!mainIndicator || !mainIndicator.number) {\n\t\treturn {\n\t\t\tmainIndicatorStatusKey: \"\",\n\t\t\tmainIndicatorNavigationSelectedKey: \"\",\n\t\t\tcriticalityOptions,\n\t\t\tnavigationValue: \"\",\n\t\t\ttrendOptions\n\t\t};\n\t}\n\n\tconst { propertyPath, formatterExpression } = extractPropertyConfigurationWithoutTextArrangement(mainIndicator.number, mManifest);\n\tconst state = mainIndicator.state;\n\n\tif (formatterExpression.length) {\n\t\tconst formatterExpressions = formatterExpression.map(updateAndGetSelectedFormatters);\n\t\tformatterExpressions.forEach(handleFormatter);\n\t}\n\n\tif (isExpression(propertyPath) && !hasFormatter(propertyPath)) {\n\t\tif (hasBooleanBindingExpression(propertyPath)) {\n\t\t\tmainIndicatorKey = extractValueWithoutBooleanExprBinding(propertyPath);\n\t\t} else {\n\t\t\tmainIndicatorKey = extractPathWithoutUOM(propertyPath);\n\t\t}\n\t}\n\tif (mainIndicator.trend && mainIndicator.trend !== \"None\") {\n\t\tconst trendValue = mainIndicator.trend;\n\t\tconst regex = /\"referenceValue\":(\\d+),\"downDifference\":(\\d+),\"upDifference\":(\\d+)/;\n\t\tconst match = trendValue.match(regex);\n\n\t\tif (match) {\n\t\t\ttrendOptions = {\n\t\t\t\treferenceValue: match[1] || \"\",\n\t\t\t\tdownDifference: match[2] || \"\",\n\t\t\t\tupDifference: match[3] || \"\"\n\t\t\t};\n\t\t}\n\t}\n\n\tif (isExpression(propertyPath) && hasFormatter(propertyPath)) {\n\t\tconst formatterExpression = extractPathExpressionWithoutUOM(propertyPath);\n\t\tconst selectedFormatter = updateAndGetSelectedFormatters(formatterExpression);\n\t\thandleFormatter(selectedFormatter);\n\t\tmainIndicatorKey = selectedFormatter.property || \"\";\n\t}\n\tlet criticalityConfig: CriticalityOptions = {\n\t\tcriticality: \"\",\n\t\tname: \"\",\n\t\tactiveCalculation: false\n\t};\n\tif (state && hasFormatter(state)) {\n\t\tconst formatterExpression = extractPathExpressionWithoutUOM(state);\n\t\tconst selectedFormatter = updateAndGetSelectedFormatters(formatterExpression);\n\t\thandleFormatter(selectedFormatter);\n\t\tcriticalityConfig = {\n\t\t\tcriticality: \"{\" + selectedFormatter.property + \"}\",\n\t\t\tname: mainIndicatorKey,\n\t\t\tactiveCalculation: false\n\t\t};\n\t} else if (state && state !== \"None\") {\n\t\tcriticalityConfig = {\n\t\t\tcriticality: state,\n\t\t\tname: mainIndicatorKey,\n\t\t\tactiveCalculation: false\n\t\t};\n\t}\n\tif (criticalityConfig.name.length) {\n\t\tupdateCriticalityOptions(criticalityOptions, criticalityConfig);\n\t}\n\n\tlet mainIndicatorNavigationSelectedKey = \"\";\n\tlet mainIndicatorStatusKey = mainIndicatorKey;\n\tif (mainIndicatorKey.includes(\"/\")) {\n\t\tmainIndicatorStatusKey = mainIndicatorKey.split(\"/\")[0];\n\t\tmainIndicatorNavigationSelectedKey = mainIndicatorKey.split(\"/\")[1];\n\t}\n\treturn {\n\t\tmainIndicatorStatusKey,\n\t\tmainIndicatorNavigationSelectedKey,\n\t\tcriticalityOptions,\n\t\tnavigationValue: mainIndicatorKey,\n\t\ttrendOptions\n\t};\n}\n/**\n * Updates the criticality options based on the groups in the provided CardManifest.\n * @param {CardManifest} mManifest - The card manifest containing the groups and their items.\n * @param {CriticalityOptions[]} criticalityOptions - An array of criticality options to be updated.\n */\n\nfunction updateCriticalityBasedOnGroups(mManifest: CardManifest, criticalityOptions: CriticalityOptions[]) {\n\tconst groups = (mManifest[\"sap.card\"].content as ObjectContent).groups;\n\tgroups.forEach((group) => {\n\t\tgroup.items.forEach((item) => {\n\t\t\tif (item.state) {\n\t\t\t\tconst criticallityState = getCriticallityStateForGroup(item.state);\n\t\t\t\tconst regex = /\\/([^,}]+)/;\n\t\t\t\tconst match = item.value.match(regex);\n\t\t\t\tlet navProp;\n\t\t\t\tif (match) {\n\t\t\t\t\tnavProp = match[1];\n\t\t\t\t}\n\t\t\t\tconst criticalityConfig: CriticalityOptions = {\n\t\t\t\t\tcriticality: criticallityState,\n\t\t\t\t\tname: navProp ? `${item.name}/${navProp}` : item.name,\n\t\t\t\t\tactiveCalculation: false\n\t\t\t\t};\n\t\t\t\tupdateCriticalityOptions(criticalityOptions, criticalityConfig);\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Update the criticality options\n * @param criticalityOptions\n * @param criticalityConfig\n */\nfunction updateCriticalityOptions(criticalityOptions: CriticalityOptions[], criticalityConfig: CriticalityOptions) {\n\tconst itemExists = criticalityOptions.some((option) => option.name === criticalityConfig.name);\n\tif (!itemExists) {\n\t\tcriticalityOptions.push(criticalityConfig);\n\t}\n}\n\n/**\n * Gets the criticality state for a group based on the provided state string.\n *\n * This function checks if the state has a formatter associated with it.\n * If so, it processes the formatter and returns its property in a specific format.\n * If the state corresponds to a known criticality state, it returns the corresponding\n * color indicator. If the state is not recognized, it defaults to the 'None' indicator.\n *\n * @param {string} state - The state string to evaluate for criticality.\n * @returns {string} - The criticality state as a string based on the ColorIndicator enum.\n *                    Possible return values include:\n *                    - ColorIndicator.Error\n *                    - ColorIndicator.Success\n *                    - ColorIndicator.None\n *                    - ColorIndicator.Warning\n */\nexport function getCriticallityStateForGroup(state: string) {\n\tif (state && hasFormatter(state)) {\n\t\tconst formatterExpression = extractPathExpressionWithoutUOM(state);\n\t\tconst selectedFormatter = updateAndGetSelectedFormatters(formatterExpression);\n\t\thandleFormatter(selectedFormatter);\n\t\treturn \"{\" + selectedFormatter.property + \"}\";\n\t}\n\n\tif (state && state in ColorIndicator) {\n\t\treturn ColorIndicator[state as keyof typeof ColorIndicator];\n\t}\n\n\treturn ColorIndicator.None;\n}\n\nfunction getSideIndicators(mManifest: CardManifest): SideIndicatorOptions {\n\tconst sideIndicators = mManifest[\"sap.card\"].header.sideIndicators || [];\n\n\tif (sideIndicators.length === 0 || !sideIndicators[0].number) {\n\t\treturn {\n\t\t\ttargetValue: \"\",\n\t\t\ttargetUnit: \"\",\n\t\t\tdeviationValue: \"\",\n\t\t\tdeviationUnit: \"\"\n\t\t};\n\t}\n\n\tconst [targetIndicator = {}, deviationIndicator = {}] = sideIndicators;\n\tconst { number: targetValue = \"\", unit: targetUnit = \"\" } = targetIndicator;\n\n\tconst { number: deviationValue = \"\", unit: deviationUnit = \"\" } = deviationIndicator;\n\n\treturn {\n\t\ttargetValue,\n\t\ttargetUnit,\n\t\tdeviationValue,\n\t\tdeviationUnit\n\t};\n}\n\nfunction handleFormatter(formatter: FormatterConfiguration) {\n\tif (\n\t\tformatterConfigurationFromCardManifest.length === 0 ||\n\t\t!formatterConfigurationFromCardManifest.find((f) => f.property === formatter.property)\n\t) {\n\t\tformatterConfigurationFromCardManifest.push({ ...formatter });\n\t}\n}\n\nfunction getGroupItemValue(value: string, mManifest: CardManifest) {\n\tconst { formatterExpression } = extractPropertyConfigurationWithoutTextArrangement(value, mManifest);\n\n\tif (formatterExpression.length) {\n\t\tconst formatterExpressions = formatterExpression.map(updateAndGetSelectedFormatters);\n\t\tformatterExpressions.forEach(handleFormatter);\n\t}\n\n\treturn value;\n}\n\nfunction getCardGroups(mManifest: CardManifest, resourceModel: ResourceModel) {\n\tconst groups = (mManifest[\"sap.card\"].content as ObjectContent).groups;\n\tif (groups.length === 0) {\n\t\treturn [];\n\t}\n\treturn groups.map((group) => {\n\t\treturn {\n\t\t\ttitle: resolveI18nTextFromResourceModel(group.title, resourceModel),\n\t\t\titems: group.items.map((item) => {\n\t\t\t\tconst groupItem: GroupItems = {\n\t\t\t\t\tlabel: resolveI18nTextFromResourceModel(item.label, resourceModel),\n\t\t\t\t\tvalue: getGroupItemValue(item.value, mManifest),\n\t\t\t\t\tname: item.name,\n\t\t\t\t\tisEnabled: true,\n\t\t\t\t\tisNavigationEnabled: false\n\t\t\t\t};\n\t\t\t\tif (item.hasActions) {\n\t\t\t\t\tgroupItem.actions = item.actions;\n\t\t\t\t\tgroupItem.hasActions = item.hasActions;\n\t\t\t\t\tgroupItem.actionType = item.actionType;\n\t\t\t\t}\n\t\t\t\tif (item.state) {\n\t\t\t\t\tgroupItem.type = \"Status\";\n\t\t\t\t\tgroupItem.state = item.state;\n\t\t\t\t}\n\t\t\t\treturn groupItem;\n\t\t\t})\n\t\t};\n\t});\n}\n\n/**\n * This is a fix for cards which are generated without \"sap.insights\" manifest property or with cardType as \"DT\".\n *  - When the card is regenerated \"sap.insight\" property will be set/updated existing in the manifest.\n *\n * @param mCardManifest\n * @param rootComponent\n * @returns\n */\nexport async function enhanceManifestWithInsights(mCardManifest: CardManifest | undefined, rootComponent: Component) {\n\tif (!mCardManifest) {\n\t\treturn;\n\t}\n\tconst sapAppId = rootComponent.getManifestEntry(\"sap.app\").id;\n\tconst sapCoreVersionInfo = (await VersionInfo.load({\n\t\tlibrary: \"sap.ui.core\"\n\t})) as LibVersionInfo;\n\n\tmCardManifest[\"sap.insights\"] = {\n\t\ttemplateName: \"ObjectPage\",\n\t\tparentAppId: sapAppId,\n\t\tcardType: \"LEAN_DT\",\n\t\tversions: {\n\t\t\tui5: sapCoreVersionInfo.version + \"-\" + sapCoreVersionInfo.buildTimestamp\n\t\t}\n\t};\n}\n\n/**\n * Enhance the card manifest configuration parameters with property formatting configuration\n * \t- add text arrangements properties\n *  - Updates the card manifest configuration parameters by adding \"_yesText\" and \"_noText\" parameters\n *    with predefined string values referencing i18n keys.\n *\n * @param {CardManifest} The card manifest object to be updated. It is expected to have\n *    \"sap.card\" property with a configuration containing parameters.\n * @param {JSONModel}\n */\nexport function enhanceManifestWithConfigurationParameters(mCardManifest: CardManifest, oDialogModel: JSONModel) {\n\tconst sapCard = mCardManifest[\"sap.card\"];\n\tconst applicationInstance = Application.getInstance();\n\tconst rootComponent = applicationInstance.getRootComponent();\n\tconst appModel = rootComponent.getModel();\n\tconst { odataModel, entitySet } = applicationInstance.fetchDetails();\n\tconst keyProperties: string[] = [];\n\n\tif (odataModel === ODataModelVersion.V4) {\n\t\tgetPropertyReferenceKey(appModel as V4ODataModel, entitySet).forEach((property) => keyProperties.push(property.name));\n\t} else {\n\t\tgetPropertyReference(appModel as V2ODataModel, entitySet).forEach((property) => keyProperties.push(property.name));\n\t}\n\n\tif (!sapCard.configuration) {\n\t\tsapCard.configuration = {\n\t\t\tparameters: {}\n\t\t};\n\t}\n\n\tif (!sapCard.configuration?.parameters) {\n\t\tsapCard.configuration.parameters = {};\n\t}\n\n\tconst configurationParameters = sapCard.configuration?.parameters as CardConfigParameters;\n\tconfigurationParameters[\"_propertyFormatting\"] = {};\n\tconst textArrangements = oDialogModel.getProperty(\"/configuration/advancedFormattingOptions/textArrangements\") as ArrangementOptions[];\n\tconst previewItems = getPreviewItems(oDialogModel);\n\tconst propertyFormatting: PropertyFormattingParameters = {};\n\ttextArrangements.forEach(({ name, arrangementType, value }) => {\n\t\tif (name && previewItems.includes(name) && arrangementType && value) {\n\t\t\tpropertyFormatting[name] = {\n\t\t\t\tarrangements: {\n\t\t\t\t\ttext: {\n\t\t\t\t\t\t[arrangementType]: true,\n\t\t\t\t\t\tpath: value\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\tif (Object.keys(propertyFormatting).length > 0) {\n\t\tconfigurationParameters[\"_propertyFormatting\"] = propertyFormatting;\n\t}\n\n\tconfigurationParameters[\"_mandatoryODataParameters\"] = {\n\t\tvalue: keyProperties\n\t};\n\n\tconfigurationParameters[\"_entitySet\"] = {\n\t\tvalue: entitySet,\n\t\ttype: \"string\"\n\t};\n\n\tkeyProperties.forEach((keyProp) => {\n\t\tconfigurationParameters[keyProp] = {\n\t\t\ttype: getDataType(keyProp),\n\t\t\tvalue: \"\"\n\t\t};\n\t});\n\n\tconfigurationParameters[\"_yesText\"] = {\n\t\ttype: \"string\",\n\t\tvalue: \"{{CardGeneratorValue_Yes}}\"\n\t};\n\n\tconfigurationParameters[\"_noText\"] = {\n\t\ttype: \"string\",\n\t\tvalue: \"{{CardGeneratorValue_No}}\"\n\t};\n}\n\n/**\n * Adds query parameters to the URLs in the manifest's batch request.\n *\n * @param {CardManifest} cardManifest - The card manifest.\n * @returns {CardManifest} A copy of the original card manifest with query parameters added to the URLs.\n */\n\nexport const addQueryParametersToManifest = (cardManifest?: CardManifest): CardManifest => {\n\tconst cardManifestCopy = JSON.parse(JSON.stringify(cardManifest));\n\tconst batchRequest = cardManifestCopy[\"sap.card\"].data?.request?.batch;\n\tconst selectQueryHeader = \"?{{parameters._headerSelectQuery}}\";\n\tconst selectQueryContent = \"?{{parameters._contentSelectQuery}}\";\n\tconst expandQueryHeader = \"{{parameters._headerExpandQuery}}\";\n\tconst expandQueryContent = \"{{parameters._contentExpandQuery}}\";\n\tconst headerUrl = batchRequest?.header?.url;\n\tconst contentUrl = batchRequest?.content?.url;\n\n\tif (headerUrl?.indexOf(selectQueryHeader) === -1) {\n\t\tbatchRequest.header.url = `${batchRequest.header.url}${selectQueryHeader}${expandQueryHeader}`;\n\t} else if (headerUrl?.indexOf(expandQueryHeader) === -1) {\n\t\tbatchRequest.header.url = `${batchRequest.header.url}${expandQueryHeader}`;\n\t}\n\tif (contentUrl?.indexOf(selectQueryContent) === -1) {\n\t\tbatchRequest.content.url = `${batchRequest.content.url}${selectQueryContent}${expandQueryContent}`;\n\t} else if (contentUrl?.indexOf(expandQueryContent) === -1) {\n\t\tbatchRequest.content.url = `${batchRequest.content.url}${expandQueryContent}`;\n\t}\n\n\tconst configParameters = cardManifestCopy[\"sap.card\"].configuration?.parameters;\n\tconfigParameters._contentSelectQuery = configParameters?._contentSelectQuery ?? { value: \"\" };\n\tconfigParameters._headerSelectQuery = configParameters?._headerSelectQuery ?? { value: \"\" };\n\tconfigParameters._contentExpandQuery = configParameters?._contentExpandQuery ?? { value: \"\" };\n\tconfigParameters._headerExpandQuery = configParameters?._headerExpandQuery ?? { value: \"\" };\n\n\treturn cardManifestCopy;\n};\n\nconst updateConfigurationParametersWithKeyProperties = (cardManifest: CardManifest, data: Record<string, any>) => {\n\tconst applicationInstance = Application.getInstance();\n\tconst rootComponent = applicationInstance.getRootComponent();\n\tconst appModel = rootComponent.getModel();\n\tconst { odataModel, entitySet, entitySetWithObjectContext } = applicationInstance.fetchDetails();\n\tconst bODataV4 = isODataV4Model(appModel);\n\tif (!bODataV4) {\n\t\tformatDataForV2(entitySetWithObjectContext, data);\n\t}\n\tconst propertyReferenceKeys =\n\t\todataModel === ODataModelVersion.V4\n\t\t\t? getPropertyReferenceKey(appModel as V4ODataModel, entitySet)\n\t\t\t: getPropertyReference(appModel as V2ODataModel, entitySet);\n\n\tconst sapCard = cardManifest[\"sap.card\"];\n\tif (!sapCard.configuration) {\n\t\tsapCard.configuration = {\n\t\t\tparameters: {}\n\t\t};\n\t}\n\n\tif (!sapCard.configuration?.parameters) {\n\t\tsapCard.configuration.parameters = {};\n\t}\n\tconst configurationParameters = sapCard.configuration?.parameters as CardConfigParameters;\n\n\tconfigurationParameters[\"_entitySet\"] = {\n\t\tvalue: entitySet,\n\t\ttype: \"string\"\n\t};\n\tconst { yesText, noText } = getYesAndNoTextValues();\n\tconfigurationParameters[\"_yesText\"] = {\n\t\ttype: \"string\",\n\t\tvalue: yesText\n\t};\n\tconfigurationParameters[\"_noText\"] = {\n\t\ttype: \"string\",\n\t\tvalue: noText\n\t};\n\tpropertyReferenceKeys.forEach((keyProp) => {\n\t\tif (keyProp.type === \"Edm.Boolean\" && typeof data[keyProp.name] === \"string\") {\n\t\t\tdata[keyProp.name] = data[keyProp.name] === yesText;\n\t\t}\n\t\tconfigurationParameters[keyProp.name] = {\n\t\t\ttype: getDataType(keyProp.type),\n\t\t\tvalue: data[keyProp.name]\n\t\t};\n\t});\n};\n\n/**\n * Updates the data path of the card header in the provided card manifest by reference.\n *\n * @param {CardManifest} cardManifest - The card manifest object that contains the header data.\n */\nfunction updateHeaderDataPath(cardManifest: CardManifest, isODataV4: boolean) {\n\tconst headerData = cardManifest[\"sap.card\"].header.data;\n\tconst dataPathHeader = isODataV4 ? \"/header/\" : \"/header/d/\";\n\n\tif (headerData?.path) {\n\t\theaderData.path = dataPathHeader;\n\t}\n}\n\n/**\n * This method is used to perform updates on existing integration card manifest.\n * Updates will include adding,\n * \t- Query parameters to the URLs in the target manifest's batch request.\n * \t- sap.app.id to the manifest.\n * @param cardManifest\n */\nexport const updateExistingCardManifest = (data: Record<string, any>, cardManifest?: CardManifest): CardManifest | undefined => {\n\tif (!cardManifest) {\n\t\treturn cardManifest;\n\t}\n\n\tcardManifest = addQueryParametersToManifest(cardManifest);\n\tconst batch = cardManifest[\"sap.card\"].data.request?.batch;\n\n\tif (batch !== undefined) {\n\t\tbatch.header.url = getHeaderBatchUrl();\n\t\tbatch.content.url = getContentBatchUrl();\n\t}\n\tconst { componentName, odataModel, entitySet } = Application.getInstance().fetchDetails();\n\tcardManifest[\"sap.app\"].id = `${componentName}.cards.op.${entitySet}`;\n\tcardManifest[\"sap.app\"].i18n = cardManifest[\"sap.app\"].i18n || \"../../../i18n/i18n.properties\";\n\tupdateConfigurationParametersWithKeyProperties(cardManifest, data);\n\tconst isODataV4 = odataModel === ODataModelVersion.V4;\n\tupdateHeaderDataPath(cardManifest, isODataV4);\n\treturn cardManifest;\n};\n\n/**\n * Parses the integration card manifest and extracts relevant information.\n *\n * @param {CardManifest} integrationCardManifest - The manifest of the integration card to be parsed.\n * @param {ResourceModel} resourceModel - The resource model used for localization.\n * @param {PropertyInfoMap} properties - The map of properties to resolve labels from expressions.\n * @returns {ParsedManifest} The parsed manifest containing title, subtitle, header unit of measurement, main indicator options, side indicator options, groups, formatter configuration, and text arrangements.\n */\nexport function parseCard(\n\tintegrationCardManifest: CardManifest,\n\tresourceModel: ResourceModel,\n\tproperties: PropertyInfoMap\n): ParsedManifest {\n\tconst title = integrationCardManifest[\"sap.card\"].header.title ?? \"\";\n\tconst subtitle = integrationCardManifest[\"sap.card\"].header.subTitle ?? \"\";\n\tconst uom = integrationCardManifest[\"sap.card\"].header.unitOfMeasurement ?? \"\";\n\tformatterConfigurationFromCardManifest.splice(0, formatterConfigurationFromCardManifest.length);\n\tconst textArrangementsFromCardManifest: Array<ArrangementOptions> = getTextArrangementFromCardManifest(integrationCardManifest);\n\n\treturn {\n\t\ttitle: resolvePropertyLabelFromExpression(title, resourceModel, properties),\n\t\tsubtitle: resolvePropertyLabelFromExpression(subtitle, resourceModel, properties),\n\t\theaderUOM: resolvePropertyLabelFromExpression(uom, resourceModel, properties),\n\t\tmainIndicatorOptions: getMainIndicator(integrationCardManifest),\n\t\tsideIndicatorOptions: getSideIndicators(integrationCardManifest),\n\t\tgroups: getCardGroups(integrationCardManifest, resourceModel),\n\t\tformatterConfigurationFromCardManifest,\n\t\ttextArrangementsFromCardManifest\n\t};\n}\n\n/**\n * Updates the unit of measures array with formatter configurations.\n *\n * @param {Array<UnitOfMeasures>} unitOfMeasures - The array of unit of measures to be updated.\n * @param {FormatterConfigurationMap} formatterConfigsWithUnit - The formatter configurations containing unit information.\n * @returns Promise {Array<UnitOfMeasures>} The updated array of unit of measures.\n */\nexport const getUpdatedUnitOfMeasures = async function (\n\tunitOfMeasures: Array<UnitOfMeasures>,\n\tformatterConfigsWithUnit: FormatterConfigurationMap,\n\tpath: string\n): Promise<Array<UnitOfMeasures>> {\n\tconst updatedUnitOfMeasures = [...unitOfMeasures];\n\tfor (const formatter of formatterConfigsWithUnit) {\n\t\tconst matchingProperty = updatedUnitOfMeasures.find((unitConfig: UnitOfMeasures) => unitConfig.name === formatter.property);\n\t\tconst formatterParameterValue = formatter.parameters?.[0].value;\n\t\tlet value;\n\t\tif (hasBooleanBindingExpression(formatterParameterValue)) {\n\t\t\tvalue = extractValueWithoutBooleanExprBinding(formatterParameterValue);\n\t\t} else {\n\t\t\tvalue = formatterParameterValue?.replace(/\\$\\{/g, \"\");\n\t\t\tvalue = value?.replace(/\\}/g, \"\");\n\t\t}\n\t\tconst formatterProperty = formatter.property;\n\n\t\tif (matchingProperty && value) {\n\t\t\tconst updatedProperty = { ...matchingProperty, propertyKeyForDescription: value, value: value };\n\t\t\tconst index = updatedUnitOfMeasures.indexOf(matchingProperty);\n\t\t\tupdatedUnitOfMeasures[index] = updatedProperty;\n\t\t} else if (value && formatterProperty) {\n\t\t\tawait handleFormatterWithoutMatchingProperty(formatterProperty, value, updatedUnitOfMeasures, path);\n\t\t}\n\t}\n\n\treturn updatedUnitOfMeasures;\n};\n\n/**\n * Updates the criticality options for navigation properties in the main indicator criticality options.\n *\n * @param {Array<CriticalityOptions>} mainIndicatorCriticalityOptions - The array of main indicator criticality options to be updated.\n * @param {string} path - The path used to fetch navigation properties with labels.\n * @returns {Promise<Array<CriticalityOptions>>} A promise that resolves to the updated array of main indicator criticality options.\n */\nexport const updateCriticalityForNavProperty = async function (mainIndicatorCriticalityOptions: CriticalityOptionsPanel, path: string) {\n\tfor (const criticality of mainIndicatorCriticalityOptions) {\n\t\tif (criticality.name.includes(\"/\")) {\n\t\t\tconst [criticalityName, navProp] = criticality.name.split(\"/\");\n\t\t\ttry {\n\t\t\t\tconst { propertiesWithLabel } = await getNavigationPropertiesWithLabel(\n\t\t\t\t\tApplication.getInstance().fetchDetails().rootComponent,\n\t\t\t\t\tcriticalityName,\n\t\t\t\t\tpath\n\t\t\t\t);\n\t\t\t\tcriticality.navigationKeyForId = navProp;\n\t\t\t\tcriticality.navigationKeyForDescription = \"\";\n\t\t\t\tcriticality.propertyKeyForId = navProp;\n\t\t\t\tcriticality.isNavigationForId = true;\n\t\t\t\tcriticality.isNavigationForDescription = false;\n\t\t\t\tcriticality.name = criticalityName;\n\t\t\t\tcriticality.navigationalPropertiesForId = propertiesWithLabel;\n\t\t\t} catch (error) {\n\t\t\t\tError(\"Error fetching navigation properties:\" + error);\n\t\t\t}\n\t\t}\n\t}\n\treturn mainIndicatorCriticalityOptions;\n};\n/**\n * Handles the formatter property when there is no matching property.\n * Updates the `updatedUnitOfMeasures` array with the appropriate data based on the formatter property.\n *\n * @param {string} formatterProperty - The formatter property to process.\n * @param {string} value - The value associated with the formatter property.\n * @param {Array<UnitOfMeasures>} updatedUnitOfMeasures - The array to update with unit of measure data.\n * @param {string} path - The path used to fetch navigation properties.\n * @returns {Promise<Array<UnitOfMeasures>>} A promise that resolves to the updated array of unit of measures.\n */\nexport const handleFormatterWithoutMatchingProperty = async (\n\tformatterProperty: string,\n\tvalue: string,\n\tupdatedUnitOfMeasures: Array<UnitOfMeasures>,\n\tpath: string\n) => {\n\tif (!formatterProperty) {\n\t\treturn;\n\t}\n\tif (formatterProperty.includes(\"/\")) {\n\t\tconst [sourceProperty, navigationKeyForId] = formatterProperty.split(\"/\");\n\t\ttry {\n\t\t\tconst { propertiesWithLabel } = await getNavigationPropertiesWithLabel(\n\t\t\t\tApplication.getInstance().fetchDetails().rootComponent,\n\t\t\t\tsourceProperty,\n\t\t\t\tpath\n\t\t\t);\n\t\t\tupdatedUnitOfMeasures.push({\n\t\t\t\tpropertyKeyForDescription: value,\n\t\t\t\tname: formatterProperty,\n\t\t\t\tpropertyKeyForId: sourceProperty,\n\t\t\t\tvalue: value,\n\t\t\t\tisNavigationForId: true,\n\t\t\t\tnavigationKeyForId: navigationKeyForId,\n\t\t\t\tisNavigationForDescription: false,\n\t\t\t\tnavigationKeyForDescription: \"\",\n\t\t\t\tnavigationalPropertiesForId: propertiesWithLabel\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tError(\"Error fetching navigation properties:\" + error);\n\t\t}\n\t} else {\n\t\tupdatedUnitOfMeasures.push({\n\t\t\tpropertyKeyForDescription: value,\n\t\t\tname: formatterProperty,\n\t\t\tpropertyKeyForId: formatterProperty,\n\t\t\tvalue: value\n\t\t});\n\t}\n};\n/**\n * Creates or updates the card manifest for the card generator.\n * Fetches application details, constructs the entity context path, and generates the card manifest.\n *\n * @param {Component} appComponent - The root component of the application.\n * @param {CardManifest} cardManifest - The initial card manifest.\n * @param {JSONModel} dialogModel - The dialog model containing configuration data.\n * @returns {Promise<CardManifest>} - A promise that resolves to the created or updated card manifest.\n * @throws {Error} - Throws an error if no model is found in the view.\n */\nexport const createCardManifest = async function (\n\tappComponent: Component,\n\tcardManifest: CardManifest,\n\tdialogModel: JSONModel\n): Promise<CardManifest> {\n\tconst sapApp = appComponent.getManifestEntry(\"sap.app\");\n\tconst { title, description: cardSubtitle, id } = sapApp;\n\tconst oAppModel = appComponent.getModel();\n\n\tif (!oAppModel) {\n\t\tthrow new Error(\"No model found in the view\");\n\t}\n\n\tconst applicationInstance = Application.getInstance();\n\tconst sapCoreVersionInfo = await VersionInfo.load({\n\t\tlibrary: \"sap.ui.core\"\n\t});\n\tconst { serviceUrl, entitySet, entitySetWithObjectContext } = applicationInstance.fetchDetails();\n\tconst entitySetName = entitySet;\n\tconst integrationCardManifest =\n\t\tupdateExistingCardManifest(dialogModel.getProperty(\"/configuration/$data\"), cardManifest) ||\n\t\tcreateInitialManifest({\n\t\t\ttitle: title,\n\t\t\tsubTitle: cardSubtitle,\n\t\t\tservice: serviceUrl,\n\t\t\tserviceModel: oAppModel,\n\t\t\tsapAppId: id,\n\t\t\tsapCoreVersionInfo,\n\t\t\tentitySetName,\n\t\t\tentitySetWithObjectContext,\n\t\t\tdata: dialogModel.getProperty(\"/configuration/$data\")\n\t\t});\n\n\treturn integrationCardManifest;\n};\n\n/**\n * This function checkks if a given property is a navigational property in the model.\n * @param {string} propertyName - Name of the property to check.\n * @param {JSONModel} model - The JSON model containing the card configuration.\n * @returns {boolean} - Returns true if the property is a navigational property, otherwise false.\n */\nconst isNavigationalProperty = function (propertyName: string, model: JSONModel): boolean {\n\tconst navigationalProperties = model.getProperty(\"/configuration/navigationProperty\") ?? [];\n\tfor (const navigationalProperty of navigationalProperties) {\n\t\tif (navigationalProperty.name === propertyName) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * This function returns the list of properties that are present in the card preview.\n * @param {JSONModel} model - The JSON model containing the card configuration.\n * @returns {string[]} - Array of property names present in the card preview.\n */\nexport const getPreviewItems = function (model: JSONModel) {\n\tconst title = model.getProperty(\"/configuration/title\");\n\tconst subtitle = model.getProperty(\"/configuration/subtitle\");\n\tconst headerUOM = model.getProperty(\"/configuration/headerUOM\");\n\tconst properties = model.getProperty(\"/configuration/properties\") ?? [];\n\tconst mainIndicatorProperty = model.getProperty(\"/configuration/mainIndicatorStatusKey\");\n\tconst groups = model.getProperty(\"/configuration/groups\") || [];\n\tconst previewItems = groups.flatMap((group: { items: { name: string; isNavigationEnabled: boolean; navigationProperty: string }[] }) =>\n\t\tgroup.items.map((item) =>\n\t\t\titem.isNavigationEnabled && item.navigationProperty ? `${item.name}/${item.navigationProperty}` : item.name\n\t\t)\n\t);\n\tif (mainIndicatorProperty) {\n\t\tif (!mainIndicatorProperty.includes(\"/\") && isNavigationalProperty(mainIndicatorProperty, model)) {\n\t\t\tconst mainIndicatorNavigationSelectedKey = model.getProperty(\"/configuration/mainIndicatorNavigationSelectedKey\");\n\t\t\tpreviewItems.push(`${mainIndicatorProperty}/${mainIndicatorNavigationSelectedKey}`);\n\t\t} else {\n\t\t\tpreviewItems.push(mainIndicatorProperty);\n\t\t}\n\t}\n\t[title, subtitle, headerUOM].forEach((item) => {\n\t\tproperties.forEach((property: { labelWithValue: string; name: string }) => {\n\t\t\tif (property.labelWithValue === item) {\n\t\t\t\tpreviewItems.push(property.name);\n\t\t\t}\n\t\t});\n\t});\n\treturn previewItems;\n};\n"],"mappings":"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","ignoreList":[]}