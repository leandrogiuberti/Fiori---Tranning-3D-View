{"version":3,"file":"Transpiler.js","names":["sap","ui","define","sap_cards_ap_common_adaptiveCards_AdaptiveCardRenderer","sap_cards_ap_transpiler_cardTranspiler_Transpile","CoreElement","___pages_Application","___utils_CommonUtils","getAdaptiveCardForRendering","convertIntegrationCardToAdaptive","Application","checkForDateType","getFormattedDateValue","propertyValue","Date","isNaN","getTime","toISOString","date","transpileIntegrationCardToAdaptive","oDialogModel","oCard","getElementById","oManifest","getManifest","keyParameters","getProperty","appIntent","variantParameter","navigationURI","getInstance","fetchDetails","oAdaptiveCardManifest","adaptiveCardData","Object","assign","properties","forEach","property","isDate","name","formattedDateValue","iterateObject","$data","sHostConfig","getSelectedItem","getBindingContext","renderedCard","adaptiveCardPreview","document","querySelector","setTimeout","innerHTML","updateEmptyStrings","appendChild","nodeList","querySelectorAll","nodeArray","Array","from","node","textContent","includes","key","hasOwnProperty","processKey","value","__edmType","__exports","__esModule"],"sources":["Transpiler.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport { getAdaptiveCardForRendering } from \"sap/cards/ap/common/adaptiveCards/AdaptiveCardRenderer\";\nimport { convertIntegrationCardToAdaptive } from \"sap/cards/ap/transpiler/cardTranspiler/Transpile\";\nimport CoreElement from \"sap/ui/core/Element\";\nimport Card, { CardManifest } from \"sap/ui/integration/widgets/Card\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport { Application } from \"../pages/Application\";\nimport { checkForDateType } from \"../utils/CommonUtils\";\n\ntype AdaptiveCardData = {\n\t[key: string]: string | DateObject;\n};\n\ntype DateObject = {\n\t__edmType: string;\n\t[key: string]: unknown;\n};\n\nfunction getFormattedDateValue(propertyValue: string | Date | object) {\n\tif (typeof propertyValue === \"object\" && propertyValue instanceof Date && !isNaN(propertyValue.getTime())) {\n\t\treturn propertyValue.toISOString();\n\t} else if (typeof propertyValue === \"string\") {\n\t\tconst date = new Date(propertyValue);\n\t\treturn isNaN(date.getTime()) ? \"\" : date.toISOString();\n\t}\n}\n\n/**\n * Transpiles an Integration Card into an Adaptive Card.\n *\n * @param {JSONModel} oDialogModel - The Integration Card to transpile.\n * @returns {AdaptiveCard} The resulting Adaptive Card.\n * @throws {TranspilationError} If the Integration Card cannot be transpiled.\n */\nexport function transpileIntegrationCardToAdaptive(oDialogModel: JSONModel) {\n\tconst oCard = CoreElement.getElementById(\"cardGeneratorDialog--cardPreview\") as Card;\n\tconst oManifest = oCard.getManifest() as CardManifest;\n\tconst keyParameters = oDialogModel.getProperty(\"/configuration/keyParameters\") ?? [];\n\tlet appIntent = oDialogModel.getProperty(\"/configuration/appIntent\");\n\tconst { variantParameter, navigationURI } = Application.getInstance().fetchDetails();\n\tappIntent = variantParameter ? `${appIntent}?sap-appvar-id=${variantParameter}` : appIntent;\n\tconst oAdaptiveCardManifest = convertIntegrationCardToAdaptive(oManifest, appIntent, keyParameters, navigationURI);\n\tconst adaptiveCardData = Object.assign({}, oDialogModel.getProperty(\"/configuration/$data\"));\n\tconst properties = oDialogModel.getProperty(\"/configuration/properties\");\n\tproperties.forEach(function (property: { isDate: boolean; name: string }) {\n\t\tif (property?.isDate && adaptiveCardData[property.name]) {\n\t\t\tconst propertyValue = adaptiveCardData[property.name];\n\t\t\tconst formattedDateValue = getFormattedDateValue(propertyValue);\n\t\t\tadaptiveCardData[property.name] = formattedDateValue ? formattedDateValue : propertyValue;\n\t\t}\n\t});\n\n\titerateObject(adaptiveCardData);\n\n\toAdaptiveCardManifest.$data = adaptiveCardData;\n\tconst sHostConfig = (CoreElement.getElementById(\"cardGeneratorDialog--preview-select\") as any)\n\t\t.getSelectedItem()\n\t\t.getBindingContext(\"previewOptions\")\n\t\t.getProperty(\"hostConfig\");\n\n\tlet renderedCard: HTMLElement | undefined;\n\tif (sHostConfig) {\n\t\trenderedCard = getAdaptiveCardForRendering(sHostConfig, oAdaptiveCardManifest);\n\t}\n\tconst adaptiveCardPreview = document.querySelector(\"#adaptiveCardPreview\");\n\n\tif (adaptiveCardPreview && renderedCard) {\n\t\tsetTimeout(function () {\n\t\t\tadaptiveCardPreview.innerHTML = \"\";\n\t\t\tupdateEmptyStrings(renderedCard);\n\t\t\tadaptiveCardPreview.appendChild(renderedCard);\n\t\t});\n\t}\n}\n\n/**\n * Function to update &minus; strings in the rendered card textblock to '-'\n * as JS Engine will not understand &minus; and will not render it to '-'.\n *\n * @param renderedCard\n */\nfunction updateEmptyStrings(renderedCard: HTMLElement): void {\n\tconst nodeList = renderedCard.querySelectorAll(\".ac-textBlock\");\n\tconst nodeArray = Array.from(nodeList);\n\tnodeArray.forEach((node) => {\n\t\tif (node.textContent?.includes(\"&minus;\")) {\n\t\t\tnode.textContent = \"-\";\n\t\t}\n\t});\n}\n\n/**\n * Iterates over the properties of the given adaptive card data object and processes each key.\n *\n * @param {AdaptiveCardData} adaptiveCardData - The adaptive card data object to iterate over.\n * @returns {void}\n */\nfunction iterateObject(adaptiveCardData: AdaptiveCardData): void {\n\tfor (const key in adaptiveCardData) {\n\t\tif (adaptiveCardData.hasOwnProperty(key)) {\n\t\t\tprocessKey(adaptiveCardData, key);\n\t\t}\n\t}\n}\n\n/**\n * Processes a key in the adaptive card data object. If the value associated with the key is an object\n * and has a valid EDM type, it converts the value to an ISO string if possible. It also recursively\n * iterates over the object if the value is an object.\n *\n * @param {AdaptiveCardData} adaptiveCardData - The adaptive card data object containing the key to process.\n * @param {string} key - The key in the adaptive card data object to process.\n */\nfunction processKey(adaptiveCardData: AdaptiveCardData, key: string): void {\n\tconst value = adaptiveCardData[key];\n\tif (typeof value === \"object\" && value !== null) {\n\t\tif (checkForDateType(value?.__edmType)) {\n\t\t\tconst formattedDateValue = getFormattedDateValue(value);\n\t\t\tadaptiveCardData[key] = formattedDateValue ? formattedDateValue : value;\n\t\t}\n\t\titerateObject(value as AdaptiveCardData);\n\t}\n}\n"],"mappings":";;;;AAAA,aAAAA,IAAAC,GAAAC,OAAA,2LAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,mBAISC,EAA2BL,EAAA,qCAC3BM,EAAgCL,EAAA,0CAIhCM,EAAWJ,EAAA,qBACXK,EAAgBJ,EAAA,oBAWzB,SAASK,EAAsBC,GAC9B,UAAWA,IAAkB,UAAYA,aAAyBC,OAASC,MAAMF,EAAcG,WAAY,CAC1G,OAAOH,EAAcI,aACtB,MAAO,UAAWJ,IAAkB,SAAU,CAC7C,MAAMK,EAAO,IAAIJ,KAAKD,GACtB,OAAOE,MAAMG,EAAKF,WAAa,GAAKE,EAAKD,aAC1C,CACD,CASO,SAASE,EAAmCC,GAClD,MAAMC,EAAQhB,EAAYiB,eAAe,oCACzC,MAAMC,EAAYF,EAAMG,cACxB,MAAMC,EAAgBL,EAAaM,YAAY,iCAAmC,GAClF,IAAIC,EAAYP,EAAaM,YAAY,4BACzC,MAAME,iBAAEA,EAAgBC,cAAEA,GAAkBnB,EAAYoB,cAAcC,eACtEJ,EAAYC,EAAmB,GAAGD,mBAA2BC,IAAqBD,EAClF,MAAMK,EAAwBvB,EAAiCc,EAAWI,EAAWF,EAAeI,GACpG,MAAMI,EAAmBC,OAAOC,OAAO,CAAC,EAAGf,EAAaM,YAAY,yBACpE,MAAMU,EAAahB,EAAaM,YAAY,6BAC5CU,EAAWC,QAAQ,SAAUC,GAC5B,GAAIA,GAAUC,QAAUN,EAAiBK,EAASE,MAAO,CACxD,MAAM3B,EAAgBoB,EAAiBK,EAASE,MAChD,MAAMC,EAAqB7B,EAAsBC,GACjDoB,EAAiBK,EAASE,MAAQC,EAAqBA,EAAqB5B,CAC7E,CACD,GAEA6B,EAAcT,GAEdD,EAAsBW,MAAQV,EAC9B,MAAMW,EAAevC,EAAYiB,eAAe,uCAC9CuB,kBACAC,kBAAkB,kBAClBpB,YAAY,cAEd,IAAIqB,EACJ,GAAIH,EAAa,CAChBG,EAAevC,EAA4BoC,EAAaZ,EACzD,CACA,MAAMgB,EAAsBC,SAASC,cAAc,wBAEnD,GAAIF,GAAuBD,EAAc,CACxCI,WAAW,WACVH,EAAoBI,UAAY,GAChCC,EAAmBN,GACnBC,EAAoBM,YAAYP,EACjC,EACD,CACD,CAQA,SAASM,EAAmBN,GAC3B,MAAMQ,EAAWR,EAAaS,iBAAiB,iBAC/C,MAAMC,EAAYC,MAAMC,KAAKJ,GAC7BE,EAAUpB,QAASuB,IAClB,GAAIA,EAAKC,aAAaC,SAAS,WAAY,CAC1CF,EAAKC,YAAc,GACpB,GAEF,CAQA,SAASnB,EAAcT,GACtB,IAAK,MAAM8B,KAAO9B,EAAkB,CACnC,GAAIA,EAAiB+B,eAAeD,GAAM,CACzCE,EAAWhC,EAAkB8B,EAC9B,CACD,CACD,CAUA,SAASE,EAAWhC,EAAoC8B,GACvD,MAAMG,EAAQjC,EAAiB8B,GAC/B,UAAWG,IAAU,UAAYA,IAAU,KAAM,CAChD,GAAIvD,EAAiBuD,GAAOC,WAAY,CACvC,MAAM1B,EAAqB7B,EAAsBsD,GACjDjC,EAAiB8B,GAAOtB,EAAqBA,EAAqByB,CACnE,CACAxB,EAAcwB,EACf,CACD,CAAC,IAAAE,EAAA,CAAAC,WAAA,MAAAD,EAAAjD,qCAAA,OAAAiD,CAAA","ignoreList":[]}