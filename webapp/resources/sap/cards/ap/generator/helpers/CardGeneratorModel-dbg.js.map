{"version":3,"file":"CardGeneratorModel-dbg.js","names":["sap","ui","define","sap_cards_ap_common_services_RetrieveCard","CoreLib","sap_ui_core_library","JSONModel","___helpers_Batch","___odata_ODataUtils","___pages_Application","___FooterActions","___Formatter","___IntegrationCardHelper","___NavigationProperty","_iteratorSymbol","Symbol","iterator","_settle","pact","state","value","s","_Pact","v","o","bind","then","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","_isSettledPact","thenable","_forTo","array","body","check","i","reject","_cycle","length","getAdvancedFormattingOptions","unitOfMeasures","propertyValueFormatters","parsedManifest","path","formatterConfigsWithUnit","formatterConfigurationFromCardManifest","filter","formatterConfig","formatterName","mainIndicatorOptions","mainIndicatorCriticalityOptions","criticalityOptions","Promise","resolve","updateCriticalityForNavProperty","_updateCriticalityFor","_temp12","_getUpdatedUnitOfMeas","textArrangements","textArrangementsFromCardManifest","sourceCriticalityProperty","targetFormatterProperty","sourceUoMProperty","mainIndicatorStatusKey","selectedKeyCriticality","textArrangementSourceProperty","criticality","_temp11","getUpdatedUnitOfMeasures","_forOf","target","step","next","done","return","_fixup","TypeError","values","push","processParsedManifest","navigationProperty","mData","mCardManifest","_temp10","groups","group","_temp0","items","item","getNavigationPropertyInfoGroups","navigationPropertyInfoGroups","navigationEntitySet","navigationPropertyData","undefined","_temp1","textArrangement","getNavigationPropertyInfo","navigationPropInfo","navProperty","getKeyParameters","ValueState","createURLParams","createPathWithEntityContext","fetchDataAsync","getLabelForEntitySet","getNavigationPropertyInfoFromEntity","getPropertyInfoFromEntity","Application","ODataModelVersion","getCardActionInfo","formatPropertyDropdownValues","getDefaultPropertyFormatterConfig","getDefaultPropertyFormatterConfigForNavProperties","parseCard","getNavigationPropertiesWithLabel","updateNavigationPropertiesWithLabel","UnitCollection","Name","Value","_mergePropertyFormatters","defaultPropertyFormatters","userProvidedPropertyFormatters","mergedFormatters","propertyFormatter","find","formatter","property","getCardGeneratorDialogModel","appComponent","applicationInstance","getInstance","applicationDetails","fetchDetails","resourceBundle","getResourceBundleFor","sapApp","getManifestEntry","appModel","getModel","cardTitle","title","cardSubtitle","description","entitySetWithObjectContext","serviceUrl","semanticObject","action","odataModel","entitySetName","entitySet","bODataV4","V4","properties","propertiesWithNavigation","urlParameters","data","_temp9","addLabelsForProperties","parseManifestMainIndicatorOptions","trends","trendOptions","sideIndicators","sideIndicatorOptions","mainIndicatorNavigationSelectedKey","selectedNavigationalProperties","propertiesWithLabel","selectedNavigationPropertyHeader","name","mainIndicatorNavigationSelectedValue","getMainIndicatorSelectedNavigationProperty","advancedFormattingOptions","mainIndicatorStatusUnit","getMainIndicatorStatusUnit","_temp7","_temp6","getText","label","isEnabled","isNavigationEnabled","_temp5","navigationValue","_temp4","_criticality","_temp3","headerUOM","_temp2","subtitle","_temp","_getCardActionInfo","_getKeyParameters","dialogModelData","configuration","indicatorsValue","selectedTrendOptions","selectedIndicatorOptions","selectedContentNavigation","selectedHeaderNavigation","oDataV4","$data","targetUnit","deviationUnit","errorControls","actions","groupLimitReached","keyParameters","appIntent","isEdited","attachPropertyChange","getPropertyFormatters","_temp8","unitOfMeasuresMap","Map","map","uom","forEach","propertyName","propertyValue","propertyUOM","UOM","labelWithValue","has","propertyKeyForDescription","propertyKeyForId","valueState","None","valueStateText","category","propertyValueFormattersForNavigationalProperties","__exports","__esModule"],"sources":["CardGeneratorModel.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport type ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { getKeyParameters } from \"sap/cards/ap/common/services/RetrieveCard\";\nimport type Component from \"sap/ui/core/Component\";\nimport CoreLib from \"sap/ui/core/Lib\";\nimport { ValueState } from \"sap/ui/core/library\";\nimport type { CardManifest } from \"sap/ui/integration/widgets/Card\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type V2ODataModel from \"sap/ui/model/odata/v2/ODataModel\";\nimport type V4ODataModel from \"sap/ui/model/odata/v4/ODataModel\";\nimport type ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport type { ArrangementOptions } from \"../app/controls/ArrangementsEditor\";\nimport { createURLParams } from \"../helpers/Batch\";\nimport { PropertyInfoMap } from \"../odata/ODataTypes\";\nimport {\n\tcreatePathWithEntityContext,\n\tfetchDataAsync,\n\tgetLabelForEntitySet,\n\tgetNavigationPropertyInfoFromEntity,\n\tgetPropertyInfoFromEntity\n} from \"../odata/ODataUtils\";\nimport { Application, ODataModelVersion } from \"../pages/Application\";\nimport { ActionStyles, AnnotationAction, ControlProperties } from \"../types/ActionTypes\";\nimport type { NavigationParameter, NavigationProperty, ObjectCardGroups, UnitOfMeasures } from \"../types/PropertyTypes\";\nimport { getCardActionInfo } from \"./FooterActions\";\nimport {\n\tFormatterConfigurationMap,\n\tformatPropertyDropdownValues,\n\tgetDefaultPropertyFormatterConfig,\n\tgetDefaultPropertyFormatterConfigForNavProperties\n} from \"./Formatter\";\nimport {\n\tgetUpdatedUnitOfMeasures,\n\tparseCard,\n\tupdateCriticalityForNavProperty,\n\ttype CriticalityOptionsPanel,\n\ttype ParsedManifest\n} from \"./IntegrationCardHelper\";\nimport {\n\tgetNavigationPropertiesWithLabel,\n\tgetNavigationPropertyInfo,\n\tgetNavigationPropertyInfoGroups,\n\tupdateNavigationPropertiesWithLabel\n} from \"./NavigationProperty\";\n\nexport type EntityType = {\n\t[key: string]: any;\n};\n\nexport type CriticalityOptions = {\n\tactiveCalculation: boolean;\n\tname: string;\n\tcriticality: string;\n\tnavigationKeyForId?: string;\n\tnavigationKeyForDescription?: string;\n\tnavigationProperty?: string;\n\tisNavigationForDescription?: boolean;\n\tisNavigationForId?: boolean;\n\tpropertyKeyForId?: string;\n\tnavigationalPropertiesForId?: Array<object>;\n};\n\nexport type MainIndicatorOptions = {\n\tcriticality: Array<CriticalityOptions>;\n};\n\ntype AdvancedFormattingOptions = {\n\tunitOfMeasures: Array<UnitOfMeasures>;\n\ttextArrangements: Array<ArrangementOptions>;\n\tpropertyValueFormatters: Array<object>;\n\tsourceCriticalityProperty: Array<object>;\n\ttargetFormatterProperty: string;\n\tsourceUoMProperty: string;\n\tselectedKeyCriticality: string;\n\ttextArrangementSourceProperty: string;\n};\n\nexport type TrendOptions = {\n\treferenceValue: string;\n\tdownDifference: string;\n\tupDifference: string;\n\ttargetValue?: string;\n\tsourceProperty?: string;\n};\nexport type SideIndicatorOptions = {\n\ttargetValue: string;\n\ttargetUnit: string;\n\tdeviationValue: string;\n\tdeviationUnit: string;\n\tsourceProperty?: string;\n};\n\ntype CardActions = {\n\tannotationActions: Array<AnnotationAction>;\n\taddedActions: ControlProperties[];\n\tbODataV4: boolean;\n\tstyles: ActionStyles[];\n\tisAddActionEnabled: boolean;\n\tactionExists: boolean;\n};\n\ntype PropertyValue = string | null | undefined;\n\nexport type TrendOrIndicatorOptions = {\n\tsourceProperty: string;\n};\n\ntype KeyParameter = {\n\tkey: string;\n\tformattedValue: string;\n};\n\n/**\n * Description for the interface CardGeneratorDialogConfiguration\n * @interface CardGeneratorDialogConfiguration\n * @property {string} title The title of the card\n * @property {string} subtitle The subtitle of the card\n * @property {string} headerUOM The header unit of measure\n * @property {MainIndicatorOptions} mainIndicatorOptions The main indicator options\n * @property {string} mainIndicatorStatusKey The main indicator status key\n * @property {string} navigationValue The navigation value\n * @property {string} mainIndicatorStatusUnit The main indicator status unit\n * @property {NavigationProperty[]} selectedNavigationalProperties The selected navigational properties\n * @property {string} mainIndicatorNavigationSelectedValue The main indicator navigation selected value\n * @property {string} mainIndicatorNavigationSelectedKey The main indicator navigation selected key\n * @property {string} entitySet The entity set\n * @property {PropertyInfoMap} propertiesWithNavigation The properties with navigation\n * @property {Array<ObjectCardGroups>} groups The groups of the card displayed on content\n * @property {Array<object>} properties The properties\n * @property {AdvancedFormattingOptions} advancedFormattingOptions The advanced formatting options\n * @property {Array<object>} selectedTrendOptions The selected trend options\n * @property {Array<object>} selectedIndicatorOptions The selected indicator options\n * @property {Array<object>} navigationProperty The navigation property\n * @property {Array<NavigationParameter>} selectedContentNavigation The selected content navigation\n * @property {Array<NavigationParameter>} selectedHeaderNavigation The selected header navigation\n * @property {NavigationProperty} selectedNavigationPropertyHeader The selected navigation property header\n * @property {TrendOptions} trendOptions The trend options\n * @property {SideIndicatorOptions} indicatorsValue The indicators value\n * @property {boolean} oDataV4 Flag to check if the OData version is V4\n * @property {string} serviceUrl The service URL\n * @property {object} $data Data used for adaptive card preview\n * @property {object} targetUnit The target unit\n * @property {object} deviationUnit The deviation unit\n * @property {Array<object>} errorControls The error controls\n * @property {CardActions} actions The card actions\n * @property {boolean} groupLimitReached Flag maintained to check if the group limit is reached\n * @property {Array<KeyParameter>} keyParameters The key parameters\n * @property {string} appIntent The app intent\n */\ninterface CardGeneratorDialogConfiguration {\n\ttitle: string;\n\tsubtitle?: string;\n\theaderUOM?: string;\n\tmainIndicatorOptions?: MainIndicatorOptions;\n\tmainIndicatorStatusKey?: string;\n\tnavigationValue: string;\n\tmainIndicatorStatusUnit?: string;\n\tselectedNavigationalProperties: NavigationProperty[];\n\tmainIndicatorNavigationSelectedValue?: string;\n\tmainIndicatorNavigationSelectedKey?: string;\n\tentitySet: string;\n\tpropertiesWithNavigation: PropertyInfoMap;\n\tgroups: Array<ObjectCardGroups>;\n\tproperties: Array<object>;\n\tadvancedFormattingOptions: AdvancedFormattingOptions;\n\tselectedTrendOptions: Array<TrendOptions>;\n\tselectedIndicatorOptions: Array<SideIndicatorOptions>;\n\tnavigationProperty: Array<object>;\n\tselectedContentNavigation: Array<NavigationParameter>;\n\tselectedHeaderNavigation: Array<NavigationParameter>;\n\tselectedNavigationPropertyHeader: NavigationProperty;\n\ttrendOptions: TrendOptions;\n\tindicatorsValue?: SideIndicatorOptions;\n\toDataV4: boolean;\n\tserviceUrl: string;\n\t$data?: object;\n\ttargetUnit?: object;\n\tdeviationUnit?: object;\n\terrorControls: Array<object>;\n\tactions: CardActions;\n\tgroupLimitReached: boolean;\n\tkeyParameters: Array<KeyParameter>;\n\tappIntent: string;\n\tisEdited?: boolean;\n}\n\ninterface CardGeneratorDialog {\n\ttitle: string;\n\tconfiguration: CardGeneratorDialogConfiguration;\n}\n\nconst UnitCollection = [\n\t{\n\t\tName: \"K\",\n\t\tValue: \"K\"\n\t},\n\t{\n\t\tName: \"%\",\n\t\tValue: \"%\"\n\t}\n];\n\n/**\n * Merges the default property formatters with the user provided property formatters\n *\n * @param {FormatterConfigurationMap} defaultPropertyFormatters The default property formatters\n * @param {FormatterConfigurationMap} userProvidedPropertyFormatters The user provided property formatters\n * @returns {FormatterConfigurationMap} The merged property formatters\n * @private\n *\n */\nexport function _mergePropertyFormatters(\n\tdefaultPropertyFormatters: FormatterConfigurationMap = [],\n\tuserProvidedPropertyFormatters: FormatterConfigurationMap = []\n): FormatterConfigurationMap {\n\tconst mergedFormatters = [...userProvidedPropertyFormatters] as FormatterConfigurationMap;\n\n\tfor (const propertyFormatter of defaultPropertyFormatters) {\n\t\tif (!mergedFormatters.find((formatter) => formatter.property === propertyFormatter.property)) {\n\t\t\tmergedFormatters.push({ ...propertyFormatter });\n\t\t}\n\t}\n\n\treturn mergedFormatters;\n}\n\n/**\n * Generates the card generator dialog model.\n *\n * @param {Component} appComponent - The root component of the application.\n * @param {CardManifest} [mCardManifest] - The card manifest object (optional).\n * @returns {Promise<JSONModel>} A promise that resolves to the card generator dialog model.\n */\nexport const getCardGeneratorDialogModel = async (appComponent: Component, mCardManifest?: CardManifest) => {\n\tconst applicationInstance = Application.getInstance();\n\tconst applicationDetails = applicationInstance.fetchDetails();\n\tconst resourceBundle = CoreLib.getResourceBundleFor(\"sap.cards.ap.generator.i18n\");\n\tconst sapApp = appComponent.getManifestEntry(\"sap.app\");\n\tconst appModel = appComponent.getModel();\n\tconst cardTitle = sapApp.title;\n\tconst cardSubtitle = sapApp.description;\n\tconst { entitySetWithObjectContext, serviceUrl, semanticObject, action, odataModel } = applicationDetails;\n\tconst entitySetName = applicationDetails.entitySet;\n\tconst bODataV4 = odataModel === ODataModelVersion.V4;\n\tconst entitySet = getLabelForEntitySet(bODataV4 ? (appModel as V4ODataModel) : (appModel as V2ODataModel), entitySetName);\n\tconst properties = getPropertyInfoFromEntity(bODataV4 ? (appModel as V4ODataModel) : (appModel as V2ODataModel), entitySetName, false);\n\tconst propertiesWithNavigation = getPropertyInfoFromEntity(\n\t\tbODataV4 ? (appModel as V4ODataModel) : (appModel as V2ODataModel),\n\t\tentitySetName,\n\t\ttrue,\n\t\tresourceBundle\n\t);\n\tconst navigationProperty = getNavigationPropertyInfoFromEntity(\n\t\tbODataV4 ? (appModel as V4ODataModel) : (appModel as V2ODataModel),\n\t\tentitySetName\n\t);\n\n\tconst urlParameters = createURLParams(properties);\n\n\tconst path = await createPathWithEntityContext(\n\t\tentitySetWithObjectContext,\n\t\tbODataV4 ? (appModel as V4ODataModel) : (appModel as V2ODataModel),\n\t\tbODataV4\n\t);\n\tconst data = await fetchDataAsync(serviceUrl, path, bODataV4, urlParameters);\n\tconst unitOfMeasures: Array<UnitOfMeasures> = [];\n\tconst mData: Record<string, PropertyValue> = {};\n\t// We are adding labels and values for properties\n\taddLabelsForProperties(properties, data, mData, unitOfMeasures);\n\n\tlet propertyValueFormatters = getPropertyFormatters(resourceBundle, properties, navigationProperty);\n\n\tlet parsedManifest;\n\n\tif (mCardManifest) {\n\t\tparsedManifest = parseCard(mCardManifest, appComponent.getModel(\"i18n\") as ResourceModel, properties);\n\t\tawait processParsedManifest(parsedManifest, navigationProperty, path, mData, mCardManifest);\n\t}\n\n\tpropertyValueFormatters = _mergePropertyFormatters(propertyValueFormatters, parsedManifest?.formatterConfigurationFromCardManifest);\n\taddLabelsForProperties(propertiesWithNavigation, data, mData, unitOfMeasures);\n\n\tconst parseManifestMainIndicatorOptions = parsedManifest?.mainIndicatorOptions;\n\tconst mainIndicatorStatusKey = parseManifestMainIndicatorOptions?.mainIndicatorStatusKey || \"\";\n\tconst trends = parseManifestMainIndicatorOptions?.trendOptions;\n\tconst sideIndicators = parsedManifest?.sideIndicatorOptions;\n\tconst mainIndicatorNavigationSelectedKey = parseManifestMainIndicatorOptions?.mainIndicatorNavigationSelectedKey || \"\";\n\tconst selectedNavigationalProperties = [];\n\tconst { propertiesWithLabel, navigationPropertyData } = await getNavigationPropertiesWithLabel(\n\t\tappComponent,\n\t\tmainIndicatorStatusKey,\n\t\tpath\n\t);\n\tconst selectedNavigationPropertyHeader = {\n\t\tname: mainIndicatorStatusKey,\n\t\tvalue: propertiesWithLabel\n\t};\n\n\tif (selectedNavigationPropertyHeader?.value) {\n\t\tupdateNavigationPropertiesWithLabel(navigationProperty, mainIndicatorStatusKey, selectedNavigationPropertyHeader.value);\n\t}\n\n\tif (mainIndicatorStatusKey.length > 0 && (mData[mainIndicatorStatusKey] === null || mData[mainIndicatorStatusKey] === undefined)) {\n\t\tmData[mainIndicatorStatusKey] = navigationPropertyData[mainIndicatorStatusKey];\n\t}\n\n\tif (selectedNavigationPropertyHeader.name) {\n\t\tselectedNavigationalProperties.push(selectedNavigationPropertyHeader);\n\t}\n\n\tconst mainIndicatorNavigationSelectedValue = getMainIndicatorSelectedNavigationProperty(\n\t\tselectedNavigationPropertyHeader,\n\t\tmainIndicatorNavigationSelectedKey\n\t);\n\tconst advancedFormattingOptions = await getAdvancedFormattingOptions(unitOfMeasures, propertyValueFormatters, parsedManifest, path);\n\tconst mainIndicatorStatusUnit = getMainIndicatorStatusUnit(mainIndicatorStatusKey, propertiesWithNavigation);\n\tconst dialogModelData: CardGeneratorDialog = {\n\t\ttitle: `${entitySet}`,\n\t\tconfiguration: {\n\t\t\ttitle: parsedManifest?.title || cardTitle,\n\t\t\tsubtitle: parsedManifest?.subtitle || cardSubtitle,\n\t\t\theaderUOM: parsedManifest?.headerUOM || \"\",\n\t\t\tmainIndicatorOptions: {\n\t\t\t\tcriticality: (parseManifestMainIndicatorOptions?.criticalityOptions || []) as CriticalityOptions[]\n\t\t\t},\n\t\t\tadvancedFormattingOptions: advancedFormattingOptions,\n\t\t\ttrendOptions: trends as TrendOptions,\n\t\t\tindicatorsValue: sideIndicators,\n\t\t\tselectedTrendOptions: trends ? [trends] : [],\n\t\t\tselectedIndicatorOptions: sideIndicators ? [sideIndicators] : [],\n\t\t\tselectedNavigationPropertyHeader,\n\t\t\tselectedContentNavigation: [],\n\t\t\tselectedHeaderNavigation: [],\n\t\t\tnavigationProperty,\n\t\t\tmainIndicatorNavigationSelectedValue,\n\t\t\tmainIndicatorStatusKey,\n\t\t\tnavigationValue: parseManifestMainIndicatorOptions?.navigationValue || \"\",\n\t\t\tmainIndicatorNavigationSelectedKey,\n\t\t\tmainIndicatorStatusUnit,\n\t\t\tselectedNavigationalProperties,\n\t\t\tentitySet: entitySetName,\n\t\t\toDataV4: bODataV4,\n\t\t\tserviceUrl: serviceUrl,\n\t\t\tproperties: properties,\n\t\t\tpropertiesWithNavigation: propertiesWithNavigation,\n\t\t\tgroups: (parsedManifest?.groups as ObjectCardGroups[]) || [\n\t\t\t\t{\n\t\t\t\t\ttitle: resourceBundle?.getText(\"GENERATOR_DEFAULT_GROUP_NAME\", [1]),\n\t\t\t\t\titems: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: \"\",\n\t\t\t\t\t\t\tvalue: \"\",\n\t\t\t\t\t\t\tisEnabled: false,\n\t\t\t\t\t\t\tname: \"\",\n\t\t\t\t\t\t\tnavigationProperty: \"\",\n\t\t\t\t\t\t\tisNavigationEnabled: false\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\t$data: mData,\n\t\t\ttargetUnit: UnitCollection,\n\t\t\tdeviationUnit: UnitCollection,\n\t\t\terrorControls: [],\n\t\t\tactions: await getCardActionInfo(mData, appComponent.getModel(\"i18n\") as ResourceModel, mCardManifest),\n\t\t\tgroupLimitReached: false,\n\t\t\tkeyParameters: await getKeyParameters(appComponent),\n\t\t\tappIntent: `${semanticObject}-${action}`,\n\t\t\tisEdited: false\n\t\t}\n\t};\n\n\treturn new JSONModel(dialogModelData).attachPropertyChange(function () {\n\t\tdialogModelData.configuration.isEdited = true;\n\t});\n};\n\n/**\n * Adds labels for properties and updates the unit of measures array.\n *\n * @param {PropertyInfoMap} properties - The map of properties to be updated with labels.\n * @param {Record<string, unknown>} data - The data record containing property values.\n * @param {Record<string, PropertyValue>} mData - The map to store updated property values.\n * @param {Array<object>} unitOfMeasures - The array of unit of measures to be updated.\n */\nexport function addLabelsForProperties(\n\tproperties: PropertyInfoMap,\n\tdata: Record<string, unknown>,\n\tmData: {\n\t\t[key: string]: PropertyValue;\n\t},\n\tunitOfMeasures: Array<object>\n) {\n\tconst unitOfMeasuresMap = new Map((unitOfMeasures as UnitOfMeasures[]).map((uom) => [uom.name, uom]));\n\n\tproperties.forEach((property) => {\n\t\tconst propertyName = property.name;\n\t\tconst propertyValue = data[propertyName];\n\t\tconst propertyUOM = property.UOM;\n\n\t\tif (propertyName && propertyValue !== undefined && propertyValue !== null) {\n\t\t\tconst value = formatPropertyDropdownValues(property, propertyValue as string);\n\t\t\tproperty.value = propertyValue as string;\n\t\t\tproperty.labelWithValue = value;\n\n\t\t\tif (propertyUOM && !unitOfMeasuresMap.has(propertyName)) {\n\t\t\t\tunitOfMeasures.push({\n\t\t\t\t\tpropertyKeyForDescription: propertyUOM,\n\t\t\t\t\tname: propertyName,\n\t\t\t\t\tpropertyKeyForId: propertyName,\n\t\t\t\t\tvalue: propertyUOM,\n\t\t\t\t\tvalueState: ValueState.None,\n\t\t\t\t\tvalueStateText: \"\"\n\t\t\t\t});\n\t\t\t}\n\t\t\tmData[propertyName] = propertyValue as string;\n\t\t} else {\n\t\t\tproperty.labelWithValue = property.category ? `${property.label}` : `${property.label} (<empty>)`;\n\t\t}\n\t});\n}\n\n/**\n * Gets the property formatters for the card generator dialog.\n * The property formatters are merged from the default property formatters and the navigational property formatters.\n *\n * @param {ResourceBundle} resourceBundle The resource bundle\n * @param {PropertyInfoMap} properties The properties\n * @param {NavigationParameter} navigationProperty The navigation property\n * @returns\n */\nfunction getPropertyFormatters(resourceBundle: ResourceBundle, properties: PropertyInfoMap, navigationProperty: NavigationParameter[]) {\n\tconst propertyValueFormatters = getDefaultPropertyFormatterConfig(resourceBundle, properties);\n\tconst propertyValueFormattersForNavigationalProperties = getDefaultPropertyFormatterConfigForNavProperties(\n\t\tresourceBundle,\n\t\tnavigationProperty as unknown as PropertyInfoMap\n\t);\n\treturn _mergePropertyFormatters(propertyValueFormatters, propertyValueFormattersForNavigationalProperties);\n}\n\n/**\n *\n * Process the parsed manifest to get the navigation property information.\n *\n * @param {ParsedManifest} parsedManifest The parsed card manifest\n * @param {NavigationParameter} navigationProperty\n * @param {string} path\n * @param {Record<string, PropertyValue>} mData\n * @param {CardManifest} mCardManifest\n */\nasync function processParsedManifest(\n\tparsedManifest: ParsedManifest,\n\tnavigationProperty: NavigationParameter[],\n\tpath: string,\n\tmData: Record<string, PropertyValue>,\n\tmCardManifest: CardManifest\n) {\n\tfor (const textArrangement of parsedManifest.textArrangementsFromCardManifest) {\n\t\tconst navigationPropInfo = await getNavigationPropertyInfo(textArrangement, navigationProperty, path);\n\n\t\tif (navigationPropInfo) {\n\t\t\tfor (const navProperty of navigationPropInfo) {\n\t\t\t\tconst { navigationEntitySet, navigationPropertyData } = navProperty;\n\t\t\t\tif (mData[navigationEntitySet] === null || mData[navigationEntitySet] === undefined) {\n\t\t\t\t\tmData[navigationEntitySet] = navigationPropertyData[navigationEntitySet];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const group of parsedManifest.groups) {\n\t\tfor (const item of (group as ObjectCardGroups).items) {\n\t\t\tconst navigationPropertyInfoGroups = await getNavigationPropertyInfoGroups(item, navigationProperty, path, mCardManifest);\n\n\t\t\tif (navigationPropertyInfoGroups) {\n\t\t\t\tconst { navigationEntitySet, navigationPropertyData } = navigationPropertyInfoGroups;\n\t\t\t\tif (mData[navigationEntitySet] === null || mData[navigationEntitySet] === undefined) {\n\t\t\t\t\tmData[navigationEntitySet] = navigationPropertyData[navigationEntitySet];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Retrieves the advanced formatting options for the card generator.\n *\n * @param {UnitOfMeasures[]} unitOfMeasures - The array of unit of measures.\n * @param {FormatterConfigurationMap} propertyValueFormatters - The map of property value formatters.\n * @param {ParsedManifest} [parsedManifest] - The parsed manifest object (optional).\n * @returns {Promise<AdvancedFormattingOptions>} A promise that resolves to the advanced formatting options.\n */\nasync function getAdvancedFormattingOptions(\n\tunitOfMeasures: UnitOfMeasures[],\n\tpropertyValueFormatters: FormatterConfigurationMap,\n\tparsedManifest?: ParsedManifest,\n\tpath: string = \"\"\n): Promise<AdvancedFormattingOptions> {\n\tconst formatterConfigsWithUnit =\n\t\tparsedManifest?.formatterConfigurationFromCardManifest.filter(\n\t\t\t(formatterConfig) => formatterConfig.formatterName === \"format.unit\"\n\t\t) || [];\n\tconst mainIndicatorOptions = parsedManifest?.mainIndicatorOptions;\n\tlet mainIndicatorCriticalityOptions = (mainIndicatorOptions?.criticalityOptions || []) as CriticalityOptionsPanel;\n\tmainIndicatorCriticalityOptions = await updateCriticalityForNavProperty(mainIndicatorCriticalityOptions, path);\n\tconst selectedKeyCriticality = mainIndicatorCriticalityOptions.length ? mainIndicatorCriticalityOptions[0]?.criticality : \"\";\n\tconst mainIndicatorStatusKey = mainIndicatorOptions?.mainIndicatorStatusKey || \"\";\n\treturn {\n\t\tunitOfMeasures:\n\t\t\tformatterConfigsWithUnit.length > 0\n\t\t\t\t? await getUpdatedUnitOfMeasures(unitOfMeasures, formatterConfigsWithUnit, path)\n\t\t\t\t: unitOfMeasures,\n\t\ttextArrangements: parsedManifest?.textArrangementsFromCardManifest || [],\n\t\tpropertyValueFormatters: propertyValueFormatters,\n\t\tsourceCriticalityProperty: [],\n\t\ttargetFormatterProperty: \"\",\n\t\tsourceUoMProperty: mainIndicatorStatusKey,\n\t\tselectedKeyCriticality: selectedKeyCriticality,\n\t\ttextArrangementSourceProperty: mainIndicatorStatusKey\n\t};\n}\n\n/**\n * Retrieves the label with value for the main indicator's selected navigation property.\n *\n *\n * @param {Record<string, any>} selectedNavigationPropertyHeader - The selected navigation property header containing the properties.\n * @param {string} mainIndicatorNavigationSelectedKey - The key of the main indicator's selected navigation property.\n * @returns {string} The label with value of the selected navigation property, or an empty string if not found.\n */\nfunction getMainIndicatorSelectedNavigationProperty(\n\tselectedNavigationPropertyHeader: Record<string, any>,\n\tmainIndicatorNavigationSelectedKey: string\n): string {\n\treturn (\n\t\tselectedNavigationPropertyHeader.value.find(\n\t\t\t(value: { name: string; labelWithValue: string }) => value.name === mainIndicatorNavigationSelectedKey\n\t\t)?.labelWithValue || \"\"\n\t);\n}\n\n/**\n * Retrieves the label with value for the main indicator's status unit.\n *\n * @param {string} mainIndicatorStatusKey - The key of the main indicator's status property.\n * @param {PropertyInfoMap} propertiesWithNavigation - The map of properties with navigation.\n * @returns {string} The label with value of the main indicator's status unit, or an empty string if not found.\n */\nfunction getMainIndicatorStatusUnit(mainIndicatorStatusKey: string, propertiesWithNavigation: PropertyInfoMap): string {\n\treturn (\n\t\t(mainIndicatorStatusKey && propertiesWithNavigation.find((property) => property.name === mainIndicatorStatusKey)?.labelWithValue) ||\n\t\t\"\"\n\t);\n}\n"],"mappings":"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","ignoreList":[]}