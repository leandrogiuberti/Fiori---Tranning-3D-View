{"version":3,"file":"Formatter-dbg.js","names":["sap","ui","define","sap_ui_integration_formatters_DateTimeFormatter","___utils_CommonUtils","___I18nHelper","date","dateTime","checkForDateType","getYesAndNoTextValues","formatPropertyDropdownValues","property","value","type","yesText","noText","UTC","length","label","processProperties","properties","formatterOptions","forEach","selected","name","parseFloat","selectedKey","processParameters","parameters","formatterArguments","push","parameterValue","formatArguments","content","i","formatter","bindingOrFormatterArray","hasBindingOrFormatter","some","item","startsWith","concat","createFormatterExpression","formatterConfig","formatterName","mParameters","JSON","stringify","getDefaultPropertyFormatterConfig","i18nModel","dateFormatterConfig","isPropertyTypeDate","configData","getDateFormatterConfiguration","getDefaultPropertyFormatterConfigForNavProperties","navProperties","navProperty","propertyName","propertyType","displayName","getText","defaultValue","visible","__exports","__esModule"],"sources":["Formatter.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\ntype SupportedPropertyTypes = \"boolean\" | \"number\" | \"enum\" | \"string\" | \"object\";\nexport type SingleFormatterProperty = {\n\tname: string;\n\tdisplayName: string;\n\ttype: SupportedPropertyTypes;\n\tdefaultValue?: boolean | number | string;\n\tselected?: boolean;\n\tvalue?: string;\n\tselectedKey?: string;\n\tdefaultSelectedKey?: string;\n\tbIsProperty?: boolean;\n\toptions?: Array<{\n\t\tname: string;\n\t\tvalue: string;\n\t}>;\n};\n\nexport type SingleFormatterParameter = {\n\tname: string;\n\tdisplayName: string;\n\ttype: SupportedPropertyTypes;\n\tdefaultValue?: string;\n\tvalue?: string;\n\tselectedKey?: string;\n\tselected?: boolean;\n\tproperties?: Array<SingleFormatterProperty>;\n\tdefaultSelectedKey?: string;\n\toptions?: Array<{\n\t\tname: string;\n\t\tvalue: string;\n\t}>;\n};\n\nexport type FormatterConfiguration = {\n\tproperty?: string;\n\tformatterName: string;\n\tdisplayName: string;\n\tparameters?: Array<SingleFormatterParameter>;\n\ttype: string;\n\tvisible: boolean;\n};\n\nexport type FormatterConfigurationMap = Array<FormatterConfiguration>;\n\nexport type FormatterOption = string | boolean | number;\nexport type FormatterOptions = Record<string, FormatterOption>;\n\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\nimport { date, dateTime } from \"sap/ui/integration/formatters/DateTimeFormatter\";\nimport type { PropertyInfo, PropertyInfoMap } from \"../odata/ODataTypes\";\nimport { checkForDateType } from \"../utils/CommonUtils\";\nimport { getYesAndNoTextValues } from \"./I18nHelper\";\n\n/**\n * Processes the formatter properties and adds them to the formatter options object.\n *\n * @param {SingleFormatterProperty[]} properties - The array of properties to process.\n * @param {FormatterOptions} formatterOptions - The object to which the processed property values will be added.\n */\n\nexport const formatPropertyDropdownValues = function (property: PropertyInfo, value: string) {\n\tconst type = property.type;\n\tconst { yesText, noText } = getYesAndNoTextValues();\n\tswitch (type) {\n\t\tcase \"Edm.Boolean\":\n\t\t\tvalue = value ? yesText : noText;\n\t\t\tbreak;\n\t\tcase \"Edm.Date\":\n\t\tcase \"Edm.DateTime\":\n\t\t\tvalue = date(value, { UTC: true });\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeOffset\":\n\t\t\tvalue = dateTime(value, { UTC: true });\n\t\t\tbreak;\n\t\tcase \"Edm.DateTimeInterval\":\n\t\tcase \"Edm.Time\":\n\t\t\tbreak;\n\t\tcase \"Edm.String\":\n\t\t\tif (value?.length === 0) {\n\t\t\t\tvalue = \"<empty>\";\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"Edm.Integer\":\n\t\tcase \"Edm.Float\":\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn `${property.label} (${value})`;\n};\n\n/**\n * Processes the formatter properties and adds them to the formatter options object.\n *\n * @param {SingleFormatterProperty[]} properties - The array of properties to process.\n * @param {FormatterOptions} formatterOptions - The object to which the processed property values will be added.\n */\nexport function processProperties(properties: SingleFormatterProperty[], formatterOptions: FormatterOptions) {\n\tproperties.forEach(function (property) {\n\t\tswitch (property.type) {\n\t\t\tcase \"boolean\":\n\t\t\t\tif (!property.selected) {\n\t\t\t\t\tproperty.selected = false;\n\t\t\t\t}\n\t\t\t\tformatterOptions[property.name] = property.selected;\n\t\t\t\tbreak;\n\t\t\tcase \"number\":\n\t\t\t\tif (typeof property.value === \"number\") {\n\t\t\t\t\tformatterOptions[property.name] = parseFloat(property.value);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"enum\":\n\t\t\t\tif (property.selectedKey) {\n\t\t\t\t\tformatterOptions[property.name] = property.selectedKey;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tformatterOptions[property.name] = property.value ?? \"\";\n\t\t\t\tbreak;\n\t\t}\n\t});\n}\n\n/**\n * Processes the formatter parameters and adds them to the formatter arguments array.\n *\n * @param {SingleFormatterParameter} parameters - The parameter object to process.\n * @param {FormatterOption[]} formatterArguments - The array to which the processed parameter values will be added.\n */\nexport function processParameters(parameters: SingleFormatterParameter, formatterArguments: FormatterOption[]) {\n\tswitch (parameters.type) {\n\t\tcase \"boolean\":\n\t\t\tif (!parameters.selected) {\n\t\t\t\tparameters.selected = false;\n\t\t\t}\n\t\t\tformatterArguments.push(parameters.selected);\n\t\t\tbreak;\n\t\tcase \"number\":\n\t\t\tconst parameterValue = parameters.value;\n\t\t\tif (parameterValue) {\n\t\t\t\tformatterArguments.push(parseFloat(parameterValue));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"enum\":\n\t\t\tformatterArguments.push(parameters.selectedKey as string);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tformatterArguments.push(parameters.value as string);\n\t\t\tbreak;\n\t}\n}\n\n/**\n * Formats the formatter arguments into a string suitable for a formatter expression.\n *\n *\n * @param {FormatterOption[]} formatterArguments - The array of formatter arguments to format.\n * @returns {string} The formatted arguments as a single string.\n */\nfunction formatArguments(formatterArguments: FormatterOption[]): string {\n\tlet content = formatterArguments[0] as string;\n\n\tfor (let i = 1; i < formatterArguments.length; i++) {\n\t\tconst formatter = formatterArguments[i];\n\t\tconst bindingOrFormatterArray = [\"{\", \"[\", \"$\"];\n\t\tconst hasBindingOrFormatter = bindingOrFormatterArray.some((item) => (formatter as string).startsWith(item));\n\t\tif (typeof formatter === \"string\" && !hasBindingOrFormatter) {\n\t\t\tcontent = content.concat(\", '\" + formatter + \"' \");\n\t\t} else {\n\t\t\tcontent = content.concat(\", \" + formatter);\n\t\t}\n\t}\n\n\treturn content;\n}\n\n/**\n * Creates a formatter expression based on the provided formatter configuration by processing the properties and parameters.\n *\n *\n * @param {FormatterConfiguration} formatterConfig - The configuration object for the formatter.\n * @returns {string} The generated formatter expression.\n */\nexport const createFormatterExpression = function (formatterConfig: FormatterConfiguration): string {\n\tconst formatterArguments: FormatterOption[] = [];\n\tformatterArguments.push(\"${\" + formatterConfig.property + \"}\");\n\tlet content = formatterConfig.formatterName + \"(\"; // dont close brackets here\n\n\tconst formatterOptions: FormatterOptions = {};\n\tformatterConfig.parameters?.forEach(function (mParameters) {\n\t\tconst properties = mParameters.properties;\n\t\tif (properties && properties.length > 0) {\n\t\t\tprocessProperties(properties, formatterOptions);\n\t\t\tif (JSON.stringify(formatterOptions) !== \"{}\") {\n\t\t\t\tformatterArguments.push(JSON.stringify(formatterOptions));\n\t\t\t}\n\t\t} else {\n\t\t\tprocessParameters(mParameters, formatterArguments);\n\t\t}\n\t});\n\tcontent = content.concat(formatArguments(formatterArguments));\n\treturn content + \")\";\n};\n\n/**\n * Generates the default property formatter configuration for date properties.\n *\n * @param {ResourceBundle} i18nModel - The internationalization model used for localization.\n * @param {PropertyInfoMap} properties - The map of property information.\n * @returns {FormatterConfigurationMap} - The configuration map for date formatters.\n */\nexport const getDefaultPropertyFormatterConfig = function (\n\ti18nModel: ResourceBundle,\n\tproperties: PropertyInfoMap\n): FormatterConfigurationMap {\n\tconst dateFormatterConfig: FormatterConfigurationMap = [];\n\tfor (const property of properties) {\n\t\tconst isPropertyTypeDate = checkForDateType(property.type);\n\t\tif (property.name && isPropertyTypeDate) {\n\t\t\tconst configData = getDateFormatterConfiguration(property.name, property.type, i18nModel) as FormatterConfiguration;\n\t\t\tdateFormatterConfig.push(configData);\n\t\t}\n\t}\n\treturn dateFormatterConfig;\n};\n\n/**\n * Generates the default property formatter configuration for navigation properties.\n *\n * @param {ResourceBundle} i18nModel - The internationalization model used for localization.\n * @param {PropertyInfoMap} navProperties - The map of navigation properties.\n * @returns {FormatterConfigurationMap} The formatter configuration map for date properties.\n */\nexport const getDefaultPropertyFormatterConfigForNavProperties = function (\n\ti18nModel: ResourceBundle,\n\tnavProperties: PropertyInfoMap\n): FormatterConfigurationMap {\n\tconst dateFormatterConfig: FormatterConfigurationMap = [];\n\tfor (const navProperty of navProperties) {\n\t\tconst properties = (navProperty.properties as PropertyInfoMap) || [];\n\t\tfor (const property of properties) {\n\t\t\tconst propertyName = navProperty.name + \"/\" + property.name;\n\t\t\tconst isPropertyTypeDate = checkForDateType(property.type);\n\t\t\tif (propertyName && isPropertyTypeDate) {\n\t\t\t\tconst configData = getDateFormatterConfiguration(propertyName, property.type, i18nModel) as FormatterConfiguration;\n\t\t\t\tdateFormatterConfig.push(configData);\n\t\t\t}\n\t\t}\n\t}\n\treturn dateFormatterConfig;\n};\n\n/**\n * Generates configuration data for a given property based on its type.\n *\n * @param {string} propertyName - The name of the property.\n * @param {string} propertyType - The type of the property (e.g., \"Edm.DateTimeOffset\", \"Edm.DateTime\", \"Edm.Date\").\n * @param {ResourceBundle} i18nModel - The internationalization model used to get localized text.\n * @returns {FormatterConfiguration} The configuration data for the specified property.\n */\nfunction getDateFormatterConfiguration(propertyName: string, propertyType: string, i18nModel: ResourceBundle) {\n\tif (propertyType === \"Edm.DateTimeOffset\") {\n\t\tconst configData: FormatterConfiguration = {\n\t\t\tproperty: propertyName,\n\t\t\tformatterName: \"format.dateTime\",\n\t\t\tdisplayName: i18nModel.getText(\"FORMAT_DATETIME\") ?? \"\",\n\t\t\tparameters: [\n\t\t\t\t{\n\t\t\t\t\tname: \"options\",\n\t\t\t\t\tdisplayName: \"Options\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefaultValue: \"\",\n\t\t\t\t\tproperties: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"relative\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"RELATIVE\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"UTC\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"UTC\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false,\n\t\t\t\t\t\t\tselected: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\ttype: \"Date\",\n\t\t\tvisible: true\n\t\t};\n\t\treturn configData;\n\t} else if (propertyType === \"Edm.DateTime\" || propertyType === \"Edm.Date\") {\n\t\tconst configData: FormatterConfiguration = {\n\t\t\tproperty: propertyName,\n\t\t\tformatterName: \"format.date\",\n\t\t\tdisplayName: i18nModel.getText(\"FORMAT_DATE\") ?? \"\",\n\t\t\tparameters: [\n\t\t\t\t{\n\t\t\t\t\tname: \"options\",\n\t\t\t\t\tdisplayName: \"Options\",\n\t\t\t\t\ttype: \"object\",\n\t\t\t\t\tdefaultValue: \"\",\n\t\t\t\t\tproperties: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"UTC\",\n\t\t\t\t\t\t\tdisplayName: i18nModel.getText(\"UTC\") ?? \"\",\n\t\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\t\tdefaultValue: false,\n\t\t\t\t\t\t\tselected: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t],\n\t\t\ttype: \"Date\",\n\t\t\tvisible: true\n\t\t};\n\t\treturn configData;\n\t}\n}\n"],"mappings":"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","ignoreList":[]}