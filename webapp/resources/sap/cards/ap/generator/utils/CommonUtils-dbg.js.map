{"version":3,"file":"CommonUtils-dbg.js","names":["sap","ui","define","CoreElement","___types_CommonTypes","ColorIndicator","isBinding","sPropertyValue","startsWith","endsWith","isActiveCalculation","value","activeCalculation","getColorForGroup","criticalityValue","staticValues","deviationLow","deviationRangeLowValue","deviationHigh","deviationRangeHighValue","toleranceLow","toleranceRangeLowValue","toleranceHigh","toleranceRangeHighValue","sImprovementDirection","improvementDirection","oCriticalityConfigValues","None","Negative","Critical","Positive","name","JSON","stringify","includes","checkForDateType","propertyType","supportedDateTypes","getCardGeneratorDialog","dialogId","getElementById","getDialogModel","modelName","dialog","getModel","hasBooleanBindingExpression","propertyValue","normalizedPath","replace","extractValueWithoutBooleanExprBinding","path","regex","match","exec","__exports","__esModule"],"sources":["CommonUtils.ts"],"sourcesContent":["/*!\n * SAP UI development toolkit for HTML5 (SAPUI5)\n *  * (c) Copyright 2009-2025 SAP SE. All rights reserved\n */\nimport CoreElement from \"sap/ui/core/Element\";\nimport type JSONModel from \"sap/ui/model/json/JSONModel\";\nimport type ResourceModel from \"sap/ui/model/resource/ResourceModel\";\nimport { ColorIndicator, CriticalityValue } from \"../types/CommonTypes\";\n\n/**\n *\n * @param sPropertyValue\n * @returns true if the property value is a binding\n */\nexport function isBinding(sPropertyValue: string) {\n\treturn sPropertyValue && sPropertyValue.startsWith(\"{\") && sPropertyValue.endsWith(\"}\");\n}\n\n/**\n * To determine if the given value is a activation `CriticalityValue`.\n *\n * @param {CriticalityValue | string} value - The value to check.\n * @returns {value is CriticalityValue} True if the value is a `CriticalityValue`, false otherwise.\n */\nfunction isActiveCalculation(value: CriticalityValue | string): value is CriticalityValue {\n\treturn (value as CriticalityValue).activeCalculation === true;\n}\n\n/**\n * Retrieves the color representation for a given criticality value or string.\n *\n * @param {CriticalityValue | string} criticalityValue - The criticality value or string to evaluate.\n * @returns {string | undefined} The formatted string representing the color, or undefined if the input is not valid.\n */\nexport function getColorForGroup(criticalityValue: CriticalityValue | string): string | undefined {\n\tif (criticalityValue) {\n\t\tif (isActiveCalculation(criticalityValue)) {\n\t\t\tconst staticValues = {\n\t\t\t\tdeviationLow: criticalityValue.deviationRangeLowValue,\n\t\t\t\tdeviationHigh: criticalityValue.deviationRangeHighValue,\n\t\t\t\ttoleranceLow: criticalityValue.toleranceRangeLowValue,\n\t\t\t\ttoleranceHigh: criticalityValue.toleranceRangeHighValue,\n\t\t\t\tsImprovementDirection: criticalityValue.improvementDirection,\n\t\t\t\toCriticalityConfigValues: { None: \"None\", Negative: \"Error\", Critical: \"Warning\", Positive: \"Success\" }\n\t\t\t};\n\t\t\treturn \"{= extension.formatters.formatValueColor(${\" + criticalityValue.name + \"},\" + JSON.stringify(staticValues) + \") }\";\n\t\t} else if (criticalityValue.includes(\"extension.formatters.formatCriticality\")) {\n\t\t\treturn criticalityValue;\n\t\t} else if (isBinding(criticalityValue)) {\n\t\t\treturn \"{= extension.formatters.formatCriticality($\" + criticalityValue + \", 'state') }\";\n\t\t}\n\t\treturn ColorIndicator[criticalityValue as keyof typeof ColorIndicator];\n\t}\n}\n\n/**\n * Checks if the given property type is a supported date type.\n *\n * @param {string} [propertyType] - The property type to check.\n * @returns {boolean} - Returns true if the property type is a supported date type, otherwise false.\n */\nexport function checkForDateType(propertyType?: string): boolean {\n\tif (!propertyType) {\n\t\treturn false;\n\t}\n\n\tconst supportedDateTypes = [\"Edm.Date\", \"Edm.DateTimeOffset\", \"Edm.DateTime\"];\n\treturn supportedDateTypes.includes(propertyType);\n}\n\n/**\n * Retrieves the card generator dialog using the dialog ID.\n *\n * @returns The card generator dialog.\n */\nexport function getCardGeneratorDialog() {\n\tconst dialogId = \"cardGeneratorDialog--cardGeneratorDialog\";\n\treturn CoreElement.getElementById(dialogId);\n}\n\n/**\n * Retrieves the dialog model for the card generator UI / resources / previewOptions.\n *\n * @param modelName\n * @returns The model for the dialog.\n */\nexport function getDialogModel(modelName?: string) {\n\tconst dialog = getCardGeneratorDialog();\n\n\tif (modelName === \"i18n\") {\n\t\treturn dialog?.getModel(\"i18n\") as ResourceModel;\n\t}\n\n\treturn modelName ? (dialog?.getModel(modelName) as JSONModel) : (dialog?.getModel() as JSONModel);\n}\n\n/**\n * The function checks if the property value has a boolean binding expression\n *\n * @param propertyValue\n * @returns\n */\nexport function hasBooleanBindingExpression(propertyValue = \"\"): boolean {\n\tconst normalizedPath = propertyValue.replace(/\\s+/g, \"\");\n\treturn normalizedPath.includes(\"===true?\");\n}\n\n/**\n * Extracts the path inside a binding expression without the boolean expression.\n *\n * This function takes a string containing a binding expression in the format `{= ${property} === true ? {{Yes}} : {{No}}}`\n * and extracts the content inside the curly braces.\n *\n * @param path - The string containing the binding expression.\n * @returns The extracted path inside the binding expression, or \"\" if no match is found.\n */\nexport function extractValueWithoutBooleanExprBinding(path: string) {\n\tconst regex = /\\${([^}]+)}/; // Matches anything inside ${...} until the closing brace\n\tconst match = regex.exec(path);\n\treturn match?.[1] || \"\";\n}\n"],"mappings":";;;;AAAA,aAAAA,IAAAC,GAAAC,OAAA,wDAAAC,EAAAC,GAAA,mBAOSC,EAAcD,EAAA,kBAOhB,SAASE,EAAUC,GACzB,OAAOA,GAAkBA,EAAeC,WAAW,MAAQD,EAAeE,SAAS,IACpF,CAQA,SAASC,EAAoBC,GAC5B,OAAQA,EAA2BC,oBAAsB,IAC1D,CAQO,SAASC,EAAiBC,GAChC,GAAIA,EAAkB,CACrB,GAAIJ,EAAoBI,GAAmB,CAC1C,MAAMC,EAAe,CACpBC,aAAcF,EAAiBG,uBAC/BC,cAAeJ,EAAiBK,wBAChCC,aAAcN,EAAiBO,uBAC/BC,cAAeR,EAAiBS,wBAChCC,sBAAuBV,EAAiBW,qBACxCC,yBAA0B,CAAEC,KAAM,OAAQC,SAAU,QAASC,SAAU,UAAWC,SAAU,YAE7F,MAAO,8CAAgDhB,EAAiBiB,KAAO,KAAOC,KAAKC,UAAUlB,GAAgB,KACtH,MAAO,GAAID,EAAiBoB,SAAS,0CAA2C,CAC/E,OAAOpB,CACR,MAAO,GAAIR,EAAUQ,GAAmB,CACvC,MAAO,8CAAgDA,EAAmB,cAC3E,CACA,OAAOT,EAAeS,EACvB,CACD,CAQO,SAASqB,EAAiBC,GAChC,IAAKA,EAAc,CAClB,OAAO,KACR,CAEA,MAAMC,EAAqB,CAAC,WAAY,qBAAsB,gBAC9D,OAAOA,EAAmBH,SAASE,EACpC,CAOO,SAASE,IACf,MAAMC,EAAW,2CACjB,OAAOpC,EAAYqC,eAAeD,EACnC,CAQO,SAASE,EAAeC,GAC9B,MAAMC,EAASL,IAEf,GAAII,IAAc,OAAQ,CACzB,OAAOC,GAAQC,SAAS,OACzB,CAEA,OAAOF,EAAaC,GAAQC,SAASF,GAA4BC,GAAQC,UAC1E,CAQO,SAASC,EAA4BC,EAAgB,IAC3D,MAAMC,EAAiBD,EAAcE,QAAQ,OAAQ,IACrD,OAAOD,EAAeb,SAAS,WAChC,CAWO,SAASe,EAAsCC,GACrD,MAAMC,EAAQ,cACd,MAAMC,EAAQD,EAAME,KAAKH,GACzB,OAAOE,IAAQ,IAAM,EACtB,CAAC,IAAAE,EAAA,CAAAC,WAAA,MAAAD,EAAAhD,YAAAgD,EAAAzC,mBAAAyC,EAAAnB,mBAAAmB,EAAAhB,yBAAAgB,EAAAb,iBAAAa,EAAAT,8BAAAS,EAAAL,wCAAA,OAAAK,CAAA","ignoreList":[]}