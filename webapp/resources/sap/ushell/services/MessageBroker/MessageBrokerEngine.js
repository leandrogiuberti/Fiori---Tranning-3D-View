// Copyright (c) 2009-2025 SAP SE, All Rights Reserved
sap.ui.define(["sap/base/Log","sap/base/util/deepClone","sap/ushell/services/MessageBroker/ClientAlias","sap/ushell/services/MessageBroker/ClientConnectionMessage"],(e,n,t,i)=>{"use strict";class s{#e=true;#n=false;#t=e.getLogger("sap.ushell.services.MessageBroker");#i=new Set;#s=new Set;#r={};#o={};#l=[];constructor(){this.addAcceptedOrigin(window.location.origin)}setEnabled(e){this.#e=e}async connect(e,n){if(!this.#e){throw new Error(`Cannot connect client '${e}': MessageBroker is not enabled`)}if(typeof e!=="string"||!e.length){throw new Error("Cannot connect client: Missing required parameter client id")}if(this.#s.has(e)){throw new Error(`Cannot connect client '${e}': Client is already connected`)}if(typeof n!=="function"){this.#t.error(`Missing required parameter 'fnClientConnectionCallback' for client '${e}'! It has to be provided as part of the connect() call`)}else{this.#r[e]={clientId:e,channels:[],clientConnectionCallback:n};this.#l.push(setTimeout(()=>{this.#c(e)},0))}this.#s.add(e)}#c(e){if(this.#n){return}const t=this.#r[e];if(!t){return}const s=Object.values(this.#r).filter(n=>n.clientId!==e);if(s.length){s.forEach(e=>{t.clientConnectionCallback(i.ClientSubscribed,e.clientId,n(e.channels))})}}async disconnect(e){if(!this.#e){throw new Error(`Cannot disconnect client '${e}': MessageBroker is not enabled`)}if(typeof e!=="string"||!e.length){throw new Error("Cannot disconnect client: Missing required parameter client id")}if(!this.#s.has(e)){throw new Error(`Cannot disconnect client '${e}': Client is already disconnected`)}for(const n in this.#o){this.#o[n]=this.#o[n].filter(n=>n.clientId!==e)}if(this.#r[e]?.channels.length){this.#a(i.ClientUnsubscribed,e,this.#r[e].channels)}delete this.#r[e];this.#s.delete(e)}async subscribe(e,t,s,r){if(!this.#e){throw new Error(`Cannot subscribe client '${e}': MessageBroker is not enabled`)}if(typeof e!=="string"||!e.length||!t.length||typeof s!=="function"){throw new Error(`Cannot subscribe client '${e}': Missing required parameter(s)`)}if(typeof r==="function"){this.#t.error(`The 'fnClientConnectionCallback' parameter was provided by client '${e}'. This parameter is deprecated and should be provided as part of the connect() call`)}if(!this.#s.has(e)){throw new Error(`Cannot subscribe client '${e}': Client is not connected`)}for(const n of t){const t=n.channelId;if(!this.#o[t]){this.#o[t]=[]}const i=this.#o[t].find(n=>n.clientId===e);if(!i){this.#o[t].push({clientId:e,messageCallback:s})}else{i.messageCallback=s}}const o=this.#r[e];if(!o){this.#r[e]={clientId:e,channels:n(t),clientConnectionCallback:r};this.#l.push(setTimeout(()=>{this.#c(e)},1e3))}else{for(const e of t){const n=o.channels.some(n=>n.channelId===e.channelId);if(!n){o.channels.push(e)}}}if(Object.keys(this.#r).length>1){this.#a(i.ClientSubscribed,e,t)}}async unsubscribe(e,n){if(!this.#e){throw new Error(`Cannot unsubscribe client '${e}': MessageBroker is not enabled`)}if(typeof e!=="string"||!e.length||!Array.isArray(n)||!n.length){throw new Error(`Cannot unsubscribe client '${e}': Missing required parameter(s)`)}if(!this.#s.has(e)){throw new Error(`Cannot unsubscribe client '${e}': Client is not connected`)}for(const t of n){const n=t.channelId;if(this.#o[n]){this.#o[n]=this.#o[n].filter(n=>n.clientId!==e)}else{this.#t.warning(`Cannot unsubscribe client '${e}': Channel '${n}' is unknown`)}}this.#r[e].channels=this.#r[e].channels.filter(e=>{const t=n.some(n=>n.channelId===e.channelId);return!t});this.#a(i.ClientUnsubscribed,e,n)}async publish(e,n,i,s,r,o){if(!this.#e){throw new Error(`Cannot publish message of client '${n}': MessageBroker is not enabled`)}if(typeof s==="string"&&(Array.isArray(r)||r===t.AllClients)){this.#t.error(`The parameter 'sMessageId' was provided by client '${n}'. It is deprecated and should not be provided`)}else{o=r;r=s;s=i;i=undefined}let l;if(r===t.AllClients){l=[t.AllClients]}else{l=[...r]}if(!this.#s.has(n)){throw new Error(`Cannot publish message '${s}' of client '${n}': Client '${n}' is not connected`)}if(!this.#o[e]){throw new Error(`Cannot publish message '${s}' of client '${n}': Channel '${e}' is unknown`)}const c=this.#o[e];const a=c.find(e=>e.clientId===n);if(!a){throw new Error(`Cannot publish message '${s}' of client '${n}': Client is not subscribed to the provided channel '${e}'`)}const h=l.includes(t.AllClients);let d=[];if(h){d=[...c]}else{for(const e of l){const n=c.find(n=>n.clientId===e);if(n){d.push(n)}}}if(!h&&!d.length){throw new Error(`Cannot publish message '${s}' of client '${n}': No target client(s) found in the provided channel '${e}'`)}this.#h(d,e,s,n,o)}addAcceptedOrigin(e){if(!this.#e){return}if(typeof e!=="string"||!e.length){throw new Error("Missing required parameter")}this.#i.add(e);const n=new URL(e);if(n.protocol==="https:"&&n.port===""){if(e.endsWith(":443")){this.#i.add(e.substring(0,e.length-4))}else{this.#i.add(`${e}:443`)}}if(n.protocol==="http:"&&n.port===""){if(e.endsWith(":80")){this.#i.add(e.substring(0,e.length-3))}else{this.#i.add(`${e}:80`)}}}removeAcceptedOrigin(e){if(!this.#e){return}if(typeof e!=="string"||!e.length){throw new Error("Missing required parameter")}this.#i.delete(e);const n=new URL(e);if(n.protocol==="https:"&&n.port===""){if(e.endsWith(":443")){this.#i.delete(e.substring(0,e.length-4))}else{this.#i.delete(`${e}:443`)}}if(n.protocol==="http:"&&n.port===""){if(e.endsWith(":80")){this.#i.delete(e.substring(0,e.length-3))}else{this.#i.delete(`${e}:80`)}}}getAcceptedOrigins(){if(!this.#e){return}return Array.from(this.#i.values())}getSubscribedClients(){if(!this.#e){return}return n(this.#o)}#a(e,t,i){for(const s of Object.values(this.#r)){if(s.clientId!==t){s.clientConnectionCallback(e,t,n(i))}}}#h(e,t,i,s,r){for(const o of e){if(o.clientId!==s){o.messageCallback(s,t,i,n(r))}}}reset(){this.#e=true;this.#n=false;this.#i.clear();this.#s.clear();this.#r={};this.#o={};this.addAcceptedOrigin(window.location.origin);this.#l.forEach(e=>{clearTimeout(e)});this.#l=[]}skipEmitInformAboutOtherClients(){this.#n=true}}return new s});
//# sourceMappingURL=MessageBrokerEngine.js.map