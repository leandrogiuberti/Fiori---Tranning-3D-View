// Copyright (c) 2009-2025 SAP SE, All Rights Reserved
sap.ui.define(["sap/base/Log","sap/ushell/appRuntime/ui5/AppCommunicationMgr","sap/ushell/appRuntime/ui5/services/MessageBroker/Client","sap/ushell/services/MessageBroker/ClientAlias","sap/ushell/utils/CallbackQueue"],(e,s,n,t,r)=>{"use strict";function a(){this._mClientData=new Map;this._oLogger=e.getLogger("sap.ushell.services.MessageBroker");this.oCallbackQueue=new r}a.prototype.connect=async function(e,t){return this.oCallbackQueue.push(async()=>{if(typeof e!=="string"||!e.length){throw new Error("Cannot connect client: Missing required parameter client id")}if(typeof t!=="function"){this._oLogger.error(`Missing required parameter 'fnClientConnectionCallback' for client '${e}'! It has to be provided as part of the connect() call`)}const r=new n(e);r.setClientConnectionCallback(t);await s.postMessageToFLP("sap.ushell.services.MessageBroker",{channelId:"sap.ushell.MessageBroker",clientId:e,messageName:"connect"});this._mClientData.set(e,r)})};a.prototype.disconnect=async function(e){return this.oCallbackQueue.push(async()=>{if(typeof e!=="string"||!e.length){throw new Error("Cannot disconnect client: Missing required parameter client id")}await s.postMessageToFLP("sap.ushell.services.MessageBroker",{channelId:"sap.ushell.MessageBroker",clientId:e,messageName:"disconnect"});this._mClientData.delete(e)})};a.prototype.subscribe=async function(e,n,t,r){return this.oCallbackQueue.push(async()=>{if(typeof e!=="string"||!e.length||!n.length||typeof t!=="function"){throw new Error(`Cannot subscribe client '${e}': Missing required parameter(s)`)}if(typeof r==="function"){this._oLogger.error(`The 'fnClientConnectionCallback' parameter was provided by client '${e}'. This parameter is deprecated and should be provided as part of the connect() call`)}const a=this._mClientData.get(e);if(!a){throw new Error(`Cannot subscribe client '${e}': Client is not connected`)}await s.postMessageToFLP("sap.ushell.services.MessageBroker",{channelId:"sap.ushell.MessageBroker",clientId:e,messageName:"subscribe",subscribedChannels:n});n.forEach(e=>a.subscribe(e.channelId,t));if(r){a.setClientConnectionCallback(r)}})};a.prototype.unsubscribe=async function(e,n){return this.oCallbackQueue.push(async()=>{if(typeof e!=="string"||!e.length||!Array.isArray(n)||!n.length){throw new Error(`Cannot unsubscribe client '${e}': Missing required parameter(s)`)}const t=this._mClientData.get(e);if(!t){throw new Error(`Cannot subscribe client '${e}': Client is not connected`)}await s.postMessageToFLP("sap.ushell.services.MessageBroker",{channelId:"sap.ushell.MessageBroker",clientId:e,messageName:"unsubscribe",subscribedChannels:n});n.forEach(e=>t.subscribe(e.channelId,undefined))})};a.prototype.publish=async function(e,n,r,a,i,o){return this.oCallbackQueue.push(async()=>{if(typeof a==="string"&&(Array.isArray(i)||i===t.AllClients)){this._oLogger.error(`The parameter 'sMessageId' was provided by client '${n}'. It is deprecated and should not be provided`)}else{o=i;i=a;a=r;r=undefined}let c;if(i===t.AllClients){c=[t.AllClients]}else{c=[...i]}s.postMessageToFLP("sap.ushell.services.MessageBroker",{clientId:n,channelId:e,targetClientIds:c,messageName:a,data:o})})};a.prototype.addAcceptedOrigin=function(e){};a.prototype.removeAcceptedOrigin=function(e){};a.prototype.getAcceptedOrigins=function(){};a.prototype.getAcceptedOrigins=function(){};a.prototype.handleMessage=async function(e){return this.oCallbackQueue.push(async()=>{const s=this._mClientData.get(e.targetClientId);if(!s){throw new Error(`Client '${e.targetClientId}' is not connected`)}if(["clientSubscribed","clientUnsubscribed"].includes(e.messageName)){s.callClientConnectionCallback(e.messageName,e.clientId,e.channels);return{_noresponse_:true}}const n=s.getMessageCallback(e.channelId);if(!n){throw new Error(`Client '${e.clientId}' is not subscribed to channel '${e.channelId}'`)}n(e.clientId,e.channelId,e.messageName,e.data);return{_noresponse_:true}})};a.hasNoAdapter=true;return a});
//# sourceMappingURL=MessageBroker.js.map