// Copyright (c) 2009-2025 SAP SE, All Rights Reserved
sap.ui.define(["sap/base/util/deepEqual","sap/ui/thirdparty/jquery","sap/ui/base/Object","sap/ushell/utils"],(e,jQuery,t,s)=>{"use strict";const o="user.postapi.";const r=t.extend("sap.ushell.appIntegration.PostMessagePluginInterface",{metadata:{publicMethods:["registerPostMessageAPIs","createPostMessageResult","postMessageToApp","postMessageToFlp"]}});r.prototype.init=function(e,t,s,o){this._fnSendPostMessage=e;this._fnSetRequestHandler=t;this._fnSetDistributionPolicy=s;this._bRunsInOuterShell=o};r.prototype.getInterface=function(){const e=t.prototype.getInterface.call(this);if(this._bRunsInOuterShell){delete e.postMessageToFlp}else{delete e.postMessageToApp}return e};r.prototype.registerPostMessageAPIs=function(e,t=false){const s={status:"success",desc:""};try{this._validateCommunicationObject(e,t);this._fnAddCommunicationObject(e)}catch(e){s.status="error";s.desc=e.message}return s};r.prototype._validateCommunicationObject=function(t,s){if(t===undefined||Object.keys(t).length<=0){throw new Error("No handler was found to register")}for(const[r,n]of Object.entries(t)){if(typeof r!=="string"){throw new Error("oPostMessageAPIs should contain only string keys")}if(!s&&!r.startsWith(o)){throw new Error(`all user custom Message APIs must start with '${o}'`)}for(const[t,s]of Object.entries(n)){if(!["inCalls","outCalls"].includes(t)){throw new Error("api should contain either 'inCalls' or 'outCalls'")}for(const[o,n]of Object.entries(s)){if(t==="inCalls"){if(typeof n.executeServiceCallFn!=="function"){throw new Error(`executeServiceCallFn for '${r}.${o}' must be a function`)}}else if(t==="outCalls"){if(Object.hasOwn(n,"distributionType")){if(!Array.isArray(n.distributionType)){throw new Error(`distributionType for '${r}.${o}' must be an array. Remove it from the definition to apply the default.`)}if(!e(n.distributionType,["all"])){throw new Error(`distributionType for '${r}.${o}' must be 'all'. Remove it from the definition to apply the default.`)}}}}}}};r.prototype._fnAddCommunicationObject=function(e){for(const[t,o]of Object.entries(e)){for(const[e,r]of Object.entries(o)){for(const[o,n]of Object.entries(r)){if(e==="inCalls"){this._fnSetRequestHandler(`${t}.${o}`,async(e,t)=>{const o={oMessageData:JSON.parse(t.data),oMessage:t};return s.promisify(n.executeServiceCallFn(o))})}else if(e==="outCalls"){const e={ignoreCapabilities:true,onlyCurrentApplication:true};if(Object.hasOwn(n,"isActiveOnly")){e.onlyCurrentApplication=!!n.isActiveOnly}this._fnSetDistributionPolicy(`${t}.${o}`,e)}}}}};r.prototype.postMessageToApp=function(e,t,s){const o=new jQuery.Deferred;this._fnSendPostMessage(`${e}.${t}`,s).then(e=>{o.resolve(e)}).catch(e=>{o.reject(e)});return o.promise()};r.prototype.postMessageToFlp=function(e,t,s){const o=new jQuery.Deferred;this._fnSendPostMessage(`${e}.${t}`,s).then(e=>{o.resolve(e)}).catch(e=>{o.reject(e)});return o.promise()};r.prototype.createPostMessageResult=function(e={}){return(new jQuery.Deferred).resolve(e).promise()};return new r});
//# sourceMappingURL=PostMessagePluginInterface.js.map