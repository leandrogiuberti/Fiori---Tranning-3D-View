/*!
 * SAPUI5
    (c) Copyright 2009-2021 SAP SE. All rights reserved
  
 */
/*global sap*/
sap.ui.define(
[
"sap/sac/df/firefly/ff4310.olap.impl"
],
function(oFF)
{
"use strict";

oFF.QInAComponent = function() {};
oFF.QInAComponent.prototype = new oFF.XObject();
oFF.QInAComponent.prototype._ff_c = "QInAComponent";

oFF.QInAComponent.prototype.getModelFormat = function()
{
	return null;
};
oFF.QInAComponent.prototype.getName = function()
{
	return this.getComponentType().getName();
};
oFF.QInAComponent.prototype.getTagName = function()
{
	return null;
};
oFF.QInAComponent.prototype.isMatching = function(inaImportElement)
{
	return true;
};
oFF.QInAComponent.prototype.processImportComponent = function(syncType, listener, importer, componentType, inaElement, modelComponent, parentComponent, context)
{
	if (importer.isValid())
	{
		importer.importComponent(componentType, inaElement, modelComponent, parentComponent, context);
	}
	if (oFF.notNull(listener))
	{
		listener(modelComponent);
	}
	return modelComponent;
};
oFF.QInAComponent.prototype.toString = function()
{
	return this.getName();
};

oFF.QInAExportUtil = {

	dateTimeToString:function(exporter, value)
	{
			return exporter.m_capabilities.supportsSapDate() ? value.toSAPFormat() : value.toIsoFormat();
	},
	exportComponentExtensions:function(exporter, inaElement, component)
	{
			if (exporter.getOriginalMode() !== oFF.QModelFormat.INA_CLONE || oFF.isNull(inaElement) || !inaElement.isStructure() || oFF.isNull(component) || !component.canHaveExtensions())
		{
			return;
		}
		let inAStructure = inaElement;
		let modelComponent = component;
		let extensions = modelComponent.getExtensions();
		if (!extensions.hasElements())
		{
			return;
		}
		let inaExtensions = inAStructure.putNewStructure("Extensions");
		let iterator = extensions.getKeysAsIterator();
		while (iterator.hasNext())
		{
			let key = iterator.next();
			let value = extensions.getByKey(key);
			inaExtensions.put(key, value);
		}
	},
	extendList:function(modelComponent, source)
	{
			return source;
	},
	extendStructure:function(exporter, modelComponent, source)
	{
			if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			let tagging = modelComponent.getTagging();
			if (oFF.XCollectionUtils.hasElements(tagging))
			{
				let keyList = tagging.getKeysAsReadOnlyList();
				let componentTaggingList = source.putNewList("ComponentTags");
				for (let i = 0; i < keyList.size(); i++)
				{
					let currentKey = keyList.get(i);
					let currentValue = tagging.getByKey(currentKey);
					let newKeyValuePair = oFF.PrFactory.createStructure();
					componentTaggingList.add(newKeyValuePair);
					newKeyValuePair.putString("KEY", currentKey);
					if (oFF.isNull(currentValue))
					{
						newKeyValuePair.putNull("VALUE");
					}
					else
					{
						newKeyValuePair.putString("VALUE", currentValue);
					}
				}
			}
		}
		return source;
	},
	getAccountDimensionMemberNameByAlias:function(queryModel, aliasName, exporter)
	{
			if ((exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP)) && oFF.notNull(queryModel))
		{
			let name = queryModel.getConvenienceCommands().getAccountDimensionMemberNameByAlias(queryModel, aliasName);
			if (oFF.notNull(name))
			{
				return name;
			}
		}
		return aliasName;
	},
	getMeasureMemberNameByAlias:function(queryModel, aliasName, exporter)
	{
			let memberName = aliasName;
		if ((exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP)) && oFF.notNull(queryModel))
		{
			let queryManager = queryModel.getQueryManager();
			if (queryManager.getMode() === oFF.QueryManagerMode.BLENDING)
			{
				let blendingSources = queryManager.getQueryModel().getBlendingSources();
				for (let i = 0; i < blendingSources.size(); i++)
				{
					let blendingSource = blendingSources.get(i);
					let prefix = oFF.XStringUtils.concatenate2(blendingSource.getQueryAliasName(), ".");
					if (oFF.XString.startsWith(aliasName, prefix))
					{
						let aliasNameWithoutPrefix = oFF.XString.replace(aliasName, prefix, "");
						let leafQueryModel = blendingSource.getQueryModel();
						let nameToProcess = oFF.QInAExportUtil.getMeasureMemberNameByAlias(leafQueryModel, aliasNameWithoutPrefix, exporter);
						if (oFF.notNull(nameToProcess))
						{
							if (oFF.XString.containsString(aliasName, prefix))
							{
								nameToProcess = oFF.XStringUtils.concatenate2(prefix, nameToProcess);
							}
							return nameToProcess;
						}
					}
				}
			}
			else
			{
				let name = queryModel.getConvenienceCommands().getMeasureMemberNameByAlias(queryModel, aliasName);
				if (oFF.notNull(name))
				{
					memberName = name;
				}
				if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && queryModel.getDimensionByType(oFF.DimensionType.ACCOUNT) !== null && oFF.notNull(memberName))
				{
					let accountDimension = queryModel.getAccountDimension();
					let accountDimensionMemberPrefix;
					let hierarchyName;
					let accountDimensionHierarchyMemberPrefix;
					if (oFF.XString.startsWith(memberName, oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX))
					{
						accountDimensionMemberPrefix = oFF.XStringUtils.concatenate3("[", accountDimension.getName(), "].[");
						hierarchyName = accountDimension.getHierarchyName() !== null ? accountDimension.getHierarchyName() : accountDimension.getDefaultHierarchyName();
						accountDimensionHierarchyMemberPrefix = oFF.XStringUtils.concatenate3(accountDimensionMemberPrefix, hierarchyName, "].&[");
						memberName = oFF.XStringUtils.concatenate3(accountDimensionHierarchyMemberPrefix, memberName, "]");
					}
				}
			}
		}
		return memberName;
	},
	isFormulaCalculatedDimensionHidden:function(dimension)
	{
			if (oFF.notNull(dimension) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
		{
			let calcDim = dimension;
			return calcDim.isHidden();
		}
		return false;
	},
	isNumberSafe:function(value)
	{
			return oFF.XMath.abs(value) < 9007199254740992;
	},
	setDate:function(exporter, structure, parameterName, date)
	{
			if (oFF.notNull(date))
		{
			structure.putString(parameterName, oFF.QInAExportUtil.dateTimeToString(exporter, date));
		}
	},
	setIntegerIfNotNull:function(structure, name, value)
	{
			if (oFF.notNull(value))
		{
			structure.putInteger(name, value.getInteger());
		}
	},
	setNameIfNotNull:function(structure, name, namedObject)
	{
			if (oFF.notNull(namedObject))
		{
			structure.putString(name, namedObject.getName());
		}
	},
	setNonEmptyString:function(structure, parameterName, value)
	{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(value))
		{
			structure.putString(parameterName, value);
		}
	}
};

oFF.QInAImportUtil = {

	importComponentExtensions:function(importer, inaElement, component)
	{
			if (oFF.isNull(inaElement) || !inaElement.isStructure() || oFF.isNull(component) || !component.canHaveExtensions() || !importer.getMode().isTypeOf(oFF.QModelFormat.INA_METADATA_CORE))
		{
			return;
		}
		let inAStructure = inaElement;
		let inaExtensions = inAStructure.getStructureByKey("Extensions");
		if (!oFF.XCollectionUtils.hasElements(inaExtensions))
		{
			return;
		}
		let extensions = oFF.XHashMapByString.create();
		let keys = inaExtensions.getKeysAsReadOnlyList();
		for (let i = 0; i < keys.size(); i++)
		{
			let key = keys.get(i);
			let value = inaExtensions.getByKey(key);
			if (oFF.isNull(value))
			{
				continue;
			}
			extensions.put(key, value);
		}
		component.setExtensions(extensions);
	},
	importComponentTagging:function(importer, inaElement, modelComponent)
	{
			if (oFF.notNull(inaElement))
		{
			if (importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && inaElement.isStructure() && oFF.notNull(modelComponent))
			{
				let inAStructure = inaElement;
				let componentTagList = inAStructure.getListByKey("ComponentTags");
				if (!oFF.PrUtils.isListEmpty(componentTagList))
				{
					let componentTagging = modelComponent.getTagging();
					for (let i = 0; i < componentTagList.size(); i++)
					{
						let currentComponentTag = componentTagList.getStructureAt(i);
						if (oFF.notNull(currentComponentTag))
						{
							let currentKey = currentComponentTag.getStringByKey("KEY");
							if (oFF.XStringUtils.isNotNullAndNotEmpty(currentKey))
							{
								componentTagging.put(currentKey, currentComponentTag.getStringByKey("VALUE"));
							}
						}
					}
				}
			}
		}
	}
};

oFF.QInAValueUtils = {

	_importValueInternal:function(importer, valueBag, inaElement, parameterName, valueType, field, returnValue)
	{
			let useSapDateFormat = importer.m_capabilities.supportsSapDate();
		let useFieldLiteralValue = oFF.PrUtils.getBooleanValueProperty(inaElement, "FieldLiteralValue", false);
		let parameterName2 = parameterName;
		if (oFF.isNull(parameterName2))
		{
			parameterName2 = "Value";
		}
		let applyFieldValue = !returnValue && oFF.notNull(field) && useFieldLiteralValue;
		let valueType2 = applyFieldValue ? field.getValueType() : valueType;
		if (oFF.isNull(valueType2))
		{
			let inaValueType = inaElement.getStringByKey(oFF.XStringUtils.concatenate2(parameterName2, "Type"));
			valueType2 = oFF.QInAConverter.lookupValueType(inaValueType);
		}
		if ((valueType2 === oFF.XValueType.DOUBLE || valueType2 === oFF.XValueType.DECIMAL_FLOAT) && inaElement.hasStringByKey(parameterName2))
		{
			valueType2 = oFF.XValueType.STRING;
		}
		if (oFF.isNull(valueType))
		{
			useSapDateFormat = false;
		}
		let fieldValue;
		let stringValue;
		if (valueType2 === oFF.XValueType.STRING)
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			if (returnValue)
			{
				return oFF.XStringValue.create(stringValue);
			}
			if (oFF.isNull(field) || !useFieldLiteralValue)
			{
				valueBag.setString(stringValue);
			}
			else
			{
				let dimension = field.getDimension();
				let dimensionMember = dimension.isStructure() ? dimension.getDimensionMember(stringValue) : null;
				if (oFF.notNull(dimensionMember))
				{
					valueBag.setDimensionMember(dimensionMember);
				}
				else
				{
					fieldValue = field.createFieldLiteralValue();
					fieldValue.setString(stringValue);
					valueBag.setFieldValue(fieldValue);
				}
			}
		}
		else if (valueType2 === oFF.XValueType.DECIMAL_FLOAT)
		{
			let decimalFloat = oFF.QInAValueUtils.getDecimalFLoat(inaElement, parameterName2);
			if (returnValue)
			{
				return decimalFloat;
			}
			if (!applyFieldValue)
			{
				valueBag.setDecFloat(decimalFloat);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setValue(decimalFloat);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.DOUBLE)
		{
			let doubleValue = oFF.QInAValueUtils.getDouble(inaElement, parameterName2);
			if (returnValue)
			{
				return oFF.XDoubleValue.create(doubleValue);
			}
			if (!applyFieldValue)
			{
				valueBag.setDouble(doubleValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setDouble(doubleValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.INTEGER)
		{
			let intValue = inaElement.getIntegerByKey(parameterName2);
			if (returnValue)
			{
				return oFF.XIntegerValue.create(intValue);
			}
			if (!applyFieldValue)
			{
				valueBag.setInteger(intValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setInteger(intValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.BOOLEAN)
		{
			let booleanValue = inaElement.getBooleanByKey(parameterName2);
			if (returnValue)
			{
				return oFF.XBooleanValue.create(booleanValue);
			}
			valueBag.setBoolean(booleanValue);
		}
		else if (valueType2 === oFF.XValueType.LONG)
		{
			let longValue = oFF.PrUtils.getLongValueProperty(inaElement, parameterName2, 0);
			if (returnValue)
			{
				return oFF.XLongValue.create(longValue);
			}
			if (!applyFieldValue)
			{
				valueBag.setLong(longValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setLong(longValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.DATE)
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let dateValue = oFF.XDate.createDateFromStringWithFlag(stringValue, useSapDateFormat);
			if (returnValue)
			{
				return dateValue;
			}
			if (!applyFieldValue)
			{
				valueBag.setDate(dateValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setDate(dateValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.TIME)
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let timeValue = oFF.XTime.createTimeFromStringWithFlag(stringValue, useSapDateFormat);
			if (returnValue)
			{
				return timeValue;
			}
			valueBag.setTime(timeValue);
		}
		else if (valueType2 === oFF.XValueType.DATE_TIME)
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let dateTimeValue = oFF.XDateTime.createDateTimeFromStringWithFlag(stringValue, useSapDateFormat);
			if (returnValue)
			{
				return dateTimeValue;
			}
			if (!applyFieldValue)
			{
				valueBag.setDateTime(dateTimeValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setDate(dateTimeValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2.isSpatial())
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let geometry = oFF.XGeometryValue.createGeometryValueWithWkt(stringValue);
			if (returnValue)
			{
				return geometry;
			}
			valueBag.setValue(geometry);
			if (importer.m_capabilities.supportsSpatialFilterSrid() && inaElement.containsKey("SRID"))
			{
				valueBag.getGeometry().setSrid(oFF.XIntegerValue.create(inaElement.getIntegerByKey("SRID")));
			}
		}
		else if (valueType2 === oFF.XValueType.UNSUPPORTED)
		{
			return null;
		}
		else if (valueType2 === oFF.XValueType.VARIABLE || valueType2 === oFF.XValueType.CURRENT_MEMBER)
		{
			if (!returnValue)
			{
				valueBag.setFilterValueType(valueType2);
			}
			return null;
		}
		else
		{
			importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate3("Unsupported value type '", valueType2.getName(), "'"));
			return null;
		}
		return null;
	},
	containsEscapedQuote:function(junkKey)
	{
			return oFF.XStringUtils.isNotNullAndNotEmpty(junkKey) && (oFF.XString.getCharAt(junkKey, 0) === 92 || oFF.XString.getCharAt(junkKey, 0) === 34) && (oFF.XString.getCharAt(junkKey, oFF.XString.size(junkKey) - 1) === 92 || oFF.XString.getCharAt(junkKey, oFF.XString.size(junkKey) - 1) === 34);
	},
	correctRemovingUnwantedBackslashAndQuotes:function(junkKey)
	{
			let cleanedValue = junkKey;
		while (oFF.QInAValueUtils.containsEscapedQuote(cleanedValue))
		{
			cleanedValue = oFF.XStringUtils.stripChars(cleanedValue, 1);
		}
		return cleanedValue;
	},
	exportFieldValue:function(exporter, parameterName, inaElement, field, valueAccess, valueType)
	{
			let parameterName2 = parameterName;
		if (oFF.isNull(parameterName2))
		{
			parameterName2 = "Value";
		}
		let valueType2 = valueType;
		if (oFF.isNull(valueType2))
		{
			valueType2 = valueAccess.getValueType();
			let inaValueType = oFF.QInAConverter.lookupValueTypeInA(valueType2);
			inaElement.putString(oFF.XStringUtils.concatenate2(parameterName2, "Type"), inaValueType);
			exporter.m_capabilities.setSupportsSapDate(false);
		}
		let valueType3 = valueAccess.getValueType();
		if (valueType3 === oFF.XValueType.DATE || valueType3 === oFF.XValueType.TIME || valueType3 === oFF.XValueType.DATE_TIME)
		{
			valueType2 = valueType3;
		}
		if (valueType2 === oFF.XValueType.STRING)
		{
			inaElement.putString(parameterName2, valueAccess.getString());
		}
		else if (valueType2 === oFF.XValueType.INTEGER)
		{
			inaElement.putInteger(parameterName2, valueAccess.getInteger());
		}
		else if (valueType2 === oFF.XValueType.LONG)
		{
			inaElement.putLong(parameterName2, valueAccess.getLong());
		}
		else if (valueType2 === oFF.XValueType.DOUBLE || valueType2 === oFF.XValueType.DECIMAL_FLOAT)
		{
			if (valueAccess.getValueType() === oFF.XValueType.STRING || exporter.m_capabilities.supportsStringsForNumericValues())
			{
				inaElement.putString(parameterName2, valueAccess.getString());
			}
			else
			{
				inaElement.putDouble(parameterName2, valueAccess.getDouble());
			}
		}
		else if (valueType2 === oFF.XValueType.BOOLEAN)
		{
			inaElement.putBoolean(parameterName2, valueAccess.getBoolean());
		}
		else if (valueType2 === oFF.XValueType.DATE)
		{
			let dateToSet = oFF.XValueUtil.convertValue(valueAccess.getValue(), oFF.XValueType.DATE);
			if (oFF.notNull(dateToSet))
			{
				oFF.QInAExportUtil.setDate(exporter, inaElement, parameterName2, dateToSet);
			}
			else
			{
				inaElement.putStringNotNull(parameterName2, valueAccess.getString());
			}
		}
		else if (valueType2 === oFF.XValueType.TIME)
		{
			let timeToSet = oFF.XValueUtil.convertValue(valueAccess.getValue(), oFF.XValueType.TIME);
			if (oFF.notNull(timeToSet))
			{
				oFF.QInAExportUtil.setDate(exporter, inaElement, parameterName2, timeToSet);
			}
			else
			{
				inaElement.putStringNotNull(parameterName2, valueAccess.getString());
			}
		}
		else if (valueType2 === oFF.XValueType.DATE_TIME)
		{
			let dateTimeToSet = oFF.XValueUtil.convertValue(valueAccess.getValue(), oFF.XValueType.DATE_TIME);
			if (oFF.notNull(dateTimeToSet))
			{
				oFF.QInAExportUtil.setDate(exporter, inaElement, parameterName2, dateTimeToSet);
			}
			else
			{
				inaElement.putStringNotNull(parameterName2, valueAccess.getString());
			}
		}
		if (oFF.notNull(valueType2) && valueType2.isSpatial())
		{
			let geometry = valueAccess.getGeometry();
			inaElement.putString(parameterName2, geometry.toWKT());
			let srid = geometry.getSrid();
			if (exporter.m_capabilities.supportsSpatialFilterSrid() && oFF.notNull(srid))
			{
				inaElement.putInteger("SRID", srid.getInteger());
			}
		}
		if (oFF.notNull(field))
		{
			inaElement.putBoolean("FieldLiteralValue", true);
		}
	},
	exportFilterValue:function(exporter, parameterName, inaElement, value, valueType)
	{
			if (valueType === oFF.XValueType.VARIABLE)
		{
			let variableValue = value.getVariableValue();
			if (oFF.notNull(variableValue))
			{
				inaElement.putString(parameterName, variableValue.getName());
				if (oFF.XString.isEqual(parameterName, "Low"))
				{
					inaElement.putString("LowIs", "Variable");
				}
				else if (oFF.XString.isEqual(parameterName, "High"))
				{
					inaElement.putString("HighIs", "Variable");
				}
			}
		}
		else
		{
			oFF.QInAValueUtils.exportPlaceholderValue(exporter, parameterName, inaElement, value, valueType, value.getQueryModel());
		}
	},
	exportPlaceholderValue:function(exporter, parameterName, inaElement, valueAccess, valueType, queryModel)
	{
			let newValueAccess = valueAccess;
		if (valueType === oFF.XValueType.STRING || valueAccess.getValueType() === oFF.XValueType.STRING)
		{
			let updatedStringValue = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, valueAccess.getString(), exporter);
			if (!oFF.XString.isEqual(updatedStringValue, valueAccess.getString()))
			{
				let placeholderValue = oFF.XValueAccess.createWithType(oFF.XValueType.STRING);
				placeholderValue.setString(updatedStringValue);
				newValueAccess = placeholderValue;
			}
		}
		oFF.QInAValueUtils.exportFieldValue(exporter, parameterName, inaElement, null, newValueAccess, valueType);
	},
	exportSupplementsAndValue:function(exporter, parameterName, inaElement, field, value, valueType)
	{
			oFF.QInAValueUtils.exportFieldValue(exporter, parameterName, inaElement, field, value, valueType);
		let supplementValues = value.getSupplementValues();
		if (oFF.XCollectionUtils.hasElements(supplementValues))
		{
			let supplementValuesList = inaElement.putNewList("Supplements");
			let numberOfSupplementValues = supplementValues.size();
			for (let j = 0; j < numberOfSupplementValues; j++)
			{
				let supplement = supplementValuesList.addNewStructure();
				let ixKeyValuePair = supplementValues.get(j);
				supplement.putString("Key", ixKeyValuePair.getKey().toString());
				supplement.putString("Value", ixKeyValuePair.getValue().toString());
			}
		}
	},
	exportValue:function(exporter, parameterName, inaElement, valueAccess, valueType, _queryModel)
	{
			oFF.QInAValueUtils.exportFieldValue(exporter, parameterName, inaElement, null, valueAccess, valueType);
	},
	getDecimalFLoat:function(inaElement, parameterName2)
	{
			let decimalFloat;
		let decFloatElement = inaElement.getByKey(parameterName2);
		if (decFloatElement.isString())
		{
			let stringValue = decFloatElement.getString();
			decimalFloat = oFF.XDecFloatByString.create(stringValue);
		}
		else if (decFloatElement.isNumeric())
		{
			decimalFloat = oFF.XDecFloatByDouble.create(decFloatElement.getDouble());
		}
		else
		{
			decimalFloat = oFF.XDecFloatByString.createZeroValue();
		}
		return decimalFloat;
	},
	getDouble:function(inaElement, parameterName2)
	{
			let doubleValue;
		let doubleElement = inaElement.getByKey(parameterName2);
		if (doubleElement.isString())
		{
			let stringValue = doubleElement.getString();
			doubleValue = oFF.XDouble.convertFromString(stringValue);
		}
		else if (doubleElement.isDouble())
		{
			doubleValue = doubleElement.getDouble();
		}
		else if (doubleElement.isInteger())
		{
			doubleValue = doubleElement.getInteger();
		}
		else
		{
			doubleValue = 0.0;
		}
		return doubleValue;
	},
	importBooleanValues:function(inaList)
	{
			let list = oFF.XList.create();
		for (let idxValue = 0; idxValue < inaList.size(); idxValue++)
		{
			list.add(oFF.XBooleanValue.create(inaList.getBooleanAt(idxValue)));
		}
		return list;
	},
	importDateTimeValues:function(importer, inaList)
	{
			let list = oFF.XList.create();
		for (let i = 0; i < inaList.size(); i++)
		{
			let dateTimeValue = inaList.getStringAt(i);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTimeValue))
			{
				oFF.XCollectionUtils.addIfNotNull(list, oFF.XDateTime.createDateTimeFromStringWithFlag(dateTimeValue, importer.m_capabilities.supportsSapDate()));
			}
		}
		return list;
	},
	importDateValues:function(importer, inaList)
	{
			let list = oFF.XList.create();
		for (let i = 0; i < inaList.size(); i++)
		{
			let dateValue = inaList.getStringAt(i);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateValue))
			{
				oFF.XCollectionUtils.addIfNotNull(list, oFF.XDate.createDateFromStringWithFlag(dateValue, importer.m_capabilities.supportsSapDate()));
			}
		}
		return list;
	},
	importNumericValues:function(importer, inaList, valueType)
	{
			let list = oFF.XList.create();
		for (let i = 0; i < inaList.size(); i++)
		{
			let elementType = inaList.getElementTypeAt(i);
			if (elementType === oFF.PrElementType.STRING)
			{
				list.add(oFF.XDecFloatByString.create(inaList.getStringAt(i)));
			}
			else if (valueType === oFF.XValueType.INTEGER)
			{
				let integerValue = inaList.getIntegerAt(i);
				list.add(oFF.XIntegerValue.create(integerValue));
			}
			else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
			{
				let decimalFloat = oFF.XDecFloatByDouble.create(inaList.getDoubleAt(i));
				list.add(decimalFloat);
			}
			else if (valueType === oFF.XValueType.DOUBLE)
			{
				let doubleValue = inaList.getDoubleAt(i);
				list.add(oFF.XDoubleValue.create(doubleValue));
			}
			else if (valueType === oFF.XValueType.LONG)
			{
				let longValue = inaList.getLongAt(i);
				list.add(oFF.XLongValue.create(longValue));
			}
		}
		return list;
	},
	importStringValues:function(inaList)
	{
			let list = oFF.XList.create();
		for (let idxValue = 0; idxValue < inaList.size(); idxValue++)
		{
			list.add(oFF.XStringValue.create(inaList.getStringAt(idxValue)));
		}
		return list;
	},
	importSupplements:function(importer, value, structure, parameter, supplementFieldNames)
	{
			if (importer.m_capabilities.supportsSupplements() && oFF.notNull(parameter) && oFF.XCollectionUtils.hasElements(supplementFieldNames))
		{
			let supplementValues = structure.getListByKey(parameter);
			if (oFF.notNull(supplementValues))
			{
				let sizeA = supplementValues.size();
				let sizeB = supplementFieldNames.size();
				if (sizeA === sizeB)
				{
					for (let i = 0; i < sizeA; i++)
					{
						value.addSupplementValue(supplementFieldNames.get(i), supplementValues.getStringAt(i));
					}
				}
				else
				{
					importer.addWarning(oFF.ErrorCodes.INVALID_STATE, "InA protocol error: Supplement sizes of values and field names do not match.");
				}
			}
		}
	},
	importSupplementsAndValue:function(importer, valueBag, inaElement, parameterName, valueType, field)
	{
			oFF.QInAValueUtils.importValue(importer, valueBag, inaElement, parameterName, valueType, field);
		let supplementsInA = inaElement.getListByKey("Supplements");
		if (oFF.notNull(supplementsInA) && supplementsInA.hasElements())
		{
			let numberOfSupplements = supplementsInA.size();
			for (let i = 0; i < numberOfSupplements; i++)
			{
				let supplementElement = supplementsInA.getStructureAt(i);
				let key = supplementElement.getByKey("Key");
				let value = supplementElement.getByKey("Value");
				let correctedKey = oFF.QInAValueUtils.correctRemovingUnwantedBackslashAndQuotes(key.getString());
				let correctedValue = oFF.QInAValueUtils.correctRemovingUnwantedBackslashAndQuotes(value.getString());
				valueBag.addSupplementValue(correctedKey, correctedValue);
			}
		}
	},
	importTimeValues:function(importer, inaList)
	{
			let list = oFF.XList.create();
		for (let i = 0; i < inaList.size(); i++)
		{
			let timeValue = inaList.getStringAt(i);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(timeValue))
			{
				oFF.XCollectionUtils.addIfNotNull(list, oFF.XTime.createTimeFromStringWithFlag(timeValue, importer.m_capabilities.supportsSapDate()));
			}
		}
		return list;
	},
	importValue:function(importer, valueBag, inaElement, parameterName, valueType, field)
	{
			oFF.QInAValueUtils._importValueInternal(importer, valueBag, inaElement, parameterName, valueType, field, false);
	},
	importValueByType:function(importer, inaElement, parameterName, valueType)
	{
			return oFF.QInAValueUtils._importValueInternal(importer, null, inaElement, parameterName, valueType, null, true);
	},
	importValueCompounds:function(importer, value, inaStructure, parameter)
	{
			if (oFF.notNull(parameter))
		{
			let componentsIna = inaStructure.getListByKey(parameter);
			if (oFF.notNull(componentsIna))
			{
				for (let i = 0; i < componentsIna.size(); i++)
				{
					let componentIna = componentsIna.getStructureAt(i);
					let valueGroup = value.addNewFilterValueCompound(componentIna.getBooleanByKey("Internal"));
					let groupMembersInA = componentIna.getListByKey("Members");
					if (oFF.notNull(groupMembersInA))
					{
						for (let j = 0; j < groupMembersInA.size(); j++)
						{
							let groupMemberIna = groupMembersInA.getStructureAt(j);
							valueGroup.addMember(groupMemberIna.getStringByKey("Component"), groupMemberIna.getStringByKey("Key"));
						}
					}
				}
			}
		}
	},
	importValueList:function(importer, inaList, valueType)
	{
			if (oFF.notNull(inaList))
		{
			if (valueType.isNumber())
			{
				return oFF.QInAValueUtils.importNumericValues(importer, inaList, valueType);
			}
			if (valueType.isString())
			{
				return oFF.QInAValueUtils.importStringValues(inaList);
			}
			if (valueType === oFF.XValueType.DATE)
			{
				return oFF.QInAValueUtils.importDateValues(importer, inaList);
			}
			if (valueType === oFF.XValueType.TIME)
			{
				return oFF.QInAValueUtils.importTimeValues(importer, inaList);
			}
			if (valueType === oFF.XValueType.DATE_TIME)
			{
				return oFF.QInAValueUtils.importDateTimeValues(importer, inaList);
			}
			if (valueType === oFF.XValueType.BOOLEAN)
			{
				return oFF.QInAValueUtils.importBooleanValues(inaList);
			}
		}
		return oFF.XList.create();
	}
};

oFF.QInARepoDataSourceBlending = {

	exportAttributeMapping:function(attributeMapping)
	{
			let inaAttributeMapping = oFF.PrFactory.createStructure();
		inaAttributeMapping.putString("AttributeName", attributeMapping.getAttributeName());
		inaAttributeMapping.putBoolean("IsLinkKey", attributeMapping.isLinkKey());
		let mappingIterator = attributeMapping.getAttributeMappingDefinitions().getIterator();
		let inaMappings = oFF.QInARepoDataSourceBlending.exportMappingDefinitions(mappingIterator);
		oFF.XObjectExt.release(mappingIterator);
		inaAttributeMapping.put("Mapping", inaMappings);
		oFF.QInARepoDataSourceBlending.exportConstantMapping(inaMappings, attributeMapping.getConstantMappings().getIterator());
		return inaAttributeMapping;
	},
	exportBlendingMappings:function(mappings)
	{
			let inaMappings = oFF.PrFactory.createList();
		let mappingIterator = mappings.getIterator();
		while (mappingIterator.hasNext())
		{
			let mapping = mappingIterator.next();
			let inaMapping = oFF.QInARepoDataSourceBlending.exportDimensionMapping(mapping);
			inaMappings.add(inaMapping);
		}
		return inaMappings;
	},
	exportBlendingSources:function(format, blendingDefinition, isBlendingDataRequest)
	{
			let blendingSourceFormat = format;
		let inaSources = oFF.PrFactory.createList();
		let sourceIterator = blendingDefinition.getSources().getIterator();
		while (sourceIterator.hasNext())
		{
			let source = sourceIterator.next();
			let queryModel = source.getQueryModel();
			if (oFF.isNull(queryModel))
			{
				return null;
			}
			let inaSource = inaSources.addNewStructure();
			inaSource.putString("Type", "Query");
			inaSource.putString("AliasName", source.getQueryAliasName());
			inaSource.putString("ObjectName", source.getQueryAliasName());
			let inaDefiningContext = inaSource.putNewStructure("DefiningContext");
			let inaQuery = queryModel.serializeToElement(blendingSourceFormat).asStructure();
			oFF.QInARepoDataSourceBlending.exportOptimizerHints(inaQuery, queryModel.getOptimizerHintsByExecutionEngine(oFF.ExecutionEngine.MDS));
			let queryManager = queryModel.getQueryManager();
			let persistenceIdentifier = queryManager.getResultSetPersistenceIdentifier();
			if (!source.isRemoteSource() && oFF.XStringUtils.isNotNullAndNotEmpty(persistenceIdentifier) && isBlendingDataRequest)
			{
				inaQuery.getStructureByKey("DataSource").putString("InstanceId", persistenceIdentifier);
			}
			let inaResultSetFeatures = oFF.QInARepoDataSourceBlending.exportResultSetFeatures(queryModel, true);
			inaQuery.put("ResultSetFeatureRequest", inaResultSetFeatures);
			inaDefiningContext.put("Definition", inaQuery);
		}
		oFF.XObjectExt.release(sourceIterator);
		return inaSources;
	},
	exportConstantMapping:function(inaDefinitions, definitionIterator)
	{
			while (definitionIterator.hasNext())
		{
			let constantMapping = definitionIterator.next();
			let inaConstantMapping = oFF.PrFactory.createStructure();
			inaConstantMapping.putString("AliasName", constantMapping.getQueryAliasName());
			let inaMappingDefinition = inaConstantMapping.putNewStructure("MappingDefinition");
			let inaMember = inaMappingDefinition.putNewStructure("Constant");
			inaMember.putString("Value", constantMapping.getMemberName());
			inaMember.putString("ValueType", oFF.QInAConverter.lookupValueTypeInA(constantMapping.getValueType()));
			inaDefinitions.add(inaConstantMapping);
		}
	},
	exportDataSourceBlending:function(format, blendingDefinition, isBlendingDataRequest)
	{
			let inaRequest = oFF.PrFactory.createStructure();
		let inaMetadata = inaRequest.putNewStructure("Metadata");
		let inaDataSource = inaMetadata.putNewStructure("DataSource");
		inaDataSource.putString("Type", oFF.QueryManagerMode.BLENDING.getName());
		let objectName = oFF.XStringBuffer.create();
		for (let idx = 0; idx < blendingDefinition.getSources().size(); idx++)
		{
			objectName.append(blendingDefinition.getSources().get(idx).getQueryAliasName());
		}
		let objectNameStr = objectName.toString();
		if (objectName.length() >= 256)
		{
			objectNameStr = oFF.XSha1.createSHA1(objectNameStr);
		}
		inaDataSource.putString("ObjectName", objectNameStr);
		let inaBlendingSources = oFF.QInARepoDataSourceBlending.exportBlendingSources(format, blendingDefinition, isBlendingDataRequest);
		inaDataSource.put("Sources", inaBlendingSources);
		let inaBlendingMappings = oFF.QInARepoDataSourceBlending.exportBlendingMappings(blendingDefinition.getMappings());
		inaDataSource.put("Mappings", inaBlendingMappings);
		return inaDataSource;
	},
	exportDimensionMapping:function(dimensionMapping)
	{
			let inaMapping = oFF.PrFactory.createStructure();
		inaMapping.putString("DimensionName", dimensionMapping.getMemberName());
		inaMapping.putString("LinkType", dimensionMapping.getLinkType().getName());
		if (dimensionMapping.isPreservingMembers())
		{
			inaMapping.putBoolean("PreserveMembers", true);
		}
		if (!dimensionMapping.isReturningOriginKeys())
		{
			inaMapping.putBoolean("ReturnOriginKeys", false);
		}
		let definitionIterator = dimensionMapping.getMappingDefinitions().getIterator();
		let inaDefinitions = oFF.QInARepoDataSourceBlending.exportMappingDefinitions(definitionIterator);
		oFF.XObjectExt.release(definitionIterator);
		inaMapping.put("Mapping", inaDefinitions);
		if ((dimensionMapping.getLinkType() === oFF.BlendingLinkType.ALL_DATA || dimensionMapping.getLinkType() === oFF.BlendingLinkType.NONE) && dimensionMapping.getConstantMappings().hasElements())
		{
			oFF.QInARepoDataSourceBlending.exportConstantMapping(inaDefinitions, dimensionMapping.getConstantMappings().getIterator());
		}
		let inaAttributeMappings = oFF.PrFactory.createList();
		let attributeMappingIterator = dimensionMapping.getAttributeMappings().getIterator();
		while (attributeMappingIterator.hasNext())
		{
			let attributeMapping = attributeMappingIterator.next();
			let inaAttributeMapping = oFF.QInARepoDataSourceBlending.exportAttributeMapping(attributeMapping);
			inaAttributeMappings.add(inaAttributeMapping);
		}
		oFF.XObjectExt.release(attributeMappingIterator);
		if (!inaAttributeMappings.isEmpty())
		{
			inaMapping.put("AttributeMappings", inaAttributeMappings);
		}
		return inaMapping;
	},
	exportMappingDefinitions:function(definitionIterator)
	{
			let inaDefinitions = oFF.PrFactory.createList();
		while (definitionIterator.hasNext())
		{
			let definition = definitionIterator.next();
			let inaDefinition = inaDefinitions.addNewStructure();
			inaDefinition.putString("AliasName", definition.getQueryAliasName());
			let inaMappingDefinition = inaDefinition.putNewStructure("MappingDefinition");
			let inaMember = inaMappingDefinition.putNewStructure("Member");
			inaMember.putString("Name", definition.getMemberName());
		}
		return inaDefinitions;
	},
	exportOptimizerHints:function(inaDefinition, optimizerHints)
	{
			if (oFF.XCollectionUtils.hasElements(optimizerHints))
		{
			let sortedList = oFF.XList.createWithList(optimizerHints.getKeysAsReadOnlyList());
			sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
			let inaOptimizerHints = inaDefinition.putNewStructure("Hints");
			let inaAEngineHints = inaOptimizerHints.putNewList(oFF.ExecutionEngine.MDS.getName());
			let sortedListSize = sortedList.size();
			for (let i = 0; i < sortedListSize; i++)
			{
				let hintName = sortedList.get(i);
				let inaHint = inaAEngineHints.addNewStructure();
				inaHint.putString("Key", hintName);
				inaHint.putString("Value", optimizerHints.getByKey(hintName));
			}
		}
	},
	exportResultSetFeatures:function(sourceQueryModel, isSubQuery)
	{
			let options = oFF.PrFactory.createStructure();
		options.putBoolean("UseDefaultAttributeKey", false);
		let queryManager = sourceQueryModel.getQueryManager();
		if (queryManager.getMaxResultRecords() !== -1)
		{
			options.putLong("MaxResultRecords", queryManager.getMaxResultRecords());
		}
		oFF.QInARepoOptions.exportPaging(options, queryManager);
		oFF.QInARepoOptions.exportSuppressKeyfigureCalculation(options, queryManager);
		options.putString("ResultFormat", "Version2");
		options.putString("ResultEncoding", "None");
		if (isSubQuery)
		{
			options.putBoolean("IsCubeBlendingSubquery", true);
		}
		if (!queryManager.isResultSetTransportEnabled())
		{
			options.putBoolean("ReturnEmptyJsonResultSet", true);
		}
		return options;
	},
	getExtendedStructureMemberNames:function(queryModel)
	{
			let structureMembers = queryModel.getMeasureDimension().getExtendedStructureMembers();
		return oFF.XCollectionUtils.createListOfNames(structureMembers);
	},
	updateBWRemoteSource:function(inaQuery, systemType, queryModel)
	{
			if (systemType.isTypeOf(oFF.SystemType.BW) || systemType.isTypeOf(oFF.SystemType.VIRTUAL_INA))
		{
			inaQuery.remove("FixedFilter");
			inaQuery.remove("DynamicFilter");
			inaQuery.remove("Filter");
			inaQuery.remove("Conditions");
			inaQuery.remove("Query");
			inaQuery.remove("QueryDataCells");
			inaQuery.remove("Sort");
			inaQuery.remove("ExtendedSortTypes");
			inaQuery.remove("Variables");
			inaQuery.remove("UniversalDisplayHierarchies");
			let extStructureMemberNames = oFF.QInARepoDataSourceBlending.getExtendedStructureMemberNames(queryModel);
			let inaDimensions = inaQuery.getListByKey("Dimensions");
			let dimensionCount = oFF.PrUtils.getListSize(inaDimensions, 0);
			for (let i = 0; i < dimensionCount; i++)
			{
				let inaMembers = inaDimensions.getStructureAt(i).getListByKey("Members");
				let memberCount = oFF.PrUtils.getListSize(inaMembers, 0);
				for (let k = 0; k < memberCount; k++)
				{
					let inaMember = inaMembers.getStructureAt(k);
					if (extStructureMemberNames.contains(inaMember.getStringByKey("Name")))
					{
						inaMember.remove("Selection");
					}
				}
			}
		}
	},
	updateRemoteDataSource:function(inaQuery, queryManager, isBlendingDataRequest, localSystemDescription)
	{
			let dataSource = inaQuery.putNewStructure("DataSource");
		dataSource.putString("Type", "SerializedData");
		dataSource.putString("InstanceId", queryManager.getResultSetPersistenceIdentifier());
		let resultSetContainer = queryManager.getActiveResultSetContainer();
		let systemDescription = queryManager.getSystemDescription();
		let hasSerializedData = oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getSerializedView()) && (!isBlendingDataRequest || oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getSerializedCube()));
		if (!hasSerializedData && localSystemDescription.isSystemMappingValid(systemDescription))
		{
			let mappingRemoteHost = systemDescription.getSystemMapping(localSystemDescription.getSystemName());
			dataSource.putString("ObjectName", mappingRemoteHost.getDeserializeTable());
			dataSource.putString("SchemaName", mappingRemoteHost.getDeserializeSchema());
		}
		else
		{
			let serializedData = dataSource.putNewStructure("SerializedData");
			serializedData.putString("View", resultSetContainer.getSerializedView());
			if (isBlendingDataRequest)
			{
				serializedData.putStringNotNullAndNotEmpty("Cube", resultSetContainer.getSerializedCube());
			}
		}
		oFF.QInARepoDataSourceBlending.updateBWRemoteSource(inaQuery, queryManager.getSystemType(), queryManager.getQueryModel());
	}
};

oFF.QInARepoDataSourceExtDims = {

	checkIsValid:function(exporter, extDimension)
	{
			let joinType = extDimension.getJoinType();
		if (oFF.isNull(joinType))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' is missing a JoinType"));
			return false;
		}
		let dimensionType = extDimension.getDimensionType();
		if (dimensionType.isTypeOf(oFF.DimensionType.GIS_DIMENSION) && joinType.isTypeOf(oFF.JoinType._TIME))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Spatial extended dimensions must not have join type INNER");
			return false;
		}
		else if ((dimensionType.isTypeOf(oFF.DimensionType.TIME) || dimensionType.isTypeOf(oFF.DimensionType.DATE)) && joinType.isTypeOf(oFF.JoinType._SPATIAL))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Time extended dimensions must not have spatial join type");
			return false;
		}
		let externalDataSource = extDimension.getDataSource();
		if (oFF.isNull(externalDataSource))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' is missing its DataSource"));
			return false;
		}
		let joinParameters = extDimension.getJoinParameters();
		if (joinType === oFF.JoinType.WITHIN_DISTANCE && joinParameters.isEmpty())
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' of joinType 'WITHIN_DISTANCE' is expected to have the 2 parameters 'distance' and 'unit of measure' (in that order)"));
			return false;
		}
		return true;
	},
	exportQd:function(exporter, dataSource, inaDataSource)
	{
			let extendedDimensions = dataSource.getExtendedDimensions();
		if (oFF.XCollectionUtils.hasElements(extendedDimensions))
		{
			let inaExtendedDimensions = inaDataSource.putNewList("ExtendedDimensions");
			for (let extDimIdx = 0; extDimIdx < extendedDimensions.size(); extDimIdx++)
			{
				let extDimension = extendedDimensions.get(extDimIdx);
				if (!oFF.QInARepoDataSourceExtDims.checkIsValid(exporter, extDimension))
				{
					return;
				}
				let inaExtendedDimension = inaExtendedDimensions.addNewStructure();
				inaExtendedDimension.putString("Name", extDimension.getName());
				inaExtendedDimension.putString("Description", extDimension.getText());
				inaExtendedDimension.putInteger("DimensionType", oFF.QInAConverter.lookupDimensionTypeInA(extDimension.getDimensionType()));
				inaExtendedDimension.putString("JoinFieldName", extDimension.getJoinField());
				inaExtendedDimension.putString("JoinFieldNameInExtendedDimension", extDimension.getJoinFieldNameExternal());
				inaExtendedDimension.putString("JoinType", extDimension.getJoinType().getName());
				let joinCardinality = extDimension.getJoinCardinality();
				if (oFF.notNull(joinCardinality))
				{
					inaExtendedDimension.putString("JoinCardinality", joinCardinality.getName());
				}
				let queryManager = dataSource.getQueryManager();
				let modelCapabilities = null;
				if (oFF.notNull(queryManager))
				{
					modelCapabilities = queryManager.getModelCapabilities();
				}
				if (oFF.isNull(modelCapabilities))
				{
					modelCapabilities = exporter.m_capabilities;
				}
				if (modelCapabilities.supportsDimensionVisibility() && modelCapabilities.supportsExtendedDimensionVisibility())
				{
					let dimensionVisibility = extDimension.getVisibility();
					if (oFF.notNull(dimensionVisibility))
					{
						inaExtendedDimension.putString("Visibility", dimensionVisibility.getName());
					}
				}
				let joinParameters = extDimension.getJoinParameters();
				if (joinParameters.hasElements())
				{
					let inaJoinParameters = inaExtendedDimension.putNewList("JoinParameters");
					inaJoinParameters.addAllStrings(joinParameters);
				}
				let externalDataSource = extDimension.getDataSource();
				let inaExternalDataSource = inaExtendedDimension.putNewStructure("DataSource");
				oFF.QInARepoDataSourceProperties.exportQd(exporter, externalDataSource, inaExternalDataSource, false);
				let type = externalDataSource.getType();
				if (oFF.isNull(type))
				{
					inaExternalDataSource.putString("Type", oFF.MetaObjectType.DBVIEW.getCamelCaseName());
				}
				else
				{
					inaExternalDataSource.putString("Type", type.getCamelCaseName());
				}
				if (modelCapabilities.supportsExtendedDimensionsChangeDefaultRenamingAndDescription())
				{
					inaExtendedDimension.putStringNotNull("FieldRenamingMode", extDimension.getRenamingMode());
				}
			}
		}
	},
	importExtendedDataSource:function(inaExtendedDimension, extendedDimension)
	{
			let inaExternalDataSource = inaExtendedDimension.getStructureByKey("DataSource");
		if (oFF.notNull(inaExternalDataSource))
		{
			let externalDataSource = oFF.QFactory.createDataSource();
			oFF.QInARepoDataSourceProperties.importQd(externalDataSource, inaExternalDataSource);
			let type;
			let inaType = inaExternalDataSource.getStringByKey("Type");
			if (oFF.isNull(inaType))
			{
				type = oFF.MetaObjectType.DBVIEW;
			}
			else
			{
				type = oFF.MetaObjectType.lookup(oFF.XString.toLowerCase(inaType));
			}
			externalDataSource.setType(type);
			extendedDimension.setDataSource(externalDataSource);
		}
	},
	importJoinParameter:function(inaExtendedDimension, extendedDimension)
	{
			let inaJoinParameters = inaExtendedDimension.getListByKey("JoinParameters");
		if (oFF.notNull(inaJoinParameters))
		{
			let joinParameters = extendedDimension.getJoinParameters();
			joinParameters.clear();
			let joinParamSize = inaJoinParameters.size();
			for (let j = 0; j < joinParamSize; j++)
			{
				joinParameters.add(inaJoinParameters.getStringAt(j));
			}
		}
	},
	importQd:function(importer, dataSource, inaDataSource)
	{
			if (importer.m_capabilities.supportsExtendedDimensions())
		{
			let extendedDimensionsBase = dataSource.getExtendedDimensionsBase();
			extendedDimensionsBase.clear();
			let inaExtendedDimensions = inaDataSource.getListByKey("ExtendedDimensions");
			if (oFF.notNull(inaExtendedDimensions))
			{
				let extDimSize = inaExtendedDimensions.size();
				for (let i = 0; i < extDimSize; i++)
				{
					let inaExtendedDimension = inaExtendedDimensions.getStructureAt(i);
					let name = inaExtendedDimension.getStringByKey("Name");
					let joinFieldName = inaExtendedDimension.getStringByKey("JoinFieldName");
					let joinFieldNameInExtendedDim = inaExtendedDimension.getStringByKey("JoinFieldNameInExtendedDimension");
					let extendedDimension = dataSource.addNewExtendedDimension(name, joinFieldName, joinFieldNameInExtendedDim);
					extendedDimension.setText(inaExtendedDimension.getStringByKey("Description"));
					let joinTypeValue = inaExtendedDimension.getStringByKey("JoinType");
					let joinType = oFF.JoinType.lookup(joinTypeValue);
					extendedDimension.setJoinType(joinType);
					oFF.QInARepoDataSourceExtDims.importJoinParameter(inaExtendedDimension, extendedDimension);
					oFF.QInARepoDataSourceExtDims.importExtendedDataSource(inaExtendedDimension, extendedDimension);
					let renamingMode = inaExtendedDimension.getStringByKey("FieldRenamingMode");
					if (oFF.notNull(renamingMode))
					{
						extendedDimension.setRenamingMode(renamingMode);
					}
					let joinCardinalityValue = inaExtendedDimension.getStringByKey("JoinCardinality");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(joinCardinalityValue))
					{
						let joinCardinality = oFF.JoinCardinality.lookup(joinCardinalityValue);
						extendedDimension.setJoinCardinality(joinCardinality);
					}
					let extendedDimensionVisibility = inaExtendedDimension.getStringByKey("Visibility");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(extendedDimensionVisibility))
					{
						let dimensionVisibility = oFF.DimensionVisibility.lookup(extendedDimensionVisibility);
						if (oFF.notNull(dimensionVisibility))
						{
							extendedDimension.setVisibility(dimensionVisibility);
						}
					}
				}
			}
		}
	}
};

oFF.QInARepoDataSourceProperties = {

	exportQd:function(exporter, dataSource, inaDataSource, withRunAsUser)
	{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "ObjectName", dataSource.getObjectName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "Environment", dataSource.getEnvironmentName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "PackageName", dataSource.getPackageName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "SchemaName", dataSource.getSchemaName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "AliasName", dataSource.getAlias());
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.UNIVERSE_SOURCE_QUERY) && oFF.QInARepoDataSourceProperties.exportSourceQuery(dataSource))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "SourceQuery", dataSource.getSourceQuery());
		}
		let customProperties = dataSource.getCustomProperties();
		let customPropertiesIt = customProperties.getKeysAsIterator();
		if (customPropertiesIt.hasNext())
		{
			let inaCustomProperties = inaDataSource.putNewStructure("CustomProperties");
			while (customPropertiesIt.hasNext())
			{
				let key = customPropertiesIt.next();
				if (!oFF.XString.isEqual(key, oFF.QDataSource.SOURCE_QUERY_INA) || oFF.QInARepoDataSourceProperties.exportSourceQuery(dataSource))
				{
					oFF.QInAExportUtil.setNonEmptyString(inaCustomProperties, key, customProperties.getByKey(key));
				}
			}
		}
		let dataArea = dataSource.getDataArea();
		if (!oFF.XString.isEqual(dataArea, "DEFAULT"))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "DataArea", dataArea);
		}
		if (withRunAsUser)
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "RunAsUser", dataSource.getRunAsUser());
		}
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "Description", dataSource.getText());
	},
	exportSourceQuery:function(dataSource)
	{
			let skipSourceQuery = false;
		let context = dataSource.getContext();
		if (oFF.notNull(context))
		{
			let queryManager = context.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				let queryServiceConfig = queryManager.getQueryServiceConfig();
				skipSourceQuery = queryServiceConfig.isSkipSourceQueryForNonMetadataRequests();
			}
		}
		return !skipSourceQuery;
	},
	importQd:function(dataSource, structure)
	{
			let name = structure.getStringByKey("ObjectName");
		dataSource.setName(name);
		let environmentName = structure.getStringByKey("Environment");
		dataSource.setEnvironmentName(environmentName);
		let packageName = structure.getStringByKey("PackageName");
		dataSource.setPackageName(packageName);
		let schemaName = structure.getStringByKey("SchemaName");
		dataSource.setSchemaName(schemaName);
		let sourceQuery = structure.getStringByKey("SourceQuery");
		dataSource.setSourceQuery(sourceQuery);
		let aliasName = structure.getStringByKey("AliasName");
		dataSource.setAlias(aliasName);
		let dataArea = structure.getStringByKey("DataArea");
		dataSource.setDataArea(dataArea);
		let runAsUser = structure.getStringByKey("RunAsUser");
		dataSource.setRunAsUser(runAsUser);
		let text = structure.getStringByKey("Description");
		dataSource.setText(text);
		let inaCustomProperties = structure.getStructureByKey("CustomProperties");
		if (oFF.notNull(inaCustomProperties))
		{
			let customPropertyNames = inaCustomProperties.getKeysAsReadOnlyList();
			let size = customPropertyNames.size();
			for (let i = 0; i < size; i++)
			{
				let key = customPropertyNames.get(i);
				dataSource.addCustomProperty(key, inaCustomProperties.getStringByKey(key));
			}
		}
	}
};

oFF.QInARepoInputEnablementRules = {

	exportInputEnablementRules:function(inaDefinition, provider)
	{
			let inputEnablementRules = provider.getInputEnablementRules();
		if (!provider.getModelCapabilities().supportsInputEnablementFilterSettings())
		{
			return;
		}
		let inputReadinessMainQuery = provider.getInputReadinessMainQuery();
		let cacheMode = provider.getInputReadinessCacheMode();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inputReadinessMainQuery) || oFF.notNull(cacheMode))
		{
			let asyncInputStructure = inaDefinition.putNewStructure("AsyncInputReadiness");
			asyncInputStructure.putStringNotNull("MainQuery", inputReadinessMainQuery);
			asyncInputStructure.putStringNotNull("CacheMode", oFF.QInAConverter.lookupInputEnablementCacheModeInA(cacheMode));
		}
		if (oFF.XCollectionUtils.hasElements(inputEnablementRules))
		{
			let inputEnablementFilter = inaDefinition.putNewStructure("InputEnablementFilter");
			let inaRules = inputEnablementFilter.putNewList("Rules");
			for (let i = 0; i < inputEnablementRules.size(); i++)
			{
				let rule = inputEnablementRules.get(i);
				let ruleStructure = inaRules.addNewStructure();
				ruleStructure.putString("Mode", oFF.QInAConverter.lookupInputEnablementModeInA(rule.getMode()));
				ruleStructure.putString("Reason", rule.getReason());
			}
		}
	},
	importInputEnablementRules:function(inaDefinition, provider)
	{
			provider.clearInputEnablementRules();
		let asyncInputStructure = inaDefinition.getStructureByKey("AsyncInputReadiness");
		if (oFF.notNull(asyncInputStructure))
		{
			let mainQuery = asyncInputStructure.getStringByKey("MainQuery");
			provider.setInputReadinessMainQuery(mainQuery);
			let cacheMode = oFF.QInAConverter.lookupInputCacheMode(asyncInputStructure.getStringByKey("CacheMode"));
			provider.setInputReadinessCacheMode(cacheMode);
		}
		let inputEnablementFilter = inaDefinition.getStructureByKey("InputEnablementFilter");
		if (oFF.notNull(inputEnablementFilter))
		{
			let inaRules = inputEnablementFilter.getListByKey("Rules");
			if (oFF.XCollectionUtils.hasElements(inaRules))
			{
				for (let i = 0; i < inaRules.size(); i++)
				{
					let inaRule = inaRules.getStructureAt(i);
					let inaMode = inaRule.getStringByKey("Mode");
					let inputEnablementRuleMode = oFF.QInAConverter.lookupInputEnablementMode(inaMode);
					let reason = inaRule.getStringByKey("Reason");
					provider.addNewInputEnablementRule(inputEnablementRuleMode, reason);
				}
			}
		}
	}
};

oFF.QInARepoInputReadinessFilter = {

	exportInputReadinessFilter:function(inaDefinition, provider)
	{
			let inputReadinessFilter = provider.getInputReadinessFilter();
		if (oFF.isNull(inputReadinessFilter) || !provider.getModelCapabilities().supportsInputReadinessFilter())
		{
			return;
		}
		let inaInputReadinessFilter = inaDefinition.putNewStructure("InputReadinessFilter");
		inaInputReadinessFilter.putString("Mode", oFF.QInAConverter.lookupInputReadinessFilterModeInA(inputReadinessFilter.getMode()));
		let states = inputReadinessFilter.getStates();
		if (!states.isEmpty())
		{
			let inaInputReadinessFilterStates = inaInputReadinessFilter.putNewList("InputReadinessStates");
			for (let i = 0; i < states.size(); ++i)
			{
				let state = states.get(i);
				let inaInputReadinessFilterState = inaInputReadinessFilterStates.addNewStructure();
				inaInputReadinessFilterState.putString("Flag", state.getFlag());
				inaInputReadinessFilterState.putString("Parameter", state.getParameter());
			}
		}
	},
	importInputReadinessFilter:function(inaDefinition, provider)
	{
			let inaInputReadinessFilter = inaDefinition.getStructureByKey("InputReadinessFilter");
		if (oFF.isNull(inaInputReadinessFilter))
		{
			provider.clearInputReadinessFilter();
		}
		else
		{
			let inaInputReadinessFilterMode = inaInputReadinessFilter.getStringByKey("Mode");
			provider.setInputReadinessFilter(oFF.QInAConverter.lookupInputReadinessFilterMode(inaInputReadinessFilterMode));
			let inaInputReadinessFilterStates = inaInputReadinessFilter.getListByKey("InputReadinessStates");
			for (let i = 0; i < inaInputReadinessFilterStates.size(); i++)
			{
				let inaInputReadinessFilterState = inaInputReadinessFilterStates.getStructureAt(i);
				let inaStateFlag = inaInputReadinessFilterState.getStringByKey("Flag");
				let inaStateParameter = inaInputReadinessFilterState.getStringByKey("Parameter");
				provider.addInputReadinessFilterState(inaStateFlag, inaStateParameter);
			}
		}
	}
};

oFF.QInARepoOptions = {

	exportLOVAbstractionLayerSettings:function(inaStructure, provider)
	{
			if (provider.hasLovManager())
		{
			let lovManager = provider.getLovManager();
			let lovSettings = inaStructure.putNewStructure("LovAbstractionRepo");
			lovSettings.putBoolean("Enabled", lovManager.isLovAbstractionEnabled());
			lovSettings.putBoolean("Measures", lovManager.isIncludeMeasures());
			lovSettings.putBoolean("AutoVhReadModeConfig", lovManager.isAutomaticValueHelpReadModeConfigurationEnabled());
			lovSettings.putBoolean("AutoVhDrillLevelConfig", lovManager.isAutomaticValueHelpDrillLevelConfigurationEnabled());
			lovSettings.putBoolean("IgnoreMultipleDrillsInVh", lovManager.isIgnoreMultipleDrillsInValueHelp());
			lovSettings.putBoolean("RestoreSettingsAfterImplicitSubmit", lovManager.isRestoreSettingsAfterImplicitSubmit());
			lovSettings.putBoolean("Sort", lovManager.hasUserDefinedSort());
		}
	},
	exportOptimizerHints:function(inaDefinition, queryModel)
	{
			if (queryModel.getModelCapabilities().supportsCeScenarioParams())
		{
			let inaOptimizerHints = oFF.PrFactory.createStructure();
			oFF.QInARepoOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.CALC_ENGINE);
			oFF.QInARepoOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.MDS);
			oFF.QInARepoOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.SQL);
			if (inaOptimizerHints.hasElements())
			{
				inaDefinition.put("Hints", inaOptimizerHints);
			}
		}
	},
	exportOptimizerHintsByEngine:function(inaOptimizerHints, queryModel, engine)
	{
			let optimizerHints = queryModel.getOptimizerHintsByExecutionEngine(engine);
		if (oFF.notNull(optimizerHints) && optimizerHints.hasElements())
		{
			let sortedList = optimizerHints.getKeysAsReadOnlyList();
			sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
			let inaAEngineHints = inaOptimizerHints.putNewList(engine.getName());
			let sortedListSize = sortedList.size();
			for (let i = 0; i < sortedListSize; i++)
			{
				let hintName = sortedList.get(i);
				let inaHint = inaAEngineHints.addNewStructure();
				inaHint.putString("Key", hintName);
				inaHint.putString("Value", optimizerHints.getByKey(hintName));
			}
		}
	},
	exportOptions:function(provider)
	{
			let inaOptions = oFF.PrFactory.createStructure();
		inaOptions.putBoolean("UseDefaultAttributeKey", false);
		let resultSetContainer = provider.getActiveResultSetContainer();
		if (resultSetContainer.getMaxResultRecords() !== -1)
		{
			inaOptions.putLong("MaxResultRecords", resultSetContainer.getMaxResultRecords());
		}
		let dataRefreshEnabled = resultSetContainer.getDataRefreshEnabled();
		if (dataRefreshEnabled === oFF.ActionChoice.ON || dataRefreshEnabled === oFF.ActionChoice.ONCE)
		{
			inaOptions.putBoolean("Refresh", true);
		}
		let hasSchemaAndTable = false;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getResultSetPersistenceTable()))
		{
			inaOptions.putString("ResultSetPersistanceTable", resultSetContainer.getResultSetPersistenceTable());
			if (oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getResultSetPersistenceSchema()))
			{
				inaOptions.putString("ResultSetPersistanceSchema", resultSetContainer.getResultSetPersistenceSchema());
				hasSchemaAndTable = true;
			}
		}
		if (!resultSetContainer.isResultSetTransportEnabled())
		{
			inaOptions.putBoolean("ReturnEmptyJsonResultSet", true);
		}
		oFF.QInARepoOptions.exportPaging(inaOptions, provider);
		oFF.QInARepoOptions.exportSuppressKeyfigureCalculation(inaOptions, provider);
		if (provider.getExecuteRequestOnOldResultSet())
		{
			inaOptions.putBoolean("ExecuteRequestOnOldResultSet", true);
		}
		if (provider.isIncludePerformanceNotDefault())
		{
			inaOptions.putBoolean("IncludePerformanceData", provider.isRequestingPerformanceData());
		}
		let capabilitiesBase = provider.getCapabilitiesBase();
		if (capabilitiesBase.supportsAutoVariableSubmit())
		{
			inaOptions.putBoolean("IgnoreAutoSubmit", !provider.isProcessingAutoSubmit());
		}
		let queryModel = provider.getQueryModel();
		if (capabilitiesBase.supportsEncodedResultset())
		{
			inaOptions.putString("ResultFormat", "Version2");
			inaOptions.putString("ResultEncoding", "None");
			if (resultSetContainer.getResultSetPersistenceIdentifier() !== null)
			{
				let isBlendingSubQuery = !resultSetContainer.isRemotePreQuery();
				if (isBlendingSubQuery)
				{
					inaOptions.putBoolean("IsCubeBlendingSubquery", true);
				}
				if (oFF.QInARepoOptions.isCubeCacheQuery(queryModel))
				{
					inaOptions.putString("ResultSetPersistanceIdentifier", resultSetContainer.getResultSetPersistenceIdentifier());
				}
				else
				{
					inaOptions.putString("ResultFormat", "SerializedData");
					if (hasSchemaAndTable)
					{
						inaOptions.putString("ResultSetPersistanceIdentifier", resultSetContainer.getResultSetPersistenceIdentifier());
					}
					if (provider.getSystemType().isTypeOf(oFF.SystemType.BW))
					{
						if (isBlendingSubQuery && provider.getResultSetPersistenceType() === oFF.BlendingPersistenceType.VIEW)
						{
							inaOptions.putString("ResultSetPersistanceType", "View");
						}
						else if (isBlendingSubQuery && provider.getResultSetPersistenceType() === oFF.BlendingPersistenceType.CUBE)
						{
							inaOptions.putString("ResultSetPersistanceType", "Cube");
						}
					}
				}
			}
		}
		if (oFF.notNull(queryModel) && capabilitiesBase.supportsKeepOriginalTexts())
		{
			inaOptions.putBoolean("ResultKeepOriginalTexts", queryModel.isKeepingOriginalTexts());
		}
		if (resultSetContainer.getSuppressCalculatedMembersWithoutBookedData() !== -1)
		{
			inaOptions.putInteger("SuppressCalculatedMembersWithoutBookedData", resultSetContainer.getSuppressCalculatedMembersWithoutBookedData());
		}
		return inaOptions;
	},
	exportPaging:function(inaOptions, provider)
	{
			let resultSetContainer = provider.getActiveResultSetContainer();
		let subSetDescription = inaOptions.putNewStructure("SubSetDescription");
		let maxRows = resultSetContainer.getMaxRows();
		let offsetRows = resultSetContainer.getOffsetRows();
		subSetDescription.putInteger("RowFrom", offsetRows);
		if (maxRows === -1)
		{
			subSetDescription.putInteger("RowTo", -1);
		}
		else
		{
			subSetDescription.putInteger("RowTo", offsetRows + maxRows);
		}
		let maxColumns = resultSetContainer.getMaxColumns();
		let offsetColumns = resultSetContainer.getOffsetColumns();
		subSetDescription.putInteger("ColumnFrom", offsetColumns);
		if (maxColumns === -1)
		{
			subSetDescription.putInteger("ColumnTo", -1);
		}
		else
		{
			subSetDescription.putInteger("ColumnTo", offsetColumns + maxColumns);
		}
	},
	exportReturnedDataSelections:function(inaOptions, provider)
	{
			if (provider.supportsReturnedDataSelection())
		{
			let inaReturnedDataSelection = inaOptions.putNewStructure("ReturnedDataSelection");
			if (provider.supportsReturnedDataSelection())
			{
				let allReturnedDataSelections = provider.getQueryModel().getAllReturnedDataSelections();
				let keysAsIterator = allReturnedDataSelections.getKeysAsIterator();
				while (keysAsIterator.hasNext())
				{
					let retDataSel = keysAsIterator.next();
					inaReturnedDataSelection.putBoolean(oFF.QInAConverter.lookupReturnedDataSelectionInA(retDataSel), allReturnedDataSelections.getByKey(retDataSel).getBoolean());
				}
			}
		}
	},
	exportSuppressKeyfigureCalculation:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions) && oFF.notNull(provider) && provider.isKeyfigureCalculationSuppressed())
		{
			inaOptions.putBoolean("SuppressKeyfigureCalculation", true);
		}
	},
	exportUniqueAxisProperties:function(inaOptions, provider)
	{
			let queryModel = provider.getQueryModel();
		let returnedAxisProperties = oFF.notNull(queryModel) && queryModel.getModelCapabilities().supportsUniqueAxisProperties() ? queryModel.getReturnedUniqueAxisProperties() : null;
		let rowProperties = oFF.isNull(returnedAxisProperties) ? null : returnedAxisProperties.getRowProperties();
		let columnProperties = oFF.isNull(returnedAxisProperties) ? null : returnedAxisProperties.getColumnProperties();
		let defaultProperties = oFF.isNull(returnedAxisProperties) ? null : returnedAxisProperties.getDefaultAxisProperties();
		let hasRowProperties = oFF.XCollectionUtils.hasElements(rowProperties);
		let hasColumnProperties = oFF.XCollectionUtils.hasElements(columnProperties);
		let hasDefaultProperties = oFF.XCollectionUtils.hasElements(defaultProperties);
		if (hasRowProperties || hasColumnProperties || hasDefaultProperties)
		{
			let inaUniqueAxisProperties = inaOptions.putNewStructure("UniqueAxisProperties");
			if (hasRowProperties)
			{
				let rowStructure = inaUniqueAxisProperties.putNewStructure("Rows");
				oFF.XCollectionUtils.forEach(rowProperties.getKeysAsReadOnlyList(), (rp) => {
					rowStructure.putBoolean(oFF.QInAConverter.lookupUniqueAxisPropertyInA(rp), rowProperties.getByKey(rp).getBoolean());
				});
			}
			if (hasColumnProperties)
			{
				let columnStructure = inaUniqueAxisProperties.putNewStructure("Columns");
				oFF.XCollectionUtils.forEach(columnProperties.getKeysAsReadOnlyList(), (cp) => {
					columnStructure.putBoolean(oFF.QInAConverter.lookupUniqueAxisPropertyInA(cp), columnProperties.getByKey(cp).getBoolean());
				});
			}
			if (hasDefaultProperties)
			{
				let defaultStructure = inaUniqueAxisProperties.putNewStructure("Default");
				oFF.XCollectionUtils.forEach(defaultProperties.getKeysAsReadOnlyList(), (cp) => {
					defaultStructure.putBoolean(oFF.QInAConverter.lookupUniqueAxisPropertyInA(cp), defaultProperties.getByKey(cp).getBoolean());
				});
			}
		}
	},
	fillOptions:function(requestStructure, capabilities, session, initSettings)
	{
			let options = oFF.PrFactory.createList();
		if (capabilities.supportsServerState())
		{
			options.addString("StatefulServer");
		}
		let serverCustomizations = initSettings.getServerCustomizations();
		options.addAllStrings(serverCustomizations.getValuesAsReadOnlyList());
		if (session.hasFeature(oFF.FeatureToggleOlap.NO_EMPTY_OPTIONS) === false || options.hasElements())
		{
			requestStructure.put("Options", options);
		}
	},
	importLOVAbstractionLayerSettings:function(inaStructure, provider)
	{
			let lovSettings = inaStructure.getStructureByKey("LovAbstractionRepo");
		if (oFF.notNull(lovSettings))
		{
			let lovManager = provider.getLovManager();
			lovManager.setLovAbstractionEnabled(lovSettings.getBooleanByKeyExt("Enabled", false), true);
			lovManager.setIncludeMeasures(lovSettings.getBooleanByKeyExt("Measures", false));
			lovManager.setAutomaticValueHelpReadModeConfigurationEnabled(lovSettings.getBooleanByKeyExt("AutoVhReadModeConfig", true));
			lovManager.setAutomaticValueHelpDrillLevelConfigurationEnabled(lovSettings.getBooleanByKeyExt("AutoVhReadModeConfig", true));
			lovManager.setIgnoreMultipleDrillsInValueHelp(lovSettings.getBooleanByKeyExt("IgnoreMultipleDrillsInVh", false));
			lovManager.setRestoreSettingsAfterImplicitSubmit(lovSettings.getBooleanByKeyExt("RestoreSettingsAfterImplicitSubmit", false));
			lovManager.setHasUserDefinedSort(lovSettings.getBooleanByKeyExt("Sort", false));
		}
		else if (provider.hasLovManager())
		{
			provider.getLovManager().setLovAbstractionEnabled(false, true);
		}
	},
	importOptimizerHints:function(inaDefinition, provider)
	{
			if (provider.getModelCapabilities().supportsCeScenarioParams())
		{
			provider.getQueryModel().clearAllOptimizerHints();
			let inaOptimizerHints = inaDefinition.getStructureByKey("Hints");
			if (oFF.notNull(inaOptimizerHints))
			{
				oFF.QInARepoOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.CALC_ENGINE, provider);
				oFF.QInARepoOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.MDS, provider);
				oFF.QInARepoOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.SQL, provider);
			}
		}
	},
	importOptimizerHintsByEngine:function(inaOptimizerHints, engine, provider)
	{
			let queryModel = provider.getQueryModel();
		let listByEngine = inaOptimizerHints.getListByKey(engine.getName());
		if (oFF.notNull(listByEngine))
		{
			let numberOfHints = listByEngine.size();
			for (let i = 0; i < numberOfHints; i++)
			{
				let hintElement = listByEngine.getStructureAt(i);
				let key = hintElement.getStringByKey("Key");
				let value = hintElement.getStringByKey("Value");
				queryModel.addOptimizerHint(engine, key, value);
			}
		}
	},
	importPaging:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions))
		{
			let queryModel = provider.getQueryModel();
			let inaSubset = inaOptions.getStructureByKey("SubSetDescription");
			if (oFF.isNull(inaSubset) || !queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) && !provider.isApplyingRepoState())
			{
				return;
			}
			let offsetRows = inaSubset.getIntegerByKey("RowFrom");
			if (offsetRows > -1)
			{
				provider.setOffsetRows(offsetRows);
				provider.setMaxRows(inaSubset.getIntegerByKey("RowTo") - offsetRows);
			}
			else
			{
				provider.setMaxRows(inaSubset.getIntegerByKey("RowTo"));
			}
			let offsetCols = inaSubset.getIntegerByKey("ColumnFrom");
			if (offsetCols > -1)
			{
				provider.setOffsetColumns(offsetCols);
				provider.setMaxColumns(inaSubset.getIntegerByKey("ColumnTo") - offsetCols);
			}
			else
			{
				provider.setMaxColumns(inaSubset.getIntegerByKey("ColumnTo"));
			}
		}
	},
	importReturnedDataSelections:function(inaResultStructureFeature, provider)
	{
			if (oFF.notNull(inaResultStructureFeature))
		{
			let inaReturnedDataSelection = inaResultStructureFeature.getStructureByKey("ReturnedDataSelection");
			if (oFF.notNull(inaReturnedDataSelection) && inaReturnedDataSelection.hasElements())
			{
				let supportsReturnedDataSelection = provider.supportsReturnedDataSelection();
				let inaElementNames = inaReturnedDataSelection.getKeysAsReadOnlyList();
				let size = inaElementNames.size();
				for (let i = 0; i < size; i++)
				{
					let inaKey = inaElementNames.get(i);
					if (inaReturnedDataSelection.getByKey(inaKey).isBoolean())
					{
						if (supportsReturnedDataSelection)
						{
							let dataSelection = oFF.QInAConverter.lookupReturnedDataSelection(inaKey);
							if (oFF.notNull(dataSelection))
							{
								let queryModel = provider.getQueryModel();
								if (dataSelection === oFF.ReturnedDataSelection.TUPLE_ELEMENT_IDS)
								{
									queryModel.toggleReturnedDataSelection(dataSelection, true);
									continue;
								}
								queryModel.toggleReturnedDataSelection(dataSelection, inaReturnedDataSelection.getBooleanByKeyExt(dataSelection.getName(), false));
							}
						}
					}
				}
			}
		}
	},
	importSuppressKeyfigureCalculation:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions) && oFF.notNull(provider))
		{
			provider.setSuppressKeyfigureCalculation(inaOptions.getBooleanByKeyExt("SuppressKeyfigureCalculation", false));
		}
	},
	importUniqueAxisDataSelection:function(uniqueAxisProperties, structure, axisType)
	{
			oFF.XCollectionUtils.forEach(structure.getKeysAsReadOnlyList(), (inaKey) => {
			let dataSelection = oFF.QInAConverter.lookupUniqueAxisProperty(inaKey);
			if (oFF.notNull(dataSelection))
			{
				uniqueAxisProperties.toggleActivation(axisType, dataSelection, structure.getBooleanByKeyExt(dataSelection.getName(), false));
			}
		});
	},
	importUniqueAxisProperties:function(inaResultStructureFeature, provider)
	{
			let queryModel = provider.getQueryModel();
		if (oFF.notNull(inaResultStructureFeature) && oFF.notNull(queryModel) && queryModel.getModelCapabilities().supportsUniqueAxisProperties())
		{
			let inaUniqueAxisProperties = inaResultStructureFeature.getStructureByKey("UniqueAxisProperties");
			if (oFF.notNull(inaUniqueAxisProperties) && inaUniqueAxisProperties.hasElements())
			{
				provider.getConvenienceCommands().clearAllUniqueAxisProperties();
				let uniqueAxisProperties = provider.getQueryModel().getReturnedUniqueAxisProperties();
				let inaElementNames = inaUniqueAxisProperties.getKeysAsReadOnlyList();
				let size = inaElementNames.size();
				for (let i = 0; i < size; i++)
				{
					let inaKey = inaElementNames.get(i);
					if (inaUniqueAxisProperties.getByKey(inaKey).isStructure() && oFF.notNull(uniqueAxisProperties))
					{
						if (oFF.XString.isEqual(inaKey, "Rows"))
						{
							oFF.QInARepoOptions.importUniqueAxisDataSelection(uniqueAxisProperties, inaUniqueAxisProperties.getStructureByKey(inaKey), oFF.AxisType.ROWS);
						}
						else if (oFF.XString.isEqual(inaKey, "Columns"))
						{
							oFF.QInARepoOptions.importUniqueAxisDataSelection(uniqueAxisProperties, inaUniqueAxisProperties.getStructureByKey(inaKey), oFF.AxisType.COLUMNS);
						}
						else
						{
							oFF.QInARepoOptions.importUniqueAxisDataSelection(uniqueAxisProperties, inaUniqueAxisProperties.getStructureByKey(inaKey), null);
						}
					}
				}
			}
		}
	},
	isCubeCacheQuery:function(queryModel)
	{
			let hints = queryModel.getOptimizerHintsByExecutionEngine(oFF.ExecutionEngine.MDS);
		return oFF.notNull(hints) && hints.containsKey(oFF.OptimizerHint.CUBE_CACHE_WITH_ID.getName());
	},
	setLanguage:function(requestStructure, provider)
	{
			let language = provider.getConnection().getSystemDescription().getLanguage();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(language))
		{
			requestStructure.putString("Language", language);
		}
	},
	setRequestTimeZone:function(requestStructure, provider)
	{
			if (oFF.notNull(requestStructure) && provider.getModelCapabilities().supportsRequestTimezone())
		{
			requestStructure.putStringNotNullAndNotEmpty("Timezone", provider.getQueryServiceConfig().getRequestTimeZone());
		}
	}
};

oFF.QInARepoUtils = {

	_importValueInternal:function(importer, valueBag, inaElement, parameterName, valueType, field, returnValue)
	{
			let useSapDateFormat = importer.m_capabilities.supportsSapDate() || oFF.notNull(field) && field.getModelCapabilities() !== null && field.getModelCapabilities().supportsSapDate();
		let useFieldLiteralValue = oFF.PrUtils.getBooleanValueProperty(inaElement, "FieldLiteralValue", false);
		let parameterName2 = parameterName;
		if (oFF.isNull(parameterName2))
		{
			parameterName2 = "Value";
		}
		let applyFieldValue = !returnValue && oFF.notNull(field) && useFieldLiteralValue;
		let valueType2 = applyFieldValue ? field.getValueType() : valueType;
		let stringValue = inaElement.getStringByKey(parameterName2);
		let inaValueType = inaElement.getStringByKey(oFF.XStringUtils.concatenate2(parameterName2, "Type"));
		if (oFF.isNull(valueType2))
		{
			valueType2 = oFF.QInAConverter.lookupValueType(inaValueType);
		}
		else if (valueType2 === oFF.XValueType.STRING && useSapDateFormat)
		{
			let originalValueType = oFF.QInAConverter.lookupValueType(inaValueType);
			if (originalValueType === oFF.XValueType.DATE)
			{
				stringValue = oFF.XDate.createDateSafe(stringValue).toSAPFormat();
			}
			else if (originalValueType === oFF.XValueType.TIME)
			{
				stringValue = oFF.XTime.createTimeSafe(stringValue).toSAPFormat();
			}
			else if (originalValueType === oFF.XValueType.DATE_TIME)
			{
				stringValue = oFF.XDateTime.createDateTimeSafe(stringValue).toSAPFormat();
			}
		}
		if (oFF.isNull(valueType))
		{
			useSapDateFormat = false;
		}
		if ((valueType2 === oFF.XValueType.DOUBLE || valueType2 === oFF.XValueType.DECIMAL_FLOAT) && inaElement.hasStringByKey(parameterName2))
		{
			valueType2 = oFF.XValueType.STRING;
		}
		let fieldValue;
		if (valueType2 === oFF.XValueType.STRING)
		{
			if (returnValue)
			{
				return oFF.XStringValue.create(stringValue);
			}
			if (!applyFieldValue)
			{
				valueBag.setString(stringValue);
			}
			else
			{
				let dimension = field.getDimension();
				let dimensionMember = dimension.isStructure() ? dimension.getDimensionMember(stringValue) : null;
				if (oFF.notNull(dimensionMember))
				{
					valueBag.setDimensionMember(dimensionMember);
				}
				else
				{
					fieldValue = field.createFieldLiteralValue();
					fieldValue.setString(stringValue);
					valueBag.setFieldValue(fieldValue);
				}
			}
		}
		else if (valueType2 === oFF.XValueType.DECIMAL_FLOAT)
		{
			let decFloatValue = oFF.QInARepoUtils.getDecimalFLoat(inaElement, parameterName2);
			if (returnValue)
			{
				return decFloatValue;
			}
			if (!applyFieldValue)
			{
				valueBag.setDecFloat(decFloatValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setValue(decFloatValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.DOUBLE)
		{
			let doubleValue = oFF.QInARepoUtils.getDouble(inaElement, parameterName2);
			if (returnValue)
			{
				return oFF.XDoubleValue.create(doubleValue);
			}
			if (!applyFieldValue)
			{
				valueBag.setDouble(doubleValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setDouble(doubleValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.INTEGER)
		{
			let intValue = inaElement.getIntegerByKey(parameterName2);
			if (returnValue)
			{
				return oFF.XIntegerValue.create(intValue);
			}
			if (!applyFieldValue)
			{
				valueBag.setInteger(intValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setInteger(intValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.BOOLEAN)
		{
			let booleanValue = inaElement.getBooleanByKey(parameterName2);
			if (returnValue)
			{
				return oFF.XBooleanValue.create(booleanValue);
			}
			valueBag.setBoolean(booleanValue);
		}
		else if (valueType2 === oFF.XValueType.LONG)
		{
			let longValue = oFF.PrUtils.getLongValueProperty(inaElement, parameterName2, 0);
			if (returnValue)
			{
				return oFF.XLongValue.create(longValue);
			}
			if (!applyFieldValue)
			{
				valueBag.setLong(longValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setLong(longValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.DATE)
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let dateValue = oFF.QInARepoUtils.createDate(stringValue);
			if (returnValue)
			{
				return dateValue;
			}
			if (!applyFieldValue)
			{
				valueBag.setDate(dateValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setDate(dateValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2 === oFF.XValueType.TIME)
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let timeValue = oFF.XTime.createTimeFromStringWithFlag(stringValue, useSapDateFormat);
			if (returnValue)
			{
				return timeValue;
			}
			valueBag.setTime(timeValue);
		}
		else if (valueType2 === oFF.XValueType.DATE_TIME)
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let dateTimeValue = oFF.XDateTime.createDateTimeFromStringWithFlag(stringValue, useSapDateFormat);
			if (returnValue)
			{
				return dateTimeValue;
			}
			if (!applyFieldValue)
			{
				valueBag.setDateTime(dateTimeValue);
			}
			else
			{
				fieldValue = field.createFieldLiteralValue();
				fieldValue.setDate(dateTimeValue);
				valueBag.setFieldValue(fieldValue);
			}
		}
		else if (valueType2.isSpatial())
		{
			stringValue = inaElement.getStringByKey(parameterName2);
			let geometry = oFF.XGeometryValue.createGeometryValueWithWkt(stringValue);
			if (returnValue)
			{
				return geometry;
			}
			valueBag.setValue(geometry);
			if (importer.m_capabilities.supportsSpatialFilterSrid() && inaElement.containsKey("SRID"))
			{
				valueBag.getGeometry().setSrid(oFF.XIntegerValue.create(inaElement.getIntegerByKey("SRID")));
			}
		}
		else if (valueType2 === oFF.XValueType.UNSUPPORTED)
		{
			return null;
		}
		else if (valueType2 === oFF.XValueType.VARIABLE || valueType2 === oFF.XValueType.CURRENT_MEMBER)
		{
			if (!returnValue)
			{
				valueBag.setFilterValueType(valueType2);
			}
			return null;
		}
		else
		{
			importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate3("Unsupported value type '", valueType2.getName(), "'"));
			return null;
		}
		return null;
	},
	addKeyRefStructure:function(exporter, modelComponent, inaParentStructure, queryManager)
	{
			let keyRefId = inaParentStructure.putNewStructure("KeyRef");
		if (!exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || oFF.isNull(queryManager) || queryManager.getClientQueryObjectStorageName() === null || !oFF.XString.isEqual(modelComponent.getStorageName(), queryManager.getClientQueryObjectStorageName()))
		{
			keyRefId.putString("StorageName", modelComponent.getStorageName());
		}
		keyRefId.putString("GroupName", modelComponent.getStorageGroupName());
		keyRefId.putString("ObjectName", modelComponent.getStorageObjectName());
		let olapComponentType = modelComponent.getComponentType();
		let ctypeValue = oFF.QInAConverter.lookupComponentTypeInA(olapComponentType);
		if (oFF.notNull(ctypeValue))
		{
			inaParentStructure.putString("CType", ctypeValue);
		}
	},
	containsEscapedQuote:function(junkKey)
	{
			return oFF.XStringUtils.isNotNullAndNotEmpty(junkKey) && (oFF.XString.getCharAt(junkKey, 0) === 92 || oFF.XString.getCharAt(junkKey, 0) === 34) && (oFF.XString.getCharAt(junkKey, oFF.XString.size(junkKey) - 1) === 92 || oFF.XString.getCharAt(junkKey, oFF.XString.size(junkKey) - 1) === 34);
	},
	correctRemovingUnwantedBackslashAndQuotes:function(junkKey)
	{
			let cleanedValue = junkKey;
		while (oFF.QInARepoUtils.containsEscapedQuote(cleanedValue))
		{
			cleanedValue = oFF.XStringUtils.stripChars(cleanedValue, 1);
		}
		return cleanedValue;
	},
	createDate:function(date)
	{
			return oFF.XDate.createDateSafe(date);
	},
	exportCacheKey:function(cacheKey, queryManager)
	{
			let inaCache = oFF.PrFactory.createStructure();
		inaCache.putString("System", cacheKey.getSystemName());
		inaCache.putString("Providers", cacheKey.getProviderType().getName());
		inaCache.putString("Cube", cacheKey.getDataSourceHashKey());
		inaCache.putString("FieldName", cacheKey.getKey1());
		inaCache.putString("DimensionName", cacheKey.getKey2());
		inaCache.putString("ValidationHash", cacheKey.getValidationHash());
		inaCache.putString("DimensionGroupNames", cacheKey.getDimensionGroupNames());
		if (oFF.notNull(queryManager) && queryManager.getClientQueryObjectStorageName() !== null)
		{
			inaCache.putString("StorageName", queryManager.getClientQueryObjectStorageName());
		}
		return inaCache;
	},
	exportFieldValue:function(exporter, parameterName, inaElement, field, valueAccess, valueType)
	{
			let parameterName2 = parameterName;
		if (oFF.isNull(parameterName2))
		{
			parameterName2 = "Value";
		}
		let valueType2 = valueType;
		if (oFF.isNull(valueType2))
		{
			valueType2 = valueAccess.getValueType();
			let inaValueType = oFF.QInAConverter.lookupValueTypeInA(valueType2);
			inaElement.putString(oFF.XStringUtils.concatenate2(parameterName2, "Type"), inaValueType);
		}
		if (valueType2 === oFF.XValueType.STRING)
		{
			let stringValue = valueAccess.getString();
			inaElement.putString(parameterName2, stringValue);
		}
		else if (valueType2 === oFF.XValueType.INTEGER)
		{
			inaElement.putInteger(parameterName2, valueAccess.getInteger());
		}
		else if (valueType2 === oFF.XValueType.LONG)
		{
			inaElement.putLong(parameterName2, valueAccess.getLong());
		}
		else if (valueType2 === oFF.XValueType.DOUBLE || valueType2 === oFF.XValueType.DECIMAL_FLOAT)
		{
			inaElement.putDouble(parameterName2, valueAccess.getDouble());
		}
		else if (valueType2 === oFF.XValueType.BOOLEAN)
		{
			inaElement.putBoolean(parameterName2, valueAccess.getBoolean());
		}
		else if (valueType2 === oFF.XValueType.DATE)
		{
			oFF.QInARepoUtils.setDateIfNotNull(exporter, inaElement, parameterName2, valueAccess.getDate());
		}
		else if (valueType2 === oFF.XValueType.TIME)
		{
			oFF.QInARepoUtils.setDateIfNotNull(exporter, inaElement, parameterName2, valueAccess.getTime());
		}
		else if (valueType2 === oFF.XValueType.DATE_TIME)
		{
			oFF.QInARepoUtils.setDateIfNotNull(exporter, inaElement, parameterName2, valueAccess.getDateTime());
		}
		if (oFF.notNull(valueType2) && valueType2.isSpatial())
		{
			let geometry = valueAccess.getGeometry();
			inaElement.putString(parameterName2, geometry.toWKT());
			let srid = geometry.getSrid();
			if (exporter.m_capabilities.supportsSpatialFilterSrid() && oFF.notNull(srid))
			{
				inaElement.putInteger("SRID", srid.getInteger());
			}
		}
		if (oFF.notNull(field))
		{
			inaElement.putBoolean("FieldLiteralValue", true);
		}
	},
	exportFilterUiSettings:function(filter, contextType, inaParent)
	{
			if (filter.hasUiSettings(contextType))
		{
			let inaUiSettings = oFF.PrFactory.createStructure();
			let uiSettings = filter.getUiSettings(contextType);
			inaUiSettings.putStringNotNull("FilterDisplayInfo", oFF.QInAConverter.lookupFilterDisplayInfoInA(uiSettings.getDisplayInfo()));
			inaUiSettings.putStringNotNull("ReadMode", oFF.QInAConverter.lookupReadModeInA(uiSettings.getReadMode()));
			if (inaUiSettings.hasElements())
			{
				inaParent.put(oFF.QInARepoUtils.getUiSettingsKey(contextType), inaUiSettings);
			}
		}
	},
	exportFilterValue:function(exporter, parameterName, inaElement, value, valueType)
	{
			if (valueType === oFF.XValueType.VARIABLE)
		{
			let variableValue = value.getVariableValue();
			if (oFF.notNull(variableValue))
			{
				inaElement.putString(parameterName, variableValue.getName());
				if (oFF.XString.isEqual(parameterName, "Low"))
				{
					inaElement.putString("LowIs", "Variable");
				}
				else if (oFF.XString.isEqual(parameterName, "High"))
				{
					inaElement.putString("HighIs", "Variable");
				}
			}
		}
		else
		{
			oFF.QInARepoUtils.exportValue(exporter, parameterName, inaElement, value, valueType);
		}
	},
	exportLayeredFilters:function(exporter, layeredFilterContext)
	{
			return oFF.QInARepoUtils.exportLayeredFiltersExt(exporter, layeredFilterContext, null);
	},
	exportLayeredFiltersExt:function(exporter, layeredFilterContext, isValidFilterExpression)
	{
			let inaLayeredFilters = oFF.PrFactory.createList();
		let layeredFilters = layeredFilterContext.getLinkedFilters();
		let filterNames = layeredFilters.getKeysAsIterator();
		while (filterNames.hasNext())
		{
			let filterName = filterNames.next();
			let nextFilterExpression = layeredFilterContext.getLinkedFilter(filterName);
			if (oFF.QInARepoUtils.isValidFilterExpressionForRepository(nextFilterExpression) && (oFF.isNull(isValidFilterExpression) || isValidFilterExpression(nextFilterExpression).getBoolean()))
			{
				let filterExpression = exporter.exportFilterExpression(nextFilterExpression);
				filterExpression.putString("Name", filterName);
				inaLayeredFilters.add(filterExpression);
			}
		}
		return inaLayeredFilters;
	},
	exportLinkPart:function(exporter, structure, linkPart)
	{
			structure.putString("System", linkPart.getSystemName());
		structure.putString("DataSource", linkPart.getCubeName());
		structure.putString("DimensionName", linkPart.getDimensionName());
		structure.putString("FieldName", linkPart.getFieldName());
		structure.putStringNotNullAndNotEmpty("QueryManagerKey", linkPart.getQueryManagerKey());
		if (linkPart.getHierarchyName() !== null)
		{
			structure.putString("HierarchyName", linkPart.getHierarchyName());
		}
		if (linkPart.getHierId() !== null)
		{
			structure.putString("HierarchyId", linkPart.getHierId());
		}
		if (linkPart.getFieldKey().getValidationHash() !== null)
		{
			structure.putString("ValidationHash", linkPart.getFieldKey().getValidationHash());
		}
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS))
		{
			structure.putBoolean("IsIncludeHierarchyNodeChildren", linkPart.isIncludeHierarchyNodeChildren());
		}
		if (linkPart.getPropagateOnDefaultHierarchyKey())
		{
			structure.putBoolean("PropagateOnDefaultHierarchyKey", true);
		}
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
		{
			structure.putBoolean("PropagateFlexibleTimeRangeFiltersDirect", linkPart.getPropagateFlexibleTimeRangeFiltersDirect());
		}
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
		{
			structure.putBoolean("PropagateDirectFlexibleMemberFiltersHierarchy", linkPart.getPropagateDirectFlexibleTimeMemberFiltersUsingHierarchy());
		}
	},
	exportShiftableTimeRangeFilter:function(inaStructure, shiftableTimeRangeFilter)
	{
			inaStructure.putInteger("LookBack", shiftableTimeRangeFilter.getLookBack());
		let offsetFunction = shiftableTimeRangeFilter.getOffsetFunction();
		if (oFF.notNull(offsetFunction))
		{
			inaStructure.putString("OffsetFunction", offsetFunction.getName());
		}
		inaStructure.putString("OffsetLevelName", shiftableTimeRangeFilter.getOffsetLevelName());
		inaStructure.putInteger("OffsetAmount", shiftableTimeRangeFilter.getOffsetAmount());
		if (shiftableTimeRangeFilter.getPivotMemberLevelName() !== null)
		{
			inaStructure.putString("PivotLevelName", shiftableTimeRangeFilter.getPivotMemberLevelName());
		}
		if (shiftableTimeRangeFilter.getFiscalGranularity() !== -1)
		{
			inaStructure.putInteger("FiscalGranularity", shiftableTimeRangeFilter.getFiscalGranularity());
		}
		if (shiftableTimeRangeFilter.getOffsetFiscalGranularity() !== -1)
		{
			inaStructure.putInteger("OffsetFiscalGranularity", shiftableTimeRangeFilter.getOffsetFiscalGranularity());
		}
	},
	exportSupplementsAndValue:function(exporter, parameterName, inaElement, field, value, valueType)
	{
			oFF.QInARepoUtils.exportFieldValue(exporter, parameterName, inaElement, field, value, valueType);
		let supplementValues = value.getSupplementValues();
		if (oFF.XCollectionUtils.hasElements(supplementValues))
		{
			let supplementValuesList = inaElement.putNewList("Supplements");
			let numberOfSupplementValues = supplementValues.size();
			for (let j = 0; j < numberOfSupplementValues; j++)
			{
				let supplement = supplementValuesList.addNewStructure();
				let ixKeyValuePair = supplementValues.get(j);
				supplement.putString("Key", ixKeyValuePair.getKey().toString());
				supplement.putString("Value", ixKeyValuePair.getValue().toString());
			}
		}
	},
	exportTimeOperation:function(inaTimeOperationStructure, timeOperation)
	{
			inaTimeOperationStructure.putString("Name", timeOperation.getDimensionName());
		inaTimeOperationStructure.putString("TimeOperationFunction", timeOperation.getFunction().getName());
		if (timeOperation.getGranularity() !== null)
		{
			inaTimeOperationStructure.putString("TimeOperationGranularity", timeOperation.getGranularity().getName());
		}
		inaTimeOperationStructure.putInteger("TimeOperationPeriod", timeOperation.getPeriod());
		inaTimeOperationStructure.putBoolean("TimeOperationForceMemberNavGeneration", timeOperation.getForceMemberNavigationGeneration());
		inaTimeOperationStructure.putBoolean("TimeOperationUseToDateFlatRangeSelection", timeOperation.getUseToDateFlatRangeSelection());
		inaTimeOperationStructure.putString("LevelName", timeOperation.getHierarchyLevelName());
		if (timeOperation.getFunction() === oFF.QTimeOperationFunction.PREVIOUS && timeOperation.getGranularity() === oFF.QTimeOperationGranularity.PERIOD)
		{
			inaTimeOperationStructure.putString("TimePeriodOperationLevel", timeOperation.getTimePeriodOperationLevel().getName());
		}
	},
	exportTimeRangeFilter:function(exporter, inaStructure, timeRangeFilter)
	{
			inaStructure.putString("DimensionName", timeRangeFilter.getTimeDimensionName());
		inaStructure.putString("HierarchyName", timeRangeFilter.getHierarchyName());
		inaStructure.putString("LevelName", timeRangeFilter.getLevelName());
		inaStructure.putBoolean("ConvertToFlatSelection", timeRangeFilter.isConvertToFlatFilter());
		if (timeRangeFilter.getLowValueType() !== null)
		{
			inaStructure.putString("LowValueType", timeRangeFilter.getLowValueType().getName());
		}
		inaStructure.putBoolean("IsExcluding", timeRangeFilter.getSetSign() === oFF.SetSign.EXCLUDING);
		let filterRoot = timeRangeFilter.getFallbackFilter().getFilterRootElement();
		if (oFF.notNull(filterRoot))
		{
			let inaElement = exporter.exportComponent(null, filterRoot, null, 0);
			inaStructure.put("Selection", inaElement);
		}
	},
	exportValue:function(exporter, parameterName, inaElement, valueAccess, valueType)
	{
			oFF.QInARepoUtils.exportFieldValue(exporter, parameterName, inaElement, null, valueAccess, valueType);
	},
	extendStructureWithTagging:function(exporter, modelComponentBase, source)
	{
			let tagging = modelComponentBase.getTagging();
		if (oFF.XCollectionUtils.hasElements(tagging))
		{
			let keyList = tagging.getKeysAsReadOnlyList();
			let componentTaggingList = source.putNewList("ComponentTags");
			for (let i = 0; i < keyList.size(); i++)
			{
				let currentKey = keyList.get(i);
				let currentValue = tagging.getByKey(currentKey);
				let newKeyValuePair = oFF.PrFactory.createStructure();
				componentTaggingList.add(newKeyValuePair);
				newKeyValuePair.putString("KEY", currentKey);
				if (oFF.isNull(currentValue))
				{
					newKeyValuePair.putNull("VALUE");
				}
				else
				{
					newKeyValuePair.putString("VALUE", currentValue);
				}
			}
		}
		return source;
	},
	getDecimalFLoat:function(inaElement, parameterName2)
	{
			let decimalFloat;
		let decFloatElement = inaElement.getByKey(parameterName2);
		if (decFloatElement.isString())
		{
			let stringValue = decFloatElement.getString();
			decimalFloat = oFF.XDecFloatByString.create(stringValue);
		}
		else if (decFloatElement.isNumeric())
		{
			decimalFloat = oFF.XDecFloatByDouble.create(decFloatElement.getDouble());
		}
		else
		{
			decimalFloat = oFF.XDecFloatByString.createZeroValue();
		}
		return decimalFloat;
	},
	getDouble:function(inaElement, parameterName2)
	{
			let doubleValue;
		let doubleElement = inaElement.getByKey(parameterName2);
		if (doubleElement.isString())
		{
			let stringValue = doubleElement.getString();
			doubleValue = oFF.XDouble.convertFromString(stringValue);
		}
		else if (doubleElement.isDouble())
		{
			doubleValue = doubleElement.getDouble();
		}
		else if (doubleElement.isInteger())
		{
			doubleValue = doubleElement.getInteger();
		}
		else
		{
			doubleValue = 0.0;
		}
		return doubleValue;
	},
	getFilterAcrossModelSourceContext:function(famContext, cacheKey)
	{
			let sourceQueryManager = null;
		let linkIterator = famContext.getLinks().getIterator();
		if (linkIterator.hasNext())
		{
			let link = linkIterator.next();
			let firstPartQueryManager = famContext.getOlapEnv().getSharedQueryManager(link.getFirstPart().getQueryManagerKey());
			let secondPartQueryManager = famContext.getOlapEnv().getSharedQueryManager(link.getSecondPart().getQueryManagerKey());
			if (oFF.notNull(firstPartQueryManager) && oFF.notNull(secondPartQueryManager))
			{
				if (cacheKey.isSameDataSourceAsContext(firstPartQueryManager))
				{
					sourceQueryManager = firstPartQueryManager;
				}
				else if (cacheKey.isSameDataSourceAsContext(secondPartQueryManager))
				{
					sourceQueryManager = secondPartQueryManager;
				}
			}
		}
		return sourceQueryManager;
	},
	getFormulaCalcDimField:function(context, fieldName, clientQueryObjectManagerStorageName)
	{
			let clientQueryObjectManager = context.getOlapEnv().getClientQueryObjectManager();
		let formulaCalcDimProperties = clientQueryObjectManager.getFormulaCalcDimPropertiesByFieldName(fieldName, clientQueryObjectManagerStorageName);
		if (oFF.notNull(formulaCalcDimProperties))
		{
			return formulaCalcDimProperties.getFormulaCalcFields().getFieldByName(fieldName);
		}
		return null;
	},
	getUiSettingsKey:function(contextType)
	{
			return contextType === oFF.QContextType.SELECTOR ? "SelectorUiSettings" : contextType === oFF.QContextType.VARIABLE ? "VariableUiSettings" : "UiSettings";
	},
	importCacheKey:function(inaCache)
	{
			let systemName = inaCache.getStringByKey("System");
		let providerName = inaCache.getStringByKey("Providers");
		let cubeName = inaCache.getStringByKey("Cube");
		let fieldName = inaCache.getStringByKey("FieldName");
		let dimensionName = inaCache.getStringByKey("DimensionName");
		let validationHash = inaCache.getStringByKey("ValidationHash");
		let dimensionGroupNames = inaCache.getStringByKey("DimensionGroupNames");
		return oFF.QFactory.createCacheKey(null, systemName, cubeName, oFF.ProviderType.getAll().getByKey(providerName), fieldName, dimensionName, validationHash, dimensionGroupNames);
	},
	importFilterShiftableTimeRange:function(inaStructure, filterShiftableTimeRange)
	{
			filterShiftableTimeRange.setLookBack(inaStructure.getIntegerByKey("LookBack"));
		let offsetFunction = inaStructure.getStringByKey("OffsetFunction");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(offsetFunction))
		{
			filterShiftableTimeRange.setOffsetFunction(oFF.TimeOffsetFunction.lookup(offsetFunction));
		}
		filterShiftableTimeRange.setOffsetLevelName(inaStructure.getStringByKey("OffsetLevelName"));
		filterShiftableTimeRange.setOffsetAmount(inaStructure.getIntegerByKey("OffsetAmount"));
		filterShiftableTimeRange.setPivotMemberLevelName(inaStructure.getStringByKey("PivotLevelName"));
		filterShiftableTimeRange.setFiscalGranularity(inaStructure.getIntegerByKeyExt("FiscalGranularity", -1));
		filterShiftableTimeRange.setOffsetFiscalGranularity(inaStructure.getIntegerByKeyExt("OffsetFiscalGranularity", -1));
	},
	importFilterTimeRange:function(importer, inaStructure, fixedTimeRangeFilter)
	{
			fixedTimeRangeFilter.setTimeDimensionName(inaStructure.getStringByKey("DimensionName"));
		fixedTimeRangeFilter.setHierarchyName(inaStructure.getStringByKey("HierarchyName"));
		fixedTimeRangeFilter.setLevelName(inaStructure.getStringByKey("LevelName"));
		fixedTimeRangeFilter.setConvertToFlatFilter(inaStructure.getBooleanByKey("ConvertToFlatSelection"));
		let isExcluding = inaStructure.getBooleanByKeyExt("IsExcluding", false);
		if (isExcluding)
		{
			fixedTimeRangeFilter.setSetSign(oFF.SetSign.EXCLUDING);
		}
		else
		{
			fixedTimeRangeFilter.setSetSign(oFF.SetSign.INCLUDING);
		}
		let inaFallBackFilterElement = inaStructure.getStructureByKey("Selection");
		if (oFF.notNull(inaFallBackFilterElement))
		{
			let filter = fixedTimeRangeFilter.getFallbackFilter();
			let filterElement = importer.importComponent(null, inaFallBackFilterElement, null, filter, fixedTimeRangeFilter);
			filter.setComplexRoot(filterElement);
		}
	},
	importFilterUiSettings:function(filter, contextType, inaStructure)
	{
			let inaUiSettings = inaStructure.getStructureByKey(oFF.QInARepoUtils.getUiSettingsKey(contextType));
		if (oFF.notNull(inaUiSettings))
		{
			let uiSettings = filter.getUiSettings(contextType);
			uiSettings.setDisplayInfo(oFF.QInAConverter.lookupFilterDisplayInfo(inaUiSettings.getStringByKey("FilterDisplayInfo")));
			uiSettings.setReadMode(oFF.QInAConverter.lookupReadMode(inaUiSettings.getStringByKey("ReadMode")));
		}
	},
	importLayeredFilters:function(importer, layeredFiltersContext, inaLayeredFilters, context)
	{
			let filterExpressions = oFF.XList.create();
		let size = inaLayeredFilters.size();
		for (let i = 0; i < size; i++)
		{
			let inaLayeredFilter = inaLayeredFilters.getStructureAt(i);
			let filterName = inaLayeredFilter.getStringByKey("Name");
			let filterExpression = oFF.QFilterExpression.create(layeredFiltersContext, layeredFiltersContext);
			importer.importFilterExpression(filterExpression, inaLayeredFilter, layeredFiltersContext, layeredFiltersContext);
			let filterManager = null;
			if (oFF.notNull(context))
			{
				if (context.getComponentType() === oFF.OlapComponentType.OLAP_FILTER_MANAGER)
				{
					filterManager = context;
				}
				else if (context.getOlapEnv() !== null && context.getOlapEnv().getFilterManager() !== null)
				{
					filterManager = context.getOlapEnv().getFilterManager();
				}
			}
			if (oFF.notNull(filterManager))
			{
				let matchingFilterExpression = filterManager.getFilterById(filterExpression.getUniqueId());
				if (oFF.notNull(matchingFilterExpression))
				{
					filterExpression = matchingFilterExpression;
				}
			}
			layeredFiltersContext.linkFilter(filterName, filterExpression);
			filterExpressions.add(filterExpression);
		}
		return filterExpressions;
	},
	importLinkPart:function(context, structure)
	{
			let systemName = structure.getStringByKey("System");
		let dataSource = structure.getStringByKey("DataSource");
		let fieldName = structure.getStringByKey("FieldName");
		let dimensionName = structure.getStringByKey("DimensionName");
		let hierarchyName = structure.getStringByKey("HierarchyName");
		let hierId = structure.getStringByKey("HierarchyId");
		let validationHash = structure.getStringByKey("ValidationHash");
		let queryManagerKey = structure.getStringByKey("QueryManagerKey");
		let isIncludeHierarchyNodeChildren = structure.getBooleanByKeyExt("IsIncludeHierarchyNodeChildren", false);
		let cacheKey = oFF.QFactory.createCacheKeyWithDataSource(context, systemName, dataSource, null, fieldName, dimensionName, validationHash, null);
		let dimensionLinkPart = oFF.QFactory.createDimensionLinkPart(context, cacheKey, hierarchyName, queryManagerKey);
		dimensionLinkPart.setHierId(hierId);
		dimensionLinkPart.setIncludeHierarchyNodeChildren(isIncludeHierarchyNodeChildren);
		dimensionLinkPart.setPropagateOnDefaultHierarchyKey(structure.getBooleanByKeyExt("PropagateOnDefaultHierarchyKey", false));
		dimensionLinkPart.setPropagateFlexibleTimeRangeFiltersDirect(structure.getBooleanByKeyExt("PropagateFlexibleTimeRangeFiltersDirect", true));
		dimensionLinkPart.setPropagateDirectFlexibleTimeMemberFiltersUsingHierarchy(structure.getBooleanByKeyExt("PropagateDirectFlexibleMemberFiltersHierarchy", false));
		return dimensionLinkPart;
	},
	importSupplements:function(importer, value, structure, parameter, supplementFields)
	{
			if (importer.m_capabilities.supportsSupplements() && oFF.notNull(parameter) && oFF.XCollectionUtils.hasElements(supplementFields))
		{
			let supplementValues = structure.getListByKey(parameter);
			if (oFF.notNull(supplementValues))
			{
				let sizeA = supplementValues.size();
				let sizeB = supplementFields.size();
				if (sizeA === sizeB)
				{
					for (let i = 0; i < sizeA; i++)
					{
						value.addSupplementValue(supplementFields.get(i).getName(), supplementValues.getStringAt(i));
					}
				}
				else
				{
					importer.addWarning(oFF.ErrorCodes.INVALID_STATE, "InA protocol error: Supplement sizes of values and field names do not match.");
				}
			}
		}
	},
	importSupplementsAndValue:function(importer, valueBag, inaElement, parameterName, valueType, field)
	{
			oFF.QInARepoUtils.importValue(importer, valueBag, inaElement, parameterName, valueType, field);
		let supplementsInA = inaElement.getListByKey("Supplements");
		if (oFF.notNull(supplementsInA) && supplementsInA.hasElements())
		{
			let numberOfSupplements = supplementsInA.size();
			for (let i = 0; i < numberOfSupplements; i++)
			{
				let supplementElement = supplementsInA.getStructureAt(i);
				let key = supplementElement.getByKey("Key");
				let value = supplementElement.getByKey("Value");
				let correctedKey = oFF.QInARepoUtils.correctRemovingUnwantedBackslashAndQuotes(key.getString());
				let correctedValue = oFF.QInARepoUtils.correctRemovingUnwantedBackslashAndQuotes(value.getString());
				valueBag.addSupplementValue(correctedKey, correctedValue);
			}
		}
	},
	importValue:function(importer, valueBag, inaElement, parameterName, valueType, field)
	{
			oFF.QInARepoUtils._importValueInternal(importer, valueBag, inaElement, parameterName, valueType, field, false);
	},
	importValueByType:function(importer, inaElement, parameterName, valueType)
	{
			return oFF.QInARepoUtils._importValueInternal(importer, null, inaElement, parameterName, valueType, null, true);
	},
	isValidFilterExpressionForRepository:function(filterExpressionState)
	{
			return oFF.notNull(filterExpressionState) && !filterExpressionState.isReleased() && filterExpressionState.getFilterRootElement() !== null && !filterExpressionState.getFilterRootElement().isReleased();
	},
	setDate:function(exporter, structure, parameterName, date)
	{
			if (oFF.notNull(date))
		{
			structure.putString(parameterName, date.toIsoFormat());
		}
	},
	setDateIfNotNull:function(exporter, structure, parameterName, date)
	{
			if (oFF.notNull(date))
		{
			structure.putString(parameterName, date.toIsoFormat());
		}
	},
	setIntegerIfNotNull:function(structure, name, value)
	{
			if (oFF.notNull(value))
		{
			structure.putInteger(name, value.getInteger());
		}
	},
	setNameIfNotNull:function(structure, name, namedObject)
	{
			if (oFF.notNull(namedObject))
		{
			structure.putString(name, namedObject.getName());
		}
	}
};

oFF.InARepoMapper = function() {};
oFF.InARepoMapper.prototype = new oFF.XObject();
oFF.InARepoMapper.prototype._ff_c = "InARepoMapper";

oFF.InARepoMapper.create = function()
{
	let inARepoMapper = new oFF.InARepoMapper();
	inARepoMapper.m_mappings = oFF.XList.create();
	inARepoMapper.m_structuresUsingMembersAsKey = oFF.XList.create();
	inARepoMapper.m_structuresUsingMembersAsKey.add("NumericPrecisionOverride");
	inARepoMapper.m_structuresUsingMembersAsKey.add("NumericScaleOverride");
	inARepoMapper.m_structuresUsingMembersAsKey.add("NumericShiftOverride");
	inARepoMapper.m_structuresUsingMembersAsKey.add("VisibilityOverride");
	return inARepoMapper;
};
oFF.InARepoMapper.prototype.m_mappings = null;
oFF.InARepoMapper.prototype.m_sourceModelId = null;
oFF.InARepoMapper.prototype.m_structuresUsingMembersAsKey = null;
oFF.InARepoMapper.prototype.addDimensionMapping = function(sourceValue, targetValue)
{
	return this.addMappingInternal(oFF.ModelMappingType.DIMENSION, sourceValue, targetValue, null, null);
};
oFF.InARepoMapper.prototype.addFieldMapping = function(sourceValue, targetValue, sourceDimensionValue)
{
	return this.addMappingInternal(oFF.ModelMappingType.FIELD, sourceValue, targetValue, sourceDimensionValue, null);
};
oFF.InARepoMapper.prototype.addHierarchyLevelMapping = function(sourceValue, targetValue, sourceDimensionValue, sourceHierarchyValue)
{
	return this.addMappingInternal(oFF.ModelMappingType.HIERARCHY_LEVEL, sourceValue, targetValue, sourceDimensionValue, sourceHierarchyValue);
};
oFF.InARepoMapper.prototype.addHierarchyMapping = function(sourceValue, targetValue, sourceDimensionValue)
{
	return this.addMappingInternal(oFF.ModelMappingType.HIERARCHY, sourceValue, targetValue, sourceDimensionValue, null);
};
oFF.InARepoMapper.prototype.addMapping = function(mappingType, sourceValue, targetValue)
{
	return this.addMappingInternal(mappingType, sourceValue, targetValue, null, null);
};
oFF.InARepoMapper.prototype.addMappingInternal = function(mappingType, sourceValue, targetValue, context1, context2)
{
	if (oFF.isNull(mappingType) || oFF.XStringUtils.isNullOrEmpty(sourceValue) || oFF.XStringUtils.isNullOrEmpty(targetValue))
	{
		return null;
	}
	let mappingElement;
	if (mappingType === oFF.ModelMappingType.DIMENSION)
	{
		mappingElement = oFF.InARepoMappingDimension.createDimensionMapping(mappingType, sourceValue, targetValue);
	}
	else if (mappingType === oFF.ModelMappingType.FIELD)
	{
		mappingElement = oFF.InARepoMappingField.createFieldMapping(mappingType, sourceValue, targetValue, context1);
	}
	else if (mappingType === oFF.ModelMappingType.HIERARCHY)
	{
		mappingElement = oFF.InARepoMappingHierarchy.createHierarchyMapping(mappingType, sourceValue, targetValue, context1);
	}
	else if (mappingType === oFF.ModelMappingType.HIERARCHY_LEVEL)
	{
		mappingElement = oFF.InARepoMappingHierarchyLevel.createHierarchyLevelMapping(mappingType, sourceValue, targetValue, context1, context2);
	}
	else if (mappingType === oFF.ModelMappingType.MEASURE)
	{
		mappingElement = oFF.InARepoMappingMeasure.createMeasureMapping(mappingType, sourceValue, targetValue, context1);
	}
	else
	{
		mappingElement = oFF.InARepoMappingElement.create(mappingType, sourceValue, targetValue);
	}
	this.m_mappings.add(mappingElement);
	return mappingElement;
};
oFF.InARepoMapper.prototype.addMeasureMapping = function(sourceValue, targetValue, sourceDimensionValue)
{
	return this.addMappingInternal(oFF.ModelMappingType.MEASURE, sourceValue, targetValue, sourceDimensionValue, null);
};
oFF.InARepoMapper.prototype.map = function(serializedModel)
{
	let result = serializedModel;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(serializedModel) && oFF.XCollectionUtils.hasElements(this.m_mappings))
	{
		try
		{
			let modelJson = oFF.JsonParserFactory.createFromSafeString(serializedModel);
			if (oFF.isNull(modelJson))
			{
				return oFF.ExtResult.createWithErrorMessage("Json is not valid");
			}
			this.m_mappings.sortByDirection(oFF.XSortDirection.ASCENDING);
			this.mapModel(modelJson, null, oFF.InARepoMapperContext.getContext(modelJson, null, oFF.InARepoMapperContext.getUndefinedContext()));
			result = oFF.PrUtils.serialize(modelJson, false, false, 0);
		}
		catch (t)
		{
			return oFF.ExtResult.createWithErrorMessage(oFF.XException.getMessage(t));
		}
	}
	return oFF.ExtResult.create(oFF.XStringValue.create(result), null);
};
oFF.InARepoMapper.prototype.mapModel = function(json, jsonKey, context)
{
	if (oFF.isNull(json))
	{
		return null;
	}
	if (json.isString())
	{
		return this.mapString(json.asString().getString(), jsonKey, context);
	}
	if (json.isList())
	{
		let list = json.asList();
		for (let i = 0; i < list.size(); i++)
		{
			let mappedListElement = this.mapModel(list.get(i), jsonKey, context);
			if (oFF.notNull(mappedListElement))
			{
				list.set(i, mappedListElement);
			}
		}
	}
	else if (json.isStructure())
	{
		let structure = json.asStructure();
		let nextContext = oFF.InARepoMapperContext.getContext(structure, jsonKey, context);
		let structureIterator = structure.getKeysAsIterator();
		while (structureIterator.hasNext())
		{
			let key = structureIterator.next();
			let nextElement = structure.getByKey(key);
			if (oFF.notNull(nextElement) && nextElement.isString())
			{
				nextContext = oFF.InARepoMapperContext.getContext(nextElement, key, nextContext);
			}
			if (this.m_structuresUsingMembersAsKey.contains(jsonKey))
			{
				let newKey = this.mapString(key, jsonKey, nextContext);
				if (oFF.notNull(newKey))
				{
					structure.remove(key);
					structure.put(newKey.getString(), nextElement);
				}
			}
			else
			{
				let mappedStructureElement = this.mapModel(nextElement, key, nextContext);
				if (oFF.notNull(mappedStructureElement))
				{
					structure.put(key, mappedStructureElement);
				}
			}
		}
	}
	return null;
};
oFF.InARepoMapper.prototype.mapString = function(stringElement, jsonKey, context)
{
	let value = stringElement;
	let result = null;
	if (oFF.notNull(value))
	{
		let appliedMappingTypes = oFF.XList.create();
		for (let i = 0; i < this.m_mappings.size(); i++)
		{
			let mapping = this.m_mappings.get(i);
			if (!appliedMappingTypes.contains(mapping.getType()) && (oFF.isNull(this.m_sourceModelId) || context.getDatasetId() === null || oFF.XString.isEqual(this.m_sourceModelId, context.getDatasetId())) && mapping.isApplicable(jsonKey, context))
			{
				let mappedValue = mapping.apply(jsonKey, value, context);
				if (oFF.notNull(mappedValue) && !oFF.XString.isEqual(mappedValue, stringElement))
				{
					result = oFF.PrFactory.createString(mappedValue);
					value = result.getString();
					appliedMappingTypes.add(mapping.getType());
				}
			}
		}
	}
	return result;
};
oFF.InARepoMapper.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_mappings = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_mappings);
	this.m_sourceModelId = null;
	this.m_structuresUsingMembersAsKey = oFF.XObjectExt.release(this.m_structuresUsingMembersAsKey);
};
oFF.InARepoMapper.prototype.setModelIds = function(sourceModelId, targetModelId)
{
	this.m_sourceModelId = sourceModelId;
	this.addMapping(oFF.ModelMappingType.DATASETID, sourceModelId, targetModelId);
};

oFF.InARepoMapperContext = function() {};
oFF.InARepoMapperContext.prototype = new oFF.XObject();
oFF.InARepoMapperContext.prototype._ff_c = "InARepoMapperContext";

oFF.InARepoMapperContext.s_undefinedContext = null;
oFF.InARepoMapperContext.create = function(type, value, structure, datasetId)
{
	let context = new oFF.InARepoMapperContext();
	context.m_contextType = type;
	context.m_contextValue = value;
	context.m_structure = structure;
	context.m_datasetId = datasetId;
	return context;
};
oFF.InARepoMapperContext.getContext = function(element, key, currentContext)
{
	if (oFF.notNull(element))
	{
		if (element.isStructure())
		{
			let structure = element.asStructure();
			let contextType = oFF.InARepoMapperContextType.getByType(structure.getStringByKey("CType"));
			let datasetId = structure.getStringByKey("DatasetId");
			if (oFF.isNull(datasetId))
			{
				datasetId = currentContext.getDatasetId();
			}
			if (oFF.notNull(contextType))
			{
				if (contextType.getValueParam() === null)
				{
					let currentContextValue = oFF.notNull(currentContext) && contextType.isTypeOf(currentContext.getType()) ? currentContext.getValue() : null;
					return oFF.InARepoMapperContext.create(contextType, currentContextValue, structure, datasetId);
				}
				let contextValue = structure.getStringByKey(contextType.getValueParam());
				if (oFF.notNull(contextValue))
				{
					return oFF.InARepoMapperContext.create(contextType, contextValue, structure, datasetId);
				}
			}
			if (oFF.notNull(currentContext) && !oFF.XString.isEqual(datasetId, currentContext.getDatasetId()))
			{
				return oFF.InARepoMapperContext.create(currentContext.getType(), currentContext.getValue(), structure, datasetId);
			}
		}
		else if (element.isString() && (oFF.XString.isEqual(key, "MeasureMemberDatasetId") || oFF.XString.isEqual(key, "SecondaryDatasetId")))
		{
			return oFF.InARepoMapperContext.create(currentContext.getType(), currentContext.getValue(), currentContext.getStructure(), element.asString().getString());
		}
	}
	return currentContext;
};
oFF.InARepoMapperContext.getUndefinedContext = function()
{
	if (oFF.isNull(oFF.InARepoMapperContext.s_undefinedContext))
	{
		oFF.InARepoMapperContext.s_undefinedContext = oFF.InARepoMapperContext.create(oFF.InARepoMapperContextType.UNDEFINED, null, null, null);
	}
	return oFF.InARepoMapperContext.s_undefinedContext;
};
oFF.InARepoMapperContext.prototype.m_contextType = null;
oFF.InARepoMapperContext.prototype.m_contextValue = null;
oFF.InARepoMapperContext.prototype.m_datasetId = null;
oFF.InARepoMapperContext.prototype.m_structure = null;
oFF.InARepoMapperContext.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.InARepoMapperContext.prototype.getStructure = function()
{
	return this.m_structure;
};
oFF.InARepoMapperContext.prototype.getType = function()
{
	return this.m_contextType;
};
oFF.InARepoMapperContext.prototype.getValue = function()
{
	return this.m_contextValue;
};
oFF.InARepoMapperContext.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_contextType = null;
	this.m_contextValue = null;
	this.m_structure = null;
	this.m_datasetId = null;
};

oFF.QInAComponentWithList = function() {};
oFF.QInAComponentWithList.prototype = new oFF.QInAComponent();
oFF.QInAComponentWithList.prototype._ff_c = "QInAComponentWithList";

oFF.QInAComponentWithList.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	let inaList = null;
	if (oFF.notNull(modelComponent))
	{
		inaList = this.exportComponentWithList(exporter, modelComponent, flags);
		let tagName = this.getTagName();
		if (oFF.notNull(tagName) && oFF.notNull(inaList))
		{
			let inaInsertStructure = inaParentStructure;
			if (oFF.isNull(inaInsertStructure))
			{
				inaInsertStructure = oFF.PrFactory.createStructure();
			}
			inaInsertStructure.put(tagName, inaList);
			return inaInsertStructure;
		}
	}
	return inaList;
};
oFF.QInAComponentWithList.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	let tagName = this.getTagName();
	let inaList = null;
	if (oFF.isNull(tagName))
	{
		inaList = inaElement;
	}
	else
	{
		if (oFF.notNull(inaElement))
		{
			let inaStructure = inaElement;
			inaList = inaStructure.getListByKey(tagName);
		}
	}
	return this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
};

oFF.QInAComponentWithStructure = function() {};
oFF.QInAComponentWithStructure.prototype = new oFF.QInAComponent();
oFF.QInAComponentWithStructure.prototype._ff_c = "QInAComponentWithStructure";

oFF.QInAComponentWithStructure.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	let inaStructure = null;
	if (oFF.notNull(modelComponent))
	{
		let tagName = this.getTagName();
		if (oFF.isNull(tagName))
		{
			inaStructure = inaParentStructure;
		}
		if (oFF.isNull(inaStructure))
		{
			inaStructure = oFF.PrFactory.createStructure();
		}
		let isExportKeyReference = this.exportKeyReference(exporter, modelComponent, inaStructure);
		if (!isExportKeyReference)
		{
			inaStructure = this.exportComponentWithStructure(exporter, modelComponent, inaStructure, flags);
			if (oFF.notNull(inaStructure))
			{
				inaStructure = oFF.QInAExportUtil.extendStructure(exporter, modelComponent, inaStructure);
				inaStructure = this.extendCustom(exporter, modelComponent, inaStructure);
				oFF.QInAExportUtil.exportComponentExtensions(exporter, inaStructure, modelComponent);
			}
			if (oFF.notNull(tagName))
			{
				if (oFF.notNull(inaStructure))
				{
					let inaInsertStructure = inaParentStructure;
					if (oFF.isNull(inaInsertStructure))
					{
						inaInsertStructure = oFF.PrFactory.createStructure();
					}
					inaInsertStructure.put(tagName, inaStructure);
					inaStructure = inaInsertStructure;
				}
			}
		}
	}
	return inaStructure;
};
oFF.QInAComponentWithStructure.prototype.exportKeyReference = function(exporter, modelComponent, inaStructure)
{
	return false;
};
oFF.QInAComponentWithStructure.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	return inaStructure;
};
oFF.QInAComponentWithStructure.prototype.getClientQueryObjectStorageName = function(context)
{
	let name = null;
	if (oFF.notNull(context) && context.getQueryManager() !== null && context.getQueryManager().getClientQueryObjectStorageName() !== null)
	{
		name = context.getQueryManager().getClientQueryObjectStorageName();
	}
	return name;
};
oFF.QInAComponentWithStructure.prototype.getSharedObjectFromKeyRef = function(parentComponent, context, inaKeyRef)
{
	let keyRef;
	let storageName = inaKeyRef.getStringByKey("StorageName");
	let effectiveStorageName = this.getClientQueryObjectStorageName(parentComponent);
	if (oFF.isNull(effectiveStorageName))
	{
		effectiveStorageName = this.getClientQueryObjectStorageName(context);
	}
	if (oFF.isNull(effectiveStorageName))
	{
		effectiveStorageName = storageName;
	}
	keyRef = oFF.QFactory.createKeyRef(effectiveStorageName, inaKeyRef.getStringByKey("GroupName"), inaKeyRef.getStringByKey("ObjectName"));
	let sharedObject = null;
	if (oFF.XString.isEqual(storageName, oFF.KeyRefConstants.MAIN_STORAGE) && parentComponent.getKeyRefStorage() !== null)
	{
		sharedObject = parentComponent.getKeyRefStorage().get(storageName, inaKeyRef.getStringByKey("GroupName"), inaKeyRef.getStringByKey("ObjectName"));
	}
	else
	{
		sharedObject = context.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(keyRef, null);
	}
	return sharedObject;
};
oFF.QInAComponentWithStructure.prototype.importChangedProperties = function(modelComponent, inaStructure)
{
	if (oFF.notNull(inaStructure) && oFF.notNull(modelComponent))
	{
		let listOfChangedProperties = inaStructure.getListByKey("ChangedProperties");
		let changedPropertiesInDetailInA = inaStructure.getStructureByKey("ChangedPropertiesInDetail");
		let listOfChangedPropertiesFromModellerMD = inaStructure.getListByKey("ChangedPropertiesFromModellerMetadata");
		if (oFF.notNull(listOfChangedProperties) && listOfChangedProperties.size() > 0)
		{
			let changedProperties = oFF.XHashSetOfString.create();
			for (let i = 0; i < listOfChangedProperties.size(); i++)
			{
				changedProperties.add(listOfChangedProperties.getStringAt(i));
			}
			modelComponent.setChangedProperties(changedProperties);
		}
		if (oFF.notNull(changedPropertiesInDetailInA) && changedPropertiesInDetailInA.hasElements())
		{
			let changedPropertiesInDetail = modelComponent.getChangedPropertiesInDetail();
			let propertyKeysInA = changedPropertiesInDetailInA.getKeysAsReadOnlyList();
			for (let propertyKeysIndex = 0; propertyKeysIndex < propertyKeysInA.size(); propertyKeysIndex++)
			{
				let propertyInA = propertyKeysInA.get(propertyKeysIndex);
				let valuesMap = oFF.XHashMapByString.create();
				changedPropertiesInDetail.put(propertyInA, valuesMap);
				let valuesInA = changedPropertiesInDetailInA.getStructureByKey(propertyInA);
				let keysAsReadOnlyListOfString = valuesInA.getKeysAsReadOnlyList();
				for (let internalIndex = 0; internalIndex < keysAsReadOnlyListOfString.size(); internalIndex++)
				{
					let internalKey = keysAsReadOnlyListOfString.get(internalIndex);
					valuesMap.put(internalKey, oFF.XStringValue.create(valuesInA.getStringByKey(internalKey)));
				}
			}
		}
		if (oFF.notNull(listOfChangedPropertiesFromModellerMD) && listOfChangedPropertiesFromModellerMD.size() > 0)
		{
			let changedPropertiesFromModellerMetadata = modelComponent.getChangedPropertiesFromModellerMetadata();
			for (let index = 0; index < listOfChangedPropertiesFromModellerMD.size(); index++)
			{
				changedPropertiesFromModellerMetadata.add(listOfChangedPropertiesFromModellerMD.getStringAt(index));
			}
		}
	}
};
oFF.QInAComponentWithStructure.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	let inaStructure = inaElement;
	let tagName = this.getTagName();
	if (oFF.notNull(tagName) && oFF.notNull(inaStructure))
	{
		let content = inaStructure.getByKey(tagName);
		inaStructure = oFF.notNull(content) && content.isStructure() ? content : null;
	}
	let myModelComponent = modelComponent;
	if (oFF.isNull(modelComponent))
	{
		let olapEnv = null;
		let application = null;
		if (oFF.notNull(context))
		{
			olapEnv = context.getOlapEnv();
			application = context.getApplication();
		}
		if (oFF.isNull(application))
		{
			application = importer.getApplication();
		}
		if (oFF.notNull(inaStructure))
		{
			let inaKeyRef = inaStructure.getStructureByKey("KeyRef");
			if (oFF.notNull(inaKeyRef) && oFF.notNull(context))
			{
				return this.getSharedObjectFromKeyRef(parentComponent, context, inaKeyRef);
			}
		}
		myModelComponent = this.newModelComponent(application, olapEnv, parentComponent, context);
		if (oFF.notNull(myModelComponent) && !importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			myModelComponent.stopEventing();
		}
	}
	let returnModelComponent = this.importComponentWithStructure(importer, inaStructure, myModelComponent, parentComponent, context);
	oFF.QInAImportUtil.importComponentTagging(importer, inaStructure, returnModelComponent);
	oFF.QInAImportUtil.importComponentExtensions(importer, inaStructure, returnModelComponent);
	if (oFF.notNull(returnModelComponent) && importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE))
	{
		this.importChangedProperties(returnModelComponent, inaStructure);
	}
	if (oFF.isNull(modelComponent) && oFF.notNull(myModelComponent) && !importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		myModelComponent.resumeEventing();
	}
	return returnModelComponent;
};
oFF.QInAComponentWithStructure.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return null;
};

oFF.QInARepoFilterCartesianListLegacy = function() {};
oFF.QInARepoFilterCartesianListLegacy.prototype = new oFF.QInAComponent();
oFF.QInARepoFilterCartesianListLegacy.prototype._ff_c = "QInARepoFilterCartesianListLegacy";

oFF.QInARepoFilterCartesianListLegacy.prototype.exportComponent = oFF.noSupport;
oFF.QInARepoFilterCartesianListLegacy.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_LIST;
};
oFF.QInARepoFilterCartesianListLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterCartesianListLegacy.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	let inaCartesianList = inaElement;
	let cartesianListExt = modelComponent;
	let filterExpression = parentComponent;
	let fieldAccessor = context.getFieldAccessorSingle();
	let fieldName = inaCartesianList.getStringByKey("FieldName");
	let cartesianList = cartesianListExt;
	if (oFF.notNull(fieldName))
	{
		let field = fieldAccessor.getFieldByName(fieldName);
		if (oFF.isNull(field))
		{
			let queryModel = filterExpression.getQueryModel();
			if (oFF.notNull(queryModel))
			{
				let dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
				if (oFF.notNull(dimensionByName))
				{
					let inaHierarchy2 = inaCartesianList.getStructureByKey("Hierarchy");
					if (oFF.isNull(inaHierarchy2))
					{
						field = dimensionByName.getFlatKeyField();
					}
					else
					{
						field = dimensionByName.getHierarchyKeyField();
					}
				}
			}
		}
		if (oFF.notNull(field))
		{
			let inaHierarchy = inaCartesianList.getStructureByKey("Hierarchy");
			let inaHierarchyName = null;
			let inaHierarchyDueDate = null;
			let inaHierarchyVersion = null;
			if (oFF.notNull(inaHierarchy))
			{
				inaHierarchyName = inaHierarchy.getStringByKey("Name");
				if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && importer.isAbap(field))
				{
					let hierarchyDueDateValue = inaHierarchy.getStringByKey("DueDate");
					if (oFF.notNull(hierarchyDueDateValue))
					{
						inaHierarchyDueDate = oFF.XDate.createDateFromSAPFormat(hierarchyDueDateValue);
					}
					inaHierarchyVersion = inaHierarchy.getStringByKey("Version");
				}
			}
			if (oFF.isNull(cartesianList))
			{
				cartesianList = oFF.QFilterCartesianList._createMd(context, filterExpression, field.getMetadata(), inaHierarchyName);
				cartesianList.setHierarchyInfo(inaHierarchyName, inaHierarchyDueDate, inaHierarchyVersion);
			}
			else
			{
				cartesianList.clear();
			}
			let convertToFlatFilter = inaCartesianList.getBooleanByKeyExt("ConvertToFlatSelection", false);
			cartesianList.setConvertToFlatFilter(convertToFlatFilter);
			let supplementsFieldsNamesList = inaCartesianList.getListByKey("SupplementsFieldNames");
			if (oFF.notNull(supplementsFieldsNamesList))
			{
				let len = supplementsFieldsNamesList.size();
				for (let y = 0; y < len; y++)
				{
					let name = supplementsFieldsNamesList.getStringAt(y);
					let supplField = fieldAccessor.getFieldByName(name);
					cartesianList.addSupplementField(supplField);
				}
			}
			let elements = inaCartesianList.getListByKey("Elements");
			if (oFF.notNull(elements))
			{
				let size = elements.size();
				for (let i = 0; i < size; i++)
				{
					let setOperandElement = elements.getStructureAt(i);
					let element = importer.importFilterOperation(setOperandElement, cartesianList, context);
					cartesianList.add(element);
				}
			}
		}
	}
	return cartesianList;
};

oFF.InARepoMappingElement = function() {};
oFF.InARepoMappingElement.prototype = new oFF.XObject();
oFF.InARepoMappingElement.prototype._ff_c = "InARepoMappingElement";

oFF.InARepoMappingElement.create = function(type, sourceValue, targetValue)
{
	let mappingElement = new oFF.InARepoMappingElement();
	mappingElement.setupElement(type, sourceValue, targetValue, null);
	return mappingElement;
};
oFF.InARepoMappingElement.prototype.m_context = null;
oFF.InARepoMappingElement.prototype.m_dimensionRef = null;
oFF.InARepoMappingElement.prototype.m_ignoredKeys = null;
oFF.InARepoMappingElement.prototype.m_sourceValue = null;
oFF.InARepoMappingElement.prototype.m_targetValue = null;
oFF.InARepoMappingElement.prototype.m_type = null;
oFF.InARepoMappingElement.prototype.addIgnoredKey = function(ignoredKey)
{
	this.m_ignoredKeys.add(ignoredKey);
};
oFF.InARepoMappingElement.prototype.apply = function(key, value, context)
{
	return oFF.XString.isEqual(value, this.m_sourceValue) ? this.m_targetValue : null;
};
oFF.InARepoMappingElement.prototype.compareTo = function(objectToCompare)
{
	return this.m_type.getLevel() - objectToCompare.getType().getLevel();
};
oFF.InARepoMappingElement.prototype.getContext = function()
{
	return this.m_context;
};
oFF.InARepoMappingElement.prototype.getSourceValue = function()
{
	return this.m_sourceValue;
};
oFF.InARepoMappingElement.prototype.getTargetValue = function()
{
	return this.m_targetValue;
};
oFF.InARepoMappingElement.prototype.getType = function()
{
	return this.m_type;
};
oFF.InARepoMappingElement.prototype.isApplicable = function(key, context)
{
	return !this.isIgnored(key) && !this.isDimensionRef(key) && !context.getType().isTypeOf(oFF.InARepoMapperContextType.RESULT_STRUCTURE);
};
oFF.InARepoMappingElement.prototype.isDimensionRef = function(key)
{
	return this.m_dimensionRef.contains(key);
};
oFF.InARepoMappingElement.prototype.isIgnored = function(key)
{
	return this.m_ignoredKeys.contains(key);
};
oFF.InARepoMappingElement.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_type = null;
	this.m_sourceValue = null;
	this.m_targetValue = null;
	this.m_context = null;
	this.m_ignoredKeys = oFF.XObjectExt.release(this.m_ignoredKeys);
	this.m_dimensionRef = oFF.XObjectExt.release(this.m_dimensionRef);
};
oFF.InARepoMappingElement.prototype.setupElement = function(type, sourceValue, targetValue, context)
{
	this.m_type = type;
	this.m_sourceValue = sourceValue;
	this.m_targetValue = targetValue;
	this.m_context = context;
	this.m_ignoredKeys = oFF.XList.create();
	this.addIgnoredKey("CType");
	this.m_dimensionRef = oFF.XList.create();
	this.m_dimensionRef.add("OrderedDimensionNames");
	this.m_dimensionRef.add("AggregationDimension");
	this.m_dimensionRef.add("AggregationDimensions");
	this.m_dimensionRef.add("PostAggregationDimensions");
	this.m_dimensionRef.add("ExceptionAggregationDimensions");
	this.m_dimensionRef.add("DimensionName");
};

oFF.InARepoStructureMemberLazyLoader = function() {};
oFF.InARepoStructureMemberLazyLoader.prototype = new oFF.XObjectExt();
oFF.InARepoStructureMemberLazyLoader.prototype._ff_c = "InARepoStructureMemberLazyLoader";

oFF.InARepoStructureMemberLazyLoader.create = function(dimension, mode, inaStructure)
{
	if (oFF.isNull(mode))
	{
		throw oFF.XException.createIllegalArgumentException("InARepoStrucutreMemberLazyLoader - QModelFormat mode is null");
	}
	if (!mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("InARepoStrucutreMemberLazyLoader - Does not support QModelFormat:", mode.getName()));
	}
	let lazyLoader = new oFF.InARepoStructureMemberLazyLoader();
	lazyLoader.m_dimension = dimension;
	lazyLoader.m_importer = oFF.QInAImportFactory.createWithQueryManagerCapabilities(dimension.getApplication(), mode, dimension.getQueryManager());
	lazyLoader.m_modelFormat = mode;
	lazyLoader.m_inaStructure = inaStructure.cloneExt(null);
	lazyLoader.m_repoMetadataMap = oFF.XHashMapByString.create();
	lazyLoader.m_memberNameList = oFF.XList.create();
	let inaMemberList = lazyLoader.m_inaStructure.getListByKey("MembersRepo");
	if (oFF.notNull(inaMemberList))
	{
		for (let i = 0; i < inaMemberList.size(); i++)
		{
			let inaMember = inaMemberList.get(i).asStructure();
			lazyLoader.m_repoMetadataMap.put(inaMember.getStringByKey("Name"), inaMember);
			lazyLoader.m_memberNameList.add(inaMember.getStringByKey("Name"));
		}
	}
	return lazyLoader;
};
oFF.InARepoStructureMemberLazyLoader.prototype.m_dimension = null;
oFF.InARepoStructureMemberLazyLoader.prototype.m_importer = null;
oFF.InARepoStructureMemberLazyLoader.prototype.m_inaStructure = null;
oFF.InARepoStructureMemberLazyLoader.prototype.m_memberNameList = null;
oFF.InARepoStructureMemberLazyLoader.prototype.m_modelFormat = null;
oFF.InARepoStructureMemberLazyLoader.prototype.m_repoMetadataMap = null;
oFF.InARepoStructureMemberLazyLoader.prototype.copyStructureMemberLazyLoader = function(dimension)
{
	return oFF.InARepoStructureMemberLazyLoader.create(dimension, this.m_modelFormat, this.m_inaStructure);
};
oFF.InARepoStructureMemberLazyLoader.prototype.getInaMembersStructureCopy = function()
{
	let inaMembersStructure = oFF.PrFactory.createStructure();
	let inaStructureKeys = this.m_inaStructure.getKeysAsIterator();
	while (inaStructureKeys.hasNext())
	{
		let key = inaStructureKeys.next();
		inaMembersStructure.put(key, this.m_inaStructure.getByKey(key));
	}
	return inaMembersStructure;
};
oFF.InARepoStructureMemberLazyLoader.prototype.hasUnloadedStructureMembers = function()
{
	return this.m_repoMetadataMap.size() > 0;
};
oFF.InARepoStructureMemberLazyLoader.prototype.loadAllStructureMembers = function()
{
	let inaMemberList = this.m_inaStructure.getListByKey("MembersRepo");
	if (oFF.notNull(inaMemberList) && inaMemberList.size() > 0)
	{
		let inaMembersStructure = this.getInaMembersStructureCopy();
		let memberList = inaMembersStructure.putNewList("MembersRepo");
		memberList.addAll(inaMemberList);
		this.m_repoMetadataMap.clear();
		this.m_memberNameList.clear();
		inaMemberList.clear();
		this.loadStructureMemberStructure(inaMembersStructure);
	}
};
oFF.InARepoStructureMemberLazyLoader.prototype.loadStructureMember = function(memberName)
{
	if (this.m_repoMetadataMap.getByKey(memberName) !== null)
	{
		let memberIdx = this.m_memberNameList.getIndex(memberName);
		if (memberIdx >= 0)
		{
			let inaMembersStructure = this.getInaMembersStructureCopy();
			let memberList = inaMembersStructure.putNewList("MembersRepo");
			memberList.add(this.m_repoMetadataMap.getByKey(memberName));
			this.m_repoMetadataMap.remove(memberName);
			let inaMemberList = this.m_inaStructure.getListByKey("MembersRepo");
			inaMemberList.removeAt(memberIdx);
			this.m_memberNameList.removeAt(memberIdx);
			this.loadStructureMemberStructure(inaMembersStructure);
		}
	}
};
oFF.InARepoStructureMemberLazyLoader.prototype.loadStructureMemberStructure = function(inaMembersStructure)
{
	this.m_dimension.getQueryManager().stopEventing();
	let originalBasicMeasureAggregationExportedInRepo = this.m_dimension.getQueryModel().isBasicMeasureAggregationExportedInRepo();
	if (!originalBasicMeasureAggregationExportedInRepo)
	{
		this.m_dimension.getQueryModel().setBasicMeasureAggregationExportForRepo(true);
	}
	let originalBasicMeasureSettingsExportedInRepo = this.m_dimension.getQueryModel().isBasicMeasureSettingsExportedInRepo();
	if (!originalBasicMeasureSettingsExportedInRepo)
	{
		this.m_dimension.getQueryModel().setBasicMeasureSettingsExportedInRepo(true);
	}
	this.m_importer.importComponent(oFF.OlapComponentType.MEMBERS, inaMembersStructure, this.m_dimension, null, this.m_dimension.getContext());
	if (!originalBasicMeasureAggregationExportedInRepo)
	{
		this.m_dimension.getQueryModel().setBasicMeasureAggregationExportForRepo(false);
	}
	if (!originalBasicMeasureSettingsExportedInRepo)
	{
		this.m_dimension.getQueryModel().setBasicMeasureSettingsExportedInRepo(false);
	}
	this.m_dimension.getQueryManager().resumeEventing();
};
oFF.InARepoStructureMemberLazyLoader.prototype.loadStructureMembers = function(memberNames)
{
	if (memberNames.size() > 0)
	{
		let hasMembersToLoad = false;
		let inaMembersStructure = this.getInaMembersStructureCopy();
		let memberList = inaMembersStructure.putNewList("MembersRepo");
		for (let i = 0; i < memberNames.size(); i++)
		{
			let memberName = memberNames.get(i);
			let memberMetadata = this.m_repoMetadataMap.getByKey(memberName);
			if (oFF.notNull(memberMetadata))
			{
				let memberIdx = this.m_memberNameList.getIndex(memberName);
				if (memberIdx >= 0)
				{
					memberList.add(memberMetadata);
					this.m_repoMetadataMap.remove(memberName);
					let inaMemberList = this.m_inaStructure.getListByKey("MembersRepo");
					inaMemberList.removeAt(memberIdx);
					this.m_memberNameList.removeAt(memberIdx);
					hasMembersToLoad = true;
				}
			}
		}
		if (hasMembersToLoad)
		{
			this.loadStructureMemberStructure(inaMembersStructure);
		}
	}
};

oFF.QInARepoVariableManager = function() {};
oFF.QInARepoVariableManager.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoVariableManager.prototype._ff_c = "QInARepoVariableManager";

oFF.QInARepoVariableManager.prototype.addUsedFunctionalVariables = function(element, usedFunctionalVariable)
{
	if (oFF.notNull(element))
	{
		if (element.getOlapComponentType().isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOp = element;
			if (filterOp.getLow().isFunctionalVariableValue())
			{
				usedFunctionalVariable.add(filterOp.getLow().getVariableValue().getName());
			}
			if (filterOp.getComparisonOperator() !== null && filterOp.getComparisonOperator().getNumberOfParameters() > 1 && filterOp.getHigh().isFunctionalVariableValue())
			{
				usedFunctionalVariable.add(filterOp.getHigh().getVariableValue().getName());
			}
		}
		else
		{
			let children = element.getChildren();
			while (children.hasNext())
			{
				this.addUsedFunctionalVariables(children.next(), usedFunctionalVariable);
			}
			oFF.XObjectExt.release(children);
		}
	}
};
oFF.QInARepoVariableManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let output;
	let variableContainer = modelComponent;
	let queryModel = variableContainer.getQueryModel();
	if (oFF.notNull(queryModel) && !queryModel.isExportingVariables() && !queryModel.hasProcessingStep())
	{
		output = null;
	}
	else
	{
		output = null;
		let variables = variableContainer.getVariables();
		if (oFF.XCollectionUtils.hasElements(variables))
		{
			let funcVariablesUsedInQuery = this.getFunctionalVariablesUsedInQuery(queryModel);
			let inaVariableList = oFF.PrFactory.createList();
			let len = variables.size();
			for (let i = 0; i < len; i++)
			{
				let variable = variables.get(i);
				let variableTouchedOrIsRRI = variable.getModCounter() > 0 || variable.isRRIAffectedComponent();
				let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || variableTouchedOrIsRRI;
				if (shouldContinueExporting && (variable.getVariableType() !== oFF.VariableType.FUNCTIONAL_VARIABLE) || funcVariablesUsedInQuery.contains(variable.getName()))
				{
					let inaVariable = exporter.exportVariable(variable, null);
					oFF.XCollectionUtils.addIfNotNull(inaVariableList, inaVariable);
				}
			}
			output = inaVariableList;
		}
	}
	return output;
};
oFF.QInARepoVariableManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_MANAGER;
};
oFF.QInARepoVariableManager.prototype.getFunctionalVariablesUsedInQuery = function(queryModel)
{
	let result = oFF.XHashSetOfString.create();
	if (oFF.notNull(queryModel) && queryModel.getModelCapabilities().supportsFunctionalVariables())
	{
		let filter = queryModel.getFilter();
		this.addUsedFunctionalVariables(filter.isDynamicFilterInitialized() ? filter.getDynamicFilter().getFilterRootElement() : null, result);
		this.addUsedFunctionalVariables(filter.isVisibilityFilterInitialized() ? filter.getVisibilityFilter().getFilterRootElement() : null, result);
		oFF.XStream.of(queryModel.getVariables()).filter((variable) => {
			return variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
		}).forEach((variable) => {
			this.addUsedFunctionalVariables(variable.getMemberFilter(), result);
		});
	}
	return result;
};
oFF.QInARepoVariableManager.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoVariableManager.prototype.getTagName = function()
{
	return "Variables";
};
oFF.QInARepoVariableManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let variableContainer = modelComponent;
	if (oFF.notNull(inaList))
	{
		let len = inaList.size();
		for (let varIdx = 0; varIdx < len; varIdx++)
		{
			let inaVariable = inaList.getStructureAt(varIdx);
			let variableName = inaVariable.getStringByKey("Name");
			let variable = variableContainer.getVariableBaseByName(variableName);
			if (oFF.notNull(variable))
			{
				let variableType = variable.getVariableType();
				if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
				{
					importer.importSimpleTypeVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
				{
					importer.importDimensionMemberVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
				{
					importer.importOptionListVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.FUNCTIONAL_VARIABLE))
				{
					importer.importFunctionalVariable(inaVariable, variable, context);
				}
				else
				{
					importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate5("The variable '", variableName, "' of variable type '", variableType.getName(), "' was not imported correctly"));
				}
			}
			else
			{
				importer.addWarning(oFF.ErrorCodes.ET_ELEMENT_NOT_FOUND, oFF.XStringUtils.concatenate3("The variable '", variableName, "' was not found"));
			}
		}
	}
	return variableContainer;
};

oFF.QInARepository = function() {};
oFF.QInARepository.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepository.prototype._ff_c = "QInARepository";

oFF.QInARepository.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};
oFF.QInARepository.prototype.exportKeyReference = function(exporter, modelComponent, inaStructure)
{
	let done = false;
	let modelComponent2 = modelComponent;
	let context = modelComponent2.getContext();
	let queryManager = null;
	let olapEnv = null;
	if (oFF.notNull(context))
	{
		queryManager = context.getQueryManager();
		olapEnv = context.getOlapEnv();
	}
	if (oFF.isNull(queryManager) || queryManager.isKeyRefSerializationEnabled())
	{
		if (oFF.notNull(olapEnv) && olapEnv.getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(modelComponent, null) !== null)
		{
			oFF.QInARepoUtils.addKeyRefStructure(exporter, modelComponent, inaStructure, queryManager);
			done = true;
		}
		else if (oFF.isNull(olapEnv) && modelComponent.getStorageName() !== null && !oFF.XString.isEqual(modelComponent.getStorageName(), oFF.KeyRefConstants.MAIN_STORAGE) || modelComponent.isReleased())
		{
			oFF.QInARepoUtils.addKeyRefStructure(exporter, modelComponent, inaStructure, queryManager);
			done = true;
		}
	}
	return done;
};
oFF.QInARepository.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	let olapComponentType = this.getComponentType();
	let ctypeValue = oFF.QInAConverter.lookupComponentTypeInA(olapComponentType);
	if (oFF.isNull(ctypeValue))
	{
		throw oFF.XException.createRuntimeException("ctype not found");
	}
	if (inaStructure.hasElements())
	{
		inaStructure.putString("CType", ctypeValue);
		if (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DELTA) && modelComponent.canMaterializeCompleteObject())
		{
			inaStructure.putBoolean("UserDefinedComponent", true);
		}
		if (exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE)
		{
			let changedProperties = modelComponent.getChangedProperties();
			let changedPropertiesInDetail = modelComponent.getChangedPropertiesInDetail();
			let changedPropertiesFromModellerMetadata = modelComponent.getChangedPropertiesFromModellerMetadata();
			if (oFF.XCollectionUtils.hasElements(changedProperties))
			{
				let changedPropertiesList = oFF.PrFactory.createList();
				let listToAdd = changedProperties.getValuesAsReadOnlyList();
				changedPropertiesList.addAllStrings(listToAdd);
				inaStructure.put("ChangedProperties", changedPropertiesList);
			}
			if (oFF.XCollectionUtils.hasElements(changedPropertiesInDetail))
			{
				let changedPropertiesInDetailInA = oFF.PrFactory.createStructure();
				let keysAsReadOnlyListOfString = changedPropertiesInDetail.getKeysAsReadOnlyList();
				for (let i = 0; i < keysAsReadOnlyListOfString.size(); i++)
				{
					let key = keysAsReadOnlyListOfString.get(i);
					let changedPropertiesForProperty = changedPropertiesInDetailInA.putNewStructure(key);
					let internalObject = changedPropertiesInDetail.getByKey(key);
					if (oFF.notNull(internalObject))
					{
						let internalKeys = internalObject.getKeysAsReadOnlyList();
						for (let internalKeyIndex = 0; internalKeyIndex < internalKeys.size(); internalKeyIndex++)
						{
							let internalKey = internalKeys.get(internalKeyIndex);
							let byKey = internalObject.getByKey(internalKey);
							changedPropertiesForProperty.putString(internalKey, oFF.isNull(byKey) ? null : byKey.toString());
						}
					}
				}
				inaStructure.put("ChangedPropertiesInDetail", changedPropertiesInDetailInA);
			}
			if (oFF.XCollectionUtils.hasElements(changedPropertiesFromModellerMetadata))
			{
				let changedPropertiesFromModellerMetadataList = oFF.PrFactory.createList();
				changedPropertiesFromModellerMetadataList.addAllStrings(changedPropertiesFromModellerMetadata.getValuesAsReadOnlyList());
				inaStructure.put("ChangedPropertiesFromModellerMetadata", changedPropertiesFromModellerMetadataList);
			}
			if (modelComponent.canMaterializeCompleteObject())
			{
				inaStructure.putBoolean("UserDefinedComponent", true);
			}
		}
	}
	return inaStructure;
};
oFF.QInARepository.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepository.prototype.getNamesOfElementsInList = function(inaList)
{
	let size = inaList.size();
	let namesOfInAObjects = oFF.XList.create();
	for (let index = 0; index < size; index++)
	{
		let inaComponent = inaList.getStructureAt(index);
		namesOfInAObjects.add(inaComponent.getStringByKey("Name"));
	}
	return namesOfInAObjects;
};
oFF.QInARepository.prototype.isMatching = function(inaImportElement)
{
	let isMatching = oFF.QInAComponentWithStructure.prototype.isMatching.call( this , inaImportElement);
	if (isMatching && oFF.notNull(inaImportElement))
	{
		let inaStructure = inaImportElement;
		let tagName = this.getTagName();
		if (oFF.isNull(tagName))
		{
			if (inaStructure.getStringByKey("CType") === null)
			{
				isMatching = false;
			}
		}
		else
		{
			isMatching = inaStructure.containsKey(tagName);
		}
	}
	return isMatching;
};
oFF.QInARepository.prototype.newComponentCreationAllowed = function(importer, inaStructure)
{
	return importer.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || importer.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA && inaStructure.getBooleanByKeyExt("UserDefinedComponent", false) && !inaStructure.getBooleanByKeyExt("isModelDefinedMember", false);
};
oFF.QInARepository.prototype.removeModelElementsNotInInA = function(importer, inaList, componentManager, listInComponentManager)
{
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		let namesOfInAObjects = this.getNamesOfElementsInList(inaList);
		for (let i = listInComponentManager.size() - 1; i >= 0; i--)
		{
			let modelComponent = listInComponentManager.get(i);
			if (!namesOfInAObjects.contains(modelComponent.getName()))
			{
				componentManager.removeElement(modelComponent);
			}
		}
	}
};

oFF.QInARepoAttributeLegacy = function() {};
oFF.QInARepoAttributeLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoAttributeLegacy.prototype._ff_c = "QInARepoAttributeLegacy";

oFF.QInARepoAttributeLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoAttributeLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ATTRIBUTE;
};
oFF.QInARepoAttributeLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoAttributeLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = parentComponent;
	let name = inaStructure.getStringByKey("Name");
	let attribute = dimension.getAttributeByName(name);
	if (oFF.notNull(attribute))
	{
		let inaResultSetFields = inaStructure.getListByKey("ResultSetFields");
		if (oFF.notNull(inaResultSetFields))
		{
			let resultSetFields = attribute.getResultSetFields();
			resultSetFields.clear();
			let len = inaResultSetFields.size();
			for (let i = 0; i < len; i++)
			{
				let field = attribute.getFieldByName(inaResultSetFields.getStringAt(i));
				if (oFF.notNull(field))
				{
					resultSetFields.add(field);
				}
			}
		}
	}
	return attribute;
};

oFF.QInARepoAxesSettingsLegacy = function() {};
oFF.QInARepoAxesSettingsLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoAxesSettingsLegacy.prototype._ff_c = "QInARepoAxesSettingsLegacy";

oFF.QInARepoAxesSettingsLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoAxesSettingsLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXES_SETTINGS;
};
oFF.QInARepoAxesSettingsLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoAxesSettingsLegacy.prototype.getTagName = function()
{
	return "Axes";
};
oFF.QInARepoAxesSettingsLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaList))
	{
		let queryModel = context.getQueryModel();
		if (importer.m_capabilities.supportsZeroSuppression() || importer.m_capabilities.supportsNullZeroSuppression())
		{
			let all = oFF.AxisType.getAll();
			let allSize = all.size();
			for (let k = 0; k < allSize; k++)
			{
				let axis = queryModel.getAxisBase(all.get(k));
				if (oFF.notNull(axis))
				{
					axis.setSupportsZeroSuppression(true);
				}
			}
		}
		let len = inaList.size();
		for (let i = 0; i < len; i++)
		{
			importer.importAxis(inaList.getStructureAt(i), null, context);
		}
	}
	return null;
};

oFF.QInARepoAxisLegacy = function() {};
oFF.QInARepoAxisLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoAxisLegacy.prototype._ff_c = "QInARepoAxisLegacy";

oFF.QInARepoAxisLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoAxisLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXIS;
};
oFF.QInARepoAxisLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoAxisLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let supportsZeroSuppression = importer.m_capabilities.supportsZeroSuppression();
	let axisType;
	let axisTypeValue = inaStructure.getStringByKey("Axis");
	if (oFF.isNull(axisTypeValue))
	{
		axisType = oFF.QInAConverter.lookupAxisTypeInt(inaStructure.getIntegerByKey("Type"));
	}
	else
	{
		axisType = oFF.QInAConverter.lookupAxisType(axisTypeValue);
	}
	let queryModel = context.getQueryModel();
	let axis = queryModel.getAxisBase(axisType);
	if (oFF.notNull(axis))
	{
		if (supportsZeroSuppression)
		{
			let valueType = inaStructure.getIntegerByKey("ZeroSuppressionType");
			let zeroSuppressionType = oFF.QInAConverter.lookupSuppressionType(valueType);
			axis.setZeroSuppressionType(zeroSuppressionType);
			axis.setDefaultZeroSuppression(zeroSuppressionType);
		}
		importer.importTotals(inaStructure, axis.getResultStructureControllerBase(), context);
	}
	return axis;
};

oFF.QInARepoConditionManagerLegacy = function() {};
oFF.QInARepoConditionManagerLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoConditionManagerLegacy.prototype._ff_c = "QInARepoConditionManagerLegacy";

oFF.QInARepoConditionManagerLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoConditionManagerLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_MANAGER;
};
oFF.QInARepoConditionManagerLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoConditionManagerLegacy.prototype.getTagName = function()
{
	return "Conditions";
};
oFF.QInARepoConditionManagerLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let conditionManager = modelComponent;
	if (oFF.notNull(conditionManager))
	{
		conditionManager.clear();
		if (oFF.notNull(inaList))
		{
			let queryModelBase = context.getQueryModel();
			let len = inaList.size();
			for (let i = 0; i < len; i++)
			{
				let inaCurrentCondition = inaList.getStructureAt(i);
				let currentCondition = importer.importCondition(queryModelBase, inaCurrentCondition, null);
				conditionManager.add(currentCondition);
			}
		}
	}
	return conditionManager;
};

oFF.QInARepoConditionsConditionLegacy = function() {};
oFF.QInARepoConditionsConditionLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoConditionsConditionLegacy.prototype._ff_c = "QInARepoConditionsConditionLegacy";

oFF.QInARepoConditionsConditionLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoConditionsConditionLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITION;
};
oFF.QInARepoConditionsConditionLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoConditionsConditionLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return modelComponent;
	}
	let newCondition;
	let inACondName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(modelComponent))
	{
		if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY)
		{
			let isBackendCondition = inaStructure.getBooleanByKeyExt("IsBackendCondition", true);
			newCondition = oFF.QCondition.create(context, parentComponent, inACondName, isBackendCondition);
		}
		else
		{
			newCondition = oFF.QCondition.create(context, parentComponent, inACondName, true);
		}
	}
	else
	{
		newCondition = modelComponent;
		newCondition.setConditionName(inACondName);
	}
	newCondition.setActive(inaStructure.getBooleanByKey("Active"));
	newCondition.setUsedState(inaStructure.getStringByKey("IsUsed"));
	newCondition.setDescription(inaStructure.getStringByKey("Description"));
	let onDisabled = inaStructure.getStringByKey("OnDisabled");
	newCondition.setApplyConditionAfterVisibilityFilter(inaStructure.getBooleanByKeyExt("AfterVisibilityFilter", false));
	if (oFF.notNull(onDisabled))
	{
		if (oFF.XString.isEqual(onDisabled, "Error"))
		{
			newCondition.setOnDisabledToWarning(false);
		}
	}
	let inAEvaluateOnDimensionTypeString = inaStructure.getStringByKey("EvaluateOnDimensions");
	let conditionDimensionEvaluationType = oFF.ConditionDimensionEvaluationType.lookupName(inAEvaluateOnDimensionTypeString);
	if (oFF.notNull(conditionDimensionEvaluationType))
	{
		newCondition.setDimensionEvaluationType(conditionDimensionEvaluationType);
	}
	let queryModel = context.getQueryModel();
	let inADimensionList = inaStructure.getListByKey("EvaluateOnDimensionsList");
	let dimSize;
	let idxDim;
	if (!oFF.PrUtils.isListEmpty(inADimensionList) && oFF.notNull(queryModel))
	{
		dimSize = inADimensionList.size();
		for (idxDim = 0; idxDim < dimSize; idxDim++)
		{
			let inACurrentDimensionName = inADimensionList.getStringAt(idxDim);
			if (oFF.notNull(inACurrentDimensionName))
			{
				let currentDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentDimensionName);
				if (oFF.notNull(currentDimension))
				{
					newCondition.addEvaluationDimension(currentDimension);
				}
			}
		}
	}
	let inAThresholds = inaStructure.getListByKey("Threshold");
	if (!oFF.PrUtils.isListEmpty(inAThresholds))
	{
		let thresholdSize = inAThresholds.size();
		for (let idxThreshold = 0; idxThreshold < thresholdSize; idxThreshold++)
		{
			let inACurrentThreshold = inAThresholds.getStructureAt(idxThreshold);
			if (oFF.notNull(inACurrentThreshold))
			{
				newCondition.addThreshold(importer.importConditionThreshold(queryModel, inACurrentThreshold, null, newCondition));
			}
		}
	}
	newCondition.setBreakGroup(inaStructure.getBooleanByKeyExt("BreakGroup", false));
	let inABreakDimensionList = inaStructure.getListByKey("BreakGroupList");
	if (!oFF.PrUtils.isListEmpty(inABreakDimensionList) && oFF.notNull(queryModel))
	{
		dimSize = inABreakDimensionList.size();
		for (idxDim = 0; idxDim < dimSize; idxDim++)
		{
			let inACurrentBreakDimensionName = inABreakDimensionList.getStringAt(idxDim);
			if (oFF.notNull(inACurrentBreakDimensionName))
			{
				let currentBreakDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentBreakDimensionName);
				if (oFF.notNull(currentBreakDimension))
				{
					newCondition.addBreakGroupDimension(currentBreakDimension);
				}
			}
		}
	}
	return newCondition;
};

oFF.QInARepoCurrencyTranslationManagerLegacy = function() {};
oFF.QInARepoCurrencyTranslationManagerLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoCurrencyTranslationManagerLegacy.prototype._ff_c = "QInARepoCurrencyTranslationManagerLegacy";

oFF.QInARepoCurrencyTranslationManagerLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoCurrencyTranslationManagerLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER;
};
oFF.QInARepoCurrencyTranslationManagerLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoCurrencyTranslationManagerLegacy.prototype.getTagName = function()
{
	return "CurrencyTranslation";
};
oFF.QInARepoCurrencyTranslationManagerLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let currencyTranslationManagerBase = modelComponent;
	if (oFF.notNull(currencyTranslationManagerBase) && oFF.notNull(inaStructure))
	{
		let currencyTranslationDetails = currencyTranslationManagerBase.getCurrencyTranslationDetails();
		if (oFF.notNull(currencyTranslationDetails))
		{
			currencyTranslationDetails.setCurrencyTranslationName(inaStructure.getStringByKey("Name"));
			currencyTranslationDetails.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.lookup(inaStructure.getStringByKey("Operation")));
			currencyTranslationDetails.setCurrencyTranslationTarget(inaStructure.getStringByKey("Target"));
		}
	}
	return currencyTranslationManagerBase;
};

oFF.QInARepoCustomHierarchyDefinitionLegacy = function() {};
oFF.QInARepoCustomHierarchyDefinitionLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoCustomHierarchyDefinitionLegacy.prototype._ff_c = "QInARepoCustomHierarchyDefinitionLegacy";

oFF.QInARepoCustomHierarchyDefinitionLegacy.prototype.addHierarchyNodesFromStructure = function(hierarchyDefinition, nodes)
{
	let nodeIds = oFF.PrUtils.getListProperty(nodes, "NodeId");
	let nodeParentIds = oFF.PrUtils.getListProperty(nodes, "ParentId");
	let nodeNames = oFF.PrUtils.getListProperty(nodes, "NodeName");
	let nodeTypes = oFF.PrUtils.getListProperty(nodes, "NodeType");
	let size = oFF.PrUtils.getListSize(nodeIds, 0);
	if (oFF.PrUtils.isListEmpty(nodeIds) || oFF.PrUtils.isListEmpty(nodeParentIds) || oFF.PrUtils.isListEmpty(nodeNames) || oFF.PrUtils.isListEmpty(nodeTypes) || nodeParentIds.size() !== size || nodeNames.size() !== size || nodeTypes.size() !== size)
	{
		return;
	}
	let nodeMap = oFF.XSimpleMap.create();
	for (let i = 0; i < size; i++)
	{
		let nodeId = nodeIds.getIntegerAt(i);
		let nodeName = nodeNames.getStringAt(i);
		let nodeType = nodeTypes.getStringAt(i);
		let nodeParentId = nodeParentIds.getIntegerAt(i);
		let parent = nodeParentId === -1 ? hierarchyDefinition : nodeMap.getByKey(oFF.XIntegerValue.create(nodeParentId));
		if (oFF.notNull(parent))
		{
			if (oFF.XString.isEqual(nodeType, "1HIER_NODE_SIMPLE"))
			{
				nodeMap.put(oFF.XIntegerValue.create(nodeId), parent.addTextNode(nodeName));
			}
			else
			{
				parent.addMemberNode(nodeName);
			}
		}
	}
	oFF.XObjectExt.release(nodeMap);
};
oFF.QInARepoCustomHierarchyDefinitionLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoCustomHierarchyDefinitionLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION;
};
oFF.QInARepoCustomHierarchyDefinitionLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoCustomHierarchyDefinitionLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (!importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		return null;
	}
	let inaDimensions = oFF.PrUtils.getListProperty(inaStructure, "Dimensions");
	let inaDimension = oFF.PrUtils.getStructureElement(inaDimensions, 0);
	if (oFF.notNull(inaDimension))
	{
		let system = inaDimension.getStringByKey("System");
		let dataSource = inaDimension.getStringByKey("DataSource");
		let dimensionName = inaDimension.getStringByKey("Name");
		let inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		if (oFF.notNull(inaHierarchy) && oFF.XStringUtils.isNotNullAndNotEmpty(system) && oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
		{
			let ignoreDatasource = true;
			let application = importer.getApplication();
			if (oFF.notNull(application))
			{
				let systemDescription = application.getSystemLandscape().getSystemDescription(system);
				ignoreDatasource = oFF.isNull(systemDescription) ? true : systemDescription.getSystemType().isTypeOf(oFF.SystemType.ABAP);
			}
			let hierarchyDefinition = oFF.QCustomHierarchyDefinition.createByData(system, dataSource, dimensionName, inaHierarchy.getStringByKey("Description"), ignoreDatasource);
			hierarchyDefinition.setName(inaHierarchy.getStringByKey("Name"));
			this.addHierarchyNodesFromStructure(hierarchyDefinition, inaHierarchy.getStructureByKey("Nodes"));
			return hierarchyDefinition;
		}
	}
	return null;
};

oFF.QInARepoDataCellsAllLegacy = function() {};
oFF.QInARepoDataCellsAllLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoDataCellsAllLegacy.prototype._ff_c = "QInARepoDataCellsAllLegacy";

oFF.QInARepoDataCellsAllLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoDataCellsAllLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELLS;
};
oFF.QInARepoDataCellsAllLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoDataCellsAllLegacy.prototype.getTagName = function()
{
	return "QueryDataCells";
};
oFF.QInARepoDataCellsAllLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let capabilities = context.getModelCapabilities();
	let queryModel = context.getQueryModel();
	if (capabilities.supportsDataCells() && importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT && queryModel.getQueryManager().getInitSettings().isRequestingDataCells())
	{
		let queryDataCellList = queryModel.getQueryDataCellsBase();
		queryDataCellList.clear();
		if (oFF.notNull(inaList))
		{
			for (let i = 0; i < inaList.size(); i++)
			{
				importer.importDataCell(inaList.getStructureAt(i), queryModel);
			}
		}
	}
	return null;
};

oFF.QInARepoDimensionsAllLegacy = function() {};
oFF.QInARepoDimensionsAllLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoDimensionsAllLegacy.prototype._ff_c = "QInARepoDimensionsAllLegacy";

oFF.QInARepoDimensionsAllLegacy.exportAxisDimensions = function(exporter, axis, parameterDimensionList, exportedDimensions)
{
	let dimCount = axis.getDimensionCount();
	for (let i = 0; i < dimCount; i++)
	{
		let dimension = axis.get(i);
		oFF.QInARepoDimensionsAllLegacy.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInARepoDimensionsAllLegacy.exportAxisDimensionsWithHeuristic = function(exporter, axis, parameterDimensionList, usedDimensions, exportedDimensions)
{
	let queryModel = axis.getQueryModel();
	let repositoryData = exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA);
	let optimizedExportModeActive = queryModel.isOptimizedExportModeActive();
	let dimCount = axis.getDimensionCount();
	for (let i = 0; i < dimCount; i++)
	{
		let dimension = axis.get(i);
		if (optimizedExportModeActive && dimension.isIgnoredOnOptimizedExport())
		{
			continue;
		}
		if (repositoryData && !usedDimensions.contains(dimension.getName()))
		{
			continue;
		}
		oFF.QInARepoDimensionsAllLegacy.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInARepoDimensionsAllLegacy.exportDimension = function(exporter, dimension, inaDimensionList, exportedDimensions)
{
	if (!exportedDimensions.contains(dimension.getName()))
	{
		exportedDimensions.add(dimension.getName());
		inaDimensionList.add(exporter.exportDimension(dimension, null));
	}
};
oFF.QInARepoDimensionsAllLegacy.exportTechnicalDimension = function(exporter, query, inaDimensionList, exportedDimensions)
{
	if (!exporter.m_capabilities.supportsUniversalModel())
	{
		return;
	}
	let queryCellManager = query.getQueryCellManager();
	if (queryCellManager.isEmpty())
	{
		return;
	}
	let dimensionByName = query.getDimensionByName("$$Cells$$");
	oFF.QInARepoDimensionsAllLegacy.exportDimension(exporter, dimensionByName, inaDimensionList, exportedDimensions);
};
oFF.QInARepoDimensionsAllLegacy.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaDimensionList = oFF.PrFactory.createList();
	if (exporter.m_mode !== oFF.QModelFormat.INA_VALUE_HELP)
	{
		let query = modelComponent;
		let capabilities = query.getModelCapabilities();
		let exportedDimensions = oFF.XHashSetOfString.create();
		oFF.QInARepoDimensionsAllLegacy.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.ROWS), inaDimensionList, exportedDimensions);
		oFF.QInARepoDimensionsAllLegacy.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.COLUMNS), inaDimensionList, exportedDimensions);
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			let usedDimensions = oFF.XHashSetOfString.create();
			if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
			{
				oFF.DimensionUsageAnalyzer2.setupHeuristic(query, usedDimensions);
			}
			oFF.QInARepoDimensionsAllLegacy.exportAxisDimensionsWithHeuristic(exporter, query.getAxis(oFF.AxisType.FREE), inaDimensionList, usedDimensions, exportedDimensions);
		}
		else if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			let isOutOfContextBlending = capabilities.supportsCubeBlendingOutOfContext() && query.isBlendingModel();
			let doExportFreeAxisForPlanning = query.getDataSource().getType() === oFF.MetaObjectType.PLANNING && exporter.getSession().hasFeature(oFF.FeatureToggleOlap.EXPORT_FREE_AXIS_FOR_PLANNING);
			let freeAxis = query.getAxis(oFF.AxisType.FREE);
			let sizeFreeAxis = freeAxis.size();
			let isAbap = exporter.isAbap(query);
			for (let idxFree = 0; idxFree < sizeFreeAxis; idxFree++)
			{
				let freeDimension = freeAxis.get(idxFree);
				let freeDimensionType = freeDimension.getDimensionType();
				if (freeDimensionType === oFF.DimensionType.MEASURE_STRUCTURE || freeDimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
				{
					let exportStructure = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportStructure)
					{
						oFF.QInARepoDimensionsAllLegacy.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimensionType === oFF.DimensionType.ACCOUNT)
				{
					let exportAccountOnFreeAxis = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportAccountOnFreeAxis)
					{
						oFF.QInARepoDimensionsAllLegacy.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimensionType.isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION) || isOutOfContextBlending || (isAbap || doExportFreeAxisForPlanning) && freeDimension.isHierarchyActive())
				{
					oFF.QInARepoDimensionsAllLegacy.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
				}
			}
			oFF.QInARepoDimensionsAllLegacy.exportTechnicalDimension(exporter, query, inaDimensionList, exportedDimensions);
		}
	}
	return inaDimensionList;
};
oFF.QInARepoDimensionsAllLegacy.prototype.exportDimensionIfOnFreeAxis = function(dimension)
{
	let queryModel = dimension.getQueryModel();
	let usedDimensions = oFF.XHashSetOfString.create();
	let filter = queryModel.getFilter();
	if (filter.isDynamicFilterInitialized())
	{
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getDynamicFilter(), usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getLinkedFilter(oFF.CalculatedDimensionPrequeryBuilder.FAM_MEASURE_FILTER), usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getLinkedFilter(oFF.CalculatedDimensionPrequeryBuilder.FAM_SECONDARY_MEASURE_FILTER), usedDimensions);
	}
	let isDimensionFiltered = usedDimensions.contains(dimension.getName());
	if (dimension.isMeasureStructure())
	{
		let exceptionManager = queryModel.getExceptionManager();
		let hasExceptions = oFF.XCollectionUtils.hasElements(exceptionManager);
		return isDimensionFiltered || hasExceptions;
	}
	return isDimensionFiltered;
};
oFF.QInARepoDimensionsAllLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DIMENSIONS;
};
oFF.QInARepoDimensionsAllLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoDimensionsAllLegacy.prototype.getTagName = function()
{
	return "Dimensions";
};
oFF.QInARepoDimensionsAllLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaList))
	{
		let queryModel = modelComponent;
		let dimensionManager = queryModel.getDimensionManagerBase();
		if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
		{
			let freeAxis = queryModel.getFreeAxis();
			freeAxis.addAll(dimensionManager);
		}
		let size = inaList.size();
		let dimensionReferences = dimensionManager.getDimensionReferences();
		for (let k = 0; k < size; k++)
		{
			let inaDimension = inaList.getStructureAt(k);
			let dimName = inaDimension.getStringByKey("Name");
			let dimAxisString = inaDimension.getStringByKey("Axis");
			let dimension = null;
			if (inaDimension.containsKey("FieldMappings"))
			{
				let importCalculatedDimension = importer.importCalculatedDimension(inaDimension, queryModel);
				dimensionManager.addDimension(importCalculatedDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importCalculatedDimension);
			}
			else if (inaDimension.containsKey("CType") && oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
			{
				let importFormulaCalculatedDimension = importer.importFormulaCalculatedDimension(inaDimension, queryModel, null);
				dimensionManager.addDimension(importFormulaCalculatedDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importFormulaCalculatedDimension);
			}
			else
			{
				if (dimensionReferences.containsKey(dimName))
				{
					let dimAxis = oFF.AxisType.lookup(dimAxisString);
					if (importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || dimAxis === oFF.AxisType.COLUMNS || dimAxis === oFF.AxisType.ROWS)
					{
						dimension = dimensionManager.getDimensionByNameFromExistingMetadata(dimName);
					}
				}
				importer.importDimension(inaDimension, queryModel);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
			{
				if (oFF.isNull(dimension))
				{
					dimension = dimensionManager.getDimensionByNameInternal(dimName);
					if (oFF.isNull(dimension))
					{
						continue;
					}
				}
				if (oFF.isNull(dimAxisString))
				{
					dimAxisString = inaDimension.getStringByKeyExt("AxisDefault", "Free");
				}
				queryModel.getAxis(oFF.QInAConverter.lookupAxisType(dimAxisString)).add(dimension);
			}
		}
	}
	return modelComponent;
};

oFF.QInARepoDimensionsLegacy = function() {};
oFF.QInARepoDimensionsLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoDimensionsLegacy.prototype._ff_c = "QInARepoDimensionsLegacy";

oFF.QInARepoDimensionsLegacy._isForRendering = function(exporterMode, dimension)
{
	let dimAxisType = dimension.getAxisType();
	return exporterMode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING && dimAxisType !== oFF.AxisType.ROWS && dimAxisType !== oFF.AxisType.COLUMNS;
};
oFF.QInARepoDimensionsLegacy.exportAxisDimensions = function(exporter, axis, parameterDimensionList, exportedDimensions)
{
	let dimCount = axis.getDimensionCount();
	for (let i = 0; i < dimCount; i++)
	{
		let dimension = axis.get(i);
		if (oFF.QInARepoDimensionsLegacy._isForRendering(exporter.getMode(), dimension))
		{
			continue;
		}
		oFF.QInARepoDimensionsLegacy.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInARepoDimensionsLegacy.exportAxisDimensionsWithHeuristic = function(exporter, axis, parameterDimensionList, usedDimensions, exportedDimensions)
{
	let queryModel = axis.getQueryModel();
	let repositoryData = exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA);
	let optimizedExportModeActive = queryModel.isOptimizedExportModeActive();
	let dimCount = axis.getDimensionCount();
	for (let i = 0; i < dimCount; i++)
	{
		let dimension = axis.get(i);
		if (optimizedExportModeActive && dimension.isIgnoredOnOptimizedExport())
		{
			continue;
		}
		if (repositoryData && !usedDimensions.contains(dimension.getName()))
		{
			continue;
		}
		oFF.QInARepoDimensionsLegacy.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInARepoDimensionsLegacy.exportDimension = function(exporter, dimension, inaDimensionList, exportedDimensions)
{
	if (!exportedDimensions.contains(dimension.getName()))
	{
		exportedDimensions.add(dimension.getName());
		inaDimensionList.add(exporter.exportDimension(dimension, null));
	}
};
oFF.QInARepoDimensionsLegacy.exportTechnicalDimension = function(exporter, query, inaDimensionList, exportedDimensions)
{
	if (!exporter.m_capabilities.supportsUniversalModel())
	{
		return;
	}
	let queryCellManager = query.getQueryCellManager();
	if (queryCellManager.isEmpty())
	{
		return;
	}
	let dimensionByName = query.getDimensionByName("$$Cells$$");
	oFF.QInARepoDimensionsLegacy.exportDimension(exporter, dimensionByName, inaDimensionList, exportedDimensions);
};
oFF.QInARepoDimensionsLegacy.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaDimensionList = oFF.PrFactory.createList();
	if (exporter.m_mode !== oFF.QModelFormat.INA_VALUE_HELP)
	{
		let query = modelComponent;
		let capabilities = query.getModelCapabilities();
		let exportedDimensions = oFF.XHashSetOfString.create();
		oFF.QInARepoDimensionsLegacy.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.ROWS), inaDimensionList, exportedDimensions);
		oFF.QInARepoDimensionsLegacy.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.COLUMNS), inaDimensionList, exportedDimensions);
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			let usedDimensions = oFF.XHashSetOfString.create();
			if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
			{
				oFF.DimensionUsageAnalyzer2.setupHeuristic(query, usedDimensions);
			}
			oFF.QInARepoDimensionsLegacy.exportAxisDimensionsWithHeuristic(exporter, query.getAxis(oFF.AxisType.FREE), inaDimensionList, usedDimensions, exportedDimensions);
		}
		else if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			let isOutOfContextBlending = capabilities.supportsCubeBlendingOutOfContext() && query.isBlendingModel();
			let doExportFreeAxisForPlanning = query.getDataSource().getType() === oFF.MetaObjectType.PLANNING && exporter.getSession().hasFeature(oFF.FeatureToggleOlap.EXPORT_FREE_AXIS_FOR_PLANNING);
			let freeAxis = query.getAxis(oFF.AxisType.FREE);
			let sizeFreeAxis = freeAxis.size();
			let isAbap = exporter.isAbap(query);
			for (let idxFree = 0; idxFree < sizeFreeAxis; idxFree++)
			{
				let freeDimension = freeAxis.get(idxFree);
				let freeDimensionType = freeDimension.getDimensionType();
				if (freeDimensionType === oFF.DimensionType.MEASURE_STRUCTURE || freeDimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
				{
					let exportStructure = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportStructure)
					{
						oFF.QInARepoDimensionsLegacy.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimensionType === oFF.DimensionType.ACCOUNT)
				{
					let exportAccountOnFreeAxis = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportAccountOnFreeAxis)
					{
						oFF.QInARepoDimensionsLegacy.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimensionType.isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION) || isOutOfContextBlending || (isAbap || doExportFreeAxisForPlanning) && freeDimension.isHierarchyActive())
				{
					oFF.QInARepoDimensionsLegacy.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
				}
			}
			oFF.QInARepoDimensionsLegacy.exportTechnicalDimension(exporter, query, inaDimensionList, exportedDimensions);
		}
	}
	return inaDimensionList;
};
oFF.QInARepoDimensionsLegacy.prototype.exportDimensionIfOnFreeAxis = function(dimension)
{
	let queryModel = dimension.getQueryModel();
	let usedDimensions = oFF.XHashSetOfString.create();
	if (queryModel.getFilter().isDynamicFilterInitialized())
	{
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(queryModel.getFilter().getDynamicFilter(), usedDimensions);
	}
	let isDimensionFiltered = usedDimensions.contains(dimension.getName());
	if (dimension.isMeasureStructure())
	{
		let exceptionManager = queryModel.getExceptionManager();
		let hasExceptions = oFF.XCollectionUtils.hasElements(exceptionManager);
		return isDimensionFiltered || hasExceptions;
	}
	return isDimensionFiltered;
};
oFF.QInARepoDimensionsLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DIMENSIONS;
};
oFF.QInARepoDimensionsLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoDimensionsLegacy.prototype.getTagName = function()
{
	return "Dimensions";
};
oFF.QInARepoDimensionsLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaList))
	{
		return modelComponent;
	}
	let queryModel = modelComponent;
	let dimensionManager = queryModel.getDimensionManagerBase();
	if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
	{
		let freeAxis = queryModel.getFreeAxis();
		freeAxis.addAll(dimensionManager);
	}
	let size = inaList.size();
	let dimensionReferences = dimensionManager.getDimensionReferences();
	for (let k = 0; k < size; k++)
	{
		let inaDimension = inaList.getStructureAt(k);
		let dimName = inaDimension.getStringByKey("Name");
		let dimAxisString = inaDimension.getStringByKey("Axis");
		let dimension = null;
		if (inaDimension.containsKey("FieldMappings"))
		{
			let importCalculatedDimension = importer.importCalculatedDimension(inaDimension, queryModel);
			dimensionManager.addDimension(importCalculatedDimension);
			dimensionManager.finalizeDimensionMetadataSetup(importCalculatedDimension);
		}
		else if (inaDimension.containsKey("CType") && oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			let importFormulaCalculatedDimension = importer.importFormulaCalculatedDimension(inaDimension, queryModel, null);
			dimensionManager.addDimension(importFormulaCalculatedDimension);
			dimensionManager.finalizeDimensionMetadataSetup(importFormulaCalculatedDimension);
		}
		else
		{
			if (dimensionReferences.containsKey(dimName))
			{
				let dimAxis = oFF.AxisType.lookup(dimAxisString);
				if (importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || dimAxis === oFF.AxisType.COLUMNS || dimAxis === oFF.AxisType.ROWS)
				{
					dimension = dimensionManager.getDimensionByNameFromExistingMetadata(dimName);
				}
			}
			importer.importDimension(inaDimension, queryModel);
		}
		if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
		{
			if (oFF.isNull(dimension))
			{
				dimension = dimensionManager.getDimensionByNameInternal(dimName);
				if (oFF.isNull(dimension))
				{
					continue;
				}
			}
			if (oFF.isNull(dimAxisString))
			{
				dimAxisString = inaDimension.getStringByKeyExt("AxisDefault", "Free");
			}
			queryModel.getAxis(oFF.QInAConverter.lookupAxisType(dimAxisString)).add(dimension);
		}
	}
	return queryModel;
};

oFF.QInARepoDrillManagerLegacy = function() {};
oFF.QInARepoDrillManagerLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoDrillManagerLegacy.prototype._ff_c = "QInARepoDrillManagerLegacy";

oFF.QInARepoDrillManagerLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoDrillManagerLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_MANAGER;
};
oFF.QInARepoDrillManagerLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoDrillManagerLegacy.prototype.getTagName = function()
{
	return "HierarchyNavigations";
};
oFF.QInARepoDrillManagerLegacy.prototype.getZoomDrillPath = function(importer, drillManager, inaStructure, context)
{
	let drillPath = oFF.XList.create();
	let drillContext = inaStructure.getListByKey("DrillContextMembers");
	if (oFF.notNull(drillContext))
	{
		let size = drillContext.size();
		for (let idxHierCtx = 0; idxHierCtx < size; idxHierCtx++)
		{
			let drillCtx = drillContext.getStructureAt(idxHierCtx);
			let drillPathElement = importer.importDrillPathElement(drillCtx, drillManager, context);
			drillPath.add(drillPathElement);
		}
	}
	let drillState = inaStructure.getStringByKey("DrillState");
	let drillMember = inaStructure.getStructureByKey("DrillMember");
	if (oFF.isNull(drillMember) || oFF.isNull(drillState))
	{
		return null;
	}
	let drillPathElementMember = importer.importDrillPathElement(drillMember, drillManager, context);
	drillPath.add(drillPathElementMember);
	return drillPath;
};
oFF.QInARepoDrillManagerLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let drillManager = modelComponent;
	let size;
	drillManager.removeAllContextDrillOperations();
	drillManager.removeZoomDrillOperationsByDimension(null);
	if (oFF.notNull(inaList))
	{
		let previousZoomStackPosition = -1;
		size = inaList.size();
		for (let idxHierNav = 0; idxHierNav < size; idxHierNav++)
		{
			let subStructure = inaList.getStructureAt(idxHierNav);
			let zoomDrillStackPosition = subStructure.getIntegerByKeyExt("ZoomDrillStackPosition", -1);
			if (zoomDrillStackPosition === -1)
			{
				importer.importDrillOperation(subStructure, drillManager, context);
			}
			else if (zoomDrillStackPosition > -1)
			{
				let zoomDrillPath = this.getZoomDrillPath(importer, drillManager, subStructure, context);
				if (oFF.XCollectionUtils.hasElements(zoomDrillPath))
				{
					if (zoomDrillStackPosition !== previousZoomStackPosition)
					{
						drillManager.pushEmptyZoomDrillForDimension(zoomDrillPath.get(zoomDrillPath.size() - 1).getDimension());
						previousZoomStackPosition = zoomDrillStackPosition;
					}
					let hideRoots = subStructure.getIntegerByKeyExt("DrillOffset", 0) > 0;
					drillManager.addZoomDrillPath(zoomDrillPath, hideRoots);
				}
			}
		}
	}
	return modelComponent;
};

oFF.QInARepoDrillPathElementLegacy = function() {};
oFF.QInARepoDrillPathElementLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoDrillPathElementLegacy.prototype._ff_c = "QInARepoDrillPathElementLegacy";

oFF.QInARepoDrillPathElementLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoDrillPathElementLegacy.prototype.getComponentType = function()
{
	return oFF.MemberType.DRILL_PATH_ELEMENT;
};
oFF.QInARepoDrillPathElementLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoDrillPathElementLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let drillManager = parentComponent;
	let queryModel = drillManager.getContext().getQueryModel();
	let fieldName = inaStructure.getStringByKey("FieldName");
	let dimensionName = inaStructure.getStringByKey("DimensionName");
	let dimension;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensionName);
	}
	else
	{
		let field = queryModel.getFieldByNameOrAlias(fieldName);
		if (oFF.isNull(field))
		{
			dimension = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimension))
			{
				field = dimension.getKeyField();
				fieldName = field.getName();
			}
		}
		else
		{
			dimension = field.getDimension();
		}
	}
	let element = oFF.QDrillPathElement._create(context);
	element.setDimension(dimension);
	let member = inaStructure.getStringByKey("Member");
	element.setName(member);
	element.setFieldName(fieldName);
	return element;
};

oFF.QInARepoExceptionsLegacy = function() {};
oFF.QInARepoExceptionsLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoExceptionsLegacy.prototype._ff_c = "QInARepoExceptionsLegacy";

oFF.QInARepoExceptionsLegacy.importEvaluates = function(inaException, member, newException, importer)
{
	let inaEvaluates = inaException.getListByKey("EvaluateOn");
	if (oFF.isNull(inaEvaluates))
	{
		return;
	}
	let size = inaEvaluates.size();
	let queryModel = member.getQueryModel();
	for (let evalIdx = 0; evalIdx < size; evalIdx++)
	{
		let inaEvaluate = inaEvaluates.getStructureAt(evalIdx);
		let fieldName = inaEvaluate.getStringByKey("Name");
		let someField = queryModel.getFieldByName(fieldName);
		if (oFF.isNull(someField))
		{
			let dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimensionByName))
			{
				someField = dimensionByName.getKeyField();
			}
		}
		if (oFF.isNull(someField))
		{
			someField = member.getKeyFieldValue().getField();
		}
		if (oFF.isNull(someField))
		{
			importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate3("Could not find field '", fieldName, "'!"));
			return;
		}
		if (!inaEvaluate.containsKey("Low"))
		{
			importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate2("No low value for field: ", fieldName));
			return;
		}
		let valueType = someField.getValueType();
		let lowValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "Low", valueType);
		if (importer.hasErrors())
		{
			importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected low valuetype for field: ", valueType.getName()));
			return;
		}
		let newEvaluate = newException._addNewEvaluateWithFieldInternal(someField, lowValue);
		if (inaEvaluate.containsKey("High"))
		{
			let highValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "High", valueType);
			if (importer.hasErrors())
			{
				importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected high valuetype for field: ", valueType.getName()));
				return;
			}
			newEvaluate.setHighValue(highValue);
		}
		newEvaluate.setEvaluate(oFF.QExceptionEvalType.lookupExceptionEvalType(inaEvaluate.getStringByKey("Evaluate")));
		let operatorName = inaEvaluate.getStringByKey("Comparison");
		let operator = oFF.QInAConverter.lookupComparison(operatorName);
		if (oFF.isNull(operator))
		{
			importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate3("Unexpected comparison operator for evaluate: Operator: '", operatorName, "'"));
			return;
		}
		newEvaluate.setOperator(operator);
	}
};
oFF.QInARepoExceptionsLegacy.importSettings = function(inaSettings, newThreshold)
{
	if (oFF.isNull(inaSettings))
	{
		return;
	}
	let size = inaSettings.size();
	for (let iSetting = 0; iSetting < size; iSetting++)
	{
		let inaSetting = inaSettings.getStructureAt(iSetting);
		let name = inaSetting.getStringByKey("Name");
		let priority = inaSetting.getIntegerByKey("Priority");
		let value = inaSetting.getStringByKey("Value");
		if (oFF.notNull(value) && !oFF.XString.isEqual(value, ""))
		{
			let newSetting = newThreshold.addNewSetting(name, priority);
			newSetting.setValue(value);
		}
	}
};
oFF.QInARepoExceptionsLegacy.importThresholds = function(inaException, newException)
{
	let inaThresholds = inaException.getListByKey("Threshold");
	if (oFF.notNull(inaThresholds))
	{
		let size = inaThresholds.size();
		for (let thresholdIdx = 0; thresholdIdx < size; thresholdIdx++)
		{
			let inaThreshold = inaThresholds.getStructureAt(thresholdIdx);
			let alertLevel = inaThreshold.getIntegerByKeyExt("AlertLevel", -9999);
			let newThreshold;
			let isDouble = !inaThreshold.hasStringByKey("Low");
			if (isDouble)
			{
				newThreshold = newException._addNewThresholdInternal(inaThreshold.getDoubleByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			else
			{
				newThreshold = newException._addNewThresholdWithStringInternal(inaThreshold.getStringByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			let name = inaThreshold.getStringByKey("Name");
			if (oFF.notNull(name))
			{
				newThreshold.setName(name);
			}
			let operator = oFF.QInAConverter.lookupComparison(inaThreshold.getStringByKey("Comparison"));
			newThreshold.setOperator(operator);
			if (operator.getNumberOfParameters() === 2)
			{
				if (isDouble)
				{
					let highDouble = inaThreshold.getDoubleByKey("High");
					newThreshold.setHighValue(highDouble);
				}
				else
				{
					let highString = inaThreshold.getStringByKey("High");
					newThreshold.setHigh(highString);
				}
			}
			oFF.QInARepoExceptionsLegacy.importSettings(inaThreshold.getListByKey("Settings"), newThreshold);
		}
	}
};
oFF.QInARepoExceptionsLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoExceptionsLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_MANAGER;
};
oFF.QInARepoExceptionsLegacy.prototype.getMemberFromContextItem = function(structure, dimension)
{
	let member = dimension.getStructureMember(structure.getStringByKey("MemberName"));
	if (oFF.isNull(member))
	{
		let evaluateAllMembers = structure.getBooleanByKeyExt("EvaluateAllMembers", false);
		let allStructureMembers = dimension.getAllStructureMembers();
		if (evaluateAllMembers && !allStructureMembers.isEmpty())
		{
			return allStructureMembers.get(0);
		}
	}
	return member;
};
oFF.QInARepoExceptionsLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoExceptionsLegacy.prototype.getTagName = function()
{
	return "Exceptions";
};
oFF.QInARepoExceptionsLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let exceptionManager = modelComponent.getQueryModel().getExceptionManager();
	exceptionManager.queueEventing();
	if (this.isVersion1(importer, modelComponent))
	{
		exceptionManager.removeAllExceptionsOfMeasure(modelComponent);
		this.importFormatV1(importer, inaList, modelComponent, exceptionManager);
	}
	else if (this.isVersion2(importer, modelComponent))
	{
		exceptionManager.clear();
		this.importFormatV2(importer, inaList, modelComponent, exceptionManager);
	}
	exceptionManager.resumeEventing();
	return exceptionManager;
};
oFF.QInARepoExceptionsLegacy.prototype.importContextItem = function(structure, queryModel, exceptionManager, exception, importer, inaException)
{
	let importedException = exception;
	let dimension = queryModel.getDimensionByNameFromExistingMetadata(structure.getStringByKey("DimensionName"));
	if (oFF.notNull(dimension))
	{
		let member = this.getMemberFromContextItem(structure, dimension);
		if (oFF.notNull(member))
		{
			if (oFF.isNull(importedException))
			{
				importedException = this.importException(importer, member, exceptionManager, inaException);
			}
			if (dimension.isMeasureStructure())
			{
				importedException.setMeasure(member);
			}
			else
			{
				importedException.setStructure(member);
			}
			importedException.displayOnOtherMember(member, dimension.getStructureMember(structure.getStringByKey("DisplayOnOtherMember")));
			importedException.setEvaluateAllMembers(dimension, structure.getBooleanByKeyExt("EvaluateAllMembers", false));
		}
	}
	return importedException;
};
oFF.QInARepoExceptionsLegacy.prototype.importException = function(importer, member, exceptionManager, inaException)
{
	let exceptionName = inaException.getStringByKey("Name");
	let exceptionText = inaException.getStringByKey("Text");
	let evalType = oFF.QExceptionEvalType.lookupExceptionEvalType(inaException.getStringByKey("EvaluateDefault"));
	let headerSettings = oFF.QExceptionHeaderSettings.lookupExceptionHeaderSetting(inaException.getStringByKey("ApplySettingsToHeader"));
	let isActive = inaException.getBooleanByKeyExt("Active", true);
	let isEvalAfterCalc = inaException.getBooleanByKeyExt("EvaluateBeforePostAggregation", true);
	let newException = exceptionManager._addNewExceptionInternal(exceptionName, exceptionText, evalType, headerSettings, isActive, !isEvalAfterCalc);
	newException.queueEventing();
	oFF.QInARepoExceptionsLegacy.importEvaluates(inaException, member, newException, importer);
	oFF.QInARepoExceptionsLegacy.importThresholds(inaException, newException);
	newException.resumeEventing();
	return newException;
};
oFF.QInARepoExceptionsLegacy.prototype.importFormatV1 = function(importer, inaList, member, exceptionManager)
{
	if (oFF.notNull(inaList))
	{
		let size = inaList.size();
		for (let exceptionIdx = 0; exceptionIdx < size; exceptionIdx++)
		{
			let inaException = inaList.getStructureAt(exceptionIdx);
			let newException = this.importException(importer, member, exceptionManager, inaException);
			newException.setMeasure(member);
			newException.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
		}
	}
};
oFF.QInARepoExceptionsLegacy.prototype.importFormatV2 = function(importer, inaList, queryModel, exceptionManager)
{
	if (oFF.isNull(inaList))
	{
		return;
	}
	let sizeExceptions = inaList.size();
	for (let iException = 0; iException < sizeExceptions; iException++)
	{
		let inaException = inaList.getStructureAt(iException);
		let structureContext = inaException.getListByKey("StructureContext");
		if (!oFF.PrUtils.isListEmpty(structureContext))
		{
			let exception = this.importContextItem(structureContext.getStructureAt(0), queryModel, exceptionManager, null, importer, inaException);
			if (oFF.notNull(exception))
			{
				if (structureContext.size() > 1)
				{
					this.importContextItem(structureContext.getStructureAt(1), queryModel, exceptionManager, exception, importer, inaException);
				}
				exception.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
			}
		}
	}
};
oFF.QInARepoExceptionsLegacy.prototype.isVersion1 = function(qInA, modelComponent)
{
	let componentType = modelComponent.getOlapComponentType();
	return !qInA.m_capabilities.supportsExceptionsV2() && componentType.isTypeOf(oFF.MemberType.ABSTRACT_MEMBER);
};
oFF.QInARepoExceptionsLegacy.prototype.isVersion2 = function(qInA, modelComponent)
{
	let componentType = modelComponent.getOlapComponentType();
	return qInA.m_capabilities.supportsExceptionsV2() && componentType.isTypeOf(oFF.OlapComponentType.QUERY_MODEL);
};

oFF.QInARepoFilterAlgebraLegacy = function() {};
oFF.QInARepoFilterAlgebraLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterAlgebraLegacy.prototype._ff_c = "QInARepoFilterAlgebraLegacy";

oFF.QInARepoFilterAlgebraLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterAlgebraLegacy.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.BOOLEAN_ALGEBRA;
};
oFF.QInARepoFilterAlgebraLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterAlgebraLegacy.prototype.getTagName = function()
{
	return "Operator";
};
oFF.QInARepoFilterAlgebraLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let inaSubSelections = inaStructure.getListByKey("SubSelections");
	if (oFF.notNull(inaSubSelections))
	{
		let code = inaStructure.getStringByKey("Code");
		let setWithChildren;
		if (oFF.XString.isEqual(code, "And"))
		{
			setWithChildren = oFF.QFilterAnd._create(context, filterExpression);
		}
		else if (oFF.XString.isEqual(code, "Not"))
		{
			setWithChildren = oFF.QFilterNot._create(context, filterExpression);
		}
		else
		{
			setWithChildren = oFF.QFilterOr._create(context, filterExpression);
		}
		let size = inaSubSelections.size();
		for (let i = 0; i < size; i++)
		{
			let subSelection = inaSubSelections.getStructureAt(i);
			let child = importer.importFilterElement(subSelection, null, filterExpression, context);
			if (oFF.notNull(child))
			{
				setWithChildren.add(child);
			}
		}
		if (setWithChildren.hasElements())
		{
			return setWithChildren;
		}
	}
	return null;
};

oFF.QInARepoFilterAllLegacy = function() {};
oFF.QInARepoFilterAllLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterAllLegacy.prototype._ff_c = "QInARepoFilterAllLegacy";

oFF.QInARepoFilterAllLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterAllLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SELECTOR;
};
oFF.QInARepoFilterAllLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterAllLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterComponent = modelComponent;
	importer.importFixedFilter(inaStructure, filterComponent, context);
	importer.importDynamicFilter(inaStructure, filterComponent, context);
	importer.importVisibilityFilter(inaStructure, filterComponent, context);
	return filterComponent;
};

oFF.QInARepoFilterCellValueOperandLegacy = function() {};
oFF.QInARepoFilterCellValueOperandLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterCellValueOperandLegacy.prototype._ff_c = "QInARepoFilterCellValueOperandLegacy";

oFF.QInARepoFilterCellValueOperandLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterCellValueOperandLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
};
oFF.QInARepoFilterCellValueOperandLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterCellValueOperandLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let low = inaStructure.getStringByKey("Low");
	if (oFF.XString.isEqual(low, ""))
	{
		low = null;
	}
	let high = inaStructure.getStringByKey("High");
	if (oFF.XString.isEqual(high, ""))
	{
		high = null;
	}
	let operator = oFF.QInAConverter.lookupComparison(inaStructure.getStringByKey("Comparison"));
	let operand = oFF.QFilterCellValueOperand._create(context, null, low, high, operator);
	operand.setIsExcluding(inaStructure.getBooleanByKey("IsExcluding"));
	return operand;
};

oFF.QInARepoFilterElementLegacy = function() {};
oFF.QInARepoFilterElementLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterElementLegacy.prototype._ff_c = "QInARepoFilterElementLegacy";

oFF.QInARepoFilterElementLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterElementLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_ELEMENT;
};
oFF.QInARepoFilterElementLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterElementLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let filterElement = modelComponent;
	if (inaStructure.containsKey("Operator"))
	{
		filterElement = importer.importFilterAlgebra(filterExpression, inaStructure, context);
	}
	else
	{
		let inaSetOperand = inaStructure.getStructureByKey("SetOperand");
		if (oFF.isNull(inaSetOperand))
		{
			if (inaStructure.containsKey("GeometryOperand"))
			{
				filterElement = importer.importFilterGeo(filterExpression, inaStructure, context);
			}
		}
		else
		{
			filterElement = importer.importCartesianList(inaSetOperand, filterElement, filterExpression, context);
		}
	}
	return filterElement;
};

oFF.QInARepoFilterExpressionLegacy = function() {};
oFF.QInARepoFilterExpressionLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterExpressionLegacy.prototype._ff_c = "QInARepoFilterExpressionLegacy";

oFF.QInARepoFilterExpressionLegacy.prototype.exportComponent = oFF.noSupport;
oFF.QInARepoFilterExpressionLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterExpressionLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_EXPRESSION;
};
oFF.QInARepoFilterExpressionLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterExpressionLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = modelComponent;
	if (oFF.isNull(filterExpression))
	{
		filterExpression = oFF.QFactory.createFilterExpression(context, parentComponent);
	}
	let version = 0;
	let inaSelection = null;
	if (oFF.notNull(inaStructure))
	{
		inaSelection = inaStructure.getStructureByKey("Selection");
		if (oFF.isNull(inaSelection))
		{
			inaSelection = inaStructure.getStructureByKey("SelectionRepo");
			version = 1;
		}
	}
	filterExpression.setCartesianProduct(null);
	filterExpression.setComplexRoot(null);
	if (oFF.notNull(inaSelection))
	{
		let filterElement = importer.importFilterElement(inaSelection, null, filterExpression, context);
		if (oFF.notNull(filterElement))
		{
			if (version >= 1)
			{
				filterExpression.setComplexRoot(filterElement);
			}
			else
			{
				let cartesianProduct = oFF.QFilterUtil.convertComplexFilterToCartesian(filterElement);
				if (oFF.notNull(cartesianProduct))
				{
					filterExpression.setCartesianProduct(cartesianProduct);
				}
				else
				{
					filterExpression.setComplexRoot(filterElement);
				}
			}
		}
	}
	if (filterExpression.getModelCapabilities().supportsCellValueOperand())
	{
		filterExpression.setIsSuppressingNulls(false);
		filterExpression.clearCellValueFilter();
		if (oFF.notNull(inaStructure))
		{
			if (importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
			{
				filterExpression.setIsSuppressingNulls(inaStructure.getBooleanByKeyExt("IsSuppressingNulls", false));
			}
			if (oFF.notNull(inaSelection))
			{
				let inaCellValueOperand = inaSelection.getStructureByKey("CellValueOperand");
				if (oFF.isNull(inaCellValueOperand))
				{
					let inaFilterAnd = inaSelection.getStructureByKey("Operator");
					if (oFF.notNull(inaFilterAnd))
					{
						let inaSubSelections = inaFilterAnd.getListByKey("SubSelections");
						if (inaSubSelections.size() === 2)
						{
							let inaSubSelectionStructure = inaSubSelections.getStructureAt(1);
							inaCellValueOperand = inaSubSelectionStructure.getStructureByKey("CellValueOperand");
						}
					}
				}
				if (oFF.notNull(inaCellValueOperand))
				{
					let inaElements = inaCellValueOperand.getListByKey("Elements");
					if (oFF.notNull(inaElements))
					{
						let nullSuppressionReference = oFF.QFilterCellValueOperand.createForNullSuppression(context, null);
						let size = inaElements.size();
						if (size > 0)
						{
							let inaNullSuppression = inaElements.getStructureAt(0);
							let nullSuppression = importer.importFilterCellValueOperand(inaNullSuppression, context);
							let startIdx = 0;
							if (nullSuppression.isEqualTo(nullSuppressionReference))
							{
								filterExpression.setIsSuppressingNulls(true);
								startIdx = 1;
							}
							filterExpression.clearCellValueFilter();
							for (let idx = startIdx; idx < size; idx++)
							{
								let inaCellElement = inaElements.getStructureAt(idx);
								let operand = importer.importFilterCellValueOperand(inaCellElement, context);
								filterExpression.addCellValueFilter(operand);
							}
						}
					}
				}
			}
		}
	}
	return filterExpression;
};

oFF.QInARepoFilterFixedLegacy = function() {};
oFF.QInARepoFilterFixedLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterFixedLegacy.prototype._ff_c = "QInARepoFilterFixedLegacy";

oFF.QInARepoFilterFixedLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterFixedLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_FIXED;
};
oFF.QInARepoFilterFixedLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterFixedLegacy.prototype.getTagName = function()
{
	return "FixedFilter";
};
oFF.QInARepoFilterFixedLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	let filter = parentComponent;
	let filterExpression = importer.importFilterExpression(null, inaStructure, filter, context);
	if (oFF.notNull(filter) && oFF.notNull(filterExpression))
	{
		filter.setFixedFilter(filterExpression);
	}
	return filterExpression;
};

oFF.QInARepoFilterGeoLegacy = function() {};
oFF.QInARepoFilterGeoLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterGeoLegacy.prototype._ff_c = "QInARepoFilterGeoLegacy";

oFF.QInARepoFilterGeoLegacy.tryCreateGeometry = function(strValue)
{
	let value = oFF.XGeometryValue.createGeometryValueWithWkt(strValue);
	if (oFF.isNull(value))
	{
		value = oFF.XStringValue.create(strValue);
	}
	return value;
};
oFF.QInARepoFilterGeoLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterGeoLegacy.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.SPATIAL_FILTER;
};
oFF.QInARepoFilterGeoLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterGeoLegacy.prototype.getTagName = function()
{
	return "GeometryOperand";
};
oFF.QInARepoFilterGeoLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let fieldAccessor = context.getFieldAccessorSingle();
	let inaComparison = inaStructure.getStringByKey("Comparison");
	let inaFieldName = inaStructure.getStringByKey("FieldName");
	let inaValue1 = inaStructure.getStringByKey("Value1");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaComparison) && oFF.XStringUtils.isNotNullAndNotEmpty(inaFieldName) && oFF.XStringUtils.isNotNullAndNotEmpty(inaValue1))
	{
		let comparison = oFF.QInAConverter.lookupComparison(inaComparison);
		if (oFF.isNull(comparison))
		{
			return null;
		}
		if (!comparison.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			return null;
		}
		let field = fieldAccessor.getFieldByName(inaFieldName);
		if (oFF.isNull(field))
		{
			return null;
		}
		let geoFilter = oFF.QFactory.createFilterOperationWithOperator(filterExpression, field, comparison);
		let firstValue = oFF.QInARepoFilterGeoLegacy.tryCreateGeometry(inaValue1);
		geoFilter.getLow().setValue(firstValue);
		let inaValue2 = inaStructure.getStringByKey("Value2");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue2))
		{
			let secondValue = oFF.QInARepoFilterGeoLegacy.tryCreateGeometry(inaValue2);
			geoFilter.getHigh().setValue(secondValue);
		}
		let inaValue3 = inaStructure.getStringByKey("Value3");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue3))
		{
			let thirdValue = oFF.QInARepoFilterGeoLegacy.tryCreateGeometry(inaValue3);
			geoFilter.getThird().setValue(thirdValue);
		}
		return geoFilter;
	}
	return null;
};

oFF.QInARepoFilterManagerLegacy = function() {};
oFF.QInARepoFilterManagerLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterManagerLegacy.prototype._ff_c = "QInARepoFilterManagerLegacy";

oFF.QInARepoFilterManagerLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterManagerLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_FILTER_MANAGER;
};
oFF.QInARepoFilterManagerLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterManagerLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterManager = modelComponent;
	if (oFF.isNull(filterManager))
	{
		filterManager = context.getOlapEnv().getFilterManager();
	}
	let inaFilterManager = inaStructure.getStructureByKey("OlapFilterManager");
	let inaFilters = inaFilterManager.getStructureByKey("OlapFilters");
	let filterNameIt = inaFilters.getKeysAsIterator();
	while (filterNameIt.hasNext())
	{
		let filterName = filterNameIt.next();
		let filterExpression = filterManager.getFilterByName(filterName);
		importer.importFilterExpression(filterExpression, inaFilters.getStructureByKey(filterName), filterManager, filterManager.getContext());
	}
	return filterManager;
};

oFF.QInARepoFilterOperationLegacy = function() {};
oFF.QInARepoFilterOperationLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoFilterOperationLegacy.prototype._ff_c = "QInARepoFilterOperationLegacy";

oFF.QInARepoFilterOperationLegacy.importMemberNavigation = function(inaNavigation)
{
	let memberNavigation = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.lookup(inaNavigation.getStringByKey("Function")));
	if (inaNavigation.containsKey("Parameters"))
	{
		let inaParameters = inaNavigation.getListByKey("Parameters");
		let inaParaSize = inaParameters.size();
		for (let idxPara = 0; idxPara < inaParaSize; idxPara++)
		{
			let inaParameter = inaParameters.getStructureAt(idxPara);
			if (inaParameter.containsKey("Navigations"))
			{
				let inaNavigations = inaParameter.getListByKey("Navigations");
				let inaNaviSize = inaNavigations.size();
				for (let idxNavi = 0; idxNavi < inaNaviSize; idxNavi++)
				{
					memberNavigation.addNavigation(oFF.QInARepoFilterOperationLegacy.importMemberNavigation(inaNavigations.getStructureAt(idxNavi)));
				}
			}
			else
			{
				if (inaParameter.containsKey("Level"))
				{
					let inaLevelValue = inaParameter.getByKey("Level");
					if (inaLevelValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelNumber(inaLevelValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelLiteral(inaLevelValue.getString()));
					}
				}
				else if (inaParameter.containsKey("Member"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithMemberName(inaParameter.getStringByKey("Member")));
				}
				else if (inaParameter.containsKey("NoValuesAboveLevel"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithNoValuesAboveLevel(inaParameter.getStringByKey("NoValuesAboveLevel")));
				}
				else if (inaParameter.containsKey("ErrorAboveLevel"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithErrorAboveLevel(inaParameter.getStringByKey("ErrorAboveLevel")));
				}
				else if (inaParameter.containsKey("Shift"))
				{
					let inaShift = inaParameter.getStructureByKey("Shift");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithShift(inaShift.getStringByKey("Level"), inaShift.getIntegerByKey("Constant")));
				}
				else if (inaParameter.containsKey("Range"))
				{
					let inaRange = inaParameter.getStructureByKey("Range");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithRange(inaRange.getStringByKey("Level"), inaRange.getIntegerByKey("OffsetLow"), inaRange.getIntegerByKey("OffsetHigh")));
				}
				else
				{
					let inaConstantValue = inaParameter.getByKey("Constant");
					if (inaConstantValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithIntegerConstant(inaConstantValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithStringConstant(inaConstantValue.getString()));
					}
				}
			}
		}
	}
	return memberNavigation;
};
oFF.QInARepoFilterOperationLegacy.importValue = function(importer, variableContainer, field, value, valueType, inaElement, parameterName, parameterIsName, parameterNavigations)
{
	let inaValueIs = inaElement.getStringByKey(parameterIsName);
	if (oFF.XString.isEqual("Variable", inaValueIs))
	{
		value.setFilterValueType(oFF.XValueType.VARIABLE);
		let variableName = inaElement.getStringByKey(parameterName);
		let variable = variableContainer.getVariables().getByKey(variableName);
		if (oFF.notNull(variable))
		{
			value.setVariableValue(variable);
		}
	}
	else
	{
		let filterType = oFF.QInAConverter.lookupValueType(inaElement.getStringByKeyExt("LowIs", null));
		if (filterType === oFF.XValueType.CURRENT_MEMBER || filterType === oFF.XValueType.VARIABLE)
		{
			value.setFilterValueType(filterType);
		}
		if (oFF.notNull(parameterNavigations))
		{
			let lowNavigations = inaElement.getListByKey(parameterNavigations);
			if (oFF.notNull(lowNavigations))
			{
				let memberNavigations = value.getMemberNavigations();
				let lowSize = lowNavigations.size();
				for (let lowNaviIdx = 0; lowNaviIdx < lowSize; lowNaviIdx++)
				{
					memberNavigations.add(oFF.QInARepoFilterOperationLegacy.importMemberNavigation(lowNavigations.getStructureAt(lowNaviIdx)));
				}
			}
		}
		oFF.QInAValueUtils.importValue(importer, value, inaElement, parameterName, valueType, field);
	}
};
oFF.QInARepoFilterOperationLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoFilterOperationLegacy.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.OPERATION;
};
oFF.QInARepoFilterOperationLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoFilterOperationLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let inaComparison = inaStructure.getStringByKeyExt("Comparison", "=");
	let comparisonOperator = oFF.QInAConverter.lookupComparison(inaComparison);
	if (oFF.isNull(comparisonOperator))
	{
		importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate2("Unsupported comparison operator: ", inaComparison));
		return null;
	}
	let cartesianList = parentComponent;
	let filterExpression = cartesianList.getFilterExpression();
	let field = cartesianList.getField();
	let filterOperation = oFF.QFactory.createFilterOperationWithOperator(filterExpression, field, comparisonOperator);
	let fieldValueType = field.getValueType();
	let isFuzzyOperator = comparisonOperator.isTypeOf(oFF.ComparisonOperator.LIKE) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.NOT_MATCH);
	if (isFuzzyOperator)
	{
		fieldValueType = oFF.XValueType.STRING;
	}
	if (inaStructure.getBooleanByKeyExt("IsExcluding", false))
	{
		filterOperation.setSetSign(oFF.SetSign.EXCLUDING);
	}
	else
	{
		filterOperation.setSetSign(oFF.SetSign.INCLUDING);
	}
	filterOperation.resetDepth();
	let depth = inaStructure.getIntegerByKeyExt("Depth", -1);
	if (depth !== -1)
	{
		filterOperation.setDepth(depth);
	}
	filterOperation.resetLevelOffset();
	let levelOffset = inaStructure.getIntegerByKeyExt("LevelOffset", -1);
	if (levelOffset !== -1)
	{
		filterOperation.setLevelOffset(levelOffset);
	}
	let hierarchyStructure = inaStructure.getStructureByKey("Hierarchy");
	if (oFF.notNull(hierarchyStructure))
	{
		let hierarchyName = hierarchyStructure.getStringByKey("Name");
		let hierarchyDueDate = null;
		let hierarchyVersion = null;
		let queryModel = filterOperation.getQueryModel();
		if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP))
		{
			let hierarchyDueDateValue = hierarchyStructure.getStringByKey("DueDate");
			if (oFF.notNull(hierarchyDueDateValue))
			{
				hierarchyDueDate = oFF.XDate.createDateFromSAPFormat(hierarchyDueDateValue);
			}
			hierarchyVersion = hierarchyStructure.getStringByKey("Version");
		}
		filterOperation.setHierarchyInfo(hierarchyName, hierarchyDueDate, hierarchyVersion);
	}
	if (importer.m_capabilities.supportsConvertToFlatFilter())
	{
		filterOperation.setConvertToFlatFilter(inaStructure.getBooleanByKeyExt("ConvertToFlatSelection", false));
	}
	let supplementFieldNames = cartesianList.getSupplementFieldNames();
	let variableContainer = context.getVariableContainer();
	let numberOfParameters = comparisonOperator.getNumberOfParameters();
	if (numberOfParameters >= 1)
	{
		let low = filterOperation.getLow();
		oFF.QInARepoFilterOperationLegacy.importValue(importer, variableContainer, field, low, fieldValueType, inaStructure, "Low", "LowIs", "LowNavigations");
		oFF.QInAValueUtils.importSupplements(importer, low, inaStructure, "LowSupplements", supplementFieldNames);
	}
	if (numberOfParameters >= 2)
	{
		let high = filterOperation.getHigh();
		oFF.QInARepoFilterOperationLegacy.importValue(importer, variableContainer, field, high, fieldValueType, inaStructure, "High", "HighIs", null);
		oFF.QInAValueUtils.importSupplements(importer, high, inaStructure, "HighSupplements", supplementFieldNames);
	}
	if (numberOfParameters >= 3)
	{
		let third = filterOperation.getThird();
		oFF.QInARepoFilterOperationLegacy.importValue(importer, variableContainer, field, third, fieldValueType, inaStructure, "Value3", "Value3Is", null);
		oFF.QInAValueUtils.importSupplements(importer, third, inaStructure, null, supplementFieldNames);
	}
	return filterOperation;
};

oFF.QInARepoHierarchyLegacy = function() {};
oFF.QInARepoHierarchyLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoHierarchyLegacy.prototype._ff_c = "QInARepoHierarchyLegacy";

oFF.QInARepoHierarchyLegacy.appendItemsToCatalogResult = function(catalogResult, hierarchiesList, dimensionName)
{
	let len = oFF.PrUtils.getListSize(hierarchiesList, 0);
	for (let i = 0; i < len; i++)
	{
		let hierarchyStructure = oFF.PrUtils.getStructureElement(hierarchiesList, i);
		let item = oFF.HierarchyCatalogItem.createCatalogItem();
		item.setDimensionName(dimensionName);
		let hierarchyName;
		if (hierarchyStructure.hasStringByKey("Name"))
		{
			hierarchyName = hierarchyStructure.getStringByKey("Name");
		}
		else
		{
			hierarchyName = hierarchyStructure.getStringByKey("HierarchyName");
		}
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyName) || catalogResult.containsHierarchy(hierarchyName))
		{
			continue;
		}
		item.setHierarchyName(hierarchyName);
		item.setHierarchyUniqueName(hierarchyStructure.getStringByKey("UniqueName"));
		let hierarchyDescription = oFF.PrUtils.getStringProperty(hierarchyStructure, "Description");
		if (oFF.notNull(hierarchyDescription))
		{
			item.setHierarchyLongText(hierarchyDescription.getString());
		}
		let version = oFF.PrUtils.getStringProperty(hierarchyStructure, "Version");
		if (oFF.notNull(version))
		{
			item.setVersionName(version.getString());
		}
		let structure = oFF.PrUtils.getStringProperty(hierarchyStructure, "Structure");
		if (oFF.notNull(structure))
		{
			item.setHierarchyType(oFF.HierarchyType.lookup(structure.getString()));
		}
		let isModeled = oFF.PrUtils.getBooleanValueProperty(hierarchyStructure, "IsModeled", false);
		item.setIsModeled(isModeled);
		let dateTo = oFF.PrUtils.getStringProperty(hierarchyStructure, "DateTo");
		if (oFF.notNull(dateTo))
		{
			let dateToString = dateTo.getString();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToString))
			{
				item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToString));
			}
		}
		let levels = oFF.PrUtils.getListProperty(hierarchyStructure, "Levels");
		if (oFF.notNull(levels))
		{
			item.setSupportsHierarchyLevels(true);
			let levelList = oFF.XList.create();
			let lenLevel = oFF.PrUtils.getListSize(levels, 0);
			for (let levelIndex = 0; levelIndex < lenLevel; levelIndex++)
			{
				let levelStructure = oFF.PrUtils.getStructureElement(levels, levelIndex);
				if (oFF.isNull(levelStructure))
				{
					continue;
				}
				let catalogLevel = oFF.HierarchyCatalogLevel.createCatalogLevel();
				let level = oFF.PrUtils.getIntegerValueProperty(levelStructure, "Level", -1);
				if (level > -1)
				{
					catalogLevel.setLevel(level);
				}
				let levelName = oFF.PrUtils.getStringProperty(levelStructure, "LevelName");
				if (oFF.notNull(levelName))
				{
					catalogLevel.setLevelName(levelName.getString());
				}
				let levelCaption = oFF.PrUtils.getStringProperty(levelStructure, "LevelCaption");
				if (oFF.notNull(levelCaption))
				{
					catalogLevel.setLevelDescription(levelCaption.getString());
				}
				let levelUniqueName = oFF.PrUtils.getStringProperty(levelStructure, "LevelUniqueName");
				if (oFF.notNull(levelUniqueName))
				{
					catalogLevel.setLevelUniqueName(levelUniqueName.getString());
				}
				let levelDimensionName = oFF.PrUtils.getStringProperty(levelStructure, "DimensionName");
				if (oFF.notNull(levelDimensionName))
				{
					catalogLevel.setLevelDimensionName(levelDimensionName.getString());
				}
				let levelType = oFF.PrUtils.getIntegerProperty(levelStructure, "LevelType");
				if (oFF.notNull(levelType))
				{
					catalogLevel.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(levelType.getInteger()));
				}
				levelList.add(catalogLevel);
			}
			item.setHierarchyLevels(levelList);
		}
		let restNode = hierarchyStructure.getStringByKey("RestNode");
		if (oFF.notNull(restNode))
		{
			item.setRestNode(restNode);
		}
		let virtualRootNode = hierarchyStructure.getStringByKey("VirtualRootNode");
		if (oFF.notNull(virtualRootNode))
		{
			item.setVirtualRootNode(virtualRootNode);
		}
		catalogResult.addItem(item);
	}
	return catalogResult;
};
oFF.QInARepoHierarchyLegacy.importLeveledHierarchy = function(importer, context, dimension, inaHierarchy)
{
	let hier = oFF.QLeveledHierarchy.create(context, dimension, inaHierarchy.getStringByKey(inaHierarchy.containsKey("Name") ? "Name" : "HierarchyName"));
	hier.setHierarchyUniqueName(inaHierarchy.getStringByKey("UniqueName"));
	if (inaHierarchy.getStringByKey("DimensionName") === null)
	{
		hier.setDimensionName(dimension.getName());
	}
	else
	{
		hier.setDimensionName(inaHierarchy.getStringByKey("DimensionName"));
	}
	hier.setHierarchyType(oFF.HierarchyType.lookup(inaHierarchy.getStringByKey("Structure")));
	hier.setIsModeled(inaHierarchy.getBooleanByKeyExt("IsModeled", false));
	let hierDueDate = inaHierarchy.getStringByKey("DueDate");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierDueDate))
	{
		hier.setDateTo(oFF.QInARepoUtils.createDate(hierDueDate));
	}
	hier.setHierarchyDescription(inaHierarchy.getStringByKey("Description"));
	let inaLevels = inaHierarchy.getListByKey("Levels");
	if (!oFF.PrUtils.isListEmpty(inaLevels))
	{
		oFF.QInARepoHierarchyLegacy.importLevels(hier, inaLevels);
	}
	return hier;
};
oFF.QInARepoHierarchyLegacy.importLevels = function(hier, inaLevels)
{
	let size = inaLevels.size();
	for (let levelIdx = 0; levelIdx < size; levelIdx++)
	{
		let inaLevel = inaLevels.getStructureAt(levelIdx);
		let level = oFF.QHierarchyLevel.create(hier, inaLevel.getStringByKey("LevelUniqueName"), inaLevel.getIntegerByKey("Level"));
		level.setLevelName(inaLevel.getStringByKey("LevelName"));
		level.setLevelText(inaLevel.getStringByKey("LevelCaption"));
		level.setLevelDimensionName(inaLevel.getStringByKey("DimensionName"));
		level.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(inaLevel.getIntegerByKey("LevelType")));
		level.setNavigationAttribute(inaLevel.getStringByKey("NavAttr"));
		hier.getAllLevelBase().add(level);
	}
};
oFF.QInARepoHierarchyLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoHierarchyLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY;
};
oFF.QInARepoHierarchyLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoHierarchyLegacy.prototype.getTagName = function()
{
	return "Hierarchy";
};
oFF.QInARepoHierarchyLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	if (dimension.supportsHierarchy())
	{
		let fixInFilter = dimension.isDisplayHierarchyFixInFilter();
		dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(false);
		if (oFF.isNull(inaStructure))
		{
			dimension.setHierarchy(null);
		}
		else
		{
			let hierarchyName;
			if (inaStructure.hasStringByKey("Name"))
			{
				hierarchyName = inaStructure.getStringByKey("Name");
			}
			else
			{
				hierarchyName = inaStructure.getStringByKey("HierarchyName");
			}
			let hierarchy = null;
			if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
			{
				if (dimension.getModelCapabilities().supportsDimensionHierarchyLevels())
				{
					this.importHierarchyAsCatalogItem(inaStructure, dimension);
					this.importLeveledHierarchyToMetadata(importer, inaStructure, context, dimension);
				}
				if (inaStructure.getBooleanByKey("IsTransient"))
				{
					hierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, hierarchyName, inaStructure.getStringByKey("Description"));
				}
				else
				{
					hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, hierarchyName);
				}
				hierarchy.setHierarchyVersion(inaStructure.getStringByKey("Version"));
				let dueDate = inaStructure.getStringByKey("DueDate");
				let dueDateIs = inaStructure.getStringByKey("DueDateIs");
				let isDueDateVariable = oFF.notNull(dueDateIs) && oFF.XString.isEqual("Variable", dueDateIs);
				dimension.setUseHierarchyDueDateVariable(isDueDateVariable);
				if (isDueDateVariable)
				{
					if (oFF.XStringUtils.isNullOrEmpty(dueDate))
					{
						dimension.setHierarchyDueDateVariableName(null);
					}
					else
					{
						dimension.setHierarchyDueDateVariableName(dueDate);
					}
				}
				else
				{
					hierarchy.setHierarchyDueDate(oFF.QInARepoUtils.createDate(dueDate));
				}
				let dateTo = inaStructure.getStringByKey("DateTo");
				hierarchy.setDateTo(oFF.QInARepoUtils.createDate(dateTo));
				let dateFrom = inaStructure.getStringByKey("0DATEFROM");
				hierarchy.setDateFrom(oFF.QInARepoUtils.createDate(dateFrom));
				let inaMetadata = inaStructure.getStructureByKey("Metadata");
				if (oFF.notNull(inaMetadata))
				{
					dateTo = inaMetadata.getStringByKey("DateTo");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTo))
					{
						hierarchy.setDateTo(oFF.QInARepoUtils.createDate(dateTo));
					}
					dateFrom = inaMetadata.getStringByKey("0DATEFROM");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(dateFrom))
					{
						hierarchy.setDateFrom(oFF.QInARepoUtils.createDate(dateFrom));
					}
				}
				dimension.setHierarchy(hierarchy);
				let isActive = inaStructure.getBooleanByKeyExt("HierarchyActive", true);
				dimension.setHierarchyActive(isActive);
				dimension.setSelectorHierarchyActive(isActive);
			}
			let stickyDimensionMembers = inaStructure.getListByKey("StickyDimensionMembers");
			dimension.clearStickyMembers();
			if (oFF.XCollectionUtils.hasElements(stickyDimensionMembers))
			{
				for (let sdi = 0; sdi < stickyDimensionMembers.size(); sdi++)
				{
					dimension.addStickyMember(stickyDimensionMembers.getStringAt(sdi));
				}
			}
			let initialDrillOffset = inaStructure.getIntegerByKeyExt("InitialDrillOffset", 0);
			let initialDrillLevel = inaStructure.getIntegerByKeyExt("InitialDrillLevel", 0);
			let modelCapabilities = dimension.getModelCapabilities();
			if (modelCapabilities.supportsVisibilityFilter() || !importer.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				dimension.setInitialDrillLevel(initialDrillLevel);
				dimension.setSelectorInitialDrillLevel(initialDrillLevel);
			}
			else
			{
				if (initialDrillLevel === -1)
				{
					dimension.setInitialDrillLevel(initialDrillLevel);
					dimension.setSelectorInitialDrillLevel(initialDrillLevel);
				}
				else if (initialDrillOffset === -1)
				{
					dimension.setInitialDrillLevel(0);
					dimension.setSelectorInitialDrillLevel(0);
				}
				else
				{
					dimension.setInitialDrillLevel(initialDrillLevel + initialDrillOffset);
					dimension.setSelectorInitialDrillLevel(initialDrillLevel + initialDrillOffset);
				}
			}
			dimension.setInitialDrillOffset(initialDrillOffset);
			dimension.setExplicitDrillOnFilteredNodes(inaStructure.getBooleanByKeyExt("ExplicitDrillOnFilteredNodes", false));
			let alignment = oFF.Alignment.DEFAULT_VALUE;
			if (context.getModelCapabilities().supportsExpandBottomUp())
			{
				let nodeAlignment = inaStructure.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
				alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
				if (inaStructure.containsKey("ExpandBottomUp"))
				{
					let isExpandingBottomUp = inaStructure.getBooleanByKeyExt("ExpandBottomUp", false);
					if (isExpandingBottomUp)
					{
						alignment = oFF.Alignment.CHILDREN_ABOVE_PARENT;
					}
				}
			}
			dimension.setLowerLevelNodeAlignment(alignment);
			let nodeCondensation = inaStructure.getBooleanByKeyExt("NodeCondensation", false);
			dimension.setHasNodeCondensation(nodeCondensation);
			let memberOfPostedNodeVisibility = inaStructure.getStringByKeyExt("MemberOfPostedNodeVisibility", "Visible");
			let visibility = oFF.QInAConverter.lookupResultSetVisibility(memberOfPostedNodeVisibility);
			dimension.setMemberOfPostedNodeVisibility(visibility);
			dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(fixInFilter);
			return hierarchy;
		}
		dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(fixInFilter);
	}
	return null;
};
oFF.QInARepoHierarchyLegacy.prototype.importHierarchyAsCatalogItem = function(inaStructure, dimension)
{
	let hierarchyAsList = oFF.PrFactory.createList();
	hierarchyAsList.add(inaStructure);
	let hierarchyCatalogResult = dimension.getHierarchies();
	if (oFF.isNull(hierarchyCatalogResult))
	{
		hierarchyCatalogResult = oFF.QFactory.createHierarchyCatalogResult();
		oFF.QInARepoHierarchyLegacy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
		dimension.getHierarchyManagerBase().setHierarchies(hierarchyCatalogResult);
	}
	else
	{
		oFF.QInARepoHierarchyLegacy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
	}
};
oFF.QInARepoHierarchyLegacy.prototype.importLeveledHierarchyToMetadata = function(importer, inaStructure, context, dimension)
{
	let queryManager = dimension.getQueryModelBase().getQueryManagerBase();
	if (oFF.notNull(queryManager) && !oFF.PrUtils.isListEmpty(inaStructure.getListByKey("Levels")))
	{
		let metadataModel = queryManager.getMetadataModelBase();
		let metaHierarchies = metadataModel.getLeveledHierarchiesBase();
		let leveledHierarchy = oFF.QInARepoHierarchyLegacy.importLeveledHierarchy(importer, context, dimension, inaStructure);
		if (!metaHierarchies.contains(leveledHierarchy))
		{
			metaHierarchies.add(leveledHierarchy);
		}
	}
};

oFF.QInARepoMemberRestrictedLegacy = function() {};
oFF.QInARepoMemberRestrictedLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoMemberRestrictedLegacy.prototype._ff_c = "QInARepoMemberRestrictedLegacy";

oFF.QInARepoMemberRestrictedLegacy.getFirstMemberForSignFlip = function(accountName, complexSelectionRoot)
{
	let iterator = complexSelectionRoot.getChildren();
	while (iterator.hasNext())
	{
		let filterElement = iterator.next();
		if (filterElement.getOlapComponentType() === oFF.FilterComponentType.OPERATION)
		{
			let filterOperation = filterElement;
			let dimensionName = filterOperation.getDimensionName();
			if (oFF.XString.isEqual(accountName, dimensionName))
			{
				return filterOperation.getLow().getValue().toString();
			}
		}
		let memberName = oFF.QInARepoMemberRestrictedLegacy.getFirstMemberForSignFlip(accountName, filterElement);
		if (oFF.notNull(memberName))
		{
			return memberName;
		}
	}
	return null;
};
oFF.QInARepoMemberRestrictedLegacy.getMemberForSignFlip = function(context, restrictedMeasure)
{
	if (restrictedMeasure.getAccountType() !== null)
	{
		return restrictedMeasure.getName();
	}
	let dim = restrictedMeasure.getDimensionContext(context.getQueryManager());
	let filter = restrictedMeasure.getFilter();
	let memberName = dim.getName();
	if (oFF.notNull(memberName))
	{
		if (filter.isAll())
		{
			memberName = oFF.QInARepoMemberRestrictedLegacy.getFirstMemberForSignFlip(memberName, filter.getFilterRootElement());
		}
		let member = dim.getStructureMemberByAliasOrMember(memberName);
		if (oFF.notNull(member) && member.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE && member !== restrictedMeasure)
		{
			return oFF.QInARepoMemberRestrictedLegacy.getMemberForSignFlip(context, member);
		}
	}
	return memberName;
};
oFF.QInARepoMemberRestrictedLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoMemberRestrictedLegacy.prototype.getComponentType = function()
{
	return oFF.MemberType.RESTRICTED_MEASURE;
};
oFF.QInARepoMemberRestrictedLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoMemberRestrictedLegacy.prototype.getNameForImport = function(inaStructure, dimension)
{
	let memberName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(memberName) && oFF.notNull(dimension))
	{
		let keyField = dimension.getKeyField();
		let keyName = keyField.getName();
		return inaStructure.getStringByKey(keyName);
	}
	return memberName;
};
oFF.QInARepoMemberRestrictedLegacy.prototype.getText = function(inaStructure, dimension)
{
	let memberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(memberText) && oFF.notNull(dimension))
	{
		let textField = dimension.getTextField();
		if (oFF.notNull(textField))
		{
			let keyName = textField.getName();
			return inaStructure.getStringByKey(keyName);
		}
	}
	return memberText;
};
oFF.QInARepoMemberRestrictedLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let member;
	if (oFF.isNull(modelComponent))
	{
		let dimension = parentComponent;
		let newMemberName = this.getNameForImport(inaStructure, dimension);
		let newMemberText = this.getText(inaStructure, dimension);
		if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && dimension.getLoadedStructureMember(newMemberName) !== null)
		{
			member = dimension.getLoadedStructureMember(newMemberName);
		}
		else
		{
			member = dimension.addNewRestrictedMeasure(newMemberName, newMemberText);
		}
	}
	else
	{
		member = modelComponent;
	}
	let inaAggregationDimension = inaStructure.getStringByKey("AggregationDimension");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregationDimension))
	{
		member.setAggregationDimensionName(inaAggregationDimension);
	}
	let restrictedMeasureStructure = inaStructure;
	if (member.getModelCapabilities().supportsCustomMeasuresInMetadata() && importer.getMode() === oFF.QModelFormat.INA_DATA)
	{
		let memberDetailsKey = member.getDimension().isMeasureStructure() ? "[Measures].[MemberDetails]" : "[CustomDimension2].[MemberDetails]";
		restrictedMeasureStructure = inaStructure.getStructureByKey(memberDetailsKey);
	}
	if (member.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
	{
		importer.importFilterExpression(member.getFilter(), restrictedMeasureStructure, member, context);
	}
	importer.importExceptions(restrictedMeasureStructure, member);
	return member;
};

oFF.QInARepoMembersAllLegacy = function() {};
oFF.QInARepoMembersAllLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoMembersAllLegacy.prototype._ff_c = "QInARepoMembersAllLegacy";

oFF.QInARepoMembersAllLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoMembersAllLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEMBERS;
};
oFF.QInARepoMembersAllLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoMembersAllLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	if (dimension.supportsCustomMembers())
	{
		dimension.removeCustomMembers();
	}
	let inaMemberList = inaStructure.getListByKey("MembersRepo");
	if (oFF.isNull(inaMemberList))
	{
		inaMemberList = inaStructure.getListByKey("Members");
		if (oFF.isNull(inaMemberList))
		{
			return null;
		}
	}
	let structureLayout = dimension.getStructureLayout();
	if (oFF.notNull(structureLayout))
	{
		structureLayout.clear();
		let inaMemberListSize = inaMemberList.size();
		for (let iMember = 0; iMember < inaMemberListSize; iMember++)
		{
			let inaMember = inaMemberList.getStructureAt(iMember);
			let member = importer.importStructureMember(dimension, inaMember, context);
			if (oFF.notNull(member))
			{
				let member2 = dimension.getLoadedStructureMember(member.getName());
				if (oFF.isNull(member2))
				{
					dimension.addMeasure(member);
				}
				else
				{
					if (member2 !== member)
					{
						throw oFF.XException.createIllegalStateException("Internal error: New member with same name not allowed");
					}
					structureLayout.removeElement(member2);
					structureLayout.add(member2);
				}
			}
		}
	}
	return dimension;
};

oFF.QInARepoQueryLegacy = function() {};
oFF.QInARepoQueryLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoQueryLegacy.prototype._ff_c = "QInARepoQueryLegacy";

oFF.QInARepoQueryLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoQueryLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QInARepoQueryLegacy.prototype.getInactiveCapabilities = function(queryModel)
{
	let capabilities = oFF.XHashMapByString.create();
	let allCapabilities = oFF.FeatureToggle.getAllFeatureToggles();
	let allIterator = allCapabilities.getKeysAsIterator();
	while (allIterator.hasNext())
	{
		capabilities.put(allIterator.next(), oFF.XBooleanValue.create(false));
	}
	let experimentalFeatureSet = queryModel.getSession().getFeatureToggles();
	if (oFF.notNull(experimentalFeatureSet))
	{
		let activatedIterator = experimentalFeatureSet.getKeysAsIterator();
		while (activatedIterator.hasNext())
		{
			capabilities.put(activatedIterator.next(), oFF.XBooleanValue.create(true));
		}
	}
	return capabilities;
};
oFF.QInARepoQueryLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoQueryLegacy.prototype.importBlendingSources = function(importer, inaStructure, queryModel)
{
	let sources = queryModel.getBlendingSources();
	if (!oFF.XCollectionUtils.hasElements(sources))
	{
		return;
	}
	let inaDataSource = oFF.PrUtils.getStructureProperty(inaStructure, "DataSource");
	let inaSources = oFF.PrUtils.getListProperty(inaDataSource, "Sources");
	if (oFF.PrUtils.isListEmpty(inaSources))
	{
		return;
	}
	for (let i = 0; i < sources.size(); i++)
	{
		let inaSource = oFF.PrUtils.getStructureElement(inaSources, i);
		let inaDefinitionContext = oFF.PrUtils.getStructureProperty(inaSource, "DefiningContext");
		if (oFF.notNull(inaDefinitionContext))
		{
			let sourceQueryModel = sources.get(i).getQueryModel();
			sourceQueryModel.deserializeFromElementExt(importer.m_mode, inaDefinitionContext);
		}
	}
};
oFF.QInARepoQueryLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	let inaDefinition = inaStructure;
	let inaQueries = inaDefinition.getListByKey("Queries");
	if (oFF.notNull(inaQueries))
	{
		inaDefinition = inaQueries.getStructureAt(inaQueries.size() - 1);
	}
	let inaBatch = inaDefinition.getListByKey(oFF.ConnectionConstants.INA_BATCH);
	if (oFF.notNull(inaBatch))
	{
		inaDefinition = inaBatch.getStructureAt(inaBatch.size() - 1);
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Analytics"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Analytics");
		if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("Definition");
		}
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Definition");
	}
	if (oFF.notNull(inaDefinition))
	{
		let isForRendering = importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE_RENDERING && importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
		let isInaRepoMode = importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
		if (isInaRepoMode && inaDefinition.containsKey("ModellerDefinition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("ModellerDefinition");
			let eventingStoppedBeforeModelingCall = queryModel.isEventingStopped();
			if (!eventingStoppedBeforeModelingCall)
			{
				queryModel.stopEventing();
			}
			queryModel.setDeltaPhase(oFF.QDeltaOperationPhase.NOTE_MODELER_CHANGES);
			importer.importModellerMetadataProperties(inaDefinition, queryModel, queryModel);
			importer.importModellerDimensions(inaDefinition, queryModel, queryModel);
			importer.importModellerDefinedVariables(inaDefinition, queryModel.getVariableManagerBase(), queryModel);
			importer.importModellerCurrencyTranslation(inaDefinition, queryModel.getCurrencyTranslationManagerBase(), queryModel);
			importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
			queryModel.finishModelerEventing();
			if (!eventingStoppedBeforeModelingCall)
			{
				queryModel.resumeEventing();
			}
			return queryModel;
		}
		importer.importDimensions(inaDefinition, queryModel, queryModel);
		if (!isForRendering)
		{
			importer.importFilter(inaDefinition, queryModel.getFilterBase(), queryModel);
			importer.importExceptions(inaDefinition, queryModel);
			importer.importQueryCells(inaDefinition, queryModel.getQueryCellManager(), queryModel);
			importer.importUniversalDisplayHierarchies(inaDefinition, queryModel.getUniversalDisplayHierarchiesBase(), queryModel);
		}
		importer.importCurrencyTranslationManager(inaDefinition, queryModel.getCurrencyTranslationManager(), queryModel);
		importer.importSortingManager(inaDefinition, queryModel.getSortingManagerBase(), queryModel);
		importer.importDrillManager(inaDefinition, queryModel.getDrillManager(), queryModel);
		importer.importVariableManager(inaDefinition, queryModel.getVariableManagerBase(), queryModel);
		importer.importQuerySettings(inaDefinition, queryModel);
		importer.importDataCells(inaDefinition, queryModel);
		importer.importConditionManager(inaDefinition, queryModel.getConditionManagerBase(), queryModel);
		if (isInaRepoMode)
		{
			importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
			this.importPaging(importer, inaDefinition, queryModel);
			oFF.QInARepoOptions.importSuppressKeyfigureCalculation(inaDefinition, queryModel.getQueryManager());
			let resultStructureController = queryModel.getResultStructureController();
			importer.importComponent(null, inaDefinition, resultStructureController, queryModel, queryModel);
			let queryManager = queryModel.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				queryManager.setResultSetPersistanceTargetTable(inaDefinition.getStringByKey("ResultSetPersistanceTable"));
				queryManager.setResultSetPersistanceTargetSchema(inaDefinition.getStringByKey("ResultSetPersistanceSchema"));
				queryManager.setResultSetPersistenceIdentifier(inaDefinition.getStringByKey("ResultSetPersistanceIdentifier"));
			}
			let inaPreQueries = inaDefinition.getListByKey("PreQueries");
			if (oFF.notNull(inaPreQueries))
			{
				let mainQuerySystemname = null;
				let inaDataSource = inaDefinition.getStructureByKey("DataSource");
				if (oFF.notNull(inaDataSource))
				{
					mainQuerySystemname = inaDataSource.getStringByKey("System");
				}
				this.importPreQueries(importer, queryModel, inaPreQueries, mainQuerySystemname);
			}
			if (queryModel.isBlendingModel())
			{
				this.importBlendingSources(importer, inaStructure, queryModel);
			}
		}
	}
	return queryModel;
};
oFF.QInARepoQueryLegacy.prototype.importPaging = function(importer, inaDefinition, queryModel)
{
	let inaSubset = inaDefinition.getStructureByKey("SubSetDescription");
	let queryManager = queryModel.getQueryManager();
	let isForRendering = importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING;
	if (oFF.isNull(inaSubset) || !queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) || queryManager.applyingStateOnQueryManager() && !isForRendering)
	{
		return;
	}
	oFF.QInARepoOptions.importPaging(inaDefinition, queryManager);
};
oFF.QInARepoQueryLegacy.prototype.importPreQueries = function(importer, queryModel, inaPreQueries, mainQuerySystemname)
{
	let modeHolder = importer.getMode();
	if (importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE_RENDERING)
	{
		importer.m_mode = importer.getOriginalMode();
	}
	let capabilitiesToActivate = this.getInactiveCapabilities(queryModel);
	for (let i = 0; i < inaPreQueries.size(); i++)
	{
		let inaPreQuery = inaPreQueries.getStructureAt(i);
		let inaPreQueryName = inaPreQuery.getStringByKey("ObjectName");
		if (queryModel.getPreQueryByName(inaPreQueryName) !== null)
		{
			continue;
		}
		let inaRuntime = inaPreQuery.containsKey("Runtime") ? inaPreQuery.getStructureByKey("Runtime") : inaPreQuery;
		let inaDataSource = inaRuntime.getStructureByKey("DataSource");
		let datasource = oFF.XStringBuffer.create();
		datasource.append(inaDataSource.getStringByKey("Type")).append(":[");
		datasource.append(inaDataSource.getStringByKey("SchemaName"));
		datasource.append("][");
		datasource.append(inaDataSource.getStringByKey("PackageName"));
		datasource.append("][");
		datasource.append(inaDataSource.getStringByKey("ObjectName")).append("]");
		let preQuerySystemName = inaDataSource.getStringByKey("System");
		if (importer.m_mode === oFF.QModelFormat.INA_REPOSITORY && oFF.XString.isEqual(preQuerySystemName, mainQuerySystemname))
		{
			preQuerySystemName = queryModel.getDataSource().getSystemName();
		}
		let commandFactory = oFF.XCommandFactory.create(queryModel.getApplication());
		let xCmdDeserialize = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, queryModel.getApplication());
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, capabilitiesToActivate);
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, preQuerySystemName);
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, datasource.toString());
		let processCommand = xCmdDeserialize.processCommand(oFF.SyncType.BLOCKING, null, null);
		importer.addAllMessages(processCommand);
		oFF.XObjectExt.release(xCmdDeserialize);
		if (processCommand.isValid())
		{
			let preQuery = processCommand.getData().getResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER).getQueryModel();
			importer.importPreQuery(inaPreQuery, preQuery);
			queryModel.addPreQueryWithName(preQuery, inaPreQueryName);
		}
	}
	importer.m_mode = modeHolder;
};

oFF.QInARepoQuerySettingsLegacy = function() {};
oFF.QInARepoQuerySettingsLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoQuerySettingsLegacy.prototype._ff_c = "QInARepoQuerySettingsLegacy";

oFF.QInARepoQuerySettingsLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoQuerySettingsLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_SETTINGS;
};
oFF.QInARepoQuerySettingsLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoQuerySettingsLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let definitionNameString = oFF.PrUtils.getStringProperty(inaStructure, "Name");
	let queryModel = context.getQueryModel();
	if (oFF.notNull(definitionNameString))
	{
		queryModel.setDefinitionName(definitionNameString.getString());
	}
	let inaQuery = inaStructure.getStructureByKey("Query");
	importer.importAxesSettings(inaQuery, queryModel);
	if (importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		let inaCurrencyTranslation = inaStructure.getStructureByKey("CurrencyTranslation");
		if (oFF.notNull(inaCurrencyTranslation))
		{
			let currencyTranslationDetails = queryModel.getCurrencyTranslationManager().getCurrencyTranslationDetails();
			currencyTranslationDetails.setCurrencyTranslationName(inaCurrencyTranslation.getStringByKey("Name"));
			currencyTranslationDetails.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.lookup(inaCurrencyTranslation.getStringByKey("Operation")));
			currencyTranslationDetails.setCurrencyTranslationTarget(inaCurrencyTranslation.getStringByKey("Target"));
		}
		let axesLayoutList = oFF.PrUtils.getListProperty(inaQuery, "AxesLayout");
		let len = oFF.PrUtils.getListSize(axesLayoutList, 0);
		for (let axesLayoutIndex = 0; axesLayoutIndex < len; axesLayoutIndex++)
		{
			let axisLayoutStructure = oFF.PrUtils.getStructureElement(axesLayoutList, axesLayoutIndex);
			let axisType = oFF.AxisType.lookup(oFF.PrUtils.getStringValueProperty(axisLayoutStructure, "Axis", null));
			let axis = queryModel.getAxis(axisType);
			if (oFF.isNull(axis))
			{
				continue;
			}
			let orderedDimensionNamesList = oFF.PrUtils.getListProperty(axisLayoutStructure, "OrderedDimensionNames");
			if (oFF.isNull(orderedDimensionNamesList))
			{
				continue;
			}
			let orderedDimensionNames = oFF.XList.create();
			for (let dimensionNameIndex = 0; dimensionNameIndex < oFF.PrUtils.getListSize(orderedDimensionNamesList, 0); dimensionNameIndex++)
			{
				let dimensionNameString = oFF.PrUtils.getStringElement(orderedDimensionNamesList, dimensionNameIndex);
				if (oFF.isNull(dimensionNameString))
				{
					continue;
				}
				orderedDimensionNames.add(dimensionNameString.getString());
			}
			axis.reOrderDimensions(orderedDimensionNames);
		}
	}
	return queryModel;
};

oFF.QInARepoSortLegacy = function() {};
oFF.QInARepoSortLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoSortLegacy.prototype._ff_c = "QInARepoSortLegacy";

oFF.QInARepoSortLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoSortLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SORT_MANAGER;
};
oFF.QInARepoSortLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoSortLegacy.prototype.getTagName = function()
{
	return "Sort";
};
oFF.QInARepoSortLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let sortingManager = modelComponent;
	if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT && importer.m_capabilities.supportsExtendedSort())
	{
		sortingManager.getSortingOperations().clear();
		if (oFF.notNull(inaList))
		{
			let queryModel = sortingManager.getQueryModel();
			for (let sortIdx = 0; sortIdx < inaList.size(); sortIdx++)
			{
				let inaSort = inaList.getStructureAt(sortIdx);
				let inaSortType = inaSort.getStringByKey("SortType");
				let sortType = oFF.QInAConverter.lookupSortType(inaSortType);
				let sortingOp;
				if (sortType === oFF.SortType.FIELD)
				{
					sortingOp = this.importFieldSorting(sortingManager, queryModel, inaSort);
				}
				else if (sortType === oFF.SortType.MEASURE)
				{
					sortingOp = this.importMeasureSorting(sortingManager, queryModel, inaSort);
				}
				else if (sortType === oFF.SortType.DATA_CELL_VALUE || sortType === oFF.SortType.COMPLEX)
				{
					sortingOp = this.importPathSorting(context, sortingManager, queryModel, inaSort, sortType);
				}
				else
				{
					sortingOp = this.importDimensionSorting(sortingManager, queryModel, inaSort, sortType);
				}
				if (oFF.notNull(sortingOp))
				{
					this.importGenericSorting(queryModel, inaSort, sortingOp);
				}
			}
		}
	}
	return sortingManager;
};
oFF.QInARepoSortLegacy.prototype.importCustomSortDetails = function(dimensionSorting, inaSort)
{
	let customSortList = inaSort.getListByKey("CustomSort");
	if (!oFF.PrUtils.isListEmpty(customSortList))
	{
		let customSort = oFF.PrUtils.asListOfString(customSortList);
		dimensionSorting.setCustomSort(customSort);
		let customSortPosition = oFF.CustomSortPosition.lookup(inaSort.getStringByKey("CustomSortPosition"));
		dimensionSorting.setCustomSortPosition(customSortPosition);
	}
};
oFF.QInARepoSortLegacy.prototype.importDimensionSorting = function(sortingManager, queryModel, inaSort, sortType)
{
	let dimension = queryModel.getDimensionByNameFromExistingMetadata(inaSort.getStringByKey("Dimension"));
	if (oFF.isNull(dimension) || dimension.isUniversalDisplayHierarchyDimension())
	{
		return null;
	}
	let dimensionSorting = sortingManager.getDimensionSorting(dimension, true);
	if (sortType === oFF.SortType.FILTER)
	{
		dimensionSorting.setSortByFilter();
	}
	else if (sortType === oFF.SortType.MEMBER_KEY)
	{
		dimensionSorting.setSortByKey();
		this.importCustomSortDetails(dimensionSorting, inaSort);
	}
	else if (sortType === oFF.SortType.MEMBER_TEXT)
	{
		dimensionSorting.setSortByText();
	}
	else if (sortType === oFF.SortType.HIERARCHY)
	{
		dimensionSorting.setSortByHierarchy();
	}
	return dimensionSorting;
};
oFF.QInARepoSortLegacy.prototype.importFieldSorting = function(sortingManager, queryModel, inaSort)
{
	let fieldName = inaSort.getStringByKey("FieldName");
	let fieldSorting = null;
	if (oFF.notNull(fieldName))
	{
		let field = queryModel.getFieldByName(fieldName);
		if (oFF.notNull(field))
		{
			fieldSorting = sortingManager.getFieldSorting(field, true);
		}
	}
	return fieldSorting;
};
oFF.QInARepoSortLegacy.prototype.importGenericSorting = function(queryModel, inaSort, sortingOp)
{
	let inaDirection = inaSort.getStringByKey("Direction");
	if (oFF.notNull(inaDirection))
	{
		let sortDirection = oFF.QInAConverter.lookupSortDirection2(inaDirection);
		if (oFF.notNull(sortDirection))
		{
			sortingOp.setDirection(sortDirection);
		}
	}
	if (sortingOp.supportsPreserveGrouping() && sortingOp.supportsBreakGrouping())
	{
		sortingOp.setPreserveGrouping(inaSort.getBooleanByKeyExt("PreserveGrouping", false));
	}
	if (queryModel.getModelCapabilities().supportsLocaleSorting())
	{
		let inaCollator = inaSort.getStructureByKey("Collator");
		if (oFF.notNull(inaCollator))
		{
			sortingOp.setIsCaseSensitive(inaCollator.getBooleanByKeyExt("CaseSensitive", false));
			sortingOp.setLocale(inaCollator.getStringByKeyExt("Locale", null));
		}
	}
};
oFF.QInARepoSortLegacy.prototype.importMeasureSorting = function(sortingManager, queryModel, inaSort)
{
	let measureName = inaSort.getStringByKey("MeasureName");
	let measureSorting = null;
	if (oFF.notNull(measureName))
	{
		let measureDimension = queryModel.getMeasureDimension();
		let measure = measureDimension.getStructureMember(measureName);
		if (oFF.notNull(measure))
		{
			measureSorting = sortingManager.getMeasureSorting(measure, true);
		}
		let structureName = inaSort.getStringByKey("StructureName");
		let structure = queryModel.getNonMeasureDimension();
		if (oFF.notNull(structureName) && oFF.notNull(structure) && oFF.notNull(measureSorting))
		{
			measureSorting.setSecondaryMeasure(structure.getStructureMember(structureName));
		}
	}
	return measureSorting;
};
oFF.QInARepoSortLegacy.prototype.importPathSorting = function(context, sortingManager, queryModel, inaSort, sortType)
{
	let inaPath = inaSort.getListByKey("SortTuple");
	if (inaPath.isEmpty())
	{
		return null;
	}
	let path = oFF.XList.create();
	for (let idxStruct = 0; idxStruct < inaPath.size(); idxStruct++)
	{
		let pathElement = inaPath.getStructureAt(idxStruct);
		let inaFieldName = pathElement.getStringByKey("FieldName");
		let inaValue = pathElement.getStringByKey("Value");
		if (oFF.notNull(inaFieldName) && oFF.notNull(inaValue))
		{
			let field = queryModel.getFieldByName(inaFieldName);
			if (oFF.isNull(field))
			{
				return null;
			}
			let inaHierarchyName = pathElement.getStringByKey("Hierarchy");
			path.add(oFF.QSelectValue._createDimensionElement2(context, field, inaHierarchyName, inaValue));
		}
		else
		{
			return null;
		}
	}
	if (sortType === oFF.SortType.DATA_CELL_VALUE)
	{
		return sortingManager.getDataCellSorting(path, true);
	}
	return sortingManager.getComplexSorting(path, true);
};

oFF.QInARepoVarDimMemberLegacy = function() {};
oFF.QInARepoVarDimMemberLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoVarDimMemberLegacy.prototype._ff_c = "QInARepoVarDimMemberLegacy";

oFF.QInARepoVarDimMemberLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoVarDimMemberLegacy.prototype.getComponentType = function()
{
	return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
};
oFF.QInARepoVarDimMemberLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoVarDimMemberLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let memberVariable = modelComponent;
	let inaValues = inaStructure.getStructureByKey("Values");
	if (oFF.notNull(inaValues))
	{
		let selectionContainer = oFF.QFactory.createFilterExpression(memberVariable, memberVariable);
		let newSelectionContainer = importer.importFilterExpression(selectionContainer, inaValues, memberVariable, context);
		memberVariable.setFilter(newSelectionContainer);
	}
	else if (memberVariable.getVariableType() === oFF.VariableType.HIERARCHY_NODE_VARIABLE && memberVariable.hasMemberFilter() && memberVariable.getDimension().getKeyField() !== memberVariable.getMemberFilter().getField())
	{
		memberVariable.setDimension(memberVariable.getDimension());
	}
	return memberVariable;
};

oFF.QInARepoVarOptionListLegacy = function() {};
oFF.QInARepoVarOptionListLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoVarOptionListLegacy.prototype._ff_c = "QInARepoVarOptionListLegacy";

oFF.QInARepoVarOptionListLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoVarOptionListLegacy.prototype.getComponentType = function()
{
	return oFF.VariableType.OPTION_LIST_VARIABLE;
};
oFF.QInARepoVarOptionListLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoVarOptionListLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let optionListVariable = modelComponent;
	let inaOptionValues = inaStructure.getListByKey("OptionValues");
	if (oFF.notNull(inaOptionValues))
	{
		let currentOption;
		if (optionListVariable.supportsMultipleValues())
		{
			optionListVariable.clear();
			let len = inaOptionValues.size();
			for (let idxOption = 0; idxOption < len; idxOption++)
			{
				currentOption = inaOptionValues.getStringAt(idxOption);
				optionListVariable.addString(currentOption);
			}
		}
		else if (inaOptionValues.size() === 1)
		{
			currentOption = inaOptionValues.getStringAt(0);
			optionListVariable.setString(currentOption);
		}
	}
	return optionListVariable;
};

oFF.QInARepoVarSimpleTypeLegacy = function() {};
oFF.QInARepoVarSimpleTypeLegacy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInARepoVarSimpleTypeLegacy.prototype._ff_c = "QInARepoVarSimpleTypeLegacy";

oFF.QInARepoVarSimpleTypeLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoVarSimpleTypeLegacy.prototype.getComponentType = function()
{
	return oFF.VariableType.SIMPLE_TYPE_VARIABLE;
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.getFirstValueAsString = function(values)
{
	let element = values.get(0);
	if (oFF.notNull(element) && element.isString())
	{
		return element.getString();
	}
	return null;
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importBooleanValues = function(inaStructure, simpleTypeVariable)
{
	let inaSimpleBooleanValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleBooleanValues))
	{
		let sizeValue = inaSimpleBooleanValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				simpleTypeVariable.addBoolean(inaSimpleBooleanValues.getBooleanAt(idxValue));
			}
		}
		else if (sizeValue === 1)
		{
			let element = inaSimpleBooleanValues.get(0);
			if (oFF.notNull(element) && element.isBoolean())
			{
				simpleTypeVariable.setBoolean(element.asBoolean().getBoolean());
			}
		}
	}
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let simpleTypeVariable = modelComponent;
	simpleTypeVariable.clear();
	let valueType = simpleTypeVariable.getValueType();
	if (valueType.isNumber())
	{
		this.importNumericValues(importer, inaStructure, simpleTypeVariable, valueType);
	}
	else if (valueType.isString())
	{
		this.importStringValues(inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		this.importDateValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.TIME)
	{
		this.importTimeValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.DATE_TIME)
	{
		this.importDateTimeValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		this.importBooleanValues(inaStructure, simpleTypeVariable);
	}
	return null;
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importDateTimeValues = function(importer, inaStructure, simpleTypeVariable)
{
	let inaSimpleDateTimeValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleDateTimeValues))
	{
		let sizeValue = inaSimpleDateTimeValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let dateTimeValue = inaSimpleDateTimeValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTimeValue))
				{
					simpleTypeVariable.addDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(dateTimeValue, importer.m_capabilities.supportsSapDate()));
				}
			}
		}
		else if (sizeValue === 1)
		{
			let dateTimeValue2 = this.getFirstValueAsString(inaSimpleDateTimeValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTimeValue2))
			{
				simpleTypeVariable.setDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(dateTimeValue2, importer.m_capabilities.supportsSapDate()));
			}
		}
	}
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importDateValues = function(importer, inaStructure, simpleTypeVariable)
{
	let inaSimpleDateValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleDateValues))
	{
		let sizeValue = inaSimpleDateValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let dateValue = inaSimpleDateValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dateValue))
				{
					simpleTypeVariable.addDate(oFF.QInARepoUtils.createDate(dateValue));
				}
			}
		}
		else if (sizeValue === 1)
		{
			let dateValue2 = this.getFirstValueAsString(inaSimpleDateValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateValue2))
			{
				simpleTypeVariable.setDate(oFF.QInARepoUtils.createDate(dateValue2));
			}
		}
	}
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importNumericString = function(simpleTypeVariable, valueType, stringValue)
{
	if (valueType === oFF.XValueType.INTEGER)
	{
		simpleTypeVariable.addInteger(oFF.XInteger.convertFromString(stringValue));
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		simpleTypeVariable.addDouble(oFF.XDouble.convertFromString(stringValue));
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		simpleTypeVariable.addLong(oFF.XLong.convertFromString(stringValue));
	}
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importNumericValues = function(importer, inaStructure, simpleTypeVariable, valueType)
{
	let inaSimpleNumericValues = inaStructure.getListByKey("SimpleNumericValues");
	if (oFF.notNull(inaSimpleNumericValues))
	{
		let sizeValue = inaSimpleNumericValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let elementAt = inaSimpleNumericValues.get(idxValue);
				if (importer.m_capabilities.supportsNumberAsString() && oFF.notNull(elementAt) && elementAt.getType() === oFF.PrElementType.STRING)
				{
					this.importNumericString(simpleTypeVariable, valueType, inaSimpleNumericValues.getStringAt(idxValue));
					continue;
				}
				if (valueType === oFF.XValueType.INTEGER)
				{
					let integerValue = inaSimpleNumericValues.getIntegerAt(idxValue);
					simpleTypeVariable.addInteger(integerValue);
				}
				else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					let doubleValue = inaSimpleNumericValues.getDoubleAt(idxValue);
					simpleTypeVariable.addDouble(doubleValue);
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					let longValue = inaSimpleNumericValues.getLongAt(idxValue);
					simpleTypeVariable.addLong(longValue);
				}
			}
		}
		else if (sizeValue === 1)
		{
			let numericElement0 = inaSimpleNumericValues.get(0);
			if (oFF.notNull(numericElement0) && numericElement0.isNumeric())
			{
				if (valueType === oFF.XValueType.INTEGER)
				{
					simpleTypeVariable.setInteger(inaSimpleNumericValues.getIntegerAt(0));
				}
				else if (valueType === oFF.XValueType.DOUBLE)
				{
					simpleTypeVariable.setDouble(inaSimpleNumericValues.getDoubleAt(0));
				}
				else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					simpleTypeVariable.setDecFloat(oFF.XDecFloatByDouble.create(inaSimpleNumericValues.getDoubleAt(0)));
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					simpleTypeVariable.setLong(inaSimpleNumericValues.getLongAt(0));
				}
			}
		}
	}
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importStringValues = function(inaStructure, simpleTypeVariable)
{
	let inaSimpleStringValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleStringValues))
	{
		let sizeValue = inaSimpleStringValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				simpleTypeVariable.addString(inaSimpleStringValues.getStringAt(idxValue));
			}
		}
		else if (sizeValue === 1)
		{
			let element = inaSimpleStringValues.get(0);
			if (oFF.notNull(element) && element.isString())
			{
				simpleTypeVariable.setString(element.getString());
			}
		}
	}
};
oFF.QInARepoVarSimpleTypeLegacy.prototype.importTimeValues = function(importer, inaStructure, simpleTypeVariable)
{
	let inaSimpleTimeValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleTimeValues))
	{
		let sizeValue = inaSimpleTimeValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let timeValue = inaSimpleTimeValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(timeValue))
				{
					simpleTypeVariable.addTime(oFF.XTime.createTimeFromStringWithFlag(timeValue, importer.m_capabilities.supportsSapDate()));
				}
			}
		}
		else if (sizeValue === 1)
		{
			let timeValue2 = this.getFirstValueAsString(inaSimpleTimeValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(timeValue2))
			{
				simpleTypeVariable.setTime(oFF.XTime.createTimeFromStringWithFlag(timeValue2, importer.m_capabilities.supportsSapDate()));
			}
		}
	}
};

oFF.QInARepoVariableContainerLegacy = function() {};
oFF.QInARepoVariableContainerLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoVariableContainerLegacy.prototype._ff_c = "QInARepoVariableContainerLegacy";

oFF.QInARepoVariableContainerLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoVariableContainerLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QInARepoVariableContainerLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoVariableContainerLegacy.prototype.getTagName = function()
{
	return "Variables";
};
oFF.QInARepoVariableContainerLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let variableContainer = modelComponent;
	importer.importVariableList(inaList, variableContainer);
	return modelComponent;
};

oFF.QInARepoVariablesListLegacy = function() {};
oFF.QInARepoVariablesListLegacy.prototype = new oFF.QInAComponentWithList();
oFF.QInARepoVariablesListLegacy.prototype._ff_c = "QInARepoVariablesListLegacy";

oFF.QInARepoVariablesListLegacy.prototype.exportComponentWithList = oFF.noSupport;
oFF.QInARepoVariablesListLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_LIST;
};
oFF.QInARepoVariablesListLegacy.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_REPOSITORY;
};
oFF.QInARepoVariablesListLegacy.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let variableContainer = modelComponent;
	if (oFF.notNull(inaList))
	{
		let len = inaList.size();
		for (let varIdx = 0; varIdx < len; varIdx++)
		{
			let inaVariable = inaList.getStructureAt(varIdx);
			let variableName = inaVariable.getStringByKey("Name");
			let variable = variableContainer.getVariableBaseByName(variableName);
			if (oFF.notNull(variable))
			{
				let variableType = variable.getVariableType();
				if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
				{
					importer.importSimpleTypeVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
				{
					importer.importDimensionMemberVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
				{
					importer.importOptionListVariable(inaVariable, variable, context);
				}
				else
				{
					importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate5("The variable '", variableName, "' of variable type '", variableType.getName(), "' was not imported correctly"));
				}
			}
			else
			{
				importer.addWarning(oFF.ErrorCodes.ET_ELEMENT_NOT_FOUND, oFF.XStringUtils.concatenate3("The variable '", variableName, "' was not found"));
			}
		}
	}
	return modelComponent;
};

oFF.InARepoMappingDimension = function() {};
oFF.InARepoMappingDimension.prototype = new oFF.InARepoMappingElement();
oFF.InARepoMappingDimension.prototype._ff_c = "InARepoMappingDimension";

oFF.InARepoMappingDimension.createDimensionMapping = function(type, sourceValue, targetValue)
{
	let mappingElement = new oFF.InARepoMappingDimension();
	mappingElement.setupElement(type, sourceValue, targetValue, null);
	mappingElement.addIgnoredKey("HierarchyName");
	mappingElement.addIgnoredKey("OrderedStructureMemberNames");
	return mappingElement;
};
oFF.InARepoMappingDimension.prototype.apply = function(key, value, context)
{
	let mappedValue = oFF.InARepoMappingElement.prototype.apply.call( this , key, value, context);
	if (oFF.isNull(mappedValue) && !context.getType().isTypeOf(oFF.InARepoMapperContextType.AXES_SETTINGS) && !this.isDimensionRef(key))
	{
		let sourceDimName = this.getSourceValue();
		if (oFF.XString.startsWith(value, oFF.XStringUtils.concatenate2(sourceDimName, ".")))
		{
			mappedValue = oFF.XString.replace(value, oFF.XStringUtils.concatenate2(sourceDimName, "."), oFF.XStringUtils.concatenate2(this.getTargetValue(), "."));
		}
		else if (oFF.XString.isEqual(value, oFF.XStringUtils.concatenate5("[", sourceDimName, "].[", sourceDimName, "]")))
		{
			mappedValue = oFF.XStringUtils.concatenate5("[", this.getTargetValue(), "].[", this.getTargetValue(), "]");
		}
		else if (oFF.XString.startsWith(value, oFF.XStringUtils.concatenate3("[", sourceDimName, "].")))
		{
			mappedValue = oFF.XString.replace(value, oFF.XStringUtils.concatenate3("[", sourceDimName, "]."), oFF.XStringUtils.concatenate3("[", this.getTargetValue(), "]."));
		}
		if (oFF.notNull(mappedValue) && oFF.XPattern.matches(mappedValue, oFF.XStringUtils.concatenate5("[", this.getTargetValue(), "].[*].[", sourceDimName, ".*].*")))
		{
			mappedValue = oFF.XString.replace(mappedValue, oFF.XStringUtils.concatenate3("[", sourceDimName, "."), oFF.XStringUtils.concatenate3("[", this.getTargetValue(), "."));
		}
	}
	return mappedValue;
};
oFF.InARepoMappingDimension.prototype.isApplicable = function(key, context)
{
	let contextType = context.getType();
	if (this.isIgnored(key) || contextType.isTypeOf(oFF.InARepoMapperContextType.DIMENSION_HIERARCHY) || contextType.isTypeOf(oFF.InARepoMapperContextType.RESULT_STRUCTURE))
	{
		return false;
	}
	return !contextType.isTypeOf(oFF.InARepoMapperContextType.DIMENSION) || oFF.XString.isEqual(context.getValue(), this.getSourceValue()) || contextType.isTypeOf(oFF.InARepoMapperContextType.VARIANCE_MEMBER) || this.isDimensionRef(key);
};

oFF.InARepoMappingField = function() {};
oFF.InARepoMappingField.prototype = new oFF.InARepoMappingElement();
oFF.InARepoMappingField.prototype._ff_c = "InARepoMappingField";

oFF.InARepoMappingField.createFieldMapping = function(type, sourceValue, targetValue, dimensionContext)
{
	let mappingElement = new oFF.InARepoMappingField();
	mappingElement.setupElement(type, sourceValue, targetValue, dimensionContext);
	mappingElement.addIgnoredKey("HierarchyName");
	mappingElement.addIgnoredKey("OrderedStructureMemberNames");
	return mappingElement;
};
oFF.InARepoMappingField.prototype.isApplicable = function(key, context)
{
	if (!oFF.InARepoMappingElement.prototype.isApplicable.call( this , key, context) || context.getType().isTypeOf(oFF.InARepoMapperContextType.CONDITION) || context.getType().isTypeOf(oFF.InARepoMapperContextType.AXES_SETTINGS))
	{
		return false;
	}
	return !context.getType().isTypeOf(oFF.InARepoMapperContextType.DIMENSION) || this.getContext() === null || oFF.XString.isEqual(context.getValue(), this.getContext());
};

oFF.InARepoMappingHierarchy = function() {};
oFF.InARepoMappingHierarchy.prototype = new oFF.InARepoMappingElement();
oFF.InARepoMappingHierarchy.prototype._ff_c = "InARepoMappingHierarchy";

oFF.InARepoMappingHierarchy.createHierarchyMapping = function(type, sourceValue, targetValue, dimensionContext)
{
	let mappingElement = new oFF.InARepoMappingHierarchy();
	mappingElement.setupElement(type, sourceValue, targetValue, dimensionContext);
	mappingElement.addIgnoredKey("OrderedStructureMemberNames");
	mappingElement.addIgnoredKey("DimensionNames");
	return mappingElement;
};
oFF.InARepoMappingHierarchy.prototype.apply = function(key, value, context)
{
	let mappedValue = oFF.InARepoMappingElement.prototype.apply.call( this , key, value, context);
	if (oFF.isNull(mappedValue))
	{
		if (oFF.XPattern.matches(value, oFF.XStringUtils.concatenate3("[*].[", this.getSourceValue(), "].*")))
		{
			mappedValue = oFF.XString.replace(value, oFF.XStringUtils.concatenate3(".[", this.getSourceValue(), "]."), oFF.XStringUtils.concatenate3(".[", this.getTargetValue(), "]."));
		}
		else if (this.getContext() !== null && oFF.XPattern.matches(value, oFF.XStringUtils.concatenate4(this.getContext(), ".", this.getSourceValue(), ".*")))
		{
			mappedValue = oFF.XString.replace(value, oFF.XStringUtils.concatenate3(".", this.getSourceValue(), "."), oFF.XStringUtils.concatenate3(".", this.getTargetValue(), "."));
		}
	}
	return mappedValue;
};
oFF.InARepoMappingHierarchy.prototype.isApplicable = function(key, context)
{
	if (!oFF.InARepoMappingElement.prototype.isApplicable.call( this , key, context) || context.getType().isTypeOf(oFF.InARepoMapperContextType.AXES_SETTINGS))
	{
		return false;
	}
	let dimension = this.getContext();
	if (oFF.notNull(dimension))
	{
		if (context.getType().isTypeOf(oFF.InARepoMapperContextType.DIMENSION_HIERARCHY) && oFF.XString.isEqual(context.getValue(), dimension))
		{
			return true;
		}
		if (context.getType().isTypeOf(oFF.InARepoMapperContextType.DIMENSION))
		{
			return false;
		}
		if (context.getType().isTypeOf(oFF.InARepoMapperContextType.FILTER) && !oFF.XString.startsWith(context.getValue(), oFF.XStringUtils.concatenate3("[", dimension, "].")) && !oFF.XString.startsWith(context.getValue(), oFF.XStringUtils.concatenate2(dimension, ".")))
		{
			return false;
		}
	}
	return true;
};

oFF.InARepoMappingHierarchyLevel = function() {};
oFF.InARepoMappingHierarchyLevel.prototype = new oFF.InARepoMappingElement();
oFF.InARepoMappingHierarchyLevel.prototype._ff_c = "InARepoMappingHierarchyLevel";

oFF.InARepoMappingHierarchyLevel.createHierarchyLevelMapping = function(type, sourceValue, targetValue, dimensionContext, hierarchyContext)
{
	let mappingElement = new oFF.InARepoMappingHierarchyLevel();
	mappingElement.setupElement(type, sourceValue, targetValue, dimensionContext);
	mappingElement.m_hierarchyContext = hierarchyContext;
	mappingElement.addIgnoredKey("HierarchyName");
	mappingElement.addIgnoredKey("OrderedStructureMemberNames");
	return mappingElement;
};
oFF.InARepoMappingHierarchyLevel.prototype.m_hierarchyContext = null;
oFF.InARepoMappingHierarchyLevel.prototype.apply = function(key, value, context)
{
	let levelContext = oFF.XStringUtils.concatenate5("[", this.getContext(), "].[", this.m_hierarchyContext, "]");
	if (oFF.XPattern.matches(value, oFF.XStringUtils.concatenate4(levelContext, ".[", this.getSourceValue(), "].*")))
	{
		return oFF.XString.replace(value, oFF.XStringUtils.concatenate3("[", this.getSourceValue(), "]"), oFF.XStringUtils.concatenate3("[", this.getTargetValue(), "]"));
	}
	return null;
};
oFF.InARepoMappingHierarchyLevel.prototype.isApplicable = function(key, context)
{
	return oFF.InARepoMappingElement.prototype.isApplicable.call( this , key, context) && this.getContext() !== null && oFF.notNull(this.m_hierarchyContext);
};
oFF.InARepoMappingHierarchyLevel.prototype.releaseObject = function()
{
	oFF.InARepoMappingElement.prototype.releaseObject.call( this );
	this.m_hierarchyContext = null;
};

oFF.InARepoMappingMeasure = function() {};
oFF.InARepoMappingMeasure.prototype = new oFF.InARepoMappingElement();
oFF.InARepoMappingMeasure.prototype._ff_c = "InARepoMappingMeasure";

oFF.InARepoMappingMeasure.createMeasureMapping = function(type, sourceValue, targetValue, context)
{
	let mappingElement = new oFF.InARepoMappingMeasure();
	mappingElement.setupElement(type, sourceValue, targetValue, context);
	mappingElement.addIgnoredKey("FieldName");
	mappingElement.addIgnoredKey("HierarchyName");
	return mappingElement;
};
oFF.InARepoMappingMeasure.prototype.isApplicable = function(key, context)
{
	if (context.getType().isTypeOf(oFF.InARepoMapperContextType.DIMENSION))
	{
		if (!context.getStructure().containsKey("MembersRepo") && !context.getType().isTypeOf(oFF.InARepoMapperContextType.VARIANCE_MEMBER))
		{
			return false;
		}
		if (this.getContext() !== null && !oFF.XString.isEqual(context.getValue(), this.getContext()))
		{
			return false;
		}
	}
	return oFF.InARepoMappingElement.prototype.isApplicable.call( this , key, context);
};

oFF.QInAComponentContainer = function() {};
oFF.QInAComponentContainer.prototype = new oFF.DfNameObject();
oFF.QInAComponentContainer.prototype._ff_c = "QInAComponentContainer";

oFF.QInAComponentContainer.create = function(type)
{
	let newObj = new oFF.QInAComponentContainer();
	newObj._setupInternal(type.getName());
	newObj.m_type = type;
	newObj.m_components = oFF.XList.create();
	return newObj;
};
oFF.QInAComponentContainer.prototype.m_components = null;
oFF.QInAComponentContainer.prototype.m_type = null;
oFF.QInAComponentContainer.prototype.add = function(component)
{
	oFF.XBooleanUtils.checkFalse(this.m_components.contains(component), "Container already exists");
	this.m_components.add(component);
};
oFF.QInAComponentContainer.prototype.get = function(inaImportElement)
{
	let size = this.m_components.size();
	let result = null;
	if (size > 1)
	{
		for (let i = 0; i < size; i++)
		{
			let currentComponent = this.m_components.get(i);
			if (currentComponent.isMatching(inaImportElement))
			{
				result = currentComponent;
				break;
			}
		}
	}
	if (oFF.isNull(result) && size > 0)
	{
		result = this.m_components.get(0);
	}
	return result;
};
oFF.QInAComponentContainer.prototype.getComponentType = function()
{
	return this.m_type;
};
oFF.QInAComponentContainer.prototype.hasElements = function()
{
	return this.m_components.hasElements();
};
oFF.QInAComponentContainer.prototype.isEmpty = function()
{
	return this.m_components.isEmpty();
};
oFF.QInAComponentContainer.prototype.size = function()
{
	return this.m_components.size();
};

oFF.QInARepoAttribute = function() {};
oFF.QInARepoAttribute.prototype = new oFF.QInARepository();
oFF.QInARepoAttribute.prototype._ff_c = "QInARepoAttribute";

oFF.QInARepoAttribute.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let attribute = modelComponent;
	inaStructure.putString("Name", attribute.getName());
	let inaResultSetFields = inaStructure.putNewList("ResultSetFields");
	let resultSetFields = attribute.getResultSetFields();
	let len = resultSetFields.size();
	for (let i = 0; i < len; i++)
	{
		inaResultSetFields.addString(resultSetFields.get(i).getName());
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoAttribute.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ATTRIBUTE;
};
oFF.QInARepoAttribute.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = parentComponent;
	let name = inaStructure.getStringByKey("Name");
	let attribute = dimension.getAttributeByName(name);
	if (oFF.notNull(attribute))
	{
		let inaResultSetFields = inaStructure.getListByKey("ResultSetFields");
		if (oFF.notNull(inaResultSetFields))
		{
			let resultSetFields = attribute.getResultSetFields();
			resultSetFields.clear();
			let len = inaResultSetFields.size();
			for (let i = 0; i < len; i++)
			{
				let field = attribute.getFieldByName(inaResultSetFields.getStringAt(i));
				if (oFF.notNull(field))
				{
					resultSetFields.add(field);
				}
			}
		}
	}
	return attribute;
};

oFF.QInARepoAxesSettings = function() {};
oFF.QInARepoAxesSettings.prototype = new oFF.QInARepository();
oFF.QInARepoAxesSettings.prototype._ff_c = "QInARepoAxesSettings";

oFF.QInARepoAxesSettings.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let queryModel = modelComponent;
	let inaAxisStructureList = oFF.PrFactory.createList();
	let inaColumns = exporter.exportAxis(queryModel.getColumnsAxis(), null);
	inaAxisStructureList.add(inaColumns);
	let inaRows = exporter.exportAxis(queryModel.getRowsAxis(), null);
	inaAxisStructureList.add(inaRows);
	return inaAxisStructureList;
};
oFF.QInARepoAxesSettings.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	inaStructure.put("Elements", inaList);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoAxesSettings.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXES_SETTINGS;
};
oFF.QInARepoAxesSettings.prototype.getTagName = function()
{
	return "AxesRepo";
};
oFF.QInARepoAxesSettings.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaList))
	{
		let queryModel = context.getQueryModel();
		if (importer.m_capabilities.supportsZeroSuppression() || importer.m_capabilities.supportsNullZeroSuppression())
		{
			let all = oFF.AxisType.getAll();
			let allSize = all.size();
			for (let k = 0; k < allSize; k++)
			{
				let axis = queryModel.getAxisBase(all.get(k));
				if (oFF.notNull(axis))
				{
					axis.setSupportsZeroSuppression(true);
				}
			}
		}
		let len = inaList.size();
		for (let i = 0; i < len; i++)
		{
			importer.importAxis(inaList.getStructureAt(i), null, context);
		}
	}
	return null;
};
oFF.QInARepoAxesSettings.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoAxis = function() {};
oFF.QInARepoAxis.prototype = new oFF.QInARepository();
oFF.QInARepoAxis.prototype._ff_c = "QInARepoAxis";

oFF.QInARepoAxis.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let axis = modelComponent;
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(axis.getType()));
	inaStructure.putInteger("Type", oFF.QInAConverter.lookupAxisTypeInAInt(axis.getType()));
	let typeZeroSuppression = axis.getZeroSuppressionType();
	inaStructure.putInteger("ZeroSuppressionType", oFF.QInAConverter.lookupSuppressionTypeInA(typeZeroSuppression));
	let inaLayout = inaStructure.putNewList("Layout");
	for (let i = 0; i < axis.size(); i++)
	{
		let dimension = axis.getDimensionAt(i);
		if (!dimension.getTagging().contains(oFF.QTransientConstants.TAG_TRANSIENT_ROWS_AXIS) && !dimension.getTagging().contains(oFF.QTransientConstants.SECONDARY_MEASURE_DIMENSION_ON_COLUMN))
		{
			inaLayout.addString(dimension.getName());
		}
	}
	exporter.exportTotals(axis.getResultStructureController(), inaStructure);
	let nodeAlignment = axis.getLowerLevelNodeAlignment();
	if (oFF.notNull(nodeAlignment))
	{
		inaStructure.putString("LowerLevelNodeAlignment", oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA(nodeAlignment));
	}
	if (axis.isReadModeAndSuppressionSynchronized())
	{
		inaStructure.putBoolean("ReadmodeAndSuppressionSynchronized", true);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoAxis.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXIS;
};
oFF.QInARepoAxis.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let axisType;
	let axisTypeValue = inaStructure.getStringByKey("Axis");
	if (oFF.notNull(axisTypeValue))
	{
		axisType = oFF.QInAConverter.lookupAxisType(axisTypeValue);
	}
	else
	{
		let axisTypeIntValue = inaStructure.getIntegerByKey("Type");
		axisType = oFF.QInAConverter.lookupAxisTypeInt(axisTypeIntValue);
	}
	let axis = queryModel.getAxisBase(axisType);
	if (oFF.notNull(axis))
	{
		if (axis.supportsZeroSuppression())
		{
			let valueType = inaStructure.getIntegerByKeyExt("ZeroSuppressionType", 0);
			let suppressionType = oFF.QInAConverter.lookupSuppressionType(valueType);
			axis.setZeroSuppressionType(suppressionType);
		}
		let inaLayout = inaStructure.getListByKey("Layout");
		if (oFF.notNull(inaLayout))
		{
			axis.clear();
			let dimensionManagerBase = queryModel.getDimensionManagerBase();
			for (let i = 0; i < inaLayout.size(); i++)
			{
				let dimensionName = inaLayout.getStringAt(i);
				let dimension = dimensionManagerBase.getDimensionByNameInternal(dimensionName);
				axis.addForRepoImport(dimension);
			}
		}
		importer.importTotals(inaStructure, axis.getResultStructureControllerBase(), context);
		if (inaStructure.containsKey("LowerLevelNodeAlignment"))
		{
			axis.setLowerLevelNodeAlignment(oFF.QInAConverter.lookupLowerLevelNodeAlignment(inaStructure.getStringByKey("LowerLevelNodeAlignment")));
		}
		axis.setReadModeAndSuppressionSynchronized(inaStructure.getBooleanByKeyExt("ReadmodeAndSuppressionSynchronized", false));
	}
	return axis;
};

oFF.QInARepoBlendableQueryManager = function() {};
oFF.QInARepoBlendableQueryManager.prototype = new oFF.QInARepository();
oFF.QInARepoBlendableQueryManager.prototype._ff_c = "QInARepoBlendableQueryManager";

oFF.QInARepoBlendableQueryManager.exportBlendedDimensionAxis = function(blendableQueryManager, inaDimensionOrderMap, axisType)
{
	let inaRowDimensionOrder = inaDimensionOrderMap.putNewList(axisType.getName());
	let blendedDimensionInfos = blendableQueryManager.getBlendedDimensionsByAxis(axisType).getIterator();
	while (blendedDimensionInfos.hasNext())
	{
		let blendedDimensionInfo = blendedDimensionInfos.next();
		let inaRowDimension = inaRowDimensionOrder.addNewStructure();
		inaRowDimension.putString("DatasetId", blendedDimensionInfo.getDatasetId());
		inaRowDimension.putString("DimensionName", blendedDimensionInfo.getDimensionName());
		if (blendedDimensionInfo.getInitialDrillLevel() !== null)
		{
			inaRowDimension.putInteger("InitialDrillLevel", blendedDimensionInfo.getInitialDrillLevel().getInteger());
		}
	}
};
oFF.QInARepoBlendableQueryManager.exportDimensionSorts = function(inaStructure, blendableDimensionSorts)
{
	let inaBlendableDimensionSorts = inaStructure.putNewList("BlendableDimensionSorts");
	let blendableDimensionSortsIterator = blendableDimensionSorts.getIterator();
	while (blendableDimensionSortsIterator.hasNext())
	{
		let dimensionFieldSort = blendableDimensionSortsIterator.next();
		let inaBlendableDimensionSort = oFF.PrStructure.create();
		inaBlendableDimensionSort.putString("FieldName", dimensionFieldSort.getFieldName());
		inaBlendableDimensionSort.putString("DatasetId", dimensionFieldSort.getDatasetId());
		inaBlendableDimensionSort.putInteger("SortDirection", oFF.QInAConverter.lookupSortDirectionInA(dimensionFieldSort.getSortDirection()));
		inaBlendableDimensionSort.putBoolean("PreserveGrouping", dimensionFieldSort.getPreserveGrouping());
		inaBlendableDimensionSort.putString("Locale", dimensionFieldSort.getContextLanguage());
		let customSort = dimensionFieldSort.getCustomSortDefinition();
		if (oFF.notNull(customSort))
		{
			let customSortStructure = inaBlendableDimensionSort.putNewStructure("CustomSort");
			customSortStructure.putString("Name", customSort.getName());
			customSortStructure.putString("DatasetId", customSort.getDatasetId());
			customSortStructure.putString("ID", customSort.getDimensionId());
			customSortStructure.putString("HierarchyId", customSort.getHierarchyId());
			customSortStructure.putString("Id", customSort.getId());
			let inaSortFromStart = customSortStructure.putNewList("SortFromStart");
			oFF.XCollectionUtils.forEach(customSort.getBlendedSortFromStart(), (sortFromStart) => {
				let inaSort = inaSortFromStart.addNewStructure();
				inaSort.putString("Name", sortFromStart.getName());
				inaSort.putString("DatasetId", sortFromStart.getDatasetId());
			});
			let inaSortFromEnd = customSortStructure.putNewList("SortFromEnd");
			oFF.XCollectionUtils.forEach(customSort.getBlendedSortFromEnd(), (sortFromStart) => {
				let inaSort = inaSortFromEnd.addNewStructure();
				inaSort.putString("Name", sortFromStart.getName());
				inaSort.putString("DatasetId", sortFromStart.getDatasetId());
			});
			let inaMovedNodes = customSortStructure.putNewList("SortMovedNodes");
			oFF.XCollectionUtils.forEach(customSort.getBlendedMovedNodes(), (sortFromStart) => {
				let inaSort = inaMovedNodes.addNewStructure();
				inaSort.putString("Name", sortFromStart.getName());
				inaSort.putString("DatasetId", sortFromStart.getDatasetId());
			});
		}
		inaBlendableDimensionSort.putString("AutoLimiterSort", dimensionFieldSort.getAutoLimiterSort());
		inaBlendableDimensionSort.putBoolean("IsDisplayedAsId", dimensionFieldSort.isDisplayedAsId());
		inaBlendableDimensionSort.putString("ID", dimensionFieldSort.getDimensionId());
		inaBlendableDimensionSorts.add(inaBlendableDimensionSort);
	}
};
oFF.QInARepoBlendableQueryManager.exportDrillOperation = function(blendedDrillOperation, inaDrillOperation)
{
	inaDrillOperation.putString("DimensionName", blendedDrillOperation.getDimensionName());
	inaDrillOperation.putString("DatasetId", blendedDrillOperation.getDatasetId());
	let inADrillState = oFF.QInAConverter.lookupDrillStateInA(blendedDrillOperation.getDrillState());
	inaDrillOperation.putString("DrillState", inADrillState);
	let inaDrillPathElements = inaDrillOperation.putNewList("DrillPathElements");
	let blendedDrillPathInfosIter = blendedDrillOperation.getBlendedDrillPathElementInfos().getIterator();
	while (blendedDrillPathInfosIter.hasNext())
	{
		let blendedDrillPathElementInfo = blendedDrillPathInfosIter.next();
		let inaBlendedDrillPathElementInfo = inaDrillPathElements.addNewStructure();
		inaBlendedDrillPathElementInfo.putString("DatasetId", blendedDrillPathElementInfo.getDatasetId());
		inaBlendedDrillPathElementInfo.putString("DimensionName", blendedDrillPathElementInfo.getDimensionName());
		inaBlendedDrillPathElementInfo.putString("Member", blendedDrillPathElementInfo.getDrillMember());
	}
};
oFF.QInARepoBlendableQueryManager.exportDrillOperations = function(inaStructure, blendableQueryManager)
{
	let blendedDrillOperationsIter = blendableQueryManager.getBlendedDrillOperations().getIterator();
	let inaDrillOperations = inaStructure.putNewList("DrillOperations");
	while (blendedDrillOperationsIter.hasNext())
	{
		let blendedDrillOperation = blendedDrillOperationsIter.next();
		let inaDrillOperation = inaDrillOperations.addNewStructure();
		oFF.QInARepoBlendableQueryManager.exportDrillOperation(blendedDrillOperation, inaDrillOperation);
	}
	let blendedZoomDrillsIter = blendableQueryManager.getBlendedZoomDrills().getIterator();
	let inaZoomDrills = inaStructure.putNewList("ZoomDrills");
	while (blendedZoomDrillsIter.hasNext())
	{
		let blendedZoomDrill = blendedZoomDrillsIter.next();
		let inaDrillOperation = inaZoomDrills.addNewStructure();
		inaDrillOperation.putBoolean("IsHideRoots", blendedZoomDrill.isHideRoots());
		oFF.QInARepoBlendableQueryManager.exportDrillOperation(blendedZoomDrill, inaDrillOperation);
	}
};
oFF.QInARepoBlendableQueryManager.exportMeasureMemberSort = function(inaStructure, blendableMeasureMemberSort, secondaryQueryManagers)
{
	let inaBlendableMeasureMemberSort = inaStructure.putNewStructure("BlendableMeasureMemberSort");
	inaBlendableMeasureMemberSort.putString("MeasureMemberName", blendableMeasureMemberSort.getMeasureMemberName());
	inaBlendableMeasureMemberSort.putString("DatasetId", blendableMeasureMemberSort.getDatasetId());
	inaBlendableMeasureMemberSort.putBoolean("PrimaryBlendableBlended", blendableMeasureMemberSort.isPrimaryMeasureBlended());
	inaBlendableMeasureMemberSort.putInteger("SortDirection", oFF.QInAConverter.lookupSortDirectionInA(blendableMeasureMemberSort.getSortDirection()));
	inaBlendableMeasureMemberSort.putString("SecondaryMeasureName", blendableMeasureMemberSort.getSecondaryMeasureName());
	inaBlendableMeasureMemberSort.putString("SecondaryDatasetId", blendableMeasureMemberSort.getSecondaryDatasetId());
	inaBlendableMeasureMemberSort.putBoolean("SecondaryMeasureBlended", blendableMeasureMemberSort.isSecondaryMeasureBlended());
	inaBlendableMeasureMemberSort.putString("VersionElementId", blendableMeasureMemberSort.getVersionElementId());
	let versionDimension = blendableMeasureMemberSort.getVersionDimension();
	if (oFF.notNull(versionDimension))
	{
		let inaVersionDimension = inaBlendableMeasureMemberSort.putNewStructure("VersionDimension");
		inaVersionDimension.putString("DatasetId", versionDimension.getQueryModel().getDatasetId());
		inaVersionDimension.putString("Name", versionDimension.getName());
	}
	inaBlendableMeasureMemberSort.putBoolean("PreserveGrouping", blendableMeasureMemberSort.isPreserveGrouping());
	let secondaryVersionDimensionMembers = blendableMeasureMemberSort.getSecondaryVersionDimensionMembers();
	if (secondaryVersionDimensionMembers.size() > 0)
	{
		let secondaryVersionDimensionMembersList = inaBlendableMeasureMemberSort.putNewList("SecondaryVersionDimension");
		for (let i = 0; i < secondaryQueryManagers.size(); i++)
		{
			let secondaryDatasetId = secondaryQueryManagers.get(i).getQueryModel().getDatasetId();
			let secondaryVersionDimensionMember = secondaryVersionDimensionMembers.getByKey(secondaryDatasetId);
			let secondaryVersionDimensionMemberStructure = secondaryVersionDimensionMembersList.addNewStructure();
			secondaryVersionDimensionMemberStructure.putString("DatasetId", secondaryDatasetId);
			secondaryVersionDimensionMemberStructure.putString("VersionElementId", secondaryVersionDimensionMember);
		}
	}
	let relatedElementsSortList = blendableMeasureMemberSort.getRelatedElementsList();
	if (relatedElementsSortList.size() > 0)
	{
		let relatedElementsList = inaBlendableMeasureMemberSort.putNewList("RelatedElementsSortList");
		for (let i = 0; i < relatedElementsSortList.size(); i++)
		{
			let datasetId = relatedElementsSortList.get(i).getDatasetId();
			let dimensionId = relatedElementsSortList.get(i).getDimensionId();
			let memberId = relatedElementsSortList.get(i).getMemberId();
			let relatedElementsListStructure = relatedElementsList.addNewStructure();
			relatedElementsListStructure.putString("RelatedElementDataset", datasetId);
			relatedElementsListStructure.putString("RelatedElementDimension", dimensionId);
			relatedElementsListStructure.putString("RelatedElementDimensionMember", memberId);
		}
	}
};
oFF.QInARepoBlendableQueryManager.exportQueryModelLinkSettingStructureList = function(inaQueryModelLinkSettings, blendableQueryManager, primaryDatasetId, secondaryDatasetId)
{
	let inaQueryModelLinkSetting = inaQueryModelLinkSettings.addNewStructure();
	oFF.QInARepoBlendableQueryManager.exportQueryModelLinkSettings(blendableQueryManager, primaryDatasetId, secondaryDatasetId, inaQueryModelLinkSetting);
};
oFF.QInARepoBlendableQueryManager.exportQueryModelLinkSettings = function(blendableQueryManager, primaryDatasetId, secondaryDatasetId, inaQueryModelLinkSetting)
{
	inaQueryModelLinkSetting.putString("FirstModelName", primaryDatasetId);
	inaQueryModelLinkSetting.putString("SecondModelName", secondaryDatasetId);
	inaQueryModelLinkSetting.putString("LinkType", blendableQueryManager.getLinkType(secondaryDatasetId).getName());
	inaQueryModelLinkSetting.putString("UnlinkedDimensionJoinType", blendableQueryManager.getUnlinkedDimensionJoinType(secondaryDatasetId).getName());
	inaQueryModelLinkSetting.putBoolean("SkipFilterValidation", blendableQueryManager.skipFilterValidationByDatasetId(secondaryDatasetId));
	let inaActiveLinkDimensionNames = inaQueryModelLinkSetting.putNewList("ActiveDimensionLinks");
	let activeLinkDimensionNamesIter = blendableQueryManager.getActivePrimaryLinkDimensionNamesSettings(secondaryDatasetId).getIterator();
	while (activeLinkDimensionNamesIter.hasNext())
	{
		let activeLinkDimensionName = activeLinkDimensionNamesIter.next();
		inaActiveLinkDimensionNames.addString(activeLinkDimensionName);
	}
};
oFF.QInARepoBlendableQueryManager.exportRankSettings = function(inaRankSettings, rankSettings)
{
	inaRankSettings.putString("MeasureMemberName", rankSettings.getMeasure());
	inaRankSettings.putString("MeasureMemberDatasetId", rankSettings.getPrimaryMeasureDatasetId());
	inaRankSettings.putBoolean("PrimaryBlendableBlended", rankSettings.isBlendedPrimaryMeasure());
	inaRankSettings.putString("SecondaryMeasureName", rankSettings.getSecondaryMeasure());
	inaRankSettings.putString("SecondaryDatasetId", rankSettings.getSecondaryMeasureDatasetId());
	inaRankSettings.putBoolean("SecondaryMeasureBlended", rankSettings.isBlendedSecondaryMeasure());
	inaRankSettings.putInteger("MaxRows", rankSettings.getMaxRows());
	inaRankSettings.putBoolean("ClientSideRanking", rankSettings.isUseClientSideRanking());
	inaRankSettings.putBoolean("RankOnAllDimensions", rankSettings.isRankOnAllDimensions());
	inaRankSettings.putBoolean("IsApplyRankingsWithoutReset", rankSettings.isApplyRankingsWithoutReset());
	inaRankSettings.putBoolean("PreserveSort", rankSettings.isPreserveSort());
	inaRankSettings.putBoolean("BreakGroup", rankSettings.isBreakGrouping());
	let inaDimensions = inaRankSettings.putNewList("Dimensions");
	let appliedDimensions = rankSettings.getAppliedDimensions();
	for (let i = 0; i < appliedDimensions.size(); i++)
	{
		let dimension = appliedDimensions.get(i);
		let inaDimension = inaDimensions.addNewStructure();
		inaDimension.putString("DatasetId", dimension.getQueryModel().getDatasetId());
		inaDimension.putString("Name", dimension.getName());
	}
	if (rankSettings.getComparisonOperator() !== null)
	{
		inaRankSettings.putString("Comparison", rankSettings.getComparisonOperator().getName());
	}
	inaRankSettings.putString("VersionElementId", rankSettings.getVersionElementId());
	let versionDimension = rankSettings.getVersionDimension();
	if (oFF.notNull(versionDimension))
	{
		let inaVersionDimension = inaRankSettings.putNewStructure("VersionDimension");
		inaVersionDimension.putString("DatasetId", versionDimension.getQueryModel().getDatasetId());
		inaVersionDimension.putString("Name", versionDimension.getName());
	}
	inaRankSettings.putBoolean("UseDefaultSort", rankSettings.useDefaultSort());
};
oFF.QInARepoBlendableQueryManager.exportRankSettingsList = function(inaStructure, blendableQueryManager)
{
	let rankSettingsList = blendableQueryManager.getRankSettings();
	let inaRankSettingsList = inaStructure.putNewList("RankSettings");
	for (let i = 0; i < rankSettingsList.size(); i++)
	{
		oFF.QInARepoBlendableQueryManager.exportRankSettings(inaRankSettingsList.addNewStructure(), rankSettingsList.get(i));
	}
};
oFF.QInARepoBlendableQueryManager.exportSorts = function(inaStructure, blendableQueryManager)
{
	let blendableDimensionSorts = blendableQueryManager.getBlendableDimensionSorts();
	let primaryBlendableMeasureMemberSort = blendableQueryManager.getPrimaryBlendableMeasureMemberSort();
	let secondaryQueryManagers = blendableQueryManager.getSecondaryQueryManagers();
	if (blendableDimensionSorts.size() > 0)
	{
		oFF.QInARepoBlendableQueryManager.exportDimensionSorts(inaStructure, blendableDimensionSorts);
	}
	if (oFF.notNull(primaryBlendableMeasureMemberSort))
	{
		oFF.QInARepoBlendableQueryManager.exportMeasureMemberSort(inaStructure, primaryBlendableMeasureMemberSort, secondaryQueryManagers);
	}
};
oFF.QInARepoBlendableQueryManager.exportZeroSuppressionTypes = function(inaStructure, blendableQueryManager)
{
	let zeroSuppressionTypeRows = blendableQueryManager.getBlendingZeroSuppressionType(oFF.AxisType.ROWS);
	if (oFF.notNull(zeroSuppressionTypeRows))
	{
		inaStructure.putString("ZeroSuppressionTypeRows", zeroSuppressionTypeRows.getName());
	}
	let zeroSuppressionTypeColumns = blendableQueryManager.getBlendingZeroSuppressionType(oFF.AxisType.COLUMNS);
	if (oFF.notNull(zeroSuppressionTypeColumns))
	{
		inaStructure.putString("ZeroSuppressionTypeColumns", zeroSuppressionTypeColumns.getName());
	}
};
oFF.QInARepoBlendableQueryManager.importBlendedDimensionInfoAxis = function(blendableQueryManager, inaDimensionOrderMap, axisType)
{
	let inaBlendedDimensionInfos = inaDimensionOrderMap.getListByKey(axisType.getName());
	if (oFF.notNull(inaBlendedDimensionInfos))
	{
		let inaBlendedDimensionInfosIter = inaBlendedDimensionInfos.getIterator();
		blendableQueryManager.clearBlendedDimensionInfosByAxis(axisType);
		while (inaBlendedDimensionInfosIter.hasNext())
		{
			let inaBlendedDimensionInfo = inaBlendedDimensionInfosIter.next().asStructure();
			let blendedDimensionInfo = blendableQueryManager.addBlendedDimensionInfoToAxis(axisType, inaBlendedDimensionInfo.getStringByKey("DatasetId"), inaBlendedDimensionInfo.getStringByKey("DimensionName"));
			if (inaBlendedDimensionInfo.containsKey("InitialDrillLevel"))
			{
				blendedDimensionInfo.setInitialDrillLevel(inaBlendedDimensionInfo.getIntegerByKey("InitialDrillLevel"));
			}
		}
	}
};
oFF.QInARepoBlendableQueryManager.importCustomMemberList = function(customSort, inaStructure, key, parentDatasetId)
{
	let inaList = inaStructure.getListByKey(key);
	let inaIterator = inaList.getIterator();
	while (inaIterator.hasNext())
	{
		let element = inaIterator.next();
		let memberName = null;
		let datasetId = null;
		if (element.isStructure())
		{
			let customMemberStructure = element.asStructure();
			memberName = customMemberStructure.getStringByKey("Name");
			datasetId = customMemberStructure.getStringByKey("DatasetId");
		}
		else if (element.isString())
		{
			memberName = element.asString().getString();
			datasetId = parentDatasetId;
		}
		if (oFF.notNull(memberName))
		{
			switch (key)
			{
				case "SortFromStart":
					customSort.addMemberToFromStartList(memberName, datasetId);
					break;

				case "SortFromEnd":
					customSort.addMemberToFromEndList(memberName, datasetId);
					break;

				case "SortMovedNodes":
					customSort.addMemberToMovedNodesList(memberName, datasetId);
					break;

				default:
			}
		}
	}
};
oFF.QInARepoBlendableQueryManager.importCustomSort = function(dimensionSort, inaBlendableCustomSort)
{
	if (oFF.isNull(inaBlendableCustomSort))
	{
		return;
	}
	let name = inaBlendableCustomSort.getStringByKey("Name");
	let datasetId = inaBlendableCustomSort.getStringByKey("DatasetId");
	let dimensionId = inaBlendableCustomSort.getStringByKey("ID");
	let hierarchyId = inaBlendableCustomSort.getStringByKey("HierarchyId");
	let id = inaBlendableCustomSort.getStringByKey("Id");
	let customSort = dimensionSort.createCustomSortDefinition(name, datasetId, dimensionId, hierarchyId, id);
	if (inaBlendableCustomSort.containsKey("SortFromStart"))
	{
		oFF.QInARepoBlendableQueryManager.importCustomMemberList(customSort, inaBlendableCustomSort, "SortFromStart", datasetId);
	}
	if (inaBlendableCustomSort.containsKey("SortFromEnd"))
	{
		oFF.QInARepoBlendableQueryManager.importCustomMemberList(customSort, inaBlendableCustomSort, "SortFromEnd", datasetId);
	}
	if (inaBlendableCustomSort.containsKey("SortMovedNodes"))
	{
		oFF.QInARepoBlendableQueryManager.importCustomMemberList(customSort, inaBlendableCustomSort, "SortMovedNodes", datasetId);
	}
};
oFF.QInARepoBlendableQueryManager.importDimensionSorts = function(blendableQueryManager, inaBlendableDimensionSorts)
{
	let inaBlendableDimensionSortsIterator = inaBlendableDimensionSorts.getIterator();
	while (inaBlendableDimensionSortsIterator.hasNext())
	{
		let inaBlendableDimensionSort = inaBlendableDimensionSortsIterator.next().asStructure();
		let fieldName = inaBlendableDimensionSort.getStringByKey("FieldName");
		let datasetId = inaBlendableDimensionSort.getStringByKey("DatasetId");
		let sortDirection = oFF.QInAConverter.lookupSortDirection(inaBlendableDimensionSort.getIntegerByKey("SortDirection"));
		let preserveGrouping = inaBlendableDimensionSort.getBooleanByKey("PreserveGrouping");
		let contextLanguage = inaBlendableDimensionSort.getStringByKey("Locale");
		let inaBlendableCustomSort = inaBlendableDimensionSort.getStructureByKey("CustomSort");
		let autoLimiterSort = inaBlendableDimensionSort.getStringByKey("AutoLimiterSort");
		let isDisplayedAsId = inaBlendableDimensionSort.getBooleanByKey("IsDisplayedAsId");
		let dimensionId = inaBlendableDimensionSort.getStringByKey("ID");
		let dimensionSort = blendableQueryManager.addBlendableDimensionSort(fieldName, datasetId, sortDirection, preserveGrouping, contextLanguage);
		oFF.QInARepoBlendableQueryManager.importCustomSort(dimensionSort, inaBlendableCustomSort);
		dimensionSort.setAutoLimiterSort(autoLimiterSort);
		dimensionSort.setIsDisplayedAsId(isDisplayedAsId);
		dimensionSort.setDimensionId(dimensionId);
	}
};
oFF.QInARepoBlendableQueryManager.importDrillOperation = function(inaZoomDrill, blendedDrillOperation)
{
	blendedDrillOperation.setDrillState(oFF.QInAConverter.lookupDrillStateOp(inaZoomDrill.getStringByKey("DrillState")));
	let inaDrillPathElements = inaZoomDrill.getListByKey("DrillPathElements");
	if (oFF.notNull(inaDrillPathElements))
	{
		let inaDrillPathElementsIter = inaDrillPathElements.getIterator();
		while (inaDrillPathElementsIter.hasNext())
		{
			let inaDrillPathElement = inaDrillPathElementsIter.next().asStructure();
			blendedDrillOperation.addBlendedDrillPathElementInfo(inaDrillPathElement.getStringByKey("DatasetId"), inaDrillPathElement.getStringByKey("DimensionName"), inaDrillPathElement.getStringByKey("Member"));
		}
	}
};
oFF.QInARepoBlendableQueryManager.importDrillOperations = function(blendableQueryManager, inaStructure)
{
	let inaDrillOperations = inaStructure.getListByKey("DrillOperations");
	blendableQueryManager.clearBlendedDrillOperations();
	if (oFF.notNull(inaDrillOperations))
	{
		let inaDrillOperationsIter = inaDrillOperations.getIterator();
		while (inaDrillOperationsIter.hasNext())
		{
			let inaDrillOperation = inaDrillOperationsIter.next().asStructure();
			let newBlendedDrillInfo = blendableQueryManager.addNewBlendedDrillOperation(inaDrillOperation.getStringByKey("DatasetId"), inaDrillOperation.getStringByKey("DimensionName"));
			oFF.QInARepoBlendableQueryManager.importDrillOperation(inaDrillOperation, newBlendedDrillInfo);
		}
	}
	let inaZoomDrills = inaStructure.getListByKey("ZoomDrills");
	blendableQueryManager.clearBlendedZoomDrills();
	if (oFF.notNull(inaZoomDrills))
	{
		let inaZoomDrillsIter = inaZoomDrills.getIterator();
		while (inaZoomDrillsIter.hasNext())
		{
			let inaZoomDrill = inaZoomDrillsIter.next().asStructure();
			let newZoomDrill = blendableQueryManager.addNewBlendedZoomDrill(inaZoomDrill.getStringByKey("DatasetId"), inaZoomDrill.getStringByKey("DimensionName"), inaZoomDrill.getBooleanByKeyExt("IsHideRoots", false));
			oFF.QInARepoBlendableQueryManager.importDrillOperation(inaZoomDrill, newZoomDrill);
		}
	}
};
oFF.QInARepoBlendableQueryManager.importMeasureMemberSort = function(blendableQueryManager, inaBlendableMeasureMemberSort)
{
	let blendableMeasureSort = oFF.QFactory.createBlendableMeasureSort(blendableQueryManager);
	blendableMeasureSort.setPrimaryMeasure(inaBlendableMeasureMemberSort.getStringByKey("MeasureMemberName"), inaBlendableMeasureMemberSort.getStringByKey("DatasetId"), inaBlendableMeasureMemberSort.getBooleanByKey("PrimaryBlendableBlended"));
	blendableMeasureSort.setSecondaryMeasure(inaBlendableMeasureMemberSort.getStringByKey("SecondaryMeasureName"), inaBlendableMeasureMemberSort.getStringByKey("SecondaryDatasetId"), inaBlendableMeasureMemberSort.getBooleanByKey("SecondaryMeasureBlended"));
	let sortDirection = oFF.QInAConverter.lookupSortDirection(inaBlendableMeasureMemberSort.getIntegerByKey("SortDirection"));
	blendableMeasureSort.setSortDirection(sortDirection);
	blendableMeasureSort.setPreserveGrouping(inaBlendableMeasureMemberSort.getBooleanByKey("PreserveGrouping"));
	blendableMeasureSort.setVersionElementId(inaBlendableMeasureMemberSort.getStringByKey("VersionElementId"));
	let inaVersionDimension = inaBlendableMeasureMemberSort.getStructureByKey("VersionDimension");
	if (oFF.notNull(inaVersionDimension))
	{
		let datasetId = inaVersionDimension.getStringByKey("DatasetId");
		let leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		if (oFF.notNull(leafQueryManager))
		{
			let dimensionName = inaVersionDimension.getStringByKey("Name");
			let dimension = leafQueryManager.getQueryModel().getDimensionByName(dimensionName);
			if (oFF.notNull(dimension))
			{
				blendableMeasureSort.setVersionDimension(dimension);
			}
		}
	}
	let secondaryVersionDimensionMembersList = inaBlendableMeasureMemberSort.getListByKey("SecondaryVersionDimension");
	if (oFF.notNull(secondaryVersionDimensionMembersList))
	{
		for (let i = 0; i < secondaryVersionDimensionMembersList.size(); i++)
		{
			let secondaryVersionDimensionMemberStructure = secondaryVersionDimensionMembersList.get(i).asStructure();
			let datasetId = secondaryVersionDimensionMemberStructure.getStringByKey("DatasetId");
			let elementId = secondaryVersionDimensionMemberStructure.getStringByKey("VersionElementId");
			blendableMeasureSort.addSecondaryVersionDimensionMember(datasetId, elementId);
		}
	}
	let relatedElementsMapList = inaBlendableMeasureMemberSort.getListByKey("RelatedElementsSortList");
	if (oFF.notNull(relatedElementsMapList))
	{
		for (let i = 0; i < relatedElementsMapList.size(); i++)
		{
			let relatedElementsMapStructure = relatedElementsMapList.getStructureAt(i).asStructure();
			let datasetId = relatedElementsMapStructure.getStringByKey("RelatedElementDataset");
			let dimensionId = relatedElementsMapStructure.getStringByKey("RelatedElementDimension");
			let memberId = relatedElementsMapStructure.getStringByKey("RelatedElementDimensionMember");
			blendableMeasureSort.addRelatedElement(datasetId, dimensionId, memberId);
		}
	}
	blendableQueryManager.setBlendableMeasureMemberSort(blendableMeasureSort);
};
oFF.QInARepoBlendableQueryManager.importQueryModelLinkSettingStructure = function(inaQueryModelLinkSetting, blendableQueryManager, secondaryDatasetId)
{
	blendableQueryManager.setLinkType(secondaryDatasetId, oFF.BlendingLinkType.lookup(inaQueryModelLinkSetting.getStringByKey("LinkType")));
	blendableQueryManager.setUnlinkedDimensionJoinType(secondaryDatasetId, oFF.UnlinkedDimensionJoinType.lookup(inaQueryModelLinkSetting.getStringByKey("UnlinkedDimensionJoinType")));
	blendableQueryManager.setSkipFilterValidationByDatasetId(inaQueryModelLinkSetting.getBooleanByKey("SkipFilterValidation"), secondaryDatasetId);
	let inaActiveLinkDimensionNames = inaQueryModelLinkSetting.getListByKey("ActiveDimensionLinks");
	if (oFF.notNull(inaActiveLinkDimensionNames))
	{
		let inaActiveLinkDimensionNamesIter = inaActiveLinkDimensionNames.getIterator();
		while (inaActiveLinkDimensionNamesIter.hasNext())
		{
			let inaActiveLinkDimensionName = inaActiveLinkDimensionNamesIter.next().asString().getString();
			if (blendableQueryManager.getPrimaryQueryManager().getQueryModel().getDimensionByName(inaActiveLinkDimensionName) !== null)
			{
				blendableQueryManager.addActivePrimaryLinkDimensionName(secondaryDatasetId, inaActiveLinkDimensionName);
			}
		}
	}
};
oFF.QInARepoBlendableQueryManager.importRankSettings = function(inaRankSettings, blendableQueryManager)
{
	let rankSettings = oFF.QFactory.createRankSettings();
	rankSettings.setMeasure(inaRankSettings.getStringByKey("MeasureMemberName"));
	rankSettings.setPrimaryDatasetId(inaRankSettings.getStringByKey("MeasureMemberDatasetId"));
	rankSettings.setIsBlendedPrimaryMeasure(inaRankSettings.getBooleanByKey("PrimaryBlendableBlended"));
	rankSettings.setSecondaryMeasure(inaRankSettings.getStringByKey("SecondaryMeasureName"));
	rankSettings.setSecondaryDatasetId(inaRankSettings.getStringByKey("SecondaryDatasetId"));
	rankSettings.setIsBlendedSecondaryMeasure(inaRankSettings.getBooleanByKey("SecondaryMeasureBlended"));
	rankSettings.setMaxRows(inaRankSettings.getIntegerByKey("MaxRows"));
	rankSettings.setUseClientSideRanking(inaRankSettings.getBooleanByKey("ClientSideRanking"));
	rankSettings.setIsRankOnAllDimensions(inaRankSettings.getBooleanByKey("RankOnAllDimensions"));
	rankSettings.setIsApplyRankingsWithoutReset(inaRankSettings.getBooleanByKey("IsApplyRankingsWithoutReset"));
	rankSettings.setPreserveSort(inaRankSettings.getBooleanByKey("PreserveSort"));
	rankSettings.setBreakGrouping(inaRankSettings.getBooleanByKeyExt("BreakGroup", true));
	let inaDimensions = inaRankSettings.getListByKey("Dimensions");
	let dimensionName;
	let datasetId;
	let leafQueryManager;
	let dimension;
	for (let i = 0; i < inaDimensions.size(); i++)
	{
		let inaDimension = inaDimensions.get(i).asStructure();
		datasetId = inaDimension.getStringByKey("DatasetId");
		leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		if (oFF.notNull(leafQueryManager))
		{
			dimensionName = inaDimension.getStringByKey("Name");
			dimension = leafQueryManager.getQueryModel().getDimensionByName(dimensionName);
			if (oFF.notNull(dimension))
			{
				rankSettings.addAppliedDimension(dimension);
			}
		}
	}
	let comparisonOperatorName = inaRankSettings.getStringByKey("Comparison");
	rankSettings.setComparisonOperator(oFF.ConditionComparisonOperator.lookupName(comparisonOperatorName));
	rankSettings.setVersionElementId(inaRankSettings.getStringByKey("VersionElementId"));
	let inaVersionDimension = inaRankSettings.getStructureByKey("VersionDimension");
	if (oFF.notNull(inaVersionDimension))
	{
		datasetId = inaVersionDimension.getStringByKey("DatasetId");
		leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		if (oFF.notNull(leafQueryManager))
		{
			dimensionName = inaVersionDimension.getStringByKey("Name");
			dimension = leafQueryManager.getQueryModel().getDimensionByName(dimensionName);
			if (oFF.notNull(dimension))
			{
				rankSettings.setVersionDimension(dimension);
			}
		}
	}
	rankSettings.setUseDefaultSort(inaRankSettings.getBooleanByKey("UseDefaultSort"));
	blendableQueryManager.addRankSettings(rankSettings);
};
oFF.QInARepoBlendableQueryManager.importRankSettingsList = function(inaStructure, blendableQueryManager)
{
	let rankSettingsList = inaStructure.getListByKey("RankSettings");
	blendableQueryManager.clearRankSettings();
	if (oFF.notNull(rankSettingsList))
	{
		for (let i = 0; i < rankSettingsList.size(); i++)
		{
			oFF.QInARepoBlendableQueryManager.importRankSettings(rankSettingsList.getStructureAt(i), blendableQueryManager);
		}
	}
};
oFF.QInARepoBlendableQueryManager.importSorts = function(inaStructure, blendableQueryManager)
{
	let inaBlendableDimensionSorts = inaStructure.getListByKey("BlendableDimensionSorts");
	let inaBlendableMeasureMemberSort = inaStructure.getStructureByKey("BlendableMeasureMemberSort");
	blendableQueryManager.clearBlendableDimensionSorts();
	blendableQueryManager.clearPrimaryBlendableMemberMeasureSort();
	if (oFF.notNull(inaBlendableDimensionSorts))
	{
		oFF.QInARepoBlendableQueryManager.importDimensionSorts(blendableQueryManager, inaBlendableDimensionSorts);
	}
	if (oFF.notNull(inaBlendableMeasureMemberSort))
	{
		oFF.QInARepoBlendableQueryManager.importMeasureMemberSort(blendableQueryManager, inaBlendableMeasureMemberSort);
	}
};
oFF.QInARepoBlendableQueryManager.importZeroSuppressionTypes = function(inaStructure, blendableQueryManager)
{
	let zeroSuppressionTypeRows = inaStructure.getStringByKey("ZeroSuppressionTypeRows");
	if (oFF.notNull(zeroSuppressionTypeRows))
	{
		blendableQueryManager.setBlendingZeroSuppressionType(oFF.AxisType.ROWS, oFF.ZeroSuppressionType.lookup(zeroSuppressionTypeRows));
	}
	let zeroSuppressionTypeColumns = inaStructure.getStringByKey("ZeroSuppressionTypeColumns");
	if (oFF.notNull(zeroSuppressionTypeColumns))
	{
		blendableQueryManager.setBlendingZeroSuppressionType(oFF.AxisType.COLUMNS, oFF.ZeroSuppressionType.lookup(zeroSuppressionTypeColumns));
	}
};
oFF.QInARepoBlendableQueryManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let blendableQueryManager = modelComponent;
	let primaryQueryManager = blendableQueryManager.getPrimaryQueryManager();
	let primaryDatasetId = primaryQueryManager.getQueryModel().getDatasetId();
	inaStructure.putString("Name", blendableQueryManager.getName());
	let inaPrimaryQueryManager = inaStructure.putNewStructure("PrimaryQueryManager");
	inaPrimaryQueryManager.putString("Name", primaryQueryManager.getName());
	inaPrimaryQueryManager.putString("DatasetId", primaryDatasetId);
	inaPrimaryQueryManager.put("Query", primaryQueryManager.getQueryModel().serializeToElement(exporter.getOriginalMode()));
	inaPrimaryQueryManager.putBoolean("isAllMemberOrFsicEnabled", blendableQueryManager.getAllMembersOrFsicEnabled(primaryQueryManager.getQueryModel().getDatasetId()));
	inaStructure.putString("StorageName", blendableQueryManager.getClientQueryObjectStorageName());
	let inaSecondaryQueryManagers = inaStructure.putNewList("QueryManagers");
	let inaQueryModelLinkSettings = inaStructure.putNewList("QueryModelLinkSettingsList");
	let queryModelLinkSettingsIter = blendableQueryManager.getAllQueryModelLinkSettings().getIterator();
	while (queryModelLinkSettingsIter.hasNext())
	{
		let queryModelLinkSettings = queryModelLinkSettingsIter.next();
		let secondaryDatasetId = queryModelLinkSettings.getSecondDatasetId();
		let secondaryQueryManager = blendableQueryManager.getQueryManagerByDatasetId(secondaryDatasetId);
		let inaQueryManagerItem = inaSecondaryQueryManagers.addNewStructure();
		inaQueryManagerItem.putString("DatasetId", secondaryDatasetId);
		inaQueryManagerItem.putString("Name", secondaryQueryManager.getName());
		inaQueryManagerItem.put("Query", secondaryQueryManager.getQueryModel().serializeToElement(exporter.getOriginalMode()));
		inaQueryManagerItem.putBoolean("isAllMemberOrFsicEnabled", blendableQueryManager.getAllMembersOrFsicEnabled(secondaryQueryManager.getQueryModel().getDatasetId()));
		oFF.QInARepoBlendableQueryManager.exportQueryModelLinkSettingStructureList(inaQueryModelLinkSettings, blendableQueryManager, primaryDatasetId, secondaryDatasetId);
	}
	let inaBlendedMeasures = inaStructure.putNewList("PrimaryBlendedMeasures");
	let blendedMeasuresIter = blendableQueryManager.getPrimaryBlendedMeasures().getIterator();
	while (blendedMeasuresIter.hasNext())
	{
		let blendedMeasure = blendedMeasuresIter.next();
		exporter.exportComponent(blendedMeasure.getMemberType(), blendedMeasure, inaBlendedMeasures.addNewStructure(), flags);
	}
	let inaDimensionOrderMap = inaStructure.putNewStructure("DimensionOrder");
	oFF.QInARepoBlendableQueryManager.exportBlendedDimensionAxis(blendableQueryManager, inaDimensionOrderMap, oFF.AxisType.ROWS);
	oFF.QInARepoBlendableQueryManager.exportBlendedDimensionAxis(blendableQueryManager, inaDimensionOrderMap, oFF.AxisType.COLUMNS);
	oFF.QInARepoBlendableQueryManager.exportDrillOperations(inaStructure, blendableQueryManager);
	oFF.QInARepoBlendableQueryManager.exportSorts(inaStructure, blendableQueryManager);
	oFF.QInARepoBlendableQueryManager.exportRankSettingsList(inaStructure, blendableQueryManager);
	let formulaExceptions = oFF.PrFactory.createList();
	let formulaExceptionsIter = blendableQueryManager.getFormulaExceptions().getIterator();
	while (formulaExceptionsIter.hasNext())
	{
		let formulaException = formulaExceptionsIter.next();
		let inaException = oFF.PrFactory.createStructure();
		exporter.exportFormulaException(formulaException, inaException);
		inaException.putString("DatasetId", formulaException.getQueryModel().getDatasetId());
		formulaExceptions.add(inaException);
	}
	inaStructure.put("FormulaExceptions", formulaExceptions);
	inaStructure.putBoolean("BlendingRestrictionsEnabled", blendableQueryManager.isBlendingRestrictionsEnabled());
	inaStructure.putBoolean("SupportsDrillOnBlendNodeOnly", blendableQueryManager.supportsDrillOnBlendNodeOnly());
	inaStructure.putBoolean("FormulaExceptionResultHidden", blendableQueryManager.isFormulaExceptionResultHidden());
	inaStructure.putBoolean("PreserveAttributeLayout", blendableQueryManager.isPreserveAttributeLayout());
	inaStructure.putBoolean("SupportsConcurrentDimensionAndMeasureSorting", blendableQueryManager.supportsConcurrentDimensionAndMeasureSorting());
	inaStructure.putBoolean("IncludesDisplayKeyInMeasureDimension", blendableQueryManager.includesDisplayKeyInMeasureDimension());
	inaStructure.putBoolean("SupportsAccountSecondaryMeasureDimensionOnNoneAxis", blendableQueryManager.supportsAccountSecondaryMeasureDimensionOnNoneAxis());
	inaStructure.putBoolean("IsDefaultOrder", blendableQueryManager.isDefaultOrder());
	oFF.QInARepoBlendableQueryManager.exportZeroSuppressionTypes(inaStructure, blendableQueryManager);
	return inaStructure;
};
oFF.QInARepoBlendableQueryManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER;
};
oFF.QInARepoBlendableQueryManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let blendableQueryManager = modelComponent;
	let inaPrimaryQueryManager = inaStructure.getStructureByKey("PrimaryQueryManager");
	let primaryDatasetId = inaPrimaryQueryManager.getStringByKey("DatasetId");
	let primaryQueryManager = blendableQueryManager.getPrimaryQueryManager();
	if (oFF.isNull(primaryQueryManager) || !oFF.XString.isEqual(primaryQueryManager.getQueryModel().getDatasetId(), primaryDatasetId))
	{
		primaryQueryManager = null;
		let primarySharedQueryManager = blendableQueryManager.getOlapEnv().getSharedQueryManager(primaryDatasetId);
		if (oFF.notNull(primarySharedQueryManager))
		{
			primaryQueryManager = primarySharedQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
			blendableQueryManager.setPrimaryQueryManager(primaryQueryManager);
			primaryQueryManager.setClientQueryObjectStorageName(blendableQueryManager.getClientQueryObjectStorageName());
		}
	}
	if (oFF.notNull(primaryQueryManager))
	{
		blendableQueryManager.setAllMembersOrFsicEnabled(primaryQueryManager.getQueryModel().getDatasetId(), inaPrimaryQueryManager.getBooleanByKey("isAllMemberOrFsicEnabled"));
		primaryQueryManager.getQueryModel().deserializeFromElementExt(importer.getOriginalMode(), inaPrimaryQueryManager.getStructureByKey("Query"));
	}
	let secondaryOrphanedQueryManagers = oFF.XHashSetOfString.create();
	let secondaryQueryManagersIter = blendableQueryManager.getSecondaryQueryManagers().getIterator();
	while (secondaryQueryManagersIter.hasNext())
	{
		secondaryOrphanedQueryManagers.add(secondaryQueryManagersIter.next().getQueryModel().getDatasetId());
	}
	blendableQueryManager.clearQueryModelLinkSettings();
	let inaSecondaryQueryManagers = inaStructure.getListByKey("QueryManagers");
	let inaQueryModelLinkSettingsList = inaStructure.getListByKey("QueryModelLinkSettingsList");
	let inaQueryManagerItem;
	let inaQueryModelLinkSettings;
	let inaQueryManagersIter;
	let secondaryDatasetId;
	if (oFF.notNull(inaQueryModelLinkSettingsList))
	{
		let inaQueryModelLinkSettingsIter = inaQueryModelLinkSettingsList.getIterator();
		while (inaQueryModelLinkSettingsIter.hasNext())
		{
			inaQueryModelLinkSettings = inaQueryModelLinkSettingsIter.next().asStructure();
			secondaryDatasetId = inaQueryModelLinkSettings.getStringByKey("SecondModelName");
			inaQueryManagersIter = inaSecondaryQueryManagers.getIterator();
			while (inaQueryManagersIter.hasNext())
			{
				inaQueryManagerItem = inaQueryManagersIter.next().asStructure();
				if (oFF.XString.isEqual(secondaryDatasetId, inaQueryManagerItem.getStringByKey("DatasetId")))
				{
					this.importSecondaryModel(importer, blendableQueryManager, inaQueryModelLinkSettings, inaQueryManagerItem, inaQueryModelLinkSettings.getStringByKey("SecondModelName"), inaQueryManagerItem.getBooleanByKey("isAllMemberOrFsicEnabled"));
					secondaryOrphanedQueryManagers.removeElement(secondaryDatasetId);
					break;
				}
			}
		}
	}
	else
	{
		let inaQueryModelLinkSettingsMap = inaStructure.getStructureByKey("QueryModelLinkSettings");
		if (oFF.notNull(inaSecondaryQueryManagers))
		{
			inaQueryManagersIter = inaSecondaryQueryManagers.getIterator();
			while (inaQueryManagersIter.hasNext())
			{
				inaQueryManagerItem = inaQueryManagersIter.next().asStructure();
				secondaryDatasetId = inaQueryManagerItem.getStringByKey("DatasetId");
				inaQueryModelLinkSettings = inaQueryModelLinkSettingsMap.getStructureByKey(secondaryDatasetId);
				this.importSecondaryModel(importer, blendableQueryManager, inaQueryModelLinkSettings, inaQueryManagerItem, secondaryDatasetId, false);
				secondaryOrphanedQueryManagers.removeElement(secondaryDatasetId);
			}
		}
	}
	let secondaryOrphanedQueryManagersIter = secondaryOrphanedQueryManagers.getIterator();
	while (secondaryOrphanedQueryManagersIter.hasNext())
	{
		blendableQueryManager.removeSecondaryQueryManager(secondaryOrphanedQueryManagersIter.next());
	}
	let primaryLeafQueryModel = blendableQueryManager.getPrimaryQueryManager().getQueryModel();
	let primaryLeafMeasureFilter = oFF.QFilterUtil.getLinkedFilterOrDynamicFilterForDimension(primaryLeafQueryModel.getPrimaryCalculationDimension());
	blendableQueryManager.clearPrimaryBlendedMeasures();
	let inaBlendedMeasures = inaStructure.getListByKey("PrimaryBlendedMeasures");
	if (oFF.notNull(inaBlendedMeasures))
	{
		let inaBlendedMeasuresIter = inaBlendedMeasures.getIterator();
		while (inaBlendedMeasuresIter.hasNext())
		{
			let inaBlendedMeasure = inaBlendedMeasuresIter.next();
			let memberType = oFF.QInAConverter.lookupMeasureStructureMemberType(inaBlendedMeasure.getStringByKey("MemberType"));
			let member = importer.importComponent(memberType, inaBlendedMeasure, null, blendableQueryManager.getQueryModel().getPrimaryCalculationDimension(), blendableQueryManager.getQueryModel());
			if (blendableQueryManager.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER) && oFF.notNull(primaryLeafMeasureFilter))
			{
				let element = primaryLeafMeasureFilter.addNewCartesianElement();
				element.setLowString(member.getAliasOrMemberName());
			}
			else
			{
				blendableQueryManager.addPrimaryBlendedMeasure(member);
			}
		}
	}
	oFF.QInARepoBlendableQueryManager.importBlendedDimensionInfoAxis(blendableQueryManager, inaStructure.getStructureByKey("DimensionOrder"), oFF.AxisType.ROWS);
	oFF.QInARepoBlendableQueryManager.importBlendedDimensionInfoAxis(blendableQueryManager, inaStructure.getStructureByKey("DimensionOrder"), oFF.AxisType.COLUMNS);
	oFF.QInARepoBlendableQueryManager.importDrillOperations(blendableQueryManager, inaStructure);
	oFF.QInARepoBlendableQueryManager.importSorts(inaStructure, blendableQueryManager);
	oFF.QInARepoBlendableQueryManager.importRankSettingsList(inaStructure, blendableQueryManager);
	blendableQueryManager.clearFormulaExceptions();
	let inaFormulaExceptionsList = inaStructure.getListByKey("FormulaExceptions");
	if (oFF.notNull(inaFormulaExceptionsList))
	{
		for (let j = 0; j < inaFormulaExceptionsList.size(); j++)
		{
			let inaFormulaException = inaFormulaExceptionsList.getStructureAt(j);
			let formulaExceptionQueryManager = blendableQueryManager.getQueryManagerByDatasetId(inaFormulaException.getStringByKey("DatasetId"));
			let formulaException = importer.importFormulaException(inaFormulaException, null, null, formulaExceptionQueryManager.getQueryModel());
			blendableQueryManager.addFormulaException(formulaException);
		}
	}
	blendableQueryManager.setBlendingRestrictionsEnabled(inaStructure.getBooleanByKeyExt("BlendingRestrictionsEnabled", false));
	blendableQueryManager.setSupportsDrillOnBlendNodeOnly(inaStructure.getBooleanByKeyExt("SupportsDrillOnBlendNodeOnly", false));
	blendableQueryManager.setFormulaExceptionResultHidden(inaStructure.getBooleanByKeyExt("FormulaExceptionResultHidden", false));
	blendableQueryManager.setPreserveAttributeLayout(inaStructure.getBooleanByKeyExt("PreserveAttributeLayout", false));
	blendableQueryManager.setSupportsConcurrentDimensionAndMeasureSorting(inaStructure.getBooleanByKeyExt("SupportsConcurrentDimensionAndMeasureSorting", false));
	blendableQueryManager.setIncludesDisplayKeyInMeasureDimension(inaStructure.getBooleanByKeyExt("IncludesDisplayKeyInMeasureDimension", false));
	blendableQueryManager.setIsDefaultOrder(inaStructure.getBooleanByKeyExt("IsDefaultOrder", false));
	blendableQueryManager.setSupportsAccountSecondaryMeasureDimensionOnNoneAxis(inaStructure.getBooleanByKeyExt("SupportsAccountSecondaryMeasureDimensionOnNoneAxis", false));
	oFF.QInARepoBlendableQueryManager.importZeroSuppressionTypes(inaStructure, blendableQueryManager);
	return null;
};
oFF.QInARepoBlendableQueryManager.prototype.importSecondaryModel = function(importer, blendableQueryManager, inaQueryModelLinkSettings, inaQueryManagerItem, secondaryDatasetId, isAllMembersOrFsicEnabled)
{
	let secondaryQueryManager = blendableQueryManager.getQueryManagerByDatasetId(secondaryDatasetId);
	if (oFF.isNull(secondaryQueryManager))
	{
		let sharedQueryManager = blendableQueryManager.getOlapEnv().getSharedQueryManager(secondaryDatasetId);
		if (oFF.notNull(sharedQueryManager))
		{
			secondaryQueryManager = sharedQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
			blendableQueryManager.addSecondaryQueryManager(secondaryQueryManager);
			secondaryQueryManager.setClientQueryObjectStorageName(blendableQueryManager.getClientQueryObjectStorageName());
		}
	}
	if (oFF.notNull(secondaryQueryManager))
	{
		blendableQueryManager.setAllMembersOrFsicEnabled(secondaryQueryManager.getQueryModel().getDatasetId(), isAllMembersOrFsicEnabled);
		secondaryQueryManager.getQueryModel().deserializeFromElementExt(importer.getOriginalMode(), inaQueryManagerItem.getStructureByKey("Query"));
		oFF.QInARepoBlendableQueryManager.importQueryModelLinkSettingStructure(inaQueryModelLinkSettings, blendableQueryManager, secondaryDatasetId);
	}
};

oFF.QInARepoCellContext = function() {};
oFF.QInARepoCellContext.prototype = new oFF.QInARepository();
oFF.QInARepoCellContext.prototype._ff_c = "QInARepoCellContext";

oFF.QInARepoCellContext.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let cellContext = modelComponent;
	let inaStructureLocal = inaStructure;
	if (oFF.isNull(inaStructureLocal))
	{
		inaStructureLocal = oFF.PrFactory.createStructure();
	}
	inaStructureLocal.putString("Name", cellContext.getName());
	if (cellContext.getRowIndex() > -1)
	{
		inaStructureLocal.putInteger("Row", cellContext.getRowIndex());
	}
	if (cellContext.getColumnIndex() > -1)
	{
		inaStructureLocal.putInteger("Column", cellContext.getColumnIndex());
	}
	inaStructureLocal.putBoolean("ExternalKeys", cellContext.isExternalKeys());
	inaStructureLocal.putBoolean("ComponentsExternal", cellContext.isComponentsExternal());
	inaStructureLocal.putBoolean("ComponentsInternal", cellContext.isComponentsInternal());
	let axisContextMap = cellContext.getAxisContexts();
	if (oFF.XCollectionUtils.hasElements(axisContextMap))
	{
		let contextPathList = inaStructureLocal.putNewList("CellContextPaths");
		let keys = axisContextMap.getKeysAsIterator();
		while (keys.hasNext())
		{
			let axisType = keys.next();
			let cellContextPath = axisContextMap.getByKey(axisType);
			if (oFF.XCollectionUtils.hasElements(cellContextPath))
			{
				let contextPathStructure = contextPathList.addNewStructure();
				contextPathStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(axisType));
				let contextMembersStructure = contextPathStructure.putNewList("CellContextMembers");
				let size = cellContextPath.size();
				for (let i = 0; i < size; i++)
				{
					contextMembersStructure.add(exporter.exportDrillPathElement(cellContextPath.get(i), true));
				}
			}
		}
	}
	return inaStructure;
};
oFF.QInARepoCellContext.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CELL_CONTEXT;
};
oFF.QInARepoCellContext.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let cellContext = null;
	let name = inaStructure.getStringByKey("Name");
	if (oFF.isNull(modelComponent))
	{
		cellContext = oFF.QCellContext._create(context, name, parentComponent);
	}
	else if (modelComponent.getOlapComponentType() === oFF.OlapComponentType.CELL_CONTEXT)
	{
		cellContext = modelComponent;
	}
	cellContext.setRowIndex(inaStructure.getIntegerByKeyExt("Row", -1));
	cellContext.setColumnIndex(inaStructure.getIntegerByKeyExt("Column", -1));
	cellContext.setExternalKeys(inaStructure.getBooleanByKeyExt("ExternalKeys", false));
	cellContext.setComponentsExternal(inaStructure.getBooleanByKeyExt("ComponentsExternal", false));
	cellContext.setComponentsInternal(inaStructure.getBooleanByKeyExt("ComponentsInternal", false));
	let contextPathListIna = inaStructure.getListByKey("CellContextPaths");
	if (!oFF.PrUtils.isListEmpty(contextPathListIna))
	{
		let size = contextPathListIna.size();
		for (let i = 0; i < size; i++)
		{
			let contextPathStructIna = contextPathListIna.getStructureAt(i);
			let axisType = oFF.QInAConverter.lookupAxisType(contextPathStructIna.getStringByKey("Axis"));
			let pathListInA = contextPathStructIna.getListByKey("CellContextMembers");
			let pathSize = pathListInA.size();
			let contextPath = oFF.XList.create();
			for (let j = 0; j < pathSize; j++)
			{
				let pathElementStruct = pathListInA.getStructureAt(j);
				contextPath.add(importer.importDrillPathElement(pathElementStruct, cellContext, context));
			}
			cellContext.setTupleContextForAxis(contextPath, axisType);
		}
	}
	return cellContext;
};

oFF.QInARepoCellContextManager = function() {};
oFF.QInARepoCellContextManager.prototype = new oFF.QInARepository();
oFF.QInARepoCellContextManager.prototype._ff_c = "QInARepoCellContextManager";

oFF.QInARepoCellContextManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let cellContextManager = modelComponent;
	let inaOperationsList = oFF.PrFactory.createList();
	for (let i = 0; i < cellContextManager.size(); i++)
	{
		inaOperationsList.add(exporter.exportCellContext(cellContextManager.get(i)));
	}
	return inaOperationsList;
};
oFF.QInARepoCellContextManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	if (oFF.notNull(inaList))
	{
		inaStructure.put("Elements", inaList);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoCellContextManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CELL_CONTEXT_MANAGER;
};
oFF.QInARepoCellContextManager.prototype.getTagName = function()
{
	return "CellContextRequests";
};
oFF.QInARepoCellContextManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (modelComponent.getOlapComponentType() === oFF.OlapComponentType.CELL_CONTEXT_MANAGER)
	{
		let cellContextManager = modelComponent;
		let size = inaList.size();
		cellContextManager.clear();
		for (let i = 0; i < size; i++)
		{
			cellContextManager.addCellContext(importer.importCellContext(inaList.getStructureAt(i), cellContextManager, context));
		}
	}
	return modelComponent;
};
oFF.QInARepoCellContextManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("Elements"))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoConditionManager = function() {};
oFF.QInARepoConditionManager.prototype = new oFF.QInARepository();
oFF.QInARepoConditionManager.prototype._ff_c = "QInARepoConditionManager";

oFF.QInARepoConditionManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaConditionsList = null;
	let conditionManager = modelComponent;
	if (oFF.notNull(conditionManager))
	{
		let len = conditionManager.size();
		if (len > 0)
		{
			inaConditionsList = oFF.PrFactory.createList();
			for (let i = 0; i < len; i++)
			{
				let condition = conditionManager.get(i);
				if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || condition.isUserCondition() || condition.getModCounter() > 0)
				{
					let inACondition = exporter.exportCondition(condition);
					if (oFF.notNull(inACondition) && !inACondition.isEmpty())
					{
						inaConditionsList.add(inACondition);
					}
				}
			}
			if (inaConditionsList.isEmpty())
			{
				inaConditionsList = null;
			}
		}
	}
	return inaConditionsList;
};
oFF.QInARepoConditionManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	if (oFF.notNull(inaList))
	{
		inaStructure.put("Elements", inaList);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoConditionManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_MANAGER;
};
oFF.QInARepoConditionManager.prototype.getTagName = function()
{
	return "ConditionsRepo";
};
oFF.QInARepoConditionManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let conditionManager = modelComponent;
	if (oFF.notNull(conditionManager))
	{
		conditionManager.clearFrontendConditions();
		if (!oFF.PrUtils.isListEmpty(inaList))
		{
			let queryModelBase = context.getQueryModel();
			let len = inaList.size();
			for (let i = 0; i < len; i++)
			{
				let inaCurrentCondition = inaList.getStructureAt(i);
				let currentCondition = importer.importCondition(queryModelBase, inaCurrentCondition, null);
				if (oFF.notNull(currentCondition) && !conditionManager.containsKey(currentCondition.getName()))
				{
					conditionManager.add(currentCondition);
				}
			}
		}
	}
	return conditionManager;
};
oFF.QInARepoConditionManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoConditionsCondition = function() {};
oFF.QInARepoConditionsCondition.prototype = new oFF.QInARepository();
oFF.QInARepoConditionsCondition.prototype._ff_c = "QInARepoConditionsCondition";

oFF.QInARepoConditionsCondition.exportBreakGroupDimensionList = function(condition)
{
	if (oFF.isNull(condition))
	{
		return null;
	}
	let inaBreakGroupDimensionList = oFF.PrFactory.createList();
	let breakGroupDimensions = condition.getBreakGroupDimensions();
	let len = breakGroupDimensions.size();
	for (let i = 0; i < len; i++)
	{
		inaBreakGroupDimensionList.addString(breakGroupDimensions.get(i).getName());
	}
	return inaBreakGroupDimensionList;
};
oFF.QInARepoConditionsCondition.exportEvaluateOnDimensionsList = function(exporter, condition)
{
	if (oFF.isNull(condition))
	{
		return null;
	}
	let inaEvaluationDimensionList = oFF.PrFactory.createList();
	let evaluationDimensions = condition.getEvaluationDimensions();
	let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || evaluationDimensions.getModCounter() > 0;
	if (shouldContinueExporting)
	{
		let len = evaluationDimensions.size();
		for (let i = 0; i < len; i++)
		{
			inaEvaluationDimensionList.addString(evaluationDimensions.get(i).getName());
		}
	}
	return inaEvaluationDimensionList;
};
oFF.QInARepoConditionsCondition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let condition = modelComponent;
	if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && condition.isBackendCondition() && condition.hasPropertyChanged(oFF.QConditionProperties.QY_CONDITIONS_ACTIVE))
	{
		inaStructure.putString("Name", condition.getName());
		inaStructure.putBoolean("Active", condition.isActive());
		inaStructure.putBoolean("IsBackendCondition", condition.isBackendCondition());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || condition.isUserCondition())
	{
		let queryModel = condition.getQueryModel();
		let isMds = queryModel.getSystemType().isTypeOf(oFF.SystemType.HANA);
		inaStructure.putBoolean("IsBackendCondition", condition.isBackendCondition());
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || condition.hasPropertyChanged(oFF.QConditionProperties.QY_CONDITIONS_ACTIVE))
		{
			inaStructure.putBoolean("Active", condition.isActive());
		}
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || condition.hasPropertyChanged(oFF.QConditionProperties.QY_CONDITIONS_AFTER_VISIBILITY_FILTER))
		{
			if (condition.isApplyingConditionAfterVisibilityFilter())
			{
				inaStructure.putBoolean("AfterVisibilityFilter", true);
			}
		}
		if (isMds)
		{
			inaStructure.putStringNotNullAndNotEmpty("Description", condition.getDescription());
		}
		else
		{
			inaStructure.putString("Description", condition.getDescription());
		}
		inaStructure.putString("Name", condition.getName());
		let dimensionEvaluationType = condition.getDimensionEvaluationType();
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || condition.hasPropertyChanged(oFF.QConditionProperties.QY_CONDITIONS_EVALUATE_ON_DIMENSIONS))
		{
			inaStructure.putString("EvaluateOnDimensions", dimensionEvaluationType.getName());
		}
		if (dimensionEvaluationType === oFF.ConditionDimensionEvaluationType.GIVEN_LIST)
		{
			let exportEvaluateOnDimensionsList = oFF.QInARepoConditionsCondition.exportEvaluateOnDimensionsList(exporter, condition);
			inaStructure.put("EvaluateOnDimensionsList", exportEvaluateOnDimensionsList);
		}
		let thresholds = condition.getThresholds();
		let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || thresholds.getModCounter() > 0;
		if (shouldContinueExporting)
		{
			let thresholdSize = thresholds.size();
			if (thresholdSize > 0)
			{
				let inAThresholdList = oFF.PrFactory.createList();
				for (let i = 0; i < thresholdSize; i++)
				{
					let currentInAThreshold = exporter.exportConditionThreshold(thresholds.get(i));
					if (oFF.notNull(currentInAThreshold))
					{
						inAThresholdList.add(currentInAThreshold);
					}
				}
				if (!inAThresholdList.isEmpty())
				{
					inaStructure.put("Threshold", inAThresholdList);
				}
				else
				{
					return null;
				}
			}
		}
		if (isMds)
		{
			if (oFF.XCollectionUtils.hasElements(queryModel.getPreQueries()) && !condition.getOnDisabledToWarning())
			{
				inaStructure.putString("OnDisabled", "Error");
			}
			let isGroupBreaking = condition.isBreakGroup();
			if (isGroupBreaking)
			{
				if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || condition.hasPropertyChanged(oFF.QConditionProperties.QY_BREAK_GROUP))
				{
					inaStructure.putBoolean("BreakGroup", true);
				}
				let exportBreakGroupDimensionList = oFF.QInARepoConditionsCondition.exportBreakGroupDimensionList(condition);
				inaStructure.put("BreakGroupList", exportBreakGroupDimensionList);
			}
			if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || condition.hasPropertyChanged(oFF.QConditionProperties.QY_CONDITIONS_BREAK_HIERARCHY))
			{
				if (condition.isBreakHierarchy())
				{
					inaStructure.putBoolean("BreakHierarchy", true);
				}
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoConditionsCondition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITION;
};
oFF.QInARepoConditionsCondition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let newCondition = null;
	if (oFF.notNull(inaStructure))
	{
		let inACondName = inaStructure.getStringByKey("Name");
		if (oFF.isNull(modelComponent))
		{
			let isBackendCondition = inaStructure.getBooleanByKeyExt("IsBackendCondition", true);
			let conditionManager = parentComponent;
			if (conditionManager.getByKey(inACondName) !== null)
			{
				newCondition = conditionManager.getConditionByName(inACondName);
			}
			else if (!isBackendCondition || importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE)
			{
				newCondition = oFF.QCondition.create(context, conditionManager, inACondName, isBackendCondition);
			}
		}
		else
		{
			newCondition = modelComponent;
			newCondition.setConditionName(inACondName);
		}
		if (oFF.notNull(newCondition))
		{
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Active"))
			{
				newCondition.setActive(inaStructure.getBooleanByKey("Active"));
			}
			if (!newCondition.isBackendCondition() || importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE)
			{
				newCondition.setUsedState(inaStructure.getStringByKey("IsUsed"));
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Description"))
				{
					newCondition.setDescription(inaStructure.getStringByKey("Description"));
				}
				let onDisabled = inaStructure.getStringByKey("OnDisabled");
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("AfterVisibilityFilter"))
				{
					newCondition.setApplyConditionAfterVisibilityFilter(inaStructure.getBooleanByKeyExt("AfterVisibilityFilter", false));
				}
				if (oFF.notNull(onDisabled))
				{
					if (oFF.XString.isEqual(onDisabled, "Error"))
					{
						newCondition.setOnDisabledToWarning(false);
					}
				}
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("EvaluateOnDimensions"))
				{
					let inAEvaluateOnDimensionTypeString = inaStructure.getStringByKey("EvaluateOnDimensions");
					let conditionDimensionEvaluationType = oFF.ConditionDimensionEvaluationType.lookupName(inAEvaluateOnDimensionTypeString);
					if (oFF.notNull(conditionDimensionEvaluationType))
					{
						newCondition.setDimensionEvaluationType(conditionDimensionEvaluationType);
					}
				}
				let queryModel = context.getQueryModel();
				let inADimensionList = inaStructure.getListByKey("EvaluateOnDimensionsList");
				let dimSize;
				let idxDim;
				if (!oFF.PrUtils.isListEmpty(inADimensionList) && oFF.notNull(queryModel))
				{
					dimSize = inADimensionList.size();
					newCondition.clearEvaluationDimensions();
					for (idxDim = 0; idxDim < dimSize; idxDim++)
					{
						let inACurrentDimensionName = inADimensionList.getStringAt(idxDim);
						if (oFF.notNull(inACurrentDimensionName))
						{
							let currentDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentDimensionName);
							if (oFF.notNull(currentDimension))
							{
								newCondition.addEvaluationDimension(currentDimension);
							}
						}
					}
				}
				let inAThresholds = inaStructure.getListByKey("Threshold");
				if (!oFF.PrUtils.isListEmpty(inAThresholds))
				{
					let thresholdSize = inAThresholds.size();
					newCondition.clearThresholds();
					for (let idxThreshold = 0; idxThreshold < thresholdSize; idxThreshold++)
					{
						let inACurrentThreshold = inAThresholds.getStructureAt(idxThreshold);
						if (oFF.notNull(inACurrentThreshold))
						{
							newCondition.addThreshold(importer.importConditionThreshold(queryModel, inACurrentThreshold, null, newCondition));
						}
					}
				}
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("BreakGroup"))
				{
					newCondition.setBreakGroup(inaStructure.getBooleanByKeyExt("BreakGroup", false));
				}
				let inABreakDimensionList = inaStructure.getListByKey("BreakGroupList");
				if (!oFF.PrUtils.isListEmpty(inABreakDimensionList) && oFF.notNull(queryModel))
				{
					dimSize = inABreakDimensionList.size();
					for (idxDim = 0; idxDim < dimSize; idxDim++)
					{
						let inACurrentBreakDimensionName = inABreakDimensionList.getStringAt(idxDim);
						if (oFF.notNull(inACurrentBreakDimensionName))
						{
							let currentBreakDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentBreakDimensionName);
							if (oFF.notNull(currentBreakDimension))
							{
								newCondition.addBreakGroupDimension(currentBreakDimension);
							}
						}
					}
				}
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("BreakHierarchy"))
				{
					newCondition.setBreakHierarchy(inaStructure.getBooleanByKeyExt("BreakHierarchy", false));
				}
			}
		}
	}
	return newCondition;
};

oFF.QInARepoConditionsThreshold = function() {};
oFF.QInARepoConditionsThreshold.prototype = new oFF.QInARepository();
oFF.QInARepoConditionsThreshold.prototype._ff_c = "QInARepoConditionsThreshold";

oFF.QInARepoConditionsThreshold.importSingleMeasureCoordinate = function(queryModelBase, threshold, measureCoordinate)
{
	if (oFF.isNull(threshold) || oFF.isNull(measureCoordinate))
	{
		return;
	}
	let inADimensionName = measureCoordinate.getStringByKey("DimensionName");
	let inAMemberName = measureCoordinate.getStringByKey("MemberName");
	if (oFF.XStringUtils.isNullOrEmpty(inADimensionName) || oFF.XStringUtils.isNullOrEmpty(inAMemberName))
	{
		return;
	}
	let queryModel = queryModelBase;
	if (oFF.isNull(queryModel))
	{
		queryModel = threshold.getContext().getQueryModel();
	}
	if (oFF.notNull(queryModel))
	{
		let dimension = queryModel.getDimensionByNameFromExistingMetadata(inADimensionName);
		if (oFF.notNull(dimension))
		{
			let dimensionMember = dimension.getDimensionMember(inAMemberName);
			if (oFF.isNull(dimensionMember))
			{
				let clientQueryObjectManager = queryModel.getOlapEnv().getClientQueryObjectManager();
				let storageName = queryModel.getQueryManager().getClientQueryObjectStorageName();
				let isPrimaryStructure = dimension === queryModel.getPrimaryCalculationDimension();
				dimensionMember = clientQueryObjectManager.getStructuredMemberIncludeReleased(inAMemberName, storageName, isPrimaryStructure);
			}
			if (oFF.notNull(dimensionMember))
			{
				threshold.addMeasureCoordinate(dimensionMember);
			}
		}
	}
};
oFF.QInARepoConditionsThreshold.importThresholdValue = function(filterBag, inAValue)
{
	if (oFF.isNull(filterBag) || oFF.isNull(inAValue))
	{
		return;
	}
	if (inAValue.isBoolean())
	{
		filterBag.setBoolean(inAValue.getBoolean());
	}
	else if (inAValue.isString())
	{
		filterBag.setString(inAValue.getString());
	}
	else if (inAValue.isDouble())
	{
		filterBag.setDouble(inAValue.getDouble());
	}
	else if (inAValue.isInteger())
	{
		filterBag.setInteger(inAValue.getInteger());
	}
	else if (inAValue.isLong())
	{
		filterBag.setLong(inAValue.getLong());
	}
};
oFF.QInARepoConditionsThreshold.setValue = function(exporter, parameterName, inaElement, value, valueType)
{
	if (valueType === oFF.XValueType.VARIABLE)
	{
		let variableValue = value.getVariableValue();
		if (oFF.notNull(variableValue))
		{
			inaElement.putString(parameterName, variableValue.getName());
			if (oFF.XString.isEqual(parameterName, "Low"))
			{
				inaElement.putString("LowIs", "Variable");
			}
			else if (oFF.XString.isEqual(parameterName, "High"))
			{
				inaElement.putString("HighIs", "Variable");
			}
		}
	}
	else
	{
		oFF.QInAValueUtils.exportPlaceholderValue(exporter, parameterName, inaElement, value, valueType, value.getQueryModel());
	}
};
oFF.QInARepoConditionsThreshold.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let conditionThreshold = modelComponent;
	let measureCoordinates = conditionThreshold.getMeasureCoordinates();
	let inAMeasureCoordinates = oFF.PrFactory.createList();
	let len = measureCoordinates.size();
	if (len === 0)
	{
		return null;
	}
	for (let i = 0; i < len; i++)
	{
		let currentDimensionMember = measureCoordinates.get(i);
		let singleInACoordinate = oFF.PrFactory.createStructure();
		let dimensionName;
		if (!currentDimensionMember.isReleased())
		{
			dimensionName = currentDimensionMember.getDimension().getName();
		}
		else
		{
			if (oFF.XString.isEqual(currentDimensionMember.getStorageGroupName(), oFF.QClientQueryObjectType.SECONDARY_STRUCTURE_MEMBER.getName()))
			{
				dimensionName = conditionThreshold.getQueryModel().getSecondaryCalculationDimension().getName();
			}
			else
			{
				dimensionName = conditionThreshold.getQueryModel().getPrimaryCalculationDimension().getName();
			}
		}
		singleInACoordinate.putString("DimensionName", dimensionName);
		singleInACoordinate.putString("MemberName", currentDimensionMember.getName());
		inAMeasureCoordinates.add(singleInACoordinate);
	}
	if (!inAMeasureCoordinates.isEmpty())
	{
		inaStructure.put("MeasureCoordinate", inAMeasureCoordinates);
	}
	let queryModel = conditionThreshold.getQueryModel();
	let isMds = queryModel.getSystemType().isTypeOf(oFF.SystemType.HANA);
	let lowValue = conditionThreshold.getLow();
	let highValue = conditionThreshold.getHigh();
	if (isMds)
	{
		if (lowValue.getValue() !== null)
		{
			oFF.QInARepoConditionsThreshold.setValue(exporter, "Low", inaStructure, lowValue, oFF.XValueType.INTEGER);
		}
		if (highValue.getValue() !== null)
		{
			oFF.QInARepoConditionsThreshold.setValue(exporter, "High", inaStructure, highValue, oFF.XValueType.INTEGER);
		}
		let level = conditionThreshold.getLevel();
		if (oFF.notNull(level))
		{
			inaStructure.putInteger("Level", level.getInteger());
		}
	}
	else
	{
		if (lowValue.getValue() !== null)
		{
			oFF.QInARepoConditionsThreshold.setValue(exporter, "Low", inaStructure, lowValue, lowValue.getValueType());
		}
		if (highValue.getValue() !== null)
		{
			oFF.QInARepoConditionsThreshold.setValue(exporter, "High", inaStructure, highValue, highValue.getValueType());
		}
		let lowValueIs = conditionThreshold.getLowIs();
		if (lowValueIs.getValue() !== null)
		{
			oFF.QInARepoConditionsThreshold.setValue(exporter, "LowIs", inaStructure, lowValueIs, lowValueIs.getValueType());
		}
		let highValueIs = conditionThreshold.getHighIs();
		if (highValueIs.getValue() !== null)
		{
			oFF.QInARepoConditionsThreshold.setValue(exporter, "HighIs", inaStructure, highValueIs, highValueIs.getValueType());
		}
	}
	let comparisonOperator = conditionThreshold.getComparisonOperator();
	inaStructure.putString("Comparison", comparisonOperator.getName());
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoConditionsThreshold.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_THRESHOLD;
};
oFF.QInARepoConditionsThreshold.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let newThreshold = null;
	if (oFF.notNull(inaStructure))
	{
		if (oFF.isNull(modelComponent))
		{
			newThreshold = oFF.QConditionThreshold.create(context, parentComponent);
		}
		else
		{
			newThreshold = modelComponent;
		}
		let inAComparisonOperator = inaStructure.getStringByKey("Comparison");
		let conditionComparisonOperator = oFF.ConditionComparisonOperator.lookupName(inAComparisonOperator);
		if (oFF.notNull(conditionComparisonOperator))
		{
			newThreshold.setComparisonOperator(conditionComparisonOperator);
		}
		let inALow = inaStructure.getByKey("Low");
		oFF.QInARepoConditionsThreshold.importThresholdValue(newThreshold.getLow(), inALow);
		let inALowIs = inaStructure.getByKey("LowIs");
		oFF.QInARepoConditionsThreshold.importThresholdValue(newThreshold.getLowIs(), inALowIs);
		let inAHigh = inaStructure.getByKey("High");
		oFF.QInARepoConditionsThreshold.importThresholdValue(newThreshold.getHigh(), inAHigh);
		let inAHighIs = inaStructure.getByKey("HighIs");
		oFF.QInARepoConditionsThreshold.importThresholdValue(newThreshold.getHighIs(), inAHighIs);
		let inAMeasureCoordinates = inaStructure.getListByKey("MeasureCoordinate");
		if (oFF.notNull(inAMeasureCoordinates))
		{
			let queryModel = context.getQueryModel();
			let len = inAMeasureCoordinates.size();
			for (let i = 0; i < len; i++)
			{
				oFF.QInARepoConditionsThreshold.importSingleMeasureCoordinate(queryModel, newThreshold, inAMeasureCoordinates.getStructureAt(i));
			}
		}
		newThreshold.setLeavesOnly(inaStructure.getBooleanByKeyExt("LeavesOnly", false));
		let inaLevel = inaStructure.getByKey("Level");
		if (oFF.notNull(inaLevel))
		{
			newThreshold.setLevel(oFF.XIntegerValue.create(inaLevel.getInteger()));
		}
	}
	return newThreshold;
};

oFF.QInARepoCurrencyTranslationItem = function() {};
oFF.QInARepoCurrencyTranslationItem.prototype = new oFF.QInARepository();
oFF.QInARepoCurrencyTranslationItem.prototype._ff_c = "QInARepoCurrencyTranslationItem";

oFF.QInARepoCurrencyTranslationItem.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let measureCurrencyTranslation = modelComponent;
	if (oFF.notNull(measureCurrencyTranslation))
	{
		inaStructure.putStringNotNullAndNotEmpty("ErrorHandling", oFF.QInAConverter.lookupCtErrorHandlingModeInA(measureCurrencyTranslation.getErrorHandling()));
		inaStructure.putString("Name", measureCurrencyTranslation.getName());
		inaStructure.putString("Description", measureCurrencyTranslation.getText());
		inaStructure.putBoolean("MetadataDefined", measureCurrencyTranslation.isMetadataDefined());
		if (measureCurrencyTranslation.isDefaultCurrency())
		{
			inaStructure.putBoolean("DefaultCurrency", true);
		}
		let queryModel = measureCurrencyTranslation.getQueryModel();
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "SourceCurrency", measureCurrencyTranslation.getSourceCurrency(), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "TargetCurrency", measureCurrencyTranslation.getTargetCurrency(), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "ReferenceDate", measureCurrencyTranslation.getReferenceDate(), queryModel);
		this.exportReferenceDateOffsets(inaStructure, measureCurrencyTranslation, exporter);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "RateName", measureCurrencyTranslation.getRateName(), queryModel);
		this.exportPlanningRateNameSettings(inaStructure, measureCurrencyTranslation, exporter);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoCurrencyTranslationItem.prototype.exportPlanningRateNameSettings = function(inaCurrencyTranslation, specificTranslation, exporter)
{
	if ((oFF.CtCategory.isDefined(specificTranslation.getFixedCategory()) || oFF.XStringUtils.isNotNullAndNotEmpty(specificTranslation.getFixedRateVersion()) || oFF.CtRateType.isDefined(specificTranslation.getFixedRateType())))
	{
		let inaRateName;
		if (inaCurrencyTranslation.containsKey("RateName"))
		{
			inaRateName = inaCurrencyTranslation.getStructureByKey("RateName");
		}
		else
		{
			inaRateName = inaCurrencyTranslation.putNewStructure("RateName");
		}
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || specificTranslation.hasPropertyChanged(oFF.QCurrencyTranslationProperties.QY_RATE_TYPE))
		{
			inaRateName.putStringNotNullAndNotEmpty("RateType", oFF.QInAConverter.lookupRateTypeInA(specificTranslation.getFixedRateType()));
		}
		inaRateName.putStringNotNullAndNotEmpty("RateVersion", specificTranslation.getFixedRateVersion());
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || specificTranslation.hasPropertyChanged(oFF.QCurrencyTranslationProperties.QY_CATEGORY))
		{
			inaRateName.putStringNotNullAndNotEmpty("Category", oFF.QInAConverter.lookupCategoryInA(specificTranslation.getFixedCategory()));
		}
	}
};
oFF.QInARepoCurrencyTranslationItem.prototype.exportReferenceDateOffsets = function(inaCurrencyTranslation, specificTranslation, exporter)
{
	if (specificTranslation.getDateOffsetGranularity() !== null)
	{
		let inaReferenceDate;
		if (inaCurrencyTranslation.containsKey("ReferenceDate"))
		{
			inaReferenceDate = inaCurrencyTranslation.getStructureByKey("ReferenceDate");
		}
		else
		{
			inaReferenceDate = inaCurrencyTranslation.putNewStructure("ReferenceDate");
		}
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || specificTranslation.hasPropertyChanged(oFF.QCurrencyTranslationProperties.QY_DATE_OFFSET_GRANULARITY))
		{
			inaReferenceDate.putString("DateOffsetGranularity", specificTranslation.getDateOffsetGranularity().getName());
		}
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || specificTranslation.hasPropertyChanged(oFF.QCurrencyTranslationProperties.QY_DATE_OFFSET))
		{
			inaReferenceDate.putInteger("DateOffset", specificTranslation.getDateOffset());
		}
	}
};
oFF.QInARepoCurrencyTranslationItem.prototype.exportSpecificCurrencyTranslationProperty = function(exporter, inaCurrencyTranslation, elementName, lookupValue, queryModel)
{
	if (oFF.notNull(lookupValue))
	{
		if (lookupValue.isFixed())
		{
			inaCurrencyTranslation.putNewStructure(elementName).putString("Fixed", lookupValue.getFixedValue().getStringRepresentation());
		}
		else if (lookupValue.isFieldBased())
		{
			inaCurrencyTranslation.putNewStructure(elementName).putString("DimensionAttribute", lookupValue.getFieldName());
		}
		else if (lookupValue.isFormulaBased())
		{
			let formula = inaCurrencyTranslation.putNewStructure(elementName).putNewStructure("Formula");
			oFF.QInARepoMemberAbstract.exportFormulaItem(exporter, lookupValue.getFormulaItem(), formula, queryModel);
		}
		else if (lookupValue.isVariableBased())
		{
			inaCurrencyTranslation.putNewStructure(elementName).putString("Variable", lookupValue.getVariableName());
		}
	}
};
oFF.QInARepoCurrencyTranslationItem.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM;
};
oFF.QInARepoCurrencyTranslationItem.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let currencyTranslation = modelComponent;
	if (oFF.notNull(currencyTranslation) && (!currencyTranslation.isMetadataDefined() && !currencyTranslation.isModelDefinedCurrencyTranslation()) && oFF.XCollectionUtils.hasElements(inaStructure))
	{
		currencyTranslation.setMetadataDefined(inaStructure.getBooleanByKeyExt("MetadataDefined", false));
		currencyTranslation.setSourceCurrency(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure.getStructureByKey("SourceCurrency")));
		currencyTranslation.setTargetCurrency(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure.getStructureByKey("TargetCurrency")));
		currencyTranslation.setErrorHandling(oFF.QInAConverter.lookupCtErrorHandlingMode(inaStructure.getStringByKey("ErrorHandling")));
		if (inaStructure.getBooleanByKeyExt("DefaultCurrency", false))
		{
			currencyTranslation.setDefaultCurrency();
		}
		currencyTranslation.setReferenceDate(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.DATE, inaStructure.getStructureByKey("ReferenceDate")));
		if (inaStructure.containsKey("ReferenceDate"))
		{
			let inaReferenceDate = inaStructure.getStructureByKey("ReferenceDate");
			if (inaReferenceDate.containsKey("DateOffset") || inaReferenceDate.containsKey("DateOffsetGranularity"))
			{
				let dateOffset = currencyTranslation.getDateOffset();
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaReferenceDate.containsKey("DateOffset"))
				{
					dateOffset = inaReferenceDate.getIntegerByKey("DateOffset");
				}
				let dateOffsetGranularity = currencyTranslation.getDateOffsetGranularity();
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaReferenceDate.containsKey("DateOffsetGranularity"))
				{
					dateOffsetGranularity = oFF.DateOffsetGranularity.lookup(inaReferenceDate.getStringByKey("DateOffsetGranularity"));
				}
				if (oFF.notNull(dateOffsetGranularity))
				{
					if (currencyTranslation.getReferenceDateFieldName() !== null)
					{
						currencyTranslation.setReferenceDateByFieldNameOffsetAndGranularity(currencyTranslation.getReferenceDateFieldName(), dateOffset, dateOffsetGranularity);
					}
					else
					{
						currencyTranslation.setDynamicReferenceDateWithOffsetAndGranularity(dateOffset, dateOffsetGranularity);
					}
				}
			}
		}
		currencyTranslation.setRateName(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure.getStructureByKey("RateName")));
		if (inaStructure.containsKey("RateName"))
		{
			let inaRateName = inaStructure.getStructureByKey("RateName");
			if (inaRateName.hasStringByKey("RateType"))
			{
				currencyTranslation.setFixedRateType(oFF.QInAConverter.lookupRateType(inaRateName.getStringByKey("RateType")));
			}
			if (inaRateName.hasStringByKey("RateVersion"))
			{
				currencyTranslation.setFixedRateVersion(inaRateName.getStringByKey("RateVersion"));
			}
			if (inaRateName.hasStringByKey("Category"))
			{
				currencyTranslation.setFixedCategory(oFF.QInAConverter.lookupCategory(inaRateName.getStringByKey("Category")));
			}
		}
	}
	return modelComponent;
};
oFF.QInARepoCurrencyTranslationItem.prototype.importSpecificCurrencyTranslationElement = function(importer, specificCurrencyTranslationBase, valueType, structure)
{
	let value = null;
	if (oFF.notNull(structure))
	{
		if (structure.containsKey("Fixed"))
		{
			let stringValue = structure.getStringByKey("Fixed");
			if (valueType === oFF.XValueType.STRING)
			{
				value = oFF.QCurrencyLookupValue.createFixedByValue(specificCurrencyTranslationBase, oFF.XStringValue.create(stringValue));
			}
			else if (valueType === oFF.XValueType.DATE)
			{
				value = oFF.QCurrencyLookupValue.createFixedByValue(specificCurrencyTranslationBase, oFF.XDate.createDateSafe(stringValue));
			}
		}
		else if (structure.containsKey("DimensionAttribute"))
		{
			value = oFF.QCurrencyLookupValue.createByFieldName(specificCurrencyTranslationBase, structure.getStringByKey("DimensionAttribute"));
		}
		else if (structure.containsKey("Formula"))
		{
			let formulaItem = oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, specificCurrencyTranslationBase.getQueryModel().getMeasureDimension(), structure.getStructureByKey("Formula"), null, null);
			value = oFF.QCurrencyLookupValue.createByFormulaItem(specificCurrencyTranslationBase, formulaItem);
		}
		else if (structure.containsKey("Variable"))
		{
			value = oFF.QCurrencyLookupValue.createByVariableName(specificCurrencyTranslationBase, structure.getStringByKey("Variable"));
		}
	}
	return value;
};

oFF.QInARepoCurrencyTranslationList = function() {};
oFF.QInARepoCurrencyTranslationList.prototype = new oFF.QInARepository();
oFF.QInARepoCurrencyTranslationList.prototype._ff_c = "QInARepoCurrencyTranslationList";

oFF.QInARepoCurrencyTranslationList.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaCurTransList = null;
	let currencyTranslationManager = modelComponent;
	let specificCurrencyTranslations = currencyTranslationManager.getMeasureCurrencyTranslationsForInaData();
	if (oFF.XCollectionUtils.hasElements(specificCurrencyTranslations))
	{
		inaCurTransList = oFF.PrFactory.createList();
		let size = specificCurrencyTranslations.size();
		for (let i = 0; i < size; i++)
		{
			let specificTranslation = specificCurrencyTranslations.get(i);
			exporter.exportCurrencyTranslationElement(specificTranslation, inaCurTransList.addNewStructure());
		}
	}
	return inaCurTransList;
};
oFF.QInARepoCurrencyTranslationList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	inaStructure.put("Elements", inaList);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoCurrencyTranslationList.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST;
};
oFF.QInARepoCurrencyTranslationList.prototype.getTagName = function()
{
	return "CurrencyTranslationsRepo";
};
oFF.QInARepoCurrencyTranslationList.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let currencyTranslationManagerBase = context.getQueryModel().getCurrencyTranslationManager();
	if (oFF.notNull(currencyTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
	{
		let size = inaList.size();
		for (let i = 0; i < size; i++)
		{
			let inaSpecificCurrencyTranslation = inaList.getStructureAt(i);
			let name = inaSpecificCurrencyTranslation.getStringByKey("Name");
			let description = inaSpecificCurrencyTranslation.getStringByKey("Description");
			let currencyTranslation = currencyTranslationManagerBase.getMeasureCurrencyTranslation(name);
			if (oFF.isNull(currencyTranslation))
			{
				currencyTranslation = currencyTranslationManagerBase.addNewMeasureCurrencyTranslationBase(name, description);
			}
			importer.importCurrencyTranslationElement(inaSpecificCurrencyTranslation, currencyTranslation, context);
		}
	}
	return currencyTranslationManagerBase;
};
oFF.QInARepoCurrencyTranslationList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoCurrencyTranslationManager = function() {};
oFF.QInARepoCurrencyTranslationManager.prototype = new oFF.QInARepository();
oFF.QInARepoCurrencyTranslationManager.prototype._ff_c = "QInARepoCurrencyTranslationManager";

oFF.QInARepoCurrencyTranslationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let currencyTranslationManager = modelComponent;
	this.exportCurrencyTranslationDetails(inaStructure, currencyTranslationManager);
	this.exportSpecificCurrencyTranslations(exporter, inaStructure, currencyTranslationManager);
	this.exportDefaultCurrencyTranslations(exporter, inaStructure, currencyTranslationManager);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoCurrencyTranslationManager.prototype.exportCurrencyTranslationDetails = function(inaStructure, currencyTranslationManager)
{
	if (oFF.isNull(currencyTranslationManager) || !currencyTranslationManager.getModelCapabilities().supportsQueryCurrencyTranslation())
	{
		return;
	}
	let currencyTranslationDetails = currencyTranslationManager.getCurrencyTranslationDetails();
	if (oFF.notNull(currencyTranslationDetails))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(currencyTranslationDetails.getCurrencyTranslationName()))
		{
			if (currencyTranslationDetails.getCurrencyTranslationOperation() === null)
			{
				throw oFF.XException.createIllegalArgumentException("CurrencyTranslation Operation required.");
			}
			inaStructure.putString("Operation", currencyTranslationDetails.getCurrencyTranslationOperation().getName());
			inaStructure.putString("Name", currencyTranslationDetails.getCurrencyTranslationName());
			if (currencyTranslationDetails.getCurrencyTranslationOperation() === oFF.CurrencyTranslationOperation.BOTH || currencyTranslationDetails.getCurrencyTranslationOperation() === oFF.CurrencyTranslationOperation.TARGET)
			{
				if (currencyTranslationDetails.getCurrencyTranslationTarget() === null)
				{
					throw oFF.XException.createIllegalArgumentException("CurrencyTranslation Target Currency required.");
				}
			}
			inaStructure.putString("Target", currencyTranslationDetails.getCurrencyTranslationTarget());
		}
		else
		{
			inaStructure.putString("Operation", "");
			inaStructure.putString("Name", "");
			inaStructure.putString("Target", "");
		}
	}
};
oFF.QInARepoCurrencyTranslationManager.prototype.exportDefaultCurrencyTranslations = function(exporter, inaStructure, currencyTranslationManager)
{
	let bridge = currencyTranslationManager.getQuery2MeasureCurrencyTranslationBridge();
	if (oFF.notNull(bridge))
	{
		let inaCurrencyTranslation = inaStructure.putNewStructure("Query");
		let specificTranslation = bridge.getMeasureCurrencyTranslation();
		exporter.exportCurrencyTranslationElement(specificTranslation, inaCurrencyTranslation);
		inaStructure.putStringNotNullAndNotEmpty("CurrencyTranslationName", bridge.getCurrencyTranslationName());
		inaStructure.putBoolean("Active", bridge.isApplyDefinedCurrencyTranslation());
		if (bridge.isApplyToDefaultCurrencyTranslation())
		{
			inaStructure.putBoolean("CurrencyTranslationApplyToDefault", bridge.isApplyToDefaultCurrencyTranslation());
		}
	}
};
oFF.QInARepoCurrencyTranslationManager.prototype.exportSpecificCurrencyTranslations = function(exporter, inaStructure, currencyTranslationManager)
{
	if (oFF.isNull(currencyTranslationManager) || !currencyTranslationManager.getModelCapabilities().supportsCurrencyTranslation())
	{
		return;
	}
	let specificCurrencyTranslations = currencyTranslationManager.getMeasureCurrencyTranslations();
	if (oFF.XCollectionUtils.hasElements(specificCurrencyTranslations))
	{
		let currencyTranslations = inaStructure.putNewList("CurrencyTranslations");
		let size = specificCurrencyTranslations.size();
		for (let i = 0; i < size; i++)
		{
			let specificTranslation = specificCurrencyTranslations.get(i);
			exporter.exportCurrencyTranslationElement(specificTranslation, currencyTranslations.addNewStructure());
		}
	}
};
oFF.QInARepoCurrencyTranslationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER;
};
oFF.QInARepoCurrencyTranslationManager.prototype.getTagName = function()
{
	return "CurrencyTranslationRepo";
};
oFF.QInARepoCurrencyTranslationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let currencyTranslationManager = modelComponent;
	if (oFF.notNull(inaStructure) && oFF.notNull(currencyTranslationManager))
	{
		this.importQueryCurrencyTranslation(importer, inaStructure, currencyTranslationManager);
		this.importSpecificCurrencyTranslations(importer, inaStructure, currencyTranslationManager, context);
		this.importDefaultCurrencyTranslation(importer, inaStructure, currencyTranslationManager, context);
	}
	return modelComponent;
};
oFF.QInARepoCurrencyTranslationManager.prototype.importDefaultCurrencyTranslation = function(importer, inaStructure, currencyTranslationManager, context)
{
	let inaCurrencyTranslation = inaStructure.getStructureByKey("Query");
	if (oFF.notNull(inaCurrencyTranslation) && oFF.notNull(currencyTranslationManager))
	{
		let bridge = currencyTranslationManager.getQuery2MeasureCurrencyTranslationBridge();
		if (oFF.notNull(bridge))
		{
			bridge.setCurrencyTranslationName(inaStructure.getStringByKey("CurrencyTranslationName"));
			bridge.setApplyDefinedCurrencyTranslation(inaStructure.getBooleanByKeyExt("Active", false));
			bridge.setApplyToDefaultCurrencyTranslation(inaStructure.getBooleanByKeyExt("CurrencyTranslationApplyToDefault", false));
			importer.importCurrencyTranslationElement(inaCurrencyTranslation, bridge.getMeasureCurrencyTranslation(), context);
		}
	}
};
oFF.QInARepoCurrencyTranslationManager.prototype.importQueryCurrencyTranslation = function(importer, inaStructure, currencyTranslationManager)
{
	let currencyTranslationDetails = currencyTranslationManager.getCurrencyTranslationDetails();
	if (oFF.notNull(currencyTranslationDetails) && inaStructure.hasStringByKey("Name") && inaStructure.hasStringByKey("Operation"))
	{
		let inaCurrencyTranslationName = inaStructure.getStringByKey("Name");
		let inaCurrencyTranslationOperation = inaStructure.getStringByKey("Operation");
		let inaCurrencyTranslationTarget = inaStructure.getStringByKey("Target");
		if (!oFF.XStringUtils.isNullOrEmpty(currencyTranslationDetails.getCurrencyTranslationName()) && currencyTranslationDetails.getCurrencyTranslationOperation() !== null && !oFF.XStringUtils.isNullOrEmpty(currencyTranslationDetails.getCurrencyTranslationOperation().getName()) && (oFF.XStringUtils.isNullOrEmpty(inaCurrencyTranslationName) || oFF.XStringUtils.isNullOrEmpty(inaCurrencyTranslationOperation) || oFF.XStringUtils.isNullOrEmpty(inaCurrencyTranslationTarget)))
		{
			currencyTranslationManager.resetCurrencyTranslationDetails();
		}
		else
		{
			currencyTranslationDetails.setCurrencyTranslationName(inaCurrencyTranslationName);
			currencyTranslationDetails.setCurrencyTranslationOperation(oFF.CurrencyTranslationOperation.lookup(inaCurrencyTranslationOperation));
			currencyTranslationDetails.setCurrencyTranslationTarget(inaCurrencyTranslationTarget);
		}
	}
};
oFF.QInARepoCurrencyTranslationManager.prototype.importSpecificCurrencyTranslations = function(importer, inaStructure, currencyTranslationManager, context)
{
	let inaCurrencyTranslationsList = inaStructure.getListByKey("CurrencyTranslations");
	if (oFF.XCollectionUtils.hasElements(inaCurrencyTranslationsList))
	{
		let size = inaCurrencyTranslationsList.size();
		for (let i = 0; i < size; i++)
		{
			let inaSpecificCurrencyTranslation = inaCurrencyTranslationsList.getStructureAt(i);
			let name = inaSpecificCurrencyTranslation.getStringByKey("Name");
			let description = inaSpecificCurrencyTranslation.getStringByKey("Description");
			let currencyTranslation = currencyTranslationManager.getMeasureCurrencyTranslation(name);
			if (oFF.isNull(currencyTranslation))
			{
				currencyTranslation = currencyTranslationManager.addNewMeasureCurrencyTranslationBase(name, description);
			}
			importer.importCurrencyTranslationElement(inaSpecificCurrencyTranslation, currencyTranslation, context);
		}
	}
};

oFF.QInARepoDataCell = function() {};
oFF.QInARepoDataCell.prototype = new oFF.QInARepository();
oFF.QInARepoDataCell.prototype._ff_c = "QInARepoDataCell";

oFF.QInARepoDataCell.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dataCell = modelComponent;
	inaStructure.putString("Name", dataCell.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_DISAGGREGATION_MODE))
	{
		let disaggregationMode = dataCell.getDisaggregationMode();
		oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "DisaggregationMode", oFF.isNull(disaggregationMode) ? oFF.DisaggregationMode.NONE : disaggregationMode);
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_DISAGGREGATION_REF_CELL_NAME))
	{
		let referenceDataCell = dataCell.getDisaggregationRefCell();
		inaStructure.putString("DisaggregationReferenceCellName", oFF.isNull(referenceDataCell) ? "0" : referenceDataCell.getName());
	}
	if (oFF.XStringUtils.isNullOrEmpty(dataCell.getName()) || exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_SCALING_FACTOR))
	{
		inaStructure.putInteger("ScalingFactor", dataCell.getScalingFactor());
	}
	if (oFF.XStringUtils.isNullOrEmpty(dataCell.getName()) || exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_DECIMAL_PLACES))
	{
		inaStructure.putInteger("Decimals", dataCell.getDecimalPlaces());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_SIGN_REVERSAL))
	{
		inaStructure.putBoolean("SignReversal", dataCell.hasSignReversal());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_EMPHASIZED))
	{
		inaStructure.putBoolean("Emphasized", dataCell.isEmphasized());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_CUMULATION))
	{
		inaStructure.putBoolean("Cumulation", dataCell.isCumulated());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_CURRENCY_PRESENTATION))
	{
		inaStructure.putStringNotNullAndNotEmpty("CurrencyPresentation", oFF.QInAConverter.lookupCurrencyPresentationInA(dataCell.getCurrencyPresentation()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_SCALE_AND_UNIT_PLACEMENT))
	{
		inaStructure.putStringNotNullAndNotEmpty("ScaleAndUnitPlacement", oFF.QInAConverter.lookupScaleAndUnitPlacementInA(dataCell.getScaleAndUnitPlacement()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_SCALE_FORMAT))
	{
		inaStructure.putStringNotNullAndNotEmpty("ScaleFormat", oFF.QInAConverter.lookupScaleFormatInA(dataCell.getScaleFormat()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dataCell.hasPropertyChanged(oFF.QDataCellProperties.QY_SIGN_PRESENTATION))
	{
		inaStructure.putStringNotNullAndNotEmpty("SignPresentation", oFF.QInAConverter.lookupSignPresentationInA(dataCell.getSignPresentation()));
	}
	let baseValueType = dataCell.getBaseValueType();
	let inaBaseValueType = oFF.QInAConverter.lookupIntByValueType(baseValueType);
	inaStructure.putInteger("CellValueType", inaBaseValueType);
	let inaMemberReferences = inaStructure.putNewList("DimensionMemberReferences");
	let referenceStructureElement = dataCell.getReferenceStructureElement1();
	if (oFF.notNull(referenceStructureElement))
	{
		inaMemberReferences.addString(referenceStructureElement.getName());
		referenceStructureElement = dataCell.getReferenceStructureElement2();
		if (oFF.notNull(referenceStructureElement))
		{
			inaMemberReferences.addString(referenceStructureElement.getName());
		}
	}
	if (exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE)
	{
		inaStructure.putStringNotNullAndNotEmpty("SemanticObject", dataCell.getSemanticObject());
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoDataCell.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELL;
};
oFF.QInARepoDataCell.prototype.getDataCellFromExistingList = function(queryModel, inaStructure)
{
	let inaName = inaStructure.getStringByKey("Name");
	let inaMemberReferences = inaStructure.getListByKey("DimensionMemberReferences");
	let queryDataCells = queryModel.getQueryDataCellsBase();
	if (oFF.XCollectionUtils.hasElements(inaMemberReferences))
	{
		let member1 = inaMemberReferences.getStringAt(0);
		let member2 = inaMemberReferences.size() > 1 ? inaMemberReferences.getStringAt(1) : null;
		let member2Exists = oFF.XStringUtils.isNotNullAndNotEmpty(member2);
		return oFF.XCollectionUtils.findFirst(queryDataCells, (cell) => {
			return cell.hasMeasureReference(member1) && (member2Exists && cell.hasMeasureReference(member2) || !member2Exists && cell.getReferenceStructureElement2() === null);
		});
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(inaName))
	{
		let cellByName = queryDataCells.getByKey(inaName);
		if (oFF.notNull(cellByName) && cellByName.getReferenceStructureElement1() === null && cellByName.getReferenceStructureElement2() === null)
		{
			return cellByName;
		}
	}
	return null;
};
oFF.QInARepoDataCell.prototype.getDataCellName = function(inaStructure, queryModel)
{
	let name = inaStructure.getStringByKey("Name");
	let queryDataCells = queryModel.getQueryDataCells();
	if (queryDataCells.containsKey(name))
	{
		let i = queryDataCells.size();
		while (queryDataCells.containsKey(oFF.XInteger.convertToString(i)))
		{
			i++;
		}
		name = oFF.XInteger.convertToString(i);
	}
	return name;
};
oFF.QInARepoDataCell.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let queryDataCellList = queryModel.getQueryDataCellsBase();
	let dataCell = this.getDataCellFromExistingList(queryModel, inaStructure);
	let createdNew = false;
	if (oFF.isNull(dataCell))
	{
		dataCell = queryDataCellList.newQueryDataCell(this.getDataCellName(inaStructure, queryModel));
		createdNew = true;
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("SignReversal"))
	{
		dataCell.setSignReversal(inaStructure.getBooleanByKeyExt("SignReversal", false));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Emphasized"))
	{
		dataCell.setEmphasized(inaStructure.getBooleanByKeyExt("Emphasized", false));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Cumulation"))
	{
		dataCell.setCumulation(inaStructure.getBooleanByKeyExt("Cumulation", false));
	}
	dataCell.setInputEnabled(inaStructure.getBooleanByKeyExt("InputEnabled", false));
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("DisaggregationMode"))
	{
		dataCell.setDisaggregationMode(oFF.DisaggregationMode.lookupWithDefault(inaStructure.getStringByKeyExt("DisaggregationMode", null), oFF.DisaggregationMode.NONE));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("DisaggregationReferenceCellName"))
	{
		dataCell.setDisaggregationRefCellName(inaStructure.getStringByKeyExt("DisaggregationReferenceCellName", null));
	}
	if ((createdNew || queryModel.isBasicMeasureSettingsExportedInRepo()) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("ScalingFactor")))
	{
		dataCell.setScalingFactor(inaStructure.getIntegerByKeyExt("ScalingFactor", 1));
	}
	if ((createdNew || queryModel.isBasicMeasureSettingsExportedInRepo()) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Decimals")))
	{
		dataCell.setDecimalPlaces(inaStructure.getIntegerByKeyExt("Decimals", 0));
	}
	let inaBaseValueType = inaStructure.getIntegerByKeyExt("CellValueType", 0);
	let cellValueType = oFF.QInAConverter.lookupValueTypeByInt(inaBaseValueType);
	dataCell.setBaseCellValueType(cellValueType);
	if (cellValueType === oFF.XValueType.DIMENSION_MEMBER)
	{
		let dimensionReferenceName = inaStructure.getStringByKey("CellDimensionReference");
		dataCell.setDimensionReference(queryModel.getDimensions().getByKey(dimensionReferenceName));
	}
	let inaMemberReferences = inaStructure.getListByKey("DimensionMemberReferences");
	if (oFF.notNull(inaMemberReferences))
	{
		for (let k = 0; k < inaMemberReferences.size(); k++)
		{
			let memberReference = inaMemberReferences.getStringAt(k);
			if (!dataCell.hasMeasureReference(memberReference))
			{
				dataCell.addDimensionMemberReference(memberReference);
			}
		}
	}
	if (importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE && !dataCell.hasAnyMemberReferencesSet())
	{
		queryDataCellList.removeElement(dataCell);
	}
	if (importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE && inaStructure.hasStringByKey("SemanticObject"))
	{
		dataCell.setSemanticObject(inaStructure.getStringByKey("SemanticObject"));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasStringByKey("CurrencyPresentation"))
	{
		dataCell.setCurrencyPresentation(oFF.QInAConverter.lookupCurrencyPresentation(inaStructure.getStringByKey("CurrencyPresentation")));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasStringByKey("ScaleAndUnitPlacement"))
	{
		dataCell.setScaleAndUnitPlacement(oFF.QInAConverter.lookupScaleAndUnitPlacement(inaStructure.getStringByKey("ScaleAndUnitPlacement")));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasStringByKey("ScaleFormat"))
	{
		dataCell.setScaleFormat(oFF.QInAConverter.lookupScaleFormat(inaStructure.getStringByKey("ScaleFormat")));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasStringByKey("SignPresentation"))
	{
		dataCell.setSignPresentation(oFF.QInAConverter.lookupSignPresentation(inaStructure.getStringByKey("SignPresentation")));
	}
	return dataCell;
};

oFF.QInARepoDataCellsAll = function() {};
oFF.QInARepoDataCellsAll.prototype = new oFF.QInARepository();
oFF.QInARepoDataCellsAll.prototype._ff_c = "QInARepoDataCellsAll";

oFF.QInARepoDataCellsAll.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let queryModel = modelComponent;
	let inaQueryDataCellList = null;
	let capabilities = queryModel.getModelCapabilities();
	if (capabilities.supportsDataCells() && queryModel.getQueryManager().getInitSettings().isRequestingDataCells())
	{
		let queryDataCells = queryModel.getQueryDataCells();
		inaQueryDataCellList = oFF.PrFactory.createList();
		let size = queryDataCells.size();
		for (let i = 0; i < size; i++)
		{
			let queryDataCell = queryDataCells.get(i);
			let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || queryDataCell.isUserAddedDataCell() || queryDataCell.getModCounter() > 0;
			if (shouldContinueExporting)
			{
				let cellStructure = exporter.exportDataCell(queryDataCell, null);
				inaQueryDataCellList.add(cellStructure);
			}
		}
	}
	return inaQueryDataCellList;
};
oFF.QInARepoDataCellsAll.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	if (oFF.notNull(inaList))
	{
		inaStructure.put("Elements", inaList);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoDataCellsAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELLS;
};
oFF.QInARepoDataCellsAll.prototype.getTagName = function()
{
	return "QueryDataCellsRepo";
};
oFF.QInARepoDataCellsAll.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let capabilities = context.getModelCapabilities();
	let queryModel = context.getQueryModel();
	if (capabilities.supportsDataCells() && queryModel.getQueryManager().getInitSettings().isRequestingDataCells())
	{
		if (oFF.notNull(inaList))
		{
			for (let i = 0; i < inaList.size(); i++)
			{
				importer.importDataCell(inaList.getStructureAt(i), queryModel);
			}
		}
	}
	return null;
};
oFF.QInARepoDataCellsAll.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoDataSource = function() {};
oFF.QInARepoDataSource.prototype = new oFF.QInARepository();
oFF.QInARepoDataSource.prototype._ff_c = "QInARepoDataSource";

oFF.QInARepoDataSource.exportDataSource = function(exporter, dataSource, withRunAsUser, inaQueryModel)
{
	let inaDataSource = oFF.PrFactory.createStructure();
	let type = dataSource.getType();
	if (oFF.notNull(type))
	{
		inaDataSource.putString("Type", type.getCamelCaseName());
		let systemName = dataSource.getSystemName();
		if (oFF.notNull(systemName))
		{
			inaDataSource.putString("System", systemName);
		}
		let sources;
		if (type === oFF.MetaObjectType.MULTI_SOURCE)
		{
			sources = inaDataSource.putNewList("Sources");
			let multiSources = dataSource.getMultiSources();
			let multiSourcesSize = multiSources.size();
			for (let i = 0; i < multiSourcesSize; i++)
			{
				let multiSource = multiSources.get(i);
				let source = oFF.QInARepoDataSource.exportDataSource(exporter, multiSource, withRunAsUser, null);
				sources.add(source);
			}
			inaDataSource.put("Mappings", dataSource.getMappings());
		}
		else if (type === oFF.MetaObjectType.BLENDING)
		{
			let blendingDefinition = dataSource.getBlendingDefinition();
			if (oFF.notNull(blendingDefinition))
			{
				sources = oFF.QInARepoDataSourceBlending.exportBlendingSources(exporter.getMode(), blendingDefinition, true);
				inaDataSource.put("Sources", sources);
				let exportBlendingMappings = oFF.QInARepoDataSourceBlending.exportBlendingMappings(blendingDefinition.getMappings());
				inaDataSource.put("Mappings", exportBlendingMappings);
			}
		}
		let genericServiceDescription = dataSource.getGenericServiceDescription();
		if (oFF.notNull(genericServiceDescription))
		{
			inaDataSource.put("GenericServiceDescription", genericServiceDescription);
		}
	}
	oFF.QInARepoDataSourceProperties.exportQd(exporter, dataSource, inaDataSource, withRunAsUser);
	oFF.QInARepoDataSourceExtDims.exportQd(exporter, dataSource, inaDataSource);
	if (oFF.notNull(inaQueryModel))
	{
		inaQueryModel.put("DataSource", inaDataSource);
	}
	return inaDataSource;
};
oFF.QInARepoDataSource.importDs2 = function(importer, inaStructure, context, dataSource)
{
	let systemName = inaStructure.getStringByKey("System");
	if (oFF.notNull(systemName))
	{
		dataSource.setSystemName(systemName);
	}
	let typeValue = inaStructure.getStringByKey("Type");
	let metaObjectType = null;
	if (oFF.notNull(typeValue))
	{
		typeValue = oFF.XString.toLowerCase(typeValue);
		metaObjectType = oFF.MetaObjectType.lookup(typeValue);
	}
	if (oFF.isNull(metaObjectType))
	{
		metaObjectType = oFF.MetaObjectType.DBVIEW;
	}
	dataSource.setType(metaObjectType);
	oFF.QInARepoDataSourceProperties.importQd(dataSource, inaStructure);
	if (metaObjectType === oFF.MetaObjectType.MULTI_SOURCE || metaObjectType === oFF.MetaObjectType.BLENDING)
	{
		let sources = oFF.PrUtils.getListProperty(inaStructure, "Sources");
		if (oFF.notNull(sources))
		{
			let multiSources = dataSource.getMultiSourcesBase();
			let sourceSize = sources.size();
			for (let i = 0; i < sourceSize; i++)
			{
				let sourceStructure = oFF.PrUtils.getStructureElement(sources, i);
				let multiSource = oFF.QFactory.createDataSource();
				oFF.QInARepoDataSource.importDs2(importer, sourceStructure, context, multiSource);
				multiSources.add(multiSource);
			}
		}
		let mappings = oFF.PrUtils.getListProperty(inaStructure, "Mappings");
		dataSource.setMappings(mappings);
	}
	oFF.QInARepoDataSourceExtDims.importQd(importer, dataSource, inaStructure);
	let validationHash = inaStructure.getStringByKey("ValidationHash");
	dataSource.setValidationHash(validationHash);
	let genericServiceDescription = inaStructure.getStructureByKey("GenericServiceDescription");
	if (oFF.notNull(genericServiceDescription))
	{
		dataSource.setGenericServiceDescription(genericServiceDescription);
	}
	return dataSource;
};
oFF.QInARepoDataSource.importQd = function(importer, inaParent, name, context)
{
	let dataSource = null;
	let inaStructure = inaParent;
	if (oFF.notNull(name))
	{
		if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
		{
			inaStructure = inaStructure.getStructureByKey("Analytics");
			if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
			{
				inaStructure = inaStructure.getStructureByKey("Definition");
			}
		}
		if (oFF.notNull(inaStructure) && inaStructure.containsKey(name))
		{
			let type = inaStructure.getElementTypeByKey(name);
			if (type === oFF.PrElementType.STRING)
			{
				dataSource = oFF.QFactory.createDataSourceWithType(oFF.MetaObjectType.INFOPROVIDER, inaStructure.getStringByKey(name));
			}
			else if (type === oFF.PrElementType.STRUCTURE)
			{
				inaStructure = inaStructure.getStructureByKey(name);
			}
		}
		else if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
		{
			inaStructure = null;
		}
	}
	if (oFF.isNull(dataSource) && oFF.notNull(inaStructure))
	{
		dataSource = oFF.QFactory.createDataSource();
		oFF.QInARepoDataSource.importDs2(importer, inaStructure, context, dataSource);
		let validationHash = inaParent.getStringByKey("ValidationHash");
		if (oFF.isNull(validationHash))
		{
			validationHash = inaStructure.getStringByKey("ValidationHash");
		}
		dataSource.setValidationHash(validationHash);
		let genericServiceDescription = inaParent.getStructureByKey("GenericServiceDescription");
		if (oFF.notNull(genericServiceDescription))
		{
			dataSource.setGenericServiceDescription(genericServiceDescription);
		}
	}
	return dataSource;
};
oFF.QInARepoDataSource.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let withRunAsUser = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.RUN_AS_USER) > 0;
	return oFF.QInARepoDataSource.exportDataSource(exporter, modelComponent, withRunAsUser, null);
};
oFF.QInARepoDataSource.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_SOURCE;
};
oFF.QInARepoDataSource.prototype.getTagName = function()
{
	return "DataSource";
};
oFF.QInARepoDataSource.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return oFF.QInARepoDataSource.importDs2(importer, inaStructure, context, modelComponent);
};
oFF.QInARepoDataSource.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QFactory.createDataSource();
};

oFF.QInARepoDimension = function() {};
oFF.QInARepoDimension.prototype = new oFF.QInARepository();
oFF.QInARepoDimension.prototype._ff_c = "QInARepoDimension";

oFF.QInARepoDimension.checkAddFallbackResultSetFields = function(missingField, rsFields, fieldContainer, originalFieldList)
{
	if (missingField && !oFF.XStream.of(rsFields).anyMatch((rsf) => {
		return rsf.getObtainability() === null || rsf.getObtainability() === oFF.ObtainabilityType.ALWAYS;
	}))
	{
		if (oFF.XCollectionUtils.hasElements(originalFieldList))
		{
			rsFields.addAll(originalFieldList);
		}
		else if (fieldContainer.getDisplayKeyField() !== null)
		{
			rsFields.add(fieldContainer.getDisplayKeyField());
		}
	}
};
oFF.QInARepoDimension.exportListOfFields = function(fields, inaFields, exporter)
{
	let fieldsSize = fields.size();
	for (let i = 0; i < fieldsSize; i++)
	{
		let field = fields.get(i);
		if (field.getTextTransformation() === null && field.getDimension().getDimensionType() !== oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			continue;
		}
		inaFields.add(exporter.exportComponent(oFF.OlapComponentType.FIELD, field, null, oFF.QImExFlag.DEFAULT_ALL));
	}
};
oFF.QInARepoDimension.exportResultSetAttributeDetails = function(dimension)
{
	let exportInRepoDelta = false;
	let resultSetAttributesAtDim = dimension.getResultSetAttributes();
	if (resultSetAttributesAtDim.getModCounter() > 0)
	{
		exportInRepoDelta = true;
	}
	else
	{
		let resultAttributeSize = resultSetAttributesAtDim.size();
		for (let idxResultAttribute = 0; idxResultAttribute < resultAttributeSize; idxResultAttribute++)
		{
			let rsAttribute = resultSetAttributesAtDim.get(idxResultAttribute);
			let attributeRsFields = rsAttribute.getResultSetFields();
			if (attributeRsFields.getModCounter() > 0)
			{
				exportInRepoDelta = true;
				break;
			}
		}
	}
	return exportInRepoDelta;
};
oFF.QInARepoDimension.exportResultSetAttributes = function(exporter, inaDimension, dimension)
{
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || oFF.QInARepoDimension.exportResultSetAttributeDetails(dimension))
	{
		let inaResultSetAttributes = inaDimension.putNewList("ResultSetAttributeNodes");
		let inaAttributeRsFields = inaDimension.putNewList("ResultSetAttributeFields");
		let resultSetAttributesAtDim = dimension.getResultSetAttributes();
		let resultAttributeSize = resultSetAttributesAtDim.size();
		for (let idxResultAttribute = 0; idxResultAttribute < resultAttributeSize; idxResultAttribute++)
		{
			let rsAttribute = resultSetAttributesAtDim.get(idxResultAttribute);
			inaResultSetAttributes.addString(rsAttribute.getName());
			let attributeFields = inaAttributeRsFields.addNewList();
			let attributeRsFields = rsAttribute.getResultSetFields();
			let attRsFields = attributeRsFields.size();
			for (let idxAttributeResultField = 0; idxAttributeResultField < attRsFields; idxAttributeResultField++)
			{
				let inaAttRsField = attributeFields.addNewStructure();
				let attField = attributeRsFields.get(idxAttributeResultField);
				inaAttRsField.putString("Name", attField.getName());
				let attrObtainability = attField.getObtainability();
				if (oFF.notNull(attrObtainability))
				{
					inaAttRsField.putString("Obtainability", attrObtainability.getName());
				}
			}
		}
	}
};
oFF.QInARepoDimension.exportResultSetFields = function(exporter, inaDimension, dimension)
{
	let resultSetFieldsAtDim = dimension.getResultSetFields();
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || resultSetFieldsAtDim.getModCounter() > 0)
	{
		let inaResultSetFields = inaDimension.putNewList("ResultSetFields");
		let resultFieldSize = resultSetFieldsAtDim.size();
		for (let idxResultField = 0; idxResultField < resultFieldSize; idxResultField++)
		{
			let inaRsField = inaResultSetFields.addNewStructure();
			let field = resultSetFieldsAtDim.get(idxResultField);
			inaRsField.putString("Name", field.getName());
			let obtainability = field.getObtainability();
			if (oFF.notNull(obtainability))
			{
				inaRsField.putString("Obtainability", obtainability.getName());
			}
		}
	}
};
oFF.QInARepoDimension.importRsAttributeNodes = function(importer, inaDimension, dimension)
{
	let inaResultSetAttributes = inaDimension.getListByKey("ResultSetAttributeNodes");
	let inaRsAttributeFields = inaDimension.getListByKey("ResultSetAttributeFields");
	let queryModelBase = dimension.getQueryModelBase();
	let requestingMinimizedAttributes = queryModelBase.getQueryManagerBase().getInitSettings().isRequestingMinimizedAttributes();
	if (oFF.notNull(inaResultSetAttributes))
	{
		let resultSetAttributes = dimension.getResultSetAttributes();
		resultSetAttributes.clear();
		let attributeSize = inaResultSetAttributes.size();
		for (let idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++)
		{
			let attributeName = inaResultSetAttributes.getStringAt(idxAttribute);
			let attribute = dimension.getAttributeByName(attributeName);
			if (oFF.notNull(attribute))
			{
				resultSetAttributes.add(attribute);
				oFF.QInARepoDimension.importRsFieldsForAttribute(importer, attribute, inaRsAttributeFields, idxAttribute);
			}
			else if (requestingMinimizedAttributes && importer.getMessage(oFF.Severity.WARNING, oFF.ErrorCodes.ATTRIBUTE_NOT_FOUND) === null)
			{
				importer.addWarning(oFF.ErrorCodes.ATTRIBUTE_NOT_FOUND, "Some attributes saved in the Story no more exist in the Query");
			}
		}
	}
};
oFF.QInARepoDimension.importRsFields = function(importer, inaDimension, dimension)
{
	let inaResultSetFields = inaDimension.getListByKey("ResultSetFields");
	if (oFF.notNull(inaResultSetFields))
	{
		let queryModelBase = dimension.getQueryModelBase();
		let requestingMinimizedAttributes = queryModelBase.getQueryManagerBase().getInitSettings().isRequestingMinimizedAttributes();
		let resultSetFields = dimension.getResultSetFields();
		let originalFieldList = resultSetFields.createListCopy();
		resultSetFields.clear();
		let fieldSize = inaResultSetFields.size();
		let missingField = false;
		for (let idxField = 0; idxField < fieldSize; idxField++)
		{
			let fieldName;
			let obtainabilityType = null;
			if (inaResultSetFields.getElementTypeAt(idxField) === oFF.PrElementType.STRING)
			{
				fieldName = inaResultSetFields.getStringAt(idxField);
			}
			else
			{
				fieldName = inaResultSetFields.getStructureAt(idxField).getStringByKey("Name");
				let obtainabilityString = inaResultSetFields.getStructureAt(idxField).getStringByKey("Obtainability");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(obtainabilityString))
				{
					obtainabilityType = oFF.ObtainabilityType.lookup(obtainabilityString);
				}
			}
			let field = dimension.getFieldByName(fieldName);
			if (oFF.notNull(field))
			{
				resultSetFields.add(field);
				if (oFF.notNull(obtainabilityType))
				{
					field.setObtainability(obtainabilityType);
				}
			}
			else if (requestingMinimizedAttributes && importer.getMessage(oFF.Severity.WARNING, oFF.ErrorCodes.ATTRIBUTE_NOT_FOUND) === null)
			{
				importer.addWarning(oFF.ErrorCodes.ATTRIBUTE_NOT_FOUND, "Some attributes saved in the Story no more exist in the Query");
				missingField = true;
			}
			else
			{
				missingField = true;
			}
		}
		oFF.QInARepoDimension.checkAddFallbackResultSetFields(missingField, resultSetFields, dimension, originalFieldList);
	}
};
oFF.QInARepoDimension.importRsFieldsForAttribute = function(importer, attribute, inaRsAttributeFields, idxAttribute)
{
	if (oFF.isNull(inaRsAttributeFields) || inaRsAttributeFields.size() <= idxAttribute)
	{
		return;
	}
	let inaRsFields = inaRsAttributeFields.getListAt(idxAttribute);
	let attibuteRsFields = attribute.getResultSetFields();
	let originalFieldList = attibuteRsFields.createListCopy();
	attibuteRsFields.clear();
	let rsSize = inaRsFields.size();
	let queryModelBase = attribute.getDimension().getQueryModelBase();
	let requestingMinimizedAttributes = queryModelBase.getQueryManagerBase().getInitSettings().isRequestingMinimizedAttributes();
	let missingField = false;
	for (let idxAttributeField = 0; idxAttributeField < rsSize; idxAttributeField++)
	{
		let attributeRsFieldName;
		let obtainabilityType = null;
		if (inaRsFields.getElementTypeAt(idxAttributeField) === oFF.PrElementType.STRING)
		{
			attributeRsFieldName = inaRsFields.getStringAt(idxAttributeField);
		}
		else
		{
			attributeRsFieldName = inaRsFields.getStructureAt(idxAttributeField).getStringByKey("Name");
			let obtainabilityString = inaRsFields.getStructureAt(idxAttributeField).getStringByKey("Obtainability");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(obtainabilityString))
			{
				obtainabilityType = oFF.ObtainabilityType.lookup(obtainabilityString);
			}
		}
		let rsField = attribute.getFieldByName(attributeRsFieldName);
		if (oFF.isNull(rsField))
		{
			rsField = attribute.getDimension().getFieldByName(attributeRsFieldName);
		}
		if (oFF.notNull(rsField))
		{
			attibuteRsFields.add(rsField);
			if (oFF.notNull(obtainabilityType))
			{
				rsField.setObtainability(obtainabilityType);
			}
		}
		else if (requestingMinimizedAttributes && importer.getMessage(oFF.Severity.WARNING, oFF.ErrorCodes.ATTRIBUTE_NOT_FOUND) === null)
		{
			importer.addWarning(oFF.ErrorCodes.ATTRIBUTE_NOT_FOUND, "Some attributes saved in the Story no more exist in the Query");
			missingField = true;
		}
		else
		{
			missingField = true;
		}
	}
	oFF.QInARepoDimension.checkAddFallbackResultSetFields(missingField, attibuteRsFields, attribute, originalFieldList);
};
oFF.QInARepoDimension.prototype.addNewDimensionWithDummyMetadata = function(importer, context, queryModel, dimName)
{
	let cacheKey = oFF.QCacheKey.createByContextForDimension(context, dimName, null);
	let dimensionMetadata = oFF.QDimensionMetadata.create(cacheKey);
	dimensionMetadata.addSupportedFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED);
	dimensionMetadata.addSupportedAxis(oFF.AxisType.FREE);
	dimensionMetadata.addSupportedAxis(oFF.AxisType.ROWS);
	dimensionMetadata.addSupportedAxis(oFF.AxisType.COLUMNS);
	if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.ALLOW_FREE_DIMENSIONS_ON_REPOSITORY_AXIS))
	{
		dimensionMetadata.addSupportedAxis(oFF.AxisType.REPOSITORY);
	}
	dimensionMetadata.setDimensionType(oFF.DimensionType.DIMENSION);
	let olapEnvironment = importer.getApplication().getOlapEnvironment();
	olapEnvironment.setDimensionMetadata(dimensionMetadata);
	let dimension = oFF.QDimension._create(context, queryModel.getDimensionManagerBase());
	dimension.setName(dimName);
	dimension.setText(dimName);
	dimension.setMetadata(dimensionMetadata);
	dimension.setSkipMetadataValidationOnRepoImport(true);
	queryModel.addDimension(dimension);
	return dimension;
};
oFF.QInARepoDimension.prototype.exportAlternativeFieldValues = function(inaStructure, dimension, exporter)
{
	this.exportAlternativeFieldValuesForKeyType(inaStructure, dimension, dimension.getAlternativeFieldValueMemberKeys(false), false, exporter);
	this.exportAlternativeFieldValuesForKeyType(inaStructure, dimension, dimension.getAlternativeFieldValueMemberKeys(true), true, exporter);
};
oFF.QInARepoDimension.prototype.exportAlternativeFieldValuesForKeyType = function(inaStructure, dimension, alternativeFieldValueMemberKeys, hierarchyKey, exporter)
{
	if (oFF.notNull(alternativeFieldValueMemberKeys))
	{
		let alternativeFieldValuesList = oFF.PrFactory.createList();
		let sizeKeys = alternativeFieldValueMemberKeys.size();
		for (let i = 0; i < sizeKeys; i++)
		{
			let memberKey = alternativeFieldValueMemberKeys.get(i);
			let alternativeFieldValueFields = dimension.getAlternativeFieldValueFields(hierarchyKey, memberKey);
			if (oFF.notNull(alternativeFieldValueFields))
			{
				let sizeFields = alternativeFieldValueFields.size();
				for (let j = 0; j < sizeFields; j++)
				{
					let fieldName = alternativeFieldValueFields.get(j);
					let alternativeFieldValueLanguages = dimension.getAlternativeFieldValueLanguages(hierarchyKey, memberKey, fieldName);
					if (oFF.notNull(alternativeFieldValueLanguages))
					{
						let sizeLanguages = alternativeFieldValueLanguages.size();
						for (let k = 0; k < sizeLanguages; k++)
						{
							let language = alternativeFieldValueLanguages.get(k);
							let alternativeFieldValue = dimension.getAlternativeFieldValue(hierarchyKey, memberKey, fieldName, language);
							let member = dimension.getStructureMember(memberKey);
							let displayOverwrite = oFF.XString.isEqual(oFF.AlternativeFieldValue.DISPLAY_DESCRIPTION.getName(), fieldName) || oFF.XString.isEqual(oFF.AlternativeFieldValue.DISPLAY_NAME.getName(), fieldName);
							let displayOverwriteForExistingMember = oFF.notNull(member) && displayOverwrite;
							if (oFF.notNull(alternativeFieldValue))
							{
								if (displayOverwriteForExistingMember || dimension.getDimensionType() !== oFF.DimensionType.ACCOUNT || !exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
								{
									if (displayOverwriteForExistingMember || oFF.notNull(member) && !member.isModelDefinedMember() || !exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
									{
										let fieldTransformationStruct = alternativeFieldValuesList.addNewStructure();
										fieldTransformationStruct.putBoolean("HierarchyKey", hierarchyKey);
										fieldTransformationStruct.putString("MemberKey", memberKey);
										fieldTransformationStruct.putString("FieldName", fieldName);
										fieldTransformationStruct.putString("Language", language);
										fieldTransformationStruct.putString("ValueType", oFF.QInAConverter.lookupValueTypeInA(alternativeFieldValue.getValueType()));
										fieldTransformationStruct.putString("Value", alternativeFieldValue.getStringRepresentation());
									}
								}
							}
						}
					}
				}
			}
		}
		if (alternativeFieldValuesList.size() > 0)
		{
			inaStructure.put("AlternativeFieldValues", alternativeFieldValuesList);
		}
	}
};
oFF.QInARepoDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	inaStructure.putString("Name", dimension.getName());
	if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_READ_MODE))
	{
		oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "ReadMode", dimension.getReadMode(oFF.QContextType.RESULT_SET));
	}
	if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_SELECTOR_READ_MODE))
	{
		oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "SelectorReadMode", dimension.getReadMode(oFF.QContextType.SELECTOR));
	}
	let axisType = dimension.getAxisType();
	if (dimension.getTagging().containsKey(oFF.QTransientConstants.SECONDARY_MEASURE_DIMENSION_ON_COLUMN))
	{
		axisType = oFF.AxisType.FREE;
	}
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(axisType));
	if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_SKIP))
	{
		let skipEntries = dimension.getSkipEntries();
		if (skipEntries > 0 || exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA && dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_SKIP))
		{
			inaStructure.putInteger("Skip", skipEntries);
		}
	}
	if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_TOP))
	{
		let topEntries = dimension.getTopEntries();
		if (topEntries > 0 || exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA && dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_TOP))
		{
			inaStructure.putInteger("Top", topEntries);
		}
	}
	if (dimension.supportsCumulative() && (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.hasPropertyChanged(oFF.QDimensionProperties.IS_CUMULATIVE)))
	{
		inaStructure.putBoolean("IsCummulative", dimension.isCumulative());
	}
	exporter.exportHierarchy(dimension, inaStructure);
	if (dimension.supportsTotals())
	{
		if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.getResultStructureController().getModCounter() > 0)
		{
			exporter.exportTotals(dimension, inaStructure);
		}
	}
	if (dimension.getStructureLayout() !== null)
	{
		exporter.exportMembers(dimension, inaStructure);
	}
	this.exportFieldLayout(exporter, inaStructure, dimension);
	this.exportAlternativeFieldValues(inaStructure, dimension, exporter);
	if (dimension.getSkipMetadataValidationOnRepoImport())
	{
		inaStructure.putBoolean("SkipMetadataValidationOnRepoImport", true);
	}
	if (dimension.getPlaceholderIds() !== null && dimension.getPlaceholderIds().size() > 0 && exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		let placeholderIds = inaStructure.putNewList("PlaceholderIds");
		placeholderIds.addAllStrings(dimension.getPlaceholderIds());
	}
	let assignedPlaceholderIds = dimension.getPlaceholderIdMemberMap().getKeysAsReadOnlyList();
	if (dimension.getPlaceholderIds() !== null && dimension.getPlaceholderIds().size() > 0)
	{
		let inaPlaceholderIdMemberMap = inaStructure.putNewStructure("PlacholderIdMapping");
		for (let i = 0; i < assignedPlaceholderIds.size(); i++)
		{
			let assignedPlaceholderId = assignedPlaceholderIds.get(i);
			let member = dimension.getPlaceholderIdMemberMap().getByKey(assignedPlaceholderId);
			inaPlaceholderIdMemberMap.putString(assignedPlaceholderId, member.getAliasName());
		}
	}
	let memberVisibilities = dimension.getOverdefinedMemberManager().getVisibilityOverrideMap();
	let memberNames = memberVisibilities.getKeysAsReadOnlyList();
	if (memberNames.size() > 0)
	{
		let inaVisibilitySettings = inaStructure.putNewStructure("VisibilityOverride");
		for (let j = 0; j < memberNames.size(); j++)
		{
			let resultVisibility = memberVisibilities.getByKey(memberNames.get(j));
			if (oFF.isNull(resultVisibility))
			{
				resultVisibility = oFF.ResultVisibility.VISIBLE;
			}
			inaVisibilitySettings.putString(memberNames.get(j), oFF.QInAConverter.lookupResultSetVisibilityInA(resultVisibility));
		}
	}
	let memberNumericScales = dimension.getOverdefinedMemberManager().getNumericScaleOverrideMap();
	memberNames = memberNumericScales.getKeysAsReadOnlyList();
	if (memberNames.size() > 0)
	{
		let inaNumericScaleSettings = inaStructure.putNewStructure("NumericScaleOverride");
		for (let k = 0; k < memberNames.size(); k++)
		{
			let numericScale = memberNumericScales.getByKey(memberNames.get(k));
			inaNumericScaleSettings.putInteger(memberNames.get(k), numericScale.getInteger());
		}
	}
	let memberNumericShifts = dimension.getOverdefinedMemberManager().getNumericShiftOverrideMap();
	memberNames = memberNumericShifts.getKeysAsReadOnlyList();
	if (memberNames.size() > 0)
	{
		let inaNumericShiftSettings = inaStructure.putNewStructure("NumericShiftOverride");
		for (let l = 0; l < memberNames.size(); l++)
		{
			let numericShift = memberNumericShifts.getByKey(memberNames.get(l));
			inaNumericShiftSettings.putInteger(memberNames.get(l), numericShift.getInteger());
		}
	}
	let memberNumericPrecision = dimension.getOverdefinedMemberManager().getNumericPrecisionOverrideMap();
	memberNames = memberNumericPrecision.getKeysAsReadOnlyList();
	if (memberNames.size() > 0)
	{
		let inaNumericPrecisionSettings = inaStructure.putNewStructure("NumericPrecisionOverride");
		for (let m = 0; m < memberNames.size(); m++)
		{
			let numericPrecision = memberNumericPrecision.getByKey(memberNames.get(m));
			inaNumericPrecisionSettings.putInteger(memberNames.get(m), numericPrecision.getInteger());
		}
	}
	if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		inaStructure.putStringNotNull("AccountTypeAttributeName", dimension.getMetadata().getAccountTypeAttributeName());
		let hasDayTimeYYYYMMDDFormat = dimension.getMetadata().hasDayTimeYYYYMMDDFormat();
		if (hasDayTimeYYYYMMDDFormat)
		{
			inaStructure.putBoolean("HasDayTimeYYYYMMDDFormat", hasDayTimeYYYYMMDDFormat);
		}
	}
	let overrideText = dimension.getOverrideText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(overrideText))
	{
		inaStructure.putString("OverrideText", overrideText);
	}
	if (exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE)
	{
		let displayGroupName = dimension.getRuntimeDisplayGroupName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(displayGroupName))
		{
			inaStructure.putString("DisplayGroupName", displayGroupName);
			inaStructure.putStringNotNullAndNotEmpty("DisplayGroupDescription", dimension.getRuntimeDisplayGroupText());
		}
	}
	if (dimension.isTotalsModified())
	{
		inaStructure.putBoolean("TotalsModified", true);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoDimension.prototype.exportFieldLayout = function(exporter, inaDimension, dimension)
{
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_FIELD_LAYOUT_TYPE))
	{
		let fieldLayoutType = dimension.getFieldLayoutType();
		inaDimension.putString("FieldLayoutType", oFF.QInAConverter.lookupFieldLayoutTypeInA(fieldLayoutType));
	}
	let inaAllFields = inaDimension.putNewList("FieldSettings");
	oFF.QInARepoDimension.exportListOfFields(dimension.getFields(), inaAllFields, exporter);
	if (!dimension.isUseServerDefaultTextField())
	{
		inaDimension.putString("ClientDefaultTextAttribute", dimension.getClientDefaultTextField().getName());
	}
	if (!dimension.isUseServerDefaultKeyField())
	{
		inaDimension.putString("ClientDefaultKeyAttribute", dimension.getClientDefaultKeyField().getName());
	}
	oFF.QInARepoDimension.exportResultSetFields(exporter, inaDimension, dimension);
	let defaultResultSetTextField = dimension.getDefaultResultSetTextField();
	if (oFF.notNull(defaultResultSetTextField) && defaultResultSetTextField.haveAnyInAPropertiesChanged() || dimension.getShouldUseActualTextField())
	{
		inaDimension.putBoolean("TextFieldModified", true);
	}
	oFF.QInARepoDimension.exportResultSetAttributes(exporter, inaDimension, dimension);
};
oFF.QInARepoDimension.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.QInARepoDimension.prototype.importAlternativeFieldValues = function(inaStructure, dimension, importer)
{
	let alternativeFieldValuesList = inaStructure.getListByKey("AlternativeFieldValues");
	if (oFF.notNull(alternativeFieldValuesList))
	{
		let size = alternativeFieldValuesList.size();
		for (let i = 0; i < size; i++)
		{
			let currentElement = alternativeFieldValuesList.get(i);
			if (currentElement.isStructure())
			{
				let currentStructure = currentElement;
				let strValueType = currentStructure.getStringByKey("ValueType");
				let valueType = oFF.QInAConverter.lookupValueType(strValueType);
				let valueAsString = currentStructure.getStringByKey("Value");
				let value = null;
				if (valueType === oFF.XValueType.INTEGER)
				{
					value = oFF.XIntegerValue.create(oFF.XInteger.convertFromStringWithRadix(valueAsString, 10));
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					value = oFF.XLongValue.create(oFF.XLong.convertFromString(valueAsString));
				}
				else if (valueType === oFF.XValueType.DOUBLE)
				{
					value = oFF.XDoubleValue.create(oFF.XDouble.convertFromString(valueAsString));
				}
				else if (valueType === oFF.XValueType.STRING)
				{
					value = oFF.XStringValue.create(valueAsString);
				}
				else if (valueType === oFF.XValueType.DATE)
				{
					value = oFF.XDate.createDateFromIsoFormat(valueAsString);
				}
				else if (valueType === oFF.XValueType.DATE_TIME)
				{
					value = oFF.XDateTime.createDateTimeFromIsoFormat(valueAsString);
				}
				if (oFF.notNull(value))
				{
					let hierarchyKey = currentStructure.getBooleanByKey("HierarchyKey");
					let memberKey = currentStructure.getStringByKey("MemberKey");
					let fieldName = currentStructure.getStringByKey("FieldName");
					let language = currentStructure.getStringByKey("Language");
					let displayOverwrite = oFF.XString.isEqual(oFF.AlternativeFieldValue.DISPLAY_DESCRIPTION.getName(), fieldName) || oFF.XString.isEqual(oFF.AlternativeFieldValue.DISPLAY_NAME.getName(), fieldName);
					if (displayOverwrite || dimension.getDimensionType() !== oFF.DimensionType.ACCOUNT || !importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
					{
						let member = dimension.getStructureMember(memberKey);
						if (oFF.notNull(member) && !member.isModelDefinedMember() || !importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
						{
							dimension.setAlternativeFieldValue(hierarchyKey, memberKey, fieldName, value, language);
						}
					}
				}
			}
		}
	}
};
oFF.QInARepoDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let dimension = modelComponent;
	let dimName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(dimension))
	{
		if (oFF.notNull(queryModel))
		{
			if (oFF.isNull(dimName))
			{
				if (inaStructure.getBooleanByKeyExt("MeasureStructure", false))
				{
					let measureDimension = queryModel.getMeasureDimension();
					if (oFF.notNull(measureDimension))
					{
						dimName = measureDimension.getName();
					}
				}
				else if (inaStructure.getBooleanByKeyExt("SecondaryStructure", false))
				{
					let secondaryStructureDimension = queryModel.getDimensionByType(oFF.DimensionType.SECONDARY_STRUCTURE);
					if (oFF.notNull(secondaryStructureDimension))
					{
						dimName = secondaryStructureDimension.getName();
					}
				}
			}
			dimension = queryModel.getDimensionManagerBase().getDimensionByNameInternal(dimName);
			let skipMetadataValidationOnRepoImport = inaStructure.getBooleanByKeyExt("SkipMetadataValidationOnRepoImport", false);
			if (oFF.isNull(dimension) && skipMetadataValidationOnRepoImport)
			{
				dimension = this.addNewDimensionWithDummyMetadata(importer, context, queryModel, dimName);
			}
			if (oFF.isNull(dimension))
			{
				importer.addWarning(oFF.ErrorCodes.INVALID_DIMENSION, oFF.XStringUtils.concatenate3("Dimension '", dimName, "' not found in QueryModel! Can't deserialize dimension."));
				let axisType = inaStructure.getStringByKey("Axis");
				if (oFF.XString.isEqual(axisType, oFF.AxisType.ROWS.getName()) || oFF.XString.isEqual(axisType, oFF.AxisType.COLUMNS.getName()))
				{
					importer.addWarning(oFF.ErrorCodes.MISSING_DIMENSION_ON_ROWS_OR_COLUMNS, oFF.XStringUtils.concatenate3("Dimension '", dimName, "' used in Rows Axis or Columns Axis is not found in QueryModel."));
				}
			}
		}
	}
	if (oFF.notNull(dimension))
	{
		let isAugmentModellerMetadata = inaStructure.getBooleanByKeyExt("IsDelta", false);
		let isMeasureDimension = false;
		if (oFF.notNull(queryModel) && queryModel.getMeasureDimension() !== null)
		{
			isMeasureDimension = oFF.XString.isEqual(dimName, queryModel.getMeasureDimension().getName());
		}
		if (isAugmentModellerMetadata && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT && importer.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_STORE_HIERARCHY_MEMBER_NAMES_AS_FLAT) && importer.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES))
		{
			dimension.setHierarchicalDimensionMemberNamesStoredAsFlat(true);
		}
		let membersWithAssignedPlaceholders = dimension.getPlaceholderIdMemberMap().getValuesAsReadOnlyList();
		let placeholderIds = inaStructure.getListByKey("PlaceholderIds");
		if (oFF.notNull(placeholderIds) && (isAugmentModellerMetadata || !isMeasureDimension))
		{
			dimension.clearPlaceholderIds();
		}
		if (dimension.getPlaceholderIds().size() === 0 && oFF.notNull(placeholderIds))
		{
			for (let i = 0; i < placeholderIds.size(); i++)
			{
				let placeholderId = placeholderIds.getStringAt(i);
				placeholderId = this.migratePlaceholderId(importer, queryModel, placeholderId);
				dimension.addPlaceholderId(placeholderId);
			}
		}
		if (membersWithAssignedPlaceholders.size() > dimension.getPlaceholderIdMemberMap().getValuesAsReadOnlyList().size())
		{
			let membersWithAssignedPlaceholdersIter = membersWithAssignedPlaceholders.getIterator();
			while (membersWithAssignedPlaceholdersIter.hasNext())
			{
				let memberWithAssignedPlaceholder = membersWithAssignedPlaceholdersIter.next();
				if (dimension.getPlaceholderIdByAlias(memberWithAssignedPlaceholder.getAliasOrMemberName()) === null)
				{
					dimension.assignFreePlaceholderToMember(memberWithAssignedPlaceholder);
				}
			}
		}
		if (!isAugmentModellerMetadata)
		{
			if (importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
			{
				dimension.clearNonModelDefinedMemberAlternativeFieldValues();
			}
			else
			{
				dimension.clearAlternativeFieldValues();
			}
		}
		if (!isAugmentModellerMetadata)
		{
			importer.importHierarchy(dimension, inaStructure);
		}
		if (isAugmentModellerMetadata && importer.getSession().hasFeature(oFF.FeatureToggleOlap.LAZY_LOADING_SFX_ACCOUNT_MEMBERS) && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			dimension.setStructureMemberLazyLoader(oFF.InARepoStructureMemberLazyLoader.create(dimension, importer.getMode(), inaStructure));
		}
		else
		{
			importer.importMembers(inaStructure, dimension, context);
		}
		if (!isAugmentModellerMetadata)
		{
			this.importFieldsLayout(importer, inaStructure, dimension, context);
			let modelCapabilities = queryModel.getModelCapabilities();
			if (!modelCapabilities.supportsExtendedSort())
			{
				if (modelCapabilities.supportsDimensionSorting(dimension, oFF.SortType.MEMBER_KEY))
				{
					let inaSortOrder = inaStructure.getIntegerByKeyExt("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(oFF.XSortDirection.DEFAULT_VALUE));
					let sortOrder = oFF.QInAConverter.lookupSortDirection(inaSortOrder);
					dimension.getResultSetSorting().setDirection(sortOrder);
				}
			}
			if (importer.m_capabilities.supportsCummulative() && dimension.supportsCumulative())
			{
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("IsCummulative"))
				{
					dimension.setIsCumulative(inaStructure.getBooleanByKeyExt("IsCummulative", false));
				}
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Skip"))
			{
				let skipEntries = inaStructure.getIntegerByKeyExt("Skip", 0);
				dimension.setSkipEntries(skipEntries);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Top"))
			{
				let topEntries = inaStructure.getIntegerByKeyExt("Top", 0);
				dimension.setTopEntries(topEntries);
			}
			let inaReadMode = inaStructure.getStringByKey("ReadMode");
			if (oFF.notNull(inaReadMode))
			{
				let readMode = oFF.QInAConverter.lookupReadMode(inaReadMode);
				dimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, readMode);
			}
			let inaSelectorReadMode = inaStructure.getStringByKey("SelectorReadMode");
			if (oFF.notNull(inaSelectorReadMode))
			{
				let selectorReadMode = oFF.QInAConverter.lookupReadMode(inaSelectorReadMode);
				dimension.setReadModeGraceful(oFF.QContextType.SELECTOR, selectorReadMode);
			}
			importer.importTotals(inaStructure, dimension.getResultStructureControllerBase(), context);
			this.importAlternativeFieldValues(inaStructure, dimension, importer);
			let inaPlaceholderIdMemberMap = inaStructure.getStructureByKey("PlacholderIdMapping");
			if (oFF.notNull(inaPlaceholderIdMemberMap))
			{
				let inaPlaceholderIds = inaPlaceholderIdMemberMap.getKeysAsReadOnlyList();
				for (let j = 0; j < inaPlaceholderIds.size(); j++)
				{
					let inaPlaceholderId = inaPlaceholderIds.get(j);
					let inaMember = inaPlaceholderIdMemberMap.getStringByKey(inaPlaceholderId);
					inaPlaceholderId = this.migratePlaceholderId(importer, queryModel, inaPlaceholderId);
					dimension.assignPlaceholderIdByAlias(inaPlaceholderId, inaMember);
				}
			}
			let inaMemberName;
			let inaMemberNames;
			if (dimension.getModelCapabilities().supportsMemberVisibility() && inaStructure.containsKey("VisibilityOverride"))
			{
				let inaVisiblitySettings = inaStructure.getStructureByKey("VisibilityOverride");
				inaMemberNames = inaVisiblitySettings.getKeysAsReadOnlyList();
				for (let k = 0; k < inaMemberNames.size(); k++)
				{
					inaMemberName = inaMemberNames.get(k);
					let visibility = oFF.QInAConverter.lookupResultSetVisibility(inaVisiblitySettings.getStringByKey(inaMemberName));
					dimension.getOverdefinedMemberManager().setVisibilityOverride(inaMemberName, visibility);
				}
			}
			if (inaStructure.containsKey("NumericScaleOverride"))
			{
				let inaNumericScaleSettings = inaStructure.getStructureByKey("NumericScaleOverride");
				inaMemberNames = inaNumericScaleSettings.getKeysAsReadOnlyList();
				for (let l = 0; l < inaMemberNames.size(); l++)
				{
					inaMemberName = inaMemberNames.get(l);
					dimension.getOverdefinedMemberManager().setNumericScaleOverride(inaMemberName, inaNumericScaleSettings.getIntegerByKey(inaMemberName));
				}
			}
			if (dimension.getModelCapabilities().supportsMemberVisibility() && inaStructure.containsKey("NumericShiftOverride"))
			{
				let inaNumericShiftSettings = inaStructure.getStructureByKey("NumericShiftOverride");
				inaMemberNames = inaNumericShiftSettings.getKeysAsReadOnlyList();
				for (let m = 0; m < inaMemberNames.size(); m++)
				{
					inaMemberName = inaMemberNames.get(m);
					dimension.getOverdefinedMemberManager().setNumericShiftOverride(inaMemberName, inaNumericShiftSettings.getIntegerByKey(inaMemberName));
				}
			}
			if (inaStructure.containsKey("NumericPrecisionOverride"))
			{
				let inaNumericPrecisionSettings = inaStructure.getStructureByKey("NumericPrecisionOverride");
				inaMemberNames = inaNumericPrecisionSettings.getKeysAsReadOnlyList();
				for (let n = 0; n < inaMemberNames.size(); n++)
				{
					inaMemberName = inaMemberNames.get(n);
					dimension.getOverdefinedMemberManager().setNumericPrecisionOverride(inaMemberName, inaNumericPrecisionSettings.getIntegerByKey(inaMemberName));
				}
			}
			let overrideText = inaStructure.getStringByKey("OverrideText");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(overrideText))
			{
				dimension.setOverrideText(overrideText);
			}
		}
		let accountTypeAttributeName = inaStructure.getStringByKey("AccountTypeAttributeName");
		let dimensionMetadataBase = dimension.getMetadataBase();
		if (oFF.notNull(accountTypeAttributeName))
		{
			dimensionMetadataBase.setAccountTypeAttributeName(accountTypeAttributeName);
		}
		let hasDayTimeYYYYMMDDFormat = inaStructure.getBooleanByKeyExt("HasDayTimeYYYYMMDDFormat", false);
		if (hasDayTimeYYYYMMDDFormat)
		{
			dimensionMetadataBase.setHasDayTimeYYYYMMDDFormat(hasDayTimeYYYYMMDDFormat);
		}
		dimension.setTotalsModified(inaStructure.getBooleanByKeyExt("TotalsModified", dimension.isTotalsModified()));
	}
	return dimension;
};
oFF.QInARepoDimension.prototype.importFieldsLayout = function(importer, inaDimension, dimension, context)
{
	let inaAllFields = inaDimension.getListByKey("FieldSettings");
	if (oFF.notNull(inaAllFields))
	{
		let inaAllFieldSize = inaAllFields.size();
		for (let p1 = 0; p1 < inaAllFieldSize; p1++)
		{
			importer.importComponent(oFF.OlapComponentType.FIELD, inaAllFields.getStructureAt(p1), null, dimension, context);
		}
	}
	let inaAllAttributes = inaDimension.getListByKey("AttributeSettings");
	if (oFF.notNull(inaAllAttributes))
	{
		let inaAllAttributesSize = inaAllAttributes.size();
		for (let p2 = 0; p2 < inaAllAttributesSize; p2++)
		{
			importer.importAttribute(inaAllAttributes.getStructureAt(p2), dimension, context);
		}
	}
	let clientDefaultField = dimension.getFieldByName(inaDimension.getStringByKey("ClientDefaultTextAttribute"));
	dimension.setClientDefaultTextField(clientDefaultField);
	clientDefaultField = dimension.getFieldByName(inaDimension.getStringByKey("ClientDefaultKeyAttribute"));
	dimension.setClientDefaultKeyField(clientDefaultField);
	oFF.QInARepoDimension.importRsFields(importer, inaDimension, dimension);
	oFF.QInARepoDimension.importRsAttributeNodes(importer, inaDimension, dimension);
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaDimension.containsKey("FieldLayoutType"))
	{
		let fieldLayoutType = oFF.QInAConverter.lookupFieldLayoutType(inaDimension.getStringByKey("FieldLayoutType"));
		dimension.setFieldLayoutType(fieldLayoutType);
	}
	if (inaDimension.containsKey("TextFieldModified"))
	{
		dimension.getFieldContainerBase().setShouldUseActualTextField(inaDimension.getBooleanByKey("TextFieldModified"));
	}
};
oFF.QInARepoDimension.prototype.migratePlaceholderId = function(importer, queryModel, placeholderId)
{
	let newPlaceholderId = placeholderId;
	let placeholderPrefix = oFF.XStringUtils.concatenate2("].&[", oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX);
	if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && oFF.notNull(queryModel) && queryModel.getDimensionByType(oFF.DimensionType.ACCOUNT) !== null && oFF.XString.startsWith(placeholderId, "[") && oFF.XString.indexOf(placeholderId, placeholderPrefix) !== -1)
	{
		let index = oFF.XString.indexOf(placeholderId, oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX);
		let endindex = oFF.XString.indexOfFrom(placeholderId, "]", index);
		newPlaceholderId = oFF.XString.substring(placeholderId, index, endindex);
	}
	return newPlaceholderId;
};

oFF.QInARepoDimensions = function() {};
oFF.QInARepoDimensions.prototype = new oFF.QInARepository();
oFF.QInARepoDimensions.prototype._ff_c = "QInARepoDimensions";

oFF.QInARepoDimensions._isForRendering = function(exporterMode, dimension)
{
	let dimAxisType = dimension.getAxisType();
	return exporterMode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING && dimAxisType !== oFF.AxisType.ROWS && dimAxisType !== oFF.AxisType.COLUMNS;
};
oFF.QInARepoDimensions.exportAxisDimensions = function(exporter, axis, parameterDimensionList, exportedDimensions)
{
	let dimCount = axis.getDimensionCount();
	for (let i = 0; i < dimCount; i++)
	{
		let dimension = axis.get(i);
		if (oFF.QInARepoDimensions._isForRendering(exporter.getMode(), dimension))
		{
			continue;
		}
		oFF.QInARepoDimensions.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInARepoDimensions.exportAxisDimensionsWithHeuristic = function(exporter, axis, parameterDimensionList, usedDimensions, exportedDimensions)
{
	let queryModel = axis.getQueryModel();
	let repositoryData = exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA);
	let optimizedExportModeActive = queryModel.isOptimizedExportModeActive();
	let skipUnusedDimension = queryModel.skipSerializationOfUnusedDimensionAndSort() && (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS);
	let dimCount = axis.getDimensionCount();
	for (let i = 0; i < dimCount; i++)
	{
		let dimension = axis.get(i);
		if (optimizedExportModeActive && dimension.isIgnoredOnOptimizedExport() || skipUnusedDimension && !dimension.isHierarchyActive())
		{
			continue;
		}
		if (repositoryData && !usedDimensions.contains(dimension.getName()))
		{
			continue;
		}
		oFF.QInARepoDimensions.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInARepoDimensions.exportDimension = function(exporter, dimension, inaDimensionList, exportedDimensions)
{
	if (!exportedDimensions.contains(dimension.getName()))
	{
		exportedDimensions.add(dimension.getName());
		let isTransientFormulaCalcDim = dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION) && dimension.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT) && dimension.getAxis() !== null && dimension.getAxisType() === oFF.AxisType.FREE;
		let shouldContinueExporting = !isTransientFormulaCalcDim && (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION) || dimension.getModCounter() > 0);
		if (shouldContinueExporting)
		{
			inaDimensionList.add(exporter.exportDimension(dimension, null));
		}
	}
};
oFF.QInARepoDimensions.prototype.containsFormulaCalculatedDimensionInInaList = function(inaList, dimensionName)
{
	let size = inaList.size();
	for (let k = 0; k < size; k++)
	{
		let inaDimension = inaList.getStructureAt(k);
		let inaDimensionName = inaDimension.getStringByKey("Name");
		if (oFF.XString.isEqual(dimensionName, inaDimensionName))
		{
			return inaDimension.containsKey("CType") && oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION;
		}
	}
	return false;
};
oFF.QInARepoDimensions.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaDimensionList = oFF.PrFactory.createList();
	let query = modelComponent;
	let exportedDimensions = oFF.XHashSetOfString.create();
	oFF.QInARepoDimensions.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.ROWS), inaDimensionList, exportedDimensions);
	oFF.QInARepoDimensions.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.COLUMNS), inaDimensionList, exportedDimensions);
	let usedDimensions = oFF.XHashSetOfString.create();
	if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
	{
		oFF.DimensionUsageAnalyzer2.setupHeuristic(query, usedDimensions);
	}
	oFF.QInARepoDimensions.exportAxisDimensionsWithHeuristic(exporter, query.getAxis(oFF.AxisType.FREE), inaDimensionList, usedDimensions, exportedDimensions);
	return inaDimensionList;
};
oFF.QInARepoDimensions.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	inaStructure.put("Elements", inaList);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoDimensions.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DIMENSIONS;
};
oFF.QInARepoDimensions.prototype.getTagName = function()
{
	return "DimensionsRepo";
};
oFF.QInARepoDimensions.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	if (oFF.notNull(inaList))
	{
		let originalMode = importer.getOriginalMode();
		if (originalMode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && !originalMode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DELTA))
		{
			let loadedDimensions = queryModel.getLoadedDimensions();
			let loadedDimensionsSize = loadedDimensions.size();
			for (let i = loadedDimensionsSize - 1; i >= 0; i--)
			{
				let loadedDimension = loadedDimensions.get(i);
				let loadedDimensionName = loadedDimension.getName();
				if (loadedDimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION) && oFF.notNull(loadedDimensionName))
				{
					if (!this.containsFormulaCalculatedDimensionInInaList(inaList, loadedDimensionName))
					{
						queryModel.removeCalculatedDimensionByName(loadedDimensionName);
					}
				}
			}
		}
		let dimensionManager = queryModel.getDimensionManagerBase();
		let freeAxis = queryModel.getFreeAxis();
		freeAxis.addAll(dimensionManager);
		let size = inaList.size();
		let dimensionReferences = dimensionManager.getDimensionReferences();
		for (let j = 0; j < size; j++)
		{
			let inaDimension = inaList.getStructureAt(j);
			let dimName = inaDimension.getStringByKey("Name");
			if (inaDimension.containsKey("CType") && oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
			{
				let existingCalcDimension = queryModel.getDimensionByName(dimName);
				let importFormulaCalculatedDimension = importer.importFormulaCalculatedDimension(inaDimension, queryModel, existingCalcDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importFormulaCalculatedDimension);
			}
		}
		let skipUnusedDimension = queryModel.skipSerializationOfUnusedDimensionAndSort() && (importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS);
		for (let k = 0; k < size; k++)
		{
			let inaDimension = inaList.getStructureAt(k);
			let dimName = inaDimension.getStringByKey("Name");
			let dimAxisString = inaDimension.getStringByKey("Axis");
			let dimAxisType = oFF.QInAConverter.lookupAxisType(dimAxisString);
			if (skipUnusedDimension && dimAxisType !== oFF.AxisType.ROWS && dimAxisType !== oFF.AxisType.COLUMNS)
			{
				let hierarchy = inaDimension.getStructureByKey("HierarchyRepo");
				if (oFF.isNull(hierarchy) || !hierarchy.getBooleanByKeyExt("HierarchyActive", false))
				{
					continue;
				}
			}
			let dimension = null;
			if (inaDimension.containsKey("FieldMappings"))
			{
				let importCalculatedDimension = importer.importCalculatedDimension(inaDimension, queryModel);
				dimensionManager.addDimension(importCalculatedDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importCalculatedDimension);
			}
			else if (!inaDimension.containsKey("CType") || oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) !== oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
			{
				if (dimensionReferences.containsKey(dimName))
				{
					dimension = dimensionManager.getDimensionByNameFromExistingMetadata(dimName);
				}
				importer.importDimension(inaDimension, queryModel);
			}
			if (oFF.isNull(dimension))
			{
				dimension = dimensionManager.getDimensionByNameInternal(dimName);
				if (oFF.isNull(dimension))
				{
					continue;
				}
			}
			if (oFF.isNull(dimAxisString))
			{
				dimAxisString = inaDimension.getStringByKeyExt("AxisDefault", "Free");
			}
			queryModel.getAxis(oFF.QInAConverter.lookupAxisType(dimAxisString)).addForRepoImport(dimension);
		}
	}
	return queryModel;
};
oFF.QInARepoDimensions.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoDrillManager = function() {};
oFF.QInARepoDrillManager.prototype = new oFF.QInARepository();
oFF.QInARepoDrillManager.prototype._ff_c = "QInARepoDrillManager";

oFF.QInARepoDrillManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let drillManager = modelComponent;
	let capabilities = drillManager.getModelCapabilities();
	let inaOperationsList = null;
	let drillOperations = drillManager.getDrillOperationsForInARepo();
	let drillOpCount = drillOperations.size();
	if (drillOpCount > 0)
	{
		let queryModel = drillManager.getQueryModel();
		let inaDeltaOperation = null;
		let deltaDimension = null;
		inaOperationsList = oFF.PrFactory.createList();
		let deltaOperation = null;
		if (capabilities.supportsHierarchyNavigationDeltaMode())
		{
			deltaOperation = drillOperations.get(drillOpCount - 1);
			let targetDimensionDelta = deltaOperation.getTargetDimension();
			if (oFF.notNull(targetDimensionDelta) && targetDimensionDelta.isHierarchyNavigationDeltaMode())
			{
				deltaDimension = targetDimensionDelta;
				inaDeltaOperation = exporter.exportDrillOperation(deltaOperation);
			}
		}
		let isAbap = exporter.isAbap(queryModel);
		let i;
		for (i = 0; i < drillOpCount; i++)
		{
			let operation = drillOperations.get(i);
			if (operation.getType() === oFF.DrillOperationType.CONTEXT)
			{
				let targetDimension = operation.getTargetDimension();
				if (oFF.isNull(deltaDimension) || deltaDimension !== targetDimension)
				{
					if (!isAbap && targetDimension.getInitialDrillLevel() < 0 && operation.getDrillState() === oFF.DrillState.EXPANDED)
					{
						continue;
					}
					inaOperationsList.add(exporter.exportDrillOperation(operation));
				}
			}
		}
		if (oFF.notNull(inaDeltaOperation))
		{
			inaOperationsList.add(inaDeltaOperation);
		}
		if (inaOperationsList.isEmpty())
		{
			inaOperationsList = null;
		}
	}
	return inaOperationsList;
};
oFF.QInARepoDrillManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	if (oFF.notNull(inaList))
	{
		inaStructure.put("Elements", inaList);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoDrillManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_MANAGER;
};
oFF.QInARepoDrillManager.prototype.getTagName = function()
{
	return "HierarchyNavigationsRepo";
};
oFF.QInARepoDrillManager.prototype.getZoomDrillPath = function(importer, drillManager, inaStructure, context)
{
	let drillPath = oFF.XList.create();
	let drillContext = inaStructure.getListByKey("DrillContextMembers");
	if (oFF.notNull(drillContext))
	{
		let size = drillContext.size();
		for (let idxHierCtx = 0; idxHierCtx < size; idxHierCtx++)
		{
			let drillCtx = drillContext.getStructureAt(idxHierCtx);
			let drillPathElement = importer.importDrillPathElement(drillCtx, drillManager, context);
			drillPath.add(drillPathElement);
		}
	}
	let drillState = inaStructure.getStringByKey("DrillState");
	let drillMember = inaStructure.getStructureByKey("DrillMember");
	if (oFF.isNull(drillMember) || oFF.isNull(drillState))
	{
		return null;
	}
	let drillPathElementMember = importer.importDrillPathElement(drillMember, drillManager, context);
	drillPath.add(drillPathElementMember);
	return drillPath;
};
oFF.QInARepoDrillManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let drillManager = modelComponent;
	let size;
	drillManager.removeAllContextDrillOperations();
	drillManager.removeZoomDrillOperationsByDimension(null);
	if (oFF.notNull(inaList))
	{
		let previousZoomStackPosition = -1;
		size = inaList.size();
		for (let idxHierNav = 0; idxHierNav < size; idxHierNav++)
		{
			let subStructure = inaList.getStructureAt(idxHierNav);
			let zoomDrillStackPosition = subStructure.getIntegerByKeyExt("ZoomDrillStackPosition", -1);
			if (zoomDrillStackPosition === -1)
			{
				importer.importDrillOperation(subStructure, drillManager, context);
			}
			else if (zoomDrillStackPosition > -1)
			{
				let zoomDrillPath = this.getZoomDrillPath(importer, drillManager, subStructure, context);
				if (oFF.XCollectionUtils.hasElements(zoomDrillPath))
				{
					if (zoomDrillStackPosition !== previousZoomStackPosition)
					{
						let drillElementDimension = zoomDrillPath.get(zoomDrillPath.size() - 1).getDimension();
						if (oFF.notNull(drillElementDimension))
						{
							drillManager.pushEmptyZoomDrillForDimension(drillElementDimension);
							previousZoomStackPosition = zoomDrillStackPosition;
						}
					}
					let hideRoots = subStructure.getIntegerByKeyExt("DrillOffset", 0) > 0;
					let zoomDrillOperation = drillManager.addZoomDrillPath(zoomDrillPath, hideRoots);
					if (subStructure.containsKey("HierarchyNavigationCounter"))
					{
						zoomDrillOperation.setDrillCounter(subStructure.getIntegerByKey("HierarchyNavigationCounter"));
					}
				}
			}
		}
	}
	return modelComponent;
};
oFF.QInARepoDrillManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoDrillPathElement = function() {};
oFF.QInARepoDrillPathElement.prototype = new oFF.QInARepository();
oFF.QInARepoDrillPathElement.prototype._ff_c = "QInARepoDrillPathElement";

oFF.QInARepoDrillPathElement.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let element = modelComponent;
	let name = element.getName();
	let fieldName = element.getFieldName();
	let shadowKeyFieldValue = element.getShadowKeyFieldValue();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(shadowKeyFieldValue))
	{
		name = shadowKeyFieldValue;
		fieldName = element.getShadowKeyFieldName();
	}
	if (oFF.isNull(name))
	{
		inaStructure.putNull("Member");
	}
	else
	{
		let memberName = oFF.QInAExportUtil.getMeasureMemberNameByAlias(element.getQueryModel(), name, exporter);
		inaStructure.putString("Member", memberName);
	}
	inaStructure.putString("FieldName", fieldName);
	inaStructure.putStringNotNullAndNotEmpty("FieldNameZoom", element.getZoomKeyFieldName());
	inaStructure.putStringNotNullAndNotEmpty("FieldValueZoom", element.getZoomKeyFieldValue());
	let dimension = element.getDimension();
	oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "DimensionName", dimension);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoDrillPathElement.prototype.getComponentType = function()
{
	return oFF.MemberType.DRILL_PATH_ELEMENT;
};
oFF.QInARepoDrillPathElement.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let parentModelComponent = parentComponent;
	let queryModel = parentModelComponent.getContext().getQueryModel();
	let fieldName = inaStructure.getStringByKey("FieldName");
	let dimensionName = inaStructure.getStringByKey("DimensionName");
	let dimension;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensionName);
	}
	else
	{
		let field = queryModel.getFieldByNameOrAlias(fieldName);
		if (oFF.isNull(field))
		{
			dimension = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimension))
			{
				field = dimension.getKeyField();
				fieldName = field.getName();
			}
		}
		else
		{
			dimension = field.getDimension();
		}
	}
	let element = oFF.QDrillPathElement._create(context);
	element.setDimension(dimension);
	let member = inaStructure.getStringByKey("Member");
	element.setName(member);
	element.setFieldName(fieldName);
	element.setZoomKeyFieldName(inaStructure.getStringByKey("FieldNameZoom"));
	element.setZoomKeyFieldValue(inaStructure.getStringByKey("FieldValueZoom"));
	return element;
};

oFF.QInARepoDrillPathOperation = function() {};
oFF.QInARepoDrillPathOperation.prototype = new oFF.QInARepository();
oFF.QInARepoDrillPathOperation.prototype._ff_c = "QInARepoDrillPathOperation";

oFF.QInARepoDrillPathOperation.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let operation = modelComponent;
	if (operation.getType() === oFF.DrillOperationType.CONTEXT)
	{
		let inADrillState = oFF.QInAConverter.lookupDrillStateInA(operation.getDrillState());
		inaStructure.putString("DrillState", inADrillState);
		if (exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE))
		{
			inaStructure.putInteger("HierarchyNavigationCounter", operation.getDrillCounter());
		}
		let relativeLevelCount = operation.getRelativeLevelCount();
		if (relativeLevelCount !== 1)
		{
			inaStructure.putInteger("DrillLevel", relativeLevelCount);
		}
		if (operation.getZoomStackPosition() !== -1)
		{
			inaStructure.putInteger("ZoomDrillStackPosition", operation.getZoomStackPosition());
		}
		if (operation.getRelativeLevelOffset() !== 0)
		{
			inaStructure.putInteger("DrillOffset", operation.getRelativeLevelOffset());
		}
		let drillPath = operation.getDrillPath();
		let drillPathCount = drillPath.size();
		if (drillPathCount > 0)
		{
			let element = drillPath.get(drillPathCount - 1);
			let inaPathElement;
			if (!element.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
			{
				inaPathElement = exporter.exportDrillPathElement(element, false);
				inaStructure.put("DrillMember", inaPathElement);
			}
			if (drillPathCount > 1)
			{
				let inaDrillContextMembers = oFF.PrFactory.createList();
				inaStructure.put("DrillContextMembers", inaDrillContextMembers);
				for (let k = 0; k < drillPathCount - 1; k++)
				{
					element = drillPath.get(k);
					if (!element.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
					{
						inaPathElement = exporter.exportDrillPathElement(element, true);
						inaDrillContextMembers.add(inaPathElement);
					}
				}
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoDrillPathOperation.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_OPERATION;
};
oFF.QInARepoDrillPathOperation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let drillOperation = null;
	let drillManager = parentComponent;
	let drillState = inaStructure.getStringByKey("DrillState");
	let drillMember = inaStructure.getStructureByKey("DrillMember");
	if (oFF.notNull(drillMember) && oFF.notNull(drillState))
	{
		let drillPath = oFF.XList.create();
		let drillContext = inaStructure.getListByKey("DrillContextMembers");
		if (oFF.notNull(drillContext))
		{
			let size = drillContext.size();
			for (let idxHierCtx = 0; idxHierCtx < size; idxHierCtx++)
			{
				let drillCtx = drillContext.getStructureAt(idxHierCtx);
				let drillPathElement = importer.importDrillPathElement(drillCtx, drillManager, context);
				drillPath.add(drillPathElement);
			}
		}
		let drillPathElementMember = importer.importDrillPathElement(drillMember, drillManager, context);
		drillPath.add(drillPathElementMember);
		drillOperation = drillManager.setDrillState(drillPath, oFF.QInAConverter.lookupDrillStateOp(drillState));
		let level = inaStructure.getIntegerByKeyExt("DrillLevel", 1);
		drillOperation.setRelativeLevelCount(level);
		if (inaStructure.containsKey("HierarchyNavigationCounter"))
		{
			let hierarchyNavigationCounter = inaStructure.getIntegerByKey("HierarchyNavigationCounter");
			drillOperation.setDrillCounter(hierarchyNavigationCounter);
		}
	}
	return drillOperation;
};

oFF.QInARepoExceptions = function() {};
oFF.QInARepoExceptions.prototype = new oFF.QInARepository();
oFF.QInARepoExceptions.prototype._ff_c = "QInARepoExceptions";

oFF.QInARepoExceptions.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaResult = null;
	if (this.isVersion1(exporter, modelComponent))
	{
		inaResult = this.exportFormatV1(exporter, modelComponent);
	}
	else if (this.isVersion2(exporter, modelComponent))
	{
		inaResult = this.exportFormatV2(exporter, modelComponent);
	}
	return inaResult;
};
oFF.QInARepoExceptions.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let list = this.exportComponentWithList(exporter, modelComponent, flags);
	if (oFF.notNull(list))
	{
		inaStructure.put("Elements", list);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoExceptions.prototype.exportEvaluates = function(evaluates, exporter, inaStructure, isBw)
{
	let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || evaluates.getModCounter() > 0;
	if (shouldContinueExporting)
	{
		if (evaluates.hasElements())
		{
			let inaEvaluatesList = inaStructure.putNewList("EvaluateOn");
			let sizeEvaluates = evaluates.size();
			for (let iEvaluate = 0; iEvaluate < sizeEvaluates; iEvaluate++)
			{
				let inaEvaluateStruct = inaEvaluatesList.addNewStructure();
				let evaluate = evaluates.get(iEvaluate);
				inaEvaluateStruct.putString("Name", evaluate.getField().getName());
				inaEvaluateStruct.putString("Evaluate", evaluate.getEvaluate().toString());
				let comparisonOperator = evaluate.getOperator();
				let comparison;
				if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
				{
					comparison = "NOTBETWEEN";
				}
				else
				{
					comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
				}
				inaEvaluateStruct.putString("Comparison", comparison);
				oFF.QInAValueUtils.exportPlaceholderValue(exporter, "Low", inaEvaluateStruct, evaluate.getLowValue(), evaluate.getValueType(), evaluate.getQueryModel());
				if (!inaEvaluateStruct.containsKey("Low"))
				{
					inaEvaluateStruct.putString("Low", "");
				}
				if (comparisonOperator.getNumberOfParameters() > 1)
				{
					oFF.QInAValueUtils.exportPlaceholderValue(exporter, "High", inaEvaluateStruct, evaluate.getHighValue(), evaluate.getValueType(), evaluate.getQueryModel());
				}
			}
		}
	}
};
oFF.QInARepoExceptions.prototype.exportException = function(exporter, exception, isBw)
{
	let inaExceptionStruct = oFF.PrFactory.createStructure();
	if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && !exception.isChangeable() && exception.hasPropertyChanged(oFF.QExceptionProperties.QY_ACTIVE))
	{
		inaExceptionStruct.putString("Name", exception.getName());
		inaExceptionStruct.putBoolean("Active", exception.isActive());
		inaExceptionStruct.putBoolean("Changegable", exception.isChangeable());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exception.isChangeable())
	{
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exception.hasPropertyChanged(oFF.QExceptionProperties.QY_ACTIVE))
		{
			inaExceptionStruct.putBoolean("Active", exception.isActive());
		}
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exception.hasPropertyChanged(oFF.QExceptionProperties.QY_EVALUATE_BEFORE_POST_AGGREGATION))
		{
			inaExceptionStruct.putBoolean("EvaluateBeforePostAggregation", !exception.isEvaluatedAfterCalculations());
		}
		inaExceptionStruct.putBoolean("Changegable", exception.isChangeable());
		let thresholds = exception.getThresholds();
		this.exportThresholds(thresholds, exporter, inaExceptionStruct, isBw);
		this.exportEvaluates(exception.getEvaluates(), exporter, inaExceptionStruct, isBw);
		inaExceptionStruct.putString("Name", exception.getName());
		inaExceptionStruct.putString("Text", exception.getText());
		let headerSetting = exception.getHeaderSetting();
		if (headerSetting !== oFF.QExceptionHeaderSettings.NONE)
		{
			inaExceptionStruct.putString("ApplySettingsToHeader", headerSetting.getName());
		}
		inaExceptionStruct.putString("EvaluateDefault", exception.getEvaluateDefault().toString());
	}
	let repoDeltaFeatureActivated = exception.getSession().hasFeature(oFF.FeatureToggleOlap.INA_REPOSITORY_DELTA);
	if (repoDeltaFeatureActivated && exception.canMaterializeCompleteObject())
	{
		inaExceptionStruct.putBoolean("UserDefinedComponent", true);
	}
	return inaExceptionStruct;
};
oFF.QInARepoExceptions.prototype.exportFormatV1 = function(exporter, structureMember)
{
	let inaExceptionsList = null;
	let exceptions = structureMember.getExceptions();
	if (oFF.notNull(exceptions))
	{
		let sizeExceptions = exceptions.size();
		if (sizeExceptions > 0)
		{
			inaExceptionsList = oFF.PrFactory.createList();
			let isBw = exporter.isAbap(structureMember);
			for (let iException = 0; iException < sizeExceptions; iException++)
			{
				let exception = exceptions.get(iException);
				let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exception.isChangeable() || exception.getModCounter() > 0;
				if (shouldContinueExporting)
				{
					let structure = this.exportException(exporter, exception, isBw);
					if (oFF.isNull(structure))
					{
						break;
					}
					inaExceptionsList.add(structure);
				}
			}
		}
	}
	return inaExceptionsList;
};
oFF.QInARepoExceptions.prototype.exportFormatV2 = function(exporter, queryModel)
{
	let exceptions = null;
	let exceptionManager = queryModel.getExceptionManager();
	let size = exceptionManager.size();
	if (size > 0)
	{
		exceptions = oFF.PrFactory.createList();
		let isBw = exporter.isAbap(queryModel);
		for (let i = 0; i < size; i++)
		{
			let exception = exceptionManager.get(i);
			let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exception.isChangeable() || exception.getModCounter() > 0;
			if (shouldContinueExporting)
			{
				let inaException = this.getExportedExceptionStructureByName(exceptions, exception.getName());
				if (oFF.isNull(inaException))
				{
					inaException = this.exportException(exporter, exception, isBw);
					if (oFF.notNull(inaException))
					{
						inaException.putNewList("StructureContext");
						exceptions.add(inaException);
					}
				}
				if (oFF.notNull(inaException))
				{
					let structureContext = inaException.getListByKey("StructureContext");
					this.exportStructureContextItem(exporter, structureContext, exception.getMeasure(), exception);
					this.exportStructureContextItem(exporter, structureContext, exception.getStructure(), exception);
				}
			}
		}
	}
	return exceptions;
};
oFF.QInARepoExceptions.prototype.exportSettings = function(threshold, exporter, inaThresholdStruct)
{
	let inaSettings = inaThresholdStruct.putNewList("Settings");
	let size = threshold.size();
	for (let iSetting = 0; iSetting < size; iSetting++)
	{
		let setting = threshold.get(iSetting);
		let inaSetting = inaSettings.addNewStructure();
		inaSetting.putString("Name", setting.getName());
		inaSetting.putInteger("Priority", setting.getPriority());
		let value = setting.getValue();
		if (oFF.isNull(value) || oFF.XString.isEqual(value, ""))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Exception Threshold Setting is missing it's value");
		}
		else
		{
			inaSetting.putString("Value", value);
		}
	}
};
oFF.QInARepoExceptions.prototype.exportStructureContextItem = function(exporter, structureContext, member, exception)
{
	if (oFF.notNull(member))
	{
		let structure = structureContext.addNewStructure();
		let dimension = member.getDimension();
		structure.putString("DimensionName", dimension.getName());
		structure.putString("MemberName", member.getName());
		let evaluateAllMembers = exception.isEvaluateAllMembers(dimension);
		let deltaExportMode = exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA;
		let measureDimension = dimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE;
		let shouldWrite = measureDimension && exception.hasPropertyChanged(oFF.QExceptionProperties.QY_EVALUATE_ALL_MEMBERS_MEASURE_DIMENSION) || !measureDimension && exception.hasPropertyChanged(oFF.QExceptionProperties.QY_EVALUATE_ALL_MEMBERS_SECONDARY_STRUCTURE);
		if (!deltaExportMode && evaluateAllMembers || deltaExportMode && shouldWrite)
		{
			structure.putBoolean("EvaluateAllMembers", evaluateAllMembers);
		}
		let memberForDisplay = exception.getDisplayOnOtherMember(member);
		oFF.QInAExportUtil.setNameIfNotNull(structure, "DisplayOnOtherMember", memberForDisplay);
	}
};
oFF.QInARepoExceptions.prototype.exportThresholds = function(thresholds, exporter, inaStructure, isBw)
{
	let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || thresholds.getModCounter() > 0;
	if (shouldContinueExporting)
	{
		let inaThresholdsList = inaStructure.putNewList("Threshold");
		let sizeThresholds = thresholds.size();
		for (let iThreshold = 0; iThreshold < sizeThresholds; iThreshold++)
		{
			let threshold = thresholds.get(iThreshold);
			let inaThresholdStruct = inaThresholdsList.addNewStructure();
			let name = threshold.getName();
			if (!oFF.XString.isEqual(name, "Settings"))
			{
				inaThresholdStruct.putStringNotNull("Name", name);
			}
			let comparisonOperator = threshold.getOperator();
			let comparison;
			if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
			{
				comparison = "NOTBETWEEN";
			}
			else
			{
				comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
			}
			inaThresholdStruct.putString("Comparison", comparison);
			let isDouble = threshold.getValueType() === oFF.XValueType.DOUBLE;
			if (threshold.getLowXValue() !== null)
			{
				if (isDouble)
				{
					inaThresholdStruct.putDouble("Low", threshold.getLowValue());
				}
				else
				{
					inaThresholdStruct.putString("Low", threshold.getLow());
				}
			}
			if (threshold.getHighXValue() !== null && comparisonOperator.getNumberOfParameters() > 1)
			{
				if (isDouble)
				{
					inaThresholdStruct.putDouble("High", threshold.getHighValue());
				}
				else
				{
					inaThresholdStruct.putString("High", threshold.getHigh());
				}
			}
			if (!threshold.isEmpty())
			{
				this.exportSettings(threshold, exporter, inaThresholdStruct);
			}
			else
			{
				inaThresholdStruct.putInteger("AlertLevel", threshold.getAlertLevel().getLevel());
			}
		}
	}
};
oFF.QInARepoExceptions.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_MANAGER;
};
oFF.QInARepoExceptions.prototype.getExportedExceptionStructureByName = function(exceptions, exceptionName)
{
	let inaResult = null;
	let size = exceptions.size();
	for (let i = 0; i < size; i++)
	{
		let inaStructure = exceptions.getStructureAt(i);
		if (oFF.XString.isEqual(inaStructure.getStringByKey("Name"), exceptionName))
		{
			inaResult = inaStructure;
			break;
		}
	}
	return inaResult;
};
oFF.QInARepoExceptions.prototype.getMemberFromContextItem = function(structure, dimension, evaluateAllMembers)
{
	let member = dimension.getStructureMember(structure.getStringByKey("MemberName"));
	if (oFF.isNull(member))
	{
		let allStructureMembers = dimension.getAllStructureMembers();
		if (evaluateAllMembers && !allStructureMembers.isEmpty())
		{
			member = allStructureMembers.get(0);
		}
	}
	return member;
};
oFF.QInARepoExceptions.prototype.getTagName = function()
{
	return "ExceptionsRepo";
};
oFF.QInARepoExceptions.prototype.importComponentWithList = function(importer, inaList, component, parentComponent, context)
{
	let modelComponent = component;
	let exceptionManager = modelComponent.getQueryModel().getExceptionManager();
	exceptionManager.queueEventing();
	if (this.isVersion1(importer, modelComponent))
	{
		exceptionManager.removeAllExceptionsOfMeasure(modelComponent);
		this.importFormatV1(importer, inaList, modelComponent, exceptionManager);
	}
	else if (this.isVersion2(importer, modelComponent))
	{
		exceptionManager.removeClientExceptions();
		this.importFormatV2(importer, inaList, modelComponent, exceptionManager);
	}
	exceptionManager.resumeEventing();
	return exceptionManager;
};
oFF.QInARepoExceptions.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaElements = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaElements, modelComponent, parentComponent, context);
	}
	return modelComponent;
};
oFF.QInARepoExceptions.prototype.importContextItem = function(structure, queryModel, exceptionManager, exception, importer, inaException)
{
	let importedException = exception;
	let dimension = queryModel.getDimensionByNameFromExistingMetadata(structure.getStringByKey("DimensionName"));
	if (oFF.notNull(dimension))
	{
		if (oFF.isNull(importedException))
		{
			importedException = this.importExceptionWithoutEvaluates(importer, exceptionManager, inaException);
		}
		if (oFF.notNull(importedException) && importedException.isChangeable())
		{
			let evaluateAllMembers = importedException.isEvaluateAllMembers(dimension);
			if (structure.containsKey("EvaluateAllMembers"))
			{
				evaluateAllMembers = structure.getBooleanByKeyExt("EvaluateAllMembers", false);
			}
			let member = this.getMemberFromContextItem(structure, dimension, evaluateAllMembers);
			if (oFF.notNull(member))
			{
				if (oFF.isNull(exception))
				{
					this.importEvaluates(inaException, member, importedException, importer);
				}
				if (dimension.isMeasureStructure())
				{
					importedException.setMeasure(member);
				}
				else
				{
					importedException.setStructure(member);
				}
				importedException.displayOnOtherMember(member, dimension.getStructureMember(structure.getStringByKey("DisplayOnOtherMember")));
				importedException.setEvaluateAllMembers(dimension, evaluateAllMembers);
			}
		}
	}
	return importedException;
};
oFF.QInARepoExceptions.prototype.importEvaluates = function(inaException, member, newException, importer)
{
	newException.queueEventing();
	let inaEvaluates = inaException.getListByKey("EvaluateOn");
	if (!oFF.PrUtils.isListEmpty(inaEvaluates))
	{
		newException.removeAllEvaluates();
		let size = inaEvaluates.size();
		let queryModel = member.getQueryModel();
		for (let evalIdx = 0; evalIdx < size; evalIdx++)
		{
			let inaEvaluate = inaEvaluates.getStructureAt(evalIdx);
			let fieldName = inaEvaluate.getStringByKey("Name");
			let someField = queryModel.getFieldByName(fieldName);
			if (oFF.isNull(someField))
			{
				let dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
				if (oFF.notNull(dimensionByName))
				{
					someField = dimensionByName.getKeyField();
				}
			}
			if (oFF.isNull(someField))
			{
				someField = member.getKeyFieldValue().getField();
			}
			if (oFF.isNull(someField))
			{
				importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate3("Could not find field '", fieldName, "'!"));
				return;
			}
			if (!inaEvaluate.containsKey("Low"))
			{
				importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate2("No low value for field: ", fieldName));
				return;
			}
			let valueType = someField.getValueType();
			let lowValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "Low", valueType);
			if (importer.hasErrors())
			{
				importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected low valuetype for field: ", valueType.getName()));
				return;
			}
			let newEvaluate = newException._addNewEvaluateWithFieldInternal(someField, lowValue);
			if (inaEvaluate.containsKey("High"))
			{
				let highValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "High", valueType);
				if (importer.hasErrors())
				{
					importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected high valuetype for field: ", valueType.getName()));
					return;
				}
				newEvaluate.setHighValue(highValue);
			}
			newEvaluate.setEvaluate(oFF.QExceptionEvalType.lookupExceptionEvalType(inaEvaluate.getStringByKey("Evaluate")));
			let operatorName = inaEvaluate.getStringByKey("Comparison");
			let operator = oFF.QInAConverter.lookupComparison(operatorName);
			if (oFF.isNull(operator))
			{
				importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate3("Unexpected comparison operator for evaluate: Operator: '", operatorName, "'"));
				return;
			}
			newEvaluate.setOperator(operator);
		}
	}
	newException.resumeEventing();
};
oFF.QInARepoExceptions.prototype.importExceptionWithoutEvaluates = function(importer, exceptionManager, inaException)
{
	let exceptionName = inaException.getStringByKey("Name");
	let exceptionText = inaException.getStringByKey("Text");
	let isChangeable = inaException.getBooleanByKeyExt("Changegable", true);
	let readCompleteExceptionFromRepo = isChangeable || importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE;
	let newException = exceptionManager.getByKey(exceptionName);
	if (oFF.isNull(newException) && readCompleteExceptionFromRepo)
	{
		newException = exceptionManager.addNewException(exceptionName, exceptionText);
		newException.setIsChangeable(isChangeable);
	}
	if (oFF.notNull(newException))
	{
		if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaException.containsKey("Active"))
		{
			let isActive = inaException.getBooleanByKeyExt("Active", true);
			newException.setActive(isActive);
		}
		if (readCompleteExceptionFromRepo)
		{
			newException.stopEventing();
			newException.setIsChangeable(true);
			newException.resumeEventing();
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaException.containsKey("EvaluateDefault"))
			{
				let evalType = oFF.QExceptionEvalType.lookupExceptionEvalType(inaException.getStringByKey("EvaluateDefault"));
				newException.setEvaluateDefault(evalType);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaException.containsKey("ApplySettingsToHeader"))
			{
				let headerSettings = oFF.QExceptionHeaderSettings.lookupExceptionHeaderSetting(inaException.getStringByKey("ApplySettingsToHeader"));
				newException.setHeaderSettingBase(headerSettings);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaException.containsKey("EvaluateBeforePostAggregation"))
			{
				let isEvalAfterCalc = inaException.getBooleanByKeyExt("EvaluateBeforePostAggregation", true);
				newException.setEvaluationAfterCalculations(!isEvalAfterCalc);
			}
			newException.queueEventing();
			this.importThresholds(inaException, newException);
			newException.resumeEventing();
		}
	}
	return newException;
};
oFF.QInARepoExceptions.prototype.importFormatV1 = function(importer, inaList, member, exceptionManager)
{
	if (!oFF.PrUtils.isListEmpty(inaList))
	{
		let size = inaList.size();
		for (let exceptionIdx = 0; exceptionIdx < size; exceptionIdx++)
		{
			let inaException = inaList.getStructureAt(exceptionIdx);
			let newException = this.importExceptionWithoutEvaluates(importer, exceptionManager, inaException);
			if (oFF.notNull(newException) && newException.isChangeable())
			{
				this.importEvaluates(inaException, member, newException, importer);
				newException.setMeasure(member);
				newException.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
			}
		}
	}
};
oFF.QInARepoExceptions.prototype.importFormatV2 = function(importer, inaList, queryModel, exceptionManager)
{
	if (!oFF.PrUtils.isListEmpty(inaList))
	{
		let sizeExceptions = inaList.size();
		for (let iException = 0; iException < sizeExceptions; iException++)
		{
			let inaException = inaList.getStructureAt(iException);
			let structureContext = inaException.getListByKey("StructureContext");
			if (!oFF.PrUtils.isListEmpty(structureContext))
			{
				let exception = this.importContextItem(structureContext.getStructureAt(0), queryModel, exceptionManager, null, importer, inaException);
				if (oFF.notNull(exception) && exception.isChangeable())
				{
					if (structureContext.size() > 1)
					{
						this.importContextItem(structureContext.getStructureAt(1), queryModel, exceptionManager, exception, importer, inaException);
					}
					exception.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
				}
			}
		}
	}
};
oFF.QInARepoExceptions.prototype.importSettings = function(inaSettings, newThreshold)
{
	if (oFF.notNull(inaSettings))
	{
		let size = inaSettings.size();
		for (let iSetting = 0; iSetting < size; iSetting++)
		{
			let inaSetting = inaSettings.getStructureAt(iSetting);
			let name = inaSetting.getStringByKey("Name");
			let priority = inaSetting.getIntegerByKey("Priority");
			let value = inaSetting.getStringByKey("Value");
			if (oFF.notNull(value) && !oFF.XString.isEqual(value, ""))
			{
				let newSetting = newThreshold.addNewSetting(name, priority);
				newSetting.setValue(value);
			}
		}
	}
};
oFF.QInARepoExceptions.prototype.importThresholds = function(inaException, newException)
{
	let inaThresholds = inaException.getListByKey("Threshold");
	if (!oFF.PrUtils.isListEmpty(inaThresholds))
	{
		newException.removeAllThresholds();
		let size = inaThresholds.size();
		for (let thresholdIdx = 0; thresholdIdx < size; thresholdIdx++)
		{
			let inaThreshold = inaThresholds.getStructureAt(thresholdIdx);
			let alertLevel = inaThreshold.getIntegerByKeyExt("AlertLevel", -9999);
			let newThreshold;
			let isDouble = !inaThreshold.hasStringByKey("Low");
			if (isDouble)
			{
				newThreshold = newException._addNewThresholdInternal(inaThreshold.getDoubleByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			else
			{
				newThreshold = newException._addNewThresholdWithStringInternal(inaThreshold.getStringByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			let name = inaThreshold.getStringByKey("Name");
			if (oFF.notNull(name))
			{
				newThreshold.setName(name);
			}
			let operator = oFF.QInAConverter.lookupComparison(inaThreshold.getStringByKey("Comparison"));
			newThreshold.setOperator(operator);
			if (operator.getNumberOfParameters() === 2)
			{
				if (isDouble)
				{
					let highDouble = inaThreshold.getDoubleByKey("High");
					newThreshold.setHighValue(highDouble);
				}
				else
				{
					let highString = inaThreshold.getStringByKey("High");
					newThreshold.setHigh(highString);
				}
			}
			this.importSettings(inaThreshold.getListByKey("Settings"), newThreshold);
		}
	}
};
oFF.QInARepoExceptions.prototype.isVersion1 = function(qInA, modelComponent)
{
	let componentType = modelComponent.getOlapComponentType();
	let supportsExceptionsV2 = modelComponent.getModelCapabilities().supportsExceptionsV2();
	return !supportsExceptionsV2 && componentType.isTypeOf(oFF.MemberType.ABSTRACT_MEMBER);
};
oFF.QInARepoExceptions.prototype.isVersion2 = function(qInA, modelComponent)
{
	let componentType = modelComponent.getOlapComponentType();
	let supportsExceptionsV2 = modelComponent.getModelCapabilities().supportsExceptionsV2();
	return supportsExceptionsV2 && componentType.isTypeOf(oFF.OlapComponentType.QUERY_MODEL);
};

oFF.QInARepoField = function() {};
oFF.QInARepoField.prototype = new oFF.QInARepository();
oFF.QInARepoField.prototype._ff_c = "QInARepoField";

oFF.QInARepoField.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let field = modelComponent;
	inaStructure.putString("Name", field.getName());
	inaStructure.putStringNotNull("DisplayFormat", field.getDisplayFormat());
	let textTransformationType = field.getTextTransformation();
	if (oFF.notNull(textTransformationType))
	{
		let inaTextTransform = oFF.QInAConverter.lookupTextTransformationInA(textTransformationType);
		inaStructure.putString("TextTransformation", inaTextTransform);
	}
	if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		inaStructure.putString("ValueType", oFF.QInAConverter.lookupValueTypeInA(field.getValueType()));
		inaStructure.putString("PresentationType", field.getPresentationType().getName());
		let calcField = field;
		if (calcField.getFormulaItem() !== null)
		{
			oFF.QInARepoMemberAbstract.exportFormulaItem(exporter, calcField.getFormulaItem(), inaStructure.putNewStructure("Formula"), field);
		}
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || calcField.hasPropertyChanged(oFF.QFieldProperties.QY_AUTO_SIGN_FLIP))
		{
			if (calcField.isAutoSignFlip() || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && calcField.hasPropertyChanged(oFF.QFieldProperties.QY_AUTO_SIGN_FLIP))
			{
				inaStructure.putBoolean("AutoSignFlip", calcField.isAutoSignFlip());
			}
		}
		inaStructure.putStringNotNull("CrossCalculationMeasure", calcField.getCrossCalculationMeasure());
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoField.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FIELD;
};
oFF.QInARepoField.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let field = modelComponent;
	if (oFF.isNull(field))
	{
		let name = inaStructure.getStringByKey("Name");
		let dimension = parentComponent;
		if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			field = dimension.addNewFormulaCalcField(oFF.PresentationType.lookup(inaStructure.getStringByKey("PresentationType")), name);
			field.setValueType(oFF.QInAConverter.lookupValueType(inaStructure.getStringByKey("ValueType")));
		}
		else
		{
			field = dimension.getFieldByName(name);
		}
	}
	if (oFF.notNull(field))
	{
		let inaTextTransformation = inaStructure.getStringByKey("TextTransformation");
		if (oFF.notNull(inaTextTransformation))
		{
			let textTransformation = oFF.QInAConverter.lookupTextTransformation(inaTextTransformation);
			field.setTextTransformation(textTransformation);
		}
		field.setDisplayFormat(inaStructure.getStringByKey("DisplayFormat"));
		if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			let inaFormula = inaStructure.getStructureByKey("Formula");
			if (oFF.notNull(inaFormula))
			{
				let newFieldFormula = oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, field.getDimension(), inaStructure.getStructureByKey("Formula"), null, context);
				field.setFormulaItem(newFieldFormula);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("AutoSignFlip"))
			{
				let autoSignFlip = inaStructure.getBooleanByKeyExt("AutoSignFlip", false);
				field.setAutoSignFlip(autoSignFlip);
			}
			let crossCalculationMeasure = inaStructure.getStringByKey("CrossCalculationMeasure");
			if (oFF.notNull(crossCalculationMeasure))
			{
				field.setCrossCalculationMeasure(crossCalculationMeasure);
			}
		}
	}
	return field;
};

oFF.QInARepoFilter = function() {};
oFF.QInARepoFilter.prototype = new oFF.QInARepository();
oFF.QInARepoFilter.prototype._ff_c = "QInARepoFilter";

oFF.QInARepoFilter.prototype.exportFilter = function(exporter, filter, filterExpressionState, layeredFilter, tmpFilter)
{
	return exporter.exportFilterExpression(filterExpressionState);
};
oFF.QInARepoFilter.prototype.isValidFilterExpression = function(filterExpressionState)
{
	if (oFF.isNull(filterExpressionState))
	{
		return false;
	}
	let filterRootElement = filterExpressionState.getFilterRootElement();
	if (oFF.isNull(filterRootElement))
	{
		return false;
	}
	let filterComponentType = filterRootElement.getOlapComponentType();
	return filterComponentType !== oFF.FilterComponentType.FILTER_ACROSS_MODELS && filterComponentType !== oFF.FilterComponentType.FILTER_MEASURE_BASED;
};

oFF.QInARepoFilterAcrossModels = function() {};
oFF.QInARepoFilterAcrossModels.prototype = new oFF.QInARepository();
oFF.QInARepoFilterAcrossModels.prototype._ff_c = "QInARepoFilterAcrossModels";

oFF.QInARepoFilterAcrossModels.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let fam = modelComponent;
	inaStructure.putString("Name", fam.getName());
	let inaLinks = inaStructure.putNewList("Links");
	let iterator = fam.getLinks().getIterator();
	while (iterator.hasNext())
	{
		let inaLink = inaLinks.addNewStructure();
		let link = iterator.next();
		oFF.QInARepoUtils.exportLinkPart(exporter, inaLink.putNewStructure("FirstDimension"), link.getFirstPart());
		oFF.QInARepoUtils.exportLinkPart(exporter, inaLink.putNewStructure("SecondDimension"), link.getSecondPart());
	}
	let inaMeasureNames = inaStructure.putNewList("MeasureNames");
	inaMeasureNames.addAllStrings(fam.getMeasureNames());
	let inaSecondaryMeasureNames = inaStructure.putNewList("SecondaryMeasureNames");
	inaSecondaryMeasureNames.addAllStrings(fam.getSecondaryMeasureNames());
	inaStructure.put("LayeredFilters", oFF.QInARepoUtils.exportLayeredFilters(exporter, fam));
	if (fam.getPreferPrequeryBasedStrategy())
	{
		inaStructure.putBoolean("PreferPrequeryBasedStrategy", true);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterAcrossModels.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.FILTER_ACROSS_MODELS;
};
oFF.QInARepoFilterAcrossModels.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let name = inaStructure.getStringByKey("Name");
	let fam = modelComponent;
	if (oFF.isNull(fam))
	{
		fam = oFF.QFactory.createFilterAcrossModels(context, name);
	}
	let inaLinks = inaStructure.getListByKey("Links");
	let sizeLinks = inaLinks.size();
	for (let idxLink = 0; idxLink < sizeLinks; idxLink++)
	{
		let inaLink = inaLinks.getStructureAt(idxLink);
		let first = oFF.QInARepoUtils.importLinkPart(context, inaLink.getStructureByKey("FirstDimension"));
		let second = oFF.QInARepoUtils.importLinkPart(context, inaLink.getStructureByKey("SecondDimension"));
		if (context.getOlapEnv() !== null)
		{
			let firstPartSharedQueryManager = context.getOlapEnv().getSharedQueryManager(first.getQueryManagerKey());
			if (oFF.notNull(firstPartSharedQueryManager))
			{
				first.setContext(oFF.QFactory.createKeyRefStoreContext(firstPartSharedQueryManager, firstPartSharedQueryManager.getClientQueryObjectStorageName()));
			}
			let secondPartSharedQueryManager = context.getOlapEnv().getSharedQueryManager(second.getQueryManagerKey());
			if (oFF.notNull(secondPartSharedQueryManager))
			{
				second.setContext(oFF.QFactory.createKeyRefStoreContext(secondPartSharedQueryManager, secondPartSharedQueryManager.getClientQueryObjectStorageName()));
			}
		}
		fam.addNewLinkFromParts(first, second);
	}
	let inaMeasureNames = inaStructure.getListByKey("MeasureNames");
	let sizeMeasureNames = inaMeasureNames.size();
	for (let idxMeasureName = 0; idxMeasureName < sizeMeasureNames; idxMeasureName++)
	{
		fam.addMeasureName(inaMeasureNames.getStringAt(idxMeasureName));
	}
	let inaSecondaryMeasureNames = inaStructure.getListByKey("SecondaryMeasureNames");
	if (oFF.notNull(inaSecondaryMeasureNames))
	{
		for (let idxSecondaryMeasureName = 0; idxSecondaryMeasureName < inaSecondaryMeasureNames.size(); idxSecondaryMeasureName++)
		{
			fam.addSecondaryMeasureName(inaSecondaryMeasureNames.getStringAt(idxSecondaryMeasureName));
		}
	}
	oFF.QInARepoUtils.importLayeredFilters(importer, fam, inaStructure.getListByKey("LayeredFilters"), context);
	if (inaStructure.containsKey("PreferPrequeryBasedStrategy"))
	{
		fam.setPreferPrequeryBasedStrategy(true);
	}
	let linkedFilterIterator = fam.getLinkedFilters().getIterator();
	if (linkedFilterIterator.hasNext())
	{
		let linkedFilter = linkedFilterIterator.next();
		let sourceFilterDataset = linkedFilter.getTagging().getByKey("datasetId");
		if (oFF.notNull(sourceFilterDataset))
		{
			let linkIterator = fam.getLinks().getIterator();
			if (linkIterator.hasNext())
			{
				let link = linkIterator.next();
				let firstPartDatasetId = link.getFirstPart().getQueryManagerKey();
				let secondPartDatasetId = link.getSecondPart().getQueryManagerKey();
				let firstPartQueryManager = context.getOlapEnv().getSharedQueryManager(firstPartDatasetId);
				let secondPartQueryManager = context.getOlapEnv().getSharedQueryManager(secondPartDatasetId);
				if (oFF.notNull(firstPartQueryManager) && oFF.notNull(secondPartQueryManager))
				{
					if (oFF.XString.isEqual(sourceFilterDataset, firstPartDatasetId))
					{
						fam.setContext(secondPartQueryManager);
					}
					else
					{
						fam.setContext(firstPartQueryManager);
					}
				}
			}
		}
	}
	return fam;
};

oFF.QInARepoFilterAlgebra = function() {};
oFF.QInARepoFilterAlgebra.prototype = new oFF.QInARepository();
oFF.QInARepoFilterAlgebra.prototype._ff_c = "QInARepoFilterAlgebra";

oFF.QInARepoFilterAlgebra.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let type = modelComponent.getComponentType();
	let qLogicalContainer = modelComponent;
	if (type.isTypeOf(oFF.FilterComponentType.AND))
	{
		inaStructure.putString("Code", "And");
		inaStructure.putString("Id", qLogicalContainer.getUniqueId());
	}
	else if (type.isTypeOf(oFF.FilterComponentType.OR))
	{
		inaStructure.putString("Code", "Or");
		inaStructure.putString("Id", qLogicalContainer.getUniqueId());
	}
	else if (type.isTypeOf(oFF.FilterComponentType.NOT))
	{
		inaStructure.putString("Code", "Not");
		inaStructure.putString("Id", qLogicalContainer.getUniqueId());
	}
	let inaSubSelections = inaStructure.putNewList("SubSelections");
	let size = qLogicalContainer.size();
	for (let i = 0; i < size; i++)
	{
		let inaChildElement = exporter.exportComponent(null, qLogicalContainer.get(i), null, flags);
		if (oFF.notNull(inaChildElement))
		{
			inaSubSelections.add(inaChildElement);
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterAlgebra.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.BOOLEAN_ALGEBRA;
};
oFF.QInARepoFilterAlgebra.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = null;
	if (oFF.notNull(parentComponent))
	{
		let parentFilterElement = parentComponent;
		filterExpression = parentFilterElement.getFilterExpression();
	}
	let code = inaStructure.getStringByKey("Code");
	let filterAlgebra;
	if (oFF.XString.isEqual(code, "And"))
	{
		filterAlgebra = oFF.QFilterAnd._create(context, filterExpression);
	}
	else if (oFF.XString.isEqual(code, "Not"))
	{
		filterAlgebra = oFF.QFilterNot._create(context, filterExpression);
	}
	else
	{
		filterAlgebra = oFF.QFilterOr._create(context, filterExpression);
	}
	let uniqueId = inaStructure.getStringByKey("Id");
	filterAlgebra.setUniqueId(uniqueId);
	let inaSubSelections = inaStructure.getListByKey("SubSelections");
	if (oFF.notNull(inaSubSelections))
	{
		let size = inaSubSelections.size();
		for (let i = 0; i < size; i++)
		{
			let subSelection = inaSubSelections.getStructureAt(i);
			let child = importer.importComponent(null, subSelection, null, filterAlgebra, context);
			if (oFF.notNull(child))
			{
				filterAlgebra.add(child);
			}
		}
	}
	return filterAlgebra;
};

oFF.QInARepoFilterAll = function() {};
oFF.QInARepoFilterAll.prototype = new oFF.QInARepository();
oFF.QInARepoFilterAll.prototype._ff_c = "QInARepoFilterAll";

oFF.QInARepoFilterAll.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filter = modelComponent;
	if (filter.isDynamicFilterInitialized())
	{
		let selectionStateContainer = filter.getDynamicFilter();
		let inaState = exporter.exportFilterExpression(selectionStateContainer);
		inaStructure.put("DynamicFilter", inaState);
	}
	if (filter.isVisibilityFilterInitialized())
	{
		let selectionVisibilityContainer = filter.getVisibilityFilter();
		let inaVisibility = exporter.exportFilterExpression(selectionVisibilityContainer);
		inaStructure.put("VisibilityFilter", inaVisibility);
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA && filter.isFixedFilterInitialized() && (exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE || !filter.getSession().hasFeature(oFF.FeatureToggleOlap.NO_FIXEDFILTERS_IN_REPO)))
	{
		let selectionSpaceContainer = filter.getFixedFilter();
		let inaSpace = exporter.exportFilterExpression(selectionSpaceContainer);
		inaStructure.put("FixedFilter", inaSpace);
	}
	if (filter.isValueHelpFilterInitialized())
	{
		let valueHelpContainer = filter.getValuehelpFilter();
		let inaValueHelp = exporter.exportFilterExpression(valueHelpContainer);
		inaStructure.put("ValueHelpFilter", inaValueHelp);
	}
	if (filter.isValueHelpVisibilityFilterInitialized())
	{
		let valueHelpVisibilityContainer = filter.getValuehelpVisibilityFilter();
		let inaValueHelpVisibility = exporter.exportFilterExpression(valueHelpVisibilityContainer);
		inaStructure.put("ValueHelpVisibilityFilter", inaValueHelpVisibility);
	}
	let layeredFilters = oFF.QInARepoUtils.exportLayeredFiltersExt(exporter, filter, (filterExpression) => {
		return oFF.XBooleanValue.create(filterExpression.isPreservedInRepoSerialization());
	});
	if (layeredFilters.hasElements())
	{
		inaStructure.put("LayeredFilters", layeredFilters);
	}
	oFF.QInARepoUtils.exportFilterUiSettings(filter, oFF.QContextType.RESULT_SET, inaStructure);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SELECTOR;
};
oFF.QInARepoFilterAll.prototype.getTagName = function()
{
	return "FilterRepo";
};
oFF.QInARepoFilterAll.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filter = modelComponent;
	let inaFilterExpression = inaStructure.getStructureByKey("DynamicFilter");
	if (oFF.notNull(inaFilterExpression))
	{
		let selectionStateContainer = filter.getDynamicFilter();
		importer.importFilterExpression(selectionStateContainer, inaFilterExpression, filter, context);
	}
	else if (filter.isDynamicFilterInitialized())
	{
		filter.setDynamicFilter(null);
	}
	let inaVisibilityExpression = inaStructure.getStructureByKey("VisibilityFilter");
	if (oFF.notNull(inaVisibilityExpression))
	{
		let selectionVisibilityContainer = filter.getVisibilityFilter();
		importer.importFilterExpression(selectionVisibilityContainer, inaVisibilityExpression, filter, context);
	}
	else if (filter.isVisibilityFilterInitialized())
	{
		filter.setVisibilityFilter(null);
	}
	let deltaRepoImport = importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA;
	if (!deltaRepoImport && !filter.getSession().hasFeature(oFF.FeatureToggleOlap.NO_FIXEDFILTERS_IN_REPO) || importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE)
	{
		let inaSpaceExpression = inaStructure.getStructureByKey("FixedFilter");
		if (oFF.notNull(inaSpaceExpression))
		{
			let selectionSpaceContainer = filter.getFixedFilter();
			importer.importFilterExpression(selectionSpaceContainer, inaSpaceExpression, filter, context);
		}
		else if (filter.isFixedFilterInitialized())
		{
			filter.setFixedFilter(null);
		}
	}
	let inaValueHelpExpression = inaStructure.getStructureByKey("ValueHelpFilter");
	if (oFF.notNull(inaValueHelpExpression))
	{
		let valueHelpContainer = filter.getValuehelpFilter();
		importer.importFilterExpression(valueHelpContainer, inaValueHelpExpression, filter, context);
	}
	let inaValueHelpVisibilityExpression = inaStructure.getStructureByKey("ValueHelpVisibilityFilter");
	if (oFF.notNull(inaValueHelpVisibilityExpression))
	{
		let valueHelpVisibilityContainer = filter.getValuehelpVisibilityFilter();
		importer.importFilterExpression(valueHelpVisibilityContainer, inaValueHelpVisibilityExpression, filter, context);
	}
	filter.unlinkInternalFilters();
	let inaLayeredFilters = inaStructure.getListByKey("LayeredFilters");
	if (oFF.notNull(inaLayeredFilters))
	{
		let importedLayeredFilters = oFF.QInARepoUtils.importLayeredFilters(importer, filter, inaLayeredFilters, null);
		oFF.XCollectionUtils.forEach(importedLayeredFilters, (layeredFilter) => {
			layeredFilter.setPreserveOnRepoSerialization(true);
		});
	}
	oFF.QInARepoUtils.importFilterUiSettings(filter, oFF.QContextType.RESULT_SET, inaStructure);
	return filter;
};

oFF.QInARepoFilterAsymmetricVisibility = function() {};
oFF.QInARepoFilterAsymmetricVisibility.prototype = new oFF.QInARepository();
oFF.QInARepoFilterAsymmetricVisibility.prototype._ff_c = "QInARepoFilterAsymmetricVisibility";

oFF.QInARepoFilterAsymmetricVisibility.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let fav = modelComponent;
	inaStructure.putString("Name", fav.getName());
	let filterRoot = fav.getComplexRoot();
	if (oFF.notNull(filterRoot))
	{
		exporter.exportFilterAlgebra(filterRoot, inaStructure.putNewStructure("FilterRoot"));
	}
	inaStructure.putNotNullAndNotEmpty("LayeredFilters", oFF.QInARepoUtils.exportLayeredFilters(exporter, fav));
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterAsymmetricVisibility.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.FILTER_ASYMMETRIC_VISIBILITY;
};
oFF.QInARepoFilterAsymmetricVisibility.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let name = inaStructure.getStringByKey("Name");
	let fav = modelComponent;
	if (oFF.isNull(fav))
	{
		let filterExpression = null;
		if (oFF.notNull(parentComponent))
		{
			let parentFilterElement = parentComponent;
			filterExpression = parentFilterElement.getFilterExpression();
		}
		fav = oFF.QFactory.createFilterAsymmetricVisibility(context, name, filterExpression);
	}
	let inaFilterElement = inaStructure.getStructureByKey("FilterRoot");
	if (oFF.notNull(inaFilterElement))
	{
		let component = importer.importComponent(oFF.FilterComponentType.BOOLEAN_ALGEBRA, inaFilterElement, null, fav, context);
		let filterElement = component;
		fav.setComplexRoot(filterElement);
	}
	if (inaStructure.containsKey("LayeredFilters"))
	{
		oFF.QInARepoUtils.importLayeredFilters(importer, fav, inaStructure.getListByKey("LayeredFilters"), context);
	}
	return fav;
};

oFF.QInARepoFilterCartesianList = function() {};
oFF.QInARepoFilterCartesianList.prototype = new oFF.QInARepository();
oFF.QInARepoFilterCartesianList.prototype._ff_c = "QInARepoFilterCartesianList";

oFF.QInARepoFilterCartesianList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let cartesianList = modelComponent;
	let fieldMd = cartesianList.getFieldMetadata();
	if (oFF.notNull(fieldMd))
	{
		inaStructure.putString("FieldName", fieldMd.getName());
		let filterExpression = cartesianList.getFilterExpression();
		if (oFF.notNull(filterExpression))
		{
			let parent = filterExpression.getParent();
			if (oFF.notNull(parent) && parent.getOlapComponentType() === oFF.OlapComponentType.OLAP_FILTER_MANAGER)
			{
				let cacheKey = fieldMd.getCacheKey();
				inaStructure.put("QY_CACHE_CONTEXT", oFF.QInARepoUtils.exportCacheKey(cacheKey, cartesianList.getQueryManager()));
			}
		}
	}
	inaStructure.putString("Id", cartesianList.getUniqueId());
	oFF.QInARepoUtils.exportFilterUiSettings(cartesianList, oFF.QContextType.RESULT_SET, inaStructure);
	oFF.QInARepoUtils.exportFilterUiSettings(cartesianList, oFF.QContextType.VARIABLE, inaStructure);
	let hierarchyName = cartesianList.getHierarchyName();
	if (oFF.notNull(hierarchyName))
	{
		let filterExpr = cartesianList.getFilterExpression() !== null ? cartesianList.getFilterExpression() : cartesianList.getParent() !== null ? cartesianList.getParent().getFilterExpression() : null;
		oFF.QInARepoHierarchy.exportHierarchyForFilter(exporter, exporter.isAbap(cartesianList), inaStructure, null, filterExpr, cartesianList.getQueryManager(), hierarchyName, cartesianList.getHierarchyDueDate(), cartesianList.getHierarchyVersion());
	}
	if (exporter.m_capabilities.supportsSupplements())
	{
		let supplementFieldsNames = cartesianList.getSupplementFieldNames();
		if (oFF.XCollectionUtils.hasElements(supplementFieldsNames))
		{
			let inaSupplements = inaStructure.putNewList("SupplementsFieldNames");
			inaSupplements.addAllStrings(supplementFieldsNames);
		}
	}
	let isConvertToFlatFilter = cartesianList.isConvertToFlatFilter();
	let inaElements = inaStructure.putNewList("Elements");
	let size = cartesianList.size();
	for (let j = 0; j < size; j++)
	{
		let cartesianElement = cartesianList.getOp(j);
		let inaInnerElement = exporter.exportComponent(null, cartesianElement, null, flags);
		inaElements.add(inaInnerElement);
		isConvertToFlatFilter = isConvertToFlatFilter || cartesianElement.isConvertToFlatFilter();
	}
	inaStructure.putBoolean("ConvertToFlatSelection", isConvertToFlatFilter);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterCartesianList.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_LIST;
};
oFF.QInARepoFilterCartesianList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = null;
	let contextToValidate = context;
	if (oFF.notNull(parentComponent))
	{
		let parentFilterElement = parentComponent;
		filterExpression = parentFilterElement.getFilterExpression();
	}
	let cartesianList = modelComponent;
	if (oFF.isNull(cartesianList))
	{
		cartesianList = oFF.notNull(filterExpression) ? oFF.QFactory.createFilterCartesianList(filterExpression) : oFF.QFactory.createFilterCartesianList(context);
	}
	let fieldName = inaStructure.getStringByKey("FieldName");
	if (oFF.notNull(fieldName) && oFF.notNull(context))
	{
		let fieldAccessor = context.getFieldAccessorSingle();
		let calcDimField = null;
		if (oFF.isNull(fieldAccessor) || inaStructure.containsKey("QY_CACHE_CONTEXT"))
		{
			let inaCache = inaStructure.getStructureByKey("QY_CACHE_CONTEXT");
			if (oFF.isNull(inaCache))
			{
				return null;
			}
			let cacheKey = oFF.QInARepoUtils.importCacheKey(inaCache);
			let fieldMetadata = context.getOlapEnv().getFieldMetadata(cacheKey);
			if (context.getComponentType() === oFF.FilterComponentType.FILTER_ACROSS_MODELS)
			{
				let famSourceContext = oFF.QInARepoUtils.getFilterAcrossModelSourceContext(context, cacheKey);
				if (oFF.notNull(famSourceContext))
				{
					contextToValidate = famSourceContext;
				}
			}
			if (oFF.isNull(fieldMetadata) && inaCache.containsKey("StorageName"))
			{
				let clientQueryObjectManagerStorageName = inaCache.getStringByKey("StorageName");
				calcDimField = oFF.QInARepoUtils.getFormulaCalcDimField(context, cacheKey.getKey1(), clientQueryObjectManagerStorageName);
				if (oFF.notNull(calcDimField))
				{
					cartesianList.setField(calcDimField);
				}
			}
			if (oFF.notNull(fieldMetadata))
			{
				cartesianList.setFieldMetadata(fieldMetadata);
			}
			else if (oFF.isNull(calcDimField))
			{
				return null;
			}
		}
		else
		{
			let field = fieldAccessor.getFieldByName(fieldName);
			if (oFF.isNull(field))
			{
				field = oFF.QInARepoUtils.getFormulaCalcDimField(context, fieldName, context.getQueryManager().getClientQueryObjectStorageName());
				if (oFF.isNull(field))
				{
					return null;
				}
			}
			cartesianList.setField(field);
			let supplementsFieldsNamesList = inaStructure.getListByKey("SupplementsFieldNames");
			if (oFF.notNull(supplementsFieldsNamesList))
			{
				let len = supplementsFieldsNamesList.size();
				for (let y = 0; y < len; y++)
				{
					let name = supplementsFieldsNamesList.getStringAt(y);
					let supplField = fieldAccessor.getFieldByName(name);
					cartesianList.addSupplementField(supplField);
				}
			}
		}
	}
	if (!oFF.QInARepoHierarchy.validateHierarchyNameForMetadataBasedHierarchy(contextToValidate, cartesianList.getDimensionName(), inaStructure.getStringByKey("HierarchyName")))
	{
		return null;
	}
	oFF.QInARepoHierarchy.importHierarchyForFilter(importer.isAbap(context), importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER), inaStructure, cartesianList, oFF.FilterComponentType.CARTESIAN_LIST);
	let uniqueId = inaStructure.getStringByKey("Id");
	cartesianList.setUniqueId(uniqueId);
	oFF.QInARepoUtils.importFilterUiSettings(cartesianList, oFF.QContextType.RESULT_SET, inaStructure);
	oFF.QInARepoUtils.importFilterUiSettings(cartesianList, oFF.QContextType.VARIABLE, inaStructure);
	let isConvertToFlatFilter = inaStructure.getBooleanByKeyExt("ConvertToFlatSelection", false);
	cartesianList.setConvertToFlatFilter(isConvertToFlatFilter);
	let inaElements = inaStructure.getListByKey("Elements");
	cartesianList.clear();
	if (oFF.notNull(inaElements))
	{
		let size = inaElements.size();
		for (let i = 0; i < size; i++)
		{
			let inaSelection = inaElements.getStructureAt(i);
			let child = importer.importComponent(null, inaSelection, null, cartesianList, context);
			let filterElement = child;
			cartesianList.add(filterElement);
		}
	}
	return cartesianList;
};

oFF.QInARepoFilterCartesianProduct = function() {};
oFF.QInARepoFilterCartesianProduct.prototype = new oFF.QInARepository();
oFF.QInARepoFilterCartesianProduct.prototype._ff_c = "QInARepoFilterCartesianProduct";

oFF.QInARepoFilterCartesianProduct.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let cartesianProduct = modelComponent;
	inaStructure.putString("Id", cartesianProduct.getUniqueId());
	let inaSubSelections = inaStructure.putNewList("Elements");
	for (let i = 0; i < cartesianProduct.size(); i++)
	{
		let msl = cartesianProduct.getCartesianChild(i);
		let innerElement = exporter.exportComponent(null, msl, null, flags);
		if (oFF.notNull(innerElement))
		{
			inaSubSelections.add(innerElement);
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterCartesianProduct.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_PRODUCT;
};
oFF.QInARepoFilterCartesianProduct.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = null;
	if (oFF.notNull(parentComponent))
	{
		let parentFilterElement = parentComponent;
		filterExpression = parentFilterElement.getFilterExpression();
	}
	let cartesianProduct = modelComponent;
	if (oFF.isNull(cartesianProduct))
	{
		cartesianProduct = oFF.notNull(filterExpression) ? oFF.QFactory.createFilterCartesianProduct(filterExpression) : oFF.QFactory.createFilterCartesianProduct(context);
	}
	cartesianProduct.clear();
	let uniqueId = inaStructure.getStringByKey("Id");
	cartesianProduct.setUniqueId(uniqueId);
	let inaElements = inaStructure.getListByKey("Elements");
	if (oFF.notNull(inaElements))
	{
		for (let i = 0; i < inaElements.size(); i++)
		{
			let inaSelection = inaElements.getStructureAt(i);
			let child = importer.importComponent(null, inaSelection, null, cartesianProduct, context);
			let msl = child;
			cartesianProduct.add(msl);
		}
	}
	return cartesianProduct;
};

oFF.QInARepoFilterCellValueOperand = function() {};
oFF.QInARepoFilterCellValueOperand.prototype = new oFF.QInARepository();
oFF.QInARepoFilterCellValueOperand.prototype._ff_c = "QInARepoFilterCellValueOperand";

oFF.QInARepoFilterCellValueOperand.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let cellValueOperand = modelComponent;
	inaStructure.putBoolean("IsExcluding", cellValueOperand.isExcluding());
	let comparisonOperator = cellValueOperand.getComparisonOperator();
	inaStructure.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
	let inaValueList = oFF.QInARepoFilterOperation.exportValues(exporter, cellValueOperand);
	inaStructure.put("Values", inaValueList);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterCellValueOperand.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
};
oFF.QInARepoFilterCellValueOperand.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let operand = modelComponent;
	if (oFF.isNull(operand))
	{
		operand = oFF.QFilterCellValueOperand._create(context, null, null, null, null);
	}
	let comparison = inaStructure.getStringByKey("Comparison");
	let operator = oFF.QInAConverter.lookupComparison(comparison);
	operand.setComparisonOperator(operator);
	let isExcluding = inaStructure.getBooleanByKey("IsExcluding");
	operand.setIsExcluding(isExcluding);
	let inaValueList = inaStructure.getListByKey("Values");
	oFF.QInARepoFilterOperation.importValues(importer, inaValueList, operand, null, context);
	return operand;
};

oFF.QInARepoFilterDateRange = function() {};
oFF.QInARepoFilterDateRange.prototype = new oFF.QInARepository();
oFF.QInARepoFilterDateRange.prototype._ff_c = "QInARepoFilterDateRange";

oFF.QInARepoFilterDateRange.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filterOperation = modelComponent;
	let fieldMetadata = filterOperation.getFieldMetadata();
	oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "FieldName", fieldMetadata);
	let dateRange = filterOperation.getDateRange();
	if (oFF.notNull(dateRange))
	{
		inaStructure.putStringNotNull("Granularity", oFF.QInAConverter.lookupDateRangeGranularityInA(dateRange.getGranularity()));
		inaStructure.putBoolean("Fixed", dateRange.isFixedRange());
		if (dateRange.isFixedRange())
		{
			inaStructure.putStringNotNull("FixedFrom", dateRange.getFixedFromDate() !== null ? dateRange.getFixedFromDate().toIsoFormat() : null);
			inaStructure.putStringNotNull("FixedTo", dateRange.getFixedToDate() !== null ? dateRange.getFixedToDate().toIsoFormat() : null);
		}
		else
		{
			inaStructure.putBoolean("UpToPeriod", dateRange.isUpToCurrentPeriod());
			this.exportGranularitySettings(dateRange.getOffset(), inaStructure, "Offset");
			this.exportGranularitySettings(dateRange.getLookBack(), inaStructure, "LookBack");
			this.exportGranularitySettings(dateRange.getLookAhead(), inaStructure, "LookAhead");
		}
	}
	return inaStructure;
};
oFF.QInARepoFilterDateRange.prototype.exportGranularitySettings = function(value, inaStructure, inaName)
{
	if (oFF.notNull(value))
	{
		let offsetIna = inaStructure.putNewStructure(inaName);
		offsetIna.putStringNotNull("Granularity", oFF.QInAConverter.lookupDateRangeGranularityInA(value.getFirstObject()));
		offsetIna.putInteger("Value", value.getSecondObject().getInteger());
	}
};
oFF.QInARepoFilterDateRange.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.DATE_RANGE_OPERATION;
};
oFF.QInARepoFilterDateRange.prototype.getField = function(inaStructure, parentComponent, context)
{
	let fieldName = inaStructure.getStringByKey("FieldName");
	let field = context.getFieldAccessorSingle().getFieldByName(fieldName);
	if (oFF.isNull(field) && oFF.notNull(parentComponent) && parentComponent.getComponentType() === oFF.FilterComponentType.CARTESIAN_LIST)
	{
		field = parentComponent.getField();
	}
	return field;
};
oFF.QInARepoFilterDateRange.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterOperation = modelComponent;
	let field = this.getField(inaStructure, parentComponent, context);
	if (oFF.isNull(filterOperation))
	{
		let filterExpression = null;
		if (oFF.notNull(parentComponent))
		{
			let parentFilterElement = parentComponent;
			filterExpression = parentFilterElement.getFilterExpression();
		}
		filterOperation = oFF.notNull(filterExpression) ? oFF.QFactory.createFilterOperationDateRange(filterExpression, field) : oFF.QFactory.createFilterOperationDateRange(context, field);
	}
	let queryModel = filterOperation.getQueryModel();
	let dateRange = oFF.XDateRange.create(oFF.notNull(queryModel) ? queryModel.getProcess().getDateTimeProvider() : null);
	let inaGranularity = inaStructure.getStringByKey("Granularity");
	if (oFF.notNull(inaGranularity))
	{
		dateRange.withGranularity(oFF.QInAConverter.lookupDateRangeGranularity(inaGranularity), inaStructure.getBooleanByKeyExt("UpToPeriod", false));
	}
	if (inaStructure.getBooleanByKeyExt("Fixed", false))
	{
		dateRange.withFixDates(oFF.XDate.createDateSafe(inaStructure.getStringByKey("FixedFrom")), oFF.XDate.createDateSafe(inaStructure.getStringByKey("FixedTo")));
	}
	else
	{
		let inaOffset = inaStructure.getStructureByKey("Offset");
		let inaOffsetGranularity = oFF.PrUtils.getStringProperty(inaOffset, "Granularity");
		let inaOffsetValue = oFF.PrUtils.getIntegerProperty(inaOffset, "Value");
		if (oFF.notNull(inaOffsetGranularity) && oFF.notNull(inaOffsetValue))
		{
			dateRange.withOffset(oFF.QInAConverter.lookupDateRangeGranularity(inaOffsetGranularity.getString()), inaOffsetValue.getInteger());
		}
		let inaLookBack = inaStructure.getStructureByKey("LookBack");
		let inaLookBackGranularity = oFF.PrUtils.getStringProperty(inaLookBack, "Granularity");
		let inaLookBacktValue = oFF.PrUtils.getIntegerProperty(inaLookBack, "Value");
		if (oFF.notNull(inaLookBackGranularity) && oFF.notNull(inaLookBacktValue))
		{
			dateRange.withLookBack(oFF.QInAConverter.lookupDateRangeGranularity(inaLookBackGranularity.getString()), inaLookBacktValue.getInteger());
		}
		let inaLookAhead = inaStructure.getStructureByKey("LookAhead");
		let inaLookAheadGranularity = oFF.PrUtils.getStringProperty(inaLookAhead, "Granularity");
		let inaLookAheadValue = oFF.PrUtils.getIntegerProperty(inaLookAhead, "Value");
		if (oFF.notNull(inaLookAheadGranularity) && oFF.notNull(inaLookAheadValue))
		{
			dateRange.withLookAhead(oFF.QInAConverter.lookupDateRangeGranularity(inaLookAheadGranularity.getString()), inaLookAheadValue.getInteger());
		}
	}
	filterOperation.setDateRange(dateRange, field);
	return filterOperation;
};

oFF.QInARepoFilterDynamicTimeRegularRange = function() {};
oFF.QInARepoFilterDynamicTimeRegularRange.prototype = new oFF.QInARepository();
oFF.QInARepoFilterDynamicTimeRegularRange.prototype._ff_c = "QInARepoFilterDynamicTimeRegularRange";

oFF.QInARepoFilterDynamicTimeRegularRange.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dynamicTimeRangeFilter = modelComponent;
	inaStructure.putString("Name", dynamicTimeRangeFilter.getName());
	oFF.QInARepoUtils.exportTimeRangeFilter(exporter, inaStructure, dynamicTimeRangeFilter);
	oFF.QInARepoUtils.exportShiftableTimeRangeFilter(inaStructure, dynamicTimeRangeFilter);
	inaStructure.putInteger("LookAhead", dynamicTimeRangeFilter.getLookAhead());
	inaStructure.putString("LowValue", dynamicTimeRangeFilter.getLowValue());
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterDynamicTimeRegularRange.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE;
};
oFF.QInARepoFilterDynamicTimeRegularRange.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let name = inaStructure.getStringByKey("Name");
	let dynamicTimeRangeFilter = modelComponent;
	if (oFF.isNull(dynamicTimeRangeFilter))
	{
		dynamicTimeRangeFilter = oFF.QFactory.createFilterDynamicTimeRegularRange(context, name);
	}
	oFF.QInARepoUtils.importFilterTimeRange(importer, inaStructure, dynamicTimeRangeFilter);
	oFF.QInARepoUtils.importFilterShiftableTimeRange(inaStructure, dynamicTimeRangeFilter);
	dynamicTimeRangeFilter.setLookAhead(inaStructure.getIntegerByKey("LookAhead"));
	dynamicTimeRangeFilter.setLowValue(inaStructure.getStringByKey("LowValue"));
	let lowValueType = inaStructure.getStringByKey("LowValueType");
	if (oFF.notNull(lowValueType))
	{
		dynamicTimeRangeFilter.setLowValueType(oFF.QInAConverter.lookupValueType(lowValueType));
	}
	return dynamicTimeRangeFilter;
};

oFF.QInARepoFilterDynamicTimeToDateRange = function() {};
oFF.QInARepoFilterDynamicTimeToDateRange.prototype = new oFF.QInARepository();
oFF.QInARepoFilterDynamicTimeToDateRange.prototype._ff_c = "QInARepoFilterDynamicTimeToDateRange";

oFF.QInARepoFilterDynamicTimeToDateRange.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let toDateRangeFilter = modelComponent;
	inaStructure.putString("Name", toDateRangeFilter.getName());
	oFF.QInARepoUtils.exportTimeRangeFilter(exporter, inaStructure, toDateRangeFilter);
	oFF.QInARepoUtils.exportShiftableTimeRangeFilter(inaStructure, toDateRangeFilter);
	inaStructure.putString("Member", toDateRangeFilter.getLowValue());
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterDynamicTimeToDateRange.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.FILTER_DYNAMIC_TIME_TO_DATE_RANGE;
};
oFF.QInARepoFilterDynamicTimeToDateRange.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let name = inaStructure.getStringByKey("Name");
	let toDateRangeFilter = modelComponent;
	if (oFF.isNull(toDateRangeFilter))
	{
		toDateRangeFilter = oFF.QFactory.createFilterDynamicTimeToDateRange(context, name);
	}
	oFF.QInARepoUtils.importFilterTimeRange(importer, inaStructure, toDateRangeFilter);
	oFF.QInARepoUtils.importFilterShiftableTimeRange(inaStructure, toDateRangeFilter);
	toDateRangeFilter.setLowValue(inaStructure.getStringByKey("Member"));
	let lowValueType = inaStructure.getStringByKey("LowValueType");
	if (oFF.notNull(lowValueType))
	{
		toDateRangeFilter.setLowValueType(oFF.QInAConverter.lookupValueType(lowValueType));
	}
	return toDateRangeFilter;
};

oFF.QInARepoFilterElement = function() {};
oFF.QInARepoFilterElement.prototype = new oFF.QInARepository();
oFF.QInARepoFilterElement.prototype._ff_c = "QInARepoFilterElement";

oFF.QInARepoFilterElement.prototype.m_exportingAtLevel1 = false;
oFF.QInARepoFilterElement.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filterElement = modelComponent;
	if (!filterElement.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
	{
		let type = filterElement.getComponentType();
		if (type.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			if (type === oFF.FilterComponentType.CARTESIAN_LIST)
			{
				exporter.exportCartesianList(filterElement, inaStructure);
			}
			else if (type === oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
			{
				exporter.exportConvertedTimeCartesianList(filterElement, inaStructure);
			}
			else if (type === oFF.FilterComponentType.CARTESIAN_PRODUCT)
			{
				exporter.exportFilterCartesianProduct(filterElement, inaStructure);
			}
			else
			{
				if (this.shouldContinueExport(filterElement, exporter))
				{
					exporter.exportFilterAlgebra(filterElement, inaStructure);
					if (this.m_exportingAtLevel1)
					{
						this.m_exportingAtLevel1 = false;
					}
				}
			}
		}
		else if (type.isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOperation = filterElement;
			let comparisonOperator = filterOperation.getComparisonOperator();
			if (oFF.notNull(comparisonOperator))
			{
				if (comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
				{
					exporter.exportFilterGeo(filterOperation, inaStructure);
				}
				else
				{
					if (exporter.m_capabilities.supportsSetOperand())
					{
						let inaInnerElement = oFF.PrFactory.createStructure();
						let fieldMetadata = filterOperation.getFieldMetadata();
						if (oFF.notNull(fieldMetadata))
						{
							inaInnerElement.putString("FieldName", fieldMetadata.getName());
							let hierarchyName = filterOperation.getHierarchyName();
							if (oFF.notNull(hierarchyName))
							{
								let filterExpr = filterOperation.getFilterExpression() !== null ? filterOperation.getFilterExpression() : filterOperation.getParent().getFilterExpression();
								oFF.QInARepoHierarchy.exportHierarchyForFilter(exporter, exporter.isAbap(filterElement), inaInnerElement, null, filterExpr, filterOperation.getQueryManager(), hierarchyName, filterOperation.getHierarchyDueDate(), filterOperation.getHierarchyVersion());
							}
							if (filterOperation.isConvertToFlatFilter())
							{
								inaInnerElement.putBoolean("ConvertToFlatSelection", true);
							}
							let inaElementList = inaInnerElement.putNewList("Elements");
							let inaOperation = inaElementList.addNewStructure();
							exporter.exportFilterOperation(filterOperation, inaOperation);
							if (oFF.notNull(inaStructure))
							{
								inaStructure.put("SetOperand", inaInnerElement);
							}
						}
					}
				}
			}
		}
		else if (type.isTypeOf(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND))
		{
			let cellValueOperand = oFF.PrFactory.createStructure();
			let elements = cellValueOperand.putNewList("Elements");
			elements.add(exporter.exportCellValueOperand(filterElement));
			inaStructure.put("CellValueOperand", cellValueOperand);
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterElement.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_ELEMENT;
};
oFF.QInARepoFilterElement.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let filterElement = modelComponent;
	if (inaStructure.containsKey("Operator"))
	{
		filterElement = importer.importFilterAlgebra(filterExpression, inaStructure, context);
	}
	else
	{
		let inaSetOperand = inaStructure.getStructureByKey("SetOperand");
		if (oFF.isNull(inaSetOperand))
		{
			if (inaStructure.containsKey("GeometryOperand"))
			{
				filterElement = importer.importFilterGeo(filterExpression, inaStructure, context);
			}
		}
		else
		{
			filterElement = importer.importCartesianList(inaSetOperand, filterElement, filterExpression, context);
		}
	}
	return filterElement;
};
oFF.QInARepoFilterElement.prototype.shouldContinueExport = function(filterElement, exporter)
{
	let isReInitFlow = oFF.notNull(exporter.m_variableProcessingDirective) && exporter.m_variableProcessingDirective === oFF.ProcessingStep.VARIABLE_DEFINITION;
	if (!isReInitFlow)
	{
		return true;
	}
	let queryModel = filterElement.getQueryModel();
	let modelCapabilities = filterElement.getModelCapabilities();
	if (modelCapabilities.supportsComplexTupleFilter() && oFF.notNull(queryModel))
	{
		if (!this.m_exportingAtLevel1)
		{
			this.m_exportingAtLevel1 = true;
			return true;
		}
		return false;
	}
	return true;
};

oFF.QInARepoFilterExpression = function() {};
oFF.QInARepoFilterExpression.prototype = new oFF.QInARepository();
oFF.QInARepoFilterExpression.prototype._ff_c = "QInARepoFilterExpression";

oFF.QInARepoFilterExpression.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let expression = modelComponent;
	inaStructure.putString("Id", expression.getUniqueId());
	inaStructure.putBoolean("IsSuppressingNulls", expression.isSuppressingNulls());
	let rootElement = expression.getFilterRootElement();
	if (oFF.notNull(rootElement))
	{
		let inaRootElement = exporter.exportComponent(null, rootElement, null, oFF.QImExFlag.DEFAULT_ALL);
		inaStructure.put("FilterRoot", inaRootElement);
	}
	let isMergable = expression.isMergable();
	if (isMergable)
	{
		inaStructure.putBoolean("IsMergable", isMergable);
	}
	if (expression.getModelCapabilities().supportsCellValueOperand())
	{
		let inaElements = inaStructure.putNewList("CellValueOperand");
		let cellValueOperands = expression.getCellValueOperands();
		for (let i = 0; i < cellValueOperands.size(); i++)
		{
			let cellValueOperand = cellValueOperands.get(i);
			let inaCellValueOperand = exporter.exportCellValueOperand(cellValueOperand);
			inaElements.add(inaCellValueOperand);
		}
	}
	if (expression.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter() && expression.getQueryModel() !== null && expression.getQueryModel().getFilter().isVisibilityFilterInitialized() && expression === expression.getQueryModel().getFilter().getVisibilityFilter())
	{
		let dims = expression.getDimensionsForVisibilityFilterOnTotalOthers();
		if (oFF.notNull(dims) && !dims.isEmpty())
		{
			let list = oFF.PrFactory.createList();
			list.addAllStrings(expression.getDimensionsForVisibilityFilterOnTotalOthers());
			inaStructure.put("ConsiderVisibilityFilterForOthersTotalsOfDimensions", list);
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterExpression.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_EXPRESSION;
};
oFF.QInARepoFilterExpression.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let expression = modelComponent;
	if (oFF.XString.isEqual(expression.getName(), "selectionSpaceContainer") === false || expression.getFilterRootElement() === null)
	{
		expression.setComplexRoot(null);
		let supportsCellValueOperand = expression.getModelCapabilities().supportsCellValueOperand();
		if (supportsCellValueOperand)
		{
			expression.setIsSuppressingNulls(false);
			expression.clearCellValueFilter();
		}
		if (oFF.notNull(inaStructure))
		{
			let uniqueId = inaStructure.getStringByKey("Id");
			expression.setUniqueId(uniqueId);
			expression.setIsMergable(inaStructure.getBooleanByKeyExt("IsMergable", false));
			if (supportsCellValueOperand)
			{
				let isSuppressingNulls = inaStructure.getBooleanByKeyExt("IsSuppressingNulls", false);
				expression.setIsSuppressingNulls(isSuppressingNulls);
			}
			let inaFilterElement = inaStructure.getStructureByKey("FilterRoot");
			if (oFF.notNull(inaFilterElement))
			{
				let component = importer.importComponent(null, inaFilterElement, null, expression, context);
				let filterElement = component;
				expression.setComplexRoot(filterElement);
			}
			if (supportsCellValueOperand)
			{
				let inaElements = inaStructure.getListByKey("CellValueOperand");
				if (oFF.notNull(inaElements))
				{
					for (let i = 0; i < inaElements.size(); i++)
					{
						let inaCellValueOperand = inaElements.getStructureAt(i);
						let cellValueOperand = importer.importComponent(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND, inaCellValueOperand, null, expression, context);
						expression.addCellValueFilter(cellValueOperand);
					}
				}
			}
		}
	}
	if (oFF.notNull(inaStructure) && expression.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter() && expression.getQueryModel() !== null && expression.getQueryModel().getFilter().isVisibilityFilterInitialized() && expression === expression.getQueryModel().getFilter().getVisibilityFilter())
	{
		let dims = inaStructure.getListByKey("ConsiderVisibilityFilterForOthersTotalsOfDimensions");
		if (oFF.notNull(dims) && !dims.isEmpty())
		{
			for (let i = 0; i < dims.size(); i++)
			{
				expression.addDimensionForVisibilityFilterOnTotalOthers(dims.getStringAt(i));
			}
		}
	}
	return modelComponent;
};

oFF.QInARepoFilterFixed = function() {};
oFF.QInARepoFilterFixed.prototype = new oFF.QInARepository();
oFF.QInARepoFilterFixed.prototype._ff_c = "QInARepoFilterFixed";

oFF.QInARepoFilterFixed.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filter = modelComponent;
	if (!filter.isFixedFilterInitialized())
	{
		return null;
	}
	let filterExpression = filter.getFixedFilter();
	let inaStructure2 = exporter.exportFilterExpression(filterExpression);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure2, flags);
};
oFF.QInARepoFilterFixed.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_FIXED;
};
oFF.QInARepoFilterFixed.prototype.getTagName = function()
{
	return "FixedFilterRepo";
};
oFF.QInARepoFilterFixed.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = null;
	if (oFF.notNull(inaStructure))
	{
		let filter = parentComponent;
		filterExpression = importer.importFilterExpression(null, inaStructure, filter, context);
		if (oFF.notNull(filter) && oFF.notNull(filterExpression))
		{
			filter.setFixedFilter(filterExpression);
		}
	}
	return filterExpression;
};

oFF.QInARepoFilterFixedTimeRange = function() {};
oFF.QInARepoFilterFixedTimeRange.prototype = new oFF.QInARepository();
oFF.QInARepoFilterFixedTimeRange.prototype._ff_c = "QInARepoFilterFixedTimeRange";

oFF.QInARepoFilterFixedTimeRange.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let fixedTimeRangeFilter = modelComponent;
	inaStructure.putString("Name", fixedTimeRangeFilter.getName());
	oFF.QInARepoUtils.exportTimeRangeFilter(exporter, inaStructure, fixedTimeRangeFilter);
	inaStructure.putString("LowValue", fixedTimeRangeFilter.getLowValue());
	inaStructure.putString("TimeRangeFilterType", fixedTimeRangeFilter.getRangeFilterType().getName());
	if (oFF.XStringUtils.isNotNullAndNotEmpty(fixedTimeRangeFilter.getHighValue()))
	{
		inaStructure.putString("HighValue", fixedTimeRangeFilter.getHighValue());
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterFixedTimeRange.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.FILTER_FIXED_TIME_RANGE;
};
oFF.QInARepoFilterFixedTimeRange.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let name = inaStructure.getStringByKey("Name");
	let fixedTimeRangeFilter = modelComponent;
	if (oFF.isNull(fixedTimeRangeFilter))
	{
		fixedTimeRangeFilter = oFF.QFactory.createFilterFixedTimeRange(context, name);
	}
	let lowValueType = null;
	let inaLowValueType = inaStructure.getStringByKey("LowValueType");
	if (oFF.notNull(inaLowValueType))
	{
		lowValueType = oFF.QInAConverter.lookupValueType(inaLowValueType);
	}
	let timeFilterRangeType = oFF.TimeRangeFilterType.lookup(inaStructure.getStringByKey("TimeRangeFilterType"));
	if (timeFilterRangeType === oFF.TimeRangeFilterType.FIXED_OPENING_PERIOD_TO_CLOSING_PERIOD)
	{
		fixedTimeRangeFilter.setOpeningPeriodToClosingPeriodFixedRange();
	}
	else if (timeFilterRangeType === oFF.TimeRangeFilterType.FIXED_START_TO_CLOSING_OPERIOD)
	{
		fixedTimeRangeFilter.setStartToClosingPeriodFixedRange(inaStructure.getStringByKey("LowValue"), lowValueType);
	}
	else if (timeFilterRangeType === oFF.TimeRangeFilterType.FIXED_OPENING_PERIOD_TO_END)
	{
		fixedTimeRangeFilter.setOpeningPeriodToEndFixedRange("LowValue", lowValueType);
	}
	else if (timeFilterRangeType === oFF.TimeRangeFilterType.FIXED_START_TO_END)
	{
		fixedTimeRangeFilter.setStartToEndFixedRange(inaStructure.getStringByKey("LowValue"), inaStructure.getStringByKey("HighValue"));
	}
	oFF.QInARepoUtils.importFilterTimeRange(importer, inaStructure, fixedTimeRangeFilter);
	return fixedTimeRangeFilter;
};

oFF.QInARepoFilterGeo = function() {};
oFF.QInARepoFilterGeo.prototype = new oFF.QInARepository();
oFF.QInARepoFilterGeo.prototype._ff_c = "QInARepoFilterGeo";

oFF.QInARepoFilterGeo.tryCreateGeometry = function(strValue)
{
	let value = oFF.XGeometryValue.createGeometryValueWithWkt(strValue);
	if (oFF.isNull(value))
	{
		value = oFF.XStringValue.create(strValue);
	}
	return value;
};
oFF.QInARepoFilterGeo.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let operation = modelComponent;
	let comparisonOperator = operation.getComparisonOperator();
	if (!comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
	{
		throw oFF.XException.createIllegalStateException("Not a spatial operator");
	}
	inaStructure.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
	let fieldMd = operation.getFieldMetadata();
	inaStructure.putString("FieldName", fieldMd.getName());
	let geoValue1 = operation.getLow();
	let blendingDataSource = operation.getDataSource();
	if (oFF.isNull(blendingDataSource))
	{
		if (oFF.notNull(geoValue1) && geoValue1.getValue() !== null)
		{
			oFF.QInAValueUtils.exportFilterValue(exporter, "Value1", inaStructure, geoValue1, geoValue1.getValueType());
			let srid = geoValue1.getGeometry().getSrid();
			if (exporter.m_capabilities.supportsSpatialFilterSrid() && oFF.notNull(srid))
			{
				inaStructure.putInteger("SRID", srid.getInteger());
			}
		}
	}
	else
	{
		if (oFF.notNull(geoValue1) && geoValue1.getValue() !== null)
		{
			oFF.QInAValueUtils.exportFilterValue(exporter, "Value1", inaStructure, geoValue1, oFF.XValueType.STRING);
		}
		let inaBlendingDataSource = exporter.exportDataSource(blendingDataSource, false);
		inaStructure.put("DataSource", inaBlendingDataSource);
	}
	let geoValue2 = operation.getHigh();
	if (oFF.notNull(geoValue2) && geoValue2.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value2", inaStructure, geoValue2, oFF.XValueType.STRING);
	}
	let geoValue3 = operation.getThird();
	if (oFF.notNull(geoValue3) && geoValue3.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value3", inaStructure, geoValue3, oFF.XValueType.STRING);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterGeo.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.SPATIAL_FILTER;
};
oFF.QInARepoFilterGeo.prototype.getTagName = function()
{
	return "GeometryOperandRepo";
};
oFF.QInARepoFilterGeo.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let fieldAccessor = context.getFieldAccessorSingle();
	let inaComparison = inaStructure.getStringByKey("Comparison");
	let inaFieldName = inaStructure.getStringByKey("FieldName");
	let inaValue1 = inaStructure.getStringByKey("Value1");
	let geoFilter = null;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaComparison) && oFF.XStringUtils.isNotNullAndNotEmpty(inaFieldName) && oFF.XStringUtils.isNotNullAndNotEmpty(inaValue1))
	{
		let comparison = oFF.QInAConverter.lookupComparison(inaComparison);
		if (oFF.notNull(comparison))
		{
			if (comparison.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
			{
				let field = fieldAccessor.getFieldByName(inaFieldName);
				if (oFF.notNull(field))
				{
					geoFilter = oFF.QFactory.createFilterOperationWithOperator(filterExpression, field, comparison);
					let firstValue = oFF.QInARepoFilterGeo.tryCreateGeometry(inaValue1);
					geoFilter.getLow().setValue(firstValue);
					let inaValue2 = inaStructure.getStringByKey("Value2");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue2))
					{
						let secondValue = oFF.QInARepoFilterGeo.tryCreateGeometry(inaValue2);
						geoFilter.getHigh().setValue(secondValue);
					}
					let inaValue3 = inaStructure.getStringByKey("Value3");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue3))
					{
						let thirdValue = oFF.QInARepoFilterGeo.tryCreateGeometry(inaValue3);
						geoFilter.getThird().setValue(thirdValue);
					}
				}
			}
		}
	}
	return geoFilter;
};

oFF.QInARepoFilterManager = function() {};
oFF.QInARepoFilterManager.prototype = new oFF.QInARepository();
oFF.QInARepoFilterManager.prototype._ff_c = "QInARepoFilterManager";

oFF.QInARepoFilterManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaFilterManager = inaStructure.putNewStructure("OlapFilterManager");
	let inaFilters = inaFilterManager.putNewStructure("OlapFilters");
	let filterManager = modelComponent;
	let filters = filterManager.getFilters();
	let filterNameIt = filters.getKeysAsIterator();
	while (filterNameIt.hasNext())
	{
		let filterName = filterNameIt.next();
		let filterExpression = filters.getByKey(filterName);
		if (oFF.QInARepoUtils.isValidFilterExpressionForRepository(filterExpression))
		{
			inaFilters.put(filterName, exporter.exportFilterExpression(filterExpression));
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_FILTER_MANAGER;
};
oFF.QInARepoFilterManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterManager = modelComponent;
	if (oFF.isNull(filterManager))
	{
		filterManager = context.getOlapEnv().getFilterManager();
	}
	let inaFilterManager = inaStructure.getStructureByKey("OlapFilterManager");
	let inaFilters = inaFilterManager.getStructureByKey("OlapFilters");
	let filterNameIt = inaFilters.getKeysAsIterator();
	let famExpressions = oFF.XHashMapByString.create();
	while (filterNameIt.hasNext())
	{
		let filterName = filterNameIt.next();
		let filterExpression = filterManager.getFilterByName(filterName);
		if (filterExpression.getFilterRootElement() !== null && filterExpression.getFilterRootElement().getOlapComponentType() === oFF.FilterComponentType.FILTER_ACROSS_MODELS)
		{
			famExpressions.put(filterName, filterExpression);
		}
		else
		{
			importer.importFilterExpression(filterExpression, inaFilters.getStructureByKey(filterName), filterManager, filterManager);
		}
	}
	let famExpressionKeys = famExpressions.getKeysAsReadOnlyList();
	for (let i = 0; i < famExpressionKeys.size(); i++)
	{
		let filterName = famExpressionKeys.get(i);
		let filterExpression = famExpressions.getByKey(filterName);
		importer.importFilterExpression(filterExpression, inaFilters.getStructureByKey(filterName), filterManager, filterManager);
	}
	return filterManager;
};

oFF.QInARepoFilterMeasureBased = function() {};
oFF.QInARepoFilterMeasureBased.prototype = new oFF.QInARepository();
oFF.QInARepoFilterMeasureBased.prototype._ff_c = "QInARepoFilterMeasureBased";

oFF.QInARepoFilterMeasureBased.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let mbf = modelComponent;
	oFF.QInARepoMemberAbstract.exportFormulaItem(exporter, mbf.getFormula(), inaStructure.putNewStructure("Formula"), mbf);
	inaStructure.putString("Name", mbf.getName());
	inaStructure.putStringNotNullAndNotEmpty("CrossCalculationMeasure", mbf.getCrossCalculationMeasure());
	let dimensionContext = inaStructure.putNewList("AggregationFieldNames");
	dimensionContext.addAllStrings(mbf.getDimensionContext());
	inaStructure.put("LayeredFilters", oFF.QInARepoUtils.exportLayeredFilters(exporter, mbf));
	if (mbf.isLinkQueryFilter())
	{
		inaStructure.putBoolean("LinkQueryFilter", true);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterMeasureBased.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.FILTER_MEASURE_BASED;
};
oFF.QInARepoFilterMeasureBased.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let name = inaStructure.getStringByKey("Name");
	let mbf = modelComponent;
	if (oFF.isNull(mbf))
	{
		mbf = oFF.QFactory.createFilterMeasureBased(context, name);
	}
	let newFieldFormula = oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, null, inaStructure.getStructureByKey("Formula"), null, context);
	mbf.setFormula(newFieldFormula);
	mbf.setCrossCalculationMeasure(inaStructure.getStringByKey("CrossCalculationMeasure"));
	let dimensionContext = inaStructure.getListByKey("AggregationFieldNames");
	let size = dimensionContext.size();
	for (let i = 0; i < size; i++)
	{
		let dimensionName = dimensionContext.getStringAt(i);
		if (this.validateDimensionContext(dimensionName, context))
		{
			mbf.addDimensionContext(dimensionName);
		}
	}
	if (!this.validateFormula(newFieldFormula, context))
	{
		return null;
	}
	oFF.QInARepoUtils.importLayeredFilters(importer, mbf, inaStructure.getListByKey("LayeredFilters"), context);
	mbf.setLinkQueryFilter(inaStructure.getBooleanByKey("LinkQueryFilter"));
	return mbf;
};
oFF.QInARepoFilterMeasureBased.prototype.validateDimensionContext = function(dimensionName, context)
{
	return context.getComponentType() === oFF.OlapComponentType.OLAP_FILTER_MANAGER || context.getQueryModel() === null || context.getQueryModel().getDimensionByName(dimensionName) !== null;
};
oFF.QInARepoFilterMeasureBased.prototype.validateFormula = function(newFieldFormula, context)
{
	let valid = true;
	if (context.getComponentType() !== oFF.OlapComponentType.OLAP_FILTER_MANAGER && context.getQueryModel() !== null)
	{
		let formulaItemMembers = oFF.FormulaItemUtils.getFormulaMembers(newFieldFormula);
		let formulaItemMembersIter = formulaItemMembers.getIterator();
		let clientQueryObjectManager = context.getOlapEnv().getClientQueryObjectManager();
		let clientQueryObjectStorageName = context.getQueryManager().getClientQueryObjectStorageName();
		while (formulaItemMembersIter.hasNext())
		{
			let formulaItemMember = formulaItemMembersIter.next();
			let formulaItemMemberName = formulaItemMember.getMemberName();
			let dimensionContext = formulaItemMember.getDimensionContext();
			let member = null;
			if (oFF.notNull(dimensionContext))
			{
				if (context.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
				{
					member = oFF.BlendingUtils.getMatchingLeafMemberFromLoadedBlendedMember(context.getQueryModel(), formulaItemMemberName, true);
				}
				if (oFF.isNull(member))
				{
					member = dimensionContext.getStructureMemberByAliasOrMember(formulaItemMemberName);
				}
			}
			if (oFF.notNull(clientQueryObjectManager) && oFF.isNull(member))
			{
				member = clientQueryObjectManager.getStructuredMember(formulaItemMemberName, clientQueryObjectStorageName, true);
			}
			if (oFF.isNull(member) && context.getQueryModel() !== null)
			{
				let dimension = null;
				if (oFF.XStringUtils.isNotNullAndNotEmpty(formulaItemMember.getDimensionName()))
				{
					dimension = context.getQueryModel().getDimensionByName(formulaItemMember.getDimensionName());
				}
				if (oFF.isNull(dimension))
				{
					dimension = context.getQueryModel().getPrimaryCalculationDimension();
				}
				if (oFF.notNull(dimension))
				{
					member = dimension.getStructureMemberByAliasOrMember(formulaItemMemberName);
				}
			}
			if (oFF.isNull(member))
			{
				valid = false;
				break;
			}
		}
	}
	return valid;
};

oFF.QInARepoFilterOperation = function() {};
oFF.QInARepoFilterOperation.prototype = new oFF.QInARepository();
oFF.QInARepoFilterOperation.prototype._ff_c = "QInARepoFilterOperation";

oFF.QInARepoFilterOperation.exportMemberNavigation = function(memberNavigation, inaLowNavigation)
{
	inaLowNavigation.putString("Function", memberNavigation.getMemberFunction().getName());
	let parameters = memberNavigation.getParameters();
	if (oFF.notNull(parameters))
	{
		let size = parameters.size();
		let inaParameters = inaLowNavigation.putNewList("Parameters");
		for (let i = 0; i < size; i++)
		{
			let parameter = parameters.get(i);
			let inaParameter = inaParameters.addNewStructure();
			let memberNavigationType = parameter.getMemberNavigationType();
			let key = oFF.QInAConverter.lookupMemberNavigationTypeInA(memberNavigationType);
			if (memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_SHIFT || memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_RANGE)
			{
				inaParameter = inaParameter.putNewStructure(key);
				oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation(inaParameter, "Level", parameter.getLevelValue());
				oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation(inaParameter, "Constant", parameter.getConstantValue());
				oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation(inaParameter, "OffsetLow", parameter.getOffSetLow());
				oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation(inaParameter, "OffsetHigh", parameter.getOffsetHigh());
			}
			else
			{
				if (!oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getLevelValue()))
				{
					if (!oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getConstantValue()))
					{
						oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getFunctionName());
					}
				}
			}
		}
	}
	let navigations = memberNavigation.getNavigations();
	if (oFF.notNull(navigations))
	{
		let inaParameters2;
		if (inaLowNavigation.containsKey("Parameters"))
		{
			inaParameters2 = inaLowNavigation.getListByKey("Parameters");
		}
		else
		{
			inaParameters2 = inaLowNavigation.putNewList("Parameters");
		}
		let inaParameter2 = inaParameters2.addNewStructure();
		let inaNavigations = inaParameter2.putNewList("Navigations");
		let naviSize = navigations.size();
		for (let idxNavi = 0; idxNavi < naviSize; idxNavi++)
		{
			oFF.QInARepoFilterOperation.exportMemberNavigation(navigations.get(idxNavi), inaNavigations.addNewStructure());
		}
	}
};
oFF.QInARepoFilterOperation.exportValues = function(exporter, filterValueContainer)
{
	let inaValueList = oFF.PrFactory.createList();
	let size = filterValueContainer.size();
	for (let i = 0; i < size; i++)
	{
		let valueBag = filterValueContainer.getValueAt(i);
		let inaValueStructure = inaValueList.addNewStructure();
		let filterValueType = valueBag.getFilterValueType();
		if (filterValueType === oFF.XValueType.VARIABLE)
		{
			inaValueStructure.putString("Type", "Variable");
			oFF.QInARepoUtils.setNameIfNotNull(inaValueStructure, "Value", valueBag.getVariableValue());
			if (valueBag.isFunctionalVariableValue())
			{
				inaValueStructure.putBoolean("IsFunctionalVariable", true);
				let funcVariableParameters = valueBag.getValue().getParameters();
				if (funcVariableParameters.hasElements())
				{
					let inaParams = inaValueStructure.putNewList("Parameters");
					oFF.XCollectionUtils.forEach(funcVariableParameters.getKeysAsReadOnlyList(), (parameter) => {
						let inaParam = inaParams.addNewStructure();
						inaParam.putStringNotNullAndNotEmpty("Name", parameter.getName());
						inaParam.putString("Value", funcVariableParameters.getByKey(parameter).getString());
					});
				}
			}
		}
		else if (filterValueType === oFF.XValueType.MEMBER_TYPE)
		{
			inaValueStructure.putString("Type", "MemberType");
			inaValueStructure.putString("Value", valueBag.getFieldValue().getValue().toString());
		}
		else
		{
			let inaNavigationList;
			if (filterValueType === oFF.XValueType.CURRENT_MEMBER)
			{
				inaValueStructure.putString("Type", "CurrentMember");
			}
			let literalField = null;
			let fieldValue = valueBag.getFieldValue();
			if (oFF.notNull(fieldValue))
			{
				literalField = fieldValue.getField();
			}
			oFF.QInARepoUtils.exportSupplementsAndValue(exporter, null, inaValueStructure, literalField, valueBag, null);
			let memberNavigations = valueBag.getMemberNavigations();
			let memberNavigationSize = memberNavigations.size();
			if (memberNavigationSize > 0)
			{
				inaNavigationList = inaValueStructure.putNewList("LowNavigations");
				for (let mnIdx = 0; mnIdx < memberNavigationSize; mnIdx++)
				{
					oFF.QInARepoFilterOperation.exportMemberNavigation(memberNavigations.get(mnIdx), inaNavigationList.addNewStructure());
				}
			}
		}
	}
	return inaValueList;
};
oFF.QInARepoFilterOperation.importMemberNavigation = function(inaNavigation)
{
	let memberNavigation = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.lookup(inaNavigation.getStringByKey("Function")));
	if (inaNavigation.containsKey("Parameters"))
	{
		let inaParameters = inaNavigation.getListByKey("Parameters");
		let inaParaSize = inaParameters.size();
		for (let idxPara = 0; idxPara < inaParaSize; idxPara++)
		{
			let inaParameter = inaParameters.getStructureAt(idxPara);
			if (inaParameter.containsKey("Navigations"))
			{
				let inaNavigations = inaParameter.getListByKey("Navigations");
				let inaNaviSize = inaNavigations.size();
				for (let idxNavi = 0; idxNavi < inaNaviSize; idxNavi++)
				{
					memberNavigation.addNavigation(oFF.QInARepoFilterOperation.importMemberNavigation(inaNavigations.getStructureAt(idxNavi)));
				}
			}
			else
			{
				if (inaParameter.containsKey("Level"))
				{
					let inaLevelValue = inaParameter.getByKey("Level");
					if (inaLevelValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelNumber(inaLevelValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelLiteral(inaLevelValue.getString()));
					}
				}
				else if (inaParameter.containsKey("Member"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithMemberName(inaParameter.getStringByKey("Member")));
				}
				else if (inaParameter.containsKey("NoValuesAboveLevel"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithNoValuesAboveLevel(inaParameter.getStringByKey("NoValuesAboveLevel")));
				}
				else if (inaParameter.containsKey("ErrorAboveLevel"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithErrorAboveLevel(inaParameter.getStringByKey("ErrorAboveLevel")));
				}
				else if (inaParameter.containsKey("Shift"))
				{
					let inaShift = inaParameter.getStructureByKey("Shift");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithShift(inaShift.getStringByKey("Level"), inaShift.getIntegerByKey("Constant")));
				}
				else if (inaParameter.containsKey("Range"))
				{
					let inaRange = inaParameter.getStructureByKey("Range");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithRange(inaRange.getStringByKey("Level"), inaRange.getIntegerByKey("OffsetLow"), inaRange.getIntegerByKey("OffsetHigh")));
				}
				else
				{
					let inaConstantValue = inaParameter.getByKey("Constant");
					if (inaConstantValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithIntegerConstant(inaConstantValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithStringConstant(inaConstantValue.getString()));
					}
				}
			}
		}
	}
	return memberNavigation;
};
oFF.QInARepoFilterOperation.importValues = function(importer, inaValueList, filterValueContainer, field, context)
{
	let size = inaValueList.size();
	for (let i = 0; i < size && i < 3; i++)
	{
		let inaValueStructure = inaValueList.getStructureAt(i);
		let valueBag;
		let inaType = inaValueStructure.getStringByKey("Type");
		let filterValueType = oFF.QInAConverter.lookupValueType(inaType);
		if (filterValueType === oFF.XValueType.VARIABLE)
		{
			let varName = inaValueStructure.getStringByKey("Value");
			if (oFF.notNull(varName))
			{
				let variables = context.getVariableContainer().getVariables();
				let variable = variables.getByKey(varName);
				if (oFF.notNull(variable))
				{
					valueBag = filterValueContainer.getValueAt(i);
					valueBag.setFilterValueType(filterValueType);
					valueBag.setVariableValue(variable);
					if (inaValueStructure.getBooleanByKey("IsFunctionalVariable") && inaValueStructure.containsKey("Parameters"))
					{
						oFF.XCollectionUtils.forEach(inaValueStructure.getListByKey("Parameters"), (param) => {
							let paramStr = param.asStructure();
							let name = paramStr.getStringByKey("Name");
							let value = paramStr.getStringByKey("Value");
							valueBag.setFunctionalVariableValueParameter(oFF.QFunctionalVariableParameter.createParameter(name, null, oFF.FunctionalVariableParameterType.DEFAULT, null, variable), value);
						});
					}
				}
			}
		}
		else
		{
			valueBag = filterValueContainer.getValueAt(i);
			if (filterValueType === oFF.XValueType.CURRENT_MEMBER)
			{
				valueBag.setFilterValueType(filterValueType);
			}
			if (filterValueType === oFF.XValueType.MEMBER_TYPE)
			{
				valueBag.setFilterValueType(filterValueType);
				valueBag.setValue(oFF.XStringValue.create(inaValueStructure.getStringByKey("Value")));
			}
			let inaNavigationList = oFF.PrUtils.getListProperty(inaValueStructure, "LowNavigations");
			if (oFF.isNull(inaNavigationList))
			{
				inaNavigationList = oFF.PrUtils.getListProperty(inaValueStructure, "Value");
			}
			if (oFF.notNull(inaNavigationList))
			{
				let navigations = valueBag.getMemberNavigations();
				navigations.clear();
				let inaNaviSize = inaNavigationList.size();
				for (let naviIdx = 0; naviIdx < inaNaviSize; naviIdx++)
				{
					let memberNavigation = oFF.QInARepoFilterOperation.importMemberNavigation(inaNavigationList.getStructureAt(naviIdx));
					navigations.add(memberNavigation);
				}
			}
			if (filterValueType !== oFF.XValueType.CURRENT_MEMBER && filterValueType !== oFF.XValueType.MEMBER_TYPE)
			{
				oFF.QInARepoUtils.importSupplementsAndValue(importer, valueBag, inaValueStructure, null, null, field);
			}
		}
	}
};
oFF.QInARepoFilterOperation.setKeyValueForMemberNavigation = function(inaParameter, key, value)
{
	if (oFF.isNull(value))
	{
		return false;
	}
	if (value.getValueType().isNumber())
	{
		inaParameter.putDouble(key, value.getDouble());
	}
	else
	{
		inaParameter.putString(key, value.toString());
	}
	return true;
};
oFF.QInARepoFilterOperation.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filterOperation = modelComponent;
	inaStructure.putString("Id", filterOperation.getUniqueId());
	let fieldMetadata = filterOperation.getFieldMetadata();
	oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "FieldName", fieldMetadata);
	let filterExpression = filterOperation.getFilterExpression();
	if (oFF.notNull(fieldMetadata))
	{
		if (oFF.notNull(filterExpression))
		{
			let parent = filterExpression.getParent();
			if (oFF.notNull(parent) && filterExpression.getParent().getOlapComponentType() === oFF.OlapComponentType.OLAP_FILTER_MANAGER)
			{
				let cacheKey = fieldMetadata.getCacheKey();
				inaStructure.put("QY_CACHE_CONTEXT", oFF.QInARepoUtils.exportCacheKey(cacheKey, filterOperation.getQueryManager()));
			}
		}
	}
	let comparisonOperator = filterOperation.getComparisonOperator();
	inaStructure.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
	inaStructure.putBoolean("IsExcluding", filterOperation.getSetSign() === oFF.SetSign.EXCLUDING);
	inaStructure.putBoolean("HasLevelOffset", filterOperation.hasLevelOffset());
	if (filterOperation.hasLevelOffset())
	{
		inaStructure.putInteger("LevelOffset", filterOperation.getLevelOffset());
	}
	inaStructure.putBoolean("HasDepth", filterOperation.hasDepth());
	if (filterOperation.hasDepth())
	{
		inaStructure.putInteger("Depth", filterOperation.getDepth());
	}
	inaStructure.putDouble("Exactness", filterOperation.getExactness());
	let hierarchyName = filterOperation.getHierarchyName();
	if (oFF.notNull(hierarchyName))
	{
		let filterExpr = filterOperation.getFilterExpression() !== null ? filterOperation.getFilterExpression() : filterOperation.getParent().getFilterExpression();
		let context = filterOperation.getContext();
		oFF.QInARepoHierarchy.exportHierarchyForFilter(exporter, exporter.isAbap(context), inaStructure, null, filterExpr, filterOperation.getQueryManager(), hierarchyName, filterOperation.getHierarchyDueDate(), filterOperation.getHierarchyVersion());
	}
	let inaValueList = oFF.QInARepoFilterOperation.exportValues(exporter, filterOperation);
	inaStructure.put("Values", inaValueList);
	if (filterOperation.isConvertToFlatFilter())
	{
		inaStructure.putBoolean("ConvertToFlatSelection", filterOperation.isConvertToFlatFilter());
	}
	if (filterOperation.getDataSource() !== null)
	{
		let dsStructure = exporter.exportDataSource(filterOperation.getDataSource(), false);
		inaStructure.put("DataSource", dsStructure.getStructureByKey("DataSource"));
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterOperation.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.OPERATION;
};
oFF.QInARepoFilterOperation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = null;
	let contextToValidate = context;
	if (oFF.notNull(parentComponent))
	{
		let parentFilterElement = parentComponent;
		filterExpression = parentFilterElement.getFilterExpression();
	}
	let filterOperation = modelComponent;
	if (oFF.isNull(filterOperation))
	{
		filterOperation = oFF.notNull(filterExpression) ? oFF.QFactory.createFilterOperation(filterExpression, null) : oFF.QFactory.createFilterOperation(context, null);
	}
	let fieldName = inaStructure.getStringByKey("FieldName");
	let field = null;
	if (oFF.notNull(fieldName) && oFF.notNull(context))
	{
		let fieldAccessor = context.getFieldAccessorSingle();
		let calcDimField = null;
		if (oFF.isNull(fieldAccessor) || inaStructure.containsKey("QY_CACHE_CONTEXT"))
		{
			let inaCache = inaStructure.getStructureByKey("QY_CACHE_CONTEXT");
			if (oFF.isNull(inaCache))
			{
				return null;
			}
			let cacheKey = oFF.QInARepoUtils.importCacheKey(inaCache);
			let fieldMetadata = context.getOlapEnv().getFieldMetadata(cacheKey);
			if (context.getComponentType() === oFF.FilterComponentType.FILTER_ACROSS_MODELS)
			{
				let famSourceContext = oFF.QInARepoUtils.getFilterAcrossModelSourceContext(context, cacheKey);
				if (oFF.notNull(famSourceContext))
				{
					contextToValidate = famSourceContext;
				}
			}
			if (oFF.isNull(fieldMetadata) && inaCache.containsKey("StorageName"))
			{
				calcDimField = oFF.QInARepoUtils.getFormulaCalcDimField(context, cacheKey.getKey1(), inaCache.getStringByKey("StorageName"));
				if (oFF.notNull(calcDimField))
				{
					filterOperation.setField(calcDimField);
				}
			}
			if (oFF.notNull(fieldMetadata))
			{
				filterOperation.setFieldMetadata(fieldMetadata);
			}
			else if (oFF.isNull(calcDimField))
			{
				return null;
			}
		}
		else
		{
			field = fieldAccessor.getFieldByName(fieldName);
			if (oFF.isNull(field))
			{
				calcDimField = oFF.QInARepoUtils.getFormulaCalcDimField(context, fieldName, context.getQueryManager().getClientQueryObjectStorageName());
				if (oFF.isNull(calcDimField))
				{
					return null;
				}
			}
			filterOperation.setField(field);
		}
	}
	let inaComparison = inaStructure.getStringByKeyExt("Comparison", "=");
	if (oFF.notNull(inaComparison))
	{
		let comparisonOperator = oFF.QInAConverter.lookupComparison(inaComparison);
		if (oFF.isNull(comparisonOperator))
		{
			importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate2("Unsupported comparison operator: ", inaComparison));
		}
		filterOperation.setComparisonOperator(comparisonOperator);
	}
	else
	{
		filterOperation.setComparisonOperator(null);
	}
	let isExcluding = inaStructure.getBooleanByKeyExt("IsExcluding", false);
	if (isExcluding)
	{
		filterOperation.setSetSign(oFF.SetSign.EXCLUDING);
	}
	else
	{
		filterOperation.setSetSign(oFF.SetSign.INCLUDING);
	}
	let hasLevelOffset = inaStructure.getBooleanByKeyExt("HasLevelOffset", false);
	if (!hasLevelOffset)
	{
		filterOperation.resetLevelOffset();
	}
	else
	{
		let levelOffset = inaStructure.getIntegerByKeyExt("LevelOffset", 0);
		filterOperation.setLevelOffset(levelOffset);
	}
	let hasDepth = inaStructure.getBooleanByKeyExt("HasDepth", false);
	if (!hasDepth)
	{
		filterOperation.resetDepth();
	}
	else
	{
		let depth = inaStructure.getIntegerByKeyExt("Depth", 0);
		filterOperation.setDepth(depth);
	}
	filterOperation.setConvertToFlatFilter(inaStructure.getBooleanByKeyExt("ConvertToFlatSelection", false));
	let uniqueId = inaStructure.getStringByKey("Id");
	filterOperation.setUniqueId(uniqueId);
	let exactness = inaStructure.getDoubleByKeyExt("Exactness", 0.0);
	filterOperation.setExactness(exactness);
	if (!oFF.QInARepoHierarchy.validateHierarchyNameForMetadataBasedHierarchy(contextToValidate, filterOperation.getDimensionName(), inaStructure.getStringByKey("HierarchyName")))
	{
		return null;
	}
	oFF.QInARepoHierarchy.importHierarchyForFilter(importer.isAbap(context), importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER), inaStructure, filterOperation, oFF.FilterComponentType.OPERATION);
	let inaValueList = inaStructure.getListByKey("Values");
	oFF.QInARepoFilterOperation.importValues(importer, inaValueList, filterOperation, field, context);
	if (importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && !filterOperation.areValuesInitialized())
	{
		return null;
	}
	if (inaStructure.containsKey("DataSource"))
	{
		filterOperation.setDataSource(importer.importDataSource(inaStructure));
	}
	else
	{
		filterOperation.setDataSource(null);
	}
	return filterOperation;
};

oFF.QInARepoFilterTuple = function() {};
oFF.QInARepoFilterTuple.prototype = new oFF.QInARepository();
oFF.QInARepoFilterTuple.prototype._ff_c = "QInARepoFilterTuple";

oFF.QInARepoFilterTuple.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filterTuple = modelComponent;
	inaStructure.putString("Code", "Tuple");
	inaStructure.putString("Id", filterTuple.getUniqueId());
	let inaSubSelectionsTuples = inaStructure.putNewList("SubSelections");
	let tupleStructureInSubSelections = inaSubSelectionsTuples.addNewStructure();
	let tuplesOperandStructure = tupleStructureInSubSelections.putNewStructure("TuplesOperand");
	let fieldNamesForFiltering = filterTuple.getFieldNames();
	if (filterTuple.hasTuples())
	{
		let tuplesInInA = tuplesOperandStructure.putNewList("Tuples");
		let tuples = filterTuple.getTuples();
		for (let l = 0; l < tuples.size(); l++)
		{
			let singleTupleCondition = tuples.get(l);
			let tuplesData = tuplesInInA.addNewList();
			for (let j = 0; j < fieldNamesForFiltering.size(); j++)
			{
				tuplesData.addString(singleTupleCondition.get(j));
			}
		}
	}
	if (filterTuple.hasDataSourceColumns())
	{
		let sourceColumns = filterTuple.getSourceColumns();
		let dataSource = filterTuple.getDataSourceForColumns();
		if (oFF.isNull(dataSource) || sourceColumns.size() !== fieldNamesForFiltering.size())
		{
			throw oFF.XException.createIllegalArgumentException("TuplesOperandFromDataSource: DataSource must be given and the number of sourceColumns must to be the same as the number of FieldNames.");
		}
		let sourceColumnsInInA = tuplesOperandStructure.putNewList("SourceColumns");
		sourceColumnsInInA.addAllStrings(sourceColumns);
		let dataSourceStructure = exporter.exportDataSource(dataSource, false);
		tuplesOperandStructure.putIfNotNull("DataSource", dataSourceStructure);
	}
	let fieldNames = tuplesOperandStructure.putNewList("FieldNames");
	fieldNames.addAllStrings(fieldNamesForFiltering);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterTuple.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.TUPLE;
};
oFF.QInARepoFilterTuple.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = null;
	if (oFF.notNull(parentComponent))
	{
		let parentFilterElement = parentComponent;
		filterExpression = parentFilterElement.getFilterExpression();
	}
	let filterTuple = oFF.QFilterTuple._create(context, filterExpression);
	filterTuple.setUniqueId(inaStructure.getStringByKey("Id"));
	let inaSubSelectionsOfTuples = inaStructure.getListByKey("SubSelections");
	if (oFF.notNull(inaSubSelectionsOfTuples))
	{
		let tuplesOperandInInA = inaSubSelectionsOfTuples.getStructureAt(0);
		tuplesOperandInInA = tuplesOperandInInA.getStructureByKey("TuplesOperand");
		if (tuplesOperandInInA.containsKey("DataSource"))
		{
			filterTuple = oFF.QFilterTupleFromDataSource._create(context, filterExpression);
		}
		let fieldNamesFromInA = tuplesOperandInInA.getListByKey("FieldNames");
		let fieldNames = oFF.PrUtils.asListOfString(fieldNamesFromInA);
		filterTuple.setFieldNames(fieldNames);
		if (filterTuple.hasTuples())
		{
			let tuplesFromInA = tuplesOperandInInA.getListByKey("Tuples");
			for (let k = 0; k < tuplesFromInA.size(); k++)
			{
				let tupleDataInInA = tuplesFromInA.getListAt(k);
				let tupleData = oFF.PrUtils.asListOfString(tupleDataInInA);
				filterTuple.addTupleCriteria(tupleData);
			}
		}
		if (filterTuple.hasDataSourceColumns())
		{
			let sourceColumns = tuplesOperandInInA.getListByKey("SourceColumns");
			let dataSource = tuplesOperandInInA.getStructureByKey("DataSource");
			filterTuple.setSourceColumns(oFF.PrUtils.asListOfString(sourceColumns));
			filterTuple.setDataSourceForColumns(importer.importDataSource(dataSource));
		}
	}
	return filterTuple;
};

oFF.QInARepoFilterVirtualDatasource = function() {};
oFF.QInARepoFilterVirtualDatasource.prototype = new oFF.QInARepository();
oFF.QInARepoFilterVirtualDatasource.prototype._ff_c = "QInARepoFilterVirtualDatasource";

oFF.QInARepoFilterVirtualDatasource.prototype.createMemberOperand = function(level, value)
{
	let schemaInA = oFF.PrFactory.createStructure();
	schemaInA.putString("AttributeName", level);
	let comparison = oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL);
	schemaInA.putString("Comparison", comparison);
	schemaInA.putString("Value", value);
	let schemaOperandElement = oFF.PrFactory.createStructure();
	schemaOperandElement.put("MemberOperand", schemaInA);
	return schemaOperandElement;
};
oFF.QInARepoFilterVirtualDatasource.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let virtualDSFilter = modelComponent;
	let inaInnerElement = oFF.PrFactory.createStructure();
	inaInnerElement.putString("Code", "And");
	let vdsSubSelections = inaInnerElement.putNewList("SubSelections");
	let schemaOperandElement = this.createMemberOperand("SchemaName", virtualDSFilter.getSchemaName());
	let packageOperandElement = this.createMemberOperand("PackageName", virtualDSFilter.getPackageName());
	let objectOperandElement = this.createMemberOperand("ObjectName", virtualDSFilter.getObjectName());
	vdsSubSelections.add(schemaOperandElement);
	vdsSubSelections.add(packageOperandElement);
	vdsSubSelections.add(objectOperandElement);
	if (exporter.m_capabilities.supportsVirtualDataSourceTypeColumns())
	{
		let typeOperandElement = this.createMemberOperand("Type", virtualDSFilter.getTypeName());
		vdsSubSelections.add(typeOperandElement);
	}
	inaStructure.put("Operator", inaInnerElement);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterVirtualDatasource.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.VIRTUAL_DATASOURCE;
};
oFF.QInARepoFilterVirtualDatasource.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInARepoFormulaCalculatedDimension = function() {};
oFF.QInARepoFormulaCalculatedDimension.prototype = new oFF.QInARepository();
oFF.QInARepoFormulaCalculatedDimension.prototype._ff_c = "QInARepoFormulaCalculatedDimension";

oFF.QInARepoFormulaCalculatedDimension.exportFormulaCalcProperties = function(exporter, inaStructure, dimension)
{
	let isKeyRefSerializationEnabled = dimension.getQueryManager() !== null && dimension.getQueryManager().isKeyRefSerializationEnabled();
	if (isKeyRefSerializationEnabled && dimension.getOlapEnv() !== null)
	{
		let sharedProperties = dimension.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(dimension.getPropertiesKeyRef(), dimension.getQueryManager().getClientQueryObjectStorageName());
		if (oFF.notNull(sharedProperties))
		{
			let inaProperties = inaStructure.putNewStructure("Properties");
			oFF.QInARepoUtils.addKeyRefStructure(exporter, sharedProperties, inaProperties, dimension.getQueryManager());
			return;
		}
	}
	let filterRoot = dimension.getFilterContext().getFilterRootElement();
	if (oFF.notNull(filterRoot))
	{
		let inaElement = exporter.exportComponent(null, filterRoot, null, oFF.QImExFlag.DEFAULT_ALL);
		inaStructure.put("Selection", inaElement);
	}
	let calculatedAttributes = inaStructure.putNewList("CalculatedAttributes");
	let fieldIterator = dimension.getFieldIterator();
	while (fieldIterator.hasNext())
	{
		let field = fieldIterator.next();
		let calculatedAttribute = exporter.exportComponent(oFF.OlapComponentType.FIELD, field, null, oFF.QImExFlag.DEFAULT_ALL);
		if (calculatedAttribute.asStructure().getStringByKey("PresentationType") === null)
		{
			exporter.exportComponent(oFF.OlapComponentType.FIELD, field, null, oFF.QImExFlag.DEFAULT_ALL);
		}
		calculatedAttributes.add(calculatedAttribute);
	}
	let aggregationFieldNames = dimension.getAggregationFieldNames();
	if (oFF.notNull(aggregationFieldNames))
	{
		let inaAggregationFieldNames = inaStructure.putNewList("AggregationFieldNames");
		inaAggregationFieldNames.addAllStrings(aggregationFieldNames);
	}
	let aggregationDimensions = dimension.getAdditionalAggregationDimensions();
	if (oFF.notNull(aggregationDimensions))
	{
		let aggregationDimensionsIter = aggregationDimensions.getIterator();
		let inaAggregationDimensions = inaStructure.putNewList("AggregationDimensions");
		while (aggregationDimensionsIter.hasNext())
		{
			let aggregationDimension = aggregationDimensionsIter.next();
			let inaAggregationDimension = inaAggregationDimensions.addNewStructure();
			inaAggregationDimension.putString("DimensionName", aggregationDimension.getDimensionName());
			inaAggregationDimension.putString("HierarchyName", aggregationDimension.getHierarchyName());
			inaAggregationDimension.putBoolean("HierarchyActivation", aggregationDimension.activateHierarchy());
		}
	}
	let externalFilterIdsToApply = dimension.getProperties().getFilterIdsToApply();
	if (oFF.notNull(externalFilterIdsToApply))
	{
		let inaExternalFilterIdsToApply = inaStructure.putNewList("ExternalFilterIdsToApply");
		inaExternalFilterIdsToApply.addAllStrings(externalFilterIdsToApply);
	}
	inaStructure.putStringNotNullAndNotEmpty("DisplayName", dimension.getProperties().getDisplayName());
	inaStructure.putStringNotNullAndNotEmpty("DisplayDescription", dimension.getProperties().getDisplayDescription());
	inaStructure.putBoolean("ApplyAdditionalFilterContext", dimension.getProperties().isApplyAdditionalFilterContext());
	inaStructure.putString("Text", dimension.getProperties().getText());
};
oFF.QInARepoFormulaCalculatedDimension.exportFormulaDimensionParts = function(exporter, inaStructure, dimension)
{
	oFF.QInARepoFormulaCalculatedDimension.exportFormulaCalcProperties(exporter, inaStructure, dimension);
	let dependentCustomMembers = dimension.getDependentCustomMembers();
	if (!dependentCustomMembers.isEmpty())
	{
		let inaDependentCustomMembers = inaStructure.putNewList("DependentCustomMembers");
		let dependentCustomMembersIter = dependentCustomMembers.getIterator();
		while (dependentCustomMembersIter.hasNext())
		{
			let dependentCustomMember = dependentCustomMembersIter.next();
			let inaDependentCustomMember = oFF.QInARepoMemberAbstract.exportCustomMember(exporter, dependentCustomMember);
			if (oFF.notNull(inaDependentCustomMember))
			{
				inaDependentCustomMember.putString("AliasName", dependentCustomMember.getAliasName());
				inaDependentCustomMembers.add(inaDependentCustomMember);
			}
		}
	}
	let dependentDimensions = dimension.getDependentCalculatedDimensions();
	if (!dependentDimensions.isEmpty())
	{
		let inaDependentCalcDimensions = inaStructure.putNewList("DependentCalcDims");
		let dependentDimensionsIter = dependentDimensions.getIterator();
		while (dependentDimensionsIter.hasNext())
		{
			let dependentDimension = dependentDimensionsIter.next();
			exporter.exportDimension(dependentDimension, inaDependentCalcDimensions.addNewStructure());
		}
	}
	inaStructure.putBoolean("IsApplyParentExtFilters", dimension.isApplyParentExternalFilters());
	if (dimension.getCurrency() !== null)
	{
		inaStructure.putString("Currency", dimension.getCurrency());
	}
	let additionalFilterRoot = dimension.getAdditionalFilterContext().getFilterRootElement();
	if (oFF.notNull(additionalFilterRoot))
	{
		let inaAdditionalElement = exporter.exportComponent(null, additionalFilterRoot, null, oFF.QImExFlag.DEFAULT_ALL);
		inaStructure.put("AdditionalFilterSelection", inaAdditionalElement);
	}
};
oFF.QInARepoFormulaCalculatedDimension.importCalculatedDimensionProperties = function(importer, inaStructure, context, dimension)
{
	let inaProperties = inaStructure.getStructureByKey("Properties");
	if (oFF.notNull(inaProperties))
	{
		let inaKeyRef = inaProperties.getStructureByKey("KeyRef");
		let storageName;
		if (dimension.getQueryManager().getClientQueryObjectStorageName() !== null)
		{
			storageName = dimension.getQueryManager().getClientQueryObjectStorageName();
		}
		else
		{
			storageName = inaKeyRef.getStringByKey("StorageName");
		}
		let keyRef = oFF.QFactory.createKeyRef(storageName, inaKeyRef.getStringByKey("GroupName"), inaKeyRef.getStringByKey("ObjectName"));
		dimension.setPropertiesKeyRef(keyRef);
		return;
	}
	if (importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		let keyRefStorageName = dimension.getQueryManager().getClientQueryObjectStorageName();
		if (oFF.notNull(keyRefStorageName))
		{
			let clientQueryObjectManager = context.getOlapEnv().getClientQueryObjectManager();
			let properties = clientQueryObjectManager.getFormulaCalcDimProperties(dimension.getName(), keyRefStorageName);
			if (oFF.notNull(properties))
			{
				dimension.setPropertiesKeyRef(properties);
				return;
			}
		}
	}
	let inaCalculatedAttributes = inaStructure.getListByKey("CalculatedAttributes");
	if (oFF.notNull(inaCalculatedAttributes))
	{
		for (let l = 0; l < inaCalculatedAttributes.size(); l++)
		{
			let inaCalculatedAttribute = inaCalculatedAttributes.get(l);
			importer.importComponent(oFF.OlapComponentType.FIELD, inaCalculatedAttribute, null, dimension, context);
		}
	}
	let inaAggregationFieldNames = inaStructure.getListByKey("AggregationFieldNames");
	if (oFF.notNull(inaAggregationFieldNames))
	{
		for (let i = 0; i < inaAggregationFieldNames.size(); i++)
		{
			dimension.addAggregationFieldName(inaAggregationFieldNames.get(i).asString().getString());
		}
	}
	let filter = dimension.getFilterContext();
	let filterElement = null;
	let inaFilterElement = inaStructure.getStructureByKey("Selection");
	if (oFF.notNull(inaFilterElement))
	{
		filterElement = importer.importComponent(null, inaFilterElement, null, filter, context);
	}
	filter.setComplexRoot(filterElement);
	let inaAggregationDimensions = inaStructure.getListByKey("AggregationDimensions");
	if (oFF.notNull(inaAggregationDimensions))
	{
		for (let n = 0; n < inaAggregationDimensions.size(); n++)
		{
			let inaAggregationDimension = inaAggregationDimensions.get(n).asStructure();
			dimension.addAdditionalAggregationDimension(inaAggregationDimension.getStringByKey("DimensionName"), inaAggregationDimension.getStringByKey("HierarchyName"), inaAggregationDimension.getBooleanByKey("HierarchyActivation"));
		}
	}
	let inaExternalFilterIdsToApply = inaStructure.getListByKey("ExternalFilterIdsToApply");
	if (oFF.notNull(inaExternalFilterIdsToApply))
	{
		for (let m = 0; m < inaExternalFilterIdsToApply.size(); m++)
		{
			dimension.getProperties().addFilterIdsToApply(inaExternalFilterIdsToApply.get(m).asString().getString());
		}
	}
	dimension.getProperties().setDisplayName(inaStructure.getStringByKey("DisplayName"));
	dimension.getProperties().setDisplayDescription(inaStructure.getStringByKey("DisplayDescription"));
	dimension.getProperties().setIsApplyAdditionalFilterContext(inaStructure.getBooleanByKey("ApplyAdditionalFilterContext"));
	dimension.getProperties().setText(inaStructure.getStringByKey("Text"));
	let clientDefaultField = dimension.getFieldByName(inaStructure.getStringByKey("ClientDefaultTextAttribute"));
	dimension.setClientDefaultTextField(clientDefaultField);
	clientDefaultField = dimension.getFieldByName(inaStructure.getStringByKey("ClientDefaultKeyAttribute"));
	dimension.setClientDefaultKeyField(clientDefaultField);
	oFF.QInARepoDimension.importRsFields(importer, inaStructure, dimension);
	oFF.QInARepoDimension.importRsAttributeNodes(importer, inaStructure, dimension);
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("FieldLayoutType"))
	{
		let fieldLayoutType = oFF.QInAConverter.lookupFieldLayoutType(inaStructure.getStringByKey("FieldLayoutType"));
		dimension.setFieldLayoutType(fieldLayoutType);
	}
	if (inaStructure.containsKey("TextFieldModified"))
	{
		dimension.getFieldContainerBase().setShouldUseActualTextField(inaStructure.getBooleanByKey("TextFieldModified"));
	}
};
oFF.QInARepoFormulaCalculatedDimension.importFormulaCalculatedDimension = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	let calcDimName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(dimension))
	{
		if (!context.getModelCapabilities().supportsCalculatedDimensionsExt())
		{
			importer.addWarning(oFF.ErrorCodes.CALCULATED_DIMENSIONS_CAPABILITY_NOT_SUPPORTED, oFF.ErrorMessages.CALCULATED_DIMENSIONS_CAPABILITY_NOT_SUPPORTED_DESERIALIZE);
		}
		dimension = oFF.QFactory.createFormulaCalculatedDimension(context, calcDimName);
		dimension.setParent(parentComponent);
		context.getQueryModel().addDimension(dimension);
	}
	else
	{
		let inaProperties = inaStructure.getStructureByKey("Properties");
		dimension.reset(oFF.notNull(inaProperties));
	}
	dimension.setDimensionType(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION);
	dimension.setName(calcDimName);
	dimension.setTopEntries(inaStructure.getIntegerByKeyExt("Top", 0));
	dimension.setSkipEntries(inaStructure.getIntegerByKeyExt("Skip", 0));
	importer.importTotals(inaStructure, dimension.getResultStructureControllerBase(), context);
	let inaDependentCalcDims = inaStructure.getListByKey("DependentCalcDims");
	if (oFF.notNull(inaDependentCalcDims))
	{
		for (let j = 0; j < inaDependentCalcDims.size(); j++)
		{
			let inaDependentCalcDim = inaDependentCalcDims.get(j);
			let dependentCalcDim = oFF.QFactory.createFormulaCalculatedDimension(context, calcDimName);
			dependentCalcDim.setParent(parentComponent);
			oFF.QInARepoFormulaCalculatedDimension.importFormulaCalculatedDimension(importer, inaDependentCalcDim, dependentCalcDim, null, context);
			dimension.addDependentCalculatedDimension(dependentCalcDim);
		}
	}
	let inaDependentCustomMembers = inaStructure.getListByKey("DependentCustomMembers");
	if (oFF.notNull(inaDependentCustomMembers))
	{
		let queryModelBase = dimension.getQueryModelBase();
		let measureDimension = queryModelBase.getPrimaryCalculationDimension();
		for (let k = 0; k < inaDependentCustomMembers.size(); k++)
		{
			let inaDependentCustomMember = inaDependentCustomMembers.get(k);
			let memberName = inaDependentCustomMember.getStringByKey("Name");
			let aliasName = inaDependentCustomMember.getStringByKey("AliasName");
			if (oFF.XStringUtils.isNullOrEmpty(memberName) && oFF.XStringUtils.isNullOrEmpty(aliasName))
			{
				continue;
			}
			let dependentMeasure;
			if (measureDimension.getStructureMemberByAlias(aliasName) !== null)
			{
				dependentMeasure = measureDimension.getStructureMemberByAlias(aliasName);
			}
			else if (measureDimension.getStructureMember(memberName) !== null)
			{
				dependentMeasure = measureDimension.getStructureMember(memberName);
			}
			else
			{
				dependentMeasure = importer.importStructureMember(measureDimension, inaDependentCustomMember, context);
				if (measureDimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
				{
					dependentMeasure.setAliasName(inaDependentCustomMember.getStringByKey("AliasName"));
				}
			}
			dimension.addDependentCustomMember(dependentMeasure);
		}
	}
	dimension.setApplyParentExternalFilters(inaStructure.getBooleanByKey("IsApplyParentExtFilters"));
	if (inaStructure.getStringByKey("Currency") !== null)
	{
		dimension.setCurrency(inaStructure.getStringByKey("Currency"));
	}
	oFF.QInARepoFormulaCalculatedDimension.importCalculatedDimensionProperties(importer, inaStructure, context, dimension);
	let additionalFilter = dimension.getAdditionalFilterContext();
	let additionalFilterElement = null;
	let inaAdditionalFilterElement = inaStructure.getStructureByKey("AdditionalFilterSelection");
	if (oFF.notNull(inaAdditionalFilterElement))
	{
		additionalFilterElement = importer.importComponent(null, inaAdditionalFilterElement, null, additionalFilter, context);
	}
	additionalFilter.setComplexRoot(additionalFilterElement);
	if (inaStructure.containsKey("IsHidden"))
	{
		dimension.setHidden(inaStructure.getBooleanByKey("IsHidden"));
	}
	return dimension;
};
oFF.QInARepoFormulaCalculatedDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	inaStructure.putString("Name", dimension.getName());
	if (dimension.getParent() !== null && dimension.getAxis() !== null)
	{
		let type = dimension.getAxisType();
		inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(type));
	}
	let topEntries = dimension.getTopEntries();
	if (topEntries > 0)
	{
		inaStructure.putInteger("Top", topEntries);
	}
	let skipEntries = dimension.getSkipEntries();
	if (skipEntries > 0)
	{
		inaStructure.putInteger("Skip", skipEntries);
	}
	exporter.exportTotals(dimension, inaStructure);
	oFF.QInARepoFormulaCalculatedDimension.exportFormulaDimensionParts(exporter, inaStructure, dimension);
	if (dimension.isHidden())
	{
		inaStructure.putBoolean("IsHidden", true);
	}
	if (!dimension.isUseServerDefaultTextField())
	{
		inaStructure.putString("ClientDefaultTextAttribute", dimension.getClientDefaultTextField().getName());
	}
	if (!dimension.isUseServerDefaultKeyField())
	{
		inaStructure.putString("ClientDefaultKeyAttribute", dimension.getClientDefaultKeyField().getName());
	}
	oFF.QInARepoDimension.exportResultSetFields(exporter, inaStructure, dimension);
	let defaultResultSetTextField = dimension.getDefaultResultSetTextField();
	if (oFF.notNull(defaultResultSetTextField) && defaultResultSetTextField.haveAnyInAPropertiesChanged() || dimension.getShouldUseActualTextField())
	{
		inaStructure.putBoolean("TextFieldModified", true);
	}
	oFF.QInARepoDimension.exportResultSetAttributes(exporter, inaStructure, dimension);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFormulaCalculatedDimension.prototype.getComponentType = function()
{
	return oFF.DimensionType.FORMULA_CALCULATED_DIMENSION;
};
oFF.QInARepoFormulaCalculatedDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return oFF.QInARepoFormulaCalculatedDimension.importFormulaCalculatedDimension(importer, inaStructure, modelComponent, parentComponent, context);
};

oFF.QInARepoFormulaException = function() {};
oFF.QInARepoFormulaException.prototype = new oFF.QInARepository();
oFF.QInARepoFormulaException.prototype._ff_c = "QInARepoFormulaException";

oFF.QInARepoFormulaException.exportEvaluates = function(evaluates, exporter, inaStructure, isBw)
{
	if (evaluates.isEmpty())
	{
		return;
	}
	let inaEvaluatesList = inaStructure.putNewList("EvaluateOn");
	let sizeEvaluates = evaluates.size();
	for (let iEvaluate = 0; iEvaluate < sizeEvaluates; iEvaluate++)
	{
		let inaEvaluateStruct = inaEvaluatesList.addNewStructure();
		let evaluate = evaluates.get(iEvaluate);
		inaEvaluateStruct.putString("Name", evaluate.getField().getName());
		inaEvaluateStruct.putString("Evaluate", evaluate.getEvaluate().toString());
		let comparisonOperator = evaluate.getOperator();
		let comparison;
		if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
		{
			comparison = "NOTBETWEEN";
		}
		else
		{
			comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
		}
		inaEvaluateStruct.putString("Comparison", comparison);
		oFF.QInARepoUtils.exportValue(exporter, "Low", inaEvaluateStruct, evaluate.getLowValue(), evaluate.getValueType());
		if (comparisonOperator.getNumberOfParameters() > 1)
		{
			oFF.QInARepoUtils.exportValue(exporter, "High", inaEvaluateStruct, evaluate.getHighValue(), evaluate.getValueType());
		}
	}
};
oFF.QInARepoFormulaException.exportSettings = function(threshold, exporter, inaThresholdStruct)
{
	let inaSettings = inaThresholdStruct.putNewList("Settings");
	let size = threshold.size();
	for (let iSetting = 0; iSetting < size; iSetting++)
	{
		let setting = threshold.get(iSetting);
		let inaSetting = inaSettings.addNewStructure();
		inaSetting.putString("Name", setting.getName());
		inaSetting.putInteger("Priority", setting.getPriority());
		let value = setting.getValue();
		if (oFF.isNull(value) || oFF.XString.isEqual(value, ""))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Exception Threshold Setting is missing it's value");
		}
		else
		{
			inaSetting.putString("Value", value);
		}
	}
};
oFF.QInARepoFormulaException.exportThresholds = function(thresholds, exporter, inaStructure, isBw)
{
	let inaThresholdsList = inaStructure.putNewList("Threshold");
	let sizeThresholds = thresholds.size();
	for (let iThreshold = 0; iThreshold < sizeThresholds; iThreshold++)
	{
		let threshold = thresholds.get(iThreshold);
		let inaThresholdStruct = inaThresholdsList.addNewStructure();
		let name = threshold.getName();
		if (!oFF.XString.isEqual(name, "Settings"))
		{
			inaThresholdStruct.putStringNotNull("Name", name);
		}
		let text = threshold.getText();
		inaThresholdStruct.putStringNotNull("Text", text);
		let comparisonOperator = threshold.getOperator();
		let comparison;
		if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
		{
			comparison = "NOTBETWEEN";
		}
		else
		{
			comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
		}
		inaThresholdStruct.putString("Comparison", comparison);
		let isDouble = threshold.getValueType() === oFF.XValueType.DOUBLE;
		if (threshold.getLowXValue() !== null)
		{
			if (isDouble)
			{
				inaThresholdStruct.putDouble("Low", threshold.getLowValue());
			}
			else
			{
				inaThresholdStruct.putString("Low", threshold.getLow());
			}
		}
		if (threshold.getHighXValue() !== null && comparisonOperator.getNumberOfParameters() > 1)
		{
			if (isDouble)
			{
				inaThresholdStruct.putDouble("High", threshold.getHighValue());
			}
			else
			{
				inaThresholdStruct.putString("High", threshold.getHigh());
			}
		}
		if (!threshold.isEmpty())
		{
			oFF.QInARepoFormulaException.exportSettings(threshold, exporter, inaThresholdStruct);
		}
		else
		{
			inaThresholdStruct.putInteger("AlertLevel", threshold.getAlertLevel().getLevel());
		}
	}
};
oFF.QInARepoFormulaException.importEvaluates = function(inaException, queryModel, newException, importer)
{
	let inaEvaluates = inaException.getListByKey("EvaluateOn");
	if (oFF.isNull(inaEvaluates))
	{
		return;
	}
	let size = inaEvaluates.size();
	for (let evalIdx = 0; evalIdx < size; evalIdx++)
	{
		let inaEvaluate = inaEvaluates.getStructureAt(evalIdx);
		let fieldName = inaEvaluate.getStringByKey("Name");
		let someField = queryModel.getFieldByName(fieldName);
		if (oFF.isNull(someField))
		{
			let dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimensionByName))
			{
				someField = dimensionByName.getKeyField();
			}
		}
		if (oFF.isNull(someField))
		{
			importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate3("Could not find field '", fieldName, "'!"));
			return;
		}
		if (!inaEvaluate.containsKey("Low"))
		{
			importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate2("No low value for field: ", fieldName));
			return;
		}
		let valueType = someField.getValueType();
		let lowValue = oFF.QInARepoUtils.importValueByType(importer, inaEvaluate, "Low", valueType);
		if (importer.hasErrors())
		{
			importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected low valuetype for field: ", valueType.getName()));
			return;
		}
		let newEvaluate = newException._addNewEvaluateWithFieldInternal(someField, lowValue);
		if (inaEvaluate.containsKey("High"))
		{
			let highValue = oFF.QInARepoUtils.importValueByType(importer, inaEvaluate, "High", valueType);
			if (importer.hasErrors())
			{
				importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected high valuetype for field: ", valueType.getName()));
				return;
			}
			newEvaluate.setHighValue(highValue);
		}
		newEvaluate.setEvaluate(oFF.QExceptionEvalType.lookupExceptionEvalType(inaEvaluate.getStringByKey("Evaluate")));
		let operatorName = inaEvaluate.getStringByKey("Comparison");
		let operator = oFF.QInAConverter.lookupComparison(operatorName);
		if (oFF.isNull(operator))
		{
			importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate3("Unexpected comparison operator for evaluate: Operator: '", operatorName, "'"));
			return;
		}
		newEvaluate.setOperator(operator);
	}
};
oFF.QInARepoFormulaException.importSettings = function(inaSettings, newThreshold)
{
	if (oFF.isNull(inaSettings))
	{
		return;
	}
	let size = inaSettings.size();
	for (let iSetting = 0; iSetting < size; iSetting++)
	{
		let inaSetting = inaSettings.getStructureAt(iSetting);
		let name = inaSetting.getStringByKey("Name");
		let priority = inaSetting.getIntegerByKey("Priority");
		let value = inaSetting.getStringByKey("Value");
		if (oFF.notNull(value) && !oFF.XString.isEqual(value, ""))
		{
			let newSetting = newThreshold.addNewSetting(name, priority);
			newSetting.setValue(value);
		}
	}
};
oFF.QInARepoFormulaException.importThresholds = function(inaException, newException)
{
	let inaThresholds = inaException.getListByKey("Threshold");
	if (oFF.notNull(inaThresholds))
	{
		let size = inaThresholds.size();
		for (let thresholdIdx = 0; thresholdIdx < size; thresholdIdx++)
		{
			let inaThreshold = inaThresholds.getStructureAt(thresholdIdx);
			let alertLevel = inaThreshold.getIntegerByKeyExt("AlertLevel", -9999);
			let newThreshold;
			let isDouble = !inaThreshold.hasStringByKey("Low");
			if (isDouble)
			{
				newThreshold = newException._addNewThresholdInternal(inaThreshold.getDoubleByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			else
			{
				newThreshold = newException._addNewThresholdWithStringInternal(inaThreshold.getStringByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			let name = inaThreshold.getStringByKey("Name");
			if (oFF.notNull(name))
			{
				newThreshold.setName(name);
			}
			let text = inaThreshold.getStringByKey("Text");
			if (oFF.notNull(text))
			{
				newThreshold.setText(text);
			}
			let color = inaThreshold.getStringByKey("Color");
			if (oFF.notNull(color))
			{
				newThreshold.setColor(color);
			}
			let operator = oFF.QInAConverter.lookupComparison(inaThreshold.getStringByKey("Comparison"));
			newThreshold.setOperator(operator);
			if (operator.getNumberOfParameters() === 2)
			{
				if (isDouble)
				{
					let highDouble = inaThreshold.getDoubleByKey("High");
					newThreshold.setHighValue(highDouble);
				}
				else
				{
					let highString = inaThreshold.getStringByKey("High");
					newThreshold.setHigh(highString);
				}
			}
			oFF.QInARepoFormulaException.importSettings(inaThreshold.getListByKey("Settings"), newThreshold);
		}
	}
};
oFF.QInARepoFormulaException.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let formulaException = modelComponent;
	inaStructure.putString("Name", formulaException.getName());
	inaStructure.putString("Text", formulaException.getText());
	inaStructure.putString("Type", formulaException.getFormulaExceptionType().getName());
	inaStructure.putBoolean("CalculateRatioVariance", formulaException.isRatioVarianceCalculated());
	inaStructure.putBoolean("HandleExcludedFilters", formulaException.isHandleExcludedFilters());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaException.hasPropertyChanged(oFF.QExceptionProperties.QY_NULL_AS_ZERO))
	{
		inaStructure.putBoolean("NullAsZero", formulaException.isHandleNullAsZero());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaException.hasPropertyChanged(oFF.QExceptionProperties.QY_AUTO_SIGN_FLIP))
	{
		if (formulaException.isAutoSignFlip() || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && formulaException.hasPropertyChanged(oFF.QExceptionProperties.QY_AUTO_SIGN_FLIP))
		{
			inaStructure.putBoolean("AutoSignFlip", formulaException.isAutoSignFlip());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaException.hasPropertyChanged(oFF.QExceptionProperties.QY_IS_PRIMARY))
	{
		inaStructure.putBoolean("IsPrimary", formulaException.isPrimaryMeasure());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaException.hasPropertyChanged(oFF.QExceptionProperties.QY_ACTIVE))
	{
		inaStructure.putBoolean("Active", formulaException.isActive());
	}
	inaStructure.putString("EvaluateDefault", formulaException.getEvaluateDefault().toString());
	let structureContext = inaStructure.putNewList("StructureContext");
	let measureMemberStruct = structureContext.addNewStructure();
	let measureMember = formulaException.getMeasure();
	if (oFF.notNull(measureMember))
	{
		let measureDim = measureMember.getDimension();
		measureMemberStruct.putString("DimensionName", measureDim.getName());
		measureMemberStruct.putStringNotNull("MemberName", measureMember.getAliasOrMemberName());
	}
	let baseMemberStruct = structureContext.addNewStructure();
	let baseMember = formulaException.getBaseMeasure();
	if (oFF.notNull(baseMember))
	{
		let baseDim = baseMember.getDimension();
		baseMemberStruct.putString("DimensionName", baseDim.getName());
		baseMemberStruct.putStringNotNull("MemberName", baseMember.getAliasOrMemberName());
	}
	else
	{
		baseMemberStruct.putStringNotNull("MemberName", formulaException.getBaseMeasureName());
	}
	let referenceMemberStruct = structureContext.addNewStructure();
	let referenceMember = formulaException.getReferenceMeasure();
	if (oFF.notNull(referenceMember))
	{
		let referenceDim = referenceMember.getDimension();
		referenceMemberStruct.putString("DimensionName", referenceDim.getName());
		referenceMemberStruct.putStringNotNull("MemberName", referenceMember.getAliasOrMemberName());
	}
	else
	{
		referenceMemberStruct.putStringNotNull("MemberName", formulaException.getReferenceMeasureName());
	}
	let structureMember = formulaException.getStructure();
	if (structureMember.isPresent())
	{
		let structureMemberStruct = structureContext.addNewStructure();
		let structureDim = structureMember.get().getDimension();
		structureMemberStruct.putString("DimensionName", structureDim.getName());
		structureMemberStruct.putStringNotNull("MemberName", structureMember.get().getAliasOrMemberName());
	}
	let queryModel = formulaException.getQueryModel();
	let isBw = exporter.isAbap(queryModel);
	oFF.QInARepoFormulaException.exportThresholds(formulaException.getThresholds(), exporter, inaStructure, isBw);
	oFF.QInARepoFormulaException.exportEvaluates(formulaException.getEvaluates(), exporter, inaStructure, isBw);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFormulaException.prototype.exportKeyReference = function(exporter, modelComponent, inaStructure)
{
	let modelComponent3 = modelComponent;
	if (modelComponent3.getQueryManager() !== null)
	{
		if (!modelComponent3.getQueryManager().isKeyRefSerializationEnabled())
		{
			return false;
		}
	}
	let queryModel = modelComponent3.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let formulaExceptionManager = queryModel.getFormulaExceptionManager();
		if (formulaExceptionManager.getModelFormulaException(modelComponent3.getName()) === modelComponent3)
		{
			oFF.QInARepoUtils.addKeyRefStructure(exporter, modelComponent3, inaStructure, modelComponent3.getQueryManager());
			return true;
		}
	}
	return oFF.QInARepository.prototype.exportKeyReference.call( this , exporter, modelComponent, inaStructure);
};
oFF.QInARepoFormulaException.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_EXCEPTION;
};
oFF.QInARepoFormulaException.prototype.getDimensionName = function(queryModel, measureStructure)
{
	let measureDimName = measureStructure.getStringByKey("DimensionName");
	if (oFF.isNull(measureDimName) && measureStructure.getBooleanByKeyExt("MeasureStructure", false))
	{
		measureDimName = queryModel.getMeasureDimension().getName();
	}
	return measureDimName;
};
oFF.QInARepoFormulaException.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	let inaStructure = inaElement;
	let tagName = this.getTagName();
	if (oFF.notNull(tagName) && oFF.notNull(inaStructure))
	{
		inaStructure = inaStructure.getStructureByKey(tagName);
	}
	let queryModel = oFF.isNull(context) ? null : context.getQueryModel();
	if (oFF.notNull(queryModel) && oFF.notNull(inaStructure))
	{
		let formulaExceptionManager = queryModel.getFormulaExceptionManager();
		let inaKeyRef = inaStructure.getStructureByKey("KeyRef");
		let name = inaStructure.getStringByKey("Name");
		let modelFormulaException = null;
		if (oFF.notNull(inaKeyRef))
		{
			let keyRef = oFF.QFactory.createKeyRef(inaKeyRef.getStringByKey("StorageName"), inaKeyRef.getStringByKey("GroupName"), inaKeyRef.getStringByKey("ObjectName"));
			modelFormulaException = formulaExceptionManager.getModelFormulaExceptionByKeyRef(keyRef);
		}
		else if (oFF.isNull(modelComponent) && oFF.notNull(name))
		{
			modelFormulaException = formulaExceptionManager.getModelFormulaException(name);
		}
		if (oFF.notNull(modelFormulaException))
		{
			return modelFormulaException;
		}
	}
	return oFF.QInARepository.prototype.importComponent.call( this , importer, inaElement, modelComponent, parentComponent, context);
};
oFF.QInARepoFormulaException.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let formulaException = modelComponent;
	if (oFF.isNull(formulaException))
	{
		let name = inaStructure.getStringByKey("Name");
		let text = inaStructure.getStringByKey("Text");
		formulaException = oFF.QFactory.createFormulaException(context, name, text);
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("NullAsZero"))
	{
		formulaException.setHandleNullAsZero(inaStructure.getBooleanByKey("NullAsZero"));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("HandleExcludedFilters"))
	{
		formulaException.setHandleExcludedFilters(inaStructure.getBooleanByKey("HandleExcludedFilters"));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("CalculateRatioVariance"))
	{
		formulaException.setCalculateRatioVariance(inaStructure.getBooleanByKey("CalculateRatioVariance"));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("AutoSignFlip"))
	{
		formulaException.setAutoSignFlip(inaStructure.getBooleanByKey("AutoSignFlip"));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("IsPrimary"))
	{
		formulaException.setIsPrimaryMeasure(inaStructure.getBooleanByKeyExt("IsPrimary", true));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("Active"))
	{
		formulaException.setActive(inaStructure.getBooleanByKeyExt("Active", true));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("EvaluateDefault"))
	{
		let evalType = oFF.QExceptionEvalType.lookupExceptionEvalType(inaStructure.getStringByKey("EvaluateDefault"));
		formulaException.setEvaluateDefault(evalType);
	}
	formulaException.setFormulaExceptionType(oFF.FormulaExceptionType.lookup(inaStructure.getStringByKey("Type")));
	let structureContext = inaStructure.getListByKey("StructureContext");
	let measureStructure = structureContext.getStructureAt(0);
	let measureDimName = this.getDimensionName(queryModel, measureStructure);
	let measureMemberName = measureStructure.getStringByKey("MemberName");
	if (oFF.notNull(measureDimName) && oFF.notNull(measureMemberName))
	{
		let measureDim = queryModel.getDimensionByNameFromExistingMetadata(measureDimName);
		let measureMember = measureDim.getStructureMemberByAliasOrMember(measureMemberName);
		if (oFF.isNull(measureMember))
		{
			measureMember = queryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(measureMemberName, queryModel.getQueryManager().getClientQueryObjectStorageName(), measureDim === queryModel.getPrimaryCalculationDimension());
		}
		formulaException.setMeasure(measureMember);
	}
	let baseStructure = structureContext.getStructureAt(1);
	let baseDimName = this.getDimensionName(queryModel, baseStructure);
	let baseMemberName = baseStructure.getStringByKey("MemberName");
	if (oFF.notNull(baseDimName) && oFF.notNull(baseMemberName))
	{
		let baseDim = queryModel.getDimensionByNameFromExistingMetadata(baseDimName);
		let baseMember = baseDim.getStructureMemberByAliasOrMember(baseMemberName);
		if (oFF.isNull(baseMember))
		{
			return null;
		}
		formulaException.setBaseMeasure(baseMember);
	}
	else if (oFF.notNull(baseMemberName))
	{
		formulaException.setBaseMeasureName(baseMemberName);
	}
	oFF.QInARepoFormulaException.importEvaluates(inaStructure, queryModel, formulaException, importer);
	let referenceStructure = structureContext.getStructureAt(2);
	let referenceDimName = this.getDimensionName(queryModel, referenceStructure);
	let referenceMemberName = referenceStructure.getStringByKey("MemberName");
	if (oFF.notNull(referenceDimName) && oFF.notNull(referenceMemberName))
	{
		let referenceDim = queryModel.getDimensionByNameFromExistingMetadata(referenceDimName);
		let referenceMember = referenceDim.getStructureMemberByAliasOrMember(referenceMemberName);
		if (oFF.isNull(referenceMember))
		{
			return null;
		}
		formulaException.setReferenceMeasure(referenceMember);
	}
	else if (oFF.notNull(referenceMemberName))
	{
		formulaException.setReferenceMeasureName(referenceMemberName);
	}
	oFF.QInARepoFormulaException.importThresholds(inaStructure, formulaException);
	if (structureContext.size() > 3)
	{
		let structureStructure = structureContext.getStructureAt(3);
		let structureDimName = this.getDimensionName(queryModel, structureStructure);
		let structureMemberName = structureStructure.getStringByKey("MemberName");
		if (oFF.notNull(structureDimName) && oFF.notNull(structureMemberName))
		{
			let structureDim = queryModel.getDimensionByNameFromExistingMetadata(structureDimName);
			let structureMember = structureDim.getStructureMemberByAliasOrMember(structureMemberName);
			if (oFF.isNull(structureMember))
			{
				return null;
			}
			formulaException.setStructure(structureMember);
		}
	}
	return formulaException;
};

oFF.QInARepoFormulaExceptionManager = function() {};
oFF.QInARepoFormulaExceptionManager.prototype = new oFF.QInARepository();
oFF.QInARepoFormulaExceptionManager.prototype._ff_c = "QInARepoFormulaExceptionManager";

oFF.QInARepoFormulaExceptionManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let formulaExceptionManager = modelComponent;
	if (oFF.notNull(formulaExceptionManager))
	{
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaExceptionManager.hasPropertyChanged(oFF.QExceptionProperties.QY_FORMULA_RESULT_VISIBLE))
		{
			inaStructure.putBoolean("FormulaResultVisible", formulaExceptionManager.isFormulaResultVisible());
		}
		let listDisabledModelExceptions = inaStructure.putNewList("ActiveStatusModelExceptions");
		oFF.XStream.of(formulaExceptionManager.getAllModelFormulaExceptions()).forEach((modelException) => {
			if (!modelException.isActive())
			{
				listDisabledModelExceptions.addString(modelException.getName());
			}
		});
		let formulaExceptions = oFF.PrFactory.createList();
		for (let i = 0; i < formulaExceptionManager.size(); i++)
		{
			let formulaException = formulaExceptionManager.get(i);
			if (oFF.notNull(formulaException))
			{
				let inaException = oFF.PrFactory.createStructure();
				exporter.exportFormulaException(formulaException, inaException);
				formulaExceptions.add(inaException);
			}
		}
		inaStructure.put("FormulaExceptions", formulaExceptions);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFormulaExceptionManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER;
};
oFF.QInARepoFormulaExceptionManager.prototype.getDeactivatedModelExceptions = function(inaStructure)
{
	inaStructure.getListByKey("ActiveStatusModelExceptions");
	let deactivatedModelExceptions = inaStructure.getListByKey("ActiveStatusModelExceptions");
	let deactivatedModelExceptionsList = oFF.XList.create();
	for (let x = 0; x < deactivatedModelExceptions.size(); x++)
	{
		deactivatedModelExceptionsList.add(oFF.XStringValue.create(deactivatedModelExceptions.get(x).asString().getString()));
	}
	return deactivatedModelExceptionsList;
};
oFF.QInARepoFormulaExceptionManager.prototype.getTagName = function()
{
	return "FormulaExceptionManager";
};
oFF.QInARepoFormulaExceptionManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let formulaExceptionManager = modelComponent;
	if (oFF.notNull(formulaExceptionManager))
	{
		formulaExceptionManager.clear();
		if (oFF.notNull(inaStructure))
		{
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("FormulaResultVisible"))
			{
				formulaExceptionManager.setFormulaResultVisible(inaStructure.getBooleanByKeyExt("FormulaResultVisible", false));
			}
			let formulaException;
			let inaList = inaStructure.getListByKey("FormulaExceptionsModeler");
			if (oFF.notNull(inaList))
			{
				for (let i = 0; i < inaList.size(); i++)
				{
					let listItem = inaList.getStructureAt(i);
					let name = listItem.getStringByKey("Name");
					let text = listItem.getStringByKey("Text");
					formulaException = formulaExceptionManager.addNewModelFormulaException(name, text);
					let importedFormulaException = importer.importFormulaException(listItem, formulaException, formulaExceptionManager, context);
					if (oFF.isNull(importedFormulaException))
					{
						formulaExceptionManager.removeModelFormulaException(name, true);
					}
				}
			}
			inaList = inaStructure.getListByKey("FormulaExceptions");
			if (oFF.notNull(inaList))
			{
				for (let j = 0; j < inaList.size(); j++)
				{
					formulaException = importer.importFormulaException(inaList.getStructureAt(j), null, formulaExceptionManager, context);
					formulaExceptionManager.add(formulaException);
				}
			}
			if (inaStructure.containsKey("ActiveStatusModelExceptions"))
			{
				let deactivatedModelExceptions = this.getDeactivatedModelExceptions(inaStructure);
				oFF.XStream.of(deactivatedModelExceptions).forEach((deactivatedException) => {
					let modelException = formulaExceptionManager.getModelFormulaException(deactivatedException.toString());
					if (oFF.notNull(modelException))
					{
						modelException.setActive(false);
					}
				});
			}
		}
	}
	return formulaExceptionManager;
};

oFF.QInARepoHierarchy = function() {};
oFF.QInARepoHierarchy.prototype = new oFF.QInARepository();
oFF.QInARepoHierarchy.prototype._ff_c = "QInARepoHierarchy";

oFF.QInARepoHierarchy.appendItemsToCatalogResult = function(catalogResult, hierarchiesList, dimensionName)
{
	let len = oFF.PrUtils.getListSize(hierarchiesList, 0);
	for (let i = 0; i < len; i++)
	{
		let hierarchyStructure = oFF.PrUtils.getStructureElement(hierarchiesList, i);
		let item = oFF.HierarchyCatalogItem.createCatalogItem();
		item.setDimensionName(dimensionName);
		let hierarchyName;
		if (hierarchyStructure.hasStringByKey("Name"))
		{
			hierarchyName = hierarchyStructure.getStringByKey("Name");
		}
		else
		{
			hierarchyName = hierarchyStructure.getStringByKey("HierarchyName");
		}
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyName) || catalogResult.containsHierarchy(hierarchyName))
		{
			continue;
		}
		item.setHierarchyName(hierarchyName);
		item.setHierarchyUniqueName(hierarchyStructure.getStringByKey("UniqueName"));
		let hierarchyDescription = oFF.PrUtils.getStringProperty(hierarchyStructure, "Description");
		if (oFF.notNull(hierarchyDescription))
		{
			item.setHierarchyLongText(hierarchyDescription.getString());
		}
		let version = oFF.PrUtils.getStringProperty(hierarchyStructure, "Version");
		if (oFF.notNull(version))
		{
			item.setVersionName(version.getString());
		}
		let structure = oFF.PrUtils.getStringProperty(hierarchyStructure, "Structure");
		if (oFF.notNull(structure))
		{
			item.setHierarchyType(oFF.HierarchyType.lookup(structure.getString()));
		}
		let isModeled = oFF.PrUtils.getBooleanValueProperty(hierarchyStructure, "IsModeled", false);
		item.setIsModeled(isModeled);
		let dateTo = oFF.PrUtils.getStringProperty(hierarchyStructure, "DateTo");
		if (oFF.notNull(dateTo))
		{
			let dateToString = dateTo.getString();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToString))
			{
				item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToString));
			}
		}
		let levels = oFF.PrUtils.getListProperty(hierarchyStructure, "Levels");
		if (oFF.notNull(levels))
		{
			item.setSupportsHierarchyLevels(true);
			let levelList = oFF.XList.create();
			let lenLevel = oFF.PrUtils.getListSize(levels, 0);
			for (let levelIndex = 0; levelIndex < lenLevel; levelIndex++)
			{
				let levelStructure = oFF.PrUtils.getStructureElement(levels, levelIndex);
				if (oFF.isNull(levelStructure))
				{
					continue;
				}
				let catalogLevel = oFF.HierarchyCatalogLevel.createCatalogLevel();
				let level = oFF.PrUtils.getIntegerValueProperty(levelStructure, "Level", -1);
				if (level > -1)
				{
					catalogLevel.setLevel(level);
				}
				let levelName = oFF.PrUtils.getStringProperty(levelStructure, "LevelName");
				if (oFF.notNull(levelName))
				{
					catalogLevel.setLevelName(levelName.getString());
				}
				let levelCaption = oFF.PrUtils.getStringProperty(levelStructure, "LevelCaption");
				if (oFF.notNull(levelCaption))
				{
					catalogLevel.setLevelDescription(levelCaption.getString());
				}
				let levelUniqueName = oFF.PrUtils.getStringProperty(levelStructure, "LevelUniqueName");
				if (oFF.notNull(levelUniqueName))
				{
					catalogLevel.setLevelUniqueName(levelUniqueName.getString());
				}
				let levelDimensionName = oFF.PrUtils.getStringProperty(levelStructure, "DimensionName");
				if (oFF.notNull(levelDimensionName))
				{
					catalogLevel.setLevelDimensionName(levelDimensionName.getString());
				}
				let levelType = oFF.PrUtils.getIntegerProperty(levelStructure, "LevelType");
				if (oFF.notNull(levelType))
				{
					catalogLevel.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(levelType.getInteger()));
				}
				levelList.add(catalogLevel);
			}
			item.setHierarchyLevels(levelList);
		}
		let restNode = hierarchyStructure.getStringByKey("RestNode");
		if (oFF.notNull(restNode))
		{
			item.setRestNode(restNode);
		}
		let virtualRootNode = hierarchyStructure.getStringByKey("VirtualRootNode");
		if (oFF.notNull(virtualRootNode))
		{
			item.setVirtualRootNode(virtualRootNode);
		}
		catalogResult.addItem(item);
	}
	return catalogResult;
};
oFF.QInARepoHierarchy.exportHierarchyForFilter = function(exporter, isAbap, inaStructure, dimension, filterExpression, queryManager, hierarchyName, dueDate, version)
{
	if (oFF.notNull(hierarchyName))
	{
		inaStructure.putString("HierarchyName", hierarchyName);
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && isAbap)
		{
			if (oFF.isNull(filterExpression) || !oFF.XString.isEqual(filterExpression.getName(), oFF.QFilter.FIXED_FILTER_CONTAINER) || oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit())
			{
				oFF.QInARepoUtils.setDateIfNotNull(exporter, inaStructure, "HierarchyDueDate", dueDate);
				inaStructure.putStringNotNull("HierarchyVersion", version);
			}
		}
	}
};
oFF.QInARepoHierarchy.exportLevels = function(inaHierarchy, hierarchyItem)
{
	if (hierarchyItem.supportsHierarchyLevels())
	{
		let inaLevels = inaHierarchy.putNewList("Levels");
		let hierarchyLevels = hierarchyItem.getHierarchyLevels();
		if (oFF.notNull(hierarchyLevels))
		{
			let size = hierarchyLevels.size();
			for (let levelIdx = 0; levelIdx < size; levelIdx++)
			{
				let currentLevel = hierarchyLevels.get(levelIdx);
				let inaLevel = inaLevels.addNewStructure();
				inaLevel.putString("LevelUniqueName", currentLevel.getLevelUniqueName());
				inaLevel.putInteger("Level", currentLevel.getLevel());
				inaLevel.putString("LevelName", currentLevel.getLevelName());
				inaLevel.putString("LevelCaption", currentLevel.getLevelDescription());
				inaLevel.putStringNotNull("DimensionName", currentLevel.getLevelDimensionName());
				inaLevel.putInteger("LevelType", oFF.QInAConverter.lookupHierarchyLevelTypeIna(currentLevel.getLevelType()));
			}
		}
	}
};
oFF.QInARepoHierarchy.hasPlaceHolderInStructure = function(inaStructure, placeHolderType, placeHolderReference)
{
	let placeHolder = inaStructure.getStringByKey(placeHolderType);
	let hasPlaceHolder = oFF.notNull(placeHolder) && oFF.XString.isEqual(placeHolderReference, placeHolder);
	return hasPlaceHolder;
};
oFF.QInARepoHierarchy.importHierarchyForFilter = function(isAbap, hasHierarchyInfoFeature, inaStructure, filterComponent, filterComponentType)
{
	let hierarchyName = inaStructure.getStringByKey("HierarchyName");
	let hierarchyDueDate = null;
	let hierarchyVersion = null;
	if (hasHierarchyInfoFeature && isAbap)
	{
		hierarchyVersion = inaStructure.getStringByKey("HierarchyVersion");
		let hierarchyDueDateValue = inaStructure.getStringByKey("HierarchyDueDate");
		if (oFF.notNull(hierarchyDueDateValue))
		{
			if (filterComponentType === oFF.FilterComponentType.CARTESIAN_LIST)
			{
				hierarchyDueDate = oFF.XDate.createDateSafe(hierarchyDueDateValue);
			}
			else if (filterComponentType === oFF.FilterComponentType.OPERATION)
			{
				hierarchyDueDate = oFF.XDate.createDateFromSAPFormat(hierarchyDueDateValue);
			}
		}
	}
	if (filterComponentType === oFF.FilterComponentType.CARTESIAN_LIST)
	{
		filterComponent.setHierarchyInfo(hierarchyName, hierarchyDueDate, hierarchyVersion);
	}
	else if (filterComponentType === oFF.FilterComponentType.OPERATION)
	{
		filterComponent.setHierarchyInfo(hierarchyName, hierarchyDueDate, hierarchyVersion);
	}
};
oFF.QInARepoHierarchy.importLeveledHierarchy = function(importer, context, dimension, inaHierarchy)
{
	let hier = oFF.QLeveledHierarchy.create(context, dimension, inaHierarchy.getStringByKey(inaHierarchy.containsKey("Name") ? "Name" : "HierarchyName"));
	hier.setHierarchyUniqueName(inaHierarchy.getStringByKey("UniqueName"));
	if (inaHierarchy.getStringByKey("DimensionName") === null)
	{
		hier.setDimensionName(dimension.getName());
	}
	else
	{
		hier.setDimensionName(inaHierarchy.getStringByKey("DimensionName"));
	}
	hier.setHierarchyType(oFF.HierarchyType.lookup(inaHierarchy.getStringByKey("Structure")));
	hier.setIsModeled(inaHierarchy.getBooleanByKeyExt("IsModeled", false));
	let hierDueDate = inaHierarchy.getStringByKey("DueDate");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierDueDate))
	{
		hier.setDateTo(oFF.QInARepoUtils.createDate(hierDueDate));
	}
	hier.setHierarchyDescription(inaHierarchy.getStringByKey("Description"));
	let inaLevels = inaHierarchy.getListByKey("Levels");
	if (!oFF.PrUtils.isListEmpty(inaLevels))
	{
		oFF.QInARepoHierarchy.importLevels(hier, inaLevels);
	}
	return hier;
};
oFF.QInARepoHierarchy.importLevels = function(hier, inaLevels)
{
	let size = inaLevels.size();
	for (let levelIdx = 0; levelIdx < size; levelIdx++)
	{
		let inaLevel = inaLevels.getStructureAt(levelIdx);
		let level = oFF.QHierarchyLevel.create(hier, inaLevel.getStringByKey("LevelUniqueName"), inaLevel.getIntegerByKey("Level"));
		level.setLevelName(inaLevel.getStringByKey("LevelName"));
		level.setLevelText(inaLevel.getStringByKey("LevelCaption"));
		level.setLevelDimensionName(inaLevel.getStringByKey("DimensionName"));
		level.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(inaLevel.getIntegerByKey("LevelType")));
		level.setNavigationAttribute(inaLevel.getStringByKey("NavAttr"));
		hier.getAllLevelBase().add(level);
	}
};
oFF.QInARepoHierarchy.isDueDatePlaceHolderForAutoSubmit = function(dimension)
{
	let isDueDateVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		let queryManagerBase = dimension.getQueryManager();
		isDueDateVariableForAutoSubmit = oFF.notNull(queryManagerBase) && queryManagerBase.isExecuteAutoVariableSubmit() && dimension.effectivelyUseHierarchyDueDateVariable();
	}
	return isDueDateVariableForAutoSubmit;
};
oFF.QInARepoHierarchy.isNamePlaceHolderForAutoSubmit = function(dimension)
{
	let isHierarchyNameVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		let queryManagerBase = dimension.getQueryManager();
		isHierarchyNameVariableForAutoSubmit = oFF.notNull(queryManagerBase) && queryManagerBase.isExecuteAutoVariableSubmit() && dimension.effectivelyUseHierarchyNameVariable();
	}
	return isHierarchyNameVariableForAutoSubmit;
};
oFF.QInARepoHierarchy.isVersionPlaceHolderForAutoSubmit = function(dimension)
{
	let isVersionVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		let queryManagerBase = dimension.getQueryManager();
		isVersionVariableForAutoSubmit = oFF.notNull(queryManagerBase) && queryManagerBase.isExecuteAutoVariableSubmit() && dimension.effectivelyUseHierarchyVersionVariable();
	}
	return isVersionVariableForAutoSubmit;
};
oFF.QInARepoHierarchy.validateHierarchyNameForMetadataBasedHierarchy = function(context, dimensionName, hierarchyName)
{
	let valid;
	if (context.getComponentType() === oFF.OlapComponentType.OLAP_FILTER_MANAGER || oFF.XStringUtils.isNullOrEmpty(hierarchyName))
	{
		valid = true;
	}
	else
	{
		let queryModel = context.getQueryModel();
		let dimension = oFF.isNull(queryModel) ? null : queryModel.getDimensionByName(dimensionName);
		valid = oFF.notNull(dimension) && dimension.supportsHierarchy() && (dimension.hasExternalHierarchies() || dimension.getHierarchies() === null || (context.getQueryManager() !== null && context.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.BW)) || !queryModel.getModelCapabilities().supportsHierarchyLevelMetadata() && !queryModel.getModelCapabilities().supportsDimensionHierarchyLevels() || oFF.XStream.of(dimension.getHierarchies().getObjects()).anyMatch((hio) => {
			return oFF.XString.isEqual(hio.getHierarchyName(), hierarchyName);
		}));
	}
	return valid;
};
oFF.QInARepoHierarchy.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	if (dimension.supportsHierarchy())
	{
		let isHierarchyActive = dimension.isHierarchyActive();
		let isBw = exporter.isAbap(dimension.getQueryModel());
		let hierarchyName = dimension.getHierarchyName();
		let queryManagerBase = dimension.getQueryManager();
		let isAutoSubmit = oFF.notNull(queryManagerBase) && queryManagerBase.isExecuteAutoVariableSubmit();
		let isDueDateVariableForAutoSubmit = oFF.QInARepoHierarchy.isDueDatePlaceHolderForAutoSubmit(dimension);
		let isVersionVariableForAutoSubmit = oFF.QInARepoHierarchy.isVersionPlaceHolderForAutoSubmit(dimension);
		let isHierarchyNameVariableForAutoSubmit = oFF.QInARepoHierarchy.isNamePlaceHolderForAutoSubmit(dimension);
		let useVariableHierarchy = oFF.XStringUtils.isNullOrEmpty(hierarchyName) && isHierarchyNameVariableForAutoSubmit;
		let actualHierarchyOnDimension = hierarchyName;
		if (useVariableHierarchy)
		{
			hierarchyName = dimension.getHierarchyNameVariableName();
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
		{
			if (dimension.isEnforceHierarchyNameVariable())
			{
				inaStructure.putBoolean("HierarchyNameVariableEnforce", true);
			}
			if (dimension.isEnforceHierarchyDueDateVariableOrDefault())
			{
				inaStructure.putBoolean("HierarchyDueDateVariableOrDefaultEnforce", true);
			}
			if (dimension.isEnforceHierarchyVersionVariableOrDefault())
			{
				inaStructure.putBoolean("HierarchyVersionVariableOrDefaultEnforce", true);
			}
			let hierarchyManager = dimension.getHierarchyManagerBase();
			let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.shouldExportInRepoDeltaFormat();
			if (shouldContinueExporting)
			{
				oFF.QInAExportUtil.setNonEmptyString(inaStructure, "HierarchyName", hierarchyName);
				oFF.QInAExportUtil.setNonEmptyString(inaStructure, "Name", hierarchyName);
				if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_HIERARCHY_ACTIVE))
				{
					inaStructure.putBoolean("HierarchyActive", isHierarchyActive);
				}
				if (oFF.XStringUtils.isNullOrEmpty(actualHierarchyOnDimension) || oFF.XString.isEqual(actualHierarchyOnDimension, dimension.getHierarchyNameVariableName()))
				{
					inaStructure.putString("NameIs", "Variable");
				}
				if (dimension.effectivelyUseHierarchyDueDateVariable() || isDueDateVariableForAutoSubmit)
				{
					inaStructure.putString("DueDateIs", "Variable");
					oFF.QInAExportUtil.setNonEmptyString(inaStructure, "DueDate", dimension.getHierarchyDueDateVariableName());
				}
				else if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_DUE_DATE))
				{
					oFF.QInARepoUtils.setDate(exporter, inaStructure, "DueDate", dimension.getEffectiveHierarchyDueDate());
				}
				if (isVersionVariableForAutoSubmit)
				{
					inaStructure.putString("VersionIs", "Variable");
					oFF.QInAExportUtil.setNonEmptyString(inaStructure, "Version", dimension.getHierarchyVersionVariableName());
				}
				else
				{
					oFF.QInAExportUtil.setNonEmptyString(inaStructure, "Version", dimension.getEffectiveHierarchyVersion());
				}
				if (isAutoSubmit && dimension.useDefaultDrillLevelOnChange())
				{
					inaStructure.putBoolean("UseDefaultDrillLevelOnChange", true);
				}
				let initialDrillLevel = 0;
				initialDrillLevel = dimension.getInitialDrillLevel();
				if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.hasPropertyChanged(oFF.QDimensionProperties.QY_SELECTOR_INITIAL_DRILL_LEVEL))
				{
					inaStructure.putInteger("SelectorInitialDrillLevel", dimension.getSelectorRootLevel());
				}
				if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_DRILL_LEVEL))
				{
					inaStructure.putInteger("InitialDrillLevel", initialDrillLevel);
				}
				if (dimension.getInitialDrillOffset() !== 0)
				{
					inaStructure.putInteger("InitialDrillOffset", dimension.getInitialDrillOffset());
				}
				if (dimension.isExplicitDrillOnFilteredNodes())
				{
					inaStructure.putBoolean("ExplicitDrillOnFilteredNodes", dimension.isExplicitDrillOnFilteredNodes());
				}
				let isSupportMaxDrillLevel = dimension.getModelCapabilities() !== null && dimension.getModelCapabilities().supportsMaxDrillLevel();
				if (isSupportMaxDrillLevel)
				{
					if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_MAX_DRILL_LEVEL))
					{
						let maxDrillLevel = dimension.getMaxDrillLevel();
						inaStructure.putInteger("MaxDrillLevel", maxDrillLevel);
					}
					if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_MAX_RUNTIME_LEVEL))
					{
						let maxRuntimeLevel = dimension.getMaxRuntimeLevel();
						inaStructure.putInteger("MaxRuntimeLevel", maxRuntimeLevel);
					}
				}
				if (dimension.hasStickyMembers())
				{
					inaStructure.putNewList("StickyDimensionMembers").addAllStrings(dimension.getStickyMembers());
				}
				let alignment = dimension.getLowerLevelNodeAlignment();
				if (dimension.getModelCapabilities().supportsExpandBottomUp())
				{
					if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_LOWER_LEVEL_NODE_ALIGNMENT))
					{
						inaStructure.putBoolean("ExpandBottomUp", alignment === oFF.Alignment.CHILDREN_ABOVE_PARENT);
					}
				}
				if (isBw)
				{
					if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_LOWER_LEVEL_NODE_ALIGNMENT))
					{
						let nodeAlignment;
						let capabilities = dimension.getModelCapabilities();
						if (oFF.notNull(capabilities) && capabilities.supportsExpandBottomUp())
						{
							nodeAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA(alignment);
						}
						else
						{
							nodeAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA2(alignment);
						}
						inaStructure.putString("LowerLevelNodeAlignment", nodeAlignment);
					}
					if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || dimension.getHierarchyManager().hasPropertyChanged(oFF.QHierarchyProperties.QY_NODE_CONDENSATION))
					{
						let nodeCondensation = dimension.hasNodeCondensation();
						inaStructure.putBoolean("NodeCondensation", nodeCondensation);
					}
					if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchyManager.hasPropertyChanged(oFF.QHierarchyProperties.QY_MEMBER_OF_POSTED_NODE_VISIBILITY))
					{
						let visibility = dimension.getMemberOfPostedNodeVisibility();
						let memberOfPostedNodeVisibility = oFF.QInAConverter.lookupResultSetVisibilityInA(visibility);
						inaStructure.putString("MemberOfPostedNodeVisibility", memberOfPostedNodeVisibility);
					}
				}
				if (dimension.isHierarchyNavigationDeltaMode())
				{
					inaStructure.putBoolean("HierarchyNavigationDeltaMode", true);
				}
				if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
				{
					this.exportHierarchyLevels(inaStructure, dimension, hierarchyName);
				}
				let hierarchy = dimension.getHierarchy();
				if (oFF.notNull(hierarchy) && hierarchy.isCustomHierarchy())
				{
					inaStructure.putBoolean("IsTransient", true);
					inaStructure.putStringNotNull("Description", hierarchy.getHierarchyDescription());
				}
			}
			return inaStructure;
		}
	}
	return null;
};
oFF.QInARepoHierarchy.prototype.exportHierarchyLevels = function(inaStructure, dimension, hierarchyName)
{
	if (dimension.getModelCapabilities().supportsDimensionHierarchyLevels())
	{
		let hierarchies = dimension.getHierarchies();
		if (oFF.notNull(hierarchies))
		{
			let hierarchiesIt = hierarchies.getObjectsIterator();
			while (hierarchiesIt.hasNext())
			{
				let catalogItem = hierarchiesIt.next();
				if (oFF.XString.isEqual(catalogItem.getHierarchyName(), hierarchyName))
				{
					oFF.QInARepoHierarchy.exportLevels(inaStructure, catalogItem);
					return;
				}
			}
		}
	}
};
oFF.QInARepoHierarchy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY;
};
oFF.QInARepoHierarchy.prototype.getTagName = function()
{
	return "HierarchyRepo";
};
oFF.QInARepoHierarchy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	if (dimension.supportsHierarchy())
	{
		let fixInFilter = dimension.isDisplayHierarchyFixInFilter();
		dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(false);
		if (oFF.isNull(inaStructure))
		{
			dimension.setHierarchy(null);
		}
		else if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasElements())
		{
			let hierarchyName = inaStructure.getStringByKey("Name") !== null ? inaStructure.getStringByKey("Name") : inaStructure.getStringByKey("HierarchyName");
			let useHierarchyNameVariable = dimension.getHierarchyManagerBase().useHierarchyNameVariable();
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("NameIs"))
			{
				let isHierarchyNamePlaceHolderInStructure = oFF.QInARepoHierarchy.hasPlaceHolderInStructure(inaStructure, "NameIs", "Variable");
				useHierarchyNameVariable = isHierarchyNamePlaceHolderInStructure;
			}
			dimension.getHierarchyManagerBase().setUseHierarchyNameVariable(useHierarchyNameVariable);
			if (useHierarchyNameVariable)
			{
				dimension.getHierarchyManagerBase().setHierarchyNameVariableName(hierarchyName);
			}
			let hierarchy = null;
			if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
			{
				if (dimension.getModelCapabilities().supportsDimensionHierarchyLevels())
				{
					this.importHierarchyAsCatalogItem(inaStructure, dimension);
					this.importLeveledHierarchyToMetadata(importer, inaStructure, context, dimension);
				}
				let leveledHierarchy = dimension.getLeveledHierarchy(hierarchyName);
				let isHierarchyActiveDefaultValue = false;
				if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA && (oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyName()) || oFF.notNull(leveledHierarchy)))
				{
					if (dimension.getHierarchy() !== null && oFF.XString.isEqual(dimension.getHierarchyName(), hierarchyName))
					{
						hierarchy = dimension.getHierarchy();
						isHierarchyActiveDefaultValue = dimension.isHierarchyActive();
					}
					else if (dimension.getHierarchy() !== null && !oFF.XString.isEqual(dimension.getHierarchyName(), hierarchyName))
					{
						hierarchy = dimension.getHierarchy();
						dimension.setHierarchyName(hierarchyName);
						hierarchy.setHierarchyName(hierarchyName);
					}
					else if (oFF.notNull(leveledHierarchy) && oFF.XString.isEqual(leveledHierarchy.getName(), hierarchyName))
					{
						hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, hierarchyName);
					}
				}
				else
				{
					if (inaStructure.getBooleanByKey("IsTransient"))
					{
						hierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, hierarchyName, inaStructure.getStringByKey("Description"));
					}
					else
					{
						hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, hierarchyName);
					}
				}
				this.importHierarchyDueDate(importer, inaStructure, dimension, hierarchy);
				this.importHierarchyVersion(inaStructure, dimension, hierarchy);
				if (oFF.notNull(hierarchy))
				{
					dimension.setHierarchy(hierarchy);
					if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
					{
						isHierarchyActiveDefaultValue = true;
					}
					let isActive = inaStructure.getBooleanByKeyExt("HierarchyActive", isHierarchyActiveDefaultValue);
					dimension.setHierarchyActive(isActive);
					dimension.setSelectorHierarchyActive(isActive);
					let queryManagerBase = dimension.getQueryManager();
					let isAutoSubmit = oFF.notNull(queryManagerBase) && queryManagerBase.isExecuteAutoVariableSubmit();
					if (isAutoSubmit && inaStructure.containsKey("UseDefaultDrillLevelOnChange"))
					{
						dimension.setUseDefaultDrillLevelOnChange(inaStructure.getBooleanByKey("UseDefaultDrillLevelOnChange"));
					}
				}
			}
			dimension.setEnforceHierarchyNameVariable(inaStructure.getBooleanByKeyExt("HierarchyNameVariableEnforce", false));
			dimension.getHierarchyManagerBase().setEnforceHierarchyDueDateVariableOrDefaultInternal(inaStructure.getBooleanByKeyExt("HierarchyDueDateVariableOrDefaultEnforce", false));
			dimension.setEnforceHierarchyVersionVariableOrDefault(inaStructure.getBooleanByKeyExt("HierarchyVersionVariableOrDefaultEnforce", false));
			let stickyDimensionMembers = inaStructure.getListByKey("StickyDimensionMembers");
			dimension.clearStickyMembers();
			if (oFF.XCollectionUtils.hasElements(stickyDimensionMembers))
			{
				for (let sdi = 0; sdi < stickyDimensionMembers.size(); sdi++)
				{
					dimension.addStickyMember(stickyDimensionMembers.getStringAt(sdi));
				}
			}
			let defaultInitialDrillLevel = 0;
			if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA)
			{
				defaultInitialDrillLevel = dimension.getInitialDrillLevel();
			}
			let initialDrillLevel = inaStructure.getIntegerByKeyExt("InitialDrillLevel", defaultInitialDrillLevel);
			let selectorInitialDrillLevel = dimension.getSelectorRootLevel();
			if (importer.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
			{
				selectorInitialDrillLevel = inaStructure.getIntegerByKeyExt("SelectorInitialDrillLevel", initialDrillLevel);
			}
			else if (inaStructure.containsKey("SelectorInitialDrillLevel"))
			{
				selectorInitialDrillLevel = inaStructure.getIntegerByKey("SelectorInitialDrillLevel");
			}
			dimension.setInitialDrillLevel(initialDrillLevel);
			dimension.setSelectorInitialDrillLevel(selectorInitialDrillLevel);
			if (dimension.getModelCapabilities().supportsMaxDrillLevel())
			{
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("MaxDrillLevel"))
				{
					let maxDrillLevel = inaStructure.getIntegerByKeyExt("MaxDrillLevel", -1);
					dimension.getHierarchyManager().setMaxDrillLevel(maxDrillLevel);
				}
				if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("MaxRuntimeLevel"))
				{
					let maxRuntimeLevel = inaStructure.getIntegerByKeyExt("MaxRuntimeLevel", -1);
					dimension.getHierarchyManager().setMaxRuntimeLevel(maxRuntimeLevel);
				}
			}
			let initialDrillOffset = inaStructure.getIntegerByKeyExt("InitialDrillOffset", 0);
			dimension.setInitialDrillOffset(initialDrillOffset);
			dimension.setExplicitDrillOnFilteredNodes(inaStructure.getBooleanByKeyExt("ExplicitDrillOnFilteredNodes", false));
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("LowerLevelNodeAlignment") || inaStructure.containsKey("ExpandBottomUp"))
			{
				let alignment = oFF.Alignment.DEFAULT_VALUE;
				if (context.getModelCapabilities().supportsExpandBottomUp())
				{
					let nodeAlignment = inaStructure.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
					alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
					if (inaStructure.containsKey("ExpandBottomUp"))
					{
						let isExpandingBottomUp = inaStructure.getBooleanByKeyExt("ExpandBottomUp", false);
						if (isExpandingBottomUp)
						{
							alignment = oFF.Alignment.CHILDREN_ABOVE_PARENT;
						}
					}
				}
				dimension.getHierarchyManagerBase().setLowerLevelNodeAlignmentForRepoImport(alignment);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("NodeCondensation"))
			{
				let nodeCondensation = inaStructure.getBooleanByKeyExt("NodeCondensation", false);
				dimension.setHasNodeCondensation(nodeCondensation);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("MemberOfPostedNodeVisibility"))
			{
				let memberOfPostedNodeVisibility = inaStructure.getStringByKeyExt("MemberOfPostedNodeVisibility", "Visible");
				let visibility = oFF.QInAConverter.lookupResultSetVisibility(memberOfPostedNodeVisibility);
				dimension.setMemberOfPostedNodeVisibility(visibility);
			}
			dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(fixInFilter);
			return hierarchy;
		}
		dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(fixInFilter);
	}
	return null;
};
oFF.QInARepoHierarchy.prototype.importHierarchyAsCatalogItem = function(inaStructure, dimension)
{
	let hierarchyAsList = oFF.PrFactory.createList();
	hierarchyAsList.add(inaStructure);
	let hierarchyCatalogResult = dimension.getHierarchies();
	if (oFF.isNull(hierarchyCatalogResult))
	{
		hierarchyCatalogResult = oFF.QFactory.createHierarchyCatalogResult();
		oFF.QInARepoHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
		dimension.getHierarchyManagerBase().setHierarchies(hierarchyCatalogResult);
	}
	else
	{
		oFF.QInARepoHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
	}
};
oFF.QInARepoHierarchy.prototype.importHierarchyDueDate = function(importer, inaStructure, dimension, hierarchy)
{
	let dueDate = inaStructure.getStringByKey("DueDate");
	let isHierarchyDueDatePlaceHolderInStructure = oFF.QInARepoHierarchy.hasPlaceHolderInStructure(inaStructure, "DueDateIs", "Variable");
	dimension.setUseHierarchyDueDateVariable(isHierarchyDueDatePlaceHolderInStructure);
	if (isHierarchyDueDatePlaceHolderInStructure)
	{
		dimension.setHierarchyDueDateVariableName(oFF.XStringUtils.isNullOrEmpty(dueDate) ? null : dueDate);
	}
	else if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("DueDate"))
	{
		if (oFF.notNull(hierarchy))
		{
			hierarchy.setHierarchyDueDate(oFF.QInARepoUtils.createDate(dueDate));
			dimension.getHierarchyManagerBase().setDueDateDefaultByMetadata(false);
		}
	}
	if (oFF.notNull(hierarchy))
	{
		let dateTo = inaStructure.getStringByKey("DateTo");
		hierarchy.setDateTo(oFF.QInARepoUtils.createDate(dateTo));
		let dateFrom = inaStructure.getStringByKey("0DATEFROM");
		hierarchy.setDateFrom(oFF.QInARepoUtils.createDate(dateFrom));
		let inaMetadata = inaStructure.getStructureByKey("Metadata");
		if (oFF.notNull(inaMetadata))
		{
			dateTo = inaMetadata.getStringByKey("DateTo");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTo))
			{
				hierarchy.setDateTo(oFF.QInARepoUtils.createDate(dateTo));
			}
			dateFrom = inaMetadata.getStringByKey("0DATEFROM");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateFrom))
			{
				hierarchy.setDateFrom(oFF.QInARepoUtils.createDate(dateFrom));
			}
		}
	}
};
oFF.QInARepoHierarchy.prototype.importHierarchyVersion = function(inaStructure, dimension, hierarchy)
{
	let version = inaStructure.getStringByKey("Version");
	let isHierarchyVersionPlaceHolderInStructure = oFF.QInARepoHierarchy.hasPlaceHolderInStructure(inaStructure, "VersionIs", "Variable");
	dimension.getHierarchyManagerBase().setUseHierarchyVersionVariable(isHierarchyVersionPlaceHolderInStructure);
	if (isHierarchyVersionPlaceHolderInStructure)
	{
		dimension.getHierarchyManagerBase().setHierarchyVersionVariableName(oFF.XStringUtils.isNullOrEmpty(version) ? null : version);
	}
	else if (oFF.notNull(hierarchy))
	{
		hierarchy.setHierarchyVersion(version);
	}
};
oFF.QInARepoHierarchy.prototype.importLeveledHierarchyToMetadata = function(importer, inaStructure, context, dimension)
{
	let queryManagerBase = dimension.getQueryModelBase().getQueryManagerBase();
	if (oFF.notNull(queryManagerBase) && !oFF.PrUtils.isListEmpty(inaStructure.getListByKey("Levels")))
	{
		let metadataModel = queryManagerBase.getMetadataModelBase();
		let metaHierarchies = metadataModel.getLeveledHierarchiesBase();
		let leveledHierarchy = oFF.QInARepoHierarchy.importLeveledHierarchy(importer, context, dimension, inaStructure);
		if (!metaHierarchies.contains(leveledHierarchy))
		{
			metaHierarchies.add(leveledHierarchy);
		}
	}
};

oFF.QInARepoMemberAbstract = function() {};
oFF.QInARepoMemberAbstract.prototype = new oFF.QInARepository();
oFF.QInARepoMemberAbstract.prototype._ff_c = "QInARepoMemberAbstract";

oFF.QInARepoMemberAbstract.determineMemberType = function(importer, inaStructure, dimension)
{
	let newMemberType;
	let dimensionMemberInA = inaStructure.getStringByKey(dimension.getKeyField().getName());
	if (inaStructure.containsKey("MemberType"))
	{
		let newInAMemberType = inaStructure.getStringByKeyExt("MemberType", "Measure");
		newMemberType = oFF.QInAConverter.lookupMeasureStructureMemberType(newInAMemberType);
		if (oFF.isNull(newMemberType))
		{
			importer.addError(oFF.ErrorCodes.INVALID_STATE, oFF.XStringUtils.concatenate3("MeasureStructure->MemberType unsupported: '", newInAMemberType, "'"));
			return null;
		}
	}
	else if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && oFF.notNull(dimensionMemberInA))
	{
		if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			newMemberType = oFF.MemberType.MEASURE;
		}
		else
		{
			newMemberType = dimension.getStructureMember(dimensionMemberInA).getMemberType();
			if (newMemberType === oFF.MemberType.BASIC_MEASURE)
			{
				newMemberType = oFF.MemberType.MEASURE;
			}
		}
	}
	else
	{
		if (inaStructure.containsKey("Formula"))
		{
			newMemberType = oFF.MemberType.FORMULA;
		}
		else
		{
			let inaSelection = inaStructure.getStructureByKey("Selection");
			if (oFF.isNull(inaSelection))
			{
				newMemberType = oFF.MemberType.MEASURE;
			}
			else
			{
				newMemberType = inaSelection.containsKey("Operator") ? oFF.MemberType.RESTRICTED_MEASURE : oFF.MemberType.MEASURE;
			}
		}
	}
	return newMemberType;
};
oFF.QInARepoMemberAbstract.exportChartFormatting = function(exporter, member, inaMember)
{
	if (member.isShowCellChart())
	{
		inaMember.putBoolean("ShowCellChart", true);
	}
	if (member.isHideNumberForCellChart())
	{
		inaMember.putBoolean("HideNumberForCellChart", true);
	}
	inaMember.putStringNotNullAndNotEmpty("CellChartBarColor", member.getCellChartBarColor());
	inaMember.putStringNotNullAndNotEmpty("CellChartLineColor", member.getCellChartLineColor());
	inaMember.putStringNotNullAndNotEmpty("CellChartOrientation", oFF.QInAConverter.lookupCellChartOrientationInA(member.getCellChartOrientation()));
	inaMember.putStringNotNullAndNotEmpty("CellChartType", oFF.QInAConverter.lookupCellChartTypeInA(member.getCellChartType()));
};
oFF.QInARepoMemberAbstract.exportCurrencyMetadataFusion = function(exporter, member, inaMember)
{
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_RATE_TYPE))
	{
		inaMember.putStringNotNullAndNotEmpty("RateType", oFF.QInAConverter.lookupRateTypeInA(member.getRateType()));
	}
	inaMember.putStringNotNullAndNotEmpty("UnitDimension", member.getUnitDimensionName());
	inaMember.putStringNotNullAndNotEmpty("UnitDimensionProperty", member.getUnitDimensionProperty());
};
oFF.QInARepoMemberAbstract.exportCustomMember = function(exporter, modelComponent)
{
	let componentType = modelComponent.getComponentType();
	let inaStructure = null;
	if (componentType === oFF.MemberType.FORMULA || componentType === oFF.MemberType.VARIANCE || componentType === oFF.MemberType.PARETO)
	{
		inaStructure = oFF.PrFactory.createStructure();
		exporter.exportFormulaMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.RESTRICTED_MEASURE)
	{
		inaStructure = oFF.PrFactory.createStructure();
		exporter.exportRestrictedMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.EXCEPTION_AGGREGATION)
	{
		inaStructure = oFF.PrFactory.createStructure();
		exporter.exportExceptionAggregationMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.CURRENCY_MEASURE)
	{
		inaStructure = oFF.PrFactory.createStructure();
		exporter.exportCurrencyMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.UNIT_MEASURE)
	{
		inaStructure = oFF.PrFactory.createStructure();
		exporter.exportUnitMeasure(modelComponent, inaStructure);
	}
	return inaStructure;
};
oFF.QInARepoMemberAbstract.exportDimensionContext = function(formulaItem, inaFormulaItem)
{
	let dimensionContext;
	dimensionContext = formulaItem.getDimensionContext();
	if (oFF.notNull(dimensionContext))
	{
		let inaDimensionContext = inaFormulaItem.putNewStructure("DimensionContext");
		inaDimensionContext.putString("DatasetId", dimensionContext.getQueryModel().getDatasetId());
		inaDimensionContext.putString("DimensionName", dimensionContext.getName());
	}
};
oFF.QInARepoMemberAbstract.exportFormattingProperties = function(exporter, member, inaMember)
{
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_CURRENCY_PRESENTATION))
	{
		inaMember.putStringNotNullAndNotEmpty("CurrencyPresentation", oFF.QInAConverter.lookupCurrencyPresentationInA(member.getCurrencyPresentation()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SCALE_AND_UNIT_PLACEMENT))
	{
		inaMember.putStringNotNullAndNotEmpty("ScaleAndUnitPlacement", oFF.QInAConverter.lookupScaleAndUnitPlacementInA(member.getScaleAndUnitPlacement()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SCALE_FORMAT))
	{
		inaMember.putStringNotNullAndNotEmpty("ScaleFormat", oFF.QInAConverter.lookupScaleFormatInA(member.getScaleFormat()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SIGN_PRESENTATION))
	{
		inaMember.putStringNotNullAndNotEmpty("SignPresentation", oFF.QInAConverter.lookupSignPresentationInA(member.getSignPresentation()));
	}
};
oFF.QInARepoMemberAbstract.exportFormulaConstantValue = function(exporter, constStructure, fic)
{
	let valueIsNull = fic.getValue() === null && !oFF.XCollectionUtils.hasElements(fic.getStringValues());
	let variable = fic.getVariable();
	if (valueIsNull && oFF.isNull(variable))
	{
		constStructure.putNull("Value");
	}
	let valueType = fic.getValueType();
	if (valueType === oFF.XValueType.INTEGER)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putInteger("Value", fic.getInteger());
		}
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putDouble("Value", fic.getDouble());
		}
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putLong("Value", fic.getLong());
		}
	}
	else if (valueType === oFF.XValueType.STRING)
	{
		constStructure.putString("ValueType", "String");
		constStructure.putString("Value", fic.getString());
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		constStructure.putString("ValueType", "Bool");
		if (!valueIsNull)
		{
			constStructure.putBoolean("Value", fic.getBoolean());
		}
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		constStructure.putString("ValueType", "Date");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getDate().toString());
		}
	}
	else if (valueType === oFF.XValueType.DATE_TIME)
	{
		constStructure.putString("ValueType", "DateTime");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getDateTime().toString());
		}
	}
	else if (valueType === oFF.XValueType.TIME)
	{
		constStructure.putString("ValueType", "Time");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getTime().toString());
		}
	}
	else if (valueType.isSpatial())
	{
		constStructure.putString("ValueType", "String");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getGeometry().toWKT());
		}
	}
	else if (valueType === oFF.XValueType.TIMESPAN)
	{
		constStructure.putString("ValueType", "String");
		if (!valueIsNull)
		{
			let timeSpanValue = fic.getTimeSpan();
			constStructure.putString("Value", timeSpanValue.toString());
		}
	}
	else if (valueType === oFF.XValueType.VARIABLE)
	{
		oFF.QInAExportUtil.setNameIfNotNull(constStructure, "Value", variable);
		constStructure.putString("ValueIs", "Variable");
	}
	else if (valueType === oFF.XValueType.STRING_ARRAY)
	{
		constStructure.putString("ValueType", "StringArray");
		if (!valueIsNull)
		{
			let stringValues = fic.getStringValues();
			let values = constStructure.putNewList("Value");
			for (let i = 0; i < stringValues.size(); i++)
			{
				values.addString(stringValues.get(i).getString());
			}
		}
	}
};
oFF.QInARepoMemberAbstract.exportFormulaItem = function(exporter, formulaItem, inaFormula, context)
{
	let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || oFF.notNull(formulaItem) && formulaItem.getModCounter() > 0;
	if (shouldContinueExporting)
	{
		oFF.QInARepoMemberAbstract.exportFormulaItemSignFlip(exporter, formulaItem, inaFormula, context, false, false);
	}
};
oFF.QInARepoMemberAbstract.exportFormulaItemSignFlip = function(exporter, formulaItem, inaFormula, context, autoSignFlip, autoSignFlipForRMOnly)
{
	if (oFF.notNull(formulaItem))
	{
		let componentType = formulaItem.getComponentType();
		if (componentType === oFF.OlapComponentType.FORMULA_CONSTANT)
		{
			let fic = formulaItem;
			let constStructure = inaFormula.putNewStructure("Constant");
			let ficUnit = fic.getUnit();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(ficUnit))
			{
				constStructure.putString("Unit", ficUnit);
			}
			let ficCurrency = fic.getCurrency();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(ficCurrency))
			{
				constStructure.putString("Currency", ficCurrency);
			}
			oFF.QInARepoMemberAbstract.exportFormulaConstantValue(exporter, constStructure, fic);
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_OPERATION)
		{
			let fio = formulaItem;
			let opStructure = inaFormula.putNewStructure("Function");
			opStructure.putString("Name", fio.getOperator().getDisplayString());
			let parameters = opStructure.putNewList("Parameters");
			oFF.QInARepoMemberAbstract.exportFormulaItemSignFlip(exporter, fio.getLeftSide(), parameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly);
			oFF.QInARepoMemberAbstract.exportFormulaItemSignFlip(exporter, fio.getRightSide(), parameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly);
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_FUNCTION)
		{
			let fif = formulaItem;
			let funcStructure = inaFormula.putNewStructure("Function");
			funcStructure.putString("Name", fif.getFunctionName());
			let funcParameters = funcStructure.putNewList("Parameters");
			let functionSize = fif.size();
			for (let i = 0; i < functionSize; i++)
			{
				oFF.QInARepoMemberAbstract.exportFormulaItemSignFlip(exporter, fif.get(i), funcParameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly);
			}
			if (fif.requiresExternalSignFlip())
			{
				funcStructure.putBoolean("RequiresExternalSignFlip", true);
			}
			let solveOrder = fif.getSolveOrder();
			if (solveOrder !== 0)
			{
				inaFormula.putInteger("SolveOrder", solveOrder);
			}
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
		{
			let fim = formulaItem;
			let queryModel = context.getQueryModel();
			let memberVariable = fim.getVariable();
			let memberStructure;
			if (oFF.isNull(memberVariable))
			{
				memberStructure = oFF.PrFactory.createStructure();
				let memberName;
				memberName = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, fim.getMemberName(), exporter);
				memberStructure.putStringNotNull("Name", memberName);
				memberStructure.putStringNotNull("Dimension", fim.getDimensionName());
				if (fim.isBooked())
				{
					memberStructure.putString("NameIs", "Booked");
				}
				else if (fim.isPrevious())
				{
					memberStructure.putString("NameIs", "Previous");
				}
				if (fim.isCalculationVariable())
				{
					memberStructure.putBoolean("IsCalculationVariable", true);
				}
				if (autoSignFlip)
				{
					let functionStructure = oFF.QInARepoMemberAbstract.exportMemberWithSignFlip(exporter, fim);
					if (oFF.notNull(functionStructure))
					{
						inaFormula.put("Function", functionStructure.getByKey("Function"));
					}
					else
					{
						inaFormula.put("Member", memberStructure);
					}
				}
				else
				{
					inaFormula.put("Member", memberStructure);
				}
			}
			else
			{
				memberStructure = inaFormula.putNewStructure("Member");
				memberStructure.putString("Name", memberVariable.getName());
				memberStructure.putString("NameIs", "Variable");
			}
			oFF.QInARepoMemberAbstract.exportDimensionContext(fim, memberStructure);
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_ITEM_ATTRIBUTE)
		{
			let fia = formulaItem;
			let inaAttributeValue = inaFormula.putNewStructure("AttributeValue");
			inaAttributeValue.putString("Name", fia.getFieldName());
			oFF.QInARepoMemberAbstract.exportDimensionContext(fia, inaAttributeValue);
		}
	}
};
oFF.QInARepoMemberAbstract.exportInternalDataType = function(exporter, member, inaMember)
{
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE_INTERNAL))
	{
		inaMember.putStringNotNullAndNotEmpty("DataTypeInternal", oFF.QInAConverter.lookupValueTypeInA(member.getDataTypeInternal()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE_SCALE))
	{
		let dataTypeScale = member.getDataTypeScale();
		if (oFF.notNull(dataTypeScale))
		{
			inaMember.putInteger("DataTypeScale", dataTypeScale.getInteger());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE_PRECISION))
	{
		let dataTypePrecision = member.getDataTypePrecision();
		if (oFF.notNull(dataTypePrecision))
		{
			inaMember.putInteger("DataTypePrecision", dataTypePrecision.getInteger());
		}
	}
};
oFF.QInARepoMemberAbstract.exportMemberWithSignFlip = function(exporter, formulaItemMember)
{
	return null;
};
oFF.QInARepoMemberAbstract.exportPostAggregation = function(exporter, member, inaMember)
{
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_POST_AGGERGATION_TYPE))
	{
		let postAggregationType = member.getPostAggregationType();
		if (oFF.notNull(postAggregationType))
		{
			inaMember.putString("PostAggregation", oFF.QInAConverter.lookupAggregationTypeInA(postAggregationType));
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_POST_AGGREGATION_IGNORE_HIERARCHY))
	{
		if (member.isPostAggregationIgnoringHierarchy() || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			inaMember.putBoolean("PostAggregationIgnoreHierarchy", member.isPostAggregationIgnoringHierarchy());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_POST_AGGREGATION_DIMENSIONS))
	{
		let postAggregationDimensions = member.getPostAggregationDimensions();
		if (postAggregationDimensions.hasElements())
		{
			let inaPostAggregationDimensions = inaMember.putNewList("PostAggregationDimensions");
			let iterator = postAggregationDimensions.getIterator();
			while (iterator.hasNext())
			{
				inaPostAggregationDimensions.add(oFF.PrFactory.createString(iterator.next()));
			}
		}
	}
};
oFF.QInARepoMemberAbstract.exportWindowFunction = function(member, inaMember)
{
	let windowFunction = member.getWindowFunction();
	if (oFF.notNull(windowFunction))
	{
		let inaWindowFunction = inaMember.putNewStructure("WindowFunction");
		inaWindowFunction.putString("Name", oFF.QInAConverter.lookupWindowFunctionTypeInA(windowFunction.getType()));
		let dimensionsNotInPartition = windowFunction.getNotInPartitionDimensions();
		let inaDimensionsNotInPartitionList = inaWindowFunction.putNewList("DimensionsNotInPartition");
		inaDimensionsNotInPartitionList.addAllStrings(dimensionsNotInPartition);
		let inaSortDimensionsList = inaWindowFunction.putNewList("SortDimensions");
		let sortedIter = windowFunction.getSortDimensions().getIterator();
		while (sortedIter.hasNext())
		{
			let sortDimension = sortedIter.next();
			let dimension = inaSortDimensionsList.addNewStructure();
			dimension.putString("Name", sortDimension.getName());
			let directionType = sortDimension.getDirection();
			if (directionType === oFF.XSortDirection.ASCENDING || directionType === oFF.XSortDirection.DESCENDING)
			{
				dimension.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(directionType));
			}
			let nullsType = sortDimension.getNulls();
			if (oFF.notNull(nullsType) && nullsType !== oFF.NullsType.NONE)
			{
				dimension.putString("Nulls", oFF.QInAConverter.lookupNullsTypeInA(nullsType));
			}
		}
		let frame = windowFunction.getFrame();
		if (oFF.notNull(frame))
		{
			let inaFrame = inaWindowFunction.putNewStructure("Frame");
			inaFrame.putString("Start", oFF.QInAConverter.lookupFrameStartTypeInA(frame.getStart()));
			inaFrame.putInteger("StartPreceding", frame.getStartPreceding());
			inaFrame.putString("End", oFF.QInAConverter.lookupFrameEndTypeInA(frame.getEnd()));
			inaFrame.putInteger("EndFollowing", frame.getEndFollowing());
		}
	}
};
oFF.QInARepoMemberAbstract.getFirstMemberForSignFlip = function(accountName, complexSelectionRoot)
{
	let iterator = complexSelectionRoot.getChildren();
	while (iterator.hasNext())
	{
		let filterElement = iterator.next();
		if (filterElement.getOlapComponentType() === oFF.FilterComponentType.OPERATION)
		{
			let filterOperation = filterElement;
			if (oFF.XString.isEqual(accountName, filterOperation.getDimensionName()))
			{
				return filterOperation.getLow().getValue().toString();
			}
		}
		let memberName = oFF.QInARepoMemberAbstract.getFirstMemberForSignFlip(accountName, filterElement);
		if (oFF.notNull(memberName))
		{
			return memberName;
		}
	}
	return null;
};
oFF.QInARepoMemberAbstract.getMemberForSignFlip = function(restrictedMeasure)
{
	let dim = restrictedMeasure.getDimension();
	let filter = restrictedMeasure.getFilter();
	let memberName = dim.getName();
	if (oFF.notNull(memberName))
	{
		if (filter.isAll())
		{
			memberName = oFF.QInARepoMemberAbstract.getFirstMemberForSignFlip(memberName, filter.getFilterRootElement());
		}
		let member = dim.getStructureMemberByAliasOrMember(memberName);
		if (oFF.notNull(member) && member.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE && member !== restrictedMeasure)
		{
			return oFF.QInARepoMemberAbstract.getMemberForSignFlip(member);
		}
	}
	return memberName;
};
oFF.QInARepoMemberAbstract.importAccountMemberProperties = function(inaMember, member)
{
	if (inaMember.getStringByKey("AliasName") !== null)
	{
		member.setAliasName(inaMember.getStringByKey("AliasName"));
	}
	if (inaMember.containsKey("AutoSignFlip"))
	{
		member.setAutoSignFlip(inaMember.getBooleanByKey("AutoSignFlip"));
	}
	if (inaMember.getStringByKey("AccountType") !== null)
	{
		member.setAccountType(oFF.AccountType.lookup(inaMember.getStringByKey("AccountType")));
	}
};
oFF.QInARepoMemberAbstract.importAggregationType = function(importer, member, inaMember)
{
	let inaAggregation = inaMember.getStringByKey("Aggregation");
	let originalAggregationType = member.getAggregationType();
	let delta = importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA || inaMember.getBooleanByKeyExt("ModelDefinedMember", false) && member.getDimension() !== null && member.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregation))
	{
		let aggregationType = oFF.QInAConverter.lookupAggregationType(inaAggregation);
		if (delta)
		{
			if (oFF.notNull(aggregationType) && oFF.AggregationType.lookupStatisticalAggregation(aggregationType.getName()) !== null && !member.getModelCapabilities().supportsStatisticalAggregations())
			{
				aggregationType = null;
			}
			if (oFF.isNull(aggregationType))
			{
				aggregationType = oFF.AggregationType.SUM;
			}
		}
		member.setAggregationType(aggregationType);
	}
	else if (delta)
	{
		member.setAggregationType(originalAggregationType);
	}
	else
	{
		member.setAggregationType(null);
	}
};
oFF.QInARepoMemberAbstract.importChartFormatting = function(inaStructure, member)
{
	member.setShowCellChart(inaStructure.getBooleanByKey("ShowCellChart"));
	member.setHideNumberForCellChart(inaStructure.getBooleanByKey("HideNumberForCellChart"));
	member.setCellChartBarColor(inaStructure.getStringByKey("CellChartBarColor"));
	member.setCellChartLineColor(inaStructure.getStringByKey("CellChartLineColor"));
	member.setCellChartType(oFF.QInAConverter.lookupCellChartType(inaStructure.getStringByKey("CellChartType")));
	member.setCellChartOrientation(oFF.QInAConverter.lookupCellChartOrientation(inaStructure.getStringByKey("CellChartOrientation")));
};
oFF.QInARepoMemberAbstract.importCurrencyPlanningProperties = function(member, inaStructure)
{
	if (inaStructure.hasStringByKey("RateType"))
	{
		member.setRateType(oFF.QInAConverter.lookupRateType(inaStructure.getStringByKey("RateType")));
	}
	if (inaStructure.hasStringByKey("UnitDimension"))
	{
		member.setUnitDimensionName(inaStructure.getStringByKey("UnitDimension"));
	}
	if (inaStructure.hasStringByKey("UnitDimensionProperty"))
	{
		member.setUnitDimensionProperty(inaStructure.getStringByKey("UnitDimensionProperty"));
	}
};
oFF.QInARepoMemberAbstract.importExceptionAggregationProperties = function(importer, inaStructure, queryModel, member)
{
	if (queryModel.getModelCapabilities().supportsExceptionAggregationDimsFormulas())
	{
		if (importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && (inaStructure.containsKey("ExceptionAggregationDimensions") || inaStructure.hasStringByKey("ExceptionAggregation")))
		{
			let exceptionAggregationDimensions = oFF.PrUtils.asListOfString(inaStructure.getListByKey("ExceptionAggregationDimensions"));
			let validDimensions = oFF.XStream.ofString(exceptionAggregationDimensions).filter((dimName) => {
				return queryModel.getDimensionNames().contains(dimName.toString());
			}).collect(oFF.XStreamCollector.toListOfString((dimName3) => {
				return dimName3.getString();
			}));
			if (oFF.XCollectionUtils.hasElements(validDimensions))
			{
				member._setExceptionAggregationDimensionNames(validDimensions);
				let exceptionAggregation = inaStructure.getStringByKey("ExceptionAggregation");
				member.setExceptionAggregationType(oFF.AggregationType.lookupOrCreate(exceptionAggregation));
			}
		}
		else if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			let exceptionAggregationDimensions = oFF.PrUtils.asListOfString(inaStructure.getListByKey("ExceptionAggregationDimensions"));
			member._setExceptionAggregationDimensionNames(exceptionAggregationDimensions);
			let exceptionAggregation = inaStructure.getStringByKey("ExceptionAggregation");
			member.setExceptionAggregationType(oFF.AggregationType.lookupOrCreate(exceptionAggregation));
		}
	}
	else if (member.getMemberType() === oFF.MemberType.BASIC_MEASURE || member.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
	{
		let inaAggregationDimension = inaStructure.getStringByKey("AggregationDimension");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregationDimension))
		{
			member.setAggregationDimensionName(inaAggregationDimension);
		}
	}
};
oFF.QInARepoMemberAbstract.importFormattingProperties = function(importer, measureIna, measure)
{
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || measureIna.hasStringByKey("CurrencyPresentation"))
	{
		measure.setCurrencyPresentation(oFF.QInAConverter.lookupCurrencyPresentation(measureIna.getStringByKey("CurrencyPresentation")));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || measureIna.hasStringByKey("ScaleAndUnitPlacement"))
	{
		measure.setScaleAndUnitPlacement(oFF.QInAConverter.lookupScaleAndUnitPlacement(measureIna.getStringByKey("ScaleAndUnitPlacement")));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || measureIna.hasStringByKey("ScaleFormat"))
	{
		measure.setScaleFormat(oFF.QInAConverter.lookupScaleFormat(measureIna.getStringByKey("ScaleFormat")));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || measureIna.hasStringByKey("SignPresentation"))
	{
		measure.setSignPresentation(oFF.QInAConverter.lookupSignPresentation(measureIna.getStringByKey("SignPresentation")));
	}
};
oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties = function(importer, member, inaMember)
{
	if (inaMember.containsKey("ModelDefinedMember"))
	{
		member.setModelDefinedMember(inaMember.getBooleanByKey("ModelDefinedMember"));
	}
	if (inaMember.containsKey("MinimumDrillState"))
	{
		let inaMinimumDrillStateIter = inaMember.getListByKey("MinimumDrillState").getIterator();
		while (inaMinimumDrillStateIter.hasNext())
		{
			member.addMinimumDrillState(inaMinimumDrillStateIter.next().asString().getString());
		}
	}
};
oFF.QInARepoMemberAbstract.importGenericMemberProperties = function(importer, member, inaMember)
{
	if (member.getQueryModel().isBasicMeasureSettingsExportedInRepo() || !member.isCreatedFromMetadata() || importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		if (inaMember.containsKey("NumericShift"))
		{
			if (oFF.XString.isEqual("%", inaMember.getStringByKey("NumericShift")))
			{
				member.setNumericShiftPercent(true);
			}
			else
			{
				member.setNumericShift(inaMember.getIntegerByKey("NumericShift"));
			}
		}
		if (inaMember.containsKey("NumericScale"))
		{
			member.setNumericScale(inaMember.getIntegerByKey("NumericScale"));
		}
		if (inaMember.containsKey("NumericPrecision"))
		{
			member.setNumericPrecision(inaMember.getIntegerByKey("NumericPrecision"));
		}
	}
	if (member.getModelCapabilities().supportsMemberVisibility() && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaMember.hasStringByKey("Visibility")))
	{
		let inaVisibility = inaMember.getStringByKeyExt("Visibility", "Visible");
		member.setResultVisibility(oFF.QInAConverter.lookupResultSetVisibility(inaVisibility));
	}
	if (inaMember.hasStringByKey("PostAggregation") || importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		let inaPostAggregation = inaMember.getStringByKey("PostAggregation");
		let postAggregationType = oFF.QInAConverter.lookupAggregationType(inaPostAggregation);
		member.setPostAggregationType(postAggregationType);
	}
	if (inaMember.containsKey("PostAggregationIgnoreHierarchy"))
	{
		member.setPostAggregationIgnoreHierarchy(inaMember.getBooleanByKey("PostAggregationIgnoreHierarchy"));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaMember.containsKey("PostAggregationDimensions"))
	{
		let postAggregationDimensionsInA = oFF.PrUtils.asListOfString(inaMember.getListByKey("PostAggregationDimensions"));
		member._setPostAggregationDimensions(postAggregationDimensionsInA);
	}
	oFF.QInARepoMemberAbstract.importWindowFunction(member, inaMember);
	if (inaMember.containsKey("CurrencyTranslationName"))
	{
		member.setCurrencyTranslationName(inaMember.getStringByKey("CurrencyTranslationName"));
	}
	if (inaMember.containsKey("UnitTranslationName"))
	{
		member.setUnitTranslationName(inaMember.getStringByKey("UnitTranslationName"));
	}
	oFF.QInARepoMemberAbstract.importRunningAggregation(member, inaMember);
};
oFF.QInARepoMemberAbstract.importGenericRuntimeMemberProperties = function(importer, member, inaMember)
{
	if (member.getQueryModel().isBasicMeasureAggregationExportedInRepo() || !member.isCreatedFromMetadata())
	{
		let modelDefinedMember = inaMember.getBooleanByKeyExt("ModelDefinedMember", false);
		let preserveAggregationType = modelDefinedMember && member.getQueryManager().getInitSettings().getProviderType() === oFF.ProviderType.LIST_REPORTING;
		if (!preserveAggregationType)
		{
			oFF.QInARepoMemberAbstract.importAggregationType(importer, member, inaMember);
		}
	}
	oFF.QInARepoMemberAbstract.importGenericMemberProperties(importer, member, inaMember);
	if (inaMember.containsKey("DataType"))
	{
		member.setDataType(oFF.QInAConverter.lookupValueType(inaMember.getStringByKey("DataType")));
	}
	if (inaMember.getByKey("isModelDefinedMember") !== null)
	{
		member.setModelDefinedMember(inaMember.getBooleanByKey("isModelDefinedMember"));
	}
	oFF.QInARepoMemberAbstract.importIgnoredExternalDimensions(importer, member, inaMember);
	if ((member.getQueryModel().isBasicMeasureSettingsExportedInRepo() || !member.isCreatedFromMetadata() || importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA) && inaMember.containsKey("SolveOrder"))
	{
		member.setSolveOrder(inaMember.getIntegerByKeyExt("SolveOrder", 0));
	}
	if (inaMember.containsKey("PreferredHierarchy"))
	{
		member.setPreferredHierarchy(inaMember.getStringByKey("PreferredHierarchy"));
	}
	oFF.QInARepoMemberAbstract.importAccountMemberProperties(inaMember, member);
};
oFF.QInARepoMemberAbstract.importIgnoredExternalDimensions = function(importer, member, inaMember)
{
	if (importer.m_capabilities.supportsIgnoreExternalDimensions())
	{
		if (inaMember.hasStringByKey("IgnoreExternalDimensions"))
		{
			let ignoreExternalDimensions = inaMember.getStringByKey("IgnoreExternalDimensions");
			if (oFF.XString.isEqual(ignoreExternalDimensions, "All"))
			{
				member.setIgnoreAllExternalDimensions(true);
			}
		}
		else if (inaMember.containsKey("IgnoreExternalDimensions"))
		{
			let inaIgnoreExternalDimensions = inaMember.getListByKey("IgnoreExternalDimensions");
			member._setExternalDimensionsToIgnore(oFF.PrUtils.asListOfString(inaIgnoreExternalDimensions));
		}
	}
	let overrideText = inaMember.getStringByKey("OverrideText");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(overrideText))
	{
		member.setOverrideText(overrideText);
	}
};
oFF.QInARepoMemberAbstract.importInternalDataType = function(measureIna, measure)
{
	if (measureIna.containsKey("DataTypeScale"))
	{
		measure.setDataTypeScale(measureIna.getIntegerByKey("DataTypeScale"));
	}
	if (measureIna.containsKey("DataTypePrecision"))
	{
		measure.setDataTypePrecision(measureIna.getIntegerByKey("DataTypePrecision"));
	}
	if (measureIna.containsKey("DataTypeInternal"))
	{
		measure.setDataTypeInternal(oFF.QInAConverter.lookupValueType(measureIna.getStringByKey("DataTypeInternal")));
	}
	if (measure.getDataTypeInternal() === null && measureIna.containsKey("[Measures].[SQLType]"))
	{
		let dataTypeName = measureIna.getStringByKey("[Measures].[SQLType]");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataTypeName))
		{
			if (oFF.XString.startsWith(dataTypeName, oFF.XStringUtils.concatenate2("DECIMAL", "(")))
			{
				measure.setDataTypeInternal(oFF.XValueType.DECIMAL_FLOAT);
				let prefixEnd = oFF.XString.size("DECIMAL") + 1;
				let delimiter = oFF.XString.indexOf(dataTypeName, ",");
				let suffixStart = oFF.XString.size(dataTypeName) - 1;
				if (delimiter > prefixEnd && delimiter < suffixStart)
				{
					let precisionString = oFF.XString.substring(dataTypeName, prefixEnd, delimiter);
					let scaleString = oFF.XString.substring(dataTypeName, delimiter + 1, suffixStart);
					measure.setDataTypePrecision(oFF.XInteger.convertFromString(precisionString));
					measure.setDataTypeScale(oFF.XInteger.convertFromString(scaleString));
				}
			}
			else if (oFF.XString.startsWith(dataTypeName, "SMALLDECIMAL"))
			{
				measure.setDataTypeInternal(oFF.XValueType.SMALL_DECIMAL);
			}
			else if (oFF.XString.startsWith(dataTypeName, "DOUBLE"))
			{
				measure.setDataTypeInternal(oFF.XValueType.DOUBLE);
			}
			else if (oFF.XString.startsWith(dataTypeName, "REAL"))
			{
				measure.setDataTypeInternal(oFF.XValueType.REAL);
			}
			else if (oFF.XString.startsWith(dataTypeName, "INTEGER") || oFF.XString.isEqual(dataTypeName, "INT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.INTEGER);
			}
			else if (oFF.XString.startsWith(dataTypeName, "TINYINT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.TINYINT);
			}
			else if (oFF.XString.startsWith(dataTypeName, "SMALLINT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.SMALLINT);
			}
			else if (oFF.XString.startsWith(dataTypeName, "BIGINT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.BIGINT);
			}
			else if (oFF.XString.isEqual(dataTypeName, "DATE"))
			{
				measure.setDataTypeInternal(oFF.XValueType.DATE);
			}
			else if (oFF.XString.isEqual(dataTypeName, "TIME"))
			{
				measure.setDataTypeInternal(oFF.XValueType.TIME);
			}
			else if (oFF.XString.isEqual(dataTypeName, "TIMESTAMP"))
			{
				measure.setDataTypeInternal(oFF.XValueType.DATE_TIME);
			}
			else if (oFF.XString.isEqual(dataTypeName, "SECONDDATE"))
			{
				measure.setDataTypeInternal(oFF.XValueType.SECOND_DATE);
			}
			else if (oFF.XString.isEqual(dataTypeName, "BOOLEAN"))
			{
				measure.setDataTypeInternal(oFF.XValueType.BOOLEAN);
			}
		}
	}
};
oFF.QInARepoMemberAbstract.importMeasure = function(importer, inaStructure, context, queryModel, dimension)
{
	let newMemberType;
	newMemberType = oFF.QInARepoMemberAbstract.determineMemberType(importer, inaStructure, dimension);
	if (inaStructure.containsKey("MemberType") && oFF.isNull(newMemberType))
	{
		return null;
	}
	if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && oFF.notNull(dimension) && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		let originalMemberName = inaStructure.getStringByKey("Name");
		let placeholderPrefix = oFF.XStringUtils.concatenate2("].&[", oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX);
		if (oFF.notNull(originalMemberName) && oFF.XString.startsWith(originalMemberName, "[") && oFF.XString.indexOf(originalMemberName, placeholderPrefix) !== -1)
		{
			let index = oFF.XString.indexOf(originalMemberName, oFF.QModelConstants.CALCULATION_PLACEHOLDER_ID_PREFIX);
			let endindex = oFF.XString.indexOfFrom(originalMemberName, "]", index);
			let shortName = oFF.XString.substring(originalMemberName, index, endindex);
			if (dimension.getPlaceholderIds().contains(shortName))
			{
				inaStructure.putString("Name", shortName);
			}
		}
	}
	return importer.importStructureMemberExt(newMemberType, inaStructure, dimension, context);
};
oFF.QInARepoMemberAbstract.importRunningAggregation = function(member, inaMember)
{
	if (inaMember.containsKey("RunningAggregation"))
	{
		let operator = oFF.QInAConverter.lookupRunningAggregationOperator(inaMember.getStringByKey("RunningAggregation"));
		let memberType = member.getMemberType();
		if (memberType === oFF.MemberType.BASIC_MEASURE || memberType === oFF.MemberType.RESTRICTED_MEASURE)
		{
			let measure = member;
			measure.setRunningAggregationOperator(operator);
			if (inaMember.containsKey("RunningAggregationInitDim"))
			{
				measure.setRunningAggregationInitDimension(inaMember.getStringByKey("RunningAggregationInitDim"));
			}
		}
	}
};
oFF.QInARepoMemberAbstract.importWindowFunction = function(member, inaMember)
{
	let inaWindowFunction = inaMember.getStructureByKey("WindowFunction");
	if (oFF.notNull(inaWindowFunction))
	{
		let windowfunction = oFF.QWindowFunction._createWindowFunction(oFF.QInAConverter.lookupWindowFunctionType(inaWindowFunction.getStringByKey("Name")));
		let inaDimensionsNotInPartitionList = inaWindowFunction.getListByKey("DimensionsNotInPartition");
		if (oFF.notNull(inaDimensionsNotInPartitionList))
		{
			for (let idxNIPDimension = 0; idxNIPDimension < inaDimensionsNotInPartitionList.size(); idxNIPDimension++)
			{
				windowfunction.addNotInPartitionDimension(inaDimensionsNotInPartitionList.getStringAt(idxNIPDimension));
			}
		}
		let inaSortDimensionsList = inaWindowFunction.getListByKey("SortDimensions");
		if (oFF.notNull(inaSortDimensionsList))
		{
			for (let idxSortDimension = 0; idxSortDimension < inaSortDimensionsList.size(); idxSortDimension++)
			{
				let inaSortedDimension = inaSortDimensionsList.getStructureAt(idxSortDimension);
				let name = inaSortedDimension.getStringByKey("Name");
				let directionType = oFF.QInAConverter.lookupSortDirection2(inaSortedDimension.getStringByKey("Direction"));
				let nullsType = oFF.QInAConverter.lookupNullsType(inaSortedDimension.getStringByKey("Nulls"));
				windowfunction.addSortDimension(name, directionType, nullsType);
			}
		}
		let inaFrame = inaWindowFunction.getStructureByKey("Frame");
		if (oFF.notNull(inaFrame))
		{
			windowfunction.setFrame(oFF.QInAConverter.lookupFrameStartType(inaFrame.getStringByKey("Start")), inaFrame.getIntegerByKey("StartPreceding"), oFF.QInAConverter.lookupFrameEndType(inaFrame.getStringByKey("End")), inaFrame.getIntegerByKey("EndFollowing"));
		}
		member.setWindowFunction(windowfunction);
	}
};
oFF.QInARepoMemberAbstract.signFlipMember = function(formulaItemMember)
{
	let context = formulaItemMember.getContext();
	let op = oFF.QFactory.createFormulaOperation(context);
	op.setOperator(oFF.MathOperator.MULT);
	op.setLeftSide(oFF.QFactory.createFormulaConstantWithIntValue(context, -1));
	op.setRightSide(formulaItemMember);
	return op;
};
oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties = function(exporter, member, inaMember)
{
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QDimensionMemberProperties.QY_VISIBILITY))
	{
		let resultVisibility = member.getResultVisibility();
		if (oFF.isNull(resultVisibility))
		{
			resultVisibility = oFF.ResultVisibility.VISIBLE;
		}
		inaMember.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(resultVisibility));
	}
	inaMember.putStringNotNullAndNotEmpty("CurrencyTranslationName", member.getCurrencyTranslationName());
	inaMember.putStringNotNullAndNotEmpty("UnitTranslationName", member.getUnitTranslationName());
	inaMember.putStringNotNullAndNotEmpty("RunningAggregation", oFF.QInAConverter.lookupRunningAggregationOperatorInA(member.getRunningAggregationOperator()));
	inaMember.putStringNotNullAndNotEmpty("RunningAggregationInitDim", member.getRunningAggregationInitDimension());
	oFF.QInARepoMemberAbstract.exportCurrencyMetadataFusion(exporter, member, inaMember);
	oFF.QInARepoMemberAbstract.exportInternalDataType(exporter, member, inaMember);
	oFF.QInARepoMemberAbstract.exportFormattingProperties(exporter, member, inaMember);
	let memberType = member.getMemberType();
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SOLVE_ORDER))
	{
		if ((memberType === oFF.MemberType.BASIC_MEASURE || member.isSolveOrderOverDefined()) && (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SOLVE_ORDER)))
		{
			inaMember.putInteger("SolveOrder", member.getSolveOrder());
		}
	}
	oFF.QInARepoMemberAbstract.exportChartFormatting(exporter, member, inaMember);
	if (member.isModelDefinedMember())
	{
		inaMember.putBoolean("isModelDefinedMember", true);
	}
	inaMember.putStringNotNullAndNotEmpty("PreferredHierarchy", member.getPreferredHierarchy());
	inaMember.putString("MemberType", oFF.QInAConverter.lookupMeasureStructureMemberTypeIna(memberType));
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT) || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT_PERCENT))
	{
		if (member.isNumericShiftPercent() && member.getModelCapabilities().supportsNumericShiftPercent())
		{
			inaMember.putString("NumericShift", "%");
		}
		else
		{
			oFF.QInARepoUtils.setIntegerIfNotNull(inaMember, "NumericShift", member.getNumericShift());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SCALE))
	{
		oFF.QInARepoUtils.setIntegerIfNotNull(inaMember, "NumericScale", member.getNumericScale());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_PRECISION))
	{
		oFF.QInARepoUtils.setIntegerIfNotNull(inaMember, "NumericPrecision", member.getNumericPrecision());
	}
	oFF.QInARepoMemberAbstract.exportPostAggregation(exporter, member, inaMember);
	if (memberType !== oFF.MemberType.EXCEPTION_AGGREGATION && memberType !== oFF.MemberType.CURRENCY_MEASURE)
	{
		exporter.exportExceptions(member, inaMember);
	}
	if (memberType !== oFF.MemberType.VARIANCE && memberType !== oFF.MemberType.CURRENCY_MEASURE)
	{
		let exceptionAggregationType = member.getExceptionAggregationType();
		if (oFF.notNull(exceptionAggregationType))
		{
			if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGERGATION_TYPE) || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGREGATION_DIMENSIONS))
			{
				inaMember.putString("ExceptionAggregation", exceptionAggregationType.getName());
				let inaExceptionAggregationDimensions = inaMember.putNewList("ExceptionAggregationDimensions");
				inaExceptionAggregationDimensions.addAllStrings(member.getExceptionAggregationDimensions());
			}
		}
	}
	if (memberType !== oFF.MemberType.BASIC_MEASURE && memberType !== oFF.MemberType.EXCEPTION_AGGREGATION)
	{
		oFF.QInARepoMemberAbstract.exportWindowFunction(member, inaMember);
	}
	if (memberType === oFF.MemberType.RESTRICTED_MEASURE || memberType === oFF.MemberType.FORMULA || memberType === oFF.MemberType.EXCEPTION_AGGREGATION || memberType === oFF.MemberType.VARIANCE || memberType === oFF.MemberType.RUNNING_TOTAL || memberType === oFF.MemberType.PARETO)
	{
		this.exportProperties(member, inaMember);
	}
	let overrideText = member.getOverrideText();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(overrideText))
	{
		inaMember.putString("OverrideText", overrideText);
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.hasPropertyChanged(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS))
	{
		if (member.isIgnoringAllExternalDimensions())
		{
			inaMember.putString("IgnoreExternalDimensions", "All");
		}
		else
		{
			let ignoredExternalDimensions = oFF.XList.create();
			ignoredExternalDimensions.addAll(member.getIgnoredExternalDimensions());
			if (ignoredExternalDimensions.hasElements())
			{
				let inaIgnoredExternalDimensions = inaMember.putNewList("IgnoreExternalDimensions");
				inaIgnoredExternalDimensions.addAllStrings(ignoredExternalDimensions);
			}
		}
	}
};
oFF.QInARepoMemberAbstract.prototype.exportProperties = function(structureMember, inaMember)
{
	if (structureMember.getAliasName() !== null)
	{
		inaMember.putString("AliasName", structureMember.getAliasName());
	}
	if (structureMember.isAutoSignFlip())
	{
		inaMember.putBoolean("AutoSignFlip", structureMember.isAutoSignFlip());
	}
	if (structureMember.getAccountType() !== null)
	{
		inaMember.putString("AccountType", structureMember.getAccountType().getName());
	}
};
oFF.QInARepoMemberAbstract.prototype.getComponentType = function()
{
	return oFF.MemberType.ABSTRACT_MEMBER;
};
oFF.QInARepoMemberAbstract.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let dimension = parentComponent;
	if (oFF.isNull(dimension))
	{
		dimension = queryModel.getMeasureDimension();
	}
	let member = oFF.QInARepoMemberAbstract.importMeasure(importer, inaStructure, context, queryModel, dimension);
	if (oFF.notNull(member))
	{
		oFF.QInARepoMemberAbstract.importGenericRuntimeMemberProperties(importer, member, inaStructure);
		if (inaStructure.containsKey("PresentationSignReversal"))
		{
			member.setPresentationSignReversal(inaStructure.getBooleanByKey("PresentationSignReversal"));
		}
		let inaAggregationType = inaStructure.getIntegerByKeyExt("[Measures].[Aggregation]", -1);
		let aggregationType = oFF.QInAConverter.lookupAggregationType2(inaAggregationType);
		if (oFF.notNull(aggregationType))
		{
			member.setAggregationType(aggregationType);
		}
		let memberDetailsKey = dimension.isMeasureStructure() ? "[Measures].[MemberDetails]" : "[CustomDimension2].[MemberDetails]";
		if ((queryModel.isBasicMeasureSettingsExportedInRepo() || !member.isCreatedFromMetadata() || importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA) && !oFF.XCollectionUtils.hasElements(inaStructure.getStructureByKey(memberDetailsKey)))
		{
			this.setPrecisionAndScale(importer, inaStructure, queryModel, member);
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasStringByKey("UnitType"))
			{
				member.setUnitType(oFF.QInAConverter.lookupUnitType(inaStructure.getStringByKey("UnitType")));
			}
			member.setUnitFixed(inaStructure.getStringByKey("UnitFixed"));
			member.setUnitName(inaStructure.getStringByKey("UnitName"));
			member.setUnitTextName(inaStructure.getStringByKey("UnitTextName"));
		}
		let isAugmentModellerMetadata = inaStructure.getBooleanByKeyExt("IsDelta", false);
		if (!isAugmentModellerMetadata)
		{
			importer.importExceptions(inaStructure, member);
		}
		oFF.QInARepoMemberAbstract.importExceptionAggregationProperties(importer, inaStructure, dimension.getQueryModel(), member);
		oFF.QInARepoMemberAbstract.importCurrencyPlanningProperties(member, inaStructure);
		oFF.QInARepoMemberAbstract.importInternalDataType(inaStructure, member);
		oFF.QInARepoMemberAbstract.importFormattingProperties(importer, inaStructure, member);
		if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT && inaStructure.containsKey("HierarchyDisplayKey"))
		{
			let hierarchyDisplayKeyField = dimension.getHierarchyDisplayKeyField();
			if (oFF.notNull(hierarchyDisplayKeyField))
			{
				member.createAndAddFieldValueWithString(hierarchyDisplayKeyField, inaStructure.getStringByKey("HierarchyDisplayKey"));
			}
		}
		oFF.QInARepoMemberAbstract.importChartFormatting(inaStructure, member);
	}
	return member;
};
oFF.QInARepoMemberAbstract.prototype.setPrecisionAndScale = function(importer, inaStructure, queryModel, member)
{
	let numericPrecision = -1;
	let numericScale = -1;
	if (importer.isAbap(queryModel))
	{
		numericPrecision = inaStructure.getIntegerByKeyExt("Digits", -1);
		numericScale = inaStructure.getIntegerByKeyExt("FractDigits", -1);
	}
	else
	{
		numericPrecision = inaStructure.getIntegerByKeyExt("[Measures].[Digits]", -1);
		numericScale = inaStructure.getIntegerByKeyExt("[Measures].[FractDigits]", -1);
	}
	if (numericPrecision !== -1)
	{
		member.setNumericPrecision(numericPrecision);
	}
	if (numericScale !== -1)
	{
		member.setNumericScale(numericScale);
	}
};

oFF.QInARepoMembersAll = function() {};
oFF.QInARepoMembersAll.prototype = new oFF.QInARepository();
oFF.QInARepoMembersAll.prototype._ff_c = "QInARepoMembersAll";

oFF.QInARepoMembersAll.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let olapEnv = dimension.getOlapEnv();
	let allStructureMembers = dimension.getStructureLayout();
	if (oFF.notNull(allStructureMembers))
	{
		if (!dimension.supportsBasicStructureMembers() && allStructureMembers.isEmpty())
		{
			return null;
		}
		let membersList = inaStructure.putNewList("MembersRepo");
		let len = allStructureMembers.size();
		let repoEnforceModelDefined = dimension.getQueryManager().getTagging().containsKey(oFF.QStateConstants.TAG_REPO_FORMAT_FOR_UNDO_REDO);
		for (let i = 0; i < len; i++)
		{
			let structureMember = allStructureMembers.get(i);
			if (oFF.isNull(structureMember) || structureMember.getTagging().containsKey(oFF.QTransientConstants.TAG_TRANSIENT_BLENDING_DEPENDENCY))
			{
				continue;
			}
			let isKeyRefSerializationEnabled = dimension.getQueryManager() !== null && dimension.getQueryManager().isKeyRefSerializationEnabled();
			let isSharedObject = oFF.notNull(olapEnv) && olapEnv.getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(structureMember, dimension.getQueryManager().getClientQueryObjectStorageName()) !== null;
			if (isKeyRefSerializationEnabled && isSharedObject)
			{
				let inaSharedObjectMember = exporter.exportStructureMember(structureMember);
				membersList.add(inaSharedObjectMember);
				continue;
			}
			if (structureMember.isReleased())
			{
				continue;
			}
			let deltaExport = exporter.getOriginalMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA;
			let accountDimension = dimension.getDimensionType() === oFF.DimensionType.ACCOUNT;
			if (structureMember.isModelDefinedMember() && !deltaExport && !(repoEnforceModelDefined && structureMember.getModCounter() > 0))
			{
				if (exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
				{
					if (accountDimension)
					{
						continue;
					}
					if (isKeyRefSerializationEnabled)
					{
						let inaModellerMember = membersList.addNewStructure();
						oFF.QInARepoUtils.addKeyRefStructure(exporter, structureMember, inaModellerMember, dimension.getQueryManager());
						continue;
					}
				}
				else if (exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE) && accountDimension)
				{
					continue;
				}
			}
			let measureMemberCustom = !accountDimension && !structureMember.isCreatedFromMetadata() && !structureMember.isModelDefinedMember();
			let accountMemberCustom = accountDimension && !structureMember.isModelDefinedMember() && !structureMember.isCreatedFromMetadata();
			let measureAddedByUser = measureMemberCustom || accountMemberCustom;
			let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || measureAddedByUser || structureMember.getModCounter() > 0;
			if (shouldContinueExporting)
			{
				let inaMember;
				if (isSharedObject)
				{
					let copiedMeasure = oFF.QStructureMember.createMeasure(structureMember.getMemberType(), dimension.getQueryModel(), dimension);
					copiedMeasure.copyFrom(structureMember, null);
					inaMember = exporter.exportStructureMember(copiedMeasure);
				}
				else
				{
					inaMember = exporter.exportStructureMember(structureMember);
				}
				membersList.add(inaMember);
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMembersAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEMBERS;
};
oFF.QInARepoMembersAll.prototype.getMemberNamesFromMemberList = function(inaMemberList)
{
	let memberNames = oFF.XHashSetOfString.create();
	for (let memberIdx = 0; memberIdx < inaMemberList.size(); memberIdx++)
	{
		let member = inaMemberList.getStructureAt(memberIdx);
		let memberKeyRef = member.getStructureByKey("KeyRef");
		let memberName = oFF.notNull(memberKeyRef) ? memberKeyRef.getStringByKey("ObjectName") : member.getStringByKey("Name");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(memberName))
		{
			memberNames.add(memberName);
		}
	}
	return memberNames;
};
oFF.QInARepoMembersAll.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let isDelta = inaStructure.getBooleanByKeyExt("IsDelta", false);
	let dimension = modelComponent;
	if (dimension.supportsCustomMembers() && !isDelta)
	{
		dimension.removeCustomMembers();
	}
	let inaMemberList = inaStructure.getListByKey("MembersRepo");
	if (oFF.isNull(inaMemberList))
	{
		return null;
	}
	let structureLayout = dimension.getStructureLayout();
	if (oFF.notNull(structureLayout))
	{
		if (!isDelta && importer.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			dimension.removeCustomMembers();
			let memberNames = this.getMemberNamesFromMemberList(inaMemberList);
			for (let i = structureLayout.size() - 1; i >= 0; i--)
			{
				let iqStructureMember = structureLayout.get(i);
				if (iqStructureMember.isModelDefinedMember() && (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT || !memberNames.contains(iqStructureMember.getName())))
				{
					continue;
				}
				structureLayout.removeAt(i);
			}
		}
		let membersNotOverrideByDelta = oFF.XList.create();
		if (isDelta)
		{
			let structureMemberIter = dimension.getLoadedStructureMembers().getIterator();
			while (structureMemberIter.hasNext())
			{
				let existingMember = structureMemberIter.next();
				if (oFF.notNull(existingMember) && (existingMember.getMemberType() === oFF.MemberType.BASIC_MEASURE || existingMember.isCreatedFromMetadata()))
				{
					membersNotOverrideByDelta.add(existingMember.getName());
				}
			}
		}
		let len = inaMemberList.size();
		for (let iMember = 0; iMember < len; iMember++)
		{
			let inaMember = inaMemberList.getStructureAt(iMember);
			let member = importer.importStructureMember(dimension, inaMember, context);
			if (oFF.notNull(member))
			{
				let name = member.getName();
				let member2 = dimension.getLoadedStructureMember(name);
				if (oFF.isNull(member2))
				{
					if (isDelta)
					{
						dimension.addModellerMember(member);
						let keyRef = dimension.getModellerMemberKeyRef(member.getStorageObjectName());
						dimension.addMeasureFromRepoImport(keyRef);
						membersNotOverrideByDelta.removeElement(member.getName());
					}
					else
					{
						dimension.addMeasureFromRepoImport(member);
					}
				}
				else if (isDelta)
				{
					dimension.addModellerMember(member);
					if (dimension.getStructureLayout().getByKey(member.getStorageObjectName()) === null)
					{
						dimension.getStructureLayout().addKeyRef(member);
					}
					membersNotOverrideByDelta.removeElement(member.getName());
				}
				else
				{
					if (member.getMemberType().isCustomMember() && !member.isCreatedFromMetadata())
					{
						let storageName = member.getStorageName();
						if (oFF.XString.isEqual(storageName, oFF.KeyRefConstants.MAIN_STORAGE))
						{
							let storageGroupName = dimension.getQueryModel().getPrimaryCalculationDimension() === dimension ? oFF.QClientQueryObjectType.PRIMARY_STRUCTURE_MEMBER.getName() : oFF.QClientQueryObjectType.SECONDARY_STRUCTURE_MEMBER.getName();
							storageName = dimension.getQueryManager().getClientQueryObjectStorageName();
							let keyRef = oFF.QFactory.createKeyRef(storageName, storageGroupName, member.getStorageObjectName());
							let sharedStructureMember = dimension.getQueryModel().getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(keyRef);
							if (oFF.notNull(sharedStructureMember))
							{
								dimension.removeMeasure(member2.getName());
								dimension.addMeasureFromRepoImport(sharedStructureMember);
								member2 = sharedStructureMember;
							}
						}
					}
					else
					{
						if (member2 !== member && !member2.isModelDefinedMember())
						{
							throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("Internal error: New member with same name not allowed: '", name, "'!"));
						}
					}
					structureLayout.removeElement(member2);
					structureLayout.add(member2);
				}
			}
		}
		if (isDelta && membersNotOverrideByDelta.size() > 0)
		{
			let orignalMemberNameIter = membersNotOverrideByDelta.getIterator();
			while (orignalMemberNameIter.hasNext())
			{
				let originalMemberName = orignalMemberNameIter.next();
				let originalMember = dimension.getLoadedStructureMember(originalMemberName);
				if (oFF.notNull(originalMember))
				{
					originalMember.setModelDefinedMember(true);
					dimension.addModellerMember(originalMember);
				}
			}
		}
	}
	return dimension;
};

oFF.QInARepoModellerCurrencyTranslation = function() {};
oFF.QInARepoModellerCurrencyTranslation.prototype = new oFF.QInARepository();
oFF.QInARepoModellerCurrencyTranslation.prototype._ff_c = "QInARepoModellerCurrencyTranslation";

oFF.QInARepoModellerCurrencyTranslation.checkCrossCalculationMember = function(structureMemberName, queryModel)
{
	let variable = queryModel.getVariable(oFF.XStringUtils.concatenate3(structureMemberName, ".", "Currency"));
	return oFF.notNull(variable);
};
oFF.QInARepoModellerCurrencyTranslation.checkInitializeLegacyAccountCurrencyTranslation = function(maximumNumberOfTranslations, currencyTranslationManager)
{
	if (maximumNumberOfTranslations > 0)
	{
		let queryModel = currencyTranslationManager.getQueryModel();
		let placeholderIdsList = oFF.XList.create();
		let measureDimension = queryModel.getMeasureDimension();
		let translationCount = 0;
		let memberIter = measureDimension.getStructureLayout().getIterator();
		while (memberIter.hasNext())
		{
			let member = memberIter.next();
			if (oFF.notNull(member) && !member.isReleased())
			{
				let memberName = member.getName();
				if (oFF.XString.isEqual(memberName, "SignedDataLocal"))
				{
					placeholderIdsList.add("SignedDataLocal");
				}
				else if (oFF.XString.startsWith(memberName, "SignedDataOther") && oFF.QInARepoModellerCurrencyTranslation.checkCrossCalculationMember(memberName, queryModel) && translationCount < maximumNumberOfTranslations - 1)
				{
					placeholderIdsList.add(memberName);
					translationCount++;
				}
				else if (oFF.XString.isEqual(memberName, "SignedData") && oFF.QInARepoModellerCurrencyTranslation.checkCrossCalculationMember("SignedData", queryModel))
				{
					placeholderIdsList.add("SignedData");
				}
			}
		}
		measureDimension.setPlaceholderIds(placeholderIdsList);
	}
};
oFF.QInARepoModellerCurrencyTranslation.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoModellerCurrencyTranslation.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MODELLER_CURRENCY_TRANSLATION;
};
oFF.QInARepoModellerCurrencyTranslation.prototype.getTagName = function()
{
	return "ModellerCurrencyTranslation";
};
oFF.QInARepoModellerCurrencyTranslation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let currencyTranslationManagerBase = modelComponent;
	if (oFF.notNull(currencyTranslationManagerBase) && oFF.notNull(inaStructure))
	{
		let extendedPlanningRateNameSettings = inaStructure.getBooleanByKeyExt("PlanningParametersForCurrencyTranslation", false);
		let accountBasedRateType = inaStructure.getBooleanByKeyExt("RateTypeFromAccount", false);
		let maxNumberOfCurrencyTranslations = inaStructure.getIntegerByKeyExt("MaxNumberOfCurrencyTranslations", -1);
		currencyTranslationManagerBase.setMaxNumberOfTranslations(maxNumberOfCurrencyTranslations);
		currencyTranslationManagerBase.setSupportsExtendedRateNameParameters(extendedPlanningRateNameSettings);
		currencyTranslationManagerBase.initializeLegacyCurrencyTranslation(!extendedPlanningRateNameSettings);
		currencyTranslationManagerBase.setDeriveRateTypeFromAccount(accountBasedRateType);
		let cttd = inaStructure.getStringByKey("CurrencyTranslationTimeDimension");
		currencyTranslationManagerBase.setCurrencyTranslationTimeDimensionName(cttd);
		currencyTranslationManagerBase.setCurrencyRateTableId(inaStructure.getStringByKey("CurrencyRateTableId"));
		let currencyDimension = inaStructure.getStringByKey("CurrencyDimension");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(currencyDimension))
		{
			currencyTranslationManagerBase.setCurrencyDimensionName(currencyDimension);
		}
		let defaultCurrency = inaStructure.getStringByKey("DefaultCurrency");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(defaultCurrency))
		{
			currencyTranslationManagerBase.setDefaultCurrency(defaultCurrency);
		}
		let i;
		let size;
		let subStructure;
		let rateVersions = inaStructure.getListByKey("RateVersions");
		if (oFF.XCollectionUtils.hasElements(rateVersions))
		{
			currencyTranslationManagerBase.clearAvailableRateVersions();
			size = rateVersions.size();
			for (i = 0; i < size; i++)
			{
				subStructure = rateVersions.getStructureAt(i);
				currencyTranslationManagerBase.addAvailableRateVersion(subStructure.getStringByKey("Name"), subStructure.getStringByKey("Text"));
			}
		}
		let currencies = inaStructure.getListByKey("Currencies");
		if (oFF.XCollectionUtils.hasElements(currencies))
		{
			currencyTranslationManagerBase.clearAvailableCurrencies();
			size = currencies.size();
			for (i = 0; i < size; i++)
			{
				subStructure = currencies.getStructureAt(i);
				currencyTranslationManagerBase.addAvailableCurrency(subStructure.getStringByKey("Name"), subStructure.getStringByKey("Text"));
			}
		}
		let categories = inaStructure.getListByKey("Categories");
		if (oFF.XCollectionUtils.hasElements(categories))
		{
			currencyTranslationManagerBase.clearAvailableCategories();
			size = categories.size();
			for (i = 0; i < size; i++)
			{
				subStructure = categories.getStructureAt(i);
				currencyTranslationManagerBase.addAvailableCategory(oFF.QInAConverter.lookupCategory(subStructure.getStringByKey("Name")));
			}
		}
		let rateTypes = inaStructure.getListByKey("RateTypes");
		if (oFF.XCollectionUtils.hasElements(rateTypes))
		{
			currencyTranslationManagerBase.clearAvailableRateTypes();
			size = rateTypes.size();
			for (i = 0; i < size; i++)
			{
				subStructure = rateTypes.getStructureAt(i);
				currencyTranslationManagerBase.addAvailableRateType(oFF.QInAConverter.lookupRateType(subStructure.getStringByKey("Name")));
			}
		}
		oFF.QInARepoModellerCurrencyTranslation.checkInitializeLegacyAccountCurrencyTranslation(maxNumberOfCurrencyTranslations, currencyTranslationManagerBase);
		currencyTranslationManagerBase.postImportInitialization();
		this.importModellerDefinedCurrencyTranslations(importer, inaStructure, currencyTranslationManagerBase, context);
	}
	return currencyTranslationManagerBase;
};
oFF.QInARepoModellerCurrencyTranslation.prototype.importModellerDefinedCurrencyTranslations = function(importer, inaStructure, currencyTranslationManager, context)
{
	let inaCurrencyTranslationsList = inaStructure.getListByKey("CurrencyTranslations");
	if (oFF.XCollectionUtils.hasElements(inaCurrencyTranslationsList))
	{
		let size = inaCurrencyTranslationsList.size();
		for (let i = 0; i < size; i++)
		{
			let inaSpecificCurrencyTranslation = inaCurrencyTranslationsList.getStructureAt(i);
			let name = inaSpecificCurrencyTranslation.getStringByKey("Name");
			let description = inaSpecificCurrencyTranslation.getStringByKey("Description");
			let currencyTranslation = currencyTranslationManager.getMeasureCurrencyTranslation(name);
			if (oFF.isNull(currencyTranslation))
			{
				currencyTranslation = currencyTranslationManager.addNewMeasureCurrencyTranslationBase(name, description);
			}
			importer.importCurrencyTranslationElement(inaSpecificCurrencyTranslation, currencyTranslation, context);
			currencyTranslation.setModelDefinedCurrencyTranslation(true);
		}
	}
};

oFF.QInARepoModellerDimensions = function() {};
oFF.QInARepoModellerDimensions.prototype = new oFF.QInARepository();
oFF.QInARepoModellerDimensions.prototype._ff_c = "QInARepoModellerDimensions";

oFF.QInARepoModellerDimensions.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoModellerDimensions.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MODELLER_DIMENSIONS;
};
oFF.QInARepoModellerDimensions.prototype.getTagName = function()
{
	return "ModellerDimensions";
};
oFF.QInARepoModellerDimensions.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	if (oFF.notNull(inaStructure))
	{
		let datasetEpmObject = queryModel.getDatasetEpmObject();
		if (oFF.isNull(datasetEpmObject))
		{
			datasetEpmObject = oFF.QDatasetEpmObject.createByName(queryModel.getName());
			queryModel.setDatasetEpmObject(datasetEpmObject);
		}
		let inaList = inaStructure.getListByKey("Dimensions");
		let size = inaList.size();
		let dimensionManager = queryModel.getDimensionManagerBase();
		let dimensionReferences = dimensionManager.getDimensionReferences();
		for (let k = 0; k < size; k++)
		{
			let inaDimension = inaList.getStructureAt(k);
			let dimName = inaDimension.getStringByKey("Name");
			let dimensionType = inaDimension.containsKey("CType") ? oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) : null;
			let isAccountOrStructureDimension = inaDimension.getBooleanByKeyExt("MeasureStructure", false) || oFF.notNull(dimensionType) && (dimensionType === oFF.DimensionType.ACCOUNT || dimensionType.isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE));
			if (dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE && !queryModel.getModelCapabilities().supportsCustomDimension2MemberMetadata())
			{
				continue;
			}
			if (isAccountOrStructureDimension)
			{
				if (dimensionReferences.containsKey(dimName))
				{
					dimensionManager.getDimensionByNameFromExistingMetadata(dimName);
				}
				let dimension = importer.importDimension(inaDimension, queryModel);
				if (oFF.notNull(dimension) && oFF.XStringUtils.isNullOrEmpty(dimName))
				{
					dimName = dimension.getName();
				}
			}
			this.importDimensionMetadata(dimName, inaDimension, datasetEpmObject);
		}
		let extendedDimensions = queryModel.getExtendedDimensions();
		let sExtendedDimensions = inaStructure.getListByKey("ExtendedDimensions");
		if (oFF.notNull(extendedDimensions) && oFF.notNull(sExtendedDimensions) && !sExtendedDimensions.isEmpty())
		{
			for (let i = 0; i < extendedDimensions.size(); i++)
			{
				let extendedDimension = extendedDimensions.get(i);
				let name = extendedDimension.getName();
				for (let j = 0; j < sExtendedDimensions.size(); j++)
				{
					let sExtendedDimension = sExtendedDimensions.getStructureAt(j);
					if (oFF.XString.isEqual(name, sExtendedDimension.getStringByKey("Name")))
					{
						extendedDimension.setLocationType(oFF.LocationType.lookup(sExtendedDimension.getStringByKey("LocationType")));
					}
				}
			}
		}
	}
	return queryModel;
};
oFF.QInARepoModellerDimensions.prototype.importDimensionMetadata = function(dimensionName, inaStructure, datasetEpmObject)
{
	if (oFF.XStringUtils.isNullOrEmpty(dimensionName))
	{
		return;
	}
	if (inaStructure.containsKey("DefaultHierarchy"))
	{
		datasetEpmObject.setDimensionDefaultHierarchyName(dimensionName, inaStructure.getStringByKey("DefaultHierarchy"));
	}
	let dimensionVisibility = inaStructure.getIntegerByKeyExt("Visibility", -1);
	if (dimensionVisibility !== -1)
	{
		datasetEpmObject.setDimensionVisibility(dimensionName, oFF.QInAConverter.lookupDimensionVisibility(dimensionVisibility));
	}
	let fiscalEnabled = inaStructure.getBooleanByKeyExt("FiscalEnabled", false);
	if (fiscalEnabled)
	{
		datasetEpmObject.setDimensionFiscalEnabled(dimensionName, fiscalEnabled);
		datasetEpmObject.setDimensionFiscalDisplayPeriod(dimensionName, inaStructure.getStringByKey("FiscalDisplayPeriod"));
		datasetEpmObject.setDimensionFiscalPeriodPrefix(dimensionName, inaStructure.getStringByKey("FiscalPeriodPrefix"));
		datasetEpmObject.setDimensionFiscalShift(dimensionName, inaStructure.getIntegerByKeyExt("FiscalShift", 0));
	}
	if (inaStructure.containsKey("additionalPeriods"))
	{
		datasetEpmObject.setDimensionAdditionalPeriods(dimensionName, inaStructure.getIntegerByKey("additionalPeriods"));
	}
	if (inaStructure.containsKey("periodPrefix"))
	{
		datasetEpmObject.setDimensionPeriodPrefix(dimensionName, inaStructure.getStringByKey("periodPrefix"));
	}
	if (inaStructure.containsKey("useMonthLabel"))
	{
		datasetEpmObject.setDimensionUseMonthLabel(dimensionName, inaStructure.getBooleanByKey("useMonthLabel"));
	}
	if (inaStructure.containsKey("TimeConfigEnablePattern"))
	{
		datasetEpmObject.setDimensionTimeConfigEnablePattern(dimensionName, inaStructure.getBooleanByKey("TimeConfigEnablePattern"));
	}
	if (inaStructure.containsKey("IsUserManaged"))
	{
		datasetEpmObject.setDimensionIsUserManaged(dimensionName, inaStructure.getBooleanByKey("IsUserManaged"));
	}
	if (inaStructure.containsKey("Pattern"))
	{
		datasetEpmObject.setDimensionTimeConfigPattern(dimensionName, inaStructure.getStringByKey("Pattern"));
	}
	if (inaStructure.containsKey("FirstWeekDay"))
	{
		datasetEpmObject.setDimensionFirstWeekDay(dimensionName, inaStructure.getStringByKey("FirstWeekDay"));
	}
	if (inaStructure.containsKey("FirstYearWeekIndicator"))
	{
		datasetEpmObject.setDimensionFirstYearWeekIndicator(dimensionName, inaStructure.getStringByKey("FirstYearWeekIndicator"));
	}
	if (inaStructure.containsKey("unassignedMember"))
	{
		datasetEpmObject.setDimensionUnassignedMember(dimensionName, inaStructure.getStringByKey("unassignedMember"));
	}
	let description = inaStructure.getStringByKey("Description");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(description))
	{
		datasetEpmObject.setDimensionDescription(dimensionName, description);
	}
	let displayGroup = inaStructure.getStringByKey("DisplayGroupName");
	if (oFF.XStringUtils.isNullOrEmpty(displayGroup))
	{
		displayGroup = inaStructure.getStringByKey("DisplayGroup");
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(displayGroup))
	{
		datasetEpmObject.setDimensionRuntimeDisplayGroupName(dimensionName, displayGroup);
		datasetEpmObject.setDimensionRuntimeDisplayGroupText(dimensionName, inaStructure.getStringByKey("DisplayGroupDescription"));
	}
};

oFF.QInARepoModellerMetadataProperties = function() {};
oFF.QInARepoModellerMetadataProperties.prototype = new oFF.QInARepository();
oFF.QInARepoModellerMetadataProperties.prototype._ff_c = "QInARepoModellerMetadataProperties";

oFF.QInARepoModellerMetadataProperties.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoModellerMetadataProperties.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MODELLER_METADATA_PROPERTIES;
};
oFF.QInARepoModellerMetadataProperties.prototype.getTagName = function()
{
	return "ModellerMetadataProperties";
};
oFF.QInARepoModellerMetadataProperties.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return modelComponent;
	}
	let queryModel = modelComponent;
	let metadataProperties = queryModel.getMetadataPropertiesBase();
	if (oFF.notNull(metadataProperties))
	{
		metadataProperties.putBoolean("HasUserDefinedMeasures", inaStructure.getBooleanByKeyExt("HasUserDefinedMeasures", false));
		metadataProperties.putBoolean("IsPlanning", inaStructure.getBooleanByKeyExt("IsPlanning", false));
		metadataProperties.putStringNotNull("LeadingStructure", inaStructure.getStringByKey("LeadingStructure"));
		metadataProperties.putStringNotNull("MappedVersionDimension", inaStructure.getStringByKey("MappedVersionDimension"));
		metadataProperties.putBoolean("DataExportRestricted", inaStructure.getBooleanByKeyExt("DataExportRestricted", false));
	}
	let modelId = inaStructure.getStringByKey("ModelId");
	let mode = inaStructure.getStringByKey("Mode");
	let epmQuerySourceName = inaStructure.getStringByKey("EpmQuerySourceName");
	let epmModelName = inaStructure.getStringByKey("EpmModelName");
	let schemaName = inaStructure.getStringByKey("SchemaName");
	let packageName = inaStructure.getStringByKey("PackageName");
	let name = inaStructure.getStringByKey("Name");
	let shortDescription = inaStructure.getStringByKey("ShortDescription");
	let displayName = inaStructure.getStringByKey("DisplayName");
	let description = inaStructure.getStringByKey("Description");
	let isEmbedded = inaStructure.getBooleanByKeyExt("IsEmbedded", false);
	let isRemote = inaStructure.getBooleanByKeyExt("IsRemote", false);
	let datasetEpmObject = oFF.QDatasetEpmObject.create(modelId, mode, epmModelName, epmQuerySourceName, schemaName, packageName, name, shortDescription, displayName, description, isEmbedded, isRemote);
	queryModel.setDatasetEpmObject(datasetEpmObject);
	return queryModel;
};

oFF.QInARepoModellerVariableManager = function() {};
oFF.QInARepoModellerVariableManager.prototype = new oFF.QInARepository();
oFF.QInARepoModellerVariableManager.prototype._ff_c = "QInARepoModellerVariableManager";

oFF.QInARepoModellerVariableManager.prototype.createCustomVariable = function(context, inaVariable)
{
	let variableConfig = oFF.QFactory.createCustomVariableConfig(context.getQueryManager());
	let inaOptionList = inaVariable.getListByKey("Options");
	let options = oFF.XList.create();
	if (!oFF.PrUtils.isListEmpty(inaOptionList))
	{
		let len2 = inaOptionList.size();
		for (let i = 0; i < len2; i++)
		{
			let inaOption = inaOptionList.getStructureAt(i);
			let inaOptionName = inaOption.getStringByKey("Name");
			let inaOptionText = inaOption.getStringByKey("Text");
			options.add(oFF.XPairOfString.create(inaOptionName, inaOptionText));
		}
	}
	return variableConfig.createOptionsListVariable(inaVariable.getStringByKey("Name"), inaVariable.getStringByKey("Text"), options);
};
oFF.QInARepoModellerVariableManager.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoModellerVariableManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MODELLER_VARIABLES;
};
oFF.QInARepoModellerVariableManager.prototype.getTagName = function()
{
	return "ModellerVariables";
};
oFF.QInARepoModellerVariableManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let variableContainer = modelComponent;
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Variables");
		if (oFF.notNull(inaList))
		{
			let len = inaList.size();
			for (let varIdx = 0; varIdx < len; varIdx++)
			{
				let inaVariable = inaList.getStructureAt(varIdx);
				let variableName = inaVariable.getStringByKey("Name");
				let variable = variableContainer.getVariableBaseByName(variableName);
				if (oFF.isNull(variable) && inaVariable.getBooleanByKeyExt("CustomVariable", false))
				{
					variable = this.createCustomVariable(context, inaVariable);
					let inputType = inaVariable.getStringByKey("InputType");
					let mandatory = oFF.XString.isEqual(inputType, "Mandatory") || oFF.XString.isEqual(inputType, "MandatoryNotInitial");
					variable.setMandatory(mandatory);
					let initialValueAllowed = oFF.XString.isEqual(inputType, "Mandatory") || oFF.XString.isEqual(inputType, "Optional");
					variable.setInitialValueAllowed(initialValueAllowed);
				}
				if (oFF.notNull(variable))
				{
					variable.setProcessingType(oFF.QInAConverter.lookupProcessingType(inaVariable.getStringByKey("ProcessingType")));
					let variableType = variable.getVariableType();
					if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
					{
						importer.importSimpleTypeVariable(inaVariable, variable, context);
					}
					else if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
					{
						importer.importDimensionMemberVariable(inaVariable, variable, context);
					}
					else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
					{
						importer.importOptionListVariable(inaVariable, variable, context);
					}
					else
					{
						importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate5("The variable '", variableName, "' of variable type '", variableType.getName(), "' was not imported correctly"));
					}
				}
				else
				{
					importer.addWarning(oFF.ErrorCodes.ET_ELEMENT_NOT_FOUND, oFF.XStringUtils.concatenate3("The variable '", variableName, "' was not found"));
				}
			}
		}
	}
	return variableContainer;
};

oFF.QInARepoQuery = function() {};
oFF.QInARepoQuery.prototype = new oFF.QInARepository();
oFF.QInARepoQuery.prototype._ff_c = "QInARepoQuery";

oFF.QInARepoQuery.prototype.callPreQueryImportedListener = function(importExecutedListener, unprocessedPreQueries, inaPreQuery)
{
	unprocessedPreQueries.removeElement(inaPreQuery);
	if (unprocessedPreQueries.isEmpty() && oFF.notNull(importExecutedListener))
	{
		importExecutedListener();
	}
};
oFF.QInARepoQuery.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent.getQueryModel();
	let isForRendering = exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING;
	exporter.exportUniversalDisplayHierarchies(queryModel.getUniversalDisplayHierarchies(), inaStructure);
	let drillManager = queryModel.getDrillManager();
	exporter.exportDrillManager(drillManager, inaStructure);
	if (!drillManager.isValidatingContextFreeNavigations())
	{
		inaStructure.putBoolean("ValidateContextFreeNavigations", false);
	}
	let cellContextManager = queryModel.getCellContextManager();
	exporter.exportCellContextManager(cellContextManager, inaStructure);
	let withDataSource = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.DATASOURCE) > 0;
	if (withDataSource)
	{
		oFF.QInARepoDataSource.exportDataSource(exporter, queryModel.getDataSource(), queryModel.getModelCapabilities().supportsRunAsUser(), inaStructure);
	}
	exporter.exportDimensions(queryModel, inaStructure);
	exporter.exportSortingManager(queryModel.getSortingManager(), inaStructure);
	exporter.exportCurrencyTranslationManager(queryModel.getCurrencyTranslationManager(), inaStructure);
	exporter.exportUnitTranslationManager(queryModel.getUnitTranslationManager(), inaStructure);
	exporter.exportDataCells(queryModel, inaStructure);
	exporter.exportQuerySettings(queryModel, inaStructure);
	if (!isForRendering)
	{
		exporter.exportFilter(queryModel.getFilter(), inaStructure);
		exporter.exportExceptions(queryModel, inaStructure);
		exporter.exportQueryCells(queryModel.getQueryCellManager(), inaStructure);
	}
	exporter.exportConditionManager(queryModel.getConditionManager(), inaStructure);
	exporter.exportSimulationManager(queryModel.getSimulationManager(), inaStructure);
	let withVariables = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.VARIABLES) > 0;
	if (withVariables && exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_NO_VARS && exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
	{
		if (queryModel.isExportingVariables() || queryModel.hasProcessingStep())
		{
			exporter.exportVariables(queryModel.getVariableContainer(), inaStructure);
		}
	}
	let queryManager = queryModel.getQueryManager();
	if (queryModel.isBatchModeForMicroCube())
	{
		inaStructure.putString("Name", queryManager.getNameForMicroCubeUse());
	}
	exporter.exportFormulaExceptionManager(queryModel.getFormulaExceptionManager(), inaStructure);
	this.exportPaging(inaStructure, queryModel);
	oFF.QInARepoOptions.exportSuppressKeyfigureCalculation(inaStructure, queryManager);
	oFF.QInARepoOptions.exportLOVAbstractionLayerSettings(inaStructure, queryManager);
	oFF.QInARepoOptions.exportUniqueAxisProperties(inaStructure, queryManager);
	oFF.QInARepoInputEnablementRules.exportInputEnablementRules(inaStructure, queryManager);
	oFF.QInARepoInputReadinessFilter.exportInputReadinessFilter(inaStructure, queryManager);
	let preQueries = queryModel.getPreQueries();
	if (oFF.notNull(preQueries))
	{
		let preQueriesSize = preQueries.size();
		if (preQueriesSize > 0)
		{
			let inaPreQueries = inaStructure.getListByKey("PreQueries");
			if (oFF.isNull(inaPreQueries))
			{
				inaPreQueries = inaStructure.putNewList("PreQueries");
			}
			let modeHolder = exporter.getMode();
			if (exporter.getOriginalMode() !== oFF.QModelFormat.INA_CLONE_RENDERING)
			{
				exporter.m_mode = exporter.getOriginalMode();
			}
			for (let i = 0; i < preQueriesSize; i++)
			{
				let preQuery = preQueries.get(i);
				let inaPreQuery = exporter.exportPreQuery(preQuery.getObject());
				let preQueryName = preQuery.getName();
				inaPreQuery.putString("ObjectName", preQueryName);
				inaPreQueries.add(inaPreQuery);
			}
			exporter.m_mode = modeHolder;
			inaStructure.put("PreQueries", inaPreQueries);
		}
	}
	let resultStructureController = queryModel.getResultStructureController();
	exporter.exportComponent(null, resultStructureController, inaStructure, flags);
	let featureToggles = oFF.InactiveCapabilityUtil.exportFeatureToggles(queryManager.getSession().getFeatureToggles());
	inaStructure.putString("ExperimentalFeatures", featureToggles);
	inaStructure.putString("ResultSetPersistanceTable", queryManager.getResultSetPersistenceTable());
	inaStructure.putString("ResultSetPersistanceSchema", queryManager.getResultSetPersistenceSchema());
	inaStructure.putString("ResultSetPersistanceIdentifier", queryManager.getResultSetPersistenceIdentifier());
	exporter.exportVisualizationManager(queryModel.getVisualizationManager(), inaStructure);
	if (queryModel.hasQuickActionManager())
	{
		exporter.exportQuickActionManager(queryModel.getQuickActionManager(), inaStructure);
	}
	inaStructure.putBoolean("IsVersionDimensionValidationEnabled", queryModel.isVersionDimensionValidationEnabled());
	let isAutoAddBWServerSortsEnabled = queryModel.isAutoAddBWServerSortsEnabled();
	if (oFF.notNull(isAutoAddBWServerSortsEnabled))
	{
		inaStructure.putBoolean("IsAutoAddBWServerSortsEnabled", isAutoAddBWServerSortsEnabled.getBoolean());
	}
	this.exportPlanningSettings(inaStructure, queryModel);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoQuery.prototype.exportPaging = function(inaStructure, queryModel)
{
	let queryManager = queryModel.getQueryManager();
	if (!queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) || queryManager.recordingStateOfQueryManager())
	{
		return;
	}
	oFF.QInARepoOptions.exportPaging(inaStructure, queryManager);
};
oFF.QInARepoQuery.prototype.exportPlanningSettings = function(inaStructure, queryModel)
{
	if (queryModel.hasPropertyChanged(oFF.QueryModelProperties.QY_PLANNING_MODE))
	{
		oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "PlanningMode", queryModel.getPlanningMode());
	}
};
oFF.QInARepoQuery.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QInARepoQuery.prototype.getInactiveCapabilities = function(queryModel)
{
	let capabilities = oFF.XHashMapByString.create();
	let allCapabilities = oFF.FeatureToggle.getAllFeatureToggles();
	let allIterator = allCapabilities.getKeysAsIterator();
	while (allIterator.hasNext())
	{
		capabilities.put(allIterator.next(), oFF.XBooleanValue.create(false));
	}
	let experimentalFeatureSet = queryModel.getSession().getFeatureToggles();
	if (oFF.notNull(experimentalFeatureSet))
	{
		let activatedIterator = experimentalFeatureSet.getKeysAsIterator();
		while (activatedIterator.hasNext())
		{
			capabilities.put(activatedIterator.next(), oFF.XBooleanValue.create(true));
		}
	}
	return capabilities;
};
oFF.QInARepoQuery.prototype.getMainQuerySystemName = function(inaDefinition)
{
	let inaDataSource = inaDefinition.getStructureByKey("DataSource");
	return oFF.notNull(inaDataSource) ? inaDataSource.getStringByKey("System") : null;
};
oFF.QInARepoQuery.prototype.importBlendingSources = function(importer, inaStructure, queryModel)
{
	let sources = queryModel.getBlendingSources();
	if (!oFF.XCollectionUtils.hasElements(sources))
	{
		return;
	}
	let inaDataSource = oFF.PrUtils.getStructureProperty(inaStructure, "DataSource");
	let inaSources = oFF.PrUtils.getListProperty(inaDataSource, "Sources");
	if (oFF.PrUtils.isListEmpty(inaSources))
	{
		return;
	}
	for (let i = 0; i < sources.size(); i++)
	{
		let inaSource = oFF.PrUtils.getStructureElement(inaSources, i);
		let inaDefinitionContext = oFF.PrUtils.getStructureProperty(inaSource, "DefiningContext");
		if (oFF.notNull(inaDefinitionContext))
		{
			let sourceQueryModel = sources.get(i).getQueryModel();
			sourceQueryModel.stopEventing();
			sourceQueryModel.deserializeFromElementExt(importer.m_mode, inaDefinitionContext);
			sourceQueryModel.resumeEventing();
		}
	}
};
oFF.QInARepoQuery.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent.getQueryModel();
	let inaDefinition = inaStructure;
	let inaQueries = inaDefinition.getListByKey("Queries");
	if (oFF.notNull(inaQueries))
	{
		inaDefinition = inaQueries.getStructureAt(inaQueries.size() - 1);
	}
	let inaBatch = inaDefinition.getListByKey(oFF.ConnectionConstants.INA_BATCH);
	if (oFF.notNull(inaBatch))
	{
		inaDefinition = inaBatch.getStructureAt(inaBatch.size() - 1);
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Analytics"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Analytics");
		if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("Definition");
		}
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Definition");
	}
	if (oFF.notNull(inaDefinition))
	{
		let isForRendering = importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE_RENDERING;
		if (inaDefinition.containsKey("ModellerDefinition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("ModellerDefinition");
			let eventingStoppedBeforeModelingCall = queryModel.isEventingStopped();
			if (!eventingStoppedBeforeModelingCall)
			{
				queryModel.stopEventing();
			}
			queryModel.setDeltaPhase(oFF.QDeltaOperationPhase.NOTE_MODELER_CHANGES);
			importer.importModellerMetadataProperties(inaDefinition, queryModel, queryModel);
			importer.importModellerDimensions(inaDefinition, queryModel, queryModel);
			importer.importModellerDefinedVariables(inaDefinition, queryModel.getVariableManagerBase(), queryModel);
			importer.importModellerCurrencyTranslation(inaDefinition, queryModel.getCurrencyTranslationManagerBase(), queryModel);
			importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
			queryModel.finishModelerEventing();
			if (!eventingStoppedBeforeModelingCall)
			{
				queryModel.resumeEventing();
			}
			return queryModel;
		}
		importer.importDimensions(inaDefinition, queryModel, queryModel);
		if (!isForRendering || importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_NO_VARS && importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
		{
			importer.importFunctionalVariables(inaDefinition, queryModel.getVariableManagerBase(), queryModel);
		}
		if (!isForRendering)
		{
			importer.importFilter(inaDefinition, queryModel.getFilterBase(), queryModel);
			importer.importExceptions(inaDefinition, queryModel);
			importer.importQueryCells(inaDefinition, queryModel.getQueryCellManager(), queryModel);
			importer.importUniversalDisplayHierarchies(inaDefinition, queryModel.getUniversalDisplayHierarchiesBase(), queryModel);
		}
		importer.importCurrencyTranslationManager(inaDefinition, queryModel.getCurrencyTranslationManager(), queryModel);
		importer.importUnitTranslationManager(inaDefinition, queryModel.getUnitTranslationManager(), queryModel);
		importer.importTranslationManager(inaDefinition, queryModel, context);
		importer.importSortingManager(inaDefinition, queryModel.getSortingManagerBase(), queryModel);
		importer.importDrillManager(inaDefinition, queryModel.getDrillManager(), queryModel);
		importer.importCellContextManager(inaDefinition, queryModel.getCellContextManager(), queryModel);
		if (inaDefinition.containsKey("QuickActionManager"))
		{
			importer.importQuickActionManager(inaDefinition, queryModel.getQuickActionManager(), queryModel);
		}
		importer.importVisualizationManager(inaDefinition, queryModel.getVisualizationManager(), queryModel);
		if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_NO_VARS && importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
		{
			importer.importVariableManager(inaDefinition, queryModel.getVariableManagerBase(), queryModel);
		}
		importer.importQuerySettings(inaDefinition, queryModel);
		importer.importDataCells(inaDefinition, queryModel);
		importer.importConditionManager(inaDefinition, queryModel.getConditionManagerBase(), queryModel);
		importer.importSimulationManager(inaDefinition, queryModel.getSimulationManagerBase(), queryModel);
		importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
		this.importPaging(importer, inaDefinition, queryModel);
		let resultStructureController = queryModel.getResultStructureController();
		importer.importComponent(null, inaDefinition, resultStructureController, queryModel, queryModel);
		let queryManager = queryModel.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			oFF.QInARepoOptions.importSuppressKeyfigureCalculation(inaDefinition, queryManager);
			oFF.QInARepoOptions.importLOVAbstractionLayerSettings(inaDefinition, queryManager);
			oFF.QInARepoOptions.importUniqueAxisProperties(inaDefinition, queryManager);
			oFF.QInARepoInputEnablementRules.importInputEnablementRules(inaDefinition, queryManager);
			oFF.QInARepoInputReadinessFilter.importInputReadinessFilter(inaDefinition, queryManager);
			queryManager.setResultSetPersistanceTargetTable(inaDefinition.getStringByKey("ResultSetPersistanceTable"));
			queryManager.setResultSetPersistanceTargetSchema(inaDefinition.getStringByKey("ResultSetPersistanceSchema"));
			queryManager.setResultSetPersistenceIdentifier(inaDefinition.getStringByKey("ResultSetPersistanceIdentifier"));
		}
		this.importPreQueries(oFF.SyncType.BLOCKING, null, importer, queryModel, inaDefinition.getListByKey("PreQueries"), this.getMainQuerySystemName(inaDefinition));
		if (importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && queryModel.isBlendingModel())
		{
			this.importBlendingSources(importer, inaStructure, queryModel);
		}
		queryModel.setVersionDimensionValidationEnabled(inaDefinition.getBooleanByKeyExt("IsVersionDimensionValidationEnabled", false));
		if (inaDefinition.containsKey("IsAutoAddBWServerSortsEnabled"))
		{
			queryModel.setAutoAddBWServerSortsEnabled(inaDefinition.getBooleanByKeyExt("IsAutoAddBWServerSortsEnabled", false));
		}
		this.importPlanningSettings(inaDefinition, queryModel);
	}
	return queryModel;
};
oFF.QInARepoQuery.prototype.importPaging = function(importer, inaDefinition, queryModel)
{
	let inaSubset = inaDefinition.getStructureByKey("SubSetDescription");
	let queryManager = queryModel.getQueryManager();
	let isForRendering = importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING;
	if (oFF.isNull(inaSubset) || !queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) || queryManager.applyingStateOnQueryManager() && !isForRendering)
	{
		return;
	}
	oFF.QInARepoOptions.importPaging(inaDefinition, queryManager);
};
oFF.QInARepoQuery.prototype.importPlanningSettings = function(inaDefinition, queryModel)
{
	if (inaDefinition.containsKey("PlanningMode"))
	{
		queryModel.setPlanningMode(oFF.PlanningMode.lookup(inaDefinition.getStringByKey("PlanningMode")));
	}
};
oFF.QInARepoQuery.prototype.importPreQueries = function(syncType, importExecutedListener, importer, queryModel, inaPreQueries, mainQuerySystemName)
{
	let validInaPreQueries = oFF.XStream.of(inaPreQueries).map((inaElement) => {
		return inaElement.asStructure();
	}).filter((inaPreQuery) => {
		return queryModel.getPreQueryByName(inaPreQuery.getStringByKey("ObjectName")) === null;
	}).collect(oFF.XStreamCollector.toList());
	let unprocessedPreQueries = validInaPreQueries.createListCopy();
	if (unprocessedPreQueries.isEmpty())
	{
		this.callPreQueryImportedListener(importExecutedListener, unprocessedPreQueries, null);
		return;
	}
	let capabilitiesToActivate = this.getInactiveCapabilities(queryModel);
	let modeHolder = importer.getMode();
	if (importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE_RENDERING)
	{
		importer.m_mode = importer.getOriginalMode();
	}
	oFF.XCollectionUtils.forEach(validInaPreQueries, (inaPreQuery) => {
		let inaRuntime = inaPreQuery.containsKey("Runtime") ? inaPreQuery.getStructureByKey("Runtime") : inaPreQuery;
		let inaDataSource = inaRuntime.getStructureByKey("DataSource");
		let datasource = oFF.XStringBuffer.create();
		datasource.append(inaDataSource.getStringByKey("Type")).append(":[");
		datasource.append(inaDataSource.getStringByKey("SchemaName"));
		datasource.append("][");
		datasource.append(inaDataSource.getStringByKey("PackageName"));
		datasource.append("][");
		datasource.append(inaDataSource.getStringByKey("ObjectName")).append("]");
		let preQuerySystemName = inaDataSource.getStringByKey("System");
		if (importer.m_mode === oFF.QModelFormat.INA_REPOSITORY && oFF.XString.isEqual(preQuerySystemName, mainQuerySystemName))
		{
			preQuerySystemName = queryModel.getDataSource().getSystemName();
		}
		let commandFactory = oFF.XCommandFactory.create(queryModel.getApplication());
		let xCmdDeserialize = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, queryModel.getApplication());
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, capabilitiesToActivate);
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, preQuerySystemName);
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, datasource.toString());
		xCmdDeserialize.processCommand(syncType, oFF.XCommandProcessedLambdaListener.create((result) => {
			importer.addAllMessages(result);
			if (result.isValid())
			{
				let preQuery = result.getData().getResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER).getQueryModel();
				importer.processImportComponent(syncType, (component) => {
					oFF.QInARepoDataSource.importDs2(importer, inaDataSource, null, preQuery.getDataSourceBase());
					queryModel.addPreQueryWithName(preQuery, inaPreQuery.getStringByKey("ObjectName"));
					this.callPreQueryImportedListener(importExecutedListener, unprocessedPreQueries, inaPreQuery);
				}, oFF.OlapComponentType.QUERY_MODEL, inaPreQuery, preQuery, null, preQuery);
			}
			else
			{
				this.callPreQueryImportedListener(importExecutedListener, unprocessedPreQueries, inaPreQuery);
			}
			oFF.XObjectExt.release(xCmdDeserialize);
		}), null);
	});
	importer.m_mode = modeHolder;
};
oFF.QInARepoQuery.prototype.processImportComponent = function(syncType, listener, importer, componentType, inaElement, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent.getQueryModel();
	let inaPreQueries = inaElement.asStructure().getListByKey("PreQueries");
	let onPreQueriesLoaded = () => {
		oFF.QInARepository.prototype.processImportComponent.call( this , syncType, listener, importer, componentType, inaElement, modelComponent, parentComponent, context);
	};
	this.importPreQueries(syncType, onPreQueriesLoaded, importer, queryModel, inaPreQueries, this.getMainQuerySystemName(inaElement.asStructure()));
	return modelComponent;
};

oFF.QInARepoQueryCells = function() {};
oFF.QInARepoQueryCells.prototype = new oFF.QInARepository();
oFF.QInARepoQueryCells.prototype._ff_c = "QInARepoQueryCells";

oFF.QInARepoQueryCells.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryCellManager = modelComponent;
	if (oFF.notNull(queryCellManager) && queryCellManager.size() > 0)
	{
		let inaQueryCells = inaStructure.putNewList("Elements");
		let queryCellIt = queryCellManager.getIterator();
		while (queryCellIt.hasNext())
		{
			let queryCell = queryCellIt.next();
			let inaQueryCell = inaQueryCells.addNewStructure();
			inaQueryCell.putString("Name", queryCell.getName());
			let cellCalculationMember = queryCell.getCellCalculationMember();
			inaQueryCell.putString("DimensionName", cellCalculationMember.getDimension().getName());
			inaQueryCell.putString("MemberName", cellCalculationMember.getName());
			let inaPositions = inaQueryCell.putNewList("Position");
			let positions = queryCell.getPositions();
			let positionIt = positions.getIterator();
			while (positionIt.hasNext())
			{
				let queryCellPosition = positionIt.next();
				let inaPosition = inaPositions.addNewStructure();
				inaPosition.putString("DimensionName", queryCellPosition.getDimensionName());
				inaPosition.putString("MemberName", queryCellPosition.getMemberName());
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoQueryCells.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_CELLS;
};
oFF.QInARepoQueryCells.prototype.getMember = function(dimensionAccessor, inaStructure)
{
	let dimension = dimensionAccessor.getDimensionByName(inaStructure.getStringByKey("DimensionName"));
	return dimension.getStructureMember(inaStructure.getStringByKey("MemberName"));
};
oFF.QInARepoQueryCells.prototype.getTagName = function()
{
	return "Cells";
};
oFF.QInARepoQueryCells.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryCellManager = modelComponent;
	if (oFF.notNull(queryCellManager))
	{
		queryCellManager.clear();
		if (oFF.notNull(inaStructure))
		{
			let inaQueryCells = inaStructure.getListByKey("Elements");
			if (oFF.notNull(inaQueryCells))
			{
				let dimensionAccessor = queryCellManager.getDimensionAccessor();
				let sizeCells = inaQueryCells.size();
				for (let idxCell = 0; idxCell < sizeCells; idxCell++)
				{
					let inaQueryCell = inaQueryCells.getStructureAt(idxCell);
					let queryCell = queryCellManager.addNewQueryCell(inaQueryCell.getStringByKey("Name"));
					queryCell.setCellCalculationMember(this.getMember(dimensionAccessor, inaQueryCell));
					let inaPositions = inaQueryCell.getListByKey("Position");
					let sizePositions = inaPositions.size();
					for (let idxPosition = 0; idxPosition < sizePositions; idxPosition++)
					{
						let inaPosition = inaPositions.getStructureAt(idxPosition);
						queryCell.addPosition(this.getMember(dimensionAccessor, inaPosition));
					}
				}
			}
		}
	}
	return queryCellManager;
};

oFF.QInARepoQueryManager = function() {};
oFF.QInARepoQueryManager.prototype = new oFF.QInARepository();
oFF.QInARepoQueryManager.prototype._ff_c = "QInARepoQueryManager";

oFF.QInARepoQueryManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryManager = modelComponent;
	let queryModel = queryManager.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let inaQueryModel = exporter.exportQueryModel(queryModel, true, true);
		inaStructure.put("QueryModel", inaQueryModel);
	}
	let initSettings = queryManager.getQueryServiceConfig();
	let inaQuerySettings = exporter.exportComponent(oFF.OlapComponentType.QUERY_SERVICE_CONFIG, initSettings, null, flags);
	inaStructure.put("QueryServiceConfig", inaQuerySettings);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, queryManager, inaStructure, flags);
};
oFF.QInARepoQueryManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MANAGER;
};
oFF.QInARepoQueryManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryManager = modelComponent;
	return queryManager;
};

oFF.QInARepoQuerySettings = function() {};
oFF.QInARepoQuerySettings.prototype = new oFF.QInARepository();
oFF.QInARepoQuerySettings.prototype._ff_c = "QInARepoQuerySettings";

oFF.QInARepoQuerySettings.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent;
	let definitionName = queryModel.getDefinitionName();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(definitionName))
	{
		inaStructure.putString("Name", definitionName);
	}
	let inaQuery = inaStructure.getStructureByKey("Query");
	if (oFF.isNull(inaQuery))
	{
		inaQuery = inaStructure.putNewStructure("Query");
	}
	exporter.exportAxesSettings(queryModel, inaQuery);
	let axesLayoutList = inaQuery.putNewList("AxesLayout");
	let allAxisTypes = oFF.AxisType.getAll();
	for (let axisTypeIndex = 0; axisTypeIndex < allAxisTypes.size(); axisTypeIndex++)
	{
		let axisType = allAxisTypes.get(axisTypeIndex);
		let axis = queryModel.getAxis(axisType);
		if (oFF.isNull(axis))
		{
			continue;
		}
		let dimensionNames = axis.getOrderedDimensionNames();
		if (oFF.isNull(dimensionNames))
		{
			continue;
		}
		let axisLayoutStructure = axesLayoutList.addNewStructure();
		axisLayoutStructure.putString("Axis", axis.getName());
		let orderedDimensionNamesList = axisLayoutStructure.putNewList("OrderedDimensionNames");
		orderedDimensionNamesList.addAllStrings(dimensionNames);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoQuerySettings.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_SETTINGS;
};
oFF.QInARepoQuerySettings.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let definitionNameString = oFF.PrUtils.getStringProperty(inaStructure, "Name");
	if (oFF.notNull(definitionNameString))
	{
		queryModel.setDefinitionName(definitionNameString.getString());
	}
	let inaQuery = inaStructure.getStructureByKey("Query");
	importer.importAxesSettings(inaQuery, queryModel);
	let axesLayoutList = oFF.PrUtils.getListProperty(inaQuery, "AxesLayout");
	let len = oFF.PrUtils.getListSize(axesLayoutList, 0);
	for (let axesLayoutIndex = 0; axesLayoutIndex < len; axesLayoutIndex++)
	{
		let axisLayoutStructure = oFF.PrUtils.getStructureElement(axesLayoutList, axesLayoutIndex);
		let axisType = oFF.AxisType.lookup(oFF.PrUtils.getStringValueProperty(axisLayoutStructure, "Axis", null));
		let axis = queryModel.getAxis(axisType);
		if (oFF.isNull(axis))
		{
			continue;
		}
		let orderedDimensionNamesList = oFF.PrUtils.getListProperty(axisLayoutStructure, "OrderedDimensionNames");
		if (oFF.isNull(orderedDimensionNamesList))
		{
			continue;
		}
		let orderedDimensionNames = oFF.XList.create();
		for (let dimensionNameIndex = 0; dimensionNameIndex < oFF.PrUtils.getListSize(orderedDimensionNamesList, 0); dimensionNameIndex++)
		{
			let dimensionNameString = oFF.PrUtils.getStringElement(orderedDimensionNamesList, dimensionNameIndex);
			if (oFF.isNull(dimensionNameString))
			{
				continue;
			}
			orderedDimensionNames.add(dimensionNameString.getString());
		}
		axis.reOrderDimensions(orderedDimensionNames);
	}
	return queryModel;
};

oFF.QInARepoQuickActionManager = function() {};
oFF.QInARepoQuickActionManager.prototype = new oFF.QInARepository();
oFF.QInARepoQuickActionManager.prototype._ff_c = "QInARepoQuickActionManager";

oFF.QInARepoQuickActionManager.exportDataProviderCommands = function(action, structure)
{
	if (oFF.XCollectionUtils.hasElements(action))
	{
		let commands = structure.putNewList("Commands");
		oFF.XCollectionUtils.forEach(action, (command) => {
			let commandStructure = commands.addNewStructure();
			commandStructure.putString("Name", command.getName());
			commandStructure.putString("Command", command.getCommandName());
			oFF.QInARepoQuickActionManager.exportQuickActionParameters(command, commandStructure);
		});
	}
};
oFF.QInARepoQuickActionManager.exportFieldValueParameter = function(parameter, inaStructure)
{
	inaStructure.putBoolean("MultipleValues", parameter.isAllowMultiValues());
	inaStructure.putStringNotNullAndNotEmpty("Dimension", parameter.getDimensionName());
	inaStructure.putStringNotNullAndNotEmpty("Attribute", parameter.getAttributeName());
	inaStructure.putStringNotNullAndNotEmpty("Field", parameter.getFieldName());
	inaStructure.putStringNotNullAndNotEmpty("SemanticObject", parameter.getSemanticObject());
	inaStructure.putStringNotNullAndNotEmpty("SemanticType", parameter.getSemanticType());
	inaStructure.putStringNotNullAndNotEmpty("PresentationType", oFF.QInAConverter.lookupPresentationTypeInA(parameter.getPresentationType()));
	oFF.QInARepoQuickActionManager.setTriStateBool(inaStructure, "Totals", parameter.getMatchesTotals());
	oFF.QInARepoQuickActionManager.setTriStateBool(inaStructure, "Expanded", parameter.getMatchesExpanded());
	oFF.QInARepoQuickActionManager.setTriStateBool(inaStructure, "Leaves", parameter.getMatchesLeaves());
};
oFF.QInARepoQuickActionManager.exportQuickAction = function(action, structure)
{
	structure.putStringNotNullAndNotEmpty("Name", action.getName());
	structure.putStringNotNullAndNotEmpty("Text", action.getText());
	let componentType = action.getOlapComponentType();
	if (componentType === oFF.OlapComponentType.QUICK_ACTION_URL)
	{
		structure.putString("Type", "QuickActionUrl");
		oFF.QInARepoQuickActionManager.exportQuickActionParameters(action, structure);
	}
	else if (componentType === oFF.OlapComponentType.QUICK_ACTION_DATAPROVIDER)
	{
		structure.putString("Type", "QuickActionDataprovider");
		oFF.QInARepoQuickActionManager.exportDataProviderCommands(action, structure);
	}
};
oFF.QInARepoQuickActionManager.exportQuickActionParameter = function(parameter, inaStructure)
{
	let componentType = parameter.getOlapComponentType();
	if (componentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT)
	{
		inaStructure.putString("Type", "Constant");
		inaStructure.put("Value", oFF.PrFactory.createFromValue(parameter.getValue()));
	}
	else if (componentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_URL_LITERAL)
	{
		inaStructure.putString("Type", "UrlLiteral");
		inaStructure.putStringNotNullAndNotEmpty("Value", oFF.DfNameObject.getSafeName(parameter.getValue()));
	}
	else if (componentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT_LIST)
	{
		inaStructure.putString("Type", "ConstantList");
		let values = parameter.getValues();
		if (oFF.XCollectionUtils.hasElements(values))
		{
			inaStructure.putNewList("Values").addAll(oFF.XStream.of(values).map((v) => {
				return oFF.PrFactory.createFromValue(v);
			}).collect(oFF.XStreamCollector.toList()));
		}
	}
	else if (componentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_FIELD_VALUE)
	{
		inaStructure.putString("Type", "FieldValue");
		oFF.QInARepoQuickActionManager.exportFieldValueParameter(parameter, inaStructure);
	}
	else if (componentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_OLAP)
	{
		inaStructure.putString("Type", "Olap");
		inaStructure.putString("ComponentType", oFF.QInAConverter.lookupComponentTypeInA(parameter.getComponentTypeToResolve()));
	}
};
oFF.QInARepoQuickActionManager.exportQuickActionParameters = function(action, structure)
{
	let parameters = action.getParameters();
	if (!parameters.isEmpty())
	{
		let prList = structure.putNewList("Parameters");
		oFF.XCollectionUtils.forEach(parameters, (parameter) => {
			oFF.QInARepoQuickActionManager.exportQuickActionParameter(parameter, prList.addNewStructure());
		});
	}
};
oFF.QInARepoQuickActionManager.getTriStateBool = function(struct, key)
{
	let result = oFF.TriStateBool._DEFAULT;
	if (struct.containsKey(key))
	{
		result = struct.getBooleanByKey(key) ? oFF.TriStateBool._TRUE : oFF.TriStateBool._FALSE;
	}
	return result;
};
oFF.QInARepoQuickActionManager.importContextParameter = function(quickAction, inaStructure)
{
	if (oFF.notNull(quickAction) && oFF.notNull(inaStructure))
	{
		let parameterType = inaStructure.getStringByKey("Type");
		if (oFF.XString.isEqual(parameterType, "FieldValue"))
		{
			oFF.QInARepoQuickActionManager.importFieldValueParameter(quickAction.addNewFieldValueParameter(), inaStructure);
		}
		else if (oFF.XString.isEqual(parameterType, "Olap"))
		{
			quickAction.addNewOlapParameter(oFF.QInAConverter.lookupComponentType(inaStructure.getStringByKey("ComponentType")));
		}
		else if (oFF.XString.isEqual(parameterType, "Constant"))
		{
			let prValue = inaStructure.getByKey("Value");
			if (oFF.notNull(prValue))
			{
				quickAction.addConstant(prValue.copyAsPrimitiveXValue());
			}
		}
		else if (oFF.XString.isEqual(parameterType, "UrlLiteral"))
		{
			let prString = inaStructure.getStringByKey("Value");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(prString))
			{
				quickAction.addNewLiteralParameter(oFF.UrlComponentLiteral.lookup(prString));
			}
		}
		else if (oFF.XString.isEqual(parameterType, "ConstantList"))
		{
			let values = inaStructure.getListByKey("Values");
			let constantList = quickAction.addConstantList();
			if (oFF.XCollectionUtils.hasElements(values))
			{
				oFF.XCollectionUtils.forEach(values, (value) => {
					constantList.addValue(oFF.isNull(value) ? null : value.copyAsPrimitiveXValue());
				});
			}
		}
	}
};
oFF.QInARepoQuickActionManager.importDataProviderCommands = function(inaStructure, quickActionSequence)
{
	let commands = inaStructure.getListByKey("Commands");
	if (oFF.notNull(commands))
	{
		oFF.XCollectionUtils.forEach(commands, (command) => {
			let commandStructure = command.asStructure();
			let name = commandStructure.getStringByKey("Name");
			let commandName = commandStructure.getStringByKey("Command");
			oFF.QInARepoQuickActionManager.importParameters(commandStructure, quickActionSequence.addNewDataProviderCommand(name, commandName));
		});
	}
};
oFF.QInARepoQuickActionManager.importFieldValueParameter = function(dimensionActionParameter, inaStructure)
{
	dimensionActionParameter.setAllowMultiValues(inaStructure.getBooleanByKey("MultipleValues"));
	dimensionActionParameter.setDimensionName(inaStructure.getStringByKey("Dimension"));
	dimensionActionParameter.setAttributeName(inaStructure.getStringByKey("Attribute"));
	dimensionActionParameter.setFieldName(inaStructure.getStringByKey("Field"));
	dimensionActionParameter.setSemanticObject(inaStructure.getStringByKey("SemanticObject"));
	dimensionActionParameter.setSemanticType(inaStructure.getStringByKey("SemanticType"));
	dimensionActionParameter.setPresentationType(oFF.QInAConverter.lookupPresentationType(inaStructure.getStringByKey("PresentationType")));
	dimensionActionParameter.setMatchesExpanded(oFF.QInARepoQuickActionManager.getTriStateBool(inaStructure, "Expanded"));
	dimensionActionParameter.setMatchesTotals(oFF.QInARepoQuickActionManager.getTriStateBool(inaStructure, "Totals"));
	dimensionActionParameter.setMatchesLeaves(oFF.QInARepoQuickActionManager.getTriStateBool(inaStructure, "Leaves"));
};
oFF.QInARepoQuickActionManager.importParameters = function(inaStructure, quickActionSimple)
{
	let parameters = inaStructure.getListByKey("Parameters");
	if (oFF.notNull(parameters))
	{
		oFF.XCollectionUtils.forEach(parameters, (parameter) => {
			oFF.QInARepoQuickActionManager.importContextParameter(quickActionSimple, parameter.asStructure());
		});
	}
};
oFF.QInARepoQuickActionManager.importQuickAction = function(quickActionManager, inaStructure)
{
	if (oFF.notNull(inaStructure))
	{
		let actionType = inaStructure.getStringByKey("Type");
		let name = inaStructure.getStringByKey("Name");
		let text = inaStructure.getStringByKey("Text");
		if (oFF.XString.isEqual(actionType, "QuickActionUrl"))
		{
			oFF.QInARepoQuickActionManager.importParameters(inaStructure, quickActionManager.addNewUrlQuickAction(name, text));
		}
		else if (oFF.XString.isEqual(actionType, "QuickActionDataprovider"))
		{
			oFF.QInARepoQuickActionManager.importDataProviderCommands(inaStructure, quickActionManager.addNewDataProviderQuickAction(name, text));
		}
	}
};
oFF.QInARepoQuickActionManager.setTriStateBool = function(struct, key, tsb)
{
	if (tsb === oFF.TriStateBool._TRUE)
	{
		struct.putBoolean(key, true);
	}
	else if (tsb === oFF.TriStateBool._FALSE)
	{
		struct.putBoolean(key, false);
	}
};
oFF.QInARepoQuickActionManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let olapComponentType = modelComponent.getOlapComponentType();
	let quickActionManager = olapComponentType === oFF.OlapComponentType.QUICK_ACTION_MANAGER ? modelComponent : null;
	if (oFF.XCollectionUtils.hasElements(quickActionManager))
	{
		let inaList = inaStructure.putNewList("Actions");
		oFF.XCollectionUtils.forEach(quickActionManager, (action) => {
			oFF.QInARepoQuickActionManager.exportQuickAction(action, inaList.addNewStructure());
		});
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoQuickActionManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_MANAGER;
};
oFF.QInARepoQuickActionManager.prototype.getTagName = function()
{
	return "QuickActionManager";
};
oFF.QInARepoQuickActionManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let olapComponentType = modelComponent.getOlapComponentType();
	let quickActionManager = olapComponentType === oFF.OlapComponentType.QUICK_ACTION_MANAGER ? modelComponent : null;
	let inaList = oFF.isNull(inaStructure) ? null : inaStructure.getListByKey("Actions");
	if (oFF.notNull(quickActionManager) && oFF.notNull(inaList))
	{
		quickActionManager.clear();
		oFF.XCollectionUtils.forEach(inaList, (inaElement) => {
			oFF.QInARepoQuickActionManager.importQuickAction(quickActionManager, inaElement.asStructure());
		});
	}
	return modelComponent;
};

oFF.QInARepoServiceConfig = function() {};
oFF.QInARepoServiceConfig.prototype = new oFF.QInARepository();
oFF.QInARepoServiceConfig.prototype._ff_c = "QInARepoServiceConfig";

oFF.QInARepoServiceConfig.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let config = modelComponent;
	inaStructure.putStringNotNullAndNotEmpty("System", config.getSystemName());
	let inaDataSource = exporter.exportDataSource(config.getDataSource(), false);
	inaStructure.putNotNullAndNotEmpty("DataSource", inaDataSource);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, config, inaStructure, flags);
};
oFF.QInARepoServiceConfig.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_SERVICE_CONFIG;
};
oFF.QInARepoServiceConfig.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let config = modelComponent;
	let system = inaStructure.getStringByKey("System");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(system))
	{
		config.setSystemName(system);
	}
	let inaDataSource = inaStructure.getStructureByKey("DataSource");
	if (oFF.notNull(inaDataSource))
	{
		let dataSource = importer.importDataSource(inaDataSource);
		config.setDataSource(dataSource);
	}
	return config;
};
oFF.QInARepoServiceConfig.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let serviceConfig = oFF.QueryServiceConfig.create(application);
	return serviceConfig;
};

oFF.QInARepoSimulationManager = function() {};
oFF.QInARepoSimulationManager.prototype = new oFF.QInARepository();
oFF.QInARepoSimulationManager.prototype._ff_c = "QInARepoSimulationManager";

oFF.QInARepoSimulationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let exportStructure = null;
	let simulationManager = modelComponent;
	if (exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE))
	{
		if (oFF.notNull(simulationManager) && simulationManager.getSimulationStructure() !== null)
		{
			exportStructure = oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, simulationManager.getSimulationStructure(), flags);
		}
	}
	return exportStructure;
};
oFF.QInARepoSimulationManager.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	return inaStructure;
};
oFF.QInARepoSimulationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_SIMULATION_MANAGER;
};
oFF.QInARepoSimulationManager.prototype.getTagName = function()
{
	return "SimulationRepo";
};
oFF.QInARepoSimulationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE) && oFF.notNull(inaStructure) && inaStructure.hasElements())
	{
		let simulationManager = modelComponent;
		simulationManager.setSimulationStructure(oFF.PrUtils.createElementDeepCopy(inaStructure));
	}
	return modelComponent;
};

oFF.QInARepoSort = function() {};
oFF.QInARepoSort.prototype = new oFF.QInARepository();
oFF.QInARepoSort.prototype._ff_c = "QInARepoSort";

oFF.QInARepoSort.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let sortingManager = modelComponent;
	let inaSortOps = inaStructure.putNewList("Elements");
	let skipUnusedDimensionSort = sortingManager.getQueryModel().skipSerializationOfUnusedDimensionAndSort() && (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS);
	let sortingOperations = sortingManager.getSortingOperations();
	for (let i = 0; i < sortingOperations.size(); i++)
	{
		let sorting = sortingOperations.get(i);
		let isUdhDimension = sorting.supportsDimension() && sorting.getDimension() !== null && sorting.getDimension().isUniversalDisplayHierarchyDimension();
		let isUnusedBWServerSort = skipUnusedDimensionSort && sorting.supportsDimension() && sorting.getDimension() !== null && sorting.getTagging().containsKey(oFF.QTransientConstants.TAG_SERVER_SORT) && sorting.getDimension().getAxisType() !== oFF.AxisType.ROWS && sorting.getDimension().getAxisType() !== oFF.AxisType.COLUMNS;
		if (!isUdhDimension && !isUnusedBWServerSort)
		{
			inaSortOps.add(exporter.exportComponent(null, sorting, null, flags));
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoSort.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SORT_MANAGER;
};
oFF.QInARepoSort.prototype.getTagName = function()
{
	return "SortRepo";
};
oFF.QInARepoSort.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let sortingManager = modelComponent;
	let inaList = inaStructure.getListByKey("Elements");
	let sortingOperations = sortingManager.getSortingOperations();
	sortingOperations.clear();
	if (oFF.notNull(inaList))
	{
		for (let sortIdx = 0; sortIdx < inaList.size(); sortIdx++)
		{
			let inaSort = inaList.getStructureAt(sortIdx);
			let sortingOp = importer.importComponent(oFF.OlapComponentType.GENERIC_SORTING, inaSort, null, sortingManager, context);
			if (oFF.notNull(sortingOp))
			{
				sortingOperations.add(sortingOp);
			}
		}
	}
	return sortingManager;
};

oFF.QInARepoSortOperation = function() {};
oFF.QInARepoSortOperation.prototype = new oFF.QInARepository();
oFF.QInARepoSortOperation.prototype._ff_c = "QInARepoSortOperation";

oFF.QInARepoSortOperation.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let sortingOp = modelComponent;
	let sortingType = sortingOp.getSortingType();
	this.exportGenericSorting(exporter, inaStructure, sortingOp, sortingType);
	if (sortingType === oFF.SortType.FIELD)
	{
		this.exportFieldSorting(inaStructure, sortingOp);
	}
	else if (sortingType === oFF.SortType.MEASURE)
	{
		this.exportMeasureSorting(inaStructure, sortingOp);
	}
	else if (sortingType === oFF.SortType.DATA_CELL_VALUE || sortingType === oFF.SortType.COMPLEX)
	{
		this.exportPathSorting(exporter, inaStructure, sortingOp);
	}
	else if (sortingType === oFF.SortType.MEMBER_KEY)
	{
		let measureDimensionSorting = sortingOp;
		this.exportCustomSortDetails(measureDimensionSorting.getCustomSort(), measureDimensionSorting.getCustomSortPosition(), inaStructure);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoSortOperation.prototype.exportCustomSortDetails = function(customOrder, customSortPosition, inaStructure)
{
	if (oFF.XCollectionUtils.hasElements(customOrder))
	{
		let customOrderList = inaStructure.putNewList("CustomSort");
		let customOrderSize = customOrder.size();
		for (let customOrderIndex = 0; customOrderIndex < customOrderSize; customOrderIndex++)
		{
			customOrderList.addString(customOrder.get(customOrderIndex));
		}
	}
	oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "CustomSortPosition", customSortPosition);
};
oFF.QInARepoSortOperation.prototype.exportFieldSorting = function(inaStructure, sortingOp)
{
	let fieldSorting = sortingOp;
	inaStructure.putString("FieldName", fieldSorting.getField().getName());
	this.exportCustomSortDetails(fieldSorting.getCustomSort(), fieldSorting.getCustomSortPosition(), inaStructure);
};
oFF.QInARepoSortOperation.prototype.exportGenericSorting = function(exporter, inaStructure, sortingOp, sortingType)
{
	let inaSortType = oFF.QInAConverter.lookupSortTypeInA(sortingType);
	inaStructure.putString("SortType", inaSortType);
	let direction = sortingOp.getDirection();
	if (direction !== oFF.XSortDirection.DEFAULT_VALUE)
	{
		inaStructure.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(direction));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || sortingOp.hasPropertyChanged(oFF.QSortProperties.QY_PRESERVE_GROUPING))
	{
		if (sortingOp.supportsPreserveGrouping() && sortingOp.supportsBreakGrouping())
		{
			inaStructure.putBoolean("PreserveGrouping", sortingOp.isPreserveGroupingEnabled());
		}
	}
	if (sortingOp.getModelCapabilities().supportsLocaleSorting())
	{
		let inaCollator = oFF.PrFactory.createStructure();
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || sortingOp.hasPropertyChanged(oFF.QSortProperties.QY_CASE_SENSITIVE))
		{
			inaCollator.putBoolean("CaseSensitive", sortingOp.isCaseSensitive());
		}
		inaCollator.putString("Locale", sortingOp.getLocale());
		inaStructure.put("Collator", inaCollator);
	}
	if (sortingOp.supportsDimension())
	{
		oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "Dimension", sortingOp.getDimension());
	}
	if (sortingOp.getModelCapabilities().supportsPersistedInA() && exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE && (!sortingOp.isCreatedFromMetadata() || sortingOp.getModCounter() > 0))
	{
		inaStructure.putBoolean("ExportInPersistedInA", true);
	}
};
oFF.QInARepoSortOperation.prototype.exportMeasureSorting = function(inaStructure, sortingOp)
{
	let measureSorting = sortingOp;
	let measureName = measureSorting.getMeasure().getName();
	inaStructure.putString("MeasureName", measureName);
	oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "StructureName", measureSorting.getSecondaryMeasure());
};
oFF.QInARepoSortOperation.prototype.exportPathSorting = function(exporter, inaStructure, sortingOp)
{
	let pathOperation = sortingOp;
	let inaPath = inaStructure.putNewList("SortTuple");
	let elementPath = pathOperation.getElementPath();
	let size = elementPath.size();
	for (let i = 0; i < size; i++)
	{
		let dimElement = elementPath.get(i);
		let inaPathElement = inaPath.addNewStructure();
		inaPathElement.putString("FieldName", dimElement.getSelectField().getName());
		let memberType = dimElement.getSelectMemberType();
		if (oFF.notNull(memberType))
		{
			inaPathElement.putInteger("MemberType", oFF.QInAConverter.lookupResultsetMemberTypeInA(memberType));
		}
		inaPathElement.putString("Value", dimElement.getSelectValue());
		let selectHierarchyName = dimElement.getSelectHierarchyName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(selectHierarchyName))
		{
			inaPathElement.putString("Hierarchy", selectHierarchyName);
		}
		oFF.QInARepoUtils.extendStructureWithTagging(exporter, dimElement, inaPathElement);
	}
	if (sortingOp.usedInRanking())
	{
		inaStructure.putBoolean("SortOperationUsedInRanking", true);
	}
};
oFF.QInARepoSortOperation.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.GENERIC_SORTING;
};
oFF.QInARepoSortOperation.prototype.getCustomSortOrder = function(inaStructure)
{
	let customOrderList = inaStructure.getListByKey("CustomSort");
	if (oFF.notNull(customOrderList) && customOrderList.hasElements())
	{
		return oFF.PrUtils.asListOfString(customOrderList);
	}
	return null;
};
oFF.QInARepoSortOperation.prototype.getCustomSortPosition = function(inaStructure)
{
	let customSortPosition = inaStructure.getStringByKey("CustomSortPosition");
	if (oFF.notNull(customSortPosition))
	{
		return oFF.CustomSortPosition.lookup(customSortPosition);
	}
	return null;
};
oFF.QInARepoSortOperation.prototype.getRequestLanguage = function(queryModel)
{
	let queryManagerBase = queryModel.getQueryManagerBase();
	let language = queryManagerBase.getConnection().getSystemDescription().getLanguage();
	if (oFF.XStringUtils.isNullOrEmpty(language))
	{
		let userProfile = queryManagerBase.getProcess().getUserProfile();
		if (oFF.notNull(userProfile))
		{
			language = userProfile.getDataAccessLanguage();
		}
	}
	return language;
};
oFF.QInARepoSortOperation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let parent = parentComponent;
	let sortingManager = null;
	if (parent.getOlapComponentType() === oFF.OlapComponentType.COMPONENT_LIST)
	{
		parent = parent.getParent();
	}
	if (parent.getOlapComponentType() === oFF.OlapComponentType.SORT_MANAGER)
	{
		sortingManager = parent;
	}
	let sortingOp = null;
	if (oFF.notNull(sortingManager))
	{
		let queryModel = context.getQueryModel();
		let modelCapabilities = queryModel.getModelCapabilities();
		let inaSortType = inaStructure.getStringByKey("SortType");
		let sortType = oFF.QInAConverter.lookupSortType(inaSortType);
		if (sortType === oFF.SortType.FIELD)
		{
			sortingOp = this.importFieldSorting(inaStructure, sortingManager, queryModel);
		}
		else if (sortType === oFF.SortType.MEASURE)
		{
			sortingOp = this.importMeasureSorting(inaStructure, sortingManager, queryModel);
		}
		else if (sortType === oFF.SortType.DATA_CELL_VALUE || sortType === oFF.SortType.COMPLEX && (modelCapabilities.supportsComplexSorting() || modelCapabilities.supportsDataCellSorting()))
		{
			sortingOp = this.importPathSorting(importer, inaStructure, context, sortingManager, queryModel, sortType);
		}
		else
		{
			sortingOp = this.importDimensionSorting(importer, inaStructure, sortingManager, queryModel, sortType);
		}
		if (oFF.notNull(sortingOp))
		{
			this.importGenericSorting(importer, inaStructure, sortingOp, queryModel);
		}
	}
	return sortingOp;
};
oFF.QInARepoSortOperation.prototype.importDimensionSorting = function(importer, inaStructure, sortingManager, queryModel, sortType)
{
	let dimensionName = inaStructure.getStringByKey("Dimension");
	let modelCapabilities = queryModel.getModelCapabilities();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		let dimension = null;
		let skipUnusedDimensionSort = queryModel.skipSerializationOfUnusedDimensionAndSort() && (importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS);
		if (skipUnusedDimensionSort)
		{
			let loadedDimension = oFF.XCollectionUtils.findFirst(queryModel.getLoadedDimensions(), (dim) => {
				return oFF.XString.isEqual(dim.getName(), dimensionName);
			});
			if (oFF.notNull(loadedDimension) && (loadedDimension.getAxisType() === oFF.AxisType.ROWS || loadedDimension.getAxisType() === oFF.AxisType.COLUMNS))
			{
				dimension = loadedDimension;
			}
		}
		else
		{
			dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensionName);
		}
		if (oFF.notNull(dimension) && modelCapabilities.supportsDimensionSorting(dimension, sortType))
		{
			let dimensionSorting = sortingManager.newDimensionSorting(dimension);
			if (oFF.isNull(dimensionSorting))
			{
				return null;
			}
			if (sortType === oFF.SortType.FILTER)
			{
				dimensionSorting.setSortByFilter();
			}
			else if (sortType === oFF.SortType.MEMBER_KEY)
			{
				dimensionSorting.setSortByKey();
				dimensionSorting.setCustomSort(this.getCustomSortOrder(inaStructure));
				dimensionSorting.setCustomSortPosition(this.getCustomSortPosition(inaStructure));
			}
			else if (sortType === oFF.SortType.MEMBER_TEXT)
			{
				dimensionSorting.setSortByText();
			}
			else if (sortType === oFF.SortType.HIERARCHY)
			{
				dimensionSorting.setSortByHierarchy();
			}
			return dimensionSorting;
		}
	}
	return null;
};
oFF.QInARepoSortOperation.prototype.importFieldSorting = function(inaStructure, sortingManager, queryModel)
{
	let fieldSorting = null;
	let fieldName = inaStructure.getStringByKey("FieldName");
	if (oFF.notNull(fieldName))
	{
		let field = queryModel.getFieldByName(fieldName);
		let modelCapabilities = queryModel.getModelCapabilities();
		if (oFF.notNull(field) && modelCapabilities.supportsFieldSorting(field))
		{
			fieldSorting = sortingManager.newFieldSorting(field);
			fieldSorting.setCustomSort(this.getCustomSortOrder(inaStructure));
			fieldSorting.setCustomSortPosition(this.getCustomSortPosition(inaStructure));
		}
	}
	return fieldSorting;
};
oFF.QInARepoSortOperation.prototype.importGenericSorting = function(importer, inaStructure, sortingOp, queryModel)
{
	let inaDirection = inaStructure.getStringByKey("Direction");
	if (oFF.notNull(inaDirection))
	{
		let sortDirection = oFF.QInAConverter.lookupSortDirection2(inaDirection);
		if (oFF.notNull(sortDirection))
		{
			sortingOp.setDirection(sortDirection);
		}
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("PreserveGrouping"))
	{
		if (sortingOp.supportsPreserveGrouping() && sortingOp.supportsBreakGrouping())
		{
			sortingOp.setPreserveGrouping(inaStructure.getBooleanByKeyExt("PreserveGrouping", false));
		}
	}
	if (sortingOp.supportsDimension())
	{
		let dimName = inaStructure.getStringByKey("Dimension");
		if (oFF.isNull(dimName))
		{
			sortingOp.setDimension(null);
		}
		else
		{
			sortingOp.setDimension(queryModel.getDimensionByNameFromExistingMetadata(dimName));
		}
	}
	if (sortingOp.getModelCapabilities().supportsLocaleSorting())
	{
		let inaCollator = inaStructure.getStructureByKey("Collator");
		if (oFF.notNull(inaCollator))
		{
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaCollator.containsKey("CaseSensitive"))
			{
				sortingOp.setIsCaseSensitive(inaCollator.getBooleanByKeyExt("CaseSensitive", false));
			}
			let localeOnCollator = inaCollator.getStringByKeyExt("Locale", null);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(localeOnCollator))
			{
				localeOnCollator = this.getRequestLanguage(queryModel);
			}
			sortingOp.setLocale(localeOnCollator);
		}
	}
	if (queryModel.getModelCapabilities().supportsPersistedInA() && importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE && !inaStructure.getBooleanByKeyExt("ExportInPersistedInA", false))
	{
		sortingOp.setCreatedFromMetadata(true);
	}
};
oFF.QInARepoSortOperation.prototype.importMeasureSorting = function(inaStructure, sortingManager, queryModel)
{
	let measureSorting = null;
	let modelCapabilities = queryModel.getModelCapabilities();
	let measureName = inaStructure.getStringByKey("MeasureName");
	if (oFF.notNull(measureName))
	{
		let measureStructure = queryModel.getMeasureDimension();
		let measure = measureStructure.getStructureMember(measureName);
		if (oFF.isNull(measure))
		{
			measure = queryModel.getOlapEnv().getClientQueryObjectManager().getStructuredMember(measureName, queryModel.getQueryManager().getClientQueryObjectStorageName(), true);
		}
		if (oFF.notNull(measure) && modelCapabilities.supportsMeasureSorting())
		{
			measureSorting = sortingManager.newMeasureSorting(measure);
		}
		let structureName = inaStructure.getStringByKey("StructureName");
		let structure = queryModel.getNonMeasureDimension();
		if (oFF.notNull(structureName) && oFF.notNull(structure) && oFF.notNull(measureSorting))
		{
			measureSorting.setSecondaryMeasure(structure.getStructureMember(structureName));
		}
	}
	return measureSorting;
};
oFF.QInARepoSortOperation.prototype.importPathSorting = function(importer, inaStructure, context, sortingManager, queryModel, sortType)
{
	let inaPath = inaStructure.getListByKey("SortTuple");
	if (inaPath.isEmpty())
	{
		return null;
	}
	let path = oFF.XList.create();
	for (let idxStruct = 0; idxStruct < inaPath.size(); idxStruct++)
	{
		let pathElement = inaPath.getStructureAt(idxStruct);
		let fieldName = pathElement.getStringByKey("FieldName");
		let inaValue = pathElement.getStringByKey("Value");
		if (oFF.isNull(fieldName))
		{
			return null;
		}
		let field = queryModel.getFieldByName(fieldName);
		if (oFF.isNull(field))
		{
			return null;
		}
		let inaHierarchyName = pathElement.getStringByKey("Hierarchy");
		let dimElement;
		if (pathElement.containsKey("MemberType"))
		{
			dimElement = oFF.QSelectValue._createDimensionElementWithMemberType(oFF.QInAConverter.lookupMemberType(pathElement.getIntegerByKey("MemberType")), field, inaHierarchyName, inaValue);
		}
		else
		{
			if (oFF.isNull(inaValue))
			{
				return null;
			}
			dimElement = oFF.QSelectValue._createDimensionElement2(context, field, inaHierarchyName, inaValue);
		}
		oFF.QInAImportUtil.importComponentTagging(importer, pathElement, dimElement);
		path.add(dimElement);
	}
	let complexSorting;
	if (sortType === oFF.SortType.DATA_CELL_VALUE)
	{
		complexSorting = sortingManager.newDataCellSorting(path);
	}
	else
	{
		complexSorting = sortingManager.newComplexSorting(path);
	}
	let usedInRanking = inaStructure.getBooleanByKeyExt("SortOperationUsedInRanking", false);
	if (usedInRanking)
	{
		complexSorting.setUsedInRanking(true);
	}
	return complexSorting;
};

oFF.QInARepoTotals = function() {};
oFF.QInARepoTotals.prototype = new oFF.QInARepository();
oFF.QInARepoTotals.prototype._ff_c = "QInARepoTotals";

oFF.QInARepoTotals.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let rc = modelComponent;
	if (!rc.supportsTotals())
	{
		return null;
	}
	let resultAlignment = null;
	if (rc.supportsResultAlignment())
	{
		if (rc.isTotalsAlignmentOnDefault())
		{
			inaStructure.putString("ResultAlignment", "Default");
		}
		else
		{
			resultAlignment = rc.getResultAlignment();
			inaStructure.putString("ResultAlignment", oFF.QInAConverter.lookupAlignmentInA(resultAlignment));
			let alignmentPriority = rc.getAlignmentPriority();
			if (alignmentPriority > -1)
			{
				inaStructure.putInteger("ResultAlignmentPriority", alignmentPriority);
			}
		}
	}
	if (resultAlignment === oFF.ResultAlignment.STRUCTURE)
	{
		let structure = inaStructure.putNewList("ResultStructure");
		let resultStructure = rc.getTotalsStructure();
		if (oFF.notNull(resultStructure))
		{
			for (let i = 0; i < resultStructure.size(); i++)
			{
				let item = resultStructure.get(i);
				let resultStructureLine = structure.addNewStructure();
				let element = item.getResultStructureElement();
				resultStructureLine.putString("Result", oFF.QInAConverter.lookupResultStructureElementInA(element));
				let visibility = item.getResultVisibility();
				resultStructureLine.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(visibility));
			}
		}
	}
	else if (rc.supportsResultVisibility())
	{
		if (rc.isTotalsVisibilityOnDefault())
		{
			inaStructure.putString("Visibility", "Default");
		}
		else
		{
			let inaVisibility = oFF.QInAConverter.lookupResultSetVisibilityInA(rc.getResultVisibility());
			inaStructure.putString("Visibility", inaVisibility);
			let settings = rc.getResultVisibilitySettings();
			if (oFF.notNull(settings))
			{
				let inaVisibilitySettings = inaStructure.putNewList("VisibilitySettings");
				while (settings.hasNext())
				{
					let triplet = settings.next();
					let inaTriplet = inaVisibilitySettings.addNewStructure();
					inaTriplet.putString("ResultAlignment", oFF.QInAConverter.lookupAlignmentInA(triplet.getAlignment()));
					inaTriplet.putString("Result", oFF.QInAConverter.lookupResultStructureElementInA(triplet.getElement()));
					inaTriplet.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(triplet.getVisibility()));
				}
				oFF.XObjectExt.release(settings);
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoTotals.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.TOTALS;
};
oFF.QInARepoTotals.prototype.getTagName = function()
{
	return "ResultStructureRepo";
};
oFF.QInARepoTotals.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let rc = modelComponent;
	if (rc.supportsTotals())
	{
		if (oFF.notNull(inaStructure))
		{
			let rsAlignment = null;
			if (rc.supportsResultAlignment())
			{
				let inaAlignment = inaStructure.getStringByKey("ResultAlignment");
				if (oFF.XString.isEqual("Default", inaAlignment))
				{
					rc.restoreTotalsAlignment(oFF.RestoreAction.DEFAULT_VALUE, false);
				}
				else
				{
					rsAlignment = oFF.QInAConverter.lookupAlignment(inaAlignment);
					rc.setResultAlignmentBase(rsAlignment, false);
					rc.setAlignmentPriority(inaStructure.getIntegerByKeyExt("ResultAlignmentPriority", -1));
				}
			}
			if (rsAlignment === oFF.ResultAlignment.STRUCTURE)
			{
				let inaResultStructure = inaStructure.getListByKey("ResultStructure");
				if (oFF.notNull(inaResultStructure))
				{
					let advancedResultStructure = rc.getAdvancedResultStructure();
					advancedResultStructure.clear();
					for (let i = 0; i < inaResultStructure.size(); i++)
					{
						let inaElement = inaResultStructure.getStructureAt(i);
						let inaResult = inaElement.getStringByKey("Result");
						let result = oFF.QInAConverter.lookupResultStructureElement(inaResult);
						let resultSetVisibility = oFF.QInAConverter.lookupResultSetVisibility(inaElement.getStringByKey("Visibility"));
						advancedResultStructure.addWithVisibility(result, resultSetVisibility);
					}
				}
			}
			else
			{
				if (rc.supportsResultVisibility())
				{
					let inaVisibility = inaStructure.getStringByKey("Visibility");
					if (oFF.XString.isEqual("Default", inaVisibility))
					{
						rc.restoreTotalsVisibility(oFF.RestoreAction.DEFAULT_VALUE, false);
					}
					else
					{
						let inaVisibilitySettings = inaStructure.getListByKey("VisibilitySettings");
						if (oFF.isNull(inaVisibilitySettings))
						{
							let visibility = oFF.QInAConverter.lookupResultSetVisibility(inaVisibility);
							rc.setResultVisibility(visibility);
						}
						else
						{
							for (let k = 0; k < inaVisibilitySettings.size(); k++)
							{
								let inaTriplet = inaVisibilitySettings.getStructureAt(k);
								let alignment = oFF.QInAConverter.lookupAlignment(inaTriplet.getStringByKey("ResultAlignment"));
								let element = oFF.QInAConverter.lookupResultStructureElement(inaTriplet.getStringByKey("Result"));
								let cvisibility = oFF.QInAConverter.lookupResultSetVisibility(inaTriplet.getStringByKey("Visibility"));
								rc.setResultVisibilityByElementAndAlignment(alignment, element, cvisibility);
							}
						}
					}
				}
			}
		}
	}
	return rc;
};

oFF.QInARepoTranslationsManager = function() {};
oFF.QInARepoTranslationsManager.prototype = new oFF.QInARepository();
oFF.QInARepoTranslationsManager.prototype._ff_c = "QInARepoTranslationsManager";

oFF.QInARepoTranslationsManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoTranslationsManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEASURE_TRANSLATIONS;
};
oFF.QInARepoTranslationsManager.prototype.getTagName = function()
{
	return "Translations";
};
oFF.QInARepoTranslationsManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	if (oFF.notNull(inaStructure))
	{
		if (inaStructure.containsKey("CurrencyTranslations"))
		{
			this.importCurrencyTranslationWithStructure(importer, inaStructure, queryModel, context);
		}
		else if (inaStructure.containsKey("UnitTranslations"))
		{
			this.importUnitTranslationWithStructure(importer, inaStructure, queryModel, context);
		}
	}
	return queryModel;
};
oFF.QInARepoTranslationsManager.prototype.importCurrencyTranslationWithStructure = function(importer, inaStructure, queryModel, context)
{
	let currencyTranslationManagerBase = queryModel.getCurrencyTranslationManagerBase();
	let inaList = inaStructure.getListByKey("CurrencyTranslations");
	if (oFF.notNull(inaList))
	{
		if (oFF.notNull(currencyTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
		{
			let size = inaList.size();
			for (let i = 0; i < size; i++)
			{
				let inaSpecificCurrencyTranslation = inaList.getStructureAt(i);
				let name = inaSpecificCurrencyTranslation.getStringByKey("Name");
				let description = inaSpecificCurrencyTranslation.getStringByKey("Description");
				let currencyTranslation = currencyTranslationManagerBase.getMeasureCurrencyTranslation(name);
				if (oFF.isNull(currencyTranslation))
				{
					currencyTranslation = currencyTranslationManagerBase.addNewMeasureCurrencyTranslationBase(name, description);
				}
				importer.importCurrencyTranslationElement(inaSpecificCurrencyTranslation, currencyTranslation, context);
			}
		}
	}
};
oFF.QInARepoTranslationsManager.prototype.importUnitTranslationWithStructure = function(importer, inaStructure, queryModel, context)
{
	let unitTranslationManagerBase = queryModel.getUnitTranslationManagerBase();
	let inaList = inaStructure.getListByKey("UnitTranslations");
	if (oFF.notNull(inaList))
	{
		if (oFF.notNull(unitTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
		{
			let size = inaList.size();
			for (let i = 0; i < size; i++)
			{
				let inaSpecificUnitTranslation = inaList.getStructureAt(i);
				let name = inaSpecificUnitTranslation.getStringByKey("Name");
				let description = inaSpecificUnitTranslation.getStringByKey("Description");
				let unitTranslation = unitTranslationManagerBase.getMeasureUnitTranslation(name);
				if (oFF.isNull(unitTranslation))
				{
					unitTranslation = unitTranslationManagerBase.addNewMeasureUnitTranslationBase(name, description);
				}
				importer.importUnitTranslationElement(inaSpecificUnitTranslation, unitTranslation, context);
			}
		}
	}
};

oFF.QInARepoUnitTranslationItem = function() {};
oFF.QInARepoUnitTranslationItem.prototype = new oFF.QInARepository();
oFF.QInARepoUnitTranslationItem.prototype._ff_c = "QInARepoUnitTranslationItem";

oFF.QInARepoUnitTranslationItem.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let unitTranslation = modelComponent;
	if (oFF.notNull(unitTranslation))
	{
		inaStructure.putBoolean("MetadataDefined", unitTranslation.isMetadataDefined());
		inaStructure.putString("Name", unitTranslation.getName());
		inaStructure.putStringNotNullAndNotEmpty("DimensionName", unitTranslation.getDimensionName());
		inaStructure.putStringNotNullAndNotEmpty("Description", unitTranslation.getText());
		inaStructure.putStringNotNullAndNotEmpty("RateLookUp", oFF.QInAConverter.lookupUtRateLookupInA(unitTranslation.getRateLookup()));
		inaStructure.putStringNotNullAndNotEmpty("ErrorHandling", oFF.QInAConverter.lookupUtErrorHandlingModeInA(unitTranslation.getErrorHandling()));
		this.exportTargetUnit(inaStructure, unitTranslation.getTargetUnit());
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoUnitTranslationItem.prototype.exportTargetUnit = function(inaStructure, targetUnit)
{
	if (oFF.notNull(targetUnit))
	{
		if (targetUnit.isFixed())
		{
			inaStructure.putNewStructure("TargetUnit").putString("Fixed", targetUnit.getFixedValue().getStringRepresentation());
		}
		else if (targetUnit.isFieldBased())
		{
			inaStructure.putNewStructure("TargetUnit").putString("DimensionAttribute", targetUnit.getFieldName());
		}
		else if (targetUnit.isVariableBased())
		{
			inaStructure.putNewStructure("TargetUnit").putString("Variable", targetUnit.getVariableName());
		}
	}
};
oFF.QInARepoUnitTranslationItem.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIT_TRANSLATION_ITEM;
};
oFF.QInARepoUnitTranslationItem.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let unitTranslation = modelComponent;
	if (oFF.notNull(unitTranslation) && oFF.XCollectionUtils.hasElements(inaStructure))
	{
		unitTranslation.setMetadataDefined(inaStructure.getBooleanByKey("MetadataDefined"));
		unitTranslation.setDimensionName(inaStructure.getStringByKey("DimensionName"));
		unitTranslation.setRateLookup(oFF.QInAConverter.lookupUtRateLookup(inaStructure.getStringByKey("RateLookUp")));
		unitTranslation.setErrorHandling(oFF.QInAConverter.lookupUtErrorHandlingMode(inaStructure.getStringByKey("ErrorHandling")));
		this.importUnitData(unitTranslation.getTargetUnit(), inaStructure.getStructureByKey("TargetUnit"));
	}
	return modelComponent;
};
oFF.QInARepoUnitTranslationItem.prototype.importUnitData = function(unitLookupValue, unitStructure)
{
	if (oFF.notNull(unitLookupValue) && oFF.notNull(unitStructure))
	{
		if (unitStructure.containsKey("Fixed"))
		{
			unitLookupValue.setFixedValue(oFF.XStringValue.create(unitStructure.getStringByKey("Fixed")));
		}
		else if (unitStructure.containsKey("DimensionAttribute"))
		{
			unitLookupValue.setFieldName(unitStructure.getStringByKey("DimensionAttribute"));
		}
		else if (unitStructure.containsKey("Variable"))
		{
			unitLookupValue.setVariableName(unitStructure.getStringByKey("Variable"));
		}
	}
};

oFF.QInARepoUnitTranslationManager = function() {};
oFF.QInARepoUnitTranslationManager.prototype = new oFF.QInARepository();
oFF.QInARepoUnitTranslationManager.prototype._ff_c = "QInARepoUnitTranslationManager";

oFF.QInARepoUnitTranslationManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaUnitTranslationsList = null;
	let unitTranslationManager = modelComponent;
	let specificUnitTranslations = unitTranslationManager.getMeasureUnitTranslations();
	if (oFF.XCollectionUtils.hasElements(specificUnitTranslations))
	{
		inaUnitTranslationsList = oFF.PrFactory.createList();
		let size = specificUnitTranslations.size();
		for (let i = 0; i < size; i++)
		{
			let specificTranslation = specificUnitTranslations.get(i);
			exporter.exportUnitTranslationElement(specificTranslation, inaUnitTranslationsList.addNewStructure());
		}
	}
	return inaUnitTranslationsList;
};
oFF.QInARepoUnitTranslationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
	inaStructure.put("Elements", inaList);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoUnitTranslationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER;
};
oFF.QInARepoUnitTranslationManager.prototype.getTagName = function()
{
	return "UnitTranslations";
};
oFF.QInARepoUnitTranslationManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let unitTranslationManagerBase = context.getQueryModel().getUnitTranslationManager();
	if (oFF.notNull(unitTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
	{
		let size = inaList.size();
		for (let i = 0; i < size; i++)
		{
			let inaUnitTranslation = inaList.getStructureAt(i);
			let name = inaUnitTranslation.getStringByKey("Name");
			let description = inaUnitTranslation.getStringByKey("Description");
			let unitTranslation = unitTranslationManagerBase.getMeasureUnitTranslation(name);
			if (oFF.isNull(unitTranslation))
			{
				unitTranslation = unitTranslationManagerBase.addNewMeasureUnitTranslationBase(name, description);
			}
			importer.importUnitTranslationElement(inaUnitTranslation, unitTranslation, context);
		}
	}
	return unitTranslationManagerBase;
};
oFF.QInARepoUnitTranslationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let inaList = inaStructure.getListByKey("Elements");
		this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
	}
	return modelComponent;
};

oFF.QInARepoUniversalDisplayHierarchies = function() {};
oFF.QInARepoUniversalDisplayHierarchies.prototype = new oFF.QInARepository();
oFF.QInARepoUniversalDisplayHierarchies.prototype._ff_c = "QInARepoUniversalDisplayHierarchies";

oFF.QInARepoUniversalDisplayHierarchies.assignAxesToHierarchies = function(universalDisplayHierarchies)
{
	let queryModel = universalDisplayHierarchies.getQueryModel();
	let hierarchies = universalDisplayHierarchies.getHierarchies();
	let assignedAxisTypes = oFF.XList.create();
	let size = hierarchies.size();
	for (let i = 0; i < size; i++)
	{
		let udh = hierarchies.get(i);
		if (udh.getHierarchyDedicatedAxis() !== null)
		{
			assignedAxisTypes.add(udh.getHierarchyDedicatedAxis().getType());
			continue;
		}
		let axis = oFF.QInARepoUniversalDisplayHierarchies.getAxisForDimensionList(udh.getDimensionNames(), queryModel);
		if (oFF.notNull(axis) && !assignedAxisTypes.contains(axis.getType()))
		{
			udh.setAxis(axis);
			assignedAxisTypes.add(axis.getType());
		}
	}
	for (let k = 0; k < size; k++)
	{
		let hierarchy = hierarchies.get(k);
		if (hierarchy.getHierarchyDedicatedAxis() === null)
		{
			hierarchy.setAxis(assignedAxisTypes.contains(oFF.AxisType.ROWS) ? queryModel.getColumnsAxis() : queryModel.getRowsAxis());
		}
	}
};
oFF.QInARepoUniversalDisplayHierarchies.getAxisForDimensionList = function(dimensions, queryModel)
{
	if (oFF.notNull(dimensions))
	{
		for (let i = 0; i < dimensions.size(); i++)
		{
			let dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensions.get(i));
			if (oFF.notNull(dimension))
			{
				let axisType = dimension.getAxisType();
				if (axisType === oFF.AxisType.ROWS || axisType === oFF.AxisType.COLUMNS)
				{
					return dimension.getAxis();
				}
			}
		}
	}
	return null;
};
oFF.QInARepoUniversalDisplayHierarchies.importHierarchy = function(importer, universalDisplayHierarchies, hierarchy)
{
	let dimensionNames = null;
	let initialDrillLevel = 0;
	let alignment = oFF.Alignment.DEFAULT_VALUE;
	let active = false;
	let name = hierarchy.getStringByKey("Name");
	let existingHierarchy = universalDisplayHierarchies.getByName(name);
	let udhKeyName = null;
	let requestUdhKey = false;
	if (oFF.notNull(existingHierarchy))
	{
		active = existingHierarchy.isActive();
		alignment = existingHierarchy.getAlignment();
		initialDrillLevel = existingHierarchy.getInitialDrillLevel();
		dimensionNames = existingHierarchy.getDimensionNames();
		udhKeyName = existingHierarchy.getUdhKeyName();
		requestUdhKey = existingHierarchy.isRequestUdhKey();
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.containsKey("Active"))
	{
		active = hierarchy.getBooleanByKeyExt("Active", false);
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.containsKey("LowerLevelNodeAlignment"))
	{
		alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(hierarchy.getStringByKey("LowerLevelNodeAlignment"));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.containsKey("InitialDrillLevel"))
	{
		initialDrillLevel = hierarchy.getIntegerByKey("InitialDrillLevel");
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.containsKey("DimensionNames"))
	{
		let hierarchyDimensions = hierarchy.getListByKey("DimensionNames");
		dimensionNames = oFF.PrUtils.asListOfString(hierarchyDimensions);
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.containsKey("RequestUdhKey"))
	{
		requestUdhKey = hierarchy.getBooleanByKeyExt("RequestUdhKey", requestUdhKey);
	}
	if (hierarchy.containsKey("Attributes"))
	{
		let udhAttributes = hierarchy.getListByKey("Attributes");
		let attrSize = oFF.XCollectionUtils.size(udhAttributes);
		for (let i = 0; i < attrSize; i++)
		{
			let attribute = udhAttributes.getStructureAt(i);
			if (oFF.XString.isEqual(attribute.getStringByKey("PresentationType"), "UDHKey"))
			{
				udhKeyName = attribute.getStringByKey("Name");
			}
		}
	}
	let customDimensions = hierarchy.getBooleanByKeyExt("CustomDimensions", false);
	if (importer.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || oFF.notNull(existingHierarchy))
	{
		oFF.XObjectExt.assertNotNull(dimensionNames);
		universalDisplayHierarchies.addHierarchy(name, dimensionNames, initialDrillLevel, alignment, active, null, customDimensions, udhKeyName, requestUdhKey);
	}
};
oFF.QInARepoUniversalDisplayHierarchies.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(universalDisplayHierarchies))
	{
		universalDisplayHierarchies.updateIncludedDimensions();
		let udhIterator = universalDisplayHierarchies.getChildrenIterator();
		if (udhIterator.hasNext())
		{
			let udhStructure = inaStructure.putNewList("UniversalDisplayHierarchies");
			while (udhIterator.hasNext())
			{
				let hierarchy = udhIterator.next();
				let shouldContinueExporting = exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.getModCounter() > 0;
				if (shouldContinueExporting)
				{
					this.exportHierarchy(exporter, udhStructure, hierarchy);
				}
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoUniversalDisplayHierarchies.prototype.exportHierarchy = function(exporter, udhStructure, hierarchy)
{
	let dimensionListValid = true;
	if (hierarchy.isActive() && !hierarchy.isDimensionListValid())
	{
		dimensionListValid = false;
		exporter.addError(oFF.ErrorCodes.INVALID_STATE, oFF.XStringUtils.concatenate3("Dimensions for UDH '", hierarchy.getName(), "' must be placed next to each other on the axis"));
	}
	let hierarchyStructure = udhStructure.addNewStructure();
	hierarchyStructure.putString("Name", hierarchy.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.hasPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_INITIAL_DRILL_LEVEL))
	{
		hierarchyStructure.putInteger("InitialDrillLevel", hierarchy.getInitialDrillLevel());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.hasPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_LOWER_LEVEL_NODE_ALIGNMENT))
	{
		hierarchyStructure.putString("LowerLevelNodeAlignment", hierarchy.getAlignment().getName());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.hasPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_ACTIVE))
	{
		hierarchyStructure.putBoolean("Active", hierarchy.isActive() && dimensionListValid);
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.hasPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_DIMENSION_NAMES))
	{
		hierarchyStructure.putNewList("DimensionNames").addAllStrings(hierarchy.getDimensionNames());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || hierarchy.hasPropertyChanged(oFF.QUniversalDisplayHierarchyProperties.QY_REQUEST_UDH_KEY))
	{
		hierarchyStructure.putBoolean("RequestUdhKey", hierarchy.isRequestUdhKey());
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchy.getUdhKeyName()))
	{
		let udhAttributeStructure = hierarchyStructure.putNewList("Attributes").addNewStructure();
		udhAttributeStructure.putString("Name", hierarchy.getUdhKeyName());
		udhAttributeStructure.putString("PresentationType", "UDHKey");
	}
	if (hierarchy.hasCustomDimensions())
	{
		hierarchyStructure.putBoolean("CustomDimensions", true);
	}
};
oFF.QInARepoUniversalDisplayHierarchies.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES;
};
oFF.QInARepoUniversalDisplayHierarchies.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(inaStructure))
	{
		let hierarchiesStructure = inaStructure.getByKey("UniversalDisplayHierarchies");
		if (oFF.notNull(hierarchiesStructure) && hierarchiesStructure.isList())
		{
			let hierarchies = hierarchiesStructure;
			let size = hierarchies.size();
			for (let i = 0; i < size; i++)
			{
				oFF.QInARepoUniversalDisplayHierarchies.importHierarchy(importer, universalDisplayHierarchies, hierarchies.getStructureAt(i));
			}
		}
	}
	oFF.QInARepoUniversalDisplayHierarchies.assignAxesToHierarchies(universalDisplayHierarchies);
	if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		universalDisplayHierarchies.updateIncludedDimensions();
	}
	return universalDisplayHierarchies;
};

oFF.QInARepoVarDimMember = function() {};
oFF.QInARepoVarDimMember.prototype = new oFF.QInARepository();
oFF.QInARepoVarDimMember.prototype._ff_c = "QInARepoVarDimMember";

oFF.QInARepoVarDimMember.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let memberVariable = modelComponent;
	inaStructure.putString("Name", memberVariable.getName());
	let exportRRIVariable = exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA && memberVariable.isRRIAffectedComponent();
	let inputEnabled = memberVariable.isInputEnabled() || exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE || exportRRIVariable;
	if (memberVariable.hasMemberFilter() && inputEnabled)
	{
		let memberSelection = memberVariable.getMemberFilter();
		let memberSelectionComponent = exporter.exportComponent(null, memberSelection, null, flags);
		if (oFF.notNull(memberSelectionComponent))
		{
			inaStructure.put("Selection", memberSelectionComponent);
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoVarDimMember.prototype.getComponentType = function()
{
	return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
};
oFF.QInARepoVarDimMember.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let memberVariable = modelComponent;
	let inaFilterElement = inaStructure.getStructureByKey("Selection");
	if (oFF.isNull(inaFilterElement))
	{
		memberVariable.setMemberFilter(null);
	}
	else
	{
		let filterElement = importer.importComponent(null, inaFilterElement, null, memberVariable, context);
		if (oFF.notNull(filterElement) && importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DELTA) && !oFF.XString.isEqual(memberVariable.getDimension().getName(), filterElement.getFieldMetadata().getDimensionMetadata().getName()))
		{
			memberVariable.setMemberFilter(oFF.XObjectExt.cloneIfNotNull(memberVariable.getDefaultMemberFilter()));
		}
		else
		{
			memberVariable.setMemberFilter(filterElement);
		}
	}
	return memberVariable;
};

oFF.QInARepoVarFunctional = function() {};
oFF.QInARepoVarFunctional.prototype = new oFF.QInARepository();
oFF.QInARepoVarFunctional.prototype._ff_c = "QInARepoVarFunctional";

oFF.QInARepoVarFunctional.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let funcVariable = modelComponent;
	inaStructure.putString("Name", funcVariable.getName());
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoVarFunctional.prototype.getComponentType = function()
{
	return oFF.VariableType.FUNCTIONAL_VARIABLE;
};
oFF.QInARepoVarFunctional.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return modelComponent;
};

oFF.QInARepoVarOptionList = function() {};
oFF.QInARepoVarOptionList.prototype = new oFF.QInARepository();
oFF.QInARepoVarOptionList.prototype._ff_c = "QInARepoVarOptionList";

oFF.QInARepoVarOptionList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variable = modelComponent;
	inaStructure.putString("Name", variable.getName());
	let exportRRIVariable = exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA && variable.isRRIAffectedComponent();
	let inputEnabled = variable.isInputEnabled() || exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE || exportRRIVariable;
	if (inputEnabled)
	{
		let inaVariableOptionValues = inaStructure.putNewList("OptionValues");
		if (variable.supportsMultipleValues())
		{
			let multiOptionNames = variable.getValues();
			let len = multiOptionNames.size();
			for (let c = 0; c < len; c++)
			{
				let optionName = multiOptionNames.get(c);
				inaVariableOptionValues.addString(optionName.getString());
			}
		}
		else
		{
			let currentOption = variable.getCurrentOption();
			if (oFF.notNull(currentOption))
			{
				inaVariableOptionValues.addString(currentOption.getName());
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoVarOptionList.prototype.getComponentType = function()
{
	return oFF.VariableType.OPTION_LIST_VARIABLE;
};
oFF.QInARepoVarOptionList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let optionListVariable = modelComponent;
	optionListVariable.clear();
	let inaOptionValues = inaStructure.getListByKey("OptionValues");
	if (oFF.notNull(inaOptionValues))
	{
		let currentOption;
		if (optionListVariable.supportsMultipleValues())
		{
			let len = inaOptionValues.size();
			for (let idxOption = 0; idxOption < len; idxOption++)
			{
				currentOption = inaOptionValues.getStringAt(idxOption);
				optionListVariable.addString(currentOption);
			}
		}
		else if (inaOptionValues.size() === 1)
		{
			currentOption = inaOptionValues.getStringAt(0);
			optionListVariable.setString(currentOption);
		}
	}
	return optionListVariable;
};

oFF.QInARepoVarSimpleType = function() {};
oFF.QInARepoVarSimpleType.prototype = new oFF.QInARepository();
oFF.QInARepoVarSimpleType.prototype._ff_c = "QInARepoVarSimpleType";

oFF.QInARepoVarSimpleType.prototype.addNumericValue = function(exporter, simpleValues, value, valueType)
{
	if (oFF.XValueType.getValueTypeOfObject(value) === oFF.XValueType.DECIMAL_FLOAT && !value.mayLoosePrecision())
	{
		simpleValues.addString(oFF.XValueUtil.getString(value));
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		simpleValues.addDouble(oFF.XValueUtil.getDouble(value, true, false));
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		simpleValues.addLong(oFF.XValueUtil.getLong(value, true, false));
	}
	else if (valueType === oFF.XValueType.INTEGER)
	{
		simpleValues.addInteger(oFF.XValueUtil.getInteger(value, true, false));
	}
};
oFF.QInARepoVarSimpleType.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variable = modelComponent;
	inaStructure.putString("Name", variable.getName());
	let valueType = variable.getValueType();
	let simpleValues;
	if (valueType === oFF.XValueType.STRING || valueType === oFF.XValueType.DATE || valueType === oFF.XValueType.TIME || valueType === oFF.XValueType.DATE_TIME || valueType === oFF.XValueType.BOOLEAN || valueType.isSpatial())
	{
		simpleValues = inaStructure.putNewList("SimpleStringValues");
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT || valueType === oFF.XValueType.LONG || valueType === oFF.XValueType.INTEGER)
	{
		simpleValues = inaStructure.putNewList("SimpleNumericValues");
	}
	else
	{
		exporter.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate3("SimpleTypeVariable '", variable.getName(), "' not exported"));
		return null;
	}
	let exportRRIVariable = exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY_DELTA && variable.isRRIAffectedComponent();
	let inputEnabled = variable.isInputEnabled() || exporter.getOriginalMode() === oFF.QModelFormat.INA_CLONE || exportRRIVariable;
	if (inputEnabled)
	{
		if (variable.supportsMultipleValues())
		{
			this.exportMultipleValues(exporter, variable, valueType, simpleValues);
		}
		else
		{
			this.exportSingleValue(exporter, variable, valueType, simpleValues);
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoVarSimpleType.prototype.exportMultipleValues = function(exporter, variable, valueType, simpleValues)
{
	let multiValues = variable.getValues();
	let size = multiValues.size();
	for (let idx = 0; idx < size; idx++)
	{
		if (valueType.isNumber())
		{
			this.addNumericValue(exporter, simpleValues, multiValues.get(idx), valueType);
		}
		else if (valueType === oFF.XValueType.STRING)
		{
			let stringValue = multiValues.get(idx);
			simpleValues.addString(stringValue.getString());
		}
		else if (valueType === oFF.XValueType.DATE || valueType === oFF.XValueType.TIME || valueType === oFF.XValueType.DATE_TIME)
		{
			let dateValue = multiValues.get(idx);
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, dateValue));
		}
		else if (valueType === oFF.XValueType.BOOLEAN)
		{
			let booleanValue = multiValues.get(idx);
			simpleValues.addString(oFF.XBoolean.convertToString(booleanValue.getBoolean()));
		}
		else if (valueType.isSpatial())
		{
			let spatialValue = multiValues.get(idx);
			simpleValues.addString(spatialValue.toWKT());
		}
	}
};
oFF.QInARepoVarSimpleType.prototype.exportSingleValue = function(exporter, variable, valueType, simpleValues)
{
	let repoFormatAndNoValue = !variable.hasValue() && (exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY || variable.getQueryModel() !== null && variable.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.VIRTUAL_INA));
	if (valueType.isNumber())
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			this.addNumericValue(exporter, simpleValues, variable.getValue(), valueType);
		}
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			simpleValues.addBoolean(variable.getBoolean());
		}
	}
	else
	{
		if (variable.hasValue())
		{
			if (valueType === oFF.XValueType.STRING || valueType.isSpatial())
			{
				simpleValues.addString(variable.getString());
			}
			else if (valueType === oFF.XValueType.DATE)
			{
				simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getDate()));
			}
			else if (valueType === oFF.XValueType.TIME)
			{
				simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getTime()));
			}
			else if (valueType === oFF.XValueType.DATE_TIME)
			{
				simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getDateTime()));
			}
		}
	}
};
oFF.QInARepoVarSimpleType.prototype.getComponentType = function()
{
	return oFF.VariableType.SIMPLE_TYPE_VARIABLE;
};
oFF.QInARepoVarSimpleType.prototype.getFirstValueAsString = function(values)
{
	let element = values.get(0);
	if (oFF.notNull(element) && element.isString())
	{
		return element.getString();
	}
	return null;
};
oFF.QInARepoVarSimpleType.prototype.importBooleanValues = function(inaStructure, simpleTypeVariable)
{
	let inaSimpleBooleanValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleBooleanValues))
	{
		let sizeValue = inaSimpleBooleanValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				simpleTypeVariable.addBoolean(inaSimpleBooleanValues.getBooleanAt(idxValue));
			}
		}
		else if (sizeValue === 1)
		{
			let element = inaSimpleBooleanValues.get(0);
			if (oFF.notNull(element) && element.isBoolean())
			{
				simpleTypeVariable.setBoolean(element.asBoolean().getBoolean());
			}
		}
	}
};
oFF.QInARepoVarSimpleType.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let simpleTypeVariable = modelComponent;
	simpleTypeVariable.clear();
	let valueType = simpleTypeVariable.getValueType();
	if (valueType.isNumber())
	{
		this.importNumericValues(importer, inaStructure, simpleTypeVariable, valueType);
	}
	else if (valueType.isString())
	{
		this.importStringValues(inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		this.importDateValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.TIME)
	{
		this.importTimeValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.DATE_TIME)
	{
		this.importDateTimeValues(importer, inaStructure, simpleTypeVariable);
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		this.importBooleanValues(inaStructure, simpleTypeVariable);
	}
	return simpleTypeVariable;
};
oFF.QInARepoVarSimpleType.prototype.importDateTimeValues = function(importer, inaStructure, simpleTypeVariable)
{
	let inaSimpleDateTimeValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleDateTimeValues))
	{
		let sizeValue = inaSimpleDateTimeValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let dateTimeValue = inaSimpleDateTimeValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTimeValue))
				{
					simpleTypeVariable.addDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(dateTimeValue, importer.m_capabilities.supportsSapDate()));
				}
			}
		}
		else if (sizeValue === 1)
		{
			let dateTimeValue2 = this.getFirstValueAsString(inaSimpleDateTimeValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTimeValue2))
			{
				simpleTypeVariable.setDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(dateTimeValue2, importer.m_capabilities.supportsSapDate()));
			}
		}
	}
};
oFF.QInARepoVarSimpleType.prototype.importDateValues = function(importer, inaStructure, simpleTypeVariable)
{
	let inaSimpleDateValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleDateValues))
	{
		let sizeValue = inaSimpleDateValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let dateValue = inaSimpleDateValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dateValue))
				{
					simpleTypeVariable.addDate(oFF.QInARepoUtils.createDate(dateValue));
				}
			}
		}
		else if (sizeValue === 1)
		{
			let dateValue2 = this.getFirstValueAsString(inaSimpleDateValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateValue2))
			{
				simpleTypeVariable.setDate(oFF.QInARepoUtils.createDate(dateValue2));
			}
		}
	}
};
oFF.QInARepoVarSimpleType.prototype.importNumericValues = function(importer, inaStructure, simpleTypeVariable, valueType)
{
	let inaSimpleNumericValues = inaStructure.getListByKey("SimpleNumericValues");
	if (oFF.notNull(inaSimpleNumericValues))
	{
		let sizeValue = inaSimpleNumericValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let elementType = inaSimpleNumericValues.getElementTypeAt(idxValue);
				if (elementType === oFF.PrElementType.STRING)
				{
					simpleTypeVariable.addDeclFloat(oFF.XDecFloatByString.create(inaSimpleNumericValues.getStringAt(idxValue)));
				}
				else if (valueType === oFF.XValueType.INTEGER)
				{
					let integerValue = inaSimpleNumericValues.getIntegerAt(idxValue);
					simpleTypeVariable.addInteger(integerValue);
				}
				else if (valueType === oFF.XValueType.DOUBLE)
				{
					let doubleValue = inaSimpleNumericValues.getDoubleAt(idxValue);
					simpleTypeVariable.addDouble(doubleValue);
				}
				else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					let decimalFloat = oFF.XDecFloatByDouble.create(inaSimpleNumericValues.getDoubleAt(idxValue));
					simpleTypeVariable.addDeclFloat(decimalFloat);
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					let longValue = inaSimpleNumericValues.getLongAt(idxValue);
					simpleTypeVariable.addLong(longValue);
				}
			}
		}
		else if (sizeValue === 1)
		{
			let elementType0 = inaSimpleNumericValues.getElementTypeAt(0);
			if (elementType0.isNumber())
			{
				if (valueType === oFF.XValueType.INTEGER)
				{
					simpleTypeVariable.setInteger(inaSimpleNumericValues.getIntegerAt(0));
				}
				else if (valueType === oFF.XValueType.DOUBLE)
				{
					simpleTypeVariable.setDouble(inaSimpleNumericValues.getDoubleAt(0));
				}
				else if (valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					simpleTypeVariable.setDecFloat(oFF.XDecFloatByDouble.create(inaSimpleNumericValues.getDoubleAt(0)));
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					simpleTypeVariable.setLong(inaSimpleNumericValues.getLongAt(0));
				}
			}
			else if (elementType0 === oFF.PrElementType.STRING)
			{
				simpleTypeVariable.setDecFloat(oFF.XDecFloatByString.create(inaSimpleNumericValues.getStringAt(0)));
			}
		}
	}
};
oFF.QInARepoVarSimpleType.prototype.importStringValues = function(inaStructure, simpleTypeVariable)
{
	let inaSimpleStringValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleStringValues))
	{
		let sizeValue = inaSimpleStringValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				simpleTypeVariable.addString(inaSimpleStringValues.getStringAt(idxValue));
			}
		}
		else if (sizeValue === 1)
		{
			let element = inaSimpleStringValues.get(0);
			if (oFF.notNull(element) && element.isString())
			{
				simpleTypeVariable.setString(element.getString());
			}
		}
	}
};
oFF.QInARepoVarSimpleType.prototype.importTimeValues = function(importer, inaStructure, simpleTypeVariable)
{
	let inaSimpleTimeValues = inaStructure.getListByKey("SimpleStringValues");
	if (oFF.notNull(inaSimpleTimeValues))
	{
		let sizeValue = inaSimpleTimeValues.size();
		if (simpleTypeVariable.supportsMultipleValues())
		{
			for (let idxValue = 0; idxValue < sizeValue; idxValue++)
			{
				let timeValue = inaSimpleTimeValues.getStringAt(idxValue);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(timeValue))
				{
					simpleTypeVariable.addTime(oFF.XTime.createTimeFromStringWithFlag(timeValue, importer.m_capabilities.supportsSapDate()));
				}
			}
		}
		else if (sizeValue === 1)
		{
			let timeValue2 = this.getFirstValueAsString(inaSimpleTimeValues);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(timeValue2))
			{
				simpleTypeVariable.setTime(oFF.XTime.createTimeFromStringWithFlag(timeValue2, importer.m_capabilities.supportsSapDate()));
			}
		}
	}
};

oFF.QInaRepoCustomHierarchyDefinition = function() {};
oFF.QInaRepoCustomHierarchyDefinition.prototype = new oFF.QInARepository();
oFF.QInaRepoCustomHierarchyDefinition.prototype._ff_c = "QInaRepoCustomHierarchyDefinition";

oFF.QInaRepoCustomHierarchyDefinition.prototype.addHierarchyElementToStructure = function(element, structure, parentIndex, dimensionName)
{
	let nodeIds = structure.getListByKey("NodeId");
	let nodeId = nodeIds.size();
	nodeIds.addInteger(nodeId);
	structure.getListByKey("NodeName").addString(element.getName());
	structure.getListByKey("ParentId").addInteger(parentIndex);
	if (element.isMemberElement())
	{
		structure.getListByKey("Description").addString("");
		structure.getListByKey("NodeType").addString(element.isNode() ? dimensionName : "");
	}
	else
	{
		structure.getListByKey("Description").addString(element.getName());
		structure.getListByKey("NodeType").addString("1HIER_NODE_SIMPLE");
	}
	if (element.isNode())
	{
		let childNodes = element.getChildNodes();
		let size = childNodes.size();
		for (let i = 0; i < size; i++)
		{
			this.addHierarchyElementToStructure(childNodes.get(i), structure, nodeId, dimensionName);
		}
	}
};
oFF.QInaRepoCustomHierarchyDefinition.prototype.addHierarchyNodesFromStructure = function(hierarchyDefinition, nodes)
{
	let nodeIds = oFF.PrUtils.getListProperty(nodes, "NodeId");
	let nodeParentIds = oFF.PrUtils.getListProperty(nodes, "ParentId");
	let nodeNames = oFF.PrUtils.getListProperty(nodes, "NodeName");
	let nodeTypes = oFF.PrUtils.getListProperty(nodes, "NodeType");
	let size = oFF.PrUtils.getListSize(nodeIds, 0);
	if (oFF.PrUtils.isListEmpty(nodeIds) || oFF.PrUtils.isListEmpty(nodeParentIds) || oFF.PrUtils.isListEmpty(nodeNames) || oFF.PrUtils.isListEmpty(nodeTypes) || nodeParentIds.size() !== size || nodeNames.size() !== size || nodeTypes.size() !== size)
	{
		return;
	}
	let nodeMap = oFF.XSimpleMap.create();
	for (let i = 0; i < size; i++)
	{
		let nodeId = nodeIds.getIntegerAt(i);
		let nodeName = nodeNames.getStringAt(i);
		let nodeType = nodeTypes.getStringAt(i);
		let nodeParentId = nodeParentIds.getIntegerAt(i);
		let parent = nodeParentId === -1 ? hierarchyDefinition : nodeMap.getByKey(oFF.XIntegerValue.create(nodeParentId));
		if (oFF.notNull(parent))
		{
			if (oFF.XString.isEqual(nodeType, "1HIER_NODE_SIMPLE"))
			{
				nodeMap.put(oFF.XIntegerValue.create(nodeId), parent.addTextNode(nodeName));
			}
			else
			{
				parent.addMemberNode(nodeName);
			}
		}
	}
	oFF.XObjectExt.release(nodeMap);
};
oFF.QInaRepoCustomHierarchyDefinition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let customHierarchyDefinition = modelComponent;
	let inaCustomHierarchyDimension = oFF.PrFactory.createStructure();
	inaCustomHierarchyDimension.putString("Name", customHierarchyDefinition.getDimensionName());
	inaCustomHierarchyDimension.putString("System", customHierarchyDefinition.getSystemName());
	inaCustomHierarchyDimension.putString("DataSource", customHierarchyDefinition.getDataSourceName());
	let inaCustomHierarchy = oFF.PrFactory.createStructure();
	this.exportCustomHierarchy(customHierarchyDefinition, inaCustomHierarchy);
	inaCustomHierarchyDimension.put("Hierarchy", inaCustomHierarchy);
	let inaDefStructure = oFF.PrFactory.createStructure();
	let inaDimensionsList = inaDefStructure.putNewList("Dimensions");
	inaDimensionsList.add(inaCustomHierarchyDimension);
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaDefStructure, flags);
};
oFF.QInaRepoCustomHierarchyDefinition.prototype.exportCustomHierarchy = function(customHierarchyDefinition, inaCustomHierarchy)
{
	let emptyString = "";
	let name = customHierarchyDefinition.getName();
	let customHierarchyDesc = customHierarchyDefinition.getDescription();
	inaCustomHierarchy.putString("Name", oFF.XStringUtils.isNotNullAndNotEmpty(name) ? name : emptyString);
	inaCustomHierarchy.putString("Version", emptyString);
	inaCustomHierarchy.putString("DueDate", emptyString);
	inaCustomHierarchy.putString("Description", oFF.notNull(customHierarchyDesc) ? customHierarchyDesc : emptyString);
	inaCustomHierarchy.putBoolean("IsTransient", true);
	inaCustomHierarchy.putBoolean("NoRestNodes", true);
	inaCustomHierarchy.put("Nodes", this.getHierarchyNodesAsStructure(customHierarchyDefinition));
};
oFF.QInaRepoCustomHierarchyDefinition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION;
};
oFF.QInaRepoCustomHierarchyDefinition.prototype.getHierarchyNodesAsStructure = function(customHierarchyDefinition)
{
	let structure = oFF.PrFactory.createStructure();
	structure.putNewList("NodeId");
	structure.putNewList("NodeName");
	structure.putNewList("Description");
	structure.putNewList("NodeType");
	structure.putNewList("ParentId");
	let nodes = customHierarchyDefinition.getChildNodes();
	let size = nodes.size();
	for (let i = 0; i < size; i++)
	{
		this.addHierarchyElementToStructure(nodes.get(i), structure, -1, customHierarchyDefinition.getDimensionName());
	}
	return structure;
};
oFF.QInaRepoCustomHierarchyDefinition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let hierarchyDefinition = null;
	let inaDimensions = oFF.PrUtils.getListProperty(inaStructure, "Dimensions");
	let inaDimension = oFF.PrUtils.getStructureElement(inaDimensions, 0);
	if (oFF.notNull(inaDimension))
	{
		let system = inaDimension.getStringByKey("System");
		let dataSource = inaDimension.getStringByKey("DataSource");
		let dimensionName = inaDimension.getStringByKey("Name");
		let inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		if (oFF.notNull(inaHierarchy) && oFF.XStringUtils.isNotNullAndNotEmpty(system) && oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
		{
			let ignoreDatasource = true;
			let application = importer.getApplication();
			if (oFF.notNull(application))
			{
				let systemDescription = application.getSystemLandscape().getSystemDescription(system);
				ignoreDatasource = oFF.isNull(systemDescription) ? true : systemDescription.getSystemType().isTypeOf(oFF.SystemType.ABAP);
			}
			hierarchyDefinition = oFF.QCustomHierarchyDefinition.createByData(system, dataSource, dimensionName, inaHierarchy.getStringByKey("Description"), ignoreDatasource);
			hierarchyDefinition.setName(inaHierarchy.getStringByKey("Name"));
			this.addHierarchyNodesFromStructure(hierarchyDefinition, inaHierarchy.getStructureByKey("Nodes"));
		}
	}
	return hierarchyDefinition;
};

oFF.QInARepoTotalsLegacy = function() {};
oFF.QInARepoTotalsLegacy.prototype = new oFF.QInARepository();
oFF.QInARepoTotalsLegacy.prototype._ff_c = "QInARepoTotalsLegacy";

oFF.QInARepoTotalsLegacy.prototype.exportComponentWithStructure = oFF.noSupport;
oFF.QInARepoTotalsLegacy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.TOTALS;
};
oFF.QInARepoTotalsLegacy.prototype.getResultStructure = function(inaStructure)
{
	let inaResultStructure = inaStructure.getStructureByKey("ResultStructureBag");
	if (oFF.isNull(inaResultStructure))
	{
		inaResultStructure = inaStructure.getStructureByKey("DefaultResultStructure");
		if (oFF.isNull(inaResultStructure))
		{
			return inaStructure;
		}
	}
	return inaResultStructure;
};
oFF.QInARepoTotalsLegacy.prototype.getTagName = function()
{
	return "ResultStructureBag";
};
oFF.QInARepoTotalsLegacy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
	{
		let controller = modelComponent;
		if (controller.supportsResultVisibility())
		{
			let inaResultStructure = this.getResultStructure(inaStructure);
			let alignment = this.importResultAlignment(controller, inaResultStructure);
			controller.restoreTotalsVisibility(oFF.RestoreAction.DEFAULT_VALUE, false);
			let inaInnerResultStructure = inaResultStructure.getListByKey("ResultStructure");
			if (oFF.notNull(inaInnerResultStructure))
			{
				let flexibleResultStructure;
				if (controller.supportsAdvancedResultStructure() && alignment === oFF.ResultAlignment.STRUCTURE)
				{
					flexibleResultStructure = controller.getAdvancedResultStructure();
					flexibleResultStructure.clear();
					if (oFF.isNull(alignment))
					{
						controller.setResultAlignmentBase(oFF.ResultAlignment.STRUCTURE, true);
					}
				}
				else
				{
					flexibleResultStructure = null;
				}
				let size = inaInnerResultStructure.size();
				for (let i = 0; i < size; i++)
				{
					let resultStructureItem = inaInnerResultStructure.getStructureAt(i);
					this.importResultStructureItem(resultStructureItem, controller, flexibleResultStructure);
				}
			}
		}
	}
	return null;
};
oFF.QInARepoTotalsLegacy.prototype.importResultAlignment = function(controller, inaResultStructure)
{
	if (controller.supportsResultAlignment())
	{
		controller.restoreTotalsAlignment(oFF.RestoreAction.DEFAULT_VALUE, false);
		let inaResultAlignment = inaResultStructure.getStringByKey("ResultAlignment");
		if (oFF.XStringUtils.isNullOrEmpty(inaResultAlignment))
		{
			return null;
		}
		let alignment = oFF.QInAConverter.lookupAlignment(inaResultAlignment);
		controller.setResultAlignmentBase(alignment, false);
		return alignment;
	}
	return null;
};
oFF.QInARepoTotalsLegacy.prototype.importResultStructureItem = function(resultStructureItem, controller, flexibleResultStructure)
{
	let resultStructureElement = resultStructureItem.getStringByKey("Result");
	let element;
	if (oFF.XString.isEqual(resultStructureElement, "Members"))
	{
		element = oFF.ResultStructureElement.MEMBERS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "Total"))
	{
		element = oFF.ResultStructureElement.TOTAL;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "TotalIncludedMembers"))
	{
		element = oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "TotalRemainingMembers"))
	{
		element = oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS;
	}
	else
	{
		return;
	}
	let inaVisibility = resultStructureItem.getStringByKey("Visibility");
	let visibility = oFF.QInAConverter.lookupResultSetVisibility(inaVisibility);
	if (oFF.isNull(flexibleResultStructure))
	{
		controller.setResultVisibilityByElement(element, visibility);
	}
	else
	{
		flexibleResultStructure.addWithVisibility(element, visibility);
	}
};

oFF.QInARepoKpiDefinition = function() {};
oFF.QInARepoKpiDefinition.prototype = new oFF.QInARepository();
oFF.QInARepoKpiDefinition.prototype._ff_c = "QInARepoKpiDefinition";

oFF.QInARepoKpiDefinition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (oFF.notNull(modelComponent) && oFF.notNull(inaStructure))
	{
		let kpiDefinition = modelComponent;
		inaStructure.putStringNotNullAndNotEmpty("Title", kpiDefinition.getTitle());
		oFF.QInARepoVisualizationManager.exportStringOrVariable(kpiDefinition.getDimensionNameRaw(), inaStructure, "DimensionName", "DimensionNameVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(kpiDefinition.getDimensionTypeRaw(), inaStructure, "DimensionType", "DimensionTypeVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(kpiDefinition.getKpiMemberRaw(), inaStructure, "KpiMember", "KpiMemberVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(kpiDefinition.getTargetMemberRaw(), inaStructure, "TargetMember", "TargetMemberVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(kpiDefinition.getDeviationMemberRaw(), inaStructure, "DeviationMember", "DeviationMemberVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(kpiDefinition.getTrendMemberRaw(), inaStructure, "TrendMember", "TrendMemberVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(kpiDefinition.getExceptionMemberRaw(), inaStructure, "ExceptionMember", "ExceptionMemberVariable");
		oFF.QInARepoVisualizationManager.exportVariableHolder(exporter, kpiDefinition.getVisualizationVariableHolder(), inaStructure);
		oFF.QInARepoVisualizationManager.exportDataPointVariableContainers(exporter, kpiDefinition.getDatapointVariableContainers(), inaStructure);
		oFF.QInARepoVisualizationManager.exportSelectionPath(inaStructure.putNewList("Path"), kpiDefinition.getSelectionPath());
		oFF.QInARepoVisualizationManager.exportMemberRestriction(inaStructure.putNewList("MemberRestrictions"), kpiDefinition.getMemberRestrictions());
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoKpiDefinition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_KPI_DEFINITION;
};
oFF.QInARepoKpiDefinition.prototype.getTagName = function()
{
	return "KpiDefinition";
};
oFF.QInARepoKpiDefinition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure) && oFF.notNull(modelComponent) && modelComponent.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_KPI_DEFINITION)
	{
		let kpiDefinitionBase = modelComponent;
		kpiDefinitionBase.setTitle(inaStructure.getStringByKey("Title"));
		oFF.QInARepoVisualizationManager.importStringOrVariable(kpiDefinitionBase.getDimensionNameRaw(), inaStructure, "DimensionName", "DimensionNameVariable");
		oFF.QInARepoVisualizationManager.importConstantOrVariable(kpiDefinitionBase.getDimensionTypeRaw(), inaStructure, "DimensionType", "DimensionTypeVariable", (c) => {
			return oFF.XComponentType.lookupComponentType(c);
		});
		oFF.QInARepoVisualizationManager.importStringOrVariable(kpiDefinitionBase.getKpiMemberRaw(), inaStructure, "KpiMember", "KpiMemberVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(kpiDefinitionBase.getTargetMemberRaw(), inaStructure, "TargetMember", "TargetMemberVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(kpiDefinitionBase.getDeviationMemberRaw(), inaStructure, "DeviationMember", "DeviationMemberVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(kpiDefinitionBase.getTrendMemberRaw(), inaStructure, "TrendMember", "TrendMemberVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(kpiDefinitionBase.getExceptionMemberRaw(), inaStructure, "ExceptionMember", "ExceptionMemberVariable");
		oFF.QInARepoVisualizationManager.importVariableHolder(importer, kpiDefinitionBase.getVisualizationVariableHolder(), inaStructure.getListByKey("Variables"), context);
		oFF.QInARepoVisualizationManager.importDatapointVariableContainers(importer, kpiDefinitionBase, inaStructure, context);
		oFF.QInARepoVisualizationManager.importSelectionPath(kpiDefinitionBase, inaStructure.getListByKey("Path"));
		oFF.QInARepoVisualizationManager.importMemberRestrictions(kpiDefinitionBase, inaStructure.getListByKey("MemberRestrictions"));
	}
	return modelComponent;
};

oFF.QInARepoTableCellReferenceScope = function() {};
oFF.QInARepoTableCellReferenceScope.prototype = new oFF.QInARepository();
oFF.QInARepoTableCellReferenceScope.prototype._ff_c = "QInARepoTableCellReferenceScope";

oFF.QInARepoTableCellReferenceScope.prototype.exportAxisPaths = function(cellReferenceScope, inaStructure)
{
	let axisPaths = cellReferenceScope.getAxisPaths();
	if (oFF.XCollectionUtils.hasElements(axisPaths))
	{
		let axisPathList = inaStructure.putNewList("ReferencePaths");
		for (let i = 0; i < axisPaths.size(); i++)
		{
			let axisPath = axisPaths.get(i);
			let axisPathStruct = axisPathList.addNewStructure();
			this.setTriStateBool(axisPathStruct, "MatchDimensionSectionStart", axisPath.isMatchingDimensionSectionStart());
			this.setTriStateBool(axisPathStruct, "MatchDimensionSectionEnd", axisPath.isMatchingDimensionSectionEnd());
			this.setTriStateBool(axisPathStruct, "MatchHierarchyLevelStart", axisPath.isMatchingHierarchyLevelStart());
			this.setTriStateBool(axisPathStruct, "MatchHierarchyLevelEnd", axisPath.isMatchingHierarchyLevelEnd());
			let axisPathSubList = axisPathStruct.putNewList("ReferencePathElements");
			for (let j = 0; j < axisPath.size(); j++)
			{
				let axisPathElementStruct = axisPathSubList.addNewStructure();
				let axisPathElement = axisPath.get(j);
				axisPathElementStruct.putInteger("AxisLevel", axisPathElement.getAxisLevel());
				axisPathElementStruct.putInteger("HierarchyLevel", axisPathElement.getHierarchyLevel());
				axisPathElementStruct.putBoolean("HierarchyLevelExact", axisPathElement.isExactHierarchyLevel());
				axisPathElementStruct.putString("HierarchyLevelName", axisPathElement.getHierarchyLevelName());
				this.setTriStateBool(axisPathElementStruct, "IncludeHeaderBand", axisPathElement.isIncludeHeaderBand());
				this.setTriStateBool(axisPathElementStruct, "IncludeTotalsBand", axisPathElement.isIncludeTotalsBand());
				this.setTriStateBool(axisPathElementStruct, "IncludeSubdrills", axisPathElement.isIncludeSubDrills());
				this.setTriStateBool(axisPathElementStruct, "Expanded", axisPathElement.isMatchesExpanded());
				this.setTriStateBool(axisPathElementStruct, "Leaves", axisPathElement.isMatchesLeaves());
				this.setTriStateBool(axisPathElementStruct, "Totals", axisPathElement.isMatchesTotals());
				axisPathElementStruct.putString("LowerLevelNodeAlignment", oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA(axisPathElement.getHierarchyAlignment()));
				oFF.QInARepoVisualizationManager.exportStringListOrVariable(axisPathElement.getMemberNamesRaw(), axisPathElementStruct, "MemberNames", "MemberNamesVariable");
				oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getDimensionNameRaw(), axisPathElementStruct, "DimensionName", "DimensionNameVariable");
				oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getAttributeNameRaw(), axisPathElementStruct, "AttributeName", "AttributeNameVariable");
				oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getFieldNameRaw(), axisPathElementStruct, "FieldName", "FieldNameVariable");
				oFF.QInARepoVisualizationManager.exportConstantOrVariable(axisPathElement.getDimensionTypeRaw(), axisPathElementStruct, "DimensionType", "DimensionTypeVariable");
				oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getSemanticTypeRaw(), axisPathElementStruct, "SemanticType", "SemanticTypeVariable");
				oFF.QInARepoVisualizationManager.exportConstantOrVariable(axisPathElement.getPresentationTypeRaw(), axisPathElementStruct, "PresentationType", "PresentationTypeVariable");
			}
		}
	}
};
oFF.QInARepoTableCellReferenceScope.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (oFF.notNull(inaStructure) && oFF.notNull(modelComponent))
	{
		let cellsReferenceScope = modelComponent;
		oFF.QInARepoVisualizationManager.exportIntegerOrVariable(cellsReferenceScope.getMatchOrdinalRaw(), inaStructure, "MatchOrdinal", "MatchOrdinalVariable");
		oFF.QInARepoVisualizationManager.exportIntegerOrVariable(cellsReferenceScope.getMatchModuloRaw(), inaStructure, "MatchModulo", "MatchModuloVariable");
		oFF.QInARepoVisualizationManager.exportIntegerOrVariable(cellsReferenceScope.getMatchSkipFirstRaw(), inaStructure, "MatchSkipFirst", "MatchSkipFirstVariable");
		oFF.QInARepoVisualizationManager.exportIntegerOrVariable(cellsReferenceScope.getMatchSkipLastRaw(), inaStructure, "MatchSkipLast", "MatchSkipLastVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchRootContentIndicesRaw(), inaStructure, "MatchRootContentIndices", "MatchRootContentIndicesVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchHeaderSectionStartRaw(), inaStructure, "MatchHeaderSectionStart", "MatchHeaderSectionStartVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchHeaderSectionEndRaw(), inaStructure, "MatchHeaderSectionEnd", "MatchHeaderSectionEndVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchHeaderFieldsSectionEndRaw(), inaStructure, "MatchHeaderFieldsSectionEnd", "MatchHeaderFieldsSectionEndVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchFullHeaderSectionRaw(), inaStructure, "MatchHeaderSectionFull", "MatchHeaderSectionFullVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchDataSectionStartRaw(), inaStructure, "MatchDataSectionStart", "MatchDataSectionStartVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchDataSectionEndRaw(), inaStructure, "MatchDataSectionEnd", "MatchDataSectionEndVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(cellsReferenceScope.getMatchFullDataSectionRaw(), inaStructure, "MatchDataSectionFull", "MatchDataSectionFullVariable");
		this.exportHeaderSectionInfo(cellsReferenceScope, inaStructure);
		this.exportAxisPaths(cellsReferenceScope, inaStructure);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoTableCellReferenceScope.prototype.exportHeaderSectionInfo = function(cellsReferenceScope, inaStructure)
{
	let headerSectionInfos = cellsReferenceScope.getHeaderSectionInfos();
	if (oFF.XCollectionUtils.hasElements(headerSectionInfos))
	{
		let headerSectionInfoList = inaStructure.putNewList("HeaderSectionInfo");
		for (let i = 0; i < headerSectionInfos.size(); i++)
		{
			let headerSectionInfo = headerSectionInfos.get(i);
			let headerSectionInfoStruct = headerSectionInfoList.addNewStructure();
			headerSectionInfoStruct.putInteger("AxisLevel", headerSectionInfo.getAxisLevel());
			headerSectionInfoStruct.putString("HeaderName", headerSectionInfo.getHeaderName());
			headerSectionInfoStruct.putBoolean("HeaderDimension", headerSectionInfo.isDimensionLevel());
			headerSectionInfoStruct.putBoolean("HeaderAttribute", headerSectionInfo.isAttributeLevel());
			headerSectionInfoStruct.putBoolean("HeaderField", headerSectionInfo.isFieldLevel());
			headerSectionInfoStruct.putBoolean("HeaderUnits", headerSectionInfo.isUniqueUnitsLevel());
			headerSectionInfoStruct.putBoolean("HeaderLevelExact", headerSectionInfo.isExactHeaderLevel());
			this.setTriStateBool(headerSectionInfoStruct, "SectionStart", headerSectionInfo.isSectionStart());
			this.setTriStateBool(headerSectionInfoStruct, "SectionEnd", headerSectionInfo.isSectionEnd());
		}
	}
};
oFF.QInARepoTableCellReferenceScope.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CELL_REFERENCE_SCOPE;
};
oFF.QInARepoTableCellReferenceScope.prototype.getTriStateBool = function(struct, key)
{
	let result = oFF.TriStateBool._DEFAULT;
	if (struct.containsKey(key))
	{
		result = struct.getBooleanByKey(key) ? oFF.TriStateBool._TRUE : oFF.TriStateBool._FALSE;
	}
	return result;
};
oFF.QInARepoTableCellReferenceScope.prototype.importAxisPaths = function(cellReferenceScope, inaStructure)
{
	let axisPathList = inaStructure.getListByKey("ReferencePaths");
	if (oFF.notNull(axisPathList))
	{
		cellReferenceScope.clearAxisPaths();
		for (let i = 0; i < axisPathList.size(); i++)
		{
			let newAxisPath = cellReferenceScope.addNewAxisPath();
			let axisPathStruct = axisPathList.getStructureAt(i);
			newAxisPath.setMatchingDimensionSectionStart(this.getTriStateBool(axisPathStruct, "MatchDimensionSectionStart"));
			newAxisPath.setMatchingDimensionSectionEnd(this.getTriStateBool(axisPathStruct, "MatchDimensionSectionEnd"));
			newAxisPath.setMatchingHierarchyLevelStart(this.getTriStateBool(axisPathStruct, "MatchHierarchyLevelStart"));
			newAxisPath.setMatchingHierarchyLevelEnd(this.getTriStateBool(axisPathStruct, "MatchHierarchyLevelEnd"));
			let axisPathSubList = axisPathStruct.getListByKey("ReferencePathElements");
			if (oFF.XCollectionUtils.hasElements(axisPathSubList))
			{
				for (let j = 0; j < axisPathSubList.size(); j++)
				{
					let newAxisPathElement = newAxisPath.addNewElement();
					let axisPathElementStruct = axisPathSubList.getStructureAt(j);
					newAxisPathElement.setAxisLevel(axisPathElementStruct.getIntegerByKeyExt("AxisLevel", -1));
					newAxisPathElement.setHierarchyLevel(axisPathElementStruct.getIntegerByKeyExt("HierarchyLevel", -1));
					newAxisPathElement.setExactHierarchyLevel(axisPathElementStruct.getBooleanByKeyExt("HierarchyLevelExact", false));
					newAxisPathElement.setHierarchyLevelName(axisPathElementStruct.getStringByKey("HierarchyLevelName"));
					newAxisPathElement.setIncludeHeaderBand(this.getTriStateBool(axisPathElementStruct, "IncludeHeaderBand"));
					newAxisPathElement.setIncludeTotalsBand(this.getTriStateBool(axisPathElementStruct, "IncludeTotalsBand"));
					newAxisPathElement.setIncludeSubDrills(this.getTriStateBool(axisPathElementStruct, "IncludeSubdrills"));
					newAxisPathElement.setMatchesExpanded(this.getTriStateBool(axisPathElementStruct, "Expanded"));
					newAxisPathElement.setMatchesLeaves(this.getTriStateBool(axisPathElementStruct, "Leaves"));
					newAxisPathElement.setMatchesTotals(this.getTriStateBool(axisPathElementStruct, "Totals"));
					if (axisPathElementStruct.hasStringByKey("LowerLevelNodeAlignment"))
					{
						newAxisPathElement.setHierarchyAlignment(oFF.QInAConverter.lookupLowerLevelNodeAlignment(axisPathElementStruct.getStringByKey("LowerLevelNodeAlignment")));
					}
					oFF.QInARepoVisualizationManager.importStringListOrVariable(newAxisPathElement.getMemberNamesRaw(), axisPathElementStruct, "MemberNames", "MemberNamesVariable");
					oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getDimensionNameRaw(), axisPathElementStruct, "DimensionName", "DimensionNameVariable");
					oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getAttributeNameRaw(), axisPathElementStruct, "AttributeName", "AttributeNameVariable");
					oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getFieldNameRaw(), axisPathElementStruct, "FieldName", "FieldNameVariable");
					oFF.QInARepoVisualizationManager.importConstantOrVariable(newAxisPathElement.getDimensionTypeRaw(), axisPathElementStruct, "DimensionType", "DimensionTypeVariable", (c) => {
						return oFF.XComponentType.lookupComponentType(c);
					});
					oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getSemanticTypeRaw(), axisPathElementStruct, "SemanticType", "SemanticTypeVariable");
					oFF.QInARepoVisualizationManager.importConstantOrVariable(newAxisPathElement.getPresentationTypeRaw(), axisPathElementStruct, "PresentationType", "PresentationTypeVariable", (p) => {
						return oFF.PresentationType.lookup(p);
					});
				}
			}
		}
	}
};
oFF.QInARepoTableCellReferenceScope.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(modelComponent) && oFF.notNull(inaStructure) && modelComponent.getComponentType() === oFF.OlapComponentType.VISUALIZATION_CELL_REFERENCE_SCOPE)
	{
		let cellReferenceScope = modelComponent;
		oFF.QInARepoVisualizationManager.importIntegerOrVariable(cellReferenceScope.getMatchOrdinalRaw(), inaStructure, "MatchOrdinal", "MatchOrdinalVariable");
		oFF.QInARepoVisualizationManager.importIntegerOrVariable(cellReferenceScope.getMatchModuloRaw(), inaStructure, "MatchModulo", "MatchModuloVariable");
		oFF.QInARepoVisualizationManager.importIntegerOrVariable(cellReferenceScope.getMatchSkipFirstRaw(), inaStructure, "MatchSkipFirst", "MatchSkipFirstVariable");
		oFF.QInARepoVisualizationManager.importIntegerOrVariable(cellReferenceScope.getMatchSkipLastRaw(), inaStructure, "MatchSkipLast", "MatchSkipLastVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchRootContentIndicesRaw(), inaStructure, "MatchRootContentIndices", "MatchRootContentIndicesVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchHeaderSectionStartRaw(), inaStructure, "MatchHeaderSectionStart", "MatchHeaderSectionStartVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchHeaderSectionEndRaw(), inaStructure, "MatchHeaderSectionEnd", "MatchHeaderSectionEndVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchHeaderFieldsSectionEndRaw(), inaStructure, "MatchHeaderFieldsSectionEnd", "MatchHeaderFieldsSectionEndVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchFullHeaderSectionRaw(), inaStructure, "MatchHeaderSectionFull", "MatchHeaderSectionFullVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchDataSectionStartRaw(), inaStructure, "MatchDataSectionStart", "MatchDataSectionStartVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchDataSectionEndRaw(), inaStructure, "MatchDataSectionEnd", "MatchDataSectionEndVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(cellReferenceScope.getMatchFullDataSectionRaw(), inaStructure, "MatchDataSectionFull", "MatchDataSectionFullVariable");
		this.importHeaderReferences(cellReferenceScope, inaStructure);
		this.importAxisPaths(cellReferenceScope, inaStructure);
	}
	return modelComponent;
};
oFF.QInARepoTableCellReferenceScope.prototype.importHeaderReferences = function(cellReferenceScope, inaStructure)
{
	let headerSectionInfoList = inaStructure.getListByKey("HeaderSectionInfo");
	if (oFF.notNull(headerSectionInfoList))
	{
		cellReferenceScope.clearHeaderSectionInfos();
		for (let i = 0; i < headerSectionInfoList.size(); i++)
		{
			let headerSectionInfoStruct = headerSectionInfoList.getStructureAt(i);
			let headerSectionInfo = cellReferenceScope.addNewHeaderSectionInfo();
			headerSectionInfo.setAxisLevel(headerSectionInfoStruct.getIntegerByKeyExt("AxisLevel", -1));
			headerSectionInfo.setHeaderName(headerSectionInfoStruct.getStringByKey("HeaderName"));
			headerSectionInfo.setDimensionLevel(headerSectionInfoStruct.getBooleanByKeyExt("HeaderDimension", false));
			headerSectionInfo.setAttributeLevel(headerSectionInfoStruct.getBooleanByKeyExt("HeaderAttribute", false));
			headerSectionInfo.setFieldLevel(headerSectionInfoStruct.getBooleanByKeyExt("HeaderField", false));
			headerSectionInfo.setUniqueUnitsLevel(headerSectionInfoStruct.getBooleanByKeyExt("HeaderUnits", false));
			headerSectionInfo.setExactHeaderLevel(headerSectionInfoStruct.getBooleanByKeyExt("HeaderLevelExact", false));
			headerSectionInfo.setSectionEnd(this.getTriStateBool(headerSectionInfoStruct, "SectionEnd"));
			headerSectionInfo.setSectionStart(this.getTriStateBool(headerSectionInfoStruct, "SectionStart"));
		}
	}
};
oFF.QInARepoTableCellReferenceScope.prototype.setTriStateBool = function(struct, key, tsb)
{
	if (tsb === oFF.TriStateBool._TRUE)
	{
		struct.putBoolean(key, true);
	}
	else if (tsb === oFF.TriStateBool._FALSE)
	{
		struct.putBoolean(key, false);
	}
};

oFF.QInARepoTableDefinition = function() {};
oFF.QInARepoTableDefinition.prototype = new oFF.QInARepository();
oFF.QInARepoTableDefinition.prototype._ff_c = "QInARepoTableDefinition";

oFF.QInARepoTableDefinition.exportCellTypeRestriction = function(cellTypeRestriction, cellTypeRestrictionIna)
{
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "Expanded", cellTypeRestriction.isExpanded());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "InHierarchy", cellTypeRestriction.isInHierarchy());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "Totals", cellTypeRestriction.isInTotalsContext());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "Merged", cellTypeRestriction.isMerged());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "RepeatedMemberName", cellTypeRestriction.isRepeatedMemberName());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "DataEntryEnabled", cellTypeRestriction.isDataEntryEnabled());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "Locked", cellTypeRestriction.isLocked());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "VersionEdited", cellTypeRestriction.isVersionEdited());
	oFF.QInARepoTableDefinition.setTriStateBool(cellTypeRestrictionIna, "DataUpdated", cellTypeRestriction.isDataUpdated());
	let matchingCellTypes = cellTypeRestriction.getMatchingCellTypes();
	if (oFF.XCollectionUtils.hasElements(matchingCellTypes))
	{
		let matchingCellTypesInA = cellTypeRestrictionIna.putNewList("CellTypes");
		oFF.XCollectionUtils.forEach(matchingCellTypes, (mct) => {
			matchingCellTypesInA.addString(oFF.isNull(mct) ? null : mct.getName());
		});
	}
};
oFF.QInARepoTableDefinition.exportDataPointStyles = function(tableDefinition, inaStructure)
{
	let dataPointStyles = tableDefinition.getDataPointStyles();
	if (oFF.XCollectionUtils.hasElements(dataPointStyles))
	{
		let dataPointStyleList = inaStructure.putNewList("DataPointStyle");
		for (let i = 0; i < dataPointStyles.size(); i++)
		{
			let dataPointStyleStructure = dataPointStyleList.addNewStructure();
			let dataPointStyle = dataPointStyles.get(i);
			dataPointStyleStructure.putString("Name", dataPointStyle.getName());
			dataPointStyleStructure.putString("Text", dataPointStyle.getText());
			oFF.QInARepoVisualizationManager.exportStringOrVariable(dataPointStyle.getFormattingStyleNameRaw(), dataPointStyleStructure, "Style", "StyleVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(dataPointStyle.getDataPointCategoryNameRaw(), dataPointStyleStructure, "DataPointCategoryName", "DataPointCategoryNameVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(dataPointStyle.getDataPointCategoryTextRaw(), dataPointStyleStructure, "DataPointCategoryText", "DataPointCategoryTextVariable");
			oFF.QInARepoVisualizationManager.exportDataPointContext(dataPointStyle, dataPointStyleStructure);
		}
	}
};
oFF.QInARepoTableDefinition.exportFormattingStyles = function(tableDefinition, inaStructure)
{
	let formattingStyles = tableDefinition.getFormattingStyles();
	if (oFF.XCollectionUtils.hasElements(formattingStyles))
	{
		let formattingStyleList = inaStructure.putNewList("Styles");
		for (let i = 0; i < formattingStyles.size(); i++)
		{
			let formattingStyle = formattingStyles.get(i);
			let formattingStyleStruct = formattingStyleList.addNewStructure();
			formattingStyleStruct.putString("Name", formattingStyle.getName());
			formattingStyleStruct.putString("Text", formattingStyle.getText());
			let cellTypeRestrictions = formattingStyle.getCellTypeRestrictions();
			if (oFF.XCollectionUtils.hasElements(cellTypeRestrictions))
			{
				let cellTypeRestrictionIna = formattingStyleStruct.putNewList("CellTypeRestrictions");
				oFF.XCollectionUtils.forEach(cellTypeRestrictions, (ctrObj) => {
					oFF.QInARepoTableDefinition.exportCellTypeRestriction(ctrObj, cellTypeRestrictionIna.addNewStructure());
				});
			}
			oFF.QInARepoTableDefinition.exportStyledLine(formattingStyle.getStyledLineLeft(), formattingStyleStruct.putNewStructure("LeftLine"));
			oFF.QInARepoTableDefinition.exportStyledLine(formattingStyle.getStyledLineRight(), formattingStyleStruct.putNewStructure("RightLine"));
			oFF.QInARepoTableDefinition.exportStyledLine(formattingStyle.getStyledLineTop(), formattingStyleStruct.putNewStructure("TopLine"));
			oFF.QInARepoTableDefinition.exportStyledLine(formattingStyle.getStyledLineBottom(), formattingStyleStruct.putNewStructure("BottomLine"));
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(formattingStyle.getWrapRaw(), formattingStyleStruct, "Wrap", "WrapVariable");
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(formattingStyle.getActiveRaw(), formattingStyleStruct, "Active", "ActiveVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getFillColorRaw(), formattingStyleStruct, "FillColor", "FillColorVariable");
			oFF.QInARepoVisualizationManager.exportDoubleOrVariable(formattingStyle.getFillAlphaRaw(), formattingStyleStruct, "FillAlpha", "FillAlphaVariable");
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(formattingStyle.getFontBoldRaw(), formattingStyleStruct, "FontBold", "FontBoldVariable");
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(formattingStyle.getFontItalicRaw(), formattingStyleStruct, "FontItalic", "FontItalicVariable");
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(formattingStyle.getFontUnderlineRaw(), formattingStyleStruct, "FontUnderline", "FontUnderlineVariable");
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(formattingStyle.getFontStrikeThroughRaw(), formattingStyleStruct, "FontStrikeThrough", "FontStrikeThroughVariable");
			oFF.QInARepoVisualizationManager.exportDoubleOrVariable(formattingStyle.getFontSizeRaw(), formattingStyleStruct, "FontSize", "FontSizeVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getFontFamilyRaw(), formattingStyleStruct, "FontFamily", "FontFamilyVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getFontColorRaw(), formattingStyleStruct, "FontColor", "FontColorVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getCellChartBarColorRaw(), formattingStyleStruct, "CellChartBarColor", "CellChartBarColorVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getCellChartLineColorRaw(), formattingStyleStruct, "CellChartLineColor", "CellChartLineColorVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getAlertColorRaw(), formattingStyleStruct, "AlertColor", "AlertColorVariable");
			oFF.QInARepoVisualizationManager.exportConstantOrVariable(formattingStyle.getAlertSymbolRaw(), formattingStyleStruct, "AlertSymbol", "AlertSymbolVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getOverrideTextRaw(), formattingStyleStruct, "OverrideText", "OverrideTextVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getOverridePlaceholderForFormattedTextRaw(), formattingStyleStruct, "OverridePlaceholderForFormattedText", "OverridePlaceholderForFormattedTextVariable");
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(formattingStyle.getShowFormattedTextRaw(), formattingStyleStruct, "ShowFormattedText", "ShowFormattedTextVariable");
			oFF.QInARepoVisualizationManager.exportConstantOrVariable(formattingStyle.getVerticalAlignmentRaw(), formattingStyleStruct, "VerticalAlignment", "VerticalAlignmentVariable");
			oFF.QInARepoVisualizationManager.exportConstantOrVariable(formattingStyle.getHorizontalAlignmentRaw(), formattingStyleStruct, "HorizontalAlignment", "HorizontalAlignmentVariable");
			oFF.QInARepoVisualizationManager.exportConstantOrVariable(formattingStyle.getBackgroundPatternTypeRaw(), formattingStyleStruct, "PatternType", "PatternTypeVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(formattingStyle.getBackgroundContentRaw(), formattingStyleStruct, "PatternBackground", "PatternBackgroundVariable");
			formattingStyleStruct.putInteger("Priority", formattingStyle.getPriority());
		}
	}
};
oFF.QInARepoTableDefinition.exportIndexBasedCellDimensions = function(tableDefinition, inaStructure)
{
	let keys;
	let key;
	let fixedRowHeights = tableDefinition.getFixedPixelHeightsForRows();
	if (oFF.XCollectionUtils.hasElements(fixedRowHeights))
	{
		let rowHeightsIna = inaStructure.putNewList("FixedPixelRowHeights");
		keys = fixedRowHeights.getKeysAsIterator();
		while (keys.hasNext())
		{
			key = keys.next();
			let rowHeight = rowHeightsIna.addNewStructure();
			rowHeight.putInteger("Index", key.getInteger());
			rowHeight.putInteger("Height", fixedRowHeights.getByKey(key).getInteger());
		}
	}
	let fixedColumnWidths = tableDefinition.getFixedPixelWidthsForColumns();
	if (oFF.XCollectionUtils.hasElements(fixedColumnWidths))
	{
		let columnWidthsIna = inaStructure.putNewList("FixedPixelColumnWidths");
		keys = fixedColumnWidths.getKeysAsIterator();
		while (keys.hasNext())
		{
			key = keys.next();
			let columnWidth = columnWidthsIna.addNewStructure();
			columnWidth.putInteger("Index", key.getInteger());
			columnWidth.putInteger("Width", fixedColumnWidths.getByKey(key).getInteger());
		}
	}
};
oFF.QInARepoTableDefinition.exportInsertedTuples = function(tuples, tableMarkupStructure, tuplesExportKey)
{
	if (oFF.XCollectionUtils.hasElements(tuples))
	{
		let tuplesRepoList = tableMarkupStructure.putNewList(tuplesExportKey);
		for (let i = 0; i < tuples.size(); i++)
		{
			let tuple = tuples.get(i);
			let tupleRepoStructure = tuplesRepoList.addNewStructure();
			tupleRepoStructure.putString("Name", tuple.getName());
			tupleRepoStructure.putString("Text", tuple.getText());
			oFF.QInARepoVisualizationManager.exportStringOrVariable(tuple.getFormattedTextRaw(), tupleRepoStructure, "FormattedText", "FormattedTextVariable");
			oFF.QInARepoVisualizationManager.exportIntegerOrVariable(tuple.getCellHeightRaw(), tupleRepoStructure, "Height", "HeightVariable");
			oFF.QInARepoVisualizationManager.exportIntegerOrVariable(tuple.getCellWidthRaw(), tupleRepoStructure, "Width", "WidthVariable");
			oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tuple.getMergedRaw(), tupleRepoStructure, "MergeCells", "MergeCellsVariable");
			let scopedStyleNames = tuple.getScopedStyleNames();
			if (oFF.XCollectionUtils.hasElements(scopedStyleNames))
			{
				tupleRepoStructure.putNewList("ScopedStyle").addAllStrings(scopedStyleNames);
			}
		}
	}
};
oFF.QInARepoTableDefinition.exportLayeredRectangularStyles = function(exporter, tableDefinition, inaStructure)
{
	let layeredStyles = tableDefinition.getLayeredRectangularStyles();
	if (oFF.XCollectionUtils.hasElements(layeredStyles))
	{
		let inaList = inaStructure.putNewList("LayeredRectangularStyle");
		for (let i = 0; i < layeredStyles.size(); i++)
		{
			let layeredStyle = layeredStyles.get(i);
			let layeredStyleStruct = inaList.addNewStructure();
			layeredStyleStruct.putString("Name", layeredStyle.getName());
			layeredStyleStruct.putString("Text", layeredStyle.getText());
			layeredStyleStruct.putString("Style", layeredStyle.getStyleName());
			exporter.exportVisualizationCellReferenceScope(layeredStyle.getRowsScope(), layeredStyleStruct.putNewStructure("RowsScope"));
			exporter.exportVisualizationCellReferenceScope(layeredStyle.getColumnsScope(), layeredStyleStruct.putNewStructure("ColumnsScope"));
		}
	}
};
oFF.QInARepoTableDefinition.exportPageBreakHandling = function(tableMarkupStructure, pageBreakHandling)
{
	if (oFF.notNull(pageBreakHandling) && pageBreakHandling.isSet())
	{
		let breakStructure = tableMarkupStructure.putNewStructure("PageBreak");
		oFF.QInARepoTableDefinition.putBooleanIfTrue(breakStructure, "BreakBefore", pageBreakHandling.isBreakBefore());
		oFF.QInARepoTableDefinition.putBooleanIfTrue(breakStructure, "BreakAfter", pageBreakHandling.isBreakAfter());
		oFF.QInARepoTableDefinition.putBooleanIfTrue(breakStructure, "KeepTogether", pageBreakHandling.isKeepTogether());
	}
};
oFF.QInARepoTableDefinition.exportScopedStyles = function(exporter, tableDefinition, inaStructure)
{
	let scopedStyles = tableDefinition.getScopedStyles();
	if (oFF.XCollectionUtils.hasElements(scopedStyles))
	{
		let inaList = inaStructure.putNewList("ScopedStyle");
		for (let i = 0; i < scopedStyles.size(); i++)
		{
			let scopedStyle = scopedStyles.get(i);
			let scopedStyleStruct = inaList.addNewStructure();
			scopedStyleStruct.putString("Name", scopedStyle.getName());
			scopedStyleStruct.putString("Text", scopedStyle.getText());
			scopedStyleStruct.putString("Style", scopedStyle.getStyleName());
			exporter.exportVisualizationCellReferenceScope(scopedStyle.getOrthogonalRowsScope(), scopedStyleStruct.putNewStructure("RowsScope"));
			exporter.exportVisualizationCellReferenceScope(scopedStyle.getOrthogonalColumnsScope(), scopedStyleStruct.putNewStructure("ColumnsScope"));
		}
	}
};
oFF.QInARepoTableDefinition.exportStyledLine = function(styledLine, exportStructure)
{
	oFF.QInARepoVisualizationManager.exportDoubleOrVariable(styledLine.getWidthRaw(), exportStructure, "LineWidth", "LineWidthVariable");
	oFF.QInARepoVisualizationManager.exportStringOrVariable(styledLine.getColorRaw(), exportStructure, "LineColor", "LineColorVariable");
	oFF.QInARepoVisualizationManager.exportStringOrVariable(styledLine.getPatternBackgroundRaw(), exportStructure, "PatternBackground", "PatternBackgroundVariable");
	oFF.QInARepoVisualizationManager.exportDoubleOrVariable(styledLine.getPatternWidthRaw(), exportStructure, "PatternWidth", "PatternWidthVariable");
	oFF.QInARepoVisualizationManager.exportStringOrVariable(styledLine.getPatternColorRaw(), exportStructure, "PatternColor", "PatternColorVariable");
	oFF.QInARepoVisualizationManager.exportStringOrVariable(styledLine.getPatternBorderColorRaw(), exportStructure, "PatternBorderColor", "PatternBorderColorVariable");
	oFF.QInARepoVisualizationManager.exportConstantOrVariable(styledLine.getPatternTypeRaw(), exportStructure, "PatternType", "PatternTypeVariable");
	oFF.QInARepoVisualizationManager.exportConstantOrVariable(styledLine.getLineStyleRaw(), exportStructure, "LineStyle", "LineStyleVariable");
	oFF.QInARepoVisualizationManager.exportDoubleOrVariable(styledLine.getLeftPaddingRaw(), exportStructure, "PaddingLeft", "PaddingLeftVariable");
	oFF.QInARepoVisualizationManager.exportDoubleOrVariable(styledLine.getRightPaddingRaw(), exportStructure, "PaddingRight", "PaddingRightVariable");
	oFF.QInARepoVisualizationManager.exportDoubleOrVariable(styledLine.getTopPaddingRaw(), exportStructure, "PaddingTop", "PaddingTopVariable");
	oFF.QInARepoVisualizationManager.exportDoubleOrVariable(styledLine.getBottomPaddingRaw(), exportStructure, "PaddingBottom", "PaddingBottomVariable");
};
oFF.QInARepoTableDefinition.exportTableDefinition = function(exporter, tableDefinition, inaStructure)
{
	inaStructure.putStringNotNullAndNotEmpty("Name", tableDefinition.getName());
	inaStructure.putStringNotNullAndNotEmpty("Text", tableDefinition.getText());
	oFF.QInARepoTableDefinition.exportViewportPagingSettings(tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.exportFormattingStyles(tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.exportDataPointStyles(tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.exportScopedStyles(exporter, tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.exportLayeredRectangularStyles(exporter, tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.exportTableMarkups(exporter, tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.exportIndexBasedCellDimensions(tableDefinition, inaStructure);
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getStripeDataRowsRaw(), inaStructure, "StripeDataRows", "StripeDataRowsVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getStripeDataColumnsRaw(), inaStructure, "StripeDataColumns", "StripeDataColumnsVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getFreezeHeaderRowsRaw(), inaStructure, "FreezeHeaderRows", "FreezeHeaderRowsVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getFreezeHeaderColumnsRaw(), inaStructure, "FreezeHeaderColumns", "FreezeHeaderColumnsVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getShowFreezeLinesRaw(), inaStructure, "ShowFreezeLines", "ShowFreezeLinesVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getShowGridRaw(), inaStructure, "ShowGrid", "ShowGridVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getShowDimensionTitlesRaw(), inaStructure, "ShowDimensionTitles", "ShowDimensionTitlesVariable");
	oFF.QInARepoVisualizationManager.exportConstantOrVariable(tableDefinition.getTableHeaderCompactionTypeRaw(), inaStructure, "TableHeaderCompactionType", "TableHeaderCompactionTypeVariable");
	oFF.QInARepoVisualizationManager.exportConstantOrVariable(tableDefinition.getTableMemberHeaderHandlingRaw(), inaStructure, "TableMemberHeaderHandling", "TableMemberHeaderHandlingVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getShowCoordinateHeaderRaw(), inaStructure, "ShowCoordinateHeader", "ShowCoordinateHeaderVariable");
	oFF.QInARepoVisualizationManager.exportBooleanOrVariable(tableDefinition.getShowHyperlinksRaw(), inaStructure, "ShowHyperlinks", "ShowHyperlinksVariable");
	inaStructure.putInteger("FreezeUpToRow", tableDefinition.getFreezeUpToRow());
	inaStructure.putInteger("FreezeUpToColumn", tableDefinition.getFreezeUpToColumn());
	inaStructure.putStringNotNullAndNotEmpty("HeaderColor", tableDefinition.getHeaderColor());
	inaStructure.putStringNotNullAndNotEmpty("TotalLevel6Color", tableDefinition.getTotalLevel6Color());
	inaStructure.putStringNotNullAndNotEmpty("TotalLevel5Color", tableDefinition.getTotalLevel5Color());
	inaStructure.putStringNotNullAndNotEmpty("TotalLevel4Color", tableDefinition.getTotalLevel4Color());
	inaStructure.putStringNotNullAndNotEmpty("TotalLevel3Color", tableDefinition.getTotalLevel3Color());
	inaStructure.putStringNotNullAndNotEmpty("TotalLevel2Color", tableDefinition.getTotalLevel2Color());
	inaStructure.putStringNotNullAndNotEmpty("TotalLevel1Color", tableDefinition.getTotalLevel1Color());
	inaStructure.putStringNotNullAndNotEmpty("TotalLevel0Color", tableDefinition.getTotalLevel0Color());
	inaStructure.putStringNotNullAndNotEmpty("Title", tableDefinition.getTitle());
	oFF.QInARepoVisualizationManager.exportTableTemplateLinker(exporter, tableDefinition.getTemplateLinker(), inaStructure);
	oFF.QInARepoVisualizationManager.exportVariableHolder(exporter, tableDefinition.getVisualizationVariableHolder(), inaStructure);
	oFF.QInARepoVisualizationManager.exportDataPointVariableContainers(exporter, tableDefinition.getDatapointVariableContainers(), inaStructure);
};
oFF.QInARepoTableDefinition.exportTableMarkups = function(exporter, tableDefinition, inaStructure)
{
	let tableMarkups = tableDefinition.getTableMarkups();
	if (oFF.XCollectionUtils.hasElements(tableMarkups))
	{
		let tableMarkupInAList = inaStructure.putNewList("TableMarkup");
		for (let i = 0; i < tableMarkups.size(); i++)
		{
			let tableMarkup = tableMarkups.get(i);
			let tableMarkupStructure = tableMarkupInAList.addNewStructure();
			tableMarkupStructure.putString("Name", tableMarkup.getName());
			tableMarkupStructure.putString("Text", tableMarkup.getText());
			oFF.QInARepoVisualizationManager.exportIntegerOrVariable(tableMarkup.getCellHeightRaw(), tableMarkupStructure, "Height", "HeightVariable");
			oFF.QInARepoVisualizationManager.exportIntegerOrVariable(tableMarkup.getCellWidthRaw(), tableMarkupStructure, "Width", "WidthVariable");
			oFF.QInARepoVisualizationManager.exportIntegerOrVariable(tableMarkup.getCellHeightAdditionRaw(), tableMarkupStructure, "HeightAddition", "HeightAdditionVariable");
			oFF.QInARepoVisualizationManager.exportIntegerOrVariable(tableMarkup.getCellWidthAdditionRaw(), tableMarkupStructure, "WidthAddition", "WidthAdditionVariable");
			oFF.QInARepoTableDefinition.exportPageBreakHandling(tableMarkupStructure, tableMarkup.getPageBreakHandling());
			tableMarkupStructure.putInteger("Priority", tableMarkup.getPriority());
			let scopedStyleNames = tableMarkup.getScopedStyleNames();
			if (oFF.XCollectionUtils.hasElements(scopedStyleNames))
			{
				tableMarkupStructure.putNewList("ScopedStyle").addAllStrings(scopedStyleNames);
			}
			let tuplesBefore = tableMarkup.getTuplesBefore();
			oFF.QInARepoTableDefinition.exportInsertedTuples(tuplesBefore, tableMarkupStructure, "InsertedTupleBefore");
			let tuplesAfter = tableMarkup.getTuplesAfter();
			oFF.QInARepoTableDefinition.exportInsertedTuples(tuplesAfter, tableMarkupStructure, "InsertedTupleAfter");
			exporter.exportVisualizationCellReferenceScope(tableMarkup.getRowsScope(), tableMarkupStructure.putNewStructure("RowsScope"));
			exporter.exportVisualizationCellReferenceScope(tableMarkup.getColumnsScope(), tableMarkupStructure.putNewStructure("ColumnsScope"));
		}
	}
};
oFF.QInARepoTableDefinition.exportViewportPagingSettings = function(tableDefinition, inaStructure)
{
	let viewportPagingSettings = tableDefinition.getTableViewportPagingSettings();
	if (oFF.notNull(viewportPagingSettings) && (viewportPagingSettings.rowPagingActive() || viewportPagingSettings.columnPagingActive()))
	{
		let pagingStructure = inaStructure.putNewStructure("ViewportPagingSettings");
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "Columns", viewportPagingSettings.getMaxColumns());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "RecommendedColumn", viewportPagingSettings.getMaxRecommendedColumns());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "Rows", viewportPagingSettings.getMaxRows());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "RecommendedRows", viewportPagingSettings.getMaxRecommendedRows());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "Width", viewportPagingSettings.getMaxWidth());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "RecommendedWidth", viewportPagingSettings.getMaxRecommendedWidth());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "Height", viewportPagingSettings.getMaxHeight());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "RecommendedHeight", viewportPagingSettings.getMaxRecommendedHeight());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "StartColumne", viewportPagingSettings.getStartColumn());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "EndColumn", viewportPagingSettings.getEndColumn());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "StartRow", viewportPagingSettings.getStartRow());
		oFF.QInARepoTableDefinition.putIntIfGT0(pagingStructure, "EndRow", viewportPagingSettings.getEndRow());
		pagingStructure.putBoolean("RowPageBreakIsBoundary", viewportPagingSettings.isRowPageBreakIsStylingBoundary());
		pagingStructure.putBoolean("ColumnPageBreakIsBoundary", viewportPagingSettings.isColumnPageBreakIsStylingBoundary());
	}
};
oFF.QInARepoTableDefinition.getTriStateBool = function(struct, key)
{
	let result = oFF.TriStateBool._DEFAULT;
	if (struct.containsKey(key))
	{
		result = struct.getBooleanByKey(key) ? oFF.TriStateBool._TRUE : oFF.TriStateBool._FALSE;
	}
	return result;
};
oFF.QInARepoTableDefinition.importCellTypeRestriction = function(newCellTypeRestriction, structure)
{
	if (oFF.notNull(structure))
	{
		newCellTypeRestriction.setExpanded(oFF.QInARepoTableDefinition.getTriStateBool(structure, "Expanded"));
		newCellTypeRestriction.setInHierarchy(oFF.QInARepoTableDefinition.getTriStateBool(structure, "InHierarchy"));
		newCellTypeRestriction.setInTotalsContext(oFF.QInARepoTableDefinition.getTriStateBool(structure, "Totals"));
		newCellTypeRestriction.setMerged(oFF.QInARepoTableDefinition.getTriStateBool(structure, "Merged"));
		newCellTypeRestriction.setRepeatedMemberName(oFF.QInARepoTableDefinition.getTriStateBool(structure, "RepeatedMemberName"));
		newCellTypeRestriction.setDataEntryEnabled(oFF.QInARepoTableDefinition.getTriStateBool(structure, "DataEntryEnabled"));
		newCellTypeRestriction.setLocked(oFF.QInARepoTableDefinition.getTriStateBool(structure, "Locked"));
		newCellTypeRestriction.setVersionEdited(oFF.QInARepoTableDefinition.getTriStateBool(structure, "VersionEdited"));
		newCellTypeRestriction.setDataUpdated(oFF.QInARepoTableDefinition.getTriStateBool(structure, "DataUpdated"));
		let inaCellTypes = structure.getListByKey("CellTypes");
		if (oFF.XCollectionUtils.hasElements(inaCellTypes))
		{
			oFF.XStream.of(inaCellTypes).map((ict) => {
				return ict.asString();
			}).filterNullValues().map((icts) => {
				return oFF.TableCellType.lookup(icts.getString());
			}).filterNullValues().forEach((ictv) => {
				newCellTypeRestriction.addCellType(ictv);
			});
		}
	}
};
oFF.QInARepoTableDefinition.importDataPointStyles = function(tableDefinition, inaStructure)
{
	let dataPointStyleList = inaStructure.getListByKey("DataPointStyle");
	if (oFF.notNull(dataPointStyleList))
	{
		tableDefinition.clearDataPointStyles();
	}
	if (oFF.XCollectionUtils.hasElements(dataPointStyleList))
	{
		for (let i = 0; i < dataPointStyleList.size(); i++)
		{
			let dataPointFormatting = dataPointStyleList.getStructureAt(i);
			let format = tableDefinition.addNewDataPointStyle(dataPointFormatting.getStringByKey("Name"), dataPointFormatting.getStringByKey("Text"));
			oFF.QInARepoVisualizationManager.importStringOrVariable(format.getFormattingStyleNameRaw(), dataPointFormatting, "Style", "StyleVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(format.getDataPointCategoryNameRaw(), dataPointFormatting, "DataPointCategoryName", "DataPointCategoryNameVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(format.getDataPointCategoryTextRaw(), dataPointFormatting, "DataPointCategoryText", "DataPointCategoryTextVariable");
			oFF.QInARepoVisualizationManager.importDataPointContext(format, dataPointFormatting);
		}
	}
};
oFF.QInARepoTableDefinition.importFormattingStyles = function(tableDefinition, inaStructure)
{
	let formattingStyleList = inaStructure.getListByKey("Styles");
	if (oFF.notNull(formattingStyleList))
	{
		tableDefinition.clearFormattingStyles();
	}
	if (oFF.XCollectionUtils.hasElements(formattingStyleList))
	{
		for (let i = 0; i < formattingStyleList.size(); i++)
		{
			let formattingStyleStruct = formattingStyleList.getStructureAt(i);
			let formattingName = formattingStyleStruct.getStringByKey("Name");
			let formattingText = formattingStyleStruct.getStringByKey("Text");
			let formattingStyle = tableDefinition.addNewFormattingStyle(formattingName, formattingText);
			let cellTypeRestrictions = formattingStyleStruct.getListByKey("CellTypeRestrictions");
			if (oFF.XCollectionUtils.hasElements(cellTypeRestrictions))
			{
				oFF.XCollectionUtils.forEach(cellTypeRestrictions, (ctrInA) => {
					oFF.QInARepoTableDefinition.importCellTypeRestriction(formattingStyle.addNewCellTypeRestriction(), ctrInA.asStructure());
				});
			}
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(formattingStyle.getWrapRaw(), formattingStyleStruct, "Wrap", "WrapVariable");
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(formattingStyle.getActiveRaw(), formattingStyleStruct, "Active", "ActiveVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getAlertColorRaw(), formattingStyleStruct, "AlertColor", "AlertColorVariable");
			oFF.QInARepoVisualizationManager.importConstantOrVariable(formattingStyle.getAlertSymbolRaw(), formattingStyleStruct, "AlertSymbol", "AlertSymbolVariable", (as) => {
				return oFF.AlertSymbol.lookup(as);
			});
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getOverrideTextRaw(), formattingStyleStruct, "OverrideText", "OverrideTextVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getOverridePlaceholderForFormattedTextRaw(), formattingStyleStruct, "OverridePlaceholderForFormattedText", "OverridePlaceholderForFormattedTextVariable");
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(formattingStyle.getShowFormattedTextRaw(), formattingStyleStruct, "ShowFormattedText", "ShowFormattedTextVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getFillColorRaw(), formattingStyleStruct, "FillColor", "FillColorVariable");
			oFF.QInARepoVisualizationManager.importDoubleOrVariable(formattingStyle.getFillAlphaRaw(), formattingStyleStruct, "FillAlpha", "FillAlphaVariable");
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(formattingStyle.getFontBoldRaw(), formattingStyleStruct, "FontBold", "FontBoldVariable");
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(formattingStyle.getFontItalicRaw(), formattingStyleStruct, "FontItalic", "FontItalicVariable");
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(formattingStyle.getFontUnderlineRaw(), formattingStyleStruct, "FontUnderline", "FontUnderlineVariable");
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(formattingStyle.getFontStrikeThroughRaw(), formattingStyleStruct, "FontStrikeThrough", "FontStrikeThroughVariable");
			oFF.QInARepoVisualizationManager.importDoubleOrVariable(formattingStyle.getFontSizeRaw(), formattingStyleStruct, "FontSize", "FontSizeVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getFontFamilyRaw(), formattingStyleStruct, "FontFamily", "FontFamilyVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getFontColorRaw(), formattingStyleStruct, "FontColor", "FontColorVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getCellChartBarColorRaw(), formattingStyleStruct, "CellChartBarColor", "CellChartBarColorVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getCellChartLineColorRaw(), formattingStyleStruct, "CellChartLineColor", "CellChartLineColorVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(formattingStyle.getBackgroundContentRaw(), formattingStyleStruct, "PatternBackground", "PatternBackgroundVariable");
			oFF.QInARepoVisualizationManager.importConstantOrVariable(formattingStyle.getVerticalAlignmentRaw(), formattingStyleStruct, "VerticalAlignment", "VerticalAlignmentVariable", (va) => {
				return oFF.CellAlignmentVertical.lookup(va);
			});
			oFF.QInARepoVisualizationManager.importConstantOrVariable(formattingStyle.getHorizontalAlignmentRaw(), formattingStyleStruct, "HorizontalAlignment", "HorizontalAlignmentVariable", (ha) => {
				return oFF.CellAlignmentHorizontal.lookup(ha);
			});
			oFF.QInARepoVisualizationManager.importConstantOrVariable(formattingStyle.getBackgroundPatternTypeRaw(), formattingStyleStruct, "PatternType", "PatternTypeVariable", (bpt) => {
				return oFF.BackgroundPatternType.lookup(bpt);
			});
			oFF.QInARepoTableDefinition.importStyledLine(formattingStyle.getStyledLineLeft(), formattingStyleStruct.getStructureByKey("LeftLine"));
			oFF.QInARepoTableDefinition.importStyledLine(formattingStyle.getStyledLineRight(), formattingStyleStruct.getStructureByKey("RightLine"));
			oFF.QInARepoTableDefinition.importStyledLine(formattingStyle.getStyledLineTop(), formattingStyleStruct.getStructureByKey("TopLine"));
			oFF.QInARepoTableDefinition.importStyledLine(formattingStyle.getStyledLineBottom(), formattingStyleStruct.getStructureByKey("BottomLine"));
			formattingStyle.setPriority(formattingStyleStruct.getIntegerByKey("Priority"));
		}
	}
};
oFF.QInARepoTableDefinition.importIndexBasedCellDimensions = function(tableDefinition, inaStructure)
{
	let i;
	let fixedPixelRowHeights = inaStructure.getListByKey("FixedPixelRowHeights");
	if (oFF.XCollectionUtils.hasElements(fixedPixelRowHeights))
	{
		tableDefinition.clearFixedPixelRowHeights();
		for (i = 0; i < fixedPixelRowHeights.size(); i++)
		{
			let rowHeight = fixedPixelRowHeights.getStructureAt(i);
			tableDefinition.setFixedPixelHeightForRow(rowHeight.getIntegerByKey("Index"), rowHeight.getIntegerByKey("Height"));
		}
	}
	let fixedPixelColumnWidths = inaStructure.getListByKey("FixedPixelColumnWidths");
	if (oFF.XCollectionUtils.hasElements(fixedPixelColumnWidths))
	{
		tableDefinition.clearFixedPixelColumnWidths();
		for (i = 0; i < fixedPixelColumnWidths.size(); i++)
		{
			let columnWidth = fixedPixelColumnWidths.getStructureAt(i);
			tableDefinition.setFixedPixelWidthForColumn(columnWidth.getIntegerByKey("Index"), columnWidth.getIntegerByKey("Width"));
		}
	}
};
oFF.QInARepoTableDefinition.importInsertedTuples = function(tupleList, deleter, inserter)
{
	if (oFF.notNull(tupleList))
	{
		deleter();
		for (let i = 0; i < tupleList.size(); i++)
		{
			let structure = tupleList.getStructureAt(i);
			let insertedTuple = inserter(oFF.XStringValue.create(structure.getStringByKey("Name")), oFF.XStringValue.create(structure.getStringByKey("Text")));
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(insertedTuple.getMergedRaw(), structure, "MergeCells", "MergeCellsVariable");
			oFF.QInARepoVisualizationManager.importIntegerOrVariable(insertedTuple.getCellHeightRaw(), structure, "Height", "HeightVariable");
			oFF.QInARepoVisualizationManager.importIntegerOrVariable(insertedTuple.getCellWidthRaw(), structure, "Width", "WidthVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(insertedTuple.getFormattedTextRaw(), structure, "FormattedText", "FormattedTextVariable");
			let scopedStyleList = structure.getListByKey("ScopedStyle");
			if (oFF.notNull(scopedStyleList))
			{
				oFF.XCollectionUtils.forEach(scopedStyleList, (el) => {
					insertedTuple.addScopedStyleName(el.asString().getString());
				});
			}
		}
	}
};
oFF.QInARepoTableDefinition.importLayeredRectangularStyles = function(importer, tableDefinition, inaStructure)
{
	let layeredStyleList = inaStructure.getListByKey("LayeredRectangularStyle");
	if (oFF.notNull(layeredStyleList))
	{
		tableDefinition.clearLayeredRectangularStyles();
	}
	if (oFF.XCollectionUtils.hasElements(layeredStyleList))
	{
		for (let i = 0; i < layeredStyleList.size(); i++)
		{
			let layeredStyleStructure = layeredStyleList.getStructureAt(i);
			let format = tableDefinition.addNewLayeredRectangularStyle(layeredStyleStructure.getStringByKey("Name"), layeredStyleStructure.getStringByKey("Text"));
			format.setStyleName(layeredStyleStructure.getStringByKey("Style"));
			importer.importVisualizationCellReferenceScope(layeredStyleStructure.getStructureByKey("ColumnsScope"), format.getColumnsScope(), tableDefinition);
			importer.importVisualizationCellReferenceScope(layeredStyleStructure.getStructureByKey("RowsScope"), format.getRowsScope(), tableDefinition);
		}
	}
};
oFF.QInARepoTableDefinition.importPageBreakHandling = function(pageBreakStructure, pageBreakHandling)
{
	if (oFF.notNull(pageBreakStructure))
	{
		pageBreakHandling.setBreakAfter(pageBreakStructure.getBooleanByKeyExt("BreakAfter", false));
		pageBreakHandling.setBreakBefore(pageBreakStructure.getBooleanByKeyExt("BreakBefore", false));
		pageBreakHandling.setKeepTogether(pageBreakStructure.getBooleanByKeyExt("KeepTogether", false));
	}
};
oFF.QInARepoTableDefinition.importScopedStyles = function(importer, tableDefinition, inaStructure)
{
	let scopedStyleList = inaStructure.getListByKey("ScopedStyle");
	if (oFF.notNull(scopedStyleList))
	{
		tableDefinition.clearScopedStyles();
	}
	if (oFF.XCollectionUtils.hasElements(scopedStyleList))
	{
		for (let i = 0; i < scopedStyleList.size(); i++)
		{
			let scopedStyleStructure = scopedStyleList.getStructureAt(i);
			let format = tableDefinition.addNewScopedStyle(scopedStyleStructure.getStringByKey("Name"), scopedStyleStructure.getStringByKey("Text"));
			format.setStyleName(scopedStyleStructure.getStringByKey("Style"));
			importer.importVisualizationCellReferenceScope(scopedStyleStructure.getStructureByKey("ColumnsScope"), format.getOrthogonalColumnsScope(), tableDefinition);
			importer.importVisualizationCellReferenceScope(scopedStyleStructure.getStructureByKey("RowsScope"), format.getOrthogonalRowsScope(), tableDefinition);
		}
	}
};
oFF.QInARepoTableDefinition.importStyledLine = function(styledLine, importStructure)
{
	if (oFF.notNull(importStructure))
	{
		oFF.QInARepoVisualizationManager.importDoubleOrVariable(styledLine.getWidthRaw(), importStructure, "LineWidth", "LineWidthVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(styledLine.getColorRaw(), importStructure, "LineColor", "LineColorVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(styledLine.getPatternBackgroundRaw(), importStructure, "PatternBackground", "PatternBackgroundVariable");
		oFF.QInARepoVisualizationManager.importDoubleOrVariable(styledLine.getPatternWidthRaw(), importStructure, "PatternWidth", "PatternWidthVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(styledLine.getPatternColorRaw(), importStructure, "PatternColor", "PatternColorVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(styledLine.getPatternBorderColorRaw(), importStructure, "PatternBorderColor", "PatternBorderColorVariable");
		oFF.QInARepoVisualizationManager.importConstantOrVariable(styledLine.getPatternTypeRaw(), importStructure, "PatternType", "PatternTypeVariable", (bpt) => {
			return oFF.BackgroundPatternType.lookup(bpt);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(styledLine.getLineStyleRaw(), importStructure, "LineStyle", "LineStyleVariable", (tls) => {
			return oFF.TableLineStyle.lookup(tls);
		});
		oFF.QInARepoVisualizationManager.importDoubleOrVariable(styledLine.getLeftPaddingRaw(), importStructure, "PaddingLeft", "PaddingLeftVariable");
		oFF.QInARepoVisualizationManager.importDoubleOrVariable(styledLine.getRightPaddingRaw(), importStructure, "PaddingRight", "PaddingRightVariable");
		oFF.QInARepoVisualizationManager.importDoubleOrVariable(styledLine.getTopPaddingRaw(), importStructure, "PaddingTop", "PaddingTopVariable");
		oFF.QInARepoVisualizationManager.importDoubleOrVariable(styledLine.getBottomPaddingRaw(), importStructure, "PaddingBottom", "PaddingBottomVariable");
	}
};
oFF.QInARepoTableDefinition.importTableDefinition = function(importer, inaStructure, tableDefinition, context)
{
	if (tableDefinition.getName() === null)
	{
		tableDefinition.setName(inaStructure.getStringByKey("Name"));
	}
	if (tableDefinition.getText() === null)
	{
		tableDefinition.setText(inaStructure.getStringByKey("Text"));
	}
	oFF.QInARepoTableDefinition.importFormattingStyles(tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.importDataPointStyles(tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.importScopedStyles(importer, tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.importLayeredRectangularStyles(importer, tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.importTableMarkups(importer, tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.importIndexBasedCellDimensions(tableDefinition, inaStructure);
	oFF.QInARepoTableDefinition.importViewportPagingSettings(tableDefinition, inaStructure);
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getStripeDataRowsRaw(), inaStructure, "StripeDataRows", "StripeDataRowsVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getStripeDataColumnsRaw(), inaStructure, "StripeDataColumns", "StripeDataColumnsVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getFreezeHeaderRowsRaw(), inaStructure, "FreezeHeaderRows", "FreezeHeaderRowsVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getFreezeHeaderColumnsRaw(), inaStructure, "FreezeHeaderColumns", "FreezeHeaderColumnsVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getShowFreezeLinesRaw(), inaStructure, "ShowFreezeLines", "ShowFreezeLinesVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getShowGridRaw(), inaStructure, "ShowGrid", "ShowGridVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getShowDimensionTitlesRaw(), inaStructure, "ShowDimensionTitles", "ShowDimensionTitlesVariable");
	oFF.QInARepoVisualizationManager.importConstantOrVariable(tableDefinition.getTableHeaderCompactionTypeRaw(), inaStructure, "TableHeaderCompactionType", "TableHeaderCompactionTypeVariable", (thct) => {
		return oFF.TableHeaderCompactionType.lookup(thct);
	});
	oFF.QInARepoVisualizationManager.importConstantOrVariable(tableDefinition.getTableMemberHeaderHandlingRaw(), inaStructure, "TableMemberHeaderHandling", "TableMemberHeaderHandlingVariable", (tmhh) => {
		return oFF.TableMemberHeaderHandling.lookup(tmhh);
	});
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getShowCoordinateHeaderRaw(), inaStructure, "ShowCoordinateHeader", "ShowCoordinateHeaderVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(tableDefinition.getShowHyperlinksRaw(), inaStructure, "ShowHyperlinks", "ShowHyperlinksVariable");
	tableDefinition.setFreezeUpToRow(inaStructure.getIntegerByKeyExt("FreezeUpToRow", -1));
	tableDefinition.setFreezeUpToColumn(inaStructure.getIntegerByKeyExt("FreezeUpToColumn", -1));
	if (inaStructure.getBooleanByKey("ShowRepetitiveMemberNames"))
	{
		tableDefinition.setRepetitiveMemberNames(true);
	}
	if (inaStructure.getBooleanByKey("MergeRepetitiveMemberCells"))
	{
		tableDefinition.setMergeRepetitiveMemberCells(true);
	}
	tableDefinition.setHeaderColor(inaStructure.getStringByKey("HeaderColor"));
	tableDefinition.setTotalLevel6Color(inaStructure.getStringByKey("TotalLevel6Color"));
	tableDefinition.setTotalLevel5Color(inaStructure.getStringByKey("TotalLevel5Color"));
	tableDefinition.setTotalLevel4Color(inaStructure.getStringByKey("TotalLevel4Color"));
	tableDefinition.setTotalLevel3Color(inaStructure.getStringByKey("TotalLevel3Color"));
	tableDefinition.setTotalLevel2Color(inaStructure.getStringByKey("TotalLevel2Color"));
	tableDefinition.setTotalLevel1Color(inaStructure.getStringByKey("TotalLevel1Color"));
	tableDefinition.setTotalLevel0Color(inaStructure.getStringByKey("TotalLevel0Color"));
	tableDefinition.setTitle(inaStructure.getStringByKey("Title"));
	oFF.QInARepoVisualizationManager.importTableTemplateLinker(importer, tableDefinition.getTemplateLinker(), inaStructure);
	oFF.QInARepoVisualizationManager.importVariableHolder(importer, tableDefinition.getVisualizationVariableHolder(), inaStructure.getListByKey("Variables"), context);
	oFF.QInARepoVisualizationManager.importDatapointVariableContainers(importer, tableDefinition, inaStructure, context);
};
oFF.QInARepoTableDefinition.importTableMarkups = function(importer, tableDefinition, inaStructure)
{
	let tableMarkupList = inaStructure.getListByKey("TableMarkup");
	if (oFF.notNull(tableMarkupList))
	{
		tableDefinition.clearTableMarkups();
	}
	if (oFF.XCollectionUtils.hasElements(tableMarkupList))
	{
		for (let i = 0; i < tableMarkupList.size(); i++)
		{
			let tableMarkupStructure = tableMarkupList.getStructureAt(i);
			let markup = tableDefinition.addNewTableMarkup(tableMarkupStructure.getStringByKey("Name"), tableMarkupStructure.getStringByKey("Text"));
			oFF.QInARepoTableDefinition.importPageBreakHandling(tableMarkupStructure.getStructureByKey("PageBreak"), markup.getPageBreakHandling());
			oFF.QInARepoVisualizationManager.importBooleanOrVariable(markup.getHideRaw(), tableMarkupStructure, "Hidden", "HiddenVariable");
			oFF.QInARepoVisualizationManager.importIntegerOrVariable(markup.getCellHeightRaw(), tableMarkupStructure, "Height", "HeightVariable");
			oFF.QInARepoVisualizationManager.importIntegerOrVariable(markup.getCellWidthRaw(), tableMarkupStructure, "Width", "WidthVariable");
			oFF.QInARepoVisualizationManager.importIntegerOrVariable(markup.getCellHeightAdditionRaw(), tableMarkupStructure, "HeightAddition", "HeightAdditionVariable");
			oFF.QInARepoVisualizationManager.importIntegerOrVariable(markup.getCellWidthAdditionRaw(), tableMarkupStructure, "WidthAddition", "WidthAdditionVariable");
			markup.setPriority(tableMarkupStructure.getIntegerByKey("Priority"));
			importer.importVisualizationCellReferenceScope(tableMarkupStructure.getStructureByKey("RowsScope"), markup.getRowsScope(), tableDefinition);
			importer.importVisualizationCellReferenceScope(tableMarkupStructure.getStructureByKey("ColumnsScope"), markup.getColumnsScope(), tableDefinition);
			let scopedStyleList = tableMarkupStructure.getListByKey("ScopedStyle");
			if (oFF.notNull(scopedStyleList))
			{
				markup.clearScopedStyles();
				oFF.XCollectionUtils.forEach(scopedStyleList, (sc) => {
					markup.addScopedStyleName(sc.asString().getString());
				});
			}
			let tupleBeforeList = tableMarkupStructure.getListByKey("InsertedTupleBefore");
			oFF.QInARepoTableDefinition.importInsertedTuples(tupleBeforeList, () => {
				markup.clearTuplesBefore();
			}, (n1, t1) => {
				return markup.addNewTupleBefore(n1.getString(), t1.getString());
			});
			let tupleAfterList = tableMarkupStructure.getListByKey("InsertedTupleAfter");
			oFF.QInARepoTableDefinition.importInsertedTuples(tupleAfterList, () => {
				markup.clearTuplesAfter();
			}, (n2, t2) => {
				return markup.addNewTuplesAfter(n2.getString(), t2.getString());
			});
		}
	}
};
oFF.QInARepoTableDefinition.importViewportPagingSettings = function(tableDefinition, inaStructure)
{
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("ViewportPagingSettings"))
	{
		let pagingSettingsIna = inaStructure.getStructureByKey("ViewportPagingSettings");
		let tableViewportPagingSettings = tableDefinition.getTableViewportPagingSettings();
		tableViewportPagingSettings.setMaxColumns(pagingSettingsIna.getIntegerByKeyExt("Columns", 0));
		tableViewportPagingSettings.setMaxRecommendedColumns(pagingSettingsIna.getIntegerByKeyExt("RecommendedColumn", 0));
		tableViewportPagingSettings.setMaxRows(pagingSettingsIna.getIntegerByKeyExt("Rows", 0));
		tableViewportPagingSettings.setMaxRecommendedRows(pagingSettingsIna.getIntegerByKeyExt("RecommendedRows", 0));
		tableViewportPagingSettings.setMaxWidth(pagingSettingsIna.getIntegerByKeyExt("Width", 0));
		tableViewportPagingSettings.setMaxRecommendedWidth(pagingSettingsIna.getIntegerByKeyExt("RecommendedWidth", 0));
		tableViewportPagingSettings.setMaxHeight(pagingSettingsIna.getIntegerByKeyExt("Height", 0));
		tableViewportPagingSettings.setMaxRecommendedHeight(pagingSettingsIna.getIntegerByKeyExt("RecommendedHeight", 0));
		tableViewportPagingSettings.setStartColumn(pagingSettingsIna.getIntegerByKeyExt("StartColumne", 0));
		tableViewportPagingSettings.setEndColumn(pagingSettingsIna.getIntegerByKeyExt("EndColumn", 0));
		tableViewportPagingSettings.setStartRow(pagingSettingsIna.getIntegerByKeyExt("StartRow", 0));
		tableViewportPagingSettings.setEndRow(pagingSettingsIna.getIntegerByKeyExt("EndRow", 0));
		tableViewportPagingSettings.setRowPageBreakIsStylingBoundary(pagingSettingsIna.getBooleanByKeyExt("RowPageBreakIsBoundary", true));
		tableViewportPagingSettings.setColumnPageBreakIsStylingBoundary(pagingSettingsIna.getBooleanByKeyExt("ColumnPageBreakIsBoundary", true));
	}
};
oFF.QInARepoTableDefinition.putBooleanIfTrue = function(structure, key, booleanValue)
{
	if (booleanValue)
	{
		structure.putBoolean(key, true);
	}
};
oFF.QInARepoTableDefinition.putIntIfGT0 = function(structure, key, intValue)
{
	if (intValue > 0)
	{
		structure.putInteger(key, intValue);
	}
};
oFF.QInARepoTableDefinition.setTriStateBool = function(struct, key, tsb)
{
	if (tsb === oFF.TriStateBool._TRUE)
	{
		struct.putBoolean(key, true);
	}
	else if (tsb === oFF.TriStateBool._FALSE)
	{
		struct.putBoolean(key, false);
	}
};
oFF.QInARepoTableDefinition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (oFF.notNull(inaStructure) && oFF.notNull(modelComponent))
	{
		let tableDefinition = modelComponent;
		oFF.QInARepoTableDefinition.exportTableDefinition(exporter, tableDefinition, inaStructure);
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoTableDefinition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION;
};
oFF.QInARepoTableDefinition.prototype.getTagName = function()
{
	return "TableDefinition";
};
oFF.QInARepoTableDefinition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(modelComponent) && oFF.notNull(inaStructure) && modelComponent.getComponentType() === oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION)
	{
		let tableDefinition = modelComponent;
		oFF.QInARepoTableDefinition.importTableDefinition(importer, inaStructure, tableDefinition, context);
	}
	return modelComponent;
};

oFF.QInARepoVisualizationManager = function() {};
oFF.QInARepoVisualizationManager.prototype = new oFF.QInARepository();
oFF.QInARepoVisualizationManager.prototype._ff_c = "QInARepoVisualizationManager";

oFF.QInARepoVisualizationManager.exportAxisPathsElements = function(axisPathElements, inaStructure)
{
	if (oFF.XCollectionUtils.hasElements(axisPathElements))
	{
		let axisPathElementList = inaStructure.putNewList("ReferencePathElements");
		for (let i = 0; i < axisPathElements.size(); i++)
		{
			let axisPathElement = axisPathElements.get(i);
			let axisPathElementStruct = axisPathElementList.addNewStructure();
			axisPathElementStruct.putInteger("AxisLevel", axisPathElement.getAxisLevel());
			axisPathElementStruct.putInteger("HierarchyLevel", axisPathElement.getHierarchyLevel());
			axisPathElementStruct.putBoolean("HierarchyLevelExact", axisPathElement.isExactHierarchyLevel());
			axisPathElementStruct.putString("HierarchyLevelName", axisPathElement.getHierarchyLevelName());
			oFF.QInARepoVisualizationManager.setTriStateBool(axisPathElementStruct, "IncludeHeaderBand", axisPathElement.isIncludeHeaderBand());
			oFF.QInARepoVisualizationManager.setTriStateBool(axisPathElementStruct, "IncludeTotalsBand", axisPathElement.isIncludeTotalsBand());
			oFF.QInARepoVisualizationManager.setTriStateBool(axisPathElementStruct, "IncludeSubdrills", axisPathElement.isIncludeSubDrills());
			oFF.QInARepoVisualizationManager.setTriStateBool(axisPathElementStruct, "Expanded", axisPathElement.isMatchesExpanded());
			oFF.QInARepoVisualizationManager.setTriStateBool(axisPathElementStruct, "Leaves", axisPathElement.isMatchesLeaves());
			oFF.QInARepoVisualizationManager.setTriStateBool(axisPathElementStruct, "Totals", axisPathElement.isMatchesTotals());
			axisPathElementStruct.putString("LowerLevelNodeAlignment", oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA(axisPathElement.getHierarchyAlignment()));
			oFF.QInARepoVisualizationManager.exportStringListOrVariable(axisPathElement.getMemberNamesRaw(), axisPathElementStruct, "MemberNames", "MemberNamesVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getDimensionNameRaw(), axisPathElementStruct, "DimensionName", "DimensionNameVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getAttributeNameRaw(), axisPathElementStruct, "AttributeName", "AttributeNameVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getFieldNameRaw(), axisPathElementStruct, "FieldName", "FieldNameVariable");
			oFF.QInARepoVisualizationManager.exportConstantOrVariable(axisPathElement.getDimensionTypeRaw(), axisPathElementStruct, "DimensionType", "DimensionTypeVariable");
			oFF.QInARepoVisualizationManager.exportStringOrVariable(axisPathElement.getSemanticTypeRaw(), axisPathElementStruct, "SemanticType", "SemanticTypeVariable");
			oFF.QInARepoVisualizationManager.exportConstantOrVariable(axisPathElement.getPresentationTypeRaw(), axisPathElementStruct, "PresentationType", "PresentationTypeVariable");
		}
	}
};
oFF.QInARepoVisualizationManager.exportBooleanOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (valueHolder.isFixedValue())
	{
		inaStructure.putBoolean(fixedValueKey, valueHolder.getBoolean());
	}
	else if (valueHolder.isVariable())
	{
		inaStructure.putStringNotNullAndNotEmpty(variableNameKey, valueHolder.getVariableName());
	}
};
oFF.QInARepoVisualizationManager.exportChartTemplateLinker = function(exporter, templateLinker, inaDefinition)
{
	let linkNames = templateLinker.getLinkedDefinitionNames();
	if (oFF.XCollectionUtils.hasElements(linkNames))
	{
		let nameList = inaDefinition.putNewList("LinkedDefinitionNames");
		oFF.XCollectionUtils.forEach(linkNames.getKeysAsReadOnlyList(), (nameKey) => {
			let nameStruct = nameList.addNewStructure();
			nameStruct.putString("Key", nameKey);
			nameStruct.putString("Name", linkNames.getByKey(nameKey));
		});
	}
	let linkedStylings = templateLinker.getLinkedDefinitions();
	if (oFF.XCollectionUtils.hasElements(linkedStylings))
	{
		let linkedStylingsList = inaDefinition.putNewList("LinkedStylings");
		oFF.XCollectionUtils.forEach(linkedStylings.getKeysAsReadOnlyList(), (defKey) => {
			let linkedDefinitionStruct = linkedStylingsList.addNewStructure();
			linkedDefinitionStruct.putString("Key", defKey);
			exporter.exportVisualizationChartStyle(linkedStylings.getByKey(defKey), linkedDefinitionStruct.putNewStructure("ChartStyle"));
		});
	}
};
oFF.QInARepoVisualizationManager.exportConstantListOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (valueHolder.isFixedValue())
	{
		let list = inaStructure.putNewList(fixedValueKey);
		oFF.XCollectionUtils.forEach(valueHolder.getFixedValues(), (fv) => {
			list.addString(fv.getName());
		});
	}
	else if (valueHolder.isVariable())
	{
		inaStructure.putStringNotNullAndNotEmpty(variableNameKey, valueHolder.getVariableName());
	}
};
oFF.QInARepoVisualizationManager.exportConstantOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (valueHolder.isFixedValue())
	{
		inaStructure.putStringNotNullAndNotEmpty(fixedValueKey, valueHolder.getFixedValue().getName());
	}
	else if (valueHolder.isVariable())
	{
		inaStructure.putStringNotNullAndNotEmpty(variableNameKey, valueHolder.getVariableName());
	}
};
oFF.QInARepoVisualizationManager.exportDataPointContext = function(dataPointContext, dataPointStyleStructure)
{
	if (dataPointContext.isUnmatchedTags())
	{
		dataPointStyleStructure.putBoolean("TagsUnmatched", true);
	}
	else if (oFF.XCollectionUtils.hasElements(dataPointContext.getTags()))
	{
		let tagList = dataPointStyleStructure.putNewList("Tags");
		oFF.XCollectionUtils.forEach(dataPointContext.getTags(), (tag) => {
			tagList.addString(tag);
		});
	}
	if (dataPointContext.isUnmatchedPathElements())
	{
		dataPointStyleStructure.putBoolean("ReferencePathElementsUnmatched", true);
	}
	else
	{
		oFF.QInARepoVisualizationManager.exportAxisPathsElements(dataPointContext.getPathElements(), dataPointStyleStructure);
	}
	if (dataPointContext.isUnmatchedExceptions())
	{
		dataPointStyleStructure.putBoolean("ExceptionsUnmatched", true);
	}
	else
	{
		dataPointStyleStructure.putString("ExceptionName", dataPointContext.getExceptionName());
	}
	if (dataPointContext.isUnmatchedAlertLevels())
	{
		dataPointStyleStructure.putBoolean("AlertLevelsUnmatched", true);
	}
	else
	{
		if (dataPointContext.getAlertLevelMin() !== null)
		{
			dataPointStyleStructure.putInteger("AlertLevelMin", dataPointContext.getAlertLevelMin().getLevel());
		}
		if (dataPointContext.getAlertLevelMax() !== null)
		{
			dataPointStyleStructure.putInteger("AlertLevelMax", dataPointContext.getAlertLevelMax().getLevel());
		}
	}
	if (dataPointContext.isUnmatchedValueSigns())
	{
		dataPointStyleStructure.putBoolean("ValueSignsUnmatched", true);
	}
	else if (dataPointContext.getValueSign() !== null)
	{
		dataPointStyleStructure.putString("ValueSign", dataPointContext.getValueSign().getName());
	}
	dataPointStyleStructure.putInteger("Priority", dataPointContext.getPriority());
};
oFF.QInARepoVisualizationManager.exportDataPointVariableContainer = function(_export, dataPointVariableContainer, inaStructure)
{
	inaStructure.putString("Name", dataPointVariableContainer.getName());
	inaStructure.putString("Text", dataPointVariableContainer.getText());
	inaStructure.putStringNotNullAndNotEmpty("DataPointCategoryName", dataPointVariableContainer.getDataPointCategoryName());
	inaStructure.putStringNotNullAndNotEmpty("DataPointCategoryText", dataPointVariableContainer.getDataPointCategoryText());
	oFF.QInARepoVisualizationManager.exportVariableHolder(_export, dataPointVariableContainer.getVariableHolder(), inaStructure);
	oFF.QInARepoVisualizationManager.exportDataPointContext(dataPointVariableContainer, inaStructure);
};
oFF.QInARepoVisualizationManager.exportDataPointVariableContainers = function(_export, dataPointVariableContainers, inaStructure)
{
	if (oFF.XCollectionUtils.hasElements(dataPointVariableContainers))
	{
		let dpvInAList = inaStructure.putNewList("DataPointVariables");
		oFF.XCollectionUtils.forEach(dataPointVariableContainers, (dpvc) => {
			oFF.QInARepoVisualizationManager.exportDataPointVariableContainer(_export, dpvc, dpvInAList.addNewStructure());
		});
	}
};
oFF.QInARepoVisualizationManager.exportDoubleOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (valueHolder.isFixedValue())
	{
		inaStructure.putDouble(fixedValueKey, valueHolder.getDouble());
	}
	else if (valueHolder.isVariable())
	{
		inaStructure.putStringNotNullAndNotEmpty(variableNameKey, valueHolder.getVariableName());
	}
};
oFF.QInARepoVisualizationManager.exportIntegerOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (valueHolder.isFixedValue())
	{
		inaStructure.putInteger(fixedValueKey, valueHolder.getInteger());
	}
	else if (valueHolder.isVariable())
	{
		inaStructure.putStringNotNullAndNotEmpty(variableNameKey, valueHolder.getVariableName());
	}
};
oFF.QInARepoVisualizationManager.exportMemberRestriction = function(prList, memberRestriction)
{
	if (oFF.XCollectionUtils.hasElements(memberRestriction))
	{
		oFF.XCollectionUtils.forEach(memberRestriction.getKeysAsReadOnlyList(), (key) => {
			let structure = prList.addNewStructure();
			structure.putString("Dimension", key);
			let subList = structure.putNewList("Members");
			oFF.XCollectionUtils.forEach(memberRestriction.getByKey(key), (member) => {
				subList.addString(member);
			});
		});
	}
};
oFF.QInARepoVisualizationManager.exportSelectionPath = function(prList, selectionPath)
{
	if (oFF.XCollectionUtils.hasElements(selectionPath))
	{
		oFF.XCollectionUtils.forEach(selectionPath.getKeysAsReadOnlyList(), (key) => {
			let structure = prList.addNewStructure();
			structure.putString("Dimension", key);
			structure.putString("Member", selectionPath.getByKey(key));
		});
	}
};
oFF.QInARepoVisualizationManager.exportStringListOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (valueHolder.isFixedValue())
	{
		let list = inaStructure.putNewList(fixedValueKey);
		oFF.XCollectionUtils.forEach(valueHolder.getFixedStringList(), (fv) => {
			list.addString(fv);
		});
	}
	else if (valueHolder.isVariable())
	{
		inaStructure.putStringNotNullAndNotEmpty(variableNameKey, valueHolder.getVariableName());
	}
};
oFF.QInARepoVisualizationManager.exportStringOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (valueHolder.isFixedValue())
	{
		inaStructure.putStringNotNullAndNotEmpty(fixedValueKey, valueHolder.getString());
	}
	else if (valueHolder.isVariable())
	{
		inaStructure.putStringNotNullAndNotEmpty(variableNameKey, valueHolder.getVariableName());
	}
};
oFF.QInARepoVisualizationManager.exportTableTemplateLinker = function(exporter, templateLinker, inaStructure)
{
	let linkNames = templateLinker.getLinkedDefinitionNames();
	if (oFF.XCollectionUtils.hasElements(linkNames))
	{
		let nameList = inaStructure.putNewList("LinkedDefinitionNames");
		oFF.XCollectionUtils.forEach(linkNames.getKeysAsReadOnlyList(), (nameKey) => {
			let nameStruct = nameList.addNewStructure();
			nameStruct.putString("Key", nameKey);
			nameStruct.putString("Name", linkNames.getByKey(nameKey));
		});
	}
	let linkedDefinitions = templateLinker.getLinkedDefinitions();
	if (oFF.XCollectionUtils.hasElements(linkedDefinitions))
	{
		let linkedDefinitionsList = inaStructure.putNewList("LinkedDefinitions");
		oFF.XCollectionUtils.forEach(linkedDefinitions.getKeysAsReadOnlyList(), (defKey) => {
			let linkedDefinitionStruct = linkedDefinitionsList.addNewStructure();
			linkedDefinitionStruct.putString("Key", defKey);
			oFF.QInARepoTableDefinition.exportTableDefinition(exporter, linkedDefinitions.getByKey(defKey), linkedDefinitionStruct.putNewStructure("TableDefinition"));
		});
	}
};
oFF.QInARepoVisualizationManager.exportVariableHolder = function(exporter, variableContainer, inaStructure)
{
	let variables = variableContainer.getVariables();
	if (oFF.XCollectionUtils.hasElements(variables))
	{
		let inaVariableList = inaStructure.putNewList("Variables");
		let len = variables.size();
		for (let i = 0; i < len; i++)
		{
			let variable = variables.get(i);
			let inaVariable = exporter.exportVariable(variable, null);
			if (oFF.notNull(variable) && oFF.notNull(inaVariable) && variable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
			{
				let valueTypeString = oFF.QInAConverter.lookupValueTypeInA(variable.getValueType());
				inaVariable.putString("ValueType", valueTypeString);
			}
			inaVariableList.add(inaVariable);
		}
	}
};
oFF.QInARepoVisualizationManager.exportVisualizationTypeSpecificStyles = function(exporter, visualizationSpecificStyleContainers, stylePrList)
{
	oFF.XCollectionUtils.forEach(visualizationSpecificStyleContainers, (styleContainer) => {
		let styleStructure = stylePrList.addNewStructure();
		styleStructure.putStringNotNull("Type", oFF.QInAConverter.lookupComponentTypeInA(styleContainer.getVisualizationType()));
		let chartTypes = styleContainer.getMatchingChartTypes();
		if (oFF.XCollectionUtils.hasElements(chartTypes))
		{
			let chartTypeList = styleStructure.putNewList("ChartTypes");
			oFF.XCollectionUtils.forEach(chartTypes, (chartType) => {
				chartTypeList.addString(chartType.getName());
			});
		}
		oFF.QInARepoVisualizationManager.exportVariableHolder(exporter, styleContainer.getVisualizationVariableHolder(), styleStructure);
		oFF.QInARepoVisualizationManager.exportDataPointVariableContainers(exporter, styleContainer.getDatapointVariableContainers(), styleStructure);
		oFF.QInARepoVisualizationManager.exportChartTemplateLinker(exporter, styleContainer.getChartTemplateLinker(), styleStructure.getStructureByKey("ChartTemplates"));
		oFF.QInARepoVisualizationManager.exportTableTemplateLinker(exporter, styleContainer.getTableTemplateLinker(), styleStructure.getStructureByKey("TableTemplates"));
	});
};
oFF.QInARepoVisualizationManager.getTriStateBool = function(struct, key)
{
	let result = oFF.TriStateBool._DEFAULT;
	if (struct.containsKey(key))
	{
		result = struct.getBooleanByKey(key) ? oFF.TriStateBool._TRUE : oFF.TriStateBool._FALSE;
	}
	return result;
};
oFF.QInARepoVisualizationManager.importAxisPaths = function(format, inaStructure)
{
	let axisPathElementList = inaStructure.getListByKey("ReferencePathElements");
	if (oFF.notNull(axisPathElementList))
	{
		format.clearPathElements();
		for (let i = 0; i < axisPathElementList.size(); i++)
		{
			let axisPathElementStruct = axisPathElementList.getStructureAt(i);
			let newAxisPathElement = format.addNewPathElement();
			newAxisPathElement.setAxisLevel(axisPathElementStruct.getIntegerByKeyExt("AxisLevel", -1));
			newAxisPathElement.setHierarchyLevel(axisPathElementStruct.getIntegerByKeyExt("HierarchyLevel", -1));
			newAxisPathElement.setExactHierarchyLevel(axisPathElementStruct.getBooleanByKeyExt("HierarchyLevelExact", false));
			newAxisPathElement.setHierarchyLevelName(axisPathElementStruct.getStringByKey("HierarchyLevelName"));
			newAxisPathElement.setIncludeHeaderBand(oFF.QInARepoVisualizationManager.getTriStateBool(axisPathElementStruct, "IncludeHeaderBand"));
			newAxisPathElement.setIncludeTotalsBand(oFF.QInARepoVisualizationManager.getTriStateBool(axisPathElementStruct, "IncludeTotalsBand"));
			newAxisPathElement.setIncludeSubDrills(oFF.QInARepoVisualizationManager.getTriStateBool(axisPathElementStruct, "IncludeSubdrills"));
			newAxisPathElement.setMatchesExpanded(oFF.QInARepoVisualizationManager.getTriStateBool(axisPathElementStruct, "Expanded"));
			newAxisPathElement.setMatchesLeaves(oFF.QInARepoVisualizationManager.getTriStateBool(axisPathElementStruct, "Leaves"));
			newAxisPathElement.setMatchesTotals(oFF.QInARepoVisualizationManager.getTriStateBool(axisPathElementStruct, "Totals"));
			if (axisPathElementStruct.hasStringByKey("LowerLevelNodeAlignment"))
			{
				newAxisPathElement.setHierarchyAlignment(oFF.QInAConverter.lookupLowerLevelNodeAlignment(axisPathElementStruct.getStringByKey("LowerLevelNodeAlignment")));
			}
			oFF.QInARepoVisualizationManager.importStringListOrVariable(newAxisPathElement.getMemberNamesRaw(), axisPathElementStruct, "MemberNames", "MemberNamesVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getDimensionNameRaw(), axisPathElementStruct, "DimensionName", "DimensionNameVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getAttributeNameRaw(), axisPathElementStruct, "AttributeName", "AttributeNameVariable");
			oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getFieldNameRaw(), axisPathElementStruct, "FieldName", "FieldNameVariable");
			oFF.QInARepoVisualizationManager.importConstantOrVariable(newAxisPathElement.getDimensionTypeRaw(), axisPathElementStruct, "DimensionType", "DimensionTypeVariable", (c) => {
				return oFF.XComponentType.lookupComponentType(c);
			});
			oFF.QInARepoVisualizationManager.importStringOrVariable(newAxisPathElement.getSemanticTypeRaw(), axisPathElementStruct, "SemanticType", "SemanticTypeVariable");
			oFF.QInARepoVisualizationManager.importConstantOrVariable(newAxisPathElement.getPresentationTypeRaw(), axisPathElementStruct, "PresentationType", "PresentationTypeVariable", (p) => {
				return oFF.PresentationType.lookup(p);
			});
		}
	}
};
oFF.QInARepoVisualizationManager.importBooleanOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (inaStructure.containsKey(fixedValueKey))
	{
		valueHolder.setBoolean(inaStructure.getBooleanByKey(fixedValueKey));
	}
	else if (inaStructure.containsKey(variableNameKey))
	{
		valueHolder.setVariableName(inaStructure.getStringByKey(variableNameKey));
	}
};
oFF.QInARepoVisualizationManager.importChartTemplateLinker = function(importer, templateLinker, inaStructure)
{
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("LinkedStylingNames"))
	{
		let linkNameList = inaStructure.getListByKey("LinkedStylingNames");
		oFF.XCollectionUtils.forEach(linkNameList, (linkNameStruct) => {
			let linkNameStructure = linkNameStruct.asStructure();
			templateLinker.putLinkedDefinitionName(linkNameStructure.getStringByKey("Key"), linkNameStructure.getStringByKey("Name"));
		});
	}
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("LinkedStylings"))
	{
		let linkDefList = inaStructure.getListByKey("LinkedStylings");
		oFF.XCollectionUtils.forEach(linkDefList, (linkDefStruct) => {
			let linkStyleStructure = linkDefStruct.asStructure();
			let linkedChartStyle = oFF.QChartStyle.create(templateLinker.getContext(), null);
			importer.importVisualizationChartStyle(linkStyleStructure.getStructureByKey("ChartStyle"), linkedChartStyle, null);
			templateLinker.putLinkedDefinition(linkStyleStructure.getStringByKey("Key"), linkedChartStyle);
		});
	}
};
oFF.QInARepoVisualizationManager.importConstantListOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey, lookupFunction)
{
	if (inaStructure.containsKey(fixedValueKey))
	{
		oFF.XCollectionUtils.forEach(inaStructure.getListByKey(fixedValueKey), (el) => {
			valueHolder.addFixedValue(lookupFunction(el.asString().getString()));
		});
	}
	else if (inaStructure.containsKey(variableNameKey))
	{
		valueHolder.setVariableName(inaStructure.getStringByKey(variableNameKey));
	}
};
oFF.QInARepoVisualizationManager.importConstantOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey, lookupFunction)
{
	if (inaStructure.containsKey(fixedValueKey))
	{
		valueHolder.setFixedValue(lookupFunction(inaStructure.getStringByKey(fixedValueKey)));
	}
	else if (inaStructure.containsKey(variableNameKey))
	{
		valueHolder.setVariableName(inaStructure.getStringByKey(variableNameKey));
	}
};
oFF.QInARepoVisualizationManager.importDataPointContext = function(format, dataPointFormatting)
{
	if (dataPointFormatting.getBooleanByKeyExt("TagsUnmatched", false))
	{
		format.setUnmatchedTags();
	}
	else
	{
		let tagList = dataPointFormatting.getListByKey("Tags");
		if (oFF.XCollectionUtils.hasElements(tagList))
		{
			oFF.XCollectionUtils.forEach(tagList, (tagElement) => {
				format.addTag(tagElement.asString().getString());
			});
		}
	}
	if (dataPointFormatting.getBooleanByKeyExt("ReferencePathElementsUnmatched", false))
	{
		format.setUnmatchedPathElements();
	}
	else
	{
		oFF.QInARepoVisualizationManager.importAxisPaths(format, dataPointFormatting);
	}
	if (dataPointFormatting.getBooleanByKeyExt("ExceptionsUnmatched", false))
	{
		format.setUnmatchedExceptions();
	}
	else
	{
		format.setExceptionName(dataPointFormatting.getStringByKey("ExceptionName"));
	}
	if (dataPointFormatting.getBooleanByKeyExt("AlertLevelsUnmatched", false))
	{
		format.setUnmatchedAlertLevels();
	}
	else
	{
		format.setAlertLevelMin(oFF.QInAConverter.lookupAlertLevel(dataPointFormatting.getIntegerByKeyExt("AlertLevelMin", -1)));
		format.setAlertLevelMax(oFF.QInAConverter.lookupAlertLevel(dataPointFormatting.getIntegerByKeyExt("AlertLevelMax", -1)));
	}
	if (dataPointFormatting.getBooleanByKeyExt("ValueSignsUnmatched", false))
	{
		format.setUnmatchedValueSigns();
	}
	else
	{
		format.setValueSign(oFF.ValueSign.get(dataPointFormatting.getStringByKey("ValueSign")));
	}
	format.setPriority(dataPointFormatting.getIntegerByKey("Priority"));
};
oFF.QInARepoVisualizationManager.importDatapointVariableContainer = function(importer, stylingVariableHolder, inaStructure, context)
{
	let dataPointVariableContainer = stylingVariableHolder.addNewDatapointVariableContainer(inaStructure.getStringByKey("Name"), inaStructure.getStringByKey("Text"));
	if (inaStructure.hasStringByKey("DataPointCategoryName"))
	{
		dataPointVariableContainer.setDataPointCategoryName(inaStructure.getStringByKey("DataPointCategoryName"));
	}
	if (inaStructure.hasStringByKey("DataPointCategoryText"))
	{
		dataPointVariableContainer.setDataPointCategoryText(inaStructure.getStringByKey("DataPointCategoryText"));
	}
	oFF.QInARepoVisualizationManager.importVariableHolder(importer, dataPointVariableContainer.getVariableHolder(), inaStructure.getListByKey("Variables"), context);
	oFF.QInARepoVisualizationManager.importDataPointContext(dataPointVariableContainer, inaStructure);
};
oFF.QInARepoVisualizationManager.importDatapointVariableContainers = function(importer, stylingVariableHolder, inaStructure, context)
{
	let inaList = inaStructure.getListByKey("DataPointVariables");
	let size = oFF.XCollectionUtils.size(inaList);
	for (let i = 0; i < size; i++)
	{
		oFF.QInARepoVisualizationManager.importDatapointVariableContainer(importer, stylingVariableHolder, inaList.getStructureAt(i), context);
	}
};
oFF.QInARepoVisualizationManager.importDoubleOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (inaStructure.containsKey(fixedValueKey))
	{
		valueHolder.setDouble(inaStructure.getDoubleByKey(fixedValueKey));
	}
	else if (inaStructure.containsKey(variableNameKey))
	{
		valueHolder.setVariableName(inaStructure.getStringByKey(variableNameKey));
	}
};
oFF.QInARepoVisualizationManager.importIntegerOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (inaStructure.containsKey(fixedValueKey))
	{
		valueHolder.setInteger(inaStructure.getIntegerByKey(fixedValueKey));
	}
	else if (inaStructure.containsKey(variableNameKey))
	{
		valueHolder.setVariableName(inaStructure.getStringByKey(variableNameKey));
	}
};
oFF.QInARepoVisualizationManager.importMemberRestrictions = function(visualizationDefinitionBase, restrictions)
{
	visualizationDefinitionBase.clearSelectionPath();
	oFF.XCollectionUtils.forEach(restrictions, (restriction) => {
		let restrictionSel = restriction.asStructure();
		let dimensionName = restrictionSel.getStringByKey("Dimension");
		let memberNames = restrictionSel.getListByKey("Members");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName) && oFF.XCollectionUtils.hasElements(memberNames))
		{
			oFF.XCollectionUtils.forEach(memberNames, (memberName) => {
				visualizationDefinitionBase.putMemberNameToRestriction(dimensionName, memberName.asString().getString());
			});
		}
	});
};
oFF.QInARepoVisualizationManager.importSelectionPath = function(visualizationDefinitionBase, pathElements)
{
	visualizationDefinitionBase.clearSelectionPath();
	oFF.XCollectionUtils.forEach(pathElements, (pathElement) => {
		let pathElementSel = pathElement.asStructure();
		let dimensionName = pathElementSel.getStringByKey("Dimension");
		let memberName = pathElementSel.getStringByKey("Member");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName) && oFF.XStringUtils.isNotNullAndNotEmpty(memberName))
		{
			visualizationDefinitionBase.putSelectionPathElement(dimensionName, memberName);
		}
	});
};
oFF.QInARepoVisualizationManager.importStringListOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (inaStructure.containsKey(fixedValueKey))
	{
		oFF.XCollectionUtils.forEach(inaStructure.getListByKey(fixedValueKey), (el) => {
			valueHolder.addString(el.asString().getString());
		});
	}
	else if (inaStructure.containsKey(variableNameKey))
	{
		valueHolder.setVariableName(inaStructure.getStringByKey(variableNameKey));
	}
};
oFF.QInARepoVisualizationManager.importStringOrVariable = function(valueHolder, inaStructure, fixedValueKey, variableNameKey)
{
	if (inaStructure.containsKey(fixedValueKey))
	{
		valueHolder.setString(inaStructure.getStringByKey(fixedValueKey));
	}
	else if (inaStructure.containsKey(variableNameKey))
	{
		valueHolder.setVariableName(inaStructure.getStringByKey(variableNameKey));
	}
};
oFF.QInARepoVisualizationManager.importTableTemplateLinker = function(importer, templateLinker, inaStructure)
{
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("LinkedDefinitionNames"))
	{
		templateLinker.clearLinkedDefinitionNames();
		let linkNameList = inaStructure.getListByKey("LinkedDefinitionNames");
		oFF.XCollectionUtils.forEach(linkNameList, (linkNameStruct) => {
			let linkNameStructure = linkNameStruct.asStructure();
			templateLinker.putLinkedDefinitionName(linkNameStructure.getStringByKey("Key"), linkNameStructure.getStringByKey("Name"));
		});
	}
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("LinkedDefinitions"))
	{
		let linkDefList = inaStructure.getListByKey("LinkedDefinitions");
		oFF.XCollectionUtils.forEach(linkDefList, (linkDefStruct) => {
			let linkDefStructure = linkDefStruct.asStructure();
			let linkedTableDef = oFF.QTableDefinition.create(templateLinker.getContext(), null, null, oFF.ProtocolBindingType.SAC_TABLE_GRID, oFF.SemanticBindingType.TABLE);
			oFF.QInARepoTableDefinition.importTableDefinition(importer, linkDefStructure.getStructureByKey("TableDefinition"), linkedTableDef, templateLinker.getContext());
			templateLinker.putLinkedDefinition(linkDefStructure.getStringByKey("Key"), linkedTableDef);
		});
	}
};
oFF.QInARepoVisualizationManager.importVariableHolder = function(importer, variableContainer, inaList, context)
{
	variableContainer.clearVariables();
	if (oFF.notNull(inaList))
	{
		let len = inaList.size();
		for (let varIdx = 0; varIdx < len; varIdx++)
		{
			let inaVariable = inaList.getStructureAt(varIdx);
			let variableName = inaVariable.getStringByKey("Name");
			let variableText = inaVariable.getStringByKey("Text");
			let variable = variableContainer.getVariable(variableName);
			if (oFF.isNull(variable))
			{
				let hasMultipleValues = inaVariable.getBooleanByKeyExt("MultipleValues", false) || oFF.XCollectionUtils.size(oFF.PrUtils.getListProperty(inaVariable, "SimpleBooleanValues")) > 1 || oFF.XCollectionUtils.size(oFF.PrUtils.getListProperty(inaVariable, "SimpleNumericValues")) > 1 || oFF.XCollectionUtils.size(oFF.PrUtils.getListProperty(inaVariable, "SimpleStringValues")) > 1;
				let inaVariableType = inaVariable.getStringByKey("VariableType");
				if (oFF.XStringUtils.isNullOrEmpty(inaVariableType))
				{
					inaVariableType = inaVariable.getStringByKey("CType");
				}
				let variableContainerBase = variableContainer.getVariableContainerBase();
				if (oFF.XString.isEqual("DimensionMemberVariable", inaVariableType))
				{
					variable = oFF.QDimensionMemberVariable.createDimensionMemberVariable(context, variableContainerBase, variableName, variableText);
				}
				else if (oFF.XString.isEqual("OptionListVariable", inaVariableType))
				{
					variable = oFF.QSimpleTypeVariable.createOptionListVariable(context, variableContainerBase, variableName, variableText, hasMultipleValues);
				}
				else if (oFF.XString.isEqual("SimpleTypeVariable", inaVariableType))
				{
					let inaValueType = oFF.PrUtils.getStringValueProperty(inaVariable, "ValueType", "String");
					let valueType = oFF.QInAConverter.lookupValueType(inaValueType);
					variable = oFF.QSimpleTypeVariable.createSimpleTypeVariable(context, variableContainerBase, valueType, variableName, variableText, hasMultipleValues);
				}
				variableContainer.addVariable(variable);
			}
			if (oFF.notNull(variable))
			{
				let variableType = variable.getVariableType();
				if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
				{
					importer.importSimpleTypeVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
				{
					importer.importDimensionMemberVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
				{
					importer.importOptionListVariable(inaVariable, variable, context);
				}
				else
				{
					importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate5("The variable '", variableName, "' of variable type '", variableType.getName(), "' was not imported correctly"));
				}
				variable.setInputEnabled(true);
			}
		}
	}
};
oFF.QInARepoVisualizationManager.importVisualizationTypeSpecificStyles = function(importer, visualizationManager, stylesIna, context)
{
	if (oFF.XCollectionUtils.hasElements(stylesIna))
	{
		visualizationManager.clearVisualizationSpecificStyleContainers();
		oFF.XCollectionUtils.forEach(stylesIna, (styleIna) => {
			if (oFF.notNull(styleIna) && styleIna.isStructure())
			{
				let styleStructure = styleIna.asStructure();
				let styleContainer = visualizationManager.addNewVisualizationSpecificStyleContainer();
				styleContainer.setVisualizationType(oFF.QInAConverter.lookupComponentType(styleStructure.getStringByKey("Type")));
				let chartTypes = styleStructure.getListByKey("ChartTypes");
				if (oFF.XCollectionUtils.hasElements(chartTypes))
				{
					oFF.XCollectionUtils.forEach(chartTypes, (chartTypeIna) => {
						if (oFF.notNull(chartTypeIna) && chartTypeIna.isString())
						{
							styleContainer.addChartType(oFF.ChartType.lookup(chartTypeIna.asString().getString()));
						}
					});
				}
				oFF.QInARepoVisualizationManager.importVariableHolder(importer, styleContainer.getVisualizationVariableHolder(), styleStructure.getListByKey("Variables"), context);
				oFF.QInARepoVisualizationManager.importDatapointVariableContainers(importer, styleContainer, styleStructure, context);
				oFF.QInARepoVisualizationManager.importChartTemplateLinker(importer, styleContainer.getChartTemplateLinker(), styleStructure.getStructureByKey("ChartTemplates"));
				oFF.QInARepoVisualizationManager.importTableTemplateLinker(importer, styleContainer.getTableTemplateLinker(), styleStructure.getStructureByKey("TableTemplates"));
			}
		});
	}
};
oFF.QInARepoVisualizationManager.setTriStateBool = function(struct, key, tsb)
{
	if (tsb === oFF.TriStateBool._TRUE)
	{
		struct.putBoolean(key, true);
	}
	else if (tsb === oFF.TriStateBool._FALSE)
	{
		struct.putBoolean(key, false);
	}
};
oFF.QInARepoVisualizationManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaList = null;
	let visualizationManagerBase = modelComponent;
	let visualizationDefinitions = visualizationManagerBase.getVisualizationDefinitions();
	if (oFF.XCollectionUtils.hasElements(visualizationDefinitions))
	{
		inaList = oFF.PrFactory.createList();
		for (let i = 0; i < visualizationDefinitions.size(); i++)
		{
			let visDef = visualizationDefinitions.get(i);
			if (this.exportVisualizationDefinition(visualizationManagerBase, visDef))
			{
				let structure = inaList.addNewStructure();
				structure.putString("Name", visDef.getName());
				structure.putString("ProtocolBindingType", visDef.getProtocolBindingType().getName());
				structure.putString("SemanticBindingType", visDef.getSemanticBindingType().getName());
				exporter.exportVisualizationDefinition(visDef, structure);
			}
		}
	}
	return inaList;
};
oFF.QInARepoVisualizationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (oFF.notNull(modelComponent) && modelComponent.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_MANAGER)
	{
		let inaList = this.exportComponentWithList(exporter, modelComponent, flags);
		if (oFF.XCollectionUtils.hasElements(inaList))
		{
			inaStructure.put("Elements", inaList);
			let visualizationManager = modelComponent;
			let currentActiveVisualizationDefinition = visualizationManager.getCurrentActiveVisualizationDefinition();
			if (oFF.notNull(currentActiveVisualizationDefinition))
			{
				inaStructure.putStringNotNull("ActiveVisualizationDefinition", currentActiveVisualizationDefinition.getName());
			}
			oFF.QInARepoVisualizationManager.exportVariableHolder(exporter, visualizationManager.getVisualizationVariableHolder(), inaStructure);
			oFF.QInARepoVisualizationManager.exportDataPointVariableContainers(exporter, visualizationManager.getDatapointVariableContainers(), inaStructure);
			if (!visualizationManager.getChartTemplateLinker().isEmpty())
			{
				oFF.QInARepoVisualizationManager.exportChartTemplateLinker(exporter, visualizationManager.getChartTemplateLinker(), inaStructure.putNewStructure("ChartTemplates"));
			}
			if (!visualizationManager.getTableTemplateLinker().isEmpty())
			{
				oFF.QInARepoVisualizationManager.exportTableTemplateLinker(exporter, visualizationManager.getTableTemplateLinker(), inaStructure.putNewStructure("TableTemplates"));
			}
			if (!visualizationManager.getVisualizationSpecificStyleContainers().isEmpty())
			{
				oFF.QInARepoVisualizationManager.exportVisualizationTypeSpecificStyles(exporter, visualizationManager.getVisualizationSpecificStyleContainers(), inaStructure.putNewList("TypeSpecificStyles"));
			}
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoVisualizationManager.prototype.exportVisualizationDefinition = function(visualizationManagerBase, visDef)
{
	let phase3 = visDef.getSession().hasFeature(oFF.FeatureToggleOlap.CHARTING_PHASE_3);
	let isTable = visDef.getSemanticBindingType() === oFF.SemanticBindingType.TABLE;
	let isCurrentActiveVis = visDef === visualizationManagerBase.getCurrentActiveVisualizationDefinition();
	return !phase3 || isTable || isCurrentActiveVis;
};
oFF.QInARepoVisualizationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_MANAGER;
};
oFF.QInARepoVisualizationManager.prototype.getTagName = function()
{
	return "VisualizationManager";
};
oFF.QInARepoVisualizationManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let visualizationManagerBase = modelComponent;
	visualizationManagerBase.setRepoSerializationActive(true);
	for (let i = 0; i < inaList.size(); i++)
	{
		let inaVisualizationDefinition = inaList.getStructureAt(i);
		let name = inaVisualizationDefinition.getStringByKey("Name");
		let protocolBindingType = oFF.QInAConverter.lookupProtocolBindingType(inaVisualizationDefinition.getStringByKey("ProtocolBindingType"));
		let semanticBindingType = oFF.QInAConverter.lookupSemanticBindingType(inaVisualizationDefinition.getStringByKey("SemanticBindingType"));
		let visualizationDefinition = visualizationManagerBase.getOrCreateVisualisationDefinition(name, protocolBindingType, semanticBindingType);
		importer.importVisualizationDefinition(inaVisualizationDefinition, visualizationDefinition);
	}
};
oFF.QInARepoVisualizationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure) && oFF.notNull(modelComponent) && modelComponent.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_MANAGER)
	{
		let visualizationManager = modelComponent;
		let oldMode = visualizationManager.getViz2QmSynchronizer().getMode();
		visualizationManager.getViz2QmSynchronizer().setMode(oFF.Viz2QmSynchronizationMode.NONE);
		let inaList = inaStructure.getListByKey("Elements");
		if (oFF.XCollectionUtils.hasElements(inaList))
		{
			this.importComponentWithList(importer, inaList, modelComponent, parentComponent, context);
		}
		let activeVisualizationDefintion = inaStructure.getStringByKey("ActiveVisualizationDefinition");
		let activeVisualizationDefinition = visualizationManager.getVisualizationDefinitionByName(activeVisualizationDefintion);
		if (oFF.isNull(activeVisualizationDefinition))
		{
			if (oFF.XString.isEqual(activeVisualizationDefintion, "chart_setting_BarColumn"))
			{
				activeVisualizationDefinition = visualizationManager.getVisualizationDefinitionByName("chart_setting_Bar");
				if (oFF.isNull(activeVisualizationDefinition))
				{
					activeVisualizationDefinition = visualizationManager.getVisualizationDefinitionByName("chart_setting_Column");
				}
			}
			if (oFF.isNull(activeVisualizationDefinition))
			{
				activeVisualizationDefinition = oFF.XCollectionUtils.findFirst(visualizationManager.getVisualizationDefinitions(), (visDef) => {
					return visDef.getSemanticBindingType() === oFF.SemanticBindingType.TABLE;
				});
			}
		}
		visualizationManager.setCurrentActiveVisualizationDefinition(activeVisualizationDefinition);
		visualizationManager.getViz2QmSynchronizer().setMode(oldMode);
		oFF.QInARepoVisualizationManager.importVariableHolder(importer, visualizationManager.getVisualizationVariableHolder(), inaStructure.getListByKey("Variables"), context);
		oFF.QInARepoVisualizationManager.importDatapointVariableContainers(importer, visualizationManager, inaStructure, context);
		oFF.QInARepoVisualizationManager.importChartTemplateLinker(importer, visualizationManager.getChartTemplateLinker(), inaStructure.getStructureByKey("ChartTemplates"));
		oFF.QInARepoVisualizationManager.importTableTemplateLinker(importer, visualizationManager.getTableTemplateLinker(), inaStructure.getStructureByKey("TableTemplates"));
		oFF.QInARepoVisualizationManager.importVisualizationTypeSpecificStyles(importer, visualizationManager, inaStructure.getListByKey("TypeSpecificStyles"), context);
	}
	return modelComponent;
};

oFF.QInARepoVisualizationTemplateManager = function() {};
oFF.QInARepoVisualizationTemplateManager.prototype = new oFF.QInARepository();
oFF.QInARepoVisualizationTemplateManager.prototype._ff_c = "QInARepoVisualizationTemplateManager";

oFF.QInARepoVisualizationTemplateManager.exportChartTemplates = function(exporter, templateObjects, templateInaList)
{
	let size = oFF.XCollectionUtils.size(templateObjects);
	for (let i = 0; i < size; i++)
	{
		let templateObject = templateObjects.get(i);
		let templateStructure = templateInaList.addNewStructure();
		templateStructure.putString("Name", templateObject.getName());
		templateStructure.putString("ActiveTemplate", templateObject.getActiveTemplateName());
		templateStructure.putInteger("Priority", templateObject.getPriority());
		let subSize = templateObject.size();
		if (subSize > 0)
		{
			let templateList = templateStructure.putNewList("TemplateList");
			for (let j = 0; j < subSize; j++)
			{
				let chartStyle = templateObject.get(j);
				exporter.exportVisualizationChartStyle(chartStyle, templateList.addNewStructure());
			}
		}
	}
};
oFF.QInARepoVisualizationTemplateManager.exportTableTemplates = function(exporter, templateObjects, templateInaList)
{
	let size = oFF.XCollectionUtils.size(templateObjects);
	for (let i = 0; i < size; i++)
	{
		let templateObject = templateObjects.get(i);
		let templateStructure = templateInaList.addNewStructure();
		templateStructure.putString("Name", templateObject.getName());
		templateStructure.putString("ActiveTemplate", templateObject.getActiveTemplateName());
		templateStructure.putInteger("Priority", templateObject.getPriority());
		let subSize = templateObject.size();
		if (subSize > 0)
		{
			let templateList = templateStructure.putNewList("TemplateList");
			for (let j = 0; j < subSize; j++)
			{
				let tableDefinition = templateObject.get(j);
				oFF.QInARepoTableDefinition.exportTableDefinition(exporter, tableDefinition, templateList.addNewStructure());
			}
		}
	}
};
oFF.QInARepoVisualizationTemplateManager.importChartTemplates = function(importer, templateManager, templateListIna)
{
	let size = oFF.XCollectionUtils.size(templateListIna);
	for (let i = 0; i < size; i++)
	{
		let templateStructure = templateListIna.getStructureAt(i);
		let templateList = templateManager.addNewChartTemplateList(templateStructure.getStringByKey("Name"));
		templateList.setActiveTemplateName(templateStructure.getStringByKey("ActiveTemplate"));
		templateList.setPriority(templateStructure.getIntegerByKey("Priority"));
		let inaTemplateList = templateStructure.getListByKey("TemplateList");
		let subSize = oFF.XCollectionUtils.size(inaTemplateList);
		for (let j = 0; j < subSize; j++)
		{
			let templateIna = inaTemplateList.getStructureAt(j);
			importer.importVisualizationChartStyle(templateIna, templateList.addNewTemplate(templateIna.getStringByKey("Name"), templateIna.getStringByKey("Text")), null);
		}
	}
};
oFF.QInARepoVisualizationTemplateManager.importTableTemplates = function(importer, templateManager, templateListIna)
{
	let size = oFF.XCollectionUtils.size(templateListIna);
	for (let i = 0; i < size; i++)
	{
		let templateStructure = templateListIna.getStructureAt(i);
		let templateList = templateManager.addNewTableTemplateList(templateStructure.getStringByKey("Name"));
		templateList.setActiveTemplateName(templateStructure.getStringByKey("ActiveTemplate"));
		templateList.setPriority(templateStructure.getIntegerByKey("Priority"));
		let inaTemplateList = templateStructure.getListByKey("TemplateList");
		let subSize = oFF.XCollectionUtils.size(inaTemplateList);
		for (let j = 0; j < subSize; j++)
		{
			let templateIna = inaTemplateList.getStructureAt(j);
			oFF.QInARepoTableDefinition.importTableDefinition(importer, templateIna, templateList.addNewTemplate(templateIna.getStringByKey("Name"), templateIna.getStringByKey("Text")), templateManager.getContext());
		}
	}
};
oFF.QInARepoVisualizationTemplateManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let visualizationTemplateManager = modelComponent;
	if (!visualizationTemplateManager.isEmpty())
	{
		let inaVisualizationTemplateManager = inaStructure.putNewStructure("OlapVisualizationTemplateManager");
		oFF.QInARepoVisualizationManager.exportDataPointVariableContainers(exporter, visualizationTemplateManager.getDatapointVariableContainers(), inaVisualizationTemplateManager);
		oFF.QInARepoVisualizationManager.exportVariableHolder(exporter, visualizationTemplateManager.getVisualizationVariableHolder(), inaStructure);
		let chartTemplates = visualizationTemplateManager.getChartTemplates();
		if (oFF.XCollectionUtils.hasElements(chartTemplates))
		{
			oFF.QInARepoVisualizationTemplateManager.exportChartTemplates(exporter, chartTemplates, inaStructure.putNewList("ChartTemplates"));
		}
		let tableTemplates = visualizationTemplateManager.getTableTemplates();
		if (oFF.XCollectionUtils.hasElements(tableTemplates))
		{
			oFF.QInARepoVisualizationTemplateManager.exportTableTemplates(exporter, tableTemplates, inaStructure.putNewList("TableTemplates"));
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoVisualizationTemplateManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_VISUALIZATION_TEMPLATE_MANAGER;
};
oFF.QInARepoVisualizationTemplateManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let templateManager = modelComponent;
	if (oFF.isNull(templateManager))
	{
		templateManager = context.getOlapEnv().getVisualizationTemplateManager();
	}
	if (oFF.notNull(templateManager))
	{
		oFF.QInARepoVisualizationManager.importDatapointVariableContainers(importer, templateManager, inaStructure, templateManager.getContext());
		oFF.QInARepoVisualizationManager.importVariableHolder(importer, templateManager.getVisualizationVariableHolder(), inaStructure.getListByKey("Variables"), context);
		oFF.QInARepoVisualizationTemplateManager.importChartTemplates(importer, templateManager, inaStructure.getListByKey("ChartTemplates"));
		oFF.QInARepoVisualizationTemplateManager.importTableTemplates(importer, templateManager, inaStructure.getListByKey("TableTemplates"));
	}
	return templateManager;
};

oFF.QInARepoChartDefinition = function() {};
oFF.QInARepoChartDefinition.prototype = new oFF.QInARepository();
oFF.QInARepoChartDefinition.prototype._ff_c = "QInARepoChartDefinition";

oFF.QInARepoChartDefinition.exportStyle = function(style, memberStructure)
{
	if (oFF.notNull(style) && oFF.notNull(memberStructure))
	{
		memberStructure.putString("Name", style.getName());
		memberStructure.putString("Text", style.getText());
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(style.getActiveRaw(), memberStructure, "Active", "ActiveVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(style.getColorRaw(), memberStructure, "Color", "ColorVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(style.getCustomPatternRaw(), memberStructure, "PatternCustom", "PatternCustomVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(style.getCustomShapeRaw(), memberStructure, "ShapeCustom", "ShapeCustomVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(style.getPatternRaw(), memberStructure, "Pattern", "PatternVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(style.getShapeRaw(), memberStructure, "Shape", "ShapeVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(style.getLineStyleRaw(), memberStructure, "Line", "LineVariable");
	}
};
oFF.QInARepoChartDefinition.importStyle = function(chartPointStyle, inaMemberStructure)
{
	if (oFF.notNull(chartPointStyle) && oFF.notNull(inaMemberStructure))
	{
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartPointStyle.getActiveRaw(), inaMemberStructure, "Active", "ActiveVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(chartPointStyle.getColorRaw(), inaMemberStructure, "Color", "ColorVariable");
		oFF.QInARepoVisualizationManager.importConstantOrVariable(chartPointStyle.getPatternRaw(), inaMemberStructure, "Pattern", "PatternVariable", (bpt) => {
			return oFF.BackgroundPatternType.lookup(bpt);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(chartPointStyle.getShapeRaw(), inaMemberStructure, "Shape", "ShapeVariable", (cps) => {
			return oFF.ChartPointShape.lookup(cps);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(chartPointStyle.getLineStyleRaw(), inaMemberStructure, "Line", "LineVariable", (cls) => {
			return oFF.ChartLineStyle.lookup(cls);
		});
		oFF.QInARepoVisualizationManager.importStringOrVariable(chartPointStyle.getCustomPatternRaw(), inaMemberStructure, "PatternCustom", "PatternCustomVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(chartPointStyle.getCustomShapeRaw(), inaMemberStructure, "ShapeCustom", "ShapeCustomVariable");
	}
};
oFF.QInARepoChartDefinition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (oFF.notNull(modelComponent) && oFF.notNull(inaStructure))
	{
		let chartDefinition = modelComponent;
		inaStructure.putStringNotNullAndNotEmpty("Title", chartDefinition.getTitle());
		let keyFigureDimension = chartDefinition.getKeyFigureDimension();
		if (oFF.notNull(keyFigureDimension))
		{
			inaStructure.putStringNotNullAndNotEmpty("KeyFigureDimension", keyFigureDimension.getName());
		}
		let inAChartSettings = inaStructure.putNewStructure("ChartSettings");
		let chartSetting = chartDefinition.getChartSetting();
		if (chartSetting.isPolar())
		{
			inAChartSettings.putBoolean("ChartPolar", true);
		}
		if (chartSetting.isTimeSeries())
		{
			inAChartSettings.putBoolean("ChartTimeSeries", true);
		}
		if (chartSetting.areYAxisOnSameSide())
		{
			inAChartSettings.putBoolean("AllowOverlapYAxes", true);
		}
		if (chartSetting.getChartOrientation() !== null)
		{
			inAChartSettings.putString("ChartOrientation", chartSetting.getChartOrientation().getName());
		}
		if (chartSetting.getChartStackingType() !== null)
		{
			inAChartSettings.putString("ChartStacking", chartSetting.getChartStackingType().getName());
		}
		if (chartSetting.getChartType() !== null)
		{
			inAChartSettings.putString("ChartType", chartSetting.getChartType().getName());
		}
		if (chartSetting.getChartType2() !== null)
		{
			inAChartSettings.putString("ChartType2", chartSetting.getChartType2().getName());
		}
		if (chartSetting.getTitle() !== null)
		{
			inAChartSettings.putString("Title", chartSetting.getTitle());
		}
		if (chartSetting.getSubTitle() !== null)
		{
			inAChartSettings.putString("SubTitle", chartSetting.getSubTitle());
		}
		inAChartSettings.putBoolean("HasTitleExpanded", chartSetting.hasTitleExpanded());
		oFF.QInARepoVisualizationManager.exportChartTemplateLinker(exporter, chartSetting.getTemplateLinker(), inAChartSettings);
		exporter.exportVisualizationChartStyle(chartSetting.getChartStyle(), inAChartSettings.putNewStructure("ChartStyle"));
		if (chartSetting.isUseColorAxis())
		{
			inAChartSettings.putBoolean("UseColorAxis", true);
		}
		oFF.QInARepoChartDefinition.exportStyle(chartSetting.getMinColor(), inAChartSettings.putNewStructure("MinColor"));
		oFF.QInARepoChartDefinition.exportStyle(chartSetting.getMaxColor(), inAChartSettings.putNewStructure("MaxColor"));
		this.exportDimensionSelection(inAChartSettings.putNewStructure("CategoryDimensions"), chartSetting.getCategoryDimensionSelection());
		this.exportDimensionSelection(inAChartSettings.putNewStructure("GroupingDimensions"), chartSetting.getGroupingDimensionSelection());
		this.exportDimensionSelection(inAChartSettings.putNewStructure("DistributionDimensions"), chartSetting.getDistributionDimensionSelection());
		this.exportDimensionSelection(inAChartSettings.putNewStructure("DefaultStylingDimensions"), chartSetting.getDefaultStylingDimensionSelection());
		let stylingDimensionKeys = chartSetting.getStylingDimensionKeys();
		if (oFF.XCollectionUtils.hasElements(stylingDimensionKeys))
		{
			let stylingList = inAChartSettings.putNewList("StylingDimensions");
			oFF.XCollectionUtils.forEach(stylingDimensionKeys, (sdk) => {
				let stylingStructure = stylingList.addNewStructure();
				stylingStructure.putString("Key", sdk);
				this.exportDimensionSelection(stylingStructure.putNewStructure("StylingDimensions"), chartSetting.getStylingDimensionSelection(sdk));
			});
		}
		let inAKFSelections = inAChartSettings.putNewList("KeyFigureSelections");
		oFF.XStream.of(oFF.VisualizationValueType.getAll()).forEach((visValueType) => {
			let typedValueSelectionsForType = chartSetting.getTypedValueSelectionsForType(visValueType);
			let valueStructure = inAKFSelections.addNewStructure();
			valueStructure.putString("VisualizationValueType", visValueType.getName());
			let membersList = oFF.PrList.create();
			let keyFigures = typedValueSelectionsForType.getValuesAsReadOnlyList();
			oFF.XStream.of(keyFigures).forEach((kf) => {
				this.exportKeyFigureSelection(kf, membersList);
			});
			valueStructure.put("Members", membersList);
		});
		oFF.QInARepoVisualizationManager.exportVariableHolder(exporter, chartDefinition.getVisualizationVariableHolder(), inaStructure);
		oFF.QInARepoVisualizationManager.exportDataPointVariableContainers(exporter, chartDefinition.getDatapointVariableContainers(), inaStructure);
		oFF.QInARepoVisualizationManager.exportSelectionPath(inaStructure.putNewList("Path"), chartDefinition.getSelectionPath());
		oFF.QInARepoVisualizationManager.exportMemberRestriction(inaStructure.putNewList("MemberRestrictions"), chartDefinition.getMemberRestrictions());
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoChartDefinition.prototype.exportDimensionSelection = function(inaStructure, dimensionSelection)
{
	let dimensionNames = dimensionSelection.getDimensionNamesInternal();
	if (oFF.notNull(dimensionNames))
	{
		inaStructure.putNewList("Dimensions").addAllStrings(dimensionNames);
	}
	inaStructure.putStringNotNullAndNotEmpty("ColorScheme", dimensionSelection.getColorSchemeKey());
	if (oFF.TriStateBool.isExplicitBooleanValue(dimensionSelection.shouldIncludeKeyFigureDimensionInternal()))
	{
		inaStructure.putBoolean("ShouldIncludeKeyFigures", dimensionSelection.shouldIncludeKeyFigureDimensionInternal().getBoolean());
	}
};
oFF.QInARepoChartDefinition.prototype.exportKeyFigureSelection = function(keyFigureSelection, membersList)
{
	let memberStructure = membersList.addNewStructure();
	memberStructure.putString("Id", keyFigureSelection.getName());
	let member = keyFigureSelection.getDimensionMember();
	memberStructure.putString("DimensionName", member.getDimension().getName());
	oFF.QInARepoChartDefinition.exportStyle(keyFigureSelection.getStyle(), memberStructure);
	let visValueTypes = keyFigureSelection.getVisualizationValueTypes();
	if (oFF.notNull(visValueTypes))
	{
		let subList = memberStructure.putNewList("NestedKeyFigures");
		oFF.XStream.of(visValueTypes).forEach((visValueType) => {
			let typedValueSelectionsForType = keyFigureSelection.getTypedValueSelectionsForType(visValueType);
			let valueStructure = subList.addNewStructure();
			valueStructure.putString("VisualizationValueType", visValueType.getName());
			let membersSubList = oFF.PrList.create();
			let keyFigures = typedValueSelectionsForType.getValuesAsReadOnlyList();
			oFF.XStream.of(keyFigures).forEach((kf) => {
				this.exportKeyFigureSelection(kf, membersSubList);
			});
			valueStructure.put("Members", membersSubList);
		});
	}
};
oFF.QInARepoChartDefinition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION;
};
oFF.QInARepoChartDefinition.prototype.getTagName = function()
{
	return "ChartDefinition";
};
oFF.QInARepoChartDefinition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure) && oFF.notNull(modelComponent) && modelComponent.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION)
	{
		let chartDefinitionBase = modelComponent;
		chartDefinitionBase.setTitle(inaStructure.getStringByKey("Title"));
		let keyFigureDimensionName = inaStructure.getStringByKey("KeyFigureDimension");
		let queryModel = chartDefinitionBase.getQueryModel();
		let kfDimension = queryModel.getDimensionByName(keyFigureDimensionName);
		chartDefinitionBase.setKeyFigureDimension(kfDimension);
		let inAChartSettings = inaStructure.getStructureByKey("ChartSettings");
		let chartSettings = chartDefinitionBase.getChartSetting();
		let chartOrientation = inAChartSettings.getStringByKey("ChartOrientation");
		let chartStackingType = inAChartSettings.getStringByKey("ChartStacking");
		let chartType = inAChartSettings.getStringByKey("ChartType");
		let chartType2 = inAChartSettings.getStringByKey("ChartType2");
		let chartTitle = inAChartSettings.getStringByKey("Title");
		let chartSubTitle = inAChartSettings.getStringByKey("SubTitle");
		let chartHasTitleExpanded = inAChartSettings.getBooleanByKey("HasTitleExpanded");
		chartSettings.setPolar(inAChartSettings.getBooleanByKeyExt("ChartPolar", false));
		chartSettings.setTimeSeries(inAChartSettings.getBooleanByKeyExt("ChartTimeSeries", false));
		chartSettings.setAreYAxisOnSameSide(inAChartSettings.getBooleanByKeyExt("AllowOverlapYAxes", false));
		chartSettings.setChartType(oFF.ChartType.lookup(chartType));
		chartSettings.setChartType2(oFF.ChartType.lookup(chartType2));
		chartSettings.setChartStackingType(oFF.ChartStackingType.lookup(chartStackingType));
		chartSettings.setChartOrientation(oFF.ChartOrientation.lookup(chartOrientation));
		chartSettings.setUseColorAxis(inAChartSettings.getBooleanByKeyExt("UseColorAxis", false));
		let minColorStructure = inAChartSettings.getStructureByKey("MinColor");
		oFF.QInARepoChartDefinition.importStyle(chartSettings.getMinColor(), minColorStructure);
		let maxColorStructure = inAChartSettings.getStructureByKey("MaxColor");
		oFF.QInARepoChartDefinition.importStyle(chartSettings.getMaxColor(), maxColorStructure);
		if (chartSettings.getChartType() === oFF.ChartType.BAR_COLUMN && importer.getSession().hasFeature(oFF.FeatureToggleOlap.CHARTING_PHASE2))
		{
			let orientation = chartSettings.getChartOrientation();
			let resetChartType = orientation === oFF.ChartOrientation.VERTICAL ? oFF.ChartType.COLUMN : oFF.ChartType.BAR;
			chartSettings.setChartType(resetChartType);
			if (oFF.XString.isEqual(chartDefinitionBase.getName(), oFF.ChartType.BAR_COLUMN.getName()))
			{
				let visDefOriginalName = chartDefinitionBase.getName();
				chartDefinitionBase.setName(oFF.XStringUtils.concatenate2("chart_setting_", resetChartType.getName()));
				let visualizationManager = queryModel.getVisualizationManager();
				visualizationManager.removeVisualizationDefinitionByName(visDefOriginalName);
				visualizationManager.addVisualizationDefinition(chartDefinitionBase);
			}
		}
		chartSettings.setTitle(chartTitle);
		chartSettings.setSubTitle(chartSubTitle);
		chartSettings.setHasTitleExpanded(chartHasTitleExpanded);
		this.importDimensionSelection(chartSettings.getCategoryDimensionSelection(), inAChartSettings.getStructureByKey("CategoryDimensions"));
		this.importDimensionSelection(chartSettings.getGroupingDimensionSelection(), inAChartSettings.getStructureByKey("GroupingDimensions"));
		this.importDimensionSelection(chartSettings.getDistributionDimensionSelection(), inAChartSettings.getStructureByKey("DistributionDimensions"));
		this.importDimensionSelection(chartSettings.getDefaultStylingDimensionSelection(), inAChartSettings.getStructureByKey("DefaultStylingDimensions"));
		let stylingDimensionsList = inAChartSettings.getListByKey("StylingDimensions");
		if (oFF.XCollectionUtils.hasElements(stylingDimensionsList))
		{
			oFF.XCollectionUtils.forEach(stylingDimensionsList, (std) => {
				this.importDimensionSelection(chartSettings.getOrCreateStylingDimensionSelection(std.asStructure().getStringByKey("Key")), std.asStructure().getStructureByKey("StylingDimensions"));
			});
		}
		oFF.QInARepoVisualizationManager.importChartTemplateLinker(importer, chartSettings.getTemplateLinker(), inaStructure);
		importer.importVisualizationChartStyle(inAChartSettings.getStructureByKey("ChartStyle"), chartSettings.getChartStyle(), chartDefinitionBase);
		let inAKeyFigureSelections = inAChartSettings.getListByKey("KeyFigureSelections");
		this.importKeyFigureSelections(context, queryModel, chartDefinitionBase, chartSettings, inAKeyFigureSelections);
		oFF.QInARepoVisualizationManager.importVariableHolder(importer, chartDefinitionBase.getVisualizationVariableHolder(), inaStructure.getListByKey("Variables"), context);
		oFF.QInARepoVisualizationManager.importDatapointVariableContainers(importer, chartDefinitionBase, inaStructure, context);
		oFF.QInARepoVisualizationManager.importSelectionPath(chartDefinitionBase, inaStructure.getListByKey("Path"));
		oFF.QInARepoVisualizationManager.importMemberRestrictions(chartDefinitionBase, inaStructure.getListByKey("MemberRestrictions"));
	}
	return modelComponent;
};
oFF.QInARepoChartDefinition.prototype.importDimensionSelection = function(dimensionSelection, structure)
{
	if (oFF.notNull(structure))
	{
		if (structure.containsKey("ShouldIncludeKeyFigures"))
		{
			dimensionSelection.setShouldIncludeKeyFigureDimension(structure.getBooleanByKeyExt("ShouldIncludeKeyFigures", false));
		}
		else
		{
			dimensionSelection.resetShouldIncludeKeyFigureDimension();
		}
		let dimensionNames = structure.getListByKey("Dimensions");
		if (oFF.isNull(dimensionNames))
		{
			dimensionSelection.resetDimensionList();
		}
		else
		{
			dimensionSelection.createEmptyDimensionList();
			oFF.XCollectionUtils.forEach(dimensionNames, (dimName) => {
				dimensionSelection.addDimensionName(dimName.asString().getString());
			});
		}
		if (structure.hasStringByKey("ColorScheme"))
		{
			dimensionSelection.setColorSchemeKey(structure.getStringByKey("ColorScheme"));
		}
	}
};
oFF.QInARepoChartDefinition.prototype.importKeyFigureSelections = function(context, queryModel, parent, typedValueSelection, inAKeyFigureSelections)
{
	oFF.XStream.of(inAKeyFigureSelections).forEach((inAKeyFigureSelection) => {
		let inaKeyFigureSel = inAKeyFigureSelection;
		let visualizationValueType = oFF.VisualizationValueType.lookup(inaKeyFigureSel.getStringByKey("VisualizationValueType"));
		let inAMembers = inaKeyFigureSel.getListByKey("Members");
		if (oFF.notNull(inAMembers))
		{
			typedValueSelection.clearTypedValueSelectionsForType(visualizationValueType);
			oFF.XStream.of(inAMembers).forEach((inAMember) => {
				let figureSelection;
				let inaMemberStructure = inAMember.asStructure();
				let dimensionName = inaMemberStructure.getStringByKey("DimensionName");
				let id = inaMemberStructure.getStringByKey("Id");
				let visDimension = queryModel.getDimensionByName(dimensionName);
				let dimensionMember = visDimension.getDimensionMember(id);
				figureSelection = oFF.QKeyFigureSelection.create(context, dimensionMember, parent, visualizationValueType);
				let chartPointStyle = figureSelection.getStyle();
				oFF.QInARepoChartDefinition.importStyle(chartPointStyle, inaMemberStructure);
				if (oFF.notNull(dimensionMember) && !typedValueSelection.hasTypedValueSelectionsForTypeForMember(visualizationValueType, dimensionMember))
				{
					typedValueSelection.addTypedValueSelection(visualizationValueType, figureSelection);
					let subList = inaMemberStructure.getListByKey("NestedKeyFigures");
					if (oFF.XCollectionUtils.hasElements(subList))
					{
						this.importKeyFigureSelections(context, queryModel, figureSelection, figureSelection, subList);
					}
				}
			});
		}
	});
};

oFF.QInARepoChartStyle = function() {};
oFF.QInARepoChartStyle.prototype = new oFF.QInARepository();
oFF.QInARepoChartStyle.prototype._ff_c = "QInARepoChartStyle";

oFF.QInARepoChartStyle.exportChartAxisComponent = function(componentStruct, component)
{
	if (oFF.notNull(componentStruct) && oFF.notNull(component))
	{
		oFF.QInARepoVisualizationManager.exportDoubleOrVariable(component.getSizeRaw(), componentStruct, "Size", "SizeVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(component.getVisibleRaw(), componentStruct, "Visible", "VisibleVariable");
	}
};
oFF.QInARepoChartStyle.exportChartAxisStyle = function(axisStruct, axisStyle)
{
	if (oFF.notNull(axisStruct) && oFF.notNull(axisStyle))
	{
		oFF.QInARepoChartStyle.exportChartLabelStyle(axisStruct.putNewStructure("DataLabel"), axisStyle.getLabelStyle());
		oFF.QInARepoChartStyle.exportChartLabelStyle(axisStruct.putNewStructure("HeaderLabel"), axisStyle.getHeaderStyle());
		oFF.QInARepoVisualizationManager.exportStringOrVariable(axisStyle.getColorRaw(), axisStruct, "AxisColor", "AxisColorVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(axisStyle.getShowLabelGridsRaw(), axisStruct, "ShowLabelGrids", "ShowLabelGridsVariable");
		oFF.QInARepoChartStyle.exportChartAxisComponent(axisStruct.putNewStructure("Line"), axisStyle.getLine());
		oFF.QInARepoChartStyle.exportChartAxisComponent(axisStruct.putNewStructure("Tick"), axisStyle.getTick());
	}
};
oFF.QInARepoChartStyle.exportChartLabelStyle = function(labelStyleStruct, labelStyle)
{
	if (oFF.notNull(labelStyleStruct) && oFF.notNull(labelStyle))
	{
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getAutoResizeRaw(), labelStyleStruct, "AutoResize", "AutoResizeVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getAvoidOverlapRaw(), labelStyleStruct, "AvoidOverlap", "AvoidOverlapVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getShowLabelRaw(), labelStyleStruct, "ShowLabel", "ShowLabelVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getShowCornerValuesRaw(), labelStyleStruct, "ShowCornerValues", "ShowCornerValuesVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getShowAbsoluteValuesRaw(), labelStyleStruct, "ShowAbsoluteValues", "ShowAbsoluteVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getFontBoldRaw(), labelStyleStruct, "FontBold", "FontBoldVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getFontItalicRaw(), labelStyleStruct, "FontItalic", "FontItalicVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getFontStrikeThroughRaw(), labelStyleStruct, "FontStrikeThrough", "FontStrikeThroughVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(labelStyle.getFontUnderlineRaw(), labelStyleStruct, "FontUnderline", "FontUnderlineVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(labelStyle.getFontFamilyRaw(), labelStyleStruct, "FontFamily", "FontFamilyVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(labelStyle.getFontColorRaw(), labelStyleStruct, "FontColor", "FontColorVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(labelStyle.getFormatStringRaw(), labelStyleStruct, "FormatString", "FormatStringVariable");
		oFF.QInARepoVisualizationManager.exportStringOrVariable(labelStyle.getBackgroundColorRaw(), labelStyleStruct, "BackgroundColor", "BackgroundColorVariable");
		oFF.QInARepoVisualizationManager.exportDoubleOrVariable(labelStyle.getFontSizeRaw(), labelStyleStruct, "FontSize", "FontSizeVariable");
		oFF.QInARepoVisualizationManager.exportIntegerOrVariable(labelStyle.getRotationRaw(), labelStyleStruct, "Rotation", "RotationVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(labelStyle.getDirectionRaw(), labelStyleStruct, "LayoutDirection", "LayoutDirectionVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(labelStyle.getHorizontalAlignmentRaw(), labelStyleStruct, "HorizontalAlignment", "HorizontalAlignmentVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(labelStyle.getVerticalAlignmentRaw(), labelStyleStruct, "VerticalAlignment", "VerticalAlignment");
	}
};
oFF.QInARepoChartStyle.exportChartPlotArea = function(plotAreaStruct, plotArea)
{
	if (oFF.notNull(plotAreaStruct) && oFF.notNull(plotArea))
	{
		oFF.QInARepoChartStyle.exportChartLabelStyle(plotAreaStruct.putNewStructure("DimensionLabel"), plotArea.getDimensionLabel());
		oFF.QInARepoChartStyle.exportChartLabelStyle(plotAreaStruct.putNewStructure("DataLabel"), plotArea.getDataLabel());
		oFF.QInARepoChartStyle.exportChartLabelStyle(plotAreaStruct.putNewStructure("StackColumnLabel"), plotArea.getStackColumnLabel());
	}
};
oFF.QInARepoChartStyle.exportColorScheme = function(colorScheme, inaColorScheme)
{
	if (oFF.notNull(colorScheme))
	{
		oFF.QInARepoVisualizationManager.exportStringListOrVariable(colorScheme.getColorsRaw(), inaColorScheme, "Colors", "ColorsVariable");
		oFF.QInARepoVisualizationManager.exportConstantListOrVariable(colorScheme.getPatternsRaw(), inaColorScheme, "Patterns", "PatternsVariable");
		oFF.QInARepoVisualizationManager.exportConstantListOrVariable(colorScheme.getShapesRaw(), inaColorScheme, "Shapes", "ShapesVariable");
		oFF.QInARepoVisualizationManager.exportConstantListOrVariable(colorScheme.getLineStylesRaw(), inaColorScheme, "Lines", "LinesVariable");
	}
};
oFF.QInARepoChartStyle.exportDataPointStyle = function(dataPointStyle, dataPointStyleStructure)
{
	dataPointStyleStructure.putString("Name", dataPointStyle.getName());
	dataPointStyleStructure.putString("Text", dataPointStyle.getText());
	oFF.QInARepoVisualizationManager.exportStringOrVariable(dataPointStyle.getChartPointStyleNameRaw(), dataPointStyleStructure, "Style", "StyleVariable");
	oFF.QInARepoVisualizationManager.exportStringOrVariable(dataPointStyle.getDataPointCategoryNameRaw(), dataPointStyleStructure, "DataPointCategoryName", "DataPointCategoryNameVariable");
	oFF.QInARepoVisualizationManager.exportStringOrVariable(dataPointStyle.getDataPointCategoryTextRaw(), dataPointStyleStructure, "DataPointCategoryText", "DataPointCategoryTextVariable");
	oFF.QInARepoVisualizationManager.exportDataPointContext(dataPointStyle, dataPointStyleStructure);
};
oFF.QInARepoChartStyle.exportLegendStyle = function(legendStyleStruct, legendStyle)
{
	if (oFF.notNull(legendStyleStruct) && oFF.notNull(legendStyle))
	{
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(legendStyle.getLegendPositionRaw(), legendStyleStruct, "LegendPosition", "LegendPositionVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(legendStyle.getHorizontalAlignmentRaw(), legendStyleStruct, "HorizontalAlignment", "HorizontalAlignmentVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(legendStyle.getVerticalAlignmentRaw(), legendStyleStruct, "VerticalAlignment", "VerticalAlignmentVariable");
		oFF.QInARepoVisualizationManager.exportConstantOrVariable(legendStyle.getLayoutDirectionRaw(), legendStyleStruct, "LayoutDirection", "LayoutDirectionVariable");
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(legendStyle.getShowFullLabelRaw(), legendStyleStruct, "ShowFullLabel", "ShowFullLabelVariable");
		oFF.QInARepoChartStyle.exportChartLabelStyle(legendStyleStruct.putNewStructure("Label"), legendStyle.getLabelStyle());
		oFF.QInARepoVisualizationManager.exportBooleanOrVariable(legendStyle.getEnabledRaw(), legendStyleStruct, "Enabled", "EnabledVariable");
	}
};
oFF.QInARepoChartStyle.exportNameText = function(structure, component)
{
	structure.putStringNotNullAndNotEmpty("Name", component.getName());
	structure.putStringNotNullAndNotEmpty("Text", component.getText());
};
oFF.QInARepoChartStyle.importAxisStyle = function(axisStyle, axisStyleStructIna)
{
	if (oFF.notNull(axisStyle) && oFF.notNull(axisStyleStructIna))
	{
		oFF.QInARepoVisualizationManager.importStringOrVariable(axisStyle.getColorRaw(), axisStyleStructIna, "AxisColor", "AxisColorVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(axisStyle.getShowLabelGridsRaw(), axisStyleStructIna, "ShowLabelGrids", "ShowLabelGridsVariable");
		oFF.QInARepoChartStyle.importChartLabelStyle(axisStyle.getHeaderStyle(), axisStyleStructIna.getStructureByKey("HeaderLabel"));
		oFF.QInARepoChartStyle.importChartLabelStyle(axisStyle.getLabelStyle(), axisStyleStructIna.getStructureByKey("DataLabel"));
		oFF.QInARepoChartStyle.importChartPlotComponent(axisStyle.getTick(), axisStyleStructIna.getStructureByKey("Tick"));
		oFF.QInARepoChartStyle.importChartPlotComponent(axisStyle.getLine(), axisStyleStructIna.getStructureByKey("Line"));
	}
};
oFF.QInARepoChartStyle.importChartLabelStyle = function(chartLabel, chartLabelStructure)
{
	if (oFF.notNull(chartLabel) && oFF.notNull(chartLabelStructure))
	{
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getAutoResizeRaw(), chartLabelStructure, "AutoResize", "AutoResizeVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getAvoidOverlapRaw(), chartLabelStructure, "AvoidOverlap", "AvoidOverlapVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getShowLabelRaw(), chartLabelStructure, "ShowLabel", "ShowLabelVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getShowCornerValuesRaw(), chartLabelStructure, "ShowCornerValues", "ShowCornerValuesVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getShowAbsoluteValuesRaw(), chartLabelStructure, "ShowAbsoluteValues", "ShowAbsoluteVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getFontBoldRaw(), chartLabelStructure, "FontBold", "FontBoldVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getFontItalicRaw(), chartLabelStructure, "FontItalic", "FontItalicVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getFontUnderlineRaw(), chartLabelStructure, "FontUnderline", "FontUnderlineVariable");
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(chartLabel.getFontStrikeThroughRaw(), chartLabelStructure, "FontStrikeThrough", "FontStrikeThroughVariable");
		oFF.QInARepoVisualizationManager.importDoubleOrVariable(chartLabel.getFontSizeRaw(), chartLabelStructure, "FontSize", "FontSizeVariable");
		oFF.QInARepoVisualizationManager.importIntegerOrVariable(chartLabel.getRotationRaw(), chartLabelStructure, "Rotation", "RotationVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(chartLabel.getFontColorRaw(), chartLabelStructure, "FontColor", "FontColorVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(chartLabel.getFontFamilyRaw(), chartLabelStructure, "FontFamily", "FontFamilyVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(chartLabel.getBackgroundColorRaw(), chartLabelStructure, "BackgroundColor", "BackgroundColorVariable");
		oFF.QInARepoVisualizationManager.importStringOrVariable(chartLabel.getFormatStringRaw(), chartLabelStructure, "FormatString", "FormatStringVariable");
		oFF.QInARepoVisualizationManager.importConstantOrVariable(chartLabel.getDirectionRaw(), chartLabelStructure, "LayoutDirection", "LayoutDirectionVariable", (ld) => {
			return oFF.LayoutDirection.lookup(ld);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(chartLabel.getHorizontalAlignmentRaw(), chartLabelStructure, "HorizontalAlignment", "HorizontalAlignmentVariable", (ha) => {
			return oFF.CellAlignmentHorizontal.lookup(ha);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(chartLabel.getVerticalAlignmentRaw(), chartLabelStructure, "VerticalAlignment", "VerticalAlignmentVariable", (va) => {
			return oFF.CellAlignmentVertical.lookup(va);
		});
	}
};
oFF.QInARepoChartStyle.importChartLegendStyle = function(legendStyle, legendStructureIna)
{
	if (oFF.notNull(legendStyle) && oFF.notNull(legendStructureIna))
	{
		oFF.QInARepoVisualizationManager.importConstantOrVariable(legendStyle.getHorizontalAlignmentRaw(), legendStructureIna, "HorizontalAlignment", "HorizontalAlignmentVariable", (ha) => {
			return oFF.CellAlignmentHorizontal.lookup(ha);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(legendStyle.getVerticalAlignmentRaw(), legendStructureIna, "VerticalAlignment", "VerticalAlignmentVariable", (va) => {
			return oFF.CellAlignmentVertical.lookup(va);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(legendStyle.getLegendPositionRaw(), legendStructureIna, "LegendPosition", "LegendPositionVariable", (lp) => {
			return oFF.ChartLegendPosition.lookup(lp);
		});
		oFF.QInARepoVisualizationManager.importConstantOrVariable(legendStyle.getLayoutDirectionRaw(), legendStructureIna, "LayoutDirection", "LayoutDirectionVariable", (ld) => {
			return oFF.LayoutDirection.lookup(ld);
		});
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(legendStyle.getShowFullLabelRaw(), legendStructureIna, "ShowFullLabel", "ShowFullLabelVariable");
		oFF.QInARepoChartStyle.importChartLabelStyle(legendStyle.getLabelStyle(), legendStructureIna.getStructureByKey("Label"));
		oFF.QInARepoVisualizationManager.importBooleanOrVariable(legendStyle.getEnabledRaw(), legendStructureIna, "Enabled", "EnabledVariable");
	}
};
oFF.QInARepoChartStyle.importChartPlotArea = function(plotArea, plotAreaStructIna)
{
	if (oFF.notNull(plotArea) && oFF.notNull(plotAreaStructIna))
	{
		oFF.QInARepoChartStyle.importChartLabelStyle(plotArea.getDataLabel(), plotAreaStructIna.getStructureByKey("DataLabel"));
		oFF.QInARepoChartStyle.importChartLabelStyle(plotArea.getDimensionLabel(), plotAreaStructIna.getStructureByKey("DimensionLabel"));
		oFF.QInARepoChartStyle.importChartLabelStyle(plotArea.getStackColumnLabel(), plotAreaStructIna.getStructureByKey("StackColumnLabel"));
	}
};
oFF.QInARepoChartStyle.importChartPlotComponent = function(component, componentIna)
{
	oFF.QInARepoVisualizationManager.importDoubleOrVariable(component.getSizeRaw(), componentIna, "Size", "SizeVariable");
	oFF.QInARepoVisualizationManager.importBooleanOrVariable(component.getVisibleRaw(), componentIna, "Visible", "VisibleVariable");
};
oFF.QInARepoChartStyle.importColorScheme = function(colorScheme, colorSchemeStructure)
{
	if (oFF.notNull(colorSchemeStructure))
	{
		oFF.QInARepoVisualizationManager.importStringListOrVariable(colorScheme.getColorsRaw(), colorSchemeStructure, "Colors", "ColorsVariable");
		oFF.QInARepoVisualizationManager.importConstantListOrVariable(colorScheme.getPatternsRaw(), colorSchemeStructure, "Patterns", "PatternsVariable", (bpt) => {
			return oFF.BackgroundPatternType.lookup(bpt);
		});
		oFF.QInARepoVisualizationManager.importConstantListOrVariable(colorScheme.getShapesRaw(), colorSchemeStructure, "Shapes", "ShapesVariable", (cps) => {
			return oFF.ChartPointShape.lookup(cps);
		});
		oFF.QInARepoVisualizationManager.importConstantListOrVariable(colorScheme.getLineStylesRaw(), colorSchemeStructure, "Lines", "LinesVariable", (cls) => {
			return oFF.ChartLineStyle.lookup(cls);
		});
	}
};
oFF.QInARepoChartStyle.importDataPointStyle = function(format, dataPointFormatting)
{
	oFF.QInARepoVisualizationManager.importStringOrVariable(format.getChartPointStyleNameRaw(), dataPointFormatting, "Style", "StyleVariable");
	oFF.QInARepoVisualizationManager.importStringOrVariable(format.getDataPointCategoryNameRaw(), dataPointFormatting, "DataPointCategoryName", "DataPointCategoryNameVariable");
	oFF.QInARepoVisualizationManager.importStringOrVariable(format.getDataPointCategoryTextRaw(), dataPointFormatting, "DataPointCategoryText", "DataPointCategoryTextVariable");
	oFF.QInARepoVisualizationManager.importDataPointContext(format, dataPointFormatting);
};
oFF.QInARepoChartStyle.importNameText = function(component, structure)
{
	component.setName(structure.getStringByKey("Name"));
	component.setText(structure.getStringByKey("Text"));
};
oFF.QInARepoChartStyle.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (oFF.notNull(modelComponent) && oFF.notNull(inaStructure))
	{
		let chartStyle = modelComponent;
		oFF.QInARepoChartStyle.exportNameText(inaStructure, chartStyle);
		oFF.QInARepoChartStyle.exportChartLabelStyle(inaStructure.putNewStructure("TitleStyle"), chartStyle.getTitleStyle());
		oFF.QInARepoChartStyle.exportLegendStyle(inaStructure.putNewStructure("Legend"), chartStyle.getLegendStyle());
		oFF.QInARepoChartStyle.exportChartPlotArea(inaStructure.putNewStructure("PlotArea"), chartStyle.getPlotArea());
		oFF.QInARepoChartStyle.exportChartAxisStyle(inaStructure.putNewStructure("Default"), chartStyle.getDefaultAxisStyle());
		oFF.QInARepoChartStyle.exportChartAxisStyle(inaStructure.putNewStructure("CategoryAxis"), chartStyle.getCategoryAxisStyle());
		let positions = chartStyle.getChartAxisPositions();
		if (oFF.XCollectionUtils.hasElements(positions))
		{
			let positionAxesList = inaStructure.putNewList("PositionAxes");
			oFF.XCollectionUtils.forEach(positions, (pos) => {
				let positionAxisStruct = positionAxesList.addNewStructure();
				positionAxisStruct.putString("Position", pos.getName());
				oFF.QInARepoChartStyle.exportChartAxisStyle(positionAxisStruct, chartStyle.getOrCreateChartAxisStyleByPosition(pos));
			});
		}
		let valueTypes = chartStyle.getValueAxisTypes();
		if (oFF.XCollectionUtils.hasElements(valueTypes))
		{
			let valueAxesList = inaStructure.putNewList("ValueAxes");
			oFF.XCollectionUtils.forEach(valueTypes, (vt) => {
				let valueAxisStruct = valueAxesList.addNewStructure();
				valueAxisStruct.putString("VisualizationValueType", vt.getName());
				oFF.QInARepoChartStyle.exportChartAxisStyle(valueAxisStruct, chartStyle.getOrCreateValueAxisStyle(vt));
			});
		}
		let csKeys = chartStyle.getColorSchemeKeys();
		if (oFF.XCollectionUtils.hasElements(csKeys))
		{
			let colorSchemeList = inaStructure.putNewList("ColorSchemes");
			oFF.XCollectionUtils.forEach(csKeys, (ck) => {
				let colorSchemeStructure = colorSchemeList.addNewStructure();
				colorSchemeStructure.putString("Key", ck);
				oFF.QInARepoChartStyle.exportColorScheme(chartStyle.getOrCreateChartColorScheme(ck), colorSchemeStructure);
			});
		}
		let cpsKeys = chartStyle.getChartPointStyleKeys();
		if (oFF.XCollectionUtils.hasElements(cpsKeys))
		{
			let chartPointStyleList = inaStructure.putNewList("ChartPointStyles");
			oFF.XCollectionUtils.forEach(cpsKeys, (cps) => {
				let chartPointStyleStructure = chartPointStyleList.addNewStructure();
				chartPointStyleStructure.putString("Key", cps);
				oFF.QInARepoChartDefinition.exportStyle(chartStyle.getOrCreateChartPointStyle(cps, null), chartPointStyleStructure);
			});
		}
		let cdpsKeys = chartStyle.getDataPointStyleKeys();
		if (oFF.XCollectionUtils.hasElements(cdpsKeys))
		{
			let dataPointStyleList = inaStructure.putNewList("DataPointStyle");
			oFF.XCollectionUtils.forEach(cdpsKeys, (cdps) => {
				let dataPointStyleStructure = dataPointStyleList.addNewStructure();
				dataPointStyleStructure.putString("Key", cdps);
				oFF.QInARepoChartStyle.exportDataPointStyle(chartStyle.getOrCreateNewChartDataPointStyle(cdps, null), dataPointStyleStructure);
			});
		}
	}
	return oFF.QInARepository.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoChartStyle.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CHART_STYLE;
};
oFF.QInARepoChartStyle.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let chartStyle = modelComponent;
	if (oFF.notNull(chartStyle) && oFF.notNull(inaStructure))
	{
		oFF.QInARepoChartStyle.importNameText(chartStyle, inaStructure);
		oFF.QInARepoChartStyle.importChartLabelStyle(chartStyle.getTitleStyle(), inaStructure.getStructureByKey("TitleStyle"));
		oFF.QInARepoChartStyle.importChartLegendStyle(chartStyle.getLegendStyle(), inaStructure.getStructureByKey("Legend"));
		oFF.QInARepoChartStyle.importChartPlotArea(chartStyle.getPlotArea(), inaStructure.getStructureByKey("PlotArea"));
		oFF.QInARepoChartStyle.importAxisStyle(chartStyle.getDefaultAxisStyle(), inaStructure.getStructureByKey("Default"));
		oFF.QInARepoChartStyle.importAxisStyle(chartStyle.getCategoryAxisStyle(), inaStructure.getStructureByKey("CategoryAxis"));
		let i;
		let key;
		let text;
		let valueAxesListIna = inaStructure.getListByKey("ValueAxes");
		if (oFF.XCollectionUtils.hasElements(valueAxesListIna))
		{
			for (i = 0; i < valueAxesListIna.size(); i++)
			{
				let valueAxisStruct = valueAxesListIna.getStructureAt(i);
				let visualizationValueType = oFF.VisualizationValueType.lookup(valueAxisStruct.getStringByKey("VisualizationValueType"));
				oFF.QInARepoChartStyle.importAxisStyle(chartStyle.getOrCreateValueAxisStyle(visualizationValueType), valueAxisStruct);
			}
		}
		let positionAxisListIna = inaStructure.getListByKey("PositionAxes");
		if (oFF.XCollectionUtils.hasElements(positionAxisListIna))
		{
			for (i = 0; i < positionAxisListIna.size(); i++)
			{
				let positionAxisStruct = positionAxisListIna.getStructureAt(i);
				let position = oFF.ChartAxisPosition.lookup(positionAxisStruct.getStringByKey("Position"));
				oFF.QInARepoChartStyle.importAxisStyle(chartStyle.getOrCreateChartAxisStyleByPosition(position), positionAxisStruct);
			}
		}
		let colorSchemeList = inaStructure.getListByKey("ColorSchemes");
		if (oFF.XCollectionUtils.hasElements(colorSchemeList))
		{
			for (i = 0; i < colorSchemeList.size(); i++)
			{
				let colorSchemeStruct = colorSchemeList.getStructureAt(i);
				key = colorSchemeStruct.getStringByKey("Key");
				oFF.QInARepoChartStyle.importColorScheme(chartStyle.getOrCreateChartColorScheme(key), colorSchemeStruct);
			}
		}
		let chartPointStyleList = inaStructure.getListByKey("ChartPointStyles");
		if (oFF.XCollectionUtils.hasElements(chartPointStyleList))
		{
			for (i = 0; i < chartPointStyleList.size(); i++)
			{
				let chartPointStyleStructure = chartPointStyleList.getStructureAt(i);
				key = chartPointStyleStructure.getStringByKey("Key");
				text = chartPointStyleStructure.getStringByKey("Text");
				oFF.QInARepoChartDefinition.importStyle(chartStyle.getOrCreateChartPointStyle(key, text), chartPointStyleStructure);
			}
		}
		let dataPointStyleList = inaStructure.getListByKey("DataPointStyle");
		if (oFF.XCollectionUtils.hasElements(dataPointStyleList))
		{
			for (i = 0; i < dataPointStyleList.size(); i++)
			{
				let dataPointStyleStructure = dataPointStyleList.getStructureAt(i);
				key = dataPointStyleStructure.getStringByKey("Key");
				text = dataPointStyleStructure.getStringByKey("Text");
				oFF.QInARepoChartStyle.importDataPointStyle(chartStyle.getOrCreateNewChartDataPointStyle(key, text), dataPointStyleStructure);
			}
		}
	}
	return chartStyle;
};

oFF.QInA = function() {};
oFF.QInA.prototype = new oFF.MessageManager();
oFF.QInA.prototype._ff_c = "QInA";

oFF.QInA.s_lookupByFormat = null;
oFF.QInA.addAllFormats = function()
{
	let all = oFF.QModelFormat.getAllModelFormats();
	let size = all.size();
	for (let i = 0; i < size; i++)
	{
		let list = oFF.XListOfNameObject.create();
		let name = all.get(i).getName();
		oFF.QInA.s_lookupByFormat.put(name, list);
	}
};
oFF.QInA.addAllPlanningTypes = function()
{
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_MODEL);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_ACTION);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_MODEL_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_MODEL_CLOSE_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_MODEL_CLEANUP_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_MODEL_REFRESH_ACTIONS_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_MODEL_REFRESH_VERSIONS_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_MODEL_UPDATE_VERSION_PRIVILEGES_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_INIT_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_CLOSE_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_START_ACTION_SEQUENCE_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_END_ACTION_SEQUENCE_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_SET_PARAMETERS_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_SET_TIMEOUT_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_STATE_DESCRIPTIONS_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_VERSION_UNDO_REDO_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_AREA_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_AREA_COMMAND_CLOSE);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_AREA_GET_FUNCTION_METADATA);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_AREA_GET_SEQUENCE_METADATA);
	oFF.QInA.addType(oFF.OlapComponentType.LIGHTWEIGHT_DATA_AREA_COMMAND);
};
oFF.QInA.addAllTypes = function()
{
	oFF.QInA.addType(oFF.OlapComponentType.CONDITIONS_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.CONDITION);
	oFF.QInA.addType(oFF.OlapComponentType.CONDITIONS_THRESHOLD);
	oFF.QInA.addType(oFF.OlapComponentType.CONDITIONS);
	oFF.QInA.addType(oFF.OlapComponentType.QUERY_MODEL);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_CELL);
	oFF.QInA.addType(oFF.OlapComponentType.AXIS);
	oFF.QInA.addType(oFF.OlapComponentType.SORT_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.LAYER_MODEL);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_SOURCE);
	oFF.QInA.addType(oFF.OlapComponentType.DOCUMENTS_INFO);
	oFF.QInA.addType(oFF.OlapComponentType.SELECTOR);
	oFF.QInA.addType(oFF.OlapComponentType.ATTRIBUTE_CONTAINER);
	oFF.QInA.addType(oFF.OlapComponentType.ATTRIBUTE);
	oFF.QInA.addType(oFF.OlapComponentType.CELL_CONTEXT_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.CELL_CONTEXT);
	oFF.QInA.addType(oFF.OlapComponentType.DRILL_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.DRILL_OPERATION);
	oFF.QInA.addType(oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST);
	oFF.QInA.addType(oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM);
	oFF.QInA.addType(oFF.OlapComponentType.MEASURE_TRANSLATIONS);
	oFF.QInA.addType(oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.UNIT_TRANSLATION_ITEM);
	oFF.QInA.addType(oFF.OlapComponentType.FIELD_CONTAINER);
	oFF.QInA.addType(oFF.OlapComponentType.FIELD_LIST);
	oFF.QInA.addType(oFF.OlapComponentType.FIELD);
	oFF.QInA.addType(oFF.OlapComponentType.RESULT_STRUCTURE);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_CELLS);
	oFF.QInA.addType(oFF.OlapComponentType.TOTALS);
	oFF.QInA.addType(oFF.OlapComponentType.EXCEPTION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.FORMULA_EXCEPTION);
	oFF.QInA.addType(oFF.OlapComponentType.QUERY_SETTINGS);
	oFF.QInA.addType(oFF.OlapComponentType.HIERARCHY);
	oFF.QInA.addType(oFF.OlapComponentType.HIERARCHY_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.CUSTOM_HIERARCHY_REPOSITORY);
	oFF.QInA.addType(oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.AXES_SETTINGS);
	oFF.QInA.addType(oFF.OlapComponentType.PROPERTY);
	oFF.QInA.addType(oFF.OlapComponentType.PLANNING_X_COMMAND);
	oFF.QInA.addType(oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES);
	oFF.QInA.addType(oFF.OlapComponentType.QUERY_CELLS);
	oFF.QInA.addType(oFF.MemberType.DRILL_PATH_ELEMENT);
	oFF.QInA.addType(oFF.MemberType.MEMBER);
	oFF.QInA.addType(oFF.MemberType.SINGLE_MEMBER_EXIT);
	oFF.QInA.addType(oFF.MemberType.MEMBER_EXITS);
	oFF.QInA.addType(oFF.MemberType.LITERAL_MEMBER);
	oFF.QInA.addType(oFF.MemberType.BASIC_MEASURE);
	oFF.QInA.addType(oFF.MemberType.FORMULA);
	oFF.QInA.addType(oFF.MemberType.SERVER_BASED_FORMULA);
	oFF.QInA.addType(oFF.MemberType.RESTRICTED_MEASURE);
	oFF.QInA.addType(oFF.MemberType.VARIANCE);
	oFF.QInA.addType(oFF.MemberType.EXCEPTION_AGGREGATION);
	oFF.QInA.addType(oFF.MemberType.CURRENCY_MEASURE);
	oFF.QInA.addType(oFF.MemberType.UNIT_MEASURE);
	oFF.QInA.addType(oFF.MemberType.RUNNING_TOTAL);
	oFF.QInA.addType(oFF.MemberType.PARETO);
	oFF.QInA.addType(oFF.MemberType.HIERARCHY_NODE);
	oFF.QInA.addType(oFF.MemberType.RESULT);
	oFF.QInA.addType(oFF.MemberType.CONDITION_RESULT);
	oFF.QInA.addType(oFF.MemberType.CONDITION_OTHERS_RESULT);
	oFF.QInA.addType(oFF.MemberType.MEASURE);
	oFF.QInA.addType(oFF.MemberType.ABSTRACT_MEMBER);
	oFF.QInA.addType(oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.RUNNING_AGGREGATION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.FORMULA_CONSTANT);
	oFF.QInA.addType(oFF.OlapComponentType.FORMULA_ITEM_MEMBER);
	oFF.QInA.addType(oFF.OlapComponentType.FORMULA_OPERATION);
	oFF.QInA.addType(oFF.OlapComponentType.FORMULA_FUNCTION);
	oFF.QInA.addType(oFF.OlapComponentType.MEMBERS);
	oFF.QInA.addType(oFF.OlapComponentType.DIMENSION_SORTING);
	oFF.QInA.addType(oFF.OlapComponentType.FIELD_SORTING);
	oFF.QInA.addType(oFF.OlapComponentType.DATA_CELL_SORTING);
	oFF.QInA.addType(oFF.OlapComponentType.COMPLEX_SORTING);
	oFF.QInA.addType(oFF.OlapComponentType.MEASURE_SORTING);
	oFF.QInA.addType(oFF.OlapComponentType.GENERIC_SORTING);
	oFF.QInA.addType(oFF.OlapComponentType.LAYER);
	oFF.QInA.addType(oFF.OlapComponentType.LAYER_SYNC_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.LAYER_REFERENCE_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.ABSTRACT_LAYER_MODEL);
	oFF.QInA.addType(oFF.OlapComponentType.VARIABLE_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.VARIABLE_CONTAINER);
	oFF.QInA.addType(oFF.OlapComponentType.VARIABLE_LIST);
	oFF.QInA.addType(oFF.VariableType.TEXT_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.FORMULA_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.HIERARCHY_NODE_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.HIERARCHY_NAME_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.HIERARCHY_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.OPTION_LIST_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.SIMPLE_TYPE_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.FUNCTIONAL_VARIABLE);
	oFF.QInA.addType(oFF.VariableType.ANY_VARIABLE);
	oFF.QInA.addType(oFF.OlapComponentType.VARIABLE_CONTEXT);
	oFF.QInA.addType(oFF.OlapComponentType.OLAP_FILTER_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_CAPABILITY_GROUP);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_CAPABILITY);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_EXPRESSION);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_LITERAL);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_FIXED);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_DYNAMIC);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_VISIBILITY);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND);
	oFF.QInA.addType(oFF.FilterComponentType.CARTESIAN_LIST);
	oFF.QInA.addType(oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST);
	oFF.QInA.addType(oFF.FilterComponentType.CARTESIAN_PRODUCT);
	oFF.QInA.addType(oFF.FilterComponentType.AND);
	oFF.QInA.addType(oFF.FilterComponentType.OR);
	oFF.QInA.addType(oFF.FilterComponentType.NOT);
	oFF.QInA.addType(oFF.FilterComponentType.SPATIAL_FILTER);
	oFF.QInA.addType(oFF.FilterComponentType.BOOLEAN_ALGEBRA);
	oFF.QInA.addType(oFF.FilterComponentType.OPERATION);
	oFF.QInA.addType(oFF.FilterComponentType.DATE_RANGE_OPERATION);
	oFF.QInA.addType(oFF.FilterComponentType.FILTER_MEASURE_BASED);
	oFF.QInA.addType(oFF.FilterComponentType.FILTER_ACROSS_MODELS);
	oFF.QInA.addType(oFF.FilterComponentType.FILTER_ASYMMETRIC_VISIBILITY);
	oFF.QInA.addType(oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE);
	oFF.QInA.addType(oFF.FilterComponentType.FILTER_DYNAMIC_TIME_TO_DATE_RANGE);
	oFF.QInA.addType(oFF.FilterComponentType.FILTER_FIXED_TIME_RANGE);
	oFF.QInA.addType(oFF.OlapComponentType.FILTER_ELEMENT);
	oFF.QInA.addType(oFF.OlapComponentType.DIMENSION_CONTEXT);
	oFF.QInA.addType(oFF.OlapComponentType.DIMENSIONS);
	oFF.QInA.addType(oFF.DimensionType.PRESENTATION);
	oFF.QInA.addType(oFF.DimensionType.CONTAINER);
	oFF.QInA.addType(oFF.DimensionType.ATTRIBUTE_DIM);
	oFF.QInA.addType(oFF.DimensionType.CURRENCY);
	oFF.QInA.addType(oFF.DimensionType.UNIT);
	oFF.QInA.addType(oFF.DimensionType.TIME);
	oFF.QInA.addType(oFF.DimensionType.DATE);
	oFF.QInA.addType(oFF.DimensionType.HIERARCHY_VERSION);
	oFF.QInA.addType(oFF.DimensionType.HIERARCHY_NAME);
	oFF.QInA.addType(oFF.DimensionType.SEARCH_DIMENSION);
	oFF.QInA.addType(oFF.DimensionType.VIRTUAL);
	oFF.QInA.addType(oFF.DimensionType.VERSION_EPM);
	oFF.QInA.addType(oFF.DimensionType.VERSION_IBP);
	oFF.QInA.addType(oFF.DimensionType.ACCOUNT);
	oFF.QInA.addType(oFF.DimensionType.GIS_DIMENSION);
	oFF.QInA.addType(oFF.DimensionType.SEARCH_RESULT);
	oFF.QInA.addType(oFF.DimensionType.SUGGEST_TERM);
	oFF.QInA.addType(oFF.DimensionType.SUGGEST_SCOPE);
	oFF.QInA.addType(oFF.DimensionType.SUGGEST_ATTRIBUTE);
	oFF.QInA.addType(oFF.DimensionType.MEASURE_STRUCTURE);
	oFF.QInA.addType(oFF.DimensionType.SECONDARY_STRUCTURE);
	oFF.QInA.addType(oFF.DimensionType.ABSTRACT_STRUCTURE);
	oFF.QInA.addType(oFF.DimensionType.DIMENSION);
	oFF.QInA.addType(oFF.DimensionType.CALCULATED_DIMENSION);
	oFF.QInA.addType(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION);
	oFF.QInA.addType(oFF.OlapComponentType.ABSTRACT_DIMENSION);
	oFF.QInA.addType(oFF.FilterComponentType.TUPLE);
	oFF.QInA.addType(oFF.FilterComponentType.VIRTUAL_DATASOURCE);
	oFF.QInA.addType(oFF.OlapComponentType.MODELLER_CURRENCY_TRANSLATION);
	oFF.QInA.addType(oFF.OlapComponentType.MODELLER_DIMENSIONS);
	oFF.QInA.addType(oFF.OlapComponentType.MODELLER_METADATA_PROPERTIES);
	oFF.QInA.addType(oFF.OlapComponentType.MODELLER_VARIABLES);
	oFF.QInA.addType(oFF.OlapComponentType.QUERY_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.QUERY_SERVICE_CONFIG);
	oFF.QInA.addType(oFF.OlapComponentType.COMPONENT_LIST);
	oFF.QInA.addType(oFF.OlapComponentType.QUERY_CONTEXT);
	oFF.QInA.addType(oFF.OlapComponentType.OLAP);
	oFF.QInA.addType(oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_CELL_REFERENCE_SCOPE);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_CHART_STYLE);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_KPI_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.VISUALIZATION_CUSTOM_DEFINITION);
	oFF.QInA.addType(oFF.OlapComponentType.OLAP_VISUALIZATION_TEMPLATE_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.OLAP_SIMULATION_MANAGER);
	oFF.QInA.addType(oFF.OlapComponentType.QUICK_ACTION_MANAGER);
};
oFF.QInA.addInAComponent = function(inaComponent)
{
	let componentTypeName = inaComponent.getComponentType().getName();
	let modelFormat = inaComponent.getModelFormat();
	if (oFF.isNull(modelFormat))
	{
		modelFormat = oFF.QModelFormat.INA_DATA;
	}
	let usages = modelFormat.getUsages();
	let size = usages.size();
	for (let k = 0; k < size; k++)
	{
		let otherModelFormat = usages.get(k);
		let usageFormatName = otherModelFormat.getName();
		let list = oFF.QInA.s_lookupByFormat.getByKey(usageFormatName);
		let container2 = list.getByKey(componentTypeName);
		oFF.XObjectExt.assertNotNullExt(container2, oFF.XStringUtils.concatenate2("Container not defined: ", componentTypeName));
		container2.add(inaComponent);
	}
};
oFF.QInA.addType = function(componentType)
{
	let all = oFF.QModelFormat.getAllModelFormats();
	let size = all.size();
	for (let i = 0; i < size; i++)
	{
		let name = all.get(i).getName();
		let list = oFF.QInA.s_lookupByFormat.getByKey(name);
		list.add(oFF.QInAComponentContainer.create(componentType));
	}
};
oFF.QInA.removeEmptyContainers = function()
{
	let all = oFF.QModelFormat.getAllModelFormats();
	let allSize = all.size();
	for (let i = 0; i < allSize; i++)
	{
		let list = oFF.QInA.s_lookupByFormat.getByKey(all.get(i).getName());
		for (let k = 0; k < list.size(); )
		{
			let currentComponentContainer = list.get(k);
			if (currentComponentContainer.isEmpty())
			{
				list.removeAt(k);
			}
			else
			{
				k++;
			}
		}
	}
};
oFF.QInA.staticSetup = function()
{
	oFF.QInA.s_lookupByFormat = oFF.XHashMapByString.create();
	oFF.QInA.addAllFormats();
	oFF.QInA.addAllTypes();
};
oFF.QInA.staticSetupForPlanning = function()
{
	oFF.QInA.addAllPlanningTypes();
};
oFF.QInA.prototype.m_application = null;
oFF.QInA.prototype.m_capabilities = null;
oFF.QInA.prototype.m_mode = null;
oFF.QInA.prototype.m_modelContext = null;
oFF.QInA.prototype.m_originalMode = null;
oFF.QInA.prototype.m_variableProcessingDirective = null;
oFF.QInA.prototype.getApplication = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_application);
};
oFF.QInA.prototype.getMode = function()
{
	return this.m_mode;
};
oFF.QInA.prototype.getOriginalMode = function()
{
	return this.m_originalMode;
};
oFF.QInA.prototype.getProcess = function()
{
	return this.getApplication().getProcess();
};
oFF.QInA.prototype.isAbap = function(context)
{
	let modelCapabilities = oFF.notNull(context) ? context.getModelCapabilities() : null;
	return oFF.notNull(modelCapabilities) && this.isSystemTypeEquals(modelCapabilities.getSystemType(), oFF.SystemType.ABAP);
};
oFF.QInA.prototype.isHana = function(context)
{
	let modelCapabilities = oFF.notNull(context) ? context.getModelCapabilities() : null;
	return oFF.notNull(modelCapabilities) && this.isSystemTypeEquals(modelCapabilities.getSystemType(), oFF.SystemType.HANA);
};
oFF.QInA.prototype.isMetadataOfAbap = function(metadata, application)
{
	if (oFF.notNull(metadata) && oFF.notNull(application))
	{
		let cacheKey = metadata.getCacheKey();
		if (oFF.notNull(cacheKey))
		{
			let systemName = cacheKey.getSystemName();
			let systemDescription = oFF.notNull(systemName) ? application.getSystemLandscape().getSystemDescription(systemName) : null;
			return oFF.notNull(systemDescription) && this.isSystemTypeEquals(systemDescription.getSystemType(), oFF.SystemType.ABAP);
		}
	}
	return false;
};
oFF.QInA.prototype.isSystemTypeEquals = function(actual, expected)
{
	return oFF.notNull(expected) && oFF.notNull(actual) && actual.isTypeOf(expected);
};
oFF.QInA.prototype.isVirtualInA = function(context)
{
	return oFF.notNull(context) && context.getModelCapabilities().getSystemType().isTypeOf(oFF.SystemType.VIRTUAL_INA) && !this.getMode().isDataBlending();
};
oFF.QInA.prototype.lookupInAComponent = function(olapComponentType, inaImportElement)
{
	let componentModel = null;
	let containerList = oFF.QInA.s_lookupByFormat.getByKey(this.m_mode.getName());
	let container = containerList.getByKey(olapComponentType.getName());
	if (oFF.isNull(container))
	{
		let size = containerList.size();
		for (let i = 0; i < size; i++)
		{
			container = containerList.get(i);
			if (olapComponentType.isTypeOf(container.getComponentType()))
			{
				componentModel = container.get(inaImportElement);
				break;
			}
		}
	}
	else
	{
		componentModel = container.get(inaImportElement);
	}
	if (oFF.isNull(componentModel))
	{
		this.addError(0, oFF.XStringUtils.concatenate2("Cannot find serialization/deserialization component for type: ", olapComponentType.getName()));
	}
	return componentModel;
};
oFF.QInA.prototype.setApplication = function(application)
{
	this.m_application = oFF.XWeakReferenceUtil.getWeakRef(application);
};
oFF.QInA.prototype.setupImportExport = function(application, mode, capabilities, memberReadModeContext)
{
	let session = null;
	if (oFF.notNull(application))
	{
		session = application.getSession();
	}
	this.setupSessionContext(session);
	this.setApplication(application);
	this.m_mode = mode;
	this.m_originalMode = mode;
	this.m_modelContext = memberReadModeContext;
	if (oFF.isNull(capabilities))
	{
		this.m_capabilities = oFF.QCapabilities.create();
		this.m_capabilities.setSupportsSetOperand(true);
		this.m_capabilities.setSupportsConvertToFlatFilter(true);
		this.m_capabilities.setSupportsCummulative(true);
		this.m_capabilities.setSupportsExtendedSort(true);
		this.m_capabilities.setSupportsSpatialFilter(true);
		this.m_capabilities.setSupportsSpatialFilterSrid(true);
		this.m_capabilities.setSupportsSpatialTransformation(true);
		this.m_capabilities.setSupportsMemberVisibility(true);
		this.m_capabilities.setSupportsCustomDimensionMemberExecutionStep(true);
		this.m_capabilities.setSupportsExtendedDimensions(true);
		this.m_capabilities.setSupportsIgnoreExternalDimensions(true);
		this.m_capabilities.setSupportsSupplements(true);
	}
	else
	{
		this.m_capabilities = capabilities;
	}
};

oFF.QInARepoCalculatedDimension = function() {};
oFF.QInARepoCalculatedDimension.prototype = new oFF.QInARepoDimension();
oFF.QInARepoCalculatedDimension.prototype._ff_c = "QInARepoCalculatedDimension";

oFF.QInARepoCalculatedDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	inaStructure.putString("Name", dimension.getName());
	let type = dimension.getAxisType();
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(type));
	let topEntries = dimension.getTopEntries();
	if (topEntries > 0)
	{
		inaStructure.putInteger("Top", topEntries);
	}
	let skipEntries = dimension.getSkipEntries();
	if (skipEntries > 0)
	{
		inaStructure.putInteger("Skip", skipEntries);
	}
	let inaDataSource = inaStructure.putNewStructure("DataSource");
	inaDataSource.putString("ObjectName", dimension.getPreQueryName());
	inaDataSource.putString("Type", "Query");
	inaStructure.putString("JoinType", dimension.getJoinType().getName());
	let inaJoinFields = inaStructure.putNewList("JoinFields");
	let joinFields = dimension.getJoinFields();
	let size = joinFields.size();
	let i;
	for (i = 0; i < size; i++)
	{
		let fieldNamePair = joinFields.get(i);
		let inaJoinField = inaJoinFields.addNewStructure();
		inaJoinField.putString("JoinFieldName", fieldNamePair.getLocaleFieldName());
		inaJoinField.putString("JoinFieldNameInReferencedData", fieldNamePair.getReferencedFieldName());
	}
	let inaFieldMappings = inaStructure.putNewList("FieldMappings");
	let fieldMappings = dimension.getFieldMappings();
	size = fieldMappings.size();
	for (i = 0; i < size; i++)
	{
		let fieldMapping = fieldMappings.get(i);
		let inaFieldMapping = inaFieldMappings.addNewStructure();
		inaFieldMapping.putString("FieldName", fieldMapping.getLocaleFieldName());
		inaFieldMapping.putString("FieldNameInReferencedData", fieldMapping.getReferencedFieldName());
		let localFieldName = fieldMapping.getLocaleFieldName();
		if (dimension.getFieldByName(localFieldName).getValueType() !== oFF.XValueType.STRING)
		{
			let inaValueType = oFF.QInAConverter.lookupValueTypeInA(dimension.getFieldByName(localFieldName).getValueType());
			inaFieldMapping.putString("CalculatedDimensionFieldValueType", inaValueType);
		}
	}
	this.exportFieldLayout(exporter, inaStructure, dimension);
	exporter.exportTotals(dimension, inaStructure);
	if (dimension.isHidden())
	{
		inaStructure.putBoolean("IsHidden", true);
	}
	return oFF.QInARepoDimension.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoCalculatedDimension.prototype.getComponentType = function()
{
	return oFF.DimensionType.CALCULATED_DIMENSION;
};
oFF.QInARepoCalculatedDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let dimension = modelComponent;
	let calcDimName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(dimension) && oFF.notNull(queryModel))
	{
		dimension = queryModel.getDimensionManagerBase().getDimensionByNameInternal(calcDimName);
	}
	if (oFF.isNull(dimension))
	{
		dimension = oFF.QCalculatedDimension._createCalculatedDimension(context, parentComponent, calcDimName);
	}
	dimension.setDimensionType(oFF.DimensionType.CALCULATED_DIMENSION);
	dimension.setName(calcDimName);
	dimension.setTopEntries(inaStructure.getIntegerByKeyExt("Top", 0));
	dimension.setSkipEntries(inaStructure.getIntegerByKeyExt("Skip", 0));
	let inaDataSource = inaStructure.getStructureByKey("DataSource");
	dimension.setPreQueryName(inaDataSource.getStringByKey("ObjectName"));
	dimension.setJoinType(oFF.JoinType.lookup(inaStructure.getStringByKey("JoinType")));
	let inaJoinFields = inaStructure.getListByKey("JoinFields");
	let size = inaJoinFields.size();
	let idx;
	for (idx = 0; idx < size; idx++)
	{
		let inaJoinField = inaJoinFields.getStructureAt(idx);
		dimension.addJoinFieldByString(inaJoinField.getStringByKey("JoinFieldName"), inaJoinField.getStringByKey("JoinFieldNameInReferencedData"));
	}
	let inaFieldMappings = inaStructure.getListByKey("FieldMappings");
	size = inaFieldMappings.size();
	for (idx = 0; idx < size; idx++)
	{
		let inaFieldMapping = inaFieldMappings.getStructureAt(idx);
		dimension.addFieldMappingByString(inaFieldMapping.getStringByKey("FieldName"), inaFieldMapping.getStringByKey("FieldNameInReferencedData"));
		if (inaFieldMapping.getStringByKey("CalculatedDimensionFieldValueType") !== null)
		{
			let fieldByName = dimension.getFieldByName(inaFieldMapping.getStringByKey("FieldName"));
			fieldByName.setValueType(oFF.QInAConverter.lookupValueType(inaFieldMapping.getStringByKey("CalculatedDimensionFieldValueType")));
		}
	}
	this.importFieldsLayout(importer, inaStructure, dimension, context);
	importer.importTotals(inaStructure, dimension.getResultStructureControllerBase(), context);
	if (inaStructure.containsKey("IsHidden"))
	{
		dimension.setHidden(inaStructure.getBooleanByKey("IsHidden"));
	}
	return dimension;
};

oFF.QInARepoFilterConvertedTimeCartesianList = function() {};
oFF.QInARepoFilterConvertedTimeCartesianList.prototype = new oFF.QInARepoFilterCartesianList();
oFF.QInARepoFilterConvertedTimeCartesianList.prototype._ff_c = "QInARepoFilterConvertedTimeCartesianList";

oFF.QInARepoFilterConvertedTimeCartesianList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInARepoFilterCartesianList.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
	let cartesianList = modelComponent;
	inaStructure.putBoolean("isSingleValueSource", cartesianList.isSingleValueSourceCartesianList());
	if (cartesianList.getHierarchyLevelType() !== null)
	{
		inaStructure.putString("LevelType", cartesianList.getHierarchyLevelType().getName());
	}
	return oFF.QInARepoFilterCartesianList.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterConvertedTimeCartesianList.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST;
};
oFF.QInARepoFilterConvertedTimeCartesianList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = null;
	if (oFF.notNull(parentComponent))
	{
		let parentFilterElement = parentComponent;
		filterExpression = parentFilterElement.getFilterExpression();
	}
	let cartesianList = modelComponent;
	if (oFF.isNull(cartesianList))
	{
		cartesianList = oFF.notNull(filterExpression) ? oFF.QFactory.createFilterConvertedTimeCartesianList(filterExpression) : oFF.QFactory.createFilterConvertedTimeCartesianList(context);
	}
	cartesianList.setIsSingleValueSourceCartesianList(inaStructure.getBooleanByKey("isSingleValueSource"));
	let hierarchyLevelTypeName = inaStructure.getStringByKey("LevelType");
	if (oFF.notNull(hierarchyLevelTypeName))
	{
		cartesianList.setHierarchyLevelType(oFF.HierarchyLevelType.lookup(hierarchyLevelTypeName));
	}
	return oFF.QInARepoFilterCartesianList.prototype.importComponentWithStructure.call( this , importer, inaStructure, cartesianList, parentComponent, context);
};

oFF.QInARepoFilterDynamic = function() {};
oFF.QInARepoFilterDynamic.prototype = new oFF.QInARepoFilter();
oFF.QInARepoFilterDynamic.prototype._ff_c = "QInARepoFilterDynamic";

oFF.QInARepoFilterDynamic.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let modelComponent2 = modelComponent;
	let modelComponent3 = modelComponent2;
	let filter = modelComponent3;
	inaStructure.putBoolean("IgnoreInternalNonMeasureFilters", filter.isIgnoreInternalNonMeasureFilter());
	inaStructure.putBoolean("FlattenHierarchyNodeFiltersFromVariables", filter.isFlattenHierarchyNodeFiltersFromVariables());
	inaStructure.putBoolean("ConvertFiltersToFlatOnHierarchyChange", filter.isConvertFiltersToFlatOnHierarchyChange());
	let filterExpressionState = null;
	if (filter.isDynamicFilterInitialized())
	{
		filterExpressionState = filter.getDynamicFilter();
	}
	let queryModel = modelComponent3.getQueryModel();
	let isAbap = exporter.isAbap(modelComponent3);
	let inaName;
	if (isAbap)
	{
		inaName = "Filter";
	}
	else
	{
		inaName = "DynamicFilter";
	}
	let useOnlyInternalFilter = oFF.notNull(exporter.m_variableProcessingDirective) && queryModel.getModelCapabilities().supportsVariableMasking();
	if (useOnlyInternalFilter)
	{
		let inaSelectionState = exporter.exportFilterExpression(filterExpressionState);
		if (oFF.notNull(inaSelectionState))
		{
			inaStructure.put(inaName, inaSelectionState);
		}
	}
	else
	{
		let tmpFilter = null;
		if (filter.isTmpFilterInitialized())
		{
			tmpFilter = filter.getTmpFilter();
		}
		let exportedFilter = this.exportFilter(exporter, filter, filterExpressionState, filter.getLinkedFilters(), tmpFilter);
		if (oFF.notNull(exportedFilter))
		{
			inaStructure.put(inaName, exportedFilter);
		}
	}
	return oFF.QInARepoFilter.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoFilterDynamic.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_DYNAMIC;
};
oFF.QInARepoFilterDynamic.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let inaFilter = inaStructure.getStructureByKey("DynamicFilter");
	if (oFF.isNull(inaFilter))
	{
		inaFilter = inaStructure.getStructureByKey("Filter");
	}
	let filter = parentComponent;
	let filterExpression = null;
	if (oFF.notNull(filter))
	{
		filter.setIgnoreInternalNonMeasureFilters(inaStructure.getBooleanByKeyExt("IgnoreInternalNonMeasureFilters", false));
		if (inaStructure.containsKey("FlattenHierarchyNodeFiltersFromVariables"))
		{
			filter.setFlattenHierarchyNodeFiltersFromVariables(inaStructure.getBooleanByKey("FlattenHierarchyNodeFiltersFromVariables"));
		}
		if (inaStructure.containsKey("ConvertFiltersToFlatOnHierarchyChange"))
		{
			filter.setConvertFiltersToFlatOnHierarchyChange(inaStructure.getBooleanByKey("ConvertFiltersToFlatOnHierarchyChange"));
		}
		if (filter.isDynamicFilterInitialized())
		{
			filterExpression = filter.getDynamicFilter();
			filterExpression.setComplexRoot(null);
			if (filterExpression.getModelCapabilities().supportsCellValueOperand())
			{
				filterExpression.setIsSuppressingNulls(false);
			}
		}
		filter.resetEffectiveFilter();
	}
	if (oFF.notNull(inaFilter) && !inaFilter.isEmpty())
	{
		filterExpression = importer.importFilterExpression(filterExpression, inaFilter, filter, context);
	}
	if (oFF.notNull(filter))
	{
		filter.setDynamicFilter(filterExpression);
	}
	if (oFF.notNull(filterExpression))
	{
		filterExpression.setPreserveDuringSubmit(true);
	}
	return filterExpression;
};

oFF.QInARepoFilterVisibility = function() {};
oFF.QInARepoFilterVisibility.prototype = new oFF.QInARepoFilter();
oFF.QInARepoFilterVisibility.prototype._ff_c = "QInARepoFilterVisibility";

oFF.QInARepoFilterVisibility.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filter = modelComponent;
	if (filter.getModelCapabilities().supportsVisibilityFilter())
	{
		let tmpVisibilityFilter = null;
		if (filter.isTmpVisibilityFilterInitialized())
		{
			tmpVisibilityFilter = filter.getTmpVisibilityFilter();
		}
		let visibilityFilter = null;
		if (filter.isVisibilityFilterInitialized())
		{
			visibilityFilter = filter.getVisibilityFilter();
		}
		return this.exportFilter(exporter, filter, visibilityFilter, filter.getLinkedVisibilityFilters(), tmpVisibilityFilter);
	}
	return null;
};
oFF.QInARepoFilterVisibility.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_VISIBILITY;
};
oFF.QInARepoFilterVisibility.prototype.getTagName = function()
{
	return "VisibilityFilter";
};
oFF.QInARepoFilterVisibility.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filter = parentComponent;
	if (oFF.notNull(filter) && filter.isVisibilityFilterInitialized())
	{
		let filterExpression = filter.getVisibilityFilter();
		filterExpression.setComplexRoot(null);
		if (filterExpression.getModelCapabilities().supportsCellValueOperand())
		{
			filterExpression.setIsSuppressingNulls(false);
		}
	}
	let selectionContainerVisibility = null;
	if (oFF.notNull(inaStructure))
	{
		selectionContainerVisibility = importer.importFilterExpression(null, inaStructure, filter, context);
		if (oFF.notNull(filter) && oFF.notNull(selectionContainerVisibility))
		{
			filter.setVisibilityFilter(selectionContainerVisibility);
		}
	}
	return selectionContainerVisibility;
};
oFF.QInARepoFilterVisibility.prototype.isValidFilterExpression = function(filterExpressionState)
{
	return oFF.notNull(filterExpressionState);
};

oFF.QInARepoHierarchyManager = function() {};
oFF.QInARepoHierarchyManager.prototype = new oFF.QInARepoHierarchy();
oFF.QInARepoHierarchyManager.prototype._ff_c = "QInARepoHierarchyManager";

oFF.QInARepoHierarchyManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let hierarchyManager = modelComponent;
	return oFF.QInARepoHierarchy.prototype.exportComponentWithStructure.call( this , exporter, hierarchyManager.getDimension(), inaStructure, flags);
};
oFF.QInARepoHierarchyManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY_MANAGER;
};
oFF.QInARepoHierarchyManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let hierarchyManager = modelComponent;
	return oFF.QInARepoHierarchy.prototype.importComponentWithStructure.call( this , importer, inaStructure, hierarchyManager.getDimension(), parentComponent, context);
};

oFF.QInARepoMemberBasicMeasure = function() {};
oFF.QInARepoMemberBasicMeasure.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberBasicMeasure.prototype._ff_c = "QInARepoMemberBasicMeasure";

oFF.QInARepoMemberBasicMeasure.getNameForImport = function(inaStructure, dimension)
{
	let memberName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(memberName) && oFF.notNull(dimension))
	{
		let keyField = dimension.getKeyField();
		let keyName = keyField.getName();
		return inaStructure.getStringByKey(keyName);
	}
	return memberName;
};
oFF.QInARepoMemberBasicMeasure.getNameFromOperand = function(inaStructure)
{
	let memberOperand = inaStructure.getStructureByKey("MemberOperand");
	if (oFF.notNull(memberOperand))
	{
		let isFilterOnMeasures = oFF.XString.isEqual(memberOperand.getStringByKey("AttributeName"), "Measures");
		let isFilterEqual = oFF.QInAConverter.lookupComparison(memberOperand.getStringByKey("Comparison")) === oFF.ComparisonOperator.EQUAL;
		if (isFilterOnMeasures && isFilterEqual)
		{
			return memberOperand.getStringByKey("Value");
		}
	}
	return null;
};
oFF.QInARepoMemberBasicMeasure.getText = function(inaStructure, dimension)
{
	let memberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(memberText) && oFF.notNull(dimension))
	{
		let textField = dimension.getTextField();
		if (oFF.notNull(textField))
		{
			let keyName = textField.getName();
			return inaStructure.getStringByKey(keyName);
		}
	}
	return memberText;
};
oFF.QInARepoMemberBasicMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let basicMeasure = modelComponent;
	let dimension = basicMeasure.getDimension();
	let repoEnforceModelDefined = basicMeasure.getQueryManager().getTagging().containsKey(oFF.QStateConstants.TAG_REPO_FORMAT_FOR_UNDO_REDO);
	if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT && exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA && !repoEnforceModelDefined)
	{
		inaStructure.putString("Name", basicMeasure.getName());
		return inaStructure;
	}
	let text = basicMeasure.getOriginalText();
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !basicMeasure.isCreatedFromMetadata() && !basicMeasure.isModelDefinedMember())
	{
		inaStructure.putStringNotNull("Description", text);
	}
	inaStructure.putString("Dimension", dimension.getName());
	let memberOperandElement = oFF.PrFactory.createStructure();
	memberOperandElement.putString("AttributeName", "Measures");
	inaStructure.put("MemberOperand", memberOperandElement);
	let queryModel = basicMeasure.getQueryModel();
	if (queryModel.isBasicMeasureAggregationExportedInRepo() || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && basicMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_AGGERGATION_TYPE))
	{
		let basicAggregationType = basicMeasure.getAggregationType();
		oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "Aggregation", basicAggregationType);
	}
	if (!basicMeasure.getModelCapabilities().supportsExceptionAggregationDimsFormulas())
	{
		let basicAggregationDimensionName = basicMeasure.getAggregationDimensionName();
		if (oFF.notNull(basicAggregationDimensionName))
		{
			inaStructure.putString("AggregationDimension", basicAggregationDimensionName);
		}
	}
	if (!exporter.m_capabilities.supportsExtendedSort() && !exporter.isVirtualInA(queryModel))
	{
		let measureSorting = queryModel.getSortingManager().getMeasureSorting(basicMeasure, false);
		if (oFF.isNull(measureSorting))
		{
			inaStructure.putInteger("SortOrder", 0);
		}
		else
		{
			inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(measureSorting.getDirection()));
		}
	}
	let value = basicMeasure.getKeyFieldValue();
	memberOperandElement.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL));
	oFF.QInARepoUtils.exportValue(exporter, "Value", memberOperandElement, value, value.getValueType());
	oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties.call( this , exporter, basicMeasure, inaStructure);
	if (queryModel.isBasicMeasureSettingsExportedInRepo() || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || basicMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_UNIT_TYPE))
		{
			inaStructure.putStringNotNull("UnitType", oFF.QInAConverter.lookupUnitTypeInA(basicMeasure.getUnitType()));
		}
		inaStructure.putStringNotNull("UnitFixed", basicMeasure.getUnitFixed());
		inaStructure.putStringNotNull("UnitName", basicMeasure.getUnitName());
		inaStructure.putStringNotNull("UnitTextName", basicMeasure.getUnitTextName());
		if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || basicMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE))
		{
			inaStructure.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(basicMeasure.getDataType()));
		}
	}
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberBasicMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.BASIC_MEASURE;
};
oFF.QInARepoMemberBasicMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = parentComponent;
	if (oFF.isNull(dimension))
	{
		dimension = context.getDimensionAccessor().getDimensionByNameFromExistingMetadata(inaStructure.getStringByKey("Dimension"));
	}
	let newMemberName = oFF.QInARepoMemberBasicMeasure.getNameForImport(inaStructure, dimension);
	let newMemberText = oFF.QInARepoMemberBasicMeasure.getText(inaStructure, dimension);
	if (oFF.XStringUtils.isNullOrEmpty(newMemberName))
	{
		newMemberName = oFF.QInARepoMemberBasicMeasure.getNameFromOperand(inaStructure);
	}
	let member = modelComponent;
	if (oFF.isNull(member))
	{
		member = dimension.getStructureMember(newMemberName);
		if (oFF.isNull(member))
		{
			if (this.newComponentCreationAllowed(importer, inaStructure) && inaStructure.getBooleanByKeyExt("Extended", true) && !(dimension.getQueryModel().isUniversalAccountModel() && dimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE))
			{
				member = oFF.QBasicMeasure._createBasicMeasure(context, dimension);
				if (dimension.getQueryModel() !== null && importer.isAbap(dimension.getQueryModel()))
				{
					member.setNotFromMetadata();
				}
			}
		}
	}
	else
	{
		member.setDimension(dimension);
	}
	if (oFF.notNull(member))
	{
		member.setName(newMemberName);
		let overrideDescription = inaStructure.getBooleanByKeyExt("OverrideDescription", false);
		if (overrideDescription)
		{
			if (oFF.XStringUtils.isNullOrEmpty(newMemberText))
			{
				if (oFF.XStringUtils.isNullOrEmpty(member.getOriginalText()))
				{
					newMemberText = newMemberName;
				}
				else
				{
					newMemberText = member.getOriginalText();
				}
			}
			if (!oFF.XString.isEqual(newMemberText, member.getOriginalText()))
			{
				let textField = dimension.getTextField();
				if (oFF.notNull(textField))
				{
					dimension.setAlternativeFieldValue(false, newMemberName, textField.getName(), oFF.XStringValue.create(newMemberText), null);
				}
			}
		}
		if (oFF.notNull(newMemberText) && (member.getOriginalText() === null || overrideDescription))
		{
			member.setText(newMemberText);
		}
		member.initializeFieldValues();
		oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties(importer, member, inaStructure);
	}
	return member;
};

oFF.QInARepoMemberCurrency = function() {};
oFF.QInARepoMemberCurrency.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberCurrency.prototype._ff_c = "QInARepoMemberCurrency";

oFF.QInARepoMemberCurrency.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let currencyMeasure = modelComponent;
	inaStructure.putString("Name", currencyMeasure.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !currencyMeasure.isCreatedFromMetadata() && !currencyMeasure.isModelDefinedMember())
	{
		inaStructure.putString("Description", currencyMeasure.getOriginalText());
	}
	inaStructure.putStringNotNullAndNotEmpty("BaseMeasureName", currencyMeasure.getBaseMeasureName());
	inaStructure.putStringNotNullAndNotEmpty("CurrencyTranslationName", currencyMeasure.getCurrencyTranslationName());
	if (!currencyMeasure.isLocalCurrency())
	{
		let specificTranslation = currencyMeasure.getLocalCurrencyTranslation();
		let inaCurrencyTranslation = inaStructure.putNewStructure("CurrencyTranslation");
		exporter.exportCurrencyTranslationElement(specificTranslation, inaCurrencyTranslation);
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || currencyMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_AUTO_SIGN_FLIP))
	{
		if (currencyMeasure.isAutoSignFlip() || currencyMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_AUTO_SIGN_FLIP) && exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			inaStructure.putBoolean("AutoSignFlip", currencyMeasure.isAutoSignFlip());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || currencyMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_UNIT_TYPE))
	{
		inaStructure.putStringNotNull("UnitType", oFF.QInAConverter.lookupUnitTypeInA(currencyMeasure.getUnitType()));
	}
	inaStructure.putStringNotNull("UnitFixed", currencyMeasure.getUnitFixed());
	inaStructure.putStringNotNull("UnitName", currencyMeasure.getUnitName());
	inaStructure.putStringNotNull("UnitTextName", currencyMeasure.getUnitTextName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || currencyMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE))
	{
		inaStructure.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(currencyMeasure.getDataType()));
	}
	oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties.call( this , exporter, currencyMeasure, inaStructure);
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberCurrency.prototype.getComponentType = function()
{
	return oFF.MemberType.CURRENCY_MEASURE;
};
oFF.QInARepoMemberCurrency.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let currencyMeasure = modelComponent;
	let dimension = parentComponent;
	let newMemberName = inaStructure.getStringByKey("Name");
	let newMemberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(currencyMeasure))
	{
		currencyMeasure = dimension.addNewCurrencyMeasure(newMemberName, newMemberText);
	}
	else
	{
		currencyMeasure.setDimension(dimension);
		currencyMeasure.setName(newMemberName);
		if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || currencyMeasure.getOriginalText() === null))
		{
			currencyMeasure.setText(newMemberText);
		}
	}
	oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties(importer, currencyMeasure, inaStructure);
	currencyMeasure.setBaseMeasureName(inaStructure.getStringByKey("BaseMeasureName"));
	if (inaStructure.containsKey("CurrencyTranslationName"))
	{
		currencyMeasure.setCurrencyTranslationName(inaStructure.getStringByKey("CurrencyTranslationName"));
	}
	let currencyTranslation = currencyMeasure.getLocalCurrencyTranslation();
	let localCurrencyTranslation = inaStructure.getStructureByKey("CurrencyTranslation");
	if (oFF.isNull(localCurrencyTranslation))
	{
		currencyMeasure.setLocalCurrency();
	}
	else
	{
		importer.importCurrencyTranslationElement(localCurrencyTranslation, currencyTranslation, context);
	}
	currencyMeasure.setAutoSignFlip(inaStructure.getBooleanByKey("AutoSignFlip"));
	return currencyMeasure;
};
oFF.QInARepoMemberCurrency.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let newMember = oFF.QCurrencyMeasure._createCurrencyMeasure(context, null);
	newMember.setParent(parentComponent);
	return newMember;
};

oFF.QInARepoMemberExceptionAggregationMeasure = function() {};
oFF.QInARepoMemberExceptionAggregationMeasure.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberExceptionAggregationMeasure.prototype._ff_c = "QInARepoMemberExceptionAggregationMeasure";

oFF.QInARepoMemberExceptionAggregationMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let exceptionAggregation = modelComponent;
	inaStructure.putString("Name", exceptionAggregation.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !exceptionAggregation.isCreatedFromMetadata() && !exceptionAggregation.isModelDefinedMember())
	{
		inaStructure.putString("Description", exceptionAggregation.getOriginalText());
	}
	inaStructure.putString("MeasureName", exceptionAggregation.getMeasure());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exceptionAggregation.hasPropertyChanged(oFF.QMeasureProperties.QY_CONDITION_TYPE))
	{
		inaStructure.putString("ConditionType", exceptionAggregation.getConditionType().getName());
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exceptionAggregation.hasPropertyChanged(oFF.QMeasureProperties.QY_EXCEPTION_AGGREGATION_ON_SELECTION))
	{
		inaStructure.putBoolean("ExceptionAggregationOnSelectionEnabled", exceptionAggregation.getIsExceptionAggregationOnSelectionEnabled());
	}
	let filterRoot = exceptionAggregation.getFilter().getFilterRootElement();
	if (oFF.notNull(filterRoot))
	{
		let inaFilterRootElement = exporter.exportComponent(null, filterRoot, null, flags);
		inaStructure.put("Selection", inaFilterRootElement);
	}
	oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties.call( this , exporter, exceptionAggregation, inaStructure);
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberExceptionAggregationMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.EXCEPTION_AGGREGATION;
};
oFF.QInARepoMemberExceptionAggregationMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let exceptionAggregation = modelComponent;
	let dimension = parentComponent;
	let newMemberName = inaStructure.getStringByKey("Name");
	let newMemberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(exceptionAggregation))
	{
		exceptionAggregation = dimension.addNewExceptionAggregationMeasure(newMemberName, newMemberText);
	}
	else
	{
		exceptionAggregation.setDimension(dimension);
		exceptionAggregation.setName(newMemberName);
		if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || exceptionAggregation.getOriginalText() === null))
		{
			exceptionAggregation.setText(newMemberText);
		}
	}
	exceptionAggregation.setMeasure(inaStructure.getStringByKey("MeasureName"));
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasStringByKey("ConditionType"))
	{
		exceptionAggregation.setConditionType(oFF.ExceptionAggregationConditionType.lookup(inaStructure.getStringByKey("ConditionType")));
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("ExceptionAggregationOnSelectionEnabled"))
	{
		exceptionAggregation.setIsExceptionAggregationOnSelectionEnabled(inaStructure.getBooleanByKey("ExceptionAggregationOnSelectionEnabled"));
	}
	let filter = exceptionAggregation.getFilter();
	let filterElement = null;
	let inaSelection = inaStructure.getStructureByKey("Selection");
	if (oFF.notNull(inaSelection))
	{
		filterElement = importer.importComponent(null, inaSelection, null, filter, context);
	}
	filter.setComplexRoot(filterElement);
	return exceptionAggregation;
};
oFF.QInARepoMemberExceptionAggregationMeasure.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let newMember = oFF.QExceptionAggregationMeasure._createExceptionAggregationMeasure(context, null);
	newMember.setParent(parentComponent);
	return newMember;
};

oFF.QInARepoMemberFormulaMeasure = function() {};
oFF.QInARepoMemberFormulaMeasure.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberFormulaMeasure.prototype._ff_c = "QInARepoMemberFormulaMeasure";

oFF.QInARepoMemberFormulaMeasure.exportInverseFormulas = function(exporter, formulaMeasure, inaStructure)
{
	let inverseFormulaList = formulaMeasure.getInverseFormulaList();
	if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inverseFormulaList.getModCounter() > 0)
	{
		let inaInverseFormulas = inaStructure.putNewList("InverseFormulas");
		let numberOfInverseFormulas = inverseFormulaList.size();
		for (let i = 0; i < numberOfInverseFormulas; i++)
		{
			let inaInverseFormula = oFF.PrFactory.createStructure();
			inaInverseFormulas.add(inaInverseFormula);
			let formulaInverseFormula = inverseFormulaList.get(i);
			let inaFormula = oFF.PrFactory.createStructure();
			oFF.QInARepoMemberAbstract.exportFormulaItem(exporter, formulaInverseFormula.getInternalFormulaItem(), inaFormula, formulaMeasure);
			inaInverseFormula.put("Formula", inaFormula);
			let targetMemberName = formulaInverseFormula.getTarget();
			if (oFF.notNull(targetMemberName))
			{
				let inaTarget = oFF.PrFactory.createStructure();
				inaInverseFormula.put("Target", inaTarget);
				oFF.QInARepoMemberAbstract.exportFormulaItem(exporter, targetMemberName, inaTarget, formulaMeasure.getContext());
			}
			let condition = formulaInverseFormula.getCondition();
			if (oFF.notNull(condition))
			{
				let inaCondition = oFF.PrFactory.createStructure();
				inaInverseFormula.put("Condition", inaCondition);
				oFF.QInARepoMemberAbstract.exportFormulaItem(exporter, condition, inaCondition, formulaMeasure);
			}
		}
	}
};
oFF.QInARepoMemberFormulaMeasure.exportIteration = function(exporter, formulaMeasure, inaFormula)
{
	let iteration = formulaMeasure.getIteration();
	if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || iteration.getModCounter() > 0)
	{
		let inaIteration = inaFormula.putNewStructure("Iteration");
		inaIteration.putString("StartValueMember", iteration.getStartValueMemberName());
		let iterationDimensions = iteration.getIterationDimensions();
		let inaIterationDimensions = inaIteration.putNewList("IterationDimensions");
		let size = iterationDimensions.size();
		for (let i = 0; i < size; i++)
		{
			let iterationDimension = iterationDimensions.get(i);
			let inaIterationDimension = inaIterationDimensions.addNewStructure();
			inaIterationDimension.putStringNotNullAndNotEmpty("Name", iterationDimension.getDimensionName());
			inaIterationDimension.putStringNotNullAndNotEmpty("PartitionLevel", iterationDimension.getPartitionLevelName());
		}
		if (iteration.useGlobalSort())
		{
			inaIteration.putBoolean("UseGlobalSort", true);
		}
	}
};
oFF.QInARepoMemberFormulaMeasure.getNameForImport = function(inaStructure, dimension)
{
	let memberName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(memberName) && oFF.notNull(dimension))
	{
		let keyField = dimension.getKeyField();
		let keyName = keyField.getName();
		return inaStructure.getStringByKey(keyName);
	}
	return memberName;
};
oFF.QInARepoMemberFormulaMeasure.getText = function(inaStructure, dimension)
{
	let memberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(memberText) && oFF.notNull(dimension))
	{
		let textField = dimension.getTextField();
		if (oFF.notNull(textField))
		{
			let keyName = textField.getName();
			memberText = inaStructure.getStringByKey(keyName);
		}
	}
	return memberText;
};
oFF.QInARepoMemberFormulaMeasure.importDimensionContext = function(context, formulaItem, inaFormulaItem)
{
	let inaDimensionContext = inaFormulaItem.getStructureByKey("DimensionContext");
	if (oFF.notNull(inaDimensionContext))
	{
		let datasetId = inaDimensionContext.getStringByKey("DatasetId");
		let sharedQueryManager = context.getOlapEnv().getSharedQueryManager(datasetId);
		if (oFF.notNull(sharedQueryManager))
		{
			let dimensionContext = sharedQueryManager.getQueryModel().getDimensionByName(inaDimensionContext.getStringByKey("DimensionName"));
			formulaItem.setDimensionContext(dimensionContext);
		}
	}
};
oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure = function(importer, dimension, inaFormula, formulaItemx, context)
{
	let formulaItem = null;
	if (oFF.notNull(inaFormula))
	{
		let inaFunction = inaFormula.getStructureByKey("Function");
		formulaItem = formulaItemx;
		if (oFF.notNull(inaFunction))
		{
			let functionName = inaFunction.getStringByKey("Name");
			let functionParameters = inaFunction.getListByKey("Parameters");
			let newFormulaFunction = oFF.QFactory.createFormulaFunction(context);
			if (oFF.notNull(functionParameters))
			{
				newFormulaFunction.setFunctionName(functionName);
				let paramSize = functionParameters.size();
				for (let paraIdx = 0; paraIdx < paramSize; paraIdx++)
				{
					oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, dimension, functionParameters.getStructureAt(paraIdx), newFormulaFunction, context);
				}
				newFormulaFunction.setRequiresExternalSignFlip(inaFunction.getBooleanByKeyExt("RequiresExternalSignFlip", false));
			}
			newFormulaFunction.setSolveOrder(inaFormula.getIntegerByKeyExt("SolveOrder", 0));
			if (oFF.isNull(formulaItem))
			{
				formulaItem = newFormulaFunction;
			}
			else
			{
				formulaItem.add(newFormulaFunction);
			}
		}
		else
		{
			let constPara = inaFormula.getStructureByKey("Constant");
			if (oFF.notNull(constPara))
			{
				let formulaConstant = oFF.QFactory.createFormulaConstant(context);
				if (oFF.XString.isEqual("Variable", constPara.getStringByKey("ValueIs")))
				{
					let value = constPara.getStringByKey("Value");
					let variableManager = dimension.getQueryModel().getVariableManager();
					formulaConstant.setVariable(variableManager.getVariables().getByKey(value));
					if (oFF.isNull(formulaItem))
					{
						formulaItem = formulaConstant;
					}
					else
					{
						formulaItem.add(formulaConstant);
					}
				}
				else
				{
					let valueTypePara = constPara.getStringByKey("ValueType");
					let valueIsNull = !constPara.containsKey("Value") || constPara.getElementTypeByKey("Value") === oFF.PrElementType.THE_NULL;
					if (oFF.XString.isEqual(valueTypePara, "Number"))
					{
						if (valueIsNull)
						{
							formulaConstant.setNullByType(oFF.XValueType.DOUBLE);
						}
						else
						{
							formulaConstant.setDouble(constPara.getDoubleByKey("Value"));
						}
					}
					else if (oFF.XString.isEqual(valueTypePara, "String"))
					{
						if (valueIsNull)
						{
							formulaConstant.setNullByType(oFF.XValueType.STRING);
						}
						else
						{
							formulaConstant.setString(constPara.getStringByKey("Value"));
						}
					}
					else if (oFF.XString.isEqual(valueTypePara, "Bool"))
					{
						if (valueIsNull)
						{
							formulaConstant.setNullByType(oFF.XValueType.BOOLEAN);
						}
						else
						{
							formulaConstant.setBoolean(constPara.getBooleanByKey("Value"));
						}
					}
					else if (oFF.XString.isEqual(valueTypePara, "DateTime"))
					{
						if (valueIsNull)
						{
							formulaConstant.setNullByType(oFF.XValueType.DATE_TIME);
						}
						else
						{
							formulaConstant.setDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(constPara.getStringByKey("Value"), false));
						}
					}
					else if (oFF.XString.isEqual(valueTypePara, "Date"))
					{
						if (valueIsNull)
						{
							formulaConstant.setNullByType(oFF.XValueType.DATE);
						}
						else
						{
							formulaConstant.setDate(oFF.QInARepoUtils.createDate(constPara.getStringByKey("Value")));
						}
					}
					else if (oFF.XString.isEqual(valueTypePara, "Time"))
					{
						if (valueIsNull)
						{
							formulaConstant.setNullByType(oFF.XValueType.TIME);
						}
						else
						{
							formulaConstant.setTime(oFF.XTime.createTimeSafe(constPara.getStringByKey("Value")));
						}
					}
					else if (oFF.XString.isEqual(valueTypePara, "StringArray"))
					{
						if (!valueIsNull)
						{
							let valuesList = constPara.getListByKey("Value");
							formulaConstant.setStringValues(oFF.PrUtils.asListOfString(valuesList));
						}
					}
					else
					{
						importer.addError(oFF.ErrorCodes.INVALID_TOKEN, "Constant value type is not supported");
						return null;
					}
					let constUnit = constPara.getStringByKey("Unit");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(constUnit))
					{
						formulaConstant.setUnit(constUnit);
					}
					let constCurrency = constPara.getStringByKey("Currency");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(constCurrency))
					{
						formulaConstant.setCurrency(constCurrency);
					}
					if (oFF.isNull(formulaItem))
					{
						formulaItem = formulaConstant;
					}
					else
					{
						formulaItem.add(formulaConstant);
					}
				}
			}
			else
			{
				let memberPara = inaFormula.getStructureByKey("Member");
				if (oFF.notNull(memberPara))
				{
					let formulaMember = oFF.QFactory.createFormulaMember(context);
					let memberParaName = memberPara.getStringByKey("Name");
					formulaMember.setMemberName(memberParaName);
					formulaMember.setDimensionName(memberPara.getStringByKey("Dimension"));
					let nameIs = memberPara.getStringByKey("NameIs");
					if (oFF.XString.isEqual(nameIs, "Booked"))
					{
						formulaMember.setBooked();
					}
					else if (oFF.XString.isEqual(nameIs, "Previous"))
					{
						formulaMember.setPrevious();
					}
					else if (oFF.XString.isEqual(nameIs, "Variable"))
					{
						let variable = formulaMember.getQueryModel().getVariable(memberParaName);
						if (oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
						{
							formulaMember.setVariable(variable);
						}
					}
					if (memberPara.containsKey("IsCalculationVariable"))
					{
						formulaMember.setIsCalculationVariable(memberPara.getBooleanByKey("IsCalculationVariable"));
					}
					if (oFF.isNull(formulaItem))
					{
						formulaItem = formulaMember;
					}
					else
					{
						formulaItem.add(formulaMember);
					}
					oFF.QInARepoMemberFormulaMeasure.importDimensionContext(context, formulaMember, memberPara);
				}
				else
				{
					let attribute = inaFormula.getStructureByKey("AttributeValue");
					if (oFF.notNull(attribute))
					{
						let attributeName = attribute.getStringByKey("Name");
						let formulaAttribute = oFF.QFactory.createFormulaAttributeWithName(context, attributeName);
						if (oFF.isNull(formulaItem))
						{
							formulaItem = formulaAttribute;
						}
						else
						{
							formulaItem.add(formulaAttribute);
						}
						oFF.QInARepoMemberFormulaMeasure.importDimensionContext(context, formulaItem, attribute);
					}
				}
			}
		}
	}
	return formulaItem;
};
oFF.QInARepoMemberFormulaMeasure.importInverseFormulas = function(importer, member, context, inaInverseFormulas)
{
	let measureDimension = member.getDimension();
	let numberOfInverseFormulas = inaInverseFormulas.size();
	let inverseFormulaList = member.getInverseFormulaList();
	inverseFormulaList.clear();
	for (let i = 0; i < numberOfInverseFormulas; i++)
	{
		let inaInverseFormulaDetail = inaInverseFormulas.get(i);
		let inaInverseFormula = inaInverseFormulaDetail.getStructureByKey("Formula");
		let inverseFormulaItem = oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, measureDimension, inaInverseFormula, null, context);
		let condition = null;
		let inaCondition = inaInverseFormulaDetail.getStructureByKey("Condition");
		if (oFF.notNull(inaCondition))
		{
			condition = oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, measureDimension, inaCondition, null, context);
		}
		let inAInverseFormulaTarget = inaInverseFormulaDetail.getStructureByKey("Target");
		let targetMemberName = oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, measureDimension, inAInverseFormulaTarget, null, context);
		let inverseFormula = oFF.QFormulaInverseFormula.createInverseFormula(context, member, condition, targetMemberName, inverseFormulaItem);
		inverseFormulaList.add(inverseFormula);
	}
};
oFF.QInARepoMemberFormulaMeasure.importIteration = function(importer, member, context, inaIteration)
{
	let iteration = oFF.QFactory.createIteration(context);
	member.setIteration(iteration);
	iteration.setStartValueMemberName(inaIteration.getStringByKey("StartValueMember"));
	let inaIterationDimensions = inaIteration.getListByKey("IterationDimensions");
	if (oFF.XCollectionUtils.hasElements(inaIterationDimensions))
	{
		let size = inaIterationDimensions.size();
		for (let i = 0; i < size; i++)
		{
			let inaIterationDimension = inaIterationDimensions.getStructureAt(i);
			let iterationDimension = oFF.QFactory.createIterationDimension(context);
			iterationDimension.setDimensionName(inaIterationDimension.getStringByKey("Name"));
			iterationDimension.setPartitionLevelName(inaIterationDimension.getStringByKey("PartitionLevel"));
			iteration.addIterationDimension(iterationDimension);
		}
	}
	if (inaIteration.containsKey("UseGlobalSort"))
	{
		iteration.setUseGlobalSort(inaIteration.getBooleanByKey("UseGlobalSort"));
	}
};
oFF.QInARepoMemberFormulaMeasure.importNameAndText = function(importer, inaStructure, member, dimension)
{
	let newMemberName = oFF.QInARepoMemberFormulaMeasure.getNameForImport(inaStructure, dimension);
	let newMemberText = oFF.QInARepoMemberFormulaMeasure.getText(inaStructure, dimension);
	if (oFF.XStringUtils.isNullOrEmpty(newMemberName) && oFF.XStringUtils.isNullOrEmpty(newMemberText))
	{
		newMemberName = inaStructure.getStringByKey("Name");
		newMemberText = inaStructure.getStringByKey("Description");
	}
	member.setName(newMemberName);
	if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || member.getOriginalText() === null))
	{
		member.setText(newMemberText);
	}
};
oFF.QInARepoMemberFormulaMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let formulaMeasure = modelComponent;
	inaStructure.putString("Name", formulaMeasure.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !formulaMeasure.isCreatedFromMetadata() && !formulaMeasure.isModelDefinedMember())
	{
		inaStructure.putString("Description", formulaMeasure.getOriginalText());
	}
	let inaFormula = oFF.PrFactory.createStructure();
	oFF.QInARepoMemberAbstract.exportFormulaItem(exporter, formulaMeasure.getFormula(), inaFormula, formulaMeasure);
	if (inaFormula.hasElements())
	{
		inaStructure.put("Formula", inaFormula);
	}
	if (formulaMeasure.getFormulaType() !== null)
	{
		inaStructure.putString("FormulaType", formulaMeasure.getFormulaType().getName());
	}
	if (formulaMeasure.supportsCalculatedBeforeAggregation() && (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaMeasure.hasPropertyChanged(oFF.QMeasureProperties.QY_CALCULATE_BEFORE_AGGREGATION)))
	{
		if (formulaMeasure.isCalculatedBeforeAggregation())
		{
			inaStructure.putString("ExecutionStep", "CalculationBeforeAggregation");
		}
		else if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			inaStructure.putString("ExecutionStep", "CalculationAfterAggregation");
		}
	}
	if (oFF.XCollectionUtils.hasElements(formulaMeasure.getInverseFormulaList()))
	{
		oFF.QInARepoMemberFormulaMeasure.exportInverseFormulas(exporter, formulaMeasure, inaStructure);
	}
	if (formulaMeasure.getIteration() !== null)
	{
		oFF.QInARepoMemberFormulaMeasure.exportIteration(exporter, formulaMeasure, inaStructure);
	}
	if (formulaMeasure.getFormulaText().isPresent())
	{
		inaStructure.putString("FormulaText", formulaMeasure.getFormulaText().get());
	}
	if (formulaMeasure.isEditable())
	{
		inaStructure.putBoolean("IsFormulaEditable", formulaMeasure.isEditable());
	}
	if (formulaMeasure.getCustomMeasureNames().isPresent() && !formulaMeasure.getCustomMeasureNames().get().isEmpty())
	{
		inaStructure.putNewList("CustomMeasuresName").addAllStrings(formulaMeasure.getCustomMeasureNames().get());
	}
	oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties.call( this , exporter, formulaMeasure, inaStructure);
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_UNIT_TYPE))
	{
		inaStructure.putStringNotNull("UnitType", oFF.QInAConverter.lookupUnitTypeInA(formulaMeasure.getUnitType()));
	}
	inaStructure.putStringNotNull("UnitFixed", formulaMeasure.getUnitFixed());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_AGGERGATION_TYPE))
	{
		let basicAggregationType = formulaMeasure.getAggregationType();
		oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "Aggregation", basicAggregationType);
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_PRESENTATION_SIGN_REVERSAL))
	{
		let presentationSignReversal = formulaMeasure.getPresentationSignReversal();
		if (oFF.notNull(presentationSignReversal))
		{
			inaStructure.putBoolean("PresentationSignReversal", presentationSignReversal.getBoolean());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || formulaMeasure.hasPropertyChanged(oFF.QMeasureProperties.QY_AUTO_SIGN_FLIP_FOR_RM_ONLY))
	{
		if (formulaMeasure.isAutoSignFlipRestrictedMeasureOnly() || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && formulaMeasure.hasPropertyChanged(oFF.QMeasureProperties.QY_AUTO_SIGN_FLIP_FOR_RM_ONLY))
		{
			inaStructure.putBoolean("AutoSignFlipForRMOnly", formulaMeasure.isAutoSignFlipRestrictedMeasureOnly());
		}
	}
	if (formulaMeasure.hasVisibilityFilter() && formulaMeasure.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
	{
		let visibilityFilter = exporter.exportFilterExpression(formulaMeasure.getVisibilityFilter());
		if (oFF.notNull(visibilityFilter))
		{
			inaStructure.put("VisibilityFilter", visibilityFilter);
		}
	}
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberFormulaMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.FORMULA;
};
oFF.QInARepoMemberFormulaMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = parentComponent;
	let queryModel = context.getQueryModel();
	if (oFF.isNull(dimension))
	{
		dimension = queryModel.getMeasureDimension();
	}
	let member = modelComponent;
	let newMemberName = oFF.QInARepoMemberFormulaMeasure.getNameForImport(inaStructure, dimension);
	if (oFF.isNull(member) && dimension.getModelCapabilities().supportsCustomMeasuresInMetadata())
	{
		member = dimension.getStructureMember(newMemberName);
	}
	if (oFF.isNull(member))
	{
		if (this.newComponentCreationAllowed(importer, inaStructure))
		{
			member = oFF.QFormulaMeasure._createFormulaMeasure(context, dimension);
		}
	}
	else
	{
		member.setDimension(dimension);
	}
	if (oFF.notNull(member))
	{
		oFF.QInARepoMemberFormulaMeasure.importNameAndText(importer, inaStructure, member, dimension);
		let inaFormula = inaStructure.getStructureByKey("Formula");
		oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties(importer, member, inaStructure);
		if (member.getMemberType() === oFF.MemberType.FORMULA)
		{
			let importFormula = oFF.QInARepoMemberFormulaMeasure.importFormulaMeasure(importer, dimension, inaFormula, null, context);
			if (oFF.notNull(importFormula))
			{
				member.setFormula(importFormula);
			}
			let formulaType = inaStructure.getStringByKey("FormulaType");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(formulaType))
			{
				member.setFormulaType(oFF.QFormulaType.lookup(formulaType));
			}
			if (member.supportsCalculatedBeforeAggregation() && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.hasStringByKey("ExecutionStep")))
			{
				member.setIsCalculatedBeforeAggregation(oFF.XString.isEqual("CalculationBeforeAggregation", inaStructure.getStringByKey("ExecutionStep")));
			}
			let inaInverseFormulas = inaStructure.getListByKey("InverseFormulas");
			if (oFF.XCollectionUtils.hasElements(inaInverseFormulas))
			{
				oFF.QInARepoMemberFormulaMeasure.importInverseFormulas(importer, member, context, inaInverseFormulas);
			}
			let inaIteration = inaStructure.getStructureByKey("Iteration");
			if (oFF.XCollectionUtils.hasElements(inaIteration))
			{
				oFF.QInARepoMemberFormulaMeasure.importIteration(importer, member, context, inaIteration);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("AutoSignFlipForRMOnly"))
			{
				member.setAutoSignFlipRestrictedMeasureOnly(inaStructure.getBooleanByKeyExt("AutoSignFlipForRMOnly", false));
			}
			let formulaText = inaStructure.getStringByKey("FormulaText");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(formulaText))
			{
				member.setFormulaText(formulaText);
			}
			if (inaStructure.getBooleanByKeyExt("IsFormulaEditable", false))
			{
				member.setIsEditable(true);
			}
			let customMeasuresName = inaStructure.getListByKey("CustomMeasuresName");
			if (oFF.notNull(customMeasuresName) && !customMeasuresName.isEmpty())
			{
				member.setCustomMeasureNames(oFF.PrUtils.asListOfString(customMeasuresName));
			}
		}
		let inaVisibilityFilter = inaStructure.getStructureByKey("VisibilityFilter");
		if (oFF.notNull(inaVisibilityFilter) && member.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
		{
			let selectionVisibilityContainer = member.getVisibilityFilter();
			importer.importFilterExpression(selectionVisibilityContainer, inaVisibilityFilter, member, context);
		}
	}
	return member;
};
oFF.QInARepoMemberFormulaMeasure.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let formulaMeasure = null;
	if (oFF.isNull(parentComponent) || !context.getModelCapabilities().supportsCustomMeasuresInMetadata())
	{
		formulaMeasure = oFF.QFormulaMeasure._createFormulaMeasure(context, null);
		formulaMeasure.setParent(parentComponent);
	}
	return formulaMeasure;
};

oFF.QInARepoMemberParetoMeasure = function() {};
oFF.QInARepoMemberParetoMeasure.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberParetoMeasure.prototype._ff_c = "QInARepoMemberParetoMeasure";

oFF.QInARepoMemberParetoMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let paretoMeasure = modelComponent;
	inaStructure.putString("Name", paretoMeasure.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !paretoMeasure.isCreatedFromMetadata() && !paretoMeasure.isModelDefinedMember())
	{
		inaStructure.putString("Description", paretoMeasure.getOriginalText());
	}
	inaStructure.putString("BaseMeasureName", paretoMeasure.getBaseMeasureName());
	inaStructure.putBoolean("UseSumAggregation", paretoMeasure.useSumAggregation());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || paretoMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_ITERATION_DIMENSIONS))
	{
		let iterationDimensionNames = paretoMeasure.getIterationDimensionNames();
		if (iterationDimensionNames.hasElements())
		{
			let dimensionNames = inaStructure.putNewList("IterationDimensions");
			dimensionNames.addAllStrings(iterationDimensionNames);
		}
	}
	oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties.call( this , exporter, paretoMeasure, inaStructure);
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberParetoMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.PARETO;
};
oFF.QInARepoMemberParetoMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let paretoMeasure = modelComponent;
	let dimension = parentComponent;
	let newMemberName = inaStructure.getStringByKey("Name");
	let newMemberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(paretoMeasure))
	{
		paretoMeasure = dimension.addNewParetoMeasure(newMemberName, newMemberText);
	}
	else
	{
		paretoMeasure.setDimension(dimension);
		paretoMeasure.setName(newMemberName);
		if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || paretoMeasure.getOriginalText() === null))
		{
			paretoMeasure.setText(newMemberText);
		}
	}
	paretoMeasure.setBaseMeasureName(inaStructure.getStringByKey("BaseMeasureName"));
	oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties(importer, paretoMeasure, inaStructure);
	paretoMeasure.setUseSumAggregation(inaStructure.getBooleanByKeyExt("UseSumAggregation", false));
	if (inaStructure.containsKey("IterationDimensions"))
	{
		paretoMeasure.clearIterationDimensionNames();
		let iterationDimensionNames = inaStructure.getListByKey("IterationDimensions");
		for (let i = 0; i < iterationDimensionNames.size(); i++)
		{
			paretoMeasure.addIterationDimensionName(iterationDimensionNames.getStringAt(i));
		}
	}
	return paretoMeasure;
};
oFF.QInARepoMemberParetoMeasure.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let newMember = oFF.QParetoMeasure._createParetoMeasure(context, null);
	newMember.setParent(parentComponent);
	return newMember;
};

oFF.QInARepoMemberRestricted = function() {};
oFF.QInARepoMemberRestricted.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberRestricted.prototype._ff_c = "QInARepoMemberRestricted";

oFF.QInARepoMemberRestricted.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let restrictedMeasure = modelComponent;
	inaStructure.putString("Name", restrictedMeasure.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !restrictedMeasure.isCreatedFromMetadata() && !restrictedMeasure.isModelDefinedMember())
	{
		inaStructure.putString("Description", restrictedMeasure.getOriginalText());
	}
	this.exportGenericMemberProperties(exporter, restrictedMeasure, inaStructure);
	let filterRoot = restrictedMeasure.getFilter().getFilterRootElement();
	if (oFF.notNull(filterRoot) && (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY_DELTA || restrictedMeasure.getFilter().getModCounter() > 0))
	{
		let inaElement = exporter.exportComponent(null, filterRoot, null, flags);
		inaStructure.put("Selection", inaElement);
	}
	let timeOperation = restrictedMeasure.getTimeOperation();
	if (oFF.notNull(timeOperation))
	{
		let inaTimeOperationStructure = oFF.PrFactory.createStructure();
		oFF.QInARepoUtils.exportTimeOperation(inaTimeOperationStructure, timeOperation);
		inaStructure.put("TimeOperation", inaTimeOperationStructure);
	}
	let basicAggregationType = restrictedMeasure.getAggregationType();
	oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "Aggregation", basicAggregationType);
	inaStructure.putStringNotNull("UnitType", oFF.QInAConverter.lookupUnitTypeInA(restrictedMeasure.getUnitType()));
	inaStructure.putStringNotNull("UnitFixed", restrictedMeasure.getUnitFixed());
	inaStructure.putStringNotNull("UnitName", restrictedMeasure.getUnitName());
	inaStructure.putStringNotNull("UnitTextName", restrictedMeasure.getUnitTextName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || restrictedMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE))
	{
		inaStructure.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(restrictedMeasure.getDataType()));
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || restrictedMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_PRESENTATION_SIGN_REVERSAL))
	{
		let presentationSignReversal = restrictedMeasure.getPresentationSignReversal();
		if (oFF.notNull(presentationSignReversal))
		{
			inaStructure.putBoolean("PresentationSignReversal", presentationSignReversal.getBoolean());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || restrictedMeasure.hasPropertyChanged(oFF.QMeasureProperties.QY_FLATTEN_DEPENDENT_RESTRICTED_MEASURES))
	{
		let flattenDependentRestrictedMeasures = restrictedMeasure.isFlattenSelection();
		if (flattenDependentRestrictedMeasures || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			inaStructure.putBoolean("FlattenDependentRestrictedMeasures", flattenDependentRestrictedMeasures);
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || restrictedMeasure.hasPropertyChanged(oFF.QMeasureProperties.QY_DISABLE_IGNORE_EXTDIM_ON_FIXEDFILTERS))
	{
		if (restrictedMeasure.isDisableIgnoreExternalDimensionOnFixedFilters() || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA && restrictedMeasure.hasPropertyChanged(oFF.QMeasureProperties.QY_DISABLE_IGNORE_EXTDIM_ON_FIXEDFILTERS))
		{
			inaStructure.putBoolean("DisableIgnoreExtDimOnFixedFilters", restrictedMeasure.isDisableIgnoreExternalDimensionOnFixedFilters());
		}
	}
	if (restrictedMeasure.getFilterOnVirtualMeasureCount())
	{
		inaStructure.putBoolean("FilterOnVirtualMeasureCount", true);
	}
	if (restrictedMeasure.hasVisibilityFilter() && restrictedMeasure.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
	{
		let visibilityFilter = exporter.exportFilterExpression(restrictedMeasure.getVisibilityFilter());
		if (oFF.notNull(visibilityFilter))
		{
			inaStructure.put("VisibilityFilter", visibilityFilter);
		}
	}
	if (restrictedMeasure.hasDependentCalculation())
	{
		inaStructure.putBoolean("HasDependentCalculation", restrictedMeasure.hasDependentCalculation());
	}
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberRestricted.prototype.getComponentType = function()
{
	return oFF.MemberType.RESTRICTED_MEASURE;
};
oFF.QInARepoMemberRestricted.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let restrictedMeasure = modelComponent;
	let dimension = parentComponent;
	let newMemberName = inaStructure.getStringByKey("Name");
	let newMemberAlias = inaStructure.getStringByKey("AliasName");
	let newMemberText = inaStructure.getStringByKey("Description");
	if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata())
	{
		restrictedMeasure = dimension.getStructureMember(newMemberName);
		if (oFF.notNull(restrictedMeasure) && restrictedMeasure.getMemberType() !== oFF.MemberType.RESTRICTED_MEASURE)
		{
			dimension.removeMeasureWithNoValidation(newMemberName);
			restrictedMeasure = null;
		}
	}
	if (oFF.isNull(restrictedMeasure))
	{
		if (this.newComponentCreationAllowed(importer, inaStructure))
		{
			restrictedMeasure = dimension.addNewRestrictedMeasure(oFF.isNull(newMemberName) ? newMemberAlias : newMemberName, newMemberText);
		}
	}
	else
	{
		restrictedMeasure.setDimension(dimension);
		restrictedMeasure.setName(newMemberName);
		if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || restrictedMeasure.getOriginalText() === null))
		{
			restrictedMeasure.setText(newMemberText);
		}
	}
	if (oFF.notNull(restrictedMeasure))
	{
		oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties(importer, restrictedMeasure, inaStructure);
		if (restrictedMeasure.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
		{
			let filter = restrictedMeasure.getFilter();
			let inaFilterExpression = inaStructure.getStructureByKey("InAFilterExpression");
			if (oFF.notNull(inaFilterExpression))
			{
				let currentMode = importer.m_mode;
				importer.m_mode = oFF.QModelFormat.INA_DATA;
				importer.importFilterExpression(filter, inaFilterExpression, restrictedMeasure, context);
				importer.m_mode = currentMode;
			}
			else
			{
				let filterElement = null;
				let inaFilterElement = inaStructure.getStructureByKey("Selection");
				if (oFF.notNull(inaFilterElement))
				{
					filterElement = importer.importComponent(null, inaFilterElement, null, filter, context);
					filter.setComplexRoot(filterElement);
				}
			}
			let inaTimeOperationElement = inaStructure.getStructureByKey("TimeOperation");
			if (oFF.notNull(inaTimeOperationElement))
			{
				let dimensionName = inaTimeOperationElement.getStringByKey("Name");
				let timeFunction = oFF.QTimeOperationFunction.lookup(inaTimeOperationElement.getStringByKey("TimeOperationFunction"));
				let granularity = oFF.QTimeOperationGranularity.lookup(inaTimeOperationElement.getStringByKey("TimeOperationGranularity"));
				let period = inaTimeOperationElement.getIntegerByKey("TimeOperationPeriod");
				restrictedMeasure.setTimeOperation(dimensionName, timeFunction, granularity, period);
				restrictedMeasure.getTimeOperation().setForceMemberNavigationGeneration(inaTimeOperationElement.getBooleanByKey("TimeOperationForceMemberNavGeneration"));
				restrictedMeasure.getTimeOperation().setUseToDateFlatRangeSelection(inaTimeOperationElement.getBooleanByKey("TimeOperationUseToDateFlatRangeSelection"));
				restrictedMeasure.getTimeOperation().setHierarchyLevelName(inaTimeOperationElement.getStringByKey("LevelName"));
				let timePeriodOperationLevel = inaTimeOperationElement.getStringByKey("TimePeriodOperationLevel");
				if (oFF.notNull(timePeriodOperationLevel))
				{
					restrictedMeasure.getTimeOperation().setTimePeriodOperationLevel(oFF.QTimePeriodOperationLevel.lookup(timePeriodOperationLevel));
				}
			}
			let flattenDependentRMs = inaStructure.getBooleanByKey("FlattenDependentRestrictedMeasures");
			restrictedMeasure.setFlattenSelection(flattenDependentRMs);
			if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || inaStructure.containsKey("DisableIgnoreExtDimOnFixedFilters"))
			{
				restrictedMeasure.setDisableIgnoreExternalDimensionOnFixedFilters(inaStructure.getBooleanByKeyExt("DisableIgnoreExtDimOnFixedFilters", false));
			}
			let hasDependentCalculation = inaStructure.getBooleanByKey("HasDependentCalculation");
			if (hasDependentCalculation)
			{
				restrictedMeasure.setHasDependentCalculation(hasDependentCalculation);
			}
		}
		if (inaStructure.getBooleanByKey("FilterOnVirtualMeasureCount"))
		{
			restrictedMeasure.setFilterOnVirtualMeasureCount(true);
		}
		let inaVisibilityFilter = inaStructure.getStructureByKey("VisibilityFilter");
		if (oFF.notNull(inaVisibilityFilter) && restrictedMeasure.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
		{
			let selectionVisibilityContainer = restrictedMeasure.getVisibilityFilter();
			importer.importFilterExpression(selectionVisibilityContainer, inaVisibilityFilter, restrictedMeasure, context);
		}
	}
	return restrictedMeasure;
};
oFF.QInARepoMemberRestricted.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let newMember = null;
	if (oFF.isNull(parentComponent) || context.getModelCapabilities().supportsCustomMeasuresInMetadata() === false)
	{
		newMember = oFF.QRestrictedMeasure._createRestrictedMeasure(context, null);
		newMember.setParent(parentComponent);
	}
	return newMember;
};

oFF.QInARepoMemberRunningTotal = function() {};
oFF.QInARepoMemberRunningTotal.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberRunningTotal.prototype._ff_c = "QInARepoMemberRunningTotal";

oFF.QInARepoMemberRunningTotal.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let runningTotalMeasure = modelComponent;
	inaStructure.putString("Name", runningTotalMeasure.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !runningTotalMeasure.isCreatedFromMetadata() && !runningTotalMeasure.isModelDefinedMember())
	{
		inaStructure.putString("Description", runningTotalMeasure.getOriginalText());
	}
	inaStructure.putString("BaseMeasureName", runningTotalMeasure.getBaseMeasureName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || runningTotalMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_RUNNING_TOTAL_OPERATOR))
	{
		inaStructure.putString("Operator", oFF.QInAConverter.lookupRunningTotalOperatorInA(runningTotalMeasure.getOperator()));
	}
	let list;
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || runningTotalMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_ITERATION_DIMENSIONS))
	{
		list = inaStructure.putNewList("IterationDimensions");
		let iterationList = runningTotalMeasure.getIterationDimensions();
		for (let i = 0; i < iterationList.size(); i++)
		{
			let structure = list.addNewStructure();
			let iterationDimension = iterationList.get(i);
			structure.putStringNotNullAndNotEmpty("Name", iterationDimension.getDimensionName());
			structure.putStringNotNullAndNotEmpty("PartitionLevel", iterationDimension.getPartitionLevelName());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || runningTotalMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_AUTO_SIGN_FLIP))
	{
		if (runningTotalMeasure.isAutoSignFlip() || runningTotalMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_AUTO_SIGN_FLIP) && exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			inaStructure.putBoolean("AutoSignFlip", runningTotalMeasure.isAutoSignFlip());
		}
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || runningTotalMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_UNIT_TYPE))
	{
		inaStructure.putStringNotNull("UnitType", oFF.QInAConverter.lookupUnitTypeInA(runningTotalMeasure.getUnitType()));
	}
	inaStructure.putStringNotNull("UnitFixed", runningTotalMeasure.getUnitFixed());
	inaStructure.putStringNotNull("UnitName", runningTotalMeasure.getUnitName());
	inaStructure.putStringNotNull("UnitTextName", runningTotalMeasure.getUnitTextName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || runningTotalMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE))
	{
		inaStructure.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(runningTotalMeasure.getDataType()));
	}
	if (runningTotalMeasure.useGlobalSort())
	{
		inaStructure.putBoolean("UseGlobalSort", true);
	}
	oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties.call( this , exporter, runningTotalMeasure, inaStructure);
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberRunningTotal.prototype.getComponentType = function()
{
	return oFF.MemberType.RUNNING_TOTAL;
};
oFF.QInARepoMemberRunningTotal.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let runningTotalMeasure = modelComponent;
	let dimension = parentComponent;
	let newMemberName = inaStructure.getStringByKey("Name");
	let newMemberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(runningTotalMeasure))
	{
		runningTotalMeasure = dimension.addNewRunningTotalMeasure(newMemberName, newMemberText);
	}
	else
	{
		runningTotalMeasure.setDimension(dimension);
		runningTotalMeasure.setName(newMemberName);
		if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || runningTotalMeasure.getOriginalText() === null))
		{
			runningTotalMeasure.setText(newMemberText);
		}
	}
	runningTotalMeasure.setBaseMeasureName(inaStructure.getStringByKey("BaseMeasureName"));
	oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties(importer, runningTotalMeasure, inaStructure);
	runningTotalMeasure.setBaseMeasureName(inaStructure.getStringByKey("BaseMeasureName"));
	if (inaStructure.containsKey("Operator"))
	{
		runningTotalMeasure.setOperator(oFF.QInAConverter.lookupRunningTotalOperator(inaStructure.getStringByKey("Operator")));
	}
	let list;
	if (inaStructure.containsKey("IterationDimensions"))
	{
		runningTotalMeasure.clearIterationDimensions();
		list = inaStructure.getListByKey("IterationDimensions");
		for (let i = 0; i < list.size(); i++)
		{
			let iterationDimension = runningTotalMeasure.addNewIterationDimension();
			let structure = list.getStructureAt(i);
			iterationDimension.setDimensionName(structure.getStringByKey("Name"));
			iterationDimension.setPartitionLevelName(structure.getStringByKey("PartitionLevel"));
		}
	}
	if (inaStructure.containsKey("UseGlobalSort"))
	{
		runningTotalMeasure.setUseGlobalSort(inaStructure.getBooleanByKey("UseGlobalSort"));
	}
	runningTotalMeasure.setAutoSignFlip(inaStructure.getBooleanByKey("AutoSignFlip"));
	return runningTotalMeasure;
};
oFF.QInARepoMemberRunningTotal.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let newMember = oFF.QRunningTotalMeasure._createRunningTotalMeasure(context, null);
	newMember.setParent(parentComponent);
	return newMember;
};

oFF.QInARepoMemberUnit = function() {};
oFF.QInARepoMemberUnit.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberUnit.prototype._ff_c = "QInARepoMemberUnit";

oFF.QInARepoMemberUnit.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let unitMeasure = modelComponent;
	inaStructure.putString("Name", unitMeasure.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !unitMeasure.isCreatedFromMetadata() && !unitMeasure.isModelDefinedMember())
	{
		inaStructure.putString("Description", unitMeasure.getOriginalText());
	}
	inaStructure.putStringNotNullAndNotEmpty("BaseMeasureName", unitMeasure.getBaseMeasureName());
	inaStructure.putStringNotNullAndNotEmpty("UnitTranslationName", unitMeasure.getUnitTranslationName());
	let specificTranslation = unitMeasure.getLocalUnitTranslation();
	let inaUnitTranslation = inaStructure.putNewStructure("UnitTranslation");
	exporter.exportUnitTranslationElement(specificTranslation, inaUnitTranslation);
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || unitMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_UNIT_TYPE))
	{
		inaStructure.putStringNotNull("UnitType", oFF.QInAConverter.lookupUnitTypeInA(unitMeasure.getUnitType()));
	}
	inaStructure.putStringNotNull("UnitFixed", unitMeasure.getUnitFixed());
	inaStructure.putStringNotNull("UnitName", unitMeasure.getUnitName());
	inaStructure.putStringNotNull("UnitTextName", unitMeasure.getUnitTextName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || unitMeasure.hasPropertyChanged(oFF.QStructureMemberProperties.QY_DATA_TYPE))
	{
		inaStructure.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(unitMeasure.getDataType()));
	}
	oFF.QInARepoMemberAbstract.prototype.exportGenericMemberProperties.call( this , exporter, unitMeasure, inaStructure);
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberUnit.prototype.getComponentType = function()
{
	return oFF.MemberType.UNIT_MEASURE;
};
oFF.QInARepoMemberUnit.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let unitMeasure = modelComponent;
	let dimension = parentComponent;
	let newMemberName = inaStructure.getStringByKey("Name");
	let newMemberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(unitMeasure))
	{
		unitMeasure = dimension.addNewUnitMeasure(newMemberName, newMemberText);
	}
	else
	{
		unitMeasure.setDimension(dimension);
		unitMeasure.setName(newMemberName);
		if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || unitMeasure.getText() === null))
		{
			unitMeasure.setText(newMemberText);
		}
	}
	oFF.QInARepoMemberAbstract.importGenericMemberAbstractProperties(importer, unitMeasure, inaStructure);
	unitMeasure.setBaseMeasureName(inaStructure.getStringByKey("BaseMeasureName"));
	if (inaStructure.containsKey("UnitTranslationName"))
	{
		unitMeasure.setUnitTranslationName(inaStructure.getStringByKey("UnitTranslationName"));
	}
	let unitTranslation = unitMeasure.getLocalUnitTranslation();
	let localUnitTranslation = inaStructure.getStructureByKey("UnitTranslation");
	importer.importUnitTranslationElement(localUnitTranslation, unitTranslation, context);
	return unitMeasure;
};
oFF.QInARepoMemberUnit.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let newMember = oFF.QUnitMeasure._createUnitMeasure(context, null);
	newMember.setParent(parentComponent);
	return newMember;
};

oFF.QInARepoMemberVarianceMeasure = function() {};
oFF.QInARepoMemberVarianceMeasure.prototype = new oFF.QInARepoMemberAbstract();
oFF.QInARepoMemberVarianceMeasure.prototype._ff_c = "QInARepoMemberVarianceMeasure";

oFF.QInARepoMemberVarianceMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let varianceMeasure = modelComponent;
	inaStructure.putString("Name", varianceMeasure.getName());
	if (exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || !varianceMeasure.isCreatedFromMetadata() && !varianceMeasure.isModelDefinedMember())
	{
		inaStructure.putString("Description", varianceMeasure.getOriginalText());
	}
	this.exportVarianceMember(inaStructure, varianceMeasure);
	this.exportGenericMemberProperties(exporter, varianceMeasure, inaStructure);
	this.exportFilter(exporter, inaStructure, flags, varianceMeasure.getBaseFilter(), "SelectionBase");
	this.exportFilter(exporter, inaStructure, flags, varianceMeasure.getReferenceFilter(), "SelectionReference");
	let flattenBaseFilter = varianceMeasure.isFlattenBaseFilter();
	if (flattenBaseFilter)
	{
		inaStructure.putBoolean("FlattenBaseFilter", flattenBaseFilter);
	}
	let flattenReferenceFilter = varianceMeasure.isFlattenReferenceFilter();
	if (flattenReferenceFilter)
	{
		inaStructure.putBoolean("FlattenReferenceFilter", flattenReferenceFilter);
	}
	return oFF.QInARepoMemberAbstract.prototype.exportComponentWithStructure.call( this , exporter, modelComponent, inaStructure, flags);
};
oFF.QInARepoMemberVarianceMeasure.prototype.exportFilter = function(exporter, inaStructure, flags, filter, key)
{
	let baseFilterRoot = filter.getFilterRootElement();
	if (oFF.notNull(baseFilterRoot))
	{
		let inaBaseFilterRootElement = exporter.exportComponent(null, baseFilterRoot, null, flags);
		let inaBaseSelection = oFF.PrFactory.createStructure();
		inaBaseSelection.put("Selection", inaBaseFilterRootElement);
		inaStructure.put(key, inaBaseSelection);
	}
};
oFF.QInARepoMemberVarianceMeasure.prototype.exportVarianceMember = function(inaStructure, varianceMeasure)
{
	inaStructure.putString("BaseMeasureName", varianceMeasure.getBaseMeasure());
	inaStructure.putString("ReferenceMeasureName", varianceMeasure.getReferenceMeasure());
	oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "CalculationType", varianceMeasure.getCalculationType());
	oFF.QInARepoUtils.setNameIfNotNull(inaStructure, "NullHandling", varianceMeasure.getNullHandlingType());
	let baseIgnoredExternalDimensions = varianceMeasure.getBaseIgnoredExternalDimensions();
	if (baseIgnoredExternalDimensions.hasElements())
	{
		let baseInAIgnoredExternalDimensions = inaStructure.putNewList("BaseIgnoreExternalDimensions");
		baseInAIgnoredExternalDimensions.addAllStrings(baseIgnoredExternalDimensions);
	}
	let referenceIgnoredExternalDimensions = varianceMeasure.getReferenceIgnoredExternalDimensions();
	if (referenceIgnoredExternalDimensions.hasElements())
	{
		let referenceInAIgnoreExternalDimensions = inaStructure.putNewList("ReferenceIgnoreExternalDimensions");
		referenceInAIgnoreExternalDimensions.addAllStrings(referenceIgnoredExternalDimensions);
	}
	let baseTimeOperation = varianceMeasure.getBaseTimeOperation();
	if (oFF.notNull(baseTimeOperation))
	{
		let inaBaseTimeOperationStructure = oFF.PrFactory.createStructure();
		oFF.QInARepoUtils.exportTimeOperation(inaBaseTimeOperationStructure, baseTimeOperation);
		inaStructure.put("BaseTimeOperation", inaBaseTimeOperationStructure);
	}
	let referenceTimeOperation = varianceMeasure.getReferenceTimeOperation();
	if (oFF.notNull(referenceTimeOperation))
	{
		let inaReferenceTimeOperationStructure = oFF.PrFactory.createStructure();
		oFF.QInARepoUtils.exportTimeOperation(inaReferenceTimeOperationStructure, referenceTimeOperation);
		inaStructure.put("ReferenceTimeOperation", inaReferenceTimeOperationStructure);
	}
};
oFF.QInARepoMemberVarianceMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.VARIANCE;
};
oFF.QInARepoMemberVarianceMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let varianceMeasure = modelComponent;
	let dimension = parentComponent;
	let newMemberName = inaStructure.getStringByKey("Name");
	let newMemberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(varianceMeasure))
	{
		varianceMeasure = dimension.addNewVarianceMeasure(newMemberName, newMemberText);
	}
	else
	{
		varianceMeasure.setDimension(dimension);
		varianceMeasure.setName(newMemberName);
		if (oFF.notNull(newMemberText) && (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DELTA || varianceMeasure.getOriginalText() === null))
		{
			varianceMeasure.setText(newMemberText);
		}
	}
	let flattenBaseFilter = inaStructure.getBooleanByKey("FlattenBaseFilter");
	varianceMeasure.setFlattenBaseFilter(flattenBaseFilter);
	let flattenReferenceFilter = inaStructure.getBooleanByKey("FlattenReferenceFilter");
	varianceMeasure.setFlattenReferenceFilter(flattenReferenceFilter);
	this.importVarianceMember(inaStructure, varianceMeasure);
	this.importFilter(importer, inaStructure, context, varianceMeasure.getBaseFilter(), "SelectionBase");
	this.importFilter(importer, inaStructure, context, varianceMeasure.getReferenceFilter(), "SelectionReference");
	let refFilter = varianceMeasure.getReferenceFilter();
	let refFilterElement = null;
	let inaSelectionRef = inaStructure.getStructureByKey("SelectionReference");
	if (oFF.notNull(inaSelectionRef))
	{
		let inaSelectionRefElement = inaSelectionRef.getStructureByKey("Selection");
		refFilterElement = importer.importComponent(null, inaSelectionRefElement, null, refFilter, context);
	}
	refFilter.setComplexRoot(refFilterElement);
	return varianceMeasure;
};
oFF.QInARepoMemberVarianceMeasure.prototype.importFilter = function(importer, inaStructure, context, filter, key)
{
	let baseFilterElement = null;
	let inaSelectionBase = inaStructure.getStructureByKey(key);
	if (oFF.notNull(inaSelectionBase))
	{
		let inaSelectionBaseElement = inaSelectionBase.getStructureByKey("Selection");
		baseFilterElement = importer.importComponent(null, inaSelectionBaseElement, null, filter, context);
	}
	filter.setComplexRoot(baseFilterElement);
};
oFF.QInARepoMemberVarianceMeasure.prototype.importVarianceMember = function(inaStructure, member)
{
	member.setNullHandlingType(oFF.VarianceNullHandlingType.lookup(inaStructure.getStringByKey("NullHandling")));
	member.setCalculationType(oFF.VarianceCalculationType.lookup(inaStructure.getStringByKey("CalculationType")));
	member.setBaseMeasure(inaStructure.getStringByKey("BaseMeasureName"));
	member.setReferenceMeasure(inaStructure.getStringByKey("ReferenceMeasureName"));
	if (inaStructure.containsKey("BaseIgnoreExternalDimensions"))
	{
		let baseInAIgnoredExternalDimensions = inaStructure.getListByKey("BaseIgnoreExternalDimensions");
		for (let idxIgnore1 = 0; idxIgnore1 < baseInAIgnoredExternalDimensions.size(); idxIgnore1++)
		{
			member.addBaseExternalDimensionToIgnore(baseInAIgnoredExternalDimensions.getStringAt(idxIgnore1));
		}
	}
	if (inaStructure.containsKey("ReferenceIgnoreExternalDimensions"))
	{
		let referenceInAIgnoreExternalDimensions = inaStructure.getListByKey("ReferenceIgnoreExternalDimensions");
		for (let idxIgnore2 = 0; idxIgnore2 < referenceInAIgnoreExternalDimensions.size(); idxIgnore2++)
		{
			member.addReferenceExternalDimensionToIgnore(referenceInAIgnoreExternalDimensions.getStringAt(idxIgnore2));
		}
	}
	let inaBaseTimeOperationElement = inaStructure.getStructureByKey("BaseTimeOperation");
	if (oFF.notNull(inaBaseTimeOperationElement))
	{
		let baseDimensionName = inaBaseTimeOperationElement.getStringByKey("Name");
		let baseTimeFunction = oFF.QTimeOperationFunction.lookup(inaBaseTimeOperationElement.getStringByKey("TimeOperationFunction"));
		let baseGranularity = oFF.QTimeOperationGranularity.lookup(inaBaseTimeOperationElement.getStringByKey("TimeOperationGranularity"));
		let basePeriod = inaBaseTimeOperationElement.getIntegerByKey("TimeOperationPeriod");
		member.setBaseTimeOperation(baseDimensionName, baseTimeFunction, baseGranularity, basePeriod);
		member.getBaseTimeOperation().setForceMemberNavigationGeneration(inaBaseTimeOperationElement.getBooleanByKey("TimeOperationForceMemberNavGeneration"));
		member.getBaseTimeOperation().setUseToDateFlatRangeSelection(inaBaseTimeOperationElement.getBooleanByKey("TimeOperationUseToDateFlatRangeSelection"));
		member.getBaseTimeOperation().setHierarchyLevelName(inaBaseTimeOperationElement.getStringByKey("LevelName"));
		let baseTimePeriodOperationLevel = inaBaseTimeOperationElement.getStringByKey("TimePeriodOperationLevel");
		if (oFF.notNull(baseTimePeriodOperationLevel))
		{
			member.getBaseTimeOperation().setTimePeriodOperationLevel(oFF.QTimePeriodOperationLevel.lookup(baseTimePeriodOperationLevel));
		}
	}
	let inaReferenceTimeOperationElement = inaStructure.getStructureByKey("ReferenceTimeOperation");
	if (oFF.notNull(inaReferenceTimeOperationElement))
	{
		let referenceDimensionName = inaReferenceTimeOperationElement.getStringByKey("Name");
		let referenceTimeFunction = oFF.QTimeOperationFunction.lookup(inaReferenceTimeOperationElement.getStringByKey("TimeOperationFunction"));
		let referenceGranularity = oFF.QTimeOperationGranularity.lookup(inaReferenceTimeOperationElement.getStringByKey("TimeOperationGranularity"));
		let referencePeriod = inaReferenceTimeOperationElement.getIntegerByKey("TimeOperationPeriod");
		member.setReferenceTimeOperation(referenceDimensionName, referenceTimeFunction, referenceGranularity, referencePeriod);
		member.getReferenceTimeOperation().setForceMemberNavigationGeneration(inaReferenceTimeOperationElement.getBooleanByKey("TimeOperationForceMemberNavGeneration"));
		member.getReferenceTimeOperation().setUseToDateFlatRangeSelection(inaReferenceTimeOperationElement.getBooleanByKey("TimeOperationUseToDateFlatRangeSelection"));
		member.getReferenceTimeOperation().setHierarchyLevelName(inaReferenceTimeOperationElement.getStringByKey("LevelName"));
		let refTimePeriodOperationLevel = inaReferenceTimeOperationElement.getStringByKey("TimePeriodOperationLevel");
		if (oFF.notNull(refTimePeriodOperationLevel))
		{
			member.getReferenceTimeOperation().setTimePeriodOperationLevel(oFF.QTimePeriodOperationLevel.lookup(refTimePeriodOperationLevel));
		}
	}
};
oFF.QInARepoMemberVarianceMeasure.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let newMember = oFF.QVarianceMeasure._createVarianceMeasure(context, parentComponent);
	newMember.setParent(parentComponent);
	return newMember;
};

oFF.QInARepoVarHierNode = function() {};
oFF.QInARepoVarHierNode.prototype = new oFF.QInARepoVarDimMember();
oFF.QInARepoVarHierNode.prototype._ff_c = "QInARepoVarHierNode";

oFF.QInARepoVarHierNode.prototype.getComponentType = function()
{
	return oFF.VariableType.HIERARCHY_NODE_VARIABLE;
};

oFF.QInAExport = function() {};
oFF.QInAExport.prototype = new oFF.QInA();
oFF.QInAExport.prototype._ff_c = "QInAExport";


oFF.QInAImport = function() {};
oFF.QInAImport.prototype = new oFF.QInA();
oFF.QInAImport.prototype._ff_c = "QInAImport";

oFF.QInAImport.prototype.m_cacheKey = null;

oFF.InARepoMapperContextType = function() {};
oFF.InARepoMapperContextType.prototype = new oFF.XConstantWithParent();
oFF.InARepoMapperContextType.prototype._ff_c = "InARepoMapperContextType";

oFF.InARepoMapperContextType.AXES_SETTINGS = null;
oFF.InARepoMapperContextType.CONDITION = null;
oFF.InARepoMapperContextType.DIMENSION = null;
oFF.InARepoMapperContextType.DIMENSION_HIERARCHY = null;
oFF.InARepoMapperContextType.FILTER = null;
oFF.InARepoMapperContextType.FILTER_CARTESIAN_LIST = null;
oFF.InARepoMapperContextType.FILTER_OPERATION = null;
oFF.InARepoMapperContextType.RESULT_STRUCTURE = null;
oFF.InARepoMapperContextType.UNDEFINED = null;
oFF.InARepoMapperContextType.VARIANCE_MEMBER = null;
oFF.InARepoMapperContextType.s_allTypes = null;
oFF.InARepoMapperContextType.createContext = function(name, typeParam, valueParam, parent)
{
	let contextType = oFF.XConstant.setupName(new oFF.InARepoMapperContextType(), name);
	contextType.setParent(parent);
	contextType.m_typeParam = typeParam;
	contextType.m_valueParam = valueParam;
	if (oFF.notNull(typeParam))
	{
		oFF.InARepoMapperContextType.s_allTypes.add(contextType);
	}
	return contextType;
};
oFF.InARepoMapperContextType.getByType = function(ctype)
{
	return oFF.XStringUtils.isNullOrEmpty(ctype) ? null : oFF.XCollectionUtils.findFirst(oFF.InARepoMapperContextType.s_allTypes, (type) => {
		return oFF.XString.isEqual(type.m_typeParam, ctype);
	});
};
oFF.InARepoMapperContextType.staticSetup = function()
{
	oFF.InARepoMapperContextType.s_allTypes = oFF.XList.create();
	oFF.InARepoMapperContextType.UNDEFINED = oFF.InARepoMapperContextType.createContext("undefined", null, null, null);
	oFF.InARepoMapperContextType.DIMENSION = oFF.InARepoMapperContextType.createContext("dimension", "Dimension", "Name", null);
	oFF.InARepoMapperContextType.DIMENSION_HIERARCHY = oFF.InARepoMapperContextType.createContext("dimensionHierarchy", "Hierarchy", null, oFF.InARepoMapperContextType.DIMENSION);
	oFF.InARepoMapperContextType.VARIANCE_MEMBER = oFF.InARepoMapperContextType.createContext("varianceMember", "Variance", null, oFF.InARepoMapperContextType.DIMENSION);
	oFF.InARepoMapperContextType.FILTER = oFF.InARepoMapperContextType.createContext("filter", "FilterExpression", null, null);
	oFF.InARepoMapperContextType.FILTER_CARTESIAN_LIST = oFF.InARepoMapperContextType.createContext("filter", "FilterCartesianList", "FieldName", oFF.InARepoMapperContextType.FILTER);
	oFF.InARepoMapperContextType.FILTER_OPERATION = oFF.InARepoMapperContextType.createContext("filter", "FilterOperation", "FieldName", oFF.InARepoMapperContextType.FILTER);
	oFF.InARepoMapperContextType.AXES_SETTINGS = oFF.InARepoMapperContextType.createContext("axesSettings", "AxesSettings", null, null);
	oFF.InARepoMapperContextType.RESULT_STRUCTURE = oFF.InARepoMapperContextType.createContext("resultStructure", "Totals", null, null);
	oFF.InARepoMapperContextType.CONDITION = oFF.InARepoMapperContextType.createContext("condition", "Condition", null, null);
};
oFF.InARepoMapperContextType.prototype.m_typeParam = null;
oFF.InARepoMapperContextType.prototype.m_valueParam = null;
oFF.InARepoMapperContextType.prototype.getValueParam = function()
{
	return this.m_valueParam;
};

oFF.OlapSerializationModule = function() {};
oFF.OlapSerializationModule.prototype = new oFF.DfModule();
oFF.OlapSerializationModule.prototype._ff_c = "OlapSerializationModule";

oFF.OlapSerializationModule.s_module = null;
oFF.OlapSerializationModule.getInstance = function()
{
	if (oFF.isNull(oFF.OlapSerializationModule.s_module))
	{
		oFF.DfModule.checkInitialized(oFF.OlapImplModule.getInstance());
		oFF.OlapSerializationModule.s_module = oFF.DfModule.startExt(new oFF.OlapSerializationModule());
		oFF.QFactory.setModelMapperInstance(() => {
			return oFF.InARepoMapper.create();
		});
		oFF.InARepoMapperContextType.staticSetup();
		oFF.DfModule.stopExt(oFF.OlapSerializationModule.s_module);
	}
	return oFF.OlapSerializationModule.s_module;
};
oFF.OlapSerializationModule.prototype.getName = function()
{
	return "ff4394.olap.serialization";
};

oFF.OlapSerializationModule.getInstance();

return oFF;
} );