/*!
 * SAPUI5
    (c) Copyright 2009-2021 SAP SE. All rights reserved
  
 */
/*global sap*/
sap.ui.define(
[
"sap/sac/df/firefly/ff4394.olap.serialization"
],
function(oFF)
{
"use strict";

oFF.XCommandUtil = {

	activate:function(serviceConfig, capability)
	{
			if (oFF.isNull(capability))
		{
			return;
		}
		let maxXVersion = capability.getMaxXVersion();
		if (maxXVersion >= 0 && maxXVersion <= serviceConfig.getApplication().getXVersion())
		{
			return;
		}
		serviceConfig.getSession().activateFeatureToggle(capability);
	},
	activateExperimentalFeatures:function(serviceConfig, experimentalFeatures)
	{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(experimentalFeatures))
		{
			if (oFF.XString.containsString(experimentalFeatures, ","))
			{
				let listOfExperimentalFeatures = oFF.XStringTokenizer.splitString(experimentalFeatures, ",");
				let size = listOfExperimentalFeatures.size();
				for (let i = 0; i < size; i++)
				{
					oFF.XCommandUtil.activate(serviceConfig, oFF.FeatureToggle.lookup(listOfExperimentalFeatures.get(i)));
				}
			}
			else
			{
				oFF.XCommandUtil.activate(serviceConfig, oFF.FeatureToggle.lookup(experimentalFeatures));
			}
		}
	},
	getExtDimInfoByName:function(extDimName, extendedDimensionInfo)
	{
			let size = extendedDimensionInfo.size();
		for (let i = 0; i < size; i++)
		{
			let extendedDimension = extendedDimensionInfo.getStructureAt(i);
			if (oFF.XString.isEqual(extDimName, extendedDimension.getStringByKey("name")))
			{
				return extendedDimension;
			}
		}
		return null;
	},
	handleInactiveCapabilities:function(serviceConfig, experimentalFeatures, capabilitiesToSwitch)
	{
			oFF.XCommandUtil.activateExperimentalFeatures(serviceConfig, experimentalFeatures);
		if (oFF.notNull(capabilitiesToSwitch))
		{
			let iterator = capabilitiesToSwitch.getKeysAsIterator();
			while (iterator.hasNext())
			{
				let capabilityName = iterator.next();
				let isActive = capabilitiesToSwitch.getByKey(capabilityName).getBoolean();
				let inactiveCapabilities = oFF.FeatureToggle.lookup(capabilityName);
				if (isActive)
				{
					oFF.XCommandUtil.activate(serviceConfig, inactiveCapabilities);
				}
				else
				{
					let experimentalFeatureSet = serviceConfig.getSession().getFeatureToggles();
					if (oFF.notNull(experimentalFeatureSet))
					{
						let experimentalFeatureSet2 = experimentalFeatureSet;
						experimentalFeatureSet2.removeElement(inactiveCapabilities);
					}
				}
			}
		}
	},
	updateExtendedDimensionProperties:function(extendedDimensions, extendedDimensionsInfo)
	{
			if (!oFF.XCollectionUtils.hasElements(extendedDimensions) || !oFF.XCollectionUtils.hasElements(extendedDimensionsInfo))
		{
			return;
		}
		let extDimSize = extendedDimensions.size();
		for (let i = 0; i < extDimSize; i++)
		{
			let extendedDimension = extendedDimensions.get(i);
			let extendedDimensionInfo = oFF.XCommandUtil.getExtDimInfoByName(extendedDimension.getName(), extendedDimensionsInfo);
			if (oFF.notNull(extendedDimensionInfo))
			{
				let newDataSource = extendedDimensionInfo.getStructureByKey("dataSource");
				if (oFF.notNull(newDataSource))
				{
					let dataSource = extendedDimensions.get(i).getDataSource();
					let newPackageName = newDataSource.getStringByKey("packageName");
					if (oFF.notNull(newPackageName))
					{
						dataSource.setPackageName(newPackageName);
					}
					let newObjectName = newDataSource.getStringByKey("objectName");
					if (oFF.notNull(newObjectName))
					{
						dataSource.setObjectName(newObjectName);
					}
					let newSchemaName = newDataSource.getStringByKey("schemaName");
					if (oFF.notNull(newSchemaName))
					{
						dataSource.setSchemaName(newSchemaName);
					}
					let newType = newDataSource.getStringByKey("type");
					if (oFF.notNull(newType))
					{
						dataSource.setType(oFF.MetaObjectType.lookup(newType));
					}
				}
			}
		}
	}
};

oFF.QCsnConverter = {

	s_lookupValueType:null,
	s_lookupValueTypeCsn:null,
	lookupAxis:function(axisType)
	{
			let axisTypeUpperCase = oFF.XString.toUpperCase(axisType);
		if (oFF.XString.isEqual(axisTypeUpperCase, oFF.CsnConstants.AXIS_ROWS))
		{
			return oFF.AxisType.ROWS;
		}
		if (oFF.XString.isEqual(axisTypeUpperCase, oFF.CsnConstants.AXIS_COLUMNS))
		{
			return oFF.AxisType.COLUMNS;
		}
		return oFF.AxisType.FREE;
	},
	lookupAxisCsn:function(axisType)
	{
			if (axisType === oFF.AxisType.ROWS)
		{
			return oFF.CsnConstants.AXIS_ROWS;
		}
		if (axisType === oFF.AxisType.COLUMNS)
		{
			return oFF.CsnConstants.AXIS_COLUMNS;
		}
		return oFF.CsnConstants.AXIS_FREE;
	},
	lookupValueType:function(csnValueType, defaultValueType)
	{
			let valueType = oFF.QCsnConverter.s_lookupValueType.getByKey(csnValueType);
		return oFF.notNull(valueType) ? valueType : defaultValueType;
	},
	lookupValueTypeCsn:function(ffValueType, defaultValueType)
	{
			let valueType = oFF.QCsnConverter.s_lookupValueTypeCsn.getByKey(ffValueType.getName());
		return oFF.notNull(valueType) ? valueType : defaultValueType;
	},
	mapConstant:function(mapToEnum, mapToCSN, ffConstant, csnConstant)
	{
			mapToEnum.put(csnConstant, ffConstant);
		mapToCSN.put(ffConstant.getName(), csnConstant);
	},
	setupDimensionType:function()
	{
			oFF.QCsnConverter.s_lookupValueType = oFF.XHashMapByString.create();
		oFF.QCsnConverter.s_lookupValueTypeCsn = oFF.XHashMapByString.create();
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.LOWER_CASE_STRING, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.UPPER_CASE_STRING, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.STRING, oFF.CsnConstants.TYPE_LARGE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.STRING, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.CHAR, oFF.CsnConstants.TYPE_STRING);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.INTEGER, oFF.CsnConstants.TYPE_DECIMAL);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.INTEGER, oFF.CsnConstants.TYPE_INTEGER);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.LONG, oFF.CsnConstants.TYPE_INTEGER64);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.BOOLEAN, oFF.CsnConstants.TYPE_BOOLEAN);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DECIMAL_FLOAT, oFF.CsnConstants.TYPE_DECIMAL_FLOAT);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DOUBLE, oFF.CsnConstants.TYPE_DOUBLE);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE, oFF.CsnConstants.TYPE_LOCAL_DATE);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE, oFF.CsnConstants.TYPE_DATE);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIME, oFF.CsnConstants.TYPE_LOCAL_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIME, oFF.CsnConstants.TYPE_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE_TIME, oFF.CsnConstants.TYPE_LOCAL_DATE_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.DATE_TIME, oFF.CsnConstants.TYPE_DATE_TIME);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIMESPAN, oFF.CsnConstants.TYPE_UTC_TIMESTAMP);
		oFF.QCsnConverter.mapConstant(oFF.QCsnConverter.s_lookupValueType, oFF.QCsnConverter.s_lookupValueTypeCsn, oFF.XValueType.TIMESPAN, oFF.CsnConstants.TYPE_TIMESTAMP);
	},
	staticSetup:function()
	{
			oFF.QCsnConverter.setupDimensionType();
	}
};

oFF.QInADataSourceBlending = {

	exportAttributeMapping:function(attributeMapping)
	{
			let inaAttributeMapping = oFF.PrFactory.createStructure();
		inaAttributeMapping.putString("AttributeName", attributeMapping.getAttributeName());
		inaAttributeMapping.putBoolean("IsLinkKey", attributeMapping.isLinkKey());
		let mappingIterator = attributeMapping.getAttributeMappingDefinitions().getIterator();
		let inaMappings = oFF.QInADataSourceBlending.exportMappingDefinitions(mappingIterator);
		oFF.XObjectExt.release(mappingIterator);
		inaAttributeMapping.put("Mapping", inaMappings);
		oFF.QInADataSourceBlending.exportConstantMapping(inaMappings, attributeMapping.getConstantMappings().getIterator());
		return inaAttributeMapping;
	},
	exportBlendingMappings:function(mappings)
	{
			let inaMappings = oFF.PrFactory.createList();
		let mappingIterator = mappings.getIterator();
		while (mappingIterator.hasNext())
		{
			let mapping = mappingIterator.next();
			let inaMapping = oFF.QInADataSourceBlending.exportDimensionMapping(mapping);
			inaMappings.add(inaMapping);
		}
		return inaMappings;
	},
	exportBlendingSources:function(format, blendingDefinition, isBlendingDataRequest)
	{
			let blendingHost = blendingDefinition.getBlendingHost();
		let blendingHostSource = blendingHost.getSource();
		let blendingSourceFormat = format;
		if (format.isTypeOf(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA) && isBlendingDataRequest)
		{
			blendingSourceFormat = oFF.QModelFormat.INA_PERSISTED_QUERY_DATA_BLENDING;
		}
		else if (format.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			blendingSourceFormat = isBlendingDataRequest && format !== oFF.QModelFormat.INA_DATA_BLENDING_SOURCE_METADATA ? oFF.QModelFormat.INA_DATA_BLENDING_SOURCE : oFF.QModelFormat.INA_DATA_BLENDING_SOURCE_METADATA;
		}
		let inaSources = oFF.PrFactory.createList();
		let sourceIterator = blendingDefinition.getSources().getIterator();
		while (sourceIterator.hasNext())
		{
			let source = sourceIterator.next();
			let queryModel = source.getQueryModel();
			if (oFF.isNull(queryModel))
			{
				return null;
			}
			let inaSource = inaSources.addNewStructure();
			inaSource.putString("Type", "Query");
			inaSource.putString("AliasName", source.getQueryAliasName());
			inaSource.putString("ObjectName", source.getQueryAliasName());
			let inaDefiningContext = inaSource.putNewStructure("DefiningContext");
			let inaQuery = queryModel.serializeToElement(blendingSourceFormat).asStructure();
			oFF.QInADataSourceBlending.exportOptimizerHints(inaQuery, queryModel.getOptimizerHintsByExecutionEngine(oFF.ExecutionEngine.MDS));
			let queryManager = queryModel.getQueryManager();
			let persistenceIdentifier = queryManager.getResultSetPersistenceIdentifier();
			if (source !== blendingHostSource && source.isRemoteSource() && !blendingSourceFormat.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
			{
				oFF.QInADataSourceBlending.updateRemoteDataSource(inaQuery, queryManager, isBlendingDataRequest, blendingHost.getSystemDescription());
			}
			else if (!source.isRemoteSource() && oFF.XStringUtils.isNotNullAndNotEmpty(persistenceIdentifier) && isBlendingDataRequest)
			{
				inaQuery.getStructureByKey("DataSource").putString("InstanceId", persistenceIdentifier);
			}
			let inaResultSetFeatures = oFF.QInADataSourceBlending.exportResultSetFeatures(queryModel, true);
			inaQuery.put("ResultSetFeatureRequest", inaResultSetFeatures);
			inaDefiningContext.put("Definition", inaQuery);
		}
		oFF.XObjectExt.release(sourceIterator);
		return inaSources;
	},
	exportConstantMapping:function(inaDefinitions, definitionIterator)
	{
			while (definitionIterator.hasNext())
		{
			let constantMapping = definitionIterator.next();
			let inaConstantMapping = oFF.PrFactory.createStructure();
			inaConstantMapping.putString("AliasName", constantMapping.getQueryAliasName());
			let inaMappingDefinition = inaConstantMapping.putNewStructure("MappingDefinition");
			let inaMember = inaMappingDefinition.putNewStructure("Constant");
			inaMember.putString("Value", constantMapping.getMemberName());
			inaMember.putString("ValueType", oFF.QInAConverter.lookupValueTypeInA(constantMapping.getValueType()));
			inaDefinitions.add(inaConstantMapping);
		}
	},
	exportDataSourceBlending:function(format, blendingDefinition, isBlendingDataRequest)
	{
			let inaRequest = oFF.PrFactory.createStructure();
		let inaMetadata = inaRequest.putNewStructure("Metadata");
		let inaDataSource = inaMetadata.putNewStructure("DataSource");
		inaDataSource.putString("Type", oFF.QueryManagerMode.BLENDING.getName());
		let objectName = oFF.XStringBuffer.create();
		for (let idx = 0; idx < blendingDefinition.getSources().size(); idx++)
		{
			objectName.append(blendingDefinition.getSources().get(idx).getQueryAliasName());
		}
		let objectNameStr = objectName.toString();
		if (objectName.length() >= 256)
		{
			objectNameStr = oFF.XSha1.createSHA1(objectNameStr);
		}
		inaDataSource.putString("ObjectName", objectNameStr);
		let inaBlendingSources = oFF.QInADataSourceBlending.exportBlendingSources(format, blendingDefinition, isBlendingDataRequest);
		inaDataSource.put("Sources", inaBlendingSources);
		let inaBlendingMappings = oFF.QInADataSourceBlending.exportBlendingMappings(blendingDefinition.getMappings());
		inaDataSource.put("Mappings", inaBlendingMappings);
		return inaDataSource;
	},
	exportDimensionMapping:function(dimensionMapping)
	{
			let inaMapping = oFF.PrFactory.createStructure();
		inaMapping.putString("DimensionName", dimensionMapping.getMemberName());
		inaMapping.putString("LinkType", dimensionMapping.getLinkType().getName());
		if (dimensionMapping.isPreservingMembers())
		{
			inaMapping.putBoolean("PreserveMembers", true);
		}
		if (!dimensionMapping.isReturningOriginKeys())
		{
			inaMapping.putBoolean("ReturnOriginKeys", false);
		}
		let definitionIterator = dimensionMapping.getMappingDefinitions().getIterator();
		let inaDefinitions = oFF.QInADataSourceBlending.exportMappingDefinitions(definitionIterator);
		oFF.XObjectExt.release(definitionIterator);
		inaMapping.put("Mapping", inaDefinitions);
		if ((dimensionMapping.getLinkType() === oFF.BlendingLinkType.ALL_DATA || dimensionMapping.getLinkType() === oFF.BlendingLinkType.NONE) && dimensionMapping.getConstantMappings().hasElements())
		{
			oFF.QInADataSourceBlending.exportConstantMapping(inaDefinitions, dimensionMapping.getConstantMappings().getIterator());
		}
		let inaAttributeMappings = oFF.PrFactory.createList();
		let attributeMappingIterator = dimensionMapping.getAttributeMappings().getIterator();
		while (attributeMappingIterator.hasNext())
		{
			let attributeMapping = attributeMappingIterator.next();
			let inaAttributeMapping = oFF.QInADataSourceBlending.exportAttributeMapping(attributeMapping);
			inaAttributeMappings.add(inaAttributeMapping);
		}
		oFF.XObjectExt.release(attributeMappingIterator);
		if (!inaAttributeMappings.isEmpty())
		{
			inaMapping.put("AttributeMappings", inaAttributeMappings);
		}
		return inaMapping;
	},
	exportMappingDefinitions:function(definitionIterator)
	{
			let inaDefinitions = oFF.PrFactory.createList();
		while (definitionIterator.hasNext())
		{
			let definition = definitionIterator.next();
			let inaDefinition = inaDefinitions.addNewStructure();
			inaDefinition.putString("AliasName", definition.getQueryAliasName());
			let inaMappingDefinition = inaDefinition.putNewStructure("MappingDefinition");
			let inaMember = inaMappingDefinition.putNewStructure("Member");
			inaMember.putString("Name", definition.getMemberName());
		}
		return inaDefinitions;
	},
	exportOptimizerHints:function(inaDefinition, optimizerHints)
	{
			if (oFF.XCollectionUtils.hasElements(optimizerHints))
		{
			let sortedList = oFF.XList.createWithList(optimizerHints.getKeysAsReadOnlyList());
			sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
			let inaOptimizerHints = inaDefinition.putNewStructure("Hints");
			let inaAEngineHints = inaOptimizerHints.putNewList(oFF.ExecutionEngine.MDS.getName());
			let sortedListSize = sortedList.size();
			for (let i = 0; i < sortedListSize; i++)
			{
				let hintName = sortedList.get(i);
				let inaHint = inaAEngineHints.addNewStructure();
				inaHint.putString("Key", hintName);
				inaHint.putString("Value", optimizerHints.getByKey(hintName));
			}
		}
	},
	exportResultSetFeatures:function(sourceQueryModel, isSubQuery)
	{
			let options = oFF.PrFactory.createStructure();
		options.putBoolean("UseDefaultAttributeKey", false);
		let queryManager = sourceQueryModel.getQueryManager();
		if (queryManager.getMaxResultRecords() !== -1)
		{
			options.putLong("MaxResultRecords", queryManager.getMaxResultRecords());
		}
		oFF.QInAOptions.exportPaging(options, queryManager);
		oFF.QInAOptions.exportSuppressKeyfigureCalculation(options, queryManager);
		options.putString("ResultFormat", "Version2");
		options.putString("ResultEncoding", "None");
		if (isSubQuery)
		{
			options.putBoolean("IsCubeBlendingSubquery", true);
		}
		if (!queryManager.isResultSetTransportEnabled())
		{
			options.putBoolean("ReturnEmptyJsonResultSet", true);
		}
		return options;
	},
	getExtendedStructureMemberNames:function(queryModel)
	{
			let structureMembers = queryModel.getMeasureDimension().getExtendedStructureMembers();
		return oFF.XCollectionUtils.createListOfNames(structureMembers);
	},
	updateBWRemoteSource:function(inaQuery, systemType, queryModel)
	{
			if (systemType.isTypeOf(oFF.SystemType.BW) || systemType.isTypeOf(oFF.SystemType.VIRTUAL_INA))
		{
			inaQuery.remove("FixedFilter");
			inaQuery.remove("DynamicFilter");
			inaQuery.remove("Filter");
			inaQuery.remove("Conditions");
			inaQuery.remove("Query");
			inaQuery.remove("QueryDataCells");
			inaQuery.remove("Sort");
			inaQuery.remove("ExtendedSortTypes");
			inaQuery.remove("Variables");
			inaQuery.remove("UniversalDisplayHierarchies");
			let extStructureMemberNames = oFF.QInADataSourceBlending.getExtendedStructureMemberNames(queryModel);
			let inaDimensions = inaQuery.getListByKey("Dimensions");
			let dimensionCount = oFF.PrUtils.getListSize(inaDimensions, 0);
			for (let i = dimensionCount - 1; i >= 0; i--)
			{
				if (oFF.QInAConverter.lookupAxisType(inaDimensions.getStructureAt(i).getStringByKey("Axis")) === oFF.AxisType.FREE)
				{
					inaDimensions.removeAt(i);
				}
			}
			dimensionCount = oFF.PrUtils.getListSize(inaDimensions, 0);
			for (let i = 0; i < dimensionCount; i++)
			{
				let inaMembers = inaDimensions.getStructureAt(i).getListByKey("Members");
				let memberCount = oFF.PrUtils.getListSize(inaMembers, 0);
				for (let k = 0; k < memberCount; k++)
				{
					let inaMember = inaMembers.getStructureAt(k);
					if (extStructureMemberNames.contains(inaMember.getStringByKey("Name")))
					{
						inaMember.remove("Selection");
					}
					inaMember.remove("Formula");
				}
			}
		}
	},
	updateRemoteDataSource:function(inaQuery, queryManager, isBlendingDataRequest, localSystemDescription)
	{
			let dataSource = inaQuery.putNewStructure("DataSource");
		dataSource.putString("Type", "SerializedData");
		dataSource.putString("InstanceId", queryManager.getResultSetPersistenceIdentifier());
		let resultSetContainer = queryManager.getActiveResultSetContainer();
		let systemDescription = queryManager.getSystemDescription();
		let hasSerializedData = oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getSerializedView()) && (!isBlendingDataRequest || oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getSerializedCube()));
		if (!hasSerializedData && localSystemDescription.isSystemMappingValid(systemDescription))
		{
			let mappingRemoteHost = systemDescription.getSystemMapping(localSystemDescription.getSystemName());
			dataSource.putString("ObjectName", mappingRemoteHost.getDeserializeTable());
			dataSource.putString("SchemaName", mappingRemoteHost.getDeserializeSchema());
		}
		else
		{
			let serializedData = dataSource.putNewStructure("SerializedData");
			let isSerializationOptimizationEnabled = queryManager.getTagging().containsKey(oFF.QStateConstants.TAG_PERSISTED_INA_VIEW_CUBE_SERIALIZATION_OPTIMIZATION);
			if (!isSerializationOptimizationEnabled)
			{
				serializedData.putString("View", resultSetContainer.getSerializedView());
				if (isBlendingDataRequest)
				{
					serializedData.putStringNotNullAndNotEmpty("Cube", resultSetContainer.getSerializedCube());
				}
			}
		}
		oFF.QInADataSourceBlending.updateBWRemoteSource(inaQuery, queryManager.getSystemType(), queryManager.getQueryModel());
	}
};

oFF.QInADataSourceExtDims = {

	checkIsValid:function(exporter, extDimension)
	{
			let joinType = extDimension.getJoinType();
		if (oFF.isNull(joinType))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' is missing a JoinType"));
			return false;
		}
		let dimensionType = extDimension.getDimensionType();
		if (dimensionType.isTypeOf(oFF.DimensionType.GIS_DIMENSION) && joinType.isTypeOf(oFF.JoinType._TIME))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Spatial extended dimensions must not have join type INNER");
			return false;
		}
		else if ((dimensionType.isTypeOf(oFF.DimensionType.TIME) || dimensionType.isTypeOf(oFF.DimensionType.DATE)) && joinType.isTypeOf(oFF.JoinType._SPATIAL))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Time extended dimensions must not have spatial join type");
			return false;
		}
		let externalDataSource = extDimension.getDataSource();
		if (oFF.isNull(externalDataSource))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' is missing its DataSource"));
			return false;
		}
		let joinParameters = extDimension.getJoinParameters();
		if (joinType === oFF.JoinType.WITHIN_DISTANCE && joinParameters.isEmpty())
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate3("Extended dimension '", extDimension.getName(), "' of joinType 'WITHIN_DISTANCE' is expected to have the 2 parameters 'distance' and 'unit of measure' (in that order)"));
			return false;
		}
		return true;
	},
	exportQd:function(exporter, dataSource, inaDataSource, isMetadata)
	{
			let extendedDimensions = dataSource.getExtendedDimensions();
		if (oFF.XCollectionUtils.hasElements(extendedDimensions))
		{
			let inaExtendedDimensions = inaDataSource.putNewList("ExtendedDimensions");
			for (let extDimIdx = 0; extDimIdx < extendedDimensions.size(); extDimIdx++)
			{
				let extDimension = extendedDimensions.get(extDimIdx);
				if (!oFF.QInADataSourceExtDims.checkIsValid(exporter, extDimension))
				{
					return;
				}
				let inaExtendedDimension = inaExtendedDimensions.addNewStructure();
				inaExtendedDimension.putString("Name", extDimension.getName());
				inaExtendedDimension.putString("Description", extDimension.getText());
				inaExtendedDimension.putInteger("DimensionType", oFF.QInAConverter.lookupDimensionTypeInA(extDimension.getDimensionType()));
				inaExtendedDimension.putString("JoinFieldName", extDimension.getJoinField());
				inaExtendedDimension.putString("JoinFieldNameInExtendedDimension", extDimension.getJoinFieldNameExternal());
				inaExtendedDimension.putString("JoinType", extDimension.getJoinType().getName());
				let joinCardinality = extDimension.getJoinCardinality();
				if (oFF.notNull(joinCardinality))
				{
					inaExtendedDimension.putString("JoinCardinality", joinCardinality.getName());
				}
				let queryManager = dataSource.getQueryManager();
				let modelCapabilities = null;
				if (oFF.notNull(queryManager))
				{
					modelCapabilities = queryManager.getModelCapabilities();
				}
				if (oFF.isNull(modelCapabilities))
				{
					modelCapabilities = exporter.m_capabilities;
				}
				if (modelCapabilities.supportsDimensionVisibility() && modelCapabilities.supportsExtendedDimensionVisibility())
				{
					let dimensionVisibility = extDimension.getVisibility();
					if (oFF.notNull(dimensionVisibility))
					{
						inaExtendedDimension.putString("Visibility", dimensionVisibility.getName());
					}
				}
				let joinParameters = extDimension.getJoinParameters();
				if (joinParameters.hasElements())
				{
					let inaJoinParameters = inaExtendedDimension.putNewList("JoinParameters");
					inaJoinParameters.addAllStrings(joinParameters);
				}
				let externalDataSource = extDimension.getDataSource();
				let inaExternalDataSource = inaExtendedDimension.putNewStructure("DataSource");
				oFF.QInADataSourceProperties.exportQd(exporter, externalDataSource, inaExternalDataSource, false, isMetadata);
				let type = externalDataSource.getType();
				if (oFF.isNull(type))
				{
					inaExternalDataSource.putString("Type", oFF.MetaObjectType.DBVIEW.getCamelCaseName());
				}
				else
				{
					inaExternalDataSource.putString("Type", type.getCamelCaseName());
				}
				if (modelCapabilities.supportsExtendedDimensionsChangeDefaultRenamingAndDescription())
				{
					inaExtendedDimension.putStringNotNull("FieldRenamingMode", extDimension.getRenamingMode());
				}
			}
		}
	},
	importExtendedDataSource:function(inaExtendedDimension, extendedDimension)
	{
			let inaExternalDataSource = inaExtendedDimension.getStructureByKey("DataSource");
		if (oFF.notNull(inaExternalDataSource))
		{
			let externalDataSource = oFF.QFactory.createDataSource();
			oFF.QInADataSourceProperties.importQd(externalDataSource, inaExternalDataSource);
			let type;
			let inaType = inaExternalDataSource.getStringByKey("Type");
			if (oFF.isNull(inaType))
			{
				type = oFF.MetaObjectType.DBVIEW;
			}
			else
			{
				type = oFF.MetaObjectType.lookup(oFF.XString.toLowerCase(inaType));
			}
			externalDataSource.setType(type);
			extendedDimension.setDataSource(externalDataSource);
		}
	},
	importJoinParameter:function(inaExtendedDimension, extendedDimension)
	{
			let inaJoinParameters = inaExtendedDimension.getListByKey("JoinParameters");
		if (oFF.notNull(inaJoinParameters))
		{
			let joinParameters = extendedDimension.getJoinParameters();
			joinParameters.clear();
			let joinParamSize = inaJoinParameters.size();
			for (let j = 0; j < joinParamSize; j++)
			{
				joinParameters.add(inaJoinParameters.getStringAt(j));
			}
		}
	},
	importQd:function(importer, dataSource, inaDataSource)
	{
			if (importer.m_capabilities.supportsExtendedDimensions())
		{
			let extendedDimensionsBase = dataSource.getExtendedDimensionsBase();
			extendedDimensionsBase.clear();
			let inaExtendedDimensions = inaDataSource.getListByKey("ExtendedDimensions");
			if (oFF.notNull(inaExtendedDimensions))
			{
				let extDimSize = inaExtendedDimensions.size();
				for (let i = 0; i < extDimSize; i++)
				{
					let inaExtendedDimension = inaExtendedDimensions.getStructureAt(i);
					let name = inaExtendedDimension.getStringByKey("Name");
					let joinFieldName = inaExtendedDimension.getStringByKey("JoinFieldName");
					let joinFieldNameInExtendedDim = inaExtendedDimension.getStringByKey("JoinFieldNameInExtendedDimension");
					let extendedDimension = dataSource.addNewExtendedDimension(name, joinFieldName, joinFieldNameInExtendedDim);
					extendedDimension.setText(inaExtendedDimension.getStringByKey("Description"));
					let joinTypeValue = inaExtendedDimension.getStringByKey("JoinType");
					let joinType = oFF.JoinType.lookup(joinTypeValue);
					extendedDimension.setJoinType(joinType);
					oFF.QInADataSourceExtDims.importJoinParameter(inaExtendedDimension, extendedDimension);
					oFF.QInADataSourceExtDims.importExtendedDataSource(inaExtendedDimension, extendedDimension);
					let renamingMode = inaExtendedDimension.getStringByKey("FieldRenamingMode");
					if (oFF.notNull(renamingMode))
					{
						extendedDimension.setRenamingMode(renamingMode);
					}
					let joinCardinalityValue = inaExtendedDimension.getStringByKey("JoinCardinality");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(joinCardinalityValue))
					{
						let joinCardinality = oFF.JoinCardinality.lookup(joinCardinalityValue);
						extendedDimension.setJoinCardinality(joinCardinality);
					}
					let extendedDimensionVisibility = inaExtendedDimension.getStringByKey("Visibility");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(extendedDimensionVisibility))
					{
						let dimensionVisibility = oFF.DimensionVisibility.lookup(extendedDimensionVisibility);
						if (oFF.notNull(dimensionVisibility))
						{
							extendedDimension.setVisibility(dimensionVisibility);
						}
					}
				}
			}
		}
	}
};

oFF.QInADataSourceProperties = {

	exportQd:function(exporter, dataSource, inaDataSource, withRunAsUser, isMetadata)
	{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "ObjectName", dataSource.getObjectName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "Environment", dataSource.getEnvironmentName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "PackageName", dataSource.getPackageName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "SchemaName", dataSource.getSchemaName());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "AliasName", dataSource.getAlias());
		oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "Context", dataSource.getContextParameter());
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.UNIVERSE_SOURCE_QUERY) && oFF.QInADataSourceProperties.exportSourceQuery(dataSource, isMetadata))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "SourceQuery", dataSource.getSourceQuery());
		}
		else
		{
			let customProperties = dataSource.getCustomProperties();
			let customPropertiesIt = customProperties.getKeysAsIterator();
			if (customPropertiesIt.hasNext())
			{
				let inaCustomProperties = inaDataSource.putNewStructure("CustomProperties");
				while (customPropertiesIt.hasNext())
				{
					let key = customPropertiesIt.next();
					if (!oFF.XString.isEqual(key, oFF.QDataSource.SOURCE_QUERY_INA) || oFF.QInADataSourceProperties.exportSourceQuery(dataSource, isMetadata))
					{
						oFF.QInAExportUtil.setNonEmptyString(inaCustomProperties, key, customProperties.getByKey(key));
					}
				}
			}
		}
		let dataArea = dataSource.getDataArea();
		if (!oFF.XString.isEqual(dataArea, "DEFAULT"))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "DataArea", dataArea);
		}
		if (withRunAsUser)
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "RunAsUser", dataSource.getRunAsUser());
		}
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || exporter.m_mode.containsMetadata())
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "Description", dataSource.getText());
		}
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaDataSource, "InstanceId", dataSource.getInstanceId());
			let rriName = dataSource.getRriName();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(rriName))
			{
				oFF.QInAExportUtil.setNonEmptyString(inaDataSource, rriName, dataSource.getRriValue());
			}
		}
	},
	exportSourceQuery:function(dataSource, isMetadata)
	{
			let skipSourceQuery = false;
		let context = dataSource.getContext();
		if (oFF.notNull(context))
		{
			let queryManager = context.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				let queryServiceConfig = queryManager.getQueryServiceConfig();
				skipSourceQuery = queryServiceConfig.isSkipSourceQueryForNonMetadataRequests();
			}
		}
		return isMetadata || !skipSourceQuery;
	},
	importQd:function(dataSource, structure)
	{
			let name = structure.getStringByKey("ObjectName");
		dataSource.setName(name);
		let environmentName = structure.getStringByKey("Environment");
		dataSource.setEnvironmentName(environmentName);
		let packageName = structure.getStringByKey("PackageName");
		dataSource.setPackageName(packageName);
		let schemaName = structure.getStringByKey("SchemaName");
		dataSource.setSchemaName(schemaName);
		let sourceQuery = structure.getStringByKey("SourceQuery");
		dataSource.setSourceQuery(sourceQuery);
		let aliasName = structure.getStringByKey("AliasName");
		dataSource.setAlias(aliasName);
		let dataArea = structure.getStringByKey("DataArea");
		dataSource.setDataArea(dataArea);
		let runAsUser = structure.getStringByKey("RunAsUser");
		dataSource.setRunAsUser(runAsUser);
		let text = structure.getStringByKey("Description");
		dataSource.setText(text);
		let contextParameter = structure.getStringByKey("Context");
		if (oFF.notNull(contextParameter))
		{
			dataSource.setContextParameter(contextParameter);
		}
		let inaCustomProperties = structure.getStructureByKey("CustomProperties");
		if (oFF.notNull(inaCustomProperties))
		{
			let customPropertyNames = inaCustomProperties.getKeysAsReadOnlyList();
			let size = customPropertyNames.size();
			for (let i = 0; i < size; i++)
			{
				let key = customPropertyNames.get(i);
				dataSource.addCustomProperty(key, inaCustomProperties.getStringByKey(key));
			}
		}
	}
};

oFF.QInASpatialClustering = {

	exportResultSetFeatures:function(sourceQueryModel)
	{
			let options = oFF.PrFactory.createStructure();
		options.putBoolean("UseDefaultAttributeKey", false);
		let queryManager = sourceQueryModel.getQueryManager();
		if (queryManager.getMaxResultRecords() !== -1)
		{
			options.putLong("MaxResultRecords", queryManager.getMaxResultRecords());
		}
		oFF.QInAOptions.exportPaging(options, queryManager);
		options.putString("ResultFormat", "Version2");
		options.putString("ResultEncoding", "None");
		return options;
	},
	exportSpatialClusterSettings:function(clusterSettings, isTypeBW)
	{
			let inaCluster = oFF.PrFactory.createStructure();
		inaCluster.putBoolean("Active", clusterSettings.isActive());
		inaCluster.putString("ClusterAlgorithm", clusterSettings.getClusterAlgorithm().getName());
		inaCluster.putString("GeometryAttribute", clusterSettings.getClusterField().getName());
		let thresholdNumberOfPoints = clusterSettings.getThresholdNumberOfPoints();
		if (thresholdNumberOfPoints !== -1)
		{
			inaCluster.putInteger("ThresholdNumberOfPoints", thresholdNumberOfPoints);
		}
		let inaParameters = inaCluster.putNewStructure("ClusterParameters");
		let parameters = clusterSettings.getParameters();
		let keys = parameters.getKeysAsIterator();
		while (keys.hasNext())
		{
			let key = keys.next();
			let value = parameters.getByKey(key);
			if (value.getValueType() === oFF.XValueType.INTEGER)
			{
				inaParameters.putInteger(key, value.getInteger());
			}
			else if (value.getValueType() === oFF.XValueType.DOUBLE)
			{
				inaParameters.putDouble(key, value.getDouble());
			}
			else
			{
				inaParameters.putString(key, value.toString());
			}
		}
		if (!isTypeBW)
		{
			let dimensions = clusterSettings.getDimensions();
			if (oFF.notNull(dimensions) && dimensions.size() > 0)
			{
				let dimensionList = inaCluster.putNewList("Dimensions");
				for (let i = 0; i < dimensions.size(); i++)
				{
					dimensionList.addString(dimensions.get(i));
				}
			}
		}
		return inaCluster;
	},
	exportSpatialClusteringRequest:function(exporter, clusterSettings)
	{
			let request = oFF.PrFactory.createStructure();
		let inaAnalytics = request.putNewStructure("Analytics");
		let clusterField = clusterSettings.getClusterField();
		let queryModel = clusterField.getQueryModel();
		let inaDataSource = exporter.exportDataSource(queryModel.getDataSource(), false);
		inaAnalytics.put("DataSource", inaDataSource);
		let inaDimension = exporter.exportDimension(clusterField.getDimension(), null);
		inaDimension.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(oFF.AxisType.ROWS));
		let inaCluster = oFF.QInASpatialClustering.exportSpatialClusterSettings(clusterSettings, queryModel.getConvenienceCommands().isTypeOfBw());
		inaDimension.put("ClusterDefinition", inaCluster);
		let inaMeasure = exporter.exportStructureDimension(queryModel.getMeasureDimension());
		inaMeasure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(oFF.AxisType.COLUMNS));
		if (queryModel.getConvenienceCommands().isTypeOfBw())
		{
			let inaMember = oFF.PrFactory.createStructure();
			inaMember.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(oFF.ResultVisibility.VISIBLE));
			let inaMemberOperand = inaMember.putNewStructure("MemberOperand");
			inaMemberOperand.putString("AttributeName", "Measures");
			inaMemberOperand.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL));
			inaMemberOperand.putString("Value", "1ROWCOUNT");
			let inaMembers = inaMeasure.getListByKey("Members");
			inaMembers.clear();
			inaMembers.add(inaMember);
		}
		let inaDimensionList = oFF.PrFactory.createList();
		inaDimensionList.add(inaDimension);
		inaDimensionList.add(inaMeasure);
		let freeAxis = queryModel.getAxis(oFF.AxisType.FREE);
		let sizeFreeAxis = freeAxis.size();
		for (let idxFree = 0; idxFree < sizeFreeAxis; idxFree++)
		{
			let freeDimension = freeAxis.get(idxFree);
			let freeDimensionType = freeDimension.getDimensionType();
			if (freeDimensionType.isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
			{
				inaDimensionList.add(exporter.exportDimension(freeDimension, null));
			}
		}
		let inaDefinition = inaAnalytics.putNewStructure("Definition");
		inaDefinition.put("Dimensions", inaDimensionList);
		exporter.exportFilter(queryModel.getFilter(), inaDefinition);
		if (queryModel.getModelCapabilities().supportsConditions() && queryModel.getConditionManager().getEffectiveConditions().size() > 0)
		{
			exporter.exportConditionManager(queryModel.getConditionManager(), inaDefinition);
		}
		exporter.exportVariables(queryModel.getVariableContainer(), inaDefinition);
		inaDefinition.put("ResultSetFeatureRequest", oFF.QInASpatialClustering.exportResultSetFeatures(queryModel));
		return request;
	}
};

oFF.QInAValueHelp = {

	_addHierarchyNavigation:function(hierarchyNavigationList, dimensionName, fieldName, memberValue)
	{
			let hierarchyNavigation = hierarchyNavigationList.addNewStructure();
		hierarchyNavigation.putString("DrillState", oFF.QInAConverter.lookupDrillStateInA(oFF.DrillState.EXPANDED));
		let drillMember = hierarchyNavigation.putNewStructure("DrillMember");
		drillMember.putString("DimensionName", dimensionName);
		drillMember.putString("FieldName", fieldName);
		drillMember.putString("Member", memberValue);
	},
	addVariableHierarchyToFilters:function(variable, selection)
	{
			let dimension = variable.getDimension();
		let operator = oFF.PrUtils.getStructureProperty(selection, "Operator");
		let subSelections = oFF.PrUtils.getListProperty(operator, "SubSelections");
		for (let i = 0; i < oFF.PrUtils.getListSize(subSelections, 0); i++)
		{
			let subSelection = subSelections.getStructureAt(i);
			if (subSelection.containsKey("SetOperand"))
			{
				let setOperand = oFF.PrUtils.getStructureProperty(subSelection, "SetOperand");
				let field = dimension.getFieldByName(setOperand.getStringByKey("FieldName"));
				if (setOperand.containsKey("Hierarchy") || oFF.notNull(field) && (field === dimension.getHierarchyKeyField() || field === dimension.getHierarchyDisplayKeyField() || field === dimension.getHierarchyTextField() || field === dimension.getHierarchyNavigationField()))
				{
					setOperand.putNewStructure("Hierarchy").putString("Name", variable.getHierarchyName());
				}
			}
			else if (subSelection.containsKey("Operator"))
			{
				oFF.QInAValueHelp.addVariableHierarchyToFilters(variable, subSelection);
			}
		}
	},
	dimensionRequiredOnFreeAxis:function(dimension)
	{
			let queryModel = dimension.getQueryModel();
		if (dimension.getSupportedAxesTypes().contains(oFF.AxisType.FREE))
		{
			let dimensionType = dimension.getDimensionType();
			if (dimensionType === oFF.DimensionType.MEASURE_STRUCTURE || dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
			{
				return oFF.QInAValueHelp.getDimensionsUsedInFilter(queryModel).contains(dimension.getName()) || oFF.XCollectionUtils.hasElements(queryModel.getExceptionManager());
			}
			else if (dimensionType === oFF.DimensionType.ACCOUNT)
			{
				return oFF.QInAValueHelp.getDimensionsUsedInFilter(queryModel).contains(dimension.getName());
			}
			else
			{
				return dimensionType === oFF.DimensionType.CALCULATED_DIMENSION;
			}
		}
		return false;
	},
	exportExtendedSortVh:function(inaDefinition, dimension)
	{
			let inaSort = inaDefinition.putNewList("Sort");
		let inaDimensionSort = inaSort.addNewStructure();
		inaDimensionSort.putString("Dimension", dimension.getName());
		inaDimensionSort.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(dimension.getSelectorOrder()));
		let selectorSortType = dimension.getSelectorSortType();
		if (oFF.notNull(selectorSortType))
		{
			inaDimensionSort.putString("SortType", oFF.QInAConverter.lookupSortTypeInA(selectorSortType));
		}
		else
		{
			inaDimensionSort.putString("SortType", "MemberKey");
		}
	},
	exportMemberHelpRequest:function(exporter, queryModel, dimension, isVariableValueHelp)
	{
			if (oFF.isNull(queryModel) || oFF.isNull(dimension))
		{
			return null;
		}
		let request = oFF.PrFactory.createStructure();
		let session = queryModel.getSession();
		if (queryModel.getModelCapabilities().supportsFlexibleClientInfo() && session.hasFeature(oFF.FeatureToggleOlap.FLEX_CLIENT_INFO))
		{
			oFF.QInAClientInfo.exportFlexibleClientInfo(request, queryModel);
		}
		else if (session.hasFeature(oFF.FeatureToggleOlap.CLIENT_INFO_METADATA))
		{
			oFF.QInAClientInfo.exportClientInfo(request, queryModel, queryModel.getModelCapabilities().supportsClientInfo(), queryModel.getSystemType().isTypeOf(oFF.SystemType.BW));
		}
		let inaAnalytics = request.putNewStructure("Analytics");
		oFF.QInADataSource.exportDataSource(exporter, queryModel.getDataSource(), false, inaAnalytics, false);
		let inaDimensionList = oFF.PrFactory.createList();
		inaDimensionList.add(exporter.exportDimension(dimension, null));
		let inaDefinition = inaAnalytics.putNewStructure("Definition");
		inaDefinition.put("Dimensions", inaDimensionList);
		exporter.exportVariables(queryModel.getVariableContainer(), inaDefinition);
		let filter = queryModel.getFilter();
		oFF.QInAValueHelp.exportValueHelpFilters(exporter, inaDefinition, dimension, filter, isVariableValueHelp);
		return request;
	},
	exportPlanningVariableHelpRequest:function(exporter, planningOperation, dimension, variable)
	{
			let request = planningOperation.getCommandForExport();
		let inaPlanning = request.getStructureByKey("Planning");
		let inaDataSource = inaPlanning.getStructureByKey("Command").getStructureByKey("DataSource");
		let inaDefinition = inaPlanning.putNewStructure("Definition");
		oFF.QInAValueHelp.exportValueHelpFilters(exporter, inaDefinition, dimension, planningOperation.getSelector(), true);
		let inaDimension = exporter.exportDimension(dimension, null);
		let dimensionList = inaDefinition.putNewList("Dimensions");
		dimensionList.add(inaDimension);
		if (variable.getHierarchyName() !== null)
		{
			oFF.QInAValueHelp.exportVariableHierarchyInformation(exporter, inaDimension, inaDefinition, variable);
		}
		let variables = inaDefinition.putNewList("Variables");
		let newVariable = variables.addNewStructure();
		newVariable.putString("Name", variable.getName());
		let type = inaDataSource.getStringByKey("Type");
		if (oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE_VALUEHELP.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_FUNCTION.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_FUNCTION_VALUEHELP.getCamelCaseName()))
		{
			if (oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE.getCamelCaseName()))
			{
				inaDataSource.putString("Type", oFF.MetaObjectType.PLANNING_SEQUENCE_VALUEHELP.getCamelCaseName());
			}
			else if (oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_FUNCTION.getCamelCaseName()))
			{
				inaDataSource.putString("Type", oFF.MetaObjectType.PLANNING_FUNCTION_VALUEHELP.getCamelCaseName());
			}
			let directives = inaPlanning.putNewStructure("ProcessingDirectives");
			directives.putString("ProcessingStep", "VariableDefinition");
			request.putNewList("Options").addString("StatefulServer");
		}
		else
		{
			inaDefinition.putString("ValuehelpForVariable", variable.getName());
			if (dimension.getReadMode(oFF.QContextType.SELECTOR) === oFF.QMemberReadMode.MASTER)
			{
				inaDefinition.putString("ReadMode", "Master");
			}
			if (inaDefinition.containsKey("FixedFilter"))
			{
				inaDefinition.remove("FixedFilter");
			}
		}
		return request;
	},
	exportResultSetRequest:function(exporter, lovConfig, queryModel, withVariables, withDataSource)
	{
			let inaRequest = exporter.exportQueryModel(queryModel, withVariables, withDataSource);
		let lovDimension = lovConfig.getDimension();
		let includeMeasures = lovConfig.isIncludeMeasures();
		let lovDimensionInQuery = false;
		let inaDimensions = inaRequest.getListByKey("Dimensions");
		for (let i = inaDimensions.size() - 1; i >= 0; i--)
		{
			let inaDimension = inaDimensions.getStructureAt(i);
			let isOnFreeAxis = oFF.XString.isEqual(inaDimension.getStringByKey("Axis"), "Free");
			let dimension = queryModel.getDimensionByName(inaDimension.getStringByKey("Name"));
			if (oFF.notNull(dimension))
			{
				if (dimension === lovDimension)
				{
					lovDimensionInQuery = true;
					if (isOnFreeAxis)
					{
						inaDimension.putString("Axis", "Rows");
					}
				}
				else if (!isOnFreeAxis && (!dimension.isStructure() || !includeMeasures))
				{
					if (oFF.QInAValueHelp.dimensionRequiredOnFreeAxis(dimension))
					{
						inaDimension.putString("Axis", "Free");
					}
					else
					{
						inaDimensions.removeAt(i);
					}
				}
			}
		}
		if (!lovDimensionInQuery)
		{
			let inaLovDimension = exporter.exportDimension(lovDimension, inaDimensions.addNewStructure());
			inaLovDimension.putString("Axis", "Rows");
		}
		return inaRequest;
	},
	exportValueHelpFilters:function(exporter, inaDefinition, dimension, filter, isVariableValueHelp)
	{
			exporter.exportFixedFilter(filter, inaDefinition);
		let modelCapabilities = filter.getModelCapabilities();
		if (dimension.getSelectorFilterUsage() === oFF.QueryFilterUsage.SELECTOR_FILTER && oFF.notNull(modelCapabilities) && modelCapabilities.supportsVisibilityFilter())
		{
			exporter.exportVisibilityFilter(filter, inaDefinition);
		}
		oFF.QInAValueHelp.setOptionsVh(exporter, inaDefinition, dimension, isVariableValueHelp);
		if (exporter.m_capabilities.supportsExtendedSort())
		{
			oFF.QInAValueHelp.exportExtendedSortVh(inaDefinition, dimension);
		}
		let isQueryFilter = dimension.getSelectorFilterUsage() !== oFF.QueryFilterUsage.SELECTOR_FILTER || !filter.isValueHelpFilterInitialized();
		let selectionContainer = oFF.QInAValueHelpFilter.getValueHelpFilter(dimension, filter);
		let memberValueForFilter = null;
		let hierarchyNodeFilter = null;
		if (dimension.isSelectorHierarchyActive())
		{
			let selectorHierarchyNode = dimension.getSelectorHierarchyNode();
			let selectorHierarchyNodeName = dimension.getSelectorHierarchyNodeName();
			let selectorHierarchyNodeSid = dimension.getSelectorHierarchyNodeSid();
			if (dimension.isSelectorUseQueryDrillOperations())
			{
				exporter.exportDrillManager(dimension.getDrillManager(), inaDefinition);
			}
			else if (oFF.notNull(selectorHierarchyNode))
			{
				let hierarchyNavigationField = dimension.getHierarchyNavigationField();
				let hierarchyNavigation = inaDefinition.putNewList("HierarchyNavigations");
				let iterator = dimension.getNavigationNodes().getIterator();
				while (iterator.hasNext())
				{
					let dimensionMember = iterator.next().getDimensionMember();
					let fieldValue = dimensionMember.getFieldValue(hierarchyNavigationField);
					if (oFF.isNull(fieldValue))
					{
						fieldValue = dimensionMember.getFieldValue(dimension.getHierarchyKeyField());
						if (oFF.isNull(fieldValue))
						{
							fieldValue = dimensionMember.getKeyFieldValue();
						}
					}
					oFF.QInAValueHelp._addHierarchyNavigation(hierarchyNavigation, dimension.getName(), fieldValue.getField().getName(), fieldValue.getString());
				}
				oFF.XObjectExt.release(iterator);
				memberValueForFilter = selectorHierarchyNode.getName();
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(selectorHierarchyNodeSid))
			{
				oFF.QInAValueHelp._addHierarchyNavigation(inaDefinition.putNewList("HierarchyNavigations"), dimension.getName(), dimension.getHierarchyNavigationField().getName(), selectorHierarchyNodeSid);
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(selectorHierarchyNodeName))
			{
				oFF.QInAValueHelp._addHierarchyNavigation(inaDefinition.putNewList("HierarchyNavigations"), dimension.getName(), dimension.getSelectorKeyField().getName(), selectorHierarchyNodeName);
				memberValueForFilter = selectorHierarchyNodeName;
			}
			if (isQueryFilter && oFF.notNull(selectionContainer) && oFF.notNull(memberValueForFilter))
			{
				hierarchyNodeFilter = selectionContainer.addSingleMemberFilterByDimension(dimension, memberValueForFilter, oFF.ComparisonOperator.EQUAL);
			}
		}
		if (oFF.notNull(selectionContainer))
		{
			let queryModel = dimension.getQueryModel();
			let inaFilter = oFF.notNull(queryModel) ? exporter.exportValueHelpFilter(dimension, inaDefinition) : exporter.exportFilterExpression(selectionContainer);
			inaDefinition.putIfNotNull(oFF.isNull(queryModel) || queryModel.getModelCapabilities() === null || exporter.isAbap(queryModel) ? "Filter" : "DynamicFilter", inaFilter);
			if (isQueryFilter && oFF.notNull(hierarchyNodeFilter))
			{
				let complexRoot = selectionContainer.getComplexRoot();
				if (oFF.notNull(complexRoot))
				{
					complexRoot.removeElement(hierarchyNodeFilter);
				}
				else
				{
					let cartesianProduct = selectionContainer.getCartesianProduct();
					if (oFF.notNull(cartesianProduct))
					{
						cartesianProduct.removeElement(hierarchyNodeFilter);
					}
				}
			}
		}
	},
	exportVariableHelpRequest:function(exporter, queryModel, dimension, variable)
	{
			let request = oFF.QInAValueHelp.exportMemberHelpRequest(exporter, queryModel, dimension, true);
		let inaAnalytics = request.getStructureByKey("Analytics");
		let inaDataSource = inaAnalytics.getStructureByKey("DataSource");
		let inaDefinition = inaAnalytics.getStructureByKey("Definition");
		let inaDimension = inaDefinition.getListByKey("Dimensions").getStructureAt(0);
		if (variable.getHierarchyName() !== null)
		{
			oFF.QInAValueHelp.exportVariableHierarchyInformation(exporter, inaDimension, inaDefinition, variable);
		}
		let variables = inaDefinition.putNewList("Variables");
		let newVariable = variables.addNewStructure();
		newVariable.putString("Name", variable.getName());
		let type = inaDataSource.getStringByKey("Type");
		if (oFF.XString.isEqual(type, oFF.MetaObjectType.QUERY_VALUEHELP.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.PLANNING_SEQUENCE_VALUEHELP.getCamelCaseName()) || oFF.XString.isEqual(type, oFF.MetaObjectType.CDS_PROJECTION_VIEW_VALUEHELP.getCamelCaseName()))
		{
			let directives = inaAnalytics.putNewStructure("ProcessingDirectives");
			directives.putString("ProcessingStep", "VariableDefinition");
		}
		else
		{
			inaDefinition.putString("ValuehelpForVariable", variable.getName());
			exporter.exportVariables(queryModel.getVariableContainer(), inaDefinition);
			if (exporter.isHana(queryModel))
			{
				oFF.XCollectionUtils.removeIf(inaDefinition.getListByKey("Variables"), (v) => {
					return oFF.XString.isEqual(v.asStructure().getStringByKey("Name"), variable.getName());
				});
			}
			if (dimension.getReadMode(oFF.QContextType.SELECTOR) === oFF.QMemberReadMode.MASTER)
			{
				inaDefinition.putString("ReadMode", "Master");
			}
			if (inaDefinition.containsKey("FixedFilter"))
			{
				inaDefinition.remove("FixedFilter");
			}
		}
		return request;
	},
	exportVariableHierarchyInformation:function(exporter, dimStructure, inaDefinition, variable)
	{
			let inaHierarchy = dimStructure.putNewStructure("Hierarchy");
		if (variable.getVariableType() === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			inaHierarchy.putStringNotNullAndNotEmpty("Name", variable.getHierarchyName());
			inaHierarchy.putStringNotNullAndNotEmpty("DueDate", variable.getHierarchyKeyDate());
			inaHierarchy.putStringNotNullAndNotEmpty("Version", variable.getHierarchyVersion());
			inaHierarchy.putInteger("InitialDrillLevel", variable.getDimension().getSelectorRootLevel());
			oFF.QInAHierarchyValueHelp.addLowerLevelNodeAlignment(exporter, variable.getDimension(), inaHierarchy);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(variable.getHierarchyName()))
			{
				oFF.QInAValueHelp.addVariableHierarchyToFilters(variable, oFF.PrUtils.getStructureProperty(inaDefinition.getStructureByKey("Filter"), "Selection"));
				oFF.QInAValueHelp.addVariableHierarchyToFilters(variable, oFF.PrUtils.getStructureProperty(inaDefinition.getStructureByKey("DynamicFilter"), "Selection"));
				oFF.QInAValueHelp.addVariableHierarchyToFilters(variable, oFF.PrUtils.getStructureProperty(inaDefinition.getStructureByKey("VisibilityFilter"), "Selection"));
			}
		}
		else
		{
			let dependentVariables = variable.getDependentVariables();
			let iterator = dependentVariables.getIterator();
			while (iterator.hasNext())
			{
				let someVariable = iterator.next();
				if (someVariable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
				{
					let hierarchyNameVariable = someVariable;
					let hierarchyName = hierarchyNameVariable.getValueByString();
					if (oFF.XStringUtils.isNullOrEmpty(hierarchyName))
					{
						oFF.QInAValueHelp.throwErrorForDependentVariable(variable, hierarchyNameVariable);
					}
					inaHierarchy.putString("Name", hierarchyName);
				}
				else if (someVariable.getVariableType() === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
				{
					let dimensionMemberVariable = someVariable;
					let someValue = dimensionMemberVariable.getValueByString();
					if (oFF.XStringUtils.isNullOrEmpty(someValue))
					{
						oFF.QInAValueHelp.throwErrorForDependentVariable(variable, dimensionMemberVariable);
					}
					if (exporter.isAbap(variable))
					{
						if (dimensionMemberVariable.getDimension().getDimensionType() === oFF.DimensionType.DATE)
						{
							inaHierarchy.putStringNotNullAndNotEmpty("DateTo", someValue);
						}
						else
						{
							inaHierarchy.putStringNotNullAndNotEmpty("Version", someValue);
						}
					}
				}
			}
			oFF.XObjectExt.release(iterator);
			inaHierarchy.putInteger("InitialDrillLevel", variable.getDimension().getSelectorRootLevel());
		}
	},
	getDimensionsUsedInFilter:function(queryModel)
	{
			let usedDimensions = oFF.XHashSetOfString.create();
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(queryModel.getFilter().getDynamicFilter(), usedDimensions);
		return usedDimensions;
	},
	isExecuteAutoSubmitForValueHelp:function(queryManager)
	{
			return queryManager.hasVariables() && queryManager.getVariableProcessorState() !== oFF.VariableProcessorState.SUBMITTED && queryManager.isExecuteAutoVariableSubmit() && !queryManager.isProcessingAutoSubmit();
	},
	setOptionsVh:function(exporter, inaDefinition, dimension, isVariableValueHelp)
	{
			let resultSetFeatureRequest = inaDefinition.putNewStructure("ResultSetFeatureRequest");
		resultSetFeatureRequest.putBoolean("UseDefaultAttributeKey", false);
		if (dimension.isSelectorGettingInterval() && exporter.m_capabilities.supportsResultSetInterval())
		{
			resultSetFeatureRequest.putBoolean("Interval", true);
		}
		resultSetFeatureRequest.putString("ResultFormat", "Version2");
		resultSetFeatureRequest.putString("ResultEncoding", "None");
		let queryModel = dimension.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			let queryManager = dimension.getQueryManager();
			let capabilities = queryModel.getModelCapabilities();
			if (capabilities.supportsAutoVariableSubmit())
			{
				let isExecuteAutoSubmitForValueHelp = !isVariableValueHelp && oFF.QInAValueHelp.isExecuteAutoSubmitForValueHelp(queryManager);
				resultSetFeatureRequest.putBoolean("IgnoreAutoSubmit", !isExecuteAutoSubmitForValueHelp);
			}
			if (capabilities.supportsCellDocumentId())
			{
				resultSetFeatureRequest.putBoolean("ReturnDocumentIds", false);
			}
			if (capabilities.supportsKeepOriginalTexts())
			{
				resultSetFeatureRequest.putBoolean("ResultKeepOriginalTexts", queryModel.isKeepingOriginalTexts());
			}
			if (queryModel.isValueHelpIgnoreQueryDynamicFilter())
			{
				resultSetFeatureRequest.putBoolean("ValueHelpIgnoreQueryDynFilter", true);
			}
			if (queryModel.isValueHelpUseCompleteEffectiveFilter())
			{
				resultSetFeatureRequest.putBoolean("ValueHelpUseCompleteEffectiveFilter", true);
			}
		}
		if (dimension.getSelectorMaxResultRecords() !== -1)
		{
			resultSetFeatureRequest.putLong("MaxResultRecords", dimension.getSelectorMaxResultRecords());
		}
		let subSetDescription = resultSetFeatureRequest.putNewStructure("SubSetDescription");
		subSetDescription.putInteger("RowFrom", dimension.getSelectorPagingStart());
		subSetDescription.putInteger("RowTo", dimension.getSelectorPagingEnd());
	},
	throwErrorForDependentVariable:function(variable, dependentVariable)
	{
			let message = oFF.XStringBuffer.create();
		message.append("The dependent variable '");
		message.append(dependentVariable.getName());
		message.append("' of the variable '");
		message.append(variable.getName());
		message.append("' has no value set.");
		throw oFF.XException.createIllegalStateException(message.toString());
	}
};

oFF.QInADocumentsIds = {

	exportDocumentsIds:function(inaDefinition, provider)
	{
			let resultSetContainer = provider.getActiveResultSetContainer();
		if (oFF.isNull(resultSetContainer))
		{
			return;
		}
		if (!resultSetContainer.hasDocumentIdCollection())
		{
			return;
		}
		let documentIdCollection = resultSetContainer.getDocumentIdCollection();
		let validDocumentIds = documentIdCollection.getValidDocumentIds();
		if (oFF.isNull(validDocumentIds))
		{
			return;
		}
		if (provider.getSystemType().isTypeOf(oFF.SystemType.BW))
		{
			oFF.QInADocumentsIds.exportDocumentsIdsBw(inaDefinition, validDocumentIds, provider.getModelCapabilities().supportsSapDate(), provider.getModelCapabilities().supportsSidPresentation());
		}
	},
	exportDocumentsIdsBw:function(inaDefinition, documentsIds, supportsSapDate, supportsSidPresentation)
	{
			let newLines = inaDefinition.putNewList("DocumentsIds");
		for (let i = 0; i < documentsIds.size(); i++)
		{
			let documentsIdsObj = newLines.addNewStructure();
			let contextList = documentsIdsObj.putNewList("DimensionContext");
			let documentsId = documentsIds.get(i);
			let dimensionMembers = documentsId.getDimensionMembers();
			for (let j = 0; j < dimensionMembers.size(); j++)
			{
				let dimensionMember = dimensionMembers.get(j);
				let dimension = dimensionMember.getDimension();
				let keyFieldValue = null;
				if (supportsSidPresentation)
				{
					keyFieldValue = dimensionMember.getFieldValue(dimension.getHierarchyNavigationField());
				}
				if (oFF.isNull(keyFieldValue))
				{
					keyFieldValue = dimensionMember.getKeyFieldValue();
				}
				let contextObj = contextList.addNewStructure();
				contextObj.putString("FieldName", keyFieldValue.getField().getName());
				let fieldValueType = keyFieldValue.getValueType();
				if (supportsSapDate)
				{
					if (fieldValueType === oFF.XValueType.DATE)
					{
						contextObj.putString("Value", keyFieldValue.getDate().toSAPFormat());
					}
					else if (fieldValueType === oFF.XValueType.TIME)
					{
						contextObj.putString("Value", keyFieldValue.getTime().toSAPFormat());
					}
					else if (fieldValueType === oFF.XValueType.DATE_TIME)
					{
						contextObj.putString("Value", keyFieldValue.getDateTime().toSAPFormat());
					}
					else
					{
						contextObj.putString("Value", keyFieldValue.getValue().getStringRepresentation());
					}
				}
				else
				{
					contextObj.putString("Value", keyFieldValue.getValue().getStringRepresentation());
				}
			}
			let cellList = documentsIdsObj.putNewList("CellContext");
			for (let k = 0; k < documentsId.getDocumentIdActions().size(); k++)
			{
				let cellObj = cellList.addNewStructure();
				let action = documentsId.getDocumentIdActions().get(k);
				cellObj.putString("QueryCellsId", action.getQueryDataCellReference());
				cellObj.putStringNotNullAndNotEmpty("Action", oFF.QInAConverter.lookupDocumentsIdsActionInA(action.getAction()));
			}
		}
	}
};

oFF.QInAExpand = {

	_addExpandFromList:function(prefix, list, expand)
	{
			let sortedList = oFF.XList.createWithList(list);
		sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
		let iterator = sortedList.getIterator();
		while (iterator.hasNext())
		{
			expand.addString(oFF.XStringUtils.concatenate2(prefix, iterator.next()));
		}
	},
	_exportExpandDimensionSelection:function(expand, queryServiceConfig)
	{
			let requiredDimensions = queryServiceConfig.getRequiredDimensions();
		let requiredAxes = queryServiceConfig.getDimensionsOnAxes();
		if (oFF.XCollectionUtils.hasElements(requiredDimensions))
		{
			oFF.QInAExpand._addExpandFromList("Dimensions?Name=", requiredDimensions, expand);
		}
		else if (oFF.XCollectionUtils.hasElements(requiredAxes))
		{
			oFF.QInAExpand._addExpandFromList("Axis?Name=", requiredAxes, expand);
		}
		else
		{
			expand.addString("Dimensions");
		}
	},
	_exportExpandFlagSelection:function(expand, initSettings)
	{
			if (initSettings.isRequestingVariables())
		{
			expand.addString("Variables");
		}
		if (initSettings.isRequestingVariableVariants())
		{
			expand.addString("VariableVariants");
		}
		if (initSettings.isRequestingSorting())
		{
			expand.addString("Sort");
		}
		if (initSettings.isRequestingDynamicFilter())
		{
			expand.addString("DynamicFilter");
		}
		if (initSettings.isRequestingDataCells())
		{
			expand.addString("QueryDataCells");
		}
		if (initSettings.isRequestingUniversalDisplayHierarchies())
		{
			expand.addString("UniversalDisplayHierarchies");
		}
		if (initSettings.isRequestingConditions())
		{
			expand.addString("Conditions");
		}
		if (initSettings.isRequestingExceptions())
		{
			expand.addString("Exceptions");
		}
	},
	_exportExpandSelection:function(expand, initSettings, provider)
	{
			let queryServiceConfig = provider.getQueryServiceConfig();
		if (queryServiceConfig.getMinimizedMetadata() && !oFF.XCollectionUtils.hasElements(queryServiceConfig.getRequiredDimensions()))
		{
			return oFF.PrFactory.createString("#");
		}
		oFF.QInAExpand._exportExpandDimensionSelection(expand, queryServiceConfig);
		oFF.QInAExpand._exportExpandFlagSelection(expand, initSettings);
		return expand;
	},
	createExpandMetadata:function(provider)
	{
			let expand = oFF.PrFactory.createList();
		let initSettings = provider.getInitSettings();
		if (initSettings.isRequestingMinimizedAttributes())
		{
			expand.addString("MinimizedAttributes");
		}
		if (!provider.getCapabilitiesBase().supportsDetailedResponseExpansion() || initSettings.isRequestingDefaultSettings())
		{
			expand.addString("Cube");
			return expand;
		}
		return oFF.QInAExpand._exportExpandSelection(expand, initSettings, provider);
	},
	createExpandSubmit:function(provider, noSubmitMetadata)
	{
			if (noSubmitMetadata)
		{
			return oFF.PrFactory.createString("#");
		}
		let expand = null;
		let initSettings = provider.getInitSettings();
		if (initSettings.isRequestingMinimizedAttributes() || !initSettings.isRequestingDefaultSettings())
		{
			expand = oFF.PrFactory.createList();
			if (initSettings.isRequestingMinimizedAttributes())
			{
				if (provider.getModelCapabilities().supportsDetailedResponseExpansion())
				{
					expand.addString("Cube");
				}
				expand.addString("MinimizedAttributes");
			}
			if (!initSettings.isRequestingDefaultSettings())
			{
				return oFF.QInAExpand._exportExpandSelection(expand, initSettings, provider);
			}
		}
		return expand;
	}
};

oFF.QInAInputEnablementRules = {

	exportInputEnablementRules:function(inaDefinition, provider)
	{
			let inputEnablementRules = provider.getInputEnablementRules();
		if (!provider.getModelCapabilities().supportsInputEnablementFilterSettings())
		{
			return;
		}
		let inputReadinessMainQuery = provider.getInputReadinessMainQuery();
		let cacheMode = provider.getInputReadinessCacheMode();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inputReadinessMainQuery) || oFF.notNull(cacheMode))
		{
			let asyncInputStructure = inaDefinition.putNewStructure("AsyncInputReadiness");
			asyncInputStructure.putStringNotNull("MainQuery", inputReadinessMainQuery);
			asyncInputStructure.putStringNotNull("CacheMode", oFF.QInAConverter.lookupInputEnablementCacheModeInA(cacheMode));
		}
		if (oFF.XCollectionUtils.hasElements(inputEnablementRules))
		{
			let inputEnablementFilter = inaDefinition.putNewStructure("InputEnablementFilter");
			let inaRules = inputEnablementFilter.putNewList("Rules");
			for (let i = 0; i < inputEnablementRules.size(); i++)
			{
				let rule = inputEnablementRules.get(i);
				let ruleStructure = inaRules.addNewStructure();
				ruleStructure.putString("Mode", oFF.QInAConverter.lookupInputEnablementModeInA(rule.getMode()));
				ruleStructure.putString("Reason", rule.getReason());
			}
		}
	}
};

oFF.QInAInputReadinessFilter = {

	exportInputReadinessFilter:function(inaDefinition, provider)
	{
			let inputReadinessFilter = provider.getInputReadinessFilter();
		if (oFF.isNull(inputReadinessFilter) || !provider.getModelCapabilities().supportsInputReadinessFilter())
		{
			return;
		}
		let inaInputReadinessFilter = inaDefinition.putNewStructure("InputReadinessFilter");
		inaInputReadinessFilter.putString("Mode", oFF.QInAConverter.lookupInputReadinessFilterModeInA(inputReadinessFilter.getMode()));
		let states = inputReadinessFilter.getStates();
		if (!states.isEmpty())
		{
			let inaInputReadinessFilterStates = inaInputReadinessFilter.putNewList("InputReadinessStates");
			for (let i = 0; i < states.size(); ++i)
			{
				let state = states.get(i);
				let inaInputReadinessFilterState = inaInputReadinessFilterStates.addNewStructure();
				inaInputReadinessFilterState.putString("Flag", state.getFlag());
				inaInputReadinessFilterState.putString("Parameter", state.getParameter());
			}
		}
	}
};

oFF.QInANewLines = {

	addCellValues:function(newLine, cellValues)
	{
			let newEntries = newLine.getNewLineEntries();
		let newEntriesSize = newEntries.size();
		for (let idxNewEntries = 0; idxNewEntries < newEntriesSize; idxNewEntries++)
		{
			let newEntry = newEntries.get(idxNewEntries);
			if (!newEntry.isValueChanged())
			{
				continue;
			}
			let prNewEntry = oFF.PrFactory.createStructure();
			prNewEntry.putString("QueryDataCell", newEntry.getQueryDataCell().getName());
			let newXValue = newEntry.getNewXValue();
			let newXValueType = newXValue.getValueType();
			if (newXValueType === oFF.XValueType.DOUBLE)
			{
				prNewEntry.putDouble("NewValue", newXValue.getDouble());
			}
			else if (newXValueType === oFF.XValueType.STRING)
			{
				prNewEntry.putString("NewValueExternal", newXValue.getString());
			}
			else
			{
				oFF.noSupport();
			}
			cellValues.add(prNewEntry);
		}
	},
	addDimensionMemberKeys:function(keys, dimensionMembers)
	{
			let dimensionMembersSize = dimensionMembers.size();
		for (let idxDimMember = 0; idxDimMember < dimensionMembersSize; idxDimMember++)
		{
			let dimensionMember = dimensionMembers.get(idxDimMember);
			keys.addString(dimensionMember.getKeyFieldValue().getString());
		}
	},
	exportNewLines:function(inaDefinition, provider)
	{
			let resultSetContainer = provider.getActiveResultSetContainer();
		if (oFF.isNull(resultSetContainer))
		{
			return;
		}
		if (!resultSetContainer.hasNewLineCollection())
		{
			return;
		}
		let newLineCollection = resultSetContainer.getNewLineCollection();
		let validNewLines = newLineCollection.getValidNewLines();
		if (oFF.isNull(validNewLines))
		{
			return;
		}
		if (provider.getSystemType().isTypeOf(oFF.SystemType.BW))
		{
			oFF.QInANewLines.exportNewLinesBw(inaDefinition, validNewLines, provider.getModelCapabilities().supportsSapDate());
		}
		else
		{
			oFF.QInANewLines.exportNewLinesHana(inaDefinition, validNewLines);
		}
	},
	exportNewLinesBw:function(inaDefinition, validNewLines, supportsSapDate)
	{
			let newLines = inaDefinition.putNewList("NewLines");
		for (let i = 0; i < validNewLines.size(); i++)
		{
			let newLineObj = newLines.addNewStructure();
			let contextList = newLineObj.putNewList("DimensionContext");
			let newLine = validNewLines.get(i);
			let dimensionMembers = newLine.getDimensionMembers();
			for (let j = 0; j < dimensionMembers.size(); j++)
			{
				let dimensionMember = dimensionMembers.get(j);
				let keyField = dimensionMember.getKeyFieldValue();
				let contextObj = contextList.addNewStructure();
				contextObj.putString("FieldName", keyField.getField().getName());
				let fieldValueType = keyField.getValueType();
				if (supportsSapDate)
				{
					if (fieldValueType === oFF.XValueType.DATE)
					{
						contextObj.putString("Value", keyField.getDate().toSAPFormat());
					}
					else if (fieldValueType === oFF.XValueType.TIME)
					{
						contextObj.putString("Value", keyField.getTime().toSAPFormat());
					}
					else if (fieldValueType === oFF.XValueType.DATE_TIME)
					{
						contextObj.putString("Value", keyField.getDateTime().toSAPFormat());
					}
					else
					{
						contextObj.putString("Value", keyField.getValue().getStringRepresentation());
					}
				}
				else
				{
					contextObj.putString("Value", keyField.getValue().getStringRepresentation());
				}
			}
			let cellList = newLineObj.putNewList("CellValues");
			for (let k = 0; k < newLine.getNewLineEntries().size(); k++)
			{
				let cellObj = cellList.addNewStructure();
				let entry = newLine.getNewLineEntries().get(k);
				cellObj.putString("QueryCellsId", entry.getQueryDataCell().getName());
				let value = entry.getNewXValue();
				if (value.getValueType() === oFF.XValueType.DOUBLE)
				{
					cellObj.putDouble("Value", value.getDouble());
				}
				else if (value.getValueType() === oFF.XValueType.STRING)
				{
					cellObj.putString("Value", value.getString());
				}
			}
		}
	},
	exportNewLinesHana:function(inaDefinition, validNewLines)
	{
			let newLines = inaDefinition.putNewStructure("DataEntries");
		let dimensionContext = newLines.putNewList("DimensionContext");
		let dimensionMembers = validNewLines.get(0).getDimensionMembers();
		let dimensionMembersSize = dimensionMembers.size();
		for (let idxDimMember = 0; idxDimMember < dimensionMembersSize; idxDimMember++)
		{
			let dimensionMember = dimensionMembers.get(idxDimMember);
			dimensionContext.addString(dimensionMember.getDimension().getName());
		}
		let values = newLines.putNewList("Values");
		let validNewLinesSize = validNewLines.size();
		for (let idxNewLines = 0; idxNewLines < validNewLinesSize; idxNewLines++)
		{
			let prNewLine = values.addNewStructure();
			let newLine = validNewLines.get(idxNewLines);
			prNewLine.putString("Action", "NewLine");
			prNewLine.putInteger("LineId", newLine.getLineId());
			let keys = prNewLine.putNewList("Keys");
			oFF.QInANewLines.addDimensionMemberKeys(keys, newLine.getDimensionMembers());
			let cellValues = prNewLine.putNewList("CellValues");
			oFF.QInANewLines.addCellValues(newLine, cellValues);
		}
	}
};

oFF.QInANewValues = {

	exportNewValues:function(inaDefinition, planningExtension, provider)
	{
			let resultSetContainer = provider.getActiveResultSetContainer();
		if (oFF.isNull(resultSetContainer))
		{
			return;
		}
		if (!resultSetContainer.hasDataEntryCollection())
		{
			return;
		}
		let newValues = oFF.PrFactory.createList();
		let dataEntryCollection = resultSetContainer.getDataEntryCollection();
		oFF.QInANewValues.exportRsDataEntries(newValues, dataEntryCollection, provider);
		oFF.QInANewValues.exportRsDataEntriesViaMember(newValues, dataEntryCollection, provider);
		if (newValues.isEmpty())
		{
			return;
		}
		inaDefinition.put("NewValues", newValues);
		oFF.QInANewValues.exportPublicVersionEdit(planningExtension, provider);
	},
	exportPublicVersionEdit:function(planningExtension, provider)
	{
			if (provider.getPlanningMode() !== oFF.PlanningMode.FORCE_PLANNING)
		{
			return;
		}
		let planningModel = provider.getPlanningModel();
		if (oFF.isNull(planningModel) || !planningModel.supportsPublicVersionEdit() || !planningModel.isPublicVersionEditInProgress())
		{
			return;
		}
		let versionList = planningExtension.putNewList("RefreshVersionStates");
		let versions = planningModel.getVersions();
		let versionsSize = versions.size();
		for (let j = 0; j < versionsSize; j++)
		{
			let version = versions.get(j);
			let sourceVersionName = version.getSourceVersionName();
			if (version.isShowingAsPublicVersion() && oFF.XStringUtils.isNotNullAndNotEmpty(sourceVersionName))
			{
				versionList.addString(sourceVersionName);
				version.setShowingAsPublicVersion(false);
				version.setSourceVersionName(null);
			}
		}
		planningModel.setPublicVersionEditInProgress(false);
	},
	exportRsDataEntries:function(newValues, dataEntryCollection, provider)
	{
			let changedEntries = dataEntryCollection.getChangedDataEntries();
		if (changedEntries.isEmpty())
		{
			return;
		}
		let newValuesImplicitUnlock = provider.getCapabilitiesBase().supportsNewValuesImplicitUnlock();
		let newValuesExtendedFormat = provider.getCapabilitiesBase().supportsNewValuesExtendedFormat();
		let isBW = provider.getSystemType().isTypeOf(oFF.SystemType.BW);
		let isHana = provider.getSystemType().isTypeOf(oFF.SystemType.HANA);
		let changedEntriesSize = changedEntries.size();
		for (let i = 0; i < changedEntriesSize; i++)
		{
			let dataEntry = changedEntries.get(i);
			if (!dataEntry.isNewValueForced() && !dataEntry.isValueChanged() && !dataEntry.isValueLockChanged())
			{
				if (isHana && dataEntry.getPlanningCommand() === null)
				{
					continue;
				}
				else if (isBW && newValuesExtendedFormat)
				{
					continue;
				}
			}
			if (!newValuesExtendedFormat && newValuesImplicitUnlock && !dataEntry.isNewValueForced() && !dataEntry.isValueChanged() && !dataEntry.isValueLocked())
			{
				continue;
			}
			if (isBW && !newValuesExtendedFormat)
			{
				oFF.QInANewValues.exportValuesAbapNotExtended(dataEntry, newValues);
			}
			else if (isHana || isBW && newValuesExtendedFormat)
			{
				oFF.QInANewValues.exportValues(dataEntry, newValues, provider);
			}
		}
	},
	exportRsDataEntriesViaMember:function(newValues, dataEntryCollection, provider)
	{
			let entries = dataEntryCollection.getDataEntriesViaMember();
		if (entries.isEmpty())
		{
			return;
		}
		for (let i = 0; i < entries.size(); i++)
		{
			let entry = entries.get(i);
			let planningCommands = entry.getPlanningCommands();
			let xValue = entry.getXValue();
			let memberContext = entry.getMemberContext();
			let keys = oFF.XList.createWithList(memberContext.getKeysAsReadOnlyList());
			keys.sortByDirection(oFF.XSortDirection.ASCENDING);
			if (!oFF.XCollectionUtils.hasElements(planningCommands))
			{
				oFF.QInANewValues.exportRsValueInfoViaMember(newValues, xValue, keys, memberContext, entry, null, provider);
			}
			else
			{
				for (let pli = 0; pli < planningCommands.size(); pli++)
				{
					oFF.QInANewValues.exportRsValueInfoViaMember(newValues, xValue, keys, memberContext, entry, planningCommands.get(pli), provider);
				}
			}
		}
	},
	exportRsValueInfoViaMember:function(newValues, xValue, keys, memberContext, entry, command, provider)
	{
			let newValue = oFF.PrFactory.createStructure();
		if (xValue.getValueType() === oFF.XValueType.STRING)
		{
			newValue.putString("NewValue", xValue.getString());
		}
		else if (xValue.getValueType() === oFF.XValueType.DOUBLE)
		{
			newValue.putDouble("NewValue", xValue.getDouble());
		}
		else
		{
			return;
		}
		let memberList = newValue.putNewList("Context");
		for (let j = 0; j < keys.size(); j++)
		{
			let dimensionName = keys.get(j);
			let memberName = memberContext.getByKey(dimensionName);
			let correctedAccountDimensionMemberName = provider.getConvenienceCommands().getRuntimeMemberNameByAlias(provider.getQueryModel(), memberName);
			if (oFF.notNull(correctedAccountDimensionMemberName))
			{
				memberName = correctedAccountDimensionMemberName;
			}
			let member = memberList.addNewStructure();
			member.putString("Dimension", dimensionName);
			member.putString("Member", memberName);
		}
		oFF.QInANewValues.exportValueInfo(newValue, entry, command, provider);
		newValues.add(newValue);
	},
	exportValueInfo:function(newValue, dataEntry, command, provider)
	{
			if (dataEntry.isValueLockChanged())
		{
			newValue.putBoolean("LockedCell", dataEntry.isValueLocked());
		}
		if (provider.getCapabilitiesBase().supportsSortNewValues())
		{
			newValue.putInteger("Priority", dataEntry.getPriority());
		}
		oFF.QInAExportUtil.setNameIfNotNull(newValue, "ProcessingType", dataEntry.getProcessingType());
		if (oFF.notNull(command) && command.getCommandType() === oFF.PlanningCommandType.PLANNING_ACTION)
		{
			let action = command;
			newValue.putString("ActionId", action.getActionForQueryIdentifier().getActionId());
			let actionGroup = action.getActionGroup();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(actionGroup))
			{
				newValue.putString("Group", actionGroup);
			}
			let params = oFF.PrFactory.createStructureDeepCopy(action.getActionParameters());
			if (oFF.notNull(params))
			{
				newValue.put("ActionParameters", params);
			}
			if (action.hasTargetCell())
			{
				let targetCoordinates = newValue.putNewList("TargetCoordinates");
				targetCoordinates.addInteger(action.getTargetRow());
				targetCoordinates.addInteger(action.getTargetColumn());
			}
			if (action.getActionForQueryIdentifier().getActionType().isTypeOf(oFF.PlanningActionType.QUERY_SINGLE))
			{
				let targetVersionId = action.getTargetVersionId();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(targetVersionId))
				{
					newValue.putString("TargetVersionId", targetVersionId);
				}
			}
			return action.getActionForQueryIdentifier().getActionType();
		}
		return null;
	},
	exportValues:function(dataEntry, newValues, provider)
	{
			let commands = dataEntry.getPlanningCommands();
		let pat = null;
		if (oFF.XCollectionUtils.hasElements(commands))
		{
			for (let i = 0; i < commands.size(); i++)
			{
				pat = oFF.QInANewValues.exportValuesOfAction(dataEntry, newValues, commands.get(i), provider);
			}
		}
		if (oFF.isNull(pat) || !pat.isTypeOf(oFF.PlanningActionType.DATA_ENTRY) && (dataEntry.isValueChanged() || dataEntry.isNewValueForced()))
		{
			oFF.QInANewValues.exportValuesOfAction(dataEntry, newValues, null, provider);
		}
	},
	exportValuesAbapNotExtended:function(dataEntry, newValues)
	{
			let newValueBW = newValues.addNewList();
		newValueBW.addInteger(dataEntry.getRow() + 1);
		newValueBW.addInteger(dataEntry.getColumn() + 1);
		newValueBW.addDouble(dataEntry.getDouble());
		if (dataEntry.isValueLocked())
		{
			newValueBW.addInteger(1);
		}
		else
		{
			newValueBW.addInteger(0);
		}
	},
	exportValuesOfAction:function(dataEntry, newValues, planningCommand, provider)
	{
			let newValue = newValues.addNewStructure();
		let coordinates = newValue.putNewList("Coordinates");
		coordinates.addInteger(dataEntry.getRow());
		coordinates.addInteger(dataEntry.getColumn());
		let isBW = provider.getSystemType().isTypeOf(oFF.SystemType.BW);
		let isHana = provider.getSystemType().isTypeOf(oFF.SystemType.HANA);
		let actionType = oFF.QInANewValues.exportValueInfo(newValue, dataEntry, planningCommand, provider);
		if ((oFF.isNull(actionType) || actionType.isTypeOf(oFF.PlanningActionType.DATA_ENTRY)) && (dataEntry.isValueChanged() || dataEntry.isNewValueForced()))
		{
			let entryValue = dataEntry.getXValue();
			let entryType = entryValue.getValueType();
			if (entryType.isTypeOf(oFF.XValueType.DECIMAL_FLOAT) && !entryValue.mayLoosePrecision() && isHana)
			{
				newValue.putString("NewValueAsString", entryValue.getStringRepresentation());
			}
			else if (entryType.isTypeOf(oFF.XValueType.DOUBLE))
			{
				newValue.putDouble("NewValue", entryValue.getDouble());
			}
			else if (entryType === oFF.XValueType.STRING)
			{
				if (isHana)
				{
					newValue.putString("NewValueAsString", entryValue.getString());
				}
				else if (isBW)
				{
					newValue.putString("NewValueExternal", entryValue.getString());
				}
			}
			else if ((entryType === oFF.XValueType.DATE || entryType === oFF.XValueType.TIME) && isBW)
			{
				newValue.putString("NewValueExternal", entryValue.toSAPFormat());
			}
			else
			{
				oFF.noSupport();
			}
			if (dataEntry.isNewValueForced() && isHana && !provider.getCapabilitiesBase().supportsSortNewValues())
			{
				newValue.putBoolean("KeepValue", true);
			}
			let dataEntryGroup = dataEntry.getDataEntryGroup();
			if (oFF.isNull(actionType) && oFF.XStringUtils.isNotNullAndNotEmpty(dataEntryGroup))
			{
				newValue.putString("Group", dataEntryGroup);
			}
		}
		return actionType;
	}
};

oFF.QInAOptions = {

	exportOptimizerHints:function(inaDefinition, queryManager)
	{
			let queryModel = queryManager.getQueryModel();
		let supportsCeScenarioParams = queryModel.getModelCapabilities().supportsCeScenarioParams();
		let supportsRri3 = queryModel.getModelCapabilities().supportsRRI3();
		if (supportsCeScenarioParams || supportsRri3)
		{
			let inaOptimizerHints = oFF.PrFactory.createStructure();
			if (supportsCeScenarioParams)
			{
				oFF.QInAOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.CALC_ENGINE);
				oFF.QInAOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.MDS);
				oFF.QInAOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.SQL);
				oFF.QInAOptions.exportOptimizerHintsByEngine(inaOptimizerHints, queryModel, oFF.ExecutionEngine.BW);
			}
			if (supportsRri3)
			{
				oFF.QInAOptions.exportQueryStateHint(inaOptimizerHints, queryManager);
			}
			if (inaOptimizerHints.hasElements())
			{
				inaDefinition.put("Hints", inaOptimizerHints);
			}
		}
	},
	exportOptimizerHintsByEngine:function(inaOptimizerHints, queryModel, engine)
	{
			let optimizerHints = queryModel.getOptimizerHintsByExecutionEngine(engine);
		if (oFF.notNull(optimizerHints) && optimizerHints.hasElements())
		{
			let sortedList = oFF.XList.createWithList(optimizerHints.getKeysAsReadOnlyList());
			sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
			let inaAEngineHints = inaOptimizerHints.putNewList(engine.getName());
			let sortedListSize = sortedList.size();
			for (let i = 0; i < sortedListSize; i++)
			{
				let hintName = sortedList.get(i);
				let inaHint = inaAEngineHints.addNewStructure();
				inaHint.putString("Key", hintName);
				inaHint.putString("Value", optimizerHints.getByKey(hintName));
			}
		}
	},
	exportOptions:function(provider)
	{
			let inaOptions = oFF.PrFactory.createStructure();
		inaOptions.putBoolean("UseDefaultAttributeKey", false);
		let resultSetContainer = provider.getActiveResultSetContainer();
		if (resultSetContainer.getMaxResultRecords() !== -1)
		{
			inaOptions.putLong("MaxResultRecords", resultSetContainer.getMaxResultRecords());
		}
		let dataRefreshEnabled = resultSetContainer.getDataRefreshEnabled();
		if (dataRefreshEnabled === oFF.ActionChoice.ON || dataRefreshEnabled === oFF.ActionChoice.ONCE)
		{
			inaOptions.putBoolean("Refresh", true);
		}
		let hasSchemaAndTable = false;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getResultSetPersistenceTable()))
		{
			inaOptions.putString("ResultSetPersistanceTable", resultSetContainer.getResultSetPersistenceTable());
			if (oFF.XStringUtils.isNotNullAndNotEmpty(resultSetContainer.getResultSetPersistenceSchema()))
			{
				inaOptions.putString("ResultSetPersistanceSchema", resultSetContainer.getResultSetPersistenceSchema());
				hasSchemaAndTable = true;
			}
		}
		if (!resultSetContainer.isResultSetTransportEnabled())
		{
			inaOptions.putBoolean("ReturnEmptyJsonResultSet", true);
		}
		oFF.QInAOptions.exportPaging(inaOptions, provider);
		oFF.QInAOptions.exportSuppressKeyfigureCalculation(inaOptions, provider);
		if (provider.getExecuteRequestOnOldResultSet())
		{
			inaOptions.putBoolean("ExecuteRequestOnOldResultSet", true);
		}
		if (provider.isIncludePerformanceNotDefault())
		{
			inaOptions.putBoolean("IncludePerformanceData", provider.isRequestingPerformanceData());
		}
		let capabilitiesBase = provider.getCapabilitiesBase();
		if (capabilitiesBase.supportsAutoVariableSubmit())
		{
			inaOptions.putBoolean("IgnoreAutoSubmit", !provider.isProcessingAutoSubmit());
		}
		if (capabilitiesBase.supportsExceptionThresholdNoPrec())
		{
			inaOptions.putBoolean("ResultExceptionThresholdNoPrec", true);
		}
		if (capabilitiesBase.supportsDataCellContexts() && provider.getInitSettings().isSkipResultSetGeneration())
		{
			inaOptions.putBoolean("SkipResultSetGeneration", true);
		}
		let queryModel = provider.getQueryModel();
		if (capabilitiesBase.supportsCellDocumentId())
		{
			let documentsIdsRequest = queryModel.getDocumentsIdsRequest();
			if (documentsIdsRequest.getDocumentsIdsScope() !== null && documentsIdsRequest.getDocumentsIdsScope() !== oFF.DocumentsIdsScope.NONE)
			{
				let documentIdsRequest = inaOptions.putNewStructure("DocumentsIdsRequest");
				documentIdsRequest.putStringNotNullAndNotEmpty("DocumentsDirectory", documentsIdsRequest.getDocumentsDirectory());
				documentIdsRequest.putStringNotNullAndNotEmpty("ReturnDocumentsIds", oFF.QInAConverter.lookupDocumentsIdsScopeInA(documentsIdsRequest.getDocumentsIdsScope()));
			}
		}
		if (capabilitiesBase.supportsPagingTupleCountBeforeSlicing())
		{
			inaOptions.putBoolean("TupleCountTotal", queryModel.isReturnTupleCountTotal());
		}
		if (capabilitiesBase.supportsEncodedResultset())
		{
			inaOptions.putString("ResultFormat", "Version2");
			inaOptions.putString("ResultEncoding", "None");
			if (resultSetContainer.getResultSetPersistenceIdentifier() !== null)
			{
				let isBlendingSubQuery = !resultSetContainer.isRemotePreQuery();
				if (isBlendingSubQuery)
				{
					inaOptions.putBoolean("IsCubeBlendingSubquery", true);
				}
				if (hasSchemaAndTable)
				{
					inaOptions.putString("ResultSetPersistanceIdentifier", resultSetContainer.getResultSetPersistenceIdentifier());
					inaOptions.putString("ResultFormat", "SerializedData");
				}
				else if (oFF.QInAOptions.isCubeCacheQuery(queryModel))
				{
					inaOptions.putString("ResultSetPersistanceIdentifier", resultSetContainer.getResultSetPersistenceIdentifier());
				}
				else
				{
					inaOptions.putString("ResultFormat", "SerializedData");
				}
				if (provider.getSystemType().isTypeOf(oFF.SystemType.BW))
				{
					if (isBlendingSubQuery && provider.getResultSetPersistenceType() === oFF.BlendingPersistenceType.VIEW)
					{
						inaOptions.putString("ResultSetPersistanceType", "View");
					}
					else if (isBlendingSubQuery && provider.getResultSetPersistenceType() === oFF.BlendingPersistenceType.CUBE)
					{
						inaOptions.putString("ResultSetPersistanceType", "Cube");
					}
				}
			}
		}
		if (oFF.notNull(queryModel) && capabilitiesBase.supportsKeepOriginalTexts())
		{
			inaOptions.putBoolean("ResultKeepOriginalTexts", queryModel.isKeepingOriginalTexts());
		}
		if (resultSetContainer.getSuppressCalculatedMembersWithoutBookedData() !== -1)
		{
			inaOptions.putInteger("SuppressCalculatedMembersWithoutBookedData", resultSetContainer.getSuppressCalculatedMembersWithoutBookedData());
		}
		if (capabilitiesBase.supportsResultSetCache() && provider.getInitSettings().usesResultSetCache())
		{
			inaOptions.putBoolean("UseResultSetCache", true);
		}
		return inaOptions;
	},
	exportPaging:function(inaOptions, provider)
	{
			let resultSetContainer = provider.getActiveResultSetContainer();
		let subSetDescription = inaOptions.putNewStructure("SubSetDescription");
		let maxRows = resultSetContainer.getMaxRows();
		let offsetRows = resultSetContainer.getOffsetRows();
		subSetDescription.putInteger("RowFrom", offsetRows);
		if (maxRows === -1)
		{
			subSetDescription.putInteger("RowTo", -1);
		}
		else
		{
			subSetDescription.putInteger("RowTo", offsetRows + maxRows);
		}
		let maxColumns = resultSetContainer.getMaxColumns();
		let offsetColumns = resultSetContainer.getOffsetColumns();
		subSetDescription.putInteger("ColumnFrom", offsetColumns);
		if (maxColumns === -1)
		{
			subSetDescription.putInteger("ColumnTo", -1);
		}
		else
		{
			subSetDescription.putInteger("ColumnTo", offsetColumns + maxColumns);
		}
	},
	exportQueryStateHint:function(inaOptimizerHints, queryManager)
	{
			if (queryManager.getModelCapabilities().supportsRRI3())
		{
			let structure;
			if (inaOptimizerHints.getListByKey("BW") !== null && inaOptimizerHints.getListByKey("BW").hasElements())
			{
				structure = inaOptimizerHints.getListByKey("BW").addNewStructure();
			}
			else
			{
				structure = inaOptimizerHints.putNewList("BW").addNewStructure();
			}
			structure.putString("Key", "ModelState");
			structure.putString("Value", oFF.XInteger.convertToString(queryManager.getAndUseResultsetStateId()));
		}
	},
	exportReturnedDataSelections:function(inaOptions, provider)
	{
			let queryModel = provider.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			let returnedAxisProperties = provider.getModelCapabilities().supportsUniqueAxisProperties() ? queryModel.getReturnedUniqueAxisProperties() : null;
			let rowProperties = oFF.isNull(returnedAxisProperties) ? null : returnedAxisProperties.getEffectiveRowProperties();
			let columnProperties = oFF.isNull(returnedAxisProperties) ? null : returnedAxisProperties.getEffectiveColumnProperties();
			let hasRowProperties = oFF.XCollectionUtils.hasElements(rowProperties);
			let hasColumnProperties = oFF.XCollectionUtils.hasElements(columnProperties);
			if (provider.supportsReturnedDataSelection() || hasRowProperties || hasColumnProperties)
			{
				let inaReturnedDataSelection = inaOptions.putNewStructure("ReturnedDataSelection");
				if (provider.supportsReturnedDataSelection())
				{
					let allReturnedDataSelections = queryModel.getAllReturnedDataSelections();
					let keysAsIterator = allReturnedDataSelections.getKeysAsIterator();
					while (keysAsIterator.hasNext())
					{
						let retDataSel = keysAsIterator.next();
						let activationValue = allReturnedDataSelections.getByKey(retDataSel).getBoolean();
						if (retDataSel === oFF.ReturnedDataSelection.ACTIONS && provider.getModelCapabilities().supportsNoDataActions())
						{
							continue;
						}
						if (provider.getSession().hasFeature(oFF.FeatureToggleOlap.EPM_SUPPRESS_PLANNING_ACTIVATION_BY_DEFAULT) && retDataSel === oFF.ReturnedDataSelection.INPUT_READINESS_STATES && !queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP) && queryModel.getPlanningMode() === oFF.PlanningMode.DISABLE_PLANNING)
						{
							activationValue = false;
						}
						inaReturnedDataSelection.putBoolean(oFF.QInAConverter.lookupReturnedDataSelectionInA(retDataSel), activationValue);
					}
				}
				if (hasRowProperties || hasColumnProperties)
				{
					let inaUniqueAxisProperties = inaReturnedDataSelection.putNewStructure("UniqueAxisProperties");
					if (hasRowProperties)
					{
						let rowStructure = inaUniqueAxisProperties.putNewStructure("Rows");
						oFF.XCollectionUtils.forEach(rowProperties.getKeysAsReadOnlyList(), (rp) => {
							rowStructure.putBoolean(oFF.QInAConverter.lookupUniqueAxisPropertyInA(rp), rowProperties.getByKey(rp).getBoolean());
						});
					}
					if (hasColumnProperties)
					{
						let columnStructure = inaUniqueAxisProperties.putNewStructure("Columns");
						oFF.XCollectionUtils.forEach(columnProperties.getKeysAsReadOnlyList(), (cp) => {
							columnStructure.putBoolean(oFF.QInAConverter.lookupUniqueAxisPropertyInA(cp), columnProperties.getByKey(cp).getBoolean());
						});
					}
				}
			}
		}
	},
	exportSuppressKeyfigureCalculation:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions) && oFF.notNull(provider) && provider.isKeyfigureCalculationSuppressed())
		{
			inaOptions.putBoolean("SuppressKeyfigureCalculation", true);
		}
	},
	fillOptions:function(requestStructure, capabilities, session, initSettings)
	{
			let options = oFF.PrFactory.createList();
		if (capabilities.supportsServerState())
		{
			options.addString("StatefulServer");
		}
		if (initSettings.isLightweight() && capabilities.supportsLightweightMetadata() && !capabilities.supportsMetadataResultFormatOptions())
		{
			options.addString("Lightweight");
		}
		let serverCustomizations = initSettings.getServerCustomizations();
		options.addAllStrings(serverCustomizations.getValuesAsReadOnlyList());
		if (session.hasFeature(oFF.FeatureToggleOlap.NO_EMPTY_OPTIONS) === false || options.hasElements())
		{
			requestStructure.put("Options", options);
		}
	},
	getPagingSetter:function(provider)
	{
			let pagingSetter = provider;
		if (provider.isShallow())
		{
			pagingSetter = provider.getActiveResultSetContainer();
		}
		return pagingSetter;
	},
	importOptimizerHints:function(inaDefinition, provider)
	{
			if (provider.getModelCapabilities().supportsCeScenarioParams())
		{
			provider.getQueryModel().clearAllOptimizerHints();
			let inaOptimizerHints = inaDefinition.getStructureByKey("Hints");
			if (oFF.notNull(inaOptimizerHints))
			{
				oFF.QInAOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.CALC_ENGINE, provider);
				oFF.QInAOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.MDS, provider);
				oFF.QInAOptions.importOptimizerHintsByEngine(inaOptimizerHints, oFF.ExecutionEngine.SQL, provider);
			}
		}
	},
	importOptimizerHintsByEngine:function(inaOptimizerHints, engine, provider)
	{
			let queryModel = provider.getQueryModel();
		let listByEngine = inaOptimizerHints.getListByKey(engine.getName());
		if (oFF.notNull(listByEngine))
		{
			let numberOfHints = listByEngine.size();
			for (let i = 0; i < numberOfHints; i++)
			{
				let hintElement = listByEngine.getStructureAt(i);
				let key = hintElement.getStringByKey("Key");
				let value = hintElement.getStringByKey("Value");
				queryModel.addOptimizerHint(engine, key, value);
			}
		}
	},
	importPaging:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions))
		{
			let inaSubset = inaOptions.getStructureByKey("SubSetDescription");
			if (oFF.isNull(inaSubset) || !provider.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) && !provider.isApplyingRepoState())
			{
				return;
			}
			let offsetRows = inaSubset.getIntegerByKey("RowFrom");
			let pagingSetter = oFF.QInAOptions.getPagingSetter(provider);
			if (offsetRows > -1)
			{
				pagingSetter.setOffsetRows(offsetRows);
				pagingSetter.setMaxRows(inaSubset.getIntegerByKey("RowTo") - offsetRows);
			}
			else
			{
				pagingSetter.setMaxRows(inaSubset.getIntegerByKey("RowTo"));
			}
			let offsetCols = inaSubset.getIntegerByKey("ColumnFrom");
			if (offsetCols > -1)
			{
				pagingSetter.setOffsetColumns(offsetCols);
				pagingSetter.setMaxColumns(inaSubset.getIntegerByKey("ColumnTo") - offsetCols);
			}
			else
			{
				pagingSetter.setMaxColumns(inaSubset.getIntegerByKey("ColumnTo"));
			}
		}
	},
	importReturnedDataSelections:function(isMetadataImport, inaResultStructureFeature, provider)
	{
			if (oFF.notNull(inaResultStructureFeature))
		{
			if (oFF.notNull(provider) && provider.supportsReturnedDataSelection())
			{
				let inaReturnedDataSelection = inaResultStructureFeature.getStructureByKey("ReturnedDataSelection");
				if (oFF.notNull(inaReturnedDataSelection) && inaReturnedDataSelection.hasElements())
				{
					let inaElementNames = inaReturnedDataSelection.getKeysAsReadOnlyList();
					let size = inaElementNames.size();
					let cellExplainDefaultChange = provider.getSession().hasFeature(oFF.FeatureToggleOlap.RETURNED_DATA_SELECTION_SWITCHOFF_CELLEXPLAIN);
					for (let i = 0; i < size; i++)
					{
						let dataSelection = oFF.QInAConverter.lookupReturnedDataSelection(inaElementNames.get(i));
						if (oFF.notNull(dataSelection))
						{
							let queryModel = provider.getQueryModel();
							if (dataSelection === oFF.ReturnedDataSelection.TUPLE_ELEMENT_IDS)
							{
								queryModel.toggleReturnedDataSelection(dataSelection, true);
								continue;
							}
							if (cellExplainDefaultChange && dataSelection === oFF.ReturnedDataSelection.CELL_EXPLAIN && isMetadataImport)
							{
								queryModel.toggleReturnedDataSelection(dataSelection, false);
								continue;
							}
							queryModel.toggleReturnedDataSelection(dataSelection, inaReturnedDataSelection.getBooleanByKeyExt(dataSelection.getName(), false));
						}
					}
				}
			}
		}
	},
	importSuppressKeyfigureCalculation:function(inaOptions, provider)
	{
			if (oFF.notNull(inaOptions) && oFF.notNull(provider) && inaOptions.containsKey("SuppressKeyfigureCalculation"))
		{
			oFF.QInAOptions.getPagingSetter(provider).setSuppressKeyfigureCalculation(inaOptions.getBooleanByKeyExt("SuppressKeyfigureCalculation", false));
		}
	},
	isCubeCacheQuery:function(queryModel)
	{
			let hints = queryModel.getOptimizerHintsByExecutionEngine(oFF.ExecutionEngine.MDS);
		return oFF.notNull(hints) && hints.containsKey(oFF.OptimizerHint.CUBE_CACHE_WITH_ID.getName());
	},
	setLanguage:function(requestStructure, provider)
	{
			let language = provider.getConnection().getSystemDescription().getLanguage();
		if (oFF.XStringUtils.isNullOrEmpty(language))
		{
			let userProfile = provider.getProcess().getUserProfile();
			if (oFF.notNull(userProfile))
			{
				language = userProfile.getDataAccessLanguage();
			}
		}
		requestStructure.putStringNotNullAndNotEmpty("Language", oFF.XString.toUpperCase(language));
	},
	setRequestTimeZone:function(requestStructure, provider)
	{
			if (oFF.notNull(requestStructure) && provider.getModelCapabilities().supportsRequestTimezone())
		{
			requestStructure.putStringNotNullAndNotEmpty("Timezone", provider.getQueryServiceConfig().getRequestTimeZone());
		}
	}
};

oFF.QInAVariableVariants = {

	exportVariableVariant:function(inaDefinition, variant)
	{
			if (oFF.notNull(variant))
		{
			let inaVariableVariant = inaDefinition.putNewStructure("VariableVariant");
			inaVariableVariant.putStringNotNullAndNotEmpty("Name", variant.getName());
			inaVariableVariant.putString("Description", variant.getText());
			inaVariableVariant.putString("Scope", variant.getScope().getName());
		}
	}
};

oFF.QInAVersion = {

	exportPlanningVersionAliases:function(planningExtension, provider)
	{
			let versionAliases = provider.getVersionAliases();
		if (!oFF.XCollectionUtils.hasElements(versionAliases))
		{
			return;
		}
		let aliasMapping = planningExtension.putNewList("AliasMapping");
		let keys = versionAliases.getKeysAsReadOnlyList();
		keys.sortByDirection(oFF.XSortDirection.ASCENDING);
		let len = keys.size();
		for (let i = 0; i < len; i++)
		{
			let aliasName = keys.get(i);
			let versionName = versionAliases.getByKey(aliasName);
			let mapping = oFF.PrFactory.createStructure();
			mapping.putString("Alias", aliasName);
			mapping.putString("Version", versionName);
			aliasMapping.add(mapping);
		}
	},
	exportPlanningVersionRestriction:function(planningExtension, provider)
	{
			let versionRestriction = oFF.QInAVersion.getPlanningVersionRestrictionEffective(provider);
		if (versionRestriction === oFF.PlanningVersionRestrictionType.SERVER_DEFAULT)
		{
			return;
		}
		if (versionRestriction === oFF.PlanningVersionRestrictionType.CONSTRAIN_PRIVATE_VERSIONS)
		{
			planningExtension.putBoolean("ConstrainPrivateVersions", true);
		}
		else if (versionRestriction === oFF.PlanningVersionRestrictionType.ONLY_PRIVATE_VERSIONS)
		{
			planningExtension.putBoolean("RestrictToPrivateVersions", true);
		}
		else if (versionRestriction === oFF.PlanningVersionRestrictionType.NONE)
		{
			planningExtension.putBoolean("RestrictToPrivateVersions", false);
		}
	},
	exportPlanningVersionSettings:function(planningExtension, provider)
	{
			let allVersionSettings = oFF.QInAVersion.getAllPlanningActionSequenceSettingsEffective(provider);
		if (oFF.isNull(allVersionSettings))
		{
			return;
		}
		let versionsList = null;
		let versionRestriction = oFF.QInAVersion.getPlanningVersionRestrictionEffective(provider);
		let allVersionSettingsSize = allVersionSettings.size();
		for (let i = 0; i < allVersionSettingsSize; i++)
		{
			let sequenceSettings = allVersionSettings.get(i);
			let hasActionSequence = sequenceSettings.getActionSequenceId() !== null;
			if (!hasActionSequence)
			{
				if (!versionRestriction.isExplicitlyRestricted())
				{
					continue;
				}
				if (!sequenceSettings.getIsRestrictionEnabled())
				{
					continue;
				}
			}
			if (oFF.isNull(versionsList))
			{
				versionsList = planningExtension.putNewList("Versions");
			}
			let versionStructure = versionsList.addNewStructure();
			versionStructure.putBoolean("UseExternalView", sequenceSettings.getUseExternalView());
			let versionId = sequenceSettings.getVersionId();
			if (versionId === -1)
			{
				versionStructure.putString("Version", sequenceSettings.getVersionUniqueName());
			}
			else
			{
				versionStructure.putInteger("Version", versionId);
			}
			if (hasActionSequence)
			{
				versionStructure.putString("SequenceId", sequenceSettings.getActionSequenceId());
			}
			if (sequenceSettings.isSharedVersion())
			{
				versionStructure.putString("Owner", sequenceSettings.getVersionOwner());
			}
		}
	},
	exportPlanningVersions:function(planningExtension, provider)
	{
			oFF.QInAVersion.exportPlanningVersionRestriction(planningExtension, provider);
		oFF.QInAVersion.exportPlanningVersionSettings(planningExtension, provider);
		oFF.QInAVersion.exportPlanningVersionAliases(planningExtension, provider);
	},
	getAllPlanningActionSequenceSettingsEffective:function(provider)
	{
			let settingsMode = oFF.QInAVersion.getPlanningActionSequenceSettingsModeEffective(provider);
		if (oFF.isNull(settingsMode))
		{
			return null;
		}
		let allSettings = null;
		if (settingsMode === oFF.PlanningVersionSettingsMode.PLANNING_SERVICE)
		{
			let planningService = oFF.PlanningModelUtil.getPlanningServiceFromQueryDataSource(provider.getApplication(), provider.getSystemName(), provider.getDataSource());
			if (oFF.notNull(planningService))
			{
				let planningModel = planningService.getPlanningContext();
				let allVersions = planningModel.getAllVersions();
				if (oFF.XCollectionUtils.hasElements(allVersions))
				{
					let versionsSettings = oFF.XList.create();
					let allVersionsSize = allVersions.size();
					for (let i = 0; i < allVersionsSize; i++)
					{
						let version = allVersions.get(i);
						versionsSettings.add(version);
					}
					allSettings = versionsSettings;
				}
			}
		}
		else if (settingsMode === oFF.PlanningVersionSettingsMode.QUERY_SERVICE)
		{
			allSettings = provider.getAllPlanningVersionSettings();
		}
		if (!oFF.XCollectionUtils.hasElements(allSettings))
		{
			return null;
		}
		let settingsMap = oFF.XHashMapByString.create();
		let allSettingsSize = allSettings.size();
		for (let j = 0; j < allSettingsSize; j++)
		{
			let settings = allSettings.get(j);
			settingsMap.put(settings.getVersionUniqueName(), settings.createVersionSettings());
		}
		if (!oFF.XCollectionUtils.hasElements(settingsMap))
		{
			return null;
		}
		let keys = oFF.XList.createWithList(settingsMap.getKeysAsReadOnlyList());
		keys.sortByDirection(oFF.XSortDirection.ASCENDING);
		let result = oFF.XList.create();
		let keysSize = keys.size();
		for (let k = 0; k < keysSize; k++)
		{
			result.add(settingsMap.getByKey(keys.get(k)));
		}
		return result;
	},
	getPlanningActionSequenceSettingsModeEffective:function(provider)
	{
			if (!provider.isDataEntryEnabled())
		{
			return null;
		}
		let currentSystemtype = provider.getSystemType();
		if (!currentSystemtype.isTypeOf(oFF.SystemType.HANA))
		{
			return null;
		}
		let settingsMode = provider.getPlanningVersionSettingsMode();
		if (settingsMode === oFF.PlanningVersionSettingsMode.SERVER_DEFAULT)
		{
			return null;
		}
		return settingsMode;
	},
	getPlanningVersionRestrictionEffective:function(provider)
	{
			if (!provider.isDataEntryEnabled())
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		let currentSystemtype = provider.getSystemType();
		if (!currentSystemtype.isTypeOf(oFF.SystemType.HANA))
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		let settingsMode = provider.getPlanningVersionSettingsMode();
		if (settingsMode === oFF.PlanningVersionSettingsMode.SERVER_DEFAULT)
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		let planningRestriction = provider.getPlanningRestriction();
		if (oFF.isNull(planningRestriction))
		{
			return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
		}
		return planningRestriction;
	}
};

oFF.PlanningStateHandler = {

	s_planningStateUpdater:null,
	getDataAreaStateByName:function(application, systemName, dataArea)
	{
			return oFF.PlanningStateHandler.s_planningStateUpdater.getDataAreaStateByName(application, systemName, dataArea);
	},
	setInstance:function(planningStateUpdater)
	{
			oFF.PlanningStateHandler.s_planningStateUpdater = planningStateUpdater;
	},
	update:function(application, systemName, response, messageCollector)
	{
			oFF.PlanningStateHandler.s_planningStateUpdater.update(application, systemName, response, messageCollector);
	},
	updateFromResponse:function(application, systemName, request, response, messageCollector)
	{
			oFF.PlanningStateHandler.s_planningStateUpdater.updateFromResponse(application, systemName, request, response, messageCollector);
	}
};

oFF.PlanningStateHandlerDummyImpl = function() {};
oFF.PlanningStateHandlerDummyImpl.prototype = new oFF.XObject();
oFF.PlanningStateHandlerDummyImpl.prototype._ff_c = "PlanningStateHandlerDummyImpl";

oFF.PlanningStateHandlerDummyImpl.prototype.getDataAreaStateByName = function(application, systemName, dataArea)
{
	return null;
};
oFF.PlanningStateHandlerDummyImpl.prototype.update = function(application, systemName, response, messageCollector)
{
	return;
};
oFF.PlanningStateHandlerDummyImpl.prototype.updateFromResponse = function(application, systemName, request, response, messageCollector)
{
	return;
};

oFF.InADimensionLazyLoader = function() {};
oFF.InADimensionLazyLoader.prototype = new oFF.XObject();
oFF.InADimensionLazyLoader.prototype._ff_c = "InADimensionLazyLoader";

oFF.InADimensionLazyLoader.createLazyLoader = function(queryModel, useDesignTimeMetadata)
{
	let obj = new oFF.InADimensionLazyLoader();
	obj.setupExt(queryModel, useDesignTimeMetadata);
	return obj;
};
oFF.InADimensionLazyLoader.prototype.m_importer = null;
oFF.InADimensionLazyLoader.prototype.m_queryModel = null;
oFF.InADimensionLazyLoader.prototype.m_useDesignTimeMetadata = false;
oFF.InADimensionLazyLoader.prototype.copyDimensionLazyLoader = function(queryModel)
{
	return oFF.InADimensionLazyLoader.createLazyLoader(queryModel, this.m_useDesignTimeMetadata);
};
oFF.InADimensionLazyLoader.prototype.getInaDimension = function(dimensionName)
{
	let result = null;
	let queryMetadata;
	if (this.m_useDesignTimeMetadata)
	{
		queryMetadata = this.m_queryModel.getServerBaseSerializationForBaseState();
	}
	else
	{
		queryMetadata = this.m_queryModel.getServerBaseSerialization();
	}
	if (oFF.isNull(queryMetadata))
	{
		queryMetadata = this.m_queryModel.getMetadata();
	}
	if (oFF.notNull(queryMetadata))
	{
		let inaDims = queryMetadata.getListByKey("Dimensions");
		let len = inaDims.size();
		for (let i = 0; i < len; i++)
		{
			let inaDim = inaDims.getStructureAt(i);
			let name = inaDim.getStringByKey("Name");
			if (oFF.XString.isEqual(name, dimensionName))
			{
				result = inaDim;
				break;
			}
		}
	}
	return result;
};
oFF.InADimensionLazyLoader.prototype.hasFieldWithName = function(dimensionName, fieldName)
{
	let inaDim = this.getInaDimension(dimensionName);
	return oFF.notNull(inaDim) && this.hasFieldWithProperty(inaDim, "Name", fieldName);
};
oFF.InADimensionLazyLoader.prototype.hasFieldWithNameOrAlias = function(dimensionName, fieldNameOrAlias)
{
	let hasFieldWithNameOrAlias = false;
	let inaDim = this.getInaDimension(dimensionName);
	if (oFF.notNull(inaDim))
	{
		if (this.hasFieldWithProperty(inaDim, "Name", fieldNameOrAlias))
		{
			hasFieldWithNameOrAlias = true;
		}
		else
		{
			hasFieldWithNameOrAlias = this.hasFieldWithProperty(inaDim, "AliasName", fieldNameOrAlias);
		}
	}
	return hasFieldWithNameOrAlias;
};
oFF.InADimensionLazyLoader.prototype.hasFieldWithProperty = function(inaDim, propertyName, propertyValue)
{
	let inaAttributes = inaDim.getListByKey("Attributes");
	if (oFF.isNull(inaAttributes))
	{
		inaAttributes = inaDim.getListByKey("AttributesMd");
	}
	return oFF.PrUtils.getStructureWithKeyValuePair(inaAttributes, propertyName, propertyValue) !== null;
};
oFF.InADimensionLazyLoader.prototype.isUseDesignTimeMetadata = function()
{
	return this.m_useDesignTimeMetadata;
};
oFF.InADimensionLazyLoader.prototype.lazyLoadDimension = function(dimensionName)
{
	let dim = null;
	let inaDim = this.getInaDimension(dimensionName);
	if (oFF.notNull(inaDim))
	{
		dim = this.m_importer.importDimension(inaDim, this.m_queryModel);
	}
	return dim;
};
oFF.InADimensionLazyLoader.prototype.releaseObject = function()
{
	this.m_queryModel = null;
	this.m_importer = oFF.XObjectExt.release(this.m_importer);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.InADimensionLazyLoader.prototype.setUseDesignTimeMetadata = function(useDesignTimeMetadata)
{
	this.m_useDesignTimeMetadata = useDesignTimeMetadata;
};
oFF.InADimensionLazyLoader.prototype.setupExt = function(queryModel, useDesignTimeMetadata)
{
	this.m_queryModel = queryModel;
	this.m_useDesignTimeMetadata = useDesignTimeMetadata;
	this.m_importer = oFF.QInAImportFactory.createWithQueryManagerCapabilities(queryModel.getApplication(), oFF.QModelFormat.INA_METADATA, queryModel.getQueryManager());
};

oFF.DfDocumentsStoreServiceFactoryImpl = function() {};
oFF.DfDocumentsStoreServiceFactoryImpl.prototype = new oFF.XObject();
oFF.DfDocumentsStoreServiceFactoryImpl.prototype._ff_c = "DfDocumentsStoreServiceFactoryImpl";

oFF.DfDocumentsStoreServiceFactoryImpl.createFactory = function()
{
	return new oFF.DfDocumentsStoreServiceFactoryImpl();
};
oFF.DfDocumentsStoreServiceFactoryImpl.prototype.newDocumentStore = function(queryManager, withVersions, dataArea)
{
	let documentsInfo = queryManager.getQueryModel().getDocumentsInfo();
	let instanceId = queryManager.getQueryModel().getDataSource().getInstanceId();
	let service = null;
	if (queryManager.getModelCapabilities().supportsCellDocumentId() && oFF.notNull(documentsInfo) && documentsInfo.getSupportsDocuments() !== oFF.DocumentsSupportType.NONE)
	{
		service = oFF.DfDocumentsStoreService.createDocumentStoreService(documentsInfo, withVersions, dataArea, instanceId);
	}
	return service;
};
oFF.DfDocumentsStoreServiceFactoryImpl.prototype.newDocumentStoreForShallowQueryManager = function(queryManager, instanceId, rsDocumentServicePath, withVersions, dataArea)
{
	return oFF.DfDocumentsStoreService.createDocumentStoreServiceShallow(queryManager, rsDocumentServicePath, withVersions, dataArea, instanceId);
};

oFF.InAQMgrMergeSettings = function() {};
oFF.InAQMgrMergeSettings.prototype = new oFF.XObject();
oFF.InAQMgrMergeSettings.prototype._ff_c = "InAQMgrMergeSettings";

oFF.InAQMgrMergeSettings.create = function(isInitialBWMerge)
{
	let newObj = new oFF.InAQMgrMergeSettings();
	newObj.m_isInitialBWMerge = isInitialBWMerge;
	return newObj;
};
oFF.InAQMgrMergeSettings.prototype.m_isInitialBWMerge = false;
oFF.InAQMgrMergeSettings.prototype.isInitialBWMerge = function()
{
	return this.m_isInitialBWMerge;
};

oFF.InARsEncodedValues = function() {};
oFF.InARsEncodedValues.prototype = new oFF.XObject();
oFF.InARsEncodedValues.prototype._ff_c = "InARsEncodedValues";

oFF.InARsEncodedValues.create = function(encoding, values)
{
	let object = new oFF.InARsEncodedValues();
	object.setupExt(encoding, values);
	return object;
};
oFF.InARsEncodedValues.createByStructure = function(inaValueElement)
{
	let inaEncoding = inaValueElement.getStringByKey("Encoding");
	let encoding = oFF.QInAConverter.lookupEncoding(inaEncoding);
	let inaValues = inaValueElement.getListByKey("Values");
	return oFF.InARsEncodedValues.create(encoding, inaValues);
};
oFF.InARsEncodedValues.prototype.m_backwardIndexingPosition = 0;
oFF.InARsEncodedValues.prototype.m_backwardIntegerIndex = null;
oFF.InARsEncodedValues.prototype.m_index = 0;
oFF.InARsEncodedValues.prototype.m_size = 0;
oFF.InARsEncodedValues.prototype.m_values = null;
oFF.InARsEncodedValues.prototype.cloneExt = function(flags)
{
	return oFF.InARsEncodedValues.create(oFF.ResultSetEncoding.NONE, this.m_values.getPermaCopy());
};
oFF.InARsEncodedValues.prototype.getIndexForIntegerValue = function(value)
{
	let resultIndex = value;
	if (value > -1)
	{
		resultIndex = this.lookupIntegerAndLazilyCreateIndex(value);
	}
	return resultIndex;
};
oFF.InARsEncodedValues.prototype.getNextDoubleValue = function()
{
	this.m_index++;
	return this.m_values.getDoubleAt(this.m_index);
};
oFF.InARsEncodedValues.prototype.getNextIntegerValue = function()
{
	this.m_index++;
	return this.m_values.getIntegerAt(this.m_index);
};
oFF.InARsEncodedValues.prototype.getNextStringValue = function()
{
	this.m_index++;
	return this.m_values.getStringAt(this.m_index);
};
oFF.InARsEncodedValues.prototype.hasNextValue = function()
{
	return this.m_index + 1 < this.m_size;
};
oFF.InARsEncodedValues.prototype.lookupIntegerAndLazilyCreateIndex = function(value)
{
	if (oFF.isNull(this.m_backwardIntegerIndex))
	{
		this.m_backwardIntegerIndex = oFF.XHashMapByString.create();
		this.m_backwardIndexingPosition = -1;
	}
	let resultInteger = value;
	let result = this.m_backwardIntegerIndex.getByKey(oFF.XInteger.convertToString(value));
	if (oFF.notNull(result))
	{
		resultInteger = result.getInteger();
	}
	else
	{
		let size = this.m_values.size();
		let oldInteger = -1000;
		this.m_backwardIndexingPosition++;
		for (; this.m_backwardIndexingPosition < size; this.m_backwardIndexingPosition++)
		{
			if (this.m_values.getElementTypeAt(this.m_backwardIndexingPosition).isNumber())
			{
				let newInteger = this.m_values.getIntegerAt(this.m_backwardIndexingPosition);
				if (newInteger === oldInteger)
				{
					continue;
				}
				oldInteger = newInteger;
				let integerString = oFF.XInteger.convertToString(newInteger);
				if (!this.m_backwardIntegerIndex.containsKey(integerString))
				{
					this.m_backwardIntegerIndex.put(integerString, oFF.XIntegerValue.create(this.m_backwardIndexingPosition));
				}
				if (newInteger === value)
				{
					resultInteger = this.m_backwardIndexingPosition;
					break;
				}
			}
		}
		if (this.m_backwardIndexingPosition === size)
		{
			oFF.XLogger.println(oFF.XStringUtils.concatenate3("WARNING: Invalid hierarchy: parent index ", oFF.XInteger.convertToString(value), " refers to non-existing value."));
		}
	}
	return resultInteger;
};
oFF.InARsEncodedValues.prototype.releaseObject = function()
{
	this.m_values = null;
	this.m_backwardIntegerIndex = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_backwardIntegerIndex);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.InARsEncodedValues.prototype.resetCursor = function()
{
	this.m_index = -1;
};
oFF.InARsEncodedValues.prototype.setupExt = function(encoding, values)
{
	this.m_values = values;
	this.m_index = -1;
	if (encoding !== oFF.ResultSetEncoding.NONE)
	{
		throw oFF.XException.createIllegalStateException("Wrong or no encoding given");
	}
	this.m_size = values.size();
};
oFF.InARsEncodedValues.prototype.size = function()
{
	return this.m_size;
};
oFF.InARsEncodedValues.prototype.skip = function()
{
	this.m_index++;
};
oFF.InARsEncodedValues.prototype.skipBack = function()
{
	this.m_index--;
};

oFF.MeasureValueHelpRsDataCellProvider = function() {};
oFF.MeasureValueHelpRsDataCellProvider.prototype = new oFF.XObject();
oFF.MeasureValueHelpRsDataCellProvider.prototype._ff_c = "MeasureValueHelpRsDataCellProvider";

oFF.MeasureValueHelpRsDataCellProvider.create = function()
{
	return new oFF.MeasureValueHelpRsDataCellProvider();
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.getAllAvailableDocumentIds = function()
{
	return null;
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.getAvailableDataCellColumns = function()
{
	return 0;
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.getAvailableDataCellCount = function()
{
	return 0;
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.getAvailableDataCellRows = function()
{
	return 0;
};
oFF.MeasureValueHelpRsDataCellProvider.prototype.notifyCursorChange = function(cell, x, y) {};

oFF.RsDrillGroupDimension = function() {};
oFF.RsDrillGroupDimension.prototype = new oFF.XObject();
oFF.RsDrillGroupDimension.prototype._ff_c = "RsDrillGroupDimension";

oFF.RsDrillGroupDimension.create = function(dimensionName, description, dimensionType)
{
	let dimension = new oFF.RsDrillGroupDimension();
	dimension.setupProperties(dimensionName, description, dimensionType);
	return dimension;
};
oFF.RsDrillGroupDimension.prototype.m_description = null;
oFF.RsDrillGroupDimension.prototype.m_dimensionName = null;
oFF.RsDrillGroupDimension.prototype.m_dimensionType = null;
oFF.RsDrillGroupDimension.prototype.cloneExt = function(flags)
{
	return oFF.RsDrillGroupDimension.create(this.m_dimensionName, this.m_description, this.m_dimensionType);
};
oFF.RsDrillGroupDimension.prototype.getDescription = function()
{
	return this.m_description;
};
oFF.RsDrillGroupDimension.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.RsDrillGroupDimension.prototype.getDimensionType = function()
{
	return this.m_dimensionType;
};
oFF.RsDrillGroupDimension.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_dimensionName = null;
	this.m_description = null;
	this.m_dimensionType = null;
};
oFF.RsDrillGroupDimension.prototype.setupProperties = function(dimensionName, description, dimensionType)
{
	this.m_dimensionName = dimensionName;
	this.m_description = description;
	this.m_dimensionType = dimensionType;
};

oFF.RuntimeRemoteBlendingQueryUpdateResult = function() {};
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype = new oFF.XObject();
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype._ff_c = "RuntimeRemoteBlendingQueryUpdateResult";

oFF.RuntimeRemoteBlendingQueryUpdateResult.create = function(isSuccess)
{
	let result = new oFF.RuntimeRemoteBlendingQueryUpdateResult();
	result.m_success = isSuccess;
	return result;
};
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype.m_success = false;
oFF.RuntimeRemoteBlendingQueryUpdateResult.prototype.isSuccess = function()
{
	return this.m_success;
};

oFF.QInADataSource = function() {};
oFF.QInADataSource.prototype = new oFF.QInAComponent();
oFF.QInADataSource.prototype._ff_c = "QInADataSource";

oFF.QInADataSource.exportDataSource = function(exporter, dataSource, withRunAsUser, inaQueryModel, isMetadata)
{
	let inaDataSource = oFF.PrFactory.createStructure();
	let type = dataSource.getType();
	if (oFF.notNull(type))
	{
		if (exporter.m_mode === oFF.QModelFormat.INA_VALUE_HELP && type === oFF.MetaObjectType.QUERY)
		{
			inaDataSource.putString("Type", oFF.MetaObjectType.QUERY_VALUEHELP.getCamelCaseName());
		}
		else if (exporter.m_mode === oFF.QModelFormat.INA_VALUE_HELP && type === oFF.MetaObjectType.MODEL)
		{
			inaDataSource.putString("Type", oFF.MetaObjectType.MODEL_VALUEHELP.getCamelCaseName());
		}
		else if (exporter.m_mode === oFF.QModelFormat.INA_VALUE_HELP && type === oFF.MetaObjectType.CDS_PROJECTION_VIEW)
		{
			inaDataSource.putString("Type", oFF.MetaObjectType.CDS_PROJECTION_VIEW_VALUEHELP.getCamelCaseName());
		}
		else if (exporter.m_mode === oFF.QModelFormat.INA_FUNCTIONAL_VARIABLES_VALUE_HELP)
		{
			inaDataSource.putString("Type", oFF.MetaObjectType.FUNCTIONAL_VARIABLES_VALUEHELP.getCamelCaseName());
		}
		else
		{
			inaDataSource.putString("Type", type.getCamelCaseName());
		}
		let systemName = dataSource.getSystemName();
		if (oFF.notNull(systemName) && exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			inaDataSource.putString("System", systemName);
		}
		let sources;
		if (type === oFF.MetaObjectType.MULTI_SOURCE)
		{
			sources = inaDataSource.putNewList("Sources");
			let multiSources = dataSource.getMultiSources();
			let multiSourcesSize = multiSources.size();
			for (let i = 0; i < multiSourcesSize; i++)
			{
				let multiSource = multiSources.get(i);
				let source = oFF.QInADataSource.exportDataSource(exporter, multiSource, withRunAsUser, null, isMetadata);
				sources.add(source);
			}
			inaDataSource.put("Mappings", dataSource.getMappings());
		}
		else if (type === oFF.MetaObjectType.BLENDING)
		{
			let blendingDefinition = dataSource.getBlendingDefinition();
			if (oFF.notNull(blendingDefinition))
			{
				sources = oFF.QInADataSourceBlending.exportBlendingSources(exporter.getMode(), blendingDefinition, true);
				inaDataSource.put("Sources", sources);
				let exportBlendingMappings = oFF.QInADataSourceBlending.exportBlendingMappings(blendingDefinition.getMappings());
				inaDataSource.put("Mappings", exportBlendingMappings);
			}
		}
	}
	oFF.QInADataSourceProperties.exportQd(exporter, dataSource, inaDataSource, withRunAsUser, isMetadata);
	oFF.QInADataSourceExtDims.exportQd(exporter, dataSource, inaDataSource, isMetadata);
	let genericServiceDescription = dataSource.getGenericServiceDescription();
	if (oFF.notNull(genericServiceDescription))
	{
		inaDataSource.put("GenericServiceDescription", genericServiceDescription);
	}
	if (oFF.notNull(inaQueryModel))
	{
		inaQueryModel.put("DataSource", inaDataSource);
	}
	return inaDataSource;
};
oFF.QInADataSource.importQd = function(importer, inaParent, name, context)
{
	let inaStructure = inaParent;
	if (oFF.notNull(name))
	{
		if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
		{
			inaStructure = inaStructure.getStructureByKey("Analytics");
			if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
			{
				inaStructure = inaStructure.getStructureByKey("Definition");
			}
		}
		if (oFF.notNull(inaStructure) && inaStructure.containsKey(name))
		{
			let type = inaStructure.getElementTypeByKey(name);
			if (type === oFF.PrElementType.STRING)
			{
				return oFF.QFactory.createDataSourceWithType(oFF.MetaObjectType.INFOPROVIDER, inaStructure.getStringByKey(name));
			}
			else if (type === oFF.PrElementType.STRUCTURE)
			{
				inaStructure = inaStructure.getStructureByKey(name);
			}
		}
		else if (oFF.notNull(inaStructure) && !inaStructure.containsKey(name))
		{
			inaStructure = null;
		}
	}
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	let dataSource = oFF.QFactory.createDataSource();
	let systemName = inaStructure.getStringByKey("System");
	if (oFF.notNull(systemName))
	{
		dataSource.setSystemName(systemName);
	}
	let typeValue = inaStructure.getStringByKey("Type");
	let metaObjectType = null;
	if (oFF.notNull(typeValue))
	{
		typeValue = oFF.XString.toLowerCase(typeValue);
		metaObjectType = oFF.MetaObjectType.lookup(typeValue);
	}
	if (oFF.isNull(metaObjectType))
	{
		metaObjectType = oFF.MetaObjectType.DBVIEW;
	}
	dataSource.setType(metaObjectType);
	oFF.QInADataSourceProperties.importQd(dataSource, inaStructure);
	if (metaObjectType === oFF.MetaObjectType.MULTI_SOURCE || metaObjectType === oFF.MetaObjectType.BLENDING)
	{
		let sources = oFF.PrUtils.getListProperty(inaStructure, "Sources");
		if (oFF.notNull(sources))
		{
			let multiSources = dataSource.getMultiSourcesBase();
			let sourceSize = sources.size();
			for (let i = 0; i < sourceSize; i++)
			{
				let sourceStructure = oFF.PrUtils.getStructureElement(sources, i);
				let multiSource = oFF.QInADataSource.importQd(importer, sourceStructure, null, context);
				multiSources.add(multiSource);
			}
		}
		let mappings = oFF.PrUtils.getListProperty(inaStructure, "Mappings");
		dataSource.setMappings(mappings);
	}
	oFF.QInADataSourceExtDims.importQd(importer, dataSource, inaStructure);
	let validationHash = inaParent.getStringByKey("ValidationHash");
	if (oFF.isNull(validationHash))
	{
		validationHash = inaStructure.getStringByKey("ValidationHash");
	}
	dataSource.setValidationHash(validationHash);
	let genericServiceDescription = inaParent.getStructureByKey("GenericServiceDescription");
	if (oFF.notNull(genericServiceDescription))
	{
		dataSource.setGenericServiceDescription(genericServiceDescription);
	}
	return dataSource;
};
oFF.QInADataSource.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	let withRunAsUser = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.RUN_AS_USER) > 0;
	return oFF.QInADataSource.exportDataSource(exporter, modelComponent, withRunAsUser, null, false);
};
oFF.QInADataSource.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_SOURCE;
};
oFF.QInADataSource.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	return oFF.QInADataSource.importQd(importer, inaElement, "DataSource", context);
};

oFF.QInAExportFactoryImpl = function() {};
oFF.QInAExportFactoryImpl.prototype = new oFF.QInAExportFactory();
oFF.QInAExportFactoryImpl.prototype._ff_c = "QInAExportFactoryImpl";

oFF.QInAExportFactoryImpl.staticSetupImpl = function()
{
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_CLONE, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_CLONE_RENDERING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_NO_VARS, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DELTA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA_CORE, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA_BLENDING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_METADATA_RENDERING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_DATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA_BLENDING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_DATA_MERGE_PROCESSING, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_DATA_BLENDING_SOURCE, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_DATA_BLENDING_SOURCE_METADATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_VALUE_HELP, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.INA_FUNCTIONAL_VARIABLES_VALUE_HELP, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.LAYER, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.CSN_METADATA, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.RENDER_INFO, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.SFX, new oFF.QInAExportFactoryImpl());
	oFF.QInAExportFactory.put(oFF.QModelFormat.VIZDEF, new oFF.QInAExportFactoryImpl());
};
oFF.QInAExportFactoryImpl.prototype.createExporter = function(application, modelFormat, capabilities, memberReadModeContext)
{
	if (modelFormat === oFF.QModelFormat.RENDER_INFO)
	{
		let infoExporter = new oFF.QRsInfoExport();
		infoExporter.setupImportExport(application, modelFormat, capabilities, memberReadModeContext);
		return infoExporter;
	}
	let object = new oFF.QInAExportImpl();
	object.setupImportExport(application, modelFormat, capabilities, memberReadModeContext);
	return object;
};

oFF.QInAImportFactoryImpl = function() {};
oFF.QInAImportFactoryImpl.prototype = new oFF.QInAImportFactory();
oFF.QInAImportFactoryImpl.prototype._ff_c = "QInAImportFactoryImpl";

oFF.QInAImportFactoryImpl.staticSetupImpl = function()
{
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_CLONE, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_CLONE_RENDERING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_NO_VARS, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_REPOSITORY_DELTA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA_CORE, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA_BLENDING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_METADATA_RENDERING, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_DATA, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.INA_DATA_REINIT, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.LAYER, new oFF.QInAImportFactoryImpl());
	oFF.QInAImportFactory.put(oFF.QModelFormat.VIZDEF, new oFF.QInAImportFactoryImpl());
};
oFF.QInAImportFactoryImpl.prototype.createImporter = function(application, modelFormat, capabilities)
{
	let object = new oFF.QInAImportImpl();
	object.setupImportExport(application, modelFormat, capabilities, null);
	return object;
};
oFF.QInAImportFactoryImpl.prototype.createImporterWithQueryManagerCapabilities = function(application, modelFormat, queryManager)
{
	return this.createImporter(application, modelFormat, queryManager.getModelCapabilities());
};

oFF.QInAFilterCartesianList = function() {};
oFF.QInAFilterCartesianList.prototype = new oFF.QInAComponent();
oFF.QInAFilterCartesianList.prototype._ff_c = "QInAFilterCartesianList";

oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull = function(filterBag, exporter, inaSetOperand, name)
{
	if (oFF.notNull(filterBag) && filterBag.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, name, inaSetOperand, filterBag, oFF.XValueType.STRING);
	}
};
oFF.QInAFilterCartesianList.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	let cartesianList = modelComponent;
	if (cartesianList.hasElements())
	{
		let element = cartesianList.getOp(0);
		let comparisonOperator = element.getComparisonOperator();
		if (oFF.notNull(comparisonOperator))
		{
			if (comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
			{
				return this.exportSpatialList(exporter, cartesianList, inaParentStructure);
			}
			else if (comparisonOperator === oFF.ComparisonOperator.SEARCH)
			{
				return this.exportSearchList(exporter, cartesianList, inaParentStructure);
			}
		}
		return this.exportStandardList(exporter, cartesianList, inaParentStructure);
	}
	return null;
};
oFF.QInAFilterCartesianList.prototype.exportSearchList = function(exporter, cartesianList, inaParentStructure)
{
	let fieldMd = cartesianList.getFieldMetadata();
	let fieldValueType = fieldMd.getValueType();
	let inaParentStructure2 = oFF.isNull(inaParentStructure) ? oFF.PrFactory.createStructure() : inaParentStructure;
	let inaOperator = inaParentStructure2.putNewStructure("Operator");
	inaOperator.putString("Code", "Or");
	let inaSubSelections = inaOperator.putNewList("SubSelections");
	let size = cartesianList.size();
	for (let j = 0; j < size; j++)
	{
		let qFilterSelection = cartesianList.getOp(j);
		if (qFilterSelection.getComparisonOperator() !== oFF.ComparisonOperator.SEARCH)
		{
			exporter.addError(oFF.ErrorCodes.INVALID_OPERATOR, "Comparison operator is not search");
			return null;
		}
		let inaOrElement = inaSubSelections.addNewStructure();
		let inaSearchOperation = inaOrElement.putNewStructure("SearchOperand");
		if (this.isAbap(exporter, cartesianList))
		{
			inaSearchOperation.putString("FieldName", fieldMd.getName());
			let isMergeProcessingMode = exporter.getMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || exporter.getOriginalMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING;
			let dimensionMetadata = fieldMd.getDimensionMetadata();
			if (isMergeProcessingMode && oFF.notNull(dimensionMetadata))
			{
				if (dimensionMetadata.isMeasureStructure())
				{
					inaSearchOperation.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_MEASURE_STRUCTURE);
				}
				else if (dimensionMetadata.isSecondaryStructure())
				{
					inaSearchOperation.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_SECOND_STRUCTURE);
				}
			}
		}
		inaSearchOperation.putString("AttributeName", fieldMd.getName());
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value", inaSearchOperation, qFilterSelection.getLow(), fieldValueType);
		inaSearchOperation.putDouble("Exactness", qFilterSelection.getExactness());
	}
	return inaParentStructure2;
};
oFF.QInAFilterCartesianList.prototype.exportSpatialList = function(exporter, cartesianList, inaParentStructure)
{
	if (!exporter.m_capabilities.supportsSpatialFilter())
	{
		exporter.addWarning(oFF.ErrorCodes.INVALID_OPERATOR, "System does not support spatial filtering.");
		return null;
	}
	let fieldMd = cartesianList.getFieldMetadata();
	let inaParentStructure2 = oFF.isNull(inaParentStructure) ? oFF.PrFactory.createStructure() : inaParentStructure;
	let inaOperator = inaParentStructure2.putNewStructure("Operator");
	inaOperator.putString("Code", "Or");
	let inaSubSelections = inaOperator.putNewList("SubSelections");
	let size = cartesianList.size();
	for (let j = 0; j < size; j++)
	{
		let qFilterSelection = cartesianList.getOp(j);
		let comparisonOperator = qFilterSelection.getComparisonOperator();
		if (oFF.isNull(comparisonOperator))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_OPERATOR, "Comparison operator is not set");
			return null;
		}
		if (!comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_OPERATOR, "Comparison operator not spatial");
			return null;
		}
		let inaOrElement = inaSubSelections.addNewStructure();
		let inaGeoOperation = inaOrElement.putNewStructure("GeometryOperand");
		inaGeoOperation.putString("FieldName", fieldMd.getName());
		let isMergeProcessingMode = exporter.getMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || exporter.getOriginalMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING;
		let dimensionMetadata = fieldMd.getDimensionMetadata();
		if (isMergeProcessingMode && oFF.notNull(dimensionMetadata))
		{
			if (dimensionMetadata.isMeasureStructure())
			{
				inaGeoOperation.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_MEASURE_STRUCTURE);
			}
			else if (dimensionMetadata.isSecondaryStructure())
			{
				inaGeoOperation.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_SECOND_STRUCTURE);
			}
		}
		inaGeoOperation.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
		if (qFilterSelection.getSetSign() === oFF.SetSign.EXCLUDING)
		{
			inaGeoOperation.putBoolean("IsExcluding", true);
		}
		let geoValueA1 = qFilterSelection.getLow();
		oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull(geoValueA1, exporter, inaGeoOperation, "Value1");
		if (geoValueA1.getValueType().isSpatial())
		{
			let srid = geoValueA1.getGeometry().getSrid();
			if (exporter.m_capabilities.supportsSpatialFilterSrid() && oFF.notNull(srid))
			{
				inaGeoOperation.putInteger("SRID", srid.getInteger());
			}
		}
		if (geoValueA1.getValue() !== null)
		{
			if (exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && geoValueA1.getTagging().containsKey("PersistedQueryPlaceholder"))
			{
				inaGeoOperation.putString("Value1", geoValueA1.getTagging().getByKey("PersistedQueryPlaceholder"));
			}
		}
		let geoValueA2 = qFilterSelection.getHigh();
		oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull(geoValueA2, exporter, inaGeoOperation, "Value2");
		let geoValueA3 = qFilterSelection.getThird();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(geoValueA3.getString()))
		{
			oFF.QInAFilterCartesianList.setStringIfFilterBagNotNull(geoValueA3, exporter, inaGeoOperation, "Value3");
		}
	}
	return inaParentStructure2;
};
oFF.QInAFilterCartesianList.prototype.exportStandardList = function(exporter, modelComponent, inaParentStructure)
{
	let cartesianList = modelComponent;
	if (cartesianList.isEmpty())
	{
		return null;
	}
	let fieldMd = cartesianList.getFieldMetadata();
	let fieldName = oFF.notNull(fieldMd) ? fieldMd.getName() : cartesianList.getFieldName();
	if (oFF.isNull(fieldMd) && oFF.XStringUtils.isNullOrEmpty(fieldName))
	{
		exporter.addWarning(oFF.ErrorCodes.INVALID_FIELD, "A field has to be provided to the cartesian list.");
		return null;
	}
	let queryModel = modelComponent.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let fieldByName = queryModel.getFieldByName(fieldName);
		if (oFF.notNull(fieldByName))
		{
			let dimension = fieldByName.getDimension();
			if (exporter.m_mode === oFF.QModelFormat.INA_DATA_BLENDING_SOURCE_METADATA && oFF.notNull(dimension) && dimension.getTagging().containsKey("isFAM"))
			{
				return null;
			}
		}
	}
	let inaCartesianList = oFF.PrFactory.createStructure();
	inaCartesianList.putString("FieldName", fieldName);
	let hierarchyName = cartesianList.getHierarchyName();
	let isMergeProcessingMode = exporter.getMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || exporter.getOriginalMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING;
	let dimensionMetadata = oFF.notNull(fieldMd) ? fieldMd.getDimensionMetadata() : null;
	if (isMergeProcessingMode && oFF.notNull(dimensionMetadata))
	{
		if (dimensionMetadata.isMeasureStructure())
		{
			inaCartesianList.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_MEASURE_STRUCTURE);
		}
		else if (dimensionMetadata.isSecondaryStructure())
		{
			inaCartesianList.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_SECOND_STRUCTURE);
		}
		if (oFF.notNull(hierarchyName))
		{
			let hierarchicalFilterTag = oFF.XStringUtils.concatenate2(oFF.InAQueryMergeConstants.TAG_HIERARCHICAL_FILTER, dimensionMetadata.getName());
			inaCartesianList.putString(oFF.InAQueryMergeConstants.TAG_KEY, hierarchicalFilterTag);
		}
	}
	if (oFF.notNull(hierarchyName))
	{
		let filterExpr = cartesianList.getFilterExpression() !== null ? cartesianList.getFilterExpression() : cartesianList.getParent() !== null ? cartesianList.getParent().getFilterExpression() : null;
		oFF.QInAHierarchy.exportHierarchyForFilter(exporter, this.isAbap(exporter, cartesianList), inaCartesianList, null, filterExpr, cartesianList.getQueryManager(), fieldName, hierarchyName, cartesianList.getHierarchyDueDate(), cartesianList.getHierarchyVersion());
	}
	if (!exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) && exporter.m_capabilities.supportsSupplements())
	{
		let supplementFieldsNames = cartesianList.getSupplementFieldNames();
		if (oFF.XCollectionUtils.hasElements(supplementFieldsNames))
		{
			let inaSupplements = inaCartesianList.putNewList("SupplementsFieldNames");
			inaSupplements.addAllStrings(supplementFieldsNames);
		}
	}
	let isConvertToFlatFilter = cartesianList.isConvertToFlatFilter();
	let inaElements = inaCartesianList.putNewList("Elements");
	let size = cartesianList.size();
	for (let j = 0; j < size; j++)
	{
		let cartesianElement = cartesianList.getOp(j);
		exporter.exportFilterOperation(cartesianElement, inaElements.addNewStructure());
		isConvertToFlatFilter = isConvertToFlatFilter || cartesianElement.isConvertToFlatFilter();
	}
	if (exporter.m_capabilities.supportsConvertToFlatFilter() && isConvertToFlatFilter)
	{
		inaCartesianList.putBoolean("ConvertToFlatSelection", true);
	}
	if (oFF.notNull(inaParentStructure))
	{
		inaParentStructure.put("SetOperand", inaCartesianList);
	}
	return inaCartesianList;
};
oFF.QInAFilterCartesianList.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_LIST;
};
oFF.QInAFilterCartesianList.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	let inaCartesianList = inaElement;
	let cartesianListExt = modelComponent;
	let filterExpression = oFF.notNull(parentComponent) && parentComponent.getOlapComponentType().isTypeOf(oFF.OlapComponentType.FILTER_EXPRESSION) ? parentComponent : cartesianListExt.getFilterExpression();
	let fieldAccessor = context.getFieldAccessorSingle();
	let fieldName = inaCartesianList.getStringByKey("FieldName");
	let cartesianList = cartesianListExt;
	if (oFF.notNull(fieldName))
	{
		let field = fieldAccessor.getFieldByName(fieldName);
		if (oFF.isNull(field))
		{
			let queryModel = filterExpression.getQueryModel();
			if (oFF.notNull(queryModel))
			{
				let dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
				if (oFF.notNull(dimensionByName))
				{
					let inaHierarchy2 = inaCartesianList.getStructureByKey("Hierarchy");
					if (oFF.isNull(inaHierarchy2))
					{
						field = dimensionByName.getFlatKeyField();
					}
					else
					{
						field = dimensionByName.getHierarchyKeyField();
					}
				}
			}
		}
		if (oFF.notNull(field))
		{
			let inaHierarchy = inaCartesianList.getStructureByKey("Hierarchy");
			let inaHierarchyName = null;
			let inaHierarchyDueDate = null;
			let inaHierarchyVersion = null;
			if (oFF.notNull(inaHierarchy))
			{
				inaHierarchyName = inaHierarchy.getStringByKey("Name");
				if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && importer.isAbap(field))
				{
					let hierarchyDueDateValue = inaHierarchy.getStringByKey("DueDate");
					if (oFF.notNull(hierarchyDueDateValue))
					{
						inaHierarchyDueDate = oFF.XDate.createDateFromSAPFormat(hierarchyDueDateValue);
					}
					inaHierarchyVersion = inaHierarchy.getStringByKey("Version");
				}
			}
			if (oFF.isNull(cartesianList))
			{
				cartesianList = oFF.QFilterCartesianList._createMd(context, filterExpression, field.getMetadata(), inaHierarchyName);
				cartesianList.setHierarchyInfo(inaHierarchyName, inaHierarchyDueDate, inaHierarchyVersion);
			}
			else
			{
				cartesianList.clear();
			}
			let convertToFlatFilter = inaCartesianList.getBooleanByKeyExt("ConvertToFlatSelection", false);
			cartesianList.setConvertToFlatFilter(convertToFlatFilter);
			let supplementsFieldsNamesList = inaCartesianList.getListByKey("SupplementsFieldNames");
			if (oFF.notNull(supplementsFieldsNamesList))
			{
				let len = supplementsFieldsNamesList.size();
				for (let y = 0; y < len; y++)
				{
					let name = supplementsFieldsNamesList.getStringAt(y);
					let supplField = fieldAccessor.getFieldByName(name);
					cartesianList.addSupplementField(supplField);
				}
			}
			let elements = inaCartesianList.getListByKey("Elements");
			if (oFF.notNull(elements))
			{
				let size = elements.size();
				for (let i = 0; i < size; i++)
				{
					let setOperandElement = elements.getStructureAt(i);
					let element = importer.importFilterOperation(setOperandElement, cartesianList, context);
					cartesianList.add(element);
				}
			}
		}
	}
	return cartesianList;
};
oFF.QInAFilterCartesianList.prototype.isAbap = function(exporter, cartesianList)
{
	return exporter.isAbap(cartesianList) || exporter.isMetadataOfAbap(cartesianList.getFieldMetadata(), cartesianList.getApplication());
};

oFF.QInAFilterCartesianProduct = function() {};
oFF.QInAFilterCartesianProduct.prototype = new oFF.QInAComponent();
oFF.QInAFilterCartesianProduct.prototype._ff_c = "QInAFilterCartesianProduct";

oFF.QInAFilterCartesianProduct.iterateCartesianDimensionsNew = function(exporter, cartesianProduct, parentList)
{
	let size = cartesianProduct.size();
	for (let i = 0; i < size; i++)
	{
		let msl = cartesianProduct.getCartesianChild(i);
		let parentElement = oFF.PrFactory.createStructure();
		if (msl.hasElements())
		{
			exporter.exportCartesianList(msl, parentElement);
			parentList.add(parentElement);
		}
	}
};
oFF.QInAFilterCartesianProduct.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	let cartesianProduct = modelComponent;
	if (oFF.notNull(cartesianProduct))
	{
		let filterDimCount = 0;
		let singleMemberSelection = null;
		let size = cartesianProduct.size();
		for (let i = 0; i < size; i++)
		{
			let msl = cartesianProduct.getCartesianChild(i);
			if (msl.hasElements())
			{
				filterDimCount++;
				singleMemberSelection = msl;
				if (filterDimCount > 1)
				{
					break;
				}
			}
		}
		if (filterDimCount > 0)
		{
			let inaParentStructure2;
			if (oFF.isNull(inaParentStructure))
			{
				inaParentStructure2 = oFF.PrFactory.createStructure();
			}
			else
			{
				inaParentStructure2 = inaParentStructure;
			}
			if (filterDimCount === 1 && exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				return exporter.exportCartesianList(singleMemberSelection, inaParentStructure);
			}
			let inaLogicalOperator = inaParentStructure2.putNewStructure("Operator");
			inaLogicalOperator.putString("Code", "And");
			let inaSubSelections = inaLogicalOperator.putNewList("SubSelections");
			oFF.QInAFilterCartesianProduct.iterateCartesianDimensionsNew(exporter, cartesianProduct, inaSubSelections);
			return inaLogicalOperator;
		}
	}
	return null;
};
oFF.QInAFilterCartesianProduct.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CARTESIAN_PRODUCT;
};
oFF.QInAFilterCartesianProduct.prototype.importComponent = function(importer, inaElement, modelComponent, parentComponent, context)
{
	let inaStructure = inaElement;
	let filterExpression = parentComponent;
	let cartesianProduct = null;
	let inaElements = inaStructure.getListByKey("Elements");
	if (oFF.isNull(inaElements))
	{
		inaElements = inaStructure.getListByKey("SubSelections");
	}
	if (oFF.notNull(inaElements))
	{
		cartesianProduct = oFF.QFilterCartesianProduct._create(context, filterExpression);
		let size = inaElements.size();
		for (let i = 0; i < size; i++)
		{
			let inaCartesianChild = inaElements.getStructureAt(i);
			if (oFF.notNull(inaCartesianChild))
			{
				let cartesianList = importer.importCartesianList(inaCartesianChild, null, filterExpression, context);
				cartesianProduct.add(cartesianList);
			}
		}
	}
	return cartesianProduct;
};

oFF.InADocConverterSfxRepo = function() {};
oFF.InADocConverterSfxRepo.prototype = new oFF.DocConverterFactory();
oFF.InADocConverterSfxRepo.prototype._ff_c = "InADocConverterSfxRepo";

oFF.InADocConverterSfxRepo.getAccountMemberName = function(accountName, accountHierarchy, memberName)
{
	if (oFF.notNull(accountName) && oFF.notNull(accountHierarchy))
	{
		return oFF.QDimensionMemberNameUtil.buildMDXHierarchyKey(accountName, accountHierarchy, memberName);
	}
	return memberName;
};
oFF.InADocConverterSfxRepo.isNormalizeIntervals = function(tModellerDefn, accountDimension, memberName)
{
	let membersRepo = null;
	if (oFF.isNull(accountDimension))
	{
		let tModellerDimensions = tModellerDefn.getStructureByKey("ModellerDimensions");
		let tDimensions = tModellerDimensions.getListByKey("Dimensions");
		for (let i = 0; i < tDimensions.size(); i++)
		{
			let dimension = tDimensions.getStructureAt(i);
			if (dimension.getBooleanByKeyExt("MeasureStructure", false))
			{
				membersRepo = dimension.getListByKey("MembersRepo");
			}
		}
	}
	else
	{
		membersRepo = accountDimension.getListByKey("MembersRepo");
	}
	if (oFF.notNull(membersRepo))
	{
		for (let j = 0; j < membersRepo.size(); j++)
		{
			let member = membersRepo.getStructureAt(j);
			if (oFF.XString.isEqual(member.getStringByKey("Name"), memberName))
			{
				return member.getIntegerByKeyExt("NumericShift", 0) === 2 || oFF.XString.isEqual(member.getStringByKeyExt("NumericShift", null), "%");
			}
		}
	}
	return false;
};
oFF.InADocConverterSfxRepo.obtainExtendedDimensionDefaultHierarchies = function(sCData)
{
	let defaultHierarchyMap = oFF.XHashMapByString.create();
	let sExtendedDimensions = sCData.getListByKey(oFF.SfxConstants.EXTENDED_DIMENSIONS);
	if (oFF.notNull(sExtendedDimensions) && !sExtendedDimensions.isEmpty())
	{
		for (let index = 0; index < sExtendedDimensions.size(); index++)
		{
			let sExtendedDimension = sExtendedDimensions.getStructureAt(index);
			let sExtensionDefinition = sExtendedDimension.getStructureByKey(oFF.SfxConstants.EXTENSION_DEFINITION);
			let sDimensionDefinition = oFF.isNull(sExtensionDefinition) ? null : sExtensionDefinition.getStructureByKey(oFF.SfxConstants.DIMENSION);
			if (oFF.notNull(sDimensionDefinition))
			{
				let name = sDimensionDefinition.getStringByKey(oFF.SfxConstants.NAME);
				let defaultHierarchy = sDimensionDefinition.getStringByKey(oFF.SfxConstants.DEFAULT_HIERARCHY);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(name) && oFF.XStringUtils.isNotNullAndNotEmpty(defaultHierarchy))
				{
					defaultHierarchyMap.put(name, defaultHierarchy);
				}
			}
		}
	}
	return defaultHierarchyMap;
};
oFF.InADocConverterSfxRepo.processAccountMembers = function(sCData, accountDimension, accountHierarchy, application)
{
	if (oFF.notNull(accountDimension) && sCData.getStructureByKey(oFF.SfxConstants.FORMULAS) !== null)
	{
		let capabilities = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
		let hasUserDefinedMeasures = oFF.notNull(capabilities) && capabilities.getBooleanByKeyExt(oFF.SfxConstants.HAS_USER_DEFINED_MEASURES, false);
		let sFormulas = sCData.getStructureByKey(oFF.SfxConstants.FORMULAS);
		let calculationMembersPrefix = sFormulas.getStringByKey(oFF.SfxConstants.CALCULATION_MEMBERS_PREFIX);
		if (oFF.isNull(calculationMembersPrefix))
		{
			calculationMembersPrefix = oFF.SfxConstants.CALCULATION_MEMBERS_PREFIX_DEFAULT;
		}
		let sFormulasData = sFormulas.getListByKey(oFF.SfxConstants.FORMULA_DATA);
		let tFormulas = accountDimension.putNewList("MembersRepo");
		let tPlaceholdeIds = accountDimension.putNewList("PlaceholderIds");
		let accountName = accountDimension.getStringByKey("Name");
		if (oFF.notNull(sFormulasData))
		{
			for (let j = 0; j < sFormulasData.size(); j++)
			{
				let sFormula = sFormulasData.get(j).asStructure();
				let member = sFormula.getStringByKey(oFF.SfxConstants.MEMBER);
				let memberName = oFF.InADocConverterSfxRepo.getAccountMemberName(accountName, accountHierarchy, member);
				let isPlaceHolderId = oFF.XString.startsWith(member, calculationMembersPrefix);
				if (isPlaceHolderId)
				{
					tPlaceholdeIds.addString(application.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && hasUserDefinedMeasures ? member : memberName);
					continue;
				}
				let tFormula = tFormulas.addNewStructure();
				tFormula.putBoolean("ModelDefinedMember", true);
				tFormula.putString("Name", application.getSession().hasFeature(oFF.FeatureToggleOlap.MULTIPLE_ACCOUNT_HIERARCHIES) && application.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_STORE_HIERARCHY_MEMBER_NAMES_AS_FLAT) ? member : memberName);
				tFormula.putString("Description", sFormula.getStringByKey(oFF.SfxConstants.MEMBER_DESCRIPTION));
				tFormula.putString("HierarchyDisplayKey", member);
				tFormula.putBoolean("IsDelta", true);
				let accountType = sFormula.getStringByKey(oFF.SfxConstants.ACCOUNTTYPE);
				tFormula.putString("AccountType", accountType);
				tFormula.putString("Aggregation", sFormula.getStringByKey(oFF.SfxConstants.AGGREGATIONTYPE));
				if (sFormula.containsKey(oFF.SfxConstants.SCALE) && !sFormula.hasNullByKey(oFF.SfxConstants.SCALE))
				{
					tFormula.putInteger("NumericScale", sFormula.getIntegerByKey(oFF.SfxConstants.SCALE));
				}
				if (sFormula.containsKey(oFF.SfxConstants.NUMERIC_SHIFT) && !sFormula.hasNullByKey(oFF.SfxConstants.NUMERIC_SHIFT))
				{
					tFormula.putInteger("NumericShift", sFormula.getIntegerByKey(oFF.SfxConstants.NUMERIC_SHIFT));
				}
				tFormula.putString("ExceptionAggregation", sFormula.getStringByKey(oFF.SfxConstants.EXCEPTIONAGGREGATIONTYPE));
				let exceptionAggregationDims = sFormula.getListByKey(oFF.SfxConstants.AGGRDIMNAME);
				if (oFF.notNull(exceptionAggregationDims))
				{
					let tExceptionAggregationDims = tFormula.putNewList("ExceptionAggregationDimensions");
					for (let k = 0; k < exceptionAggregationDims.size(); k++)
					{
						tExceptionAggregationDims.addString(exceptionAggregationDims.get(k).asString().getString());
					}
				}
				let jsonFormula = sFormula.getStringByKey(oFF.SfxConstants.JSONFORMULA);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(jsonFormula))
				{
					let jsonParser = oFF.JsonParserFactory.newInstance();
					let parsedFormula = jsonParser.parse(jsonFormula).asStructure();
					if (oFF.notNull(accountType) && (oFF.XString.isEqual(accountType, oFF.AccountType.INC.getName()) || oFF.XString.isEqual(accountType, oFF.AccountType.LEQ.getName())))
					{
						tFormula.putBoolean("PresentationSignReversal", true);
					}
					if (parsedFormula.containsKey("Operator"))
					{
						tFormula.putString("CType", oFF.MemberType.RESTRICTED_MEASURE.getName());
						tFormula.putString("MemberType", "SelectionMeasure");
						let restrictedMeasure = tFormula.putNewStructure("InAFilterExpression");
						restrictedMeasure.put("Selection", parsedFormula);
					}
					else
					{
						tFormula.putString("CType", oFF.MemberType.FORMULA.getName());
						tFormula.putString("MemberType", "FormulaMeasure");
						tFormula.put("Formula", parsedFormula);
						let inverseFormula = parsedFormula.asStructure().getByKey("InverseFormulas");
						if (oFF.notNull(inverseFormula))
						{
							tFormula.put("InverseFormulas", inverseFormula);
						}
						if (sFormula.getBooleanByKeyExt(oFF.SfxConstants.CALC_BEFORE_AGGR, false))
						{
							tFormula.putString("ExecutionStep", "CalculationBeforeAggregation");
						}
					}
				}
				else
				{
					tFormula.putString("MemberType", "Measure");
					tFormula.putString("CType", oFF.MemberType.BASIC_MEASURE.getName());
				}
				let formulaType = sFormula.getStringByKey(oFF.SfxConstants.FORMULA_TYPE);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(formulaType))
				{
					tFormula.putString("FormulaType", formulaType);
				}
				let ignoreExternalDimensions = sFormula.getListByKey(oFF.SfxConstants.IGNORE_EXTERNAL_DIMENSIONS);
				if (oFF.notNull(ignoreExternalDimensions))
				{
					let tIgnoreExternalDimensions = tFormula.putNewList("IgnoreExternalDimensions");
					for (let m = 0; m < ignoreExternalDimensions.size(); m++)
					{
						tIgnoreExternalDimensions.addString(ignoreExternalDimensions.get(m).asString().getString());
					}
				}
				let unitType = sFormula.getStringByKey(oFF.SfxConstants.UNITTYPE);
				tFormula.putString("UnitType", unitType);
				if (oFF.XString.isEqual(unitType, oFF.UnitType.UNIT.getName()))
				{
					tFormula.putString("UnitFixed", sFormula.getStringByKey(oFF.SfxConstants.UNITOFMEASURE));
				}
				oFF.InADocConverterSfxRepo.setVisibility(tFormula, oFF.XString.isEqual(sFormula.getStringByKeyExt(oFF.SfxConstants.VISIBLE, oFF.SfxConstants.NO), oFF.SfxConstants.NO));
				oFF.InADocConverterSfxRepo.setMinimumDrillState(sFormula, tFormula, application);
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processCurrencyTranslationSettings = function(sCData, tModellerDefn, capabilitySettings, hasAccountDimension)
{
	if (oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.CT_ENABLED, false))
	{
		let currencyTranslationManager = tModellerDefn.putNewStructure("ModellerCurrencyTranslation");
		currencyTranslationManager.putBoolean("PlanningParametersForCurrencyTranslation", capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.QUERY_BASED_CURRENCY_TRANSLATION, false));
		currencyTranslationManager.putInteger("MaxNumberOfCurrencyTranslations", sCData.getIntegerByKeyExt(oFF.SfxConstants.NUM_OF_CONVERSIONS, -1));
		currencyTranslationManager.putBoolean("RateTypeFromAccount", hasAccountDimension && oFF.XString.isEqual(oFF.SfxConstants.LEADING_STRUCTURE_ACCOUNT, sCData.getStringByKeyExt(oFF.SfxConstants.LEADING_STRUCTURE, oFF.SfxConstants.LEADING_STRUCTURE_MEASURES)));
		currencyTranslationManager.putStringNotNullAndNotEmpty("CurrencyTranslationTimeDimension", sCData.getStringByKey(oFF.SfxConstants.CURRENCY_CONVERSION_TIME_DIMENSION));
		currencyTranslationManager.putStringNotNullAndNotEmpty("DefaultCurrency", sCData.getStringByKey(oFF.SfxConstants.DEFAULT_CURRENCY));
		currencyTranslationManager.putStringNotNullAndNotEmpty("CurrencyRateTableId", sCData.getStringByKey(oFF.SfxConstants.CURRENCY_RATE_TABLE_ID));
		let categoryList = sCData.getListByKey(oFF.SfxConstants.CATEGORIES);
		let i;
		let size;
		let subStructure;
		let name;
		if (oFF.XCollectionUtils.hasElements(categoryList))
		{
			let ctCategoriesTarget = currencyTranslationManager.putNewList("Categories");
			size = categoryList.size();
			for (i = 0; i < size; i++)
			{
				subStructure = ctCategoriesTarget.addNewStructure();
				name = categoryList.getStructureAt(i).getStringByKey(oFF.SfxConstants.CATEGORY);
				subStructure.putString("Name", name);
			}
		}
		let currencyDetails = sCData.getStructureByKey(oFF.SfxConstants.CURRENCY_DETAILS);
		if (oFF.XCollectionUtils.hasElements(currencyDetails))
		{
			currencyTranslationManager.putStringNotNullAndNotEmpty("CurrencyDimension", currencyDetails.getStringByKey(oFF.SfxConstants.CURRENCY_DIMENSION));
		}
		let rateData = sCData.getStructureByKey(oFF.SfxConstants.RATE_DATA);
		if (oFF.XCollectionUtils.hasElements(rateData))
		{
			let currencies = rateData.getListByKey(oFF.SfxConstants.CURRENCIES);
			let ctCurrenciesTarget = currencyTranslationManager.putNewList("Currencies");
			if (oFF.XCollectionUtils.hasElements(currencies))
			{
				size = currencies.size();
				for (i = 0; i < size; i++)
				{
					subStructure = ctCurrenciesTarget.addNewStructure();
					name = currencies.getStringAt(i);
					subStructure.putString("Name", name);
					subStructure.putString("Text", name);
				}
			}
			let rateVersions = rateData.getListByKey(oFF.SfxConstants.RATE_VERSIONS);
			let ctRateVersionsTarget = currencyTranslationManager.putNewList("RateVersions");
			if (oFF.XCollectionUtils.hasElements(rateVersions))
			{
				size = rateVersions.size();
				for (i = 0; i < size; i++)
				{
					subStructure = ctRateVersionsTarget.addNewStructure();
					name = rateVersions.getStringAt(i);
					subStructure.putString("Name", name);
					subStructure.putString("Text", name);
				}
			}
			let rateTypes = rateData.getListByKey(oFF.SfxConstants.RATE_TYPES);
			let ctRateTypesTarget = currencyTranslationManager.putNewList("RateTypes");
			if (oFF.XCollectionUtils.hasElements(rateTypes))
			{
				size = rateTypes.size();
				for (i = 0; i < size; i++)
				{
					subStructure = ctRateTypesTarget.addNewStructure();
					name = rateTypes.getStringAt(i);
					subStructure.putString("Name", name);
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processCustomVariableSettings = function(sCData, tModellerDefn)
{
	let i;
	let size;
	let variables = sCData.getListByKey(oFF.SfxConstants.VARIABLES);
	if (oFF.notNull(variables))
	{
		let optionList = oFF.PrFactory.createList();
		let rateData = sCData.getStructureByKey(oFF.SfxConstants.RATE_DATA);
		if (oFF.XCollectionUtils.hasElements(rateData))
		{
			let currencies = rateData.getListByKey(oFF.SfxConstants.CURRENCIES);
			if (oFF.XCollectionUtils.hasElements(currencies))
			{
				size = currencies.size();
				for (i = 0; i < size; i++)
				{
					let subStructure = optionList.addNewStructure();
					let name = currencies.getStringAt(i);
					subStructure.putString("Name", name);
					subStructure.putString("Text", name);
				}
			}
		}
		let variablesInA = tModellerDefn.putNewStructure("ModellerVariables").putNewList("Variables");
		size = variables.size();
		for (i = 0; i < size; i++)
		{
			let variable = variables.getStructureAt(i);
			let vType = variable.getStringByKey(oFF.SfxConstants.VARIABLE_TYPE);
			let processingType = variable.getStringByKey(oFF.SfxConstants.VARIABLE_PROCESSING_TYPE);
			if (oFF.XString.isEqual(vType, oFF.SfxConstants.VARIABLE_TYPE_LOCAL) && oFF.XString.isEqual(processingType, oFF.SfxConstants.VARIABLE_PROCESSING_TYPE_CURRENCY))
			{
				let variableInA = variablesInA.addNewStructure();
				variableInA.putStringNotNullAndNotEmpty("Name", variable.getStringByKey(oFF.SfxConstants.VARIABLE));
				variableInA.putStringNotNullAndNotEmpty("Text", variable.getStringByKey(oFF.SfxConstants.DESCRIPTION));
				variableInA.putBoolean("CustomVariable", true);
				let mandatory = oFF.XString.isEqual(variable.getStringByKey(oFF.SfxConstants.VARIABLE_MANDATORY), "true") || variable.getBooleanByKeyExt(oFF.SfxConstants.VARIABLE_MANDATORY, false);
				variableInA.putString("InputType", mandatory ? "Mandatory" : "Optional");
				variableInA.putString("CType", "OptionListVariable");
				variableInA.putString("ProcessingType", processingType);
				let defaultValue = variable.getStringByKey(oFF.SfxConstants.DEFAULT_VALUE);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(defaultValue))
				{
					variableInA.putNewList("OptionValues").addString(defaultValue);
				}
				variableInA.put("Options", oFF.PrFactory.createListDeepCopy(optionList));
			}
		}
		if (!oFF.XCollectionUtils.hasElements(variablesInA))
		{
			tModellerDefn.remove("ModellerVariables");
		}
	}
};
oFF.InADocConverterSfxRepo.processDataAccessRestrictions = function(sCData, metadataProperties)
{
	metadataProperties.putBoolean("DataExportRestricted", sCData.getBooleanByKey(oFF.SfxConstants.DATA_EXPORT_RESTRICTED));
};
oFF.InADocConverterSfxRepo.processEpmObjectProperties = function(sCData, metadataProperties, isEmbedded)
{
	metadataProperties.putString("ModelId", sCData.getStringByKey(oFF.SfxConstants.ID));
	metadataProperties.putString("Mode", sCData.getStringByKey(oFF.SfxConstants.MODE));
	metadataProperties.putString("EpmQuerySourceName", sCData.getStringByKey(oFF.SfxConstants.EPM_QUERY_SOURCE_NAME));
	metadataProperties.putString("EpmModelName", sCData.getStringByKey(oFF.SfxConstants.EPM_MODEL_NAME));
	metadataProperties.putString("SchemaName", sCData.getStringByKey(oFF.SfxConstants.SCHEMA_NAME));
	metadataProperties.putString("PackageName", sCData.getStringByKey(oFF.SfxConstants.PACKAGE_NAME));
	metadataProperties.putString("Name", sCData.getStringByKey(oFF.SfxConstants.NAME));
	metadataProperties.putString("ShortDescription", sCData.getStringByKey(oFF.SfxConstants.SHORT_DESCRIPTION));
	metadataProperties.putString("DisplayName", sCData.getStringByKey(oFF.SfxConstants.DISPLAY_NAME));
	metadataProperties.putString("Description", sCData.getStringByKey(oFF.SfxConstants.DESCRIPTION));
	metadataProperties.putBoolean("IsEmbedded", isEmbedded);
	metadataProperties.putBoolean("IsRemote", sCData.getBooleanByKey(oFF.SfxConstants.IS_REMOTE));
};
oFF.InADocConverterSfxRepo.processExtendedDimensions = function(sCData, tModellerDefn)
{
	let sExtendedDimensions = sCData.getListByKey(oFF.SfxConstants.EXTENDED_DIMENSIONS);
	if (oFF.notNull(sExtendedDimensions) && !sExtendedDimensions.isEmpty())
	{
		let tModellerDimensions = tModellerDefn.getStructureByKey("ModellerDimensions");
		let tExtendedDimensions = tModellerDimensions.putNewList("ExtendedDimensions");
		for (let index = 0; index < sExtendedDimensions.size(); index++)
		{
			let sExtendedDimension = sExtendedDimensions.getStructureAt(index);
			let sExtensionDefinition = sExtendedDimension.getStructureByKey(oFF.SfxConstants.EXTENSION_DEFINITION);
			if (oFF.notNull(sExtensionDefinition))
			{
				let locationType = sExtensionDefinition.getStringByKey(oFF.SfxConstants.LOCATION_TYPE);
				if (oFF.notNull(locationType))
				{
					let sDimensionDefinition = sExtensionDefinition.getStructureByKey(oFF.SfxConstants.DIMENSION);
					if (oFF.notNull(sDimensionDefinition))
					{
						let name = sDimensionDefinition.getStringByKey(oFF.SfxConstants.NAME);
						if (oFF.isNull(name))
						{
							name = sDimensionDefinition.getStructureByKey(oFF.SfxConstants.DATA_SOURCE_1).getStringByKey(oFF.SfxConstants.OBJECT_NAME_1);
						}
						if (oFF.notNull(name))
						{
							let tExtendedDimension = tExtendedDimensions.addNewStructure();
							tExtendedDimension.putString("Name", name);
							tExtendedDimension.putString("LocationType", locationType);
						}
					}
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processHasUserDefinedMeasuresProperty = function(sCData, metadataProperties)
{
	let capabilities = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
	let hasUserDefinedMeasures = oFF.notNull(capabilities) && capabilities.getBooleanByKeyExt(oFF.SfxConstants.HAS_USER_DEFINED_MEASURES, false);
	metadataProperties.putBoolean("HasUserDefinedMeasures", hasUserDefinedMeasures);
};
oFF.InADocConverterSfxRepo.processIsPlanningProperty = function(sCData, metadataProperties)
{
	let sDataSource = sCData.getStructureByKey(oFF.SfxConstants.DATA_SOURCE);
	let isPlanning = oFF.notNull(sDataSource) && oFF.XString.isEqual(sDataSource.getStringByKey(oFF.SfxConstants.DATA_SOURCE_TYPE), oFF.SfxConstants.DATA_SOURCE_TYPE_PLANNING);
	metadataProperties.putBoolean("IsPlanning", isPlanning);
};
oFF.InADocConverterSfxRepo.processLeadingStructure = function(sCData, metadataProperties)
{
	let scString = sCData.getStringByKeyExt(oFF.SfxConstants.LEADING_STRUCTURE, oFF.SfxConstants.LEADING_STRUCTURE_MEASURES);
	if (oFF.XString.isEqual(scString, oFF.SfxConstants.LEADING_STRUCTURE_ACCOUNT))
	{
		metadataProperties.putString("LeadingStructure", "AccountStructure");
	}
	else if (oFF.XString.isEqual(scString, oFF.SfxConstants.LEADING_STRUCTURE_MEASURES))
	{
		metadataProperties.putString("LeadingStructure", "MeasureStructure");
	}
	else if (oFF.XString.isEqual(scString, oFF.SfxConstants.LEADING_STRUCTURE_NON_MEASURES))
	{
		metadataProperties.putString("LeadingStructure", "SecondaryStructure");
	}
};
oFF.InADocConverterSfxRepo.processMeasures = function(sCData, tModellerDefn, accountDimension, application, isEmbedded)
{
	let hasAccountDimension = oFF.notNull(accountDimension);
	let isAnalyticModel = oFF.XString.isEqual(sCData.getStringByKey(oFF.SfxConstants.TYPE), oFF.SfxConstants.ANALYTIC);
	let isIntegratedMode = oFF.XString.isEqual(sCData.getStringByKey(oFF.SfxConstants.MODE), oFF.SfxConstants.INTEGRATED);
	let capabilitySettings = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
	let hasUserDefinedMeasures = oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.HAS_USER_DEFINED_MEASURES, false);
	let hasUniversalCurrencyTranslation = oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.QUERY_BASED_CURRENCY_TRANSLATION, false);
	let hasDatasetSource = oFF.notNull(capabilitySettings) && capabilitySettings.getBooleanByKeyExt(oFF.SfxConstants.HAS_DATASET_SOURCE, false);
	let hasSfxFeatureToggle = application.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_MINIMUM_DRILL_STATE);
	if (hasAccountDimension && !hasUserDefinedMeasures || !hasSfxFeatureToggle && !hasUniversalCurrencyTranslation && (!isAnalyticModel || !isIntegratedMode) || hasSfxFeatureToggle && hasDatasetSource && !isEmbedded)
	{
		return;
	}
	let tModellerDimensions = tModellerDefn.getStructureByKey("ModellerDimensions");
	let tDimensions = tModellerDimensions.getListByKey("Dimensions");
	let measureDim = tDimensions.addNewStructure();
	measureDim.putBoolean("MeasureStructure", true);
	measureDim.putString("CType", oFF.DimensionType.MEASURE_STRUCTURE.getName());
	measureDim.putBoolean("IsDelta", true);
	let tMeasures = measureDim.putNewList("MembersRepo");
	let ctListItem = null;
	let modellerVariables = tModellerDefn.getStructureByKey("ModellerVariables");
	let customVariableNames = oFF.isNull(modellerVariables) ? null : oFF.XStream.of(modellerVariables.getListByKey("Variables")).collect(oFF.XStreamCollector.toSetOfString((el) => {
		return el.asStructure().getStringByKey("Name");
	}));
	if (oFF.XCollectionUtils.hasElements(customVariableNames))
	{
		let ctrepo = tModellerDefn.getStructureByKey("ModellerCurrencyTranslation");
		if (oFF.XCollectionUtils.hasElements(ctrepo))
		{
			ctListItem = ctrepo.putNewList("CurrencyTranslations");
		}
	}
	let sMeasures = sCData.getListByKey(oFF.SfxConstants.MEASURES);
	if (oFF.notNull(sMeasures))
	{
		for (let i = 0; i < sMeasures.size(); i++)
		{
			let sMeasure = sMeasures.getStructureAt(i);
			let measureName = sMeasure.getStringByKey(oFF.SfxConstants.MEASURE);
			let tMeasure = tMeasures.addNewStructure();
			tMeasure.putBoolean("ModelDefinedMember", true);
			tMeasure.putString("Name", measureName);
			tMeasure.putBoolean("IsDelta", true);
			if (sMeasure.containsKey(oFF.SfxConstants.NUMERIC_SCALE) && !sMeasure.hasNullByKey(oFF.SfxConstants.NUMERIC_SCALE))
			{
				tMeasure.putInteger("NumericScale", sMeasure.getIntegerByKey(oFF.SfxConstants.NUMERIC_SCALE));
			}
			if (sMeasure.containsKey(oFF.SfxConstants.NUMERIC_SHIFT) && !sMeasure.hasNullByKey(oFF.SfxConstants.NUMERIC_SHIFT))
			{
				tMeasure.putInteger("NumericShift", sMeasure.getIntegerByKey(oFF.SfxConstants.NUMERIC_SHIFT));
			}
			if (sMeasure.containsKey(oFF.SfxConstants.NUMERIC_PRECISION) && !sMeasure.hasNullByKey(oFF.SfxConstants.NUMERIC_PRECISION))
			{
				tMeasure.putInteger("NumericPrecision", sMeasure.getIntegerByKey(oFF.SfxConstants.NUMERIC_PRECISION));
			}
			if (sMeasure.containsKey(oFF.SfxConstants.SOLVE_ORDER) && !sMeasure.hasNullByKey(oFF.SfxConstants.SOLVE_ORDER))
			{
				tMeasure.putInteger("SolveOrder", sMeasure.getIntegerByKeyExt(oFF.SfxConstants.SOLVE_ORDER, 0));
			}
			let scale = sMeasure.getIntegerByKeyExt(oFF.SfxConstants.SCALE, -1);
			if (scale > -1)
			{
				tMeasure.putInteger("DataTypeScale", scale);
			}
			let precision = sMeasure.getIntegerByKeyExt(oFF.SfxConstants.LENGTH, -1);
			if (precision > -1)
			{
				tMeasure.putInteger("DataTypePrecision", precision);
			}
			tMeasure.putString("UnitType", sMeasure.getStringByKey(oFF.SfxConstants.UNITTYPE));
			tMeasure.putStringNotNullAndNotEmpty("UnitFixed", sMeasure.getStringByKey(oFF.SfxConstants.MEASURE_UNITS));
			if (sMeasure.hasStringByKey(oFF.SfxConstants.DATA_TYPE_NAME))
			{
				switch (sMeasure.getStringByKey(oFF.SfxConstants.DATA_TYPE_NAME))
				{
					case oFF.SfxConstants.DATA_TYPE_DECIMAL:
						tMeasure.putString("DataTypeInternal", "DecimalFloat");
						break;

					case oFF.SfxConstants.DATA_TYPE_INTEGER:
						tMeasure.putString("DataTypeInternal", "Int");
						break;
				}
			}
			tMeasure.putStringNotNullAndNotEmpty("UnitDimension", sMeasure.getStringByKey(oFF.SfxConstants.UNIT_DIMENSION));
			tMeasure.putStringNotNullAndNotEmpty("UnitDimensionProperty", sMeasure.getStringByKey(oFF.SfxConstants.UNIT_DIMENSION_PROPERTY));
			tMeasure.putBoolean("OverrideDescription", true);
			tMeasure.putString("RateType", sMeasure.getStringByKey(oFF.SfxConstants.RATE_TYPE));
			if (sMeasure.containsKey(oFF.SfxConstants.EXTENDED))
			{
				tMeasure.putBoolean("Extended", sMeasure.getBooleanByKey(oFF.SfxConstants.EXTENDED));
			}
			let aggregationType = sMeasure.getStringByKey(oFF.SfxConstants.AGGREGATIONTYPE);
			let description = sMeasure.getStringByKey(oFF.SfxConstants.DESCRIPTION);
			tMeasure.putStringNotNullAndNotEmpty("ExceptionAggregation", sMeasure.getStringByKey(oFF.SfxConstants.EXCEPTIONAGGREGATIONTYPE));
			let exceptionAggregationDims = sMeasure.getListByKey(oFF.SfxConstants.AGGREGATION_DIMENSION_NAME);
			if (oFF.notNull(exceptionAggregationDims))
			{
				let tExceptionAggregationDims = tMeasure.putNewList("ExceptionAggregationDimensions");
				for (let k = 0; k < exceptionAggregationDims.size(); k++)
				{
					tExceptionAggregationDims.addString(exceptionAggregationDims.get(k).asString().getString());
				}
			}
			let formula = sMeasure.getStringByKey(oFF.SfxConstants.FORMULA);
			let jsonFormula = sMeasure.getStringByKey(oFF.SfxConstants.JSONFORMULA);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(formula) && oFF.XStringUtils.isNotNullAndNotEmpty(jsonFormula))
			{
				let jsonParser = oFF.JsonParserFactory.newInstance();
				let parsedFormula = jsonParser.parse(jsonFormula).asStructure();
				if (oFF.XStringUtils.isNullOrEmpty(description))
				{
					description = measureName;
				}
				if (parsedFormula.containsKey("Operator") || parsedFormula.containsKey("Selection"))
				{
					tMeasure.putString("CType", oFF.MemberType.RESTRICTED_MEASURE.getName());
					tMeasure.putString("MemberType", "SelectionMeasure");
					oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula(parsedFormula);
					if (parsedFormula.containsKey("Selection"))
					{
						tMeasure.put("InAFilterExpression", parsedFormula);
					}
					else
					{
						let restrictedMeasure = tMeasure.putNewStructure("InAFilterExpression");
						restrictedMeasure.put("Selection", parsedFormula);
					}
				}
				else
				{
					tMeasure.putString("MemberType", "FormulaMeasure");
					tMeasure.putString("CType", oFF.MemberType.FORMULA.getName());
					tMeasure.put("Formula", parsedFormula);
				}
			}
			else
			{
				tMeasure.putString("CType", oFF.MemberType.BASIC_MEASURE.getName());
				tMeasure.putString("MemberType", "Measure");
				let memberOperand = tMeasure.putNewStructure("MemberOperand");
				memberOperand.putString("AttributeName", "Measures");
				memberOperand.putString("Comparison", "=");
				memberOperand.putString("Value", measureName);
			}
			tMeasure.putString("Aggregation", aggregationType);
			tMeasure.putString("Description", description);
			if (sMeasure.containsKey(oFF.SfxConstants.IGNORE_EXTERNAL_DIMENSIONS) && sMeasure.getElementTypeByKey(oFF.SfxConstants.IGNORE_EXTERNAL_DIMENSIONS) === oFF.PrElementType.LIST)
			{
				let sIgnoreExternalDimensions = sMeasure.getListByKey(oFF.SfxConstants.IGNORE_EXTERNAL_DIMENSIONS);
				if (oFF.notNull(sIgnoreExternalDimensions) && sIgnoreExternalDimensions.size() > 0)
				{
					tMeasure.putNewList("IgnoreExternalDimensions").addAll(sIgnoreExternalDimensions);
				}
			}
			else
			{
				let refDimensions = sMeasure.getStringByKeyExt(oFF.SfxConstants.REF_DIMENSIONS, "");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(refDimensions))
				{
					let ignoreExternalDimensions = oFF.XStringTokenizer.splitString(refDimensions, ",");
					let tIgnoreExternalDimensions = tMeasure.putNewList("IgnoreExternalDimensions");
					for (let m = 0; m < ignoreExternalDimensions.size(); m++)
					{
						tIgnoreExternalDimensions.addString(ignoreExternalDimensions.get(m));
					}
				}
			}
			oFF.InADocConverterSfxRepo.setVisibility(tMeasure, sMeasure.getBooleanByKeyExt(oFF.SfxConstants.VISIBLE, true));
			oFF.InADocConverterSfxRepo.setMinimumDrillState(sMeasure, tMeasure, application);
			let currencyTranslationStructure = sMeasure.getStructureByKey(oFF.SfxConstants.CURRENCY_TRANSLATION);
			if (oFF.notNull(ctListItem) && oFF.notNull(currencyTranslationStructure) && currencyTranslationStructure.hasStringByKey(oFF.SfxConstants.CURRENCY_VARIABLE) && customVariableNames.contains(currencyTranslationStructure.getStringByKey(oFF.SfxConstants.CURRENCY_VARIABLE)))
			{
				let ctVariableName = currencyTranslationStructure.getStringByKey(oFF.SfxConstants.CURRENCY_VARIABLE);
				let currencyTranslationName = oFF.XStringUtils.concatenate5("CurrencyTranslation", "_", "CustomVariable", "_", measureName);
				tMeasure.putString("CurrencyTranslationName", currencyTranslationName);
				let ctConfigString = currencyTranslationStructure.getStringByKey(oFF.SfxConstants.CURRENCY_TRANSLATION_CONFIG);
				if (oFF.notNull(ctConfigString))
				{
					let ctConfigStructure = oFF.JsonParserFactory.createFromString(ctConfigString);
					if (oFF.notNull(ctConfigStructure) && ctConfigStructure.isStructure())
					{
						let currencyTranslationRepoElement = ctListItem.addNewStructure();
						currencyTranslationRepoElement.putAll(ctConfigStructure.asStructure());
						currencyTranslationRepoElement.putString("CType", "CurrencyTranslationItem");
						currencyTranslationRepoElement.putString("Name", currencyTranslationName);
						currencyTranslationRepoElement.putString("Description", currencyTranslationName);
						currencyTranslationRepoElement.putNewStructure("TargetCurrency").putString("Variable", ctVariableName);
					}
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processMetadataProperties = function(sCData, tModellerDefn, isEmbedded)
{
	let metadataProperties = tModellerDefn.putNewStructure("ModellerMetadataProperties");
	oFF.InADocConverterSfxRepo.processEpmObjectProperties(sCData, metadataProperties, isEmbedded);
	oFF.InADocConverterSfxRepo.processDataAccessRestrictions(sCData, metadataProperties);
	oFF.InADocConverterSfxRepo.processHasUserDefinedMeasuresProperty(sCData, metadataProperties);
	oFF.InADocConverterSfxRepo.processIsPlanningProperty(sCData, metadataProperties);
	oFF.InADocConverterSfxRepo.processLeadingStructure(sCData, metadataProperties);
	oFF.InADocConverterSfxRepo.processVersionDimensionMappings(sCData, metadataProperties);
};
oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula = function(element)
{
	if (element.isStructure())
	{
		let structure = element.asStructure();
		let keys = structure.getKeysAsIterator();
		while (keys.hasNext())
		{
			let key = keys.next();
			if (oFF.XString.isEqual(key, "FieldName") && oFF.XString.isEqual(structure.getStringByKey(key), ".ID"))
			{
				structure.putString("FieldName", "[Measures].[Measures]");
			}
			else
			{
				oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula(structure.getByKey(key));
			}
		}
	}
	else if (element.isList())
	{
		let list = element.asList();
		for (let i = 0; i < list.size(); i++)
		{
			oFF.InADocConverterSfxRepo.processRestrictedMeasureFormula(list.get(i));
		}
	}
};
oFF.InADocConverterSfxRepo.processSecondaryStructure = function(sCData, tModellerDefn)
{
	let sDataSource = sCData.getStructureByKey(oFF.SfxConstants.DATA_SOURCE);
	if (oFF.notNull(sDataSource) && oFF.XString.isEqual(sDataSource.getStringByKey(oFF.SfxConstants.DATA_SOURCE_TYPE), oFF.SfxConstants.DATA_SOURCE_TYPE_INAMODEL))
	{
		let tModellerDimensions = tModellerDefn.getStructureByKey("ModellerDimensions");
		let tDimensions = tModellerDimensions.getListByKey("Dimensions");
		let measureDim = tDimensions.addNewStructure();
		measureDim.putString("CType", oFF.DimensionType.SECONDARY_STRUCTURE.getName());
		measureDim.putBoolean("IsDelta", true);
		measureDim.putBoolean("SecondaryStructure", true);
		measureDim.putNewList("MembersRepo");
	}
};
oFF.InADocConverterSfxRepo.processThresholds = function(sCData, tModellerDefn, accountDimension, accountHierarchy)
{
	let sFormulaExceptions = sCData.getStructureByKey(oFF.SfxConstants.VISUALIZATIONS);
	if (oFF.isNull(sFormulaExceptions))
	{
		return;
	}
	let accountName = null;
	if (oFF.notNull(accountDimension))
	{
		accountName = accountDimension.getStringByKey("Name");
	}
	let sDataSource = sCData.getStructureByKey(oFF.SfxConstants.DATA_SOURCE);
	let dataSourceName = sDataSource.getStringByKey(oFF.SfxConstants.OBJECT_NAME);
	let tFormulaExceptions = null;
	let formulaExMemberIterator = sFormulaExceptions.getKeysAsIterator();
	while (formulaExMemberIterator.hasNext())
	{
		let formulaExMember = formulaExMemberIterator.next();
		let formulaException = sFormulaExceptions.getStructureByKey(formulaExMember);
		let sThresholds = formulaException.getStructureByKey(oFF.SfxConstants.THRESHOLDS);
		if (oFF.isNull(sThresholds) || sThresholds.isEmpty())
		{
			continue;
		}
		if (oFF.isNull(tFormulaExceptions))
		{
			let tFormulaExceptionManager = tModellerDefn.putNewStructure("FormulaExceptionManager");
			tFormulaExceptionManager.putString("CType", "FormulaExceptions");
			tFormulaExceptions = tFormulaExceptionManager.putNewList("FormulaExceptionsModeler");
		}
		let formulaExMemberName = oFF.InADocConverterSfxRepo.getAccountMemberName(accountName, accountHierarchy, formulaExMember);
		let formulaExStructure = tFormulaExceptions.addNewStructure();
		formulaExStructure.putString("CType", "FormulaException");
		let formulaExName = oFF.XStringUtils.concatenate5(oFF.QFormulaExceptionConstants.MODEL_THRESHOLD_PREFIX.getName(), "_[", dataSourceName, "]_", formulaExMember);
		formulaExStructure.putString("Name", formulaExName);
		formulaExStructure.putString("Type", oFF.FormulaExceptionType.BASE_MEASURE_ONLY.getName());
		formulaExStructure.putNewList("EvaluateOn");
		let formulaExStructureContext = formulaExStructure.putNewList("StructureContext");
		formulaExStructureContext.addNewStructure();
		let formulaExBaseMeasure = formulaExStructureContext.addNewStructure();
		formulaExStructureContext.addNewStructure();
		formulaExBaseMeasure.putString("MemberName", formulaExMemberName);
		if (oFF.notNull(accountName))
		{
			formulaExBaseMeasure.putString("DimensionName", accountName);
		}
		else
		{
			formulaExBaseMeasure.putBoolean("MeasureStructure", true);
		}
		let sIntervals = sThresholds.getListByKey(oFF.SfxConstants.INTERVALS);
		if (oFF.isNull(sIntervals))
		{
			continue;
		}
		let formulaExThresholds = formulaExStructure.putNewList("Threshold");
		let normalizeIntervals = oFF.InADocConverterSfxRepo.isNormalizeIntervals(tModellerDefn, accountDimension, formulaExMember);
		for (let l = 0; l < sIntervals.size(); l++)
		{
			let sInterval = sIntervals.getStructureAt(l);
			let text = sInterval.getStringByKey(oFF.SfxConstants.NAME);
			let low = sInterval.getStringByKey(oFF.SfxConstants.LOW);
			let lowValue = oFF.XDouble.convertFromStringWithDefault(low, 0);
			let lowInclusive = sInterval.getBooleanByKey(oFF.SfxConstants.LOW_INCLUSIVE);
			let high = sInterval.getStringByKey(oFF.SfxConstants.HIGH);
			let highValue = oFF.XDouble.convertFromStringWithDefault(high, 0);
			let highInclusive = sInterval.getBooleanByKey(oFF.SfxConstants.HIGH_INCLUSIVE);
			let color = sInterval.getStringByKey(oFF.SfxConstants.COLOR);
			if (normalizeIntervals)
			{
				lowValue = lowValue / 100;
				highValue = highValue / 100;
			}
			let formulaExThreshold = formulaExThresholds.addNewStructure();
			formulaExThreshold.putString("Name", oFF.XStringUtils.concatenate3(formulaExName, ":", oFF.XInteger.convertToString(l)));
			formulaExThreshold.putString("Text", text);
			formulaExThreshold.putInteger("AlertLevel", oFF.AlertLevel.GOOD_1.getLevel());
			formulaExThreshold.putString("Color", color);
			if (!oFF.XStringUtils.isNullOrEmpty(low) && oFF.XStringUtils.isNullOrEmpty(high))
			{
				formulaExThreshold.putDouble("Low", lowValue);
				if (lowInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.GREATER_EQUAL));
				}
				else
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.GREATER_THAN));
				}
			}
			else if (oFF.XStringUtils.isNullOrEmpty(low) && !oFF.XStringUtils.isNullOrEmpty(high))
			{
				formulaExThreshold.putDouble("Low", highValue);
				if (highInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.LESS_EQUAL));
				}
				else
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.LESS_THAN));
				}
			}
			else if (!oFF.XStringUtils.isNullOrEmpty(low) && !oFF.XStringUtils.isNullOrEmpty(high))
			{
				if (lowInclusive && highInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.BETWEEN));
					formulaExThreshold.putDouble("Low", lowValue);
					formulaExThreshold.putDouble("High", highValue);
				}
				else if (!lowInclusive && !highInclusive)
				{
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.BETWEEN_EXCLUDING));
					formulaExThreshold.putDouble("Low", lowValue);
					formulaExThreshold.putDouble("High", highValue);
				}
				else
				{
					formulaExThreshold.remove("Name");
					formulaExThreshold.putString("Name", oFF.XStringUtils.concatenate4(formulaExName, ":", oFF.XInteger.convertToString(l), "A"));
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL));
					if (lowInclusive)
					{
						formulaExThreshold.putDouble("Low", lowValue);
					}
					else
					{
						formulaExThreshold.putDouble("Low", highValue);
					}
					formulaExThreshold = formulaExThresholds.addNewStructure();
					formulaExThreshold.putString("Name", oFF.XStringUtils.concatenate4(formulaExName, ":", oFF.XInteger.convertToString(l), "B"));
					formulaExThreshold.putString("Text", text);
					formulaExThreshold.putInteger("AlertLevel", oFF.AlertLevel.GOOD_1.getLevel());
					formulaExThreshold.putString("Color", color);
					formulaExThreshold.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.BETWEEN_EXCLUDING));
					formulaExThreshold.putDouble("Low", lowValue);
					formulaExThreshold.putDouble("High", highValue);
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.processVersionDimensionMappings = function(sCData, metadataProperties)
{
	let dimensionMappings = sCData.getListByKey(oFF.SfxConstants.DIMENSION_MAPPING);
	if (oFF.notNull(dimensionMappings) && !dimensionMappings.isEmpty())
	{
		for (let i = 0; i < dimensionMappings.size(); i++)
		{
			let mapping = dimensionMappings.getStructureAt(i);
			let dimType = mapping.getStringByKey(oFF.SfxConstants.DIM_TYPE);
			if (oFF.XString.isEqual(dimType, oFF.SfxConstants.DIM_TYPE_VERSION))
			{
				let mappingProperties = mapping.getListByKey(oFF.SfxConstants.PROPERTIES);
				if (oFF.notNull(mappingProperties) && !mappingProperties.isEmpty())
				{
					for (let idxProperties = 0; idxProperties < mappingProperties.size(); idxProperties++)
					{
						let mappingProperty = mappingProperties.getStructureAt(idxProperties);
						let mappingDetails = mappingProperty.getListByKey(oFF.SfxConstants.MAPPING_DETAILS);
						let valueMappingNeeded = mappingProperty.getBooleanByKeyExt(oFF.SfxConstants.VALUE_MAPPING_NEEDED, false);
						if (valueMappingNeeded && oFF.notNull(mappingDetails) && !mappingDetails.isEmpty())
						{
							metadataProperties.putString("MappedVersionDimension", mappingProperty.getStringByKey(oFF.SfxConstants.SOURCE_COLUMN_NAME));
						}
					}
				}
			}
		}
	}
};
oFF.InADocConverterSfxRepo.setMinimumDrillState = function(sFormula, tFormula, application)
{
	if (application.getSession().hasFeature(oFF.FeatureToggleOlap.SFX_MINIMUM_DRILL_STATE))
	{
		let minimumDrillStateParamType = sFormula.getElementTypeByKey(oFF.SfxConstants.MINIMUM_DRILL_STATE);
		if (oFF.notNull(minimumDrillStateParamType))
		{
			let minimumDrillStateList = tFormula.putNewList("MinimumDrillState");
			if (minimumDrillStateParamType === oFF.PrElementType.LIST)
			{
				minimumDrillStateList.addAll(sFormula.getListByKey(oFF.SfxConstants.MINIMUM_DRILL_STATE));
			}
			else if (minimumDrillStateParamType === oFF.PrElementType.STRING)
			{
				minimumDrillStateList.addString(sFormula.getStringByKey(oFF.SfxConstants.MINIMUM_DRILL_STATE));
			}
		}
	}
};
oFF.InADocConverterSfxRepo.setVisibility = function(tMember, isVisible)
{
	if (isVisible)
	{
		tMember.putString("Visibility", "Visible");
	}
	else
	{
		tMember.putString("Visibility", "Hidden");
	}
};
oFF.InADocConverterSfxRepo.staticSetupInAConverter = function()
{
	oFF.DocConverterFactory.registerFactory(oFF.QModelFormat.SFX, oFF.QModelFormat.INA_REPOSITORY, new oFF.InADocConverterSfxRepo());
};
oFF.InADocConverterSfxRepo.prototype.convert = function(application, content, targetContentType)
{
	let messages = oFF.MessageManager.createMessageManagerExt(application.getSession());
	let tContent = oFF.XContent.createContent();
	tContent.setJsonObject(this.processJsonContent(application, content));
	tContent.setContentType(oFF.QModelFormat.INA_REPOSITORY);
	let extResult = oFF.ExtResult.create(tContent, messages);
	return extResult;
};
oFF.InADocConverterSfxRepo.prototype.newDocConverter = function(sourceType, targetType)
{
	return new oFF.InADocConverterSfxRepo();
};
oFF.InADocConverterSfxRepo.prototype.processJsonContent = function(application, content)
{
	let targetRoot = oFF.PrFactory.createStructure();
	let jsonContent = content.getJsonContent();
	if (oFF.isNull(jsonContent))
	{
		return targetRoot;
	}
	let sourceRoot = jsonContent.asStructure();
	let sData = sourceRoot.getStructureByKey(oFF.SfxConstants.DATA);
	let sCData;
	if (oFF.notNull(sData))
	{
		sCData = sData.getStructureByKey(oFF.SfxConstants.CDATA);
	}
	else
	{
		sCData = sourceRoot.getStructureByKey(oFF.SfxConstants.CDATA);
	}
	if (oFF.isNull(sCData))
	{
		return targetRoot;
	}
	let sDataSource = sCData.getStructureByKey(oFF.SfxConstants.DATA_SOURCE);
	targetRoot.put("DataSource", sDataSource);
	let tModellerDefn = targetRoot.putNewStructure("ModellerDefinition");
	let isBlendedCube = sCData.getBooleanByKeyExt(oFF.SfxConstants.IS_BLENDED_CUBE, false);
	if (isBlendedCube)
	{
		return targetRoot;
	}
	let session = application.getSession();
	let isEmbedded = false;
	let tMetadata = sourceRoot.getStructureByKey(oFF.SfxConstants.METADATA);
	if (oFF.notNull(tMetadata))
	{
		isEmbedded = tMetadata.getBooleanByKeyExt(oFF.SfxConstants.IS_EMBEDDED, false);
	}
	let sDimensions = sCData.getListByKey(oFF.SfxConstants.DIMENSIONS);
	let isIntegratedMode = oFF.XString.isEqual(sCData.getStringByKey(oFF.SfxConstants.MODE), oFF.SfxConstants.INTEGRATED);
	let tModellerDimensions = tModellerDefn.putNewStructure("ModellerDimensions");
	let tDimensions = tModellerDimensions.putNewList("Dimensions");
	let accountDimension = null;
	let accountHierarchy = null;
	let defaultHierarchyMap = oFF.InADocConverterSfxRepo.obtainExtendedDimensionDefaultHierarchies(sCData);
	for (let i = 0; i < sDimensions.size(); i++)
	{
		let sDim = sDimensions.getStructureAt(i);
		let dimName = isIntegratedMode ? sDim.getStringByKey(oFF.SfxConstants.COLUMN_NAME) : sDim.getStringByKey(oFF.SfxConstants.DIMENSION_ID);
		let type = sDim.getStringByKey(oFF.SfxConstants.TYPE);
		let unassignedMember = sDim.getStringByKey(oFF.SfxConstants.UNASSIGNED_MEMBER);
		let dimDisplayGroup = sDim.getStringByKey(oFF.SfxConstants.COLUMN_GROUP);
		let fiscalConfig = sDim.getStructureByKey(oFF.SfxConstants.FISCAL_CONFIG);
		let timeConfig = sDim.getStructureByKey(oFF.SfxConstants.TIME_CONFIG);
		let isUserManaged = sDim.getBooleanByKey(oFF.SfxConstants.IS_USER_MANAGED);
		let customizedDescription = sDim.getStringByKey(oFF.SfxConstants.CUSTOMIZED_DESCRIPTION);
		let hasHiddenDim = sDim.getBooleanByKey(oFF.SfxConstants.IS_HIDDEN);
		if (oFF.XStringUtils.isNullOrEmpty(dimName))
		{
			continue;
		}
		let defaultHierarchyName = sDim.getStringByKeyExt(oFF.SfxConstants.DEFAULT_HIERARCHY, defaultHierarchyMap.getByKey(dimName));
		let tDim = oFF.PrStructure.create();
		tDim.putStringNotNullAndNotEmpty("DefaultHierarchy", defaultHierarchyName);
		defaultHierarchyMap.remove(dimName);
		if (oFF.XString.isEqual(type, "Account"))
		{
			tDim.putString("CType", oFF.DimensionType.ACCOUNT.getName());
			tDim.putString("AccountTypeAttributeName", sDim.getStringByKey(oFF.SfxConstants.ACCOUNTTYPEATTRIBUTENAME));
			accountHierarchy = sDim.getStringByKey(oFF.SfxConstants.DEFAULT_HIERARCHY);
			accountDimension = tDim;
		}
		if (oFF.notNull(fiscalConfig))
		{
			tDim.putBoolean("FiscalEnabled", fiscalConfig.getBooleanByKeyExt(oFF.SfxConstants.ENABLED, false));
			let monthShift = fiscalConfig.getByKey(oFF.SfxConstants.MONTH_SHIFT);
			if (oFF.notNull(monthShift) && monthShift.isNumeric())
			{
				tDim.putInteger("FiscalShift", oFF.XLong.convertToInt(fiscalConfig.getLongByKey(oFF.SfxConstants.MONTH_SHIFT)));
			}
			else
			{
				tDim.putInteger("FiscalShift", oFF.XInteger.convertFromStringWithDefault(fiscalConfig.getStringByKey(oFF.SfxConstants.MONTH_SHIFT), 0));
			}
			tDim.putString("FiscalDisplayPeriod", fiscalConfig.getStringByKey(oFF.SfxConstants.DISPLAY_PERIOD));
			tDim.putString("FiscalPeriodPrefix", fiscalConfig.getStringByKey(oFF.SfxConstants.PERIOD_PREFIX));
		}
		if (hasHiddenDim)
		{
			tDim.putInteger("Visibility", 1);
		}
		if (oFF.notNull(timeConfig) && timeConfig.hasElements())
		{
			let periodPrefixLabel = "";
			let additionalPeriods = timeConfig.getIntegerByKey(oFF.SfxConstants.ADDITIONAL_PERIODS);
			let periodPrefix = timeConfig.getStringByKey(oFF.SfxConstants.PERIOD_PREFIX);
			let usePrefix = timeConfig.getBooleanByKey(oFF.SfxConstants.USE_PREFIX);
			let timeConfigEnablePattern = timeConfig.getBooleanByKey(oFF.SfxConstants.ENABLE_PATTERN);
			if (usePrefix && oFF.XStringUtils.isNotNullAndNotEmpty(periodPrefix))
			{
				periodPrefixLabel = periodPrefix;
			}
			else if (!usePrefix && additionalPeriods === 0)
			{
				periodPrefixLabel = "";
			}
			else if (!usePrefix && additionalPeriods > 0)
			{
				periodPrefixLabel = "P";
			}
			tDim.putInteger("additionalPeriods", additionalPeriods);
			tDim.putBoolean("useMonthLabel", !usePrefix);
			tDim.putString("periodPrefix", periodPrefixLabel);
			tDim.putBoolean("TimeConfigEnablePattern", timeConfigEnablePattern);
			if (session.hasFeature(oFF.FeatureToggleOlap.FLEXIBLE_TIME_DYNAMIC_TIME))
			{
				let pattern = timeConfig.getStringByKey(oFF.SfxConstants.PATTERN);
				let firstWeekDay = timeConfig.getStringByKey(oFF.SfxConstants.FIRST_WEEK_DAY);
				let firstYearWeekIndicator = timeConfig.getStringByKey(oFF.SfxConstants.FIRST_YEAR_WEEK_INDICATOR);
				tDim.putString("Pattern", pattern);
				tDim.putString("FirstWeekDay", firstWeekDay);
				tDim.putString("FirstYearWeekIndicator", firstYearWeekIndicator);
			}
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(customizedDescription))
		{
			tDim.putString("Description", customizedDescription);
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dimDisplayGroup))
		{
			tDim.putString("DisplayGroupName", dimDisplayGroup);
		}
		if (!tDim.isEmpty())
		{
			tDim.putString("Name", dimName);
			tDim.putBoolean("IsDelta", true);
			tDim.putBoolean("IsUserManaged", isUserManaged);
			tDim.putStringNotNull("unassignedMember", unassignedMember);
			if (!tDim.containsKey("CType"))
			{
				tDim.putString("CType", oFF.OlapComponentType.ABSTRACT_DIMENSION.getName());
			}
			tDimensions.add(tDim);
		}
	}
	let remainingDefaultHierarchyDimensions = defaultHierarchyMap.getKeysAsIterator();
	while (remainingDefaultHierarchyDimensions.hasNext())
	{
		let dimKey = remainingDefaultHierarchyDimensions.next();
		let defaultHierarchyDimension = tDimensions.addNewStructure();
		defaultHierarchyDimension.putString("Name", dimKey);
		defaultHierarchyDimension.putBoolean("IsDelta", true);
		defaultHierarchyDimension.putBoolean("IsUserManaged", isIntegratedMode);
		defaultHierarchyDimension.putString("CType", oFF.OlapComponentType.ABSTRACT_DIMENSION.getName());
		defaultHierarchyDimension.putString("DefaultHierarchy", defaultHierarchyMap.getByKey(dimKey));
	}
	let capabilitySettings = sCData.getStructureByKey(oFF.SfxConstants.CAPABILITY);
	oFF.InADocConverterSfxRepo.processCurrencyTranslationSettings(sCData, tModellerDefn, capabilitySettings, oFF.notNull(accountDimension));
	oFF.InADocConverterSfxRepo.processCustomVariableSettings(sCData, tModellerDefn);
	let bSkipMemberAndThresholdProcessing = sourceRoot.getBooleanByKeyExt(oFF.SfxConstants.SKIP_MEMBER_AND_THRESHOLD_PROCESSING, false);
	if (!bSkipMemberAndThresholdProcessing)
	{
		oFF.InADocConverterSfxRepo.processAccountMembers(sCData, accountDimension, accountHierarchy, application);
		oFF.InADocConverterSfxRepo.processMeasures(sCData, tModellerDefn, accountDimension, application, isEmbedded);
		oFF.InADocConverterSfxRepo.processSecondaryStructure(sCData, tModellerDefn);
		oFF.InADocConverterSfxRepo.processThresholds(sCData, tModellerDefn, accountDimension, accountHierarchy);
	}
	oFF.InADocConverterSfxRepo.processMetadataProperties(sCData, tModellerDefn, isEmbedded);
	oFF.InADocConverterSfxRepo.processExtendedDimensions(sCData, tModellerDefn);
	return targetRoot;
};

oFF.InADocConverterUqmRepo = function() {};
oFF.InADocConverterUqmRepo.prototype = new oFF.DocConverterFactory();
oFF.InADocConverterUqmRepo.prototype._ff_c = "InADocConverterUqmRepo";

oFF.InADocConverterUqmRepo.staticSetupInAConverter = function()
{
	oFF.DocConverterFactory.registerFactory(oFF.QModelFormat.UQM, oFF.QModelFormat.INA_REPOSITORY, new oFF.InADocConverterUqmRepo());
};
oFF.InADocConverterUqmRepo.prototype.convert = function(application, content, targetContentType)
{
	let jsonContent = content.getJsonContent();
	let definitionAsStructure = jsonContent.asStructure();
	let messages = oFF.MessageManager.createMessageManagerExt(application.getSession());
	let dataSourceName = definitionAsStructure.getStringByKey("DataSourceName");
	let targetRoot = oFF.PrFactory.createStructure();
	if (oFF.notNull(dataSourceName))
	{
		let dataSource = oFF.QFactory.createDataSourceWithFqn(dataSourceName);
		let exporter = oFF.QInAExportFactory.createForData(application, null);
		let sDataSource = exporter.exportDataSource(dataSource, false);
		targetRoot.put("DataSource", sDataSource);
	}
	let tContent = oFF.XContent.createContent();
	tContent.setJsonObject(targetRoot);
	tContent.setContentType(oFF.QModelFormat.INA_REPOSITORY);
	let extResult = oFF.ExtResult.create(tContent, messages);
	return extResult;
};
oFF.InADocConverterUqmRepo.prototype.newDocConverter = function(sourceType, targetType)
{
	return new oFF.InADocConverterUqmRepo();
};

oFF.InAFusion = function() {};
oFF.InAFusion.prototype = new oFF.QDocFusionFactory();
oFF.InAFusion.prototype._ff_c = "InAFusion";

oFF.InAFusion.staticSetup = function()
{
	oFF.QDocFusionFactory.registerFactory(new oFF.InAFusion());
};
oFF.InAFusion.prototype.m_application = null;
oFF.InAFusion.prototype.newDocFusion = function(application)
{
	let newObj = new oFF.InAFusion();
	newObj.setupApplicationContext(application);
	return newObj;
};
oFF.InAFusion.prototype.processFusion = function(syncType, listener, customIdentifier, config)
{
	let carrier = oFF.InAFusionResult.create(this.m_application, config);
	return oFF.InAFusionMainAction.createAndRun(syncType, listener, customIdentifier, carrier);
};
oFF.InAFusion.prototype.setupApplicationContext = function(application)
{
	this.m_application = application;
};

oFF.InAQMgrStartupBlending = function() {};
oFF.InAQMgrStartupBlending.prototype = new oFF.XObject();
oFF.InAQMgrStartupBlending.prototype._ff_c = "InAQMgrStartupBlending";

oFF.InAQMgrStartupBlending.create = function(syncAction)
{
	let newObject = new oFF.InAQMgrStartupBlending();
	newObject.m_syncAction = syncAction;
	newObject.m_executedResultSetContainers = oFF.XList.create();
	newObject.m_metadataSerializationFunctions = oFF.XList.create();
	newObject.m_pendingFAMQueryIdentifiers = oFF.XList.create();
	return newObject;
};
oFF.InAQMgrStartupBlending.prototype.m_blendingMgrFunctionSupplier = null;
oFF.InAQMgrStartupBlending.prototype.m_blendingMgrSyncType = null;
oFF.InAQMgrStartupBlending.prototype.m_executedResultSetContainers = null;
oFF.InAQMgrStartupBlending.prototype.m_implicitBatchStarted = false;
oFF.InAQMgrStartupBlending.prototype.m_metadataSerializationFunctions = null;
oFF.InAQMgrStartupBlending.prototype.m_pendingFAMQueryIdentifiers = null;
oFF.InAQMgrStartupBlending.prototype.m_syncAction = null;
oFF.InAQMgrStartupBlending.prototype.allQueriesExecuted = function()
{
	for (let i = 0; i < this.m_executedResultSetContainers.size(); i++)
	{
		if (this.m_executedResultSetContainers.get(i).getResultSetSyncState().isNotInSync())
		{
			return false;
		}
	}
	for (let k = 0; k < this.m_metadataSerializationFunctions.size(); k++)
	{
		if (this.m_metadataSerializationFunctions.get(k).getSyncState().isNotInSync())
		{
			return false;
		}
	}
	if (!this.m_pendingFAMQueryIdentifiers.isEmpty())
	{
		return false;
	}
	return true;
};
oFF.InAQMgrStartupBlending.prototype.createHanaMetadataSerializationFunction = function(queryManager)
{
	let inaRequestStructure = oFF.PrFactory.createStructure();
	let inaMetadata = queryManager.setInnerStructure(inaRequestStructure, "Metadata", null, null);
	inaMetadata.getStructureByKey("DataSource").remove("ValidationHash");
	let schema = queryManager.getResultSetPersistenceSchema();
	let table = queryManager.getResultSetPersistenceTable();
	let inaFeatureRequest = inaMetadata.putNewStructure("ResultSetFeatureRequest");
	inaFeatureRequest.putString("ResultFormat", "SerializedData");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(schema) && oFF.XStringUtils.isNotNullAndNotEmpty(table))
	{
		inaFeatureRequest.putString("ResultSetPersistanceSchema", schema);
		inaFeatureRequest.putString("ResultSetPersistanceTable", table);
		inaFeatureRequest.putString("ResultSetPersistanceIdentifier", queryManager.getResultSetPersistenceIdentifier());
	}
	let rpcFunction = queryManager.createFunction();
	rpcFunction.getRpcRequest().setRequestStructure(inaRequestStructure);
	return rpcFunction;
};
oFF.InAQMgrStartupBlending.prototype.executeBlendingQueryManagerCreation = function()
{
	let blendingDefinition = this.getBlendingDefinition();
	let preQueries = this.getBlendingPreQueries(blendingDefinition.getSources());
	if (preQueries.hasElements())
	{
		this.startImplicitBatchMode();
		this.executePreQueries(preQueries, blendingDefinition.getBlendingHost());
		this.m_blendingMgrFunctionSupplier.createBlendingFunction().processFunctionExecution(oFF.SyncType.NON_BLOCKING, this.m_syncAction, oFF.QueryManagerMode.BLENDING);
		this.stopImplicitBatchMode(this.m_implicitBatchStarted, this.m_blendingMgrSyncType);
	}
	else
	{
		this.m_blendingMgrFunctionSupplier.createBlendingFunction().processFunctionExecution(this.m_blendingMgrSyncType, this.m_syncAction, oFF.QueryManagerMode.BLENDING);
	}
	let serviceConfig = this.m_syncAction.getQueryManager().getServiceConfig();
	let blendingSources = serviceConfig.getBlendingDefinition().getSources();
	for (let i = 0; i < blendingSources.size(); i++)
	{
		blendingSources.get(i).getQueryModel().destroyTransientObjects();
	}
};
oFF.InAQMgrStartupBlending.prototype.executePreQueries = function(preQueries, blendingHost)
{
	for (let i = 0; i < preQueries.size(); i++)
	{
		let preQueryPair = preQueries.get(i);
		let preQueryManager = preQueryPair.getObject().getQueryManager();
		preQueryManager.getPreQueryExecutor().processExecutionAsPreQueryInBatch(blendingHost.getSystemName(), preQueryPair.getName(), null);
	}
};
oFF.InAQMgrStartupBlending.prototype.executeRemoteBlendingSubQueries = function(syncType, blendingSources, blendingHost)
{
	for (let i = 0; i < blendingSources.size(); i++)
	{
		let source = blendingSources.get(i);
		let queryModel = source.getQueryModel();
		queryModel.setShouldUseActualTextField(true);
		let queryManager = queryModel.getQueryManager();
		source.setIsRemoteSource(!oFF.XString.isEqual(blendingHost.getSystemName(), this.getSystemName(source)));
		if (!queryModel.getModelCapabilities().supportsRemoteBlending() || !blendingHost.supportsRemoteBlending())
		{
			oFF.noSupport();
		}
		if (source.isRemoteSource())
		{
			source.updatePersistenceIdentifier(blendingHost);
			let olapEnv = queryManager.getOlapEnv();
			let cache = !blendingHost.getSystemDescription().isSystemMappingValid(queryManager.getSystemDescription()) ? olapEnv.getCachedRemoteBlendingData(queryManager.getResultSetPersistenceIdentifier()) : null;
			if (oFF.isNull(cache) || oFF.XStringUtils.isNullOrEmpty(cache.getView()))
			{
				if (source.isDelayCubeRequest() && queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA))
				{
					queryManager.setResultSetPersistenceTargetType(oFF.BlendingPersistenceType.VIEW);
					let serializationFunction = this.createHanaMetadataSerializationFunction(queryManager);
					this.m_metadataSerializationFunctions.add(serializationFunction);
					serializationFunction.processFunctionExecution(syncType, this, source);
				}
				else
				{
					this.m_executedResultSetContainers.add(queryManager.getActiveResultSetContainer());
					queryManager.processQueryExecutionAsBlendingSource(syncType, source.isDelayCubeRequest() ? oFF.BlendingPersistenceType.VIEW : oFF.BlendingPersistenceType.ALL_DATA, this, source);
				}
			}
			else
			{
				queryManager.getActiveResultSetContainer().setSerializedData(cache.getView(), cache.getCube());
				queryManager.getActiveResultSetContainer().endSync();
			}
		}
		else
		{
			queryModel.generateTransientObjects();
			if (queryModel.getModelCapabilities().supportsCubeCache())
			{
				source.updatePersistenceIdentifier(null);
				queryModel.addOptimizerHint(oFF.ExecutionEngine.MDS, oFF.OptimizerHint.CUBE_CACHE_WITH_ID.getName(), "true");
				this.m_executedResultSetContainers.add(queryManager.getActiveResultSetContainer());
				queryManager.processQueryExecutionAsBlendingSource(syncType, oFF.BlendingPersistenceType.ALL_DATA, this, source);
			}
		}
		queryModel.setShouldUseActualTextField(false);
	}
	return this.m_syncAction.isValid();
};
oFF.InAQMgrStartupBlending.prototype.executeRemoteQueries = function(syncType)
{
	let queryManager = this.m_syncAction.getQueryManager();
	let serviceConfig = queryManager.getServiceConfig();
	let blendingDefinition = serviceConfig.getBlendingDefinition();
	let blendingSources = blendingDefinition.getSources();
	let blendingHost = blendingDefinition.getBlendingHost();
	serviceConfig.setSystemName(blendingHost.getSystemName());
	this.m_implicitBatchStarted = false;
	if (blendingDefinition.isRemoteBlending())
	{
		if (!this.executeRemoteBlendingSubQueries(syncType, blendingSources, blendingHost))
		{
			return;
		}
	}
	else
	{
		oFF.XCollectionUtils.forEach(blendingSources, (blendingSource) => {
			blendingSource.getQueryModel().generateTransientObjects();
		});
	}
	let preQueries = this.getBlendingPreQueries(blendingSources);
	if (preQueries.hasElements())
	{
		let preQueryExecutor = queryManager.getPreQueryExecutor();
		preQueryExecutor.serializeRemotePreQueries(oFF.SyncType.BLOCKING, blendingHost.getSystemName(), preQueries, null);
		this.m_syncAction.addAllMessages(preQueryExecutor);
	}
};
oFF.InAQMgrStartupBlending.prototype.getBlendingDefinition = function()
{
	let queryManager = this.m_syncAction.getQueryManager();
	let serviceConfig = queryManager.getServiceConfig();
	return serviceConfig.getBlendingDefinition();
};
oFF.InAQMgrStartupBlending.prototype.getBlendingPreQueries = function(blendingSources)
{
	let preQueries = oFF.XList.create();
	for (let i = 0; i < blendingSources.size(); i++)
	{
		let source = blendingSources.get(i);
		let sourceModel = source.getQueryModel();
		if (!source.isRemoteSource() || source.isDelayCubeRequest())
		{
			if (sourceModel.getPreQueries() !== null)
			{
				for (let preQueryIdx = 0; preQueryIdx < sourceModel.getPreQueries().size(); preQueryIdx++)
				{
					let loadedDimensions = sourceModel.getLoadedDimensions();
					let preQuery = sourceModel.getPreQueries().get(preQueryIdx);
					if (!oFF.XStream.of(loadedDimensions).anyMatch((dim) => {
						return (dim.getDimensionType() === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION || dim.getDimensionType() === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION) && (oFF.XString.isEqual(dim.getPreQueryName(), preQuery.getObjectId()) || oFF.XString.isEqual(dim.getPreQueryName(), preQuery.getName()));
					}))
					{
						preQueries.add(sourceModel.getPreQueries().get(preQueryIdx));
					}
				}
			}
		}
		if (sourceModel.isBlendingModel())
		{
			preQueries.addAll(this.getBlendingPreQueries(sourceModel.getBlendingSources()));
		}
	}
	return preQueries;
};
oFF.InAQMgrStartupBlending.prototype.getSystemName = function(source)
{
	let queryManager = source.getQueryModel().getQueryManager();
	return queryManager.getSystemName();
};
oFF.InAQMgrStartupBlending.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	let blendingSource = customIdentifier;
	let queryManager = blendingSource.getQueryModel().getQueryManager();
	let view = null;
	let cube = null;
	let serializedData = response.getRootElement().getStructureByKey("SerializedData");
	if (extResult.isValid() && oFF.notNull(serializedData))
	{
		view = serializedData.getStringByKey("View");
		cube = serializedData.getStringByKey("Cube");
		queryManager.getOlapEnv().cacheRemoteBlendingData(queryManager, view, cube);
	}
	queryManager.getActiveResultSetContainer().setSerializedData(view, cube);
	this.onRemoteQueryExecuted(extResult, blendingSource);
	this.processBlendingQueryCreationIfQueriesFinished();
};
oFF.InAQMgrStartupBlending.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (!this.m_pendingFAMQueryIdentifiers.isEmpty() && oFF.XCollectionUtils.contains(this.m_pendingFAMQueryIdentifiers, (filterAcrossModelQueryIdentifier) => {
		return filterAcrossModelQueryIdentifier === customIdentifier;
	}))
	{
		this.m_pendingFAMQueryIdentifiers.removeElement(customIdentifier);
		if (this.m_pendingFAMQueryIdentifiers.isEmpty())
		{
			this.executeRemoteQueries(this.m_blendingMgrSyncType);
		}
	}
	else
	{
		this.onRemoteQueryExecuted(extResult, customIdentifier);
	}
	if (this.m_pendingFAMQueryIdentifiers.isEmpty())
	{
		this.processBlendingQueryCreationIfQueriesFinished();
	}
};
oFF.InAQMgrStartupBlending.prototype.onRemoteQueryExecuted = function(messageCollection, blendingSource)
{
	let queryModel = blendingSource.getQueryModel();
	queryModel.addQueryModelIdToMessages(messageCollection.getMessages());
	this.m_syncAction.addAllMessages(messageCollection);
	if (queryModel.getModelCapabilities().supportsAutoVariableSubmit() && queryModel.isMetadataUpdatedByAutoSubmit())
	{
		let queryManager = queryModel.getQueryManager();
		let oldPersistenceIdentifier = queryManager.getResultSetPersistenceIdentifier();
		blendingSource.updatePersistenceIdentifierOnTarget(this.getBlendingDefinition().getBlendingHost(), queryManager.getActiveResultSetContainer());
		queryModel.getOlapEnv().updateRemoteBlendingCacheId(queryManager, oldPersistenceIdentifier);
	}
};
oFF.InAQMgrStartupBlending.prototype.prepare = function(syncType)
{
	let blendingDefinition = this.getBlendingDefinition();
	let blendingSources = blendingDefinition.getSources();
	if (blendingSources.isEmpty())
	{
		this.m_syncAction.addError(oFF.ErrorCodes.INVALID_STATE, "No blending sources set");
		return;
	}
	let blendingHost = blendingDefinition.getBlendingHost();
	if (oFF.isNull(blendingHost))
	{
		this.m_syncAction.addError(oFF.ErrorCodes.INVALID_STATE, "Could not find a suitable blending host");
		return;
	}
	if (this.m_syncAction.getSession().hasFeature(oFF.FeatureToggleOlap.LOV_BASED_FILTER_ACROSS_MODELS))
	{
		for (let i = 0; i < blendingSources.size(); i++)
		{
			let leafQueryModel = blendingSources.get(i).getQueryModel();
			let filterAcrossModels = oFF.QFilterUtil.collectFilterAcrossModels(leafQueryModel);
			oFF.XCollectionUtils.forEach(filterAcrossModels, (filterAcrossModel) => {
				let customIdentifier = oFF.XStringValue.create(filterAcrossModel.getUniqueId());
				this.m_pendingFAMQueryIdentifiers.add(customIdentifier);
			});
		}
		for (let j = 0; j < blendingSources.size(); j++)
		{
			let leafQueryModelToProcess = blendingSources.get(j).getQueryModel();
			let filterAcrossModelsToProcess = oFF.QFilterUtil.collectFilterAcrossModels(leafQueryModelToProcess);
			oFF.XCollectionUtils.forEach(filterAcrossModelsToProcess, (filterAcrossModelToProcess) => {
				let customIdentifierToProcess = oFF.XCollectionUtils.findFirst(this.m_pendingFAMQueryIdentifiers, (pendingFAMQueryIdentifier) => {
					return oFF.XString.isEqual(filterAcrossModelToProcess.getUniqueId(), pendingFAMQueryIdentifier.getString());
				});
				if (syncType === oFF.SyncType.BLOCKING)
				{
					this.m_pendingFAMQueryIdentifiers.removeElement(customIdentifierToProcess);
				}
				let targetContext = leafQueryModelToProcess;
				let targetDatasetId = filterAcrossModelToProcess.getTargetDatasetId();
				if (!oFF.XStringUtils.isNullOrEmpty(targetDatasetId) && !oFF.XString.isEqual(targetDatasetId, leafQueryModelToProcess.getDatasetId()))
				{
					targetContext = leafQueryModelToProcess.getQueryManager().getOlapEnv().getSharedQueryManager(targetDatasetId).getQueryModel();
				}
				let action = filterAcrossModelToProcess.processLovQueriesExecutionExt(targetContext, syncType, syncType === oFF.SyncType.BLOCKING ? null : this, customIdentifierToProcess);
				if (oFF.isNull(action))
				{
					this.m_pendingFAMQueryIdentifiers.removeElement(customIdentifierToProcess);
				}
			});
		}
	}
	if (this.m_pendingFAMQueryIdentifiers.isEmpty())
	{
		this.executeRemoteQueries(syncType);
	}
};
oFF.InAQMgrStartupBlending.prototype.process = function(rpcFunctionSupplier, syncType)
{
	this.m_blendingMgrFunctionSupplier = rpcFunctionSupplier;
	this.m_blendingMgrSyncType = syncType;
	if (this.allQueriesExecuted())
	{
		if (this.m_syncAction.isValid())
		{
			this.executeBlendingQueryManagerCreation();
		}
		oFF.XObjectExt.release(this);
	}
};
oFF.InAQMgrStartupBlending.prototype.processBlendingQueryCreationIfQueriesFinished = function()
{
	if (oFF.notNull(this.m_blendingMgrFunctionSupplier) && this.allQueriesExecuted())
	{
		if (this.m_syncAction.isValid())
		{
			this.executeBlendingQueryManagerCreation();
		}
		else
		{
			this.m_syncAction.callListeners(true);
		}
		oFF.XObjectExt.release(this);
	}
};
oFF.InAQMgrStartupBlending.prototype.releaseObject = function()
{
	this.m_syncAction = null;
	this.m_executedResultSetContainers = oFF.XObjectExt.release(this.m_executedResultSetContainers);
	this.m_metadataSerializationFunctions = oFF.XObjectExt.release(this.m_metadataSerializationFunctions);
	this.m_blendingMgrFunctionSupplier = null;
	this.m_blendingMgrSyncType = null;
	this.m_pendingFAMQueryIdentifiers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_pendingFAMQueryIdentifiers);
};
oFF.InAQMgrStartupBlending.prototype.startImplicitBatchMode = function()
{
	let connectionPool = this.m_syncAction.getApplication().getConnectionPool();
	let systemName = this.m_syncAction.getQueryManager().getSystemName();
	if (connectionPool.isBatchModeEnabled(systemName))
	{
		this.m_implicitBatchStarted = false;
	}
	else
	{
		connectionPool.enableBatchMode(systemName);
		this.m_implicitBatchStarted = true;
	}
};
oFF.InAQMgrStartupBlending.prototype.stopImplicitBatchMode = function(implicitBatchStarted, syncType)
{
	if (implicitBatchStarted && this.m_syncAction.getQueryManagerBase().getPreQueryName() === null)
	{
		let connectionPool = this.m_syncAction.getApplication().getConnectionPool();
		let systemName = this.m_syncAction.getQueryManager().getSystemName();
		connectionPool.disableBatchMode(syncType, systemName);
	}
};

oFF.XCmdCreateQueryManager = function() {};
oFF.XCmdCreateQueryManager.prototype = new oFF.XCommand();
oFF.XCmdCreateQueryManager.prototype._ff_c = "XCmdCreateQueryManager";

oFF.XCmdCreateQueryManager.CLAZZ = null;
oFF.XCmdCreateQueryManager.staticSetup = function()
{
	oFF.XCmdCreateQueryManager.CLAZZ = oFF.XClass.create(oFF.XCmdCreateQueryManager);
};
oFF.XCmdCreateQueryManager.prototype.getCommandResultClass = function()
{
	return oFF.XCmdCreateQueryManagerResult.CLAZZ;
};

oFF.XCmdCreateQueryManagerResult = function() {};
oFF.XCmdCreateQueryManagerResult.prototype = new oFF.XCommandResult();
oFF.XCmdCreateQueryManagerResult.prototype._ff_c = "XCmdCreateQueryManagerResult";

oFF.XCmdCreateQueryManagerResult.CLAZZ = null;
oFF.XCmdCreateQueryManagerResult.staticSetup = function()
{
	oFF.XCmdCreateQueryManagerResult.CLAZZ = oFF.XClass.create(oFF.XCmdCreateQueryManagerResult);
};
oFF.XCmdCreateQueryManagerResult.prototype.createDataSource = function(dataSourceName, inaQueryModel, queryServiceConfig)
{
	let dataSource = oFF.QFactory.createDataSource();
	dataSource.setFullQualifiedName(dataSourceName);
	if (oFF.notNull(inaQueryModel))
	{
		let inaDataSource = inaQueryModel.getStructureByKey("DataSource");
		if (oFF.notNull(inaDataSource))
		{
			let importer = oFF.QInAImportFactory.createForMetadata(queryServiceConfig.getApplication(), null);
			importer.importDataSourceExternalDimensions(inaDataSource, dataSource);
			let extendedDimensionsInfo = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_EXT_DIMS_INFO);
			oFF.XCommandUtil.updateExtendedDimensionProperties(dataSource.getExtendedDimensionsBase(), extendedDimensionsInfo);
		}
	}
	return dataSource;
};
oFF.XCmdCreateQueryManagerResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		this.addResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER, queryManager);
	}
	this.onProcessFinished();
};
oFF.XCmdCreateQueryManagerResult.prototype.process = function()
{
	let application = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION);
	let system = this.getParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM);
	let dataSource = this.getParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE);
	let inaQueryModel = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY);
	let serviceConfig = oFF.QueryServiceConfig.create(application);
	serviceConfig.setSystemName(system);
	serviceConfig.setDataSource(this.createDataSource(dataSource, inaQueryModel, serviceConfig));
	let inaRepoContent = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_MODELLER_CONTENT_INA_REPOSITORY);
	if (oFF.notNull(inaRepoContent))
	{
		serviceConfig.setModellerContent(inaRepoContent);
	}
	if (oFF.notNull(inaQueryModel))
	{
		serviceConfig.setDefinitionByStructure(oFF.QModelFormat.INA_REPOSITORY, inaQueryModel);
		let experimentalFeatures = inaQueryModel.getStringByKeyExt("ExperimentalFeatures", null);
		let capabilitiesToSwitch = this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES);
		oFF.XCommandUtil.handleInactiveCapabilities(serviceConfig, experimentalFeatures, capabilitiesToSwitch);
	}
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, null);
};

oFF.XCmdDeserializeBlending = function() {};
oFF.XCmdDeserializeBlending.prototype = new oFF.XCommand();
oFF.XCmdDeserializeBlending.prototype._ff_c = "XCmdDeserializeBlending";

oFF.XCmdDeserializeBlending.CLAZZ = null;
oFF.XCmdDeserializeBlending.staticSetup = function()
{
	oFF.XCmdDeserializeBlending.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlending);
};
oFF.XCmdDeserializeBlending.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeBlendingResult.CLAZZ;
};

oFF.XCmdDeserializeBlendingNodes = function() {};
oFF.XCmdDeserializeBlendingNodes.prototype = new oFF.XCommand();
oFF.XCmdDeserializeBlendingNodes.prototype._ff_c = "XCmdDeserializeBlendingNodes";

oFF.XCmdDeserializeBlendingNodes.CLAZZ = null;
oFF.XCmdDeserializeBlendingNodes.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingNodes.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingNodes);
};
oFF.XCmdDeserializeBlendingNodes.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeBlendingNodesResult.CLAZZ;
};

oFF.XCmdDeserializeBlendingResultBase = function() {};
oFF.XCmdDeserializeBlendingResultBase.prototype = new oFF.XCommandResult();
oFF.XCmdDeserializeBlendingResultBase.prototype._ff_c = "XCmdDeserializeBlendingResultBase";

oFF.XCmdDeserializeBlendingResultBase.prototype.m_aliases = null;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_importedSourcesCount = 0;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_queryManagers = null;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_rootElement = null;
oFF.XCmdDeserializeBlendingResultBase.prototype.m_sourceCount = 0;
oFF.XCmdDeserializeBlendingResultBase.prototype.getDataSourceName = function(inaDataSource)
{
	let dataSource = oFF.QFactory.createDataSource();
	dataSource.setType(oFF.MetaObjectType.lookup(inaDataSource.getStringByKey("Type")));
	dataSource.setSchemaName(inaDataSource.getStringByKey("SchemaName"));
	dataSource.setPackageName(inaDataSource.getStringByKey("PackageName"));
	dataSource.setObjectName(inaDataSource.getStringByKey("ObjectName"));
	dataSource.setDataArea(inaDataSource.getStringByKey("DataArea"));
	return dataSource.getFullQualifiedName();
};
oFF.XCmdDeserializeBlendingResultBase.prototype.getSystemName = function(queryAlias)
{
	let systems = this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_SYSTEMS);
	if (oFF.notNull(systems) && systems.containsKey(queryAlias))
	{
		return systems.getByKey(queryAlias);
	}
	let system = this.getParameterString(oFF.CmdDeserializeBlending.PARAM_I_SYSTEM);
	if (oFF.notNull(system))
	{
		return system;
	}
	throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("No system found for query ", queryAlias, ". Either parameter PARAM_I_SYSTEMS or PARAM_I_SYSTEM must be set."));
};
oFF.XCmdDeserializeBlendingResultBase.prototype.onCommandProcessed = function(extResult, commandResult, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	oFF.MessageUtil.checkNoError(extResult);
	this.onQueryManagerImported(commandResult, customIdentifier.getInteger());
	this.m_importedSourcesCount++;
	if (this.m_importedSourcesCount === this.m_sourceCount)
	{
		this.onAllQueryManagersImported();
	}
};
oFF.XCmdDeserializeBlendingResultBase.prototype.process = function()
{
	let strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
	let application = this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION);
	let jsonParser = oFF.JsonParserFactory.newInstance();
	this.m_rootElement = jsonParser.parse(strQueryModel);
	oFF.XObjectExt.release(jsonParser);
	let inaDataSource = this.m_rootElement.getStructureByKey("DataSource");
	let inaSources = inaDataSource.getListByKey("Sources");
	this.m_aliases = oFF.XList.create();
	this.m_queryManagers = oFF.XList.create();
	this.m_sourceCount = inaSources.size();
	this.m_importedSourcesCount = 0;
	for (let i = 0; i < this.m_sourceCount; i++)
	{
		let inaSource = inaSources.getStructureAt(i);
		let alias = inaSource.getStringByKey("AliasName");
		this.m_aliases.add(alias);
		this.importSourceQueryModel(application, inaSource, alias, oFF.XIntegerValue.create(i));
	}
};
oFF.XCmdDeserializeBlendingResultBase.prototype.releaseObject = function()
{
	oFF.XCommandResult.prototype.releaseObject.call( this );
	this.m_queryManagers = oFF.XObjectExt.release(this.m_queryManagers);
	this.m_aliases = oFF.XObjectExt.release(this.m_aliases);
	this.m_rootElement = oFF.XObjectExt.release(this.m_rootElement);
};

oFF.XCmdDeserializeBlendingSources = function() {};
oFF.XCmdDeserializeBlendingSources.prototype = new oFF.XCommand();
oFF.XCmdDeserializeBlendingSources.prototype._ff_c = "XCmdDeserializeBlendingSources";

oFF.XCmdDeserializeBlendingSources.CLAZZ = null;
oFF.XCmdDeserializeBlendingSources.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingSources.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingSources);
};
oFF.XCmdDeserializeBlendingSources.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeBlendingSourcesResult.CLAZZ;
};

oFF.XCmdDeserializeCalculatedDimension = function() {};
oFF.XCmdDeserializeCalculatedDimension.prototype = new oFF.XCommand();
oFF.XCmdDeserializeCalculatedDimension.prototype._ff_c = "XCmdDeserializeCalculatedDimension";

oFF.XCmdDeserializeCalculatedDimension.CLAZZ = null;
oFF.XCmdDeserializeCalculatedDimension.staticSetup = function()
{
	oFF.XCmdDeserializeCalculatedDimension.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeCalculatedDimension);
};
oFF.XCmdDeserializeCalculatedDimension.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeCalculatedDimensionResult.CLAZZ;
};

oFF.XCmdDeserializeCalculatedDimensionResult = function() {};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype = new oFF.XCommandResult();
oFF.XCmdDeserializeCalculatedDimensionResult.prototype._ff_c = "XCmdDeserializeCalculatedDimensionResult";

oFF.XCmdDeserializeCalculatedDimensionResult.CLAZZ = null;
oFF.XCmdDeserializeCalculatedDimensionResult.getDataSourceName = function(inaDataSource)
{
	let dataSourceName = oFF.XStringBuffer.create();
	dataSourceName.append(inaDataSource.getStringByKey("Type"));
	dataSourceName.append(":[");
	dataSourceName.append(inaDataSource.getStringByKey("SchemaName"));
	dataSourceName.append("][");
	dataSourceName.append(inaDataSource.getStringByKey("PackageName"));
	dataSourceName.append("][");
	dataSourceName.append(inaDataSource.getStringByKey("ObjectName"));
	dataSourceName.append("]");
	return dataSourceName.toString();
};
oFF.XCmdDeserializeCalculatedDimensionResult.staticSetup = function()
{
	oFF.XCmdDeserializeCalculatedDimensionResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeCalculatedDimensionResult);
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.m_application = null;
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.m_inaQueryModels = null;
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.m_systemName = null;
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.importQueryModel = function(inaQueryModel, consumingQuery)
{
	let serviceConfig = oFF.QueryServiceConfig.createWithDataSourceName(this.m_application, this.m_systemName, oFF.XCmdDeserializeCalculatedDimensionResult.getDataSourceName(inaQueryModel.getStructureByKey("DataSource")));
	serviceConfig.setDefinitionByStructure(oFF.QModelFormat.INA_REPOSITORY, inaQueryModel);
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, consumingQuery);
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		if (oFF.notNull(customIdentifier))
		{
			let queryPair = customIdentifier;
			queryPair.getObject().getQueryModel().addPreQueryWithName(queryManager.getQueryModel(), queryPair.getName());
		}
		let preQueryNames = queryManager.getInitSettings().getDefinitionAsStructure().getListByKey("PreQueryNames");
		if (oFF.notNull(preQueryNames))
		{
			let sizeNames = preQueryNames.size();
			let sizePreQueries = this.m_inaQueryModels.size() - 1;
			for (let idxPreQueryName = 0; idxPreQueryName < sizeNames; idxPreQueryName++)
			{
				let preQueryName = preQueryNames.getStringAt(idxPreQueryName);
				for (let idxPreQuery = 0; idxPreQuery < sizePreQueries; idxPreQuery++)
				{
					let inaPreQuery = this.m_inaQueryModels.getStructureAt(idxPreQuery);
					if (oFF.XString.isEqual(preQueryName, inaPreQuery.getStringByKey("Name")))
					{
						this.importQueryModel(inaPreQuery, oFF.XNameWeakGenericPair.create(preQueryName, queryManager));
					}
				}
			}
		}
	}
	if (oFF.isNull(customIdentifier))
	{
		this.addResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER, queryManager);
	}
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.process = function()
{
	let strQueryModels = this.getParameterStringStrict(oFF.CmdDeserializeCalculatedDimension.PARAM_I_QUERY_MODELS_STRING_INA_REPOSITORY);
	let jsonParser = oFF.JsonParserFactory.newInstance();
	let rootElement = jsonParser.parse(strQueryModels);
	oFF.XObjectExt.release(jsonParser);
	this.m_inaQueryModels = rootElement.getListByKey("Queries");
	this.m_application = this.getParameterStrict(oFF.CmdDeserializeCalculatedDimension.PARAM_I_APPLICATION);
	this.m_systemName = this.getParameterStringStrict(oFF.CmdDeserializeCalculatedDimension.PARAM_I_SYSTEM);
	let inaMainQuery = this.m_inaQueryModels.getStructureAt(this.m_inaQueryModels.size() - 1);
	this.importQueryModel(inaMainQuery, null);
	this.onProcessFinished();
};
oFF.XCmdDeserializeCalculatedDimensionResult.prototype.releaseObject = function()
{
	this.m_inaQueryModels = null;
	this.m_systemName = null;
	this.m_application = null;
	oFF.XCommandResult.prototype.releaseObject.call( this );
};

oFF.XCmdDeserializeExtendedDimension = function() {};
oFF.XCmdDeserializeExtendedDimension.prototype = new oFF.XCommand();
oFF.XCmdDeserializeExtendedDimension.prototype._ff_c = "XCmdDeserializeExtendedDimension";

oFF.XCmdDeserializeExtendedDimension.CLAZZ = null;
oFF.XCmdDeserializeExtendedDimension.staticSetup = function()
{
	oFF.XCmdDeserializeExtendedDimension.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeExtendedDimension);
};
oFF.XCmdDeserializeExtendedDimension.prototype.getCommandResultClass = function()
{
	return oFF.XCmdDeserializeExtendedDimensionResult.CLAZZ;
};

oFF.XCmdDeserializeExtendedDimensionResult = function() {};
oFF.XCmdDeserializeExtendedDimensionResult.prototype = new oFF.XCommandResult();
oFF.XCmdDeserializeExtendedDimensionResult.prototype._ff_c = "XCmdDeserializeExtendedDimensionResult";

oFF.XCmdDeserializeExtendedDimensionResult.CLAZZ = null;
oFF.XCmdDeserializeExtendedDimensionResult.staticSetup = function()
{
	oFF.XCmdDeserializeExtendedDimensionResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeExtendedDimensionResult);
};
oFF.XCmdDeserializeExtendedDimensionResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		let strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
		let deserializeExt = queryManager.getQueryModel().deserializeExt(oFF.QModelFormat.INA_REPOSITORY, strQueryModel);
		this.getMessageManager().addAllMessages(deserializeExt);
		this.addResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER, queryManager);
	}
	this.onProcessFinished();
};
oFF.XCmdDeserializeExtendedDimensionResult.prototype.process = function()
{
	let strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeExtendedDimension.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
	let jsonParser = oFF.JsonParserFactory.newInstance();
	let rootElement = jsonParser.parse(strQueryModel);
	oFF.XObjectExt.release(jsonParser);
	let inaDataSource = rootElement.getStructureByKey("DataSource");
	let queryModel = this.getParameterStrict(oFF.CmdDeserializeExtendedDimension.PARAM_I_QUERY_MODEL);
	let dataSource = queryModel.getDataSource().cloneOlapComponent(null, null);
	let importer = oFF.QInAImportFactory.createForRepository(queryModel.getApplication(), null);
	importer.importDataSourceExternalDimensions(inaDataSource, dataSource);
	let extendedDimensionsInfo = this.getParameter(oFF.CmdDeserializeExtendedDimension.PARAM_I_EXT_DIMS_INFO);
	oFF.XCommandUtil.updateExtendedDimensionProperties(dataSource.getExtendedDimensionsBase(), extendedDimensionsInfo);
	let serviceConfig = oFF.QueryServiceConfig.createWithDataSource(queryModel.getApplication(), dataSource.getSystemName(), dataSource);
	let experimentalFeatures = rootElement.getStringByKeyExt("ExperimentalFeatures", null);
	let capabilitiesToSwitch = this.getParameter(oFF.CmdDeserializeExtendedDimension.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES);
	oFF.XCommandUtil.handleInactiveCapabilities(serviceConfig, experimentalFeatures, capabilitiesToSwitch);
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, null);
};

oFF.QCsnComponentMetadata = function() {};
oFF.QCsnComponentMetadata.prototype = new oFF.QInAComponentWithStructure();
oFF.QCsnComponentMetadata.prototype._ff_c = "QCsnComponentMetadata";

oFF.QCsnComponentMetadata.prototype.getDimExternalName = function(dimension)
{
	let externalName = dimension.getExternalName();
	return oFF.XStringUtils.isNotNullAndNotEmpty(externalName) ? externalName : dimension.getName();
};
oFF.QCsnComponentMetadata.prototype.getFieldName = function(field)
{
	let name = field.getName();
	let dimensionName = field.getDimension().getName();
	if (oFF.XString.startsWith(name, dimensionName))
	{
		name = oFF.XString.substring(name, oFF.XString.size(dimensionName) + 1, oFF.XString.size(name));
	}
	return name;
};
oFF.QCsnComponentMetadata.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.CSN_METADATA;
};

oFF.QRsInfoExport = function() {};
oFF.QRsInfoExport.prototype = new oFF.XObjectExt();
oFF.QRsInfoExport.prototype._ff_c = "QRsInfoExport";

oFF.QRsInfoExport.prototype.exportAxis = function(axis, rsiDimensions, rsiAxes)
{
	let rsiRows = rsiAxes.putNewStructure(axis.getName());
	let rsiAxisLayout = rsiRows.putNewList(oFF.RenderConstants.LAYOUT);
	for (let i = 0; i < axis.size(); i++)
	{
		let rsiDimLayout = rsiAxisLayout.addNewStructure();
		let dimension = axis.get(i);
		rsiDimLayout.putString(oFF.RenderConstants.DIMENSION_NAME, dimension.getName());
		let rsiDimension = rsiDimensions.putNewStructure(dimension.getName());
		let allMembers = dimension.getLoadedStructureMembers();
		rsiDimension.putString(oFF.RenderConstants.NAME, dimension.getName());
		rsiDimension.putString(oFF.RenderConstants.TEXT, dimension.getText());
		if (oFF.notNull(allMembers))
		{
			let rsiMembers = rsiDimension.putNewStructure(oFF.RenderConstants.MEMBERS);
			for (let k = 0; k < allMembers.size(); k++)
			{
				let member = allMembers.get(k);
				if (oFF.notNull(member))
				{
					let rsiMember = rsiMembers.putNewStructure(member.getName());
					rsiMember.putString(oFF.RenderConstants.NAME, member.getName());
					rsiMember.putString(oFF.RenderConstants.ALIAS_NAME, member.getAliasName());
					rsiMember.putString(oFF.RenderConstants.TEXT, member.getAliasName());
				}
			}
		}
	}
};
oFF.QRsInfoExport.prototype.exportBlendingMappings = function(mappings)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportComponent = function(componentType, modelComponent, inaParentStructure, flags)
{
	let rsiRoot = oFF.PrFactory.createStructure();
	let modelComponentType = modelComponent.getComponentType();
	if (modelComponentType === oFF.OlapComponentType.QUERY_MODEL)
	{
		let queryModel = modelComponent;
		let rsiDimensions = rsiRoot.putNewStructure(oFF.RenderConstants.DIMENSIONS);
		let rsiAxes = rsiRoot.putNewStructure(oFF.RenderConstants.AXES);
		let rowsAxis = queryModel.getRowsAxis();
		this.exportAxis(rowsAxis, rsiDimensions, rsiAxes);
		let colsAxis = queryModel.getColumnsAxis();
		this.exportAxis(colsAxis, rsiDimensions, rsiAxes);
	}
	return rsiRoot;
};
oFF.QRsInfoExport.prototype.exportCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportDataSource = function(datasource, withRunAsUser)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportHierarchy = function(dimension, inaParentStructure) {};
oFF.QRsInfoExport.prototype.exportLovRequest = function(queryModel, withVariables, withDataSource, lovProcessConfig)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportMemberHelpRequest = function(queryModel, dimension, isVariableValueHelp)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportPlanningVariableHelpRequest = function(planningOperation, dimension, variable)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportQueryModel = function(queryModel, withVariables, withDataSource)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportStructureDimension = function(structureDimension)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportVariableHelpRequest = function(queryModel, dimension, variable)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportVariableList = function(variableContainer)
{
	return null;
};
oFF.QRsInfoExport.prototype.exportVariables = function(variableContainer, parentStructure)
{
	return null;
};
oFF.QRsInfoExport.prototype.setupImportExport = function(application, mode, capabilities, memberReadModeContext) {};

oFF.QInAComponentMetadata = function() {};
oFF.QInAComponentMetadata.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAComponentMetadata.prototype._ff_c = "QInAComponentMetadata";

oFF.QInAComponentMetadata.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	let olapComponentType = this.getComponentType();
	let ctypeValue = oFF.QInAConverter.lookupComponentTypeInA(olapComponentType);
	if (oFF.notNull(ctypeValue))
	{
		inaStructure.putString("CType", ctypeValue);
	}
	return inaStructure;
};
oFF.QInAComponentMetadata.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_METADATA_CORE;
};

oFF.QInAAttribute = function() {};
oFF.QInAAttribute.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAAttribute.prototype._ff_c = "QInAAttribute";

oFF.QInAAttribute.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let attribute = modelComponent;
	inaStructure.putString("Name", attribute.getName());
	let inaResultSetFields = inaStructure.putNewList("ResultSetFields");
	let resultSetFields = attribute.getResultSetFields();
	let len = resultSetFields.size();
	for (let i = 0; i < len; i++)
	{
		inaResultSetFields.addString(resultSetFields.get(i).getName());
	}
	return inaStructure;
};
oFF.QInAAttribute.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ATTRIBUTE;
};
oFF.QInAAttribute.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = parentComponent;
	let name = inaStructure.getStringByKey("Name");
	let attribute = dimension.getAttributeByName(name);
	if (oFF.notNull(attribute))
	{
		let inaResultSetFields = inaStructure.getListByKey("ResultSetFields");
		if (oFF.notNull(inaResultSetFields))
		{
			let resultSetFields = attribute.getResultSetFields();
			resultSetFields.clear();
			let len = inaResultSetFields.size();
			for (let i = 0; i < len; i++)
			{
				let field = attribute.getFieldByName(inaResultSetFields.getStringAt(i));
				if (oFF.notNull(field))
				{
					resultSetFields.add(field);
				}
			}
		}
	}
	return attribute;
};

oFF.QInAAxesSettings = function() {};
oFF.QInAAxesSettings.prototype = new oFF.QInAComponentWithList();
oFF.QInAAxesSettings.prototype._ff_c = "QInAAxesSettings";

oFF.QInAAxesSettings.isDefinedZeroSuppression = function(axis)
{
	if (oFF.notNull(axis) && oFF.XCollectionUtils.hasElements(axis) && axis.getZeroSuppressionType() !== oFF.ZeroSuppressionType.NONE)
	{
		let validDimension = oFF.XCollectionUtils.findFirst(axis.getValuesAsReadOnlyList(), (dimension) => {
			return !oFF.QInAExportUtil.isFormulaCalculatedDimensionHidden(dimension);
		});
		return oFF.notNull(validDimension);
	}
	return false;
};
oFF.QInAAxesSettings.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let queryModel = modelComponent;
	let inaAxisStructureList = oFF.PrFactory.createList();
	let columnsAxis = queryModel.getColumnsAxis();
	if (exporter.isAbap(queryModel) || oFF.QInAAxesSettings.isDefinedZeroSuppression(columnsAxis))
	{
		let inaColumns = exporter.exportAxis(columnsAxis, null);
		inaAxisStructureList.add(inaColumns);
	}
	let rowsAxis = queryModel.getRowsAxis();
	if (exporter.isAbap(queryModel) || oFF.QInAAxesSettings.isDefinedZeroSuppression(rowsAxis))
	{
		let inaRows = exporter.exportAxis(rowsAxis, null);
		inaAxisStructureList.add(inaRows);
	}
	return inaAxisStructureList;
};
oFF.QInAAxesSettings.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXES_SETTINGS;
};
oFF.QInAAxesSettings.prototype.getTagName = function()
{
	return "Axes";
};
oFF.QInAAxesSettings.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	if (oFF.notNull(inaList))
	{
		if (importer.m_capabilities.supportsZeroSuppression() || importer.m_capabilities.supportsNullZeroSuppression())
		{
			let all = oFF.AxisType.getAll();
			let allSize = all.size();
			for (let k = 0; k < allSize; k++)
			{
				let axis = queryModel.getAxisBase(all.get(k));
				if (oFF.notNull(axis))
				{
					axis.setSupportsZeroSuppression(true);
				}
			}
		}
		let len = inaList.size();
		for (let i = 0; i < len; i++)
		{
			importer.importAxis(inaList.getStructureAt(i), null, context);
		}
	}
	else if (importer.m_capabilities.supportsNullZeroSuppression())
	{
		this.initializeAxisForNullSuppression(queryModel.getAxisBase(oFF.AxisType.ROWS));
		this.initializeAxisForNullSuppression(queryModel.getAxisBase(oFF.AxisType.COLUMNS));
	}
	return null;
};
oFF.QInAAxesSettings.prototype.initializeAxisForNullSuppression = function(axis)
{
	axis.setSupportsZeroSuppression(true);
	axis.resetZeroSuppressionTypes();
	axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_ZERO);
	axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_NULL);
};

oFF.QInAAxis = function() {};
oFF.QInAAxis.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAAxis.prototype._ff_c = "QInAAxis";

oFF.QInAAxis.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let axis = modelComponent;
	let axisType = axis.getType();
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(axisType));
	inaStructure.putInteger("Type", oFF.QInAConverter.lookupAxisTypeInAInt(axisType));
	let typeZeroSuppression = axis.getZeroSuppressionType();
	inaStructure.putInteger("ZeroSuppressionType", oFF.QInAConverter.lookupSuppressionTypeInA(typeZeroSuppression));
	exporter.exportTotals(axis.getResultStructureController(), inaStructure);
	return inaStructure;
};
oFF.QInAAxis.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.AXIS;
};
oFF.QInAAxis.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let supportsZeroSuppression = importer.m_capabilities.supportsZeroSuppression();
	let supportsNullZeroSuppression = importer.m_capabilities.supportsNullZeroSuppression();
	let axisType;
	let axisTypeValue = inaStructure.getStringByKey("Axis");
	if (oFF.isNull(axisTypeValue))
	{
		axisType = oFF.QInAConverter.lookupAxisTypeInt(inaStructure.getIntegerByKey("Type"));
	}
	else
	{
		axisType = oFF.QInAConverter.lookupAxisType(axisTypeValue);
	}
	let queryModel = context.getQueryModel();
	let axis = queryModel.getAxisBase(axisType);
	if (oFF.notNull(axis))
	{
		axis.resetZeroSuppressionTypes();
		if (supportsZeroSuppression || supportsNullZeroSuppression)
		{
			let valueType = inaStructure.getIntegerByKey("ZeroSuppressionType");
			let zeroSuppressionType = oFF.QInAConverter.lookupSuppressionType(valueType);
			axis.setZeroSuppressionType(zeroSuppressionType);
			axis.setDefaultZeroSuppression(zeroSuppressionType);
			axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_ZERO);
		}
		if (supportsZeroSuppression)
		{
			axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.TOTAL_IS_ZERO);
		}
		else if (supportsNullZeroSuppression)
		{
			axis.addAvailableZeroSuppressionType(oFF.ZeroSuppressionType.ALL_CELLS_ARE_NULL);
		}
		importer.importTotals(inaStructure, axis.getResultStructureControllerBase(), context);
	}
	return axis;
};

oFF.QInACellContext = function() {};
oFF.QInACellContext.prototype = new oFF.QInAComponentWithStructure();
oFF.QInACellContext.prototype._ff_c = "QInACellContext";

oFF.QInACellContext.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let cellContext = modelComponent;
	let inaStructureLocal = inaStructure;
	if (oFF.isNull(inaStructureLocal))
	{
		inaStructureLocal = oFF.PrFactory.createStructure();
	}
	inaStructureLocal.putString("Name", cellContext.getName());
	if (cellContext.getRowIndex() > -1)
	{
		inaStructureLocal.putInteger("Row", cellContext.getRowIndex());
	}
	if (cellContext.getColumnIndex() > -1)
	{
		inaStructureLocal.putInteger("Column", cellContext.getColumnIndex());
	}
	if (cellContext.isExternalKeys())
	{
		inaStructureLocal.putBoolean("ExternalKeys", cellContext.isExternalKeys());
	}
	if (cellContext.isComponentsExternal())
	{
		inaStructureLocal.putBoolean("ComponentsExternal", cellContext.isComponentsExternal());
	}
	if (cellContext.isComponentsInternal())
	{
		inaStructureLocal.putBoolean("ComponentsInternal", cellContext.isComponentsInternal());
	}
	let axisContextMap = cellContext.getAxisContexts();
	if (oFF.XCollectionUtils.hasElements(axisContextMap))
	{
		let contextPathList = inaStructureLocal.putNewList("CellContextPaths");
		let keys = axisContextMap.getKeysAsIterator();
		while (keys.hasNext())
		{
			let axisType = keys.next();
			let cellContextPath = axisContextMap.getByKey(axisType);
			if (oFF.XCollectionUtils.hasElements(cellContextPath))
			{
				let contextPathStructure = contextPathList.addNewStructure();
				contextPathStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(axisType));
				let contextMembersStructure = contextPathStructure.putNewList("CellContextMembers");
				let size = cellContextPath.size();
				for (let i = 0; i < size; i++)
				{
					contextMembersStructure.add(exporter.exportDrillPathElement(cellContextPath.get(i), true));
				}
			}
		}
	}
	return inaStructure;
};
oFF.QInACellContext.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CELL_CONTEXT;
};
oFF.QInACellContext.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let cellContext = null;
	let name = inaStructure.getStringByKey("Name");
	if (oFF.isNull(modelComponent))
	{
		cellContext = oFF.QCellContext._create(context, name, parentComponent);
	}
	else if (modelComponent.getOlapComponentType() === oFF.OlapComponentType.CELL_CONTEXT)
	{
		cellContext = modelComponent;
	}
	cellContext.setRowIndex(inaStructure.getIntegerByKeyExt("Row", -1));
	cellContext.setColumnIndex(inaStructure.getIntegerByKeyExt("Column", -1));
	cellContext.setExternalKeys(inaStructure.getBooleanByKeyExt("ExternalKeys", false));
	cellContext.setComponentsExternal(inaStructure.getBooleanByKeyExt("ComponentsExternal", false));
	cellContext.setComponentsInternal(inaStructure.getBooleanByKeyExt("ComponentsInternal", false));
	let contextPathListIna = inaStructure.getListByKey("CellContextPaths");
	if (!oFF.PrUtils.isListEmpty(contextPathListIna))
	{
		let size = contextPathListIna.size();
		for (let i = 0; i < size; i++)
		{
			let contextPathStructIna = contextPathListIna.getStructureAt(i);
			let axisType = oFF.QInAConverter.lookupAxisType(contextPathStructIna.getStringByKey("Axis"));
			let pathListInA = contextPathStructIna.getListByKey("CellContextMembers");
			let pathSize = pathListInA.size();
			let contextPath = oFF.XList.create();
			for (let j = 0; j < pathSize; j++)
			{
				let pathElementStruct = pathListInA.getStructureAt(j);
				contextPath.add(importer.importDrillPathElement(pathElementStruct, cellContext, context));
			}
			cellContext.setTupleContextForAxis(contextPath, axisType);
		}
	}
	return cellContext;
};

oFF.QInACellContextManager = function() {};
oFF.QInACellContextManager.prototype = new oFF.QInAComponentWithList();
oFF.QInACellContextManager.prototype._ff_c = "QInACellContextManager";

oFF.QInACellContextManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaOperationsList = null;
	if (exporter.m_capabilities.supportsDataCellContexts())
	{
		let cellContextManager = modelComponent;
		if (oFF.XCollectionUtils.hasElements(cellContextManager))
		{
			inaOperationsList = oFF.PrFactory.createList();
			for (let i = 0; i < cellContextManager.size(); i++)
			{
				inaOperationsList.add(exporter.exportCellContext(cellContextManager.get(i)));
			}
		}
	}
	return inaOperationsList;
};
oFF.QInACellContextManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CELL_CONTEXT_MANAGER;
};
oFF.QInACellContextManager.prototype.getTagName = function()
{
	return "CellContextRequests";
};
oFF.QInACellContextManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (modelComponent.getOlapComponentType() === oFF.OlapComponentType.CELL_CONTEXT_MANAGER)
	{
		let cellContextManager = modelComponent;
		if (oFF.notNull(inaList))
		{
			cellContextManager.clear();
			let size = inaList.size();
			for (let i = 0; i < size; i++)
			{
				cellContextManager.addCellContext(importer.importCellContext(inaList.getStructureAt(i), cellContextManager, context));
			}
		}
	}
	return modelComponent;
};

oFF.QInAChartDefinition = function() {};
oFF.QInAChartDefinition.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAChartDefinition.prototype._ff_c = "QInAChartDefinition";

oFF.QInAChartDefinition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (oFF.notNull(modelComponent) && oFF.notNull(inaStructure))
	{
		let chartDefinition = modelComponent;
		let chartSetting = chartDefinition.getChartSetting();
		let fullQualifiedName = chartDefinition.getQueryModel().getDataSource().getFullQualifiedName();
		this.exportGlobalAndAnalyticsObjects(exporter, chartDefinition, inaStructure);
		inaStructure.putBoolean("autoChartType", false);
		let cache = inaStructure.putNewStructure("cache");
		cache.putBoolean("bindingsHasTrellis", false);
		cache.putBoolean("bindingsUseUnbooked", false);
		cache.putNewList("filtersVersionTuples");
		let datasets = inaStructure.putNewList("datasets");
		let dataset = datasets.addNewStructure();
		dataset.putString(oFF.VizDefConstants.K_ID, fullQualifiedName);
		dataset.putString(oFF.VizDefConstants.K_TYPE, "dataset");
		let chartStructure = inaStructure.putNewStructure(oFF.VizDefConstants.K_CHART);
		chartStructure.putString(oFF.VizDefConstants.K_TYPE, chartSetting.getChartType().getName());
		let bindings = chartStructure.putNewList(oFF.VizDefConstants.K_BINDINGS);
		let visValueTypes = oFF.XList.create();
		visValueTypes.add(oFF.VisualizationValueType.VALUE);
		visValueTypes.add(oFF.VisualizationValueType.VALUE_B);
		oFF.XStream.of(visValueTypes).forEach((visValueType) => {
			let typedValueSelectionsForType = chartSetting.getTypedValueSelectionsForType(visValueType);
			let keyFigures = typedValueSelectionsForType.getValuesAsReadOnlyList();
			let valueAxisBinding = bindings.addNewStructure();
			valueAxisBinding.putString(oFF.VizDefConstants.K_FEED, visValueType.getName());
			let valueAxisBindingSources = valueAxisBinding.putNewList(oFF.VizDefConstants.K_SOURCE);
			oFF.XStream.of(keyFigures).forEach((kf) => {
				let valueStructure = valueAxisBindingSources.addNewStructure();
				valueStructure.putString(oFF.VizDefConstants.K_ID, kf.getName());
				valueStructure.putString(oFF.VizDefConstants.K_TYPE, "member");
				valueStructure.putString(oFF.VizDefConstants.K_PATTERN, "");
				let parentKey = valueStructure.putNewStructure(oFF.VizDefConstants.K_PARENT_KEY);
				parentKey.putString(oFF.VizDefConstants.K_ID, chartDefinition.getKeyFigureDimension().getName());
				parentKey.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_DIMENSION);
				let parentKeyInt = parentKey.putNewStructure(oFF.VizDefConstants.K_PARENT_KEY);
				parentKeyInt.putString(oFF.VizDefConstants.K_ID, fullQualifiedName);
				parentKeyInt.putString(oFF.VizDefConstants.K_TYPE, "dataset");
			});
		});
	}
	return inaStructure;
};
oFF.QInAChartDefinition.prototype.exportGlobalAndAnalyticsObjects = function(exporter, chartDefinition, inaStructure)
{
	let globalObjects = inaStructure.putNewStructure("GlobalObjects");
	globalObjects.putNewStructure("CalculationVariables");
	globalObjects.putNewStructure("Calculations");
	globalObjects.putNewStructure("FieldSelections");
	globalObjects.putNewStructure("PageFilters");
	globalObjects.putNewStructure("StoryFilters");
	let analyticObjects = inaStructure.putNewStructure("analyticObjects");
	analyticObjects.putNewStructure("clusteringSettings");
};
oFF.QInAChartDefinition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION;
};
oFF.QInAChartDefinition.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.VIZDEF;
};
oFF.QInAChartDefinition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure) && oFF.notNull(modelComponent) && modelComponent.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION)
	{
		let chartDefinitionBase = modelComponent;
		let chartSettings = chartDefinitionBase.getChartSetting();
		let queryModel = chartDefinitionBase.getQueryModel();
		chartDefinitionBase.setTitle(inaStructure.getStringByKey("Title"));
		let chart = inaStructure.getStructureByKey(oFF.VizDefConstants.K_CHART);
		chartSettings.setChartType(oFF.ChartType.lookup(chart.getStringByKey(oFF.VizDefConstants.K_TYPE)));
		let bindings = chart.getListByKey(oFF.VizDefConstants.K_BINDINGS);
		oFF.XCollectionUtils.forEach(bindings, (binding) => {
			let bindingStructure = binding;
			let feed = bindingStructure.getStringByKey(oFF.VizDefConstants.K_FEED);
			let valueType = oFF.VisualizationValueType.lookup(feed);
			let sources = bindingStructure.getListByKey(oFF.VizDefConstants.K_SOURCE);
			oFF.XCollectionUtils.forEach(sources, (source) => {
				let sourceStructure = source;
				let keyFigureDimensionName = sourceStructure.getStructureByKey(oFF.VizDefConstants.K_PARENT_KEY).getStringByKey(oFF.VizDefConstants.K_ID);
				let kfDimension = queryModel.getDimensionByName(keyFigureDimensionName);
				chartDefinitionBase.setKeyFigureDimension(kfDimension);
				let memberName = sourceStructure.getStringByKey(oFF.VizDefConstants.K_ID);
				let structureMember = kfDimension.getStructureMember(memberName);
				chartSettings.addTypedValueSelection(valueType, oFF.QKeyFigureSelection.create(context, structureMember, chartDefinitionBase, valueType));
			});
		});
	}
	return modelComponent;
};

oFF.QInAConditionManager = function() {};
oFF.QInAConditionManager.prototype = new oFF.QInAComponentWithList();
oFF.QInAConditionManager.prototype._ff_c = "QInAConditionManager";

oFF.QInAConditionManager.prototype.addTransientConditionsForAxis = function(conditionsList, queryModel, axis, condition, all)
{
	let versionDimension = queryModel.getVersionDimension();
	let accountDimension = queryModel.getAccountDimension();
	let measureDimension = queryModel.getMeasureDimension();
	let secondaryStructure = queryModel.getNonMeasureDimension();
	let breakGroupList = condition.getBreakGroupDimensions();
	for (let i = axis.size() - 1; i > -1; i--)
	{
		let dimension = axis.get(i);
		if (dimension.canBeAggregated() && dimension !== versionDimension && dimension !== accountDimension && dimension !== measureDimension && dimension !== secondaryStructure && !breakGroupList.contains(dimension))
		{
			conditionsList.add(this.createTransientCondition(condition, dimension));
			if (!all)
			{
				break;
			}
		}
	}
};
oFF.QInAConditionManager.prototype.addTransientContiguousConditionForAxis = function(conditionsList, queryModel, axis, condition)
{
	let versionDimension = queryModel.getVersionDimension();
	let accountDimension = queryModel.getAccountDimension();
	let measureDimension = queryModel.getMeasureDimension();
	let secondaryStructure = queryModel.getNonMeasureDimension();
	let breakGroupList = condition.getBreakGroupDimensions();
	let evaluateList = oFF.XList.create();
	let applicabilityCheck = (dim) => {
		return dim.canBeAggregated() && dim !== versionDimension && dim !== accountDimension && dim !== measureDimension && dim !== secondaryStructure && !breakGroupList.contains(dim);
	};
	let i = 0;
	let axisSize = axis.size();
	for (; i < axisSize; i++)
	{
		if (applicabilityCheck(axis.get(i)))
		{
			break;
		}
	}
	for (; i < axisSize; i++)
	{
		let dimension = axis.get(i);
		if (!applicabilityCheck(dimension))
		{
			break;
		}
		evaluateList.add(dimension);
	}
	if (oFF.XCollectionUtils.hasElements(evaluateList))
	{
		let newName = oFF.XStringUtils.concatenate3(condition.getName(), "_", axis.getName());
		let newCondition = oFF.QCondition.create(condition.getContext(), null, newName, false);
		newCondition.copyFrom(condition, null);
		newCondition.setName(newName);
		newCondition.setDimensionEvaluationType(oFF.ConditionDimensionEvaluationType.GIVEN_LIST);
		oFF.XCollectionUtils.forEach(evaluateList, (ed) => {
			newCondition.addEvaluationDimension(ed);
		});
		conditionsList.add(newCondition);
	}
};
oFF.QInAConditionManager.prototype.createTransientCondition = function(condition, dimension)
{
	let newName = oFF.XStringUtils.concatenate3(condition.getName(), "_", dimension.getName());
	let newCondition = oFF.QCondition.create(condition.getContext(), null, newName, false);
	newCondition.copyFrom(condition, null);
	newCondition.setName(newName);
	newCondition.setDimensionEvaluationType(oFF.ConditionDimensionEvaluationType.GIVEN_LIST);
	newCondition.addEvaluationDimension(dimension);
	return newCondition;
};
oFF.QInAConditionManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let conditionManager = modelComponent;
	if (oFF.notNull(conditionManager))
	{
		let conditions;
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			conditions = conditionManager.getEffectiveConditions();
		}
		else
		{
			conditions = conditionManager;
		}
		let len = conditions.size();
		if (len > 0)
		{
			let inaConditionsList = oFF.PrFactory.createList();
			for (let i = 0; i < len; i++)
			{
				this.exportCondition(exporter, conditions.get(i), inaConditionsList);
			}
			if (inaConditionsList.isEmpty())
			{
				return null;
			}
			return inaConditionsList;
		}
	}
	return null;
};
oFF.QInAConditionManager.prototype.exportCondition = function(exporter, condition, inaConditionsList)
{
	let evaluationType = condition.getDimensionEvaluationType();
	if (!condition.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.BW) && evaluationType !== oFF.ConditionDimensionEvaluationType.GIVEN_LIST && !oFF.XCollectionUtils.hasElements(condition.getEvaluationDimensions()) || evaluationType === oFF.ConditionDimensionEvaluationType.TUPLES_ON_COLUMNS || evaluationType === oFF.ConditionDimensionEvaluationType.TUPLES_ON_ROWS || evaluationType === oFF.ConditionDimensionEvaluationType.ALL_ON_ROWS || evaluationType === oFF.ConditionDimensionEvaluationType.ALL_ON_COLUMNS)
	{
		let transientConditions = this.getTransientConditions(condition);
		oFF.XStream.of(transientConditions).forEach((transientCondition) => {
			this.exportConditionFinal(exporter, transientCondition, inaConditionsList);
		});
	}
	else
	{
		this.exportConditionFinal(exporter, condition, inaConditionsList);
	}
};
oFF.QInAConditionManager.prototype.exportConditionFinal = function(exporter, condition, inaConditionsList)
{
	let conditionIna = exporter.exportCondition(condition);
	if (oFF.notNull(conditionIna) && !conditionIna.isEmpty())
	{
		inaConditionsList.add(conditionIna);
	}
};
oFF.QInAConditionManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_MANAGER;
};
oFF.QInAConditionManager.prototype.getTagName = function()
{
	return "Conditions";
};
oFF.QInAConditionManager.prototype.getTransientConditions = function(condition)
{
	let conditionsList = oFF.XList.create();
	if (condition.isActive())
	{
		let queryModel = condition.getQueryModel();
		let evaluationType = condition.getDimensionEvaluationType();
		if (evaluationType === oFF.ConditionDimensionEvaluationType.ALL_IN_DRILL_DOWN)
		{
			this.addTransientConditionsForAxis(conditionsList, queryModel, queryModel.getRowsAxis(), condition, true);
			this.addTransientConditionsForAxis(conditionsList, queryModel, queryModel.getColumnsAxis(), condition, true);
		}
		else if (evaluationType === oFF.ConditionDimensionEvaluationType.MOST_DETAILED_ON_COLS)
		{
			this.addTransientConditionsForAxis(conditionsList, queryModel, queryModel.getColumnsAxis(), condition, false);
		}
		else if (evaluationType === oFF.ConditionDimensionEvaluationType.MOST_DETAILED_ON_ROWS)
		{
			this.addTransientConditionsForAxis(conditionsList, queryModel, queryModel.getRowsAxis(), condition, false);
		}
		else if (evaluationType === oFF.ConditionDimensionEvaluationType.ALL_ON_ROWS)
		{
			this.addTransientConditionsForAxis(conditionsList, queryModel, queryModel.getRowsAxis(), condition, true);
		}
		else if (evaluationType === oFF.ConditionDimensionEvaluationType.ALL_ON_COLUMNS)
		{
			this.addTransientConditionsForAxis(conditionsList, queryModel, queryModel.getColumnsAxis(), condition, true);
		}
		else if (evaluationType === oFF.ConditionDimensionEvaluationType.TUPLES_ON_COLUMNS)
		{
			this.addTransientContiguousConditionForAxis(conditionsList, queryModel, queryModel.getColumnsAxis(), condition);
		}
		else if (evaluationType === oFF.ConditionDimensionEvaluationType.TUPLES_ON_ROWS)
		{
			this.addTransientContiguousConditionForAxis(conditionsList, queryModel, queryModel.getRowsAxis(), condition);
		}
	}
	return conditionsList;
};
oFF.QInAConditionManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let conditionManager = modelComponent;
	if (oFF.notNull(conditionManager))
	{
		let queryModelBase = context.getQueryModel();
		let queryManager = queryModelBase.getQueryManagerBase();
		let isProcessingAutoSubmit = oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit() && queryManager.isProcessingAutoSubmit();
		if (!isProcessingAutoSubmit)
		{
			conditionManager.clearFrontendConditions();
		}
		if (oFF.notNull(inaList))
		{
			let len = inaList.size();
			for (let i = 0; i < len; i++)
			{
				let inaCurrentCondition = inaList.getStructureAt(i);
				if (isProcessingAutoSubmit)
				{
					let conditionName = inaCurrentCondition.getStringByKey("Name");
					let existingCondition = conditionManager.getByKey(conditionName);
					importer.importCondition(queryModelBase, inaCurrentCondition, existingCondition);
				}
				else
				{
					let currentCondition = importer.importCondition(queryModelBase, inaCurrentCondition, null);
					conditionManager.add(currentCondition);
				}
			}
		}
	}
	return conditionManager;
};

oFF.QInAConditionsCondition = function() {};
oFF.QInAConditionsCondition.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAConditionsCondition.prototype._ff_c = "QInAConditionsCondition";

oFF.QInAConditionsCondition.exportBreakGroupDimensionList = function(condition)
{
	if (oFF.isNull(condition))
	{
		return null;
	}
	let inaBreakGroupDimensionList = oFF.PrFactory.createList();
	let breakGroupDimensions = condition.getBreakGroupDimensions();
	let len = breakGroupDimensions.size();
	for (let i = 0; i < len; i++)
	{
		inaBreakGroupDimensionList.addString(breakGroupDimensions.get(i).getName());
	}
	return inaBreakGroupDimensionList;
};
oFF.QInAConditionsCondition.exportEvaluateOnDimensionsList = function(condition)
{
	if (oFF.isNull(condition))
	{
		return null;
	}
	let inaEvaluationDimensionList = oFF.PrFactory.createList();
	let evaluationDimensions = condition.getEvaluationDimensions();
	let len = evaluationDimensions.size();
	for (let i = 0; i < len; i++)
	{
		inaEvaluationDimensionList.addString(evaluationDimensions.get(i).getName());
	}
	return inaEvaluationDimensionList;
};
oFF.QInAConditionsCondition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let condition = modelComponent;
	let queryModel = condition.getQueryModel();
	let isMds = queryModel.getSystemType().isTypeOf(oFF.SystemType.HANA);
	if (exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY)
	{
		inaStructure.putBoolean("IsBackendCondition", condition.isBackendCondition());
	}
	inaStructure.putBoolean("Active", condition.isActive());
	if (condition.isApplyingConditionAfterVisibilityFilter())
	{
		inaStructure.putBoolean("AfterVisibilityFilter", true);
	}
	if (isMds)
	{
		inaStructure.putStringNotNullAndNotEmpty("Description", condition.getDescription());
	}
	else
	{
		inaStructure.putString("Description", condition.getDescription());
	}
	inaStructure.putString("Name", condition.getName());
	let dimensionEvaluationType = condition.getDimensionEvaluationType();
	inaStructure.putString("EvaluateOnDimensions", dimensionEvaluationType.getName());
	if (dimensionEvaluationType === oFF.ConditionDimensionEvaluationType.GIVEN_LIST)
	{
		let exportEvaluateOnDimensionsList = oFF.QInAConditionsCondition.exportEvaluateOnDimensionsList(condition);
		inaStructure.put("EvaluateOnDimensionsList", exportEvaluateOnDimensionsList);
	}
	let thresholds = condition.getThresholds();
	let thresholdSize = thresholds.size();
	if (thresholdSize > 0)
	{
		let inAThresholdList = oFF.PrFactory.createList();
		for (let i = 0; i < thresholdSize; i++)
		{
			let currentInAThreshold = exporter.exportConditionThreshold(thresholds.get(i));
			if (oFF.notNull(currentInAThreshold))
			{
				inAThresholdList.add(currentInAThreshold);
			}
		}
		if (!inAThresholdList.isEmpty())
		{
			inaStructure.put("Threshold", inAThresholdList);
		}
		else
		{
			return null;
		}
	}
	if (isMds)
	{
		if (oFF.XCollectionUtils.hasElements(queryModel.getPreQueries()) && !condition.getOnDisabledToWarning())
		{
			inaStructure.putString("OnDisabled", "Error");
		}
		let isGroupBreaking = condition.isBreakGroup();
		if (isGroupBreaking)
		{
			inaStructure.putBoolean("BreakGroup", true);
			let exportBreakGroupDimensionList = oFF.QInAConditionsCondition.exportBreakGroupDimensionList(condition);
			inaStructure.put("BreakGroupList", exportBreakGroupDimensionList);
		}
		if (condition.isBreakHierarchy())
		{
			inaStructure.putBoolean("BreakHierarchy", true);
		}
	}
	return inaStructure;
};
oFF.QInAConditionsCondition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITION;
};
oFF.QInAConditionsCondition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return modelComponent;
	}
	let newCondition;
	let inACondName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(modelComponent))
	{
		if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY)
		{
			let isBackendCondition = inaStructure.getBooleanByKeyExt("IsBackendCondition", true);
			newCondition = oFF.QCondition.create(context, parentComponent, inACondName, isBackendCondition);
		}
		else
		{
			newCondition = oFF.QCondition.create(context, parentComponent, inACondName, true);
		}
	}
	else
	{
		newCondition = modelComponent;
		newCondition.clearThresholds();
		newCondition.clearEvaluationDimensions();
	}
	newCondition.setActive(inaStructure.getBooleanByKey("Active"));
	newCondition.setUsedState(inaStructure.getStringByKey("IsUsed"));
	newCondition.setDescription(inaStructure.getStringByKey("Description"));
	let onDisabled = inaStructure.getStringByKey("OnDisabled");
	newCondition.setApplyConditionAfterVisibilityFilter(inaStructure.getBooleanByKeyExt("AfterVisibilityFilter", false));
	if (oFF.notNull(onDisabled))
	{
		if (oFF.XString.isEqual(onDisabled, "Error"))
		{
			newCondition.setOnDisabledToWarning(false);
		}
	}
	let inAEvaluateOnDimensionTypeString = inaStructure.getStringByKey("EvaluateOnDimensions");
	let conditionDimensionEvaluationType = oFF.ConditionDimensionEvaluationType.lookupName(inAEvaluateOnDimensionTypeString);
	if (oFF.notNull(conditionDimensionEvaluationType))
	{
		newCondition.setDimensionEvaluationType(conditionDimensionEvaluationType);
	}
	let queryModel = context.getQueryModel();
	let inADimensionList = inaStructure.getListByKey("EvaluateOnDimensionsList");
	let dimSize;
	let idxDim;
	if (!oFF.PrUtils.isListEmpty(inADimensionList) && oFF.notNull(queryModel))
	{
		dimSize = inADimensionList.size();
		for (idxDim = 0; idxDim < dimSize; idxDim++)
		{
			let inACurrentDimensionName = inADimensionList.getStringAt(idxDim);
			if (oFF.notNull(inACurrentDimensionName))
			{
				let currentDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentDimensionName);
				if (oFF.notNull(currentDimension))
				{
					newCondition.addEvaluationDimension(currentDimension);
				}
			}
		}
	}
	let inAThresholds = inaStructure.getListByKey("Threshold");
	if (!oFF.PrUtils.isListEmpty(inAThresholds))
	{
		let thresholdSize = inAThresholds.size();
		for (let idxThreshold = 0; idxThreshold < thresholdSize; idxThreshold++)
		{
			let inACurrentThreshold = inAThresholds.getStructureAt(idxThreshold);
			if (oFF.notNull(inACurrentThreshold))
			{
				newCondition.addThreshold(importer.importConditionThreshold(queryModel, inACurrentThreshold, null, newCondition));
			}
		}
	}
	newCondition.setBreakGroup(inaStructure.getBooleanByKeyExt("BreakGroup", false));
	let inABreakDimensionList = inaStructure.getListByKey("BreakGroupList");
	if (!oFF.PrUtils.isListEmpty(inABreakDimensionList) && oFF.notNull(queryModel))
	{
		dimSize = inABreakDimensionList.size();
		for (idxDim = 0; idxDim < dimSize; idxDim++)
		{
			let inACurrentBreakDimensionName = inABreakDimensionList.getStringAt(idxDim);
			if (oFF.notNull(inACurrentBreakDimensionName))
			{
				let currentBreakDimension = queryModel.getDimensionByNameFromExistingMetadata(inACurrentBreakDimensionName);
				if (oFF.notNull(currentBreakDimension))
				{
					newCondition.addBreakGroupDimension(currentBreakDimension);
				}
			}
		}
	}
	return newCondition;
};

oFF.QInAConditionsThreshold = function() {};
oFF.QInAConditionsThreshold.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAConditionsThreshold.prototype._ff_c = "QInAConditionsThreshold";

oFF.QInAConditionsThreshold.importSingleMeasureCoordinate = function(queryModelBase, threshold, measureCoordinate)
{
	if (oFF.isNull(threshold) || oFF.isNull(measureCoordinate))
	{
		return;
	}
	let inADimensionName = measureCoordinate.getStringByKey("DimensionName");
	let inAMemberName = measureCoordinate.getStringByKey("MemberName");
	if (oFF.XStringUtils.isNullOrEmpty(inADimensionName) || oFF.XStringUtils.isNullOrEmpty(inAMemberName))
	{
		return;
	}
	let queryModel = queryModelBase;
	if (oFF.isNull(queryModel))
	{
		queryModel = threshold.getContext().getQueryModel();
	}
	if (oFF.notNull(queryModel))
	{
		let dimension = queryModel.getDimensionByNameFromExistingMetadata(inADimensionName);
		if (oFF.notNull(dimension))
		{
			let dimensionMember = dimension.getDimensionMember(inAMemberName);
			if (oFF.notNull(dimensionMember))
			{
				threshold.addMeasureCoordinate(dimensionMember);
			}
		}
	}
};
oFF.QInAConditionsThreshold.importThresholdValue = function(filterBag, inAValue)
{
	if (oFF.isNull(filterBag) || oFF.isNull(inAValue))
	{
		return;
	}
	if (inAValue.isBoolean())
	{
		filterBag.setBoolean(inAValue.getBoolean());
	}
	else if (inAValue.isString())
	{
		filterBag.setString(inAValue.getString());
	}
	else if (inAValue.isDouble())
	{
		filterBag.setDouble(inAValue.getDouble());
	}
	else if (inAValue.isInteger())
	{
		filterBag.setInteger(inAValue.getInteger());
	}
	else if (inAValue.isLong())
	{
		filterBag.setLong(inAValue.getLong());
	}
};
oFF.QInAConditionsThreshold.setValue = function(exporter, parameterName, inaElement, value, valueType)
{
	if (valueType === oFF.XValueType.VARIABLE)
	{
		let variableValue = value.getVariableValue();
		if (oFF.notNull(variableValue))
		{
			inaElement.putString(parameterName, variableValue.getName());
			if (oFF.XString.isEqual(parameterName, "Low"))
			{
				inaElement.putString("LowIs", "Variable");
			}
			else if (oFF.XString.isEqual(parameterName, "High"))
			{
				inaElement.putString("HighIs", "Variable");
			}
		}
	}
	else
	{
		oFF.QInAValueUtils.exportPlaceholderValue(exporter, parameterName, inaElement, value, valueType, value.getQueryModel());
	}
};
oFF.QInAConditionsThreshold.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let conditionThreshold = modelComponent;
	let measureCoordinates = conditionThreshold.getMeasureCoordinates();
	let inAMeasureCoordinates = oFF.PrFactory.createList();
	let len = measureCoordinates.size();
	let queryModel = conditionThreshold.getQueryModel();
	for (let i = 0; i < len; i++)
	{
		let currentDimensionMember = measureCoordinates.get(i);
		let singleInACoordinate = oFF.PrFactory.createStructure();
		let dimension = currentDimensionMember.getDimension();
		if (oFF.notNull(dimension))
		{
			let conditionDimensionName = dimension.getName();
			let conditionDimension = queryModel.getDimensionByName(conditionDimensionName);
			let memberName = currentDimensionMember.getName();
			let memberNameByAlias = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, memberName, exporter);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(memberNameByAlias) && (conditionDimension.getDimensionType() === oFF.DimensionType.MEASURE_STRUCTURE || conditionDimension.getDimensionType() === oFF.DimensionType.ACCOUNT))
			{
				memberName = memberNameByAlias;
			}
			if (!conditionDimension.getAxisType().isVisible() && exporter.m_capabilities.supportsConditionsWithVersions() && conditionDimension.getDimensionType().isTypeOf(oFF.DimensionType.GENERAL_VERSION))
			{
				continue;
			}
			if (conditionDimension.getDimensionType() !== oFF.DimensionType.MEASURE_STRUCTURE || conditionDimension.getStructureMember(memberName) !== null)
			{
				singleInACoordinate.putString("DimensionName", conditionDimensionName);
				singleInACoordinate.putString("MemberName", memberName);
				inAMeasureCoordinates.add(singleInACoordinate);
			}
		}
	}
	if (len === 0 || inAMeasureCoordinates.isEmpty())
	{
		return null;
	}
	inaStructure.put("MeasureCoordinate", inAMeasureCoordinates);
	let isMds = queryModel.getSystemType().isTypeOf(oFF.SystemType.HANA);
	let lowValue = conditionThreshold.getLow();
	let highValue = conditionThreshold.getHigh();
	if (isMds)
	{
		if (lowValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "Low", inaStructure, lowValue, oFF.XValueType.INTEGER);
		}
		if (highValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "High", inaStructure, highValue, oFF.XValueType.INTEGER);
		}
		let level = conditionThreshold.getLevel();
		if (oFF.notNull(level))
		{
			inaStructure.putInteger("Level", level.getInteger());
		}
	}
	else
	{
		if (lowValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "Low", inaStructure, lowValue, lowValue.getValueType());
		}
		if (highValue.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "High", inaStructure, highValue, highValue.getValueType());
		}
		let lowValueIs = conditionThreshold.getLowIs();
		if (lowValueIs.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "LowIs", inaStructure, lowValueIs, lowValueIs.getValueType());
		}
		let highValueIs = conditionThreshold.getHighIs();
		if (highValueIs.getValue() !== null)
		{
			oFF.QInAConditionsThreshold.setValue(exporter, "HighIs", inaStructure, highValueIs, highValueIs.getValueType());
		}
	}
	let comparisonOperator = conditionThreshold.getComparisonOperator();
	inaStructure.putString("Comparison", comparisonOperator.getName());
	return inaStructure;
};
oFF.QInAConditionsThreshold.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CONDITIONS_THRESHOLD;
};
oFF.QInAConditionsThreshold.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return modelComponent;
	}
	let newThreshold;
	if (oFF.isNull(modelComponent))
	{
		newThreshold = oFF.QConditionThreshold.create(context, parentComponent);
	}
	else
	{
		newThreshold = modelComponent;
	}
	let inAComparisonOperator = inaStructure.getStringByKey("Comparison");
	let conditionComparisonOperator = oFF.ConditionComparisonOperator.lookupName(inAComparisonOperator);
	if (oFF.notNull(conditionComparisonOperator))
	{
		newThreshold.setComparisonOperator(conditionComparisonOperator);
	}
	let inALow = inaStructure.getByKey("Low");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getLow(), inALow);
	let inALowIs = inaStructure.getByKey("LowIs");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getLowIs(), inALowIs);
	let inAHigh = inaStructure.getByKey("High");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getHigh(), inAHigh);
	let inAHighIs = inaStructure.getByKey("HighIs");
	oFF.QInAConditionsThreshold.importThresholdValue(newThreshold.getHighIs(), inAHighIs);
	let inAMeasureCoordinates = inaStructure.getListByKey("MeasureCoordinate");
	if (oFF.notNull(inAMeasureCoordinates))
	{
		let queryModel = context.getQueryModel();
		let len = inAMeasureCoordinates.size();
		for (let i = 0; i < len; i++)
		{
			oFF.QInAConditionsThreshold.importSingleMeasureCoordinate(queryModel, newThreshold, inAMeasureCoordinates.getStructureAt(i));
		}
	}
	newThreshold.setLeavesOnly(inaStructure.getBooleanByKeyExt("LeavesOnly", false));
	let inaLevel = inaStructure.getByKey("Level");
	if (oFF.notNull(inaLevel))
	{
		newThreshold.setLevel(oFF.XIntegerValue.create(inaLevel.getInteger()));
	}
	return newThreshold;
};

oFF.QInACurrencyTranslationItem = function() {};
oFF.QInACurrencyTranslationItem.prototype = new oFF.QInAComponentWithStructure();
oFF.QInACurrencyTranslationItem.prototype._ff_c = "QInACurrencyTranslationItem";

oFF.QInACurrencyTranslationItem.createConditonalFormula = function(versionFieldName, categoryFieldName, rateTypeItem)
{
	if (oFF.isNull(versionFieldName) && oFF.isNull(categoryFieldName))
	{
		return null;
	}
	if (oFF.isNull(versionFieldName))
	{
		return oFF.QInACurrencyTranslationItem.createRateTypeCategory(categoryFieldName, rateTypeItem);
	}
	if (oFF.isNull(categoryFieldName))
	{
		return oFF.QInACurrencyTranslationItem.createRateTypeVersion(versionFieldName, rateTypeItem);
	}
	let formulaItemIf = oFF.QFactory.createFormulaFunction(null);
	formulaItemIf.setFunctionName(oFF.FormulaOperator.IF.getName());
	let formulaItemEq = oFF.QFactory.createFormulaFunction(null);
	let attributeRateVersion = oFF.QFactory.createFormulaAttributeWithName(null, versionFieldName);
	formulaItemEq.setFunctionName(oFF.FormulaOperator.EQ.getName());
	formulaItemEq.add(attributeRateVersion);
	let emptyString = oFF.QFactory.createFormulaConstant(null);
	emptyString.setString("");
	formulaItemEq.add(emptyString);
	formulaItemIf.add(formulaItemEq);
	formulaItemIf.add(oFF.QInACurrencyTranslationItem.createRateTypeCategory(categoryFieldName, rateTypeItem));
	formulaItemIf.add(oFF.QInACurrencyTranslationItem.createRateTypeVersion(versionFieldName, rateTypeItem));
	return formulaItemIf;
};
oFF.QInACurrencyTranslationItem.createRateTypeCategory = function(categoryFieldName, rateTypeItem)
{
	let formulaItem = oFF.QFactory.createFormulaFunction(null);
	formulaItem.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
	let attributeCategory = oFF.QFactory.createFormulaAttributeWithName(null, categoryFieldName);
	let separatorToken = oFF.QFactory.createFormulaConstant(null);
	separatorToken.setString("$");
	formulaItem.add(attributeCategory);
	formulaItem.add(separatorToken);
	formulaItem.add(rateTypeItem);
	return formulaItem;
};
oFF.QInACurrencyTranslationItem.createRateTypeVersion = function(versionFieldName, rateTypeItem)
{
	let formulaItem = oFF.QFactory.createFormulaFunction(null);
	formulaItem.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
	let prefix = oFF.QFactory.createFormulaConstant(null);
	prefix.setString("Version$");
	let separatorToken = oFF.QFactory.createFormulaConstant(null);
	separatorToken.setString("$");
	let attributeVersion = oFF.QFactory.createFormulaAttributeWithName(null, versionFieldName);
	formulaItem.add(prefix);
	formulaItem.add(rateTypeItem);
	formulaItem.add(separatorToken);
	formulaItem.add(attributeVersion);
	return formulaItem;
};
oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager = function(measureCurrencyTranslation)
{
	let result = null;
	let queryModel = measureCurrencyTranslation.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		result = queryModel.getCurrencyTranslationManager();
	}
	else
	{
		let parent = measureCurrencyTranslation.getParentComponent();
		if (oFF.notNull(parent) && parent.getComponentType() === oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER)
		{
			result = parent;
		}
	}
	return result;
};
oFF.QInACurrencyTranslationItem.resolveRateName = function(measureCurrencyTranslation)
{
	let result = null;
	let rateName = measureCurrencyTranslation.getRateName();
	if (oFF.notNull(rateName) && (rateName.isFieldBased() || rateName.isFixed() || rateName.isFormulaBased()))
	{
		result = rateName;
	}
	else
	{
		let currencyTranslationManager = oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager(measureCurrencyTranslation);
		let rateTypeFieldName = currencyTranslationManager.getRateTypeFieldName();
		let rateVersionFieldName = currencyTranslationManager.getRateVersionFieldName();
		let categoryFieldName = currencyTranslationManager.getCategoryFieldName();
		let rateType = measureCurrencyTranslation.getFixedRateType();
		let category = measureCurrencyTranslation.getFixedCategory();
		let rateVersion = measureCurrencyTranslation.getFixedRateVersion();
		if (oFF.CtRateType.isDefined(rateType))
		{
			if (oFF.CtCategory.isDefined(category))
			{
				result = oFF.QCurrencyLookupValue.createFixedByValue(null, oFF.XStringValue.create(oFF.XStringUtils.concatenate3(oFF.QInAConverter.lookupCategoryInA(category), "$", oFF.QInAConverter.lookupRateTypeInA(rateType))));
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(rateVersion))
			{
				result = oFF.QCurrencyLookupValue.createFixedByValue(null, oFF.XStringValue.create(oFF.XStringUtils.concatenate4("Version$", oFF.QInAConverter.lookupRateTypeInA(rateType), "$", rateVersion)));
			}
			else
			{
				let rateTypeConstant = oFF.QFactory.createFormulaConstant(null);
				rateTypeConstant.setString(oFF.QInAConverter.lookupRateTypeInA(rateType));
				let formula = oFF.QInACurrencyTranslationItem.createConditonalFormula(rateVersionFieldName, categoryFieldName, rateTypeConstant);
				if (oFF.notNull(formula))
				{
					result = oFF.QCurrencyLookupValue.createByFormulaItem(null, formula);
				}
			}
		}
		else if (currencyTranslationManager.deriveRateTypeFromAccount() && oFF.notNull(rateTypeFieldName))
		{
			let rateTypeFieldParam = oFF.QFactory.createFormulaAttributeWithName(null, rateTypeFieldName);
			if (oFF.CtCategory.isDefined(category))
			{
				let catConcat = oFF.QFactory.createFormulaFunction(null);
				catConcat.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
				let catParam = oFF.QFactory.createFormulaConstant(null);
				catParam.setString(oFF.QInAConverter.lookupCategoryInA(category));
				let catDollar = oFF.QFactory.createFormulaConstant(null);
				catDollar.setString("$");
				catConcat.add(catParam);
				catConcat.add(catDollar);
				catConcat.add(rateTypeFieldParam);
				result = oFF.QCurrencyLookupValue.createByFormulaItem(null, catConcat);
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(rateVersion))
			{
				let versionConcat = oFF.QFactory.createFormulaFunction(null);
				versionConcat.setFunctionName(oFF.FormulaOperator.ADDITION.getName());
				let versionPrefix = oFF.QFactory.createFormulaConstant(null);
				versionPrefix.setString("Version$");
				let versionDollar = oFF.QFactory.createFormulaConstant(null);
				versionDollar.setString("$");
				let versionParam = oFF.QFactory.createFormulaConstant(null);
				versionParam.setString(rateVersion);
				versionConcat.add(versionPrefix);
				versionConcat.add(rateTypeFieldParam);
				versionConcat.add(versionDollar);
				versionConcat.add(versionParam);
				result = oFF.QCurrencyLookupValue.createByFormulaItem(null, versionConcat);
			}
			else
			{
				let formula2 = oFF.QInACurrencyTranslationItem.createConditonalFormula(rateVersionFieldName, categoryFieldName, rateTypeFieldParam);
				if (oFF.notNull(formula2))
				{
					result = oFF.QCurrencyLookupValue.createByFormulaItem(null, formula2);
				}
			}
		}
		else
		{
			let message = oFF.XStringBuffer.create();
			message.append("The currency translation object '");
			message.append(measureCurrencyTranslation.getName());
			message.append("' is not fully specified. The rate type cannot be derived from the model properties.");
			throw oFF.XException.createIllegalStateException(message.toString());
		}
	}
	return result;
};
oFF.QInACurrencyTranslationItem.resolveReferenceDate = function(measureCurrencyTranslation)
{
	let result = null;
	let ctrdFieldName = oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager(measureCurrencyTranslation).getDefaultReferenceDateFieldName();
	let referenceDate = measureCurrencyTranslation.getReferenceDate();
	if (measureCurrencyTranslation.getDateOffset() === 0)
	{
		if (oFF.notNull(referenceDate) && (referenceDate.isFixed() || referenceDate.isFieldBased() || referenceDate.isFormulaBased()))
		{
			result = referenceDate;
		}
		else if (oFF.notNull(ctrdFieldName))
		{
			result = oFF.QCurrencyLookupValue.createByFieldName(null, ctrdFieldName);
		}
	}
	else
	{
		let referenceFieldName;
		if (oFF.notNull(referenceDate) && referenceDate.isFieldBased())
		{
			referenceFieldName = referenceDate.getFieldName();
		}
		else
		{
			referenceFieldName = ctrdFieldName;
		}
		if (oFF.notNull(referenceFieldName))
		{
			let formulaItem = oFF.QFactory.createFormulaFunction(null);
			let attribute = oFF.QFactory.createFormulaAttributeWithName(null, referenceFieldName);
			formulaItem.add(attribute);
			let element = oFF.QFactory.createFormulaConstant(null);
			let dateOffsetGranularity = measureCurrencyTranslation.getDateOffsetGranularity();
			let dateOffset = measureCurrencyTranslation.getDateOffset();
			if (dateOffsetGranularity === oFF.DateOffsetGranularity.DAY)
			{
				formulaItem.setFunctionName("CALCADDDAYS");
				element.setInteger(dateOffset);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.WEEK)
			{
				formulaItem.setFunctionName("CALCADDDAYS");
				element.setInteger(dateOffset * 7);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.MONTH)
			{
				formulaItem.setFunctionName("CALCADDMONTHS");
				element.setInteger(dateOffset);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.QUARTER)
			{
				formulaItem.setFunctionName("CALCADDMONTHS");
				element.setInteger(dateOffset * 3);
			}
			else if (dateOffsetGranularity === oFF.DateOffsetGranularity.YEAR)
			{
				formulaItem.setFunctionName("CALCADDYEARS");
				element.setInteger(dateOffset);
			}
			formulaItem.add(element);
			result = oFF.QCurrencyLookupValue.createByFormulaItem(null, formulaItem);
		}
	}
	return result;
};
oFF.QInACurrencyTranslationItem.resolveTargetCurrency = function(measureCurrencyTranslation)
{
	let result;
	if (measureCurrencyTranslation.isDefaultCurrency())
	{
		let currencyTranslationManager = oFF.QInACurrencyTranslationItem.getCurrencyTranslationManager(measureCurrencyTranslation);
		result = oFF.QCurrencyLookupValue.createFixedByValue(null, oFF.XStringValue.create(currencyTranslationManager.getDefaultCurrency()));
	}
	else
	{
		result = measureCurrencyTranslation.getTargetCurrency();
	}
	return result;
};
oFF.QInACurrencyTranslationItem.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let measureCurrencyTranslation = modelComponent;
	if (oFF.notNull(measureCurrencyTranslation))
	{
		let queryModel = measureCurrencyTranslation.getQueryModel();
		inaStructure.putString("Name", measureCurrencyTranslation.getName());
		inaStructure.putString("Description", measureCurrencyTranslation.getText());
		inaStructure.putStringNotNullAndNotEmpty("ErrorHandling", oFF.QInAConverter.lookupCtErrorHandlingModeInA(measureCurrencyTranslation.getErrorHandling()));
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "SourceCurrency", measureCurrencyTranslation.getSourceCurrency(), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "TargetCurrency", oFF.QInACurrencyTranslationItem.resolveTargetCurrency(measureCurrencyTranslation), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "ReferenceDate", oFF.QInACurrencyTranslationItem.resolveReferenceDate(measureCurrencyTranslation), queryModel);
		this.exportSpecificCurrencyTranslationProperty(exporter, inaStructure, "RateName", oFF.QInACurrencyTranslationItem.resolveRateName(measureCurrencyTranslation), queryModel);
	}
	return inaStructure;
};
oFF.QInACurrencyTranslationItem.prototype.exportSpecificCurrencyTranslationProperty = function(exporter, inaCurrencyTranslation, propertyName, lookupValue, queryModel)
{
	if (oFF.notNull(lookupValue))
	{
		if (lookupValue.isFixed())
		{
			inaCurrencyTranslation.putNewStructure(propertyName).putString("Fixed", lookupValue.getFixedValue().getStringRepresentation());
		}
		else if (lookupValue.isFieldBased())
		{
			inaCurrencyTranslation.putNewStructure(propertyName).putString("DimensionAttribute", lookupValue.getFieldName());
		}
		else if (lookupValue.isFormulaBased())
		{
			let formula = inaCurrencyTranslation.putNewStructure(propertyName).putNewStructure("Formula");
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, lookupValue.getFormulaItem(), formula, queryModel);
		}
		else if (lookupValue.isVariableBased())
		{
			let variableName = lookupValue.getVariableName();
			if (oFF.isNull(queryModel))
			{
				inaCurrencyTranslation.putNewStructure(propertyName).putString("Variable", variableName);
			}
			else
			{
				let variable = queryModel.getVariable(variableName);
				if (oFF.notNull(variable))
				{
					if (variable.isCustomVariable())
					{
						let externalVariable = variable.getExternalRepresentation();
						if (oFF.notNull(externalVariable))
						{
							variable = externalVariable;
						}
						let stringValue = variable.getValueByString();
						if (oFF.XStringUtils.isNotNullAndNotEmpty(stringValue))
						{
							inaCurrencyTranslation.putNewStructure(propertyName).putString("Fixed", stringValue);
						}
						else
						{
							exporter.addError(oFF.ErrorCodes.NO_VALUE_EXTRACTED_FROM_FRONTEND_CURRENCY_TRANSLATION_VARIABLE, "Cannot Extract Variable Value from Currency Translation Variable");
						}
					}
					else
					{
						inaCurrencyTranslation.putNewStructure(propertyName).putString("Variable", variableName);
					}
				}
				else
				{
					exporter.addError(oFF.ErrorCodes.CURRENCY_VARIABLE_NOT_AVAILABLE_FOR_CURRENT_QUERY_MODEL, "Currency variable not available for current query model");
				}
			}
		}
	}
};
oFF.QInACurrencyTranslationItem.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM;
};
oFF.QInACurrencyTranslationItem.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let currencyTranslation = modelComponent;
	if (oFF.notNull(currencyTranslation) && oFF.XCollectionUtils.hasElements(inaStructure))
	{
		currencyTranslation.setMetadataDefined(true);
		currencyTranslation.setErrorHandling(oFF.QInAConverter.lookupCtErrorHandlingMode(inaStructure.getStringByKey("ErrorHandling")));
		currencyTranslation.setSourceCurrency(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure, "SourceCurrency"));
		currencyTranslation.setTargetCurrency(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure, "TargetCurrency"));
		currencyTranslation.setReferenceDate(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.DATE, inaStructure, "ReferenceDate"));
		currencyTranslation.setRateName(this.importSpecificCurrencyTranslationElement(importer, currencyTranslation, oFF.XValueType.STRING, inaStructure, "RateName"));
	}
	return currencyTranslation;
};
oFF.QInACurrencyTranslationItem.prototype.importSpecificCurrencyTranslationElement = function(importer, specificCurrencyTranslationBase, valueType, enclosingStructure, key)
{
	if (enclosingStructure.containsKey(key))
	{
		let structure = enclosingStructure.getStructureByKey(key);
		if (structure.containsKey("Fixed"))
		{
			let stringValue = structure.getStringByKey("Fixed");
			if (valueType === oFF.XValueType.STRING)
			{
				return oFF.QCurrencyLookupValue.createFixedByValue(specificCurrencyTranslationBase, oFF.XStringValue.create(stringValue));
			}
			if (valueType === oFF.XValueType.DATE)
			{
				return oFF.QCurrencyLookupValue.createFixedByValue(specificCurrencyTranslationBase, oFF.XDate.createDateSafe(stringValue));
			}
			return null;
		}
		else if (structure.containsKey("DimensionAttribute"))
		{
			return oFF.QCurrencyLookupValue.createByFieldName(specificCurrencyTranslationBase, structure.getStringByKey("DimensionAttribute"));
		}
		else if (structure.containsKey("Formula"))
		{
			let formulaItem = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, specificCurrencyTranslationBase.getQueryModel().getMeasureDimension(), structure.getStructureByKey("Formula"), null, null);
			return oFF.QCurrencyLookupValue.createByFormulaItem(specificCurrencyTranslationBase, formulaItem);
		}
		else if (structure.containsKey("Variable"))
		{
			return oFF.QCurrencyLookupValue.createByVariableName(specificCurrencyTranslationBase, structure.getStringByKey("Variable"));
		}
	}
	return null;
};

oFF.QInACurrencyTranslationListManager = function() {};
oFF.QInACurrencyTranslationListManager.prototype = new oFF.QInAComponentWithList();
oFF.QInACurrencyTranslationListManager.prototype._ff_c = "QInACurrencyTranslationListManager";

oFF.QInACurrencyTranslationListManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaCurTransList = null;
	let currencyTranslationManager = modelComponent;
	let specificCurrencyTranslations = currencyTranslationManager.getMeasureCurrencyTranslationsForInaData();
	if (oFF.XCollectionUtils.hasElements(specificCurrencyTranslations))
	{
		inaCurTransList = oFF.PrFactory.createList();
		let size = specificCurrencyTranslations.size();
		for (let i = 0; i < size; i++)
		{
			let specificTranslation = specificCurrencyTranslations.get(i);
			exporter.exportCurrencyTranslationElement(specificTranslation, inaCurTransList.addNewStructure());
		}
	}
	return inaCurTransList;
};
oFF.QInACurrencyTranslationListManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST;
};
oFF.QInACurrencyTranslationListManager.prototype.getTagName = function()
{
	return "CurrencyTranslations";
};
oFF.QInACurrencyTranslationListManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let currencyTranslationManagerBase = context.getQueryModel().getCurrencyTranslationManager();
	if (oFF.notNull(currencyTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
	{
		let size = inaList.size();
		for (let i = 0; i < size; i++)
		{
			let inaCurrencyTranslation = inaList.getStructureAt(i);
			let name = inaCurrencyTranslation.getStringByKey("Name");
			let description = inaCurrencyTranslation.getStringByKey("Description");
			let currencyTranslation = currencyTranslationManagerBase.addNewMeasureCurrencyTranslationBase(name, description);
			importer.importCurrencyTranslationElement(inaCurrencyTranslation, currencyTranslation, context);
		}
		currencyTranslationManagerBase.postImportInitialization();
	}
	return currencyTranslationManagerBase;
};

oFF.QInACurrencyTranslationManager = function() {};
oFF.QInACurrencyTranslationManager.prototype = new oFF.QInAComponentWithStructure();
oFF.QInACurrencyTranslationManager.prototype._ff_c = "QInACurrencyTranslationManager";

oFF.QInACurrencyTranslationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let currencyTranslationManager = modelComponent;
	if (oFF.isNull(currencyTranslationManager) || !currencyTranslationManager.getModelCapabilities().supportsQueryCurrencyTranslation())
	{
		return inaStructure;
	}
	let currencyTranslationDetails = currencyTranslationManager.getCurrencyTranslationDetails();
	if (oFF.notNull(currencyTranslationDetails))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(currencyTranslationDetails.getCurrencyTranslationName()))
		{
			if (currencyTranslationDetails.getCurrencyTranslationOperation() === null)
			{
				throw oFF.XException.createIllegalArgumentException("CurrencyTranslation Operation required.");
			}
			inaStructure.putString("Operation", currencyTranslationDetails.getCurrencyTranslationOperation().getName());
			inaStructure.putString("Name", currencyTranslationDetails.getCurrencyTranslationName());
			if (currencyTranslationDetails.getCurrencyTranslationOperation() === oFF.CurrencyTranslationOperation.BOTH || currencyTranslationDetails.getCurrencyTranslationOperation() === oFF.CurrencyTranslationOperation.TARGET)
			{
				if (currencyTranslationDetails.getCurrencyTranslationTarget() === null)
				{
					throw oFF.XException.createIllegalArgumentException("CurrencyTranslation Target Currency required.");
				}
				inaStructure.putString("Target", currencyTranslationDetails.getCurrencyTranslationTarget());
			}
		}
		else if (currencyTranslationManager.getCurrencyTranslationDetailsReset())
		{
			inaStructure.putString("Operation", "");
			inaStructure.putString("Name", "");
			inaStructure.putString("Target", "");
			currencyTranslationManager.setCurrencyTranslationDetailsReset(false);
		}
	}
	return inaStructure;
};
oFF.QInACurrencyTranslationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER;
};
oFF.QInACurrencyTranslationManager.prototype.getTagName = function()
{
	return "CurrencyTranslation";
};
oFF.QInACurrencyTranslationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let currencyTranslationManagerBase = modelComponent;
	return currencyTranslationManagerBase;
};

oFF.QInACustomHierarchyDefinition = function() {};
oFF.QInACustomHierarchyDefinition.prototype = new oFF.QInAComponentWithStructure();
oFF.QInACustomHierarchyDefinition.prototype._ff_c = "QInACustomHierarchyDefinition";

oFF.QInACustomHierarchyDefinition.prototype.addHierarchyElementToStructure = function(element, structure, parentIndex, dimensionName)
{
	let nodeIds = structure.getListByKey("NodeId");
	let nodeId = nodeIds.size();
	nodeIds.addInteger(nodeId);
	structure.getListByKey("NodeName").addString(element.getName());
	structure.getListByKey("ParentId").addInteger(parentIndex);
	if (element.isMemberElement())
	{
		structure.getListByKey("Description").addString("");
		structure.getListByKey("NodeType").addString(element.isNode() ? dimensionName : "");
	}
	else
	{
		structure.getListByKey("Description").addString(element.getName());
		structure.getListByKey("NodeType").addString("1HIER_NODE_SIMPLE");
	}
	if (element.isNode())
	{
		let childNodes = element.getChildNodes();
		let size = childNodes.size();
		for (let i = 0; i < size; i++)
		{
			this.addHierarchyElementToStructure(childNodes.get(i), structure, nodeId, dimensionName);
		}
	}
};
oFF.QInACustomHierarchyDefinition.prototype.addHierarchyNodesFromStructure = function(hierarchyDefinition, nodes)
{
	let nodeIds = oFF.PrUtils.getListProperty(nodes, "NodeId");
	let nodeParentIds = oFF.PrUtils.getListProperty(nodes, "ParentId");
	let nodeNames = oFF.PrUtils.getListProperty(nodes, "NodeName");
	let nodeTypes = oFF.PrUtils.getListProperty(nodes, "NodeType");
	let size = oFF.PrUtils.getListSize(nodeIds, 0);
	if (oFF.PrUtils.isListEmpty(nodeIds) || oFF.PrUtils.isListEmpty(nodeParentIds) || oFF.PrUtils.isListEmpty(nodeNames) || oFF.PrUtils.isListEmpty(nodeTypes) || nodeParentIds.size() !== size || nodeNames.size() !== size || nodeTypes.size() !== size)
	{
		return;
	}
	let nodeMap = oFF.XSimpleMap.create();
	for (let i = 0; i < size; i++)
	{
		let nodeId = nodeIds.getIntegerAt(i);
		let nodeName = nodeNames.getStringAt(i);
		let nodeType = nodeTypes.getStringAt(i);
		let nodeParentId = nodeParentIds.getIntegerAt(i);
		let parent = nodeParentId === -1 ? hierarchyDefinition : nodeMap.getByKey(oFF.XIntegerValue.create(nodeParentId));
		if (oFF.notNull(parent))
		{
			if (oFF.XString.isEqual(nodeType, "1HIER_NODE_SIMPLE"))
			{
				nodeMap.put(oFF.XIntegerValue.create(nodeId), parent.addTextNode(nodeName));
			}
			else
			{
				parent.addMemberNode(nodeName);
			}
		}
	}
	oFF.XObjectExt.release(nodeMap);
};
oFF.QInACustomHierarchyDefinition.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let customHierarchyDefinition = modelComponent;
	let inaCustomHierarchyDimension = oFF.PrFactory.createStructure();
	inaCustomHierarchyDimension.putString("Name", customHierarchyDefinition.getDimensionName());
	if (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		inaCustomHierarchyDimension.putString("System", customHierarchyDefinition.getSystemName());
		inaCustomHierarchyDimension.putString("DataSource", customHierarchyDefinition.getDataSourceName());
	}
	else
	{
		inaCustomHierarchyDimension.putString("Axis", "Free");
	}
	let inaCustomHierarchy = oFF.PrFactory.createStructure();
	this.exportCustomHierarchy(customHierarchyDefinition, inaCustomHierarchy);
	inaCustomHierarchyDimension.put("Hierarchy", inaCustomHierarchy);
	let inaDefStructure = oFF.PrFactory.createStructure();
	let inaDimensionsList = inaDefStructure.putNewList("Dimensions");
	inaDimensionsList.add(inaCustomHierarchyDimension);
	return inaDefStructure;
};
oFF.QInACustomHierarchyDefinition.prototype.exportCustomHierarchy = function(customHierarchyDefinition, inaCustomHierarchy)
{
	let emptyString = "";
	let name = customHierarchyDefinition.getName();
	let customHierarchyDesc = customHierarchyDefinition.getDescription();
	inaCustomHierarchy.putString("Name", oFF.XStringUtils.isNotNullAndNotEmpty(name) ? name : emptyString);
	inaCustomHierarchy.putString("Version", emptyString);
	inaCustomHierarchy.putString("DueDate", emptyString);
	inaCustomHierarchy.putString("Description", oFF.notNull(customHierarchyDesc) ? customHierarchyDesc : emptyString);
	inaCustomHierarchy.putBoolean("IsTransient", true);
	inaCustomHierarchy.putBoolean("NoRestNodes", true);
	inaCustomHierarchy.put("Nodes", this.getHierarchyNodesAsStructure(customHierarchyDefinition));
};
oFF.QInACustomHierarchyDefinition.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION;
};
oFF.QInACustomHierarchyDefinition.prototype.getHierarchyNodesAsStructure = function(customHierarchyDefinition)
{
	let structure = oFF.PrFactory.createStructure();
	structure.putNewList("NodeId");
	structure.putNewList("NodeName");
	structure.putNewList("Description");
	structure.putNewList("NodeType");
	structure.putNewList("ParentId");
	let nodes = customHierarchyDefinition.getChildNodes();
	let size = nodes.size();
	for (let i = 0; i < size; i++)
	{
		this.addHierarchyElementToStructure(nodes.get(i), structure, -1, customHierarchyDefinition.getDimensionName());
	}
	return structure;
};
oFF.QInACustomHierarchyDefinition.prototype.getTagName = function()
{
	return null;
};
oFF.QInACustomHierarchyDefinition.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (!importer.getMode().isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		return null;
	}
	let inaDimensions = oFF.PrUtils.getListProperty(inaStructure, "Dimensions");
	let inaDimension = oFF.PrUtils.getStructureElement(inaDimensions, 0);
	if (oFF.notNull(inaDimension))
	{
		let system = inaDimension.getStringByKey("System");
		let dataSource = inaDimension.getStringByKey("DataSource");
		let dimensionName = inaDimension.getStringByKey("Name");
		let inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		if (oFF.notNull(inaHierarchy) && oFF.XStringUtils.isNotNullAndNotEmpty(system) && oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
		{
			let ignoreDatasource = true;
			let application = importer.getApplication();
			if (oFF.notNull(application))
			{
				let systemDescription = application.getSystemLandscape().getSystemDescription(system);
				ignoreDatasource = oFF.isNull(systemDescription) ? true : systemDescription.getSystemType().isTypeOf(oFF.SystemType.ABAP);
			}
			let hierarchyDefinition = oFF.QCustomHierarchyDefinition.createByData(system, dataSource, dimensionName, inaHierarchy.getStringByKey("Description"), ignoreDatasource);
			hierarchyDefinition.setName(inaHierarchy.getStringByKey("Name"));
			this.addHierarchyNodesFromStructure(hierarchyDefinition, inaHierarchy.getStructureByKey("Nodes"));
			return hierarchyDefinition;
		}
	}
	return null;
};

oFF.QInADataCell = function() {};
oFF.QInADataCell.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADataCell.prototype._ff_c = "QInADataCell";

oFF.QInADataCell.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dataCell = modelComponent;
	inaStructure.putString("Name", dataCell.getName());
	let disaggregationMode = dataCell.getDisaggregationMode();
	oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "DisaggregationMode", oFF.isNull(disaggregationMode) ? oFF.DisaggregationMode.NONE : disaggregationMode);
	let referenceDataCell = dataCell.getDisaggregationRefCell();
	inaStructure.putString("DisaggregationReferenceCellName", oFF.isNull(referenceDataCell) ? "0" : referenceDataCell.getName());
	if (dataCell.exportingWithCompleteDefinition() || dataCell.hasPropertyChangedForInAData(oFF.QDataCellProperties.QY_SCALING_FACTOR))
	{
		inaStructure.putInteger("ScalingFactor", dataCell.getScalingFactor());
	}
	if (dataCell.exportingWithCompleteDefinition() || dataCell.hasPropertyChangedForInAData(oFF.QDataCellProperties.QY_DECIMAL_PLACES))
	{
		inaStructure.putInteger("Decimals", dataCell.getDecimalPlaces());
	}
	if (dataCell.exportingWithCompleteDefinition() || dataCell.hasPropertyChangedForInAData(oFF.QDataCellProperties.QY_SIGN_REVERSAL))
	{
		inaStructure.putBoolean("SignReversal", dataCell.hasSignReversal());
	}
	if (dataCell.exportingWithCompleteDefinition() || dataCell.hasPropertyChangedForInAData(oFF.QDataCellProperties.QY_CUMULATION))
	{
		inaStructure.putBoolean("Cumulation", dataCell.isCumulated());
	}
	inaStructure.putBoolean("Emphasized", dataCell.isEmphasized());
	let baseValueType = dataCell.getBaseValueType();
	let inaBaseValueType = oFF.QInAConverter.lookupIntByValueType(baseValueType);
	inaStructure.putInteger("CellValueType", inaBaseValueType);
	let inaMemberReferences = inaStructure.putNewList("DimensionMemberReferences");
	let referenceStructureElement = dataCell.getReferenceStructureElement1();
	if (oFF.notNull(referenceStructureElement))
	{
		inaMemberReferences.addString(referenceStructureElement.getName());
		referenceStructureElement = dataCell.getReferenceStructureElement2();
		if (oFF.notNull(referenceStructureElement))
		{
			inaMemberReferences.addString(referenceStructureElement.getName());
		}
	}
	this.exportRestrictedMeasureSignReversal(exporter, inaStructure, dataCell);
	if (exporter.m_mode === oFF.QModelFormat.INA_METADATA)
	{
		inaStructure.putStringNotNullAndNotEmpty("SemanticObject", dataCell.getSemanticObject());
	}
	return inaStructure;
};
oFF.QInADataCell.prototype.exportRestrictedMeasureSignReversal = function(exporter, inaStructure, dataCell)
{
	if (exporter.getMode() !== oFF.QModelFormat.INA_DATA || !dataCell.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.BW) || dataCell.getReferenceStructureElement1() === null || dataCell.getReferenceStructureElement1().getOlapComponentType() !== oFF.MemberType.RESTRICTED_MEASURE)
	{
		return;
	}
	let restrictedMeasure = dataCell.getReferenceStructureElement1();
	if (!restrictedMeasure.isAutoSignFlip())
	{
		return;
	}
	let queryModel = restrictedMeasure.getQueryModel();
	let memberName = restrictedMeasure.getMemberForSignFlip(queryModel);
	if (oFF.notNull(memberName))
	{
		let measureStructure = queryModel.getMeasureDimension();
		let member = measureStructure.getStructureMember(memberName);
		if (oFF.notNull(member))
		{
			let queryDataCells = member.getQueryDataCells();
			if (!queryDataCells.isEmpty())
			{
				let dataCellOfInterest = queryDataCells.get(0);
				if (oFF.notNull(dataCellOfInterest))
				{
					inaStructure.putBoolean("SignReversal", dataCellOfInterest.hasSignReversal());
				}
			}
		}
	}
};
oFF.QInADataCell.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELL;
};
oFF.QInADataCell.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let queryDataCellList = queryModel.getQueryDataCellsBase();
	let dataCell = queryDataCellList.newQueryDataCell(inaStructure.getStringByKey("Name"));
	dataCell.setSignReversal(inaStructure.getBooleanByKeyExt("SignReversal", false));
	dataCell.setEmphasized(inaStructure.getBooleanByKeyExt("Emphasized", false));
	dataCell.setCumulation(inaStructure.getBooleanByKeyExt("Cumulation", false));
	dataCell.setInputEnabled(inaStructure.getBooleanByKeyExt("InputEnabled", false));
	dataCell.setDisaggregationMode(oFF.DisaggregationMode.lookupWithDefault(inaStructure.getStringByKeyExt("DisaggregationMode", null), oFF.DisaggregationMode.NONE));
	dataCell.setDisaggregationRefCellName(inaStructure.getStringByKeyExt("DisaggregationReferenceCellName", null));
	dataCell.setScalingFactor(inaStructure.getIntegerByKeyExt("ScalingFactor", 1));
	dataCell.setDecimalPlaces(inaStructure.getIntegerByKeyExt("Decimals", 0));
	let inaBaseValueType = inaStructure.getIntegerByKeyExt("CellValueType", 0);
	let cellValueType = oFF.QInAConverter.lookupValueTypeByInt(inaBaseValueType);
	dataCell.setBaseCellValueType(cellValueType);
	if (cellValueType === oFF.XValueType.DIMENSION_MEMBER)
	{
		let dimensionReferenceName = inaStructure.getStringByKey("CellDimensionReference");
		dataCell.setDimensionReference(queryModel.getDimensions().getByKey(dimensionReferenceName));
	}
	let inaMemberReferences = inaStructure.getListByKey("DimensionMemberReferences");
	if (oFF.notNull(inaMemberReferences))
	{
		for (let k = 0; k < inaMemberReferences.size(); k++)
		{
			dataCell.addDimensionMemberReference(inaMemberReferences.getStringAt(k));
		}
	}
	if (importer.m_mode === oFF.QModelFormat.INA_METADATA && dataCell.getReferenceStructureElement1() === null && dataCell.getReferenceStructureElement2() === null)
	{
		queryDataCellList.removeElement(dataCell);
		return null;
	}
	if (inaStructure.hasStringByKey("SemanticObject"))
	{
		dataCell.setSemanticObject(inaStructure.getStringByKey("SemanticObject"));
	}
	return dataCell;
};

oFF.QInADataCellsAll = function() {};
oFF.QInADataCellsAll.prototype = new oFF.QInAComponentWithList();
oFF.QInADataCellsAll.prototype._ff_c = "QInADataCellsAll";

oFF.QInADataCellsAll.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let queryModel = modelComponent;
	let inaQueryDataCellList = null;
	let capabilities = queryModel.getModelCapabilities();
	if (capabilities.supportsDataCells() && queryModel.getQueryManager().getInitSettings().isRequestingDataCells())
	{
		let queryDataCells = queryModel.getQueryDataCells();
		inaQueryDataCellList = oFF.PrFactory.createList();
		let size = queryDataCells.size();
		for (let i = 0; i < size; i++)
		{
			let cellStructure = exporter.exportDataCell(queryDataCells.get(i), null);
			inaQueryDataCellList.add(cellStructure);
		}
	}
	return inaQueryDataCellList;
};
oFF.QInADataCellsAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELLS;
};
oFF.QInADataCellsAll.prototype.getTagName = function()
{
	return "QueryDataCells";
};
oFF.QInADataCellsAll.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let capabilities = context.getModelCapabilities();
	let queryModel = context.getQueryModel();
	if (capabilities.supportsDataCells() && importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT && queryModel.getQueryManager().getInitSettings().isRequestingDataCells())
	{
		let queryDataCellList = queryModel.getQueryDataCellsBase();
		queryDataCellList.clear();
		if (oFF.notNull(inaList))
		{
			for (let i = 0; i < inaList.size(); i++)
			{
				importer.importDataCell(inaList.getStructureAt(i), queryModel);
			}
		}
	}
	return null;
};

oFF.QInADimension = function() {};
oFF.QInADimension.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADimension.prototype._ff_c = "QInADimension";

oFF.QInADimension.exportFieldLayout = function(exporter, inaDimension, dimension)
{
	let exportingFields;
	let context = exporter.m_modelContext;
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA))
	{
		inaDimension.putString("FieldLayoutType", dimension.getFieldLayoutType().toString());
		oFF.QInADimension.exportRsFields(inaDimension, dimension);
	}
	if (dimension.getFieldLayoutTypeExt(context) === oFF.FieldLayoutType.FIELD_BASED)
	{
		exportingFields = dimension.getFieldsExt(context);
	}
	else
	{
		exportingFields = dimension.getAttributesExt(context).getEffectiveFields(context);
	}
	let isBwResultSet = context === oFF.QContextType.RESULT_SET && (dimension.getQueryModel() === null || exporter.isAbap(dimension.getQueryModel()));
	let inaFieldList = inaDimension.putNewList("Attributes");
	oFF.QInADimension.exportListOfFields2(exportingFields, inaFieldList, exporter, false, null, isBwResultSet, null);
	let hiddenFields = oFF.QInADimension.getHiddenFields(exporter, dimension, exportingFields);
	oFF.QInADimension.exportListOfFields2(hiddenFields, inaFieldList, exporter, true, null, isBwResultSet, null);
};
oFF.QInADimension.exportFieldLayout2 = function(exporter, inaDimension, dimension)
{
	let exportingFields;
	let hiddenFields;
	let context = exporter.m_modelContext;
	let isBwResultSet = context === oFF.QContextType.RESULT_SET && (dimension.getQueryModel() === null || exporter.isAbap(dimension.getQueryModel()));
	let resultSetContainer = dimension.getQueryManager().getActiveResultSetContainer();
	let inaFieldList = inaDimension.putNewList("Attributes");
	if (dimension.getFieldLayoutTypeExt(context) === oFF.FieldLayoutType.FIELD_BASED)
	{
		exportingFields = dimension.getFieldsExt(context);
		oFF.QInADimension.exportListOfFields2(exportingFields, inaFieldList, exporter, false, dimension, isBwResultSet, resultSetContainer);
		hiddenFields = oFF.QInADimension.getHiddenFields(exporter, dimension, exportingFields);
		oFF.QInADimension.exportListOfFields2(hiddenFields, inaFieldList, exporter, true, dimension, isBwResultSet, resultSetContainer);
	}
	else
	{
		let resultSetAttributesList = dimension.getAttributesExt(context);
		let attributeSize = resultSetAttributesList.size();
		let idxAttribute;
		let iqAttribute;
		let exportingFieldsFullList = oFF.XListOfNameObject.create();
		for (idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++)
		{
			iqAttribute = resultSetAttributesList.get(idxAttribute);
			exportingFields = iqAttribute.getFieldsExt(context);
			oFF.QInADimension.exportListOfFields2(exportingFields, inaFieldList, exporter, false, iqAttribute, isBwResultSet, resultSetContainer);
			exportingFieldsFullList.addAll(exportingFields);
		}
		for (idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++)
		{
			iqAttribute = resultSetAttributesList.get(idxAttribute);
			let hiddenFields2 = oFF.QInADimension.getHiddenFields(exporter, dimension, exportingFieldsFullList);
			oFF.QInADimension.exportListOfFields2(hiddenFields2, inaFieldList, exporter, true, iqAttribute, isBwResultSet, resultSetContainer);
		}
	}
};
oFF.QInADimension.exportListOfFields2 = function(fields, inaFields, exporter, hide, fieldContainer, isBwResultSet, resultSetContainer)
{
	let flagVisible = oFF.QImExFlag.DEFAULT_ALL;
	let flagHidden = oFF.XMath.binaryOr(flagVisible, oFF.QImExFlag.HIDE);
	let defaultQueryTextField = null;
	if (oFF.notNull(fieldContainer))
	{
		defaultQueryTextField = fieldContainer.getFieldByPresentationType(oFF.PresentationType.QUERY_TEXT);
	}
	let mode = exporter.getMode();
	let supportedExportMode = mode === oFF.QModelFormat.INA_DATA || mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA;
	let isValueHelp = mode === oFF.QModelFormat.INA_VALUE_HELP;
	let isBWSerializedDataResultFormat = false;
	if (oFF.notNull(resultSetContainer) && resultSetContainer.getResultSetPersistenceIdentifier() !== null)
	{
		let queryModel = fieldContainer.getDimension().getQueryModel();
		if (oFF.notNull(queryModel) && !oFF.QInAOptions.isCubeCacheQuery(queryModel) && isBwResultSet)
		{
			isBWSerializedDataResultFormat = true;
		}
	}
	let fieldsSize = fields.size();
	for (let i = 0; i < fieldsSize; i++)
	{
		let field = fields.get(i);
		if (isBwResultSet && field.getPresentationType().isTypeOf(oFF.PresentationType.HIERARCHY_PATH))
		{
			continue;
		}
		if (isValueHelp && field.isExcludedFromValueHelp())
		{
			continue;
		}
		if (oFF.PrUtils.getStructureWithKeyValuePair(inaFields, "Name", field.getName()) === null)
		{
			if (hide)
			{
				inaFields.add(exporter.exportComponent(oFF.OlapComponentType.FIELD, field, null, flagHidden));
			}
			else
			{
				if (supportedExportMode && oFF.notNull(defaultQueryTextField) && field === fieldContainer.getDefaultResultSetTextField() && !field.haveAnyInAPropertiesChanged() && !fieldContainer.getDimension().getShouldUseActualTextField() && fieldContainer.getDataSource().getType() === oFF.MetaObjectType.QUERY && !isBWSerializedDataResultFormat)
				{
					field = defaultQueryTextField;
				}
				inaFields.add(exporter.exportComponent(oFF.OlapComponentType.FIELD, field, null, flagVisible));
			}
		}
	}
};
oFF.QInADimension.exportQdReadMode = function(exporter, dimension, inaStructure)
{
	let readModeContext;
	let isValuehelp = exporter.getMode() === oFF.QModelFormat.INA_VALUE_HELP;
	let isBW = exporter.isAbap(dimension);
	let readModePropertyChanged = null;
	if (isValuehelp)
	{
		readModeContext = oFF.QContextType.SELECTOR;
		readModePropertyChanged = oFF.QDimensionProperties.QY_SELECTOR_READ_MODE;
	}
	else
	{
		readModeContext = oFF.QContextType.RESULT_SET;
		readModePropertyChanged = oFF.QDimensionProperties.QY_READ_MODE;
	}
	let featureActivated = dimension.getModelCapabilities() !== null && dimension.getModelCapabilities().supportsPersistedInA();
	if (!featureActivated || dimension.hasPropertyChanged(readModePropertyChanged))
	{
		let readMode = oFF.QInADimension.getReadMode(dimension, readModeContext);
		if (oFF.isNull(readMode))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_DIMENSION, oFF.XStringUtils.concatenate3("No read mode given for dimension '", dimension.getName(), "'!"));
			return;
		}
		let inaReadModeName;
		if (isBW)
		{
			if (isValuehelp)
			{
				inaReadModeName = "ReadMode";
			}
			else
			{
				inaReadModeName = "ResultSetReadMode";
			}
		}
		else
		{
			inaReadModeName = "ReadMode";
		}
		let inaReadMode = oFF.QInAConverter.lookupReadModeInA(readMode);
		inaStructure.putStringNotNull(inaReadModeName, inaReadMode);
	}
	if (isBW && isValuehelp)
	{
		inaStructure.putStringNotNull("VariableReadMode", oFF.QInAConverter.lookupReadModeInA(oFF.QInADimension.getReadMode(dimension, oFF.QContextType.VARIABLE)));
	}
};
oFF.QInADimension.exportQdReadModeLegacy = function(exporter, dimension, inaStructure)
{
	let readModeContext;
	let inaReadModeName;
	let isBW = exporter.isAbap(dimension);
	if (exporter.getMode() === oFF.QModelFormat.INA_VALUE_HELP)
	{
		readModeContext = oFF.QContextType.SELECTOR;
		inaReadModeName = "SelectorReadMode";
		if (isBW)
		{
			inaStructure.putStringNotNull("VariableReadMode", oFF.QInAConverter.lookupReadModeInA(oFF.QInADimension.getReadMode(dimension, oFF.QContextType.VARIABLE)));
		}
	}
	else
	{
		readModeContext = oFF.QContextType.RESULT_SET;
		inaReadModeName = "ResultSetReadMode";
	}
	let readMode = oFF.QInADimension.getReadMode(dimension, readModeContext);
	if (oFF.isNull(readMode))
	{
		exporter.addError(oFF.ErrorCodes.INVALID_DIMENSION, oFF.XStringUtils.concatenate3("No read mode given for dimension '", dimension.getName(), "'!"));
		return;
	}
	let inaReadMode = oFF.QInAConverter.lookupReadModeInA(readMode);
	if (isBW && !exporter.getSession().hasFeature(oFF.FeatureToggleOlap.NO_NON_EMPTY))
	{
		inaStructure.putBoolean("NonEmpty", readMode === oFF.QMemberReadMode.BOOKED);
	}
	inaStructure.putStringNotNull("ReadMode", inaReadMode);
	if (isBW)
	{
		inaStructure.putStringNotNull(inaReadModeName, inaReadMode);
	}
};
oFF.QInADimension.exportRsFields = function(inaDimension, dimension)
{
	let resFieldList = inaDimension.putNewList("ResultSetFields");
	let resultSetFields = dimension.getResultSetFields();
	for (let i = 0; i < resultSetFields.size(); i++)
	{
		resFieldList.addString(resultSetFields.get(i).getName());
	}
};
oFF.QInADimension.getHiddenFields = function(exporter, dimension, exportingFields)
{
	let allFields;
	if (exporter.m_modelContext === oFF.QContextType.SELECTOR)
	{
		let fields = oFF.XList.create();
		fields.add(dimension.getKeyFieldExt(oFF.QContextType.SELECTOR));
		let hierarchyTextField = dimension.getHierarchyTextField();
		if (oFF.notNull(hierarchyTextField) && dimension.isSelectorHierarchyActive())
		{
			fields.add(hierarchyTextField);
		}
		allFields = fields;
	}
	else
	{
		allFields = dimension.getFieldsListByActiveUsageType();
	}
	let hiddenFields = oFF.XList.create();
	hiddenFields.addAll(allFields);
	let keyField = dimension.getKeyFieldExt(exporter.m_modelContext);
	let textField = dimension.getTextField();
	if (textField === keyField)
	{
		textField = null;
	}
	let defaultQueryTextField = dimension.getFieldByPresentationType(oFF.PresentationType.QUERY_TEXT);
	let clientDefaultTextField = dimension.getClientDefaultTextField();
	let exportSize = exportingFields.size();
	for (let i = 0; i < exportSize; i++)
	{
		let exportedField = exportingFields.get(i);
		if (oFF.notNull(textField) && oFF.notNull(defaultQueryTextField) && (exportedField === defaultQueryTextField || oFF.XString.isEqual(exportedField.getName(), defaultQueryTextField.getName())))
		{
			exportedField = textField;
		}
		else if (exporter.m_modelContext === oFF.QContextType.RESULT_SET && oFF.notNull(textField) && oFF.notNull(clientDefaultTextField) && (exportedField === clientDefaultTextField || oFF.XString.isEqual(exportedField.getName(), clientDefaultTextField.getName())))
		{
			exportedField = textField;
		}
		hiddenFields.removeElement(exportedField);
	}
	let actionFields = null;
	if (dimension.getQueryModel() !== null && dimension.getQueryModel().hasQuickActionManager())
	{
		actionFields = dimension.getQueryModel().getQuickActionManager().getFieldsForDimension(dimension);
	}
	for (let idxHidden = 0; idxHidden < hiddenFields.size(); )
	{
		let hiddenField = hiddenFields.get(idxHidden);
		if (hiddenField !== keyField)
		{
			if (hiddenField !== textField)
			{
				if (!hiddenField.isAlwaysRequested())
				{
					if (!hiddenField.usedInFieldOrComplexSorting() && !oFF.XCollectionUtils.containsElement(actionFields, hiddenField))
					{
						hiddenFields.removeAt(idxHidden);
						continue;
					}
				}
			}
		}
		idxHidden++;
	}
	if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.DONT_ALWAYS_REQUEST_TEXTFIELD) || oFF.notNull(textField) && textField.getTagging().containsKey(oFF.QTransientConstants.HIDE_TEXT_FIELD))
	{
		hiddenFields.removeElement(textField);
	}
	else
	{
		oFF.QInADimension.moveFieldToStart(hiddenFields, textField);
	}
	oFF.QInADimension.moveFieldToStart(hiddenFields, keyField);
	let blendingScenario = exporter.getMode().isDataBlending();
	let queryManager = dimension.getQueryManager();
	if (!blendingScenario && oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsEncodedResultset())
	{
		let resultSetContainer = queryManager.getActiveResultSetContainer();
		blendingScenario = resultSetContainer.getResultSetPersistenceIdentifier() !== null && !resultSetContainer.isRemotePreQuery();
	}
	let customMeasuresDefined = dimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) && oFF.QInADimension.queryModelHasCustomMeasures(dimension.getDimensionAccessor());
	if (!blendingScenario && customMeasuresDefined)
	{
		let dimensionName = dimension.getName();
		let idFieldForMeasure = dimension.getFieldByName(oFF.XStringUtils.concatenate2(dimensionName, ".ID"));
		if (oFF.notNull(idFieldForMeasure))
		{
			hiddenFields.add(idFieldForMeasure);
		}
	}
	return hiddenFields;
};
oFF.QInADimension.getReadMode = function(dimension, contextType)
{
	let readMode = dimension.getReadMode(contextType);
	return readMode === oFF.QMemberReadMode.DEFAULT_VALUE ? dimension.getReadModeDefault(contextType) : readMode;
};
oFF.QInADimension.importDimReadModes = function(importer, queryModel, dimension, inaDimension)
{
	if (oFF.notNull(queryModel))
	{
		if (importer.isAbap(queryModel))
		{
			oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.RESULT_SET, "ResultSetReadMode");
			oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.VARIABLE, "VariableReadMode");
		}
		else
		{
			oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.RESULT_SET, "ResultSetMemberReadMode");
		}
	}
	oFF.QInADimension.importReadModeSettings(inaDimension, dimension, oFF.QContextType.SELECTOR, "SelectorReadMode");
};
oFF.QInADimension.importReadModeSettings = function(inaDimension, dimension, context, activeReadMode)
{
	let inaReadMode = inaDimension.getStringByKey(activeReadMode);
	if (oFF.notNull(inaReadMode))
	{
		let readMode = oFF.QInAConverter.lookupReadMode(inaReadMode);
		if (oFF.notNull(readMode) && readMode !== oFF.QMemberReadMode.UNDEFINED)
		{
			dimension.setReadMode(context, readMode);
		}
	}
	let givenReadMode = dimension.getReadMode(context);
	if (oFF.isNull(givenReadMode))
	{
		let defaultReadMode = dimension.getReadModeDefault(context);
		if (oFF.notNull(defaultReadMode) && defaultReadMode !== oFF.QMemberReadMode.UNDEFINED)
		{
			dimension.setReadMode(context, defaultReadMode);
		}
		else if (oFF.QContextType.VARIABLE === context)
		{
			let supportedReadModes = dimension.getSupportedReadModes(context);
			dimension.setReadMode(context, supportedReadModes.getValuesAsReadOnlyList().get(0));
		}
	}
};
oFF.QInADimension.importRsAttributeNodes = function(inaDimension, dimension)
{
	let inaResultSetAttributes = inaDimension.getListByKey("ResultSetAttributeNodes");
	if (oFF.isNull(inaResultSetAttributes))
	{
		inaResultSetAttributes = inaDimension.getListByKey("DefaultResultSetAttributeNodes");
	}
	if (oFF.notNull(inaResultSetAttributes))
	{
		let resultSetAttributes = dimension.getResultSetAttributes();
		resultSetAttributes.clear();
		let attributeSize = inaResultSetAttributes.size();
		for (let idxAttribute = 0; idxAttribute < attributeSize; idxAttribute++)
		{
			let attributeName = inaResultSetAttributes.getStringAt(idxAttribute);
			let attribute = dimension.getAttributeByName(attributeName);
			if (oFF.notNull(attribute))
			{
				resultSetAttributes.add(attribute);
			}
		}
	}
};
oFF.QInADimension.importRsFields = function(inaDimension, dimension)
{
	let inaResultSetFields = inaDimension.getListByKey("ResultSetFields");
	if (oFF.isNull(inaResultSetFields))
	{
		inaResultSetFields = inaDimension.getListByKey("DefaultResultSetAttributes");
	}
	if (oFF.notNull(inaResultSetFields))
	{
		let resultSetFields = dimension.getResultSetFields();
		resultSetFields.clear();
		let fieldSize = inaResultSetFields.size();
		for (let idxField = 0; idxField < fieldSize; idxField++)
		{
			let fieldName = inaResultSetFields.getStringAt(idxField);
			let field = dimension.getFieldByName(fieldName);
			if (oFF.notNull(field))
			{
				resultSetFields.add(field);
			}
		}
	}
};
oFF.QInADimension.moveFieldToStart = function(hiddenFields, field)
{
	let hiddenSize = hiddenFields.size();
	for (let idxField = 0; idxField < hiddenSize; idxField++)
	{
		let hiddenField = hiddenFields.get(idxField);
		if (hiddenField === field)
		{
			if (idxField !== 0)
			{
				hiddenFields.removeAt(idxField);
				hiddenFields.insert(0, hiddenField);
			}
			break;
		}
	}
};
oFF.QInADimension.queryModelHasCustomMeasures = function(dimensionAccessor)
{
	let allStructureMembers = dimensionAccessor.getMeasureDimension().getAllStructureMembers();
	let measureDimensionHasCustomMeasuresDefined = oFF.XStream.of(allStructureMembers).anyMatch((measure) => {
		return measure.getMemberType() !== oFF.MemberType.BASIC_MEASURE;
	});
	let structureHasCustomMeasuresDefined = false;
	let nonMeasureDimension = dimensionAccessor.getNonMeasureDimension();
	if (oFF.notNull(nonMeasureDimension))
	{
		structureHasCustomMeasuresDefined = oFF.XStream.of(nonMeasureDimension.getAllStructureMembers()).anyMatch((structure) => {
			return structure.getMemberType() !== oFF.MemberType.BASIC_MEASURE;
		});
	}
	return measureDimensionHasCustomMeasuresDefined || structureHasCustomMeasuresDefined;
};
oFF.QInADimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	inaStructure.putString("Name", dimension.getName());
	let queryManager = dimension.getQueryManager();
	let mergeProcessingEnabledOnConnection = oFF.notNull(queryManager) && queryManager.getConnection().isInAMergeProcessingEnabled();
	let isExportingPersistedInA = exporter.getMode() === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA || exporter.getOriginalMode() === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA;
	let persistedInAForMergeUsage = mergeProcessingEnabledOnConnection && isExportingPersistedInA;
	let isMergeProcessingMode = exporter.getMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || exporter.getOriginalMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || persistedInAForMergeUsage;
	if (isMergeProcessingMode)
	{
		if (dimension.isMeasureStructure())
		{
			inaStructure.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_MEASURE_STRUCTURE);
		}
		else if (dimension.getMetadata().isSecondaryStructure())
		{
			inaStructure.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_SECONDARY_STRUCTURE);
		}
		else if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			inaStructure.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_ACCOUNT_DIMENSION);
		}
	}
	let session = exporter.getSession();
	let skipReadmode = session.hasFeature(oFF.FeatureToggleOlap.NO_MEASURE_READMODE) && dimension.isStructure();
	if (!skipReadmode)
	{
		if (session.hasFeature(oFF.FeatureToggleOlap.NO_DUPLICATED_READMODE))
		{
			oFF.QInADimension.exportQdReadMode(exporter, dimension, inaStructure);
		}
		else
		{
			oFF.QInADimension.exportQdReadModeLegacy(exporter, dimension, inaStructure);
		}
	}
	let type = exporter.m_mode === oFF.QModelFormat.INA_VALUE_HELP ? oFF.AxisType.ROWS : dimension.getAxisType();
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(type));
	let designTimeMode = dimension.isDesignTimeMode();
	if (designTimeMode)
	{
		inaStructure.putBoolean("DesignTimeMode", designTimeMode);
	}
	let skipEntries = dimension.getSkipEntries();
	if (skipEntries > 0)
	{
		inaStructure.putInteger("Skip", skipEntries);
	}
	let topEntries = dimension.getTopEntries();
	if (topEntries > 0)
	{
		inaStructure.putInteger("Top", topEntries);
	}
	if (dimension.supportsCumulative() && !exporter.getMode().isDataBlending())
	{
		inaStructure.putBoolean("IsCummulative", dimension.isCumulative());
	}
	if (!dimension.getTagging().containsKey(oFF.QInAUniversalDisplayHierarchies.UDH_TO_LBH_CONVERSTION_TAG))
	{
		exporter.exportHierarchy(dimension, inaStructure);
	}
	if (exporter.m_mode !== oFF.QModelFormat.INA_VALUE_HELP)
	{
		if (dimension.supportsTotals())
		{
			exporter.exportTotals(dimension, inaStructure);
		}
		if (dimension.getStructureLayout() !== null)
		{
			exporter.exportMembers(dimension, inaStructure);
		}
	}
	if (dimension.getModelCapabilities() !== null && dimension.getModelCapabilities().supportsPersistedInA())
	{
		oFF.QInADimension.exportFieldLayout2(exporter, inaStructure, dimension);
	}
	else
	{
		oFF.QInADimension.exportFieldLayout(exporter, inaStructure, dimension);
	}
	return inaStructure;
};
oFF.QInADimension.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.QInADimension.prototype.importAlternativeFieldValues = function(inaStructure, dimension)
{
	let alternativeFieldValuesList = inaStructure.getListByKey("AlternativeFieldValues");
	if (oFF.notNull(alternativeFieldValuesList))
	{
		let size = alternativeFieldValuesList.size();
		for (let i = 0; i < size; i++)
		{
			let currentElement = alternativeFieldValuesList.get(i);
			if (currentElement.isStructure())
			{
				let currentStructure = currentElement;
				let strValueType = currentStructure.getStringByKey("ValueType");
				let valueType = oFF.QInAConverter.lookupValueType(strValueType);
				let valueAsString = currentStructure.getStringByKey("Value");
				let value = null;
				if (valueType === oFF.XValueType.INTEGER)
				{
					value = oFF.XIntegerValue.create(oFF.XInteger.convertFromStringWithRadix(valueAsString, 10));
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					value = oFF.XLongValue.create(oFF.XLong.convertFromString(valueAsString));
				}
				else if (valueType === oFF.XValueType.DOUBLE)
				{
					value = oFF.XDoubleValue.create(oFF.XDouble.convertFromString(valueAsString));
				}
				else if (valueType === oFF.XValueType.STRING)
				{
					value = oFF.XStringValue.create(valueAsString);
				}
				else if (valueType === oFF.XValueType.DATE)
				{
					value = oFF.XDate.createDateFromIsoFormat(valueAsString);
				}
				else if (valueType === oFF.XValueType.DATE_TIME)
				{
					value = oFF.XDateTime.createDateTimeFromIsoFormat(valueAsString);
				}
				if (oFF.notNull(value))
				{
					let hierarchyKey = currentStructure.getBooleanByKey("HierarchyKey");
					let memberKey = currentStructure.getStringByKey("MemberKey");
					let fieldName = currentStructure.getStringByKey("FieldName");
					let language = currentStructure.getStringByKey("Language");
					dimension.setAlternativeFieldValue(hierarchyKey, memberKey, fieldName, value, language);
				}
			}
		}
	}
};
oFF.QInADimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let dimension = modelComponent;
	if (oFF.isNull(dimension))
	{
		let dimName = inaStructure.getStringByKey("Name");
		if (oFF.notNull(queryModel))
		{
			dimension = queryModel.getDimensionManagerBase().getDimensionByNameInternal(dimName);
		}
		if (oFF.isNull(dimension))
		{
			return null;
		}
	}
	if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
	{
		dimension.setSelectorGettingInterval(false);
		oFF.QInADimension.importDimReadModes(importer, queryModel, dimension, inaStructure);
		importer.importMembers(inaStructure, dimension, context);
		this.importFieldsLayout(importer, inaStructure, dimension, context);
		this.importQdFieldTransformations(importer, inaStructure, dimension);
		importer.importHierarchy(dimension, inaStructure);
		if (oFF.notNull(queryModel) && !queryModel.getModelCapabilities().supportsExtendedSort())
		{
			let modelCapabilities = queryModel.getModelCapabilities();
			if (modelCapabilities.supportsDimensionSorting(dimension, oFF.SortType.MEMBER_KEY))
			{
				let inaSortOrder = inaStructure.getIntegerByKeyExt("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(oFF.XSortDirection.DEFAULT_VALUE));
				let sortOrder = oFF.QInAConverter.lookupSortDirection(inaSortOrder);
				dimension.getResultSetSorting().setDirection(sortOrder);
			}
		}
		if (importer.m_capabilities.supportsCummulative() && dimension.supportsCumulative())
		{
			dimension.setIsCumulative(inaStructure.getBooleanByKeyExt("IsCummulative", false));
		}
		let skipEntries = inaStructure.getIntegerByKeyExt("Skip", 0);
		dimension.setSkipEntries(skipEntries);
		let topEntries = inaStructure.getIntegerByKeyExt("Top", 0);
		dimension.setTopEntries(topEntries);
		let inaReadMode = inaStructure.getStringByKey("ReadMode");
		if (oFF.notNull(inaReadMode))
		{
			let readMode = oFF.QInAConverter.lookupReadMode(inaReadMode);
			dimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, readMode);
		}
		importer.importTotals(inaStructure, dimension.getResultStructureControllerBase(), context);
		this.importAlternativeFieldValues(inaStructure, dimension);
	}
	else
	{
		let variableContainer = dimension.getVariableContainer();
		if (oFF.notNull(variableContainer))
		{
			let variables = variableContainer.getVariables();
			let size = variables.size();
			for (let i = 0; i < size; i++)
			{
				let variable = variables.get(i);
				if (variable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE && oFF.XString.isEqual(variable.getHierarchyNameDimension().getName(), dimension.getName()))
				{
					importer.importHierarchy(dimension, inaStructure);
					break;
				}
			}
		}
	}
	return dimension;
};
oFF.QInADimension.prototype.importFieldsLayout = function(importer, inaDimension, dimension, context)
{
	let fieldLayoutType;
	let inaFieldLayoutType = inaDimension.getStringByKey("FieldLayoutType");
	if (oFF.notNull(inaFieldLayoutType))
	{
		fieldLayoutType = oFF.QInAConverter.lookupFieldLayoutType(inaFieldLayoutType);
		let inaAllFields = inaDimension.getListByKey("FieldSettings");
		if (oFF.notNull(inaAllFields))
		{
			let inaAllFieldSize = inaAllFields.size();
			for (let p1 = 0; p1 < inaAllFieldSize; p1++)
			{
				importer.importComponent(oFF.OlapComponentType.FIELD, inaAllFields.getStructureAt(p1), null, dimension, context);
			}
		}
		let inaAllAttributes = inaDimension.getListByKey("AttributeSettings");
		if (oFF.notNull(inaAllAttributes))
		{
			let inaAllAttributesSize = inaAllAttributes.size();
			for (let p2 = 0; p2 < inaAllAttributesSize; p2++)
			{
				let inaAttribute = inaAllAttributes.getStructureAt(p2);
				importer.importAttribute(inaAttribute, dimension, context);
			}
		}
		oFF.QInADimension.importRsFields(inaDimension, dimension);
		oFF.QInADimension.importRsAttributeNodes(inaDimension, dimension);
		dimension.setFieldLayoutType(fieldLayoutType);
	}
	else
	{
		let inaResultSetFields2 = inaDimension.getListByKey("ResultSetFields");
		if (oFF.isNull(inaResultSetFields2))
		{
			inaResultSetFields2 = inaDimension.getListByKey("DefaultResultSetAttributes");
		}
		if (oFF.notNull(inaResultSetFields2))
		{
			fieldLayoutType = oFF.FieldLayoutType.ATTRIBUTE_BASED;
			if (dimension.supportsFieldLayoutType(fieldLayoutType))
			{
				dimension.setFieldLayoutType(fieldLayoutType);
			}
			fieldLayoutType = dimension.getFieldLayoutType();
			if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
			{
				let resultSetFields2 = dimension.getResultSetFields();
				resultSetFields2.clear();
				let mainAttribute = dimension.getMainAttribute();
				if (oFF.notNull(mainAttribute))
				{
					mainAttribute.getResultSetFields().clear();
				}
				let fieldName2;
				let iRsField;
				let resultsetSize = inaResultSetFields2.size();
				let duplicateNames = oFF.XHashSetOfString.create();
				for (iRsField = 0; iRsField < resultsetSize; iRsField++)
				{
					fieldName2 = inaResultSetFields2.getStringAt(iRsField);
					if (!duplicateNames.contains(fieldName2))
					{
						duplicateNames.add(fieldName2);
						let rsField = dimension.getFieldByName(fieldName2);
						if (oFF.isNull(rsField))
						{
							importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate2("Field not found: ", fieldName2));
							return;
						}
						resultSetFields2.add(rsField);
					}
				}
				inaResultSetFields2 = inaDimension.getListByKey("Attributes");
				if (oFF.notNull(inaResultSetFields2))
				{
					resultsetSize = inaResultSetFields2.size();
					for (iRsField = 0; iRsField < resultsetSize; iRsField++)
					{
						let inaStructure = inaResultSetFields2.getStructureAt(iRsField);
						fieldName2 = inaStructure.getStringByKey("Name");
						if (!duplicateNames.contains(fieldName2))
						{
							duplicateNames.add(fieldName2);
							let field2 = dimension.getFieldByNameOrAlias(fieldName2);
							if (oFF.isNull(field2))
							{
								importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate2("Field not found: ", fieldName2));
								return;
							}
							resultSetFields2.add(field2);
						}
					}
				}
			}
		}
		else if (dimension.isStructure())
		{
			dimension.resetFieldsToDefault();
		}
	}
};
oFF.QInADimension.prototype.importQdFieldTransformations = function(importer, inaDimension, dimension)
{
	let fieldList = inaDimension.getListByKey("Fields");
	if (oFF.notNull(fieldList))
	{
		let fieldSize = fieldList.size();
		for (let i = 0; i < fieldSize; i++)
		{
			let currentElement = fieldList.get(i);
			if (currentElement.isStructure())
			{
				let fieldName = currentElement.getStringByKey("Name");
				let textTransType = currentElement.getStringByKey("TextTransformation");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(fieldName) && oFF.XStringUtils.isNotNullAndNotEmpty(textTransType))
				{
					let field = dimension.getFieldByName(fieldName);
					let transformationType = oFF.TextTransformationType.lookupName(textTransType);
					if (oFF.notNull(field) && oFF.notNull(transformationType))
					{
						if (transformationType.isTypeOf(oFF.TextTransformationType.SPATIAL_TRANSFORMATION) && !importer.m_capabilities.supportsSpatialTransformation())
						{
							continue;
						}
						field.setTextTransformation(transformationType);
					}
				}
			}
		}
	}
};

oFF.QInADimensionsAll = function() {};
oFF.QInADimensionsAll.prototype = new oFF.QInAComponentWithList();
oFF.QInADimensionsAll.prototype._ff_c = "QInADimensionsAll";

oFF.QInADimensionsAll.exportAxisDimensions = function(exporter, axis, parameterDimensionList, exportedDimensions)
{
	let dimCount = axis.getDimensionCount();
	if (!oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionRequired(exporter, axis))
	{
		for (let i = 0; i < dimCount; i++)
		{
			let dimension = axis.get(i);
			oFF.QInADimensionsAll.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
		}
	}
	else
	{
		let dimensionWithLeveledHierarchy = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis).getName();
		let udhDimensions = oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, axis);
		for (let k = 0; k < dimCount; k++)
		{
			let dim = axis.get(k);
			let dimName = dim.getName();
			if (oFF.XString.isEqual(dimName, dimensionWithLeveledHierarchy))
			{
				oFF.QInADimensionsAll.exportUdhDimensionsForConvertedLbh(exporter, axis, parameterDimensionList, udhDimensions, exportedDimensions, dim);
			}
			else if (!udhDimensions.contains(dimName))
			{
				oFF.QInADimensionsAll.exportDimension(exporter, dim, parameterDimensionList, exportedDimensions);
			}
		}
	}
};
oFF.QInADimensionsAll.exportAxisDimensionsWithHeuristic = function(exporter, axis, parameterDimensionList, usedDimensions, exportedDimensions)
{
	let queryModel = axis.getQueryModel();
	let repositoryData = exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY_DATA);
	let optimizedExportModeActive = queryModel.isOptimizedExportModeActive();
	let dimCount = axis.getDimensionCount();
	for (let i = 0; i < dimCount; i++)
	{
		let dimension = axis.get(i);
		if (optimizedExportModeActive && dimension.isIgnoredOnOptimizedExport())
		{
			continue;
		}
		if (repositoryData && !usedDimensions.contains(dimension.getName()))
		{
			continue;
		}
		oFF.QInADimensionsAll.exportDimension(exporter, dimension, parameterDimensionList, exportedDimensions);
	}
};
oFF.QInADimensionsAll.exportDimension = function(exporter, dimension, inaDimensionList, exportedDimensions)
{
	if (!exportedDimensions.contains(dimension.getName()))
	{
		exportedDimensions.add(dimension.getName());
		let exportedDimension = exporter.exportDimension(dimension, null);
		if (oFF.notNull(exportedDimension))
		{
			inaDimensionList.add(exportedDimension);
			return exportedDimension;
		}
	}
	return null;
};
oFF.QInADimensionsAll.exportTechnicalDimension = function(exporter, query, inaDimensionList, exportedDimensions)
{
	if (!exporter.m_capabilities.supportsUniversalModel())
	{
		return;
	}
	let queryCellManager = query.getQueryCellManager();
	if (queryCellManager.isEmpty())
	{
		return;
	}
	let dimensionByName = query.getDimensionByName("$$Cells$$");
	oFF.QInADimensionsAll.exportDimension(exporter, dimensionByName, inaDimensionList, exportedDimensions);
};
oFF.QInADimensionsAll.exportUdhDimensionsForConvertedLbh = function(exporter, axis, parameterDimensionList, udhDimensions, exportedDimensions, dimensionWithLeveledHierarchy)
{
	let requiredReadMode = oFF.QInADimensionsAll.getReadMode(exporter, dimensionWithLeveledHierarchy);
	let size = udhDimensions.size();
	for (let i = 0; i < size; i++)
	{
		let dim = axis.getQueryModel().getDimensionByName(udhDimensions.get(i));
		dim.stopEventing();
		let tmpAxis = dim.getAxisBase();
		let tmpHierarchyActive = dim.isHierarchyActive();
		let updateReadMode = oFF.QInADimensionsAll.getReadMode(exporter, dim) !== requiredReadMode;
		let tmpReadMode = updateReadMode ? dim.getReadMode(exporter.m_modelContext) : null;
		let tmpResultVisibility = dim.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL);
		dim.setAxis(axis);
		if (tmpHierarchyActive)
		{
			dim.setHierarchyActive(false);
			dim.getTagging().put(oFF.QInAUniversalDisplayHierarchies.UDH_TO_LBH_CONVERSTION_TAG, "true");
		}
		if (updateReadMode)
		{
			dim.setReadModeGraceful(exporter.m_modelContext, requiredReadMode);
		}
		dim.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, i === 0 ? dimensionWithLeveledHierarchy.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL) : oFF.ResultVisibility.VISIBLE);
		let inaDimension = oFF.QInADimensionsAll.exportDimension(exporter, dim, parameterDimensionList, exportedDimensions);
		if (updateReadMode && oFF.notNull(inaDimension) && !inaDimension.containsKey("ResultSetReadMode"))
		{
			inaDimension.putStringNotNull("ResultSetReadMode", oFF.QInAConverter.lookupReadModeInA(requiredReadMode));
		}
		dim.setAxis(tmpAxis);
		if (tmpHierarchyActive)
		{
			dim.setHierarchyActive(true);
			dim.getTagging().remove(oFF.QInAUniversalDisplayHierarchies.UDH_TO_LBH_CONVERSTION_TAG);
		}
		if (oFF.notNull(tmpReadMode))
		{
			dim.setReadMode(exporter.m_modelContext, tmpReadMode);
		}
		dim.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, tmpResultVisibility);
		dim.resumeEventing();
	}
};
oFF.QInADimensionsAll.getReadMode = function(exporter, dimension)
{
	let readMode = dimension.getReadMode(exporter.m_modelContext);
	return oFF.notNull(readMode) ? readMode : dimension.getReadModeDefault(exporter.m_modelContext);
};
oFF.QInADimensionsAll.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaDimensionList = oFF.PrFactory.createList();
	if (exporter.m_mode !== oFF.QModelFormat.INA_VALUE_HELP)
	{
		let query = modelComponent;
		let capabilities = query.getModelCapabilities();
		let exportedDimensions = oFF.XHashSetOfString.create();
		oFF.QInADimensionsAll.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.ROWS), inaDimensionList, exportedDimensions);
		oFF.QInADimensionsAll.exportAxisDimensions(exporter, query.getAxis(oFF.AxisType.COLUMNS), inaDimensionList, exportedDimensions);
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			let usedDimensions = oFF.XHashSetOfString.create();
			if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA || exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
			{
				oFF.DimensionUsageAnalyzer2.setupHeuristic(query, usedDimensions);
			}
			oFF.QInADimensionsAll.exportAxisDimensionsWithHeuristic(exporter, query.getAxis(oFF.AxisType.FREE), inaDimensionList, usedDimensions, exportedDimensions);
		}
		else if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
		{
			let usedDimensions = null;
			let isOutOfContextBlending = capabilities.supportsCubeBlendingOutOfContext() && query.isBlendingModel();
			let doExportFreeAxisForPlanning = query.getDataSource().getType() === oFF.MetaObjectType.PLANNING && exporter.getSession().hasFeature(oFF.FeatureToggleOlap.EXPORT_FREE_AXIS_FOR_PLANNING);
			let freeAxis = query.getAxis(oFF.AxisType.FREE);
			let sizeFreeAxis = freeAxis.size();
			let isAbap = exporter.isAbap(query);
			for (let idxFree = 0; idxFree < sizeFreeAxis; idxFree++)
			{
				let freeDimension = freeAxis.get(idxFree);
				let freeDimensionType = freeDimension.getDimensionType();
				if (freeDimensionType === oFF.DimensionType.MEASURE_STRUCTURE || freeDimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
				{
					let exportStructure = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportStructure)
					{
						oFF.QInADimensionsAll.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimensionType === oFF.DimensionType.ACCOUNT)
				{
					let exportAccountOnFreeAxis = this.exportDimensionIfOnFreeAxis(freeDimension);
					if (exportAccountOnFreeAxis)
					{
						oFF.QInADimensionsAll.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (freeDimension.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_INTEROP_GENERATED))
				{
					if (oFF.isNull(usedDimensions))
					{
						usedDimensions = query.getConvenienceCommands().getCalculatedDimensionsInUse();
					}
					if (usedDimensions.contains(freeDimension.getName()))
					{
						oFF.QInADimensionsAll.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
					}
				}
				else if (isOutOfContextBlending || (isAbap || doExportFreeAxisForPlanning) && (freeDimension.isHierarchyActive() || freeDimension.hasPlaceHolderForHierarchyInfo()) && !this.hasCustomHierarchy(freeDimension) || freeDimensionType.isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION) && (freeDimensionType !== oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION && freeDimensionType !== oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION && !freeDimension.getTagging().containsKey("isFAM") || exporter.m_mode !== oFF.QModelFormat.INA_DATA_BLENDING_SOURCE_METADATA))
				{
					oFF.QInADimensionsAll.exportDimension(exporter, freeDimension, inaDimensionList, exportedDimensions);
				}
			}
			oFF.QInADimensionsAll.exportTechnicalDimension(exporter, query, inaDimensionList, exportedDimensions);
		}
	}
	return inaDimensionList;
};
oFF.QInADimensionsAll.prototype.exportDimensionIfOnFreeAxis = function(dimension)
{
	let queryModel = dimension.getQueryModel();
	let usedDimensions = oFF.XHashSetOfString.create();
	let filter = queryModel.getFilter();
	if (filter.isDynamicFilterInitialized())
	{
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(filter.getDynamicFilter(), usedDimensions);
		let linkedFilters = filter.getLinkedFilters().getValuesAsReadOnlyList();
		for (let i = 0; i < linkedFilters.size(); i++)
		{
			let linkedFilter = linkedFilters.get(i);
			oFF.DimensionUsageAnalyzer2.addDimensionsUsedInContainer(linkedFilter, usedDimensions);
		}
	}
	let isDimensionFiltered = usedDimensions.contains(dimension.getName());
	if (dimension.isMeasureStructure())
	{
		let exceptionManager = queryModel.getExceptionManager();
		let hasExceptions = oFF.XCollectionUtils.hasElements(exceptionManager);
		return isDimensionFiltered || hasExceptions;
	}
	return isDimensionFiltered;
};
oFF.QInADimensionsAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DIMENSIONS;
};
oFF.QInADimensionsAll.prototype.getTagName = function()
{
	return "Dimensions";
};
oFF.QInADimensionsAll.prototype.hasCustomHierarchy = function(dimension)
{
	let hierarchy = dimension.getHierarchy();
	return oFF.notNull(hierarchy) && hierarchy.isCustomHierarchy() || dimension.getCustomHierarchyDefinition() !== null;
};
oFF.QInADimensionsAll.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaList))
	{
		let queryModel = modelComponent;
		let dimensionManager = queryModel.getDimensionManagerBase();
		if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
		{
			let freeAxis = queryModel.getFreeAxis();
			freeAxis.addAll(dimensionManager);
		}
		let size = inaList.size();
		let dimensionReferences = dimensionManager.getDimensionReferences();
		for (let k = 0; k < size; k++)
		{
			let inaDimension = inaList.getStructureAt(k);
			let dimName = inaDimension.getStringByKey("Name");
			let dimAxisString = inaDimension.getStringByKey("Axis");
			let dimension = null;
			if (inaDimension.containsKey("FieldMappings"))
			{
				let importCalculatedDimension = importer.importCalculatedDimension(inaDimension, queryModel);
				dimensionManager.addDimension(importCalculatedDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importCalculatedDimension);
			}
			else if (inaDimension.containsKey("CType") && oFF.XComponentType.lookupComponentType(inaDimension.getStringByKey("CType")) === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
			{
				let importFormulaCalculatedDimension = importer.importFormulaCalculatedDimension(inaDimension, queryModel, null);
				dimensionManager.addDimension(importFormulaCalculatedDimension);
				dimensionManager.finalizeDimensionMetadataSetup(importFormulaCalculatedDimension);
			}
			else
			{
				if (dimensionReferences.containsKey(dimName))
				{
					let dimAxis = oFF.AxisType.lookup(dimAxisString);
					if (importer.getMode() === oFF.QModelFormat.INA_REPOSITORY || dimAxis === oFF.AxisType.COLUMNS || dimAxis === oFF.AxisType.ROWS)
					{
						dimension = dimensionManager.getDimensionByNameFromExistingMetadata(dimName);
					}
				}
				importer.importDimension(inaDimension, queryModel);
			}
			if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
			{
				if (oFF.isNull(dimension))
				{
					dimension = dimensionManager.getDimensionByNameInternal(dimName);
					if (oFF.isNull(dimension))
					{
						continue;
					}
				}
				if (oFF.isNull(dimAxisString))
				{
					dimAxisString = inaDimension.getStringByKeyExt("AxisDefault", "Free");
				}
				queryModel.getAxis(oFF.QInAConverter.lookupAxisType(dimAxisString)).add(dimension);
			}
		}
	}
	return modelComponent;
};

oFF.QInADrillManager = function() {};
oFF.QInADrillManager.prototype = new oFF.QInAComponentWithList();
oFF.QInADrillManager.prototype._ff_c = "QInADrillManager";

oFF.QInADrillManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let drillManager = modelComponent;
	let capabilities = drillManager.getModelCapabilities();
	let inaOperationsList = null;
	let drillOperations;
	if (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.getMode().isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
	{
		drillOperations = drillManager.getDrillOperationsForInAData();
	}
	else
	{
		drillOperations = drillManager.getDrillOperationsForInARepo();
	}
	let drillOpCount = drillOperations.size();
	if (drillOpCount > 0)
	{
		let queryModel = drillManager.getQueryModel();
		let inaDeltaOperation = null;
		let deltaDimension = null;
		inaOperationsList = oFF.PrFactory.createList();
		let deltaOperation = null;
		if (capabilities.supportsHierarchyNavigationDeltaMode())
		{
			deltaOperation = drillOperations.get(drillOpCount - 1);
			let targetDimensionDelta = deltaOperation.getTargetDimension();
			if (oFF.notNull(targetDimensionDelta) && targetDimensionDelta.isHierarchyNavigationDeltaMode())
			{
				deltaDimension = targetDimensionDelta;
				inaDeltaOperation = exporter.exportDrillOperation(deltaOperation);
			}
		}
		let isAbap = exporter.isAbap(queryModel);
		if (!isAbap && (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.getMode().isTypeOf(oFF.QModelFormat.INA_VALUE_HELP)))
		{
			drillOperations = drillOperations.createListCopy();
			if (oFF.notNull(deltaDimension))
			{
				drillOperations.removeElement(deltaOperation);
				drillOpCount = drillOperations.size();
			}
			if (drillOpCount > 0)
			{
				drillOperations.sortByComparator(oFF.XComparatorDrill.create());
			}
		}
		for (let i = 0; i < drillOpCount; i++)
		{
			let operation = drillOperations.get(i);
			if (operation.getType() === oFF.DrillOperationType.CONTEXT)
			{
				let targetDimension = operation.getTargetDimension();
				if (oFF.isNull(deltaDimension) || deltaDimension !== targetDimension)
				{
					if (!isAbap && targetDimension.getInitialDrillLevel() < 0 && operation.getDrillState() === oFF.DrillState.EXPANDED && !targetDimension.hasZoomDrill())
					{
						continue;
					}
					oFF.XCollectionUtils.addIfNotPresent(inaOperationsList, exporter.exportDrillOperation(operation));
				}
			}
		}
		if (oFF.notNull(inaDeltaOperation))
		{
			inaOperationsList.add(inaDeltaOperation);
		}
		if (inaOperationsList.isEmpty())
		{
			inaOperationsList = null;
		}
	}
	return inaOperationsList;
};
oFF.QInADrillManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_MANAGER;
};
oFF.QInADrillManager.prototype.getTagName = function()
{
	return "HierarchyNavigations";
};
oFF.QInADrillManager.prototype.getZoomDrillPath = function(importer, drillManager, inaStructure, context)
{
	let drillPath = oFF.XList.create();
	let drillContext = inaStructure.getListByKey("DrillContextMembers");
	if (oFF.notNull(drillContext))
	{
		let size = drillContext.size();
		for (let idxHierCtx = 0; idxHierCtx < size; idxHierCtx++)
		{
			let drillCtx = drillContext.getStructureAt(idxHierCtx);
			let drillPathElement = importer.importDrillPathElement(drillCtx, drillManager, context);
			drillPath.add(drillPathElement);
		}
	}
	let drillState = inaStructure.getStringByKey("DrillState");
	let drillMember = inaStructure.getStructureByKey("DrillMember");
	if (oFF.isNull(drillMember) || oFF.isNull(drillState))
	{
		return null;
	}
	let drillPathElementMember = importer.importDrillPathElement(drillMember, drillManager, context);
	drillPath.add(drillPathElementMember);
	return drillPath;
};
oFF.QInADrillManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let drillManager = modelComponent;
	let size;
	drillManager.removeAllContextDrillOperations();
	drillManager.removeZoomDrillOperationsByDimension(null);
	if (oFF.notNull(inaList))
	{
		let previousZoomStackPosition = -1;
		size = inaList.size();
		for (let idxHierNav = 0; idxHierNav < size; idxHierNav++)
		{
			let subStructure = inaList.getStructureAt(idxHierNav);
			let zoomDrillStackPosition = subStructure.getIntegerByKeyExt("ZoomDrillStackPosition", -1);
			if (zoomDrillStackPosition === -1)
			{
				importer.importDrillOperation(subStructure, drillManager, context);
			}
			else if (zoomDrillStackPosition > -1)
			{
				let zoomDrillPath = this.getZoomDrillPath(importer, drillManager, subStructure, context);
				if (oFF.XCollectionUtils.hasElements(zoomDrillPath))
				{
					if (zoomDrillStackPosition !== previousZoomStackPosition)
					{
						drillManager.pushEmptyZoomDrillForDimension(zoomDrillPath.get(zoomDrillPath.size() - 1).getDimension());
						previousZoomStackPosition = zoomDrillStackPosition;
					}
					let hideRoots = subStructure.getIntegerByKeyExt("DrillOffset", 0) > 0;
					drillManager.addZoomDrillPath(zoomDrillPath, hideRoots);
				}
			}
		}
	}
	return modelComponent;
};

oFF.QInADrillPathElement = function() {};
oFF.QInADrillPathElement.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADrillPathElement.prototype._ff_c = "QInADrillPathElement";

oFF.QInADrillPathElement.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let element = modelComponent;
	let name = element.getNameForInAExport();
	let fieldName = element.getFieldName();
	let dimension = element.getDimension();
	let isCustomHierarchy = oFF.notNull(dimension) && dimension.getHierarchy() !== null && dimension.getHierarchy().isCustomHierarchy();
	let queryModel = element.getQueryModel();
	if (oFF.isNull(queryModel) && oFF.notNull(dimension))
	{
		queryModel = dimension.getQueryModel();
	}
	if (exporter.getMode() === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA || isCustomHierarchy)
	{
		let shadowKeyFieldValue = element.getShadowKeyFieldValue();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(shadowKeyFieldValue))
		{
			name = shadowKeyFieldValue;
			fieldName = element.getShadowKeyFieldName();
		}
	}
	if (oFF.isNull(name))
	{
		inaStructure.putNull("Member");
	}
	else
	{
		let memberName = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, name, exporter);
		inaStructure.putString("Member", memberName);
	}
	inaStructure.putString("FieldName", fieldName);
	let drillManager = oFF.isNull(queryModel) ? null : queryModel.getDrillManager();
	if (oFF.notNull(drillManager) && drillManager.isBackendDrillValidationForAutoSubmit() && drillManager.isValidatingContextFreeNavigations())
	{
		inaStructure.putStringNotNullAndNotEmpty("Hierarchy", element.getSelectHierarchyName());
	}
	if (exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY)
	{
		oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "DimensionName", dimension);
	}
	return inaStructure;
};
oFF.QInADrillPathElement.prototype.getComponentType = function()
{
	return oFF.MemberType.DRILL_PATH_ELEMENT;
};
oFF.QInADrillPathElement.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let parentModelComponent = parentComponent;
	let queryModel = parentModelComponent.getContext().getQueryModel();
	let fieldName = inaStructure.getStringByKey("FieldName");
	let dimensionName = inaStructure.getStringByKey("DimensionName");
	let dimension;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dimensionName))
	{
		dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensionName);
	}
	else
	{
		let field = queryModel.getFieldByNameOrAlias(fieldName);
		if (oFF.isNull(field))
		{
			dimension = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimension))
			{
				field = dimension.getKeyField();
				fieldName = field.getName();
			}
		}
		else
		{
			dimension = field.getDimension();
		}
	}
	let element = oFF.QDrillPathElement._create(context);
	element.setDimension(dimension);
	let member = inaStructure.getStringByKey("Member");
	element.setName(member);
	element.setFieldName(fieldName);
	return element;
};

oFF.QInADrillPathOperation = function() {};
oFF.QInADrillPathOperation.prototype = new oFF.QInAComponentWithStructure();
oFF.QInADrillPathOperation.prototype._ff_c = "QInADrillPathOperation";

oFF.QInADrillPathOperation.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let operation = modelComponent;
	if (operation.getType() === oFF.DrillOperationType.CONTEXT)
	{
		let inADrillState = oFF.QInAConverter.lookupDrillStateInA(operation.getDrillState());
		inaStructure.putString("DrillState", inADrillState);
		let relativeLevelCount = operation.getRelativeLevelCount();
		if (relativeLevelCount !== 1)
		{
			inaStructure.putInteger("DrillLevel", relativeLevelCount);
		}
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
		{
			if (operation.supportsDrillCounter())
			{
				inaStructure.putInteger("HierarchyNavigationCounter", operation.getDrillCounter());
			}
		}
		else
		{
			if (operation.getZoomStackPosition() !== -1)
			{
				inaStructure.putInteger("ZoomDrillStackPosition", operation.getZoomStackPosition());
			}
			if (operation.getRelativeLevelOffset() !== 0)
			{
				inaStructure.putInteger("DrillOffset", operation.getRelativeLevelOffset());
			}
		}
		let drillPath = operation.getDrillPath();
		let drillPathCount = drillPath.size();
		if (drillPathCount > 0)
		{
			let element = drillPath.get(drillPathCount - 1);
			let inaPathElement = exporter.exportDrillPathElement(element, false);
			inaStructure.put("DrillMember", inaPathElement);
			if (drillPathCount > 1)
			{
				let inaDrillContextMembers = oFF.PrFactory.createList();
				inaStructure.put("DrillContextMembers", inaDrillContextMembers);
				for (let k = 0; k < drillPathCount - 1; k++)
				{
					element = drillPath.get(k);
					inaPathElement = exporter.exportDrillPathElement(element, true);
					inaDrillContextMembers.add(inaPathElement);
				}
			}
		}
	}
	return inaStructure;
};
oFF.QInADrillPathOperation.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_OPERATION;
};
oFF.QInADrillPathOperation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let drillManager = parentComponent;
	let drillState = inaStructure.getStringByKey("DrillState");
	let drillMember = inaStructure.getStructureByKey("DrillMember");
	if (oFF.isNull(drillMember) || oFF.isNull(drillState))
	{
		return null;
	}
	let drillPath = oFF.XList.create();
	let drillContext = inaStructure.getListByKey("DrillContextMembers");
	if (oFF.notNull(drillContext))
	{
		let size = drillContext.size();
		for (let idxHierCtx = 0; idxHierCtx < size; idxHierCtx++)
		{
			let drillCtx = drillContext.getStructureAt(idxHierCtx);
			let drillPathElement = importer.importDrillPathElement(drillCtx, drillManager, context);
			drillPath.add(drillPathElement);
		}
	}
	let drillPathElementMember = importer.importDrillPathElement(drillMember, drillManager, context);
	drillPath.add(drillPathElementMember);
	let drillOperation = drillManager.setDrillState(drillPath, oFF.QInAConverter.lookupDrillStateOp(drillState));
	let level = inaStructure.getIntegerByKeyExt("DrillLevel", 1);
	drillOperation.setRelativeLevelCount(level);
	return drillOperation;
};

oFF.QInAExceptions = function() {};
oFF.QInAExceptions.prototype = new oFF.QInAComponentWithList();
oFF.QInAExceptions.prototype._ff_c = "QInAExceptions";

oFF.QInAExceptions.exportEvaluates = function(evaluates, exporter, inaStructure, isBw)
{
	if (evaluates.isEmpty())
	{
		return;
	}
	let inaEvaluatesList = inaStructure.putNewList("EvaluateOn");
	let sizeEvaluates = evaluates.size();
	for (let iEvaluate = 0; iEvaluate < sizeEvaluates; iEvaluate++)
	{
		let inaEvaluateStruct = inaEvaluatesList.addNewStructure();
		let evaluate = evaluates.get(iEvaluate);
		inaEvaluateStruct.putString("Name", evaluate.getField().getName());
		inaEvaluateStruct.putString("Evaluate", evaluate.getEvaluate().toString());
		let comparisonOperator = evaluate.getOperator();
		let comparison;
		if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
		{
			comparison = "NOTBETWEEN";
		}
		else
		{
			comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
		}
		inaEvaluateStruct.putString("Comparison", comparison);
		oFF.QInAValueUtils.exportPlaceholderValue(exporter, "Low", inaEvaluateStruct, evaluate.getLowValue(), evaluate.getValueType(), evaluate.getQueryModel());
		if (!inaEvaluateStruct.containsKey("Low"))
		{
			inaEvaluateStruct.putString("Low", "");
		}
		if (comparisonOperator.getNumberOfParameters() > 1)
		{
			oFF.QInAValueUtils.exportPlaceholderValue(exporter, "High", inaEvaluateStruct, evaluate.getHighValue(), evaluate.getValueType(), evaluate.getQueryModel());
		}
	}
};
oFF.QInAExceptions.exportSettings = function(threshold, exporter, inaThresholdStruct)
{
	let inaSettings = inaThresholdStruct.putNewList("Settings");
	let size = threshold.size();
	for (let iSetting = 0; iSetting < size; iSetting++)
	{
		let setting = threshold.get(iSetting);
		let inaSetting = inaSettings.addNewStructure();
		inaSetting.putString("Name", setting.getName());
		inaSetting.putInteger("Priority", setting.getPriority());
		let value = setting.getValue();
		if (oFF.isNull(value) || oFF.XString.isEqual(value, ""))
		{
			exporter.addError(oFF.ErrorCodes.INVALID_PARAMETER, "Exception Threshold Setting is missing it's value");
		}
		else
		{
			inaSetting.putString("Value", value);
		}
	}
};
oFF.QInAExceptions.exportStructureContextItem = function(structureContext, member, exception)
{
	if (oFF.notNull(member))
	{
		let structure = structureContext.addNewStructure();
		let dimension = member.getDimension();
		structure.putString("DimensionName", dimension.getName());
		structure.putString("MemberName", member.getName());
		if (exception.isEvaluateAllMembers(dimension))
		{
			structure.putBoolean("EvaluateAllMembers", true);
		}
		let memberForDisplay = exception.getDisplayOnOtherMember(member);
		oFF.QInAExportUtil.setNameIfNotNull(structure, "DisplayOnOtherMember", memberForDisplay);
	}
};
oFF.QInAExceptions.exportThresholds = function(thresholds, exporter, inaStructure, isBw)
{
	let inaThresholdsList = inaStructure.putNewList("Threshold");
	let sizeThresholds = thresholds.size();
	for (let iThreshold = 0; iThreshold < sizeThresholds; iThreshold++)
	{
		let threshold = thresholds.get(iThreshold);
		let inaThresholdStruct = inaThresholdsList.addNewStructure();
		let name = threshold.getName();
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && !oFF.XString.isEqual(name, "Settings"))
		{
			inaThresholdStruct.putStringNotNull("Name", name);
		}
		let comparisonOperator = threshold.getOperator();
		let comparison;
		if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
		{
			comparison = "NOTBETWEEN";
		}
		else
		{
			comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
		}
		inaThresholdStruct.putString("Comparison", comparison);
		let isDouble = threshold.getValueType() === oFF.XValueType.DOUBLE;
		if (threshold.getLowXValue() !== null)
		{
			if (isDouble)
			{
				inaThresholdStruct.putDouble("Low", threshold.getLowValue());
			}
			else
			{
				inaThresholdStruct.putString("Low", threshold.getLow());
			}
		}
		if (threshold.getHighXValue() !== null && comparisonOperator.getNumberOfParameters() > 1)
		{
			if (isDouble)
			{
				inaThresholdStruct.putDouble("High", threshold.getHighValue());
			}
			else
			{
				inaThresholdStruct.putString("High", threshold.getHigh());
			}
		}
		if (!threshold.isEmpty())
		{
			oFF.QInAExceptions.exportSettings(threshold, exporter, inaThresholdStruct);
		}
		else
		{
			inaThresholdStruct.putInteger("AlertLevel", threshold.getAlertLevel().getLevel());
		}
	}
};
oFF.QInAExceptions.importEvaluates = function(inaException, member, newException, importer)
{
	let inaEvaluates = inaException.getListByKey("EvaluateOn");
	if (oFF.isNull(inaEvaluates))
	{
		return;
	}
	let size = inaEvaluates.size();
	let queryModel = member.getQueryModel();
	for (let evalIdx = 0; evalIdx < size; evalIdx++)
	{
		let inaEvaluate = inaEvaluates.getStructureAt(evalIdx);
		let fieldName = inaEvaluate.getStringByKey("Name");
		let someField = queryModel.getFieldByName(fieldName);
		if (oFF.isNull(someField))
		{
			let dimensionByName = queryModel.getDimensionByNameFromExistingMetadata(fieldName);
			if (oFF.notNull(dimensionByName))
			{
				someField = dimensionByName.getKeyField();
			}
		}
		if (oFF.isNull(someField))
		{
			someField = member.getKeyFieldValue().getField();
		}
		if (oFF.isNull(someField))
		{
			importer.addError(oFF.ErrorCodes.INVALID_TOKEN, oFF.XStringUtils.concatenate3("Could not find field '", fieldName, "'!"));
			return;
		}
		if (!inaEvaluate.containsKey("Low"))
		{
			importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate2("No low value for field: ", fieldName));
			return;
		}
		let valueType = someField.getValueType();
		let lowValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "Low", valueType);
		if (importer.hasErrors())
		{
			importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected low valuetype for field: ", valueType.getName()));
			return;
		}
		let newEvaluate = newException._addNewEvaluateWithFieldInternal(someField, lowValue);
		if (inaEvaluate.containsKey("High"))
		{
			let highValue = oFF.QInAValueUtils.importValueByType(importer, inaEvaluate, "High", valueType);
			if (importer.hasErrors())
			{
				importer.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate2("Unexpected high valuetype for field: ", valueType.getName()));
				return;
			}
			newEvaluate.setHighValue(highValue);
		}
		newEvaluate.setEvaluate(oFF.QExceptionEvalType.lookupExceptionEvalType(inaEvaluate.getStringByKey("Evaluate")));
		let operatorName = inaEvaluate.getStringByKey("Comparison");
		let operator = oFF.QInAConverter.lookupComparison(operatorName);
		if (oFF.isNull(operator))
		{
			importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate3("Unexpected comparison operator for evaluate: Operator: '", operatorName, "'"));
			return;
		}
		newEvaluate.setOperator(operator);
	}
};
oFF.QInAExceptions.importSettings = function(inaSettings, newThreshold)
{
	if (oFF.isNull(inaSettings))
	{
		return;
	}
	let size = inaSettings.size();
	for (let iSetting = 0; iSetting < size; iSetting++)
	{
		let inaSetting = inaSettings.getStructureAt(iSetting);
		let name = inaSetting.getStringByKey("Name");
		let priority = inaSetting.getIntegerByKey("Priority");
		let value = inaSetting.getStringByKey("Value");
		if (oFF.notNull(value) && !oFF.XString.isEqual(value, ""))
		{
			let newSetting = newThreshold.addNewSetting(name, priority);
			newSetting.setValue(value);
		}
	}
};
oFF.QInAExceptions.importThresholds = function(inaException, newException)
{
	let inaThresholds = inaException.getListByKey("Threshold");
	if (oFF.notNull(inaThresholds))
	{
		let size = inaThresholds.size();
		for (let thresholdIdx = 0; thresholdIdx < size; thresholdIdx++)
		{
			let inaThreshold = inaThresholds.getStructureAt(thresholdIdx);
			let alertLevel = inaThreshold.getIntegerByKeyExt("AlertLevel", -9999);
			let newThreshold;
			let isDouble = !inaThreshold.hasStringByKey("Low");
			if (isDouble)
			{
				newThreshold = newException._addNewThresholdInternal(inaThreshold.getDoubleByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			else
			{
				newThreshold = newException._addNewThresholdWithStringInternal(inaThreshold.getStringByKey("Low"), oFF.QInAConverter.lookupAlertLevel(alertLevel));
			}
			let name = inaThreshold.getStringByKey("Name");
			if (oFF.notNull(name))
			{
				newThreshold.setName(name);
			}
			let operator = oFF.QInAConverter.lookupComparison(inaThreshold.getStringByKey("Comparison"));
			newThreshold.setOperator(operator);
			if (operator.getNumberOfParameters() === 2)
			{
				if (isDouble)
				{
					let highDouble = inaThreshold.getDoubleByKey("High");
					newThreshold.setHighValue(highDouble);
				}
				else
				{
					let highString = inaThreshold.getStringByKey("High");
					newThreshold.setHigh(highString);
				}
			}
			oFF.QInAExceptions.importSettings(inaThreshold.getListByKey("Settings"), newThreshold);
		}
	}
};
oFF.QInAExceptions.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	if (this.isVersion1(exporter, modelComponent))
	{
		return this.exportFormatV1(exporter, modelComponent);
	}
	else if (this.isVersion2(exporter, modelComponent))
	{
		return this.exportFormatV2(exporter, modelComponent);
	}
	return null;
};
oFF.QInAExceptions.prototype.exportException = function(exporter, exception, isBw)
{
	let inaExceptionStruct = oFF.PrFactory.createStructure();
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		inaExceptionStruct.putBoolean("Active", exception.isActive());
		inaExceptionStruct.putBoolean("EvaluateBeforePostAggregation", !exception.isEvaluatedAfterCalculations());
		inaExceptionStruct.putBoolean("Changegable", exception.isChangeable());
	}
	else if (isBw)
	{
		inaExceptionStruct.putBoolean("Active", exception.isActive());
	}
	else if (!exception.isActive())
	{
		exporter.addWarning(oFF.ErrorCodes.IMPORT_EXCEPTION_INACTIVE, oFF.XStringUtils.concatenate3("Exception '", exception.getName(), "' is inactive."));
		return null;
	}
	let thresholds = exception.getThresholds();
	if (thresholds.isEmpty() && !exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		exporter.addWarning(oFF.ErrorCodes.IMPORT_EXCEPTION_NO_THRESHOLDS, oFF.XStringUtils.concatenate3("Exception '", exception.getName(), "' has no threshold."));
		return null;
	}
	oFF.QInAExceptions.exportThresholds(thresholds, exporter, inaExceptionStruct, isBw);
	oFF.QInAExceptions.exportEvaluates(exception.getEvaluates(), exporter, inaExceptionStruct, isBw);
	inaExceptionStruct.putString("Name", exception.getName());
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || isBw)
	{
		inaExceptionStruct.putString("Text", exception.getText());
	}
	let headerSetting = exception.getHeaderSetting();
	if (headerSetting !== oFF.QExceptionHeaderSettings.NONE)
	{
		inaExceptionStruct.putString("ApplySettingsToHeader", headerSetting.getName());
	}
	inaExceptionStruct.putString("EvaluateDefault", exception.getEvaluateDefault().toString());
	return inaExceptionStruct;
};
oFF.QInAExceptions.prototype.exportFormatV1 = function(exporter, structureMember)
{
	let inaExceptionsList = null;
	let exceptions = structureMember.getExceptions();
	if (oFF.notNull(exceptions))
	{
		let sizeExceptions = exceptions.size();
		if (sizeExceptions > 0)
		{
			inaExceptionsList = oFF.PrFactory.createList();
			let isBw = exporter.isAbap(structureMember);
			for (let iException = 0; iException < sizeExceptions; iException++)
			{
				let exception = exceptions.get(iException);
				let structure = this.exportException(exporter, exception, isBw);
				if (oFF.isNull(structure))
				{
					break;
				}
				inaExceptionsList.add(structure);
			}
		}
	}
	return inaExceptionsList;
};
oFF.QInAExceptions.prototype.exportFormatV2 = function(exporter, queryModel)
{
	let exceptionManager = queryModel.getExceptionManager();
	let size = exceptionManager.size();
	if (size === 0)
	{
		return null;
	}
	let exceptions = oFF.PrFactory.createList();
	let isBw = exporter.isAbap(queryModel);
	for (let i = 0; i < size; i++)
	{
		let exception = exceptionManager.get(i);
		let inaException = this.getExportedExceptionStructureByName(exceptions, exception.getName());
		if (oFF.isNull(inaException))
		{
			inaException = this.exportException(exporter, exception, isBw);
			if (oFF.isNull(inaException))
			{
				continue;
			}
			inaException.putNewList("StructureContext");
			exceptions.add(inaException);
		}
		let structureContext = inaException.getListByKey("StructureContext");
		oFF.QInAExceptions.exportStructureContextItem(structureContext, exception.getMeasure(), exception);
		oFF.QInAExceptions.exportStructureContextItem(structureContext, exception.getStructure(), exception);
	}
	return exceptions;
};
oFF.QInAExceptions.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_MANAGER;
};
oFF.QInAExceptions.prototype.getExportedExceptionStructureByName = function(exceptions, exceptionName)
{
	let size = exceptions.size();
	for (let i = 0; i < size; i++)
	{
		let inaStructure = exceptions.getStructureAt(i);
		if (oFF.XString.isEqual(inaStructure.getStringByKey("Name"), exceptionName))
		{
			return inaStructure;
		}
	}
	return null;
};
oFF.QInAExceptions.prototype.getMemberFromContextItem = function(structure, dimension)
{
	let member = dimension.getStructureMember(structure.getStringByKey("MemberName"));
	if (oFF.isNull(member))
	{
		let evaluateAllMembers = structure.getBooleanByKeyExt("EvaluateAllMembers", false);
		let allStructureMembers = dimension.getAllStructureMembers();
		if (evaluateAllMembers && !allStructureMembers.isEmpty())
		{
			return allStructureMembers.get(0);
		}
	}
	return member;
};
oFF.QInAExceptions.prototype.getTagName = function()
{
	return "Exceptions";
};
oFF.QInAExceptions.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let modelComponent2 = modelComponent;
	let exceptionManager = modelComponent2.getQueryModel().getExceptionManager();
	exceptionManager.queueEventing();
	if (this.isVersion1(importer, modelComponent))
	{
		exceptionManager.removeAllExceptionsOfMeasure(modelComponent);
		this.importFormatV1(importer, inaList, modelComponent, exceptionManager);
	}
	else if (this.isVersion2(importer, modelComponent))
	{
		exceptionManager.clear();
		this.importFormatV2(importer, inaList, modelComponent, exceptionManager);
	}
	exceptionManager.resumeEventing();
	return exceptionManager;
};
oFF.QInAExceptions.prototype.importContextItem = function(structure, queryModel, exceptionManager, exception, importer, inaException)
{
	let importedException = exception;
	let dimension = queryModel.getDimensionByNameFromExistingMetadata(structure.getStringByKey("DimensionName"));
	if (oFF.notNull(dimension))
	{
		let member = this.getMemberFromContextItem(structure, dimension);
		if (oFF.notNull(member))
		{
			if (oFF.isNull(importedException))
			{
				importedException = this.importException(importer, member, exceptionManager, inaException);
			}
			if (dimension.isMeasureStructure())
			{
				importedException.setMeasure(member);
			}
			else
			{
				importedException.setStructure(member);
			}
			importedException.displayOnOtherMember(member, dimension.getStructureMember(structure.getStringByKey("DisplayOnOtherMember")));
			importedException.setEvaluateAllMembers(dimension, structure.getBooleanByKeyExt("EvaluateAllMembers", false));
		}
	}
	return importedException;
};
oFF.QInAExceptions.prototype.importException = function(importer, member, exceptionManager, inaException)
{
	let exceptionName = inaException.getStringByKey("Name");
	let exceptionText = inaException.getStringByKey("Text");
	let evalType = oFF.QExceptionEvalType.lookupExceptionEvalType(inaException.getStringByKey("EvaluateDefault"));
	let headerSettings = oFF.QExceptionHeaderSettings.lookupExceptionHeaderSetting(inaException.getStringByKey("ApplySettingsToHeader"));
	let isActive = inaException.getBooleanByKeyExt("Active", true);
	let isEvalAfterCalc = inaException.getBooleanByKeyExt("EvaluateBeforePostAggregation", true);
	let newException = exceptionManager._addNewExceptionInternal(exceptionName, exceptionText, evalType, headerSettings, isActive, !isEvalAfterCalc);
	newException.queueEventing();
	oFF.QInAExceptions.importEvaluates(inaException, member, newException, importer);
	oFF.QInAExceptions.importThresholds(inaException, newException);
	newException.resumeEventing();
	return newException;
};
oFF.QInAExceptions.prototype.importFormatV1 = function(importer, inaList, member, exceptionManager)
{
	if (oFF.notNull(inaList))
	{
		let size = inaList.size();
		for (let exceptionIdx = 0; exceptionIdx < size; exceptionIdx++)
		{
			let inaException = inaList.getStructureAt(exceptionIdx);
			let newException = this.importException(importer, member, exceptionManager, inaException);
			newException.setMeasure(member);
			newException.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
		}
	}
};
oFF.QInAExceptions.prototype.importFormatV2 = function(importer, inaList, queryModel, exceptionManager)
{
	if (oFF.isNull(inaList))
	{
		return;
	}
	let sizeExceptions = inaList.size();
	for (let iException = 0; iException < sizeExceptions; iException++)
	{
		let inaException = inaList.getStructureAt(iException);
		let structureContext = inaException.getListByKey("StructureContext");
		if (!oFF.PrUtils.isListEmpty(structureContext))
		{
			let exception = this.importContextItem(structureContext.getStructureAt(0), queryModel, exceptionManager, null, importer, inaException);
			if (oFF.notNull(exception))
			{
				if (structureContext.size() > 1)
				{
					this.importContextItem(structureContext.getStructureAt(1), queryModel, exceptionManager, exception, importer, inaException);
				}
				exception.setIsChangeable(inaException.getBooleanByKeyExt("Changegable", true));
			}
		}
	}
};
oFF.QInAExceptions.prototype.isVersion1 = function(qInA, modelComponent)
{
	let componentType = modelComponent.getOlapComponentType();
	return !qInA.m_capabilities.supportsExceptionsV2() && componentType.isTypeOf(oFF.MemberType.ABSTRACT_MEMBER);
};
oFF.QInAExceptions.prototype.isVersion2 = function(qInA, modelComponent)
{
	let componentType = modelComponent.getOlapComponentType();
	return qInA.m_capabilities.supportsExceptionsV2() && componentType.isTypeOf(oFF.OlapComponentType.QUERY_MODEL);
};

oFF.QInAField = function() {};
oFF.QInAField.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAField.prototype._ff_c = "QInAField";

oFF.QInAField.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let field = modelComponent;
	let obtainabilityType = field.getObtainability();
	let hide = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.HIDE) > 0 || oFF.notNull(obtainabilityType) && obtainabilityType !== oFF.ObtainabilityType.ALWAYS;
	inaStructure.putString("Name", field.getName());
	if (!exporter.m_mode.isDataBlending())
	{
		inaStructure.putStringNotNull("DisplayFormat", field.getDisplayFormat());
	}
	let textTransformationType = field.getTextTransformation();
	if (oFF.notNull(textTransformationType))
	{
		inaStructure.putString("TextTransformation", oFF.QInAConverter.lookupTextTransformationInA(textTransformationType));
	}
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) || exporter.m_mode === oFF.QModelFormat.INA_VALUE_HELP)
	{
		if (!exporter.m_capabilities.supportsExtendedSort() && !exporter.isVirtualInA(field.getQueryModel()))
		{
			let direction;
			if (exporter.m_modelContext === oFF.QContextType.SELECTOR)
			{
				if (field.isEqualTo(field.getDimension().getSelectorKeyField()))
				{
					direction = field.getDimension().getSelectorOrder();
					inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(direction));
				}
				else
				{
					inaStructure.putInteger("SortOrder", 0);
				}
			}
			else
			{
				if (field.hasSorting())
				{
					direction = field.getResultSetSorting().getDirection();
					inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(direction));
				}
				else if (field.getDimension().hasSorting())
				{
					let dimension = field.getDimension();
					direction = dimension.getResultSetSorting().getDirection();
					inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(direction));
				}
				else
				{
					inaStructure.putInteger("SortOrder", 0);
				}
			}
		}
		if (hide)
		{
			inaStructure.putString("Obtainability", "UserInterface");
		}
		else
		{
			inaStructure.putString("Obtainability", "Always");
		}
	}
	else if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		let calcField = field;
		if (calcField.getFormulaItem() !== null)
		{
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, calcField.getFormulaItem(), inaStructure.putNewStructure("Formula"), field.getQueryModel());
		}
	}
	if (exporter.isVirtualInA(field.getQueryModel()))
	{
		inaStructure.putBoolean("IsKey", field.isKeyField());
	}
	return inaStructure;
};
oFF.QInAField.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FIELD;
};
oFF.QInAField.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let field = context.getFieldAccessorSingle().getFieldByName(inaStructure.getStringByKey("Name"));
	if (oFF.isNull(field))
	{
		return null;
	}
	let inaTextTransformation = inaStructure.getStringByKey("TextTransformation");
	if (oFF.notNull(inaTextTransformation))
	{
		field.setTextTransformation(oFF.QInAConverter.lookupTextTransformation(inaTextTransformation));
	}
	field.setDisplayFormat(inaStructure.getStringByKey("DisplayFormat"));
	if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		let inaFormula = inaStructure.getStructureByKey("Formula");
		if (oFF.notNull(inaFormula))
		{
			let newFieldFormula = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, field.getDimension(), inaStructure.getStructureByKey("Formula"), null, context);
			field.setFormulaItem(newFieldFormula);
		}
	}
	return field;
};

oFF.QInAFilter = function() {};
oFF.QInAFilter.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilter.prototype._ff_c = "QInAFilter";

oFF.QInAFilter.mergeAndExportFilterStateList = function(exporter, filterStateList)
{
	let mergedStructure = null;
	let selectionSize = filterStateList.size();
	if (selectionSize > 0)
	{
		if (selectionSize > 1)
		{
			let exportedFilters = oFF.XList.create();
			for (let i = 0; i < selectionSize; i++)
			{
				let currentFilterStructureElement = exporter.exportFilterExpression(filterStateList.get(i));
				if (oFF.notNull(currentFilterStructureElement))
				{
					exportedFilters.add(currentFilterStructureElement);
				}
			}
			let exportedSize = exportedFilters.size();
			if (exportedSize > 0)
			{
				if (exportedSize > 1)
				{
					mergedStructure = oFF.PrFactory.createStructure();
					let mergedSelectionStructure = mergedStructure.putNewStructure("Selection");
					let inaLogicalOperator = mergedSelectionStructure.putNewStructure("Operator");
					inaLogicalOperator.putString("Code", "And");
					let mergedSubSelections = inaLogicalOperator.putNewList("SubSelections");
					for (let j = 0; j < exportedSize; j++)
					{
						let exportedFilterSelection = exportedFilters.get(j).getStructureByKey("Selection");
						if (oFF.notNull(exportedFilterSelection))
						{
							mergedSubSelections.add(exportedFilterSelection);
						}
					}
				}
				else
				{
					mergedStructure = exportedFilters.get(0);
				}
			}
		}
		else
		{
			mergedStructure = exporter.exportFilterExpression(filterStateList.get(0));
		}
	}
	return mergedStructure;
};
oFF.QInAFilter.prototype.checkConflicting = function(filterElement, displayFilter, hierarchySet)
{
	let componentType = filterElement.getComponentType();
	let isConflicting;
	let childrenIterator;
	if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let cartesianList = filterElement;
		if (!cartesianList.isConvertToFlatFilter() && displayFilter.getCartesianListByDimensionName(cartesianList.getDimensionName()) !== null)
		{
			let hierarchySetLocal = oFF.XStringUtils.isNotNullAndNotEmpty(cartesianList.getHierarchyName());
			childrenIterator = filterElement.getChildrenIterator();
			while (childrenIterator.hasNext())
			{
				isConflicting = this.checkConflicting(childrenIterator.next(), displayFilter, hierarchySetLocal);
				if (isConflicting)
				{
					return true;
				}
			}
		}
	}
	else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			isConflicting = this.checkConflicting(childrenIterator.next(), displayFilter, false);
			if (isConflicting)
			{
				return true;
			}
		}
	}
	else if (componentType.isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		let operation = filterElement;
		let dimensionName = operation.getDimensionName();
		let dimension = operation.getDimension();
		return !operation.isConvertToFlatFilter() && (hierarchySet || oFF.XStringUtils.isNotNullAndNotEmpty(operation.getHierarchyName())) && (oFF.isNull(dimensionName) || displayFilter.getCartesianListByDimensionName(dimensionName) !== null) && (oFF.isNull(dimension) || !dimension.isVisibilityFilterForDrillDisabled());
	}
	return false;
};
oFF.QInAFilter.prototype.copyAndSkipConflicting = function(filterElement, displayFilter)
{
	let childrenIterator;
	let modelComponentType = filterElement.getComponentType();
	if (modelComponentType.isTypeOf(oFF.OlapComponentType.FILTER_ELEMENT) && !this.checkConflicting(filterElement, displayFilter, false))
	{
		return filterElement;
	}
	else if (modelComponentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA) && !modelComponentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let subCollector = this.createFilterAlgebraList(modelComponentType, displayFilter.getContext());
		childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let subClone = this.copyAndSkipConflicting(childrenIterator.next(), displayFilter);
			if (oFF.notNull(subClone))
			{
				subCollector.add(subClone);
			}
		}
		return subCollector;
	}
	return null;
};
oFF.QInAFilter.prototype.copyAndSkipNonMeasureFilter = function(filterElement, queryModel)
{
	let childrenIterator;
	let modelComponentType = filterElement.getComponentType();
	if (modelComponentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST) || modelComponentType.isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		let dimension = queryModel.getDimensionByName(filterElement.getDimensionName());
		if (oFF.notNull(dimension) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.MEASURE_STRUCTURE))
		{
			return filterElement;
		}
	}
	else if (modelComponentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA) && !modelComponentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
	{
		let subCollector = this.createFilterAlgebraList(modelComponentType, queryModel);
		childrenIterator = filterElement.getChildrenIterator();
		while (childrenIterator.hasNext())
		{
			let subClone = this.copyAndSkipNonMeasureFilter(childrenIterator.next(), queryModel);
			if (oFF.notNull(subClone))
			{
				subCollector.add(subClone);
			}
		}
		return subCollector;
	}
	return null;
};
oFF.QInAFilter.prototype.createFilterAlgebraList = function(componentType, context)
{
	if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_PRODUCT))
	{
		return oFF.QFilterCartesianProduct._create(context, null);
	}
	if (componentType.isTypeOf(oFF.FilterComponentType.AND))
	{
		return oFF.QFilterAnd._create(context, null);
	}
	if (componentType.isTypeOf(oFF.FilterComponentType.OR))
	{
		return oFF.QFilterOr._create(context, null);
	}
	if (componentType.isTypeOf(oFF.FilterComponentType.NOT))
	{
		return oFF.QFilterNot._create(context, null);
	}
	return oFF.QFilterCartesianProduct._create(context, null);
};
oFF.QInAFilter.prototype.decorateWithZoomFilter = function(filterExpressionState, displayFilter, transientReleasableObjects)
{
	let result;
	let filterRootElement = filterExpressionState.getFilterRootElement();
	if (!oFF.XCollectionUtils.hasElements(displayFilter) || oFF.isNull(filterRootElement))
	{
		result = filterExpressionState;
	}
	else
	{
		let isConflicting = this.checkConflicting(filterRootElement, displayFilter, false);
		if (isConflicting)
		{
			result = oFF.QFilterExpression.createTransient(displayFilter.getContext());
			result.setComplexRoot(this.copyAndSkipConflicting(filterRootElement, displayFilter));
			transientReleasableObjects.add(result);
		}
		else
		{
			result = filterExpressionState;
		}
	}
	return result;
};
oFF.QInAFilter.prototype.exportFilter = function(exporter, filter, filterExpressionState, layeredFilter, tmpFilter, zoomDisplayFilter, zoomDataFilter)
{
	if (!exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) && !exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
	{
		return exporter.exportFilterExpression(filterExpressionState);
	}
	if (oFF.notNull(layeredFilter) && layeredFilter.size() === 1 && oFF.notNull(zoomDataFilter) && !oFF.XCollectionUtils.hasElements(zoomDisplayFilter) && !exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA))
	{
		let filterExpressionExternal = layeredFilter.getIterator().next();
		if (oFF.notNull(filterExpressionExternal) && !filterExpressionExternal.isReleased() && !filterExpressionExternal.getModelCapabilities().supportsMultiComplexFilter())
		{
			let effectiveSelectionContainer = filter.getEffectiveFilter();
			let effSelectContainerStructure = exporter.exportFilterExpression(effectiveSelectionContainer);
			if (oFF.notNull(effSelectContainerStructure))
			{
				return effSelectContainerStructure;
			}
		}
	}
	let queryModel = filter.getQueryModel();
	let transientReleasableObjects = oFF.XList.create();
	let selectionList = oFF.XList.create();
	if (this.isValidFilterExpression(filterExpressionState, queryModel) && !this.shouldBeIgnored(exporter, filterExpressionState))
	{
		if (filter.isIgnoreInternalNonMeasureFilter())
		{
			selectionList.add(this.extractMeasureFilter(filterExpressionState, filterExpressionState.getContext(), transientReleasableObjects));
		}
		else
		{
			selectionList.add(this.decorateWithZoomFilter(filterExpressionState, zoomDisplayFilter, transientReleasableObjects));
		}
	}
	if (oFF.notNull(layeredFilter))
	{
		let externalizedDynamicFilterKey = filter.getExternalizedFilterName();
		let firstLayer = layeredFilter.getByKey(externalizedDynamicFilterKey);
		if (this.isValidFilterExpression(firstLayer, queryModel) && !this.shouldBeIgnored(exporter, firstLayer))
		{
			let firstRuntimeExternalFilter = this.getRuntimeExternalFilter(firstLayer, filter, transientReleasableObjects);
			if (filter.isIgnoreInternalNonMeasureFilter())
			{
				selectionList.add(this.extractMeasureFilter(firstRuntimeExternalFilter, filterExpressionState.getContext(), transientReleasableObjects));
			}
			else
			{
				selectionList.add(this.decorateWithZoomFilter(firstRuntimeExternalFilter, zoomDisplayFilter, transientReleasableObjects));
			}
		}
		let keyIterator = layeredFilter.getKeysAsIterator();
		let mergablePrimaryCalculationDimensionFilter = oFF.QFactory.createFilterOr(queryModel);
		let filterToRemove = null;
		let containsAllPrimaryCalculationFilter = false;
		while (keyIterator.hasNext())
		{
			let key = keyIterator.next();
			if (!oFF.XString.isEqual(key, externalizedDynamicFilterKey))
			{
				let filterLayer = layeredFilter.getByKey(key);
				if (this.isValidFilterExpression(filterLayer, queryModel) && !this.shouldBeIgnored(exporter, filterLayer))
				{
					let runtimeExternalFilter = this.getRuntimeExternalFilter(filterLayer, filter, transientReleasableObjects);
					let decorateWithZoomFilter = this.decorateWithZoomFilter(runtimeExternalFilter, zoomDisplayFilter, transientReleasableObjects);
					if (filterLayer.isMergable())
					{
						let dimensionsUsedInFilter = runtimeExternalFilter.getDimensionsUsedInFilter();
						let primaryCalculationDimensionName = queryModel.getPrimaryCalculationDimension().getName();
						if (dimensionsUsedInFilter.size() === 1 && oFF.XString.isEqual(primaryCalculationDimensionName, dimensionsUsedInFilter.getValuesAsReadOnlyList().get(0)))
						{
							if (!containsAllPrimaryCalculationFilter)
							{
								if (oFF.QFilterUtil.hasEmptyMergableFilterExpressionForDimension(decorateWithZoomFilter, primaryCalculationDimensionName))
								{
									containsAllPrimaryCalculationFilter = true;
								}
								if (mergablePrimaryCalculationDimensionFilter.size() === 0)
								{
									filterToRemove = decorateWithZoomFilter;
								}
								mergablePrimaryCalculationDimensionFilter.add(decorateWithZoomFilter.getFilterRootElement());
								if (mergablePrimaryCalculationDimensionFilter.size() < 2)
								{
									selectionList.add(decorateWithZoomFilter);
								}
							}
							continue;
						}
					}
					selectionList.add(decorateWithZoomFilter);
				}
			}
		}
		if (containsAllPrimaryCalculationFilter)
		{
			selectionList.removeElement(filterToRemove);
		}
		else if (mergablePrimaryCalculationDimensionFilter.size() >= 2)
		{
			selectionList.removeElement(filterToRemove);
			let runtimeMergedFilter = oFF.QFilterExpression.createTransient(filterExpressionState.getContext());
			runtimeMergedFilter.setComplexRoot(mergablePrimaryCalculationDimensionFilter);
			selectionList.add(runtimeMergedFilter);
			transientReleasableObjects.add(runtimeMergedFilter);
		}
	}
	if (oFF.notNull(tmpFilter) && this.isValidFilterExpression(tmpFilter, queryModel))
	{
		selectionList.add(this.decorateWithZoomFilter(tmpFilter, zoomDisplayFilter, transientReleasableObjects));
	}
	let additionalZoomFilter;
	if (oFF.XCollectionUtils.hasElements(zoomDisplayFilter))
	{
		additionalZoomFilter = oFF.QFilterExpression.createTransient(filterExpressionState.getContext());
		additionalZoomFilter.setComplexRoot(zoomDisplayFilter);
		selectionList.add(additionalZoomFilter);
		transientReleasableObjects.add(additionalZoomFilter);
	}
	if (oFF.XCollectionUtils.hasElements(zoomDataFilter))
	{
		let zoomDataLayer = oFF.QFilterExpression.createTransient(filterExpressionState.getContext());
		zoomDataLayer.setComplexRoot(zoomDataFilter);
		selectionList.add(zoomDataLayer);
		transientReleasableObjects.add(zoomDataLayer);
	}
	let exportResult = oFF.QInAFilter.mergeAndExportFilterStateList(exporter, selectionList);
	oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(transientReleasableObjects);
	return exportResult;
};
oFF.QInAFilter.prototype.extractMeasureFilter = function(filterExpressionState, context, transientReleasableObjects)
{
	let result;
	let filterRootElement = filterExpressionState.getFilterRootElement();
	if (oFF.isNull(filterRootElement))
	{
		result = filterExpressionState;
	}
	else
	{
		result = oFF.QFilterExpression.createTransient(context);
		result.setComplexRoot(this.copyAndSkipNonMeasureFilter(filterRootElement, context.getQueryModel()));
		transientReleasableObjects.add(result);
	}
	return result;
};
oFF.QInAFilter.prototype.getRuntimeExternalFilter = function(inputFilterExpression, filter, transientReleasableObjects)
{
	let backProjectionFilterIds = filter.getBackProjectionFilterIds();
	let runtimeExternalFilter;
	if (oFF.notNull(backProjectionFilterIds) && backProjectionFilterIds.contains(inputFilterExpression.getUniqueId()))
	{
		let context = filter.getContext();
		context.getQueryModel().setDeltaPhase(oFF.QDeltaOperationPhase.NOTIFY_DO_NOT_RAISEEVENTS);
		runtimeExternalFilter = oFF.QFilterExpression.createTransient(filter.getContext());
		runtimeExternalFilter.copyFrom(inputFilterExpression, null);
		transientReleasableObjects.add(runtimeExternalFilter);
		context.getQueryModel().resumeEventing();
	}
	else
	{
		runtimeExternalFilter = inputFilterExpression;
	}
	return runtimeExternalFilter;
};
oFF.QInAFilter.prototype.isValidFilterExpression = function(filterExpressionState, queryModel)
{
	if (oFF.isNull(filterExpressionState))
	{
		return false;
	}
	let filterRootElement = filterExpressionState.getFilterRootElement();
	if (oFF.isNull(filterRootElement))
	{
		return false;
	}
	if (filterRootElement.getOlapComponentType().isTypeOf(oFF.FilterComponentType.TRANSIENT_FILTER))
	{
		return false;
	}
	if (oFF.notNull(queryModel))
	{
		let iterator = filterExpressionState.getDimensionsUsedInFilter().getIterator();
		while (iterator.hasNext())
		{
			let dimensionName = iterator.next();
			let dimension = queryModel.getDimensionByName(dimensionName);
			if (oFF.isNull(dimension))
			{
				return filterRootElement.getMemberNamesFromFilter(dimensionName).isEmpty();
			}
			else if (oFF.QInAExportUtil.isFormulaCalculatedDimensionHidden(dimension))
			{
				return false;
			}
		}
	}
	return true;
};
oFF.QInAFilter.prototype.shouldBeIgnored = function(exporter, filterExpression)
{
	return exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA) && filterExpression.getTagging().containsKey("PersistedQueryIgnoreFilter") || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA_BLENDING_SOURCE_METADATA) && filterExpression.getTagging().containsKey(oFF.QTransientConstants.TAG_LOV_BASED_FILTER_ACROSS_MODELS);
};

oFF.QInAFilterAlgebra = function() {};
oFF.QInAFilterAlgebra.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterAlgebra.prototype._ff_c = "QInAFilterAlgebra";

oFF.QInAFilterAlgebra.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let logicalContainer = modelComponent;
	let size = logicalContainer.size();
	if (size === 0)
	{
		return null;
	}
	let inaSubSelections = oFF.PrFactory.createList();
	for (let i = 0; i < size; i++)
	{
		let currentComponent = logicalContainer.get(i);
		let inaChildElement;
		if (currentComponent.getOlapComponentType() === oFF.FilterComponentType.TUPLE)
		{
			inaChildElement = exporter.exportFilterTuple(currentComponent);
		}
		else
		{
			inaChildElement = exporter.exportFilterElement(currentComponent);
		}
		if (oFF.notNull(inaChildElement) && inaChildElement.hasElements())
		{
			inaSubSelections.add(inaChildElement);
		}
	}
	if (inaSubSelections.isEmpty())
	{
		return null;
	}
	inaStructure.put("SubSelections", inaSubSelections);
	let type = logicalContainer.getComponentType();
	if (type.isTypeOf(oFF.FilterComponentType.AND))
	{
		inaStructure.putString("Code", "And");
	}
	else if (type.isTypeOf(oFF.FilterComponentType.OR))
	{
		inaStructure.putString("Code", "Or");
	}
	else if (type === oFF.FilterComponentType.NOT)
	{
		inaStructure.putString("Code", "Not");
	}
	return inaStructure;
};
oFF.QInAFilterAlgebra.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.BOOLEAN_ALGEBRA;
};
oFF.QInAFilterAlgebra.prototype.getTagName = function()
{
	return "Operator";
};
oFF.QInAFilterAlgebra.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let inaSubSelections = inaStructure.getListByKey("SubSelections");
	if (oFF.notNull(inaSubSelections))
	{
		let code = inaStructure.getStringByKey("Code");
		let setWithChildren;
		if (oFF.XString.isEqual(code, "And"))
		{
			setWithChildren = oFF.QFilterAnd._create(context, filterExpression);
		}
		else if (oFF.XString.isEqual(code, "Not"))
		{
			setWithChildren = oFF.QFilterNot._create(context, filterExpression);
		}
		else
		{
			setWithChildren = oFF.QFilterOr._create(context, filterExpression);
		}
		let size = inaSubSelections.size();
		for (let i = 0; i < size; i++)
		{
			let subSelection = inaSubSelections.getStructureAt(i);
			let child = importer.importFilterElement(subSelection, null, filterExpression, context);
			if (oFF.notNull(child))
			{
				setWithChildren.add(child);
			}
		}
		if (setWithChildren.hasElements())
		{
			return setWithChildren;
		}
	}
	return null;
};

oFF.QInAFilterAll = function() {};
oFF.QInAFilterAll.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterAll.prototype._ff_c = "QInAFilterAll";

oFF.QInAFilterAll.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filter = modelComponent;
	if (filter.getQueryModel().isExportingFixedFilter())
	{
		exporter.exportFixedFilter(filter, inaStructure);
	}
	exporter.exportDynamicFilter(filter, inaStructure);
	exporter.exportVisibilityFilter(filter, inaStructure);
	return inaStructure;
};
oFF.QInAFilterAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SELECTOR;
};
oFF.QInAFilterAll.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterComponent = modelComponent;
	importer.importFixedFilter(inaStructure, filterComponent, context);
	importer.importDynamicFilter(inaStructure, filterComponent, context);
	importer.importVisibilityFilter(inaStructure, filterComponent, context);
	return filterComponent;
};

oFF.QInAFilterCellValueOperand = function() {};
oFF.QInAFilterCellValueOperand.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterCellValueOperand.prototype._ff_c = "QInAFilterCellValueOperand";

oFF.QInAFilterCellValueOperand.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let cellValueOperand = modelComponent;
	inaStructure.putBoolean("IsExcluding", cellValueOperand.isExcluding());
	let comparisonOperator = cellValueOperand.getComparisonOperator();
	inaStructure.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
	let lowValue = cellValueOperand.getLow();
	inaStructure.putString("Low", lowValue);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(lowValue) && cellValueOperand.isLowVariable())
	{
		inaStructure.putString("LowIs", "Variable");
	}
	if (comparisonOperator.getNumberOfParameters() === 2)
	{
		let highValue = cellValueOperand.getHigh();
		inaStructure.putString("High", highValue);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(highValue) && cellValueOperand.isHighVariable())
		{
			inaStructure.putString("HighIs", "Variable");
		}
	}
	return inaStructure;
};
oFF.QInAFilterCellValueOperand.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND;
};
oFF.QInAFilterCellValueOperand.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let low = inaStructure.getStringByKey("Low");
	if (oFF.XString.isEqual(low, ""))
	{
		low = null;
	}
	let high = inaStructure.getStringByKey("High");
	if (oFF.XString.isEqual(high, ""))
	{
		high = null;
	}
	let operator = oFF.QInAConverter.lookupComparison(inaStructure.getStringByKey("Comparison"));
	let operand = oFF.QFilterCellValueOperand._create(context, null, low, high, operator);
	operand.setIsExcluding(inaStructure.getBooleanByKey("IsExcluding"));
	return operand;
};

oFF.QInAFilterConvertedTimeCartesianList = function() {};
oFF.QInAFilterConvertedTimeCartesianList.prototype = new oFF.QInAFilterCartesianList();
oFF.QInAFilterConvertedTimeCartesianList.prototype._ff_c = "QInAFilterConvertedTimeCartesianList";

oFF.QInAFilterConvertedTimeCartesianList.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST;
};

oFF.QInAFilterElement = function() {};
oFF.QInAFilterElement.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterElement.prototype._ff_c = "QInAFilterElement";

oFF.QInAFilterElement.prototype.m_exportingAtLevel1 = false;
oFF.QInAFilterElement.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filterElement = modelComponent;
	let type = filterElement.getComponentType();
	if (type.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
	{
		if (type === oFF.FilterComponentType.CARTESIAN_LIST)
		{
			exporter.exportCartesianList(filterElement, inaStructure);
		}
		else if (type === oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST)
		{
			exporter.exportConvertedTimeCartesianList(filterElement, inaStructure);
		}
		else if (type === oFF.FilterComponentType.CARTESIAN_PRODUCT)
		{
			exporter.exportFilterCartesianProduct(filterElement, inaStructure);
		}
		else
		{
			if (this.shouldContinueExport(filterElement, exporter))
			{
				exporter.exportFilterAlgebra(filterElement, inaStructure);
				if (this.m_exportingAtLevel1)
				{
					this.m_exportingAtLevel1 = false;
				}
			}
		}
	}
	else if (type.isTypeOf(oFF.FilterComponentType.OPERATION))
	{
		let filterOperation = filterElement;
		let comparisonOperator = filterOperation.getComparisonOperator();
		if (oFF.notNull(comparisonOperator))
		{
			if (comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
			{
				exporter.exportFilterGeo(filterOperation, inaStructure);
			}
			else
			{
				if (exporter.m_capabilities.supportsSetOperand())
				{
					let inaInnerElement = oFF.PrFactory.createStructure();
					let fieldMetadata = filterOperation.getFieldMetadata();
					let fieldName = oFF.notNull(fieldMetadata) ? fieldMetadata.getName() : filterOperation.getFieldName();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(fieldName))
					{
						let dimensionMetadata = oFF.notNull(fieldMetadata) ? fieldMetadata.getDimensionMetadata() : null;
						if (exporter.getMode() === oFF.QModelFormat.INA_DATA_BLENDING_SOURCE_METADATA && oFF.notNull(dimensionMetadata) && filterElement.getQueryModel() !== null)
						{
							let filterDimension = filterElement.getQueryModel().getDimensionByName(dimensionMetadata.getName());
							if (oFF.notNull(filterDimension) && (filterDimension.getDimensionType() === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION || filterDimension.getDimensionType() === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION))
							{
								return inaStructure;
							}
						}
						inaInnerElement.putString("FieldName", fieldName);
						let hierarchyName = filterOperation.getHierarchyName();
						let isMergeProcessingMode = exporter.getMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || exporter.getOriginalMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING;
						if (isMergeProcessingMode && oFF.notNull(dimensionMetadata))
						{
							if (dimensionMetadata.isMeasureStructure())
							{
								inaInnerElement.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_MEASURE_STRUCTURE);
							}
							else if (dimensionMetadata.isSecondaryStructure())
							{
								inaInnerElement.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_SECOND_STRUCTURE);
							}
							if (oFF.notNull(hierarchyName))
							{
								let hierarchicalFilterTag = oFF.XStringUtils.concatenate2(oFF.InAQueryMergeConstants.TAG_HIERARCHICAL_FILTER, dimensionMetadata.getName());
								inaInnerElement.putString(oFF.InAQueryMergeConstants.TAG_KEY, hierarchicalFilterTag);
							}
						}
						if (oFF.notNull(hierarchyName))
						{
							let filterExpr = filterOperation.getFilterExpression() !== null ? filterOperation.getFilterExpression() : filterOperation.getParent().getFilterExpression();
							oFF.QInAHierarchy.exportHierarchyForFilter(exporter, exporter.isAbap(filterElement), inaInnerElement, null, filterExpr, filterOperation.getQueryManager(), fieldName, hierarchyName, filterOperation.getHierarchyDueDate(), filterOperation.getHierarchyVersion());
						}
						if (exporter.m_capabilities.supportsConvertToFlatFilter() && filterOperation.isConvertToFlatFilter())
						{
							inaInnerElement.putBoolean("ConvertToFlatSelection", true);
						}
						let inaElementList = inaInnerElement.putNewList("Elements");
						let inaOperation = inaElementList.addNewStructure();
						exporter.exportFilterOperation(filterOperation, inaOperation);
						if (oFF.notNull(inaStructure))
						{
							inaStructure.put("SetOperand", inaInnerElement);
						}
					}
				}
			}
		}
	}
	else if (type.isTypeOf(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND))
	{
		let cellValueOperand = oFF.PrFactory.createStructure();
		let elements = cellValueOperand.putNewList("Elements");
		elements.add(exporter.exportCellValueOperand(filterElement));
		inaStructure.put("CellValueOperand", cellValueOperand);
	}
	return inaStructure;
};
oFF.QInAFilterElement.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_ELEMENT;
};
oFF.QInAFilterElement.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let filterElement = modelComponent;
	if (inaStructure.containsKey("Operator"))
	{
		filterElement = importer.importFilterAlgebra(filterExpression, inaStructure, context);
	}
	else
	{
		let inaSetOperand = inaStructure.getStructureByKey("SetOperand");
		if (oFF.isNull(inaSetOperand))
		{
			if (inaStructure.containsKey("GeometryOperand"))
			{
				filterElement = importer.importFilterGeo(filterExpression, inaStructure, context);
			}
		}
		else
		{
			filterElement = importer.importCartesianList(inaSetOperand, filterElement, filterExpression, context);
		}
	}
	return filterElement;
};
oFF.QInAFilterElement.prototype.shouldContinueExport = function(filterElement, exporter)
{
	let isReInitFlow = oFF.notNull(exporter.m_variableProcessingDirective) && exporter.m_variableProcessingDirective === oFF.ProcessingStep.VARIABLE_DEFINITION;
	if (!isReInitFlow)
	{
		return true;
	}
	let queryModel = filterElement.getQueryModel();
	let modelCapabilities = filterElement.getModelCapabilities();
	if (modelCapabilities.supportsComplexTupleFilter() && oFF.notNull(queryModel))
	{
		if (!this.m_exportingAtLevel1)
		{
			this.m_exportingAtLevel1 = true;
			return true;
		}
		return false;
	}
	return true;
};

oFF.QInAFilterExpression = function() {};
oFF.QInAFilterExpression.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterExpression.prototype._ff_c = "QInAFilterExpression";

oFF.QInAFilterExpression.combineSetOperandWithCellValueOperand = function(inaExpression, inaGlobalCellValueOperands)
{
	if (oFF.QInAFilterExpression.isCellOperandEmpty(inaGlobalCellValueOperands) && !oFF.QInAFilterExpression.isSetOperandEmpty(inaExpression))
	{
		return inaExpression;
	}
	if (!oFF.QInAFilterExpression.isCellOperandEmpty(inaGlobalCellValueOperands) && oFF.QInAFilterExpression.isSetOperandEmpty(inaExpression))
	{
		let newInaSelection = oFF.PrFactory.createStructure();
		newInaSelection.put("Selection", inaGlobalCellValueOperands);
		return newInaSelection;
	}
	if (oFF.QInAFilterExpression.isCellOperandEmpty(inaGlobalCellValueOperands) && oFF.QInAFilterExpression.isSetOperandEmpty(inaExpression))
	{
		return null;
	}
	let inaVisibilityFilter = oFF.PrFactory.createStructure();
	let inaSelection = inaVisibilityFilter.putNewStructure("Selection");
	let inaOperator = inaSelection.putNewStructure("Operator");
	inaOperator.putString("Code", "And");
	let inaSubSelections = inaOperator.putNewList("SubSelections");
	let inaSet = inaExpression.getStructureByKey("Selection");
	if (oFF.isNull(inaSet))
	{
		let newSetOperand = oFF.PrFactory.createStructure();
		newSetOperand.put("SetOperand", inaExpression);
		inaSubSelections.add(newSetOperand);
	}
	else
	{
		inaSubSelections.add(inaSet);
	}
	inaSubSelections.add(inaGlobalCellValueOperands);
	return inaVisibilityFilter;
};
oFF.QInAFilterExpression.exportGlobalCellValueOperands = function(exporter, filterExpression)
{
	let inaGlobalCellValueOperands = null;
	if (filterExpression.getModelCapabilities().supportsCellValueOperand())
	{
		let inaElements = oFF.PrFactory.createList();
		if (filterExpression.isSuppressingNulls())
		{
			let nullSuppression = oFF.QFilterCellValueOperand.createForNullSuppression(filterExpression.getContext(), null);
			inaElements.add(exporter.exportCellValueOperand(nullSuppression));
		}
		let cellValueOperands = filterExpression.getCellValueOperands();
		let size = cellValueOperands.size();
		for (let i = 0; i < size; i++)
		{
			inaElements.add(exporter.exportCellValueOperand(cellValueOperands.get(i)));
		}
		if (!inaElements.isEmpty())
		{
			let inaCellValueOperands = oFF.PrFactory.createStructure();
			inaCellValueOperands.put("Elements", inaElements);
			inaGlobalCellValueOperands = oFF.PrFactory.createStructure();
			inaGlobalCellValueOperands.put("CellValueOperand", inaCellValueOperands);
		}
	}
	return inaGlobalCellValueOperands;
};
oFF.QInAFilterExpression.isCellOperandEmpty = function(inaFilter)
{
	if (oFF.notNull(inaFilter))
	{
		let inaSelection = inaFilter.getStructureByKey("Selection");
		let inaCellOperand;
		if (oFF.isNull(inaSelection))
		{
			inaCellOperand = inaFilter.getStructureByKey("CellValueOperand");
		}
		else
		{
			inaCellOperand = inaSelection.getStructureByKey("CellValueOperand");
		}
		if (oFF.notNull(inaCellOperand))
		{
			return inaCellOperand.getListByKey("Elements").isEmpty();
		}
	}
	return true;
};
oFF.QInAFilterExpression.isSetOperandEmpty = function(inaFilter)
{
	if (oFF.isNull(inaFilter))
	{
		return true;
	}
	let inaSelection = inaFilter.getStructureByKey("Selection");
	if (oFF.isNull(inaSelection))
	{
		inaSelection = inaFilter.getStructureByKey("SetOperand");
		let inaElements;
		if (oFF.isNull(inaSelection))
		{
			inaElements = inaFilter.getListByKey("Elements");
		}
		else
		{
			inaElements = inaSelection.getListByKey("Elements");
		}
		return oFF.PrUtils.isListEmpty(inaElements);
	}
	return inaSelection.getKeysAsReadOnlyList().isEmpty();
};
oFF.QInAFilterExpression.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	let filterExpression = modelComponent;
	if (oFF.isNull(filterExpression))
	{
		return null;
	}
	let inaGlobalCellValueOperands = null;
	if (filterExpression.getModelCapabilities().supportsCellValueOperand())
	{
		inaGlobalCellValueOperands = oFF.QInAFilterExpression.exportGlobalCellValueOperands(exporter, filterExpression);
	}
	let filterRootElement = filterExpression.getFilterRootElement();
	let inaSelection = null;
	if (oFF.notNull(filterRootElement))
	{
		if (filterRootElement.getOlapComponentType() === oFF.FilterComponentType.TUPLE)
		{
			inaSelection = exporter.exportFilterTuple(filterRootElement);
		}
		else if (filterRootElement.getOlapComponentType() === oFF.FilterComponentType.VIRTUAL_DATASOURCE)
		{
			inaSelection = exporter.exportFilterVirtualDatasource(filterRootElement);
		}
		else
		{
			inaSelection = exporter.exportFilterElement(filterRootElement);
		}
		if (oFF.notNull(inaSelection) && !inaSelection.hasElements())
		{
			inaSelection = null;
		}
	}
	let inaStructure = null;
	if (oFF.notNull(inaSelection))
	{
		inaStructure = oFF.PrFactory.createStructure();
		inaStructure.put("Selection", inaSelection);
	}
	if (oFF.notNull(inaGlobalCellValueOperands))
	{
		inaStructure = oFF.QInAFilterExpression.combineSetOperandWithCellValueOperand(inaStructure, inaGlobalCellValueOperands);
	}
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		if (oFF.isNull(inaStructure))
		{
			inaStructure = oFF.PrFactory.createStructure();
		}
		if (filterExpression.getModelCapabilities().supportsCellValueOperand())
		{
			inaStructure.putBoolean("IsSuppressingNulls", filterExpression.isSuppressingNulls());
		}
	}
	if (filterExpression.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter() && filterExpression.getQueryModel() !== null && filterExpression.getQueryModel().getFilter().isVisibilityFilterInitialized() && filterExpression === filterExpression.getQueryModel().getFilter().getVisibilityFilter())
	{
		let dims = filterExpression.getDimensionsForVisibilityFilterOnTotalOthers();
		if (oFF.notNull(dims) && !dims.isEmpty())
		{
			if (oFF.isNull(inaStructure))
			{
				inaStructure = oFF.PrFactory.createStructure();
			}
			let list = oFF.PrFactory.createList();
			list.addAllStrings(filterExpression.getDimensionsForVisibilityFilterOnTotalOthers());
			inaStructure.put("ConsiderVisibilityFilterForOthersTotalsOfDimensions", list);
		}
	}
	return inaStructure;
};
oFF.QInAFilterExpression.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};
oFF.QInAFilterExpression.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_EXPRESSION;
};
oFF.QInAFilterExpression.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = modelComponent;
	if (oFF.isNull(filterExpression))
	{
		filterExpression = oFF.QFactory.createFilterExpression(context, parentComponent);
	}
	let version = 0;
	let inaSelection = null;
	if (oFF.notNull(inaStructure))
	{
		inaSelection = inaStructure.getStructureByKey("Selection");
		if (oFF.isNull(inaSelection))
		{
			inaSelection = inaStructure.getStructureByKey("SelectionRepo");
			version = 1;
		}
	}
	filterExpression.setCartesianProduct(null);
	filterExpression.setComplexRoot(null);
	if (oFF.notNull(inaSelection))
	{
		let filterElement = importer.importFilterElement(inaSelection, null, filterExpression, context);
		if (oFF.notNull(filterElement))
		{
			if (version >= 1)
			{
				filterExpression.setComplexRoot(filterElement);
			}
			else
			{
				let cartesianProduct = oFF.QFilterUtil.convertComplexFilterToCartesian(filterElement);
				if (oFF.notNull(cartesianProduct))
				{
					filterExpression.setCartesianProduct(cartesianProduct);
				}
				else
				{
					filterExpression.setComplexRoot(filterElement);
				}
			}
		}
	}
	if (filterExpression.getModelCapabilities().supportsCellValueOperand())
	{
		filterExpression.setIsSuppressingNulls(false);
		filterExpression.clearCellValueFilter();
		if (oFF.notNull(inaStructure))
		{
			if (importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
			{
				filterExpression.setIsSuppressingNulls(inaStructure.getBooleanByKeyExt("IsSuppressingNulls", false));
			}
			if (oFF.notNull(inaSelection))
			{
				let inaCellValueOperand = inaSelection.getStructureByKey("CellValueOperand");
				if (oFF.isNull(inaCellValueOperand))
				{
					let inaFilterAnd = inaSelection.getStructureByKey("Operator");
					if (oFF.notNull(inaFilterAnd))
					{
						let inaSubSelections = inaFilterAnd.getListByKey("SubSelections");
						if (inaSubSelections.size() === 2)
						{
							let inaSubSelectionStructure = inaSubSelections.getStructureAt(1);
							inaCellValueOperand = inaSubSelectionStructure.getStructureByKey("CellValueOperand");
						}
					}
				}
				if (oFF.notNull(inaCellValueOperand))
				{
					let inaElements = inaCellValueOperand.getListByKey("Elements");
					if (oFF.notNull(inaElements))
					{
						let nullSuppressionReference = oFF.QFilterCellValueOperand.createForNullSuppression(context, null);
						let size = inaElements.size();
						if (size > 0)
						{
							let inaNullSuppression = inaElements.getStructureAt(0);
							let nullSuppression = importer.importFilterCellValueOperand(inaNullSuppression, context);
							let startIdx = 0;
							if (nullSuppression.isEqualTo(nullSuppressionReference))
							{
								filterExpression.setIsSuppressingNulls(true);
								startIdx = 1;
							}
							filterExpression.clearCellValueFilter();
							for (let idx = startIdx; idx < size; idx++)
							{
								let inaCellElement = inaElements.getStructureAt(idx);
								let operand = importer.importFilterCellValueOperand(inaCellElement, context);
								filterExpression.addCellValueFilter(operand);
							}
						}
					}
				}
			}
		}
	}
	if (oFF.notNull(inaStructure) && filterExpression.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter() && filterExpression.getQueryModel() !== null && filterExpression.getQueryModel().getFilter().isVisibilityFilterInitialized() && filterExpression === filterExpression.getQueryModel().getFilter().getVisibilityFilter())
	{
		let dims = inaStructure.getListByKey("ConsiderVisibilityFilterForOthersTotalsOfDimensions");
		if (oFF.notNull(dims) && !dims.isEmpty())
		{
			for (let i = 0; i < dims.size(); i++)
			{
				filterExpression.addDimensionForVisibilityFilterOnTotalOthers(dims.getStringAt(i));
			}
		}
	}
	return filterExpression;
};

oFF.QInAFilterFixed = function() {};
oFF.QInAFilterFixed.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterFixed.prototype._ff_c = "QInAFilterFixed";

oFF.QInAFilterFixed.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filter = modelComponent;
	if (!filter.isFixedFilterInitialized())
	{
		return null;
	}
	let filterExpression = filter.getFixedFilter();
	return exporter.exportFilterExpression(filterExpression);
};
oFF.QInAFilterFixed.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_FIXED;
};
oFF.QInAFilterFixed.prototype.getTagName = function()
{
	return "FixedFilter";
};
oFF.QInAFilterFixed.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	let filter = parentComponent;
	let filterExpression = importer.importFilterExpression(null, inaStructure, filter, context);
	if (oFF.notNull(filter) && oFF.notNull(filterExpression))
	{
		filter.setFixedFilter(filterExpression);
	}
	return filterExpression;
};

oFF.QInAFilterGeo = function() {};
oFF.QInAFilterGeo.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterGeo.prototype._ff_c = "QInAFilterGeo";

oFF.QInAFilterGeo.tryCreateGeometry = function(strValue)
{
	let value = oFF.XGeometryValue.createGeometryValueWithWkt(strValue);
	if (oFF.isNull(value))
	{
		value = oFF.XStringValue.create(strValue);
	}
	return value;
};
oFF.QInAFilterGeo.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let operation = modelComponent;
	let comparisonOperator = operation.getComparisonOperator();
	if (!comparisonOperator.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
	{
		throw oFF.XException.createIllegalStateException("Not a spatial operator");
	}
	inaStructure.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
	let fieldMd = operation.getFieldMetadata();
	inaStructure.putString("FieldName", fieldMd.getName());
	let isMergeProcessingMode = exporter.getMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || exporter.getOriginalMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING;
	let dimensionMetadata = fieldMd.getDimensionMetadata();
	if (isMergeProcessingMode && oFF.notNull(dimensionMetadata))
	{
		if (dimensionMetadata.isMeasureStructure())
		{
			inaStructure.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_MEASURE_STRUCTURE);
		}
		else if (dimensionMetadata.isSecondaryStructure())
		{
			inaStructure.putString(oFF.InAQueryMergeConstants.TAG_KEY, oFF.InAQueryMergeConstants.TAG_FILTER_SECOND_STRUCTURE);
		}
	}
	let geoValue1 = operation.getLow();
	let blendingDataSource = operation.getDataSource();
	if (oFF.isNull(blendingDataSource))
	{
		if (oFF.notNull(geoValue1) && geoValue1.getValue() !== null)
		{
			if (exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && geoValue1.getTagging().containsKey("PersistedQueryPlaceholder"))
			{
				inaStructure.putString("Value1", geoValue1.getTagging().getByKey("PersistedQueryPlaceholder"));
			}
			else
			{
				oFF.QInAValueUtils.exportFilterValue(exporter, "Value1", inaStructure, geoValue1, geoValue1.getValueType());
			}
			if (geoValue1.getValueType().isSpatial())
			{
				let geometry = geoValue1.getGeometry();
				if (oFF.notNull(geometry))
				{
					let srid = geometry.getSrid();
					if (exporter.m_capabilities.supportsSpatialFilterSrid() && oFF.notNull(srid))
					{
						inaStructure.putInteger("SRID", srid.getInteger());
					}
				}
			}
		}
	}
	else
	{
		if (oFF.notNull(geoValue1) && geoValue1.getValue() !== null)
		{
			oFF.QInAValueUtils.exportFilterValue(exporter, "Value1", inaStructure, geoValue1, oFF.XValueType.STRING);
		}
		let inaBlendingDataSource = exporter.exportDataSource(blendingDataSource, false);
		inaStructure.put("DataSource", inaBlendingDataSource);
	}
	let geoValue2 = operation.getHigh();
	if (oFF.notNull(geoValue2) && geoValue2.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value2", inaStructure, geoValue2, oFF.XValueType.STRING);
	}
	let geoValue3 = operation.getThird();
	if (oFF.notNull(geoValue3) && geoValue3.getValue() !== null)
	{
		oFF.QInAValueUtils.exportFilterValue(exporter, "Value3", inaStructure, geoValue3, oFF.XValueType.STRING);
	}
	return inaStructure;
};
oFF.QInAFilterGeo.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.SPATIAL_FILTER;
};
oFF.QInAFilterGeo.prototype.getTagName = function()
{
	return "GeometryOperand";
};
oFF.QInAFilterGeo.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterExpression = parentComponent;
	let fieldAccessor = context.getFieldAccessorSingle();
	let inaComparison = inaStructure.getStringByKey("Comparison");
	let inaFieldName = inaStructure.getStringByKey("FieldName");
	let inaValue1 = inaStructure.getStringByKey("Value1");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaComparison) && oFF.XStringUtils.isNotNullAndNotEmpty(inaFieldName) && oFF.XStringUtils.isNotNullAndNotEmpty(inaValue1))
	{
		let comparison = oFF.QInAConverter.lookupComparison(inaComparison);
		if (oFF.isNull(comparison))
		{
			return null;
		}
		if (!comparison.isTypeOf(oFF.SpatialComparisonOperator._SPATIAL))
		{
			return null;
		}
		let field = fieldAccessor.getFieldByName(inaFieldName);
		if (oFF.isNull(field))
		{
			return null;
		}
		let geoFilter = oFF.QFactory.createFilterOperationWithOperator(filterExpression, field, comparison);
		let firstValue = oFF.QInAFilterGeo.tryCreateGeometry(inaValue1);
		geoFilter.getLow().setValue(firstValue);
		let inaValue2 = inaStructure.getStringByKey("Value2");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue2))
		{
			let secondValue = oFF.QInAFilterGeo.tryCreateGeometry(inaValue2);
			geoFilter.getHigh().setValue(secondValue);
		}
		let inaValue3 = inaStructure.getStringByKey("Value3");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaValue3))
		{
			let thirdValue = oFF.QInAFilterGeo.tryCreateGeometry(inaValue3);
			geoFilter.getThird().setValue(thirdValue);
		}
		return geoFilter;
	}
	return null;
};

oFF.QInAFilterManager = function() {};
oFF.QInAFilterManager.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterManager.prototype._ff_c = "QInAFilterManager";

oFF.QInAFilterManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let inaFilterManager = inaStructure.putNewStructure("OlapFilterManager");
	let inaFilters = inaFilterManager.putNewStructure("OlapFilters");
	let filterManager = modelComponent;
	let filters = filterManager.getFilters();
	let filterNameIt = filters.getKeysAsIterator();
	while (filterNameIt.hasNext())
	{
		let filterName = filterNameIt.next();
		let filterExpression = filters.getByKey(filterName);
		inaFilters.put(filterName, exporter.exportFilterExpression(filterExpression));
	}
	return inaStructure;
};
oFF.QInAFilterManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_FILTER_MANAGER;
};
oFF.QInAFilterManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filterManager = modelComponent;
	if (oFF.isNull(filterManager))
	{
		filterManager = context.getOlapEnv().getFilterManager();
	}
	let inaFilterManager = inaStructure.getStructureByKey("OlapFilterManager");
	let inaFilters = inaFilterManager.getStructureByKey("OlapFilters");
	let filterNameIt = inaFilters.getKeysAsIterator();
	while (filterNameIt.hasNext())
	{
		let filterName = filterNameIt.next();
		let filterExpression = filterManager.getFilterByName(filterName);
		importer.importFilterExpression(filterExpression, inaFilters.getStructureByKey(filterName), filterManager, filterManager.getContext());
	}
	return filterManager;
};

oFF.QInAFilterOperation = function() {};
oFF.QInAFilterOperation.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterOperation.prototype._ff_c = "QInAFilterOperation";

oFF.QInAFilterOperation.exportMemberNavigation = function(memberNavigation, inaLowNavigation)
{
	inaLowNavigation.putString("Function", memberNavigation.getMemberFunction().getName());
	let parameters = memberNavigation.getParameters();
	if (oFF.notNull(parameters))
	{
		let size = parameters.size();
		let inaParameters = inaLowNavigation.putNewList("Parameters");
		for (let i = 0; i < size; i++)
		{
			let parameter = parameters.get(i);
			let inaParameter = inaParameters.addNewStructure();
			let memberNavigationType = parameter.getMemberNavigationType();
			let key = oFF.QInAConverter.lookupMemberNavigationTypeInA(memberNavigationType);
			if (memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_SHIFT || memberNavigationType === oFF.MemberNavigationType.FUNCTION_PARAM_RANGE)
			{
				inaParameter = inaParameter.putNewStructure(key);
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "Level", parameter.getLevelValue());
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "Constant", parameter.getConstantValue());
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "OffsetLow", parameter.getOffSetLow());
				oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, "OffsetHigh", parameter.getOffsetHigh());
			}
			else
			{
				if (!oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getLevelValue()))
				{
					if (!oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getConstantValue()))
					{
						oFF.QInAFilterOperation.setKeyValueForMemberNavigation(inaParameter, key, parameter.getFunctionName());
					}
				}
			}
		}
	}
	let navigations = memberNavigation.getNavigations();
	if (oFF.notNull(navigations))
	{
		let inaParameters2;
		if (inaLowNavigation.containsKey("Parameters"))
		{
			inaParameters2 = inaLowNavigation.getListByKey("Parameters");
		}
		else
		{
			inaParameters2 = inaLowNavigation.putNewList("Parameters");
		}
		let inaParameter2 = inaParameters2.addNewStructure();
		let inaNavigations = inaParameter2.putNewList("Navigations");
		let naviSize = navigations.size();
		for (let idxNavi = 0; idxNavi < naviSize; idxNavi++)
		{
			oFF.QInAFilterOperation.exportMemberNavigation(navigations.get(idxNavi), inaNavigations.addNewStructure());
		}
	}
};
oFF.QInAFilterOperation.exportValue = function(exporter, value, valueType, inaElement, parameterName, parameterIsName, parameterParamName, multiParameterParamName, parameterNavigations)
{
	let filterType = value.getFilterValueType();
	if (filterType === oFF.XValueType.VARIABLE)
	{
		let variableValue = value.getVariableValue();
		if (oFF.notNull(variableValue))
		{
			if (value.isFunctionalVariableValue())
			{
				inaElement.putString(parameterIsName, "FunctionalVariable");
				inaElement.putString(parameterName, variableValue.getName());
				let funcVarParameters = value.getValue().getParameters();
				let funcVarParametersKeys = funcVarParameters.getKeysAsReadOnlyList();
				if (funcVarParametersKeys.size() > 0)
				{
					if (funcVarParametersKeys.size() === 1 && funcVarParametersKeys.get(0).getParameterType() === oFF.FunctionalVariableParameterType.DEFAULT)
					{
						inaElement.putStringNotNullAndNotEmpty(parameterParamName, funcVarParameters.getByKey(funcVarParametersKeys.get(0)).toString());
					}
					else
					{
						let params = inaElement.putNewList(multiParameterParamName);
						oFF.XCollectionUtils.forEach(funcVarParametersKeys, (funcVarParam) => {
							let param = params.addNewStructure();
							param.putString("Param", funcVarParam.getName());
							let paramValue = funcVarParameters.getByKey(funcVarParam).toString();
							if (funcVarParam.getParameterType() === oFF.FunctionalVariableParameterType.VALID_DATE && exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && value.getTagging().containsKey("PersistedQueryPlaceholder"))
							{
								paramValue = value.getTagging().getByKey("PersistedQueryPlaceholder");
							}
							param.putString("Value", paramValue);
						});
					}
				}
			}
			else
			{
				inaElement.putString(parameterIsName, "Variable");
				inaElement.putString(parameterName, variableValue.getName());
			}
		}
	}
	else
	{
		if (value.isManualInput())
		{
			inaElement.putString(parameterIsName, "ManualInput");
		}
		if (filterType === oFF.XValueType.CURRENT_MEMBER)
		{
			inaElement.putString(parameterIsName, "CurrentMember");
		}
		if (filterType === oFF.XValueType.MEMBER_TYPE)
		{
			inaElement.putString(parameterIsName, "MemberType");
		}
		if (exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && value.getTagging().containsKey("PersistedQueryPlaceholder"))
		{
			inaElement.putString(parameterName, value.getTagging().getByKey("PersistedQueryPlaceholder"));
		}
		else
		{
			oFF.QInAValueUtils.exportPlaceholderValue(exporter, parameterName, inaElement, value, valueType, value.getQueryModel());
		}
	}
	if (oFF.notNull(parameterNavigations))
	{
		let memberNavigations = value.getMemberNavigations();
		let memberNavigationSize = memberNavigations.size();
		if (memberNavigationSize > 0)
		{
			let inaLowNavigations = inaElement.putNewList(parameterNavigations);
			for (let mnIdx = 0; mnIdx < memberNavigationSize; mnIdx++)
			{
				oFF.QInAFilterOperation.exportMemberNavigation(memberNavigations.get(mnIdx), inaLowNavigations.addNewStructure());
			}
		}
	}
};
oFF.QInAFilterOperation.importMemberNavigation = function(inaNavigation)
{
	let memberNavigation = oFF.QFactory.createMemberNavigation(oFF.CurrentMemberFunction.lookup(inaNavigation.getStringByKey("Function")));
	if (inaNavigation.containsKey("Parameters"))
	{
		let inaParameters = inaNavigation.getListByKey("Parameters");
		let inaParaSize = inaParameters.size();
		for (let idxPara = 0; idxPara < inaParaSize; idxPara++)
		{
			let inaParameter = inaParameters.getStructureAt(idxPara);
			if (inaParameter.containsKey("Navigations"))
			{
				let inaNavigations = inaParameter.getListByKey("Navigations");
				let inaNaviSize = inaNavigations.size();
				for (let idxNavi = 0; idxNavi < inaNaviSize; idxNavi++)
				{
					memberNavigation.addNavigation(oFF.QInAFilterOperation.importMemberNavigation(inaNavigations.getStructureAt(idxNavi)));
				}
			}
			else
			{
				if (inaParameter.containsKey("Level"))
				{
					let inaLevelValue = inaParameter.getByKey("Level");
					if (inaLevelValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelNumber(inaLevelValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithLevelLiteral(inaLevelValue.getString()));
					}
				}
				else if (inaParameter.containsKey("Member"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithMemberName(inaParameter.getStringByKey("Member")));
				}
				else if (inaParameter.containsKey("NoValuesAboveLevel"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithNoValuesAboveLevel(inaParameter.getStringByKey("NoValuesAboveLevel")));
				}
				else if (inaParameter.containsKey("ErrorAboveLevel"))
				{
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithErrorAboveLevel(inaParameter.getStringByKey("ErrorAboveLevel")));
				}
				else if (inaParameter.containsKey("Shift"))
				{
					let inaShift = inaParameter.getStructureByKey("Shift");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithShift(inaShift.getStringByKey("Level"), inaShift.getIntegerByKey("Constant")));
				}
				else if (inaParameter.containsKey("Range"))
				{
					let inaRange = inaParameter.getStructureByKey("Range");
					memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithRange(inaRange.getStringByKey("Level"), inaRange.getIntegerByKey("OffsetLow"), inaRange.getIntegerByKey("OffsetHigh")));
				}
				else
				{
					let inaConstantValue = inaParameter.getByKey("Constant");
					if (inaConstantValue.isNumeric())
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithIntegerConstant(inaConstantValue.getInteger()));
					}
					else
					{
						memberNavigation.addParameter(oFF.QFactory.createNavigationParameterWithStringConstant(inaConstantValue.getString()));
					}
				}
			}
		}
	}
	return memberNavigation;
};
oFF.QInAFilterOperation.importValue = function(importer, variableContainer, field, value, valueType, inaElement, parameterName, parameterIsName, parameterParamName, multiParameterParamName, parameterNavigations)
{
	let inaValueIs = inaElement.getStringByKey(parameterIsName);
	let filterType = oFF.QInAConverter.lookupValueType(inaValueIs);
	if (filterType === oFF.XValueType.VARIABLE)
	{
		value.setFilterValueType(oFF.XValueType.VARIABLE);
		let variableName = inaElement.getStringByKey(parameterName);
		let variable = variableContainer.getVariables().getByKey(variableName);
		if (oFF.isNull(variable) && oFF.XString.isEqual(inaValueIs, "FunctionalVariable"))
		{
			let varContainer = variableContainer;
			variable = oFF.QFunctionalVariable.createFunctionalVariable(varContainer, varContainer, variableName, null);
			varContainer.addVariable(variable);
		}
		if (oFF.notNull(variable))
		{
			value.setVariableValue(variable);
			if (variable.getVariableType() === oFF.VariableType.FUNCTIONAL_VARIABLE)
			{
				let funcVar = variable;
				if (inaElement.containsKey(parameterParamName))
				{
					let paramValue = inaElement.getStringByKey(parameterParamName);
					if (!oFF.XCollectionUtils.hasElements(funcVar.getParameters()))
					{
						let funcVarParameter = oFF.QFunctionalVariableParameter.createParameter(null, null, oFF.FunctionalVariableParameterType.DEFAULT, oFF.XCollectionUtils.singletonList(oFF.XNameTextObject.create(paramValue, null)), funcVar);
						funcVar.setParameters(oFF.XCollectionUtils.singletonList(funcVarParameter));
					}
					value.setFunctionalVariableValueParameter(funcVar.getParameters().get(0), paramValue);
				}
				else if (inaElement.containsKey(multiParameterParamName))
				{
					let parameterList = oFF.XList.create();
					oFF.XStream.of(inaElement.getListByKey(multiParameterParamName)).forEach((inaParamValuePair) => {
						let inaParamValueStructure = inaParamValuePair.asStructure();
						let paramName = inaParamValueStructure.getStringByKey("Param");
						let paramValue = inaParamValueStructure.getStringByKey("Value");
						let paramWithName = oFF.QFunctionalVariableParameter.createParameter(paramName, paramName, oFF.FunctionalVariableParameterType.lookup(paramName), oFF.XCollectionUtils.singletonList(oFF.XNameTextObject.create(paramValue, null)), funcVar);
						parameterList.add(paramWithName);
						value.setFunctionalVariableValueParameter(paramWithName, paramValue);
					});
					funcVar.setParameters(parameterList);
				}
			}
		}
	}
	else
	{
		if (filterType === oFF.XValueType.CURRENT_MEMBER)
		{
			value.setFilterValueType(filterType);
		}
		if (filterType === oFF.XValueType.MEMBER_TYPE)
		{
			value.setFilterValueType(filterType);
		}
		if (oFF.notNull(parameterNavigations))
		{
			let lowNavigations = inaElement.getListByKey(parameterNavigations);
			if (oFF.notNull(lowNavigations))
			{
				let memberNavigations = value.getMemberNavigations();
				let lowSize = lowNavigations.size();
				for (let lowNaviIdx = 0; lowNaviIdx < lowSize; lowNaviIdx++)
				{
					memberNavigations.add(oFF.QInAFilterOperation.importMemberNavigation(lowNavigations.getStructureAt(lowNaviIdx)));
				}
			}
		}
		oFF.QInAValueUtils.importValue(importer, value, inaElement, parameterName, valueType, field);
	}
};
oFF.QInAFilterOperation.setKeyValueForMemberNavigation = function(inaParameter, key, value)
{
	if (oFF.isNull(value))
	{
		return false;
	}
	if (value.getValueType().isNumber())
	{
		inaParameter.putDouble(key, value.getDouble());
	}
	else
	{
		inaParameter.putString(key, value.toString());
	}
	return true;
};
oFF.QInAFilterOperation.prototype.areVariableAndDimensionFilterSame = function(dimension, variable)
{
	let filterConsideringLinkedFilters = dimension.getFilterConsideringLinkedFilters();
	let dimensionFilter = oFF.XCollectionUtils.hasElements(filterConsideringLinkedFilters) ? filterConsideringLinkedFilters.get(0) : null;
	let variableFilter = variable.getMemberFilter();
	if (oFF.isNull(dimensionFilter) && oFF.isNull(variableFilter))
	{
		return true;
	}
	if (oFF.isNull(dimensionFilter) && oFF.notNull(variableFilter) || oFF.notNull(dimensionFilter) && oFF.isNull(variableFilter))
	{
		return false;
	}
	let dimensionFilterField = oFF.notNull(dimensionFilter) ? dimensionFilter.getFieldMetadata().getName() : null;
	let variableFilterField = oFF.notNull(variableFilter) ? variableFilter.getFieldMetadata().getName() : null;
	if (!oFF.XString.isEqual(dimensionFilterField, variableFilterField))
	{
		return false;
	}
	let dimensionFilterMemberNames = dimensionFilter.getMemberNamesFromFilter(dimension.getName());
	let variableFilterMemberNames = variableFilter.getMemberNamesFromFilter(variable.getDimension().getName());
	return oFF.XObjectExt.areEqual(dimensionFilterMemberNames, variableFilterMemberNames);
};
oFF.QInAFilterOperation.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filterOperation = modelComponent;
	let fieldMd = filterOperation.getFieldMetadata();
	let fieldName = oFF.notNull(fieldMd) ? fieldMd.getName() : filterOperation.getFieldName();
	if (oFF.isNull(fieldMd) && oFF.XStringUtils.isNullOrEmpty(fieldName))
	{
		return inaStructure;
	}
	let comparisonOperator = filterOperation.getComparisonOperator();
	if (oFF.isNull(comparisonOperator))
	{
		comparisonOperator = oFF.ComparisonOperator.EQUAL;
	}
	let fieldValueType = oFF.notNull(fieldMd) ? fieldMd.getValueType() : oFF.XValueType.STRING;
	if (comparisonOperator.isTypeOf(oFF.ComparisonOperator.LIKE) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.NOT_MATCH))
	{
		fieldValueType = oFF.XValueType.STRING;
	}
	let context = filterOperation.getContext();
	let comparison;
	let isAbap = oFF.notNull(context) ? exporter.isAbap(context) : false;
	let isHana = oFF.notNull(context) ? exporter.isHana(context) : false;
	if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isAbap)
	{
		comparison = "NOTBETWEEN";
	}
	else
	{
		comparison = oFF.QInAConverter.lookupComparisonInA(comparisonOperator);
	}
	inaStructure.putString("Comparison", comparison);
	if (filterOperation.hasLevelOffset())
	{
		inaStructure.putInteger("LevelOffset", filterOperation.getLevelOffset());
	}
	if (filterOperation.hasDepth())
	{
		inaStructure.putInteger("Depth", filterOperation.getDepth());
	}
	if (filterOperation.getSetSign() === oFF.SetSign.EXCLUDING)
	{
		inaStructure.putBoolean("IsExcluding", true);
	}
	let hierarchyName = filterOperation.getHierarchyName();
	if (!isHana && oFF.notNull(hierarchyName))
	{
		let filterExpr = filterOperation.getFilterExpression() !== null ? filterOperation.getFilterExpression() : filterOperation.getParent().getFilterExpression();
		oFF.QInAHierarchy.exportHierarchyForFilter(exporter, isAbap, inaStructure, null, filterExpr, filterOperation.getQueryManager(), fieldName, hierarchyName, filterOperation.getHierarchyDueDate(), filterOperation.getHierarchyVersion());
	}
	if (exporter.m_capabilities.supportsConvertToFlatFilter() && filterOperation.isConvertToFlatFilter())
	{
		inaStructure.putBoolean("ConvertToFlatSelection", true);
	}
	let numberOfParameters = comparisonOperator.getNumberOfParameters();
	if (numberOfParameters >= 1)
	{
		let low = this.getValue(exporter, filterOperation.getLow(), filterOperation, fieldMd);
		oFF.QInAFilterOperation.exportValue(exporter, low, fieldValueType, inaStructure, "Low", "LowIs", "LowParam", "LowParams", "LowNavigations");
		if (numberOfParameters >= 2)
		{
			let high = this.getValue(exporter, filterOperation.getHigh(), filterOperation, fieldMd);
			oFF.QInAFilterOperation.exportValue(exporter, high, fieldValueType, inaStructure, "High", "HighIs", "HighParam", "HighParams", null);
		}
		if (numberOfParameters >= 3)
		{
			let third = this.getValue(exporter, filterOperation.getThird(), filterOperation, fieldMd);
			oFF.QInAFilterOperation.exportValue(exporter, third, fieldValueType, inaStructure, "Value3", "Value3Is", "Value3Param", null, null);
		}
	}
	return inaStructure;
};
oFF.QInAFilterOperation.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.OPERATION;
};
oFF.QInAFilterOperation.prototype.getValue = function(exporter, value, filterOperation, fieldMd)
{
	if (exporter.getMode() !== oFF.QModelFormat.INA_PERSISTED_QUERY_DATA)
	{
		return value;
	}
	let valueToReturn = value;
	let queryManager = filterOperation.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		let variableManager = queryManager.getVariableContainer();
		let dimensionName = fieldMd.getDimensionMetadata().getName();
		let variableOpt = oFF.XStream.of(variableManager.getVariablesAffectingDynamicFilter()).filter((var1) => {
			return var1.isEnforcedDynamicValue();
		}).find((_var) => {
			return oFF.XString.isEqual(_var.getDimension().getName(), dimensionName);
		});
		if (variableOpt.isPresent())
		{
			let variable = variableOpt.get();
			let same = this.areVariableAndDimensionFilterSame(filterOperation.getQueryModel().getDimensionByName(dimensionName), variable);
			let variableProcessor = queryManager.getVariableProcessor();
			let overwriteFilterOpValWithVarReference = queryManager.getModelCapabilities().supportsPersistedInA() && !variableProcessor.isUsingSavedPromptsForExitVariables();
			if (same && overwriteFilterOpValWithVarReference)
			{
				valueToReturn = oFF.QFactory.createFilterValueBag(filterOperation.getContext(), filterOperation.getFilterExpression(), filterOperation);
				valueToReturn.setFilterValueType(oFF.XValueType.VARIABLE);
				valueToReturn.setVariableValue(variable);
			}
		}
	}
	return valueToReturn;
};
oFF.QInAFilterOperation.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let inaComparison = inaStructure.getStringByKeyExt("Comparison", "=");
	let comparisonOperator = oFF.QInAConverter.lookupComparison(inaComparison);
	if (oFF.isNull(comparisonOperator))
	{
		importer.addError(oFF.ErrorCodes.INVALID_OPERATOR, oFF.XStringUtils.concatenate2("Unsupported comparison operator: ", inaComparison));
		return null;
	}
	let cartesianList = parentComponent;
	let filterExpression = cartesianList.getFilterExpression();
	let field = cartesianList.getField();
	let filterOperation = oFF.QFactory.createFilterOperationWithOperator(filterExpression, field, comparisonOperator);
	let fieldValueType = field.getValueType();
	let isFuzzyOperator = comparisonOperator.isTypeOf(oFF.ComparisonOperator.LIKE) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.MATCH) || comparisonOperator.isTypeOf(oFF.ComparisonOperator.NOT_MATCH);
	if (isFuzzyOperator)
	{
		fieldValueType = oFF.XValueType.STRING;
	}
	if (inaStructure.getBooleanByKeyExt("IsExcluding", false))
	{
		filterOperation.setSetSign(oFF.SetSign.EXCLUDING);
	}
	else
	{
		filterOperation.setSetSign(oFF.SetSign.INCLUDING);
	}
	filterOperation.resetDepth();
	let depth = inaStructure.getIntegerByKeyExt("Depth", -1);
	if (depth !== -1)
	{
		filterOperation.setDepth(depth);
	}
	filterOperation.resetLevelOffset();
	let levelOffset = inaStructure.getIntegerByKeyExt("LevelOffset", -1);
	if (levelOffset !== -1)
	{
		filterOperation.setLevelOffset(levelOffset);
	}
	let hierarchyStructure = inaStructure.getStructureByKey("Hierarchy");
	if (oFF.notNull(hierarchyStructure))
	{
		let hierarchyName = hierarchyStructure.getStringByKey("Name");
		let hierarchyDueDate = null;
		let hierarchyVersion = null;
		let queryModel = filterOperation.getQueryModel();
		if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER) && oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP))
		{
			let hierarchyDueDateValue = hierarchyStructure.getStringByKey("DueDate");
			if (oFF.notNull(hierarchyDueDateValue))
			{
				hierarchyDueDate = oFF.XDate.createDateFromSAPFormat(hierarchyDueDateValue);
			}
			hierarchyVersion = hierarchyStructure.getStringByKey("Version");
		}
		filterOperation.setHierarchyInfo(hierarchyName, hierarchyDueDate, hierarchyVersion);
	}
	if (importer.m_capabilities.supportsConvertToFlatFilter())
	{
		filterOperation.setConvertToFlatFilter(inaStructure.getBooleanByKeyExt("ConvertToFlatSelection", false));
	}
	let supplementFieldNames = cartesianList.getSupplementFieldNames();
	let variableContainer = context.getVariableContainer();
	let numberOfParameters = comparisonOperator.getNumberOfParameters();
	if (numberOfParameters >= 1)
	{
		let low = filterOperation.getLow();
		oFF.QInAFilterOperation.importValue(importer, variableContainer, field, low, fieldValueType, inaStructure, "Low", "LowIs", "LowParam", "LowParams", "LowNavigations");
		oFF.QInAValueUtils.importSupplements(importer, low, inaStructure, "LowSupplements", supplementFieldNames);
		oFF.QInAValueUtils.importValueCompounds(importer, low, inaStructure, "LowComponents");
	}
	if (numberOfParameters >= 2)
	{
		let high = filterOperation.getHigh();
		oFF.QInAFilterOperation.importValue(importer, variableContainer, field, high, fieldValueType, inaStructure, "High", "HighIs", "HighParam", "HighParams", null);
		oFF.QInAValueUtils.importSupplements(importer, high, inaStructure, "HighSupplements", supplementFieldNames);
		oFF.QInAValueUtils.importValueCompounds(importer, high, inaStructure, "HighComponents");
	}
	if (numberOfParameters >= 3)
	{
		let third = filterOperation.getThird();
		oFF.QInAFilterOperation.importValue(importer, variableContainer, field, third, fieldValueType, inaStructure, "Value3", "Value3Is", "Value3Param", null, null);
		oFF.QInAValueUtils.importSupplements(importer, third, inaStructure, null, supplementFieldNames);
		oFF.QInAValueUtils.importValueCompounds(importer, third, inaStructure, null);
	}
	return filterOperation;
};

oFF.QInAFilterTuple = function() {};
oFF.QInAFilterTuple.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterTuple.prototype._ff_c = "QInAFilterTuple";

oFF.QInAFilterTuple.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let tupleDetailContainer = modelComponent;
	let inaInnerElement = oFF.PrFactory.createStructure();
	inaInnerElement.putString("Code", "And");
	let inaSubSelectionsTuples = inaInnerElement.putNewList("SubSelections");
	let tupleStructureInSubSelections = inaSubSelectionsTuples.addNewStructure();
	let tuplesOperandStructure = tupleStructureInSubSelections.putNewStructure("TuplesOperand");
	let fieldNames = tupleDetailContainer.getFieldNames();
	if (tupleDetailContainer.hasTuples())
	{
		let tuplesInInA = tuplesOperandStructure.putNewList("Tuples");
		let tuples = tupleDetailContainer.getTuples();
		for (let l = 0; l < tuples.size(); l++)
		{
			let singleTupleCondition = tuples.get(l);
			let tuplesData = tuplesInInA.addNewList();
			for (let j = 0; j < fieldNames.size(); j++)
			{
				tuplesData.addString(singleTupleCondition.get(j));
			}
		}
	}
	if (tupleDetailContainer.hasDataSourceColumns())
	{
		let sourceColumns = tupleDetailContainer.getSourceColumns();
		let dataSource = tupleDetailContainer.getDataSourceForColumns();
		if (oFF.isNull(dataSource) || sourceColumns.size() !== fieldNames.size())
		{
			throw oFF.XException.createIllegalArgumentException("TuplesOperandFromDataSource: DataSource must be given and the number of sourceColumns must be the same as the number of FieldNames.");
		}
		let sourceColumnsInInA = tuplesOperandStructure.putNewList("SourceColumns");
		sourceColumnsInInA.addAllStrings(sourceColumns);
		let dataSourceStructure = exporter.exportDataSource(dataSource, false);
		tuplesOperandStructure.putIfNotNull("DataSource", dataSourceStructure);
	}
	let fieldNamesInInA = tuplesOperandStructure.putNewList("FieldNames");
	fieldNamesInInA.addAllStrings(fieldNames);
	inaStructure.put("Operator", inaInnerElement);
	return inaStructure;
};
oFF.QInAFilterTuple.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.TUPLE;
};
oFF.QInAFilterTuple.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInAFilterVirtualDatasource = function() {};
oFF.QInAFilterVirtualDatasource.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFilterVirtualDatasource.prototype._ff_c = "QInAFilterVirtualDatasource";

oFF.QInAFilterVirtualDatasource.prototype.createMemberOperand = function(level, value)
{
	let schemaInA = oFF.PrFactory.createStructure();
	schemaInA.putString("AttributeName", level);
	let comparison = oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL);
	schemaInA.putString("Comparison", comparison);
	schemaInA.putString("Value", value);
	let schemaOperandElement = oFF.PrFactory.createStructure();
	schemaOperandElement.put("MemberOperand", schemaInA);
	return schemaOperandElement;
};
oFF.QInAFilterVirtualDatasource.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let virtualDSFilter = modelComponent;
	let inaInnerElement = oFF.PrFactory.createStructure();
	inaInnerElement.putString("Code", "And");
	let vdsSubSelections = inaInnerElement.putNewList("SubSelections");
	let schemaOperandElement = this.createMemberOperand("SchemaName", virtualDSFilter.getSchemaName());
	let packageOperandElement = this.createMemberOperand("PackageName", virtualDSFilter.getPackageName());
	let objectOperandElement = this.createMemberOperand("ObjectName", virtualDSFilter.getObjectName());
	vdsSubSelections.add(schemaOperandElement);
	vdsSubSelections.add(packageOperandElement);
	vdsSubSelections.add(objectOperandElement);
	if (exporter.m_capabilities.supportsVirtualDataSourceTypeColumns())
	{
		let typeOperandElement = this.createMemberOperand("Type", virtualDSFilter.getTypeName());
		vdsSubSelections.add(typeOperandElement);
	}
	inaStructure.put("Operator", inaInnerElement);
	return inaStructure;
};
oFF.QInAFilterVirtualDatasource.prototype.getComponentType = function()
{
	return oFF.FilterComponentType.VIRTUAL_DATASOURCE;
};
oFF.QInAFilterVirtualDatasource.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInAFormulaMeasure = function() {};
oFF.QInAFormulaMeasure.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAFormulaMeasure.prototype._ff_c = "QInAFormulaMeasure";

oFF.QInAFormulaMeasure.exportFormulaConstantValue = function(exporter, constStructure, fic, context)
{
	let valueIsNull = fic.getValue() === null && !oFF.XCollectionUtils.hasElements(fic.getStringValues());
	let variable = fic.getVariable();
	if (valueIsNull && oFF.isNull(variable))
	{
		constStructure.putNull("Value");
	}
	let valueType = fic.getValueType();
	if (valueType === oFF.XValueType.INTEGER)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putInteger("Value", fic.getInteger());
		}
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putDouble("Value", fic.getDouble());
		}
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		constStructure.putString("ValueType", "Number");
		if (!valueIsNull)
		{
			constStructure.putLong("Value", fic.getLong());
		}
	}
	else if (valueType === oFF.XValueType.STRING)
	{
		constStructure.putString("ValueType", "String");
		if (exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && fic.getTagging().containsKey("PersistedQueryPlaceholder"))
		{
			constStructure.putString("Value", fic.getTagging().getByKey("PersistedQueryPlaceholder"));
		}
		else if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getString());
		}
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		constStructure.putString("ValueType", "Bool");
		if (!valueIsNull)
		{
			constStructure.putBoolean("Value", fic.getBoolean());
		}
	}
	else if (valueType === oFF.XValueType.DATE)
	{
		constStructure.putString("ValueType", "Date");
		if (exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && fic.getTagging().containsKey("PersistedQueryPlaceholder"))
		{
			constStructure.putString("Value", fic.getTagging().getByKey("PersistedQueryPlaceholder"));
		}
		else if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getDate().toString());
		}
	}
	else if (valueType === oFF.XValueType.DATE_TIME)
	{
		let timestampAsValueType = exporter.isAbap(context) ? "Date" : "Timestamp";
		let inaValueType = exporter.m_mode === oFF.QModelFormat.INA_DATA || exporter.m_mode === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING || exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA || exporter.m_mode === oFF.QModelFormat.INA_DATA_BLENDING_SOURCE ? timestampAsValueType : "DateTime";
		constStructure.putString("ValueType", inaValueType);
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getDateTime().toString());
		}
	}
	else if (valueType === oFF.XValueType.TIME)
	{
		constStructure.putString("ValueType", "Time");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getTime().toString());
		}
	}
	else if (valueType.isSpatial())
	{
		constStructure.putString("ValueType", "String");
		if (!valueIsNull)
		{
			constStructure.putString("Value", fic.getGeometry().toWKT());
		}
	}
	else if (valueType === oFF.XValueType.TIMESPAN)
	{
		constStructure.putString("ValueType", "String");
		if (!valueIsNull)
		{
			let timeSpanValue = fic.getTimeSpan();
			constStructure.putString("Value", timeSpanValue.toString());
		}
	}
	else if (valueType === oFF.XValueType.VARIABLE)
	{
		oFF.QInAExportUtil.setNameIfNotNull(constStructure, "Value", variable);
		constStructure.putString("ValueIs", "Variable");
	}
	else if (valueType === oFF.XValueType.STRING_ARRAY)
	{
		constStructure.putString("ValueType", "StringArray");
		if (!valueIsNull)
		{
			let stringValues = fic.getStringValues();
			let values = constStructure.putNewList("Value");
			for (let i = 0; i < stringValues.size(); i++)
			{
				values.addString(stringValues.get(i).getString());
			}
		}
	}
};
oFF.QInAFormulaMeasure.exportFormulaItem = function(exporter, formulaItem, inaFormula, context)
{
	oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, formulaItem, inaFormula, context, false, false, null);
};
oFF.QInAFormulaMeasure.exportFormulaItemSignFlip = function(exporter, formulaItem, inaFormula, context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName)
{
	if (oFF.notNull(formulaItem))
	{
		let componentType = formulaItem.getComponentType();
		if (componentType === oFF.OlapComponentType.FORMULA_CONSTANT)
		{
			let fic = formulaItem;
			let constStructure = inaFormula.putNewStructure("Constant");
			let ficUnit = fic.getUnit();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(ficUnit))
			{
				constStructure.putString("Unit", ficUnit);
			}
			let ficCurrency = fic.getCurrency();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(ficCurrency))
			{
				constStructure.putString("Currency", ficCurrency);
			}
			oFF.QInAFormulaMeasure.exportFormulaConstantValue(exporter, constStructure, fic, context);
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_OPERATION)
		{
			let fio = formulaItem;
			let opStructure = inaFormula.putNewStructure("Function");
			opStructure.putString("Name", fio.getOperator().getDisplayString());
			let parameters = opStructure.putNewList("Parameters");
			oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, fio.getLeftSide(), parameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName);
			oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, fio.getRightSide(), parameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName);
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_FUNCTION)
		{
			let fif = formulaItem;
			if (autoSignFlip && fif.requiresExternalSignFlip() && oFF.QInAFormulaMeasure.hasAccountsToSignFlip(context, fif))
			{
				let signedFlipFunction = oFF.QInAFormulaMeasure.signFlipFunction(formulaItem);
				oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, signedFlipFunction, inaFormula, context, false, false, selfReferenceName);
			}
			else
			{
				let funcStructure = inaFormula.putNewStructure("Function");
				funcStructure.putString("Name", fif.getFunctionName());
				let funcParameters = funcStructure.putNewList("Parameters");
				let functionSize = fif.size();
				for (let i = 0; i < functionSize; i++)
				{
					oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, fif.get(i), funcParameters.addNewStructure(), context, autoSignFlip, autoSignFlipForRMOnly, selfReferenceName);
				}
				let solveOrder = fif.getSolveOrder();
				if (solveOrder !== 0)
				{
					inaFormula.putInteger("SolveOrder", solveOrder);
				}
			}
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
		{
			let fim = formulaItem;
			let queryModel = context.getQueryModel();
			let memberVariable = fim.getVariable();
			let memberStructure;
			if (oFF.isNull(memberVariable))
			{
				memberStructure = oFF.PrFactory.createStructure();
				let memberName;
				if (exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && fim.getTagging().containsKey("PersistedQueryPlaceholder"))
				{
					memberName = fim.getTagging().getByKey("PersistedQueryPlaceholder");
				}
				else
				{
					memberName = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, fim.getMemberName(), exporter);
				}
				memberStructure.putStringNotNull("Name", memberName);
				if (fim.isBooked())
				{
					memberStructure.putString("NameIs", "Booked");
					memberStructure.putStringNotNull("Name", selfReferenceName);
				}
				else if (fim.isPrevious())
				{
					memberStructure.putString("NameIs", "Previous");
					memberStructure.putStringNotNull("Name", selfReferenceName);
				}
				if (autoSignFlip)
				{
					let functionStructure = oFF.QInAFormulaMeasure.exportMemberWithSignFlip(exporter, fim, context, autoSignFlipForRMOnly);
					if (oFF.notNull(functionStructure))
					{
						inaFormula.put("Function", functionStructure.getByKey("Function"));
					}
					else
					{
						inaFormula.put("Member", memberStructure);
					}
				}
				else
				{
					inaFormula.put("Member", memberStructure);
				}
			}
			else
			{
				memberStructure = inaFormula.putNewStructure("Member");
				memberStructure.putString("Name", memberVariable.getName());
				memberStructure.putString("NameIs", "Variable");
			}
			memberStructure.putStringNotNull("Dimension", fim.getDimensionName());
		}
		else if (componentType === oFF.OlapComponentType.FORMULA_ITEM_ATTRIBUTE)
		{
			let fia = formulaItem;
			let inaAttributeValue = inaFormula.putNewStructure("AttributeValue");
			inaAttributeValue.putString("Name", fia.getFieldName());
		}
	}
};
oFF.QInAFormulaMeasure.exportFormulaMeasure = function(exporter, formulaMeasure, inaFormula)
{
	oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, formulaMeasure.getFormula(), inaFormula, formulaMeasure.getQueryModel(), formulaMeasure.isAutoSignFlip(), formulaMeasure.isAutoSignFlipRestrictedMeasureOnly(), formulaMeasure.getName());
};
oFF.QInAFormulaMeasure.exportMemberWithSignFlip = function(exporter, formulaItemMember, context, autoSignFlipForRMOnly)
{
	let queryModel = context.getQueryModel();
	if (oFF.notNull(queryModel) && exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		let memberStructure = oFF.PrFactory.createStructure();
		if (queryModel.getSystemType().isTypeOf(oFF.SystemType.BW))
		{
			let measureStructure = queryModel.getMeasureDimension();
			let member = measureStructure.getStructureMember(formulaItemMember.getMemberName());
			if (oFF.notNull(member))
			{
				let dataCell = null;
				let queryDataCells;
				if (member.getComponentType() === oFF.MemberType.BASIC_MEASURE)
				{
					queryDataCells = member.getQueryDataCells();
					if (oFF.XCollectionUtils.hasElements(queryDataCells))
					{
						dataCell = queryDataCells.get(0);
					}
				}
				else if (member.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE)
				{
					let memberName = member.getMemberForSignFlip(context);
					if (oFF.notNull(memberName))
					{
						let restrictedMember = measureStructure.getStructureMember(memberName);
						if (oFF.notNull(restrictedMember))
						{
							queryDataCells = restrictedMember.getQueryDataCells();
							if (oFF.XCollectionUtils.hasElements(queryDataCells))
							{
								dataCell = queryDataCells.get(0);
							}
						}
					}
				}
				if (oFF.notNull(dataCell) && dataCell.hasSignReversal())
				{
					oFF.QInAFormulaMeasure.exportFormulaItem(exporter, oFF.QInAFormulaMeasure.signFlipMember(formulaItemMember), memberStructure, context);
					return memberStructure;
				}
			}
		}
		else
		{
			let accountDim = queryModel.getAccountDimension();
			if (oFF.notNull(accountDim))
			{
				let accountMember = accountDim.getStructureMemberByAliasOrMember(formulaItemMember.getMemberName());
				if (oFF.notNull(accountMember) && accountMember.getComponentType() !== oFF.MemberType.RESTRICTED_MEASURE && autoSignFlipForRMOnly)
				{
					return null;
				}
				if (oFF.notNull(accountMember) && accountMember.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE)
				{
					if (accountMember.isModelDefinedMember() && autoSignFlipForRMOnly)
					{
						return null;
					}
					accountMember = accountDim.getStructureMemberByAliasOrMember(accountMember.getMemberForSignFlip(context));
				}
				if (oFF.notNull(accountMember))
				{
					let accountType = accountMember.getAccountType();
					if (accountType === oFF.AccountType.INC || accountType === oFF.AccountType.LEQ)
					{
						if (formulaItemMember.getParent() !== null)
						{
							let componentType = formulaItemMember.getParent().getComponentType();
							if (!(componentType === oFF.OlapComponentType.FORMULA_FUNCTION && oFF.XString.isEqual(formulaItemMember.getParent().getFunctionName(), oFF.FormulaOperator.MEMBER_SELECT.getName())))
							{
								oFF.QInAFormulaMeasure.exportFormulaItem(exporter, oFF.QInAFormulaMeasure.signFlipMember(formulaItemMember), memberStructure, context);
								return memberStructure;
							}
						}
						else
						{
							oFF.QInAFormulaMeasure.exportFormulaItem(exporter, oFF.QInAFormulaMeasure.signFlipMember(formulaItemMember), memberStructure, context);
							return memberStructure;
						}
					}
				}
			}
		}
	}
	return null;
};
oFF.QInAFormulaMeasure.hasAccountsToSignFlip = function(context, formulaItemFunction)
{
	if (context.getQueryModel().getAccountDimension() === null)
	{
		return false;
	}
	return oFF.XStream.of(formulaItemFunction).anyMatch((item) => {
		return item.getComponentType() === oFF.OlapComponentType.FORMULA_ITEM_MEMBER && oFF.QInAFormulaMeasure.isSignFlipNeeded(context, item);
	});
};
oFF.QInAFormulaMeasure.importFormulaMeasure = function(importer, dimension, inaFormula, formulaItemx, context)
{
	if (oFF.isNull(inaFormula))
	{
		return null;
	}
	let inaFunction = inaFormula.getStructureByKey("Function");
	let formulaItem = formulaItemx;
	if (oFF.notNull(inaFunction))
	{
		let functionName = inaFunction.getStringByKey("Name");
		let functionParameters = inaFunction.getListByKey("Parameters");
		let newFormulaFunction = oFF.QFactory.createFormulaFunction(context);
		if (oFF.notNull(functionParameters))
		{
			newFormulaFunction.setFunctionName(functionName);
			let paramSize = functionParameters.size();
			for (let paraIdx = 0; paraIdx < paramSize; paraIdx++)
			{
				oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, functionParameters.getStructureAt(paraIdx), newFormulaFunction, context);
			}
		}
		newFormulaFunction.setSolveOrder(inaFormula.getIntegerByKeyExt("SolveOrder", 0));
		if (oFF.isNull(formulaItem))
		{
			formulaItem = newFormulaFunction;
		}
		else
		{
			formulaItem.add(newFormulaFunction);
			newFormulaFunction.setParent(formulaItem);
		}
	}
	else
	{
		let constPara = inaFormula.getStructureByKey("Constant");
		if (oFF.notNull(constPara))
		{
			let formulaConstant = oFF.QFactory.createFormulaConstant(context);
			if (oFF.XString.isEqual("Variable", constPara.getStringByKey("ValueIs")))
			{
				let value = constPara.getStringByKey("Value");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(value))
				{
					let variableManager = dimension.getQueryModel().getVariableManager();
					formulaConstant.setVariable(variableManager.getVariables().getByKey(value));
				}
				if (oFF.isNull(formulaItem))
				{
					formulaItem = formulaConstant;
				}
				else
				{
					formulaItem.add(formulaConstant);
					formulaConstant.setParent(formulaItem);
				}
			}
			else
			{
				let valueTypePara = constPara.getStringByKey("ValueType");
				let valueIsNull = !constPara.containsKey("Value") || constPara.getElementTypeByKey("Value") === oFF.PrElementType.THE_NULL;
				if (oFF.XString.isEqual(valueTypePara, "Number"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.DOUBLE);
					}
					else
					{
						formulaConstant.setDouble(constPara.getDoubleByKey("Value"));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "String"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.STRING);
					}
					else
					{
						formulaConstant.setString(constPara.getStringByKey("Value"));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "Bool"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.BOOLEAN);
					}
					else
					{
						formulaConstant.setBoolean(constPara.getBooleanByKey("Value"));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "DateTime") || oFF.XString.isEqual(valueTypePara, "Timestamp"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.DATE_TIME);
					}
					else
					{
						formulaConstant.setDateTime(oFF.XDateTime.createDateTimeFromStringWithFlag(constPara.getStringByKey("Value"), false));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "Date"))
				{
					if (valueIsNull)
					{
						formulaConstant.setNullByType(oFF.XValueType.DATE);
					}
					else
					{
						formulaConstant.setDate(oFF.XDate.createDateFromStringWithFlag(constPara.getStringByKey("Value"), false));
					}
				}
				else if (oFF.XString.isEqual(valueTypePara, "StringArray"))
				{
					let stringValues = constPara.getListByKey("Value");
					let asListOfString = oFF.PrUtils.asListOfString(stringValues);
					formulaConstant.setStringValues(asListOfString);
				}
				else
				{
					importer.addError(oFF.ErrorCodes.INVALID_TOKEN, "Constant value type is not supported");
					return null;
				}
				let constUnit = constPara.getStringByKey("Unit");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(constUnit))
				{
					formulaConstant.setUnit(constUnit);
				}
				let constCurrency = constPara.getStringByKey("Currency");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(constCurrency))
				{
					formulaConstant.setCurrency(constCurrency);
				}
				if (oFF.isNull(formulaItem))
				{
					formulaItem = formulaConstant;
				}
				else
				{
					formulaItem.add(formulaConstant);
					formulaConstant.setParent(formulaItem);
				}
			}
		}
		else
		{
			let memberPara = inaFormula.getStructureByKey("Member");
			if (oFF.notNull(memberPara))
			{
				let formulaMember = oFF.QFactory.createFormulaMember(context);
				let memberParaName = memberPara.getStringByKey("Name");
				formulaMember.setMemberName(memberParaName);
				formulaMember.setDimensionName(memberPara.getStringByKey("Dimension"));
				let nameIs = memberPara.getStringByKey("NameIs");
				if (oFF.XString.isEqual(nameIs, "Booked"))
				{
					formulaMember.setBooked();
				}
				else if (oFF.XString.isEqual(nameIs, "Previous"))
				{
					formulaMember.setPrevious();
				}
				else if (oFF.XString.isEqual(nameIs, "Variable"))
				{
					let variable = formulaMember.getQueryModel().getVariable(memberParaName);
					if (oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
					{
						formulaMember.setVariable(variable);
					}
				}
				if (oFF.isNull(formulaItem))
				{
					formulaItem = formulaMember;
				}
				else
				{
					formulaItem.add(formulaMember);
					formulaMember.setParent(formulaItem);
				}
			}
			else
			{
				let attribute = inaFormula.getStructureByKey("AttributeValue");
				if (oFF.notNull(attribute))
				{
					let attributeName = attribute.getStringByKey("Name");
					let formulaAttribute = oFF.QFactory.createFormulaAttributeWithName(context, attributeName);
					if (oFF.isNull(formulaItem))
					{
						formulaItem = formulaAttribute;
					}
					else
					{
						formulaItem.add(formulaAttribute);
						formulaAttribute.setParent(formulaItem);
					}
				}
			}
		}
	}
	return formulaItem;
};
oFF.QInAFormulaMeasure.importNameAndText = function(inaStructure, member, dimension)
{
	let newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	let newMemberText = oFF.QInAMember.getText(inaStructure, dimension);
	if (oFF.XStringUtils.isNullOrEmpty(newMemberName) && oFF.XStringUtils.isNullOrEmpty(newMemberText))
	{
		newMemberName = inaStructure.getStringByKey("Name");
		newMemberText = inaStructure.getStringByKey("Description");
	}
	member.setName(newMemberName);
	member.setText(newMemberText);
};
oFF.QInAFormulaMeasure.isSignFlipNeeded = function(context, formulaItemMember)
{
	let queryModel = context.getQueryModel();
	let accountDim = queryModel.getAccountDimension();
	if (oFF.isNull(accountDim))
	{
		return false;
	}
	let accountMember = accountDim.getStructureMemberByAliasOrMember(formulaItemMember.getMemberName());
	if (oFF.isNull(accountMember))
	{
		return false;
	}
	return accountMember.getAccountType() === oFF.AccountType.INC || accountMember.getAccountType() === oFF.AccountType.LEQ;
};
oFF.QInAFormulaMeasure.signFlipFunction = function(formulaItemFunction)
{
	return oFF.QInAFormulaMeasure.signFlipMember(formulaItemFunction);
};
oFF.QInAFormulaMeasure.signFlipMember = function(formulaItemMember)
{
	let context = formulaItemMember.getContext();
	let op = oFF.QFactory.createFormulaOperation(context);
	op.setOperator(oFF.MathOperator.MULT);
	op.setLeftSide(oFF.QFactory.createFormulaConstantWithIntValue(context, -1));
	op.setRightSide(formulaItemMember);
	return op;
};
oFF.QInAFormulaMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.FORMULA;
};

oFF.QInAGenericComponent = function() {};
oFF.QInAGenericComponent.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAGenericComponent.prototype._ff_c = "QInAGenericComponent";

oFF.QInAGenericComponent.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let modelComponent2 = modelComponent;
	inaStructure.putString("Name", modelComponent2.getName());
	inaStructure.putString("Type", modelComponent.getComponentType().getName());
	return inaStructure;
};
oFF.QInAGenericComponent.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP;
};
oFF.QInAGenericComponent.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};

oFF.QInAHierarchy = function() {};
oFF.QInAHierarchy.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAHierarchy.prototype._ff_c = "QInAHierarchy";

oFF.QInAHierarchy.appendItemsToCatalogResult = function(catalogResult, hierarchiesList, dimensionName)
{
	let len = oFF.PrUtils.getListSize(hierarchiesList, 0);
	for (let i = 0; i < len; i++)
	{
		let hierarchyStructure = oFF.PrUtils.getStructureElement(hierarchiesList, i);
		let item = oFF.HierarchyCatalogItem.createCatalogItem();
		item.setDimensionName(dimensionName);
		let hierarchyName;
		if (hierarchyStructure.hasStringByKey("Name"))
		{
			hierarchyName = hierarchyStructure.getStringByKey("Name");
		}
		else
		{
			hierarchyName = hierarchyStructure.getStringByKey("HierarchyName");
		}
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyName) || catalogResult.containsHierarchy(hierarchyName))
		{
			continue;
		}
		item.setHierarchyName(hierarchyName);
		item.setHierarchyUniqueName(hierarchyStructure.getStringByKey("UniqueName"));
		let hierarchyDescription = oFF.PrUtils.getStringProperty(hierarchyStructure, "Description");
		if (oFF.notNull(hierarchyDescription))
		{
			item.setHierarchyLongText(hierarchyDescription.getString());
		}
		let version = oFF.PrUtils.getStringProperty(hierarchyStructure, "Version");
		if (oFF.notNull(version))
		{
			item.setVersionName(version.getString());
		}
		let structure = oFF.PrUtils.getStringProperty(hierarchyStructure, "Structure");
		if (oFF.notNull(structure))
		{
			item.setHierarchyType(oFF.HierarchyType.lookup(structure.getString()));
		}
		let isModeled = oFF.PrUtils.getBooleanValueProperty(hierarchyStructure, "IsModeled", false);
		item.setIsModeled(isModeled);
		let dateTo = oFF.PrUtils.getStringProperty(hierarchyStructure, "DateTo");
		if (oFF.notNull(dateTo))
		{
			let dateToString = dateTo.getString();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToString))
			{
				item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToString));
			}
		}
		let levels = oFF.PrUtils.getListProperty(hierarchyStructure, "Levels");
		if (oFF.notNull(levels))
		{
			item.setSupportsHierarchyLevels(true);
			let levelList = oFF.XList.create();
			let lenLevel = oFF.PrUtils.getListSize(levels, 0);
			for (let levelIndex = 0; levelIndex < lenLevel; levelIndex++)
			{
				let levelStructure = oFF.PrUtils.getStructureElement(levels, levelIndex);
				if (oFF.isNull(levelStructure))
				{
					continue;
				}
				let catalogLevel = oFF.HierarchyCatalogLevel.createCatalogLevel();
				let level = oFF.PrUtils.getIntegerValueProperty(levelStructure, "Level", -1);
				if (level > -1)
				{
					catalogLevel.setLevel(level);
				}
				let levelName = oFF.PrUtils.getStringProperty(levelStructure, "LevelName");
				if (oFF.notNull(levelName))
				{
					catalogLevel.setLevelName(levelName.getString());
				}
				let levelCaption = oFF.PrUtils.getStringProperty(levelStructure, "LevelCaption");
				if (oFF.notNull(levelCaption))
				{
					catalogLevel.setLevelDescription(levelCaption.getString());
				}
				let levelUniqueName = oFF.PrUtils.getStringProperty(levelStructure, "LevelUniqueName");
				if (oFF.notNull(levelUniqueName))
				{
					catalogLevel.setLevelUniqueName(levelUniqueName.getString());
				}
				let levelDimensionName = oFF.PrUtils.getStringProperty(levelStructure, "DimensionName");
				if (oFF.notNull(levelDimensionName))
				{
					catalogLevel.setLevelDimensionName(levelDimensionName.getString());
				}
				let levelType = oFF.PrUtils.getIntegerProperty(levelStructure, "LevelType");
				if (oFF.notNull(levelType))
				{
					catalogLevel.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(levelType.getInteger()));
				}
				levelList.add(catalogLevel);
			}
			item.setHierarchyLevels(levelList);
		}
		let restNode = hierarchyStructure.getStringByKey("RestNode");
		if (oFF.notNull(restNode))
		{
			item.setRestNode(restNode);
		}
		let virtualRootNode = hierarchyStructure.getStringByKey("VirtualRootNode");
		if (oFF.notNull(virtualRootNode))
		{
			item.setVirtualRootNode(virtualRootNode);
		}
		catalogResult.addItem(item);
	}
	return catalogResult;
};
oFF.QInAHierarchy.exportHierarchyForFilter = function(exporter, isAbap, inaStructure, dimension, filterExpression, queryManager, fieldName, originalHierarchyName, dueDate, version)
{
	let hierName = originalHierarchyName;
	let hierarchyDimension = dimension;
	if (oFF.notNull(hierName))
	{
		let inaHierarchy = inaStructure.putNewStructure("Hierarchy");
		if (oFF.isNull(hierarchyDimension) && oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit())
		{
			hierarchyDimension = oFF.QInAHierarchy.getHierarchyDimension(queryManager, fieldName);
		}
		let isHierarchyNameVariableForAutoSubmit = oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit(hierarchyDimension, exporter.getMode());
		let useVariableHierarchy = oFF.XStringUtils.isNullOrEmpty(hierName) && isHierarchyNameVariableForAutoSubmit;
		if (oFF.notNull(hierarchyDimension))
		{
			if (useVariableHierarchy)
			{
				hierName = hierarchyDimension.getHierarchyNameVariableName();
			}
			if (isHierarchyNameVariableForAutoSubmit && (oFF.XStringUtils.isNullOrEmpty(originalHierarchyName) || oFF.XString.isEqual(originalHierarchyName, hierarchyDimension.getHierarchyNameVariableName())))
			{
				inaHierarchy.putString("NameIs", "Variable");
			}
		}
		oFF.QInAExportUtil.setNonEmptyString(inaHierarchy, "Name", hierName);
		if (isAbap && exporter.getSession().hasFeature(oFF.FeatureToggleOlap.HIERARCHY_INFO_IN_FILTER))
		{
			if (oFF.isNull(filterExpression) || !oFF.XString.isEqual(filterExpression.getName(), oFF.QFilter.FIXED_FILTER_CONTAINER) || oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit())
			{
				let isDueDateVariableForAutoSubmit = oFF.QInAHierarchy.isDueDatePlaceHolderForAutoSubmit(hierarchyDimension, exporter.m_mode);
				if (isDueDateVariableForAutoSubmit && oFF.notNull(hierarchyDimension))
				{
					inaHierarchy.putString("DueDate", hierarchyDimension.getHierarchyDueDateVariableName());
					inaHierarchy.putString("DueDateIs", "Variable");
				}
				else
				{
					oFF.QInAExportUtil.setDate(exporter, inaHierarchy, "DueDate", dueDate);
				}
				let isVersionVariableForAutoSubmit = oFF.QInAHierarchy.isVersionPlaceHolderForAutoSubmit(hierarchyDimension, exporter.m_mode);
				if (isVersionVariableForAutoSubmit && oFF.notNull(hierarchyDimension))
				{
					inaHierarchy.putString("Version", hierarchyDimension.getHierarchyVersionVariableName());
					inaHierarchy.putString("VersionIs", "Variable");
				}
				else
				{
					inaHierarchy.putStringNotNull("Version", version);
				}
			}
		}
	}
};
oFF.QInAHierarchy.exportHierarchyNameDuedateVersion = function(exporter, inaStructure, dimension, isHierarchyActive, hierarchyName, actualHierarchyOnDimension, isDueDateVariableForAutoSubmit, isVersionVariableForAutoSubmit, optimizeExport)
{
	if (!optimizeExport)
	{
		if (exporter.isAbap(dimension.getQueryModel()))
		{
			oFF.QInAExportUtil.setNonEmptyString(inaStructure, "HierarchyName", hierarchyName);
		}
		inaStructure.putBoolean("HierarchyActive", isHierarchyActive);
	}
	let queryManager = dimension.getQueryManager();
	let processingAutoSubmit = oFF.notNull(queryManager) && (queryManager.isProcessingAutoSubmit() || !dimension.effectivelyUseHierarchyNameVariable() && dimension.isEffectivelyUseAnyHierarchyInfoVariable());
	oFF.QInAExportUtil.setNonEmptyString(inaStructure, "Name", hierarchyName);
	if (oFF.XStringUtils.isNullOrEmpty(actualHierarchyOnDimension) || oFF.XString.isEqual(actualHierarchyOnDimension, dimension.getHierarchyNameVariableName()))
	{
		inaStructure.putString("NameIs", "Variable");
		let hierarchyActiveBeforeAutoSubmit = dimension.getHierarchyManagerBase().isHierarchyActiveBeforeAutoSubmit();
		if (dimension.getModelCapabilities().supportsDimensionHierarchyMetadata() && dimension.isHierarchyActiveByDefault() === oFF.TriStateBool._FALSE && !hierarchyActiveBeforeAutoSubmit)
		{
			inaStructure.putBoolean("HierarchyActive", false);
		}
	}
	else if (processingAutoSubmit && !isHierarchyActive)
	{
		inaStructure.putBoolean("HierarchyActive", false);
	}
	if (dimension.useHierarchyDueDateVariable() || isDueDateVariableForAutoSubmit)
	{
		inaStructure.putString("DueDateIs", "Variable");
		inaStructure.putString("DueDate", dimension.getHierarchyDueDateVariableName());
	}
	else
	{
		oFF.QInAExportUtil.setDate(exporter, inaStructure, "DueDate", dimension.getEffectiveHierarchyDueDate());
	}
	if (isVersionVariableForAutoSubmit)
	{
		inaStructure.putString("VersionIs", "Variable");
		inaStructure.putString("Version", dimension.getHierarchyVersionVariableName());
	}
	else
	{
		oFF.QInAExportUtil.setNonEmptyString(inaStructure, "Version", dimension.getEffectiveHierarchyVersion());
	}
};
oFF.QInAHierarchy.getHierarchyDimension = function(queryManager, fieldName)
{
	let hierDimension = null;
	if (oFF.notNull(queryManager))
	{
		let dimMemberVars = queryManager.getDimensionMemberVariables();
		for (let i = 0; i < dimMemberVars.size(); i++)
		{
			let variable = dimMemberVars.get(i);
			let isHierarchyNameVariable = variable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE;
			let hierDim = isHierarchyNameVariable ? variable.getHierarchyNameDimension() : variable.getDimension();
			if (oFF.notNull(hierDim) && hierDim.getFieldByName(fieldName) !== null && (variable.isUsedInDynamicFilter() || variable.isUsedInFixedFilter()))
			{
				hierDimension = hierDim;
				break;
			}
		}
	}
	return hierDimension;
};
oFF.QInAHierarchy.getImportedHierarchy = function(inaStructure, dimension, hierarchyName, isProcessingAutoSubmit, isHierarchyNamePlaceHolderInStructure, isMetadataWithAutoSubmitCapability)
{
	let hierarchy = null;
	dimension.getHierarchyManagerBase().setUseHierarchyNameVariable(isHierarchyNamePlaceHolderInStructure);
	if (isHierarchyNamePlaceHolderInStructure && isMetadataWithAutoSubmitCapability)
	{
		dimension.getHierarchyManagerBase().setHierarchyNameVariableName(hierarchyName);
	}
	if (inaStructure.getBooleanByKey("IsTransient"))
	{
		hierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, hierarchyName, inaStructure.getStringByKey("Description"));
	}
	else if (!isHierarchyNamePlaceHolderInStructure || !isMetadataWithAutoSubmitCapability)
	{
		if (isProcessingAutoSubmit && dimension.getHierarchy() !== null && oFF.XString.isEqual(dimension.getHierarchy().getName(), hierarchyName))
		{
			hierarchy = dimension.getHierarchy();
		}
		else
		{
			hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, hierarchyName);
		}
		if (oFF.notNull(hierarchy))
		{
			let hierarchyDescription = inaStructure.getStringByKey("Description");
			hierarchy.setHierarchyDescription(hierarchyDescription);
		}
	}
	return hierarchy;
};
oFF.QInAHierarchy.hasPlaceHolderInStructure = function(inaStructure, placeHolderType, placeHolderReference)
{
	let placeHolder = inaStructure.getStringByKey(placeHolderType);
	let hasPlaceHolder = oFF.notNull(placeHolder) && oFF.XString.isEqual(placeHolderReference, placeHolder);
	return hasPlaceHolder;
};
oFF.QInAHierarchy.importHierarchyDrillInfo = function(importer, inaStructure, dimension, context)
{
	let initialDrillOffset = inaStructure.getIntegerByKeyExt("InitialDrillOffset", dimension.getInitialDrillOffset());
	let initialDrillLevel = inaStructure.getIntegerByKeyExt("InitialDrillLevel", 0);
	let modelCapabilities = dimension.getModelCapabilities();
	if (modelCapabilities.supportsVisibilityFilter() || !importer.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		dimension.setInitialDrillLevel(initialDrillLevel);
		dimension.setSelectorInitialDrillLevel(initialDrillLevel);
	}
	else
	{
		if (initialDrillLevel === -1 || initialDrillOffset === 0)
		{
			dimension.setInitialDrillLevel(initialDrillLevel);
			dimension.setSelectorInitialDrillLevel(initialDrillLevel);
		}
	}
	dimension.setInitialDrillOffset(initialDrillOffset);
	dimension.setExplicitDrillOnFilteredNodes(inaStructure.getBooleanByKeyExt("ExplicitDrillOnFilteredNodes", false));
	let alignment = oFF.Alignment.DEFAULT_VALUE;
	if (context.getModelCapabilities().supportsExpandBottomUp())
	{
		let nodeAlignment = inaStructure.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
		alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
		if (inaStructure.containsKey("ExpandBottomUp"))
		{
			let isExpandingBottomUp = inaStructure.getBooleanByKeyExt("ExpandBottomUp", false);
			if (isExpandingBottomUp)
			{
				alignment = oFF.Alignment.CHILDREN_ABOVE_PARENT;
			}
		}
	}
	dimension.setLowerLevelNodeAlignment(alignment);
	let nodeCondensation = inaStructure.getBooleanByKeyExt("NodeCondensation", false);
	dimension.setHasNodeCondensation(nodeCondensation);
	let memberOfPostedNodeVisibility = inaStructure.getStringByKeyExt("MemberOfPostedNodeVisibility", "Visible");
	let visibility = oFF.QInAConverter.lookupResultSetVisibility(memberOfPostedNodeVisibility);
	dimension.setMemberOfPostedNodeVisibility(visibility);
	if (modelCapabilities.supportsMaxDrillLevel())
	{
		let maxDrillLevel = inaStructure.getIntegerByKeyExt("MaxDrillLevel", -1);
		dimension.getHierarchyManager().setMaxDrillLevel(maxDrillLevel);
		let maxRuntimeLevel = inaStructure.getIntegerByKeyExt("MaxRuntimeLevel", -1);
		dimension.getHierarchyManager().setMaxRuntimeLevel(maxRuntimeLevel);
	}
};
oFF.QInAHierarchy.importHierarchyDueDate = function(inaStructure, dimension, hierarchy, supportsSapDate, isHierarchyNamePlaceHolderInStructure, isMetadataWithAutoSubmitCapability)
{
	let dueDate = inaStructure.getStringByKey("DueDate");
	let hasHierarchyDueDatePlaceHolderInStructure = oFF.QInAHierarchy.hasPlaceHolderInStructure(inaStructure, "DueDateIs", "Variable");
	dimension.setUseHierarchyDueDateVariable(hasHierarchyDueDatePlaceHolderInStructure);
	if (hasHierarchyDueDatePlaceHolderInStructure)
	{
		dimension.setHierarchyDueDateVariableName(oFF.XStringUtils.isNullOrEmpty(dueDate) ? null : dueDate);
	}
	else if (oFF.notNull(hierarchy))
	{
		hierarchy.setHierarchyDueDate(oFF.XDate.createDateFromStringWithFlag(dueDate, supportsSapDate));
	}
	if ((!isHierarchyNamePlaceHolderInStructure || !isMetadataWithAutoSubmitCapability) && oFF.notNull(hierarchy))
	{
		let dateTo = inaStructure.getStringByKey("DateTo");
		hierarchy.setDateTo(oFF.XDate.createDateFromStringWithFlag(dateTo, supportsSapDate));
		let dateFrom = inaStructure.getStringByKey("0DATEFROM");
		hierarchy.setDateFrom(oFF.XDate.createDateFromStringWithFlag(dateFrom, supportsSapDate));
		let inaMetadata = inaStructure.getStructureByKey("Metadata");
		if (oFF.notNull(inaMetadata))
		{
			dateTo = inaMetadata.getStringByKey("DateTo");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateTo))
			{
				hierarchy.setDateTo(oFF.XDate.createDateFromStringWithFlag(dateTo, supportsSapDate));
			}
			dateFrom = inaMetadata.getStringByKey("0DATEFROM");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateFrom))
			{
				hierarchy.setDateFrom(oFF.XDate.createDateFromStringWithFlag(dateFrom, supportsSapDate));
			}
		}
	}
};
oFF.QInAHierarchy.importHierarchyVersion = function(inaStructure, dimension, hierarchy)
{
	let version = inaStructure.getStringByKey("Version");
	let hasHierarchyVersionPlaceHolderInStructure = oFF.QInAHierarchy.hasPlaceHolderInStructure(inaStructure, "VersionIs", "Variable");
	dimension.getHierarchyManagerBase().setUseHierarchyVersionVariable(hasHierarchyVersionPlaceHolderInStructure);
	if (hasHierarchyVersionPlaceHolderInStructure)
	{
		dimension.getHierarchyManagerBase().setHierarchyVersionVariableName(oFF.XStringUtils.isNullOrEmpty(version) ? null : version);
	}
	else if (oFF.notNull(hierarchy))
	{
		hierarchy.setHierarchyVersion(version);
	}
};
oFF.QInAHierarchy.isDueDatePlaceHolderForAutoSubmit = function(dimension, exportMode)
{
	let isDueDateVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		let queryManager = dimension.getQueryManager();
		isDueDateVariableForAutoSubmit = oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit() && (exportMode.isTypeOf(oFF.QModelFormat.INA_DATA) || exportMode === oFF.QModelFormat.INA_VALUE_HELP) && dimension.effectivelyUseHierarchyDueDateVariable();
	}
	return isDueDateVariableForAutoSubmit;
};
oFF.QInAHierarchy.isMetadataWithAutoSubmitCapability = function(importer, queryManager)
{
	return importer.getOriginalMode() === oFF.QModelFormat.INA_METADATA || importer.getMode() === oFF.QModelFormat.INA_METADATA && oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsAutoVariableSubmit() && queryManager.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP;
};
oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit = function(dimension, exportMode)
{
	let isHierarchyNameVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		let queryManager = dimension.getQueryManager();
		isHierarchyNameVariableForAutoSubmit = oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit() && (exportMode.isTypeOf(oFF.QModelFormat.INA_DATA) || exportMode === oFF.QModelFormat.INA_VALUE_HELP) && dimension.effectivelyUseHierarchyNameVariable();
	}
	return isHierarchyNameVariableForAutoSubmit;
};
oFF.QInAHierarchy.isOptimizeHierarchyExport = function(exporter)
{
	return exporter.getSession().hasFeature(oFF.FeatureToggleOlap.OPTIMIZE_HIERARCHY_EXPORT) && exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA);
};
oFF.QInAHierarchy.isVersionPlaceHolderForAutoSubmit = function(dimension, exportMode)
{
	let isVersionVariableForAutoSubmit = false;
	if (oFF.notNull(dimension))
	{
		let queryManager = dimension.getQueryManager();
		isVersionVariableForAutoSubmit = oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit() && (exportMode.isTypeOf(oFF.QModelFormat.INA_DATA) || exportMode === oFF.QModelFormat.INA_VALUE_HELP) && dimension.effectivelyUseHierarchyVersionVariable();
	}
	return isVersionVariableForAutoSubmit;
};
oFF.QInAHierarchy.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let isOptimizeHierarchyExport = oFF.QInAHierarchy.isOptimizeHierarchyExport(exporter);
	if (dimension.supportsHierarchy())
	{
		let isHierarchyActive = dimension.isHierarchyActive();
		let isInactiveDataHierarchy = !isHierarchyActive && exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA);
		let isBw = exporter.isAbap(dimension.getQueryModel());
		let hierarchyName = this.getHierarchyName(dimension, isBw, exporter.m_mode);
		let isDueDateVariableForAutoSubmit = oFF.QInAHierarchy.isDueDatePlaceHolderForAutoSubmit(dimension, exporter.m_mode);
		let isVersionVariableForAutoSubmit = oFF.QInAHierarchy.isVersionPlaceHolderForAutoSubmit(dimension, exporter.m_mode);
		let isHierarchyNameVariableForAutoSubmit = oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit(dimension, exporter.m_mode);
		let useVariableHierarchy = oFF.XStringUtils.isNullOrEmpty(hierarchyName) && isHierarchyNameVariableForAutoSubmit;
		let actualHierarchyOnDimension = hierarchyName;
		if (useVariableHierarchy)
		{
			hierarchyName = dimension.getHierarchyNameVariableName();
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName) && (!isInactiveDataHierarchy || isHierarchyNameVariableForAutoSubmit || isDueDateVariableForAutoSubmit || isVersionVariableForAutoSubmit))
		{
			oFF.QInAHierarchy.exportHierarchyNameDuedateVersion(exporter, inaStructure, dimension, isHierarchyActive, hierarchyName, actualHierarchyOnDimension, isDueDateVariableForAutoSubmit, isVersionVariableForAutoSubmit, isOptimizeHierarchyExport);
			let queryManagerBase = dimension.getQueryManager();
			if (oFF.notNull(queryManagerBase) && queryManagerBase.isExecuteAutoVariableSubmit() && dimension.useDefaultDrillLevelOnChange())
			{
				inaStructure.putBoolean("UseDefaultDrillLevelOnChange", true);
			}
			let initialDrillLevel = 0;
			if (!exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) || !dimension.hasZoomDrill() || dimension.getTagging().containsKey(oFF.QTransientConstants.BW_HIERARCHY_DIMENSION))
			{
				if (dimension.getModelCapabilities().supportsVisibilityFilter() && !dimension.isVisibilityFilterForDrillDisabled() || !exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
				{
					initialDrillLevel = dimension.getInitialDrillLevel();
				}
				else
				{
					let drillOffset = dimension.getInitialDrillOffset();
					let drillLevel = dimension.getInitialDrillLevel();
					if (drillOffset === -1 && drillLevel > -1)
					{
						initialDrillLevel = 0;
					}
					else if (drillLevel >= drillOffset)
					{
						initialDrillLevel = dimension.getInitialDrillLevel() - oFF.XMath.max(0, drillOffset);
					}
					else
					{
						initialDrillLevel = drillLevel;
					}
				}
			}
			if (isBw || initialDrillLevel !== 0 || !isOptimizeHierarchyExport)
			{
				inaStructure.putInteger("InitialDrillLevel", initialDrillLevel);
			}
			if (!exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				if (dimension.getInitialDrillOffset() !== 0 || inaStructure.containsKey("InitialDrillOffset"))
				{
					inaStructure.putInteger("InitialDrillOffset", dimension.getInitialDrillOffset());
				}
				if (dimension.isExplicitDrillOnFilteredNodes() || inaStructure.containsKey("ExplicitDrillOnFilteredNodes"))
				{
					inaStructure.putBoolean("ExplicitDrillOnFilteredNodes", dimension.isExplicitDrillOnFilteredNodes());
				}
				if (dimension.hasStickyMembers())
				{
					inaStructure.putNewList("StickyDimensionMembers").addAllStrings(dimension.getStickyMembers());
				}
			}
			let alignment = dimension.getLowerLevelNodeAlignment();
			if (dimension.getModelCapabilities().supportsExpandBottomUp())
			{
				if (isOptimizeHierarchyExport)
				{
					if (alignment === oFF.Alignment.CHILDREN_ABOVE_PARENT)
					{
						inaStructure.putBoolean("ExpandBottomUp", true);
					}
				}
				else
				{
					inaStructure.putBoolean("ExpandBottomUp", alignment === oFF.Alignment.CHILDREN_ABOVE_PARENT);
				}
			}
			if (isBw)
			{
				let nodeAlignment;
				let capabilities = dimension.getModelCapabilities();
				if (oFF.notNull(capabilities) && capabilities.supportsExpandBottomUp())
				{
					nodeAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA(alignment);
				}
				else
				{
					nodeAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA2(alignment);
				}
				inaStructure.putString("LowerLevelNodeAlignment", nodeAlignment);
				let nodeCondensation = dimension.hasNodeCondensation();
				inaStructure.putBoolean("NodeCondensation", nodeCondensation);
				let visibility = dimension.getMemberOfPostedNodeVisibility();
				let memberOfPostedNodeVisibility = oFF.QInAConverter.lookupResultSetVisibilityInA(visibility);
				inaStructure.putString("MemberOfPostedNodeVisibility", memberOfPostedNodeVisibility);
			}
			if (dimension.isHierarchyNavigationDeltaMode())
			{
				inaStructure.putBoolean("HierarchyNavigationDeltaMode", true);
			}
			if (!isOptimizeHierarchyExport)
			{
				this.exportHierarchyLevels(inaStructure, dimension, hierarchyName);
			}
			let hierarchy = dimension.getHierarchy();
			if (!isHierarchyNameVariableForAutoSubmit && oFF.notNull(hierarchy) && hierarchy.isCustomHierarchy())
			{
				inaStructure.putBoolean("IsTransient", true);
				inaStructure.putStringNotNull("Description", hierarchy.getHierarchyDescription());
			}
			return inaStructure;
		}
	}
	return null;
};
oFF.QInAHierarchy.prototype.exportHierarchyLevels = function(inaStructure, dimension, hierarchyName)
{
	if (dimension.getModelCapabilities().supportsDimensionHierarchyLevels())
	{
		let hierarchies = dimension.getHierarchies();
		if (oFF.notNull(hierarchies))
		{
			let hierarchiesIt = hierarchies.getObjectsIterator();
			while (hierarchiesIt.hasNext())
			{
				let catalogItem = hierarchiesIt.next();
				if (oFF.XString.isEqual(catalogItem.getHierarchyName(), hierarchyName))
				{
					oFF.QInAMdHierarchy.exportLevels(inaStructure, catalogItem);
					return;
				}
			}
		}
	}
};
oFF.QInAHierarchy.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY;
};
oFF.QInAHierarchy.prototype.getHierarchyFromFilter = function(filterElement, dimensionName)
{
	if (oFF.notNull(filterElement))
	{
		let componentType = filterElement.getComponentType();
		if (componentType.isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOperation = filterElement;
			if (oFF.XString.isEqual(filterOperation.getDimensionName(), dimensionName) && oFF.XStringUtils.isNotNullAndNotEmpty(filterOperation.getHierarchyName()))
			{
				return filterOperation.getHierarchyName();
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
		{
			let filterAlgebra = filterElement;
			for (let i = 0; i < filterAlgebra.size(); i++)
			{
				let hierarchyFromFilter = this.getHierarchyFromFilter(filterAlgebra.get(i), dimensionName);
				if (oFF.notNull(hierarchyFromFilter))
				{
					return hierarchyFromFilter;
				}
			}
		}
	}
	return null;
};
oFF.QInAHierarchy.prototype.getHierarchyName = function(dimension, isBw, exportMode)
{
	if (isBw && dimension.getAxisType() === oFF.AxisType.FREE && (dimension.isHierarchyActive() || oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit(dimension, exportMode)))
	{
		let filter = dimension.getQueryModel().getFilter().getEffectiveFilter();
		let hierarchyUsedInFilter = this.getHierarchyFromFilter(filter.getFilterRootElement(), dimension.getName());
		if (oFF.notNull(hierarchyUsedInFilter))
		{
			return hierarchyUsedInFilter;
		}
	}
	return dimension.getHierarchyName();
};
oFF.QInAHierarchy.prototype.getTagName = function()
{
	return "Hierarchy";
};
oFF.QInAHierarchy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	if (dimension.supportsHierarchy())
	{
		let fixInFilter = dimension.isDisplayHierarchyFixInFilter();
		let hierarchyManager = dimension.getHierarchyManagerBase();
		hierarchyManager.setDisplayHierarchyFixInFilter(false);
		if (oFF.isNull(inaStructure))
		{
			dimension.setHierarchy(null);
		}
		else
		{
			let hierarchyName = inaStructure.getStringByKey("Name") !== null ? inaStructure.getStringByKey("Name") : inaStructure.getStringByKey("HierarchyName");
			let isHierarchyNamePlaceHolderInStructure = oFF.QInAHierarchy.hasPlaceHolderInStructure(inaStructure, "NameIs", "Variable");
			let queryManager = dimension.getQueryManager();
			let isMetadataWithAutoSubmitCapability = oFF.QInAHierarchy.isMetadataWithAutoSubmitCapability(importer, queryManager);
			let hierarchy = null;
			if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
			{
				if ((!isHierarchyNamePlaceHolderInStructure || !isMetadataWithAutoSubmitCapability) && dimension.getModelCapabilities().supportsDimensionHierarchyLevels())
				{
					this.importHierarchyAsCatalogItem(inaStructure, dimension);
					this.importLeveledHierarchyToMetadata(importer, inaStructure, context, dimension);
				}
				let isExecuteAutoSubmit = oFF.notNull(queryManager) && queryManager.isExecuteAutoVariableSubmit();
				hierarchy = oFF.QInAHierarchy.getImportedHierarchy(inaStructure, dimension, hierarchyName, isExecuteAutoSubmit, isHierarchyNamePlaceHolderInStructure, isMetadataWithAutoSubmitCapability);
				let isProcessingAutoSubmit = oFF.notNull(queryManager) && queryManager.isProcessingAutoSubmit();
				let dueDateVarWins = dimension.useHierarchyDueDateVariable();
				if (!isProcessingAutoSubmit || dueDateVarWins)
				{
					oFF.QInAHierarchy.importHierarchyDueDate(inaStructure, dimension, hierarchy, importer.m_capabilities.supportsSapDate(), isHierarchyNamePlaceHolderInStructure, isMetadataWithAutoSubmitCapability);
				}
				let versionVarWins = dimension.useHierarchyVersionVariable();
				if (!isProcessingAutoSubmit || versionVarWins)
				{
					oFF.QInAHierarchy.importHierarchyVersion(inaStructure, dimension, hierarchy);
				}
				if (!isHierarchyNamePlaceHolderInStructure || !isMetadataWithAutoSubmitCapability)
				{
					dimension.setHierarchy(hierarchy);
					let isActive = inaStructure.getBooleanByKeyExt("HierarchyActive", true);
					dimension.setHierarchyActive(isActive);
					dimension.setSelectorHierarchyActive(isActive);
				}
			}
			let stickyDimensionMembers = inaStructure.getListByKey("StickyDimensionMembers");
			dimension.clearStickyMembers();
			if (oFF.XCollectionUtils.hasElements(stickyDimensionMembers))
			{
				for (let sdi = 0; sdi < stickyDimensionMembers.size(); sdi++)
				{
					dimension.addStickyMember(stickyDimensionMembers.getStringAt(sdi));
				}
			}
			oFF.QInAHierarchy.importHierarchyDrillInfo(importer, inaStructure, dimension, context);
			hierarchyManager.setDisplayHierarchyFixInFilter(fixInFilter);
			return hierarchy;
		}
		hierarchyManager.setDisplayHierarchyFixInFilter(fixInFilter);
	}
	return null;
};
oFF.QInAHierarchy.prototype.importHierarchyAsCatalogItem = function(inaStructure, dimension)
{
	let hierarchyAsList = oFF.PrFactory.createList();
	hierarchyAsList.add(inaStructure);
	let hierarchyCatalogResult = dimension.getHierarchies();
	if (oFF.isNull(hierarchyCatalogResult))
	{
		hierarchyCatalogResult = oFF.QFactory.createHierarchyCatalogResult();
		oFF.QInAHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
		dimension.getHierarchyManagerBase().setHierarchies(hierarchyCatalogResult);
	}
	else
	{
		oFF.QInAHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchyAsList, dimension.getName());
	}
};
oFF.QInAHierarchy.prototype.importLeveledHierarchyToMetadata = function(importer, inaStructure, context, dimension)
{
	let queryManager = dimension.getQueryModelBase().getQueryManagerBase();
	if (oFF.notNull(queryManager) && !oFF.PrUtils.isListEmpty(inaStructure.getListByKey("Levels")))
	{
		let metadataModel = queryManager.getMetadataModelBase();
		let metaHierarchies = metadataModel.getLeveledHierarchiesBase();
		let leveledHierarchy = oFF.QInAMdHierarchy.importLeveledHierarchy(importer, context, dimension, inaStructure);
		if (!metaHierarchies.contains(leveledHierarchy))
		{
			metaHierarchies.add(leveledHierarchy);
		}
	}
};

oFF.QInAMember = function() {};
oFF.QInAMember.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMember.prototype._ff_c = "QInAMember";

oFF.QInAMember.determineMemberType = function(importer, inaStructure, dimension)
{
	let newMemberType;
	let dimensionMemberInA = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	if (inaStructure.containsKey("MemberType"))
	{
		let newInAMemberType = inaStructure.getStringByKeyExt("MemberType", "Measure");
		newMemberType = oFF.QInAConverter.lookupMeasureStructureMemberType(newInAMemberType);
		if (oFF.isNull(newMemberType))
		{
			importer.addError(oFF.ErrorCodes.INVALID_STATE, oFF.XStringUtils.concatenate3("MeasureStructure->MemberType unsupported: '", newInAMemberType, "'"));
			return null;
		}
	}
	else if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && oFF.notNull(dimensionMemberInA))
	{
		if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
		{
			newMemberType = oFF.MemberType.MEASURE;
		}
		else
		{
			newMemberType = dimension.getStructureMember(dimensionMemberInA).getMemberType();
			if (newMemberType === oFF.MemberType.BASIC_MEASURE)
			{
				newMemberType = oFF.MemberType.MEASURE;
			}
		}
	}
	else
	{
		if (inaStructure.containsKey("Formula"))
		{
			newMemberType = oFF.MemberType.FORMULA;
		}
		else
		{
			let inaSelection = inaStructure.getStructureByKey("Selection");
			if (oFF.isNull(inaSelection))
			{
				newMemberType = oFF.MemberType.MEASURE;
			}
			else
			{
				newMemberType = inaSelection.containsKey("Operator") ? oFF.MemberType.RESTRICTED_MEASURE : oFF.MemberType.MEASURE;
			}
		}
	}
	return newMemberType;
};
oFF.QInAMember.exportAggregationType = function(exportingMeasureInOldStyle, member, inaMember)
{
	if (exportingMeasureInOldStyle || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_AGGERGATION_TYPE))
	{
		let basicAggregationType = member.getAggregationType();
		if (oFF.notNull(basicAggregationType))
		{
			inaMember.putString("Aggregation", oFF.QInAConverter.lookupAggregationTypeInA(basicAggregationType));
		}
	}
};
oFF.QInAMember.exportCustomMember = function(exporter, modelComponent, inaStructure)
{
	let componentType = modelComponent.getComponentType();
	if (componentType === oFF.MemberType.FORMULA || componentType === oFF.MemberType.VARIANCE || componentType === oFF.MemberType.PARETO)
	{
		exporter.exportFormulaMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.RESTRICTED_MEASURE)
	{
		exporter.exportRestrictedMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.EXCEPTION_AGGREGATION)
	{
		exporter.exportExceptionAggregationMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.CURRENCY_MEASURE)
	{
		exporter.exportCurrencyMeasure(modelComponent, inaStructure);
	}
	else if (componentType === oFF.MemberType.UNIT_MEASURE)
	{
		exporter.exportUnitMeasure(modelComponent, inaStructure);
	}
};
oFF.QInAMember.exportExceptionAggregation = function(exportingMeasureInOldStyle, member, inaMember)
{
	if (exportingMeasureInOldStyle || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGERGATION_TYPE) || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_EXCEPTION_AGGREGATION_DIMENSIONS))
	{
		let exceptionAggregationType = member.getExceptionAggregationType();
		if (oFF.notNull(exceptionAggregationType))
		{
			inaMember.putString("ExceptionAggregation", exceptionAggregationType.getName());
		}
		let exceptionAggregationDimensions = member.getExceptionAggregationDimensions();
		if (oFF.notNull(exceptionAggregationDimensions) && exceptionAggregationDimensions.hasElements())
		{
			let inaExceptionAggregationDimensions = inaMember.putNewList("ExceptionAggregationDimensions");
			inaExceptionAggregationDimensions.addAllStrings(exceptionAggregationDimensions);
		}
	}
};
oFF.QInAMember.exportGenericRuntimeMemberProperties = function(exporter, member, inaMember)
{
	let exportingMeasureInFullDefinition = oFF.QInAMember.exportingInOldFormat(exporter, member);
	oFF.QInAMember.exportAggregationType(exportingMeasureInFullDefinition, member, inaMember);
	if (exportingMeasureInFullDefinition || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT) || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT_PERCENT))
	{
		if (!exporter.m_capabilities.supportsDataCells())
		{
			if (member.isNumericShiftPercent() && exporter.m_capabilities.supportsNumericShiftPercent() && member.getModelCapabilities().supportsNumericShiftPercent())
			{
				inaMember.putString("NumericShift", "%");
			}
			else
			{
				oFF.QInAExportUtil.setIntegerIfNotNull(inaMember, "NumericShift", member.getNumericShift());
			}
		}
	}
	if (!exporter.m_capabilities.supportsDataCells() || member.getModelCapabilities().supportsExtendedKeyFigureProperties())
	{
		if (exportingMeasureInFullDefinition || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_NUMERIC_SCALE))
		{
			let numericScale = member.getNumericScale();
			if (oFF.notNull(numericScale) && numericScale.getInteger() >= 0)
			{
				inaMember.putInteger("NumericScale", numericScale.getInteger());
			}
		}
		if (exportingMeasureInFullDefinition || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_NUMERIC_PRECISION))
		{
			let numericPrecision = member.getNumericPrecision();
			if (oFF.notNull(numericPrecision) && numericPrecision.getInteger() >= 0)
			{
				inaMember.putInteger("NumericPrecision", numericPrecision.getInteger());
			}
		}
	}
	if (exporter.m_capabilities.supportsCurrencyTranslation())
	{
		inaMember.putStringNotNullAndNotEmpty("CurrencyTranslationName", member.getMappedCurrencyTranslationNameForInAData());
	}
	if (exporter.m_capabilities.supportsUnitTranslation())
	{
		inaMember.putStringNotNullAndNotEmpty("UnitTranslationName", member.getUnitTranslationName());
	}
	if (exporter.m_capabilities.supportsSupportsRunningAggregation() && member.isRunningAggregationDefined())
	{
		if (member.getQueryModel().getRunningAggregationManager().isRunningAggregationSubmitAvailable(member.getDimension().getAxisType()))
		{
			inaMember.putStringNotNullAndNotEmpty("RunningAggregation", oFF.QInAConverter.lookupRunningAggregationOperatorInA(member.getRunningAggregationOperator()));
			inaMember.putStringNotNullAndNotEmpty("RunningAggregationInitDim", member.getRunningAggregationInitDimension());
		}
	}
	if (exportingMeasureInFullDefinition || member.hasPropertyChangedForInAData(oFF.QDimensionMemberProperties.QY_VISIBILITY))
	{
		if (exporter.m_capabilities.supportsMemberVisibility())
		{
			let resultVisibility = member.getResultVisibility();
			if (oFF.isNull(resultVisibility))
			{
				resultVisibility = oFF.ResultVisibility.VISIBLE;
			}
			inaMember.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(resultVisibility));
		}
	}
	let presentationSignReversal = member.getPresentationSignReversal();
	if (inaMember.getByKey("PresentationSignReversal") === null && oFF.notNull(presentationSignReversal))
	{
		inaMember.putBoolean("PresentationSignReversal", presentationSignReversal.getBoolean());
	}
	if (exportingMeasureInFullDefinition || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_UNIT_TYPE))
	{
		inaMember.putStringNotNullAndNotEmpty("UnitType", oFF.QInAConverter.lookupUnitTypeInA(member.getUnitType()));
	}
	if (exportingMeasureInFullDefinition || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_UNIT_FIXED))
	{
		inaMember.putStringNotNull("UnitFixed", member.getUnitFixed());
	}
	if (!exporter.getMode().isDataBlending())
	{
		inaMember.putStringNotNull("UnitName", member.getUnitName());
		inaMember.putStringNotNull("UnitTextName", member.getUnitTextName());
		inaMember.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(member.getDataType()));
	}
	oFF.QInAMember.exportPostAggregation(member, inaMember);
	oFF.QInAMember.exportIgnoreExternalDimensions(exportingMeasureInFullDefinition, exporter, member, inaMember);
	oFF.QInAMember.exportExceptionAggregation(exportingMeasureInFullDefinition, member, inaMember);
	oFF.QInAMember.exportWindowFunction(member, inaMember);
	let solveOrder = member.getSolveOrder();
	if (solveOrder !== 0)
	{
		inaMember.putInteger("SolveOrder", solveOrder);
	}
};
oFF.QInAMember.exportIgnoreExternalDimensions = function(exportingMeasureInOldStyle, exporter, member, inaMember)
{
	if (exporter.m_capabilities.supportsIgnoreExternalDimensions())
	{
		if (member.isIgnoringAllExternalDimensions())
		{
			if (exportingMeasureInOldStyle || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS))
			{
				inaMember.putString("IgnoreExternalDimensions", "All");
			}
		}
		else
		{
			let ignoredExternalDimensions = oFF.XList.create();
			if (member.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE)
			{
				let restrictedMeasure = member;
				ignoredExternalDimensions.addAll(restrictedMeasure.getTransientIgnoredExternalDimensions());
			}
			let ignoredExternalDimensionsFromMeasure = member.getIgnoredExternalDimensions();
			ignoredExternalDimensions.addAll(ignoredExternalDimensionsFromMeasure);
			if (ignoredExternalDimensions.hasElements() && (exportingMeasureInOldStyle || member.hasPropertyChangedForInAData(oFF.QStructureMemberProperties.QY_IGNORE_EXTERNAL_DIMENSIONS) || ignoredExternalDimensions.size() !== ignoredExternalDimensionsFromMeasure.size()))
			{
				let inaIgnoredExternalDimensions = inaMember.putNewList("IgnoreExternalDimensions");
				inaIgnoredExternalDimensions.addAllStrings(ignoredExternalDimensions);
			}
		}
	}
};
oFF.QInAMember.exportPostAggregation = function(member, inaMember)
{
	let postAggregationType = member.getPostAggregationType();
	if (oFF.notNull(postAggregationType))
	{
		inaMember.putString("PostAggregation", oFF.QInAConverter.lookupAggregationTypeInA(postAggregationType));
	}
	if (member.isPostAggregationIgnoringHierarchy())
	{
		inaMember.putBoolean("PostAggregationIgnoreHierarchy", true);
	}
	let postAggregationDimensions = member.getPostAggregationDimensions();
	if (postAggregationDimensions.hasElements())
	{
		let inaPostAggregationDimensions = inaMember.putNewList("PostAggregationDimensions");
		let iterator = postAggregationDimensions.getIterator();
		while (iterator.hasNext())
		{
			inaPostAggregationDimensions.add(oFF.PrFactory.createString(iterator.next()));
		}
	}
};
oFF.QInAMember.exportText = function(exporter, inaStructure, member)
{
	let text = member.getOriginalText();
	let isAbap = exporter.isAbap(member);
	if (isAbap || oFF.notNull(text))
	{
		inaStructure.putString("Description", text);
	}
};
oFF.QInAMember.exportWindowFunction = function(member, inaMember)
{
	let windowFunction = member.getWindowFunction();
	if (oFF.notNull(windowFunction))
	{
		let inaWindowFunction = inaMember.putNewStructure("WindowFunction");
		inaWindowFunction.putString("Name", oFF.QInAConverter.lookupWindowFunctionTypeInA(windowFunction.getType()));
		let dimensionsNotInPartition = windowFunction.getNotInPartitionDimensions();
		let inaDimensionsNotInPartitionList = inaWindowFunction.putNewList("DimensionsNotInPartition");
		inaDimensionsNotInPartitionList.addAllStrings(dimensionsNotInPartition);
		let inaSortDimensionsList = inaWindowFunction.putNewList("SortDimensions");
		let sortedIter = windowFunction.getSortDimensions().getIterator();
		while (sortedIter.hasNext())
		{
			let sortDimension = sortedIter.next();
			let dimension = inaSortDimensionsList.addNewStructure();
			dimension.putString("Name", sortDimension.getName());
			let directionType = sortDimension.getDirection();
			if (directionType === oFF.XSortDirection.ASCENDING || directionType === oFF.XSortDirection.DESCENDING)
			{
				dimension.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(directionType));
			}
			let nullsType = sortDimension.getNulls();
			if (oFF.notNull(nullsType) && nullsType !== oFF.NullsType.NONE)
			{
				dimension.putString("Nulls", oFF.QInAConverter.lookupNullsTypeInA(nullsType));
			}
		}
		let frame = windowFunction.getFrame();
		if (oFF.notNull(frame))
		{
			let inaFrame = inaWindowFunction.putNewStructure("Frame");
			inaFrame.putString("Start", oFF.QInAConverter.lookupFrameStartTypeInA(frame.getStart()));
			inaFrame.putInteger("StartPreceding", frame.getStartPreceding());
			inaFrame.putString("End", oFF.QInAConverter.lookupFrameEndTypeInA(frame.getEnd()));
			inaFrame.putInteger("EndFollowing", frame.getEndFollowing());
		}
	}
};
oFF.QInAMember.exportingInOldFormat = function(exporter, member)
{
	let blendingScenario = exporter.getMode().isDataBlending() || oFF.QueryManagerMode.BLENDING === member.getQueryManager().getInitSettings().getMode();
	let currencyTranslation = member.getCurrencyTranslation();
	let currencyTranslationIgnored = oFF.notNull(currencyTranslation) && currencyTranslation.isIgnore();
	return blendingScenario || !member.isAvailableInMetadata() || !member.getModelCapabilities().supportsNamedCustomMember() || oFF.XStringUtils.isNotNullAndNotEmpty(member.getCurrencyTranslationName()) && currencyTranslationIgnored;
};
oFF.QInAMember.getNameForImport = function(inaStructure, dimension)
{
	let memberName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(memberName) && oFF.notNull(dimension))
	{
		memberName = oFF.QInAMember.getValueByFieldName(inaStructure, dimension.getFlatKeyField(), dimension.getHierarchyKeyField());
	}
	return memberName;
};
oFF.QInAMember.getText = function(inaStructure, dimension)
{
	let memberText = inaStructure.getStringByKey("Description");
	if (oFF.isNull(memberText) && oFF.notNull(dimension))
	{
		memberText = oFF.QInAMember.getValueByFieldName(inaStructure, dimension.getFlatTextField(), dimension.getHierarchyTextField());
	}
	return memberText;
};
oFF.QInAMember.getValueByFieldName = function(inaStructure, flatField, hierarchyField)
{
	let value = null;
	if (oFF.notNull(flatField))
	{
		value = inaStructure.getStringByKey(flatField.getName());
	}
	if (oFF.isNull(value) && oFF.notNull(hierarchyField))
	{
		value = inaStructure.getStringByKey(hierarchyField.getName());
	}
	return value;
};
oFF.QInAMember.importAggregationType = function(member, inaMember, overrideDefaultAggregationType)
{
	let originalAggregationType = member.getAggregationType();
	if (overrideDefaultAggregationType)
	{
		member.setAggregationType(null);
	}
	let inaAggregation = inaMember.getStringByKey("Aggregation");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregation))
	{
		member.setAggregationType(oFF.QInAConverter.lookupAggregationType(inaAggregation));
	}
	else if (inaMember.getBooleanByKeyExt("ModelDefinedMember", false) && member.getDimension() !== null && member.getDimension().getDimensionType() !== oFF.DimensionType.ACCOUNT)
	{
		if (oFF.isNull(originalAggregationType))
		{
			member.setAggregationType(oFF.AggregationType.SUM);
		}
		else
		{
			member.setAggregationType(originalAggregationType);
		}
	}
};
oFF.QInAMember.importCurrencyTranslation = function(member, inaMember)
{
	if (inaMember.containsKey("CurrencyTranslationName"))
	{
		member.setCurrencyTranslationName(inaMember.getStringByKey("CurrencyTranslationName"));
	}
};
oFF.QInAMember.importGenericMemberProperties = function(importer, member, inaMember)
{
	if (member.getQueryModel().isBasicMeasureSettingsExportedInRepo() || !member.isCreatedFromMetadata())
	{
		if (inaMember.containsKey("NumericShift"))
		{
			if (oFF.XString.isEqual("%", inaMember.getStringByKey("NumericShift")))
			{
				member.setNumericShiftPercent(true);
			}
			else
			{
				member.setNumericShift(inaMember.getIntegerByKey("NumericShift"));
			}
		}
		if (inaMember.containsKey("NumericScale"))
		{
			member.setNumericScale(inaMember.getIntegerByKey("NumericScale"));
		}
		if (inaMember.containsKey("NumericPrecision"))
		{
			member.setNumericPrecision(inaMember.getIntegerByKey("NumericPrecision"));
		}
	}
	if (member.getModelCapabilities().supportsMemberVisibility())
	{
		let inaVisibility = inaMember.getStringByKeyExt("Visibility", "Visible");
		member.setResultVisibility(oFF.QInAConverter.lookupResultSetVisibility(inaVisibility));
	}
	let inaPostAggregation = inaMember.getStringByKey("PostAggregation");
	let postAggregationType = oFF.QInAConverter.lookupAggregationType(inaPostAggregation);
	member.setPostAggregationType(postAggregationType);
	if (inaMember.containsKey("PostAggregationIgnoreHierarchy"))
	{
		member.setPostAggregationIgnoreHierarchy(true);
	}
	member.clearPostAggregationDimensions();
	let inaPostAggregationDimensions = inaMember.getListByKey("PostAggregationDimensions");
	if (oFF.notNull(inaPostAggregationDimensions))
	{
		let postAggregationSize = inaPostAggregationDimensions.size();
		for (let postDimIdx = 0; postDimIdx < postAggregationSize; postDimIdx++)
		{
			member.addPostAggregationDimensionName(inaPostAggregationDimensions.getStringAt(postDimIdx));
		}
	}
	oFF.QInAMember.importWindowFunction(member, inaMember);
	oFF.QInAMember.importCurrencyTranslation(member, inaMember);
	oFF.QInAMember.importUnitTranslation(member, inaMember);
	oFF.QInAMember.importRunningAggregation(member, inaMember);
};
oFF.QInAMember.importGenericRuntimeMemberProperties = function(importer, member, inaMember)
{
	if (member.getQueryModel().isBasicMeasureAggregationExportedInRepo() || !member.isCreatedFromMetadata())
	{
		let modelDefinedMember = inaMember.getBooleanByKeyExt("ModelDefinedMember", false);
		let preserveAggregationType = modelDefinedMember && member.getQueryManager().getInitSettings().getProviderType() === oFF.ProviderType.LIST_REPORTING;
		if (!preserveAggregationType)
		{
			oFF.QInAMember.importAggregationType(member, inaMember, true);
		}
	}
	oFF.QInAMember.importGenericMemberProperties(importer, member, inaMember);
	if (inaMember.containsKey("DataType"))
	{
		member.setDataType(oFF.QInAConverter.lookupValueType(inaMember.getStringByKey("DataType")));
	}
	oFF.QInAMember.importIgnoredExternalDimensions(importer, member, inaMember);
	oFF.QInAMember.importSolveOrder(member, inaMember);
	oFF.QInAMember.importCurrencyTranslation(member, inaMember);
	oFF.QInAMember.importUnitTranslation(member, inaMember);
	oFF.QInAMember.importRunningAggregation(member, inaMember);
};
oFF.QInAMember.importIgnoredExternalDimensions = function(importer, member, inaMember)
{
	if (importer.m_capabilities.supportsIgnoreExternalDimensions())
	{
		if (inaMember.hasStringByKey("IgnoreExternalDimensions"))
		{
			let ignoreExternalDimensions = inaMember.getStringByKey("IgnoreExternalDimensions");
			if (oFF.XString.isEqual(ignoreExternalDimensions, "All"))
			{
				member.setIgnoreAllExternalDimensions(true);
			}
		}
		else if (inaMember.containsKey("IgnoreExternalDimensions"))
		{
			let inaIgnoreExternalDimensions = inaMember.getListByKey("IgnoreExternalDimensions");
			member._setExternalDimensionsToIgnore(oFF.PrUtils.asListOfString(inaIgnoreExternalDimensions));
		}
	}
};
oFF.QInAMember.importMeasure = function(importer, inaStructure, context, queryModel, dimension)
{
	let newMemberType;
	newMemberType = oFF.QInAMember.determineMemberType(importer, inaStructure, dimension);
	if (inaStructure.containsKey("MemberType") && oFF.isNull(newMemberType))
	{
		return null;
	}
	return importer.importStructureMemberExt(newMemberType, inaStructure, dimension, context);
};
oFF.QInAMember.importRunningAggregation = function(member, inaMember)
{
	if (inaMember.containsKey("RunningAggregation"))
	{
		let operator = oFF.QInAConverter.lookupRunningAggregationOperator(inaMember.getStringByKey("RunningAggregation"));
		let memberType = member.getMemberType();
		if (memberType === oFF.MemberType.BASIC_MEASURE || memberType === oFF.MemberType.RESTRICTED_MEASURE)
		{
			let measure = member;
			measure.setRunningAggregationOperator(operator);
			if (inaMember.containsKey("RunningAggregationInitDim"))
			{
				measure.setRunningAggregationInitDimension(inaMember.getStringByKey("RunningAggregationInitDim"));
			}
		}
	}
};
oFF.QInAMember.importSolveOrder = function(member, inaMember)
{
	let solveOrder = inaMember.getIntegerByKeyExt("SolveOrder", 0);
	if (solveOrder !== 0)
	{
		member.setSolveOrder(solveOrder);
	}
};
oFF.QInAMember.importUnitTranslation = function(member, inaMember)
{
	if (inaMember.containsKey("UnitTranslationName"))
	{
		member.setUnitTranslationName(inaMember.getStringByKey("UnitTranslationName"));
	}
};
oFF.QInAMember.importWindowFunction = function(member, inaMember)
{
	let inaWindowFunction = inaMember.getStructureByKey("WindowFunction");
	if (oFF.notNull(inaWindowFunction))
	{
		let windowfunction = oFF.QWindowFunction._createWindowFunction(oFF.QInAConverter.lookupWindowFunctionType(inaWindowFunction.getStringByKey("Name")));
		let inaDimensionsNotInPartitionList = inaWindowFunction.getListByKey("DimensionsNotInPartition");
		if (oFF.notNull(inaDimensionsNotInPartitionList))
		{
			for (let idxNIPDimension = 0; idxNIPDimension < inaDimensionsNotInPartitionList.size(); idxNIPDimension++)
			{
				windowfunction.addNotInPartitionDimension(inaDimensionsNotInPartitionList.getStringAt(idxNIPDimension));
			}
		}
		let inaSortDimensionsList = inaWindowFunction.getListByKey("SortDimensions");
		if (oFF.notNull(inaSortDimensionsList))
		{
			for (let idxSortDimension = 0; idxSortDimension < inaSortDimensionsList.size(); idxSortDimension++)
			{
				let inaSortedDimension = inaSortDimensionsList.getStructureAt(idxSortDimension);
				let name = inaSortedDimension.getStringByKey("Name");
				let directionType = oFF.QInAConverter.lookupSortDirection2(inaSortedDimension.getStringByKey("Direction"));
				let nullsType = oFF.QInAConverter.lookupNullsType(inaSortedDimension.getStringByKey("Nulls"));
				windowfunction.addSortDimension(name, directionType, nullsType);
			}
		}
		let inaFrame = inaWindowFunction.getStructureByKey("Frame");
		if (oFF.notNull(inaFrame))
		{
			windowfunction.setFrame(oFF.QInAConverter.lookupFrameStartType(inaFrame.getStringByKey("Start")), inaFrame.getIntegerByKey("StartPreceding"), oFF.QInAConverter.lookupFrameEndType(inaFrame.getStringByKey("End")), inaFrame.getIntegerByKey("EndFollowing"));
		}
		member.setWindowFunction(windowfunction);
	}
};
oFF.QInAMember.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let componentType = modelComponent.getComponentType();
	if (componentType.isTypeOf(oFF.MemberType.MEASURE))
	{
		let member = modelComponent;
		exporter.exportExceptions(member, inaStructure);
		if (componentType === oFF.MemberType.BASIC_MEASURE)
		{
			let exportBasicMeasures = true;
			if (!member.getQueryModel().isExportingEachMeasure())
			{
				let structureMember = modelComponent;
				if (exporter.m_capabilities.supportsExceptionsV2() || !oFF.XCollectionUtils.hasElements(structureMember.getExceptions()))
				{
					exportBasicMeasures = false;
				}
			}
			if (exportBasicMeasures)
			{
				exporter.exportBasicMeasure(modelComponent, inaStructure);
			}
		}
		else
		{
			oFF.QInAMember.exportCustomMember(exporter, modelComponent, inaStructure);
		}
		if (inaStructure.hasElements())
		{
			oFF.QInAMember.exportGenericRuntimeMemberProperties(exporter, member, inaStructure);
		}
	}
	return inaStructure;
};
oFF.QInAMember.prototype.getComponentType = function()
{
	return oFF.MemberType.ABSTRACT_MEMBER;
};
oFF.QInAMember.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let dimension = parentComponent;
	if (oFF.isNull(dimension))
	{
		dimension = queryModel.getMeasureDimension();
	}
	let member = oFF.QInAMember.importMeasure(importer, inaStructure, context, queryModel, dimension);
	if (oFF.notNull(member))
	{
		oFF.QInAMember.importGenericRuntimeMemberProperties(importer, member, inaStructure);
		if (inaStructure.containsKey("PresentationSignReversal"))
		{
			member.setPresentationSignReversal(inaStructure.getBooleanByKey("PresentationSignReversal"));
		}
		let inaAggregationType = inaStructure.getIntegerByKeyExt("[Measures].[Aggregation]", -1);
		let aggregationType = oFF.QInAConverter.lookupAggregationType2(inaAggregationType);
		if (oFF.notNull(aggregationType))
		{
			member.setAggregationType(aggregationType);
		}
		let memberDetailsKey = dimension.isMeasureStructure() ? "[Measures].[MemberDetails]" : "[CustomDimension2].[MemberDetails]";
		if ((queryModel.isBasicMeasureSettingsExportedInRepo() || !member.isCreatedFromMetadata()) && !oFF.XCollectionUtils.hasElements(inaStructure.getStructureByKey(memberDetailsKey)))
		{
			this.setPrecisionAndScale(importer, inaStructure, queryModel, member);
			member.setUnitType(oFF.QInAConverter.lookupUnitType(inaStructure.getStringByKey("UnitType")));
			member.setUnitFixed(inaStructure.getStringByKey("UnitFixed"));
			member.setUnitName(inaStructure.getStringByKey("UnitName"));
			member.setUnitTextName(inaStructure.getStringByKey("UnitTextName"));
		}
		importer.importExceptions(inaStructure, member);
		if (oFF.notNull(parentComponent))
		{
			let capabilities = dimension.getModelCapabilities();
			if (oFF.notNull(capabilities) && capabilities.supportsExceptionAggregationDimsFormulas() || importer.m_capabilities.supportsExceptionAggregationDimsFormulas())
			{
				member.clearExceptionAggregationDimensions();
			}
			member.setExceptionAggregationType(null);
			this.importExceptionAggregationProperties(inaStructure, member);
		}
		this.importUniversalModelProperties(importer, inaStructure, member);
		if (oFF.QueryModelUtils.isDWCModelWithCustomDimension2MemberMetadata(queryModel) && member.getSolveOrder() === oFF.QStructureMemberSolveOrder.DSP_LEADING_STRUCTURE && !queryModel.getMetadataPropertiesBase().containsKey("LeadingStructure"))
		{
			let leadingStructure = dimension === queryModel.getPrimaryCalculationDimension() ? "MeasureStructure" : "SecondaryStructure";
			queryModel.getMetadataPropertiesBase().put("LeadingStructure", leadingStructure);
		}
		this.importInternalDataType(inaStructure, member);
	}
	return member;
};
oFF.QInAMember.prototype.importExceptionAggregationProperties = function(inaStructure, member)
{
	let inaExceptionAggregationDimensions = inaStructure.getListByKey("ExceptionAggregationDimensions");
	if (oFF.notNull(inaExceptionAggregationDimensions))
	{
		let exceptionDimSize = inaExceptionAggregationDimensions.size();
		for (let idx = 0; idx < exceptionDimSize; idx++)
		{
			member.addExceptionAggregationDimensionName(inaExceptionAggregationDimensions.getStringAt(idx));
		}
	}
	member.setExceptionAggregationType(oFF.AggregationType.lookupOrCreate(inaStructure.getStringByKey("ExceptionAggregation")));
};
oFF.QInAMember.prototype.importInternalDataType = function(measureIna, measure)
{
	if (measure.getDataTypeInternal() === null && measureIna.containsKey("[Measures].[SQLType]"))
	{
		let dataTypeName = measureIna.getStringByKey("[Measures].[SQLType]");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataTypeName))
		{
			if (oFF.XString.startsWith(dataTypeName, oFF.XStringUtils.concatenate2("DECIMAL", "(")))
			{
				measure.setDataTypeInternal(oFF.XValueType.DECIMAL_FLOAT);
				let prefixEnd = oFF.XString.size("DECIMAL") + 1;
				let delimiter = oFF.XString.indexOf(dataTypeName, ",");
				let suffixStart = oFF.XString.size(dataTypeName) - 1;
				if (delimiter > prefixEnd && delimiter < suffixStart)
				{
					let precisionString = oFF.XString.substring(dataTypeName, prefixEnd, delimiter);
					let scaleString = oFF.XString.substring(dataTypeName, delimiter + 1, suffixStart);
					measure.setDataTypePrecision(oFF.XInteger.convertFromString(precisionString));
					measure.setDataTypeScale(oFF.XInteger.convertFromString(scaleString));
				}
			}
			else if (oFF.XString.startsWith(dataTypeName, "SMALLDECIMAL"))
			{
				measure.setDataTypeInternal(oFF.XValueType.SMALL_DECIMAL);
			}
			else if (oFF.XString.startsWith(dataTypeName, "DOUBLE"))
			{
				measure.setDataTypeInternal(oFF.XValueType.DOUBLE);
			}
			else if (oFF.XString.startsWith(dataTypeName, "REAL"))
			{
				measure.setDataTypeInternal(oFF.XValueType.REAL);
			}
			else if (oFF.XString.startsWith(dataTypeName, "INTEGER") || oFF.XString.isEqual(dataTypeName, "INT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.INTEGER);
			}
			else if (oFF.XString.startsWith(dataTypeName, "TINYINT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.TINYINT);
			}
			else if (oFF.XString.startsWith(dataTypeName, "SMALLINT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.SMALLINT);
			}
			else if (oFF.XString.startsWith(dataTypeName, "BIGINT"))
			{
				measure.setDataTypeInternal(oFF.XValueType.BIGINT);
			}
			else if (oFF.XString.isEqual(dataTypeName, "DATE"))
			{
				measure.setDataTypeInternal(oFF.XValueType.DATE);
			}
			else if (oFF.XString.isEqual(dataTypeName, "TIME"))
			{
				measure.setDataTypeInternal(oFF.XValueType.TIME);
			}
			else if (oFF.XString.isEqual(dataTypeName, "TIMESTAMP"))
			{
				measure.setDataTypeInternal(oFF.XValueType.DATE_TIME);
			}
			else if (oFF.XString.isEqual(dataTypeName, "SECONDDATE"))
			{
				measure.setDataTypeInternal(oFF.XValueType.SECOND_DATE);
			}
			else if (oFF.XString.isEqual(dataTypeName, "BOOLEAN"))
			{
				measure.setDataTypeInternal(oFF.XValueType.BOOLEAN);
			}
		}
	}
};
oFF.QInAMember.prototype.importUniversalModelProperties = function(importer, inaStructure, member)
{
	let capabilities = member.getModelCapabilities();
	if (oFF.notNull(capabilities) && capabilities.supportsCustomMeasuresInMetadata())
	{
		let memberDetailsKey = member.getDimension().isMeasureStructure() ? "[Measures].[MemberDetails]" : "[CustomDimension2].[MemberDetails]";
		let memberDetails = inaStructure.getStructureByKey(memberDetailsKey);
		if (oFF.notNull(memberDetails))
		{
			if (oFF.XStringUtils.isNullOrEmpty(member.getText()) && memberDetails.hasStringByKey("Description"))
			{
				member.setText(memberDetails.getStringByKey("Description"));
			}
			let numericShift = oFF.PrUtils.getIntegerProperty(memberDetails, "NumericShift");
			if (oFF.notNull(numericShift))
			{
				member.setNumericShift(numericShift.getInteger());
			}
			else if (oFF.XString.isEqual("%", memberDetails.getStringByKey("NumericShift")))
			{
				member.setNumericShiftPercent(true);
			}
			let numericScale = oFF.PrUtils.getIntegerProperty(memberDetails, "NumericScale");
			if (oFF.notNull(numericScale))
			{
				member.setNumericScale(numericScale.getInteger());
			}
			let numericPrecision = oFF.PrUtils.getIntegerProperty(memberDetails, "NumericPrecision");
			if (oFF.notNull(numericPrecision))
			{
				member.setNumericPrecision(numericPrecision.getInteger());
			}
			this.importExceptionAggregationProperties(memberDetails, member);
			if (memberDetails.hasElements())
			{
				member.setUnitType(oFF.QInAConverter.lookupUnitType(memberDetails.getStringByKey("UnitType")));
				member.setUnitFixed(memberDetails.getStringByKey("UnitFixed"));
			}
			else
			{
				member.setUnitType(oFF.QInAConverter.lookupByEncodedValue(inaStructure.getIntegerByKey("[Measures].[UnitType]")));
				member.setUnitFixed(inaStructure.getStringByKey("[Measures].[UnitFixed]"));
			}
			oFF.QInAMember.importIgnoredExternalDimensions(importer, member, memberDetails);
			oFF.QInAMember.importSolveOrder(member, memberDetails);
			oFF.QInAMember.importCurrencyTranslation(member, memberDetails);
			oFF.QInAMember.importUnitTranslation(member, memberDetails);
			oFF.QInAMember.importRunningAggregation(member, memberDetails);
			if (member.getModelCapabilities().supportsMemberVisibility())
			{
				let inaVisibility = memberDetails.getStringByKeyExt("Visibility", "Visible");
				member.setResultVisibility(oFF.QInAConverter.lookupResultSetVisibility(inaVisibility));
			}
			let aggInMemDetails = oFF.QInAConverter.lookupAggregationType(memberDetails.getStringByKey("Aggregation"));
			if (oFF.notNull(aggInMemDetails) && aggInMemDetails !== member.getAggregationType())
			{
				member.setAggregationType(aggInMemDetails);
			}
		}
	}
};
oFF.QInAMember.prototype.setPrecisionAndScale = function(importer, inaStructure, queryModel, member)
{
	let numericPrecision = -1;
	let numericScale = -1;
	if (importer.isAbap(queryModel))
	{
		numericPrecision = inaStructure.getIntegerByKeyExt("Digits", -1);
		let readThroughDataCells = queryModel.getModelCapabilities().supportsDataCells() && queryModel.getModelCapabilities().supportsUnifiedDataCells();
		if (!readThroughDataCells)
		{
			numericScale = inaStructure.getIntegerByKeyExt("FractDigits", -1);
		}
	}
	else
	{
		numericPrecision = inaStructure.getIntegerByKeyExt("[Measures].[Digits]", -1);
		numericScale = inaStructure.getIntegerByKeyExt("[Measures].[FractDigits]", -1);
	}
	if (numericPrecision !== -1)
	{
		member.setNumericPrecision(numericPrecision);
	}
	if (numericScale !== -1)
	{
		member.setNumericScale(numericScale);
	}
};

oFF.QInAMemberBasicMeasure = function() {};
oFF.QInAMemberBasicMeasure.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMemberBasicMeasure.prototype._ff_c = "QInAMemberBasicMeasure";

oFF.QInAMemberBasicMeasure.exportBasicMeasure = function(exporter, inaStructure, basicMeasure, queryModel)
{
	if (!basicMeasure.getModelCapabilities().supportsExceptionAggregationDimsFormulas())
	{
		let basicAggregationDimensionName = basicMeasure.getAggregationDimensionName();
		if (oFF.notNull(basicAggregationDimensionName))
		{
			inaStructure.putString("AggregationDimension", basicAggregationDimensionName);
		}
	}
	if (!exporter.m_capabilities.supportsExtendedSort() && !exporter.isVirtualInA(queryModel))
	{
		let measureSorting = queryModel.getSortingManager().getMeasureSorting(basicMeasure, false);
		if (oFF.isNull(measureSorting))
		{
			inaStructure.putInteger("SortOrder", 0);
		}
		else
		{
			inaStructure.putInteger("SortOrder", oFF.QInAConverter.lookupSortDirectionInA(measureSorting.getDirection()));
		}
	}
};
oFF.QInAMemberBasicMeasure.getNameFromOperand = function(inaStructure)
{
	let memberOperand = inaStructure.getStructureByKey("MemberOperand");
	if (oFF.notNull(memberOperand))
	{
		let isFilterOnMeasures = oFF.XString.isEqual(memberOperand.getStringByKey("AttributeName"), "Measures");
		let isFilterEqual = oFF.QInAConverter.lookupComparison(memberOperand.getStringByKey("Comparison")) === oFF.ComparisonOperator.EQUAL;
		if (isFilterOnMeasures && isFilterEqual)
		{
			return memberOperand.getStringByKey("Value");
		}
	}
	return null;
};
oFF.QInAMemberBasicMeasure.importExceptionAggregation = function(inaStructure, queryModel, member)
{
	if (queryModel.getModelCapabilities().supportsExceptionAggregationDimsFormulas())
	{
		member.clearExceptionAggregationDimensions();
		member.setExceptionAggregationType(null);
		let inaExceptionAggregationDimensions = inaStructure.getListByKey("ExceptionAggregationDimensions");
		if (oFF.notNull(inaExceptionAggregationDimensions))
		{
			let exceptionSize = inaExceptionAggregationDimensions.size();
			for (let idx = 0; idx < exceptionSize; idx++)
			{
				member.addExceptionAggregationDimensionName(inaExceptionAggregationDimensions.getStringAt(idx));
			}
		}
		let exceptionAggregation = inaStructure.getStringByKey("ExceptionAggregation");
		member.setExceptionAggregationType(oFF.AggregationType.lookupOrCreate(exceptionAggregation));
	}
	else
	{
		let inaAggregationDimension = inaStructure.getStringByKey("AggregationDimension");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregationDimension))
		{
			member.setAggregationDimensionName(inaAggregationDimension);
		}
	}
};
oFF.QInAMemberBasicMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let basicMeasure = modelComponent;
	if (basicMeasure.getDimension().getDimensionType() === oFF.DimensionType.ACCOUNT)
	{
		inaStructure.putString("Name", basicMeasure.getName());
		return inaStructure;
	}
	let queryModel = basicMeasure.getQueryModel();
	if (!queryModel.getModelCapabilities().supportsNamedCustomMember())
	{
		let aggregationType = basicMeasure.getExceptionAggregationType();
		if (!basicMeasure.isAvailableInMetadata() && aggregationType === oFF.AggregationType.COUNT)
		{
			this.exportMeasureReference(exporter, inaStructure, "Name", basicMeasure.getKeyFieldValue(), queryModel);
			if (exporter.m_capabilities.supportsUniversalModel())
			{
				this.exportMeasureReference(exporter, this.getMemberOperandElement(exporter, inaStructure, basicMeasure, queryModel), "Value", oFF.XValueAccess.createWithValue(oFF.XStringValue.create("$$Count$$")), queryModel);
			}
			oFF.QInAMember.exportText(exporter, inaStructure, basicMeasure);
		}
		else
		{
			this.exportMeasureReference(exporter, this.getMemberOperandElement(exporter, inaStructure, basicMeasure, queryModel), "Value", basicMeasure.getKeyFieldValue(), queryModel);
		}
	}
	else
	{
		this.exportMeasureReference(exporter, inaStructure, "MemberName", basicMeasure.getKeyFieldValue(), queryModel);
	}
	oFF.QInAMemberBasicMeasure.exportBasicMeasure(exporter, inaStructure, basicMeasure, queryModel);
	if (queryModel.getModelCapabilities().supportsCorrectDimensionDescriptionExt())
	{
		let member = modelComponent;
		let textField = member.getDimension().getTextField();
		if (oFF.notNull(textField))
		{
			let overrideDescriptionValue = member.getDimension().getAlternativeFieldValue(false, member.getName(), textField.getName(), null);
			if (member.isModelDefinedMember() && oFF.notNull(overrideDescriptionValue))
			{
				inaStructure.putStringNotNullAndNotEmpty("Description", basicMeasure.getText());
			}
		}
	}
	if (basicMeasure.getTagging().containsKey(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION))
	{
		inaStructure.putStringNotNullAndNotEmpty("Description", basicMeasure.getTagging().getByKey(oFF.QTransientConstants.TAG_OVERRIDE_DESCRIPTION));
	}
	if (exporter.getMode() === oFF.QModelFormat.INA_DATA_MERGE_PROCESSING && basicMeasure.isAvailableInMetadata() && basicMeasure.getModCounter() > 0)
	{
		inaStructure.putBoolean(oFF.InAQueryMergeConstants.TAG_MEASURE_MEMBER_TOUCHED, true);
	}
	return inaStructure;
};
oFF.QInAMemberBasicMeasure.prototype.exportMeasureReference = function(exporter, nameHolderStructure, referenceStringToIndicateMeasure, keyFieldValue, queryModel)
{
	oFF.QInAValueUtils.exportPlaceholderValue(exporter, referenceStringToIndicateMeasure, nameHolderStructure, keyFieldValue, keyFieldValue.getValueType(), queryModel);
};
oFF.QInAMemberBasicMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.BASIC_MEASURE;
};
oFF.QInAMemberBasicMeasure.prototype.getMemberOperandElement = function(exporter, inaStructure, basicMeasure, queryModel)
{
	let memberOperandElement = oFF.PrFactory.createStructure();
	memberOperandElement.putString("AttributeName", "Measures");
	inaStructure.put("MemberOperand", memberOperandElement);
	memberOperandElement.putString("Comparison", oFF.QInAConverter.lookupComparisonInA(oFF.ComparisonOperator.EQUAL));
	if (exporter.isVirtualInA(queryModel))
	{
		memberOperandElement.putStringNotNullAndNotEmpty("Description", basicMeasure.getText());
	}
	return memberOperandElement;
};
oFF.QInAMemberBasicMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = parentComponent;
	let newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	let newMemberText = oFF.QInAMember.getText(inaStructure, dimension);
	if (oFF.XStringUtils.isNullOrEmpty(newMemberName))
	{
		newMemberName = oFF.QInAMemberBasicMeasure.getNameFromOperand(inaStructure);
	}
	let structureMember = dimension.getStructureMember(newMemberName);
	let member = structureMember;
	if (oFF.isNull(member) && oFF.notNull(newMemberName))
	{
		if (!inaStructure.containsKey("Selection"))
		{
			member = dimension.addNewBasicMeasure(newMemberName, newMemberText);
		}
	}
	if (oFF.notNull(member))
	{
		oFF.QInAMemberBasicMeasure.importExceptionAggregation(inaStructure, dimension.getQueryModel(), member);
		importer.importExceptions(inaStructure, member);
	}
	return member;
};

oFF.QInAMemberRestrictedMeasure = function() {};
oFF.QInAMemberRestrictedMeasure.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMemberRestrictedMeasure.prototype._ff_c = "QInAMemberRestrictedMeasure";

oFF.QInAMemberRestrictedMeasure.addVirtualMeasureCountSelection = function(restrictedMeasure)
{
	let inaSelection = oFF.PrFactory.createStructure();
	let setOperand = inaSelection.putNewStructure("SetOperand");
	setOperand.putString("FieldName", restrictedMeasure.getDimension().getKeyField().getName());
	let operandEls = setOperand.putNewList("Elements");
	let elStructure = oFF.PrFactory.createStructure();
	operandEls.add(elStructure);
	elStructure.putString("Comparison", "=");
	elStructure.putString("Low", "$$Count$$");
	return inaSelection;
};
oFF.QInAMemberRestrictedMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let restrictedMeasure = modelComponent;
	let exportingMeasureInFullDefinition = oFF.QInAMember.exportingInOldFormat(exporter, restrictedMeasure);
	let memberName = exportingMeasureInFullDefinition ? "Name" : "MemberName";
	inaStructure.putString(memberName, restrictedMeasure.getName());
	oFF.QInAMember.exportText(exporter, inaStructure, restrictedMeasure);
	if (!restrictedMeasure.supportsExceptionAggregationDimsFormulas())
	{
		let aggregationDimensionName = restrictedMeasure.getAggregationDimensionName();
		if (oFF.notNull(aggregationDimensionName))
		{
			inaStructure.putString("AggregationDimension", aggregationDimensionName);
		}
	}
	let inaSelection = null;
	let filterRoot = restrictedMeasure.getFilterRootWithTransientTimeSelection();
	if (oFF.isNull(filterRoot))
	{
		if (restrictedMeasure.getFilterOnVirtualMeasureCount() && this.isExceptionAggregationTypeOfCount(restrictedMeasure.getExceptionAggregationType()))
		{
			inaSelection = oFF.QInAMemberRestrictedMeasure.addVirtualMeasureCountSelection(restrictedMeasure);
		}
		else if (restrictedMeasure.getAggregationDimensionName() !== null)
		{
			inaSelection = oFF.PrFactory.createStructure();
			let sb = oFF.XStringBuffer.create();
			sb.append(restrictedMeasure.getName()).append(":").append(restrictedMeasure.getAggregationDimensionName());
			inaSelection.putString("MeasureOperand", sb.toString());
		}
	}
	else if (exportingMeasureInFullDefinition)
	{
		inaSelection = exporter.exportFilterElement(filterRoot);
	}
	if (oFF.notNull(inaSelection))
	{
		inaStructure.put("Selection", inaSelection);
	}
	if (restrictedMeasure.hasVisibilityFilter() && restrictedMeasure.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
	{
		let visibilityFilter = exporter.exportFilterExpression(restrictedMeasure.getVisibilityFilter());
		if (oFF.notNull(visibilityFilter))
		{
			inaStructure.put("VisibilityFilter", visibilityFilter);
		}
	}
	this.exportPresentationSignReversal(exporter, restrictedMeasure, inaStructure);
	return inaStructure;
};
oFF.QInAMemberRestrictedMeasure.prototype.exportPresentationSignReversal = function(exporter, restrictedMeasure, inaStructure)
{
	if (!restrictedMeasure.isAutoSignFlip())
	{
		return;
	}
	let dim = restrictedMeasure.getDimension();
	let queryModel = dim.getQueryModel();
	let filter = restrictedMeasure.getFilter();
	if (dim.getDimensionType() !== oFF.DimensionType.ACCOUNT || oFF.isNull(filter))
	{
		return;
	}
	if (restrictedMeasure.requiresPresentationSignReversal(queryModel))
	{
		inaStructure.putBoolean("PresentationSignReversal", true);
	}
};
oFF.QInAMemberRestrictedMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.RESTRICTED_MEASURE;
};
oFF.QInAMemberRestrictedMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let member;
	if (oFF.isNull(modelComponent))
	{
		let dimension = parentComponent;
		let newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
		let newMemberText = oFF.QInAMember.getText(inaStructure, dimension);
		if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && dimension.getStructureMember(newMemberName) !== null)
		{
			member = dimension.getStructureMember(newMemberName);
		}
		else
		{
			member = dimension.addNewRestrictedMeasure(newMemberName, newMemberText);
		}
	}
	else
	{
		member = modelComponent;
	}
	let inaAggregationDimension = inaStructure.getStringByKey("AggregationDimension");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(inaAggregationDimension))
	{
		member.setAggregationDimensionName(inaAggregationDimension);
	}
	let restrictedMeasureStructure = inaStructure;
	if (member.getModelCapabilities().supportsCustomMeasuresInMetadata())
	{
		let memberDetailsKey = member.getDimension().isMeasureStructure() ? "[Measures].[MemberDetails]" : "[CustomDimension2].[MemberDetails]";
		restrictedMeasureStructure = inaStructure.getStructureByKey(memberDetailsKey);
	}
	importer.importFilterExpression(member.getFilter(), restrictedMeasureStructure, member, context);
	let inaVisibilityFilter = inaStructure.getStructureByKey("VisibilityFilter");
	if (oFF.notNull(inaVisibilityFilter) && member.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
	{
		let selectionVisibilityContainer = member.getVisibilityFilter();
		importer.importFilterExpression(selectionVisibilityContainer, inaVisibilityFilter, member, context);
	}
	importer.importExceptions(restrictedMeasureStructure, member);
	return member;
};
oFF.QInAMemberRestrictedMeasure.prototype.isExceptionAggregationTypeOfCount = function(exceptionAggregationType)
{
	return exceptionAggregationType === oFF.AggregationType.COUNT || exceptionAggregationType === oFF.AggregationType.COUNT_NULL || exceptionAggregationType === oFF.AggregationType.COUNT_NULL_ZERO;
};

oFF.QInAMembersAll = function() {};
oFF.QInAMembersAll.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAMembersAll.prototype._ff_c = "QInAMembersAll";

oFF.QInAMembersAll.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let allStructureMembers = dimension.getStructureLayout();
	if (oFF.notNull(allStructureMembers))
	{
		let isDimensionMeasure = dimension.isMeasureStructure();
		if (!isDimensionMeasure && allStructureMembers.isEmpty() && dimension.getStructureMemberLazyLoader() === null)
		{
			return null;
		}
		let membersList = inaStructure.putNewList("Members");
		let exportedRuntimeStructureMemberNames = oFF.XHashSetOfString.create();
		let size = allStructureMembers.size();
		let usedCustomMembers = null;
		for (let idxMember = 0; idxMember < size; idxMember++)
		{
			let structureMember = allStructureMembers.get(idxMember);
			if (oFF.notNull(structureMember) && !structureMember.isReleased())
			{
				let inaMember = null;
				let tagging = structureMember.getTagging();
				if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT && structureMember.isModelDefinedMember() && !tagging.containsKey(oFF.QTransientConstants.TAG_SERIALIZE_MEMBER))
				{
					continue;
				}
				if (tagging.containsKey(oFF.QTransientConstants.TAG_IS_INTEROP_GENERATED))
				{
					if (oFF.isNull(usedCustomMembers))
					{
						usedCustomMembers = dimension.getConvenienceCommands().getCustomStructureMembersInUse();
					}
					if (!usedCustomMembers.contains(structureMember.getName()))
					{
						continue;
					}
				}
				let runtimeStructureMember = structureMember.exportRuntimeObject(dimension, exporter);
				if (oFF.isNull(runtimeStructureMember))
				{
					continue;
				}
				if (!exportedRuntimeStructureMemberNames.contains(runtimeStructureMember.getName()))
				{
					inaMember = exporter.exportStructureMember(runtimeStructureMember);
					exportedRuntimeStructureMemberNames.add(runtimeStructureMember.getName());
				}
				if (oFF.notNull(inaMember) && inaMember.hasElements())
				{
					membersList.add(inaMember);
				}
			}
		}
	}
	return inaStructure;
};
oFF.QInAMembersAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEMBERS;
};
oFF.QInAMembersAll.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	if (dimension.supportsCustomMembers())
	{
		dimension.removeCustomMembers();
	}
	let inaMemberList = inaStructure.getListByKey("MembersRepo");
	if (oFF.isNull(inaMemberList))
	{
		inaMemberList = inaStructure.getListByKey("Members");
		if (oFF.isNull(inaMemberList))
		{
			return null;
		}
	}
	let structureLayout = dimension.getStructureLayout();
	if (oFF.notNull(structureLayout))
	{
		structureLayout.clear();
		let inaMemberListSize = inaMemberList.size();
		for (let iMember = 0; iMember < inaMemberListSize; iMember++)
		{
			let inaMember = inaMemberList.getStructureAt(iMember);
			let member = importer.importStructureMember(dimension, inaMember, context);
			if (oFF.notNull(member))
			{
				let member2 = dimension.getStructureMember(member.getName());
				if (oFF.isNull(member2))
				{
					dimension.addMeasure(member);
				}
				else
				{
					if (member2 !== member)
					{
						throw oFF.XException.createIllegalStateException("Internal error: New member with same name not allowed");
					}
					structureLayout.removeElement(member2);
					structureLayout.add(member2);
				}
			}
		}
	}
	return dimension;
};

oFF.QInAQuery = function() {};
oFF.QInAQuery.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAQuery.prototype._ff_c = "QInAQuery";

oFF.QInAQuery.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent;
	let isForRendering = exporter.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING;
	exporter.exportUniversalDisplayHierarchies(queryModel.getUniversalDisplayHierarchies(), inaStructure);
	let drillManager = queryModel.getDrillManager();
	exporter.exportDrillManager(drillManager, inaStructure);
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) && !drillManager.isValidatingContextFreeNavigations())
	{
		inaStructure.putBoolean("ValidateContextFreeNavigations", false);
	}
	let cellContextManager = queryModel.getCellContextManager();
	exporter.exportCellContextManager(cellContextManager, inaStructure);
	let withDataSource = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.DATASOURCE) > 0;
	if (withDataSource)
	{
		oFF.QInADataSource.exportDataSource(exporter, queryModel.getDataSource(), queryModel.getModelCapabilities().supportsRunAsUser(), inaStructure, false);
	}
	exporter.exportDimensions(queryModel, inaStructure);
	exporter.exportSortingManager(queryModel.getSortingManager(), inaStructure);
	exporter.exportCurrencyTranslationManager(queryModel.getCurrencyTranslationManager(), inaStructure);
	exporter.exportUnitTranslationManager(queryModel.getUnitTranslationManager(), inaStructure);
	if (!queryModel.hasProcessingStep() || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		exporter.exportDataCells(queryModel, inaStructure);
	}
	exporter.exportQuerySettings(queryModel, inaStructure);
	if (!isForRendering)
	{
		exporter.exportFilter(queryModel.getFilter(), inaStructure);
		exporter.exportExceptions(queryModel, inaStructure);
		exporter.exportQueryCells(queryModel.getQueryCellManager(), inaStructure);
	}
	exporter.exportConditionManager(queryModel.getConditionManager(), inaStructure);
	exporter.exportSimulationManager(queryModel.getSimulationManager(), inaStructure);
	let withVariables = oFF.XMath.binaryAnd(flags, oFF.QImExFlag.VARIABLES) > 0;
	if (withVariables && exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_NO_VARS && exporter.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
	{
		if (queryModel.isExportingVariables() || queryModel.hasProcessingStep())
		{
			exporter.exportVariables(queryModel.getVariableContainer(), inaStructure);
		}
	}
	let queryManager = queryModel.getQueryManager();
	if (queryModel.isBatchModeForMicroCube())
	{
		inaStructure.putString("Name", queryManager.getNameForMicroCubeUse());
	}
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		exporter.exportFormulaExceptionManager(queryModel.getFormulaExceptionManager(), inaStructure);
		this.exportPaging(inaStructure, queryModel);
		oFF.QInAOptions.exportSuppressKeyfigureCalculation(inaStructure, queryManager);
		let preQueries = queryModel.getPreQueries();
		if (oFF.notNull(preQueries))
		{
			let preQueriesSize = preQueries.size();
			if (preQueriesSize > 0)
			{
				let inaPreQueries = inaStructure.getListByKey("PreQueries");
				if (oFF.isNull(inaPreQueries))
				{
					inaPreQueries = inaStructure.putNewList("PreQueries");
				}
				let modeHolder = exporter.getMode();
				if (exporter.getOriginalMode() !== oFF.QModelFormat.INA_CLONE_RENDERING)
				{
					exporter.m_mode = exporter.getOriginalMode();
				}
				for (let i = 0; i < preQueriesSize; i++)
				{
					let preQuery = preQueries.get(i);
					let inaPreQuery = exporter.exportPreQuery(preQuery.getObject());
					let preQueryName = preQuery.getName();
					inaPreQuery.putString("ObjectName", preQueryName);
					inaPreQueries.add(inaPreQuery);
				}
				exporter.m_mode = modeHolder;
				inaStructure.put("PreQueries", inaPreQueries);
			}
		}
		let resultStructureController = queryModel.getResultStructureController();
		exporter.exportComponent(null, resultStructureController, inaStructure, flags);
		let featureToggles = oFF.InactiveCapabilityUtil.exportFeatureToggles(queryManager.getSession().getFeatureToggles());
		inaStructure.putString("ExperimentalFeatures", featureToggles);
		inaStructure.putString("ResultSetPersistanceTable", queryManager.getResultSetPersistenceTable());
		inaStructure.putString("ResultSetPersistanceSchema", queryManager.getResultSetPersistenceSchema());
		inaStructure.putString("ResultSetPersistanceIdentifier", queryManager.getResultSetPersistenceIdentifier());
	}
	return inaStructure;
};
oFF.QInAQuery.prototype.exportPaging = function(inaStructure, queryModel)
{
	let queryManager = queryModel.getQueryManager();
	if (!queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) || queryManager.recordingStateOfQueryManager())
	{
		return;
	}
	if (queryManager.getOffsetColumns() > 0 || queryManager.getOffsetRows() > 0 || queryManager.getMaxColumns() > -1 || queryManager.getMaxRows() > -1)
	{
		oFF.QInAOptions.exportPaging(inaStructure, queryManager);
	}
};
oFF.QInAQuery.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QInAQuery.prototype.getInactiveCapabilities = function(queryModel)
{
	let capabilities = oFF.XHashMapByString.create();
	let allCapabilities = oFF.FeatureToggle.getAllFeatureToggles();
	let allIterator = allCapabilities.getKeysAsIterator();
	while (allIterator.hasNext())
	{
		capabilities.put(allIterator.next(), oFF.XBooleanValue.create(false));
	}
	let experimentalFeatureSet = queryModel.getSession().getFeatureToggles();
	if (oFF.notNull(experimentalFeatureSet))
	{
		let activatedIterator = experimentalFeatureSet.getKeysAsIterator();
		while (activatedIterator.hasNext())
		{
			capabilities.put(activatedIterator.next(), oFF.XBooleanValue.create(true));
		}
	}
	return capabilities;
};
oFF.QInAQuery.prototype.importBlendingSources = function(importer, inaStructure, queryModel)
{
	let sources = queryModel.getBlendingSources();
	if (!oFF.XCollectionUtils.hasElements(sources))
	{
		return;
	}
	let inaDataSource = oFF.PrUtils.getStructureProperty(inaStructure, "DataSource");
	let inaSources = oFF.PrUtils.getListProperty(inaDataSource, "Sources");
	if (oFF.PrUtils.isListEmpty(inaSources))
	{
		return;
	}
	for (let i = 0; i < sources.size(); i++)
	{
		let inaSource = oFF.PrUtils.getStructureElement(inaSources, i);
		let inaDefinitionContext = oFF.PrUtils.getStructureProperty(inaSource, "DefiningContext");
		if (oFF.notNull(inaDefinitionContext))
		{
			let sourceQueryModel = sources.get(i).getQueryModel();
			sourceQueryModel.deserializeFromElementExt(importer.m_mode, inaDefinitionContext);
		}
	}
};
oFF.QInAQuery.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	let inaDefinition = inaStructure;
	let inaQueries = inaDefinition.getListByKey("Queries");
	if (oFF.notNull(inaQueries))
	{
		inaDefinition = inaQueries.getStructureAt(inaQueries.size() - 1);
	}
	let inaBatch = inaDefinition.getListByKey(oFF.ConnectionConstants.INA_BATCH);
	if (oFF.notNull(inaBatch))
	{
		inaDefinition = inaBatch.getStructureAt(inaBatch.size() - 1);
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Analytics"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Analytics");
		if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("Definition");
		}
	}
	if (oFF.notNull(inaDefinition) && inaDefinition.containsKey("Definition"))
	{
		inaDefinition = inaDefinition.getStructureByKey("Definition");
	}
	if (oFF.notNull(inaDefinition))
	{
		let isForRendering = importer.getOriginalMode() === oFF.QModelFormat.INA_CLONE_RENDERING && importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
		let isInaRepoMode = importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
		if (isInaRepoMode && inaDefinition.containsKey("ModellerDefinition"))
		{
			inaDefinition = inaDefinition.getStructureByKey("ModellerDefinition");
			importer.importModellerDimensions(inaDefinition, queryModel, queryModel);
			importer.importModellerCurrencyTranslation(inaDefinition, queryModel.getCurrencyTranslationManagerBase(), queryModel);
			importer.importModellerMetadataProperties(inaDefinition, queryModel, queryModel);
			importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
			return queryModel;
		}
		importer.importDimensions(inaDefinition, queryModel, queryModel);
		if (!isForRendering)
		{
			importer.importFilter(inaDefinition, queryModel.getFilterBase(), queryModel);
			importer.importExceptions(inaDefinition, queryModel);
			importer.importQueryCells(inaDefinition, queryModel.getQueryCellManager(), queryModel);
			importer.importUniversalDisplayHierarchies(inaDefinition, queryModel.getUniversalDisplayHierarchiesBase(), queryModel);
		}
		importer.importCurrencyTranslationManager(inaDefinition, queryModel.getCurrencyTranslationManager(), queryModel);
		importer.importUnitTranslationManager(inaDefinition, queryModel.getUnitTranslationManager(), queryModel);
		importer.importTranslationManager(inaDefinition, queryModel, context);
		importer.importSortingManager(inaDefinition, queryModel.getSortingManagerBase(), queryModel);
		importer.importDrillManager(inaDefinition, queryModel.getDrillManager(), queryModel);
		importer.importCellContextManager(inaDefinition, queryModel.getCellContextManager(), queryModel);
		if (importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_NO_VARS && importer.m_mode !== oFF.QModelFormat.INA_REPOSITORY_DATA_NO_VARS)
		{
			importer.importVariableManager(inaDefinition, queryModel.getVariableManagerBase(), queryModel);
		}
		importer.importQuerySettings(inaDefinition, queryModel);
		importer.importDataCells(inaDefinition, queryModel);
		importer.importConditionManager(inaDefinition, queryModel.getConditionManagerBase(), queryModel);
		if (isInaRepoMode)
		{
			importer.importFormulaExceptionManager(inaDefinition, queryModel.getFormulaExceptionManagerBase(), queryModel);
			this.importPaging(importer, inaDefinition, queryModel);
			oFF.QInAOptions.importSuppressKeyfigureCalculation(inaDefinition, queryModel.getQueryManager());
			let resultStructureController = queryModel.getResultStructureController();
			importer.importComponent(null, inaDefinition, resultStructureController, queryModel, queryModel);
			let queryManager = queryModel.getQueryManager();
			if (oFF.notNull(queryManager))
			{
				queryManager.setResultSetPersistanceTargetTable(inaDefinition.getStringByKey("ResultSetPersistanceTable"));
				queryManager.setResultSetPersistanceTargetSchema(inaDefinition.getStringByKey("ResultSetPersistanceSchema"));
				queryManager.setResultSetPersistenceIdentifier(inaDefinition.getStringByKey("ResultSetPersistanceIdentifier"));
			}
			let inaPreQueries = inaDefinition.getListByKey("PreQueries");
			if (oFF.notNull(inaPreQueries))
			{
				let mainQuerySystemname = null;
				let inaDataSource = inaDefinition.getStructureByKey("DataSource");
				if (oFF.notNull(inaDataSource))
				{
					mainQuerySystemname = inaDataSource.getStringByKey("System");
				}
				this.importPreQueries(importer, queryModel, inaPreQueries, mainQuerySystemname);
			}
			if (queryModel.isBlendingModel())
			{
				this.importBlendingSources(importer, inaStructure, queryModel);
			}
		}
	}
	return queryModel;
};
oFF.QInAQuery.prototype.importPaging = function(importer, inaDefinition, queryModel)
{
	let inaSubset = inaDefinition.getStructureByKey("SubSetDescription");
	let queryManager = queryModel.getQueryManager();
	let isForRendering = importer.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING;
	if (oFF.isNull(inaSubset) || !queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.PERSIST_PAGING_IN_REPO) || queryManager.applyingStateOnQueryManager() && !isForRendering)
	{
		return;
	}
	oFF.QInAOptions.importPaging(inaDefinition, queryManager);
};
oFF.QInAQuery.prototype.importPreQueries = function(importer, queryModel, inaPreQueries, mainQuerySystemname)
{
	let modeHolder = importer.getMode();
	if (importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE_RENDERING)
	{
		importer.m_mode = importer.getOriginalMode();
	}
	let capabilitiesToActivate = this.getInactiveCapabilities(queryModel);
	for (let i = 0; i < inaPreQueries.size(); i++)
	{
		let inaPreQuery = inaPreQueries.getStructureAt(i);
		let inaPreQueryName = inaPreQuery.getStringByKey("ObjectName");
		if (queryModel.getPreQueryByName(inaPreQueryName) !== null)
		{
			continue;
		}
		let inaRuntime = inaPreQuery.containsKey("Runtime") ? inaPreQuery.getStructureByKey("Runtime") : inaPreQuery;
		let inaDataSource = inaRuntime.getStructureByKey("DataSource");
		let datasource = oFF.XStringBuffer.create();
		datasource.append(inaDataSource.getStringByKey("Type")).append(":[");
		datasource.append(inaDataSource.getStringByKey("SchemaName"));
		datasource.append("][");
		datasource.append(inaDataSource.getStringByKey("PackageName"));
		datasource.append("][");
		datasource.append(inaDataSource.getStringByKey("ObjectName")).append("]");
		let preQuerySystemName = inaDataSource.getStringByKey("System");
		if (importer.m_mode === oFF.QModelFormat.INA_REPOSITORY && oFF.XString.isEqual(preQuerySystemName, mainQuerySystemname))
		{
			preQuerySystemName = queryModel.getDataSource().getSystemName();
		}
		let commandFactory = oFF.XCommandFactory.create(queryModel.getApplication());
		let xCmdDeserialize = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, queryModel.getApplication());
		xCmdDeserialize.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, capabilitiesToActivate);
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, preQuerySystemName);
		xCmdDeserialize.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, datasource.toString());
		let processCommand = xCmdDeserialize.processCommand(oFF.SyncType.BLOCKING, null, null);
		importer.addAllMessages(processCommand);
		oFF.XObjectExt.release(xCmdDeserialize);
		if (processCommand.isValid())
		{
			let preQuery = processCommand.getData().getResultParameter(oFF.CmdCreateQueryManager.PARAM_E_QUERY_MANAGER).getQueryModel();
			importer.importPreQuery(inaPreQuery, preQuery);
			queryModel.addPreQueryWithName(preQuery, inaPreQueryName);
		}
	}
	importer.m_mode = modeHolder;
};

oFF.QInAQueryCellsAll = function() {};
oFF.QInAQueryCellsAll.prototype = new oFF.QInAComponentWithList();
oFF.QInAQueryCellsAll.prototype._ff_c = "QInAQueryCellsAll";

oFF.QInAQueryCellsAll.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	if (!exporter.m_capabilities.supportsUniversalModel())
	{
		return null;
	}
	let queryCellManager = modelComponent;
	if (queryCellManager.isEmpty())
	{
		return null;
	}
	let inaQueryCells = oFF.PrFactory.createList();
	let queryCellIt = queryCellManager.getIterator();
	while (queryCellIt.hasNext())
	{
		let queryCell = queryCellIt.next();
		let inaQueryCell = inaQueryCells.addNewStructure();
		inaQueryCell.putString("Name", queryCell.getName());
		let inaPositions = inaQueryCell.putNewList("Position");
		let positions = queryCell.getPositions();
		let positionIt = positions.getIterator();
		while (positionIt.hasNext())
		{
			let queryCellPosition = positionIt.next();
			let inaPosition = inaPositions.addNewStructure();
			inaPosition.putString("DimensionName", queryCellPosition.getDimensionName());
			inaPosition.putString("MemberName", queryCellPosition.getMemberName());
		}
	}
	return inaQueryCells;
};
oFF.QInAQueryCellsAll.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_CELLS;
};
oFF.QInAQueryCellsAll.prototype.getTagName = function()
{
	return "Cells";
};
oFF.QInAQueryCellsAll.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	return null;
};

oFF.QInAQuerySettings = function() {};
oFF.QInAQuerySettings.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAQuerySettings.prototype._ff_c = "QInAQuerySettings";

oFF.QInAQuerySettings.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent;
	let definitionName = queryModel.getDefinitionName();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(definitionName))
	{
		inaStructure.putString("Name", definitionName);
	}
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) && !exporter.isAbap(queryModel) && !this.requiresMDSZeroSuppression(exporter, queryModel))
	{
		return inaStructure;
	}
	let inaQuery = inaStructure.getStructureByKey("Query");
	if (oFF.isNull(inaQuery))
	{
		inaQuery = inaStructure.putNewStructure("Query");
	}
	exporter.exportAxesSettings(queryModel, inaQuery);
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		let axesLayoutList = inaQuery.putNewList("AxesLayout");
		let allAxisTypes = oFF.AxisType.getAll();
		for (let axisTypeIndex = 0; axisTypeIndex < allAxisTypes.size(); axisTypeIndex++)
		{
			let axisType = allAxisTypes.get(axisTypeIndex);
			let axis = queryModel.getAxis(axisType);
			if (oFF.isNull(axis))
			{
				continue;
			}
			let dimensionNames = axis.getOrderedDimensionNames();
			if (oFF.isNull(dimensionNames))
			{
				continue;
			}
			let axisLayoutStructure = axesLayoutList.addNewStructure();
			axisLayoutStructure.putString("Axis", axis.getName());
			let orderedDimensionNamesList = axisLayoutStructure.putNewList("OrderedDimensionNames");
			orderedDimensionNamesList.addAllStrings(dimensionNames);
		}
	}
	return inaStructure;
};
oFF.QInAQuerySettings.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_SETTINGS;
};
oFF.QInAQuerySettings.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let definitionNameString = oFF.PrUtils.getStringProperty(inaStructure, "Name");
	let queryModel = context.getQueryModel();
	if (oFF.notNull(definitionNameString))
	{
		queryModel.setDefinitionName(definitionNameString.getString());
	}
	let inaQuery = inaStructure.getStructureByKey("Query");
	importer.importAxesSettings(inaQuery, queryModel);
	if (importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		let axesLayoutList = oFF.PrUtils.getListProperty(inaQuery, "AxesLayout");
		let len = oFF.PrUtils.getListSize(axesLayoutList, 0);
		for (let axesLayoutIndex = 0; axesLayoutIndex < len; axesLayoutIndex++)
		{
			let axisLayoutStructure = oFF.PrUtils.getStructureElement(axesLayoutList, axesLayoutIndex);
			let axisType = oFF.AxisType.lookup(oFF.PrUtils.getStringValueProperty(axisLayoutStructure, "Axis", null));
			let axis = queryModel.getAxis(axisType);
			if (oFF.isNull(axis))
			{
				continue;
			}
			let orderedDimensionNamesList = oFF.PrUtils.getListProperty(axisLayoutStructure, "OrderedDimensionNames");
			if (oFF.isNull(orderedDimensionNamesList))
			{
				continue;
			}
			let orderedDimensionNames = oFF.XList.create();
			for (let dimensionNameIndex = 0; dimensionNameIndex < oFF.PrUtils.getListSize(orderedDimensionNamesList, 0); dimensionNameIndex++)
			{
				let dimensionNameString = oFF.PrUtils.getStringElement(orderedDimensionNamesList, dimensionNameIndex);
				if (oFF.isNull(dimensionNameString))
				{
					continue;
				}
				orderedDimensionNames.add(dimensionNameString.getString());
			}
			axis.reOrderDimensions(orderedDimensionNames);
		}
	}
	return queryModel;
};
oFF.QInAQuerySettings.prototype.requiresMDSZeroSuppression = function(exporter, queryModel)
{
	if (!exporter.m_capabilities.supportsNullZeroSuppression())
	{
		return false;
	}
	let axesManager = queryModel.getAxesManager();
	if (oFF.isNull(axesManager))
	{
		return false;
	}
	let rowAxis = axesManager.getRowsAxis();
	let colAxis = axesManager.getColumnsAxis();
	return oFF.QInAAxesSettings.isDefinedZeroSuppression(rowAxis) || oFF.QInAAxesSettings.isDefinedZeroSuppression(colAxis);
};

oFF.QInASimulationManager = function() {};
oFF.QInASimulationManager.prototype = new oFF.QInAComponentWithStructure();
oFF.QInASimulationManager.prototype._ff_c = "QInASimulationManager";

oFF.QInASimulationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let simulationManager = modelComponent;
	if (oFF.notNull(simulationManager) && simulationManager.getSimulationStructure() !== null)
	{
		return simulationManager.getSimulationStructure();
	}
	return null;
};
oFF.QInASimulationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_SIMULATION_MANAGER;
};
oFF.QInASimulationManager.prototype.getTagName = function()
{
	return "Simulation";
};
oFF.QInASimulationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return modelComponent;
};

oFF.QInASort = function() {};
oFF.QInASort.prototype = new oFF.QInAComponentWithList();
oFF.QInASort.prototype._ff_c = "QInASort";

oFF.QInASort.prototype.addRequiredSortOperationsForUdhDimensions = function(exporter, sortingManager, sortingOperations)
{
	let sortedDimensions = oFF.XList.create();
	let requiredDimensionsForUdh = oFF.XList.create();
	for (let i = 0; i < sortingOperations.size(); i++)
	{
		let sortOperation = sortingOperations.get(i);
		let dimension = sortOperation.supportsDimension() ? sortOperation.getDimension() : null;
		if (oFF.notNull(dimension))
		{
			sortedDimensions.add(dimension.getName());
			if (oFF.QInAUniversalDisplayHierarchies.isHierarchyConverted(exporter, dimension))
			{
				requiredDimensionsForUdh.addAll(oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, dimension.getAxis()));
			}
		}
	}
	for (let k = 0; k < requiredDimensionsForUdh.size(); k++)
	{
		let requiredDimName = requiredDimensionsForUdh.get(k);
		if (!sortedDimensions.contains(requiredDimName))
		{
			sortingOperations.add(sortingManager.newDimensionSorting(sortingManager.getQueryModel().getDimensionByName(requiredDimName)));
		}
	}
};
oFF.QInASort.prototype.dropIncorrectBasicMeasuresIfAny = function(dimensionSorting)
{
	let dimension = dimensionSorting.getDimension();
	let originalSortList = dimensionSorting.getCustomSort();
	let customSortList = null;
	if (oFF.notNull(originalSortList))
	{
		customSortList = originalSortList.createListCopy();
		if (dimension.isMeasureStructure())
		{
			for (let i = 0; i < customSortList.size(); )
			{
				let elementInList = customSortList.get(i);
				let structureMember = dimension.getAllStructureMembers().getByKey(elementInList);
				if (oFF.isNull(structureMember))
				{
					customSortList.removeAt(i);
					continue;
				}
				if (structureMember.getMemberType() === oFF.MemberType.BASIC_MEASURE)
				{
					let basicMeasure = structureMember;
					if (basicMeasure.isNotFromMetadata())
					{
						customSortList.removeAt(i);
						continue;
					}
				}
				i++;
			}
		}
	}
	return customSortList;
};
oFF.QInASort.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	if (!exporter.m_capabilities.supportsExtendedSort())
	{
		return null;
	}
	let inaSortOps = oFF.PrFactory.createList();
	let sortingManager = modelComponent;
	let sortingOperations = sortingManager.getSortingOperations().createListCopy();
	this.addRequiredSortOperationsForUdhDimensions(exporter, sortingManager, sortingOperations);
	let size = sortingOperations.size();
	for (let i = 0; i < size; i++)
	{
		let sortOp = sortingOperations.get(i);
		let dimension = null;
		let convertedLbhDimension = null;
		if (sortOp.supportsDimension())
		{
			dimension = sortOp.getDimension();
		}
		if (oFF.notNull(dimension))
		{
			let axisType = dimension.getAxisType();
			if (oFF.notNull(axisType) && axisType !== oFF.AxisType.ROWS && axisType !== oFF.AxisType.COLUMNS && axisType !== oFF.AxisType.FREE)
			{
				continue;
			}
			if (axisType === oFF.AxisType.FREE)
			{
				convertedLbhDimension = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchyWhichContainsGivenDim(exporter, dimension);
				if (oFF.isNull(convertedLbhDimension) || sortingManager.getDimensionSorting(convertedLbhDimension, false) === null)
				{
					continue;
				}
			}
			if (dimension.isUniversalDisplayHierarchyDimension())
			{
				continue;
			}
		}
		let skipExport = exporter.getMode() === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && sortOp.getModelCapabilities().supportsPersistedInA() && sortOp.isCreatedFromMetadata() && sortOp.getOlapComponentType() === oFF.OlapComponentType.DIMENSION_SORTING && sortOp.getModCounter() === 0;
		if (skipExport)
		{
			continue;
		}
		let sortingType = sortOp.getSortingType();
		if (sortingType === oFF.SortType.FIELD)
		{
			let fieldSorting = sortOp;
			let fieldSortingDimension = fieldSorting.getField().getDimension();
			if (oFF.notNull(fieldSortingDimension))
			{
				let contextDimension = fieldSorting.getQueryModel().getDimensionByName(fieldSortingDimension.getName());
				if (oFF.isNull(contextDimension) || oFF.QInAExportUtil.isFormulaCalculatedDimensionHidden(contextDimension))
				{
					continue;
				}
			}
		}
		else if (sortingType === oFF.SortType.MEASURE)
		{
			let measureSorting = sortOp;
			let primaryMeasure = measureSorting.getMeasure();
			if (oFF.isNull(primaryMeasure) || primaryMeasure.isReleased())
			{
				continue;
			}
		}
		let inaSortOp = oFF.PrFactory.createStructure();
		inaSortOp.putString("SortType", oFF.QInAConverter.lookupSortTypeInA(sortingType));
		let direction = this.getSortDirection(sortOp, sortingManager, convertedLbhDimension);
		if (direction !== oFF.XSortDirection.DEFAULT_VALUE)
		{
			inaSortOp.putString("Direction", oFF.QInAConverter.lookupSortDirectionInA2(direction));
		}
		else if (sortingType === oFF.SortType.MEASURE)
		{
			continue;
		}
		this.exportGenericSorting(sortOp, inaSortOp);
		if (sortingType === oFF.SortType.FIELD)
		{
			this.exportFieldSorting(sortOp, inaSortOp, exporter);
		}
		else if (sortingType === oFF.SortType.MEASURE)
		{
			this.exportMeasureSorting(sortOp, inaSortOp);
		}
		else if (sortingType === oFF.SortType.DATA_CELL_VALUE || sortingType === oFF.SortType.COMPLEX)
		{
			this.exportPathSorting(sortOp, inaSortOp, exporter);
		}
		else if (sortingType === oFF.SortType.HIERARCHY)
		{
			if (!sortOp.getDimension().isHierarchyAssignedAndActive())
			{
				inaSortOp = null;
			}
		}
		else if (sortingType === oFF.SortType.MEMBER_KEY)
		{
			let measureDimensionSorting = sortOp;
			let customSortList = this.dropIncorrectBasicMeasuresIfAny(measureDimensionSorting);
			this.exportCustomSortDetails(customSortList, measureDimensionSorting.getCustomSortPosition(), inaSortOp, measureDimensionSorting.getQueryModel(), exporter);
		}
		if (oFF.notNull(inaSortOp))
		{
			oFF.QInAExportUtil.setNameIfNotNull(inaSortOp, "Dimension", dimension);
			inaSortOps.add(inaSortOp);
		}
	}
	let mode = exporter.m_mode;
	if (mode.isTypeOf(oFF.QModelFormat.INA_DATA) || mode === oFF.QModelFormat.INA_VALUE_HELP)
	{
		inaSortOps = oFF.QInAExportUtil.extendList(sortingManager, inaSortOps);
	}
	if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.NO_EMPTY_SORT) && inaSortOps.isEmpty())
	{
		return null;
	}
	return inaSortOps;
};
oFF.QInASort.prototype.exportCustomSortDetails = function(customOrder, customSortPosition, inaSortOp, queryModel, exporter)
{
	if (oFF.XCollectionUtils.hasElements(customOrder))
	{
		let customOrderList = inaSortOp.putNewList("CustomSort");
		let customOrderSize = customOrder.size();
		for (let customOrderIndex = 0; customOrderIndex < customOrderSize; customOrderIndex++)
		{
			let sortValue = customOrder.get(customOrderIndex);
			if (oFF.notNull(queryModel) && oFF.notNull(exporter))
			{
				sortValue = oFF.QInAExportUtil.getMeasureMemberNameByAlias(queryModel, sortValue, exporter);
			}
			customOrderList.addString(sortValue);
		}
	}
	oFF.QInAExportUtil.setNameIfNotNull(inaSortOp, "CustomSortPosition", customSortPosition);
};
oFF.QInASort.prototype.exportFieldSorting = function(sortOp, inaSortOp, exporter)
{
	let fieldSorting = sortOp;
	inaSortOp.putString("FieldName", fieldSorting.getField().getName());
	let customOrder = fieldSorting.getCustomSort();
	this.exportCustomSortDetails(customOrder, fieldSorting.getCustomSortPosition(), inaSortOp, sortOp.getQueryModel(), exporter);
	if (inaSortOp.getListByKey("CustomSort") !== null)
	{
		inaSortOp.remove("Collator");
	}
};
oFF.QInASort.prototype.exportGenericSorting = function(sortOp, inaSortOp)
{
	if (sortOp.supportsPreserveGrouping() && sortOp.supportsBreakGrouping())
	{
		inaSortOp.putBoolean("PreserveGrouping", sortOp.isPreserveGroupingEnabled());
	}
	if (sortOp.getModelCapabilities().supportsLocaleSorting())
	{
		let inaCollator = oFF.PrFactory.createStructure();
		inaCollator.putBoolean("CaseSensitive", sortOp.isCaseSensitive());
		let icuLocale = sortOp.getLocale();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(icuLocale))
		{
			inaCollator.putString("Locale", icuLocale);
		}
		if (inaCollator.hasElements())
		{
			inaSortOp.put("Collator", inaCollator);
		}
	}
};
oFF.QInASort.prototype.exportMeasureSorting = function(sortOp, inaSortOp)
{
	let measureSorting = sortOp;
	let measureName = measureSorting.getMeasure().getName();
	inaSortOp.putString("MeasureName", measureName);
	let structureMember = measureSorting.getSecondaryMeasure();
	oFF.QInAExportUtil.setNameIfNotNull(inaSortOp, "StructureName", structureMember);
};
oFF.QInASort.prototype.exportPathSorting = function(sortOp, inaSortOp, exporter)
{
	let inaPath = inaSortOp.putNewList("SortTuple");
	let elementPath = sortOp.getElementPath();
	let pathSize = elementPath.size();
	for (let idxPath = 0; idxPath < pathSize; idxPath++)
	{
		let dimElement = elementPath.get(idxPath);
		let inaPathElement = inaPath.addNewStructure();
		inaPathElement.putString("FieldName", dimElement.getSelectField().getName());
		let memberType = dimElement.getSelectMemberType();
		if (oFF.notNull(memberType) && exporter.m_capabilities.supportsSortTupleMemberType())
		{
			inaPathElement.putInteger("MemberType", oFF.QInAConverter.lookupResultsetMemberTypeInA(memberType));
		}
		if (!exporter.m_capabilities.supportsSortTupleMemberType() || oFF.isNull(memberType) || memberType === oFF.MemberType.MEMBER)
		{
			let sortValue = oFF.QInAExportUtil.getMeasureMemberNameByAlias(sortOp.getQueryModel(), dimElement.getSelectValue(), exporter);
			inaPathElement.putString("Value", sortValue);
		}
		let selectHierarchyName = dimElement.getSelectHierarchyName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(selectHierarchyName))
		{
			inaPathElement.putString("Hierarchy", selectHierarchyName);
		}
	}
};
oFF.QInASort.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SORT_MANAGER;
};
oFF.QInASort.prototype.getSortDirection = function(sortOp, sortingManager, convertedLbhDimension)
{
	if (oFF.notNull(convertedLbhDimension) && convertedLbhDimension !== sortOp.getDimension())
	{
		let sorting = sortingManager.getDimensionSorting(convertedLbhDimension, false);
		if (oFF.notNull(sorting))
		{
			return sorting.getDirection();
		}
	}
	return sortOp.getDirection();
};
oFF.QInASort.prototype.getTagName = function()
{
	return "Sort";
};
oFF.QInASort.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let sortingManager = modelComponent;
	if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT && importer.m_capabilities.supportsExtendedSort())
	{
		sortingManager.getSortingOperations().clear();
		if (oFF.notNull(inaList))
		{
			let queryModel = sortingManager.getQueryModel();
			for (let sortIdx = 0; sortIdx < inaList.size(); sortIdx++)
			{
				let inaSort = inaList.getStructureAt(sortIdx);
				let inaSortType = inaSort.getStringByKey("SortType");
				let sortType = oFF.QInAConverter.lookupSortType(inaSortType);
				let sortingOp;
				if (sortType === oFF.SortType.FIELD)
				{
					sortingOp = this.importFieldSorting(sortingManager, queryModel, inaSort);
				}
				else if (sortType === oFF.SortType.MEASURE)
				{
					sortingOp = this.importMeasureSorting(sortingManager, queryModel, inaSort);
				}
				else if (sortType === oFF.SortType.DATA_CELL_VALUE || sortType === oFF.SortType.COMPLEX)
				{
					sortingOp = this.importPathSorting(context, sortingManager, queryModel, inaSort, sortType);
				}
				else
				{
					sortingOp = this.importDimensionSorting(sortingManager, queryModel, inaSort, sortType);
				}
				if (oFF.notNull(sortingOp))
				{
					this.importGenericSorting(queryModel, inaSort, sortingOp);
				}
			}
		}
	}
	return sortingManager;
};
oFF.QInASort.prototype.importCustomSortDetails = function(dimensionSorting, inaSort)
{
	let customSortList = inaSort.getListByKey("CustomSort");
	if (!oFF.PrUtils.isListEmpty(customSortList))
	{
		let customSort = oFF.PrUtils.asListOfString(customSortList);
		dimensionSorting.setCustomSort(customSort);
		let customSortPosition = oFF.CustomSortPosition.lookup(inaSort.getStringByKey("CustomSortPosition"));
		dimensionSorting.setCustomSortPosition(customSortPosition);
	}
};
oFF.QInASort.prototype.importDimensionSorting = function(sortingManager, queryModel, inaSort, sortType)
{
	let dimension = queryModel.getDimensionByNameFromExistingMetadata(inaSort.getStringByKey("Dimension"));
	if (oFF.isNull(dimension) || dimension.isUniversalDisplayHierarchyDimension() || !dimension.supportsSorting(null))
	{
		return null;
	}
	let dimensionSorting = sortingManager.getDimensionSorting(dimension, true);
	if (sortType === oFF.SortType.FILTER)
	{
		dimensionSorting.setSortByFilter();
	}
	else if (sortType === oFF.SortType.MEMBER_KEY)
	{
		dimensionSorting.setSortByKey();
		this.importCustomSortDetails(dimensionSorting, inaSort);
	}
	else if (sortType === oFF.SortType.MEMBER_TEXT)
	{
		dimensionSorting.setSortByText();
	}
	else if (sortType === oFF.SortType.HIERARCHY)
	{
		dimensionSorting.setSortByHierarchy();
	}
	return dimensionSorting;
};
oFF.QInASort.prototype.importFieldSorting = function(sortingManager, queryModel, inaSort)
{
	let fieldName = inaSort.getStringByKey("FieldName");
	let fieldSorting = null;
	if (oFF.notNull(fieldName))
	{
		let field = queryModel.getFieldByName(fieldName);
		if (oFF.notNull(field))
		{
			fieldSorting = sortingManager.getFieldSorting(field, true);
		}
	}
	return fieldSorting;
};
oFF.QInASort.prototype.importGenericSorting = function(queryModel, inaSort, sortingOp)
{
	let inaDirection = inaSort.getStringByKey("Direction");
	if (oFF.notNull(inaDirection))
	{
		let sortDirection = oFF.QInAConverter.lookupSortDirection2(inaDirection);
		if (oFF.notNull(sortDirection))
		{
			sortingOp.setDirection(sortDirection);
		}
	}
	if (sortingOp.supportsPreserveGrouping() && sortingOp.supportsBreakGrouping())
	{
		sortingOp.setPreserveGrouping(inaSort.getBooleanByKeyExt("PreserveGrouping", false));
	}
	if (queryModel.getModelCapabilities().supportsLocaleSorting())
	{
		let inaCollator = inaSort.getStructureByKey("Collator");
		if (oFF.notNull(inaCollator))
		{
			sortingOp.setIsCaseSensitive(inaCollator.getBooleanByKeyExt("CaseSensitive", false));
			sortingOp.setLocale(inaCollator.getStringByKeyExt("Locale", null));
		}
	}
	sortingOp.setCreatedFromMetadata(true);
};
oFF.QInASort.prototype.importMeasureSorting = function(sortingManager, queryModel, inaSort)
{
	let measureName = inaSort.getStringByKey("MeasureName");
	let measureSorting = null;
	if (oFF.notNull(measureName))
	{
		let measureDimension = queryModel.getMeasureDimension();
		let measure = measureDimension.getStructureMember(measureName);
		if (oFF.notNull(measure))
		{
			measureSorting = sortingManager.getMeasureSorting(measure, true);
		}
		let structureName = inaSort.getStringByKey("StructureName");
		let structure = queryModel.getNonMeasureDimension();
		if (oFF.notNull(structureName) && oFF.notNull(structure) && oFF.notNull(measureSorting))
		{
			measureSorting.setSecondaryMeasure(structure.getStructureMember(structureName));
		}
	}
	return measureSorting;
};
oFF.QInASort.prototype.importPathSorting = function(context, sortingManager, queryModel, inaSort, sortType)
{
	let inaPath = inaSort.getListByKey("SortTuple");
	if (inaPath.isEmpty())
	{
		return null;
	}
	let path = oFF.XList.create();
	for (let idxStruct = 0; idxStruct < inaPath.size(); idxStruct++)
	{
		let pathElement = inaPath.getStructureAt(idxStruct);
		let inaFieldName = pathElement.getStringByKey("FieldName");
		let inaValue = pathElement.getStringByKey("Value");
		if (oFF.notNull(inaFieldName) && oFF.notNull(inaValue))
		{
			let field = queryModel.getFieldByName(inaFieldName);
			if (oFF.isNull(field))
			{
				return null;
			}
			let inaHierarchyName = pathElement.getStringByKey("Hierarchy");
			if (pathElement.containsKey("MemberType"))
			{
				let inaMemberType = pathElement.getIntegerByKey("MemberType");
				path.add(oFF.QSelectValue._createDimensionElementWithMemberType(oFF.QInAConverter.lookupMemberType(inaMemberType), field, inaHierarchyName, inaValue));
			}
			else
			{
				path.add(oFF.QSelectValue._createDimensionElement2(context, field, inaHierarchyName, inaValue));
			}
		}
		else
		{
			return null;
		}
	}
	if (sortType === oFF.SortType.DATA_CELL_VALUE)
	{
		return sortingManager.getDataCellSorting(path, true);
	}
	return sortingManager.getComplexSorting(path, true);
};

oFF.QInATotals = function() {};
oFF.QInATotals.prototype = new oFF.QInAComponentWithStructure();
oFF.QInATotals.prototype._ff_c = "QInATotals";

oFF.QInATotals.prototype.exportAlignment = function(exporter, controller, inaResultStructure)
{
	if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) && !exporter.isAbap(controller.getQueryModel()))
	{
		return;
	}
	if (controller.supportsResultAlignment())
	{
		if (!controller.isTotalsAlignmentOnDefault())
		{
			let resultAlignment = controller.getResultAlignment();
			if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
			{
				if (resultAlignment === oFF.ResultAlignment.STRUCTURE)
				{
					resultAlignment = null;
				}
			}
			if (oFF.notNull(resultAlignment))
			{
				inaResultStructure.putString("ResultAlignment", oFF.QInAConverter.lookupAlignmentInA(resultAlignment));
			}
		}
	}
};
oFF.QInATotals.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let controller = modelComponent;
	if (controller.supportsTotals())
	{
		let inaResultStructure;
		if (exporter.m_mode.containsMetadata() || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			inaResultStructure = inaStructure.putNewStructure("ResultStructureBag");
		}
		else
		{
			inaResultStructure = inaStructure;
		}
		this.exportAlignment(exporter, controller, inaResultStructure);
		if (controller.supportsResultVisibility())
		{
			if (!controller.isTotalsVisibilityOnDefault() || controller.getModelLevel() === oFF.QModelLevel.DIMENSIONS)
			{
				let resultStructure = controller.getTotalsStructure();
				if (oFF.XCollectionUtils.hasElements(resultStructure))
				{
					this.exportResultStructureItems(inaResultStructure, resultStructure, controller);
				}
			}
		}
	}
	return inaStructure;
};
oFF.QInATotals.prototype.exportResultStructureElement = function(inaParent, visibility, elementName)
{
	let resultStructureLine = inaParent.addNewStructure();
	resultStructureLine.putString("Result", elementName);
	resultStructureLine.putString("Visibility", oFF.QInAConverter.lookupResultSetVisibilityInA(visibility));
};
oFF.QInATotals.prototype.exportResultStructureItems = function(inaResultStructure, resultStructure, controller)
{
	let structure = inaResultStructure.putNewList("ResultStructure");
	let size = resultStructure.size();
	for (let i = 0; i < size; i++)
	{
		let item = resultStructure.get(i);
		let visibility = item.getResultVisibility();
		if (!this.isResultVisible(controller, visibility))
		{
			continue;
		}
		let element = item.getResultStructureElement();
		if (element === oFF.ResultStructureElement.MEMBERS)
		{
			this.exportResultStructureElement(structure, visibility, "Members");
		}
		else if (element === oFF.ResultStructureElement.TOTAL)
		{
			this.exportResultStructureElement(structure, visibility, "Total");
		}
		else if (element === oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS)
		{
			if (this.supportsConditionalResult(controller, element))
			{
				this.exportResultStructureElement(structure, visibility, "TotalIncludedMembers");
			}
		}
		else if (element === oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS)
		{
			if (this.supportsConditionalResult(controller, element))
			{
				this.exportResultStructureElement(structure, visibility, "TotalRemainingMembers");
			}
		}
		else if (element === oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS)
		{
			if (controller.getModelCapabilities().supportsOthersFromConditions() && controller.getQueryModel().getConditionManager().hasConditions())
			{
				this.exportResultStructureElement(structure, visibility, "OthersFromConditions");
			}
		}
		else if (element === oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS)
		{
			if (controller.getModelCapabilities().supportsOthersDetailsFromConditions() && controller.getQueryModel().getConditionManager().hasConditions())
			{
				this.exportResultStructureElement(structure, visibility, "OthersDetailsFromConditions");
			}
		}
	}
};
oFF.QInATotals.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.TOTALS;
};
oFF.QInATotals.prototype.getResultStructure = function(inaStructure)
{
	let inaResultStructure = inaStructure.getStructureByKey("ResultStructureBag");
	if (oFF.isNull(inaResultStructure))
	{
		inaResultStructure = inaStructure.getStructureByKey("DefaultResultStructure");
		if (oFF.isNull(inaResultStructure))
		{
			return inaStructure;
		}
	}
	return inaResultStructure;
};
oFF.QInATotals.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (importer.m_mode !== oFF.QModelFormat.INA_DATA_REINIT)
	{
		let controller = modelComponent;
		if (controller.supportsResultVisibility())
		{
			let inaResultStructure = this.getResultStructure(inaStructure);
			let alignment = this.importResultAlignment(controller, inaResultStructure);
			controller.restoreTotalsVisibility(oFF.RestoreAction.DEFAULT_VALUE, false);
			let inaInnerResultStructure = inaResultStructure.getListByKey("ResultStructure");
			if (oFF.notNull(inaInnerResultStructure))
			{
				let flexibleResultStructure;
				if (controller.supportsAdvancedResultStructure() && alignment === oFF.ResultAlignment.STRUCTURE)
				{
					flexibleResultStructure = controller.getAdvancedResultStructure();
					flexibleResultStructure.clear();
					if (oFF.isNull(alignment))
					{
						controller.setResultAlignmentBase(oFF.ResultAlignment.STRUCTURE, true);
					}
				}
				else
				{
					flexibleResultStructure = null;
				}
				let size = inaInnerResultStructure.size();
				for (let i = 0; i < size; i++)
				{
					let resultStructureItem = inaInnerResultStructure.getStructureAt(i);
					this.importResultStructureItem(resultStructureItem, controller, flexibleResultStructure);
				}
			}
		}
	}
	return null;
};
oFF.QInATotals.prototype.importResultAlignment = function(controller, inaResultStructure)
{
	if (controller.supportsResultAlignment())
	{
		controller.restoreTotalsAlignment(oFF.RestoreAction.DEFAULT_VALUE, false);
		let inaResultAlignment = inaResultStructure.getStringByKey("ResultAlignment");
		if (oFF.XStringUtils.isNullOrEmpty(inaResultAlignment))
		{
			return null;
		}
		let alignment = oFF.QInAConverter.lookupAlignment(inaResultAlignment);
		controller.setResultAlignmentBase(alignment, false);
		return alignment;
	}
	return null;
};
oFF.QInATotals.prototype.importResultStructureItem = function(resultStructureItem, controller, flexibleResultStructure)
{
	let resultStructureElement = resultStructureItem.getStringByKey("Result");
	let element;
	if (oFF.XString.isEqual(resultStructureElement, "Members"))
	{
		element = oFF.ResultStructureElement.MEMBERS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "Total"))
	{
		element = oFF.ResultStructureElement.TOTAL;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "TotalIncludedMembers"))
	{
		element = oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "TotalRemainingMembers"))
	{
		element = oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "Others"))
	{
		element = oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS;
	}
	else if (oFF.XString.isEqual(resultStructureElement, "OthersDetailsFromConditions"))
	{
		element = oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS;
	}
	else
	{
		return;
	}
	let inaVisibility = resultStructureItem.getStringByKey("Visibility");
	let visibility = oFF.QInAConverter.lookupResultSetVisibility(inaVisibility);
	if (oFF.isNull(flexibleResultStructure))
	{
		controller.setResultVisibilityByElement(element, visibility);
	}
	else
	{
		flexibleResultStructure.addWithVisibility(element, visibility);
	}
};
oFF.QInATotals.prototype.isResultVisible = function(controller, visibility)
{
	return visibility === oFF.ResultVisibility.VISIBLE || visibility === oFF.ResultVisibility.ALWAYS || visibility === oFF.ResultVisibility.CONDITIONAL && controller.getModelCapabilities().supportsConditionalResultVisibility();
};
oFF.QInATotals.prototype.supportsConditionalResult = function(controller, element)
{
	let modelCapabilities = controller.getModelCapabilities();
	return modelCapabilities.supportsConditionalResults() && modelCapabilities.getSupportedConditionalResults().contains(element);
};

oFF.QInATranslationsManager = function() {};
oFF.QInATranslationsManager.prototype = new oFF.QInAComponentWithStructure();
oFF.QInATranslationsManager.prototype._ff_c = "QInATranslationsManager";

oFF.QInATranslationsManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};
oFF.QInATranslationsManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEASURE_TRANSLATIONS;
};
oFF.QInATranslationsManager.prototype.getTagName = function()
{
	return "Translations";
};
oFF.QInATranslationsManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	if (oFF.notNull(inaStructure))
	{
		if (inaStructure.containsKey("CurrencyTranslations"))
		{
			this.importCurrencyTranslationWithStructure(importer, inaStructure, queryModel, context);
		}
		if (inaStructure.containsKey("UnitTranslations"))
		{
			this.importUnitTranslationWithStructure(importer, inaStructure, queryModel, context);
		}
	}
	return queryModel;
};
oFF.QInATranslationsManager.prototype.importCurrencyTranslationWithStructure = function(importer, inaStructure, queryModel, context)
{
	let currencyTranslationManagerBase = queryModel.getCurrencyTranslationManagerBase();
	let inaList = inaStructure.getListByKey("CurrencyTranslations");
	if (oFF.notNull(inaList))
	{
		if (oFF.notNull(currencyTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
		{
			let size = inaList.size();
			for (let i = 0; i < size; i++)
			{
				let inaSpecificCurrencyTranslation = inaList.getStructureAt(i);
				let name = inaSpecificCurrencyTranslation.getStringByKey("Name");
				let description = inaSpecificCurrencyTranslation.getStringByKey("Description");
				let currencyTranslation = currencyTranslationManagerBase.addNewMeasureCurrencyTranslationBase(name, description);
				importer.importCurrencyTranslationElement(inaSpecificCurrencyTranslation, currencyTranslation, context);
			}
		}
	}
};
oFF.QInATranslationsManager.prototype.importUnitTranslationWithStructure = function(importer, inaStructure, queryModel, context)
{
	let unitTranslationManagerBase = queryModel.getUnitTranslationManagerBase();
	let inaList = inaStructure.getListByKey("UnitTranslations");
	if (oFF.notNull(inaList))
	{
		if (oFF.notNull(unitTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
		{
			let size = inaList.size();
			for (let i = 0; i < size; i++)
			{
				let inaSpecificUnitTranslation = inaList.getStructureAt(i);
				let name = inaSpecificUnitTranslation.getStringByKey("Name");
				let description = inaSpecificUnitTranslation.getStringByKey("Description");
				let unitTranslation = unitTranslationManagerBase.addNewMeasureUnitTranslationBase(name, description);
				importer.importUnitTranslationElement(inaSpecificUnitTranslation, unitTranslation, context);
			}
		}
	}
};

oFF.QInAUnitTranslationItem = function() {};
oFF.QInAUnitTranslationItem.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAUnitTranslationItem.prototype._ff_c = "QInAUnitTranslationItem";

oFF.QInAUnitTranslationItem.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let measureUnitTranslation = modelComponent;
	if (oFF.notNull(measureUnitTranslation))
	{
		inaStructure.putString("Name", measureUnitTranslation.getName());
		inaStructure.putStringNotNullAndNotEmpty("DimensionName", measureUnitTranslation.getDimensionName());
		inaStructure.putStringNotNullAndNotEmpty("Description", measureUnitTranslation.getText());
		inaStructure.putStringNotNullAndNotEmpty("RateLookUp", oFF.QInAConverter.lookupUtRateLookupInA(measureUnitTranslation.getRateLookup()));
		inaStructure.putStringNotNullAndNotEmpty("ErrorHandling", oFF.QInAConverter.lookupUtErrorHandlingModeInA(measureUnitTranslation.getErrorHandling()));
		this.exportTargetUnit(inaStructure, measureUnitTranslation.getTargetUnit());
	}
	return inaStructure;
};
oFF.QInAUnitTranslationItem.prototype.exportTargetUnit = function(inaStructure, targetUnit)
{
	if (oFF.notNull(targetUnit))
	{
		if (targetUnit.isFixed())
		{
			inaStructure.putNewStructure("TargetUnit").putString("Fixed", targetUnit.getFixedValue().getStringRepresentation());
		}
		else if (targetUnit.isFieldBased())
		{
			inaStructure.putNewStructure("TargetUnit").putString("DimensionAttribute", targetUnit.getFieldName());
		}
		else if (targetUnit.isVariableBased())
		{
			inaStructure.putNewStructure("TargetUnit").putString("Variable", targetUnit.getVariableName());
		}
	}
};
oFF.QInAUnitTranslationItem.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIT_TRANSLATION_ITEM;
};
oFF.QInAUnitTranslationItem.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let unitTranslation = modelComponent;
	if (oFF.notNull(unitTranslation) && oFF.XCollectionUtils.hasElements(inaStructure))
	{
		unitTranslation.setDimensionName(inaStructure.getStringByKey("DimensionName"));
		unitTranslation.setRateLookup(oFF.QInAConverter.lookupUtRateLookup(inaStructure.getStringByKey("RateLookUp")));
		unitTranslation.setErrorHandling(oFF.QInAConverter.lookupUtErrorHandlingMode(inaStructure.getStringByKey("ErrorHandling")));
		this.importUnitData(unitTranslation.getTargetUnit(), inaStructure.getStructureByKey("TargetUnit"));
		unitTranslation.setMetadataDefined(true);
	}
	return unitTranslation;
};
oFF.QInAUnitTranslationItem.prototype.importUnitData = function(unitLookupValue, unitStructure)
{
	if (oFF.notNull(unitLookupValue) && oFF.notNull(unitStructure))
	{
		if (unitStructure.containsKey("Fixed"))
		{
			unitLookupValue.setFixedValue(oFF.XStringValue.create(unitStructure.getStringByKey("Fixed")));
		}
		else if (unitStructure.containsKey("DimensionAttribute"))
		{
			unitLookupValue.setFieldName(unitStructure.getStringByKey("DimensionAttribute"));
		}
		else if (unitStructure.containsKey("Variable"))
		{
			unitLookupValue.setVariableName(unitStructure.getStringByKey("Variable"));
		}
	}
};

oFF.QInAUnitTranslationManager = function() {};
oFF.QInAUnitTranslationManager.prototype = new oFF.QInAComponentWithList();
oFF.QInAUnitTranslationManager.prototype._ff_c = "QInAUnitTranslationManager";

oFF.QInAUnitTranslationManager.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let inaUnitTranslationsList = null;
	let unitTranslationManager = modelComponent;
	let specificUnitTranslations = unitTranslationManager.getMeasureUnitTranslations();
	if (oFF.XCollectionUtils.hasElements(specificUnitTranslations))
	{
		inaUnitTranslationsList = oFF.PrFactory.createList();
		let size = specificUnitTranslations.size();
		for (let i = 0; i < size; i++)
		{
			let specificTranslation = specificUnitTranslations.get(i);
			if (!specificTranslation.isMetadataDefined())
			{
				exporter.exportUnitTranslationElement(specificTranslation, inaUnitTranslationsList.addNewStructure());
			}
		}
	}
	return inaUnitTranslationsList;
};
oFF.QInAUnitTranslationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER;
};
oFF.QInAUnitTranslationManager.prototype.getTagName = function()
{
	return "UnitTranslations";
};
oFF.QInAUnitTranslationManager.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let unitTranslationManagerBase = context.getQueryModel().getUnitTranslationManager();
	if (oFF.notNull(unitTranslationManagerBase) && oFF.XCollectionUtils.hasElements(inaList))
	{
		let size = inaList.size();
		for (let i = 0; i < size; i++)
		{
			let inaUnitTranslation = inaList.getStructureAt(i);
			let name = inaUnitTranslation.getStringByKey("Name");
			let description = inaUnitTranslation.getStringByKey("Description");
			let unitTranslation = unitTranslationManagerBase.addNewMeasureUnitTranslationBase(name, description);
			importer.importUnitTranslationElement(inaUnitTranslation, unitTranslation, context);
		}
	}
	return unitTranslationManagerBase;
};

oFF.QInAUniversalDisplayHierarchies = function() {};
oFF.QInAUniversalDisplayHierarchies.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAUniversalDisplayHierarchies.prototype._ff_c = "QInAUniversalDisplayHierarchies";

oFF.QInAUniversalDisplayHierarchies.UDH_TO_LBH_CONVERSTION_TAG = "UdhToLbhConversion";
oFF.QInAUniversalDisplayHierarchies.getDimensionNames = function(exporter, axis)
{
	if (oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, axis.getQueryManager()))
	{
		let dimension = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis);
		if (oFF.notNull(dimension))
		{
			let leveledHierarchy = dimension.getLeveledHierarchy(dimension.getHierarchyName());
			let size = leveledHierarchy.getAllLevel().size();
			let dimensions = oFF.XList.create();
			for (let i = 0; i < size; i++)
			{
				dimensions.add(leveledHierarchy.getLevel(i).getLevelDimensionName());
			}
			return dimensions;
		}
	}
	return axis.getDimensionNames();
};
oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy = function(axis)
{
	if (oFF.isNull(axis) || axis.getType() !== oFF.AxisType.ROWS && axis.getType() !== oFF.AxisType.COLUMNS)
	{
		return null;
	}
	let dimensionCount = axis.getDimensionCount();
	for (let i = 0; i < dimensionCount; i++)
	{
		let dimension = axis.get(i);
		if (dimension.isHierarchyActive() && dimension.getLeveledHierarchy(dimension.getHierarchyName()) !== null)
		{
			return dimension;
		}
	}
	return null;
};
oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchyWhichContainsGivenDim = function(exporter, dimension)
{
	if (oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, dimension.getQueryManager()))
	{
		let dimensionName = dimension.getName();
		let rowsAxis = dimension.getQueryModel().getRowsAxis();
		if (oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, rowsAxis).contains(dimensionName))
		{
			return oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(rowsAxis);
		}
		let colAxis = dimension.getQueryModel().getColumnsAxis();
		if (oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, colAxis).contains(dimensionName))
		{
			return oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(colAxis);
		}
	}
	return null;
};
oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive = function(exporter, queryManager)
{
	return (exporter.m_mode === oFF.QModelFormat.INA_DATA || exporter.m_mode === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA) && queryManager.isHierarchyToUDHConversionEnabledForCurrentRs() && oFF.XCollectionUtils.hasElements(queryManager.getQueryModel().getUniversalDisplayHierarchies().getHierarchies());
};
oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionRequired = function(exporter, axis)
{
	return oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, axis.getQueryManager()) && oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis) !== null;
};
oFF.QInAUniversalDisplayHierarchies.isHierarchyConverted = function(exporter, dimension)
{
	return oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, dimension.getQueryManager()) && dimension === oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(dimension.getAxis());
};
oFF.QInAUniversalDisplayHierarchies.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(universalDisplayHierarchies))
	{
		universalDisplayHierarchies.updateIncludedDimensions();
		let udhIterator = universalDisplayHierarchies.getChildrenIterator();
		if (udhIterator.hasNext())
		{
			let udhStructure = inaStructure.putNewList("UniversalDisplayHierarchies");
			while (udhIterator.hasNext())
			{
				this.exportHierarchy(exporter, udhStructure, udhIterator.next());
			}
		}
	}
	return inaStructure;
};
oFF.QInAUniversalDisplayHierarchies.prototype.exportHierarchy = function(exporter, udhStructure, hierarchy)
{
	let dimensionListValid = true;
	let axis = hierarchy.getHierarchyDedicatedAxis();
	let hierarchyConversionDimension = oFF.QInAUniversalDisplayHierarchies.isHierarchyConversionActive(exporter, axis.getQueryManager()) ? oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(axis) : null;
	if (oFF.notNull(hierarchyConversionDimension))
	{
		let udhConvertedFromLBH = udhStructure.addNewStructure();
		udhConvertedFromLBH.putString("Name", hierarchy.getName());
		let supportsUdhZeroBased = hierarchy.getQueryModel().getModelCapabilities().supportsUniversalDisplayHierarchiesZeroBased();
		udhConvertedFromLBH.putInteger("InitialDrillLevel", supportsUdhZeroBased ? hierarchyConversionDimension.getInitialDrillLevel() : hierarchyConversionDimension.getInitialDrillLevel() + 1);
		udhConvertedFromLBH.putString("LowerLevelNodeAlignment", hierarchyConversionDimension.getLowerLevelNodeAlignment().getName());
		udhConvertedFromLBH.putBoolean("Active", true);
		udhConvertedFromLBH.putNewList("DimensionNames").addAllStrings(oFF.QInAUniversalDisplayHierarchies.getDimensionNames(exporter, axis));
		udhConvertedFromLBH.putString("LevelHierarchyName", hierarchyConversionDimension.getHierarchyName());
		if (exporter.getMode().isTypeOf(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA))
		{
			udhConvertedFromLBH.putString("LevelDimensionName", hierarchyConversionDimension.getName());
		}
		return;
	}
	else if (hierarchy.isActive() && !hierarchy.isDimensionListValid())
	{
		dimensionListValid = false;
		exporter.addError(oFF.ErrorCodes.INVALID_STATE, oFF.XStringUtils.concatenate3("Dimensions for UDH '", hierarchy.getName(), "' must be placed next to each other on the axis"));
	}
	let hierarchyStructure = udhStructure.addNewStructure();
	hierarchyStructure.putString("Name", hierarchy.getName());
	hierarchyStructure.putInteger("InitialDrillLevel", hierarchy.getInitialDrillLevel());
	hierarchyStructure.putString("LowerLevelNodeAlignment", hierarchy.getAlignment().getName());
	hierarchyStructure.putBoolean("Active", hierarchy.isActive() && dimensionListValid);
	hierarchyStructure.putNewList("DimensionNames").addAllStrings(hierarchy.getDimensionNames());
	if (hierarchy.hasCustomDimensions())
	{
		hierarchyStructure.putBoolean("CustomDimensions", true);
	}
	let udhKeyName = hierarchy.getUdhKeyName();
	if (hierarchy.isRequestUdhKey() && oFF.XStringUtils.isNotNullAndNotEmpty(udhKeyName))
	{
		let attributeStructure = hierarchyStructure.putNewList("Attributes").addNewStructure();
		attributeStructure.putString("Name", udhKeyName);
		attributeStructure.putString("Obtainability", "UserInterface");
	}
};
oFF.QInAUniversalDisplayHierarchies.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES;
};
oFF.QInAUniversalDisplayHierarchies.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(inaStructure))
	{
		let hierarchiesStructure = inaStructure.getByKey("UniversalDisplayHierarchies");
		if (oFF.notNull(hierarchiesStructure) && hierarchiesStructure.isStructure())
		{
			hierarchiesStructure = hierarchiesStructure.getByKey("DefinedHierarchies");
		}
		if (oFF.notNull(hierarchiesStructure) && hierarchiesStructure.isList())
		{
			let hierarchies = hierarchiesStructure;
			let size = hierarchies.size();
			for (let i = 0; i < size; i++)
			{
				oFF.QInAMdUniversalDisplayHierarchies.importHierarchy(universalDisplayHierarchies, hierarchies.getStructureAt(i));
			}
		}
	}
	oFF.QInAMdUniversalDisplayHierarchies.assignAxesToHierarchies(universalDisplayHierarchies);
	return universalDisplayHierarchies;
};

oFF.QInAVarDimMember = function() {};
oFF.QInAVarDimMember.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAVarDimMember.prototype._ff_c = "QInAVarDimMember";

oFF.QInAVarDimMember.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimensionMemberVariable = modelComponent;
	let name = dimensionMemberVariable.getName();
	inaStructure.putString("Name", name);
	let targetMemberFilter = null;
	let externMemberSelection = dimensionMemberVariable.getExternalMemberFilter();
	if (oFF.XCollectionUtils.hasElements(externMemberSelection))
	{
		targetMemberFilter = externMemberSelection;
	}
	else if (dimensionMemberVariable.hasMemberFilter())
	{
		let memberSelection = dimensionMemberVariable.getMemberFilter();
		if (oFF.XCollectionUtils.hasElements(memberSelection))
		{
			targetMemberFilter = memberSelection;
		}
	}
	if (oFF.notNull(targetMemberFilter))
	{
		let inaVariableValues = inaStructure.putNewStructure("Values");
		let inaSelection = inaVariableValues.putNewStructure("Selection");
		exporter.exportCartesianList(targetMemberFilter, inaSelection);
	}
	else if (!dimensionMemberVariable.isMandatory())
	{
		inaStructure.putNewStructure("Values");
	}
	return inaStructure;
};
oFF.QInAVarDimMember.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	let dimMemberVariable = modelComponent;
	if (oFF.isNull(inaStructure) || dimMemberVariable.supportsValueHelp())
	{
		return inaStructure;
	}
	if (dimMemberVariable.getMemberFilter() !== null && dimMemberVariable.getMemberFilter().getField().isKeyField())
	{
		return inaStructure;
	}
	let values = inaStructure.getStructureByKey("Values");
	if (oFF.isNull(values))
	{
		return inaStructure;
	}
	let selection = values.getStructureByKey("Selection");
	if (oFF.isNull(selection))
	{
		return inaStructure;
	}
	let setOperarnd = selection.getStructureByKey("SetOperand");
	if (oFF.isNull(setOperarnd))
	{
		return inaStructure;
	}
	let elements = setOperarnd.getListByKey("Elements");
	if (oFF.PrUtils.isListEmpty(elements))
	{
		return inaStructure;
	}
	let numberOfElements = elements.size();
	for (let i = 0; i < numberOfElements; i++)
	{
		let element = elements.get(i);
		if (element.hasStringByKey("Low"))
		{
			element.putString("LowIs", "ManualInput");
		}
		if (element.hasStringByKey("High"))
		{
			element.putString("HighIs", "ManualInput");
		}
		if (element.hasStringByKey("Value3"))
		{
			element.putString("Value3Is", "ManualInput");
		}
	}
	return inaStructure;
};
oFF.QInAVarDimMember.prototype.getComponentType = function()
{
	return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
};
oFF.QInAVarDimMember.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let memberVariable = modelComponent;
	memberVariable.setMemberFilter(null);
	let inaValues = inaStructure.getStructureByKey("Values");
	if (oFF.notNull(inaValues))
	{
		let selectionContainer = oFF.QFactory.createFilterExpression(memberVariable, memberVariable);
		let newSelectionContainer = importer.importFilterExpression(selectionContainer, inaValues, memberVariable, memberVariable);
		memberVariable.setFilter(newSelectionContainer);
	}
	else if (memberVariable.getVariableType() === oFF.VariableType.HIERARCHY_NODE_VARIABLE && memberVariable.hasMemberFilter() && memberVariable.getDimension().getKeyField() !== memberVariable.getMemberFilter().getField())
	{
		memberVariable.setDimension(memberVariable.getDimension());
	}
	return memberVariable;
};

oFF.QInAVarFunctional = function() {};
oFF.QInAVarFunctional.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAVarFunctional.prototype._ff_c = "QInAVarFunctional";

oFF.QInAVarFunctional.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};
oFF.QInAVarFunctional.prototype.getComponentType = function()
{
	return oFF.VariableType.FUNCTIONAL_VARIABLE;
};
oFF.QInAVarFunctional.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return modelComponent;
};

oFF.QInAVarOptionList = function() {};
oFF.QInAVarOptionList.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAVarOptionList.prototype._ff_c = "QInAVarOptionList";

oFF.QInAVarOptionList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variable = modelComponent;
	inaStructure.putString("Name", variable.getName());
	let inaVariableOptionValues = inaStructure.putNewList("OptionValues");
	if (variable.supportsMultipleValues())
	{
		let multiOptionNames = variable.getValues();
		let len = multiOptionNames.size();
		for (let c = 0; c < len; c++)
		{
			let optionName = multiOptionNames.get(c);
			inaVariableOptionValues.addString(optionName.getString());
		}
	}
	else
	{
		let currentOption = variable.getCurrentOption();
		if (oFF.notNull(currentOption))
		{
			inaVariableOptionValues.addString(currentOption.getName());
		}
	}
	return inaStructure;
};
oFF.QInAVarOptionList.prototype.getComponentType = function()
{
	return oFF.VariableType.OPTION_LIST_VARIABLE;
};
oFF.QInAVarOptionList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let optionListVariable = modelComponent;
	let inaOptionValues = inaStructure.getListByKey("OptionValues");
	if (oFF.notNull(inaOptionValues))
	{
		let currentOption;
		if (optionListVariable.supportsMultipleValues())
		{
			optionListVariable.clear();
			let len = inaOptionValues.size();
			for (let idxOption = 0; idxOption < len; idxOption++)
			{
				currentOption = inaOptionValues.getStringAt(idxOption);
				optionListVariable.addString(currentOption);
			}
		}
		else if (inaOptionValues.size() === 1)
		{
			currentOption = inaOptionValues.getStringAt(0);
			optionListVariable.setString(currentOption);
		}
	}
	return optionListVariable;
};

oFF.QInAVarSimpleType = function() {};
oFF.QInAVarSimpleType.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAVarSimpleType.prototype._ff_c = "QInAVarSimpleType";

oFF.QInAVarSimpleType.prototype.addNumericValue = function(exporter, simpleValues, value, valueType)
{
	if (oFF.XValueType.getValueTypeOfObject(value) === oFF.XValueType.DECIMAL_FLOAT && !value.mayLoosePrecision() && (valueType === oFF.XValueType.DECIMAL_FLOAT || exporter.m_capabilities.supportsNumberAsString()))
	{
		simpleValues.addString(oFF.XValueUtil.getString(value));
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		simpleValues.addDouble(oFF.XValueUtil.getDouble(value, true, false));
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		simpleValues.addLong(oFF.XValueUtil.getLong(value, true, false));
	}
	else if (valueType === oFF.XValueType.INTEGER)
	{
		simpleValues.addInteger(oFF.XValueUtil.getInteger(value, true, false));
	}
};
oFF.QInAVarSimpleType.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variable = modelComponent;
	inaStructure.putString("Name", variable.getName());
	let valueType = variable.getValueType();
	let simpleValues;
	if (valueType === oFF.XValueType.STRING || valueType === oFF.XValueType.DATE || valueType === oFF.XValueType.TIME || valueType === oFF.XValueType.DATE_TIME || valueType.isSpatial())
	{
		simpleValues = inaStructure.putNewList("SimpleStringValues");
	}
	else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT || valueType === oFF.XValueType.LONG || valueType === oFF.XValueType.INTEGER)
	{
		simpleValues = inaStructure.putNewList("SimpleNumericValues");
	}
	else if (valueType.isBoolean())
	{
		simpleValues = inaStructure.putNewList("SimpleBooleanValues");
	}
	else
	{
		exporter.addError(oFF.ErrorCodes.INVALID_DATATYPE, oFF.XStringUtils.concatenate3("SimpleTypeVariable '", variable.getName(), "' not exported"));
		return null;
	}
	if (variable.supportsMultipleValues())
	{
		this.exportMultipleValues(exporter, variable, valueType, simpleValues);
	}
	else
	{
		this.exportSingleValue(exporter, variable, valueType, simpleValues);
	}
	return inaStructure;
};
oFF.QInAVarSimpleType.prototype.exportMultipleValues = function(exporter, variable, valueType, simpleValues)
{
	let multiValues = variable.getValues();
	let size = multiValues.size();
	for (let idx = 0; idx < size; idx++)
	{
		if (valueType.isNumber())
		{
			this.addNumericValue(exporter, simpleValues, multiValues.get(idx), valueType);
		}
		else if (valueType === oFF.XValueType.STRING)
		{
			let stringValue = multiValues.get(idx);
			simpleValues.addString(stringValue.getString());
		}
		else if (valueType === oFF.XValueType.DATE || valueType === oFF.XValueType.TIME || valueType === oFF.XValueType.DATE_TIME)
		{
			let dateValue = multiValues.get(idx);
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, dateValue));
		}
		else if (valueType === oFF.XValueType.BOOLEAN)
		{
			let booleanValue = multiValues.get(idx);
			simpleValues.addString(oFF.XBoolean.convertToString(booleanValue.getBoolean()));
		}
		else if (valueType.isSpatial())
		{
			let spatialValue = multiValues.get(idx);
			simpleValues.addString(spatialValue.toWKT());
		}
	}
};
oFF.QInAVarSimpleType.prototype.exportSingleValue = function(exporter, variable, valueType, simpleValues)
{
	if (exporter.getOriginalMode() === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA && variable.getTagging().containsKey("PersistedQueryPlaceholder"))
	{
		simpleValues.addString(variable.getTagging().getByKey("PersistedQueryPlaceholder"));
		return;
	}
	let repoFormatAndNoValue = !variable.hasValue() && (exporter.getMode() === oFF.QModelFormat.INA_REPOSITORY || variable.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.VIRTUAL_INA));
	if (valueType.isNumber())
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			this.addNumericValue(exporter, simpleValues, variable.getValue(), valueType);
		}
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		if (repoFormatAndNoValue)
		{
			simpleValues.addNull();
		}
		else
		{
			simpleValues.addBoolean(variable.getBoolean());
		}
	}
	else
	{
		if (!variable.hasValue())
		{
			if (exporter.getMode() !== oFF.QModelFormat.INA_REPOSITORY)
			{
				simpleValues.addString("");
			}
		}
		else if (valueType === oFF.XValueType.STRING || valueType.isSpatial())
		{
			simpleValues.addString(variable.getString());
		}
		else if (valueType === oFF.XValueType.DATE)
		{
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getDate()));
		}
		else if (valueType === oFF.XValueType.TIME)
		{
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getTime()));
		}
		else if (valueType === oFF.XValueType.DATE_TIME)
		{
			simpleValues.addString(oFF.QInAExportUtil.dateTimeToString(exporter, variable.getDateTime()));
		}
	}
};
oFF.QInAVarSimpleType.prototype.getComponentType = function()
{
	return oFF.VariableType.SIMPLE_TYPE_VARIABLE;
};
oFF.QInAVarSimpleType.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let simpleTypeVariable = modelComponent;
	let inaSimpleValues = inaStructure.getListByKey("SimpleNumericValues");
	if (oFF.isNull(inaSimpleValues))
	{
		inaSimpleValues = inaStructure.getListByKey("SimpleBooleanValues");
	}
	if (oFF.isNull(inaSimpleValues))
	{
		inaSimpleValues = inaStructure.getListByKey("SimpleStringValues");
	}
	let valueType = simpleTypeVariable.getValueType();
	let valueList = oFF.QInAValueUtils.importValueList(importer, inaSimpleValues, valueType);
	if (simpleTypeVariable.supportsMultipleValues() || valueList.size() <= 1)
	{
		simpleTypeVariable.setValues(valueList);
	}
	return null;
};

oFF.QInAVariableContainer = function() {};
oFF.QInAVariableContainer.prototype = new oFF.QInAComponentWithList();
oFF.QInAVariableContainer.prototype._ff_c = "QInAVariableContainer";

oFF.QInAVariableContainer.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let variableContainer = modelComponent;
	let queryModel = variableContainer.getQueryModel();
	if (oFF.notNull(queryModel) && !queryModel.isExportingVariables() && !queryModel.hasProcessingStep())
	{
		return null;
	}
	let variables = variableContainer.getVariables();
	if (oFF.XCollectionUtils.hasElements(variables))
	{
		return exporter.exportVariableList(variableContainer);
	}
	return null;
};
oFF.QInAVariableContainer.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QInAVariableContainer.prototype.getTagName = function()
{
	return "Variables";
};
oFF.QInAVariableContainer.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let variableContainer = modelComponent;
	importer.importVariableList(inaList, variableContainer);
	return modelComponent;
};

oFF.QInAVariablesList = function() {};
oFF.QInAVariablesList.prototype = new oFF.QInAComponentWithList();
oFF.QInAVariablesList.prototype._ff_c = "QInAVariablesList";

oFF.QInAVariablesList.applyLegacyCurrencyTranslation = function(valueMap, queryModel, variableContainer, measureName, measureCurrencyTranslation)
{
	let variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Currency");
	let baseVariable = queryModel.getVariable(variableName);
	let fixedCurrencyBase = oFF.QInACurrencyTranslationItem.resolveTargetCurrency(measureCurrencyTranslation);
	let fixedCurrency = oFF.isNull(fixedCurrencyBase) ? null : fixedCurrencyBase.getFixedValue();
	if (oFF.notNull(baseVariable) && oFF.notNull(fixedCurrency) && oFF.XValueUtil.getString(fixedCurrency) !== null)
	{
		valueMap.put(variableName, fixedCurrency);
		let monthFactor = 0;
		if (measureCurrencyTranslation.getDateOffsetGranularity() !== null)
		{
			monthFactor = measureCurrencyTranslation.getDateOffsetGranularity().getMonthFactor();
		}
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "MonthDelta");
		baseVariable = queryModel.getVariable(variableName);
		let monthDelta = measureCurrencyTranslation.getDateOffset() * monthFactor;
		if (oFF.notNull(baseVariable))
		{
			valueMap.put(variableName, oFF.XIntegerValue.create(monthDelta));
		}
		if (measureCurrencyTranslation.isReferenceDateFixed())
		{
			variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Date");
			baseVariable = queryModel.getVariable(variableName);
			if (oFF.notNull(baseVariable))
			{
				valueMap.put(variableName, measureCurrencyTranslation.getFixedReferenceDate());
			}
		}
		else
		{
			variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Date");
			baseVariable = queryModel.getVariable(variableName);
			if (oFF.notNull(baseVariable))
			{
				if (monthDelta === 0)
				{
					valueMap.put(variableName, oFF.XStringValue.create("0000-00-00"));
				}
				else
				{
					valueMap.put(variableName, oFF.XStringValue.create("1111-11-11"));
				}
			}
		}
		let rateType = measureCurrencyTranslation.getFixedRateType();
		let category = measureCurrencyTranslation.getFixedCategory();
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "RateType");
		baseVariable = queryModel.getVariable(variableName);
		if (oFF.notNull(baseVariable))
		{
			valueMap.put(variableName, oFF.XStringValue.create(oFF.QInAVariablesList.resolveRateTypeVariableValue(rateType)));
		}
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "RateVersion");
		baseVariable = queryModel.getVariable(variableName);
		if (oFF.notNull(baseVariable))
		{
			let rateVersionString = measureCurrencyTranslation.getFixedRateVersion();
			valueMap.put(variableName, oFF.XStringValue.create(oFF.isNull(rateVersionString) ? "" : rateVersionString));
		}
		variableName = oFF.XStringUtils.concatenate3(measureName, ".", "Category");
		baseVariable = queryModel.getVariable(variableName);
		if (oFF.notNull(baseVariable))
		{
			valueMap.put(variableName, oFF.XStringValue.create(oFF.QInAVariablesList.resolveCategoryVariableValue(category)));
		}
	}
};
oFF.QInAVariablesList.resolveCategoryVariableValue = function(category)
{
	let result;
	if (oFF.CtCategory.isDefined(category))
	{
		result = oFF.QInAConverter.lookupCategoryInA(category);
	}
	else
	{
		result = "";
	}
	return result;
};
oFF.QInAVariablesList.resolveRateTypeVariableValue = function(rateType)
{
	let result;
	if (oFF.CtRateType.isDefined(rateType))
	{
		result = oFF.QInAConverter.lookupRateTypeInA(rateType);
	}
	else
	{
		result = "@@DYNAMIC@@";
	}
	return result;
};
oFF.QInAVariablesList.prototype.exportComponentWithList = function(exporter, modelComponent, flags)
{
	let variableContainer = modelComponent;
	let variables = variableContainer.getVariables();
	if (oFF.isNull(variables) || variables.isEmpty())
	{
		return null;
	}
	let inaVariableList = oFF.PrFactory.createList();
	let len = variables.size();
	let mode = exporter.m_mode;
	let currencyValuesMap = null;
	if (mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		currencyValuesMap = this.remapCurrencyVariables(variableContainer);
	}
	for (let i = 0; i < len; i++)
	{
		let variable = variables.get(i);
		let inaVariable = null;
		if (!variable.isCustomVariable())
		{
			if (mode === oFF.QModelFormat.INA_METADATA)
			{
				exporter.exportVariable(variable, null);
			}
			else if (mode.isTypeOf(oFF.QModelFormat.INA_DATA) || mode === oFF.QModelFormat.INA_VALUE_HELP)
			{
				let externalVariable = variable.getExternalRepresentation();
				if (oFF.notNull(externalVariable) && variable.getOlapComponentType() === externalVariable.getOlapComponentType() && oFF.XString.isEqual(externalVariable.getName(), variable.getName()))
				{
					variable = externalVariable;
				}
				if (variable.isInputEnabled())
				{
					if (oFF.notNull(currencyValuesMap) && currencyValuesMap.containsKey(variable.getName()))
					{
						inaVariable = oFF.PrFactory.createStructure();
						inaVariable.putString("Name", variable.getName());
						let value = currencyValuesMap.getByKey(variable.getName());
						let valueList;
						if (value.getValueType().isNumber())
						{
							valueList = inaVariable.putNewList("SimpleNumericValues");
							valueList.addInteger(oFF.XValueUtil.getInteger(value, false, true));
						}
						else
						{
							valueList = inaVariable.putNewList("SimpleStringValues");
							valueList.addString(oFF.XValueUtil.getString(value));
						}
					}
					else
					{
						let queryManager = variable.getQueryManager();
						let variableProcessor = oFF.notNull(queryManager) ? queryManager.getVariableProcessor() : null;
						let persistedInAActive = oFF.notNull(queryManager) && (queryManager.getConvenienceCommands().isHana() && queryManager.getSession().hasFeature(oFF.FeatureToggleOlap.MDS_PERSISTED_INA) && queryManager.getModelCapabilities().supportsLightweightMetadata() || queryManager.getModelCapabilities().supportsPersistedInA());
						let skipVariableForPersistedInA = exporter.getMode().isTypeOf(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA) && variable.isDynamicOrExitVariable() && persistedInAActive && oFF.notNull(variableProcessor) && !variableProcessor.isUsingSavedPromptsForExitVariables();
						if (!skipVariableForPersistedInA)
						{
							inaVariable = exporter.exportVariable(variable, inaVariable);
						}
					}
				}
			}
			else
			{
				inaVariable = oFF.PrFactory.createStructure();
				inaVariable.putString("Name", variable.getName());
				exporter.exportVariable(variable, inaVariable);
			}
			if (oFF.notNull(inaVariable))
			{
				inaVariableList.add(inaVariable);
			}
		}
	}
	return inaVariableList;
};
oFF.QInAVariablesList.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_LIST;
};
oFF.QInAVariablesList.prototype.importComponentWithList = function(importer, inaList, modelComponent, parentComponent, context)
{
	let variableContainer = modelComponent;
	if (oFF.notNull(inaList))
	{
		let len = inaList.size();
		for (let varIdx = 0; varIdx < len; varIdx++)
		{
			let inaVariable = inaList.getStructureAt(varIdx);
			let variableName = inaVariable.getStringByKey("Name");
			let variable = variableContainer.getVariableBaseByName(variableName);
			if (oFF.notNull(variable))
			{
				let variableType = variable.getVariableType();
				if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
				{
					importer.importSimpleTypeVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
				{
					importer.importDimensionMemberVariable(inaVariable, variable, context);
				}
				else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
				{
					importer.importOptionListVariable(inaVariable, variable, context);
				}
				else
				{
					importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate5("The variable '", variableName, "' of variable type '", variableType.getName(), "' was not imported correctly"));
				}
			}
			else
			{
				importer.addWarning(oFF.ErrorCodes.ET_ELEMENT_NOT_FOUND, oFF.XStringUtils.concatenate3("The variable '", variableName, "' was not found"));
			}
		}
	}
	return modelComponent;
};
oFF.QInAVariablesList.prototype.remapCurrencyVariables = function(variableContainer)
{
	let i;
	let result = oFF.XHashMapByString.create();
	let queryModel = variableContainer.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let curTransMan = queryModel.getCurrencyTranslationManager();
		if (oFF.notNull(curTransMan))
		{
			if (curTransMan.isLegacyMeasureCurrencyTranslationAccountModel())
			{
				let defaultCurrencyTranslation = curTransMan.getDefaultMeasureCurrencyTranslationBase();
				let applyToDefaultCurrency = false;
				if (oFF.notNull(defaultCurrencyTranslation))
				{
					oFF.QInAVariablesList.applyLegacyCurrencyTranslation(result, queryModel, variableContainer, "SignedData", defaultCurrencyTranslation);
					let curTransBridge = curTransMan.getQuery2MeasureCurrencyTranslationBridge();
					applyToDefaultCurrency = curTransBridge.isApplyToDefaultCurrencyTranslation();
				}
				if (queryModel.getMeasureDimension() !== null)
				{
					let structureMembers = queryModel.getMeasureDimension().getLoadedStructureMembers();
					let size = oFF.isNull(structureMembers) ? 0 : structureMembers.size();
					for (i = 0; i < size; i++)
					{
						let structureMember = structureMembers.get(i);
						if (structureMember.getOlapComponentType() === oFF.MemberType.CURRENCY_MEASURE)
						{
							let currencyMeasure = structureMember;
							let baseMeasureName = currencyMeasure.getBaseMeasureName();
							if (oFF.isNull(baseMeasureName) && curTransMan.isLegacyMeasureCurrencyTranslationAccountModel())
							{
								baseMeasureName = curTransMan.getCurrencyTranslationCrossCalculation(currencyMeasure.getAliasName());
							}
							if (currencyMeasure.getLocalCurrencyTranslation() !== null && oFF.notNull(baseMeasureName))
							{
								if (oFF.notNull(defaultCurrencyTranslation) && curTransMan.isLegacyMeasureCurrencyTranslationAccountModel() && applyToDefaultCurrency && currencyMeasure.isDefaultCurrency())
								{
									oFF.QInAVariablesList.applyLegacyCurrencyTranslation(result, queryModel, variableContainer, baseMeasureName, defaultCurrencyTranslation);
								}
								else
								{
									oFF.QInAVariablesList.applyLegacyCurrencyTranslation(result, queryModel, variableContainer, baseMeasureName, currencyMeasure.getLocalCurrencyTranslation());
								}
							}
						}
					}
				}
			}
		}
	}
	return result;
};

oFF.QInAHierarchyValueHelp = function() {};
oFF.QInAHierarchyValueHelp.prototype = new oFF.QInAComponentWithStructure();
oFF.QInAHierarchyValueHelp.prototype._ff_c = "QInAHierarchyValueHelp";

oFF.QInAHierarchyValueHelp.addLowerLevelNodeAlignment = function(exporter, dimension, inaHierarchy)
{
	let alignment = dimension.getSelectorLowerLevelNodeAlignment();
	if (oFF.notNull(alignment) && exporter.isAbap(dimension.getQueryModel()))
	{
		let cm = dimension.getModelCapabilities();
		inaHierarchy.putString("LowerLevelNodeAlignment", oFF.notNull(cm) && cm.supportsExpandBottomUp() ? oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA(alignment) : oFF.QInAConverter.lookupLowerLevelNodeAlignmentInA2(alignment));
	}
};
oFF.QInAHierarchyValueHelp.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let hierarchyName = dimension.getSelectorHierarchyName();
	if (oFF.XStringUtils.isNullOrEmpty(hierarchyName))
	{
		hierarchyName = dimension.getHierarchyName();
	}
	let isSelectorHierarchyActive = dimension.isSelectorHierarchyActive();
	if (isSelectorHierarchyActive && oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
	{
		let inaHierarchy = oFF.PrFactory.createStructure();
		let dimensionBase = dimension;
		let isDueDateVariableForAutoSubmit = oFF.QInAHierarchy.isDueDatePlaceHolderForAutoSubmit(dimensionBase, exporter.m_mode);
		let isVersionVariableForAutoSubmit = oFF.QInAHierarchy.isVersionPlaceHolderForAutoSubmit(dimensionBase, exporter.m_mode);
		let isHierarchyNameVariableForAutoSubmit = oFF.QInAHierarchy.isNamePlaceHolderForAutoSubmit(dimensionBase, exporter.m_mode);
		let useVariableHierarchy = oFF.XStringUtils.isNullOrEmpty(hierarchyName) && isHierarchyNameVariableForAutoSubmit;
		let actualHierarchyOnDimension = hierarchyName;
		if (useVariableHierarchy)
		{
			hierarchyName = dimension.getHierarchyNameVariableName();
		}
		oFF.QInAHierarchy.exportHierarchyNameDuedateVersion(exporter, inaHierarchy, dimensionBase, isSelectorHierarchyActive, hierarchyName, actualHierarchyOnDimension, isDueDateVariableForAutoSubmit, isVersionVariableForAutoSubmit, true);
		inaHierarchy.putInteger("InitialDrillLevel", dimension.isSelectorUseQueryDrillOperations() && dimension.hasZoomDrill() ? 0 : dimension.getSelectorRootLevel());
		let visibility = dimension.getMemberOfPostedNodeVisibility();
		let memberOfPostedNodeVisibility = oFF.QInAConverter.lookupResultSetVisibilityInA(visibility);
		inaHierarchy.putString("MemberOfPostedNodeVisibility", memberOfPostedNodeVisibility);
		oFF.QInAHierarchyValueHelp.addLowerLevelNodeAlignment(exporter, dimension, inaHierarchy);
		let customHierarchyDefinition = dimension.getOlapEnv().getCustomHierarchyRepository().getCustomHierarchyDefinitionByName(hierarchyName);
		if (oFF.notNull(customHierarchyDefinition))
		{
			inaHierarchy.putBoolean("IsTransient", true);
			inaHierarchy.putStringNotNull("Description", customHierarchyDefinition.getDescription());
		}
		return inaHierarchy;
	}
	return null;
};
oFF.QInAHierarchyValueHelp.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.HIERARCHY;
};
oFF.QInAHierarchyValueHelp.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_VALUE_HELP;
};
oFF.QInAHierarchyValueHelp.prototype.getTagName = function()
{
	return "Hierarchy";
};
oFF.QInAHierarchyValueHelp.prototype.importComponentWithStructure = oFF.noSupport;

oFF.MeasureValueHelpRsDimension = function() {};
oFF.MeasureValueHelpRsDimension.prototype = new oFF.XObject();
oFF.MeasureValueHelpRsDimension.prototype._ff_c = "MeasureValueHelpRsDimension";

oFF.MeasureValueHelpRsDimension.create = function(dimension)
{
	let dimensionWrapper = new oFF.MeasureValueHelpRsDimension();
	dimensionWrapper.m_dimension = dimension;
	return dimensionWrapper;
};
oFF.MeasureValueHelpRsDimension.prototype.m_dimension = null;
oFF.MeasureValueHelpRsDimension.prototype.cloneExt = function(flags)
{
	return oFF.MeasureValueHelpRsDimension.create(this.m_dimension);
};
oFF.MeasureValueHelpRsDimension.prototype.getDimensionType = function()
{
	return this.m_dimension.getDimensionType();
};
oFF.MeasureValueHelpRsDimension.prototype.getFields = function()
{
	return this.m_dimension.getFields();
};
oFF.MeasureValueHelpRsDimension.prototype.getHierarchyName = function()
{
	return this.m_dimension.getHierarchyName();
};
oFF.MeasureValueHelpRsDimension.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_dimension.getLowerLevelNodeAlignment();
};
oFF.MeasureValueHelpRsDimension.prototype.getMaxDrillLevel = function()
{
	return this.m_dimension.getMaxDrillLevel();
};
oFF.MeasureValueHelpRsDimension.prototype.getMaxRuntimeLevel = function()
{
	return this.m_dimension.getMaxRuntimeLevel();
};
oFF.MeasureValueHelpRsDimension.prototype.getName = function()
{
	return this.m_dimension.getName();
};
oFF.MeasureValueHelpRsDimension.prototype.getText = function()
{
	return this.m_dimension.getText();
};
oFF.MeasureValueHelpRsDimension.prototype.hasDefaultLowerLevelNodeAlignment = function()
{
	return this.m_dimension.hasDefaultLowerLevelNodeAlignment();
};
oFF.MeasureValueHelpRsDimension.prototype.hasTimeDependentHierarchies = function()
{
	return false;
};
oFF.MeasureValueHelpRsDimension.prototype.hasVersionDependentHierarchies = function()
{
	return false;
};
oFF.MeasureValueHelpRsDimension.prototype.isClustered = function()
{
	try
	{
		return this.m_dimension.isClustered();
	}
	catch (unsupportedOperationException)
	{
		return false;
	}
};
oFF.MeasureValueHelpRsDimension.prototype.isHierarchyActive = function()
{
	return this.m_dimension.isHierarchyActive();
};
oFF.MeasureValueHelpRsDimension.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_dimension = null;
};
oFF.MeasureValueHelpRsDimension.prototype.setName = function(name) {};

oFF.XCmdDeserializeBlendingNodesResult = function() {};
oFF.XCmdDeserializeBlendingNodesResult.prototype = new oFF.XCmdDeserializeBlendingResultBase();
oFF.XCmdDeserializeBlendingNodesResult.prototype._ff_c = "XCmdDeserializeBlendingNodesResult";

oFF.XCmdDeserializeBlendingNodesResult.CLAZZ = null;
oFF.XCmdDeserializeBlendingNodesResult.createBlendingDefinition = function(queryManagers, aliases, inaMappings)
{
	let blendingDefinition = oFF.QFactory.createBlendingDefinition();
	let sourceCount = queryManagers.size();
	for (let i = 0; i < sourceCount; i++)
	{
		blendingDefinition.addNewSource(queryManagers.get(i).getQueryModel(), aliases.get(i));
	}
	for (let idx = 0; idx < inaMappings.size(); idx++)
	{
		let inaMapping = inaMappings.getStructureAt(idx);
		let linkType = inaMapping.getStringByKey("LinkType");
		let dimensionName = inaMapping.getStringByKey("DimensionName");
		let dimensionMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.lookup(linkType), dimensionName);
		let inaDimensionMappings = inaMapping.getListByKey("Mapping");
		if (inaMapping.getBooleanByKeyExt("PreserveMembers", false))
		{
			dimensionMapping.setIsPreservingMembers(true);
		}
		if (!inaMapping.getBooleanByKeyExt("ReturnOriginKeys", true))
		{
			dimensionMapping.setIsReturningOriginKeys(false);
		}
		for (let dimMapIdx = 0; dimMapIdx < inaDimensionMappings.size(); dimMapIdx++)
		{
			let inaDimensionMapping = inaDimensionMappings.getStructureAt(dimMapIdx);
			let queryAliasName = inaDimensionMapping.getStringByKey("AliasName");
			let name = oFF.XCmdDeserializeBlendingNodesResult.getNameFromMappingDefinition(inaDimensionMapping);
			if (oFF.isNull(name))
			{
				let value = oFF.XCmdDeserializeBlendingNodesResult.getNameFromConstantMappingDefinition(inaDimensionMapping);
				dimensionMapping.addNewConstantMapping(value, queryAliasName);
			}
			else
			{
				dimensionMapping.addNewDimensionMappingDefinitionByName(name, queryAliasName);
			}
		}
		let inaAttributeMappings = inaMapping.getListByKey("AttributeMappings");
		if (oFF.notNull(inaAttributeMappings))
		{
			for (let attMapIdx = 0; attMapIdx < inaAttributeMappings.size(); attMapIdx++)
			{
				let inaAttributeMapping = inaAttributeMappings.getStructureAt(attMapIdx);
				let attributeName = inaAttributeMapping.getStringByKey("AttributeName");
				let isLinkKey = inaAttributeMapping.getBooleanByKey("IsLinkKey");
				let attributeMapping = dimensionMapping.addNewAttributeMappingByName(attributeName, isLinkKey);
				let inaAttributeDefinitions = inaAttributeMapping.getListByKey("Mapping");
				for (let attDefIdx = 0; attDefIdx < inaAttributeDefinitions.size(); attDefIdx++)
				{
					let inaAttributeDefinition = inaAttributeDefinitions.getStructureAt(attDefIdx);
					let nameAtt = oFF.XCmdDeserializeBlendingNodesResult.getNameFromMappingDefinition(inaAttributeDefinition);
					let queryAliasNameAtt = inaAttributeDefinition.getStringByKey("AliasName");
					if (oFF.isNull(nameAtt))
					{
						let constantMappingValue = oFF.XCmdDeserializeBlendingNodesResult.getNameFromConstantMappingDefinition(inaAttributeDefinition);
						dimensionMapping.addNewConstantMapping(constantMappingValue, queryAliasNameAtt);
					}
					else
					{
						attributeMapping.addAttributeMappingDefinition(oFF.BlendingMappingDefinition.createAttributeMapping(nameAtt, queryAliasNameAtt));
					}
				}
			}
		}
	}
	return blendingDefinition;
};
oFF.XCmdDeserializeBlendingNodesResult.getNameFromConstantMappingDefinition = function(inaMapping)
{
	let inaMappingDefinition = inaMapping.getStructureByKey("MappingDefinition");
	if (inaMappingDefinition.containsKey("Constant"))
	{
		let inaMember = inaMappingDefinition.getStructureByKey("Constant");
		return inaMember.getStringByKey("Value");
	}
	return null;
};
oFF.XCmdDeserializeBlendingNodesResult.getNameFromMappingDefinition = function(inaMapping)
{
	let inaMappingDefinition = inaMapping.getStructureByKey("MappingDefinition");
	if (inaMappingDefinition.containsKey("Member"))
	{
		let inaMember = inaMappingDefinition.getStructureByKey("Member");
		return inaMember.getStringByKey("Name");
	}
	return null;
};
oFF.XCmdDeserializeBlendingNodesResult.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingNodesResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingNodesResult);
};
oFF.XCmdDeserializeBlendingNodesResult.prototype.importSourceQueryModel = function(application, sourceQueryModel, queryAlias, customIdentifier)
{
	this.m_queryManagers.add(null);
	let inaDefiningContext = sourceQueryModel.getStructureByKey("DefiningContext");
	let inaDefinition = inaDefiningContext.getStructureByKey("Definition");
	let inaDataSource = inaDefinition.getStructureByKey("DataSource");
	let commandFactory = oFF.XCommandFactory.create(application);
	let command;
	let leafModels = this.getParameterStrict(oFF.CmdDeserializeBlendingNodes.PARAM_I_LEAF_QUERY_MODELS);
	if (inaDataSource.containsKey("Mappings"))
	{
		command = commandFactory.createCommand(oFF.CmdDeserializeBlendingNodes.CMD_NAME);
		command.addParameter(oFF.CmdDeserializeBlendingNodes.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION));
		command.addParameter(oFF.CmdDeserializeBlendingNodes.PARAM_I_SYSTEMS, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_SYSTEMS));
		command.addParameterString(oFF.CmdDeserializeBlendingNodes.PARAM_I_SYSTEM, this.getParameterString(oFF.CmdDeserializeBlending.PARAM_I_SYSTEM));
		command.addParameterString(oFF.CmdDeserializeBlendingNodes.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY, inaDefinition.toString());
		command.addParameter(oFF.CmdDeserializeBlendingNodes.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlendingNodes.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO));
		command.addParameter(oFF.CmdDeserializeBlendingNodes.PARAM_I_LEAF_QUERY_MODELS, leafModels);
	}
	else
	{
		let leafQueryModel = leafModels.getByKey(queryAlias);
		let inaDefinitionString = leafQueryModel.serializeToString(oFF.QModelFormat.INA_REPOSITORY);
		let jsonParser = oFF.JsonParserFactory.newInstance();
		inaDefinition = jsonParser.parse(inaDefinitionString);
		command = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY, inaDefinition);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, this.getSystemName(queryAlias));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, this.getDataSourceName(inaDataSource));
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlendingNodes.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO));
	}
	command.processCommand(this.getSyncType(), this, customIdentifier);
};
oFF.XCmdDeserializeBlendingNodesResult.prototype.onAllQueryManagersImported = function()
{
	let inaMappings = this.m_rootElement.getStructureByKey("DataSource").getListByKey("Mappings");
	let blendingDefinition = oFF.XCmdDeserializeBlendingNodesResult.createBlendingDefinition(this.m_queryManagers, this.m_aliases, inaMappings);
	let application = this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION);
	let serviceConfig = oFF.QueryServiceConfig.createWithBlendingDefinition(application, blendingDefinition);
	let experimentalFeatures = this.m_rootElement.getStringByKeyExt("ExperimentalFeatures", null);
	let capabilitiesToSwitch = this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES);
	oFF.XCommandUtil.handleInactiveCapabilities(serviceConfig, experimentalFeatures, capabilitiesToSwitch);
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, null);
};
oFF.XCmdDeserializeBlendingNodesResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		let strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
		let deserializeExt = queryManager.getQueryModel().deserializeExt(oFF.QModelFormat.INA_REPOSITORY, strQueryModel);
		this.getMessageManager().addAllMessages(deserializeExt);
		this.addResultParameter(oFF.CmdDeserializeBlendingNodes.PARAM_E_QUERY_MANAGER, queryManager);
	}
	this.onProcessFinished();
};
oFF.XCmdDeserializeBlendingNodesResult.prototype.onQueryManagerImported = function(commandResult, index)
{
	let queryManager = commandResult.getResultParameter(oFF.CmdDeserializeBlending.PARAM_E_QUERY_MANAGER);
	if (oFF.notNull(queryManager))
	{
		this.m_queryManagers.set(index, queryManager);
	}
	else
	{
		let queryManagers = commandResult.getResultParameter(oFF.CmdDeserializeBlendingNodes.PARAM_E_QUERY_MANAGER);
		this.m_queryManagers.set(index, queryManagers);
	}
};

oFF.XCmdDeserializeBlendingResult = function() {};
oFF.XCmdDeserializeBlendingResult.prototype = new oFF.XCmdDeserializeBlendingResultBase();
oFF.XCmdDeserializeBlendingResult.prototype._ff_c = "XCmdDeserializeBlendingResult";

oFF.XCmdDeserializeBlendingResult.CLAZZ = null;
oFF.XCmdDeserializeBlendingResult.createBlendingDefinition = function(queryManagers, aliases, inaMappings)
{
	let blendingDefinition = oFF.QFactory.createBlendingDefinition();
	let sourceCount = queryManagers.size();
	for (let i = 0; i < sourceCount; i++)
	{
		blendingDefinition.addNewSource(queryManagers.get(i).getQueryModel(), aliases.get(i));
	}
	for (let idx = 0; idx < inaMappings.size(); idx++)
	{
		let inaMapping = inaMappings.getStructureAt(idx);
		let linkType = inaMapping.getStringByKey("LinkType");
		let dimensionName = inaMapping.getStringByKey("DimensionName");
		let dimensionMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.lookup(linkType), dimensionName);
		let inaDimensionMappings = inaMapping.getListByKey("Mapping");
		if (inaMapping.getBooleanByKeyExt("PreserveMembers", false))
		{
			dimensionMapping.setIsPreservingMembers(true);
		}
		if (!inaMapping.getBooleanByKeyExt("ReturnOriginKeys", true))
		{
			dimensionMapping.setIsReturningOriginKeys(false);
		}
		for (let dimMapIdx = 0; dimMapIdx < inaDimensionMappings.size(); dimMapIdx++)
		{
			let inaDimensionMapping = inaDimensionMappings.getStructureAt(dimMapIdx);
			let queryAliasName = inaDimensionMapping.getStringByKey("AliasName");
			let name = oFF.XCmdDeserializeBlendingResult.getNameFromMappingDefinition(inaDimensionMapping);
			if (oFF.isNull(name))
			{
				let value = oFF.XCmdDeserializeBlendingResult.getNameFromConstantMappingDefinition(inaDimensionMapping);
				dimensionMapping.addNewConstantMapping(value, queryAliasName);
			}
			else
			{
				dimensionMapping.addNewDimensionMappingDefinitionByName(name, queryAliasName);
			}
		}
		let inaAttributeMappings = inaMapping.getListByKey("AttributeMappings");
		if (oFF.notNull(inaAttributeMappings))
		{
			for (let attMapIdx = 0; attMapIdx < inaAttributeMappings.size(); attMapIdx++)
			{
				let inaAttributeMapping = inaAttributeMappings.getStructureAt(attMapIdx);
				let attributeName = inaAttributeMapping.getStringByKey("AttributeName");
				let isLinkKey = inaAttributeMapping.getBooleanByKey("IsLinkKey");
				let attributeMapping = dimensionMapping.addNewAttributeMappingByName(attributeName, isLinkKey);
				let inaAttributeDefinitions = inaAttributeMapping.getListByKey("Mapping");
				for (let attDefIdx = 0; attDefIdx < inaAttributeDefinitions.size(); attDefIdx++)
				{
					let inaAttributeDefinition = inaAttributeDefinitions.getStructureAt(attDefIdx);
					let nameAtt = oFF.XCmdDeserializeBlendingResult.getNameFromMappingDefinition(inaAttributeDefinition);
					let queryAliasNameAtt = inaAttributeDefinition.getStringByKey("AliasName");
					if (oFF.isNull(nameAtt))
					{
						let constantMappingValue = oFF.XCmdDeserializeBlendingResult.getNameFromConstantMappingDefinition(inaAttributeDefinition);
						dimensionMapping.addNewConstantMapping(constantMappingValue, queryAliasNameAtt);
					}
					else
					{
						attributeMapping.addAttributeMappingDefinition(oFF.BlendingMappingDefinition.createAttributeMapping(nameAtt, queryAliasNameAtt));
					}
				}
			}
		}
	}
	return blendingDefinition;
};
oFF.XCmdDeserializeBlendingResult.getNameFromConstantMappingDefinition = function(inaMapping)
{
	let inaMappingDefinition = inaMapping.getStructureByKey("MappingDefinition");
	if (inaMappingDefinition.containsKey("Constant"))
	{
		let inaMember = inaMappingDefinition.getStructureByKey("Constant");
		return inaMember.getStringByKey("Value");
	}
	return null;
};
oFF.XCmdDeserializeBlendingResult.getNameFromMappingDefinition = function(inaMapping)
{
	let inaMappingDefinition = inaMapping.getStructureByKey("MappingDefinition");
	if (inaMappingDefinition.containsKey("Member"))
	{
		let inaMember = inaMappingDefinition.getStructureByKey("Member");
		return inaMember.getStringByKey("Name");
	}
	return null;
};
oFF.XCmdDeserializeBlendingResult.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingResult);
};
oFF.XCmdDeserializeBlendingResult.prototype.importSourceQueryModel = function(application, sourceQueryModel, queryAlias, customIdentifier)
{
	this.m_queryManagers.add(null);
	let inaDefiningContext = sourceQueryModel.getStructureByKey("DefiningContext");
	let inaDefinition = inaDefiningContext.getStructureByKey("Definition");
	let inaDataSource = inaDefinition.getStructureByKey("DataSource");
	let commandFactory = oFF.XCommandFactory.create(application);
	let command;
	if (inaDataSource.containsKey("Mappings"))
	{
		command = commandFactory.createCommand(oFF.CmdDeserializeBlending.CMD_NAME);
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION));
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_SYSTEMS, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_SYSTEMS));
		command.addParameterString(oFF.CmdDeserializeBlending.PARAM_I_SYSTEM, this.getParameterString(oFF.CmdDeserializeBlending.PARAM_I_SYSTEM));
		command.addParameterString(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY, inaDefinition.toString());
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO));
	}
	else
	{
		command = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY, inaDefinition);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, this.getSystemName(queryAlias));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, this.getDataSourceName(inaDataSource));
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_EXT_DIMS_INFO));
	}
	command.processCommand(this.getSyncType(), this, customIdentifier);
};
oFF.XCmdDeserializeBlendingResult.prototype.onAllQueryManagersImported = function()
{
	let inaMappings = this.m_rootElement.getStructureByKey("DataSource").getListByKey("Mappings");
	let blendingDefinition = oFF.XCmdDeserializeBlendingResult.createBlendingDefinition(this.m_queryManagers, this.m_aliases, inaMappings);
	let application = this.getParameterStrict(oFF.CmdDeserializeBlending.PARAM_I_APPLICATION);
	let serviceConfig = oFF.QueryServiceConfig.createWithBlendingDefinition(application, blendingDefinition);
	let experimentalFeatures = this.m_rootElement.getStringByKeyExt("ExperimentalFeatures", null);
	let capabilitiesToSwitch = this.getParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES);
	oFF.XCommandUtil.handleInactiveCapabilities(serviceConfig, experimentalFeatures, capabilitiesToSwitch);
	serviceConfig.processQueryManagerCreation(this.getSyncType(), this, null);
};
oFF.XCmdDeserializeBlendingResult.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.getMessageManager().addAllMessages(extResult);
	if (extResult.isValid())
	{
		let strQueryModel = this.getParameterStringStrict(oFF.CmdDeserializeBlending.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY);
		let deserializeExt = queryManager.getQueryModel().deserializeExt(oFF.QModelFormat.INA_REPOSITORY, strQueryModel);
		this.getMessageManager().addAllMessages(deserializeExt);
		this.addResultParameter(oFF.CmdDeserializeBlending.PARAM_E_QUERY_MANAGER, queryManager);
	}
	this.onProcessFinished();
};
oFF.XCmdDeserializeBlendingResult.prototype.onQueryManagerImported = function(commandResult, index)
{
	this.m_queryManagers.set(index, commandResult.getResultParameter(oFF.CmdDeserializeBlending.PARAM_E_QUERY_MANAGER));
};

oFF.XCmdDeserializeBlendingSourcesResult = function() {};
oFF.XCmdDeserializeBlendingSourcesResult.prototype = new oFF.XCmdDeserializeBlendingResultBase();
oFF.XCmdDeserializeBlendingSourcesResult.prototype._ff_c = "XCmdDeserializeBlendingSourcesResult";

oFF.XCmdDeserializeBlendingSourcesResult.CLAZZ = null;
oFF.XCmdDeserializeBlendingSourcesResult.staticSetup = function()
{
	oFF.XCmdDeserializeBlendingSourcesResult.CLAZZ = oFF.XClass.create(oFF.XCmdDeserializeBlendingSourcesResult);
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.m_currentIndex = 0;
oFF.XCmdDeserializeBlendingSourcesResult.prototype.m_results = null;
oFF.XCmdDeserializeBlendingSourcesResult.prototype.importSourceQueryModel = function(application, sourceQueryModel, queryAlias, customIdentifier)
{
	let inaDefiningContext = sourceQueryModel.getStructureByKey("DefiningContext");
	let inaDefinition = inaDefiningContext.getStructureByKey("Definition");
	let inaDataSource = inaDefinition.getStructureByKey("DataSource");
	let commandFactory = oFF.XCommandFactory.create(application);
	let command;
	if (inaDataSource.containsKey("Sources"))
	{
		command = commandFactory.createCommand(oFF.CmdDeserializeBlendingSources.CMD_NAME);
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlendingSources.PARAM_I_APPLICATION));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEMS, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEMS));
		command.addParameterString(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEM, this.getParameterString(oFF.CmdDeserializeBlendingSources.PARAM_I_SYSTEM));
		command.addParameterString(oFF.CmdDeserializeBlendingSources.PARAM_I_QUERY_MODEL_STRING_INA_REPOSITORY, inaDefinition.toString());
		command.addParameter(oFF.CmdDeserializeBlending.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_MODELLER_CONTENT_LIST_INA_REPOSITORY, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_MODELLER_CONTENT_LIST_INA_REPOSITORY));
	}
	else
	{
		let dataSourceName = this.getDataSourceName(inaDataSource);
		command = commandFactory.createCommand(oFF.CmdCreateQueryManager.CMD_NAME);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_QUERY_MODEL_STRUCTURE_INA_REPOSITORY, inaDefinition);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_APPLICATION, this.getParameterStrict(oFF.CmdDeserializeBlendingSources.PARAM_I_APPLICATION));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_SYSTEM, this.getSystemName(queryAlias));
		command.addParameterString(oFF.CmdCreateQueryManager.PARAM_I_DATA_SOURCE, dataSourceName);
		command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_ENFORCE_INACTIVE_CAPABILITIES));
		command.addParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO, this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_EXT_DIMS_INFO));
		let inaRepoModellerMetadata = this.getParameter(oFF.CmdDeserializeBlendingSources.PARAM_I_MODELLER_CONTENT_LIST_INA_REPOSITORY);
		if (oFF.notNull(inaRepoModellerMetadata))
		{
			let inaRepoModellerMetadataIter = inaRepoModellerMetadata.getIterator();
			while (inaRepoModellerMetadataIter.hasNext())
			{
				let inaModellerRepoData = inaRepoModellerMetadataIter.next();
				if (inaModellerRepoData.containsKey("DataSource"))
				{
					let inaModelDataSourceName = this.getDataSourceName(inaModellerRepoData.getStructureByKey("DataSource"));
					if (oFF.XString.isEqual(inaModelDataSourceName, dataSourceName))
					{
						command.addParameter(oFF.CmdCreateQueryManager.PARAM_I_MODELLER_CONTENT_INA_REPOSITORY, oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_REPOSITORY, inaModellerRepoData));
						break;
					}
				}
			}
		}
	}
	this.m_results.add(null);
	command.processCommand(this.getSyncType(), this, oFF.XIntegerValue.create(this.m_currentIndex));
	this.m_currentIndex++;
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.onAllQueryManagersImported = function()
{
	for (let i = 0; i < this.m_results.size(); i++)
	{
		this.m_queryManagers.addAll(this.m_results.get(i));
	}
	this.addResultParameter(oFF.CmdDeserializeBlendingSources.PARAM_E_QUERY_MANAGERS, this.m_queryManagers.createListCopy());
	this.onProcessFinished();
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.onQueryManagerImported = function(commandResult, index)
{
	let queryManager = commandResult.getResultParameter(oFF.CmdDeserializeBlendingSources.PARAM_E_QUERY_MANAGER);
	if (oFF.notNull(queryManager))
	{
		this.m_results.set(index, oFF.XCollectionUtils.singletonList(queryManager));
	}
	else
	{
		let queryManagers = commandResult.getResultParameter(oFF.CmdDeserializeBlendingSources.PARAM_E_QUERY_MANAGERS);
		this.m_results.set(index, queryManagers);
	}
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.process = function()
{
	this.m_results = oFF.XList.create();
	oFF.XCmdDeserializeBlendingResultBase.prototype.process.call( this );
};
oFF.XCmdDeserializeBlendingSourcesResult.prototype.releaseObject = function()
{
	oFF.XCmdDeserializeBlendingResultBase.prototype.releaseObject.call( this );
	this.m_results = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_results);
};

oFF.QCsnMdDimMembers = function() {};
oFF.QCsnMdDimMembers.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdDimMembers.prototype._ff_c = "QCsnMdDimMembers";

oFF.QCsnMdDimMembers.prototype.addCurrencyDimReference = function(structure, member, dataCell)
{
	let valueType = dataCell.getBaseValueType();
	if (valueType === oFF.XValueType.AMOUNT)
	{
		let queryModel = member.getDimension().getQueryModel();
		let currencyDimension = queryModel.getDimensionByType(oFF.DimensionType.CURRENCY);
		if (oFF.notNull(currencyDimension))
		{
			structure.putNewStructure(oFF.CsnConstants.A_ISO_CURRENCY).putString(oFF.CsnConstants.REFERENCE, this.getDimExternalName(currencyDimension));
		}
	}
};
oFF.QCsnMdDimMembers.prototype.addUnitDimReference = function(structure, member, dataCell)
{
	let valueType = dataCell.getBaseValueType();
	if (valueType === oFF.XValueType.QUANTITY)
	{
		let queryModel = member.getDimension().getQueryModel();
		let unitDimension = queryModel.getDimensionByType(oFF.DimensionType.UNIT);
		if (oFF.notNull(unitDimension))
		{
			structure.putNewStructure(oFF.CsnConstants.A_MEASURES_UNIT).putString(oFF.CsnConstants.REFERENCE, this.getDimExternalName(unitDimension));
		}
	}
};
oFF.QCsnMdDimMembers.prototype.createStructureMemberElement = function(member, axisType)
{
	let structure = oFF.PrFactory.createStructure();
	structure.putBoolean(oFF.CsnConstants.A_MEASURE, true);
	structure.putString(oFF.CsnConstants.A_COMMON_LABEL, member.getText());
	structure.putNewStructure(oFF.CsnConstants.A_QUERY_AXIS).putString(oFF.CsnConstants.ENUM, oFF.QCsnConverter.lookupAxisCsn(axisType));
	let aggregationType = member.getAggregationType();
	if (oFF.notNull(aggregationType))
	{
		let csnDfAggregation = structure.putNewStructure(oFF.CsnConstants.A_DEFAULT_AGGREGATION);
		csnDfAggregation.putString(oFF.CsnConstants.ENUM, aggregationType.getName());
	}
	let numericPrecision = member.getNumericPrecision();
	if (oFF.notNull(numericPrecision))
	{
		structure.putInteger(oFF.CsnConstants.PRECISION, numericPrecision.getInteger());
	}
	let numericScale = member.getNumericScale();
	if (oFF.notNull(numericScale))
	{
		structure.putInteger(oFF.CsnConstants.SCALE, numericScale.getInteger());
	}
	let resultVisibility = member.getResultVisibility();
	if (resultVisibility === oFF.ResultVisibility.HIDDEN)
	{
		structure.putBoolean(oFF.CsnConstants.A_UI_HIDDEN, true);
	}
	let queryDataCells = member.getQueryDataCells();
	if (queryDataCells.size() === 1)
	{
		let queryDataCell = queryDataCells.get(0);
		structure.putInteger(oFF.CsnConstants.A_DECIMALS, queryDataCell.getDecimalPlaces());
		this.addCurrencyDimReference(structure, member, queryDataCell);
		this.addUnitDimReference(structure, member, queryDataCell);
	}
	return structure;
};
oFF.QCsnMdDimMembers.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let displayKeyField = dimension.getFlatDisplayKeyField();
	let members = dimension.getAllStructureMembers();
	let size = members.size();
	for (let i = 0; i < size; i++)
	{
		let member = members.get(i);
		let displayKeyFieldValue = member.getFieldValue(displayKeyField).getValue();
		let csnStructureMember = this.createStructureMemberElement(member, dimension.getDefaultAxisType());
		inaStructure.put(displayKeyFieldValue.getStringRepresentation(), csnStructureMember);
	}
	return inaStructure;
};
oFF.QCsnMdDimMembers.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.MEMBERS;
};
oFF.QCsnMdDimMembers.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};

oFF.QCsnMdDimension = function() {};
oFF.QCsnMdDimension.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdDimension.prototype._ff_c = "QCsnMdDimension";

oFF.QCsnMdDimension.getDisplay = function(dimension)
{
	let displayTypes = oFF.XList.create();
	let rsFields = dimension.getMainAttribute().getDefaultResultSetFields();
	let i = 0;
	while (i < rsFields.size() && displayTypes.size() < 2)
	{
		oFF.XCollectionUtils.addIfNotPresent(displayTypes, rsFields.get(i).isKeyField() ? oFF.CsnConstants.DISPLAY_KEY : oFF.CsnConstants.DISPLAY_TEXT);
		i++;
	}
	return displayTypes.hasElements() ? oFF.XCollectionUtils.join(displayTypes, "_") : oFF.CsnConstants.DISPLAY_KEY;
};
oFF.QCsnMdDimension.getTotals = function(dimension)
{
	return dimension.isTotalsVisibilityOnDefault() ? oFF.CsnConstants.TOTALS_SHOW : oFF.CsnConstants.TOTALS_HIDE;
};
oFF.QCsnMdDimension.prototype.addFields = function(csnElements, dimension)
{
	let keyField = dimension.getFlatKeyField();
	let textField = dimension.getFlatTextField();
	let fields = dimension.getFields();
	let size = fields.size();
	for (let i = 0; i < size; i++)
	{
		let field = fields.get(i);
		let csnElement = csnElements.putNewStructure(this.getFieldName(field));
		this.addLength(csnElement, field);
		csnElement.putString(oFF.CsnConstants.TYPE, oFF.QCsnConverter.lookupValueTypeCsn(field.getValueType(), oFF.CsnConstants.TYPE_STRING));
		if (field.isKeyField())
		{
			csnElement.putBoolean(oFF.CsnConstants.KEY, true);
			let textAttribute = field === keyField && oFF.notNull(textField) ? this.getFieldName(textField) : null;
			if (oFF.XStringUtils.isNotNullAndNotEmpty(textAttribute))
			{
				csnElement.putNewStructure(oFF.CsnConstants.A_TEXT_ATTRIBUTE).putString(oFF.CsnConstants.REFERENCE, textAttribute);
			}
		}
		else
		{
			csnElement.putNewStructure(oFF.CsnConstants.A_TEXT_FOR).putString(oFF.CsnConstants.REFERENCE, this.getFieldName(keyField));
		}
		if (!field.isFilterable())
		{
			csnElement.putBoolean(oFF.CsnConstants.A_FILTERABLE, false);
		}
	}
};
oFF.QCsnMdDimension.prototype.addLength = function(structure, field)
{
	if (field.getValueType().isString() && field.getLength() > 0)
	{
		structure.putInteger(oFF.CsnConstants.LENGTH, field.getLength());
	}
};
oFF.QCsnMdDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let keyField = dimension.getFlatKeyField();
	let csnQueryDimension = inaStructure.putNewStructure(this.getDimExternalName(dimension));
	csnQueryDimension.putBoolean(oFF.CsnConstants.A_DIMENSION, true);
	csnQueryDimension.putString(oFF.CsnConstants.TYPE, oFF.CsnConstants.TYPE_ASSOCIATION);
	csnQueryDimension.putString(oFF.CsnConstants.TARGET, dimension.getName());
	if (oFF.notNull(keyField))
	{
		this.addLength(csnQueryDimension, keyField);
	}
	csnQueryDimension.putNewStructure(oFF.CsnConstants.A_QUERY_AXIS).putString(oFF.CsnConstants.ENUM, oFF.QCsnConverter.lookupAxisCsn(dimension.getDefaultAxisType()));
	csnQueryDimension.putNewStructure(oFF.CsnConstants.A_QUERY_DISPLAY).putString(oFF.CsnConstants.ENUM, oFF.QCsnMdDimension.getDisplay(dimension));
	csnQueryDimension.putNewStructure(oFF.CsnConstants.A_QUERY_TOTALS).putString(oFF.CsnConstants.ENUM, oFF.QCsnMdDimension.getTotals(dimension));
	csnQueryDimension.putNewList(oFF.CsnConstants.KEYS).addNewStructure().putNewList(oFF.CsnConstants.REF).addAllStrings(this.getAllKeys(dimension));
	let csnDimension = oFF.PrFactory.createStructure();
	csnDimension.putString(oFF.CsnConstants.A_COMMON_LABEL, dimension.getText());
	csnDimension.putString(oFF.CsnConstants.KIND, oFF.CsnConstants.KIND_ENTITY);
	csnDimension.putNewStructure(oFF.CsnConstants.A_DATA_CATEGORY).putString(oFF.CsnConstants.ENUM, oFF.CsnConstants.DATA_CATEGORY_DIMENSION);
	if (oFF.notNull(keyField))
	{
		csnDimension.putString(oFF.CsnConstants.A_REPRESENTATIVE_KEY, this.getFieldName(keyField));
	}
	this.addFields(csnDimension.putNewStructure(oFF.CsnConstants.ELEMENTS), dimension);
	return csnDimension;
};
oFF.QCsnMdDimension.prototype.getAllKeys = function(dimension)
{
	let keys = oFF.XList.create();
	let keyField = dimension.getFlatKeyField();
	let fields = dimension.getFields();
	let size = fields.size();
	for (let i = 0; i < size; i++)
	{
		let field = fields.get(i);
		let type = field.getPresentationType();
		let isDefaultKeyField = field === keyField;
		let isFlatKeyField = type === oFF.PresentationType.KEY && !field.isHierarchyKeyField();
		if (isDefaultKeyField || isFlatKeyField)
		{
			keys.add(this.getFieldName(field));
		}
	}
	return keys;
};
oFF.QCsnMdDimension.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.QCsnMdDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};

oFF.QCsnMdDimensions = function() {};
oFF.QCsnMdDimensions.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdDimensions.prototype._ff_c = "QCsnMdDimensions";

oFF.QCsnMdDimensions.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent;
	let csnQueryDefinition = inaStructure.getStructureByKey(queryModel.getDataSource().getObjectName());
	let csnQueryElements = csnQueryDefinition.getStructureByKey(oFF.CsnConstants.ELEMENTS);
	let dimensions = queryModel.getDimensions();
	let size = dimensions.size();
	for (let i = 0; i < size; i++)
	{
		let dimension = dimensions.get(i);
		if (dimension.isMeasureStructure())
		{
			exporter.exportMembers(dimension, csnQueryElements);
		}
		else
		{
			let csnDimension = exporter.exportDimension(dimension, csnQueryElements);
			inaStructure.put(dimension.getName(), csnDimension);
		}
	}
	return inaStructure;
};
oFF.QCsnMdDimensions.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DIMENSIONS;
};
oFF.QCsnMdDimensions.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};

oFF.QCsnMdQuery = function() {};
oFF.QCsnMdQuery.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdQuery.prototype._ff_c = "QCsnMdQuery";

oFF.QCsnMdQuery.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent;
	let csnDefinitions = inaStructure.putNewStructure(oFF.CsnConstants.DEFINITIONS);
	let csnQueryDefinition = csnDefinitions.putNewStructure(queryModel.getDataSource().getObjectName());
	csnQueryDefinition.putString(oFF.CsnConstants.KIND, oFF.CsnConstants.KIND_ENTITY);
	csnQueryDefinition.putString(oFF.CsnConstants.A_COMMON_LABEL, queryModel.getText());
	csnQueryDefinition.putNewStructure(oFF.CsnConstants.ELEMENTS);
	exporter.exportDimensions(queryModel, csnDefinitions);
	exporter.exportVariables(queryModel.getVariableContainer(), inaStructure);
	return inaStructure;
};
oFF.QCsnMdQuery.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QCsnMdQuery.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};
oFF.QCsnMdQuery.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QueryModel.create(olapEnv, null, oFF.QCapabilities.create());
};

oFF.QCsnMdVariable = function() {};
oFF.QCsnMdVariable.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdVariable.prototype._ff_c = "QCsnMdVariable";

oFF.QCsnMdVariable.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variable = modelComponent;
	inaStructure.putString(oFF.CsnConstants.NAME, this.getVariableName(variable));
	return inaStructure;
};
oFF.QCsnMdVariable.prototype.getComponentType = function()
{
	return oFF.VariableType.ANY_VARIABLE;
};
oFF.QCsnMdVariable.prototype.getVariableName = function(variable)
{
	let externalName = variable.getNameExternal();
	return oFF.XStringUtils.isNotNullAndNotEmpty(externalName) ? externalName : variable.getName();
};
oFF.QCsnMdVariable.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};

oFF.QCsnMdVariables = function() {};
oFF.QCsnMdVariables.prototype = new oFF.QCsnComponentMetadata();
oFF.QCsnMdVariables.prototype._ff_c = "QCsnMdVariables";

oFF.QCsnMdVariables.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variableContainer = modelComponent;
	let variables = variableContainer.getVariables();
	if (variables.hasElements())
	{
		let csnParameters = inaStructure.putNewList(oFF.CsnConstants.PARAMETERS);
		let size = variables.size();
		for (let i = 0; i < size; i++)
		{
			exporter.exportVariable(variables.get(i), csnParameters.addNewStructure());
		}
	}
	return inaStructure;
};
oFF.QCsnMdVariables.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QCsnMdVariables.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};

oFF.QInAMdBasicMeasure = function() {};
oFF.QInAMdBasicMeasure.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdBasicMeasure.prototype._ff_c = "QInAMdBasicMeasure";

oFF.QInAMdBasicMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let basicMeasure = modelComponent;
	inaStructure.putString("Name", basicMeasure.getName());
	return inaStructure;
};
oFF.QInAMdBasicMeasure.prototype.getComponentType = function()
{
	return oFF.MemberType.BASIC_MEASURE;
};
oFF.QInAMdBasicMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let basicMeasure = modelComponent;
	basicMeasure.setName(inaStructure.getStringByKey("Name"));
	return modelComponent;
};
oFF.QInAMdBasicMeasure.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QBasicMeasure._createBasicMeasure(context, parentComponent);
};

oFF.QInAMdDataSource = function() {};
oFF.QInAMdDataSource.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDataSource.prototype._ff_c = "QInAMdDataSource";

oFF.QInAMdDataSource.exportMd = function(exporter, inaStructure, queryModel)
{
	let inaDataSource = oFF.QInADataSource.exportDataSource(exporter, queryModel.getDataSource(), false, inaStructure, true);
	if (queryModel.getDataSource().getValidationHash() !== null)
	{
		inaDataSource.putString("ValidationHash", queryModel.getDataSource().getValidationHash());
	}
	if (queryModel.getQueryManager().getInitSettings().usesMetadataCache())
	{
		inaDataSource.putBoolean("Cache", true);
	}
	return inaDataSource;
};
oFF.QInAMdDataSource.importMd = function(importer, inaQueryModel, queryModel, context)
{
	let inaStructure = inaQueryModel;
	if (oFF.notNull(inaStructure) && !inaStructure.containsKey("DataSource"))
	{
		inaStructure = inaStructure.getStructureByKey("Analytics");
		if (oFF.notNull(inaStructure) && !inaStructure.containsKey("DataSource"))
		{
			inaStructure = inaStructure.getStructureByKey("Definition");
		}
		if (oFF.isNull(inaStructure) && inaQueryModel.containsKey("Definition"))
		{
			inaStructure = inaQueryModel.getStructureByKey("Definition");
		}
		if (oFF.isNull(inaStructure) && inaQueryModel.containsKey("ListReporting"))
		{
			inaStructure = inaQueryModel.getStructureByKey("ListReporting");
		}
	}
	let cubeInfo = null;
	if (oFF.notNull(inaStructure) && inaStructure.containsKey("DataSource"))
	{
		cubeInfo = oFF.QInADataSource.importQd(importer, inaStructure, "DataSource", context);
		if (oFF.notNull(cubeInfo))
		{
			if (oFF.XStringUtils.isNullOrEmpty(cubeInfo.getText()))
			{
				let text = inaStructure.getStringByKey("Description");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(text))
				{
					cubeInfo.setText(text);
				}
			}
			cubeInfo.setCreatedBy(inaStructure.getStringByKey("CreatedBy"));
			cubeInfo.setLastUpdateBy(inaStructure.getStringByKey("LastDataUpdateBy"));
			let createdOn = inaStructure.getStringByKey("CreatedOn");
			let createdOnObj = oFF.XDateTime.createDateTimeSafe(createdOn);
			cubeInfo.setCreatedOn(createdOnObj);
			let lastUpdateOn = inaStructure.getStringByKey("LastDataUpdateOn");
			if (oFF.isNull(lastUpdateOn))
			{
				lastUpdateOn = inaStructure.getStringByKey("LastDataUpdate");
			}
			let lastUpdateOnObj = oFF.XDateTime.createDateTimeSafe(lastUpdateOn);
			cubeInfo.setLastUpdateOn(lastUpdateOnObj);
			let dueDateValue = inaStructure.getStringByKey("DueDate");
			let dueDate = oFF.XDateTime.createDateTimeSafe(dueDateValue);
			cubeInfo.setDueDate(dueDate);
		}
	}
	let baseDatasource = oFF.QInADataSource.importQd(importer, inaQueryModel, "BaseDataSource", context);
	if (oFF.notNull(baseDatasource))
	{
		if (oFF.notNull(cubeInfo))
		{
			cubeInfo.setParentCubeInfo(baseDatasource);
		}
		queryModel.setBaseDataSource(baseDatasource);
		let infoProvider = oFF.QInfoProvider.createInfoProvider(queryModel, baseDatasource.getObjectName(), baseDatasource.getObjectName(), null);
		queryModel.setInfoProvider(infoProvider);
	}
	if (oFF.notNull(cubeInfo))
	{
		queryModel.setCubeInfo(cubeInfo);
	}
};
oFF.QInAMdDataSource.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent;
	return oFF.QInAMdDataSource.exportMd(exporter, inaStructure, queryModel);
};
oFF.QInAMdDataSource.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdDataSource.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	oFF.QInAMdDataSource.importMd(importer, inaStructure, queryModel, context);
	return modelComponent;
};

oFF.QInAMdDimMembers = function() {};
oFF.QInAMdDimMembers.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDimMembers.prototype._ff_c = "QInAMdDimMembers";

oFF.QInAMdDimMembers.decideMeasureTypeAndAdd = function(dimension, inaStructureMember, memberName, memberText)
{
	let structureMember;
	let memberTypeKey = dimension.isMeasureStructure() ? "[Measures].[MemberType]" : "[CustomDimension2].[MemberType]";
	let memberType = inaStructureMember.getIntegerByKeyExt(memberTypeKey, -1);
	if (memberType === 0)
	{
		structureMember = dimension.addNewFormulaMeasure(memberName, memberText);
	}
	else if (memberType === 1)
	{
		structureMember = dimension.addNewRestrictedMeasure(memberName, memberText);
	}
	else
	{
		structureMember = dimension.addNewBasicMeasure(memberName, memberText);
	}
	return structureMember;
};
oFF.QInAMdDimMembers.exportMd = function(exporter, inaDimension, dimension)
{
	let basicStructureMembers = dimension.getBasicStructureMembers();
	if (oFF.notNull(basicStructureMembers))
	{
		let inaBasicMemberList = inaDimension.putNewList("BasicMembers");
		if (!(exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE) && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT))
		{
			oFF.QInAMdDimMembers.exportMemberDetails(exporter, dimension, basicStructureMembers, inaBasicMemberList);
		}
	}
	let extendedStructureMembers = dimension.getExtendedStructureMembers();
	if (oFF.XCollectionUtils.hasElements(extendedStructureMembers))
	{
		let numberOfExtendedStructureMembers = extendedStructureMembers.size();
		let basicStructureMembers2 = oFF.XListOfNameObject.create();
		for (let i = 0; i < numberOfExtendedStructureMembers; i++)
		{
			let customMember = extendedStructureMembers.get(i);
			if (customMember.isCreatedFromMetadata())
			{
				basicStructureMembers2.add(customMember);
			}
		}
		if (oFF.XCollectionUtils.hasElements(basicStructureMembers2))
		{
			let extMembersFromMD = inaDimension.putNewList("Extended_Members_From_MD");
			oFF.QInAMdDimMembers.exportMemberDetails(exporter, dimension, basicStructureMembers2, extMembersFromMD);
		}
	}
	let orderedStructureMemberNames = dimension.getOrderedStructureMemberNames();
	if (oFF.notNull(orderedStructureMemberNames))
	{
		let orderedNamesList = inaDimension.putNewList("OrderedStructureMemberNames");
		orderedNamesList.addAllStrings(orderedStructureMemberNames);
	}
};
oFF.QInAMdDimMembers.exportMemberDetails = function(exporter, dimension, basicStructureMembers, inaBasicMemberList)
{
	if (oFF.notNull(basicStructureMembers))
	{
		let fieldList = dimension.getFields();
		let fieldSize = fieldList.size();
		let textField = dimension.getTextField();
		let textFieldName = oFF.notNull(textField) ? textField.getName() : null;
		let memberSize = basicStructureMembers.size();
		for (let idxMember = 0; idxMember < memberSize; idxMember++)
		{
			let inaMember = inaBasicMemberList.addNewStructure();
			let structureMember = basicStructureMembers.get(idxMember);
			let supportsCustomMeasuresInMetatada = dimension.getModelCapabilities().supportsCustomMeasuresInMetadata();
			if (supportsCustomMeasuresInMetatada)
			{
				let inaMemberType = oFF.QInAConverter.lookupMeasureStructureMemberTypeInaForUniversalModels(structureMember.getMemberType());
				let memberTypeKey = dimension.isMeasureStructure() ? "[Measures].[MemberType]" : "[CustomDimension2].[MemberType]";
				inaMember.putInteger(memberTypeKey, inaMemberType);
			}
			if (structureMember.getMemberType() === oFF.MemberType.BASIC_MEASURE)
			{
				if (structureMember.isNotFromMetadata())
				{
					inaMember.putBoolean("BasicMeasureNotFromMetadata", true);
				}
			}
			if (structureMember.isModelDefinedMember())
			{
				inaMember.putBoolean("isModelDefinedMember", true);
			}
			for (let idxField = 0; idxField < fieldSize; idxField++)
			{
				let field = fieldList.get(idxField);
				if (field.isCubeBlendingPropertiesField())
				{
					continue;
				}
				let fieldValue = structureMember.getFieldValue(field);
				if (oFF.isNull(fieldValue))
				{
					continue;
				}
				if (!structureMember.isSelectionCandidate())
				{
					inaMember.putBoolean("IsSelectionCandidate", false);
				}
				let defaultSelectedDimensions = structureMember.getDefaultSelectedDimensionNames();
				if (oFF.notNull(defaultSelectedDimensions))
				{
					let inaDefaultSelectedDimensions = inaMember.putNewList("DefaultSelectedDimensions");
					inaDefaultSelectedDimensions.addAllStrings(defaultSelectedDimensions);
				}
				oFF.QInAExportUtil.setNameIfNotNull(inaMember, "SingleValueCalculation", structureMember.getSingleValueCalculation());
				oFF.QInAExportUtil.setNameIfNotNull(inaMember, "ResultCalculation", structureMember.getResultCalculation());
				oFF.QInAExportUtil.setNameIfNotNull(inaMember, "Aggregation", structureMember.getAggregationType());
				if (structureMember.isCumulation())
				{
					inaMember.putBoolean("IsCumulation", true);
				}
				let numericPrecision = structureMember.getNumericPrecision();
				if (oFF.notNull(numericPrecision))
				{
					inaMember.putInteger("NumericPrecision", numericPrecision.getInteger());
				}
				let numericScale = structureMember.getNumericScale();
				if (oFF.notNull(numericScale))
				{
					inaMember.putInteger("NumericScale", numericScale.getInteger());
				}
				let numericShift = structureMember.getNumericShift();
				if (oFF.notNull(numericShift))
				{
					inaMember.putInteger("NumericShift", numericShift.getInteger());
				}
				if (structureMember.getMappedCurrencyTranslationNameForInAData() !== null)
				{
					inaMember.putString("CurrencyTranslationName", structureMember.getMappedCurrencyTranslationNameForInAData());
				}
				if (structureMember.getUnitTranslationName() !== null)
				{
					inaMember.putString("UnitTranslationName", structureMember.getUnitTranslationName());
				}
				let fieldName = field.getName();
				let valueType = fieldValue.getValueType();
				if (valueType === oFF.XValueType.STRING)
				{
					if (oFF.notNull(textFieldName) && oFF.XString.isEqual(fieldName, textFieldName) && structureMember.hasOverrideTextDefined())
					{
						inaMember.putString(fieldName, structureMember.getText());
					}
					else
					{
						inaMember.putString(fieldName, fieldValue.getString());
					}
				}
				else if (valueType === oFF.XValueType.BOOLEAN)
				{
					inaMember.putBoolean(fieldName, fieldValue.getBoolean());
				}
				else if (valueType === oFF.XValueType.INTEGER)
				{
					inaMember.putInteger(fieldName, fieldValue.getInteger());
				}
				else if (valueType === oFF.XValueType.LONG)
				{
					inaMember.putLong(fieldName, fieldValue.getLong());
				}
				else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
				{
					inaMember.putDouble(fieldName, fieldValue.getDouble());
				}
				else
				{
					exporter.addError(oFF.ErrorCodes.INVALID_TOKEN, "Unsupported element type");
				}
			}
			inaMember.putStringNotNullAndNotEmpty("SemanticObject", structureMember.getSemanticObject());
		}
	}
};
oFF.QInAMdDimMembers.importMd = function(importer, dimension, inaStructure)
{
	if (dimension.supportsBasicStructureMembers())
	{
		let inaStructureMemberList = inaStructure.getListByKey("BasicMembers");
		if (oFF.isNull(inaStructureMemberList))
		{
			inaStructureMemberList = inaStructure.getListByKey("Members");
		}
		oFF.QInAMdDimMembers.importMemberDetails(importer, dimension, inaStructureMemberList);
		if (importer.hasErrors())
		{
			return;
		}
		let inaExtStructureMemberList = inaStructure.getListByKey("Extended_Members_From_MD");
		oFF.QInAMdDimMembers.importMemberDetails(importer, dimension, inaExtStructureMemberList);
		if (importer.hasErrors())
		{
			return;
		}
	}
	let orderedNamesList = oFF.PrUtils.getListProperty(inaStructure, "OrderedStructureMemberNames");
	if (oFF.notNull(orderedNamesList))
	{
		let orderedStructureMemberNames = oFF.XList.create();
		let len = oFF.PrUtils.getListSize(orderedNamesList, 0);
		for (let orderedNameIndex = 0; orderedNameIndex < len; orderedNameIndex++)
		{
			let orderedNameString = oFF.PrUtils.getStringElement(orderedNamesList, orderedNameIndex);
			oFF.XObjectExt.assertNotNullExt(orderedNameString, "illegal state");
			orderedStructureMemberNames.add(orderedNameString.getString());
		}
		dimension.reOrderStructureMembers(orderedStructureMemberNames);
	}
};
oFF.QInAMdDimMembers.importMemberDetails = function(importer, dimension, inaStructureMemberList)
{
	if (oFF.notNull(inaStructureMemberList))
	{
		let fieldList = dimension.getFields();
		let keyField = dimension.getKeyField();
		let keyFieldName = keyField.getName();
		let textField = dimension.getTextField();
		let textFieldName = oFF.isNull(textField) ? null : textField.getName();
		let size = inaStructureMemberList.size();
		for (let memberIdx = 0; memberIdx < size; memberIdx++)
		{
			let inaStructureMember = inaStructureMemberList.getStructureAt(memberIdx);
			let memberName = inaStructureMember.getStringByKey(keyFieldName);
			let memberText = inaStructureMember.getStringByKey(textFieldName);
			let structureMember = null;
			if (importer.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE) && dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				continue;
			}
			else if (dimension.getQueryModel().getModelCapabilities().supportsCustomMeasuresInMetadata())
			{
				structureMember = oFF.QInAMdDimMembers.decideMeasureTypeAndAdd(dimension, inaStructureMember, memberName, memberText);
			}
			else
			{
				structureMember = dimension.addNewBasicMeasure(memberName, memberText);
			}
			structureMember.setCreatedFromMetadata(true);
			if (inaStructureMember.getBooleanByKeyExt("BasicMeasureNotFromMetadata", false))
			{
				structureMember.setNotFromMetadata();
			}
			structureMember.setIsSelectionCandidate(inaStructureMember.getBooleanByKeyExt("IsSelectionCandidate", true));
			let inaDefaultSelectedDimensions = inaStructureMember.getListByKey("DefaultSelectedDimensions");
			if (oFF.notNull(inaDefaultSelectedDimensions))
			{
				let sizeDefaultSelections = inaDefaultSelectedDimensions.size();
				for (let idxDefaultSelection = 0; idxDefaultSelection < sizeDefaultSelections; idxDefaultSelection++)
				{
					structureMember.addDefaultSelectionDimensionByName(inaDefaultSelectedDimensions.getStringAt(idxDefaultSelection));
				}
			}
			let resultCalculation = oFF.QInAConverter.lookupResultCalculation(inaStructureMember.getStringByKeyExt("ResultCalculation", null));
			structureMember.setResultCalculation(resultCalculation);
			oFF.QInAMember.importAggregationType(structureMember, inaStructureMember, false);
			if (inaStructureMember.getByKey("isModelDefinedMember") !== null)
			{
				structureMember.setModelDefinedMember(inaStructureMember.getBooleanByKey("isModelDefinedMember"));
			}
			let numericPrecision = oFF.PrUtils.getIntegerProperty(inaStructureMember, "NumericPrecision");
			if (oFF.notNull(numericPrecision))
			{
				structureMember.setNumericPrecision(numericPrecision.getInteger());
			}
			let numericScale = oFF.PrUtils.getIntegerProperty(inaStructureMember, "NumericScale");
			if (oFF.notNull(numericScale))
			{
				structureMember.setNumericScale(numericScale.getInteger());
			}
			let numericShift = oFF.PrUtils.getIntegerProperty(inaStructureMember, "NumericShift");
			if (oFF.notNull(numericShift))
			{
				structureMember.setNumericShift(numericShift.getInteger());
			}
			if (inaStructureMember.containsKey("CurrencyTranslationName"))
			{
				structureMember.setCurrencyTranslationName(inaStructureMember.getStringByKey("CurrencyTranslationName"));
			}
			if (inaStructureMember.containsKey("UnitTranslationName"))
			{
				structureMember.setUnitTranslationName(inaStructureMember.getStringByKey("UnitTranslationName"));
			}
			let singleValueCalculation = oFF.QInAConverter.lookupSingleValueCalculation(inaStructureMember.getStringByKeyExt("SingleValueCalculation", null));
			structureMember.setSingleValueCalculation(singleValueCalculation);
			if (inaStructureMember.containsKey("IsCumulation"))
			{
				structureMember.setIsCumulation(inaStructureMember.getBooleanByKey("IsCumulation"));
			}
			let fieldSize = fieldList.size();
			for (let fieldIdx = 0; fieldIdx < fieldSize; fieldIdx++)
			{
				let field = fieldList.get(fieldIdx);
				if (field.isCubeBlendingPropertiesField())
				{
					continue;
				}
				let name = field.getName();
				if (!inaStructureMember.containsKey(name))
				{
					continue;
				}
				let valueType = field.getValueType();
				let targetValue;
				if (inaStructureMember.hasStringByKey(name))
				{
					targetValue = oFF.XValueUtil.getValueFromString(inaStructureMember.getStringByKey(name), valueType);
				}
				else
				{
					let prElement = inaStructureMember.getByKey(name);
					targetValue = oFF.isNull(prElement) ? null : oFF.XValueUtil.convertValue(prElement.copyAsPrimitiveXValue(), valueType);
				}
				structureMember.createAndAddFieldWithValue(field, targetValue);
			}
			if (inaStructureMember.hasStringByKey("SemanticObject"))
			{
				structureMember.setSemanticObject(inaStructureMember.getStringByKey("SemanticObject"));
			}
		}
	}
};
oFF.QInAMdDimMembers.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdDimMembers.exportMd(exporter, inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdDimMembers.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdDimMembers.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdDimMembers.importMd(importer, modelComponent, inaStructure);
	return modelComponent;
};

oFF.QInAMdDimProperties = function() {};
oFF.QInAMdDimProperties.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDimProperties.prototype._ff_c = "QInAMdDimProperties";

oFF.QInAMdDimProperties.importHierarchyProperties = function(dimension, propertyName, inaStructureHierarchyProperties)
{
	let booleanProperty = oFF.PrUtils.getBooleanProperty(inaStructureHierarchyProperties, propertyName);
	if (oFF.notNull(booleanProperty))
	{
		dimension.addNameValuePair(oFF.XNameValuePair.create(propertyName, oFF.XBoolean.convertToString(booleanProperty.getBoolean())));
	}
};
oFF.QInAMdDimProperties.importMdNameValuePairs = function(inaStructure, dimension)
{
	let inaHierarchyProperties = oFF.PrUtils.getStructureProperty(inaStructure, "HierarchyProperties");
	if (oFF.notNull(inaHierarchyProperties))
	{
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyMaintenance", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyCreation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyCreationByReference", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyUpdate", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyCopy", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyDeletion", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchySaving", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyActivation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyExternalDimension", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyIntervals", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyReverseSign", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyStructureTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyVersionDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalMaintenance", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalCreation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalCreationByReference", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalUpdate", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalCopy", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalDeletion", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalSaving", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalActivation", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalExternalDimension", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalIntervals", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalReverseSign", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalStructureTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalTimeDep", inaHierarchyProperties);
		oFF.QInAMdDimProperties.importHierarchyProperties(dimension, "HierarchyLocalVersionDep", inaHierarchyProperties);
	}
	let inaMasterDataProperties = oFF.PrUtils.getStructureProperty(inaStructure, "MasterDataProperties");
	if (oFF.notNull(inaMasterDataProperties))
	{
		let masterDataMaintenance = oFF.PrUtils.getBooleanProperty(inaMasterDataProperties, "MasterDataMaintenance");
		if (oFF.notNull(masterDataMaintenance))
		{
			dimension.addNameValuePair(oFF.XNameValuePair.create("MasterDataMaintenance", oFF.XBoolean.convertToString(masterDataMaintenance.getBoolean())));
		}
	}
};
oFF.QInAMdDimProperties.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};
oFF.QInAMdDimProperties.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdDimProperties.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdDimProperties.importMdNameValuePairs(inaStructure, modelComponent);
	return modelComponent;
};

oFF.QInAMdDimension = function() {};
oFF.QInAMdDimension.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDimension.prototype._ff_c = "QInAMdDimension";

oFF.QInAMdDimension.addSupportedReadModes = function(supportedRsMemberReadModes, readmodeManager, context)
{
	let size = supportedRsMemberReadModes.size();
	for (let i = 0; i < size; i++)
	{
		let readMode = oFF.QInAConverter.lookupReadMode(supportedRsMemberReadModes.getStringAt(i));
		if (oFF.notNull(readMode))
		{
			readmodeManager.addSupportedReadMode(context, readMode);
		}
	}
};
oFF.QInAMdDimension.exportAxesConstraints = function(inaDimension, dimension)
{
	let supportedAxesTypes = dimension.getSupportedAxesTypes().getIterator();
	let inaAxisConstaints = inaDimension.putNewList("AxisConstraints");
	while (supportedAxesTypes.hasNext())
	{
		inaAxisConstaints.addString(supportedAxesTypes.next().getName());
	}
	oFF.XObjectExt.release(supportedAxesTypes);
};
oFF.QInAMdDimension.exportDimensionFlags = function(exporter, inaStructure, dimension)
{
	inaStructure.putString("Description", dimension.getText());
	inaStructure.putString("NameExternal", dimension.getExternalName());
	if (dimension.getId() !== 0)
	{
		inaStructure.putInteger("ID", dimension.getId());
	}
	inaStructure.putBoolean("LowercaseSupported", dimension.supportsLowerCase());
	inaStructure.putBoolean("IsOwnerDimension", dimension.isOwnerDimension());
	inaStructure.putBoolean("Private", dimension.isPrivate());
	inaStructure.putBoolean("SupportsCummulative", dimension.supportsCumulative());
	let selectionCapabilities = dimension.getFilterCapabilities();
	inaStructure.putBoolean("MultipleValues", selectionCapabilities.supportsMultipleValues());
	inaStructure.putBoolean("CanBeAggregated", dimension.canBeAggregated());
	inaStructure.putBoolean("IsHierarchyMandatory", dimension.isHierarchyMandatory());
	if (exporter.isAbap(dimension) && !dimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
	{
		let hasCheckTable = dimension.getHasCheckTable();
		if (exporter.getSession().hasFeature(oFF.FeatureToggleOlap.HAS_CHECK_TABLE_DEFAULT_FALSE) && hasCheckTable)
		{
			inaStructure.putBoolean("HasCheckTable", true);
		}
		else if (!hasCheckTable)
		{
			inaStructure.putBoolean("HasCheckTable", false);
		}
	}
};
oFF.QInAMdDimension.exportDimensionGroup = function(inaStructure, dimension)
{
	if (dimension.isGroupingDimension())
	{
		inaStructure.putBoolean("IsDimensionGroup", true);
	}
	let groupingDimensionNames = dimension.getGroupingDimensionNames();
	if (groupingDimensionNames.hasElements())
	{
		let dimensionGroupList = inaStructure.putNewList("DimensionGroups");
		let lenGrouping = groupingDimensionNames.size();
		for (let j = 0; j < lenGrouping; j++)
		{
			dimensionGroupList.addString(groupingDimensionNames.get(j));
		}
	}
};
oFF.QInAMdDimension.exportDimensionReadModes = function(exporter, inaStructure, dimension)
{
	if (exporter.isAbap(dimension))
	{
		oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.RESULT_SET, inaStructure, "SupportedResultSetReadModes", "ResultSetDefaultReadMode");
		oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.VARIABLE, inaStructure, "SupportedVariableReadModes", "DefaultVariableReadMode");
	}
	else
	{
		oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.RESULT_SET, inaStructure, "SupportedResultSetMemberReadModes", "ResultSetDefaultReadMode");
	}
	oFF.QInAMdDimension.exportMdSupportedReadModes(dimension, oFF.QContextType.SELECTOR, inaStructure, "SupportedSelectorReadModes", "SelectorDefaultReadMode");
};
oFF.QInAMdDimension.exportDisplayGroups = function(inaStructure, dimension)
{
	let displayGroupName = dimension.getDesignDisplayGroupName();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(displayGroupName))
	{
		inaStructure.putString("DisplayGroupName", displayGroupName);
		inaStructure.putStringNotNullAndNotEmpty("DisplayGroupDescription", dimension.getDesignDisplayGroupText());
	}
};
oFF.QInAMdDimension.exportMdSupportedReadModes = function(dimension, context, inaStructure, inaSupportedName, inaDefaultReadModeName)
{
	if (!dimension.hasReadModeDefault(context))
	{
		return;
	}
	let sortedList = oFF.XCollectionUtils.createListOfNames(dimension.getSupportedReadModes(context));
	sortedList.sortByDirection(oFF.XSortDirection.ASCENDING);
	let inaSupportedReadModes = inaStructure.putNewList(inaSupportedName);
	inaSupportedReadModes.addAllStrings(sortedList);
	let readModeDefault = dimension.getReadModeDefault(context);
	if (oFF.notNull(readModeDefault))
	{
		inaStructure.putString(inaDefaultReadModeName, oFF.QInAConverter.lookupReadModeInA(readModeDefault));
	}
};
oFF.QInAMdDimension.exportMdSupportedSortTypes = function(exporter, inaStructure, dimension)
{
	let supportedSortTypes = dimension.getMetadata().getSupportedSortTypes();
	if (oFF.notNull(supportedSortTypes) && exporter.m_capabilities.supportsExtendedSort())
	{
		let inaSortTypes = inaStructure.putNewList("ExtendedSortTypes");
		let keys = supportedSortTypes.getKeysAsReadOnlyList();
		let allSize = keys.size();
		for (let i = 0; i < allSize; i++)
		{
			let sortType = supportedSortTypes.getByKey(keys.get(i));
			inaSortTypes.addString(oFF.QInAConverter.lookupSortTypeInA(sortType));
		}
	}
};
oFF.QInAMdDimension.getDefaultAxis = function(inaStructure, dimensionMetadata, dimType)
{
	let axisDefaultName = inaStructure.getStringByKey("AxisDefault");
	if (oFF.XStringUtils.isNullOrEmpty(axisDefaultName))
	{
		axisDefaultName = inaStructure.getStringByKey("Axis");
	}
	let axisDefault = oFF.isNull(axisDefaultName) ? oFF.AxisType.FREE : oFF.QInAConverter.lookupAxisType(axisDefaultName);
	if (dimType !== oFF.DimensionType.DIMENSION_INCOMPLETE && !dimensionMetadata.supportsAxis(axisDefault))
	{
		let supportedAxesTypes = dimensionMetadata.getSupportedAxesTypes();
		let iterator = supportedAxesTypes.getIterator();
		if (iterator.hasNext())
		{
			axisDefault = iterator.next();
		}
		oFF.XObjectExt.release(iterator);
	}
	return axisDefault;
};
oFF.QInAMdDimension.importAxesConstraints = function(importer, dimensionMetadata, inaStructure)
{
	let axisConstraints = inaStructure.getListByKey("AxisConstraints");
	let allowFreeDimensionsOnRepository = importer.getSession().hasFeature(oFF.FeatureToggleOlap.ALLOW_FREE_DIMENSIONS_ON_REPOSITORY_AXIS);
	if (oFF.PrUtils.isListEmpty(axisConstraints))
	{
		dimensionMetadata.addSupportedAxis(oFF.AxisType.FREE);
		dimensionMetadata.addSupportedAxis(oFF.AxisType.ROWS);
		dimensionMetadata.addSupportedAxis(oFF.AxisType.COLUMNS);
		if (allowFreeDimensionsOnRepository)
		{
			dimensionMetadata.addSupportedAxis(oFF.AxisType.REPOSITORY);
		}
	}
	else
	{
		let size = axisConstraints.size();
		for (let axisIdx = 0; axisIdx < size; axisIdx++)
		{
			dimensionMetadata.addSupportedAxis(oFF.QInAConverter.lookupAxisType(axisConstraints.getStringAt(axisIdx)));
		}
		if (allowFreeDimensionsOnRepository && dimensionMetadata.supportsAxis(oFF.AxisType.FREE) && !dimensionMetadata.supportsAxis(oFF.AxisType.REPOSITORY))
		{
			dimensionMetadata.addSupportedAxis(oFF.AxisType.REPOSITORY);
		}
	}
};
oFF.QInAMdDimension.importDimensionFlags = function(importer, dimension, dimensionMetadata, inaStructure)
{
	dimensionMetadata.setId(inaStructure.getIntegerByKeyExt("ID", 0));
	dimensionMetadata.setExternalName(inaStructure.getStringByKey("NameExternal"));
	dimensionMetadata.setSupportsLowerCase(oFF.PrUtils.getBooleanValueProperty(inaStructure, "LowercaseSupported", false));
	dimensionMetadata.setIsOwnerDimension(inaStructure.getBooleanByKeyExt("IsOwnerDimension", false));
	dimensionMetadata.setIsPrivate(inaStructure.getBooleanByKeyExt("Private", false));
	dimensionMetadata.setSupportsCumulative(inaStructure.getBooleanByKeyExt("SupportsCummulative", false));
	let supportsMultipleValues = oFF.PrUtils.getBooleanValueProperty(inaStructure, "MultipleValues", true);
	let selectionCapabilities = dimensionMetadata.getFilterCapabilitiesBase();
	selectionCapabilities.setSupportsMultipleValues(supportsMultipleValues);
	dimensionMetadata.setCanBeAggregated(inaStructure.getBooleanByKeyExt("CanBeAggregated", true));
	dimensionMetadata.setIsHierarchyMandatory(inaStructure.getBooleanByKeyExt("IsHierarchyMandatory", false));
	if (!dimensionMetadata.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
	{
		if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.HAS_CHECK_TABLE_DEFAULT_FALSE))
		{
			dimensionMetadata.setHasCheckTable(!importer.isAbap(dimension) || inaStructure.getBooleanByKeyExt("HasCheckTable", false));
		}
		else
		{
			dimensionMetadata.setHasCheckTable(inaStructure.getBooleanByKeyExt("HasCheckTable", true));
		}
	}
};
oFF.QInAMdDimension.importDimensionGroupNames = function(inaStructure)
{
	let dimensionGroups = oFF.PrUtils.getListProperty(inaStructure, "DimensionGroups");
	let len = oFF.PrUtils.getListSize(dimensionGroups, 0);
	if (len === 0)
	{
		return null;
	}
	let dimensionGroupNames = oFF.XStringBuffer.create();
	for (let j = 0; j < len; j++)
	{
		let dimensionGroup = oFF.PrUtils.getStringElement(dimensionGroups, j);
		if (oFF.notNull(dimensionGroup))
		{
			dimensionGroupNames.append(dimensionGroup.getString());
		}
	}
	return dimensionGroupNames.toString();
};
oFF.QInAMdDimension.importDimensionGroups = function(inaStructure, dimensionMetadata)
{
	let isGrouping = inaStructure.getBooleanByKeyExt("IsDimensionGroup", false);
	dimensionMetadata.setIsGroupingDimension(isGrouping);
	let dimensionGroups = oFF.PrUtils.getListProperty(inaStructure, "DimensionGroups");
	let len = oFF.PrUtils.getListSize(dimensionGroups, 0);
	for (let j = 0; j < len; j++)
	{
		let dimensionGroup = oFF.PrUtils.getStringElement(dimensionGroups, j);
		if (oFF.notNull(dimensionGroup))
		{
			dimensionMetadata.addGroupingDimension(dimensionGroup.getString());
		}
	}
};
oFF.QInAMdDimension.importDimensionReadModes = function(queryModel, dimension, inaStructure)
{
	let readModeManager = dimension.getReadModeManagerBase();
	if (oFF.notNull(queryModel))
	{
		oFF.QInAMdDimension.importMdReadModeSettings(inaStructure, readModeManager, oFF.QContextType.RESULT_SET, "SupportedResultSetReadModes", "SupportedResultSetMemberReadModes", "ResultSetDefaultReadMode", "DefaultResultSetReadMode", "ResultSetMemberDefaultReadMode");
	}
	oFF.QInAMdDimension.importMdReadModeSettings(inaStructure, readModeManager, oFF.QContextType.VARIABLE, "SupportedVariableReadModes", null, "DefaultVariableReadMode", null, null);
	if (oFF.notNull(queryModel) && queryModel.isSelectorReadModeMasterOnly())
	{
		readModeManager.addSupportedReadMode(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.MASTER);
		readModeManager.setReadModeDefault(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.MASTER, true);
		readModeManager.setReadMode(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.MASTER);
	}
	else
	{
		oFF.QInAMdDimension.importMdReadModeSettings(inaStructure, readModeManager, oFF.QContextType.SELECTOR, "SupportedSelectorReadModes", null, "SelectorDefaultReadMode", "DefaultSelectorReadMode", null);
	}
};
oFF.QInAMdDimension.importInitialDisplayGroups = function(session, inaStructure, dimensionMetadata)
{
	if (!session.hasFeature(oFF.FeatureToggleOlap.DIMENSION_DISPLAY_GROUPS))
	{
		return;
	}
	let displayGroupName = inaStructure.getStringByKey("DisplayGroupName");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(displayGroupName))
	{
		dimensionMetadata.setDesignTimeDisplayGroupName(displayGroupName);
		let displayGroupText = inaStructure.getStringByKey("DisplayGroupDescription");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(displayGroupText))
		{
			dimensionMetadata.setDesignTimeDisplayGroupText(displayGroupText);
		}
	}
};
oFF.QInAMdDimension.importKeyAttributesNames = function(dimensionMetadata, capabilities, inaStructure)
{
	let inaKeyAttributes = inaStructure.getListByKey("CompoundKeyAttributes");
	let isCompoundKeyAttributes = true;
	if (oFF.isNull(inaKeyAttributes))
	{
		inaKeyAttributes = inaStructure.getListByKey("KeyAttributes");
		isCompoundKeyAttributes = false;
	}
	if (oFF.notNull(inaKeyAttributes) && (isCompoundKeyAttributes || oFF.notNull(capabilities) && capabilities.supportsDimensionKeyAttributes()))
	{
		let keyAttributesNames = oFF.XList.create();
		let keyAttributesSize = inaKeyAttributes.size();
		for (let indx = 0; indx < keyAttributesSize; indx++)
		{
			let keyAttributName = inaKeyAttributes.getStringAt(indx);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(keyAttributName))
			{
				keyAttributesNames.add(keyAttributName);
			}
		}
		dimensionMetadata.setKeyAttributesNames(keyAttributesNames);
	}
};
oFF.QInAMdDimension.importMdReadModeSettings = function(inaDimension, readmodeManager, context, supportedReadModesV1, supportedReadModesV2, defaultReadModeV1, defaultReadModeV2, defaultReadModeV3)
{
	let inaSupportedRsMemberReadModes = inaDimension.getListByKey(supportedReadModesV1);
	if (oFF.isNull(inaSupportedRsMemberReadModes) && oFF.notNull(supportedReadModesV2))
	{
		inaSupportedRsMemberReadModes = inaDimension.getListByKey(supportedReadModesV2);
	}
	if (oFF.PrUtils.isListEmpty(inaSupportedRsMemberReadModes))
	{
		readmodeManager.addSupportedReadMode(context, oFF.QMemberReadMode.BOOKED);
		readmodeManager.addSupportedReadMode(context, oFF.QMemberReadMode.MASTER);
		readmodeManager.setReadModeDefault(context, oFF.QMemberReadMode.BOOKED, false);
	}
	else
	{
		oFF.QInAMdDimension.addSupportedReadModes(inaSupportedRsMemberReadModes, readmodeManager, context);
		oFF.QInAMdDimension.setDefaultReadmode(inaDimension, readmodeManager, context, defaultReadModeV1, defaultReadModeV2, defaultReadModeV3);
	}
};
oFF.QInAMdDimension.setDefaultReadmode = function(inaDimension, readmodeManager, context, defaultReadModeV1, defaultReadModeV2, defaultReadModeV3)
{
	let readModeName = inaDimension.getStringByKey(defaultReadModeV1);
	if (oFF.isNull(readModeName) && oFF.notNull(defaultReadModeV2))
	{
		readModeName = inaDimension.getStringByKey(defaultReadModeV2);
	}
	if (oFF.isNull(readModeName) && oFF.notNull(defaultReadModeV3))
	{
		readModeName = inaDimension.getStringByKey(defaultReadModeV3);
	}
	if (oFF.notNull(readModeName))
	{
		let readMode = oFF.QInAConverter.lookupReadMode(readModeName);
		if (oFF.notNull(readMode))
		{
			readmodeManager.setReadModeDefault(context, readMode, true);
		}
	}
};
oFF.QInAMdDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let dimName = dimension.getName();
	inaStructure.putString("Name", dimName);
	let dimensionVisibility = dimension.getVisibility();
	if (oFF.notNull(dimensionVisibility))
	{
		let visibility = oFF.QInAConverter.lookupDimensionVisibilityIna(dimensionVisibility);
		inaStructure.putInteger("Visibility", visibility);
	}
	let defaultMemberValue = dimension.getDefaultMemberValue();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(defaultMemberValue))
	{
		inaStructure.putString("DefaultMember", defaultMemberValue);
	}
	let dimType = oFF.QInAConverter.lookupDimensionTypeInA(dimension.getDimensionType());
	inaStructure.putInteger("DimensionType", dimType);
	inaStructure.putStringNotNull("ViewAttributes", dimension.getAttributeViewName());
	let axisType = dimension.getDefaultAxisType();
	let inaAxisType = oFF.QInAConverter.lookupAxisTypeInA(axisType);
	inaStructure.putString("AxisDefault", inaAxisType);
	oFF.QInAMdDimension.exportDimensionFlags(exporter, inaStructure, dimension);
	oFF.QInAMdDimMembers.exportMd(exporter, inaStructure, dimension);
	if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		oFF.QInARepoFormulaCalculatedDimension.exportFormulaDimensionParts(exporter, inaStructure, dimension);
	}
	else
	{
		if (!dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION))
		{
			oFF.QInAMdFieldsRoles.exportMd(inaStructure, dimension);
		}
		oFF.QInAMdFieldsList.exportMd(exporter, inaStructure, dimension);
		oFF.QInAMdFieldsResultSet.exportMd(inaStructure, dimension);
		oFF.QInAMdFieldsAttributes.exportMd(inaStructure, dimension);
	}
	oFF.QInAMdDimension.exportDimensionGroup(inaStructure, dimension);
	oFF.QInAMdDimension.exportDisplayGroups(inaStructure, dimension);
	oFF.QInAMdHierarchy.exportMdHierarchy(exporter, inaStructure, dimension);
	oFF.QInAMdDimension.exportAxesConstraints(inaStructure, dimension);
	oFF.QInAMdDimension.exportDimensionReadModes(exporter, inaStructure, dimension);
	oFF.QInAMdDimension.exportMdSupportedSortTypes(exporter, inaStructure, dimension);
	inaStructure.putBoolean("EnforceDynamicValue", dimension.isEnforcedDynamicValue());
	inaStructure.putStringNotNull("DataType", oFF.QInAConverter.lookupValueTypeInA(dimension.getValueType()));
	inaStructure.putStringNotNullAndNotEmpty("SemanticObject", dimension.getMetadata().getSemanticObject());
	if (dimension.getMetadata().hasFunctionalVariables())
	{
		inaStructure.putBoolean("HasFunctionalVariables", true);
	}
	if (dimension.isRRIAffectedComponent())
	{
		inaStructure.putBoolean("IsRRI", true);
	}
	inaStructure.putStringNotNullAndNotEmpty("SemanticType", dimension.getMetadata().getSemanticType());
	return inaStructure;
};
oFF.QInAMdDimension.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.QInAMdDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	let capabilities = dimension.getModelCapabilities();
	let dimName = inaStructure.getStringByKey("Name");
	let inaDimType = inaStructure.getIntegerByKeyExt("DimensionType", 3);
	let dimType = oFF.QInAConverter.lookupDimensionType(inaDimType);
	if (dimType === oFF.DimensionType.CALCULATED_DIMENSION)
	{
		dimension = oFF.QCalculatedDimension._createCalculatedDimension(context, parentComponent, dimName);
	}
	else if (dimType === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		dimension = oFF.QFormulaCalculatedDimension._createFormulaCalculatedDimension(context, dimName);
		oFF.QInARepoFormulaCalculatedDimension.importFormulaCalculatedDimension(importer, inaStructure, dimension, parentComponent, context);
	}
	dimension.setName(dimName);
	dimension.setText(inaStructure.getStringByKey("Description"));
	let queryModel = dimension.getQueryModel();
	let hasQueryModel = oFF.notNull(queryModel);
	let dimensionGroupNames = "";
	let cacheKey;
	if (dimension.getDataSource().getType() !== oFF.MetaObjectType.CDS_PROJECTION_VIEW)
	{
		dimensionGroupNames = oFF.QInAMdDimension.importDimensionGroupNames(inaStructure);
	}
	if (oFF.notNull(importer.m_cacheKey))
	{
		cacheKey = oFF.QCacheKey.createCopyExt(importer.m_cacheKey, dimName, null, dimensionGroupNames);
	}
	else
	{
		cacheKey = oFF.QCacheKey.createByContextForDimension(context, dimName, dimensionGroupNames);
	}
	let isCalcDim = inaDimType < -1;
	let olapEnvironment = importer.getApplication().getOlapEnvironment();
	let dimensionMetadata = olapEnvironment.getDimensionMetadataByKey(cacheKey);
	let isMetadataProcessingNeeded = oFF.isNull(dimensionMetadata) || dimType === oFF.DimensionType.DIMENSION_INCOMPLETE;
	if (isMetadataProcessingNeeded)
	{
		if (isCalcDim)
		{
			dimensionMetadata = dimension.getMetadataBase();
		}
		else
		{
			dimensionMetadata = oFF.QDimensionMetadata.create(cacheKey);
		}
		dimensionMetadata.setDimensionType(dimType);
		oFF.QInAMdDimension.importKeyAttributesNames(dimensionMetadata, capabilities, inaStructure);
		let dimensionVisibility = inaStructure.getIntegerByKeyExt("Visibility", -1);
		if (dimensionVisibility !== -1)
		{
			dimensionMetadata.setVisibility(oFF.QInAConverter.lookupDimensionVisibility(dimensionVisibility));
		}
		let defaultMemberValue = inaStructure.getStringByKey("DefaultMember");
		if (oFF.notNull(defaultMemberValue))
		{
			dimensionMetadata.setDefaultMemberValue(defaultMemberValue);
		}
		if (dimension.getDataSource().getType() !== oFF.MetaObjectType.CDS_PROJECTION_VIEW)
		{
			oFF.QInAMdDimension.importDimensionGroups(inaStructure, dimensionMetadata);
			oFF.QInAMdDimension.importInitialDisplayGroups(context.getSession(), inaStructure, dimensionMetadata);
		}
		dimensionMetadata.setAttributeViewName(inaStructure.getStringByKeyExt("ViewAttributes", null));
		if (importer.m_capabilities.supportsCustomDimensionMemberExecutionStep() && (dimensionMetadata.isStructure() || dimensionMetadata.getDimensionType() === oFF.DimensionType.ACCOUNT))
		{
			dimensionMetadata.setSupportsCalculatedBeforeAggregation(true);
		}
		dimensionMetadata.setEnforceDynamicValue(inaStructure.getBooleanByKeyExt("EnforceDynamicValue", false));
		let attValueType = oFF.QInAConverter.lookupValueType(inaStructure.getStringByKey("DataType"));
		if (attValueType !== oFF.XValueType.UNSUPPORTED)
		{
			dimensionMetadata.setValueType(attValueType);
		}
		oFF.QInAMdDimension.importDimensionFlags(importer, dimension, dimensionMetadata, inaStructure);
		if (!isCalcDim)
		{
			olapEnvironment.setDimensionMetadata(dimensionMetadata);
		}
		let inaSortTypes = inaStructure.getListByKey("ExtendedSortTypes");
		if (importer.m_capabilities.supportsExtendedSort() && oFF.notNull(inaSortTypes))
		{
			let sortTypes = oFF.XSetOfNameObject.create();
			let sortSize = inaSortTypes.size();
			for (let i = 0; i < sortSize; i++)
			{
				let sortType = oFF.QInAConverter.lookupSortType(inaSortTypes.getStringAt(i));
				if (oFF.notNull(sortType))
				{
					sortTypes.add(sortType);
				}
			}
			dimensionMetadata.setSupportedSortTypes(sortTypes);
		}
		if (inaStructure.hasStringByKey("SemanticObject"))
		{
			dimensionMetadata.setSemanticObject(inaStructure.getStringByKey("SemanticObject"));
		}
		dimensionMetadata.setHasFunctionalVariables(inaStructure.getBooleanByKeyExt("HasFunctionalVariables", false));
		if (importer.m_capabilities.supportsSupportsDimensionSemanticType())
		{
			dimensionMetadata.setSemanticType(inaStructure.getStringByKey("SemanticType"));
		}
	}
	if (hasQueryModel)
	{
		if (isMetadataProcessingNeeded)
		{
			oFF.QInAMdDimension.importAxesConstraints(importer, dimensionMetadata, inaStructure);
		}
		let axisDefault = oFF.QInAMdDimension.getDefaultAxis(inaStructure, dimensionMetadata, dimType);
		if (isMetadataProcessingNeeded || !isCalcDim)
		{
			dimension.setDefaultAxisType(axisDefault);
		}
	}
	if (!isCalcDim)
	{
		dimension.setMetadata(dimensionMetadata);
	}
	dimension.setDimensionType(dimType);
	if (!importer.m_capabilities.supportsExtendedSort() && hasQueryModel && !importer.isVirtualInA(queryModel))
	{
		if (!dimension.isMeasureStructure())
		{
			let sortingManager = queryModel.getSortingManagerBase();
			sortingManager.addSupportedSortType(oFF.SortType.FIELD);
			sortingManager.addSupportedSortType(oFF.SortType.MEMBER_KEY);
			sortingManager.addSupportedSortType(oFF.SortType.MEMBER_TEXT);
		}
	}
	oFF.QInAMdFieldsList.importMd(importer, inaStructure, dimension);
	oFF.QInAMdFieldsAttributes.importMd(dimension, inaStructure);
	if (!oFF.XCollectionUtils.hasElements(dimension.getFields()) && inaStructure.hasStringByKey("KeyAttribute"))
	{
		let keyField = oFF.QField._createField(context, dimension, oFF.PresentationType.KEY);
		let fieldName = inaStructure.getStringByKey("KeyAttribute");
		keyField.setName(fieldName);
		let metadata = oFF.QFieldMetadata.create(oFF.QCacheKey.createByContextForField(context, fieldName, dimName));
		metadata.setUsageType(oFF.FieldUsageType.FLAT);
		metadata.setPresentationType(oFF.PresentationType.KEY);
		metadata.setValueType(oFF.XValueType.STRING);
		keyField.setMetadata(metadata);
		dimension.getFieldContainerBase().addFieldInternal(keyField);
	}
	oFF.QInAMdFieldsRoles.importMd(importer, inaStructure, dimension);
	oFF.QInAMdFilterCapability.updateFilterCapabilities(dimension);
	oFF.QInAMdFieldsResultSet.importMd(importer, inaStructure, dimension);
	oFF.QInAMdDimMembers.importMd(importer, dimension, inaStructure);
	oFF.QInAMdDimension.importDimensionReadModes(queryModel, dimension, inaStructure);
	oFF.QInAMdHierarchy.importMdHierarchy(importer, inaStructure, dimension);
	oFF.QInAMdDimProperties.importMdNameValuePairs(inaStructure, dimension);
	dimension.setRRIAffectedComponent(inaStructure.getBooleanByKeyExt("IsRRI", false));
	return dimension;
};
oFF.QInAMdDimension.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	let myParent = parentComponent;
	if (oFF.isNull(myParent))
	{
		myParent = context.getQueryModel();
	}
	return oFF.QDimension._create(context, myParent);
};

oFF.QInAMdDocumentsInfo = function() {};
oFF.QInAMdDocumentsInfo.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDocumentsInfo.prototype._ff_c = "QInAMdDocumentsInfo";

oFF.QInAMdDocumentsInfo.importMd = function(importer, inaQueryModel, queryModel, context)
{
	if (oFF.notNull(inaQueryModel) && inaQueryModel.containsKey("DocumentsInfo"))
	{
		let documentsInfo = inaQueryModel.getStructureByKey("DocumentsInfo");
		let documentsInfoBase = queryModel.getDocumentsInfo();
		let documentSupport = oFF.QInAConverter.lookupDocumentsSupportType(documentsInfo.getStringByKey("SupportsDocuments"));
		let documentsServicePath = documentsInfo.getStringByKey("DocumentsServicePath");
		let defaultDocumentsDirectory = documentsInfo.getStringByKey("DefaultDocumentsDirectory");
		let activeDocumentsDirectory = documentsInfo.getStringByKey("ActiveDocumentsDirectory");
		let documentDirectoriesPrList = documentsInfo.getListByKey("DocumentsDirectories");
		let documentDirectories = null;
		if (oFF.notNull(documentDirectoriesPrList))
		{
			documentDirectories = oFF.PrUtils.asListOfString(documentDirectoriesPrList);
		}
		let documentsInfoActivated = documentsInfoBase.getSupportsDocuments() === oFF.DocumentsSupportType.NONE && documentSupport !== oFF.DocumentsSupportType.NONE;
		documentsInfoBase.setSupportsDocuments(documentSupport);
		documentsInfoBase.setDocumentsServicePath(documentsServicePath);
		documentsInfoBase.setDefaultDocumentsDirectory(defaultDocumentsDirectory);
		documentsInfoBase.setActiveDocumentsDirectory(activeDocumentsDirectory);
		documentsInfoBase.setDocumentsDirectories(documentDirectories);
		documentsInfoBase.setIsBasedOnCDSView(documentsInfo.getBooleanByKey("IsBasedOnCDSView"));
		let documentIdsRequest = queryModel.getDocumentsIdsRequest();
		let documentIdsScope = oFF.isNull(documentIdsRequest) ? null : documentIdsRequest.getDocumentsIdsScope();
		if (documentsInfoActivated && oFF.notNull(documentIdsScope) && documentIdsScope === oFF.DocumentsIdsScope.NONE)
		{
			if (documentsInfoBase.isBasedOnCDSView())
			{
				documentIdsRequest.setDocumentsIdsScope(oFF.DocumentsIdsScope.SYSTEM_UNIQUE);
			}
			else
			{
				documentIdsRequest.setDocumentsIdsScope(oFF.DocumentsIdsScope.RESULT_SET_BOUND);
			}
		}
	}
};
oFF.QInAMdDocumentsInfo.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return null;
};
oFF.QInAMdDocumentsInfo.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdDocumentsInfo.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	oFF.QInAMdDocumentsInfo.importMd(importer, inaStructure, queryModel, context);
	return modelComponent;
};

oFF.QInAMdDrillManager = function() {};
oFF.QInAMdDrillManager.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdDrillManager.prototype._ff_c = "QInAMdDrillManager";

oFF.QInAMdDrillManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let drillManager = modelComponent;
	inaStructure.putBoolean("SupportsHierNavCounter", drillManager.supportsDrillCounter());
	return inaStructure;
};
oFF.QInAMdDrillManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.DRILL_MANAGER;
};
oFF.QInAMdDrillManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let supports = importer.m_capabilities.supportsHierarchyNavCounter();
	if (oFF.notNull(inaStructure))
	{
		supports = inaStructure.getBooleanByKeyExt("SupportsHierNavCounter", supports);
	}
	let drillManager = modelComponent;
	drillManager.setSupportsDrillCounter(supports);
	return drillManager;
};
oFF.QInAMdDrillManager.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QFactory.createDrillManager(context);
};

oFF.QInAMdExceptionAggregationManager = function() {};
oFF.QInAMdExceptionAggregationManager.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdExceptionAggregationManager.prototype._ff_c = "QInAMdExceptionAggregationManager";

oFF.QInAMdExceptionAggregationManager.prototype._exportDimensionSet = function(setName, dimensions)
{
	let dimSize = dimensions.size();
	let inaDimensionSet = oFF.PrFactory.createStructure();
	inaDimensionSet.putString("Name", setName);
	let inaDimensions = inaDimensionSet.putNewList("Dimensions");
	for (let i = 0; i < dimSize; i++)
	{
		inaDimensions.add(oFF.PrFactory.createString(dimensions.get(i)));
	}
	return inaDimensionSet;
};
oFF.QInAMdExceptionAggregationManager.prototype._exportExceptionAggregationGroup = function(excepAggrGroup)
{
	let inaExcepAggrGroup = oFF.PrFactory.createStructure();
	inaExcepAggrGroup.putString("Name", excepAggrGroup.getName());
	inaExcepAggrGroup.putString("SupportedDimensions", excepAggrGroup._getSupportedDimensionSetName());
	inaExcepAggrGroup.putInteger("MaxNumberOfDimensions", excepAggrGroup._getNumberOfAllowedDimensions());
	let inaAggrMap = oFF.PrFactory.createStructure();
	inaAggrMap.putInteger("MembersCode", excepAggrGroup._getMembersCode());
	let inaAggrTypes = inaAggrMap.putNewList("AggregationTypes");
	let supportedAggregations = excepAggrGroup._getSupportedAggregationTypeNames();
	let supportedAggrSize = supportedAggregations.size();
	for (let i = 0; i < supportedAggrSize; i++)
	{
		inaAggrTypes.add(oFF.PrFactory.createString(supportedAggregations.get(i)));
	}
	let inaAggrMapList = inaExcepAggrGroup.putNewList("AggregationMap");
	inaAggrMapList.add(inaAggrMap);
	return inaExcepAggrGroup;
};
oFF.QInAMdExceptionAggregationManager.prototype._importDimensionSet = function(excpAggrManager, inaDimensionSet)
{
	excpAggrManager._addDimensionSet(inaDimensionSet.getStringByKey("Name"), oFF.PrUtils.asListOfString(inaDimensionSet.getListByKey("Dimensions")));
};
oFF.QInAMdExceptionAggregationManager.prototype._importExceptionAggregationGroup = function(excpAggrManager, inaExcepAggrGroup)
{
	let groupName = inaExcepAggrGroup.getStringByKey("Name");
	let supportedDimensionSet = inaExcepAggrGroup.getStringByKeyExt("SupportedDimensions", "");
	let maxNumberOfDim = inaExcepAggrGroup.getIntegerByKeyExt("MaxNumberOfDimensions", -1);
	let inaAggregationMapList = inaExcepAggrGroup.getListByKey("AggregationMap");
	let inaAggrMapSize = inaAggregationMapList.size();
	for (let i = 0; i < inaAggrMapSize; i++)
	{
		let inaAggrMap = inaAggregationMapList.getStructureAt(i);
		let membersCode = inaAggrMap.getIntegerByKeyExt("MembersCode", excpAggrManager._getDefaultMembersCode());
		excpAggrManager._addExceptionAggregationGroup(oFF.QExceptionAggregationGroup._create(excpAggrManager, groupName, membersCode, maxNumberOfDim, supportedDimensionSet, oFF.PrUtils.asListOfString(inaAggrMap.getListByKey("AggregationTypes"))));
	}
};
oFF.QInAMdExceptionAggregationManager.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let excpAggrManager = modelComponent;
	if (oFF.notNull(excpAggrManager))
	{
		let inaExcepAggrs = inaStructure.putNewStructure("ExceptionAggregations");
		let inaDimensionSetsList = inaExcepAggrs.putNewList("DimensionSets");
		let dimensionSets = excpAggrManager._getDimensionSets();
		let dimensionSetsKeys = dimensionSets.getKeysAsReadOnlyList();
		let setsSize = dimensionSetsKeys.size();
		for (let i = 0; i < setsSize; i++)
		{
			let setName = dimensionSetsKeys.get(i);
			inaDimensionSetsList.add(this._exportDimensionSet(setName, dimensionSets.getByKey(setName)));
		}
		let inaAggrGroupsList = inaExcepAggrs.putNewList("AggregationGroups");
		let excepAggrGroups = excpAggrManager._getExceptionAggregationGroups().getKeysAsReadOnlyList();
		let groupsSize = excepAggrGroups.size();
		let supportedGroups = excpAggrManager._getExceptionAggregationGroups();
		for (let j = 0; j < groupsSize; j++)
		{
			inaAggrGroupsList.add(this._exportExceptionAggregationGroup(supportedGroups.get(j)));
		}
	}
	return inaStructure;
};
oFF.QInAMdExceptionAggregationManager.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER;
};
oFF.QInAMdExceptionAggregationManager.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let excpAggrManager = modelComponent;
	if (oFF.notNull(inaStructure) && oFF.notNull(excpAggrManager))
	{
		excpAggrManager._clear();
		let inaExcepAggrs = inaStructure.getStructureByKey("ExceptionAggregations");
		if (oFF.notNull(inaExcepAggrs))
		{
			let inaDimensionSetsList = inaExcepAggrs.getListByKey("DimensionSets");
			if (!oFF.PrUtils.isListEmpty(inaDimensionSetsList))
			{
				let inaDimensionSetsSize = inaDimensionSetsList.size();
				for (let i = 0; i < inaDimensionSetsSize; i++)
				{
					this._importDimensionSet(excpAggrManager, inaDimensionSetsList.get(i).asStructure());
				}
			}
			let inaExcepAggrGroups = inaExcepAggrs.getListByKey("AggregationGroups");
			if (!oFF.PrUtils.isListEmpty(inaExcepAggrGroups))
			{
				let inaExcepAggrSize = inaExcepAggrGroups.size();
				for (let j = 0; j < inaExcepAggrSize; j++)
				{
					this._importExceptionAggregationGroup(excpAggrManager, inaExcepAggrGroups.get(j).asStructure());
				}
			}
		}
		else
		{
			excpAggrManager._setupDefaultConfigurations();
		}
	}
	return excpAggrManager;
};

oFF.QInAMdField = function() {};
oFF.QInAMdField.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdField.prototype._ff_c = "QInAMdField";

oFF.QInAMdField.postProcessMetadata = function(importer, fieldMetadata, fieldSelectionCapability, context)
{
	if (importer.m_capabilities.supportsFilterCapabilityExtended())
	{
		if (oFF.notNull(fieldSelectionCapability))
		{
			fieldMetadata.setIsFilterable(fieldSelectionCapability.supportsSetSign(oFF.SetSign.INCLUDING) || fieldSelectionCapability.supportsSetSign(oFF.SetSign.EXCLUDING));
			if (fieldSelectionCapability.isFilterCapabilityGroup())
			{
				let filterCapabilitiesGroup = fieldSelectionCapability;
				let filterCapabilityGroup = filterCapabilitiesGroup.getGroupByContext(oFF.QContextType.RESULT_SET);
				if (oFF.notNull(filterCapabilityGroup) && (oFF.XString.containsString(filterCapabilityGroup.getName(), oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE.getName()) || oFF.XString.containsString(filterCapabilityGroup.getName(), oFF.QSetSignComparisonOperatorGroup.INTERVAL.getName())))
				{
					filterCapabilitiesGroup.setGroupByContext(oFF.QInAConverter.switchComparisonGroupToIncludeOnly(filterCapabilityGroup), oFF.QContextType.RESULT_SET);
				}
				filterCapabilityGroup = filterCapabilitiesGroup.getGroupByContext(oFF.QContextType.SELECTOR);
				if (oFF.notNull(filterCapabilityGroup) && (oFF.XString.containsString(filterCapabilityGroup.getName(), oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE.getName()) || oFF.XString.containsString(filterCapabilityGroup.getName(), oFF.QSetSignComparisonOperatorGroup.INTERVAL.getName())))
				{
					filterCapabilitiesGroup.setGroupByContext(oFF.QInAConverter.switchComparisonGroupToIncludeOnly(filterCapabilityGroup), oFF.QContextType.SELECTOR);
				}
			}
		}
		else if (oFF.isNull(context) || !context.getQueryManager().getInitSettings().isLightweight())
		{
			fieldMetadata.setIsFilterable(false);
		}
	}
};
oFF.QInAMdField.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let field = modelComponent;
	inaStructure.putString("Name", field.getName());
	inaStructure.putString("AliasName", field.getAliasName());
	inaStructure.putString("Description", field.getText());
	inaStructure.putString("DataType", oFF.QInAConverter.lookupValueTypeInA(field.getValueType()));
	inaStructure.putString("PresentationType", oFF.QInAConverter.lookupPresentationTypeInA(field.getPresentationType()));
	let obtain = field.getObtainability();
	inaStructure.putString("Obtainability", oFF.isNull(obtain) ? null : obtain.getName());
	if (field.getMetadata().hasFlagIsFilterableInMetadata())
	{
		inaStructure.putBoolean("IsFilterable", field.isFilterable());
	}
	inaStructure.putBoolean("IsVirtualDescription", field.isVirtualDescription());
	inaStructure.putBoolean("LowerCaseEnabled", field.isLowerCaseEnabled());
	inaStructure.putString("InitialValue", field.getInitialValue());
	inaStructure.putInteger("Length", field.getLength());
	inaStructure.putInteger("Decimals", field.getDecimals());
	inaStructure.putBoolean("IsDisplayAttribute", field.isDisplayAttributeField());
	inaStructure.putString("MappedColumn", field.getMappedColumnName());
	inaStructure.putString("AttributeType", field.getAttributeType());
	inaStructure.putString("NavigationalAttributeDescription", field.getNavigationalAttributeDescription());
	inaStructure.putStringNotNull("SQLType", field.getSqlType());
	inaStructure.putStringNotNull("SemanticType", field.getSemanticType());
	inaStructure.putString("UsageType", field.getUsageType().getName());
	if (field.isExcludedFromValueHelp())
	{
		inaStructure.putBoolean("ExcludeFromValueHelp", true);
	}
	inaStructure.putStringNotNull("LowerBound", field.getLowerBound());
	inaStructure.putStringNotNull("UpperBound", field.getUpperBound());
	if (field.getPrecision() !== 0)
	{
		inaStructure.putInteger("FractDigits", field.getPrecision());
	}
	let infoObjectType = field.getInfoObjectType();
	if (oFF.notNull(infoObjectType))
	{
		inaStructure.putString("InfoobjType", oFF.QInAConverter.lookupInfoObjectTypeInA(infoObjectType));
	}
	let visibilityType = field.getVisibilityType();
	if (oFF.notNull(visibilityType))
	{
		inaStructure.putString("VisibilityType", oFF.QInAConverter.lookupVisibilityTypeInA(visibilityType));
	}
	let textTransformationType = field.getTextTransformation();
	if (oFF.notNull(textTransformationType))
	{
		inaStructure.putString("TextTransformation", oFF.QInAConverter.lookupTextTransformationInA(textTransformationType));
	}
	if (!exporter.m_mode.isDataBlending())
	{
		inaStructure.putStringNotNull("DisplayFormat", field.getDisplayFormat());
	}
	inaStructure.putStringNotNull("MIMEType", field.getMimeType());
	if (field.getDimension().getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		let calcField = field;
		if (calcField.getFormulaItem() !== null)
		{
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, calcField.getFormulaItem(), inaStructure.putNewStructure("Formula"), calcField.getQueryModel());
		}
	}
	let inaDependentAttributes = inaStructure.putNewList("DependentAttributes");
	inaDependentAttributes.addAllStrings(field.getDependencyFields());
	let selectionCapabilities = field.getDimension().getFilterCapabilities();
	let selectionCapability = selectionCapabilities.getFilterCapabilitiesByField(field);
	oFF.QInAMdFilterCapability.exportMd(exporter, selectionCapability, inaStructure, field.getQueryModel());
	return inaStructure;
};
oFF.QInAMdField.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FIELD;
};
oFF.QInAMdField.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let field = modelComponent;
	let dimension = parentComponent;
	let fieldName = inaStructure.getStringByKey("Name");
	let isCalcDim = dimension.getDimensionType().isTypeOf(oFF.DimensionType.CALCULATED_DIMENSION);
	if (isCalcDim)
	{
		let calcField;
		if (dimension.getDimensionType() === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
		{
			calcField = oFF.QFieldFormulaCalc._createFormulaCalcField(context, dimension, null, fieldName);
			let inaFormula = inaStructure.getStructureByKey("Formula");
			if (oFF.notNull(inaFormula))
			{
				let newFieldFormula = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inaStructure.getStructureByKey("Formula"), null, context);
				calcField.setFormulaItem(newFieldFormula);
			}
		}
		else
		{
			calcField = oFF.QFieldCalcDim._createFieldCalcDim(context, dimension, oFF.PresentationType.UNDEFINED, fieldName);
		}
		this.updatePresentationType(importer, inaStructure, calcField.getMetadataBase());
		this.updateValueType(inaStructure, calcField.getMetadataBase());
		dimension.getFieldContainerBase().addField(calcField);
		return calcField;
	}
	field.setName(fieldName);
	field.setText(inaStructure.getStringByKey("Description"));
	field.setObtainability(oFF.ObtainabilityType.lookup(inaStructure.getStringByKey("Obtainability")));
	field.setDisplayFormat(inaStructure.getStringByKey("DisplayFormat"));
	let inaTextTransformation = inaStructure.getStringByKey("TextTransformation");
	if (oFF.notNull(inaTextTransformation))
	{
		field.setTextTransformation(oFF.QInAConverter.lookupTextTransformation(inaTextTransformation));
	}
	let dimensionNameFromInA = inaStructure.getStringByKey("DimensionName");
	let cacheKey;
	if (oFF.notNull(importer.m_cacheKey))
	{
		cacheKey = oFF.QCacheKey.createCopyExt(importer.m_cacheKey, fieldName, dimensionNameFromInA, null);
	}
	else
	{
		cacheKey = oFF.QFactory.createCacheKeyForField(context, fieldName, dimensionNameFromInA);
	}
	let olapEnvironment = importer.getApplication().getOlapEnvironment();
	let fieldMetadata = olapEnvironment.getFieldMetadataByKey(cacheKey);
	let queryModel = context.getQueryModel();
	if (oFF.isNull(fieldMetadata))
	{
		fieldMetadata = oFF.QFieldMetadata.create(cacheKey);
		fieldMetadata.setAliasName(inaStructure.getStringByKey("AliasName"));
		fieldMetadata.setMappedColumnName(inaStructure.getStringByKeyExt("MappedColumn", null));
		fieldMetadata.setSqlType(inaStructure.getStringByKeyExt("SQLType", null));
		fieldMetadata.setSemanticType(inaStructure.getStringByKeyExt("SemanticType", null));
		fieldMetadata.setIsExcludedFromValueHelp(inaStructure.getBooleanByKeyExt("ExcludeFromValueHelp", false));
		let attValueType = this.updateValueType(inaStructure, fieldMetadata);
		if (attValueType === oFF.XValueType.UNSUPPORTED)
		{
			let dimensionName = field.getDimension().getName();
			if (queryModel.getUniversalDisplayHierarchies().getByName(dimensionName) !== null)
			{
				fieldMetadata.setValueType(oFF.XValueType.STRING);
			}
		}
		if (!this.updatePresentationType(importer, inaStructure, fieldMetadata))
		{
			return null;
		}
		fieldMetadata.setUpperBound(inaStructure.getStringByKey("UpperBound"));
		fieldMetadata.setLowerBound(inaStructure.getStringByKey("LowerBound"));
		fieldMetadata.setIsFilterableFlagFromMetadata(inaStructure.containsKey("IsFilterable"));
		fieldMetadata.setIsFilterable(inaStructure.getBooleanByKeyExt("IsFilterable", true));
		fieldMetadata.setIsLowerCaseEnabled(inaStructure.getBooleanByKeyExt("LowerCaseEnabled", false));
		fieldMetadata.setIsVirtualDescription(inaStructure.getBooleanByKeyExt("IsVirtualDescription", false));
		fieldMetadata.setInitialValue(inaStructure.getStringByKeyExt("InitialValue", null));
		fieldMetadata.setLength(inaStructure.getIntegerByKeyExt("Length", 0));
		fieldMetadata.setDecimals(inaStructure.getIntegerByKeyExt("Decimals", 0));
		fieldMetadata.setFixedLength(inaStructure.getIntegerByKeyExt("FixedLength", -1));
		let precision = inaStructure.getIntegerByKeyExt("FractDigits", 0);
		if (precision !== 0)
		{
			fieldMetadata.setPrecision(precision);
		}
		fieldMetadata.setIsDisplayAttributeField(inaStructure.getBooleanByKeyExt("IsDisplayAttribute", false));
		fieldMetadata.setAttributeType(inaStructure.getStringByKeyExt("AttributeType", null));
		fieldMetadata.setNavigationalAttributeDescription(inaStructure.getStringByKeyExt("NavigationalAttributeDescription", null));
		this.importDependencies(inaStructure, fieldMetadata);
		let usageTypeValue = inaStructure.getStringByKey("UsageType");
		if (oFF.notNull(usageTypeValue))
		{
			fieldMetadata.setUsageType(oFF.FieldUsageType.lookup(usageTypeValue));
		}
		let inaInfoObjectType = inaStructure.getStringByKeyExt("InfoobjType", null);
		if (oFF.notNull(inaInfoObjectType))
		{
			let infoObjectType = oFF.QInAConverter.lookupInfoObjectType(inaInfoObjectType);
			fieldMetadata.setInfoObjectType(infoObjectType);
		}
		let inaVisibilityType = inaStructure.getStringByKeyExt("VisibilityType", null);
		if (oFF.notNull(inaVisibilityType))
		{
			let visibilityType = oFF.QInAConverter.lookupVisibilityType(inaVisibilityType);
			fieldMetadata.setVisibilityType(visibilityType);
		}
		let dimensionMd = dimension.getMetadataBase();
		fieldMetadata.setDimensionMetadata(dimensionMd);
		let dimSelectionCapabilities = dimensionMd.getFilterCapabilitiesBase();
		let fieldSelectionCapability = oFF.QInAMdFilterCapability.importMd(importer, inaStructure, field, dimSelectionCapabilities, context);
		if (oFF.notNull(fieldSelectionCapability))
		{
			dimSelectionCapabilities.addFilterCapability(fieldSelectionCapability);
		}
		oFF.QInAMdField.postProcessMetadata(importer, fieldMetadata, fieldSelectionCapability, context);
		fieldMetadata.setMimeType(inaStructure.getStringByKey("MIMEType"));
		olapEnvironment.setFieldMetadata(fieldMetadata);
	}
	if (oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP))
	{
		if (!this.updatePresentationType(importer, inaStructure, fieldMetadata))
		{
			return null;
		}
	}
	field.setMetadata(fieldMetadata);
	return field;
};
oFF.QInAMdField.prototype.importDependencies = function(inaStructure, metadata)
{
	if (oFF.notNull(inaStructure))
	{
		let inaDependentAttributes = inaStructure.getListByKey("DependentAttributes");
		if (oFF.notNull(inaDependentAttributes))
		{
			let dependentSize = inaDependentAttributes.size();
			for (let i = 0; i < dependentSize; i++)
			{
				let dependentAttribute = inaDependentAttributes.getStringAt(i);
				if (oFF.notNull(dependentAttribute))
				{
					metadata.addDependencyField(dependentAttribute);
				}
			}
		}
	}
};
oFF.QInAMdField.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QField._createField(context, parentComponent, null);
};
oFF.QInAMdField.prototype.updatePresentationType = function(importer, inaStructure, fieldMetadata)
{
	let attPresentationType = inaStructure.getStringByKey("PresentationType");
	let presentationType = oFF.QInAConverter.lookupPresentationType(attPresentationType);
	if (presentationType === oFF.PresentationType.WHY_FOUND && oFF.QInAConverter.lookupValueType(inaStructure.getStringByKey("DataType")) !== oFF.XValueType.PROPERTIES)
	{
		importer.addError(oFF.ErrorCodes.INVALID_STATE, "Why found has not properties type");
		return false;
	}
	else
	{
		fieldMetadata.setPresentationType(presentationType);
		return true;
	}
};
oFF.QInAMdField.prototype.updateValueType = function(inaStructure, metadata)
{
	let inaDataType = inaStructure.getStringByKey("DataType");
	let valueType = oFF.QInAConverter.lookupValueType(inaDataType);
	metadata.setValueType(valueType);
	return valueType;
};

oFF.QInAMdFieldsAttributes = function() {};
oFF.QInAMdFieldsAttributes.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsAttributes.prototype._ff_c = "QInAMdFieldsAttributes";

oFF.QInAMdFieldsAttributes.exportFieldNames = function(fields)
{
	let inaFieldNames = oFF.PrFactory.createList();
	let size = fields.size();
	for (let m = 0; m < size; m++)
	{
		inaFieldNames.addString(fields.get(m).getName());
	}
	return inaFieldNames;
};
oFF.QInAMdFieldsAttributes.exportMd = function(inaStructure, dimension)
{
	let attributeContainer = dimension.getAttributeContainer();
	let mainAttribute = attributeContainer.getMainAttribute();
	if (oFF.notNull(mainAttribute))
	{
		let inaAttributeHierarchy = inaStructure.putNewStructure("AttributeHierarchy");
		oFF.QInAMdFieldsAttributes.exportMdAttribute(mainAttribute, inaAttributeHierarchy);
	}
	inaStructure.putString("FieldLayoutType", oFF.QInAConverter.lookupFieldLayoutTypeInA(dimension.getFieldLayoutType()));
};
oFF.QInAMdFieldsAttributes.exportMdAttribute = function(attribute, inaAttributeHierarchy)
{
	inaAttributeHierarchy.putString("Name", attribute.getName());
	inaAttributeHierarchy.putString("Description", attribute.getText());
	let maKeyField = attribute.getKeyField();
	oFF.QInAExportUtil.setNameIfNotNull(inaAttributeHierarchy, "DefaultKeyAttribute", maKeyField);
	let maTextField = attribute.getTextField();
	oFF.QInAExportUtil.setNameIfNotNull(inaAttributeHierarchy, "DefaultTextAttribute", maTextField);
	let defaultResultSetTextField = attribute.getDefaultResultSetTextField();
	oFF.QInAExportUtil.setNameIfNotNull(inaAttributeHierarchy, "DefaultResultTextAttribute", defaultResultSetTextField);
	inaAttributeHierarchy.put("AttributeNames", oFF.QInAMdFieldsAttributes.exportFieldNames(attribute.getFields()));
	inaAttributeHierarchy.put("DefaultResultSetAttributes", oFF.QInAMdFieldsAttributes.exportFieldNames(attribute.getResultSetFields()));
	let childAttributes = attribute.getChildAttributes();
	let inaChildren = inaAttributeHierarchy.putNewList("Children");
	if (oFF.notNull(childAttributes))
	{
		let childAttrSize = childAttributes.size();
		for (let i = 0; i < childAttrSize; i++)
		{
			oFF.QInAMdFieldsAttributes.exportMdAttribute(childAttributes.get(i), inaChildren.addNewStructure());
		}
	}
};
oFF.QInAMdFieldsAttributes.importAttributeFields = function(attribute, fields, inaAttributeHierarchy)
{
	let inaFieldNames = inaAttributeHierarchy.getListByKey("AttributeNames");
	let inaDefaultResultSetAttributes = inaAttributeHierarchy.getListByKey("DefaultResultSetAttributes");
	if (oFF.notNull(inaFieldNames) && oFF.notNull(inaDefaultResultSetAttributes))
	{
		let size = inaFieldNames.size();
		let idxFieldName;
		let field;
		for (idxFieldName = 0; idxFieldName < size; idxFieldName++)
		{
			field = fields.getByKey(inaFieldNames.getStringAt(idxFieldName));
			if (oFF.notNull(field))
			{
				attribute.addFieldInternal(field);
			}
		}
		size = inaDefaultResultSetAttributes.size();
		let duplicates = oFF.XHashSetOfString.create();
		for (idxFieldName = 0; idxFieldName < size; idxFieldName++)
		{
			let fieldName = inaDefaultResultSetAttributes.getStringAt(idxFieldName);
			if (!duplicates.contains(fieldName))
			{
				duplicates.add(fieldName);
				field = attribute.getFieldByName(fieldName);
				if (oFF.notNull(field))
				{
					attribute.addDefaultResultSetField(field);
				}
			}
		}
	}
};
oFF.QInAMdFieldsAttributes.importMd = function(dimension, inaStructure)
{
	let udh = dimension.getUniversalDisplayHierarchy();
	let inaAttributeHierarchy = oFF.isNull(udh) ? inaStructure.getStructureByKey("AttributeHierarchy") : inaStructure;
	if (oFF.notNull(inaAttributeHierarchy))
	{
		let rootAttribute = oFF.QInAMdFieldsAttributes.importMdAttributeHierarchyNode(inaAttributeHierarchy, dimension, udh);
		if (oFF.notNull(rootAttribute))
		{
			dimension.getMetadataBase().addSupportedFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED);
			dimension.getAttributeContainerBase().setMainAttribute(rootAttribute);
		}
	}
};
oFF.QInAMdFieldsAttributes.importMdAttributeHierarchyNode = function(inaAttributeHierarchy, dimension, udh)
{
	if (oFF.isNull(inaAttributeHierarchy))
	{
		return null;
	}
	let attribute = oFF.QAttribute.createAttribute(dimension.getContext(), dimension);
	attribute.setName(inaAttributeHierarchy.getStringByKey("Name"));
	attribute.setText(inaAttributeHierarchy.getStringByKey("Description"));
	let fields = dimension.getFields();
	let defaultKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("DefaultKeyAttribute"));
	if (oFF.notNull(udh))
	{
		defaultKeyField = udh.getKeyField(dimension, inaAttributeHierarchy.getListByKey("Attributes"), "IsKey", "Name");
	}
	if (oFF.notNull(defaultKeyField))
	{
		attribute.setFlatKeyField(defaultKeyField);
	}
	let defaultDisplayKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("DefaultDisplayKeyAttribute"));
	if (oFF.notNull(udh))
	{
		defaultDisplayKeyField = udh.getDisplayKeyField(dimension);
	}
	if (oFF.notNull(defaultDisplayKeyField))
	{
		attribute.setFlatDisplayKeyField(defaultDisplayKeyField);
	}
	let defaultTextField = fields.getByKey(inaAttributeHierarchy.getStringByKey("DefaultTextAttribute"));
	if (oFF.notNull(udh))
	{
		defaultTextField = udh.getTextField(dimension);
	}
	if (oFF.notNull(defaultTextField))
	{
		attribute.setFlatTextField(defaultTextField);
	}
	let defaultRSTextField = fields.getByKey(inaAttributeHierarchy.getStringByKey("DefaultResultTextAttribute"));
	if (oFF.notNull(defaultRSTextField))
	{
		attribute.setDefaultResultSetTextField(defaultRSTextField);
	}
	let hierarchyKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyKeyAttribute"));
	if (oFF.notNull(hierarchyKeyField))
	{
		attribute.setHierachyKeyField(hierarchyKeyField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(defaultKeyField, hierarchyKeyField);
	}
	let hierarchyDisplayKeyField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyDisplayKeyAttribute"));
	if (oFF.notNull(hierarchyDisplayKeyField))
	{
		attribute.setHierarchyDisplayKeyField(hierarchyDisplayKeyField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(defaultDisplayKeyField, hierarchyDisplayKeyField);
	}
	let hierarchyTextField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyTextAttribute"));
	if (oFF.notNull(hierarchyTextField))
	{
		attribute.setHierarchyTextField(hierarchyTextField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(defaultTextField, hierarchyTextField);
	}
	let hierarchyNavigationField = fields.getByKey(inaAttributeHierarchy.getStringByKey("HierarchyNavigationAttribute"));
	if (oFF.notNull(hierarchyNavigationField))
	{
		attribute.setHierachyNavigationField(hierarchyNavigationField);
		oFF.QInAMdFieldsAttributes.setFieldUsage(null, hierarchyNavigationField);
	}
	oFF.QInAMdFieldsAttributes.importAttributeFields(attribute, fields, inaAttributeHierarchy);
	dimension.getAttributeContainerBase().addAttributeInternal(attribute);
	let inaChildren = inaAttributeHierarchy.getListByKey("Children");
	if (oFF.notNull(inaChildren))
	{
		let childSize = inaChildren.size();
		for (let k = 0; k < childSize; k++)
		{
			let childAttribute = oFF.QInAMdFieldsAttributes.importMdAttributeHierarchyNode(inaChildren.getStructureAt(k), dimension, udh);
			attribute.addChildAttribute(childAttribute);
		}
	}
	return attribute;
};
oFF.QInAMdFieldsAttributes.setFieldUsage = function(flatField, hierarchyField)
{
	if (hierarchyField !== flatField)
	{
		if (oFF.notNull(flatField))
		{
			flatField.getMetadataBase().setUsageType(oFF.FieldUsageType.FLAT);
		}
		if (oFF.notNull(hierarchyField))
		{
			hierarchyField.getMetadataBase().setUsageType(oFF.FieldUsageType.HIERARCHY);
		}
	}
	else
	{
		if (oFF.notNull(flatField))
		{
			flatField.getMetadataBase().setUsageType(oFF.FieldUsageType.ALL);
		}
	}
};
oFF.QInAMdFieldsAttributes.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsAttributes.exportMd(inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdFieldsAttributes.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsAttributes.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	oFF.QInAMdFieldsAttributes.importMd(dimension, inaStructure);
	return modelComponent;
};

oFF.QInAMdFieldsList = function() {};
oFF.QInAMdFieldsList.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsList.prototype._ff_c = "QInAMdFieldsList";

oFF.QInAMdFieldsList.exportMd = function(exporter, inaStructure, dimension)
{
	let inaList = oFF.PrFactory.createList();
	let fields = dimension.getFields();
	let len = fields.size();
	for (let i = 0; i < len; i++)
	{
		inaList.add(exporter.exportComponent(oFF.OlapComponentType.FIELD, fields.get(i), null, oFF.QImExFlag.DEFAULT_ALL));
	}
	inaStructure.put("AttributesMd", inaList);
};
oFF.QInAMdFieldsList.importMd = function(importer, inaStructure, dimension)
{
	let inaFieldList = inaStructure.getListByKey("AttributesMd");
	if (oFF.isNull(inaFieldList))
	{
		inaFieldList = inaStructure.getListByKey("Attributes");
	}
	if (oFF.isNull(inaFieldList))
	{
		oFF.QInAMdFieldsList.tryImportFromAttributeHierarchy(inaStructure, dimension);
	}
	else
	{
		let len = inaFieldList.size();
		let fieldContainerBase = dimension.getFieldContainerBase();
		for (let fieldIdx = 0; fieldIdx < len; fieldIdx++)
		{
			let inaField = inaFieldList.getStructureAt(fieldIdx);
			let field = importer.importComponent(oFF.OlapComponentType.FIELD, inaField, null, dimension, dimension);
			if (oFF.notNull(field))
			{
				fieldContainerBase.addFieldInternal(field);
			}
		}
	}
};
oFF.QInAMdFieldsList.tryImportFromAttributeHierarchy = function(inaStructure, dimension)
{
	if (!dimension.getQueryManager().getInitSettings().isLightweight())
	{
		return;
	}
	let attributeHierarchy = inaStructure.getStructureByKey("AttributeHierarchy");
	if (oFF.isNull(attributeHierarchy))
	{
		return;
	}
	let fieldContainerBase = dimension.getFieldContainerBase();
	let attributeNames = attributeHierarchy.getListByKey("AttributeNames");
	for (let i = 0; i < attributeNames.size(); i++)
	{
		let attributeName = attributeNames.getStringAt(i);
		let pieces = oFF.XStringTokenizer.splitString(attributeName, ".");
		if (!oFF.XCollectionUtils.hasElements(pieces))
		{
			continue;
		}
		let last = pieces.get(pieces.size() - 1);
		let pType;
		switch (last)
		{
			case "KEY":
				pType = oFF.PresentationType.KEY;
				if (pieces.size() >= 3 && oFF.XString.isEqual(pieces.get(1), "$$HierarchyField$$"))
				{
					pType = oFF.PresentationType.HIERARCHY_KEY;
				}
				break;

			case "DISPLAY_KEY":
				pType = oFF.PresentationType.DISPLAY_KEY;
				break;

			case "DISPLAY_KEY_NC":
				pType = oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND;
				break;

			case "SHORT_TEXT":
				pType = oFF.PresentationType.SHORT_TEXT;
				break;

			case "MEDIUM_TEXT":
				pType = oFF.PresentationType.MEDIUM_TEXT;
				break;

			case "LONG_TEXT":
				pType = oFF.PresentationType.LONG_TEXT;
				break;

			case "KEY_NOT_COMPOUND":
				pType = oFF.PresentationType.KEY_NOT_COMPOUND;
				break;

			default:
				continue;
		}
		let valueType = oFF.XValueType.STRING;
		if (pType.isTypeOf(oFF.PresentationType.KEY))
		{
			if (dimension.getDimensionType() === oFF.DimensionType.TIME)
			{
				valueType = oFF.XValueType.TIME;
			}
			else if (dimension.getDimensionType() === oFF.DimensionType.DATE)
			{
				valueType = oFF.XValueType.DATE;
			}
		}
		let metadata = oFF.QFieldMetadata.create(oFF.QFactory.createCacheKeyForField(dimension, attributeName, dimension.getName()));
		metadata.setValueType(valueType);
		metadata.setPresentationType(pType);
		metadata.setIsFlatKeyField(pType === oFF.PresentationType.KEY);
		metadata.setIsHierarchyKeyField(pType === oFF.PresentationType.HIERARCHY_KEY);
		metadata.setIsFilterable(pType.isTypeOf(oFF.PresentationType.ABSTRACT_KEY));
		metadata.setDimensionMetadata(dimension.getMetadataBase());
		let field = oFF.QFactory.createField(dimension, attributeName);
		field.setMetadata(metadata);
		field.setDimension(dimension);
		fieldContainerBase.addField(field);
	}
};
oFF.QInAMdFieldsList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsList.exportMd(exporter, inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdFieldsList.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	oFF.QInAMdFieldsList.importMd(importer, inaStructure, dimension);
	return modelComponent;
};

oFF.QInAMdFieldsResultSet = function() {};
oFF.QInAMdFieldsResultSet.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsResultSet.prototype._ff_c = "QInAMdFieldsResultSet";

oFF.QInAMdFieldsResultSet.exportMd = function(inaStructure, dimension)
{
	let inaDefaultResultSetFields = inaStructure.putNewList("DefaultResultSetAttributesMd");
	let resultSetFields = dimension.getDefaultResultSetFields();
	let resultFieldSize = resultSetFields.size();
	for (let i = 0; i < resultFieldSize; i++)
	{
		inaDefaultResultSetFields.addString(resultSetFields.get(i).getName());
	}
	if (dimension.supportsFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED))
	{
		let attributeContainer = dimension.getAttributeContainer();
		let resultSetAttributes = attributeContainer.getDefaultResultSetAttributes();
		let inaDefaultResultSetNodes = inaStructure.putNewList("DefaultResultSetAttributeNodesMd");
		let resultAttributeSize = resultSetAttributes.size();
		for (let j = 0; j < resultAttributeSize; j++)
		{
			inaDefaultResultSetNodes.addString(resultSetAttributes.get(j).getName());
		}
	}
	inaStructure.putBoolean("ResultSetFixedAttributes", dimension.hasFixedResultSetFields());
};
oFF.QInAMdFieldsResultSet.importMd = function(importer, inaStructure, dimension)
{
	let inaDefaultResultSetFields = inaStructure.getListByKey("DefaultResultSetAttributesMd");
	if (oFF.isNull(inaDefaultResultSetFields))
	{
		inaDefaultResultSetFields = inaStructure.getListByKey("DefaultResultSetAttributes");
	}
	let inaDefaultResultSetNodes = inaStructure.getListByKey("DefaultResultSetAttributeNodesMd");
	if (oFF.isNull(inaDefaultResultSetNodes))
	{
		inaDefaultResultSetNodes = inaStructure.getListByKey("DefaultResultSetAttributeNodes");
	}
	let fieldLayoutTypeValue = inaStructure.getStringByKey("FieldLayoutType");
	let fieldLayoutType = null;
	if (oFF.notNull(fieldLayoutTypeValue))
	{
		fieldLayoutType = oFF.QInAConverter.lookupFieldLayoutType(fieldLayoutTypeValue);
	}
	if (oFF.isNull(fieldLayoutType))
	{
		if (oFF.notNull(inaDefaultResultSetNodes) && dimension.supportsFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED))
		{
			fieldLayoutType = oFF.FieldLayoutType.ATTRIBUTE_BASED;
		}
		else
		{
			fieldLayoutType = oFF.FieldLayoutType.FIELD_BASED;
		}
	}
	dimension.setFieldLayoutType(fieldLayoutType);
	dimension.getMetadataBase().setDefaultFieldLayoutType(fieldLayoutType);
	let resultSetFields = dimension.getResultSetFields();
	let selectorFields = dimension.getSelectorFields();
	let fieldContainerBase = dimension.getFieldContainerBase();
	if (oFF.notNull(inaDefaultResultSetFields))
	{
		let duplicateNames = oFF.XHashSetOfString.create();
		let defaultFieldSize = inaDefaultResultSetFields.size();
		for (let i = 0; i < defaultFieldSize; i++)
		{
			let fieldName = inaDefaultResultSetFields.getStringAt(i);
			if (duplicateNames.contains(fieldName))
			{
				continue;
			}
			duplicateNames.add(fieldName);
			let field = dimension.getFieldByName(fieldName);
			if (oFF.isNull(field))
			{
				importer.addError(oFF.ErrorCodes.INVALID_PARAMETER, fieldName);
				return;
			}
			fieldContainerBase.addDefaultResultSetField(field);
			resultSetFields.addInternal(field);
			selectorFields.addInternal(field);
		}
	}
	if (oFF.notNull(inaDefaultResultSetNodes))
	{
		if (dimension.supportsFieldLayoutType(oFF.FieldLayoutType.ATTRIBUTE_BASED))
		{
			let attributeContainer = dimension.getAttributeContainerBase();
			let rootAttribute = attributeContainer.getMainAttribute();
			if (oFF.notNull(rootAttribute))
			{
				let resultSetAttributes = attributeContainer.getResultSetAttributes();
				let selectorAttributes = attributeContainer.getSelectorAttributes();
				if (fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
				{
					resultSetFields.clear();
					selectorFields.clear();
				}
				let defaultNodeSize = inaDefaultResultSetNodes.size();
				for (let k = 0; k < defaultNodeSize; k++)
				{
					let attribute = attributeContainer.getAttributeByName(inaDefaultResultSetNodes.getStringAt(k));
					if (oFF.notNull(attribute))
					{
						attributeContainer.addDefaultResultSetAttribute(attribute);
						resultSetAttributes.add(attribute);
						selectorAttributes.add(attribute);
						if (fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
						{
							let attributeResultSetFields = attribute.getResultSetFields();
							let attributeSize = attributeResultSetFields.size();
							for (let m = 0; m < attributeSize; m++)
							{
								let field2 = attributeResultSetFields.get(m);
								resultSetFields.add(field2);
								selectorFields.add(field2);
							}
						}
					}
				}
			}
		}
	}
	let isFixed = inaStructure.getBooleanByKeyExt("ResultSetFixedAttributes", false);
	fieldContainerBase.setHasFixedResultSetFields(isFixed);
	resultSetFields.setIsFixed(isFixed);
	selectorFields.setIsFixed(isFixed);
	if (!inaStructure.containsKey("FieldLayoutType"))
	{
		if (inaStructure.containsKey("DefaultResultSetAttributes"))
		{
			fieldContainerBase.clearDefaultResultSetFields();
		}
		else if (!inaStructure.containsKey("ResultSetFields"))
		{
			if (dimension.supportsFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED))
			{
				dimension.setFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED);
				dimension.getMetadataBase().setDefaultFieldLayoutType(oFF.FieldLayoutType.FIELD_BASED);
				fieldContainerBase.clearDefaultResultSetFields();
				let dimResultSetFields = dimension.getResultSetFields();
				let resultSize = dimResultSetFields.size();
				for (let s = 0; s < resultSize; s++)
				{
					fieldContainerBase.addDefaultResultSetField(dimResultSetFields.get(s));
				}
			}
		}
	}
};
oFF.QInAMdFieldsResultSet.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsResultSet.exportMd(inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdFieldsResultSet.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsResultSet.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = modelComponent;
	oFF.QInAMdFieldsResultSet.importMd(importer, inaStructure, dimension);
	return modelComponent;
};

oFF.QInAMdFieldsRoles = function() {};
oFF.QInAMdFieldsRoles.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFieldsRoles.prototype._ff_c = "QInAMdFieldsRoles";

oFF.QInAMdFieldsRoles.exportMd = function(inaStructure, dimension)
{
	let inaFieldDefaults = inaStructure.putNewStructure("FieldDefaults");
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "KeyAttribute", dimension.getFlatKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "TextAttribute", dimension.getFlatTextField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "DisplayKeyAttribute", dimension.getFlatDisplayKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyKeyAttribute", dimension.getHierarchyKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyTextAttribute", dimension.getHierarchyTextField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyDisplayKeyAttribute", dimension.getHierarchyDisplayKeyField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyPathAttribute", dimension.getHierarchyPathField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "HierarchyNavigationAttribute", dimension.getHierarchyNavigationField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "NamePathAttribute", dimension.getNamePathField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "GeoShapeAttribute", dimension.getGeoShapeField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "GeoPointAttribute", dimension.getGeoPointField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "GeoLevelAttribute", dimension.getGeoLevelField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "TextAttribute", dimension.getGeoAreaNameField());
	oFF.QInAExportUtil.setNameIfNotNull(inaFieldDefaults, "DefaultResultTextAttribute", dimension.getDefaultResultSetTextField());
};
oFF.QInAMdFieldsRoles.getFieldBySuffix = function(suffix, dimension)
{
	let fields = dimension.getFields();
	let size = fields.size();
	for (let i = 0; i < size; i++)
	{
		let field = fields.get(i);
		let isFieldWithSuffix = oFF.XString.endsWith(field.getName(), suffix);
		if (isFieldWithSuffix)
		{
			return field;
		}
	}
	return null;
};
oFF.QInAMdFieldsRoles.importMd = function(importer, inaStructure, dimension)
{
	let inaFieldDefaults = inaStructure.getStructureByKey("FieldDefaults");
	let inaFieldRoles = oFF.isNull(inaFieldDefaults) ? inaStructure : inaFieldDefaults;
	let flatKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("KeyAttribute"));
	let flatTextField = dimension.getFieldByName(inaFieldRoles.getStringByKey("TextAttribute"));
	let flatDisplayKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("DisplayKeyAttribute"));
	let hierKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyKeyAttribute"));
	let hierTextField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyTextAttribute"));
	let hierDisplayKeyField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyDisplayKeyAttribute"));
	let hierPathField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyPathAttribute"));
	let hierarchyNavigationField = dimension.getFieldByName(inaFieldRoles.getStringByKey("HierarchyNavigationAttribute"));
	let namePathField = dimension.getFieldByName(inaFieldRoles.getStringByKey("NamePathAttribute"));
	let defaultResultSetTextField = dimension.getFieldByName(inaFieldRoles.getStringByKey("DefaultResultTextAttribute"));
	if (oFF.isNull(hierarchyNavigationField))
	{
		let inaAttributeHierarchy = inaFieldRoles.getStructureByKey("AttributeHierarchy");
		if (oFF.notNull(inaAttributeHierarchy))
		{
			hierarchyNavigationField = dimension.getFieldByName(inaAttributeHierarchy.getStringByKey("HierarchyNavigationAttribute"));
		}
	}
	let fieldContainerBase = dimension.getFieldContainerBase();
	if (importer.m_capabilities.supportsSpatialChoropleth())
	{
		fieldContainerBase.setGeoShapeField(dimension.getFieldByName(inaFieldRoles.getStringByKey("GeoShapeAttribute")));
		fieldContainerBase.setGeoPointField(dimension.getFieldByName(inaFieldRoles.getStringByKey("GeoPointAttribute")));
		fieldContainerBase.setGeoLevelField(dimension.getFieldByName(inaFieldRoles.getStringByKey("GeoLevelAttribute")));
		fieldContainerBase.setGeoAreaNameField(dimension.getFieldByName(inaFieldRoles.getStringByKey("TextAttribute")));
	}
	let blendingPropertiesField = null;
	if (oFF.isNull(inaFieldDefaults))
	{
		if (oFF.isNull(hierPathField))
		{
			hierPathField = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_PATH);
			if (oFF.isNull(hierPathField) && importer.m_capabilities.supportsHierarchyPath() && !importer.m_capabilities.supportsHierarchyPathPresentationType())
			{
				hierPathField = oFF.QInAMdFieldsRoles.getFieldBySuffix(".path", dimension);
			}
		}
		if (importer.m_capabilities.supportsCubeBlendingProperties())
		{
			blendingPropertiesField = oFF.QInAMdFieldsRoles.getFieldBySuffix(".cubeBlendingProperties", dimension);
		}
		let attributeContainer = dimension.getAttributeContainer();
		let rootAttribute = attributeContainer.getMainAttribute();
		if (oFF.notNull(rootAttribute))
		{
			flatKeyField = rootAttribute.getKeyField();
			flatDisplayKeyField = rootAttribute.getDisplayKeyField();
			flatTextField = rootAttribute.getTextField();
			defaultResultSetTextField = rootAttribute.getDefaultResultSetTextField();
			if (importer.m_capabilities.supportsHierarchyAttHierFields())
			{
				hierKeyField = rootAttribute.getHierarchyKeyField();
				hierTextField = rootAttribute.getHierarchyTextField();
				hierDisplayKeyField = rootAttribute.getHierarchyDisplayKeyField();
			}
		}
		if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
		{
			if (oFF.isNull(flatKeyField))
			{
				flatKeyField = dimension.getFirstFieldByType(oFF.PresentationType.KEY);
			}
			if (oFF.isNull(flatDisplayKeyField))
			{
				flatDisplayKeyField = dimension.getFirstFieldByType(oFF.PresentationType.DISPLAY_KEY);
			}
			if (oFF.isNull(flatTextField))
			{
				flatTextField = dimension.getFirstFieldByType(oFF.PresentationType.TEXT);
			}
			if (oFF.isNull(hierKeyField))
			{
				let hierKey = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_KEY);
				if (oFF.isNull(hierKey))
				{
					hierKeyField = flatKeyField;
				}
				else
				{
					hierKeyField = hierKey;
				}
			}
			if (oFF.isNull(hierTextField))
			{
				hierTextField = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_TEXT);
			}
			if (oFF.isNull(hierDisplayKeyField))
			{
				hierDisplayKeyField = dimension.getFirstFieldByType(oFF.PresentationType.HIERARCHY_DISPLAY_KEY);
			}
			if (oFF.isNull(hierTextField))
			{
				hierTextField = flatTextField;
			}
			if (oFF.isNull(hierDisplayKeyField))
			{
				hierDisplayKeyField = flatDisplayKeyField;
			}
		}
		if (oFF.isNull(namePathField))
		{
			namePathField = dimension.getFirstFieldByType(oFF.PresentationType.NAME_PATH);
		}
		let udh = dimension.getUniversalDisplayHierarchy();
		if (oFF.notNull(udh))
		{
			flatKeyField = udh.getKeyField(dimension, inaStructure.getListByKey("Attributes"), "IsKey", "Name");
			flatDisplayKeyField = udh.getDisplayKeyField(dimension);
			flatTextField = udh.getTextField(dimension);
		}
	}
	if (oFF.notNull(flatKeyField))
	{
		flatKeyField.getMetadataBase().setIsFlatKeyField(true);
	}
	if (oFF.notNull(flatTextField))
	{
		flatTextField.getMetadataBase().setIsFlatTextField(true);
	}
	if (oFF.notNull(hierPathField))
	{
		hierPathField.getMetadataBase().setIsHierarchyPathField(true);
	}
	if (oFF.notNull(hierKeyField))
	{
		hierKeyField.getMetadataBase().setIsHierarchyKeyField(true);
	}
	if (oFF.notNull(blendingPropertiesField))
	{
		blendingPropertiesField.getMetadataBase().setIsCubeBlendingPropertiesField(true);
	}
	if (oFF.notNull(hierarchyNavigationField))
	{
		hierarchyNavigationField.getMetadataBase().setIsHierarchyNavigationField(true);
	}
	if (oFF.notNull(namePathField))
	{
		namePathField.getMetadataBase().setIsNamePathField(true);
	}
	fieldContainerBase.setFlatKeyField(flatKeyField);
	fieldContainerBase.setFlatTextField(flatTextField);
	fieldContainerBase.setFlatDisplayKeyField(flatDisplayKeyField);
	fieldContainerBase.setHierachyKeyField(hierKeyField);
	fieldContainerBase.setHierarchyTextField(hierTextField);
	fieldContainerBase.setHierarchyDisplayKeyField(hierDisplayKeyField);
	fieldContainerBase.setHierarchyPathField(hierPathField);
	fieldContainerBase.setHierachyNavigationField(hierarchyNavigationField);
	fieldContainerBase.setNamePathField(namePathField);
	fieldContainerBase.setCubeBlendingPropertiesField(blendingPropertiesField);
	fieldContainerBase.setDefaultResultSetTextField(defaultResultSetTextField);
};
oFF.QInAMdFieldsRoles.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdFieldsRoles.exportMd(inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdFieldsRoles.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFieldsRoles.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdFieldsRoles.importMd(importer, inaStructure, modelComponent);
	return modelComponent;
};

oFF.QInAMdFilterCapability = function() {};
oFF.QInAMdFilterCapability.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdFilterCapability.prototype._ff_c = "QInAMdFilterCapability";

oFF.QInAMdFilterCapability.containsNullOperator = function(operatorsFct)
{
	let operatorsIncluding = operatorsFct(oFF.SetSign.INCLUDING);
	if (oFF.notNull(operatorsIncluding) && operatorsIncluding.contains(oFF.ComparisonOperator.IS_NULL))
	{
		return true;
	}
	let operatorsExcluding = operatorsFct(oFF.SetSign.EXCLUDING);
	return oFF.notNull(operatorsExcluding) && operatorsExcluding.contains(oFF.ComparisonOperator.IS_NULL);
};
oFF.QInAMdFilterCapability.createFilterCapabilityContext = function(groupByContext)
{
	if (oFF.notNull(groupByContext))
	{
		let inaStructure = oFF.PrFactory.createStructure();
		let inaComparison = oFF.PrFactory.createStructure();
		inaComparison.putString("ComparisonGroup", oFF.QInAConverter.lookupComparisonGroupInA(groupByContext));
		inaComparison.putBoolean("IsNullAllowed", groupByContext.isNullAllowed());
		inaStructure.put("Comparison", inaComparison);
		return inaStructure;
	}
	return null;
};
oFF.QInAMdFilterCapability.exportMd = function(exporter, filterCapability, inaParent, queryModel)
{
	let inaStructure = oFF.PrFactory.createStructure();
	if (oFF.notNull(filterCapability))
	{
		if (filterCapability.getComponentType().isTypeOf(oFF.OlapComponentType.FILTER_CAPABILITY_GROUP))
		{
			let capabilityGroup = filterCapability;
			if (queryModel.getModelCapabilities().supportsFilterCapabilityExtended())
			{
				inaStructure.putIfNotNull("Query", oFF.QInAMdFilterCapability.createFilterCapabilityContext(capabilityGroup.getGroupByContext(oFF.QContextType.RESULT_SET)));
				inaStructure.putIfNotNull("Valuehelp", oFF.QInAMdFilterCapability.createFilterCapabilityContext(capabilityGroup.getGroupByContext(oFF.QContextType.SELECTOR)));
			}
			else
			{
				let inaComparisonGroup = oFF.QInAConverter.lookupComparisonGroupInA(capabilityGroup.getGroup());
				inaStructure.putString("ComparisonGroup", inaComparisonGroup);
			}
		}
		else
		{
			let isBw = exporter.isAbap(queryModel);
			if (queryModel.getModelCapabilities().supportsFilterCapabilityExtended())
			{
				if (filterCapability.supportsSetSign(oFF.SetSign.INCLUDING) || filterCapability.supportsSetSign(oFF.SetSign.EXCLUDING))
				{
					let inaQuery = inaStructure.putNewStructure("Query");
					let inaQueryComparison = inaQuery.putNewStructure("Comparison");
					oFF.QInAMdFilterCapability.exportOperators(isBw, inaQueryComparison, filterCapability, "Including", oFF.SetSign.INCLUDING, false);
					oFF.QInAMdFilterCapability.exportOperators(isBw, inaQueryComparison, filterCapability, "Excluding", oFF.SetSign.EXCLUDING, false);
					inaQueryComparison.putBoolean("IsNullAllowed", oFF.QInAMdFilterCapability.containsNullOperator((setSign) => {
						return filterCapability.getSupportedComparisonOperators(setSign);
					}));
				}
				if (filterCapability.supportsSetSignForValueHelpAndReadMode(oFF.SetSign.INCLUDING, oFF.QMemberReadMode.MASTER) || filterCapability.supportsSetSignForValueHelpAndReadMode(oFF.SetSign.EXCLUDING, oFF.QMemberReadMode.MASTER))
				{
					let inaValueHelp = inaStructure.putNewStructure("Valuehelp");
					let inaValueHelpComparison = inaValueHelp.putNewStructure("Comparison");
					oFF.QInAMdFilterCapability.exportValueHelpOperators(isBw, inaValueHelpComparison, filterCapability, "Including", oFF.SetSign.INCLUDING);
					oFF.QInAMdFilterCapability.exportValueHelpOperators(isBw, inaValueHelpComparison, filterCapability, "Excluding", oFF.SetSign.EXCLUDING);
					inaValueHelpComparison.putBoolean("IsNullAllowed", oFF.QInAMdFilterCapability.containsNullOperator((sign) => {
						return filterCapability.getSupportedComparisonOperatorsForValueHelpAndReadMode(sign, oFF.QMemberReadMode.MASTER);
					}));
				}
			}
			else
			{
				let inaComparison = inaStructure.putNewStructure("Comparison");
				oFF.QInAMdFilterCapability.exportOperators(isBw, inaComparison, filterCapability, "Including", oFF.SetSign.INCLUDING, true);
				oFF.QInAMdFilterCapability.exportOperators(isBw, inaComparison, filterCapability, "Excluding", oFF.SetSign.EXCLUDING, true);
			}
		}
	}
	if (oFF.notNull(inaParent))
	{
		inaParent.put("FilterCapability", inaStructure);
	}
	return inaStructure;
};
oFF.QInAMdFilterCapability.exportOperators = function(isBw, inaStructure, filterCapability, inaName, setSign, exportNullOperator)
{
	if (filterCapability.supportsSetSign(setSign))
	{
		let inaOperators = inaStructure.putNewList(inaName);
		let operators = filterCapability.getSupportedComparisonOperators(setSign);
		oFF.QInAMdFilterCapability.exportOperatorsList(isBw, operators, inaOperators, exportNullOperator);
	}
};
oFF.QInAMdFilterCapability.exportOperatorsList = function(isBw, comparisonOperators, inaOperators, exportNullOperator)
{
	for (let i = 0; i < comparisonOperators.size(); i++)
	{
		let comparisonOperator = comparisonOperators.get(i);
		if (comparisonOperator === oFF.ComparisonOperator.NOT_BETWEEN && isBw)
		{
			inaOperators.addString("NOTBETWEEN");
		}
		else if (comparisonOperator !== oFF.ComparisonOperator.IS_NULL || exportNullOperator)
		{
			inaOperators.addString(oFF.QInAConverter.lookupComparisonInA(comparisonOperator));
		}
	}
};
oFF.QInAMdFilterCapability.exportValueHelpOperators = function(isBw, inaStructure, filterCapability, inaName, setSign)
{
	if (filterCapability.supportsSetSignForValueHelpAndReadMode(setSign, oFF.QMemberReadMode.MASTER))
	{
		let inaOperators = inaStructure.putNewList(inaName);
		let operators = filterCapability.getSupportedComparisonOperatorsForValueHelpAndReadMode(setSign, oFF.QMemberReadMode.MASTER);
		oFF.QInAMdFilterCapability.exportOperatorsList(isBw, operators, inaOperators, false);
	}
};
oFF.QInAMdFilterCapability.importComparisonGroupByContext = function(importer, inaFilterCapability, context)
{
	let group = null;
	if (importer.m_capabilities.supportsFilterCapabilityExtended())
	{
		let inaFilterCapabilityByContext = inaFilterCapability.getStructureByKey(context);
		if (oFF.notNull(inaFilterCapabilityByContext))
		{
			let filterCapabilityComparisonNode = inaFilterCapabilityByContext.getStructureByKey("Comparison");
			if (oFF.notNull(filterCapabilityComparisonNode))
			{
				let inaComparisonGroup = filterCapabilityComparisonNode.getStringByKeyExt("ComparisonGroup", null);
				group = oFF.QInAConverter.lookupComparisonGroup(inaComparisonGroup, filterCapabilityComparisonNode.getBooleanByKeyExt("IsNullAllowed", false));
			}
		}
	}
	return group;
};
oFF.QInAMdFilterCapability.importFilterCapabilityListByContext = function(importer, inaFilterCapability, filterCapabilityBase, context)
{
	if (importer.m_capabilities.supportsFilterCapabilityExtended())
	{
		let inaFilterCapabilityByContext = inaFilterCapability.getStructureByKey(context);
		if (oFF.notNull(inaFilterCapabilityByContext))
		{
			filterCapabilityBase.setIsSameAcrossContexts(false);
			let filterCapabilityComparisonNode1 = inaFilterCapabilityByContext.getStructureByKey("Comparison");
			if (oFF.notNull(filterCapabilityComparisonNode1))
			{
				oFF.QInAMdFilterCapability.importOperators(importer, filterCapabilityComparisonNode1, filterCapabilityBase, "Including", oFF.SetSign.INCLUDING, filterCapabilityComparisonNode1.getBooleanByKeyExt("IsNullAllowed", false), context);
				oFF.QInAMdFilterCapability.importOperators(importer, filterCapabilityComparisonNode1, filterCapabilityBase, "Excluding", oFF.SetSign.EXCLUDING, filterCapabilityComparisonNode1.getBooleanByKeyExt("IsNullAllowed", false), context);
			}
		}
	}
};
oFF.QInAMdFilterCapability.importMd = function(importer, inaStructure, field, parentContext, context)
{
	let inaFilterCapability = inaStructure.getStructureByKey("FilterCapability");
	let inaComparisonGroup;
	let inaQueryComparisonGroup = null;
	let inaValueHelpComparisonGroup = null;
	if (oFF.isNull(inaFilterCapability))
	{
		inaComparisonGroup = inaStructure.getStringByKeyExt("ComparisonGroup", null);
	}
	else
	{
		inaComparisonGroup = inaFilterCapability.getStringByKeyExt("ComparisonGroup", null);
		if (oFF.isNull(inaComparisonGroup))
		{
			inaQueryComparisonGroup = oFF.QInAMdFilterCapability.importComparisonGroupByContext(importer, inaFilterCapability, "Query");
			inaValueHelpComparisonGroup = oFF.QInAMdFilterCapability.importComparisonGroupByContext(importer, inaFilterCapability, "Valuehelp");
		}
	}
	let filterCapability = null;
	let capabilityGroup;
	if (oFF.notNull(inaComparisonGroup) || oFF.notNull(inaQueryComparisonGroup) || oFF.notNull(inaValueHelpComparisonGroup))
	{
		capabilityGroup = oFF.QFilterCapabilityGroup._createFilterCapabilityGroup(context, parentContext, field);
		if (oFF.notNull(inaComparisonGroup))
		{
			capabilityGroup.setGroup(oFF.QInAConverter.lookupComparisonGroup(inaComparisonGroup, false));
		}
		else
		{
			capabilityGroup.setIsSameAcrossContexts(false);
			if (oFF.notNull(inaQueryComparisonGroup))
			{
				capabilityGroup.setGroupByContext(inaQueryComparisonGroup, oFF.QContextType.RESULT_SET);
			}
			if (oFF.notNull(inaValueHelpComparisonGroup))
			{
				capabilityGroup.setGroupByContext(inaValueHelpComparisonGroup, oFF.QContextType.SELECTOR);
			}
		}
		filterCapability = capabilityGroup;
	}
	else if (oFF.notNull(inaFilterCapability) && inaFilterCapability.hasElements())
	{
		let inaComparison = inaFilterCapability.getStructureByKey("Comparison");
		if (oFF.isNull(inaComparison))
		{
			if (importer.m_capabilities.supportsFilterCapabilityExtended())
			{
				filterCapability = oFF.QFilterCapability._createFilterCapability(context, parentContext, field);
				oFF.QInAMdFilterCapability.importFilterCapabilityListByContext(importer, inaFilterCapability, filterCapability, "Query");
				oFF.QInAMdFilterCapability.importFilterCapabilityListByContext(importer, inaFilterCapability, filterCapability, "Valuehelp");
			}
			else
			{
				let message = oFF.XStringBuffer.create();
				message.append("Metadata warning: No filter capability found for field ");
				if (oFF.notNull(field))
				{
					message.append(field.getName());
				}
				importer.addWarning(oFF.ErrorCodes.IMPORT_FILTER_CAPABILITY_NOT_FOUND, message.toString());
			}
		}
		else
		{
			filterCapability = oFF.QFilterCapability._createFilterCapability(context, parentContext, field);
			oFF.QInAMdFilterCapability.importOperators(importer, inaComparison, filterCapability, "Including", oFF.SetSign.INCLUDING, false, null);
			oFF.QInAMdFilterCapability.importOperators(importer, inaComparison, filterCapability, "Excluding", oFF.SetSign.EXCLUDING, false, null);
		}
	}
	else if (importer.isAbap(context) && oFF.notNull(field) && field.getDimension() !== null && field.getDimension().isStructure())
	{
		filterCapability = oFF.QFilterCapability._createFilterCapability(context, parentContext, field);
		filterCapability.setSupportsValueHelpOnly(true);
		filterCapability.addSupportedSetSignByContext(oFF.SetSign.INCLUDING, oFF.QContextType.SELECTOR);
		filterCapability.getModifiableSupportedComparisonOperatorsByContext(oFF.SetSign.INCLUDING, oFF.QContextType.SELECTOR).add(oFF.ComparisonOperator.EQUAL);
	}
	return filterCapability;
};
oFF.QInAMdFilterCapability.importOperators = function(importer, inaComparison, filterCapabilityBase, inaName, setSign, isNullAllowed, context)
{
	let inaOperators = inaComparison.getListByKey(inaName);
	if (!oFF.PrUtils.isListEmpty(inaOperators))
	{
		let comparisonOperators;
		if (oFF.XString.isEqual(context, "Valuehelp"))
		{
			filterCapabilityBase.addSupportedSetSignByContext(setSign, oFF.QContextType.SELECTOR);
			comparisonOperators = filterCapabilityBase.getModifiableSupportedComparisonOperatorsByContext(setSign, oFF.QContextType.SELECTOR);
		}
		else
		{
			filterCapabilityBase.addSupportedSetSign(setSign);
			comparisonOperators = filterCapabilityBase.getModifiableSupportedComparisonOperatorsByContext(setSign, oFF.QContextType.RESULT_SET);
		}
		let size = inaOperators.size();
		for (let i = 0; i < size; i++)
		{
			let inaSupportedComparisonOperator = inaOperators.getStringAt(i);
			if (oFF.notNull(inaSupportedComparisonOperator))
			{
				let comparisonOperator = oFF.QInAConverter.lookupComparison(inaSupportedComparisonOperator);
				if (oFF.isNull(comparisonOperator))
				{
					importer.addWarning(oFF.ErrorCodes.IMPORT_FILTER_CAPABILITY_UNSUPPORTED_OPERATORS, oFF.XStringUtils.concatenate3("Metadata warning: Unsupported Comparison Operator '", inaSupportedComparisonOperator, "'!"));
				}
				else
				{
					comparisonOperators.add(comparisonOperator);
				}
			}
		}
		if (isNullAllowed)
		{
			comparisonOperators.add(oFF.ComparisonOperator.IS_NULL);
		}
	}
};
oFF.QInAMdFilterCapability.updateFilterCapabilities = function(dimension)
{
	let hierarchyKeyField = dimension.getHierarchyKeyField();
	if (oFF.notNull(hierarchyKeyField) && !hierarchyKeyField.isFlatKeyField())
	{
		let filterCapabilities = dimension.getFilterCapabilities().getFilterCapabilitiesByField(hierarchyKeyField);
		if (oFF.notNull(filterCapabilities) && filterCapabilities.isFilterCapabilityGroup())
		{
			let filterCapabilitiesGroup = filterCapabilities;
			filterCapabilitiesGroup.setGroup(oFF.QInAConverter.switchComparisonGroupToIncludeOnly(filterCapabilitiesGroup.getGroup()));
		}
	}
};
oFF.QInAMdFilterCapability.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return oFF.QInAMdFilterCapability.exportMd(exporter, modelComponent, inaStructure, modelComponent.getQueryModel());
};
oFF.QInAMdFilterCapability.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdFilterCapability.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return oFF.QInAMdFilterCapability.importMd(importer, inaStructure, parentComponent, null, context);
};

oFF.QInAMdGenericComponent = function() {};
oFF.QInAMdGenericComponent.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdGenericComponent.prototype._ff_c = "QInAMdGenericComponent";

oFF.QInAMdGenericComponent.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let modelComponent2 = modelComponent;
	inaStructure.putString("Name", modelComponent2.getName());
	inaStructure.putString("Type", modelComponent.getComponentType().getName());
	return inaStructure;
};
oFF.QInAMdGenericComponent.prototype.extendCustom = function(exporter, modelComponent, inaStructure)
{
	let olapComponentType = modelComponent.getOlapComponentType();
	let ctypeValue = oFF.QInAConverter.lookupComponentTypeInA(olapComponentType);
	if (oFF.notNull(ctypeValue))
	{
		inaStructure.putString("CType", ctypeValue);
	}
	return inaStructure;
};
oFF.QInAMdGenericComponent.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP;
};
oFF.QInAMdGenericComponent.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return modelComponent;
};

oFF.QInAMdHierarchy = function() {};
oFF.QInAMdHierarchy.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdHierarchy.prototype._ff_c = "QInAMdHierarchy";

oFF.QInAMdHierarchy.appendItemsToCatalogResult = function(catalogResult, hierarchiesList, dimensionName)
{
	let len = oFF.PrUtils.getListSize(hierarchiesList, 0);
	for (let i = 0; i < len; i++)
	{
		let hierarchyStructure = oFF.PrUtils.getStructureElement(hierarchiesList, i);
		let item = oFF.HierarchyCatalogItem.createCatalogItem();
		item.setDimensionName(dimensionName);
		let hierarchyName;
		if (hierarchyStructure.hasStringByKey("Name"))
		{
			hierarchyName = hierarchyStructure.getStringByKey("Name");
		}
		else
		{
			hierarchyName = hierarchyStructure.getStringByKey("HierarchyName");
		}
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyName) || catalogResult.containsHierarchy(hierarchyName))
		{
			continue;
		}
		item.setHierarchyName(hierarchyName);
		item.setHierarchyUniqueName(hierarchyStructure.getStringByKey("UniqueName"));
		let hierarchyDescription = oFF.PrUtils.getStringProperty(hierarchyStructure, "Description");
		if (oFF.notNull(hierarchyDescription))
		{
			item.setHierarchyLongText(hierarchyDescription.getString());
		}
		let version = oFF.PrUtils.getStringProperty(hierarchyStructure, "Version");
		if (oFF.notNull(version))
		{
			item.setVersionName(version.getString());
		}
		let structure = oFF.PrUtils.getStringProperty(hierarchyStructure, "Structure");
		if (oFF.notNull(structure))
		{
			item.setHierarchyType(oFF.HierarchyType.lookup(structure.getString()));
		}
		let isModeled = oFF.PrUtils.getBooleanValueProperty(hierarchyStructure, "IsModeled", false);
		item.setIsModeled(isModeled);
		let dateTo = oFF.PrUtils.getStringProperty(hierarchyStructure, "DateTo");
		if (oFF.notNull(dateTo))
		{
			let dateToString = dateTo.getString();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToString))
			{
				item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToString));
			}
		}
		let levels = oFF.PrUtils.getListProperty(hierarchyStructure, "Levels");
		if (oFF.notNull(levels))
		{
			item.setSupportsHierarchyLevels(true);
			let levelList = oFF.XList.create();
			let lenLevel = oFF.PrUtils.getListSize(levels, 0);
			for (let levelIndex = 0; levelIndex < lenLevel; levelIndex++)
			{
				let levelStructure = oFF.PrUtils.getStructureElement(levels, levelIndex);
				if (oFF.isNull(levelStructure))
				{
					continue;
				}
				let catalogLevel = oFF.HierarchyCatalogLevel.createCatalogLevel();
				let level = oFF.PrUtils.getIntegerValueProperty(levelStructure, "Level", -1);
				if (level > -1)
				{
					catalogLevel.setLevel(level);
				}
				let levelName = oFF.PrUtils.getStringProperty(levelStructure, "LevelName");
				if (oFF.notNull(levelName))
				{
					catalogLevel.setLevelName(levelName.getString());
				}
				let levelCaption = oFF.PrUtils.getStringProperty(levelStructure, "LevelCaption");
				if (oFF.notNull(levelCaption))
				{
					catalogLevel.setLevelDescription(levelCaption.getString());
				}
				let levelUniqueName = oFF.PrUtils.getStringProperty(levelStructure, "LevelUniqueName");
				if (oFF.notNull(levelUniqueName))
				{
					catalogLevel.setLevelUniqueName(levelUniqueName.getString());
				}
				let levelDimensionName = oFF.PrUtils.getStringProperty(levelStructure, "DimensionName");
				if (oFF.notNull(levelDimensionName))
				{
					catalogLevel.setLevelDimensionName(levelDimensionName.getString());
				}
				let levelType = oFF.PrUtils.getIntegerProperty(levelStructure, "LevelType");
				if (oFF.notNull(levelType))
				{
					catalogLevel.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(levelType.getInteger()));
				}
				levelList.add(catalogLevel);
			}
			item.setHierarchyLevels(levelList);
		}
		let restNode = hierarchyStructure.getStringByKey("RestNode");
		if (oFF.notNull(restNode))
		{
			item.setRestNode(restNode);
		}
		let virtualRootNode = hierarchyStructure.getStringByKey("VirtualRootNode");
		if (oFF.notNull(virtualRootNode))
		{
			item.setVirtualRootNode(virtualRootNode);
		}
		catalogResult.addItem(item);
	}
	return catalogResult;
};
oFF.QInAMdHierarchy.exportHierarchyDetails = function(exporter, inaHierarchies, hierIt)
{
	let hierarchyItem = hierIt.next();
	let inaHierarchy = inaHierarchies.addNewStructure();
	inaHierarchy.putString("Name", hierarchyItem.getHierarchyName());
	inaHierarchy.putString("Description", hierarchyItem.getHierarchyDescription());
	if (hierarchyItem.hasVersionName())
	{
		inaHierarchy.putString("Version", hierarchyItem.getVersionName());
	}
	let hierarchyType = hierarchyItem.getHierarchyType();
	if (hierarchyType !== oFF.HierarchyType.UNKNOWN)
	{
		inaHierarchy.putString("Structure", hierarchyType.getName());
	}
	inaHierarchy.putString("RestNode", hierarchyItem.getRestNode());
	inaHierarchy.putString("VirtualRootNode", hierarchyItem.getVirtualRootNode());
	oFF.QInAExportUtil.setDate(exporter, inaHierarchy, "DueDate", hierarchyItem.getDateTo());
	oFF.QInAMdHierarchy.exportLevels(inaHierarchy, hierarchyItem);
};
oFF.QInAMdHierarchy.exportLevelHierarchyDetails = function(exporter, inaHierarchies, hierarchyItem)
{
	let inaHierarchy = inaHierarchies.addNewStructure();
	inaHierarchy.putString("Name", hierarchyItem.getHierarchyName());
	inaHierarchy.putString("Description", hierarchyItem.getHierarchyDescription());
	inaHierarchy.putString("DimensionName", hierarchyItem.getDimensionName());
	inaHierarchy.putString("Structure", hierarchyItem.getHierarchyType().getName());
	inaHierarchy.putBoolean("IsModeled", hierarchyItem.isModeled());
	oFF.QInAExportUtil.setDate(exporter, inaHierarchy, "DueDate", hierarchyItem.getDateTo());
	oFF.QInAMdHierarchy.exportLevelsLevelHierarchy(inaHierarchy, hierarchyItem);
};
oFF.QInAMdHierarchy.exportLevels = function(inaHierarchy, hierarchyItem)
{
	if (hierarchyItem.supportsHierarchyLevels())
	{
		let inaLevels = inaHierarchy.putNewList("Levels");
		let hierarchyLevels = hierarchyItem.getHierarchyLevels();
		if (oFF.notNull(hierarchyLevels))
		{
			let size = hierarchyLevels.size();
			for (let levelIdx = 0; levelIdx < size; levelIdx++)
			{
				let currentLevel = hierarchyLevels.get(levelIdx);
				let inaLevel = inaLevels.addNewStructure();
				inaLevel.putString("LevelUniqueName", currentLevel.getLevelUniqueName());
				inaLevel.putInteger("Level", currentLevel.getLevel());
				inaLevel.putString("LevelName", currentLevel.getLevelName());
				inaLevel.putString("LevelCaption", currentLevel.getLevelDescription());
				inaLevel.putStringNotNull("DimensionName", currentLevel.getLevelDimensionName());
				inaLevel.putInteger("LevelType", oFF.QInAConverter.lookupHierarchyLevelTypeIna(currentLevel.getLevelType()));
			}
		}
	}
};
oFF.QInAMdHierarchy.exportLevelsLevelHierarchy = function(inaHierarchy, hierarchyItem)
{
	let inaLevels = inaHierarchy.putNewList("Levels");
	let hierarchyLevels = hierarchyItem.getAllLevel();
	let size = hierarchyLevels.size();
	for (let levelIdx = 0; levelIdx < size; levelIdx++)
	{
		let currentLevel = hierarchyLevels.get(levelIdx);
		let inaLevel = inaLevels.addNewStructure();
		inaLevel.putInteger("Level", currentLevel.getLevelNumber());
		inaLevel.putStringNotNull("LevelUniqueName", currentLevel.getLevelUniqueName());
		inaLevel.putString("LevelName", currentLevel.getLevelName());
		inaLevel.putString("LevelCaption", currentLevel.getLevelText());
		inaLevel.putStringNotNull("DimensionName", currentLevel.getLevelDimensionName());
		inaLevel.putInteger("LevelType", oFF.QInAConverter.lookupHierarchyLevelTypeIna(currentLevel.getLevelType()));
	}
};
oFF.QInAMdHierarchy.exportMdHierarchy = function(exporter, inaStructure, dimension)
{
	inaStructure.putBoolean("HierarchiesPossible", dimension.supportsHierarchy());
	inaStructure.putBoolean("HasExternalHierarchies", dimension.hasExternalHierarchies());
	inaStructure.putInteger("NumberOfHierarchies", dimension.getNumberOfHierarchies());
	inaStructure.putString("DefaultHierarchy", dimension.getDefaultHierarchyName());
	if (exporter.m_capabilities.supportsDisplayHierarchyFixInFilter())
	{
		inaStructure.putBoolean("DisplayHierarchyFixInFilter", dimension.isDisplayHierarchyFixInFilter());
	}
	let leveledHierarchies = dimension.getLeveledHierarchies();
	let modelCapabilities = dimension.getModelCapabilities();
	if (oFF.XCollectionUtils.hasElements(leveledHierarchies) && modelCapabilities.supportsDimensionHierarchyLevels())
	{
		let inaLevelHierarchies = inaStructure.putNewList("LevelHierarchies");
		let numberOfLeveledHierarchies = leveledHierarchies.size();
		for (let i = 0; i < numberOfLeveledHierarchies; i++)
		{
			oFF.QInAMdHierarchy.exportLevelHierarchyDetails(exporter, inaLevelHierarchies, leveledHierarchies.get(i));
		}
	}
	if (modelCapabilities.supportsHierarchyMetadata())
	{
		let inaHierarchies = inaStructure.putNewList("Hierarchies");
		let hierarchies = dimension.getHierarchies();
		if (oFF.notNull(hierarchies))
		{
			let hierIt = hierarchies.getObjectsIterator();
			while (hierIt.hasNext())
			{
				oFF.QInAMdHierarchy.exportHierarchyDetails(exporter, inaHierarchies, hierIt);
			}
			oFF.XObjectExt.release(hierIt);
		}
	}
	if (modelCapabilities.supportsDimensionHierarchyMetadata())
	{
		let hierarchyMetadataInANode = inaStructure.putNewStructure("HierarchyMetadata");
		if (dimension.isHierarchyActiveByDefault() !== oFF.TriStateBool._DEFAULT)
		{
			hierarchyMetadataInANode.putBoolean("ActiveDefault", dimension.isHierarchyActiveByDefault().getBoolean());
		}
		hierarchyMetadataInANode.putBoolean("TimeDependent", dimension.hasTimeDependentHierarchies());
		hierarchyMetadataInANode.putBoolean("VersionDependent", dimension.hasVersionDependentHierarchies());
	}
	else if (exporter.isAbap(dimension))
	{
		if (dimension.isHierarchyActiveByDefault() !== oFF.TriStateBool._DEFAULT)
		{
			inaStructure.putBoolean("HierarchyActiveDefault", dimension.isHierarchyActiveByDefault().getBoolean());
		}
	}
};
oFF.QInAMdHierarchy.hasPlaceHolderInStructure = function(inaStructure, placeHolderType, placeHolderReference)
{
	let placeHolder = inaStructure.getStringByKey(placeHolderType);
	let hasPlaceHolder = oFF.notNull(placeHolder) && oFF.XString.isEqual(placeHolderReference, placeHolder);
	return hasPlaceHolder;
};
oFF.QInAMdHierarchy.importDimensionHierarchyMetadata = function(importer, dimension, dimensionHierarchyMetadata)
{
	if (oFF.notNull(dimensionHierarchyMetadata))
	{
		if (dimensionHierarchyMetadata.containsKey("ActiveDefault"))
		{
			let hierarchyActiveDefault = oFF.TriStateBool.lookup(dimensionHierarchyMetadata.getBooleanByKey("ActiveDefault"));
			dimension.getHierarchyManagerBase().setHierarchyActiveByDefault(hierarchyActiveDefault);
		}
		dimension.getHierarchyManagerBase().setHasTimeDependentHierarchies(dimensionHierarchyMetadata.getBooleanByKey("TimeDependent"));
		dimension.getHierarchyManagerBase().setHasVersionDependentHierarchies(dimensionHierarchyMetadata.getBooleanByKey("VersionDependent"));
	}
};
oFF.QInAMdHierarchy.importEachLeveledHierarchy = function(importer, dimension, hierarchies, metaHierarchies)
{
	let size = hierarchies.size();
	for (let hierIdx = 0; hierIdx < size; hierIdx++)
	{
		let hier = oFF.QInAMdHierarchy.importLeveledHierarchy(importer, dimension.getContext(), dimension, hierarchies.getStructureAt(hierIdx));
		if (!metaHierarchies.contains(hier))
		{
			metaHierarchies.add(hier);
		}
	}
};
oFF.QInAMdHierarchy.importHierarchyDrillInfo = function(importer, inaHierarchy, dimension)
{
	let initialDrillOffset = inaHierarchy.getIntegerByKeyExt("InitialDrillOffset", 0);
	let initialDrillLevel = inaHierarchy.getIntegerByKeyExt("InitialDrillLevel", 0);
	let modelCapabilities = dimension.getModelCapabilities();
	if (modelCapabilities.supportsVisibilityFilter() || !importer.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		dimension.setInitialDrillLevel(initialDrillLevel);
		dimension.setSelectorInitialDrillLevel(initialDrillLevel);
	}
	else
	{
		if (initialDrillLevel === -1)
		{
			dimension.setInitialDrillLevel(initialDrillLevel);
			dimension.setSelectorInitialDrillLevel(initialDrillLevel);
		}
		else if (initialDrillOffset === -1)
		{
			dimension.setInitialDrillLevel(0);
			dimension.setSelectorInitialDrillLevel(0);
		}
		else
		{
			dimension.setInitialDrillLevel(initialDrillLevel + initialDrillOffset);
			dimension.setSelectorInitialDrillLevel(initialDrillLevel + initialDrillOffset);
		}
	}
	dimension.setInitialDrillOffset(initialDrillOffset);
	dimension.setExplicitDrillOnFilteredNodes(inaHierarchy.getBooleanByKeyExt("ExplicitDrillOnFilteredNodes", false));
	let alignment = oFF.Alignment.DEFAULT_VALUE;
	if (modelCapabilities.supportsExpandBottomUp())
	{
		let nodeAlignment = inaHierarchy.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
		alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
		if (inaHierarchy.containsKey("ExpandBottomUp"))
		{
			let isExpandingBottomUp = inaHierarchy.getBooleanByKeyExt("ExpandBottomUp", false);
			if (isExpandingBottomUp)
			{
				alignment = oFF.Alignment.CHILDREN_ABOVE_PARENT;
			}
		}
	}
	dimension.setLowerLevelNodeAlignment(alignment);
	let nodeCondensation = inaHierarchy.getBooleanByKeyExt("NodeCondensation", false);
	dimension.setHasNodeCondensation(nodeCondensation);
	let memberOfPostedNodeVisibility = inaHierarchy.getStringByKeyExt("MemberOfPostedNodeVisibility", "Visible");
	let visibility = oFF.QInAConverter.lookupResultSetVisibility(memberOfPostedNodeVisibility);
	dimension.setMemberOfPostedNodeVisibility(visibility);
	if (modelCapabilities.supportsMaxDrillLevel())
	{
		let maxDrillLevel = inaHierarchy.getIntegerByKeyExt("MaxDrillLevel", -1);
		dimension.getHierarchyManager().setMaxDrillLevel(maxDrillLevel);
		let maxRuntimeLevel = inaHierarchy.getIntegerByKeyExt("MaxRuntimeLevel", -1);
		dimension.getHierarchyManager().setMaxRuntimeLevel(maxRuntimeLevel);
	}
};
oFF.QInAMdHierarchy.importHierarchyDueDate = function(inaStructure, dimension, hierarchy, supportsSapDate)
{
	let dueDate = inaStructure.getStringByKey("DueDate");
	let hasHierarchyDueDatePlaceHolderInStructure = oFF.QInAMdHierarchy.hasPlaceHolderInStructure(inaStructure, "DueDateIs", "Variable");
	dimension.setUseHierarchyDueDateVariable(hasHierarchyDueDatePlaceHolderInStructure);
	if (hasHierarchyDueDatePlaceHolderInStructure)
	{
		dimension.setHierarchyDueDateVariableName(oFF.XStringUtils.isNullOrEmpty(dueDate) ? null : dueDate);
		dimension.getHierarchyManagerBase().setInitialHierarchyDueDate(null);
	}
	else
	{
		let hierarchyDueDate = oFF.XDate.createDateFromStringWithFlag(dueDate, supportsSapDate);
		if (oFF.notNull(hierarchy))
		{
			hierarchy.setHierarchyDueDate(hierarchyDueDate);
		}
		oFF.QInAMdHierarchy.setInitialDueDate(dimension, hierarchyDueDate);
	}
};
oFF.QInAMdHierarchy.importHierarchyVersion = function(inaStructure, dimension, hierarchy)
{
	let version = inaStructure.getStringByKey("Version");
	let hasHierarchyVersionPlaceHolderInStructure = oFF.QInAMdHierarchy.hasPlaceHolderInStructure(inaStructure, "VersionIs", "Variable");
	dimension.getHierarchyManagerBase().setUseHierarchyVersionVariable(hasHierarchyVersionPlaceHolderInStructure);
	if (hasHierarchyVersionPlaceHolderInStructure)
	{
		dimension.getHierarchyManagerBase().setHierarchyVersionVariableName(oFF.XStringUtils.isNullOrEmpty(version) ? null : version);
		dimension.getHierarchyManagerBase().setInitialHierarchyVersion(null);
	}
	else
	{
		dimension.getHierarchyManagerBase().setInitialHierarchyVersion(version);
		if (oFF.notNull(hierarchy))
		{
			hierarchy.setHierarchyVersion(version);
		}
	}
};
oFF.QInAMdHierarchy.importLevelHierarchyDetails = function(importer, dimension, hierarchies)
{
	if (!oFF.PrUtils.isListEmpty(hierarchies))
	{
		let metadataModel = dimension.getQueryModelBase().getQueryManagerBase().getMetadataModelBase();
		let metaHierarchies = metadataModel.getLeveledHierarchiesBase();
		oFF.QInAMdHierarchy.importEachLeveledHierarchy(importer, dimension, hierarchies, metaHierarchies);
	}
};
oFF.QInAMdHierarchy.importLeveledHierarchy = function(importer, context, dimension, inaHierarchy)
{
	let hier = oFF.QLeveledHierarchy.create(context, dimension, inaHierarchy.getStringByKey(inaHierarchy.containsKey("Name") ? "Name" : "HierarchyName"));
	hier.setHierarchyUniqueName(inaHierarchy.getStringByKey("UniqueName"));
	if (inaHierarchy.getStringByKey("DimensionName") === null)
	{
		hier.setDimensionName(dimension.getName());
	}
	else
	{
		hier.setDimensionName(inaHierarchy.getStringByKey("DimensionName"));
	}
	hier.setHierarchyType(oFF.HierarchyType.lookup(inaHierarchy.getStringByKey("Structure")));
	hier.setIsModeled(inaHierarchy.getBooleanByKeyExt("IsModeled", false));
	let hierDueDate = inaHierarchy.getStringByKey("DueDate");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierDueDate))
	{
		hier.setDateTo(oFF.XDate.createDateFromStringWithFlag(hierDueDate, importer.m_capabilities.supportsSapDate()));
	}
	hier.setHierarchyDescription(inaHierarchy.getStringByKey("Description"));
	let inaLevels = inaHierarchy.getListByKey("Levels");
	if (!oFF.PrUtils.isListEmpty(inaLevels))
	{
		oFF.QInAMdHierarchy.importLevels(hier, inaLevels);
	}
	return hier;
};
oFF.QInAMdHierarchy.importLevels = function(hier, inaLevels)
{
	let size = inaLevels.size();
	for (let levelIdx = 0; levelIdx < size; levelIdx++)
	{
		let inaLevel = inaLevels.getStructureAt(levelIdx);
		let level = oFF.QHierarchyLevel.create(hier, inaLevel.getStringByKey("LevelUniqueName"), inaLevel.getIntegerByKey("Level"));
		level.setLevelName(inaLevel.getStringByKey("LevelName"));
		level.setLevelText(inaLevel.getStringByKey("LevelCaption"));
		level.setLevelDimensionName(inaLevel.getStringByKey("DimensionName"));
		level.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(inaLevel.getIntegerByKey("LevelType")));
		level.setNavigationAttribute(inaLevel.getStringByKey("NavAttr"));
		hier.getAllLevelBase().add(level);
	}
};
oFF.QInAMdHierarchy.importMdHierarchy = function(importer, inaStructure, dimension)
{
	let hierarchyManagerBase = dimension.getHierarchyManagerBase();
	let supportsHierarchy = oFF.PrUtils.getBooleanValueProperty(inaStructure, "HierarchiesPossible", false);
	hierarchyManagerBase.setSupportsHierarchy(supportsHierarchy);
	let hasExternalHierarchies = oFF.PrUtils.getBooleanValueProperty(inaStructure, "HasExternalHierarchies", false);
	hierarchyManagerBase.setHasExternalHierarchies(hasExternalHierarchies);
	let defaultHierarchyName = oFF.PrUtils.getStringValueProperty(inaStructure, "DefaultHierarchy", "");
	let displayHierarchyFixInFilter = oFF.PrUtils.getBooleanValueProperty(inaStructure, "DisplayHierarchyFixInFilter", false);
	hierarchyManagerBase.setDefaultHierarchyName(defaultHierarchyName);
	hierarchyManagerBase.setNumberOfHierarchies(oFF.PrUtils.getIntegerValueProperty(inaStructure, "NumberOfHierarchies", 0));
	let inaHierarchy = inaStructure.getStructureByKey("Hierarchy");
	oFF.QInAMdHierarchy.importMdHierarchyForAutoSubmit(importer, inaHierarchy, dimension);
	if (importer.getSession().hasFeature(oFF.FeatureToggleOlap.ACTIVATE_DEFAULT_HIERARCHY))
	{
		if (supportsHierarchy && oFF.XStringUtils.isNotNullAndNotEmpty(defaultHierarchyName))
		{
			hierarchyManagerBase.setHierarchyName(defaultHierarchyName);
			hierarchyManagerBase.setHierarchyActive(true);
		}
	}
	hierarchyManagerBase.setDisplayHierarchyFixInFilter(displayHierarchyFixInFilter);
	let availableLevelHierarchies = oFF.PrUtils.getListProperty(inaStructure, "LevelHierarchies");
	let capabilities = dimension.getModelCapabilities();
	if (oFF.notNull(capabilities))
	{
		if (capabilities.supportsDimensionHierarchyLevels())
		{
			oFF.QInAMdHierarchy.importLevelHierarchyDetails(importer, dimension, availableLevelHierarchies);
		}
		if (capabilities.supportsSpatialChoropleth())
		{
			let inAGeoShapeHierarchies = oFF.PrUtils.getListProperty(inaStructure, "GeoShapeHierarchies");
			if (!oFF.PrUtils.isListEmpty(inAGeoShapeHierarchies))
			{
				let geoHierarchies = hierarchyManagerBase.getGeoShapeHierarchiesBase();
				oFF.QInAMdHierarchy.importEachLeveledHierarchy(importer, dimension, inAGeoShapeHierarchies, geoHierarchies);
			}
		}
		if (capabilities.supportsDimensionHierarchyMetadata())
		{
			let inaHierarchyMetadata = inaStructure.getStructureByKey("HierarchyMetadata");
			oFF.QInAMdHierarchy.importDimensionHierarchyMetadata(importer, dimension, inaHierarchyMetadata);
		}
		else if (importer.isAbap(dimension) && inaStructure.containsKey("HierarchyActiveDefault"))
		{
			let hierarchyActiveDefault = oFF.TriStateBool.lookup(inaStructure.getBooleanByKey("HierarchyActiveDefault"));
			dimension.getHierarchyManagerBase().setHierarchyActiveByDefault(hierarchyActiveDefault);
		}
		if (!capabilities.supportsHierarchyMetadata())
		{
			return;
		}
	}
	let hierarchies = oFF.PrUtils.getListProperty(inaStructure, "Hierarchies");
	let hierarchyCatalogResult = oFF.QFactory.createHierarchyCatalogResult();
	oFF.QInAMdHierarchy.appendItemsToCatalogResult(hierarchyCatalogResult, hierarchies, dimension.getName());
	hierarchyManagerBase.setHierarchies(hierarchyCatalogResult);
	if (oFF.notNull(hierarchies))
	{
		oFF.QInAMdHierarchy.importLevelHierarchyDetails(importer, dimension, hierarchies);
	}
};
oFF.QInAMdHierarchy.importMdHierarchyForAutoSubmit = function(importer, inaHierarchy, dimension)
{
	let queryManager = dimension.getQueryManager();
	let isMetadataMode = importer.getOriginalMode() === oFF.QModelFormat.INA_METADATA || importer.getMode() === oFF.QModelFormat.INA_METADATA;
	if (oFF.notNull(inaHierarchy) && dimension.supportsHierarchy() && oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsAutoVariableSubmit() && queryManager.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_STARTUP)
	{
		let fixInFilter = dimension.isDisplayHierarchyFixInFilter();
		dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(false);
		let hasHierarchyNamePlaceHolderInStructure = oFF.QInAMdHierarchy.hasPlaceHolderInStructure(inaHierarchy, "NameIs", "Variable");
		let isNamePlaceHolderInMD = hasHierarchyNamePlaceHolderInStructure && isMetadataMode;
		let hierarchyName = inaHierarchy.getStringByKey("Name") !== null ? inaHierarchy.getStringByKey("Name") : inaHierarchy.getStringByKey("HierarchyName");
		dimension.getHierarchyManagerBase().setUseHierarchyNameVariable(isNamePlaceHolderInMD);
		if (isNamePlaceHolderInMD)
		{
			dimension.getHierarchyManagerBase().setHierarchyNameVariableName(hierarchyName);
		}
		dimension.getHierarchyManagerBase().setInitialHierarchyName(hasHierarchyNamePlaceHolderInStructure ? null : hierarchyName);
		let hierarchy = null;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
		{
			if (inaHierarchy.getBooleanByKey("IsTransient"))
			{
				hierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, hierarchyName, inaHierarchy.getStringByKey("Description"));
			}
			else if (!isNamePlaceHolderInMD)
			{
				hierarchy = oFF.QHierarchy.create(dimension.getContext(), dimension, hierarchyName);
			}
			oFF.QInAMdHierarchy.importHierarchyDueDate(inaHierarchy, dimension, hierarchy, importer.m_capabilities.supportsSapDate());
			oFF.QInAMdHierarchy.importHierarchyVersion(inaHierarchy, dimension, hierarchy);
			if (!isNamePlaceHolderInMD)
			{
				dimension.setHierarchy(hierarchy);
				let isActive = inaHierarchy.getBooleanByKeyExt("HierarchyActive", true);
				dimension.setHierarchyActive(isActive);
				dimension.setSelectorHierarchyActive(isActive);
			}
			oFF.QInAMdHierarchy.importHierarchyDrillInfo(importer, inaHierarchy, dimension);
			dimension.getHierarchyManagerBase().setDisplayHierarchyFixInFilter(fixInFilter);
		}
	}
	let dueDateVariable = oFF.notNull(inaHierarchy) && oFF.XString.isEqual(inaHierarchy.getStringByKey("DueDateIs"), "Variable");
	let dueDateSet = oFF.notNull(inaHierarchy) && inaHierarchy.hasStringByKey("DueDate");
	let isDueDateDefaultByMetadata = dimension.getHierarchyDueDate() === null && oFF.XStringUtils.isNullOrEmpty(dimension.getHierarchyDueDateVariableName()) && !dueDateSet && !dueDateVariable && isMetadataMode;
	dimension.getHierarchyManagerBase().setDueDateDefaultByMetadata(isDueDateDefaultByMetadata);
};
oFF.QInAMdHierarchy.setInitialDueDate = function(dimension, hierarchyDueDate)
{
	let dueDate = hierarchyDueDate;
	if (oFF.isNull(dueDate))
	{
		dueDate = dimension.getQueryModel().getCubeInfo().getDueDate().getDate();
	}
	if (oFF.isNull(dueDate))
	{
		dueDate = oFF.XDate.create();
	}
	dimension.getHierarchyManagerBase().setInitialHierarchyDueDate(dueDate);
};
oFF.QInAMdHierarchy.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdHierarchy.exportMdHierarchy(exporter, inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdHierarchy.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdHierarchy.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdHierarchy.importMdHierarchy(importer, inaStructure, modelComponent);
	return modelComponent;
};

oFF.QInAMdQuery = function() {};
oFF.QInAMdQuery.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdQuery.prototype._ff_c = "QInAMdQuery";

oFF.QInAMdQuery.collectUsedDimensionsForRendering = function(queryModel, qModelFormat)
{
	let usedDimensions = oFF.XHashSetOfString.create();
	if (qModelFormat === oFF.QModelFormat.INA_METADATA_RENDERING)
	{
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedBySorting(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedByVariables(queryModel, usedDimensions);
		oFF.DimensionUsageAnalyzer2.addDimensionsUsedBySpatialClustering(queryModel, usedDimensions);
	}
	return usedDimensions;
};
oFF.QInAMdQuery.exportDimensions = function(exporter, queryModel, inaStructure)
{
	let inaDimensions = oFF.PrFactory.createList();
	if (exporter.getOriginalMode() === oFF.QModelFormat.INA_METADATA)
	{
		queryModel.getDimensions();
	}
	let dimNames = oFF.XList.createWithList(queryModel.getDimensionNames());
	dimNames.sortByDirection(oFF.XSortDirection.ASCENDING);
	let len = dimNames.size();
	let optimizedExportModeActive = queryModel.isOptimizedExportModeActive();
	let exporterMode = exporter.getMode();
	let usedDimensions = oFF.QInAMdQuery.collectUsedDimensionsForRendering(queryModel, exporterMode);
	let dimensionManagerBase = queryModel.getDimensionManagerBase();
	for (let i = 0; i < len; i++)
	{
		let dimName = dimNames.get(i);
		let dimension = dimensionManagerBase.getDimensionByNameInternal(dimName);
		let dimStruct;
		if (oFF.isNull(dimension))
		{
			if (exporter.getOriginalMode().isTypeOf(oFF.QModelFormat.INA_CLONE))
			{
				dimStruct = oFF.PrFactory.createStructure();
				dimStruct.putString("Name", dimName);
				dimStruct.putBoolean("IsReference", true);
			}
			else
			{
				continue;
			}
		}
		else
		{
			if (optimizedExportModeActive && dimension.isIgnoredOnOptimizedExport())
			{
				continue;
			}
			let axisType = dimension.getAxisType();
			if (exporterMode === oFF.QModelFormat.INA_METADATA_RENDERING && axisType !== oFF.AxisType.ROWS && axisType !== oFF.AxisType.COLUMNS && !usedDimensions.contains(dimension.getName()))
			{
				continue;
			}
			dimStruct = exporter.exportDimension(dimension, null);
		}
		inaDimensions.add(dimStruct);
	}
	inaStructure.put("Dimensions", inaDimensions);
};
oFF.QInAMdQuery.exportInAQueryNode = function(exporter, inaStructure, queryModel)
{
	let capabilities = queryModel.getModelCapabilities();
	let inaQuery = inaStructure.putNewStructure("QueryMd");
	if (exporter.m_mode.containsMetadata() || exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || exporter.m_mode === oFF.QModelFormat.INA_METADATA_CORE || exporter.m_mode === oFF.QModelFormat.INA_METADATA_RENDERING)
	{
		if (capabilities.supportsQueryCurrencyTranslation())
		{
			inaQuery.putString("CurrencyTranslationEnabled", queryModel.getCurrencyTranslationManager().getCurrencyTranslationEnabledType());
		}
		inaQuery.putStringNotNullAndNotEmpty("VirtualRootNode", queryModel.getVirtualRootNodeName());
		if (queryModel.supportsResultVisibility())
		{
			let inaResultStructureFeature = inaQuery.putNewStructure("ResultStructureFeature");
			inaResultStructureFeature.putBoolean("Enabled", queryModel.supportsResultVisibility());
			inaResultStructureFeature.putBoolean("ConditionalVisibility", capabilities.supportsConditionalResultVisibility());
			inaResultStructureFeature.putString("Reordering", oFF.QInAConverter.lookupReorderingInA(capabilities.getResultStructureReorderingCapability()));
			let inaResultAlignment = inaResultStructureFeature.putNewStructure("ResultAlignment");
			let supportedAlignmentLocation = capabilities.getSupportedResultAlignmentLevel();
			inaResultAlignment.putString("ConfigLevel", oFF.QInAConverter.lookupConfigLevelInA(supportedAlignmentLocation));
			let supportedResultAlignments = capabilities.getSupportedResultAlignments();
			if (supportedResultAlignments.hasElements())
			{
				let inaResultAlignments = inaResultAlignment.putNewList("ResultAlignmentList");
				let alignmentSize = supportedResultAlignments.size();
				for (let iResultAlignment = 0; iResultAlignment < alignmentSize; iResultAlignment++)
				{
					inaResultAlignments.addString(oFF.QInAConverter.lookupAlignmentInA(supportedResultAlignments.get(iResultAlignment)));
				}
			}
			let supportsConditionalResults = capabilities.supportsConditionalResults();
			inaResultStructureFeature.putBoolean("ConditionalTotals", supportsConditionalResults);
			if (supportsConditionalResults)
			{
				let inaConditionalTotals = inaResultStructureFeature.putNewList("ConditionalTotalsList");
				let supportedConditionalResults = capabilities.getSupportedConditionalResults();
				let conditionSize = supportedConditionalResults.size();
				for (let iSupportedConditionResults = 0; iSupportedConditionResults < conditionSize; iSupportedConditionResults++)
				{
					let rse = supportedConditionalResults.get(iSupportedConditionResults);
					if (rse === oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS)
					{
						inaConditionalTotals.addString("TotalIncludedMembers");
					}
					else if (rse === oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS)
					{
						inaConditionalTotals.addString("TotalRemainingMembers");
					}
				}
			}
			oFF.QInAMdQuery.exportReturnedDataSelections(inaResultStructureFeature, queryModel.getQueryManager());
		}
	}
	if (queryModel.isSelectorReadModeMasterOnly())
	{
		inaQuery.putBoolean("SelectorReadModeMasterOnly", true);
	}
};
oFF.QInAMdQuery.exportPlanning = function(inaStructure, queryModel)
{
	if (queryModel.supportsDataEntryReadOnly())
	{
		inaStructure.putBoolean("SupportsDataEntryReadOnly", true);
	}
	if (queryModel.isDataEntryEnabled())
	{
		inaStructure.putBoolean("DataEntryEnabled", true);
	}
};
oFF.QInAMdQuery.exportProperties = function(inaStructure, queryModel)
{
	inaStructure.putString("Description", queryModel.getText());
	let metadataProperties = queryModel.getMetadataProperties();
	inaStructure.putString("Type", metadataProperties.getStringByKey("Type"));
	let lastUpdate = metadataProperties.getStringByKey("LastDataUpdateOn");
	if (oFF.isNull(lastUpdate))
	{
		inaStructure.putString("LastDataUpdate", metadataProperties.getStringByKey("LastDataUpdate"));
	}
	else
	{
		inaStructure.putString("LastDataUpdateOn", lastUpdate);
	}
	inaStructure.putString("LastDataUpdateBy", metadataProperties.getStringByKey("LastDataUpdateBy"));
	inaStructure.putString("RepositoryType", metadataProperties.getStringByKey("RepositoryType"));
	inaStructure.putString("CreatedBy", metadataProperties.getStringByKey("CreatedBy"));
	inaStructure.putString("CreatedOn", metadataProperties.getStringByKey("CreatedOn"));
	inaStructure.putString("DueDate", metadataProperties.getStringByKey("DueDate"));
	inaStructure.putStringNotNullAndNotEmpty("SemanticObject", metadataProperties.getStringByKey("SemanticObject"));
	let infoProvider = queryModel.getInfoProvider();
	oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "BaseDataSource", infoProvider);
};
oFF.QInAMdQuery.exportReturnedDataSelections = function(inaResultStructureFeature, queryManager)
{
	if (!queryManager.supportsReturnedDataSelection())
	{
		return;
	}
	let inaReturnedDataSelection = inaResultStructureFeature.putNewStructure("ReturnedDataSelection");
	let allReturnedDataSelections = queryManager.getQueryModel().getAllReturnedDataSelections();
	let keysAsIterator = allReturnedDataSelections.getKeysAsIterator();
	while (keysAsIterator.hasNext())
	{
		let retDataSel = keysAsIterator.next();
		inaReturnedDataSelection.putBoolean(oFF.QInAConverter.lookupReturnedDataSelectionInA(retDataSel), allReturnedDataSelections.getByKey(retDataSel).getBoolean());
	}
};
oFF.QInAMdQuery.exportSupportsFlags = function(inaStructure, queryModel)
{
	if (!queryModel.isExportingEachMeasure())
	{
		inaStructure.putBoolean("ExportingEachMeasure", false);
	}
	if (!queryModel.isExportingFixedFilter())
	{
		inaStructure.putBoolean("ExportingFixedFilter", false);
	}
	if (!queryModel.isExportingVariables())
	{
		inaStructure.putBoolean("ExportingVariables", false);
	}
};
oFF.QInAMdQuery.exportVariants = function(inaStructure, queryModel)
{
	let variants = queryModel.getQueryManager().getVariableVariants();
	if (oFF.XCollectionUtils.hasElements(variants))
	{
		let inaVariants = inaStructure.putNewList("VariableVariants");
		let size = variants.size();
		for (let idx = 0; idx < size; idx++)
		{
			let variant = variants.get(idx);
			let inaVariant = inaVariants.addNewStructure();
			inaVariant.putString("Name", variant.getName());
			inaVariant.putString("Description", variant.getText());
			inaVariant.putString("Scope", variant.getScope().getName());
		}
	}
};
oFF.QInAMdQuery.getDimensionType = function(queryModel, inaDimension)
{
	let inaDimType = inaDimension.getIntegerByKeyExt("DimensionType", 3);
	let dimType = oFF.QInAConverter.lookupDimensionType(inaDimType);
	return dimType;
};
oFF.QInAMdQuery.importActiveVariant = function(inaStructure, queryModel)
{
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	let inaVariant = inaStructure.getStructureByKey("VariableVariant");
	if (oFF.isNull(inaVariant))
	{
		return null;
	}
	return inaVariant.getStringByKey("Name");
};
oFF.QInAMdQuery.importDimension = function(importer, inaDimension, queryModel)
{
	let dimension = importer.importDimension(inaDimension, queryModel);
	let dimensionManagerBase = queryModel.getDimensionManagerBase();
	let dimensionExisting = dimensionManagerBase.getDimensionByNameInternal(inaDimension.getStringByKey("Name"));
	if (oFF.isNull(dimensionExisting))
	{
		queryModel.addDimension(dimension);
	}
	else if (queryModel.getQueryManagerBase().getPreviousVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		let settings = oFF.InAQMgrMergeSettings.create(false);
		dimensionExisting.mergeDeepRecursive(settings, dimension);
		oFF.XObjectExt.release(dimension);
		dimension = dimensionExisting;
	}
	else
	{
		dimensionExisting.setText(dimension.getText());
		dimension = dimensionExisting;
	}
	let defaultAxis = queryModel.getAxis(dimension.getDefaultAxisType());
	defaultAxis.add(dimension);
	dimensionManagerBase.finalizeDimensionMetadataSetup(dimension);
};
oFF.QInAMdQuery.importDimensions = function(importer, inaStructure, queryModel)
{
	let inaDimensions = inaStructure.getListByKey("Dimensions");
	if (oFF.notNull(inaDimensions))
	{
		let supportsLazyLoading = queryModel.supportsDimensionLazyLoad() && (queryModel.getServerBaseSerialization() !== null || queryModel.getMetadata() !== null);
		let dimensionManagerBase = queryModel.getDimensionManagerBase();
		if (supportsLazyLoading)
		{
			let useDesignTimeMetadata = inaStructure.hasStringByKey("MetadataType") && oFF.XString.isEqual(inaStructure.getStringByKey("MetadataType"), "DesignTime");
			dimensionManagerBase.setDimensionLazyLoader(oFF.InADimensionLazyLoader.createLazyLoader(queryModel, useDesignTimeMetadata));
		}
		let len = inaDimensions.size();
		for (let i = 0; i < len; i++)
		{
			let inaDimension = inaDimensions.getStructureAt(i);
			let isReference = inaDimension.getBooleanByKeyExt("IsReference", false);
			if (supportsLazyLoading && (isReference || importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE))
			{
				let axisDefault = oFF.AxisType.lookup(inaDimension.getStringByKey("AxisDefault"));
				if (axisDefault !== oFF.AxisType.COLUMNS && axisDefault !== oFF.AxisType.ROWS && queryModel.getDimensionByNameFromExistingMetadata(inaDimension.getStringByKey("Name")) === null)
				{
					let dimType = oFF.QInAMdQuery.getDimensionType(queryModel, inaDimension);
					dimensionManagerBase.addDimensionReference(inaDimension.getStringByKey("Name"), dimType, oFF.QInAMdQuery.isTechnicalDimension(inaDimension));
					continue;
				}
			}
			oFF.QInAMdQuery.importDimension(importer, inaDimension, queryModel);
		}
	}
};
oFF.QInAMdQuery.importInAQueryNode = function(isMetadataImport, inaStructure, queryModel)
{
	let capabilities = queryModel.getModelCapabilitiesBase();
	let inaQuery = inaStructure.getStructureByKey("QueryMd");
	if (oFF.isNull(inaQuery))
	{
		inaQuery = inaStructure.getStructureByKey("Query");
	}
	if (oFF.notNull(inaQuery))
	{
		if (capabilities.supportsQueryCurrencyTranslation())
		{
			let currencyTranslationEnabledInA = inaQuery.getStringByKey("CurrencyTranslationEnabled");
			let currencyTranslationManagerBase = queryModel.getCurrencyTranslationManagerBase();
			currencyTranslationManagerBase.setCurrencyTranslationEnabledProperty(currencyTranslationEnabledInA);
			if (oFF.XString.isEqual(currencyTranslationEnabledInA, oFF.CurrencyTranslationConstants.NO_CURRENCY))
			{
				currencyTranslationManagerBase.setCurrencyTranslationDetails(null);
			}
		}
		queryModel.setVirtualRootNodeName(inaQuery.getStringByKey("VirtualRootNode"));
		let autoSubmitCompatible = inaQuery.getBooleanByKeyExt("AutoSubmitCompatible", true);
		if (!autoSubmitCompatible)
		{
			queryModel.disableAutoSubmitCompatibility();
		}
		let drillValidation = inaQuery.getBooleanByKeyExt("DrillValidation", false);
		queryModel.getDrillManagerBase().setBackendDrillValidationForAutoSubmit(drillValidation);
		let inaRRI = inaQuery.getStructureByKey("RRI");
		if (oFF.notNull(inaRRI))
		{
			oFF.QInAMdQuery.parseRriMetadata(queryModel, inaRRI);
		}
		else
		{
			queryModel.setHasRriTarget(inaQuery.getBooleanByKeyExt("RRIReceivers", false));
		}
		let inaResultStructureFeature = inaQuery.getStructureByKey("ResultStructureFeature");
		let rc = queryModel.getMdResultStructureControllerBase();
		if (oFF.notNull(inaResultStructureFeature) && inaResultStructureFeature.getBooleanByKeyExt("Enabled", false))
		{
			oFF.QInAOptions.importReturnedDataSelections(isMetadataImport, inaResultStructureFeature, queryModel.getQueryManager());
			rc.setSupportsTotals(true);
			let inaResultAlignment = inaResultStructureFeature.getStructureByKey("ResultAlignment");
			let inaResultAlignmentConfigLevel = inaResultAlignment.getStringByKey("ConfigLevel");
			let supportedAlignmentLocation = oFF.QInAConverter.lookupConfigLevel(inaResultAlignmentConfigLevel);
			capabilities.setSupportedResultAlignmentLevel(supportedAlignmentLocation);
			let inaResultAlignments = inaResultAlignment.getListByKey("ResultAlignmentList");
			capabilities.clearSupportedResultAlignment();
			let alignmentSize = inaResultAlignments.size();
			for (let idxAlignment = 0; idxAlignment < alignmentSize; idxAlignment++)
			{
				let alignment = oFF.QInAConverter.lookupAlignment(inaResultAlignments.getStringAt(idxAlignment));
				capabilities.addSupportedResultAlignment(alignment);
			}
			if (capabilities.getResultStructureReorderingCapability() === oFF.ReorderingCapability.FULL)
			{
				capabilities.addSupportedResultAlignment(oFF.ResultAlignment.STRUCTURE);
			}
			capabilities.setSupportedVisibilityLocation(oFF.QModelLevel.DIMENSIONS);
			capabilities.setSupportsConditionalResultVisibility(inaResultStructureFeature.getBooleanByKeyExt("ConditionalVisibility", false));
			let inaReordering = inaResultStructureFeature.getStringByKeyExt("Reordering", "None");
			capabilities.setResultStructureReorderingCapability(oFF.QInAConverter.lookupReordering(inaReordering));
			let conditionalResultsSupported = inaResultStructureFeature.getBooleanByKeyExt("ConditionalTotals", false);
			capabilities.setSupportsConditionalResult(conditionalResultsSupported);
			if (conditionalResultsSupported)
			{
				let inaConditionalTotals = inaResultStructureFeature.getListByKey("ConditionalTotalsList");
				let conditionSize = inaConditionalTotals.size();
				for (let idxCondition = 0; idxCondition < conditionSize; idxCondition++)
				{
					let inaConditionalTotalResult = inaConditionalTotals.getStringAt(idxCondition);
					if (oFF.XString.isEqual(inaConditionalTotalResult, "TotalIncludedMembers"))
					{
						capabilities.addSupportedConditionalElement(oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS);
					}
					else if (oFF.XString.isEqual(inaConditionalTotalResult, "TotalRemainingMembers"))
					{
						capabilities.addSupportedConditionalElement(oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS);
					}
				}
			}
		}
		else
		{
			rc.setSupportsTotals(false);
			capabilities.setSupportedResultAlignmentLevel(oFF.QModelLevel.NONE);
			capabilities.setSupportedVisibilityLocation(oFF.QModelLevel.NONE);
			capabilities.setSupportsConditionalResultVisibility(false);
			capabilities.setResultStructureReorderingCapability(oFF.ReorderingCapability.NONE);
			capabilities.setSupportsConditionalResult(false);
		}
		queryModel.setSelectorReadModeMasterOnly(inaQuery.getBooleanByKeyExt("SelectorReadModeMasterOnly", false));
	}
};
oFF.QInAMdQuery.importPlanning = function(inaStructure, queryModel)
{
	if (oFF.PrUtils.getBooleanValueProperty(inaStructure, "SupportsDataEntryReadOnly", false))
	{
		queryModel.setSupportsDataEntryReadOnly(true);
	}
	if (oFF.PrUtils.getBooleanValueProperty(inaStructure, "DataEntryEnabled", false))
	{
		queryModel.setDataEntryEnabled(true);
	}
};
oFF.QInAMdQuery.importProperties = function(inaStructure, queryModel)
{
	let description = inaStructure.getStringByKey("Description");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(description))
	{
		queryModel.setText(inaStructure.getStringByKey("Description"));
	}
	let metadataPropertiesBase = queryModel.getMetadataPropertiesBase();
	metadataPropertiesBase.putString("Type", inaStructure.getStringByKey("Type"));
	if (inaStructure.hasStringByKey("LastDataUpdateOn"))
	{
		metadataPropertiesBase.putString("LastDataUpdateOn", inaStructure.getStringByKey("LastDataUpdateOn"));
	}
	else
	{
		metadataPropertiesBase.putString("LastDataUpdate", inaStructure.getStringByKey("LastDataUpdate"));
	}
	metadataPropertiesBase.putString("LastDataUpdateBy", inaStructure.getStringByKey("LastDataUpdateBy"));
	metadataPropertiesBase.putString("CreatedBy", inaStructure.getStringByKey("CreatedBy"));
	metadataPropertiesBase.putString("CreatedOn", inaStructure.getStringByKey("CreatedOn"));
	metadataPropertiesBase.putString("RepositoryType", inaStructure.getStringByKey("RepositoryType"));
	metadataPropertiesBase.putString("DueDate", inaStructure.getStringByKey("DueDate"));
	metadataPropertiesBase.putStringNotNullAndNotEmpty("SemanticObject", inaStructure.getStringByKey("SemanticObject"));
};
oFF.QInAMdQuery.importSupportsFlags = function(importer, inaStructure, queryModel)
{
	queryModel.setExportEachMeasure(inaStructure.getBooleanByKeyExt("ExportingEachMeasure", true));
	queryModel.setExportFixedFilter(inaStructure.getBooleanByKeyExt("ExportingFixedFilter", true));
	queryModel.setExportVariables(inaStructure.getBooleanByKeyExt("ExportingVariables", true));
};
oFF.QInAMdQuery.importVariants = function(inaStructure, queryModel)
{
	if (oFF.isNull(inaStructure))
	{
		return;
	}
	let queryManager = queryModel.getQueryManagerBase();
	if (oFF.isNull(queryManager))
	{
		return;
	}
	let inaVariants = inaStructure.getListByKey("VariableVariants");
	if (oFF.isNull(inaVariants))
	{
		return;
	}
	queryManager.clearVariableVariants();
	let size = inaVariants.size();
	for (let idx = 0; idx < size; idx++)
	{
		let inaVariant = inaVariants.getStructureAt(idx);
		let variant = oFF.QVariableVariant.createVariantWithScopeInternal(queryModel.getDataSource(), inaVariant.getStringByKey("Name"), inaVariant.getStringByKey("Description"), oFF.Scope.lookupByName(inaVariant.getStringByKey("Scope")));
		queryManager.addVariableVariant(variant);
	}
};
oFF.QInAMdQuery.isTechnicalDimension = function(inaDimension)
{
	let axisConstraints = inaDimension.getListByKey("AxisConstraints");
	return oFF.XCollectionUtils.hasElements(axisConstraints) && axisConstraints.size() === 1 && oFF.QInAConverter.lookupAxisType(axisConstraints.getStringAt(0)) === oFF.AxisType.TECHNICAL;
};
oFF.QInAMdQuery.parseRriMetadata = function(queryModel, inaRRI)
{
	let hasStaticTarget = inaRRI.getBooleanByKeyExt("StaticReceivers", false);
	let hasDynamicTarget = inaRRI.getBooleanByKeyExt("DynamicReceivers", false);
	queryModel.setHasStaticRriTarget(hasStaticTarget);
	queryModel.setHasDynamicRriTarget(hasDynamicTarget);
	queryModel.setHasRriTarget(hasStaticTarget || hasDynamicTarget);
	if (hasStaticTarget)
	{
		let inaStaticTargets = inaRRI.getListByKey("Receivers");
		if (oFF.notNull(inaStaticTargets))
		{
			for (let idxTarget = 0; idxTarget < inaStaticTargets.size(); idxTarget++)
			{
				let targetStructure = inaStaticTargets.getStructureAt(idxTarget);
				if (oFF.isNull(targetStructure))
				{
					continue;
				}
				let rriTarget = oFF.QRriTarget.create();
				rriTarget.setParameterValues(targetStructure, false);
				queryModel.addStaticRriTarget(rriTarget);
			}
		}
	}
};
oFF.QInAMdQuery.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let queryModel = modelComponent;
	let isForRendering = exporter.m_mode === oFF.QModelFormat.INA_METADATA_RENDERING;
	oFF.QInAMdQuery.exportSupportsFlags(inaStructure, queryModel);
	if (flags === oFF.QImExFlag.DEFAULT_ALL)
	{
		oFF.QInAMdDataSource.exportMd(exporter, inaStructure, queryModel);
		exporter.exportVariableContainer(queryModel.getVariableManager(), inaStructure);
		oFF.QInAMdQuery.exportVariants(inaStructure, queryModel);
	}
	else if (flags === oFF.QImExFlag.VARIABLES)
	{
		exporter.exportVariableContainer(queryModel.getVariableManager(), inaStructure);
		oFF.QInAMdQuery.exportVariants(inaStructure, queryModel);
	}
	else if (flags === oFF.QImExFlag.DATASOURCE)
	{
		oFF.QInAMdDataSource.exportMd(exporter, inaStructure, queryModel);
	}
	oFF.QInAMdQuery.exportProperties(inaStructure, queryModel);
	if (!isForRendering)
	{
		oFF.QInAMdQuery.exportInAQueryNode(exporter, inaStructure, queryModel);
	}
	oFF.QInAMdQuery.exportDimensions(exporter, queryModel, inaStructure);
	exporter.exportSortingManager(queryModel.getSortingManager(), inaStructure);
	exporter.exportDrillManager(queryModel.getDrillManager(), inaStructure);
	if (!isForRendering)
	{
		exporter.exportExceptionAggregationManager(queryModel._getExceptionAggregationManagerBase(), inaStructure);
		exporter.exportRunningAggregationManager(queryModel.getRunningAggregationManagerBase(), inaStructure);
		exporter.exportUniversalDisplayHierarchies(queryModel.getUniversalDisplayHierarchies(), inaStructure);
		oFF.QInAMdQuery.exportPlanning(inaStructure, queryModel);
	}
	return inaStructure;
};
oFF.QInAMdQuery.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MODEL;
};
oFF.QInAMdQuery.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = modelComponent;
	oFF.QInAMdDataSource.importMd(importer, inaStructure, queryModel, queryModel);
	oFF.QInAMdDocumentsInfo.importMd(importer, inaStructure, queryModel, queryModel);
	let importerMode = importer.getMode();
	if (importerMode === oFF.QModelFormat.INA_METADATA || importerMode === oFF.QModelFormat.INA_METADATA_CORE || importerMode === oFF.QModelFormat.INA_METADATA_RENDERING)
	{
		queryModel.setServerBaseSerialization(importerMode, oFF.QModelOrigin.IMPORTER, inaStructure);
	}
	if (oFF.notNull(inaStructure))
	{
		oFF.QInAMdQuery.importSupportsFlags(importer, inaStructure, queryModel);
		oFF.QInAMdQuery.importProperties(inaStructure, queryModel);
		let isMetadataImport = importer.getOriginalMode() !== oFF.QModelFormat.INA_CLONE;
		oFF.QInAMdQuery.importInAQueryNode(isMetadataImport, inaStructure, queryModel);
		importer.m_cacheKey = oFF.QFactory.createCacheKeyByContext(context);
		oFF.QInAMdQuery.importDimensions(importer, inaStructure, queryModel);
		queryModel.getDimensionManagerBase().finalizeStructures();
		importer.m_cacheKey = oFF.XObjectExt.release(importer.m_cacheKey);
	}
	importer.importSortingManager(inaStructure, queryModel.getSortingManagerBase(), null);
	importer.importVariableManager(inaStructure, queryModel.getVariableManagerBase(), queryModel);
	importer.importDrillManager(inaStructure, queryModel.getDrillManagerBase(), queryModel);
	importer.importExceptionAggregationManager(inaStructure, queryModel._getExceptionAggregationManagerBase(), queryModel);
	importer.importRunningAggregationManager(inaStructure, queryModel.getRunningAggregationManagerBase(), queryModel);
	importer.importUniversalDisplayHierarchies(inaStructure, queryModel.getUniversalDisplayHierarchiesBase(), queryModel);
	oFF.QInAMdQuery.importPlanning(inaStructure, queryModel);
	oFF.QInAMdQuery.importVariants(inaStructure, queryModel);
	return queryModel;
};
oFF.QInAMdQuery.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QueryModel.create(olapEnv, null, oFF.QCapabilities.create());
};

oFF.QInAMdRunningAggregations = function() {};
oFF.QInAMdRunningAggregations.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdRunningAggregations.prototype._ff_c = "QInAMdRunningAggregations";

oFF.QInAMdRunningAggregations.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let runAggrManager = modelComponent;
	if (oFF.notNull(runAggrManager))
	{
		let inaRunAggrs = inaStructure.putNewStructure("RunningAggregations");
		let inaRunAggrSetsList = inaRunAggrs.putNewList("RunningAggregationSets");
		let runAggrSets = runAggrManager.getRunningAggregationSets();
		let runAggrSetsNames = runAggrSets.getKeysAsReadOnlyList();
		for (let i = 0; i < runAggrSetsNames.size(); i++)
		{
			let runAggrSetName = runAggrSetsNames.get(i);
			inaRunAggrSetsList.add(this.exportRunAggrSet(runAggrSetName, runAggrSets.getByKey(runAggrSetName)));
		}
		let inaMeasuresSupportedRunAggrSetList = inaRunAggrs.putNewList("MeasuresSupportedRunningAggregationSet");
		oFF.XStream.of(runAggrManager.getMeasuresSupportedRunningAggregationSet()).forEach((mRunAggrSet) => {
			inaMeasuresSupportedRunAggrSetList.add(this.exportMeasuresSupportedRunAggrSet(mRunAggrSet.getName(), mRunAggrSet.getRunningAggregationSet(), mRunAggrSet.getMeasures()));
		});
	}
	return inaStructure;
};
oFF.QInAMdRunningAggregations.prototype.exportMeasuresSupportedRunAggrSet = function(name, runningAggrSet, measures)
{
	let inaMeasuresSupportedRunAggrSet = oFF.PrFactory.createStructure();
	inaMeasuresSupportedRunAggrSet.putString("Name", name);
	inaMeasuresSupportedRunAggrSet.putString("RunningAggregationSet", runningAggrSet);
	let inaMeasures = inaMeasuresSupportedRunAggrSet.putNewList("Measures");
	for (let i = 0; i < measures.size(); i++)
	{
		inaMeasures.add(oFF.PrFactory.createString(measures.get(i)));
	}
	return inaMeasuresSupportedRunAggrSet;
};
oFF.QInAMdRunningAggregations.prototype.exportRunAggrSet = function(name, operators)
{
	let inaRunAggrSet = oFF.PrFactory.createStructure();
	inaRunAggrSet.putString("Name", name);
	let inaOperators = inaRunAggrSet.putNewList("RunningAggregationSet");
	for (let i = 0; i < operators.size(); i++)
	{
		inaOperators.add(oFF.PrFactory.createString(oFF.QInAConverter.lookupRunningAggregationOperatorInA(operators.get(i))));
	}
	return inaRunAggrSet;
};
oFF.QInAMdRunningAggregations.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.RUNNING_AGGREGATION_MANAGER;
};
oFF.QInAMdRunningAggregations.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let runAggrManager = modelComponent;
	if (oFF.notNull(inaStructure) && oFF.notNull(runAggrManager))
	{
		runAggrManager.clear();
		let inaRunAggrs = inaStructure.getStructureByKey("RunningAggregations");
		if (oFF.notNull(inaRunAggrs))
		{
			let inaRunAggrSets = inaRunAggrs.getListByKey("RunningAggregationSets");
			if (!oFF.PrUtils.isListEmpty(inaRunAggrSets))
			{
				for (let i = 0; i < inaRunAggrSets.size(); i++)
				{
					this.importRunAggrSet(runAggrManager, inaRunAggrSets.getStructureAt(i));
				}
			}
			let inaMeasuresSupportedRunAggrSet = inaRunAggrs.getListByKey("MeasuresSupportedRunningAggregationSet");
			if (!oFF.PrUtils.isListEmpty(inaMeasuresSupportedRunAggrSet))
			{
				for (let j = 0; j < inaMeasuresSupportedRunAggrSet.size(); j++)
				{
					this.importMeasureSupportedRunAggrSet(runAggrManager, inaMeasuresSupportedRunAggrSet.getStructureAt(j));
				}
			}
		}
	}
	return runAggrManager;
};
oFF.QInAMdRunningAggregations.prototype.importMeasureSupportedRunAggrSet = function(manager, setStructure)
{
	let name = setStructure.getStringByKey("Name");
	let runningAggrSet = setStructure.getStringByKey("RunningAggregationSet");
	let measures = oFF.PrUtils.asListOfString(setStructure.getListByKey("Measures"));
	let set = oFF.QMeasuresSupportedRunningAggregationSet.create(manager, name, runningAggrSet, measures);
	manager.addMeasuresSupportedRunAggrSet(set);
};
oFF.QInAMdRunningAggregations.prototype.importRunAggrSet = function(manager, runAggrSet)
{
	let operators = oFF.XStream.ofString(oFF.PrUtils.asListOfString(runAggrSet.getListByKey("RunningAggregationSet"))).map((operatorStr) => {
		return oFF.QInAConverter.lookupRunningAggregationOperator(operatorStr.getString());
	}).collect(oFF.XStreamCollector.toList());
	manager.addRunningAggregationSet(runAggrSet.getStringByKey("Name"), operators);
};

oFF.QInAMdSort = function() {};
oFF.QInAMdSort.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdSort.prototype._ff_c = "QInAMdSort";

oFF.QInAMdSort.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	if (exporter.m_capabilities.supportsExtendedSort())
	{
		let sortManager = modelComponent;
		let modelCapabilities = sortManager.getQueryModel().getModelCapabilities();
		let inaSortTypes = inaStructure.putNewList("ExtendedSortTypes");
		let allSortTypes = oFF.SortType.getAllSortTypes();
		let allSize = allSortTypes.size();
		for (let i = 0; i < allSize; i++)
		{
			let sortType = allSortTypes.get(i);
			if (modelCapabilities.supportsSortType(sortType))
			{
				inaSortTypes.addString(oFF.QInAConverter.lookupSortTypeInA(sortType));
			}
		}
		let inaBreakingGroups = inaStructure.putNewList("SortTypesBreakGrouping");
		for (let j = 0; j < allSize; j++)
		{
			let sortType2 = allSortTypes.get(j);
			if (modelCapabilities.supportsBreakGrouping(sortType2))
			{
				inaBreakingGroups.addString(oFF.QInAConverter.lookupSortTypeInA(sortType2));
			}
		}
	}
	return inaStructure;
};
oFF.QInAMdSort.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SORT_MANAGER;
};
oFF.QInAMdSort.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let sortingManager = modelComponent;
	if (importer.m_capabilities.supportsExtendedSort() && oFF.notNull(inaStructure))
	{
		let sortTypes = inaStructure.getListByKey("ExtendedSortTypes");
		if (oFF.notNull(sortTypes))
		{
			sortingManager.clearSupportedSortType();
			let sortSize = sortTypes.size();
			for (let i = 0; i < sortSize; i++)
			{
				let inaSortType = sortTypes.getStringAt(i);
				let sortType = oFF.QInAConverter.lookupSortType(inaSortType);
				if (oFF.isNull(sortType))
				{
					importer.addWarning(oFF.ErrorCodes.INVALID_PARAMETER, oFF.XStringUtils.concatenate2("Sort type unknown: ", inaSortType));
				}
				else
				{
					sortingManager.addSupportedSortType(sortType);
				}
			}
		}
		let breakingGroups = inaStructure.getListByKey("SortTypesBreakGrouping");
		if (oFF.notNull(breakingGroups))
		{
			let breakingSize = breakingGroups.size();
			for (let j = 0; j < breakingSize; j++)
			{
				let sortType2 = oFF.QInAConverter.lookupSortType(breakingGroups.getStringAt(j));
				sortingManager.addSupportedBreakGrouping(sortType2);
			}
		}
	}
	return sortingManager;
};

oFF.QInAMdUniversalDisplayHierarchies = function() {};
oFF.QInAMdUniversalDisplayHierarchies.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdUniversalDisplayHierarchies.prototype._ff_c = "QInAMdUniversalDisplayHierarchies";

oFF.QInAMdUniversalDisplayHierarchies.assignAxesToHierarchies = function(universalDisplayHierarchies)
{
	let queryModel = universalDisplayHierarchies.getQueryModel();
	let hierarchies = universalDisplayHierarchies.getHierarchies();
	let assignedAxisTypes = oFF.XList.create();
	let size = hierarchies.size();
	for (let i = 0; i < size; i++)
	{
		let udh = hierarchies.get(i);
		if (udh.getHierarchyDedicatedAxis() !== null)
		{
			assignedAxisTypes.add(udh.getHierarchyDedicatedAxis().getType());
			continue;
		}
		let axis = oFF.QInAMdUniversalDisplayHierarchies.getAxisForDimensionList(udh.getDimensionNames(), queryModel);
		if (oFF.notNull(axis) && !assignedAxisTypes.contains(axis.getType()))
		{
			udh.setAxis(axis);
			assignedAxisTypes.add(axis.getType());
		}
	}
	for (let k = 0; k < size; k++)
	{
		let hierarchy = hierarchies.get(k);
		if (hierarchy.getHierarchyDedicatedAxis() === null)
		{
			hierarchy.setAxis(assignedAxisTypes.contains(oFF.AxisType.ROWS) ? queryModel.getColumnsAxis() : queryModel.getRowsAxis());
		}
	}
};
oFF.QInAMdUniversalDisplayHierarchies.getAxisForDimensionList = function(dimensions, queryModel)
{
	if (oFF.notNull(dimensions))
	{
		for (let i = 0; i < dimensions.size(); i++)
		{
			let dimension = queryModel.getDimensionByNameFromExistingMetadata(dimensions.get(i));
			if (oFF.notNull(dimension))
			{
				let axisType = dimension.getAxisType();
				if (axisType === oFF.AxisType.ROWS || axisType === oFF.AxisType.COLUMNS)
				{
					return dimension.getAxis();
				}
			}
		}
	}
	return null;
};
oFF.QInAMdUniversalDisplayHierarchies.importHierarchy = function(universalDisplayHierarchies, hierarchy)
{
	let hierarchyDimensions = hierarchy.getListByKey("DimensionNames");
	let dimensionNames = oFF.PrUtils.asListOfString(hierarchyDimensions);
	let name = hierarchy.getStringByKey("Name");
	let initialDrillLevel = hierarchy.getIntegerByKey("InitialDrillLevel");
	let alignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(hierarchy.getStringByKey("LowerLevelNodeAlignment"));
	let active = hierarchy.getBooleanByKeyExt("Active", false);
	let customDimensions = hierarchy.getBooleanByKeyExt("CustomDimensions", false);
	let udhAttributes = hierarchy.getListByKey("Attributes");
	let udhKeyName = null;
	let attrSize = oFF.XCollectionUtils.size(udhAttributes);
	for (let i = 0; i < attrSize; i++)
	{
		let attribute = udhAttributes.getStructureAt(i);
		if (oFF.XString.isEqual(attribute.getStringByKey("PresentationType"), "UDHKey"))
		{
			udhKeyName = attribute.getStringByKey("Name");
		}
	}
	universalDisplayHierarchies.addHierarchy(name, dimensionNames, initialDrillLevel, alignment, active, null, customDimensions, udhKeyName, false);
};
oFF.QInAMdUniversalDisplayHierarchies.importUdhDimension = function(importer, queryModel, name)
{
	if (!queryModel.getDimensionNames().contains(name))
	{
		let inaDimension = oFF.PrFactory.createStructure();
		inaDimension.putString("Name", name);
		inaDimension.putString("AxisDefault", "Virtual");
		let axisConstraints = inaDimension.putNewList("AxisConstraints");
		axisConstraints.addString("Virtual");
		oFF.QInAMdQuery.importDimension(importer, inaDimension, queryModel);
	}
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return inaStructure;
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES;
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let universalDisplayHierarchies = modelComponent;
	if (oFF.notNull(inaStructure) && importer.m_capabilities.supportsUniversalDisplayHierarchies())
	{
		let udh = inaStructure.getStructureByKey("UniversalDisplayHierarchies");
		if (oFF.notNull(udh))
		{
			let hierarchies = udh.getListByKey("DefinedHierarchies");
			let size = hierarchies.size();
			let queryModel = universalDisplayHierarchies.getQueryModel();
			for (let i = 0; i < size; i++)
			{
				let inaHierarchy = hierarchies.getStructureAt(i);
				oFF.QInAMdUniversalDisplayHierarchies.importHierarchy(universalDisplayHierarchies, inaHierarchy);
				oFF.QInAMdUniversalDisplayHierarchies.importUdhDimension(importer, queryModel, inaHierarchy.getStringByKey("Name"));
			}
		}
	}
	oFF.QInAMdUniversalDisplayHierarchies.assignAxesToHierarchies(universalDisplayHierarchies);
	return universalDisplayHierarchies;
};
oFF.QInAMdUniversalDisplayHierarchies.prototype.newModelComponent = function(application, olapEnv, parentComponent, context)
{
	return oFF.QFactory.createUniversalDisplayHierarchies(context);
};

oFF.QInAMdVarDimMember = function() {};
oFF.QInAMdVarDimMember.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarDimMember.prototype._ff_c = "QInAMdVarDimMember";

oFF.QInAMdVarDimMember.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let memberVariable = modelComponent;
	inaStructure.putString("VariableType", "DimensionMemberVariable");
	let variableType = memberVariable.getVariableType();
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		inaStructure.putString("SemanticType", "HierarchyNameVariable");
	}
	else if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		inaStructure.putString("SemanticType", "HierarchyNodeVariable");
	}
	else
	{
		inaStructure.putString("SemanticType", "DimensionMemberVariable");
	}
	oFF.QInAMdVarMisc.exportMd(exporter, memberVariable, inaStructure);
	inaStructure.putBoolean("SupportsValueHelp", memberVariable.supportsValueHelp());
	inaStructure.putBoolean("HasFunctionalVariables", memberVariable.hasFunctionalValues());
	if (memberVariable.getDimension() !== null)
	{
		let inaDimensionReference = inaStructure.putNewStructure("DimensionReference");
		inaDimensionReference.putString("Name", memberVariable.getDimension().getName());
	}
	oFF.QInAMdVarSelectionCap.exportMd(exporter, inaStructure, memberVariable);
	oFF.QInAMdVarHierInfo.exportMd(inaStructure, memberVariable);
	inaStructure.putBoolean("UsedInFixedFilter", memberVariable.isUsedInFixedFilter());
	inaStructure.putBoolean("UsedInDynamicFilter", memberVariable.isUsedInDynamicFilter());
	let defaultMemberSelection = memberVariable.getDefaultMemberFilter();
	if (oFF.notNull(defaultMemberSelection) && defaultMemberSelection.hasElements())
	{
		let tmp = exporter.m_mode;
		exporter.m_mode = oFF.QModelFormat.INA_DATA;
		let inaVariableValues = inaStructure.putNewStructure("Values");
		let inaSelection = inaVariableValues.putNewStructure("Selection");
		exporter.exportCartesianList(defaultMemberSelection, inaSelection);
		exporter.m_mode = tmp;
	}
	let runtimeReferences = memberVariable.getRuntimeReferences();
	if (oFF.notNull(runtimeReferences))
	{
		let numberOfRuntimeReferences = runtimeReferences.size();
		if (numberOfRuntimeReferences > 0)
		{
			let putNewList = inaStructure.putNewList("RuntimeReferences");
			for (let i = 0; i < numberOfRuntimeReferences; i++)
			{
				putNewList.addString(runtimeReferences.get(i));
			}
		}
	}
	return inaStructure;
};
oFF.QInAMdVarDimMember.prototype.getComponentType = function()
{
	return oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
};
oFF.QInAMdVarDimMember.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let variableContainer = context;
	let variableType = oFF.VariableType.DIMENSION_MEMBER_VARIABLE;
	if (inaStructure.containsKey("isHierarchical"))
	{
		if (inaStructure.getBooleanByKeyExt("isHierarchical", false))
		{
			variableType = oFF.VariableType.HIERARCHY_NODE_VARIABLE;
		}
	}
	else
	{
		let inaSemanticType = oFF.PrUtils.getStringValueProperty(inaStructure, "SemanticType", null);
		if (oFF.notNull(inaSemanticType))
		{
			if (oFF.XString.isEqual(inaSemanticType, "HierarchyNodeVariable"))
			{
				variableType = oFF.VariableType.HIERARCHY_NODE_VARIABLE;
			}
			else if (oFF.XString.isEqual(inaSemanticType, "HierarchyNameVariable"))
			{
				variableType = oFF.VariableType.HIERARCHY_NAME_VARIABLE;
			}
		}
	}
	let memberVariable;
	let name = inaStructure.getStringByKey("Name");
	let variables = variableContainer.getVariables();
	if (variables.containsKey(name))
	{
		memberVariable = variables.getByKey(name);
	}
	else
	{
		if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			memberVariable = oFF.QHierarchyNodeVariable.createHierarchyNodeVariable(context, variableContainer, name, null);
		}
		else if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
		{
			memberVariable = oFF.QHierarchyNameVariable.createDimensionHierarchyVariable(context, variableContainer, name, null);
		}
		else
		{
			memberVariable = oFF.QDimensionMemberVariable.createDimensionMemberVariable(context, variableContainer, name, null);
		}
	}
	oFF.QInAMdVarMisc.importMd(inaStructure, memberVariable);
	memberVariable.setSupportsValueHelp(inaStructure.getBooleanByKeyExt("SupportsValueHelp", true));
	memberVariable.setHasFunctionalValues(inaStructure.getBooleanByKeyExt("HasFunctionalVariables", false));
	let dimension = null;
	let inaDimensionReference = oFF.PrUtils.getStructureProperty(inaStructure, "DimensionReference");
	if (oFF.notNull(inaDimensionReference))
	{
		let dimensionName = inaDimensionReference.getStringByKey("Name");
		if (oFF.notNull(dimensionName))
		{
			let dimensionAccessor = variableContainer.getDimensionAccessor();
			if (oFF.notNull(dimensionAccessor))
			{
				dimension = dimensionAccessor.getDimensionByNameFromExistingMetadata(dimensionName);
			}
		}
	}
	if (oFF.isNull(dimension))
	{
		let isPartialData = variableContainer.getQueryModel() !== null && variableContainer.getQueryModel().isPartialResponse();
		if (!isPartialData)
		{
			let message = oFF.XStringUtils.concatenate3("Error in importing Variables: No dimension specified for variable ", name, " !");
			if (memberVariable.isInputEnabled())
			{
				importer.addError(oFF.ErrorCodes.INVALID_STATE, message);
				return null;
			}
			importer.addInfo(oFF.ErrorCodes.IMPORT_VARIABE_NO_DIMENSION, message);
		}
	}
	else
	{
		memberVariable.setDimension(dimension);
	}
	oFF.QInAMdVarSelectionCap.importMd(importer, inaStructure, memberVariable, context);
	let inaRuntimeReferences = inaStructure.getListByKey("RuntimeReferences");
	if (oFF.notNull(inaRuntimeReferences) && inaRuntimeReferences.size() > 0)
	{
		let numberOfRuntimeReferences = inaRuntimeReferences.size();
		for (let i = 0; i < numberOfRuntimeReferences; i++)
		{
			memberVariable.addRuntimeReferences(inaRuntimeReferences.getStringAt(i));
		}
	}
	oFF.QInAMdVarHierInfo.importMd(importer, inaStructure, memberVariable, context);
	memberVariable.setIsUsedInFixedFilter(inaStructure.getBooleanByKeyExt("UsedInFixedFilter", false));
	memberVariable.setIsUsedInDynamicFilter(inaStructure.getBooleanByKeyExt("UsedInDynamicFilter", false));
	let queryModel = memberVariable.getQueryModel();
	let queryManager = null;
	if (oFF.notNull(queryModel))
	{
		queryManager = queryModel.getQueryManager();
	}
	let inaValues = inaStructure.getStructureByKey("Values");
	if (oFF.notNull(inaValues) && oFF.notNull(queryManager) && queryManager.getLifeCycleState() === oFF.LifeCycleState.STARTING_UP && (memberVariable.isInputEnabled() || queryManager.getQueryServiceConfig().shouldLoadInputDisabledVariableValues()))
	{
		let selectionContainer = oFF.QFactory.createFilterExpression(context, memberVariable);
		let tmp = importer.m_mode;
		importer.m_mode = oFF.QModelFormat.INA_DATA;
		let newSelectionContainer = importer.importFilterExpression(selectionContainer, inaValues, memberVariable, context);
		importer.m_mode = tmp;
		let cProduct = newSelectionContainer.getCartesianProduct();
		if (oFF.notNull(cProduct))
		{
			let cartesianList = cProduct.getCartesianList(memberVariable.getDimension());
			if (oFF.notNull(cartesianList))
			{
				memberVariable.setDefaultMemberFilter(cartesianList.cloneOlapComponent(memberVariable, null));
			}
		}
	}
	return memberVariable;
};

oFF.QInAMdVarFunctional = function() {};
oFF.QInAMdVarFunctional.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarFunctional.prototype._ff_c = "QInAMdVarFunctional";

oFF.QInAMdVarFunctional.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let funcVariable = modelComponent;
	inaStructure.putString("VariableType", "FunctionalVariable");
	inaStructure.putString("Name", funcVariable.getName());
	inaStructure.putString("NameExternal", funcVariable.getNameExternal());
	if (funcVariable.getDimension() !== null)
	{
		let inaDimensionReference = inaStructure.putNewStructure("DimensionReference");
		inaDimensionReference.putString("Name", funcVariable.getDimension().getName());
		oFF.QInAMdVarMisc.exportMd(exporter, funcVariable, inaStructure);
		inaStructure.putBoolean("UserInput", funcVariable.isUserInputRequired());
		inaStructure.putBoolean("MultipleValues", funcVariable.resultsInMultipleValues());
		inaStructure.putString("ReturnType", funcVariable.isInterval() ? "Interval" : "Single");
		let granularity = funcVariable.getGranularity();
		if (granularity !== 0)
		{
			inaStructure.putString("Granularity", oFF.XInteger.convertToString(granularity));
		}
		let parameters = funcVariable.getParameters();
		if (oFF.XCollectionUtils.contains(parameters, (param) => {
			return param.getParameterType() === oFF.FunctionalVariableParameterType.DEFAULT;
		}))
		{
			let inaParameters = inaStructure.putNewList("Parameters");
			oFF.XCollectionUtils.forEach(parameters, (parameter) => {
				let inaParameter = inaParameters.addNewStructure();
				inaParameter.putStringNotNullAndNotEmpty("Name", parameter.getName());
				inaParameter.putStringNotNullAndNotEmpty("Description", parameter.getText());
				let parameterValues = parameter.getParameterValues();
				if (oFF.XCollectionUtils.hasElements(parameterValues))
				{
					let inaParameterValues = inaParameter.putNewList("ParameterValues");
					oFF.XCollectionUtils.forEach(parameterValues, (parameterValue) => {
						let inaParameterValue = inaParameterValues.addNewStructure();
						inaParameterValue.putString("Name", parameterValue.getName());
						inaParameterValue.putStringNotNullAndNotEmpty("Description", parameterValue.getText());
					});
				}
			});
		}
		if (funcVariable.hasResolvedValues())
		{
			let inaResolvedValues = inaStructure.putNewList("ResolvedValues");
			let allResolvedValues = funcVariable.getAllResolvedValues();
			oFF.XCollectionUtils.forEach(allResolvedValues, (resolvedValue) => {
				let inaResolvedValue = inaResolvedValues.addNewStructure();
				let parameterValues = resolvedValue.getParameterValues();
				if (oFF.notNull(parameterValues) && !parameterValues.isEmpty())
				{
					let inaParameterValues = inaResolvedValue.putNewList("Parameters");
					oFF.XCollectionUtils.forEach(parameterValues.getKeysAsReadOnlyList(), (paramName) => {
						let inaParameterValue = inaParameterValues.addNewStructure();
						inaParameterValue.putString("Param", paramName);
						inaParameterValue.putString("Value", parameterValues.getByKey(paramName));
					});
				}
				let inaElements = inaResolvedValue.putNewList("Elements");
				oFF.XCollectionUtils.forEach(resolvedValue.getResolvedValues(), (filterOperation) => {
					let inaFilterOperation = inaElements.addNewStructure();
					inaFilterOperation.putString("Comparison", filterOperation.getComparisonOperator().getName());
					if (filterOperation.getSetSign() === oFF.SetSign.EXCLUDING)
					{
						inaFilterOperation.putBoolean("IsExcluding", true);
					}
					inaFilterOperation.putString("Low", filterOperation.getLow().getString());
					if (filterOperation.getHigh() !== null)
					{
						inaFilterOperation.putStringNotNullAndNotEmpty("High", filterOperation.getHigh().getString());
					}
				});
			});
		}
	}
	return inaStructure;
};
oFF.QInAMdVarFunctional.prototype.getComponentType = function()
{
	return oFF.VariableType.FUNCTIONAL_VARIABLE;
};
oFF.QInAMdVarFunctional.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let variableContainer = context;
	let dimension = null;
	if (inaStructure.containsKey("DimensionReference") && variableContainer.getDimensionAccessor() !== null)
	{
		let dimReference = inaStructure.getByKey("DimensionReference");
		let inaDimName = dimReference.isString() ? dimReference.asString().getString() : dimReference.isStructure() ? dimReference.asStructure().getStringByKey("Name") : null;
		if (oFF.notNull(inaDimName))
		{
			dimension = variableContainer.getDimensionAccessor().getDimensionByNameFromExistingMetadata(inaDimName);
		}
	}
	if (oFF.isNull(dimension))
	{
		return null;
	}
	let variables = variableContainer.getVariables();
	let name = inaStructure.getStringByKey("Name");
	let variable;
	if (variables.containsKey(name))
	{
		variable = variables.getByKey(name);
	}
	else
	{
		variable = oFF.QFunctionalVariable.createFunctionalVariable(context, variableContainer, name, inaStructure.getStringByKey("Description"));
	}
	variable.setNameExternal(inaStructure.getStringByKey("NameExternal"));
	variable.setDimension(dimension);
	oFF.QInAMdVarMisc.importMd(inaStructure, variable);
	variable.setUserInputRequired(inaStructure.getBooleanByKey("UserInput"));
	variable.setResultsInMultipleValues(inaStructure.getBooleanByKey("MultipleValues"));
	variable.setIsInterval(oFF.XString.isEqual(inaStructure.getStringByKey("ReturnType"), "Interval"));
	let granularity = oFF.XInteger.convertFromString(inaStructure.getStringByKeyExt("Granularity", "0"));
	variable.setFiscal(granularity !== 0);
	variable.setGranularity(granularity);
	if (granularity === 1 || granularity === 2 || granularity === 3 || granularity === 4 || granularity === 5)
	{
		let fiscalParameters = oFF.XList.create();
		fiscalParameters.add(oFF.QFunctionalVariableParameter.createParameter("Shift", null, oFF.FunctionalVariableParameterType.SHIFT, null, variable));
		fiscalParameters.add(oFF.QFunctionalVariableParameter.createParameter("ValidDate", null, oFF.FunctionalVariableParameterType.VALID_DATE, null, variable));
		fiscalParameters.add(oFF.QFunctionalVariableParameter.createParameter("YearOffset", null, oFF.FunctionalVariableParameterType.YEAR_OFFSET, null, variable));
		variable.setParameters(fiscalParameters);
	}
	else
	{
		let parameters = oFF.XStream.of(inaStructure.getListByKey("Parameters")).map((inaParameter) => {
			let inaParam = inaParameter.asStructure();
			let paramName = inaParam.getStringByKey("Name");
			let paramText = inaParam.getStringByKey("Description");
			let paramValues = oFF.XStream.of(inaParam.getListByKey("ParameterValues")).map((inaParameterValue) => {
				let inaParamValue = inaParameterValue.asStructure();
				let paramValueName = inaParamValue.getStringByKey("Name");
				let paramValueDescription = inaParamValue.getStringByKey("Description");
				return oFF.XStringUtils.isNotNullAndNotEmpty(paramValueName) ? oFF.XNameTextObject.create(paramValueName, paramValueDescription) : null;
			}).filterNullValues().collect(oFF.XStreamCollector.toList());
			return oFF.QFunctionalVariableParameter.createParameter(paramName, paramText, oFF.FunctionalVariableParameterType.DEFAULT, paramValues, variable);
		}).collect(oFF.XStreamCollector.toList());
		variable.setParameters(parameters);
	}
	if (inaStructure.containsKey("ResolvedValues"))
	{
		let inaResolvedValues = inaStructure.getListByKey("ResolvedValues");
		let inaResolvedValuesSize = inaResolvedValues.size();
		for (let i = 0; i < inaResolvedValuesSize; i++)
		{
			let inaResolvedValue = inaResolvedValues.getStructureAt(i);
			let parameterValues = oFF.XHashMapByString.create();
			let inaParameters = inaResolvedValue.getListByKey("Parameters");
			if (oFF.notNull(inaParameters) && !inaParameters.isEmpty())
			{
				let parametersSize = inaParameters.size();
				for (let j = 0; j < parametersSize; j++)
				{
					let inaParameter = inaParameters.getStructureAt(j);
					if (oFF.notNull(inaParameter))
					{
						let parameterName = inaParameter.getStringByKey("Param");
						let parameterValue = inaParameter.getStringByKey("Value");
						if (oFF.XStringUtils.isNotNullAndNotEmpty(parameterName) && oFF.XStringUtils.isNotNullAndNotEmpty(parameterValue))
						{
							parameterValues.put(parameterName, parameterValue);
						}
					}
				}
			}
			let resolvedValue = oFF.XStream.of(inaResolvedValue.getListByKey("Elements")).map((inaFilterOperation) => {
				let inaFilterOp = inaFilterOperation.asStructure();
				let operator = oFF.QInAConverter.lookupComparison(inaFilterOp.getStringByKeyExt("Comparison", "="));
				let singleValueRange = oFF.QFactory.createFilterOperationWithOperator(variable, null, operator);
				if (inaFilterOp.getBooleanByKeyExt("IsExcluding", false))
				{
					singleValueRange.setSetSign(oFF.SetSign.EXCLUDING);
				}
				else
				{
					singleValueRange.setSetSign(oFF.SetSign.INCLUDING);
				}
				let valueType = variable.getDimension().getFlatKeyField().getValueType();
				singleValueRange.getLow().setValue(oFF.XValueUtil.getValueFromString(inaFilterOp.getStringByKey("Low"), valueType));
				let highValueString = inaFilterOp.getStringByKey("High");
				if (oFF.XStringUtils.isNotNullAndNotEmpty(highValueString))
				{
					singleValueRange.getHigh().setValue(oFF.XValueUtil.getValueFromString(highValueString, valueType));
				}
				return singleValueRange;
			}).collect(oFF.XStreamCollector.toList());
			let resolvedValueObj = oFF.QFunctionalVariableResolvedValue.createResolvedValue(variable.getName(), resolvedValue, parameterValues);
			variable.addResolvedValue(resolvedValueObj);
		}
	}
	return variable;
};

oFF.QInAMdVarHierInfo = function() {};
oFF.QInAMdVarHierInfo.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarHierInfo.prototype._ff_c = "QInAMdVarHierInfo";

oFF.QInAMdVarHierInfo.exportMd = function(inaStructure, variable)
{
	let inaHierarchy = inaStructure.putNewStructure("Hierarchy");
	inaHierarchy.putStringNotNull("BaseDimension", variable.getHierarchyBaseDimension());
	inaHierarchy.putStringNotNull("Name", variable.getHierarchyName());
	inaHierarchy.putStringNotNull("Version", variable.getHierarchyVersion());
	inaHierarchy.putStringNotNull("DueDate", variable.getHierarchyKeyDate());
	let variableType = variable.getVariableType();
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		let hierarchyNameDimension = variable.getHierarchyNameDimension();
		oFF.QInAExportUtil.setNameIfNotNull(inaStructure, "HierarchyBaseDimension", hierarchyNameDimension);
	}
};
oFF.QInAMdVarHierInfo.importMd = function(importer, inaStructure, variable, context)
{
	variable.setHierarchyName(null);
	variable.setHierarchyVersion(null);
	variable.setHierarchyKeyDate(null);
	variable.setHierarchyBaseDimension(null);
	let inaHierarchy = oFF.PrUtils.getStructureProperty(inaStructure, "Hierarchy");
	if (oFF.notNull(inaHierarchy))
	{
		variable.setHierarchyBaseDimension(inaHierarchy.getStringByKey("BaseDimension"));
		variable.setHierarchyName(inaHierarchy.getStringByKey("Name"));
		variable.setHierarchyVersion(inaHierarchy.getStringByKey("Version"));
		let date = inaHierarchy.getStringByKey("DueDate");
		if (oFF.isNull(date))
		{
			date = inaHierarchy.getStringByKey("DateTo");
		}
		variable.setHierarchyKeyDate(date);
	}
	let variableName = variable.getName();
	let variableType = variable.getVariableType();
	let variableContainer = variable.getVariableContext();
	let dimensionAccessor = variableContainer.getDimensionAccessor();
	let queryManager = variableContainer.getQueryManager();
	if (oFF.notNull(queryManager) && queryManager.getModelCapabilities().supportsAutoVariableSubmit())
	{
		let runtimeReferences = variable.getRuntimeReferences();
		for (let k = 0; k < runtimeReferences.size(); k++)
		{
			let dim = dimensionAccessor.getDimensionByName(runtimeReferences.get(k));
			if (oFF.isNull(dim))
			{
				continue;
			}
			if (oFF.XString.isEqual(variableName, dim.getHierarchyNameVariableName()) || oFF.XString.isEqual(variableName, dim.getHierarchyDueDateVariableName()) || oFF.XString.isEqual(variableName, dim.getHierarchyVersionVariableName()))
			{
				variable.setIsHierarchyInfoVariable(true);
			}
		}
	}
	if (variableType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		let dimensionHierarchyVariable = variable;
		let hierarchyBaseDimName = inaStructure.getStringByKey("HierarchyBaseDimension");
		if (oFF.isNull(hierarchyBaseDimName))
		{
			hierarchyBaseDimName = inaStructure.getStringByKey("HierachyBaseDimension");
		}
		if (oFF.notNull(hierarchyBaseDimName))
		{
			let hierarchyDimension = dimensionAccessor.getDimensionByNameFromExistingMetadata(hierarchyBaseDimName);
			dimensionHierarchyVariable.setHierarchyNameDimension(hierarchyDimension);
		}
	}
	else if (variableType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		let variableMode = variableContainer.getVariableMode();
		if (variableMode === oFF.VariableMode.DIRECT_VALUE_TRANSFER)
		{
			let hierarchyName = variable.getHierarchyName();
			let dimension = variable.getDimension();
			if (oFF.notNull(hierarchyName) && oFF.notNull(dimension))
			{
				let hierarchy = oFF.QHierarchy.create(context, dimension, hierarchyName);
				let hierarchyVersion = variable.getHierarchyVersion();
				hierarchy.setHierarchyVersion(hierarchyVersion);
				let hierarchyKeyDate = variable.getHierarchyKeyDate();
				if (!oFF.XString.isEqual(hierarchyKeyDate, ""))
				{
					let dueDate = oFF.XDate.createDateFromStringWithFlag(hierarchyKeyDate, importer.m_capabilities.supportsSapDate());
					if (oFF.notNull(dueDate))
					{
						hierarchy.setHierarchyDueDate(dueDate);
					}
					dimension.setHierarchy(hierarchy);
				}
			}
		}
	}
};
oFF.QInAMdVarHierInfo.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdVarHierInfo.exportMd(inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdVarHierInfo.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdVarHierInfo.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdVarHierInfo.importMd(importer, inaStructure, modelComponent, context);
	return modelComponent;
};

oFF.QInAMdVarMisc = function() {};
oFF.QInAMdVarMisc.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarMisc.prototype._ff_c = "QInAMdVarMisc";

oFF.QInAMdVarMisc.exportMd = function(exporter, variable, inaStructure)
{
	inaStructure.putString("Name", variable.getName());
	inaStructure.putString("Description", variable.getText());
	inaStructure.putBoolean("InputEnabled", variable.isInputEnabled());
	inaStructure.putString("NameExternal", variable.getNameExternal());
	inaStructure.putBoolean("CustomVariable", variable.isCustomVariable());
	inaStructure.putStringNotNull("ProcessingType", oFF.QInAConverter.lookupProcessingTypeIna(variable.getProcessingType()));
	if (variable.isDynamicVariable())
	{
		inaStructure.putBoolean("IsDynamicValue", variable.isDynamicVariable());
	}
	if (variable.isMandatory())
	{
		if (variable.isInitialValueAllowed())
		{
			inaStructure.putString("InputType", "Mandatory");
		}
		else
		{
			inaStructure.putString("InputType", "MandatoryNotInitial");
		}
	}
	else
	{
		if (variable.isInitialValueAllowed())
		{
			inaStructure.putString("InputType", "Optional");
		}
		else
		{
			exporter.addError(oFF.ErrorCodes.INVALID_STATE, "illegal combination: optional variables must support initial values");
		}
	}
	inaStructure.putInteger("ScreenOrder", variable.getVariableOrder());
	let dependentVariables = variable.getDependentVariablesNames();
	if (oFF.XCollectionUtils.hasElements(dependentVariables))
	{
		let inaDependentVariables = inaStructure.putNewList("DependentOfVariable");
		inaDependentVariables.addAllStrings(dependentVariables);
	}
	let variableBase = variable;
	if (variableBase.isInputEnabledAndExitProvidedInMd())
	{
		inaStructure.putBoolean("IsInputEnabledAndExit", variable.isEnforcedDynamicValue());
	}
	if (variable.isRRIAffectedComponent())
	{
		inaStructure.putBoolean("IsRRI", true);
	}
};
oFF.QInAMdVarMisc.importMd = function(inaStructure, variable)
{
	if (oFF.notNull(variable))
	{
		variable.setText(inaStructure.getStringByKey("Description"));
		let inaInputEnabled = inaStructure.getBooleanByKeyExt("InputEnabled", false);
		variable.setInputEnabled(inaInputEnabled);
		variable.setNameExternal(inaStructure.getStringByKey("NameExternal"));
		variable.setCustomVariable(inaStructure.getBooleanByKey("CustomVariable"));
		variable.setProcessingType(oFF.QInAConverter.lookupProcessingType(inaStructure.getStringByKey("ProcessingType")));
		let inaInputType = inaStructure.getStringByKeyExt("InputType", "Optional");
		if (oFF.XString.isEqual(inaInputType, "Optional"))
		{
			variable.setMandatory(false);
			variable.setInitialValueAllowed(true);
		}
		else if (oFF.XString.isEqual(inaInputType, "Mandatory"))
		{
			variable.setMandatory(true);
			variable.setInitialValueAllowed(true);
		}
		else if (oFF.XString.isEqual(inaInputType, "MandatoryNotInitial"))
		{
			variable.setMandatory(true);
			variable.setInitialValueAllowed(false);
		}
		variable.setIsDynamicVariable(inaStructure.getBooleanByKeyExt("IsDynamicValue", false));
		let screenOrder = inaStructure.getIntegerByKeyExt("ScreenOrder", 0);
		variable.setVariableOrder(screenOrder);
		let inaDependentVariables = inaStructure.getListByKey("DependentOfVariable");
		if (!oFF.PrUtils.isListEmpty(inaDependentVariables))
		{
			let dependentSize = inaDependentVariables.size();
			for (let i = 0; i < dependentSize; i++)
			{
				variable.addDependentVariableName(inaDependentVariables.getStringAt(i));
			}
		}
		if (inaStructure.containsKey("IsInputEnabledAndExit"))
		{
			variable.setIsInputEnabledAndExit(inaStructure.getBooleanByKey("IsInputEnabledAndExit"));
		}
		variable.setRRIAffectedComponent(inaStructure.getBooleanByKeyExt("IsRRI", false));
	}
};
oFF.QInAMdVarMisc.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdVarMisc.exportMd(exporter, modelComponent, inaStructure);
	return inaStructure;
};
oFF.QInAMdVarMisc.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdVarMisc.prototype.importComponentWithStructure = oFF.noSupport;

oFF.QInAMdVarOptionList = function() {};
oFF.QInAMdVarOptionList.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarOptionList.prototype._ff_c = "QInAMdVarOptionList";

oFF.QInAMdVarOptionList.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variable = modelComponent;
	inaStructure.putString("VariableType", "OptionListVariable");
	let variableType = variable.getVariableType();
	if (variableType === oFF.VariableType.HIERARCHY_VARIABLE)
	{
		inaStructure.putString("SemanticType", "HierarchyVariable");
	}
	else
	{
		inaStructure.putString("SemanticType", "OptionListVariable");
	}
	oFF.QInAMdVarMisc.exportMd(exporter, variable, inaStructure);
	inaStructure.putBoolean("MultipleValues", variable.supportsMultipleValues());
	let options = variable.getOptions();
	let inaOptionList = inaStructure.putNewList("Options");
	let len = options.size();
	for (let i = 0; i < len; i++)
	{
		let option = options.get(i);
		let inaOption = inaOptionList.addNewStructure();
		inaOption.putString("Name", option.getName());
		inaOption.putString("Description", option.getText());
	}
	return inaStructure;
};
oFF.QInAMdVarOptionList.prototype.getComponentType = function()
{
	return oFF.VariableType.OPTION_LIST_VARIABLE;
};
oFF.QInAMdVarOptionList.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let variableContainer = context.getVariableContainer();
	let name = inaStructure.getStringByKey("Name");
	let variables = variableContainer.getVariables();
	let optionListVariable;
	if (variables.containsKey(name))
	{
		let variable = variables.getByKey(name);
		optionListVariable = variable;
	}
	else
	{
		let inaSemanticType = oFF.PrUtils.getStringValueProperty(inaStructure, "SemanticType", null);
		let hasMultipleValues = inaStructure.getBooleanByKeyExt("MultipleValues", false);
		if (oFF.XString.isEqual("HierarchyVariable", inaSemanticType))
		{
			optionListVariable = oFF.QSimpleTypeVariable.createHierarchyVariable(context, variableContainer, name, null, hasMultipleValues);
		}
		else
		{
			optionListVariable = oFF.QSimpleTypeVariable.createOptionListVariable(context, variableContainer, name, null, hasMultipleValues);
		}
	}
	oFF.QInAMdVarMisc.importMd(inaStructure, optionListVariable);
	optionListVariable.clearOptions();
	let inaOptionList = inaStructure.getListByKey("Options");
	if (!oFF.PrUtils.isListEmpty(inaOptionList))
	{
		let len = inaOptionList.size();
		for (let i = 0; i < len; i++)
		{
			let inaOption = inaOptionList.getStructureAt(i);
			let inaOptionName = inaOption.getStringByKey("Name");
			let inaOptionDescription = inaOption.getStringByKey("Description");
			optionListVariable.createAndAddOption(inaOptionName, inaOptionDescription);
		}
	}
	return optionListVariable;
};

oFF.QInAMdVarSelectionCap = function() {};
oFF.QInAMdVarSelectionCap.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarSelectionCap.prototype._ff_c = "QInAMdVarSelectionCap";

oFF.QInAMdVarSelectionCap.exportMd = function(exporter, inaStructure, memberVariable)
{
	let selectionCapability = memberVariable.getFilterCapability();
	oFF.QInAMdFilterCapability.exportMd(exporter, selectionCapability, inaStructure, memberVariable.getQueryModel());
	let selectionCapabilities = memberVariable.getFilterCapabilities();
	if (oFF.notNull(selectionCapabilities))
	{
		inaStructure.putBoolean("MultipleValues", selectionCapabilities.supportsMultipleValues());
	}
};
oFF.QInAMdVarSelectionCap.importMd = function(importer, inaStructure, memberVariable, context)
{
	let variableField = null;
	let dimension = memberVariable.getDimension();
	if (oFF.notNull(dimension))
	{
		let inaValues = inaStructure.getStructureByKey("Values");
		if (oFF.notNull(inaValues))
		{
			let inaSelection = inaValues.getStructureByKey("Selection");
			if (oFF.notNull(inaSelection))
			{
				let inaSetOperand = inaSelection.getStructureByKey("SetOperand");
				if (oFF.notNull(inaSetOperand))
				{
					variableField = dimension.getFieldByName(inaSetOperand.getStringByKey("FieldName"));
				}
			}
		}
	}
	let definedSelectionCapability = oFF.QInAMdFilterCapability.importMd(importer, inaStructure, variableField, memberVariable, context);
	if (oFF.notNull(definedSelectionCapability) && importer.isAbap(memberVariable) && importer.getSession().hasFeature(oFF.FeatureToggleOlap.SINGLE_VALUE_VARIABLES_ONLY_INCLUDE))
	{
		if (definedSelectionCapability.getGroup() === oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE)
		{
			definedSelectionCapability.setGroup(oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE_INCLUDE_ONLY);
		}
	}
	memberVariable.setFilterCapability(definedSelectionCapability);
	let variableSelectionCapabilities = oFF.QFilterCapabilityList.createFilterCapabilitiesForVariable(context, memberVariable);
	memberVariable.setFilterCapabilities(variableSelectionCapabilities);
	let supportsMultipleValues = oFF.PrUtils.getBooleanValueProperty(inaStructure, "MultipleValues", false);
	variableSelectionCapabilities.setSupportsMultipleValues(supportsMultipleValues);
	oFF.QInAMdVarSelectionCap.mergeCapabilities(dimension, definedSelectionCapability, variableSelectionCapabilities);
};
oFF.QInAMdVarSelectionCap.mergeCapabilities = function(dimension, definedSelectionCapability, variableSelectionCapabilities)
{
	if (oFF.notNull(dimension) && oFF.notNull(definedSelectionCapability))
	{
		let dimFilterCapabilities = dimension.getFilterCapabilities();
		let dimFilterableFields = dimFilterCapabilities.getSelectableFieldNames();
		let fieldSize = dimFilterableFields.size();
		for (let i = 0; i < fieldSize; i++)
		{
			let fieldName = dimFilterableFields.get(i);
			let dimFilterCapability = dimFilterCapabilities.getFilterCapabilitiesByFieldName(fieldName);
			if (dimFilterCapability.supportsSetSign(oFF.SetSign.INCLUDING))
			{
				let newVariableCapability = variableSelectionCapabilities.createAndAddFilterCapabilitiesForFieldName(fieldName);
				oFF.QInAMdVarSelectionCap.mergeOperators(oFF.SetSign.INCLUDING, newVariableCapability, dimFilterCapability, definedSelectionCapability);
				if (dimFilterCapability.supportsSetSign(oFF.SetSign.EXCLUDING))
				{
					oFF.QInAMdVarSelectionCap.mergeOperators(oFF.SetSign.EXCLUDING, newVariableCapability, dimFilterCapability, definedSelectionCapability);
				}
			}
		}
	}
};
oFF.QInAMdVarSelectionCap.mergeOperators = function(setSign, newVariableCapability, dimFilterCapability, definedSelectionCapability)
{
	if (oFF.notNull(definedSelectionCapability))
	{
		if (definedSelectionCapability.supportsSetSign(setSign))
		{
			newVariableCapability.addSupportedSetSign(setSign);
			let newIncludingOperators = newVariableCapability.getModifiableSupportedComparisonOperators(setSign);
			let includingsByField = dimFilterCapability.getSupportedComparisonOperators(setSign);
			let includingsVariable = definedSelectionCapability.getSupportedComparisonOperators(setSign);
			let size = includingsVariable.size();
			for (let j = 0; j < size; j++)
			{
				let comparionsOperator = includingsVariable.get(j);
				if (includingsByField.contains(comparionsOperator))
				{
					newIncludingOperators.add(comparionsOperator);
				}
			}
		}
	}
};
oFF.QInAMdVarSelectionCap.prototype.exportComponent = function(exporter, modelComponent, inaParentStructure, flags)
{
	return this.exportComponentWithStructure(exporter, modelComponent, oFF.isNull(inaParentStructure) ? oFF.PrFactory.createStructure() : inaParentStructure, flags);
};
oFF.QInAMdVarSelectionCap.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	oFF.QInAMdVarSelectionCap.exportMd(exporter, inaStructure, modelComponent);
	return inaStructure;
};
oFF.QInAMdVarSelectionCap.prototype.getComponentType = function()
{
	return null;
};
oFF.QInAMdVarSelectionCap.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	oFF.QInAMdVarSelectionCap.importMd(importer, inaStructure, modelComponent, context);
	return modelComponent;
};

oFF.QInAMdVarSimpleType = function() {};
oFF.QInAMdVarSimpleType.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVarSimpleType.prototype._ff_c = "QInAMdVarSimpleType";

oFF.QInAMdVarSimpleType.exportMd = function(exporter, variable, inaStructure)
{
	inaStructure.putString("VariableType", "SimpleTypeVariable");
	let variableType = variable.getVariableType();
	if (variableType === oFF.VariableType.FORMULA_VARIABLE)
	{
		inaStructure.putString("SemanticType", "FormulaVariable");
	}
	else if (variableType === oFF.VariableType.TEXT_VARIABLE)
	{
		inaStructure.putString("SemanticType", "TextVariable");
	}
	else
	{
		inaStructure.putString("SemanticType", "ValueVariable");
		let valueType = variable.getValueType();
		inaStructure.putString("ValueType", oFF.QInAConverter.lookupValueTypeInA(valueType));
	}
	oFF.QInAMdVarMisc.exportMd(exporter, variable, inaStructure);
	inaStructure.putInteger("Scale", variable.getValueScale());
	inaStructure.putInteger("Length", variable.getValueLength());
	inaStructure.putBoolean("MultipleValues", variable.supportsMultipleValues());
	return inaStructure;
};
oFF.QInAMdVarSimpleType.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	return oFF.QInAMdVarSimpleType.exportMd(exporter, modelComponent, inaStructure);
};
oFF.QInAMdVarSimpleType.prototype.getComponentType = function()
{
	return oFF.VariableType.SIMPLE_TYPE_VARIABLE;
};
oFF.QInAMdVarSimpleType.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let variableContainer = context;
	let simpleTypeVariable = null;
	let name = oFF.PrUtils.getStringValueProperty(inaStructure, "Name", null);
	if (oFF.notNull(name))
	{
		let variables = variableContainer.getVariables();
		if (variables.containsKey(name))
		{
			simpleTypeVariable = variables.getByKey(name);
		}
		else
		{
			let inaSemanticType = oFF.PrUtils.getStringValueProperty(inaStructure, "SemanticType", null);
			let hasMultipleValues = inaStructure.getBooleanByKeyExt("MultipleValues", false);
			if (oFF.XString.isEqual("FormulaVariable", inaSemanticType))
			{
				simpleTypeVariable = oFF.QSimpleTypeVariable.createFormulaVariable(context, variableContainer, name, null, hasMultipleValues);
			}
			else if (oFF.XString.isEqual("TextVariable", inaSemanticType))
			{
				simpleTypeVariable = oFF.QSimpleTypeVariable.createTextVariable(context, variableContainer, name, null, hasMultipleValues);
			}
			else
			{
				let inaValueType = oFF.PrUtils.getStringValueProperty(inaStructure, "ValueType", null);
				let valueType = oFF.QInAConverter.lookupValueType(inaValueType);
				simpleTypeVariable = oFF.QSimpleTypeVariable.createSimpleTypeVariable(context, variableContainer, valueType, name, null, hasMultipleValues);
			}
		}
		oFF.QInAMdVarMisc.importMd(inaStructure, simpleTypeVariable);
		let inaScale = inaStructure.getIntegerByKeyExt("Scale", -1);
		if (inaScale !== -1)
		{
			simpleTypeVariable.setValueScale(inaScale);
		}
		let inaLength = inaStructure.getIntegerByKeyExt("Length", -1);
		if (inaLength !== -1)
		{
			simpleTypeVariable.setValueLength(inaLength);
		}
		let inaSimpleValues = inaStructure.getListByKey("SimpleNumericValues");
		if (oFF.isNull(inaSimpleValues))
		{
			inaSimpleValues = inaStructure.getListByKey("SimpleStringValues");
		}
		let valueList = oFF.QInAValueUtils.importValueList(importer, inaSimpleValues, simpleTypeVariable.getValueType());
		if (simpleTypeVariable.supportsMultipleValues() || valueList.size() <= 1)
		{
			simpleTypeVariable.setDefaultValues(valueList);
		}
	}
	return simpleTypeVariable;
};

oFF.QInAMdVariable = function() {};
oFF.QInAMdVariable.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVariable.prototype._ff_c = "QInAMdVariable";

oFF.QInAMdVariable.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let variable = modelComponent;
	let variableType = variable.getVariableType();
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		return exporter.exportDimensionMemberVariable(variable, inaStructure);
	}
	else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		oFF.QInAMdVarSimpleType.exportMd(exporter, variable, inaStructure);
	}
	else if (variableType.isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
	{
		exporter.exportOptionListVariable(variable, inaStructure);
	}
	else
	{
		exporter.addError(0, oFF.XStringUtils.concatenate2("Variable type not supported: ", variableType.getName()));
	}
	return inaStructure;
};
oFF.QInAMdVariable.prototype.getComponentType = function()
{
	return oFF.VariableType.ANY_VARIABLE;
};
oFF.QInAMdVariable.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let variableContext = parentComponent;
	let inaVariableType = oFF.PrUtils.getStringValueProperty(inaStructure, "VariableType", null);
	let variable;
	if (oFF.XString.isEqual("DimensionMemberVariable", inaVariableType))
	{
		variable = importer.importDimensionMemberVariable(inaStructure, null, variableContext);
	}
	else if (oFF.XString.isEqual("OptionListVariable", inaVariableType))
	{
		variable = importer.importOptionListVariable(inaStructure, null, variableContext);
	}
	else if (oFF.XString.isEqual("SimpleTypeVariable", inaVariableType))
	{
		variable = importer.importSimpleTypeVariable(inaStructure, null, variableContext);
	}
	else if (oFF.XString.isEqual("FunctionalVariable", inaVariableType))
	{
		variable = importer.importFunctionalVariable(inaStructure, null, variableContext);
	}
	else
	{
		importer.addError(0, oFF.XStringUtils.concatenate2("Variable type not supported: ", inaVariableType));
		return null;
	}
	return variable;
};

oFF.QInAMdVariableContainer = function() {};
oFF.QInAMdVariableContainer.prototype = new oFF.QInAComponentMetadata();
oFF.QInAMdVariableContainer.prototype._ff_c = "QInAMdVariableContainer";

oFF.QInAMdVariableContainer.resolveVariableDependencies = function(variableContainer)
{
	let variables = variableContainer.getVariables();
	let variableSize = variables.size();
	for (let i = 0; i < variableSize; i++)
	{
		let variable = variables.get(i);
		let dependentVariablesNames = variable.getDependentVariablesNames();
		let dependentSize = dependentVariablesNames.size();
		for (let j = 0; j < dependentSize; j++)
		{
			let otherVariable = variables.getByKey(dependentVariablesNames.get(j));
			variable.addDependentVariable(otherVariable);
		}
	}
};
oFF.QInAMdVariableContainer.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let varMgr = modelComponent;
	let inaList = inaStructure.putNewList("VariablesMd");
	let variables = varMgr.getVariables();
	let variableSize = variables.size();
	for (let i = 0; i < variableSize; i++)
	{
		inaList.add(exporter.exportVariable(variables.get(i), null));
	}
	return inaStructure;
};
oFF.QInAMdVariableContainer.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.VARIABLE_CONTAINER;
};
oFF.QInAMdVariableContainer.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	if (oFF.notNull(inaStructure))
	{
		let variableContainer = modelComponent;
		let inaList = inaStructure.getListByKey("VariablesMd");
		if (oFF.isNull(inaList))
		{
			inaList = inaStructure.getListByKey("Variables");
		}
		this.importVariableList(importer, inaList, variableContainer);
	}
	return modelComponent;
};
oFF.QInAMdVariableContainer.prototype.importVariableList = function(importer, inaElement, modelComponent)
{
	let variableContainer = modelComponent;
	let inaVariablesList = inaElement;
	if (oFF.notNull(inaVariablesList))
	{
		let variables = variableContainer.getVariables();
		let variableSize = inaVariablesList.size();
		for (let i = 0; i < variableSize; i++)
		{
			let inaStructure = oFF.PrUtils.getStructureElement(inaVariablesList, i);
			if (oFF.notNull(inaStructure))
			{
				let variable = importer.importVariable(inaStructure, variableContainer);
				if (oFF.notNull(variable) && !variables.contains(variable))
				{
					variableContainer.addVariable(variable);
				}
			}
		}
		oFF.QInAMdVariableContainer.resolveVariableDependencies(variableContainer);
	}
};

oFF.QInACalculatedDimension = function() {};
oFF.QInACalculatedDimension.prototype = new oFF.QInADimension();
oFF.QInACalculatedDimension.prototype._ff_c = "QInACalculatedDimension";

oFF.QInACalculatedDimension.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	if (dimension.isHidden())
	{
		return null;
	}
	inaStructure.putString("Name", dimension.getName());
	let type = exporter.m_mode === oFF.QModelFormat.INA_VALUE_HELP ? oFF.AxisType.ROWS : dimension.getAxisType();
	inaStructure.putString("Axis", oFF.QInAConverter.lookupAxisTypeInA(type));
	let topEntries = dimension.getTopEntries();
	if (topEntries > 0)
	{
		inaStructure.putInteger("Top", topEntries);
	}
	let skipEntries = dimension.getSkipEntries();
	if (skipEntries > 0)
	{
		inaStructure.putInteger("Skip", skipEntries);
	}
	let inaDataSource = inaStructure.putNewStructure("DataSource");
	inaDataSource.putString("ObjectName", dimension.getPreQueryName());
	inaDataSource.putString("Type", "Query");
	inaStructure.putString("JoinType", dimension.getJoinType().getName());
	let inaJoinFields = inaStructure.putNewList("JoinFields");
	let joinFields = dimension.getJoinFields();
	let size = joinFields.size();
	let i;
	for (i = 0; i < size; i++)
	{
		let fieldNamePair = joinFields.get(i);
		let inaJoinField = inaJoinFields.addNewStructure();
		inaJoinField.putString("JoinFieldName", fieldNamePair.getLocaleFieldName());
		inaJoinField.putString("JoinFieldNameInReferencedData", fieldNamePair.getReferencedFieldName());
	}
	let inaFieldMappings = inaStructure.putNewList("FieldMappings");
	let fieldMappings = dimension.getFieldMappings();
	let fieldMappingsReordered = oFF.XList.create();
	size = fieldMappings.size();
	for (i = 0; i < size; i++)
	{
		let fieldMappingOriginal = fieldMappings.get(i);
		if (oFF.XString.isEqual(dimension.getKeyField().getName(), fieldMappingOriginal.getLocaleFieldName()))
		{
			fieldMappingsReordered.insert(0, fieldMappingOriginal);
		}
		else
		{
			fieldMappingsReordered.add(fieldMappingOriginal);
		}
	}
	for (i = 0; i < size; i++)
	{
		let fieldMapping = fieldMappingsReordered.get(i);
		let inaFieldMapping = inaFieldMappings.addNewStructure();
		inaFieldMapping.putString("FieldName", fieldMapping.getLocaleFieldName());
		inaFieldMapping.putString("FieldNameInReferencedData", fieldMapping.getReferencedFieldName());
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			let localFieldName = fieldMapping.getLocaleFieldName();
			if (dimension.getFieldByName(localFieldName).getValueType() !== oFF.XValueType.STRING)
			{
				let inaValueType = oFF.QInAConverter.lookupValueTypeInA(dimension.getFieldByName(localFieldName).getValueType());
				inaFieldMapping.putString("CalculatedDimensionFieldValueType", inaValueType);
			}
		}
	}
	oFF.QInADimension.exportFieldLayout(exporter, inaStructure, dimension);
	exporter.exportTotals(dimension, inaStructure);
	return inaStructure;
};
oFF.QInACalculatedDimension.prototype.getComponentType = function()
{
	return oFF.DimensionType.CALCULATED_DIMENSION;
};
oFF.QInACalculatedDimension.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let queryModel = context.getQueryModel();
	let dimension = modelComponent;
	let calcDimName = inaStructure.getStringByKey("Name");
	if (oFF.isNull(dimension) && oFF.notNull(queryModel))
	{
		dimension = queryModel.getDimensionManagerBase().getDimensionByNameInternal(calcDimName);
	}
	if (oFF.isNull(dimension))
	{
		dimension = oFF.QCalculatedDimension._createCalculatedDimension(context, parentComponent, calcDimName);
	}
	dimension.setDimensionType(oFF.DimensionType.CALCULATED_DIMENSION);
	dimension.setName(calcDimName);
	dimension.setTopEntries(inaStructure.getIntegerByKeyExt("Top", 0));
	dimension.setSkipEntries(inaStructure.getIntegerByKeyExt("Skip", 0));
	let inaDataSource = inaStructure.getStructureByKey("DataSource");
	dimension.setPreQueryName(inaDataSource.getStringByKey("ObjectName"));
	dimension.setJoinType(oFF.JoinType.lookup(inaStructure.getStringByKey("JoinType")));
	let inaJoinFields = inaStructure.getListByKey("JoinFields");
	let size = inaJoinFields.size();
	let idx;
	for (idx = 0; idx < size; idx++)
	{
		let inaJoinField = inaJoinFields.getStructureAt(idx);
		dimension.addJoinFieldByString(inaJoinField.getStringByKey("JoinFieldName"), inaJoinField.getStringByKey("JoinFieldNameInReferencedData"));
	}
	let inaFieldMappings = inaStructure.getListByKey("FieldMappings");
	size = inaFieldMappings.size();
	for (idx = 0; idx < size; idx++)
	{
		let inaFieldMapping = inaFieldMappings.getStructureAt(idx);
		dimension.addFieldMappingByString(inaFieldMapping.getStringByKey("FieldName"), inaFieldMapping.getStringByKey("FieldNameInReferencedData"));
		if (importer.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			if (inaFieldMapping.getStringByKey("CalculatedDimensionFieldValueType") !== null)
			{
				let fieldByName = dimension.getFieldByName(inaFieldMapping.getStringByKey("FieldName"));
				fieldByName.setValueType(oFF.QInAConverter.lookupValueType(inaFieldMapping.getStringByKey("CalculatedDimensionFieldValueType")));
			}
		}
	}
	this.importFieldsLayout(importer, inaStructure, dimension, context);
	importer.importTotals(inaStructure, dimension.getResultStructureControllerBase(), context);
	return dimension;
};

oFF.QInAFilterDynamic = function() {};
oFF.QInAFilterDynamic.prototype = new oFF.QInAFilter();
oFF.QInAFilterDynamic.prototype._ff_c = "QInAFilterDynamic";

oFF.QInAFilterDynamic.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let modelComponent2 = modelComponent;
	let modelComponent3 = modelComponent2;
	let filter = modelComponent3;
	let filterExpressionState = null;
	if (filter.isDynamicFilterInitialized())
	{
		filterExpressionState = filter.getDynamicFilter();
	}
	let queryModel = modelComponent3.getQueryModel();
	let isAbap = exporter.isAbap(modelComponent3);
	let inaName;
	if (isAbap)
	{
		inaName = "Filter";
	}
	else
	{
		inaName = "DynamicFilter";
	}
	let useOnlyInternalFilter = oFF.notNull(exporter.m_variableProcessingDirective) && queryModel.getModelCapabilities().supportsVariableMasking();
	if (useOnlyInternalFilter)
	{
		let inaSelectionState = exporter.exportFilterExpression(filterExpressionState);
		if (oFF.notNull(inaSelectionState))
		{
			inaStructure.put(inaName, inaSelectionState);
		}
	}
	else
	{
		let tmpFilter = null;
		if (filter.isTmpFilterInitialized())
		{
			tmpFilter = filter.getTmpFilter();
		}
		let exportedFilter = this.exportFilter(exporter, filter, filterExpressionState, filter.getLinkedFilters(), tmpFilter, filter.getTransientZoomDisplayFilter(), filter.getZoomDataFilter());
		if (oFF.notNull(exportedFilter))
		{
			inaStructure.put(inaName, exportedFilter);
		}
	}
	return inaStructure;
};
oFF.QInAFilterDynamic.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_DYNAMIC;
};
oFF.QInAFilterDynamic.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let inaFilter = inaStructure.getStructureByKey("DynamicFilter");
	if (oFF.isNull(inaFilter))
	{
		inaFilter = inaStructure.getStructureByKey("Filter");
	}
	let filter = parentComponent;
	let filterExpression = null;
	if (oFF.notNull(filter))
	{
		if (filter.isDynamicFilterInitialized())
		{
			filterExpression = filter.getDynamicFilter();
			filterExpression.setComplexRoot(null);
			if (filterExpression.getModelCapabilities().supportsCellValueOperand())
			{
				filterExpression.setIsSuppressingNulls(false);
			}
		}
		filter.resetEffectiveFilter();
	}
	if (oFF.notNull(inaFilter) && !inaFilter.isEmpty())
	{
		filterExpression = importer.importFilterExpression(filterExpression, inaFilter, filter, context);
	}
	if (oFF.notNull(filter))
	{
		filter.setDynamicFilter(filterExpression);
	}
	return filterExpression;
};

oFF.QInAFilterVisibility = function() {};
oFF.QInAFilterVisibility.prototype = new oFF.QInAFilter();
oFF.QInAFilterVisibility.prototype._ff_c = "QInAFilterVisibility";

oFF.QInAFilterVisibility.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let filter = modelComponent;
	if (filter.getModelCapabilities().supportsVisibilityFilter())
	{
		if (exporter.m_mode.isTypeOf(oFF.QModelFormat.INA_VALUE_HELP))
		{
			return filter.isValueHelpVisibilityFilterInitialized() ? this.exportFilter(exporter, filter, filter.getValuehelpVisibilityFilter(), null, null, null, null) : null;
		}
		let tmpVisibilityFilter = null;
		if (filter.isTmpVisibilityFilterInitialized())
		{
			tmpVisibilityFilter = filter.getTmpVisibilityFilter();
		}
		let visibilityFilter = null;
		if (filter.isVisibilityFilterInitialized())
		{
			visibilityFilter = filter.getVisibilityFilter();
		}
		return this.exportFilter(exporter, filter, visibilityFilter, filter.getLinkedVisibilityFilters(), tmpVisibilityFilter, filter.getTransientZoomVisibilityFilter(), null);
	}
	return null;
};
oFF.QInAFilterVisibility.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.FILTER_VISIBILITY;
};
oFF.QInAFilterVisibility.prototype.getTagName = function()
{
	return "VisibilityFilter";
};
oFF.QInAFilterVisibility.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let filter = parentComponent;
	if (oFF.notNull(filter) && filter.isVisibilityFilterInitialized())
	{
		let filterExpression = filter.getVisibilityFilter();
		filterExpression.setComplexRoot(null);
		if (filterExpression.getModelCapabilities().supportsCellValueOperand())
		{
			filterExpression.setIsSuppressingNulls(false);
		}
	}
	if (oFF.isNull(inaStructure))
	{
		return null;
	}
	let selectionContainerVisibility = importer.importFilterExpression(null, inaStructure, filter, context);
	if (oFF.notNull(filter) && oFF.notNull(selectionContainerVisibility))
	{
		filter.setVisibilityFilter(selectionContainerVisibility);
	}
	return selectionContainerVisibility;
};
oFF.QInAFilterVisibility.prototype.isValidFilterExpression = function(filterExpressionState, queryModel)
{
	return oFF.notNull(filterExpressionState);
};

oFF.QInAMemberFormulaMeasure = function() {};
oFF.QInAMemberFormulaMeasure.prototype = new oFF.QInAFormulaMeasure();
oFF.QInAMemberFormulaMeasure.prototype._ff_c = "QInAMemberFormulaMeasure";

oFF.QInAMemberFormulaMeasure.exportCrossCalcSignFlip = function(exporter, formulaMeasure, inaFormula)
{
	let context = formulaMeasure.getContext();
	let queryModel = formulaMeasure.getQueryModel();
	let formula = formulaMeasure.getFormula();
	let signFlipOn = formula.cloneOlapComponent(context, null);
	if (signFlipOn.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
	{
		let formulaItemMember = signFlipOn;
		let signFlipMember = queryModel.getMeasureDimension().getStructureMemberByAliasOrMember(formulaItemMember.getMemberName());
		if (oFF.notNull(signFlipMember))
		{
			if ((signFlipMember.getExceptionAggregationType() === null || signFlipMember.getMemberType() === oFF.MemberType.EXCEPTION_AGGREGATION) && formulaMeasure.getExceptionAggregationType() === null)
			{
				signFlipOn = oFF.QInAFormulaMeasure.signFlipMember(signFlipOn);
			}
		}
	}
	else
	{
		oFF.QInAMemberFormulaMeasure.signFlipCrossCalcMembers(queryModel, signFlipOn);
		if (signFlipOn.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
		{
			let childFormulaItemFunction = signFlipOn;
			if (oFF.XString.isEqual(childFormulaItemFunction.getFunctionName(), oFF.FormulaOperator.GRAND_TOTAL.getName()) || oFF.XString.isEqual(childFormulaItemFunction.getFunctionName(), oFF.FormulaOperator.MEMBER_SELECT.getName()) || childFormulaItemFunction.requiresExternalSignFlip())
			{
				signFlipOn = oFF.QInAFormulaMeasure.signFlipMember(signFlipOn);
			}
		}
	}
	let signFlipOff = formula.cloneOlapComponent(context, null);
	let ifFunc = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.IF.getName());
	let or = oFF.QFactory.createFormulaFunctionWithName(context, oFF.FormulaOperator.OR.getName());
	ifFunc.add(or);
	let attributeName = queryModel.getAccountDimension().getAccountTypeAttributeName();
	let inc = oFF.QFactory.createFormulaOperation(context);
	inc.setOperator(oFF.ComparisonOperator.EQUAL);
	inc.setLeftSide(oFF.QFactory.createFormulaAttributeWithName(context, attributeName));
	inc.setRightSide(oFF.QFactory.createFormulaConstantWithStringValue(context, oFF.AccountType.INC.getName()));
	or.add(inc);
	let leq = oFF.QFactory.createFormulaOperation(context);
	leq.setOperator(oFF.ComparisonOperator.EQUAL);
	leq.setLeftSide(oFF.QFactory.createFormulaAttributeWithName(context, attributeName));
	leq.setRightSide(oFF.QFactory.createFormulaConstantWithStringValue(context, oFF.AccountType.LEQ.getName()));
	or.add(leq);
	let trueFunc = oFF.QFactory.createFormulaOperation(context);
	trueFunc.setOperator(oFF.MathOperator.MULT);
	trueFunc.setLeftSide(signFlipOn);
	trueFunc.setRightSide(oFF.QFactory.createFormulaConstantWithIntValue(context, -1));
	ifFunc.add(trueFunc);
	ifFunc.add(signFlipOff);
	oFF.QInAFormulaMeasure.exportFormulaItemSignFlip(exporter, ifFunc, inaFormula, context, true, false, formulaMeasure.getName());
};
oFF.QInAMemberFormulaMeasure.exportInverseFormulas = function(exporter, formulaMeasure, inaFormula)
{
	let inaInverseFormulas = inaFormula.putNewList("InverseFormulas");
	let inverseFormulaList = formulaMeasure.getInverseFormulaList();
	let numberOfInverseFormulas = inverseFormulaList.size();
	for (let i = 0; i < numberOfInverseFormulas; i++)
	{
		let inaInverseFormula = oFF.PrFactory.createStructure();
		inaInverseFormulas.add(inaInverseFormula);
		let formulaInverseFormula = inverseFormulaList.get(i);
		let inaInverseFormulaFormula = oFF.PrFactory.createStructure();
		let inverseInternalFormulaItem = formulaInverseFormula.getInternalFormulaItem();
		let targetMemberName = formulaInverseFormula.getTarget();
		if (formulaMeasure.isAutoSignFlip())
		{
			let queryModel = formulaMeasure.getQueryModel();
			let accountDim = queryModel.getAccountDimension();
			if (!(oFF.isNull(accountDim)) && oFF.notNull(targetMemberName))
			{
				let targetMemberItem = targetMemberName;
				let accountMember = accountDim.getStructureMemberByAliasOrMember(targetMemberItem.getMemberName());
				if (!(oFF.isNull(accountMember)) && accountMember.getComponentType() === oFF.MemberType.RESTRICTED_MEASURE)
				{
					if (!accountMember.isModelDefinedMember() && formulaMeasure.isAutoSignFlipRestrictedMeasureOnly())
					{
						accountMember = accountDim.getStructureMemberByAliasOrMember(accountMember.getMemberForSignFlip(formulaMeasure.getContext()));
					}
				}
				if (!(oFF.isNull(accountMember)))
				{
					let accountType = accountMember.getAccountType();
					if (accountType === oFF.AccountType.INC || accountType === oFF.AccountType.LEQ)
					{
						inverseInternalFormulaItem = oFF.QInAFormulaMeasure.signFlipMember(formulaInverseFormula.getInternalFormulaItem());
					}
				}
			}
		}
		oFF.QInAFormulaMeasure.exportFormulaItem(exporter, inverseInternalFormulaItem, inaInverseFormulaFormula, formulaMeasure.getContext());
		inaInverseFormula.put("Formula", inaInverseFormulaFormula);
		if (oFF.notNull(targetMemberName))
		{
			let inaTarget = oFF.PrFactory.createStructure();
			inaInverseFormula.put("Target", inaTarget);
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, targetMemberName, inaTarget, formulaMeasure.getContext());
		}
		let condition = formulaInverseFormula.getCondition();
		if (oFF.notNull(condition))
		{
			let inaCondition = oFF.PrFactory.createStructure();
			inaInverseFormula.put("Condition", inaCondition);
			oFF.QInAFormulaMeasure.exportFormulaItem(exporter, condition, inaCondition, formulaMeasure.getContext());
		}
	}
};
oFF.QInAMemberFormulaMeasure.exportIteration = function(exporter, formulaMeasure, inaFormula)
{
	let inaIteration = inaFormula.putNewStructure("Iteration");
	let iteration = formulaMeasure.getIteration();
	let startValueMemberName = oFF.QInAExportUtil.getMeasureMemberNameByAlias(formulaMeasure.getQueryModel(), iteration.getStartValueMemberName(), exporter);
	inaIteration.putString("StartValueMember", startValueMemberName);
	let iterationDimensions = iteration.getIterationDimensions();
	let inaIterationDimensions = inaIteration.putNewList("IterationDimensions");
	let size = iterationDimensions.size();
	for (let i = 0; i < size; i++)
	{
		let iterationDimension = iterationDimensions.get(i);
		let inaIterationDimension = inaIterationDimensions.addNewStructure();
		inaIterationDimension.putStringNotNullAndNotEmpty("Name", iterationDimension.getDimensionName());
		inaIterationDimension.putStringNotNullAndNotEmpty("PartitionLevel", iterationDimension.getPartitionLevelName());
	}
	if (iteration.useGlobalSort())
	{
		inaIteration.putBoolean("UseGlobalSort", true);
	}
};
oFF.QInAMemberFormulaMeasure.importIteration = function(importer, member, context, inaIteration)
{
	let iteration = oFF.QFactory.createIteration(context);
	member.setIteration(iteration);
	iteration.setStartValueMemberName(inaIteration.getStringByKey("StartValueMember"));
	let inaIterationDimensions = inaIteration.getListByKey("IterationDimensions");
	if (oFF.XCollectionUtils.hasElements(inaIterationDimensions))
	{
		let size = inaIterationDimensions.size();
		for (let i = 0; i < size; i++)
		{
			let inaIterationDimension = inaIterationDimensions.getStructureAt(i);
			let iterationDimension = oFF.QFactory.createIterationDimension(context);
			iterationDimension.setDimensionName(inaIterationDimension.getStringByKey("Name"));
			iterationDimension.setPartitionLevelName(inaIterationDimension.getStringByKey("PartitionLevel"));
			iteration.addIterationDimension(iterationDimension);
		}
	}
};
oFF.QInAMemberFormulaMeasure.isAccountModelCrossCalculation = function(formulaMeasure)
{
	let queryModel = formulaMeasure.getQueryModel();
	if (oFF.notNull(queryModel) && queryModel.getAccountDimension() !== null && queryModel.getAccountDimension().getAccountTypeAttributeName() !== null)
	{
		return formulaMeasure.getDimension() !== queryModel.getAccountDimension();
	}
	return false;
};
oFF.QInAMemberFormulaMeasure.signFlipCrossCalcMembers = function(queryModel, formulaItem)
{
	if (oFF.notNull(formulaItem))
	{
		let children = formulaItem.getChildren();
		let index = 0;
		while (children.hasNext())
		{
			let child = children.next();
			if (child.getOlapComponentType() === oFF.OlapComponentType.FORMULA_ITEM_MEMBER)
			{
				let formulaItemMember = child;
				if (queryModel.getMeasureDimension().getStructureMemberByAliasOrMember(formulaItemMember.getMemberName()) !== null)
				{
					let formulaItemFunction = formulaItem;
					if (!(oFF.XString.isEqual(formulaItemFunction.getFunctionName(), oFF.FormulaOperator.GRAND_TOTAL.getName()) || oFF.XString.isEqual(formulaItemFunction.getFunctionName(), oFF.FormulaOperator.MEMBER_SELECT.getName()) || formulaItemFunction.requiresExternalSignFlip()))
					{
						formulaItemFunction.set(index, oFF.QInAFormulaMeasure.signFlipMember(formulaItemMember));
					}
				}
			}
			else
			{
				oFF.QInAMemberFormulaMeasure.signFlipCrossCalcMembers(queryModel, child);
				if (child.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
				{
					let childFormulaItemFunction = child;
					if ((oFF.XString.isEqual(childFormulaItemFunction.getFunctionName(), oFF.FormulaOperator.GRAND_TOTAL.getName()) || oFF.XString.isEqual(childFormulaItemFunction.getFunctionName(), oFF.FormulaOperator.MEMBER_SELECT.getName()) || childFormulaItemFunction.requiresExternalSignFlip()) && formulaItem.getOlapComponentType() === oFF.OlapComponentType.FORMULA_FUNCTION)
					{
						let currentFormulaItemFunction = formulaItem;
						currentFormulaItemFunction.set(index, oFF.QInAFormulaMeasure.signFlipMember(child));
					}
				}
			}
			index++;
		}
	}
};
oFF.QInAMemberFormulaMeasure.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let formulaMeasure = modelComponent;
	let exportingMeasureInFullDefinition = oFF.QInAMember.exportingInOldFormat(exporter, formulaMeasure);
	let memberName = exportingMeasureInFullDefinition ? "Name" : "MemberName";
	inaStructure.putString(memberName, formulaMeasure.getName());
	oFF.QInAMember.exportText(exporter, inaStructure, formulaMeasure);
	let inaFormula = oFF.PrFactory.createStructure();
	if (formulaMeasure.isAutoSignFlip() && oFF.QInAMemberFormulaMeasure.isAccountModelCrossCalculation(formulaMeasure))
	{
		oFF.QInAMemberFormulaMeasure.exportCrossCalcSignFlip(exporter, formulaMeasure, inaFormula);
	}
	else if (exportingMeasureInFullDefinition)
	{
		oFF.QInAFormulaMeasure.exportFormulaMeasure(exporter, formulaMeasure, inaFormula);
	}
	if (oFF.XCollectionUtils.hasElements(formulaMeasure.getInverseFormulaList()) && exportingMeasureInFullDefinition)
	{
		oFF.QInAMemberFormulaMeasure.exportInverseFormulas(exporter, formulaMeasure, inaFormula);
	}
	if (formulaMeasure.getIteration() !== null && exportingMeasureInFullDefinition)
	{
		oFF.QInAMemberFormulaMeasure.exportIteration(exporter, formulaMeasure, inaFormula);
	}
	if (inaFormula.hasElements())
	{
		inaStructure.put("Formula", inaFormula);
	}
	if (formulaMeasure.supportsCalculatedBeforeAggregation() && formulaMeasure.isCalculatedBeforeAggregation())
	{
		inaStructure.putString("ExecutionStep", "CalculationBeforeAggregation");
	}
	if (formulaMeasure.hasVisibilityFilter() && formulaMeasure.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
	{
		let visibilityFilter = exporter.exportFilterExpression(formulaMeasure.getVisibilityFilter());
		if (oFF.notNull(visibilityFilter))
		{
			inaStructure.put("VisibilityFilter", visibilityFilter);
		}
	}
	return inaStructure;
};
oFF.QInAMemberFormulaMeasure.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let dimension = parentComponent;
	let queryModel = context.getQueryModel();
	if (oFF.isNull(dimension))
	{
		dimension = queryModel.getMeasureDimension();
	}
	let member;
	let newMemberName = oFF.QInAMember.getNameForImport(inaStructure, dimension);
	let inaFormula;
	if (dimension.getModelCapabilities().supportsCustomMeasuresInMetadata() && dimension.getStructureMember(newMemberName) !== null)
	{
		member = dimension.getStructureMember(newMemberName);
		let memberDetailsKey = dimension.isMeasureStructure() ? "[Measures].[MemberDetails]" : "[CustomDimension2].[MemberDetails]";
		inaFormula = inaStructure.getStructureByKey(memberDetailsKey).getStructureByKey("Formula");
	}
	else
	{
		member = oFF.QFormulaMeasure._createFormulaMeasure(context, dimension);
		oFF.QInAFormulaMeasure.importNameAndText(inaStructure, member, dimension);
		inaFormula = inaStructure.getStructureByKey("Formula");
	}
	importer.importExceptions(inaStructure, member);
	let importFormula = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inaFormula, null, context);
	member.setFormula(importFormula);
	if (member.supportsCalculatedBeforeAggregation())
	{
		member.setIsCalculatedBeforeAggregation(oFF.XString.isEqual("CalculationBeforeAggregation", inaStructure.getStringByKey("ExecutionStep")));
	}
	if (oFF.notNull(inaFormula))
	{
		let inAInverseFormulaList = inaFormula.getListByKey("InverseFormulas");
		if (oFF.XCollectionUtils.hasElements(inAInverseFormulaList))
		{
			this.importInverseFormula(importer, context, member, inAInverseFormulaList);
		}
	}
	let inaIteration = inaFormula.getStructureByKey("Iteration");
	if (oFF.XCollectionUtils.hasElements(inaIteration))
	{
		oFF.QInAMemberFormulaMeasure.importIteration(importer, member, context, inaIteration);
	}
	let inaVisibilityFilter = inaStructure.getStructureByKey("VisibilityFilter");
	if (oFF.notNull(inaVisibilityFilter) && member.getModelCapabilities().supportsCustomDimensionMemberVisibilityFilter())
	{
		let selectionVisibilityContainer = member.getVisibilityFilter();
		importer.importFilterExpression(selectionVisibilityContainer, inaVisibilityFilter, member, context);
	}
	return member;
};
oFF.QInAMemberFormulaMeasure.prototype.importInverseFormula = function(importer, context, member, inAInverseFormulaList)
{
	let dimension = member.getDimension();
	let numberOfInverseFormula = inAInverseFormulaList.size();
	let inverseFormulaList = member.getInverseFormulaList();
	for (let i = 0; i < numberOfInverseFormula; i++)
	{
		let inAInverseFormula = inAInverseFormulaList.get(i);
		let inAInverseFormulaTarget = inAInverseFormula.getStructureByKey("Target");
		let inAInverseFormulaCondition = inAInverseFormula.getStructureByKey("Condition");
		let inAInverseFormulaFormula = inAInverseFormula.getStructureByKey("Formula");
		let inverseFormulaItem = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inAInverseFormulaFormula, null, context);
		let conditionFormulaItem = null;
		if (oFF.notNull(inAInverseFormulaCondition))
		{
			conditionFormulaItem = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inAInverseFormulaCondition, null, context);
		}
		let targetMemberName = oFF.QInAFormulaMeasure.importFormulaMeasure(importer, dimension, inAInverseFormulaTarget, null, context);
		let inverseFormula = oFF.QFormulaInverseFormula.createInverseFormula(context, member, conditionFormulaItem, targetMemberName, inverseFormulaItem);
		inverseFormulaList.add(inverseFormula);
	}
};

oFF.QInAVarHierNode = function() {};
oFF.QInAVarHierNode.prototype = new oFF.QInAVarDimMember();
oFF.QInAVarHierNode.prototype._ff_c = "QInAVarHierNode";

oFF.QInAVarHierNode.prototype.getComponentType = function()
{
	return oFF.VariableType.HIERARCHY_NODE_VARIABLE;
};
oFF.QInAVarHierNode.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	let nodeVariable = modelComponent;
	let inaNodeValues = inaStructure.getStructureByKey("Values");
	let selectionContainerNode = oFF.QFactory.createFilterExpression(context, nodeVariable);
	importer.importFilterExpression(selectionContainerNode, inaNodeValues, nodeVariable, context);
	nodeVariable.setFilter(selectionContainerNode);
	return nodeVariable;
};

oFF.QInAValueHelpFilter = function() {};
oFF.QInAValueHelpFilter.prototype = new oFF.QInAFilter();
oFF.QInAValueHelpFilter.prototype._ff_c = "QInAValueHelpFilter";

oFF.QInAValueHelpFilter.getValueHelpFilter = function(dimension, filter)
{
	let selectorFilterUsage = dimension.getSelectorFilterUsage();
	let selectionContainer = null;
	if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER && filter.isDynamicFilterInitialized())
	{
		selectionContainer = filter.getDynamicFilter();
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE)
	{
		selectionContainer = filter.getEffectiveFilter();
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EXCLUDING_DIMENSION && filter.isDynamicFilterInitialized())
	{
		selectionContainer = filter.getDynamicFilter();
		oFF.QInAValueHelpFilter.removeFilterOnDimensionVh(selectionContainer, dimension);
	}
	else if (selectorFilterUsage === oFF.QueryFilterUsage.SELECTOR_FILTER && filter.isValueHelpFilterInitialized())
	{
		selectionContainer = filter.getValuehelpFilter();
	}
	return selectionContainer;
};
oFF.QInAValueHelpFilter.removeFilterOnDimensionVh = function(querySelectionState, dimension)
{
	let cartesianProduct = querySelectionState.getCartesianProduct();
	if (oFF.notNull(cartesianProduct))
	{
		let filterIndex = 0;
		while (filterIndex < cartesianProduct.size())
		{
			let cartesianChild = cartesianProduct.getCartesianChild(filterIndex);
			if (cartesianChild.getDimension().isEqualTo(dimension))
			{
				cartesianProduct.removeAt(filterIndex);
			}
			else
			{
				filterIndex++;
			}
		}
	}
};
oFF.QInAValueHelpFilter.prototype.exportComponentWithStructure = function(exporter, modelComponent, inaStructure, flags)
{
	let dimension = modelComponent;
	let filter = dimension.getQueryModel().getFilter();
	let valueHelpFilter = oFF.QInAValueHelpFilter.getValueHelpFilter(dimension, filter);
	if (oFF.notNull(valueHelpFilter))
	{
		let selectorFilterUsage = dimension.getSelectorFilterUsage();
		if (selectorFilterUsage === oFF.QueryFilterUsage.QUERY_FILTER_EFFECTIVE && filter.isIgnoreInternalNonMeasureFilter())
		{
			return this.exportFilter(exporter, filter, filter.getDynamicFilter(), filter.getLinkedFilters(), filter.getTmpFilter(), filter.getTransientZoomDisplayFilter(), filter.getZoomDataFilter());
		}
		else if (dimension.isSelectorUseQueryDrillOperations())
		{
			return this.exportFilter(exporter, filter, valueHelpFilter, null, null, filter.getTransientZoomDisplayFilter(), filter.getZoomDataFilter());
		}
		else
		{
			return exporter.exportFilterExpression(valueHelpFilter);
		}
	}
	return null;
};
oFF.QInAValueHelpFilter.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.SELECTOR;
};
oFF.QInAValueHelpFilter.prototype.getModelFormat = function()
{
	return oFF.QModelFormat.INA_VALUE_HELP;
};
oFF.QInAValueHelpFilter.prototype.importComponentWithStructure = function(importer, inaStructure, modelComponent, parentComponent, context)
{
	return null;
};

oFF.DfDocumentsStoreService = function() {};
oFF.DfDocumentsStoreService.prototype = new oFF.MessageManagerSimple();
oFF.DfDocumentsStoreService.prototype._ff_c = "DfDocumentsStoreService";

oFF.DfDocumentsStoreService.createDocumentStoreService = function(documentsInfo, withVersions, dataArea, instanceId)
{
	let instance = new oFF.DfDocumentsStoreService();
	instance.initialize(documentsInfo, withVersions, dataArea, instanceId);
	return instance;
};
oFF.DfDocumentsStoreService.createDocumentStoreServiceShallow = function(queryManager, documentServicePath, withVersions, dataArea, instanceId)
{
	let instance = new oFF.DfDocumentsStoreService();
	instance.initializeShallow(queryManager, documentServicePath, withVersions, dataArea, instanceId);
	return instance;
};
oFF.DfDocumentsStoreService.prototype.m_connectionContainer = null;
oFF.DfDocumentsStoreService.prototype.m_context = null;
oFF.DfDocumentsStoreService.prototype.m_dataArea = null;
oFF.DfDocumentsStoreService.prototype.m_documentDeleteRequests = null;
oFF.DfDocumentsStoreService.prototype.m_documentFetchRequests = null;
oFF.DfDocumentsStoreService.prototype.m_documentServiceRequest = null;
oFF.DfDocumentsStoreService.prototype.m_documentStoreRequests = null;
oFF.DfDocumentsStoreService.prototype.m_documentsDirectoryRequest = null;
oFF.DfDocumentsStoreService.prototype.m_fileStore = null;
oFF.DfDocumentsStoreService.prototype.m_instanceId = null;
oFF.DfDocumentsStoreService.prototype.m_path = null;
oFF.DfDocumentsStoreService.prototype.m_withVersions = false;
oFF.DfDocumentsStoreService.prototype.m_writeEnabled = false;
oFF.DfDocumentsStoreService.prototype.addToDeleteList = function(name)
{
	if (!this.m_writeEnabled)
	{
		throw oFF.XException.createIllegalStateException("Document Store Service is Read-Only");
	}
	this.m_documentDeleteRequests.addDocumentFileByName(name);
};
oFF.DfDocumentsStoreService.prototype.addToFetchList = function(name)
{
	this.m_documentFetchRequests.addDocumentFileByName(name);
};
oFF.DfDocumentsStoreService.prototype.addToPutList = function(name, content)
{
	this.addToPutListInternal(name, content, null, false);
};
oFF.DfDocumentsStoreService.prototype.addToPutListInternal = function(name, content, properties, withProperties)
{
	if (!this.m_writeEnabled)
	{
		throw oFF.XException.createIllegalStateException("Document Store Service is Read-Only");
	}
	let documentFile = this.m_documentStoreRequests.addDocumentFileByName(name);
	documentFile.setContent(content);
	if (withProperties)
	{
		documentFile.setProperties(properties);
	}
};
oFF.DfDocumentsStoreService.prototype.addToPutListWithProperties = function(name, content, properties)
{
	this.addToPutListInternal(name, content, properties, true);
};
oFF.DfDocumentsStoreService.prototype.containsKeyAndVersion = function(key, version)
{
	return this.m_fileStore.containsKey(key) && this.m_fileStore.getByKey(key).getVersionByName(version) !== null;
};
oFF.DfDocumentsStoreService.prototype.evictAllDocuments = function()
{
	oFF.XObjectExt.release(this.m_fileStore);
	this.m_fileStore = oFF.XHashMapByString.create();
};
oFF.DfDocumentsStoreService.prototype.evictDocument = function(name)
{
	oFF.XObjectExt.release(this.m_fileStore.remove(name));
};
oFF.DfDocumentsStoreService.prototype.getActiveDocumentVersionForFile = function(name)
{
	return this.m_fileStore.containsKey(name) ? this.m_fileStore.getByKey(name).getActiveDocumentVersion() : null;
};
oFF.DfDocumentsStoreService.prototype.getActiveVersionForFile = function(name)
{
	return this.m_fileStore.containsKey(name) ? this.m_fileStore.getByKey(name).getActiveVersion() : null;
};
oFF.DfDocumentsStoreService.prototype.getContentForFile = function(name)
{
	return this.m_fileStore.containsKey(name) ? this.m_fileStore.getByKey(name).getContent() : null;
};
oFF.DfDocumentsStoreService.prototype.getContentForFileAndVersion = function(name, version)
{
	return this.containsKeyAndVersion(name, version) ? this.m_fileStore.getByKey(name).getVersionByName(version).getContent() : null;
};
oFF.DfDocumentsStoreService.prototype.getDocumentVersionForFileAndVersion = function(name, version)
{
	return this.containsKeyAndVersion(name, version) ? this.m_fileStore.getByKey(name).getVersionByName(version) : null;
};
oFF.DfDocumentsStoreService.prototype.getDocumentVersionsForFile = function(name)
{
	return this.m_fileStore.containsKey(name) ? this.m_fileStore.getByKey(name).getVersions() : null;
};
oFF.DfDocumentsStoreService.prototype.getPropertiesForFile = function(name)
{
	return this.m_fileStore.containsKey(name) ? this.m_fileStore.getByKey(name).getProperties() : null;
};
oFF.DfDocumentsStoreService.prototype.getPropertiesForFileAndVersion = function(name, version)
{
	return this.containsKeyAndVersion(name, version) ? this.m_fileStore.getByKey(name).getVersionByName(version).getProperties() : null;
};
oFF.DfDocumentsStoreService.prototype.getVersionNamesForFile = function(name)
{
	return this.m_fileStore.containsKey(name) ? this.m_fileStore.getByKey(name).getVersionNames() : null;
};
oFF.DfDocumentsStoreService.prototype.initialize = function(documentsInfo, withVersions, dataArea, instanceId)
{
	oFF.MessageManagerSimple.prototype.setup.call( this );
	this.m_connectionContainer = documentsInfo.getQueryManager().getConnection();
	this.m_path = documentsInfo.getDocumentsServicePath();
	this.m_dataArea = dataArea;
	this.m_withVersions = withVersions;
	this.m_context = documentsInfo.getQueryModel();
	this.m_fileStore = oFF.XHashMapByString.create();
	this.m_writeEnabled = documentsInfo.getSupportsDocuments() === oFF.DocumentsSupportType.READ_WRITE || documentsInfo.getSupportsDocuments() === oFF.DocumentsSupportType.READ_CREATE_CHANGE;
	this.m_instanceId = instanceId;
	this.setupRequests();
};
oFF.DfDocumentsStoreService.prototype.initializeShallow = function(queryManager, documentServicePath, withVersions, dataArea, instanceId)
{
	oFF.MessageManagerSimple.prototype.setup.call( this );
	this.m_connectionContainer = queryManager.getConnection();
	this.m_path = documentServicePath;
	this.m_dataArea = dataArea;
	this.m_withVersions = withVersions;
	this.m_context = queryManager;
	this.m_fileStore = oFF.XHashMapByString.create();
	this.m_writeEnabled = false;
	this.m_instanceId = instanceId;
	this.setupRequests();
};
oFF.DfDocumentsStoreService.prototype.isDocumentLoaded = function(name)
{
	return this.m_fileStore.containsKey(name);
};
oFF.DfDocumentsStoreService.prototype.isWriteEnabled = function()
{
	return this.m_writeEnabled;
};
oFF.DfDocumentsStoreService.prototype.onProviderFetch = function(extResult, documentsServiceResponse, customIdentifier)
{
	this.clearMessages();
	this.addAllMessages(extResult);
	let directory = null;
	if (extResult.isValid())
	{
		let directories = documentsServiceResponse.getDocumentDirectories();
		if (oFF.XCollectionUtils.hasElements(directories))
		{
			directory = directories.get(0);
			let files = directory.getDocumentFiles();
			for (let i = 0; i < files.size(); i++)
			{
				let file = files.get(i);
				this.m_fileStore.put(file.getName(), file);
			}
		}
	}
	if (oFF.notNull(directory))
	{
		directory.clearFilesWithoutReleasing();
	}
	oFF.XObjectExt.release(documentsServiceResponse);
};
oFF.DfDocumentsStoreService.prototype.performRequests = function(syncType, listener, customIdentifier)
{
	let activeDocumentStoreAction = oFF.DfDocumentsStoreAction.create(syncType, this, customIdentifier, this.m_context, this.m_connectionContainer, this.m_documentServiceRequest);
	this.releaseRequests();
	this.setupRequests();
	activeDocumentStoreAction.attachListener(listener, oFF.ListenerType.SPECIFIC, customIdentifier);
	activeDocumentStoreAction.process();
	return activeDocumentStoreAction;
};
oFF.DfDocumentsStoreService.prototype.releaseObject = function()
{
	this.releaseRequests();
	oFF.MessageManagerSimple.prototype.releaseObject.call( this );
	this.m_path = null;
	this.m_withVersions = false;
	this.m_context = null;
	this.m_dataArea = null;
	this.m_fileStore = oFF.XObjectExt.release(this.m_fileStore);
};
oFF.DfDocumentsStoreService.prototype.releaseRequests = function()
{
	this.m_documentServiceRequest = null;
	this.m_documentsDirectoryRequest = null;
	this.m_documentFetchRequests = null;
	this.m_documentStoreRequests = null;
	this.m_documentDeleteRequests = null;
};
oFF.DfDocumentsStoreService.prototype.resetRequests = function()
{
	this.releaseRequests();
	this.setupRequests();
};
oFF.DfDocumentsStoreService.prototype.setupRequests = function()
{
	this.m_documentServiceRequest = oFF.DocumentsServiceRequest.create();
	this.m_documentServiceRequest.setDataArea(this.m_dataArea);
	this.m_documentServiceRequest.setInstanceId(this.m_instanceId);
	this.m_documentsDirectoryRequest = this.m_documentServiceRequest.addDocumentsDirectoryRequestByPath(this.m_path);
	this.m_documentFetchRequests = this.m_documentsDirectoryRequest.addDocumentsRequestByType(oFF.DocumentsRequestAction.GET);
	this.m_documentFetchRequests.setWithVersions(this.m_withVersions);
	this.m_documentStoreRequests = this.m_documentsDirectoryRequest.addDocumentsRequestByType(oFF.DocumentsRequestAction.PUT);
	this.m_documentDeleteRequests = this.m_documentsDirectoryRequest.addDocumentsRequestByType(oFF.DocumentsRequestAction.DELETE);
};

oFF.InARsDataCellProvider = function() {};
oFF.InARsDataCellProvider.prototype = new oFF.DfApplicationContext();
oFF.InARsDataCellProvider.prototype._ff_c = "InARsDataCellProvider";

oFF.InARsDataCellProvider.create = function(application, queryProvider)
{
	let provider = new oFF.InARsDataCellProvider();
	provider.setupProvider(application, queryProvider);
	return provider;
};
oFF.InARsDataCellProvider.prototype.m_cellDataTypes = null;
oFF.InARsDataCellProvider.prototype.m_cellValueTypes = null;
oFF.InARsDataCellProvider.prototype.m_columnsCount = 0;
oFF.InARsDataCellProvider.prototype.m_complexUnitIndices = null;
oFF.InARsDataCellProvider.prototype.m_csComplexUnitIndex = 0;
oFF.InARsDataCellProvider.prototype.m_csCurrencyUnit = null;
oFF.InARsDataCellProvider.prototype.m_csCurrencyUnitPosition = 0;
oFF.InARsDataCellProvider.prototype.m_csCurrencyUnitType = 0;
oFF.InARsDataCellProvider.prototype.m_csDecimalFloatValue = null;
oFF.InARsDataCellProvider.prototype.m_csDecimalPlaces = 0;
oFF.InARsDataCellProvider.prototype.m_csDocumentId = null;
oFF.InARsDataCellProvider.prototype.m_csDoubleValue = 0.0;
oFF.InARsDataCellProvider.prototype.m_csExceptionPriority = null;
oFF.InARsDataCellProvider.prototype.m_csExceptionSetting = null;
oFF.InARsDataCellProvider.prototype.m_csFormatString = null;
oFF.InARsDataCellProvider.prototype.m_csFormattedCurrencyUnit = null;
oFF.InARsDataCellProvider.prototype.m_csFormattedValue = null;
oFF.InARsDataCellProvider.prototype.m_csInputEnabled = false;
oFF.InARsDataCellProvider.prototype.m_csInputReadinessIndex = 0;
oFF.InARsDataCellProvider.prototype.m_csIsInsideBounds = false;
oFF.InARsDataCellProvider.prototype.m_csLockedValue = false;
oFF.InARsDataCellProvider.prototype.m_csMaxAlertLevel = null;
oFF.InARsDataCellProvider.prototype.m_csMaxAlertLevelName = null;
oFF.InARsDataCellProvider.prototype.m_csPlanningCommandIds = null;
oFF.InARsDataCellProvider.prototype.m_csQueryDataCellReference = null;
oFF.InARsDataCellProvider.prototype.m_csScalingFactor = 0;
oFF.InARsDataCellProvider.prototype.m_csStringValue = null;
oFF.InARsDataCellProvider.prototype.m_csValueException = null;
oFF.InARsDataCellProvider.prototype.m_decimalPlaces = null;
oFF.InARsDataCellProvider.prototype.m_documentIds = null;
oFF.InARsDataCellProvider.prototype.m_exceptionAlertLevel = null;
oFF.InARsDataCellProvider.prototype.m_exceptionName = null;
oFF.InARsDataCellProvider.prototype.m_exceptionNameWithSettings = null;
oFF.InARsDataCellProvider.prototype.m_exceptionSettingIndex = null;
oFF.InARsDataCellProvider.prototype.m_exceptionSettings = null;
oFF.InARsDataCellProvider.prototype.m_exceptions = null;
oFF.InARsDataCellProvider.prototype.m_explainQueryName = null;
oFF.InARsDataCellProvider.prototype.m_explainQueryNames = null;
oFF.InARsDataCellProvider.prototype.m_formatStrings = null;
oFF.InARsDataCellProvider.prototype.m_inputEnabled = null;
oFF.InARsDataCellProvider.prototype.m_inputReadinessIndex = null;
oFF.InARsDataCellProvider.prototype.m_isAbapBasedSystem = false;
oFF.InARsDataCellProvider.prototype.m_lastX = 0;
oFF.InARsDataCellProvider.prototype.m_lastY = 0;
oFF.InARsDataCellProvider.prototype.m_lockedValue = null;
oFF.InARsDataCellProvider.prototype.m_ocpStructure = null;
oFF.InARsDataCellProvider.prototype.m_planningCommandIds = null;
oFF.InARsDataCellProvider.prototype.m_queryDataCellReferences = null;
oFF.InARsDataCellProvider.prototype.m_roundedValues = null;
oFF.InARsDataCellProvider.prototype.m_rowsCount = 0;
oFF.InARsDataCellProvider.prototype.m_scalingFactors = null;
oFF.InARsDataCellProvider.prototype.m_supportsDataCellMixedValues = false;
oFF.InARsDataCellProvider.prototype.m_supportsInputReadinessStates = false;
oFF.InARsDataCellProvider.prototype.m_supportsResultSetNumericValueWithInternalPrecision = false;
oFF.InARsDataCellProvider.prototype.m_supportsSAPDateFormat = false;
oFF.InARsDataCellProvider.prototype.m_supportsUnifiedDataCells = false;
oFF.InARsDataCellProvider.prototype.m_unitDescriptions = null;
oFF.InARsDataCellProvider.prototype.m_unitPositions = null;
oFF.InARsDataCellProvider.prototype.m_unitTypes = null;
oFF.InARsDataCellProvider.prototype.m_units = null;
oFF.InARsDataCellProvider.prototype.m_valueType = null;
oFF.InARsDataCellProvider.prototype.m_values = null;
oFF.InARsDataCellProvider.prototype.m_valuesFormatted = null;
oFF.InARsDataCellProvider.prototype.copyInARsDataCellProvider = function(origin)
{
	this.m_supportsDataCellMixedValues = origin.m_supportsDataCellMixedValues;
	this.m_supportsSAPDateFormat = origin.m_supportsSAPDateFormat;
	this.m_supportsInputReadinessStates = origin.m_supportsInputReadinessStates;
	this.m_supportsUnifiedDataCells = origin.m_supportsUnifiedDataCells;
	this.m_supportsResultSetNumericValueWithInternalPrecision = origin.m_supportsResultSetNumericValueWithInternalPrecision;
	this.m_isAbapBasedSystem = origin.m_isAbapBasedSystem;
	let exceptionSettings = oFF.isNull(origin.m_exceptionSettings) ? null : origin.m_exceptionSettings.getPermaCopy();
	let ocpStructure = oFF.isNull(origin.m_ocpStructure) ? null : origin.m_ocpStructure.getPermaCopy();
	this.setOcpStructure(ocpStructure, origin.m_columnsCount, origin.m_rowsCount, exceptionSettings);
};
oFF.InARsDataCellProvider.prototype.getAllAvailableDocumentIds = function()
{
	let list = oFF.XList.create();
	let encodedValues = this.getColumn("DocumentsIds");
	if (oFF.notNull(encodedValues))
	{
		while (encodedValues.hasNextValue())
		{
			let nextValue = encodedValues.getNextStringValue();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(nextValue))
			{
				list.add(nextValue);
			}
		}
	}
	return list;
};
oFF.InARsDataCellProvider.prototype.getAvailableDataCellColumns = function()
{
	return this.m_columnsCount;
};
oFF.InARsDataCellProvider.prototype.getAvailableDataCellCount = function()
{
	return this.m_columnsCount * this.m_rowsCount;
};
oFF.InARsDataCellProvider.prototype.getAvailableDataCellRows = function()
{
	return this.m_rowsCount;
};
oFF.InARsDataCellProvider.prototype.getColumn = function(name)
{
	let inaValueElement = this.m_ocpStructure.getStructureByKey(name);
	if (oFF.isNull(inaValueElement))
	{
		return null;
	}
	return oFF.InARsEncodedValues.createByStructure(inaValueElement);
};
oFF.InARsDataCellProvider.prototype.getXValue = function()
{
	if (this.m_valueType.isNumber())
	{
		if (this.m_supportsResultSetNumericValueWithInternalPrecision && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_csDecimalFloatValue))
		{
			return oFF.XDecFloatByString.create(this.m_csDecimalFloatValue);
		}
		return oFF.XDoubleValue.create(this.m_csDoubleValue);
	}
	else if (this.m_valueType === oFF.XValueType.TIMESPAN)
	{
		return oFF.XTimeSpan.create(oFF.XDouble.convertToLong(this.m_csDoubleValue));
	}
	else if (this.m_valueType === oFF.XValueType.DATE)
	{
		return oFF.XDate.createDateFromStringWithFlag(this.m_csStringValue, this.m_supportsSAPDateFormat);
	}
	else if (this.m_valueType === oFF.XValueType.TIME)
	{
		return oFF.XTime.createTimeFromStringWithFlag(this.m_csStringValue, this.m_supportsSAPDateFormat);
	}
	else if (this.m_valueType === oFF.XValueType.DATE_TIME)
	{
		return oFF.XDateTime.createDateTimeFromStringWithFlag(this.m_csStringValue, this.m_supportsSAPDateFormat);
	}
	else if (this.m_valueType === oFF.XValueType.STRING)
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_csStringValue))
		{
			return oFF.XStringValue.create(this.m_csStringValue);
		}
		return null;
	}
	throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Unsupported type:", this.m_valueType.getName()));
};
oFF.InARsDataCellProvider.prototype.notifyCursorChange = function(cell, x, y)
{
	cell.setColumn(x);
	cell.setRow(y);
	cell.reset();
	if (y < this.m_lastY || y === this.m_lastY && x < this.m_lastX)
	{
		this.resetCursor();
	}
	while (this.m_csIsInsideBounds && (y > this.m_lastY || x > this.m_lastX))
	{
		this.readNextIndex();
		this.m_lastX++;
		if (this.m_lastX >= this.m_columnsCount || this.m_lastY === -1)
		{
			this.m_lastX = 0;
			this.m_lastY++;
		}
	}
	if (!this.m_csIsInsideBounds)
	{
		cell.setValueException(oFF.ValueException.NULL_VALUE);
		if (this.m_supportsUnifiedDataCells)
		{
			cell.setFormattedValue("");
		}
		else
		{
			cell.setFormattedValue(oFF.ValueException.NULL_VALUE.getName());
		}
		cell.setInitialValue(null);
	}
	else if (y === this.m_lastY && x === this.m_lastX)
	{
		this.updateValidCell(cell);
	}
	else
	{
		cell.setValueException(oFF.ValueException.NULL_VALUE);
		if (this.m_supportsUnifiedDataCells)
		{
			cell.setFormattedValue("");
		}
		else
		{
			cell.setFormattedValue(oFF.ValueException.NULL_VALUE.getName());
		}
		cell.setInitialValue(null);
	}
};
oFF.InARsDataCellProvider.prototype.readNextIndex = function()
{
	if (oFF.notNull(this.m_values) && this.m_values.hasNextValue())
	{
		if (oFF.isNull(this.m_exceptions))
		{
			this.m_csValueException = oFF.ValueException.NORMAL;
		}
		else
		{
			this.m_csValueException = oFF.QInAConverter.lookupException(this.m_exceptions.getNextIntegerValue());
		}
		if (oFF.notNull(this.m_exceptionSettingIndex))
		{
			this.setExceptionSettings(this.m_exceptionSettingIndex.getNextIntegerValue());
		}
		else if (oFF.notNull(this.m_exceptionAlertLevel))
		{
			this.m_csMaxAlertLevel = oFF.QInAConverter.lookupAlertLevel(this.m_exceptionAlertLevel.getNextIntegerValue());
		}
		if (oFF.notNull(this.m_exceptionSettingIndex))
		{
			this.m_csMaxAlertLevelName = this.m_exceptionNameWithSettings;
		}
		else if (oFF.notNull(this.m_exceptionAlertLevel))
		{
			this.m_csMaxAlertLevelName = this.m_exceptionName.getNextStringValue();
		}
		if (oFF.notNull(this.m_valuesFormatted))
		{
			this.m_csFormattedValue = this.m_valuesFormatted.getNextStringValue();
		}
		if (oFF.notNull(this.m_planningCommandIds))
		{
			this.m_csPlanningCommandIds = this.m_planningCommandIds.getNextStringValue();
		}
		if (oFF.notNull(this.m_formatStrings))
		{
			this.m_csFormatString = this.m_formatStrings.getNextStringValue();
		}
		if (oFF.notNull(this.m_queryDataCellReferences))
		{
			this.m_csQueryDataCellReference = this.m_queryDataCellReferences.getNextStringValue();
		}
		if (oFF.notNull(this.m_units))
		{
			this.m_csFormattedCurrencyUnit = this.m_units.getNextStringValue();
			this.m_csCurrencyUnitType = 1;
		}
		if (oFF.notNull(this.m_unitTypes))
		{
			this.m_csCurrencyUnitType = this.m_unitTypes.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_unitPositions))
		{
			this.m_csCurrencyUnitPosition = this.m_unitPositions.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_unitDescriptions))
		{
			this.m_csCurrencyUnit = this.m_unitDescriptions.getNextStringValue();
		}
		if (oFF.notNull(this.m_complexUnitIndices))
		{
			this.m_csComplexUnitIndex = this.m_complexUnitIndices.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_documentIds))
		{
			this.m_csDocumentId = this.m_documentIds.getNextStringValue();
		}
		this.readNextValues();
		if (oFF.isNull(this.m_inputEnabled))
		{
			this.m_csInputEnabled = false;
		}
		else
		{
			this.m_csInputEnabled = this.m_inputEnabled.getNextIntegerValue() !== 0;
		}
		if (oFF.notNull(this.m_inputReadinessIndex))
		{
			this.m_csInputReadinessIndex = this.m_inputReadinessIndex.getNextIntegerValue();
		}
		if (oFF.isNull(this.m_lockedValue))
		{
			this.m_csLockedValue = false;
		}
		else
		{
			this.m_csLockedValue = this.m_lockedValue.getNextIntegerValue() !== 0;
		}
		if (oFF.notNull(this.m_decimalPlaces))
		{
			this.m_csDecimalPlaces = this.m_decimalPlaces.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_scalingFactors))
		{
			this.m_csScalingFactor = this.m_scalingFactors.getNextIntegerValue();
		}
		if (oFF.notNull(this.m_explainQueryNames))
		{
			this.m_explainQueryName = this.m_explainQueryNames.getNextStringValue();
		}
	}
	else
	{
		this.m_csIsInsideBounds = false;
	}
};
oFF.InARsDataCellProvider.prototype.readNextValues = function()
{
	if (this.m_supportsDataCellMixedValues)
	{
		this.m_valueType = oFF.XValueType.DOUBLE;
		if (oFF.notNull(this.m_cellValueTypes))
		{
			this.m_valueType = oFF.QInAConverter.lookupValueTypeByInt(this.m_cellValueTypes.getNextIntegerValue());
		}
		if (this.m_csValueException === oFF.ValueException.NORMAL || this.m_csValueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS)
		{
			if (this.m_valueType.isNumber())
			{
				if (this.m_supportsResultSetNumericValueWithInternalPrecision)
				{
					this.m_csDecimalFloatValue = this.m_values.getNextStringValue();
					if (oFF.XStringUtils.isNullOrEmpty(this.m_csDecimalFloatValue))
					{
						this.m_values.skipBack();
						this.m_csDoubleValue = this.m_values.getNextDoubleValue();
					}
				}
				else
				{
					this.m_csDoubleValue = this.m_values.getNextDoubleValue();
				}
			}
			else
			{
				this.m_csDoubleValue = 0;
				this.m_csDecimalFloatValue = oFF.XDecFloatByString.ZERO_VALUE_STRING;
				this.m_values.skip();
			}
			if (oFF.notNull(this.m_roundedValues))
			{
				this.m_csStringValue = this.m_roundedValues.getNextStringValue();
			}
		}
		else
		{
			this.m_csDoubleValue = 0;
			this.m_csDecimalFloatValue = oFF.XDecFloatByString.ZERO_VALUE_STRING;
			this.m_csStringValue = null;
			this.m_values.skip();
			if (oFF.notNull(this.m_roundedValues))
			{
				this.m_roundedValues.skip();
			}
		}
	}
	else
	{
		if (oFF.notNull(this.m_cellDataTypes))
		{
			let cellDataTypeStr = this.m_cellDataTypes.getNextStringValue();
			let cellDataType = oFF.QInAConverter.lookupValueType(cellDataTypeStr);
			this.m_valueType = cellDataType;
			if (cellDataType.isNumber())
			{
				this.m_csDoubleValue = this.m_values.getNextDoubleValue();
				this.m_csStringValue = null;
			}
			else
			{
				this.m_csStringValue = this.m_values.getNextStringValue();
				this.m_csDoubleValue = 0;
			}
		}
		else if (oFF.notNull(this.m_cellValueTypes))
		{
			let inaValueType2 = this.m_cellValueTypes.getNextIntegerValue();
			this.m_valueType = oFF.QInAConverter.lookupValueTypeByInt(inaValueType2);
			this.m_csDoubleValue = this.m_values.getNextDoubleValue();
		}
		else
		{
			throw oFF.XException.createIllegalStateException("Bad protocol: Values cannot be retrieved");
		}
	}
};
oFF.InARsDataCellProvider.prototype.releaseObject = function()
{
	this.m_ocpStructure = null;
	this.m_exceptionSettings = null;
	this.m_csValueException = null;
	this.m_csMaxAlertLevelName = null;
	this.m_csExceptionSetting = oFF.XObjectExt.release(this.m_csExceptionSetting);
	this.m_csExceptionPriority = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_csExceptionPriority);
	this.m_csMaxAlertLevel = null;
	this.m_csFormattedValue = null;
	this.m_csFormatString = null;
	this.m_csPlanningCommandIds = null;
	this.m_csQueryDataCellReference = null;
	this.m_csFormattedCurrencyUnit = null;
	this.m_csCurrencyUnit = null;
	this.m_exceptions = oFF.XObjectExt.release(this.m_exceptions);
	this.m_inputEnabled = oFF.XObjectExt.release(this.m_inputEnabled);
	this.m_inputReadinessIndex = oFF.XObjectExt.release(this.m_inputReadinessIndex);
	this.m_lockedValue = oFF.XObjectExt.release(this.m_lockedValue);
	this.m_unitDescriptions = oFF.XObjectExt.release(this.m_unitDescriptions);
	this.m_unitTypes = oFF.XObjectExt.release(this.m_unitTypes);
	this.m_unitPositions = oFF.XObjectExt.release(this.m_unitPositions);
	this.m_units = oFF.XObjectExt.release(this.m_units);
	this.m_values = oFF.XObjectExt.release(this.m_values);
	this.m_valuesFormatted = oFF.XObjectExt.release(this.m_valuesFormatted);
	this.m_formatStrings = oFF.XObjectExt.release(this.m_formatStrings);
	this.m_cellValueTypes = oFF.XObjectExt.release(this.m_cellValueTypes);
	this.m_cellDataTypes = oFF.XObjectExt.release(this.m_cellDataTypes);
	this.m_queryDataCellReferences = oFF.XObjectExt.release(this.m_queryDataCellReferences);
	this.m_exceptionNameWithSettings = null;
	this.m_exceptionName = oFF.XObjectExt.release(this.m_exceptionName);
	this.m_exceptionAlertLevel = oFF.XObjectExt.release(this.m_exceptionAlertLevel);
	this.m_exceptionSettingIndex = oFF.XObjectExt.release(this.m_exceptionSettingIndex);
	this.m_planningCommandIds = oFF.XObjectExt.release(this.m_planningCommandIds);
	this.m_decimalPlaces = oFF.XObjectExt.release(this.m_decimalPlaces);
	this.m_scalingFactors = oFF.XObjectExt.release(this.m_scalingFactors);
	this.m_complexUnitIndices = oFF.XObjectExt.release(this.m_complexUnitIndices);
	this.m_documentIds = oFF.XObjectExt.release(this.m_documentIds);
	this.m_explainQueryNames = oFF.XObjectExt.release(this.m_explainQueryNames);
	oFF.DfApplicationContext.prototype.releaseObject.call( this );
};
oFF.InARsDataCellProvider.prototype.resetCursor = function()
{
	this.m_lastX = -1;
	this.m_lastY = -1;
	this.m_csIsInsideBounds = true;
	this.resetIfNotNull(this.m_exceptions);
	this.resetIfNotNull(this.m_exceptionName);
	this.resetIfNotNull(this.m_exceptionAlertLevel);
	this.resetIfNotNull(this.m_exceptionSettingIndex);
	this.resetIfNotNull(this.m_inputEnabled);
	this.resetIfNotNull(this.m_inputReadinessIndex);
	this.resetIfNotNull(this.m_lockedValue);
	this.resetIfNotNull(this.m_unitDescriptions);
	this.resetIfNotNull(this.m_unitTypes);
	this.resetIfNotNull(this.m_unitPositions);
	this.resetIfNotNull(this.m_units);
	this.resetIfNotNull(this.m_values);
	this.resetIfNotNull(this.m_roundedValues);
	this.resetIfNotNull(this.m_valuesFormatted);
	this.resetIfNotNull(this.m_planningCommandIds);
	this.resetIfNotNull(this.m_formatStrings);
	this.resetIfNotNull(this.m_cellValueTypes);
	this.resetIfNotNull(this.m_queryDataCellReferences);
	this.resetIfNotNull(this.m_cellDataTypes);
	this.resetIfNotNull(this.m_decimalPlaces);
	this.resetIfNotNull(this.m_scalingFactors);
	this.resetIfNotNull(this.m_explainQueryNames);
	this.resetIfNotNull(this.m_complexUnitIndices);
	this.resetIfNotNull(this.m_documentIds);
};
oFF.InARsDataCellProvider.prototype.resetIfNotNull = function(cursor)
{
	if (oFF.notNull(cursor))
	{
		cursor.resetCursor();
	}
};
oFF.InARsDataCellProvider.prototype.setExceptionSettings = function(exceptionSettingIndex)
{
	let isAlertLevelInSettings = false;
	if (exceptionSettingIndex === -1)
	{
		this.m_csExceptionSetting = null;
		this.m_csExceptionPriority = null;
		this.m_exceptionNameWithSettings = null;
	}
	else
	{
		let activeExceptionSettings = this.m_exceptionSettings.getListAt(exceptionSettingIndex);
		this.m_csExceptionSetting = oFF.XHashMapByString.create();
		this.m_csExceptionPriority = oFF.XHashMapByString.create();
		let exceptionSize = activeExceptionSettings.size();
		for (let idx = 0; idx < exceptionSize; idx++)
		{
			let exceptionSetting = activeExceptionSettings.getStructureAt(idx);
			let exceptionSettingName = exceptionSetting.getStringByKey("SettingName");
			let exceptionSettingValue = exceptionSetting.getStringByKey("Value");
			this.m_csExceptionSetting.put(exceptionSettingName, exceptionSettingValue);
			this.m_csExceptionPriority.put(exceptionSettingName, oFF.XIntegerValue.create(exceptionSetting.getIntegerByKey("Priority")));
			if (oFF.ExceptionSetting.getByName(exceptionSettingName) === oFF.ExceptionSetting.ALERT_LEVEL)
			{
				isAlertLevelInSettings = true;
				let inaAlertLevel = oFF.XInteger.convertFromStringWithRadix(exceptionSettingValue, 10);
				this.m_csMaxAlertLevel = oFF.QInAConverter.lookupAlertLevel(inaAlertLevel);
				this.m_exceptionNameWithSettings = exceptionSetting.getStringByKey("ExceptionName");
			}
		}
	}
	if (!isAlertLevelInSettings)
	{
		this.m_csMaxAlertLevel = oFF.AlertLevel.NORMAL;
		this.m_exceptionNameWithSettings = null;
	}
};
oFF.InARsDataCellProvider.prototype.setOcpStructure = function(ocpStructure, columnsCount, rowsCount, exceptionSettings)
{
	this.m_ocpStructure = ocpStructure;
	this.m_rowsCount = rowsCount;
	this.m_columnsCount = columnsCount;
	if (oFF.notNull(this.m_ocpStructure))
	{
		this.m_exceptions = this.getColumn("Exceptions");
		if (oFF.isNull(exceptionSettings))
		{
			this.m_exceptionName = this.getColumn("ExceptionName");
			this.m_exceptionAlertLevel = this.getColumn("ExceptionAlertLevel");
		}
		else
		{
			this.m_exceptionSettings = exceptionSettings;
			this.m_exceptionSettingIndex = this.getColumn("ExceptionSettingIndex");
		}
		if (this.m_supportsInputReadinessStates)
		{
			this.m_inputReadinessIndex = this.getColumn("InputReadinessIndex");
		}
		else
		{
			this.m_inputEnabled = this.getColumn("InputEnabled");
		}
		this.m_lockedValue = this.getColumn("LockedValue");
		this.m_unitDescriptions = this.getColumn("UnitDescriptions");
		this.m_unitTypes = this.getColumn("UnitTypes");
		this.m_unitPositions = this.getColumn("UnitPositions");
		this.m_units = this.getColumn("Units");
		this.m_complexUnitIndices = this.getColumn("UnitIndex");
		this.m_documentIds = this.getColumn("DocumentsIds");
		this.m_values = this.getColumn("Values");
		this.m_valuesFormatted = this.getColumn("ValuesFormatted");
		if (this.m_supportsDataCellMixedValues)
		{
			this.m_roundedValues = this.getColumn("ValuesRounded");
		}
		else
		{
			this.m_roundedValues = null;
		}
		this.m_planningCommandIds = this.getColumn("Actions");
		this.m_formatStrings = this.getColumn("CellFormat");
		this.m_cellValueTypes = this.getColumn("CellValueTypes");
		this.m_cellDataTypes = this.getColumn("CellDataType");
		this.m_queryDataCellReferences = this.getColumn("QueryDataCellReferences");
		this.m_explainQueryNames = this.getColumn("ExplainQueryName");
		this.m_decimalPlaces = this.getColumn("NumericRounding");
		this.m_scalingFactors = this.getColumn("NumericShift");
	}
	this.m_lastX = -1;
	this.m_lastY = -1;
	this.m_csIsInsideBounds = true;
	this.m_csMaxAlertLevel = oFF.AlertLevel.NORMAL;
};
oFF.InARsDataCellProvider.prototype.setupProvider = function(application, queryProvider)
{
	this.setupApplicationContext(application);
	this.m_supportsSAPDateFormat = queryProvider.getCapabilitiesBase().supportsSapDate();
	this.m_supportsUnifiedDataCells = queryProvider.getCapabilitiesBase().supportsUnifiedDataCells();
	this.m_supportsDataCellMixedValues = queryProvider.getCapabilitiesBase().supportsDataCellMixedValues();
	this.m_supportsInputReadinessStates = queryProvider.supportsInputReadinessStates();
	this.m_supportsResultSetNumericValueWithInternalPrecision = queryProvider.getCapabilitiesBase().supportsResultSetNumericValueWithInternalPrecision();
	this.m_isAbapBasedSystem = queryProvider.getSystemType().isTypeOf(oFF.SystemType.ABAP);
};
oFF.InARsDataCellProvider.prototype.updateCurrencyUnit = function(currencyUnitBase)
{
	if (this.m_csCurrencyUnitType === 1)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(false);
		currencyUnitBase.setIsMixed(false);
	}
	else if (this.m_csCurrencyUnitType === 2)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(false);
		currencyUnitBase.setHasUnit(true);
		currencyUnitBase.setIsMixed(false);
	}
	else if (this.m_csCurrencyUnitType === 3)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(true);
		currencyUnitBase.setIsMixed(false);
	}
	else if (this.m_csCurrencyUnitType === -1)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setIsMixed(true);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(true);
	}
	else
	{
		currencyUnitBase.setIsEmpty(true);
		currencyUnitBase.setHasCurrency(false);
		currencyUnitBase.setHasUnit(false);
		currencyUnitBase.setIsMixed(false);
	}
	if (!currencyUnitBase.isEmpty())
	{
		if (oFF.notNull(this.m_csFormattedCurrencyUnit))
		{
			currencyUnitBase.setFormatted(this.m_csFormattedCurrencyUnit);
		}
		if (oFF.notNull(this.m_csCurrencyUnit))
		{
			if (this.m_csCurrencyUnitPosition === 2)
			{
				currencyUnitBase.setPrefix(this.m_csCurrencyUnit);
			}
			else
			{
				currencyUnitBase.setSuffix(this.m_csCurrencyUnit);
			}
		}
	}
};
oFF.InARsDataCellProvider.prototype.updateValidCell = function(cell)
{
	cell.setValueType(this.m_valueType);
	let isValueExceptionIndicationEmptyValue = this.m_supportsUnifiedDataCells && this.m_csValueException !== oFF.ValueException.NORMAL && this.m_csValueException !== oFF.ValueException.ZERO && this.m_csValueException !== oFF.ValueException.MIXED_CURRENCIES_OR_UNITS;
	if (this.m_csValueException === oFF.ValueException.NULL_VALUE || this.m_csValueException === oFF.ValueException.UNDEFINED || isValueExceptionIndicationEmptyValue)
	{
		cell.setInitialValue(null);
	}
	else
	{
		cell.setInitialValue(this.getXValue());
	}
	if (isValueExceptionIndicationEmptyValue)
	{
		cell.setFormattedValue("");
	}
	else
	{
		cell.setFormattedValue(this.m_csFormattedValue);
	}
	cell.setFormatString(this.m_csFormatString);
	cell.setValueException(this.m_csValueException);
	if (oFF.isNull(this.m_csMaxAlertLevelName))
	{
		cell.setMaxAlertLevelName(this.m_exceptionNameWithSettings);
	}
	else
	{
		cell.setMaxAlertLevelName(this.m_csMaxAlertLevelName);
	}
	cell.setMaxAlertLevel(this.m_csMaxAlertLevel);
	cell.setDataEntryEnabled(this.m_csInputEnabled);
	cell.setInputReadinessIndex(this.m_csInputReadinessIndex);
	cell.setExceptionSettings(this.m_csExceptionSetting);
	cell.setExceptionPriorities(this.m_csExceptionPriority);
	cell.setOriginalValueLock(this.m_csLockedValue);
	cell.setQueryDataCellReference(this.m_csQueryDataCellReference);
	if (oFF.notNull(this.m_complexUnitIndices))
	{
		cell.setUnitIndex(this.m_csComplexUnitIndex);
	}
	if (oFF.notNull(this.m_documentIds))
	{
		cell.setDocumentId(this.m_csDocumentId);
	}
	this.updateCurrencyUnit(cell.getCurrencyUnitBase());
	let planningCommandIdsBase = cell.getPlanningCommandIdsBase();
	planningCommandIdsBase.clear();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_csPlanningCommandIds))
	{
		let planningCommandIds = oFF.XStringTokenizer.splitString(this.m_csPlanningCommandIds, " ");
		if (oFF.notNull(planningCommandIds))
		{
			planningCommandIdsBase.addAll(planningCommandIds);
		}
	}
	if (!this.m_valueType.isNumber())
	{
		cell.setDecimalPlaces(0);
		cell.setScalingFactor(0);
	}
	else
	{
		cell.setDecimalPlaces(this.m_csDecimalPlaces);
		cell.setScalingFactor(this.m_csScalingFactor);
	}
	if (oFF.notNull(this.m_explainQueryNames))
	{
		cell.setExplainQueryName(this.m_explainQueryName);
	}
};

oFF.InARsDimension = function() {};
oFF.InARsDimension.prototype = new oFF.DfNameTextObject();
oFF.InARsDimension.prototype._ff_c = "InARsDimension";

oFF.InARsDimension.UDH_DIMESION_NAME_PREFIX = "1DG_";
oFF.InARsDimension.create = function(inaDimension, dimension, requestContext, rsDefAxis, lbhToUdhConversionProperties)
{
	let object = new oFF.InARsDimension();
	let name = inaDimension.getStringByKey("Name");
	let inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
	let hierarchyName;
	let childAlignment;
	let maxDrillLevel = -1;
	let maxRuntimeLevel = -1;
	let commands = rsDefAxis.getConvenienceCommands();
	let inaAttributes = inaDimension.getListByKey("Attributes");
	let inaDimDrillGroup = inaDimension.getListByKey("DimensionDrillGroup");
	if (oFF.isNull(inaHierarchy))
	{
		hierarchyName = oFF.notNull(lbhToUdhConversionProperties) ? lbhToUdhConversionProperties.getHierarchyName() : null;
		childAlignment = oFF.Alignment.DEFAULT_VALUE;
	}
	else
	{
		hierarchyName = inaHierarchy.getStringByKey("Name");
		if (oFF.notNull(commands) && commands.getQueryManager().getModelCapabilities().supportsMaxDrillLevel())
		{
			maxDrillLevel = inaHierarchy.getIntegerByKey("MaxDrillLevel");
			maxRuntimeLevel = inaHierarchy.getIntegerByKey("MaxRuntimeLevel");
		}
		if (inaHierarchy.hasStringByKey("LowerLevelNodeAlignment"))
		{
			let nodeAlignment = inaHierarchy.getStringByKeyExt("LowerLevelNodeAlignment", "Default");
			childAlignment = oFF.QInAConverter.lookupLowerLevelNodeAlignment(nodeAlignment);
		}
		else
		{
			let isBottomUp = inaHierarchy.getBooleanByKeyExt("ExpandBottomUp", false);
			childAlignment = isBottomUp ? oFF.Alignment.CHILDREN_ABOVE_PARENT : oFF.Alignment.CHILDREN_BELOW_PARENT;
		}
	}
	let dimensionType = oFF.QInAConverter.lookupDimensionType(inaDimension.getIntegerByKeyExt("DimensionType", 0));
	let isClustered = inaDimension.getBooleanByKeyExt("IsClustered", false);
	let hasTimeDependentHierarchies = false;
	let hasVersionDependentHierarchies = false;
	if (oFF.notNull(commands) && commands.getQueryManager().getModelCapabilities().supportsDimensionHierarchyMetadata() && inaDimension.containsKey("HierarchyMetadata"))
	{
		let dimensionHierarchyMetadata = inaDimension.getStructureByKey("HierarchyMetadata");
		hasTimeDependentHierarchies = dimensionHierarchyMetadata.getBooleanByKey("TimeDependent");
		hasVersionDependentHierarchies = dimensionHierarchyMetadata.getBooleanByKey("VersionDependent");
	}
	object.setupExt(name, inaAttributes, inaDimDrillGroup, dimension, requestContext, rsDefAxis, hierarchyName, dimensionType, childAlignment, lbhToUdhConversionProperties, isClustered, maxDrillLevel, maxRuntimeLevel, hasTimeDependentHierarchies, hasVersionDependentHierarchies);
	return object;
};
oFF.InARsDimension.prototype.m_absoluteLevels = null;
oFF.InARsDimension.prototype.m_childAlignment = null;
oFF.InARsDimension.prototype.m_childCountValues = null;
oFF.InARsDimension.prototype.m_dimensionDrillGroups = null;
oFF.InARsDimension.prototype.m_dimensionType = null;
oFF.InARsDimension.prototype.m_displayValues = null;
oFF.InARsDimension.prototype.m_drillGroupIndexes = null;
oFF.InARsDimension.prototype.m_drillStates = null;
oFF.InARsDimension.prototype.m_fields = null;
oFF.InARsDimension.prototype.m_hasTimeDependentHierarchies = false;
oFF.InARsDimension.prototype.m_hasVersionDependentHierarchies = false;
oFF.InARsDimension.prototype.m_hierarchyName = null;
oFF.InARsDimension.prototype.m_hierarchyNavigationFieldIndex = 0;
oFF.InARsDimension.prototype.m_hierarchyPathFieldIndex = 0;
oFF.InARsDimension.prototype.m_isClustered = false;
oFF.InARsDimension.prototype.m_isHierarchyActive = false;
oFF.InARsDimension.prototype.m_keyFieldIndex = 0;
oFF.InARsDimension.prototype.m_lbhToUdhConversionProperties = null;
oFF.InARsDimension.prototype.m_maxDrillLevel = 0;
oFF.InARsDimension.prototype.m_maxRuntimeLevel = 0;
oFF.InARsDimension.prototype.m_measureIdIndex = 0;
oFF.InARsDimension.prototype.m_memberIndexes = null;
oFF.InARsDimension.prototype.m_memberTypes = null;
oFF.InARsDimension.prototype.m_memberTypesEncoded = null;
oFF.InARsDimension.prototype.m_namePathFieldIndex = 0;
oFF.InARsDimension.prototype.m_nodeIds = null;
oFF.InARsDimension.prototype.m_parentIndexes = null;
oFF.InARsDimension.prototype.m_textFieldIndex = 0;
oFF.InARsDimension.prototype._isHierarchyActiveForContext = function(rsDimension, hierarchyName, isValueHelp)
{
	if (oFF.isNull(rsDimension))
	{
		return oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName);
	}
	return isValueHelp ? rsDimension.isSelectorHierarchyActive() : rsDimension.isHierarchyActive();
};
oFF.InARsDimension.prototype.cloneExt = function(flags)
{
	let clone = new oFF.InARsDimension();
	clone.copyInARsDimension(this);
	return clone;
};
oFF.InARsDimension.prototype.copyInARsDimension = function(origin)
{
	this.setupWithNameText(origin.getName(), origin.getText());
	this.m_fields = oFF.XCollectionUtils.createListOfClones(origin.m_fields);
	if (oFF.notNull(origin.m_displayValues))
	{
		this.m_displayValues = origin.m_displayValues.clone();
	}
	if (oFF.notNull(origin.m_drillStates))
	{
		this.m_drillStates = origin.m_drillStates.clone();
	}
	this.m_memberIndexes = origin.m_memberIndexes.clone();
	if (oFF.notNull(origin.m_parentIndexes))
	{
		this.m_parentIndexes = origin.m_parentIndexes.clone();
	}
	if (oFF.notNull(origin.m_drillGroupIndexes))
	{
		this.m_drillGroupIndexes = origin.m_drillGroupIndexes.clone();
	}
	if (oFF.notNull(origin.m_nodeIds))
	{
		this.m_nodeIds = origin.m_nodeIds.clone();
	}
	if (oFF.notNull(origin.m_childCountValues))
	{
		this.m_childCountValues = origin.m_childCountValues.clone();
	}
	this.m_memberTypesEncoded = origin.m_memberTypesEncoded.clone();
	this.m_memberTypes = origin.m_memberTypes.createArrayCopy();
	this.m_keyFieldIndex = origin.m_keyFieldIndex;
	this.m_hierarchyNavigationFieldIndex = origin.m_hierarchyNavigationFieldIndex;
	this.m_textFieldIndex = origin.m_textFieldIndex;
	this.m_hierarchyPathFieldIndex = origin.m_hierarchyPathFieldIndex;
	this.m_namePathFieldIndex = origin.m_namePathFieldIndex;
	this.m_isClustered = origin.m_isClustered;
	if (oFF.notNull(this.m_absoluteLevels))
	{
		this.m_absoluteLevels = origin.m_absoluteLevels.clone();
	}
	this.m_isHierarchyActive = origin.m_isHierarchyActive;
	this.m_hierarchyName = origin.m_hierarchyName;
	this.m_hasTimeDependentHierarchies = origin.m_hasTimeDependentHierarchies;
	this.m_hasVersionDependentHierarchies = origin.m_hasVersionDependentHierarchies;
	this.m_dimensionType = origin.m_dimensionType;
	this.m_childAlignment = origin.m_childAlignment;
	if (oFF.notNull(origin.m_lbhToUdhConversionProperties))
	{
		this.m_lbhToUdhConversionProperties = origin.m_lbhToUdhConversionProperties.clone();
	}
	this.m_dimensionDrillGroups = oFF.XCollectionUtils.createListOfClones(origin.m_dimensionDrillGroups);
	this.m_measureIdIndex = origin.m_measureIdIndex;
	this.m_maxDrillLevel = origin.m_maxDrillLevel;
	this.m_maxRuntimeLevel = origin.m_maxRuntimeLevel;
};
oFF.InARsDimension.prototype.extractDimensionDrillGroup = function(inaDimDrillGroups)
{
	this.m_dimensionDrillGroups = oFF.XCollectionUtils.map(inaDimDrillGroups, (drillGroup) => {
		let dg = drillGroup.asStructure();
		let dimName = dg.getStringByKey("Name");
		let dimDescription = dg.getStringByKey("Description");
		let dimType = dg.getIntegerByKey("DimensionType");
		return oFF.RsDrillGroupDimension.create(dimName, dimDescription, oFF.QInAConverter.lookupDimensionType(dimType));
	});
};
oFF.InARsDimension.prototype.extractFieldIndices = function(inaAttributes, rsDefAxis, dimension, flatKeyField, hierarchyKeyField, hierarchyNavigationField, textField, hierarchyPathField, namePathField)
{
	let flatKeyIndex = -1;
	let hierarchyKeyIndex = -1;
	let otherTextFieldIndex = -1;
	this.m_fields = oFF.XList.create();
	let inaFieldSize = inaAttributes.size();
	for (let fieldIndex = 0; fieldIndex < inaFieldSize; fieldIndex++)
	{
		let inaField = inaAttributes.getStructureAt(fieldIndex);
		let fieldName = this.getFieldName(inaField);
		let inaPresentationType = inaField.getStringByKey("PresentationType");
		let presentationType = oFF.notNull(inaPresentationType) ? oFF.QInAConverter.lookupPresentationType(inaPresentationType) : inaField.getBooleanByKeyExt("IsKey", false) ? oFF.PresentationType.KEY : oFF.PresentationType.VALUE;
		if (flatKeyIndex < 0 && presentationType === oFF.PresentationType.KEY || oFF.notNull(flatKeyField) && oFF.XString.isEqual(fieldName, flatKeyField.getName()))
		{
			flatKeyIndex = fieldIndex;
		}
		if (hierarchyKeyIndex < 0 && presentationType === oFF.PresentationType.HIERARCHY_KEY || oFF.notNull(hierarchyKeyField) && oFF.XString.isEqual(fieldName, hierarchyKeyField.getName()))
		{
			hierarchyKeyIndex = fieldIndex;
		}
		if (oFF.notNull(hierarchyNavigationField) && oFF.XString.isEqual(fieldName, hierarchyNavigationField.getName()))
		{
			this.m_hierarchyNavigationFieldIndex = fieldIndex;
		}
		if ((oFF.isNull(hierarchyPathField) || this.m_hierarchyPathFieldIndex < 0) && presentationType === oFF.PresentationType.HIERARCHY_PATH || oFF.notNull(hierarchyPathField) && oFF.XString.isEqual(fieldName, hierarchyPathField.getName()))
		{
			this.m_hierarchyPathFieldIndex = fieldIndex;
		}
		if (oFF.notNull(textField) && oFF.XString.isEqual(fieldName, textField.getName()))
		{
			this.m_textFieldIndex = fieldIndex;
		}
		if (oFF.isNull(textField) && presentationType === oFF.PresentationType.HIERARCHY_TEXT)
		{
			this.m_textFieldIndex = fieldIndex;
		}
		if (oFF.isNull(textField) && this.m_textFieldIndex === -1 && presentationType === oFF.PresentationType.TEXT)
		{
			this.m_textFieldIndex = fieldIndex;
		}
		if (oFF.isNull(textField) && this.m_textFieldIndex === -1 && (presentationType === oFF.PresentationType.SHORT_TEXT || presentationType === oFF.PresentationType.MEDIUM_TEXT || presentationType === oFF.PresentationType.LONG_TEXT || presentationType === oFF.PresentationType.XL_LONG_TEXT))
		{
			otherTextFieldIndex = fieldIndex;
		}
		if ((oFF.isNull(namePathField) || this.m_namePathFieldIndex < 0) && presentationType === oFF.PresentationType.NAME_PATH || oFF.notNull(namePathField) && oFF.XString.isEqual(fieldName, namePathField.getName()))
		{
			this.m_namePathFieldIndex = fieldIndex;
		}
		if (oFF.notNull(dimension) && dimension.isMeasureStructure() && oFF.XString.startsWith(fieldName, "1ROWCOUNT"))
		{
			let fieldSufix = oFF.XStringTokenizer.splitString(fieldName, ".").get(1);
			if (oFF.XString.endsWith(dimension.getKeyField().getName(), fieldSufix))
			{
				flatKeyIndex = fieldIndex;
			}
		}
		else if (oFF.isNull(dimension) && rsDefAxis.getConvenienceCommands().getQueryManager().isShallow() && oFF.XString.isEqual(fieldName, "1ROWCOUNT.KEY"))
		{
			flatKeyIndex = fieldIndex;
		}
		if (this.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
		{
			let idFieldName = oFF.XStringUtils.concatenate2(this.getName(), ".ID");
			if (oFF.XString.isEqual(fieldName, idFieldName))
			{
				this.m_measureIdIndex = fieldIndex;
			}
		}
		this.m_fields.add(oFF.InARsField.create(fieldName, inaField));
	}
	this.m_keyFieldIndex = hierarchyKeyIndex === -1 ? flatKeyIndex === -1 ? 0 : flatKeyIndex : hierarchyKeyIndex;
	if ((this.m_textFieldIndex === -1 && otherTextFieldIndex !== -1) || (this.m_textFieldIndex === this.m_measureIdIndex))
	{
		this.m_textFieldIndex = otherTextFieldIndex;
	}
};
oFF.InARsDimension.prototype.getAbsoluteLevelValues = function()
{
	return this.m_absoluteLevels;
};
oFF.InARsDimension.prototype.getChildCountValues = function()
{
	return this.m_childCountValues;
};
oFF.InARsDimension.prototype.getDimensionDrillGroups = function()
{
	return this.m_dimensionDrillGroups;
};
oFF.InARsDimension.prototype.getDimensionType = function()
{
	return this.m_dimensionType;
};
oFF.InARsDimension.prototype.getDisplayValues = function()
{
	return this.m_displayValues;
};
oFF.InARsDimension.prototype.getDrillGroupIndexes = function()
{
	return this.m_drillGroupIndexes;
};
oFF.InARsDimension.prototype.getDrillStates = function()
{
	return this.m_drillStates;
};
oFF.InARsDimension.prototype.getFieldName = function(inaField)
{
	let name = inaField.getStringByKey("Name");
	if (oFF.notNull(this.m_lbhToUdhConversionProperties))
	{
		name = oFF.XString.replace(name, this.m_lbhToUdhConversionProperties.getUdhName(), this.m_lbhToUdhConversionProperties.getDimensionName());
		inaField.putString("Name", name);
	}
	return name;
};
oFF.InARsDimension.prototype.getFields = function()
{
	return this.m_fields;
};
oFF.InARsDimension.prototype.getHierarchyName = function()
{
	return this.m_hierarchyName;
};
oFF.InARsDimension.prototype.getHierarchyNavigationKeyIndex = function()
{
	return this.m_hierarchyNavigationFieldIndex;
};
oFF.InARsDimension.prototype.getHierarchyPathFieldIndex = function()
{
	return this.m_hierarchyPathFieldIndex;
};
oFF.InARsDimension.prototype.getKeyFieldIndex = function()
{
	return this.m_keyFieldIndex;
};
oFF.InARsDimension.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_childAlignment;
};
oFF.InARsDimension.prototype.getMaxDrillLevel = function()
{
	return this.m_maxDrillLevel;
};
oFF.InARsDimension.prototype.getMaxRuntimeLevel = function()
{
	return this.m_maxRuntimeLevel;
};
oFF.InARsDimension.prototype.getMeasureIDFieldIndex = function()
{
	return this.m_measureIdIndex;
};
oFF.InARsDimension.prototype.getMemberIndexes = function()
{
	return this.m_memberIndexes;
};
oFF.InARsDimension.prototype.getMemberType = function(memberIndex)
{
	if (oFF.isNull(this.m_memberTypes) || memberIndex >= this.m_memberTypes.size())
	{
		return oFF.MemberType.MEMBER;
	}
	return this.m_memberTypes.get(memberIndex);
};
oFF.InARsDimension.prototype.getNamePathFieldIndex = function()
{
	return this.m_namePathFieldIndex;
};
oFF.InARsDimension.prototype.getNodeIds = function()
{
	return this.m_nodeIds;
};
oFF.InARsDimension.prototype.getParentIndexes = function()
{
	return this.m_parentIndexes;
};
oFF.InARsDimension.prototype.getTextFieldIndex = function()
{
	return this.m_textFieldIndex;
};
oFF.InARsDimension.prototype.hasDefaultLowerLevelNodeAlignment = function()
{
	return this.m_childAlignment === oFF.Alignment.DEFAULT_VALUE;
};
oFF.InARsDimension.prototype.hasTimeDependentHierarchies = function()
{
	return this.m_hasTimeDependentHierarchies;
};
oFF.InARsDimension.prototype.hasVersionDependentHierarchies = function()
{
	return this.m_hasVersionDependentHierarchies;
};
oFF.InARsDimension.prototype.isClustered = function()
{
	return this.m_isClustered;
};
oFF.InARsDimension.prototype.isHierarchyActive = function()
{
	return this.m_isHierarchyActive;
};
oFF.InARsDimension.prototype.releaseObject = function()
{
	this.m_fields = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_fields);
	this.m_displayValues = oFF.XObjectExt.release(this.m_displayValues);
	this.m_drillStates = oFF.XObjectExt.release(this.m_drillStates);
	this.m_memberIndexes = oFF.XObjectExt.release(this.m_memberIndexes);
	this.m_parentIndexes = oFF.XObjectExt.release(this.m_parentIndexes);
	this.m_drillGroupIndexes = oFF.XObjectExt.release(this.m_drillGroupIndexes);
	this.m_nodeIds = oFF.XObjectExt.release(this.m_nodeIds);
	this.m_memberTypesEncoded = oFF.XObjectExt.release(this.m_memberTypesEncoded);
	this.m_memberTypes = oFF.XObjectExt.release(this.m_memberTypes);
	this.m_childCountValues = oFF.XObjectExt.release(this.m_childCountValues);
	this.m_absoluteLevels = oFF.XObjectExt.release(this.m_absoluteLevels);
	this.m_dimensionDrillGroups = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dimensionDrillGroups);
	this.m_dimensionType = null;
	this.m_hierarchyName = null;
	this.m_childAlignment = null;
	oFF.DfNameTextObject.prototype.releaseObject.call( this );
};
oFF.InARsDimension.prototype.setMemberTypes = function(encodedValues)
{
	this.m_memberTypesEncoded = encodedValues;
	this.m_memberTypes = oFF.XArray.create(this.m_memberTypesEncoded.size());
	for (let index = 0; this.m_memberTypesEncoded.hasNextValue(); index++)
	{
		let memberTypeValue = this.m_memberTypesEncoded.getNextIntegerValue();
		this.m_memberTypes.set(index, oFF.QInAConverter.lookupMemberType(memberTypeValue));
	}
};
oFF.InARsDimension.prototype.setName = function(name)
{
	this.m_name = name;
};
oFF.InARsDimension.prototype.setupExt = function(name, inaAttributes, inaDimDrillGroup, dimension, requestContext, rsDefAxis, hierarchyName, dimensionType, childAlignment, lbhToUdhConversionProperties, isClustered, maxDrillLevel, maxRuntimeLevel, hasTimeDependentHierarchies, hasVersionDependentHierarchies)
{
	this._setupInternal(name);
	this.m_keyFieldIndex = -1;
	this.m_hierarchyNavigationFieldIndex = -1;
	this.m_textFieldIndex = -1;
	this.m_hierarchyPathFieldIndex = -1;
	this.m_namePathFieldIndex = -1;
	this.m_hierarchyName = hierarchyName;
	this.m_hasTimeDependentHierarchies = hasTimeDependentHierarchies;
	this.m_hasVersionDependentHierarchies = hasVersionDependentHierarchies;
	this.m_dimensionType = dimensionType;
	this.m_childAlignment = childAlignment;
	this.m_lbhToUdhConversionProperties = lbhToUdhConversionProperties;
	this.m_isClustered = isClustered;
	this.m_measureIdIndex = -1;
	this.m_maxDrillLevel = maxDrillLevel;
	this.m_maxRuntimeLevel = maxRuntimeLevel;
	let isValueHelp = requestContext === oFF.QContextType.SELECTOR;
	let rsDimension = oFF.XCollectionUtils.getByName(rsDefAxis.getRsDimensions(), name);
	this.m_isHierarchyActive = this._isHierarchyActiveForContext(rsDimension, hierarchyName, isValueHelp);
	if (oFF.notNull(inaDimDrillGroup))
	{
		this.extractDimensionDrillGroup(inaDimDrillGroup);
	}
	if (oFF.notNull(inaAttributes))
	{
		let flatKeyField = null;
		let hierarchyKeyField = null;
		let hierarchyNavigationField = null;
		let textField = null;
		let hierarchyPathField = null;
		let namePathField = null;
		if (oFF.notNull(dimension))
		{
			flatKeyField = dimension.getFlatKeyField();
			textField = dimension.getTextField();
			namePathField = dimension.getNamePathField();
			this.m_dimensionType = dimension.getDimensionType();
			if (this.m_isHierarchyActive || isValueHelp)
			{
				hierarchyKeyField = dimension.getHierarchyKeyField();
				hierarchyNavigationField = dimension.getHierarchyNavigationField();
				hierarchyPathField = dimension.getHierarchyPathField();
			}
		}
		this.extractFieldIndices(inaAttributes, rsDefAxis, dimension, flatKeyField, hierarchyKeyField, hierarchyNavigationField, textField, hierarchyPathField, namePathField);
	}
};
oFF.InARsDimension.prototype.setupFromRsTuple = function(rsTuple)
{
	let rsTupleProperty = rsTuple.getStructureByKey("DisplayLevel");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_displayValues = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("Level");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_absoluteLevels = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("DrillState");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_drillStates = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("MemberIndexes");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_memberIndexes = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("ParentIndexes");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_parentIndexes = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("DrillGroupIndexes");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_drillGroupIndexes = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("TupleElementIds");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_nodeIds = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
	rsTupleProperty = rsTuple.getStructureByKey("ChildCount");
	if (oFF.notNull(rsTupleProperty))
	{
		this.m_childCountValues = oFF.InARsEncodedValues.createByStructure(rsTupleProperty);
	}
};
oFF.InARsDimension.prototype.setupNodeAlignmentIfNeeded = function(rsDefAxis)
{
	if (this.m_childAlignment === oFF.Alignment.DEFAULT_VALUE && oFF.XString.startsWith(this.m_name, oFF.InARsDimension.UDH_DIMESION_NAME_PREFIX) && oFF.notNull(this.m_drillGroupIndexes) && this.m_drillGroupIndexes.size() > 0)
	{
		let resultAlignment;
		resultAlignment = rsDefAxis.getResultAlignment();
		if (resultAlignment === oFF.ResultAlignment.TOP)
		{
			this.m_childAlignment = oFF.Alignment.CHILDREN_BELOW_PARENT;
		}
		else if (resultAlignment === oFF.ResultAlignment.BOTTOM)
		{
			this.m_childAlignment = oFF.Alignment.CHILDREN_ABOVE_PARENT;
		}
	}
};

oFF.InARsField = function() {};
oFF.InARsField.prototype = new oFF.DfNameTextObject();
oFF.InARsField.prototype._ff_c = "InARsField";

oFF.InARsField.create = function(name, inaField)
{
	let object = new oFF.InARsField();
	let fieldText = inaField.getStringByKey("Description");
	let valueType = oFF.QInAConverter.lookupValueType(inaField.getStringByKey("ValueType"));
	let presentationType;
	let inaPresentationType = inaField.getStringByKey("PresentationType");
	if (oFF.isNull(inaPresentationType))
	{
		presentationType = oFF.PresentationType.UNDEFINED;
	}
	else
	{
		presentationType = oFF.QInAConverter.lookupPresentationType(inaPresentationType);
	}
	let obtainability = inaField.getStringByKeyExt("Obtainability", "Always");
	let isVisible = oFF.XString.isEqual("Always", obtainability);
	let inaValueExceptions = inaField.getListByKey("ValuesException");
	let inaValues = inaField.getListByKey("Values");
	let mimeType = inaField.getStringByKey("MIMEType");
	let isHierarchyNavField = inaField.getBooleanByKeyExt("IsNavigation", false);
	let longestAttribute = inaField.getStringByKey("LongestAttribute");
	object.setupExt(name, fieldText, inaValues, isVisible, inaValueExceptions, valueType, presentationType, mimeType, isHierarchyNavField, longestAttribute);
	return object;
};
oFF.InARsField.prototype.m_isHierarchyNavField = false;
oFF.InARsField.prototype.m_isVisible = false;
oFF.InARsField.prototype.m_longestAttribute = null;
oFF.InARsField.prototype.m_mimeType = null;
oFF.InARsField.prototype.m_presentationType = null;
oFF.InARsField.prototype.m_valueExceptions = null;
oFF.InARsField.prototype.m_valueType = null;
oFF.InARsField.prototype.m_values = null;
oFF.InARsField.prototype.cloneExt = function(flags)
{
	let clone = new oFF.InARsField();
	let values = oFF.isNull(this.m_values) ? null : this.m_values.getPermaCopy();
	let valuesExceptions = oFF.isNull(this.m_valueExceptions) ? null : this.m_valueExceptions.getPermaCopy();
	clone.setupExt(this.getName(), this.getText(), values, this.m_isVisible, valuesExceptions, this.m_valueType, this.m_presentationType, this.m_mimeType, this.m_isHierarchyNavField, this.m_longestAttribute);
	return clone;
};
oFF.InARsField.prototype.getLongestAttribute = function()
{
	return this.m_longestAttribute;
};
oFF.InARsField.prototype.getMimeType = function()
{
	return this.m_mimeType;
};
oFF.InARsField.prototype.getPresentationType = function()
{
	return this.m_presentationType;
};
oFF.InARsField.prototype.getValueExceptionAt = function(index)
{
	return oFF.isNull(this.m_valueExceptions) ? -1 : this.m_valueExceptions.getIntegerAt(index);
};
oFF.InARsField.prototype.getValueType = function()
{
	return this.m_valueType;
};
oFF.InARsField.prototype.getValues = function()
{
	return this.m_values;
};
oFF.InARsField.prototype.isHierarchyNavigationField = function()
{
	return this.m_isHierarchyNavField;
};
oFF.InARsField.prototype.isVisible = function()
{
	return this.m_isVisible;
};
oFF.InARsField.prototype.releaseObject = function()
{
	this.m_valueType = null;
	this.m_longestAttribute = null;
	this.m_presentationType = null;
	this.m_values = oFF.XObjectExt.release(this.m_values);
	this.m_valueExceptions = oFF.XObjectExt.release(this.m_valueExceptions);
	oFF.DfNameTextObject.prototype.releaseObject.call( this );
};
oFF.InARsField.prototype.setMimeType = function(mimeType)
{
	this.m_mimeType = mimeType;
};
oFF.InARsField.prototype.setupExt = function(name, text, values, isVisible, inaValueExceptions, valueType, presentationType, mimeType, isHierarchyNavField, longestAttribute)
{
	this.setupWithNameText(name, text);
	this.m_values = values;
	this.m_isVisible = isVisible;
	this.m_valueExceptions = inaValueExceptions;
	this.m_valueType = valueType;
	this.m_presentationType = presentationType;
	this.m_mimeType = mimeType;
	this.m_isHierarchyNavField = isHierarchyNavField;
	this.m_longestAttribute = longestAttribute;
};

oFF.QInAImportAction = function() {};
oFF.QInAImportAction.prototype = new oFF.SyncAction();
oFF.QInAImportAction.prototype._ff_c = "QInAImportAction";

oFF.QInAImportAction.create = function(context, componentType, inaElement, modelComponent, parentComponent, modelContext)
{
	let importAction = new oFF.QInAImportAction();
	importAction.setupAction(null, null, null, context);
	importAction.m_componentType = componentType;
	importAction.m_inaElement = inaElement;
	importAction.m_modelComponent = modelComponent;
	importAction.m_parentComponent = parentComponent;
	importAction.m_modelContext = modelContext;
	return importAction;
};
oFF.QInAImportAction.prototype.m_componentType = null;
oFF.QInAImportAction.prototype.m_inaElement = null;
oFF.QInAImportAction.prototype.m_modelComponent = null;
oFF.QInAImportAction.prototype.m_modelContext = null;
oFF.QInAImportAction.prototype.m_parentComponent = null;
oFF.QInAImportAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onImportDone(extResult, data, customIdentifier);
};
oFF.QInAImportAction.prototype.processSynchronization = function(syncType)
{
	let importer = this.getActionContext();
	importer.processImportComponent(syncType, (component) => {
		this.setData(component);
		this.addAllMessages(importer);
		this.endSync();
	}, this.m_componentType, this.m_inaElement, this.m_modelComponent, this.m_parentComponent, this.m_modelContext);
	return true;
};
oFF.QInAImportAction.prototype.releaseObjectInternal = function()
{
	this.m_componentType = null;
	this.m_inaElement = null;
	this.m_modelComponent = null;
	this.m_parentComponent = null;
	this.m_modelContext = null;
};

oFF.DfDocumentsStoreAction = function() {};
oFF.DfDocumentsStoreAction.prototype = new oFF.SyncAction();
oFF.DfDocumentsStoreAction.prototype._ff_c = "DfDocumentsStoreAction";

oFF.DfDocumentsStoreAction.DEFAULT_MIME_TYPE = "text/plain";
oFF.DfDocumentsStoreAction.create = function(syncType, listener, customIdentifier, context, connectionContainer, documentServiceRequest)
{
	let qInfoObjectGetAction = new oFF.DfDocumentsStoreAction();
	qInfoObjectGetAction.setupDocumentStoreAction(syncType, listener, customIdentifier, context, connectionContainer, documentServiceRequest);
	return qInfoObjectGetAction;
};
oFF.DfDocumentsStoreAction.createAndRun = function(syncType, listener, customIdentifier, context, connectionContainer, documentServiceRequest)
{
	let qInfoObjectGetAction = new oFF.DfDocumentsStoreAction();
	qInfoObjectGetAction.setupDocumentStoreActionAndRun(syncType, listener, customIdentifier, context, connectionContainer, documentServiceRequest);
	return qInfoObjectGetAction;
};
oFF.DfDocumentsStoreAction.prototype.m_connectionContainer = null;
oFF.DfDocumentsStoreAction.prototype.m_documentServiceRequest = null;
oFF.DfDocumentsStoreAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onProviderFetch(extResult, data, customIdentifier);
};
oFF.DfDocumentsStoreAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid())
	{
		let result = null;
		if (oFF.notNull(response) && response.getRootElement() !== null)
		{
			let root = oFF.PrFactory.createStructureDeepCopy(response.getRootElement());
			oFF.InAHelper.importMessages(root, this);
			if (this.isValid())
			{
				result = this.parseDocumentsServiceResponse(root);
			}
			else
			{
				this.log(this.getMessages().toString());
			}
		}
		this.setData(result);
	}
	this.endSync();
	this.releaseObjectInternal();
};
oFF.DfDocumentsStoreAction.prototype.parseDocumentsServiceResponse = function(root)
{
	let result = oFF.DocumentsServiceResponse.create();
	let directoryList = root.getListByKey("Directories");
	for (let i = 0; i < directoryList.size(); i++)
	{
		let directoryStructure = directoryList.getStructureAt(i);
		let path = directoryStructure.getStringByKey("Path");
		let filesList = directoryStructure.getListByKey("Files");
		let directory = result.addDirectoryByPath(path);
		this.parseFileListToDirectory(filesList, directory);
	}
	return result;
};
oFF.DfDocumentsStoreAction.prototype.parseFileListToDirectory = function(filesList, directory)
{
	for (let i = 0; i < filesList.size(); i++)
	{
		let fileStructure = filesList.getStructureAt(i);
		let fileObj = directory.addFileByName(fileStructure.getStringByKey("Name"));
		fileObj.setActiveVersion(fileStructure.getStringByKey("ActiveVersion"));
		let versionsList = fileStructure.getListByKey("Versions");
		for (let j = 0; j < versionsList.size(); j++)
		{
			let versionStruct = versionsList.getStructureAt(j);
			let versionObj = fileObj.addVersionByName(versionStruct.getStringByKey("Version"));
			versionObj.setOwner(versionStruct.getStringByKey("Owner"));
			versionObj.setTimestamp(oFF.XDateTime.createDateTimeSafe(versionStruct.getStringByKey("Timestamp")));
			let content = oFF.XContent.createContent();
			content.setContentType(oFF.ContentType.lookupByMimeType(versionStruct.getStringByKeyExt("MimeType", oFF.DfDocumentsStoreAction.DEFAULT_MIME_TYPE)));
			content.setString(versionStruct.getStringByKey("Content"));
			versionObj.setContent(content);
			if (versionStruct.hasStringByKey("Properties"))
			{
				let propertiesStructure = oFF.JsonParserFactory.createFromSafeString(versionStruct.getStringByKey("Properties")).asStructure();
				versionObj.setProperties(propertiesStructure);
			}
		}
	}
};
oFF.DfDocumentsStoreAction.prototype.processSynchronization = function(syncType)
{
	let rpcFunction = this.m_connectionContainer.newRpcFunctionByService(oFF.ServerService.DOCUMENTS);
	rpcFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
	let request = rpcFunction.getRpcRequest();
	request.setRequestStructure(this.serialize());
	rpcFunction.processFunctionExecution(syncType, this, null);
	return true;
};
oFF.DfDocumentsStoreAction.prototype.releaseObjectInternal = function()
{
	this.m_connectionContainer = null;
	this.m_documentServiceRequest = oFF.XObjectExt.release(this.m_documentServiceRequest);
};
oFF.DfDocumentsStoreAction.prototype.serialize = function()
{
	let iPrStructure = oFF.PrFactory.createStructure();
	let documentsStructure = iPrStructure.putNewStructure("Documents");
	let serverMetadata = this.m_connectionContainer.getSystemConnect().getServerMetadata();
	let capabilities = oFF.InACapabilitiesProvider.create(this.getSession(), serverMetadata, oFF.ProviderType.DOCUMENTS, null).getDocumentCapabilities();
	this.serializeCapabilitiesStructure(documentsStructure, capabilities);
	this.serializeDocumentsRequest(documentsStructure);
	return iPrStructure;
};
oFF.DfDocumentsStoreAction.prototype.serializeCapabilitiesStructure = function(iPrStructure, capabilities)
{
	let prListC = iPrStructure.putNewList("Capabilities");
	prListC.addAllStrings(capabilities.getSortedCapabilityNames());
	return prListC;
};
oFF.DfDocumentsStoreAction.prototype.serializeDocumentDirectoryRequest = function(documentStruct, documentObj)
{
	documentStruct.putString("InstanceId", this.m_documentServiceRequest.getInstanceId());
	documentStruct.putString("Path", documentObj.getPath());
	let prList = documentStruct.putNewList("Request");
	let documentRequests = documentObj.getDocumentsRequests();
	for (let i = 0; i < documentRequests.size(); i++)
	{
		let documentRequestObj = documentRequests.get(i);
		if (oFF.XCollectionUtils.hasElements(documentRequestObj.getDocuments()))
		{
			this.serializeDocumentRequest(prList.addNewStructure(), documentRequestObj);
		}
	}
};
oFF.DfDocumentsStoreAction.prototype.serializeDocumentFile = function(fileStructure, fileObj)
{
	fileStructure.putString("Name", fileObj.getName());
	if (fileObj.getContent() !== null)
	{
		fileStructure.putString("Content", fileObj.getContent().getString());
		let contentType = fileObj.getContent().getContentType();
		if (oFF.isNull(contentType))
		{
			contentType = oFF.ContentType.TEXT_PLAIN;
		}
		fileStructure.putString("MimeType", contentType.getMimeType());
		if (fileObj.getProperties() !== null)
		{
			fileStructure.putString("Properties", fileObj.getProperties().toString());
		}
	}
};
oFF.DfDocumentsStoreAction.prototype.serializeDocumentRequest = function(documentRequestStructure, documentRequestObj)
{
	let action = documentRequestObj.getDocumentRequestAction();
	if (action === oFF.DocumentsRequestAction.GET)
	{
		documentRequestStructure.putString("Action", "Get");
		documentRequestStructure.putBoolean("WithVersions", documentRequestObj.isWithVersions());
	}
	else if (action === oFF.DocumentsRequestAction.PUT)
	{
		documentRequestStructure.putString("Action", "Put");
	}
	else if (action === oFF.DocumentsRequestAction.DELETE)
	{
		documentRequestStructure.putString("Action", "Delete");
	}
	let filesPrList = documentRequestStructure.putNewList("Files");
	let filesObjList = documentRequestObj.getDocuments();
	for (let i = 0; i < filesObjList.size(); i++)
	{
		this.serializeDocumentFile(filesPrList.addNewStructure(), filesObjList.get(i));
	}
};
oFF.DfDocumentsStoreAction.prototype.serializeDocumentsRequest = function(documentsStructure)
{
	documentsStructure.putStringNotNullAndNotEmpty("DataArea", this.m_documentServiceRequest.getDataArea());
	let documentsPrList = documentsStructure.putNewList("DocumentsRequest");
	let documentsObjList = this.m_documentServiceRequest.getDocumentsDirectoryRequests();
	for (let i = 0; i < documentsObjList.size(); i++)
	{
		this.serializeDocumentDirectoryRequest(documentsPrList.addNewStructure(), documentsObjList.get(i));
	}
};
oFF.DfDocumentsStoreAction.prototype.setupDocumentStoreAction = function(syncType, listener, customIdentifier, context, connectionContainer, documentServiceRequest)
{
	this.m_connectionContainer = connectionContainer;
	this.m_documentServiceRequest = documentServiceRequest;
	this.setupAction(syncType, listener, customIdentifier, context);
};
oFF.DfDocumentsStoreAction.prototype.setupDocumentStoreActionAndRun = function(syncType, listener, customIdentifier, context, connectionContainer, documentServiceRequest)
{
	this.m_connectionContainer = connectionContainer;
	this.m_documentServiceRequest = documentServiceRequest;
	this.setupActionAndRun(syncType, listener, customIdentifier, context);
};

oFF.InAFusionResult = function() {};
oFF.InAFusionResult.prototype = new oFF.DfProcessContext();
oFF.InAFusionResult.prototype._ff_c = "InAFusionResult";

oFF.InAFusionResult.create = function(application, config)
{
	let newObj = new oFF.InAFusionResult();
	newObj.setupProcessContext(application.getProcess());
	newObj.m_config = config;
	newObj.m_application = application;
	newObj.m_layers = oFF.XList.create();
	return newObj;
};
oFF.InAFusionResult.prototype.m_application = null;
oFF.InAFusionResult.prototype.m_capabilities = null;
oFF.InAFusionResult.prototype.m_config = null;
oFF.InAFusionResult.prototype.m_connectionContainer = null;
oFF.InAFusionResult.prototype.m_cubeDataSource = null;
oFF.InAFusionResult.prototype.m_exporter = null;
oFF.InAFusionResult.prototype.m_layers = null;
oFF.InAFusionResult.prototype.m_metadataContent = null;
oFF.InAFusionResult.prototype.m_modelContent = null;
oFF.InAFusionResult.prototype.m_repoContent = null;
oFF.InAFusionResult.prototype.m_serverMetadata = null;
oFF.InAFusionResult.prototype.addLayer = function(layer)
{
	this.m_layers.add(layer);
};
oFF.InAFusionResult.prototype.getApplication = function()
{
	return this.m_application;
};
oFF.InAFusionResult.prototype.getCapabilities = function()
{
	return this.m_capabilities;
};
oFF.InAFusionResult.prototype.getConfig = function()
{
	return this.m_config;
};
oFF.InAFusionResult.prototype.getConnectionContainer = function()
{
	return this.m_connectionContainer;
};
oFF.InAFusionResult.prototype.getDataSource = function()
{
	return this.m_cubeDataSource;
};
oFF.InAFusionResult.prototype.getExporter = function()
{
	return this.m_exporter;
};
oFF.InAFusionResult.prototype.getLayer = function(type)
{
	for (let i = 0; i < this.m_layers.size(); i++)
	{
		let layer = this.m_layers.get(i);
		if (layer.getComponentType() === type)
		{
			return layer;
		}
	}
	return null;
};
oFF.InAFusionResult.prototype.getMainCapabilities = function()
{
	return this.m_capabilities.getActiveCapabilities();
};
oFF.InAFusionResult.prototype.getMetadataContent = function()
{
	return this.m_metadataContent;
};
oFF.InAFusionResult.prototype.getModelContent = function()
{
	return this.m_modelContent;
};
oFF.InAFusionResult.prototype.getRepositoryContent = function()
{
	return this.m_repoContent;
};
oFF.InAFusionResult.prototype.getServerMetadata = function()
{
	return this.m_serverMetadata;
};
oFF.InAFusionResult.prototype.setCapabilities = function(capabilities)
{
	this.m_capabilities = capabilities;
};
oFF.InAFusionResult.prototype.setConnectionContainer = function(connectionContainer)
{
	this.m_connectionContainer = connectionContainer;
};
oFF.InAFusionResult.prototype.setDataSource = function(dataSource)
{
	this.m_cubeDataSource = dataSource;
};
oFF.InAFusionResult.prototype.setExporter = function(exporter)
{
	this.m_exporter = exporter;
};
oFF.InAFusionResult.prototype.setMetadataContent = function(metadata)
{
	this.m_metadataContent = metadata;
};
oFF.InAFusionResult.prototype.setModelResponse = function(model)
{
	this.m_modelContent = model;
};
oFF.InAFusionResult.prototype.setRepositoryContent = function(repo)
{
	this.m_repoContent = repo;
};
oFF.InAFusionResult.prototype.setServerMetadata = function(serverMetadata)
{
	this.m_serverMetadata = serverMetadata;
};

oFF.InARsAxisProvider = function() {};
oFF.InARsAxisProvider.prototype = new oFF.DfRsAxisProvider();
oFF.InARsAxisProvider.prototype._ff_c = "InARsAxisProvider";

oFF.InARsAxisProvider.create = function(application, axisType, requestContext, supportsSapDateFormat, supportsObtainability)
{
	if (oFF.AxisType.ROWS !== axisType && oFF.AxisType.COLUMNS !== axisType)
	{
		throw oFF.XException.createIllegalStateException("illegal axis type");
	}
	let provider = new oFF.InARsAxisProvider();
	provider.setupProvider(application, requestContext, supportsSapDateFormat, supportsObtainability);
	return provider;
};
oFF.InARsAxisProvider.prototype.m_alertLevel = null;
oFF.InARsAxisProvider.prototype.m_cellValueTypes = null;
oFF.InARsAxisProvider.prototype.m_complexUnitIndices = null;
oFF.InARsAxisProvider.prototype.m_currentIndex = 0;
oFF.InARsAxisProvider.prototype.m_dataCount = 0;
oFF.InARsAxisProvider.prototype.m_decimalPlaces = null;
oFF.InARsAxisProvider.prototype.m_exceptionNames = null;
oFF.InARsAxisProvider.prototype.m_lbhToUdhConversionProperties = null;
oFF.InARsAxisProvider.prototype.m_longestCellValuesFormatted = null;
oFF.InARsAxisProvider.prototype.m_longestCellValuesRounded = null;
oFF.InARsAxisProvider.prototype.m_numericShifts = null;
oFF.InARsAxisProvider.prototype.m_requestContext = null;
oFF.InARsAxisProvider.prototype.m_resultAlignment = null;
oFF.InARsAxisProvider.prototype.m_rsDimensionsList = null;
oFF.InARsAxisProvider.prototype.m_supportsObtainability = false;
oFF.InARsAxisProvider.prototype.m_supportsSapDateFormat = false;
oFF.InARsAxisProvider.prototype.m_tupleElementsCount = 0;
oFF.InARsAxisProvider.prototype.m_tuplesCount = 0;
oFF.InARsAxisProvider.prototype.m_tuplesCountTotal = 0;
oFF.InARsAxisProvider.prototype.m_unitDescriptions = null;
oFF.InARsAxisProvider.prototype.m_unitTypes = null;
oFF.InARsAxisProvider.prototype.m_units = null;
oFF.InARsAxisProvider.prototype.computeQueryDataCellName = function(line, measureIdValue, dimension)
{
	let queryModel = dimension.getQueryModel();
	if (oFF.notNull(queryModel) && queryModel.getModelCapabilities().supportsDataCells() && oFF.XStringUtils.isNotNullAndNotEmpty(measureIdValue))
	{
		let dimension1 = queryModel.getDimensionByName(dimension.getName());
		let dimension1Type = dimension1.getDimensionType();
		let twoStructureQuery = queryModel.getNonMeasureDimension() !== null;
		let measureName = line.getDimensionMemberName();
		if (dimension1Type.isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
		{
			queryModel.stopEventing();
			let queryDataCells = queryModel.getQueryDataCells();
			let cells = queryDataCells.getByMemberName(measureName);
			for (let i = 0; i < cells.size(); i++)
			{
				let iqDataCell = cells.get(i);
				if (oFF.XStringUtils.isNullOrEmpty(iqDataCell.getName()))
				{
					let measureIdTrimmed = oFF.XString.trim(measureIdValue);
					if (!twoStructureQuery)
					{
						iqDataCell.setName(measureIdTrimmed);
						queryDataCells.removeElement(iqDataCell);
						queryDataCells.add(iqDataCell);
					}
					else
					{
						if (dimension1.getId() === 2000000908)
						{
							iqDataCell.setMeasure1IdValue(measureIdTrimmed);
						}
						else if (dimension1.getId() === 2000000907)
						{
							iqDataCell.setMeasure2IdValue(measureIdTrimmed);
						}
						let measure1IdValue = iqDataCell.getMeasure1IdValue();
						let measure2IdValue = iqDataCell.getMeasure2IdValue();
						let bothFilled = oFF.XStringUtils.isNotNullAndNotEmpty(measure1IdValue) && oFF.XStringUtils.isNotNullAndNotEmpty(measure2IdValue);
						if (bothFilled)
						{
							let measure2Id = oFF.XInteger.convertFromString(measure2IdValue);
							let measure1Id = oFF.XInteger.convertFromString(measure1IdValue);
							let newName = measure1Id + 10000 * measure2Id;
							let newNameString = oFF.XInteger.convertToString(newName);
							iqDataCell.setName(newNameString);
							queryDataCells.removeElement(iqDataCell);
							queryDataCells.add(iqDataCell);
							iqDataCell.setMeasure1IdValue(null);
							iqDataCell.setMeasure2IdValue(null);
						}
					}
				}
			}
			queryModel.resumeEventing();
		}
	}
};
oFF.InARsAxisProvider.prototype.copyInARsAxisProvider = function(origin)
{
	this.m_dataCount = origin.m_dataCount;
	this.m_tuplesCount = origin.m_tuplesCount;
	this.m_tuplesCountTotal = origin.m_tuplesCountTotal;
	this.m_resultAlignment = origin.m_resultAlignment;
	this.m_tupleElementsCount = origin.m_tupleElementsCount;
	if (oFF.notNull(origin.m_rsDimensionsList))
	{
		let sizeRsDimensions = origin.m_rsDimensionsList.size();
		this.m_rsDimensionsList = oFF.XArray.create(sizeRsDimensions);
		for (let i = 0; i < sizeRsDimensions; i++)
		{
			let inARsDimension = origin.m_rsDimensionsList.get(i);
			this.m_rsDimensionsList.set(i, inARsDimension.clone());
		}
	}
	this.m_supportsObtainability = origin.m_supportsObtainability;
	this.m_supportsSapDateFormat = origin.m_supportsSapDateFormat;
	this.m_currentIndex = -1;
	if (oFF.notNull(origin.m_alertLevel))
	{
		this.m_alertLevel = origin.m_alertLevel.getPermaCopy();
	}
	if (oFF.notNull(origin.m_exceptionNames))
	{
		this.m_exceptionNames = origin.m_exceptionNames.getPermaCopy();
	}
	if (oFF.notNull(origin.m_unitDescriptions))
	{
		this.m_unitDescriptions = origin.m_unitDescriptions.getPermaCopy();
	}
	if (oFF.notNull(origin.m_units))
	{
		this.m_units = origin.m_units.getPermaCopy();
	}
	if (oFF.notNull(origin.m_unitTypes))
	{
		this.m_unitTypes = origin.m_unitTypes.getPermaCopy();
	}
	if (oFF.notNull(origin.m_complexUnitIndices))
	{
		this.m_complexUnitIndices = origin.m_complexUnitIndices.getPermaCopy();
	}
	if (oFF.notNull(origin.m_numericShifts))
	{
		this.m_numericShifts = origin.m_numericShifts.getPermaCopy();
	}
	if (oFF.notNull(origin.m_decimalPlaces))
	{
		this.m_decimalPlaces = origin.m_decimalPlaces.getPermaCopy();
	}
	if (oFF.notNull(origin.m_cellValueTypes))
	{
		this.m_cellValueTypes = origin.m_cellValueTypes.getPermaCopy();
	}
	if (oFF.notNull(origin.m_longestCellValuesRounded))
	{
		this.m_longestCellValuesRounded = origin.m_longestCellValuesRounded.getPermaCopy();
	}
	if (oFF.notNull(origin.m_longestCellValuesFormatted))
	{
		this.m_longestCellValuesFormatted = origin.m_longestCellValuesFormatted.getPermaCopy();
	}
	this.m_requestContext = origin.m_requestContext;
	if (oFF.notNull(origin.m_lbhToUdhConversionProperties))
	{
		this.m_lbhToUdhConversionProperties = origin.m_lbhToUdhConversionProperties.clone();
	}
};
oFF.InARsAxisProvider.prototype.getDataCount = function()
{
	return this.m_dataCount;
};
oFF.InARsAxisProvider.prototype.getDimensionName = function(inaDimension)
{
	let name = inaDimension.getStringByKey("Name");
	if (oFF.notNull(this.m_lbhToUdhConversionProperties) && oFF.XString.isEqual(name, this.m_lbhToUdhConversionProperties.getUdhName()))
	{
		name = this.m_lbhToUdhConversionProperties.getDimensionName();
		inaDimension.putString("Name", name);
	}
	return name;
};
oFF.InARsAxisProvider.prototype.getElementAsListByName = function(ocpStructure, name)
{
	return this.getElementAsListByNameExt(ocpStructure, name, true);
};
oFF.InARsAxisProvider.prototype.getElementAsListByNameExt = function(ocpStructure, name, strict)
{
	let inaElement = ocpStructure.getByKey(name);
	if (oFF.isNull(inaElement))
	{
		return null;
	}
	if (inaElement.isStructure())
	{
		let inaStructure = inaElement;
		let inaValues = inaStructure.getListByKey("Values");
		let valuesSize;
		if (inaStructure.containsKey("Size"))
		{
			valuesSize = inaStructure.getIntegerByKey("Size");
		}
		else if (oFF.XCollectionUtils.hasElements(inaValues))
		{
			valuesSize = inaValues.size();
		}
		else
		{
			valuesSize = 0;
		}
		if (valuesSize !== inaValues.size())
		{
			throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("Indicated size of ", name, " names and actual size differ!"));
		}
		if (valuesSize !== this.m_tuplesCount && (strict || oFF.XCollectionUtils.hasElements(inaValues) && this.m_tuplesCount > 0))
		{
			throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate3("Indicated size of ", name, " names and tuple count differ!"));
		}
		return inaValues;
	}
	return inaElement.isList() ? inaElement : null;
};
oFF.InARsAxisProvider.prototype.getFieldValues = function(dimensionName, fieldName)
{
	let rsDimensionsSize = this.getRsDimensionSize();
	for (let i = 0; i < rsDimensionsSize; i++)
	{
		let rsDimension = this.m_rsDimensionsList.get(i);
		if (oFF.XString.isEqual(rsDimension.getName(), dimensionName))
		{
			let rsField = oFF.XCollectionUtils.findFirst(rsDimension.getFields(), (field) => {
				return oFF.XString.isEqual(field.getName(), fieldName);
			});
			if (oFF.notNull(rsField))
			{
				return oFF.PrUtils.asListOfString(rsField.getValues());
			}
		}
	}
	return oFF.XList.create();
};
oFF.InARsAxisProvider.prototype.getFormattedValue = function(line, inaFieldValues, memberIndex, rsValueType)
{
	if (oFF.isNull(inaFieldValues))
	{
		return "InA Error: No data available";
	}
	let fieldValueType = rsValueType;
	if (fieldValueType === oFF.XValueType.UNSUPPORTED)
	{
		let field = line.getField();
		if (oFF.isNull(field) || field.getMetadata() === null)
		{
			fieldValueType = oFF.XValueType.STRING;
		}
		else
		{
			fieldValueType = field.getValueType();
		}
	}
	let value = inaFieldValues.get(memberIndex);
	let mappedValue = oFF.isNull(value) ? null : value.copyAsPrimitiveXValue();
	let valueException = line.getValueException();
	let isNullValue = valueException === oFF.ValueException.NULL_VALUE;
	let formattedValue;
	if (!isNullValue && fieldValueType.isDateTime())
	{
		try
		{
			mappedValue = oFF.XValueUtil.getValueFromString(oFF.XValueUtil.getString(mappedValue), fieldValueType);
			formattedValue = oFF.XValueUtil.getString(mappedValue);
		}
		catch (t)
		{
			formattedValue = oFF.XValueUtil.getString(mappedValue);
		}
	}
	else
	{
		formattedValue = oFF.XValueUtil.getString(mappedValue);
	}
	return formattedValue;
};
oFF.InARsAxisProvider.prototype.getMemberOverrideText = function(line, rsDimension, memberKey)
{
	let resultSet = this.getCursorAxis().getCursorResultSet();
	let overrideText = resultSet.getDimensionMemberOverrideText(rsDimension.getName(), memberKey);
	if (oFF.isNull(overrideText))
	{
		let dimension = line.getRsDimensionAtCurrentPosition();
		if (oFF.notNull(dimension) && oFF.notNull(memberKey))
		{
			let member = dimension.getStructureMember(memberKey);
			if (oFF.notNull(member))
			{
				if (member.hasOverrideTextDefined())
				{
					overrideText = member.getText();
				}
				else
				{
					let queryModel = member.getQueryModel();
					let dimensionName = dimension.getName();
					if (oFF.notNull(queryModel) && queryModel.getDimensionByName(dimensionName) !== null)
					{
						let strcutureMember = queryModel.getDimensionByName(dimensionName).getStructureMember(memberKey);
						if (oFF.notNull(strcutureMember) && strcutureMember.isModelDefinedMember())
						{
							overrideText = member.getText();
						}
					}
				}
			}
		}
	}
	return overrideText;
};
oFF.InARsAxisProvider.prototype.getOverrideTextForHierarchyPathField = function(line, rsDimension, memberIndex)
{
	let overrideText = null;
	let hierarchyPathFieldIndex = rsDimension.getHierarchyPathFieldIndex();
	if (this.getApplication().getSession().hasFeature(oFF.FeatureToggleOlap.MEMBER_OVERRIDE_TEXTS) && rsDimension.getDimensionType() === oFF.DimensionType.ACCOUNT && hierarchyPathFieldIndex !== -1)
	{
		let rsFields = rsDimension.getFields();
		let hierarchyPathFieldRsField = rsFields.get(hierarchyPathFieldIndex);
		let pathValue = hierarchyPathFieldRsField.getValues().getStringAt(memberIndex);
		let pathStructure = oFF.HierarchyPathUtil.parsePathValues(pathValue);
		let uniqueNameList = oFF.PrUtils.getListProperty(pathStructure, oFF.HierarchyPathUtil.PATH_ELEMENT_UNIQUE_NAME);
		let descriptionList = oFF.PrUtils.getListProperty(pathStructure, oFF.HierarchyPathUtil.PATH_ELEMENT_DESCRIPTION);
		let hasOverrideText = false;
		let memberOverrideText = null;
		for (let i = 0; i < oFF.PrUtils.getListSize(uniqueNameList, 0); i++)
		{
			let uniqueName = oFF.PrUtils.getStringValueElement(uniqueNameList, i, null);
			memberOverrideText = this.getMemberOverrideText(line, rsDimension, uniqueName);
			if (oFF.notNull(memberOverrideText))
			{
				hasOverrideText = true;
				descriptionList.setStringAt(i, memberOverrideText);
			}
		}
		if (hasOverrideText)
		{
			overrideText = oFF.PrUtils.serialize(pathStructure, false, false, 0);
		}
	}
	return overrideText;
};
oFF.InARsAxisProvider.prototype.getOverrideTextForTextField = function(line, rsDimension, memberIndex)
{
	let overrideText = null;
	let dimensionType = rsDimension.getDimensionType();
	if (this.getApplication().getSession().hasFeature(oFF.FeatureToggleOlap.MEMBER_OVERRIDE_TEXTS) && (dimensionType === oFF.DimensionType.ACCOUNT || dimensionType === oFF.DimensionType.MEASURE_STRUCTURE || dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE) && rsDimension.getTextFieldIndex() !== -1)
	{
		let keyFieldIndex = rsDimension.getKeyFieldIndex();
		let rsFields = rsDimension.getFields();
		let keyRsField = rsFields.get(keyFieldIndex);
		let memberKey = keyRsField.getValues().getStringAt(memberIndex);
		overrideText = this.getMemberOverrideText(line, rsDimension, memberKey);
	}
	return overrideText;
};
oFF.InARsAxisProvider.prototype.getResultAlignment = function()
{
	return this.m_resultAlignment;
};
oFF.InARsAxisProvider.prototype.getRsDimensionSize = function()
{
	return oFF.isNull(this.m_rsDimensionsList) ? 0 : this.m_rsDimensionsList.size();
};
oFF.InARsAxisProvider.prototype.getTupleElementsCount = function()
{
	return this.m_tupleElementsCount;
};
oFF.InARsAxisProvider.prototype.getTuplesCount = function()
{
	return this.m_tuplesCount;
};
oFF.InARsAxisProvider.prototype.getTuplesCountTotal = function()
{
	return this.m_tuplesCountTotal;
};
oFF.InARsAxisProvider.prototype.importRsDimensions = function(ocpStructure, queryModel, rsDefAxis)
{
	this.m_tuplesCount = ocpStructure.getIntegerByKey("TupleCount");
	this.m_tuplesCountTotal = ocpStructure.getIntegerByKeyExt("TupleCountTotal", -1);
	if (ocpStructure.hasStringByKey("ResultAlignment"))
	{
		this.m_resultAlignment = oFF.QInAConverter.lookupAlignment(ocpStructure.getStringByKey("ResultAlignment"));
		rsDefAxis.setResultAlignment(this.m_resultAlignment);
	}
	let inaDimensions = ocpStructure.getListByKey("Dimensions");
	let dimensionCount = inaDimensions.size();
	this.m_rsDimensionsList = oFF.XArray.create(dimensionCount);
	let inaTupleElements = ocpStructure.getListByKey("Tuples");
	if (dimensionCount !== inaTupleElements.size())
	{
		throw oFF.XException.createIllegalStateException("Indicated dimension count and tuple element count is not the same");
	}
	let importer = null;
	for (let dimIdx = 0; dimIdx < dimensionCount; dimIdx++)
	{
		let inaDimension = inaDimensions.getStructureAt(dimIdx);
		let name = this.getDimensionName(inaDimension);
		let inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		let dimension = null;
		if (oFF.notNull(queryModel))
		{
			dimension = queryModel.getDimensionByNameFromExistingMetadata(name);
			if (oFF.notNull(inaHierarchy) && oFF.notNull(dimension) && this.m_requestContext !== oFF.QContextType.SELECTOR)
			{
				let maxDrillLevel = inaHierarchy.getIntegerByKeyExt("MaxDrillLevel", -1);
				let maxRuntimeLevel = inaHierarchy.getIntegerByKeyExt("MaxRuntimeLevel", -1);
				let modelCapabilities = queryModel.getModelCapabilities();
				let isImportHierarchyDueToMaxDrillLevel = oFF.notNull(modelCapabilities) && modelCapabilities.supportsMaxDrillLevel() && (maxDrillLevel !== dimension.getMaxDrillLevel() || maxRuntimeLevel !== dimension.getMaxRuntimeLevel());
				let isImportLeveledHierarchy = dimension.getModelCapabilities() !== null && dimension.getModelCapabilities().supportsDimensionHierarchyLevels() && !oFF.PrUtils.isListEmpty(inaHierarchy.getListByKey("Levels"));
				let isImportHierarchyDueToEnforce = dimension.isEnforceHierarchyNameVariable() || dimension.isHierarchyActive() && (dimension.isEffectivelyUseAnyHierarchyInfoVariable() || dimension.getHierarchyDueDate() !== null && (dimension.isDueDateDefaultByMetadata() || dimension.isEnforceHierarchyDueDateVariableOrDefault()) && dimension.getHierarchy() !== null && !dimension.getHierarchy().isCustomHierarchy());
				if (isImportLeveledHierarchy || isImportHierarchyDueToMaxDrillLevel || isImportHierarchyDueToEnforce)
				{
					if (oFF.isNull(importer))
					{
						importer = oFF.QInAImportFactory.createWithQueryManagerCapabilities(this.getApplication(), oFF.QModelFormat.INA_DATA, queryModel.getQueryManager());
					}
					if (oFF.notNull(importer))
					{
						queryModel.stopEventing();
						importer.importHierarchy(dimension, inaDimension);
						queryModel.resumeEventing();
					}
				}
			}
		}
		let lbhToUdhConversionProperties = oFF.notNull(this.m_lbhToUdhConversionProperties) && oFF.XString.isEqual(name, this.m_lbhToUdhConversionProperties.getDimensionName()) ? this.m_lbhToUdhConversionProperties : null;
		let rsDimension = oFF.InARsDimension.create(inaDimension, dimension, this.m_requestContext, rsDefAxis, lbhToUdhConversionProperties);
		if (oFF.isNull(dimension))
		{
			rsDimension.setName(name);
			rsDimension.setText(inaDimension.getStringByKey("Description"));
		}
		let inaValueElement = inaDimension.getStructureByKey("MemberTypes");
		if (oFF.notNull(inaValueElement))
		{
			rsDimension.setMemberTypes(oFF.InARsEncodedValues.createByStructure(inaValueElement));
		}
		rsDimension.setupFromRsTuple(inaTupleElements.getStructureAt(dimIdx));
		rsDimension.setupNodeAlignmentIfNeeded(rsDefAxis);
		this.m_rsDimensionsList.set(dimIdx, rsDimension);
	}
	this.m_alertLevel = this.getElementAsListByName(ocpStructure, "ExceptionAlertLevel");
	this.m_exceptionNames = this.getElementAsListByName(ocpStructure, "ExceptionName");
	if (ocpStructure.containsKey("UniqueAxisProperties"))
	{
		let uapStructure = ocpStructure.getStructureByKey("UniqueAxisProperties");
		this.m_unitDescriptions = this.getElementAsListByNameExt(uapStructure, "UnitDescriptions", false);
		this.m_unitTypes = this.getElementAsListByNameExt(uapStructure, "UnitTypes", false);
		this.m_units = this.getElementAsListByNameExt(uapStructure, "Units", false);
		this.m_complexUnitIndices = this.getElementAsListByNameExt(uapStructure, "UnitIndex", false);
		this.m_decimalPlaces = this.getElementAsListByNameExt(uapStructure, "NumericRounding", false);
		this.m_numericShifts = this.getElementAsListByNameExt(uapStructure, "NumericShift", false);
		this.m_cellValueTypes = this.getElementAsListByNameExt(uapStructure, "CellValueTypes", false);
		this.m_longestCellValuesRounded = this.getElementAsListByNameExt(uapStructure, "LongestCellValueRounded", false);
		this.m_longestCellValuesFormatted = this.getElementAsListByNameExt(uapStructure, "LongestCellValueFormatted", false);
	}
	this.m_tupleElementsCount = dimensionCount;
};
oFF.InARsAxisProvider.prototype.isListValidOnAxis = function(prList)
{
	return !oFF.PrUtils.isListEmpty(prList) && prList.size() === this.getTuplesCount();
};
oFF.InARsAxisProvider.prototype.iterateFields = function(line, rsDimension, memberIndex, parentIndex)
{
	let keyFieldIndex = rsDimension.getKeyFieldIndex();
	let hierarchyNavigationKeyIndex = rsDimension.getHierarchyNavigationKeyIndex();
	let rsFields = rsDimension.getFields();
	let fieldCount = rsFields.size();
	let textFieldIndex = rsDimension.getTextFieldIndex();
	let textFieldOverrideText = this.getOverrideTextForTextField(line, rsDimension, memberIndex);
	let hierarchyPathFieldIndex = rsDimension.getHierarchyPathFieldIndex();
	let hierarchyPathFieldOverrideText = this.getOverrideTextForHierarchyPathField(line, rsDimension, memberIndex);
	let measureIDFieldIndex = rsDimension.getMeasureIDFieldIndex();
	let measureIdValue = null;
	let dimension = line.getRsDimensionAtCurrentPosition();
	let queryModel = oFF.notNull(dimension) ? dimension.getQueryModel() : null;
	let isAbap = oFF.notNull(queryModel) && queryModel.getSystemType() !== null && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP);
	let dimensionDrillGroups = oFF.XCollectionUtils.map(rsDimension.getDimensionDrillGroups(), (drillGroup) => {
		return drillGroup.getDimensionName();
	});
	let drillGroupAtCurrentPosition = line.getDrillGroupDimensionInfoAtCurrentPosition() !== null ? line.getDrillGroupDimensionInfoAtCurrentPosition().getDimensionName() : null;
	for (let fieldIdx = 0; fieldIdx < fieldCount; fieldIdx++)
	{
		line.nextFieldValue();
		let rsField = rsFields.get(fieldIdx);
		let inaValueException = rsField.getValueExceptionAt(memberIndex);
		if (inaValueException !== -1)
		{
			if (isAbap && this.m_requestContext !== oFF.QContextType.RESULT_SET && inaValueException === 1)
			{
				inaValueException = 0;
			}
			line.setValueException(oFF.QInAConverter.lookupException(inaValueException));
		}
		let formattedValue = this.setValueAndReturnFormattedValue(line, rsField.getValues(), memberIndex, rsField.getValueType());
		if (oFF.notNull(textFieldOverrideText) && textFieldIndex === fieldIdx)
		{
			formattedValue = textFieldOverrideText;
			line.setString(textFieldOverrideText);
		}
		if (oFF.notNull(hierarchyPathFieldOverrideText) && hierarchyPathFieldIndex === fieldIdx)
		{
			formattedValue = hierarchyPathFieldOverrideText;
			line.setString(hierarchyPathFieldOverrideText);
		}
		if (fieldIdx === keyFieldIndex)
		{
			line.setDimensionMemberName(formattedValue);
			line.setDimensionMemberNameValueException(line.getValueException());
			if (parentIndex > -1 && parentIndex < rsField.getValues().size())
			{
				line.setParentDimensionMemberName(this.getFormattedValue(line, rsField.getValues(), parentIndex, rsField.getValueType()));
			}
			else
			{
				line.setParentDimensionMemberName(null);
			}
		}
		if (fieldIdx === hierarchyNavigationKeyIndex || rsField.isHierarchyNavigationField())
		{
			line.setValueOfHierarchyNavigationKey(formattedValue);
		}
		if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) && fieldIdx === measureIDFieldIndex)
		{
			measureIdValue = formattedValue;
		}
		line.setFormattedValue(formattedValue);
		let isUdhKey = rsField.getPresentationType() === oFF.PresentationType.UDH_KEY && oFF.XCollectionUtils.hasElements(dimensionDrillGroups);
		line.setUdhKey(isUdhKey ? oFF.RsUdhKey.create(line.getString(), dimensionDrillGroups, drillGroupAtCurrentPosition) : null);
	}
	this.computeQueryDataCellName(line, measureIdValue, dimension);
};
oFF.InARsAxisProvider.prototype.notifyAxisCursorChange = function(newIndex)
{
	if (this.m_currentIndex >= newIndex)
	{
		this.resetAxisCursor(newIndex);
	}
	this.m_currentIndex = newIndex;
	let line = this.getCursorAxis();
	line.setTupleElementCursorBeforeStart();
	let isAlertLevelValid = !oFF.PrUtils.isListEmpty(this.m_alertLevel);
	let isExceptionNameValid = !oFF.PrUtils.isListEmpty(this.m_exceptionNames);
	let size = this.getRsDimensionSize();
	for (let dimensionIndex = 0; dimensionIndex < size; dimensionIndex++)
	{
		line.nextTupleElement();
		let rsDimension = this.m_rsDimensionsList.get(dimensionIndex);
		let memberIndexes = rsDimension.getMemberIndexes();
		let memberIndex = memberIndexes.getNextIntegerValue();
		let parentMemberIndex = -1;
		line.setDimensionMemberType(rsDimension.getMemberType(memberIndex));
		let parentIndexes = rsDimension.getParentIndexes();
		if (oFF.notNull(parentIndexes))
		{
			parentMemberIndex = parentIndexes.getNextIntegerValue();
			line.setParentNodeIndex(memberIndexes.getIndexForIntegerValue(parentMemberIndex));
		}
		let drillGroupIndexes = rsDimension.getDrillGroupIndexes();
		if (oFF.notNull(drillGroupIndexes))
		{
			let drillGroupIndexValue = drillGroupIndexes.getNextIntegerValue();
			line.setDrillGroupIndex(drillGroupIndexValue);
			let localDrillGroupIndexValue = drillGroupIndexValue - dimensionIndex;
			let dimensionDrillGroups = rsDimension.getDimensionDrillGroups();
			if (oFF.notNull(dimensionDrillGroups))
			{
				let drillGroupDimensionInfo = null;
				if (localDrillGroupIndexValue >= 0 && dimensionDrillGroups.size() > localDrillGroupIndexValue)
				{
					drillGroupDimensionInfo = dimensionDrillGroups.get(localDrillGroupIndexValue);
				}
				line.setDrillGroupDimensionInfoAtCurrentPosition(drillGroupDimensionInfo);
			}
		}
		let displayValues = rsDimension.getDisplayValues();
		if (oFF.notNull(displayValues))
		{
			line.setDisplayLevel(displayValues.getNextIntegerValue());
		}
		let drillStates = rsDimension.getDrillStates();
		if (oFF.notNull(drillStates))
		{
			line.setDrillState(oFF.QInAConverter.lookupDrillState(drillStates.getNextIntegerValue(), oFF.notNull(this.m_lbhToUdhConversionProperties)));
		}
		let absoluteLevelValues = rsDimension.getAbsoluteLevelValues();
		if (oFF.notNull(absoluteLevelValues) && absoluteLevelValues.hasNextValue())
		{
			line.setAbsoluteLevel(absoluteLevelValues.getNextIntegerValue());
		}
		else
		{
			line.setAbsoluteLevel(-1);
		}
		let nodeIds = rsDimension.getNodeIds();
		if (oFF.notNull(nodeIds))
		{
			line.setNodeId(nodeIds.getNextStringValue());
		}
		let childCountValues = rsDimension.getChildCountValues();
		if (oFF.notNull(childCountValues))
		{
			let childCount = childCountValues.getNextIntegerValue();
			line.setChildCount(childCount);
		}
		else
		{
			line.setChildCount(-1);
		}
		if (isAlertLevelValid && isExceptionNameValid)
		{
			line.setAlertLevel(this.m_alertLevel.getIntegerAtExt(newIndex, 0));
			line.setExceptionName(this.m_exceptionNames.getStringAtExt(newIndex, null));
		}
		if (this.isListValidOnAxis(this.m_unitTypes) || this.isListValidOnAxis(this.m_units))
		{
			let formattedCurrencyUnit = null;
			let unitType = -2;
			let currencyUnit = null;
			if (this.isListValidOnAxis(this.m_units))
			{
				formattedCurrencyUnit = this.m_units.getStringAtExt(this.m_currentIndex, null);
				unitType = 1;
			}
			if (this.isListValidOnAxis(this.m_unitTypes))
			{
				unitType = this.m_unitTypes.getIntegerAtExt(this.m_currentIndex, -2);
			}
			if (this.isListValidOnAxis(this.m_unitDescriptions))
			{
				currencyUnit = this.m_unitDescriptions.getStringAtExt(this.m_currentIndex, null);
			}
			this.updateCurrencyUnit(line.getCurrencyUnitBase(), unitType, formattedCurrencyUnit, currencyUnit);
		}
		if (this.isListValidOnAxis(this.m_complexUnitIndices))
		{
			line.setUnitIndex(this.m_complexUnitIndices.getIntegerAtExt(this.m_currentIndex, -1));
		}
		if (this.isListValidOnAxis(this.m_decimalPlaces))
		{
			line.setDecimalPlaces(this.m_decimalPlaces.getIntegerAtExt(this.m_currentIndex, -1));
		}
		if (this.isListValidOnAxis(this.m_numericShifts))
		{
			if (this.m_numericShifts.get(this.m_currentIndex) !== null)
			{
				let numericShift = this.m_numericShifts.getIntegerAt(this.m_currentIndex);
				line.setScalingFactor(oFF.XIntegerValue.create(numericShift));
			}
			else
			{
				line.setScalingFactor(null);
			}
		}
		if (this.isListValidOnAxis(this.m_cellValueTypes) && this.m_cellValueTypes.get(this.m_currentIndex) !== null)
		{
			line.setCellValueType(oFF.QInAConverter.lookupValueTypeByInt(this.m_cellValueTypes.getIntegerAt(this.m_currentIndex)));
		}
		if (this.isListValidOnAxis(this.m_longestCellValuesRounded) && this.m_longestCellValuesRounded.get(this.m_currentIndex) !== null)
		{
			line.setLongestCellValueRounded(this.m_longestCellValuesRounded.getStringAt(this.m_currentIndex));
		}
		if (this.isListValidOnAxis(this.m_longestCellValuesFormatted) && this.m_longestCellValuesFormatted.get(this.m_currentIndex) !== null)
		{
			line.setLongestCellValueFormatted(this.m_longestCellValuesFormatted.getStringAt(this.m_currentIndex));
		}
		this.iterateFields(line, rsDimension, memberIndex, parentMemberIndex);
	}
};
oFF.InARsAxisProvider.prototype.notifySetAxisMetadata = function()
{
	let cursorAxis = this.getCursorAxis();
	let dimensionCount = this.getRsDimensionSize();
	cursorAxis.startAddMetadata(dimensionCount);
	for (let idxDimension = 0; idxDimension < dimensionCount; idxDimension++)
	{
		let rsDimension = this.m_rsDimensionsList.get(idxDimension);
		cursorAxis.addNextTupleElementMetadata(idxDimension, rsDimension);
		let fields = rsDimension.getFields();
		let fieldCount = fields.size();
		for (let idxField = 0; idxField < fieldCount; idxField++)
		{
			let field = fields.get(idxField);
			let isVisible = !this.m_supportsObtainability || field.isVisible();
			cursorAxis.addNextFieldMetadata(field.getName(), field.getText(), isVisible, field.getPresentationType(), field.getValueType(), field.getMimeType(), field.isHierarchyNavigationField(), field.getLongestAttribute());
		}
	}
	cursorAxis.endAddMetadata();
};
oFF.InARsAxisProvider.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_rsDimensionsList))
	{
		let rsDimsSize = this.m_rsDimensionsList.size();
		for (let i = 0; i < rsDimsSize; i++)
		{
			oFF.XObjectExt.release(this.m_rsDimensionsList.get(i));
			this.m_rsDimensionsList.set(i, null);
		}
		oFF.XObjectExt.release(this.m_rsDimensionsList);
		this.m_rsDimensionsList = null;
	}
	this.m_alertLevel = oFF.XObjectExt.release(this.m_alertLevel);
	this.m_exceptionNames = oFF.XObjectExt.release(this.m_exceptionNames);
	this.m_unitDescriptions = oFF.XObjectExt.release(this.m_unitDescriptions);
	this.m_unitTypes = oFF.XObjectExt.release(this.m_unitTypes);
	this.m_units = oFF.XObjectExt.release(this.m_units);
	this.m_complexUnitIndices = oFF.XObjectExt.release(this.m_complexUnitIndices);
	this.m_decimalPlaces = oFF.XObjectExt.release(this.m_decimalPlaces);
	this.m_numericShifts = oFF.XObjectExt.release(this.m_numericShifts);
	this.m_cellValueTypes = oFF.XObjectExt.release(this.m_cellValueTypes);
	this.m_longestCellValuesRounded = oFF.XObjectExt.release(this.m_longestCellValuesRounded);
	this.m_longestCellValuesFormatted = oFF.XObjectExt.release(this.m_longestCellValuesFormatted);
	this.m_lbhToUdhConversionProperties = oFF.XObjectExt.release(this.m_lbhToUdhConversionProperties);
	this.m_requestContext = null;
	oFF.DfRsAxisProvider.prototype.releaseObject.call( this );
};
oFF.InARsAxisProvider.prototype.resetAxisCursor = function(newIndex)
{
	if (newIndex !== 0)
	{
		throw oFF.XException.createIllegalStateException("The axis cursor can only be resetted to 0.");
	}
	let size = this.getRsDimensionSize();
	for (let dimensionIndex = 0; dimensionIndex < size; dimensionIndex++)
	{
		let rsDimension = this.m_rsDimensionsList.get(dimensionIndex);
		this.resetIfNotNull(rsDimension.getMemberIndexes());
		this.resetIfNotNull(rsDimension.getParentIndexes());
		this.resetIfNotNull(rsDimension.getDrillGroupIndexes());
		this.resetIfNotNull(rsDimension.getDisplayValues());
		this.resetIfNotNull(rsDimension.getAbsoluteLevelValues());
		this.resetIfNotNull(rsDimension.getDrillStates());
		this.resetIfNotNull(rsDimension.getNodeIds());
		this.resetIfNotNull(rsDimension.getChildCountValues());
	}
};
oFF.InARsAxisProvider.prototype.resetIfNotNull = function(cursor)
{
	if (oFF.notNull(cursor))
	{
		cursor.resetCursor();
	}
};
oFF.InARsAxisProvider.prototype.setOcpStructure = function(queryModel, ocpStructure, dataCount, rsDefAxis, lbhToUdhConversionProperties)
{
	this.m_dataCount = dataCount;
	this.m_lbhToUdhConversionProperties = lbhToUdhConversionProperties;
	if (oFF.notNull(ocpStructure))
	{
		this.importRsDimensions(ocpStructure, queryModel, rsDefAxis);
	}
};
oFF.InARsAxisProvider.prototype.setTuplesCount = function(tuplesCount, tuplesCountTotal)
{
	if (tuplesCount <= this.m_tuplesCount)
	{
		this.m_tuplesCount = tuplesCount;
		this.m_tuplesCountTotal = tuplesCountTotal;
	}
};
oFF.InARsAxisProvider.prototype.setValueAndReturnFormattedValue = function(line, inaFieldValues, memberIndex, rsValueType)
{
	if (oFF.isNull(inaFieldValues))
	{
		return "InA Error: No data available";
	}
	let fieldValueType = rsValueType;
	if (fieldValueType === oFF.XValueType.UNSUPPORTED)
	{
		let field = line.getField();
		if (oFF.isNull(field) || field.getMetadata() === null)
		{
			fieldValueType = oFF.XValueType.STRING;
		}
		else
		{
			fieldValueType = field.getValueType();
		}
	}
	let memberType = line.getDimensionMemberType();
	let requestedInResultStructure = memberType.isRequestedInResultStructure();
	let valueException = line.getValueException();
	let isNullValue = valueException === oFF.ValueException.NULL_VALUE;
	let value = inaFieldValues.get(memberIndex);
	let mappedValue = oFF.isNull(value) ? null : value.copyAsPrimitiveXValue();
	let formattedValue = oFF.XValueUtil.getString(mappedValue);
	if (fieldValueType === oFF.XValueType.STRING || requestedInResultStructure)
	{
		if (requestedInResultStructure && oFF.notNull(valueException))
		{
			if (memberType === oFF.MemberType.RESULT)
			{
				formattedValue = "Total";
			}
			else if (memberType === oFF.MemberType.CONDITION_RESULT)
			{
				formattedValue = "Total Including";
			}
			else if (memberType === oFF.MemberType.CONDITION_OTHERS_RESULT)
			{
				formattedValue = "Total Remaining";
			}
			else if (memberType === oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT)
			{
				formattedValue = "Others";
			}
			line.setValueException(oFF.ValueException.NORMAL);
		}
		if (memberType === oFF.MemberType.RESULT)
		{
			let resultSet = this.getCursorAxis().getCursorResultSet();
			let overrideText = resultSet.getTotalsOverrideText();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(overrideText))
			{
				formattedValue = overrideText;
			}
		}
		if (line.getValueException() === oFF.ValueException.NULL_VALUE)
		{
			formattedValue = "";
		}
		line.setString(formattedValue);
	}
	else if (fieldValueType === oFF.XValueType.BOOLEAN)
	{
		let booleanValue = oFF.XValueUtil.getBoolean(mappedValue, false, true);
		line.setBoolean(booleanValue);
	}
	else if (fieldValueType === oFF.XValueType.INTEGER)
	{
		let intValue = oFF.XValueUtil.getInteger(mappedValue, false, true);
		line.setInteger(intValue);
	}
	else if (fieldValueType === oFF.XValueType.LONG)
	{
		let longValue = oFF.XValueUtil.getLong(mappedValue, false, true);
		line.setLong(longValue);
	}
	else if (fieldValueType === oFF.XValueType.DOUBLE)
	{
		let doubleValue = oFF.XValueUtil.getDouble(mappedValue, false, true);
		line.setDouble(doubleValue);
	}
	else if (fieldValueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		let decFLoat = oFF.XValueUtil.getDecFloat(mappedValue, false, true);
		line.setDecFloat(decFLoat);
	}
	else if (fieldValueType === oFF.XValueType.DATE)
	{
		if (isNullValue)
		{
			line.setNullByType(fieldValueType);
		}
		else
		{
			let dateValue = oFF.XDate.createDateFromStringWithFlag(formattedValue, this.m_supportsSapDateFormat);
			if (this.m_supportsSapDateFormat && oFF.notNull(dateValue))
			{
				formattedValue = dateValue.toIsoFormat();
			}
			line.setDate(dateValue);
		}
	}
	else if (fieldValueType === oFF.XValueType.TIME)
	{
		if (isNullValue)
		{
			line.setNullByType(fieldValueType);
		}
		else
		{
			let timeValue = oFF.XTime.createTimeFromStringWithFlag(formattedValue, this.m_supportsSapDateFormat);
			if (this.m_supportsSapDateFormat && oFF.notNull(timeValue))
			{
				formattedValue = timeValue.toIsoFormat();
			}
			line.setTime(timeValue);
		}
	}
	else if (fieldValueType === oFF.XValueType.DATE_TIME)
	{
		if (isNullValue)
		{
			line.setNullByType(fieldValueType);
		}
		else
		{
			let dateTimeValue = oFF.XDateTime.createDateTimeFromStringWithFlag(formattedValue, this.m_supportsSapDateFormat);
			if (this.m_supportsSapDateFormat && oFF.notNull(dateTimeValue))
			{
				formattedValue = dateTimeValue.toIsoFormat();
			}
			line.setDateTime(dateTimeValue);
		}
	}
	else if (fieldValueType.isSpatial())
	{
		let geometry = oFF.isNull(formattedValue) ? null : oFF.XGeometryValue.createGeometryValueWithWkt(formattedValue);
		if (oFF.isNull(geometry))
		{
			line.setString(formattedValue);
		}
		else
		{
			let spatialType = geometry.getValueType();
			if (spatialType === oFF.XValueType.MULTI_POLYGON)
			{
				line.setMultiPolygon(geometry);
			}
			else if (spatialType === oFF.XValueType.LINE_STRING)
			{
				line.setLineString(geometry);
			}
			else if (spatialType === oFF.XValueType.MULTI_LINE_STRING)
			{
				line.setMultiLineString(geometry);
			}
			else if (spatialType === oFF.XValueType.POINT)
			{
				line.setPoint(geometry);
			}
			else if (spatialType === oFF.XValueType.POLYGON)
			{
				line.setPolygon(geometry);
			}
			else if (spatialType === oFF.XValueType.MULTI_POINT)
			{
				line.setMultiPoint(geometry);
			}
		}
	}
	else
	{
		let error = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.INVALID_DATATYPE, "Unsupported datatype", null, false, fieldValueType);
		line.setErrorValue(error);
		formattedValue = error.getText();
	}
	return formattedValue;
};
oFF.InARsAxisProvider.prototype.setupProvider = function(application, requestContext, supportsSapDateFormat, supportsObtainability)
{
	this.setupApplicationContext(application);
	this.m_supportsObtainability = supportsObtainability;
	this.m_supportsSapDateFormat = supportsSapDateFormat;
	this.m_requestContext = requestContext;
	this.m_currentIndex = -1;
};
oFF.InARsAxisProvider.prototype.updateCurrencyUnit = function(currencyUnitBase, csCurrencyUnitType, csFormattedCurrencyUnit, csCurrencyUnit)
{
	currencyUnitBase.reset();
	if (csCurrencyUnitType === 1)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(false);
		currencyUnitBase.setIsMixed(false);
	}
	else if (csCurrencyUnitType === 2)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(false);
		currencyUnitBase.setHasUnit(true);
		currencyUnitBase.setIsMixed(false);
	}
	else if (csCurrencyUnitType === 3)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(true);
		currencyUnitBase.setIsMixed(false);
	}
	else if (csCurrencyUnitType === -1)
	{
		currencyUnitBase.setIsEmpty(false);
		currencyUnitBase.setIsMixed(true);
		currencyUnitBase.setHasCurrency(true);
		currencyUnitBase.setHasUnit(true);
	}
	else if (csCurrencyUnitType !== -2)
	{
		currencyUnitBase.setIsEmpty(true);
		currencyUnitBase.setHasCurrency(false);
		currencyUnitBase.setHasUnit(false);
		currencyUnitBase.setIsMixed(false);
	}
	if (!currencyUnitBase.isEmpty() && csCurrencyUnitType !== -2)
	{
		if (oFF.notNull(csFormattedCurrencyUnit))
		{
			currencyUnitBase.setFormatted(csFormattedCurrencyUnit);
		}
		if (oFF.notNull(csCurrencyUnit))
		{
			currencyUnitBase.setPrefix(csCurrencyUnit);
		}
	}
};

oFF.MeasureValueHelpRsAxisProvider = function() {};
oFF.MeasureValueHelpRsAxisProvider.prototype = new oFF.DfRsAxisProvider();
oFF.MeasureValueHelpRsAxisProvider.prototype._ff_c = "MeasureValueHelpRsAxisProvider";

oFF.MeasureValueHelpRsAxisProvider.create = function(context)
{
	let object = new oFF.MeasureValueHelpRsAxisProvider();
	object.m_isCorrectDrillState = context.getQueryManager().getSession().hasFeature(oFF.FeatureToggleOlap.CORRECT_DRILLSTATE_IN_CLASSIC_RESULTSET);
	return object;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.m_isCorrectDrillState = false;
oFF.MeasureValueHelpRsAxisProvider.prototype.m_nodes = null;
oFF.MeasureValueHelpRsAxisProvider.prototype.m_rsDimension = null;
oFF.MeasureValueHelpRsAxisProvider.prototype.m_tupleCountTotal = 0;
oFF.MeasureValueHelpRsAxisProvider.prototype.copyValueHelpRsAxisProvider = function(origin)
{
	this.m_isCorrectDrillState = origin.m_isCorrectDrillState;
	if (oFF.notNull(origin.m_nodes))
	{
		this.m_nodes = oFF.XList.create();
		for (let i = 0; i < origin.m_nodes.size(); i++)
		{
			let node = origin.m_nodes.get(i);
			this.m_nodes.add(oFF.QValueHelpNode2.createValueHelpNode(node.getName(), node.getDimensionMember(), node.getDrillState(), node.getDisplayLevel(), node.getChildCount(), node.getAbsoluteLevel(), origin.m_isCorrectDrillState));
		}
	}
	if (oFF.notNull(origin.m_rsDimension))
	{
		this.m_rsDimension = origin.m_rsDimension.clone();
	}
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getDataCount = function()
{
	return this.getTuplesCount();
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getFieldValues = oFF.noSupport;
oFF.MeasureValueHelpRsAxisProvider.prototype.getResultAlignment = oFF.noSupport;
oFF.MeasureValueHelpRsAxisProvider.prototype.getTupleElementsCount = function()
{
	return oFF.notNull(this.m_rsDimension) ? 1 : 0;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getTuplesCount = function()
{
	return oFF.notNull(this.m_nodes) ? this.m_nodes.size() : 0;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.getTuplesCountTotal = function()
{
	return this.m_tupleCountTotal;
};
oFF.MeasureValueHelpRsAxisProvider.prototype.notifyAxisCursorChange = function(newIndex)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_nodes) || newIndex >= this.m_nodes.size())
	{
		return;
	}
	let node = this.m_nodes.get(newIndex);
	let dimensionMember = node.getDimensionMember();
	let cursorAxis = this.getCursorAxis();
	cursorAxis.setTupleElementCursorBeforeStart();
	cursorAxis.nextTupleElement();
	cursorAxis.setDimensionMemberType(dimensionMember.getMemberType());
	cursorAxis.setNodeId(node.getName());
	cursorAxis.setAbsoluteLevel(-1);
	cursorAxis.setChildCount(-1);
	let dimension = node.getDimension();
	let fields = dimension.getFields();
	for (let i = 0; i < fields.size(); i++)
	{
		cursorAxis.nextFieldValue();
		let field = fields.get(i);
		let fieldValue = dimensionMember.getFieldValue(field);
		let value = oFF.notNull(fieldValue) ? fieldValue.getString() : "";
		cursorAxis.setString(value);
		cursorAxis.setFormattedValue(value);
		if (field === dimension.getKeyField())
		{
			cursorAxis.setDimensionMemberName(value);
		}
	}
};
oFF.MeasureValueHelpRsAxisProvider.prototype.notifySetAxisMetadata = function()
{
	let cursorAxis = this.getCursorAxis();
	if (oFF.notNull(this.m_nodes) && oFF.notNull(this.m_rsDimension))
	{
		cursorAxis.startAddMetadata(1);
		cursorAxis.addNextTupleElementMetadata(0, this.m_rsDimension);
		let fields = this.m_rsDimension.getFields();
		for (let i = 0; i < fields.size(); i++)
		{
			let field = fields.get(i);
			cursorAxis.addNextFieldMetadata(field.getName(), field.getText(), true, field.getPresentationType(), field.getValueType(), field.getMimeType(), field.isHierarchyNavigationField(), null);
		}
	}
	else
	{
		cursorAxis.startAddMetadata(0);
	}
	cursorAxis.endAddMetadata();
};
oFF.MeasureValueHelpRsAxisProvider.prototype.releaseObject = function()
{
	oFF.DfRsAxisProvider.prototype.releaseObject.call( this );
	this.m_nodes = oFF.XObjectExt.release(this.m_nodes);
	this.m_rsDimension = oFF.XObjectExt.release(this.m_rsDimension);
};
oFF.MeasureValueHelpRsAxisProvider.prototype.setTuplesCount = oFF.noSupport;
oFF.MeasureValueHelpRsAxisProvider.prototype.setValueHelpNodes = function(nodes, measureDimension)
{
	if (oFF.notNull(nodes) && oFF.notNull(measureDimension))
	{
		this.m_nodes = nodes;
		this.m_rsDimension = oFF.MeasureValueHelpRsDimension.create(measureDimension);
		let allStructureMembers = measureDimension.getAllStructureMembers();
		this.m_tupleCountTotal = oFF.notNull(allStructureMembers) ? allStructureMembers.size() : nodes.size();
		this.m_isCorrectDrillState = measureDimension.getQueryManager().getSession().hasFeature(oFF.FeatureToggleOlap.CORRECT_DRILLSTATE_IN_CLASSIC_RESULTSET);
	}
};

oFF.RuntimeRemoteBlendingQueryUpdaterAction = function() {};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype = new oFF.SyncAction();
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype._ff_c = "RuntimeRemoteBlendingQueryUpdaterAction";

oFF.RuntimeRemoteBlendingQueryUpdaterAction.create = function(systemToDependentQueriesMap, queryManager)
{
	let action = new oFF.RuntimeRemoteBlendingQueryUpdaterAction();
	action.setupAction(null, null, null, queryManager);
	action.m_systemToDependentQueriesMap = systemToDependentQueriesMap;
	action.m_queryNameToRpcFunctionMap = oFF.XHashMapByString.create();
	return action;
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.findFirstSourceByAliasName = function(sourcesList, customIdentifier)
{
	if (oFF.notNull(sourcesList))
	{
		let sizeSources = sourcesList.size();
		for (let idxSource = 0; idxSource < sizeSources; idxSource++)
		{
			let blendingSource = sourcesList.getStructureAt(idxSource);
			let aliasName = oFF.PrUtils.getStringValueProperty(blendingSource, "AliasName", null);
			if (oFF.XString.isEqual(aliasName, customIdentifier.getString()))
			{
				return blendingSource;
			}
			else if (oFF.XString.containsString(aliasName, customIdentifier.getString()))
			{
				let structureWalker2 = oFF.PrUtils.getStructureProperty(blendingSource, "DefiningContext");
				structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "Definition");
				structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "DataSource");
				let sourcesList2 = oFF.PrUtils.getPropertyAsList(structureWalker2, "Sources");
				return oFF.RuntimeRemoteBlendingQueryUpdaterAction.findFirstSourceByAliasName(sourcesList2, customIdentifier);
			}
		}
	}
	return null;
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.m_queryNameToRpcFunctionMap = null;
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.m_systemToDependentQueriesMap = null;
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.remainingQueries = 0;
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onRuntimeRemoteBlendingQueryUpdated(extResult, data, customIdentifier);
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	if (extResult.getData() !== null)
	{
		oFF.InAHelper.importMessages(extResult.getData().getRootElementGeneric(), this);
	}
	this.addAllMessages(extResult);
	this.remainingQueries--;
	if (extResult.isValid() && oFF.notNull(response))
	{
		let serializedData = response.getRootElement().getStructureByKey("SerializedData");
		if (oFF.notNull(serializedData))
		{
			let view = serializedData.getStringByKey("View");
			let cube = serializedData.getStringByKey("Cube");
			let mainQuery = this.getActionContext().getQueryServiceConfig().getDefinitionAsStructure();
			if (oFF.notNull(mainQuery))
			{
				let structureWalker1 = oFF.PrUtils.getStructureProperty(mainQuery, "Analytics");
				structureWalker1 = oFF.PrUtils.getStructureProperty(structureWalker1, "DataSource");
				let sourcesList = oFF.PrUtils.getPropertyAsList(structureWalker1, "Sources");
				if (oFF.notNull(sourcesList))
				{
					let matchingSource = oFF.RuntimeRemoteBlendingQueryUpdaterAction.findFirstSourceByAliasName(sourcesList, customIdentifier);
					let structureWalker2 = oFF.PrUtils.getStructureProperty(matchingSource, "DefiningContext");
					structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "Definition");
					structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "DataSource");
					structureWalker2 = oFF.PrUtils.getStructureProperty(structureWalker2, "SerializedData");
					if (oFF.notNull(view))
					{
						structureWalker2.putString("View", view);
					}
					if (oFF.notNull(cube))
					{
						structureWalker2.putString("Cube", cube);
					}
				}
			}
			this.getActionContext().getQueryServiceConfig().setDefinitionByStructure(oFF.QModelFormat.INA_DATA, mainQuery);
		}
	}
	if (this.remainingQueries === 0)
	{
		this.setData(oFF.RuntimeRemoteBlendingQueryUpdateResult.create(!this.hasErrors()));
		this.endSync();
	}
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.processInaRequest = function(inaRequest, systemName)
{
	let dependentQueryName = null;
	let structureWalker = oFF.PrUtils.getStructureProperty(inaRequest, "Analytics");
	let definitionStructure = oFF.PrUtils.getStructureProperty(structureWalker, "Definition");
	dependentQueryName = oFF.PrUtils.getStringValueProperty(definitionStructure, "Name", null);
	let featureRequestStructure = oFF.PrUtils.getStructureProperty(definitionStructure, "ResultSetFeatureRequest");
	let connectionPool = this.getActionContext().getApplication().getConnectionPool();
	let connection = connectionPool.getOpenConnection(systemName);
	let persistenceTable = featureRequestStructure.getStringByKey("ResultSetPersistanceTable");
	let persistenceSchema = featureRequestStructure.getStringByKey("ResultSetPersistanceSchema");
	let isValidSDIBlending = false;
	if (!oFF.XStringUtils.isNullOrEmpty(persistenceTable) && !oFF.XStringUtils.isNullOrEmpty(persistenceSchema))
	{
		if (oFF.notNull(connection))
		{
			let mapping = this.getActionContext().getSystemDescription().getSystemMapping(connection.getSystemName());
			let mappingRemote = connection.getSystemDescription().getSystemMapping(this.getActionContext().getSystemName());
			if (oFF.notNull(mapping) && oFF.notNull(mappingRemote))
			{
				isValidSDIBlending = mapping.isValid(mappingRemote);
			}
		}
		if (!isValidSDIBlending)
		{
			this.addErrorWithMessage("query not issued for SDI remote blending");
			return false;
		}
	}
	if ((isValidSDIBlending || oFF.XString.isEqual(oFF.PrUtils.getStringValueProperty(featureRequestStructure, "ResultFormat", null), "SerializedData")) && oFF.notNull(dependentQueryName) && oFF.notNull(connection))
	{
		let serverMetadata = connection.getSystemConnect().getServerMetadata();
		let capabilities = serverMetadata.getMetadataForService(oFF.ServerService.ANALYTIC);
		let fastPathCap = capabilities.getByKey(oFF.InACapabilities.C032_FAST_PATH);
		let path;
		if (oFF.notNull(fastPathCap) && fastPathCap.getValue() !== null)
		{
			path = fastPathCap.getValue();
		}
		else
		{
			path = connection.getSystemDescription().getSystemType().getInAPath();
		}
		let dependentQueryRpcFunction = connection.newRpcFunction(path);
		dependentQueryRpcFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
		let request = dependentQueryRpcFunction.getRpcRequest();
		request.setSapPassportTransactionId(this.getActionContext().getInstanceId());
		request.setMethod(oFF.HttpRequestMethod.HTTP_POST);
		request.setRequestStructure(inaRequest);
		this.m_queryNameToRpcFunctionMap.put(dependentQueryName, dependentQueryRpcFunction);
	}
	else if (!featureRequestStructure.getBooleanByKeyExt(oFF.InAQueryMergeConstants.QY_RETURN_EMPTY_JSON_RESULTSET, false))
	{
		this.addErrorWithMessage("Unable to issue dependent remote query for main blending persisted query.");
		return false;
	}
	return true;
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.processSynchronization = function(syncType)
{
	let queryManager = this.getActionContext();
	if (queryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.RAW_QUERY)
	{
		this.addErrorWithMessage("processMetadataSerializedQuery is only supported for query managers in raw query mode.");
	}
	let iter = this.m_systemToDependentQueriesMap.getKeysAsIterator();
	while (iter.hasNext())
	{
		let systemName = iter.next();
		let inaRequestsIter = this.m_systemToDependentQueriesMap.getByKey(systemName).getIterator();
		while (inaRequestsIter.hasNext())
		{
			let inaRequest = oFF.XContent.createStringContent(oFF.QModelFormat.INA_DATA, inaRequestsIter.next()).getJsonContent();
			let batchQueries = oFF.PrUtils.getPropertyAsList(inaRequest, oFF.ConnectionConstants.INA_BATCH);
			if (oFF.isNull(batchQueries))
			{
				if (!this.processInaRequest(inaRequest, systemName))
				{
					return false;
				}
			}
			else
			{
				for (let i = 0; i < batchQueries.size(); i++)
				{
					if (!this.processInaRequest(batchQueries.getStructureAt(i), systemName))
					{
						return false;
					}
				}
			}
		}
	}
	let isValidSyncAction = !this.hasErrors() && this.m_queryNameToRpcFunctionMap.size() > 0;
	if (isValidSyncAction)
	{
		this.remainingQueries = this.m_queryNameToRpcFunctionMap.size();
		let queryNamesIter = this.m_queryNameToRpcFunctionMap.getKeysAsIterator();
		while (queryNamesIter.hasNext())
		{
			let queryName = queryNamesIter.next();
			this.m_queryNameToRpcFunctionMap.getByKey(queryName).processFunctionExecution(syncType, this, oFF.XStringValue.create(queryName));
		}
	}
	return isValidSyncAction;
};
oFF.RuntimeRemoteBlendingQueryUpdaterAction.prototype.releaseObjectInternal = function()
{
	this.m_systemToDependentQueriesMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_systemToDependentQueriesMap);
	this.m_queryNameToRpcFunctionMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_queryNameToRpcFunctionMap);
	this.remainingQueries = 0;
};

oFF.QInAExportImpl = function() {};
oFF.QInAExportImpl.prototype = new oFF.QInAExport();
oFF.QInAExportImpl.prototype._ff_c = "QInAExportImpl";

oFF.QInAExportImpl.prototype.addDataRequest = function(originalMode, olapComponentType, modelComponent, inaRoot)
{
	if (olapComponentType === oFF.OlapComponentType.QUERY_MODEL && originalMode === oFF.QModelFormat.INA_CLONE_RENDERING && this.m_mode === oFF.QModelFormat.INA_REPOSITORY_DATA_RENDERING)
	{
		let queryModel = modelComponent;
		let dataRequestContent = queryModel.getQueryManager().serializeToContentExt(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA, queryModel.getModelCapabilities());
		if (oFF.notNull(dataRequestContent))
		{
			let inaDataRequestElement = dataRequestContent.getJsonContent();
			inaRoot.put(oFF.InAConstantsBios.QY_DATA_REQUEST, inaDataRequestElement);
		}
	}
};
oFF.QInAExportImpl.prototype.exportAxesSettings = function(queryModel, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.AXES_SETTINGS, queryModel, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportAxis = function(axis, inaStructure)
{
	return this.exportComponent(oFF.OlapComponentType.AXIS, axis, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportBasicMeasure = function(basicMeasure, inaMember)
{
	this.exportComponent(oFF.MemberType.BASIC_MEASURE, basicMeasure, inaMember, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportBlendingMappings = function(mappings)
{
	return oFF.QInADataSourceBlending.exportBlendingMappings(mappings);
};
oFF.QInAExportImpl.prototype.exportCalculatedDimension = function(dimension, inaStructure)
{
	return this.exportComponent(oFF.DimensionType.CALCULATED_DIMENSION, dimension, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCartesianList = function(cartesianList, inaParentStructure)
{
	return this.exportComponent(oFF.FilterComponentType.CARTESIAN_LIST, cartesianList, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCellContext = function(cellContext)
{
	return this.exportComponent(oFF.OlapComponentType.CELL_CONTEXT, cellContext, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCellContextManager = function(cellContextManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.CELL_CONTEXT_MANAGER, cellContextManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCellValueOperand = function(cellValueOperand)
{
	return this.exportComponent(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND, cellValueOperand, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportComponent = function(componentType, modelComponent, inaParentStructure, flags)
{
	let olapComponentType = componentType;
	if (oFF.isNull(olapComponentType) && oFF.notNull(modelComponent))
	{
		olapComponentType = modelComponent.getOlapComponentType();
	}
	let resultElement = null;
	if (oFF.isNull(olapComponentType))
	{
		this.addError(0, "No component type given for export");
	}
	else
	{
		let inaComponent;
		if (this.m_mode.isComplexModelFormat())
		{
			let originalMode = this.m_mode;
			let inaRoot = inaParentStructure;
			if (oFF.isNull(inaRoot))
			{
				inaRoot = oFF.PrFactory.createStructure();
			}
			for (let i = 0; i < originalMode.getSizeOfComplexModelFormat(); i++)
			{
				this.m_mode = originalMode.getSubModelFormat(i);
				let inAKeyForModelFormat = oFF.QModelFormat.getInAKeyForModelFormat(this.m_mode);
				inaComponent = this.lookupInAComponent(olapComponentType, null);
				if (oFF.notNull(inaComponent))
				{
					let inaElement = inaComponent.exportComponent(this, modelComponent, inaParentStructure, flags);
					if (oFF.notNull(inaElement))
					{
						inaRoot.put(inAKeyForModelFormat, inaElement);
					}
					this.addDataRequest(originalMode, olapComponentType, modelComponent, inaRoot);
				}
			}
			resultElement = inaRoot;
			this.m_mode = originalMode;
		}
		else
		{
			inaComponent = this.lookupInAComponent(olapComponentType, null);
			if (oFF.notNull(inaComponent))
			{
				resultElement = inaComponent.exportComponent(this, modelComponent, inaParentStructure, flags);
			}
		}
	}
	return resultElement;
};
oFF.QInAExportImpl.prototype.exportCondition = function(condition)
{
	return this.exportComponent(oFF.OlapComponentType.CONDITION, condition, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportConditionManager = function(conditionManager, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.CONDITIONS_MANAGER, conditionManager, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportConditionThreshold = function(conditionThreshold)
{
	return this.exportComponent(oFF.OlapComponentType.CONDITIONS_THRESHOLD, conditionThreshold, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportConvertedTimeCartesianList = function(convertedTimeCartesianList, inaParentStructure)
{
	return this.exportComponent(oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST, convertedTimeCartesianList, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCurrencyMeasure = function(currencyMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.CURRENCY_MEASURE, currencyMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCurrencyTranslationElement = function(currencyTranslation, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM, currencyTranslation, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportCurrencyTranslationManager = function(currencyTranslationManager, inaQueryModel)
{
	if (oFF.notNull(currencyTranslationManager))
	{
		if (currencyTranslationManager.shouldExportInAStructure(this.getMode()))
		{
			this.exportComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER, currencyTranslationManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
		}
		if (currencyTranslationManager.shouldExportInAList(this.getMode()))
		{
			this.exportComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST, currencyTranslationManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
		}
	}
};
oFF.QInAExportImpl.prototype.exportCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	return this.exportComponent(oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION, customHierarchyDefinition, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDataCell = function(queryDataCell, inaQueryModel)
{
	return this.exportComponent(oFF.OlapComponentType.DATA_CELL, queryDataCell, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDataCells = function(queryModel, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.DATA_CELLS, queryModel, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDataSource = function(datasource, withRunAsUser)
{
	let flags = oFF.QImExFlag.DEFAULT_ALL;
	if (withRunAsUser)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.RUN_AS_USER);
	}
	return this.exportComponent(null, datasource, null, flags);
};
oFF.QInAExportImpl.prototype.exportDimension = function(dimension, inaStructure)
{
	let dimensionType = dimension.getDimensionType();
	if (dimensionType === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION || dimensionType === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION || dimensionType === oFF.DimensionType.PARETO_RANK_FILTER_CALCULATED_DIMENSION)
	{
		return this.exportComponent(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION, dimension, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
	}
	else if (dimensionType === oFF.DimensionType.CALCULATED_DIMENSION || dimensionType === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION)
	{
		return this.exportCalculatedDimension(dimension, inaStructure);
	}
	return this.exportComponent(oFF.OlapComponentType.ABSTRACT_DIMENSION, dimension, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDimensionMemberVariable = function(dimensionMemberVariable, inaParentStructure)
{
	return this.exportComponent(oFF.VariableType.DIMENSION_MEMBER_VARIABLE, dimensionMemberVariable, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDimensions = function(query, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.DIMENSIONS, query, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDrillManager = function(drillManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.DRILL_MANAGER, drillManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDrillOperation = function(operation)
{
	return this.exportComponent(oFF.OlapComponentType.DRILL_OPERATION, operation, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportDrillPathElement = function(element, isDrillContext)
{
	let flags = oFF.QImExFlag.DEFAULT_ALL;
	if (isDrillContext)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.DRILL_CONTEXT);
	}
	return this.exportComponent(oFF.MemberType.DRILL_PATH_ELEMENT, element, null, flags);
};
oFF.QInAExportImpl.prototype.exportDynamicFilter = function(filter, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.FILTER_DYNAMIC, filter, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportExceptionAggregationManager = function(excepAggrManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER, excepAggrManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportExceptionAggregationMeasure = function(exceptionAggregationMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.EXCEPTION_AGGREGATION, exceptionAggregationMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportExceptions = function(structureMember, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.EXCEPTION_MANAGER, structureMember, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilter = function(filter, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.SELECTOR, filter, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterAlgebra = function(logicalContainer, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.BOOLEAN_ALGEBRA, logicalContainer, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterCartesianProduct = function(cartesianProduct, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.CARTESIAN_PRODUCT, cartesianProduct, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterElement = function(filterElement)
{
	return this.exportComponent(oFF.OlapComponentType.FILTER_ELEMENT, filterElement, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterExpression = function(filterExpression)
{
	return this.exportComponent(oFF.OlapComponentType.FILTER_EXPRESSION, filterExpression, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterGeo = function(operation, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.SPATIAL_FILTER, operation, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterOperation = function(filterOperation, inaParentStructure)
{
	this.exportComponent(oFF.FilterComponentType.OPERATION, filterOperation, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterTuple = function(filterTuple)
{
	return this.exportComponent(oFF.FilterComponentType.TUPLE, filterTuple, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFilterVirtualDatasource = function(filterVirtualDatasource)
{
	return this.exportComponent(oFF.FilterComponentType.VIRTUAL_DATASOURCE, filterVirtualDatasource, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFixedFilter = function(filter, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.FILTER_FIXED, filter, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFormulaException = function(formulaException, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.FORMULA_EXCEPTION, formulaException, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFormulaExceptionManager = function(formulaExceptionManager, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER, formulaExceptionManager, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportFormulaMeasure = function(formulaMeasure, inaMember)
{
	this.exportComponent(oFF.MemberType.FORMULA, formulaMeasure, inaMember, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportHierarchy = function(dimension, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.HIERARCHY, dimension, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportLovRequest = function(queryModel, withVariables, withDataSource, lovProcessConfig)
{
	return oFF.QInAValueHelp.exportResultSetRequest(this, lovProcessConfig, queryModel, withVariables, withDataSource);
};
oFF.QInAExportImpl.prototype.exportMemberHelpRequest = function(queryModel, dimension, isVariableValueHelp)
{
	return oFF.QInAValueHelp.exportMemberHelpRequest(this, queryModel, dimension, isVariableValueHelp);
};
oFF.QInAExportImpl.prototype.exportMembers = function(dimension, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.MEMBERS, dimension, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
	if (this.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		let orderedStructureMemberNames = dimension.getOrderedStructureMemberNames();
		if (oFF.notNull(orderedStructureMemberNames))
		{
			let orderedNamesList = null;
			if (dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				for (let i = 0; i < orderedStructureMemberNames.size(); i++)
				{
					let memberName = orderedStructureMemberNames.get(i);
					let loadedStructureMember = dimension.getLoadedStructureMember(memberName);
					if (oFF.notNull(loadedStructureMember) && !loadedStructureMember.isModelDefinedMember())
					{
						if (oFF.isNull(orderedNamesList))
						{
							orderedNamesList = inaParentStructure.putNewList("OrderedStructureMemberNames");
						}
						orderedNamesList.addString(memberName);
					}
				}
			}
			else
			{
				orderedNamesList = inaParentStructure.putNewList("OrderedStructureMemberNames");
				orderedNamesList.addAllStrings(orderedStructureMemberNames);
			}
		}
		if (this.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
		{
			let orderedStructureLayoutMemberNames = dimension.getStructureLayout().getKeysAsReadOnlyList();
			if (oFF.XCollectionUtils.hasElements(orderedStructureMemberNames) && oFF.XCollectionUtils.hasElements(orderedStructureLayoutMemberNames) && !oFF.XListUtils.areStringListsEqual(orderedStructureMemberNames, orderedStructureLayoutMemberNames))
			{
				let orderedStructureLayoutNamesList = inaParentStructure.putNewList("OrderedStructureLayoutMemberNames");
				orderedStructureLayoutNamesList.addAllStrings(orderedStructureLayoutMemberNames);
			}
		}
	}
};
oFF.QInAExportImpl.prototype.exportOptionListVariable = function(variable, inaStructure)
{
	this.exportComponent(oFF.VariableType.OPTION_LIST_VARIABLE, variable, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportPlanningVariableHelpRequest = function(planningOperation, dimension, variable)
{
	return oFF.QInAValueHelp.exportPlanningVariableHelpRequest(this, planningOperation, dimension, variable);
};
oFF.QInAExportImpl.prototype.exportPreQuery = function(query)
{
	return this.exportComponent(oFF.OlapComponentType.QUERY_MODEL, query, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportQueryCells = function(cellManager, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.QUERY_CELLS, cellManager, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportQueryModel = function(queryModel, withVariables, withDataSource)
{
	let flags = oFF.QImExFlag.DEFAULT_ALL;
	if (!withDataSource)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.DATASOURCE);
	}
	if (!withVariables)
	{
		flags = oFF.XMath.binaryXOr(flags, oFF.QImExFlag.VARIABLES);
	}
	return this.exportComponent(null, queryModel, null, flags);
};
oFF.QInAExportImpl.prototype.exportQuerySettings = function(queryModel, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.QUERY_SETTINGS, queryModel, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportQuickActionManager = function(quickActionManager, inaStructure)
{
	if (oFF.XCollectionUtils.hasElements(quickActionManager))
	{
		this.exportComponent(oFF.OlapComponentType.QUICK_ACTION_MANAGER, quickActionManager, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
	}
};
oFF.QInAExportImpl.prototype.exportRestrictedMeasure = function(restrictedMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.RESTRICTED_MEASURE, restrictedMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportRunningAggregationManager = function(runningAggrManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.RUNNING_AGGREGATION_MANAGER, runningAggrManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportSimulationManager = function(simulationManager, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.OLAP_SIMULATION_MANAGER, simulationManager, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportSortingManager = function(sortingManager, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.SORT_MANAGER, sortingManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportStructureDimension = function(structureDimension)
{
	return this.exportComponent(null, structureDimension, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportStructureMember = function(member)
{
	let result;
	if (this.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		let resultNew = this.exportComponent(null, member, null, oFF.QImExFlag.DEFAULT_ALL);
		result = resultNew;
	}
	else
	{
		result = this.exportComponent(oFF.MemberType.ABSTRACT_MEMBER, member, null, oFF.QImExFlag.DEFAULT_ALL);
	}
	return result;
};
oFF.QInAExportImpl.prototype.exportTotals = function(rc, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.TOTALS, rc, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportUnitMeasure = function(unitMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.UNIT_MEASURE, unitMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportUnitTranslationElement = function(unitTranslation, inaParentStructure)
{
	if (!unitTranslation.isMetadataDefined() || !this.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		this.exportComponent(oFF.OlapComponentType.UNIT_TRANSLATION_ITEM, unitTranslation, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
	}
};
oFF.QInAExportImpl.prototype.exportUnitTranslationManager = function(unitTranslationManager, inaQueryModel)
{
	if (oFF.notNull(unitTranslationManager) && oFF.XCollectionUtils.hasElements(unitTranslationManager.getMeasureUnitTranslations()) && (!this.m_mode.isTypeOf(oFF.QModelFormat.INA_DATA) || oFF.XStream.of(unitTranslationManager.getMeasureUnitTranslations()).anyMatch((mut) => {
		return !mut.isMetadataDefined();
	})))
	{
		this.exportComponent(oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER, unitTranslationManager, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
	}
};
oFF.QInAExportImpl.prototype.exportUniversalDisplayHierarchies = function(universalDisplayHierarchies, inaParentStructure)
{
	this.exportComponent(oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES, universalDisplayHierarchies, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportValueHelpFilter = function(dimension, inaParentStructure)
{
	return this.exportComponent(oFF.OlapComponentType.SELECTOR, dimension, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariable = function(variable, inaStructure)
{
	return this.exportComponent(variable.getVariableType(), variable, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariableContainer = function(variableContainer, parentStructure)
{
	this.exportComponent(oFF.OlapComponentType.VARIABLE_CONTAINER, variableContainer, parentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariableHelpRequest = function(queryModel, dimension, variable)
{
	return oFF.QInAValueHelp.exportVariableHelpRequest(this, queryModel, dimension, variable);
};
oFF.QInAExportImpl.prototype.exportVariableList = function(variableContainer)
{
	return this.exportComponent(oFF.OlapComponentType.VARIABLE_LIST, variableContainer, null, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVariables = function(variableContainer, parentStructure)
{
	return this.exportComponent(null, variableContainer, parentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVarianceMeasure = function(varianceMeasure, inaParentStructure)
{
	this.exportComponent(oFF.MemberType.VARIANCE, varianceMeasure, inaParentStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVisibilityFilter = function(filter, inaQueryModel)
{
	this.exportComponent(oFF.OlapComponentType.FILTER_VISIBILITY, filter, inaQueryModel, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVisualizationCellReferenceScope = function(scope, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.VISUALIZATION_CELL_REFERENCE_SCOPE, scope, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVisualizationChartStyle = function(chartStyle, inaStructure)
{
	this.exportComponent(oFF.OlapComponentType.VISUALIZATION_CHART_STYLE, chartStyle, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVisualizationDefinition = function(visualizationDefinition, structure)
{
	this.exportComponent(visualizationDefinition.getOlapComponentType(), visualizationDefinition, structure, oFF.QImExFlag.DEFAULT_ALL);
};
oFF.QInAExportImpl.prototype.exportVisualizationManager = function(visualizationManager, inaStructure)
{
	if (oFF.notNull(visualizationManager) && visualizationManager.isRepoSerializationActive() && oFF.XCollectionUtils.hasElements(visualizationManager.getVisualizationDefinitions()))
	{
		this.exportComponent(oFF.OlapComponentType.VISUALIZATION_MANAGER, visualizationManager, inaStructure, oFF.QImExFlag.DEFAULT_ALL);
	}
};

oFF.QInAImportImpl = function() {};
oFF.QInAImportImpl.prototype = new oFF.QInAImport();
oFF.QInAImportImpl.prototype._ff_c = "QInAImportImpl";

oFF.QInAImportImpl.prototype.getOlapComponentType = function(componentType, inaElement, modelComponent)
{
	let olapComponentType = componentType;
	if (oFF.isNull(olapComponentType) && oFF.notNull(modelComponent))
	{
		olapComponentType = modelComponent.getOlapComponentType();
	}
	if (oFF.isNull(olapComponentType) && oFF.notNull(inaElement) && inaElement.isStructure())
	{
		let inaStructure = inaElement;
		let cType = inaStructure.getStringByKey("CType");
		if (oFF.notNull(cType))
		{
			olapComponentType = oFF.QInAConverter.lookupComponentType(cType);
		}
	}
	return olapComponentType;
};
oFF.QInAImportImpl.prototype.getOrderedList = function(orderedNamesList)
{
	let orderedStructureMemberNames;
	orderedStructureMemberNames = oFF.XList.create();
	let len = oFF.PrUtils.getListSize(orderedNamesList, 0);
	for (let orderedNameIndex = 0; orderedNameIndex < len; orderedNameIndex++)
	{
		let orderedNameString = oFF.PrUtils.getStringElement(orderedNamesList, orderedNameIndex);
		oFF.XObjectExt.assertNotNullExt(orderedNameString, "illegal state");
		orderedStructureMemberNames.add(orderedNameString.getString());
	}
	return orderedStructureMemberNames;
};
oFF.QInAImportImpl.prototype.importAttribute = function(inaAttribute, dimension, context)
{
	this.importComponent(oFF.OlapComponentType.ATTRIBUTE, inaAttribute, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importAxesSettings = function(inaStructure, queryModel)
{
	this.importComponent(oFF.OlapComponentType.AXES_SETTINGS, inaStructure, queryModel, null, queryModel);
};
oFF.QInAImportImpl.prototype.importAxis = function(inaStructure, axis, context)
{
	this.importComponent(oFF.OlapComponentType.AXIS, inaStructure, axis, null, context);
};
oFF.QInAImportImpl.prototype.importBasicMeasure = function(inaMember, qStructure, context)
{
	return this.importComponent(oFF.MemberType.BASIC_MEASURE, inaMember, null, qStructure, context);
};
oFF.QInAImportImpl.prototype.importBasicQueryModelCapabilities = function(queryModel)
{
	this.importComponent(oFF.OlapComponentType.QUERY_MODEL, null, queryModel, null, queryModel);
};
oFF.QInAImportImpl.prototype.importCalculatedDimension = function(inaDimension, context)
{
	return this.importComponent(oFF.DimensionType.CALCULATED_DIMENSION, inaDimension, null, null, context);
};
oFF.QInAImportImpl.prototype.importCartesianList = function(inaCartesianList, cartesianListExt, filterExpression, context)
{
	return this.importComponent(oFF.FilterComponentType.CARTESIAN_LIST, inaCartesianList, cartesianListExt, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importCellContext = function(inaStructure, parentComponent, context)
{
	return this.importComponent(oFF.OlapComponentType.CELL_CONTEXT, inaStructure, null, parentComponent, context);
};
oFF.QInAImportImpl.prototype.importCellContextManager = function(inaDefinition, cellContextManager, queryModel)
{
	this.importComponent(oFF.OlapComponentType.CELL_CONTEXT_MANAGER, inaDefinition, cellContextManager, null, queryModel);
};
oFF.QInAImportImpl.prototype.importComponent = function(componentType, inaElement, modelComponent, parentComponent, context)
{
	if (oFF.notNull(modelComponent))
	{
		if (this.m_mode === oFF.QModelFormat.INA_METADATA || this.m_mode === oFF.QModelFormat.INA_CLONE || this.m_mode === oFF.QModelFormat.INA_CLONE_RENDERING || this.m_mode === oFF.QModelFormat.INA_METADATA_CORE || this.m_mode === oFF.QModelFormat.INA_METADATA_RENDERING || modelComponent.isEventingStopped())
		{
			modelComponent.stopEventing();
		}
		else
		{
			modelComponent.queueEventing();
		}
	}
	let validatingContextFreeNavigations = true;
	let deactiveContextFreeNavValidation = oFF.notNull(modelComponent) && modelComponent.getOlapComponentType() === oFF.OlapComponentType.QUERY_MODEL && this.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY);
	if (deactiveContextFreeNavValidation && oFF.notNull(modelComponent))
	{
		let drillManager = modelComponent.getDrillManager();
		if (oFF.notNull(inaElement) && inaElement.asStructure().containsKey("ValidateContextFreeNavigations"))
		{
			validatingContextFreeNavigations = inaElement.asStructure().getBooleanByKey("ValidateContextFreeNavigations");
		}
		else
		{
			validatingContextFreeNavigations = drillManager.isValidatingContextFreeNavigations();
		}
		drillManager.setValidateContextFreeNavigations(false);
	}
	let component = this.innerImportComponent(componentType, inaElement, modelComponent, parentComponent, context);
	if (oFF.notNull(modelComponent))
	{
		modelComponent.resumeEventing();
		if (deactiveContextFreeNavValidation)
		{
			modelComponent.getDrillManager().setValidateContextFreeNavigations(validatingContextFreeNavigations);
		}
	}
	if (componentType === oFF.OlapComponentType.QUERY_MODEL && oFF.notNull(modelComponent) && oFF.notNull(inaElement))
	{
		let queryModel = modelComponent;
		if (this.m_mode === oFF.QModelFormat.INA_METADATA || this.m_mode === oFF.QModelFormat.INA_METADATA_CORE || this.m_mode === oFF.QModelFormat.INA_METADATA_RENDERING)
		{
			queryModel.setServerBaseSerialization(this.m_mode, oFF.QModelOrigin.IMPORTER, inaElement.asStructure());
		}
	}
	return component;
};
oFF.QInAImportImpl.prototype.importCondition = function(queryModelBase, inaCondition, condition)
{
	return this.importComponent(oFF.OlapComponentType.CONDITION, inaCondition, condition, queryModelBase.getConditionManager(), queryModelBase);
};
oFF.QInAImportImpl.prototype.importConditionManager = function(inAModel, conditionManager, context)
{
	this.importComponent(oFF.OlapComponentType.CONDITIONS_MANAGER, inAModel, conditionManager, null, context);
};
oFF.QInAImportImpl.prototype.importConditionThreshold = function(queryModel, inaSingleThreshold, conditionThreshold, parentComponent)
{
	return this.importComponent(oFF.OlapComponentType.CONDITIONS_THRESHOLD, inaSingleThreshold, conditionThreshold, parentComponent, queryModel);
};
oFF.QInAImportImpl.prototype.importConvertedTimeCartesianList = function(inaCartesianList, cartesianListExt, filterExpression, context)
{
	return this.importComponent(oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST, inaCartesianList, cartesianListExt, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importCurrencyMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.CURRENCY_MEASURE, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importCurrencyTranslationElement = function(inaStructure, currencyTranslation, context)
{
	this.importComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM, inaStructure, currencyTranslation, null, context);
};
oFF.QInAImportImpl.prototype.importCurrencyTranslationManager = function(inaDefinition, qCurrencyTranslationManager, context)
{
	this.importComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER, inaDefinition, qCurrencyTranslationManager, null, context);
	this.importComponent(oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST, inaDefinition, qCurrencyTranslationManager, null, context);
};
oFF.QInAImportImpl.prototype.importCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	return this.importComponent(oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION, customHierarchyDefinition, null, null, null);
};
oFF.QInAImportImpl.prototype.importDataCell = function(inaQDataCell, queryModel)
{
	this.importComponent(oFF.OlapComponentType.DATA_CELL, inaQDataCell, null, null, queryModel);
};
oFF.QInAImportImpl.prototype.importDataCells = function(inaQueryModel, queryModel)
{
	this.importComponent(oFF.OlapComponentType.DATA_CELLS, inaQueryModel, null, null, queryModel);
};
oFF.QInAImportImpl.prototype.importDataSource = function(structure)
{
	return this.importComponent(oFF.OlapComponentType.DATA_SOURCE, structure, null, null, null);
};
oFF.QInAImportImpl.prototype.importDataSourceExternalDimensions = function(inaDataSource, dataSource)
{
	oFF.QInADataSourceExtDims.importQd(this, dataSource, inaDataSource);
};
oFF.QInAImportImpl.prototype.importDimension = function(inaDimension, context)
{
	return this.importComponent(oFF.OlapComponentType.ABSTRACT_DIMENSION, inaDimension, null, null, context);
};
oFF.QInAImportImpl.prototype.importDimensionMemberVariable = function(inaVariable, memberVariable, context)
{
	return this.importComponent(oFF.VariableType.DIMENSION_MEMBER_VARIABLE, inaVariable, memberVariable, null, context);
};
oFF.QInAImportImpl.prototype.importDimensions = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.DIMENSIONS, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importDocumentsInfo = function(structure)
{
	return this.importComponent(oFF.OlapComponentType.DOCUMENTS_INFO, structure, null, null, null);
};
oFF.QInAImportImpl.prototype.importDrillManager = function(inaQueryModel, drillManager, context)
{
	this.importComponent(oFF.OlapComponentType.DRILL_MANAGER, inaQueryModel, drillManager, null, context);
};
oFF.QInAImportImpl.prototype.importDrillOperation = function(inaHierarchyNavigation, drillManager, context)
{
	this.importComponent(oFF.OlapComponentType.DRILL_OPERATION, inaHierarchyNavigation, null, drillManager, context);
};
oFF.QInAImportImpl.prototype.importDrillPathElement = function(inaDrillMember, parentModelComponent, context)
{
	return this.importComponent(oFF.MemberType.DRILL_PATH_ELEMENT, inaDrillMember, null, parentModelComponent, context);
};
oFF.QInAImportImpl.prototype.importDynamicFilter = function(inaElement, filterComponent, context)
{
	this.importComponent(oFF.OlapComponentType.FILTER_DYNAMIC, inaElement, null, filterComponent, context);
};
oFF.QInAImportImpl.prototype.importExceptionAggregationManager = function(inaDefinition, excepAggrManager, context)
{
	this.importComponent(oFF.OlapComponentType.EXCEPTION_AGGREGATION_MANAGER, inaDefinition, excepAggrManager, null, context);
};
oFF.QInAImportImpl.prototype.importExceptionAggregationMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.EXCEPTION_AGGREGATION, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importExceptions = function(inaStructure, member)
{
	this.importComponent(oFF.OlapComponentType.EXCEPTION_MANAGER, inaStructure, member, null, null);
};
oFF.QInAImportImpl.prototype.importFilter = function(inaDefinition, filter, context)
{
	this.importComponent(oFF.OlapComponentType.SELECTOR, inaDefinition, filter, null, context);
};
oFF.QInAImportImpl.prototype.importFilterAlgebra = function(filterExpression, inaParentStructure, context)
{
	return this.importComponent(oFF.FilterComponentType.BOOLEAN_ALGEBRA, inaParentStructure, null, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importFilterCellValueOperand = function(inaStructure, context)
{
	return this.importComponent(oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND, inaStructure, null, null, context);
};
oFF.QInAImportImpl.prototype.importFilterElement = function(inaFilterElement, filterElementExt, filterExpression, context)
{
	return this.importComponent(oFF.OlapComponentType.FILTER_ELEMENT, inaFilterElement, filterElementExt, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importFilterExpression = function(qDefaultExpression, inaExpression, parent, context)
{
	return this.importComponent(oFF.OlapComponentType.FILTER_EXPRESSION, inaExpression, qDefaultExpression, parent, context);
};
oFF.QInAImportImpl.prototype.importFilterGeo = function(filterExpression, inaGeoOperand, context)
{
	return this.importComponent(oFF.FilterComponentType.SPATIAL_FILTER, inaGeoOperand, null, filterExpression, context);
};
oFF.QInAImportImpl.prototype.importFilterOperation = function(inaOperation, cartesianList, context)
{
	return this.importComponent(oFF.FilterComponentType.OPERATION, inaOperation, null, cartesianList, context);
};
oFF.QInAImportImpl.prototype.importFixedFilter = function(inaElement, filterComponent, context)
{
	this.importComponent(oFF.OlapComponentType.FILTER_FIXED, inaElement, null, filterComponent, context);
};
oFF.QInAImportImpl.prototype.importFormulaCalculatedDimension = function(inaDimension, context, modelComponent)
{
	return this.importComponent(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION, inaDimension, modelComponent, null, context);
};
oFF.QInAImportImpl.prototype.importFormulaException = function(inAModel, formulaException, formulaExceptionManager, context)
{
	return this.importComponent(oFF.OlapComponentType.FORMULA_EXCEPTION, inAModel, formulaException, formulaExceptionManager, context);
};
oFF.QInAImportImpl.prototype.importFormulaExceptionManager = function(inAModel, formulaExceptionManager, context)
{
	this.importComponent(oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER, inAModel, formulaExceptionManager, null, context);
};
oFF.QInAImportImpl.prototype.importFormulaMeasure = function(inaMember, dimension, queryModel)
{
	return this.importComponent(oFF.MemberType.FORMULA, inaMember, null, dimension, queryModel);
};
oFF.QInAImportImpl.prototype.importFunctionalVariable = function(inaVariable, functionalVariable, context)
{
	return this.importComponent(oFF.VariableType.FUNCTIONAL_VARIABLE, inaVariable, functionalVariable, null, context);
};
oFF.QInAImportImpl.prototype.importFunctionalVariables = function(inaDefinition, variableContainer, context)
{
	let variables = inaDefinition.getListByKey("Variables");
	if (oFF.notNull(variables))
	{
		oFF.XStream.of(variables).filter((variable) => {
			let variableStr = variable.asStructure();
			let type = variableStr.getStringByKey("CType");
			let name = variableStr.getStringByKey("Name");
			return oFF.XString.isEqual(type, "FunctionalVariable") && variableContainer.getVariable(name) === null;
		}).forEach((funcVariable) => {
			variableContainer.addVariable(oFF.QFunctionalVariable.createFunctionalVariable(context, variableContainer, funcVariable.asStructure().getStringByKey("Name"), null));
		});
	}
};
oFF.QInAImportImpl.prototype.importHierarchy = function(dimension, inaHierarchy)
{
	this.importComponent(oFF.OlapComponentType.HIERARCHY, inaHierarchy, dimension, null, dimension.getContext());
};
oFF.QInAImportImpl.prototype.importMembers = function(inaDimension, dimension, context)
{
	this.importComponent(oFF.OlapComponentType.MEMBERS, inaDimension, dimension, null, context);
	let orderedStructureMemberNames = null;
	if (this.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		let orderedNamesList = oFF.PrUtils.getListProperty(inaDimension, "OrderedStructureMemberNames");
		if (oFF.notNull(orderedNamesList))
		{
			orderedStructureMemberNames = this.getOrderedList(orderedNamesList);
			dimension.reOrderStructureMembers(orderedStructureMemberNames);
		}
	}
	if (this.m_mode === oFF.QModelFormat.INA_REPOSITORY_DELTA)
	{
		let orderedStructureLayoutNamesList = oFF.PrUtils.getListProperty(inaDimension, "OrderedStructureLayoutMemberNames");
		if (oFF.notNull(orderedStructureLayoutNamesList))
		{
			orderedStructureMemberNames = this.getOrderedList(orderedStructureLayoutNamesList);
		}
		oFF.XListUtils.reorderList(dimension.getStructureLayout(), orderedStructureMemberNames);
	}
};
oFF.QInAImportImpl.prototype.importModellerCurrencyTranslation = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_CURRENCY_TRANSLATION, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importModellerDefinedVariables = function(inaElement, variableContainer, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_VARIABLES, inaElement, variableContainer, null, context);
};
oFF.QInAImportImpl.prototype.importModellerDimensions = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_DIMENSIONS, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importModellerMetadataProperties = function(inaQueryModel, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.MODELLER_METADATA_PROPERTIES, inaQueryModel, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importOptionListVariable = function(inaVariable, optionListVariable, context)
{
	return this.importComponent(oFF.VariableType.OPTION_LIST_VARIABLE, inaVariable, optionListVariable, null, context);
};
oFF.QInAImportImpl.prototype.importPreQuery = function(inaPreQuery, preQuery)
{
	this.importQueryModel(inaPreQuery, preQuery);
};
oFF.QInAImportImpl.prototype.importQueryCells = function(inaStructure, queryCellManager, context)
{
	this.importComponent(oFF.OlapComponentType.QUERY_CELLS, inaStructure, queryCellManager, null, context);
};
oFF.QInAImportImpl.prototype.importQueryModel = function(inaQueryModel, queryModel)
{
	this.importComponent(oFF.OlapComponentType.QUERY_MODEL, inaQueryModel, queryModel, null, queryModel);
};
oFF.QInAImportImpl.prototype.importQuerySettings = function(inaStructure, queryModel)
{
	this.importComponent(oFF.OlapComponentType.QUERY_SETTINGS, inaStructure, null, null, queryModel);
};
oFF.QInAImportImpl.prototype.importQuickActionManager = function(inaDefinition, quickActionManager, queryModel)
{
	this.importComponent(oFF.OlapComponentType.QUICK_ACTION_MANAGER, inaDefinition, quickActionManager, null, queryModel);
};
oFF.QInAImportImpl.prototype.importRestrictedMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.RESTRICTED_MEASURE, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importRunningAggregationManager = function(inaDefinition, runningAggrManager, context)
{
	this.importComponent(oFF.OlapComponentType.RUNNING_AGGREGATION_MANAGER, inaDefinition, runningAggrManager, null, context);
};
oFF.QInAImportImpl.prototype.importSimpleTypeVariable = function(inaStructure, simpleTypeVariable, context)
{
	return this.importComponent(oFF.VariableType.SIMPLE_TYPE_VARIABLE, inaStructure, simpleTypeVariable, null, context);
};
oFF.QInAImportImpl.prototype.importSimulationManager = function(inAModel, simulationManager, context)
{
	this.importComponent(oFF.OlapComponentType.OLAP_SIMULATION_MANAGER, inAModel, simulationManager, null, context);
};
oFF.QInAImportImpl.prototype.importSortingManager = function(inaDefinition, qSortingManager, context)
{
	this.importComponent(oFF.OlapComponentType.SORT_MANAGER, inaDefinition, qSortingManager, null, context);
};
oFF.QInAImportImpl.prototype.importStructureMember = function(dimension, inaMember, context)
{
	return this.importComponent(oFF.MemberType.ABSTRACT_MEMBER, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importStructureMemberExt = function(memberType, inaMember, dimension, context)
{
	let newMemberType = memberType === oFF.MemberType.MEASURE ? oFF.MemberType.BASIC_MEASURE : memberType;
	return this.importComponent(newMemberType, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importTotals = function(inaStructure, rc, context)
{
	this.importComponent(oFF.OlapComponentType.TOTALS, inaStructure, rc, null, context);
};
oFF.QInAImportImpl.prototype.importTranslationManager = function(inaDefinition, queryModel, context)
{
	this.importComponent(oFF.OlapComponentType.MEASURE_TRANSLATIONS, inaDefinition, queryModel, null, context);
};
oFF.QInAImportImpl.prototype.importUnitMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.UNIT_MEASURE, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importUnitTranslationElement = function(inaStructure, unitTranslation, context)
{
	this.importComponent(oFF.OlapComponentType.UNIT_TRANSLATION_ITEM, inaStructure, unitTranslation, null, context);
};
oFF.QInAImportImpl.prototype.importUnitTranslationManager = function(inaDefinition, qUnitTranslationManager, context)
{
	this.importComponent(oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER, inaDefinition, qUnitTranslationManager, null, context);
};
oFF.QInAImportImpl.prototype.importUniversalDisplayHierarchies = function(inaStructure, universalDisplayHierarchies, context)
{
	this.importComponent(oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES, inaStructure, universalDisplayHierarchies, null, context);
};
oFF.QInAImportImpl.prototype.importVariable = function(inaStructure, variableContext)
{
	return this.importComponent(oFF.VariableType.ANY_VARIABLE, inaStructure, null, variableContext, variableContext);
};
oFF.QInAImportImpl.prototype.importVariableList = function(variables, variableContainer)
{
	this.importComponent(oFF.OlapComponentType.VARIABLE_LIST, variables, variableContainer, null, null);
};
oFF.QInAImportImpl.prototype.importVariableManager = function(inaElement, variableContainer, context)
{
	this.importComponent(oFF.OlapComponentType.VARIABLE_MANAGER, inaElement, variableContainer, null, context);
};
oFF.QInAImportImpl.prototype.importVariables = function(variables, variableContainer)
{
	this.importComponent(oFF.OlapComponentType.VARIABLE_CONTAINER, variables, variableContainer, null, null);
};
oFF.QInAImportImpl.prototype.importVarianceMeasure = function(inaMember, dimension, context)
{
	return this.importComponent(oFF.MemberType.VARIANCE, inaMember, null, dimension, context);
};
oFF.QInAImportImpl.prototype.importVisibilityFilter = function(inaElement, filterComponent, context)
{
	this.importComponent(oFF.OlapComponentType.FILTER_VISIBILITY, inaElement, null, filterComponent, context);
};
oFF.QInAImportImpl.prototype.importVisualizationCellReferenceScope = function(inaDefinition, scope, tableDefinition)
{
	this.importComponent(oFF.OlapComponentType.VISUALIZATION_CELL_REFERENCE_SCOPE, inaDefinition, scope, null, tableDefinition);
};
oFF.QInAImportImpl.prototype.importVisualizationChartStyle = function(inaDefinition, chartStyle, chartDefinition)
{
	this.importComponent(oFF.OlapComponentType.VISUALIZATION_CHART_STYLE, inaDefinition, chartStyle, null, chartDefinition);
};
oFF.QInAImportImpl.prototype.importVisualizationDefinition = function(inaVisualizationDefinition, visualizationDefinition)
{
	this.importComponent(visualizationDefinition.getOlapComponentType(), inaVisualizationDefinition, visualizationDefinition, null, visualizationDefinition.getQueryModel());
};
oFF.QInAImportImpl.prototype.importVisualizationManager = function(inaDefinition, visualizationManager, queryModel)
{
	this.importComponent(oFF.OlapComponentType.VISUALIZATION_MANAGER, inaDefinition, visualizationManager, null, queryModel);
};
oFF.QInAImportImpl.prototype.innerImportComponent = function(componentType, inaElement, modelComponent, parentComponent, context)
{
	let olapComponentType = this.getOlapComponentType(componentType, inaElement, modelComponent);
	if (oFF.isNull(olapComponentType))
	{
		this.addError(0, "Cannot find olap component type for import");
		return modelComponent;
	}
	let componentModel;
	let importedModelComponent = modelComponent;
	if (this.m_mode === oFF.QModelFormat.INA_METADATA)
	{
		this.m_mode = oFF.QModelFormat.INA_METADATA_CORE;
		componentModel = this.lookupInAComponent(olapComponentType, inaElement);
		if (oFF.isNull(componentModel))
		{
			return modelComponent;
		}
		importedModelComponent = componentModel.importComponent(this, inaElement, importedModelComponent, parentComponent, context);
		this.m_mode = oFF.QModelFormat.INA_DATA;
		componentModel = this.lookupInAComponent(olapComponentType, inaElement);
		if (oFF.isNull(componentModel))
		{
			return modelComponent;
		}
		importedModelComponent = componentModel.importComponent(this, inaElement, importedModelComponent, parentComponent, context);
		this.m_mode = oFF.QModelFormat.INA_METADATA;
	}
	else if (this.m_mode.isComplexModelFormat())
	{
		let originalMode = this.m_mode;
		let inaComplexElement = inaElement;
		for (let i = 0; i < originalMode.getSizeOfComplexModelFormat(); i++)
		{
			this.m_mode = originalMode.getSubModelFormat(i);
			let inAKeyForModelFormat = oFF.QModelFormat.getInAKeyForModelFormat(this.m_mode);
			let inAElement = inaComplexElement.getByKey(inAKeyForModelFormat);
			componentModel = this.lookupInAComponent(olapComponentType, inAElement);
			if (oFF.isNull(componentModel))
			{
				return modelComponent;
			}
			importedModelComponent = componentModel.importComponent(this, inAElement, importedModelComponent, parentComponent, context);
		}
		this.m_mode = originalMode;
	}
	else
	{
		componentModel = this.lookupInAComponent(olapComponentType, inaElement);
		if (oFF.isNull(componentModel))
		{
			return modelComponent;
		}
		importedModelComponent = componentModel.importComponent(this, inaElement, importedModelComponent, parentComponent, context);
	}
	return importedModelComponent;
};
oFF.QInAImportImpl.prototype.processImport = function(syncType, listener, customIdentifier, componentType, inaElement, modelComponent, parentComponent, context)
{
	let action = oFF.QInAImportAction.create(this, componentType, inaElement, modelComponent, parentComponent, context);
	action.processSyncAction(syncType, listener, customIdentifier);
	return action;
};
oFF.QInAImportImpl.prototype.processImportComponent = function(syncType, listener, componentType, inaElement, modelComponent, parentComponent, context)
{
	let qInaComponent = this.m_mode.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) ? this.lookupInAComponent(this.getOlapComponentType(componentType, inaElement, modelComponent), inaElement) : null;
	if (oFF.isNull(qInaComponent) || oFF.isNull(modelComponent))
	{
		let resultComponent = this.importComponent(componentType, inaElement, modelComponent, parentComponent, context);
		listener(resultComponent);
		return resultComponent;
	}
	modelComponent.queueEventing();
	return qInaComponent.processImportComponent(syncType, (component) => {
		modelComponent.resumeEventing();
		listener(component);
	}, this, componentType, inaElement, modelComponent, parentComponent, context);
};

oFF.InAFusionLayer = function() {};
oFF.InAFusionLayer.prototype = new oFF.SyncActionExt();
oFF.InAFusionLayer.prototype._ff_c = "InAFusionLayer";

oFF.InAFusionLayer.DATASOURCE_ACTION = null;
oFF.InAFusionLayer.METADATA_ACTION = null;
oFF.InAFusionLayer.MODEL_ACTION = null;
oFF.InAFusionLayer.REPO_ACTION = null;
oFF.InAFusionLayer.URL_ACTION = null;
oFF.InAFusionLayer.staticSetup = function()
{
	oFF.InAFusionLayer.URL_ACTION = oFF.XComponentType.createType("QDocUrlAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.METADATA_ACTION = oFF.XComponentType.createType("QDocMetadataAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.MODEL_ACTION = oFF.XComponentType.createType("QDocModelAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.REPO_ACTION = oFF.XComponentType.createType("QDocRepoAction", oFF.OlapComponentType.OLAP);
	oFF.InAFusionLayer.DATASOURCE_ACTION = oFF.XComponentType.createType("QDocDataSourceAction", oFF.OlapComponentType.OLAP);
};
oFF.InAFusionLayer.prototype.m_connectionContainer = null;
oFF.InAFusionLayer.prototype.m_content = null;
oFF.InAFusionLayer.prototype.m_dataSource = null;
oFF.InAFusionLayer.prototype.m_nextActionType = null;
oFF.InAFusionLayer.prototype.m_nextDataSource = null;
oFF.InAFusionLayer.prototype.m_nextDocument = null;
oFF.InAFusionLayer.prototype.m_queryServiceConfig = null;
oFF.InAFusionLayer.prototype.m_serverMetadata = null;
oFF.InAFusionLayer.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onDocFusionLayerDone(extResult, data, customIdentifier);
};
oFF.InAFusionLayer.prototype.endSync = function()
{
	this.setData(this);
	oFF.SyncActionExt.prototype.endSync.call( this );
};
oFF.InAFusionLayer.prototype.getApplication = function()
{
	return this.getActionContext().getApplication();
};
oFF.InAFusionLayer.prototype.getConfig = function()
{
	return this.m_queryServiceConfig;
};
oFF.InAFusionLayer.prototype.getConnection = function()
{
	return this.m_connectionContainer;
};
oFF.InAFusionLayer.prototype.getConnectionContainer = function()
{
	return this.m_connectionContainer;
};
oFF.InAFusionLayer.prototype.getConnectionName = function()
{
	return this.getConfig().getConnectionName();
};
oFF.InAFusionLayer.prototype.getContent = function()
{
	return this.m_content;
};
oFF.InAFusionLayer.prototype.getDataSource = function()
{
	return this.m_dataSource;
};
oFF.InAFusionLayer.prototype.getNextActionType = function()
{
	return this.m_nextActionType;
};
oFF.InAFusionLayer.prototype.getNextDataSource = function()
{
	return this.m_nextDataSource;
};
oFF.InAFusionLayer.prototype.getNextDocument = function()
{
	return this.m_nextDocument;
};
oFF.InAFusionLayer.prototype.getOlapEnv = function()
{
	return this.getApplication().getOlapEnvironment();
};
oFF.InAFusionLayer.prototype.getServerMetadata = function()
{
	return this.m_serverMetadata;
};
oFF.InAFusionLayer.prototype.getSystemDescription = function()
{
	return this.getConfig().getSystemDescription();
};
oFF.InAFusionLayer.prototype.getSystemName = function()
{
	return this.getSystemDescription().getSystemName();
};
oFF.InAFusionLayer.prototype.getSystemType = function()
{
	return this.getSystemDescription().getSystemType();
};
oFF.InAFusionLayer.prototype.hasPrivateConnection = function()
{
	return this.getConfig().hasPrivateConnection();
};
oFF.InAFusionLayer.prototype.releaseObjectInternal = function() {};
oFF.InAFusionLayer.prototype.setConfig = function(config)
{
	this.m_queryServiceConfig = config;
};
oFF.InAFusionLayer.prototype.setConnection = function(connectionContainer)
{
	this.m_connectionContainer = connectionContainer;
};
oFF.InAFusionLayer.prototype.setContent = function(model)
{
	this.m_content = model;
};
oFF.InAFusionLayer.prototype.setContentExt = function(modelResponse, sourceType)
{
	let docConverter = oFF.DocConverterFactory.createDocConverter(sourceType, oFF.QModelFormat.INA_REPOSITORY);
	if (oFF.notNull(docConverter))
	{
		let extResult = docConverter.convert(this.getApplication(), modelResponse, oFF.QModelFormat.INA_REPOSITORY);
		this.addAllMessages(extResult);
		if (this.isValid())
		{
			let modelAsRepo = extResult.getData();
			this.m_content = modelAsRepo;
		}
	}
	else
	{
		this.addErrorExt(oFF.OriginLayer.APPLICATION, 0, oFF.XStringUtils.concatenate2("Cannot find document to ina_repo converter for ", sourceType.getName()), null);
	}
};
oFF.InAFusionLayer.prototype.setDataSource = function(dataSource)
{
	this.m_dataSource = dataSource;
};
oFF.InAFusionLayer.prototype.setNextActionType = function(nextActionType)
{
	this.m_nextActionType = nextActionType;
};
oFF.InAFusionLayer.prototype.setNextDataSource = function(dataSource)
{
	this.m_nextDataSource = dataSource;
};
oFF.InAFusionLayer.prototype.setNextDocument = function(nextDocument)
{
	this.m_nextDocument = nextDocument;
};
oFF.InAFusionLayer.prototype.setServerMetadata = function(serverMetadata)
{
	this.m_serverMetadata = serverMetadata;
};

oFF.InAFusionMainAction = function() {};
oFF.InAFusionMainAction.prototype = new oFF.SyncActionExt();
oFF.InAFusionMainAction.prototype._ff_c = "InAFusionMainAction";

oFF.InAFusionMainAction.createAndRun = function(syncType, listener, customIdentifier, carrier)
{
	let object = new oFF.InAFusionMainAction();
	object.setupActionAndRun(syncType, listener, customIdentifier, carrier);
	return object;
};
oFF.InAFusionMainAction.prototype.m_connections = null;
oFF.InAFusionMainAction.prototype.m_nextActionType = null;
oFF.InAFusionMainAction.prototype.m_nextDataSource = null;
oFF.InAFusionMainAction.prototype.m_nextDocument = null;
oFF.InAFusionMainAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onDocFusionDone(this, data, customIdentifier);
};
oFF.InAFusionMainAction.prototype.getApplication = function()
{
	return this.getActionContext().getApplication();
};
oFF.InAFusionMainAction.prototype.getConfig = function()
{
	return this.getActionContext().getConfig();
};
oFF.InAFusionMainAction.prototype.getConnectionExt = function(systemName, isPrivate, name)
{
	let connection = this.m_connections.getByKey(systemName);
	if (oFF.isNull(connection))
	{
		let application = this.getApplication();
		let connectionPool = application.getConnectionPool();
		connection = connectionPool.getConnectionExt(systemName, isPrivate, name);
		this.m_connections.put(systemName, connection);
	}
	return connection;
};
oFF.InAFusionMainAction.prototype.onDocFusionLayerDone = function(extResult, fusionLayer, customIdentifier)
{
	this.addAllMessages(extResult);
	this.getActionContext().addLayer(fusionLayer);
	this.m_nextDataSource = null;
	this.m_nextActionType = null;
	this.m_nextDocument = null;
	if (this.isValid())
	{
		let fusionLayerType = fusionLayer.getComponentType();
		let fusionResult = this.getActionContext();
		let content = fusionLayer.getContent();
		this.m_nextActionType = fusionLayer.getNextActionType();
		this.m_nextDataSource = fusionLayer.getNextDataSource();
		this.m_nextDocument = fusionLayer.getNextDocument();
		if (fusionLayerType === oFF.InAFusionLayer.METADATA_ACTION)
		{
			let metadataAction = fusionLayer;
			fusionResult.setConnectionContainer(metadataAction.getConnectionContainer());
			fusionResult.setServerMetadata(metadataAction.getServerMetadata());
			fusionResult.setMetadataContent(content);
			fusionResult.setDataSource(this.m_nextDataSource);
		}
		else if (fusionLayerType === oFF.InAFusionLayer.REPO_ACTION)
		{
			fusionResult.setRepositoryContent(content);
		}
	}
	if (this.getActiveSyncType() === oFF.SyncType.NON_BLOCKING)
	{
		if (oFF.notNull(this.m_nextActionType))
		{
			this.processLayer();
		}
		else
		{
			this.endSync();
		}
	}
};
oFF.InAFusionMainAction.prototype.processLayer = function()
{
	if (oFF.isNull(this.m_nextActionType))
	{
		this.endSync();
	}
	else
	{
		let config = this.getConfig();
		let listener = this;
		let syncType = this.getActiveSyncType();
		let action = null;
		if (syncType === oFF.SyncType.BLOCKING)
		{
			listener = null;
		}
		if (this.m_nextActionType === oFF.InAFusionLayer.URL_ACTION)
		{
			action = oFF.InAFusionUrlAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.MODEL_ACTION)
		{
			action = oFF.InAFusionModelAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.METADATA_ACTION)
		{
			action = oFF.InAFusionMetadataAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource, this.m_nextDocument);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.REPO_ACTION)
		{
			action = oFF.InAFusionRepoAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource, this.m_nextDocument);
		}
		else if (this.m_nextActionType === oFF.InAFusionLayer.DATASOURCE_ACTION)
		{
			action = oFF.InAFusionDataSourceAction.createAndRun(syncType, listener, null, this, config, this.m_nextDataSource, this.m_nextDocument);
		}
		if (oFF.notNull(action))
		{
			if (syncType === oFF.SyncType.BLOCKING)
			{
				let layer = action.getData();
				this.onDocFusionLayerDone(action, layer, null);
			}
		}
		else
		{
			this.m_nextActionType = null;
			this.addError(0, "Cannot find action type for fusion");
			if (syncType === oFF.SyncType.NON_BLOCKING)
			{
				this.endSync();
			}
		}
	}
};
oFF.InAFusionMainAction.prototype.processSynchronization = function(syncType)
{
	let fusionResult = this.getActionContext();
	this.setData(fusionResult);
	let config = this.getConfig();
	this.m_connections = oFF.XHashMapByString.create();
	let connectionContainer = config.getConnectionContainer();
	if (oFF.notNull(connectionContainer))
	{
		this.m_connections.put(connectionContainer.getSystemName(), connectionContainer);
	}
	let definitionContent = config.getDefinitionContent();
	if (oFF.notNull(definitionContent))
	{
		let contentType = definitionContent.getContentType();
		if (contentType.isTypeOf(oFF.QModelFormat.INA_REPOSITORY) || contentType.isTypeOf(oFF.QModelFormat.INA_CLONE))
		{
			this.m_nextActionType = oFF.InAFusionLayer.REPO_ACTION;
			this.m_nextDocument = definitionContent;
		}
		else if (contentType.isTypeOf(oFF.QModelFormat.INA_METADATA))
		{
			this.m_nextActionType = oFF.InAFusionLayer.METADATA_ACTION;
			this.m_nextDocument = definitionContent;
		}
	}
	let dataSource = config.getDataSource();
	if (oFF.isNull(this.m_nextActionType) && oFF.notNull(dataSource))
	{
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataSource.getName()))
		{
			this.m_nextDataSource = dataSource;
			this.m_nextActionType = oFF.InAFusionLayer.DATASOURCE_ACTION;
		}
	}
	if (this.getActiveSyncType() === oFF.SyncType.BLOCKING)
	{
		while (oFF.notNull(this.m_nextActionType))
		{
			this.processLayer();
		}
		this.endSync();
	}
	else
	{
		this.processLayer();
	}
	return true;
};
oFF.InAFusionMainAction.prototype.releaseObjectInternal = function() {};

oFF.InAAutoSubmitMdProcessor = function() {};
oFF.InAAutoSubmitMdProcessor.prototype = new oFF.DfQContext();
oFF.InAAutoSubmitMdProcessor.prototype._ff_c = "InAAutoSubmitMdProcessor";

oFF.InAAutoSubmitMdProcessor.create = function(context, rsQueryModelDef, inaUpdatedMetadata)
{
	let processor = new oFF.InAAutoSubmitMdProcessor();
	processor.setupProcessor(context, rsQueryModelDef, inaUpdatedMetadata);
	return processor;
};
oFF.InAAutoSubmitMdProcessor.getDimensionNamesForPlaceholderFilters = function(cartesianProduct)
{
	return oFF.XStream.of(cartesianProduct).filter((list) => {
		let cartesianList = list;
		return oFF.notNull(cartesianList) && cartesianList.size() === 1 && cartesianList.getCartesianElement(0).getLow() !== null && !cartesianList.getCartesianElement(0).getLow().isFunctionalVariableValue() && cartesianList.getCartesianElement(0).getLow().getValueType() !== null && cartesianList.getCartesianElement(0).getLow().getValueType().isVariable();
	}).collect(oFF.XStreamCollector.toSetOfString((el) => {
		return el.getDimensionName();
	}));
};
oFF.InAAutoSubmitMdProcessor.merge = function(importer, inaUpdatedMetadata, queryModel, rsQueryModelDef)
{
	queryModel.metadataUpdateEventing();
	let settings = oFF.InAQMgrMergeSettings.create(true);
	oFF.InAAutoSubmitMdProcessor.updateCubeInfo(inaUpdatedMetadata, queryModel);
	oFF.InAAutoSubmitMdProcessor.updateDimensions(importer, inaUpdatedMetadata, queryModel, rsQueryModelDef, settings);
	oFF.InAAutoSubmitMdProcessor.updateVariables(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAAutoSubmitMdProcessor.updateFilters(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAAutoSubmitMdProcessor.updateConditions(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAAutoSubmitMdProcessor.updateSorting(importer, inaUpdatedMetadata, queryModel, settings);
	oFF.InAAutoSubmitMdProcessor.updateUniversalDisplayHierarchies(importer, inaUpdatedMetadata, queryModel, settings);
	queryModel.resumeEventing();
};
oFF.InAAutoSubmitMdProcessor.updateConditions = function(importer, inaStructure, queryModel, settings)
{
	let conditionManager = queryModel.getConditionManagerBase();
	let inaConditions = inaStructure.getListByKey("Conditions");
	if (!queryModel.getModelCapabilities().supportsSortingDefaults() && oFF.notNull(conditionManager) && oFF.notNull(inaConditions))
	{
		importer.importConditionManager(inaStructure, conditionManager, queryModel);
	}
};
oFF.InAAutoSubmitMdProcessor.updateCubeInfo = function(inaStructure, queryModel)
{
	let cubeInfo = queryModel.getCubeInfo();
	if (oFF.notNull(cubeInfo) && oFF.notNull(inaStructure))
	{
		let createdOn = inaStructure.getStringByKey("CreatedOn");
		let createdOnObj = oFF.XDateTime.createDateTimeSafe(createdOn);
		cubeInfo.setCreatedOn(createdOnObj);
		cubeInfo.setCreatedBy(inaStructure.getStringByKey("CreatedBy"));
		let lastUpdate = inaStructure.getStringByKey("LastDataUpdate");
		let lastUpdateOnObj = oFF.XDateTime.createDateTimeSafe(lastUpdate);
		cubeInfo.setLastUpdateOn(lastUpdateOnObj);
		let dueDateValue = inaStructure.getStringByKey("DueDate");
		let dueDate = oFF.XDateTime.createDateTimeSafe(dueDateValue);
		cubeInfo.setDueDate(dueDate);
	}
};
oFF.InAAutoSubmitMdProcessor.updateDimension = function(importer, inaDimension, dimension, rsDimension, settings)
{
	if (oFF.notNull(dimension) && oFF.notNull(inaDimension))
	{
		if (!dimension.isPropertyUpdatedByModelerMetadata(oFF.QDimensionProperties.DIMENSION_TEXT))
		{
			dimension.setText(inaDimension.getStringByKey("Description"));
		}
		oFF.InAAutoSubmitMdProcessor.updateHierarchy(importer, inaDimension, dimension);
		oFF.InAAutoSubmitMdProcessor.updateMembers(importer, inaDimension, dimension, settings);
		oFF.InAAutoSubmitMdProcessor.updateRsDimension(dimension, rsDimension);
	}
};
oFF.InAAutoSubmitMdProcessor.updateDimensions = function(importer, inaStructure, queryModel, rsQueryModelDef, settings)
{
	let inaDimensions = inaStructure.getListByKey("Dimensions");
	if (oFF.notNull(inaDimensions))
	{
		let len = inaDimensions.size();
		for (let i = 0; i < len; i++)
		{
			let inaDimension = inaDimensions.getStructureAt(i);
			let dimensionName = inaDimension.getStringByKey("Name");
			let dimension = queryModel.getDimensionByName(dimensionName);
			let rsDimension = rsQueryModelDef.getDimensionByName(dimensionName);
			oFF.InAAutoSubmitMdProcessor.updateDimension(importer, inaDimension, dimension, rsDimension, settings);
		}
	}
};
oFF.InAAutoSubmitMdProcessor.updateFilter = function(newFilterExpression, filterExpression)
{
	if (oFF.notNull(filterExpression))
	{
		let newFilterProduct = oFF.isNull(newFilterExpression) ? null : newFilterExpression.getCartesianProduct();
		let oldFilterProduct = filterExpression.getCartesianProduct();
		if (oFF.notNull(oldFilterProduct))
		{
			let dimensionsToUpdateWithVariables = oFF.InAAutoSubmitMdProcessor.getDimensionNamesForPlaceholderFilters(oldFilterProduct);
			let dimensionIterator = dimensionsToUpdateWithVariables.getIterator();
			while (dimensionIterator.hasNext())
			{
				let dimensionName = dimensionIterator.next();
				let newFilterList = oFF.isNull(newFilterProduct) ? null : newFilterProduct.getCartesianListByDimensionName(dimensionName);
				if (oFF.notNull(newFilterList))
				{
					oldFilterProduct.getCartesianListByDimensionName(dimensionName).copyFrom(newFilterList, null);
				}
				else
				{
					oldFilterProduct.removeByDimensionName(dimensionName);
				}
			}
		}
	}
};
oFF.InAAutoSubmitMdProcessor.updateFilters = function(importer, inaStructure, queryModel, settings)
{
	let filterManager = queryModel.getFilterBase();
	if (oFF.notNull(filterManager))
	{
		let inaFixedFilter = inaStructure.getStructureByKey("FixedFilter");
		let newFixedFilterExpression = oFF.isNull(inaFixedFilter) ? null : importer.importComponent(oFF.OlapComponentType.FILTER_EXPRESSION, inaFixedFilter, null, null, queryModel);
		let fixedFilter = filterManager.getFixedFilter();
		if (oFF.notNull(fixedFilter))
		{
			if (oFF.isNull(newFixedFilterExpression))
			{
				fixedFilter.setComplexRoot(null);
			}
			else
			{
				fixedFilter.copyFrom(newFixedFilterExpression, null);
			}
		}
		let inaDynamicFilter = inaStructure.getStructureByKey("DynamicFilter");
		let newDynamicFilterExpression = oFF.isNull(inaDynamicFilter) ? null : importer.importComponent(oFF.OlapComponentType.FILTER_EXPRESSION, inaDynamicFilter, null, null, queryModel);
		oFF.InAAutoSubmitMdProcessor.updateFilter(newDynamicFilterExpression, filterManager.getDynamicFilter());
	}
};
oFF.InAAutoSubmitMdProcessor.updateHierarchy = function(importer, inaDimension, dimension)
{
	let inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
	if (oFF.notNull(inaHierarchy))
	{
		importer.importHierarchy(dimension, inaDimension);
	}
};
oFF.InAAutoSubmitMdProcessor.updateMembers = function(importer, inaDimension, dimension, settings)
{
	let inaMembers = inaDimension.getListByKey("Members");
	if (!oFF.PrUtils.isListEmpty(inaMembers) && dimension.isStructure())
	{
		let keyFieldName = dimension.getKeyField().getName();
		let textField = dimension.getTextField();
		let textFieldName = oFF.isNull(textField) ? null : textField.getName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(textFieldName))
		{
			let inaMemberSize = inaMembers.size();
			for (let iMember = 0; iMember < inaMemberSize; iMember++)
			{
				let inaStructureMember = inaMembers.getStructureAt(iMember);
				let memberName = inaStructureMember.getStringByKey(keyFieldName);
				let memberText = inaStructureMember.getStringByKey(textFieldName);
				let member = dimension.getDimensionMember(memberName);
				if (oFF.notNull(member) && !oFF.XString.isEqual(member.getText(), memberText))
				{
					member.setText(memberText);
					member.getFieldValue(textField).setString(memberText);
				}
			}
		}
	}
};
oFF.InAAutoSubmitMdProcessor.updateRsDimension = function(dimension, rsDimension)
{
	if (oFF.notNull(rsDimension) && oFF.notNull(dimension))
	{
		rsDimension.setText(dimension.getText());
		rsDimension.setHierarchyName(dimension.getHierarchyName());
		rsDimension.setHierarchyActive(dimension.isHierarchyActive());
		rsDimension.setSelectorHierarchyActive(dimension.isSelectorHierarchyActive());
		rsDimension.setSelectorHierarchyName(dimension.getSelectorHierarchyName());
		rsDimension.setLowerLevelNodeAlignment(dimension.getLowerLevelNodeAlignment());
	}
};
oFF.InAAutoSubmitMdProcessor.updateSorting = function(importer, inaStructure, queryModel, settings)
{
	let sortingManager = queryModel.getSortingManagerBase();
	let inaSorting = inaStructure.getListByKey("Sort");
	if (!queryModel.getModelCapabilities().supportsSortingDefaults() && oFF.notNull(sortingManager) && oFF.notNull(inaSorting))
	{
		let newSortingManager = oFF.QSortingManager.create(queryModel);
		importer.importComponent(oFF.OlapComponentType.SORT_MANAGER, inaStructure, newSortingManager, queryModel, queryModel);
		let newOperations = newSortingManager.getSortingOperations();
		let newSortingSize = newOperations.size();
		for (let i = 0; i < newSortingSize; i++)
		{
			let newOperation = newOperations.get(i);
			let newComponentType = newOperation.getComponentType();
			let oldOperation = null;
			if (newComponentType === oFF.OlapComponentType.FIELD_SORTING)
			{
				let field = newOperation.getField();
				oldOperation = sortingManager.getFieldSorting(field, true);
			}
			else if (newComponentType === oFF.OlapComponentType.MEASURE_SORTING)
			{
				let measureMember = newOperation.getMeasure();
				oldOperation = sortingManager.getMeasureSorting(measureMember, true);
				let structureMember = newOperation.getSecondaryMeasure();
				if (oFF.notNull(structureMember) && oFF.notNull(oldOperation) && oldOperation.getSecondaryMeasure() !== structureMember)
				{
					oldOperation.setSecondaryMeasure(structureMember);
				}
			}
			else if (newComponentType === oFF.OlapComponentType.DATA_CELL_SORTING)
			{
				let path01 = newOperation.getElementPath();
				oldOperation = sortingManager.getDataCellSorting(path01, true);
			}
			else if (newComponentType === oFF.OlapComponentType.COMPLEX_SORTING)
			{
				let path02 = newOperation.getElementPath();
				oldOperation = sortingManager.getComplexSorting(path02, true);
			}
			else if (newComponentType === oFF.OlapComponentType.DIMENSION_SORTING)
			{
				let dimension = newOperation.getDimension();
				oldOperation = sortingManager.getDimensionSorting(dimension, true);
				let newSortType = newOperation.getSortingType();
				if (newSortType === oFF.SortType.FILTER)
				{
					oldOperation.setSortByFilter();
				}
				else if (newSortType === oFF.SortType.MEMBER_KEY)
				{
					oldOperation.setSortByKey();
					let newCustomSort = newOperation.getCustomSort();
					let newCustomSortPosition = newOperation.getCustomSortPosition();
					if (oFF.notNull(newCustomSort) && !newCustomSort.isEmpty())
					{
						if (newCustomSort !== oldOperation.getCustomSort())
						{
							oldOperation.setCustomSort(newCustomSort);
						}
						if (newCustomSortPosition !== oldOperation.getCustomSortPosition())
						{
							oldOperation.setCustomSortPosition(newOperation.getCustomSortPosition());
						}
					}
				}
				else if (newSortType === oFF.SortType.MEMBER_TEXT)
				{
					oldOperation.setSortByText();
				}
				else if (newSortType === oFF.SortType.HIERARCHY)
				{
					oldOperation.setSortByHierarchy();
				}
			}
			if (oFF.notNull(oldOperation))
			{
				let newDirection = newOperation.getDirection();
				if (newDirection !== oldOperation.getDirection())
				{
					oldOperation.setDirection(newDirection);
				}
				if (newOperation.isPreserveGroupingEnabled() !== oldOperation.isPreserveGroupingEnabled())
				{
					oldOperation.setPreserveGrouping(newOperation.isPreserveGroupingEnabled());
				}
			}
		}
		oFF.XObjectExt.release(newSortingManager);
	}
};
oFF.InAAutoSubmitMdProcessor.updateUniversalDisplayHierarchies = function(importer, inaStructure, queryModel, settings)
{
	let inaUdh = inaStructure.getStructureByKey("UniversalDisplayHierarchies");
	if (!queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.SORTING_DEFAULTS) && oFF.notNull(inaUdh))
	{
		let inaUdhList = inaUdh.getListByKey("DefinedHierarchies");
		if (!oFF.PrUtils.isListEmpty(inaUdhList))
		{
			let universalDisplayHierarchies = queryModel.getUniversalDisplayHierarchiesBase();
			let udhSize = inaUdhList.size();
			for (let i = 0; i < udhSize; i++)
			{
				let inaUdHierarchy = inaUdhList.getStructureAt(i);
				let udhName = inaUdHierarchy.getStringByKey("Name");
				let udh = oFF.isNull(universalDisplayHierarchies) ? null : universalDisplayHierarchies.getByName(udhName);
				if (oFF.notNull(udh))
				{
					let active = inaUdHierarchy.getBooleanByKeyExt("Active", udh.isActive());
					udh.setActive(active);
				}
			}
		}
	}
};
oFF.InAAutoSubmitMdProcessor.updateVariable = function(importer, variableContainer, inaVariable, variable, settings)
{
	if (oFF.notNull(variable) && oFF.notNull(inaVariable))
	{
		variable.setText(inaVariable.getStringByKey("Description"));
		let inaInputEnabled = inaVariable.getBooleanByKeyExt("InputEnabled", false);
		variable.setInputEnabled(inaInputEnabled);
		if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE) && inaVariable.containsKey("IsInputEnabledAndExit"))
		{
			variable.setIsInputEnabledAndExit(inaVariable.getBooleanByKey("IsInputEnabledAndExit"));
		}
		oFF.InAAutoSubmitMdProcessor.updateVariableValues(importer, variableContainer, inaVariable, variable, settings);
	}
};
oFF.InAAutoSubmitMdProcessor.updateVariableValues = function(importer, variableContainer, inaVariable, variable, settings)
{
	let tmp = importer.m_mode;
	importer.m_mode = oFF.QModelFormat.INA_DATA;
	let variableType = variable.getVariableType();
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		let inaValues = inaVariable.getStructureByKey("Values");
		if (oFF.notNull(inaValues))
		{
			let dimensionMemberVariable = variable;
			importer.importDimensionMemberVariable(inaVariable, dimensionMemberVariable, variableContainer);
		}
	}
	else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		importer.importSimpleTypeVariable(inaVariable, variable, variableContainer);
	}
	importer.m_mode = tmp;
};
oFF.InAAutoSubmitMdProcessor.updateVariables = function(importer, inaStructure, queryModel, settings)
{
	let variableContainer = queryModel.getVariableContainer();
	let inaVariables = inaStructure.getListByKey("Variables");
	if (oFF.notNull(variableContainer) && oFF.notNull(inaVariables))
	{
		let variableSize = inaVariables.size();
		for (let i = 0; i < variableSize; i++)
		{
			let inaVariable = oFF.PrUtils.getStructureElement(inaVariables, i);
			if (oFF.notNull(inaVariable))
			{
				let variableName = inaVariable.getStringByKey("Name");
				let variable = variableContainer.getVariable(variableName);
				oFF.InAAutoSubmitMdProcessor.updateVariable(importer, variableContainer, inaVariable, variable, settings);
			}
		}
	}
};
oFF.InAAutoSubmitMdProcessor.prototype.m_inaUpdatedMetadata = null;
oFF.InAAutoSubmitMdProcessor.prototype.m_rsQueryModelDef = null;
oFF.InAAutoSubmitMdProcessor.prototype.importMetadataAndUpdateState = function()
{
	let provider = this.getContext();
	if (oFF.notNull(provider))
	{
		let queryModel = provider.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			queryModel.setIsMetadataUpdatedByAutoSubmit(false);
			if (provider.isProcessingAutoSubmit())
			{
				if (this.m_rsQueryModelDef.isExecuteAutoVariableSubmit())
				{
					this.updateModelMetadata(queryModel);
					this.updateState();
				}
				else
				{
					this.rollbackState();
				}
			}
		}
	}
};
oFF.InAAutoSubmitMdProcessor.prototype.releaseObject = function()
{
	this.m_inaUpdatedMetadata = oFF.XObjectExt.release(this.m_inaUpdatedMetadata);
	this.m_rsQueryModelDef = null;
};
oFF.InAAutoSubmitMdProcessor.prototype.rollbackState = function()
{
	let provider = this.getContext();
	if (provider.isProcessingAutoSubmit())
	{
		let previousVariableState = provider.getPreviousVariableProcessorState();
		if (previousVariableState === oFF.VariableProcessorState.CHANGEABLE_STARTUP)
		{
			provider.setVariableProcessorState(oFF.VariableProcessorState.CHANGEABLE_STARTUP);
			provider.setPreviousVariableProcessorState(null);
		}
		else if (previousVariableState === oFF.VariableProcessorState.CHANGEABLE_REINIT)
		{
			provider.setVariableProcessorState(oFF.VariableProcessorState.CHANGEABLE_REINIT);
			provider.setPreviousVariableProcessorState(oFF.VariableProcessorState.PROCESSING_REINIT);
		}
	}
};
oFF.InAAutoSubmitMdProcessor.prototype.setupProcessor = function(context, rsQueryModelDef, inaUpdatedMetadata)
{
	this.setupContext(context);
	this.m_inaUpdatedMetadata = oFF.PrFactory.createStructureDeepCopy(inaUpdatedMetadata);
	this.m_rsQueryModelDef = rsQueryModelDef;
};
oFF.InAAutoSubmitMdProcessor.prototype.updateModelMetadata = function(queryModel)
{
	if (oFF.notNull(this.m_inaUpdatedMetadata))
	{
		let application = queryModel.getApplication();
		let modelCapabilities = queryModel.getModelCapabilities();
		let importer = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
		oFF.InAAutoSubmitMdProcessor.merge(importer, this.m_inaUpdatedMetadata, queryModel, this.m_rsQueryModelDef);
		queryModel.setIsMetadataUpdatedByAutoSubmit(true);
	}
};
oFF.InAAutoSubmitMdProcessor.prototype.updateState = function()
{
	let provider = this.getContext();
	oFF.InAQMgrVarAction.clearSavedStateAndExternalizeDynamicFilter(provider, provider.getVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT, false);
	provider.setVariableProcessorState(oFF.VariableProcessorState.SUBMITTED);
	provider.prepareAfterVariables();
};

oFF.InACustomHierarchyProvider = function() {};
oFF.InACustomHierarchyProvider.prototype = new oFF.SyncActionExt();
oFF.InACustomHierarchyProvider.prototype._ff_c = "InACustomHierarchyProvider";

oFF.InACustomHierarchyProvider.create = function(queryProvider, customHierarchyDefinition, enforceRequest)
{
	let provider = new oFF.InACustomHierarchyProvider();
	provider.setupAction(null, null, null, queryProvider);
	provider.m_queryProvider = oFF.XWeakReferenceUtil.getWeakRef(queryProvider);
	provider.m_customHierarchyDefinition = oFF.XWeakReferenceUtil.getWeakRef(customHierarchyDefinition);
	provider.m_enforceRequest = enforceRequest;
	return provider;
};
oFF.InACustomHierarchyProvider.prototype.m_customHierarchyDefinition = null;
oFF.InACustomHierarchyProvider.prototype.m_enforceRequest = false;
oFF.InACustomHierarchyProvider.prototype.m_queryProvider = null;
oFF.InACustomHierarchyProvider.prototype.applyCustomHierarchy = function(customHierarchy)
{
	let dimension = customHierarchy.getDimension();
	let hierarchyManager = dimension.getHierarchyManager();
	hierarchyManager.addCustomHierarchy(customHierarchy);
	let customHierarchyDef = dimension.getCustomHierarchyDefinition();
	if (oFF.notNull(customHierarchyDef) && oFF.XString.isEqual(customHierarchyDef.getName(), customHierarchy.getName()))
	{
		dimension.setHierarchy(customHierarchy);
		let queryManager = dimension.getQueryManager();
		if (oFF.notNull(queryManager))
		{
			if (queryManager.isExecuteAutoVariableSubmit() && !queryManager.isProcessingAutoSubmit())
			{
				let hierarchyNameVariableName = dimension.getHierarchyNameVariableName();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyNameVariableName))
				{
					queryManager.getVariable(hierarchyNameVariableName).setWinControlInAutoSubmit(false);
				}
			}
		}
	}
	this.setData(customHierarchy);
};
oFF.InACustomHierarchyProvider.prototype.createCustomHierarchy = function(customHierarchyDefinition, inaHierarchy)
{
	let dimension = this.getQueryProvider().getQueryModel().getDimensionByName(customHierarchyDefinition.getDimensionName());
	let inaCustomHierarchyName = oFF.PrUtils.getStringProperty(inaHierarchy, "Name");
	let ianCustomHierarchyVersion = oFF.PrUtils.getStringProperty(inaHierarchy, "Version");
	let inaCustomHierarchyDueDate = oFF.PrUtils.getStringProperty(inaHierarchy, "DueDate");
	let customHierarchy = oFF.QHierarchy.createCustomHierarchy(dimension.getContext(), dimension, inaCustomHierarchyName.getString(), customHierarchyDefinition.getDescription());
	if (oFF.notNull(ianCustomHierarchyVersion))
	{
		customHierarchy.setHierarchyVersion(ianCustomHierarchyVersion.getString());
	}
	if (oFF.notNull(inaCustomHierarchyDueDate))
	{
		let isBW = dimension.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.ABAP);
		let inaDueDate = isBW ? oFF.XDate.createDateFromSAPFormat(inaCustomHierarchyDueDate.getString()) : oFF.XDate.createDateFromIsoFormat(inaCustomHierarchyDueDate.getString());
		customHierarchy.setHierarchyDueDate(inaDueDate);
	}
	return customHierarchy;
};
oFF.InACustomHierarchyProvider.prototype.fillCustomHierarchyRequestStructure = function(customHierarchyDefinition)
{
	this.addProfileStep("fillCustomHierarchyRequestStructure");
	let dataStructure = oFF.PrFactory.createStructure();
	let exportInAData = oFF.QInAExportFactory.createForData(this.getApplication(), this.getQueryProvider().getModelCapabilities());
	let innerRequestStructure = this.getQueryProvider().setInnerStructure(dataStructure, "Analytics", oFF.ProcessingStep.HIERARCHY_SUBMIT, exportInAData);
	let inaDefinition = exportInAData.exportCustomHierarchyDefinition(customHierarchyDefinition);
	innerRequestStructure.put("Definition", inaDefinition);
	this.addAllMessages(exportInAData);
	let inaContext = dataStructure.getStructureByKey("Analytics");
	let inaProcessingDirective = inaContext.putNewStructure("ProcessingDirectives");
	inaProcessingDirective.putString("ProcessingStep", "TransientHierarchySubmit");
	this.endProfileStep();
	return dataStructure;
};
oFF.InACustomHierarchyProvider.prototype.finalizeCustomHierarchyProcessing = function(customHierarchyDefinition, inaHierarchy)
{
	let customHierarchySessionData = this.getCustomHierarchySessionData();
	if (oFF.notNull(customHierarchySessionData))
	{
		customHierarchySessionData.finishHierarchySubmit(customHierarchyDefinition, inaHierarchy);
	}
	this.endSync();
};
oFF.InACustomHierarchyProvider.prototype.getApplication = function()
{
	return this.getActionContext().getApplication();
};
oFF.InACustomHierarchyProvider.prototype.getCustomHierarchyDefinition = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_customHierarchyDefinition);
};
oFF.InACustomHierarchyProvider.prototype.getCustomHierarchyRepo = function()
{
	return this.getQueryProvider().getOlapEnv().getCustomHierarchyRepository();
};
oFF.InACustomHierarchyProvider.prototype.getCustomHierarchySessionData = function()
{
	let customHierarchySessionData = null;
	let connectionContainer = this.getQueryProvider().getConnection();
	if (oFF.notNull(connectionContainer))
	{
		customHierarchySessionData = connectionContainer.getCustomObject(oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA);
		if (oFF.isNull(customHierarchySessionData))
		{
			customHierarchySessionData = oFF.CustomHierarchySessionData.create();
			connectionContainer.addCustomObject(oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA, customHierarchySessionData);
		}
	}
	return customHierarchySessionData;
};
oFF.InACustomHierarchyProvider.prototype.getQueryProvider = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_queryProvider);
};
oFF.InACustomHierarchyProvider.prototype.onCustomHierarchySubmitted = function(customHierarchyDefinition, inaHierarchy)
{
	if (oFF.notNull(customHierarchyDefinition) && customHierarchyDefinition.isEqualTo(this.getCustomHierarchyDefinition()) && this.getSyncState() === oFF.SyncState.PROCESSING)
	{
		if (oFF.notNull(inaHierarchy))
		{
			this.applyCustomHierarchy(this.createCustomHierarchy(customHierarchyDefinition, inaHierarchy));
		}
		this.endSync();
	}
};
oFF.InACustomHierarchyProvider.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	let customHierarchyDefinition = this.getCustomHierarchyDefinition();
	let inaHierarchy = null;
	if (extResult.isValid() && oFF.notNull(response) && oFF.notNull(customHierarchyDefinition))
	{
		let inaGrids = oFF.PrUtils.getListProperty(response.getRootElement(), "Grids");
		let inaGrid = oFF.PrUtils.getStructureElement(inaGrids, 0);
		let inaAxes = oFF.PrUtils.getListProperty(inaGrid, "Axes");
		let inaAxis = oFF.PrUtils.getStructureElement(inaAxes, 0);
		let inaDimensions = oFF.PrUtils.getListProperty(inaAxis, "Dimensions");
		let inaDimension = oFF.PrUtils.getStructureElement(inaDimensions, 0);
		let dimensionName = customHierarchyDefinition.getDimensionName();
		let dimension = this.getQueryProvider().getQueryModel().getDimensionByName(dimensionName);
		if (oFF.isNull(dimension) || oFF.isNull(inaDimension) || !oFF.XString.isEqual(dimensionName, inaDimension.getStringByKey("Name")))
		{
			this.addError(oFF.ErrorCodes.OTHER_ERROR, "Invalid custom hierarchy submit response");
			this.finalizeCustomHierarchyProcessing(customHierarchyDefinition, null);
			return;
		}
		inaHierarchy = inaDimension.getStructureByKey("Hierarchy");
		if (oFF.isNull(inaHierarchy) || inaHierarchy.getStringByKey("Name") === null)
		{
			this.addError(oFF.ErrorCodes.OTHER_ERROR, oFF.XStringUtils.concatenate2("Invalid custom hierarchy submit response for dimension ", dimensionName));
			this.finalizeCustomHierarchyProcessing(customHierarchyDefinition, null);
			return;
		}
		customHierarchyDefinition.setName(inaHierarchy.getStringByKey("Name"));
		this.getCustomHierarchyRepo().addCustomHierarchy(customHierarchyDefinition);
		this.applyCustomHierarchy(this.createCustomHierarchy(customHierarchyDefinition, inaHierarchy));
	}
	this.finalizeCustomHierarchyProcessing(customHierarchyDefinition, inaHierarchy);
};
oFF.InACustomHierarchyProvider.prototype.processExecution = function(syncType, listener, customIdentifier)
{
	let definition = this.getCustomHierarchyDefinition();
	if (oFF.isNull(definition) || oFF.XStringUtils.isNullOrEmpty(definition.getDimensionName()) || !oFF.XCollectionUtils.hasElements(definition.getChildNodes()))
	{
		this.addError(oFF.ErrorCodes.INVALID_STATE, "Invalid custom hierarchy definition!");
		return this;
	}
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.InACustomHierarchyProvider.prototype.processSynchronization = function(syncType)
{
	let queryProvider = this.getQueryProvider();
	let customHierarchyDefinition = this.getCustomHierarchyDefinition();
	let customHierarchySessionData = this.getCustomHierarchySessionData();
	let customHierarchyResponse = !this.m_enforceRequest && oFF.notNull(customHierarchySessionData) ? customHierarchySessionData.getHierarchyInAResponse(customHierarchyDefinition) : null;
	if (oFF.notNull(customHierarchyResponse))
	{
		this.applyCustomHierarchy(this.createCustomHierarchy(customHierarchyDefinition, customHierarchyResponse));
		return false;
	}
	else if (oFF.notNull(customHierarchySessionData) && customHierarchySessionData.registerOnActiveHierarchySubmit(customHierarchyDefinition, this))
	{
		return true;
	}
	else
	{
		if (oFF.notNull(customHierarchySessionData))
		{
			customHierarchySessionData.flagHierarchySubmitActive(customHierarchyDefinition);
		}
		let ocpFunction = queryProvider.createFunction();
		this.setSyncChild(ocpFunction);
		let request = ocpFunction.getRpcRequest();
		request.setRequestStructure(this.fillCustomHierarchyRequestStructure(customHierarchyDefinition));
		ocpFunction.processFunctionExecution(syncType, this, null);
		return true;
	}
};
oFF.InACustomHierarchyProvider.prototype.releaseObjectInternal = function()
{
	this.m_queryProvider = oFF.XObjectExt.release(this.m_queryProvider);
	this.m_customHierarchyDefinition = oFF.XObjectExt.release(this.m_customHierarchyDefinition);
};

oFF.InAValueHelpProvider = function() {};
oFF.InAValueHelpProvider.prototype = new oFF.DfQContext();
oFF.InAValueHelpProvider.prototype._ff_c = "InAValueHelpProvider";

oFF.InAValueHelpProvider.prototype.m_exportValueHelp = null;
oFF.InAValueHelpProvider.prototype.m_isBwHierarchyNameVariable = false;
oFF.InAValueHelpProvider.prototype.m_valuehelpCallbacks = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpIdentifier = 0;
oFF.InAValueHelpProvider.prototype.m_valuehelpIdentifiers = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpProcessedKeys = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpResultNodes = null;
oFF.InAValueHelpProvider.prototype.m_valuehelpResults = null;
oFF.InAValueHelpProvider.prototype.m_variablesSubmittedImplicitly = false;
oFF.InAValueHelpProvider.prototype.checkVariableType = function(variable)
{
	this.m_isBwHierarchyNameVariable = this.getQueryManager() !== null && this.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.ABAP) && variable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE;
};
oFF.InAValueHelpProvider.prototype.createResultSetProvider = function(procedure, structure, rsDefQueryModel)
{
	oFF.XBooleanUtils.checkTrue(this.getQueryManagerBase().getCapabilitiesBase().supportsEncodedResultset(), "Only encoded resultset is supported");
	let rsDefDimension = rsDefQueryModel.getRowsAxisDef().getRsDimensions().get(0);
	if (oFF.notNull(rsDefDimension) && rsDefDimension.isStructure())
	{
		let FPA10_8406_specialCase = this.m_variablesSubmittedImplicitly && !rsDefDimension.isHierarchyActive();
		let flatSelector = !this.m_variablesSubmittedImplicitly && !rsDefDimension.isSelectorHierarchyActive();
		this.m_variablesSubmittedImplicitly = false;
		if (FPA10_8406_specialCase || flatSelector)
		{
			let measureValueHelpRsProvider = oFF.MeasureValueHelpRsProvider.create(this.getDimensionAccessor().getDimensionByName(rsDefDimension.getName()));
			let valueHelpKey = this.getValueHelpIdentifierString();
			if (this.hasValueHelpResultNodeForKey(valueHelpKey))
			{
				this.putValueHelpResultNode(valueHelpKey, measureValueHelpRsProvider.getMeasureHelpNodes());
			}
			return measureValueHelpRsProvider;
		}
	}
	return oFF.InARsEnProvider.create(this.getQueryManager(), procedure, structure, oFF.QContextType.SELECTOR);
};
oFF.InAValueHelpProvider.prototype.getExport = function()
{
	return this.m_exportValueHelp;
};
oFF.InAValueHelpProvider.prototype.getNextValueHelpIdentifier = function()
{
	this.m_valuehelpIdentifier++;
	return oFF.XInteger.convertToString(this.m_valuehelpIdentifier);
};
oFF.InAValueHelpProvider.prototype.getValueHelpIdentifier = function()
{
	return oFF.XIntegerValue.create(this.m_valuehelpIdentifier);
};
oFF.InAValueHelpProvider.prototype.getValueHelpIdentifierString = function()
{
	return oFF.XInteger.convertToString(this.m_valuehelpIdentifier);
};
oFF.InAValueHelpProvider.prototype.getValueHelpResult = function(key)
{
	return this.m_valuehelpResults.getByKey(key);
};
oFF.InAValueHelpProvider.prototype.getValueHelpResultSetNode = function(key)
{
	return this.m_valuehelpResultNodes.getByKey(key);
};
oFF.InAValueHelpProvider.prototype.hasValueHelpResultNodeForKey = function(valueHelpKey)
{
	return this.m_valuehelpResultNodes.containsKey(valueHelpKey);
};
oFF.InAValueHelpProvider.prototype.lazyLoadValueHelpObjects = function()
{
	if (oFF.isNull(this.m_exportValueHelp))
	{
		this.m_exportValueHelp = oFF.QInAExportFactory.createForValueHelp(this.getApplication(), this.getModelCapabilities());
		this.m_valuehelpCallbacks = oFF.XHashMapByString.create();
		this.m_valuehelpResults = oFF.XHashMapByString.create();
		this.m_valuehelpResultNodes = oFF.XHashMapByString.create();
		this.m_valuehelpIdentifiers = oFF.XHashMapByString.create();
		this.m_valuehelpProcessedKeys = oFF.XHashSetOfString.create();
	}
	let iter = this.m_valuehelpProcessedKeys.getIterator();
	while (iter.hasNext())
	{
		let key = iter.next();
		this.m_valuehelpResults.remove(key);
		this.m_valuehelpResultNodes.remove(key);
		this.m_valuehelpCallbacks.remove(key);
		this.m_valuehelpIdentifiers.remove(key);
	}
	this.m_valuehelpProcessedKeys.clear();
};
oFF.InAValueHelpProvider.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	let key = customIdentifier.toString();
	let realCallback = this.m_valuehelpCallbacks.getByKey(key);
	let realIdentifier = this.m_valuehelpIdentifiers.getByKey(key);
	if (this.m_valuehelpResultNodes.containsKey(key))
	{
		let extResultWithNodes = this.m_valuehelpResultNodes.getByKey(key);
		if (oFF.isNull(extResultWithNodes))
		{
			extResultWithNodes = this.transform(extResult);
			this.m_valuehelpResultNodes.put(key, extResultWithNodes);
		}
		if (oFF.notNull(realCallback))
		{
			realCallback.onValuehelpExecuted(extResultWithNodes, resultSetContainer, realIdentifier);
		}
	}
	else
	{
		this.m_valuehelpResults.put(key, extResult);
		if (oFF.notNull(realCallback))
		{
			realCallback.onValuehelpExecuted(extResult, resultSetContainer, realIdentifier);
		}
	}
	this.m_valuehelpProcessedKeys.add(key);
};
oFF.InAValueHelpProvider.prototype.putValueHelpCallback = function(key, value)
{
	this.m_valuehelpCallbacks.put(key, value);
};
oFF.InAValueHelpProvider.prototype.putValueHelpIdentifier = function(key, value)
{
	this.m_valuehelpIdentifiers.put(key, value);
};
oFF.InAValueHelpProvider.prototype.putValueHelpResult = function(key, value)
{
	this.m_valuehelpResults.put(key, value);
};
oFF.InAValueHelpProvider.prototype.putValueHelpResultNode = function(key, value)
{
	this.m_valuehelpResultNodes.put(key, value);
};
oFF.InAValueHelpProvider.prototype.releaseObject = function()
{
	this.m_valuehelpCallbacks = oFF.XObjectExt.release(this.m_valuehelpCallbacks);
	this.m_valuehelpResults = oFF.XObjectExt.release(this.m_valuehelpResults);
	this.m_valuehelpResultNodes = oFF.XObjectExt.release(this.m_valuehelpResultNodes);
	this.m_valuehelpIdentifiers = oFF.XObjectExt.release(this.m_valuehelpIdentifiers);
	this.m_valuehelpProcessedKeys = oFF.XObjectExt.release(this.m_valuehelpProcessedKeys);
	this.m_exportValueHelp = oFF.XObjectExt.release(this.m_exportValueHelp);
};
oFF.InAValueHelpProvider.prototype.setVariablesSubmittedImplicitly = function(implicitVariableSubmit)
{
	this.m_variablesSubmittedImplicitly = implicitVariableSubmit;
};
oFF.InAValueHelpProvider.prototype.setupExt = function(context)
{
	this.setContext(context);
	this.m_valuehelpIdentifier = 0;
};
oFF.InAValueHelpProvider.prototype.transform = function(extResult)
{
	if (extResult.hasErrors())
	{
		return oFF.ExtResult.create(null, extResult);
	}
	let data = extResult.getData();
	if (oFF.isNull(data) || data.hasErrors())
	{
		return oFF.ExtResult.create(null, extResult);
	}
	let cursorResultSet = data.getCursorResultSet();
	if (cursorResultSet.hasErrors() || cursorResultSet.getState() === oFF.ResultSetState.ERROR)
	{
		return oFF.ExtResult.create(null, extResult);
	}
	let profileTransform = oFF.ProfileNode.create("ValueHelp", 0);
	profileTransform.addProfileStep("Transforming ResultSet to List");
	let customHier = this.m_isBwHierarchyNameVariable ? this.getOlapEnv().getCustomHierarchyRepository().getCustomHierarchyDefinitions().getValuesAsReadOnlyList() : null;
	let customHierNames = oFF.XList.create();
	if (oFF.notNull(customHier))
	{
		for (let c = 0; c < customHier.size(); c++)
		{
			let hierNameRepo = customHier.get(c).getName();
			oFF.XCollectionUtils.addIfNotPresent(customHierNames, hierNameRepo);
		}
	}
	let queryManager = data.getQueryManager();
	let isAbap = this.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.ABAP);
	let connection = queryManager.getConnection();
	let customHierarchySessionData = oFF.notNull(connection) ? connection.getCustomObject(oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA) : null;
	if (oFF.notNull(customHierarchySessionData))
	{
		let customHierSession = customHierarchySessionData.getHierarchyDefinitionNames();
		for (let h = 0; h < customHierSession.size(); h++)
		{
			let hierNameSession = customHierSession.get(h);
			oFF.XCollectionUtils.addIfNotPresent(customHierNames, hierNameSession);
		}
	}
	let parentIndices = oFF.XList.create();
	let nodes = oFF.XList.create();
	let cursorRowsAxis = cursorResultSet.getCursorRowsAxis();
	let isCorrectDrillState = queryManager.getSession().hasFeature(oFF.FeatureToggleOlap.CORRECT_DRILLSTATE_IN_CLASSIC_RESULTSET);
	cursorRowsAxis.loadDimensionStructureMembers();
	while (cursorRowsAxis.hasNextTuple())
	{
		cursorRowsAxis.nextTuple();
		while (cursorRowsAxis.hasNextTupleElement())
		{
			let tupleElement = cursorRowsAxis.nextTupleElement();
			let dimensionMemberName = tupleElement.getDimensionMemberName();
			let dimension = tupleElement.getDimensionAtCurrentPositionFromQueryModel();
			let rsDimension = tupleElement.getRsDimensionAtCurrentPosition();
			let keyField = oFF.notNull(rsDimension) ? rsDimension.getKeyField() : null;
			let member = null;
			if (isAbap && dimension.supportsBasicStructureMembers() && this.getSession().hasFeature(oFF.FeatureToggleOlap.STRUCTURE_MEMBER_VALUE_HELP_FIELDS_FROM_METADATA))
			{
				member = dimension.getStructureMember(dimensionMemberName);
			}
			if (oFF.isNull(member))
			{
				let memberBase = dimension.getValueHelpDimensionMemberWithFormat(dimensionMemberName, oFF.notNull(keyField) ? keyField.getValueType() : null);
				memberBase.setName(dimensionMemberName);
				memberBase.setDimensionMemberNameValueException(tupleElement.getDimensionMemberNameValueException());
				while (cursorRowsAxis.hasNextFieldValue())
				{
					let fieldValue = cursorRowsAxis.nextFieldValue();
					let field = fieldValue.getField();
					let value = fieldValue.getValue();
					let memberFieldValue = null;
					if (oFF.notNull(value))
					{
						memberFieldValue = memberBase.createAndAddFieldWithValue(field, value);
					}
					else if (field.getValueType().isDateTime())
					{
						memberFieldValue = memberBase.createAndAddField(field);
					}
					if (oFF.notNull(memberFieldValue))
					{
						memberFieldValue.setValueException(fieldValue.getValueException());
						memberFieldValue.setFormattedValue(fieldValue.getFormattedValue());
					}
					if (oFF.notNull(value))
					{
						let stringValue = value.toString();
						if (field.isEqualTo(dimension.getSelectorTextField()))
						{
							memberBase.setText(stringValue);
						}
						else if (field.isEqualTo(dimension.getSelectorKeyField()))
						{
							memberBase.setName(stringValue);
						}
					}
				}
				member = memberBase;
			}
			let memberName = member.getName();
			if (this.m_isBwHierarchyNameVariable)
			{
				if (!customHierNames.contains(memberName))
				{
					parentIndices.add(oFF.XIntegerValue.create(tupleElement.getParentNodeIndex()));
					nodes.add(oFF.QValueHelpNode2.createValueHelpNode(memberName, member, tupleElement.getDrillState(), tupleElement.getDisplayLevel(), tupleElement.getChildCount(), tupleElement.getAbsoluteLevel(), isCorrectDrillState));
				}
			}
			else
			{
				parentIndices.add(oFF.XIntegerValue.create(tupleElement.getParentNodeIndex()));
				nodes.add(oFF.QValueHelpNode2.createValueHelpNode(memberName, member, tupleElement.getDrillState(), tupleElement.getDisplayLevel(), tupleElement.getChildCount(), tupleElement.getAbsoluteLevel(), isCorrectDrillState));
			}
		}
	}
	profileTransform.addProfileStep("Assign parent nodes");
	let sizeNodes = nodes.size();
	for (let idxNode = 0; idxNode < sizeNodes; idxNode++)
	{
		let parentIdx = parentIndices.get(idxNode).getInteger();
		if (parentIdx >= 0)
		{
			let parentNode = nodes.get(parentIdx);
			parentNode.addChildNode(nodes.get(idxNode));
		}
	}
	oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(parentIndices);
	profileTransform.endProfileStep();
	extResult.getRootProfileNode().addProfileNode(profileTransform);
	return oFF.ExtResult.create(nodes, extResult);
};

oFF.InAFusionDataSourceAction = function() {};
oFF.InAFusionDataSourceAction.prototype = new oFF.InAFusionLayer();
oFF.InAFusionDataSourceAction.prototype._ff_c = "InAFusionDataSourceAction";

oFF.InAFusionDataSourceAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource, content)
{
	let object = new oFF.InAFusionDataSourceAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	if (oFF.notNull(content))
	{
		object.setContent(content);
	}
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionDataSourceAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.DATASOURCE_ACTION;
};
oFF.InAFusionDataSourceAction.prototype.processSynchronization = function(syncType)
{
	let dataSource = this.getDataSource();
	let dataSourceType = dataSource.getType();
	if (dataSourceType === oFF.MetaObjectType.URL)
	{
		this.setNextActionType(oFF.InAFusionLayer.URL_ACTION);
	}
	else if (dataSourceType === oFF.MetaObjectType.SFX)
	{
		this.setNextActionType(oFF.InAFusionLayer.MODEL_ACTION);
	}
	else
	{
		if (oFF.isNull(dataSourceType))
		{
			let config = this.getConfig();
			let mode = config.getMode();
			if (mode === oFF.QueryManagerMode.BLENDING)
			{
				let targetDataSource = oFF.QDataSource.create();
				targetDataSource.copyFrom(dataSource, null);
				targetDataSource.setType(oFF.MetaObjectType.BLENDING);
				let blendingDefinition = targetDataSource.getBlendingDefinition();
				if (oFF.isNull(blendingDefinition))
				{
					blendingDefinition = config.getBlendingDefinition();
					targetDataSource.setBlendingDefinition(blendingDefinition);
				}
				if (oFF.notNull(blendingDefinition) && oFF.XStringUtils.isNullOrEmpty(targetDataSource.getObjectName()))
				{
					let objectName = oFF.XStringBuffer.create();
					for (let idx = 0; idx < blendingDefinition.getSources().size(); idx++)
					{
						objectName.append(blendingDefinition.getSources().get(idx).getQueryAliasName());
					}
					let objectNameStr = objectName.toString();
					if (objectName.length() >= 256)
					{
						objectNameStr = oFF.XSha1.createSHA1(objectNameStr);
					}
					targetDataSource.setObjectName(objectNameStr);
				}
				dataSource = targetDataSource;
			}
		}
		this.setNextActionType(oFF.InAFusionLayer.METADATA_ACTION);
	}
	this.setNextDataSource(dataSource);
	return false;
};

oFF.InAFusionLayerRpc = function() {};
oFF.InAFusionLayerRpc.prototype = new oFF.InAFusionLayer();
oFF.InAFusionLayerRpc.prototype._ff_c = "InAFusionLayerRpc";

oFF.InAFusionLayerRpc.prototype.createFunction = function(path)
{
	let connection = this.getConnection();
	if (oFF.isNull(connection))
	{
		let connectionPool = this.getApplication().getConnectionPool();
		connection = connectionPool.getOpenConnection(this.getSystemName());
	}
	let rpcFunction = connection.newRpcFunction(path);
	let request = rpcFunction.getRpcRequest();
	request.setMethod(oFF.HttpRequestMethod.HTTP_POST);
	return rpcFunction;
};
oFF.InAFusionLayerRpc.prototype.onServerMetadataLoaded = function(extResult, serverMetadata, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		this.setServerMetadata(serverMetadata);
		this.processMainContentFetch();
	}
	else
	{
		this.endSync();
	}
};
oFF.InAFusionLayerRpc.prototype.prepare = function() {};
oFF.InAFusionLayerRpc.prototype.processMainContentFetch = function()
{
	this.prepare();
	let rpcFunction = this.createSpecificFunction();
	let request = rpcFunction.getRpcRequest();
	let requestStructure = this.constructPayload();
	request.setRequestStructure(requestStructure);
	rpcFunction.processFunctionExecution(this.getActiveSyncType(), this, null);
};
oFF.InAFusionLayerRpc.prototype.processServerMetadataFetch = function(systemDescription)
{
	let connection = this.getActionContext().getConnectionExt(systemDescription.getSystemName(), this.hasPrivateConnection(), this.getConnectionName());
	this.setConnection(connection);
	connection.getSystemConnect().getServerMetadataExt(this.getActiveSyncType(), this, null);
};
oFF.InAFusionLayerRpc.prototype.processSynchronization = function(syncType)
{
	let systemDescription = this.getSystemDescription();
	if (oFF.notNull(systemDescription))
	{
		this.processServerMetadataFetch(systemDescription);
	}
	else
	{
		this.processMainContentFetch();
	}
	return true;
};

oFF.InAFusionRepoAction = function() {};
oFF.InAFusionRepoAction.prototype = new oFF.InAFusionLayer();
oFF.InAFusionRepoAction.prototype._ff_c = "InAFusionRepoAction";

oFF.InAFusionRepoAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource, content)
{
	let object = new oFF.InAFusionRepoAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	if (oFF.notNull(content))
	{
		object.setContent(content);
	}
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionRepoAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.REPO_ACTION;
};
oFF.InAFusionRepoAction.prototype.processSynchronization = function(syncType)
{
	let content = this.getContent();
	if (oFF.notNull(content))
	{
		let contentType = content.getContentType();
		if (contentType.isTypeOf(oFF.QModelFormat.INA_CLONE))
		{
			let cloneDoc = content.getJsonContent();
			let metadataDoc = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA_CORE, cloneDoc.getStructureByKey("Metadata"));
			let repoDoc = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_REPOSITORY, cloneDoc.getStructureByKey("Runtime"));
			this.setContent(repoDoc);
			this.setNextDocument(metadataDoc);
			this.setNextActionType(oFF.InAFusionLayer.METADATA_ACTION);
		}
		else if (contentType.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
		{
			let inaRepoStructure = content.getJsonContent().asStructure();
			let ctype = inaRepoStructure.getStringByKey("CType");
			let importer = oFF.QInAImportFactory.createForRepository(this.getApplication(), null);
			if (oFF.XString.isEqual("QueryManager", ctype))
			{
				let inaServiceConfig = inaRepoStructure.getStructureByKey("QueryServiceConfig");
				let newServiceConfig = importer.importComponent(oFF.OlapComponentType.QUERY_SERVICE_CONFIG, inaServiceConfig, null, null, null);
				newServiceConfig.getSystemName();
			}
			else
			{
				let dataSource = importer.importDataSource(inaRepoStructure);
				this.addAllMessages(importer);
				this.setNextDataSource(dataSource);
				this.setNextActionType(oFF.InAFusionLayer.METADATA_ACTION);
			}
		}
	}
	return false;
};

oFF.InAFusionUrlAction = function() {};
oFF.InAFusionUrlAction.prototype = new oFF.InAFusionLayer();
oFF.InAFusionUrlAction.prototype._ff_c = "InAFusionUrlAction";

oFF.InAFusionUrlAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource)
{
	let object = new oFF.InAFusionUrlAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionUrlAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.URL_ACTION;
};
oFF.InAFusionUrlAction.prototype.onHttpResponse = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		let contentType = response.getContentType();
		if (contentType === oFF.QModelFormat.SFX || contentType === oFF.QModelFormat.UQM)
		{
			this.setContentExt(response, contentType);
		}
		else
		{
			this.setContent(response);
		}
		let content = this.getContent();
		if (content.getContentType() === oFF.QModelFormat.INA_REPOSITORY)
		{
			this.setNextActionType(oFF.InAFusionLayer.REPO_ACTION);
			this.setNextDocument(content);
		}
	}
	this.endSync();
};
oFF.InAFusionUrlAction.prototype.processSynchronization = function(syncType)
{
	let objectName = this.getDataSource().getObjectName();
	let session = this.getSession();
	let uri = oFF.XUri.createFromFilePath(session, objectName, oFF.PathFormat.AUTO_DETECT, oFF.VarResolveMode.PERCENT, null);
	let client = oFF.HttpClientFactory.newInstanceByConnection(session, uri);
	client.getRequest().setFromUri(uri);
	client.processHttpRequest(this.getActiveSyncType(), this, oFF.XIntegerValue.create(0));
	return true;
};

oFF.InAPlanningValueHelpProvider = function() {};
oFF.InAPlanningValueHelpProvider.prototype = new oFF.InAValueHelpProvider();
oFF.InAPlanningValueHelpProvider.prototype._ff_c = "InAPlanningValueHelpProvider";

oFF.InAPlanningValueHelpProvider.create = function(planningCommand)
{
	let instance = new oFF.InAPlanningValueHelpProvider();
	instance.setupExt(planningCommand);
	return instance;
};
oFF.InAPlanningValueHelpProvider.prototype.m_queryManager = null;
oFF.InAPlanningValueHelpProvider.prototype._valHelpError = function(errorMessage, listener, customIdentifier)
{
	let extResult = oFF.ExtResult.createWithErrorMessage(errorMessage);
	if (oFF.notNull(listener))
	{
		listener.onValuehelpExecuted(extResult, null, customIdentifier);
	}
	return extResult;
};
oFF.InAPlanningValueHelpProvider.prototype._valHelpResultSetError = function(errorMessage, listener, customIdentifier)
{
	let extResult = oFF.ExtResult.createWithErrorMessage(errorMessage);
	if (oFF.notNull(listener))
	{
		listener.onValuehelpExecuted(extResult, null, customIdentifier);
	}
	return extResult;
};
oFF.InAPlanningValueHelpProvider.prototype.applyContext = function(dimension)
{
	if (dimension.getQueryModel() !== null)
	{
		let planningDimension = this.getPlanningCommand().getDimensionAccessor().getDimensionByName(dimension.getName());
		let selectorHierarchyNode = dimension.getSelectorHierarchyNode();
		if (oFF.notNull(selectorHierarchyNode))
		{
			planningDimension.setSelectorHierarchyNode(selectorHierarchyNode);
		}
		let originQFilterExpression = dimension.getQueryModel().getFilter().getValuehelpFilter();
		let targetQFilterExpression = this.getPlanningCommand().getSelector().getValuehelpFilter();
		targetQFilterExpression.copyFrom(originQFilterExpression, null);
	}
};
oFF.InAPlanningValueHelpProvider.prototype.getCachedFunctionalVariables = function(dimension)
{
	return oFF.XList.create();
};
oFF.InAPlanningValueHelpProvider.prototype.getPlanningCommand = function()
{
	return this.getContext();
};
oFF.InAPlanningValueHelpProvider.prototype.getQueryManager = function()
{
	if (oFF.isNull(this.m_queryManager))
	{
		let planningCommand = this.getPlanningCommand();
		let queryServiceConfig = oFF.QueryServiceConfig.create(this.getApplication());
		queryServiceConfig.setSystemName(planningCommand.getSystemName());
		let planning = oFF.PrFactory.createStructure();
		let command = planning.putNewStructure("Command");
		let dataSource = command.putNewStructure("DataSource");
		let dataAreaName = planningCommand.getDataArea().getDataArea();
		if (oFF.isNull(dataAreaName))
		{
			dataAreaName = "DEFAULT";
		}
		dataSource.putString("DataArea", dataAreaName);
		let metadata = planningCommand.getPlanningOperationMetadata();
		let identifier = metadata.getPlanningOperationIdentifier();
		dataSource.putString("ObjectName", identifier.getPlanningOperationName());
		dataSource.putString("Type", identifier.getPlanningOperationType().getCamelCaseName());
		dataSource.putString("InstanceId", metadata.getInstanceId());
		command.put("Dimensions", metadata.getDimensions());
		command.put("Variables", metadata.getVariables());
		queryServiceConfig.setDefinitionByStructure(oFF.QModelFormat.INA_METADATA, planning);
		queryServiceConfig.setMode(oFF.QueryManagerMode.RAW_QUERY);
		let result = queryServiceConfig.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
		oFF.MessageUtil.checkNoError(result);
		let queryModel = result.getData().getQueryModel();
		let deserializer2 = oFF.QInAImportFactory.create(this.getApplication(), oFF.QModelFormat.INA_METADATA, result.getData().getModelCapabilities());
		deserializer2.importQueryModel(command, queryModel);
		result.getData().setValueHelpProvider(this);
		this.m_queryManager = result.getData();
	}
	return this.m_queryManager;
};
oFF.InAPlanningValueHelpProvider.prototype.processFunctionalVariableHelp = function(dimension, syncType, listener, customIdentifier)
{
	let extResult = oFF.ExtResult.createWithErrorMessage("Valuehelp is not supported in this context");
	if (oFF.notNull(listener))
	{
		listener.onFunctionalVariablesValueHelpExecuted(extResult, customIdentifier);
	}
	return extResult;
};
oFF.InAPlanningValueHelpProvider.prototype.processValueHelp = function(dimension, syncType, listener, customIdentifier)
{
	return this._valHelpError("Valuehelp is not supported in this context", listener, customIdentifier);
};
oFF.InAPlanningValueHelpProvider.prototype.processValueHelpResultSet = function(dimension, syncType, listener, customIdentifier)
{
	return this._valHelpResultSetError("Valuehelp is not supported in this context", listener, customIdentifier);
};
oFF.InAPlanningValueHelpProvider.prototype.processVarHelp = function(dimension, variable, syncType, listener, customIdentifier)
{
	this.lazyLoadValueHelpObjects();
	this.applyContext(dimension);
	let request = this.getExport().exportPlanningVariableHelpRequest(this.getPlanningCommand(), dimension, variable);
	this.checkVariableType(variable);
	let key = this.getNextValueHelpIdentifier();
	this.putValueHelpCallback(key, listener);
	this.putValueHelpIdentifier(key, customIdentifier);
	this.putValueHelpResult(key, null);
	this.putValueHelpResultNode(key, null);
	let rowsAxis = null;
	let columnsAxis = null;
	let isExecuteAutoVariableSubmit = false;
	let rsDefQueryModel = oFF.RsDefQueryModel.create(null, null, rowsAxis, columnsAxis, dimension, isExecuteAutoVariableSubmit);
	let resultSetManager = oFF.ResultSetContainer.createWithRequest(this.getQueryManager(), this, request, rsDefQueryModel);
	resultSetManager.setOffsetRows(dimension.getSelectorPagingStart());
	resultSetManager.setMaxRows(dimension.getSelectorPagingEnd() - dimension.getSelectorPagingStart());
	if (oFF.ValueHelpProcessingSequence.customHierarchySubmitRequiredForValueHelp(dimension))
	{
		let sequence = oFF.ValueHelpProcessingSequence.createSequence(this.getQueryManager(), dimension, resultSetManager, this.getExport(), true, false);
		sequence.processSyncAction(syncType, this, this.getValueHelpIdentifier());
	}
	else
	{
		resultSetManager.processExecution(syncType, this, this.getValueHelpIdentifier());
	}
	return !this.isReleased() ? this.getValueHelpResultSetNode(key) : null;
};
oFF.InAPlanningValueHelpProvider.prototype.serializeForPersistedInA = function(dimension)
{
	return null;
};

oFF.InAQueryValueHelpProvider = function() {};
oFF.InAQueryValueHelpProvider.prototype = new oFF.InAValueHelpProvider();
oFF.InAQueryValueHelpProvider.prototype._ff_c = "InAQueryValueHelpProvider";

oFF.InAQueryValueHelpProvider.create = function(queryManagerProviderBase)
{
	let instance = new oFF.InAQueryValueHelpProvider();
	instance.setupExt(queryManagerProviderBase);
	return instance;
};
oFF.InAQueryValueHelpProvider.prototype.getCachedFunctionalVariables = function(dimension)
{
	let cachedFunctionalVariables = null;
	if (!dimension.getMetadata().hasFunctionalVariables())
	{
		cachedFunctionalVariables = oFF.XList.create();
	}
	else
	{
		let functionalVariables = oFF.QVariableUtils.getFunctionalVariables(dimension.getVariableContainer().getVariables(), dimension);
		if (oFF.XCollectionUtils.hasElements(functionalVariables))
		{
			cachedFunctionalVariables = functionalVariables;
		}
	}
	return cachedFunctionalVariables;
};
oFF.InAQueryValueHelpProvider.prototype.getValueHelpRequest = function(dimension)
{
	let isVariableValueHelp = false;
	return !dimension.getSelector().requiresMeasureValueHelp() ? this.getExport().exportMemberHelpRequest(this.getQueryModel(), dimension, isVariableValueHelp) : null;
};
oFF.InAQueryValueHelpProvider.prototype.internalProcessValueHelp = function(dimension, syncType, listener, customIdentifier, request, transformResult, isVariableValueHelp, variableRequireImplicitSubmit)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(request))
	{
		this.setMiscRequest(request, queryManager);
	}
	let key = this.getNextValueHelpIdentifier();
	this.putValueHelpCallback(key, listener);
	this.putValueHelpIdentifier(key, customIdentifier);
	this.putValueHelpResult(key, null);
	if (transformResult)
	{
		this.putValueHelpResultNode(key, null);
	}
	let rowsAxis = null;
	let columnsAxis = null;
	let initSettings = queryManager.getInitSettings();
	let isEnableAutoVariableSubmit = initSettings.isEnableAutoVariableSubmit();
	let isExecuteAutoVariableSubmit = queryManager.isExecuteAutoVariableSubmit() && !isVariableValueHelp;
	let isMeasureValueHelp = dimension.getSelector().requiresMeasureValueHelp() && oFF.isNull(request);
	if (isMeasureValueHelp)
	{
		initSettings.setIsEnableAutoVariableSubmit(false);
	}
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		rowsAxis = queryModel.getRowsAxis();
		columnsAxis = queryModel.getColumnsAxis();
	}
	let rsDefQueryModel = oFF.RsDefQueryModel.create(queryManager, null, rowsAxis, columnsAxis, dimension, isExecuteAutoVariableSubmit);
	let resultSetManager = oFF.ResultSetContainer.createWithRequest(queryManager, this, request, rsDefQueryModel);
	resultSetManager.setOffsetRows(dimension.getSelectorPagingStart());
	resultSetManager.setMaxRows(dimension.getSelectorPagingEnd() - dimension.getSelectorPagingStart());
	let requiresHierarchySubmit = oFF.ValueHelpProcessingSequence.customHierarchySubmitRequiredForValueHelp(dimension);
	if (variableRequireImplicitSubmit || requiresHierarchySubmit)
	{
		let sequence = oFF.ValueHelpProcessingSequence.createSequence(queryManager, dimension, resultSetManager, this.getExport(), requiresHierarchySubmit, variableRequireImplicitSubmit);
		sequence.processSyncAction(syncType, this, this.getValueHelpIdentifier());
	}
	else
	{
		resultSetManager.processExecution(syncType, this, this.getValueHelpIdentifier());
	}
	if (isMeasureValueHelp)
	{
		initSettings.setIsEnableAutoVariableSubmit(isEnableAutoVariableSubmit);
	}
	return key;
};
oFF.InAQueryValueHelpProvider.prototype.processFunctionalVariableHelp = function(dimension, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrFunctionalVariablesAction.createAndRun(syncType, this.getQueryManager(), dimension, listener, customIdentifier);
};
oFF.InAQueryValueHelpProvider.prototype.processValueHelp = function(dimension, syncType, listener, customIdentifier)
{
	let formulaCalcDim = null;
	if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
	{
		formulaCalcDim = dimension;
	}
	if (oFF.notNull(formulaCalcDim))
	{
		formulaCalcDim.generateTransientObjects(this, this.getQueryManager());
	}
	this.lazyLoadValueHelpObjects();
	let requiresImplicitSubmit = this.getQueryManagerBase().variablesRequireImplicitSubmitForValueHelp(dimension);
	this.setVariablesSubmittedImplicitly(requiresImplicitSubmit);
	let key = this.internalProcessValueHelp(dimension, syncType, listener, customIdentifier, this.getValueHelpRequest(dimension), true, false, requiresImplicitSubmit);
	if (oFF.notNull(formulaCalcDim))
	{
		formulaCalcDim.destroyTransientObjects(this);
	}
	return !this.isReleased() ? this.getValueHelpResultSetNode(key) : null;
};
oFF.InAQueryValueHelpProvider.prototype.processValueHelpResultSet = function(dimension, syncType, listener, customIdentifier)
{
	this.lazyLoadValueHelpObjects();
	let requiresImplicitSubmit = this.getQueryManagerBase().variablesRequireImplicitSubmitForValueHelp(dimension);
	let key = this.internalProcessValueHelp(dimension, syncType, listener, customIdentifier, this.getValueHelpRequest(dimension), false, false, requiresImplicitSubmit);
	return !this.isReleased() ? this.getValueHelpResult(key) : null;
};
oFF.InAQueryValueHelpProvider.prototype.processVarHelp = function(dimension, variable, syncType, listener, customIdentifier)
{
	this.lazyLoadValueHelpObjects();
	let request = this.getExport().exportVariableHelpRequest(this.getQueryModel(), dimension, variable);
	this.checkVariableType(variable);
	let key = this.internalProcessValueHelp(dimension, syncType, listener, customIdentifier, request, true, true, false);
	return !this.isReleased() ? this.getValueHelpResultSetNode(key) : null;
};
oFF.InAQueryValueHelpProvider.prototype.serializeForPersistedInA = function(dimension)
{
	let queryManager = this.getQueryManager();
	this.lazyLoadValueHelpObjects();
	let valueHelpRequest = this.getValueHelpRequest(dimension);
	if (oFF.notNull(valueHelpRequest))
	{
		this.setMiscRequest(valueHelpRequest, queryManager);
	}
	return valueHelpRequest;
};
oFF.InAQueryValueHelpProvider.prototype.setMiscRequest = function(request, provider)
{
	oFF.QInAOptions.setRequestTimeZone(request, provider);
	let inaAnalytics = request.getStructureByKey("Analytics");
	if (oFF.isNull(inaAnalytics))
	{
		inaAnalytics = request.getStructureByKey("Planning");
	}
	oFF.QInAOptions.setLanguage(inaAnalytics, provider);
	oFF.QInAOptions.fillOptions(request, provider.getCapabilitiesBase(), provider.getSession(), provider.getQueryServiceConfig());
	provider.getInaCapabilities().exportActiveCapabilities(inaAnalytics);
	let inaDefinition = inaAnalytics.getStructureByKey("Definition");
	oFF.QInAOptions.exportOptimizerHints(inaDefinition, provider);
	oFF.QInAOptions.exportReturnedDataSelections(inaDefinition.getStructureByKey("ResultSetFeatureRequest"), provider);
};

oFF.InAFusionMetadataAction = function() {};
oFF.InAFusionMetadataAction.prototype = new oFF.InAFusionLayerRpc();
oFF.InAFusionMetadataAction.prototype._ff_c = "InAFusionMetadataAction";

oFF.InAFusionMetadataAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource, content)
{
	let object = new oFF.InAFusionMetadataAction();
	object.setConfig(queryServiceConfig);
	if (oFF.notNull(dataSource))
	{
		let dataSourceClone = dataSource.clone();
		dataSourceClone.setInstanceId(queryServiceConfig.getInstanceId());
		object.setDataSource(dataSourceClone);
	}
	if (oFF.notNull(content))
	{
		object.setContent(content);
	}
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionMetadataAction.prototype.m_cacheKey = null;
oFF.InAFusionMetadataAction.prototype.m_exporter = null;
oFF.InAFusionMetadataAction.prototype.m_importer = null;
oFF.InAFusionMetadataAction.prototype.m_inaCapabilities = null;
oFF.InAFusionMetadataAction.prototype.m_isCacheCall = false;
oFF.InAFusionMetadataAction.prototype.m_masterCacheAction = null;
oFF.InAFusionMetadataAction.prototype.m_queryManagerCapabilities = null;
oFF.InAFusionMetadataAction.prototype.constructPayload = function()
{
	let payload = oFF.PrFactory.createStructure();
	let config = this.getConfig();
	let innerRequestStructure = payload.putNewStructure("Metadata");
	let providerType = config.getProviderType();
	if (providerType === oFF.ProviderType.ANALYTICS || providerType === oFF.ProviderType.CATALOG)
	{
		innerRequestStructure.putString("Context", "Analytics");
	}
	else if (providerType === oFF.ProviderType.PLANNING || providerType === oFF.ProviderType.PLANNING_VALUE_HELP)
	{
		innerRequestStructure.putString("Context", "Planning");
	}
	else if (providerType === oFF.ProviderType.LIST_REPORTING)
	{
		innerRequestStructure.putString("Context", "ListReporting");
	}
	let language = config.getSystemDescription().getLanguage();
	if (oFF.XStringUtils.isNullOrEmpty(language))
	{
		let userProfile = config.getProcess().getUserProfile();
		if (oFF.notNull(userProfile))
		{
			language = userProfile.getDataAccessLanguage();
		}
	}
	innerRequestStructure.putStringNotNullAndNotEmpty("Language", oFF.XString.toUpperCase(language));
	let dataSource = this.getDataSource();
	let inaDatasource = this.m_exporter.exportDataSource(dataSource, false);
	oFF.QInAExportUtil.setNonEmptyString(inaDatasource, "ValidationHash", dataSource.getValidationHash());
	if (config.usesMetadataCache())
	{
		inaDatasource.putBoolean("Cache", true);
	}
	innerRequestStructure.put("DataSource", inaDatasource);
	this.m_inaCapabilities.exportActiveCapabilities(innerRequestStructure);
	oFF.QInAOptions.fillOptions(payload, this.m_queryManagerCapabilities, this.getSession(), this.getConfig());
	let dataArea = dataSource.getDataArea();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(dataArea))
	{
		let inaDataAreas = this.getDataAreas(dataArea);
		payload.putIfNotNull("DataAreas", inaDataAreas);
	}
	let inaExpand = oFF.PrFactory.createList();
	inaExpand.addString("Cube");
	if (config.isRequestingMinimizedAttributes())
	{
		inaExpand.addString("MinimizedAttributes");
	}
	innerRequestStructure.putIfNotNull("Expand", inaExpand);
	return payload;
};
oFF.InAFusionMetadataAction.prototype.createSpecificFunction = function()
{
	let systemDescription = this.getSystemDescription();
	oFF.XObjectExt.assertNotNullExt(systemDescription, "System description is null");
	let fastPathCap = this.getInAMainCapabilities().getByKey(oFF.InACapabilities.C032_FAST_PATH);
	let path;
	if (oFF.notNull(fastPathCap) && fastPathCap.getValue() !== null)
	{
		path = fastPathCap.getValue();
	}
	else
	{
		path = systemDescription.getSystemType().getInAPath();
	}
	let rpcFunction = this.createFunction(path);
	rpcFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
	return rpcFunction;
};
oFF.InAFusionMetadataAction.prototype.generateNextDataSource = function(metadata)
{
	let dataSource = this.getDataSource();
	if (oFF.isNull(dataSource) && oFF.notNull(metadata))
	{
		let inaMetadata = metadata.getJsonContent();
		let inaCube = inaMetadata.getStructureByKey("Cube");
		if (oFF.isNull(inaCube))
		{
			inaCube = inaMetadata;
		}
		let importDataSource = this.m_importer.importDataSource(inaCube);
		this.addAllMessages(this.m_importer);
		if (oFF.notNull(importDataSource))
		{
			importDataSource.setInstanceId(this.getConfig().getInstanceId());
			importDataSource.setSystemName(this.getSystemName());
			dataSource = importDataSource;
		}
	}
	this.setNextDataSource(dataSource);
};
oFF.InAFusionMetadataAction.prototype.getCacheKey = function()
{
	if (oFF.isNull(this.m_cacheKey))
	{
		let config = this.getConfig();
		let dataSource = this.getDataSource();
		if (oFF.notNull(dataSource))
		{
			let dataSourceCacheKey = dataSource.getCacheKeyName();
			let providerType = config.getProviderType();
			let systemDescription = this.getSystemDescription();
			let systemName = systemDescription.getSystemName();
			let key1 = null;
			let key2 = null;
			this.m_cacheKey = oFF.QFactory.createCacheKey(null, systemName, dataSourceCacheKey, providerType, key1, key2, null, null);
		}
	}
	return this.m_cacheKey;
};
oFF.InAFusionMetadataAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.METADATA_ACTION;
};
oFF.InAFusionMetadataAction.prototype.getDataAreas = function(dataArea)
{
	let list = null;
	let systemType = this.getSystemType();
	if (systemType.isTypeOf(oFF.SystemType.BW) === true)
	{
		let dataAreaState = oFF.PlanningStateHandler.getDataAreaStateByName(this.getApplication(), this.getSystemName(), dataArea);
		if (oFF.notNull(dataAreaState))
		{
			if (dataAreaState.isSubmitted() === false)
			{
				list = oFF.PrFactory.createList();
				list.add(dataAreaState.serializeToJson());
			}
		}
	}
	return list;
};
oFF.InAFusionMetadataAction.prototype.getExporter = function()
{
	return this.m_exporter;
};
oFF.InAFusionMetadataAction.prototype.getImporter = function()
{
	return this.m_importer;
};
oFF.InAFusionMetadataAction.prototype.getInACapabilities = function()
{
	return this.m_inaCapabilities;
};
oFF.InAFusionMetadataAction.prototype.getInAMainCapabilities = function()
{
	return this.m_inaCapabilities.getActiveCapabilities();
};
oFF.InAFusionMetadataAction.prototype.getMasterCacheAction = function()
{
	let metadataAction = null;
	if (this.getConfig().isCachingActive())
	{
		let cacheKey = this.getCacheKey();
		if (oFF.notNull(cacheKey))
		{
			let olapEnv = this.getOlapEnv();
			if (oFF.notNull(olapEnv))
			{
				let cubeContainer = olapEnv.getCubeContainer(cacheKey);
				if (cubeContainer.getDataSource() === null)
				{
					cubeContainer.setDataSource(this.getDataSource());
				}
				metadataAction = cubeContainer.getMetadataAction(cacheKey);
			}
		}
	}
	return metadataAction;
};
oFF.InAFusionMetadataAction.prototype.onCacheFilled = function(extResult, entry, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setContent(entry);
	this.setNextDataSource(this.getDataSource());
	this.endSync();
};
oFF.InAFusionMetadataAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	let content = null;
	if (this.isValid())
	{
		let metadataResponse = response.getRootElement();
		content = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, metadataResponse);
		this.setContent(content);
		this.storeMetadataInCache(metadataResponse);
	}
	if (oFF.notNull(this.m_masterCacheAction))
	{
		if (this.m_masterCacheAction.getPrimarySequenceHandle() === this && this.m_isCacheCall === true)
		{
			this.m_masterCacheAction.endProcessing(extResult, content);
		}
	}
	this.generateNextDataSource(content);
	this.endSync();
};
oFF.InAFusionMetadataAction.prototype.prepare = function()
{
	this.prepareQueryManagerCapabilities();
	let dataSource = this.getDataSource();
	if (oFF.notNull(dataSource) && dataSource.getType() === oFF.MetaObjectType.CATALOG_VIEW_2 && this.m_queryManagerCapabilities.supportsCatalogServiceV2() === false)
	{
		dataSource.setType(oFF.MetaObjectType.CATALOG_VIEW);
	}
};
oFF.InAFusionMetadataAction.prototype.prepareInACapabilities = function()
{
	let connection = this.getConnection();
	if (oFF.isNull(connection))
	{
		this.addError(0, "No connection given");
		this.endSync();
	}
	else
	{
		let serverMetadata = connection.getSystemConnect().getServerMetadata();
		let providerType = this.getConfig().getProviderType();
		let session = this.getSession();
		this.m_inaCapabilities = oFF.InACapabilitiesProvider.create(session, serverMetadata, providerType, null);
		let serverBetaCapabilities = this.m_inaCapabilities.getServerBetaCapabilities();
		let serverMainCapabilities = this.m_inaCapabilities.getServerMainCapabilities();
		let experimentalFeatures = session.getFeatureToggles();
		if (oFF.notNull(experimentalFeatures))
		{
			let activeMainCapabilities = this.m_inaCapabilities.getActiveCapabilities();
			let devCapaNames = experimentalFeatures.getKeysAsIterator();
			while (devCapaNames.hasNext())
			{
				let experimentalFeature = devCapaNames.next();
				if (serverBetaCapabilities.containsKey(experimentalFeature) && oFF.InACapabilitiesProvider.isDevCapabilityValid(experimentalFeature, session))
				{
					activeMainCapabilities.addCapability(experimentalFeature);
				}
				if (serverMainCapabilities.containsKey(experimentalFeature))
				{
					activeMainCapabilities.addCapability(experimentalFeature);
				}
			}
		}
	}
	return this.m_inaCapabilities;
};
oFF.InAFusionMetadataAction.prototype.prepareQueryManagerCapabilities = function()
{
	if (oFF.isNull(this.m_queryManagerCapabilities))
	{
		this.m_queryManagerCapabilities = this.getInACapabilities().getQueryCapabilities();
	}
	return this.m_queryManagerCapabilities;
};
oFF.InAFusionMetadataAction.prototype.processMainContentFetch = function()
{
	this.prepareInACapabilities();
	if (this.isValid())
	{
		let capabilities = this.prepareQueryManagerCapabilities();
		let exporter = oFF.QInAExportFactory.createForData(this.getApplication(), capabilities);
		let importer = oFF.QInAImportFactory.createForData(this.getApplication(), capabilities);
		this.setExporter(exporter);
		this.setImporter(importer);
		let content = this.getContent();
		if (oFF.notNull(content))
		{
			this.generateNextDataSource(content);
			this.endSync();
		}
		else
		{
			this.m_masterCacheAction = this.getMasterCacheAction();
			if (oFF.notNull(this.m_masterCacheAction) && this.m_masterCacheAction.getSyncState() !== oFF.SyncState.IN_SYNC_WITH_ERROR)
			{
				let syncState = this.m_masterCacheAction.getSyncState();
				let dataSource = this.getDataSource();
				if (oFF.XString.isEqual(dataSource.getRriName(), "8BBS_ID") && oFF.XStringUtils.isNotNullAndNotEmpty(dataSource.getRriValue()))
				{
					syncState = oFF.SyncState.OUT_OF_SYNC;
				}
				if (syncState === oFF.SyncState.PROCESSING)
				{
					this.m_masterCacheAction.attachCubeMetadataListener(this, null);
				}
				else if (syncState === oFF.SyncState.OUT_OF_SYNC)
				{
					this.m_isCacheCall = true;
					this.m_masterCacheAction.startProcessing(this);
				}
				else
				{
					this.onCacheFilled(this.m_masterCacheAction, this.m_masterCacheAction.getData(), null);
				}
			}
			else
			{
				this.m_isCacheCall = true;
			}
			if (this.m_isCacheCall)
			{
				oFF.InAFusionLayerRpc.prototype.processMainContentFetch.call( this );
			}
		}
	}
};
oFF.InAFusionMetadataAction.prototype.setExporter = function(exporter)
{
	this.m_exporter = exporter;
};
oFF.InAFusionMetadataAction.prototype.setImporter = function(importer)
{
	this.m_importer = importer;
};
oFF.InAFusionMetadataAction.prototype.storeMetadataInCache = function(rootElement)
{
	if (oFF.notNull(rootElement))
	{
		if (this.m_isCacheCall === true)
		{
			if (oFF.notNull(this.m_cacheKey))
			{
				let olapEnv = this.getOlapEnv();
				let cubeContainer = olapEnv.getCubeContainer(this.m_cacheKey);
				let cube = rootElement.getStructureByKey("Cube");
				if (olapEnv.isCachingEnabled())
				{
					cubeContainer.setQueryMetadata(this.m_cacheKey, cube);
				}
			}
		}
	}
};

oFF.InAFusionModelAction = function() {};
oFF.InAFusionModelAction.prototype = new oFF.InAFusionLayerRpc();
oFF.InAFusionModelAction.prototype._ff_c = "InAFusionModelAction";

oFF.InAFusionModelAction.createAndRun = function(syncType, listener, customIdentifier, context, queryServiceConfig, dataSource)
{
	let object = new oFF.InAFusionModelAction();
	object.setConfig(queryServiceConfig);
	object.setDataSource(dataSource);
	object.setupActionAndRun(syncType, listener, customIdentifier, context);
	return object;
};
oFF.InAFusionModelAction.prototype.constructPayload = function()
{
	let payload = oFF.PrFactory.createStructure();
	let dataSource = this.getDataSource();
	let objectName = dataSource.getObjectName();
	payload.putString(oFF.ContentlibConstants.ACTION, oFF.ContentlibConstants.V_ACTION_GET_RES);
	let clData = payload.putNewStructure(oFF.ContentlibConstants.DATA);
	clData.putNewList(oFF.ContentlibConstants.RESOURCE_IDS).addString(objectName);
	clData.putString(oFF.ContentlibConstants.RESOURCE_TYPE, oFF.ContentlibConstants.V_RESOURCE_TYPE_CUBE);
	let clMetadata = clData.putNewStructure(oFF.ContentlibConstants.METADATA);
	clMetadata.putBoolean(oFF.ContentlibConstants.NAME, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.DESCRIPTION, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.ACCESS, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.USER_AUTH_ONLY, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.RESOURCE_TYPE, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.PACKAGE_ID, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.CREATED_BY, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.MODIFIED_BY, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.UPDATE_COUNTER, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.CREATED_TIME, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.MODIFIED_TIME, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.EXCEPTION_NOT_THROWN_FOR_NO_ACCESS, true);
	clMetadata.putBoolean(oFF.ContentlibConstants.TRANSLATION_ENABLED, true);
	let clAnchestorPath = clMetadata.putNewStructure(oFF.ContentlibConstants.ANCHESTOR_PATH);
	clAnchestorPath.putBoolean(oFF.ContentlibConstants.NAME, true);
	clAnchestorPath.putBoolean(oFF.ContentlibConstants.ACCESS, true);
	let clEpmObjectData = clMetadata.putNewStructure(oFF.ContentlibConstants.EPM_OBJECT_DATA);
	clEpmObjectData.putBoolean(oFF.ContentlibConstants.INCLUDE_DEPENDENCIES, true);
	clEpmObjectData.putBoolean(oFF.ContentlibConstants.INCLUDE_SUB_ITEMS, true);
	let clOptions = clEpmObjectData.putNewStructure(oFF.ContentlibConstants.OPTIONS);
	clOptions.putBoolean(oFF.ContentlibConstants.DETAIL, true);
	clOptions.putBoolean(oFF.ContentlibConstants.VISUALIZATION, true);
	clOptions.putBoolean(oFF.ContentlibConstants.RATE, true);
	clOptions.putBoolean(oFF.ContentlibConstants.LIST_FORMULA, true);
	clOptions.putBoolean(oFF.ContentlibConstants.LIST_VERSION, true);
	clOptions.putBoolean(oFF.ContentlibConstants.ADD_METADATA, true);
	clOptions.putBoolean(oFF.ContentlibConstants.INCL_SUB_OBJECT_TYPES, true);
	clOptions.putBoolean(oFF.ContentlibConstants.PLANNING_FEATURES, true);
	clOptions.putBoolean(oFF.ContentlibConstants.TRANSLATED_CUSTOMIZED_DESCRIPTION, true);
	clOptions.putBoolean(oFF.ContentlibConstants.NEED_DIMENSION_VALIDATION_RULES, true);
	return payload;
};
oFF.InAFusionModelAction.prototype.createSpecificFunction = function()
{
	return this.createFunction("/sap/fpa/services/rest/epm/contentlib");
};
oFF.InAFusionModelAction.prototype.getComponentType = function()
{
	return oFF.InAFusionLayer.MODEL_ACTION;
};
oFF.InAFusionModelAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		let contentLibData = response.getRootElementGeneric().asList();
		let model = contentLibData.getStructureAt(0);
		let content = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.SFX, model);
		this.setContentExt(content, oFF.QModelFormat.SFX);
		this.setNextDocument(this.getContent());
		this.setNextActionType(oFF.InAFusionLayer.REPO_ACTION);
	}
	this.endSync();
};

oFF.InAQMgrApplyStateAction = function() {};
oFF.InAQMgrApplyStateAction.prototype = new oFF.QOlapSyncAction();
oFF.InAQMgrApplyStateAction.prototype._ff_c = "InAQMgrApplyStateAction";

oFF.InAQMgrApplyStateAction.createAndRun = function(syncType, context, listener, customIdentifier, stateId, stateManager)
{
	let action = new oFF.InAQMgrApplyStateAction();
	action.stateId = stateId;
	action.m_stateManager = stateManager;
	action.setupActionAndRun(syncType, listener, customIdentifier, context);
	return action;
};
oFF.InAQMgrApplyStateAction.prototype.m_stateManager = null;
oFF.InAQMgrApplyStateAction.prototype.stateId = null;
oFF.InAQMgrApplyStateAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.modelStateApplied(extResult, data, customIdentifier);
};
oFF.InAQMgrApplyStateAction.prototype.processSynchronization = function(syncType)
{
	let result = this.m_stateManager.applyState(this.stateId);
	if (result.hasErrors())
	{
		this.addAllMessages(result);
	}
	this.setData(result.getData());
	return false;
};

oFF.InAQMgrStartupCacheSync = function() {};
oFF.InAQMgrStartupCacheSync.prototype = new oFF.QOlapSyncAction();
oFF.InAQMgrStartupCacheSync.prototype._ff_c = "InAQMgrStartupCacheSync";

oFF.InAQMgrStartupCacheSync.createAndRun = function(syncType, listener, customIdentifier, context, config)
{
	let newObj = new oFF.InAQMgrStartupCacheSync();
	newObj.m_config = config;
	newObj.setupActionAndRun(syncType, listener, customIdentifier, context);
	return newObj;
};
oFF.InAQMgrStartupCacheSync.prototype.m_cacheKey = null;
oFF.InAQMgrStartupCacheSync.prototype.m_config = null;
oFF.InAQMgrStartupCacheSync.prototype.m_cubeStructure = null;
oFF.InAQMgrStartupCacheSync.prototype.m_isCacheCall = false;
oFF.InAQMgrStartupCacheSync.prototype.getCacheKey = function()
{
	if (oFF.isNull(this.m_cacheKey))
	{
		this.m_cacheKey = oFF.QFactory.createCacheKeyByContext(this.getActionContext());
	}
	return this.m_cacheKey;
};
oFF.InAQMgrStartupCacheSync.prototype.getMasterCacheAction = function()
{
	let metadataAction = null;
	let isCachingActive = this.m_config.isCachingActive();
	if (isCachingActive === true)
	{
		let cacheKey = this.getCacheKey();
		if (oFF.notNull(cacheKey))
		{
			let olapEnv = this.m_config.getApplication().getOlapEnvironment();
			if (oFF.notNull(olapEnv))
			{
				let cubeContainer = olapEnv.getCubeContainer(cacheKey);
				metadataAction = cubeContainer.getMetadataAction(cacheKey);
			}
		}
	}
	return metadataAction;
};
oFF.InAQMgrStartupCacheSync.prototype.getMetadataInCache = function()
{
	let root = null;
	if (oFF.notNull(this.m_cacheKey))
	{
		let olapEnv = this.getOlapEnv();
		if (olapEnv.isCachingEnabled())
		{
			let cubeContainer = olapEnv.getCubeContainer(this.m_cacheKey);
			let cubeStructure = cubeContainer.getQueryMetadata(this.m_cacheKey);
			if (oFF.notNull(cubeStructure))
			{
				root = oFF.PrFactory.createStructure();
				root.put("Cube", cubeStructure);
			}
		}
	}
	return root;
};
oFF.InAQMgrStartupCacheSync.prototype.isMasterCacheCall = function()
{
	return this.m_isCacheCall;
};
oFF.InAQMgrStartupCacheSync.prototype.onActionSequenceFinalized = function(messages, data)
{
	let metadataAction = this.getMasterCacheAction();
	if (oFF.notNull(metadataAction))
	{
		if (metadataAction.getPrimarySequenceHandle() === this && this.m_isCacheCall === true)
		{
			let content = oFF.XContent.createJsonObjectContent(oFF.ContentType.APPLICATION_JSON, this.m_cubeStructure);
			metadataAction.endProcessing(messages, content);
		}
	}
};
oFF.InAQMgrStartupCacheSync.prototype.onCacheFilled = function(extResult, entry, customIdentifier)
{
	this.endSync();
};
oFF.InAQMgrStartupCacheSync.prototype.processSynchronization = function(syncType)
{
	let metadataAction = this.getMasterCacheAction();
	if (oFF.notNull(metadataAction))
	{
		if (metadataAction.getSyncState() === oFF.SyncState.PROCESSING)
		{
			metadataAction.attachCubeMetadataListener(this, null);
			return true;
		}
		else if (metadataAction.getSyncState() === oFF.SyncState.OUT_OF_SYNC)
		{
			this.m_isCacheCall = true;
			metadataAction.startProcessing(this);
		}
	}
	return false;
};
oFF.InAQMgrStartupCacheSync.prototype.storeMetadataInCache = function(rootElement)
{
	if (oFF.notNull(rootElement))
	{
		if (this.m_isCacheCall === true)
		{
			if (oFF.notNull(this.m_cacheKey))
			{
				let olapEnv = this.getOlapEnv();
				let cubeContainer = olapEnv.getCubeContainer(this.m_cacheKey);
				this.m_cubeStructure = rootElement.getStructureByKey("Cube");
				if (olapEnv.isCachingEnabled())
				{
					cubeContainer.setQueryMetadata(this.m_cacheKey, this.m_cubeStructure);
				}
			}
		}
	}
};

oFF.InAQMgrSyncAction = function() {};
oFF.InAQMgrSyncAction.prototype = new oFF.QOlapSyncAction();
oFF.InAQMgrSyncAction.prototype._ff_c = "InAQMgrSyncAction";

oFF.InAQMgrSyncAction.prototype.m_rpcFunction = null;
oFF.InAQMgrSyncAction.prototype.cancelSynchronization = function()
{
	oFF.QOlapSyncAction.prototype.cancelSynchronization.call( this );
	this.m_rpcFunction.cancelSynchronization();
};
oFF.InAQMgrSyncAction.prototype.createFunction = function()
{
	return this.getActionContext().createFunction();
};
oFF.InAQMgrSyncAction.prototype.fillRequestStructure = function()
{
	let parent = this.getActionContext();
	let instanceId = parent.getInstanceId();
	if (oFF.isNull(instanceId))
	{
		return null;
	}
	let requestStructure = oFF.PrFactory.createStructure();
	let application = this.getApplication();
	let session = this.getSession();
	let systemContainer = parent.getOlapSystemContainer();
	let analyticCapabilities = systemContainer.getServiceCapabilities(oFF.ServerService.ANALYTIC);
	let queryModel = this.getQueryModel();
	let clientInfoContext;
	let supportLanguageLocale = application.getSystemLandscape().getSystemDescription(systemContainer.getSystemName()).getSystemType().isTypeOf(oFF.SystemType.BW);
	if (oFF.notNull(queryModel))
	{
		clientInfoContext = queryModel;
	}
	else
	{
		clientInfoContext = application;
	}
	if (session.hasFeature(oFF.FeatureToggleOlap.FLEX_CLIENT_INFO) && analyticCapabilities.supportsFlexibleClientInfo())
	{
		oFF.QInAClientInfo.exportFlexibleClientInfo(requestStructure, clientInfoContext);
	}
	else if (session.hasFeature(oFF.FeatureToggleOlap.CLIENT_INFO_METADATA))
	{
		oFF.QInAClientInfo.exportClientInfo(requestStructure, clientInfoContext, analyticCapabilities.supportsClientInfo(), supportLanguageLocale);
	}
	return requestStructure;
};
oFF.InAQMgrSyncAction.prototype.initPlanningSupport = function(inaStructure, beforeVariables)
{
	let provider = this.getActionContext();
	let capabilities = provider.getCapabilitiesBase();
	let isBW = capabilities.getSystemType().isTypeOf(oFF.SystemType.BW);
	let supportsDataEntryReadOnly = provider.supportsDataEntryReadOnly();
	let isDataEntryEnabled = provider.isDataEntryEnabled();
	let isDataEntryReadOnly;
	if (isBW)
	{
		isDataEntryEnabled = oFF.PrUtils.getBooleanProperty(inaStructure, "DefaultInputMode") !== null;
		if (isDataEntryEnabled)
		{
			if (beforeVariables)
			{
				isDataEntryReadOnly = !oFF.PrUtils.getBooleanValueProperty(inaStructure, "DefaultInputMode", false);
			}
			else
			{
				isDataEntryReadOnly = !oFF.PrUtils.getBooleanValueProperty(inaStructure, "InputEnabled", false);
			}
		}
		else
		{
			isDataEntryReadOnly = true;
		}
		supportsDataEntryReadOnly = isDataEntryEnabled;
	}
	else
	{
		if (!isDataEntryEnabled)
		{
			isDataEntryEnabled = oFF.PrUtils.getBooleanValueProperty(inaStructure, "InputEnabled", false);
		}
		isDataEntryReadOnly = !isDataEntryEnabled;
	}
	provider.getQueryModelBase().setSupportsDataEntryReadOnly(supportsDataEntryReadOnly);
	provider.setDataEntryReadOnly(isDataEntryReadOnly);
	provider.setDataEntryEnabled(isDataEntryEnabled);
	if (isBW && isDataEntryEnabled)
	{
		provider.initializeDataAreaState();
	}
};
oFF.InAQMgrSyncAction.prototype.releaseObjectInternal = function()
{
	this.m_rpcFunction = oFF.XObjectExt.release(this.m_rpcFunction);
	oFF.QOlapSyncAction.prototype.releaseObjectInternal.call( this );
};

oFF.InARsEnProvider = function() {};
oFF.InARsEnProvider.prototype = new oFF.DfResultSetProvider();
oFF.InARsEnProvider.prototype._ff_c = "InARsEnProvider";

oFF.InARsEnProvider.create = function(queryProvider, initProcedure, initStructure, context)
{
	let provider = new oFF.InARsEnProvider();
	provider.setupHanalyticsResultSetProvider(queryProvider, initProcedure, initStructure, context);
	return provider;
};
oFF.InARsEnProvider.prototype.m_columnAxisProvider = null;
oFF.InARsEnProvider.prototype.m_complexUnitsSetting = null;
oFF.InARsEnProvider.prototype.m_contextType = null;
oFF.InARsEnProvider.prototype.m_dataCellProvider = null;
oFF.InARsEnProvider.prototype.m_initProcedure = null;
oFF.InARsEnProvider.prototype.m_initStructure = null;
oFF.InARsEnProvider.prototype.m_isTransientQueryProvider = false;
oFF.InARsEnProvider.prototype.m_queryProvider = null;
oFF.InARsEnProvider.prototype.m_rowsAxisProvider = null;
oFF.InARsEnProvider.prototype.m_updatedMetadataProcessor = null;
oFF.InARsEnProvider.prototype.assignMergeId = function(resultSet, rsStructure)
{
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.INA_MERGE_PROCESSING))
	{
		let mergeId = rsStructure.getStringByKey(oFF.InAQueryMergeConstants.TAG_MERGE_ID);
		resultSet.getResultSetContainer().setMergeId(mergeId);
	}
};
oFF.InARsEnProvider.prototype.buildComplexUnit = function(typesList, valuesList, descriptionsList, exponentList)
{
	let types = oFF.XList.create();
	let values = oFF.XList.create();
	let descriptions = oFF.XList.create();
	let exponents = oFF.XList.create();
	let size = valuesList.size();
	for (let j = 0; j < size; j++)
	{
		types.add(typesList.getStringAt(j));
		values.add(valuesList.getStringAt(j));
		descriptions.add(descriptionsList.getStringAt(j));
		exponents.add(oFF.XIntegerValue.create(exponentList.getIntegerAt(j)));
	}
	return oFF.RsComplexUnit.create(types, values, descriptions, exponents);
};
oFF.InARsEnProvider.prototype.clearFunctionalVariablesResolvedValues = function(queryModel)
{
	if (oFF.notNull(queryModel) && queryModel.getVariableContainer() !== null)
	{
		let variableContainer = queryModel.getVariableContainer();
		if (oFF.notNull(variableContainer))
		{
			oFF.XStream.of(variableContainer.getVariables()).filter((variable) => {
				return variable.getVariableType().isTypeOf(oFF.VariableType.FUNCTIONAL_VARIABLE);
			}).map((funcVariable) => {
				return funcVariable;
			}).forEach((funcVar) => {
				funcVar.clearResolvedValues();
			});
		}
	}
};
oFF.InARsEnProvider.prototype.cloneExt = function(flags)
{
	let providerClone = oFF.InARsEnProvider.create(this.m_queryProvider, this.m_initProcedure, this.m_initStructure, this.m_contextType);
	providerClone.copyFromResultSetProvider(this);
	return providerClone;
};
oFF.InARsEnProvider.prototype.connectDataCells = function(firstResultSetStructure)
{
	let cellsSparse = firstResultSetStructure.getStructureByKey("Cells");
	if (oFF.notNull(cellsSparse))
	{
		let listByName = firstResultSetStructure.getListByKey("CellArraySizes");
		let size = oFF.PrUtils.getListSize(listByName, 0);
		let dataCountRows = 0;
		let dataCountColumns = 0;
		if (size > 0)
		{
			dataCountRows = listByName.getIntegerAt(0);
		}
		if (size > 1)
		{
			dataCountColumns = listByName.getIntegerAt(1);
		}
		let exceptionSettings = firstResultSetStructure.getListByKey("ExceptionSettings");
		this.m_dataCellProvider.setOcpStructure(cellsSparse, dataCountColumns, dataCountRows, exceptionSettings);
	}
};
oFF.InARsEnProvider.prototype.copyFromResultSetProvider = function(template)
{
	let origin = template;
	this.m_columnAxisProvider.copyInARsAxisProvider(origin.m_columnAxisProvider);
	this.m_rowsAxisProvider.copyInARsAxisProvider(origin.m_rowsAxisProvider);
	this.m_dataCellProvider.copyInARsDataCellProvider(origin.m_dataCellProvider);
	this.m_initProcedure = origin.m_initProcedure;
	if (oFF.notNull(origin.m_initStructure))
	{
		this.m_initStructure = origin.m_initStructure.getPermaCopy();
	}
	this.m_queryProvider = origin.m_queryProvider;
	this.m_isTransientQueryProvider = origin.m_isTransientQueryProvider;
	if (oFF.notNull(origin.m_complexUnitsSetting))
	{
		this.m_complexUnitsSetting = oFF.XCollectionUtils.createListOfClones(this.m_complexUnitsSetting);
	}
};
oFF.InARsEnProvider.prototype.getColumnAxisProvider = function()
{
	return this.m_columnAxisProvider;
};
oFF.InARsEnProvider.prototype.getComplexUnitsSetting = function()
{
	return this.m_complexUnitsSetting;
};
oFF.InARsEnProvider.prototype.getDataCellProvider = function()
{
	return this.m_dataCellProvider;
};
oFF.InARsEnProvider.prototype.getLbhToUdhConversionProperties = function(resultSetContainer, queryModel, axisType)
{
	let properties = null;
	if (resultSetContainer.isHierarchyToUDHConversionEnabled())
	{
		properties = resultSetContainer.getLbhToUdhConversionProperties(axisType);
		if (oFF.isNull(properties) && oFF.notNull(queryModel))
		{
			let dimensionWithLeveledHierarchy = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(queryModel.getAxis(axisType));
			if (oFF.notNull(dimensionWithLeveledHierarchy))
			{
				properties = oFF.RsLbhToUdhConversionProperties.createByDimension(dimensionWithLeveledHierarchy);
			}
		}
	}
	return properties;
};
oFF.InARsEnProvider.prototype.getRowsAxisProvider = function()
{
	return this.m_rowsAxisProvider;
};
oFF.InARsEnProvider.prototype.getSystemName = function()
{
	return this.m_queryProvider.getSystemName();
};
oFF.InARsEnProvider.prototype.importSerializedData = function(resultStructure, resultSet)
{
	if (resultSet.getState() !== oFF.ResultSetState.EMPTY_JSON)
	{
		let view = null;
		let cube = null;
		let serializedData = resultStructure.getStructureByKey("SerializedData");
		let queryManager = resultSet.getQueryManager();
		let resultSetContainer = resultSet.getResultSetContainer();
		if (this.isValid() && oFF.notNull(serializedData))
		{
			view = serializedData.getStringByKeyExt("View", resultSetContainer.getSerializedView());
			cube = serializedData.getStringByKey("Cube");
			if (resultSetContainer === queryManager.getActiveResultSetContainer())
			{
				this.getOlapEnv().cacheRemoteBlendingData(queryManager, view, cube);
			}
		}
		resultSetContainer.setSerializedData(view, cube);
	}
};
oFF.InARsEnProvider.prototype.importUdhDimension = function(inaStructure, udhName, queryModel, rsDefAxis)
{
	if (oFF.notNull(inaStructure))
	{
		let inaDimensions = inaStructure.getListByKey("Dimensions");
		if (oFF.notNull(inaDimensions))
		{
			let size = inaDimensions.size();
			for (let i = 0; i < size; i++)
			{
				let inaDimension = inaDimensions.getStructureAt(i);
				let dimensionName = inaDimension.getStringByKey("Name");
				if (oFF.XString.isEqual(dimensionName, udhName))
				{
					let importer = oFF.QInAImportFactory.createForMetadata(this.getApplication(), null);
					queryModel.stopEventing();
					let existingDim = queryModel.getDimensionByName(udhName);
					let importedDim = importer.importDimension(inaDimension, queryModel);
					existingDim.setText(importedDim.getText());
					let serializedExistingDim = existingDim.serializeToString(oFF.QModelFormat.INA_METADATA);
					let serializedImportedDim = importedDim.serializeToString(oFF.QModelFormat.INA_METADATA);
					if (!oFF.XString.isEqual(serializedExistingDim, serializedImportedDim))
					{
						existingDim.getFieldContainer().reinit(importedDim.getFieldContainer());
						existingDim.getAttributeContainer().reinit(importedDim.getAttributeContainer());
					}
					this.updateDimensionDefinitions(inaDimensions, queryModel, rsDefAxis);
					queryModel.resumeEventing();
					return;
				}
			}
		}
	}
};
oFF.InARsEnProvider.prototype.importUniversalDisplayHierarchyDimensions = function(queryModel, rows, columns)
{
	if (oFF.notNull(queryModel) && queryModel.getModelCapabilities().supportsUniversalDisplayHierarchies())
	{
		let udh = queryModel.getUniversalDisplayHierarchies();
		let hierarchies = udh.getHierarchies().getIterator();
		let rsQueryModelDef = this.getResultSet().getRsQueryModelDef();
		while (hierarchies.hasNext())
		{
			let hierarchy = hierarchies.next();
			if (hierarchy.isActive())
			{
				let axis = hierarchy.getHierarchyDedicatedAxis();
				let hierarchyName = hierarchy.getName();
				if (oFF.notNull(axis) && oFF.AxisType.ROWS === axis.getType())
				{
					this.importUdhDimension(rows, hierarchyName, queryModel, rsQueryModelDef.getRowsAxisDef());
				}
				else if (oFF.notNull(axis) && oFF.AxisType.COLUMNS === axis.getType())
				{
					this.importUdhDimension(columns, hierarchyName, queryModel, rsQueryModelDef.getColumnsAxisDef());
				}
			}
		}
	}
};
oFF.InARsEnProvider.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid() && oFF.notNull(response))
	{
		let responseStructure = response.getRootElement();
		let updatePlanning = true;
		let planningRequest = null;
		let planningResponse = null;
		if (oFF.notNull(customIdentifier))
		{
			updatePlanning = false;
			let decorator = customIdentifier;
			responseStructure = decorator.buildResponse(responseStructure);
			planningRequest = decorator.getPlanningRequest();
			planningResponse = decorator.getPlanningResponse();
		}
		let ok = this.setResultStructure(responseStructure, updatePlanning);
		if (!ok && !this.m_isTransientQueryProvider)
		{
			this.addError(oFF.ErrorCodes.MODEL_INFRASTRUCTURE_TERMINATED, "Model infrastructure terminated");
		}
		this.updateRawRequestResponse(response);
		if (oFF.notNull(planningRequest) && oFF.notNull(planningResponse))
		{
			oFF.PlanningStateHandler.updateFromResponse(this.getApplication(), this.getSystemName(), planningRequest, planningResponse, this);
		}
	}
	this.trackRequestExecuted(extResult);
	this.endSync();
};
oFF.InARsEnProvider.prototype.processAutoSubmit = function(queryManager, rsQueryModelDef, inaUpdatedMetadata)
{
	if (rsQueryModelDef.isExecuteAutoVariableSubmit())
	{
		this.m_updatedMetadataProcessor = oFF.InAAutoSubmitMdProcessor.create(queryManager, rsQueryModelDef, inaUpdatedMetadata);
		this.m_updatedMetadataProcessor.importMetadataAndUpdateState();
		this.m_updatedMetadataProcessor = oFF.XObjectExt.release(this.m_updatedMetadataProcessor);
	}
};
oFF.InARsEnProvider.prototype.processAutoSubmitRollback = function(queryManager, rsQueryModelDef)
{
	if (rsQueryModelDef.isExecuteAutoVariableSubmit())
	{
		this.m_updatedMetadataProcessor = oFF.InAAutoSubmitMdProcessor.create(queryManager, rsQueryModelDef, null);
		this.m_updatedMetadataProcessor.rollbackState();
		this.m_updatedMetadataProcessor = oFF.XObjectExt.release(this.m_updatedMetadataProcessor);
	}
};
oFF.InARsEnProvider.prototype.processCellContexts = function(inaResultSetCellContexts, resultSet)
{
	if (!oFF.PrUtils.isListEmpty(inaResultSetCellContexts))
	{
		let resultSetContainer = resultSet.getResultSetContainer();
		resultSetContainer.clearCellContexts();
		let importer = oFF.QInAImportFactory.create(this.getApplication(), oFF.QModelFormat.INA_DATA, resultSet.getQueryManager().getModelCapabilities());
		let size = inaResultSetCellContexts.size();
		for (let i = 0; i < size; i++)
		{
			let contextStructure = inaResultSetCellContexts.getStructureAt(i);
			let name = contextStructure.getStringByKey("Name");
			let cellContextStructure = contextStructure.getStructureByKey("CellContext");
			let filter = importer.importComponent(oFF.OlapComponentType.FILTER_EXPRESSION, cellContextStructure, null, null, this.getContext());
			resultSetContainer.putCellContext(name, filter);
		}
	}
};
oFF.InARsEnProvider.prototype.processComplexUnitsSetting = function(unitsSetting)
{
	if (oFF.notNull(unitsSetting))
	{
		let unitsSettingSize = unitsSetting.size();
		if (oFF.isNull(this.m_complexUnitsSetting))
		{
			this.m_complexUnitsSetting = oFF.XList.create();
		}
		for (let i = 0; i < unitsSettingSize; i++)
		{
			let unit = unitsSetting.getStructureAt(i);
			if (oFF.notNull(unit))
			{
				this.m_complexUnitsSetting.add(this.buildComplexUnit(unit.getListByKey("Type"), unit.getListByKey("Value"), unit.getListByKey("Description"), unit.getListByKey("Exp")));
			}
		}
	}
};
oFF.InARsEnProvider.prototype.processDrillValidation = function(queryModel, list)
{
	let drillManager = oFF.isNull(queryModel) ? null : queryModel.getDrillManagerBase();
	if (oFF.notNull(drillManager) && drillManager.isBackendDrillValidationForAutoSubmit() && drillManager.isValidatingContextFreeNavigations() && oFF.XCollectionUtils.hasElements(list))
	{
		queryModel.stopEventing();
		drillManager.removeDrillOperationsByDrillCountersSilently(list);
		queryModel.resumeEventing();
	}
};
oFF.InARsEnProvider.prototype.processFunctionalVariables = function(queryManager, rsQueryModelDef, inaFunctionalVariables)
{
	if (oFF.notNull(inaFunctionalVariables) && !inaFunctionalVariables.isEmpty() && oFF.notNull(queryManager))
	{
		let queryModel = queryManager.getQueryModel();
		if (oFF.notNull(queryModel))
		{
			this.clearFunctionalVariablesResolvedValues(queryModel);
			this.updateFunctionalVariablesResolvedValues(inaFunctionalVariables, queryModel);
		}
	}
};
oFF.InARsEnProvider.prototype.processGridData = function(resultSet, rsStructure)
{
	let queryModel = resultSet.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		let dataSource = rsStructure.getStructureByKey("DataSource");
		if (oFF.notNull(dataSource))
		{
			let lastDataRefresh;
			let lastDataRefreshObj = null;
			let cubeInfo = queryModel.getCubeInfo();
			if (oFF.notNull(cubeInfo))
			{
				if (queryModel.getModelCapabilities().supportsDataRefreshAndDataTopicality())
				{
					let rollUpMinValue = dataSource.getStringByKey("DataRollupMin");
					let rollUpMaxValue = dataSource.getStringByKey("DataRollupMax");
					let rollUpMin = oFF.XDateTime.createDateTimeSafe(rollUpMinValue);
					let rollUpMax = oFF.XDateTime.createDateTimeSafe(rollUpMaxValue);
					cubeInfo.setDataRollUpMin(rollUpMin);
					cubeInfo.setDataRollUpMax(rollUpMax);
					lastDataRefresh = dataSource.getStringByKey("DataLastRefresh");
				}
				else
				{
					lastDataRefresh = dataSource.getStringByKey("LastDataUpdate");
				}
				if (oFF.notNull(lastDataRefresh))
				{
					lastDataRefreshObj = oFF.XDateTime.createDateTimeSafe(lastDataRefresh);
					cubeInfo.setLastUpdateOn(lastDataRefreshObj);
				}
				let dataSourceDescription = dataSource.getStringByKey("Description");
				let cubeInfoText = cubeInfo.getText();
				let queryModelText = queryModel.getText();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dataSourceDescription) && oFF.XString.isEqual(cubeInfoText, queryModelText))
				{
					cubeInfo.setText(dataSourceDescription);
					queryModel.setText(dataSourceDescription);
				}
			}
		}
		if (this.getSession().hasFeature(oFF.FeatureToggleOlap.ASSERT_CONDITIONS_SIZE))
		{
			this.processRsConditions(rsStructure.getListByKey("Conditions"), queryModel.getConditionManager());
		}
	}
	let dataEntryMask = rsStructure.getStructureByKey("DataEntryMask");
	this.setDataEntryMask(dataEntryMask);
	let isInputEnabled = rsStructure.getBooleanByKeyExt("InputEnabled", false);
	resultSet.setDataEntryEnabled(isInputEnabled);
	let inputReadinessStateList = rsStructure.getListByKey("InputReadinessStates");
	this.setInputReadinessStates(inputReadinessStateList);
	this.processComplexUnitsSetting(rsStructure.getListByKey("Units"));
	this.connectDataCells(rsStructure);
	let rows = null;
	let columns = null;
	let axes = rsStructure.getListByKey("Axes");
	let size = oFF.notNull(axes) ? axes.size() : 0;
	for (let i = 0; i < size; i++)
	{
		let axis = axes.getStructureAt(i);
		let type = axis.getStringByKey("Type");
		if (oFF.notNull(type))
		{
			let axisType = oFF.QInAConverter.lookupAxisType(type);
			if (axisType === oFF.AxisType.ROWS)
			{
				rows = axis;
			}
			else if (axisType === oFF.AxisType.COLUMNS)
			{
				columns = axis;
			}
			else
			{
				this.addWarning(oFF.ErrorCodes.ET_WRONG_TYPE, "Unrecognized axis type");
			}
		}
		else
		{
			let name = oFF.XString.toLowerCase(axis.getStringByKey("Name"));
			if (oFF.XString.isEqual("columns", name))
			{
				columns = axis;
			}
			else if (oFF.XString.isEqual("rows", name))
			{
				rows = axis;
			}
			else
			{
				if (i === 0)
				{
					rows = axis;
				}
				else if (i === 1)
				{
					columns = axis;
				}
				else
				{
					this.addWarning(oFF.ErrorCodes.ET_WRONG_TYPE, "Unrecognized axis index");
				}
			}
		}
	}
	this.processRsDataSource(resultSet, rsStructure.getStructureByKey("DataSource"));
	this.processRsDocumentInfo(resultSet, rsStructure.getStructureByKey("DocumentsInfo"));
	this.processDrillValidation(queryModel, rsStructure.getListByKey("InvalidNavigations"));
	this.importUniversalDisplayHierarchyDimensions(queryModel, rows, columns);
	let rsQueryModelDef = resultSet.getRsQueryModelDef();
	this.m_rowsAxisProvider.setOcpStructure(queryModel, rows, this.m_dataCellProvider.getAvailableDataCellRows(), rsQueryModelDef.getRowsAxisDef(), this.getLbhToUdhConversionProperties(resultSet.getResultSetContainer(), queryModel, oFF.AxisType.ROWS));
	this.m_columnAxisProvider.setOcpStructure(queryModel, columns, this.m_dataCellProvider.getAvailableDataCellColumns(), rsQueryModelDef.getColumnsAxisDef(), this.getLbhToUdhConversionProperties(resultSet.getResultSetContainer(), queryModel, oFF.AxisType.COLUMNS));
};
oFF.InARsEnProvider.prototype.processGrids = function(inaGridsList, resultSet)
{
	if (!oFF.PrUtils.isListEmpty(inaGridsList))
	{
		let rsStructure = inaGridsList.getStructureAt(0);
		let inaResultSetState = rsStructure.getIntegerByKeyExt("ResultSetState", 0);
		let resultSetState = oFF.QInAConverter.lookupResultSetState(inaResultSetState);
		resultSet.setState(resultSetState);
		if (resultSetState === oFF.ResultSetState.DATA_AVAILABLE || this.getQueryManager().isShallow())
		{
			this.processGridData(resultSet, rsStructure);
			this.assignMergeId(resultSet, rsStructure);
		}
	}
};
oFF.InARsEnProvider.prototype.processRsConditions = function(inaConditionsList, conditionManager)
{
	if (oFF.notNull(conditionManager) && !oFF.PrUtils.isListEmpty(inaConditionsList))
	{
		let inaCondSize = inaConditionsList.size();
		let effectiveConds = conditionManager.getEffectiveConditions();
		if (inaCondSize !== effectiveConds.size())
		{
			this.addWarning(oFF.ErrorCodes.PARSING_ERROR_CONDITIONS_COUNT, "Number of conditions does not match the number of conditions returned from the server");
		}
		for (let i = 0; i < inaCondSize; i++)
		{
			let inaConditionStructure = inaConditionsList.getStructureAt(i);
			let inaConditionName = inaConditionStructure.getStringByKey("Name");
			let condition = effectiveConds.getByKey(inaConditionName);
			if (oFF.notNull(condition))
			{
				condition.setUsedState(inaConditionStructure.getStringByKey("IsUsed"));
			}
		}
	}
};
oFF.InARsEnProvider.prototype.processRsDataSource = function(resultSet, structureByKey)
{
	if (oFF.notNull(structureByKey))
	{
		resultSet.getResultSetContainer().setRsDataArea(structureByKey.getStringByKey("DataArea"));
	}
};
oFF.InARsEnProvider.prototype.processRsDocumentInfo = function(resultSet, structureByKey)
{
	if (oFF.notNull(structureByKey))
	{
		let documentSupport = structureByKey.getStringByKey("SupportsDocuments");
		if (oFF.XString.isEqual(documentSupport, "Read") || oFF.XString.isEqual(documentSupport, "ReadWrite") || oFF.XString.isEqual(documentSupport, "ReadCreateChange"))
		{
			resultSet.getResultSetContainer().setRsDocumentServicePath(structureByKey.getStringByKey("DocumentsServicePath"));
		}
	}
};
oFF.InARsEnProvider.prototype.processSynchronization = function(syncType)
{
	let requestStructure = null;
	if (this.m_initProcedure === oFF.ProviderInitProcedure.REQUEST_BY_MODEL)
	{
		let activeResultSetContainer = this.m_queryProvider.getActiveResultSetContainerBase();
		let resultSetContainer = this.getResultSet().getResultSetContainer();
		if (activeResultSetContainer !== resultSetContainer)
		{
			this.m_queryProvider.setActiveResultSetContainer(resultSetContainer);
			requestStructure = this.m_queryProvider.fillDataRequestStructure(true);
			this.m_queryProvider.setActiveResultSetContainer(activeResultSetContainer);
		}
		else
		{
			requestStructure = this.m_queryProvider.fillDataRequestStructure(true);
		}
	}
	else if (this.m_initProcedure === oFF.ProviderInitProcedure.REQUEST_BY_STRUCTURE)
	{
		requestStructure = this.m_initStructure;
	}
	let ocpFunction = this.m_queryProvider.createFunction();
	this.setSyncChild(ocpFunction);
	let request = ocpFunction.getRpcRequest();
	let decorator = oFF.RsRequestDecoratorFactory.getResultsetRequestDecorator(this.m_queryProvider.getApplication(), this.m_queryProvider.getSystemDescription(), requestStructure);
	if (oFF.isNull(decorator))
	{
		request.setRequestStructure(requestStructure);
	}
	else
	{
		request.setRequestStructure(decorator.getDecoratedRequest());
	}
	request.setSapPassportConnectionId(this.getQueryManager().getInstanceId());
	request.getProcessingHint().put(oFF.ConnectionParameters.CACHE_HINTS_ENABLED, oFF.PrFactory.createBoolean(this.m_queryProvider.getQueryManager().isCacheHintEnabled()));
	this.m_queryProvider.collectInAMergeAndBatchFunctions(ocpFunction);
	this.m_queryProvider.getActiveResultSetContainer().setRawRequest(request.getRequestStructure().convertToNative());
	ocpFunction.processFunctionExecution(syncType, this, decorator);
	return true;
};
oFF.InARsEnProvider.prototype.releaseObjectInternal = function()
{
	this.m_columnAxisProvider = oFF.XObjectExt.release(this.m_columnAxisProvider);
	this.m_rowsAxisProvider = oFF.XObjectExt.release(this.m_rowsAxisProvider);
	this.m_dataCellProvider = oFF.XObjectExt.release(this.m_dataCellProvider);
	this.m_complexUnitsSetting = oFF.XObjectExt.release(this.m_complexUnitsSetting);
	this.m_contextType = null;
	this.m_updatedMetadataProcessor = oFF.XObjectExt.release(this.m_updatedMetadataProcessor);
	oFF.DfResultSetProvider.prototype.releaseObjectInternal.call( this );
};
oFF.InARsEnProvider.prototype.setDataEntryMask = function(dataEntryMask)
{
	if (oFF.isNull(dataEntryMask))
	{
		return;
	}
	let inaCellNames = dataEntryMask.getListByKey("QueryCellNames");
	if (oFF.isNull(inaCellNames))
	{
		return;
	}
	let cellNames = oFF.PrUtils.asListOfString(inaCellNames);
	this.getResultSet().setDataEntryMask(cellNames);
};
oFF.InARsEnProvider.prototype.setInputReadinessStates = function(stateListStructure)
{
	if (oFF.isNull(stateListStructure))
	{
		return;
	}
	let states = oFF.XList.create();
	for (let i = 0; i < stateListStructure.size(); i++)
	{
		states.add(oFF.RsInputReadinessState.create(i, stateListStructure.getListAt(i)));
	}
	if (states.isEmpty())
	{
		return;
	}
	this.getResultSet().setInputReadinessStates(states);
};
oFF.InARsEnProvider.prototype.setResultStructure = function(resultStructure, updatePlanning)
{
	if (oFF.notNull(resultStructure))
	{
		let resultSet = this.getResultSet();
		if (oFF.isNull(resultSet))
		{
			return false;
		}
		let application = resultSet.getApplication();
		if (oFF.isNull(application))
		{
			return false;
		}
		this.addProfileStep("setResultStructure");
		if (updatePlanning)
		{
			oFF.PlanningStateHandler.update(application, this.getSystemName(), resultStructure, this);
		}
		if (oFF.InAHelper.importMessages(resultStructure, this))
		{
			resultSet.setState(oFF.ResultSetState.ERROR);
		}
		let provider = this.getQueryManager();
		let rsQueryModelDef = resultSet.getRsQueryModelDef();
		let variableError = oFF.XCollectionUtils.contains(this.getErrors(), (error) => {
			return error.getCode() === oFF.ErrorCodes.AUTOSUBMIT_FAILED || error.getCode() === oFF.ErrorCodes.GENERAL_VARIABLE_ERROR;
		});
		if (variableError)
		{
			this.processAutoSubmitRollback(provider, rsQueryModelDef);
		}
		else
		{
			let inaUpdatedMetadata = resultStructure.getStructureByKey("Update");
			this.processAutoSubmit(provider, rsQueryModelDef, inaUpdatedMetadata);
		}
		if (this.isValid())
		{
			let inaFunctionalVariables = resultStructure.getStructureByKey("FunctionalVariables");
			this.processFunctionalVariables(provider, rsQueryModelDef, inaFunctionalVariables);
			let inaResultSetList = resultStructure.getListByKey("Grids");
			if (oFF.isNull(inaResultSetList) && provider.isShallow())
			{
				let batch = resultStructure.getListByKey(oFF.ConnectionConstants.INA_BATCH);
				if (oFF.notNull(batch))
				{
					if (provider.supportsServerState())
					{
						provider.setupQueryModel();
						let importInAMetadata = oFF.QInAImportFactory.createForMetadata(application, provider.getModelCapabilities());
						let queryModel = provider.getQueryModelBase();
						let instanceId = queryModel.getDataSource().getInstanceId();
						if (oFF.isNull(instanceId))
						{
							instanceId = provider.getInstanceId();
							if (oFF.isNull(instanceId))
							{
								instanceId = provider.getApplication().createNextInstanceId();
							}
							let dataSourceBase = queryModel.getDataSourceBase();
							dataSourceBase.setInstanceId(instanceId);
							dataSourceBase.setSystemName(provider.getSystemName());
						}
						importInAMetadata.importQueryModel(batch.getStructureAt(0).getStructureByKey("Cube"), queryModel);
					}
					let lastResult = batch.getStructureAt(batch.size() - 1);
					inaResultSetList = lastResult.getListByKey("Grids");
				}
			}
			this.processGrids(inaResultSetList, resultSet);
			let inaResultSetCellContexts = resultStructure.getListByKey("CellContexts");
			this.processCellContexts(inaResultSetCellContexts, resultSet);
		}
		this.importSerializedData(resultStructure, resultSet);
		this.endProfileStep();
	}
	return true;
};
oFF.InARsEnProvider.prototype.setupHanalyticsResultSetProvider = function(queryProvider, initProcedure, initStructure, context)
{
	let application = queryProvider.getApplication();
	this.setupAction(null, null, null, queryProvider);
	this.m_queryProvider = queryProvider;
	this.m_isTransientQueryProvider = queryProvider.getPreQueryName() !== null && queryProvider.getTagging().containsKey(oFF.QStateConstants.TAG_HAS_TRANSIENT_DEPS);
	this.m_initProcedure = initProcedure;
	this.m_initStructure = initStructure;
	this.m_contextType = context;
	this.m_dataCellProvider = oFF.InARsDataCellProvider.create(application, queryProvider);
	let supportsSapDateFormat = queryProvider.getCapabilitiesBase().supportsSapDate();
	let supportsObtainability = queryProvider.getCapabilitiesBase().supportsObtainability();
	this.m_columnAxisProvider = oFF.InARsAxisProvider.create(application, oFF.AxisType.COLUMNS, context, supportsSapDateFormat, supportsObtainability);
	this.m_rowsAxisProvider = oFF.InARsAxisProvider.create(application, oFF.AxisType.ROWS, context, supportsSapDateFormat, supportsObtainability);
};
oFF.InARsEnProvider.prototype.trackRequestExecuted = function(result)
{
	let usageTracker = oFF.UsageTrackerProvider.getUsageTracker();
	if (usageTracker.isEnabled())
	{
		let response = result.getData();
		if (oFF.isNull(response))
		{
			return;
		}
		try
		{
			let event = new oFF.UTEvent();
			event.setFeature("InaRequest");
			event.setSession(this.getSession());
			let request = response.getFunction().getRpcRequest();
			event.setEventId(request.getRequestType().getName());
			let connectionInfo = request.getConnectionInfo();
			let systemName = connectionInfo.getSystemName();
			let parameters = oFF.XHashMapByString.create();
			parameters.put("SystemName", systemName);
			parameters.put("SystemHost", connectionInfo.getHost());
			let systemType = connectionInfo.getSystemType();
			parameters.put("SystemType", systemType.getName());
			event.setParameters(parameters);
			if (result.hasErrors())
			{
				let errors = oFF.XHashMapByString.create();
				let messages = result.getErrors().getIterator();
				while (messages.hasNext())
				{
					let message = messages.next();
					errors.put(oFF.XInteger.convertToString(message.getCode()), message.getText());
				}
			}
			usageTracker.track(event);
		}
		catch (ignored)
		{
			return;
		}
	}
};
oFF.InARsEnProvider.prototype.updateDimensionDefinitions = function(inaDimensions, queryModel, rsDefAxis)
{
	rsDefAxis.clearDimensions();
	let size = inaDimensions.size();
	for (let i = 0; i < size; i++)
	{
		let inaDimension = inaDimensions.getStructureAt(i);
		let dimension = queryModel.getDimensionByName(inaDimension.getStringByKey("Name"));
		rsDefAxis.addDimension(dimension);
	}
};
oFF.InARsEnProvider.prototype.updateFunctionalVariablesResolvedValues = function(inaStructure, queryModel)
{
	let variableContainer = queryModel.getVariableContainer();
	let inaResolvedValues = inaStructure.getListByKey("ResolvedValues");
	if (oFF.notNull(variableContainer) && oFF.notNull(inaResolvedValues))
	{
		let variableSize = inaResolvedValues.size();
		for (let i = 0; i < variableSize; i++)
		{
			let inaResolvedValue = oFF.PrUtils.getStructureElement(inaResolvedValues, i);
			if (oFF.notNull(inaResolvedValue))
			{
				let dimensionName = inaResolvedValue.getStringByKey("Dimension");
				let variableName = oFF.XStringUtils.concatenate3(inaResolvedValue.getStringByKey("FunctionName"), ".", dimensionName);
				let parameterValues = this.updateParameterValues(inaResolvedValue);
				let variable = variableContainer.getVariable(variableName);
				let valueType = queryModel.getDimensionByName(dimensionName).getFlatKeyField().getValueType();
				let inaFunctionValues = inaResolvedValue.getListByKey("Elements");
				this.updateResolvedValue(inaFunctionValues, valueType, variable, parameterValues);
			}
		}
	}
};
oFF.InARsEnProvider.prototype.updateParameterValues = function(inaResolvedValue)
{
	let parameterValues = oFF.XHashMapByString.create();
	let singleParameterValue = inaResolvedValue.getStringByKey("FunctionParameter");
	if (oFF.XStringUtils.isNotNullAndNotEmpty(singleParameterValue))
	{
		parameterValues.put("parameter", singleParameterValue);
	}
	else
	{
		let parameters = inaResolvedValue.getListByKey("Parameters");
		if (oFF.notNull(parameters))
		{
			let parametersSize = parameters.size();
			for (let j = 0; j < parametersSize; j++)
			{
				let parameter = parameters.getStructureAt(j);
				if (oFF.notNull(parameter))
				{
					let parameterName = parameter.getStringByKey("Param");
					let parameterValue = parameter.getStringByKey("Value");
					if (oFF.XStringUtils.isNotNullAndNotEmpty(parameterName) && oFF.XStringUtils.isNotNullAndNotEmpty(parameterValue))
					{
						parameterValues.put(parameterName, parameterValue);
					}
				}
			}
		}
	}
	return parameterValues.isEmpty() ? null : parameterValues;
};
oFF.InARsEnProvider.prototype.updateRawRequestResponse = function(response)
{
	let resultSet = this.getResultSet();
	if (oFF.notNull(resultSet) && resultSet.getApplication() !== null)
	{
		let provider = this.getQueryManager();
		if (response.getRootElement() === null)
		{
			provider.getActiveResultSetContainer().addError(oFF.ErrorCodes.OTHER_ERROR, "No json root element in response. This can be due to a json parsing issue.");
		}
		else
		{
			let rootElement = response.getRootElement();
			provider.getActiveResultSetContainer().setRawResponse(rootElement.convertToNative());
		}
	}
};
oFF.InARsEnProvider.prototype.updateResolvedValue = function(inaFunctionValues, valueType, variable, parameterValues)
{
	if (oFF.notNull(variable) && variable.getVariableType().isTypeOf(oFF.VariableType.FUNCTIONAL_VARIABLE) && oFF.notNull(inaFunctionValues))
	{
		let functionalVariable = variable;
		let valuesSize = inaFunctionValues.size();
		let resolvedValueRanges = oFF.XList.create();
		for (let i = 0; i < valuesSize; i++)
		{
			let inaFunctionValue = inaFunctionValues.getStructureAt(i);
			let operator = oFF.QInAConverter.lookupComparison(inaFunctionValue.getStringByKeyExt("Comparison", "="));
			let singleValueRange = oFF.QFactory.createFilterOperationWithOperator(variable, null, operator);
			if (inaFunctionValue.getBooleanByKeyExt("IsExcluding", false))
			{
				singleValueRange.setSetSign(oFF.SetSign.EXCLUDING);
			}
			else
			{
				singleValueRange.setSetSign(oFF.SetSign.INCLUDING);
			}
			singleValueRange.getLow().setValue(oFF.XValueUtil.getValueFromString(inaFunctionValue.getStringByKey("Low"), valueType));
			let highValueString = inaFunctionValue.getStringByKey("High");
			if (oFF.XStringUtils.isNotNullAndNotEmpty(highValueString))
			{
				singleValueRange.getHigh().setValue(oFF.XValueUtil.getValueFromString(highValueString, valueType));
			}
			resolvedValueRanges.add(singleValueRange);
		}
		functionalVariable.addResolvedValue(oFF.QFunctionalVariableResolvedValue.createResolvedValue(functionalVariable.getName(), resolvedValueRanges, parameterValues));
	}
};

oFF.MeasureValueHelpRsProvider = function() {};
oFF.MeasureValueHelpRsProvider.prototype = new oFF.DfResultSetProvider();
oFF.MeasureValueHelpRsProvider.prototype._ff_c = "MeasureValueHelpRsProvider";

oFF.MeasureValueHelpRsProvider.create = function(measureDimension)
{
	let provider = new oFF.MeasureValueHelpRsProvider();
	provider.setupProvider(measureDimension);
	return provider;
};
oFF.MeasureValueHelpRsProvider.prototype.m_columnAxisProvider = null;
oFF.MeasureValueHelpRsProvider.prototype.m_dataCellProvider = null;
oFF.MeasureValueHelpRsProvider.prototype.m_measureDimension = null;
oFF.MeasureValueHelpRsProvider.prototype.m_measureHelpResult = null;
oFF.MeasureValueHelpRsProvider.prototype.m_rowsAxisProvider = null;
oFF.MeasureValueHelpRsProvider.prototype.cloneExt = function(flags)
{
	let providerClone = oFF.MeasureValueHelpRsProvider.create(this.m_measureDimension);
	providerClone.copyFromResultSetProvider(this);
	return providerClone;
};
oFF.MeasureValueHelpRsProvider.prototype.copyFromResultSetProvider = function(template)
{
	let origin = template;
	this.m_measureDimension = origin.m_measureDimension;
	this.m_columnAxisProvider.copyValueHelpRsAxisProvider(origin.m_columnAxisProvider);
	this.m_rowsAxisProvider.copyValueHelpRsAxisProvider(origin.m_rowsAxisProvider);
};
oFF.MeasureValueHelpRsProvider.prototype.getColumnAxisProvider = function()
{
	return this.m_columnAxisProvider;
};
oFF.MeasureValueHelpRsProvider.prototype.getComplexUnitsSetting = function()
{
	return null;
};
oFF.MeasureValueHelpRsProvider.prototype.getDataCellProvider = function()
{
	return this.m_dataCellProvider;
};
oFF.MeasureValueHelpRsProvider.prototype.getMeasureHelpNodes = function()
{
	if (oFF.isNull(this.m_measureHelpResult))
	{
		this.m_measureHelpResult = this.m_measureDimension.getSelector().processMeasureHelp();
	}
	return this.m_measureHelpResult;
};
oFF.MeasureValueHelpRsProvider.prototype.getRowsAxisProvider = function()
{
	return this.m_rowsAxisProvider;
};
oFF.MeasureValueHelpRsProvider.prototype.processSynchronization = function(syncType)
{
	this.m_measureHelpResult = this.getMeasureHelpNodes();
	this.addAllMessages(this.m_measureHelpResult);
	this.m_rowsAxisProvider.setValueHelpNodes(this.m_measureHelpResult.getData(), this.m_measureDimension);
	this.endSync();
	return true;
};
oFF.MeasureValueHelpRsProvider.prototype.releaseObjectInternal = function()
{
	oFF.DfResultSetProvider.prototype.releaseObjectInternal.call( this );
	this.m_measureDimension = null;
	this.m_columnAxisProvider = oFF.XObjectExt.release(this.m_columnAxisProvider);
	this.m_rowsAxisProvider = oFF.XObjectExt.release(this.m_rowsAxisProvider);
	this.m_dataCellProvider = oFF.XObjectExt.release(this.m_dataCellProvider);
};
oFF.MeasureValueHelpRsProvider.prototype.setupProvider = function(measureDimension)
{
	this.setupAction(null, null, null, measureDimension);
	this.m_measureDimension = measureDimension;
	this.m_columnAxisProvider = oFF.MeasureValueHelpRsAxisProvider.create(measureDimension);
	this.m_rowsAxisProvider = oFF.MeasureValueHelpRsAxisProvider.create(measureDimension);
	this.m_dataCellProvider = oFF.MeasureValueHelpRsDataCellProvider.create();
};

oFF.InAQMgrCancelThreadsAction = function() {};
oFF.InAQMgrCancelThreadsAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrCancelThreadsAction.prototype._ff_c = "InAQMgrCancelThreadsAction";

oFF.InAQMgrCancelThreadsAction.createAndRun = function(syncType, listener, customIdentifier, parent)
{
	let newObject = new oFF.InAQMgrCancelThreadsAction();
	newObject.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return newObject;
};
oFF.InAQMgrCancelThreadsAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onProviderCancelThreads(extResult, data, customIdentifier);
};
oFF.InAQMgrCancelThreadsAction.prototype.fillRequestStructure = function()
{
	let requestStructure = oFF.InAQMgrSyncAction.prototype.fillRequestStructure.call( this );
	if (oFF.isNull(requestStructure))
	{
		return null;
	}
	let inaAnalytics = requestStructure.putNewStructure("Analytics");
	let inaActions = inaAnalytics.putNewList("Actions");
	let inaCloseAction = inaActions.addNewStructure();
	inaCloseAction.putString("Type", "Close");
	let inaDataSources = inaCloseAction.putNewList("DataSources");
	inaDataSources.addString(this.getActionContext().getInstanceId());
	return requestStructure;
};
oFF.InAQMgrCancelThreadsAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(this.getActionContext());
	this.endSync();
};
oFF.InAQMgrCancelThreadsAction.prototype.processSynchronization = function(syncType)
{
	this.m_rpcFunction = this.getActionContext().createFunction();
	let request = this.m_rpcFunction.getRpcRequest();
	let requestStructure = this.fillRequestStructure();
	if (oFF.isNull(requestStructure))
	{
		return false;
	}
	request.setRequestStructure(requestStructure);
	this.m_rpcFunction.processFunctionExecution(syncType, this, null);
	return true;
};

oFF.InAQMgrClearCacheAction = function() {};
oFF.InAQMgrClearCacheAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrClearCacheAction.prototype._ff_c = "InAQMgrClearCacheAction";

oFF.InAQMgrClearCacheAction.createAndRun = function(syncType, listener, customIdentifier, parent, timestamp)
{
	let newObject = new oFF.InAQMgrClearCacheAction();
	newObject.m_timestamp = timestamp;
	newObject.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return newObject;
};
oFF.InAQMgrClearCacheAction.prototype.m_timestamp = null;
oFF.InAQMgrClearCacheAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onProviderClearCache(extResult, data, customIdentifier);
};
oFF.InAQMgrClearCacheAction.prototype.fillRequestStructure = function()
{
	let requestStructure = oFF.InAQMgrSyncAction.prototype.fillRequestStructure.call( this );
	if (oFF.isNull(requestStructure))
	{
		return null;
	}
	let inaAnalytics = requestStructure.putNewStructure("Analytics");
	let inaActions = inaAnalytics.putNewList("Actions");
	let inaClearCacheAction = inaActions.addNewStructure();
	inaClearCacheAction.putString("Type", "ClearCache");
	let inaDataSources = inaClearCacheAction.putNewList("DataSources");
	let parent = this.getActionContext();
	inaDataSources.addString(parent.getInstanceId());
	let systemType = parent.getSystemType();
	if (systemType === oFF.SystemType.UNV || systemType === oFF.SystemType.UQAS)
	{
		let inaDataSourceDescriptions = inaClearCacheAction.putNewList("DataSourceDescriptions");
		let customProperties = parent.getDataSource().getCustomProperties();
		let iterator = customProperties.getKeysAsIterator();
		let inaCustomProperties = inaDataSourceDescriptions.addNewStructure();
		while (iterator.hasNext())
		{
			let key = iterator.next();
			inaCustomProperties.putString(key, customProperties.getByKey(key));
		}
	}
	if (oFF.isNull(this.m_timestamp))
	{
		let currentDateTimeAtLocalTimezone = this.getQueryManager().getProcess().getDateTimeProvider().getCurrentDateTime();
		let millisecondsForDateTime = currentDateTimeAtLocalTimezone.getTimeInMilliseconds();
		this.m_timestamp = oFF.XLong.convertToString(millisecondsForDateTime);
	}
	inaClearCacheAction.putString("Id", this.m_timestamp);
	return requestStructure;
};
oFF.InAQMgrClearCacheAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(this.getActionContext());
	this.endSync();
};
oFF.InAQMgrClearCacheAction.prototype.processSynchronization = function(syncType)
{
	this.m_rpcFunction = this.getActionContext().createFunction();
	let request = this.m_rpcFunction.getRpcRequest();
	let requestStructure = this.fillRequestStructure();
	if (oFF.notNull(requestStructure))
	{
		request.setRequestStructure(requestStructure);
		this.m_rpcFunction.processFunctionExecution(syncType, this, null);
		return true;
	}
	return false;
};

oFF.InAQMgrFunctionalVariablesAction = function() {};
oFF.InAQMgrFunctionalVariablesAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrFunctionalVariablesAction.prototype._ff_c = "InAQMgrFunctionalVariablesAction";

oFF.InAQMgrFunctionalVariablesAction.createAndRun = function(syncType, parent, dimension, listener, customIdentifier)
{
	let action = new oFF.InAQMgrFunctionalVariablesAction();
	action.m_dimension = dimension;
	action.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return action;
};
oFF.InAQMgrFunctionalVariablesAction.prototype.m_dimension = null;
oFF.InAQMgrFunctionalVariablesAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	if (oFF.notNull(listener))
	{
		listener.onFunctionalVariablesValueHelpExecuted(extResult, customIdentifier);
	}
};
oFF.InAQMgrFunctionalVariablesAction.prototype.fillRequestStructure = function()
{
	let inaRequest = oFF.InAQMgrSyncAction.prototype.fillRequestStructure.call( this );
	let queryManagerProvider = this.getContext();
	let exporter = oFF.QInAExportFactory.createForFunctionalVariablesValueHelp(queryManagerProvider.getApplication(), queryManagerProvider.getModelCapabilities());
	oFF.QInAOptions.fillOptions(inaRequest, queryManagerProvider.getCapabilitiesBase(), queryManagerProvider.getSession(), queryManagerProvider.getQueryServiceConfig());
	let inaAnalytics = inaRequest.putNewStructure("Analytics");
	queryManagerProvider.getInaCapabilities().exportActiveCapabilities(inaAnalytics);
	oFF.QInAOptions.setLanguage(inaAnalytics, queryManagerProvider);
	inaAnalytics.put("DataSource", exporter.exportDataSource(queryManagerProvider.getQueryModel().getDataSource(), false));
	let inaDefinition = inaAnalytics.putNewStructure("Definition");
	let inaDimensions = inaDefinition.putNewList("Dimensions");
	let inaDimension = inaDimensions.addNewStructure();
	inaDimension.putString("Name", this.m_dimension.getName());
	inaDimension.putString("Axis", "Rows");
	oFF.XObjectExt.release(exporter);
	return inaRequest;
};
oFF.InAQMgrFunctionalVariablesAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid())
	{
		let rpcResponse = extResult.getData();
		let variableList = oFF.PrUtils.getListProperty(rpcResponse.getRootElement(), "FunctionalVariables");
		let queryManagerProvider = this.getContext();
		let variableContainer = queryManagerProvider.getVariableContainerBase();
		if (oFF.notNull(variableList) && oFF.notNull(variableContainer))
		{
			variableContainer.queueEventing();
			let importer = oFF.QInAImportFactory.createForMetadata(queryManagerProvider.getApplication(), queryManagerProvider.getModelCapabilities());
			let funcVariables = oFF.XList.create();
			oFF.XCollectionUtils.forEach(variableList, (variable) => {
				let funcVar = importer.importFunctionalVariable(variable.asStructure(), null, variableContainer);
				if (oFF.notNull(funcVar))
				{
					if (!variableContainer.getVariables().contains(funcVar))
					{
						variableContainer.addVariable(funcVar);
					}
					funcVariables.add(funcVar);
				}
			});
			this.setData(funcVariables);
			oFF.XObjectExt.release(importer);
			variableContainer.resumeEventing();
		}
	}
	this.endSync();
};
oFF.InAQMgrFunctionalVariablesAction.prototype.processSynchronization = function(syncType)
{
	let queryManagerProvider = this.getContext();
	let connection = queryManagerProvider.getConnection();
	let serverMetadata = connection.getSystemConnect().getServerMetadata();
	let capabilities = serverMetadata.getMetadataForService(oFF.ServerService.ANALYTIC);
	let fastPath = capabilities.getByKey(oFF.InACapabilities.C032_FAST_PATH);
	let path = oFF.notNull(fastPath) ? fastPath.getValue() : queryManagerProvider.getSystemType().getInAPath();
	let ocpFunction = connection.newRpcFunction(path);
	ocpFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
	let request = ocpFunction.getRpcRequest();
	request.setRequestStructure(this.fillRequestStructure());
	ocpFunction.processFunctionExecution(syncType, this, null);
	return true;
};
oFF.InAQMgrFunctionalVariablesAction.prototype.releaseObjectInternal = function()
{
	oFF.InAQMgrSyncAction.prototype.releaseObjectInternal.call( this );
	this.m_dimension = null;
};

oFF.InAQMgrShutdownAction = function() {};
oFF.InAQMgrShutdownAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrShutdownAction.prototype._ff_c = "InAQMgrShutdownAction";

oFF.InAQMgrShutdownAction.createAndRun = function(syncType, listener, customIdentifier, parent)
{
	let newObject = new oFF.InAQMgrShutdownAction();
	newObject.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return newObject;
};
oFF.InAQMgrShutdownAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onProviderShutdown(extResult, data, customIdentifier);
};
oFF.InAQMgrShutdownAction.prototype.fillRequestStructure = function()
{
	let requestStructure = oFF.InAQMgrSyncAction.prototype.fillRequestStructure.call( this );
	if (oFF.isNull(requestStructure))
	{
		return null;
	}
	let inaAnalytics = requestStructure.putNewStructure("Analytics");
	let inaActions = inaAnalytics.putNewList("Actions");
	let inaCloseAction = inaActions.addNewStructure();
	inaCloseAction.putString("Type", "Close");
	let inaDataSources = inaCloseAction.putNewList("DataSources");
	let datasourceInstanceId = null;
	if (this.getActionContext().getDataSource() !== null)
	{
		datasourceInstanceId = this.getActionContext().getDataSource().getInstanceId();
	}
	let instanceIdToShutdown = this.getActionContext().isShallow() || oFF.XStringUtils.isNullOrEmpty(datasourceInstanceId) ? this.getActionContext().getInstanceId() : datasourceInstanceId;
	inaDataSources.addString(instanceIdToShutdown);
	return requestStructure;
};
oFF.InAQMgrShutdownAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(this.getActionContext());
	this.endSync();
};
oFF.InAQMgrShutdownAction.prototype.processSynchronization = function(syncType)
{
	let provider = this.getActionContext();
	if (provider.supportsShutdown())
	{
		let connectionPool = this.getApplication() !== null ? this.getApplication().getConnectionPool() : null;
		let batchable = oFF.isNull(connectionPool) || !connectionPool.isBatchBypassEnabled();
		this.m_rpcFunction = provider.createFunctionExt(batchable);
		let request = this.m_rpcFunction.getRpcRequest();
		let requestStructure = this.fillRequestStructure();
		if (oFF.notNull(requestStructure))
		{
			request.setRequestStructure(requestStructure);
			request.setRequestType(oFF.HttpSemanticRequestType.CLOSE_DP);
			this.m_rpcFunction.processFunctionExecution(syncType, this, null);
			return true;
		}
	}
	return false;
};

oFF.InAQMgrStartupAction = function() {};
oFF.InAQMgrStartupAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrStartupAction.prototype._ff_c = "InAQMgrStartupAction";

oFF.InAQMgrStartupAction.createInitAndRun = function(syncType, listener, isServiceInit, customIdentifier, parent, genericData)
{
	let config = parent.getQueryServiceConfig();
	let result;
	let mainAction;
	if (config.isFusionActive())
	{
		mainAction = new oFF.InAQMgrStartupAction();
		mainAction.m_isServiceInit = isServiceInit;
		mainAction.setData(genericData);
		mainAction.setupActionAndRun(syncType, listener, customIdentifier, parent);
		result = mainAction;
	}
	else
	{
		let sequence = oFF.SyncActionSequence.create(syncType, listener, customIdentifier, parent);
		let masterCacheSync = oFF.InAQMgrStartupCacheSync.createAndRun(oFF.SyncType.DELAYED, null, null, parent, config);
		sequence.addAction(masterCacheSync);
		sequence.setFinalizeListener(masterCacheSync);
		mainAction = new oFF.InAQMgrStartupAction();
		mainAction.m_isServiceInit = isServiceInit;
		mainAction.m_cacheSync = masterCacheSync;
		mainAction.setData(genericData);
		mainAction.setupActionAndRun(oFF.SyncType.DELAYED, null, null, parent);
		sequence.setDataAction(mainAction);
		sequence.setListenerAction(mainAction);
		sequence.addAction(mainAction);
		sequence.process();
		result = sequence;
	}
	return result;
};
oFF.InAQMgrStartupAction.createMetadataInitAndRun = function(syncType, listener, customIdentifier, parent, genericData)
{
	let newObject = oFF.InAQMgrStartupAction.createInitAndRun(syncType, listener, false, customIdentifier, parent, genericData);
	return newObject;
};
oFF.InAQMgrStartupAction.createServiceInitAndRun = function(syncType, listener, customIdentifier, parent, genericData)
{
	let newObject = oFF.InAQMgrStartupAction.createInitAndRun(syncType, listener, true, customIdentifier, parent, genericData);
	return newObject;
};
oFF.InAQMgrStartupAction.prototype.m_cacheKey = null;
oFF.InAQMgrStartupAction.prototype.m_cacheSync = null;
oFF.InAQMgrStartupAction.prototype.m_cubeStructure = null;
oFF.InAQMgrStartupAction.prototype.m_isServiceInit = false;
oFF.InAQMgrStartupAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	if (this.m_isServiceInit)
	{
		let serviceListener = listener;
		serviceListener.onServiceInitialized(extResult, data, customIdentifier);
	}
	else
	{
		let modelInitListener = listener;
		modelInitListener.onQueryModelInitialized(extResult, data, customIdentifier);
	}
};
oFF.InAQMgrStartupAction.prototype.createBlendingFunction = function()
{
	this.createRpcFunction(this.getActionContext(), oFF.QueryManagerMode.BLENDING);
	return this.m_rpcFunction;
};
oFF.InAQMgrStartupAction.prototype.createRpcFunction = function(provider, mode)
{
	this.m_rpcFunction = provider.createFunction();
	let request = this.m_rpcFunction.getRpcRequest();
	let requestStructure = oFF.PrFactory.createStructure();
	this.fillMetadataRequestStructure(requestStructure, mode);
	request.setRequestStructure(requestStructure);
};
oFF.InAQMgrStartupAction.prototype.fillMetadataRequestStructure = function(requestStructure, mode)
{
	let provider = this.getActionContext();
	let innerRequestStructure = provider.setInnerStructure(requestStructure, "Metadata", null, null);
	let providerType = provider.getProviderTypeProx();
	if (providerType === oFF.ProviderType.ANALYTICS || providerType === oFF.ProviderType.CATALOG)
	{
		innerRequestStructure.putString("Context", "Analytics");
	}
	else if (providerType === oFF.ProviderType.PLANNING || providerType === oFF.ProviderType.PLANNING_VALUE_HELP)
	{
		innerRequestStructure.putString("Context", "Planning");
	}
	else if (providerType === oFF.ProviderType.LIST_REPORTING)
	{
		innerRequestStructure.putString("Context", "ListReporting");
	}
	if (this.getServiceConfig().isLightweight() && provider.getModelCapabilities().supportsLightweightMetadata() && provider.getModelCapabilities().supportsMetadataResultFormatOptions())
	{
		let resultSetFeatures = innerRequestStructure.putNewStructure("ResultSetFeatureRequest");
		let options = resultSetFeatures.putNewStructure("MetadataResultFormatOptions");
		options.putBoolean("LightWeightMetadata", true);
	}
	if (mode === oFF.QueryManagerMode.BLENDING)
	{
		let serviceConfig = this.getServiceConfig();
		let blendingDefinition = serviceConfig.getBlendingDefinition();
		let metadataRequest = oFF.QInADataSourceBlending.exportDataSourceBlending(oFF.QModelFormat.INA_DATA, blendingDefinition, false);
		oFF.QInAExportUtil.setNonEmptyString(metadataRequest, "InstanceId", serviceConfig.getInstanceId());
		innerRequestStructure.put("DataSource", metadataRequest);
	}
	let systemContainer = provider.getOlapSystemContainer();
	let analyticCapabilities = systemContainer.getServiceCapabilities(oFF.ServerService.ANALYTIC);
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEX_CLIENT_INFO) && analyticCapabilities.supportsFlexibleClientInfo())
	{
		oFF.QInAClientInfo.exportFlexibleClientInfo(requestStructure, this.getServiceConfig());
	}
	else if (this.getSession().hasFeature(oFF.FeatureToggleOlap.CLIENT_INFO_METADATA))
	{
		oFF.QInAClientInfo.exportClientInfo(requestStructure, this.getServiceConfig(), analyticCapabilities.supportsClientInfo(), this.getServiceConfig().getSystemType().isTypeOf(oFF.SystemType.BW));
	}
};
oFF.InAQMgrStartupAction.prototype.getServiceConfig = function()
{
	return this.getQueryManager().getServiceConfig();
};
oFF.InAQMgrStartupAction.prototype.isValidResponse = function(extResult, response)
{
	if (!extResult.isValid())
	{
		return false;
	}
	if (oFF.isNull(response))
	{
		return false;
	}
	if (response.getRootElement() === null)
	{
		this.addError(oFF.ErrorCodes.PARSER_ERROR, "No json inside");
		return false;
	}
	return true;
};
oFF.InAQMgrStartupAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	let mode = customIdentifier;
	let provider = this.getActionContext();
	let queryModelBase = this.getQueryModelBase();
	if (this.isValidResponse(extResult, response))
	{
		let rootElement = response.getRootElement();
		let metadataContent = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, rootElement);
		this.runApplySteps(queryModelBase, metadataContent, null, mode, false);
	}
	else
	{
		provider.setLifeCycleState(oFF.LifeCycleState.TERMINATED);
		this.endProfileStep();
		this.endSync();
	}
};
oFF.InAQMgrStartupAction.prototype.processSynchronization = function(syncType)
{
	let provider = this.getActionContext();
	let config = provider.getQueryServiceConfig();
	if (this.m_isServiceInit)
	{
		if (provider.getLifeCycleState() !== oFF.LifeCycleState.INITIAL)
		{
			this.addError(oFF.ErrorCodes.INVALID_STATE, "Query Manager is not initial");
			return false;
		}
		provider.setLifeCycleState(oFF.LifeCycleState.STARTING_UP);
	}
	let mode = provider.getMode();
	let queryModel = this.getQueryModelBase();
	let dataSource = provider.getDataSource();
	if (oFF.isNull(queryModel))
	{
		if (mode === oFF.QueryManagerMode.RAW_QUERY)
		{
			provider.setLifeCycleState(oFF.LifeCycleState.ACTIVE);
			this.endSync();
			return true;
		}
		provider.setupDesignTimeMode();
		queryModel = this.getQueryModelBase();
		dataSource = provider.getDataSource();
	}
	else
	{
		queryModel.setDataSource(dataSource);
	}
	if (mode.isTypeOf(oFF.QueryManagerMode.DEFAULT) && oFF.isNull(dataSource))
	{
		this.addError(oFF.ErrorCodes.INVALID_STATE, "No datasource given");
		return false;
	}
	let dataSourceBase = queryModel.getDataSourceBase();
	let instanceId = dataSourceBase.getInstanceId();
	if (oFF.isNull(instanceId))
	{
		instanceId = provider.getInstanceId();
		if (oFF.isNull(instanceId))
		{
			instanceId = provider.getApplication().createNextInstanceId();
		}
		dataSourceBase.setInstanceId(instanceId);
	}
	let systemName = dataSourceBase.getSystemName();
	if (oFF.isNull(systemName))
	{
		dataSourceBase.setSystemName(provider.getSystemName());
	}
	if (mode === oFF.QueryManagerMode.RAW_QUERY && this.m_isServiceInit)
	{
		return false;
	}
	let definitionContent = provider.getInitSettings().getDefinitionContent();
	let queryContent = null;
	let metadataContent = null;
	let isInitWithStructure = false;
	if (config.isFusionActive())
	{
		metadataContent = config.getMetadataContent();
		if (oFF.notNull(metadataContent))
		{
			isInitWithStructure = true;
		}
		queryContent = config.getRepositoryContent();
	}
	if (isInitWithStructure === false)
	{
		if (oFF.notNull(definitionContent) && definitionContent.getContentType().containsMetadata())
		{
			metadataContent = definitionContent;
			isInitWithStructure = true;
		}
		else if (oFF.notNull(dataSource))
		{
			let extendedDimensions = dataSource.getExtendedDimensions();
			if (oFF.notNull(extendedDimensions))
			{
				if (dataSource.getExtendedDimensions().hasElements() && mode === oFF.QueryManagerMode.BLENDING)
				{
					this.addWarningExt(oFF.OriginLayer.SERVER, oFF.ErrorCodes.INVALID_DIMENSION, "Joining ExtendedDimensions on a BlendingQuery is not supported by the backend!");
				}
			}
			this.m_cacheKey = oFF.QFactory.createCacheKeyByContext(queryModel);
			let definitionType2 = config.getDefinitionType();
			let storedMetadata;
			if (oFF.notNull(definitionType2) && definitionType2.containsMetadata())
			{
				storedMetadata = this.getApplication().getOlapEnvironment().getQueryMetadata(this.m_cacheKey);
				metadataContent = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, storedMetadata);
				isInitWithStructure = true;
			}
			else
			{
				if (config.isFusionActive() === false)
				{
					storedMetadata = this.m_cacheSync.getMetadataInCache();
					if (oFF.notNull(storedMetadata))
					{
						metadataContent = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, storedMetadata);
					}
				}
			}
		}
	}
	if (oFF.notNull(metadataContent))
	{
		this.runApplySteps(queryModel, metadataContent, queryContent, mode, isInitWithStructure);
		return true;
	}
	else if (mode === oFF.QueryManagerMode.BLENDING)
	{
		this.addProfileStep("Prepare Metadata Request");
		let blendingMgr = oFF.InAQMgrStartupBlending.create(this);
		blendingMgr.prepare(syncType);
		this.endProfileStep();
		blendingMgr.process(this, syncType);
		return this.isValid();
	}
	else
	{
		if (provider.supportsAndAllowsEmptyExtendedVarDefinition())
		{
			let extResult = provider.emptyVariableDefinition(syncType, null, null);
			this.addAllMessages(extResult);
		}
		else
		{
			this.addProfileStep("Prepare Metadata Request");
			this.createRpcFunction(provider, mode);
			this.endProfileStep();
			this.m_rpcFunction.processFunctionExecution(syncType, this, mode);
			return true;
		}
	}
	return false;
};
oFF.InAQMgrStartupAction.prototype.removeAlreadyLoadedDimensions = function(queryModel)
{
	if (queryModel.isPartialResponse())
	{
		return true;
	}
	for (let i = 0; i < queryModel.getLoadedDimensions().size(); )
	{
		queryModel.removeDimension(queryModel.getLoadedDimensions().get(i));
	}
	return true;
};
oFF.InAQMgrStartupAction.prototype.runApplySteps = function(queryModel, metadataContent, queryContent, mode, isInitWithStructure)
{
	if (oFF.notNull(queryModel))
	{
		queryModel.stopEventing();
		if (this.isValid())
		{
			this.addProfileStep("step1ApplyMetadataStructure");
			this.step1ApplyMetadataStructure(queryModel, metadataContent, mode, isInitWithStructure);
			this.endProfileStep();
		}
		if (this.isValid())
		{
			this.addProfileStep("step2ApplyPlanning");
			this.step2ApplyPlanning(metadataContent, mode);
			this.endProfileStep();
		}
		if (this.isValid())
		{
			this.addProfileStep("step3ApplyQueryModel");
			this.step3ApplyQueryModel(queryContent, isInitWithStructure);
			this.endProfileStep();
		}
		if (this.isValid())
		{
			this.addProfileStep("step4ApplyDataRequest");
			this.step4ApplyDataRequest();
			this.endProfileStep();
		}
		if (this.isValid())
		{
			this.addProfileStep("step5ApplyBlending");
			this.step5ApplyBlending(mode, isInitWithStructure);
			this.endProfileStep();
		}
		this.step6Finalize();
		if (this.isValid())
		{
			this.addProfileStep("step6Variables");
			this.step6Variables(isInitWithStructure);
			this.endProfileStep();
		}
		queryModel.resumeEventing();
	}
	this.endSync();
};
oFF.InAQMgrStartupAction.prototype.step1ApplyMetadataStructure = function(queryModel, metadataContent, mode, isInitWithStructure)
{
	if (oFF.notNull(metadataContent))
	{
		let rootElement = metadataContent.getJsonContent();
		let modelFormat = metadataContent.getContentType();
		let provider = this.getActionContext();
		let config = provider.getQueryServiceConfig();
		if (config.isFusionActive() === false)
		{
			this.m_cacheSync.storeMetadataInCache(rootElement);
		}
		let application = this.getApplication();
		if (!oFF.InAHelper.importMessages(rootElement, this))
		{
			this.m_cubeStructure = rootElement;
			if (modelFormat !== oFF.QModelFormat.INA_CLONE)
			{
				if (oFF.notNull(rootElement))
				{
					this.m_cubeStructure = rootElement.getStructureByKey("Cube");
					if (oFF.isNull(this.m_cubeStructure) && rootElement.containsKey("Command"))
					{
						this.m_cubeStructure = rootElement.getStructureByKey("Command");
					}
					if (oFF.isNull(this.m_cubeStructure))
					{
						if (isInitWithStructure)
						{
							this.m_cubeStructure = rootElement;
						}
						let dataSourceValidation = rootElement.getStructureByKey("DataSourceValidation");
						if (oFF.notNull(dataSourceValidation))
						{
							if (dataSourceValidation.getBooleanByKey("Valid"))
							{
								this.addInfo(oFF.InfoCodes.QUERY_MODEL_VERSION_VALID, "Model version valid");
							}
							else
							{
								this.addErrorExt(oFF.OriginLayer.DRIVER, oFF.ErrorCodes.SERVER_METADATA_NOT_FOUND, "Server metadata not available", null);
							}
							return;
						}
					}
				}
			}
			if (oFF.isNull(this.m_cubeStructure))
			{
				this.addErrorExt(oFF.OriginLayer.DRIVER, oFF.ErrorCodes.QM_CUBE_ENTRY_NOT_FOUND, "Invalid Metadata from server - Cube tag in structure not found", null);
			}
			else
			{
				let modelCapabilities = provider.getModelCapabilities();
				let importInAMetadata;
				if (mode === oFF.QueryManagerMode.BLENDING)
				{
					importInAMetadata = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
				}
				else
				{
					let queryConfig = this.getServiceConfig();
					if (modelFormat === oFF.QModelFormat.INA_CLONE)
					{
						importInAMetadata = oFF.QInAImportFactory.createForCloning(application, modelCapabilities);
					}
					else if (queryConfig.isLoadingDefaultQuery())
					{
						importInAMetadata = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
					}
					else
					{
						importInAMetadata = oFF.QInAImportFactory.createForMetadataCore(application, modelCapabilities);
					}
				}
				if (oFF.notNull(mode))
				{
					let removed = this.removeAlreadyLoadedDimensions(queryModel);
					if (removed)
					{
						importInAMetadata.importQueryModel(this.m_cubeStructure, queryModel);
					}
					else
					{
						let metaDataImporter = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
						let varQueryModel = oFF.QueryModel.create(this.getOlapEnv(), provider, queryModel.getModelCapabilitiesBase());
						varQueryModel.setDataSource(queryModel.getDataSource());
						metaDataImporter.importQueryModel(this.m_cubeStructure, varQueryModel);
						let dimensions = varQueryModel.getDimensions();
						for (let dimensionIndex = 0; dimensionIndex < dimensions.size(); dimensionIndex++)
						{
							let dimension = dimensions.get(dimensionIndex);
							let originalDimension = queryModel.getDimensionByNameFromExistingMetadata(dimension.getName());
							if (oFF.notNull(originalDimension) && originalDimension.getDimensionType() === oFF.DimensionType.DIMENSION_INCOMPLETE)
							{
								originalDimension.copyDimension(dimension);
							}
						}
						queryModel.setServerBaseSerialization(null, oFF.QModelOrigin.INITIAL_SERVER_CALL, this.m_cubeStructure);
						oFF.XObjectExt.release(varQueryModel);
					}
				}
				if (provider.isDirectVariableTransferEnabled() && provider.getInitSettings().getStartVariablesContent() !== null)
				{
					provider.getVariableContainer().deserializeFromElementExt(oFF.QModelFormat.INA_DATA, provider.getInitSettings().getStartVariables());
				}
				if (provider.getDataSource() !== null)
				{
					provider.getDataSource().setValidationHash(queryModel.getDataSource().getValidationHash());
				}
				let performanceData = rootElement.getStructureByKey("PerformanceData");
				if (oFF.notNull(performanceData))
				{
					let userName = performanceData.getStringByKey("UserName");
					let cubeInfo = queryModel.getCubeInfo();
					if (oFF.notNull(cubeInfo))
					{
						cubeInfo.setUserName(userName);
					}
				}
				this.addAllMessages(importInAMetadata);
			}
		}
	}
};
oFF.InAQMgrStartupAction.prototype.step2ApplyPlanning = function(metadataContent, mode)
{
	if (oFF.notNull(metadataContent) && oFF.notNull(this.m_cubeStructure))
	{
		let provider = this.getActionContext();
		let application = this.getApplication();
		oFF.PlanningStateHandler.update(application, provider.getSystemName(), metadataContent.getJsonContent(), this);
		if (mode !== oFF.QueryManagerMode.BLENDING)
		{
			this.initPlanningSupport(this.m_cubeStructure, true);
		}
	}
};
oFF.InAQMgrStartupAction.prototype.step3ApplyQueryModel = function(queryContent, isInitWithStructure)
{
	let queryModelBase = this.getQueryModelBase();
	let provider = this.getActionContext();
	let queryServiceConfig = provider.getQueryServiceConfig();
	let modellerContent = queryServiceConfig.getModellerContent();
	queryModelBase.resumeEventing();
	if (oFF.notNull(modellerContent))
	{
		queryModelBase.deserializeFromElementExt(modellerContent.getContentType(), modellerContent.getJsonContent());
	}
	if (oFF.notNull(queryContent))
	{
		queryModelBase.deserializeFromElementExt(queryContent.getContentType(), queryContent.getJsonContent());
	}
	else if (isInitWithStructure === false)
	{
		let deserializationStructure = provider.getDeserializationStructure();
		let importer = provider.getDeserializationImporter();
		if (oFF.notNull(deserializationStructure) && oFF.notNull(importer))
		{
			importer.importQueryModel(deserializationStructure, queryModelBase);
		}
	}
	queryModelBase.stopEventing();
};
oFF.InAQMgrStartupAction.prototype.step4ApplyDataRequest = function()
{
	let provider = this.getActionContext();
	let dataRequest = provider.getQueryServiceConfig().getDataRequest();
	if (oFF.notNull(dataRequest))
	{
		let queryModelBase = this.getQueryModelBase();
		queryModelBase.deserializeFromElementExt(oFF.QModelFormat.INA_DATA, dataRequest);
	}
};
oFF.InAQMgrStartupAction.prototype.step5ApplyBlending = function(mode, isInitWithStructure)
{
	if (isInitWithStructure === false)
	{
		if (mode === oFF.QueryManagerMode.BLENDING)
		{
			let serviceConfig = this.getServiceConfig();
			let blendingDefinition = serviceConfig.getBlendingDefinition();
			if (oFF.notNull(blendingDefinition))
			{
				let queryModelBase = this.getQueryModelBase();
				let dataSourceBase = queryModelBase.getDataSourceBase();
				dataSourceBase.setBlendingDefinition(blendingDefinition);
			}
		}
	}
};
oFF.InAQMgrStartupAction.prototype.step6Finalize = function()
{
	let provider = this.getActionContext();
	if (this.isValid())
	{
		provider.setLifeCycleState(oFF.LifeCycleState.ACTIVE);
	}
	else
	{
		provider.setLifeCycleState(oFF.LifeCycleState.TERMINATED);
	}
};
oFF.InAQMgrStartupAction.prototype.step6Variables = function(isInitWithStructure)
{
	if (isInitWithStructure === false)
	{
		let provider = this.getActionContext();
		if (provider.isDirectVariableTransferEnabled() === false)
		{
			if (provider.getInitSettings().isLightweight() && provider.getInitSettings().getStartVariablesContent() !== null)
			{
				provider.setVariableProcessorState(oFF.VariableProcessorState.SUBMITTED);
			}
			else
			{
				provider.setVariableProcessorState(oFF.VariableProcessorState.CHANGEABLE_STARTUP);
			}
		}
		provider.resumeEventing();
		provider.prepareAfterVariables();
		provider.stopEventing();
	}
};

oFF.InAQMgrVarAction = function() {};
oFF.InAQMgrVarAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrVarAction.prototype._ff_c = "InAQMgrVarAction";

oFF.InAQMgrVarAction.clearSavedStateAndExternalizeDynamicFilter = function(provider, isProcessingSubmitState, invalidateRsc)
{
	provider.setStateBeforeVarScreen(null);
	provider.setMetadataStateBeforeVarScreen(null);
	if (invalidateRsc)
	{
		provider.getNewResultsetContainer();
	}
	if (provider.getInitSettings().isExternalizedDynamicFilter())
	{
		let olapFilterManager = provider.getOlapEnv().getFilterManager();
		olapFilterManager.externalizeDynamicFilterAfterSubmit(provider, isProcessingSubmitState);
	}
};
oFF.InAQMgrVarAction.createAndRunCancel = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_CANCEL, oFF.ProcessingStep.VARIABLE_CANCEL, false, false, !parent.isSubmitted());
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunCheck = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_CHECK, null, false, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunDefinition = function(parent, syncType, listener, customIdentifier)
{
	let state;
	let parentState = parent.getVariableProcessorState();
	if (parentState === oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		state = oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION;
	}
	else
	{
		state = oFF.VariableProcessorState.PROCESSING_DEFINITION;
	}
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, state, oFF.ProcessingStep.VARIABLE_DEFINITION, true, true, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunEmptyVariableDefinition = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunGetRuntimeInfo = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_DEFINITION, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunReInitAfterSubmit = function(parent, syncType, listener, customIdentifier)
{
	if (parent.getInitSettings().isExternalizedDynamicFilter())
	{
		let olapFilterManager = parent.getOlapEnv().getFilterManager();
		olapFilterManager.projectExternalizedFilter(parent);
	}
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_REINIT, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, parent.isSubmitted());
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunSetGetValues = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunSubmit = function(parent, syncType, listener, customIdentifier)
{
	let state;
	if (parent.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_REINIT)
	{
		state = oFF.VariableProcessorState.PROCESSING_SUBMIT_AFTER_REINIT;
	}
	else
	{
		state = oFF.VariableProcessorState.PROCESSING_SUBMIT;
	}
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, null, listener, customIdentifier, state, oFF.ProcessingStep.VARIABLE_SUBMIT, true, true, parent.isVariableSubmitNeeded());
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunVariantActivation = function(parent, variant, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, variant, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_VARIANT_ACTIVATION, oFF.ProcessingStep.VARIABLE_DEFINITION, true, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunVariantDeletion = function(parent, variant, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.setupVarActionAndRun(syncType, parent, variant, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_VARIANT_DELETION, oFF.ProcessingStep.VARIANT_DELETE, false, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.createAndRunVariantUpdate = function(parent, variant, updateProperties, syncType, listener, customIdentifier)
{
	let newObject = new oFF.InAQMgrVarAction();
	newObject.m_updateVariantProperties = updateProperties;
	newObject.setupVarActionAndRun(syncType, parent, variant, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_VARIANT_SAVE, oFF.ProcessingStep.VARIANT_SAVE, false, false, true);
	return newObject;
};
oFF.InAQMgrVarAction.prototype.m_applyVariableAndModelStates = false;
oFF.InAQMgrVarAction.prototype.m_applyVariableStates = false;
oFF.InAQMgrVarAction.prototype.m_isProcessingEmptyDef = false;
oFF.InAQMgrVarAction.prototype.m_needsProcessing = false;
oFF.InAQMgrVarAction.prototype.m_processingStep = null;
oFF.InAQMgrVarAction.prototype.m_state = null;
oFF.InAQMgrVarAction.prototype.m_updateVariantProperties = false;
oFF.InAQMgrVarAction.prototype.m_variableVariant = null;
oFF.InAQMgrVarAction.prototype.applyServerModel = function(queryModel, inaStructure, inaQueryModel)
{
	let queryModelInAStructure = inaQueryModel;
	let provider = this.getActionContext();
	let mergeNeeded = false;
	if (provider.getPreviousVariableProcessorState() !== oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		mergeNeeded = true;
	}
	let environment = this.getOlapEnv();
	let application = this.getApplication();
	oFF.PlanningStateHandler.update(application, provider.getSystemName(), inaStructure, this);
	let metaDataImporter = oFF.QInAImportFactory.createForMetadata(application, queryModel.getModelCapabilities());
	let varQueryModel = oFF.QueryModel.create(environment, provider, queryModel.getModelCapabilitiesBase());
	varQueryModel.setDataSource(queryModel.getDataSource());
	if (this.m_processingStep === oFF.ProcessingStep.VARIABLE_DEFINITION)
	{
		metaDataImporter.importVariableManager(inaStructure.getStructureByKey("Cube"), queryModel.getVariableManagerBase(), queryModel);
	}
	else if (!mergeNeeded)
	{
		metaDataImporter.importQueryModel(queryModelInAStructure, queryModel);
		let deserializationStructure = provider.getDeserializationStructure();
		let importer = provider.getDeserializationImporter();
		if (oFF.notNull(deserializationStructure) && oFF.notNull(importer))
		{
			importer.importQueryModel(deserializationStructure, queryModel);
		}
	}
	else
	{
		metaDataImporter.importQueryModel(queryModelInAStructure, varQueryModel);
		queryModelInAStructure = oFF.PrFactory.createStructureDeepCopy(queryModelInAStructure);
		queryModel.setServerBaseSerialization(null, oFF.QModelOrigin.VARIABLE_SUBMIT, queryModelInAStructure);
	}
	this.addAllMessages(metaDataImporter);
	if (mergeNeeded)
	{
		queryModel.metadataUpdateEventing();
		let variableProcessorState = provider.getVariableProcessorState();
		let settings = oFF.InAQMgrMergeSettings.create(variableProcessorState === oFF.VariableProcessorState.PROCESSING_SUBMIT);
		this.revertUdhStateOnVariableModel(varQueryModel, queryModel, settings);
		queryModel.mergeDeepRecursive(settings, varQueryModel);
		queryModel.augmentSFXMetadata();
	}
	oFF.XObjectExt.release(varQueryModel);
	this.initPlanningSupport(queryModelInAStructure, false);
	if (mergeNeeded)
	{
		queryModel.resumeEventing();
	}
};
oFF.InAQMgrVarAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onVariableProcessorExecuted(extResult, data, customIdentifier);
};
oFF.InAQMgrVarAction.prototype.isSuccessfullyProcessed = function()
{
	return this.isValid();
};
oFF.InAQMgrVarAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addProfileStep("applyDataModelStructure");
	this.addAllMessages(extResult);
	let context = this.getActionContext();
	if (oFF.notNull(context))
	{
		let queryModel = context.getQueryModelBase();
		if (extResult.isValid() && oFF.notNull(response))
		{
			let rootElement = response.getRootElement();
			if (oFF.isNull(rootElement))
			{
				this.addError(oFF.ErrorCodes.PARSER_ERROR, "Root element is missing");
			}
			else if (!oFF.InAHelper.importMessages(rootElement, this))
			{
				if (this.m_processingStep === oFF.ProcessingStep.VARIABLE_DEFINITION || this.m_processingStep === oFF.ProcessingStep.VARIABLE_SUBMIT || this.m_processingStep === oFF.ProcessingStep.VARIANT_SAVE)
				{
					let cube = rootElement.getStructureByKey("Cube");
					if (oFF.isNull(cube))
					{
						this.addError(oFF.ErrorCodes.PARSER_ERROR, "Invalid Metadata from server - Cannot find 'Cube' element.");
					}
					else
					{
						oFF.QInAMdQuery.importVariants(cube, queryModel);
						oFF.PlanningStateHandler.update(this.getApplication(), context.getSystemName(), rootElement, this);
						if (this.m_applyVariableStates)
						{
							this.processCubeElement(queryModel, rootElement, cube, context);
						}
						if (this.m_state === oFF.VariableProcessorState.PROCESSING_VARIANT_SAVE && this.m_updateVariantProperties)
						{
							let newVariantName = oFF.QInAMdQuery.importActiveVariant(cube, queryModel);
							if (oFF.isNull(newVariantName))
							{
								this.addError(oFF.ErrorCodes.PARSER_ERROR, "Could not parse variant.");
							}
							else
							{
								let variant = context.getVariableVariantByName(newVariantName);
								this.m_variableVariant.setName(newVariantName);
								this.m_variableVariant.setText(variant.getText());
								this.m_variableVariant.setScope(variant.getScope());
								this.m_variableVariant.applyState();
							}
						}
					}
				}
				if (this.m_state === oFF.VariableProcessorState.PROCESSING_VARIANT_DELETION)
				{
					context.removeVariableVariant(this.m_variableVariant);
				}
			}
		}
		if (this.isValid())
		{
			let nextState = this.m_state.getNextState();
			if (oFF.notNull(nextState))
			{
				if (this.m_state === oFF.VariableProcessorState.PROCESSING_CANCEL)
				{
					this.addAllMessages(queryModel.deserializeFromElementExt(oFF.QModelFormat.INA_METADATA, context.getMetadataStateBeforeVarScreen()));
					this.addAllMessages(queryModel.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, context.getStateBeforeVarScreen()));
					context.setStateBeforeVarScreen(null);
					context.setMetadataStateBeforeVarScreen(null);
					if (context.getInitSettings().isExternalizedDynamicFilter())
					{
						context.getConvenienceCommands().clearNonMeasureFilters();
					}
				}
				else if (this.m_state.isTypeOf(oFF.VariableProcessorState.PROCESSING_SUBMIT))
				{
					oFF.InAQMgrVarAction.clearSavedStateAndExternalizeDynamicFilter(context, this.m_state === oFF.VariableProcessorState.PROCESSING_SUBMIT, true);
				}
				context.setVariableProcessorState(nextState);
			}
			else
			{
				context.returnToPreviousProcessorState();
			}
			context.prepareAfterVariables();
		}
		else
		{
			if (this.m_state === oFF.VariableProcessorState.PROCESSING_SUBMIT)
			{
				context.setVariableProcessorState(oFF.VariableProcessorState.SUBMIT_FAILED);
			}
			else if (this.m_state === oFF.VariableProcessorState.PROCESSING_SUBMIT_AFTER_REINIT)
			{
				context.setVariableProcessorState(oFF.VariableProcessorState.SUBMIT_FAILED_AFTER_REINIT);
			}
			else
			{
				context.returnToPreviousProcessorState();
			}
		}
	}
	this.endProfileStep();
	this.endSync();
};
oFF.InAQMgrVarAction.prototype.processCubeElement = function(queryModel, rootElement, cubeElement, context)
{
	if (oFF.notNull(queryModel) && context.getModelCapabilities().supportsAutoVariableSubmit())
	{
		queryModel.setIsMetadataUpdatedByAutoSubmit(false);
	}
	if (this.m_applyVariableAndModelStates)
	{
		this.applyServerModel(queryModel, rootElement, cubeElement);
	}
	else if (this.m_isProcessingEmptyDef)
	{
		let inaImporterForEmptyVarDef = context.getVariablesImporter();
		oFF.QInAMdQuery.importDimensions(inaImporterForEmptyVarDef, cubeElement, queryModel);
		inaImporterForEmptyVarDef.importDimensions(cubeElement, queryModel, queryModel);
		inaImporterForEmptyVarDef.importVariables(cubeElement, context.getVariableContainerBase());
		oFF.QInAMdDataSource.importMd(inaImporterForEmptyVarDef, cubeElement, queryModel, queryModel);
		this.addAllMessages(inaImporterForEmptyVarDef);
		this.m_isProcessingEmptyDef = false;
		this.getActionContext().setLifeCycleState(oFF.LifeCycleState.ACTIVE);
	}
	else
	{
		let inaImporter = context.getVariablesImporter();
		inaImporter.importVariables(cubeElement, context.getVariableContainerBase());
		this.addAllMessages(inaImporter);
	}
};
oFF.InAQMgrVarAction.prototype.processSynchronization = function(syncType)
{
	this.setData(this);
	if (this.m_needsProcessing)
	{
		this.m_rpcFunction = this.createFunction();
		let requestStructure = oFF.PrFactory.createStructure();
		let withVariables = this.m_state !== oFF.VariableProcessorState.PROCESSING_REINIT && this.m_state !== oFF.VariableProcessorState.PROCESSING_VARIANT_DELETION;
		let actionContext = this.getActionContext();
		actionContext.fillAnalyticRequestStructure(requestStructure, oFF.QInAConverter.lookupContextNameForProvider(this.getQueryManager().getProviderType()), withVariables, this.m_processingStep, this.m_variableVariant);
		actionContext.setVariableProcessorState(this.m_state);
		this.m_rpcFunction.getRpcRequest().setRequestStructure(requestStructure);
		this.m_rpcFunction.processFunctionExecution(syncType, this, null);
		return true;
	}
	return false;
};
oFF.InAQMgrVarAction.prototype.releaseObjectInternal = function()
{
	this.m_rpcFunction = null;
	this.m_processingStep = null;
	this.m_state = null;
	oFF.InAQMgrSyncAction.prototype.releaseObjectInternal.call( this );
};
oFF.InAQMgrVarAction.prototype.revertUdhState = function(varQueryModel, convertedDimension, varQueryModelUdh, udh, settings)
{
	let varQueryModelDimension = varQueryModel.getDimensionByName(convertedDimension.getName());
	if (oFF.notNull(varQueryModelDimension))
	{
		varQueryModelDimension.getHierarchyManager().copyFrom(convertedDimension.getHierarchyManager(), null);
		let varQueryModelFilter = varQueryModelDimension.getFilter();
		if (oFF.notNull(varQueryModelFilter))
		{
			varQueryModelFilter.clear();
		}
		varQueryModelUdh.mergeDeepRecursive(settings, udh);
	}
};
oFF.InAQMgrVarAction.prototype.revertUdhStateOnVariableModel = function(varQueryModel, queryModel, settings)
{
	if (queryModel.getQueryManager().isHierarchyToUDHConversionEnabledForCurrentRs())
	{
		let universalDisplayHierarchies = queryModel.getUniversalDisplayHierarchies();
		let hierarchyList = universalDisplayHierarchies.getHierarchies();
		let varQueryModelUniversalDisplayHierarchies = varQueryModel.getUniversalDisplayHierarchies();
		let varQueryModelHierarchyList = varQueryModelUniversalDisplayHierarchies.getHierarchies();
		if (oFF.XCollectionUtils.hasElements(hierarchyList) && oFF.XCollectionUtils.hasElements(varQueryModelHierarchyList))
		{
			for (let i = 0; i < varQueryModelHierarchyList.size(); i++)
			{
				let varQueryModelUdh = varQueryModelHierarchyList.get(i);
				if (varQueryModelUdh.isActive())
				{
					let axisType = varQueryModelUdh.getHierarchyDedicatedAxis().getType();
					let dimension = oFF.QInAUniversalDisplayHierarchies.getDimensionWithLeveledHierarchy(queryModel.getAxis(axisType));
					if (oFF.notNull(dimension))
					{
						this.revertUdhState(varQueryModel, dimension, varQueryModelUniversalDisplayHierarchies, universalDisplayHierarchies, settings);
					}
				}
			}
		}
	}
};
oFF.InAQMgrVarAction.prototype.setupVarActionAndRun = function(syncType, context, variant, listener, customIdentifier, state, processingStep, applyVarStates, applyVarAndModelStates, needsProcessing)
{
	this.m_applyVariableStates = applyVarStates;
	this.m_applyVariableAndModelStates = applyVarAndModelStates;
	this.m_processingStep = processingStep;
	this.m_state = state;
	this.m_needsProcessing = needsProcessing;
	this.m_variableVariant = variant;
	if (this.m_state === oFF.VariableProcessorState.PROCESSING_REINIT)
	{
		let queryModel = context.getQueryModel();
		context.setStateBeforeVarScreen(queryModel.serializeToElement(oFF.QModelFormat.INA_REPOSITORY));
		context.setMetadataStateBeforeVarScreen(queryModel.serializeToElement(oFF.QModelFormat.INA_METADATA));
	}
	else if (this.m_state === oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION)
	{
		this.m_isProcessingEmptyDef = true;
	}
	oFF.InAQMgrSyncAction.prototype.setupActionAndRun.call( this , syncType, listener, customIdentifier, context);
};

oFF.InAQMgrVariantModifyAction = function() {};
oFF.InAQMgrVariantModifyAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQMgrVariantModifyAction.prototype._ff_c = "InAQMgrVariantModifyAction";

oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP = "ACTIVATE";
oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP = "DELETE_ERROR";
oFF.InAQMgrVariantModifyAction.DELETE_STEP = "DELETE";
oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP = "SAVE_NEW";
oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP = "SAVE_OLD";
oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP = "SAVE_REPLACE";
oFF.InAQMgrVariantModifyAction.createAndRunModification = function(context, variant, syncType, listener, customIdentifier)
{
	let obj = new oFF.InAQMgrVariantModifyAction();
	obj.m_variant = variant;
	obj.setupActionAndRun(syncType, listener, customIdentifier, context);
	return obj;
};
oFF.InAQMgrVariantModifyAction.prototype.m_previousVariableValues = null;
oFF.InAQMgrVariantModifyAction.prototype.m_replacementVariant = null;
oFF.InAQMgrVariantModifyAction.prototype.m_variant = null;
oFF.InAQMgrVariantModifyAction.prototype.applyVariantState = function()
{
	this.m_variant.setName(this.m_replacementVariant.getName());
	this.m_variant.setText(this.m_replacementVariant.getText());
	this.m_variant.setScope(this.m_replacementVariant.getScope());
	this.m_variant.applyState();
};
oFF.InAQMgrVariantModifyAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onVariableProcessorExecuted(extResult, data, customIdentifier);
};
oFF.InAQMgrVariantModifyAction.prototype.createAndRunReplacementSave = function(name, text, scope, step)
{
	this.m_replacementVariant = oFF.QVariableVariant.createVariantWithScopeInternal(this.m_variant.getDataSource(), name, text, scope);
	oFF.InAQMgrVarAction.createAndRunVariantUpdate(this.getActionContext(), this.m_replacementVariant, true, this.getActiveSyncType(), this, oFF.XStringValue.create(step));
};
oFF.InAQMgrVariantModifyAction.prototype.doErrorHandling = function(step)
{
	let queryManager = this.getActionContext();
	switch (step)
	{
		case oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP:
			this.endSync();
			break;

		case oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP:
			this.restorePreviousValuesAndEnd();
			break;

		case oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP:
			this.restorePreviousValuesAndEnd();
			break;

		case oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP:
			this.endSync();
			break;

		case oFF.InAQMgrVariantModifyAction.DELETE_STEP:
			queryManager.deleteVariableVariant(this.m_replacementVariant, this.getActiveSyncType(), this, oFF.XStringValue.create(oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP));
			this.restorePreviousValuesAndEnd();
			break;

		case oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP:
			this.restorePreviousValuesAndEnd();
			break;
	}
};
oFF.InAQMgrVariantModifyAction.prototype.endSync = function()
{
	this.m_replacementVariant = null;
	this.m_variant = null;
	this.m_previousVariableValues = oFF.XObjectExt.release(this.m_previousVariableValues);
	oFF.InAQMgrSyncAction.prototype.endSync.call( this );
};
oFF.InAQMgrVariantModifyAction.prototype.isSuccessfullyProcessed = function()
{
	return this.isValid();
};
oFF.InAQMgrVariantModifyAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier) {};
oFF.InAQMgrVariantModifyAction.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	let step = customIdentifier.toString();
	let queryManager = this.getActionContext();
	this.addAllMessages(extResult);
	if (this.hasErrors())
	{
		this.doErrorHandling(step);
	}
	else
	{
		this.clearMessages();
		switch (step)
		{
			case oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP:
				let dirtyText = this.m_variant.getDirtyText();
				if (this.m_variant.isNameOrScopeDirty())
				{
					let dirtyScope = this.m_variant.getDirtyScope();
					let dirtyName = dirtyScope !== oFF.Scope.USER ? this.m_variant.getDirtyName() : null;
					this.createAndRunReplacementSave(dirtyName, dirtyText, dirtyScope, oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP);
				}
				else
				{
					let name = this.m_variant.getName();
					let scope = this.m_variant.getScope();
					this.createAndRunReplacementSave(name, dirtyText, scope, oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP);
				}
				break;

			case oFF.InAQMgrVariantModifyAction.SAVE_REPLACE_STEP:
				queryManager.deleteVariableVariant(this.m_variant, this.getActiveSyncType(), this, oFF.XStringValue.create(oFF.InAQMgrVariantModifyAction.DELETE_STEP));
				break;

			case oFF.InAQMgrVariantModifyAction.SAVE_OLD_STEP:
				this.applyVariantState();
				this.restorePreviousValuesAndEnd();
				break;

			case oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP:
				this.applyVariantState();
				this.endSync();
				break;

			case oFF.InAQMgrVariantModifyAction.DELETE_STEP:
				this.applyVariantState();
				this.restorePreviousValuesAndEnd();
				break;

			case oFF.InAQMgrVariantModifyAction.DELETE_ERROR_STEP:
				this.restorePreviousValuesAndEnd();
				break;
		}
	}
};
oFF.InAQMgrVariantModifyAction.prototype.processSynchronization = function(syncType)
{
	if (!this.m_variant.isDirty())
	{
		return false;
	}
	let queryManager = this.getActionContext();
	if (this.m_variant.getName() === null)
	{
		let dirtyScope = this.m_variant.getDirtyScope();
		let dirtyName = dirtyScope !== oFF.Scope.USER ? this.m_variant.getDirtyName() : null;
		this.createAndRunReplacementSave(dirtyName, this.m_variant.getDirtyText(), dirtyScope, oFF.InAQMgrVariantModifyAction.SAVE_NEW_STEP);
		return true;
	}
	this.m_previousVariableValues = queryManager.getVariableContainer().serializeToElement(oFF.QModelFormat.INA_DATA);
	queryManager.activateVariableVariant(this.m_variant, syncType, this, oFF.XStringValue.create(oFF.InAQMgrVariantModifyAction.ACTIVATION_STEP));
	return true;
};
oFF.InAQMgrVariantModifyAction.prototype.releaseObjectInternal = function()
{
	this.m_replacementVariant = null;
	this.m_variant = null;
	this.m_previousVariableValues = oFF.XObjectExt.release(this.m_previousVariableValues);
	oFF.InAQMgrSyncAction.prototype.releaseObjectInternal.call( this );
};
oFF.InAQMgrVariantModifyAction.prototype.restorePreviousValuesAndEnd = function()
{
	let queryManager = this.getActionContext();
	queryManager.getVariableContainer().deserializeFromElementExt(oFF.QModelFormat.INA_DATA, this.m_previousVariableValues);
	this.endSync();
};

oFF.InAQRriTargetDetailsAction = function() {};
oFF.InAQRriTargetDetailsAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQRriTargetDetailsAction.prototype._ff_c = "InAQRriTargetDetailsAction";

oFF.InAQRriTargetDetailsAction.m_minimizeResultSetPayload = false;
oFF.InAQRriTargetDetailsAction.m_queryPattern = null;
oFF.InAQRriTargetDetailsAction.m_targetKey = null;
oFF.InAQRriTargetDetailsAction.createAndRun = function(syncType, parent, identifier, targetKey, queryPattern, minimizeResultSetPayload)
{
	let result = new oFF.InAQRriTargetDetailsAction();
	result.m_parent = parent;
	result.m_identifier = identifier;
	oFF.InAQRriTargetDetailsAction.m_targetKey = targetKey;
	oFF.InAQRriTargetDetailsAction.m_queryPattern = queryPattern;
	oFF.InAQRriTargetDetailsAction.m_minimizeResultSetPayload = minimizeResultSetPayload;
	result.setupActionAndRun(syncType, parent, null, null);
	return result;
};
oFF.InAQRriTargetDetailsAction.prototype.m_identifier = null;
oFF.InAQRriTargetDetailsAction.prototype.m_parent = null;
oFF.InAQRriTargetDetailsAction.prototype.callListener = function(extResult, listener, data, customIdentifier) {};
oFF.InAQRriTargetDetailsAction.prototype.exportRequestJson = function()
{
	let requestStructure = oFF.PrFactory.createStructure();
	let exportInAData = oFF.QInAExportFactory.createForData(this.m_parent.getApplication(), this.m_parent.getModelCapabilities());
	let innerRequestStructure = this.m_parent.setInnerStructure(requestStructure, "Analytics", null, exportInAData);
	let queryModel = this.m_parent.getQueryModel();
	let inaDefinition;
	if (oFF.InAQRriTargetDetailsAction.m_minimizeResultSetPayload)
	{
		innerRequestStructure.remove("Capabilities");
		inaDefinition = oFF.PrFactory.createStructure();
		let options = inaDefinition.putNewStructure("ResultSetFeatureRequest");
		options.putBoolean("SkipResultSetGeneration", true);
	}
	else
	{
		inaDefinition = exportInAData.exportQueryModel(queryModel, true, false);
	}
	if (queryModel.getModelCapabilities().supportsRRI3())
	{
		let hintsStructure = inaDefinition.putNewStructure("Hints");
		oFF.QInAOptions.exportQueryStateHint(hintsStructure, this.m_parent);
	}
	innerRequestStructure.put("Definition", inaDefinition);
	innerRequestStructure.put("DataSource", exportInAData.exportDataSource(queryModel.getDataSource(), false));
	innerRequestStructure.getStructureByKey("DataSource").putString("Type", "Query/RRI");
	let rriTargetManager = queryModel.getQueryManager().getRriTargetManager();
	this.exportRriAction(innerRequestStructure, rriTargetManager);
	return requestStructure;
};
oFF.InAQRriTargetDetailsAction.prototype.exportRriAction = function(innerRequestStructure, rriTargetManager)
{
	let rriAction = innerRequestStructure.putNewStructure("RRIAction");
	if (rriTargetManager.isCustomPathContext())
	{
		rriAction.putStringNotNull("FocusDimension", rriTargetManager.getFocusDimension());
		let pathContextMembers = rriTargetManager.getPathContextMembers();
		if (oFF.notNull(pathContextMembers) && pathContextMembers.size() > 0)
		{
			let pathContextMembersList = rriAction.putNewList("PathContextMembers");
			for (let i = 0; i < pathContextMembers.size(); i++)
			{
				let member = pathContextMembers.get(i);
				let contextMemberStructure = pathContextMembersList.addNewStructure();
				contextMemberStructure.putStringNotNull("FieldName", member.getFieldName());
				contextMemberStructure.putStringNotNull("Member", member.getMemberName());
			}
		}
	}
	else
	{
		rriAction.putInteger("Column", rriTargetManager.getResultSetColumn());
		if (rriTargetManager.isMemberContext())
		{
			rriAction.putInteger("ColumnElements", rriTargetManager.getResultSetColumnElements());
		}
		rriAction.putInteger("Row", rriTargetManager.getResultSetRow());
		if (rriTargetManager.isMemberContext())
		{
			rriAction.putInteger("RowElements", rriTargetManager.getResultSetRowElements());
		}
	}
	rriAction.putStringNotNull("Receiver", oFF.InAQRriTargetDetailsAction.m_targetKey);
	rriAction.putStringNotNull("QueryPattern", oFF.InAQRriTargetDetailsAction.m_queryPattern);
};
oFF.InAQRriTargetDetailsAction.prototype.extractMessages = function(messages)
{
	let size = oFF.XCollectionUtils.size(messages);
	for (let i = 0; i < size; i++)
	{
		let structure = messages.getStructureAt(i);
		let messageType = structure.getIntegerByKey("Type");
		let number = structure.getIntegerByKey("Number");
		let text = structure.getStringByKey("Text");
		if (messageType === 2)
		{
			this.addError(number, text);
		}
		else if (messageType === 1)
		{
			this.addWarning(number, text);
		}
		else if (messageType === 0)
		{
			this.addInfo(number, text);
		}
	}
};
oFF.InAQRriTargetDetailsAction.prototype.extractTarget = function(targetList)
{
	let result = oFF.XList.create();
	let detailedTarget = null;
	for (let i = 0; i < targetList.size(); i++)
	{
		let targetStructure = targetList.getStructureAt(i);
		if (oFF.notNull(targetStructure))
		{
			detailedTarget = oFF.QRriTarget.create();
			detailedTarget.setParameterValues(targetStructure, false);
			detailedTarget.setProperties(targetStructure);
			result.add(detailedTarget);
		}
	}
	return result;
};
oFF.InAQRriTargetDetailsAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	let detailedTarget = null;
	if (extResult.isValid())
	{
		this.extractMessages(oFF.PrUtils.getListProperty(response.getRootElement(), "Messages"));
		detailedTarget = this.extractTarget(oFF.PrUtils.getListProperty(response.getRootElement(), "RRITargets"));
	}
	let extResultTarget = oFF.ExtResult.create(detailedTarget, this);
	let manager = this.m_identifier.getManager();
	manager.setResult(extResultTarget, this.m_identifier);
	this.endSync();
};
oFF.InAQRriTargetDetailsAction.prototype.processSynchronization = function(syncType)
{
	let requestJson = this.exportRequestJson();
	let connection = this.m_parent.getConnection();
	let serverMetadata = connection.getSystemConnect().getServerMetadata();
	let capabilities = serverMetadata.getMetadataForService(oFF.ServerService.ANALYTIC);
	let fastPath = capabilities.getByKey(oFF.InACapabilities.C032_FAST_PATH);
	let path;
	if (oFF.notNull(fastPath))
	{
		path = fastPath.getValue();
	}
	else
	{
		path = this.m_parent.getSystemType().getInAPath();
	}
	let ocpFunction = connection.newRpcFunction(path);
	let request = ocpFunction.getRpcRequest();
	request.setRequestStructure(requestJson);
	ocpFunction.processFunctionExecution(syncType, this, null);
	return true;
};
oFF.InAQRriTargetDetailsAction.prototype.releaseObjectInternal = function()
{
	this.m_parent = null;
	this.m_identifier = null;
	oFF.InAQRriTargetDetailsAction.m_targetKey = null;
	oFF.InAQRriTargetDetailsAction.m_queryPattern = null;
	oFF.InAQRriTargetDetailsAction.m_minimizeResultSetPayload = false;
	oFF.InAQMgrSyncAction.prototype.releaseObjectInternal.call( this );
};

oFF.InAQRriTargetsSyncAction = function() {};
oFF.InAQRriTargetsSyncAction.prototype = new oFF.InAQMgrSyncAction();
oFF.InAQRriTargetsSyncAction.prototype._ff_c = "InAQRriTargetsSyncAction";

oFF.InAQRriTargetsSyncAction.m_isRri2 = false;
oFF.InAQRriTargetsSyncAction.m_minimizeResultSetPayload = false;
oFF.InAQRriTargetsSyncAction.m_restrictOnSupported = false;
oFF.InAQRriTargetsSyncAction.m_targetTypes = null;
oFF.InAQRriTargetsSyncAction.createAndRun = function(syncType, parent, identifier, targetTypes, restrictOnSupported, minimizeResultSetPayload)
{
	let result = new oFF.InAQRriTargetsSyncAction();
	result.m_parent = parent;
	result.m_identifier = identifier;
	oFF.InAQRriTargetsSyncAction.m_targetTypes = targetTypes;
	oFF.InAQRriTargetsSyncAction.m_restrictOnSupported = restrictOnSupported;
	oFF.InAQRriTargetsSyncAction.m_minimizeResultSetPayload = minimizeResultSetPayload;
	oFF.InAQRriTargetsSyncAction.m_isRri2 = !parent.getQueryModel().getModelCapabilities().supportsRRI3();
	result.setupActionAndRun(syncType, parent, null, null);
	return result;
};
oFF.InAQRriTargetsSyncAction.shouldAdd = function(rriTarget)
{
	if (rriTarget.isQuery() && !rriTarget.canBeExecutedLocally())
	{
		return false;
	}
	if (oFF.notNull(oFF.InAQRriTargetsSyncAction.m_targetTypes))
	{
		return oFF.InAQRriTargetsSyncAction.m_targetTypes.contains(rriTarget.getTargetType());
	}
	else if (oFF.InAQRriTargetsSyncAction.m_restrictOnSupported)
	{
		return rriTarget.isTargetTypeSupported();
	}
	return true;
};
oFF.InAQRriTargetsSyncAction.prototype.m_identifier = null;
oFF.InAQRriTargetsSyncAction.prototype.m_parent = null;
oFF.InAQRriTargetsSyncAction.prototype.callListener = function(extResult, listener, data, customIdentifier) {};
oFF.InAQRriTargetsSyncAction.prototype.exportRequestJson = function()
{
	let requestStructure = oFF.PrFactory.createStructure();
	let exportInAData = oFF.QInAExportFactory.createForData(this.m_parent.getApplication(), this.m_parent.getModelCapabilities());
	let innerRequestStructure = this.m_parent.setInnerStructure(requestStructure, "Analytics", null, exportInAData);
	let queryModel = this.m_parent.getQueryModel();
	let inaDefinition;
	if (oFF.InAQRriTargetsSyncAction.m_minimizeResultSetPayload)
	{
		innerRequestStructure.remove("Capabilities");
		inaDefinition = oFF.PrFactory.createStructure();
		let options = inaDefinition.putNewStructure("ResultSetFeatureRequest");
		options.putBoolean("SkipResultSetGeneration", true);
	}
	else
	{
		inaDefinition = exportInAData.exportQueryModel(queryModel, true, false);
	}
	if (queryModel.getModelCapabilities().supportsRRI3())
	{
		let hintsStructure = inaDefinition.putNewStructure("Hints");
		oFF.QInAOptions.exportQueryStateHint(hintsStructure, this.m_parent);
	}
	innerRequestStructure.put("Definition", inaDefinition);
	innerRequestStructure.put("DataSource", exportInAData.exportDataSource(queryModel.getDataSource(), false));
	innerRequestStructure.getStructureByKey("DataSource").putString("Type", "Query/RRI");
	let rriTargetManager = queryModel.getQueryManager().getRriTargetManager();
	this.exportRriContext(innerRequestStructure, rriTargetManager);
	return requestStructure;
};
oFF.InAQRriTargetsSyncAction.prototype.exportRriContext = function(innerRequestStructure, rriTargetManager)
{
	let rriContext = innerRequestStructure.putNewStructure("RRIContext");
	if (rriTargetManager.isCustomPathContext())
	{
		rriContext.putStringNotNull("FocusDimension", rriTargetManager.getFocusDimension());
		let pathContextMembers = rriTargetManager.getPathContextMembers();
		if (oFF.notNull(pathContextMembers) && !pathContextMembers.isEmpty())
		{
			let pathContextMembersList = rriContext.putNewList("PathContextMembers");
			for (let i = 0; i < pathContextMembers.size(); i++)
			{
				let member = pathContextMembers.get(i);
				let contextMemberStructure = pathContextMembersList.addNewStructure();
				contextMemberStructure.putStringNotNull("FieldName", member.getFieldName());
				contextMemberStructure.putStringNotNull("Member", member.getMemberName());
			}
		}
	}
	else
	{
		rriContext.putInteger("Column", rriTargetManager.getResultSetColumn());
		if (rriTargetManager.isMemberContext())
		{
			rriContext.putInteger("ColumnElements", rriTargetManager.getResultSetColumnElements());
		}
		rriContext.putInteger("Row", rriTargetManager.getResultSetRow());
		if (rriTargetManager.isMemberContext())
		{
			rriContext.putInteger("RowElements", rriTargetManager.getResultSetRowElements());
		}
	}
	if (rriTargetManager.isCompatibilityMode() && !oFF.InAQRriTargetsSyncAction.m_isRri2)
	{
		rriContext.putString("Receiver", "COMPATIBILITY");
	}
};
oFF.InAQRriTargetsSyncAction.prototype.extractMessages = function(messages)
{
	let size = oFF.XCollectionUtils.size(messages);
	for (let i = 0; i < size; i++)
	{
		let structure = messages.getStructureAt(i);
		let messageType = structure.getIntegerByKey("Type");
		let number = structure.getIntegerByKey("Number");
		let text = structure.getStringByKey("Text");
		if (messageType === 2)
		{
			this.addError(number, text);
		}
		else if (messageType === 1)
		{
			this.addWarning(number, text);
		}
		else if (messageType === 0)
		{
			this.addInfo(number, text);
		}
	}
};
oFF.InAQRriTargetsSyncAction.prototype.extractRriTargets = function(targets, isCompatibilityMode)
{
	let result = oFF.XList.create();
	let isRri2Behavior = oFF.InAQRriTargetsSyncAction.m_isRri2 || isCompatibilityMode;
	let len = oFF.PrUtils.getListSize(targets, 0);
	for (let i = 0; i < len; i++)
	{
		let targetStructure = oFF.PrUtils.getStructureElement(targets, i);
		if (oFF.isNull(targetStructure))
		{
			continue;
		}
		let rriTarget = oFF.QRriTarget.create();
		rriTarget.setParameterValues(targetStructure, isRri2Behavior);
		if (isRri2Behavior)
		{
			rriTarget.setProperties(targetStructure);
		}
		if (oFF.InAQRriTargetsSyncAction.shouldAdd(rriTarget))
		{
			result.add(rriTarget);
		}
	}
	return result;
};
oFF.InAQRriTargetsSyncAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	let rriTargets = null;
	let manager = this.m_identifier.getManager();
	if (extResult.isValid())
	{
		this.extractMessages(oFF.PrUtils.getListProperty(response.getRootElement(), "Messages"));
		rriTargets = this.extractRriTargets(oFF.PrUtils.getListProperty(response.getRootElement(), "RRITargets"), manager.isCompatibilityMode());
	}
	let extResultRriTargets = oFF.ExtResult.create(rriTargets, this);
	manager.setResult(extResultRriTargets, this.m_identifier);
	this.endSync();
};
oFF.InAQRriTargetsSyncAction.prototype.processSynchronization = function(syncType)
{
	let requestJson = this.exportRequestJson();
	let connection = this.m_parent.getConnection();
	let serverMetadata = connection.getSystemConnect().getServerMetadata();
	let capabilities = serverMetadata.getMetadataForService(oFF.ServerService.ANALYTIC);
	let fastPath = capabilities.getByKey(oFF.InACapabilities.C032_FAST_PATH);
	let path;
	if (oFF.notNull(fastPath))
	{
		path = fastPath.getValue();
	}
	else
	{
		path = this.m_parent.getSystemType().getInAPath();
	}
	let ocpFunction = connection.newRpcFunction(path);
	ocpFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
	let request = ocpFunction.getRpcRequest();
	request.setRequestStructure(requestJson);
	ocpFunction.processFunctionExecution(syncType, this, null);
	return true;
};
oFF.InAQRriTargetsSyncAction.prototype.releaseObjectInternal = function()
{
	this.m_parent = null;
	this.m_identifier = null;
	oFF.InAQRriTargetsSyncAction.m_targetTypes = oFF.XObjectExt.release(oFF.InAQRriTargetsSyncAction.m_targetTypes);
	oFF.InAQRriTargetsSyncAction.m_minimizeResultSetPayload = false;
	oFF.InAQMgrSyncAction.prototype.releaseObjectInternal.call( this );
};

oFF.InAQueryManagerProvider = function() {};
oFF.InAQueryManagerProvider.prototype = new oFF.QueryManager();
oFF.InAQueryManagerProvider.prototype._ff_c = "InAQueryManagerProvider";

oFF.InAQueryManagerProvider.CLAZZ = null;
oFF.InAQueryManagerProvider.staticSetupProvider = function()
{
	oFF.InAQueryManagerProvider.CLAZZ = oFF.XClass.create(oFF.InAQueryManagerProvider);
};
oFF.InAQueryManagerProvider.prototype.m_applyRepoState = false;
oFF.InAQueryManagerProvider.prototype.m_applyingQueryManagerState = false;
oFF.InAQueryManagerProvider.prototype.m_capabilities = null;
oFF.InAQueryManagerProvider.prototype.m_deserializationStructure = null;
oFF.InAQueryManagerProvider.prototype.m_directVariableTransfer = false;
oFF.InAQueryManagerProvider.prototype.m_exportData = null;
oFF.InAQueryManagerProvider.prototype.m_importMetaData = null;
oFF.InAQueryManagerProvider.prototype.m_importer = null;
oFF.InAQueryManagerProvider.prototype.m_inaCapabilities = null;
oFF.InAQueryManagerProvider.prototype.m_inaCapabilitiesValueHelp = null;
oFF.InAQueryManagerProvider.prototype.m_inaRequestStructure = null;
oFF.InAQueryManagerProvider.prototype.m_indicateVariableSubmitAndRSRequestBatch = false;
oFF.InAQueryManagerProvider.prototype.m_isVariableSubmitNeeded = false;
oFF.InAQueryManagerProvider.prototype.m_lastDataRequest = null;
oFF.InAQueryManagerProvider.prototype.m_listOfRequestedResources = null;
oFF.InAQueryManagerProvider.prototype.m_listenerForQueryModelReady = null;
oFF.InAQueryManagerProvider.prototype.m_noVariableSubmitResponse = false;
oFF.InAQueryManagerProvider.prototype.m_processingImageRequest = null;
oFF.InAQueryManagerProvider.prototype.m_recordingQueryManagerState = false;
oFF.InAQueryManagerProvider.prototype.m_rriTargetManager = null;
oFF.InAQueryManagerProvider.prototype.m_savedMetadataStateBeforeVarScreen = null;
oFF.InAQueryManagerProvider.prototype.m_savedStateBeforeVarScreen = null;
oFF.InAQueryManagerProvider.prototype.m_stateManager = null;
oFF.InAQueryManagerProvider.prototype.m_updateRuntimeCapabilities = false;
oFF.InAQueryManagerProvider.prototype.m_valueHelpProvider = null;
oFF.InAQueryManagerProvider.prototype.activateExperimentalFeatures = function()
{
	if (oFF.notNull(this.m_deserializationStructure))
	{
		let experimentalFeatureToggles = this.m_deserializationStructure.getStringByKey("ExperimentalFeatures");
		if (oFF.XStringUtils.isNotNullAndNotEmpty(experimentalFeatureToggles))
		{
			let experimentalFeatureToggleList = oFF.XStringTokenizer.splitString(experimentalFeatureToggles, ",");
			this.m_inaCapabilities.activateDevCapabilities(experimentalFeatureToggleList);
		}
	}
};
oFF.InAQueryManagerProvider.prototype.activateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return this.processActivateVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.addVariable = function(variable)
{
	this.assertLifeCycleActive();
	let variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	variableManagerBase.addVariable(variable);
};
oFF.InAQueryManagerProvider.prototype.addVariableVariant = function(variant)
{
	let variants = this.getVariableVariantsInternal();
	let variantName = variant.getName();
	if (variants.containsKey(variantName))
	{
		variants.removeElement(variants.getByKey(variantName));
	}
	variants.add(variant);
};
oFF.InAQueryManagerProvider.prototype.applyRSFeatureRequest = function()
{
	let context = oFF.InARuntimeUtils.getRequestContext(this.m_inaRequestStructure);
	let definition;
	if (oFF.isNull(context))
	{
		definition = this.m_inaRequestStructure.getStructureByKey("Definition");
	}
	else
	{
		definition = context.getStructureByKey("Definition");
	}
	this.importRSFeatureRequest(definition);
};
oFF.InAQueryManagerProvider.prototype.applyState = function(syncType, listener, customerIdentifier, stateId)
{
	return oFF.InAQMgrApplyStateAction.createAndRun(syncType, this, listener, customerIdentifier, stateId, this.m_stateManager);
};
oFF.InAQueryManagerProvider.prototype.applyStateOnQueryManager = function(definition)
{
	this.m_applyingQueryManagerState = true;
	let qModelFormat = oFF.QModelFormat.INA_REPOSITORY_DATA;
	if (this.isForRendering())
	{
		oFF.QueryManager.prototype.setupQueryModel.call( this );
		qModelFormat = oFF.QModelFormat.INA_CLONE_RENDERING;
	}
	let result = this.getQueryModel().deserializeFromElementExt(qModelFormat, definition);
	this.importQuerySettings(definition);
	this.m_applyingQueryManagerState = false;
	return result;
};
oFF.InAQueryManagerProvider.prototype.applyValueHelpCapabilities = function()
{
	if (oFF.notNull(this.m_inaCapabilitiesValueHelp))
	{
		this.m_inaCapabilities = this.m_inaCapabilitiesValueHelp;
		this.m_inaCapabilitiesValueHelp = null;
		let importer = oFF.QInAImportFactory.createForMetadataCore(this.getApplication(), this.getModelCapabilities());
		let queryModelBase = this.getQueryModelBase();
		importer.importBasicQueryModelCapabilities(queryModelBase);
	}
};
oFF.InAQueryManagerProvider.prototype.applyingStateOnQueryManager = function()
{
	return this.m_applyingQueryManagerState;
};
oFF.InAQueryManagerProvider.prototype.assertNotDirectValueTransfer = function()
{
	if (this.isDirectVariableTransferEnabled())
	{
		throw oFF.XException.createIllegalStateException("stateful variable handling cannot be mixed with direct variable transfer");
	}
};
oFF.InAQueryManagerProvider.prototype.buildBatchWithVarSubmitReq = function()
{
	let inaAnalytics = this.m_lastDataRequest.getStructureByKey("Analytics");
	if (oFF.isNull(inaAnalytics))
	{
		return;
	}
	let inaDefinition = inaAnalytics.getStructureByKey("Definition");
	if (oFF.isNull(inaDefinition))
	{
		return;
	}
	let requestAsSubmit = oFF.PrUtils.createDeepCopy(this.m_lastDataRequest);
	let processingDirectives = requestAsSubmit.getStructureByKey("Analytics").putNewStructure("ProcessingDirectives");
	processingDirectives.putString("ProcessingStep", "VariableSubmit");
	let inaRoot = oFF.PrFactory.createStructure();
	let inaBatch = inaRoot.putNewList(oFF.ConnectionConstants.INA_BATCH);
	inaBatch.add(requestAsSubmit);
	inaBatch.add(this.m_lastDataRequest);
	this.m_lastDataRequest = inaRoot;
	this.m_indicateVariableSubmitAndRSRequestBatch = true;
};
oFF.InAQueryManagerProvider.prototype.checkRequestStructureName = function(requestName, newValues)
{
	if (!oFF.XString.isEqual("Analytics", requestName))
	{
		return requestName;
	}
	let systemType = this.getSystemType();
	if (oFF.isNull(systemType) || !systemType.isTypeOf(oFF.SystemType.BW))
	{
		return requestName;
	}
	if (newValues)
	{
		return "Planning";
	}
	return requestName;
};
oFF.InAQueryManagerProvider.prototype.clearVariableVariants = function()
{
	this.getVariableVariantsInternal().clear();
};
oFF.InAQueryManagerProvider.prototype.clearVariables = function()
{
	this.assertLifeCycleActive();
	let variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	variableManagerBase.clearVariables();
};
oFF.InAQueryManagerProvider.prototype.cloneQueryManagerOptimizedWithLazyLoad = function(serializedModel)
{
	let queryModel = this.getQueryModelBase();
	let usedDimensions = oFF.XList.create();
	usedDimensions.add(queryModel.getPrimaryCalculationDimension().getName());
	if (queryModel.getSecondaryCalculationDimension() !== null)
	{
		usedDimensions.add(queryModel.getSecondaryCalculationDimension().getName());
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(serializedModel))
	{
		let modelJson = oFF.JsonParserFactory.createFromSafeString(serializedModel);
		if (modelJson.isStructure())
		{
			let dimensionsRepo = modelJson.asStructure().getStructureByKey("DimensionsRepo");
			if (oFF.notNull(dimensionsRepo))
			{
				let elements = dimensionsRepo.getListByKey("Elements");
				if (oFF.notNull(elements))
				{
					for (let i = 0; i < elements.size(); i++)
					{
						let element = elements.get(i).asStructure();
						let axis = element.getStringByKey("Axis");
						let axisType = oFF.AxisType.lookup(axis);
						if (axisType === oFF.AxisType.ROWS || axisType === oFF.AxisType.COLUMNS)
						{
							usedDimensions.add(element.getStringByKey("Name"));
						}
					}
				}
			}
		}
	}
	let clonedQueryManagerBase = this.cloneQueryManagerOptimized(usedDimensions);
	let cloneQServiceConfig = clonedQueryManagerBase.getQueryServiceConfig();
	cloneQServiceConfig.setRequiredDimensions(oFF.XList.create());
	cloneQServiceConfig.setSupportsDimensionLazyLoad(true);
	if (oFF.XCollectionUtils.hasElements(clonedQueryManagerBase.getDimensionsToClone()))
	{
		clonedQueryManagerBase.getDimensionsToClone().clear();
	}
	if (oFF.XCollectionUtils.hasElements(clonedQueryManagerBase.getDimensionsRequestedFromClient()))
	{
		clonedQueryManagerBase.getDimensionsRequestedFromClient().clear();
	}
	let clonedDimensionManager = clonedQueryManagerBase.getQueryModel().getDimensionManagerBase();
	let clonedDimNames = clonedDimensionManager.getDimensionNames();
	let originDimensionManager = queryModel.getDimensionManagerBase();
	let originDimNames = originDimensionManager.getDimensionNames();
	for (let j = 0; j < originDimNames.size(); j++)
	{
		let originDimName = originDimNames.get(j);
		if (!clonedDimNames.contains(originDimName))
		{
			let originDim = originDimensionManager.getDimensionByNameInternal(originDimName);
			if (oFF.notNull(originDim))
			{
				clonedDimensionManager.addDimensionReference(originDimName, originDim.getDimensionType(), originDim.isTechnicalDimension());
			}
		}
	}
	return clonedQueryManagerBase;
};
oFF.InAQueryManagerProvider.prototype.cloneQueryManagerUsingExtDataSource = function(cloneMode, dataSource)
{
	if (cloneMode !== oFF.QueryCloneMode.MICRO_CUBE)
	{
		throw oFF.XException.createIllegalStateException("Cloning query manager using external datasource is supported for MicroCube use only.");
	}
	oFF.XObjectExt.assertNotNullExt(dataSource, "External datasource can't be null.");
	this.assertLifeCycleActive();
	let qMgrProvider = new oFF.InAQueryManagerProvider();
	qMgrProvider.setupClone(this, cloneMode, dataSource);
	return qMgrProvider;
};
oFF.InAQueryManagerProvider.prototype.collectInAMergeAndBatchFunctions = function(ocpFunction)
{
	this.getActiveResultSetContainerBase().setMergeId(null);
	let connectionContainer = this.getConnection();
	if (oFF.notNull(connectionContainer) && connectionContainer.isInAMergeProcessingEnabled() && connectionContainer.getBatchModePathExt() !== null)
	{
		let requestStructure = ocpFunction.getRpcRequest().getRequestStructure();
		let isValidInAForMergeProcessing = this.isValidInAForMergeProcessing(requestStructure);
		if (isValidInAForMergeProcessing)
		{
			let connectionPool = connectionContainer.getConnectionPool();
			let inaMergeProcessor = connectionPool.getInAMergeProcessor();
			if (oFF.notNull(inaMergeProcessor))
			{
				let measureDimensionMetadata = null;
				let queryMetadata = null;
				let systemType = this.getSystemType();
				let batchRequestManager = connectionContainer.getBatchRequestManager();
				if (this.isShallow())
				{
					let instanceIdFromDataRequestStructure = oFF.InAQueryMergeUtils.getInstanceId(requestStructure);
					if (oFF.notNull(instanceIdFromDataRequestStructure))
					{
						let definitionStructure = oFF.PrUtilsJsonPath.getFirstElementFromPath(requestStructure, oFF.InAQueryMergeConstants.PA_DEFINITION_PATH);
						let dimensionsStructure = definitionStructure.getListByKey(oFF.InAQueryMergeConstants.QY_DIMENSIONS);
						let measureStructure = oFF.InARestrictedMeasureUtils.getMeasureStructure(dimensionsStructure);
						if (oFF.notNull(measureStructure))
						{
							measureDimensionMetadata = measureStructure.getStructureByKey(oFF.InAQueryMergeConstants.TAG_MEASURE_METADATA_FOR_PERSISTED_INA);
						}
						inaMergeProcessor.addInASourceQuery(instanceIdFromDataRequestStructure, ocpFunction, connectionContainer, systemType, null, null, measureDimensionMetadata);
						if (oFF.notNull(batchRequestManager))
						{
							batchRequestManager.removeBatchFunction(ocpFunction);
						}
					}
				}
				else
				{
					let queryModel = this.getQueryModelBase();
					let measureDimension = queryModel.getMeasureDimension();
					if (oFF.notNull(measureDimension))
					{
						let measureDimensionName = measureDimension.getName();
						if (!inaMergeProcessor.hasMeasureMembersMetadata(measureDimensionName))
						{
							let dimensionLazyLoader = queryModel.getDimensionManagerBase().getDimensionLazyLoader();
							if (oFF.notNull(dimensionLazyLoader))
							{
								measureDimensionMetadata = dimensionLazyLoader.getInaDimension(measureDimensionName);
							}
						}
						let datasource = queryModel.getDataSource();
						let datasourceName = datasource.getFullQualifiedName();
						if (!inaMergeProcessor.hasModelMetadata(datasourceName))
						{
							queryMetadata = queryModel.getMetadata();
						}
						let instanceId = datasource.getInstanceId();
						if (oFF.isNull(instanceId))
						{
							instanceId = oFF.InAQueryMergeUtils.getInstanceId(requestStructure);
							if (oFF.isNull(instanceId))
							{
								instanceId = this.getInstanceId();
							}
						}
						if (oFF.notNull(instanceId))
						{
							inaMergeProcessor.addInASourceQuery(instanceId, ocpFunction, connectionContainer, systemType, datasourceName, queryMetadata, measureDimensionMetadata);
							if (oFF.notNull(batchRequestManager))
							{
								batchRequestManager.removeBatchFunction(ocpFunction);
							}
						}
					}
				}
			}
		}
		else
		{
			oFF.InAQueryMergeUtils.cleanTagsFromRequest(requestStructure, true);
		}
	}
};
oFF.InAQueryManagerProvider.prototype.considerBlendingFlow = function(inADataSource)
{
	this.setMode(oFF.QueryManagerMode.BLENDING);
	let blendingDefinition = oFF.QFactory.createBlendingDefinition();
	this.getQueryServiceConfig().setBlendingDefinition(blendingDefinition);
	let sources = inADataSource.getListByKey("Sources");
	if (oFF.notNull(sources))
	{
		let numberOfSources = sources.size();
		for (let i = 0; i < numberOfSources; i++)
		{
			let sourceStructureFromInADataRequest = sources.getStructureAt(i);
			let alias = sourceStructureFromInADataRequest.getStringByKey("AliasName");
			let sourceCustomIdentifier = oFF.XStringValue.create(alias);
			let definitionInADataRequest = sourceStructureFromInADataRequest.getStructureByKey("DefiningContext");
			let queryServiceConfigRepo = oFF.QueryServiceConfig.createWithDataRequest(this.getApplication(), this.getSystemName(), definitionInADataRequest);
			let processQueryManagerCreationRepo = queryServiceConfigRepo.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
			let sourceQueryManager = processQueryManagerCreationRepo.getData();
			let repoStateAsString = null;
			if (oFF.notNull(this.m_deserializationStructure))
			{
				let dataSourceFromRepo = this.m_deserializationStructure.getStructureByKey("DataSource");
				if (oFF.isNull(dataSourceFromRepo))
				{
					dataSourceFromRepo = this.m_deserializationStructure.getStructureByKey("Definition").getStructureByKey("DataSource");
				}
				let repoSourceStructure = dataSourceFromRepo.getListByKey("Sources").getStructureAt(i);
				let repoStateForSource = repoSourceStructure.getStructureByKey("DefiningContext");
				repoStateAsString = oFF.PrUtils.serialize(repoStateForSource, true, false, 0);
			}
			sourceQueryManager.processModelInitializationAndApplyRepoState(oFF.SyncType.BLOCKING, null, sourceCustomIdentifier, repoStateAsString);
			let sourceQueryModelForBlendingDefinition = sourceQueryManager.getQueryModel();
			blendingDefinition.addNewSource(sourceQueryModelForBlendingDefinition, alias);
		}
	}
	let mappings = inADataSource.getListByKey("Mappings");
	if (oFF.notNull(mappings))
	{
		let numberOfMappings = mappings.size();
		for (let mappingIndex = 0; mappingIndex < numberOfMappings; mappingIndex++)
		{
			let elementInMappings = mappings.getStructureAt(mappingIndex);
			let linkType = oFF.BlendingLinkType.lookup(elementInMappings.getStringByKey("LinkType"));
			let dimensionName = elementInMappings.getStringByKey("DimensionName");
			let customDimensionMapping = blendingDefinition.addNewDimensionMapping(linkType, dimensionName);
			let mappingList = elementInMappings.getListByKey("Mapping");
			for (let j = 0; j < mappingList.size(); j++)
			{
				let elementInMapping = mappingList.getStructureAt(j);
				let qmAliasName = elementInMapping.getStringByKey("AliasName");
				let queryModelDimensionName = elementInMapping.getStructureByKey("MappingDefinition").getStructureByKey("Member").getStringByKey("Name");
				let blendingSource = blendingDefinition.getSources().get(j);
				customDimensionMapping.addNewDimensionMappingDefinition(blendingSource.getQueryModel().getDimensionByName(queryModelDimensionName), qmAliasName);
			}
		}
	}
};
oFF.InAQueryManagerProvider.prototype.createCustomHierarchyProvider = function(customHierarchyDefinition, enforceRequest)
{
	return oFF.InACustomHierarchyProvider.create(this, customHierarchyDefinition, enforceRequest);
};
oFF.InAQueryManagerProvider.prototype.createFunction = function()
{
	return this.createFunctionExt(true);
};
oFF.InAQueryManagerProvider.prototype.createFunctionExt = function(batchable)
{
	let systemDescription = this.getSystemDescription();
	oFF.XObjectExt.assertNotNullExt(systemDescription, "System description is null");
	let fastPathCap = this.getMainCapabilities().getByKey(oFF.InACapabilities.C032_FAST_PATH);
	let path;
	if (oFF.notNull(fastPathCap) && fastPathCap.getValue() !== null)
	{
		path = fastPathCap.getValue();
	}
	else
	{
		path = systemDescription.getSystemType().getInAPath();
	}
	let connection = this.getConnection();
	if (oFF.isNull(connection))
	{
		let connectionPool = this.getApplication().getConnectionPool();
		connection = connectionPool.getOpenConnection(systemDescription.getSystemName());
	}
	let ocpFunction;
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getResourcePath()))
	{
		ocpFunction = connection.newRpcFunctionForBLOB(this.getResourcePath());
		ocpFunction.getRpcRequest().setMethod(oFF.HttpRequestMethod.HTTP_GET);
		ocpFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
		return ocpFunction;
	}
	if (!batchable || connection.isBatchModeEnabled() && this.getActiveResultSetContainer().isRemotePreQuery() && this.getPreQueryName() === null && !oFF.XCollectionUtils.hasElements(this.getQueryModel().getPreQueries()))
	{
		ocpFunction = connection.newRpcFunctionForNonBatchableQuery(path);
	}
	else if (this.m_indicateVariableSubmitAndRSRequestBatch)
	{
		ocpFunction = connection.newRpcFunction(connection.getBatchModePath());
	}
	else
	{
		ocpFunction = connection.newRpcFunction(path);
	}
	ocpFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
	let request = ocpFunction.getRpcRequest();
	request.setSapPassportTransactionId(this.getInstanceId());
	request.setMethod(oFF.HttpRequestMethod.HTTP_POST);
	request.getProcessingHint().putBoolean(oFF.ConnectionParameters.CACHE_HINTS_ENABLED, this.getQueryManager().isCacheHintEnabled());
	return ocpFunction;
};
oFF.InAQueryManagerProvider.prototype.createResultSetProvider = function(procedure, structure, rsDefQueryModel)
{
	oFF.XBooleanUtils.checkTrue(this.getCapabilitiesBase().supportsEncodedResultset(), "Only encoded resultset is supported");
	return oFF.InARsEnProvider.create(this, procedure, structure, oFF.QContextType.RESULT_SET);
};
oFF.InAQueryManagerProvider.prototype.dealWithPreQuery = function(preQueries, inaBatch, modelFormat)
{
	let numberOfPreQueries = preQueries.size();
	for (let i = 0; i < numberOfPreQueries; i++)
	{
		let nameGenericPair = preQueries.get(i);
		let preQueryName = nameGenericPair.getName();
		let preQueryModel = nameGenericPair.getObject();
		preQueryModel.generateTransientObjects();
		let internalPreQueries = preQueryModel.getPreQueries();
		if (oFF.XCollectionUtils.hasElements(internalPreQueries))
		{
			this.dealWithPreQuery(internalPreQueries, inaBatch, modelFormat);
		}
		let serializedPreQueryManager;
		if (modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA)
		{
			serializedPreQueryManager = preQueryModel.getQueryManager().fillPersistedQueryDataRequestStructure(true);
		}
		else
		{
			serializedPreQueryManager = preQueryModel.getQueryManager().fillDataRequestStructure(true);
		}
		let requestContext = oFF.InARuntimeUtils.getRequestContext(serializedPreQueryManager);
		let preQuerySystemName = preQueryModel.getSystemName();
		if (!oFF.XString.isEqual(preQuerySystemName, this.getSystemName()))
		{
			let inaDataSource = requestContext.getStructureByKey("DataSource");
			inaDataSource.putString("System", preQuerySystemName);
		}
		let definition = requestContext.getStructureByKey("Definition");
		definition.putString("Name", preQueryName);
		let rsFeatureRequest = definition.getStructureByKey("ResultSetFeatureRequest");
		rsFeatureRequest.putBoolean("ReturnEmptyJsonResultSet", true);
		inaBatch.add(serializedPreQueryManager);
		preQueryModel.destroyTransientObjects();
	}
};
oFF.InAQueryManagerProvider.prototype.deleteVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	if (oFF.isNull(variableVariant) || this.getVariableVariantByName(variableVariant.getName()) === null)
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	if (!this.supportsMaintainsVariableVariants())
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Deleting variants is not supported", syncType, listener, customIdentifier);
	}
	return this.processDeleteVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.emptyVariableDefinition = function(syncType, listener, customIdentifier)
{
	return this.processEmptyVariableDefinition(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.enableRuntimeVariables = function()
{
	if (this.supportsServerState() && this.getMode() === oFF.QueryManagerMode.RAW_QUERY)
	{
		if (this.getModelCapabilities().supportsAutoVariableSubmit())
		{
			let requestContext = oFF.InARuntimeUtils.getRequestContext(this.m_lastDataRequest);
			if (oFF.notNull(requestContext))
			{
				let dataSourceInA = requestContext.getStructureByKey("DataSource");
				dataSourceInA.putString("InstanceId", this.getQueryServiceConfig().getInstanceId());
				let inaDefinition = requestContext.getStructureByKey("Definition");
				let rsFeatureRequest = inaDefinition.getStructureByKey("ResultSetFeatureRequest");
				rsFeatureRequest.putBoolean("IgnoreAutoSubmit", false);
			}
		}
		else if (this.getVariableProcessorState() === oFF.VariableProcessorState.SUBMITTED)
		{
			let inaBatch = this.m_lastDataRequest.getListByKey(oFF.ConnectionConstants.INA_BATCH);
			if (oFF.notNull(inaBatch))
			{
				this.m_lastDataRequest = inaBatch.getStructureAt(1);
			}
		}
		else
		{
			this.buildBatchWithVarSubmitReq();
		}
	}
};
oFF.InAQueryManagerProvider.prototype.exportDataEntryDescription = function(planningExtension)
{
	let resultSetContainer = this.getActiveResultSetContainer();
	if (oFF.isNull(resultSetContainer))
	{
		return;
	}
	if (!resultSetContainer.hasDataEntryCollection())
	{
		return;
	}
	let dataEntryCollection = resultSetContainer.getDataEntryCollection();
	if (!dataEntryCollection.hasChangedDataEntries())
	{
		return;
	}
	let dataCellEntryDescription = dataEntryCollection.getDataCellEntryDescription();
	if (oFF.XStringUtils.isNullOrEmpty(dataCellEntryDescription))
	{
		return;
	}
	planningExtension.putString("ActionDescription", dataCellEntryDescription);
};
oFF.InAQueryManagerProvider.prototype.exportQueryModelForInARequest = function(withVariables, activeMainCapabilities, query, exportInAData)
{
	let spatialClusterSettings = query.getSpatialClusterSettings();
	if (oFF.notNull(spatialClusterSettings) && spatialClusterSettings.isActive())
	{
		let inaClusteringRequest = oFF.QInASpatialClustering.exportSpatialClusteringRequest(this.m_exportData, spatialClusterSettings);
		let inaClusteringAnalytics = inaClusteringRequest.getStructureByKey("Analytics");
		return inaClusteringAnalytics.getStructureByKey("Definition");
	}
	let hasDataSourceAtService = activeMainCapabilities.containsKey(oFF.InACapabilities.C001_DATASOURCE_AT_SERVICE);
	let lovConfig = this.getActiveResultSetContainerBase().getLovConfig();
	if (oFF.notNull(lovConfig))
	{
		return exportInAData.exportLovRequest(query, withVariables, !hasDataSourceAtService, lovConfig);
	}
	return exportInAData.exportQueryModel(query, withVariables, !hasDataSourceAtService);
};
oFF.InAQueryManagerProvider.prototype.exportToInADefinition = function(requestStructure, requestName, withVariables, processingDirective, exportInAData, variant)
{
	let query = this.getQueryModelBase();
	let requestStructureName = this.checkRequestStructureName(requestName, this.hasNewValues());
	let innerRequestStructure = this.setInnerStructure(requestStructure, requestStructureName, processingDirective, exportInAData);
	exportInAData.m_variableProcessingDirective = processingDirective;
	query.setHasProcessingStep(oFF.notNull(processingDirective));
	let inaDefinition;
	if (this.m_recordingQueryManagerState)
	{
		inaDefinition = this.getQueryModel().serializeToElement(oFF.QModelFormat.INA_REPOSITORY_DATA);
	}
	else
	{
		inaDefinition = this.exportQueryModelForInARequest(withVariables, this.getMainCapabilities(), query, exportInAData);
	}
	if (oFF.isNull(inaDefinition))
	{
		return;
	}
	inaDefinition.putStringNotNull("Name", this.getPreQueryName());
	innerRequestStructure.put("Definition", inaDefinition);
	if (this.supportsDataEntryReadOnly())
	{
		let inputEnabled = !this.isDataEntryReadOnly();
		inaDefinition.putBoolean("InputEnabled", inputEnabled);
	}
	let planningExtensionStructure = oFF.PrFactory.createStructure();
	oFF.QInAExportUtil.setNameIfNotNull(planningExtensionStructure, "PlanningMode", this.getPlanningModeEffective());
	oFF.QInAVersion.exportPlanningVersions(planningExtensionStructure, this);
	this.exportDataEntryDescription(planningExtensionStructure);
	oFF.QInANewValues.exportNewValues(inaDefinition, planningExtensionStructure, this);
	oFF.QInANewLines.exportNewLines(inaDefinition, this);
	oFF.QInADocumentsIds.exportDocumentsIds(inaDefinition, this);
	oFF.QInAInputEnablementRules.exportInputEnablementRules(planningExtensionStructure, this);
	oFF.QInAInputReadinessFilter.exportInputReadinessFilter(inaDefinition, this);
	if (planningExtensionStructure.hasElements())
	{
		inaDefinition.put("PlanningExtensions", planningExtensionStructure);
	}
	this.addAllMessages(exportInAData);
	this.endProfileStep();
	if (this.isPersistedPreQuery())
	{
		inaDefinition.put("ResultSetFeatureRequest", oFF.QInADataSourceBlending.exportResultSetFeatures(query, false));
	}
	else
	{
		let inaOptions = oFF.QInAOptions.exportOptions(this);
		oFF.QInAOptions.exportReturnedDataSelections(inaOptions, this);
		inaDefinition.put("ResultSetFeatureRequest", inaOptions);
	}
	if (oFF.notNull(processingDirective))
	{
		let inaContext = requestStructure.getStructureByKey(requestStructureName);
		let inaProcessingDirective = inaContext.putNewStructure("ProcessingDirectives");
		inaProcessingDirective.putString("ProcessingStep", processingDirective.getName());
		if (oFF.notNull(variant))
		{
			if (processingDirective === oFF.ProcessingStep.VARIABLE_DEFINITION || processingDirective === oFF.ProcessingStep.VARIANT_DELETE || processingDirective === oFF.ProcessingStep.VARIANT_SAVE)
			{
				oFF.QInAVariableVariants.exportVariableVariant(inaDefinition, variant);
			}
		}
	}
	oFF.QInAOptions.exportOptimizerHints(inaDefinition, this);
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEX_CLIENT_INFO) && this.getModelCapabilities().supportsFlexibleClientInfo())
	{
		oFF.QInAClientInfo.exportFlexibleClientInfo(requestStructure, this);
	}
	else
	{
		oFF.QInAClientInfo.exportClientInfo(requestStructure, query, this.getModelCapabilities().supportsClientInfo(), this.getSystemType().isTypeOf(oFF.SystemType.BW));
	}
};
oFF.InAQueryManagerProvider.prototype.exportVariables = function(variablesContext, parentStructure)
{
	this.m_exportData.exportVariables(variablesContext, parentStructure);
};
oFF.InAQueryManagerProvider.prototype.extractFeatureTogglesFromRequest = function()
{
	let capabilitiesToActivate = oFF.XSetOfNameObject.create();
	let inaDataRequestSuppliedFromClient = this.getQueryServiceConfig().getDataRequest();
	let inaContext = oFF.InARuntimeUtils.getRequestContext(inaDataRequestSuppliedFromClient);
	if (oFF.isNull(inaContext))
	{
		let batch = inaDataRequestSuppliedFromClient.getListByKey(oFF.ConnectionConstants.INA_BATCH);
		if (oFF.notNull(batch))
		{
			inaContext = batch.getStructureAt(batch.size() - 1).getStructureByKey("Analytics");
		}
	}
	if (oFF.isNull(inaContext))
	{
		return capabilitiesToActivate;
	}
	let inaCapabilities = inaContext.getListByKey("Capabilities");
	if (oFF.isNull(inaCapabilities))
	{
		return capabilitiesToActivate;
	}
	let activeMainCapabilities = this.getMainCapabilities();
	let numberOfCapabilitiesInInARequest = inaCapabilities.size();
	for (let i = 0; i < numberOfCapabilitiesInInARequest; i++)
	{
		let capability = inaCapabilities.get(i);
		if (!activeMainCapabilities.containsKey(capability.getString()))
		{
			let inactiveCapability = oFF.FeatureToggle.lookup(capability.getString());
			if (oFF.notNull(inactiveCapability))
			{
				capabilitiesToActivate.add(inactiveCapability);
			}
		}
	}
	return capabilitiesToActivate;
};
oFF.InAQueryManagerProvider.prototype.extractInADataSource = function()
{
	let dataRequest = this.getDataRequest();
	if (oFF.isNull(dataRequest))
	{
		dataRequest = this.getQueryServiceConfig().getDataRequest();
	}
	let batch = dataRequest.getListByKey(oFF.ConnectionConstants.INA_BATCH);
	if (oFF.isNull(batch))
	{
		this.m_inaRequestStructure = dataRequest;
	}
	else
	{
		this.m_inaRequestStructure = batch.getStructureAt(batch.size() - 1);
	}
	let inaContext = oFF.InARuntimeUtils.getRequestContext(this.m_inaRequestStructure);
	if (oFF.isNull(inaContext))
	{
		inaContext = this.m_inaRequestStructure.getStructureByKey("Definition");
	}
	return inaContext.getStructureByKey("DataSource");
};
oFF.InAQueryManagerProvider.prototype.fillAnalyticRequestStructure = function(requestStructure, requestName, withVariables, processingDirective, variant)
{
	this.addProfileStep("fillAnalyticRequestStructure");
	let resultsetContainer = this.getResultsetContainer(false);
	let request = resultsetContainer.getRequest();
	if (resultsetContainer.getSyncState() === oFF.SyncState.OUT_OF_SYNC || oFF.isNull(request))
	{
		let conn = this.getConnection();
		let isInAMergeProcessing = oFF.isNull(conn) ? false : conn.isInAMergeProcessingEnabled();
		let application = this.getApplication();
		let modelCapabilities = this.getModelCapabilities();
		let exportInAData = isInAMergeProcessing ? oFF.QInAExportFactory.createForDataMergeProcessing(application, modelCapabilities) : oFF.QInAExportFactory.createForData(application, modelCapabilities);
		this.exportToInADefinition(requestStructure, requestName, withVariables, processingDirective, exportInAData, variant);
	}
	else
	{
		requestStructure.copyFrom(request, null);
	}
};
oFF.InAQueryManagerProvider.prototype.fillDataRequestStructure = function(withVariables)
{
	let mode = this.getMode();
	let initSettings = this.getInitSettings();
	if (mode.isTypeOf(oFF.QueryManagerMode.DEFAULT) || mode === oFF.QueryManagerMode.BLENDING)
	{
		this.m_lastDataRequest = oFF.PrFactory.createStructure();
		let providerType = initSettings.getProviderType();
		let context = oFF.QInAConverter.lookupContextNameForProvider(providerType);
		let processingDirective = this.getProcessingDirective(providerType);
		this.fillAnalyticRequestStructure(this.m_lastDataRequest, context, withVariables, processingDirective, null);
	}
	else if (mode === oFF.QueryManagerMode.RAW_QUERY)
	{
		this.m_lastDataRequest = initSettings.getDataRequest();
		if (this.isUpdatingDataRequestCapabilities() && this.getApplication().getConnectionPool().getConnection(this.getSystemName()).supportsAnalyticCapability(oFF.InACapabilities.V266_RESULTSETV2_METADATA_EXTENSION1))
		{
			if (this.m_lastDataRequest.isProxy())
			{
				this.m_lastDataRequest = oFF.PrUtils.deepCopyElement(this.m_lastDataRequest);
			}
			oFF.InARuntimeUtils.setLanguageAndAddRuntimeCapability(this.m_lastDataRequest, this.getSystemDescription().getLanguage());
			let requestContext = oFF.InARuntimeUtils.getRequestContext(this.m_lastDataRequest);
			if (oFF.notNull(requestContext))
			{
				let definitionInA = requestContext.getStructureByKey("Definition");
				let rsFeatureRequestInA = definitionInA.getStructureByKey("ResultSetFeatureRequest");
				oFF.QInAOptions.importPaging(rsFeatureRequestInA, this);
				oFF.QInAOptions.importSuppressKeyfigureCalculation(rsFeatureRequestInA, this);
			}
		}
		else if (!this.isUpdatingDataRequestCapabilities())
		{
			let analytics2 = this.m_lastDataRequest.getStructureByKey("Analytics");
			let definition = analytics2.getStructureByKey("Definition");
			let rsFeatureRequest = definition.getStructureByKey("ResultSetFeatureRequest");
			if (oFF.isNull(rsFeatureRequest))
			{
				rsFeatureRequest = definition.putNewStructure("ResultSetFeatureRequest");
				rsFeatureRequest.putString("ResultEncoding", "None");
				rsFeatureRequest.putString("ResultFormat", "Version2");
			}
			oFF.QInAOptions.exportReturnedDataSelections(rsFeatureRequest, this);
			this.updateString(rsFeatureRequest, "ResultEncoding", "None");
			this.updateString(rsFeatureRequest, "ResultFormat", "Version2");
			oFF.QInAOptions.setLanguage(analytics2, this);
			oFF.QInAOptions.fillOptions(this.m_lastDataRequest, this.getCapabilitiesBase(), this.getSession(), this.getInitSettings());
		}
		this.enableRuntimeVariables();
		if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FLEX_CLIENT_INFO) && this.getModelCapabilities().supportsFlexibleClientInfo())
		{
			oFF.QInAClientInfo.exportFlexibleClientInfo(this.m_lastDataRequest, this);
		}
		else
		{
			oFF.QInAClientInfo.exportClientInfo(this.m_lastDataRequest, this, this.getModelCapabilities().supportsClientInfo(), this.getSystemType().isTypeOf(oFF.SystemType.BW));
		}
		this.updateSortListForLanguage(this.m_lastDataRequest);
		if (!this.getConnection().getConnectionPool().isInAMergeProcessingEnabled(this.getSystemName()))
		{
			this.m_lastDataRequest = oFF.InAQueryMergeUtils.cleanTagsFromRequest(this.m_lastDataRequest, false);
		}
		return this.m_lastDataRequest;
	}
	else
	{
		throw oFF.XException.createIllegalStateException("Unknown mode");
	}
	oFF.QInAOptions.setRequestTimeZone(this.m_lastDataRequest, this);
	return this.m_lastDataRequest;
};
oFF.InAQueryManagerProvider.prototype.fillPersistedQueryAnalyticRequestStructure = function(requestStructure, requestName, withVariables, processingDirective)
{
	this.addProfileStep("fillPersistedQueryAnalyticRequestStructure");
	let exportInAData = oFF.QInAExportFactory.createForPersistedQueryData(this.getApplication(), this.getModelCapabilities());
	this.exportToInADefinition(requestStructure, requestName, withVariables, processingDirective, exportInAData, null);
};
oFF.InAQueryManagerProvider.prototype.fillPersistedQueryDataRequestStructure = function(withVariables)
{
	this.m_lastDataRequest = oFF.PrFactory.createStructure();
	let providerType = this.getInitSettings().getProviderType();
	let context = oFF.QInAConverter.lookupContextNameForProvider(providerType);
	let processingDirective = this.getProcessingDirective(providerType);
	this.fillPersistedQueryAnalyticRequestStructure(this.m_lastDataRequest, context, withVariables, processingDirective);
	oFF.QInAOptions.setRequestTimeZone(this.m_lastDataRequest, this);
	return this.m_lastDataRequest;
};
oFF.InAQueryManagerProvider.prototype.fillQueryConfigSettings = function(requestStructure)
{
	let queryServiceConfig = this.getQueryServiceConfig();
	let queryConfigElement = queryServiceConfig.serialize();
	requestStructure.put("QueryServiceConfig", queryConfigElement);
};
oFF.InAQueryManagerProvider.prototype.getCapabilitiesBase = function()
{
	if (oFF.isNull(this.m_capabilities))
	{
		this.m_capabilities = this.m_inaCapabilities.getQueryCapabilities();
	}
	return this.m_capabilities;
};
oFF.InAQueryManagerProvider.prototype.getDataAreas = function()
{
	let systemType = this.getSystemType();
	if (!systemType.isTypeOf(oFF.SystemType.BW))
	{
		return null;
	}
	let queryModel = this.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return null;
	}
	let dataAreaState = oFF.PlanningStateHandler.getDataAreaStateByName(this.getApplication(), this.getSystemName(), queryModel.getDataArea());
	if (oFF.isNull(dataAreaState))
	{
		return null;
	}
	if (dataAreaState.isSubmitted())
	{
		return null;
	}
	let list = oFF.PrFactory.createList();
	list.add(dataAreaState.serializeToJson());
	return list;
};
oFF.InAQueryManagerProvider.prototype.getDataRequest = function()
{
	if (oFF.isNull(this.m_lastDataRequest) && this.getMode() !== oFF.QueryManagerMode.RAW_QUERY)
	{
		this.fillDataRequestStructure(true);
	}
	return this.m_lastDataRequest;
};
oFF.InAQueryManagerProvider.prototype.getDataRequestAsString = function()
{
	let dataRequest = this.getDataRequest();
	return oFF.isNull(dataRequest) ? null : dataRequest.toString();
};
oFF.InAQueryManagerProvider.prototype.getDeserializationImporter = function()
{
	return this.m_importer;
};
oFF.InAQueryManagerProvider.prototype.getDeserializationStructure = function()
{
	return this.m_deserializationStructure;
};
oFF.InAQueryManagerProvider.prototype.getInaCapabilities = function()
{
	return this.m_inaCapabilities;
};
oFF.InAQueryManagerProvider.prototype.getMainCapabilities = function()
{
	return this.m_inaCapabilities.getActiveCapabilities();
};
oFF.InAQueryManagerProvider.prototype.getMessageManager = function()
{
	return this;
};
oFF.InAQueryManagerProvider.prototype.getMetadataStateBeforeVarScreen = function()
{
	return this.m_savedMetadataStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.getNewResultsetContainer = function()
{
	return this.getResultsetContainer(true);
};
oFF.InAQueryManagerProvider.prototype.getPlanningModeEffective = function()
{
	if (!this.isDataEntryEnabled())
	{
		return null;
	}
	let currentSystemtype = this.getSystemType();
	if (!currentSystemtype.isTypeOf(oFF.SystemType.HANA))
	{
		return null;
	}
	let planningMode = this.getPlanningMode();
	if (planningMode === oFF.PlanningMode.SERVER_DEFAULT)
	{
		return null;
	}
	if (oFF.isNull(planningMode))
	{
		return oFF.PlanningMode.DISABLE_PLANNING;
	}
	return planningMode;
};
oFF.InAQueryManagerProvider.prototype.getProcessingDirective = function(providerType)
{
	if (providerType !== oFF.ProviderType.PLANNING && this.getVariableProcessorState() === oFF.VariableProcessorState.VALUE_HELP)
	{
		return oFF.ProcessingStep.VARIABLE_DEFINITION;
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.getProviderTypeProx = function()
{
	return this.getInitSettings().getProviderType();
};
oFF.InAQueryManagerProvider.prototype.getQueryManagerProvider = function()
{
	return this;
};
oFF.InAQueryManagerProvider.prototype.getRequestLanguage = function()
{
	let language = this.getConnection().getSystemDescription().getLanguage();
	if (oFF.XStringUtils.isNullOrEmpty(language))
	{
		let userProfile = this.getProcess().getUserProfile();
		if (oFF.notNull(userProfile))
		{
			language = userProfile.getDataAccessLanguage();
		}
	}
	return language;
};
oFF.InAQueryManagerProvider.prototype.getResourceDetailsFromResourceIdentifier = function(resourceKey)
{
	if (!this.m_listOfRequestedResources.contains(resourceKey))
	{
		this.m_listOfRequestedResources.add(resourceKey);
		return this.getOlapEnv().useBLOBDetailsForResourceId(resourceKey);
	}
	return this.getOlapEnv().getBLOBDetailsForResourceId(resourceKey);
};
oFF.InAQueryManagerProvider.prototype.getResourcePath = function()
{
	return this.m_processingImageRequest;
};
oFF.InAQueryManagerProvider.prototype.getResultSetProviderFactory = function()
{
	return this;
};
oFF.InAQueryManagerProvider.prototype.getRriTargetManager = function()
{
	if (oFF.isNull(this.m_rriTargetManager) && this.getModelCapabilities().supportsReportReportInterface())
	{
		this.m_rriTargetManager = oFF.QRriTargetManager.create(this);
	}
	return this.m_rriTargetManager;
};
oFF.InAQueryManagerProvider.prototype.getStateBeforeVarScreen = function()
{
	return this.m_savedStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.getValueHelpProvider = function()
{
	if (oFF.isNull(this.m_valueHelpProvider))
	{
		this.m_valueHelpProvider = oFF.InAQueryValueHelpProvider.create(this);
	}
	return this.m_valueHelpProvider;
};
oFF.InAQueryManagerProvider.prototype.getVariableBaseAt = function(index)
{
	this.assertLifeCycleActive();
	let variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	return variableManagerBase.getVariableBaseAt(index);
};
oFF.InAQueryManagerProvider.prototype.getVariableBaseByName = function(name)
{
	this.assertLifeCycleActive();
	let variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	return variableManagerBase.getVariableBaseByName(name);
};
oFF.InAQueryManagerProvider.prototype.getVariableProcessorProvider = function()
{
	return this;
};
oFF.InAQueryManagerProvider.prototype.getVariableVariantByName = function(variableVariantName)
{
	return this.getVariableVariantsInternal().getByKey(variableVariantName);
};
oFF.InAQueryManagerProvider.prototype.getVariableVariants = function()
{
	return this.getVariableVariantsInternal();
};
oFF.InAQueryManagerProvider.prototype.getVariableVariantsInternal = function()
{
	let systemContainer = this.getOlapEnv().getSystemContainer(this.getSystemName());
	return systemContainer.getVariantsByDatasource(this.getDataSource().getFullQualifiedName());
};
oFF.InAQueryManagerProvider.prototype.getVariablesExporter = function()
{
	return this.m_exportData;
};
oFF.InAQueryManagerProvider.prototype.getVariablesImporter = function()
{
	return this.m_importMetaData;
};
oFF.InAQueryManagerProvider.prototype.importQuerySettings = function(inaDefinition)
{
	this.importRSFeatureRequest(inaDefinition);
	oFF.QInAOptions.importOptimizerHints(inaDefinition, this);
};
oFF.InAQueryManagerProvider.prototype.importRSFeatureRequest = function(definition)
{
	let rsFeatureRequest = definition.getStructureByKey("ResultSetFeatureRequest");
	oFF.QInAOptions.importPaging(rsFeatureRequest, this);
	oFF.QInAOptions.importSuppressKeyfigureCalculation(rsFeatureRequest, this);
	oFF.QInAOptions.importReturnedDataSelections(false, rsFeatureRequest, this);
};
oFF.InAQueryManagerProvider.prototype.importVariables = oFF.noSupport;
oFF.InAQueryManagerProvider.prototype.isApplyingRepoState = function()
{
	return this.m_applyRepoState;
};
oFF.InAQueryManagerProvider.prototype.isCurrentInstanceIdPresentInMergedDoc = function(instanceId)
{
	let connectionContainer = this.getConnection();
	let connectionPool = connectionContainer.getConnectionPool();
	let inaMergeProcessor = connectionPool.getInAMergeProcessor();
	let currentMergedDoc = inaMergeProcessor.getMergedPersistResponse(this.getSystemName());
	let instanceIdFound = false;
	for (let i = 0; i < currentMergedDoc.size() && !instanceIdFound; i++)
	{
		let currentBunch = currentMergedDoc.get(i);
		instanceIdFound = oFF.XStream.of(currentBunch.getListByKey(oFF.InAQueryMergeConstants.TAG_MERGE_QUERY_RESPONSE_RECEPIENTS)).find((req) => {
			let recepientReq = req;
			let currentInstanceId = recepientReq.getStructureByKey("Analytics").getStructureByKey("DataSource").getStringByKey("InstanceId");
			return oFF.XString.isEqual(instanceId, currentInstanceId);
		}).isPresent();
	}
	return instanceIdFound;
};
oFF.InAQueryManagerProvider.prototype.isDirectVariableTransfer = function()
{
	return this.m_directVariableTransfer;
};
oFF.InAQueryManagerProvider.prototype.isForRendering = function()
{
	let initSettings = this.getInitSettings();
	return initSettings.getMode() === oFF.QueryManagerMode.RAW_QUERY && initSettings.getDefinitionType() === oFF.QModelFormat.INA_CLONE_RENDERING;
};
oFF.InAQueryManagerProvider.prototype.isIncludePerformanceNotDefault = function()
{
	return this.m_includePerformanceData !== oFF.TriStateBool._DEFAULT;
};
oFF.InAQueryManagerProvider.prototype.isPersistedPreQuery = function()
{
	return this.getPreQueryName() !== null && this.getResultSetPersistenceIdentifier() !== null;
};
oFF.InAQueryManagerProvider.prototype.isServiceConfigMatching = function(serviceConfig, connection, messages)
{
	let ok;
	let serverMetadata = connection.getSystemConnect().getServerMetadata();
	if (oFF.isNull(serverMetadata))
	{
		messages.addErrorExt(oFF.OriginLayer.DRIVER, oFF.ErrorCodes.SERVER_METADATA_NOT_FOUND, "Server metadata not available", null);
		ok = false;
	}
	else
	{
		let initSettings = serviceConfig;
		let capabilities = oFF.InACapabilitiesProvider.create(connection.getSession(), serverMetadata, initSettings.getProviderType(), null);
		ok = capabilities.getServerMainCapabilities() !== null;
	}
	return ok;
};
oFF.InAQueryManagerProvider.prototype.isUpdatingDataRequestCapabilities = function()
{
	return this.m_updateRuntimeCapabilities;
};
oFF.InAQueryManagerProvider.prototype.isValidInAForMergeProcessing = function(requestStructure)
{
	let isValidInAForMergeProcessing = false;
	if (oFF.notNull(requestStructure))
	{
		let requestStructureString = requestStructure.getStringRepresentation();
		let queryType = oFF.InAQueryMergeUtils.getQueryType(requestStructure);
		let analyticsStructure = oFF.PrUtilsJsonPath.getFirstElementFromPath(requestStructure, oFF.InAQueryMergeConstants.PA_ANALYTICS_SERVICE_TYPE_PATH);
		if (oFF.notNull(analyticsStructure) && (oFF.XString.isEqual(queryType, oFF.InAQueryMergeConstants.QY_QUERY) || oFF.XString.isEqual(queryType, oFF.InAQueryMergeConstants.QY_VIEW) || oFF.XString.isEqual(queryType, oFF.InAQueryMergeConstants.QY_PLANNING) || oFF.XString.isEqual(queryType, oFF.InAQueryMergeConstants.QY_QUERY_VALUE_HELP) || oFF.XString.isEqual(queryType, oFF.InAQueryMergeConstants.QY_QUERY_INA_MODEL)) && !oFF.XString.containsString(requestStructureString, oFF.InAQueryMergeConstants.QY_PROCESSING_DIRECTIVES) && !oFF.XString.containsString(requestStructureString, oFF.InAQueryMergeConstants.QY_PROCESSING_STEP))
		{
			isValidInAForMergeProcessing = true;
		}
		if (this.isShallow())
		{
			let dataSourceStructure = oFF.PrUtilsJsonPath.getFirstElementFromPath(requestStructure, oFF.InAQueryMergeConstants.PA_DATASOURCE_PATH);
			let instanceId = dataSourceStructure.getStringByKey("InstanceId");
			isValidInAForMergeProcessing = this.isCurrentInstanceIdPresentInMergedDoc(instanceId);
		}
	}
	return isValidInAForMergeProcessing;
};
oFF.InAQueryManagerProvider.prototype.isVariableSubmitNeeded = function()
{
	return this.m_isVariableSubmitNeeded;
};
oFF.InAQueryManagerProvider.prototype.isVariableValuesRuntimeNeeded = function()
{
	return this.getSystemType().isTypeOf(oFF.SystemType.BW);
};
oFF.InAQueryManagerProvider.prototype.loadQueryModel = function(syncType, listener, customIdentifier)
{
	if (this.isShallow())
	{
		return this.processModelInitialization(syncType, listener, customIdentifier);
	}
	if (oFF.notNull(listener))
	{
		listener.onQueryModelInitialized(this.getQueryServiceConfig(), this, customIdentifier);
	}
	return this.getQueryServiceConfig();
};
oFF.InAQueryManagerProvider.prototype.newObject = function()
{
	return new oFF.InAQueryManagerProvider();
};
oFF.InAQueryManagerProvider.prototype.onQueryModelInitialized = function(extResult, queryManager, customIdentifier)
{
	if (!extResult.hasErrors())
	{
		if (this.m_applyRepoState)
		{
			this.applyRSFeatureRequest();
		}
		if (oFF.notNull(this.m_listenerForQueryModelReady))
		{
			this.m_listenerForQueryModelReady.onQueryModelInitialized(extResult, this, customIdentifier);
		}
	}
};
oFF.InAQueryManagerProvider.prototype.prepareExperimentalCapabilities = function()
{
	let serverMetadata = this.getConnection().getSystemConnect().getServerMetadata();
	let providerType = this.getInitSettings().getProviderType();
	let session = this.getSession();
	this.m_inaCapabilities = oFF.InACapabilitiesProvider.create(session, serverMetadata, providerType, null);
	let associatedValueHelp = providerType.getAssociatedValueHelp();
	this.m_inaCapabilitiesValueHelp = oFF.InACapabilitiesProvider.create(session, serverMetadata, associatedValueHelp, null);
	let featureToggles = session.getFeatureToggles();
	if (this.isShallow())
	{
		featureToggles = this.extractFeatureTogglesFromRequest();
	}
	this.m_inaCapabilities.activateDevCapabilities(featureToggles.getKeysAsReadOnlyList());
};
oFF.InAQueryManagerProvider.prototype.prepareMergeCandidate = function()
{
	let requestStructure = this.serializeToElement(oFF.QModelFormat.INA_DATA_MERGE_PROCESSING);
	let ocpFunction = this.createFunction();
	let request = ocpFunction.getRpcRequest();
	request.setRequestStructure(requestStructure);
	this.collectInAMergeAndBatchFunctions(ocpFunction);
	let queryModel = this.getQueryModelBase();
	queryModel.generateTransientObjects();
	let preQueries = this.getQueryModel().getPreQueries();
	oFF.XStream.of(preQueries).forEach((preQueryEntry) => {
		let preQueryModel = preQueryEntry.getObject();
		let preQueryManager = preQueryModel.getQueryManager();
		preQueryManager.setResultSetTransportEnabled(false);
		preQueryManager.setPreQueryName(preQueryEntry.getName());
		preQueryManager.prepareMergeCandidate();
	});
	queryModel.destroyTransientObjects();
};
oFF.InAQueryManagerProvider.prototype.processActivateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVarAction.createAndRunVariantActivation(this, variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processBLOB = function(syncType, listener, customIdentifier, imagePath)
{
	if (oFF.XStringUtils.isNullOrEmpty(imagePath))
	{
		let rsContainer = oFF.BLOBContainer.createBLOBContainer(this.getQueryManager(), null);
		rsContainer.addError(oFF.ErrorCodes.INVALID_FIELD, "No Image path specified");
		if (oFF.notNull(listener))
		{
			listener.onBLOBAvailable(rsContainer, rsContainer, customIdentifier);
		}
		return rsContainer;
	}
	let connection = this.getConnection();
	if (!connection.supportsWebServiceForBLOBObjects())
	{
		this.getActiveResultSetContainer().addError(oFF.ErrorCodes.INVALID_SYSTEM, "No Support for retrieving BLOBs.");
		let container = oFF.BLOBContainer.createBLOBContainer(this, null);
		if (oFF.notNull(listener))
		{
			listener.onBLOBAvailable(container, container, customIdentifier);
		}
		return container;
	}
	this.m_processingImageRequest = imagePath;
	if (this.getOlapEnv().hasBLOBForResourceId(imagePath))
	{
		let blobContainer = oFF.BLOBContainer.createBLOBContainer(this, null);
		if (oFF.notNull(listener))
		{
			listener.onBLOBAvailable(blobContainer, blobContainer, customIdentifier);
		}
		this.m_processingImageRequest = null;
		return blobContainer;
	}
	this.m_listOfRequestedResources.add(imagePath);
	let rsContainerImage = oFF.BLOBContainer.createBLOBContainer(this, this.createFunction());
	let response = rsContainerImage.processExecution(syncType, listener, customIdentifier);
	this.m_processingImageRequest = null;
	return response;
};
oFF.InAQueryManagerProvider.prototype.processCheckVariables = function(syncType, listener, customIdentifier)
{
	oFF.XBooleanUtils.checkTrue(this.supportsCheckVariables(), "Check variables is not supported");
	return oFF.InAQMgrVarAction.createAndRunCheck(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processDeleteVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVarAction.createAndRunVariantDeletion(this, variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processEmptyVariableDefinition = function(syncType, listener, customIdentifier)
{
	this.assertNotDirectValueTransfer();
	return oFF.InAQMgrVarAction.createAndRunEmptyVariableDefinition(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processInitialization = function(syncType, listener, customIdentifier)
{
	this.setupValues();
	let runningAction = oFF.InAQMgrStartupAction.createServiceInitAndRun(syncType, listener, customIdentifier, this, this);
	this.setupRuntimeQuery();
	return runningAction;
};
oFF.InAQueryManagerProvider.prototype.processModelInitialization = function(syncType, listener, customIdentifier)
{
	if (this.getMode() === oFF.QueryManagerMode.RAW_QUERY)
	{
		this.setMode(oFF.QueryManagerMode.DEFAULT);
	}
	this.getNewResultsetContainer();
	return oFF.InAQMgrStartupAction.createMetadataInitAndRun(syncType, listener, customIdentifier, this, this);
};
oFF.InAQueryManagerProvider.prototype.processModelInitializationAndApplyRepoState = function(syncType, listener, customIdentifier, repoState)
{
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FUSION_SERVICE))
	{
		throw oFF.XException.createRuntimeException("This call is incompatible with fusion. Create a new query service config instead");
	}
	this.m_listenerForQueryModelReady = listener;
	this.m_applyRepoState = true;
	if (this.isShallow())
	{
		this.m_importer.m_mode = oFF.QModelFormat.INA_REPOSITORY;
		let jsonParser = oFF.JsonParserFactory.newInstance();
		this.m_deserializationStructure = jsonParser.parse(repoState);
		if (jsonParser.hasErrors())
		{
			throw oFF.XException.createRuntimeException("Error parsing the Repository state of the QueryModel");
		}
		oFF.XObjectExt.release(jsonParser);
		let inADataSource = this.extractInADataSource();
		if (oFF.notNull(inADataSource))
		{
			if (oFF.XString.isEqual(oFF.QueryManagerMode.BLENDING.getName(), inADataSource.getStringByKey("Type")))
			{
				this.considerBlendingFlow(inADataSource);
			}
		}
		let modelInitialization = this.processModelInitialization(syncType, this, customIdentifier);
		return modelInitialization;
	}
	let deserializeExt = this.getQueryModel().deserializeExt(oFF.QModelFormat.INA_REPOSITORY, repoState);
	let extResult = oFF.ExtResult.create(this, deserializeExt);
	if (oFF.notNull(this.m_listenerForQueryModelReady))
	{
		this.m_listenerForQueryModelReady.onQueryModelInitialized(extResult, this, customIdentifier);
	}
	return oFF.SyncActionExtRes.createSyncAction(this, extResult);
};
oFF.InAQueryManagerProvider.prototype.processProviderCancelThreads = function(syncType, listener, customIdentifier)
{
	if (this.getCapabilitiesBase().supportsCancelRunningQueries())
	{
		return oFF.InAQMgrCancelThreadsAction.createAndRun(syncType, listener, customIdentifier, this);
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.processProviderClearCache = function(syncType, listener, customIdentifier, timestamp)
{
	if (this.getCapabilitiesBase().supportsProviderClearCache())
	{
		return oFF.InAQMgrClearCacheAction.createAndRun(syncType, listener, customIdentifier, this, timestamp);
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.processProviderShutdown = function(syncType, listener, customIdentifier)
{
	return oFF.InAQMgrShutdownAction.createAndRun(syncType, listener, customIdentifier, this);
};
oFF.InAQueryManagerProvider.prototype.processReInitVariableAfterSubmit = function(syncType, listener, customIdentifier)
{
	if (this.isDirectVariableTransferEnabled() || !this.hasVariables() && !this.supportsAndAllowsEmptyExtendedVarDefinition())
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	return oFF.InAQMgrVarAction.createAndRunReInitAfterSubmit(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processResetExitOrDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	this.getConvenienceCommands().processResetExitOrDynamicVariable(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
};
oFF.InAQueryManagerProvider.prototype.processRetrieveVariableRuntimeInformation = function(syncType, listener, customIdentifier)
{
	this.assertNotDirectValueTransfer();
	return oFF.InAQMgrVarAction.createAndRunGetRuntimeInfo(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processRriTargetDetails = function(syncType, identifier, targetKey, queryPattern, minimizeResultSetPayload)
{
	return oFF.InAQRriTargetDetailsAction.createAndRun(syncType, this, identifier, targetKey, queryPattern, minimizeResultSetPayload);
};
oFF.InAQueryManagerProvider.prototype.processRriTargetSync = function(syncType, identifier, targetTypes, restrictOnSupported, minimizeResultSetPayload)
{
	return oFF.InAQRriTargetsSyncAction.createAndRun(syncType, this, identifier, targetTypes, restrictOnSupported, minimizeResultSetPayload);
};
oFF.InAQueryManagerProvider.prototype.processSaveVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVariantModifyAction.createAndRunModification(this, variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processSetGetVariableValues = function(syncType, listener, customIdentifier)
{
	this.assertNotDirectValueTransfer();
	return oFF.InAQMgrVarAction.createAndRunSetGetValues(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processUpdateDynamicVariables = function(syncType, listener, customIdentifier)
{
	this.getConvenienceCommands().updateDynamicVariables(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processUpdateRuntimeBlendQueryFromDependentQueries = function(systemToDependentQueriesMap, syncType, listener, customIdentifier)
{
	let metadataSerializedQueryAction = oFF.RuntimeRemoteBlendingQueryUpdaterAction.create(systemToDependentQueriesMap, this);
	return metadataSerializedQueryAction.processSyncAction(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processUpdateVariableVariantValues = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.InAQMgrVarAction.createAndRunVariantUpdate(this, variableVariant, false, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processVariableCancel = function(syncType, listener, customIdentifier)
{
	if (this.isDirectVariableTransferEnabled() || !this.hasVariables() && !this.supportsAndAllowsEmptyExtendedVarDefinition())
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	return oFF.InAQMgrVarAction.createAndRunCancel(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.processVariableSubmit = function(syncType, listener, customIdentifier)
{
	if (this.isDirectVariableTransferEnabled() || !this.hasVariables() && !this.supportsAndAllowsEmptyExtendedVarDefinition())
	{
		return oFF.OlapVarImmediateCallback.createAndRun(syncType, listener, customIdentifier);
	}
	return oFF.InAQMgrVarAction.createAndRunSubmit(this, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.recordState = function()
{
	return this.m_stateManager.recordState();
};
oFF.InAQueryManagerProvider.prototype.recordStateOfQueryManager = function(requestStructure)
{
	this.m_recordingQueryManagerState = true;
	this.fillAnalyticRequestStructure(requestStructure, "Analytics", true, null, null);
	this.fillQueryConfigSettings(requestStructure);
	requestStructure.putString("Name", this.getName());
	this.m_recordingQueryManagerState = false;
};
oFF.InAQueryManagerProvider.prototype.recordingStateOfQueryManager = function()
{
	return this.m_recordingQueryManagerState;
};
oFF.InAQueryManagerProvider.prototype.releaseObjectInternal = function()
{
	this.m_importMetaData = oFF.XObjectExt.release(this.m_importMetaData);
	this.m_importer = oFF.XObjectExt.release(this.m_importer);
	this.m_exportData = oFF.XObjectExt.release(this.m_exportData);
	this.m_capabilities = oFF.XObjectExt.release(this.m_capabilities);
	this.m_lastDataRequest = oFF.XObjectExt.release(this.m_lastDataRequest);
	this.m_inaCapabilitiesValueHelp = oFF.XObjectExt.release(this.m_inaCapabilitiesValueHelp);
	this.m_rriTargetManager = oFF.XObjectExt.release(this.m_rriTargetManager);
	this.m_deserializationStructure = null;
	this.m_savedStateBeforeVarScreen = null;
	this.m_savedMetadataStateBeforeVarScreen = null;
	let environment = this.getOlapEnv();
	if (oFF.XCollectionUtils.hasElements(this.m_listOfRequestedResources))
	{
		for (let i = 0; i < this.m_listOfRequestedResources.size(); i++)
		{
			environment.releaseResource(this.m_listOfRequestedResources.get(i));
		}
	}
	this.m_listOfRequestedResources = oFF.XObjectExt.release(this.m_listOfRequestedResources);
	if (oFF.notNull(this.m_valueHelpProvider))
	{
		this.m_valueHelpProvider = oFF.XObject.castFromNative(this.m_valueHelpProvider);
	}
	oFF.QueryManager.prototype.releaseObjectInternal.call( this );
	this.m_inaCapabilities = null;
	this.m_stateManager = oFF.XObjectExt.release(this.m_stateManager);
	this.m_listenerForQueryModelReady = null;
	this.m_inaRequestStructure = oFF.XObjectExt.release(this.m_inaRequestStructure);
};
oFF.InAQueryManagerProvider.prototype.removeVariable = function(name)
{
	this.assertLifeCycleActive();
	let variableManagerBase = this.getQueryModelBase().getVariableManagerBase();
	variableManagerBase.removeVariable(name);
};
oFF.InAQueryManagerProvider.prototype.removeVariableVariant = function(variant)
{
	this.getVariableVariantsInternal().removeElement(variant);
};
oFF.InAQueryManagerProvider.prototype.resetExitOrUpdateDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	this.processResetExitOrDynamicVariable(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
};
oFF.InAQueryManagerProvider.prototype.saveVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	if (!this.supportsMaintainsVariableVariants())
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Modifying variants is not supported", syncType, listener, customIdentifier);
	}
	return this.processSaveVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.serializeToContentExt = function(modelFormat, capabilities)
{
	let content;
	if (this.getLovManager() !== null && this.getLovManager().isLovAbstractionEnabled() && modelFormat.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		return this.getLovManager().serializeToContentExt(modelFormat, capabilities);
	}
	if (modelFormat.isTypeOf(oFF.QModelFormat.INA_REPOSITORY))
	{
		content = oFF.QueryManager.prototype.serializeToContentExt.call( this , modelFormat, capabilities);
	}
	else
	{
		let queryModel = this.getQueryModelBase();
		queryModel.generateTransientObjects();
		this.checkRootNodeFetching();
		let inaStructure = oFF.PrFactory.createStructure();
		let preQueries = this.getResultSetPersistenceIdentifier() !== null ? null : oFF.QueryModelUtils.getPreQueries(queryModel);
		if (oFF.XCollectionUtils.hasElements(preQueries) && modelFormat !== oFF.QModelFormat.INA_DATA_MERGE_PROCESSING)
		{
			let inaBatch = inaStructure.putNewList(oFF.ConnectionConstants.INA_BATCH);
			this.dealWithPreQuery(preQueries, inaBatch, modelFormat);
			if (modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA)
			{
				inaBatch.add(this.fillPersistedQueryDataRequestStructure(true));
			}
			else
			{
				inaBatch.add(this.fillDataRequestStructure(true));
			}
			queryModel.destroyTransientObjects();
		}
		else
		{
			if (queryModel.getDataSource().getType() === oFF.MetaObjectType.BLENDING)
			{
				let blendingSources = queryModel.getBlendingSources();
				let numberOfBlendingSources = blendingSources.size();
				let inaBlendingBatch = null;
				for (let i = 0; i < numberOfBlendingSources; i++)
				{
					let blendingSource = blendingSources.get(i);
					let blendingSourcePreQueries = blendingSource.getQueryModel().getPreQueries();
					if (oFF.XCollectionUtils.hasElements(blendingSourcePreQueries))
					{
						inaBlendingBatch = inaStructure.putNewList(oFF.ConnectionConstants.INA_BATCH);
						this.dealWithPreQuery(blendingSourcePreQueries, inaBlendingBatch, modelFormat);
					}
				}
				let isBlendingBatch = oFF.notNull(inaBlendingBatch);
				if (isBlendingBatch)
				{
					inaStructure.getListByKey(oFF.ConnectionConstants.INA_BATCH).add(modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA ? this.fillPersistedQueryDataRequestStructure(true) : this.fillDataRequestStructure(true));
					queryModel.destroyTransientObjects();
				}
				else
				{
					inaStructure = null;
				}
			}
			else
			{
				inaStructure = null;
			}
			if (oFF.isNull(inaStructure))
			{
				inaStructure = modelFormat === oFF.QModelFormat.INA_PERSISTED_QUERY_DATA ? this.fillPersistedQueryDataRequestStructure(true) : this.fillDataRequestStructure(true);
				queryModel.destroyTransientObjects();
			}
		}
		content = oFF.XContent.createJsonObjectContent(modelFormat, inaStructure);
	}
	return content;
};
oFF.InAQueryManagerProvider.prototype.setActiveResultSetContainer = function(activeResultSetContainer)
{
	if (this.getActiveResultSetContainer() !== activeResultSetContainer)
	{
		this.m_lastDataRequest = null;
		if (oFF.notNull(activeResultSetContainer))
		{
			oFF.XObjectExt.release(activeResultSetContainer.getRequest());
		}
	}
	oFF.QueryManager.prototype.setActiveResultSetContainer.call( this , activeResultSetContainer);
};
oFF.InAQueryManagerProvider.prototype.setDeserializationStructureAsNull = function()
{
	this.m_deserializationStructure = null;
};
oFF.InAQueryManagerProvider.prototype.setDirectVariableTransfer = function(directVariableTransfer)
{
	this.m_directVariableTransfer = directVariableTransfer;
};
oFF.InAQueryManagerProvider.prototype.setInnerStructure = function(requestStructure, name, processingDirective, _export)
{
	let exporter = oFF.notNull(_export) ? _export : this.m_exportData;
	let dataAreas = this.getDataAreas();
	if (oFF.notNull(dataAreas))
	{
		requestStructure.put("DataAreas", dataAreas);
	}
	oFF.QInAOptions.fillOptions(requestStructure, this.getCapabilitiesBase(), this.getSession(), this.getInitSettings());
	let innerRequestStructure = requestStructure.putNewStructure(name);
	let dataSourceRequestStructure;
	let queryModel = this.getQueryModel();
	let exportActiveMainCapabilities = this.m_recordingQueryManagerState ? null : this.m_inaCapabilities.exportActiveCapabilitiesAsList();
	if (oFF.XString.isEqual("Metadata", name))
	{
		oFF.QInAMdDataSource.exportMd(exporter, innerRequestStructure, queryModel);
		innerRequestStructure.put("Expand", oFF.QInAExpand.createExpandMetadata(this));
	}
	else
	{
		if (oFF.notNull(queryModel) && queryModel.hasExplainQueryContext())
		{
			let inaExplainQueryContext = innerRequestStructure.putNewStructure("ExplainQueryContext");
			let explainQueryContext = queryModel.getExplainQueryContext();
			inaExplainQueryContext.putInteger("Row", explainQueryContext.getRowIndex());
			inaExplainQueryContext.putInteger("Column", explainQueryContext.getColumnIndex());
		}
		oFF.QInAOptions.setRequestTimeZone(requestStructure, this);
		if (this.isPersistedPreQuery())
		{
			let localSystemDescription = this.getConnection().getSystemDescription();
			oFF.QInADataSourceBlending.updateRemoteDataSource(innerRequestStructure, this, true, localSystemDescription);
			oFF.XCollectionUtils.removeIf(exportActiveMainCapabilities, (element) => {
				return oFF.XString.isEqual(element.asString().getString(), oFF.InACapabilities.C121_RETURN_ERROR_FOR_INVALID_QUERYMODEL);
			});
		}
		else if (!this.m_recordingQueryManagerState)
		{
			let inaDatasource = exporter.exportDataSource(queryModel.getDataSource(), this.getCapabilitiesBase().supportsRunAsUser());
			if (this.getProviderType() === oFF.ProviderType.PLANNING_VALUE_HELP)
			{
				dataSourceRequestStructure = innerRequestStructure.putNewStructure("Command");
			}
			else
			{
				dataSourceRequestStructure = innerRequestStructure;
			}
			dataSourceRequestStructure.put("DataSource", inaDatasource);
		}
		if (processingDirective === oFF.ProcessingStep.VARIABLE_SUBMIT)
		{
			innerRequestStructure.putIfNotNull("Expand", oFF.QInAExpand.createExpandSubmit(this, this.m_noVariableSubmitResponse));
		}
	}
	if (oFF.notNull(exportActiveMainCapabilities))
	{
		innerRequestStructure.put("Capabilities", exportActiveMainCapabilities);
	}
	if (!this.getQueryManager().isDirectVariableTransferEnabled())
	{
		let startVariables = this.getInitSettings().getStartVariables();
		if (oFF.XCollectionUtils.hasElements(startVariables) && startVariables.containsKey("Variables"))
		{
			innerRequestStructure.put("Variables", startVariables.getByKey("Variables"));
		}
	}
	oFF.QInAOptions.setLanguage(innerRequestStructure, this);
	return innerRequestStructure;
};
oFF.InAQueryManagerProvider.prototype.setIsVariableSubmitNeeded = function(submit)
{
	this.m_isVariableSubmitNeeded = submit;
};
oFF.InAQueryManagerProvider.prototype.setMetadataStateBeforeVarScreen = function(savedMetadataStateBeforeVarScreen)
{
	this.m_savedMetadataStateBeforeVarScreen = savedMetadataStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.setNoVariableSubmitResponse = function(noVariableSubmitResponse)
{
	this.m_noVariableSubmitResponse = noVariableSubmitResponse;
};
oFF.InAQueryManagerProvider.prototype.setStateBeforeVarScreen = function(savedStateBeforeVarScreen)
{
	this.m_savedStateBeforeVarScreen = savedStateBeforeVarScreen;
};
oFF.InAQueryManagerProvider.prototype.setUpdatingDataRequestCapabilities = function(updateCapabilities)
{
	this.m_updateRuntimeCapabilities = updateCapabilities;
};
oFF.InAQueryManagerProvider.prototype.setValueHelpProvider = function(valueHelpProvider)
{
	this.m_valueHelpProvider = valueHelpProvider;
};
oFF.InAQueryManagerProvider.prototype.setVariableProcessorBase = oFF.noSupport;
oFF.InAQueryManagerProvider.prototype.setupDesignTimeMode = function()
{
	this.m_importMetaData = oFF.QInAImportFactory.createForMetadata(this.getApplication(), this.getModelCapabilities());
	this.setupQueryModel();
	let queryModel = this.getQueryModel();
	oFF.QInAMdDataSource.importMd(this.m_importMetaData, this.m_inaRequestStructure, queryModel, queryModel);
	let dataSource = queryModel.getDataSource();
	if (this.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		let blendingDefinition = this.getQueryServiceConfig().getBlendingDefinition();
		dataSource.setBlendingDefinition(blendingDefinition);
	}
	let cloneDs = dataSource.clone();
	this.setDataSource(cloneDs);
	this.getSettingsBase().setDataRequest(null);
	if (oFF.notNull(this.m_inaRequestStructure) && this.m_inaRequestStructure.containsKey("ListReporting"))
	{
		this.getSettingsBase().setProviderType(oFF.ProviderType.LIST_REPORTING);
	}
	this.activateExperimentalFeatures();
};
oFF.InAQueryManagerProvider.prototype.setupQueryModel = function()
{
	let queryModel = oFF.QueryManager.prototype.setupQueryModel.call( this );
	let application = this.getApplication();
	let modelCapabilities = queryModel.getModelCapabilities();
	this.m_importMetaData = oFF.QInAImportFactory.createForMetadata(application, modelCapabilities);
	this.m_exportData = oFF.QInAExportFactory.createForData(application, modelCapabilities);
	return queryModel;
};
oFF.InAQueryManagerProvider.prototype.setupRuntimeQuery = function()
{
	if (!this.isReleased() && this.isForRendering())
	{
		let definitionStructure = this.getInitSettings().getDefinitionAsStructure();
		this.applyStateOnQueryManager(definitionStructure);
	}
};
oFF.InAQueryManagerProvider.prototype.setupValues = function()
{
	oFF.QueryManager.prototype.setupValues.call( this );
	this.prepareExperimentalCapabilities();
	let initSettings = this.getInitSettings();
	let runtimeRawQuery = this.getMode() === oFF.QueryManagerMode.RAW_QUERY && initSettings.getDataRequest() !== null;
	this.m_updateRuntimeCapabilities = true;
	if (!runtimeRawQuery)
	{
		this.m_isVariableSubmitNeeded = true;
	}
	let dataSource = this.getDataSource();
	if (oFF.notNull(dataSource) && dataSource.getType() === oFF.MetaObjectType.CATALOG_VIEW_2 && !this.getCapabilitiesBase().supportsCatalogServiceV2())
	{
		dataSource.setType(oFF.MetaObjectType.CATALOG_VIEW);
	}
	this.setDirectVariableTransferEnabled(true);
	let definitionType = initSettings.getDefinitionType();
	if (oFF.notNull(definitionType) && definitionType !== oFF.QModelFormat.UQM)
	{
		this.m_importer = oFF.QInAImportFactory.create(this.getApplication(), definitionType, null);
		this.m_deserializationStructure = initSettings.getDefinitionAsStructure();
		if (oFF.notNull(this.m_deserializationStructure))
		{
			this.m_inaCapabilities.importDeserializationDocumentCapabilities(this.m_deserializationStructure);
			if (this.isDataSourceInitial() && this.getMode().isTypeOf(oFF.QueryManagerMode.DEFAULT))
			{
				this.setDataSource(this.m_importer.importDataSource(this.m_deserializationStructure));
			}
		}
	}
	if (!runtimeRawQuery)
	{
		this.setupQueryModel();
	}
	this.m_listOfRequestedResources = oFF.XList.create();
	this.resetMaxResultRecords();
	this.m_stateManager = oFF.QueryModelStateManager.create(this);
};
oFF.InAQueryManagerProvider.prototype.transferVariables = function(syncType, listener, customIdentifier)
{
	return this.processSetGetVariableValues(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.transferVariablesByVariable = function(variable, syncType, listener, customIdentifier)
{
	if (this.getVariables().contains(variable))
	{
		return this.processSetGetVariableValues(syncType, listener, customIdentifier);
	}
	return null;
};
oFF.InAQueryManagerProvider.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	this.getConvenienceCommands().updateDynamicVariables(syncType, listener, customIdentifier);
};
oFF.InAQueryManagerProvider.prototype.updateQueryManager = function(masterQueryManager, neededDimensions)
{
	let thisQueryModel = this.getQueryModelBase();
	let masterQueryModel = masterQueryManager.getQueryModel();
	let neededDimensionsWithoutDuplicates = oFF.XHashSetOfString.create();
	neededDimensionsWithoutDuplicates.addAll(neededDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByLeveledHierarchies(masterQueryModel, neededDimensionsWithoutDuplicates);
	let updatedListOfDimensions = neededDimensionsWithoutDuplicates.getValuesAsReadOnlyList();
	this.getDimensionsRequestedFromClient().addAll(neededDimensions);
	this.getDimensionsToClone().addAll(updatedListOfDimensions);
	let dimensionManagerBase = thisQueryModel.getDimensionManagerBase();
	for (let i = 0; i < updatedListOfDimensions.size(); i++)
	{
		let updatedDimensionName = updatedListOfDimensions.get(i);
		if (thisQueryModel.getDimensionByName(updatedDimensionName) === null)
		{
			let originalDimension = masterQueryModel.getDimensionByName(updatedDimensionName);
			if (oFF.notNull(originalDimension))
			{
				let cloneDim = originalDimension.cloneOlapComponent(thisQueryModel, dimensionManagerBase);
				thisQueryModel.addDimension(cloneDim);
				let defaultAxis = thisQueryModel.getAxis(cloneDim.getDefaultAxisType());
				defaultAxis.add(cloneDim);
				dimensionManagerBase.finalizeDimensionMetadataSetup(cloneDim);
			}
		}
	}
	this.getQueryServiceConfig().setRequiredDimensions(this.getDimensionsToClone().getValuesAsReadOnlyList());
};
oFF.InAQueryManagerProvider.prototype.updateSortForLanguage = function(analytics, language)
{
	let definition = analytics.getStructureByKey("Definition");
	let sorts = definition.getListByKey("Sort");
	oFF.XStream.of(sorts).forEach((sort) => {
		let collator = sort.getStructureByKey("Collator");
		if (oFF.notNull(collator) && collator.containsKey("Locale"))
		{
			collator.putString("Locale", language);
		}
	});
};
oFF.InAQueryManagerProvider.prototype.updateSortListForLanguage = function(lastDataRequest)
{
	let language = this.getRequestLanguage();
	let batch = lastDataRequest.getListByKey(oFF.ConnectionConstants.INA_BATCH);
	if (!oFF.PrUtils.isListEmpty(batch))
	{
		let numberOfRequestsInBatch = batch.size();
		for (let i = 0; i < numberOfRequestsInBatch; i++)
		{
			let batchContext = oFF.InARuntimeUtils.getRequestContext(batch.getStructureAt(i));
			this.updateSortForLanguage(batchContext, language);
		}
	}
	else
	{
		let analytics = oFF.InARuntimeUtils.getRequestContext(lastDataRequest);
		this.updateSortForLanguage(analytics, language);
	}
};
oFF.InAQueryManagerProvider.prototype.updateString = function(structure, name, value)
{
	if (!oFF.XString.isEqual(structure.getStringByKey(name), value))
	{
		structure.putString(name, value);
	}
};
oFF.InAQueryManagerProvider.prototype.updateVariableVariantValues = function(variableVariant, syncType, listener, customIdentifier)
{
	if (!this.supportsMaintainsVariableVariants())
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Updating variants is not supported", syncType, listener, customIdentifier);
	}
	if (variableVariant.getName() === null || variableVariant.getScope() === null)
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "Variant not valid for updating", syncType, listener, customIdentifier);
	}
	return this.processUpdateVariableVariantValues(variableVariant, syncType, listener, customIdentifier);
};

oFF.ProviderModule = function() {};
oFF.ProviderModule.prototype = new oFF.DfModule();
oFF.ProviderModule.prototype._ff_c = "ProviderModule";

oFF.ProviderModule.s_module = null;
oFF.ProviderModule.addAllComponents = function()
{
	oFF.QInA.addInAComponent(new oFF.QCsnMdQuery());
	oFF.QInA.addInAComponent(new oFF.QCsnMdDimensions());
	oFF.QInA.addInAComponent(new oFF.QCsnMdDimension());
	oFF.QInA.addInAComponent(new oFF.QCsnMdDimMembers());
	oFF.QInA.addInAComponent(new oFF.QCsnMdVariables());
	oFF.QInA.addInAComponent(new oFF.QCsnMdVariable());
	oFF.QInA.addInAComponent(new oFF.QInAMdVariableContainer());
	oFF.QInA.addInAComponent(new oFF.QInAMdVarDimMember());
	oFF.QInA.addInAComponent(new oFF.QInAMdVarSimpleType());
	oFF.QInA.addInAComponent(new oFF.QInAMdVarOptionList());
	oFF.QInA.addInAComponent(new oFF.QInAMdVarFunctional());
	oFF.QInA.addInAComponent(new oFF.QInAMdVariable());
	oFF.QInA.addInAComponent(new oFF.QInAMdBasicMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAMdField());
	oFF.QInA.addInAComponent(new oFF.QInAMdDimension());
	oFF.QInA.addInAComponent(new oFF.QInAMdSort());
	oFF.QInA.addInAComponent(new oFF.QInAMdDrillManager());
	oFF.QInA.addInAComponent(new oFF.QInAMdExceptionAggregationManager());
	oFF.QInA.addInAComponent(new oFF.QInAMdRunningAggregations());
	oFF.QInA.addInAComponent(new oFF.QInAMdUniversalDisplayHierarchies());
	oFF.QInA.addInAComponent(new oFF.QInAMdQuery());
	oFF.QInA.addInAComponent(new oFF.QInAMdGenericComponent());
	oFF.QInA.addInAComponent(new oFF.QInARepoField());
	oFF.QInA.addInAComponent(new oFF.QInARepoTotals());
	oFF.QInA.addInAComponent(new oFF.QInARepoTotalsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoSortOperation());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimension());
	oFF.QInA.addInAComponent(new oFF.QInARepoSort());
	oFF.QInA.addInAComponent(new oFF.QInARepoSortLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCellValueOperand());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCellValueOperandLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarHierNode());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarFunctional());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarDimMember());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarDimMemberLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoMembersAll());
	oFF.QInA.addInAComponent(new oFF.QInARepoMembersAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberRestricted());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberRestrictedLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberFormulaMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberBasicMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberCurrency());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberUnit());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberRunningTotal());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberParetoMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberExceptionAggregationMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberVarianceMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberExceptionAggregationMeasure());
	oFF.QInA.addInAComponent(new oFF.QInARepoMemberAbstract());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterOperation());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterOperationLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCartesianListLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterConvertedTimeCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterCartesianProduct());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterMeasureBased());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterExpression());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterExpressionLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAlgebra());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAlgebraLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterTuple());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAcrossModels());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterDynamicTimeRegularRange());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterDynamicTimeToDateRange());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterFixedTimeRange());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterFixed());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterFixedLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterVirtualDatasource());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAsymmetricVisibility());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAll());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterDynamic());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterVisibility());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterGeo());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterGeoLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterElement());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoHierarchy());
	oFF.QInA.addInAComponent(new oFF.QInARepoHierarchyManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoHierarchyLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxis());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxisLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxesSettings());
	oFF.QInA.addInAComponent(new oFF.QInARepoAxesSettingsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationItem());
	oFF.QInA.addInAComponent(new oFF.QInARepoFormulaCalculatedDimension());
	oFF.QInA.addInAComponent(new oFF.QInARepoFormulaExceptionManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoFormulaException());
	oFF.QInA.addInAComponent(new oFF.QInARepoExceptions());
	oFF.QInA.addInAComponent(new oFF.QInARepoExceptionsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionsThreshold());
	oFF.QInA.addInAComponent(new oFF.QInARepoCellContext());
	oFF.QInA.addInAComponent(new oFF.QInARepoCellContextManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionsCondition());
	oFF.QInA.addInAComponent(new oFF.QInARepoConditionsConditionLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoUniversalDisplayHierarchies());
	oFF.QInA.addInAComponent(new oFF.QInARepoQueryCells());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerDimensions());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerCurrencyTranslation());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerVariableManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoModellerMetadataProperties());
	oFF.QInA.addInAComponent(new oFF.QInARepoUnitTranslationItem());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarOptionList());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarOptionListLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVariableManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoVariableContainerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVariablesListLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarSimpleType());
	oFF.QInA.addInAComponent(new oFF.QInARepoVarSimpleTypeLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillPathElement());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillPathElementLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDrillPathOperation());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimensions());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimensionsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDimensionsAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataCell());
	oFF.QInA.addInAComponent(new oFF.QInARepoCalculatedDimension());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataCellsAll());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataCellsAllLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoQuerySettings());
	oFF.QInA.addInAComponent(new oFF.QInARepoQuerySettingsLegacy());
	oFF.QInA.addInAComponent(new oFF.QInaRepoCustomHierarchyDefinition());
	oFF.QInA.addInAComponent(new oFF.QInARepoCustomHierarchyDefinitionLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoAttribute());
	oFF.QInA.addInAComponent(new oFF.QInARepoAttributeLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoDataSource());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationManagerLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoCurrencyTranslationList());
	oFF.QInA.addInAComponent(new oFF.QInARepoTranslationsManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoUnitTranslationManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoQuery());
	oFF.QInA.addInAComponent(new oFF.QInARepoQueryLegacy());
	oFF.QInA.addInAComponent(new oFF.QInARepoServiceConfig());
	oFF.QInA.addInAComponent(new oFF.QInARepoQueryManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoBlendableQueryManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoQuickActionManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoVisualizationManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoTableDefinition());
	oFF.QInA.addInAComponent(new oFF.QInARepoTableCellReferenceScope());
	oFF.QInA.addInAComponent(new oFF.QInARepoChartStyle());
	oFF.QInA.addInAComponent(new oFF.QInARepoChartDefinition());
	oFF.QInA.addInAComponent(new oFF.QInARepoKpiDefinition());
	oFF.QInA.addInAComponent(new oFF.QInARepoVisualizationTemplateManager());
	oFF.QInA.addInAComponent(new oFF.QInARepoSimulationManager());
	oFF.QInA.addInAComponent(new oFF.QInAQuery());
	oFF.QInA.addInAComponent(new oFF.QInADimension());
	oFF.QInA.addInAComponent(new oFF.QInACalculatedDimension());
	oFF.QInA.addInAComponent(new oFF.QInASort());
	oFF.QInA.addInAComponent(new oFF.QInACurrencyTranslationManager());
	oFF.QInA.addInAComponent(new oFF.QInACurrencyTranslationListManager());
	oFF.QInA.addInAComponent(new oFF.QInACurrencyTranslationItem());
	oFF.QInA.addInAComponent(new oFF.QInATranslationsManager());
	oFF.QInA.addInAComponent(new oFF.QInAConditionManager());
	oFF.QInA.addInAComponent(new oFF.QInAConditionsCondition());
	oFF.QInA.addInAComponent(new oFF.QInAConditionsThreshold());
	oFF.QInA.addInAComponent(new oFF.QInADataSource());
	oFF.QInA.addInAComponent(new oFF.QInAQuerySettings());
	oFF.QInA.addInAComponent(new oFF.QInATotals());
	oFF.QInA.addInAComponent(new oFF.QInAAttribute());
	oFF.QInA.addInAComponent(new oFF.QInAAxesSettings());
	oFF.QInA.addInAComponent(new oFF.QInAAxis());
	oFF.QInA.addInAComponent(new oFF.QInADataCell());
	oFF.QInA.addInAComponent(new oFF.QInADataCellsAll());
	oFF.QInA.addInAComponent(new oFF.QInACellContextManager());
	oFF.QInA.addInAComponent(new oFF.QInACellContext());
	oFF.QInA.addInAComponent(new oFF.QInADrillManager());
	oFF.QInA.addInAComponent(new oFF.QInADrillManager());
	oFF.QInA.addInAComponent(new oFF.QInAUniversalDisplayHierarchies());
	oFF.QInA.addInAComponent(new oFF.QInADrillPathElement());
	oFF.QInA.addInAComponent(new oFF.QInADrillPathOperation());
	oFF.QInA.addInAComponent(new oFF.QInAField());
	oFF.QInA.addInAComponent(new oFF.QInAQueryCellsAll());
	oFF.QInA.addInAComponent(new oFF.QInAUnitTranslationManager());
	oFF.QInA.addInAComponent(new oFF.QInAUnitTranslationItem());
	oFF.QInA.addInAComponent(new oFF.QInAVariableContainer());
	oFF.QInA.addInAComponent(new oFF.QInAVariablesList());
	oFF.QInA.addInAComponent(new oFF.QInAVarSimpleType());
	oFF.QInA.addInAComponent(new oFF.QInAVarDimMember());
	oFF.QInA.addInAComponent(new oFF.QInAVarOptionList());
	oFF.QInA.addInAComponent(new oFF.QInAVarHierNode());
	oFF.QInA.addInAComponent(new oFF.QInAVarFunctional());
	oFF.QInA.addInAComponent(new oFF.QInAMember());
	oFF.QInA.addInAComponent(new oFF.QInAMembersAll());
	oFF.QInA.addInAComponent(new oFF.QInAMemberRestrictedMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAMemberBasicMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAMemberFormulaMeasure());
	oFF.QInA.addInAComponent(new oFF.QInAFilterExpression());
	oFF.QInA.addInAComponent(new oFF.QInAFilterCellValueOperand());
	oFF.QInA.addInAComponent(new oFF.QInAFilterTuple());
	oFF.QInA.addInAComponent(new oFF.QInAFilterElement());
	oFF.QInA.addInAComponent(new oFF.QInAFilterAlgebra());
	oFF.QInA.addInAComponent(new oFF.QInAFilterCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInAFilterConvertedTimeCartesianList());
	oFF.QInA.addInAComponent(new oFF.QInAFilterFixed());
	oFF.QInA.addInAComponent(new oFF.QInAFilterDynamic());
	oFF.QInA.addInAComponent(new oFF.QInAFilterVisibility());
	oFF.QInA.addInAComponent(new oFF.QInAValueHelpFilter());
	oFF.QInA.addInAComponent(new oFF.QInAFilterAll());
	oFF.QInA.addInAComponent(new oFF.QInAFilterOperation());
	oFF.QInA.addInAComponent(new oFF.QInARepoFilterDateRange());
	oFF.QInA.addInAComponent(new oFF.QInAFilterGeo());
	oFF.QInA.addInAComponent(new oFF.QInAFilterCartesianProduct());
	oFF.QInA.addInAComponent(new oFF.QInAFilterVirtualDatasource());
	oFF.QInA.addInAComponent(new oFF.QInAFilterManager());
	oFF.QInA.addInAComponent(new oFF.QInAHierarchyValueHelp());
	oFF.QInA.addInAComponent(new oFF.QInAHierarchy());
	oFF.QInA.addInAComponent(new oFF.QInACustomHierarchyDefinition());
	oFF.QInA.addInAComponent(new oFF.QInADimensionsAll());
	oFF.QInA.addInAComponent(new oFF.QInAExceptions());
	oFF.QInA.addInAComponent(new oFF.QInAGenericComponent());
	oFF.QInA.addInAComponent(new oFF.QInAChartDefinition());
	oFF.QInA.addInAComponent(new oFF.QInASimulationManager());
};
oFF.ProviderModule.getInstance = function()
{
	if (oFF.isNull(oFF.ProviderModule.s_module))
	{
		oFF.DfModule.checkInitialized(oFF.OlapSerializationModule.getInstance());
		oFF.ProviderModule.s_module = oFF.DfModule.startExt(new oFF.ProviderModule());
		let registrationService = oFF.RegistrationService.getInstance();
		oFF.QInA.staticSetup();
		oFF.QInAImportFactoryImpl.staticSetupImpl();
		oFF.QInAExportFactoryImpl.staticSetupImpl();
		oFF.DocumentsStoreServiceFactory.setInstance(oFF.DfDocumentsStoreServiceFactoryImpl.createFactory());
		oFF.PlanningStateHandler.setInstance(new oFF.PlanningStateHandlerDummyImpl());
		oFF.InAQueryManagerProvider.staticSetupProvider();
		oFF.QCsnConverter.staticSetup();
		oFF.InADocConverterSfxRepo.staticSetupInAConverter();
		oFF.InADocConverterUqmRepo.staticSetupInAConverter();
		oFF.InAFusion.staticSetup();
		oFF.InAFusionLayer.staticSetup();
		registrationService.addService(oFF.OlapApiModule.XS_QUERY_CONSUMER, oFF.InAQueryManagerProvider.CLAZZ);
		oFF.XCmdCreateQueryManager.staticSetup();
		oFF.XCmdCreateQueryManagerResult.staticSetup();
		registrationService.addCommand(oFF.CmdCreateQueryManager.CMD_NAME, oFF.XCmdCreateQueryManager.CLAZZ);
		oFF.XCmdDeserializeBlending.staticSetup();
		oFF.XCmdDeserializeBlendingResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeBlending.CMD_NAME, oFF.XCmdDeserializeBlending.CLAZZ);
		oFF.XCmdDeserializeBlendingSources.staticSetup();
		oFF.XCmdDeserializeBlendingSourcesResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeBlendingSources.CMD_NAME, oFF.XCmdDeserializeBlendingSources.CLAZZ);
		oFF.XCmdDeserializeBlendingNodes.staticSetup();
		oFF.XCmdDeserializeBlendingNodesResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeBlendingNodes.CMD_NAME, oFF.XCmdDeserializeBlendingNodes.CLAZZ);
		oFF.XCmdDeserializeCalculatedDimension.staticSetup();
		oFF.XCmdDeserializeCalculatedDimensionResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeCalculatedDimension.CMD_NAME, oFF.XCmdDeserializeCalculatedDimension.CLAZZ);
		oFF.XCmdDeserializeExtendedDimension.staticSetup();
		oFF.XCmdDeserializeExtendedDimensionResult.staticSetup();
		registrationService.addCommand(oFF.CmdDeserializeExtendedDimension.CMD_NAME, oFF.XCmdDeserializeExtendedDimension.CLAZZ);
		oFF.ProviderModule.addAllComponents();
		oFF.QInA.removeEmptyContainers();
		oFF.DfModule.stopExt(oFF.ProviderModule.s_module);
	}
	return oFF.ProviderModule.s_module;
};
oFF.ProviderModule.prototype.getName = function()
{
	return "ff4400.olap.providers";
};

oFF.ProviderModule.getInstance();

return oFF;
} );