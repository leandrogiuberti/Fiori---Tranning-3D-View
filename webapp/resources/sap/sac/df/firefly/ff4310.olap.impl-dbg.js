/*!
 * SAPUI5
    (c) Copyright 2009-2021 SAP SE. All rights reserved
  
 */
/*global sap*/
sap.ui.define(
[
"sap/sac/df/firefly/ff4250.olap.resultset","sap/sac/df/firefly/ff4305.olap.model"
],
function(oFF)
{
"use strict";

oFF.BlendableQMPersistedInAResult = function() {};
oFF.BlendableQMPersistedInAResult.prototype = new oFF.XObject();
oFF.BlendableQMPersistedInAResult.prototype._ff_c = "BlendableQMPersistedInAResult";

oFF.BlendableQMPersistedInAResult.create = function(mainQuery, dependentQueries, runtimeBlendedQueryManager, hostSystemName)
{
	let result = new oFF.BlendableQMPersistedInAResult();
	result.m_mainQuery = mainQuery;
	result.m_dependentQueries = dependentQueries;
	result.m_runtimeBlendedQueryManager = runtimeBlendedQueryManager;
	result.m_hostSystemName = hostSystemName;
	return result;
};
oFF.BlendableQMPersistedInAResult.prototype.m_dependentQueries = null;
oFF.BlendableQMPersistedInAResult.prototype.m_hostSystemName = null;
oFF.BlendableQMPersistedInAResult.prototype.m_mainQuery = null;
oFF.BlendableQMPersistedInAResult.prototype.m_runtimeBlendedQueryManager = null;
oFF.BlendableQMPersistedInAResult.prototype.getDependentQueries = function()
{
	return this.m_dependentQueries;
};
oFF.BlendableQMPersistedInAResult.prototype.getHostSystemName = function()
{
	return this.m_hostSystemName;
};
oFF.BlendableQMPersistedInAResult.prototype.getMainQuery = function()
{
	return this.m_mainQuery;
};
oFF.BlendableQMPersistedInAResult.prototype.getRuntimeBlendedQueryManager = function()
{
	return this.m_runtimeBlendedQueryManager;
};
oFF.BlendableQMPersistedInAResult.prototype.releaseObject = function()
{
	this.m_mainQuery = null;
	this.m_dependentQueries = null;
	this.m_runtimeBlendedQueryManager = null;
};

oFF.BlendedDrillPathElementInfo = function() {};
oFF.BlendedDrillPathElementInfo.prototype = new oFF.XObject();
oFF.BlendedDrillPathElementInfo.prototype._ff_c = "BlendedDrillPathElementInfo";

oFF.BlendedDrillPathElementInfo._createBlendedDrillPathElementInfo = function()
{
	let blendedDrillPathElementInfo = new oFF.BlendedDrillPathElementInfo();
	return blendedDrillPathElementInfo;
};
oFF.BlendedDrillPathElementInfo.createBlendedDrillPathElementInfo = function(datasetId, dimensionName, selectValue)
{
	let blendedDrillPathElementInfo = new oFF.BlendedDrillPathElementInfo();
	blendedDrillPathElementInfo.m_datasetId = datasetId;
	blendedDrillPathElementInfo.m_dimensionName = dimensionName;
	blendedDrillPathElementInfo.m_drillMember = selectValue;
	return blendedDrillPathElementInfo;
};
oFF.BlendedDrillPathElementInfo.prototype.m_datasetId = null;
oFF.BlendedDrillPathElementInfo.prototype.m_dimensionName = null;
oFF.BlendedDrillPathElementInfo.prototype.m_drillMember = null;
oFF.BlendedDrillPathElementInfo.prototype.cloneExt = function(flags)
{
	let copyBlendedDrillPathElementInfo = oFF.BlendedDrillPathElementInfo._createBlendedDrillPathElementInfo();
	copyBlendedDrillPathElementInfo.copyFrom(this, flags);
	return copyBlendedDrillPathElementInfo;
};
oFF.BlendedDrillPathElementInfo.prototype.copyFrom = function(other, flags)
{
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
	let otherBlendedDrillPathElementInfo = other;
	this.m_datasetId = otherBlendedDrillPathElementInfo.getDatasetId();
	this.m_dimensionName = otherBlendedDrillPathElementInfo.getDimensionName();
	this.m_drillMember = otherBlendedDrillPathElementInfo.getDrillMember();
};
oFF.BlendedDrillPathElementInfo.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.BlendedDrillPathElementInfo.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.BlendedDrillPathElementInfo.prototype.getDrillMember = function()
{
	return this.m_drillMember;
};
oFF.BlendedDrillPathElementInfo.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_datasetId = null;
	this.m_dimensionName = null;
	this.m_drillMember = null;
};

oFF.BlendingMappingUtils = {

	CUSTOM_DIMENSION1_DESC_ATTRIBUTE_NAME:"[Measures].[Description]",
	CUSTOM_DIMENSION1_DISPLAY_KEY_MAPPING_NAME:"[CustomDimension1].name",
	CUSTOM_DIMENSION1_KEY_ATTRIBUTE_NAME:"[Measures].[Measures]",
	DESCRIPTION_ATTRIBUTE_NAME:"description",
	ID_ATTRIBUTE_NAME:"id",
	addDescriptionAttrMappingIfLinkByKey:function(primaryLinkDimension, secondaryLinkDimension, activeDimensionLink, linkMapping, primaryQueryAliasName, secondaryQueryAliasName)
	{
			let isPrimaryLinkByKey = activeDimensionLink.getFirstPart().isLinkOnKeyField() || oFF.XString.isEqual(activeDimensionLink.getFirstPart().getFieldName(), oFF.BlendingMappingUtils.ID_ATTRIBUTE_NAME);
		let isSecondaryLinkByKey = activeDimensionLink.getSecondPart().isLinkOnKeyField() || oFF.XString.isEqual(activeDimensionLink.getSecondPart().getFieldName(), oFF.BlendingMappingUtils.ID_ATTRIBUTE_NAME);
		if (isPrimaryLinkByKey || isSecondaryLinkByKey)
		{
			let primaryDescriptionField = primaryLinkDimension.getTextField();
			let secondaryDescriptionField = secondaryLinkDimension.getTextField();
			if (oFF.notNull(primaryDescriptionField) && oFF.notNull(secondaryDescriptionField))
			{
				let attributeMapping = linkMapping.addNewAttributeMappingByName(primaryDescriptionField.getName(), false);
				attributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryDescriptionField.getName(), primaryQueryAliasName);
				attributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryDescriptionField.getName(), secondaryQueryAliasName);
			}
		}
	},
	addDisplayKeyMapping:function(queryAliasName, otherQueryAliasName, dimension, mapping, primaryDisplayKeyField, secondaryDisplayKeyField)
	{
			let overDefinedDisplayKeyAttributeName = oFF.BlendingUtils.createOverDefinedDisplayKeyAttributeName(dimension);
		let displayKeyAttributeMapping = mapping.addNewAttributeMappingByName(overDefinedDisplayKeyAttributeName, false);
		displayKeyAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryDisplayKeyField.getName(), queryAliasName);
		if (oFF.notNull(secondaryDisplayKeyField))
		{
			let secondaryDimension = secondaryDisplayKeyField.getDimension();
			let isAttributeBased = secondaryDimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED;
			secondaryDimension.getResultSetFields().add(secondaryDisplayKeyField);
			if (isAttributeBased)
			{
				secondaryDimension.getMainAttribute().getResultSetFields().add(secondaryDisplayKeyField);
			}
			displayKeyAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryDisplayKeyField.getName(), otherQueryAliasName);
		}
		else
		{
			displayKeyAttributeMapping.addNewConstantMapping(null, otherQueryAliasName);
		}
	},
	addLeveledHierarchyAttributeMapping:function(levelHierarchyField, linkDimension, attributeMapping, queryAliasName)
	{
			linkDimension.getResultSetFields().add(levelHierarchyField);
		if (!levelHierarchyField.isAlwaysRequested())
		{
			levelHierarchyField.setAlwaysRequested(true);
			levelHierarchyField.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_ALWAYS_REQUESTED, "true");
		}
		if (oFF.notNull(attributeMapping))
		{
			attributeMapping.addNewAttributeDimensionMappingDefinitionByName(levelHierarchyField.getName(), queryAliasName);
		}
	},
	addSignedDataToFilter:function(queryModel, isTransient)
	{
			if (queryModel.getAccountDimension() !== null && !queryModel.hasUserDefinedMeasures())
		{
			let measureDimension = queryModel.getMeasureDimension();
			let measureDimensionFilter = oFF.QFilterUtil.getLinkedFilterOrDynamicFilterForDimension(measureDimension);
			if (oFF.isNull(measureDimensionFilter) || measureDimensionFilter.isEmpty())
			{
				let filterContainer = queryModel.getFilter().getDynamicFilter();
				if (filterContainer.getFilterRootElement() === null || filterContainer.getFilterRootElement().getOlapComponentType() !== oFF.FilterComponentType.FILTER_ACROSS_MODELS)
				{
					if (filterContainer.getFilterRootElement() !== null)
					{
						measureDimensionFilter = filterContainer.getCartesianListWithDefault(measureDimension);
					}
					else
					{
						measureDimensionFilter = filterContainer.getCartesianProductWithDefault().getCartesianListWithDefault(measureDimension);
					}
					let newMeasureFilter = measureDimensionFilter.addNewCartesianElement();
					newMeasureFilter.setField(measureDimension.getKeyField());
					newMeasureFilter.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
					newMeasureFilter.setLowString("SignedData");
					if (isTransient)
					{
						newMeasureFilter.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT_FILTER_ELEMENT_BLENDING, "");
					}
				}
			}
		}
	},
	addToResultSetAttributes:function(dimension, field)
	{
			if (oFF.notNull(field) && field.getAttribute() !== null)
		{
			dimension.getResultSetAttributes().add(field.getAttribute());
			field.getAttribute().getResultSetFields().add(field);
		}
	},
	addTransientZoomOrVisibilityFilters:function(queryModel, calculationDimension, memberName, skipAddVisibilityFilterIfEmpty, isTransient)
	{
			if (calculationDimension.getDimensionType() === oFF.DimensionType.ACCOUNT && calculationDimension.isHierarchyActive() && calculationDimension.getInitialDrillLevel() > -1)
		{
			let zoomDrillOperations = queryModel.getDrillManager().getAllZoomDrillOperationsForDimension(calculationDimension);
			let drillPathExist = false;
			let drillPathElement = oFF.QFactory.createDrillPathElement(queryModel, memberName, calculationDimension);
			if (isTransient)
			{
				drillPathElement.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
			}
			if (oFF.notNull(zoomDrillOperations) && zoomDrillOperations.size() > 0)
			{
				for (let j = 0; j < zoomDrillOperations.size(); j++)
				{
					if (oFF.XCollectionUtils.contains(zoomDrillOperations.get(j).getDrillPath(), (zoomDrillPath) => {
						return oFF.XString.isEqual(zoomDrillPath.getSelectValue(), memberName);
					}))
					{
						drillPathExist = true;
					}
				}
				if (!drillPathExist)
				{
					queryModel.getDrillManager().addZoomDrillPathElement(drillPathElement, true);
				}
			}
			else
			{
				let drillOperations = queryModel.getDrillManager().getDrillOperationsByDimension(calculationDimension);
				if (oFF.notNull(drillOperations))
				{
					for (let i = 0; i < drillOperations.size(); i++)
					{
						if (oFF.XCollectionUtils.contains(drillOperations.get(i).getDrillPath(), (drillPath) => {
							return oFF.XString.isEqual(drillPath.getSelectValue(), memberName);
						}))
						{
							drillPathExist = true;
						}
					}
				}
				if (!drillPathExist)
				{
					queryModel.getDrillManager().setDrillStateElement(drillPathElement, oFF.DrillState.EXPANDED);
				}
				let visibilityFilter = queryModel.getFilter().getVisibilityFilter();
				if (visibilityFilter.getFilterRootElement() === null)
				{
					let cartesianProduct = visibilityFilter.getCartesianProductWithDefault();
					if (isTransient)
					{
						cartesianProduct.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
					}
				}
				let calculationDimensionList = visibilityFilter.getCartesianList(calculationDimension);
				if (oFF.isNull(calculationDimensionList))
				{
					calculationDimensionList = visibilityFilter.getCartesianListWithDefault(calculationDimension);
					if (isTransient)
					{
						calculationDimensionList.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
					}
				}
				if (!calculationDimensionList.isEmpty() || !skipAddVisibilityFilterIfEmpty)
				{
					let membersFromExistingList = oFF.QFilterUtil.getMemberNamesFromFilter(calculationDimensionList, calculationDimension.getName());
					if (!membersFromExistingList.contains(memberName))
					{
						let newElement = calculationDimensionList.addNewCartesianElement();
						newElement.setField(calculationDimension.getKeyField());
						newElement.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
						newElement.setLowString(memberName);
						if (isTransient)
						{
							newElement.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
						}
						if (queryModel.getModelCapabilities().supportsHierarchyTrapezoidFilter())
						{
							newElement.setDepth(0);
						}
						if (calculationDimension.isHierarchyActive())
						{
							newElement.setHierarchyName(calculationDimension.getHierarchyName());
						}
					}
				}
			}
		}
	},
	autoExpandHierarchyDimension:function(dimension)
	{
			if (oFF.notNull(dimension) && dimension.isHierarchyActive() && dimension.getDrillManager().getDrillOperationsByDimension(dimension).size() === 0 && dimension.getDrillManager().getAllZoomDrillOperationsForDimension(dimension).size() === 0)
		{
			if (!dimension.getTagging().containsKey("transientInitialDrillLevel"))
			{
				dimension.getTagging().put("transientInitialDrillLevel", oFF.XInteger.convertToString(dimension.getInitialDrillLevel()));
			}
			dimension.setInitialDrillLevel(-1);
		}
	},
	deactivateUniversalDisplayHierarchy:function(queryManager)
	{
			if (queryManager.getConvenienceCommands().isTypeOfBw())
		{
			let udhDeactivated = false;
			let universalDisplayHierarchies = queryManager.getQueryModel().getUniversalDisplayHierarchies();
			if (oFF.notNull(universalDisplayHierarchies))
			{
				let universalDisplayHierarchiesIterator = universalDisplayHierarchies.getHierarchies().getIterator();
				while (universalDisplayHierarchiesIterator.hasNext())
				{
					let universalDisplayHierarchy = universalDisplayHierarchiesIterator.next();
					if (universalDisplayHierarchy.isActive())
					{
						universalDisplayHierarchy.setActive(false);
						udhDeactivated = true;
						if (!universalDisplayHierarchy.getTagging().containsKey(oFF.QTransientConstants.TAG_DEACTIVATE_UNIVERSAL_DISPLAY_HIERARCHY))
						{
							universalDisplayHierarchy.getTagging().put(oFF.QTransientConstants.TAG_DEACTIVATE_UNIVERSAL_DISPLAY_HIERARCHY, "");
						}
					}
				}
			}
			if (udhDeactivated && queryManager.isHierarchyToUDHConversionEnabled())
			{
				queryManager.enableHierarchyToUDHConversion(false);
				if (!queryManager.getTagging().containsKey(oFF.QTransientConstants.TAG_DISABLE_HIERARCHY_TO_UDH_CONVERSION))
				{
					queryManager.getTagging().put(oFF.QTransientConstants.TAG_DISABLE_HIERARCHY_TO_UDH_CONVERSION, "");
				}
			}
		}
	},
	doesFieldExistInResultSet:function(dimension, field)
	{
			let fieldLayoutType = dimension.getFieldLayoutType();
		if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
		{
			return dimension.getResultSetFields().contains(field);
		}
		else if (fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
		{
			return oFF.XCollectionUtils.contains(dimension.getResultSetAttributes(), (resultSetAttribute) => {
				return resultSetAttribute.getResultSetFields().contains(field);
			});
		}
		return false;
	},
	getAttributeJoinField:function(dimensionLinkPart, dimension, primaryLinkDimensionFromLeafQM, process, isPrimary, useDisplayKeyJoinForBW)
	{
			let joinField = null;
		let displayKeyField = null;
		let isQueryManagerTypeOfBw = oFF.notNull(primaryLinkDimensionFromLeafQM) ? primaryLinkDimensionFromLeafQM.getQueryManager().getConvenienceCommands().isTypeOfBw() : dimension.getQueryManager().getConvenienceCommands().isTypeOfBw();
		if (dimensionLinkPart.getFieldName() !== null && oFF.XString.isEqual(dimensionLinkPart.getFieldName(), oFF.BlendingMappingUtils.DESCRIPTION_ATTRIBUTE_NAME) || !dimensionLinkPart.containsEmptyDescriptionField() && !dimensionLinkPart.isLinkOnKeyField())
		{
			joinField = dimension.getTextField();
			if (dimension.isHierarchyActive())
			{
				if (isQueryManagerTypeOfBw)
				{
					joinField = dimension.getHierarchyTextField();
				}
				displayKeyField = dimension.getHierarchyDisplayKeyField();
			}
			else
			{
				if (isQueryManagerTypeOfBw)
				{
					joinField = dimension.getTextField();
				}
				displayKeyField = dimension.getDisplayKeyField();
			}
		}
		else if (dimensionLinkPart.getFieldName() !== null && oFF.XString.isEqual(dimensionLinkPart.getFieldName(), oFF.BlendingMappingUtils.ID_ATTRIBUTE_NAME) || dimensionLinkPart.isLinkOnKeyField())
		{
			joinField = dimension.getDisplayKeyField() !== null ? dimension.getDisplayKeyField() : dimension.getKeyField() !== null ? dimension.getKeyField() : dimension.getFlatKeyField();
			if (dimension.isHierarchyActive())
			{
				if (isQueryManagerTypeOfBw && !useDisplayKeyJoinForBW)
				{
					joinField = dimension.getHierarchyKeyField() !== null ? dimension.getHierarchyKeyField() : dimension.getHierarchyDisplayKeyField() !== null ? dimension.getHierarchyDisplayKeyField() : dimension.getFlatKeyField();
				}
				displayKeyField = dimension.getHierarchyDisplayKeyField();
			}
			else
			{
				if (isQueryManagerTypeOfBw)
				{
					joinField = dimension.getKeyField() !== null ? dimension.getKeyField() : dimension.getDisplayKeyField() !== null ? dimension.getDisplayKeyField() : dimension.getFlatKeyField();
				}
				displayKeyField = dimension.getDisplayKeyField();
			}
		}
		else
		{
			let keyFieldName = dimension.getFlatKeyField().getName();
			let descriptionFieldName = oFF.XStringUtils.concatenate2(oFF.XString.substring(keyFieldName, 0, oFF.XString.lastIndexOf(keyFieldName, ".") + 1), dimensionLinkPart.getFieldName());
			joinField = dimension.getFieldByName(descriptionFieldName) !== null ? dimension.getFieldByName(descriptionFieldName) : dimension.getFlatKeyField() !== null ? dimension.getFlatKeyField() : dimension.getFields().get(0);
		}
		if (oFF.isNull(joinField))
		{
			joinField = dimension.getFlatKeyField() !== null ? dimension.getFlatKeyField() : dimension.getTextField() !== null ? dimension.getTextField() : dimension.getFields().get(0);
		}
		let iterator = dimension.getFields().getIterator();
		while (iterator.hasNext())
		{
			let oRequestedField = iterator.next();
			if (oRequestedField.isHierarchyPathField() && oRequestedField.isAlwaysRequested() && dimension.getQueryManager().getInitSettings().getMode() !== oFF.QueryManagerMode.BLENDING)
			{
				oRequestedField.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_ALWAYS_REQUESTED, "false");
				oRequestedField.setAlwaysRequested(false);
			}
		}
		if (dimension.getQueryManager().getInitSettings().getMode() !== oFF.QueryManagerMode.BLENDING && !isPrimary)
		{
			dimension.getResultSetFields().clear();
		}
		if (oFF.notNull(joinField) && joinField.getName() !== null)
		{
			dimension.getResultSetFields().add(joinField);
			dimension.getResultSetFields().add(dimension.getCubeBlendingPropertiesField());
		}
		if (oFF.notNull(displayKeyField) && displayKeyField.getName() !== null && isPrimary)
		{
			dimension.getResultSetFields().add(displayKeyField);
		}
		if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && isQueryManagerTypeOfBw)
		{
			if (dimension.getQueryManager().getInitSettings().getMode() !== oFF.QueryManagerMode.BLENDING && !isPrimary)
			{
				dimension.getResultSetAttributes().clear();
			}
			if (!(oFF.isNull(joinField)) && joinField.getName() !== null)
			{
				oFF.BlendingMappingUtils.addToResultSetAttributes(dimension, joinField);
				oFF.BlendingMappingUtils.addToResultSetAttributes(dimension, dimension.getCubeBlendingPropertiesField());
			}
			if (!(oFF.isNull(displayKeyField)) && displayKeyField.getName() !== null && isPrimary)
			{
				oFF.BlendingMappingUtils.addToResultSetAttributes(dimension, displayKeyField);
			}
		}
		return joinField;
	},
	getAttributeMapping:function(linkMapping, levelHierarchyFieldName)
	{
			return oFF.XCollectionUtils.findFirst(linkMapping.getAttributeMappings(), (attributeMapping) => {
			return oFF.XString.isEqual(attributeMapping.getAttributeName(), levelHierarchyFieldName);
		});
	},
	getDimensionFieldOfHierarchyLevel:function(dimension, level)
	{
			return dimension.getFieldByNameOrAlias(level.getLevelDimensionName());
	},
	getMatchableDefaultHierarchyName:function(dimension)
	{
			let matchableDefaultHierarchyName = null;
		let hierarchies = oFF.BlendingUtils.getHierarchiesFromSharedQueryManager(dimension.getOlapEnv(), dimension);
		let numberOfHierarchies = hierarchies.size();
		if (numberOfHierarchies > 0)
		{
			let defaultHierarchyName = dimension.getConvenienceCommands().isTypeOfBw() ? dimension.getHierarchyName() : hierarchies.get(numberOfHierarchies - 1).getHierarchyName();
			if (oFF.BlendingMappingUtils.isMatchableHierarchy(dimension, defaultHierarchyName))
			{
				matchableDefaultHierarchyName = defaultHierarchyName;
			}
		}
		return matchableDefaultHierarchyName;
	},
	getMatchingSecondaryHierarchyName:function(primaryLinkDimension, secondaryLinkDimension)
	{
			let matchingSecondaryHierarchyName = null;
		let primaryHierarchyName = primaryLinkDimension.getHierarchyName();
		let secondaryHierarchies = oFF.BlendingUtils.getHierarchiesFromSharedQueryManager(secondaryLinkDimension.getOlapEnv(), secondaryLinkDimension);
		if (oFF.BlendingMappingUtils.isMatchableHierarchy(primaryLinkDimension, primaryHierarchyName) && oFF.notNull(secondaryHierarchies))
		{
			let hierarchyIterator = secondaryHierarchies.getIterator();
			while (oFF.isNull(matchingSecondaryHierarchyName) && hierarchyIterator.hasNext())
			{
				let hierarchyCatalogItem = hierarchyIterator.next();
				let secondaryHierarchyName = hierarchyCatalogItem.getHierarchyName();
				if (oFF.XString.isEqual(secondaryHierarchyName, primaryHierarchyName) && oFF.BlendingMappingUtils.isMatchableHierarchy(secondaryLinkDimension, secondaryHierarchyName))
				{
					matchingSecondaryHierarchyName = secondaryHierarchyName;
				}
			}
			if (oFF.isNull(matchingSecondaryHierarchyName))
			{
				let secondaryDefaultHierarchy = oFF.BlendingMappingUtils.getMatchableDefaultHierarchyName(secondaryLinkDimension);
				if (oFF.notNull(secondaryDefaultHierarchy))
				{
					matchingSecondaryHierarchyName = secondaryDefaultHierarchy;
				}
			}
		}
		return matchingSecondaryHierarchyName;
	},
	getSecondaryHierarchyNameToActivate:function(primaryLinkDimension, secondaryLinkDimension, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy)
	{
			let secondaryHierarchyNameToActivate = null;
		if (linkOnMatchingHierarchies)
		{
			if (primaryLinkDimension.isHierarchyActive())
			{
				secondaryHierarchyNameToActivate = oFF.BlendingMappingUtils.getMatchingSecondaryHierarchyName(primaryLinkDimension, secondaryLinkDimension);
				if (oFF.isNull(secondaryHierarchyNameToActivate))
				{
					secondaryHierarchyNameToActivate = oFF.BlendingMappingUtils.getMatchableDefaultHierarchyName(secondaryLinkDimension);
				}
			}
			else if (!treatFlatToFlatAsMatchingHierarchy)
			{
				secondaryHierarchyNameToActivate = oFF.BlendingMappingUtils.getMatchableDefaultHierarchyName(secondaryLinkDimension);
			}
		}
		else
		{
			secondaryHierarchyNameToActivate = oFF.BlendingMappingUtils.getMatchableDefaultHierarchyName(secondaryLinkDimension);
		}
		return secondaryHierarchyNameToActivate;
	},
	getUseDisplayKeyJoinForBW:function(dimension, dimensionLinkPart)
	{
			let isPrimaryDimensionBWHierarchy = dimension.isHierarchyActive() && dimension.getQueryManager().getConvenienceCommands().isTypeOfBw();
		return !isPrimaryDimensionBWHierarchy || isPrimaryDimensionBWHierarchy && !dimensionLinkPart.isLinkOnKeyField();
	},
	hideTextField:function(dimension)
	{
			let textField = dimension.getTextField();
		if (oFF.notNull(textField) && textField.getPresentationType() === oFF.PresentationType.TEXT)
		{
			textField.getTagging().put(oFF.QTransientConstants.HIDE_TEXT_FIELD, "");
		}
	},
	isDateOrTimeLikeLinkDimension:function(linkDimension)
	{
			return oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(linkDimension) && linkDimension.getLeveledHierarchies() !== null && linkDimension.getLeveledHierarchies().size() > 0;
	},
	isDimensionInDrill:function(dimension)
	{
			return oFF.notNull(dimension) && (oFF.AxisType.ROWS === dimension.getAxisType() || oFF.AxisType.COLUMNS === dimension.getAxisType()) && !dimension.getTagging().containsKey(oFF.QTransientConstants.TAG_TRANSIENT_ROWS_AXIS);
	},
	isLeafDimensionUsedInBlendedDrill:function(dimensionName, queryModel, blendedDrillOperations)
	{
			let datasetIds = oFF.BlendingUtils.getDatasetIdsFromQueryModel(queryModel);
		let blendedDrillOperationsIter = blendedDrillOperations.getIterator();
		while (blendedDrillOperationsIter.hasNext())
		{
			let blendedDrillOperation = blendedDrillOperationsIter.next();
			let leafQueryAliasPrefix = oFF.BlendingUtils.getLeafQueryAliasPrefix(blendedDrillOperation.getDatasetId(), queryModel);
			let leafDimensionName = oFF.XStringUtils.isNotNullAndNotEmpty(leafQueryAliasPrefix) && oFF.XString.startsWith(dimensionName, leafQueryAliasPrefix) ? oFF.XString.replace(dimensionName, leafQueryAliasPrefix, "") : dimensionName;
			if (datasetIds.contains(blendedDrillOperation.getDatasetId()) && oFF.XString.isEqual(blendedDrillOperation.getDimensionName(), leafDimensionName))
			{
				return true;
			}
			if (oFF.XCollectionUtils.contains(blendedDrillOperation.getBlendedDrillPathElementInfos(), (blendedDrillPathElementInfo) => {
				return datasetIds.contains(blendedDrillPathElementInfo.getDatasetId()) && oFF.XString.isEqual(blendedDrillPathElementInfo.getDimensionName(), leafDimensionName);
			}))
			{
				return true;
			}
		}
		return false;
	},
	isMatchableHierarchy:function(dimension, hierarchyName)
	{
			return oFF.notNull(hierarchyName) && !oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(dimension) && !oFF.QFilterAcrossModelsDimensionUtil.isNonTimeLevelBasedHierarchy(dimension, hierarchyName);
	},
	isOutOfContextDimension:function(dimension)
	{
			return dimension.getAxisType() !== oFF.AxisType.ROWS && dimension.getAxisType() !== oFF.AxisType.COLUMNS;
	},
	linkAttributesFromLeveledHierarchy:function(primarySource, secondarySource, primaryLinkDimension, secondaryLinkDimension, linkMapping, primaryLeveledHierarchy, secondaryLeveledHierarchy)
	{
			if (oFF.notNull(primaryLeveledHierarchy) && oFF.notNull(secondaryLeveledHierarchy))
		{
			secondaryLinkDimension.setHierarchyName(secondaryLeveledHierarchy.getHierarchyName());
			let primaryHierarchyLevelsIter = primaryLeveledHierarchy.getAllLevel().getIterator();
			while (primaryHierarchyLevelsIter.hasNext())
			{
				let primaryHierarchyLevel = primaryHierarchyLevelsIter.next();
				if (primaryHierarchyLevel.getLevelType() === oFF.HierarchyLevelType.ALL)
				{
					continue;
				}
				let secondaryHierarchyLevel = secondaryLeveledHierarchy.getLevelByType(primaryHierarchyLevel.getLevelType());
				if (oFF.notNull(secondaryHierarchyLevel))
				{
					let primaryLevelHierarchyField = oFF.BlendingMappingUtils.getDimensionFieldOfHierarchyLevel(primaryLinkDimension, primaryHierarchyLevel);
					let secondaryLevelHierarchyField = oFF.BlendingMappingUtils.getDimensionFieldOfHierarchyLevel(secondaryLinkDimension, secondaryHierarchyLevel);
					let attributeMapping = null;
					if (oFF.BlendingMappingUtils.getAttributeMapping(linkMapping, primaryLevelHierarchyField.getName()) === null)
					{
						attributeMapping = linkMapping.addNewAttributeMappingByName(primaryLevelHierarchyField.getName(), true);
					}
					oFF.BlendingMappingUtils.addLeveledHierarchyAttributeMapping(primaryLevelHierarchyField, primaryLinkDimension, attributeMapping, primarySource.getQueryAliasName());
					oFF.BlendingMappingUtils.addLeveledHierarchyAttributeMapping(secondaryLevelHierarchyField, secondaryLinkDimension, attributeMapping, secondarySource.getQueryAliasName());
				}
			}
		}
	},
	processAccountFieldMappings:function(primaryCalculationDimMapping, primaryAccountDimension, primarySource, secondaryAccountDimension, secondarySource)
	{
			if (primaryAccountDimension.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT) && secondaryAccountDimension.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT))
		{
			let isSecondaryAttributeBased = secondaryAccountDimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED;
			let resultSetFieldsIterator = primaryAccountDimension.getResultSetFields().getIterator();
			while (resultSetFieldsIterator.hasNext())
			{
				let primaryField = resultSetFieldsIterator.next();
				let presentationType = primaryField.getPresentationType();
				if (presentationType.isTypeOf(oFF.PresentationType.UNDEFINED) || !oFF.PresentationType.isKeyPresentation(presentationType) && !oFF.PresentationType.isTextPresentation(presentationType) && !presentationType.isTypeOf(oFF.PresentationType.HIERARCHY_PATH))
				{
					let fieldTypeIndex = oFF.XString.lastIndexOf(primaryField.getName(), ".");
					let unprefixedFieldName = oFF.XString.substring(primaryField.getName(), fieldTypeIndex, -1);
					let secondaryField = secondaryAccountDimension.getFieldByName(oFF.XStringUtils.concatenate4("[", secondaryAccountDimension.getName(), "]", unprefixedFieldName));
					if (oFF.isNull(secondaryField))
					{
						secondaryField = secondaryAccountDimension.getFieldByName(oFF.XStringUtils.concatenate2(secondaryAccountDimension.getName(), unprefixedFieldName));
					}
					if (oFF.notNull(secondaryField))
					{
						secondaryAccountDimension.getResultSetFields().add(secondaryField);
						if (isSecondaryAttributeBased)
						{
							secondaryAccountDimension.getMainAttribute().getResultSetFields().add(secondaryField);
						}
						let attributeMapping = primaryCalculationDimMapping.addNewAttributeMappingByName(primaryField.getName(), false);
						attributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryField.getName(), primarySource.getQueryAliasName());
						attributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryField.getName(), secondarySource.getQueryAliasName());
					}
				}
			}
		}
	},
	processCalculationDimensionDisplayKeyMappings:function(primaryCalculationDimMapping, primaryCalcDimension, primarySource, secondaryCalcDimension, secondarySource, blendingProcess, useOverdefinedDisplayKeyAttributeName, saveResultSet)
	{
			if (blendingProcess.getBlendableQueryManager().includesDisplayKeyInMeasureDimension())
		{
			let primaryDisplayKeyField = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(primaryCalcDimension);
			let secondaryDisplayKeyField = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(secondaryCalcDimension);
			if (!(oFF.isNull(primaryDisplayKeyField)) && primaryCalcDimension.getResultSetFields().contains(primaryDisplayKeyField) && !(oFF.isNull(secondaryDisplayKeyField)) && secondaryCalcDimension.getResultSetFields().contains(secondaryDisplayKeyField))
			{
				if (saveResultSet)
				{
					oFF.BlendingMappingUtils.saveOriginalResultSetFields(primaryCalcDimension, blendingProcess);
				}
				let displayKeyAttributeMapping;
				if (useOverdefinedDisplayKeyAttributeName)
				{
					displayKeyAttributeMapping = primaryCalculationDimMapping.addNewAttributeMappingByName(oFF.BlendingMappingUtils.CUSTOM_DIMENSION1_DISPLAY_KEY_MAPPING_NAME, false);
				}
				else
				{
					displayKeyAttributeMapping = primaryCalculationDimMapping.addNewAttributeMappingByName(primaryDisplayKeyField.getName(), false);
				}
				displayKeyAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryDisplayKeyField.getName(), primarySource.getQueryAliasName());
				displayKeyAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryDisplayKeyField.getName(), secondarySource.getQueryAliasName());
			}
		}
	},
	processCalculationDimensionMappings:function(blendingDefinition, primarySource, secondarySource, blendedDrillOperations, blendingProcess)
	{
			let primaryQueryModel = primarySource.getQueryModel();
		let secondaryQueryModel = secondarySource.getQueryModel();
		let primaryQueryManager = primaryQueryModel.getQueryManager();
		let primaryAccountDimension = primaryQueryModel.getAccountDimension();
		let secondaryAccountDimension = secondaryQueryModel.getAccountDimension();
		let primaryMeasureDimension = primaryQueryModel.getMeasureDimension();
		let secondaryMeasureDimension = secondaryQueryModel.getMeasureDimension();
		if (oFF.notNull(primaryAccountDimension))
		{
			if (!primaryAccountDimension.isHierarchyActive())
			{
				primaryAccountDimension.activateHierarchy(primaryAccountDimension.getHierarchyName() !== null ? primaryAccountDimension.getHierarchyName() : primaryAccountDimension.getDefaultHierarchyName(), null, null);
			}
			oFF.HierarchyPathUtil.addPathFieldToResultSet(primaryQueryModel, primaryAccountDimension.getName(), false);
			if (oFF.BlendingMappingUtils.isLeafDimensionUsedInBlendedDrill(primaryAccountDimension.getName(), primaryQueryModel, blendedDrillOperations))
			{
				oFF.BlendingMappingUtils.autoExpandHierarchyDimension(primaryAccountDimension);
			}
		}
		if (oFF.notNull(primaryMeasureDimension))
		{
			if ((oFF.isNull(primaryAccountDimension) || blendingProcess.getBlendableQueryManager().isAccountSecondaryMeasureDimensionOnNoneAxis()) && primaryMeasureDimension.getAxisType() !== oFF.AxisType.ROWS && primaryMeasureDimension.getAxisType() !== oFF.AxisType.COLUMNS)
			{
				primaryQueryModel.getColumnsAxis().add(primaryMeasureDimension);
			}
			oFF.BlendingMappingUtils.addSignedDataToFilter(primaryQueryModel, false);
		}
		if (oFF.notNull(secondaryAccountDimension))
		{
			if (!secondaryAccountDimension.isHierarchyActive())
			{
				secondaryAccountDimension.activateHierarchy(secondaryAccountDimension.getHierarchyName() !== null ? secondaryAccountDimension.getHierarchyName() : secondaryAccountDimension.getDefaultHierarchyName(), null, null);
			}
			if (secondaryAccountDimension.getAxisType() !== oFF.AxisType.ROWS && secondaryAccountDimension.getAxisType() !== oFF.AxisType.COLUMNS)
			{
				secondaryQueryModel.getColumnsAxis().add(secondaryAccountDimension);
			}
			if (oFF.notNull(primaryAccountDimension))
			{
				oFF.HierarchyPathUtil.addPathFieldToResultSet(secondaryQueryModel, secondaryAccountDimension.getName(), false);
			}
			else
			{
				oFF.HierarchyPathUtil.clearPathFieldFromResultSet(secondaryQueryModel, secondaryAccountDimension.getName());
			}
			if (oFF.BlendingMappingUtils.isLeafDimensionUsedInBlendedDrill(secondaryAccountDimension.getName(), secondaryQueryModel, blendedDrillOperations))
			{
				oFF.BlendingMappingUtils.autoExpandHierarchyDimension(secondaryAccountDimension);
			}
		}
		if (oFF.notNull(secondaryMeasureDimension))
		{
			if (secondaryMeasureDimension.getAxisType() !== oFF.AxisType.ROWS && secondaryMeasureDimension.getAxisType() !== oFF.AxisType.COLUMNS)
			{
				secondaryQueryModel.getColumnsAxis().add(secondaryMeasureDimension);
				secondaryMeasureDimension.getTagging().put(oFF.QTransientConstants.SECONDARY_MEASURE_DIMENSION_ON_COLUMN, "");
			}
			oFF.BlendingMappingUtils.addSignedDataToFilter(secondaryQueryModel, false);
		}
		let secondaryCalculationDimMapping;
		let primaryCalculationDimMapping;
		if (oFF.notNull(primaryAccountDimension))
		{
			oFF.BlendingMappingUtils.saveOriginalResultSetFields(primaryAccountDimension, blendingProcess);
			if (oFF.isNull(secondaryAccountDimension))
			{
				secondaryCalculationDimMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.ALL_DATA, primaryMeasureDimension.getName());
				secondaryCalculationDimMapping.addNewDimensionMappingDefinition(primaryMeasureDimension, primarySource.getQueryAliasName());
				secondaryCalculationDimMapping.addNewConstantMapping("SignedData", secondarySource.getQueryAliasName());
				primaryCalculationDimMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.COEXIST, primaryAccountDimension.getName());
				primaryCalculationDimMapping.addNewDimensionMappingDefinition(primaryAccountDimension, primarySource.getQueryAliasName());
				primaryCalculationDimMapping.addNewDimensionMappingDefinition(secondaryMeasureDimension, secondarySource.getQueryAliasName());
				let secondaryDescField = secondaryMeasureDimension.getTextField();
				let primaryDescField = primaryAccountDimension.getTextField();
				if (oFF.notNull(primaryDescField) && oFF.notNull(secondaryDescField))
				{
					let accountDescAttributeMapping = primaryCalculationDimMapping.addNewAttributeMappingByName(primaryDescField.getName(), false);
					accountDescAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryDescField.getName(), primarySource.getQueryAliasName());
					accountDescAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryDescField.getName(), secondarySource.getQueryAliasName());
				}
				let secondaryKeyField = secondaryMeasureDimension.getKeyField();
				let primaryKeyField = primaryAccountDimension.getKeyField();
				if (oFF.notNull(primaryKeyField) && oFF.notNull(secondaryKeyField))
				{
					let accountKeyAttributeMapping = primaryCalculationDimMapping.addNewAttributeMappingByName(primaryKeyField.getName(), false);
					accountKeyAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryKeyField.getName(), primarySource.getQueryAliasName());
					accountKeyAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryKeyField.getName(), secondarySource.getQueryAliasName());
				}
				oFF.BlendingMappingUtils.processCalculationDimensionDisplayKeyMappings(primaryCalculationDimMapping, primaryAccountDimension, primarySource, secondaryMeasureDimension, secondarySource, blendingProcess, false, false);
			}
			else
			{
				oFF.BlendingMappingUtils.saveOriginalResultSetFields(secondaryAccountDimension, blendingProcess);
				secondaryCalculationDimMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.ALL_DATA, primaryMeasureDimension.getName());
				secondaryCalculationDimMapping.addNewDimensionMappingDefinition(secondaryMeasureDimension, secondarySource.getQueryAliasName());
				secondaryCalculationDimMapping.addNewDimensionMappingDefinition(primaryMeasureDimension, primarySource.getQueryAliasName());
				primaryCalculationDimMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.COEXIST, primaryAccountDimension.getName());
				primaryCalculationDimMapping.addNewDimensionMappingDefinition(secondaryAccountDimension, secondarySource.getQueryAliasName());
				primaryCalculationDimMapping.addNewDimensionMappingDefinition(primaryAccountDimension, primarySource.getQueryAliasName());
				oFF.BlendingMappingUtils.processAccountFieldMappings(primaryCalculationDimMapping, primaryAccountDimension, primarySource, secondaryAccountDimension, secondarySource);
			}
		}
		else
		{
			let primaryMeasureKeyField;
			let secondaryMeasureKeyField;
			let primaryMeasureDescField;
			let secondaryMeasureDescField;
			let primaryMeasureDimensionName = primaryQueryManager.getConvenienceCommands().isTypeOfBw() ? oFF.BlendingUtils.CUSTOM_DIMENSION1 : primaryMeasureDimension.getName();
			if (oFF.notNull(secondaryAccountDimension))
			{
				secondaryCalculationDimMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.ALL_DATA, "SignedData");
				secondaryCalculationDimMapping.addNewDimensionMappingDefinition(secondaryMeasureDimension, secondarySource.getQueryAliasName());
				let signedDataDimension = primarySource.getQueryModel().getDimensionByName("SignedData");
				if (oFF.notNull(signedDataDimension))
				{
					if (signedDataDimension.getAxisType() !== oFF.AxisType.ROWS && signedDataDimension.getAxisType() !== oFF.AxisType.COLUMNS)
					{
						primarySource.getQueryModel().getColumnsAxis().add(signedDataDimension);
					}
					secondaryCalculationDimMapping.addNewDimensionMappingDefinition(signedDataDimension, primarySource.getQueryAliasName());
				}
				else
				{
					secondaryCalculationDimMapping.addNewConstantMapping("SignedData", primarySource.getQueryAliasName());
				}
			}
			let secondaryAccountOrMeasureDimension = oFF.notNull(secondaryAccountDimension) ? secondaryAccountDimension : secondaryMeasureDimension;
			primaryCalculationDimMapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.COEXIST, primaryMeasureDimensionName);
			primaryCalculationDimMapping.addNewDimensionMappingDefinition(primaryMeasureDimension, primarySource.getQueryAliasName());
			primaryCalculationDimMapping.addNewDimensionMappingDefinition(secondaryAccountOrMeasureDimension, secondarySource.getQueryAliasName());
			primaryMeasureDescField = primaryMeasureDimension.getTextField();
			secondaryMeasureDescField = secondaryAccountOrMeasureDimension.getTextField();
			if (oFF.notNull(primaryMeasureDescField) && oFF.notNull(secondaryMeasureDescField))
			{
				let primaryMeasureDimensionDescriptionAttributeName = primaryQueryManager.getConvenienceCommands().isTypeOfBw() ? oFF.BlendingMappingUtils.CUSTOM_DIMENSION1_DESC_ATTRIBUTE_NAME : primaryMeasureDescField.getName();
				let primaryCalculationMeasureDescAttributeMapping = primaryCalculationDimMapping.addNewAttributeMappingByName(primaryMeasureDimensionDescriptionAttributeName, false);
				if (primaryCalculationDimMapping.getBlendingDefinition().getBlendingSourceByAlias(primarySource.getQueryAliasName()).getFieldByName(primaryMeasureDimensionDescriptionAttributeName) !== null)
				{
					primaryCalculationMeasureDescAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryMeasureDimensionDescriptionAttributeName, primarySource.getQueryAliasName());
				}
				else
				{
					primaryCalculationMeasureDescAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryMeasureDescField.getName(), primarySource.getQueryAliasName());
				}
				primaryCalculationMeasureDescAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryMeasureDescField.getName(), secondarySource.getQueryAliasName());
			}
			primaryMeasureKeyField = primaryMeasureDimension.getKeyField();
			secondaryMeasureKeyField = secondaryAccountOrMeasureDimension.getKeyField();
			if (oFF.notNull(primaryMeasureKeyField) && oFF.notNull(secondaryMeasureKeyField))
			{
				let primaryMeasureDimensionKeyAttributeName = primaryQueryManager.getConvenienceCommands().isTypeOfBw() ? oFF.BlendingMappingUtils.CUSTOM_DIMENSION1_KEY_ATTRIBUTE_NAME : primaryMeasureKeyField.getName();
				let primaryCalculationMeasureKeyFieldAttributeMapping = primaryCalculationDimMapping.addNewAttributeMappingByName(primaryMeasureDimensionKeyAttributeName, false);
				if (primaryCalculationDimMapping.getBlendingDefinition().getBlendingSourceByAlias(primarySource.getQueryAliasName()).getFieldByName(primaryMeasureDimensionKeyAttributeName) !== null)
				{
					primaryCalculationMeasureKeyFieldAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryMeasureDimensionKeyAttributeName, primarySource.getQueryAliasName());
				}
				else
				{
					primaryCalculationMeasureKeyFieldAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryMeasureKeyField.getName(), primarySource.getQueryAliasName());
				}
				primaryCalculationMeasureKeyFieldAttributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryMeasureKeyField.getName(), secondarySource.getQueryAliasName());
			}
			oFF.BlendingMappingUtils.processCalculationDimensionDisplayKeyMappings(primaryCalculationDimMapping, primaryMeasureDimension, primarySource, secondaryAccountOrMeasureDimension, secondarySource, blendingProcess, true, true);
		}
	},
	processHierarchies:function(primaryLinkDimension, secondaryLinkDimension, primaryLinkDimensionOOC, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy)
	{
			let primaryMatchableDefaultHierarchyName = oFF.BlendingMappingUtils.getMatchableDefaultHierarchyName(primaryLinkDimension);
		if (!oFF.QFilterUtil.hasFilterForDimension(primaryLinkDimension.getQueryModel().getFilter(), primaryLinkDimension.getName()) && primaryLinkDimensionOOC && oFF.notNull(primaryMatchableDefaultHierarchyName))
		{
			let primaryOriginalHierarchy = primaryLinkDimension.isHierarchyActive() ? primaryLinkDimension.getHierarchyName() : null;
			primaryLinkDimension.getTagging().put("originalHierarchy", primaryOriginalHierarchy);
			primaryLinkDimension.activateHierarchy(primaryMatchableDefaultHierarchyName, null, null);
		}
		if (secondaryLinkDimension.getFilter() === null)
		{
			let secondaryHierarchyNameToActivate = oFF.BlendingMappingUtils.getSecondaryHierarchyNameToActivate(primaryLinkDimension, secondaryLinkDimension, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy);
			if (oFF.notNull(secondaryHierarchyNameToActivate))
			{
				let secondaryOriginalHierarchy = secondaryLinkDimension.isHierarchyActive() ? secondaryLinkDimension.getHierarchyName() : null;
				secondaryLinkDimension.getTagging().put("originalHierarchy", secondaryOriginalHierarchy);
				secondaryLinkDimension.activateHierarchy(secondaryHierarchyNameToActivate, null, null);
			}
			else if (secondaryLinkDimension.supportsHierarchy())
			{
				let secondaryOriginalHierarchy = secondaryLinkDimension.isHierarchyActive() ? secondaryLinkDimension.getHierarchyName() : null;
				secondaryLinkDimension.getTagging().put("originalHierarchy", secondaryOriginalHierarchy);
				secondaryLinkDimension.setHierarchyActive(false);
				secondaryLinkDimension.setHierarchy(null);
			}
		}
	},
	processLinkedDimensions:function(blendingProcessConfigs, blendingDefinition, primarySource, secondarySource, blendingProcess, blendedDrillOperations, unusedLinkedDimensionsNames, autoExpandHierarchy)
	{
			let primaryQueryModel = primarySource.getQueryModel();
		let secondaryQueryModel = secondarySource.getQueryModel();
		let blendingProcessConfigIter = blendingProcessConfigs.getIterator();
		while (blendingProcessConfigIter.hasNext())
		{
			let blendingProcessConfig = blendingProcessConfigIter.next();
			let dimensionLinksIter = blendingProcessConfig.getModelDimensionLinks().getIterator();
			while (dimensionLinksIter.hasNext())
			{
				let dimensionLink = dimensionLinksIter.next();
				let primaryLinkDimensionName = dimensionLink.getFirstPart().getDimensionName();
				let primaryLinkDimension;
				if (primaryQueryModel.getQueryManager().getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
				{
					let datasetId = dimensionLink.getFirstPart().getQueryModel().getDatasetId();
					primaryLinkDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(primaryLinkDimensionName, datasetId, primaryQueryModel);
					primaryLinkDimensionName = primaryLinkDimension.getName();
				}
				else
				{
					primaryLinkDimension = primaryQueryModel.getDimensionByName(primaryLinkDimensionName);
				}
				if (oFF.isNull(primaryLinkDimension))
				{
					continue;
				}
				let primaryLinkDimensionOOC = oFF.BlendingMappingUtils.isOutOfContextDimension(primaryLinkDimension);
				if (primaryLinkDimensionOOC)
				{
					if (!blendingProcessConfig.getQueryModelLinkSettings().getActivePrimaryLinkDimensionNames().isEmpty() && !blendingProcessConfig.getQueryModelLinkSettings().getActivePrimaryLinkDimensionNames().contains(primaryLinkDimensionName))
					{
						continue;
					}
					primaryQueryModel.getRowsAxis().add(primaryLinkDimension);
					primaryLinkDimension.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_ROWS_AXIS, "");
					blendingProcess.addOutOfContextLinkDimensionName(primaryLinkDimensionName);
				}
				if (primaryLinkDimension.supportsHierarchy())
				{
					if (primaryLinkDimensionOOC)
					{
						primaryLinkDimension.getTagging().put("transientInitialDrillLevel", oFF.XInteger.convertToString(primaryLinkDimension.getInitialDrillLevel()));
						primaryLinkDimension.setInitialDrillLevel(0);
					}
					else if (primaryLinkDimension.getQueryModel().getConvenienceCommands().isTypeOfBw() && !primaryLinkDimension.getTagging().containsKey("transientInitialDrillLevel"))
					{
						primaryLinkDimension.getTagging().put("transientInitialDrillLevel", oFF.XInteger.convertToString(primaryLinkDimension.getInitialDrillLevel()));
						primaryLinkDimension.setInitialDrillLevel(-1);
						primaryLinkDimension.getTagging().put(oFF.QTransientConstants.BW_HIERARCHY_DIMENSION, "");
					}
				}
				if (!primaryQueryModel.getModelCapabilities().supportsBlendingTotals() && primaryLinkDimension.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL) === oFF.ResultVisibility.VISIBLE)
				{
					primaryLinkDimension.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.HIDDEN);
					primaryLinkDimension.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_TOTAL_VISIBILITY_HIDDEN, "");
				}
				if (!oFF.XString.isEqual(secondaryQueryModel.getDatasetId(), dimensionLink.getSecondPart().getQueryManagerKey()))
				{
					unusedLinkedDimensionsNames.add(primaryLinkDimensionName);
					continue;
				}
				let secondaryLinkDimensionName = dimensionLink.getSecondPart().getDimensionName();
				let secondaryLinkDimension = secondaryQueryModel.getDimensionByName(secondaryLinkDimensionName);
				if (oFF.isNull(secondaryLinkDimension))
				{
					continue;
				}
				let secondaryLinkDimensionOOC = oFF.BlendingMappingUtils.isOutOfContextDimension(secondaryLinkDimension);
				if (secondaryLinkDimensionOOC)
				{
					let axisType = primaryLinkDimension.getAxisType() === oFF.AxisType.COLUMNS ? oFF.AxisType.COLUMNS : oFF.AxisType.ROWS;
					secondaryQueryModel.getAxis(axisType).add(secondaryLinkDimension);
					secondaryLinkDimension.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_ROWS_AXIS, "");
				}
				if (secondaryLinkDimension.supportsHierarchy())
				{
					secondaryLinkDimension.getTagging().put("transientInitialDrillLevel", oFF.XInteger.convertToString(secondaryLinkDimension.getInitialDrillLevel()));
					secondaryLinkDimension.setInitialDrillLevel(-1);
				}
				let leafQueryManager = blendingProcess.getBlendableQueryManager().getPrimaryQueryManager();
				let primaryLinkDimensionFromLeafQM = leafQueryManager.getQueryModel().getDimensionByName(primaryLinkDimensionName);
				if (oFF.notNull(primaryLinkDimensionFromLeafQM))
				{
					let primaryLinkDimensionReadMode = primaryLinkDimensionFromLeafQM.getReadMode(oFF.QContextType.RESULT_SET);
					if (primaryLinkDimensionReadMode !== secondaryLinkDimension.getReadMode(oFF.QContextType.RESULT_SET))
					{
						secondaryLinkDimension.setReadModeGraceful(oFF.QContextType.RESULT_SET, primaryLinkDimensionReadMode);
					}
				}
				let linkMapping = blendingDefinition.addNewDimensionMapping(blendingProcessConfig.getQueryModelLinkSettings().getLinkType(), primaryLinkDimensionName);
				linkMapping.addNewDimensionMappingDefinitionByName(primaryLinkDimensionName, primarySource.getQueryAliasName());
				linkMapping.addNewDimensionMappingDefinitionByName(secondaryLinkDimensionName, secondarySource.getQueryAliasName());
				oFF.BlendingMappingUtils.saveOriginalResultSetFields(primaryLinkDimension, blendingProcess);
				oFF.BlendingMappingUtils.saveOriginalResultSetFields(secondaryLinkDimension, blendingProcess);
				let isAutoMapped = false;
				if (oFF.BlendingMappingUtils.isDateOrTimeLikeLinkDimension(primaryLinkDimension) && !primaryQueryModel.getConvenienceCommands().isTypeOfBw() && oFF.BlendingMappingUtils.isDateOrTimeLikeLinkDimension(secondaryLinkDimension) && !secondaryQueryModel.getConvenienceCommands().isTypeOfBw())
				{
					isAutoMapped = oFF.BlendingMappingUtils.processTimeDimensionAttributeMapping(primarySource, secondarySource, blendingProcess, primaryLinkDimension, secondaryLinkDimension, linkMapping);
				}
				if (!isAutoMapped)
				{
					oFF.BlendingMappingUtils.processHierarchies(primaryLinkDimension, secondaryLinkDimension, primaryLinkDimensionOOC, dimensionLink.isLinkOnMatchingHierarchies(), dimensionLink.isTreatFlatToFlatAsMatchingHierarchy());
					if (oFF.BlendingMappingUtils.isLeafDimensionUsedInBlendedDrill(primaryLinkDimension.getName(), primaryQueryModel, blendedDrillOperations))
					{
						oFF.BlendingMappingUtils.autoExpandHierarchyDimension(primaryLinkDimension);
						oFF.BlendingMappingUtils.autoExpandHierarchyDimension(secondaryLinkDimension);
					}
					let useDisplayKeyJoinForBWPrimary = oFF.BlendingMappingUtils.getUseDisplayKeyJoinForBW(primaryLinkDimensionFromLeafQM, dimensionLink.getFirstPart());
					let useDisplayKeyJoinForBWSecondary = oFF.BlendingMappingUtils.getUseDisplayKeyJoinForBW(secondaryLinkDimension, dimensionLink.getSecondPart());
					let primaryJoinField = oFF.BlendingMappingUtils.getAttributeJoinField(dimensionLink.getFirstPart(), primaryLinkDimension, primaryLinkDimensionFromLeafQM, blendingProcess, true, useDisplayKeyJoinForBWSecondary);
					let secondaryJoinField = oFF.BlendingMappingUtils.getAttributeJoinField(dimensionLink.getSecondPart(), secondaryLinkDimension, null, blendingProcess, false, useDisplayKeyJoinForBWPrimary);
					let overDefinedDisplayKeyAttributeName = null;
					let primaryBWFlatDisplayKeyField = primaryQueryModel.getConvenienceCommands().isTypeOfBw() ? primaryLinkDimension.getFlatDisplayKeyField() : null;
					if (oFF.notNull(primaryBWFlatDisplayKeyField) && oFF.BlendingMappingUtils.doesFieldExistInResultSet(primaryLinkDimension, primaryBWFlatDisplayKeyField))
					{
						overDefinedDisplayKeyAttributeName = oFF.BlendingUtils.createOverDefinedDisplayKeyAttributeName(primaryLinkDimension);
					}
					let useOverDefinedDisplayKeyAttributeNameForJoinFieldMapping = primaryBWFlatDisplayKeyField === primaryJoinField && oFF.notNull(overDefinedDisplayKeyAttributeName);
					if (oFF.notNull(primaryJoinField) && oFF.notNull(secondaryJoinField))
					{
						let attributeMapping = linkMapping.addNewAttributeMappingByName(useOverDefinedDisplayKeyAttributeNameForJoinFieldMapping ? overDefinedDisplayKeyAttributeName : primaryJoinField.getName(), true);
						attributeMapping.addNewAttributeDimensionMappingDefinitionByName(primaryJoinField.getName(), primarySource.getQueryAliasName());
						attributeMapping.addNewAttributeDimensionMappingDefinitionByName(secondaryJoinField.getName(), secondarySource.getQueryAliasName());
					}
					let primaryDisplayKeyField = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(primaryLinkDimension);
					if (oFF.notNull(primaryDisplayKeyField) && primaryDisplayKeyField !== primaryJoinField && oFF.BlendingMappingUtils.doesFieldExistInResultSet(primaryLinkDimension, primaryDisplayKeyField) && !useOverDefinedDisplayKeyAttributeNameForJoinFieldMapping)
					{
						let secondaryDisplayKeyField = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(secondaryLinkDimension);
						secondaryDisplayKeyField = secondaryDisplayKeyField !== secondaryJoinField ? secondaryDisplayKeyField : null;
						oFF.BlendingMappingUtils.addDisplayKeyMapping(primarySource.getQueryAliasName(), secondarySource.getQueryAliasName(), primaryLinkDimension, linkMapping, primaryDisplayKeyField, secondaryDisplayKeyField);
					}
					oFF.BlendingMappingUtils.addDescriptionAttrMappingIfLinkByKey(primaryLinkDimension, secondaryLinkDimension, dimensionLink, linkMapping, primarySource.getQueryAliasName(), secondarySource.getQueryAliasName());
				}
				else if (autoExpandHierarchy)
				{
					oFF.BlendingMappingUtils.autoExpandHierarchyDimension(primaryLinkDimension);
				}
				if ((primaryLinkDimension.isHierarchyActive() || secondaryLinkDimension.isHierarchyActive()) && blendingProcessConfig.getQueryModelLinkSettings().getLinkType() === oFF.BlendingLinkType.ALL_DATA)
				{
					blendingProcess.addError(oFF.ErrorCodes.LINKED_HIERARCHY_DIMENSION_ALL_DATA, oFF.ErrorMessages.LINKED_HIERARCHY_DIMENSION_ALL_DATA);
				}
				secondaryLinkDimension.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, primaryLinkDimension.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL));
			}
		}
	},
	processTimeDimensionAttributeMapping:function(primarySource, secondarySource, blendingProcess, primaryLinkDimension, secondaryLinkDimension, linkMapping)
	{
			blendingProcess.addAutoMappingTimeLinkDimensionNames(linkMapping.getMemberName());
		secondaryLinkDimension.getResultSetFields().clear();
		secondaryLinkDimension.getTagging().put("originalHierarchy", secondaryLinkDimension.isHierarchyActive() ? secondaryLinkDimension.getHierarchyName() : null);
		let primaryLeveledHierarchy = null;
		let secondaryLeveledHierarchy = null;
		let compatibleHierarchyFiscalSpaceType;
		if (primaryLinkDimension.isHierarchyActive())
		{
			primaryLeveledHierarchy = primaryLinkDimension.getLeveledHierarchy(primaryLinkDimension.getHierarchyName());
			compatibleHierarchyFiscalSpaceType = oFF.QTimeDimensionUtil.getFiscalSpaceType(primaryLinkDimension, primaryLinkDimension.getHierarchyName(), secondaryLinkDimension);
			secondaryLeveledHierarchy = oFF.QTimeDimensionUtil.findMostCompatibleHierarchy(secondaryLinkDimension, primaryLeveledHierarchy.getAllLevelTypes(), compatibleHierarchyFiscalSpaceType, true);
			oFF.BlendingMappingUtils.linkAttributesFromLeveledHierarchy(primarySource, secondarySource, primaryLinkDimension, secondaryLinkDimension, linkMapping, primaryLeveledHierarchy, secondaryLeveledHierarchy);
			secondaryLinkDimension.setInitialDrillOffset(0);
			let primaryLevelMaxDepth = primaryLeveledHierarchy.getMostGranularLevel().getLevelNumber();
			let secondaryLevelMaxDepth = secondaryLeveledHierarchy.getMostGranularLevel().getLevelNumber();
			secondaryLinkDimension.setInitialDrillLevel(primaryLevelMaxDepth <= secondaryLevelMaxDepth ? primaryLevelMaxDepth : secondaryLevelMaxDepth);
		}
		else
		{
			let primaryHierarchies = primaryLinkDimension.getHierarchies() !== null ? primaryLinkDimension.getHierarchies().getObjectsIterator() : null;
			if (oFF.notNull(primaryHierarchies))
			{
				while (primaryHierarchies.hasNext())
				{
					let primaryHierarchyCatalogItem = primaryHierarchies.next();
					primaryLeveledHierarchy = primaryLinkDimension.getLeveledHierarchy(primaryHierarchyCatalogItem.getHierarchyName());
					compatibleHierarchyFiscalSpaceType = oFF.QTimeDimensionUtil.getFiscalSpaceType(primaryLinkDimension, primaryHierarchyCatalogItem.getHierarchyName(), secondaryLinkDimension);
					secondaryLeveledHierarchy = oFF.QTimeDimensionUtil.findMostCompatibleHierarchy(secondaryLinkDimension, primaryLeveledHierarchy.getAllLevelTypes(), compatibleHierarchyFiscalSpaceType, true);
					if (oFF.notNull(secondaryLeveledHierarchy))
					{
						oFF.BlendingMappingUtils.linkAttributesFromLeveledHierarchy(primarySource, secondarySource, primaryLinkDimension, secondaryLinkDimension, linkMapping, primaryLeveledHierarchy, secondaryLeveledHierarchy);
					}
				}
			}
		}
		secondaryLinkDimension.setHierarchyActive(primaryLinkDimension.isHierarchyActive());
		if (!linkMapping.getAttributeMappings().isEmpty())
		{
			if (secondaryLinkDimension.getTextField() !== null && !secondaryLinkDimension.getSession().hasFeature(oFF.FeatureToggleOlap.DONT_ALWAYS_REQUEST_TEXTFIELD))
			{
				secondaryLinkDimension.getTextField().getTagging().put(oFF.QTransientConstants.HIDE_TEXT_FIELD, "");
			}
			return true;
		}
		else
		{
			return false;
		}
	},
	processTransientCalculations:function(queryModel, transientMembers, isAllMembersOrFsicEnabled, skipAddVisibilityFilterIfEmpty)
	{
			if (oFF.notNull(transientMembers))
		{
			let transientMembersIter = transientMembers.getIterator();
			while (transientMembersIter.hasNext())
			{
				let transientMember = transientMembersIter.next();
				if (!oFF.XString.isEqual(queryModel.getName(), transientMember.getQueryModel().getName()))
				{
					continue;
				}
				let calculationDimension = queryModel.getDimensionByName(transientMember.getDimension().getName());
				let memberName = transientMember.getAliasOrMemberName();
				if (calculationDimension.getStructureMemberByAliasOrMember(memberName) === null)
				{
					let transientMemberClone = oFF.QStructureMember.createMeasure(transientMember.getMemberType(), calculationDimension.getQueryModel(), calculationDimension);
					transientMemberClone.copySharableProperties(transientMember, false);
					transientMemberClone.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_BLENDING_DEPENDENCY, "");
					calculationDimension.addMeasure(transientMemberClone);
				}
				let measureFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(calculationDimension, true, true, true);
				let fieldSelectionFilters = oFF.XCollectionUtils.filter(oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(calculationDimension, false, false, true), (fieldSelectionFilter) => {
					return oFF.notNull(fieldSelectionFilter);
				});
				let measureFilterToAdd = null;
				let isAllMembersEnabled = isAllMembersOrFsicEnabled && fieldSelectionFilters.isEmpty();
				if (isAllMembersEnabled)
				{
					if (calculationDimension.getFilter() !== null && !calculationDimension.getFilter().isEmpty())
					{
						measureFilterToAdd = calculationDimension.getFilter();
					}
				}
				else
				{
					measureFilterToAdd = oFF.XCollectionUtils.findFirst(measureFilters, (filter) => {
						return oFF.notNull(filter);
					});
					if (oFF.isNull(measureFilterToAdd))
					{
						measureFilterToAdd = queryModel.getFilter().getDynamicFilter().getCartesianListWithDefault(calculationDimension);
					}
				}
				if (oFF.notNull(measureFilterToAdd))
				{
					let memberNamesFromFilter = oFF.XList.create();
					oFF.XCollectionUtils.forEach(measureFilters, (filter) => {
						memberNamesFromFilter.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(filter, calculationDimension.getName()));
					});
					if (!memberNamesFromFilter.contains(memberName))
					{
						let newMeasureFilter = measureFilterToAdd.addNewCartesianElement();
						newMeasureFilter.setField(calculationDimension.getKeyField());
						let hierarchyName = calculationDimension.supportsHierarchy() && calculationDimension.isHierarchyActive() ? calculationDimension.getHierarchyName() : null;
						if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
						{
							measureFilterToAdd.setHierarchyName(hierarchyName);
							newMeasureFilter.setHierarchyName(hierarchyName);
						}
						newMeasureFilter.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
						newMeasureFilter.setLowString(memberName);
						newMeasureFilter.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
					}
				}
				oFF.BlendingMappingUtils.addTransientZoomOrVisibilityFilters(queryModel, calculationDimension, memberName, skipAddVisibilityFilterIfEmpty, true);
			}
		}
	},
	processUnlinkedDimensions:function(blendingSource, otherBlendingSource, blendingDefinition, qmLink, usedUnlinkDimensionNames, unusedLinkDimensionNames, blendedDrillOperations, blendingProcess)
	{
			let queryModel = blendingSource.getQueryModel();
		let queryAliasName = blendingSource.getQueryAliasName();
		let otherQueryAliasName = otherBlendingSource.getQueryAliasName();
		let dimensions = oFF.XList.create();
		dimensions.addAll(queryModel.getRowsAxis());
		dimensions.addAll(queryModel.getColumnsAxis());
		let dimensionsIter = dimensions.getIterator();
		let usedMappings = oFF.XHashMapByString.create();
		let mappingsIter = blendingDefinition.getMappings().getIterator();
		let mappingDimensionNames;
		while (mappingsIter.hasNext())
		{
			let mappings = mappingsIter.next();
			if (mappings.getMappingDefinitionType() === oFF.BlendingMappingDefinitionType.DIMENSION)
			{
				let mappingDefIter = mappings.getMappingDefinitions().getIterator();
				while (mappingDefIter.hasNext())
				{
					let mappingDef = mappingDefIter.next();
					mappingDimensionNames = usedMappings.getByKey(mappingDef.getQueryAliasName());
					if (oFF.isNull(mappingDimensionNames))
					{
						mappingDimensionNames = oFF.XHashSetOfString.create();
						usedMappings.put(mappingDef.getQueryAliasName(), mappingDimensionNames);
					}
					mappingDimensionNames.add(mappingDef.getMemberName());
				}
			}
		}
		while (dimensionsIter.hasNext())
		{
			let dimension = dimensionsIter.next();
			if (dimension.isMeasureStructure() || dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				continue;
			}
			mappingDimensionNames = usedMappings.getByKey(queryAliasName);
			let dimensionName = dimension.getName();
			if (oFF.isNull(mappingDimensionNames) || !mappingDimensionNames.contains(dimensionName))
			{
				let aliasDimensionName;
				let useAlias = queryModel.getQueryManager().getSystemType() === oFF.SystemType.BW || blendingProcess.getSession().hasFeature(oFF.FeatureToggleOlap.BLENDABLE_QUERY_ALIAS_PREFIXING) ? !unusedLinkDimensionNames.contains(dimensionName) && !queryModel.isBlendingModel() : usedUnlinkDimensionNames.contains(dimensionName);
				if (useAlias)
				{
					aliasDimensionName = oFF.XStringUtils.concatenate3(queryAliasName, ".", dimensionName);
				}
				else
				{
					aliasDimensionName = dimensionName;
				}
				usedUnlinkDimensionNames.add(dimensionName);
				let mapping = null;
				if (qmLink.getUnlinkedDimensionJoinType() === oFF.UnlinkedDimensionJoinType.MERGE_MEMBERS)
				{
					mapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.NONE, aliasDimensionName);
					mapping.addNewDimensionMappingDefinition(dimension, queryAliasName);
					mapping.setIsPreservingMembers(true);
				}
				else if (qmLink.getUnlinkedDimensionJoinType() === oFF.UnlinkedDimensionJoinType.CREATE_NEW_MEMBERS)
				{
					mapping = blendingDefinition.addNewDimensionMapping(oFF.BlendingLinkType.ALL_DATA, aliasDimensionName);
					mapping.addNewDimensionMappingDefinition(dimension, queryAliasName);
					if (dimension.isMeasureStructure())
					{
						mapping.addNewConstantMapping("SignedData", queryAliasName);
					}
					else
					{
						mapping.addNewConstantMapping(null, otherQueryAliasName);
					}
				}
				oFF.BlendingMappingUtils.saveOriginalResultSetFields(dimension, blendingProcess);
				if (oFF.BlendingMappingUtils.isLeafDimensionUsedInBlendedDrill(dimensionName, queryModel, blendedDrillOperations))
				{
					oFF.BlendingMappingUtils.autoExpandHierarchyDimension(dimension);
				}
				else if (dimension.getQueryModel().getConvenienceCommands().isTypeOfBw())
				{
					if (dimension.supportsHierarchy() && dimension.isHierarchyActive())
					{
						dimension.getTagging().put("transientInitialDrillLevel", oFF.XInteger.convertToString(dimension.getInitialDrillLevel()));
						dimension.setInitialDrillLevel(-1);
						dimension.getTagging().put(oFF.QTransientConstants.BW_HIERARCHY_DIMENSION, "");
					}
					let primaryBWFlatDisplayKeyField = dimension.getFlatDisplayKeyField();
					if (oFF.notNull(primaryBWFlatDisplayKeyField) && oFF.BlendingMappingUtils.doesFieldExistInResultSet(dimension, primaryBWFlatDisplayKeyField))
					{
						oFF.BlendingMappingUtils.addDisplayKeyMapping(queryAliasName, otherQueryAliasName, dimension, mapping, primaryBWFlatDisplayKeyField, null);
					}
				}
				if (oFF.BlendingMappingUtils.isDateOrTimeLikeLinkDimension(dimension) && unusedLinkDimensionNames.contains(dimensionName))
				{
					let hierarchy = dimension.getLeveledHierarchy(dimension.getHierarchyName());
					if (oFF.notNull(hierarchy))
					{
						let levelIterator = hierarchy.getAllLevel().getIterator();
						while (levelIterator.hasNext())
						{
							let hierarchyLevel = levelIterator.next();
							if (hierarchyLevel.getLevelType() === oFF.HierarchyLevelType.ALL)
							{
								continue;
							}
							let levelHierarchyField = oFF.BlendingMappingUtils.getDimensionFieldOfHierarchyLevel(dimension, hierarchyLevel);
							let attributeMapping = null;
							if (oFF.BlendingMappingUtils.getAttributeMapping(mapping, levelHierarchyField.getName()) === null)
							{
								attributeMapping = mapping.addNewAttributeMappingByName(levelHierarchyField.getName(), true);
							}
							oFF.BlendingMappingUtils.addLeveledHierarchyAttributeMapping(levelHierarchyField, dimension, attributeMapping, queryAliasName);
						}
					}
				}
				if (!queryModel.getModelCapabilities().supportsBlendingTotals() && dimension.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL) === oFF.ResultVisibility.VISIBLE)
				{
					dimension.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.HIDDEN);
					dimension.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_TOTAL_VISIBILITY_HIDDEN, "");
				}
			}
		}
	},
	removeDrillPaths:function(drillManager, drillOperations, memberName, isZoomDrillOperations)
	{
			if (oFF.notNull(drillOperations))
		{
			for (let i = drillOperations.size() - 1; i >= 0; i--)
			{
				let drillOperation = drillOperations.get(i);
				if (oFF.XCollectionUtils.contains(drillOperation.getDrillPath(), (drillPath) => {
					return oFF.XString.isEqual(drillPath.getSelectValue(), memberName);
				}))
				{
					if (isZoomDrillOperations)
					{
						drillManager.getZoomDrillOperations().removeElement(drillOperation);
					}
					else
					{
						drillManager.getDrillOperations().removeElement(drillOperation);
					}
				}
			}
		}
	},
	removeQueryTextFieldsFromResultSetFields:function(resultSetFields, isPreserveAttributeLayout)
	{
			if (isPreserveAttributeLayout)
		{
			for (let i = resultSetFields.size() - 1; i >= 0; i--)
			{
				if (resultSetFields.get(i).getPresentationType() === oFF.PresentationType.QUERY_TEXT)
				{
					resultSetFields.removeAt(i);
				}
			}
		}
	},
	removeUnsupportedFieldsForBlending:function(queryModel, isPreserveAttributeLayout)
	{
			if (queryModel.getConvenienceCommands().isTypeOfBw())
		{
			let loadedDimensions = queryModel.getLoadedDimensions();
			let loadedDimensionsIterator = loadedDimensions.getIterator();
			while (loadedDimensionsIterator.hasNext())
			{
				let loadedDimension = loadedDimensionsIterator.next();
				if (loadedDimension.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED)
				{
					oFF.BlendingMappingUtils.removeUnsupportedResultSetFields(loadedDimension, isPreserveAttributeLayout);
				}
				else if (loadedDimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED)
				{
					oFF.BlendingMappingUtils.removeUnsupportedResultSetAttributeFields(loadedDimension, isPreserveAttributeLayout);
				}
				if (oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(loadedDimension))
				{
					oFF.BlendingMappingUtils.hideTextField(loadedDimension);
				}
			}
		}
	},
	removeUnsupportedResultSetAttributeFields:function(dimension, isPreserveAttributeLayout)
	{
			let supportsSidPresentation = dimension.getModelCapabilities().supportsSidPresentation();
		let resultSetAttributesIterator = dimension.getResultSetAttributes().getIterator();
		while (resultSetAttributesIterator.hasNext())
		{
			let resultSetAttribute = resultSetAttributesIterator.next();
			let resultSetFields = resultSetAttribute.getResultSetFields();
			oFF.BlendingMappingUtils.replaceQueryTextWithDefaultText(dimension, resultSetFields, isPreserveAttributeLayout);
			oFF.BlendingMappingUtils.removeQueryTextFieldsFromResultSetFields(resultSetFields, isPreserveAttributeLayout);
			if (supportsSidPresentation)
			{
				resultSetFields.removeElement(resultSetAttribute.getHierarchyNavigationField());
			}
		}
	},
	removeUnsupportedResultSetFields:function(dimension, isPreserveAttributeLayout)
	{
			let resultSetFields = dimension.getFieldContainer().getResultSetFields();
		oFF.BlendingMappingUtils.replaceQueryTextWithDefaultText(dimension, resultSetFields, isPreserveAttributeLayout);
		oFF.BlendingMappingUtils.removeQueryTextFieldsFromResultSetFields(resultSetFields, isPreserveAttributeLayout);
		if (dimension.getModelCapabilities().supportsSidPresentation())
		{
			resultSetFields.removeElement(dimension.getHierarchyNavigationField());
		}
	},
	removeZoomOrVisibilityFilters:function(queryModel, calculationDimension, memberName)
	{
			if (calculationDimension.getDimensionType() === oFF.DimensionType.ACCOUNT && calculationDimension.isHierarchyActive() && calculationDimension.getInitialDrillLevel() > -1)
		{
			let drillManager = queryModel.getDrillManager();
			let zoomDrillOperations = drillManager.getAllZoomDrillOperationsForDimension(calculationDimension);
			oFF.BlendingMappingUtils.removeDrillPaths(drillManager, zoomDrillOperations, memberName, true);
			let drillOperations = drillManager.getDrillOperationsByDimension(calculationDimension);
			oFF.BlendingMappingUtils.removeDrillPaths(drillManager, drillOperations, memberName, false);
			queryModel.getFilter().getVisibilityFilter().removeSingleMemberFilterByDimension(calculationDimension, memberName, oFF.ComparisonOperator.EQUAL);
		}
	},
	replaceQueryTextWithDefaultText:function(dimension, resultSetFields, isPreserveAttributeLayout)
	{
			let queryTextField = dimension.getFieldContainer().getFieldByPresentationType(oFF.PresentationType.QUERY_TEXT);
		if (resultSetFields.contains(queryTextField))
		{
			resultSetFields.removeElement(queryTextField);
			let defaultTextField = dimension.getDefaultResultSetTextField();
			if (!resultSetFields.contains(defaultTextField))
			{
				resultSetFields.add(defaultTextField);
				if (isPreserveAttributeLayout)
				{
					if (!dimension.getTagging().containsKey(oFF.QTransientConstants.TAG_REPLACE_QUERY_TEXT_WITH_DEFAULT_TEXT))
					{
						dimension.getTagging().put(oFF.QTransientConstants.TAG_REPLACE_QUERY_TEXT_WITH_DEFAULT_TEXT, "");
					}
				}
			}
		}
	},
	saveOriginalResultSetFields:function(dimension, process)
	{
			let resultSetFieldsIter = dimension.getResultSetFields().getIterator();
		let cacheKey = oFF.QCacheKey.createByContextForDimension(dimension.getContext(), dimension.getName(), null);
		let originalResultSetFields = oFF.XList.create();
		let dimensionCacheKey = oFF.XStringUtils.concatenate3(dimension.getQueryModel().getDatasetId(), "_", cacheKey.getKey1());
		process.addOriginalDimensionResultSetFields(dimensionCacheKey, originalResultSetFields);
		if (process.getOriginalBlendingProcess() !== process)
		{
			process.getOriginalBlendingProcess().addOriginalDimensionResultSetFields(dimensionCacheKey, originalResultSetFields);
		}
		while (resultSetFieldsIter.hasNext())
		{
			let resultSetField = resultSetFieldsIter.next();
			originalResultSetFields.add(resultSetField.getName());
		}
		if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && dimension.getQueryManager().getConvenienceCommands().isTypeOfBw())
		{
			let resultSetAttributesIter = dimension.getResultSetAttributes().getIterator();
			let originalResultSetAttributes = oFF.XHashMapByString.create();
			process.addOriginalDimensionResultSetAttributes(dimensionCacheKey, originalResultSetAttributes);
			if (process.getOriginalBlendingProcess() !== process)
			{
				process.getOriginalBlendingProcess().addOriginalDimensionResultSetAttributes(dimensionCacheKey, originalResultSetAttributes);
			}
			while (resultSetAttributesIter.hasNext())
			{
				let originalResultSetAttribute = oFF.XList.create();
				let resultSetAttribute = resultSetAttributesIter.next();
				let resultSetAttributeFieldsIter = resultSetAttribute.getResultSetFields().getIterator();
				while (resultSetAttributeFieldsIter.hasNext())
				{
					let resultSetAttributeField = resultSetAttributeFieldsIter.next();
					originalResultSetAttribute.add(resultSetAttributeField.getName());
				}
				originalResultSetAttributes.put(resultSetAttribute.getName(), originalResultSetAttribute);
			}
		}
	}
};

oFF.BlendingSortUtils = {

	addFieldOrDimensionSorting:function(sortingManager, sortField, sort, supportsLocaleSorting, isFieldSorting, supportsSortDirectionForHierarchySortType, customSortOrder, customSortPosition)
	{
			let sortingObject = null;
		let sortType = null;
		if (isFieldSorting)
		{
			sortingObject = sortingManager.newFieldSorting(sortField);
			sortingManager.addSortOperation(sortingObject);
			sortType = oFF.SortType.FIELD;
		}
		else
		{
			let dimension = sortField.getDimension();
			sortingObject = sortingManager.getDimensionSorting(dimension, false);
			if (oFF.notNull(sortingObject) && (oFF.isNull(customSortOrder) || customSortOrder.isEmpty()))
			{
				sortingManager.removeDimensionSorting(dimension);
				sortingObject = null;
			}
			if (oFF.isNull(sortingObject))
			{
				sortingObject = sortingManager.getDimensionSorting(dimension, true);
			}
			if (oFF.notNull(customSortOrder) && !customSortOrder.isEmpty())
			{
				sortingObject = sortingManager.newDimensionSorting(dimension);
				sortingObject.setName(oFF.XStringUtils.concatenateWithInt(oFF.QSortUtils.SORT_OPERATION_INFO_PREFIX, oFF.QSortUtils.SORT_OPERATION_INFO_INDEX++));
				sortingManager.addSortOperation(sortingObject);
			}
			sortType = oFF.QSortUtils.getSortType(sortingObject, sortField, supportsSortDirectionForHierarchySortType, dimension.isHierarchyActive());
		}
		if (oFF.notNull(sortingObject) && oFF.notNull(sortType))
		{
			oFF.QSortUtils.addSortDirectionAndBreakGrouping(sortingManager, sortingObject, sortType, !sort.getPreserveGrouping(), sort.getSortDirection());
			if (supportsLocaleSorting)
			{
				sortingObject.setLocale(sort.getContextLanguage());
				sortingObject.setIsCaseSensitive(false);
			}
		}
		oFF.QSortUtils.applyCustomSortToSortingObject(customSortOrder, customSortPosition, sortingObject);
	},
	addSortByDimension:function(blendableQueryManager, queryModel, sortingManager, sort)
	{
			let keyField = queryModel.getFieldByName(sort.getFieldName());
		let sortField = null;
		if (oFF.notNull(blendableQueryManager) && oFF.isNull(keyField))
		{
			keyField = oFF.BlendingUtils.getBlendedFieldFromLeafField(sort.getFieldName(), sort.getDatasetId(), blendableQueryManager, queryModel);
		}
		let dimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(keyField.getDimension().getName(), sort.getDatasetId(), queryModel);
		let displayKeyField = dimension.getDisplayKeyField();
		if (dimension === queryModel.getPrimaryCalculationDimension())
		{
			let field = oFF.BlendingUtils.getDisplayKeyFieldWithFallBack(dimension);
			if (oFF.notNull(field))
			{
				displayKeyField = field;
			}
		}
		let supportsSortDirectionForHierarchySortType = queryModel.getModelCapabilities().supportsSortDirectionForHierarchySortType();
		let customSort = sort.getCustomSortDefinition();
		let supportsLocaleSorting = queryModel.getModelCapabilities().supportsLocaleSorting();
		if (oFF.notNull(customSort))
		{
			sortingManager.removeDimensionSorting(dimension);
			sortField = keyField;
			let startSorts = customSort.getRuntimeSortFromStart(queryModel, blendableQueryManager);
			if (oFF.notNull(startSorts) && startSorts.hasElements())
			{
				oFF.BlendingSortUtils.setCustomSortForSortingManager(sortingManager, sortField, sort, supportsLocaleSorting, supportsSortDirectionForHierarchySortType, startSorts, oFF.CustomSortPosition.TOP);
			}
			let endSorts = customSort.getRuntimeSortFromEnd(queryModel, blendableQueryManager);
			if (oFF.notNull(endSorts) && endSorts.hasElements())
			{
				oFF.BlendingSortUtils.setCustomSortForSortingManager(sortingManager, sortField, sort, supportsLocaleSorting, supportsSortDirectionForHierarchySortType, endSorts, oFF.CustomSortPosition.BOTTOM);
			}
			return;
		}
		let isFieldSorting = false;
		let isValueTypeTimeOrDate = false;
		if (oFF.notNull(blendableQueryManager))
		{
			let sortFieldValueType = blendableQueryManager.getQueryManagerByDatasetId(sort.getDatasetId()).getQueryModel().getFieldByName(sort.getFieldName()).getValueType();
			isValueTypeTimeOrDate = sortFieldValueType === oFF.XValueType.DATE || sortFieldValueType === oFF.XValueType.DATE_TIME;
		}
		if (isValueTypeTimeOrDate || oFF.QTimeDimensionUtil.isDateOrTimeLikeDimension(dimension) || oFF.QSortUtils.getDefaultDimensionSortType(dimension) === oFF.SortType.MEMBER_KEY)
		{
			sortField = keyField;
			if (sortingManager.supportsDimensionSorting(dimension, oFF.SortType.HIERARCHY) && dimension.isHierarchyActive())
			{
				oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, sortField, sort, supportsLocaleSorting, isFieldSorting, supportsSortDirectionForHierarchySortType, null, null);
			}
			else if (sortingManager.supportsFieldSorting(sortField))
			{
				isFieldSorting = true;
				oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, sortField, sort, supportsLocaleSorting, isFieldSorting, supportsSortDirectionForHierarchySortType, null, null);
			}
		}
		else if (sort.isDisplayedAsId())
		{
			sortField = dimension === queryModel.getPrimaryCalculationDimension() ? displayKeyField : keyField;
			if (sortingManager.supportsFieldSorting(null))
			{
				isFieldSorting = true;
				oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, sortField, sort, supportsLocaleSorting, isFieldSorting, supportsSortDirectionForHierarchySortType, null, null);
			}
		}
		else
		{
			if (oFF.notNull(blendableQueryManager))
			{
				let leafDimension = blendableQueryManager.getQueryManagerByDatasetId(sort.getDatasetId()).getQueryModel().getDimensionByName(sort.getDimensionId());
				if (oFF.notNull(leafDimension) && !leafDimension.isUseServerDefaultTextField())
				{
					let clientDefaultTextField = oFF.BlendingUtils.getBlendedFieldFromLeafField(leafDimension.getClientDefaultTextField().getName(), sort.getDatasetId(), blendableQueryManager, queryModel);
					sortField = clientDefaultTextField;
				}
			}
			if (oFF.isNull(sortField))
			{
				sortField = dimension.getTextField();
			}
			if (oFF.isNull(sortField))
			{
				sortField = keyField;
			}
			if (sortingManager.supportsFieldSorting(null))
			{
				isFieldSorting = true;
				oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, sortField, sort, supportsLocaleSorting, isFieldSorting, supportsSortDirectionForHierarchySortType, null, null);
			}
		}
		if (sortingManager.supportsFieldSorting(null))
		{
			let secondarySortField = sortField === displayKeyField ? keyField : displayKeyField;
			isFieldSorting = true;
			oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, secondarySortField, sort, supportsLocaleSorting, isFieldSorting, supportsSortDirectionForHierarchySortType, null, null);
		}
		else if (sortingManager.supportsDimensionSorting(dimension, null))
		{
			isFieldSorting = false;
			oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, sortField, sort, supportsLocaleSorting, isFieldSorting, supportsSortDirectionForHierarchySortType, null, null);
		}
	},
	setCustomSortForSortingManager:function(sortingManager, sortField, sort, supportsLocaleSorting, supportsSortDirectionForHierarchySortType, customSortOrder, customSortPosition)
	{
			if (sortingManager.supportsFieldSorting(null))
		{
			oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, sortField, sort, supportsLocaleSorting, true, supportsSortDirectionForHierarchySortType, customSortOrder, customSortPosition);
		}
		else
		{
			oFF.BlendingSortUtils.addFieldOrDimensionSorting(sortingManager, sortField, sort, supportsLocaleSorting, false, supportsSortDirectionForHierarchySortType, customSortOrder, customSortPosition);
		}
	}
};

oFF.DependentPersistedQueryInfo = function() {};
oFF.DependentPersistedQueryInfo.prototype = new oFF.XObject();
oFF.DependentPersistedQueryInfo.prototype._ff_c = "DependentPersistedQueryInfo";

oFF.DependentPersistedQueryInfo.create = function(systemName, inaQuery)
{
	let info = new oFF.DependentPersistedQueryInfo();
	info.m_systemName = systemName;
	info.m_inaQuery = inaQuery;
	return info;
};
oFF.DependentPersistedQueryInfo.prototype.m_inaQuery = null;
oFF.DependentPersistedQueryInfo.prototype.m_systemName = null;
oFF.DependentPersistedQueryInfo.prototype.getInaQuery = function()
{
	if (oFF.notNull(this.m_inaQuery))
	{
		return this.m_inaQuery.getStringRepresentation();
	}
	return null;
};
oFF.DependentPersistedQueryInfo.prototype.getSystemName = function()
{
	return this.m_systemName;
};
oFF.DependentPersistedQueryInfo.prototype.releaseObject = function()
{
	this.m_inaQuery = oFF.XObjectExt.release(this.m_inaQuery);
	this.m_systemName = null;
};

oFF.AbstractSpatialClustering = function() {};
oFF.AbstractSpatialClustering.prototype = new oFF.XObject();
oFF.AbstractSpatialClustering.prototype._ff_c = "AbstractSpatialClustering";

oFF.AbstractSpatialClustering.ORDER = null;
oFF.AbstractSpatialClustering.prototype.m_clusterField = null;
oFF.AbstractSpatialClustering.prototype.m_dimensions = null;
oFF.AbstractSpatialClustering.prototype.m_isActive = false;
oFF.AbstractSpatialClustering.prototype.m_parameters = null;
oFF.AbstractSpatialClustering.prototype.m_thresholdNumberOfPoints = 0;
oFF.AbstractSpatialClustering.prototype.addDimension = function(dimensionName)
{
	this.m_dimensions.add(dimensionName);
};
oFF.AbstractSpatialClustering.prototype.areParametersEqual = function(order, thisParameter, otherParameter)
{
	for (let i = 0; i < order.size(); i++)
	{
		let name = order.get(i);
		if (thisParameter.containsKey(name) !== otherParameter.containsKey(name))
		{
			return false;
		}
		let thisValue = thisParameter.getByKey(name);
		if (oFF.notNull(thisValue))
		{
			if (!thisValue.isEqualTo(otherParameter.getByKey(name)))
			{
				return false;
			}
		}
	}
	return true;
};
oFF.AbstractSpatialClustering.prototype.cloneClustering = function(clone)
{
	clone.setActive(this.isActive());
	if (this.getClusterField() !== null)
	{
		clone.setClusterField(this.getClusterField());
	}
	clone.setThresholdNumberOfPoints(this.getThresholdNumberOfPoints());
};
oFF.AbstractSpatialClustering.prototype.createOrder = function()
{
	oFF.AbstractSpatialClustering.ORDER = oFF.XHashMapByString.create();
	let dbScanParameter = oFF.XArray.create(2);
	dbScanParameter.set(0, "EPS");
	dbScanParameter.set(1, "MinPoints");
	oFF.AbstractSpatialClustering.ORDER.put(oFF.ClusterAlgorithm.DB_SCAN.getName(), dbScanParameter);
	let gridParameter = oFF.XArray.create(6);
	gridParameter.set(0, "XCells");
	gridParameter.set(1, "YCells");
	gridParameter.set(2, "XLowerBound");
	gridParameter.set(3, "YLowerBound");
	gridParameter.set(4, "XUpperBound");
	gridParameter.set(5, "YUpperBound");
	oFF.AbstractSpatialClustering.ORDER.put(oFF.ClusterAlgorithm.GRID.getName(), gridParameter);
	let kMeansParameter = oFF.XArray.create(4);
	kMeansParameter.set(0, "Clusters");
	kMeansParameter.set(1, "MaxIterations");
	kMeansParameter.set(2, "Threshold");
	kMeansParameter.set(3, "Init");
	oFF.AbstractSpatialClustering.ORDER.put(oFF.ClusterAlgorithm.K_MEANS.getName(), kMeansParameter);
};
oFF.AbstractSpatialClustering.prototype.getClusterField = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_clusterField);
};
oFF.AbstractSpatialClustering.prototype.getDimensions = function()
{
	return this.m_dimensions;
};
oFF.AbstractSpatialClustering.prototype.getParameters = function()
{
	return this.m_parameters;
};
oFF.AbstractSpatialClustering.prototype.getThresholdNumberOfPoints = function()
{
	return this.m_thresholdNumberOfPoints;
};
oFF.AbstractSpatialClustering.prototype.isActive = function()
{
	return this.m_isActive;
};
oFF.AbstractSpatialClustering.prototype.isEqualTo = function(other)
{
	if (oFF.isNull(other))
	{
		return false;
	}
	if (this === other)
	{
		return true;
	}
	let xOther = other;
	if (xOther.getClusterAlgorithm() !== this.getClusterAlgorithm())
	{
		return false;
	}
	if (xOther.isActive() !== this.isActive())
	{
		return false;
	}
	if (xOther.getClusterField() !== this.getClusterField())
	{
		return false;
	}
	if (xOther.getThresholdNumberOfPoints() !== this.getThresholdNumberOfPoints())
	{
		return false;
	}
	return this.areParametersEqual(oFF.AbstractSpatialClustering.ORDER.getByKey(xOther.getClusterAlgorithm().getName()), this.getParameters(), xOther.getParameters());
};
oFF.AbstractSpatialClustering.prototype.releaseObject = function()
{
	this.m_parameters = oFF.XObjectExt.release(this.m_parameters);
	this.m_dimensions = oFF.XObjectExt.release(this.m_dimensions);
	this.m_clusterField = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.AbstractSpatialClustering.prototype.setActive = function(isActive)
{
	this.m_isActive = isActive;
};
oFF.AbstractSpatialClustering.prototype.setClusterField = function(field)
{
	oFF.XObjectExt.assertNotNullExt(field, "The cluster field must not be null!");
	if (!field.getValueType().isSpatial())
	{
		throw oFF.XException.createIllegalArgumentException("The cluster field must be spatial!");
	}
	this.m_clusterField = oFF.XWeakReferenceUtil.getWeakRef(field);
};
oFF.AbstractSpatialClustering.prototype.setThresholdNumberOfPoints = function(thresholdNumberOfPoints)
{
	this.m_thresholdNumberOfPoints = thresholdNumberOfPoints;
};
oFF.AbstractSpatialClustering.prototype.setupSpatialClustering = function(spatialClusterContext)
{
	oFF.XObject.prototype.setup.call( this );
	if (oFF.isNull(oFF.AbstractSpatialClustering.ORDER))
	{
		this.createOrder();
	}
	this.m_parameters = oFF.XHashMapByString.create();
	this.m_dimensions = oFF.XList.create();
	this.m_isActive = true;
	this.m_thresholdNumberOfPoints = -1;
	if (oFF.notNull(spatialClusterContext))
	{
		spatialClusterContext.setSpatialClusterSettings(this);
	}
};

oFF.CommandSpaceFactory = {

	s_factory:null,
	createCommandSpaceWithElement:function(application, modelComponent)
	{
			return oFF.CommandSpaceFactory.s_factory.createCommandSpaceWithElement(application, modelComponent);
	},
	createCommandSpaceWithSelection:function(application, sigSelExpression)
	{
			return oFF.CommandSpaceFactory.s_factory.createCommandSpaceWithSelection(application, sigSelExpression);
	},
	setInstance:function(factory)
	{
			oFF.CommandSpaceFactory.s_factory = factory;
	}
};

oFF.CommandSpaceFactoryDummyImpl = function() {};
oFF.CommandSpaceFactoryDummyImpl.prototype = new oFF.XObject();
oFF.CommandSpaceFactoryDummyImpl.prototype._ff_c = "CommandSpaceFactoryDummyImpl";

oFF.CommandSpaceFactoryDummyImpl.create = function()
{
	return new oFF.CommandSpaceFactoryDummyImpl();
};
oFF.CommandSpaceFactoryDummyImpl.prototype.createCommandSpaceWithElement = function(application, modelComponent)
{
	return null;
};
oFF.CommandSpaceFactoryDummyImpl.prototype.createCommandSpaceWithSelection = function(application, sigSelExpression)
{
	return null;
};

oFF.RemoteBlendingCacheEntry = function() {};
oFF.RemoteBlendingCacheEntry.prototype = new oFF.XObject();
oFF.RemoteBlendingCacheEntry.prototype._ff_c = "RemoteBlendingCacheEntry";

oFF.RemoteBlendingCacheEntry.create = function(view, cube, dataSourceName)
{
	let entry = new oFF.RemoteBlendingCacheEntry();
	entry.m_view = view;
	entry.m_cube = cube;
	entry.m_dataSourceName = dataSourceName;
	return entry;
};
oFF.RemoteBlendingCacheEntry.prototype.m_cube = null;
oFF.RemoteBlendingCacheEntry.prototype.m_dataSourceName = null;
oFF.RemoteBlendingCacheEntry.prototype.m_view = null;
oFF.RemoteBlendingCacheEntry.prototype.getCube = function()
{
	return this.m_cube;
};
oFF.RemoteBlendingCacheEntry.prototype.getDataSourceName = function()
{
	return this.m_dataSourceName;
};
oFF.RemoteBlendingCacheEntry.prototype.getView = function()
{
	return this.m_view;
};
oFF.RemoteBlendingCacheEntry.prototype.releaseObject = function()
{
	oFF.XObject.prototype.releaseObject.call( this );
	this.m_view = null;
	this.m_cube = null;
	this.m_dataSourceName = null;
};

oFF.ComponentStateRef = function() {};
oFF.ComponentStateRef.prototype = new oFF.XObject();
oFF.ComponentStateRef.prototype._ff_c = "ComponentStateRef";

oFF.ComponentStateRef.create = function(modCounter, stateId)
{
	let componentStateRef = new oFF.ComponentStateRef();
	componentStateRef.m_modCounter = modCounter;
	componentStateRef.m_stateId = stateId;
	return componentStateRef;
};
oFF.ComponentStateRef.prototype.m_modCounter = 0;
oFF.ComponentStateRef.prototype.m_stateId = null;
oFF.ComponentStateRef.prototype.getModCounter = function()
{
	return this.m_modCounter;
};
oFF.ComponentStateRef.prototype.getStateId = function()
{
	return this.m_stateId;
};
oFF.ComponentStateRef.prototype.toString = function()
{
	return oFF.XStringUtils.concatenate3(oFF.XInteger.convertToString(this.m_modCounter), "-", this.m_stateId);
};

oFF.OlapEnvState = function() {};
oFF.OlapEnvState.prototype = new oFF.XObject();
oFF.OlapEnvState.prototype._ff_c = "OlapEnvState";

oFF.OlapEnvState.create = function()
{
	let olapEnvState = new oFF.OlapEnvState();
	olapEnvState.m_queryManagersState = oFF.XHashMapByString.create();
	return olapEnvState;
};
oFF.OlapEnvState.prototype.filterManagerState = null;
oFF.OlapEnvState.prototype.m_queryManagersState = null;
oFF.OlapEnvState.prototype.sharedObjectsState = null;
oFF.OlapEnvState.prototype.getFilterManagerState = function()
{
	return this.filterManagerState;
};
oFF.OlapEnvState.prototype.getQueryManagersState = function()
{
	return this.m_queryManagersState;
};
oFF.OlapEnvState.prototype.getSharedObjectsState = function()
{
	return this.sharedObjectsState;
};
oFF.OlapEnvState.prototype.setFilterManagerState = function(filterManagerState)
{
	this.filterManagerState = filterManagerState;
};
oFF.OlapEnvState.prototype.setSharedObjectsState = function(sharedObjectsState)
{
	this.sharedObjectsState = sharedObjectsState;
};

oFF.StateStackEntry = function() {};
oFF.StateStackEntry.prototype = new oFF.XObject();
oFF.StateStackEntry.prototype._ff_c = "StateStackEntry";

oFF.StateStackEntry.create = function(uuid, state)
{
	let entry = new oFF.StateStackEntry();
	entry.uuid = uuid;
	entry.state = state;
	entry.olapStateRefs = oFF.XHashSetOfString.create();
	return entry;
};
oFF.StateStackEntry.prototype.olapStateRefs = null;
oFF.StateStackEntry.prototype.state = null;
oFF.StateStackEntry.prototype.uuid = null;
oFF.StateStackEntry.prototype.getName = function()
{
	return this.uuid;
};
oFF.StateStackEntry.prototype.getOlapStateRefs = function()
{
	return this.olapStateRefs;
};
oFF.StateStackEntry.prototype.getState = function()
{
	return this.state;
};

oFF.CustomHierarchySessionData = function() {};
oFF.CustomHierarchySessionData.prototype = new oFF.XObject();
oFF.CustomHierarchySessionData.prototype._ff_c = "CustomHierarchySessionData";

oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA = "CustomHierarchySessionData";
oFF.CustomHierarchySessionData.create = function()
{
	let newObj = new oFF.CustomHierarchySessionData();
	newObj.m_createdCustomHierarchies = oFF.XList.create();
	newObj.m_activeHierarchySubmits = oFF.XList.create();
	return newObj;
};
oFF.CustomHierarchySessionData.prototype.m_activeHierarchySubmits = null;
oFF.CustomHierarchySessionData.prototype.m_createdCustomHierarchies = null;
oFF.CustomHierarchySessionData.prototype.finishHierarchySubmit = function(customHierarchyDefinition, inaHierarchy)
{
	if (oFF.notNull(customHierarchyDefinition) && oFF.notNull(inaHierarchy))
	{
		let extendedHierarchyDefinition = oFF.QCustomHierarchyDefinitionExt.createExtendedHierarchyDefinition(customHierarchyDefinition, inaHierarchy.getPermaCopy());
		this.m_createdCustomHierarchies.removeElement(this.getHierarchyDefinitionByName(customHierarchyDefinition.getName()));
		this.m_createdCustomHierarchies.add(extendedHierarchyDefinition);
	}
	this.notifyListenersOnHierarchySubmit(customHierarchyDefinition, inaHierarchy);
};
oFF.CustomHierarchySessionData.prototype.flagHierarchySubmitActive = function(customHierarchyDefinition)
{
	let activeSubmit = this.getActiveSubmit(customHierarchyDefinition);
	if (oFF.isNull(activeSubmit))
	{
		this.m_activeHierarchySubmits.add(oFF.XPair.create(customHierarchyDefinition, oFF.XList.create()));
	}
};
oFF.CustomHierarchySessionData.prototype.getActiveSubmit = function(customHierarchyDefinition)
{
	for (let i = 0; i < this.m_activeHierarchySubmits.size(); i++)
	{
		let activeSubmit = this.m_activeHierarchySubmits.get(i);
		if (activeSubmit.getFirstObject().isEqualTo(customHierarchyDefinition))
		{
			return activeSubmit;
		}
	}
	return null;
};
oFF.CustomHierarchySessionData.prototype.getHierarchyDefinitionByName = function(hierarchyName)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(hierarchyName))
	{
		for (let i = 0; i < this.m_createdCustomHierarchies.size(); i++)
		{
			let hierarchyDefinition = this.m_createdCustomHierarchies.get(i);
			if (oFF.XString.isEqual(hierarchyDefinition.getName(), hierarchyName))
			{
				return hierarchyDefinition;
			}
		}
	}
	return null;
};
oFF.CustomHierarchySessionData.prototype.getHierarchyDefinitionNames = function()
{
	let hierarchiesNames = oFF.XList.create();
	for (let i = 0; i < this.m_createdCustomHierarchies.size(); i++)
	{
		let customHierarchyName = this.m_createdCustomHierarchies.get(i).getName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(customHierarchyName))
		{
			hierarchiesNames.add(customHierarchyName);
		}
	}
	return hierarchiesNames;
};
oFF.CustomHierarchySessionData.prototype.getHierarchyInAResponse = function(customHierarchyDefinition)
{
	for (let i = 0; i < this.m_createdCustomHierarchies.size(); i++)
	{
		let definition = this.m_createdCustomHierarchies.get(i);
		if (definition.isEqualTo(customHierarchyDefinition))
		{
			return definition.getInaHierarchy().getPermaCopy();
		}
	}
	return null;
};
oFF.CustomHierarchySessionData.prototype.notifyListenersOnHierarchySubmit = function(customHierarchyDefinition, inaHierarchy)
{
	let activeSubmit = this.getActiveSubmit(customHierarchyDefinition);
	if (oFF.notNull(activeSubmit))
	{
		let listeners = activeSubmit.getSecondObject();
		for (let i = 0; i < listeners.size(); i++)
		{
			listeners.get(i).onCustomHierarchySubmitted(customHierarchyDefinition, inaHierarchy);
		}
		this.m_activeHierarchySubmits.removeElement(activeSubmit);
		oFF.XObjectExt.release(activeSubmit);
	}
};
oFF.CustomHierarchySessionData.prototype.registerOnActiveHierarchySubmit = function(customHierarchyDefinition, listener)
{
	let activeSubmit = this.getActiveSubmit(customHierarchyDefinition);
	if (oFF.notNull(activeSubmit))
	{
		activeSubmit.getSecondObject().add(listener);
		return true;
	}
	return false;
};
oFF.CustomHierarchySessionData.prototype.releaseObject = function()
{
	this.m_createdCustomHierarchies = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_createdCustomHierarchies);
	this.m_activeHierarchySubmits = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_activeHierarchySubmits);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.PlanningFactory = {

	s_factory:null,
	createPlanningManager:function(queryManager)
	{
			return oFF.PlanningFactory.s_factory.createPlanningManager(queryManager);
	},
	setInstance:function(factory)
	{
			oFF.PlanningFactory.s_factory = factory;
	}
};

oFF.PlanningManagerDummy = function() {};
oFF.PlanningManagerDummy.prototype = new oFF.XObject();
oFF.PlanningManagerDummy.prototype._ff_c = "PlanningManagerDummy";

oFF.PlanningManagerDummy.create = function(queryManager)
{
	let newObj = new oFF.PlanningManagerDummy();
	newObj.setupExt(queryManager);
	return newObj;
};
oFF.PlanningManagerDummy.prototype.m_messageManager = null;
oFF.PlanningManagerDummy.prototype.addInputReadinessFilterState = function(flag, parameter) {};
oFF.PlanningManagerDummy.prototype.addNewInputEnablementRule = function(mode, reason)
{
	return null;
};
oFF.PlanningManagerDummy.prototype.addPlanningVersionSettings = function(sequenceSettings)
{
	return null;
};
oFF.PlanningManagerDummy.prototype.clearInputEnablementRules = function() {};
oFF.PlanningManagerDummy.prototype.clearInputReadinessFilter = function() {};
oFF.PlanningManagerDummy.prototype.clearVersionAliases = function() {};
oFF.PlanningManagerDummy.prototype.createDataAreaCommand = function(commandType)
{
	return null;
};
oFF.PlanningManagerDummy.prototype.createDataAreaCommandDocReset = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.createDataAreaCommandDocSave = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.createDataAreaCommandRefresh = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.deletePlanningVersionSettings = function(versionIdentifier)
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getAllPlanningVersionSettings = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getDataArea = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getInputEnablementRules = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getInputReadinessCacheMode = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getInputReadinessFilter = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getInputReadinessMainQuery = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getPlanningMode = function()
{
	return oFF.PlanningMode.SERVER_DEFAULT;
};
oFF.PlanningManagerDummy.prototype.getPlanningModel = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getPlanningRestriction = function()
{
	return oFF.PlanningVersionRestrictionType.SERVER_DEFAULT;
};
oFF.PlanningManagerDummy.prototype.getPlanningVersionIdentifier = function(versionId, sharedVersion, versionOwner)
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getPlanningVersionSettings = function(versionIdentifier, sequenceId, useExternalView)
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getPlanningVersionSettingsMode = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getPlanningVersionSettingsSimple = function(versionId, sequenceId, useExternalView)
{
	return null;
};
oFF.PlanningManagerDummy.prototype.getVersionAliases = function()
{
	return null;
};
oFF.PlanningManagerDummy.prototype.hasChangedCells = function()
{
	return false;
};
oFF.PlanningManagerDummy.prototype.hasChangedValueLocks = function()
{
	return false;
};
oFF.PlanningManagerDummy.prototype.hasChangedValues = function()
{
	return false;
};
oFF.PlanningManagerDummy.prototype.hasNewValues = function()
{
	return false;
};
oFF.PlanningManagerDummy.prototype.initializeDataAreaState = function()
{
	return this.m_messageManager;
};
oFF.PlanningManagerDummy.prototype.isDataEntryEnabled = function()
{
	return false;
};
oFF.PlanningManagerDummy.prototype.isDataEntryReadOnly = function()
{
	return true;
};
oFF.PlanningManagerDummy.prototype.isPublicVersionEditPossible = function()
{
	return false;
};
oFF.PlanningManagerDummy.prototype.removeVersionAlias = function(aliasName) {};
oFF.PlanningManagerDummy.prototype.resetNewValues = function() {};
oFF.PlanningManagerDummy.prototype.setDataEntryEnabled = function(dataEntryEnabled) {};
oFF.PlanningManagerDummy.prototype.setDataEntryReadOnly = function(dataEntryReadOnly) {};
oFF.PlanningManagerDummy.prototype.setInputReadinessCacheMode = function(cacheMode) {};
oFF.PlanningManagerDummy.prototype.setInputReadinessFilter = function(mode) {};
oFF.PlanningManagerDummy.prototype.setInputReadinessMainQuery = function(mainQuery) {};
oFF.PlanningManagerDummy.prototype.setPlanningMode = function(planningMode) {};
oFF.PlanningManagerDummy.prototype.setPlanningRestriction = function(restrictionType) {};
oFF.PlanningManagerDummy.prototype.setPlanningVersionSettingsMode = function(settingsMode) {};
oFF.PlanningManagerDummy.prototype.setPublicVersionEditPossible = function(publicVersionEdit) {};
oFF.PlanningManagerDummy.prototype.setVersionAliasById = function(aliasName, versionId) {};
oFF.PlanningManagerDummy.prototype.setupExt = function(queryManager)
{
	this.m_messageManager = oFF.MessageManager.createMessageManagerExt(queryManager.getSession());
};
oFF.PlanningManagerDummy.prototype.supportsDataEntryReadOnly = function()
{
	return false;
};
oFF.PlanningManagerDummy.prototype.transferNewValues = function() {};

oFF.PlanningManagerFactoryDummyImpl = function() {};
oFF.PlanningManagerFactoryDummyImpl.prototype = new oFF.XObject();
oFF.PlanningManagerFactoryDummyImpl.prototype._ff_c = "PlanningManagerFactoryDummyImpl";

oFF.PlanningManagerFactoryDummyImpl.create = function()
{
	return new oFF.PlanningManagerFactoryDummyImpl();
};
oFF.PlanningManagerFactoryDummyImpl.prototype.createPlanningManager = function(queryManager)
{
	return oFF.PlanningManagerDummy.create(queryManager);
};

oFF.QInAConverter = {

	s_lookupAggregationType:null,
	s_lookupAggregationTypeIna:null,
	s_lookupAlertLevelInt:null,
	s_lookupAxisType:null,
	s_lookupAxisTypeIna:null,
	s_lookupCategory:null,
	s_lookupCategoryIna:null,
	s_lookupCellChartOrientation:null,
	s_lookupCellChartOrientationIna:null,
	s_lookupCellChartType:null,
	s_lookupCellChartTypeIna:null,
	s_lookupCellValueType:null,
	s_lookupComparison:null,
	s_lookupComparisonIna:null,
	s_lookupComponentType:null,
	s_lookupComponentTypeIna:null,
	s_lookupCtErrorHandlingMode:null,
	s_lookupCtErrorHandlingModeIna:null,
	s_lookupCurrencyPresentation:null,
	s_lookupCurrencyPresentationIna:null,
	s_lookupDateRangeGranularity:null,
	s_lookupDateRangeGranularityIna:null,
	s_lookupDimensionTypeInt:null,
	s_lookupDimensionVisibilityInt:null,
	s_lookupDocumentIdsAction:null,
	s_lookupDocumentIdsActionIna:null,
	s_lookupDocumentIdsScope:null,
	s_lookupDocumentIdsScopeIna:null,
	s_lookupDocumentSupportType:null,
	s_lookupDocumentSupportTypeIna:null,
	s_lookupEncoding:null,
	s_lookupFilterDisplayInfo:null,
	s_lookupFilterDisplayInfoIna:null,
	s_lookupInfoObjectType:null,
	s_lookupInfoObjectTypeIna:null,
	s_lookupInputEnablementCacheMode:null,
	s_lookupInputEnablementCacheModeIna:null,
	s_lookupInputEnablementRuleMode:null,
	s_lookupInputEnablementRuleModeIna:null,
	s_lookupInputReadinessFilterMode:null,
	s_lookupInputReadinessFilterModeIna:null,
	s_lookupMemberNavigationTypeIna:null,
	s_lookupPresentationType:null,
	s_lookupPresentationTypeIna:null,
	s_lookupProcessingType:null,
	s_lookupProcessingTypeIna:null,
	s_lookupProtocolBindingType:null,
	s_lookupProtocolBindingTypeIna:null,
	s_lookupProviderType:null,
	s_lookupProviderTypeFallbackIna:null,
	s_lookupProviderTypeIna:null,
	s_lookupRateType:null,
	s_lookupRateTypeIna:null,
	s_lookupReadMode:null,
	s_lookupReadModeIna:null,
	s_lookupResultCalculation:null,
	s_lookupResultsetState:null,
	s_lookupReturnedDataSelection:null,
	s_lookupReturnedDataSelectionIna:null,
	s_lookupRunningAggregationOperator:null,
	s_lookupRunningAggregationOperatorIna:null,
	s_lookupRunningTotalOperator:null,
	s_lookupRunningTotalOperatorIna:null,
	s_lookupScaleAndUnitPlacement:null,
	s_lookupScaleAndUnitPlacementIna:null,
	s_lookupScaleFormat:null,
	s_lookupScaleFormatIna:null,
	s_lookupSemanticBindingType:null,
	s_lookupSemanticBindingTypeIna:null,
	s_lookupSignPresentation:null,
	s_lookupSignPresentationIna:null,
	s_lookupSingleValueCalculation:null,
	s_lookupSortType:null,
	s_lookupSortTypeIna:null,
	s_lookupUniqueAxisProperty:null,
	s_lookupUniqueAxisPropertyIna:null,
	s_lookupUnitType:null,
	s_lookupUnitTypeIna:null,
	s_lookupUtErrorHandlingMode:null,
	s_lookupUtErrorHandlingModeIna:null,
	s_lookupUtRateLookup:null,
	s_lookupUtRateLookupIna:null,
	s_lookupValueException:null,
	s_lookupValueType:null,
	s_lookupValueTypeIna:null,
	s_lookupVisibilityType:null,
	s_lookupVisibilityTypeIna:null,
	s_lookupWindowFunctionType:null,
	s_lookupWindowFunctionTypeIna:null,
	s_textTransformation:null,
	s_textTransformationIna:null,
	indexOf:function(array, ffConstant)
	{
			let size = array.size();
		for (let i = 1; i < size; i++)
		{
			if (array.get(i) === ffConstant)
			{
				return i;
			}
		}
		return -1;
	},
	lookupAggregationType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupAggregationType.getByKey(inaConstant);
	},
	lookupAggregationType2:function(inaAggregationType)
	{
			switch (inaAggregationType)
		{
			case 1:
				return oFF.AggregationType.SUM;

			case 2:
				return oFF.AggregationType.COUNT;

			case 3:
				return oFF.AggregationType.MIN;

			case 4:
				return oFF.AggregationType.MAX;

			case 5:
				return oFF.AggregationType.AVERAGE;

			case 6:
				return oFF.AggregationType.COUNT_DISTINCT;

			case 7:
				return oFF.AggregationType.LAST;

			case 8:
				return oFF.AggregationType.FIRST;

			case 9:
				return oFF.AggregationType.VARIANCE;

			case 10:
				return oFF.AggregationType.STANDARD_DEVIATION;

			case 11:
				return oFF.AggregationType.NOP_NULL;

			case 12:
				return oFF.AggregationType.NOP_NULL_ZERO;

			default:
				return null;
		}
	},
	lookupAggregationTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupAggregationTypeIna, ffConstant);
	},
	lookupAlertLevel:function(inaConstant)
	{
			return oFF.QInAConverter.lookupValidOrDefault(inaConstant, 9, null, oFF.QInAConverter.s_lookupAlertLevelInt);
	},
	lookupAlignment:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return oFF.ResultAlignment.NONE;
		}
		else
		{
			switch (inaConstant)
			{
				case "Top":
					return oFF.ResultAlignment.TOP;

				case "Bottom":
					return oFF.ResultAlignment.BOTTOM;

				case "TopBottom":
					return oFF.ResultAlignment.TOPBOTTOM;

				case "Structure":
					return oFF.ResultAlignment.STRUCTURE;

				default:
					return oFF.ResultAlignment.NONE;
			}
		}
	},
	lookupAlignmentInA:function(ffConstant)
	{
			let inaConstant = "None";
		if (ffConstant === oFF.ResultAlignment.TOP)
		{
			inaConstant = "Top";
		}
		else if (ffConstant === oFF.ResultAlignment.BOTTOM)
		{
			inaConstant = "Bottom";
		}
		else if (ffConstant === oFF.ResultAlignment.TOPBOTTOM)
		{
			inaConstant = "TopBottom";
		}
		else if (ffConstant === oFF.ResultAlignment.STRUCTURE)
		{
			inaConstant = "Structure";
		}
		return inaConstant;
	},
	lookupAxisType:function(inaConstant)
	{
			return oFF.QInAConverter.lookupConstantWithDefault(oFF.QInAConverter.s_lookupAxisType, inaConstant, oFF.AxisType.FREE);
	},
	lookupAxisTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupAxisTypeIna, ffConstant);
	},
	lookupAxisTypeInAInt:function(ffConstant)
	{
			let inaConstant = 0;
		if (ffConstant === oFF.AxisType.ROWS)
		{
			inaConstant = 1;
		}
		else if (ffConstant === oFF.AxisType.COLUMNS)
		{
			inaConstant = 2;
		}
		else if (ffConstant === oFF.AxisType.FREE)
		{
			inaConstant = 3;
		}
		return inaConstant;
	},
	lookupAxisTypeInt:function(inaConstant)
	{
			switch (inaConstant)
		{
			case 1:
				return oFF.AxisType.ROWS;

			case 2:
				return oFF.AxisType.COLUMNS;

			default:
				return oFF.AxisType.FREE;
		}
	},
	lookupByEncodedValue:function(inaConstant)
	{
			switch (inaConstant)
		{
			case 2:
				return oFF.UnitType.UNIT;

			case 1:
				return oFF.UnitType.CURRENCY;

			case 0:
				return oFF.UnitType.NONE;

			case -1:
				return oFF.UnitType.MIXED;

			case -2:
				return oFF.UnitType.UNDEFINED;

			case -3:
				return oFF.UnitType.NULL_VALUE;

			default:
				return oFF.UnitType.CONVERSION_FAILED;
		}
	},
	lookupCategory:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupCategory.getByKey(inaConstant);
	},
	lookupCategoryInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupCategoryIna, ffConstant);
	},
	lookupCellChartOrientation:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupCellChartOrientation.getByKey(inaConstant);
	},
	lookupCellChartOrientationInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupCellChartOrientationIna, ffConstant);
	},
	lookupCellChartType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupCellChartType.getByKey(inaConstant);
	},
	lookupCellChartTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupCellChartTypeIna, ffConstant);
	},
	lookupComparison:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupComparison.getByKey(inaConstant);
	},
	lookupComparisonGroup:function(inaConstant, nullAllowed)
	{
			if (oFF.isNull(inaConstant))
		{
			return null;
		}
		switch (inaConstant)
		{
			case "SingleValue":
				return nullAllowed ? oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE_WITH_NULL_ALLOWED : oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE;

			case "Interval":
				return nullAllowed ? oFF.QSetSignComparisonOperatorGroup.INTERVAL_WITH_NULL_ALLOWED : oFF.QSetSignComparisonOperatorGroup.INTERVAL;

			case "Range":
				return nullAllowed ? oFF.QSetSignComparisonOperatorGroup.RANGE_WITH_NULL_ALLOWED : oFF.QSetSignComparisonOperatorGroup.RANGE;

			case "ExtendedRange":
				return nullAllowed ? oFF.QSetSignComparisonOperatorGroup.EXTENDED_RANGE_WITH_NULL_ALLOWED : oFF.QSetSignComparisonOperatorGroup.EXTENDED_RANGE;

			case "Geo":
				return nullAllowed ? oFF.QSetSignComparisonOperatorGroup.GEO_WITH_NULL_ALLOWED : oFF.QSetSignComparisonOperatorGroup.GEO;

			case "HierarchyDescription":
				return nullAllowed ? oFF.QSetSignComparisonOperatorGroup.HIERARCHY_DESCRIPTION_WITH_NULL_ALLOWED : oFF.QSetSignComparisonOperatorGroup.HIERARCHY_DESCRIPTION;

			case "HierarchyNameAttributes":
				return nullAllowed ? oFF.QSetSignComparisonOperatorGroup.HIERARCHY_NAME_ATTRIBUTES_WITH_NULL_ALLOWED : oFF.QSetSignComparisonOperatorGroup.HIERARCHY_NAME_ATTRIBUTES;

			default:
				return null;
		}
	},
	lookupComparisonGroupInA:function(ffConstant)
	{
			let inaConstant = null;
		if (oFF.notNull(ffConstant))
		{
			if (oFF.XString.startsWith(ffConstant.getName(), oFF.QSetSignComparisonOperatorGroup.INTERVAL.getName()))
			{
				inaConstant = "Interval";
			}
			else if (oFF.XString.startsWith(ffConstant.getName(), oFF.QSetSignComparisonOperatorGroup.RANGE.getName()))
			{
				inaConstant = "Range";
			}
			else if (oFF.XString.startsWith(ffConstant.getName(), oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE.getName()))
			{
				inaConstant = "SingleValue";
			}
			else if (oFF.XString.startsWith(ffConstant.getName(), oFF.QSetSignComparisonOperatorGroup.EXTENDED_RANGE.getName()))
			{
				inaConstant = "ExtendedRange";
			}
			else if (oFF.XString.startsWith(ffConstant.getName(), oFF.QSetSignComparisonOperatorGroup.GEO.getName()))
			{
				inaConstant = "Geo";
			}
			else if (oFF.XString.startsWith(ffConstant.getName(), oFF.QSetSignComparisonOperatorGroup.HIERARCHY_DESCRIPTION.getName()))
			{
				inaConstant = "HierarchyDescription";
			}
			else if (oFF.XString.startsWith(ffConstant.getName(), oFF.QSetSignComparisonOperatorGroup.HIERARCHY_NAME_ATTRIBUTES.getName()))
			{
				inaConstant = "HierarchyNameAttributes";
			}
		}
		return inaConstant;
	},
	lookupComparisonInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupComparisonIna, ffConstant);
	},
	lookupComponentType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupComponentType.getByKey(inaConstant);
	},
	lookupComponentTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupComponentTypeIna, ffConstant);
	},
	lookupConfigLevel:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return oFF.QModelLevel.NONE;
		}
		else
		{
			switch (inaConstant)
			{
				case "Query":
					return oFF.QModelLevel.QUERY;

				case "Axis":
					return oFF.QModelLevel.AXES;

				case "Dimension":
					return oFF.QModelLevel.DIMENSIONS;

				default:
					return oFF.QModelLevel.NONE;
			}
		}
	},
	lookupConfigLevelInA:function(ffConstant)
	{
			let inaConstant = "None";
		if (ffConstant === oFF.QModelLevel.QUERY)
		{
			inaConstant = "Query";
		}
		else if (ffConstant === oFF.QModelLevel.AXES)
		{
			inaConstant = "Axis";
		}
		else if (ffConstant === oFF.QModelLevel.DIMENSIONS)
		{
			inaConstant = "Dimension";
		}
		return inaConstant;
	},
	lookupConstantWithDefault:function(map, key, defaultConstant)
	{
			let ffConstant = map.getByKey(key);
		return oFF.isNull(ffConstant) ? defaultConstant : ffConstant;
	},
	lookupContextNameForProvider:function(ffConstant)
	{
			let inaConstant;
		if (ffConstant === oFF.ProviderType.PLANNING || ffConstant === oFF.ProviderType.PLANNING_VALUE_HELP)
		{
			inaConstant = "Planning";
		}
		else if (ffConstant === oFF.ProviderType.LIST_REPORTING)
		{
			inaConstant = "ListReporting";
		}
		else
		{
			inaConstant = "Analytics";
		}
		return inaConstant;
	},
	lookupCtErrorHandlingMode:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupCtErrorHandlingMode.getByKey(inaConstant);
	},
	lookupCtErrorHandlingModeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupCtErrorHandlingModeIna, ffConstant);
	},
	lookupCurrencyPresentation:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupCurrencyPresentation.getByKey(inaConstant);
	},
	lookupCurrencyPresentationInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupCurrencyPresentationIna, ffConstant);
	},
	lookupDateRangeGranularity:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupDateRangeGranularity.getByKey(inaConstant);
	},
	lookupDateRangeGranularityInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupDateRangeGranularityIna, ffConstant);
	},
	lookupDimensionType:function(inaConstant)
	{
			if (inaConstant === -2)
		{
			return oFF.DimensionType.CALCULATED_DIMENSION;
		}
		else if (inaConstant === -3)
		{
			return oFF.DimensionType.FORMULA_CALCULATED_DIMENSION;
		}
		else if (inaConstant === -1)
		{
			return oFF.DimensionType.VIRTUAL;
		}
		else if (inaConstant < 1 || inaConstant === 3)
		{
			return oFF.DimensionType.DIMENSION;
		}
		else if (inaConstant > 13)
		{
			throw oFF.XException.createIllegalStateException("Unknown dimension type");
		}
		else
		{
			return oFF.QInAConverter.s_lookupDimensionTypeInt.get(inaConstant);
		}
	},
	lookupDimensionTypeInA:function(ffConstant)
	{
			let inaConstant;
		if (ffConstant === oFF.DimensionType.CALCULATED_DIMENSION)
		{
			inaConstant = -2;
		}
		else if (ffConstant.isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
		{
			inaConstant = -3;
		}
		else if (ffConstant.isTypeOf(oFF.DimensionType.VIRTUAL))
		{
			inaConstant = -1;
		}
		else
		{
			inaConstant = oFF.QInAConverter.indexOf(oFF.QInAConverter.s_lookupDimensionTypeInt, ffConstant);
			if (inaConstant === -1)
			{
				throw oFF.XException.createIllegalStateException("Unknown dimension type");
			}
		}
		return inaConstant;
	},
	lookupDimensionVisibility:function(inaConstant)
	{
			if (inaConstant === 0)
		{
			return oFF.DimensionVisibility.VISIBLE;
		}
		if (inaConstant === 1)
		{
			return oFF.DimensionVisibility.METADATA;
		}
		if (inaConstant === 2)
		{
			return oFF.DimensionVisibility.HIDDEN;
		}
		throw oFF.XException.createIllegalStateException("Unknown dimension visibility");
	},
	lookupDimensionVisibilityIna:function(visibility)
	{
			if (visibility === oFF.DimensionVisibility.VISIBLE)
		{
			return 0;
		}
		if (visibility === oFF.DimensionVisibility.METADATA)
		{
			return 1;
		}
		if (visibility === oFF.DimensionVisibility.HIDDEN)
		{
			return 2;
		}
		throw oFF.XException.createIllegalStateException("Unknown dimension visibility");
	},
	lookupDocumentsIdsAction:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupDocumentIdsAction.getByKey(inaConstant);
	},
	lookupDocumentsIdsActionInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupDocumentIdsActionIna, ffConstant);
	},
	lookupDocumentsIdsScope:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupDocumentIdsScope.getByKey(inaConstant);
	},
	lookupDocumentsIdsScopeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupDocumentIdsScopeIna, ffConstant);
	},
	lookupDocumentsSupportType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupDocumentSupportType.getByKey(inaConstant);
	},
	lookupDocumentsSupportTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupDocumentSupportTypeIna, ffConstant);
	},
	lookupDrillState:function(inaConstant, convertUdhDrillStates)
	{
			switch (inaConstant)
		{
			case 2:
				return oFF.DrillState.COLLAPSED;

			case 3:
				return oFF.DrillState.EXPANDED;

			case 1:
				return oFF.DrillState.LEAF;

			case 4:
				return convertUdhDrillStates ? oFF.DrillState.EXPANDED : oFF.DrillState.DRILLED;

			case 100:
				return convertUdhDrillStates ? oFF.DrillState.EXPANDED : oFF.DrillState.LEAF_DRILLDOWN_ALLOWED;

			case 101:
				return convertUdhDrillStates ? oFF.DrillState.EXPANDED : oFF.DrillState.LEAF_UDH_EXPAND_ALLOWED;

			case 102:
				return convertUdhDrillStates ? oFF.DrillState.LEAF : oFF.DrillState.LEAF_UDH;

			case 103:
				return convertUdhDrillStates ? oFF.DrillState.COLLAPSED : oFF.DrillState.COLLAPSED_EXPAND_AND_DRILLDOWN_ALLOWED;

			default:
				return null;
		}
	},
	lookupDrillStateInA:function(ffConstant)
	{
			let inaConstant = null;
		if (ffConstant === oFF.DrillState.COLLAPSED)
		{
			inaConstant = "Collapsed";
		}
		else if (ffConstant === oFF.DrillState.EXPANDED)
		{
			inaConstant = "Expanded";
		}
		else if (ffConstant === oFF.DrillState.DRILLED)
		{
			inaConstant = "Drilled";
		}
		return inaConstant;
	},
	lookupDrillStateOp:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return null;
		}
		switch (inaConstant)
		{
			case "Collapsed":
				return oFF.DrillState.COLLAPSED;

			case "Expanded":
				return oFF.DrillState.EXPANDED;

			case "Drilled":
				return oFF.DrillState.DRILLED;

			default:
				return null;
		}
	},
	lookupEncoding:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupEncoding.getByKey(inaConstant);
	},
	lookupException:function(inaConstant)
	{
			return oFF.QInAConverter.lookupValidOrDefault(inaConstant, 10, oFF.ValueException.ERROR, oFF.QInAConverter.s_lookupValueException);
	},
	lookupFallbackServiceNameForProvider:function(ffConstant)
	{
			let inaConstant = null;
		if (ffConstant === oFF.ProviderType.ANALYTICS || ffConstant === oFF.ProviderType.ANALYTICS_VALUE_HELP || ffConstant === oFF.ProviderType.PLANNING || ffConstant === oFF.ProviderType.CATALOG)
		{
			inaConstant = oFF.ServerService.ANALYTIC;
		}
		return inaConstant;
	},
	lookupFieldLayoutType:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return oFF.FieldLayoutType.FIELD_BASED;
		}
		else
		{
			switch (inaConstant)
			{
				case "AttributeBased":
					return oFF.FieldLayoutType.ATTRIBUTE_BASED;

				case "AttributesAndPresentations":
					return oFF.FieldLayoutType.ATTRIBUTES_AND_PRESENTATIONS;

				default:
					return oFF.FieldLayoutType.FIELD_BASED;
			}
		}
	},
	lookupFieldLayoutTypeInA:function(ffConstant)
	{
			let inaConstant = "FieldBased";
		if (ffConstant === oFF.FieldLayoutType.ATTRIBUTE_BASED)
		{
			inaConstant = "AttributeBased";
		}
		else if (ffConstant === oFF.FieldLayoutType.ATTRIBUTES_AND_PRESENTATIONS)
		{
			inaConstant = "AttributesAndPresentations";
		}
		return inaConstant;
	},
	lookupFilterDisplayInfo:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupFilterDisplayInfo.getByKey(inaConstant);
	},
	lookupFilterDisplayInfoInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupFilterDisplayInfoIna, ffConstant);
	},
	lookupFrameEndType:function(inaFrameEndType)
	{
			if (oFF.isNull(inaFrameEndType))
		{
			return oFF.FrameEndType.CURRENT_ROW;
		}
		else
		{
			switch (inaFrameEndType)
			{
				case "UNBOUNDED FOLLOWING":
					return oFF.FrameEndType.UNBOUNDED_FOLLOWING;

				case "FOLLOWING":
					return oFF.FrameEndType.FOLLOWING;

				default:
					return oFF.FrameEndType.CURRENT_ROW;
			}
		}
	},
	lookupFrameEndTypeInA:function(ffConstant)
	{
			let inaConstant = "CURRENT ROW";
		if (ffConstant === oFF.FrameEndType.UNBOUNDED_FOLLOWING)
		{
			inaConstant = "UNBOUNDED FOLLOWING";
		}
		else if (ffConstant === oFF.FrameEndType.FOLLOWING)
		{
			inaConstant = "FOLLOWING";
		}
		return inaConstant;
	},
	lookupFrameStartType:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return oFF.FrameStartType.UNBOUNDED_PRECEDING;
		}
		else
		{
			switch (inaConstant)
			{
				case "CURRENT ROW":
					return oFF.FrameStartType.CURRENT_ROW;

				case "PRECEDING":
					return oFF.FrameStartType.PRECEDING;

				default:
					return oFF.FrameStartType.UNBOUNDED_PRECEDING;
			}
		}
	},
	lookupFrameStartTypeInA:function(ffConstant)
	{
			let inaConstant = "UNBOUNDED PRECEDING";
		if (ffConstant === oFF.FrameStartType.CURRENT_ROW)
		{
			inaConstant = "CURRENT ROW";
		}
		else if (ffConstant === oFF.FrameStartType.PRECEDING)
		{
			inaConstant = "PRECEDING";
		}
		return inaConstant;
	},
	lookupHierarchyLevelType:function(inaConstant)
	{
			switch (inaConstant)
		{
			case 1:
				return oFF.HierarchyLevelType.ALL;

			case 20:
				return oFF.HierarchyLevelType.TIME_YEAR;

			case 36:
				return oFF.HierarchyLevelType.TIME_HALF_YEAR;

			case 68:
				return oFF.HierarchyLevelType.TIME_QUARTER;

			case 132:
				return oFF.HierarchyLevelType.TIME_MONTH;

			case 260:
				return oFF.HierarchyLevelType.TIME_WEEK;

			case 516:
				return oFF.HierarchyLevelType.TIME_DAY;

			case 772:
				return oFF.HierarchyLevelType.TIME_HOUR;

			case 1028:
				return oFF.HierarchyLevelType.TIME_MINUTE;

			case 2052:
				return oFF.HierarchyLevelType.TIME_SECOND;

			default:
				return oFF.HierarchyLevelType.REGULAR;
		}
	},
	lookupHierarchyLevelTypeIna:function(ffConstant)
	{
			let inaConstant;
		if (ffConstant === oFF.HierarchyLevelType.ALL)
		{
			inaConstant = 1;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_YEAR)
		{
			inaConstant = 20;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_HALF_YEAR)
		{
			inaConstant = 36;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_QUARTER)
		{
			inaConstant = 68;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_MONTH)
		{
			inaConstant = 132;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_WEEK)
		{
			inaConstant = 260;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_DAY)
		{
			inaConstant = 516;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_HOUR)
		{
			inaConstant = 772;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_MINUTE)
		{
			inaConstant = 1028;
		}
		else if (ffConstant === oFF.HierarchyLevelType.TIME_SECOND)
		{
			inaConstant = 2052;
		}
		else
		{
			inaConstant = 0;
		}
		return inaConstant;
	},
	lookupInAString:function(map, ffConstant)
	{
			return oFF.isNull(ffConstant) ? null : map.getByKey(ffConstant.getName());
	},
	lookupInfoObjectType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupInfoObjectType.getByKey(inaConstant);
	},
	lookupInfoObjectTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupInfoObjectTypeIna, ffConstant);
	},
	lookupInputCacheMode:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupInputEnablementCacheMode.getByKey(inaConstant);
	},
	lookupInputEnablementCacheModeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupInputEnablementCacheModeIna, ffConstant);
	},
	lookupInputEnablementMode:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupInputEnablementRuleMode.getByKey(inaConstant);
	},
	lookupInputEnablementModeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupInputEnablementRuleModeIna, ffConstant);
	},
	lookupInputReadinessFilterMode:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupInputReadinessFilterMode.getByKey(inaConstant);
	},
	lookupInputReadinessFilterModeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupInputReadinessFilterModeIna, ffConstant);
	},
	lookupIntByValueType:function(ffConstant)
	{
			let inaEncoded = oFF.QInAConverter.indexOf(oFF.QInAConverter.s_lookupCellValueType, ffConstant);
		return inaEncoded === -1 ? 0 : inaEncoded;
	},
	lookupLowerLevelNodeAlignment:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return oFF.Alignment.DEFAULT_VALUE;
		}
		else
		{
			switch (inaConstant)
			{
				case "Above":
					return oFF.Alignment.CHILDREN_ABOVE_PARENT;

				case "Below":
					return oFF.Alignment.CHILDREN_BELOW_PARENT;

				case "InheritFromFirstDimensionOnAxis":
					return oFF.Alignment.INHERIT_FROM_FIRST_DIMENSION_ON_AXIS;

				default:
					return oFF.Alignment.DEFAULT_VALUE;
			}
		}
	},
	lookupLowerLevelNodeAlignmentInA:function(ffConstant)
	{
			let inaConstant = "Default";
		if (ffConstant === oFF.Alignment.CHILDREN_ABOVE_PARENT)
		{
			inaConstant = "Above";
		}
		else if (ffConstant === oFF.Alignment.CHILDREN_BELOW_PARENT)
		{
			inaConstant = "Below";
		}
		else if (ffConstant === oFF.Alignment.INHERIT_FROM_FIRST_DIMENSION_ON_AXIS)
		{
			inaConstant = "InheritFromFirstDimensionOnAxis";
		}
		return inaConstant;
	},
	lookupLowerLevelNodeAlignmentInA2:function(ffConstant)
	{
			let inaConstant = "Default";
		if (ffConstant === oFF.Alignment.CHILDREN_ABOVE_PARENT)
		{
			inaConstant = "Below";
		}
		else if (ffConstant === oFF.Alignment.CHILDREN_BELOW_PARENT)
		{
			inaConstant = "Above";
		}
		return inaConstant;
	},
	lookupMeasureStructureMemberType:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return null;
		}
		switch (inaConstant)
		{
			case "Measure":
				return oFF.MemberType.MEASURE;

			case "SelectionMeasure":
				return oFF.MemberType.RESTRICTED_MEASURE;

			case "FormulaMeasure":
				return oFF.MemberType.FORMULA;

			case "VarianceMeasure":
				return oFF.MemberType.VARIANCE;

			case "ExceptionAggregationMeasure":
				return oFF.MemberType.EXCEPTION_AGGREGATION;

			case "CurrencyMeasure":
				return oFF.MemberType.CURRENCY_MEASURE;

			case "UnitMeasure":
				return oFF.MemberType.UNIT_MEASURE;

			case "RunningTotal":
				return oFF.MemberType.RUNNING_TOTAL;

			case "ParetoMeasure":
				return oFF.MemberType.PARETO;

			default:
				return null;
		}
	},
	lookupMeasureStructureMemberTypeIna:function(ffConstant)
	{
			let inaConstant = null;
		if (oFF.notNull(ffConstant))
		{
			if (ffConstant === oFF.MemberType.RESTRICTED_MEASURE)
			{
				inaConstant = "SelectionMeasure";
			}
			else if (ffConstant === oFF.MemberType.FORMULA)
			{
				inaConstant = "FormulaMeasure";
			}
			else if (ffConstant === oFF.MemberType.VARIANCE)
			{
				inaConstant = "VarianceMeasure";
			}
			else if (ffConstant === oFF.MemberType.EXCEPTION_AGGREGATION)
			{
				inaConstant = "ExceptionAggregationMeasure";
			}
			else if (ffConstant === oFF.MemberType.CURRENCY_MEASURE)
			{
				inaConstant = "CurrencyMeasure";
			}
			else if (ffConstant === oFF.MemberType.UNIT_MEASURE)
			{
				inaConstant = "UnitMeasure";
			}
			else if (ffConstant === oFF.MemberType.RUNNING_TOTAL)
			{
				inaConstant = "RunningTotal";
			}
			else if (ffConstant === oFF.MemberType.PARETO)
			{
				inaConstant = "ParetoMeasure";
			}
			else
			{
				inaConstant = "Measure";
			}
		}
		return inaConstant;
	},
	lookupMeasureStructureMemberTypeInaForUniversalModels:function(ffConstant)
	{
			let inaConstant;
		if (oFF.isNull(ffConstant))
		{
			inaConstant = -1;
		}
		else if (ffConstant === oFF.MemberType.FORMULA)
		{
			inaConstant = 0;
		}
		else if (ffConstant === oFF.MemberType.RESTRICTED_MEASURE)
		{
			inaConstant = 1;
		}
		else
		{
			inaConstant = 2;
		}
		return inaConstant;
	},
	lookupMemberNavigationTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupMemberNavigationTypeIna, ffConstant);
	},
	lookupMemberType:function(inaConstant)
	{
			switch (inaConstant)
		{
			case 1:
				return oFF.MemberType.RESULT;

			case 2:
				return oFF.MemberType.CONDITION_RESULT;

			case 3:
				return oFF.MemberType.CONDITION_OTHERS_RESULT;

			case 4:
				return oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT;

			default:
				return oFF.MemberType.MEMBER;
		}
	},
	lookupNullsType:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return null;
		}
		else
		{
			switch (inaConstant)
			{
				case "FIRST":
					return oFF.NullsType.FIRST;

				case "LAST":
					return oFF.NullsType.LAST;

				default:
					return oFF.NullsType.NONE;
			}
		}
	},
	lookupNullsTypeInA:function(ffConstant)
	{
			let inaConstant = null;
		if (ffConstant === oFF.NullsType.FIRST)
		{
			inaConstant = "FIRST";
		}
		else if (ffConstant === oFF.NullsType.LAST)
		{
			inaConstant = "LAST";
		}
		return inaConstant;
	},
	lookupOperatorInA:function(ffConstant)
	{
			let inaConstant = null;
		if (oFF.notNull(ffConstant))
		{
			inaConstant = ffConstant === oFF.ComparisonOperator.EQUAL ? "=" : ffConstant.getDisplayString();
		}
		return inaConstant;
	},
	lookupPresentationType:function(inaConstant)
	{
			return oFF.QInAConverter.lookupConstantWithDefault(oFF.QInAConverter.s_lookupPresentationType, inaConstant, oFF.PresentationType.VALUE);
	},
	lookupPresentationTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupPresentationTypeIna, ffConstant);
	},
	lookupProcessingType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupProcessingType.getByKey(inaConstant);
	},
	lookupProcessingTypeIna:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupProcessingTypeIna, ffConstant);
	},
	lookupProtocolBindingType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupProtocolBindingType.getByKey(inaConstant);
	},
	lookupProtocolBindingTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupProtocolBindingTypeIna, ffConstant);
	},
	lookupRateType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupRateType.getByKey(inaConstant);
	},
	lookupRateTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupRateTypeIna, ffConstant);
	},
	lookupReadMode:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupReadMode.getByKey(inaConstant);
	},
	lookupReadModeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupReadModeIna, ffConstant);
	},
	lookupReordering:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return oFF.ReorderingCapability.NONE;
		}
		else
		{
			switch (inaConstant)
			{
				case "Full":
					return oFF.ReorderingCapability.FULL;

				case "Restricted":
					return oFF.ReorderingCapability.RESTRICTED;

				default:
					return oFF.ReorderingCapability.NONE;
			}
		}
	},
	lookupReorderingInA:function(ffConstant)
	{
			let inaConstant = "None";
		if (ffConstant === oFF.ReorderingCapability.FULL)
		{
			inaConstant = "Full";
		}
		else if (ffConstant === oFF.ReorderingCapability.RESTRICTED)
		{
			inaConstant = "Restricted";
		}
		return inaConstant;
	},
	lookupResultCalculation:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupResultCalculation.getByKey(inaConstant);
	},
	lookupResultSetState:function(inaConstant)
	{
			return oFF.QInAConverter.lookupValidOrDefault(inaConstant, 6, oFF.ResultSetState.ERROR, oFF.QInAConverter.s_lookupResultsetState);
	},
	lookupResultSetVisibility:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return oFF.ResultVisibility.HIDDEN;
		}
		else
		{
			switch (inaConstant)
			{
				case "Visible":
					return oFF.ResultVisibility.VISIBLE;

				case "Conditional":
					return oFF.ResultVisibility.CONDITIONAL;

				case "Always":
					return oFF.ResultVisibility.ALWAYS;

				case "HiddenDescSelfAfter":
					return oFF.ResultVisibility.HIDDEN_DESCENDANTS_SELF_AFTER;

				default:
					return oFF.ResultVisibility.HIDDEN;
			}
		}
	},
	lookupResultSetVisibilityInA:function(ffConstant)
	{
			let inaConstant = "Hidden";
		if (ffConstant === oFF.ResultVisibility.VISIBLE)
		{
			inaConstant = "Visible";
		}
		else if (ffConstant === oFF.ResultVisibility.CONDITIONAL)
		{
			inaConstant = "Conditional";
		}
		else if (ffConstant === oFF.ResultVisibility.ALWAYS)
		{
			inaConstant = "Always";
		}
		else if (ffConstant === oFF.ResultVisibility.HIDDEN_DESCENDANTS_SELF_AFTER)
		{
			inaConstant = "HiddenDescSelfAfter";
		}
		return inaConstant;
	},
	lookupResultStructureElement:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return null;
		}
		else
		{
			switch (inaConstant)
			{
				case "Members":
					return oFF.ResultStructureElement.MEMBERS;

				case "Total":
					return oFF.ResultStructureElement.TOTAL;

				case "TotalIncludedMembers":
					return oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS;

				case "TotalRemainingMembers":
					return oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS;

				case "Others":
					return oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS;

				case "OthersDetailsFromConditions":
					return oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS;

				default:
					return null;
			}
		}
	},
	lookupResultStructureElementInA:function(ffConstant)
	{
			let inaConstant = null;
		if (ffConstant === oFF.ResultStructureElement.MEMBERS)
		{
			inaConstant = "Members";
		}
		else if (ffConstant === oFF.ResultStructureElement.TOTAL)
		{
			inaConstant = "Total";
		}
		else if (ffConstant === oFF.ResultStructureElement.TOTAL_INCLUDED_MEMBERS)
		{
			inaConstant = "TotalIncludedMembers";
		}
		else if (ffConstant === oFF.ResultStructureElement.TOTAL_REMAINING_MEMBERS)
		{
			inaConstant = "TotalRemainingMembers";
		}
		else if (ffConstant === oFF.ResultStructureElement.OTHERS_FROM_CONDITIONS)
		{
			inaConstant = "Others";
		}
		else if (ffConstant === oFF.ResultStructureElement.OTHERS_DETAILS_FROM_CONDITIONS)
		{
			inaConstant = "OthersDetailsFromConditions";
		}
		return inaConstant;
	},
	lookupResultsetMemberTypeInA:function(ffConstant)
	{
			let inaConstant = 0;
		if (ffConstant === oFF.MemberType.RESULT)
		{
			inaConstant = 1;
		}
		else if (ffConstant === oFF.MemberType.CONDITION_RESULT)
		{
			inaConstant = 2;
		}
		else if (ffConstant === oFF.MemberType.CONDITION_OTHERS_RESULT)
		{
			inaConstant = 3;
		}
		else if (ffConstant === oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT)
		{
			inaConstant = 4;
		}
		return inaConstant;
	},
	lookupReturnedDataSelection:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupReturnedDataSelection.getByKey(inaConstant);
	},
	lookupReturnedDataSelectionInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupReturnedDataSelectionIna, ffConstant);
	},
	lookupRsSetSign:function(inaConstant)
	{
			if (oFF.isNull(inaConstant))
		{
			return null;
		}
		switch (inaConstant)
		{
			case "I":
				return oFF.SetSign.INCLUDING;

			case "E":
				return oFF.SetSign.EXCLUDING;
		}
		return null;
	},
	lookupRunningAggregationOperator:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupRunningAggregationOperator.getByKey(inaConstant);
	},
	lookupRunningAggregationOperatorInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupRunningAggregationOperatorIna, ffConstant);
	},
	lookupRunningTotalOperator:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupRunningTotalOperator.getByKey(inaConstant);
	},
	lookupRunningTotalOperatorInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupRunningTotalOperatorIna, ffConstant);
	},
	lookupScaleAndUnitPlacement:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupScaleAndUnitPlacement.getByKey(inaConstant);
	},
	lookupScaleAndUnitPlacementInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupScaleAndUnitPlacementIna, ffConstant);
	},
	lookupScaleFormat:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupScaleFormat.getByKey(inaConstant);
	},
	lookupScaleFormatInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupScaleFormatIna, ffConstant);
	},
	lookupSemanticBindingType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupSemanticBindingType.getByKey(inaConstant);
	},
	lookupSemanticBindingTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupSemanticBindingTypeIna, ffConstant);
	},
	lookupServiceNameForProvider:function(ffConstant)
	{
			return oFF.QInAConverter.s_lookupProviderTypeIna.getByKey(ffConstant.getName());
	},
	lookupSignPresentation:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupSignPresentation.getByKey(inaConstant);
	},
	lookupSignPresentationInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupSignPresentationIna, ffConstant);
	},
	lookupSingleValueCalculation:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupSingleValueCalculation.getByKey(inaConstant);
	},
	lookupSortDirection:function(inaConstant)
	{
			switch (inaConstant)
		{
			case 1:
				return oFF.XSortDirection.ASCENDING;

			case 2:
				return oFF.XSortDirection.DESCENDING;

			case 3:
				return oFF.XSortDirection.NONE;

			default:
				return oFF.XSortDirection.DEFAULT_VALUE;
		}
	},
	lookupSortDirection2:function(inaConstant)
	{
			if (oFF.XString.isEqual("Asc", inaConstant))
		{
			return oFF.XSortDirection.ASCENDING;
		}
		else if (oFF.XString.isEqual("Desc", inaConstant))
		{
			return oFF.XSortDirection.DESCENDING;
		}
		else
		{
			return oFF.XSortDirection.NONE;
		}
	},
	lookupSortDirectionInA:function(ffConstant)
	{
			let inaConstant;
		if (ffConstant === oFF.XSortDirection.ASCENDING)
		{
			inaConstant = 1;
		}
		else if (ffConstant === oFF.XSortDirection.DESCENDING)
		{
			inaConstant = 2;
		}
		else if (ffConstant === oFF.XSortDirection.NONE)
		{
			inaConstant = 3;
		}
		else
		{
			inaConstant = 0;
		}
		return inaConstant;
	},
	lookupSortDirectionInA2:function(ffConstant)
	{
			let inaConstant;
		if (ffConstant === oFF.XSortDirection.ASCENDING)
		{
			inaConstant = "Asc";
		}
		else if (ffConstant === oFF.XSortDirection.DESCENDING)
		{
			inaConstant = "Desc";
		}
		else
		{
			inaConstant = "None";
		}
		return inaConstant;
	},
	lookupSortType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupSortType.getByKey(inaConstant);
	},
	lookupSortTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupSortTypeIna, ffConstant);
	},
	lookupSuppressionType:function(inaConstant)
	{
			switch (inaConstant)
		{
			case 1:
				return oFF.ZeroSuppressionType.TOTAL_IS_ZERO;

			case 2:
				return oFF.ZeroSuppressionType.ALL_CELLS_ARE_ZERO;

			case 3:
				return oFF.ZeroSuppressionType.ALL_CELLS_ARE_NULL;

			default:
				return oFF.ZeroSuppressionType.NONE;
		}
	},
	lookupSuppressionTypeInA:function(ffConstant)
	{
			let inaConstant = 0;
		if (ffConstant === oFF.ZeroSuppressionType.TOTAL_IS_ZERO)
		{
			inaConstant = 1;
		}
		else if (ffConstant === oFF.ZeroSuppressionType.ALL_CELLS_ARE_ZERO)
		{
			inaConstant = 2;
		}
		else if (ffConstant === oFF.ZeroSuppressionType.ALL_CELLS_ARE_NULL)
		{
			inaConstant = 3;
		}
		return inaConstant;
	},
	lookupTextTransformation:function(inaConstant)
	{
			return oFF.QInAConverter.s_textTransformation.getByKey(inaConstant);
	},
	lookupTextTransformationInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_textTransformationIna, ffConstant);
	},
	lookupUniqueAxisProperty:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupUniqueAxisProperty.getByKey(inaConstant);
	},
	lookupUniqueAxisPropertyInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupUniqueAxisPropertyIna, ffConstant);
	},
	lookupUnitType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupUnitType.getByKey(inaConstant);
	},
	lookupUnitTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupUnitTypeIna, ffConstant);
	},
	lookupUtErrorHandlingMode:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupUtErrorHandlingMode.getByKey(inaConstant);
	},
	lookupUtErrorHandlingModeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupUtErrorHandlingModeIna, ffConstant);
	},
	lookupUtRateLookup:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupUtRateLookup.getByKey(inaConstant);
	},
	lookupUtRateLookupInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupUtRateLookupIna, ffConstant);
	},
	lookupValidOrDefault:function(actual, max, defaultConstant, constants)
	{
			return actual < 0 || actual > max ? defaultConstant : constants.get(actual);
	},
	lookupValueType:function(inaConstant)
	{
			return oFF.QInAConverter.lookupConstantWithDefault(oFF.QInAConverter.s_lookupValueType, inaConstant, oFF.XValueType.UNSUPPORTED);
	},
	lookupValueTypeByInt:function(inaConstant)
	{
			return oFF.QInAConverter.lookupValidOrDefault(inaConstant, 14, oFF.XValueType.DOUBLE, oFF.QInAConverter.s_lookupCellValueType);
	},
	lookupValueTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupValueTypeIna, ffConstant);
	},
	lookupVisibilityType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupVisibilityType.getByKey(inaConstant);
	},
	lookupVisibilityTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupVisibilityTypeIna, ffConstant);
	},
	lookupWindowFunctionType:function(inaConstant)
	{
			return oFF.QInAConverter.s_lookupWindowFunctionType.getByKey(inaConstant);
	},
	lookupWindowFunctionTypeInA:function(ffConstant)
	{
			return oFF.QInAConverter.lookupInAString(oFF.QInAConverter.s_lookupWindowFunctionTypeIna, ffConstant);
	},
	mapAggregationType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAggregationType, oFF.QInAConverter.s_lookupAggregationTypeIna, ffConstant, inaConstant);
	},
	mapCategory:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupCategory, oFF.QInAConverter.s_lookupCategoryIna, ffConstant, inaConstant);
	},
	mapCellChartOrientation:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupCellChartOrientation, oFF.QInAConverter.s_lookupCellChartOrientationIna, ffConstant, inaConstant);
	},
	mapCellChartType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupCellChartType, oFF.QInAConverter.s_lookupCellChartTypeIna, ffConstant, inaConstant);
	},
	mapComparison:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.s_lookupComparison.put(inaConstant, ffConstant);
		if (!oFF.QInAConverter.s_lookupComparisonIna.containsKey(ffConstant.getName()))
		{
			oFF.QInAConverter.s_lookupComparisonIna.put(ffConstant.getName(), inaConstant);
		}
	},
	mapComponentType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupComponentType, oFF.QInAConverter.s_lookupComponentTypeIna, ffConstant, inaConstant);
	},
	mapConstant:function(mapToEnum, mapToIna, ffConstant, inaConstant)
	{
			mapToEnum.put(inaConstant, ffConstant);
		mapToIna.put(ffConstant.getName(), inaConstant);
	},
	mapCtErrorHandlingMode:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupCtErrorHandlingMode, oFF.QInAConverter.s_lookupCtErrorHandlingModeIna, ffConstant, inaConstant);
	},
	mapCurrencyPresentation:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupCurrencyPresentation, oFF.QInAConverter.s_lookupCurrencyPresentationIna, ffConstant, inaConstant);
	},
	mapDateRangeGranularity:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupDateRangeGranularity, oFF.QInAConverter.s_lookupDateRangeGranularityIna, ffConstant, inaConstant);
	},
	mapDocumentIdsAction:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupDocumentIdsAction, oFF.QInAConverter.s_lookupDocumentIdsActionIna, ffConstant, inaConstant);
	},
	mapDocumentIdsScope:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupDocumentIdsScope, oFF.QInAConverter.s_lookupDocumentIdsScopeIna, ffConstant, inaConstant);
	},
	mapDocumentSupportType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupDocumentSupportType, oFF.QInAConverter.s_lookupDocumentSupportTypeIna, ffConstant, inaConstant);
	},
	mapFilterDisplayInfo:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupFilterDisplayInfo, oFF.QInAConverter.s_lookupFilterDisplayInfoIna, ffConstant, inaConstant);
	},
	mapInfoObjectType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupInfoObjectType, oFF.QInAConverter.s_lookupInfoObjectTypeIna, ffConstant, inaConstant);
	},
	mapInputEnablementRuleMode:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupInputEnablementRuleMode, oFF.QInAConverter.s_lookupInputEnablementRuleModeIna, ffConstant, inaConstant);
	},
	mapInputReadinessFilterMode:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupInputReadinessFilterMode, oFF.QInAConverter.s_lookupInputReadinessFilterModeIna, ffConstant, inaConstant);
	},
	mapPresentationType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupPresentationType, oFF.QInAConverter.s_lookupPresentationTypeIna, ffConstant, inaConstant);
	},
	mapProtocolBindingType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupProtocolBindingType, oFF.QInAConverter.s_lookupProtocolBindingTypeIna, ffConstant, inaConstant);
	},
	mapProviderType:function(inaConstant, inaConstantFallback, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupProviderType, oFF.QInAConverter.s_lookupProviderTypeIna, ffConstant, inaConstant);
		oFF.QInAConverter.s_lookupProviderTypeFallbackIna.put(ffConstant.getName(), inaConstantFallback);
	},
	mapRateType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupRateType, oFF.QInAConverter.s_lookupRateTypeIna, ffConstant, inaConstant);
	},
	mapReadMode:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupReadMode, oFF.QInAConverter.s_lookupReadModeIna, ffConstant, inaConstant);
	},
	mapReturnedDataSelection:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupReturnedDataSelection, oFF.QInAConverter.s_lookupReturnedDataSelectionIna, ffConstant, inaConstant);
	},
	mapRunningAggregationOperator:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupRunningAggregationOperator, oFF.QInAConverter.s_lookupRunningAggregationOperatorIna, ffConstant, inaConstant);
	},
	mapRunningTotalOperator:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupRunningTotalOperator, oFF.QInAConverter.s_lookupRunningTotalOperatorIna, ffConstant, inaConstant);
	},
	mapScaleAndUnitPlacement:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupScaleAndUnitPlacement, oFF.QInAConverter.s_lookupScaleAndUnitPlacementIna, ffConstant, inaConstant);
	},
	mapScaleFormat:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupScaleFormat, oFF.QInAConverter.s_lookupScaleFormatIna, ffConstant, inaConstant);
	},
	mapSemanticBindingType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupSemanticBindingType, oFF.QInAConverter.s_lookupSemanticBindingTypeIna, ffConstant, inaConstant);
	},
	mapSignPresentation:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupSignPresentation, oFF.QInAConverter.s_lookupSignPresentationIna, ffConstant, inaConstant);
	},
	mapSortType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupSortType, oFF.QInAConverter.s_lookupSortTypeIna, ffConstant, inaConstant);
	},
	mapTextTransformation:function(inaString, ffConstant)
	{
			oFF.QInAConverter.s_textTransformation.put(inaString, ffConstant);
		oFF.QInAConverter.s_textTransformationIna.put(ffConstant.getName(), inaString);
	},
	mapUniqueAxisProperty:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUniqueAxisProperty, oFF.QInAConverter.s_lookupUniqueAxisPropertyIna, ffConstant, inaConstant);
	},
	mapUtErrorHandlingMode:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUtErrorHandlingMode, oFF.QInAConverter.s_lookupUtErrorHandlingModeIna, ffConstant, inaConstant);
	},
	mapUtRateLookup:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUtRateLookup, oFF.QInAConverter.s_lookupUtRateLookupIna, ffConstant, inaConstant);
	},
	mapValueDomain:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupProcessingType, oFF.QInAConverter.s_lookupProcessingTypeIna, ffConstant, inaConstant);
	},
	mapValueType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupValueType, oFF.QInAConverter.s_lookupValueTypeIna, ffConstant, inaConstant);
		oFF.QInAConverter.s_lookupValueType.put(oFF.XString.toUpperCase(inaConstant), ffConstant);
	},
	mapVisibilityType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupVisibilityType, oFF.QInAConverter.s_lookupVisibilityTypeIna, ffConstant, inaConstant);
	},
	mapWindowFunctionType:function(inaConstant, ffConstant)
	{
			oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupWindowFunctionType, oFF.QInAConverter.s_lookupWindowFunctionTypeIna, ffConstant, inaConstant);
	},
	setupAggregationTypeMapping:function()
	{
			oFF.QInAConverter.s_lookupAggregationType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupAggregationTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapAggregationType("SUM", oFF.AggregationType.SUM);
		oFF.QInAConverter.mapAggregationType("COUNT", oFF.AggregationType.COUNT);
		oFF.QInAConverter.mapAggregationType("MAX", oFF.AggregationType.MAX);
		oFF.QInAConverter.mapAggregationType("MIN", oFF.AggregationType.MIN);
		oFF.QInAConverter.mapAggregationType("AVERAGE", oFF.AggregationType.AVERAGE);
		oFF.QInAConverter.mapAggregationType("COUNT_DISTINCT", oFF.AggregationType.COUNT_DISTINCT);
		oFF.QInAConverter.mapAggregationType("LAST", oFF.AggregationType.LAST);
		oFF.QInAConverter.mapAggregationType("FIRST", oFF.AggregationType.FIRST);
		oFF.QInAConverter.mapAggregationType("VARIANCE", oFF.AggregationType.VARIANCE);
		oFF.QInAConverter.mapAggregationType("STANDARD_DEVIATION", oFF.AggregationType.STANDARD_DEVIATION);
		oFF.QInAConverter.mapAggregationType("NOPNULL", oFF.AggregationType.NOP_NULL);
		oFF.QInAConverter.mapAggregationType("NOPNULLZERO", oFF.AggregationType.NOP_NULL_ZERO);
		oFF.QInAConverter.mapAggregationType("RANK", oFF.AggregationType.RANK);
		oFF.QInAConverter.mapAggregationType("RANK_DENSE", oFF.AggregationType.RANK_DENSE);
		oFF.QInAConverter.mapAggregationType("RANK_OLYMPIC", oFF.AggregationType.RANK_OLYMPIC);
		oFF.QInAConverter.mapAggregationType("RANK_PERCENT", oFF.AggregationType.RANK_PERCENT);
		oFF.QInAConverter.mapAggregationType("RANK_PERCENTILE", oFF.AggregationType.RANK_PERCENTILE);
		oFF.QInAConverter.mapAggregationType("AVERAGENULL", oFF.AggregationType.AVERAGE_NULL);
		oFF.QInAConverter.mapAggregationType("AVERAGENULLZERO", oFF.AggregationType.AVERAGE_NULL_ZERO);
		oFF.QInAConverter.mapAggregationType("COUNTNULL", oFF.AggregationType.COUNT_NULL);
		oFF.QInAConverter.mapAggregationType("COUNTNULLZERO", oFF.AggregationType.COUNT_NULL_ZERO);
		oFF.QInAConverter.mapAggregationType("MEDIAN", oFF.AggregationType.MEDIAN);
		oFF.QInAConverter.mapAggregationType("MEDIANNULL", oFF.AggregationType.MEDIAN_NULL);
		oFF.QInAConverter.mapAggregationType("MEDIANNULLZERO", oFF.AggregationType.MEDIAN_NULL_ZERO);
		oFF.QInAConverter.mapAggregationType("1STQUARTILE", oFF.AggregationType.FIRST_QUARTILE);
		oFF.QInAConverter.mapAggregationType("1STQUARTILENULL", oFF.AggregationType.FIRST_QUARTILE_NULL);
		oFF.QInAConverter.mapAggregationType("1STQUARTILENULLZERO", oFF.AggregationType.FIRST_QUARTILE_NULL_ZERO);
		oFF.QInAConverter.mapAggregationType("3RDQUARTILE", oFF.AggregationType.THIRD_QUARTILE);
		oFF.QInAConverter.mapAggregationType("3RDQUARTILENULL", oFF.AggregationType.THIRD_QUARTILE_NULL);
		oFF.QInAConverter.mapAggregationType("3RDQUARTILENULLZERO", oFF.AggregationType.THIRD_QUARTILE_NULL_ZERO);
		oFF.QInAConverter.mapAggregationType("OUTLIERS", oFF.AggregationType.OUTLIERS);
		oFF.QInAConverter.mapAggregationType("OUTLIERSNULL", oFF.AggregationType.OUTLIERS_NULL);
		oFF.QInAConverter.mapAggregationType("OUTLIERSNULLZERO", oFF.AggregationType.OUTLIERS_NULL_ZERO);
		oFF.QInAConverter.mapAggregationType("AVERAGE_OF_DIMENSION", oFF.AggregationType.AVERAGE_OF_DIMENSION);
		oFF.QInAConverter.mapAggregationType("FIRST_OF_DIMENSION", oFF.AggregationType.FIRST_OF_DIMENSION);
		oFF.QInAConverter.mapAggregationType("LAST_OF_DIMENSION", oFF.AggregationType.LAST_OF_DIMENSION);
	},
	setupAlertLevel:function()
	{
			oFF.QInAConverter.s_lookupAlertLevelInt = oFF.XArray.create(10);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(0, oFF.AlertLevel.NORMAL);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(1, oFF.AlertLevel.GOOD_1);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(2, oFF.AlertLevel.GOOD_2);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(3, oFF.AlertLevel.GOOD_3);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(4, oFF.AlertLevel.CRITICAL_1);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(5, oFF.AlertLevel.CRITICAL_2);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(6, oFF.AlertLevel.CRITICAL_3);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(7, oFF.AlertLevel.BAD_1);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(8, oFF.AlertLevel.BAD_2);
		oFF.QInAConverter.s_lookupAlertLevelInt.set(9, oFF.AlertLevel.BAD_3);
	},
	setupAxisType:function()
	{
			oFF.QInAConverter.s_lookupAxisType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupAxisTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.COLUMNS, "Columns");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.ROWS, "Rows");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.FREE, "Free");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.FREE, "None");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.DYNAMIC, "Dynamic");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.FILTER, "Filter");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.TECHNICAL, "Technical");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.REPOSITORY, "Repository");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupAxisType, oFF.QInAConverter.s_lookupAxisTypeIna, oFF.AxisType.VIRTUAL, "Virtual");
	},
	setupCategory:function()
	{
			oFF.QInAConverter.s_lookupCategory = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupCategoryIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapCategory("Actuals", oFF.CtCategory.ACTUALS);
		oFF.QInAConverter.mapCategory("Budget", oFF.CtCategory.BUDGET);
		oFF.QInAConverter.mapCategory("Planning", oFF.CtCategory.PLANNING);
		oFF.QInAConverter.mapCategory("Forecast", oFF.CtCategory.FORECAST);
		oFF.QInAConverter.mapCategory("Rolling Forecast", oFF.CtCategory.ROLLING_FORECAST);
	},
	setupCellChartOrientationMapping:function()
	{
			oFF.QInAConverter.s_lookupCellChartOrientation = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupCellChartOrientationIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapCellChartOrientation("Horizontal", oFF.CellChartOrientation.HORIZONTAL);
		oFF.QInAConverter.mapCellChartOrientation("Vertical", oFF.CellChartOrientation.VERTICAL);
	},
	setupCellChartTypeMapping:function()
	{
			oFF.QInAConverter.s_lookupCellChartType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupCellChartTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapCellChartType("Bar", oFF.CellChartType.BAR);
		oFF.QInAConverter.mapCellChartType("VarianceBar", oFF.CellChartType.VARIANCE_BAR);
		oFF.QInAConverter.mapCellChartType("Pin", oFF.CellChartType.PIN);
	},
	setupComparisonMapping:function()
	{
			oFF.QInAConverter.s_lookupComparison = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupComparisonIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapComparison("=", oFF.ComparisonOperator.EQUAL);
		oFF.QInAConverter.mapComparison("EQ", oFF.ComparisonOperator.EQUAL);
		oFF.QInAConverter.mapComparison("EQUAL", oFF.ComparisonOperator.EQUAL);
		oFF.QInAConverter.mapComparison("EQUALS", oFF.ComparisonOperator.EQUAL);
		oFF.QInAConverter.mapComparison("<>", oFF.ComparisonOperator.NOT_EQUAL);
		oFF.QInAConverter.mapComparison(">", oFF.ComparisonOperator.GREATER_THAN);
		oFF.QInAConverter.mapComparison("GT", oFF.ComparisonOperator.GREATER_THAN);
		oFF.QInAConverter.mapComparison("<", oFF.ComparisonOperator.LESS_THAN);
		oFF.QInAConverter.mapComparison("LT", oFF.ComparisonOperator.LESS_THAN);
		oFF.QInAConverter.mapComparison(">=", oFF.ComparisonOperator.GREATER_EQUAL);
		oFF.QInAConverter.mapComparison("GE", oFF.ComparisonOperator.GREATER_EQUAL);
		oFF.QInAConverter.mapComparison("<=", oFF.ComparisonOperator.LESS_EQUAL);
		oFF.QInAConverter.mapComparison("LE", oFF.ComparisonOperator.LESS_EQUAL);
		oFF.QInAConverter.mapComparison("LIKE", oFF.ComparisonOperator.LIKE);
		oFF.QInAConverter.mapComparison("MATCH", oFF.ComparisonOperator.MATCH);
		oFF.QInAConverter.mapComparison("NOT_MATCH", oFF.ComparisonOperator.NOT_MATCH);
		oFF.QInAConverter.mapComparison("IS_NULL", oFF.ComparisonOperator.IS_NULL);
		oFF.QInAConverter.mapComparison("IS NULL", oFF.ComparisonOperator.IS_NULL);
		oFF.QInAConverter.mapComparison("NL", oFF.ComparisonOperator.IS_NULL);
		oFF.QInAConverter.mapComparison("BETWEEN", oFF.ComparisonOperator.BETWEEN);
		oFF.QInAConverter.mapComparison("BT", oFF.ComparisonOperator.BETWEEN);
		oFF.QInAConverter.mapComparison("NOT_BETWEEN", oFF.ComparisonOperator.NOT_BETWEEN);
		oFF.QInAConverter.mapComparison("NOTBETWEEN", oFF.ComparisonOperator.NOT_BETWEEN);
		oFF.QInAConverter.mapComparison("BETWEEN_EXCLUDING", oFF.ComparisonOperator.BETWEEN_EXCLUDING);
		oFF.QInAConverter.mapComparison("NOT_BETWEEN_EXCLUDING", oFF.ComparisonOperator.NOT_BETWEEN_EXCLUDING);
		oFF.QInAConverter.mapComparison("FUZZY", oFF.ComparisonOperator.FUZZY);
		oFF.QInAConverter.mapComparison("SEARCH", oFF.ComparisonOperator.SEARCH);
		oFF.QInAConverter.mapComparison("ALL", oFF.ComparisonOperator.ALL);
		oFF.QInAConverter.mapComparison("AGGREGATED", oFF.ComparisonOperator.AGGREGATED);
		oFF.QInAConverter.mapComparison("NON-AGGREGATED", oFF.ComparisonOperator.NON_AGGREGATED);
		oFF.QInAConverter.mapComparison("LEVEL", oFF.ComparisonOperator.LEVEL);
		oFF.QInAConverter.mapComparison("CONTAINS", oFF.SpatialComparisonOperator.CONTAINS);
		oFF.QInAConverter.mapComparison("COVERS", oFF.SpatialComparisonOperator.COVERS);
		oFF.QInAConverter.mapComparison("CROSSES", oFF.SpatialComparisonOperator.CROSSES);
		oFF.QInAConverter.mapComparison("DISJOINT", oFF.SpatialComparisonOperator.DISJOINT);
		oFF.QInAConverter.mapComparison("OVERLAPS", oFF.SpatialComparisonOperator.OVERLAPS);
		oFF.QInAConverter.mapComparison("TOUCHES", oFF.SpatialComparisonOperator.TOUCHES);
		oFF.QInAConverter.mapComparison("INTERSECTS_RECT", oFF.SpatialComparisonOperator.INTERSECTS_RECT);
		oFF.QInAConverter.mapComparison("INTERSECT_RECT", oFF.SpatialComparisonOperator.INTERSECTS_RECT);
		oFF.QInAConverter.mapComparison("INTERSECTS", oFF.SpatialComparisonOperator.INTERSECTS);
		oFF.QInAConverter.mapComparison("WITHIN", oFF.SpatialComparisonOperator.WITHIN);
		oFF.QInAConverter.mapComparison("WITHIN_DISTANCE", oFF.SpatialComparisonOperator.WITHIN_DISTANCE);
	},
	setupComponentTypeMapping:function()
	{
			oFF.QInAConverter.s_lookupComponentType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupComponentTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapComponentType("Axis", oFF.OlapComponentType.AXIS);
		oFF.QInAConverter.mapComponentType("AbstractMember", oFF.MemberType.ABSTRACT_MEMBER);
		oFF.QInAConverter.mapComponentType("Attribute", oFF.OlapComponentType.ATTRIBUTE);
		oFF.QInAConverter.mapComponentType("QuerySettings", oFF.OlapComponentType.QUERY_SETTINGS);
		oFF.QInAConverter.mapComponentType("Condition", oFF.OlapComponentType.CONDITION);
		oFF.QInAConverter.mapComponentType("QueryModel", oFF.OlapComponentType.QUERY_MODEL);
		oFF.QInAConverter.mapComponentType("DataCell", oFF.OlapComponentType.DATA_CELL);
		oFF.QInAConverter.mapComponentType("CalculatedDimension", oFF.DimensionType.CALCULATED_DIMENSION);
		oFF.QInAConverter.mapComponentType("FilterManager", oFF.OlapComponentType.OLAP_FILTER_MANAGER);
		oFF.QInAConverter.mapComponentType("Filter", oFF.OlapComponentType.SELECTOR);
		oFF.QInAConverter.mapComponentType("FilterExpression", oFF.OlapComponentType.FILTER_EXPRESSION);
		oFF.QInAConverter.mapComponentType("FilterCartesianProduct", oFF.FilterComponentType.CARTESIAN_PRODUCT);
		oFF.QInAConverter.mapComponentType("FilterCartesianList", oFF.FilterComponentType.CARTESIAN_LIST);
		oFF.QInAConverter.mapComponentType("FilterConvertedTimeCartesianList", oFF.FilterComponentType.CONVERTED_TIME_CARTESIAN_LIST);
		oFF.QInAConverter.mapComponentType("FilterOperation", oFF.FilterComponentType.OPERATION);
		oFF.QInAConverter.mapComponentType("FilterDateRangeOperation", oFF.FilterComponentType.DATE_RANGE_OPERATION);
		oFF.QInAConverter.mapComponentType("FilterAlgebra", oFF.FilterComponentType.BOOLEAN_ALGEBRA);
		oFF.QInAConverter.mapComponentType("CustomHierarchyDefinition", oFF.OlapComponentType.CUSTOM_HIERARCHY_DEFINITION);
		oFF.QInAConverter.mapComponentType("MemberRestricted", oFF.MemberType.RESTRICTED_MEASURE);
		oFF.QInAConverter.mapComponentType("DimensionMemberVariable", oFF.VariableType.DIMENSION_MEMBER_VARIABLE);
		oFF.QInAConverter.mapComponentType("FunctionalVariable", oFF.VariableType.FUNCTIONAL_VARIABLE);
		oFF.QInAConverter.mapComponentType("HierarchyNodeVariable", oFF.VariableType.HIERARCHY_NODE_VARIABLE);
		oFF.QInAConverter.mapComponentType("Hierarchy", oFF.OlapComponentType.HIERARCHY_MANAGER);
		oFF.QInAConverter.mapComponentType("Hierarchy", oFF.OlapComponentType.HIERARCHY);
		oFF.QInAConverter.mapComponentType("CellValueOperand", oFF.OlapComponentType.FILTER_CELL_VALUE_OPERAND);
		oFF.QInAConverter.mapComponentType("DataCells", oFF.OlapComponentType.DATA_CELLS);
		oFF.QInAConverter.mapComponentType("Sorting", oFF.OlapComponentType.SORT_MANAGER);
		oFF.QInAConverter.mapComponentType("CurrencyTranslationManager", oFF.OlapComponentType.CURRENCY_TRANSLATION_MANAGER);
		oFF.QInAConverter.mapComponentType("CurrencyTranslations", oFF.OlapComponentType.CURRENCY_TRANSLATION_LIST);
		oFF.QInAConverter.mapComponentType("CurrencyTranslationItem", oFF.OlapComponentType.CURRENCY_TRANSLATION_ITEM);
		oFF.QInAConverter.mapComponentType("UnitTranslationManager", oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER);
		oFF.QInAConverter.mapComponentType("UnitTranslations", oFF.OlapComponentType.UNIT_TRANSLATION_MANAGER);
		oFF.QInAConverter.mapComponentType("UnitTranslationItem", oFF.OlapComponentType.UNIT_TRANSLATION_ITEM);
		oFF.QInAConverter.mapComponentType("Translations", oFF.OlapComponentType.MEASURE_TRANSLATIONS);
		oFF.QInAConverter.mapComponentType("SortOperation", oFF.OlapComponentType.GENERIC_SORTING);
		oFF.QInAConverter.mapComponentType("Totals", oFF.OlapComponentType.TOTALS);
		oFF.QInAConverter.mapComponentType("Dimensions", oFF.OlapComponentType.DIMENSIONS);
		oFF.QInAConverter.mapComponentType("ConditionsManager", oFF.OlapComponentType.CONDITIONS_MANAGER);
		oFF.QInAConverter.mapComponentType("Field", oFF.OlapComponentType.FIELD);
		oFF.QInAConverter.mapComponentType("DimensionManager", oFF.OlapComponentType.DIMENSION_MANAGER);
		oFF.QInAConverter.mapComponentType("Dimension", oFF.OlapComponentType.ABSTRACT_DIMENSION);
		oFF.QInAConverter.mapComponentType("UniversalDisplayHierarchies", oFF.OlapComponentType.UNIVERSAL_DISPLAY_HIERARCHIES);
		oFF.QInAConverter.mapComponentType("BasicMeasure", oFF.MemberType.BASIC_MEASURE);
		oFF.QInAConverter.mapComponentType("Formula", oFF.MemberType.FORMULA);
		oFF.QInAConverter.mapComponentType("Variance", oFF.MemberType.VARIANCE);
		oFF.QInAConverter.mapComponentType("ExceptionAggregation", oFF.MemberType.EXCEPTION_AGGREGATION);
		oFF.QInAConverter.mapComponentType("CurrencyMeasure", oFF.MemberType.CURRENCY_MEASURE);
		oFF.QInAConverter.mapComponentType("UnitMeasure", oFF.MemberType.UNIT_MEASURE);
		oFF.QInAConverter.mapComponentType("RunningTotal", oFF.MemberType.RUNNING_TOTAL);
		oFF.QInAConverter.mapComponentType("Pareto", oFF.MemberType.PARETO);
		oFF.QInAConverter.mapComponentType("Members", oFF.OlapComponentType.MEMBERS);
		oFF.QInAConverter.mapComponentType("DrillOperation", oFF.OlapComponentType.DRILL_OPERATION);
		oFF.QInAConverter.mapComponentType("DrillManager", oFF.OlapComponentType.DRILL_MANAGER);
		oFF.QInAConverter.mapComponentType("DrillPathElement", oFF.MemberType.DRILL_PATH_ELEMENT);
		oFF.QInAConverter.mapComponentType("CellContextManager", oFF.OlapComponentType.CELL_CONTEXT_MANAGER);
		oFF.QInAConverter.mapComponentType("CellContext", oFF.OlapComponentType.CELL_CONTEXT);
		oFF.QInAConverter.mapComponentType("AxesSettings", oFF.OlapComponentType.AXES_SETTINGS);
		oFF.QInAConverter.mapComponentType("Tuple", oFF.FilterComponentType.TUPLE);
		oFF.QInAConverter.mapComponentType("MeasureBasedFilter", oFF.FilterComponentType.FILTER_MEASURE_BASED);
		oFF.QInAConverter.mapComponentType("FilterAsymmetricVisibility", oFF.FilterComponentType.FILTER_ASYMMETRIC_VISIBILITY);
		oFF.QInAConverter.mapComponentType("FilterAcrossModels", oFF.FilterComponentType.FILTER_ACROSS_MODELS);
		oFF.QInAConverter.mapComponentType("FilterDynamicTimeRegularRange", oFF.FilterComponentType.FILTER_DYNAMIC_TIME_REGULAR_RANGE);
		oFF.QInAConverter.mapComponentType("FilterDynamicTimeToDateRange", oFF.FilterComponentType.FILTER_DYNAMIC_TIME_TO_DATE_RANGE);
		oFF.QInAConverter.mapComponentType("FilterFixedTimeRange", oFF.FilterComponentType.FILTER_FIXED_TIME_RANGE);
		oFF.QInAConverter.mapComponentType("FormulaCalculatedDimension", oFF.DimensionType.FORMULA_CALCULATED_DIMENSION);
		oFF.QInAConverter.mapComponentType("FormulaException", oFF.OlapComponentType.FORMULA_EXCEPTION);
		oFF.QInAConverter.mapComponentType("FormulaExceptions", oFF.OlapComponentType.FORMULA_EXCEPTION_MANAGER);
		oFF.QInAConverter.mapComponentType("OptionListVariable", oFF.VariableType.OPTION_LIST_VARIABLE);
		oFF.QInAConverter.mapComponentType("Cells", oFF.OlapComponentType.QUERY_CELLS);
		oFF.QInAConverter.mapComponentType("ModellerCurrencyTranslation", oFF.OlapComponentType.MODELLER_CURRENCY_TRANSLATION);
		oFF.QInAConverter.mapComponentType("ModellerDimensions", oFF.OlapComponentType.MODELLER_DIMENSIONS);
		oFF.QInAConverter.mapComponentType("ModellerMetadataProperties", oFF.OlapComponentType.MODELLER_METADATA_PROPERTIES);
		oFF.QInAConverter.mapComponentType("ModellerVariables", oFF.OlapComponentType.MODELLER_VARIABLES);
		oFF.QInAConverter.mapComponentType("ConditionThreshold", oFF.OlapComponentType.CONDITIONS_THRESHOLD);
		oFF.QInAConverter.mapComponentType("Exceptions", oFF.OlapComponentType.EXCEPTION_MANAGER);
		oFF.QInAConverter.mapComponentType("SimpleTypeVariable", oFF.VariableType.SIMPLE_TYPE_VARIABLE);
		oFF.QInAConverter.mapComponentType("QueryManager", oFF.OlapComponentType.QUERY_MANAGER);
		oFF.QInAConverter.mapComponentType("QueryServiceConfig", oFF.OlapComponentType.QUERY_SERVICE_CONFIG);
		oFF.QInAConverter.mapComponentType("DataSource", oFF.OlapComponentType.DATA_SOURCE);
		oFF.QInAConverter.mapComponentType("DocumentsInfo", oFF.OlapComponentType.DOCUMENTS_INFO);
		oFF.QInAConverter.mapComponentType("BlendableQueryManager", oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER);
		oFF.QInAConverter.mapComponentType("QuickActionManager", oFF.OlapComponentType.QUICK_ACTION_MANAGER);
		oFF.QInAConverter.mapComponentType("VisualizationManager", oFF.OlapComponentType.VISUALIZATION_MANAGER);
		oFF.QInAConverter.mapComponentType("VisualizationCellReferenceScope", oFF.OlapComponentType.VISUALIZATION_CELL_REFERENCE_SCOPE);
		oFF.QInAConverter.mapComponentType("ChartStyle", oFF.OlapComponentType.VISUALIZATION_CHART_STYLE);
		oFF.QInAConverter.mapComponentType("VisualizationDefinition", oFF.OlapComponentType.VISUALIZATION_DEFINITION);
		oFF.QInAConverter.mapComponentType("VisualizationTableDefinition", oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION);
		oFF.QInAConverter.mapComponentType("VisualizationKpiDefinition", oFF.OlapComponentType.VISUALIZATION_KPI_DEFINITION);
		oFF.QInAConverter.mapComponentType("VisualizationChartDefinition", oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION);
		oFF.QInAConverter.mapComponentType("VisualizationCustomDefinition", oFF.OlapComponentType.VISUALIZATION_CUSTOM_DEFINITION);
		oFF.QInAConverter.mapComponentType("VisualizationTemplateManager", oFF.OlapComponentType.OLAP_VISUALIZATION_TEMPLATE_MANAGER);
	},
	setupCtErrorHandlingMode:function()
	{
			oFF.QInAConverter.s_lookupCtErrorHandlingMode = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupCtErrorHandlingModeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapCtErrorHandlingMode("set to null", oFF.CtErrorHandlingMode.SET_TO_NULL);
		oFF.QInAConverter.mapCtErrorHandlingMode("keep unconverted", oFF.CtErrorHandlingMode.KEEP_UNCONVERTED);
		oFF.QInAConverter.mapCtErrorHandlingMode("fail on error", oFF.CtErrorHandlingMode.FAIL_ON_ERROR);
	},
	setupCurrencyPresentation:function()
	{
			oFF.QInAConverter.s_lookupCurrencyPresentationIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupCurrencyPresentation = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapCurrencyPresentation("Iso", oFF.CurrencyPresentation.ISO);
		oFF.QInAConverter.mapCurrencyPresentation("Symbol", oFF.CurrencyPresentation.SYMBOL);
	},
	setupDateRangeGranularity:function()
	{
			oFF.QInAConverter.s_lookupDateRangeGranularityIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupDateRangeGranularity = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapDateRangeGranularity("Year", oFF.DateRangeGranularity.YEAR);
		oFF.QInAConverter.mapDateRangeGranularity("HalfYear", oFF.DateRangeGranularity.HALF_YEAR);
		oFF.QInAConverter.mapDateRangeGranularity("Quarter", oFF.DateRangeGranularity.QUARTER);
		oFF.QInAConverter.mapDateRangeGranularity("Month", oFF.DateRangeGranularity.MONTH);
		oFF.QInAConverter.mapDateRangeGranularity("Day", oFF.DateRangeGranularity.DAY);
		oFF.QInAConverter.mapDateRangeGranularity("CurrentYear", oFF.DateRangeGranularity.CURRENT_YEAR);
		oFF.QInAConverter.mapDateRangeGranularity("CurrentQuarter", oFF.DateRangeGranularity.CURRENT_QUARTER);
		oFF.QInAConverter.mapDateRangeGranularity("CurrentMonth", oFF.DateRangeGranularity.CURRENT_MONTH);
	},
	setupDimensionType:function()
	{
			oFF.QInAConverter.s_lookupDimensionTypeInt = oFF.XArray.create(14);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(1, oFF.DimensionType.TIME);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(2, oFF.DimensionType.MEASURE_STRUCTURE);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(3, oFF.DimensionType.DIMENSION);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(4, oFF.DimensionType.CURRENCY);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(5, oFF.DimensionType.UNIT);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(6, oFF.DimensionType.SECONDARY_STRUCTURE);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(7, oFF.DimensionType.DATE);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(8, oFF.DimensionType.HIERARCHY_VERSION);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(9, oFF.DimensionType.HIERARCHY_NAME);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(10, oFF.DimensionType.GIS_DIMENSION);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(11, oFF.DimensionType.VERSION_EPM);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(12, oFF.DimensionType.ACCOUNT);
		oFF.QInAConverter.s_lookupDimensionTypeInt.set(13, oFF.DimensionType.VERSION_IBP);
	},
	setupDimensionVisibility:function()
	{
			oFF.QInAConverter.s_lookupDimensionVisibilityInt = oFF.XArray.create(3);
		oFF.QInAConverter.s_lookupDimensionVisibilityInt.set(0, oFF.DimensionVisibility.VISIBLE);
		oFF.QInAConverter.s_lookupDimensionVisibilityInt.set(1, oFF.DimensionVisibility.METADATA);
		oFF.QInAConverter.s_lookupDimensionVisibilityInt.set(2, oFF.DimensionVisibility.HIDDEN);
	},
	setupDocumentIdsAction:function()
	{
			oFF.QInAConverter.s_lookupDocumentIdsAction = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupDocumentIdsActionIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapDocumentIdsAction("Create", oFF.DocumentsIdsAction.CREATE);
		oFF.QInAConverter.mapDocumentIdsAction("Delete", oFF.DocumentsIdsAction.DELETE);
	},
	setupDocumentIdsScope:function()
	{
			oFF.QInAConverter.s_lookupDocumentIdsScope = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupDocumentIdsScopeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapDocumentIdsScope("None", oFF.DocumentsIdsScope.NONE);
		oFF.QInAConverter.mapDocumentIdsScope("ResultSetBound", oFF.DocumentsIdsScope.RESULT_SET_BOUND);
		oFF.QInAConverter.mapDocumentIdsScope("SystemUnique", oFF.DocumentsIdsScope.SYSTEM_UNIQUE);
	},
	setupDocumentSupportType:function()
	{
			oFF.QInAConverter.s_lookupDocumentSupportType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupDocumentSupportTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapDocumentSupportType("None", oFF.DocumentsSupportType.NONE);
		oFF.QInAConverter.mapDocumentSupportType("Read", oFF.DocumentsSupportType.READ);
		oFF.QInAConverter.mapDocumentSupportType("ReadWrite", oFF.DocumentsSupportType.READ_WRITE);
		oFF.QInAConverter.mapDocumentSupportType("ReadCreateChange", oFF.DocumentsSupportType.READ_CREATE_CHANGE);
	},
	setupEncoding:function()
	{
			oFF.QInAConverter.s_lookupEncoding = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupEncoding.put("None", oFF.ResultSetEncoding.NONE);
		oFF.QInAConverter.s_lookupEncoding.put("Auto", oFF.ResultSetEncoding.AUTO);
		oFF.QInAConverter.s_lookupEncoding.put("DeltaRunLength", oFF.ResultSetEncoding.DELTA_RUN_LENGTH);
	},
	setupFilterDisplayInfo:function()
	{
			oFF.QInAConverter.s_lookupFilterDisplayInfoIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupFilterDisplayInfo = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapFilterDisplayInfo("id", oFF.FilterDisplayInfo.ID);
		oFF.QInAConverter.mapFilterDisplayInfo("description", oFF.FilterDisplayInfo.DESCRIPTION);
		oFF.QInAConverter.mapFilterDisplayInfo("idAndDescription", oFF.FilterDisplayInfo.ID_AND_DESCRIPTION);
	},
	setupInfoObjectType:function()
	{
			oFF.QInAConverter.s_lookupInfoObjectType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupInfoObjectTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapInfoObjectType("CHA", oFF.InfoObjectType.CHA);
		oFF.QInAConverter.mapInfoObjectType("KYF", oFF.InfoObjectType.KYF);
		oFF.QInAConverter.mapInfoObjectType("TIM", oFF.InfoObjectType.TIM);
		oFF.QInAConverter.mapInfoObjectType("UNI", oFF.InfoObjectType.UNI);
		oFF.QInAConverter.mapInfoObjectType("DPA", oFF.InfoObjectType.DPA);
		oFF.QInAConverter.mapInfoObjectType("ATR", oFF.InfoObjectType.ATR);
		oFF.QInAConverter.mapInfoObjectType("MTA", oFF.InfoObjectType.MTA);
		oFF.QInAConverter.mapInfoObjectType("XXL", oFF.InfoObjectType.XXL);
		oFF.QInAConverter.mapInfoObjectType("ALL", oFF.InfoObjectType.ALL);
	},
	setupInputEnablementCacheMode:function()
	{
			oFF.QInAConverter.s_lookupInputEnablementCacheMode = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupInputEnablementCacheModeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupInputEnablementCacheMode, oFF.QInAConverter.s_lookupInputEnablementCacheModeIna, oFF.InputEnablementCacheMode.LOAD, "Load");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupInputEnablementCacheMode, oFF.QInAConverter.s_lookupInputEnablementCacheModeIna, oFF.InputEnablementCacheMode.STORE, "Store");
	},
	setupInputEnablementRuleMode:function()
	{
			oFF.QInAConverter.s_lookupInputEnablementRuleMode = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupInputEnablementRuleModeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapInputEnablementRuleMode("Disabled", oFF.InputEnablementRuleMode.DISABLED);
		oFF.QInAConverter.mapInputEnablementRuleMode("Optimistic", oFF.InputEnablementRuleMode.OPTIMISTIC);
		oFF.QInAConverter.mapInputEnablementRuleMode("Pessimistic", oFF.InputEnablementRuleMode.PESSIMISTIC);
	},
	setupInputReadinessFilterMode:function()
	{
			oFF.QInAConverter.s_lookupInputReadinessFilterMode = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupInputReadinessFilterModeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapInputReadinessFilterMode("HasDataOrIsNotInListOfFlags", oFF.InputReadinessFilterMode.HAS_DATA_OR_IS_NOT_IN_LIST_OF_FLAGS);
		oFF.QInAConverter.mapInputReadinessFilterMode("HasDataAndIsInListOfFlags", oFF.InputReadinessFilterMode.HAS_DATA_AND_IS_IN_LIST_OF_FLAGS);
	},
	setupMemberNavigationType:function()
	{
			oFF.QInAConverter.s_lookupMemberNavigationTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupMemberNavigationTypeIna.put(oFF.MemberNavigationType.FUNCTION_PARAM_CONSTANT.getName(), "Constant");
		oFF.QInAConverter.s_lookupMemberNavigationTypeIna.put(oFF.MemberNavigationType.FUNCTION_PARAM_LEVEL.getName(), "Level");
		oFF.QInAConverter.s_lookupMemberNavigationTypeIna.put(oFF.MemberNavigationType.FUNCTION_PARAM_MEMBER.getName(), "Member");
		oFF.QInAConverter.s_lookupMemberNavigationTypeIna.put(oFF.MemberNavigationType.FUNCTION_PARAM_NO_VALUES_ABOVE_LEVEL.getName(), "NoValuesAboveLevel");
		oFF.QInAConverter.s_lookupMemberNavigationTypeIna.put(oFF.MemberNavigationType.FUNCTION_PARAM_ERROR_ABOVE_LEVEL.getName(), "ErrorAboveLevel");
		oFF.QInAConverter.s_lookupMemberNavigationTypeIna.put(oFF.MemberNavigationType.FUNCTION_PARAM_RANGE.getName(), "Range");
		oFF.QInAConverter.s_lookupMemberNavigationTypeIna.put(oFF.MemberNavigationType.FUNCTION_PARAM_SHIFT.getName(), "Shift");
	},
	setupPresentationMapping:function()
	{
			oFF.QInAConverter.s_lookupPresentationType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupPresentationTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapPresentationType("Undefined", oFF.PresentationType.UNDEFINED);
		oFF.QInAConverter.mapPresentationType("Key", oFF.PresentationType.KEY);
		oFF.QInAConverter.mapPresentationType("KeyNotCompound", oFF.PresentationType.KEY_NOT_COMPOUND);
		oFF.QInAConverter.mapPresentationType("DisplayKey", oFF.PresentationType.DISPLAY_KEY);
		oFF.QInAConverter.mapPresentationType("DisplayKeyMixedCompoundment", oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT);
		oFF.QInAConverter.mapPresentationType("DisplayKeyNotCompound", oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND);
		oFF.QInAConverter.mapPresentationType("Id", oFF.PresentationType.ID);
		oFF.QInAConverter.mapPresentationType("Text", oFF.PresentationType.TEXT);
		oFF.QInAConverter.mapPresentationType("ShortText", oFF.PresentationType.SHORT_TEXT);
		oFF.QInAConverter.mapPresentationType("MediumText", oFF.PresentationType.MEDIUM_TEXT);
		oFF.QInAConverter.mapPresentationType("LongText", oFF.PresentationType.LONG_TEXT);
		oFF.QInAConverter.mapPresentationType("XLLongText", oFF.PresentationType.XL_LONG_TEXT);
		oFF.QInAConverter.mapPresentationType("HierarchyKey", oFF.PresentationType.HIERARCHY_KEY);
		oFF.QInAConverter.mapPresentationType("HierarchyText", oFF.PresentationType.HIERARCHY_TEXT);
		oFF.QInAConverter.mapPresentationType("HierarchyDisplayKey", oFF.PresentationType.HIERARCHY_DISPLAY_KEY);
		oFF.QInAConverter.mapPresentationType("HierarchyPath", oFF.PresentationType.HIERARCHY_PATH);
		oFF.QInAConverter.mapPresentationType("WhyFound", oFF.PresentationType.WHY_FOUND);
		oFF.QInAConverter.mapPresentationType("RelatedActions", oFF.PresentationType.RELATED_ACTIONS);
		oFF.QInAConverter.mapPresentationType("NamePath", oFF.PresentationType.NAME_PATH);
		oFF.QInAConverter.mapPresentationType("URL", oFF.PresentationType.URL);
		oFF.QInAConverter.mapPresentationType("XXL", oFF.PresentationType.BLOB);
		oFF.QInAConverter.mapPresentationType("QueryText", oFF.PresentationType.QUERY_TEXT);
		oFF.QInAConverter.mapPresentationType("UDHKey", oFF.PresentationType.UDH_KEY);
	},
	setupProtocolBindingType:function()
	{
			oFF.QInAConverter.s_lookupProtocolBindingType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupProtocolBindingTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapProtocolBindingType("HighChart", oFF.ProtocolBindingType.HIGH_CHART_PROTOCOL);
		oFF.QInAConverter.mapProtocolBindingType("GoogleChart", oFF.ProtocolBindingType.GOOGLE_CHART_PROTOCOL);
		oFF.QInAConverter.mapProtocolBindingType("MicroChart", oFF.ProtocolBindingType.MICRO_CHART_PROTOCOL);
		oFF.QInAConverter.mapProtocolBindingType("SacTableGrid", oFF.ProtocolBindingType.SAC_TABLE_GRID);
		oFF.QInAConverter.mapProtocolBindingType("PlainGrid", oFF.ProtocolBindingType.PLAIN_GRID);
		oFF.QInAConverter.mapProtocolBindingType("VizFrame", oFF.ProtocolBindingType.VIZ_FRAME_PROTOCOL);
		oFF.QInAConverter.mapProtocolBindingType("SapKpi", oFF.ProtocolBindingType.SAP_KPI_PROTOCOL);
	},
	setupProviderType:function()
	{
			oFF.QInAConverter.s_lookupProviderType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupProviderTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupProviderTypeFallbackIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapProviderType(oFF.ServerService.CATALOG, oFF.ServerService.ANALYTIC, oFF.ProviderType.CATALOG);
		oFF.QInAConverter.mapProviderType(oFF.ServerService.VALUE_HELP, oFF.ServerService.ANALYTIC, oFF.ProviderType.ANALYTICS_VALUE_HELP);
		oFF.QInAConverter.mapProviderType(oFF.ServerService.LIST_REPORTING, null, oFF.ProviderType.LIST_REPORTING);
		oFF.QInAConverter.mapProviderType(oFF.ServerService.ANALYTIC, oFF.ServerService.ANALYTIC, oFF.ProviderType.ANALYTICS);
		oFF.QInAConverter.mapProviderType(oFF.ServerService.DIMENSION_EXTENSION, null, oFF.ProviderType.DIMENSION_EXTENSION);
		oFF.QInAConverter.mapProviderType(oFF.ServerService.DOCUMENTS, null, oFF.ProviderType.DOCUMENTS);
		oFF.QInAConverter.mapProviderType(oFF.ServerService.PLANNING, oFF.ServerService.ANALYTIC, oFF.ProviderType.PLANNING_COMMAND);
		oFF.QInAConverter.mapProviderType(oFF.ServerService.PLANNING, oFF.ServerService.ANALYTIC, oFF.ProviderType.PLANNING_VALUE_HELP);
	},
	setupRateType:function()
	{
			oFF.QInAConverter.s_lookupRateType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupRateTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapRateType("", oFF.CtRateType.DEFAULT);
		oFF.QInAConverter.mapRateType("Average", oFF.CtRateType.AVERAGE);
		oFF.QInAConverter.mapRateType("Closing", oFF.CtRateType.CLOSING);
	},
	setupReadmodeMapping:function()
	{
			oFF.QInAConverter.s_lookupReadMode = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupReadModeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapReadMode("Default", oFF.QMemberReadMode.DEFAULT_VALUE);
		oFF.QInAConverter.mapReadMode("Undefined", oFF.QMemberReadMode.UNDEFINED);
		oFF.QInAConverter.mapReadMode("None", oFF.QMemberReadMode.UNDEFINED);
		oFF.QInAConverter.mapReadMode("Master", oFF.QMemberReadMode.MASTER);
		oFF.QInAConverter.mapReadMode("MasterAndSpace", oFF.QMemberReadMode.MASTER_AND_SPACE);
		oFF.QInAConverter.mapReadMode("MasterAndSpaceAndState", oFF.QMemberReadMode.MASTER_AND_SPACE_AND_STATE);
		oFF.QInAConverter.mapReadMode("RelatedMaster", oFF.QMemberReadMode.REL_MASTER);
		oFF.QInAConverter.mapReadMode("RelatedMasterAndSpace", oFF.QMemberReadMode.REL_MASTER_AND_SPACE);
		oFF.QInAConverter.mapReadMode("RelatedMasterAndSpaceAndState", oFF.QMemberReadMode.REL_MASTER_AND_SPACE_AND_STATE);
		oFF.QInAConverter.mapReadMode("Booked", oFF.QMemberReadMode.BOOKED);
		oFF.QInAConverter.mapReadMode("BookedAndSpace", oFF.QMemberReadMode.BOOKED_AND_SPACE);
		oFF.QInAConverter.mapReadMode("BookedAndSpaceAndState", oFF.QMemberReadMode.BOOKED_AND_SPACE_AND_STATE);
		oFF.QInAConverter.mapReadMode("RelatedBooked", oFF.QMemberReadMode.REL_BOOKED);
		oFF.QInAConverter.mapReadMode("RelatedBookedAndSpace", oFF.QMemberReadMode.REL_BOOKED_AND_SPACE);
		oFF.QInAConverter.mapReadMode("RelatedBookedAndSpaceAndState", oFF.QMemberReadMode.REL_BOOKED_AND_SPACE_AND_STATE);
	},
	setupResultCalculation:function()
	{
			oFF.QInAConverter.s_lookupResultCalculation = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupResultCalculation.put("00", oFF.ResultCalculation.NOT_DEFINED);
		oFF.QInAConverter.s_lookupResultCalculation.put("01", oFF.ResultCalculation.SUM);
		oFF.QInAConverter.s_lookupResultCalculation.put("02", oFF.ResultCalculation.MAXIMUM);
		oFF.QInAConverter.s_lookupResultCalculation.put("03", oFF.ResultCalculation.MINIMUM);
		oFF.QInAConverter.s_lookupResultCalculation.put("04", oFF.ResultCalculation.COUNTER_FOR_ALL_DETAILED_VALUES);
		oFF.QInAConverter.s_lookupResultCalculation.put("05", oFF.ResultCalculation.COUNTER_FOR_ALL_DETAILED_VALUES_NZ_NULL_ERROR);
		oFF.QInAConverter.s_lookupResultCalculation.put("06", oFF.ResultCalculation.AVERAGE);
		oFF.QInAConverter.s_lookupResultCalculation.put("07", oFF.ResultCalculation.AVERAGE_DETAILED_VALUES_NOT_ZERO_NULL_ERROR);
		oFF.QInAConverter.s_lookupResultCalculation.put("08", oFF.ResultCalculation.STANDARD_DEVIATION);
		oFF.QInAConverter.s_lookupResultCalculation.put("09", oFF.ResultCalculation.VARIANCE);
		oFF.QInAConverter.s_lookupResultCalculation.put("11", oFF.ResultCalculation.FIRST_VALUE);
		oFF.QInAConverter.s_lookupResultCalculation.put("12", oFF.ResultCalculation.LAST_VALUE);
		oFF.QInAConverter.s_lookupResultCalculation.put("13", oFF.ResultCalculation.SUMMATION_OF_ROUNDED_VALUES);
		oFF.QInAConverter.s_lookupResultCalculation.put("14", oFF.ResultCalculation.HIDE);
	},
	setupResultSetState:function()
	{
			oFF.QInAConverter.s_lookupResultsetState = oFF.XArray.create(7);
		oFF.QInAConverter.s_lookupResultsetState.set(0, oFF.ResultSetState.DATA_AVAILABLE);
		oFF.QInAConverter.s_lookupResultsetState.set(1, oFF.ResultSetState.NO_DATA_AVAILABLE);
		oFF.QInAConverter.s_lookupResultsetState.set(2, oFF.ResultSetState.NO_DATA_AVAILABLE);
		oFF.QInAConverter.s_lookupResultsetState.set(3, oFF.ResultSetState.ERROR);
		oFF.QInAConverter.s_lookupResultsetState.set(4, oFF.ResultSetState.SIZE_LIMIT_EXCEEDED);
		oFF.QInAConverter.s_lookupResultsetState.set(5, oFF.ResultSetState.SUCCESSFUL_PERSISTED);
		oFF.QInAConverter.s_lookupResultsetState.set(6, oFF.ResultSetState.EMPTY_JSON);
	},
	setupReturnedDataSelectionMapping:function()
	{
			oFF.QInAConverter.s_lookupReturnedDataSelection = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupReturnedDataSelectionIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapReturnedDataSelection("Actions", oFF.ReturnedDataSelection.ACTIONS);
		oFF.QInAConverter.mapReturnedDataSelection("CellDataType", oFF.ReturnedDataSelection.CELL_DATA_TYPE);
		oFF.QInAConverter.mapReturnedDataSelection("CellFormat", oFF.ReturnedDataSelection.CELL_FORMAT);
		oFF.QInAConverter.mapReturnedDataSelection("CellMeasure", oFF.ReturnedDataSelection.CELL_MEASURE);
		oFF.QInAConverter.mapReturnedDataSelection("CellValueTypes", oFF.ReturnedDataSelection.CELL_VALUE_TYPES);
		oFF.QInAConverter.mapReturnedDataSelection("ExceptionAlertLevel", oFF.ReturnedDataSelection.EXCEPTION_ALERTLEVEL);
		oFF.QInAConverter.mapReturnedDataSelection("ExceptionName", oFF.ReturnedDataSelection.EXCEPTION_NAME);
		oFF.QInAConverter.mapReturnedDataSelection("ExceptionSettings", oFF.ReturnedDataSelection.EXCEPTION_SETTINGS);
		oFF.QInAConverter.mapReturnedDataSelection("Exceptions", oFF.ReturnedDataSelection.EXCEPTIONS);
		oFF.QInAConverter.mapReturnedDataSelection("InputEnabled", oFF.ReturnedDataSelection.INPUT_ENABLED);
		oFF.QInAConverter.mapReturnedDataSelection("InputReadinessStates", oFF.ReturnedDataSelection.INPUT_READINESS_STATES);
		oFF.QInAConverter.mapReturnedDataSelection("NumericRounding", oFF.ReturnedDataSelection.NUMERIC_ROUNDING);
		oFF.QInAConverter.mapReturnedDataSelection("NumericShift", oFF.ReturnedDataSelection.NUMERIC_SHIFT);
		oFF.QInAConverter.mapReturnedDataSelection("TupleDisplayLevel", oFF.ReturnedDataSelection.TUPLE_DISPLAY_LEVEL);
		oFF.QInAConverter.mapReturnedDataSelection("TupleDrillState", oFF.ReturnedDataSelection.TUPLE_DRILL_STATE);
		oFF.QInAConverter.mapReturnedDataSelection("TupleElementIds", oFF.ReturnedDataSelection.TUPLE_ELEMENT_IDS);
		oFF.QInAConverter.mapReturnedDataSelection("TupleElementIndexes", oFF.ReturnedDataSelection.TUPLE_ELEMENT_INDEXES);
		oFF.QInAConverter.mapReturnedDataSelection("TupleLevel", oFF.ReturnedDataSelection.TUPLE_LEVEL);
		oFF.QInAConverter.mapReturnedDataSelection("TupleParentIndexes", oFF.ReturnedDataSelection.TUPLE_PARENT_INDEXES);
		oFF.QInAConverter.mapReturnedDataSelection("UnitDescriptions", oFF.ReturnedDataSelection.UNIT_DESCRIPTIONS);
		oFF.QInAConverter.mapReturnedDataSelection("UnitIndex", oFF.ReturnedDataSelection.UNIT_INDEX);
		oFF.QInAConverter.mapReturnedDataSelection("UnitTypes", oFF.ReturnedDataSelection.UNIT_TYPES);
		oFF.QInAConverter.mapReturnedDataSelection("Units", oFF.ReturnedDataSelection.UNITS);
		oFF.QInAConverter.mapReturnedDataSelection("Values", oFF.ReturnedDataSelection.VALUES);
		oFF.QInAConverter.mapReturnedDataSelection("ValuesFormatted", oFF.ReturnedDataSelection.VALUES_FORMATTED);
		oFF.QInAConverter.mapReturnedDataSelection("ValuesRounded", oFF.ReturnedDataSelection.VALUES_ROUNDED);
		oFF.QInAConverter.mapReturnedDataSelection("CellExplain", oFF.ReturnedDataSelection.CELL_EXPLAIN);
	},
	setupRunningAggregationOperator:function()
	{
			oFF.QInAConverter.s_lookupRunningAggregationOperatorIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupRunningAggregationOperator = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapRunningAggregationOperator("SUM", oFF.RunningTotalOperator.SUM);
		oFF.QInAConverter.mapRunningAggregationOperator("CNT", oFF.RunningTotalOperator.COUNT);
		oFF.QInAConverter.mapRunningAggregationOperator("CN0", oFF.RunningTotalOperator.COUNT_NON_ZERO);
		oFF.QInAConverter.mapRunningAggregationOperator("AVG", oFF.RunningTotalOperator.AVERAGE);
		oFF.QInAConverter.mapRunningAggregationOperator("AV0", oFF.RunningTotalOperator.AVERAGE_NON_ZERO);
		oFF.QInAConverter.mapRunningAggregationOperator("MAX", oFF.RunningTotalOperator.MAX);
		oFF.QInAConverter.mapRunningAggregationOperator("MIN", oFF.RunningTotalOperator.MIN);
		oFF.QInAConverter.mapRunningAggregationOperator("DEFAULT", oFF.RunningTotalOperator.DEFAULT);
	},
	setupRunningTotalOperator:function()
	{
			oFF.QInAConverter.s_lookupRunningTotalOperatorIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupRunningTotalOperator = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapRunningTotalOperator("Count", oFF.RunningTotalOperator.COUNT);
		oFF.QInAConverter.mapRunningTotalOperator("Min", oFF.RunningTotalOperator.MIN);
		oFF.QInAConverter.mapRunningTotalOperator("Max", oFF.RunningTotalOperator.MAX);
		oFF.QInAConverter.mapRunningTotalOperator("Sum", oFF.RunningTotalOperator.SUM);
		oFF.QInAConverter.mapRunningTotalOperator("Average", oFF.RunningTotalOperator.AVERAGE);
	},
	setupScaleAndUnitPlacement:function()
	{
			oFF.QInAConverter.s_lookupScaleAndUnitPlacementIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupScaleAndUnitPlacement = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapScaleAndUnitPlacement("Cell", oFF.ScaleAndUnitPlacement.CELL);
		oFF.QInAConverter.mapScaleAndUnitPlacement("Rows", oFF.ScaleAndUnitPlacement.ROWS);
		oFF.QInAConverter.mapScaleAndUnitPlacement("Columns", oFF.ScaleAndUnitPlacement.COLUMNS);
		oFF.QInAConverter.mapScaleAndUnitPlacement("Subtitle", oFF.ScaleAndUnitPlacement.SUBTITLE);
	},
	setupScaleFormat:function()
	{
			oFF.QInAConverter.s_lookupScaleFormatIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupScaleFormat = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapScaleFormat("Short", oFF.ScaleFormat.SHORT);
		oFF.QInAConverter.mapScaleFormat("Long", oFF.ScaleFormat.LONG);
	},
	setupSemanticBindingType:function()
	{
			oFF.QInAConverter.s_lookupSemanticBindingType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupSemanticBindingTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapSemanticBindingType("Chart", oFF.SemanticBindingType.CHART);
		oFF.QInAConverter.mapSemanticBindingType("Table", oFF.SemanticBindingType.TABLE);
		oFF.QInAConverter.mapSemanticBindingType("Grid", oFF.SemanticBindingType.GRID);
		oFF.QInAConverter.mapSemanticBindingType("Kpi", oFF.SemanticBindingType.KPI);
	},
	setupSignPresentation:function()
	{
			oFF.QInAConverter.s_lookupSignPresentationIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupSignPresentation = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapSignPresentation("BeforeNumber", oFF.SignPresentation.BEFORE_NUMBER);
		oFF.QInAConverter.mapSignPresentation("AfterNumber", oFF.SignPresentation.AFTER_NUMBER);
		oFF.QInAConverter.mapSignPresentation("Brackets", oFF.SignPresentation.BRACKETS);
		oFF.QInAConverter.mapSignPresentation("CommercialMinus", oFF.SignPresentation.COMMERCIAL_MINUS);
	},
	setupSingleValueCalculation:function()
	{
			oFF.QInAConverter.s_lookupSingleValueCalculation = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupSingleValueCalculation.put(" ", oFF.SingleValueCalculation.NOT_DEFINED);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("1", oFF.SingleValueCalculation.SUM);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("2", oFF.SingleValueCalculation.MAXIMUM);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("3", oFF.SingleValueCalculation.MINIMUM);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("4", oFF.SingleValueCalculation.COUNTER_FOR_ALL_DETAILED_VALUES);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("5", oFF.SingleValueCalculation.COUNTER_FOR_ALL_DETAILED_VALUES_NZ_NULL_ERROR);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("6", oFF.SingleValueCalculation.AVERAGE);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("7", oFF.SingleValueCalculation.AVERAGE_DETAILED_VALUES_NOT_ZERO_NULL_ERROR);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("0", oFF.SingleValueCalculation.HIDE);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("O", oFF.SingleValueCalculation.OLYMPIC_RANK_NUMBER);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("B", oFF.SingleValueCalculation.MOVING_MIN_VALUE);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("C", oFF.SingleValueCalculation.NORMALIZED_NEXT_GROUP_LEVEL_RESULT);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("D", oFF.SingleValueCalculation.MAX_VALUE_NOT_ZERO_NULL_ERROR);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("E", oFF.SingleValueCalculation.MINIMUM_VALUES_NOT_ZERO_NULL_ERROR);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("G", oFF.SingleValueCalculation.NORMALIZED_OVERALL_RESULT);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("R", oFF.SingleValueCalculation.NORMALIZED_UNRESTRICTED_OVERALL_RESULT);
		oFF.QInAConverter.s_lookupSingleValueCalculation.put("S", oFF.SingleValueCalculation.RANK_NUMBER);
	},
	setupSortingMapping:function()
	{
			oFF.QInAConverter.s_lookupSortType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupSortTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapSortType("Member", oFF.SortType.MEMBER_KEY);
		oFF.QInAConverter.mapSortType("MemberKey", oFF.SortType.MEMBER_KEY);
		oFF.QInAConverter.mapSortType("MemberText", oFF.SortType.MEMBER_TEXT);
		oFF.QInAConverter.mapSortType("Field", oFF.SortType.FIELD);
		oFF.QInAConverter.mapSortType("Selection", oFF.SortType.FILTER);
		oFF.QInAConverter.mapSortType("Filter", oFF.SortType.FILTER);
		oFF.QInAConverter.mapSortType("Datacell", oFF.SortType.DATA_CELL_VALUE);
		oFF.QInAConverter.mapSortType("Hierarchy", oFF.SortType.HIERARCHY);
		oFF.QInAConverter.mapSortType("Measure", oFF.SortType.MEASURE);
		oFF.QInAConverter.mapSortType("Complex", oFF.SortType.COMPLEX);
		oFF.QInAConverter.mapSortType("Custom", oFF.SortType.CUSTOM);
	},
	setupTextTransformation:function()
	{
			oFF.QInAConverter.s_textTransformation = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_textTransformationIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapTextTransformation("Capitalize", oFF.TextTransformationType.CAPITALIZE);
		oFF.QInAConverter.mapTextTransformation("Lowercase", oFF.TextTransformationType.LOWERCASE);
		oFF.QInAConverter.mapTextTransformation("Uppercase", oFF.TextTransformationType.UPPERCASE);
		oFF.QInAConverter.mapTextTransformation("StringTransformation", oFF.TextTransformationType.STRING_TRANSFORMATION);
		oFF.QInAConverter.mapTextTransformation("SpatialAsBinary", oFF.TextTransformationType.SPATIAL_AS_BINARY);
		oFF.QInAConverter.mapTextTransformation("SpatialAsEWKB", oFF.TextTransformationType.SPATIAL_AS_EWKB);
		oFF.QInAConverter.mapTextTransformation("SpatialAsEWKT", oFF.TextTransformationType.SPATIAL_AS_EWKT);
		oFF.QInAConverter.mapTextTransformation("SpatialAsGeoJSON", oFF.TextTransformationType.SPATIAL_AS_GEOJSON);
		oFF.QInAConverter.mapTextTransformation("SpatialAsSVG", oFF.TextTransformationType.SPATIAL_AS_SVG);
		oFF.QInAConverter.mapTextTransformation("SpatialAsText", oFF.TextTransformationType.SPATIAL_AS_TEXT);
		oFF.QInAConverter.mapTextTransformation("SpatialAsWKB", oFF.TextTransformationType.SPATIAL_AS_WKB);
		oFF.QInAConverter.mapTextTransformation("SpatialAsWKT", oFF.TextTransformationType.SPATIAL_AS_WKT);
	},
	setupUniqueAxisPropertyMapping:function()
	{
			oFF.QInAConverter.s_lookupUniqueAxisProperty = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupUniqueAxisPropertyIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapUniqueAxisProperty("NumericShift", oFF.UniqueAxisPropertyType.NUMERIC_SHIFT);
		oFF.QInAConverter.mapUniqueAxisProperty("NumericRounding", oFF.UniqueAxisPropertyType.NUMERIC_ROUNDING);
		oFF.QInAConverter.mapUniqueAxisProperty("UnitTypes", oFF.UniqueAxisPropertyType.UNIT_TYPES);
		oFF.QInAConverter.mapUniqueAxisProperty("Units", oFF.UniqueAxisPropertyType.UNITS);
		oFF.QInAConverter.mapUniqueAxisProperty("UnitDescriptions", oFF.UniqueAxisPropertyType.UNIT_DESCRIPTIONS);
		oFF.QInAConverter.mapUniqueAxisProperty("UnitIndex", oFF.UniqueAxisPropertyType.UNIT_INDEX);
		oFF.QInAConverter.mapUniqueAxisProperty("CellValueTypes", oFF.UniqueAxisPropertyType.CELL_VALUE_TYPES);
		oFF.QInAConverter.mapUniqueAxisProperty("LongestAttribute", oFF.UniqueAxisPropertyType.LONGEST_ATTRIBUTE);
		oFF.QInAConverter.mapUniqueAxisProperty("LongestCellValueRounded", oFF.UniqueAxisPropertyType.LONGEST_CELL_VALUE_ROUNDED);
		oFF.QInAConverter.mapUniqueAxisProperty("LongestCellValueFormatted", oFF.UniqueAxisPropertyType.LONGEST_CELL_VALUE_FORMATTED);
	},
	setupUnitType:function()
	{
			oFF.QInAConverter.s_lookupUnitType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupUnitTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.CONVERSION_FAILED, "CONVERSION_FAILED");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.CURRENCY, "CURRENCY");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.CURRENCY, "CUR");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.UNIT, "UNIT");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.UNIT, "UNI");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.UNDEFINED, "UDF");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.MIXED, "*");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.NULL_VALUE, "NULL");
		oFF.QInAConverter.mapConstant(oFF.QInAConverter.s_lookupUnitType, oFF.QInAConverter.s_lookupUnitTypeIna, oFF.UnitType.NONE, "NON");
	},
	setupUtErrorHandlingMode:function()
	{
			oFF.QInAConverter.s_lookupUtErrorHandlingMode = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupUtErrorHandlingModeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapUtErrorHandlingMode("keep unconverted", oFF.UtErrorHandlingMode.KEEP_UNCONVERTED);
		oFF.QInAConverter.mapUtErrorHandlingMode("set to null", oFF.UtErrorHandlingMode.SET_TO_NULL);
		oFF.QInAConverter.mapUtErrorHandlingMode("fail on error", oFF.UtErrorHandlingMode.FAIL_ON_ERROR);
	},
	setupUtRateLookup:function()
	{
			oFF.QInAConverter.s_lookupUtRateLookup = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupUtRateLookupIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapUtRateLookup("DIMENSION", oFF.UtRateLookup.DIMENSION);
		oFF.QInAConverter.mapUtRateLookup("GLOBAL", oFF.UtRateLookup.GLOBAL);
		oFF.QInAConverter.mapUtRateLookup("DIMENSION_THEN_GLOBAL", oFF.UtRateLookup.DIMENSION_THEN_GLOBAL);
		oFF.QInAConverter.mapUtRateLookup("GLOBAL_THEN_DIMENSION", oFF.UtRateLookup.GLOBAL_THEN_DIMENSION);
	},
	setupValueDomain:function()
	{
			oFF.QInAConverter.s_lookupProcessingType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupProcessingTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapValueDomain("CurrencyConversion", oFF.ProcessingType.CURRENCY_CONVERSION);
	},
	setupValueException:function()
	{
			oFF.QInAConverter.s_lookupValueException = oFF.XArray.create(11);
		oFF.QInAConverter.s_lookupValueException.set(0, oFF.ValueException.NORMAL);
		oFF.QInAConverter.s_lookupValueException.set(1, oFF.ValueException.NULL_VALUE);
		oFF.QInAConverter.s_lookupValueException.set(2, oFF.ValueException.ZERO);
		oFF.QInAConverter.s_lookupValueException.set(3, oFF.ValueException.UNDEFINED);
		oFF.QInAConverter.s_lookupValueException.set(4, oFF.ValueException.OVERFLOW);
		oFF.QInAConverter.s_lookupValueException.set(5, oFF.ValueException.NO_PRESENTATION);
		oFF.QInAConverter.s_lookupValueException.set(6, oFF.ValueException.DIFF0);
		oFF.QInAConverter.s_lookupValueException.set(7, oFF.ValueException.ERROR);
		oFF.QInAConverter.s_lookupValueException.set(8, oFF.ValueException.NO_AUTHORITY);
		oFF.QInAConverter.s_lookupValueException.set(9, oFF.ValueException.MIXED_CURRENCIES_OR_UNITS);
		oFF.QInAConverter.s_lookupValueException.set(10, oFF.ValueException.UNDEFINED_NOP);
	},
	setupValueTypeMap:function()
	{
			oFF.QInAConverter.s_lookupValueType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupValueTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapValueType("String", oFF.XValueType.STRING);
		oFF.QInAConverter.mapValueType("Numc", oFF.XValueType.NUMC);
		oFF.QInAConverter.mapValueType("Char", oFF.XValueType.CHAR);
		oFF.QInAConverter.mapValueType("Double", oFF.XValueType.DOUBLE);
		oFF.QInAConverter.mapValueType("Long", oFF.XValueType.LONG);
		oFF.QInAConverter.mapValueType("Int", oFF.XValueType.INTEGER);
		oFF.QInAConverter.mapValueType("Bool", oFF.XValueType.BOOLEAN);
		oFF.QInAConverter.mapValueType("Amount", oFF.XValueType.AMOUNT);
		oFF.QInAConverter.mapValueType("Date", oFF.XValueType.DATE);
		oFF.QInAConverter.mapValueType("Time", oFF.XValueType.TIME);
		oFF.QInAConverter.mapValueType("Timestamp", oFF.XValueType.DATE_TIME);
		oFF.QInAConverter.mapValueType("Timespan", oFF.XValueType.TIMESPAN);
		oFF.QInAConverter.mapValueType("Properties", oFF.XValueType.PROPERTIES);
		oFF.QInAConverter.mapValueType("Structure", oFF.XValueType.STRUCTURE);
		oFF.QInAConverter.mapValueType("StructureList", oFF.XValueType.STRUCTURE_LIST);
		oFF.QInAConverter.mapValueType("MultiPoint", oFF.XValueType.MULTI_POINT);
		oFF.QInAConverter.mapValueType("Point", oFF.XValueType.POINT);
		oFF.QInAConverter.mapValueType("MultiGeometry", oFF.XValueType.MULTI_POLYGON);
		oFF.QInAConverter.mapValueType("Geometry", oFF.XValueType.POLYGON);
		oFF.QInAConverter.mapValueType("MultiLineString", oFF.XValueType.MULTI_LINE_STRING);
		oFF.QInAConverter.mapValueType("LineString", oFF.XValueType.LINE_STRING);
		oFF.QInAConverter.mapValueType("Language", oFF.XValueType.LANGUAGE);
		oFF.QInAConverter.mapValueType("DecimalFloat", oFF.XValueType.DECIMAL_FLOAT);
		oFF.QInAConverter.mapValueType("FunctionalVariable", oFF.XValueType.VARIABLE);
		oFF.QInAConverter.mapValueType("Variable", oFF.XValueType.VARIABLE);
		oFF.QInAConverter.mapValueType("CurrentMember", oFF.XValueType.CURRENT_MEMBER);
		oFF.QInAConverter.mapValueType("MemberType", oFF.XValueType.MEMBER_TYPE);
		oFF.QInAConverter.mapValueType("Unit", oFF.XValueType.UNIT);
		oFF.QInAConverter.mapValueType("Cuky", oFF.XValueType.CUKY);
		oFF.QInAConverter.s_lookupCellValueType = oFF.XArray.create(15);
		oFF.QInAConverter.s_lookupCellValueType.set(0, oFF.XValueType.DOUBLE);
		oFF.QInAConverter.s_lookupCellValueType.set(1, oFF.XValueType.PERCENT);
		oFF.QInAConverter.s_lookupCellValueType.set(2, oFF.XValueType.DATE);
		oFF.QInAConverter.s_lookupCellValueType.set(3, oFF.XValueType.TIME);
		oFF.QInAConverter.s_lookupCellValueType.set(4, oFF.XValueType.STRING);
		oFF.QInAConverter.s_lookupCellValueType.set(5, oFF.XValueType.AMOUNT);
		oFF.QInAConverter.s_lookupCellValueType.set(6, oFF.XValueType.QUANTITY);
		oFF.QInAConverter.s_lookupCellValueType.set(7, oFF.XValueType.PRICE);
		oFF.QInAConverter.s_lookupCellValueType.set(8, oFF.XValueType.DIMENSION_MEMBER);
		oFF.QInAConverter.s_lookupCellValueType.set(9, oFF.XValueType.INTEGER);
		oFF.QInAConverter.s_lookupCellValueType.set(10, oFF.XValueType.DECIMAL_FLOAT);
		oFF.QInAConverter.s_lookupCellValueType.set(11, oFF.XValueType.DATE_TIME);
		oFF.QInAConverter.s_lookupCellValueType.set(12, oFF.XValueType.DATE_TIME);
		oFF.QInAConverter.s_lookupCellValueType.set(13, oFF.XValueType.BOOLEAN);
		oFF.QInAConverter.s_lookupCellValueType.set(14, oFF.XValueType.POLYGON);
	},
	setupVisibilityMapping:function()
	{
			oFF.QInAConverter.s_lookupVisibilityType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupVisibilityTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapVisibilityType("C", oFF.VisibilityType.CENTRAL);
		oFF.QInAConverter.mapVisibilityType("C/I", oFF.VisibilityType.CENTRAL_NOT_VISIBLE);
		oFF.QInAConverter.mapVisibilityType("C/D", oFF.VisibilityType.CENTRAL_DISPLAY_ONLY);
		oFF.QInAConverter.mapVisibilityType("C/C", oFF.VisibilityType.CENTRAL_CHANGE_TO_EXISTING);
		oFF.QInAConverter.mapVisibilityType("C/A", oFF.VisibilityType.CENTRAL_ADD_NEW);
		oFF.QInAConverter.mapVisibilityType("L", oFF.VisibilityType.LOCAL);
		oFF.QInAConverter.mapVisibilityType("L/I", oFF.VisibilityType.LOCAL_NOT_VISIBLE);
		oFF.QInAConverter.mapVisibilityType("L/D", oFF.VisibilityType.LOCAL_DISPLAY_ONLY);
		oFF.QInAConverter.mapVisibilityType("L/C", oFF.VisibilityType.LOCAL_CHANGE_TO_EXISTING);
		oFF.QInAConverter.mapVisibilityType("L/A", oFF.VisibilityType.LOCAL_ADD_NEW);
	},
	setupWindowFunctionTypeMapping:function()
	{
			oFF.QInAConverter.s_lookupWindowFunctionType = oFF.XHashMapByString.create();
		oFF.QInAConverter.s_lookupWindowFunctionTypeIna = oFF.XHashMapByString.create();
		oFF.QInAConverter.mapWindowFunctionType("SUM", oFF.WindowFunctionType.SUM);
		oFF.QInAConverter.mapWindowFunctionType("AVG", oFF.WindowFunctionType.AVERAGE);
		oFF.QInAConverter.mapWindowFunctionType("COUNT", oFF.WindowFunctionType.COUNT);
		oFF.QInAConverter.mapWindowFunctionType("MAX", oFF.WindowFunctionType.MAX);
		oFF.QInAConverter.mapWindowFunctionType("MIN", oFF.WindowFunctionType.MIN);
	},
	staticSetup:function()
	{
			oFF.QInAConverter.setupCtErrorHandlingMode();
		oFF.QInAConverter.setupRateType();
		oFF.QInAConverter.setupCategory();
		oFF.QInAConverter.setupUtErrorHandlingMode();
		oFF.QInAConverter.setupUtRateLookup();
		oFF.QInAConverter.setupAxisType();
		oFF.QInAConverter.setupUnitType();
		oFF.QInAConverter.setupDimensionType();
		oFF.QInAConverter.setupAlertLevel();
		oFF.QInAConverter.setupTextTransformation();
		oFF.QInAConverter.setupValueTypeMap();
		oFF.QInAConverter.setupComparisonMapping();
		oFF.QInAConverter.setupAggregationTypeMapping();
		oFF.QInAConverter.setupPresentationMapping();
		oFF.QInAConverter.setupProviderType();
		oFF.QInAConverter.setupInfoObjectType();
		oFF.QInAConverter.setupVisibilityMapping();
		oFF.QInAConverter.setupReadmodeMapping();
		oFF.QInAConverter.setupEncoding();
		oFF.QInAConverter.setupSortingMapping();
		oFF.QInAConverter.setupComponentTypeMapping();
		oFF.QInAConverter.setupMemberNavigationType();
		oFF.QInAConverter.setupResultSetState();
		oFF.QInAConverter.setupValueException();
		oFF.QInAConverter.setupSingleValueCalculation();
		oFF.QInAConverter.setupWindowFunctionTypeMapping();
		oFF.QInAConverter.setupResultCalculation();
		oFF.QInAConverter.setupValueDomain();
		oFF.QInAConverter.setupReturnedDataSelectionMapping();
		oFF.QInAConverter.setupUniqueAxisPropertyMapping();
		oFF.QInAConverter.setupCellChartOrientationMapping();
		oFF.QInAConverter.setupCellChartTypeMapping();
		oFF.QInAConverter.setupDocumentIdsScope();
		oFF.QInAConverter.setupDocumentIdsAction();
		oFF.QInAConverter.setupDocumentSupportType();
		oFF.QInAConverter.setupProtocolBindingType();
		oFF.QInAConverter.setupSemanticBindingType();
		oFF.QInAConverter.setupRunningAggregationOperator();
		oFF.QInAConverter.setupRunningTotalOperator();
		oFF.QInAConverter.setupCurrencyPresentation();
		oFF.QInAConverter.setupScaleAndUnitPlacement();
		oFF.QInAConverter.setupDateRangeGranularity();
		oFF.QInAConverter.setupFilterDisplayInfo();
		oFF.QInAConverter.setupScaleFormat();
		oFF.QInAConverter.setupSignPresentation();
		oFF.QInAConverter.setupDimensionVisibility();
		oFF.QInAConverter.setupInputEnablementRuleMode();
		oFF.QInAConverter.setupInputEnablementCacheMode();
		oFF.QInAConverter.setupInputReadinessFilterMode();
	},
	switchComparisonGroupToIncludeOnly:function(ffConstant)
	{
			if (ffConstant === oFF.QSetSignComparisonOperatorGroup.INTERVAL)
		{
			return oFF.QSetSignComparisonOperatorGroup.INTERVAL_INCLUDE_ONLY;
		}
		else if (ffConstant === oFF.QSetSignComparisonOperatorGroup.INTERVAL_WITH_NULL_ALLOWED)
		{
			return oFF.QSetSignComparisonOperatorGroup.INTERVAL_INCLUDE_ONLY_WITH_NULL_ALLOWED;
		}
		else if (ffConstant === oFF.QSetSignComparisonOperatorGroup.RANGE)
		{
			return oFF.QSetSignComparisonOperatorGroup.RANGE_INCLUDE_ONLY;
		}
		else if (ffConstant === oFF.QSetSignComparisonOperatorGroup.RANGE_WITH_NULL_ALLOWED)
		{
			return oFF.QSetSignComparisonOperatorGroup.RANGE_INCLUDE_ONLY_WITH_NULL_ALLOWED;
		}
		else if (ffConstant === oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE)
		{
			return oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE_INCLUDE_ONLY;
		}
		else if (ffConstant === oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE_WITH_NULL_ALLOWED)
		{
			return oFF.QSetSignComparisonOperatorGroup.SINGLE_VALUE_INCLUDE_ONLY_WITH_NULL_ALLOWED;
		}
		else
		{
			return ffConstant;
		}
	}
};

oFF.QRriTargetCallbackIdentifier = function() {};
oFF.QRriTargetCallbackIdentifier.prototype = new oFF.XObject();
oFF.QRriTargetCallbackIdentifier.prototype._ff_c = "QRriTargetCallbackIdentifier";

oFF.QRriTargetCallbackIdentifier.create = function(manager, row, column, listener, customIdentifier)
{
	let newObj = new oFF.QRriTargetCallbackIdentifier();
	newObj.m_manager = manager;
	newObj.m_row = row;
	newObj.m_column = column;
	newObj.m_listener = listener;
	newObj.m_customIdentifier = customIdentifier;
	return newObj;
};
oFF.QRriTargetCallbackIdentifier.prototype.m_column = 0;
oFF.QRriTargetCallbackIdentifier.prototype.m_customIdentifier = null;
oFF.QRriTargetCallbackIdentifier.prototype.m_listener = null;
oFF.QRriTargetCallbackIdentifier.prototype.m_manager = null;
oFF.QRriTargetCallbackIdentifier.prototype.m_row = 0;
oFF.QRriTargetCallbackIdentifier.prototype.getColumn = function()
{
	return this.m_column;
};
oFF.QRriTargetCallbackIdentifier.prototype.getCustomIdentifier = function()
{
	return this.m_customIdentifier;
};
oFF.QRriTargetCallbackIdentifier.prototype.getListener = function()
{
	return this.m_listener;
};
oFF.QRriTargetCallbackIdentifier.prototype.getManager = function()
{
	return this.m_manager;
};
oFF.QRriTargetCallbackIdentifier.prototype.getRow = function()
{
	return this.m_row;
};

oFF.QRriTargetManager = function() {};
oFF.QRriTargetManager.prototype = new oFF.XObject();
oFF.QRriTargetManager.prototype._ff_c = "QRriTargetManager";

oFF.QRriTargetManager.create = function(queryManager)
{
	let rriTargetManager = new oFF.QRriTargetManager();
	rriTargetManager.setupInstance(queryManager);
	return rriTargetManager;
};
oFF.QRriTargetManager.prototype.m_compatibilityMode = false;
oFF.QRriTargetManager.prototype.m_contextType = null;
oFF.QRriTargetManager.prototype.m_extResult = null;
oFF.QRriTargetManager.prototype.m_focusDimension = null;
oFF.QRriTargetManager.prototype.m_minimizeRequestPayload = false;
oFF.QRriTargetManager.prototype.m_pathContextMembers = null;
oFF.QRriTargetManager.prototype.m_queryManager = null;
oFF.QRriTargetManager.prototype.m_resultSetColumn = 0;
oFF.QRriTargetManager.prototype.m_resultSetColumnElements = 0;
oFF.QRriTargetManager.prototype.m_resultSetRow = 0;
oFF.QRriTargetManager.prototype.m_resultSetRowElements = 0;
oFF.QRriTargetManager.prototype.getFocusDimension = function()
{
	return this.m_focusDimension;
};
oFF.QRriTargetManager.prototype.getPathContextMembers = function()
{
	return this.m_pathContextMembers;
};
oFF.QRriTargetManager.prototype.getResultSetColumn = function()
{
	return this.m_resultSetColumn;
};
oFF.QRriTargetManager.prototype.getResultSetColumnElements = function()
{
	return this.m_resultSetColumnElements;
};
oFF.QRriTargetManager.prototype.getResultSetRow = function()
{
	return this.m_resultSetRow;
};
oFF.QRriTargetManager.prototype.getResultSetRowElements = function()
{
	return this.m_resultSetRowElements;
};
oFF.QRriTargetManager.prototype.getRriContextType = function()
{
	return this.m_contextType;
};
oFF.QRriTargetManager.prototype.getRriTargetsOfSupportedTargetType = function(syncType, listener, customIdentifier)
{
	return this.processRriTargetResolutionInternal(syncType, listener, customIdentifier, null, true);
};
oFF.QRriTargetManager.prototype.getRriTargetsOfTargetTypes = function(syncType, listener, customIdentifier, targetTypes)
{
	return this.processRriTargetResolutionInternal(syncType, listener, customIdentifier, targetTypes, false);
};
oFF.QRriTargetManager.prototype.isCompatibilityMode = function()
{
	return this.m_compatibilityMode;
};
oFF.QRriTargetManager.prototype.isCustomPathContext = function()
{
	return this.m_contextType === oFF.RriContextType.CUSTOM_PATH_CONTEXT;
};
oFF.QRriTargetManager.prototype.isMemberContext = function()
{
	return this.m_contextType === oFF.RriContextType.MEMBER_CONTEXT;
};
oFF.QRriTargetManager.prototype.isMinimizeRequestPayload = function()
{
	return this.m_minimizeRequestPayload;
};
oFF.QRriTargetManager.prototype.isResultSetContext = function()
{
	return this.m_contextType === oFF.RriContextType.RESULT_SET_CONTEXT;
};
oFF.QRriTargetManager.prototype.processRriTargetResolution = function(syncType, listener, customIdentifier)
{
	return this.processRriTargetResolutionInternal(syncType, listener, customIdentifier, null, false);
};
oFF.QRriTargetManager.prototype.processRriTargetResolutionInternal = function(syncType, listener, customIdentifier, targetTypes, restrictOnSupported)
{
	let identifier = oFF.QRriTargetCallbackIdentifier.create(this, this.m_resultSetRow, this.m_resultSetColumn, listener, customIdentifier);
	this.m_extResult = null;
	let queryManager = oFF.XWeakReferenceUtil.getHardRef(this.m_queryManager);
	queryManager.processRriTargetSync(syncType, identifier, targetTypes, restrictOnSupported, this.m_minimizeRequestPayload);
	let result = this.m_extResult;
	this.m_extResult = null;
	return result;
};
oFF.QRriTargetManager.prototype.releaseObject = function()
{
	this.m_queryManager = oFF.XObjectExt.release(this.m_queryManager);
	this.m_focusDimension = null;
	this.m_pathContextMembers = null;
	this.m_contextType = null;
	this.m_extResult = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.QRriTargetManager.prototype.retrieveDetailsOfTarget = function(syncType, listener, customIdentifier, targetKey, queryPattern)
{
	if (this.isCompatibilityMode())
	{
		return null;
	}
	let identifier = oFF.QRriTargetCallbackIdentifier.create(this, this.m_resultSetRow, this.m_resultSetColumn, listener, customIdentifier);
	this.m_extResult = null;
	let queryManager = oFF.XWeakReferenceUtil.getHardRef(this.m_queryManager);
	queryManager.processRriTargetDetails(syncType, identifier, targetKey, queryPattern, this.m_minimizeRequestPayload);
	let result = this.m_extResult;
	this.m_extResult = null;
	return result;
};
oFF.QRriTargetManager.prototype.setCompatibilityMode = function(compatibilityMode)
{
	this.m_compatibilityMode = compatibilityMode;
};
oFF.QRriTargetManager.prototype.setCustomPathContext = function(focusDimension, pathContextMembers)
{
	this.m_focusDimension = focusDimension;
	if (oFF.isNull(this.m_pathContextMembers))
	{
		this.m_pathContextMembers = oFF.XList.create();
	}
	else
	{
		this.m_pathContextMembers.clear();
	}
	this.m_pathContextMembers.addAll(pathContextMembers);
	this.m_contextType = oFF.RriContextType.CUSTOM_PATH_CONTEXT;
};
oFF.QRriTargetManager.prototype.setMemberContext = function(resultSetRow, resultSetRowElements, resultSetColumn, resultSetColumnElements)
{
	this.m_resultSetRow = resultSetRow;
	this.m_resultSetColumn = resultSetColumn;
	this.m_resultSetRowElements = resultSetRowElements;
	this.m_resultSetColumnElements = resultSetColumnElements;
	this.m_contextType = oFF.RriContextType.MEMBER_CONTEXT;
};
oFF.QRriTargetManager.prototype.setMinimizeRequestPayload = function(minimizeRequestPayload)
{
	this.m_minimizeRequestPayload = minimizeRequestPayload;
};
oFF.QRriTargetManager.prototype.setResult = function(extResult, identifier)
{
	this.m_extResult = extResult;
	if (identifier.getListener() !== null)
	{
		let rriTargets = null;
		if (extResult.isValid())
		{
			rriTargets = extResult.getData();
		}
		identifier.getListener().onRriTargetResolution(extResult, rriTargets, identifier.getCustomIdentifier());
	}
};
oFF.QRriTargetManager.prototype.setResultSetContext = function(resultSetRow, resultSetColumn)
{
	this.m_resultSetRow = resultSetRow;
	this.m_resultSetColumn = resultSetColumn;
	this.m_contextType = oFF.RriContextType.RESULT_SET_CONTEXT;
};
oFF.QRriTargetManager.prototype.setupInstance = function(queryManager)
{
	this.m_queryManager = oFF.XWeakReferenceUtil.getWeakRef(queryManager);
	this.m_minimizeRequestPayload = true;
	this.m_compatibilityMode = false;
};

oFF.ClusteringDbScan = function() {};
oFF.ClusteringDbScan.prototype = new oFF.AbstractSpatialClustering();
oFF.ClusteringDbScan.prototype._ff_c = "ClusteringDbScan";

oFF.ClusteringDbScan.create = function(spatialClusterContext)
{
	let dbScan = new oFF.ClusteringDbScan();
	dbScan.setupDbScan(spatialClusterContext);
	return dbScan;
};
oFF.ClusteringDbScan.prototype.m_eps = null;
oFF.ClusteringDbScan.prototype.m_minPoints = null;
oFF.ClusteringDbScan.prototype.cloneExt = function(flags)
{
	let clone = oFF.ClusteringDbScan.create(null);
	this.cloneClustering(clone);
	clone.setEps(this.getEps());
	clone.setMinPoints(this.getMinPoints());
	return clone;
};
oFF.ClusteringDbScan.prototype.getClusterAlgorithm = function()
{
	return oFF.ClusterAlgorithm.DB_SCAN;
};
oFF.ClusteringDbScan.prototype.getEps = function()
{
	return this.m_eps.getDouble();
};
oFF.ClusteringDbScan.prototype.getMinPoints = function()
{
	return this.m_minPoints.getInteger();
};
oFF.ClusteringDbScan.prototype.releaseObject = function()
{
	this.m_eps = oFF.XObjectExt.release(this.m_eps);
	this.m_minPoints = oFF.XObjectExt.release(this.m_minPoints);
	oFF.AbstractSpatialClustering.prototype.releaseObject.call( this );
};
oFF.ClusteringDbScan.prototype.setEps = function(eps)
{
	this.m_eps.setDouble(eps);
};
oFF.ClusteringDbScan.prototype.setMinPoints = function(minPoints)
{
	this.m_minPoints.setInteger(minPoints);
};
oFF.ClusteringDbScan.prototype.setupDbScan = function(spatialClusterContext)
{
	oFF.AbstractSpatialClustering.prototype.setupSpatialClustering.call( this , spatialClusterContext);
	this.m_eps = oFF.XDoubleValue.create(0);
	this.m_minPoints = oFF.XIntegerValue.create(0);
	this.m_parameters.put("EPS", this.m_eps);
	this.m_parameters.put("MinPoints", this.m_minPoints);
};

oFF.ClusteringGrid = function() {};
oFF.ClusteringGrid.prototype = new oFF.AbstractSpatialClustering();
oFF.ClusteringGrid.prototype._ff_c = "ClusteringGrid";

oFF.ClusteringGrid.create = function(spatialClusterContext)
{
	let grid = new oFF.ClusteringGrid();
	grid.setupGrid(spatialClusterContext);
	return grid;
};
oFF.ClusteringGrid.prototype.m_cellsX = null;
oFF.ClusteringGrid.prototype.m_cellsY = null;
oFF.ClusteringGrid.prototype.m_lowerBoundX = null;
oFF.ClusteringGrid.prototype.m_lowerBoundY = null;
oFF.ClusteringGrid.prototype.m_upperBoundX = null;
oFF.ClusteringGrid.prototype.m_upperBoundY = null;
oFF.ClusteringGrid.prototype.cloneExt = function(flags)
{
	let clone = oFF.ClusteringGrid.create(null);
	this.cloneClustering(clone);
	clone.setCellsX(this.getCellsX());
	clone.setCellsY(this.getCellsY());
	if (oFF.notNull(this.m_lowerBoundX))
	{
		clone.setLowerBoundX(this.getLowerBoundX());
	}
	if (oFF.notNull(this.m_upperBoundX))
	{
		clone.setUpperBoundX(this.getUpperBoundX());
	}
	if (oFF.notNull(this.m_lowerBoundY))
	{
		clone.setLowerBoundY(this.getLowerBoundY());
	}
	if (oFF.notNull(this.m_upperBoundY))
	{
		clone.setUpperBoundY(this.getUpperBoundY());
	}
	return clone;
};
oFF.ClusteringGrid.prototype.getCellsX = function()
{
	return this.m_cellsX.getInteger();
};
oFF.ClusteringGrid.prototype.getCellsY = function()
{
	return this.m_cellsY.getInteger();
};
oFF.ClusteringGrid.prototype.getClusterAlgorithm = function()
{
	return oFF.ClusterAlgorithm.GRID;
};
oFF.ClusteringGrid.prototype.getLowerBoundX = function()
{
	return oFF.isNull(this.m_lowerBoundX) ? 0 : this.m_lowerBoundX.getDouble();
};
oFF.ClusteringGrid.prototype.getLowerBoundY = function()
{
	return oFF.isNull(this.m_lowerBoundY) ? 0 : this.m_lowerBoundY.getDouble();
};
oFF.ClusteringGrid.prototype.getUpperBoundX = function()
{
	return oFF.isNull(this.m_upperBoundX) ? 0 : this.m_upperBoundX.getDouble();
};
oFF.ClusteringGrid.prototype.getUpperBoundY = function()
{
	return oFF.isNull(this.m_upperBoundY) ? 0 : this.m_upperBoundY.getDouble();
};
oFF.ClusteringGrid.prototype.releaseObject = function()
{
	this.m_lowerBoundX = oFF.XObjectExt.release(this.m_lowerBoundX);
	this.m_upperBoundX = oFF.XObjectExt.release(this.m_upperBoundX);
	this.m_lowerBoundY = oFF.XObjectExt.release(this.m_lowerBoundY);
	this.m_upperBoundY = oFF.XObjectExt.release(this.m_upperBoundY);
	this.m_cellsX = oFF.XObjectExt.release(this.m_cellsX);
	this.m_cellsY = oFF.XObjectExt.release(this.m_cellsY);
	oFF.AbstractSpatialClustering.prototype.releaseObject.call( this );
};
oFF.ClusteringGrid.prototype.setCellsX = function(cellsX)
{
	this.m_cellsX.setInteger(cellsX);
};
oFF.ClusteringGrid.prototype.setCellsY = function(cellsY)
{
	this.m_cellsY.setInteger(cellsY);
};
oFF.ClusteringGrid.prototype.setLowerBoundX = function(lowerBoundX)
{
	if (oFF.isNull(this.m_lowerBoundX))
	{
		this.m_lowerBoundX = oFF.XDoubleValue.create(lowerBoundX);
		this.m_parameters.put("XLowerBound", this.m_lowerBoundX);
	}
	else
	{
		this.m_lowerBoundX.setDouble(lowerBoundX);
	}
};
oFF.ClusteringGrid.prototype.setLowerBoundY = function(lowerBoundY)
{
	if (oFF.isNull(this.m_lowerBoundY))
	{
		this.m_lowerBoundY = oFF.XDoubleValue.create(lowerBoundY);
		this.m_parameters.put("YLowerBound", this.m_lowerBoundY);
	}
	else
	{
		this.m_lowerBoundY.setDouble(lowerBoundY);
	}
};
oFF.ClusteringGrid.prototype.setUpperBoundX = function(upperBoundX)
{
	if (oFF.isNull(this.m_upperBoundX))
	{
		this.m_upperBoundX = oFF.XDoubleValue.create(upperBoundX);
		this.m_parameters.put("XUpperBound", this.m_upperBoundX);
	}
	else
	{
		this.m_upperBoundX.setDouble(upperBoundX);
	}
};
oFF.ClusteringGrid.prototype.setUpperBoundY = function(upperBoundY)
{
	if (oFF.isNull(this.m_upperBoundY))
	{
		this.m_upperBoundY = oFF.XDoubleValue.create(upperBoundY);
		this.m_parameters.put("YUpperBound", this.m_upperBoundY);
	}
	else
	{
		this.m_upperBoundY.setDouble(upperBoundY);
	}
};
oFF.ClusteringGrid.prototype.setupGrid = function(spatialClusterContext)
{
	oFF.AbstractSpatialClustering.prototype.setupSpatialClustering.call( this , spatialClusterContext);
	this.m_cellsX = oFF.XIntegerValue.create(0);
	this.m_cellsY = oFF.XIntegerValue.create(0);
	this.m_parameters.put("XCells", this.m_cellsX);
	this.m_parameters.put("YCells", this.m_cellsY);
};

oFF.ClusteringKmeans = function() {};
oFF.ClusteringKmeans.prototype = new oFF.AbstractSpatialClustering();
oFF.ClusteringKmeans.prototype._ff_c = "ClusteringKmeans";

oFF.ClusteringKmeans.create = function(spatialClusterContext)
{
	let kMeans = new oFF.ClusteringKmeans();
	kMeans.setupKMeans(spatialClusterContext);
	return kMeans;
};
oFF.ClusteringKmeans.prototype.m_clusters = null;
oFF.ClusteringKmeans.prototype.m_init = null;
oFF.ClusteringKmeans.prototype.m_maxIterations = null;
oFF.ClusteringKmeans.prototype.m_threshold = null;
oFF.ClusteringKmeans.prototype.cloneExt = function(flags)
{
	let clone = oFF.ClusteringKmeans.create(null);
	this.cloneClustering(clone);
	clone.setClusters(this.getClusters());
	if (oFF.notNull(this.m_init))
	{
		clone.setInit(this.getInit());
	}
	if (oFF.notNull(this.m_maxIterations))
	{
		clone.setMaxIterations(this.getMaxIterations());
	}
	if (oFF.notNull(this.m_threshold))
	{
		clone.setThreshold(this.getThreshold());
	}
	return clone;
};
oFF.ClusteringKmeans.prototype.getClusterAlgorithm = function()
{
	return oFF.ClusterAlgorithm.K_MEANS;
};
oFF.ClusteringKmeans.prototype.getClusters = function()
{
	return this.m_clusters.getInteger();
};
oFF.ClusteringKmeans.prototype.getInit = function()
{
	return oFF.isNull(this.m_init) ? null : this.m_init.getString();
};
oFF.ClusteringKmeans.prototype.getMaxIterations = function()
{
	return oFF.isNull(this.m_maxIterations) ? 0 : this.m_maxIterations.getInteger();
};
oFF.ClusteringKmeans.prototype.getThreshold = function()
{
	return oFF.isNull(this.m_threshold) ? 0 : this.m_threshold.getDouble();
};
oFF.ClusteringKmeans.prototype.releaseObject = function()
{
	this.m_init = oFF.XObjectExt.release(this.m_init);
	this.m_clusters = oFF.XObjectExt.release(this.m_clusters);
	this.m_maxIterations = oFF.XObjectExt.release(this.m_maxIterations);
	this.m_threshold = oFF.XObjectExt.release(this.m_threshold);
	oFF.AbstractSpatialClustering.prototype.releaseObject.call( this );
};
oFF.ClusteringKmeans.prototype.setClusters = function(clusters)
{
	this.m_clusters.setInteger(clusters);
};
oFF.ClusteringKmeans.prototype.setInit = function(setValue)
{
	if (oFF.isNull(this.m_init))
	{
		this.m_init = oFF.XStringValue.create(setValue);
		this.m_parameters.put("Init", this.m_init);
	}
	else
	{
		this.m_init.setString(setValue);
	}
};
oFF.ClusteringKmeans.prototype.setMaxIterations = function(maxIterations)
{
	if (oFF.isNull(this.m_maxIterations))
	{
		this.m_maxIterations = oFF.XIntegerValue.create(maxIterations);
		this.m_parameters.put("MaxIterations", this.m_maxIterations);
	}
	else
	{
		this.m_maxIterations.setInteger(maxIterations);
	}
};
oFF.ClusteringKmeans.prototype.setThreshold = function(threshold)
{
	if (oFF.isNull(this.m_threshold))
	{
		this.m_threshold = oFF.XDoubleValue.create(threshold);
		this.m_parameters.put("Threshold", this.m_threshold);
	}
	else
	{
		this.m_threshold.setDouble(threshold);
	}
};
oFF.ClusteringKmeans.prototype.setupKMeans = function(spatialClusterContext)
{
	this.setupSpatialClustering(spatialClusterContext);
	this.m_clusters = oFF.XIntegerValue.create(0);
	this.m_parameters.put("Clusters", this.m_clusters);
};

oFF.CommentingFactoryImpl = function() {};
oFF.CommentingFactoryImpl.prototype = new oFF.XObject();
oFF.CommentingFactoryImpl.prototype._ff_c = "CommentingFactoryImpl";

oFF.CommentingFactoryImpl.create = function()
{
	return new oFF.CommentingFactoryImpl();
};
oFF.CommentingFactoryImpl.prototype.newCommentingThread = function(creator)
{
	return oFF.CommentingThread.create(creator);
};
oFF.CommentingFactoryImpl.prototype.newCommentingThreadFromStructure = function(structure)
{
	return oFF.CommentingThread.createFromStructure(structure);
};

oFF.CustomHierarchyRepository = function() {};
oFF.CustomHierarchyRepository.prototype = new oFF.XObject();
oFF.CustomHierarchyRepository.prototype._ff_c = "CustomHierarchyRepository";

oFF.CustomHierarchyRepository.create = function(application)
{
	let newObj = new oFF.CustomHierarchyRepository();
	newObj.m_application = oFF.XWeakReferenceUtil.getWeakRef(application);
	newObj.m_customHierarchies = oFF.XList.create();
	return newObj;
};
oFF.CustomHierarchyRepository.getHierarchyNamesFromExportedJson = function(customHierarchyDefinitions)
{
	let hierarchyNames = oFF.XList.create();
	let hierarchies = oFF.XStringUtils.isNotNullAndNotEmpty(customHierarchyDefinitions) ? oFF.JsonParserFactory.createFromSafeString(customHierarchyDefinitions).asList() : oFF.PrFactory.createList();
	let importer = oFF.QInAImportFactory.createForRepository(null, null);
	for (let i = 0; i < hierarchies.size(); i++)
	{
		hierarchyNames.add(importer.importCustomHierarchyDefinition(hierarchies.getStructureAt(i)).getName());
	}
	oFF.XObjectExt.release(importer);
	return hierarchyNames;
};
oFF.CustomHierarchyRepository.prototype.m_application = null;
oFF.CustomHierarchyRepository.prototype.m_customHierarchies = null;
oFF.CustomHierarchyRepository.prototype._getCustomHierarchyCatalogItemsByDimensionName = function(system, dataSource, dimension, hierarchyNameFilter)
{
	return this.convertToHierarchyCatalogItems(this.getCustomHierarchyDefinitionsByDimensionName(system, dataSource, dimension), hierarchyNameFilter);
};
oFF.CustomHierarchyRepository.prototype.addCustomHierarchiesUsedByDimensions = function(dimensions, usedCustomHierarchies)
{
	oFF.XStream.of(dimensions).map((dimension) => {
		return dimension.isHierarchyActive() ? dimension.getCustomHierarchyDefinition() : null;
	}).filterNullValues().forEach((hierarchy) => {
		usedCustomHierarchies.add(hierarchy);
	});
};
oFF.CustomHierarchyRepository.prototype.addCustomHierarchy = function(customHierarchyDefinition)
{
	if (oFF.notNull(customHierarchyDefinition) && oFF.XStringUtils.isNotNullAndNotEmpty(customHierarchyDefinition.getName()))
	{
		this.m_customHierarchies.removeElement(this.getCustomHierarchyDefinitionByName(customHierarchyDefinition.getName()));
		this.m_customHierarchies.add(customHierarchyDefinition);
	}
};
oFF.CustomHierarchyRepository.prototype.addHierarchyNamesUsedByDimensions = function(dimensions, hierarchies)
{
	oFF.XStream.of(dimensions).filter((dimension) => {
		return dimension.isHierarchyActive() && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getHierarchyName());
	}).forEach((dimWithHierarchy) => {
		hierarchies.add(dimWithHierarchy.getHierarchyName());
	});
};
oFF.CustomHierarchyRepository.prototype.convertToHierarchyCatalogItems = function(hierarchyDefinitions, hierarchyNameFilter)
{
	let result = oFF.XList.create();
	for (let i = 0; i < hierarchyDefinitions.size(); i++)
	{
		let customHierarchyDefinition = hierarchyDefinitions.get(i);
		let name = customHierarchyDefinition.getName();
		let description = customHierarchyDefinition.getDescription();
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyNameFilter) || oFF.XPattern.matches(name, hierarchyNameFilter) || oFF.XPattern.matches(description, hierarchyNameFilter))
		{
			let item = oFF.HierarchyCatalogItem.createCatalogItem();
			item.setDimensionName(customHierarchyDefinition.getDimensionName());
			item.setHierarchyName(name);
			item.setHierarchyShortText(description);
			item.setCustomHierarchyDefinition(customHierarchyDefinition);
			result.add(item);
		}
	}
	return result;
};
oFF.CustomHierarchyRepository.prototype.exportCustomHierarchiesInternal = function(customHierarchies)
{
	let inaHierarchies = oFF.PrFactory.createList();
	let exporter = oFF.QInAExportFactory.createForRepository(oFF.XWeakReferenceUtil.getHardRef(this.m_application), null);
	for (let i = 0; i < customHierarchies.size(); i++)
	{
		inaHierarchies.add(exporter.exportCustomHierarchyDefinition(customHierarchies.get(i)));
	}
	oFF.XObjectExt.release(exporter);
	return inaHierarchies;
};
oFF.CustomHierarchyRepository.prototype.exportCustomHierarchiesToJsonInternal = function(customHierarchies)
{
	return oFF.PrUtils.serialize(this.exportCustomHierarchiesInternal(customHierarchies), true, false, 0);
};
oFF.CustomHierarchyRepository.prototype.exportCustomHierarchyDefinitions = function()
{
	return this.exportCustomHierarchiesInternal(this.m_customHierarchies);
};
oFF.CustomHierarchyRepository.prototype.exportCustomHierarchyDefinitionsByNameToJson = function(customHierarchyNames)
{
	let customHierarchies = oFF.XList.create();
	let size = oFF.notNull(customHierarchyNames) ? customHierarchyNames.size() : 0;
	for (let i = 0; i < size; i++)
	{
		let customHierarchyDefinition = this.getCustomHierarchyDefinitionByName(customHierarchyNames.get(i));
		if (oFF.notNull(customHierarchyDefinition))
		{
			customHierarchies.add(customHierarchyDefinition);
		}
	}
	return this.exportCustomHierarchiesToJsonInternal(customHierarchies);
};
oFF.CustomHierarchyRepository.prototype.exportCustomHierarchyDefinitionsToJson = function()
{
	return this.exportCustomHierarchiesToJsonInternal(this.m_customHierarchies);
};
oFF.CustomHierarchyRepository.prototype.getCustomHierarchiesUsedInQueryModel = function(queryModel)
{
	let usedCustomHierarchies = oFF.XList.create();
	this.addCustomHierarchiesUsedByDimensions(queryModel.getRowsAxis().getDimensions(), usedCustomHierarchies);
	this.addCustomHierarchiesUsedByDimensions(queryModel.getColumnsAxis().getDimensions(), usedCustomHierarchies);
	if (queryModel.getMeasureDimension() !== null)
	{
		oFF.XStream.of(queryModel.getMeasureDimension().getExtendedStructureMembers()).filter((member) => {
			return member.getMemberType().isTypeOf(oFF.MemberType.RESTRICTED_MEASURE);
		}).map((restrictedMeasure) => {
			return restrictedMeasure.getFilter().getUsedCustomHierarchies();
		}).forEach((hierarchies) => {
			oFF.XCollectionUtils.addAllIfNotPresent(usedCustomHierarchies, hierarchies);
		});
	}
	oFF.XCollectionUtils.addAllIfNotPresent(usedCustomHierarchies, queryModel.getFilter().getEffectiveFilter().getUsedCustomHierarchies());
	return usedCustomHierarchies;
};
oFF.CustomHierarchyRepository.prototype.getCustomHierarchyCatalogItems = function(dimension, hierarchyNameFilter)
{
	return this.convertToHierarchyCatalogItems(this.getCustomHierarchyDefinitionsByDimension(dimension), hierarchyNameFilter);
};
oFF.CustomHierarchyRepository.prototype.getCustomHierarchyDefinitionByName = function(hierarchyName)
{
	for (let i = 0; i < this.m_customHierarchies.size(); i++)
	{
		let hierarchyDefinition = this.m_customHierarchies.get(i);
		if (oFF.XString.isEqual(hierarchyDefinition.getName(), hierarchyName))
		{
			return hierarchyDefinition;
		}
	}
	return null;
};
oFF.CustomHierarchyRepository.prototype.getCustomHierarchyDefinitions = function()
{
	return this.m_customHierarchies;
};
oFF.CustomHierarchyRepository.prototype.getCustomHierarchyDefinitionsByDimension = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		let queryManager = dimension.getQueryManager();
		let datasourceName = queryManager.getSystemType().isTypeOf(oFF.SystemType.ABAP) ? null : dimension.getDataSource().getName();
		return this.getCustomHierarchyDefinitionsByDimensionName(queryManager.getSystemName(), datasourceName, dimension.getName());
	}
	return oFF.XList.create();
};
oFF.CustomHierarchyRepository.prototype.getCustomHierarchyDefinitionsByDimensionName = function(system, dataSource, dimension)
{
	let hierarchies = oFF.XList.create();
	if (oFF.notNull(dimension))
	{
		let size = this.m_customHierarchies.size();
		for (let i = 0; i < size; i++)
		{
			let hierarchy = this.m_customHierarchies.get(i);
			if (oFF.XString.isEqual(hierarchy.getSystemName(), system) && (oFF.isNull(dataSource) || oFF.XString.isEqual(hierarchy.getDataSourceName(), dataSource)) && oFF.XString.isEqual(hierarchy.getDimensionName(), dimension))
			{
				hierarchies.add(hierarchy);
			}
		}
	}
	return hierarchies;
};
oFF.CustomHierarchyRepository.prototype.getHierarchyNamesFromExportedJsonExt = function(customHierarchyDefinitions)
{
	return oFF.CustomHierarchyRepository.getHierarchyNamesFromExportedJson(customHierarchyDefinitions);
};
oFF.CustomHierarchyRepository.prototype.getHierarchyNamesUsedInQueryModel = function(queryModel)
{
	let usedHierarchyNames = oFF.XHashSetOfString.create();
	this.addHierarchyNamesUsedByDimensions(queryModel.getRowsAxis().getDimensions(), usedHierarchyNames);
	this.addHierarchyNamesUsedByDimensions(queryModel.getColumnsAxis().getDimensions(), usedHierarchyNames);
	if (queryModel.getMeasureDimension() !== null)
	{
		oFF.XStream.of(queryModel.getMeasureDimension().getExtendedStructureMembers()).filter((member) => {
			return member.getMemberType().isTypeOf(oFF.MemberType.RESTRICTED_MEASURE);
		}).forEach((restrictedMeasure) => {
			usedHierarchyNames.addAll(restrictedMeasure.getFilter().getUsedHierarchyNames());
		});
	}
	usedHierarchyNames.addAll(queryModel.getFilter().getEffectiveFilter().getUsedHierarchyNames());
	return usedHierarchyNames;
};
oFF.CustomHierarchyRepository.prototype.importCustomHierarchyDefinitions = function(customHierarchyDefinitions)
{
	if (oFF.notNull(customHierarchyDefinitions) && customHierarchyDefinitions.isList())
	{
		let hierarchies = customHierarchyDefinitions.asList();
		let importer = oFF.QInAImportFactory.createForRepository(oFF.XWeakReferenceUtil.getHardRef(this.m_application), null);
		for (let i = 0; i < hierarchies.size(); i++)
		{
			this.addCustomHierarchy(importer.importCustomHierarchyDefinition(hierarchies.getStructureAt(i)));
		}
		oFF.XObjectExt.release(importer);
	}
};
oFF.CustomHierarchyRepository.prototype.importCustomHierarchyDefinitionsFromJson = function(customHierarchyDefinitions)
{
	this.importCustomHierarchyDefinitions(oFF.JsonParserFactory.createFromSafeString(customHierarchyDefinitions));
};
oFF.CustomHierarchyRepository.prototype.releaseObject = function()
{
	this.m_application = null;
	this.m_customHierarchies = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_customHierarchies);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.CustomHierarchyRepository.prototype.removeCustomHierarchyDefinition = function(customHierarchyDefinition)
{
	if (oFF.notNull(customHierarchyDefinition) && oFF.XStringUtils.isNotNullAndNotEmpty(customHierarchyDefinition.getName()))
	{
		this.m_customHierarchies.removeElement(this.getCustomHierarchyDefinitionByName(customHierarchyDefinition.getName()));
	}
};

oFF.OlapEnvQueryManagerHandler = function() {};
oFF.OlapEnvQueryManagerHandler.prototype = new oFF.XObject();
oFF.OlapEnvQueryManagerHandler.prototype._ff_c = "OlapEnvQueryManagerHandler";

oFF.OlapEnvQueryManagerHandler.create = function(olapEnv)
{
	let olapEnvQueryManagerHandler = new oFF.OlapEnvQueryManagerHandler();
	olapEnvQueryManagerHandler.setupQueryManagerHandler(olapEnv);
	return olapEnvQueryManagerHandler;
};
oFF.OlapEnvQueryManagerHandler.prototype.m_identifier = null;
oFF.OlapEnvQueryManagerHandler.prototype.m_listener = null;
oFF.OlapEnvQueryManagerHandler.prototype.m_olapEnv = null;
oFF.OlapEnvQueryManagerHandler.prototype.m_queryManagers = null;
oFF.OlapEnvQueryManagerHandler.prototype.createQueryManagerWithMicroCube = function(microCube, systemName)
{
	let queryServiceConfig = oFF.QueryServiceConfig.createWithMicroCube(this.getOlapEnv().getApplication(), systemName, microCube);
	let queryManager = queryServiceConfig.getQueryManagerBasedOnMicroCube();
	this.m_queryManagers.put(queryManager.getInstanceId(), queryManager);
	return queryManager;
};
oFF.OlapEnvQueryManagerHandler.prototype.getOlapEnv = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_olapEnv);
};
oFF.OlapEnvQueryManagerHandler.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	let xGuid = customIdentifier;
	let guid = xGuid.getString();
	if (extResult.isValid())
	{
		this.m_queryManagers.put(queryManager.getInstanceId(), queryManager);
	}
	let listener = this.m_listener.remove(guid);
	let identifier = this.m_identifier.remove(guid);
	if (oFF.notNull(listener))
	{
		listener.onQueryManagerCreated(extResult, queryManager, identifier);
	}
};
oFF.OlapEnvQueryManagerHandler.prototype.processQueryManagerCreationWithBlendingDefinition = function(syncType, listener, customIdentifier, blendingDefinition)
{
	let queryServiceConfig = oFF.QueryServiceConfig.createWithBlendingDefinition(this.getOlapEnv().getApplication(), blendingDefinition);
	let guid = oFF.XGuid.getGuid();
	this.m_listener.put(guid, listener);
	this.m_identifier.put(guid, customIdentifier);
	return queryServiceConfig.processQueryManagerCreation(syncType, this, oFF.XStringValue.create(guid));
};
oFF.OlapEnvQueryManagerHandler.prototype.processQueryManagerCreationWithDataSourceName = function(syncType, listener, customIdentifier, systemName, dataSourceName)
{
	let queryServiceConfig = oFF.QueryServiceConfig.createWithDataSourceName(this.getOlapEnv().getApplication(), systemName, dataSourceName);
	let guid = oFF.XGuid.getGuid();
	this.m_listener.put(guid, listener);
	this.m_identifier.put(guid, customIdentifier);
	return queryServiceConfig.processQueryManagerCreation(syncType, this, oFF.XStringValue.create(guid));
};
oFF.OlapEnvQueryManagerHandler.prototype.releaseObject = function()
{
	this.m_olapEnv = oFF.XObjectExt.release(this.m_olapEnv);
	this.m_queryManagers = oFF.XObjectExt.release(this.m_queryManagers);
	this.m_listener = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_listener);
	this.m_identifier = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_identifier);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.OlapEnvQueryManagerHandler.prototype.setupQueryManagerHandler = function(olapEnv)
{
	this.m_olapEnv = oFF.XWeakReferenceUtil.getWeakRef(olapEnv);
	this.m_queryManagers = oFF.XWeakMap.create();
	this.m_listener = oFF.XHashMapByString.create();
	this.m_identifier = oFF.XHashMapByString.create();
};

oFF.OlapEnvironmentFactoryImpl = function() {};
oFF.OlapEnvironmentFactoryImpl.prototype = new oFF.OlapEnvironmentFactory();
oFF.OlapEnvironmentFactoryImpl.prototype._ff_c = "OlapEnvironmentFactoryImpl";

oFF.OlapEnvironmentFactoryImpl.staticSetupImpl = function()
{
	let theFactory = new oFF.OlapEnvironmentFactoryImpl();
	oFF.OlapEnvironmentFactory.registerFactory(theFactory);
};
oFF.OlapEnvironmentFactoryImpl.prototype.newOlapEnvironmentInstance = function(application)
{
	return oFF.OlapEnvironment.create(application);
};

oFF.QFactoryImpl = function() {};
oFF.QFactoryImpl.prototype = new oFF.XObject();
oFF.QFactoryImpl.prototype._ff_c = "QFactoryImpl";

oFF.QFactoryImpl.create = function()
{
	return new oFF.QFactoryImpl();
};
oFF.QFactoryImpl.setNameTextAndAliasOnMeasure = function(dimension, name, text, alias, member)
{
	member.setName(name);
	member.setText(text);
	if (oFF.notNull(dimension) && dimension.getPlaceholderIds().size() > 0)
	{
		member.setAliasName(alias);
	}
	return member;
};
oFF.QFactoryImpl.prototype.createNewAggregationLevel = function(name)
{
	let registrationService = oFF.RegistrationService.getInstance();
	let factoryClass = registrationService.getFirstReference(oFF.OlapApiModule.AGGREGATION_LEVEL_FACTORY, null);
	if (oFF.isNull(factoryClass))
	{
		oFF.noSupport();
	}
	let factory = factoryClass.newInstance(this);
	return factory.createIAggregationLevel(name);
};
oFF.QFactoryImpl.prototype.createTupleFilterFromDataSource = function(context)
{
	return oFF.QFilterTupleFromDataSource._create(context, null);
};
oFF.QFactoryImpl.prototype.newAggregationLevelExt = function(context, name)
{
	return this.createNewAggregationLevel(name);
};
oFF.QFactoryImpl.prototype.newAttributeContainer = function(context, dimension)
{
	return oFF.QAttributeContainer.create(context, dimension);
};
oFF.QFactoryImpl.prototype.newBlendableMeasureSort = function(context)
{
	return oFF.BlendableMeasureMemberSort.createBlendableMeasureSort(context);
};
oFF.QFactoryImpl.prototype.newBlendingDefinition = function()
{
	return oFF.BlendingDefinition.create();
};
oFF.QFactoryImpl.prototype.newCacheKey = function(context, systemName, dataSourceHashKey, providerType, key1, key2, validationHash, dimensionGroupNames)
{
	return oFF.QCacheKey.createExt(context, systemName, dataSourceHashKey, providerType, key1, key2, validationHash, dimensionGroupNames);
};
oFF.QFactoryImpl.prototype.newCacheKeyByContext = function(context)
{
	return oFF.QCacheKey.createByContext(context);
};
oFF.QFactoryImpl.prototype.newCacheKeyForField = function(context, fieldName, dimensionName)
{
	return oFF.QCacheKey.createByContextForField(context, fieldName, dimensionName);
};
oFF.QFactoryImpl.prototype.newCacheKeyWithDataSource = function(context, systemName, dataSource, providerType, key1, key2, validationHash, dimensionGroupNames)
{
	let tmpDataSrc = oFF.QDataSource.create();
	tmpDataSrc.setFullQualifiedName(dataSource);
	let dataSourceHashKey = tmpDataSrc.getCacheKeyName();
	let newObj = oFF.QCacheKey.createExt(context, systemName, dataSourceHashKey, providerType, key1, key2, validationHash, dimensionGroupNames);
	let olapEnv = context.getOlapEnv();
	let cubeContainer = olapEnv.getCubeContainer(newObj);
	if (cubeContainer.getDataSource() === null)
	{
		cubeContainer.setDataSource(tmpDataSrc);
	}
	return newObj;
};
oFF.QFactoryImpl.prototype.newCanonicalDate = function(year, member, granularity)
{
	return oFF.QCanonicalDate.create(year, member, null, granularity);
};
oFF.QFactoryImpl.prototype.newCanonicalDateContext = function(queryModel, timeDimension, hierarchyName)
{
	return oFF.QCanonicalDateContext.create(queryModel, timeDimension, hierarchyName);
};
oFF.QFactoryImpl.prototype.newCanonicalDateWithTimestamp = function(year, timestamp, granularity)
{
	return oFF.QCanonicalDate.create(year, 0, timestamp, granularity);
};
oFF.QFactoryImpl.prototype.newCapabilitiesDecorator = function(parent)
{
	return oFF.QCapabilitiesDecorator.create(parent);
};
oFF.QFactoryImpl.prototype.newCellContext = function(context, name)
{
	let parent = null;
	if (oFF.notNull(context) && context.getQueryModel() !== null)
	{
		parent = context.getQueryModel().getCellContextManager();
	}
	return oFF.QCellContext._create(context, name, parent);
};
oFF.QFactoryImpl.prototype.newCellIndexInfo = function()
{
	return oFF.RsCellIndexInfo.create();
};
oFF.QFactoryImpl.prototype.newCellValueOperand = function(context, filterExpression)
{
	return oFF.QFilterCellValueOperand.createWithExpression(context, filterExpression, null);
};
oFF.QFactoryImpl.prototype.newChartStyle = function()
{
	return oFF.QChartStyle.create(null, null);
};
oFF.QFactoryImpl.prototype.newClustering = function(algorithm, spatialClusterContext)
{
	if (algorithm === oFF.ClusterAlgorithm.GRID)
	{
		return oFF.ClusteringGrid.create(spatialClusterContext);
	}
	if (algorithm === oFF.ClusterAlgorithm.DB_SCAN)
	{
		return oFF.ClusteringDbScan.create(spatialClusterContext);
	}
	if (algorithm === oFF.ClusterAlgorithm.K_MEANS)
	{
		return oFF.ClusteringKmeans.create(spatialClusterContext);
	}
	return null;
};
oFF.QFactoryImpl.prototype.newCustomHierarchyDefinition = function(dimension, description)
{
	return oFF.QCustomHierarchyDefinition.create(dimension, description);
};
oFF.QFactoryImpl.prototype.newCustomVariableConfig = function(queryManager)
{
	return oFF.QCustomVariableConfig.createConfig(queryManager);
};
oFF.QFactoryImpl.prototype.newDataSource = function(context)
{
	return oFF.QDataSource.createWithContext(context);
};
oFF.QFactoryImpl.prototype.newDimensionElement = function(selectField, hierarchyName, value)
{
	return oFF.QSelectValue._createDimensionElement2(selectField.getContext(), selectField, hierarchyName, value);
};
oFF.QFactoryImpl.prototype.newDimensionElementWithContext = function(context, selectField, hierarchyName, value)
{
	return oFF.QSelectValue._createDimensionElement2(context, selectField, hierarchyName, value);
};
oFF.QFactoryImpl.prototype.newDimensionElementWithMemberType = function(memberType, selectField, hierarchyName, value)
{
	return oFF.QSelectValue._createDimensionElementWithMemberType(memberType, selectField, hierarchyName, value);
};
oFF.QFactoryImpl.prototype.newDimensionFromType = function(context, originDimension, dimensionManager)
{
	if (oFF.isNull(originDimension))
	{
		return oFF.QDimension._create(context, dimensionManager);
	}
	let name = originDimension.getName();
	let dimensionType = originDimension.getDimensionType();
	let cloneDim;
	if (dimensionType === oFF.DimensionType.CALCULATED_DIMENSION)
	{
		cloneDim = oFF.QCalculatedDimension._createCalculatedDimension(context, dimensionManager, name);
	}
	else if (dimensionType === oFF.DimensionType.FORMULA_CALCULATED_DIMENSION)
	{
		cloneDim = this.newFormulaCalculatedDimension(context, name);
		cloneDim.setParent(dimensionManager);
	}
	else if (dimensionType === oFF.DimensionType.MEASURE_BASED_FILTER_CALCULATED_DIMENSION)
	{
		cloneDim = this.newMeasureBasedFilterCalculatedDimension(context, name);
		cloneDim.setParent(dimensionManager);
	}
	else if (dimensionType === oFF.DimensionType.PARETO_RANK_FILTER_CALCULATED_DIMENSION)
	{
		cloneDim = this.newParetoRankFilterCalculatedDimension(context, name);
		cloneDim.setParent(dimensionManager);
	}
	else if (dimensionType === oFF.DimensionType.FILTER_ACROSS_MODELS_CALCULATED_DIMENSION)
	{
		let otherQueryModelContext = originDimension.getQueryModel().getContext();
		cloneDim = this.newFilterAcrossModelsCalculatedDimension(otherQueryModelContext, name);
		cloneDim.setParent(dimensionManager);
	}
	else
	{
		cloneDim = oFF.QDimension._create(context, dimensionManager);
	}
	return cloneDim;
};
oFF.QFactoryImpl.prototype.newDimensionLinkKey = function(systemName, cubeName, dimensionName, fieldName)
{
	return oFF.QDimensionLinkKey.createLinkKey(systemName, cubeName, dimensionName, fieldName);
};
oFF.QFactoryImpl.prototype.newDimensionLinkKey2 = function(context, systemName, cubeName, dimensionName, fieldName)
{
	return oFF.QDimensionLinkKey.createLinkKeyExt(context, systemName, cubeName, dimensionName, fieldName);
};
oFF.QFactoryImpl.prototype.newDimensionLinkPart = function(context, fieldKey, hierarchyName, queryManagerKey)
{
	return oFF.QDimensionLinkPart.createDimensionLinkPart(context, fieldKey, hierarchyName, queryManagerKey);
};
oFF.QFactoryImpl.prototype.newDimensionMemberFromTupleElement = function(tupleElement)
{
	let newMember;
	let dimension = tupleElement.getDimensionAtCurrentPositionFromQueryModel();
	let rsDimension = tupleElement.getRsDimensionAtCurrentPosition();
	if (oFF.isNull(dimension))
	{
		if (rsDimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE))
		{
			newMember = oFF.QStructureMember.createStructureMember(rsDimension.getContext(), null, oFF.MemberType.MEASURE);
		}
		else
		{
			newMember = oFF.QDimensionMember.createDimensionMember(rsDimension.getContext(), null);
		}
	}
	else
	{
		if (dimension.isMeasureStructure())
		{
			newMember = oFF.QStructureMember.createStructureMember(dimension.getContext(), dimension, oFF.MemberType.MEASURE);
		}
		else
		{
			newMember = oFF.QDimensionMember.createDimensionMember(dimension.getContext(), dimension);
		}
	}
	newMember.setType(tupleElement.getDimensionMemberType());
	newMember.setName(tupleElement.getDimensionMemberName());
	newMember.setDimensionMemberNameValueException(tupleElement.getDimensionMemberNameValueException());
	let fieldValues = tupleElement.getFieldValueList();
	let size = fieldValues.size();
	for (let idxField = 0; idxField < size; idxField++)
	{
		let cursorFieldValue = fieldValues.get(idxField);
		let fieldValue = cursorFieldValue.createFieldValueFromCurrentPosition();
		fieldValue.setDimensionMember(newMember);
		newMember.addFieldValue(fieldValue);
		if (cursorFieldValue.getUdhKey() !== null && fieldValue.getField() !== null && fieldValue.getField().getPresentationType() === oFF.PresentationType.UDH_KEY)
		{
			newMember.setUdhKey(cursorFieldValue.getUdhKey().clone());
		}
	}
	if (oFF.notNull(dimension))
	{
		let textField = rsDimension.isHierarchyActive() ? dimension.getHierarchyTextField() : dimension.getFlatTextField();
		let textFieldValue = newMember.getFieldValue(textField);
		if (oFF.notNull(textFieldValue))
		{
			let formattedValue = textFieldValue.getFormattedValue();
			let dimensionType = dimension.getDimensionType();
			if (dimensionType === oFF.DimensionType.ACCOUNT || dimensionType === oFF.DimensionType.MEASURE_STRUCTURE || dimensionType === oFF.DimensionType.SECONDARY_STRUCTURE)
			{
				let dimensionMember = dimension.getStructureMember(newMember.getName());
				if (oFF.notNull(dimensionMember))
				{
					if (dimensionType === oFF.DimensionType.MEASURE_STRUCTURE && (oFF.XString.isEqual(newMember.getName(), oFF.CurrencyConstants.DEFAULT_CURRENCY) || oFF.XString.isEqual(newMember.getName(), oFF.CurrencyConstants.LOCAL_CURRENCY)))
					{
						formattedValue = dimensionMember.getText();
					}
					let overrideText = dimensionMember.getOverrideText();
					if (oFF.notNull(overrideText))
					{
						newMember.setOverrideText(overrideText);
					}
				}
			}
			newMember.setText(formattedValue);
		}
	}
	return newMember;
};
oFF.QFactoryImpl.prototype.newDimensionSelector = function(dimension)
{
	return oFF.QDimensionSelector.create(dimension);
};
oFF.QFactoryImpl.prototype.newDimensionValueHelpWizard = function(dimension)
{
	return oFF.QValueHelpWizard.createDimensionValueHelpWizard(dimension);
};
oFF.QFactoryImpl.prototype.newDocumentIdManager = function(queryManager)
{
	return oFF.RsDocumentIdManager.create(queryManager);
};
oFF.QFactoryImpl.prototype.newDrillManager = function(context)
{
	let queryModel = null;
	if (oFF.notNull(context))
	{
		queryModel = context.getQueryModel();
	}
	return oFF.QDrillManager.create(context, queryModel);
};
oFF.QFactoryImpl.prototype.newDrillPathElementExt = function(context)
{
	return oFF.QDrillPathElement._create(context);
};
oFF.QFactoryImpl.prototype.newExceptionAggregationMeasure = function(context, dimension, name, text, alias)
{
	let member = oFF.QExceptionAggregationMeasure._createExceptionAggregationMeasure(context, dimension);
	return oFF.QFactoryImpl.setNameTextAndAliasOnMeasure(dimension, name, text, alias, member);
};
oFF.QFactoryImpl.prototype.newField = function(context, fieldName)
{
	let field = oFF.QField._createField(context, null, null);
	field.setName(fieldName);
	return field;
};
oFF.QFactoryImpl.prototype.newFieldContainer = function(context, dimension)
{
	return oFF.QFieldContainer.create(context, dimension);
};
oFF.QFactoryImpl.prototype.newFieldFromType = function(context, dimension, presentationType, name)
{
	let dimensionType = dimension.getDimensionType();
	if (dimensionType === oFF.DimensionType.CALCULATED_DIMENSION)
	{
		return oFF.QFieldCalcDim._createFieldCalcDim(context, dimension, presentationType, name);
	}
	else if (dimensionType.isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION))
	{
		return oFF.QFieldFormulaCalc._createFormulaCalcField(context, dimension, presentationType, name);
	}
	return oFF.QField._createField(context, dimension, presentationType);
};
oFF.QFactoryImpl.prototype.newFieldValue = function(field, valueException, value, formattedValue)
{
	let fieldValue = oFF.QFieldValue.create(field.getContext(), field, null);
	fieldValue.setValueException(valueException);
	fieldValue.setValue(value);
	fieldValue.setFormattedValue(formattedValue);
	return fieldValue;
};
oFF.QFactoryImpl.prototype.newFieldValueEmpty = function(field, valueException, formattedValue)
{
	let fieldValue = oFF.QFieldValue.create(field.getContext(), field, null);
	fieldValue.setValueException(valueException);
	fieldValue.setFormattedValue(formattedValue);
	return fieldValue;
};
oFF.QFactoryImpl.prototype.newFilterAcrossModels = function(context, name)
{
	return oFF.QFilterAcrossModels.createFilterAcrossModels(context, name);
};
oFF.QFactoryImpl.prototype.newFilterAcrossModelsCalculatedDimension = function(context, name)
{
	return oFF.QFilterAcrossModelsCalculatedDimension.createFilterAcrossModelsCalculatedDimension(context, name);
};
oFF.QFactoryImpl.prototype.newFilterAnd = function(context, filterExpression)
{
	return oFF.QFilterAnd._create(context, filterExpression);
};
oFF.QFactoryImpl.prototype.newFilterAndWithoutContext = function(fieldName, values, hierarchyName, convertToFlatSelection)
{
	return oFF.QFilterAnd._createWithParams(fieldName, values, hierarchyName, convertToFlatSelection);
};
oFF.QFactoryImpl.prototype.newFilterAsymmetricVisibility = function(context, name, selectionContainer)
{
	return oFF.QFilterAsymmetricVisibility.createFilterAsymmetricVisibility(context, name, selectionContainer);
};
oFF.QFactoryImpl.prototype.newFilterCapabilitiesForVariable = function(context, variable)
{
	return oFF.QFilterCapabilityList.createFilterCapabilitiesForVariable(context, variable);
};
oFF.QFactoryImpl.prototype.newFilterCapability = function(context, parent, field, olapComponentType)
{
	if (olapComponentType === oFF.OlapComponentType.FILTER_CAPABILITY)
	{
		return oFF.QFilterCapability._createFilterCapability(context, parent, field);
	}
	return oFF.QFilterCapabilityGroup._createFilterCapabilityGroup(context, parent, field);
};
oFF.QFactoryImpl.prototype.newFilterCartesianElement = function(context)
{
	return oFF.QFilterOperation._create(context, null, null);
};
oFF.QFactoryImpl.prototype.newFilterCartesianList = function(context, filterExpression)
{
	return oFF.QFilterCartesianList._createMd(context, filterExpression, null, null);
};
oFF.QFactoryImpl.prototype.newFilterCartesianListForDimensionMemberVariable = function(context, dimensionMemberVariable, fieldMd, hierarchyName)
{
	return oFF.QFilterCartesianList._createMd(context, dimensionMemberVariable, fieldMd, hierarchyName);
};
oFF.QFactoryImpl.prototype.newFilterCartesianListWithoutContext = function(fieldName, values, hierarchyName, convertToFlatSelection, isExcluding)
{
	let iqFilterCartesianProductBase = oFF.QFilterCartesianProduct._createWithoutContext();
	return oFF.QFilterCartesianList._createWithParams(iqFilterCartesianProductBase, fieldName, values, hierarchyName, convertToFlatSelection, isExcluding);
};
oFF.QFactoryImpl.prototype.newFilterCartesianProduct = function(context, filterExpression)
{
	return oFF.QFilterCartesianProduct._create(context, filterExpression);
};
oFF.QFactoryImpl.prototype.newFilterConvertedTimeCartesianList = function(context, filterExpression)
{
	return oFF.QFilterConvertedTimeCartesianList._create(context, filterExpression, null, null);
};
oFF.QFactoryImpl.prototype.newFilterDynamicTimeRegularRange = function(context, name)
{
	return oFF.QFilterDynamicTimeRegularRange.createFilterDynamicTimeRegularRange(context, name);
};
oFF.QFactoryImpl.prototype.newFilterDynamicTimeToDateRange = function(context, name)
{
	return oFF.QFilterDynamicTimeToDateRange.createFilterDynamicTimeToDateRange(context, name);
};
oFF.QFactoryImpl.prototype.newFilterExpression = function(context, parentNode)
{
	return oFF.QFilterExpression.create(context, parentNode);
};
oFF.QFactoryImpl.prototype.newFilterFixedTimeRange = function(context, name)
{
	return oFF.QFilterFixedTimeRange.createFilterFixedTimeRange(context, name);
};
oFF.QFactoryImpl.prototype.newFilterForQueryModel = function(queryModel)
{
	return oFF.QFilter.createWithModelComponent(queryModel, queryModel);
};
oFF.QFactoryImpl.prototype.newFilterMeasureBased = function(context, name)
{
	return oFF.QFilterMeasureBased.createFilterMeasureBased(context, name);
};
oFF.QFactoryImpl.prototype.newFilterNot = function(context, filterExpression)
{
	return oFF.QFilterNot._create(context, filterExpression);
};
oFF.QFactoryImpl.prototype.newFilterOperation = function(context, filterExpression)
{
	return oFF.QFilterOperation._create(context, filterExpression, null);
};
oFF.QFactoryImpl.prototype.newFilterOperationDateRange = function(context, filterExpression)
{
	return oFF.QFilterDateRange.create(context, filterExpression);
};
oFF.QFactoryImpl.prototype.newFilterOr = function(context, filterExpression)
{
	return oFF.QFilterOr._create(context, filterExpression);
};
oFF.QFactoryImpl.prototype.newFilterTupleExt = function(context)
{
	return oFF.QFilterTuple._create(context, null);
};
oFF.QFactoryImpl.prototype.newFilterValueBag = function(context, filterExpression, parentNode)
{
	return oFF.QFilterValueBag._create(context, filterExpression, parentNode);
};
oFF.QFactoryImpl.prototype.newFilterVirtualDatasource = function(context)
{
	return oFF.QFilterVirtualDatasource._create(context, null);
};
oFF.QFactoryImpl.prototype.newFormulaAttributeExt = function(context)
{
	return oFF.QFormulaItemAttribute._createMember(context, null);
};
oFF.QFactoryImpl.prototype.newFormulaCalculatedDimension = function(context, name)
{
	return oFF.QFormulaCalculatedDimension._createFormulaCalculatedDimension(context, name);
};
oFF.QFactoryImpl.prototype.newFormulaConstant = function(context)
{
	return oFF.QFormulaItemConstant._createConstant(context, null);
};
oFF.QFactoryImpl.prototype.newFormulaException = function(context, name, text)
{
	let queryModel = null;
	if (oFF.notNull(context))
	{
		queryModel = context.getQueryModel();
	}
	return oFF.QFormulaException.createFormulaException(context, queryModel, name, text);
};
oFF.QFactoryImpl.prototype.newFormulaFunction = function(context)
{
	return oFF.QFormulaItemFunction._createFunction(context, null);
};
oFF.QFactoryImpl.prototype.newFormulaInverseFormula = function(context)
{
	return oFF.QFormulaInverseFormula.createInverseFormula(context, null, null, null, null);
};
oFF.QFactoryImpl.prototype.newFormulaIteration = function(context)
{
	return oFF.QFormulaIteration._createFormulaIteration(context, null);
};
oFF.QFactoryImpl.prototype.newFormulaIterationDimension = function(context)
{
	return oFF.QFormulaIterationDimension._createFormulaIterationDimension(context, null);
};
oFF.QFactoryImpl.prototype.newFormulaMeasure = function(context, dimension, name, text, alias)
{
	let member = oFF.QFormulaMeasure._createFormulaMeasure(context, dimension);
	return oFF.QFactoryImpl.setNameTextAndAliasOnMeasure(dimension, name, text, alias, member);
};
oFF.QFactoryImpl.prototype.newFormulaMember = function(context)
{
	return oFF.QFormulaItemMember._createMember(context, null);
};
oFF.QFactoryImpl.prototype.newFormulaOperationExt = function(context)
{
	return oFF.QFormulaItemOperation._createOperation(context, null);
};
oFF.QFactoryImpl.prototype.newFunctionalVariableValue = function(variable)
{
	return oFF.QFunctionalVariableValue.createFunctionalVariableValue(variable);
};
oFF.QFactoryImpl.prototype.newHierarchyCatalogManager = function(queryManager, dataSource, dimensionName, dimensionQueryModel)
{
	return oFF.HierarchyCatalogManager.create(queryManager, dataSource, dimensionName, dimensionQueryModel);
};
oFF.QFactoryImpl.prototype.newHierarchyCatalogResult = function()
{
	return oFF.HierarchyCatalogResult.create();
};
oFF.QFactoryImpl.prototype.newHierarchyManager = function(context, parent)
{
	return oFF.QHierarchyManager.create(context, parent);
};
oFF.QFactoryImpl.prototype.newKeyRef = function(storageName, groupName, objectName)
{
	return oFF.QKeyRef.create(storageName, groupName, objectName);
};
oFF.QFactoryImpl.prototype.newKeyRefStorage = function(context, name)
{
	return oFF.QKeyRefStorage.create(name);
};
oFF.QFactoryImpl.prototype.newKeyRefStoreContext = function(context, storageName)
{
	return oFF.QKeyRefStoreContext.create(context, storageName, null);
};
oFF.QFactoryImpl.prototype.newKeyRefStoreContextWithCapabilities = function(context, storageName, capabilities)
{
	return oFF.QKeyRefStoreContext.create(context, storageName, capabilities);
};
oFF.QFactoryImpl.prototype.newLovProcess = function(queryManager, lovProcessConfig)
{
	return oFF.LovProcess.create(queryManager, lovProcessConfig);
};
oFF.QFactoryImpl.prototype.newMeasureBasedFilterCalculatedDimension = function(context, name)
{
	return oFF.QMeasureBasedFilterCalculatedDimension._createMeasureBasedFilterCalculatedDimension(context, name);
};
oFF.QFactoryImpl.prototype.newMeasureHelpMetadataSelector = function()
{
	return oFF.QMeasureHelpMetadataSelector.createMeasureHelpMetadataSelector();
};
oFF.QFactoryImpl.prototype.newMeasureHelpNode = function(name, measure, drillState)
{
	return oFF.QMeasureHelpNode.createMeasureHelpNode(name, measure, drillState);
};
oFF.QFactoryImpl.prototype.newMemberNavigation = function(memberFunction)
{
	let memberNavigation = new oFF.QMemberNavigation();
	memberNavigation.setMemberFunction(memberFunction);
	return memberNavigation;
};
oFF.QFactoryImpl.prototype.newModellingCurrencyTranslationManager = function(cttdFieldName, rateTypeFieldName, rateVersionFieldName, categoryFieldName)
{
	return oFF.QCurrencyTranslationManager.createForModelling(cttdFieldName, rateTypeFieldName, rateVersionFieldName, categoryFieldName);
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithErrorAboveLevel = function(levelValue)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setErrorAboveLevel(levelValue);
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithIntegerConstant = function(constantValue)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setConstantValue(oFF.XIntegerValue.create(constantValue));
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithLevelLiteral = function(levelValue)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setLevelValue(oFF.XStringValue.create(levelValue));
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithLevelNumber = function(levelValue)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setLevelValue(oFF.XIntegerValue.create(levelValue));
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithMemberName = function(fqnName)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setMemberValue(fqnName);
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithNoValuesAboveLevel = function(levelValue)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setNoValuesAboveLevel(levelValue);
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithRange = function(levelValue, offsetLow, offsetHigh)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setRange(oFF.XStringValue.create(levelValue), offsetLow, offsetHigh);
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithShift = function(levelValue, constantValue)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setShift(oFF.XStringValue.create(levelValue), oFF.XIntegerValue.create(constantValue));
	return parameter;
};
oFF.QFactoryImpl.prototype.newNavigationParameterWithStringConstant = function(constantValue)
{
	let parameter = oFF.QMemberNavigationParameter.create();
	parameter.setConstantValue(oFF.XStringValue.create(constantValue));
	return parameter;
};
oFF.QFactoryImpl.prototype.newParetoMeasure = function(context, dimension, name, text, alias)
{
	let member = oFF.QParetoMeasure._createParetoMeasure(context, dimension);
	return oFF.QFactoryImpl.setNameTextAndAliasOnMeasure(dimension, name, text, alias, member);
};
oFF.QFactoryImpl.prototype.newParetoRankFilterCalculatedDimension = function(context, name)
{
	return oFF.QParetoRankFilterCalculatedDimension.createParetoRankFilterCalculatedDimension(context, name);
};
oFF.QFactoryImpl.prototype.newPersistedPlaceholderTagCalculation = function(name, selectionPlaceholder, canonicalDateContext)
{
	return oFF.QPersistedPlaceholderTagSelection.create(name, selectionPlaceholder, canonicalDateContext);
};
oFF.QFactoryImpl.prototype.newPersistedPlaceholderTagCalculationFromPlaceholderString = function(persistedPlaceholderStringTag)
{
	return oFF.QPersistedPlaceholderTagSelection.createFromPlaceholderString(persistedPlaceholderStringTag);
};
oFF.QFactoryImpl.prototype.newPersistedPlaceholderTagFilter = function(name, filterId, qmFilterModel, canonicalDateContext)
{
	return oFF.QPersistedPlaceholderTagFilter.create(name, filterId, qmFilterModel, canonicalDateContext);
};
oFF.QFactoryImpl.prototype.newPersistedPlaceholderTagFilterFromPlaceholderString = function(persistedPlaceholderFilterStringTag)
{
	return oFF.QPersistedPlaceholderTagFilter.createFromPlaceholderString(persistedPlaceholderFilterStringTag);
};
oFF.QFactoryImpl.prototype.newPersistedPlaceholderTagSelection = function(name, selectionPlaceholder, canonicalDateContext)
{
	return oFF.QPersistedPlaceholderTagSelection.create(name, selectionPlaceholder, canonicalDateContext);
};
oFF.QFactoryImpl.prototype.newPersistedPlaceholderTagSelectionFromPlaceholderString = function(persistedPlaceholderStringTag)
{
	return oFF.QPersistedPlaceholderTagSelection.createFromPlaceholderString(persistedPlaceholderStringTag);
};
oFF.QFactoryImpl.prototype.newQueryServiceConfig = function(application)
{
	return oFF.QueryServiceConfigImpl._create(application);
};
oFF.QFactoryImpl.prototype.newRankInfo = function(maxRows, complexSortForRank, conditionForRank)
{
	return oFF.QRankInfo.create(maxRows, complexSortForRank, conditionForRank);
};
oFF.QFactoryImpl.prototype.newRankSettings = function()
{
	return oFF.QRankSettings.create();
};
oFF.QFactoryImpl.prototype.newReadModeManager = function(dimension)
{
	return oFF.QDimensionReadModeManager._create(dimension);
};
oFF.QFactoryImpl.prototype.newReflectionCommand = function(methodName, primitiveReturnType, signature, signatureList)
{
	return oFF.QGenericCmd.createGenericCmd(methodName, primitiveReturnType, signature, signatureList);
};
oFF.QFactoryImpl.prototype.newRequestSettings = function(offset, windowSize, isHierarchyShot)
{
	return oFF.QRequestSettings.create(offset, windowSize, isHierarchyShot);
};
oFF.QFactoryImpl.prototype.newRestrictedMeasure = function(context, dimension, name, text, alias)
{
	let member = oFF.QRestrictedMeasure._createRestrictedMeasure(context, dimension);
	return oFF.QFactoryImpl.setNameTextAndAliasOnMeasure(dimension, name, text, alias, member);
};
oFF.QFactoryImpl.prototype.newResultStructureController = function(context, parentNode, location)
{
	return oFF.QResultStructureController._create(context, parentNode, location);
};
oFF.QFactoryImpl.prototype.newRsDefStructureMemberProperties = function(placeholderAliasMappings, minimumDrillStateMap, unsatisfiedRequiredDimensionNames, availableFormulaExceptionIds, outOfContextMembers)
{
	return oFF.RsDefStructureMemberProperties.create(placeholderAliasMappings, minimumDrillStateMap, unsatisfiedRequiredDimensionNames, availableFormulaExceptionIds, outOfContextMembers);
};
oFF.QFactoryImpl.prototype.newRunningTotalMeasure = function(context, dimension, name, text, alias)
{
	let member = oFF.QRunningTotalMeasure._createRunningTotalMeasure(context, dimension);
	return oFF.QFactoryImpl.setNameTextAndAliasOnMeasure(dimension, name, text, alias, member);
};
oFF.QFactoryImpl.prototype.newRuntimeQuery = function(batch, queryManager)
{
	return oFF.RuntimeQuery.create(batch, queryManager);
};
oFF.QFactoryImpl.prototype.newTableDefinition = function()
{
	return oFF.QTableDefinition.create(null, null, null, oFF.ProtocolBindingType.SAC_TABLE_GRID, oFF.SemanticBindingType.TABLE);
};
oFF.QFactoryImpl.prototype.newTimeConvertedFAMSelectionPlaceholder = function(queryModel, timeDimension, filterOp, qmFilterModel, sourceDatasetId, sourceTimeDimensionName, sourceHierarchyName)
{
	return oFF.QTimeConvertedFAMSelectionPlaceholder.createTimeConvertedFAMSelectionPlaceholder(queryModel, timeDimension, filterOp, qmFilterModel, sourceDatasetId, sourceTimeDimensionName, sourceHierarchyName);
};
oFF.QFactoryImpl.prototype.newTimeConvertedFAMSelectionPlaceholderFromPlaceholderString = function(selectionPlaceholderString)
{
	return oFF.QTimeConvertedFAMSelectionPlaceholder.createTimeConvertedFAMSelectionPlaceholderFromPlaceholderString(selectionPlaceholderString);
};
oFF.QFactoryImpl.prototype.newTimeOperation = function(context, parent, timeDimensionName, timeOperationFunction, timeOperationGranularity, period)
{
	let timeOperation = oFF.QTimeOperation.create(context, parent);
	timeOperation.setDimensionName(timeDimensionName);
	timeOperation.setFunction(timeOperationFunction);
	timeOperation.setGranularity(timeOperationGranularity);
	timeOperation.setPeriod(period);
	return timeOperation;
};
oFF.QFactoryImpl.prototype.newTimeSelectionPlaceholderFromPlaceholderString = function(selectionPlaceholderString)
{
	return oFF.QTimeSelectionPlaceholder.createTimeSelectionPlaceholderFromPlaceholderString(selectionPlaceholderString);
};
oFF.QFactoryImpl.prototype.newTimeSelectionPlaceholderToDateFromPlaceholderString = function(selectionPlaceholderString)
{
	return oFF.QTimeSelectionPlaceholderToDate.createTimeSelectionPlaceholderToDateFromPlaceholderString(selectionPlaceholderString);
};
oFF.QFactoryImpl.prototype.newUniversalDisplayHierarchies = function(context)
{
	if (oFF.notNull(context))
	{
		let queryModel = context.getQueryModel();
		if (queryModel.getModelCapabilities().supportsUniversalDisplayHierarchies())
		{
			return oFF.QUniversalDisplayHierarchies.create(context, queryModel);
		}
	}
	return null;
};
oFF.QFactoryImpl.prototype.newValueHelpListenerDecorator = function(originalListener)
{
	return oFF.ValueHelpListenerDecorator.create(originalListener);
};
oFF.QFactoryImpl.prototype.newValueHelpNode = function(valueHelp, parentNode, member, displayLevel, absoluteLevel)
{
	return oFF.QValueHelpNode.create(valueHelp, parentNode, member, displayLevel, absoluteLevel);
};
oFF.QFactoryImpl.prototype.newValueHelpVarDimMember = function(context, dimensionMemberVariable)
{
	return oFF.QValueHelpVarDimMember.create(context, dimensionMemberVariable);
};
oFF.QFactoryImpl.prototype.newVariable = function(context, parent, originVariable)
{
	let originType = originVariable.getVariableType();
	let parentBase = parent;
	let name = originVariable.getName();
	let text = originVariable.getText();
	if (originType === oFF.VariableType.DIMENSION_MEMBER_VARIABLE)
	{
		return oFF.QDimensionMemberVariable.createDimensionMemberVariable(context, parentBase, name, text);
	}
	else if (originType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
	{
		return oFF.QHierarchyNameVariable.createDimensionHierarchyVariable(context, parentBase, name, text);
	}
	else if (originType === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
	{
		return oFF.QHierarchyNodeVariable.createHierarchyNodeVariable(context, parentBase, name, text);
	}
	else if (originType === oFF.VariableType.SIMPLE_TYPE_VARIABLE)
	{
		return oFF.QSimpleTypeVariable.createSimpleTypeVariable(context, parentBase, originVariable.getValueType(), name, text, originVariable.supportsMultipleValues());
	}
	else if (originType === oFF.VariableType.TEXT_VARIABLE)
	{
		return oFF.QSimpleTypeVariable.createTextVariable(context, parentBase, name, text, originVariable.supportsMultipleValues());
	}
	else if (originType === oFF.VariableType.FORMULA_VARIABLE)
	{
		return oFF.QSimpleTypeVariable.createFormulaVariable(context, parentBase, name, text, originVariable.supportsMultipleValues());
	}
	else if (originType === oFF.VariableType.OPTION_LIST_VARIABLE)
	{
		return oFF.QSimpleTypeVariable.createOptionListVariable(context, parentBase, name, text, originVariable.supportsMultipleValues());
	}
	else if (originType === oFF.VariableType.HIERARCHY_VARIABLE)
	{
		return oFF.QSimpleTypeVariable.createHierarchyVariable(context, parentBase, name, text, originVariable.supportsMultipleValues());
	}
	else if (originType === oFF.VariableType.FUNCTIONAL_VARIABLE)
	{
		return oFF.QFunctionalVariable.createFunctionalVariable(context, parentBase, name, text);
	}
	else
	{
		throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate3("Unexpected variable type '", originType.getName(), "'!"));
	}
};
oFF.QFactoryImpl.prototype.newVariableValue = function(variable)
{
	return oFF.QVariableValue.create(variable);
};
oFF.QFactoryImpl.prototype.newVariableValueHelpWizard = function(variable)
{
	return oFF.QValueHelpWizard.createVariableValueHelpWizard(variable);
};
oFF.QFactoryImpl.prototype.newVariableVariant = function(dataSource, name, text, scope)
{
	return oFF.QVariableVariant.createVariantWithScope(dataSource, name, text, scope);
};
oFF.QFactoryImpl.prototype.newVarianceMeasure = function(context, dimension, name, text, alias)
{
	let member = oFF.QVarianceMeasure._createVarianceMeasure(context, dimension);
	return oFF.QFactoryImpl.setNameTextAndAliasOnMeasure(dimension, name, text, alias, member);
};
oFF.QFactoryImpl.prototype.newVizDef = function(context)
{
	return oFF.QVizDef.create(context);
};
oFF.QFactoryImpl.prototype.newWindowFunction = function(type)
{
	return oFF.QWindowFunction._createWindowFunction(type);
};
oFF.QFactoryImpl.prototype.newXVariable = function(variableType, fieldName, variableName, values)
{
	let newVariable;
	if (variableType.isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		newVariable = oFF.QDimensionMemberVariable.createDimensionMemberVariable(null, null, variableName, variableName);
	}
	else if (variableType.isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		let valueType = oFF.XCollectionUtils.hasElements(values) ? values.get(0).getValueType() : oFF.XValueType.STRING;
		newVariable = oFF.QSimpleTypeVariable.createSimpleTypeVariable(null, null, valueType, variableName, variableName, true);
	}
	else
	{
		throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate3("Unexpected variable type '", variableType.getName(), "'!"));
	}
	if (newVariable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
	{
		let simpleVar = newVariable;
		simpleVar.setValues(values);
	}
	else if (newVariable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
	{
		let dimVar = newVariable;
		let memberFilter = oFF.QFactory.createFilterCartesianListForDimensionMemberVariable(null, null, null, null);
		dimVar.setMemberFilter(memberFilter);
		oFF.XObjectExt.assertFalse(oFF.XStringUtils.isNullOrEmpty(fieldName));
		memberFilter.setFieldName(fieldName);
		oFF.XStream.of(values).forEach((value) => {
			let addNewCartesianElement = memberFilter.addNewCartesianElement();
			addNewCartesianElement.getLow().setValue(value);
			addNewCartesianElement.setFieldName(fieldName);
		});
	}
	return newVariable;
};

oFF.RuntimeQuery = function() {};
oFF.RuntimeQuery.prototype = new oFF.XObject();
oFF.RuntimeQuery.prototype._ff_c = "RuntimeQuery";

oFF.RuntimeQuery._getLanguage = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	return queryManager.getSystemDescription().getLanguage();
};
oFF.RuntimeQuery._getSystemName = function(queryManager, inaMainQuery)
{
	let systemName = oFF.InARuntimeUtils.getSystemNameFromRequest(inaMainQuery);
	if (oFF.isNull(systemName) && oFF.notNull(queryManager))
	{
		systemName = queryManager.getSystemName();
	}
	return systemName;
};
oFF.RuntimeQuery.create = function(batch, queryManager)
{
	let session = null;
	if (oFF.notNull(queryManager))
	{
		session = queryManager.getSession();
	}
	return oFF.RuntimeQuery.createExt(batch, queryManager, session);
};
oFF.RuntimeQuery.createExt = function(batch, queryManager, session)
{
	let mainQuery = null;
	if (oFF.notNull(batch) && batch.hasElements())
	{
		let inaMainQuery = batch.getStructureAt(batch.size() - 1);
		mainQuery = oFF.RuntimeQuery.createQuery(session, oFF.RuntimeQuery._getSystemName(queryManager, inaMainQuery), null, inaMainQuery, oFF.RuntimeQuery._getLanguage(queryManager));
		mainQuery.setupPreQueries(session, batch, queryManager, inaMainQuery);
	}
	return mainQuery;
};
oFF.RuntimeQuery.createQuery = function(session, systemName, mainQuery, inaRequest, language)
{
	let runtimeQuery = new oFF.RuntimeQuery();
	runtimeQuery.m_preQueries = oFF.XList.create();
	runtimeQuery.m_mainQuery = mainQuery;
	oFF.InARuntimeUtils.setLanguage(inaRequest, language);
	runtimeQuery.m_queryforLocal = inaRequest;
	runtimeQuery.m_systemName = systemName;
	runtimeQuery.m_session = session;
	return runtimeQuery;
};
oFF.RuntimeQuery.prototype.m_isProcessed = false;
oFF.RuntimeQuery.prototype.m_mainQuery = null;
oFF.RuntimeQuery.prototype.m_persistencyIdentifier = null;
oFF.RuntimeQuery.prototype.m_preQueries = null;
oFF.RuntimeQuery.prototype.m_queryForRemote = null;
oFF.RuntimeQuery.prototype.m_queryforLocal = null;
oFF.RuntimeQuery.prototype.m_session = null;
oFF.RuntimeQuery.prototype.m_systemName = null;
oFF.RuntimeQuery.prototype.m_validMapping = false;
oFF.RuntimeQuery.prototype.generateBrowserBased = function(messageManager)
{
	messageManager.addInfo(oFF.ErrorCodes.OTHER_ERROR, oFF.XStringUtils.concatenate5("No valid system mapping is defined for '", this.m_systemName, "' and '", this.m_mainQuery.getSystemName(), "'. Defaulting to browser-based blending"));
	let inaDataSource = oFF.InARuntimeUtils.getDataSourceFromRequest(this.m_queryforLocal);
	inaDataSource.remove("System");
	this.m_queryForRemote = oFF.PrUtils.createDeepCopy(this.m_queryforLocal);
	let inaRemoteContext = oFF.InARuntimeUtils.getRequestContext(this.m_queryForRemote);
	oFF.InARuntimeUtils.setPersistencyForRemote(inaRemoteContext, null);
	let request = oFF.InARuntimeUtils.getHashableRequest(inaRemoteContext);
	this.m_persistencyIdentifier = oFF.XSha1.createSHA1(request);
	inaDataSource.putString("Type", "SerializedData");
};
oFF.RuntimeQuery.prototype.generateRemoteQuery = function(queryManager)
{
	let messageManager = oFF.MessageManagerSimple.createMessageManager();
	if (!this.isRemotePreQuery())
	{
		messageManager.addInfo(oFF.ErrorCodes.OTHER_ERROR, "Query is local, nothing to do");
		return oFF.ExtResult.create(null, messageManager);
	}
	let systemLandscape = queryManager.getApplication().getSystemLandscape();
	let remoteSystemDescription = systemLandscape.getSystemDescription(this.m_systemName);
	if (oFF.isNull(remoteSystemDescription))
	{
		messageManager.addError(oFF.ErrorCodes.INVALID_SYSTEM, oFF.XStringUtils.concatenate3("No matching system for name '", this.m_systemName, "' is available"));
		return oFF.ExtResult.create(null, messageManager);
	}
	let mainSystemDescription = systemLandscape.getSystemDescription(this.m_mainQuery.getSystemName());
	let systemMapping = mainSystemDescription.getSystemMapping(this.m_systemName);
	if (oFF.isNull(systemMapping) || !mainSystemDescription.isSystemMappingValid(remoteSystemDescription))
	{
		this.generateBrowserBased(messageManager);
	}
	else
	{
		this.generateSdi(mainSystemDescription, systemMapping);
	}
	this.m_isProcessed = true;
	return oFF.ExtResult.create(this.m_queryForRemote, messageManager);
};
oFF.RuntimeQuery.prototype.generateSdi = function(mainSystemDescription, systemMapping)
{
	this.m_validMapping = true;
	let inaDataSource = oFF.InARuntimeUtils.getDataSourceFromRequest(this.m_queryforLocal);
	inaDataSource.remove("System");
	this.m_queryForRemote = oFF.PrUtils.createDeepCopy(this.m_queryforLocal);
	let inaRemoteContext = oFF.InARuntimeUtils.getRequestContext(this.m_queryForRemote);
	oFF.InARuntimeUtils.setPersistencyForRemote(inaRemoteContext, systemMapping);
	let request = oFF.InARuntimeUtils.getHashableRequest(inaRemoteContext);
	this.m_persistencyIdentifier = oFF.BlendingSource.createPersistenceIdentifierByRequest(this.m_session, request, mainSystemDescription, null);
	oFF.InARuntimeUtils.setPersistencyIdentifier(inaRemoteContext, this.m_persistencyIdentifier);
	oFF.InARuntimeUtils.setPersistencyForLocal(inaDataSource, this.m_persistencyIdentifier, systemMapping);
};
oFF.RuntimeQuery.prototype.getMainQuery = function()
{
	return this.m_mainQuery;
};
oFF.RuntimeQuery.prototype.getPersistencyIdentifier = function()
{
	return this.m_persistencyIdentifier;
};
oFF.RuntimeQuery.prototype.getPreQueries = function()
{
	return this.m_preQueries;
};
oFF.RuntimeQuery.prototype.getPreQueryRequest = function(batch, preQueryName)
{
	let size = batch.size() - 1;
	for (let i = 0; i < size; i++)
	{
		let query = batch.getStructureAt(i);
		let context = oFF.InARuntimeUtils.getRequestContext(query);
		let queryNameFromContext = oFF.InARuntimeUtils.getQueryNameFromContext(context);
		if (oFF.XString.isEqual(queryNameFromContext, preQueryName))
		{
			return query;
		}
	}
	return null;
};
oFF.RuntimeQuery.prototype.getQueryForLocal = function()
{
	return this.m_queryforLocal;
};
oFF.RuntimeQuery.prototype.getSystemName = function()
{
	return this.m_systemName;
};
oFF.RuntimeQuery.prototype.isProcessed = function()
{
	return this.m_isProcessed;
};
oFF.RuntimeQuery.prototype.isRemotePreQuery = function()
{
	if (oFF.isNull(this.m_mainQuery))
	{
		return false;
	}
	return !oFF.XString.isEqual(this.m_systemName, this.m_mainQuery.getSystemName());
};
oFF.RuntimeQuery.prototype.isSdiRemote = function()
{
	return this.isRemotePreQuery() && this.m_validMapping;
};
oFF.RuntimeQuery.prototype.releaseObject = function()
{
	this.m_systemName = null;
	this.m_persistencyIdentifier = null;
	oFF.XObjectExt.release(this.m_preQueries);
	this.m_queryforLocal = null;
	this.m_queryForRemote = null;
	this.m_mainQuery = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RuntimeQuery.prototype.setBrowserBasedPersistency = function(cube, view)
{
	let dataSource = oFF.InARuntimeUtils.getDataSourceFromRequest(this.m_queryforLocal);
	if (oFF.notNull(dataSource))
	{
		dataSource.remove("SchemaName");
		dataSource.remove("PackageName");
		dataSource.remove("ObjectName");
		let serializedData = dataSource.putNewStructure("SerializedData");
		serializedData.putString("Cube", cube);
		serializedData.putString("View", view);
	}
};
oFF.RuntimeQuery.prototype.setupPreQueries = function(session, batch, queryManager, request)
{
	let dataSource = oFF.InARuntimeUtils.getDataSourceFromRequest(request);
	if (oFF.notNull(dataSource))
	{
		let blendingSources = dataSource.getListByKey("Sources");
		if (oFF.notNull(blendingSources))
		{
			let sizeSources = blendingSources.size();
			for (let idxSource = 0; idxSource < sizeSources; idxSource++)
			{
				let blendingSource = blendingSources.getStructureAt(idxSource);
				let blendingContext = blendingSource.getStructureByKey("DefiningContext");
				this.setupPreQueries(session, batch, queryManager, blendingContext);
			}
		}
		let inaDimensions = oFF.InARuntimeUtils.getDimensionsListFromRequest(request);
		let sizeDimensions = inaDimensions.size();
		let preQueryNames = oFF.XHashSetOfString.create();
		for (let idxDimension = 0; idxDimension < sizeDimensions; idxDimension++)
		{
			let inaDimension = inaDimensions.getStructureAt(idxDimension);
			let preQueryName = oFF.InARuntimeUtils.getObjectNameFromDimensionDataSource(inaDimension);
			if (oFF.isNull(preQueryName) || preQueryNames.contains(preQueryName))
			{
				continue;
			}
			preQueryNames.add(preQueryName);
			let preQueryRequest = this.getPreQueryRequest(batch, preQueryName);
			if (oFF.isNull(preQueryRequest))
			{
				continue;
			}
			let preQuery = oFF.RuntimeQuery.createQuery(session, oFF.RuntimeQuery._getSystemName(queryManager, preQueryRequest), this, preQueryRequest, oFF.RuntimeQuery._getLanguage(queryManager));
			preQuery.setupPreQueries(session, batch, queryManager, preQueryRequest);
			this.m_preQueries.add(preQuery);
		}
	}
};

oFF.ModelDimensionLinksManagerHelper = function() {};
oFF.ModelDimensionLinksManagerHelper.prototype = new oFF.XObjectExt();
oFF.ModelDimensionLinksManagerHelper.prototype._ff_c = "ModelDimensionLinksManagerHelper";

oFF.ModelDimensionLinksManagerHelper.findModelDimensionLinksByDatasetIds = function(firstDatasetId, secondDatasetId, modelDimensionLinksList)
{
	let matchingDimensionlinks = null;
	if (oFF.notNull(modelDimensionLinksList))
	{
		let modelDimensionLinksListIter = modelDimensionLinksList.getIterator();
		while (modelDimensionLinksListIter.hasNext())
		{
			let modelDimensionLinks = modelDimensionLinksListIter.next();
			if (oFF.XString.isEqual(firstDatasetId, modelDimensionLinks.getFirstDatasetId()) && oFF.XString.isEqual(secondDatasetId, modelDimensionLinks.getSecondDatasetId()) || oFF.XString.isEqual(secondDatasetId, modelDimensionLinks.getFirstDatasetId()) && oFF.XString.isEqual(firstDatasetId, modelDimensionLinks.getSecondDatasetId()))
			{
				matchingDimensionlinks = modelDimensionLinks;
				break;
			}
		}
	}
	return matchingDimensionlinks;
};

oFF.QFilterAcrossModelsLovCacheManager = function() {};
oFF.QFilterAcrossModelsLovCacheManager.prototype = new oFF.XObjectExt();
oFF.QFilterAcrossModelsLovCacheManager.prototype._ff_c = "QFilterAcrossModelsLovCacheManager";

oFF.QFilterAcrossModelsLovCacheManager.create = function()
{
	let lovManager = new oFF.QFilterAcrossModelsLovCacheManager();
	lovManager.m_resultSetCache = oFF.QCache.create(null);
	lovManager.m_valueHelpCache = oFF.QCache.create(null);
	lovManager.m_datasetIdToCacheKeys = oFF.XHashMapByString.create();
	return lovManager;
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.m_datasetIdToCacheKeys = null;
oFF.QFilterAcrossModelsLovCacheManager.prototype.m_resultSetCache = null;
oFF.QFilterAcrossModelsLovCacheManager.prototype.m_valueHelpCache = null;
oFF.QFilterAcrossModelsLovCacheManager.prototype.addDatasetIdCacheKey = function(datasetId, cacheKey)
{
	if (oFF.notNull(datasetId))
	{
		if (!this.m_datasetIdToCacheKeys.containsKey(datasetId))
		{
			this.m_datasetIdToCacheKeys.put(datasetId, oFF.XHashSetOfString.create());
		}
		this.m_datasetIdToCacheKeys.getByKey(datasetId).add(cacheKey);
	}
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.clearCache = function()
{
	oFF.XObjectExt.release(this.m_resultSetCache);
	oFF.XObjectExt.release(this.m_valueHelpCache);
	this.m_datasetIdToCacheKeys = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_datasetIdToCacheKeys);
	this.m_resultSetCache = oFF.QCache.create(null);
	this.m_valueHelpCache = oFF.QCache.create(null);
	this.m_datasetIdToCacheKeys = oFF.XHashMapByString.create();
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.clearCacheByDatasetId = function(datasetId)
{
	let cacheKeys = this.m_datasetIdToCacheKeys.getByKey(datasetId);
	if (oFF.notNull(cacheKeys))
	{
		let iterator = cacheKeys.getIterator();
		while (iterator.hasNext())
		{
			let cacheKey = iterator.next();
			if (this.m_resultSetCache.containsKey(cacheKey))
			{
				oFF.XObjectExt.release(this.m_resultSetCache.remove(cacheKey));
			}
			if (this.m_valueHelpCache.containsKey(cacheKey))
			{
				oFF.XObjectExt.release(this.m_valueHelpCache.remove(cacheKey));
			}
		}
		oFF.XObjectExt.release(cacheKeys);
		this.m_datasetIdToCacheKeys.remove(datasetId);
	}
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.containsResultSetEntry = function(key)
{
	return this.m_resultSetCache.containsKey(key);
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.containsValueHelpEntry = function(key)
{
	return this.m_valueHelpCache.containsKey(key);
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.getResultSetEntry = function(key)
{
	return this.m_resultSetCache.useEntry(key);
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.getValueHelpEntry = function(key)
{
	return this.m_valueHelpCache.useEntry(key);
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.onSynchronized = function(messages, data, customIdentifier)
{
	if (oFF.notNull(data))
	{
		let typeAndKey = customIdentifier;
		if (oFF.XString.isEqual(typeAndKey.getFirstString(), "resultSet"))
		{
			let queryManager = data.getQueryManager();
			queryManager.setActiveResultSetContainer(null);
		}
	}
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.putResultSetEntry = function(key, resultSetAction)
{
	resultSetAction.attachListener(this, oFF.ListenerType.SYNC_LISTENER, oFF.XPairOfString.create("resultSet", key));
	this.m_resultSetCache.put(key, resultSetAction);
	this.addDatasetIdCacheKey(resultSetAction.getDatasetId(), key);
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.putValueHelpEntry = function(key, valueHelpAction)
{
	valueHelpAction.attachListener(this, oFF.ListenerType.SYNC_LISTENER, oFF.XPairOfString.create("valueHelp", key));
	this.m_valueHelpCache.put(key, valueHelpAction);
	this.addDatasetIdCacheKey(valueHelpAction.getDatasetId(), key);
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.releaseObject = function()
{
	this.m_resultSetCache = oFF.XObjectExt.release(this.m_resultSetCache);
	this.m_valueHelpCache = oFF.XObjectExt.release(this.m_valueHelpCache);
	this.m_datasetIdToCacheKeys = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_datasetIdToCacheKeys);
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.removeResultSetEntry = function(key)
{
	this.m_resultSetCache.freeEntry(key);
};
oFF.QFilterAcrossModelsLovCacheManager.prototype.removeValueHelpEntry = function(key)
{
	this.m_valueHelpCache.freeEntry(key);
};

oFF.ModCounterState = function() {};
oFF.ModCounterState.prototype = new oFF.XObjectExt();
oFF.ModCounterState.prototype._ff_c = "ModCounterState";

oFF.ModCounterState.create = function(queryManager)
{
	let modCounterState = new oFF.ModCounterState();
	modCounterState.m_queryManager = queryManager;
	return modCounterState;
};
oFF.ModCounterState.prototype.m_queryManager = null;
oFF.ModCounterState.prototype.getAxisModCounter = function(axisType)
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		modCounter = modCounter + queryManager.getQueryModel().getAxis(axisType).getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getCurrencyTranslationModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		if (queryManager.getQueryModel().getCurrencyTranslationManager() !== null)
		{
			modCounter = modCounter + queryManager.getQueryModel().getCurrencyTranslationManager().getModCounter();
		}
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getDimensionInDrillModCounters = function()
{
	let dimensionModCounters = oFF.XList.create();
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		let dimensionsUsed = oFF.XList.create();
		dimensionsUsed.addAll(queryManager.getQueryModel().getAxis(oFF.AxisType.ROWS));
		dimensionsUsed.addAll(queryManager.getQueryModel().getAxis(oFF.AxisType.COLUMNS));
		oFF.XCollectionUtils.forEach(dimensionsUsed, (dimension) => {
			if (!dimension.getTagging().containsKey(oFF.QTransientConstants.TAG_TRANSIENT_ROWS_AXIS))
			{
				dimensionModCounters.add(oFF.XPair.create(dimension, oFF.XIntegerValue.create(dimension.getModCounter())));
			}
		});
	}
	return dimensionModCounters;
};
oFF.ModCounterState.prototype.getDrillManagerModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		modCounter = modCounter + queryManager.getDrillManager().getModCounter();
	}
	if (this.m_queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		modCounter = modCounter + this.m_queryManager.getBlendedDrillOperations().getModCounter();
		modCounter = modCounter + this.m_queryManager.getBlendedZoomDrills().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getFilterModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		modCounter = modCounter + queryManager.getQueryModel().getFilter().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getLeafQueryManagers = function()
{
	let allQueryManagers = oFF.XList.create();
	if (this.m_queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		allQueryManagers.addAll(this.m_queryManager.getAllQueryManagers());
	}
	else
	{
		allQueryManagers.add(this.m_queryManager);
	}
	return allQueryManagers;
};
oFF.ModCounterState.prototype.getPrimaryCalculationDimensionModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		if (queryManager.getQueryModel().getPrimaryCalculationDimension() !== null)
		{
			modCounter = modCounter + queryManager.getQueryModel().getPrimaryCalculationDimension().getModCounter();
		}
	}
	if (this.m_queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		modCounter = modCounter + this.m_queryManager.getPrimaryBlendedMeasureContainer().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getPrimaryMeasureFilterModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		if (queryManager.getQueryModel().getPrimaryCalculationDimension() !== null && queryManager.getQueryModel().getPrimaryCalculationDimension().getFilter() !== null)
		{
			modCounter = modCounter + queryManager.getQueryModel().getPrimaryCalculationDimension().getFilter().getModCounter();
		}
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getQueryModelLinksModCounter = function()
{
	let modCounter = 0;
	if (this.m_queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		modCounter = modCounter + this.m_queryManager.getAllQueryModelLinkSettings().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getQueryModelModCounter = function()
{
	let modCounter = 0;
	if (this.m_queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		modCounter = this.m_queryManager.getModCounter();
	}
	else
	{
		modCounter = this.m_queryManager.getQueryModel().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getRankingsModCounter = function()
{
	let modCounter = 0;
	if (this.m_queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		modCounter = this.m_queryManager.getRankSettings().getModCounter();
	}
	else if (this.m_queryManager.getQueryModel().getConditionManager() !== null)
	{
		modCounter = this.m_queryManager.getQueryModel().getConditionManager().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getSecondaryCalculationDimensionModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		if (queryManager.getQueryModel().getSecondaryCalculationDimension() !== null)
		{
			modCounter = modCounter + queryManager.getQueryModel().getSecondaryCalculationDimension().getModCounter();
		}
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getSecondaryMeasureFilterModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		if (queryManager.getQueryModel().getSecondaryCalculationDimension() !== null && queryManager.getQueryModel().getSecondaryCalculationDimension().getFilter() !== null)
		{
			modCounter = modCounter + queryManager.getQueryModel().getSecondaryCalculationDimension().getFilter().getModCounter();
		}
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getSortingModCounter = function()
{
	let modCounter = 0;
	if (this.m_queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		let blendableQueryManager = this.m_queryManager;
		modCounter = blendableQueryManager.getSortingContainer().getModCounter();
	}
	else
	{
		modCounter = this.m_queryManager.getQueryModel().getSortingManager().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getThresholdModCounters = function()
{
	let formulaExceptionCounters = oFF.XList.create();
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		let formulaExceptions = queryManager.getQueryModel().getFormulaExceptionManager().getValuesAsReadOnlyList();
		for (let i = 0; i < formulaExceptions.size(); i++)
		{
			let formulaException = formulaExceptions.get(i);
			formulaExceptionCounters.add(oFF.XPair.create(formulaException, oFF.XIntegerValue.create(formulaException.getModCounter())));
		}
	}
	return formulaExceptionCounters;
};
oFF.ModCounterState.prototype.getVariableManagerModCounter = function()
{
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	let modCounter = 0;
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		modCounter = modCounter + queryManager.getQueryModel().getVariableManager().getModCounter();
	}
	return modCounter;
};
oFF.ModCounterState.prototype.getVarianceModCounters = function()
{
	let varianceModCounters = oFF.XList.create();
	let leafQMIter = this.getLeafQueryManagers().getIterator();
	while (leafQMIter.hasNext())
	{
		let queryManager = leafQMIter.next();
		if (queryManager.getQueryModel().getPrimaryCalculationDimension() !== null)
		{
			let loadedStructureMembers = queryManager.getQueryModel().getPrimaryCalculationDimension().getLoadedStructureMembers().getValuesAsReadOnlyList();
			for (let i = 0; i < loadedStructureMembers.size(); i++)
			{
				let loadedStructureMember = loadedStructureMembers.get(i);
				if (loadedStructureMember.getMemberType() === oFF.MemberType.VARIANCE)
				{
					varianceModCounters.add(oFF.XPair.create(loadedStructureMember, oFF.XIntegerValue.create(loadedStructureMember.getModCounter())));
				}
			}
		}
	}
	return varianceModCounters;
};

oFF.QueryModelStateManager = function() {};
oFF.QueryModelStateManager.prototype = new oFF.XObjectExt();
oFF.QueryModelStateManager.prototype._ff_c = "QueryModelStateManager";

oFF.QueryModelStateManager.create = function(queryManager)
{
	let manager = new oFF.QueryModelStateManager();
	manager.m_queryManager = queryManager;
	manager.m_stateCache = oFF.XLinkedMap.createLinkedMap();
	manager.m_jsonParser = oFF.JsonParserFactory.newInstance();
	return manager;
};
oFF.QueryModelStateManager.prototype.m_jsonParser = null;
oFF.QueryModelStateManager.prototype.m_queryManager = null;
oFF.QueryModelStateManager.prototype.m_stateCache = null;
oFF.QueryModelStateManager.prototype.applyState = function(stateId)
{
	let stateStackEntry = this.m_stateCache.getByKey(stateId);
	if (oFF.isNull(stateStackEntry))
	{
		return oFF.ExtResult.createWithErrorMessage(oFF.XStringUtils.concatenate3("State Id ", stateId, " not found"));
	}
	let queryManagerState = stateStackEntry.getState();
	let element = this.m_jsonParser.parse(queryManagerState);
	if (this.m_jsonParser.hasErrors())
	{
		return oFF.ExtResult.create(null, this.m_jsonParser);
	}
	let definition = element.getStructureByKey("Analytics").getStructureByKey("Definition");
	let queryManagerProvider = this.m_queryManager;
	let result = queryManagerProvider.applyStateOnQueryManager(definition);
	return oFF.ExtResult.create(this.m_queryManager, result);
};
oFF.QueryModelStateManager.prototype.recordState = function()
{
	let structure = oFF.PrFactory.createStructure();
	let queryManagerProvider = this.m_queryManager;
	queryManagerProvider.recordStateOfQueryManager(structure);
	let currentState = oFF.PrUtils.serialize(structure, true, false, 0);
	let stateId = oFF.XGuid.getGuid();
	this.m_stateCache.add(oFF.StateStackEntry.create(stateId, currentState));
	return stateId;
};
oFF.QueryModelStateManager.prototype.releaseObject = function()
{
	this.m_stateCache = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_stateCache);
	this.m_queryManager = null;
	this.m_jsonParser = oFF.XObjectExt.release(this.m_jsonParser);
	oFF.XObjectExt.prototype.releaseObject.call( this );
};

oFF.AbstractOlapEnvQueryManagerHandler = function() {};
oFF.AbstractOlapEnvQueryManagerHandler.prototype = new oFF.XObject();
oFF.AbstractOlapEnvQueryManagerHandler.prototype._ff_c = "AbstractOlapEnvQueryManagerHandler";

oFF.AbstractOlapEnvQueryManagerHandler.prototype.m_olapEnvArea = null;
oFF.AbstractOlapEnvQueryManagerHandler.prototype.m_selectionMap = null;
oFF.AbstractOlapEnvQueryManagerHandler.prototype.getApplication = function()
{
	return this.getOlapEnv().getApplication();
};
oFF.AbstractOlapEnvQueryManagerHandler.prototype.getOlapEnv = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_olapEnvArea);
};
oFF.AbstractOlapEnvQueryManagerHandler.prototype.getProcess = function()
{
	return this.getOlapEnv().getProcess();
};
oFF.AbstractOlapEnvQueryManagerHandler.prototype.getSelectionMap = function()
{
	return this.m_selectionMap;
};
oFF.AbstractOlapEnvQueryManagerHandler.prototype.getSession = function()
{
	return this.getOlapEnv().getSession();
};
oFF.AbstractOlapEnvQueryManagerHandler.prototype.getTaggedQueryManagers = function()
{
	let queryManagerList = this.getOlapEnv().getAllAreaQueryManagerActive();
	if (this.m_selectionMap.isEmpty())
	{
		return queryManagerList;
	}
	let selection = oFF.XList.create();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let checkTagging = queryManager.getTagging();
		let iterator = this.m_selectionMap.getKeysAsIterator();
		let ok = true;
		while (iterator.hasNext())
		{
			let key = iterator.next();
			let value = this.m_selectionMap.getByKey(key);
			let checkValue = checkTagging.getByKey(key);
			if (!oFF.XString.isEqual(value, checkValue))
			{
				ok = false;
				break;
			}
		}
		if (ok)
		{
			selection.add(queryManager);
		}
	}
	return selection;
};
oFF.AbstractOlapEnvQueryManagerHandler.prototype.releaseObject = function()
{
	this.m_olapEnvArea = oFF.XObjectExt.release(this.m_olapEnvArea);
	this.m_selectionMap = oFF.XObjectExt.release(this.m_selectionMap);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.AbstractOlapEnvQueryManagerHandler.prototype.setupQueryManagerHandler = function(olapEnvArea)
{
	this.m_selectionMap = oFF.XHashMapByString.create();
	this.m_olapEnvArea = oFF.XWeakReferenceUtil.getWeakRef(olapEnvArea);
};

oFF.OlapEnvVariable = function() {};
oFF.OlapEnvVariable.prototype = new oFF.DfNameObject();
oFF.OlapEnvVariable.prototype._ff_c = "OlapEnvVariable";

oFF.OlapEnvVariable.create = function(key, master)
{
	let newObj = new oFF.OlapEnvVariable();
	newObj._setupInternal(key);
	newObj.m_mainVariable = master;
	newObj.m_secondaryVariables = oFF.XList.create();
	return newObj;
};
oFF.OlapEnvVariable.prototype.m_mainVariable = null;
oFF.OlapEnvVariable.prototype.m_secondaryVariables = null;
oFF.OlapEnvVariable.prototype.addSecondaryVariable = function(variable)
{
	this.m_secondaryVariables.add(variable);
};
oFF.OlapEnvVariable.prototype.getMainVariable = function()
{
	return this.m_mainVariable;
};
oFF.OlapEnvVariable.prototype.releaseObject = function()
{
	this.m_mainVariable = null;
	this.m_secondaryVariables = oFF.XObjectExt.release(this.m_secondaryVariables);
	oFF.DfNameObject.prototype.releaseObject.call( this );
};
oFF.OlapEnvVariable.prototype.sync = function()
{
	let serialization = this.m_mainVariable.serializeToElement(oFF.QModelFormat.INA_REPOSITORY);
	for (let i = 0; i < this.m_secondaryVariables.size(); i++)
	{
		let secondary = this.m_secondaryVariables.get(i);
		secondary.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, serialization);
	}
};

oFF.InACapabilitiesProvider = function() {};
oFF.InACapabilitiesProvider.prototype = new oFF.DfSessionContext();
oFF.InACapabilitiesProvider.prototype._ff_c = "InACapabilitiesProvider";

oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES = null;
oFF.InACapabilitiesProvider.create = function(session, serverMetadata, providerType, featureToggles)
{
	let inaCapabilities = new oFF.InACapabilitiesProvider();
	inaCapabilities.setupExt(session, serverMetadata, providerType, featureToggles);
	return inaCapabilities;
};
oFF.InACapabilitiesProvider.importCapabilities = function(sysCapabilities, queryCapabilities)
{
	let systemType = queryCapabilities.getSystemType();
	let isBW = false;
	let isHana = false;
	let isBpcs = false;
	if (oFF.notNull(systemType))
	{
		isBW = systemType.isTypeOf(oFF.SystemType.BW);
		isHana = systemType.isTypeOf(oFF.SystemType.HANA);
		isBpcs = systemType.isTypeOf(oFF.SystemType.BPCS);
	}
	queryCapabilities.setSupportsServerState(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C009_STATEFUL_SERVER, isBW));
	queryCapabilities.setSupportsShutdown(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C010_STATEFUL_DATA_PROVIDER, isBW || isHana));
	queryCapabilities.setSupportsDirectVariableTransfer(!isBW);
	queryCapabilities.setSupportsCheckVariables(!isBW);
	queryCapabilities.setSupportsHierarchyCatalog(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V322_HIERARCHY_CATALOG, false));
	queryCapabilities.setSupportsDataCellMixedValues(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C113_DATA_CELL_MIXED_VALUES, false));
	queryCapabilities.setSupportsCancelRunningQueries(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C117_CANCEL_RUNNING_REQUESTS, false));
	queryCapabilities.setSupportsObtainability(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C005_OBTAINABILITY, false));
	queryCapabilities.setSupportsCustomDimensionFilterCapability(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C123_CUSTOM_DIMENSION_FILTER, isBW));
	queryCapabilities.setSupportsRestrictedMeasures(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C119_RESTRICTED_KEYFIGURES, isHana));
	queryCapabilities.setSupportsFormulaMeasures(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C118_CALCULATED_KEYFIGURES, isHana));
	queryCapabilities.setSupportsCartesianFilterIntersect(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C150_CARTESIAN_FILTER_INTERSECT, false));
	queryCapabilities.setSupportsIntersectLayers(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C150_CARTESIAN_FILTER_INTERSECT, false));
	queryCapabilities.setSupportsCellValueOperand(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C060_CELL_VALUE_OPERAND, false));
	queryCapabilities.setSupportsComplexFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C013_COMPLEX_FILTERS, false));
	queryCapabilities.setSupportsVisibilityFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C059_VISIBILITY_FILTER, false));
	queryCapabilities.setSupportsSetOperand(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C011_SET_OPERAND, false));
	queryCapabilities.setSupportsConvertToFlatFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C058_HIERARCHY_SELECTION_AS_FLAT_SELECTION, false));
	queryCapabilities.setSupportsCummulative(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C018_CUMMULATIVE, false));
	queryCapabilities.setSupportsHierarchyNavCounter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C035_HIERARCHY_NAVIGATION_COUNTER, false));
	queryCapabilities.setSupportsHierarchyAttHierFields(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C036_ATTRIBUTE_HIERARCHY_HIERARCHY_FIELDS, false));
	queryCapabilities.setSupportsHierarchyCarryingDim(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C036_ATTRIBUTE_HIERARCHY_HIERARCHY_FIELDS, isBW || isBpcs));
	queryCapabilities.setSupportsSortTypes(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.SORT_TYPE, false));
	queryCapabilities.setSupportsSpatialFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C061_SPATIAL_FILTER, false));
	queryCapabilities.setSupportsSapDate(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C017_SAP_DATE, isBW || isBpcs));
	queryCapabilities.setSupportsCustomDimensionMemberExecutionStep(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C055_CUSTOM_DIMENSION_MEMBER_EXECUTION_STEP, false));
	queryCapabilities.setSupportsSupplements(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C037_SUPPLEMENTS, false));
	queryCapabilities.setSupportsNumberAsString(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V172_NUMBER_AS_STRING, false));
	if (queryCapabilities.supportsSpatialFilter())
	{
		queryCapabilities.setSupportsSpatialFilterSrid(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C062_SPATIAL_FILTER_WITH_SRID, false));
	}
	queryCapabilities.setSupportsComplexTupleFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C200_COMPLEX_TUPLE_FILTER, false));
	queryCapabilities.setSupportsTuplesOperand(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V216_TUPLES_OPERAND, false));
	queryCapabilities.setSupportsExtendedDimensions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C067_EXTENDED_DIMENSIONS, false));
	queryCapabilities.setSupportsExtendedDimensionsFieldMapping(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C068_EXTENDED_DIMENSIONS_FIELD_MAPPING, false));
	queryCapabilities.setSupportsExtendedDimensionsJoinColumns(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C069_EXTENDED_DIMENSIONS_JOIN_COLUMNS, false));
	queryCapabilities.setSupportsExtendedDimensionsOuterJoin(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C070_EXTENDED_DIMENSIONS_OUTER_JOIN, false));
	queryCapabilities.setSupportsExtendedDimensionsSkip(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C071_EXTENDED_DIMENSIONS_SKIP, false));
	queryCapabilities.setSupportsExtendedDimensionsJoinCardinality(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C143_EXTENDED_DIMENSIONS_JOIN_CARDINALITY, false));
	queryCapabilities.setSupportsSortNewValues(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C212_SORT_NEW_VALUES, false));
	queryCapabilities.setSupportsIgnoreUnitOfZeroValueInAggregation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C152_IGNORE_UNIT_OF_ZERO_VALUE_IN_AGGREGATION, false));
	queryCapabilities.setSupportsCubeBlendingWithNSubqueries(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V214_CUBE_BLENDING_N_QUERIES, false));
	queryCapabilities.setSupportsRemoteBlendingWithSplittedSerializationRequests(oFF.InACapabilitiesProvider.supports(sysCapabilities, isBW ? oFF.InACapabilities.C182_CUBE_BLENDING_PERSISTENCE_TYPE : oFF.InACapabilities.C206_REMOTE_BLENDING_METADATA, false));
	queryCapabilities.setSupportsExtendedDimensionsChangeDefaultRenamingAndDescription(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C156_EXTENDED_DIMENSION_CHANGE_DEFAULT_RENAMING_AND_DESCRIPTION, false));
	queryCapabilities.setSupportsExtendedDimensionsCopyAllHierarchies(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C157_EXTENDED_DIMENSION_COPY_ALL_HIERARCHIES, false));
	queryCapabilities.setSupportsFixMetadataHierarchyAttributes(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C158_FIX_METADATA_HIERARCHY_ATTRIBUTES, false));
	queryCapabilities.setSupportsUniversalDisplayHierarchies(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C139_UNIVERSAL_DISPLAY_HIERARCHIES, false));
	queryCapabilities.setSupportsUniversalDisplayHierarchiesCustomDimensions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C204_UNIVERSAL_DISPLAY_HIERARCHY_CUSTOM_DIM, false));
	queryCapabilities.setSupportsUniversalDisplayHierarchiesZeroBased(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V158_UNIVERSAL_DISPLAY_HIERARCHY_ZERO_BASED, false));
	queryCapabilities.setSupportsRemoteBlending(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C093_REMOTE_BLENDING, false));
	queryCapabilities.setSupportsRemoteFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C180_REMOTE_FILTER, false));
	queryCapabilities.setSupportsCubeCache(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V166_CUBE_CACHE, false));
	queryCapabilities.setSupportsCatalogServiceV2(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C140_CATALOG_SERVICE_V20, false));
	queryCapabilities.setSupportsExtendedVariableDefinition(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C146_EXTENDED_VARIABLE_DEFINITION, false));
	queryCapabilities.setSupportsCustomSort(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C149_CUSTOM_SORT, false));
	queryCapabilities.setSupportsDataRefreshAndDataTopicality(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C145_DATA_REFRESH_AND_DATA_TOPICALITY, false));
	queryCapabilities.setSupportsRemoteBlendingBW(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C196_REMOTE_BLENDING_BW, false));
	queryCapabilities.setSupportsCustomMeasureSortOrder(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C148_CUSTOM_MEASURE_SORTORDER, false));
	queryCapabilities.setSupportsExceptionAggregationAvgNullSelectionMember(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C105_EXCEPTION_AGGREGATION_AVGNULL_SELECTION_MEMBER, false));
	queryCapabilities.setSupportsExceptionAggregationCountNullSelectionMember(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C106_EXCEPTION_AGGREGATION_COUNTNULL_SELECTION_MEMBER, false));
	queryCapabilities.setSupportsStatisticalAggregations(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C107_STATISTICAL_AGGREGATIONS, false));
	queryCapabilities.setSupportsF4FilterForTextField(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C186_F4_FILTER_FOR_TEXT_FIELD, false));
	queryCapabilities.setSupportsSidPresentation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V232_SID_PRESENTATION, false));
	queryCapabilities.setSupportsVarianceOperator(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C153_VARIANCE_OPERATOR, false));
	queryCapabilities.setSupportsTotalOperator(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C198_OPERATOR_TOTALS, false));
	queryCapabilities.setSupportsAsyncRemoteModelValidation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C154_MD_DS_DEF_VAL_EXPOSE_DS, false));
	queryCapabilities.setSupportsExtendedKeyFigureProperties(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V168_EXT_KEYFIGURE_PROPERTIES, false));
	queryCapabilities.setSupportsDetailedResponseExpansion(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C201_DETAILED_RESPONSE_EXPANSION, false));
	queryCapabilities.setSupportsDynamicVariableRefresh(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C192_VIRTUAL_DS_VARIABLE_VALUES, false));
	queryCapabilities.setSupportsQueryCurrencyTranslation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C160_QUERY_CURRENCY_TRANSLATION, false));
	queryCapabilities.setSupportsStructureRestrictionsInValueHelp(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C161_STRUCTURE_RESTRICTIONS_IN_VALUE_HELP, false));
	queryCapabilities.setSupportsCustomHierarchy(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C202_CUSTOM_HIERARCHY, false));
	queryCapabilities.setSupportsSpatialChoropleth(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C165_SPATIAL_CHOROPLETH, false));
	queryCapabilities.setSupportsInaCurrentMember(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C166_INA_CURRENT_MEMBER, false));
	queryCapabilities.setSupportsDimensionDefaultMember(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C187_DIMENSION_DEFAULT_MEMBER, false));
	queryCapabilities.setSupportsDimensionVisibility(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C189_DIMENSION_VISIBILITY, false));
	queryCapabilities.setSupportsDisplayHierarchyFixInFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V186_DISP_HIERARCHY_FIX_IN_FILTER, false));
	queryCapabilities.setSupportsDisplayAttributes(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V428_DISPLAY_MDS_ATTRIBUTES, false));
	queryCapabilities.setSupportsCustomMemberKeySortOrder(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C203_CUSTOM_MEMBER_KEY_SORT_ORDER, false));
	queryCapabilities.setSupportsSpatialTransformation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C063_SPATIAL_TRANSFORMATIONS, false));
	queryCapabilities.setSupportsMemberVisibility(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C048_MEMBER_VISIBILITY, false));
	queryCapabilities.setSupportsHierarchyMetadata(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C052_METADATA_HIERARCHY_STRUCTURE, false));
	queryCapabilities.setSupportsDimensionHierarchyLevels(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C169_DIMENSION_HIERARCHY_LEVELS, false));
	queryCapabilities.setSupportsHierarchyLevelMetadata(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C053_METADATA_HIERARCHY_LEVELS, false));
	queryCapabilities.setSupportsCubeBlendingProperties(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C097_CUBE_BLENDING_PROPERTIES, false));
	queryCapabilities.setSupportsHierarchyNavigationDeltaMode(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C111_HIERARCHY_NAVIGATION_DELTA_MODE, false));
	queryCapabilities.setSupportsCeScenarioParams(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C127_CE_SCENARIO_PARAMS, false));
	queryCapabilities.setSupportsLocaleSorting(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C188_LOCALE_SORTING, false));
	queryCapabilities.setSupportsHierarchyLevelOffsetFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C126_HIERARCHY_LEVEL_OFFSET_FILTER, false));
	queryCapabilities.setSupportsHierarchyTrapezoidFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C065_HIERARCHY_TRAPEZOID_FILTER, false));
	queryCapabilities.setSupportsUnifiedDataCells(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C210_UNIFIED_DATA_CELLS, false));
	queryCapabilities.setSupportsAverageCountNullZero(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C124_AVERAGE_COUNT_IGNORE_NULL_ZERO, false));
	queryCapabilities.setSupportsCubeBlendingOutOfContext(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C096_CUBE_BLENDING_OUT_OF_CONTEXT, false));
	queryCapabilities.setSupportsExceptionsV2(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C159_EXCEPTIONS_V2, false));
	queryCapabilities.setSupportsSpatialClustering(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C064_SPATIAL_CLUSTERING, false));
	queryCapabilities.setSupportsKeepOriginalTexts(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C122_ORIGINAL_TEXTS, false));
	queryCapabilities.setSupportsConditions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C101_CONDITIONS, false));
	queryCapabilities.setSupportsConditionsWithVersions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V397_CONDITIONS_WITH_VERSION_DIMENSION, false));
	queryCapabilities.setSupportsExtendedSort(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C054_EXTENDED_SORT, false));
	queryCapabilities.setSupportsDataCells(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C026_QUERY_DATA_CELLS, false));
	queryCapabilities.setSupportsExpandBottomUp(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C100_EXPAND_BOTTOM_UP, false));
	queryCapabilities.setSupportsIgnoreExternalDimensions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C073_IGNORE_EXTERNAL_DIMENSIONS, false));
	queryCapabilities.setSupportsExceptionAggregationDimsFormulas(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C104_EXCEPTION_AGGREGATION_DIMENSIONS_AND_FORMULAS, false));
	queryCapabilities.setSupportsExceptionSettings(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C024_EXCEPTION_SETTINGS, false));
	queryCapabilities.setSupportsExceptions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C023_EXCEPTIONS, false));
	queryCapabilities.setSupportsHierarchyVirtualRootNode(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C163_HIERARCHY_VIRTUAL_ROOT_NODE, false));
	queryCapabilities.setSupportsHierarchyRestNode(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C164_HIERARCHY_REST_NODE, false));
	queryCapabilities.setSupportsCubeBlending(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C091_CUBE_BLENDING, false));
	queryCapabilities.setSupportsMetadataDataCategory(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C099_METADATA_DATA_CATEGORY, false));
	queryCapabilities.setSupportsExtendedDimensionVisibility(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C194_METADATA_EXTENDED_DIMENSION_VISIBILITY, false));
	queryCapabilities.setSupportsResultSetUnitIndex(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C195_RESULTSET_UNIT_INDEX, false));
	queryCapabilities.setSupportsAsyncBatchRequests(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C162_ASYNC_METADATA_BATCH_REQUEST, false));
	queryCapabilities.setSupportsMetadataDataSourceDefinitionValidation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C144_METADATA_DATASOURCE_DEFINITION_VALIDATION, false));
	queryCapabilities.setSupportsVariableVariants(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C135_VARIABLE_VARIANTS, false));
	queryCapabilities.setSupportsCalculatedDimensions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C171_CALCULATED_DIMENSION, false));
	queryCapabilities.setSupportsZeroSuppression(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C045_ZERO_SUPPRESSION, false));
	queryCapabilities.setSupportsResultSetInterval(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C049_RESULTSET_INTERVAL, false));
	queryCapabilities.setSupportsFixHierarchyFlatKeys(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C181_FIX_HIERARCHY_FLAT_KEYS, false));
	queryCapabilities.setSupportsAttributeValueLookup(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C115_ATTRIBUTE_VALUE_LOOKUP, false));
	queryCapabilities.setSupportsAggregationNopNull(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C102_AGGREGATION_NOP_NULL, false));
	queryCapabilities.setSupportsAggregationNopNullZero(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C103_AGGREGATION_NOP_NULL_ZERO, false));
	queryCapabilities.setSupportsPlanningOnCalculatedDimensions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C172_PLANNING_ON_CALCULATED_DIMENSION, false));
	queryCapabilities.setSupportsCustomDimension2(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C211_CUSTOM_DIMENSION_2, false));
	queryCapabilities.setSupportsCubeBlendingAggregation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C092_CUBE_BLENDING_AGGREGATION, false));
	queryCapabilities.setSupportsWindowFunction(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V218_WINDOW_FUNCTION, false));
	queryCapabilities.setSupportsMultipleExAggDimsInCalcPlan(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C223_MULTIPLE_EX_AGG_DIMS_IN_CALC_PLAN, false));
	queryCapabilities.setSupportsSetOperandCurrentMemberSingleNavigation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C222_SET_OPERAND_CURRENT_MEMBER_SINGLE_NAVIGATION, false));
	queryCapabilities.setSupportsDimensionHierarchyMetadata(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V388_DIMENSION_HIERARCHY_METADATA, false));
	queryCapabilities.setSupportsHierarchyPathPresentationType(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V294_HIERARCHY_PATH_PRESENTATION_TYPE, false));
	let v296 = oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V296_DIMENSION_KEY_ATTRIBUTES, false);
	let v434 = oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V434_MDS_COMPOUND_KEY, false);
	queryCapabilities.setSupportsDimensionKeyAttributes(v296 || v434);
	queryCapabilities.setSupportsCurrentMemberFilterExtension(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C120_CURRENT_MEMBER_FILTER_EXTENSION, false));
	queryCapabilities.setSupportsClientInfo(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C155_CLIENT_INFO, false));
	queryCapabilities.setSupportsDynamicRestrictionOnFormula(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C197_DYN_RESTRICTION_ON_FORMULA, false));
	queryCapabilities.setSupportsDynamicMembersOnNonMeasureStructure(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V248_DYNAMIC_MEMBERS_ON_NON_MEASURE_STRUCTURE, false));
	queryCapabilities.setSupportsVisualAggregation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C176_VISUAL_AGGREGATION, false));
	queryCapabilities.setSupportsNamedCustomMember(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V236_NAMED_CUSTOM_DIMENSION_MEMBER, false));
	queryCapabilities.setSupportsReinitVariables(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C002_VARIABLE_RE_SUBMIT, false));
	queryCapabilities.setSupportsMultiSource(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C047_MULTI_SOURCE, false));
	queryCapabilities.setSupportsRequestTimezone(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C174_REQUEST_TIME_ZONE, false));
	queryCapabilities.setSupportsVariableMasking(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C199_AV_CAPABILITY_VARIABLE_MASKING, false));
	queryCapabilities.setSupportsSuppressKeyfigureCalculation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C151_SUPPRESS_KEYFIGURE_CALCULATION, false));
	queryCapabilities.setSupportsInputReadinessStates(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C147_INPUT_READINESS_STATES, false));
	queryCapabilities.setSupportsReturnedDataSelection(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C141_RETURNED_DATA_SELECTION, false));
	queryCapabilities.setSupportsRunAsUser(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C025_RUN_AS_USER, false));
	queryCapabilities.setSupportsVirtualDescription(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C214_IS_VIRTUAL_DESCRIPTION, false));
	queryCapabilities.setSupportsVersionParameters(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C183_GET_PARAMETERS, false));
	queryCapabilities.setSupportsVersionPrivileges(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C184_VERSION_PRIVILEGES, false));
	queryCapabilities.setSupportsMeasureMemberDefinition(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C215_MEASURE_MEMBER_DEFINITION, false));
	queryCapabilities.setSupportsMeasureMemberDetails(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C216_MEASURE_MEMBER_DETAILS, false));
	queryCapabilities.setSupportsMeasureMemberType(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C217_MEASURE_MEMBER_TYPE, false));
	queryCapabilities.setSupportsValueHelpWithAttributes(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C185_VALUE_HELP_WITH_ATTRIBUTES, !isBW));
	queryCapabilities.setSupportsEncodedResultset(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C012_ENCODED_RESULTSET, false));
	queryCapabilities.setSupportsNewValuesImplicitUnlock(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C020_NEW_VALUES_IMPLICIT_UNLOCK, false));
	queryCapabilities.setSupportsNewValuesExtendedFormat(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C021_NEW_VALUES_EXTENDED_FORMAT, false));
	let v444 = oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V444_RRI_2, false);
	let v463 = oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V463_RRI_3, false);
	queryCapabilities.setSupportsReportReportInterface(v444 || v463);
	queryCapabilities.setSupportsRRI3(v463);
	queryCapabilities.setSupportsResultSetHierarchyLevel(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V149_RESULTSET_HIERARCHY_LEVEL, false));
	queryCapabilities.setSupportsQueryDataCellModelDefaults(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V174_QDATA_CELL_MODEL_DEFAULTS, false));
	queryCapabilities.setSupportsCubeBlendingSorting(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C095_CUBE_BLENDING_MEMBER_SORTING, false));
	queryCapabilities.setSupportsCubeBlendingReadmode(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C098_CUBE_BLENDING_READ_MODE, false));
	queryCapabilities.setSupportsCubeBlendingCustomMember(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C094_CUBE_BLENDING_CUSTOM_MEMBERS, false));
	queryCapabilities.setSupportsResultSetCache(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V394_RESULT_SET_CACHE, false));
	queryCapabilities.setSupportsOthersFromConditions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V414_OTHERS_FROM_CONDITIONS, false));
	queryCapabilities.setSupportsInputEnablementFilterSettings(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V416_INPUT_ENABLEMENT_FILTER_SETTINGS, false));
	queryCapabilities.setSupportsInputReadinessFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V458_INPUT_READINESS_FILTER, false));
	let c51 = oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C051_HIERARCHY_PATH, false);
	queryCapabilities.setSupportsHierarchyPath(c51);
	let c56 = oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C056_HIERARCHY_PATH_UNIQUE_NAME, false);
	queryCapabilities.setSupportsUniqueHierarchyPath(c51 && c56);
	let bwValueHelpHierarchyPath = oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V402_VALUE_HELP_HIERARCHY_PATH, false);
	queryCapabilities.setSupportsValueHelpHierarchyPath(bwValueHelpHierarchyPath);
	queryCapabilities.setSupportsUniversalModel(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C221_UNIVERSAL_MODEL, false));
	queryCapabilities.setSupportsCurrencyTranslation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C218_CURRENCY_TRANSLATION, false));
	queryCapabilities.setSupportsMeasureMemberCurrencyTranslations(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C219_MEASURE_MEMBER_CURRENCY_TRANSLATIONS, false));
	queryCapabilities.setSupportsTechnicalAxis(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C042_TECHNICAL_AXIS, false));
	queryCapabilities.setSupportsResultsetEffectiveFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C205_RESUlTSET_EFFECTIVE_FILTER, false));
	queryCapabilities.setSupportsBatchRsStreaming(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C207_BATCH_RS_STREAMING, false));
	queryCapabilities.setSupportsBatchBlendingRsStreaming(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V308_ASYNC_BLENDING_BATCH_REQUEST, false));
	queryCapabilities.setSupportsCorrectDimensionDescription(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V198_DIMENSION_DESCRIPTION, false));
	queryCapabilities.setSupportsRootOrphansAfterVisibilityFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C213_ROOT_ORPHANS_AFTER_VISIBILITY_FILTER, false));
	queryCapabilities.setSupportsMetadataDimensionOthers(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V224_METADATA_DIMENSION_OTHERS, false));
	queryCapabilities.setSupportsRSCellFormatTypeSpecific(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V268_RESULTSET_CELL_FORMAT_TYPE_SPECIFIC, false));
	queryCapabilities.setSupportsSuppressSupplements(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V230_SUPPRESS_SUPPLEMENTS, false));
	queryCapabilities.setSupportsAutoVariableSubmit(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V286_AUTO_VARIABLE_SUBMIT, false));
	queryCapabilities.setSupportsExceptionAggregationFirstLastSelectionMember(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C208_EXCEPTION_AGGREGATION_FIRST_LAST_SELECTION_MEMBER, false));
	queryCapabilities.setSupportsResultSetCellExplain(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C209_RESULTSET_CELL_EXPLAIN, false));
	queryCapabilities.setSupportsMaintainsVariableVariants(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V320_MAINTAINS_VARIABLE_VARIANTS, false));
	queryCapabilities.setSupportsNullZeroSuppression(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V254_NULL_ZERO_SUPPRESSION, false));
	queryCapabilities.setSupportsInputReadinessWithNavigationalAttributes(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V256_INPUT_READINESS_WITH_NAVIGATIONAL_ATTRIBUTES, false));
	queryCapabilities.setSupportsIteratedFormula(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V270_ITERATED_FORMULA, false));
	queryCapabilities.setSupportsCDSProjectionViews(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V272_CDS_PROJECTION_VIEWS, false));
	queryCapabilities.setSupportsCellDocumentId(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V274_CELL_DOCUMENT_ID, false));
	queryCapabilities.setSupportsUndefinedTupleCountTotals(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.C220_UNDEFINED_TUPLE_COUNT_TOTALS, false));
	queryCapabilities.setSupportsTextInHierarchyForCharacteristicsWithoutText(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V302_TEXT_IN_HIERARCHY, false));
	queryCapabilities.setSupportsPagingTupleCountBeforeSlicing(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V298_PAGING_TUPLE_COUNT_BEFORE_SLICING, false));
	queryCapabilities.setSupportsDataCellContexts(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V324_DATA_CELL_CONTEXTS, false));
	queryCapabilities.setSupportsNamePath(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V326_NAME_PATH, false));
	queryCapabilities.setSupportsMixedDisplayKey(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V328_MIXED_DISPLAY_KEY, false));
	queryCapabilities.setSupportsSemanticObject(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V332_SEMANTIC_OBJECT, false));
	queryCapabilities.setSupportsErrorAboveLevel(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V336_ERROR_ABOVE_LEVEL, false));
	queryCapabilities.setSupportsInAModelExternalDimension(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V342_INAMODEL_EXTERNAL_DIMENSION, false));
	queryCapabilities.setSupportsInAModelExternalValuehelp(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V344_INAMODEL_EXTERNAL_VALUE_HELP, false));
	queryCapabilities.setSupportsPersistedInA(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V340_INA_PERSISTED, false));
	queryCapabilities.setSupportsMaxDrillLevel(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V346_MAX_DRILL_LEVEL, false));
	queryCapabilities.setSupportsSqlTypeBoolean(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V354_SQL_TYPE_BOOLEAN, false));
	queryCapabilities.setSupportsNoDataActions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V128_NO_DATA_ACTIONS, false));
	queryCapabilities.setSupportsStructureOnFreeAxis(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V356_STRUCTURE_ON_FREE_AXIS, false));
	queryCapabilities.setSupportsMetadataHasExternalHierarchies(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V358_METADATA_HAS_EXTERNAL_HIERARCHIES, false));
	queryCapabilities.setSupportsExceptionThresholdNoPrec(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V360_EXCEPTION_THRESHOLD_NO_PRECISION, false));
	queryCapabilities.setSupportsReturnMetadataExtensions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V362_RETURN_METADATA_EXTENSIONS, false));
	queryCapabilities.setSupportsMetadataResultFormatOptions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V368_METADATA_RESULT_FORMAT_OPTIONS, false));
	queryCapabilities.setSupportsLightweightMetadata(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V370_LIGHTWEIGHT_METADATA, false));
	queryCapabilities.setSupportsResultSetV2MetadataExtension1(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V266_RESULTSETV2_METADATA_EXTENSION1, false));
	queryCapabilities.setSupportsIDAttributeForMeasureDimension(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V376_MEASURE_DIMENSION_ID_ATTRIBUTE, false));
	queryCapabilities.setSupportsUniqueAxisProperties(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V382_UNIQUE_AXIS_PROPERTIES, false));
	queryCapabilities.setSupportsSpatialTransformDistanceFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V384_MDS_SPATIAL_TRANSFORM_DISTANCE_FILTER, false));
	queryCapabilities.setSupportsUdhAlignment(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V250_UDH_ALIGNMENT, false));
	queryCapabilities.setSupportsResultSetNumericValueWithInternalPrecision(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V386_RS_NUM_VALUES_WITH_INTERNAL_PRECISION, false));
	queryCapabilities.setSupportsVirtualDataSourceTypeColumns(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V372_VIRTUAL_DATA_SOURCE_TYPE_COLUMNS, false));
	queryCapabilities.setSupportsCalculateWithNullCellsUnitType(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V392_MDS_CALCULATE_WITH_NULL_CELLS_UNIT_TYPE, false));
	queryCapabilities.setSupportsSortingDefaults(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V406_SORTING_DEFAULTS, false));
	queryCapabilities.setSupportsInputEnablementFilterSettings(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V416_INPUT_ENABLEMENT_FILTER_SETTINGS, false));
	queryCapabilities.setSupportsUnitTranslation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V418_UNIT_TRANSLATION, false));
	queryCapabilities.setSupportsMeasureMemberUnitTranslations(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V420_MEASURE_MEMBER_UNIT_TRANSLATIONS, false));
	queryCapabilities.setSupportsHierarchyDefaults(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V412_HIERARCHY_DEFAULTS, false));
	queryCapabilities.setSupportsUdhKey(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V424_UDH_KEY, false));
	queryCapabilities.setSupportsNumericShiftPercent(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V426_NUMERIC_SHIFT_PERCENT, false));
	queryCapabilities.setSupportsCustomDimension2MemberMetadata(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V430_CUSTOM_DIMENSION_2_MEMBER_MD, false));
	queryCapabilities.setSupportsMemberUniqueNamesCompatibility(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.MEMBER_UNIQUE_NAMES_COMPATIBILITY, false));
	queryCapabilities.setSupportsConditionsWithHiddenMeasures(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V438_CONDITIONS_WITH_HIDDEN_MEASURES, false));
	queryCapabilities.setSupportsFilterCapabilityExtended(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V440_FILTER_CAPABILITY_EXTENDED, false));
	queryCapabilities.setSupportsTuplesOperandFromDataSource(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V450_TUPLES_OPERAND_FROM_DATA_SOURCE, false));
	queryCapabilities.setSupportsSimulation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V452_SIMULATION, false));
	queryCapabilities.setSupportsOthersDetailsFromConditions(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V454_OTHERS_DETAILS_FROM_CONDITIONS, false));
	queryCapabilities.setSupportsInputReadinessFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V458_INPUT_READINESS_FILTER, false));
	queryCapabilities.setSupportsFlexibleClientInfo(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V455_FLEX_CLIENT_INFO, false));
	queryCapabilities.setSupportsSortTupleMemberType(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V461_SORT_TUPLE_MEMBER_TYPE, false));
	queryCapabilities.setSupportsSupportsRunningAggregation(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V471_SUPPORTS_RUNNING_AGGREGATION, false));
	queryCapabilities.setSupportsAggregationsFirstLastAverageOfDimension(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V473_AGGREGATIONS_FIRST_LAST_AVG_OF_DIMENSION, false));
	queryCapabilities.setSupportsFunctionalVariables(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V477_FUNCTIONAL_VARIABLES, false));
	queryCapabilities.setSupportsCustomDimensionMemberVisibilityFilter(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V479_CDM_VISIBILITY_FILTER, false));
	queryCapabilities.setSupportsCubeBlendingCustomDimension1NoneAxis(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V481_BLENDING_CUSTOM_DIMENSION_1_NONE_AXIS, false));
	queryCapabilities.setSupportsMetadataNonUniqueDisplayAttribute(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V483_METADATA_NON_UNIQUE_DISPLAY_ATTRIBUTE, false));
	queryCapabilities.setSupportsBlendingTotals(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V485_BLENDING_TOTALS, false));
	queryCapabilities.setSupportsAsyncBatchRequestHeartbeat(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V487_ASYNC_BATCH_REQUEST_HEARTBEAT, false));
	queryCapabilities.setSupportsSupportsDimensionSemanticType(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V489_DIMENSION_SEMANTIC_TYPE, false));
	queryCapabilities.setSupportsSortedIteratedFormula(oFF.InACapabilitiesProvider.supports(sysCapabilities, oFF.InACapabilities.V491_SORTED_ITERATED_FORMULA, false));
};
oFF.InACapabilitiesProvider.isDevCapabilityValid = function(capabilityName, session)
{
	return session.hasFeature(oFF.FeatureToggleOlap.DEVELOPMENT_MODE) || oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.containsKey(capabilityName);
};
oFF.InACapabilitiesProvider.staticSetup = function()
{
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES = oFF.CapabilityContainer.create("sacExceptions");
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C178_MASTER_READ_MODE_BY_DIMENSION_GROUPING);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C187_DIMENSION_DEFAULT_MEMBER);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C189_DIMENSION_VISIBILITY);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C193_INA_MODEL_METADATA);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C194_METADATA_EXTENDED_DIMENSION_VISIBILITY);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C191_DYNAMIC_VARIABLES);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C192_VIRTUAL_DS_VARIABLE_VALUES);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C188_LOCALE_SORTING);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C212_SORT_NEW_VALUES);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C215_MEASURE_MEMBER_DEFINITION);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.C216_MEASURE_MEMBER_DETAILS);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.V210_DATASOURCE_TYPE_QUERY_METADATA);
	oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.addCapability(oFF.InACapabilities.V212_DATASOURCE_TYPE_QUERY);
};
oFF.InACapabilitiesProvider.supports = function(capabilityContainer, name, defaultValue)
{
	return defaultValue || oFF.notNull(capabilityContainer) && capabilityContainer.containsKey(name);
};
oFF.InACapabilitiesProvider.prototype.m_activeCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_activeDeserializationCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_additionalFeatureToggles = null;
oFF.InACapabilitiesProvider.prototype.m_clientFeatureToggleCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_clientMainCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_deserializationDocumentCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_dimensionExtensionCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_documentCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_providerType = null;
oFF.InACapabilitiesProvider.prototype.m_serverBetaCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_serverMainCapabilities = null;
oFF.InACapabilitiesProvider.prototype.m_serverMetadata = null;
oFF.InACapabilitiesProvider.prototype.m_serverPersistencyCapabilities = null;
oFF.InACapabilitiesProvider.prototype._sacFallback = function(serverMainCapabilities, serverBetaCapabilities)
{
	if (oFF.notNull(serverBetaCapabilities) && oFF.notNull(serverMainCapabilities))
	{
		let iterator = oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES.getKeysAsIterator();
		while (iterator.hasNext())
		{
			let capabilityToActivate = iterator.next();
			if (serverBetaCapabilities.containsKey(capabilityToActivate))
			{
				serverMainCapabilities.addCapability(capabilityToActivate);
			}
		}
	}
	return serverMainCapabilities;
};
oFF.InACapabilitiesProvider.prototype.activateDevCapabilities = function(featureToggleNames)
{
	if (oFF.notNull(featureToggleNames) && featureToggleNames.hasElements())
	{
		let serverBetaCapabilities = this.getServerBetaCapabilities();
		let serverMainCapabilities = this.getServerMainCapabilities();
		let activeMainCapabilities = this.getActiveCapabilities();
		let iterator = featureToggleNames.getIterator();
		let session = this.getSession();
		while (iterator.hasNext())
		{
			let featureToggleName = iterator.next();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(featureToggleName) && oFF.XString.containsString(featureToggleName, "."))
			{
				featureToggleName = oFF.XString.substring(featureToggleName, oFF.XString.indexOf(featureToggleName, ".") + 1, oFF.XString.size(featureToggleName));
			}
			if (serverBetaCapabilities.containsKey(featureToggleName) && oFF.InACapabilitiesProvider.isDevCapabilityValid(featureToggleName, session))
			{
				activeMainCapabilities.addCapability(featureToggleName);
			}
			if (serverMainCapabilities.containsKey(featureToggleName))
			{
				activeMainCapabilities.addCapability(featureToggleName);
			}
		}
	}
};
oFF.InACapabilitiesProvider.prototype.addCapabilitiesFromEnv = function(mainCapabilities)
{
	let environment = this.getSession().getEnvironment();
	let inaPlusCapability = environment.getVariable(oFF.XEnvironmentConstants.FIREFLY_ADD_INA_CAPABILITY);
	if (oFF.notNull(inaPlusCapability))
	{
		let plusCap = oFF.XStringTokenizer.splitString(inaPlusCapability, ",");
		let plusIterator = plusCap.getIterator();
		while (plusIterator.hasNext())
		{
			mainCapabilities.addCapability(plusIterator.next());
		}
	}
	let inaMinusCapability = environment.getVariable(oFF.XEnvironmentConstants.FIREFLY_REMOVE_INA_CAPABILITY);
	if (oFF.notNull(inaMinusCapability))
	{
		let minusCap = oFF.XStringTokenizer.splitString(inaMinusCapability, ",");
		let minusIterator = minusCap.getIterator();
		while (minusIterator.hasNext())
		{
			mainCapabilities.remove(minusIterator.next());
		}
	}
};
oFF.InACapabilitiesProvider.prototype.check = function(supportedCapabilities, featureToggle, capabilityName)
{
	if (this.getSession().hasFeature(featureToggle) || oFF.notNull(this.m_additionalFeatureToggles) && this.m_additionalFeatureToggles.contains(featureToggle))
	{
		supportedCapabilities.addCapability(capabilityName);
	}
};
oFF.InACapabilitiesProvider.prototype.checkButOnly = function(supportedCapabilities, featureToggle, capabilityName, actualSystemType, conditionalSystemType)
{
	if (actualSystemType.isTypeOf(conditionalSystemType))
	{
		this.check(supportedCapabilities, featureToggle, capabilityName);
	}
};
oFF.InACapabilitiesProvider.prototype.checkExt = function(supportedCapabilities, featureToggle, capabilityName, actualSystemType, conditionalSystemType)
{
	if (actualSystemType.isTypeOf(conditionalSystemType))
	{
		this.check(supportedCapabilities, featureToggle, capabilityName);
	}
	else
	{
		supportedCapabilities.addCapability(capabilityName);
	}
};
oFF.InACapabilitiesProvider.prototype.createFeatureToggleAnalyticsCapabilities = function(featureToggleCapabilities)
{
	let systemType = this.m_serverMetadata.getSystemDescription().getSystemType();
	this.checkExt(featureToggleCapabilities, oFF.FeatureToggleOlap.UNIFIED_DATACELLS, oFF.InACapabilities.C210_UNIFIED_DATA_CELLS, systemType, oFF.SystemType.HANA);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.NO_DATA_ACTIONS, oFF.InACapabilities.V128_NO_DATA_ACTIONS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.HIERARCHY_LEVEL, oFF.InACapabilities.V149_RESULTSET_HIERARCHY_LEVEL);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.NUMBER_AS_STRING, oFF.InACapabilities.V172_NUMBER_AS_STRING);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.UNIVERSAL_DISPLAY_HIERARCHY_ZERO_BASED, oFF.InACapabilities.V158_UNIVERSAL_DISPLAY_HIERARCHY_ZERO_BASED);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CUBE_CACHE, oFF.InACapabilities.V166_CUBE_CACHE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.EXT_KEYFIGURE_PROPERTIES, oFF.InACapabilities.V168_EXT_KEYFIGURE_PROPERTIES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.QDATA_CELL_MODEL_DEFAULTS, oFF.InACapabilities.V174_QDATA_CELL_MODEL_DEFAULTS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DISP_HIERARCHY_FIX_IN_FILTER, oFF.InACapabilities.V186_DISP_HIERARCHY_FIX_IN_FILTER);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CUSTOM_DIMENSION_2_FOR_AGILE_BI, oFF.InACapabilities.C211_CUSTOM_DIMENSION_2);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CUSTOM_DIMENSION_2_FOR_INA_MODEL, oFF.InACapabilities.C211_CUSTOM_DIMENSION_2);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MEMBER_VALUE_EXCEPTIONS, oFF.InACapabilities.V188_MEMBER_VALUE_EXCEPTIONS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DYN_MEMBERS_ON_NON_MEASURE_STRUCTURE, oFF.InACapabilities.V248_DYNAMIC_MEMBERS_ON_NON_MEASURE_STRUCTURE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RESULTSET_CELL_FORMAT_TYPE_SPECIFIC, oFF.InACapabilities.V268_RESULTSET_CELL_FORMAT_TYPE_SPECIFIC);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CUBE_BLENDING_N_QUERIES, oFF.InACapabilities.V214_CUBE_BLENDING_N_QUERIES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DATASOURCE_TYPE_QUERY_METADATA, oFF.InACapabilities.V210_DATASOURCE_TYPE_QUERY_METADATA);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DATASOURCE_TYPE_QUERY, oFF.InACapabilities.V212_DATASOURCE_TYPE_QUERY);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.TUPLES_OPERAND, oFF.InACapabilities.V216_TUPLES_OPERAND);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.UDH_ALIGNMENT, oFF.InACapabilities.V250_UDH_ALIGNMENT);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SID_PRESENTATION, oFF.InACapabilities.V232_SID_PRESENTATION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.METADATA_CUBE_RESPONSE_SUPPRESS_PROPERTIES, oFF.InACapabilities.V190_METADATA_CUBE_RESPONSE_SUPPRESS_PROPERTIES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.HIERARCHY_CATALOG, oFF.InACapabilities.V322_HIERARCHY_CATALOG);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.METADATA_DIMENSION_OTHERS, oFF.InACapabilities.V224_METADATA_DIMENSION_OTHERS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.METADATA_DIMENSION_IS_MODELED, oFF.InACapabilities.V226_METADATA_DIMENSION_IS_MODELED);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RESULTSET_CELL_MEASURE, oFF.InACapabilities.V264_RESULTSET_CELL_MEASURE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RESULTSETV2_METADATA_EXTENSION1, oFF.InACapabilities.V266_RESULTSETV2_METADATA_EXTENSION1);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CORRECT_DIMENSION_DESCRIPTION, oFF.InACapabilities.V198_DIMENSION_DESCRIPTION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SUPPRESS_SUPPLEMENTS, oFF.InACapabilities.V230_SUPPRESS_SUPPLEMENTS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.WINDOW_FUNCTION, oFF.InACapabilities.V218_WINDOW_FUNCTION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.HIERARCHY_PATH_PRESENTATION_TYPE, oFF.InACapabilities.V294_HIERARCHY_PATH_PRESENTATION_TYPE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DIMENSION_KEY_ATTRIBUTES, oFF.InACapabilities.V296_DIMENSION_KEY_ATTRIBUTES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.NAMED_CUSTOM_DIMENSION_MEMBER, oFF.InACapabilities.V236_NAMED_CUSTOM_DIMENSION_MEMBER);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.AUTO_VARIABLE_SUBMIT_CAPABILITY, oFF.InACapabilities.V286_AUTO_VARIABLE_SUBMIT);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.NULL_ZERO_SUPPRESSION, oFF.InACapabilities.V254_NULL_ZERO_SUPPRESSION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.INPUT_READINESS_WITH_NAVIGATIONAL_ATTRIBUTES, oFF.InACapabilities.V256_INPUT_READINESS_WITH_NAVIGATIONAL_ATTRIBUTES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.ITERATED_FORMULA, oFF.InACapabilities.V270_ITERATED_FORMULA);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CDS_PROJECTION_VIEWS, oFF.InACapabilities.V272_CDS_PROJECTION_VIEWS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CELL_DOCUMENT_ID, oFF.InACapabilities.V274_CELL_DOCUMENT_ID);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.TUPLE_COUNT_BEFORE_SLICING, oFF.InACapabilities.V298_PAGING_TUPLE_COUNT_BEFORE_SLICING);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.TEXT_IN_HIERARCHY, oFF.InACapabilities.V302_TEXT_IN_HIERARCHY);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.ASYNC_BLENDING_BATCH_REQUEST, oFF.InACapabilities.V308_ASYNC_BLENDING_BATCH_REQUEST);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MAINTAIN_VARIABLE_VARIANTS, oFF.InACapabilities.V320_MAINTAINS_VARIABLE_VARIANTS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DATA_CELL_CONTEXTS, oFF.InACapabilities.V324_DATA_CELL_CONTEXTS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.NAME_PATH, oFF.InACapabilities.V326_NAME_PATH);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DISPLAY_KEY_MIXED_COMPOUNDMENT, oFF.InACapabilities.V328_MIXED_DISPLAY_KEY);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SEMANTIC_OBJECT, oFF.InACapabilities.V332_SEMANTIC_OBJECT);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.ERROR_ABOVE_LEVEL, oFF.InACapabilities.V336_ERROR_ABOVE_LEVEL);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.BW_PERSISTED_INA, oFF.InACapabilities.V340_INA_PERSISTED);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.INAMODEL_EXTERNAL_DIMENSION, oFF.InACapabilities.V342_INAMODEL_EXTERNAL_DIMENSION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.INAMODEL_EXTERNAL_VALUE_HELP, oFF.InACapabilities.V344_INAMODEL_EXTERNAL_VALUE_HELP);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MAX_DRILL_LEVEL, oFF.InACapabilities.V346_MAX_DRILL_LEVEL);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SQL_TYPE_BOOLEAN, oFF.InACapabilities.V354_SQL_TYPE_BOOLEAN);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.STRUCTURE_ON_FREE_AXIS, oFF.InACapabilities.V356_STRUCTURE_ON_FREE_AXIS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.METADATA_HAS_EXTERNAL_HIERARCHIES, oFF.InACapabilities.V358_METADATA_HAS_EXTERNAL_HIERARCHIES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.EXCEPTION_THRESHOLD_NO_PRECISION, oFF.InACapabilities.V360_EXCEPTION_THRESHOLD_NO_PRECISION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RETURN_METADATA_EXTENSIONS, oFF.InACapabilities.V362_RETURN_METADATA_EXTENSIONS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_METADATA_RESULT_FORMAT_OPTIONS, oFF.InACapabilities.V368_METADATA_RESULT_FORMAT_OPTIONS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_LIGHTWEIGHT_METADATA, oFF.InACapabilities.V370_LIGHTWEIGHT_METADATA);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_VIRTUAL_DATA_SOURCE_TYPE_COLUMNS, oFF.InACapabilities.V372_VIRTUAL_DATA_SOURCE_TYPE_COLUMNS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_RESULTSET_NUMERIC_TYPES_AS_TEXT, oFF.InACapabilities.V375_RESULTSET_NUMERIC_TYPES_AS_TEXT);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MEASURE_DIMENSION_ID_ATTRIBUTE, oFF.InACapabilities.V376_MEASURE_DIMENSION_ID_ATTRIBUTE);
	this.checkButOnly(featureToggleCapabilities, oFF.FeatureToggleOlap.UNIQUE_AXIS_PROPERTIES_BW, oFF.InACapabilities.V382_UNIQUE_AXIS_PROPERTIES, systemType, oFF.SystemType.BW);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.UNIQUE_AXIS_PROPERTIES, oFF.InACapabilities.V382_UNIQUE_AXIS_PROPERTIES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_SPATIAL_TRANSFORM_DISTANCE_FILTER, oFF.InACapabilities.V384_MDS_SPATIAL_TRANSFORM_DISTANCE_FILTER);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RS_NUM_VALUES_WITH_INTERNAL_PRECISION, oFF.InACapabilities.V386_RS_NUM_VALUES_WITH_INTERNAL_PRECISION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DIMENSION_HIERARCHY_METADATA, oFF.InACapabilities.V388_DIMENSION_HIERARCHY_METADATA);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_UM_INHERITED_PROPS_HIGHER_PRIORITY, oFF.InACapabilities.V390_MDS_UM_INHERITED_PROPS_HIGHER_PRIORITY);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_CALCULATE_WITH_NULL_CELLS_UNIT_TYPE, oFF.InACapabilities.V392_MDS_CALCULATE_WITH_NULL_CELLS_UNIT_TYPE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RESULT_SET_CACHE, oFF.InACapabilities.V394_RESULT_SET_CACHE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CONDITIONS_WITH_VERSION_DIMENSION, oFF.InACapabilities.V397_CONDITIONS_WITH_VERSION_DIMENSION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.VALUE_HELP_HIERARCHY_PATH, oFF.InACapabilities.V402_VALUE_HELP_HIERARCHY_PATH);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SORTING_DEFAULTS, oFF.InACapabilities.V406_SORTING_DEFAULTS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.HIERARCHY_DEFAULTS, oFF.InACapabilities.V412_HIERARCHY_DEFAULTS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.OTHERS_FROM_CONDITIONS, oFF.InACapabilities.V414_OTHERS_FROM_CONDITIONS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.INPUT_ENABLEMENT_FILTER_SETTINGS, oFF.InACapabilities.V416_INPUT_ENABLEMENT_FILTER_SETTINGS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.UNIT_TRANSLATION, oFF.InACapabilities.V418_UNIT_TRANSLATION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MEASURE_MEMBER_UNIT_TRANSLATIONS, oFF.InACapabilities.V420_MEASURE_MEMBER_UNIT_TRANSLATIONS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.UDH_KEY, oFF.InACapabilities.V424_UDH_KEY);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.NUMERIC_SHIFT_PERCENT, oFF.InACapabilities.V426_NUMERIC_SHIFT_PERCENT);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_DISPLAY_ATTRIBUTES, oFF.InACapabilities.V428_DISPLAY_MDS_ATTRIBUTES);
	this.checkButOnly(featureToggleCapabilities, oFF.FeatureToggleOlap.IBP_DISPLAY_ATTRIBUTES, oFF.InACapabilities.V428_DISPLAY_MDS_ATTRIBUTES, systemType, oFF.SystemType.ABAP_MDS);
	this.checkButOnly(featureToggleCapabilities, oFF.FeatureToggleOlap.IBP_FILTER_CAPABILITY_EXTENDED, oFF.InACapabilities.V440_FILTER_CAPABILITY_EXTENDED, systemType, oFF.SystemType.ABAP_MDS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CUSTOM_DIMENSION_2_MEMBER_METADATA, oFF.InACapabilities.V430_CUSTOM_DIMENSION_2_MEMBER_MD);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MEMBER_UNIQUE_NAMES_COMPATIBILITY, oFF.InACapabilities.MEMBER_UNIQUE_NAMES_COMPATIBILITY);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.MDS_COMPOUND_KEY, oFF.InACapabilities.V434_MDS_COMPOUND_KEY);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CONDITIONS_WITH_HIDDEN_MEASURES, oFF.InACapabilities.V438_CONDITIONS_WITH_HIDDEN_MEASURES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.FILTER_CAPABILITY_EXTENDED, oFF.InACapabilities.V440_FILTER_CAPABILITY_EXTENDED);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RRI_2, oFF.InACapabilities.V444_RRI_2);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.TUPLES_OPERAND_FROM_DATA_SOURCE, oFF.InACapabilities.V450_TUPLES_OPERAND_FROM_DATA_SOURCE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SIMULATION, oFF.InACapabilities.V452_SIMULATION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.OTHERS_DETAILS_FROM_CONDITIONS, oFF.InACapabilities.V454_OTHERS_DETAILS_FROM_CONDITIONS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.INPUT_READINESS_FILTER, oFF.InACapabilities.V458_INPUT_READINESS_FILTER);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.FLEX_CLIENT_INFO, oFF.InACapabilities.V455_FLEX_CLIENT_INFO);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SORT_TUPLE_MEMBER_TYPE, oFF.InACapabilities.V461_SORT_TUPLE_MEMBER_TYPE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.RRI_3, oFF.InACapabilities.V463_RRI_3);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SUPPORTS_RUNNING_AGGREGATION, oFF.InACapabilities.V471_SUPPORTS_RUNNING_AGGREGATION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.AGGREGATIONS_FIRST_LAST_AVG_OF_DIMENSION, oFF.InACapabilities.V473_AGGREGATIONS_FIRST_LAST_AVG_OF_DIMENSION);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.FUNCTIONAL_VARIABLES, oFF.InACapabilities.V477_FUNCTIONAL_VARIABLES);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.CDM_VISIBILITY_FILTER, oFF.InACapabilities.V479_CDM_VISIBILITY_FILTER);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.BLENDING_CUSTOM_DIMENSION_1_NONE_AXIS, oFF.InACapabilities.V481_BLENDING_CUSTOM_DIMENSION_1_NONE_AXIS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.METADATA_NON_UNIQUE_DISPLAY_ATTRIBUTE, oFF.InACapabilities.V483_METADATA_NON_UNIQUE_DISPLAY_ATTRIBUTE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.BLENDING_TOTALS, oFF.InACapabilities.V485_BLENDING_TOTALS);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.ASYNC_BATCH_REQUEST_HEARTBEAT, oFF.InACapabilities.V487_ASYNC_BATCH_REQUEST_HEARTBEAT);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.DIMENSION_SEMANTIC_TYPE, oFF.InACapabilities.V489_DIMENSION_SEMANTIC_TYPE);
	this.check(featureToggleCapabilities, oFF.FeatureToggleOlap.SORTED_ITERATED_FORMULA, oFF.InACapabilities.V491_SORTED_ITERATED_FORMULA);
	return featureToggleCapabilities;
};
oFF.InACapabilitiesProvider.prototype.createFeatureToggleCapabilities = function(providerType)
{
	let container = oFF.CapabilityContainer.create("featureToggle");
	if (providerType === oFF.ProviderType.PLANNING_COMMAND || providerType === oFF.ProviderType.PLANNING_VALUE_HELP)
	{
		container = this.createFeatureTogglePlanningCapabilities(container);
	}
	else
	{
		container = this.createFeatureToggleAnalyticsCapabilities(container);
	}
	return container;
};
oFF.InACapabilitiesProvider.prototype.createFeatureTogglePlanningCapabilities = function(featureToggleCapabilities)
{
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C001_DATASOURCE_AT_SERVICE);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C012_ENCODED_RESULTSET);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C054_EXTENDED_SORT);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C066_SUBMIT_RETURNS_VARIABLE_VALUES);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C100_EXPAND_BOTTOM_UP);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C136_READ_MODES_V2);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C129_INITIAL_DRILL_LEVEL_RELATIVE);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C032_FAST_PATH);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C113_DATA_CELL_MIXED_VALUES);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C110_DEFINITION_RETURNS_VARIABLE_VALUES);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C169_DIMENSION_HIERARCHY_LEVELS);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C159_EXCEPTIONS_V2);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C019_EXTENDED_DIMENSION_TYPES);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C146_EXTENDED_VARIABLE_DEFINITION);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C186_F4_FILTER_FOR_TEXT_FIELD);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C125_MDS_LIKE_PAGING);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C173_METADATA_BASE_MEASURE_NAME);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C175_PRESENTATION_LENGTH);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C179_UNASSIGNED_NODE_AS_DEFINED_IN_QUERY);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C142_KEYFIGURE_HIERARCHIES);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C048_MEMBER_VISIBILITY);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C119_RESTRICTED_KEYFIGURES);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C036_ATTRIBUTE_HIERARCHY_HIERARCHY_FIELDS);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C035_HIERARCHY_NAVIGATION_COUNTER);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C020_NEW_VALUES_IMPLICIT_UNLOCK);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C021_NEW_VALUES_EXTENDED_FORMAT);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C005_OBTAINABILITY);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C026_QUERY_DATA_CELLS);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C049_RESULTSET_INTERVAL);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C017_SAP_DATE);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C009_STATEFUL_SERVER);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C037_SUPPLEMENTS);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C018_CUMMULATIVE);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C011_SET_OPERAND);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C002_VARIABLE_RE_SUBMIT);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.C045_ZERO_SUPPRESSION);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.V158_UNIVERSAL_DISPLAY_HIERARCHY_ZERO_BASED);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.V168_EXT_KEYFIGURE_PROPERTIES);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.V174_QDATA_CELL_MODEL_DEFAULTS);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.V186_DISP_HIERARCHY_FIX_IN_FILTER);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.V230_SUPPRESS_SUPPLEMENTS);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.V232_SID_PRESENTATION);
	featureToggleCapabilities.addCapability(oFF.InACapabilities.V322_HIERARCHY_CATALOG);
	return featureToggleCapabilities;
};
oFF.InACapabilitiesProvider.prototype.createMainAnalyticsCapabilities = function(mainCapabilities)
{
	mainCapabilities.addCapability(oFF.InACapabilities.C000_ATTRIBUTE_HIERARCHY);
	mainCapabilities.addCapability(oFF.InACapabilities.C001_DATASOURCE_AT_SERVICE);
	mainCapabilities.addCapability(oFF.InACapabilities.C002_VARIABLE_RE_SUBMIT);
	mainCapabilities.addCapability(oFF.InACapabilities.C003_CLIENT_CAPABILITIES);
	mainCapabilities.addCapability(oFF.InACapabilities.C004_METADATA_SERVICE);
	mainCapabilities.addCapability(oFF.InACapabilities.C005_OBTAINABILITY);
	mainCapabilities.addCapability(oFF.InACapabilities.C006_READ_MODE);
	mainCapabilities.addCapability(oFF.InACapabilities.C007_RESPONSE_FIXED_ATTRIBUTE_SEQUENCE);
	mainCapabilities.addCapability(oFF.InACapabilities.C008_SERVER_STRUCTURE_NAMES);
	mainCapabilities.addCapability(oFF.InACapabilities.C009_STATEFUL_SERVER);
	mainCapabilities.addCapability(oFF.InACapabilities.C010_STATEFUL_DATA_PROVIDER);
	mainCapabilities.addCapability(oFF.InACapabilities.C011_SET_OPERAND);
	mainCapabilities.addCapability(oFF.InACapabilities.C012_ENCODED_RESULTSET);
	mainCapabilities.addCapability(oFF.InACapabilities.C013_COMPLEX_FILTERS);
	mainCapabilities.addCapability(oFF.InACapabilities.C014_UNIFIED_REQUEST_SYNTAX);
	mainCapabilities.addCapability(oFF.InACapabilities.C015_SEMANTICAL_ERROR_TYPE);
	mainCapabilities.addCapability(oFF.InACapabilities.C016_EXT_HIERARCHY);
	mainCapabilities.addCapability(oFF.InACapabilities.C017_SAP_DATE);
	mainCapabilities.addCapability(oFF.InACapabilities.C018_CUMMULATIVE);
	mainCapabilities.addCapability(oFF.InACapabilities.C019_EXTENDED_DIMENSION_TYPES);
	mainCapabilities.addCapability(oFF.InACapabilities.C020_NEW_VALUES_IMPLICIT_UNLOCK);
	mainCapabilities.addCapability(oFF.InACapabilities.C021_NEW_VALUES_EXTENDED_FORMAT);
	mainCapabilities.addCapability(oFF.InACapabilities.C022_HIERARCHY_NAME_VARIABLE);
	mainCapabilities.addCapability(oFF.InACapabilities.C023_EXCEPTIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C024_EXCEPTION_SETTINGS);
	mainCapabilities.addCapability(oFF.InACapabilities.C025_RUN_AS_USER);
	mainCapabilities.addCapability(oFF.InACapabilities.C026_QUERY_DATA_CELLS);
	mainCapabilities.addCapability(oFF.InACapabilities.C027_RESULTSET_CELL_VALUE_TYPES);
	mainCapabilities.addCapability(oFF.InACapabilities.C028_METADATA_DIMENSION_GROUP);
	mainCapabilities.addCapability(oFF.InACapabilities.C029_RESULTSET_CELL_FORMAT_STRING);
	mainCapabilities.addCapability(oFF.InACapabilities.C030_UNIQUE_ATTRIBUTE_NAMES);
	mainCapabilities.addCapability(oFF.InACapabilities.C031_METADATA_IS_DISPLAY_ATTRIBUTE);
	mainCapabilities.addCapability(oFF.InACapabilities.C032_FAST_PATH);
	mainCapabilities.addCapability(oFF.InACapabilities.C033_ATTRIBUTE_HIERARCHY_UNIQUE_FIELDS);
	mainCapabilities.addCapability(oFF.InACapabilities.C034_HIERARCHY_KEY_TEXT_NAME);
	mainCapabilities.addCapability(oFF.InACapabilities.C035_HIERARCHY_NAVIGATION_COUNTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C036_ATTRIBUTE_HIERARCHY_HIERARCHY_FIELDS);
	mainCapabilities.addCapability(oFF.InACapabilities.C037_SUPPLEMENTS);
	mainCapabilities.addCapability(oFF.InACapabilities.C038_USE_EPM_VERSION);
	mainCapabilities.addCapability(oFF.InACapabilities.C039_DIMENSION_KIND_EPM_VERSION);
	mainCapabilities.addCapability(oFF.InACapabilities.C040_DIMENSION_KIND_CHART_OF_ACCOUNTS);
	mainCapabilities.addCapability(oFF.InACapabilities.C041_SP9);
	mainCapabilities.addCapability(oFF.InACapabilities.C042_TECHNICAL_AXIS);
	mainCapabilities.addCapability(oFF.InACapabilities.C043_DIMENSION_VALUEHELP_PROPERTY);
	mainCapabilities.addCapability(oFF.InACapabilities.C044_PAGING_TUPLE_COUNT_TOTAL);
	mainCapabilities.addCapability(oFF.InACapabilities.C045_ZERO_SUPPRESSION);
	mainCapabilities.addCapability(oFF.InACapabilities.C046_MANUAL_INPUT);
	mainCapabilities.addCapability(oFF.InACapabilities.C047_MULTI_SOURCE);
	mainCapabilities.addCapability(oFF.InACapabilities.C048_MEMBER_VISIBILITY);
	mainCapabilities.addCapability(oFF.InACapabilities.C049_RESULTSET_INTERVAL);
	mainCapabilities.addCapability(oFF.InACapabilities.C050_REPORT_REPORT_INTERFACE);
	mainCapabilities.addCapability(oFF.InACapabilities.C051_HIERARCHY_PATH);
	mainCapabilities.addCapability(oFF.InACapabilities.C052_METADATA_HIERARCHY_STRUCTURE);
	mainCapabilities.addCapability(oFF.InACapabilities.C053_METADATA_HIERARCHY_LEVELS);
	mainCapabilities.addCapability(oFF.InACapabilities.C054_EXTENDED_SORT);
	mainCapabilities.addCapability(oFF.InACapabilities.C055_CUSTOM_DIMENSION_MEMBER_EXECUTION_STEP);
	mainCapabilities.addCapability(oFF.InACapabilities.C056_HIERARCHY_PATH_UNIQUE_NAME);
	mainCapabilities.addCapability(oFF.InACapabilities.C057_HIERARCHY_DATA_AND_EXCLUDING_FILTERS);
	mainCapabilities.addCapability(oFF.InACapabilities.C058_HIERARCHY_SELECTION_AS_FLAT_SELECTION);
	mainCapabilities.addCapability(oFF.InACapabilities.C059_VISIBILITY_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C060_CELL_VALUE_OPERAND);
	mainCapabilities.addCapability(oFF.InACapabilities.C061_SPATIAL_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C062_SPATIAL_FILTER_WITH_SRID);
	mainCapabilities.addCapability(oFF.InACapabilities.C063_SPATIAL_TRANSFORMATIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C064_SPATIAL_CLUSTERING);
	mainCapabilities.addCapability(oFF.InACapabilities.C065_HIERARCHY_TRAPEZOID_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C066_SUBMIT_RETURNS_VARIABLE_VALUES);
	mainCapabilities.addCapability(oFF.InACapabilities.C067_EXTENDED_DIMENSIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C068_EXTENDED_DIMENSIONS_FIELD_MAPPING);
	mainCapabilities.addCapability(oFF.InACapabilities.C069_EXTENDED_DIMENSIONS_JOIN_COLUMNS);
	mainCapabilities.addCapability(oFF.InACapabilities.C070_EXTENDED_DIMENSIONS_OUTER_JOIN);
	mainCapabilities.addCapability(oFF.InACapabilities.C071_EXTENDED_DIMENSIONS_SKIP);
	mainCapabilities.addCapability(oFF.InACapabilities.C072_METADATA_DEFAULT_RESULT_ALIGNMENT_BOTTOM);
	mainCapabilities.addCapability(oFF.InACapabilities.C073_IGNORE_EXTERNAL_DIMENSIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C074_RETURN_RESTRICTED_AND_CALCULATED_MEMBERS_IN_READ_MODE_BOOKED);
	mainCapabilities.addCapability(oFF.InACapabilities.C075_PERSIST_RESULTSET);
	mainCapabilities.addCapability(oFF.InACapabilities.C076_RESTRICTED_MEMBERS_CONVERT_TO_FLAT_SELECTION);
	mainCapabilities.addCapability(oFF.InACapabilities.C077_VARIABLES);
	mainCapabilities.addCapability(oFF.InACapabilities.C078_TOTALS);
	mainCapabilities.addCapability(oFF.InACapabilities.C079_ENCODED_RESULTSET_2);
	mainCapabilities.addCapability(oFF.InACapabilities.C080_RESULTSET_STATE);
	mainCapabilities.addCapability(oFF.InACapabilities.C081_RESULTSET_CELL_NUMERIC_SHIFT);
	mainCapabilities.addCapability(oFF.InACapabilities.C082_RESULTSET_CELL_DATA_TYPE);
	mainCapabilities.addCapability(oFF.InACapabilities.C083_ORDER_BY);
	mainCapabilities.addCapability(oFF.InACapabilities.C084_METADATA_REPOSITORY_SUFFIX);
	mainCapabilities.addCapability(oFF.InACapabilities.C085_METADATA_CUBE_QUERY);
	mainCapabilities.addCapability(oFF.InACapabilities.C086_MAX_RESULT_RECORDS);
	mainCapabilities.addCapability(oFF.InACapabilities.C087_IGNORE_UNIT_OF_NULL_IN_AGGREGATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C088_SET_NULL_CELLS_UNIT_TYPE);
	mainCapabilities.addCapability(oFF.InACapabilities.C089_DIMENSION_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C090_DIMENSION_F4_SELECTION_WITH_COMPOUNDMENT);
	mainCapabilities.addCapability(oFF.InACapabilities.C091_CUBE_BLENDING);
	mainCapabilities.addCapability(oFF.InACapabilities.C092_CUBE_BLENDING_AGGREGATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C093_REMOTE_BLENDING);
	mainCapabilities.addCapability(oFF.InACapabilities.C094_CUBE_BLENDING_CUSTOM_MEMBERS);
	mainCapabilities.addCapability(oFF.InACapabilities.C095_CUBE_BLENDING_MEMBER_SORTING);
	mainCapabilities.addCapability(oFF.InACapabilities.C096_CUBE_BLENDING_OUT_OF_CONTEXT);
	mainCapabilities.addCapability(oFF.InACapabilities.C097_CUBE_BLENDING_PROPERTIES);
	mainCapabilities.addCapability(oFF.InACapabilities.C098_CUBE_BLENDING_READ_MODE);
	mainCapabilities.addCapability(oFF.InACapabilities.C099_METADATA_DATA_CATEGORY);
	mainCapabilities.addCapability(oFF.InACapabilities.C100_EXPAND_BOTTOM_UP);
	mainCapabilities.addCapability(oFF.InACapabilities.C101_CONDITIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C102_AGGREGATION_NOP_NULL);
	mainCapabilities.addCapability(oFF.InACapabilities.C103_AGGREGATION_NOP_NULL_ZERO);
	mainCapabilities.addCapability(oFF.InACapabilities.C104_EXCEPTION_AGGREGATION_DIMENSIONS_AND_FORMULAS);
	mainCapabilities.addCapability(oFF.InACapabilities.C105_EXCEPTION_AGGREGATION_AVGNULL_SELECTION_MEMBER);
	mainCapabilities.addCapability(oFF.InACapabilities.C106_EXCEPTION_AGGREGATION_COUNTNULL_SELECTION_MEMBER);
	mainCapabilities.addCapability(oFF.InACapabilities.C107_STATISTICAL_AGGREGATIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C108_MDS_EXPRESSION);
	mainCapabilities.addCapability(oFF.InACapabilities.C109_TOTALS_AFTER_VISIBILITY_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C110_DEFINITION_RETURNS_VARIABLE_VALUES);
	mainCapabilities.addCapability(oFF.InACapabilities.C111_HIERARCHY_NAVIGATION_DELTA_MODE);
	mainCapabilities.addCapability(oFF.InACapabilities.C112_FLAT_KEY_ON_HIERARCHY_DISPLAY);
	mainCapabilities.addCapability(oFF.InACapabilities.C113_DATA_CELL_MIXED_VALUES);
	mainCapabilities.addCapability(oFF.InACapabilities.C114_VALUES_ROUNDED);
	mainCapabilities.addCapability(oFF.InACapabilities.C115_ATTRIBUTE_VALUE_LOOKUP);
	mainCapabilities.addCapability(oFF.InACapabilities.C116_METADATA_HIERARCHY_UNIQUE_NAME);
	mainCapabilities.addCapability(oFF.InACapabilities.C117_CANCEL_RUNNING_REQUESTS);
	mainCapabilities.addCapability(oFF.InACapabilities.C118_CALCULATED_KEYFIGURES);
	mainCapabilities.addCapability(oFF.InACapabilities.C119_RESTRICTED_KEYFIGURES);
	mainCapabilities.addCapability(oFF.InACapabilities.C120_CURRENT_MEMBER_FILTER_EXTENSION);
	mainCapabilities.addCapability(oFF.InACapabilities.C121_RETURN_ERROR_FOR_INVALID_QUERYMODEL);
	mainCapabilities.addCapability(oFF.InACapabilities.C122_ORIGINAL_TEXTS);
	mainCapabilities.addCapability(oFF.InACapabilities.C123_CUSTOM_DIMENSION_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C124_AVERAGE_COUNT_IGNORE_NULL_ZERO);
	mainCapabilities.addCapability(oFF.InACapabilities.C125_MDS_LIKE_PAGING);
	mainCapabilities.addCapability(oFF.InACapabilities.C126_HIERARCHY_LEVEL_OFFSET_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C127_CE_SCENARIO_PARAMS);
	mainCapabilities.addCapability(oFF.InACapabilities.C128_METADATA_DIMENSION_CAN_BE_AGGREGATED);
	mainCapabilities.addCapability(oFF.InACapabilities.C129_INITIAL_DRILL_LEVEL_RELATIVE);
	mainCapabilities.addCapability(oFF.InACapabilities.C130_MDM_HIERARCHY_WITH_DRILL_LEVEL);
	mainCapabilities.addCapability(oFF.InACapabilities.C131_NO_HIERARCHY_PATH_ON_FLAT_DIMENSIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C132_DATA_REFRESH);
	mainCapabilities.addCapability(oFF.InACapabilities.C133_RESULTSET_AXIS_TYPE);
	mainCapabilities.addCapability(oFF.InACapabilities.C134_EPM_RESPONSE_LIST_SHARED_VERSIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C135_VARIABLE_VARIANTS);
	mainCapabilities.addCapability(oFF.InACapabilities.C136_READ_MODES_V2);
	mainCapabilities.addCapability(oFF.InACapabilities.C137_LIST_REPORTING);
	mainCapabilities.addCapability(oFF.InACapabilities.C138_DIMENSION_TYPE_TIME);
	mainCapabilities.addCapability(oFF.InACapabilities.C139_UNIVERSAL_DISPLAY_HIERARCHIES);
	mainCapabilities.addCapability(oFF.InACapabilities.C140_CATALOG_SERVICE_V20);
	mainCapabilities.addCapability(oFF.InACapabilities.C141_RETURNED_DATA_SELECTION);
	mainCapabilities.addCapability(oFF.InACapabilities.C142_KEYFIGURE_HIERARCHIES);
	mainCapabilities.addCapability(oFF.InACapabilities.C143_EXTENDED_DIMENSIONS_JOIN_CARDINALITY);
	mainCapabilities.addCapability(oFF.InACapabilities.C144_METADATA_DATASOURCE_DEFINITION_VALIDATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C145_DATA_REFRESH_AND_DATA_TOPICALITY);
	mainCapabilities.addCapability(oFF.InACapabilities.C146_EXTENDED_VARIABLE_DEFINITION);
	mainCapabilities.addCapability(oFF.InACapabilities.C147_INPUT_READINESS_STATES);
	mainCapabilities.addCapability(oFF.InACapabilities.C148_CUSTOM_MEASURE_SORTORDER);
	mainCapabilities.addCapability(oFF.InACapabilities.C149_CUSTOM_SORT);
	mainCapabilities.addCapability(oFF.InACapabilities.C150_CARTESIAN_FILTER_INTERSECT);
	mainCapabilities.addCapability(oFF.InACapabilities.C151_SUPPRESS_KEYFIGURE_CALCULATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C152_IGNORE_UNIT_OF_ZERO_VALUE_IN_AGGREGATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C153_VARIANCE_OPERATOR);
	mainCapabilities.addCapability(oFF.InACapabilities.C154_MD_DS_DEF_VAL_EXPOSE_DS);
	mainCapabilities.addCapability(oFF.InACapabilities.C155_CLIENT_INFO);
	mainCapabilities.addCapability(oFF.InACapabilities.C156_EXTENDED_DIMENSION_CHANGE_DEFAULT_RENAMING_AND_DESCRIPTION);
	mainCapabilities.addCapability(oFF.InACapabilities.C157_EXTENDED_DIMENSION_COPY_ALL_HIERARCHIES);
	mainCapabilities.addCapability(oFF.InACapabilities.C158_FIX_METADATA_HIERARCHY_ATTRIBUTES);
	mainCapabilities.addCapability(oFF.InACapabilities.C159_EXCEPTIONS_V2);
	mainCapabilities.addCapability(oFF.InACapabilities.C160_QUERY_CURRENCY_TRANSLATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C161_STRUCTURE_RESTRICTIONS_IN_VALUE_HELP);
	mainCapabilities.addCapability(oFF.InACapabilities.C162_ASYNC_METADATA_BATCH_REQUEST);
	mainCapabilities.addCapability(oFF.InACapabilities.C163_HIERARCHY_VIRTUAL_ROOT_NODE);
	mainCapabilities.addCapability(oFF.InACapabilities.C164_HIERARCHY_REST_NODE);
	mainCapabilities.addCapability(oFF.InACapabilities.C165_SPATIAL_CHOROPLETH);
	mainCapabilities.addCapability(oFF.InACapabilities.C166_INA_CURRENT_MEMBER);
	mainCapabilities.addCapability(oFF.InACapabilities.C167_FORMULA_OPERATORS_CATALOG);
	mainCapabilities.addCapability(oFF.InACapabilities.C168_READMODE_RELATED_BOOOKED);
	mainCapabilities.addCapability(oFF.InACapabilities.C169_DIMENSION_HIERARCHY_LEVELS);
	mainCapabilities.addCapability(oFF.InACapabilities.C170_MDM_HIERARCHY_DRILL_LEVEL);
	mainCapabilities.addCapability(oFF.InACapabilities.C171_CALCULATED_DIMENSION);
	mainCapabilities.addCapability(oFF.InACapabilities.C172_PLANNING_ON_CALCULATED_DIMENSION);
	mainCapabilities.addCapability(oFF.InACapabilities.C173_METADATA_BASE_MEASURE_NAME);
	mainCapabilities.addCapability(oFF.InACapabilities.C174_REQUEST_TIME_ZONE);
	mainCapabilities.addCapability(oFF.InACapabilities.C175_PRESENTATION_LENGTH);
	mainCapabilities.addCapability(oFF.InACapabilities.C176_VISUAL_AGGREGATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C177_DATA_ENTRY_ON_UNBOOKED);
	mainCapabilities.addCapability(oFF.InACapabilities.C178_MASTER_READ_MODE_BY_DIMENSION_GROUPING);
	mainCapabilities.addCapability(oFF.InACapabilities.C179_UNASSIGNED_NODE_AS_DEFINED_IN_QUERY);
	mainCapabilities.addCapability(oFF.InACapabilities.C180_REMOTE_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C181_FIX_HIERARCHY_FLAT_KEYS);
	mainCapabilities.addCapability(oFF.InACapabilities.C182_CUBE_BLENDING_PERSISTENCE_TYPE);
	mainCapabilities.addCapability(oFF.InACapabilities.C183_GET_PARAMETERS);
	mainCapabilities.addCapability(oFF.InACapabilities.C184_VERSION_PRIVILEGES);
	mainCapabilities.addCapability(oFF.InACapabilities.C185_VALUE_HELP_WITH_ATTRIBUTES);
	mainCapabilities.addCapability(oFF.InACapabilities.C186_F4_FILTER_FOR_TEXT_FIELD);
	mainCapabilities.addCapability(oFF.InACapabilities.C187_DIMENSION_DEFAULT_MEMBER);
	mainCapabilities.addCapability(oFF.InACapabilities.C188_LOCALE_SORTING);
	mainCapabilities.addCapability(oFF.InACapabilities.C189_DIMENSION_VISIBILITY);
	mainCapabilities.addCapability(oFF.InACapabilities.C190_METADATA_SEMANTIC_TYPE);
	mainCapabilities.addCapability(oFF.InACapabilities.C191_DYNAMIC_VARIABLES);
	mainCapabilities.addCapability(oFF.InACapabilities.C192_VIRTUAL_DS_VARIABLE_VALUES);
	mainCapabilities.addCapability(oFF.InACapabilities.C193_INA_MODEL_METADATA);
	mainCapabilities.addCapability(oFF.InACapabilities.C194_METADATA_EXTENDED_DIMENSION_VISIBILITY);
	mainCapabilities.addCapability(oFF.InACapabilities.C195_RESULTSET_UNIT_INDEX);
	mainCapabilities.addCapability(oFF.InACapabilities.C196_REMOTE_BLENDING_BW);
	mainCapabilities.addCapability(oFF.InACapabilities.C197_DYN_RESTRICTION_ON_FORMULA);
	mainCapabilities.addCapability(oFF.InACapabilities.C198_OPERATOR_TOTALS);
	mainCapabilities.addCapability(oFF.InACapabilities.C199_AV_CAPABILITY_VARIABLE_MASKING);
	mainCapabilities.addCapability(oFF.InACapabilities.C200_COMPLEX_TUPLE_FILTER);
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.FUSION_SERVICE) === false)
	{
		mainCapabilities.addCapability(oFF.InACapabilities.C201_DETAILED_RESPONSE_EXPANSION);
	}
	mainCapabilities.addCapability(oFF.InACapabilities.C202_CUSTOM_HIERARCHY);
	mainCapabilities.addCapability(oFF.InACapabilities.C203_CUSTOM_MEMBER_KEY_SORT_ORDER);
	mainCapabilities.addCapability(oFF.InACapabilities.C204_UNIVERSAL_DISPLAY_HIERARCHY_CUSTOM_DIM);
	mainCapabilities.addCapability(oFF.InACapabilities.C205_RESUlTSET_EFFECTIVE_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C206_REMOTE_BLENDING_METADATA);
	mainCapabilities.addCapability(oFF.InACapabilities.C207_BATCH_RS_STREAMING);
	mainCapabilities.addCapability(oFF.InACapabilities.C208_EXCEPTION_AGGREGATION_FIRST_LAST_SELECTION_MEMBER);
	mainCapabilities.addCapability(oFF.InACapabilities.C209_RESULTSET_CELL_EXPLAIN);
	mainCapabilities.addCapability(oFF.InACapabilities.C211_CUSTOM_DIMENSION_2);
	mainCapabilities.addCapability(oFF.InACapabilities.C212_SORT_NEW_VALUES);
	mainCapabilities.addCapability(oFF.InACapabilities.C213_ROOT_ORPHANS_AFTER_VISIBILITY_FILTER);
	mainCapabilities.addCapability(oFF.InACapabilities.C214_IS_VIRTUAL_DESCRIPTION);
	mainCapabilities.addCapability(oFF.InACapabilities.C215_MEASURE_MEMBER_DEFINITION);
	mainCapabilities.addCapability(oFF.InACapabilities.C216_MEASURE_MEMBER_DETAILS);
	mainCapabilities.addCapability(oFF.InACapabilities.C217_MEASURE_MEMBER_TYPE);
	mainCapabilities.addCapability(oFF.InACapabilities.C218_CURRENCY_TRANSLATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C219_MEASURE_MEMBER_CURRENCY_TRANSLATIONS);
	mainCapabilities.addCapability(oFF.InACapabilities.C220_UNDEFINED_TUPLE_COUNT_TOTALS);
	mainCapabilities.addCapability(oFF.InACapabilities.C221_UNIVERSAL_MODEL);
	mainCapabilities.addCapability(oFF.InACapabilities.C222_SET_OPERAND_CURRENT_MEMBER_SINGLE_NAVIGATION);
	mainCapabilities.addCapability(oFF.InACapabilities.C223_MULTIPLE_EX_AGG_DIMS_IN_CALC_PLAN);
	this.addCapabilitiesFromEnv(mainCapabilities);
};
oFF.InACapabilitiesProvider.prototype.createMainCapabilities = function(providerType)
{
	let container = oFF.CapabilityContainer.create("main");
	if (providerType === oFF.ProviderType.PLANNING_COMMAND || providerType === oFF.ProviderType.PLANNING_VALUE_HELP)
	{
		this.createMainPlanningCapabilities(container);
	}
	else
	{
		this.createMainAnalyticsCapabilities(container);
	}
	return container;
};
oFF.InACapabilitiesProvider.prototype.createMainPlanningCapabilities = function(mainCapabilities)
{
	mainCapabilities.addCapability(oFF.InACapabilities.C000_ATTRIBUTE_HIERARCHY);
	mainCapabilities.addCapability(oFF.InACapabilities.C003_CLIENT_CAPABILITIES);
	mainCapabilities.addCapability(oFF.InACapabilities.C022_HIERARCHY_NAME_VARIABLE);
	this.addCapabilitiesFromEnv(mainCapabilities);
};
oFF.InACapabilitiesProvider.prototype.doesServerSatisfyMinCustomDimension2CapabilitySet = function()
{
	let analyticMain = this.m_serverMetadata.getMetadataForService(oFF.ServerService.ANALYTIC);
	if (oFF.isNull(analyticMain))
	{
		return false;
	}
	let sacBaselineLevel3Capabilities = this.getSACBaselineHANALevel3Capabilities();
	for (let i = 0; i < sacBaselineLevel3Capabilities.size(); i++)
	{
		if (!analyticMain.containsKey(sacBaselineLevel3Capabilities.get(i)))
		{
			return false;
		}
	}
	return true;
};
oFF.InACapabilitiesProvider.prototype.exportActiveCapabilities = function(requestStructure)
{
	let list = this.exportActiveCapabilitiesAsList();
	if (oFF.notNull(list))
	{
		requestStructure.put("Capabilities", list);
	}
	return list;
};
oFF.InACapabilitiesProvider.prototype.exportActiveCapabilitiesAsList = function()
{
	let intersectCapabilities = null;
	let activeMainCapabilities = this.getActiveCapabilities();
	if (oFF.notNull(activeMainCapabilities))
	{
		if (activeMainCapabilities.containsKey(oFF.InACapabilities.C003_CLIENT_CAPABILITIES))
		{
			let sortedCapabilityNames = activeMainCapabilities.getSortedCapabilityNames();
			intersectCapabilities = oFF.PrFactory.createList();
			intersectCapabilities.addAllStrings(sortedCapabilityNames);
		}
	}
	return intersectCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getActiveCapabilities = function()
{
	if (oFF.isNull(this.m_activeCapabilities))
	{
		let activeServerCapabilities = null;
		let serverMainCapabilities = this.getServerMainCapabilities();
		let serverBetaCapabilities = this.getServerBetaCapabilities();
		let clientMainCapabilities = this.getClientMainCapabilities();
		let clientFeatureToggleCapabilities = this.getClientFeatureToggleCapabilities();
		if (this.getSession().hasFeature(oFF.FeatureToggleOlap.SIMPLIFIED_CAPABILITY_MERGE))
		{
			if (oFF.notNull(serverMainCapabilities))
			{
				if (this.getSession().hasFeature(oFF.FeatureToggleOlap.DEVELOPMENT_MODE))
				{
					activeServerCapabilities = serverMainCapabilities.union(serverBetaCapabilities);
				}
				else
				{
					let sacCapabilities = serverBetaCapabilities.intersect(oFF.InACapabilitiesProvider.SAC_DEV_CAPABILITIES);
					activeServerCapabilities = serverMainCapabilities.union(sacCapabilities);
				}
			}
			let activeClientCapabilities = clientMainCapabilities.union(clientFeatureToggleCapabilities);
			if (oFF.notNull(activeServerCapabilities))
			{
				this.m_activeCapabilities = activeServerCapabilities.intersect(activeClientCapabilities);
			}
		}
		else
		{
			activeServerCapabilities = this._sacFallback(serverMainCapabilities, serverBetaCapabilities);
			if (oFF.notNull(activeServerCapabilities))
			{
				let activeMainCapabilities = activeServerCapabilities.intersect(clientMainCapabilities);
				if (this.getSession().hasFeature(oFF.FeatureToggleOlap.DEVELOPMENT_MODE))
				{
					if (oFF.notNull(serverMainCapabilities))
					{
						activeServerCapabilities = serverMainCapabilities.union(serverBetaCapabilities);
					}
				}
				let activeFeatureToggleCapabilities = activeServerCapabilities.intersect(clientFeatureToggleCapabilities);
				this.m_activeCapabilities = activeMainCapabilities.union(activeFeatureToggleCapabilities);
			}
		}
		if (this.m_serverMetadata.getSystemDescription().getSystemType().isTypeOf(oFF.SystemType.HANA) && oFF.notNull(this.m_activeCapabilities) && this.m_activeCapabilities.containsKey(oFF.InACapabilities.C211_CUSTOM_DIMENSION_2) && (oFF.ServerVersionComparator.compare(this.m_serverMetadata.getVersion(), "1.0.122.14.00000000") === 1 || !this.doesServerSatisfyMinCustomDimension2CapabilitySet()))
		{
			this.m_activeCapabilities.remove(oFF.InACapabilities.C211_CUSTOM_DIMENSION_2);
		}
	}
	return this.m_activeCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getClientFeatureToggleCapabilities = function()
{
	return this.m_clientFeatureToggleCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getClientMainCapabilities = function()
{
	return this.m_clientMainCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getDimensionExtensionCapabilities = function()
{
	return this.m_dimensionExtensionCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getDocumentCapabilities = function()
{
	return this.m_documentCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getProviderType = function()
{
	return this.m_providerType;
};
oFF.InACapabilitiesProvider.prototype.getQueryCapabilities = function()
{
	let newCapabilities = oFF.QCapabilities.create();
	if (oFF.notNull(this.m_serverMetadata))
	{
		newCapabilities.setSystemType(this.m_serverMetadata.getSystemDescription().getSystemType());
		newCapabilities.setSystemName(this.m_serverMetadata.getSystemDescription().getSystemName());
		newCapabilities.setServerMetadataVersion(this.m_serverMetadata.getVersion());
		let activeCapabilities = this.getActiveCapabilities();
		oFF.InACapabilitiesProvider.importCapabilities(activeCapabilities, newCapabilities);
	}
	return newCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getSACBaselineHANALevel3Capabilities = function()
{
	let baselineLevel3Capabilities = oFF.XList.create();
	baselineLevel3Capabilities.add("AttributeValueLookup");
	baselineLevel3Capabilities.add("CellValueOperand");
	baselineLevel3Capabilities.add("SupportsIgnoreExternalDimensions");
	baselineLevel3Capabilities.add("SetOperandCurrentMemberSingleNavigation");
	baselineLevel3Capabilities.add("CurrentMemberFilterExtension");
	baselineLevel3Capabilities.add("ExceptionAggregationDimsAndFormulas");
	baselineLevel3Capabilities.add("CubeBlending");
	baselineLevel3Capabilities.add("CubeBlendingProperties");
	baselineLevel3Capabilities.add("CubeBlendingMemberSorting");
	baselineLevel3Capabilities.add("CubeBlendingCustomMembers");
	baselineLevel3Capabilities.add("CubeBlendingReadMode");
	baselineLevel3Capabilities.add("CubeBlendingOutOfContext");
	baselineLevel3Capabilities.add("SupportsCubeBlendingAggregation");
	baselineLevel3Capabilities.add("ExceptionSettings");
	baselineLevel3Capabilities.add("AggregationNOPNULL");
	baselineLevel3Capabilities.add("AggregationNOPNULLZERO");
	baselineLevel3Capabilities.add("MultipleExAggDimsInCalcPlan");
	baselineLevel3Capabilities.add("ExtendedDimensionsChangeDefaultRenamingAndDescription");
	baselineLevel3Capabilities.add("ExtendedDimensionsCopyAllHierarchies");
	baselineLevel3Capabilities.add("FixMetaDataHierarchyAttributes");
	baselineLevel3Capabilities.add("RemoteBlending");
	baselineLevel3Capabilities.add("CalculatedDimension");
	baselineLevel3Capabilities.add("PlanningOnCalculatedDimension");
	baselineLevel3Capabilities.add("CustomDimension2");
	baselineLevel3Capabilities.add("ResultSetUnitIndex");
	baselineLevel3Capabilities.add("ExceptionAggregationCountNullInSelectionMember");
	baselineLevel3Capabilities.add("ExceptionAggregationAverageNullInSelectionMember");
	baselineLevel3Capabilities.add("ExceptionAggregationFirstLastInSelectionMember");
	return baselineLevel3Capabilities;
};
oFF.InACapabilitiesProvider.prototype.getServerBetaCapabilities = function()
{
	return this.m_serverBetaCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getServerCapabilitiesForProviderType = function(providerType, getBeta)
{
	let serviceName = oFF.QInAConverter.lookupServiceNameForProvider(providerType);
	if (oFF.isNull(serviceName))
	{
		serviceName = oFF.QInAConverter.lookupFallbackServiceNameForProvider(providerType);
	}
	if (oFF.notNull(serviceName))
	{
		let capaContainer = getBeta ? this.m_serverMetadata.getBetaMetadataForService(serviceName) : this.m_serverMetadata.getMetadataForService(serviceName);
		return capaContainer;
	}
	return null;
};
oFF.InACapabilitiesProvider.prototype.getServerMainCapabilities = function()
{
	return this.m_serverMainCapabilities;
};
oFF.InACapabilitiesProvider.prototype.getServerMetadata = function()
{
	return this.m_serverMetadata;
};
oFF.InACapabilitiesProvider.prototype.importDeserializationDocumentCapabilities = function(document)
{
	this.m_deserializationDocumentCapabilities = oFF.CapabilityContainer.create("Document");
	let analytics = document.getStructureByKey("Analytics");
	if (oFF.notNull(analytics))
	{
		let capabilities = analytics.getListByKey("Capabilities");
		if (oFF.notNull(capabilities))
		{
			for (let i = 0; i < capabilities.size(); i++)
			{
				let value = capabilities.getStringAt(i);
				this.m_deserializationDocumentCapabilities.addCapability(value);
			}
		}
	}
};
oFF.InACapabilitiesProvider.prototype.releaseObject = function()
{
	this.m_activeDeserializationCapabilities = oFF.XObjectExt.release(this.m_activeDeserializationCapabilities);
	this.m_serverPersistencyCapabilities = oFF.XObjectExt.release(this.m_serverPersistencyCapabilities);
	this.m_deserializationDocumentCapabilities = oFF.XObjectExt.release(this.m_deserializationDocumentCapabilities);
	this.m_dimensionExtensionCapabilities = oFF.XObjectExt.release(this.m_dimensionExtensionCapabilities);
	this.m_documentCapabilities = oFF.XObjectExt.release(this.m_documentCapabilities);
	this.m_clientMainCapabilities = oFF.XObjectExt.release(this.m_clientMainCapabilities);
	this.m_clientFeatureToggleCapabilities = oFF.XObjectExt.release(this.m_clientFeatureToggleCapabilities);
	this.m_serverMainCapabilities = oFF.XObjectExt.release(this.m_serverMainCapabilities);
	this.m_serverBetaCapabilities = oFF.XObjectExt.release(this.m_serverBetaCapabilities);
	this.m_activeCapabilities = oFF.XObjectExt.release(this.m_activeCapabilities);
	oFF.DfSessionContext.prototype.releaseObject.call( this );
};
oFF.InACapabilitiesProvider.prototype.setupExt = function(session, serverMetadata, providerType, featureToggles)
{
	this.setupSessionContext(session);
	this.m_serverMetadata = serverMetadata;
	this.m_providerType = providerType;
	this.m_additionalFeatureToggles = featureToggles;
	this.m_clientMainCapabilities = this.createMainCapabilities(providerType);
	if (oFF.notNull(this.m_serverMetadata))
	{
		this.m_clientFeatureToggleCapabilities = this.createFeatureToggleCapabilities(providerType);
	}
	if (oFF.notNull(this.m_serverMetadata) && oFF.notNull(this.m_providerType))
	{
		let mainCapabilities = this.getServerCapabilitiesForProviderType(this.m_providerType, false);
		this.m_serverMainCapabilities = oFF.XObjectExt.cloneIfNotNull(mainCapabilities);
		let betaCapabilitiesForAnalytic = this.getServerCapabilitiesForProviderType(this.m_providerType, true);
		this.m_serverBetaCapabilities = oFF.XObjectExt.cloneIfNotNull(betaCapabilitiesForAnalytic);
		let dimensionExtensionCapabilities = this.getServerCapabilitiesForProviderType(oFF.ProviderType.DIMENSION_EXTENSION, false);
		this.m_dimensionExtensionCapabilities = oFF.XObjectExt.cloneIfNotNull(dimensionExtensionCapabilities);
		let documentCapabilities = this.getServerCapabilitiesForProviderType(oFF.ProviderType.DOCUMENTS, false);
		this.m_documentCapabilities = oFF.XObjectExt.cloneIfNotNull(documentCapabilities);
	}
};
oFF.InACapabilitiesProvider.prototype.toString = function()
{
	let buffer = oFF.XStringBuffer.create();
	if (oFF.notNull(this.m_serverMainCapabilities))
	{
		buffer.appendLine("=== Server Main Capabilities ===");
		buffer.appendLine(this.m_serverMainCapabilities.toString());
	}
	if (oFF.notNull(this.m_serverBetaCapabilities))
	{
		buffer.appendLine("=== Server Beta Capabilities ===");
		buffer.appendLine(this.m_serverBetaCapabilities.toString());
	}
	if (oFF.notNull(this.m_clientMainCapabilities))
	{
		buffer.appendLine("=== Client Main Capabilities ===");
		buffer.appendLine(this.m_clientMainCapabilities.toString());
	}
	if (oFF.notNull(this.m_clientFeatureToggleCapabilities))
	{
		buffer.appendLine("=== Client FeatureToggle Capabilities ===");
		buffer.appendLine(this.m_clientFeatureToggleCapabilities.toString());
	}
	if (oFF.notNull(this.m_activeCapabilities))
	{
		buffer.appendLine("=== Active Capabilities ===");
		buffer.appendLine(this.m_activeCapabilities.toString());
	}
	if (oFF.notNull(this.m_serverPersistencyCapabilities))
	{
		buffer.appendLine("=== Server Persistency Capabilities ===");
		buffer.appendLine(this.m_serverPersistencyCapabilities.toString());
	}
	return buffer.toString();
};

oFF.OlapEnvStateManager = function() {};
oFF.OlapEnvStateManager.prototype = new oFF.AbstractOlapEnvQueryManagerHandler();
oFF.OlapEnvStateManager.prototype._ff_c = "OlapEnvStateManager";

oFF.OlapEnvStateManager.create = function(olapEnvArea, session)
{
	let stateManager = new oFF.OlapEnvStateManager();
	stateManager.setupStateManager(olapEnvArea, session);
	return stateManager;
};
oFF.OlapEnvStateManager.prototype.m_jsonParser = null;
oFF.OlapEnvStateManager.prototype.m_olapEnvStates = null;
oFF.OlapEnvStateManager.prototype.m_releaseQueryManagersEnabled = false;
oFF.OlapEnvStateManager.prototype.m_stateCache = null;
oFF.OlapEnvStateManager.prototype.m_useIncludeMode = false;
oFF.OlapEnvStateManager.prototype.addNewStateToCache = function(modCounter, rootStructure, qmName, olapStateId)
{
	let stateId = oFF.XStringUtils.concatenate2(qmName, oFF.XInteger.convertToString(modCounter));
	let stateString = rootStructure.isEmpty() ? "" : oFF.PrUtils.serialize(rootStructure, false, false, 0);
	let stackEntry = oFF.StateStackEntry.create(stateId, stateString);
	stackEntry.getOlapStateRefs().add(olapStateId);
	this.m_stateCache.add(stackEntry);
	return oFF.ComponentStateRef.create(modCounter, stateId);
};
oFF.OlapEnvStateManager.prototype.applyDocumentState = function(syncType, listener, customIdentifier, stateId)
{
	let olapState = this.m_olapEnvStates.getByKey(stateId);
	if (oFF.isNull(olapState))
	{
		return null;
	}
	return oFF.DocumentUpdateAction.createAndRun(syncType, listener, customIdentifier, this, olapState);
};
oFF.OlapEnvStateManager.prototype.clearDocumentState = function(stateId)
{
	let olapState = this.m_olapEnvStates.remove(stateId);
	if (oFF.notNull(olapState))
	{
		this.releaseRef(olapState.getSharedObjectsState(), stateId);
		this.releaseRef(olapState.getFilterManagerState(), stateId);
		let iterator = olapState.getQueryManagersState().getValuesAsReadOnlyList().getIterator();
		while (iterator.hasNext())
		{
			this.releaseRef(iterator.next(), stateId);
		}
		olapState.getQueryManagersState().clear();
	}
};
oFF.OlapEnvStateManager.prototype.dumpState = function(stateId)
{
	let dump = oFF.PrFactory.createStructure();
	let olapState = this.m_olapEnvStates.getByKey(stateId);
	let filterStructure = this.m_jsonParser.parse(this.m_stateCache.getByKey(olapState.getFilterManagerState().getStateId()).getState());
	dump.put("fm", filterStructure);
	let qmNames = olapState.getQueryManagersState().getKeysAsIterator();
	while (qmNames.hasNext())
	{
		let qmName = qmNames.next();
		let state = this.getQmState(olapState, qmName);
		let inaState;
		if (oFF.XStringUtils.isNotNullAndNotEmpty(state))
		{
			inaState = this.m_jsonParser.parse(state);
		}
		else
		{
			inaState = oFF.PrFactory.createStructure();
		}
		dump.put(qmName, inaState);
	}
	return dump;
};
oFF.OlapEnvStateManager.prototype.getQmState = function(olapState, qmName)
{
	let qmState = olapState.getQueryManagersState().getByKey(qmName);
	if (oFF.isNull(qmState))
	{
		return null;
	}
	return this.m_stateCache.getByKey(qmState.getStateId()).getState();
};
oFF.OlapEnvStateManager.prototype.getStateCache = function()
{
	return this.m_stateCache;
};
oFF.OlapEnvStateManager.prototype.getStateWithModeCounter = function(modCounter, qmName, olapStateId)
{
	let stateId = oFF.XStringUtils.concatenate2(qmName, oFF.XInteger.convertToString(modCounter));
	let state = this.m_stateCache.getByKey(stateId);
	if (oFF.notNull(state))
	{
		state.getOlapStateRefs().add(olapStateId);
		return oFF.ComponentStateRef.create(modCounter, stateId);
	}
	return null;
};
oFF.OlapEnvStateManager.prototype.hasToBeIgnored = function(queryManager)
{
	let tagging = queryManager.getTagging();
	let ignoredByTag = this.m_useIncludeMode ? !tagging.containsKey(oFF.QStateConstants.TAG_UNDO_INCLUDE) : tagging.containsKey(oFF.QStateConstants.TAG_UNDO_IGNORE);
	ignoredByTag = ignoredByTag || tagging.containsKey(oFF.QStateConstants.TAG_HAS_TRANSIENT_DEPS);
	return ignoredByTag || queryManager.isShallow() || queryManager.isBasedOnVirtualDataSource() || queryManager.getLifeCycleState() !== oFF.LifeCycleState.ACTIVE;
};
oFF.OlapEnvStateManager.prototype.isReleaseQueryManagersEnabled = function()
{
	return this.m_releaseQueryManagersEnabled;
};
oFF.OlapEnvStateManager.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier) {};
oFF.OlapEnvStateManager.prototype.recordBlendableQueryManagerState = function(blendableQueryManager, olapStateId)
{
	let ignore = this.hasToBeIgnored(blendableQueryManager);
	let modCounter = 0;
	if (!ignore)
	{
		modCounter = blendableQueryManager.getModCounter();
	}
	let state = this.getStateWithModeCounter(modCounter, blendableQueryManager.getName(), olapStateId);
	if (oFF.isNull(state))
	{
		let rootStructure = oFF.PrFactory.createStructure();
		if (!ignore)
		{
			blendableQueryManager.getTagging().put(oFF.QStateConstants.TAG_REPO_FORMAT_FOR_UNDO_REDO, "true");
			let element = blendableQueryManager.serializeToElement(oFF.QModelFormat.INA_REPOSITORY).asStructure();
			blendableQueryManager.getTagging().remove(oFF.QStateConstants.TAG_REPO_FORMAT_FOR_UNDO_REDO);
			rootStructure.put(oFF.QStateConstants.QUERY_MODEL, element);
			rootStructure.put(oFF.QStateConstants.MANAGER_TAGS, element.getByKey(oFF.QStateConstants.MANAGER_TAGS));
			let queryManagersIter = blendableQueryManager.getAllQueryManagers().getIterator();
			let qmExtFilters = rootStructure.putNewList(oFF.QStateConstants.QUERY_MANAGER_EXTERNAL_FILTERS);
			while (queryManagersIter.hasNext())
			{
				let leafQueryManager = queryManagersIter.next();
				let qmExtFilter = qmExtFilters.addNewStructure();
				qmExtFilter.putString(oFF.QStateConstants.MANAGER_DATASET_ID, leafQueryManager.getQueryModel().getDatasetId());
				this.recordUsedExternalFilters(leafQueryManager, qmExtFilter);
			}
		}
		state = this.addNewStateToCache(modCounter, rootStructure, blendableQueryManager.getName(), olapStateId);
	}
	return state;
};
oFF.OlapEnvStateManager.prototype.recordClientQueryObjectManagerState = function()
{
	return null;
};
oFF.OlapEnvStateManager.prototype.recordDocumentState = function()
{
	let olapEnvState = oFF.OlapEnvState.create();
	let olapStateId = oFF.XGuid.getGuid();
	let filterManagerState = this.recordFilterManagerState(olapStateId);
	olapEnvState.setFilterManagerState(filterManagerState);
	let sharedObjectsState = this.recordClientQueryObjectManagerState();
	olapEnvState.setSharedObjectsState(sharedObjectsState);
	let queryManagers = this.getOlapEnv().getAllAreaQueryManager();
	oFF.XCollectionUtils.forEach(queryManagers, (queryManager) => {
		let element;
		if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
		{
			element = this.recordBlendableQueryManagerState(queryManager, olapStateId);
		}
		else
		{
			element = this.recordQueryManagerState(queryManager, olapStateId);
		}
		olapEnvState.getQueryManagersState().put(queryManager.getName(), element);
	});
	this.m_olapEnvStates.put(olapStateId, olapEnvState);
	return olapStateId;
};
oFF.OlapEnvStateManager.prototype.recordFilterManagerState = function(olapStateId)
{
	let filterManager = this.getOlapEnv().getFilterManager();
	let modCounter = filterManager.getModCounter();
	let state = this.getStateWithModeCounter(modCounter, "filterManager", olapStateId);
	if (oFF.notNull(state))
	{
		return state;
	}
	let rootStructure = filterManager.serializeToElement(oFF.QModelFormat.INA_REPOSITORY).asStructure();
	return this.addNewStateToCache(filterManager.getModCounter(), rootStructure, "filterManager", olapStateId);
};
oFF.OlapEnvStateManager.prototype.recordQueryManagerState = function(queryManager, olapStateId)
{
	let queryModel = queryManager.getQueryModelBase();
	let ignore = this.hasToBeIgnored(queryManager);
	let modCounter = 0;
	if (!ignore)
	{
		modCounter = queryModel.getModCounter();
	}
	let state = this.getStateWithModeCounter(modCounter, queryManager.getName(), olapStateId);
	if (oFF.isNull(state))
	{
		let rootStructure = oFF.PrFactory.createStructure();
		if (!ignore)
		{
			queryManager.getTagging().put(oFF.QStateConstants.TAG_REPO_FORMAT_FOR_UNDO_REDO, "true");
			let element = queryManager.serializeToElement(oFF.QModelFormat.INA_REPOSITORY).asStructure();
			queryManager.getTagging().remove(oFF.QStateConstants.TAG_REPO_FORMAT_FOR_UNDO_REDO);
			let qmodel = element.getByKey(oFF.QStateConstants.QUERY_MODEL);
			rootStructure.put(oFF.QStateConstants.QUERY_MODEL, qmodel);
			rootStructure.put(oFF.QStateConstants.MANAGER_TAGS, element.getByKey(oFF.QStateConstants.MANAGER_TAGS));
			rootStructure.putString(oFF.QStateConstants.MANAGER_DATASET_ID, queryModel.getDatasetId());
			rootStructure.putString(oFF.QStateConstants.MANAGER_SYSTEM_NAME, queryManager.getSystemName());
			this.recordUsedExternalFilters(queryManager, rootStructure);
		}
		state = this.addNewStateToCache(modCounter, rootStructure, queryManager.getName(), olapStateId);
	}
	return state;
};
oFF.OlapEnvStateManager.prototype.recordUsedExternalFilters = function(queryManager, inaQueryManager)
{
	let externalFilters = queryManager.getQueryModel().getFilter().getLinkedFilters();
	let inaUsedFilters = inaQueryManager.putNewList("OlapFilters");
	let itExtFilter = externalFilters.getKeysAsIterator();
	while (itExtFilter.hasNext())
	{
		let usedFilter = inaUsedFilters.addNewStructure();
		let key = itExtFilter.next();
		usedFilter.putString("Name", key);
		usedFilter.putString("Id", externalFilters.getByKey(key).getUniqueId());
	}
};
oFF.OlapEnvStateManager.prototype.releaseObject = function()
{
	this.m_stateCache = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_stateCache);
	this.m_jsonParser = oFF.XObjectExt.release(this.m_jsonParser);
	this.m_olapEnvStates = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_olapEnvStates);
	oFF.AbstractOlapEnvQueryManagerHandler.prototype.releaseObject.call( this );
};
oFF.OlapEnvStateManager.prototype.releaseRef = function(stateRef, olapStateId)
{
	if (oFF.isNull(stateRef))
	{
		return;
	}
	let byKey = this.m_stateCache.getByKey(stateRef.getStateId());
	if (oFF.notNull(byKey))
	{
		byKey.getOlapStateRefs().removeElement(olapStateId);
		if (byKey.getOlapStateRefs().isEmpty())
		{
			this.m_stateCache.removeElement(byKey);
		}
	}
};
oFF.OlapEnvStateManager.prototype.setUseIncludeMode = function(useIncludeMode)
{
	this.m_useIncludeMode = useIncludeMode;
};
oFF.OlapEnvStateManager.prototype.setupStateManager = function(olapEnvArea, session)
{
	this.setupQueryManagerHandler(olapEnvArea);
	this.m_stateCache = oFF.XLinkedMap.createLinkedMap();
	this.m_olapEnvStates = oFF.XHashMapByString.create();
	this.m_jsonParser = oFF.JsonParserFactory.newInstance();
	this.m_releaseQueryManagersEnabled = oFF.isNull(session) || session.hasFeature(oFF.FeatureToggleOlap.UNDO_RELEASE_QUERY_MANAGERS);
	this.setUseIncludeMode(oFF.notNull(session) && session.hasFeature(oFF.FeatureToggleOlap.UNDO_USE_ALLOW_LIST));
};
oFF.OlapEnvStateManager.prototype.updateDocumentState = function(stateId)
{
	let olapState = this.m_olapEnvStates.getByKey(stateId);
	if (olapState.getFilterManagerState() === null)
	{
		let filterManagerState = this.recordFilterManagerState(stateId);
		olapState.setFilterManagerState(filterManagerState);
	}
	if (olapState.getSharedObjectsState() === null)
	{
		let sharedObjectsState = this.recordClientQueryObjectManagerState();
		olapState.setSharedObjectsState(sharedObjectsState);
	}
	let queryManagers = this.getOlapEnv().getAllAreaQueryManager();
	oFF.XCollectionUtils.forEach(queryManagers, (queryManager) => {
		let name = queryManager.getName();
		let qmState = this.getQmState(olapState, name);
		if (oFF.XStringUtils.isNullOrEmpty(qmState))
		{
			let element;
			if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
			{
				element = this.recordBlendableQueryManagerState(queryManager, stateId);
			}
			else
			{
				element = this.recordQueryManagerState(queryManager, stateId);
			}
			olapState.getQueryManagersState().put(queryManager.getName(), element);
		}
	});
};

oFF.PreQueryExecutor = function() {};
oFF.PreQueryExecutor.prototype = new oFF.MessageManager();
oFF.PreQueryExecutor.prototype._ff_c = "PreQueryExecutor";

oFF.PreQueryExecutor.create = function(queryManager)
{
	let preQueryExecutor = new oFF.PreQueryExecutor();
	preQueryExecutor.setupSessionContext(null);
	preQueryExecutor.m_queryManager = queryManager;
	preQueryExecutor.m_messageReceivers = oFF.XList.create();
	return preQueryExecutor;
};
oFF.PreQueryExecutor.prototype.m_messageReceivers = null;
oFF.PreQueryExecutor.prototype.m_preQueryExecutedListener = null;
oFF.PreQueryExecutor.prototype.m_preQueryManager = null;
oFF.PreQueryExecutor.prototype.m_queryManager = null;
oFF.PreQueryExecutor.prototype.addMessageReceiver = function(messageReceiver)
{
	if (oFF.notNull(messageReceiver))
	{
		this.m_messageReceivers.add(messageReceiver);
	}
};
oFF.PreQueryExecutor.prototype.hasModelPrequeries = function(preQueryModel)
{
	let hasPreQueries = this.hasPrequeries(preQueryModel);
	if (!hasPreQueries)
	{
		preQueryModel.generateTransientObjects();
		hasPreQueries = this.hasPrequeries(preQueryModel);
		preQueryModel.destroyTransientObjects();
	}
	return hasPreQueries;
};
oFF.PreQueryExecutor.prototype.hasPrequeries = function(preQueryModel)
{
	return oFF.XCollectionUtils.hasElements(preQueryModel.getPreQueries()) || oFF.XCollectionUtils.contains(preQueryModel.getLoadedDimensions(), (dim) => {
		return dim.getDimensionType().isTypeOf(oFF.DimensionType.FORMULA_CALCULATED_DIMENSION);
	});
};
oFF.PreQueryExecutor.prototype.isStreamingEnabled = function()
{
	let connectionContainer = this.m_preQueryManager.getServiceConfig().getConnectionContainer();
	if (oFF.notNull(connectionContainer))
	{
		let batchRequestManager = connectionContainer.getBatchRequestManager();
		if (oFF.notNull(batchRequestManager))
		{
			return batchRequestManager.isRsStreamingEnabled();
		}
	}
	return false;
};
oFF.PreQueryExecutor.prototype.onPreQueryExecuted = function(extResult, isRemotePreQuerySerialization)
{
	let queryModel = this.m_preQueryManager.getQueryModel();
	if (oFF.notNull(queryModel) && !queryModel.isReleased())
	{
		queryModel.addQueryModelIdToMessages(extResult.getMessages());
		if (isRemotePreQuerySerialization || this.isStreamingEnabled())
		{
			for (let i = 0; i < this.m_messageReceivers.size(); i++)
			{
				this.m_messageReceivers.get(i).copyAllMessages(extResult);
			}
		}
		this.m_messageReceivers.clear();
	}
};
oFF.PreQueryExecutor.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (oFF.notNull(customIdentifier) && oFF.XString.isEqual(customIdentifier.toString(), "RemotePreQuerySerialization"))
	{
		this.onPreQueryExecuted(extResult, true);
		this.m_preQueryExecutedListener.onPreQueryExecuted();
	}
	else
	{
		this.onPreQueryExecuted(extResult, false);
	}
};
oFF.PreQueryExecutor.prototype.processExecutionAsPreQueryInBatch = function(batchSystemName, preQueryName, messageReceiver)
{
	if (this.m_queryManager.getActiveResultSetContainer().getSyncState() === oFF.SyncState.PROCESSING)
	{
		this.addMessageReceiver(messageReceiver);
		return;
	}
	let tmpResultSetTransportEnabled = this.m_queryManager.isResultSetTransportEnabled();
	this.m_queryManager.setResultSetTransportEnabled(false);
	if (oFF.XString.isEqual(batchSystemName, this.m_queryManager.getSystemName()))
	{
		this.m_preQueryManager = this.m_queryManager;
		this.addMessageReceiver(messageReceiver);
		this.m_queryManager.setPreQueryName(preQueryName);
		this.m_queryManager.processQueryExecution(oFF.SyncType.NON_BLOCKING, this, null);
		this.restoreData(tmpResultSetTransportEnabled, null);
	}
	else
	{
		let service = this.m_queryManager;
		let tmpConnection = service.getConnection();
		service.setConnection(tmpConnection.getConnectionPool().getConnection(batchSystemName));
		this.m_queryManager.setPreQueryName(preQueryName);
		this.m_queryManager.processQueryExecutionAsRemotePreQuery(oFF.SyncType.NON_BLOCKING, null, null);
		this.restoreData(tmpResultSetTransportEnabled, tmpConnection);
	}
};
oFF.PreQueryExecutor.prototype.processExecutionRuntimePrequery = function(syncType, runtimeQuery, preQueryExecutedListener)
{
	let generateRemoteQuery = runtimeQuery.generateRemoteQuery(this.m_queryManager);
	if (generateRemoteQuery.hasErrors())
	{
		let errorCollection = oFF.ExtResult.createWithExternalMessages(null, generateRemoteQuery);
		preQueryExecutedListener.onFunctionExecuted(errorCollection, null, runtimeQuery);
		return oFF.SyncActionExtRes.createSyncAction(null, generateRemoteQuery);
	}
	let connectionPool = this.m_queryManager.getApplication().getConnectionPool();
	let remoteConnection = connectionPool.getConnection(runtimeQuery.getSystemName());
	let systemDescription = remoteConnection.getSystemDescription();
	let remoteFunction = remoteConnection.newRpcFunction(systemDescription.getSystemType().getInAPath());
	remoteFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
	let rpcRequest = remoteFunction.getRpcRequest();
	rpcRequest.setSapPassportConnectionId(this.m_queryManager.getInstanceId());
	rpcRequest.setRequestStructure(generateRemoteQuery.getData());
	return remoteFunction.processFunctionExecution(syncType, preQueryExecutedListener, runtimeQuery);
};
oFF.PreQueryExecutor.prototype.releaseObject = function()
{
	oFF.MessageManager.prototype.releaseObject.call( this );
	this.m_queryManager = null;
	this.m_preQueryManager = null;
	this.m_preQueryExecutedListener = null;
	this.m_messageReceivers = oFF.XObjectExt.release(this.m_messageReceivers);
};
oFF.PreQueryExecutor.prototype.restoreData = function(resultSetTransportEnabled, connectionContainer)
{
	if (oFF.notNull(connectionContainer))
	{
		this.m_queryManager.setConnection(connectionContainer);
	}
	this.m_queryManager.getActiveResultSetContainer().setResultSetTransportEnabled(resultSetTransportEnabled);
	this.m_queryManager.setPreQueryName(null);
};
oFF.PreQueryExecutor.prototype.serializeAsRemotePreQuery = function(preQueryManager, syncType, mainSystemName)
{
	let queryModel = preQueryManager.getQueryModelBase();
	queryModel.getUniversalDisplayHierarchiesBase().updateIncludedDimensions();
	queryModel.generateTransientObjects();
	queryModel.getDrillManager().checkRootNodeFetching();
	let persistenceIdentifier = this.updateResultSetPersistenceTarget(preQueryManager, mainSystemName);
	queryModel.destroyTransientObjects();
	preQueryManager.setResultSetPersistenceIdentifier(persistenceIdentifier);
	let resultSetSyncState = preQueryManager.getResultSetSyncState();
	if (resultSetSyncState === oFF.SyncState.OUT_OF_SYNC || resultSetSyncState === oFF.SyncState.PROCESSING)
	{
		this.m_preQueryManager = preQueryManager;
		let cache = preQueryManager.getOlapEnv().getCachedRemoteBlendingData(persistenceIdentifier);
		if (oFF.notNull(cache))
		{
			preQueryManager.getActiveResultSetContainer().setSerializedData(cache.getView(), cache.getCube());
		}
		else if (syncType === oFF.SyncType.BLOCKING)
		{
			let syncAction;
			let connection = preQueryManager.getConnection();
			if (connection.isBatchModeEnabled() && this.hasModelPrequeries(preQueryManager.getQueryModelBase()))
			{
				connection.getConnectionPool().disableBatchMode(oFF.SyncType.NON_BLOCKING, preQueryManager.getSystemName());
				syncAction = preQueryManager.processQueryExecutionAsRemotePreQuery(oFF.SyncType.BLOCKING, null, null);
				connection.getConnectionPool().enableBatchMode(preQueryManager.getSystemName());
			}
			else
			{
				syncAction = preQueryManager.processQueryExecutionAsRemotePreQuery(oFF.SyncType.BLOCKING, null, null);
			}
			this.addMessageReceiver(this);
			this.onPreQueryExecuted(syncAction, true);
		}
		else
		{
			this.addMessageReceiver(this);
			preQueryManager.processQueryExecutionAsRemotePreQuery(syncType, this, oFF.XStringValue.create("RemotePreQuerySerialization"));
			return false;
		}
	}
	else if (resultSetSyncState === oFF.SyncState.IN_SYNC_WITH_ERROR)
	{
		this.addAllMessages(preQueryManager.getActiveResultSetContainer());
	}
	return this.isValid();
};
oFF.PreQueryExecutor.prototype.serializeRemotePreQueries = function(syncType, mainSystemName, preQueries, preQueryExecutedListener)
{
	this.clearMessages();
	this.m_preQueryExecutedListener = preQueryExecutedListener;
	if (oFF.XCollectionUtils.hasElements(preQueries))
	{
		for (let i = 0; i < preQueries.size(); i++)
		{
			let preQueryManager = preQueries.get(i).getObject().getQueryManager();
			let preQueryExecutor = preQueryManager.getPreQueryExecutor();
			if (!preQueryExecutor.serializeRemotePreQueries(syncType, preQueryManager.getSystemName(), preQueryManager.getQueryModel().getPreQueries(), preQueryExecutedListener))
			{
				this.addAllMessages(preQueryExecutor);
				return false;
			}
			if (!oFF.XString.isEqual(mainSystemName, preQueryManager.getSystemName()))
			{
				if (!this.serializeAsRemotePreQuery(preQueryManager, syncType, mainSystemName))
				{
					return false;
				}
			}
		}
	}
	return this.isValid();
};
oFF.PreQueryExecutor.prototype.updateResultSetPersistenceTarget = function(queryManager, batchSystemName)
{
	let batchSystemDescription = queryManager.getApplication().getSystemLandscape().getSystemDescription(batchSystemName);
	if (oFF.notNull(batchSystemDescription))
	{
		if (batchSystemDescription.isSystemMappingValid(queryManager.getSystemDescription()))
		{
			let systemMapping = queryManager.getSystemDescription().getSystemMapping(batchSystemName);
			queryManager.setResultSetPersistanceTargetTable(systemMapping.getSerializeTable());
			queryManager.setResultSetPersistanceTargetSchema(systemMapping.getSerializeSchema());
		}
		else
		{
			queryManager.setResultSetPersistanceTargetTable(null);
			queryManager.setResultSetPersistanceTargetSchema(null);
			return oFF.BlendingSource.createPersistenceIdentifierForPreQuery(queryManager, false);
		}
	}
	return oFF.BlendingSource.createPersistenceIdentifierForPreQuery(queryManager, true);
};

oFF.BlendableQMPersistedInAExportAction = function() {};
oFF.BlendableQMPersistedInAExportAction.prototype = new oFF.SyncAction();
oFF.BlendableQMPersistedInAExportAction.prototype._ff_c = "BlendableQMPersistedInAExportAction";

oFF.BlendableQMPersistedInAExportAction.create = function(blendableQueryManager)
{
	let runtimeBlendedQueryManagerAction = new oFF.BlendableQMPersistedInAExportAction();
	runtimeBlendedQueryManagerAction.setupAction(null, null, null, blendableQueryManager);
	return runtimeBlendedQueryManagerAction;
};
oFF.BlendableQMPersistedInAExportAction.prototype.addSecondaryInaToDependentQueries = function(remoteQueryManager, localSystemDescription, remoteSystemDescription, dependentQueries)
{
	let bNeedToClearIdentifier = !remoteQueryManager.getConvenienceCommands().isTypeOfBw();
	let identifier = null;
	if (bNeedToClearIdentifier)
	{
		identifier = remoteQueryManager.getResultSetPersistenceIdentifier();
		remoteQueryManager.setResultSetPersistenceIdentifier(null);
	}
	let secondaryInaQuery = remoteQueryManager.serializeToElement(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA);
	if (!localSystemDescription.isSystemMappingValid(remoteSystemDescription))
	{
		dependentQueries.add(oFF.DependentPersistedQueryInfo.create(remoteQueryManager.getSystemName(), this.generateRemoteQuery(secondaryInaQuery, null, null)));
	}
	else
	{
		dependentQueries.add(oFF.DependentPersistedQueryInfo.create(remoteQueryManager.getSystemName(), this.generateRemoteQuery(secondaryInaQuery, remoteSystemDescription.getSystemMapping(localSystemDescription.getSystemName()), identifier)));
	}
	if (bNeedToClearIdentifier)
	{
		remoteQueryManager.setResultSetPersistenceIdentifier(identifier);
	}
};
oFF.BlendableQMPersistedInAExportAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onBlendableQMPersistedInAResult(extResult, data, customIdentifier);
};
oFF.BlendableQMPersistedInAExportAction.prototype.generateRemoteQuery = function(originalQuery, systemMapping, persistenceIdentifier)
{
	let convertedQuery = oFF.PrUtils.createDeepCopy(originalQuery);
	let batchQuery = convertedQuery.getStructureByKey(oFF.ConnectionConstants.INA_BATCH);
	let inaRemoteContext;
	if (oFF.notNull(batchQuery))
	{
		let queryIter = batchQuery.getIterator();
		while (queryIter.hasNext())
		{
			let subquery = queryIter.next();
			inaRemoteContext = oFF.InARuntimeUtils.getRequestContext(subquery);
			let definitionStructure = oFF.PrUtils.getStructureProperty(inaRemoteContext, "Definition");
			let featureRequestStructure = oFF.PrUtils.getStructureProperty(definitionStructure, "ResultSetFeatureRequest");
			if (!featureRequestStructure.getBooleanByKeyExt(oFF.InAQueryMergeConstants.QY_RETURN_EMPTY_JSON_RESULTSET, false))
			{
				this.updatePersistencyStructure(convertedQuery, systemMapping, persistenceIdentifier);
			}
		}
	}
	else
	{
		this.updatePersistencyStructure(convertedQuery, systemMapping, persistenceIdentifier);
	}
	return convertedQuery;
};
oFF.BlendableQMPersistedInAExportAction.prototype.onPostQueryExecution = function()
{
	let blendableQueryManager = this.getActionContext();
	let blendableResultSetContainer = blendableQueryManager.getActiveResultSetContainer();
	if (!blendableResultSetContainer.hasErrors())
	{
		this.persistInAResult(blendableResultSetContainer.getRuntimeQueryManager());
	}
	this.endSync();
};
oFF.BlendableQMPersistedInAExportAction.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.addAllMessages(extResult);
};
oFF.BlendableQMPersistedInAExportAction.prototype.persistInAResult = function(runtimeQueryManager)
{
	let blendingDefinition = runtimeQueryManager.getQueryModel().getDataSource().getBlendingDefinition();
	let blendingHost = blendingDefinition.getBlendingHost();
	let blendingSources = oFF.BlendingUtils.getLeafBlendingSources(blendingDefinition);
	let dependentQueries = oFF.XList.create();
	let remoteQueryManagersTagged = oFF.XList.create();
	for (let i = 0; i < blendingSources.size(); i++)
	{
		let source = blendingSources.get(i);
		let remoteQueryManager = source.getQueryManager();
		if (remoteQueryManager.getConvenienceCommands().isTypeOfBw() && !remoteQueryManager.getModelCapabilities().supportsAutoVariableSubmit())
		{
			return;
		}
	}
	for (let i = 0; i < blendingSources.size(); i++)
	{
		let source = blendingSources.get(i);
		let remoteQueryManager = source.getQueryManager();
		let localSystemDescription = blendingHost.getSystemDescription();
		let remoteSystemDescription = remoteQueryManager.getSystemDescription();
		remoteQueryManager.getQueryModel().generateTransientObjects();
		let preQueries = remoteQueryManager.getQueryModel().getPreQueries();
		if (oFF.notNull(preQueries))
		{
			for (let j = 0; j < preQueries.size(); j++)
			{
				let preQuery = preQueries.get(j);
				let preQueryModel = preQuery.getObject();
				if (!oFF.XString.isEqual(preQueryModel.getSystemName(), remoteQueryManager.getSystemName()))
				{
					this.addWarning(oFF.ErrorCodes.PERSISTED_INA_REMOTE_MODEL_WITH_PREQUERIES_NOT_SUPPORTED, "Prequeries from different system are not supported with remote blend model.");
					this.setData(oFF.BlendableQMPersistedInAResult.create(null, oFF.XList.create(), runtimeQueryManager, blendingHost.getSystemName()));
					this.endSync();
					remoteQueryManager.getQueryModel().destroyTransientObjects();
					return;
				}
			}
		}
		if (source.isRemoteSource() && oFF.notNull(remoteSystemDescription))
		{
			let enabledAutoSubmitForPersistedIna = false;
			let originalVariableProcessorState = remoteQueryManager.getVariableProcessorState();
			if (remoteQueryManager.getConvenienceCommands().isTypeOfBw() && remoteQueryManager.getModelCapabilities().supportsAutoVariableSubmit())
			{
				if (!remoteQueryManager.getInitSettings().isEnableAutoVariableSubmit())
				{
					remoteQueryManager.getInitSettings().setIsEnableAutoVariableSubmit(true);
					enabledAutoSubmitForPersistedIna = true;
				}
				remoteQueryManager.setVariableProcessorState(oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT);
			}
			remoteQueryManager.getTagging().put(oFF.QStateConstants.TAG_PERSISTED_INA_VIEW_CUBE_SERIALIZATION_OPTIMIZATION, "true");
			remoteQueryManagersTagged.add(remoteQueryManager);
			this.addSecondaryInaToDependentQueries(remoteQueryManager, localSystemDescription, remoteSystemDescription, dependentQueries);
			if (enabledAutoSubmitForPersistedIna)
			{
				remoteQueryManager.getInitSettings().setIsEnableAutoVariableSubmit(false);
			}
			if (remoteQueryManager.getVariableProcessorState() !== originalVariableProcessorState)
			{
				remoteQueryManager.setVariableProcessorState(originalVariableProcessorState);
			}
		}
		remoteQueryManager.getQueryModel().destroyTransientObjects();
	}
	let result = oFF.BlendableQMPersistedInAResult.create(runtimeQueryManager.serializeToElement(oFF.QModelFormat.INA_PERSISTED_QUERY_DATA), dependentQueries, runtimeQueryManager, blendingHost.getSystemName());
	this.setData(result);
	for (let i = 0; i < remoteQueryManagersTagged.size(); i++)
	{
		let taggedQueryManager = remoteQueryManagersTagged.get(i);
		taggedQueryManager.getTagging().remove(oFF.QStateConstants.TAG_PERSISTED_INA_VIEW_CUBE_SERIALIZATION_OPTIMIZATION);
	}
};
oFF.BlendableQMPersistedInAExportAction.prototype.processSynchronization = function(syncType)
{
	let blendableQueryManager = this.getActionContext();
	let blendableResultSetContainer = blendableQueryManager.getActiveResultSetContainer();
	if (blendableResultSetContainer.getSyncState().isTypeOf(oFF.SyncState.PROCESSING))
	{
		blendableResultSetContainer.setOnPostQueryExecutionListener(this);
	}
	else
	{
		if (blendableResultSetContainer.getSyncState().isTypeOf(oFF.SyncState.IN_SYNC))
		{
			blendableResultSetContainer = blendableQueryManager.getResultsetContainer(true);
		}
		blendableResultSetContainer.setOnPostQueryExecutionListener(this);
		blendableResultSetContainer.processExecution(syncType, this, null);
	}
	return !blendableResultSetContainer.hasErrors();
};
oFF.BlendableQMPersistedInAExportAction.prototype.releaseObjectInternal = function() {};
oFF.BlendableQMPersistedInAExportAction.prototype.updatePersistencyStructure = function(convertedQuery, systemMapping, persistenceIdentifier)
{
	let inaDataSource;
	let inaRemoteContext;
	inaDataSource = oFF.InARuntimeUtils.getDataSourceFromRequest(convertedQuery);
	inaDataSource.remove("System");
	inaRemoteContext = oFF.InARuntimeUtils.getRequestContext(convertedQuery);
	oFF.InARuntimeUtils.setPersistencyForRemote(inaRemoteContext, systemMapping);
	if (oFF.notNull(persistenceIdentifier))
	{
		oFF.InARuntimeUtils.setPersistencyIdentifier(inaRemoteContext, persistenceIdentifier);
	}
};

oFF.BlendableQMVariableSubmitProcessor = function() {};
oFF.BlendableQMVariableSubmitProcessor.prototype = new oFF.SyncAction();
oFF.BlendableQMVariableSubmitProcessor.prototype._ff_c = "BlendableQMVariableSubmitProcessor";

oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor = function(blendableQueryManager)
{
	let blendableVariableSubmitProcessor = new oFF.BlendableQMVariableSubmitProcessor();
	blendableVariableSubmitProcessor.setupAction(null, null, null, blendableQueryManager);
	return blendableVariableSubmitProcessor;
};
oFF.BlendableQMVariableSubmitProcessor.prototype.m_mode = null;
oFF.BlendableQMVariableSubmitProcessor.prototype.m_queryManagersToBeProcessCount = 0;
oFF.BlendableQMVariableSubmitProcessor.prototype.m_transferVariable = null;
oFF.BlendableQMVariableSubmitProcessor.prototype.m_variableVariant = null;
oFF.BlendableQMVariableSubmitProcessor.prototype.activateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	this.m_variableVariant = variableVariant;
	this.setAndAssertVariableProcessMode(oFF.VariableProcessorState.PROCESSING_VARIANT_ACTIVATION);
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQMVariableSubmitProcessor.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onVariableProcessorExecuted(extResult, data, customIdentifier);
};
oFF.BlendableQMVariableSubmitProcessor.prototype.cancelReInitVariables = function(syncType, listener, customIdentifier)
{
	this.setAndAssertVariableProcessMode(oFF.VariableProcessorState.PROCESSING_CANCEL);
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQMVariableSubmitProcessor.prototype.checkVariables = function(syncType, listener, customIdentifier)
{
	this.setAndAssertVariableProcessMode(oFF.VariableProcessorState.PROCESSING_CHECK);
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQMVariableSubmitProcessor.prototype.isSuccessfullyProcessed = function()
{
	return this.hasErrors();
};
oFF.BlendableQMVariableSubmitProcessor.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.addAllMessages(extResult);
	this.m_queryManagersToBeProcessCount--;
	if (this.m_queryManagersToBeProcessCount === 0)
	{
		this.setData(this);
		this.endSync();
	}
};
oFF.BlendableQMVariableSubmitProcessor.prototype.processSynchronization = function(syncType)
{
	let queryManagersToBeProcessed = oFF.XList.create();
	queryManagersToBeProcessed.addAll(this.getActionContext().getAllQueryManagers());
	this.m_queryManagersToBeProcessCount = queryManagersToBeProcessed.size();
	let queryManagersToBeProcessedIter = queryManagersToBeProcessed.getIterator();
	while (queryManagersToBeProcessedIter.hasNext())
	{
		let queryManagerToBeProcessed = queryManagersToBeProcessedIter.next();
		if (this.m_mode === oFF.VariableProcessorState.PROCESSING_SUBMIT)
		{
			queryManagerToBeProcessed.submitVariables(syncType, this, null);
		}
		else if (this.m_mode === oFF.VariableProcessorState.PROCESSING_REINIT)
		{
			queryManagerToBeProcessed.reInitVariablesAfterSubmit(syncType, this, null);
		}
		else if (this.m_mode === oFF.VariableProcessorState.PROCESSING_VARIANT_ACTIVATION)
		{
			queryManagerToBeProcessed.activateVariableVariant(this.m_variableVariant, syncType, this, null);
		}
		else if (this.m_mode === oFF.VariableProcessorState.PROCESSING_CANCEL)
		{
			queryManagerToBeProcessed.cancelReInitVariables(syncType, this, null);
		}
		else if (this.m_mode === oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES)
		{
			if (oFF.notNull(this.m_transferVariable))
			{
				let transferVariablesByVariable = queryManagerToBeProcessed.transferVariablesByVariable(this.m_transferVariable, syncType, this, null);
				if (oFF.isNull(transferVariablesByVariable))
				{
					this.m_queryManagersToBeProcessCount--;
				}
			}
			else
			{
				queryManagerToBeProcessed.transferVariables(syncType, this, null);
			}
		}
		else if (this.m_mode === oFF.VariableProcessorState.PROCESSING_CHECK)
		{
			if (queryManagerToBeProcessed.supportsCheckVariables())
			{
				queryManagerToBeProcessed.checkVariables(syncType, this, null);
			}
			else
			{
				this.m_queryManagersToBeProcessCount--;
			}
		}
		else
		{
			throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate2("Unknown mode: ", oFF.notNull(this.m_mode) ? this.m_mode.getName() : "null"));
		}
	}
	return this.m_queryManagersToBeProcessCount > 0;
};
oFF.BlendableQMVariableSubmitProcessor.prototype.reInitVariablesAfterSubmit = function(syncType, listener, customIdentifier)
{
	this.setAndAssertVariableProcessMode(oFF.VariableProcessorState.PROCESSING_REINIT);
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQMVariableSubmitProcessor.prototype.releaseObjectInternal = function()
{
	this.m_queryManagersToBeProcessCount = 0;
};
oFF.BlendableQMVariableSubmitProcessor.prototype.setAndAssertVariableProcessMode = function(newMode)
{
	if (oFF.isNull(this.m_mode) || this.m_mode === newMode)
	{
		this.m_mode = newMode;
	}
	else
	{
		throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate4("BlendableQMVariableProcessor cannot perform operation: '", oFF.notNull(newMode) ? newMode.getName() : "null", "' because processor is already used for operation:", this.m_mode.getName()));
	}
};
oFF.BlendableQMVariableSubmitProcessor.prototype.submitVariables = function(syncType, listener, customIdentifier)
{
	this.setAndAssertVariableProcessMode(oFF.VariableProcessorState.PROCESSING_SUBMIT);
	this.processSyncAction(syncType, listener, customIdentifier);
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQMVariableSubmitProcessor.prototype.transferVariables = function(syncType, listener, customIdentifier)
{
	this.m_transferVariable = null;
	this.setAndAssertVariableProcessMode(oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES);
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQMVariableSubmitProcessor.prototype.transferVariablesByVariable = function(variable, syncType, listener, customIdentifier)
{
	this.m_transferVariable = variable;
	this.setAndAssertVariableProcessMode(oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES);
	return this.processSyncAction(syncType, listener, customIdentifier);
};

oFF.RuntimeBlendedQueryManagerAction = function() {};
oFF.RuntimeBlendedQueryManagerAction.prototype = new oFF.SyncAction();
oFF.RuntimeBlendedQueryManagerAction.prototype._ff_c = "RuntimeBlendedQueryManagerAction";

oFF.RuntimeBlendedQueryManagerAction.create = function(blendableQueryManager)
{
	let runtimeBlendedQueryManagerAction = new oFF.RuntimeBlendedQueryManagerAction();
	runtimeBlendedQueryManagerAction.setupAction(null, null, null, blendableQueryManager);
	return runtimeBlendedQueryManagerAction;
};
oFF.RuntimeBlendedQueryManagerAction.prototype.m_blendingProcess = null;
oFF.RuntimeBlendedQueryManagerAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryManagerCreated(extResult, data, customIdentifier);
};
oFF.RuntimeBlendedQueryManagerAction.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.addAllMessages(extResult);
	if (!extResult.hasErrors())
	{
		this.m_blendingProcess.prepareQueryExecution();
		this.setData(queryManager);
	}
	this.endSync();
};
oFF.RuntimeBlendedQueryManagerAction.prototype.processSynchronization = function(syncType)
{
	let blendableQueryManager = this.getActionContext();
	let blendingProcessConfigs = blendableQueryManager.getBlendingProcessConfigs(this);
	if (this.hasErrors())
	{
		return false;
	}
	this.m_blendingProcess = oFF.BlendingProcess.create(blendableQueryManager, blendingProcessConfigs, null, null, true);
	this.m_blendingProcess.processBlendedQueryManagerCreation(syncType, this, null);
	return true;
};
oFF.RuntimeBlendedQueryManagerAction.prototype.releaseObjectInternal = function()
{
	if (oFF.notNull(this.m_blendingProcess))
	{
		this.m_blendingProcess.postQueryExecution();
		this.m_blendingProcess = oFF.XObjectExt.release(this.m_blendingProcess);
	}
};

oFF.OlapEnvCapabilitiesExtAction = function() {};
oFF.OlapEnvCapabilitiesExtAction.prototype = new oFF.SyncAction();
oFF.OlapEnvCapabilitiesExtAction.prototype._ff_c = "OlapEnvCapabilitiesExtAction";

oFF.OlapEnvCapabilitiesExtAction.createAndRun = function(syncType, listener, customIdentifier, olapEnvSystem)
{
	let object = new oFF.OlapEnvCapabilitiesExtAction();
	object.setupActionAndRun(syncType, listener, customIdentifier, olapEnvSystem);
	return object;
};
oFF.OlapEnvCapabilitiesExtAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onCapabilitiesLoaded(extResult, data, customIdentifier);
};
oFF.OlapEnvCapabilitiesExtAction.prototype.onServerMetadataLoaded = function(extResult, serverMetadata, customIdentifier)
{
	let session = this.getSession();
	let olapEnvSystem = this.getActionContext();
	let iterator = oFF.ProviderType.getAll().getIterator();
	while (iterator.hasNext())
	{
		let providerType = iterator.next();
		let capabilitiesProvider = oFF.InACapabilitiesProvider.create(session, serverMetadata, providerType, null);
		let capabilities = capabilitiesProvider.getQueryCapabilities();
		olapEnvSystem.addCapabilities(providerType, capabilities);
	}
};
oFF.OlapEnvCapabilitiesExtAction.prototype.processSynchronization = function(syncType)
{
	let olapEnvSystem = this.getActionContext();
	let application = olapEnvSystem.getApplication();
	let systemConnect = application.getConnectionPool().getSystemConnect(olapEnvSystem.getSystemName());
	systemConnect.getServerMetadataExt(syncType, this, null);
	return true;
};
oFF.OlapEnvCapabilitiesExtAction.prototype.releaseObjectInternal = function() {};

oFF.OlapEnvCapabilityAction = function() {};
oFF.OlapEnvCapabilityAction.prototype = new oFF.SyncAction();
oFF.OlapEnvCapabilityAction.prototype._ff_c = "OlapEnvCapabilityAction";

oFF.OlapEnvCapabilityAction.create = function(context)
{
	let newObj = new oFF.OlapEnvCapabilityAction();
	newObj.setupAction(null, null, null, context);
	return newObj;
};
oFF.OlapEnvCapabilityAction.prototype.m_listener = null;
oFF.OlapEnvCapabilityAction.prototype._sacFallback = function(serverMetadata, serverService, newCapabilities)
{
	let betaMetadataForService = serverMetadata.getBetaMetadataForService(serverService);
	if (oFF.isNull(betaMetadataForService))
	{
		return;
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C188_LOCALE_SORTING))
	{
		newCapabilities.setSupportsLocaleSorting(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C192_VIRTUAL_DS_VARIABLE_VALUES))
	{
		newCapabilities.setSupportsDynamicVariableRefresh(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C187_DIMENSION_DEFAULT_MEMBER))
	{
		newCapabilities.setSupportsDimensionDefaultMember(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C189_DIMENSION_VISIBILITY))
	{
		newCapabilities.setSupportsDimensionVisibility(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C194_METADATA_EXTENDED_DIMENSION_VISIBILITY))
	{
		newCapabilities.setSupportsExtendedDimensionVisibility(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C212_SORT_NEW_VALUES))
	{
		newCapabilities.setSupportsSortNewValues(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C215_MEASURE_MEMBER_DEFINITION))
	{
		newCapabilities.setSupportsMeasureMemberDefinition(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C216_MEASURE_MEMBER_DETAILS))
	{
		newCapabilities.setSupportsMeasureMemberDetails(true);
	}
	if (betaMetadataForService.containsKey(oFF.InACapabilities.C217_MEASURE_MEMBER_TYPE))
	{
		newCapabilities.setSupportsMeasureMemberType(true);
	}
};
oFF.OlapEnvCapabilityAction.prototype.importServiceCapabilities = function(capabilities, serverMetadata, serverService)
{
	let newCapabilities = oFF.QCapabilities.create();
	newCapabilities.setSystemType(serverMetadata.getSystemDescription().getSystemType());
	newCapabilities.setSystemName(serverMetadata.getSystemDescription().getSystemName());
	oFF.InACapabilitiesProvider.importCapabilities(serverMetadata.getMetadataForService(serverService), newCapabilities);
	this._sacFallback(serverMetadata, serverService, newCapabilities);
	capabilities.put(serverService, newCapabilities);
};
oFF.OlapEnvCapabilityAction.prototype.onServerMetadataLoaded = function(extResult, serverMetadata, customIdentifier)
{
	this.copyAllMessages(extResult);
	let capabilities = oFF.XHashMapByString.create();
	let serviceIt = serverMetadata.getServices().getIterator();
	while (serviceIt.hasNext())
	{
		this.importServiceCapabilities(capabilities, serverMetadata, serviceIt.next());
	}
	this.setData(capabilities);
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onCapabilities(this, capabilities, customIdentifier);
	}
};
oFF.OlapEnvCapabilityAction.prototype.processSyncAction = function(syncType, listener, customIdentifier)
{
	this.m_listener = listener;
	let systemConnect = this.getActionContext();
	let serverMetadata = systemConnect.getServerMetadataExt(syncType, this, null);
	if (serverMetadata.isValid())
	{
		this.onServerMetadataLoaded(serverMetadata, serverMetadata.getData(), null);
	}
	return this;
};
oFF.OlapEnvCapabilityAction.prototype.releaseObjectInternal = function()
{
	this.m_listener = null;
};

oFF.OlapEnvCube = function() {};
oFF.OlapEnvCube.prototype = new oFF.XObjectExt();
oFF.OlapEnvCube.prototype._ff_c = "OlapEnvCube";

oFF.OlapEnvCube.create = function(olapEnvSystem, cubeName)
{
	let newObj = new oFF.OlapEnvCube();
	newObj.setupEnvCube(olapEnvSystem, cubeName);
	return newObj;
};
oFF.OlapEnvCube.prototype.m_cubeName = null;
oFF.OlapEnvCube.prototype.m_dataSource = null;
oFF.OlapEnvCube.prototype.m_datasourceKeysToListeners = null;
oFF.OlapEnvCube.prototype.m_dimensionMetadataCache = null;
oFF.OlapEnvCube.prototype.m_dimensionOverrideTexts = null;
oFF.OlapEnvCube.prototype.m_fieldMetadataCache = null;
oFF.OlapEnvCube.prototype.m_memberOverrideTexts = null;
oFF.OlapEnvCube.prototype.m_metadataCache = null;
oFF.OlapEnvCube.prototype.m_olapEnvSystem = null;
oFF.OlapEnvCube.prototype.getApplication = function()
{
	return this.getOlapEnv().getApplication();
};
oFF.OlapEnvCube.prototype.getCubeName = function()
{
	return this.m_cubeName;
};
oFF.OlapEnvCube.prototype.getDataSource = function()
{
	return this.m_dataSource;
};
oFF.OlapEnvCube.prototype.getDimensionMemberOverrideText = function(storageName, dimensionName, memberName)
{
	return this.getDimensionMemberOverrideTextByDatasetId(storageName, dimensionName, memberName, "");
};
oFF.OlapEnvCube.prototype.getDimensionMemberOverrideTextByDatasetId = function(storageName, dimensionName, memberName, datasetId)
{
	if (oFF.notNull(storageName) && oFF.notNull(dimensionName) && oFF.notNull(memberName) && oFF.notNull(datasetId))
	{
		let datasetIdMap = this.m_memberOverrideTexts.getByKey(storageName);
		if (oFF.notNull(datasetIdMap))
		{
			let dimensionNameMap = datasetIdMap.getByKey(datasetId);
			if (oFF.notNull(dimensionNameMap))
			{
				let overrideTextMap = dimensionNameMap.getByKey(dimensionName);
				if (oFF.notNull(overrideTextMap))
				{
					return overrideTextMap.getByKey(memberName);
				}
			}
		}
	}
	return null;
};
oFF.OlapEnvCube.prototype.getDimensionMetadata = function(key)
{
	let cubeSpecificKey = key.getCubeSpecificKey();
	return this.m_dimensionMetadataCache.getByKey(cubeSpecificKey);
};
oFF.OlapEnvCube.prototype.getDimensionMetadataByKey = function(key)
{
	let cubeSpecificKey = key.getCubeSpecificKey();
	return this.m_dimensionMetadataCache.useEntry(cubeSpecificKey);
};
oFF.OlapEnvCube.prototype.getDimensionOverrideText = function(storageName, dimensionName)
{
	return this.getDimensionOverrideTextByDatasetId(storageName, dimensionName, "");
};
oFF.OlapEnvCube.prototype.getDimensionOverrideTextByDatasetId = function(storageName, dimensionName, datasetId)
{
	if (oFF.notNull(storageName) && oFF.notNull(dimensionName) && oFF.notNull(datasetId))
	{
		let datasetIdMap = this.m_dimensionOverrideTexts.getByKey(storageName);
		if (oFF.notNull(datasetIdMap))
		{
			let overrideTextMap = datasetIdMap.getByKey(datasetId);
			if (oFF.notNull(overrideTextMap))
			{
				return overrideTextMap.getByKey(dimensionName);
			}
		}
	}
	return null;
};
oFF.OlapEnvCube.prototype.getFieldMetadata = function(key)
{
	let cubeSpecificKey = key.getCubeSpecificKey();
	return this.m_fieldMetadataCache.getByKey(cubeSpecificKey);
};
oFF.OlapEnvCube.prototype.getFieldMetadataByKey = function(key)
{
	let cubeSpecificKey = key.getCubeSpecificKey();
	return this.m_fieldMetadataCache.useEntry(cubeSpecificKey);
};
oFF.OlapEnvCube.prototype.getKeyFieldMetadataByDimension = function(key)
{
	let resultFieldMd = null;
	let iterator = this.m_fieldMetadataCache.getIterator();
	while (iterator.hasNext())
	{
		let fieldMd = iterator.next();
		let cacheKey = fieldMd.getCacheKey();
		if (oFF.XString.isEqual(cacheKey.getSystemName(), key.getSystemName()) && oFF.XString.isEqual(cacheKey.getDataSourceHashKey(), key.getDataSourceHashKey()) && cacheKey.getProviderType() === key.getProviderType() && oFF.XString.isEqual(cacheKey.getKey2(), key.getKey1()) && oFF.XString.isEqual(cacheKey.getValidationHash(), key.getValidationHash()) && fieldMd.getPresentationType() === oFF.PresentationType.KEY)
		{
			resultFieldMd = fieldMd;
			break;
		}
	}
	return resultFieldMd;
};
oFF.OlapEnvCube.prototype.getMemberOverrideTextsByDimension = function(storageName, dimensionName)
{
	return this.getMemberOverrideTextsByDimensionByDatasetId(storageName, dimensionName, "");
};
oFF.OlapEnvCube.prototype.getMemberOverrideTextsByDimensionByDatasetId = function(storageName, dimensionName, datasetId)
{
	if (oFF.notNull(storageName) && oFF.notNull(dimensionName) && oFF.notNull(datasetId))
	{
		let datasetIdMap = this.m_memberOverrideTexts.getByKey(storageName);
		if (oFF.notNull(datasetIdMap))
		{
			let dimensionNameMap = datasetIdMap.getByKey(datasetId);
			if (oFF.notNull(dimensionNameMap))
			{
				return dimensionNameMap.getByKey(dimensionName);
			}
		}
	}
	return null;
};
oFF.OlapEnvCube.prototype.getMetadataAction = function(key)
{
	let action = null;
	let olapEnv = this.getOlapEnv();
	if (olapEnv.isCachingEnabled())
	{
		let cubeSpecificKey = key.getCubeSpecificKey();
		action = this.m_metadataCache.getAction(cubeSpecificKey);
	}
	return action;
};
oFF.OlapEnvCube.prototype.getOlapEnv = function()
{
	return this.getOlapEnvSystem().getOlapEnv();
};
oFF.OlapEnvCube.prototype.getOlapEnvSystem = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_olapEnvSystem);
};
oFF.OlapEnvCube.prototype.getProcess = function()
{
	return this.getApplication().getProcess();
};
oFF.OlapEnvCube.prototype.getQueryMetadata = function(key)
{
	let result = null;
	let cubeSpecificKey = null;
	if (oFF.notNull(key))
	{
		cubeSpecificKey = key.getCubeSpecificKey();
	}
	let content = this.m_metadataCache.getByKey(cubeSpecificKey);
	if (oFF.notNull(content))
	{
		result = content.getJsonContent();
	}
	return result;
};
oFF.OlapEnvCube.prototype.getSession = function()
{
	return this.getApplication().getSession();
};
oFF.OlapEnvCube.prototype.getSystemName = function()
{
	return this.getOlapEnvSystem().getSystemName();
};
oFF.OlapEnvCube.prototype.overwriteQueryMetadata = function(key, entry)
{
	if (oFF.notNull(key) && oFF.notNull(entry))
	{
		let cubeSpecificKey = key.getCubeSpecificKey();
		let content = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, entry);
		this.m_metadataCache.updateEntry(cubeSpecificKey, content);
	}
};
oFF.OlapEnvCube.prototype.releaseAllQueryMetadata = function()
{
	let cacheKeysIter = this.m_metadataCache.getKeysAsIterator();
	while (cacheKeysIter.hasNext())
	{
		let cacheKey = cacheKeysIter.next();
		let queryMetadata = this.m_metadataCache.remove(cacheKey);
		if (oFF.notNull(queryMetadata))
		{
			oFF.XObjectExt.release(queryMetadata);
		}
	}
};
oFF.OlapEnvCube.prototype.releaseDimensionMetadataByKey = function(key)
{
	let cubeSpecificKey = key.getCubeSpecificKey();
	this.m_dimensionMetadataCache.freeEntry(cubeSpecificKey);
};
oFF.OlapEnvCube.prototype.releaseFieldMetadataByKey = function(key)
{
	let cubeSpecificKey = key.getCubeSpecificKey();
	this.m_fieldMetadataCache.freeEntry(cubeSpecificKey);
};
oFF.OlapEnvCube.prototype.releaseObject = function()
{
	this.m_olapEnvSystem = null;
	this.m_dimensionMetadataCache = oFF.XObjectExt.release(this.m_dimensionMetadataCache);
	this.m_fieldMetadataCache = oFF.XObjectExt.release(this.m_fieldMetadataCache);
	this.m_metadataCache = oFF.XObjectExt.release(this.m_metadataCache);
	this.m_datasourceKeysToListeners = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_datasourceKeysToListeners);
	this.m_dimensionOverrideTexts = oFF.XObjectExt.release(this.m_dimensionOverrideTexts);
	this.m_memberOverrideTexts = oFF.XObjectExt.release(this.m_memberOverrideTexts);
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.OlapEnvCube.prototype.releaseQueryMetadata = function(key)
{
	if (oFF.notNull(key))
	{
		let cubeSpecificKey = key.getCubeSpecificKey();
		this.m_metadataCache.freeEntry(cubeSpecificKey);
	}
};
oFF.OlapEnvCube.prototype.removeDimensionMemberOverrideText = function(storageName, dimensionName, memberName)
{
	this.removeDimensionMemberOverrideTextByDatasetId(storageName, dimensionName, memberName, "");
};
oFF.OlapEnvCube.prototype.removeDimensionMemberOverrideTextByDatasetId = function(storageName, dimensionName, memberName, datasetId)
{
	if (oFF.notNull(storageName) && oFF.notNull(dimensionName) && oFF.notNull(memberName) && oFF.notNull(datasetId))
	{
		let datasetIdMap = this.m_memberOverrideTexts.getByKey(storageName);
		if (oFF.notNull(datasetIdMap))
		{
			let dimensionNameMap = datasetIdMap.getByKey(datasetId);
			if (oFF.notNull(dimensionNameMap))
			{
				let overrideTextMap = dimensionNameMap.getByKey(dimensionName);
				if (oFF.notNull(overrideTextMap))
				{
					overrideTextMap.remove(memberName);
				}
			}
		}
	}
};
oFF.OlapEnvCube.prototype.removeDimensionOverrideText = function(storageName, dimensionName)
{
	this.removeDimensionOverrideTextByDatasetId(storageName, dimensionName, "");
};
oFF.OlapEnvCube.prototype.removeDimensionOverrideTextByDatasetId = function(storageName, dimensionName, datasetId)
{
	if (oFF.notNull(storageName) && oFF.notNull(dimensionName) && oFF.notNull(datasetId))
	{
		let datasetIdMap = this.m_dimensionOverrideTexts.getByKey(storageName);
		if (oFF.notNull(datasetIdMap))
		{
			let overrideTextMap = datasetIdMap.getByKey(datasetId);
			if (oFF.notNull(overrideTextMap))
			{
				overrideTextMap.remove(dimensionName);
			}
		}
	}
};
oFF.OlapEnvCube.prototype.removeOverrideTextsByStorage = function(storageName)
{
	this.removeOverrideTextsByStorageByDatasetId(storageName, null);
};
oFF.OlapEnvCube.prototype.removeOverrideTextsByStorageByDatasetId = function(storageName, datasetId)
{
	if (oFF.notNull(storageName))
	{
		if (oFF.notNull(datasetId))
		{
			let dimensionByDatasetIdMap = this.m_dimensionOverrideTexts.getByKey(storageName);
			if (oFF.notNull(dimensionByDatasetIdMap))
			{
				dimensionByDatasetIdMap.remove(datasetId);
			}
			let memberByDatasetIdMap = this.m_memberOverrideTexts.getByKey(storageName);
			if (oFF.notNull(memberByDatasetIdMap))
			{
				memberByDatasetIdMap.remove(datasetId);
			}
		}
		else
		{
			this.m_dimensionOverrideTexts.remove(storageName);
			this.m_memberOverrideTexts.remove(storageName);
		}
	}
	else
	{
		oFF.XObjectExt.release(this.m_dimensionOverrideTexts);
		oFF.XObjectExt.release(this.m_memberOverrideTexts);
		this.m_dimensionOverrideTexts = oFF.XHashMapByString.create();
		this.m_memberOverrideTexts = oFF.XHashMapByString.create();
	}
};
oFF.OlapEnvCube.prototype.setDataSource = function(dataSource)
{
	let copyDataSoure = dataSource.clone();
	this.m_dataSource = copyDataSoure;
};
oFF.OlapEnvCube.prototype.setDimensionMemberOverrideText = function(storageName, dimensionName, memberName, overrideText)
{
	this.setDimensionMemberOverrideTextByDatasetId(storageName, dimensionName, memberName, overrideText, "");
};
oFF.OlapEnvCube.prototype.setDimensionMemberOverrideTextByDatasetId = function(storageName, dimensionName, memberName, overrideText, datasetId)
{
	if (oFF.notNull(storageName) && oFF.notNull(dimensionName) && oFF.notNull(memberName) && oFF.XStringUtils.isNotNullAndNotEmpty(overrideText) && oFF.notNull(datasetId))
	{
		let datasetIdMap = this.m_memberOverrideTexts.getByKey(storageName);
		if (oFF.isNull(datasetIdMap))
		{
			datasetIdMap = oFF.XHashMapByString.create();
			this.m_memberOverrideTexts.put(storageName, datasetIdMap);
		}
		let dimensionNameMap = datasetIdMap.getByKey(datasetId);
		if (oFF.isNull(dimensionNameMap))
		{
			dimensionNameMap = oFF.XHashMapByString.create();
			datasetIdMap.put(datasetId, dimensionNameMap);
		}
		let overrideTextMap = dimensionNameMap.getByKey(dimensionName);
		if (oFF.isNull(overrideTextMap))
		{
			overrideTextMap = oFF.XHashMapByString.create();
			dimensionNameMap.put(dimensionName, overrideTextMap);
		}
		if (!oFF.XString.isEqual(overrideTextMap.getByKey(memberName), overrideText))
		{
			overrideTextMap.put(memberName, overrideText);
		}
	}
};
oFF.OlapEnvCube.prototype.setDimensionMetadata = function(metadata)
{
	let key = metadata.getCacheKey();
	let cubeSpecificKey = key.getCubeSpecificKey();
	this.m_dimensionMetadataCache.put(cubeSpecificKey, metadata);
};
oFF.OlapEnvCube.prototype.setDimensionOverrideText = function(storageName, dimensionName, overrideText)
{
	this.setDimensionOverrideTextByDatasetId(storageName, dimensionName, overrideText, "");
};
oFF.OlapEnvCube.prototype.setDimensionOverrideTextByDatasetId = function(storageName, dimensionName, overrideText, datasetId)
{
	if (oFF.notNull(storageName) && oFF.notNull(dimensionName) && oFF.XStringUtils.isNotNullAndNotEmpty(overrideText) && oFF.notNull(datasetId))
	{
		let datasetIdMap = this.m_dimensionOverrideTexts.getByKey(storageName);
		if (oFF.isNull(datasetIdMap))
		{
			datasetIdMap = oFF.XHashMapByString.create();
			this.m_dimensionOverrideTexts.put(storageName, datasetIdMap);
		}
		let overrideTextMap = datasetIdMap.getByKey(datasetId);
		if (oFF.isNull(overrideTextMap))
		{
			overrideTextMap = oFF.XHashMapByString.create();
			datasetIdMap.put(datasetId, overrideTextMap);
		}
		if (!oFF.XString.isEqual(overrideTextMap.getByKey(dimensionName), overrideText))
		{
			overrideTextMap.put(dimensionName, overrideText);
		}
	}
};
oFF.OlapEnvCube.prototype.setFieldMetadata = function(metadata)
{
	let key = metadata.getCacheKey();
	let cubeSpecificKey = key.getCubeSpecificKey();
	this.m_fieldMetadataCache.put(cubeSpecificKey, metadata);
};
oFF.OlapEnvCube.prototype.setQueryMetadata = function(key, entry)
{
	if (oFF.notNull(key) && oFF.notNull(entry))
	{
		let cubeSpecificKey = key.getCubeSpecificKey();
		if (this.m_metadataCache.containsKey(cubeSpecificKey))
		{
			this.m_metadataCache.useEntry(cubeSpecificKey);
		}
		else
		{
			let content = oFF.XContent.createJsonObjectContent(oFF.QModelFormat.INA_METADATA, entry);
			this.m_metadataCache.put(cubeSpecificKey, content);
		}
	}
};
oFF.OlapEnvCube.prototype.setupEnvCube = function(olapEnvSystem, cubeName)
{
	this.m_olapEnvSystem = oFF.XWeakReferenceUtil.getWeakRef(olapEnvSystem);
	let session = olapEnvSystem.getSession();
	this.m_dimensionMetadataCache = oFF.QCache.create(session);
	this.m_fieldMetadataCache = oFF.QCache.create(session);
	this.m_cubeName = cubeName;
	this.m_metadataCache = oFF.QCache.create(session);
	this.m_datasourceKeysToListeners = oFF.XHashMapByString.create();
	this.m_dimensionOverrideTexts = oFF.XHashMapByString.create();
	this.m_memberOverrideTexts = oFF.XHashMapByString.create();
};
oFF.OlapEnvCube.prototype.toString = function()
{
	return this.m_cubeName;
};

oFF.OlapEnvSupportedFormulaAction = function() {};
oFF.OlapEnvSupportedFormulaAction.prototype = new oFF.SyncAction();
oFF.OlapEnvSupportedFormulaAction.prototype._ff_c = "OlapEnvSupportedFormulaAction";

oFF.OlapEnvSupportedFormulaAction.create = function(context, includeMemberNavigationOperations)
{
	let newObj = new oFF.OlapEnvSupportedFormulaAction();
	newObj.setupAction(null, null, null, context);
	newObj.m_includeMemberNavigationOperations = includeMemberNavigationOperations;
	return newObj;
};
oFF.OlapEnvSupportedFormulaAction.prototype.m_includeMemberNavigationOperations = false;
oFF.OlapEnvSupportedFormulaAction.prototype.m_listener = null;
oFF.OlapEnvSupportedFormulaAction.prototype.addCapabilities = function(inaAnalytics, connection)
{
	if (connection.supportsAnalyticCapability(oFF.InACapabilities.C167_FORMULA_OPERATORS_CATALOG))
	{
		let capabilitiesBe = inaAnalytics.putNewList("Capabilities");
		capabilitiesBe.addString(oFF.InACapabilities.C167_FORMULA_OPERATORS_CATALOG);
	}
	if (connection.supportsAnalyticCapability(oFF.InACapabilities.C141_RETURNED_DATA_SELECTION))
	{
		let capabilitiesMds = inaAnalytics.putNewList("Capabilities");
		capabilitiesMds.addString(oFF.InACapabilities.C141_RETURNED_DATA_SELECTION);
	}
};
oFF.OlapEnvSupportedFormulaAction.prototype.addDatasource = function(inaDefinition, systemType)
{
	let inaDatasource = inaDefinition.putNewStructure("DataSource");
	if (systemType.isTypeOf(oFF.SystemType.HANA))
	{
		inaDatasource.putString("ObjectName", this.m_includeMemberNavigationOperations ? "$$AllFunctions$$" : "$$FormulaFunctions$$");
	}
	else if (systemType.isTypeOf(oFF.SystemType.ABAP))
	{
		inaDatasource.putString("ObjectName", "$$DataSource$$");
		inaDatasource.putString("Type", "FormulaOperators");
	}
};
oFF.OlapEnvSupportedFormulaAction.prototype.addFeatureRequests = function(inaDefinition, connection)
{
	let inaRsFeatureRequest = inaDefinition.putNewStructure("ResultSetFeatureRequest");
	inaRsFeatureRequest.putBoolean("IncludePerformanceData", false);
	inaRsFeatureRequest.putString("ResultEncoding", "None");
	inaRsFeatureRequest.putString("ResultFormat", "Version2");
	if (connection.supportsAnalyticCapability(oFF.InACapabilities.C141_RETURNED_DATA_SELECTION))
	{
		let returnedDataSelection = inaRsFeatureRequest.putNewStructure("ReturnedDataSelection");
		if (!connection.supportsAnalyticCapability(oFF.InACapabilities.V128_NO_DATA_ACTIONS))
		{
			returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.ACTIONS.getName(), false);
		}
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.EXCEPTIONS.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.EXCEPTION_ALERTLEVEL.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.INPUT_ENABLED.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.UNIT_DESCRIPTIONS.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.UNIT_TYPES.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.UNITS.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.TUPLE_DISPLAY_LEVEL.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.TUPLE_DRILL_STATE.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.TUPLE_PARENT_INDEXES.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.VALUES.getName(), false);
		returnedDataSelection.putBoolean(oFF.ReturnedDataSelection.VALUES_FORMATTED.getName(), false);
	}
};
oFF.OlapEnvSupportedFormulaAction.prototype.addLayout = function(inaDefinition, systemType)
{
	let inaDimensions = inaDefinition.putNewList("Dimensions");
	let inaDimension = inaDimensions.addNewStructure();
	inaDimension.putString("Axis", "Rows");
	inaDimension.putString("Name", "FunctionName");
	inaDimension.putInteger("SortOrder", 1);
	if (systemType.isTypeOf(oFF.SystemType.ABAP))
	{
		inaDimension.putString("Name", "FormulaOperators");
		let inaAttributes = inaDimension.putNewList("Attributes");
		let attributeKey = inaAttributes.addNewStructure();
		attributeKey.putString("Name", "FormulaOperators.KEY");
		attributeKey.putString("Obtainability", oFF.ObtainabilityType.ALWAYS.getName());
	}
};
oFF.OlapEnvSupportedFormulaAction.prototype.createRequest = function(connection)
{
	let request = oFF.PrFactory.createStructure();
	let inaAnalytics = request.putNewStructure("Analytics");
	let inaDefinition = inaAnalytics.putNewStructure("Definition");
	let systemType = connection.getSystemDescription().getSystemType();
	this.addCapabilities(inaAnalytics, connection);
	this.addDatasource(inaDefinition, systemType);
	this.addLayout(inaDefinition, systemType);
	this.addFeatureRequests(inaDefinition, connection);
	return request;
};
oFF.OlapEnvSupportedFormulaAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	let supportedFormulas = null;
	this.copyAllMessages(extResult);
	if (extResult.isValid())
	{
		let rootElement = response.getRootElement();
		oFF.InAHelper.importMessages(response.getRootElement(), this);
		if (this.isValid())
		{
			let grids = rootElement.getListByKey("Grids");
			let grid = grids.getStructureAt(0);
			let axes = grid.getListByKey("Axes");
			let axis = axes.getStructureAt(0);
			let dimensions = axis.getListByKey("Dimensions");
			let dimension = dimensions.getStructureAt(0);
			let attributes = dimension.getListByKey("Attributes");
			let attribute = attributes.getStructureAt(0);
			let values = attribute.getListByKey("Values");
			supportedFormulas = oFF.XList.create();
			let size = values.size();
			for (let i = 0; i < size; i++)
			{
				supportedFormulas.add(values.getStringAt(i));
			}
		}
	}
	this.setData(supportedFormulas);
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onSupportedFormula(this, supportedFormulas, customIdentifier);
	}
};
oFF.OlapEnvSupportedFormulaAction.prototype.processSyncAction = function(syncType, listener, customIdentifier)
{
	this.m_listener = listener;
	let systemConnect = this.getActionContext();
	let systemType = systemConnect.getSystemDescription().getSystemType();
	if (systemType.isTypeOf(oFF.SystemType.ABAP) && systemConnect.getServerMetadata().supportsCapability(oFF.ServerService.ANALYTIC, oFF.InACapabilities.C167_FORMULA_OPERATORS_CATALOG) || systemType.isTypeOf(oFF.SystemType.HANA))
	{
		let connection = systemConnect.getConnectionPoolBase().getOpenConnection(systemConnect.getSystemName());
		let _function = connection.newRpcFunction(systemType.getInAPath());
		_function.setServiceName(oFF.SystemServices.INA_SERVICE);
		_function.getRpcRequest().setRequestStructure(this.createRequest(connection));
		_function.processFunctionExecution(syncType, this, systemType);
		return this;
	}
	let supportedFormulas = oFF.XList.create();
	if (systemType.isTypeOf(oFF.SystemType.ABAP))
	{
		let supportedFormulaOperators = oFF.FormulaOperator.getSupportedFormulaOperator(systemType);
		supportedFormulas.addAll(oFF.XCollectionUtils.createListOfNames(supportedFormulaOperators));
	}
	if (systemType.isTypeOf(oFF.SystemType.UNV) || systemType.isTypeOf(oFF.SystemType.UQAS))
	{
		supportedFormulas.add("abs");
		supportedFormulas.add("and");
		supportedFormulas.add("decfloat");
		supportedFormulas.add("double");
		supportedFormulas.add("float");
		supportedFormulas.add("if");
		supportedFormulas.add("int");
		supportedFormulas.add("isNull");
		supportedFormulas.add("length");
		supportedFormulas.add("like");
		supportedFormulas.add("log");
		supportedFormulas.add("log10");
		supportedFormulas.add("not");
		supportedFormulas.add("or");
		supportedFormulas.add("substring");
		supportedFormulas.add("-");
		supportedFormulas.add("/");
		supportedFormulas.add("+");
		supportedFormulas.add("*");
		supportedFormulas.add("**");
		supportedFormulas.add("==");
		supportedFormulas.add("!=");
		supportedFormulas.add(">=");
		supportedFormulas.add(">");
		supportedFormulas.add("<=");
		supportedFormulas.add("<");
	}
	if (systemConnect.getServerMetadata().supportsCapability(oFF.ServerService.ANALYTIC, oFF.InACapabilities.C153_VARIANCE_OPERATOR))
	{
		supportedFormulas.add("variance");
	}
	this.setData(supportedFormulas);
	if (oFF.notNull(this.m_listener))
	{
		this.m_listener.onSupportedFormula(this, supportedFormulas, customIdentifier);
	}
	return this;
};
oFF.OlapEnvSupportedFormulaAction.prototype.processSynchronization = function(syncType)
{
	return false;
};
oFF.OlapEnvSupportedFormulaAction.prototype.releaseObjectInternal = function()
{
	this.m_listener = null;
};

oFF.OlapEnvSystem = function() {};
oFF.OlapEnvSystem.prototype = new oFF.XObjectExt();
oFF.OlapEnvSystem.prototype._ff_c = "OlapEnvSystem";

oFF.OlapEnvSystem.create = function(olapEnv, systemName)
{
	let newObj = new oFF.OlapEnvSystem();
	newObj.setupEnvSys(olapEnv, systemName);
	return newObj;
};
oFF.OlapEnvSystem.prototype.m_capabilities = null;
oFF.OlapEnvSystem.prototype.m_capabilitiesExt = null;
oFF.OlapEnvSystem.prototype.m_cubes = null;
oFF.OlapEnvSystem.prototype.m_listenerCapabilities = null;
oFF.OlapEnvSystem.prototype.m_listenerFormula = null;
oFF.OlapEnvSystem.prototype.m_microCubes = null;
oFF.OlapEnvSystem.prototype.m_olapEnv = null;
oFF.OlapEnvSystem.prototype.m_supportedFormulas = null;
oFF.OlapEnvSystem.prototype.m_systemName = null;
oFF.OlapEnvSystem.prototype.m_variantsByDatasource = null;
oFF.OlapEnvSystem.prototype.m_virtualQmByDatasource = null;
oFF.OlapEnvSystem.prototype._getSupportedBaselineLogic = function(systemType, capabilities)
{
	let baselineLogic = -1;
	if (systemType.isTypeOf(oFF.SystemType.BW))
	{
		baselineLogic = 0;
	}
	if (systemType.isTypeOf(oFF.SystemType.HANA))
	{
		baselineLogic = capabilities.supportsMdsBaseline1() ? 1 : 0;
		baselineLogic = capabilities.supportsMdsBaseline2() ? 2 : baselineLogic;
		baselineLogic = capabilities.supportsMdsBaseline3() ? 3 : baselineLogic;
		baselineLogic = capabilities.supportsMdsBaseline4() ? 4 : baselineLogic;
		baselineLogic = capabilities.supportsMdsBaseline5() ? 5 : baselineLogic;
		baselineLogic = capabilities.supportsMdsBaseline6() ? 6 : baselineLogic;
	}
	if (systemType.isTypeOf(oFF.SystemType.UNV))
	{
		baselineLogic = capabilities.supportsUnvBaseline1() ? 1 : baselineLogic;
		baselineLogic = capabilities.supportsUnvBaseline2() ? 2 : baselineLogic;
		baselineLogic = capabilities.supportsUnvBaseline3() ? 3 : baselineLogic;
		baselineLogic = capabilities.supportsUnvBaseline4() ? 4 : baselineLogic;
		baselineLogic = capabilities.supportsUnvBaseline5() ? 5 : baselineLogic;
		baselineLogic = capabilities.supportsUnvBaseline6() ? 5 : baselineLogic;
	}
	return baselineLogic;
};
oFF.OlapEnvSystem.prototype._processSupportedFormulaAndMemberNavigationsOperators = function(syncType, listener, identifier, includeMemberNavigations)
{
	let action;
	if (oFF.notNull(this.m_supportedFormulas))
	{
		action = oFF.SyncActionExtRes.createSyncAction(this.m_supportedFormulas, null);
		if (oFF.notNull(listener))
		{
			listener.onSupportedFormula(action, this.m_supportedFormulas, identifier);
		}
	}
	else
	{
		this.m_listenerFormula = listener;
		let systemConnect = this.getApplication().getConnectionPool().getSystemConnect(this.m_systemName);
		let supportedFormulaAction = oFF.OlapEnvSupportedFormulaAction.create(systemConnect, includeMemberNavigations);
		supportedFormulaAction.processSyncAction(syncType, this, null);
		action = supportedFormulaAction;
	}
	return action;
};
oFF.OlapEnvSystem.prototype.addCapabilities = function(providerType, capabilities)
{
	this.m_capabilitiesExt.put(providerType.getName(), capabilities);
};
oFF.OlapEnvSystem.prototype.addMicroCube = function(name, queryManager)
{
	let ok = false;
	if (this.isValidMicroCubeName(name))
	{
		this.m_microCubes.put(name, queryManager);
		ok = true;
	}
	return ok;
};
oFF.OlapEnvSystem.prototype.getApplication = function()
{
	return this.getOlapEnv().getApplication();
};
oFF.OlapEnvSystem.prototype.getCubeContainer = function(cubeName)
{
	let cube = this.m_cubes.getByKey(cubeName);
	if (oFF.isNull(cube))
	{
		cube = oFF.OlapEnvCube.create(this, cubeName);
		this.m_cubes.put(cubeName, cube);
	}
	return cube;
};
oFF.OlapEnvSystem.prototype.getCubeContainerInternal = function(key)
{
	let cubeName = key.getDataSourceHashKey();
	return this.getCubeContainer(cubeName);
};
oFF.OlapEnvSystem.prototype.getDimensionMetadata = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getDimensionMetadata(key);
};
oFF.OlapEnvSystem.prototype.getDimensionMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getDimensionMetadataByKey(key);
};
oFF.OlapEnvSystem.prototype.getFieldMetadata = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getFieldMetadata(key);
};
oFF.OlapEnvSystem.prototype.getFieldMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getFieldMetadataByKey(key);
};
oFF.OlapEnvSystem.prototype.getKeyFieldMetadataByDimension = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getKeyFieldMetadataByDimension(key);
};
oFF.OlapEnvSystem.prototype.getMicroCube = function(name)
{
	return this.m_microCubes.getByKey(name);
};
oFF.OlapEnvSystem.prototype.getMicroCubesNames = function()
{
	return this.m_microCubes.getKeysAsReadOnlyList();
};
oFF.OlapEnvSystem.prototype.getOlapEnv = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_olapEnv);
};
oFF.OlapEnvSystem.prototype.getProcess = function()
{
	return this.getApplication().getProcess();
};
oFF.OlapEnvSystem.prototype.getQueryMetadata = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getQueryMetadata(key);
};
oFF.OlapEnvSystem.prototype.getServiceCapabilities = function(serviceName)
{
	if (this.m_capabilities.hasElements() === false)
	{
		this.processCapabilities(oFF.SyncType.BLOCKING, this, null);
	}
	return this.m_capabilities.getByKey(serviceName);
};
oFF.OlapEnvSystem.prototype.getServiceCapabilitiesExt = function(providerType)
{
	if (this.m_capabilitiesExt.hasElements() === false)
	{
		this.processCapabilitiesExt(oFF.SyncType.BLOCKING, null, null);
	}
	return this.m_capabilitiesExt.getByKey(providerType.getName());
};
oFF.OlapEnvSystem.prototype.getSession = function()
{
	return this.getApplication().getSession();
};
oFF.OlapEnvSystem.prototype.getSupportedBaselineFormulaOperators = function(providerType)
{
	let systemConnect = this.getApplication().getConnectionPool().getSystemConnect(this.m_systemName);
	let systemType = systemConnect.getSystemDescription().getSystemType();
	let capabilities = this.getServiceCapabilitiesExt(providerType);
	let supportedBaselineLogic = this._getSupportedBaselineLogic(systemType, capabilities);
	return oFF.FormulaOperatorExt.getBaselineFormulaOperatorsExt(systemType, supportedBaselineLogic);
};
oFF.OlapEnvSystem.prototype.getSystemName = function()
{
	return this.m_systemName;
};
oFF.OlapEnvSystem.prototype.getVariantsByDatasource = function(datasourceName)
{
	let variants = this.m_variantsByDatasource.getByKey(datasourceName);
	if (oFF.isNull(variants))
	{
		variants = oFF.XListOfNameObject.create();
		this.m_variantsByDatasource.put(datasourceName, variants);
	}
	return variants;
};
oFF.OlapEnvSystem.prototype.isValidMicroCubeName = function(name)
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(name) && !this.m_microCubes.containsKey(name);
};
oFF.OlapEnvSystem.prototype.onCapabilities = function(data, result, identifier)
{
	this.m_capabilities = result;
	if (oFF.notNull(this.m_listenerCapabilities))
	{
		this.m_listenerCapabilities.onCapabilities(data, result, identifier);
	}
};
oFF.OlapEnvSystem.prototype.onSupportedFormula = function(data, result, identifier)
{
	this.m_supportedFormulas = result;
	if (oFF.notNull(this.m_listenerFormula))
	{
		this.m_listenerFormula.onSupportedFormula(data, result, identifier);
	}
};
oFF.OlapEnvSystem.prototype.overwriteQueryMetadata = function(key, entry)
{
	let container = this.getCubeContainerInternal(key);
	container.overwriteQueryMetadata(key, entry);
};
oFF.OlapEnvSystem.prototype.processCapabilities = function(syncType, listener, identifier)
{
	let action;
	if (this.m_capabilities.hasElements())
	{
		action = oFF.SyncActionExtRes.createSyncAction(this.m_capabilities, null);
		if (oFF.notNull(listener))
		{
			listener.onCapabilities(action, this.m_capabilities, identifier);
		}
	}
	else
	{
		let capabilityAction = oFF.OlapEnvCapabilityAction.create(this.getApplication().getConnectionPool().getSystemConnect(this.m_systemName));
		capabilityAction.processSyncAction(syncType, this, identifier);
		action = capabilityAction;
	}
	return action;
};
oFF.OlapEnvSystem.prototype.processCapabilitiesExt = function(syncType, listener, customIdentifier)
{
	return oFF.OlapEnvCapabilitiesExtAction.createAndRun(syncType, listener, customIdentifier, this);
};
oFF.OlapEnvSystem.prototype.processSupportedFormulaAndMemberNavigationsOperators = function(syncType, listener, identifier)
{
	return this._processSupportedFormulaAndMemberNavigationsOperators(syncType, listener, identifier, true);
};
oFF.OlapEnvSystem.prototype.processSupportedFormulaOperators = function(syncType, listener, identifier)
{
	return this._processSupportedFormulaAndMemberNavigationsOperators(syncType, listener, identifier, false);
};
oFF.OlapEnvSystem.prototype.releaseAllQueryMetadata = function()
{
	let cubesIter = this.m_cubes.getKeysAsIterator();
	while (cubesIter.hasNext())
	{
		let envCube = this.getCubeContainer(cubesIter.next());
		envCube.releaseAllQueryMetadata();
	}
};
oFF.OlapEnvSystem.prototype.releaseDimensionMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	container.releaseDimensionMetadataByKey(key);
};
oFF.OlapEnvSystem.prototype.releaseFieldMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	container.releaseFieldMetadataByKey(key);
};
oFF.OlapEnvSystem.prototype.releaseObject = function()
{
	this.m_olapEnv = null;
	this.m_systemName = null;
	this.m_cubes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cubes);
	this.m_virtualQmByDatasource = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_virtualQmByDatasource);
	this.m_microCubes = oFF.XObjectExt.release(this.m_microCubes);
	this.m_capabilities = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_capabilities);
	this.m_capabilitiesExt = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_capabilitiesExt);
	this.m_listenerCapabilities = null;
	this.m_supportedFormulas = oFF.XObjectExt.release(this.m_supportedFormulas);
	this.m_listenerFormula = null;
	this.m_variantsByDatasource = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_variantsByDatasource);
	oFF.XObjectExt.prototype.releaseObject.call( this );
};
oFF.OlapEnvSystem.prototype.releaseQueryMetadata = function(key)
{
	let container = this.getCubeContainerInternal(key);
	container.releaseQueryMetadata(key);
};
oFF.OlapEnvSystem.prototype.removeMicroCubeName = function(name)
{
	if (this.m_microCubes.containsKey(name))
	{
		this.m_microCubes.remove(name);
	}
};
oFF.OlapEnvSystem.prototype.setDimensionMetadata = function(metadata)
{
	let key = metadata.getCacheKey();
	let container = this.getCubeContainerInternal(key);
	container.setDimensionMetadata(metadata);
};
oFF.OlapEnvSystem.prototype.setFieldMetadata = function(metadata)
{
	let key = metadata.getCacheKey();
	let container = this.getCubeContainerInternal(key);
	container.setFieldMetadata(metadata);
};
oFF.OlapEnvSystem.prototype.setQueryMetadata = function(key, entry)
{
	let container = this.getCubeContainerInternal(key);
	container.setQueryMetadata(key, entry);
};
oFF.OlapEnvSystem.prototype.setupEnvSys = function(olapEnv, systemName)
{
	this.m_olapEnv = oFF.XWeakReferenceUtil.getWeakRef(olapEnv);
	this.m_systemName = systemName;
	this.m_cubes = oFF.XHashMapByString.create();
	this.m_microCubes = oFF.XHashMapByString.create();
	this.m_capabilities = oFF.XHashMapByString.create();
	this.m_capabilitiesExt = oFF.XHashMapByString.create();
	this.m_virtualQmByDatasource = oFF.XHashMapByString.create();
	this.m_variantsByDatasource = oFF.XHashMapByString.create();
};
oFF.OlapEnvSystem.prototype.toString = function()
{
	return this.m_systemName;
};
oFF.OlapEnvSystem.prototype.updateDynamicVariablesForQueryManager = function(queryManager, syncType, listener, customIdentifier)
{
	let datasourceName = queryManager.getDataSource().getFullQualifiedName();
	let virtualQm = this.m_virtualQmByDatasource.getByKey(datasourceName);
	if (oFF.isNull(virtualQm))
	{
		virtualQm = oFF.OlapEnvironmentQMCreationListener.create();
		this.m_virtualQmByDatasource.put(datasourceName, virtualQm);
	}
	virtualQm.processUpdate(syncType, listener, customIdentifier, queryManager);
};

oFF.OlapEnvironmentQMCreationListener = function() {};
oFF.OlapEnvironmentQMCreationListener.prototype = new oFF.SyncAction();
oFF.OlapEnvironmentQMCreationListener.prototype._ff_c = "OlapEnvironmentQMCreationListener";

oFF.OlapEnvironmentQMCreationListener.create = function()
{
	let obj = new oFF.OlapEnvironmentQMCreationListener();
	obj.m_additionalListener = oFF.XList.create();
	obj.m_additionalQms = oFF.XList.create();
	return obj;
};
oFF.OlapEnvironmentQMCreationListener.prototype.m_additionalListener = null;
oFF.OlapEnvironmentQMCreationListener.prototype.m_additionalQms = null;
oFF.OlapEnvironmentQMCreationListener.prototype.m_virtualQueryManager = null;
oFF.OlapEnvironmentQMCreationListener.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	if (oFF.notNull(listener))
	{
		listener.onQueryExecuted(this, data, customIdentifier);
	}
	if (oFF.XCollectionUtils.hasElements(this.m_additionalListener))
	{
		for (let i = 0; i < this.m_additionalListener.size(); i++)
		{
			let pair = this.m_additionalListener.get(i);
			pair.getFirstObject().onQueryExecuted(this, data, pair.getSecondObject());
		}
		this.m_additionalListener.clear();
	}
};
oFF.OlapEnvironmentQMCreationListener.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.isValid())
	{
		this.updateVariablesInQueryManager();
		this.setData(extResult.getData());
	}
	this.endSync();
};
oFF.OlapEnvironmentQMCreationListener.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.addAllMessages(extResult);
	if (this.hasErrors())
	{
		this.endSync();
		return;
	}
	this.m_virtualQueryManager = queryManager;
	this.prepareVirtualQueryManager();
	this.m_virtualQueryManager.processQueryExecution(this.getActiveSyncType(), this, null);
};
oFF.OlapEnvironmentQMCreationListener.prototype.prepareVirtualQueryManager = function()
{
	let queryModelVirtualDs = this.m_virtualQueryManager.getQueryModel();
	let targetQueryModel = this.getActionContext().getQueryModel();
	let virtualDatasource = oFF.QFactory.createFilterDynamicVariables(queryModelVirtualDs, targetQueryModel.getDataSource());
	let session = this.getActionContext().getSession();
	let cc = queryModelVirtualDs.getConvenienceCommands();
	if (session.hasFeature(oFF.FeatureToggleOlap.IMPROVED_DYNAMIC_VARIABLE_UPDATE))
	{
		cc.clearFilters();
		cc.addSingleMemberFilterByDimensionName("SchemaName", virtualDatasource.getSchemaName(), oFF.ComparisonOperator.EQUAL);
		cc.addSingleMemberFilterByDimensionName("PackageName", virtualDatasource.getPackageName(), oFF.ComparisonOperator.EQUAL);
		cc.addSingleMemberFilterByDimensionName("ObjectName", virtualDatasource.getObjectName(), oFF.ComparisonOperator.EQUAL);
		if (queryModelVirtualDs.getModelCapabilities().supportsVirtualDataSourceTypeColumns())
		{
			cc.addSingleMemberFilterByDimensionName("Type", virtualDatasource.getTypeName(), oFF.ComparisonOperator.EQUAL);
		}
		cc.moveDimensionToRows("Name");
		cc.moveDimensionToRows("Low");
		cc.moveDimensionToRows("High");
		cc.moveDimensionToRows("Option");
		cc.moveDimensionToRows("Sign");
		let variables = targetQueryModel.getVariables();
		for (let i = 0; i < variables.size(); i++)
		{
			let variable = variables.get(i);
			if (variable.isDynamicVariable())
			{
				cc.addSingleMemberFilterByDimensionName("Name", variable.getName(), oFF.ComparisonOperator.EQUAL);
			}
		}
	}
	else
	{
		queryModelVirtualDs.getFilter().getDynamicFilter().setComplexRoot(virtualDatasource);
		cc.addAllDimensions();
	}
};
oFF.OlapEnvironmentQMCreationListener.prototype.processSynchronization = function(syncType)
{
	if (oFF.isNull(this.m_virtualQueryManager))
	{
		let targetQm = this.getActionContext();
		let virtualQueryServiceConfig = oFF.QueryServiceConfig.createWithDataSourceName(targetQm.getApplication(), targetQm.getSystemName(), oFF.QModelConstants.UPDATE_DYN_VAR_VIRTUAL_DATASOURCE);
		virtualQueryServiceConfig.processQueryManagerCreation(syncType, this, null);
	}
	else
	{
		this.prepareVirtualQueryManager();
		this.m_virtualQueryManager.processQueryExecution(syncType, this, null);
	}
	return true;
};
oFF.OlapEnvironmentQMCreationListener.prototype.processUpdate = function(syncType, listener, customIdentifier, targetQm)
{
	let syncState = this.getSyncState();
	if (oFF.notNull(syncState))
	{
		if (syncState.isTypeOf(oFF.SyncState.PROCESSING))
		{
			this.m_additionalListener.add(oFF.XPair.create(listener, customIdentifier));
			this.m_additionalQms.add(targetQm);
			return;
		}
		else
		{
			this.resetSyncState();
		}
	}
	this.setupActionAndRun(syncType, listener, customIdentifier, targetQm);
};
oFF.OlapEnvironmentQMCreationListener.prototype.releaseObjectInternal = function()
{
	this.m_virtualQueryManager = oFF.XObjectExt.release(this.m_virtualQueryManager);
	this.m_additionalListener = oFF.XObjectExt.release(this.m_additionalListener);
};
oFF.OlapEnvironmentQMCreationListener.prototype.updateVariablesInQueryManager = function()
{
	let targetQueryModel = this.getActionContext().getQueryModel();
	this.updateVariablesInQueryManagerInternal(targetQueryModel);
	if (oFF.XCollectionUtils.hasElements(this.m_additionalQms))
	{
		for (let i = 0; i < this.m_additionalQms.size(); i++)
		{
			let additionalTarget = this.m_additionalQms.get(i).getQueryModel();
			this.updateVariablesInQueryManagerInternal(additionalTarget);
		}
		this.m_additionalQms.clear();
	}
};
oFF.OlapEnvironmentQMCreationListener.prototype.updateVariablesInQueryManagerImproved = function(target)
{
	let variables = target.getVariables();
	for (let v = 0; v < variables.size(); v++)
	{
		let targetVar = variables.get(v);
		if (targetVar.isDynamicVariable())
		{
			targetVar.clear();
		}
	}
	let virtualQueryModel = this.m_virtualQueryManager.getQueryModel();
	let nameDimension = virtualQueryModel.getDimensionByName("Name");
	let lowDimension = virtualQueryModel.getDimensionByName("Low");
	let highDimension = virtualQueryModel.getDimensionByName("High");
	let optionDimension = virtualQueryModel.getDimensionByName("Option");
	let signDimension = virtualQueryModel.getDimensionByName("Sign");
	let rowsAxis = this.m_virtualQueryManager.getClassicResultSet().getRowsAxis();
	for (let i = 0; i < rowsAxis.getTuplesCount(); i++)
	{
		let tuple = rowsAxis.getTupleAt(i);
		let variable = target.getVariable(tuple.getTupleElementByDimension(nameDimension).getName());
		let lowValue = tuple.getTupleElementByDimension(lowDimension).getName();
		let highValue = tuple.getTupleElementByDimension(highDimension).getName();
		let operator = oFF.QInAConverter.lookupComparison(tuple.getTupleElementByDimension(optionDimension).getName());
		if (oFF.isNull(operator))
		{
			operator = oFF.ComparisonOperator.EQUAL;
		}
		let setSign = oFF.QInAConverter.lookupRsSetSign(tuple.getTupleElementByDimension(signDimension).getName());
		if (oFF.isNull(setSign))
		{
			setSign = oFF.SetSign.INCLUDING;
		}
		if (variable.getVariableType().isTypeOf(oFF.VariableType.DIMENSION_MEMBER_VARIABLE))
		{
			let variableBase = variable;
			let dimension = variableBase.getDimension();
			let keyField = dimension.getKeyField();
			let memberFilter = oFF.QFactory.createFilterCartesianListForDimensionMemberVariable(variable.getContext(), variableBase, keyField.getMetadata(), null);
			let cartesianElement = memberFilter.addNewCartesianElement();
			cartesianElement.setComparisonOperator(operator);
			cartesianElement.setSetSign(setSign);
			let valueType = memberFilter.getField().getValueType();
			if (operator.getNumberOfParameters() > 0 && oFF.XStringUtils.isNotNullAndNotEmpty(lowValue))
			{
				let newValue1 = oFF.XValueAccess.createWithType(valueType);
				newValue1.parseString(lowValue);
				if (newValue1.getValue() !== null)
				{
					cartesianElement.getLow().setValue(newValue1.getValue());
				}
			}
			if (operator.getNumberOfParameters() > 1 && oFF.XStringUtils.isNotNullAndNotEmpty(highValue))
			{
				let newValue2 = oFF.XValueAccess.createWithType(valueType);
				newValue2.parseString(highValue);
				if (newValue2.getValue() !== null)
				{
					cartesianElement.getHigh().setValue(newValue2.getValue());
				}
			}
			if (operator.getNumberOfParameters() === 0 || cartesianElement.getLow() !== null && cartesianElement.getLow().getValue() !== null || cartesianElement.getHigh() !== null && cartesianElement.getHigh().getValue() !== null)
			{
				if (variableBase.hasMemberFilter())
				{
					variableBase.getMemberFilter().add(cartesianElement);
				}
				else
				{
					variableBase.setMemberFilter(memberFilter);
				}
			}
		}
		else if (variable.getVariableType().isTypeOf(oFF.VariableType.SIMPLE_TYPE_VARIABLE))
		{
			variable.addValueByString(lowValue);
		}
		else if (variable.getVariableType().isTypeOf(oFF.VariableType.OPTION_LIST_VARIABLE))
		{
			variable.setOptionByName(lowValue);
		}
	}
};
oFF.OlapEnvironmentQMCreationListener.prototype.updateVariablesInQueryManagerInternal = function(target)
{
	let session = this.getActionContext().getSession();
	if (session.hasFeature(oFF.FeatureToggleOlap.IMPROVED_DYNAMIC_VARIABLE_UPDATE))
	{
		this.updateVariablesInQueryManagerImproved(target);
	}
	else
	{
		this.updateVariablesInQueryManagerOld(target);
	}
};
oFF.OlapEnvironmentQMCreationListener.prototype.updateVariablesInQueryManagerOld = function(target)
{
	let virtualQueryModel = this.m_virtualQueryManager.getQueryModel();
	let classicResultSet = this.m_virtualQueryManager.getClassicResultSet();
	let rowsAxis = classicResultSet.getRowsAxis();
	let names = rowsAxis.getAllMembers(virtualQueryModel.getDimensionByName("Name"));
	let lowValues = rowsAxis.getAllMembers(virtualQueryModel.getDimensionByName("Low"));
	let highValues = rowsAxis.getAllMembers(virtualQueryModel.getDimensionByName("High"));
	if (oFF.isNull(names) || names.size() === 0)
	{
		return;
	}
	let sizeNames = names.size();
	let variables = target.getVariables();
	let numberOfVariables = variables.size();
	for (let variableIndex = 0; variableIndex < numberOfVariables; variableIndex++)
	{
		let variable = variables.get(variableIndex);
		if (!variable.isDynamicVariable())
		{
			continue;
		}
		for (let memberIndex = 0; memberIndex < sizeNames; memberIndex++)
		{
			if (oFF.XString.isEqual(names.get(memberIndex).getName(), variable.getName()))
			{
				let lowValue = lowValues.get(memberIndex).getName();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(lowValue))
				{
					variable.setValueByString(lowValue);
					if (variable.getVariableType() === oFF.VariableType.DIMENSION_MEMBER_VARIABLE && oFF.XStringUtils.isNotNullAndNotEmpty(highValues.get(memberIndex).getName()))
					{
						let dimensionMemberVariable = variable;
						let memberFilter = dimensionMemberVariable.getMemberFilter();
						let filterOperation = memberFilter.getCartesianElement(0);
						filterOperation.getHigh().setString(highValues.get(memberIndex).getName());
					}
				}
			}
		}
	}
};

oFF.DocumentUpdateAction = function() {};
oFF.DocumentUpdateAction.prototype = new oFF.SyncAction();
oFF.DocumentUpdateAction.prototype._ff_c = "DocumentUpdateAction";

oFF.DocumentUpdateAction.createAndRun = function(syncType, listener, customIdentifier, context, state)
{
	let action = new oFF.DocumentUpdateAction();
	action.m_olapEnvState = state;
	action.setupAction(syncType, listener, customIdentifier, context);
	action.namesOfHandledQM = oFF.XHashSetOfString.create();
	action.namesOfSubmitedQms = oFF.XHashSetOfString.create();
	action.insStates = oFF.XHashMapByString.create();
	action.modCounters = oFF.XHashMapByString.create();
	action.olapStateManager = context;
	action.process();
	return action;
};
oFF.DocumentUpdateAction.resetChangedSettingsInQueryModel = function(queryModel)
{
	if (oFF.notNull(queryModel))
	{
		oFF.DocumentUpdateAction.resetMembers(queryModel.getMeasureDimension());
		oFF.DocumentUpdateAction.resetMembers(queryModel.getNonMeasureDimension());
		oFF.DocumentUpdateAction.resetMembers(queryModel.getNonMeasureDimension2());
		oFF.DocumentUpdateAction.resetMembers(queryModel.getAccountDimension());
	}
};
oFF.DocumentUpdateAction.resetMemberToDefault = function(stm)
{
	if (stm.hasPropertyChanged(oFF.QStructureMemberProperties.QY_SCALE_FORMAT))
	{
		stm.resetToDefaultScaleFormat();
	}
	if (stm.hasPropertyChanged(oFF.QStructureMemberProperties.QY_CURRENCY_PRESENTATION))
	{
		stm.resetToDefaultCurrencyPresentation();
	}
	if (stm.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_PRECISION))
	{
		stm.resetToDefaultNumericPrecision();
	}
	if (stm.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SCALE))
	{
		stm.resetToDefaultNumericScale();
	}
	if (stm.hasPropertyChanged(oFF.QStructureMemberProperties.QY_NUMERIC_SHIFT))
	{
		stm.resetToDefaultNumericShift();
	}
};
oFF.DocumentUpdateAction.resetMembers = function(structureDimension)
{
	if (oFF.notNull(structureDimension) && oFF.XCollectionUtils.hasElements(structureDimension.getAllStructureMembers()))
	{
		structureDimension.removeCustomMembers();
		oFF.XCollectionUtils.forEach(structureDimension.getAllStructureMembers(), (stm) => {
			oFF.DocumentUpdateAction.resetMemberToDefault(stm);
		});
	}
};
oFF.DocumentUpdateAction.prototype.insStates = null;
oFF.DocumentUpdateAction.prototype.m_olapEnvState = null;
oFF.DocumentUpdateAction.prototype.modCounters = null;
oFF.DocumentUpdateAction.prototype.namesOfHandledQM = null;
oFF.DocumentUpdateAction.prototype.namesOfSubmitedQms = null;
oFF.DocumentUpdateAction.prototype.olapStateManager = null;
oFF.DocumentUpdateAction.prototype.applyExternalFilterToQueryManager = function(olapFilterManager, queryManager, inaState)
{
	let inaUsedExternalFilters = inaState.getListByKey("OlapFilters");
	if (oFF.notNull(inaUsedExternalFilters))
	{
		let filter = queryManager.getQueryModel().getFilter();
		let size = inaUsedExternalFilters.size();
		filter.unlinkExternalFilters();
		for (let i = 0; i < size; i++)
		{
			let usedFilter = inaUsedExternalFilters.getStructureAt(i);
			let name = usedFilter.getStringByKey("Name");
			let externalFilter = olapFilterManager.getFilterById(usedFilter.getStringByKey("Id"));
			if (oFF.isNull(externalFilter))
			{
				this.addWarning(oFF.ErrorCodes.IMPORT_EXTERNAL_FILTER_NOT_FOUND, oFF.XStringUtils.concatenate3("Could not restore external filter '", name, "'!"));
			}
			else
			{
				filter.linkFilter(name, externalFilter);
			}
		}
	}
};
oFF.DocumentUpdateAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.documentStateApplied(extResult, data, customIdentifier);
};
oFF.DocumentUpdateAction.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.addAllMessages(extResult);
	if (oFF.notNull(extResult) && extResult.hasErrors())
	{
		this.endSync();
	}
	else
	{
		let queryManager = customIdentifier;
		this.updateQueryManagerFromState(this.olapStateManager.getOlapEnv().getFilterManager(), queryManager);
		let name = queryManager.getName();
		queryManager.getQueryModelBase().setModCounter(this.modCounters.getByKey(queryManager.getName()).getInteger());
		this.namesOfSubmitedQms.removeElement(name);
		if (this.namesOfSubmitedQms.isEmpty())
		{
			if (this.olapStateManager.isReleaseQueryManagersEnabled())
			{
				let qmIterator = this.olapStateManager.getOlapEnv().getAllAreaQueryManager().getIterator();
				while (qmIterator.hasNext())
				{
					let existingQm = qmIterator.next();
					if (!existingQm.isReleased() && !this.namesOfHandledQM.contains(existingQm.getName()) && !this.olapStateManager.hasToBeIgnored(existingQm))
					{
						oFF.XObjectExt.release(existingQm);
					}
				}
			}
			this.setData(this.olapStateManager.getOlapEnv());
			this.endSync();
		}
	}
};
oFF.DocumentUpdateAction.prototype.processSynchronization = function(syncType)
{
	let messages = oFF.MessageManagerSimple.createMessageManager();
	let filterManagerState = this.m_olapEnvState.getFilterManagerState();
	let filterStateEntry = this.olapStateManager.getStateCache().getByKey(filterManagerState.getStateId());
	let olapEnv = this.olapStateManager.getOlapEnv();
	let olapFilterManager = olapEnv.getFilterManager();
	let jsonParser = oFF.JsonParserFactory.newInstance();
	let filterStructure = jsonParser.parse(filterStateEntry.getState());
	if (jsonParser.hasErrors())
	{
		this.addAllMessages(jsonParser);
		return false;
	}
	messages.copyAllMessages(olapFilterManager.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, filterStructure));
	olapFilterManager.setModCounter(filterManagerState.getModCounter());
	let qmNames = this.m_olapEnvState.getQueryManagersState().getKeysAsIterator();
	let submited = false;
	let queryManagersNoSubmit = oFF.XSetOfNameObject.create();
	let queryManagersToSubmit = oFF.XSetOfNameObject.create();
	while (qmNames.hasNext())
	{
		let qmName = qmNames.next();
		this.namesOfHandledQM.add(qmName);
		let qmState = this.m_olapEnvState.getQueryManagersState().getByKey(qmName);
		let state = this.olapStateManager.getStateCache().getByKey(qmState.getStateId()).getState();
		let inaState = jsonParser.parse(state);
		if (oFF.notNull(inaState) && !inaState.isEmpty())
		{
			this.insStates.put(qmName, inaState);
			let queryManager = olapEnv.getQueryManagerByName(qmName);
			let recreateFromPrimaryQueryManager = null;
			let qmDefinition = inaState.getStructureByKey(oFF.QStateConstants.QUERY_MODEL);
			let isBlendableQueryManagerDefinition = oFF.XComponentType.lookupComponentType(qmDefinition.getStringByKey("CType")) === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER;
			if (oFF.notNull(queryManager))
			{
				if (queryManager.getOlapComponentType() === oFF.OlapComponentType.QUERY_MANAGER && isBlendableQueryManagerDefinition)
				{
					recreateFromPrimaryQueryManager = queryManager;
				}
				else if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER && !isBlendableQueryManagerDefinition)
				{
					recreateFromPrimaryQueryManager = queryManager.unblend();
				}
			}
			if (oFF.isNull(queryManager) || oFF.notNull(recreateFromPrimaryQueryManager))
			{
				queryManager = this.recreateQueryManager(qmDefinition, messages, inaState.getStringByKeyExt(oFF.QStateConstants.MANAGER_DATASET_ID, null), inaState.getByKey(oFF.QStateConstants.MANAGER_TAGS), inaState.getStringByKey(oFF.QStateConstants.MANAGER_SYSTEM_NAME), recreateFromPrimaryQueryManager);
				queryManager.setName(qmName);
			}
			this.namesOfSubmitedQms.add(qmName);
			if (queryManager.isSubmitNeeded())
			{
				queryManagersToSubmit.add(queryManager);
			}
			else
			{
				queryManagersNoSubmit.add(queryManager);
			}
			this.modCounters.put(qmName, oFF.XIntegerValue.create(qmState.getModCounter()));
		}
	}
	let noSubmitIter = queryManagersNoSubmit.getValuesAsReadOnlyList().getIterator();
	while (noSubmitIter.hasNext())
	{
		this.onVariableProcessorExecuted(null, null, noSubmitIter.next());
	}
	oFF.XObjectExt.release(noSubmitIter);
	let toSubmitIter = queryManagersToSubmit.getValuesAsReadOnlyList().getIterator();
	while (toSubmitIter.hasNext())
	{
		let queryManagerToSubmit = toSubmitIter.next();
		queryManagerToSubmit.submitVariables(syncType, this, queryManagerToSubmit);
		submited = true;
	}
	oFF.XObjectExt.release(toSubmitIter);
	return submited;
};
oFF.DocumentUpdateAction.prototype.recreateQueryManager = function(inaQueryManager, messages, datasetId, tags, systemName, recreateFromPrimaryQueryManager)
{
	let olapEnv = this.olapStateManager.getOlapEnv();
	let queryManager = null;
	let componentType = inaQueryManager.getStringByKey("CType");
	if (oFF.notNull(componentType) && oFF.XComponentType.lookupComponentType(componentType) === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		let blendableQueryManager = null;
		if (oFF.notNull(recreateFromPrimaryQueryManager))
		{
			blendableQueryManager = olapEnv.getModelLinkManager().createBlendableQueryManager(inaQueryManager.getStringByKey("StorageName"), recreateFromPrimaryQueryManager, inaQueryManager.getStringByKey("Name"));
		}
		else
		{
			let inaPrimaryQueryManager = inaQueryManager.getStructureByKey("PrimaryQueryManager");
			let primaryDatasetId = inaPrimaryQueryManager.getStringByKey("DatasetId");
			let primarySharedQueryManager = olapEnv.getSharedQueryManager(primaryDatasetId);
			blendableQueryManager = olapEnv.getModelLinkManager().createBlendableQueryManager(inaQueryManager.getStringByKey("StorageName"), primarySharedQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE), inaQueryManager.getStringByKey("Name"));
		}
		let inaSecondaryQueryManagers = inaQueryManager.getListByKey("QueryManagers");
		let inaSecondaryQueryManagersIter = inaSecondaryQueryManagers.getIterator();
		while (inaSecondaryQueryManagersIter.hasNext())
		{
			let inaSecondaryQueryManager = inaSecondaryQueryManagersIter.next().asStructure();
			let secondaryDatasetId = inaSecondaryQueryManager.getStringByKey("DatasetId");
			let secondarySharedQueryManager = olapEnv.getSharedQueryManager(secondaryDatasetId);
			blendableQueryManager.addSecondaryQueryManager(secondarySharedQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE));
		}
		queryManager = blendableQueryManager;
	}
	else
	{
		if (oFF.notNull(recreateFromPrimaryQueryManager))
		{
			queryManager = recreateFromPrimaryQueryManager;
		}
		else if (oFF.XStringUtils.isNotNullAndNotEmpty(datasetId))
		{
			let sharedQueryManager = olapEnv.getSharedQueryManager(datasetId);
			if (oFF.notNull(sharedQueryManager) && !sharedQueryManager.isReleased())
			{
				queryManager = sharedQueryManager.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
				queryManager.getTagging().remove(oFF.QStateConstants.TAG_UNDO_IGNORE);
				queryManager.getTagging().remove(oFF.QStateConstants.TAG_UNDO_INCLUDE);
				queryManager.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, inaQueryManager);
			}
		}
		if (oFF.isNull(queryManager))
		{
			let queryServiceConfig = oFF.QueryServiceConfig.create(olapEnv.getApplication());
			queryServiceConfig.setDefinitionByStructure(oFF.QModelFormat.INA_REPOSITORY, inaQueryManager);
			queryServiceConfig.setSystemName(systemName);
			let result = queryServiceConfig.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
			messages.addAllMessages(result);
			queryManager = result.getData();
		}
	}
	if (oFF.notNull(queryManager) && oFF.notNull(tags))
	{
		let tagsList = tags.asList();
		for (let i = 0; i < tagsList.size(); i++)
		{
			let tag = tagsList.get(i).asStructure();
			queryManager.getTagging().put(tag.getStringByKey("KEY"), tag.getStringByKey("VALUE"));
		}
	}
	return queryManager;
};
oFF.DocumentUpdateAction.prototype.releaseObjectInternal = function()
{
	this.olapStateManager = null;
	this.insStates = oFF.XObjectExt.release(this.insStates);
	this.namesOfHandledQM = oFF.XObjectExt.release(this.namesOfHandledQM);
	this.namesOfSubmitedQms = oFF.XObjectExt.release(this.namesOfSubmitedQms);
};
oFF.DocumentUpdateAction.prototype.updateQueryManagerFromState = function(olapFilterManager, queryManager)
{
	let inaState = this.insStates.getByKey(queryManager.getName());
	if (queryManager.getOlapComponentType() === oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER)
	{
		oFF.DocumentUpdateAction.resetChangedSettingsInQueryModel(queryManager.getQueryModel());
		queryManager.deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, inaState.getStructureByKey(oFF.QStateConstants.QUERY_MODEL));
		let blendableQueryManager = queryManager;
		let queryManagerExternalFiltersList = inaState.getListByKey(oFF.QStateConstants.QUERY_MANAGER_EXTERNAL_FILTERS);
		let queryManagerExternalFiltersListIter = queryManagerExternalFiltersList.getIterator();
		while (queryManagerExternalFiltersListIter.hasNext())
		{
			let queryManagerExternalFilters = queryManagerExternalFiltersListIter.next().asStructure();
			let queryManagerName = queryManagerExternalFilters.getStringByKey(oFF.QStateConstants.MANAGER_DATASET_ID);
			let leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(queryManagerName);
			if (oFF.notNull(leafQueryManager))
			{
				this.applyExternalFilterToQueryManager(olapFilterManager, leafQueryManager, queryManagerExternalFilters);
			}
		}
	}
	else
	{
		oFF.DocumentUpdateAction.resetChangedSettingsInQueryModel(queryManager.getQueryModel());
		queryManager.getQueryModel().deserializeFromElementExt(oFF.QModelFormat.INA_REPOSITORY, inaState.getStructureByKey(oFF.QStateConstants.QUERY_MODEL));
		this.applyExternalFilterToQueryManager(olapFilterManager, queryManager, inaState);
	}
};

oFF.ResultSetContainerProcessExecutionAction = function() {};
oFF.ResultSetContainerProcessExecutionAction.prototype = new oFF.SyncAction();
oFF.ResultSetContainerProcessExecutionAction.prototype._ff_c = "ResultSetContainerProcessExecutionAction";

oFF.ResultSetContainerProcessExecutionAction.createAction = function(resultSetContainer)
{
	let action = new oFF.ResultSetContainerProcessExecutionAction();
	action.m_resultSetContainer = resultSetContainer;
	action.setupAction(null, null, null, null);
	return action;
};
oFF.ResultSetContainerProcessExecutionAction.prototype.m_resultSetContainer = null;
oFF.ResultSetContainerProcessExecutionAction.prototype.m_resultSetContainerExecution = null;
oFF.ResultSetContainerProcessExecutionAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryExecuted(extResult, data, customIdentifier);
};
oFF.ResultSetContainerProcessExecutionAction.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(resultSetContainer);
	this.endSync();
};
oFF.ResultSetContainerProcessExecutionAction.prototype.processSynchronization = function(syncType)
{
	this.m_resultSetContainerExecution = this.m_resultSetContainer.processExecution(syncType, this, null);
	if (!this.getSyncState().isInSync() && (this.m_resultSetContainerExecution.getSyncState().isInSync() || this.m_resultSetContainerExecution.hasErrors()))
	{
		this.addAllMessages(this.m_resultSetContainerExecution);
		this.setData(this.m_resultSetContainerExecution.getData());
		return false;
	}
	return true;
};
oFF.ResultSetContainerProcessExecutionAction.prototype.releaseObjectInternal = function()
{
	this.m_resultSetContainer = null;
	this.m_resultSetContainerExecution = oFF.XObjectExt.release(this.m_resultSetContainerExecution);
};

oFF.RpcBlendFunctionProcessExecutionAction = function() {};
oFF.RpcBlendFunctionProcessExecutionAction.prototype = new oFF.SyncAction();
oFF.RpcBlendFunctionProcessExecutionAction.prototype._ff_c = "RpcBlendFunctionProcessExecutionAction";

oFF.RpcBlendFunctionProcessExecutionAction.createAction = function(rpcFunction, queryManager)
{
	let action = new oFF.RpcBlendFunctionProcessExecutionAction();
	action.m_rpcFunction = rpcFunction;
	action.m_queryManager = queryManager;
	action.setupAction(null, null, null, null);
	return action;
};
oFF.RpcBlendFunctionProcessExecutionAction.prototype.m_queryManager = null;
oFF.RpcBlendFunctionProcessExecutionAction.prototype.m_rpcFunction = null;
oFF.RpcBlendFunctionProcessExecutionAction.prototype.m_rpcFunctionExecution = null;
oFF.RpcBlendFunctionProcessExecutionAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onFunctionExecuted(extResult, data, customIdentifier);
};
oFF.RpcBlendFunctionProcessExecutionAction.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	this.addAllMessages(extResult);
	this.setData(response);
	this.endSync();
};
oFF.RpcBlendFunctionProcessExecutionAction.prototype.processSynchronization = function(syncType)
{
	let serviceConfig = this.m_queryManager.getServiceConfig();
	let blendingDefinition = serviceConfig.getBlendingDefinition();
	let blendingSources = blendingDefinition.getSources();
	if (blendingSources.isEmpty())
	{
		this.addError(oFF.ErrorCodes.INVALID_STATE, "No blending sources set");
		return false;
	}
	for (let i = 0; i < blendingSources.size(); i++)
	{
		blendingSources.get(i).getQueryModel().destroyTransientObjects();
	}
	this.m_rpcFunctionExecution = this.m_rpcFunction.processFunctionExecution(syncType, this, null);
	if (!this.getSyncState().isInSync() && (this.m_rpcFunctionExecution.getSyncState().isInSync() || this.m_rpcFunctionExecution.hasErrors()))
	{
		this.addAllMessages(this.m_rpcFunctionExecution);
		this.setData(this.m_rpcFunctionExecution.getData());
		return false;
	}
	return true;
};
oFF.RpcBlendFunctionProcessExecutionAction.prototype.releaseObjectInternal = function()
{
	this.m_rpcFunction = null;
	this.m_queryManager = null;
	this.m_rpcFunctionExecution = oFF.XObjectExt.release(this.m_rpcFunctionExecution);
};

oFF.OlapEnvironment = function() {};
oFF.OlapEnvironment.prototype = new oFF.DfNameObject();
oFF.OlapEnvironment.prototype._ff_c = "OlapEnvironment";

oFF.OlapEnvironment.CUSTOM_IDENTIFIER = "customIdentifier";
oFF.OlapEnvironment.LISTENER = "listener";
oFF.OlapEnvironment.QUERY_MANAGER = "queryManager";
oFF.OlapEnvironment.SYNC_TYPE = "syncType";
oFF.OlapEnvironment.SYSTEM_NAME = "systemName";
oFF.OlapEnvironment.create = function(application)
{
	let newObj = new oFF.OlapEnvironment();
	newObj.setupEnv(application);
	return newObj;
};
oFF.OlapEnvironment.prototype.m_allowedFormulaOperators = null;
oFF.OlapEnvironment.prototype.m_application = null;
oFF.OlapEnvironment.prototype.m_clientQueryObjectManager = null;
oFF.OlapEnvironment.prototype.m_customHierarchyRepo = null;
oFF.OlapEnvironment.prototype.m_filterAcrossModelsLovCacheManager = null;
oFF.OlapEnvironment.prototype.m_filterManager = null;
oFF.OlapEnvironment.prototype.m_geoManager = null;
oFF.OlapEnvironment.prototype.m_isCmdTracing = false;
oFF.OlapEnvironment.prototype.m_modelCache = null;
oFF.OlapEnvironment.prototype.m_modelLinkManager = null;
oFF.OlapEnvironment.prototype.m_prequeries = null;
oFF.OlapEnvironment.prototype.m_queryManagerHandler = null;
oFF.OlapEnvironment.prototype.m_queryManagers = null;
oFF.OlapEnvironment.prototype.m_remoteBlendingCache = null;
oFF.OlapEnvironment.prototype.m_resourceToStringRep = null;
oFF.OlapEnvironment.prototype.m_rsDataMaxCacheEntries = 10;
oFF.OlapEnvironment.prototype.m_sharedQueryManagers = null;
oFF.OlapEnvironment.prototype.m_stateManager = null;
oFF.OlapEnvironment.prototype.m_supportedFormulaOperators = null;
oFF.OlapEnvironment.prototype.m_systems = null;
oFF.OlapEnvironment.prototype.m_traceOffset = 0;
oFF.OlapEnvironment.prototype.m_traces = null;
oFF.OlapEnvironment.prototype.m_transientQueryManager = null;
oFF.OlapEnvironment.prototype.m_varProcessor = null;
oFF.OlapEnvironment.prototype.m_variables = null;
oFF.OlapEnvironment.prototype.m_visualizationTemplateManager = null;
oFF.OlapEnvironment.prototype.addBLOBDetailsToCache = function(resourceKey, contentAndMime)
{
	this.m_resourceToStringRep.put(resourceKey, contentAndMime);
};
oFF.OlapEnvironment.prototype.addMicroCube = function(systemName, name, queryManager)
{
	return this.getSystemContainerBase(systemName).addMicroCube(name, queryManager);
};
oFF.OlapEnvironment.prototype.addPrequery = function(preQueryName, queryModel)
{
	this.m_prequeries.put(preQueryName, queryModel);
};
oFF.OlapEnvironment.prototype.addTraceEntry = function(entry)
{
	if (oFF.notNull(this.m_traces))
	{
		this.m_traces.add(entry);
	}
};
oFF.OlapEnvironment.prototype.cacheRemoteBlendingData = function(queryManager, view, cube)
{
	let cacheId = queryManager.getResultSetPersistenceIdentifier();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(cacheId) && (oFF.XStringUtils.isNotNullAndNotEmpty(view) || oFF.XStringUtils.isNotNullAndNotEmpty(cube)))
	{
		this.m_remoteBlendingCache.put(cacheId, oFF.RemoteBlendingCacheEntry.create(view, cube, queryManager.getDataSource().getFullQualifiedName()));
		if (this.m_remoteBlendingCache.size() > this.m_rsDataMaxCacheEntries)
		{
			this.invalidateRemoteBlendingCacheEntry(this.m_remoteBlendingCache.getKeysAsReadOnlyList().get(0));
		}
	}
};
oFF.OlapEnvironment.prototype.clearTransientQueryManager = function()
{
	this.m_transientQueryManager.clear();
};
oFF.OlapEnvironment.prototype.containsQueryManagerWithName = function(name)
{
	return this.m_queryManagers.containsKey(name);
};
oFF.OlapEnvironment.prototype.createQueryManagerWithMicroCube = function(microCube, systemName)
{
	return this.m_queryManagerHandler.createQueryManagerWithMicroCube(microCube, systemName);
};
oFF.OlapEnvironment.prototype.getAllAreaQueryManager = function()
{
	let copy = oFF.XList.create();
	oFF.XCollectionUtils.addAll(copy, this.m_queryManagers);
	return copy;
};
oFF.OlapEnvironment.prototype.getAllAreaQueryManagerActive = function()
{
	let copy = oFF.XList.create();
	for (let i = 0; i < this.m_queryManagers.size(); i++)
	{
		let queryManager = this.m_queryManagers.get(i);
		let lifeCycleState = queryManager.getLifeCycleState();
		if (lifeCycleState === oFF.LifeCycleState.ACTIVE)
		{
			copy.add(queryManager);
		}
	}
	return copy;
};
oFF.OlapEnvironment.prototype.getAllowedFormulaOperatorList = function()
{
	return this.m_allowedFormulaOperators;
};
oFF.OlapEnvironment.prototype.getApplication = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_application);
};
oFF.OlapEnvironment.prototype.getApplicationBase = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_application);
};
oFF.OlapEnvironment.prototype.getBLOBDetailsForResourceId = function(resourceKey)
{
	return this.m_resourceToStringRep.getByKey(resourceKey);
};
oFF.OlapEnvironment.prototype.getCachedRemoteBlendingData = function(cacheId)
{
	return this.m_remoteBlendingCache.getByKey(cacheId);
};
oFF.OlapEnvironment.prototype.getCellContextManager = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getClientQueryObjectManager = function()
{
	if (oFF.isNull(this.m_clientQueryObjectManager))
	{
		this.m_clientQueryObjectManager = oFF.OlapClientQueryObjectManager.create(this);
	}
	return this.m_clientQueryObjectManager;
};
oFF.OlapEnvironment.prototype.getComponentType = function()
{
	return oFF.OlapComponentType.OLAP_ENVIRONMENT;
};
oFF.OlapEnvironment.prototype.getContext = function()
{
	return this;
};
oFF.OlapEnvironment.prototype.getCubeContainer = function(key)
{
	return this.getCubeContainerInternal(key);
};
oFF.OlapEnvironment.prototype.getCubeContainerInternal = function(key)
{
	let envSystem = this.getSystemContainer(key.getSystemName());
	return envSystem.getCubeContainerInternal(key);
};
oFF.OlapEnvironment.prototype.getCustomHierarchyRepository = function()
{
	return this.m_customHierarchyRepo;
};
oFF.OlapEnvironment.prototype.getDataSource = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getDataSourceOrigin = function()
{
	return this.getDataSource();
};
oFF.OlapEnvironment.prototype.getDataSourceTarget = function()
{
	return this.getDataSource();
};
oFF.OlapEnvironment.prototype.getDimensionAccessor = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getDimensionMetadata = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getDimensionMetadata(key);
};
oFF.OlapEnvironment.prototype.getDimensionMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getDimensionMetadataByKey(key);
};
oFF.OlapEnvironment.prototype.getDocumentStateManager = function()
{
	return this.m_stateManager;
};
oFF.OlapEnvironment.prototype.getDrillManager = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getFieldAccessorSingle = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getFieldMetadata = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getFieldMetadata(key);
};
oFF.OlapEnvironment.prototype.getFieldMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getFieldMetadataByKey(key);
};
oFF.OlapEnvironment.prototype.getFilterAcrossModelsLovCacheManager = function()
{
	if (oFF.isNull(this.m_filterAcrossModelsLovCacheManager))
	{
		this.m_filterAcrossModelsLovCacheManager = oFF.QFilterAcrossModelsLovCacheManager.create();
	}
	return this.m_filterAcrossModelsLovCacheManager;
};
oFF.OlapEnvironment.prototype.getFilterManager = function()
{
	if (oFF.isNull(this.m_filterManager))
	{
		this.m_filterManager = oFF.OlapFilterManager.create(this);
	}
	return this.m_filterManager;
};
oFF.OlapEnvironment.prototype.getGeoManager = function()
{
	if (oFF.isNull(this.m_geoManager))
	{
		this.m_geoManager = oFF.QGeoManager.create(this);
	}
	return this.m_geoManager;
};
oFF.OlapEnvironment.prototype.getKeyFieldMetadataByDimension = function(key)
{
	let container = this.getCubeContainerInternal(key);
	return container.getKeyFieldMetadataByDimension(key);
};
oFF.OlapEnvironment.prototype.getKeyRefStorage = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getMicroCube = function(systemName, name)
{
	return this.getSystemContainerBase(systemName).getMicroCube(name);
};
oFF.OlapEnvironment.prototype.getMicroCubesNames = function(systemName)
{
	return this.getSystemContainer(systemName).getMicroCubesNames();
};
oFF.OlapEnvironment.prototype.getModelCapabilities = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getModelContent = function(modelName)
{
	return this.m_modelCache.getByKey(modelName);
};
oFF.OlapEnvironment.prototype.getModelLinkManager = function()
{
	if (oFF.isNull(this.m_modelLinkManager))
	{
		this.m_modelLinkManager = oFF.QModelDimensionLinksManager.create(this);
	}
	return this.m_modelLinkManager;
};
oFF.OlapEnvironment.prototype.getOlapEnv = function()
{
	return this;
};
oFF.OlapEnvironment.prototype.getPrequery = function(preQueryName)
{
	return this.m_prequeries.getByKey(preQueryName);
};
oFF.OlapEnvironment.prototype.getProcess = function()
{
	let application = this.getApplication();
	return oFF.isNull(application) ? null : application.getProcess();
};
oFF.OlapEnvironment.prototype.getQueryManager = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getQueryManagerByDataSource = function(systemName, datasourceName)
{
	let size = this.m_queryManagers.size();
	for (let i = 0; i < size; i++)
	{
		let queryManager = this.m_queryManagers.get(i);
		if (oFF.XString.isEqual(queryManager.getSystemName(), systemName) && queryManager.getDataSource() !== null && oFF.XString.isEqual(queryManager.getDataSource().getFullQualifiedName(), datasourceName))
		{
			return queryManager;
		}
	}
	return null;
};
oFF.OlapEnvironment.prototype.getQueryManagerByName = function(name)
{
	return this.m_queryManagers.getByKey(name);
};
oFF.OlapEnvironment.prototype.getQueryMetadata = function(key)
{
	let retValue = null;
	if (oFF.notNull(key))
	{
		let container = this.getCubeContainerInternal(key);
		retValue = container.getQueryMetadata(key);
	}
	return retValue;
};
oFF.OlapEnvironment.prototype.getQueryModel = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getRemoteBlendingCacheEntryCount = function()
{
	return this.m_rsDataMaxCacheEntries;
};
oFF.OlapEnvironment.prototype.getSession = function()
{
	return this.getProcess();
};
oFF.OlapEnvironment.prototype.getSharedQueryManager = function(datasetId)
{
	return this.m_sharedQueryManagers.getByKey(datasetId);
};
oFF.OlapEnvironment.prototype.getStateManager = function()
{
	return this.m_stateManager;
};
oFF.OlapEnvironment.prototype.getSystemContainer = function(systemName)
{
	let theSystemName = systemName;
	if (oFF.isNull(theSystemName))
	{
		theSystemName = "@defaultSys";
	}
	let systemContainer = this.m_systems.getByKey(theSystemName);
	if (oFF.isNull(systemContainer))
	{
		systemContainer = oFF.OlapEnvSystem.create(this, theSystemName);
		this.m_systems.put(theSystemName, systemContainer);
	}
	return systemContainer;
};
oFF.OlapEnvironment.prototype.getSystemContainerBase = function(systemName)
{
	return this.getSystemContainer(systemName);
};
oFF.OlapEnvironment.prototype.getSystemName = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getTraceChunk = function()
{
	let chunk = this.m_traces;
	if (oFF.notNull(this.m_traces))
	{
		this.m_traceOffset = this.m_traceOffset + this.m_traces.size();
		this.m_traces = oFF.XList.create();
	}
	return chunk;
};
oFF.OlapEnvironment.prototype.getTraceOffset = function()
{
	return this.m_traceOffset;
};
oFF.OlapEnvironment.prototype.getTracingLog = function()
{
	if (oFF.isNull(this.m_traces))
	{
		return "[Tracing not enabled]";
	}
	let buffer = oFF.XStringBuffer.create();
	for (let i = 0; i < this.m_traces.size(); i++)
	{
		let cmd = this.m_traces.get(i);
		buffer.appendLine(cmd.toString());
	}
	return buffer.toString();
};
oFF.OlapEnvironment.prototype.getTransientQueryManager = function(preQueryName)
{
	return this.m_transientQueryManager.getByKey(preQueryName);
};
oFF.OlapEnvironment.prototype.getVariableContainer = function()
{
	return null;
};
oFF.OlapEnvironment.prototype.getVariableProcessor = function()
{
	return this.m_varProcessor;
};
oFF.OlapEnvironment.prototype.getVisualizationTemplateManager = function()
{
	if (oFF.isNull(this.m_visualizationTemplateManager))
	{
		this.m_visualizationTemplateManager = oFF.QFactory.createVisualizationTemplateManager(this);
	}
	return this.m_visualizationTemplateManager;
};
oFF.OlapEnvironment.prototype.hasBLOBForResourceId = function(resourceKey)
{
	return this.m_resourceToStringRep.containsKey(resourceKey);
};
oFF.OlapEnvironment.prototype.invalidateRemoteBlendingCache = function()
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_remoteBlendingCache);
	this.m_remoteBlendingCache.clear();
};
oFF.OlapEnvironment.prototype.invalidateRemoteBlendingCacheByDataSource = function(dataSourceName)
{
	let cacheEntries = this.m_remoteBlendingCache.getValuesAsReadOnlyList();
	for (let i = cacheEntries.size() - 1; i >= 0; i--)
	{
		if (oFF.XString.isEqual(cacheEntries.get(i).getDataSourceName(), dataSourceName))
		{
			this.invalidateRemoteBlendingCacheEntry(this.m_remoteBlendingCache.getKeysAsReadOnlyList().get(i));
		}
	}
};
oFF.OlapEnvironment.prototype.invalidateRemoteBlendingCacheEntry = function(cacheId)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(cacheId))
	{
		oFF.XObjectExt.release(this.m_remoteBlendingCache.getByKey(cacheId));
		this.m_remoteBlendingCache.remove(cacheId);
	}
};
oFF.OlapEnvironment.prototype.isCachingEnabled = function()
{
	let session = this.getSession();
	let isCachingEnabled = false;
	if (oFF.notNull(session))
	{
		isCachingEnabled = session.hasFeature(oFF.FeatureToggleOlap.METADATA_CACHING);
	}
	return isCachingEnabled;
};
oFF.OlapEnvironment.prototype.isTracing = function()
{
	return oFF.notNull(this.m_traces);
};
oFF.OlapEnvironment.prototype.isValidMicroCubeName = function(systemName, name)
{
	return this.getSystemContainer(systemName).isValidMicroCubeName(name);
};
oFF.OlapEnvironment.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	let pair = customIdentifier;
	let listener = pair.getFirstObject();
	let targetCustomIdentifier = pair.getSecondObject();
	let cmdContext = null;
	if (oFF.notNull(queryManager))
	{
		cmdContext = this.selectCmds(queryManager);
	}
	let extResult2 = oFF.ExtResult.create(cmdContext, extResult);
	listener.onCmdContextCreated(extResult2, cmdContext, targetCustomIdentifier);
};
oFF.OlapEnvironment.prototype.overwriteQueryMetadata = function(key, entry)
{
	if (oFF.notNull(key))
	{
		let container = this.getCubeContainerInternal(key);
		container.overwriteQueryMetadata(key, entry);
	}
};
oFF.OlapEnvironment.prototype.processCmdContextCreation = function(syncType, listener, customIdentifier, serviceConfig, asBackgroundThread)
{
	let pair = oFF.XPair.create(listener, customIdentifier);
	serviceConfig.processQueryManagerCreation(oFF.SyncType.NON_BLOCKING, this, pair);
	return null;
};
oFF.OlapEnvironment.prototype.processQueryManagerCreationWithBlendingDefinition = function(syncType, listener, customIdentifier, blendingDefinition)
{
	return this.m_queryManagerHandler.processQueryManagerCreationWithBlendingDefinition(syncType, listener, customIdentifier, blendingDefinition);
};
oFF.OlapEnvironment.prototype.processQueryManagerCreationWithDataSourceName = function(syncType, listener, customIdentifier, systemName, dataSourceName)
{
	return this.m_queryManagerHandler.processQueryManagerCreationWithDataSourceName(syncType, listener, customIdentifier, systemName, dataSourceName);
};
oFF.OlapEnvironment.prototype.putTransientQueryManager = function(preQueryName, transientQueryManager)
{
	this.m_transientQueryManager.put(preQueryName, transientQueryManager);
};
oFF.OlapEnvironment.prototype.registerQueryManager = function(queryManager)
{
	this.m_queryManagers.add(queryManager);
};
oFF.OlapEnvironment.prototype.registerSharedQueryManager = function(datasetId, sharedQueryManager)
{
	this.m_sharedQueryManagers.put(datasetId, sharedQueryManager);
};
oFF.OlapEnvironment.prototype.releaseAllQueryMetadata = function()
{
	let systemNamesIter = this.m_systems.getKeysAsIterator();
	while (systemNamesIter.hasNext())
	{
		let envSystem = this.getSystemContainer(systemNamesIter.next());
		envSystem.releaseAllQueryMetadata();
	}
};
oFF.OlapEnvironment.prototype.releaseDimensionMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	container.releaseDimensionMetadataByKey(key);
};
oFF.OlapEnvironment.prototype.releaseFieldMetadataByKey = function(key)
{
	let container = this.getCubeContainerInternal(key);
	container.releaseFieldMetadataByKey(key);
};
oFF.OlapEnvironment.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_queryManagers))
	{
		for (let i = 0; i < this.m_queryManagers.size(); i++)
		{
			let queryManager = this.m_queryManagers.get(i);
			oFF.XObjectExt.release(queryManager);
		}
		oFF.XObjectExt.release(this.m_queryManagers);
		this.m_queryManagers = null;
	}
	this.m_systems = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_systems);
	this.m_varProcessor = oFF.XObjectExt.release(this.m_varProcessor);
	this.m_stateManager = oFF.XObjectExt.release(this.m_stateManager);
	this.m_queryManagerHandler = oFF.XObjectExt.release(this.m_queryManagerHandler);
	this.m_customHierarchyRepo = oFF.XObjectExt.release(this.m_customHierarchyRepo);
	this.m_remoteBlendingCache = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_remoteBlendingCache);
	this.m_application = null;
	this.m_resourceToStringRep = oFF.XObjectExt.release(this.m_resourceToStringRep);
	this.m_systems = oFF.XObjectExt.release(this.m_systems);
	this.m_filterManager = oFF.XObjectExt.release(this.m_filterManager);
	this.m_visualizationTemplateManager = oFF.XObjectExt.release(this.m_visualizationTemplateManager);
	this.m_geoManager = oFF.XObjectExt.release(this.m_geoManager);
	this.m_modelLinkManager = oFF.XObjectExt.release(this.m_modelLinkManager);
	this.m_clientQueryObjectManager = oFF.XObjectExt.release(this.m_clientQueryObjectManager);
	this.m_filterAcrossModelsLovCacheManager = oFF.XObjectExt.release(this.m_filterAcrossModelsLovCacheManager);
	this.m_prequeries = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_prequeries);
	this.m_transientQueryManager = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_transientQueryManager);
	this.m_sharedQueryManagers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_sharedQueryManagers);
	this.m_allowedFormulaOperators = oFF.XObjectExt.release(this.m_allowedFormulaOperators);
	this.m_supportedFormulaOperators = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_supportedFormulaOperators);
	oFF.DfNameObject.prototype.releaseObject.call( this );
};
oFF.OlapEnvironment.prototype.releaseQueryMetadata = function(key)
{
	if (oFF.notNull(key))
	{
		let container = this.getCubeContainerInternal(key);
		container.releaseQueryMetadata(key);
	}
};
oFF.OlapEnvironment.prototype.releaseQueryMetadataExt = function(systemName, typeName, schemaName, packageName, objectName)
{
	let datasource = oFF.QFactory.createDataSource();
	datasource.setSchemaName(schemaName);
	datasource.setPackageName(packageName);
	datasource.setObjectName(objectName);
	datasource.setType(oFF.MetaObjectType.lookup(typeName));
	let systemContainer = this.getSystemContainer(systemName);
	if (oFF.notNull(systemContainer))
	{
		let cacheKeyName = datasource.getCacheKeyName();
		let cubeContainer = systemContainer.getCubeContainer(cacheKeyName);
		if (oFF.notNull(cubeContainer))
		{
			cubeContainer.releaseAllQueryMetadata();
			oFF.XObjectExt.release(datasource);
		}
	}
};
oFF.OlapEnvironment.prototype.releaseResource = function(resourceKey)
{
	this.m_resourceToStringRep.freeEntry(resourceKey);
};
oFF.OlapEnvironment.prototype.removeMicroCubeName = function(systemName, name)
{
	this.getSystemContainerBase(systemName).removeMicroCubeName(name);
};
oFF.OlapEnvironment.prototype.removePrequery = function(preQueryName)
{
	return this.m_prequeries.remove(preQueryName);
};
oFF.OlapEnvironment.prototype.replaceVariable = function(name)
{
	return oFF.isNull(this.m_variables) ? name : this.m_variables.getStringByKeyExt(name, name);
};
oFF.OlapEnvironment.prototype.select = function(sigSelExpression)
{
	return oFF.CommandSpaceFactory.createCommandSpaceWithSelection(this, sigSelExpression);
};
oFF.OlapEnvironment.prototype.selectCmds = function(olapObject)
{
	return oFF.CommandSpaceFactory.createCommandSpaceWithElement(this, olapObject);
};
oFF.OlapEnvironment.prototype.setAllowedFormulaOperatorList = function(allowedFormulaOperators)
{
	this.m_allowedFormulaOperators = allowedFormulaOperators;
};
oFF.OlapEnvironment.prototype.setApplication = function(application)
{
	this.m_application = oFF.XWeakReferenceUtil.getWeakRef(application);
};
oFF.OlapEnvironment.prototype.setCachingEnabled = function(isCachingEnabled)
{
	if (isCachingEnabled)
	{
		this.getSession().activateFeatureToggle(oFF.FeatureToggleOlap.METADATA_CACHING);
	}
	else
	{
		this.getSession().deactivateFeatureToggle(oFF.FeatureToggleOlap.METADATA_CACHING);
	}
};
oFF.OlapEnvironment.prototype.setContext = oFF.noSupport;
oFF.OlapEnvironment.prototype.setDimensionMetadata = function(metadata)
{
	let container = this.getCubeContainerInternal(metadata.getCacheKey());
	container.setDimensionMetadata(metadata);
};
oFF.OlapEnvironment.prototype.setFieldMetadata = function(metadata)
{
	let container = this.getCubeContainerInternal(metadata.getCacheKey());
	container.setFieldMetadata(metadata);
};
oFF.OlapEnvironment.prototype.setModelByContent = function(modelName, model)
{
	this.m_modelCache.put(modelName, model);
};
oFF.OlapEnvironment.prototype.setModelByJsonObject = function(modelName, type, modelContent)
{
	let modelObject = oFF.XContent.createJsonObjectContent(type, modelContent);
	this.setModelByContent(modelName, modelObject);
};
oFF.OlapEnvironment.prototype.setQueryMetadata = function(key, entry)
{
	if (oFF.notNull(key))
	{
		let container = this.getCubeContainerInternal(key);
		container.setQueryMetadata(key, entry);
	}
};
oFF.OlapEnvironment.prototype.setRemoteBlendingCacheEntryCount = function(entryCount)
{
	this.m_rsDataMaxCacheEntries = oFF.XMath.max(entryCount, 0);
	while (this.m_remoteBlendingCache.hasElements() && this.m_remoteBlendingCache.size() > this.m_rsDataMaxCacheEntries)
	{
		this.invalidateRemoteBlendingCacheEntry(this.m_remoteBlendingCache.getKeysAsReadOnlyList().get(0));
	}
};
oFF.OlapEnvironment.prototype.setReplacementVariables = function(variables, varPrefix, varPostfix, lookupNamespace)
{
	this.m_variables = variables;
};
oFF.OlapEnvironment.prototype.setTracing = function(enableTracing)
{
	if (this.m_isCmdTracing !== enableTracing)
	{
		this.m_isCmdTracing = enableTracing;
		if (enableTracing)
		{
			this.m_traces = oFF.XList.create();
			this.m_traceOffset = 0;
		}
		else
		{
			this.m_traces = oFF.XObjectExt.release(this.m_traces);
		}
	}
};
oFF.OlapEnvironment.prototype.setupEnv = function(application)
{
	this.setApplication(application);
	let process = this.getSession();
	if (oFF.notNull(process))
	{
		process.setEntity(oFF.ProcessEntity.OLAP_ENVIRONMENT, this);
	}
	this.m_remoteBlendingCache = oFF.XLinkedHashMapByString.create();
	this.m_resourceToStringRep = oFF.QCache.create(process);
	this.m_queryManagers = oFF.XListOfNameObject.create();
	this.m_varProcessor = oFF.OlapEnvVarProcessor.create(this);
	this.m_stateManager = oFF.OlapEnvStateManager.create(this, process);
	this.m_queryManagerHandler = oFF.OlapEnvQueryManagerHandler.create(this);
	this.m_systems = oFF.XHashMapByString.create();
	this.m_customHierarchyRepo = oFF.CustomHierarchyRepository.create(application);
	this.m_prequeries = oFF.XLinkedHashMapByString.create();
	this.m_transientQueryManager = oFF.XHashMapByString.create();
	this.m_sharedQueryManagers = oFF.XHashMapByString.create();
	this.m_modelCache = oFF.QCache.create(process);
};
oFF.OlapEnvironment.prototype.toString = function()
{
	return oFF.isNull(this.m_application) ? "" : this.m_application.toString();
};
oFF.OlapEnvironment.prototype.unregisterQueryManager = function(queryManager)
{
	if (oFF.notNull(this.m_queryManagers))
	{
		this.m_queryManagers.removeElement(queryManager);
	}
	let iter = this.m_sharedQueryManagers.getKeysAsIterator();
	while (iter.hasNext())
	{
		let key = iter.next();
		if (queryManager.isEqualTo(this.m_sharedQueryManagers.getByKey(key)))
		{
			this.m_sharedQueryManagers.remove(key);
		}
	}
};
oFF.OlapEnvironment.prototype.updateDynamicVariablesForQueryManager = function(queryManager, syncType, listener, customIdentifier)
{
	let systemName = queryManager.getSystemDescription().getSystemName();
	let systemContainer = this.getSystemContainer(systemName);
	systemContainer.updateDynamicVariablesForQueryManager(queryManager, syncType, listener, customIdentifier);
};
oFF.OlapEnvironment.prototype.updateRemoteBlendingCacheId = function(queryManager, outdatedCacheId)
{
	let cacheId = queryManager.getResultSetPersistenceIdentifier();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(cacheId) && oFF.XStringUtils.isNotNullAndNotEmpty(outdatedCacheId) && !oFF.XString.isEqual(outdatedCacheId, cacheId) && this.m_remoteBlendingCache.containsKey(outdatedCacheId))
	{
		this.m_remoteBlendingCache.put(cacheId, this.m_remoteBlendingCache.getByKey(outdatedCacheId));
		this.m_remoteBlendingCache.remove(outdatedCacheId);
	}
};
oFF.OlapEnvironment.prototype.useBLOBDetailsForResourceId = function(resourceKey)
{
	return this.m_resourceToStringRep.useEntry(resourceKey);
};

oFF.QueryManagerProcessingSequence = function() {};
oFF.QueryManagerProcessingSequence.prototype = new oFF.SyncActionSequence();
oFF.QueryManagerProcessingSequence.prototype._ff_c = "QueryManagerProcessingSequence";

oFF.QueryManagerProcessingSequence.createSequence = function(queryManager, resultSetContainer, varSubmitRequired, enforceCustomHierarchyRequests)
{
	let executor = new oFF.QueryManagerProcessingSequence();
	executor.setupAction(null, null, null, queryManager);
	executor.m_resultSetContainer = resultSetContainer;
	executor.m_varSubmitRequired = varSubmitRequired;
	executor.m_enforceCustomHierarchyRequests = enforceCustomHierarchyRequests;
	return executor;
};
oFF.QueryManagerProcessingSequence.supportsCustomHierarchies = function(queryModel)
{
	return oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP) && queryModel.getModelCapabilities().supportsCustomHierarchy();
};
oFF.QueryManagerProcessingSequence.prototype.m_enforceCustomHierarchyRequests = false;
oFF.QueryManagerProcessingSequence.prototype.m_resultSetContainer = null;
oFF.QueryManagerProcessingSequence.prototype.m_varSubmitRequired = false;
oFF.QueryManagerProcessingSequence.prototype.processCustomHierarchySubmits = function(hierarchyDefinitions, enforceCustomHierarchyRequests)
{
	if (oFF.notNull(hierarchyDefinitions))
	{
		for (let i = 0; i < hierarchyDefinitions.size(); i++)
		{
			let customHierarchyDefinition = hierarchyDefinitions.get(i);
			let customHierarchyProvider = this.getActionContext().createCustomHierarchyProvider(customHierarchyDefinition, enforceCustomHierarchyRequests);
			this.addAction(customHierarchyProvider.processExecution(oFF.SyncType.DELAYED, null, null));
		}
	}
};
oFF.QueryManagerProcessingSequence.prototype.processSynchronization = function(syncType)
{
	let queryManager = this.getActionContext();
	let queryModel = queryManager.getQueryModel();
	let resultAction = this.m_resultSetContainer.processExecution(oFF.SyncType.DELAYED, null, null);
	if (oFF.QueryManagerProcessingSequence.supportsCustomHierarchies(queryModel))
	{
		let customHierarchyRepo = queryModel.getOlapEnv().getCustomHierarchyRepository();
		this.processCustomHierarchySubmits(customHierarchyRepo.getCustomHierarchiesUsedInQueryModel(queryModel), this.m_enforceCustomHierarchyRequests);
	}
	if (this.m_varSubmitRequired)
	{
		let submitAction = queryManager.submitVariables(oFF.SyncType.DELAYED, null, null);
		if (oFF.notNull(submitAction))
		{
			this.addAction(submitAction);
		}
	}
	this.setMainAction(resultAction);
	return oFF.SyncActionSequence.prototype.processSynchronization.call( this , syncType);
};
oFF.QueryManagerProcessingSequence.prototype.releaseObjectInternal = function()
{
	oFF.SyncActionSequence.prototype.releaseObjectInternal.call( this );
	this.m_resultSetContainer = null;
};

oFF.ValueHelpProcessingSequence = function() {};
oFF.ValueHelpProcessingSequence.prototype = new oFF.SyncActionSequence();
oFF.ValueHelpProcessingSequence.prototype._ff_c = "ValueHelpProcessingSequence";

oFF.ValueHelpProcessingSequence.createSequence = function(queryManager, dimension, resultSetContainer, exportValueHelp, requiresCustomHierarchySubmit, requiresVariableSubmit)
{
	let executor = new oFF.ValueHelpProcessingSequence();
	executor.setupAction(null, null, null, queryManager);
	executor.m_resultSetContainer = resultSetContainer;
	executor.m_dimension = dimension;
	executor.m_exportValueHelp = exportValueHelp;
	executor.m_requiresCustomHierarchySubmit = requiresCustomHierarchySubmit;
	executor.m_requiresVariableSubmit = requiresVariableSubmit;
	return executor;
};
oFF.ValueHelpProcessingSequence.customHierarchySubmitRequiredForValueHelp = function(dimension)
{
	return oFF.ValueHelpProcessingSequence.getCustomHierarchyDefinition(dimension) !== null;
};
oFF.ValueHelpProcessingSequence.getCustomHierarchyDefinition = function(dimension)
{
	let customHierarchyDefinition = null;
	if (oFF.ValueHelpProcessingSequence.supportsCustomHierarchies(dimension.getQueryModel()) && dimension.isSelectorHierarchyActive())
	{
		let selectorHierarchyName = dimension.getSelectorHierarchyName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(selectorHierarchyName))
		{
			customHierarchyDefinition = dimension.getOlapEnv().getCustomHierarchyRepository().getCustomHierarchyDefinitionByName(selectorHierarchyName);
		}
		if (oFF.isNull(customHierarchyDefinition) && dimension.isHierarchyActive())
		{
			customHierarchyDefinition = dimension.getCustomHierarchyDefinition();
		}
	}
	return customHierarchyDefinition;
};
oFF.ValueHelpProcessingSequence.supportsCustomHierarchies = function(queryModel)
{
	return oFF.notNull(queryModel) && queryModel.getSystemType().isTypeOf(oFF.SystemType.ABAP) && queryModel.getModelCapabilities().supportsCustomHierarchy();
};
oFF.ValueHelpProcessingSequence.prototype.m_customHierarchySubmitAction = null;
oFF.ValueHelpProcessingSequence.prototype.m_dimension = null;
oFF.ValueHelpProcessingSequence.prototype.m_exportValueHelp = null;
oFF.ValueHelpProcessingSequence.prototype.m_requiresCustomHierarchySubmit = false;
oFF.ValueHelpProcessingSequence.prototype.m_requiresVariableSubmit = false;
oFF.ValueHelpProcessingSequence.prototype.m_resultSetContainer = null;
oFF.ValueHelpProcessingSequence.prototype.getDimensionStructureFromMainRequest = function(dimension)
{
	let request = this.getMainAction().getRequest();
	let analytics = oFF.PrUtils.getStructureProperty(request, "Analytics");
	let definition = oFF.PrUtils.getStructureProperty(analytics, "Definition");
	let dimensions = oFF.PrUtils.getListProperty(definition, "Dimensions");
	for (let i = 0; i < oFF.PrUtils.getListSize(dimensions, 0); i++)
	{
		let inaDimension = dimensions.getStructureAt(0);
		if (oFF.XString.isEqual(inaDimension.getStringByKey("Name"), dimension.getName()))
		{
			return inaDimension;
		}
	}
	return null;
};
oFF.ValueHelpProcessingSequence.prototype.onActionExecuted = function(syncAction)
{
	if (oFF.notNull(this.m_exportValueHelp) && syncAction === this.m_customHierarchySubmitAction)
	{
		let createdHierarchy = this.m_customHierarchySubmitAction.getData();
		if (oFF.notNull(createdHierarchy))
		{
			let dimension = createdHierarchy.getDimension();
			let inaDimension = oFF.notNull(dimension) ? this.getDimensionStructureFromMainRequest(dimension) : null;
			if (oFF.notNull(inaDimension))
			{
				this.m_exportValueHelp.exportHierarchy(dimension, inaDimension);
			}
		}
	}
};
oFF.ValueHelpProcessingSequence.prototype.processSynchronization = function(syncType)
{
	let queryManager = this.getActionContext();
	if (this.m_requiresCustomHierarchySubmit && oFF.ValueHelpProcessingSequence.supportsCustomHierarchies(queryManager.getQueryModel()))
	{
		let customHierarchyProvider = queryManager.createCustomHierarchyProvider(oFF.ValueHelpProcessingSequence.getCustomHierarchyDefinition(this.m_dimension), false);
		this.m_customHierarchySubmitAction = customHierarchyProvider.processExecution(oFF.SyncType.DELAYED, null, null);
		this.addAction(this.m_customHierarchySubmitAction);
	}
	if (this.m_requiresVariableSubmit)
	{
		let submitAction = queryManager.submitVariables(oFF.SyncType.DELAYED, null, null);
		if (oFF.notNull(submitAction))
		{
			this.addAction(submitAction);
		}
	}
	let resultAction = this.m_resultSetContainer.processExecution(oFF.SyncType.DELAYED, null, null);
	this.setMainAction(resultAction);
	return oFF.SyncActionSequence.prototype.processSynchronization.call( this , syncType);
};
oFF.ValueHelpProcessingSequence.prototype.releaseObjectInternal = function()
{
	oFF.SyncActionSequence.prototype.releaseObjectInternal.call( this );
	this.m_customHierarchySubmitAction = null;
	this.m_exportValueHelp = null;
	this.m_resultSetContainer = null;
	this.m_dimension = null;
};

oFF.QOlapSyncAction = function() {};
oFF.QOlapSyncAction.prototype = new oFF.DfRsSyncAction();
oFF.QOlapSyncAction.prototype._ff_c = "QOlapSyncAction";

oFF.QOlapSyncAction.prototype.getQueryManagerBase = function()
{
	if (this.getContext() === null)
	{
		return null;
	}
	return this.getContext().getQueryManager();
};
oFF.QOlapSyncAction.prototype.getQueryModelBase = function()
{
	let context = this.getContext();
	if (oFF.isNull(context))
	{
		return null;
	}
	return context.getQueryModel();
};
oFF.QOlapSyncAction.prototype.releaseObjectInternal = function() {};

oFF.BlendingProcess = function() {};
oFF.BlendingProcess.prototype = new oFF.DfRsSyncAction();
oFF.BlendingProcess.prototype._ff_c = "BlendingProcess";

oFF.BlendingProcess.ATTRIBUTE_FIELDS = "attributeFields";
oFF.BlendingProcess.DUMMY_CALCULATION = "DummyCalculation";
oFF.BlendingProcess.FIELDS = "attributes";
oFF.BlendingProcess.HIERARCHICAL_DIMENSIONS = "hierarchicalDimensions";
oFF.BlendingProcess.PRIMARY_MEASURE_FILTER = "primaryMeasureFilter";
oFF.BlendingProcess.SECONDARY_MEASURE_FILTER = "secondaryMeasureFilter";
oFF.BlendingProcess.create = function(blendableQueryManager, configs, runtimeBlendedQueryManager, lastState, isExportWorkflow)
{
	let blendingProcess = new oFF.BlendingProcess();
	blendingProcess.setupAction(null, null, null, blendableQueryManager.getQueryManager());
	blendingProcess.m_blendableQueryManager = blendableQueryManager;
	blendingProcess.m_configs = oFF.XList.create();
	blendingProcess.m_configs.addAll(configs);
	blendingProcess.m_primaryBlendedMeasures = oFF.XList.create();
	blendingProcess.m_outOfContextLinkDimensionNames = oFF.XList.create();
	blendingProcess.m_blendedDimensionInfoAxisMap = oFF.XHashMapByString.create();
	let copyRowBlendedDimensionInfos = oFF.XList.create();
	oFF.XCollectionUtils.addAllClones(copyRowBlendedDimensionInfos, blendableQueryManager.getBlendedDimensionsByAxis(oFF.AxisType.ROWS));
	blendingProcess.m_blendedDimensionInfoAxisMap.put(oFF.AxisType.ROWS.getName(), copyRowBlendedDimensionInfos);
	let copyColumnBlendedDimensionInfos = oFF.XList.create();
	oFF.XCollectionUtils.addAllClones(copyColumnBlendedDimensionInfos, blendableQueryManager.getBlendedDimensionsByAxis(oFF.AxisType.COLUMNS));
	blendingProcess.m_blendedDimensionInfoAxisMap.put(oFF.AxisType.COLUMNS.getName(), copyColumnBlendedDimensionInfos);
	blendingProcess.m_allBlendedDrillOperations = oFF.XList.create();
	oFF.XCollectionUtils.addAllClones(blendingProcess.m_allBlendedDrillOperations, blendableQueryManager.getBlendedDrillOperations());
	oFF.XCollectionUtils.addAllClones(blendingProcess.m_allBlendedDrillOperations, blendableQueryManager.getBlendedZoomDrills());
	blendingProcess.m_leafAccountDrillOperations = oFF.XList.create();
	blendingProcess.m_transientMembers = oFF.XHashMapByString.create();
	blendingProcess.m_transientPrimaryBlendedMeasures = oFF.XList.create();
	blendingProcess.m_transientFieldSelectionMemberNames = oFF.XList.create();
	blendingProcess.m_leafSortingOperations = oFF.XHashMapByString.create();
	blendingProcess.m_originalProcess = blendingProcess;
	blendingProcess.m_originalDimensionResultSetFields = oFF.XHashMapByString.create();
	blendingProcess.m_originalDimensionResultSetAttributes = oFF.XHashMapByString.create();
	blendingProcess.m_lastState = oFF.notNull(lastState) && !lastState.isReleased() ? lastState : oFF.XHashMapByString.create();
	blendingProcess.m_isExportWorkflow = isExportWorkflow;
	blendingProcess.m_automappingTimeLinkDimensionNames = oFF.XList.create();
	if (!oFF.BlendingUtils.containsFilterAcrossModels(blendableQueryManager))
	{
		blendingProcess.m_cachedRuntimeBlendedQueryManagerResult = runtimeBlendedQueryManager;
	}
	blendableQueryManager.clearTransientMeasures();
	blendingProcess.cleanupTransientState();
	blendingProcess.clearLeafSortingOperations();
	blendingProcess.preprocessBlendedCalculations();
	blendingProcess.preprocessThresholds();
	blendingProcess.processDrillLimitation();
	oFF.XCollectionUtils.forEach(blendingProcess.m_transientMembers.getValuesAsReadOnlyList(), (transientMembersByDatasetId) => {
		oFF.XCollectionUtils.forEach(transientMembersByDatasetId, (transientMember) => {
			blendableQueryManager.addTransientMeasure(transientMember);
		});
	});
	return blendingProcess;
};
oFF.BlendingProcess.moveOOCLinkedDimensionsToFreeAxis = function(blendedQueryModel, outOfContextLinkDimensionNames)
{
	let outOfContextLinkDimensionNamesIter = outOfContextLinkDimensionNames.getIterator();
	while (outOfContextLinkDimensionNamesIter.hasNext())
	{
		let outOfContextLinkDimension = blendedQueryModel.getDimensionByName(outOfContextLinkDimensionNamesIter.next());
		blendedQueryModel.getFreeAxis().add(outOfContextLinkDimension);
	}
};
oFF.BlendingProcess.prototype.m_allBlendedDrillOperations = null;
oFF.BlendingProcess.prototype.m_automappingTimeLinkDimensionNames = null;
oFF.BlendingProcess.prototype.m_blendableQueryManager = null;
oFF.BlendingProcess.prototype.m_blendedDimensionInfoAxisMap = null;
oFF.BlendingProcess.prototype.m_blendedQueryManager = null;
oFF.BlendingProcess.prototype.m_cachedRuntimeBlendedQueryManagerResult = null;
oFF.BlendingProcess.prototype.m_childProcess = null;
oFF.BlendingProcess.prototype.m_configs = null;
oFF.BlendingProcess.prototype.m_enableInaCacheHint = false;
oFF.BlendingProcess.prototype.m_isExportWorkflow = false;
oFF.BlendingProcess.prototype.m_lastState = null;
oFF.BlendingProcess.prototype.m_leafAccountDrillOperations = null;
oFF.BlendingProcess.prototype.m_leafSortingOperations = null;
oFF.BlendingProcess.prototype.m_originalDimensionResultSetAttributes = null;
oFF.BlendingProcess.prototype.m_originalDimensionResultSetFields = null;
oFF.BlendingProcess.prototype.m_originalProcess = null;
oFF.BlendingProcess.prototype.m_outOfContextLinkDimensionNames = null;
oFF.BlendingProcess.prototype.m_primaryBlendedMeasures = null;
oFF.BlendingProcess.prototype.m_queryManagerCreationSyncAction = null;
oFF.BlendingProcess.prototype.m_transientFieldSelectionMemberNames = null;
oFF.BlendingProcess.prototype.m_transientMembers = null;
oFF.BlendingProcess.prototype.m_transientPrimaryBlendedMeasures = null;
oFF.BlendingProcess.prototype.addAutoMappingTimeLinkDimensionNames = function(dimensionName)
{
	this.m_automappingTimeLinkDimensionNames.add(dimensionName);
};
oFF.BlendingProcess.prototype.addDummyCalculationMeasure = function(leafQueryManager)
{
	if (leafQueryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.DEFAULT)
	{
		return;
	}
	let queryModel = leafQueryManager.getQueryModel();
	let primaryCalculationDimension = queryModel.getPrimaryCalculationDimension();
	let primaryCalculationDimensionName = primaryCalculationDimension.getName();
	let filterRootElement = queryModel.getFilter().getDynamicFilter().getFilterRootElement();
	let memberNames = oFF.XHashSetOfString.create();
	memberNames.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(filterRootElement, primaryCalculationDimensionName));
	if (memberNames.isEmpty())
	{
		let linkedFilters = queryModel.getFilter().getLinkedFilters().getValuesAsReadOnlyList();
		for (let i = 0; i < linkedFilters.size(); i++)
		{
			let filterElement = linkedFilters.get(i).getFilterRootElement();
			if (oFF.QFilterUtilBase.filterContainsExclusion(filterElement, primaryCalculationDimensionName))
			{
				return;
			}
			memberNames.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(filterElement, primaryCalculationDimensionName));
		}
	}
	if (memberNames.isEmpty() || memberNames.size() === 1 && oFF.XString.isEqual(memberNames.getValuesAsReadOnlyList().get(0), "(MDS-all)"))
	{
		let dummyMeasure = oFF.QFactory.createFormulaMeasure(queryModel, primaryCalculationDimension, oFF.BlendingProcess.DUMMY_CALCULATION, null, oFF.BlendingProcess.DUMMY_CALCULATION);
		dummyMeasure.setFormula(oFF.QFactory.createFormulaConstantWithIntValue(leafQueryManager, 1));
		dummyMeasure.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_BLENDING_DEPENDENCY, "");
		let transientMemberList = this.m_transientMembers.getByKey(queryModel.getDatasetId());
		if (oFF.isNull(transientMemberList))
		{
			transientMemberList = oFF.XListOfNameObject.create();
			this.m_transientMembers.put(queryModel.getDatasetId(), transientMemberList);
		}
		transientMemberList.add(dummyMeasure);
		primaryCalculationDimension.addMeasure(dummyMeasure);
		let newMeasureFilter = queryModel.getConvenienceCommands().addSingleMemberFilterByDimension(primaryCalculationDimension, dummyMeasure.getAliasOrMemberName(), oFF.ComparisonOperator.EQUAL);
		newMeasureFilter.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
	}
};
oFF.BlendingProcess.prototype.addLeafSortingOperations = function(queryModel)
{
	let leafSortingOperations = this.m_leafSortingOperations.getByKey(queryModel.getDatasetId());
	if (oFF.notNull(leafSortingOperations))
	{
		for (let i = leafSortingOperations.size() - 1; i >= 0; i--)
		{
			let leafSortingOperation = leafSortingOperations.get(i);
			queryModel.getSortingManager().addSortOperation(leafSortingOperation);
			leafSortingOperations.removeElement(leafSortingOperation);
		}
		this.m_leafSortingOperations.remove(queryModel.getDatasetId());
	}
	if (queryModel.getTagging().containsKey(oFF.QTransientConstants.TAG_DISABLE_AUTO_ADD_BW_SERVER_SORTS))
	{
		queryModel.setAutoAddBWServerSortsEnabled(true);
		queryModel.getTagging().remove(oFF.QTransientConstants.TAG_DISABLE_AUTO_ADD_BW_SERVER_SORTS);
	}
};
oFF.BlendingProcess.prototype.addNewState = function(newState, dimension, key)
{
	if (oFF.notNull(dimension) && oFF.notNull(newState))
	{
		let memberNamesFromFilter = oFF.XHashSetOfString.create();
		let measureFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(dimension, true, true, true);
		oFF.XCollectionUtils.forEach(measureFilters, (filter) => {
			memberNamesFromFilter.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(filter, dimension.getName()));
		});
		newState.put(key, memberNamesFromFilter);
	}
};
oFF.BlendingProcess.prototype.addOriginalDimensionResultSetAttributes = function(dimensionCacheKey, originalResultSetAttributes)
{
	this.m_originalDimensionResultSetAttributes.put(dimensionCacheKey, originalResultSetAttributes);
};
oFF.BlendingProcess.prototype.addOriginalDimensionResultSetFields = function(dimensionCacheKey, originalResultSetFields)
{
	this.m_originalDimensionResultSetFields.put(dimensionCacheKey, originalResultSetFields);
};
oFF.BlendingProcess.prototype.addOutOfContextLinkDimensionName = function(dimensionName)
{
	this.m_outOfContextLinkDimensionNames.add(dimensionName);
};
oFF.BlendingProcess.prototype.addStructureMemberToLeafQueryModel = function(structureMember, isTransient)
{
	let queryManager = this.m_blendableQueryManager.getQueryManagerByDatasetId(structureMember.getQueryModel().getDatasetId());
	if (oFF.notNull(queryManager))
	{
		let queryModel = queryManager.getQueryModel();
		let primaryCalculationDimension = queryModel.getPrimaryCalculationDimension();
		let memberName = structureMember.getAliasOrMemberName();
		if (primaryCalculationDimension.getStructureMemberByAliasOrMember(memberName) === null)
		{
			primaryCalculationDimension.addMeasure(structureMember);
			if (isTransient)
			{
				primaryCalculationDimension.getTagging().put(oFF.QTransientConstants.createIsTransientMemberTag(memberName), "");
			}
			let measureFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(primaryCalculationDimension, true, true, true);
			let structureExistsInFilter = oFF.XCollectionUtils.contains(measureFilters, (filter) => {
				return oFF.XCollectionUtils.contains(filter, (element) => {
					return oFF.XString.isEqual(element.getLow().getString(), memberName);
				});
			});
			if (!structureExistsInFilter)
			{
				let measureFilter = oFF.QFilterUtil.getLinkedFilterOrDynamicFilterForDimension(primaryCalculationDimension);
				if (oFF.notNull(measureFilter))
				{
					let element = measureFilter.addNewCartesianElement();
					element.setLowString(memberName);
					if (isTransient)
					{
						element.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
					}
				}
			}
			oFF.BlendingMappingUtils.addTransientZoomOrVisibilityFilters(queryModel, primaryCalculationDimension, memberName, this.m_blendableQueryManager.supportsDrillOnBlendNodeOnly(), isTransient);
		}
	}
};
oFF.BlendingProcess.prototype.addStructureMemberToTransientMembers = function(structureMember)
{
	let datasetId = structureMember.getQueryModel().getDatasetId();
	let existingTransientList = this.m_transientMembers.getByKey(datasetId);
	if (oFF.isNull(existingTransientList))
	{
		existingTransientList = oFF.XListOfNameObject.create();
		this.m_transientMembers.put(datasetId, existingTransientList);
	}
	existingTransientList.add(structureMember);
	this.m_transientFieldSelectionMemberNames.add(structureMember.getAliasOrMemberName());
};
oFF.BlendingProcess.prototype.addTransientChildMembersRecursively = function(structureMember, transientMemberList, parentChildMemberMapForDataset, blendDimensionContext, measureFilters, isTransientMeasures)
{
	let childMembers = parentChildMemberMapForDataset.getByKey(structureMember.getName());
	if (oFF.isNull(childMembers))
	{
		return;
	}
	let childMembersIter = childMembers.getIterator();
	while (childMembersIter.hasNext())
	{
		let childMemberName = childMembersIter.next();
		let childStructureMember = blendDimensionContext.getStructureMemberByAliasOrMember(childMemberName);
		if (!(oFF.XCollectionUtils.contains(measureFilters, (measureFilter) => {
			return oFF.notNull(measureFilter) && !measureFilter.isEmpty();
		}) && childStructureMember.isMeasureInUse(blendDimensionContext, isTransientMeasures) && blendDimensionContext.getAllStructureMembers().contains(structureMember)))
		{
			transientMemberList.add(childStructureMember);
			this.addTransientChildMembersRecursively(childStructureMember, transientMemberList, parentChildMemberMapForDataset, blendDimensionContext, measureFilters, isTransientMeasures);
		}
	}
};
oFF.BlendingProcess.prototype.applyBlendedMeasures = function(blendedMeasures, isTransientMeasures)
{
	if (oFF.notNull(this.m_blendedQueryManager) && oFF.notNull(blendedMeasures))
	{
		let queryModel = this.m_blendedQueryManager.getQueryModel();
		let calculationDimension = queryModel.getPrimaryCalculationDimension();
		let blendedMeasuresIter = blendedMeasures.getIterator();
		while (blendedMeasuresIter.hasNext())
		{
			let blendedMeasure = blendedMeasuresIter.next();
			if (blendedMeasure.getMemberType() === oFF.MemberType.FORMULA)
			{
				let blendedFormulaMeasure = blendedMeasure;
				if (calculationDimension.getStructureMember(blendedMeasure.getName()) !== null)
				{
					calculationDimension.removeMeasure(blendedMeasure.getName());
				}
				let runtimeMeasure = oFF.QFactory.createFormulaMeasure(queryModel, calculationDimension, blendedMeasure.getName(), blendedMeasure.getText(), null);
				runtimeMeasure.setFormula(oFF.BlendingUtils.convertToBlendedFormula(blendedFormulaMeasure.getFormula(), runtimeMeasure));
				if (blendedMeasure.getNumericScale() !== null)
				{
					runtimeMeasure.setNumericScale(blendedMeasure.getNumericScale().getInteger());
				}
				if (isTransientMeasures)
				{
					runtimeMeasure.setResultVisibility(oFF.ResultVisibility.HIDDEN);
				}
				calculationDimension.addMeasure(runtimeMeasure);
			}
		}
	}
};
oFF.BlendingProcess.prototype.applyBlendingZeroSuppressionOnAxis = function(axisType)
{
	let blendedQueryModel = this.m_blendedQueryManager.getQueryModel();
	let supportsNullZeroSuppression = blendedQueryModel.getModelCapabilities().supportsNullZeroSuppression();
	let supportsZeroSuppression = blendedQueryModel.getModelCapabilities().supportsZeroSuppression();
	if (supportsNullZeroSuppression || supportsZeroSuppression)
	{
		let axis = blendedQueryModel.getAxis(axisType);
		if (oFF.notNull(axis))
		{
			let blendingZeroSuppressionType = this.m_blendableQueryManager.getBlendingZeroSuppressionType(axisType);
			if (oFF.notNull(blendingZeroSuppressionType))
			{
				axis.setZeroSuppressionType(blendingZeroSuppressionType);
			}
			else
			{
				axis.setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
			}
		}
	}
};
oFF.BlendingProcess.prototype.applyDimensionSorts = function(blendableDimensionSorts)
{
	let blendedQueryModel = this.m_blendedQueryManager.getQueryModel();
	let sortingManager = blendedQueryModel.getSortingManager();
	let supportsConcurrentSorting = this.m_blendableQueryManager.supportsConcurrentDimensionAndMeasureSorting();
	let blendableDimensionSortsIterator = blendableDimensionSorts.getIterator();
	while (blendableDimensionSortsIterator.hasNext())
	{
		let blendableDimensionSort = blendableDimensionSortsIterator.next();
		if (!supportsConcurrentSorting || oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(blendableDimensionSort.getDimensionId(), blendableDimensionSort.getDatasetId(), blendedQueryModel) !== null)
		{
			oFF.BlendingSortUtils.addSortByDimension(this.m_blendableQueryManager, blendedQueryModel, sortingManager, blendableDimensionSort);
		}
	}
};
oFF.BlendingProcess.prototype.applyMeasureRenames = function()
{
	let blendedQueryModel = this.m_blendedQueryManager.getQueryModel();
	let measureDimension = blendedQueryModel.getPrimaryCalculationDimension();
	let blendedStructureMembers = measureDimension.getLoadedStructureMembers();
	let blendedStructureMembersIterator = blendedStructureMembers.getIterator();
	while (blendedStructureMembersIterator.hasNext())
	{
		let blendedStructureMember = blendedStructureMembersIterator.next();
		if (oFF.notNull(blendedStructureMember) && !blendedStructureMember.isReleased())
		{
			let blendedStructureMemberName = blendedStructureMember.getName();
			let leafStructureMember = oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMember(blendedQueryModel, blendedStructureMemberName, true);
			if (oFF.notNull(leafStructureMember) && leafStructureMember.hasOverrideTextDefined())
			{
				let leafOverrideText = leafStructureMember.getText();
				blendedStructureMember.setOverrideText(leafOverrideText);
			}
		}
	}
};
oFF.BlendingProcess.prototype.applyMeasureSort = function(blendableMeasureSort)
{
	let blendableQueryManager = this.m_blendableQueryManager;
	let blendedQueryModel = this.m_blendedQueryManager.getQueryModel();
	let primaryMeasureName = null;
	if (blendableMeasureSort.getPrimaryMeasureName() !== null)
	{
		let primaryMeasure;
		if (!blendableMeasureSort.isPrimaryMeasureBlended() && blendableMeasureSort.getPrimaryDatasetId() !== null)
		{
			primaryMeasure = oFF.BlendingUtils.getBlendedMeasureMemberFromLeafMeasureMember(blendableMeasureSort.getPrimaryMeasureName(), true, blendableMeasureSort.getPrimaryDatasetId(), this.m_blendableQueryManager, blendedQueryModel);
		}
		else
		{
			primaryMeasure = blendedQueryModel.getPrimaryCalculationDimension().getStructureMember(blendableMeasureSort.getPrimaryMeasureName());
		}
		if (oFF.notNull(primaryMeasure))
		{
			primaryMeasureName = primaryMeasure.getName();
		}
	}
	let secondaryMeasureName = null;
	if (blendableMeasureSort.getSecondaryMeasureName() !== null)
	{
		let secondaryMeasure;
		if (!blendableMeasureSort.isSecondaryMeasureBlended() && blendableMeasureSort.getSecondaryDatasetId() !== null)
		{
			secondaryMeasure = oFF.BlendingUtils.getBlendedMeasureMemberFromLeafMeasureMember(blendableMeasureSort.getSecondaryMeasureName(), false, blendableMeasureSort.getSecondaryDatasetId(), this.m_blendableQueryManager, blendedQueryModel);
		}
		else
		{
			secondaryMeasure = blendedQueryModel.getSecondaryCalculationDimension().getStructureMember(blendableMeasureSort.getSecondaryMeasureName());
		}
		if (oFF.notNull(secondaryMeasure))
		{
			secondaryMeasureName = secondaryMeasure.getName();
		}
	}
	if (oFF.isNull(secondaryMeasureName) && !blendableQueryManager.isAccountSecondaryMeasureDimensionOnNoneAxis())
	{
		secondaryMeasureName = oFF.QFilterUtil.getFirstMemberNameFromSecondaryCalculationDimensionDynamicFilter(blendedQueryModel);
	}
	let relatedElementsSortList = blendableMeasureSort.getRelatedElementsList();
	let relatedElementsList = oFF.XList.create();
	if (relatedElementsSortList.size() > 0)
	{
		for (let i = 0; i < relatedElementsSortList.size(); i++)
		{
			let relatedElement = relatedElementsSortList.get(i);
			let datasetId = relatedElement.getDatasetId();
			let dimensionId = relatedElement.getDimensionId();
			let memberId = relatedElement.getMemberId();
			let sortDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(dimensionId, datasetId, blendedQueryModel);
			if (oFF.notNull(sortDimension))
			{
				relatedElementsList.add(oFF.QFactory.createDimensionElement(sortDimension.getKeyField(), sortDimension.getHierarchyName(), memberId));
			}
		}
	}
	let secondaryVersionDimensionMembers = blendableMeasureSort.getSecondaryVersionDimensionMembers();
	if (secondaryVersionDimensionMembers.size() > 0)
	{
		let relatedAndVersionDimensionElements = oFF.XList.create();
		let primaryVersionDimension = blendableQueryManager.getPrimaryQueryManager().getQueryModel().getVersionDimension();
		if (oFF.notNull(primaryVersionDimension))
		{
			let primaryVersionDimensionElement = oFF.QFactory.createDimensionElement(primaryVersionDimension.getKeyField(), "", blendableMeasureSort.getVersionElementId());
			relatedAndVersionDimensionElements.add(primaryVersionDimensionElement);
		}
		let secondaryQueryManagers = this.m_blendableQueryManager.getSecondaryQueryManagers();
		for (let i = 0; i < secondaryQueryManagers.size(); i++)
		{
			let secondaryQueryModel = secondaryQueryManagers.get(i).getQueryModel();
			let secondaryVersionDimension = secondaryQueryModel.getVersionDimension();
			if (oFF.notNull(secondaryVersionDimension))
			{
				let secondaryDimensionElementVersion = oFF.QFactory.createDimensionElement(secondaryVersionDimension.getKeyField(), "", secondaryVersionDimensionMembers.getByKey(secondaryQueryModel.getDatasetId()));
				relatedAndVersionDimensionElements.add(secondaryDimensionElementVersion);
			}
		}
		if (relatedElementsList.size() > 0)
		{
			relatedAndVersionDimensionElements.addAll(relatedElementsList);
		}
		oFF.QSortUtils.addSortByMeasureEx(blendedQueryModel, primaryMeasureName, secondaryMeasureName, blendableMeasureSort.getSortDirection(), !blendableMeasureSort.isPreserveGrouping(), null, null, relatedAndVersionDimensionElements);
	}
	else
	{
		let versionDimension = null;
		if (blendableMeasureSort.getVersionDimension() !== null)
		{
			versionDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(blendableMeasureSort.getVersionDimension().getName(), blendableMeasureSort.getVersionDimension().getQueryModel().getDatasetId(), blendedQueryModel);
		}
		if (relatedElementsList.size() > 0)
		{
			oFF.QSortUtils.addSortByMeasureEx(blendedQueryModel, primaryMeasureName, secondaryMeasureName, blendableMeasureSort.getSortDirection(), !blendableMeasureSort.isPreserveGrouping(), blendableMeasureSort.getVersionElementId(), versionDimension, relatedElementsList);
		}
		else
		{
			oFF.QSortUtils.addSortByMeasure(blendedQueryModel, primaryMeasureName, secondaryMeasureName, blendableMeasureSort.getSortDirection(), !blendableMeasureSort.isPreserveGrouping(), blendableMeasureSort.getVersionElementId(), versionDimension);
		}
	}
};
oFF.BlendingProcess.prototype.applyRanks = function()
{
	let blendedQueryModel = this.m_blendedQueryManager.getQueryModel();
	let rankSettingsIter = this.m_blendableQueryManager.getRankSettings().getIterator();
	let blendedRankSettings = oFF.XList.create();
	while (rankSettingsIter.hasNext())
	{
		let rankSettings = rankSettingsIter.next();
		let blendRankSettings = oFF.QFactory.createRankSettings();
		blendRankSettings.copyFrom(rankSettings, null);
		if (!blendRankSettings.isBlendedPrimaryMeasure())
		{
			let blendedMeasureMember = blendedQueryModel.getPrimaryCalculationDimension().getStructureMember(blendRankSettings.getMeasure());
			if (oFF.isNull(blendedMeasureMember))
			{
				blendedMeasureMember = oFF.BlendingUtils.getBlendedMeasureMemberFromLeafMeasureMember(blendRankSettings.getMeasure(), true, blendRankSettings.getPrimaryMeasureDatasetId(), this.m_blendableQueryManager, blendedQueryModel);
				if (oFF.isNull(blendedMeasureMember))
				{
					let structureMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(blendRankSettings.getMeasure(), this.m_blendableQueryManager.getClientQueryObjectStorageName(), true);
					if (oFF.notNull(structureMember))
					{
						blendedMeasureMember = oFF.BlendingUtils.getBlendedMeasureMemberFromLeafMeasureMember(blendRankSettings.getMeasure(), true, structureMember.getQueryModel().getDatasetId(), this.m_blendableQueryManager, blendedQueryModel);
					}
				}
			}
			if (oFF.notNull(blendedMeasureMember))
			{
				blendRankSettings.setMeasure(blendedMeasureMember.getName());
			}
		}
		if (!blendRankSettings.isBlendedSecondaryMeasure())
		{
			if (blendRankSettings.getSecondaryMeasure() === null && !this.m_blendableQueryManager.isAccountSecondaryMeasureDimensionOnNoneAxis())
			{
				let fallbackSecondaryMeasureName = oFF.QFilterUtil.getFirstMemberNameFromSecondaryCalculationDimensionDynamicFilter(blendedQueryModel);
				blendRankSettings.setSecondaryMeasure(fallbackSecondaryMeasureName);
			}
			else if (blendRankSettings.getSecondaryMeasure() !== null)
			{
				let blendedSecondaryMeasureMember = blendedQueryModel.getSecondaryCalculationDimension().getStructureMember(blendRankSettings.getSecondaryMeasure());
				if (oFF.isNull(blendedSecondaryMeasureMember))
				{
					blendedSecondaryMeasureMember = oFF.BlendingUtils.getBlendedMeasureMemberFromLeafMeasureMember(blendRankSettings.getSecondaryMeasure(), false, blendRankSettings.getSecondaryMeasureDatasetId(), this.m_blendableQueryManager, blendedQueryModel);
				}
				blendRankSettings.setSecondaryMeasure(blendedSecondaryMeasureMember.getName());
			}
		}
		blendRankSettings.clearAppliedDimensions();
		let appliedDimensionsIter = rankSettings.getAppliedDimensions().getIterator();
		while (appliedDimensionsIter.hasNext())
		{
			let appliedDimension = appliedDimensionsIter.next();
			let blendedDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(appliedDimension.getName(), appliedDimension.getQueryModel().getDatasetId(), blendedQueryModel);
			if (oFF.notNull(blendedDimension))
			{
				blendRankSettings.addAppliedDimension(blendedDimension);
			}
		}
		let versionDimension;
		if (rankSettings.getVersionDimension() !== null)
		{
			versionDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(rankSettings.getVersionDimension().getName(), rankSettings.getVersionDimension().getQueryModel().getDatasetId(), blendedQueryModel);
			blendRankSettings.setVersionDimension(versionDimension);
		}
		if (blendRankSettings.useDefaultSort() && blendRankSettings.useRankConditions() && (this.m_blendableQueryManager.getBlendableMeasureMemberSort() !== null || this.m_blendableQueryManager.getBlendableDimensionSorts().size() > 0 || this.m_blendableQueryManager.isDefaultOrder()))
		{
			blendRankSettings.setUseDefaultSort(false);
		}
		blendedRankSettings.add(blendRankSettings);
	}
	if (blendedRankSettings.size() > 0)
	{
		this.m_blendedQueryManager.getConvenienceCommands().applyRankingsWithoutReset(blendedRankSettings);
	}
};
oFF.BlendingProcess.prototype.applySorts = function()
{
	let blendableDimensionSorts = this.m_blendableQueryManager.getBlendableDimensionSorts();
	let blendableMeasureSort = this.m_blendableQueryManager.getBlendableMeasureMemberSort();
	if (this.m_blendableQueryManager.supportsConcurrentDimensionAndMeasureSorting())
	{
		if (blendableDimensionSorts.size() > 0)
		{
			this.applyDimensionSorts(blendableDimensionSorts);
		}
		if (oFF.notNull(blendableMeasureSort))
		{
			this.applyMeasureSort(blendableMeasureSort);
		}
	}
	else
	{
		if (blendableDimensionSorts.size() > 0)
		{
			this.applyDimensionSorts(blendableDimensionSorts);
		}
		else if (oFF.notNull(blendableMeasureSort))
		{
			this.applyMeasureSort(blendableMeasureSort);
		}
	}
};
oFF.BlendingProcess.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryManagerCreated(extResult, data, customIdentifier);
};
oFF.BlendingProcess.prototype.cancelSynchronization = function()
{
	this.cleanupTransientState();
	oFF.DfRsSyncAction.prototype.cancelSynchronization.call( this );
};
oFF.BlendingProcess.prototype.cleanUpHideTextField = function(queryModel)
{
	let loadedDimensionsIterator = queryModel.getLoadedDimensions().getIterator();
	while (loadedDimensionsIterator.hasNext())
	{
		let loadedDimension = loadedDimensionsIterator.next();
		let textField = loadedDimension.getTextField();
		if (oFF.notNull(textField) && textField.getTagging().containsKey(oFF.QTransientConstants.HIDE_TEXT_FIELD))
		{
			textField.getTagging().remove(oFF.QTransientConstants.HIDE_TEXT_FIELD);
		}
	}
};
oFF.BlendingProcess.prototype.cleanUpTransientDrills = function(queryModel)
{
	let dimension = queryModel.getAccountDimension();
	let transientMembers = this.m_transientMembers.getByKey(queryModel.getDatasetId());
	if (oFF.notNull(dimension) && oFF.notNull(transientMembers) && transientMembers.size() > 0)
	{
		let drillManager = dimension.getDrillManager();
		let zoomDrillOperations = drillManager.getAllZoomDrillOperationsForDimension(dimension);
		this.removeTransientDrillPaths(drillManager, zoomDrillOperations);
		let drillOperations = drillManager.getDrillOperationsByDimension(dimension);
		drillManager.removeDrillOperationsByDimension(dimension);
		this.removeTransientDrillPaths(drillManager, drillOperations);
	}
};
oFF.BlendingProcess.prototype.cleanUpTransientMeasureFilters = function(dimension)
{
	if (oFF.notNull(dimension))
	{
		let filters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(dimension, true, true, true);
		oFF.XCollectionUtils.forEach(filters, (filterElements) => {
			if (oFF.notNull(filterElements))
			{
				for (let i = filterElements.size() - 1; i >= 0; i--)
				{
					let filterElement = filterElements.get(i);
					if (filterElement.getTagging().containsKey(oFF.QTransientConstants.TAG_TRANSIENT_DEPTH_AND_LEVEL_OFFSET))
					{
						filterElement.resetDepth();
						filterElement.resetLevelOffset();
					}
					if (filterElement.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
					{
						filterElements.removeElement(filterElement);
					}
				}
				let removedFiltersTag = filterElements.getTagging().getByKey(oFF.QTransientConstants.TAG_TRANSIENT_REMOVED_BLENDED_CALCULATION_FILTERS);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(removedFiltersTag))
				{
					let removedFilters = oFF.JsonParserFactory.createFromSafeString(removedFiltersTag).asList();
					for (let k = removedFilters.size() - 1; k >= 0; k--)
					{
						let memberName = removedFilters.getStringAt(k);
						let element = filterElements.addNewCartesianElement();
						element.setLowString(memberName);
					}
					filterElements.getTagging().remove(oFF.QTransientConstants.TAG_TRANSIENT_REMOVED_BLENDED_CALCULATION_FILTERS);
				}
			}
		});
		let visibilityFilter = dimension.getQueryModel().getFilter().getVisibilityFilter();
		if (oFF.notNull(visibilityFilter) && visibilityFilter.getFilterRootElement() !== null)
		{
			if (visibilityFilter.getFilterRootElement().getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
			{
				visibilityFilter.setComplexRoot(null);
			}
			else
			{
				let visiblityFilterList = visibilityFilter.getCartesianList(dimension);
				if (oFF.notNull(visiblityFilterList))
				{
					if (visiblityFilterList.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
					{
						let filterParent = visiblityFilterList.getParent();
						if (oFF.notNull(filterParent) && filterParent.getOlapComponentType().isTypeOf(oFF.FilterComponentType.BOOLEAN_ALGEBRA))
						{
							filterParent.removeElement(visiblityFilterList);
						}
					}
					else
					{
						for (let j = visiblityFilterList.size() - 1; j >= 0; j--)
						{
							let visiblityFilterElement = visiblityFilterList.get(j);
							if (visiblityFilterElement.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
							{
								visiblityFilterList.removeElement(visiblityFilterElement);
							}
						}
					}
				}
			}
		}
	}
};
oFF.BlendingProcess.prototype.cleanUpUniversalDisplayHierarchyTransientState = function(queryManager)
{
	if (queryManager.getConvenienceCommands().isTypeOfBw())
	{
		let universalDisplayHierarchies = queryManager.getQueryModel().getUniversalDisplayHierarchies();
		if (oFF.notNull(universalDisplayHierarchies))
		{
			let universalDisplayHierarchiesIterator = universalDisplayHierarchies.getHierarchies().getIterator();
			while (universalDisplayHierarchiesIterator.hasNext())
			{
				let universalDisplayHierarchy = universalDisplayHierarchiesIterator.next();
				if (universalDisplayHierarchy.getTagging().containsKey(oFF.QTransientConstants.TAG_DEACTIVATE_UNIVERSAL_DISPLAY_HIERARCHY))
				{
					universalDisplayHierarchy.setActive(true);
					universalDisplayHierarchy.getTagging().remove(oFF.QTransientConstants.TAG_DEACTIVATE_UNIVERSAL_DISPLAY_HIERARCHY);
				}
			}
		}
		if (queryManager.getTagging().containsKey(oFF.QTransientConstants.TAG_DISABLE_HIERARCHY_TO_UDH_CONVERSION))
		{
			queryManager.enableHierarchyToUDHConversion(true);
			queryManager.getTagging().remove(oFF.QTransientConstants.TAG_DISABLE_HIERARCHY_TO_UDH_CONVERSION);
		}
	}
};
oFF.BlendingProcess.prototype.cleanupBlendedQueryManager = function(blendedQueryManager)
{
	let blendedQueryModel = blendedQueryManager.getQueryModel();
	let primaryCalculationDimension = blendedQueryModel.getPrimaryCalculationDimension();
	let primaryStructureMembers = primaryCalculationDimension.getAllStructureMembers();
	if (oFF.XCollectionUtils.contains(primaryStructureMembers, (structureMember) => {
		return oFF.notNull(structureMember) && !structureMember.isReleased() && structureMember.getMemberType().isCustomMember();
	}))
	{
		primaryCalculationDimension.removeCustomMembers();
	}
	blendedQueryModel.getFormulaExceptionManager().clear();
	blendedQueryModel.getDrillManager().removeDrillOperationsByAxisType(oFF.AxisType.ROWS);
	blendedQueryModel.getDrillManager().removeDrillOperationsByAxisType(oFF.AxisType.COLUMNS);
	blendedQueryModel.getDrillManager().removeAllZoomDrillOperations();
	blendedQueryModel.getSortingManager().getSortingOperations().clear();
	blendedQueryModel.getConvenienceCommands().clearRank(null);
	let supportsNullZeroSuppression = blendedQueryModel.getModelCapabilities().supportsNullZeroSuppression();
	let supportsZeroSuppression = blendedQueryModel.getModelCapabilities().supportsZeroSuppression();
	if (supportsNullZeroSuppression || supportsZeroSuppression)
	{
		blendedQueryModel.getAxis(oFF.AxisType.ROWS).setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
		blendedQueryModel.getAxis(oFF.AxisType.COLUMNS).setZeroSuppressionType(oFF.ZeroSuppressionType.NONE);
	}
};
oFF.BlendingProcess.prototype.cleanupTransientState = function()
{
	if (oFF.notNull(this.m_blendedQueryManager))
	{
		this.m_blendedQueryManager.stopEventing();
	}
	oFF.XCollectionUtils.forEach(this.m_blendableQueryManager.getAllQueryManagers(), (queryManager) => {
		queryManager.stopEventing();
		let queryModel = queryManager.getQueryModel();
		let dimensionsInDrill = oFF.XList.create();
		dimensionsInDrill.addAll(queryModel.getColumnsAxis());
		dimensionsInDrill.addAll(queryModel.getRowsAxis());
		let dimensionsInDrillIter = dimensionsInDrill.getIterator();
		while (dimensionsInDrillIter.hasNext())
		{
			let dimensionInDrill = dimensionsInDrillIter.next();
			let cacheKey = oFF.QCacheKey.createByContextForDimension(queryModel, dimensionInDrill.getName(), null);
			let originalDimensionResultSetFields = this.m_originalDimensionResultSetFields.getByKey(oFF.XStringUtils.concatenate3(queryModel.getDatasetId(), "_", cacheKey.getKey1()));
			if (oFF.notNull(originalDimensionResultSetFields))
			{
				dimensionInDrill.getResultSetFields().clear();
				let originalDimensionResultSetFieldsIter = originalDimensionResultSetFields.getIterator();
				while (originalDimensionResultSetFieldsIter.hasNext())
				{
					let originalResultSetField = originalDimensionResultSetFieldsIter.next();
					dimensionInDrill.getResultSetFields().add(dimensionInDrill.getFieldByName(originalResultSetField));
				}
				let iterator = dimensionInDrill.getFields().getIterator();
				while (iterator.hasNext())
				{
					let oRequestedField = iterator.next();
					if (oRequestedField.getTagging().containsKey(oFF.QTransientConstants.HIDE_TEXT_FIELD))
					{
						oRequestedField.getTagging().remove(oFF.QTransientConstants.HIDE_TEXT_FIELD);
					}
					if (oRequestedField.getTagging().containsKey(oFF.QTransientConstants.TAG_TRANSIENT_ALWAYS_REQUESTED))
					{
						oRequestedField.setAlwaysRequested(oFF.XBoolean.convertFromString(oRequestedField.getTagging().getByKey(oFF.QTransientConstants.TAG_TRANSIENT_ALWAYS_REQUESTED)));
						oRequestedField.getTagging().remove(oFF.QTransientConstants.TAG_TRANSIENT_ALWAYS_REQUESTED);
					}
				}
			}
			if (dimensionInDrill.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && dimensionInDrill.getQueryManager().getConvenienceCommands().isTypeOfBw())
			{
				let originalDimensionResultSetAttributes = this.m_originalDimensionResultSetAttributes.getByKey(oFF.XStringUtils.concatenate3(queryModel.getDatasetId(), "_", cacheKey.getKey1()));
				if (!(oFF.isNull(originalDimensionResultSetAttributes)))
				{
					dimensionInDrill.getResultSetAttributes().clear();
					let originalDimensionResultSetAttributesIter = originalDimensionResultSetAttributes.getIterator();
					while (originalDimensionResultSetAttributesIter.hasNext())
					{
						let originalResultSetAttribute = originalDimensionResultSetAttributesIter.next();
						let originalResultSetAttributeFieldItr = originalResultSetAttribute.getIterator();
						while (originalResultSetAttributeFieldItr.hasNext())
						{
							let originalResultSetAttributeField = originalResultSetAttributeFieldItr.next();
							let field = dimensionInDrill.getFieldByName(originalResultSetAttributeField);
							field.getAttribute().getResultSetFields().clear();
							dimensionInDrill.getResultSetAttributes().add(field.getAttribute());
							field.getAttribute().getResultSetFields().add(field);
						}
					}
				}
			}
			let dimensionInDrillTagging = dimensionInDrill.getTagging();
			if (dimensionInDrillTagging.containsKey(oFF.QTransientConstants.TAG_TRANSIENT_ROWS_AXIS))
			{
				this.m_blendableQueryManager.removeBlendedDimensionInfoExt(queryModel.getDatasetId(), dimensionInDrill.getName());
				queryModel.getFreeAxis().add(dimensionInDrill);
				dimensionInDrillTagging.remove(oFF.QTransientConstants.TAG_TRANSIENT_ROWS_AXIS);
			}
			if (dimensionInDrillTagging.containsKey("originalHierarchy"))
			{
				let originalHiearchy = dimensionInDrillTagging.getByKey("originalHierarchy");
				if (oFF.notNull(originalHiearchy))
				{
					dimensionInDrill.activateHierarchy(originalHiearchy, null, null);
				}
				else
				{
					dimensionInDrill.setHierarchyActive(false);
					dimensionInDrill.setHierarchy(null);
				}
				dimensionInDrillTagging.remove("originalHierarchy");
			}
			if (dimensionInDrillTagging.containsKey("transientInitialDrillLevel"))
			{
				let preInitialDrillLevel = dimensionInDrillTagging.getByKey("transientInitialDrillLevel");
				if (oFF.notNull(preInitialDrillLevel))
				{
					dimensionInDrill.setInitialDrillLevel(oFF.XInteger.convertFromString(preInitialDrillLevel));
				}
				dimensionInDrillTagging.remove("transientInitialDrillLevel");
			}
			if (dimensionInDrillTagging.containsKey(oFF.QTransientConstants.BW_HIERARCHY_DIMENSION))
			{
				dimensionInDrillTagging.remove(oFF.QTransientConstants.BW_HIERARCHY_DIMENSION);
			}
			if (dimensionInDrillTagging.containsKey(oFF.QTransientConstants.TAG_ENFORCE_HIERARCHY_NAME_VARIABLE_DISABLED))
			{
				dimensionInDrill.setEnforceHierarchyNameVariable(true);
				dimensionInDrillTagging.remove(oFF.QTransientConstants.TAG_ENFORCE_HIERARCHY_NAME_VARIABLE_DISABLED);
			}
			if (dimensionInDrillTagging.containsKey(oFF.QTransientConstants.TAG_USE_HIEARCHY_NAME_VARIABLE_DISABLED))
			{
				dimensionInDrill.getHierarchyManagerBase().setUseHierarchyNameVariable(true);
				dimensionInDrillTagging.remove(oFF.QTransientConstants.TAG_USE_HIEARCHY_NAME_VARIABLE_DISABLED);
			}
			if (dimensionInDrillTagging.containsKey(oFF.QTransientConstants.TAG_REPLACE_QUERY_TEXT_WITH_DEFAULT_TEXT))
			{
				dimensionInDrillTagging.remove(oFF.QTransientConstants.TAG_REPLACE_QUERY_TEXT_WITH_DEFAULT_TEXT);
			}
			if (dimensionInDrillTagging.containsKey(oFF.QTransientConstants.SECONDARY_MEASURE_DIMENSION_ON_COLUMN))
			{
				queryModel.getFreeAxis().add(dimensionInDrill);
				dimensionInDrillTagging.remove(oFF.QTransientConstants.SECONDARY_MEASURE_DIMENSION_ON_COLUMN);
			}
			if (dimensionInDrillTagging.containsKey(oFF.QTransientConstants.TAG_TRANSIENT_TOTAL_VISIBILITY_HIDDEN))
			{
				dimensionInDrill.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, oFF.ResultVisibility.VISIBLE);
				dimensionInDrillTagging.remove(oFF.QTransientConstants.TAG_TRANSIENT_TOTAL_VISIBILITY_HIDDEN);
			}
		}
		let transientMembers = this.m_transientMembers.getByKey(queryModel.getDatasetId());
		if (oFF.notNull(transientMembers))
		{
			let transientMembersIter = transientMembers.getIterator();
			while (transientMembersIter.hasNext())
			{
				let transientMember = transientMembersIter.next();
				let structureMember;
				if (oFF.notNull(this.m_blendedQueryManager))
				{
					structureMember = oFF.BlendingUtils.getMatchingBlendedMemberFromLeafMember(this.m_blendedQueryManager.getQueryModel(), transientMember);
					if (oFF.notNull(structureMember) && structureMember.getResultVisibility() === oFF.ResultVisibility.HIDDEN)
					{
						structureMember.setResultVisibility(oFF.ResultVisibility.VISIBLE);
					}
				}
				structureMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(transientMember.getAliasOrMemberName(), this.m_blendableQueryManager.getClientQueryObjectStorageName(), true);
				if (oFF.notNull(structureMember) || oFF.XString.isEqual(transientMember.getAliasOrMemberName(), oFF.BlendingProcess.DUMMY_CALCULATION))
				{
					let measureDimension = queryModel.getDimensionByName(transientMember.getDimension().getName());
					measureDimension.removeMeasure(transientMember.getAliasOrMemberName());
				}
			}
		}
		this.cleanUpTransientMeasureFilters(queryModel.getPrimaryCalculationDimension());
		this.cleanUpTransientMeasureFilters(queryModel.getSecondaryCalculationDimension());
		this.cleanUpTransientDrills(queryModel);
		if (queryManager.getTagging().containsKey("originalMaxRows"))
		{
			let originalMaxRows = oFF.XInteger.convertFromString(queryManager.getTagging().getByKey("originalMaxRows"));
			queryManager.setMaxRows(originalMaxRows);
			queryManager.getTagging().remove("originalMaxRows");
		}
		this.addLeafSortingOperations(queryModel);
		this.cleanUpUniversalDisplayHierarchyTransientState(queryManager);
		this.cleanUpHideTextField(queryModel);
		queryManager.resumeEventing();
	});
	if (oFF.notNull(this.m_blendedQueryManager))
	{
		let blendedQueryModel = this.m_blendedQueryManager.getQueryModel();
		blendedQueryModel.removeSecondaryMeasureTransientFilterElements(blendedQueryModel.getFilter().getDynamicFilter(), true);
		this.m_blendedQueryManager.resumeEventing();
	}
};
oFF.BlendingProcess.prototype.clearLeafSortingOperations = function()
{
	let leafQueryManagers = this.m_blendableQueryManager.getAllQueryManagers();
	oFF.XCollectionUtils.forEach(leafQueryManagers, (leafQueryManager) => {
		leafQueryManager.stopEventing();
		let leafQueryModel = leafQueryManager.getQueryModel();
		if (oFF.XBooleanValue.getBooleanExt(leafQueryModel.isAutoAddBWServerSortsEnabled(), false))
		{
			leafQueryModel.setAutoAddBWServerSortsEnabled(false);
			leafQueryModel.getTagging().put(oFF.QTransientConstants.TAG_DISABLE_AUTO_ADD_BW_SERVER_SORTS, "");
		}
		let leafSortingOperations = oFF.XListOfNameObject.create();
		let sortingOperations = leafQueryModel.getSortingManager().getSortingOperations();
		for (let i = sortingOperations.size() - 1; i >= 0; i--)
		{
			let sortingOperation = sortingOperations.get(i);
			leafSortingOperations.add(sortingOperation);
			sortingOperations.removeElement(sortingOperation);
		}
		this.m_leafSortingOperations.put(leafQueryModel.getDatasetId(), leafSortingOperations);
		leafQueryManager.resumeEventing();
	});
};
oFF.BlendingProcess.prototype.collectLeafQueryAccountDrills = function(leafQueryManager, autoExpandHierarchy, autoAddDepthAndLevelOffset)
{
	let queryModel = leafQueryManager.getQueryModel();
	let accountDimension = queryModel.getAccountDimension();
	if (oFF.isNull(accountDimension) || oFF.XCollectionUtils.contains(this.m_allBlendedDrillOperations, (blendedDrillOperation) => {
		return oFF.XString.isEqual(blendedDrillOperation.getDimensionName(), accountDimension.getName()) && oFF.XString.isEqual(blendedDrillOperation.getDatasetId(), queryModel.getDatasetId());
	}))
	{
		return;
	}
	if (leafQueryManager.getInitSettings().getMode() === oFF.QueryManagerMode.DEFAULT)
	{
		let drillManager = queryModel.getDrillManager();
		let drillOperations = drillManager.getDrillOperationsByDimension(accountDimension);
		for (let i = 0; i < drillOperations.size(); i++)
		{
			let blendedDimensionDrillInfo = oFF.BlendedDrillInfo.createBlendedDimensionDrillInfo(null, queryModel.getDatasetId(), accountDimension.getName());
			let drillOperation = drillOperations.get(i);
			blendedDimensionDrillInfo.setDrillState(drillOperation.getDrillState());
			let drillPaths = drillOperation.getDrillPath();
			oFF.XCollectionUtils.forEach(drillPaths, (drillPath) => {
				blendedDimensionDrillInfo.addBlendedDrillPathElementInfo(queryModel.getDatasetId(), accountDimension.getName(), drillPath.getSelectValue());
				if (drillPath.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
				{
					blendedDimensionDrillInfo.getTagging().put(oFF.QTransientConstants.TAG_IS_TRANSIENT, "");
				}
			});
			this.m_leafAccountDrillOperations.add(blendedDimensionDrillInfo);
		}
	}
	if (autoExpandHierarchy)
	{
		oFF.BlendingMappingUtils.autoExpandHierarchyDimension(accountDimension);
		if (autoAddDepthAndLevelOffset)
		{
			let accountFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(accountDimension, true, true, true);
			oFF.XCollectionUtils.forEach(accountFilters, (accountFilterCartesianList) => {
				if (oFF.notNull(accountFilterCartesianList))
				{
					for (let j = 0; j < accountFilterCartesianList.size(); j++)
					{
						let element = accountFilterCartesianList.getCartesianElement(j);
						if (!element.hasDepth() && !element.hasLevelOffset())
						{
							element.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_DEPTH_AND_LEVEL_OFFSET, "");
							element.setDepth(0);
							element.setLevelOffset(0);
						}
					}
				}
			});
		}
	}
};
oFF.BlendingProcess.prototype.createSubBlendingProcess = function(configs, blendedQueryManager)
{
	this.m_childProcess = this.createSubProcess(configs, blendedQueryManager);
	this.m_childProcess.processBlendingQueryManagerCreation();
	this.addAllMessages(this.m_childProcess);
};
oFF.BlendingProcess.prototype.createSubProcess = function(configs, blendedQueryManager)
{
	let blendingProcess = new oFF.BlendingProcess();
	blendingProcess.m_blendableQueryManager = this.m_blendableQueryManager;
	blendingProcess.m_configs = oFF.XList.create();
	blendingProcess.m_configs.addAll(configs);
	blendingProcess.m_configs.get(0).setFirstQueryManager(blendedQueryManager);
	blendingProcess.m_originalProcess = this.m_originalProcess;
	blendingProcess.m_originalDimensionResultSetFields = this.m_originalDimensionResultSetFields.createMapByStringCopy();
	blendingProcess.m_originalDimensionResultSetAttributes = this.m_originalDimensionResultSetAttributes.createMapByStringCopy();
	blendingProcess.m_primaryBlendedMeasures = this.m_primaryBlendedMeasures.createListCopy();
	blendingProcess.m_blendedDimensionInfoAxisMap = this.m_blendedDimensionInfoAxisMap.createMapByStringCopy();
	blendingProcess.m_allBlendedDrillOperations = this.m_allBlendedDrillOperations.createListCopy();
	blendingProcess.m_leafAccountDrillOperations = this.m_leafAccountDrillOperations;
	blendingProcess.m_transientMembers = this.m_transientMembers;
	blendingProcess.m_transientPrimaryBlendedMeasures = this.m_transientPrimaryBlendedMeasures.createListCopy();
	blendingProcess.m_transientFieldSelectionMemberNames = this.m_transientFieldSelectionMemberNames.createListCopy();
	blendingProcess.m_leafSortingOperations = this.m_leafSortingOperations;
	blendingProcess.m_outOfContextLinkDimensionNames = this.m_outOfContextLinkDimensionNames.createListCopy();
	blendingProcess.m_cachedRuntimeBlendedQueryManagerResult = this.m_cachedRuntimeBlendedQueryManagerResult;
	blendingProcess.m_isExportWorkflow = this.m_isExportWorkflow;
	blendingProcess.m_lastState = this.m_lastState.createMapByStringCopy();
	blendingProcess.m_automappingTimeLinkDimensionNames = this.m_automappingTimeLinkDimensionNames.createListCopy();
	blendingProcess.setupAction(this.getActiveSyncType(), null, null, this.getActionContext());
	return blendingProcess;
};
oFF.BlendingProcess.prototype.deactivateHierarchyNameVariables = function(queryModel)
{
	if (queryModel.getConvenienceCommands().isTypeOfBw())
	{
		let dimensionMemberVariables = queryModel.getQueryManager().getDimensionMemberVariables();
		for (let i = 0; i < dimensionMemberVariables.size(); i++)
		{
			let variable = dimensionMemberVariables.get(i);
			if (variable.getVariableType() === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
			{
				let dimensionToProcess = variable.getHierarchyNameDimension();
				if (dimensionToProcess.supportsHierarchy())
				{
					let hierarchyNameVariableDisabled = false;
					if (dimensionToProcess.isEnforceHierarchyNameVariable())
					{
						dimensionToProcess.setEnforceHierarchyNameVariable(false);
						if (!dimensionToProcess.getTagging().containsKey(oFF.QTransientConstants.TAG_ENFORCE_HIERARCHY_NAME_VARIABLE_DISABLED))
						{
							dimensionToProcess.getTagging().put(oFF.QTransientConstants.TAG_ENFORCE_HIERARCHY_NAME_VARIABLE_DISABLED, "");
						}
						hierarchyNameVariableDisabled = true;
					}
					if (dimensionToProcess.useHierarchyNameVariable())
					{
						dimensionToProcess.getHierarchyManagerBase().setUseHierarchyNameVariable(false);
						if (!dimensionToProcess.getTagging().containsKey(oFF.QTransientConstants.TAG_USE_HIEARCHY_NAME_VARIABLE_DISABLED))
						{
							dimensionToProcess.getTagging().put(oFF.QTransientConstants.TAG_USE_HIEARCHY_NAME_VARIABLE_DISABLED, "");
						}
						hierarchyNameVariableDisabled = true;
					}
					if (hierarchyNameVariableDisabled)
					{
						let variableStringValue = variable.getValueByString();
						if (oFF.isNull(variableStringValue))
						{
							variableStringValue = "";
						}
						dimensionToProcess.setHierarchyName(variableStringValue);
					}
				}
			}
		}
	}
};
oFF.BlendingProcess.prototype.getAllMembersEnabledButNotFsic = function(queryManagers)
{
	let datasetIdsWithAllMembersOrFsicEnabledWithoutFilter = oFF.XHashSetOfString.create();
	let queryManagerIterator = queryManagers.getIterator();
	while (queryManagerIterator.hasNext())
	{
		let queryManager = queryManagerIterator.next();
		let queryModel = queryManager.getQueryModel();
		let datasetId = queryModel.getDatasetId();
		if (this.m_blendableQueryManager.getAllMembersOrFsicEnabled(datasetId))
		{
			let fieldSelectionFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(queryModel.getPrimaryCalculationDimension(), false, false, true);
			if (fieldSelectionFilters.isEmpty())
			{
				datasetIdsWithAllMembersOrFsicEnabledWithoutFilter.add(datasetId);
			}
		}
	}
	return datasetIdsWithAllMembersOrFsicEnabledWithoutFilter;
};
oFF.BlendingProcess.prototype.getBlendableQueryManager = function()
{
	return this.m_blendableQueryManager;
};
oFF.BlendingProcess.prototype.getConvertedMeasure = function(formulaException, measure, measureName)
{
	let effectiveMeasureName = oFF.isNull(measure) ? measureName : measure.getAliasOrMemberName();
	let effectiveMeasure = this.m_blendedQueryManager.getQueryModel().getPrimaryCalculationDimension().getStructureMemberByAliasOrMember(effectiveMeasureName);
	if (oFF.isNull(effectiveMeasure))
	{
		effectiveMeasure = oFF.BlendingUtils.getBlendedMeasureMemberFromLeafMeasureMember(effectiveMeasureName, true, formulaException.getQueryModel().getDatasetId(), this.m_blendableQueryManager, this.m_blendedQueryManager.getQueryModel());
	}
	return effectiveMeasure;
};
oFF.BlendingProcess.prototype.getLastState = function()
{
	return this.m_lastState;
};
oFF.BlendingProcess.prototype.getOriginalBlendingProcess = function()
{
	return this.m_originalProcess;
};
oFF.BlendingProcess.prototype.getOriginalDimensionResultSetAttributeFields = function(dimension)
{
	let cacheKey = oFF.QCacheKey.createByContextForDimension(dimension.getContext(), dimension.getName(), null);
	return this.m_originalDimensionResultSetAttributes.getByKey(oFF.XStringUtils.concatenate3(dimension.getQueryModel().getDatasetId(), "_", cacheKey.getKey1()));
};
oFF.BlendingProcess.prototype.getOriginalDimensionResultSetFields = function(dimension)
{
	let cacheKey = oFF.QCacheKey.createByContextForDimension(dimension.getContext(), dimension.getName(), null);
	return this.m_originalDimensionResultSetFields.getByKey(oFF.XStringUtils.concatenate3(dimension.getQueryModel().getDatasetId(), "_", cacheKey.getKey1()));
};
oFF.BlendingProcess.prototype.getUsedQueryManagers = function()
{
	let usedQueryManagers = oFF.XHashMapByString.create();
	let configIterator = this.m_configs.getIterator();
	while (configIterator.hasNext())
	{
		let config = configIterator.next();
		let primaryQueryManager = config.getPrimaryQueryManager();
		let secondaryQueryManager = config.getSecondaryQueryManager();
		if (usedQueryManagers.isEmpty())
		{
			usedQueryManagers.put(primaryQueryManager.getQueryModel().getDatasetId(), primaryQueryManager);
		}
		usedQueryManagers.put(secondaryQueryManager.getQueryModel().getDatasetId(), secondaryQueryManager);
	}
	return usedQueryManagers;
};
oFF.BlendingProcess.prototype.hideTransientMembers = function()
{
	if (oFF.notNull(this.m_blendedQueryManager))
	{
		let queryModel = this.m_blendedQueryManager.getQueryModel();
		let calculationDimension = queryModel.getPrimaryCalculationDimension();
		let transientMemberListIter = this.m_transientMembers.getIterator();
		while (transientMemberListIter.hasNext())
		{
			let transientMemberList = transientMemberListIter.next();
			let transientMemberIter = transientMemberList.getIterator();
			while (transientMemberIter.hasNext())
			{
				let transientMember = transientMemberIter.next();
				let structureMember = oFF.BlendingUtils.getMatchingBlendedMemberFromLeafMember(queryModel, transientMember);
				if (oFF.notNull(structureMember))
				{
					if (!this.m_transientFieldSelectionMemberNames.contains(transientMember.getAliasOrMemberName()))
					{
						structureMember.setResultVisibility(oFF.ResultVisibility.HIDDEN);
					}
					if (calculationDimension.getStructureLayout().getByKey(structureMember.getName()) === null)
					{
						calculationDimension.getStructureLayout().add(structureMember);
					}
				}
			}
		}
	}
};
oFF.BlendingProcess.prototype.needsUpdate = function(previousState, dimension, key)
{
	if (oFF.isNull(previousState))
	{
		return true;
	}
	let measureFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(dimension, true, true, true);
	return oFF.XCollectionUtils.contains(measureFilters, (measureFilter) => {
		if (oFF.notNull(measureFilter))
		{
			let memberNamesFromFilter = oFF.XHashSetOfString.create();
			memberNamesFromFilter.addAll(oFF.QFilterUtil.getMemberNamesFromFilter(measureFilter, dimension.getName()));
			let previousMembers = previousState.getByKey(key);
			let iterator = memberNamesFromFilter.getIterator();
			while (iterator.hasNext())
			{
				if (!previousMembers.contains(iterator.next()))
				{
					return true;
				}
			}
		}
		return false;
	});
};
oFF.BlendingProcess.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.hasErrors() || this.m_blendableQueryManager.isReleased())
	{
		if (oFF.notNull(queryManager))
		{
			oFF.XObjectExt.release(queryManager);
		}
		this.endSync();
	}
	else if (oFF.isNull(this.m_originalProcess))
	{
		oFF.XObjectExt.release(queryManager);
		this.m_queryManagerCreationSyncAction = oFF.XObjectExt.release(this.m_queryManagerCreationSyncAction);
		this.endSync();
		oFF.DfRsSyncAction.prototype.releaseObject.call( this );
	}
	else
	{
		let iterator = queryManager.getInitSettings().getBlendingDefinition().getSources().getIterator();
		while (iterator.hasNext())
		{
			let sourceQueryManager = iterator.next().getQueryManager();
			if (sourceQueryManager.getTagging().containsKey("cacheHintDisabled"))
			{
				sourceQueryManager.setCacheHintEnabled(true);
				sourceQueryManager.getTagging().remove("cacheHintDisabled");
			}
		}
		queryManager.setCacheHintEnabled(this.m_enableInaCacheHint);
		queryManager.getTagging().put(oFF.QStateConstants.TAG_UNDO_IGNORE, "");
		let subProcessBlendingConfigs = this.m_configs.createListCopy();
		oFF.BlendingUtils.activateBlendedDimensionHierarchies(queryManager, null, this, subProcessBlendingConfigs.size() > 1);
		if (!this.m_blendableQueryManager.isPreserveAttributeLayout())
		{
			oFF.BlendingUtils.updateDimensionResultSetFields(queryManager);
		}
		let blendedQueryModel = queryManager.getQueryModel();
		subProcessBlendingConfigs.removeAt(0);
		if (subProcessBlendingConfigs.size() > 0)
		{
			this.cleanupBlendedQueryManager(queryManager);
			this.createSubBlendingProcess(subProcessBlendingConfigs, queryManager);
		}
		else
		{
			oFF.BlendingProcess.moveOOCLinkedDimensionsToFreeAxis(blendedQueryModel, this.m_outOfContextLinkDimensionNames);
			this.m_originalProcess.onRuntimeBlendedQueryManagerCreated(extResult, queryManager, customIdentifier);
		}
	}
};
oFF.BlendingProcess.prototype.onRuntimeBlendedQueryManagerCreated = function(extResult, runtimeBlendedQueryManager, customIdentifier)
{
	this.addAllMessages(extResult);
	if (!extResult.hasErrors())
	{
		let primaryCalculationDimension = runtimeBlendedQueryManager.getQueryModel().getPrimaryCalculationDimension();
		if (oFF.notNull(primaryCalculationDimension))
		{
			let structureMembers = primaryCalculationDimension.getAllStructureMembers();
			for (let i = 0; i < structureMembers.size(); i++)
			{
				let structureMember = structureMembers.get(i);
				if (oFF.notNull(structureMember))
				{
					let leafStructureMember = oFF.BlendingUtils.getMatchingLeafMemberFromBlendedMember(runtimeBlendedQueryManager.getQueryModel(), structureMember.getName(), true);
					if (oFF.notNull(leafStructureMember) && leafStructureMember.getAliasName() !== null)
					{
						structureMember.setAliasName(leafStructureMember.getAliasName());
					}
				}
			}
		}
		let secondaryCalculationDimension = runtimeBlendedQueryManager.getQueryModel().getSecondaryCalculationDimension();
		if (oFF.notNull(secondaryCalculationDimension) && this.m_blendableQueryManager.isAccountSecondaryMeasureDimensionOnNoneAxis())
		{
			runtimeBlendedQueryManager.getQueryModel().getFreeAxis().add(secondaryCalculationDimension);
		}
		runtimeBlendedQueryManager.getClientInfo().copyFromContext(this.m_blendableQueryManager.getPrimaryQueryManager());
		runtimeBlendedQueryManager.setClientQueryObjectStorageName(this.m_blendableQueryManager.getClientQueryObjectStorageName());
		this.m_blendedQueryManager = runtimeBlendedQueryManager;
		this.m_cachedRuntimeBlendedQueryManagerResult = runtimeBlendedQueryManager;
		this.setData(runtimeBlendedQueryManager);
		this.recordState();
	}
	this.endSync();
};
oFF.BlendingProcess.prototype.postQueryExecution = function()
{
	this.cleanupTransientState();
};
oFF.BlendingProcess.prototype.prepareQueryExecution = function()
{
	if (oFF.notNull(this.m_blendedQueryManager))
	{
		this.cleanupBlendedQueryManager(this.m_blendedQueryManager);
		this.m_blendedQueryManager.setMaxRows(this.m_blendableQueryManager.getActiveResultSetContainer().getMaxRows());
		this.m_blendedQueryManager.setMaxColumns(this.m_blendableQueryManager.getActiveResultSetContainer().getMaxColumns());
		this.processBlendedMeasures();
		this.processThresholds();
		this.processBlendedDimensionsOnAxis(this.m_blendedQueryManager, oFF.AxisType.ROWS);
		this.processBlendedDimensionsOnAxis(this.m_blendedQueryManager, oFF.AxisType.COLUMNS);
		let signedDataDimension = this.m_blendedQueryManager.getQueryModel().getDimensionByName("SignedData");
		if (oFF.notNull(signedDataDimension))
		{
			this.m_blendedQueryManager.getQueryModel().getFreeAxis().add(signedDataDimension);
		}
		else if (this.m_blendableQueryManager.isAccountSecondaryMeasureDimensionOnNoneAxis())
		{
			oFF.BlendingMappingUtils.addSignedDataToFilter(this.m_blendedQueryManager.getQueryModel(), true);
		}
		oFF.BlendingUtils.activateBlendedDimensionHierarchies(this.m_blendedQueryManager, this.m_automappingTimeLinkDimensionNames, this, false);
		this.processBlendedDimensionInitialDrillLevel(this.m_blendedQueryManager, oFF.AxisType.ROWS);
		this.processBlendedDimensionInitialDrillLevel(this.m_blendedQueryManager, oFF.AxisType.COLUMNS);
		this.processBlendedDrills(this.m_blendedQueryManager, this.m_leafAccountDrillOperations, false);
		this.processBlendedDrills(this.m_blendedQueryManager, this.m_allBlendedDrillOperations, true);
		this.applyMeasureRenames();
		this.applySorts();
		this.applyRanks();
		this.applyBlendingZeroSuppressionOnAxis(oFF.AxisType.ROWS);
		this.applyBlendingZeroSuppressionOnAxis(oFF.AxisType.COLUMNS);
		this.setBlendingMaxDrillLevel(this.m_blendedQueryManager);
	}
};
oFF.BlendingProcess.prototype.preprocessBlendedCalculationDependencies = function(blendedMeasures, isTransientMeasures)
{
	let blendedMeasuresIter = blendedMeasures.getIterator();
	let usedQueryManagers = this.getUsedQueryManagers();
	let allMembersButNotFsic;
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER))
	{
		allMembersButNotFsic = this.getAllMembersEnabledButNotFsic(usedQueryManagers);
	}
	else
	{
		allMembersButNotFsic = oFF.XHashSetOfString.create();
	}
	let transientBlendedMeasures = oFF.XList.create();
	while (blendedMeasuresIter.hasNext())
	{
		let blendedMeasure = blendedMeasuresIter.next();
		if (blendedMeasure.getMemberType() === oFF.MemberType.FORMULA)
		{
			let formulaItemMembers = oFF.FormulaItemUtils.getFormulaMembers(blendedMeasure.getFormula());
			let formulaItemMembersIter = formulaItemMembers.getIterator();
			let validFormula = true;
			let transientMembers = oFF.XHashMapByString.create();
			while (formulaItemMembersIter.hasNext())
			{
				let formulaItemMember = formulaItemMembersIter.next();
				let formulaDimensionContext = formulaItemMember.getDimensionContext();
				let formulaItemQueryModel = oFF.notNull(formulaDimensionContext) ? formulaDimensionContext.getQueryModel() : formulaItemMember.getQueryModel();
				if (!usedQueryManagers.containsKey(formulaItemQueryModel.getDatasetId()))
				{
					validFormula = false;
					break;
				}
				if (oFF.XCollectionUtils.contains(blendedMeasures, (primaryBlendedMeasure) => {
					return oFF.XString.isEqual(primaryBlendedMeasure.getName(), formulaItemMember.getMemberName());
				}))
				{
					continue;
				}
				else
				{
					let sharedObjectDependentPrimaryBlendedMeasure = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(formulaItemMember.getMemberName(), this.m_blendableQueryManager.getClientQueryObjectStorageName(), true);
					if (oFF.notNull(sharedObjectDependentPrimaryBlendedMeasure) && sharedObjectDependentPrimaryBlendedMeasure.isMultiDataSourceMember())
					{
						transientBlendedMeasures.add(sharedObjectDependentPrimaryBlendedMeasure);
						this.m_transientPrimaryBlendedMeasures.insert(0, sharedObjectDependentPrimaryBlendedMeasure);
						continue;
					}
				}
				if (oFF.notNull(formulaDimensionContext))
				{
					let datasetId = formulaDimensionContext.getQueryModel().getDatasetId();
					let transientMemberList = transientMembers.getByKey(datasetId);
					if (oFF.isNull(transientMemberList))
					{
						transientMemberList = oFF.XListOfNameObject.create();
						transientMembers.put(datasetId, transientMemberList);
					}
					let blendQueryModelContext = this.m_blendableQueryManager.getQueryManagerByDatasetId(datasetId);
					let blendDimensionContext = blendQueryModelContext.getQueryModel().getDimensionByName(formulaDimensionContext.getName());
					let structureMember = null;
					let measureFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(blendDimensionContext, true, true, true);
					if (oFF.notNull(blendDimensionContext))
					{
						structureMember = blendDimensionContext.getStructureMemberByAliasOrMember(formulaItemMember.getMemberName());
						if (oFF.isNull(structureMember))
						{
							structureMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(formulaItemMember.getMemberName(), this.m_blendableQueryManager.getClientQueryObjectStorageName(), true);
						}
						if (oFF.notNull(structureMember))
						{
							if (!structureMember.validate(blendDimensionContext, blendQueryModelContext, true, false))
							{
								oFF.XCollectionUtils.forEach(blendQueryModelContext.getWarnings(), (warning) => {
									if (warning.getCode() === oFF.ErrorCodes.MEASURE_MISSING_DEPENDENT)
									{
										this.addError(warning.getCode(), warning.getText());
									}
								});
							}
							if (oFF.XCollectionUtils.contains(measureFilters, (measureFilter) => {
								return oFF.notNull(measureFilter) && !measureFilter.isEmpty();
							}) && (structureMember.isMeasureInUse(blendDimensionContext, isTransientMeasures) || this.m_blendableQueryManager.doesChildMemberExist(datasetId, structureMember.getName())) && blendDimensionContext.getAllStructureMembers().contains(structureMember))
							{
								structureMember = null;
							}
							if (this.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER) && this.m_blendableQueryManager.getAllMembersOrFsicEnabled(datasetId) && allMembersButNotFsic.contains(datasetId))
							{
								structureMember = null;
							}
						}
					}
					if (oFF.notNull(structureMember) && !transientMemberList.containsKey(structureMember.getName()))
					{
						transientMemberList.add(structureMember);
						let parentChildMemberMapForDataset = this.m_blendableQueryManager.getExpandedParentsMap(datasetId);
						if (oFF.notNull(parentChildMemberMapForDataset))
						{
							this.addTransientChildMembersRecursively(structureMember, transientMemberList, parentChildMemberMapForDataset, blendDimensionContext, measureFilters, isTransientMeasures);
						}
					}
				}
				else
				{
					throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate3("Blendable formula measure '", blendedMeasure.getAliasOrMemberName(), "' contains formula(s) that is missing dimension context"));
				}
			}
			if (validFormula)
			{
				let transientMembersList;
				if (!isTransientMeasures)
				{
					this.m_primaryBlendedMeasures.add(blendedMeasure);
				}
				let transientMemberDatasetIds = transientMembers.getKeysAsIterator();
				while (transientMemberDatasetIds.hasNext())
				{
					let transientMemberDatasetId = transientMemberDatasetIds.next();
					transientMembersList = transientMembers.getByKey(transientMemberDatasetId);
					let existingTransientList = this.m_transientMembers.getByKey(transientMemberDatasetId);
					if (oFF.isNull(existingTransientList))
					{
						existingTransientList = oFF.XListOfNameObject.create();
						this.m_transientMembers.put(transientMemberDatasetId, existingTransientList);
					}
					for (let j = 0; j < transientMembersList.size(); j++)
					{
						let transientMemberName = transientMembersList.get(j).getName();
						if (!existingTransientList.containsKey(transientMemberName))
						{
							existingTransientList.add(transientMembersList.get(j));
						}
					}
				}
			}
		}
	}
	if (transientBlendedMeasures.size() > 0)
	{
		this.preprocessBlendedCalculationDependencies(transientBlendedMeasures, true);
	}
};
oFF.BlendingProcess.prototype.preprocessBlendedCalculations = function()
{
	let blendedMeasures = oFF.XList.create();
	let blendableQueryManagerBase = this.m_blendableQueryManager;
	blendedMeasures.addAll(blendableQueryManagerBase.getPrimaryBlendedMeasures());
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER))
	{
		let leafQueryManagers = blendableQueryManagerBase.getAllQueryManagers();
		oFF.XCollectionUtils.forEach(leafQueryManagers, (leafQueryManager) => {
			leafQueryManager.stopEventing();
		});
		oFF.XCollectionUtils.forEach(leafQueryManagers, (leafQueryManager) => {
			let leafQueryModel = leafQueryManager.getQueryModel();
			let primaryCalculationDimension = leafQueryModel.getPrimaryCalculationDimension();
			let measureFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(primaryCalculationDimension, true, true, false);
			oFF.XCollectionUtils.addAllIfNotPresent(blendedMeasures, this.preprocessMeasureFilters(measureFilters, false, blendableQueryManagerBase, leafQueryModel));
			let fieldSelectionFilters = oFF.QFilterUtil.getLinkedFiltersOrDynamicFiltersForDimension(primaryCalculationDimension, false, false, true);
			oFF.XCollectionUtils.addAllIfNotPresent(blendedMeasures, this.preprocessMeasureFilters(fieldSelectionFilters, true, blendableQueryManagerBase, leafQueryModel));
		});
		oFF.XCollectionUtils.forEach(leafQueryManagers, (leafQueryManager) => {
			leafQueryManager.resumeEventing();
		});
	}
	this.preprocessBlendedCalculationDependencies(blendedMeasures, false);
};
oFF.BlendingProcess.prototype.preprocessMeasureFilters = function(measureFilters, isTransient, blendableQueryManagerBase, leafQueryModel)
{
	let blendedMeasures = oFF.XList.create();
	let leafQueryManagers = blendableQueryManagerBase.getAllQueryManagers();
	let primaryCalculationDimension = leafQueryModel.getPrimaryCalculationDimension();
	oFF.XCollectionUtils.forEach(measureFilters, (measureFilter) => {
		if (oFF.notNull(measureFilter))
		{
			let removedFilters = oFF.PrFactory.createList();
			for (let i = measureFilter.size() - 1; i >= 0; i--)
			{
				let element = measureFilter.getCartesianElement(i);
				let memberName = element.getLow().getString();
				let structureMember = oFF.BlendingUtils.getPrimaryStructureMemberByName(primaryCalculationDimension, memberName, false, false);
				if (oFF.notNull(structureMember) && structureMember.getMemberType() === oFF.MemberType.FORMULA)
				{
					if (structureMember.isMultiDataSourceMember())
					{
						removedFilters.addString(memberName);
						measureFilter.removeElement(element);
						oFF.BlendingMappingUtils.removeZoomOrVisibilityFilters(leafQueryModel, primaryCalculationDimension, memberName);
						oFF.XCollectionUtils.addIfNotPresent(blendedMeasures, structureMember);
						blendableQueryManagerBase.addTransientMeasure(structureMember);
						if (primaryCalculationDimension.getStructureMemberByAliasOrMember(memberName) !== null)
						{
							primaryCalculationDimension.removeMeasure(memberName);
						}
					}
					else if (!oFF.XString.isEqual(structureMember.getQueryModel().getDatasetId(), leafQueryModel.getDatasetId()) || primaryCalculationDimension.getStructureMemberByAliasOrMember(memberName) === null)
					{
						let datasetId = structureMember.getQueryModel().getDatasetId();
						oFF.XCollectionUtils.forEach(leafQueryManagers, (otherLeafQueryManager) => {
							let otherPrimaryCalculationDimension = otherLeafQueryManager.getQueryModel().getPrimaryCalculationDimension();
							otherPrimaryCalculationDimension.removeMeasure(memberName);
						});
						if (!oFF.XString.isEqual(datasetId, leafQueryModel.getDatasetId()))
						{
							measureFilter.removeElement(element);
							oFF.BlendingMappingUtils.removeZoomOrVisibilityFilters(leafQueryModel, primaryCalculationDimension, memberName);
							if (isTransient)
							{
								removedFilters.addString(memberName);
							}
						}
						if (isTransient)
						{
							this.addStructureMemberToTransientMembers(structureMember);
						}
						else
						{
							this.addStructureMemberToLeafQueryModel(structureMember, isTransient);
						}
					}
				}
				else if (oFF.notNull(structureMember) && structureMember.getMemberType() === oFF.MemberType.RESTRICTED_MEASURE && isTransient)
				{
					this.addStructureMemberToTransientMembers(structureMember);
				}
			}
			if (removedFilters.size() > 0)
			{
				measureFilter.getTagging().put(oFF.QTransientConstants.TAG_TRANSIENT_REMOVED_BLENDED_CALCULATION_FILTERS, removedFilters.getStringRepresentation());
			}
		}
	});
	return blendedMeasures;
};
oFF.BlendingProcess.prototype.preprocessThresholds = function()
{
	let formulaExceptionsIter = this.m_blendableQueryManager.getFormulaExceptions().getIterator();
	while (formulaExceptionsIter.hasNext())
	{
		let formulaException = formulaExceptionsIter.next();
		let datasetId = formulaException.getQueryModel().getDatasetId();
		let blendQueryModelContext = this.m_blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		let blendDimensionContext = oFF.isNull(blendQueryModelContext) ? null : formulaException.isPrimaryMeasure() ? blendQueryModelContext.getQueryModel().getPrimaryCalculationDimension() : blendQueryModelContext.getQueryModel().getSecondaryCalculationDimension();
		let thresholdMeasures = oFF.XList.create();
		if (formulaException.getMeasure() !== null)
		{
			thresholdMeasures.add(formulaException.getMeasure());
		}
		if (formulaException.getBaseMeasure() !== null)
		{
			thresholdMeasures.add(formulaException.getBaseMeasure());
		}
		else if (formulaException.getBaseMeasureName() !== null)
		{
			let baseStructureMember = oFF.notNull(blendDimensionContext) ? blendDimensionContext.getStructureMemberByAliasOrMember(formulaException.getBaseMeasureName()) : null;
			if (oFF.isNull(baseStructureMember))
			{
				baseStructureMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(formulaException.getBaseMeasureName(), this.m_blendableQueryManager.getClientQueryObjectStorageName(), true);
			}
			if (oFF.notNull(baseStructureMember))
			{
				thresholdMeasures.add(baseStructureMember);
			}
		}
		if (formulaException.getReferenceMeasure() !== null)
		{
			thresholdMeasures.add(formulaException.getReferenceMeasure());
		}
		else if (formulaException.getReferenceMeasureName() !== null)
		{
			let refStructureMember = oFF.notNull(blendDimensionContext) ? blendDimensionContext.getStructureMemberByAliasOrMember(formulaException.getReferenceMeasureName()) : null;
			if (oFF.isNull(refStructureMember))
			{
				refStructureMember = this.getOlapEnv().getClientQueryObjectManager().getStructuredMember(formulaException.getReferenceMeasureName(), this.m_blendableQueryManager.getClientQueryObjectStorageName(), true);
			}
			if (oFF.notNull(refStructureMember))
			{
				thresholdMeasures.add(refStructureMember);
			}
		}
		oFF.XCollectionUtils.forEach(thresholdMeasures, (thresholdMeasure) => {
			let isMeasureInUse = true;
			if (!thresholdMeasure.isMultiDataSourceMember())
			{
				let thresholdMeasureDatasetId = thresholdMeasure.getQueryModel().getDatasetId();
				let thresholdMeasureQueryModelContext = this.m_blendableQueryManager.getQueryManagerByDatasetId(thresholdMeasureDatasetId);
				let thresholdMeasureDimensionContext = oFF.isNull(thresholdMeasureQueryModelContext) ? null : formulaException.isPrimaryMeasure() ? thresholdMeasureQueryModelContext.getQueryModel().getPrimaryCalculationDimension() : thresholdMeasureQueryModelContext.getQueryModel().getSecondaryCalculationDimension();
				isMeasureInUse = thresholdMeasure.isMeasureInUse(thresholdMeasureDimensionContext, false);
			}
			if (!isMeasureInUse)
			{
				let transientMemberList = this.m_transientMembers.getByKey(datasetId);
				if (oFF.notNull(transientMemberList) && transientMemberList.containsKey(thresholdMeasure.getName()))
				{
					return;
				}
				this.m_cachedRuntimeBlendedQueryManagerResult = null;
				if (oFF.isNull(transientMemberList))
				{
					transientMemberList = oFF.XListOfNameObject.create();
					this.m_transientMembers.put(datasetId, transientMemberList);
				}
				transientMemberList.add(thresholdMeasure);
			}
		});
	}
};
oFF.BlendingProcess.prototype.processBlendedDimensionInitialDrillLevel = function(queryManager, axisType)
{
	let axisBlendedDimension = this.m_blendedDimensionInfoAxisMap.getByKey(axisType.getName());
	if (oFF.notNull(axisBlendedDimension))
	{
		for (let rowIdx = 0; rowIdx < axisBlendedDimension.size(); rowIdx++)
		{
			let blendedDimensionInfo = axisBlendedDimension.get(rowIdx);
			let dimensionName = blendedDimensionInfo.getDimensionName();
			let dimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(dimensionName, blendedDimensionInfo.getDatasetId(), queryManager.getQueryModel());
			if (oFF.notNull(dimension))
			{
				if (dimension.supportsHierarchy() && dimension.isHierarchyActive() && blendedDimensionInfo.getInitialDrillLevel() !== null)
				{
					dimension.setInitialDrillLevel(blendedDimensionInfo.getInitialDrillLevel().getInteger());
				}
			}
		}
	}
};
oFF.BlendingProcess.prototype.processBlendedDimensionTotalResultVisibility = function(blendedQueryManager, blendedDimension, dimensionName, datasetId)
{
	let leafQueryModel = oFF.BlendingUtils.getQueryModelFromDatasetId(blendedQueryManager, datasetId);
	if (oFF.notNull(leafQueryModel))
	{
		let leafDimension = leafQueryModel.getDimensionByName(dimensionName);
		if (oFF.notNull(leafDimension))
		{
			let leafDimensionTotalResultVisibility = leafDimension.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL);
			let blendDimensionTotalResultVisibility = blendedDimension.getResultVisibilityByElement(oFF.ResultStructureElement.TOTAL);
			if (blendDimensionTotalResultVisibility !== leafDimensionTotalResultVisibility)
			{
				blendedDimension.setResultVisibilityByElement(oFF.ResultStructureElement.TOTAL, leafDimensionTotalResultVisibility);
			}
		}
	}
};
oFF.BlendingProcess.prototype.processBlendedDimensionsOnAxis = function(queryManager, axisType)
{
	let axisBlendedDimension = this.m_blendedDimensionInfoAxisMap.getByKey(axisType.getName());
	if (oFF.notNull(axisBlendedDimension))
	{
		if (!axisBlendedDimension.isEmpty())
		{
			let axis = queryManager.getQueryModel().getAxis(axisType);
			axis.clear();
			let secondaryCalculationDimension = queryManager.getQueryModel().getSecondaryCalculationDimension();
			for (let i = 0; i < axisBlendedDimension.size(); i++)
			{
				let blendedDimensionInfo = axisBlendedDimension.get(i);
				let dimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(blendedDimensionInfo.getDimensionName(), blendedDimensionInfo.getDatasetId(), queryManager.getQueryModel());
				if (oFF.isNull(dimension))
				{
					let primaryModel = this.m_blendableQueryManager.getQueryModel();
					let primaryCalculationDimension = primaryModel.getPrimaryCalculationDimension();
					if (primaryModel.getConvenienceCommands().isTypeOfBw() && oFF.notNull(primaryCalculationDimension) && oFF.XString.isEqual(primaryCalculationDimension.getName(), blendedDimensionInfo.getDimensionName()))
					{
						dimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(oFF.BlendingUtils.CUSTOM_DIMENSION1, blendedDimensionInfo.getDatasetId(), queryManager.getQueryModel());
					}
				}
				if (oFF.notNull(dimension) && !(this.m_blendableQueryManager.isAccountSecondaryMeasureDimensionOnNoneAxis() && secondaryCalculationDimension === dimension))
				{
					axis.add(dimension);
					axis.setResultAlignment(this.m_blendableQueryManager.getQueryModel().getAxis(axisType).getResultAlignment());
					this.processBlendedDimensionTotalResultVisibility(queryManager, dimension, blendedDimensionInfo.getDimensionName(), blendedDimensionInfo.getDatasetId());
				}
			}
		}
	}
};
oFF.BlendingProcess.prototype.processBlendedDrills = function(queryManager, drillOperations, shouldApplyTransientDrills)
{
	let blendedDrillInfoIter = drillOperations.getIterator();
	while (blendedDrillInfoIter.hasNext())
	{
		let blendedDrillInfo = blendedDrillInfoIter.next();
		if (!shouldApplyTransientDrills && blendedDrillInfo.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT))
		{
			continue;
		}
		let dimension = oFF.BlendingUtils.findContextDimensionFromDrillDimension(queryManager, blendedDrillInfo.getDimensionName(), blendedDrillInfo.getDatasetId());
		if (oFF.isNull(dimension))
		{
			dimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(blendedDrillInfo.getDimensionName(), blendedDrillInfo.getDatasetId(), queryManager.getQueryModel());
		}
		if (oFF.notNull(dimension))
		{
			if (!dimension.isHierarchyActive())
			{
				continue;
			}
			let blendedDrillPathElementInfosIter = blendedDrillInfo.getBlendedDrillPathElementInfos().getIterator();
			let drillPathElements = oFF.XList.create();
			while (blendedDrillPathElementInfosIter.hasNext())
			{
				let blendedDrillPathElementInfo = blendedDrillPathElementInfosIter.next();
				let contextDimension = oFF.BlendingUtils.findContextDimensionFromDrillDimension(queryManager, blendedDrillPathElementInfo.getDimensionName(), blendedDrillPathElementInfo.getDatasetId());
				if (oFF.isNull(contextDimension))
				{
					contextDimension = oFF.BlendingUtils.findContextDimensionFromDrillDimension(queryManager, dimension.getName(), blendedDrillPathElementInfo.getDatasetId());
				}
				if (oFF.notNull(contextDimension))
				{
					let memberName = null;
					if (contextDimension === queryManager.getQueryModel().getPrimaryCalculationDimension())
					{
						if (contextDimension.getStructureMember(blendedDrillPathElementInfo.getDrillMember()) !== null)
						{
							memberName = blendedDrillPathElementInfo.getDrillMember();
						}
						else
						{
							let leafQueryModel = oFF.BlendingUtils.getQueryModelFromDatasetId(queryManager, blendedDrillPathElementInfo.getDatasetId());
							let primaryCalculationDimension = leafQueryModel.getPrimaryCalculationDimension();
							if (oFF.notNull(primaryCalculationDimension))
							{
								let calculationMember = primaryCalculationDimension.getStructureMember(blendedDrillPathElementInfo.getDrillMember());
								if (oFF.notNull(calculationMember))
								{
									let blendedMember = oFF.BlendingUtils.getMatchingBlendedMemberFromLeafMember(queryManager.getQueryModel(), calculationMember);
									if (oFF.notNull(blendedMember))
									{
										memberName = blendedMember.getName();
									}
								}
							}
						}
					}
					else
					{
						memberName = blendedDrillPathElementInfo.getDrillMember();
					}
					if (oFF.notNull(memberName))
					{
						drillPathElements.add(oFF.QFactory.createDrillPathElement(queryManager.getQueryModel(), memberName, contextDimension));
					}
				}
			}
			if (drillPathElements.size() > 0)
			{
				let drillManager = queryManager.getQueryModel().getDrillManager();
				if (blendedDrillInfo.isZoomDrill())
				{
					drillManager.addZoomDrillPath(drillPathElements, blendedDrillInfo.isHideRoots());
				}
				else
				{
					drillManager.setDrillState(drillPathElements, blendedDrillInfo.getDrillState());
				}
			}
		}
	}
};
oFF.BlendingProcess.prototype.processBlendedMeasures = function()
{
	this.applyBlendedMeasures(this.m_transientPrimaryBlendedMeasures, true);
	this.applyBlendedMeasures(this.m_primaryBlendedMeasures, false);
	this.hideTransientMembers();
};
oFF.BlendingProcess.prototype.processBlendedQueryManagerCreation = function(syncType, listener, customIdentifier)
{
	this.setActiveSyncType(syncType);
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendingProcess.prototype.processBlendingQueryManagerCreation = function()
{
	let blendingProcessConfig = this.m_configs.get(0);
	let blendingDefinition = oFF.QFactory.createBlendingDefinition();
	let qmLink = blendingProcessConfig.getQueryModelLinkSettings();
	let primaryQueryManager = blendingProcessConfig.getPrimaryQueryManager();
	let secondaryQueryManager = blendingProcessConfig.getSecondaryQueryManager();
	let primaryQueryModel = primaryQueryManager.getQueryModel();
	let secondaryQueryModel = secondaryQueryManager.getQueryModel();
	this.deactivateHierarchyNameVariables(primaryQueryModel);
	this.deactivateHierarchyNameVariables(secondaryQueryModel);
	primaryQueryModel.stopEventing();
	secondaryQueryModel.stopEventing();
	try
	{
		let primaryQueryAliasName = oFF.BlendingUtils.getQueryAliasName(primaryQueryManager);
		let primarySource = blendingDefinition.addNewSource(primaryQueryModel, primaryQueryAliasName);
		if (primaryQueryModel.isBlendingModel())
		{
			blendingDefinition.setSourceAsBlendingHost(primarySource);
		}
		if (!this.m_isExportWorkflow && !primaryQueryManager.getConvenienceCommands().isTypeOfBw())
		{
			primarySource.setDelayCubeRequest(true);
		}
		let secondaryQueryAliasName = oFF.BlendingUtils.getQueryAliasName(secondaryQueryManager);
		let secondarySource = blendingDefinition.addNewSource(secondaryQueryModel, secondaryQueryAliasName);
		oFF.BlendingMappingUtils.processCalculationDimensionMappings(blendingDefinition, primarySource, secondarySource, this.m_allBlendedDrillOperations, this);
		let unusedLinkedDimensionsNames = oFF.XHashSetOfString.create();
		oFF.BlendingMappingUtils.processLinkedDimensions(this.m_configs, blendingDefinition, primarySource, secondarySource, this, this.m_allBlendedDrillOperations, unusedLinkedDimensionsNames, this.m_blendableQueryManager.supportsDrillOnBlendNodeOnly());
		let unlinkedDimensionsNames = oFF.XHashSetOfString.create();
		oFF.BlendingMappingUtils.processUnlinkedDimensions(primarySource, secondarySource, blendingDefinition, qmLink, unlinkedDimensionsNames, unusedLinkedDimensionsNames, this.m_allBlendedDrillOperations, this);
		oFF.BlendingMappingUtils.processUnlinkedDimensions(secondarySource, primarySource, blendingDefinition, qmLink, unlinkedDimensionsNames, unusedLinkedDimensionsNames, this.m_allBlendedDrillOperations, this);
		if (!primaryQueryModel.isBlendingModel())
		{
			oFF.BlendingMappingUtils.removeUnsupportedFieldsForBlending(primaryQueryModel, this.m_blendableQueryManager.isPreserveAttributeLayout());
		}
		oFF.BlendingMappingUtils.removeUnsupportedFieldsForBlending(secondaryQueryModel, this.m_blendableQueryManager.isPreserveAttributeLayout());
		if (primaryQueryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			this.processBlendedDrills(primaryQueryManager, this.m_leafAccountDrillOperations, true);
		}
		if (secondaryQueryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
		{
			this.processBlendedDrills(secondaryQueryManager, this.m_leafAccountDrillOperations, true);
		}
		let isAllMembersOrFsicEnabledForPrimaryDataset = this.m_blendableQueryManager.getAllMembersOrFsicEnabled(primaryQueryManager.getQueryModel().getDatasetId());
		let isAllMembersOrFsicEnabledForSecondaryDataset = this.m_blendableQueryManager.getAllMembersOrFsicEnabled(secondaryQueryManager.getQueryModel().getDatasetId());
		oFF.BlendingMappingUtils.processTransientCalculations(primaryQueryModel, this.m_transientMembers.getByKey(primaryQueryModel.getDatasetId()), isAllMembersOrFsicEnabledForPrimaryDataset, this.m_blendableQueryManager.supportsDrillOnBlendNodeOnly());
		oFF.BlendingMappingUtils.processTransientCalculations(secondaryQueryModel, this.m_transientMembers.getByKey(secondaryQueryModel.getDatasetId()), isAllMembersOrFsicEnabledForSecondaryDataset, this.m_blendableQueryManager.supportsDrillOnBlendNodeOnly());
		this.collectLeafQueryAccountDrills(primaryQueryManager, this.m_blendableQueryManager.supportsDrillOnBlendNodeOnly(), false);
		this.collectLeafQueryAccountDrills(secondaryQueryManager, this.m_blendableQueryManager.supportsDrillOnBlendNodeOnly(), primaryQueryModel.getAccountDimension() === null);
		if (!isAllMembersOrFsicEnabledForPrimaryDataset && !primaryQueryManager.getQueryModel().isBlendingModel())
		{
			this.addDummyCalculationMeasure(this.m_blendableQueryManager.getPrimaryQueryManager());
		}
		if (!isAllMembersOrFsicEnabledForSecondaryDataset)
		{
			this.addDummyCalculationMeasure(secondaryQueryManager);
		}
		oFF.BlendingMappingUtils.deactivateUniversalDisplayHierarchy(primaryQueryManager);
		oFF.BlendingMappingUtils.deactivateUniversalDisplayHierarchy(secondaryQueryManager);
		primaryQueryModel.resumeEventing();
		secondaryQueryModel.resumeEventing();
		if (oFF.notNull(this.m_cachedRuntimeBlendedQueryManagerResult) && this.validateCachedRuntimeBlendedQueryManager())
		{
			let matchingQueryManager = oFF.BlendingUtils.getBlendedQueryModelByBlendDefinition(this.m_cachedRuntimeBlendedQueryManagerResult, blendingDefinition);
			if (oFF.notNull(matchingQueryManager))
			{
				this.onQueryManagerCreated(oFF.ExtResult.create(matchingQueryManager, this), matchingQueryManager, null);
				return;
			}
		}
		else
		{
			this.m_cachedRuntimeBlendedQueryManagerResult = null;
		}
		this.m_enableInaCacheHint = true;
		let blendingHost = blendingDefinition.getBlendingHost();
		let blendingHostSystemName = blendingHost.getSystemName();
		let iterator = blendingDefinition.getSources().getIterator();
		while (iterator.hasNext())
		{
			let source = iterator.next();
			let queryModel = source.getQueryModel();
			let queryManager = source.getQueryManager();
			let systemName = queryModel.getQueryManager().getSystemName();
			if (queryModel.getQueryManager().isCacheHintEnabled())
			{
				if (!oFF.XString.isEqual(blendingHostSystemName, systemName))
				{
					queryModel.getQueryManager().setCacheHintEnabled(false);
					queryModel.getQueryManager().getTagging().put("cacheHintDisabled", "");
				}
			}
			else
			{
				this.m_enableInaCacheHint = false;
			}
			let isAutoSubmitEnabled = queryManager.getModelCapabilities().supportsAutoVariableSubmit() && queryManager.getInitSettings().isEnableAutoVariableSubmit();
			if (queryManager.getConvenienceCommands().isTypeOfBw() && isAutoSubmitEnabled && queryManager.getOlapEnv() !== null && this.getOlapEnv().getFilterManager() !== null)
			{
				queryManager.maintainStateForRsWithAutoSubmit(null);
				let variableProcessorState = queryManager.getVariableProcessorState();
				queryManager.getOlapEnv().getFilterManager().cleanupFilterBeforeAutoSubmit(queryManager, variableProcessorState === oFF.VariableProcessorState.PROCESSING_SUBMIT || variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || variableProcessorState === oFF.VariableProcessorState.CHANGEABLE_STARTUP);
			}
		}
		let blendingConfig = oFF.QueryServiceConfig.createWithBlendingDefinition(this.getActionContext().getApplication(), blendingDefinition);
		blendingConfig.getClientInfo().copyFromContext(this.m_blendableQueryManager.getPrimaryQueryManager());
		this.m_queryManagerCreationSyncAction = blendingConfig.processQueryManagerCreation(this.getActiveSyncType(), this, null);
	}
	catch (t)
	{
		primaryQueryModel.resumeEventing();
		secondaryQueryModel.resumeEventing();
		throw oFF.XException.createRuntimeException(oFF.XException.getMessage(t));
	}
};
oFF.BlendingProcess.prototype.processDrillLimitation = function()
{
	let blendableQueryManager = this.m_blendableQueryManager;
	if (blendableQueryManager.supportsDrillOnBlendNodeOnly())
	{
		let primaryQueryManager = blendableQueryManager.getPrimaryQueryManager();
		blendableQueryManager.setMaxColumns(primaryQueryManager.getMaxColumns());
		blendableQueryManager.setMaxRows(primaryQueryManager.getMaxRows());
	}
};
oFF.BlendingProcess.prototype.processSynchronization = function(syncType)
{
	let continueProcessing = true;
	let primaryQueryManager = this.getActionContext().getQueryManager();
	let primaryQueryModel = primaryQueryManager.getQueryModel();
	if (this.m_configs.size() > 0)
	{
		this.processBlendingQueryManagerCreation();
	}
	else if (oFF.BlendingUtils.isQueryModelInUseForBlending(primaryQueryModel, this.m_blendableQueryManager))
	{
		this.setData(primaryQueryManager);
		continueProcessing = false;
	}
	else
	{
		this.addError(oFF.ErrorCodes.BLENDING_CONDITIONS_NOT_FULFILLED, oFF.ErrorMessages.BLENDING_CONDITIONS_NOT_FULFILLED);
		continueProcessing = false;
	}
	return continueProcessing;
};
oFF.BlendingProcess.prototype.processThresholds = function()
{
	this.m_blendedQueryManager.getQueryModel().getFormulaExceptionManager().setFormulaResultVisible(!this.m_blendableQueryManager.isFormulaExceptionResultHidden());
	let formulaExceptions = this.m_blendableQueryManager.getFormulaExceptions();
	let iter = formulaExceptions.getIterator();
	while (iter.hasNext())
	{
		let formulaException = iter.next();
		let blendFormulaException = this.m_blendedQueryManager.getQueryModel().getFormulaExceptionManager().addNewFormulaException(formulaException.getName(), formulaException.getText());
		blendFormulaException.copyFrom(formulaException, null);
		if (formulaException.getMeasure() !== null)
		{
			let convertedMeasure = this.getConvertedMeasure(formulaException, null, formulaException.getMeasure().getAliasOrMemberName());
			if (oFF.isNull(convertedMeasure))
			{
				continue;
			}
			blendFormulaException.setMeasure(convertedMeasure);
		}
		if (formulaException.getBaseMeasure() !== null || formulaException.getBaseMeasureName() !== null)
		{
			let convertedBaseMeasure = this.getConvertedMeasure(formulaException, formulaException.getBaseMeasure(), formulaException.getBaseMeasureName());
			if (oFF.isNull(convertedBaseMeasure))
			{
				continue;
			}
			blendFormulaException.setBaseMeasure(convertedBaseMeasure);
			blendFormulaException.setBaseMeasureName(convertedBaseMeasure.getName());
		}
		if (formulaException.getReferenceMeasure() !== null || formulaException.getReferenceMeasureName() !== null)
		{
			let convertedRefMeasure = this.getConvertedMeasure(formulaException, formulaException.getReferenceMeasure(), formulaException.getReferenceMeasureName());
			if (oFF.isNull(convertedRefMeasure))
			{
				continue;
			}
			blendFormulaException.setReferenceMeasure(convertedRefMeasure);
			blendFormulaException.setReferenceMeasureName(convertedRefMeasure.getName());
		}
		blendFormulaException.removeAllEvaluates();
		let evaluatesIter = formulaException.getEvaluates().getIterator();
		while (evaluatesIter.hasNext())
		{
			let evaluate = evaluatesIter.next();
			let evaluateField = evaluate.getField();
			if (oFF.notNull(evaluateField))
			{
				let blendedEvaluate = null;
				let blendedField = oFF.BlendingUtils.getBlendedFieldFromLeafField(evaluateField.getName(), evaluateField.getQueryModel().getDatasetId(), this.m_blendableQueryManager, this.m_blendedQueryManager.getQueryModel());
				if (oFF.notNull(blendedField))
				{
					blendedEvaluate = blendFormulaException.addNewEvaluateWithField(blendedField, evaluate.getLowValue().getValue());
					blendedEvaluate.copyFrom(evaluateField, null);
					blendedEvaluate.setField(blendedField);
				}
				else
				{
					if (evaluateField.getDimension() !== null)
					{
						let blendedDimension = oFF.BlendingUtils.getBlendedDimensionFromLeafDimension(evaluateField.getDimension().getName(), evaluateField.getQueryModel().getDatasetId(), this.m_blendedQueryManager.getQueryModel());
						if (oFF.notNull(blendedDimension))
						{
							blendedEvaluate = blendFormulaException.addNewEvaluate(blendedDimension, evaluate.getLowValue().getValue());
							blendedEvaluate.copyFrom(evaluateField, null);
						}
					}
				}
			}
		}
	}
};
oFF.BlendingProcess.prototype.recordState = function()
{
	let originalProcessLastState = this.m_originalProcess.getLastState();
	let iterator = this.m_blendableQueryManager.getAllQueryManagers().getIterator();
	while (iterator.hasNext())
	{
		let queryModel = iterator.next().getQueryModel();
		let primaryCalculation = queryModel.getPrimaryCalculationDimension();
		let secondaryCalculation = queryModel.getSecondaryCalculationDimension();
		let newState = oFF.XHashMapByString.create();
		this.addNewState(newState, primaryCalculation, oFF.BlendingProcess.PRIMARY_MEASURE_FILTER);
		this.addNewState(newState, secondaryCalculation, oFF.BlendingProcess.SECONDARY_MEASURE_FILTER);
		let newStateHierarchicalDimensions = oFF.XHashSetOfString.create();
		let newStateFields = oFF.XHashSetOfString.create();
		let newStateAttributeFields = oFF.XHashSetOfString.create();
		let dimensions = oFF.XList.create();
		dimensions.addAll(queryModel.getRowsAxis());
		dimensions.addAll(queryModel.getColumnsAxis());
		let dimensionsIter = dimensions.getIterator();
		while (dimensionsIter.hasNext())
		{
			let dimension = dimensionsIter.next();
			oFF.XCollectionUtils.forEach(dimension.getResultSetFields(), (resultSetFields) => {
				newStateFields.add(resultSetFields.getName());
			});
			if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && dimension.getQueryManager().getConvenienceCommands().isTypeOfBw())
			{
				oFF.XCollectionUtils.forEach(dimension.getResultSetAttributes(), (resultSetAttribute) => {
					oFF.XCollectionUtils.forEach(resultSetAttribute.getResultSetFields(), (resultSetAttributeField) => {
						newStateAttributeFields.add(resultSetAttributeField.getName());
					});
				});
			}
			if (dimension.supportsBasicStructureMembers())
			{
				continue;
			}
			if (dimension.isHierarchyActive())
			{
				newStateHierarchicalDimensions.add(dimension.getName());
			}
		}
		newState.put(oFF.BlendingProcess.HIERARCHICAL_DIMENSIONS, newStateHierarchicalDimensions);
		newState.put(oFF.BlendingProcess.FIELDS, newStateFields);
		newState.put(oFF.BlendingProcess.ATTRIBUTE_FIELDS, newStateAttributeFields);
		originalProcessLastState.put(queryModel.getDatasetId(), newState);
	}
};
oFF.BlendingProcess.prototype.releaseObjectInternal = function()
{
	this.releaseObjectWithParams(false);
};
oFF.BlendingProcess.prototype.releaseObjectWithParams = function(preserveCachedRuntimeState)
{
	if (oFF.notNull(this.m_childProcess))
	{
		this.m_childProcess.releaseObjectWithParams(preserveCachedRuntimeState);
		this.m_childProcess = null;
	}
	let queryManagerCreationSyncActionCompleted = false;
	if (!preserveCachedRuntimeState)
	{
		queryManagerCreationSyncActionCompleted = oFF.notNull(this.m_queryManagerCreationSyncAction) && this.m_queryManagerCreationSyncAction.getData() !== null;
		if (queryManagerCreationSyncActionCompleted)
		{
			oFF.XObjectExt.release(this.m_queryManagerCreationSyncAction.getData());
			this.m_queryManagerCreationSyncAction = oFF.XObjectExt.release(this.m_queryManagerCreationSyncAction);
		}
		this.m_blendedQueryManager = oFF.XObjectExt.release(this.m_blendedQueryManager);
		this.m_lastState = oFF.XObjectExt.release(this.m_lastState);
	}
	this.m_configs = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_configs);
	this.m_originalDimensionResultSetFields = oFF.XObjectExt.release(this.m_originalDimensionResultSetFields);
	this.m_originalDimensionResultSetAttributes = oFF.XObjectExt.release(this.m_originalDimensionResultSetAttributes);
	this.m_primaryBlendedMeasures = oFF.XObjectExt.release(this.m_primaryBlendedMeasures);
	this.m_blendedDimensionInfoAxisMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_blendedDimensionInfoAxisMap);
	this.m_allBlendedDrillOperations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_allBlendedDrillOperations);
	if (oFF.isNull(this.m_originalProcess))
	{
		this.m_leafAccountDrillOperations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_leafAccountDrillOperations);
	}
	this.m_cachedRuntimeBlendedQueryManagerResult = null;
	this.m_outOfContextLinkDimensionNames = oFF.XObjectExt.release(this.m_outOfContextLinkDimensionNames);
	this.m_originalProcess = null;
	if (queryManagerCreationSyncActionCompleted)
	{
		oFF.DfRsSyncAction.prototype.releaseObject.call( this );
	}
};
oFF.BlendingProcess.prototype.removeTransientDrillPaths = function(drillManager, drillOperations)
{
	if (oFF.notNull(drillOperations))
	{
		for (let j = 0; j < drillOperations.size(); j++)
		{
			let drillOperation = drillOperations.get(j);
			let drillPaths = drillOperation.getDrillPath();
			let newDrillPaths = oFF.XCollectionUtils.filter(drillPaths, (drillPath) => {
				return !drillPath.getTagging().containsKey(oFF.QTransientConstants.TAG_IS_TRANSIENT);
			});
			if (newDrillPaths.size() > 0)
			{
				drillManager.setDrillState(newDrillPaths, drillOperation.getDrillState());
			}
		}
	}
};
oFF.BlendingProcess.prototype.setBlendingMaxDrillLevel = function(blendedQueryManager)
{
	let dimensionsInDrill = oFF.XList.create();
	dimensionsInDrill.addAll(blendedQueryManager.getQueryModel().getColumnsAxis());
	dimensionsInDrill.addAll(blendedQueryManager.getQueryModel().getRowsAxis());
	let bwQueryModels = oFF.XList.create();
	let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(blendedQueryManager);
	oFF.XCollectionUtils.forEach(leafQueryModels, (leafQueryModel) => {
		if (leafQueryModel.getConvenienceCommands().isTypeOfBw())
		{
			bwQueryModels.add(leafQueryModel);
			leafQueryModel.stopEventing();
		}
	});
	for (let i = 0; i < dimensionsInDrill.size(); i++)
	{
		let dimensionInDrill = dimensionsInDrill.get(i);
		if (dimensionInDrill.supportsHierarchy() && dimensionInDrill.isHierarchyActive())
		{
			let leafDimension = oFF.BlendingUtils.findLeafDimensionFromBlendedDimension(bwQueryModels, dimensionInDrill);
			if (oFF.notNull(leafDimension))
			{
				let leveledHierarchy = dimensionInDrill.getLeveledHierarchy(leafDimension.getHierarchyName());
				if (oFF.notNull(leveledHierarchy))
				{
					let hierarchyManager = leafDimension.getHierarchyManager();
					hierarchyManager.setMaxDrillLevel(leveledHierarchy.getAllLevel().size() - 1);
				}
			}
		}
	}
	oFF.XCollectionUtils.forEach(bwQueryModels, (bwQueryModel) => {
		bwQueryModel.resumeEventing();
	});
};
oFF.BlendingProcess.prototype.validateCachedRuntimeBlendedQueryManager = function()
{
	let previousMeasureFilterState = this.m_originalProcess.getLastState();
	let leafQueryManagers = oFF.XList.create();
	let blendingProcessConfig = this.m_configs.get(0);
	let primaryQueryManager = blendingProcessConfig.getPrimaryQueryManager();
	if (primaryQueryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.BLENDING)
	{
		leafQueryManagers.add(primaryQueryManager);
	}
	else
	{
		leafQueryManagers.add(this.m_blendableQueryManager.getPrimaryQueryManager());
	}
	let secondaryQueryManager = blendingProcessConfig.getSecondaryQueryManager();
	if (secondaryQueryManager.getInitSettings().getMode() !== oFF.QueryManagerMode.BLENDING)
	{
		leafQueryManagers.add(secondaryQueryManager);
	}
	let iterator = leafQueryManagers.getIterator();
	while (iterator.hasNext())
	{
		let queryModel = iterator.next().getQueryModel();
		let primaryCalculation = queryModel.getPrimaryCalculationDimension();
		let secondaryCalculation = queryModel.getSecondaryCalculationDimension();
		let previousState = oFF.notNull(previousMeasureFilterState) && !previousMeasureFilterState.isReleased() ? previousMeasureFilterState.getByKey(queryModel.getDatasetId()) : null;
		if (this.m_blendableQueryManager.getAllMembersOrFsicEnabled(queryModel.getDatasetId()))
		{
			return false;
		}
		if (this.needsUpdate(previousState, primaryCalculation, oFF.BlendingProcess.PRIMARY_MEASURE_FILTER))
		{
			return false;
		}
		if (this.needsUpdate(previousState, secondaryCalculation, oFF.BlendingProcess.SECONDARY_MEASURE_FILTER))
		{
			return false;
		}
		let previousStateHierarchicalDimensions = previousState.getByKey(oFF.BlendingProcess.HIERARCHICAL_DIMENSIONS);
		let previousStateFields = oFF.XHashSetOfString.create();
		previousStateFields.addAll(previousState.getByKey(oFF.BlendingProcess.FIELDS));
		let previousStateAttributeFields = oFF.XHashSetOfString.create();
		previousStateAttributeFields.addAll(previousState.getByKey(oFF.BlendingProcess.ATTRIBUTE_FIELDS));
		let dimensions = oFF.XList.create();
		dimensions.addAll(queryModel.getRowsAxis());
		dimensions.addAll(queryModel.getColumnsAxis());
		let dimensionsIter = dimensions.getIterator();
		while (dimensionsIter.hasNext())
		{
			let dimension = dimensionsIter.next();
			if (oFF.XCollectionUtils.contains(dimension.getResultSetFields(), (resultSetField) => {
				let fieldName = resultSetField.getName();
				if (!previousStateFields.contains(fieldName))
				{
					return true;
				}
				previousStateFields.removeElement(fieldName);
				return false;
			}))
			{
				return false;
			}
			if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && dimension.getQueryManager().getConvenienceCommands().isTypeOfBw())
			{
				if (oFF.XCollectionUtils.contains(dimension.getResultSetAttributes(), (resultSetAttribute) => {
					let attributeName = resultSetAttribute.getName();
					let resultSetAttributeFieldIter = resultSetAttribute.getResultSetFields().getIterator();
					while (resultSetAttributeFieldIter.hasNext())
					{
						let resultSetAttributeField = resultSetAttributeFieldIter.next();
						if (!previousStateAttributeFields.contains(resultSetAttributeField.getName()))
						{
							return true;
						}
					}
					previousStateAttributeFields.removeElement(attributeName);
					return false;
				}))
				{
					return false;
				}
			}
			if (dimension.isMeasureStructure() || dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				continue;
			}
			let isHierarchyActive = dimension.isHierarchyActive();
			if (oFF.isNull(previousStateHierarchicalDimensions) || isHierarchyActive && !previousStateHierarchicalDimensions.contains(dimension.getName()) || !isHierarchyActive && previousStateHierarchicalDimensions.contains(dimension.getName()))
			{
				return false;
			}
		}
		if (!previousStateFields.isEmpty())
		{
			return false;
		}
	}
	return true;
};

oFF.OlapEnvVarProcessor = function() {};
oFF.OlapEnvVarProcessor.prototype = new oFF.AbstractOlapEnvQueryManagerHandler();
oFF.OlapEnvVarProcessor.prototype._ff_c = "OlapEnvVarProcessor";

oFF.OlapEnvVarProcessor.create = function(olapEnvArea)
{
	let newObj = new oFF.OlapEnvVarProcessor();
	newObj.setupQueryManagerHandler(olapEnvArea);
	return newObj;
};
oFF.OlapEnvVarProcessor.prototype.m_updateAction = null;
oFF.OlapEnvVarProcessor.prototype.activateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	return oFF.OlapEnvVarAction.createAndRunVariantActivation(this, syncType, listener, customIdentifier, variableVariant);
};
oFF.OlapEnvVarProcessor.prototype.canHaveExtensions = function()
{
	return false;
};
oFF.OlapEnvVarProcessor.prototype.canMaterializeCompleteObject = function()
{
	return false;
};
oFF.OlapEnvVarProcessor.prototype.cancelReInitVariables = function(syncType, listener, customIdentifier)
{
	return oFF.OlapEnvVarAction.createAndRunCancel(this, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.checkVariables = function(syncType, listener, customIdentifier)
{
	return oFF.OlapEnvVarAction.createAndRunCheck(this, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.clearExternalVariablesRepresentations = function()
{
	this.queueEventing();
	oFF.QVariableUtils.clearExternalVariablesRepresentations(this.getVariables());
	this.resumeEventing();
};
oFF.OlapEnvVarProcessor.prototype.cloneOlapComponent = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.createMergeVarKey = function(queryManager, variable)
{
	let buffer = oFF.XStringBuffer.create();
	buffer.append(queryManager.getSystemName());
	buffer.append("~");
	let dataSource = queryManager.getDataSource();
	buffer.append(dataSource.getFullQualifiedName());
	buffer.append("~");
	buffer.append(variable.getName());
	return buffer.toString();
};
oFF.OlapEnvVarProcessor.prototype.deleteVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	let queryManager = this.findQmForDatasource(variableVariant.getDataSource());
	if (oFF.isNull(queryManager))
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "No QueryManager found to delete the variant", syncType, listener, customIdentifier);
	}
	return queryManager.deleteVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.deserializeExt = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.deserializeFromContent = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.deserializeFromElementExt = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.deserializeNewComponentExt = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.deserializeNewComponentFromElementExt = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.emptyVariableDefinition = function(syncType, listener, customIdentifier)
{
	return oFF.OlapEnvVarAction.createAndRunEmptyVariableDefinition(this, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.findQmForDatasource = function(dataSource)
{
	let fullQualifiedName = dataSource.getFullQualifiedName();
	let system = dataSource.getSystemName();
	return oFF.XCollectionUtils.findFirst(this.getTaggedQueryManagers(), (qm) => {
		return oFF.XString.isEqual(qm.getDataSource().getFullQualifiedName(), fullQualifiedName) && oFF.XString.isEqual(qm.getDataSource().getSystemName(), system);
	});
};
oFF.OlapEnvVarProcessor.prototype.getAllBWVariableProcessors = function()
{
	let varProcessorList = oFF.XList.create();
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		let convenienceCommands = queryManager.getConvenienceCommands();
		if (oFF.notNull(convenienceCommands) && convenienceCommands.isBw() && variableProcessor.hasVariables())
		{
			varProcessorList.add(variableProcessor);
		}
	}
	return varProcessorList;
};
oFF.OlapEnvVarProcessor.prototype.getCellContextManager = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getChangedProperties = function()
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getChangedPropertiesFromModellerMetadata = function()
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getChangedPropertiesInDetail = function()
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getChildren = function()
{
	return this.getChildrenIterator();
};
oFF.OlapEnvVarProcessor.prototype.getChildrenIterator = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getComponentType = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getContentConstant = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getContentElement = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getContext = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getConvenienceCommands = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getDataSource = function()
{
	let result = null;
	let taggedQueryManagers = this.getTaggedQueryManagers();
	for (let i = 0; i < taggedQueryManagers.size(); i++)
	{
		let dataSource = taggedQueryManagers.get(i).getDataSource();
		if (oFF.isNull(result))
		{
			result = dataSource;
			continue;
		}
		if (oFF.notNull(dataSource))
		{
			if (!oFF.XString.isEqual(result.getSystemName(), dataSource.getSystemName()) || !oFF.XString.isEqual(result.getFullQualifiedName(), dataSource.getFullQualifiedName()))
			{
				return null;
			}
		}
	}
	return result;
};
oFF.OlapEnvVarProcessor.prototype.getDataSourceOrigin = function()
{
	return this.getDataSource();
};
oFF.OlapEnvVarProcessor.prototype.getDataSourceTarget = function()
{
	return this.getDataSource();
};
oFF.OlapEnvVarProcessor.prototype.getDimensionAccessor = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getDimensionMemberVariables = function()
{
	return oFF.QVariableUtils.getDimensionMemberVariables(this.getVariables());
};
oFF.OlapEnvVarProcessor.prototype.getDisplayDescription = function()
{
	let text = this.getText();
	return oFF.XStringUtils.isNotNullAndNotEmpty(text) ? text : this.getName();
};
oFF.OlapEnvVarProcessor.prototype.getDisplayName = function()
{
	return this.getName();
};
oFF.OlapEnvVarProcessor.prototype.getDrillManager = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getExtensionByName = function(key)
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getExtensions = function()
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getFieldAccessorSingle = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getHierarchyNameVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this.getVariables(), name, oFF.VariableType.HIERARCHY_NAME_VARIABLE);
};
oFF.OlapEnvVarProcessor.prototype.getHierarchyNameVariables = function()
{
	return oFF.QVariableUtils.getHierarchyNameVariables(this.getVariables());
};
oFF.OlapEnvVarProcessor.prototype.getHierarchyNodeVariable = function(name)
{
	return oFF.QVariableUtils.getVariableByType(this.getVariables(), name, oFF.VariableType.HIERARCHY_NODE_VARIABLE);
};
oFF.OlapEnvVarProcessor.prototype.getIndexedChildren = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledAndNonTechnicalVariables(this.getVariables());
};
oFF.OlapEnvVarProcessor.prototype.getInputEnabledVariable = function(name)
{
	return oFF.QVariableUtils.getInputEnabledVariable(this.getVariables(), name);
};
oFF.OlapEnvVarProcessor.prototype.getInputEnabledVariables = function()
{
	return oFF.QVariableUtils.getInputEnabledVariables(this.getVariables());
};
oFF.OlapEnvVarProcessor.prototype.getKeyRefStorage = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getMergedVariables = function()
{
	let mergedVariables = oFF.XListOfNameObject.create();
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		let variableContainer = variableProcessor.getVariableContainer();
		let contVariables = variableContainer.getVariables();
		let contVariablesSize = contVariables.size();
		for (let j = 0; j < contVariablesSize; j++)
		{
			let variable = contVariables.get(j);
			let key = this.createMergeVarKey(queryManager, variable);
			let mergedVar = mergedVariables.getByKey(key);
			if (oFF.isNull(mergedVar))
			{
				mergedVariables.add(oFF.OlapEnvVariable.create(key, variable));
			}
			else
			{
				mergedVar.addSecondaryVariable(variable);
			}
		}
	}
	return mergedVariables;
};
oFF.OlapEnvVarProcessor.prototype.getMetaValue = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getModCounter = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getModelCapabilities = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getName = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getNamedChildren = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getOlapComponentType = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getParent = function()
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getQueryManager = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getQueryModel = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getSelectedVariableProcessors = function(targetState)
{
	let varProcessorList = oFF.XList.create();
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		if (variableProcessor.hasVariables())
		{
			if (oFF.isNull(targetState))
			{
				varProcessorList.add(variableProcessor);
			}
			else
			{
				let variableProcessorState = variableProcessor.getVariableProcessorState();
				if (variableProcessorState.isTypeOf(targetState) || oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION === variableProcessorState)
				{
					varProcessorList.add(variableProcessor);
				}
			}
		}
	}
	return varProcessorList;
};
oFF.OlapEnvVarProcessor.prototype.getSelectionTagging = function()
{
	return this.getSelectionMap();
};
oFF.OlapEnvVarProcessor.prototype.getStorageGroupName = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getStorageName = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getStorageObjectName = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getSystemName = function()
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getTagValue = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getTagging = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getText = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.getVariable = function(name)
{
	let mergedVariables = this.getMergedVariables();
	for (let i = 0; i < mergedVariables.size(); i++)
	{
		let variable = mergedVariables.get(i).getMainVariable();
		if (oFF.XString.isEqual(variable.getName(), name))
		{
			return variable;
		}
	}
	return null;
};
oFF.OlapEnvVarProcessor.prototype.getVariableContainer = function()
{
	return this;
};
oFF.OlapEnvVarProcessor.prototype.getVariableMode = function()
{
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		if (variableProcessor.getVariableMode() === oFF.VariableMode.SUBMIT_AND_REINIT)
		{
			return oFF.VariableMode.SUBMIT_AND_REINIT;
		}
	}
	return oFF.VariableMode.DIRECT_VALUE_TRANSFER;
};
oFF.OlapEnvVarProcessor.prototype.getVariableProcessorState = function()
{
	if (oFF.notNull(this.m_updateAction) && this.m_updateAction.getSyncState() === oFF.SyncState.PROCESSING)
	{
		return oFF.VariableProcessorState.PROCESSING;
	}
	let variableProcessorState = null;
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		let currentState = variableProcessor.getVariableProcessorState();
		if (currentState.isTypeOf(oFF.VariableProcessorState.PROCESSING))
		{
			return oFF.VariableProcessorState.PROCESSING;
		}
		if (oFF.isNull(variableProcessorState))
		{
			variableProcessorState = currentState;
		}
		else if (variableProcessorState !== currentState)
		{
			let newState = null;
			if (variableProcessorState.isTypeOf(oFF.VariableProcessorState.CHANGEABLE))
			{
				if (currentState === oFF.VariableProcessorState.SUBMITTED)
				{
					newState = oFF.VariableProcessorState.SUBMITTED;
				}
				else if (currentState.isTypeOf(oFF.VariableProcessorState.CHANGEABLE))
				{
					if (currentState === oFF.VariableProcessorState.CHANGEABLE_REINIT || variableProcessorState === oFF.VariableProcessorState.CHANGEABLE_REINIT)
					{
						newState = oFF.VariableProcessorState.CHANGEABLE_REINIT;
					}
					else if (currentState === oFF.VariableProcessorState.SUBMIT_FAILED || variableProcessorState === oFF.VariableProcessorState.SUBMIT_FAILED)
					{
						newState = oFF.VariableProcessorState.SUBMIT_FAILED;
					}
					else if (currentState === oFF.VariableProcessorState.SUBMIT_FAILED_AFTER_REINIT || variableProcessorState === oFF.VariableProcessorState.SUBMIT_FAILED_AFTER_REINIT)
					{
						newState = oFF.VariableProcessorState.SUBMIT_FAILED_AFTER_REINIT;
					}
					else
					{
						newState = oFF.VariableProcessorState.CHANGEABLE;
					}
				}
			}
			else if (variableProcessorState === oFF.VariableProcessorState.SUBMITTED && currentState.isTypeOf(oFF.VariableProcessorState.CHANGEABLE))
			{
				newState = oFF.VariableProcessorState.SUBMITTED;
			}
			if (oFF.isNull(newState))
			{
				newState = oFF.VariableProcessorState.MIXED;
			}
			variableProcessorState = newState;
		}
	}
	return variableProcessorState;
};
oFF.OlapEnvVarProcessor.prototype.getVariableVariants = function()
{
	let allVariants = oFF.XListOfNameObject.create();
	let queryManagers = this.getTaggedQueryManagers();
	for (let i = 0; i < queryManagers.size(); i++)
	{
		let variants = queryManagers.get(i).getVariableVariants();
		if (!oFF.XCollectionUtils.hasElements(variants))
		{
			continue;
		}
		for (let j = 0; j < variants.size(); j++)
		{
			let variant = variants.get(j);
			if (!allVariants.containsKey(variant.getName()))
			{
				allVariants.add(variant);
			}
		}
	}
	return allVariants;
};
oFF.OlapEnvVarProcessor.prototype.getVariables = function()
{
	let variables = oFF.XListOfNameObject.create();
	let mergedVariables = this.getMergedVariables();
	let mergedVariablesSize = mergedVariables.size();
	for (let i = 0; i < mergedVariablesSize; i++)
	{
		variables.add(mergedVariables.get(i).getMainVariable());
	}
	return variables;
};
oFF.OlapEnvVarProcessor.prototype.hasInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.XCollectionUtils.hasElements(this.getInputEnabledAndNonTechnicalVariables());
};
oFF.OlapEnvVarProcessor.prototype.hasInputEnabledVariables = function()
{
	return oFF.QVariableUtils.hasInputEnabledVariables(this.getVariables());
};
oFF.OlapEnvVarProcessor.prototype.hasMandatoryVariables = function()
{
	return oFF.QVariableUtils.hasMandatoryVariables(this.getVariables());
};
oFF.OlapEnvVarProcessor.prototype.hasPropertyChanged = function(propertyName)
{
	return false;
};
oFF.OlapEnvVarProcessor.prototype.hasPropertyChangedForInAData = function(propertyName)
{
	return false;
};
oFF.OlapEnvVarProcessor.prototype.hasVariables = function()
{
	return this.getVariables().hasElements();
};
oFF.OlapEnvVarProcessor.prototype.isCancelNeeded = function()
{
	return this.getVariableProcessorState().isCancelNeeded();
};
oFF.OlapEnvVarProcessor.prototype.isComponentNode = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.isDirectVariableTransferEnabled = function()
{
	return this.getVariableProcessorState() === oFF.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER;
};
oFF.OlapEnvVarProcessor.prototype.isEventingStopped = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.isFailedSubmit = function()
{
	return this.getVariableProcessorState().isFailedSubmit();
};
oFF.OlapEnvVarProcessor.prototype.isLeaf = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.isNode = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.isProcessingAutoSubmit = function()
{
	return this.getVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || this.getVariableProcessorState() === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT;
};
oFF.OlapEnvVarProcessor.prototype.isRRIAffectedComponent = function()
{
	return false;
};
oFF.OlapEnvVarProcessor.prototype.isReinitNeeded = function()
{
	return this.getVariableProcessorState().isReinitNeeded();
};
oFF.OlapEnvVarProcessor.prototype.isSubmitNeeded = function()
{
	return this.getVariableProcessorState().isSubmitNeeded();
};
oFF.OlapEnvVarProcessor.prototype.isSubmitted = function()
{
	return this.getVariableProcessorState() === oFF.VariableProcessorState.SUBMITTED;
};
oFF.OlapEnvVarProcessor.prototype.isUsingSavedPromptsForExitVariables = function()
{
	return false;
};
oFF.OlapEnvVarProcessor.prototype.processDeserializeExt = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.queueEventing = function()
{
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		let variableContainer = variableProcessor.getVariableContainer();
		variableContainer.queueEventing();
	}
};
oFF.OlapEnvVarProcessor.prototype.reInitVariablesAfterSubmit = function(syncType, listener, customIdentifier)
{
	return oFF.OlapEnvVarAction.createAndRunReInitAfterSubmit(this, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.reconfigure = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.registerChangedListener = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.registerVariableProcessorStateChangedListener = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.releaseObject = function()
{
	oFF.AbstractOlapEnvQueryManagerHandler.prototype.releaseObject.call( this );
};
oFF.OlapEnvVarProcessor.prototype.resetExitOrUpdateDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	this.m_updateAction = oFF.OlapEnvUpdateAction.createAndRunUpdateDynamicValues(this, syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
};
oFF.OlapEnvVarProcessor.prototype.resumeEventing = function()
{
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		let variableContainer = variableProcessor.getVariableContainer();
		variableContainer.resumeEventing();
	}
};
oFF.OlapEnvVarProcessor.prototype.saveVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	let queryManager = this.findQmForDatasource(variableVariant.getDataSource());
	if (oFF.isNull(queryManager))
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "No QueryManager found to modify the variant", syncType, listener, customIdentifier);
	}
	return queryManager.saveVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.serialize = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.serializeToContent = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.serializeToContentExt = function(modelFormat, capabilities)
{
	return null;
};
oFF.OlapEnvVarProcessor.prototype.serializeToElement = function(modelFormat)
{
	return this.serializeToElementExt(modelFormat, null);
};
oFF.OlapEnvVarProcessor.prototype.serializeToElementExt = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.serializeToFormat = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.serializeToString = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.serializeToStringExt = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.setChangedProperties = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.setDirectVariableTransferEnabled = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.setUseSavedPromptsForExitVariables = function(disableExitVariables)
{
	oFF.XStream.of(this.getOlapEnv().getAllAreaQueryManager()).forEach((qm) => {
		qm.setUseSavedPromptsForExitVariables(disableExitVariables);
	});
};
oFF.OlapEnvVarProcessor.prototype.setWinControlInAutoSubmitByType = function(variableType, isWinControlInAutoSubmit, isLimitToExitVariable)
{
	return;
};
oFF.OlapEnvVarProcessor.prototype.stopEventing = function()
{
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		let variableContainer = variableProcessor.getVariableContainer();
		variableContainer.stopEventing();
	}
};
oFF.OlapEnvVarProcessor.prototype.submitVariables = function(syncType, listener, customIdentifier)
{
	return oFF.OlapEnvVarAction.createAndRunSubmit(this, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.supportsCheckVariables = function()
{
	return oFF.XStream.of(this.getTaggedQueryManagers()).anyMatch((qm) => {
		return qm.supportsCheckVariables();
	});
};
oFF.OlapEnvVarProcessor.prototype.supportsDirectVariableTransfer = function()
{
	let queryManagerList = this.getTaggedQueryManagers();
	let queryManagerSize = queryManagerList.size();
	for (let i = 0; i < queryManagerSize; i++)
	{
		let queryManager = queryManagerList.get(i);
		let variableProcessor = queryManager.getVariableProcessor();
		if (!variableProcessor.supportsReInitVariables())
		{
			return false;
		}
	}
	return true;
};
oFF.OlapEnvVarProcessor.prototype.supportsMaintainsVariableVariants = function()
{
	return oFF.XStream.of(this.getTaggedQueryManagers()).anyMatch((qm) => {
		return qm.supportsMaintainsVariableVariants();
	});
};
oFF.OlapEnvVarProcessor.prototype.supportsReInitVariables = function()
{
	return oFF.XStream.of(this.getTaggedQueryManagers()).anyMatch((qm) => {
		return qm.supportsReInitVariables();
	});
};
oFF.OlapEnvVarProcessor.prototype.supportsVariableMasking = function()
{
	return oFF.XStream.of(this.getTaggedQueryManagers()).anyMatch((qm) => {
		return qm.supportsVariableMasking();
	});
};
oFF.OlapEnvVarProcessor.prototype.syncVariableValues = function()
{
	let mergedVariables = this.getMergedVariables();
	let mergedVariablesSize = mergedVariables.size();
	for (let i = 0; i < mergedVariablesSize; i++)
	{
		mergedVariables.get(i).sync();
	}
};
oFF.OlapEnvVarProcessor.prototype.transferVariables = function(syncType, listener, customIdentifier)
{
	return oFF.OlapEnvVarAction.createAndRunSetGetValues(this, syncType, listener, customIdentifier);
};
oFF.OlapEnvVarProcessor.prototype.transferVariablesByVariable = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.unregisterChangedListener = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.unregisterVariableProcessorStateChangedListener = oFF.noSupport;
oFF.OlapEnvVarProcessor.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	this.m_updateAction = oFF.OlapEnvUpdateAction.createAndRunUpdateDynamicValues(this, syncType, listener, customIdentifier, false);
};
oFF.OlapEnvVarProcessor.prototype.updateVariableVariantValues = function(variableVariant, syncType, listener, customIdentifier)
{
	let queryManager = this.findQmForDatasource(variableVariant.getDataSource());
	if (oFF.isNull(queryManager))
	{
		return oFF.OlapVarImmediateCallback.createAndRunError(oFF.ErrorCodes.INVALID_STATE, "No QueryManager found to save the variant", syncType, listener, customIdentifier);
	}
	this.syncVariableValues();
	return queryManager.updateVariableVariantValues(variableVariant, syncType, listener, customIdentifier);
};

oFF.BlendableResultSetContainer = function() {};
oFF.BlendableResultSetContainer.prototype = new oFF.ResultSetContainer();
oFF.BlendableResultSetContainer.prototype._ff_c = "BlendableResultSetContainer";

oFF.BlendableResultSetContainer.createBlendableResultSetContainer = function(blendableQueryManager, previousRuntimeBlendedQueryManager, lastState)
{
	let rsContainer = new oFF.BlendableResultSetContainer();
	rsContainer.setupBlendableResultSetContainer(blendableQueryManager);
	rsContainer.m_runtimeQueryManager = previousRuntimeBlendedQueryManager;
	rsContainer.m_lastState = lastState;
	rsContainer.m_queueNextQuery = false;
	rsContainer.m_onPostQueryExecutionListener = null;
	rsContainer.m_pendingHierarchyFetches = 0;
	rsContainer.m_pendingValueHelps = 0;
	return rsContainer;
};
oFF.BlendableResultSetContainer.prototype.m_blendingProcess = null;
oFF.BlendableResultSetContainer.prototype.m_lastState = null;
oFF.BlendableResultSetContainer.prototype.m_onPostQueryExecutionListener = null;
oFF.BlendableResultSetContainer.prototype.m_pendingHierarchyFetches = 0;
oFF.BlendableResultSetContainer.prototype.m_pendingValueHelps = 0;
oFF.BlendableResultSetContainer.prototype.m_queueNextQuery = false;
oFF.BlendableResultSetContainer.prototype.m_runtimeQueryManager = null;
oFF.BlendableResultSetContainer.prototype._resetSyncStateInternal = function(requiresReExecution)
{
	if (requiresReExecution || this.getSyncState().isInSync())
	{
		this.resetCachedState();
	}
	oFF.ResultSetContainer.prototype._resetSyncStateInternal.call( this , requiresReExecution);
};
oFF.BlendableResultSetContainer.prototype.continueBlendProcess = function(customIdentifier)
{
	if (this.hasNoPendingQueries())
	{
		let blendableQueryManager = this.getActionContext();
		let blendingProcessConfigs = blendableQueryManager.getBlendingProcessConfigs(this);
		this.processBlendedQueryManager(blendableQueryManager, blendingProcessConfigs, this.getActiveSyncType(), this, customIdentifier);
	}
};
oFF.BlendableResultSetContainer.prototype.getBlendedMeasureDependentMembers = function(membersInFilter)
{
	let dependentsByDatasetId = oFF.XHashMapByString.create();
	let membersIter = membersInFilter.getIterator();
	while (membersIter.hasNext())
	{
		let member = membersIter.next();
		if (member.isMultiDataSourceMember())
		{
			let formulaItemMembers = oFF.FormulaItemUtils.getFormulaMembers(member.getFormula());
			let formulaItemMembersIter = formulaItemMembers.getIterator();
			while (formulaItemMembersIter.hasNext())
			{
				let formulaItemMember = formulaItemMembersIter.next();
				let formulaDimensionContext = formulaItemMember.getDimensionContext();
				if (oFF.notNull(formulaDimensionContext) && formulaDimensionContext.getQueryModel().getAccountDimension() === formulaDimensionContext)
				{
					let formulaDimDatasetId = formulaDimensionContext.getQueryModel().getDatasetId();
					let dependentNames = dependentsByDatasetId.containsKey(formulaDimDatasetId) ? dependentsByDatasetId.getByKey(formulaDimDatasetId) : oFF.XHashSetOfString.create();
					dependentNames.add(formulaItemMember.getMemberName());
					dependentsByDatasetId.putIfAbsent(formulaDimDatasetId, dependentNames);
				}
			}
		}
	}
	return dependentsByDatasetId;
};
oFF.BlendableResultSetContainer.prototype.getBlendingProcess = function()
{
	return this.m_blendingProcess;
};
oFF.BlendableResultSetContainer.prototype.getContext = function()
{
	return this.m_runtimeQueryManager;
};
oFF.BlendableResultSetContainer.prototype.getCursorResultSet = function()
{
	if (oFF.isNull(this.m_cursorResultSetInSync))
	{
		let syncState = this.getSyncState();
		if (syncState === oFF.SyncState.PROCESSING)
		{
			throw oFF.XException.createIllegalStateException("Cannot retrieve the resultset while processing");
		}
		else if (syncState === oFF.SyncState.OUT_OF_SYNC)
		{
			let blendableQueryManager = this.getActionContext();
			if (oFF.isNull(this.m_blendingProcess) || this.m_blendingProcess.isSyncCanceled())
			{
				this.m_blendingProcess = oFF.XObjectExt.release(this.m_blendingProcess);
				blendableQueryManager.getBlendingProcessConfigs(this);
				if (this.hasErrors())
				{
					return null;
				}
			}
			let blendingProcessConfigs = blendableQueryManager.getBlendingProcessConfigs(this);
			this.processRuntimeQueryManagerCreation(blendableQueryManager, blendingProcessConfigs, oFF.SyncType.BLOCKING, this, null);
			if (oFF.notNull(this.m_runtimeQueryManager) && this.m_runtimeQueryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
			{
				this.m_cursorResultSetInSync = oFF.XWeakReferenceUtil.getWeakRef(this.m_runtimeQueryManager.getCursorResultSet());
			}
			else
			{
				oFF.ResultSetContainer.prototype.processExecution.call( this , oFF.SyncType.BLOCKING, null, null);
			}
		}
		else if (syncState === oFF.SyncState.IN_SYNC)
		{
			this.m_cursorResultSetInSync = oFF.XWeakReferenceUtil.getWeakRef(this.m_runtimeQueryManager.getCursorResultSet());
		}
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_cursorResultSetInSync);
};
oFF.BlendableResultSetContainer.prototype.getExpandedAccountMembersToFetch = function(blendableQueryManager, syncType)
{
	if (blendableQueryManager.getPrimaryQueryManager().getQueryModel().getAccountDimension() === null)
	{
		return 0;
	}
	let expandedParentsByDatasetId = this.getExpandedParentsByDatasetId(blendableQueryManager);
	if (expandedParentsByDatasetId.isEmpty())
	{
		return 0;
	}
	let datasetIdsToFetch = oFF.XHashSetOfString.create();
	let membersInFilter = oFF.BlendingUtils.getPrimaryMeasuresFromFilters(blendableQueryManager, true, false, true);
	let dependentsByDatasetId = this.getBlendedMeasureDependentMembers(membersInFilter);
	let dependentDatasetIdIter = dependentsByDatasetId.getKeysAsIterator();
	while (dependentDatasetIdIter.hasNext())
	{
		let dependentDatasetId = dependentDatasetIdIter.next();
		if (expandedParentsByDatasetId.containsKey(dependentDatasetId) && !datasetIdsToFetch.contains(dependentDatasetId))
		{
			let dependentNames = dependentsByDatasetId.getByKey(dependentDatasetId);
			let dependentNamesIter = dependentNames.getIterator();
			while (dependentNamesIter.hasNext())
			{
				let dependentName = dependentNamesIter.next();
				if (!blendableQueryManager.doesChildMemberExist(dependentDatasetId, dependentName) && !oFF.XCollectionUtils.contains(membersInFilter, (member) => {
					return oFF.XString.isEqual(member.getQueryModel().getDatasetId(), dependentDatasetId) && oFF.XString.isEqual(member.getAliasOrMemberName(), dependentName);
				}))
				{
					datasetIdsToFetch.add(dependentDatasetId);
				}
			}
		}
	}
	if (datasetIdsToFetch.isEmpty())
	{
		return 0;
	}
	let dimensionsToFetch = this.setupValueHelpQueries(blendableQueryManager, expandedParentsByDatasetId, datasetIdsToFetch);
	let dimensionsToFetchIter = dimensionsToFetch.getKeysAsIterator();
	while (dimensionsToFetchIter.hasNext())
	{
		let datasetId = dimensionsToFetchIter.next();
		dimensionsToFetch.getByKey(datasetId).processValueHelp(syncType, this, oFF.XStringValue.create(datasetId));
	}
	return dimensionsToFetch.size();
};
oFF.BlendableResultSetContainer.prototype.getExpandedParentsByDatasetId = function(blendableQueryManager)
{
	let leafQueryManagers = blendableQueryManager.getAllQueryManagers();
	let expandedParentsByDatasetId = oFF.XHashMapByString.create();
	let blendedDrillOperationsIter = blendableQueryManager.getBlendedDrillOperations().getIterator();
	while (blendedDrillOperationsIter.hasNext())
	{
		let blendedDrillOperation = blendedDrillOperationsIter.next();
		let drillOperationDatasetId = blendedDrillOperation.getDatasetId();
		let hasExpandedAccountMember = blendedDrillOperation.getDrillState() === oFF.DrillState.EXPANDED && oFF.XCollectionUtils.contains(leafQueryManagers, (queryManager) => {
			let queryModel = queryManager.getQueryModel();
			let accountDimension = queryModel.getAccountDimension();
			return oFF.notNull(accountDimension) && oFF.XString.isEqual(queryModel.getDatasetId(), drillOperationDatasetId) && oFF.XString.isEqual(accountDimension.getName(), blendedDrillOperation.getDimensionName());
		});
		if (hasExpandedAccountMember)
		{
			let expandedMembers = expandedParentsByDatasetId.containsKey(drillOperationDatasetId) ? expandedParentsByDatasetId.getByKey(drillOperationDatasetId) : oFF.XHashSetOfString.create();
			expandedParentsByDatasetId.putIfAbsent(drillOperationDatasetId, expandedMembers);
			let drillPathIterator = blendedDrillOperation.getBlendedDrillPathElementInfos().getIterator();
			while (drillPathIterator.hasNext())
			{
				let drillPathElement = drillPathIterator.next();
				expandedMembers.add(drillPathElement.getDrillMember());
			}
		}
	}
	let expandedParentsByDatasetIdIter = expandedParentsByDatasetId.getKeysAsIterator();
	while (expandedParentsByDatasetIdIter.hasNext())
	{
		let datasetId = expandedParentsByDatasetIdIter.next();
		let expandedParents = expandedParentsByDatasetId.getByKey(datasetId);
		let parentChildMemberMap = blendableQueryManager.getExpandedParentsMap(datasetId);
		if (oFF.notNull(parentChildMemberMap))
		{
			let parentMemberNames = parentChildMemberMap.getKeysAsReadOnlyList();
			for (let i = parentMemberNames.size() - 1; i >= 0; i--)
			{
				let parentMemberName = parentMemberNames.get(i);
				this.removeExpandedParentRecursively(parentMemberName, parentChildMemberMap, expandedParents);
			}
		}
		if (expandedParents.size() === 0)
		{
			expandedParentsByDatasetId.remove(datasetId);
		}
	}
	return expandedParentsByDatasetId;
};
oFF.BlendableResultSetContainer.prototype.getRuntimeQueryManager = function()
{
	return this.m_runtimeQueryManager;
};
oFF.BlendableResultSetContainer.prototype.hasNoPendingQueries = function()
{
	return this.m_pendingHierarchyFetches === 0 && this.m_pendingValueHelps === 0;
};
oFF.BlendableResultSetContainer.prototype.onHierarchyCatalogResult = function(extResult, result, customIdentifier)
{
	this.m_pendingHierarchyFetches--;
	this.continueBlendProcess(customIdentifier);
};
oFF.BlendableResultSetContainer.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (this.m_queueNextQuery)
	{
		this.m_queueNextQuery = false;
		this.m_blendingProcess.postQueryExecution();
		this.processBlendedQueryManagerCreation(this.getActiveSyncType(), customIdentifier);
	}
	else
	{
		this.addAllMessages(extResult);
		let blendableQueryManager = this.getActionContext();
		let allQueryManagers = blendableQueryManager.getAllQueryManagers();
		oFF.XCollectionUtils.forEach(allQueryManagers, (queryManager) => {
			this.addAllMessages(queryManager);
		});
		this.setData(resultSetContainer);
		this.endSync();
		if (oFF.notNull(this.m_onPostQueryExecutionListener))
		{
			this.m_onPostQueryExecutionListener.onPostQueryExecution();
		}
		this.m_blendingProcess.postQueryExecution();
	}
};
oFF.BlendableResultSetContainer.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	this.addAllMessages(extResult);
	if (oFF.notNull(queryManager))
	{
		this.m_runtimeQueryManager = queryManager;
		this.m_lastState = this.m_blendingProcess.getLastState();
	}
	if (this.m_queueNextQuery)
	{
		this.m_queueNextQuery = false;
		this.m_blendingProcess.postQueryExecution();
		this.processBlendedQueryManagerCreation(this.getActiveSyncType(), customIdentifier);
	}
	else if (!extResult.hasErrors() && oFF.notNull(queryManager))
	{
		this.m_blendingProcess.prepareQueryExecution();
		this.m_runtimeQueryManager.processQueryExecution(this.getActiveSyncType(), this, customIdentifier);
	}
	else
	{
		this.m_blendingProcess.postQueryExecution();
		if (oFF.notNull(this.m_onPostQueryExecutionListener))
		{
			this.m_onPostQueryExecutionListener.onPostQueryExecution();
		}
		this.endSync();
	}
};
oFF.BlendableResultSetContainer.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.m_pendingValueHelps--;
	if (!extResult.isReleased())
	{
		let blendableQueryManager = this.getActionContext();
		let datasetId = customIdentifier.toString();
		let nodes = extResult.getData();
		let valueHelpIter = nodes.getIterator();
		while (valueHelpIter.hasNext())
		{
			let node = valueHelpIter.next();
			let dimensionMember = node.getDimensionMember();
			if (node.getParentNode() !== null)
			{
				let parentDimensionMember = node.getParentNode().getDimensionMember();
				blendableQueryManager.addExpandedParentChildMember(datasetId, parentDimensionMember.getName(), dimensionMember.getName());
			}
		}
		let leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		let leafQueryModel = leafQueryManager.getQueryModel();
		let leafAccountDimension = leafQueryModel.getAccountDimension();
		leafAccountDimension.clearSelectorSettings();
	}
	this.continueBlendProcess(customIdentifier);
};
oFF.BlendableResultSetContainer.prototype.processBlendedQueryManager = function(blendableQueryManager, blendingProcessConfigs, syncType, listener, customIdentifier)
{
	if (this.hasNoPendingQueries())
	{
		this.validateLeafQueryModels();
		this.m_blendingProcess = oFF.BlendingProcess.create(blendableQueryManager, blendingProcessConfigs, this.m_runtimeQueryManager, this.m_lastState, false);
		if (this.m_blendingProcess.hasErrors())
		{
			this.m_blendingProcess = oFF.XObjectExt.release(this.m_blendingProcess);
			return null;
		}
		return this.m_blendingProcess.processBlendedQueryManagerCreation(syncType, listener, customIdentifier);
	}
	return null;
};
oFF.BlendableResultSetContainer.prototype.processBlendedQueryManagerCreation = function(syncType, customIdentifier)
{
	this.clearMessages();
	let blendableQueryManager = this.getActionContext();
	let allQueryManagers = blendableQueryManager.getAllQueryManagers();
	oFF.XCollectionUtils.forEach(allQueryManagers, (queryManager) => {
		queryManager.clearMessages();
	});
	if (oFF.notNull(this.m_blendingProcess) && !this.m_blendingProcess.isReleased())
	{
		this.m_blendingProcess.releaseObjectWithParams(true);
	}
	this.m_blendingProcess = null;
	let blendingProcessConfigs = blendableQueryManager.getBlendingProcessConfigs(this);
	if (this.hasErrors())
	{
		this.endSync();
	}
	else
	{
		this.processRuntimeQueryManagerCreation(blendableQueryManager, blendingProcessConfigs, syncType, this, customIdentifier);
	}
};
oFF.BlendableResultSetContainer.prototype.processExecution = function(syncType, listener, customIdentifier)
{
	this.attachListener(listener, oFF.ListenerType.SPECIFIC, customIdentifier);
	this.setActiveSyncType(syncType);
	if (this.getSyncState().isTypeOf(oFF.SyncState.IN_SYNC))
	{
		this.endSync();
	}
	else
	{
		if (oFF.notNull(this.m_blendingProcess))
		{
			this.m_queueNextQuery = true;
		}
		else
		{
			try
			{
				this.processBlendedQueryManagerCreation(syncType, customIdentifier);
			}
			catch (t)
			{
				this.m_blendingProcess = oFF.XObjectExt.release(this.m_blendingProcess);
				throw oFF.XException.createRuntimeException(oFF.XException.getMessage(t));
			}
		}
	}
	return this;
};
oFF.BlendableResultSetContainer.prototype.processRuntimeQueryManagerCreation = function(blendableQueryManager, blendingProcessConfigs, syncType, listener, customIdentifier)
{
	this.setActiveSyncType(syncType);
	let hierarchyManagersToFetch = oFF.XList.create();
	let blendingProcessConfigIter = blendingProcessConfigs.getIterator();
	while (blendingProcessConfigIter.hasNext())
	{
		let blendingProcessConfig = blendingProcessConfigIter.next();
		let dimensionLinksIter = blendingProcessConfig.getModelDimensionLinks().getIterator();
		while (dimensionLinksIter.hasNext())
		{
			let dimensionLink = dimensionLinksIter.next();
			if (dimensionLink.isLinkOnMatchingHierarchies())
			{
				let secondaryDatasetId = blendingProcessConfig.getQueryModelLinkSettings().getSecondDatasetId();
				let secondaryQueryManager = blendableQueryManager.getQueryManagerByDatasetId(secondaryDatasetId);
				let secondaryQueryModel = secondaryQueryManager.getQueryModel();
				if (secondaryQueryModel.getConvenienceCommands().isTypeOfBw())
				{
					let secondaryLinkDimension = secondaryQueryModel.getDimensionByName(dimensionLink.getSecondPart().getDimensionName());
					let secondaryHierarchyManager = oFF.BlendingUtils.getHierarchyManagerFromSharedQueryManager(this.getOlapEnv(), secondaryLinkDimension);
					if (oFF.notNull(secondaryHierarchyManager) && secondaryLinkDimension.supportsHierarchy())
					{
						this.m_pendingHierarchyFetches++;
						hierarchyManagersToFetch.add(secondaryHierarchyManager);
					}
				}
			}
		}
	}
	for (let i = 0; i < hierarchyManagersToFetch.size(); i++)
	{
		hierarchyManagersToFetch.get(i).fetchHierarchyCatalog(syncType, this, customIdentifier);
	}
	let numOfAccountMembersToFetch = this.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER) ? this.getExpandedAccountMembersToFetch(blendableQueryManager, syncType) : 0;
	return hierarchyManagersToFetch.size() === 0 && numOfAccountMembersToFetch === 0 ? this.processBlendedQueryManager(blendableQueryManager, blendingProcessConfigs, syncType, listener, customIdentifier) : null;
};
oFF.BlendableResultSetContainer.prototype.releaseObjectInternal = function()
{
	this.m_runtimeQueryManager = null;
	this.m_lastState = oFF.XObjectExt.release(this.m_lastState);
	this.m_blendingProcess = oFF.XObjectExt.release(this.m_blendingProcess);
	this.m_onPostQueryExecutionListener = oFF.XObjectExt.release(this.m_onPostQueryExecutionListener);
	this.m_pendingHierarchyFetches = 0;
	this.m_pendingValueHelps = 0;
	oFF.ResultSetContainer.prototype.releaseObjectInternal.call( this );
};
oFF.BlendableResultSetContainer.prototype.removeExpandedParentRecursively = function(parentMemberName, parentChildMemberMap, expandedParents)
{
	if (!expandedParents.contains(parentMemberName))
	{
		return;
	}
	let parentChildMemberMapIterator = parentChildMemberMap.getByKey(parentMemberName).getIterator();
	while (parentChildMemberMapIterator.hasNext())
	{
		let parentChildMember = parentChildMemberMapIterator.next();
		this.removeExpandedParentRecursively(parentChildMember, parentChildMemberMap, expandedParents);
		expandedParents.removeElement(parentChildMember);
	}
};
oFF.BlendableResultSetContainer.prototype.resetCachedState = function()
{
	this.m_blendingProcess = oFF.XObjectExt.release(this.m_blendingProcess);
	this.m_runtimeQueryManager = oFF.XObjectExt.release(this.m_runtimeQueryManager);
	this.m_lastState = oFF.XObjectExt.release(this.m_lastState);
};
oFF.BlendableResultSetContainer.prototype.setOnPostQueryExecutionListener = function(listener)
{
	this.m_onPostQueryExecutionListener = listener;
};
oFF.BlendableResultSetContainer.prototype.setupBlendableResultSetContainer = function(blendableQueryManager)
{
	oFF.ResultSetContainer.prototype.setupContainer.call( this , blendableQueryManager, null, null, null, null);
};
oFF.BlendableResultSetContainer.prototype.setupValueHelpQueries = function(blendableQueryManager, expandedParentsByDatasetId, datasetIdsToFetch)
{
	let dimensionsToFetch = oFF.XHashMapByString.create();
	let datasetIdsToFetchIter = datasetIdsToFetch.getIterator();
	while (datasetIdsToFetchIter.hasNext())
	{
		let datasetIdToFetch = datasetIdsToFetchIter.next();
		let parentMembersToFetch = expandedParentsByDatasetId.getByKey(datasetIdToFetch);
		let leafQueryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetIdToFetch);
		let leafQueryModel = leafQueryManager.getQueryModel();
		let leafAccountDimension = leafQueryModel.getAccountDimension();
		leafAccountDimension.clearSelectorFilter();
		leafAccountDimension.clearSelectorHierarchyNode();
		leafAccountDimension.setSelectorHierarchyActive(true);
		leafAccountDimension.setSelectorInitialDrillLevel(-1);
		leafAccountDimension.setReadModeGraceful(oFF.QContextType.SELECTOR, oFF.QMemberReadMode.MASTER);
		let selectorFields = leafAccountDimension.getSelectorFields();
		selectorFields.clear();
		selectorFields.add(leafAccountDimension.getSelectorDisplayKeyField());
		selectorFields.add(leafAccountDimension.getSelectorTextField());
		let cartesianList = oFF.QFactory.createFilterCartesianListWithField(leafQueryModel, leafAccountDimension.getHierarchyKeyField());
		cartesianList.setHierarchyName(leafAccountDimension.getHierarchyName());
		cartesianList.setConvertToFlatFilter(true);
		oFF.XCollectionUtils.forEach(parentMembersToFetch, (parentMemberName) => {
			let filterOp = oFF.QFactory.createFilterOperation(leafQueryModel, leafAccountDimension.getHierarchyKeyField());
			filterOp.setComparisonOperator(oFF.ComparisonOperator.EQUAL);
			filterOp.setField(leafAccountDimension.getHierarchyKeyField());
			filterOp.getLow().setString(parentMemberName);
			filterOp.setHierarchyName(leafAccountDimension.getHierarchyName());
			filterOp.setConvertToFlatFilter(true);
			cartesianList.add(filterOp);
		});
		let orFilter = oFF.QFactory.createFilterOr(leafAccountDimension);
		orFilter.add(cartesianList);
		leafAccountDimension.setSelectorComplexSelectionRoot(orFilter);
		this.m_pendingValueHelps++;
		dimensionsToFetch.put(datasetIdToFetch, leafAccountDimension);
	}
	return dimensionsToFetch;
};
oFF.BlendableResultSetContainer.prototype.validateLeafQueryModels = function()
{
	let blendableQueryManager = this.getActionContext();
	let allQueryManagers = blendableQueryManager.getAllQueryManagers();
	oFF.XCollectionUtils.forEach(allQueryManagers, (queryManager) => {
		this.validateQueryModel(queryManager.getQueryModel());
	});
};

oFF.BlendedDimensionInfo = function() {};
oFF.BlendedDimensionInfo.prototype = new oFF.QModelComponent();
oFF.BlendedDimensionInfo.prototype._ff_c = "BlendedDimensionInfo";

oFF.BlendedDimensionInfo.createBlendedDimensionInfo = function(datasetId, dimensionName)
{
	let blendedDimensionInfo = new oFF.BlendedDimensionInfo();
	blendedDimensionInfo.m_datasetId = datasetId;
	blendedDimensionInfo.m_dimensionName = dimensionName;
	return blendedDimensionInfo;
};
oFF.BlendedDimensionInfo.prototype.m_datasetId = null;
oFF.BlendedDimensionInfo.prototype.m_dimensionName = null;
oFF.BlendedDimensionInfo.prototype.m_initialDrillLevel = null;
oFF.BlendedDimensionInfo.prototype.cloneExt = function(flags)
{
	let copyBlendedDimensionInfo = oFF.BlendedDimensionInfo.createBlendedDimensionInfo(this.getDatasetId(), this.getDimensionName());
	copyBlendedDimensionInfo.copyFrom(this, null);
	return copyBlendedDimensionInfo;
};
oFF.BlendedDimensionInfo.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponent.prototype.copyFromInternal.call( this , other, flags);
	let otherBlendedDimensionInfo = other;
	this.m_datasetId = otherBlendedDimensionInfo.getDatasetId();
	this.m_dimensionName = otherBlendedDimensionInfo.getDimensionName();
	if (otherBlendedDimensionInfo.getInitialDrillLevel() !== null)
	{
		this.m_initialDrillLevel = oFF.XIntegerValue.create(otherBlendedDimensionInfo.getInitialDrillLevel().getInteger());
	}
	else
	{
		this.m_initialDrillLevel = null;
	}
};
oFF.BlendedDimensionInfo.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.BlendedDimensionInfo.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.BlendedDimensionInfo.prototype.getInitialDrillLevel = function()
{
	return this.m_initialDrillLevel;
};
oFF.BlendedDimensionInfo.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_datasetId = null;
	this.m_dimensionName = null;
	this.m_initialDrillLevel = null;
};
oFF.BlendedDimensionInfo.prototype.setInitialDrillLevel = function(initialDrillLevel)
{
	this.m_initialDrillLevel = oFF.XIntegerValue.create(initialDrillLevel);
};

oFF.BlendedDrillInfo = function() {};
oFF.BlendedDrillInfo.prototype = new oFF.QModelComponent();
oFF.BlendedDrillInfo.prototype._ff_c = "BlendedDrillInfo";

oFF.BlendedDrillInfo.createBlendedDimensionDrillInfo = function(blendableQueryManager, datasetId, dimensionName)
{
	let blendedDimensionDrillInfo = new oFF.BlendedDrillInfo();
	blendedDimensionDrillInfo.setupModelComponent(blendableQueryManager, blendableQueryManager);
	blendedDimensionDrillInfo.m_blendedDrillPathElementInfos = oFF.XList.create();
	blendedDimensionDrillInfo.m_dimensionName = dimensionName;
	blendedDimensionDrillInfo.m_datasetId = datasetId;
	return blendedDimensionDrillInfo;
};
oFF.BlendedDrillInfo.createBlendedZoomDrillInfo = function(blendableQueryManager, datasetId, dimensionName, isHideRoots)
{
	let blendedDimensionDrillInfo = oFF.BlendedDrillInfo.createBlendedDimensionDrillInfo(blendableQueryManager, datasetId, dimensionName);
	blendedDimensionDrillInfo.m_isZoomDrill = true;
	blendedDimensionDrillInfo.m_isHideRoots = isHideRoots;
	return blendedDimensionDrillInfo;
};
oFF.BlendedDrillInfo.prototype.m_blendedDrillPathElementInfos = null;
oFF.BlendedDrillInfo.prototype.m_datasetId = null;
oFF.BlendedDrillInfo.prototype.m_dimensionName = null;
oFF.BlendedDrillInfo.prototype.m_drillState = null;
oFF.BlendedDrillInfo.prototype.m_isHideRoots = false;
oFF.BlendedDrillInfo.prototype.m_isZoomDrill = false;
oFF.BlendedDrillInfo.prototype.addBlendedDrillPathElementInfo = function(datasetId, dimensionName, selectValue)
{
	this.m_blendedDrillPathElementInfos.add(oFF.BlendedDrillPathElementInfo.createBlendedDrillPathElementInfo(datasetId, dimensionName, selectValue));
	this.notifyNodeChanged();
};
oFF.BlendedDrillInfo.prototype.clearBlendedDrillPathElementInfos = function()
{
	this.m_blendedDrillPathElementInfos.clear();
	this.notifyNodeChanged();
};
oFF.BlendedDrillInfo.prototype.cloneOlapComponent = function(context, parent)
{
	let newBlendedDrillInfo = oFF.BlendedDrillInfo.createBlendedDimensionDrillInfo(this.getContext(), this.m_datasetId, this.m_dimensionName);
	newBlendedDrillInfo.copyFrom(this, null);
	return newBlendedDrillInfo;
};
oFF.BlendedDrillInfo.prototype.copyFromInternal = function(other, flags)
{
	let otherBlendedDrillInfo = other;
	this.m_dimensionName = otherBlendedDrillInfo.getDimensionName();
	this.m_datasetId = otherBlendedDrillInfo.getDatasetId();
	oFF.XCollectionUtils.addAllClones(this.m_blendedDrillPathElementInfos, otherBlendedDrillInfo.getBlendedDrillPathElementInfos());
	this.m_drillState = otherBlendedDrillInfo.getDrillState();
	this.m_isZoomDrill = otherBlendedDrillInfo.isZoomDrill();
	this.m_isHideRoots = otherBlendedDrillInfo.isHideRoots();
};
oFF.BlendedDrillInfo.prototype.getBlendedDrillPathElementInfos = function()
{
	return this.m_blendedDrillPathElementInfos;
};
oFF.BlendedDrillInfo.prototype.getDatasetId = function()
{
	return this.m_datasetId;
};
oFF.BlendedDrillInfo.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.BlendedDrillInfo.prototype.getDrillState = function()
{
	return this.m_drillState;
};
oFF.BlendedDrillInfo.prototype.isHideRoots = function()
{
	return this.m_isHideRoots;
};
oFF.BlendedDrillInfo.prototype.isZoomDrill = function()
{
	return this.m_isZoomDrill;
};
oFF.BlendedDrillInfo.prototype.releaseObject = function()
{
	oFF.QModelComponent.prototype.releaseObject.call( this );
	this.m_dimensionName = null;
	this.m_datasetId = null;
	this.m_blendedDrillPathElementInfos = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_blendedDrillPathElementInfos);
	this.m_drillState = null;
};
oFF.BlendedDrillInfo.prototype.removeBlendedDrillPathElementInfo = function(blendedDrillPathElementInfo)
{
	this.m_blendedDrillPathElementInfos.removeElement(blendedDrillPathElementInfo);
	this.notifyNodeChanged();
};
oFF.BlendedDrillInfo.prototype.setDrillState = function(drillstate)
{
	this.m_drillState = drillstate;
	this.notifyNodeChanged();
};
oFF.BlendedDrillInfo.prototype.setIsHideRoots = function(isHideRoots)
{
	this.m_isHideRoots = isHideRoots;
};

oFF.QBlendedMeasureContainer = function() {};
oFF.QBlendedMeasureContainer.prototype = new oFF.QModelComponent();
oFF.QBlendedMeasureContainer.prototype._ff_c = "QBlendedMeasureContainer";

oFF.QBlendedMeasureContainer.create = function(blendableQueryManager)
{
	let blendedMeasureContainer = new oFF.QBlendedMeasureContainer();
	blendedMeasureContainer.setupModelComponent(blendableQueryManager, blendableQueryManager);
	blendedMeasureContainer.m_primaryBlendedMeasures = oFF.QModelComponentList.createModelComponentWithNameList(blendableQueryManager, blendedMeasureContainer, false, "Primary Blended Measures", true);
	return blendedMeasureContainer;
};
oFF.QBlendedMeasureContainer.prototype.m_primaryBlendedMeasures = null;
oFF.QBlendedMeasureContainer.prototype.addPrimaryBlendedMeasure = function(member)
{
	let clientQueryObjectStorageName = this.getQueryManager().getClientQueryObjectStorageName();
	if (member.getStorageGroupName() !== null && (oFF.XString.isEqual(member.getStorageName(), clientQueryObjectStorageName) || member.isReleased()) && this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectIncludeReleasedByKeyRef(member, clientQueryObjectStorageName) !== null)
	{
		this.m_primaryBlendedMeasures.addKeyRef(oFF.QFactory.createKeyRef(clientQueryObjectStorageName, member.getStorageGroupName(), member.getStorageObjectName()));
	}
	else
	{
		throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Unable to add primary blended measure:", member.getStorageObjectName()));
	}
	member.addSecondaryParent(this);
	this.notifyNodeChanged();
};
oFF.QBlendedMeasureContainer.prototype.clearPrimaryBlendedMeasures = function()
{
	for (let i = this.m_primaryBlendedMeasures.size() - 1; i >= 0; i--)
	{
		this.removePrimaryBlendedMeasure(this.m_primaryBlendedMeasures.get(i));
	}
	this.notifyNodeChanged();
};
oFF.QBlendedMeasureContainer.prototype.copyFromInternal = function(other, flags)
{
	let origin = other;
	this.m_primaryBlendedMeasures.clear();
	let iterator = origin.m_primaryBlendedMeasures.getIterator();
	while (iterator.hasNext())
	{
		this.m_primaryBlendedMeasures.add(iterator.next());
	}
};
oFF.QBlendedMeasureContainer.prototype.getPrimaryBlendedMeasures = function()
{
	return this.m_primaryBlendedMeasures;
};
oFF.QBlendedMeasureContainer.prototype.releaseObject = function()
{
	this.m_primaryBlendedMeasures = oFF.XObjectExt.release(this.m_primaryBlendedMeasures);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QBlendedMeasureContainer.prototype.removePrimaryBlendedMeasure = function(member)
{
	let removeElement = this.m_primaryBlendedMeasures.removeElement(member);
	if (oFF.notNull(removeElement))
	{
		if (removeElement.getContext() === this)
		{
			oFF.XObjectExt.release(removeElement);
		}
		else
		{
			removeElement.removeSecondaryParent(this);
		}
	}
	this.notifyNodeChanged();
};

oFF.QBlendingSortContainer = function() {};
oFF.QBlendingSortContainer.prototype = new oFF.QModelComponent();
oFF.QBlendingSortContainer.prototype._ff_c = "QBlendingSortContainer";

oFF.QBlendingSortContainer.create = function(blendableQueryManager)
{
	let sortContainer = new oFF.QBlendingSortContainer();
	sortContainer.setupModelComponent(blendableQueryManager, blendableQueryManager);
	sortContainer.m_blendableDimensionSorts = oFF.QModelComponentList.createModelComponentList(blendableQueryManager, sortContainer, true, "Blendable Dimension Sorts");
	sortContainer.setIsDefaultOrder(false);
	return sortContainer;
};
oFF.QBlendingSortContainer.prototype.m_blendableDimensionSorts = null;
oFF.QBlendingSortContainer.prototype.m_isDefaultOrder = false;
oFF.QBlendingSortContainer.prototype.m_primaryMeasureSort = null;
oFF.QBlendingSortContainer.prototype.addBlendableDimensionSort = function(fieldName, datasetId, sortDirection, preserveGrouping, language)
{
	let blendableQueryManager = this.getParent();
	let queryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
	let queryModel = oFF.notNull(queryManager) ? queryManager.getQueryModel() : null;
	let field = oFF.notNull(queryModel) ? queryModel.getFieldByName(fieldName) : null;
	let blendableDimensionSort = null;
	if (oFF.notNull(field) && this.shouldAddOrUpdateDimensionSort(field, datasetId, sortDirection, preserveGrouping))
	{
		this.removeBlendableDimensionSort(fieldName, datasetId);
		if (this.getPrimaryBlendableMeasureMemberSort() !== null && !blendableQueryManager.supportsConcurrentDimensionAndMeasureSorting())
		{
			this.clearPrimaryBlendableMemberMeasureSort();
		}
		blendableDimensionSort = oFF.BlendableDimensionSort.createDimensionSort(this, oFF.QSortUtils.getBlendableDimensionSortMapKey(fieldName, datasetId), fieldName, datasetId, sortDirection, preserveGrouping, language);
		this.m_blendableDimensionSorts.add(blendableDimensionSort);
	}
	return blendableDimensionSort;
};
oFF.QBlendingSortContainer.prototype.clearBlendableDimensionSorts = function()
{
	if (this.m_blendableDimensionSorts.size() > 0)
	{
		oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_blendableDimensionSorts);
		this.m_blendableDimensionSorts.clear();
	}
};
oFF.QBlendingSortContainer.prototype.clearPrimaryBlendableMemberMeasureSort = function()
{
	this.m_primaryMeasureSort = oFF.XObjectExt.release(this.m_primaryMeasureSort);
	this.notifyNodeChanged();
};
oFF.QBlendingSortContainer.prototype.copyFromInternal = function(other, flags)
{
	let origin = other;
	this.m_blendableDimensionSorts.clear();
	let blendableDimensionSortsIterator = origin.m_blendableDimensionSorts.getIterator();
	while (blendableDimensionSortsIterator.hasNext())
	{
		let blendableDimensionSort = blendableDimensionSortsIterator.next();
		let dimensionSort = this.addBlendableDimensionSort(blendableDimensionSort.getFieldName(), blendableDimensionSort.getDatasetId(), blendableDimensionSort.getSortDirection(), blendableDimensionSort.getPreserveGrouping(), blendableDimensionSort.getContextLanguage());
		dimensionSort.copyFrom(blendableDimensionSort, null);
	}
	if (origin.getPrimaryBlendableMeasureMemberSort() !== null)
	{
		let measureSort = origin.getPrimaryBlendableMeasureMemberSort();
		this.m_primaryMeasureSort = oFF.BlendableMeasureMemberSort.createBlendableMeasureSort(this);
		this.m_primaryMeasureSort.copyFrom(measureSort, null);
	}
	this.m_isDefaultOrder = origin.isDefaultOrder();
};
oFF.QBlendingSortContainer.prototype.getBlendableDimensionSorts = function()
{
	return this.m_blendableDimensionSorts;
};
oFF.QBlendingSortContainer.prototype.getBlendableMeasureMemberSort = function()
{
	return this.m_primaryMeasureSort;
};
oFF.QBlendingSortContainer.prototype.getPrimaryBlendableMeasureMemberSort = function()
{
	return this.m_primaryMeasureSort;
};
oFF.QBlendingSortContainer.prototype.isDefaultOrder = function()
{
	return this.m_isDefaultOrder;
};
oFF.QBlendingSortContainer.prototype.releaseObject = function()
{
	this.m_blendableDimensionSorts = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_blendableDimensionSorts);
	this.m_primaryMeasureSort = oFF.XObjectExt.release(this.m_primaryMeasureSort);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QBlendingSortContainer.prototype.removeBlendableDimensionSort = function(fieldName, datasetId)
{
	let blendableDimensionSort = this.m_blendableDimensionSorts.getByKey(oFF.QSortUtils.getBlendableDimensionSortMapKey(fieldName, datasetId));
	if (oFF.notNull(blendableDimensionSort))
	{
		this.m_blendableDimensionSorts.removeElement(blendableDimensionSort);
		oFF.XObjectExt.release(blendableDimensionSort);
	}
};
oFF.QBlendingSortContainer.prototype.setBlendableMeasureMemberSort = function(blendableMeasureSort)
{
	this.m_primaryMeasureSort = blendableMeasureSort;
	this.notifyNodeChanged();
};
oFF.QBlendingSortContainer.prototype.setIsDefaultOrder = function(isDefaultOrder)
{
	this.m_isDefaultOrder = isDefaultOrder;
};
oFF.QBlendingSortContainer.prototype.setPrimaryBlendableMeasureMemberSort = function(measureMemberName, datasetId, sortDirection)
{
	let blendableMeasureMemberSort = this.getPrimaryBlendableMeasureMemberSort();
	let isNewBlendableMeasureMemberSort = oFF.isNull(blendableMeasureMemberSort) || !oFF.XString.isEqual(measureMemberName, blendableMeasureMemberSort.getMeasureMemberName()) || !oFF.XString.isEqual(datasetId, blendableMeasureMemberSort.getDatasetId()) || sortDirection !== blendableMeasureMemberSort.getSortDirection();
	let isValidSort = false;
	let blendableQueryManager = this.getParent();
	if (oFF.notNull(datasetId))
	{
		let queryManager = blendableQueryManager.getQueryManagerByDatasetId(datasetId);
		let queryModel = oFF.notNull(queryManager) ? queryManager.getQueryModel() : null;
		let primaryCalculationDimension = oFF.notNull(queryModel) ? queryModel.getPrimaryCalculationDimension() : null;
		isValidSort = oFF.notNull(primaryCalculationDimension) && (primaryCalculationDimension.getStructureMember(measureMemberName) !== null || primaryCalculationDimension.getDimensionMember(measureMemberName) !== null);
	}
	else
	{
		isValidSort = oFF.XCollectionUtils.contains(blendableQueryManager.getPrimaryBlendedMeasuresFromFilters(), (blendedMeasure) => {
			return oFF.XString.isEqual(blendedMeasure.getName(), measureMemberName);
		});
	}
	if (isNewBlendableMeasureMemberSort && isValidSort)
	{
		this.m_primaryMeasureSort = oFF.BlendableMeasureMemberSort.createBlendableMeasureSort(this);
		this.m_primaryMeasureSort.setPrimaryMeasure(measureMemberName, datasetId, false);
		this.m_primaryMeasureSort.setSortDirection(sortDirection);
		this.notifyNodeChanged();
	}
};
oFF.QBlendingSortContainer.prototype.shouldAddOrUpdateDimensionSort = function(field, datasetId, sortDirection, preserveGrouping)
{
	let blendableQueryManager = this.getParent();
	let blendableDimensionSort = this.m_blendableDimensionSorts.getByKey(oFF.QSortUtils.getBlendableDimensionSortMapKey(field.getName(), datasetId));
	let isNewBlendableDimensionSort = oFF.isNull(blendableDimensionSort) || sortDirection !== blendableDimensionSort.getSortDirection() || preserveGrouping !== blendableDimensionSort.getPreserveGrouping();
	let isFromPrimary = oFF.XString.isEqual(datasetId, blendableQueryManager.getPrimaryQueryManager().getQueryModel().getDatasetId());
	let isFromLinkedDimension = oFF.BlendingUtils.isDimensionFromLinkedDimension(blendableQueryManager, field.getDimension().getName(), datasetId);
	return isNewBlendableDimensionSort && (isFromPrimary || !isFromLinkedDimension);
};

oFF.QLightweightDataAreaCommand = function() {};
oFF.QLightweightDataAreaCommand.prototype = new oFF.QModelComponent();
oFF.QLightweightDataAreaCommand.prototype._ff_c = "QLightweightDataAreaCommand";

oFF.QLightweightDataAreaCommand.create = function(context, parent, commandType)
{
	let instance = new oFF.QLightweightDataAreaCommand();
	instance.setupModelComponent(context, parent);
	instance.setPlanningContextCommandType(commandType);
	return instance;
};
oFF.QLightweightDataAreaCommand.prototype.m_commandResult = null;
oFF.QLightweightDataAreaCommand.prototype.m_extPlanningCommandResult = null;
oFF.QLightweightDataAreaCommand.prototype.m_invalidatingResultSet = false;
oFF.QLightweightDataAreaCommand.prototype.m_planningContextCommandType = null;
oFF.QLightweightDataAreaCommand.prototype.m_synchronizationType = null;
oFF.QLightweightDataAreaCommand.prototype.createCommandResult = function(callback, customIdentifier)
{
	let commandResult = this.createCommandResultInstance();
	commandResult.setCustomIdentifier(customIdentifier);
	commandResult.setPlanningCommand(this);
	commandResult.setPlanningCommandCallback(callback);
	return commandResult;
};
oFF.QLightweightDataAreaCommand.prototype.createCommandResultInstance = function()
{
	let result = this.getResult();
	if (oFF.notNull(result))
	{
		oFF.XObjectExt.release(result);
	}
	result = this.createCommandResultInstanceInternal();
	this.setResult(result);
	return result;
};
oFF.QLightweightDataAreaCommand.prototype.createCommandResultInstanceInternal = function()
{
	return new oFF.QLightweightDataAreaCommandResult();
};
oFF.QLightweightDataAreaCommand.prototype.doProcessCommand = function(synchronizationType, planningCommandResult)
{
	let connection = this.getQueryManagerBase().getConnection();
	let servicePath = this.getServicePath();
	let ocpFunction = connection.newRpcFunction(servicePath);
	ocpFunction.setServiceName(oFF.SystemServices.INA_SERVICE);
	let request = ocpFunction.getRpcRequest();
	let requestStructure = this.serializeToElement(oFF.QModelFormat.INA_DATA);
	request.setRequestStructure(requestStructure);
	ocpFunction.processFunctionExecution(synchronizationType, this, planningCommandResult);
};
oFF.QLightweightDataAreaCommand.prototype.getCommandType = function()
{
	return oFF.PlanningCommandType.DATA_AREA_COMMAND;
};
oFF.QLightweightDataAreaCommand.prototype.getDataArea = function()
{
	return this.getPlanningContext();
};
oFF.QLightweightDataAreaCommand.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.LIGHTWEIGHT_DATA_AREA_COMMAND;
};
oFF.QLightweightDataAreaCommand.prototype.getPlanningContext = function()
{
	return null;
};
oFF.QLightweightDataAreaCommand.prototype.getPlanningContextCommandType = function()
{
	return this.m_planningContextCommandType;
};
oFF.QLightweightDataAreaCommand.prototype.getResult = function()
{
	return this.m_commandResult;
};
oFF.QLightweightDataAreaCommand.prototype.getServicePath = function()
{
	let connection = this.getQueryManagerBase().getConnection();
	let systemDescription = connection.getSystemDescription();
	let serverMetadata = connection.getSystemConnect().getServerMetadata();
	let capabilities = serverMetadata.getMetadataForService(oFF.ServerService.ANALYTIC);
	let fastPath = capabilities.getByKey(oFF.InACapabilities.C032_FAST_PATH);
	if (oFF.notNull(fastPath) && fastPath.getValue() !== null)
	{
		return fastPath.getValue();
	}
	return systemDescription.getSystemType().getInAPath();
};
oFF.QLightweightDataAreaCommand.prototype.isInvalidatingResultSet = function()
{
	return this.m_invalidatingResultSet;
};
oFF.QLightweightDataAreaCommand.prototype.onCommandExecuted = function(extPlanningCommandResult)
{
	if (this.m_synchronizationType === oFF.SyncType.BLOCKING)
	{
		this.m_extPlanningCommandResult = extPlanningCommandResult;
	}
	let commandCallback = extPlanningCommandResult.getData().getPlanningCommandCallback();
	if (oFF.notNull(commandCallback))
	{
		commandCallback.onCommandProcessed(extPlanningCommandResult);
	}
};
oFF.QLightweightDataAreaCommand.prototype.onCommandProcessed = function(extPlanningCommandResult)
{
	this.m_extPlanningCommandResult = extPlanningCommandResult;
};
oFF.QLightweightDataAreaCommand.prototype.onFunctionExecuted = function(extResult, response, customIdentifier)
{
	let planningCommandResult = customIdentifier;
	let extPlanningCommandResult;
	if (extResult.hasErrors())
	{
		extPlanningCommandResult = oFF.ExtResult.create(planningCommandResult, extResult);
	}
	else
	{
		this.onSuccessfulCommand();
		let responseStructure = oFF.PrFactory.createStructureDeepCopy(response.getRootElement());
		let messageManager = oFF.MessageManager.createMessageManagerExt(this.getSession());
		messageManager.addAllMessages(this.deserializeFromElementExt(oFF.QModelFormat.INA_DATA, responseStructure));
		extPlanningCommandResult = oFF.ExtResult.create(planningCommandResult, messageManager);
	}
	this.onCommandExecuted(extPlanningCommandResult);
};
oFF.QLightweightDataAreaCommand.prototype.onSuccessfulCommand = function()
{
	if (this.isInvalidatingResultSet())
	{
		this.getQueryManager().invalidateState();
	}
};
oFF.QLightweightDataAreaCommand.prototype.processCommand = function(synchronizationType, callback, customIdentifier)
{
	let planningCommandResult = this.createCommandResult(callback, customIdentifier);
	this.m_synchronizationType = synchronizationType;
	this.doProcessCommand(synchronizationType, planningCommandResult);
	let result = null;
	if (synchronizationType === oFF.SyncType.BLOCKING)
	{
		result = this.m_extPlanningCommandResult;
		this.m_extPlanningCommandResult = null;
	}
	return result;
};
oFF.QLightweightDataAreaCommand.prototype.setConnection = oFF.noSupport;
oFF.QLightweightDataAreaCommand.prototype.setInvalidatingResultSet = function(invalidating)
{
	this.m_invalidatingResultSet = invalidating;
	return this;
};
oFF.QLightweightDataAreaCommand.prototype.setPlanningContextCommandType = function(commandType)
{
	this.m_planningContextCommandType = commandType;
	this.m_invalidatingResultSet = commandType.isInvalidatingResultSet();
};
oFF.QLightweightDataAreaCommand.prototype.setResult = function(result)
{
	this.m_commandResult = result;
};

oFF.QLightweightDataAreaCommandResult = function() {};
oFF.QLightweightDataAreaCommandResult.prototype = new oFF.QModelComponent();
oFF.QLightweightDataAreaCommandResult.prototype._ff_c = "QLightweightDataAreaCommandResult";

oFF.QLightweightDataAreaCommandResult.EXECUTED = "EXECUTED";
oFF.QLightweightDataAreaCommandResult.prototype.m_customIdentifier = null;
oFF.QLightweightDataAreaCommandResult.prototype.m_executed = false;
oFF.QLightweightDataAreaCommandResult.prototype.m_lightweightDataAreaCommand = null;
oFF.QLightweightDataAreaCommandResult.prototype.m_planningCommandCallback = null;
oFF.QLightweightDataAreaCommandResult.prototype.getCustomIdentifier = function()
{
	return this.m_customIdentifier;
};
oFF.QLightweightDataAreaCommandResult.prototype.getDataAreaCommand = function()
{
	return this.getPlanningCommand();
};
oFF.QLightweightDataAreaCommandResult.prototype.getPlanningCommand = function()
{
	return this.m_lightweightDataAreaCommand;
};
oFF.QLightweightDataAreaCommandResult.prototype.getPlanningCommandCallback = function()
{
	return this.m_planningCommandCallback;
};
oFF.QLightweightDataAreaCommandResult.prototype.getPlanningContextCommand = function()
{
	return this.m_lightweightDataAreaCommand;
};
oFF.QLightweightDataAreaCommandResult.prototype.isExecuted = function()
{
	return this.m_executed;
};
oFF.QLightweightDataAreaCommandResult.prototype.setCustomIdentifier = function(customIdentifier)
{
	this.m_customIdentifier = customIdentifier;
};
oFF.QLightweightDataAreaCommandResult.prototype.setExecuted = function(executed)
{
	this.m_executed = executed;
};
oFF.QLightweightDataAreaCommandResult.prototype.setPlanningCommand = function(lightweightDataAreaCommand)
{
	this.m_lightweightDataAreaCommand = lightweightDataAreaCommand;
};
oFF.QLightweightDataAreaCommandResult.prototype.setPlanningCommandCallback = function(callback)
{
	this.m_planningCommandCallback = callback;
};

oFF.OlapEnvUpdateAction = function() {};
oFF.OlapEnvUpdateAction.prototype = new oFF.QOlapSyncAction();
oFF.OlapEnvUpdateAction.prototype._ff_c = "OlapEnvUpdateAction";

oFF.OlapEnvUpdateAction.createAndRunUpdateDynamicValues = function(parent, syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	let newObject = new oFF.OlapEnvUpdateAction();
	newObject.m_overwriteDefaultForInputEnabledVar = overwriteDefaultForInputEnabledVar;
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier);
	return newObject;
};
oFF.OlapEnvUpdateAction.prototype.m_affectedVarProcessors = null;
oFF.OlapEnvUpdateAction.prototype.m_finishedCount = 0;
oFF.OlapEnvUpdateAction.prototype.m_overwriteDefaultForInputEnabledVar = false;
oFF.OlapEnvUpdateAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryExecuted(extResult, data, customIdentifier);
};
oFF.OlapEnvUpdateAction.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.addAllMessages(extResult);
	this.m_finishedCount++;
	if (this.m_finishedCount >= this.m_affectedVarProcessors.size())
	{
		this.endSync();
	}
};
oFF.OlapEnvUpdateAction.prototype.processSynchronization = function(syncType)
{
	let varProc = this.getActionContext();
	let allHanaProcessors = varProc.getSelectedVariableProcessors(oFF.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER);
	let allBWProcessors = varProc.getAllBWVariableProcessors();
	let finalList = oFF.XList.create();
	finalList.addAll(allBWProcessors);
	finalList.addAll(allHanaProcessors);
	this.m_affectedVarProcessors = finalList;
	if (this.m_affectedVarProcessors.isEmpty())
	{
		this.addWarning(oFF.ErrorCodes.NO_VARIABLE_PROCESSOR_AFFECTED, "No affected variable processor was found.");
		return false;
	}
	let activeSyncType = this.getActiveSyncType();
	for (let i = 0; i < this.m_affectedVarProcessors.size(); i++)
	{
		let variableProcessor = this.m_affectedVarProcessors.get(i);
		variableProcessor.resetExitOrUpdateDynamicVariable(activeSyncType, this, null, this.m_overwriteDefaultForInputEnabledVar);
	}
	return true;
};
oFF.OlapEnvUpdateAction.prototype.releaseObjectInternal = function()
{
	this.m_affectedVarProcessors = oFF.XObjectExt.release(this.m_affectedVarProcessors);
	oFF.QOlapSyncAction.prototype.releaseObjectInternal.call( this );
};
oFF.OlapEnvUpdateAction.prototype.setupVarActionAndRun = function(syncType, context, listener, customIdentifier)
{
	oFF.QOlapSyncAction.prototype.setupActionAndRun.call( this , syncType, listener, customIdentifier, context);
};

oFF.OlapEnvVarAction = function() {};
oFF.OlapEnvVarAction.prototype = new oFF.QOlapSyncAction();
oFF.OlapEnvVarAction.prototype._ff_c = "OlapEnvVarAction";

oFF.OlapEnvVarAction.createAndRunCancel = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.OlapEnvVarAction();
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_CANCEL);
	return newObject;
};
oFF.OlapEnvVarAction.createAndRunCheck = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.OlapEnvVarAction();
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_CHECK);
	return newObject;
};
oFF.OlapEnvVarAction.createAndRunEmptyVariableDefinition = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.OlapEnvVarAction();
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION);
	return newObject;
};
oFF.OlapEnvVarAction.createAndRunReInitAfterSubmit = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.OlapEnvVarAction();
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_REINIT);
	return newObject;
};
oFF.OlapEnvVarAction.createAndRunSetGetValues = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.OlapEnvVarAction();
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES);
	return newObject;
};
oFF.OlapEnvVarAction.createAndRunSubmit = function(parent, syncType, listener, customIdentifier)
{
	let newObject = new oFF.OlapEnvVarAction();
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_SUBMIT);
	return newObject;
};
oFF.OlapEnvVarAction.createAndRunVariantActivation = function(parent, syncType, listener, customIdentifier, variableVariant)
{
	let newObject = new oFF.OlapEnvVarAction();
	newObject.m_activeVariant = variableVariant;
	newObject.setupVarActionAndRun(syncType, parent, listener, customIdentifier, oFF.VariableProcessorState.PROCESSING_VARIANT_ACTIVATION);
	return newObject;
};
oFF.OlapEnvVarAction.prototype.m_actionState = null;
oFF.OlapEnvVarAction.prototype.m_activeVariant = null;
oFF.OlapEnvVarAction.prototype.m_affectedVarProcessors = null;
oFF.OlapEnvVarAction.prototype.m_finishedCount = 0;
oFF.OlapEnvVarAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onVariableProcessorExecuted(extResult, data, customIdentifier);
};
oFF.OlapEnvVarAction.prototype.isSuccessfullyProcessed = function()
{
	return this.getSyncState().isInSync() && this.isValid();
};
oFF.OlapEnvVarAction.prototype.onVariableProcessorExecuted = function(extResult, result, customIdentifier)
{
	this.addAllMessages(extResult);
	this.m_finishedCount++;
	if (this.m_finishedCount >= this.m_affectedVarProcessors.size())
	{
		this.endSync();
	}
};
oFF.OlapEnvVarAction.prototype.processSynchronization = function(syncType)
{
	this.setData(this);
	let varProc = this.getActionContext();
	if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_SUBMIT || this.m_actionState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT)
	{
		varProc.syncVariableValues();
		this.m_affectedVarProcessors = varProc.getSelectedVariableProcessors(oFF.VariableProcessorState.CHANGEABLE_STATEFUL);
	}
	else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_CANCEL)
	{
		this.m_affectedVarProcessors = varProc.getSelectedVariableProcessors(oFF.VariableProcessorState.CHANGEABLE_STATEFUL);
	}
	else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_CHECK)
	{
		varProc.syncVariableValues();
		this.m_affectedVarProcessors = varProc.getSelectedVariableProcessors(oFF.VariableProcessorState.CHANGEABLE_STATEFUL);
	}
	else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES)
	{
		varProc.syncVariableValues();
		this.m_affectedVarProcessors = varProc.getSelectedVariableProcessors(oFF.VariableProcessorState.CHANGEABLE_STATEFUL);
	}
	else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_REINIT)
	{
		this.m_affectedVarProcessors = varProc.getSelectedVariableProcessors(oFF.VariableProcessorState.SUBMITTED);
	}
	else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_VARIANT_ACTIVATION)
	{
		this.m_affectedVarProcessors = varProc.getSelectedVariableProcessors(oFF.VariableProcessorState.CHANGEABLE_STATEFUL);
	}
	if (this.m_affectedVarProcessors.isEmpty())
	{
		this.addWarning(oFF.ErrorCodes.NO_VARIABLE_PROCESSOR_AFFECTED, "No affected variable processor was found.");
		return false;
	}
	let activeSyncType = this.getActiveSyncType();
	for (let i = 0; i < this.m_affectedVarProcessors.size(); i++)
	{
		let variableProcessor = this.m_affectedVarProcessors.get(i);
		if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_SUBMIT)
		{
			variableProcessor.submitVariables(activeSyncType, this, null);
		}
		else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_CANCEL)
		{
			variableProcessor.cancelReInitVariables(activeSyncType, this, null);
		}
		else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_CHECK)
		{
			variableProcessor.checkVariables(activeSyncType, this, null);
		}
		else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_UPDATE_VALUES)
		{
			variableProcessor.transferVariables(activeSyncType, this, null);
		}
		else if (this.m_actionState === oFF.VariableProcessorState.PROCESSING_REINIT)
		{
			variableProcessor.reInitVariablesAfterSubmit(activeSyncType, this, null);
		}
		else if (this.m_actionState.isTypeOf(oFF.VariableProcessorState.PROCESSING_VARIANT_ACTIVATION))
		{
			variableProcessor.activateVariableVariant(this.m_activeVariant.clone(), activeSyncType, this, null);
		}
	}
	return true;
};
oFF.OlapEnvVarAction.prototype.releaseObjectInternal = function()
{
	this.m_actionState = null;
	this.m_affectedVarProcessors = oFF.XObjectExt.release(this.m_affectedVarProcessors);
	this.m_activeVariant = null;
	oFF.QOlapSyncAction.prototype.releaseObjectInternal.call( this );
};
oFF.OlapEnvVarAction.prototype.setupVarActionAndRun = function(syncType, context, listener, customIdentifier, state)
{
	this.m_actionState = state;
	oFF.QOlapSyncAction.prototype.setupActionAndRun.call( this , syncType, listener, customIdentifier, context);
};

oFF.OlapFilterManager = function() {};
oFF.OlapFilterManager.prototype = new oFF.QModelComponent();
oFF.OlapFilterManager.prototype._ff_c = "OlapFilterManager";

oFF.OlapFilterManager.TAGGING_STORY_VARIABLES = "TAGGING_STORY_VARIABLES";
oFF.OlapFilterManager.TAGGING_VARIABLE_DIALOG_HAS_BEEN_SET = "TAGGING_VARIABLE_DIALOG_HAS_BEEN_SET";
oFF.OlapFilterManager.create = function(context)
{
	let filterManager = new oFF.OlapFilterManager();
	filterManager.setupExt(context);
	return filterManager;
};
oFF.OlapFilterManager.prototype.m_capabilities = null;
oFF.OlapFilterManager.prototype.m_externalizeMeasureFilters = null;
oFF.OlapFilterManager.prototype.m_filters = null;
oFF.OlapFilterManager.prototype.m_flattenedComplexFilters = null;
oFF.OlapFilterManager.prototype.m_prunedDimensions = null;
oFF.OlapFilterManager.prototype._externalizeDynamicFilter = function(queryManager, isInitialSubmit)
{
	if (oFF.isNull(queryManager))
	{
		return;
	}
	let queryModel = queryManager.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return;
	}
	let variableManager = queryModel.getVariableManager();
	let filter = queryModel.getFilter();
	let dynamicFilter = filter.getDynamicFilter();
	let isValidState = queryManager.getPreviousVariableProcessorState() !== oFF.VariableProcessorState.SUBMITTED;
	if (isValidState && queryManager.getInitSettings().isExternalizedNonVariableFilter())
	{
		this.discardNonVariableFilters(queryModel, variableManager, dynamicFilter);
	}
	if (!dynamicFilter.isComplexFilter() && isValidState)
	{
		queryModel.queueEventing();
		let externalizedFilterName = filter.getExternalizedFilterName();
		let internalBackProjectionFilter = this.getFilterByName(externalizedFilterName);
		let filterDimensions = oFF.XHashSetOfString.create();
		filterDimensions.addAll(variableManager.getDimensionNamesOfVariablesAffectingDynamicFilterValue());
		filterDimensions.addAll(dynamicFilter.getDimensionsUsedInFilter());
		let dimensionNames = this._unlinkOrCollectConflictingDimensionsForOverwrittenFilters(filter, filterDimensions, internalBackProjectionFilter, oFF.XString.isEqual(queryManager.getTagging().getByKey(oFF.OlapFilterManager.TAGGING_STORY_VARIABLES), "true")).getValuesAsReadOnlyList();
		let backProjectionUniqueId = internalBackProjectionFilter.getUniqueId();
		internalBackProjectionFilter.copyFrom(dynamicFilter, null);
		internalBackProjectionFilter.setUniqueId(backProjectionUniqueId);
		let internalBackProjectionProduct = internalBackProjectionFilter.getCartesianProductWithDefault();
		let i;
		for (i = 0; i < dimensionNames.size(); i++)
		{
			let dimensionName = dimensionNames.get(i);
			internalBackProjectionProduct.removeByDimensionName(dimensionName);
		}
		if (filter.isFlattenHierarchyNodeFiltersFromVariables())
		{
			for (i = 0; i < internalBackProjectionProduct.size(); i++)
			{
				let cartesianList = internalBackProjectionProduct.getCartesianChild(i);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(cartesianList.getHierarchyName()))
				{
					cartesianList.setConvertToFlatFilter(true);
				}
			}
		}
		filter.linkFilterExt(externalizedFilterName, internalBackProjectionFilter, queryModel.getVariableManager().hasDimensionMemberVariableAffectingDynamicFilter(), true);
		this._removeEmptyCartesianLists(dynamicFilter, internalBackProjectionFilter);
		if (this.isExternalizeMeasureFilters(queryManager))
		{
			queryModel.getConvenienceCommands().clearFilters();
		}
		else
		{
			queryModel.getConvenienceCommands().clearNonMeasureFilters();
			if (dynamicFilter.isCartesianProduct() && dynamicFilter.getCartesianProduct().size() === 1 && this.m_flattenedComplexFilters.contains(externalizedFilterName))
			{
				this.m_flattenedComplexFilters.removeElement(externalizedFilterName);
				let andFilter = oFF.QFactory.createFilterAnd(queryModel);
				andFilter.add(dynamicFilter.getCartesianProduct().getCartesianChild(0));
				dynamicFilter.setComplexRoot(andFilter);
			}
			let dimensionsUsedInFilter = dynamicFilter.getDimensionsUsedInFilter().getIterator();
			while (dimensionsUsedInFilter.hasNext())
			{
				internalBackProjectionProduct.removeByDimensionName(dimensionsUsedInFilter.next());
			}
		}
		let variablesAffectingDynamicFilter = queryModel.getVariableManager().getVariablesAffectingDynamicFilter();
		for (let j = 0; j < variablesAffectingDynamicFilter.size(); j++)
		{
			let variable = variablesAffectingDynamicFilter.get(j);
			variable.setWinControlInAutoSubmit(false);
		}
		queryModel.resumeEventing();
	}
};
oFF.OlapFilterManager.prototype._getBackProjectionFilter = function(filter)
{
	let backProjectionFilterIds = filter.getBackProjectionFilterIds();
	if (backProjectionFilterIds.isEmpty())
	{
		return null;
	}
	let backProjectionFilter = oFF.QFactory.createFilterExpression(this, this);
	let cartesianProduct = backProjectionFilter.getCartesianProductWithDefault();
	let externalizedFilterName = filter.getExternalizedFilterName();
	if (this.containsName(externalizedFilterName))
	{
		let serverFilter = this.getFilterByName(externalizedFilterName);
		this._mergeCartesianLists(cartesianProduct, this.getFilterByName(externalizedFilterName));
		backProjectionFilter.setUniqueId(serverFilter.getUniqueId());
	}
	let linkedFilters = filter.getLinkedFilters();
	let linkedFilterIterator = linkedFilters.getKeysAsIterator();
	while (linkedFilterIterator.hasNext())
	{
		let filterKey = linkedFilterIterator.next();
		let curFilter = linkedFilters.getByKey(filterKey);
		if (!oFF.XString.isEqual(filterKey, externalizedFilterName) && backProjectionFilterIds.contains(curFilter.getUniqueId()))
		{
			this._mergeCartesianLists(cartesianProduct, curFilter);
		}
	}
	return backProjectionFilter;
};
oFF.OlapFilterManager.prototype._mergeCartesianLists = function(cartesianProduct, backProjectionFilter)
{
	if (oFF.notNull(backProjectionFilter) && backProjectionFilter.isCartesianProduct())
	{
		let backProjectionProduct = backProjectionFilter.getCartesianProduct();
		let backProjectionListIt = backProjectionProduct.getIterator();
		while (backProjectionListIt.hasNext())
		{
			let backProjectionList = backProjectionListIt.next();
			let cartesianList = cartesianProduct.getCartesianListByDimensionMdWithDefault(backProjectionList.getFieldMetadata().getDimensionMetadata());
			cartesianList.copyFrom(backProjectionList, null);
		}
	}
};
oFF.OlapFilterManager.prototype._removeEmptyCartesianLists = function(dynamicFilter, externalizedDynamic)
{
	let externalizedCP = externalizedDynamic.getCartesianProductWithDefault();
	let dynamicCP = dynamicFilter.getCartesianProductWithDefault();
	let dimensionNameIterator = externalizedDynamic.getDimensionsUsedInFilter().getIterator();
	while (dimensionNameIterator.hasNext())
	{
		let dimensionName = dimensionNameIterator.next();
		let cartesianList = dynamicCP.getCartesianListByDimensionName(dimensionName);
		if (!oFF.XCollectionUtils.hasElements(cartesianList))
		{
			externalizedCP.removeByDimensionName(dimensionName);
		}
	}
};
oFF.OlapFilterManager.prototype._unlinkOrCollectConflictingDimensionsForOverwrittenFilters = function(filter, filterDimensions, filterToExclude, collectConflictingDimensions)
{
	let dimensionNameIterator = filterDimensions.getIterator();
	let skippedDimensions = oFF.XHashSetOfString.create();
	let backProjectionIds = filter.getBackProjectionFilterIds();
	while (dimensionNameIterator.hasNext())
	{
		let dimensionName = dimensionNameIterator.next();
		let linkedFilters = filter.getLinkedFilters();
		let linkedFilterIterator = linkedFilters.getKeysAsIterator();
		while (linkedFilterIterator.hasNext())
		{
			let filterName = linkedFilterIterator.next();
			let linkedFilter = linkedFilters.getByKey(filterName);
			let cartesianProduct = linkedFilter.getCartesianProduct();
			if (linkedFilter === filterToExclude || oFF.isNull(cartesianProduct) || !backProjectionIds.contains(linkedFilter.getUniqueId()))
			{
				continue;
			}
			if (cartesianProduct.getCartesianListByDimensionName(dimensionName) !== null)
			{
				if (collectConflictingDimensions)
				{
					skippedDimensions.add(dimensionName);
				}
				else
				{
					filter.linkFilterExt(filterName, null, true, true);
				}
			}
		}
	}
	return skippedDimensions;
};
oFF.OlapFilterManager.prototype.addFilter = function(filter)
{
	if (oFF.notNull(filter))
	{
		let filterName = filter.getUniqueId();
		this.deleteFilterByName(filterName);
		this.m_filters.put(filterName, filter);
	}
};
oFF.OlapFilterManager.prototype.addHierarchyInfo = function(variable, dimension, dynamicList, isFlattenHierarchyNodeFiltersFromVariables)
{
	if (variable.getVariableType().isTypeOf(oFF.VariableType.HIERARCHY_NODE_VARIABLE))
	{
		let hierarchyName = dimension.getHierarchyName();
		if (dimension.useHierarchyNameVariable())
		{
			hierarchyName = dimension.getHierarchyNameVariableName();
		}
		let hierarchyDueDate = dimension.getHierarchyDueDate();
		if (dimension.useHierarchyDueDateVariable())
		{
			hierarchyDueDate = null;
		}
		let hierarchyVersion = dimension.getHierarchyVersion();
		if (dimension.useHierarchyVersionVariable())
		{
			hierarchyVersion = dimension.getHierarchyVersionVariableName();
		}
		dynamicList.setHierarchyInfo(hierarchyName, hierarchyDueDate, hierarchyVersion);
		if (isFlattenHierarchyNodeFiltersFromVariables)
		{
			dynamicList.setConvertToFlatFilter(true);
		}
	}
};
oFF.OlapFilterManager.prototype.applyVariablePlaceholderToDimensionRuntimeReferenceFilter = function(queryManager, filter, dynamicProduct, variable, dimension, dimensionNames, prunedDimensions)
{
	if (oFF.notNull(dimension) && !dimensionNames.contains(dimension.getName()) && (oFF.isNull(prunedDimensions) || !prunedDimensions.contains(dimension.getName()) || oFF.XString.isEqual(queryManager.getTagging().getByKey(oFF.OlapFilterManager.TAGGING_VARIABLE_DIALOG_HAS_BEEN_SET), "true")))
	{
		let dynamicList = dynamicProduct.getCartesianListWithDefault(dimension);
		let filterField;
		if (variable.getVariableType() === oFF.VariableType.HIERARCHY_NODE_VARIABLE)
		{
			filterField = dimension.getHierarchyKeyField();
		}
		else if (dimension.isCompound())
		{
			filterField = dimension.getFirstFieldByType(oFF.PresentationType.KEY_NOT_COMPOUND);
		}
		else
		{
			filterField = dimension.getFlatKeyField();
		}
		dynamicList.setFieldMetadata(filterField.getMetadata());
		dynamicList.clear();
		let lowValueBag = dynamicList.addNewCartesianElement().getLow();
		lowValueBag.setVariableValue(variable);
		variable.setWinControlInAutoSubmit(true);
		this.addHierarchyInfo(variable, dimension, dynamicList, filter.isFlattenHierarchyNodeFiltersFromVariables());
	}
};
oFF.OlapFilterManager.prototype.cleanupFilterBeforeAutoSubmit = function(queryManager, isInitialSubmit)
{
	if (oFF.notNull(queryManager) && queryManager.getActiveResultSetContainer().getSyncState().isNotInSync() && queryManager.isExecuteAutoVariableSubmit() && queryManager.getInitSettings().isExternalizedDynamicFilter())
	{
		let queryModel = queryManager.getQueryModel();
		if (oFF.isNull(queryModel))
		{
			return;
		}
		let queryManagerBase = queryManager;
		let isValidStatePrevious = queryManager.getPreviousVariableProcessorState() !== oFF.VariableProcessorState.SUBMITTED;
		let variableProcessorState = queryManagerBase.getVariableProcessorState();
		let isValidStateCurrent = variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT;
		let variableManager = queryModel.getVariableManager();
		if (isValidStateCurrent && isValidStatePrevious && variableManager.hasDimensionMemberVariableAffectingDynamicFilter())
		{
			queryModel.queueEventing();
			let filter = queryModel.getFilter();
			let dynamicFilter = filter.getDynamicFilter();
			let externalizedFilterName = filter.getExternalizedFilterName();
			let internalBackProjectionFilter = this.getFilterByName(externalizedFilterName);
			let filterDimensions = oFF.XHashSetOfString.create();
			let taggingStoryVariables = oFF.XString.isEqual(queryManager.getTagging().getByKey(oFF.OlapFilterManager.TAGGING_STORY_VARIABLES), "true");
			let variableBasedFilterDimensionNames = variableManager.getDimensionNamesOfVariablesAffectingDynamicFilterValue();
			let dimensionsUsedInFilter = filter.getDynamicFilter().getDimensionsUsedInFilter();
			if (taggingStoryVariables)
			{
				filterDimensions.addAll(variableBasedFilterDimensionNames);
			}
			filterDimensions.addAll(dimensionsUsedInFilter);
			let dimensionNames = this._unlinkOrCollectConflictingDimensionsForOverwrittenFilters(filter, filterDimensions, internalBackProjectionFilter, taggingStoryVariables).getValuesAsReadOnlyList();
			this.clearFilterByDimensionNames(queryManager, dimensionNames, null);
			this.clearFilterByDimensionNames(queryManager, variableBasedFilterDimensionNames, null);
			let prunedDimensions = this.m_prunedDimensions.getByKey(queryManager.getInstanceId());
			if (oFF.notNull(prunedDimensions))
			{
				this.clearFilterByDimensionNames(queryManager, prunedDimensions, variableBasedFilterDimensionNames);
			}
			if (dynamicFilter.isComplexFilter())
			{
				this.m_flattenedComplexFilters.add(externalizedFilterName);
				let convertedFilter = oFF.QFilterUtil.convertComplexFilterToCartesian(dynamicFilter.getComplexRoot());
				if (oFF.notNull(convertedFilter))
				{
					dynamicFilter.setCartesianProduct(convertedFilter);
				}
			}
			let dynamicProduct = dynamicFilter.getCartesianProduct();
			if (oFF.notNull(dynamicProduct))
			{
				let variablesAffectingDynamicFilter = variableManager.getVariablesAffectingDynamicFilter();
				for (let j = 0; j < variablesAffectingDynamicFilter.size(); j++)
				{
					let variable = variablesAffectingDynamicFilter.get(j);
					if (!variable.isHierarchyInfoVariable())
					{
						oFF.XCollectionUtils.forEach(variable.getDimensionsForRuntimeFilterValue(), (dimension) => {
							this.applyVariablePlaceholderToDimensionRuntimeReferenceFilter(queryManager, filter, dynamicProduct, variable, dimension, dimensionNames, prunedDimensions);
						});
					}
				}
			}
			this.m_prunedDimensions.remove(queryManager.getInstanceId());
			filter.linkFilterExt(externalizedFilterName, null, queryModel.getVariableManager().hasDimensionMemberVariableAffectingDynamicFilter(), true);
			queryModel.resumeEventing();
		}
	}
};
oFF.OlapFilterManager.prototype.clearFilterByDimensionNames = function(queryManager, dimensionNames, except)
{
	let convenienceCommands = queryManager.getConvenienceCommands();
	let iterator = dimensionNames.getIterator();
	while (iterator.hasNext())
	{
		let dimName = iterator.next();
		if (oFF.isNull(except) || !except.contains(dimName))
		{
			convenienceCommands.clearFiltersByDimensionName(dimName);
		}
	}
};
oFF.OlapFilterManager.prototype.complementCartesianProductFromComplex = function(cartesianProduct, remainingFilters)
{
	if (oFF.notNull(remainingFilters))
	{
		let componentType = remainingFilters.getOlapComponentType();
		if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			let remainingList = remainingFilters;
			if (cartesianProduct.getCartesianListByDimensionName(remainingList.getDimensionName()) === null)
			{
				let newList = cartesianProduct.getCartesianListByDimensionMdWithDefault(remainingList.getFieldMetadata().getDimensionMetadata());
				newList.copyFrom(remainingList, null);
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.AND))
		{
			let remainingComplex = remainingFilters;
			for (let i = 0; i < remainingComplex.size(); i++)
			{
				this.complementCartesianProductFromComplex(cartesianProduct, remainingComplex.get(i));
			}
		}
	}
};
oFF.OlapFilterManager.prototype.containsName = function(name)
{
	return this.m_filters.containsKey(name);
};
oFF.OlapFilterManager.prototype.deleteFilterByName = function(name)
{
	let filter = this.m_filters.remove(name);
	if (oFF.notNull(filter))
	{
		filter.setComplexRoot(null);
		oFF.XObjectExt.release(filter);
	}
};
oFF.OlapFilterManager.prototype.discardNonVariableFilters = function(queryModel, variableManager, dynamicFilter)
{
	let cartesianProduct = dynamicFilter.getCartesianProduct();
	if (oFF.isNull(cartesianProduct))
	{
		cartesianProduct = oFF.QFilterUtil.convertComplexFilterToCartesian(dynamicFilter.getComplexRoot());
	}
	if (oFF.notNull(cartesianProduct))
	{
		let variableDimensionNames = variableManager.getDimensionNamesOfVariablesAffectingDynamicFilterValue();
		let dimensionNamesIterator = dynamicFilter.getDimensionsUsedInFilter().getIterator();
		while (dimensionNamesIterator.hasNext())
		{
			let dimensionName = dimensionNamesIterator.next();
			let list = cartesianProduct.getCartesianListByDimensionName(dimensionName);
			if (oFF.notNull(list) && !variableDimensionNames.contains(dimensionName) && (!queryModel.getDimensionByName(dimensionName).isMeasureStructure() || this.isExternalizeMeasureFilters(queryModel.getQueryManager())))
			{
				cartesianProduct.removeByDimensionName(dimensionName);
			}
		}
		dynamicFilter.setCartesianProduct(cartesianProduct);
	}
};
oFF.OlapFilterManager.prototype.externalizeDynamicFilter = function(queryManager)
{
	this._externalizeDynamicFilter(queryManager, true);
};
oFF.OlapFilterManager.prototype.externalizeDynamicFilterAfterSubmit = function(queryManager, isInitialSubmit)
{
	this._externalizeDynamicFilter(queryManager, isInitialSubmit);
};
oFF.OlapFilterManager.prototype.externalizeNonVariableFilter = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return;
	}
	let queryModel = queryManager.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return;
	}
	let variableManager = queryModel.getVariableManager();
	let filter = queryModel.getFilter();
	let dynamicFilter = filter.getDynamicFilter();
	let cartesianProduct = dynamicFilter.getCartesianProduct();
	if (oFF.isNull(cartesianProduct))
	{
		cartesianProduct = oFF.QFilterUtil.convertComplexFilterToCartesian(dynamicFilter.getComplexRoot());
	}
	if (oFF.XCollectionUtils.hasElements(cartesianProduct))
	{
		queryModel.queueEventing();
		let externalizedNVFN = filter.getExternalizedNonVariableFilterName();
		let internalNVF = this.getFilterByName(externalizedNVFN);
		let variableDimensionNames = variableManager.getDimensionNamesOfVariablesAffectingDynamicFilterValue();
		let internalNVFP = internalNVF.getCartesianProductWithDefault();
		let dimensionNamesIterator = dynamicFilter.getDimensionsUsedInFilter().getIterator();
		while (dimensionNamesIterator.hasNext())
		{
			let dimensionName = dimensionNamesIterator.next();
			let list = cartesianProduct.getCartesianListByDimensionName(dimensionName);
			if (oFF.notNull(list) && !variableDimensionNames.contains(dimensionName) && !this.isVariableReferenceInCartesianList(list))
			{
				let newList = internalNVFP.getCartesianListByDimensionMdWithDefault(list.getFieldMetadata().getDimensionMetadata());
				newList.copyFrom(list, null);
				cartesianProduct.removeByDimensionName(dimensionName);
			}
		}
		dynamicFilter.setCartesianProduct(cartesianProduct);
		filter.linkFilter(externalizedNVFN, internalNVF);
		queryModel.resumeEventing();
	}
};
oFF.OlapFilterManager.prototype.getExternalizeDynamicFilter = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	return this.getFilterByName(queryManager.getQueryModel().getFilter().getExternalizedFilterName());
};
oFF.OlapFilterManager.prototype.getFilterById = function(uniqueId)
{
	if (oFF.isNull(uniqueId))
	{
		return null;
	}
	let iterator = this.m_filters.getIterator();
	while (iterator.hasNext())
	{
		let filterExpression = iterator.next();
		if (oFF.XString.isEqual(filterExpression.getUniqueId(), uniqueId))
		{
			return filterExpression;
		}
	}
	return null;
};
oFF.OlapFilterManager.prototype.getFilterByName = function(name)
{
	if (oFF.isNull(name))
	{
		return null;
	}
	if (this.m_filters.containsKey(name))
	{
		return this.m_filters.getByKey(name);
	}
	this.notifyNodeChanged();
	let filter = oFF.QFilterExpression.create(this, this);
	this.m_filters.put(name, filter);
	return filter;
};
oFF.OlapFilterManager.prototype.getFilters = function()
{
	return this.m_filters;
};
oFF.OlapFilterManager.prototype.getModelCapabilities = function()
{
	return this.m_capabilities;
};
oFF.OlapFilterManager.prototype.getNonVariableDrivenFilters = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	else if (queryManager.getInitSettings().isExternalizedNonVariableFilter())
	{
		return this.getFilterByName(queryManager.getQueryModel().getFilter().getExternalizedNonVariableFilterName()).getCartesianProduct();
	}
	else
	{
		oFF.noSupport();
	}
};
oFF.OlapFilterManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.OLAP_FILTER_MANAGER;
};
oFF.OlapFilterManager.prototype.getVariableDrivenFilters = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return null;
	}
	else if (queryManager.getInitSettings().isExternalizedNonVariableFilter())
	{
		return queryManager.getInitSettings().isExternalizedDynamicFilter() && queryManager.isSubmitted() ? this.getFilterByName(queryManager.getQueryModel().getFilter().getExternalizedFilterName()).getCartesianProduct() : queryManager.getQueryModel().getFilter().getDynamicFilter().getCartesianProduct();
	}
	else
	{
		oFF.noSupport();
	}
};
oFF.OlapFilterManager.prototype.isExternalizeMeasureFilters = function(queryManager)
{
	return this.m_externalizeMeasureFilters.contains(queryManager.getInstanceId());
};
oFF.OlapFilterManager.prototype.isVariableReferenceInCartesianList = function(list)
{
	return oFF.XStream.of(list).anyMatch((element) => {
		let cartEl = element;
		return oFF.notNull(cartEl) && cartEl.getLow() !== null && cartEl.getLow().getValueType().isTypeOf(oFF.XValueType.VARIABLE);
	});
};
oFF.OlapFilterManager.prototype.projectExternalizedFilter = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return;
	}
	let queryModel = queryManager.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return;
	}
	if (queryModel.getVariableManager().hasDimensionMemberVariableAffectingDynamicFilter())
	{
		queryManager.queueEventing();
		let filter = queryModel.getFilter();
		let dynamicFilter = filter.getDynamicFilter();
		let backProjectionFilter = this._getBackProjectionFilter(filter);
		if (oFF.notNull(backProjectionFilter))
		{
			if (this.isExternalizeMeasureFilters(queryManager))
			{
				queryModel.getConvenienceCommands().clearFilters();
				dynamicFilter.copyFrom(backProjectionFilter, null);
			}
			else
			{
				queryModel.getConvenienceCommands().clearNonMeasureFilters();
				if (dynamicFilter.isComplexFilter())
				{
					this.m_flattenedComplexFilters.add(filter.getExternalizedFilterName());
				}
				let remainingMeasureFilters = dynamicFilter.getFilterRootElement();
				dynamicFilter.copyFrom(backProjectionFilter, null);
				this.complementCartesianProductFromComplex(dynamicFilter.getCartesianProductWithDefault(), remainingMeasureFilters);
			}
		}
		queryModel.resumeEventing();
	}
};
oFF.OlapFilterManager.prototype.pruneDimensionNamesForDynamicFilter = function(queryManager, dimensionNames)
{
	if (oFF.notNull(queryManager) && queryManager.getQueryModel() !== null && queryManager.getQueryModel().getVariableManager().hasDimensionMemberVariableAffectingDynamicFilter())
	{
		if (!oFF.XString.isEqual(queryManager.getTagging().getByKey(oFF.OlapFilterManager.TAGGING_VARIABLE_DIALOG_HAS_BEEN_SET), "true"))
		{
			this.pruneDimensionNamesInternal(queryManager, dimensionNames);
		}
	}
};
oFF.OlapFilterManager.prototype.pruneDimensionNamesInternal = function(queryManager, dimensionNames)
{
	let filter = queryManager.getQueryModel().getFilter();
	let externalizedFilterName = filter.getExternalizedFilterName();
	let internalBackProjectionFilter = this.getFilterByName(externalizedFilterName);
	if (oFF.notNull(dimensionNames) && oFF.notNull(internalBackProjectionFilter))
	{
		let dimNameIterator = dimensionNames.getIterator();
		while (dimNameIterator.hasNext())
		{
			oFF.QFilterUtil.clearSelectionsInContainerByDimension(dimNameIterator.next(), internalBackProjectionFilter);
		}
	}
	if (queryManager.getVariableProcessorState().isTypeOf(oFF.VariableProcessorState.SUBMITTED))
	{
		if (this.isExternalizeMeasureFilters(queryManager))
		{
			queryManager.getConvenienceCommands().clearFilters();
		}
		else
		{
			queryManager.getConvenienceCommands().clearNonMeasureFilters();
		}
	}
	else if (oFF.notNull(dimensionNames) && queryManager.isExecuteAutoVariableSubmit())
	{
		let prunedDimensions = this.m_prunedDimensions.getByKey(queryManager.getInstanceId());
		if (oFF.notNull(prunedDimensions))
		{
			let prunedDimensionsUnion = oFF.XList.create();
			prunedDimensionsUnion.addAll(prunedDimensions);
			prunedDimensionsUnion.addAll(dimensionNames);
			this.m_prunedDimensions.put(queryManager.getInstanceId(), prunedDimensionsUnion);
		}
		else
		{
			this.m_prunedDimensions.put(queryManager.getInstanceId(), dimensionNames.getValuesAsReadOnlyList());
		}
	}
};
oFF.OlapFilterManager.prototype.pruneExternalizedDynamicFilter = function(queryManager)
{
	if (oFF.notNull(queryManager) && queryManager.getQueryModel() !== null && queryManager.getVariableProcessorState().isTypeOf(oFF.VariableProcessorState.SUBMITTED) && queryManager.getQueryModel().getVariableManager().hasDimensionMemberVariableAffectingDynamicFilter())
	{
		let queryModel = queryManager.getQueryModel();
		let filter = queryModel.getFilter();
		let dynamicFilter = filter.getDynamicFilter();
		let externalizedFilterName = filter.getExternalizedFilterName();
		let internalBackProjectionFilter = this.getFilterByName(externalizedFilterName);
		if (oFF.notNull(internalBackProjectionFilter))
		{
			if (!oFF.XString.isEqual(queryManager.getTagging().getByKey(oFF.OlapFilterManager.TAGGING_VARIABLE_DIALOG_HAS_BEEN_SET), "true"))
			{
				let dimensionNamesOfDynamicFilter = dynamicFilter.getDimensionsUsedInFilter();
				let dimensionNamesOfBackprojection = internalBackProjectionFilter.getDimensionsUsedInFilter().getIterator();
				let internalBackProjectionProduct = internalBackProjectionFilter.getCartesianProduct();
				while (dimensionNamesOfBackprojection.hasNext())
				{
					let dimensionName = dimensionNamesOfBackprojection.next();
					if (!dimensionNamesOfDynamicFilter.contains(dimensionName))
					{
						internalBackProjectionProduct.removeByDimensionName(dimensionName);
					}
				}
				filter.linkFilterExt(externalizedFilterName, internalBackProjectionFilter, queryModel.getVariableManager().hasDimensionMemberVariableAffectingDynamicFilter(), true);
			}
			if (this.isExternalizeMeasureFilters(queryManager))
			{
				queryModel.getConvenienceCommands().clearFilters();
			}
			else
			{
				queryModel.getConvenienceCommands().clearNonMeasureFilters();
			}
		}
	}
};
oFF.OlapFilterManager.prototype.pruneNonVariableFilters = function(queryManager)
{
	if (oFF.notNull(queryManager) && queryManager.getQueryModel() !== null)
	{
		let queryModel = queryManager.getQueryModel();
		let filterExpression = queryModel.getFilter().getDynamicFilter();
		let variableManager = queryModel.getVariableManager();
		if (oFF.notNull(filterExpression))
		{
			let pruneList = oFF.XHashSetOfString.create();
			pruneList.addAll(filterExpression.getDimensionsUsedInFilter());
			let externalizedFilterName = queryModel.getFilter().getExternalizedFilterName();
			let internalBackProjectionFilter = this.getFilterByName(externalizedFilterName);
			if (oFF.notNull(internalBackProjectionFilter))
			{
				pruneList.addAll(internalBackProjectionFilter.getDimensionsUsedInFilter());
			}
			let varDims = variableManager.getDimensionNamesOfVariablesAffectingDynamicFilterValue().getIterator();
			while (varDims.hasNext())
			{
				let dimension = varDims.next();
				if (pruneList.contains(dimension))
				{
					pruneList.removeElement(dimension);
				}
			}
			let measureDimensionName = queryModel.getMeasureDimension().getName();
			if (pruneList.contains(measureDimensionName))
			{
				pruneList.removeElement(measureDimensionName);
			}
			if (oFF.XCollectionUtils.hasElements(pruneList))
			{
				this.pruneDimensionNamesInternal(queryManager, pruneList);
			}
		}
	}
};
oFF.OlapFilterManager.prototype.releaseExternalizedFilter = function(queryManager)
{
	if (oFF.isNull(queryManager))
	{
		return;
	}
	let queryModel = queryManager.getQueryModel();
	if (oFF.isNull(queryModel))
	{
		return;
	}
	let filter = queryModel.getFilter();
	if (oFF.isNull(filter))
	{
		return;
	}
	this.deleteFilterByName(filter.getExternalizedFilterName());
	this.deleteFilterByName(filter.getExternalizedNonVariableFilterName());
};
oFF.OlapFilterManager.prototype.releaseObject = function()
{
	this.m_filters = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_filters);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.OlapFilterManager.prototype.setExternalizeMeasureFilters = function(queryManager, externalize)
{
	if (externalize)
	{
		this.m_externalizeMeasureFilters.add(queryManager.getInstanceId());
	}
	else
	{
		this.m_externalizeMeasureFilters.removeElement(queryManager.getInstanceId());
	}
};
oFF.OlapFilterManager.prototype.setModCounter = function(modCounter)
{
	this.updateModCounter(modCounter);
};
oFF.OlapFilterManager.prototype.setupExt = function(context)
{
	this.setupModelComponentWithName(context, null, "FilterManager");
	this.m_filters = oFF.XHashMapByString.create();
	this.m_prunedDimensions = oFF.XHashMapByString.create();
	this.m_externalizeMeasureFilters = oFF.XHashSetOfString.create();
	this.m_flattenedComplexFilters = oFF.XHashSetOfString.create();
	this.m_capabilities = oFF.QCapabilities.create();
	this.m_capabilities.setSupportsVisibilityFilter(true);
	this.m_capabilities.setSupportsComplexFilter(true);
	this.m_capabilities.setSupportsCellValueOperand(true);
	this.m_capabilities.setSupportsIntersectLayers(true);
	this.m_capabilities.setSupportsHierarchyLevelOffsetFilter(true);
	this.m_capabilities.setSupportsHierarchyTrapezoidFilter(true);
	this.m_capabilities.setSupportsTuplesOperand(true);
	this.m_capabilities.setSupportsComplexTupleFilter(true);
	this.m_capabilities.setSupportsFilterCapabilityExtended(true);
	this.m_capabilities.setSupportsCalculatedDimensions(true);
	this.m_capabilities.setSupportsFormulaMeasures(true);
	this.m_capabilities.setSupportsDynamicVariableRefresh(true);
};

oFF.QGeoManager = function() {};
oFF.QGeoManager.prototype = new oFF.QModelComponent();
oFF.QGeoManager.prototype._ff_c = "QGeoManager";

oFF.QGeoManager.CHOROPLETH_DRILLPATH_IDENTIFIER = "drillpath:";
oFF.QGeoManager.CHOROPLETH_HIERARCHIES_IDENTIFIER = "hierarchy:";
oFF.QGeoManager.CHOROPLETH_TABLE_PREFIX = "table:[";
oFF.QGeoManager.EXTENDED_DIMENSION_NAME_EXT = "_extDim_";
oFF.QGeoManager.EXTENDED_DIMENSION_NAME_HIERARCHY = "_H";
oFF.QGeoManager.EXTENDED_DIMENSION_NAME_LEVEL = "_L";
oFF.QGeoManager.EXTENDED_DIMENSION_NAME_PREFIX = "_E";
oFF.QGeoManager.GEO_DIMENSION_NAME_PREFIX = "_D";
oFF.QGeoManager.create = function(context)
{
	let geoManager = new oFF.QGeoManager();
	geoManager.setupGeoManager(context);
	return geoManager;
};
oFF.QGeoManager.prototype.m_choroplethDrillPaths = null;
oFF.QGeoManager.prototype.m_choroplethHierarchies = null;
oFF.QGeoManager.prototype.m_choroplethIntermediateDrillPaths = null;
oFF.QGeoManager.prototype.m_drillPathTableKeyToLevelKeys = null;
oFF.QGeoManager.prototype.m_drillPoints = null;
oFF.QGeoManager.prototype.m_joinFieldNames = null;
oFF.QGeoManager.prototype.m_levelInfos = null;
oFF.QGeoManager.prototype.m_levelKeys = null;
oFF.QGeoManager.prototype.m_listenerIdentifiers = null;
oFF.QGeoManager.prototype.m_queryManagers = null;
oFF.QGeoManager.prototype.m_sharedQueryManagers = null;
oFF.QGeoManager.prototype.m_shouldUseSynonyms = null;
oFF.QGeoManager.prototype.m_syncTypes = null;
oFF.QGeoManager.prototype.m_systemNames = null;
oFF.QGeoManager.prototype.m_useAreaJoins = null;
oFF.QGeoManager.prototype._getSystemName = function(systemName)
{
	let theSystemName = systemName;
	if (oFF.isNull(theSystemName))
	{
		theSystemName = this.getApplication().getSystemLandscape().getMasterSystemName();
	}
	return theSystemName;
};
oFF.QGeoManager.prototype._loadChoroplethHierarchies = function(syncType, listener, systemName, liveSynonymSupportEnabled, localSynonymSupportEnabled, customIdentifier)
{
	let theSystemName = systemName;
	let masterSystemName = this.getApplication().getSystemLandscape().getMasterSystemName();
	if (oFF.isNull(theSystemName))
	{
		theSystemName = masterSystemName;
	}
	let isMasterSystem = this.isMasterSystemName(theSystemName);
	let hierarchiesResult = this.getChoroplethHierarchiesBySystemName(theSystemName);
	if (oFF.isNull(hierarchiesResult))
	{
		let shouldUseSynonym = null;
		if (liveSynonymSupportEnabled && !isMasterSystem || localSynonymSupportEnabled && isMasterSystem)
		{
			let systemConnect = this.getApplication().getConnectionPool().getSystemConnect(theSystemName);
			let serverMetadata = systemConnect.getServerMetadata();
			if (oFF.notNull(serverMetadata) && serverMetadata.supportsCapability(oFF.ServerService.ANALYTIC, oFF.InACapabilities.C177_DATA_ENTRY_ON_UNBOOKED))
			{
				shouldUseSynonym = oFF.XBooleanValue.create(true);
			}
		}
		if (syncType === oFF.SyncType.BLOCKING)
		{
			this.processQueryManagerCreationForChoroplethHierarchies(theSystemName, syncType, shouldUseSynonym, null, null);
			hierarchiesResult = this.getChoroplethHierarchiesBySystemName(theSystemName);
			if (hierarchiesResult.hasErrors() && !isMasterSystem)
			{
				this.processQueryManagerCreationForChoroplethHierarchies(masterSystemName, syncType, null, null, null);
				hierarchiesResult = this.getChoroplethHierarchiesBySystemName(masterSystemName);
			}
		}
		else
		{
			let requestKey = oFF.XStringUtils.concatenate3(oFF.QGeoManager.CHOROPLETH_HIERARCHIES_IDENTIFIER, theSystemName, oFF.XBoolean.convertToString(!isMasterSystem && liveSynonymSupportEnabled));
			let listenerIdentifiers = this.m_listenerIdentifiers.getByKey(requestKey);
			if (oFF.notNull(listenerIdentifiers))
			{
				listenerIdentifiers.add(oFF.XPair.create(listener, customIdentifier));
			}
			else
			{
				listenerIdentifiers = oFF.XList.create();
				listenerIdentifiers.add(oFF.XPair.create(listener, customIdentifier));
				this.m_listenerIdentifiers.put(requestKey, listenerIdentifiers);
				this.m_syncTypes.put(requestKey, syncType);
				this.m_systemNames.put(requestKey, theSystemName);
				this.m_shouldUseSynonyms.put(requestKey, shouldUseSynonym);
				this.processQueryManagerCreationForChoroplethHierarchies(theSystemName, syncType, shouldUseSynonym, this, oFF.XStringValue.create(requestKey));
			}
		}
	}
	if (oFF.notNull(hierarchiesResult))
	{
		if (hierarchiesResult.hasErrors() && !isMasterSystem && syncType !== oFF.SyncType.BLOCKING)
		{
			this.loadChoroplethHierarchiesExt(syncType, listener, masterSystemName, false, false, customIdentifier);
		}
		else if (oFF.notNull(listener))
		{
			listener.onChoroplethHierarchiesLoaded(hierarchiesResult, hierarchiesResult.getData(), customIdentifier);
		}
	}
	return hierarchiesResult;
};
oFF.QGeoManager.prototype.clearCache = function()
{
	this.m_choroplethHierarchies = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_choroplethHierarchies);
	this.m_choroplethDrillPaths = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_choroplethDrillPaths);
	this.m_sharedQueryManagers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_sharedQueryManagers);
	this.m_choroplethIntermediateDrillPaths = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_choroplethIntermediateDrillPaths);
	this.m_listenerIdentifiers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_listenerIdentifiers);
	this.m_syncTypes = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_syncTypes);
	this.m_queryManagers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_queryManagers);
	this.m_systemNames = oFF.XObjectExt.release(this.m_systemNames);
	this.m_shouldUseSynonyms = oFF.XObjectExt.release(this.m_shouldUseSynonyms);
	this.m_levelKeys = oFF.XObjectExt.release(this.m_levelKeys);
	this.m_levelInfos = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_levelInfos);
	this.m_drillPoints = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_drillPoints);
	this.m_drillPathTableKeyToLevelKeys = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_drillPathTableKeyToLevelKeys);
	this.m_joinFieldNames = oFF.XObjectExt.release(this.m_joinFieldNames);
	this.m_useAreaJoins = oFF.XObjectExt.release(this.m_useAreaJoins);
};
oFF.QGeoManager.prototype.getAgileAreaFieldName = function(systemName, geoDimensionName, parentQueryManager, levelId)
{
	let joinFieldName = null;
	let queryModel = parentQueryManager.getQueryModel();
	let geoDimension = queryModel.getDimensionByName(geoDimensionName);
	let levelNumber = oFF.XInteger.convertFromString(levelId);
	if (oFF.notNull(geoDimension) && levelNumber >= 1 && levelNumber <= oFF.QGeoConstants.AGILE_AREA_SEMANTIC_TYPES.size())
	{
		let joinField = this.getAgileAreaFieldWithSemanticType(geoDimension);
		if (oFF.notNull(joinField))
		{
			let fieldName = joinField.getName();
			let agileAreaSemanticType = oFF.QGeoConstants.AGILE_AREA_SEMANTIC_TYPES.get(levelNumber - 1);
			let semanticType = joinField.getSemanticType();
			if (oFF.notNull(semanticType) && oFF.XString.isEqual(semanticType, agileAreaSemanticType))
			{
				joinFieldName = fieldName;
			}
			else
			{
				let dimension = queryModel.getDimensionByName(fieldName);
				if (oFF.notNull(dimension))
				{
					let groupingDimensionNames = dimension.getGroupingDimensionNames();
					if (oFF.notNull(groupingDimensionNames))
					{
						let joinFieldKey = null;
						let useAreaJoins = oFF.XBooleanValue.create(true);
						for (let index = 0; index < groupingDimensionNames.size(); index++)
						{
							let groupingDimensionName = groupingDimensionNames.get(index);
							let groupingDimension = queryModel.getDimensionByName(groupingDimensionName);
							if (oFF.notNull(groupingDimension) && groupingDimension.supportsHierarchy() && groupingDimension.getNumberOfHierarchies() > 0 && groupingDimension.getLeveledHierarchies().size() > 0)
							{
								joinFieldKey = this.getJoinFieldKeyByDimensionNameLevelId(systemName, parentQueryManager, groupingDimensionName, levelId, false, null);
								joinFieldName = this.m_joinFieldNames.getByKey(joinFieldKey);
								if (oFF.notNull(joinFieldName))
								{
									break;
								}
								else
								{
									let numberOfJoinFieldsFound = 0;
									let dimensionFields = groupingDimension.getFields();
									for (let fieldIndex = 0; fieldIndex < dimensionFields.size(); fieldIndex++)
									{
										let field = dimensionFields.getFieldAt(fieldIndex);
										semanticType = field.getSemanticType();
										if (oFF.notNull(semanticType))
										{
											let levelIndex = oFF.QGeoConstants.AGILE_AREA_SEMANTIC_TYPES.getIndex(semanticType);
											if (levelIndex >= 0)
											{
												joinFieldKey = this.getJoinFieldKeyByDimensionNameLevelId(systemName, parentQueryManager, groupingDimensionName, oFF.XInteger.convertToString(levelIndex + 1), false, null);
												if (this.m_joinFieldNames.getByKey(joinFieldKey) === null)
												{
													this.m_joinFieldNames.put(joinFieldKey, field.getName());
													this.m_useAreaJoins.put(joinFieldKey, useAreaJoins);
												}
												if (levelIndex + 1 === levelNumber)
												{
													joinFieldName = field.getName();
												}
												++numberOfJoinFieldsFound;
												if (numberOfJoinFieldsFound === oFF.QGeoConstants.AGILE_AREA_SEMANTIC_TYPES.size())
												{
													break;
												}
											}
										}
									}
									if (numberOfJoinFieldsFound === oFF.QGeoConstants.AGILE_AREA_SEMANTIC_TYPES.size())
									{
										break;
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return joinFieldName;
};
oFF.QGeoManager.prototype.getAgileAreaFieldWithSemanticType = function(dimension)
{
	let joinField = null;
	if (oFF.notNull(dimension))
	{
		let dimensionFields = dimension.getFields();
		for (let index = 0; index < dimensionFields.size(); index++)
		{
			let field = dimensionFields.getFieldAt(index);
			let semanticType = field.getSemanticType();
			if (oFF.notNull(semanticType) && oFF.QGeoConstants.AGILE_AREA_SEMANTIC_TYPES.contains(semanticType))
			{
				joinField = field;
				break;
			}
		}
	}
	return joinField;
};
oFF.QGeoManager.prototype.getAreaEnrichedExtendedDimensionNamePrefix = function(extendedDimension)
{
	let areaId = extendedDimension.getJoinField();
	let index = oFF.XString.indexOf(areaId, ".");
	if (index > 0)
	{
		areaId = oFF.XString.substring(areaId, 0, index);
	}
	areaId = oFF.XStringUtils.concatenate3("_", areaId, "_");
	let dimensionName = extendedDimension.getName();
	let prefix = null;
	index = oFF.XString.indexOf(dimensionName, areaId);
	if (index >= 0)
	{
		prefix = oFF.XString.substring(dimensionName, 0, index + oFF.XString.size(areaId));
	}
	return prefix;
};
oFF.QGeoManager.prototype.getAreaEnrichedPrefixLevelIndex = function(field)
{
	let levelIndex = -1;
	if (field.getValueType().isSpatial())
	{
		let upperCaseFieldName = oFF.XString.toUpperCase(field.getName());
		for (let index = 0; index < oFF.QGeoConstants.AREA_ENRICHED_PREFIXES.size(); index++)
		{
			if (oFF.XString.startsWith(upperCaseFieldName, oFF.QGeoConstants.AREA_ENRICHED_PREFIXES.get(index)))
			{
				levelIndex = index;
				break;
			}
		}
	}
	return levelIndex;
};
oFF.QGeoManager.prototype.getAreaIdFieldNameAndLevelIndex = function(systemName, parentQueryManager, extendedDimension)
{
	let areaIdFieldNameByLevelIndex = null;
	if (oFF.notNull(extendedDimension) && extendedDimension.getLocationType() === oFF.LocationType.AREA)
	{
		let extendedDimensionName = extendedDimension.getName();
		let dimension = parentQueryManager.getQueryModel().getDimensionByName(extendedDimensionName);
		if (oFF.notNull(dimension))
		{
			let useAreaJoins = oFF.XBooleanValue.create(true);
			let dimensionFields = dimension.getFields();
			let areaLevelIndex = -1;
			let areaIdFieldName = null;
			for (let fieldIndex = 0; fieldIndex < dimensionFields.size(); fieldIndex++)
			{
				let field = dimensionFields.getFieldAt(fieldIndex);
				let levelIndex = this.getAreaEnrichedPrefixLevelIndex(field);
				if (levelIndex >= 0)
				{
					areaLevelIndex = levelIndex;
				}
				let fieldName = field.getName();
				if (oFF.XString.startsWith(oFF.XString.toUpperCase(fieldName), oFF.QGeoConstants.CHOROPLETH_METADATA_AREA_ID))
				{
					areaIdFieldName = fieldName;
				}
				if (areaLevelIndex >= 0 && oFF.notNull(areaIdFieldName))
				{
					let joinFieldKey = this.getJoinFieldKeyByDimensionNameLevelId(systemName, parentQueryManager, extendedDimensionName, oFF.XInteger.convertToString(areaLevelIndex + 1), false, null);
					if (this.m_joinFieldNames.getByKey(joinFieldKey) === null)
					{
						this.m_joinFieldNames.put(joinFieldKey, areaIdFieldName);
						this.m_useAreaJoins.put(joinFieldKey, useAreaJoins);
					}
					let prefix = this.getAreaEnrichedExtendedDimensionNamePrefix(extendedDimension);
					if (oFF.notNull(prefix))
					{
						joinFieldKey = this.getJoinFieldKeyByDimensionNameLevelId(systemName, parentQueryManager, prefix, oFF.XInteger.convertToString(areaLevelIndex + 1), true, null);
						if (this.m_joinFieldNames.getByKey(joinFieldKey) === null)
						{
							this.m_joinFieldNames.put(joinFieldKey, areaIdFieldName);
							this.m_useAreaJoins.put(joinFieldKey, useAreaJoins);
						}
					}
					areaIdFieldNameByLevelIndex = oFF.XKeyValuePair.create();
					areaIdFieldNameByLevelIndex.setKeyValue(oFF.XIntegerValue.create(areaLevelIndex), oFF.XStringValue.create(areaIdFieldName));
					break;
				}
			}
		}
	}
	return areaIdFieldNameByLevelIndex;
};
oFF.QGeoManager.prototype.getAreaJoinFieldName = function(systemName, geoDimensionName, parentQueryManager, levelId, attributeId)
{
	let joinFieldName = null;
	if (oFF.notNull(attributeId))
	{
		return joinFieldName;
	}
	let extendedDimensions = parentQueryManager.getQueryModel().getExtendedDimensions();
	let levelNumber = oFF.XInteger.convertFromString(levelId);
	if (oFF.notNull(extendedDimensions) && levelNumber >= 1 && levelNumber <= oFF.QGeoConstants.AREA_ENRICHED_PREFIXES.size())
	{
		let extendedDimension = this.getExtendedDimensionByName(extendedDimensions, geoDimensionName);
		if (oFF.notNull(extendedDimension) && extendedDimension.getLocationType() === oFF.LocationType.AREA)
		{
			let geoDimensionPrefix = this.getAreaEnrichedExtendedDimensionNamePrefix(extendedDimension);
			if (oFF.notNull(geoDimensionPrefix))
			{
				let joinFieldKey = this.getJoinFieldKeyByDimensionNameLevelId(systemName, parentQueryManager, geoDimensionPrefix, levelId, true, null);
				joinFieldName = this.m_joinFieldNames.getByKey(joinFieldKey);
			}
			let areaIdFieldNameByLevelIndex = null;
			let areaLevelIndex = -1;
			let areaIdFieldName = null;
			if (oFF.isNull(joinFieldName))
			{
				areaIdFieldNameByLevelIndex = this.getAreaIdFieldNameAndLevelIndex(systemName, parentQueryManager, extendedDimension);
				if (oFF.notNull(areaIdFieldNameByLevelIndex))
				{
					areaLevelIndex = oFF.XInteger.convertFromString(areaIdFieldNameByLevelIndex.getKey().toString());
					areaIdFieldName = areaIdFieldNameByLevelIndex.getValue().toString();
					if (areaLevelIndex + 1 === levelNumber && oFF.notNull(areaIdFieldName))
					{
						joinFieldName = areaIdFieldName;
					}
					oFF.XObjectExt.release(areaIdFieldNameByLevelIndex);
				}
			}
			if (oFF.notNull(geoDimensionPrefix) && oFF.isNull(joinFieldName))
			{
				for (let index = 0; index < extendedDimensions.size(); index++)
				{
					extendedDimension = extendedDimensions.get(index);
					if (!oFF.XString.isEqual(extendedDimension.getName(), geoDimensionName))
					{
						areaIdFieldNameByLevelIndex = this.getAreaIdFieldNameAndLevelIndex(systemName, parentQueryManager, extendedDimension);
						if (oFF.notNull(areaIdFieldNameByLevelIndex))
						{
							areaLevelIndex = oFF.XInteger.convertFromString(areaIdFieldNameByLevelIndex.getKey().toString());
							areaIdFieldName = areaIdFieldNameByLevelIndex.getValue().toString();
							if (areaLevelIndex >= 0 && oFF.notNull(areaIdFieldName))
							{
								let prefix = this.getAreaEnrichedExtendedDimensionNamePrefix(extendedDimension);
								if (areaLevelIndex + 1 === levelNumber && oFF.notNull(prefix) && oFF.XString.isEqual(prefix, geoDimensionPrefix))
								{
									joinFieldName = areaIdFieldName;
								}
							}
							oFF.XObjectExt.release(areaIdFieldNameByLevelIndex);
						}
					}
				}
			}
		}
	}
	return joinFieldName;
};
oFF.QGeoManager.prototype.getChoroplethDrillPath = function(syncType, listener, systemName, hierarchyId, levelIds, xPosition, yPosition, customIdentifier)
{
	let drillPathResult = null;
	let errorMessage = null;
	if (oFF.isNull(hierarchyId) || oFF.isNull(levelIds) || levelIds.isEmpty())
	{
		errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.CHOROPLETH_DRILL_PATH_INVALID_PARAMETERS, "HierarchyId and levelIds can not be null", null, false, null);
		drillPathResult = oFF.ExtResult.createWithMessage(errorMessage);
	}
	else
	{
		let theSystemName = this._getSystemName(systemName);
		let sortedLevelIds = oFF.XList.createWithList(levelIds);
		sortedLevelIds.sortByDirection(oFF.XSortDirection.ASCENDING);
		let point = oFF.XPointValue.createWithPosition(xPosition, yPosition);
		point.setSrid(oFF.XIntegerValue.create(oFF.QGeoConstants.SPATIAL_REFERENCE_WGS_1984_WEB_MERCATOR_AUXILIARY_SPHERE));
		let requestKey = oFF.XStringUtils.concatenate5(oFF.QGeoManager.CHOROPLETH_DRILLPATH_IDENTIFIER, theSystemName, hierarchyId, sortedLevelIds.toString(), point.toString());
		drillPathResult = this.m_choroplethDrillPaths.getByKey(requestKey);
		if (oFF.isNull(drillPathResult))
		{
			let levelKeys = oFF.XList.create();
			let levelInfos = oFF.XHashMapByString.create();
			for (let index = 0; index < sortedLevelIds.size(); index++)
			{
				let levelId = sortedLevelIds.get(index);
				let level = this.getChoroplethHierarchyLevel(theSystemName, hierarchyId, levelId);
				if (oFF.isNull(level))
				{
					errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.CHOROPLETH_DRILL_PATH_CHOROPLETH_HIERARCHIES_NOT_LOADED, "Choropleth hierarchy levels are either not loaded or not valid", null, false, null);
					drillPathResult = oFF.ExtResult.createWithMessage(errorMessage);
					break;
				}
				let levelKey = oFF.XStringUtils.concatenate5(requestKey, level.getSchemaName(), level.getPackageName(), level.getObjectName(), level.getLocation());
				let levels = levelInfos.getByKey(levelKey);
				if (oFF.isNull(levels))
				{
					levelKeys.add(levelKey);
					levelInfos.put(levelKey, oFF.XList.create());
					levels = levelInfos.getByKey(levelKey);
				}
				levels.add(level);
			}
			if (oFF.isNull(drillPathResult))
			{
				if (syncType === oFF.SyncType.BLOCKING)
				{
					this.processQueryManagerCreationForChoroplethDrillPath(theSystemName, syncType, levelKeys, levelInfos, point, requestKey);
					drillPathResult = this.processIntermediateDrillPaths(requestKey);
				}
				else
				{
					let listenerIdentifiers = this.m_listenerIdentifiers.getByKey(requestKey);
					if (oFF.notNull(listenerIdentifiers))
					{
						listenerIdentifiers.add(oFF.XPair.create(listener, customIdentifier));
					}
					else
					{
						listenerIdentifiers = oFF.XList.create();
						listenerIdentifiers.add(oFF.XPair.create(listener, customIdentifier));
						this.m_listenerIdentifiers.put(requestKey, listenerIdentifiers);
						this.processQueryManagerCreationForChoroplethDrillPath(theSystemName, syncType, levelKeys, levelInfos, point, requestKey);
					}
				}
			}
		}
	}
	if (oFF.notNull(drillPathResult) && oFF.notNull(listener))
	{
		listener.onChoroplethDrillPathsLoaded(drillPathResult, drillPathResult.getData(), customIdentifier);
	}
	return drillPathResult;
};
oFF.QGeoManager.prototype.getChoroplethDrillPathTableName = function(levels)
{
	let level = levels.get(0);
	let dataSourceName = oFF.XStringUtils.concatenate5(oFF.QGeoManager.CHOROPLETH_TABLE_PREFIX, level.getSchemaName(), "][", level.getPackageName(), "][");
	dataSourceName = oFF.XStringUtils.concatenate3(dataSourceName, level.getObjectName(), "]");
	return dataSourceName;
};
oFF.QGeoManager.prototype.getChoroplethExtendedDimension = function(systemName, hierarchyId, levelId, geoDimensionName, parentQueryManager, attributeId)
{
	let level = this.getChoroplethHierarchyLevel(systemName, hierarchyId, levelId);
	if (oFF.isNull(level))
	{
		throw oFF.XException.createRuntimeException("Fail to get choropleth hierarchy level");
	}
	if (oFF.isNull(geoDimensionName) || oFF.isNull(parentQueryManager))
	{
		throw oFF.XException.createRuntimeException("Pass in invalid geo dimension name or parent query manager");
	}
	let theSystemName = this._getSystemName(systemName);
	let joinFieldKey = this.getJoinFieldKeyByDimensionNameLevelId(theSystemName, parentQueryManager, geoDimensionName, levelId, false, attributeId);
	let joinFieldName = this.m_joinFieldNames.getByKey(joinFieldKey);
	let useAreaJoin = this.m_useAreaJoins.getByKey(joinFieldKey);
	if (oFF.isNull(joinFieldName))
	{
		joinFieldName = this.getAreaJoinFieldName(theSystemName, geoDimensionName, parentQueryManager, levelId, attributeId);
		if (oFF.isNull(joinFieldName))
		{
			joinFieldName = this.getAgileAreaFieldName(theSystemName, geoDimensionName, parentQueryManager, levelId);
			if (oFF.isNull(joinFieldName))
			{
				joinFieldName = this.getUniversalAreaFieldName(theSystemName, geoDimensionName, parentQueryManager, levelId, attributeId);
			}
		}
		useAreaJoin = oFF.XBooleanValue.create(oFF.notNull(joinFieldName));
		if (oFF.isNull(joinFieldName))
		{
			joinFieldName = this.getJoinFieldName(geoDimensionName, parentQueryManager, false);
		}
		if (oFF.isNull(joinFieldName))
		{
			throw oFF.XException.createRuntimeException("Fail to get join field");
		}
		if (this.m_joinFieldNames.getByKey(joinFieldKey) === null)
		{
			this.m_joinFieldNames.put(joinFieldKey, joinFieldName);
			this.m_useAreaJoins.put(joinFieldKey, useAreaJoin);
		}
	}
	let externalDataSource = oFF.QFactory.createDataSource();
	externalDataSource.setSchemaName(level.getSchemaName());
	if (oFF.XStringUtils.isNotNullAndNotEmpty(level.getPackageName()))
	{
		externalDataSource.setPackageName(level.getPackageName());
	}
	externalDataSource.setObjectName(level.getObjectName());
	externalDataSource.setType(oFF.MetaObjectType.DBVIEW);
	let extendDimensionName = this.getExtendedDimensionName(hierarchyId, level, geoDimensionName, parentQueryManager);
	let extendedDimension = oFF.QExtendedDimension.create(extendDimensionName, joinFieldName, useAreaJoin.getBoolean() ? oFF.QGeoConstants.CHOROPLETH_METADATA_AREA_ID : level.getLocation());
	extendedDimension.setDataSource(externalDataSource);
	let joinType = useAreaJoin.getBoolean() ? oFF.JoinType.INNER : oFF.JoinType.CONTAINS;
	extendedDimension.setJoinType(joinType);
	if (joinType === oFF.JoinType.INNER)
	{
		let systemConnect = this.getApplication().getConnectionPool().getSystemConnect(theSystemName);
		let serverMetadata = systemConnect.getServerMetadata();
		if (oFF.notNull(serverMetadata) && serverMetadata.supportsCapability(oFF.ServerService.ANALYTIC, oFF.InACapabilities.C143_EXTENDED_DIMENSIONS_JOIN_CARDINALITY))
		{
			extendedDimension.setJoinCardinality(oFF.JoinCardinality.N_ONE);
		}
	}
	extendedDimension.setVisibility(oFF.DimensionVisibility.METADATA);
	return extendedDimension;
};
oFF.QGeoManager.prototype.getChoroplethHierarchiesBySystemName = function(systemName)
{
	return this.m_choroplethHierarchies.getByKey(systemName);
};
oFF.QGeoManager.prototype.getChoroplethHierarchyLevel = function(systemName, hierarchyId, levelId)
{
	let theSystemName = this._getSystemName(systemName);
	let hierarchiesResult = this.getChoroplethHierarchiesBySystemName(theSystemName);
	if (oFF.notNull(hierarchiesResult) && !hierarchiesResult.hasErrors())
	{
		let hierarchies = hierarchiesResult.getData();
		if (oFF.notNull(hierarchies))
		{
			let hierarchy = hierarchies.getByKey(hierarchyId);
			if (oFF.notNull(hierarchy))
			{
				let level = hierarchy.getLevelById(levelId);
				return level;
			}
		}
	}
	else
	{
		if (!this.isMasterSystemName(theSystemName))
		{
			return this.getChoroplethHierarchyLevel(this.getApplication().getSystemLandscape().getMasterSystemName(), hierarchyId, levelId);
		}
	}
	return null;
};
oFF.QGeoManager.prototype.getChoroplethHierarchyTableName = function(systemName, shouldUseSynonym)
{
	let tableName = oFF.XStringBuffer.create();
	let isMasterSystem = this.isMasterSystemName(systemName);
	if (!isMasterSystem)
	{
		tableName.append(systemName).append("//");
	}
	tableName.append(oFF.QGeoManager.CHOROPLETH_TABLE_PREFIX);
	if (oFF.notNull(shouldUseSynonym) && shouldUseSynonym.getBoolean())
	{
		tableName.append(oFF.QGeoConstants.CHOROPLETH_HIERARCHY_SYNONYM_SCHEMANAME).append("][").append(oFF.QGeoConstants.CHOROPLETH_HIERARCHY_SYNONYM_PACKAGENAME).append("][").append(oFF.QGeoConstants.CHOROPLETH_HIERARCHY_SYNONYM_OBJECTNAME);
	}
	else
	{
		tableName.append(oFF.QGeoConstants.CHOROPLETH_HIERARCHY_SCHEMANAME).append("][");
		if (isMasterSystem)
		{
			let systemDescription = this.getApplication().getSystemLandscape().getSystemDescription(systemName);
			let tenantRootPackage = systemDescription.getTenantRootPackage();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(tenantRootPackage))
			{
				tableName.append(tenantRootPackage).append(".");
			}
		}
		tableName.append(oFF.QGeoConstants.CHOROPLETH_HIERARCHY_PACKAGENAME).append("][").append(oFF.QGeoConstants.CHOROPLETH_HIERARCHY_OBJECTNAME);
	}
	tableName.append("]");
	return tableName.toString();
};
oFF.QGeoManager.prototype.getColumnDimensionName = function(level)
{
	let columns = level.getColumns();
	for (let index = 0; index < columns.size(); index++)
	{
		let column = columns.get(index);
		if (oFF.XString.isEqual(column.getText(), oFF.QGeoConstants.CHOROPLETH_LEVEL_COLUMN_LABEL_NAME))
		{
			return column.getName();
		}
	}
	return null;
};
oFF.QGeoManager.prototype.getExtendedDimensionByName = function(extendedDimensions, dimensionName)
{
	let extendedDimension = null;
	for (let index = 0; index < extendedDimensions.size(); index++)
	{
		extendedDimension = extendedDimensions.get(index);
		if (oFF.XString.isEqual(extendedDimension.getName(), dimensionName))
		{
			break;
		}
	}
	return extendedDimension;
};
oFF.QGeoManager.prototype.getExtendedDimensionName = function(hierarchyId, level, geoDimensionName, parentQueryManager)
{
	let extendedDimensionName = oFF.XStringBuffer.create().append(geoDimensionName).append(oFF.QGeoManager.EXTENDED_DIMENSION_NAME_EXT).append(level.getLevelName()).append(oFF.QGeoManager.EXTENDED_DIMENSION_NAME_HIERARCHY).append(hierarchyId).append(oFF.QGeoManager.EXTENDED_DIMENSION_NAME_LEVEL).append(level.getLevelId());
	let queryModel = parentQueryManager.getQueryModel();
	let extendedDimensionNameString = extendedDimensionName.toString();
	let dimension = queryModel.getDimensionByName(extendedDimensionNameString);
	if (oFF.notNull(dimension))
	{
		let extendedDimensionNameStringBase = oFF.XStringUtils.concatenate2(extendedDimensionNameString, "_");
		let index = 1;
		while (oFF.notNull(dimension))
		{
			extendedDimensionNameString = oFF.XStringUtils.concatenateWithInt(extendedDimensionNameStringBase, index++);
			dimension = queryModel.getDimensionByName(extendedDimensionNameString);
		}
	}
	return extendedDimensionNameString;
};
oFF.QGeoManager.prototype.getJoinFieldKeyByDimensionNameLevelId = function(systemName, parentQueryManager, dimensionName, levelId, isExtendedDimensionPrefix, attributeId)
{
	let datasetId = parentQueryManager.getQueryModel().getDatasetId();
	let dimensionPrefix = isExtendedDimensionPrefix ? oFF.QGeoManager.EXTENDED_DIMENSION_NAME_PREFIX : oFF.QGeoManager.GEO_DIMENSION_NAME_PREFIX;
	return oFF.XStringUtils.concatenate2(oFF.XStringUtils.concatenate5(systemName, datasetId, dimensionPrefix, dimensionName, levelId), attributeId);
};
oFF.QGeoManager.prototype.getJoinFieldName = function(geoDimensionName, parentQueryManager, getPointOnly)
{
	let joinFieldName = null;
	let dimension = parentQueryManager.getQueryModel().getDimensionByName(geoDimensionName);
	if (oFF.notNull(dimension))
	{
		let dimensionFields = dimension.getFields();
		for (let fieldIndex = 0; fieldIndex < dimensionFields.size(); fieldIndex++)
		{
			let field = dimensionFields.getFieldAt(fieldIndex);
			let valueType = field.getValueType();
			if (valueType.isSpatial())
			{
				if (valueType === oFF.XValueType.POINT)
				{
					joinFieldName = field.getName();
					if (getPointOnly)
					{
						break;
					}
				}
				else if (!getPointOnly)
				{
					joinFieldName = field.getName();
					break;
				}
			}
		}
	}
	return joinFieldName;
};
oFF.QGeoManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.GEO_MANAGER;
};
oFF.QGeoManager.prototype.getUniversalAreaFieldName = function(systemName, geoDimensionName, parentQueryManager, levelId, attributeId)
{
	let joinFieldName = null;
	let dimension = parentQueryManager.getQueryModel().getDimensionByName(geoDimensionName);
	let levelNumber = oFF.XInteger.convertFromString(levelId);
	if (oFF.notNull(dimension) && levelNumber >= 1 && levelNumber <= oFF.QGeoConstants.UNIVERSAL_AREA_SEMANTIC_TYPES.size())
	{
		let numberOfJoinFieldsFound = 0;
		let useAreaJoins = oFF.XBooleanValue.create(true);
		let dimensionFields = dimension.getFields();
		let attributeField = dimensionFields.getFieldByName(attributeId);
		if (oFF.notNull(attributeField))
		{
			let attributeSemanticType = attributeField.getSemanticType();
			if (oFF.notNull(attributeSemanticType))
			{
				let universalShapeIndex = oFF.XString.indexOf(attributeSemanticType, oFF.QGeoConstants.UNIVERSAL_AREA_SHAPE_SEMANTIC_TYPE);
				if (universalShapeIndex < 0)
				{
					return joinFieldName;
				}
			}
		}
		for (let index = 0; index < dimensionFields.size(); index++)
		{
			let field = dimensionFields.getFieldAt(index);
			let semanticType = field.getSemanticType();
			if (oFF.notNull(semanticType))
			{
				let levelIndex = oFF.QGeoConstants.UNIVERSAL_AREA_SEMANTIC_TYPES.getIndex(semanticType);
				if (levelIndex >= 0)
				{
					let fieldName = field.getName();
					let joinFieldKey = this.getJoinFieldKeyByDimensionNameLevelId(systemName, parentQueryManager, geoDimensionName, oFF.XInteger.convertToString(levelIndex + 1), false, attributeId);
					if (this.m_joinFieldNames.getByKey(joinFieldKey) === null)
					{
						this.m_joinFieldNames.put(joinFieldKey, fieldName);
						this.m_useAreaJoins.put(joinFieldKey, useAreaJoins);
					}
					if (levelIndex + 1 === levelNumber)
					{
						joinFieldName = fieldName;
					}
					++numberOfJoinFieldsFound;
					if (numberOfJoinFieldsFound === oFF.QGeoConstants.UNIVERSAL_AREA_SEMANTIC_TYPES.size())
					{
						break;
					}
				}
			}
		}
	}
	return joinFieldName;
};
oFF.QGeoManager.prototype.handleErrorsForChoroplethHierarchies = function(extResult, errorMessage, systemName, syncType, customIdentifier)
{
	if (oFF.notNull(extResult) && !extResult.isValid() || oFF.notNull(errorMessage))
	{
		let errorResult;
		if (oFF.notNull(extResult))
		{
			errorResult = oFF.ExtResult.createWithExternalMessages(null, extResult);
		}
		else
		{
			errorResult = oFF.ExtResult.createWithMessage(errorMessage);
		}
		this.m_choroplethHierarchies.put(systemName, errorResult);
		if (syncType !== oFF.SyncType.BLOCKING)
		{
			this.processChoroplethHiearachiesResult(customIdentifier);
		}
	}
};
oFF.QGeoManager.prototype.initialize = function()
{
	this.m_choroplethHierarchies = oFF.XHashMapByString.create();
	this.m_choroplethDrillPaths = oFF.XHashMapByString.create();
	this.m_sharedQueryManagers = oFF.XHashMapByString.create();
	this.m_choroplethIntermediateDrillPaths = oFF.XHashMapByString.create();
	this.m_listenerIdentifiers = oFF.XHashMapByString.create();
	this.m_syncTypes = oFF.XHashMapByString.create();
	this.m_queryManagers = oFF.XHashMapByString.create();
	this.m_systemNames = oFF.XHashMapByString.create();
	this.m_shouldUseSynonyms = oFF.XHashMapByString.create();
	this.m_levelKeys = oFF.XHashMapByString.create();
	this.m_levelInfos = oFF.XHashMapByString.create();
	this.m_drillPoints = oFF.XHashMapByString.create();
	this.m_drillPathTableKeyToLevelKeys = oFF.XHashMapByString.create();
	this.m_joinFieldNames = oFF.XHashMapByString.create();
	this.m_useAreaJoins = oFF.XHashMapByString.create();
};
oFF.QGeoManager.prototype.isForChoroplethDrillPath = function(requestKey)
{
	return oFF.XString.startsWith(requestKey, oFF.QGeoManager.CHOROPLETH_DRILLPATH_IDENTIFIER);
};
oFF.QGeoManager.prototype.isForChoroplethHierarchies = function(requestKey)
{
	return oFF.XString.startsWith(requestKey, oFF.QGeoManager.CHOROPLETH_HIERARCHIES_IDENTIFIER);
};
oFF.QGeoManager.prototype.isMasterSystemName = function(systemName)
{
	return oFF.XString.isEqual(systemName, this.getApplication().getSystemLandscape().getMasterSystemName());
};
oFF.QGeoManager.prototype.loadChoroplethHierarchies = function(syncType, listener, systemName, liveSynonymSupportEnabled, customIdentifier)
{
	return this._loadChoroplethHierarchies(syncType, listener, systemName, liveSynonymSupportEnabled, false, customIdentifier);
};
oFF.QGeoManager.prototype.loadChoroplethHierarchiesExt = function(syncType, listener, systemName, liveSynonymSupportEnabled, localSynonymSupportEnabled, customIdentifier)
{
	return this._loadChoroplethHierarchies(syncType, listener, systemName, liveSynonymSupportEnabled, localSynonymSupportEnabled, customIdentifier);
};
oFF.QGeoManager.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (oFF.isNull(customIdentifier))
	{
		throw oFF.XException.createRuntimeException("Identifier can not be null");
	}
	let xGuid = customIdentifier;
	let requestKey = xGuid.getString();
	let syncType = this.m_syncTypes.getByKey(requestKey);
	if (this.isForChoroplethHierarchies(requestKey))
	{
		let systemName = this.m_systemNames.getByKey(requestKey);
		let shouldUseSynonym = this.m_shouldUseSynonyms.getByKey(requestKey);
		this.processResultSetForChoroplethHierarchies(extResult, resultSetContainer, syncType, systemName, shouldUseSynonym, customIdentifier);
	}
	else if (this.isForChoroplethDrillPath(requestKey))
	{
		let levelKey = requestKey;
		requestKey = this.m_levelKeys.getByKey(levelKey);
		let levels = this.m_levelInfos.getByKey(levelKey);
		this.processResultSetForChoroplethDrillPath(extResult, resultSetContainer, syncType, levels, levelKey, requestKey);
	}
};
oFF.QGeoManager.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	if (oFF.isNull(customIdentifier))
	{
		throw oFF.XException.createRuntimeException("Identifier can not be null");
	}
	let xGuid = customIdentifier;
	let requestKey = xGuid.getString();
	let syncType = this.m_syncTypes.getByKey(requestKey);
	if (this.isForChoroplethHierarchies(requestKey))
	{
		this.m_queryManagers.put(requestKey, queryManager);
		let systemName = this.m_systemNames.getByKey(requestKey);
		let shouldUseSynonym = this.m_shouldUseSynonyms.getByKey(requestKey);
		this.processQueryExecutionForChoroplethHierarchies(extResult, queryManager, systemName, syncType, shouldUseSynonym, this, customIdentifier);
	}
	else if (this.isForChoroplethDrillPath(requestKey))
	{
		let drillPathTableKey = requestKey;
		this.m_sharedQueryManagers.put(drillPathTableKey, extResult);
		let levelKeysPending = this.m_drillPathTableKeyToLevelKeys.remove(drillPathTableKey);
		for (let index = 0; index < levelKeysPending.size(); index++)
		{
			let levelKey = levelKeysPending.get(index);
			requestKey = this.m_levelKeys.getByKey(levelKey);
			let levels = this.m_levelInfos.getByKey(levelKey);
			let point = this.m_drillPoints.getByKey(levelKey);
			this.processQueryExecutionForChoroplethDrillPath(extResult, queryManager, syncType, levels, point, requestKey, this, oFF.XStringValue.create(levelKey));
		}
	}
};
oFF.QGeoManager.prototype.processChoroplethHiearachiesResult = function(customIdentifier)
{
	let xGuid = customIdentifier;
	let requestKey = xGuid.getString();
	let systemName = this.m_systemNames.remove(requestKey);
	let syncType = this.m_syncTypes.remove(requestKey);
	this.m_shouldUseSynonyms.remove(requestKey);
	let queryManager = this.m_queryManagers.remove(requestKey);
	if (oFF.notNull(queryManager))
	{
		oFF.XObjectExt.release(queryManager);
	}
	let listenerIdentifiers = this.m_listenerIdentifiers.remove(requestKey);
	let hierarchiesResult = this.getChoroplethHierarchiesBySystemName(systemName);
	for (let index1 = 0; index1 < listenerIdentifiers.size(); index1++)
	{
		let listenerIdentifier = listenerIdentifiers.get(index1);
		let listener = listenerIdentifier.getFirstObject();
		let identifier = listenerIdentifier.getSecondObject();
		if (!hierarchiesResult.isValid() && !this.isMasterSystemName(systemName))
		{
			this.loadChoroplethHierarchiesExt(syncType, listener, this.getApplication().getSystemLandscape().getMasterSystemName(), false, false, identifier);
		}
		else if (oFF.notNull(listener))
		{
			listener.onChoroplethHierarchiesLoaded(hierarchiesResult, hierarchiesResult.getData(), identifier);
		}
	}
};
oFF.QGeoManager.prototype.processIntermediateDrillPaths = function(requestKey)
{
	let drillPathResults = this.m_choroplethIntermediateDrillPaths.remove(requestKey);
	let extResult = null;
	if (oFF.isNull(drillPathResults))
	{
		let errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.FAILED_TO_GET_CHOROPLETH_DRILL_PATH, "Failed to choropleth drill path", null, false, null);
		extResult = oFF.ExtResult.createWithMessage(errorMessage);
	}
	else
	{
		let drillPaths = oFF.XList.create();
		let messages = oFF.MessageManagerSimple.createMessageManager();
		let iterator = drillPathResults.getIterator();
		while (iterator.hasNext())
		{
			let drillPathResult = iterator.next();
			if (drillPathResult.hasErrors())
			{
				messages.copyAllMessages(drillPathResult);
			}
			else
			{
				drillPaths.addAll(drillPathResult.getData());
			}
		}
		if (messages.isValid())
		{
			drillPaths.sortByComparator(oFF.QGeoChoroplethDrillPathComparatorAsc.create());
			extResult = oFF.ExtResult.create(drillPaths, null);
		}
		else
		{
			extResult = oFF.ExtResult.createWithExternalMessages(null, messages);
		}
	}
	this.m_choroplethDrillPaths.put(requestKey, extResult);
	return extResult;
};
oFF.QGeoManager.prototype.processQueryExecutionForChoroplethDrillPath = function(extResult, queryManager, syncType, levels, point, requestKey, listener, customIdentifier)
{
	let xGuid = customIdentifier;
	let levelKey = xGuid.getString();
	if (extResult.isValid())
	{
		let clonedQueryManager = queryManager.cloneQueryManager();
		let errorMessage = null;
		let level = levels.get(0);
		let queryModel = clonedQueryManager.getQueryModel();
		let dynamicFilter = queryModel.getFilter().getDynamicFilter();
		let cartesianProduct = dynamicFilter.getCartesianProductWithDefault();
		let locationDimension = queryModel.getDimensionByName(level.getLocation());
		if (oFF.isNull(locationDimension))
		{
			errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.CHOROPLETH_DRILL_PATH_FIELD_NOT_FOUND, oFF.XStringUtils.concatenate2("Location dimension is not found: ", level.getLocation()), null, false, null);
		}
		else
		{
			let cmd = clonedQueryManager.getConvenienceCommands();
			let cartesianList1 = cartesianProduct.getCartesianListWithDefault(locationDimension);
			let locationKeyField = locationDimension.getKeyField();
			locationKeyField.setTextTransformation(oFF.TextTransformationType.SPATIAL_AS_GEOJSON);
			cartesianList1.setField(locationKeyField);
			let spatialFilter = cartesianList1.addNewCartesianElement();
			spatialFilter.setComparisonOperator(oFF.SpatialComparisonOperator.INTERSECTS);
			spatialFilter.setField(locationKeyField);
			spatialFilter.getLow().setPoint(point);
			if (level.isCustom())
			{
				cmd.moveDimensionToRows(oFF.QGeoConstants.CHOROPLETH_METADATA_CUSTOM_ID);
			}
			else
			{
				cmd.moveDimensionToRows(oFF.QGeoConstants.CHOROPLETH_METADATA_LEVEL);
				cmd.moveDimensionToRows(oFF.QGeoConstants.CHOROPLETH_METADATA_FEATURE_ID);
				let levelDimension = queryModel.getDimensionByName(oFF.QGeoConstants.CHOROPLETH_METADATA_LEVEL);
				if (oFF.isNull(levelDimension))
				{
					errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.CHOROPLETH_DRILL_PATH_FIELD_NOT_FOUND, "Level dimension is not found", null, false, null);
				}
				else
				{
					let cartesianList2 = cartesianProduct.getCartesianListWithDefault(levelDimension);
					let levelKeyField = levelDimension.getKeyField();
					cartesianList2.setField(levelKeyField);
					for (let i = 0; i < levels.size(); i++)
					{
						level = levels.get(i);
						let levelFilter = cartesianList2.addNewCartesianElement();
						levelFilter.configureSingleParameterExpression(oFF.XStringValue.create(level.getLevelId()), oFF.ComparisonOperator.EQUAL);
						levelFilter.setField(levelKeyField);
					}
				}
			}
			cmd.moveDimensionToRows(level.getLocation());
			let columnName = this.getColumnDimensionName(level);
			if (oFF.notNull(columnName))
			{
				cmd.moveDimensionToRows(columnName);
			}
		}
		if (oFF.isNull(errorMessage))
		{
			if (syncType !== oFF.SyncType.BLOCKING)
			{
				this.m_queryManagers.put(levelKey, clonedQueryManager);
			}
			let resultsetResult = clonedQueryManager.processQueryExecution(syncType, listener, customIdentifier);
			if (syncType === oFF.SyncType.BLOCKING)
			{
				this.processResultSetForChoroplethDrillPath(resultsetResult, resultsetResult.getData(), syncType, levels, levelKey, requestKey);
				oFF.XObjectExt.release(clonedQueryManager);
			}
		}
		else
		{
			this.processResultSetForChoroplethDrillPath(oFF.ExtResult.createWithMessage(errorMessage), null, syncType, levels, levelKey, requestKey);
			oFF.XObjectExt.release(clonedQueryManager);
		}
	}
	else
	{
		this.processResultSetForChoroplethDrillPath(oFF.ExtResult.createWithExternalMessages(null, extResult), null, syncType, levels, levelKey, requestKey);
	}
};
oFF.QGeoManager.prototype.processQueryExecutionForChoroplethHierarchies = function(extResult, queryManager, systemName, syncType, shouldUseSynonym, listener, customIdentifier)
{
	if (extResult.isValid())
	{
		let cmd = queryManager.getConvenienceCommands();
		for (let index = 0; index < oFF.QGeoConstants.CHOROPLETH_HIERARCHY_DIMENSIONS.size(); index++)
		{
			cmd.moveDimensionToRows(oFF.QGeoConstants.CHOROPLETH_HIERARCHY_DIMENSIONS.get(index));
		}
		let resultsetResult = queryManager.processQueryExecution(syncType, listener, customIdentifier);
		if (syncType === oFF.SyncType.BLOCKING)
		{
			this.processResultSetForChoroplethHierarchies(resultsetResult, resultsetResult.getData(), syncType, systemName, shouldUseSynonym, null);
			oFF.XObjectExt.release(queryManager);
		}
	}
	else
	{
		this.handleErrorsForChoroplethHierarchies(extResult, null, systemName, syncType, customIdentifier);
	}
};
oFF.QGeoManager.prototype.processQueryManagerCreationForChoroplethDrillPath = function(systemName, syncType, levelKeys, levelInfos, point, requestKey)
{
	for (let index = 0; index < levelKeys.size(); index++)
	{
		let levelKey = levelKeys.get(index);
		let levels = levelInfos.getByKey(levelKey);
		if (syncType !== oFF.SyncType.BLOCKING)
		{
			this.m_levelKeys.put(levelKey, requestKey);
			this.m_levelInfos.put(levelKey, levels);
			this.m_syncTypes.put(levelKey, syncType);
			this.m_drillPoints.put(levelKey, point);
		}
		let dataSourceName = this.getChoroplethDrillPathTableName(levels);
		let drillPathTableKey = oFF.XStringUtils.concatenate3(oFF.QGeoManager.CHOROPLETH_DRILLPATH_IDENTIFIER, systemName, dataSourceName);
		let extResult = this.m_sharedQueryManagers.getByKey(drillPathTableKey);
		if (oFF.isNull(extResult))
		{
			let queryManager = this.getOlapEnv().getQueryManagerByDataSource(systemName, dataSourceName);
			if (oFF.notNull(queryManager))
			{
				extResult = oFF.ExtResult.create(queryManager.cloneQueryManager(), null);
				this.m_sharedQueryManagers.put(drillPathTableKey, extResult);
			}
		}
		if (oFF.isNull(extResult))
		{
			if (syncType === oFF.SyncType.BLOCKING)
			{
				extResult = this.getOlapEnv().processQueryManagerCreationWithDataSourceName(syncType, null, null, systemName, dataSourceName);
				this.m_sharedQueryManagers.put(drillPathTableKey, extResult);
			}
			else
			{
				let levelKeysPending = this.m_drillPathTableKeyToLevelKeys.getByKey(drillPathTableKey);
				if (oFF.notNull(levelKeysPending))
				{
					levelKeysPending.add(levelKey);
				}
				else
				{
					levelKeysPending = oFF.XList.create();
					levelKeysPending.add(levelKey);
					this.m_drillPathTableKeyToLevelKeys.put(drillPathTableKey, levelKeysPending);
					this.getOlapEnv().processQueryManagerCreationWithDataSourceName(syncType, this, oFF.XStringValue.create(drillPathTableKey), systemName, dataSourceName);
				}
			}
		}
		if (oFF.notNull(extResult))
		{
			if (syncType === oFF.SyncType.BLOCKING)
			{
				this.processQueryExecutionForChoroplethDrillPath(extResult, extResult.getData(), syncType, levels, point, requestKey, null, oFF.XStringValue.create(levelKey));
			}
			else
			{
				this.processQueryExecutionForChoroplethDrillPath(extResult, extResult.getData(), syncType, levels, point, requestKey, this, oFF.XStringValue.create(levelKey));
			}
		}
	}
};
oFF.QGeoManager.prototype.processQueryManagerCreationForChoroplethHierarchies = function(systemName, syncType, shouldUseSynonym, listener, customIdentifier)
{
	let dataSourceName = this.getChoroplethHierarchyTableName(systemName, shouldUseSynonym);
	let queryManager = this.getOlapEnv().getQueryManagerByDataSource(systemName, dataSourceName);
	let extResult = null;
	if (oFF.notNull(queryManager))
	{
		extResult = oFF.ExtResult.create(queryManager.cloneQueryManager(), null);
		if (syncType === oFF.SyncType.BLOCKING)
		{
			this.processQueryExecutionForChoroplethHierarchies(extResult, extResult.getData(), systemName, syncType, shouldUseSynonym, null, customIdentifier);
		}
		else
		{
			this.processQueryExecutionForChoroplethHierarchies(extResult, extResult.getData(), systemName, syncType, shouldUseSynonym, this, customIdentifier);
		}
	}
	else
	{
		extResult = this.getOlapEnv().processQueryManagerCreationWithDataSourceName(syncType, listener, customIdentifier, systemName, dataSourceName);
		if (syncType === oFF.SyncType.BLOCKING)
		{
			this.processQueryExecutionForChoroplethHierarchies(extResult, extResult.getData(), systemName, syncType, shouldUseSynonym, null, customIdentifier);
		}
	}
};
oFF.QGeoManager.prototype.processResultSetForChoroplethDrillPath = function(extResult, resultSetContainer, syncType, levels, levelKey, requestKey)
{
	let drillPathResults = this.m_choroplethIntermediateDrillPaths.getByKey(requestKey);
	if (oFF.isNull(drillPathResults))
	{
		this.m_choroplethIntermediateDrillPaths.put(requestKey, oFF.XHashMapByString.create());
		drillPathResults = this.m_choroplethIntermediateDrillPaths.getByKey(requestKey);
	}
	if (extResult.isValid() && oFF.notNull(levels) && !levels.isEmpty())
	{
		let level = levels.get(0);
		let columnName = this.getColumnDimensionName(level);
		let locationName = level.getLocation();
		let drillPaths = oFF.XList.create();
		let cursorResultSet = resultSetContainer.getCursorResultSet();
		let cursorRowsAxis = cursorResultSet.getCursorRowsAxis();
		cursorRowsAxis.setTupleCursorBeforeStart();
		let levelIndex = -1;
		let idIndex = -1;
		let shapeIndex = -1;
		let areaNameIndex = -1;
		let rsDimensions = cursorRowsAxis.getRsDimensions();
		let rsDimensionCount = rsDimensions.size();
		for (let j = 0; j < rsDimensionCount; j++)
		{
			let rsDimension = rsDimensions.get(j);
			let dimensionName = rsDimension.getName();
			if (oFF.XString.isEqual(dimensionName, oFF.QGeoConstants.CHOROPLETH_METADATA_LEVEL))
			{
				levelIndex = j;
			}
			else if (oFF.XString.isEqual(dimensionName, oFF.QGeoConstants.CHOROPLETH_METADATA_FEATURE_ID) || oFF.XString.isEqual(dimensionName, oFF.QGeoConstants.CHOROPLETH_METADATA_CUSTOM_ID))
			{
				idIndex = j;
			}
			else if (oFF.XString.isEqual(dimensionName, locationName))
			{
				shapeIndex = j;
			}
			else if (oFF.notNull(columnName) && oFF.XString.isEqual(dimensionName, columnName))
			{
				areaNameIndex = j;
			}
		}
		let tuplesCount = cursorRowsAxis.getTuplesCount();
		let tupleElements = cursorRowsAxis.getTupleElementsCount();
		for (let i = 0; i < tuplesCount; i++)
		{
			cursorRowsAxis.nextTuple();
			let elementNames = oFF.XList.create();
			for (let k = 0; k < tupleElements; k++)
			{
				cursorRowsAxis.nextTupleElement();
				while (cursorRowsAxis.hasNextFieldValue())
				{
					let fieldValue = cursorRowsAxis.nextFieldValue();
					elementNames.add(fieldValue.getValue().getStringRepresentation());
				}
			}
			let drillPath = oFF.QGeoChoroplethDrillPath.create();
			if (shapeIndex >= 0)
			{
				drillPath.setShape(elementNames.get(shapeIndex));
			}
			if (areaNameIndex >= 0)
			{
				drillPath.setAreaName(elementNames.get(areaNameIndex));
			}
			if (idIndex >= 0)
			{
				drillPath.setAreaId(elementNames.get(idIndex));
			}
			if (levelIndex >= 0)
			{
				drillPath.setLevelId(elementNames.get(levelIndex));
			}
			else
			{
				if (i < levels.size())
				{
					level = levels.get(i);
				}
				drillPath.setLevelId(level.getLevelId());
			}
			drillPath.setSRID(oFF.QGeoConstants.SPATIAL_REFERENCE_WGS_1984_WEB_MERCATOR_AUXILIARY_SPHERE);
			drillPaths.add(drillPath);
		}
		drillPathResults.put(levelKey, oFF.ExtResult.create(drillPaths, null));
	}
	else if (!extResult.isValid())
	{
		drillPathResults.put(levelKey, oFF.ExtResult.createWithExternalMessages(null, extResult));
	}
	else if (oFF.isNull(levels) || levels.isEmpty())
	{
		let errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.FAILED_TO_GET_CHOROPLETH_DRILL_PATH, "Levels are invalid", null, false, null);
		drillPathResults.put(levelKey, oFF.ExtResult.createWithMessage(errorMessage));
	}
	if (syncType !== oFF.SyncType.BLOCKING)
	{
		let levelKeys = oFF.XList.create();
		let iterator = this.m_levelKeys.getKeysAsIterator();
		let key = null;
		while (iterator.hasNext())
		{
			key = iterator.next();
			if (oFF.XString.isEqual(requestKey, this.m_levelKeys.getByKey(key)))
			{
				levelKeys.add(key);
			}
		}
		if (drillPathResults.size() === levelKeys.size())
		{
			let drillPathResult = this.processIntermediateDrillPaths(requestKey);
			for (let index = 0; index < levelKeys.size(); index++)
			{
				key = levelKeys.get(index);
				this.m_levelKeys.remove(key);
				this.m_levelInfos.remove(key);
				this.m_drillPoints.remove(key);
				this.m_syncTypes.remove(key);
				let queryManager = this.m_queryManagers.remove(key);
				if (oFF.notNull(queryManager))
				{
					oFF.XObjectExt.release(queryManager);
				}
			}
			this.m_choroplethIntermediateDrillPaths.remove(requestKey);
			let listenerIdentifiers = this.m_listenerIdentifiers.remove(requestKey);
			for (let index1 = 0; index1 < listenerIdentifiers.size(); index1++)
			{
				let listenerIdentifier = listenerIdentifiers.get(index1);
				let listener = listenerIdentifier.getFirstObject();
				let identifier = listenerIdentifier.getSecondObject();
				if (oFF.notNull(listener))
				{
					listener.onChoroplethDrillPathsLoaded(drillPathResult, drillPathResult.getData(), identifier);
				}
			}
		}
	}
};
oFF.QGeoManager.prototype.processResultSetForChoroplethHierarchies = function(extResult, resultSetContainer, syncType, systemName, shouldUseSynonym, customIdentifier)
{
	if (extResult.isValid())
	{
		let cursorResultSet = resultSetContainer.getCursorResultSet();
		let cursorRowsAxis = cursorResultSet.getCursorRowsAxis();
		let rsDimensions = cursorRowsAxis.getRsDimensions();
		let rsDimensionCount = rsDimensions.size();
		let errorMessage = null;
		if (rsDimensionCount !== oFF.QGeoConstants.CHOROPLETH_HIERARCHY_DIMENSIONS.size())
		{
			errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.FAILED_TO_READ_CHOROPLETH_HIERARCHIES, "Error reading choropleth hierarchies: the number of dimensions is not matched", null, false, null);
			this.handleErrorsForChoroplethHierarchies(null, errorMessage, systemName, syncType, customIdentifier);
			return;
		}
		for (let index = 0; index < rsDimensionCount; index++)
		{
			let rsDimension = rsDimensions.get(index);
			if (!oFF.XString.isEqual(rsDimension.getName(), oFF.QGeoConstants.CHOROPLETH_HIERARCHY_DIMENSIONS.get(index)))
			{
				errorMessage = oFF.XMessage.createErrorWithCode(oFF.OriginLayer.UTILITY, oFF.ErrorCodes.FAILED_TO_READ_CHOROPLETH_HIERARCHIES, "Error reading choropleth hierarchies: the dimension name is not matched", null, false, null);
				this.handleErrorsForChoroplethHierarchies(null, errorMessage, systemName, syncType, customIdentifier);
				return;
			}
		}
		let hierarchies = oFF.XHashMapByString.create();
		let hierarchy = null;
		let level = null;
		cursorRowsAxis.setTupleCursorBeforeStart();
		let tuplesCount = cursorRowsAxis.getTuplesCount();
		let tupleElements = cursorRowsAxis.getTupleElementsCount();
		for (let i = 0; i < tuplesCount; i++)
		{
			cursorRowsAxis.nextTuple();
			let elementNames = oFF.XList.create();
			for (let k = 0; k < tupleElements; k++)
			{
				cursorRowsAxis.nextTupleElement();
				while (cursorRowsAxis.hasNextFieldValue())
				{
					let fieldValue = cursorRowsAxis.nextFieldValue();
					elementNames.add(fieldValue.getValue().getStringRepresentation());
				}
			}
			if (oFF.isNull(hierarchy) || !oFF.XString.isEqual(hierarchy.getHierarchyId(), elementNames.get(0)))
			{
				hierarchy = oFF.QGeoChoroplethHierarchy.create(elementNames.get(0), elementNames.get(1));
				hierarchies.put(elementNames.get(0), hierarchy);
				level = null;
			}
			if (oFF.isNull(level) || !oFF.XString.isEqual(level.getLevelId(), elementNames.get(2)))
			{
				level = oFF.QGeoChoroplethHierarchyLevel.create(elementNames.get(2), elementNames.get(3));
				level.setLocation(elementNames.get(4));
				level.setObjectName(elementNames.get(5));
				level.setPackageName(elementNames.get(6));
				level.setSchemaName(elementNames.get(7));
				let isStandardLevel = oFF.XString.isEqual(level.getObjectName(), oFF.QGeoConstants.CHOROPLETH_DATASOURCE_OBJECTNAME) && oFF.XString.isEqual(level.getPackageName(), oFF.QGeoConstants.CHOROPLETH_DATASOURCE_PACKAGENAME) && oFF.XString.isEqual(level.getSchemaName(), oFF.QGeoConstants.CHOROPLETH_DATASOURCE_SCHEMANAME);
				if (!isStandardLevel && oFF.notNull(shouldUseSynonym) && shouldUseSynonym.getBoolean())
				{
					isStandardLevel = oFF.XString.isEqual(level.getObjectName(), oFF.QGeoConstants.CHOROPLETH_DATASOURCE_SYNONYM_OBJECTNAME) && oFF.XString.isEqual(level.getPackageName(), oFF.QGeoConstants.CHOROPLETH_DATASOURCE_SYNONYM_PACKAGENAME) && oFF.XString.isEqual(level.getSchemaName(), oFF.QGeoConstants.CHOROPLETH_DATASOURCE_SYNONYM_SCHEMANAME);
				}
				level.setIsCustom(!isStandardLevel);
				hierarchy.addLevel(level);
			}
			level.addColumn(oFF.QGeoColumn.create(elementNames.get(8), elementNames.get(9)));
		}
		let hierarchiesResult = oFF.ExtResult.create(hierarchies, null);
		this.m_choroplethHierarchies.put(systemName, hierarchiesResult);
		if (syncType !== oFF.SyncType.BLOCKING)
		{
			this.processChoroplethHiearachiesResult(customIdentifier);
		}
	}
	else
	{
		this.handleErrorsForChoroplethHierarchies(extResult, null, systemName, syncType, customIdentifier);
	}
};
oFF.QGeoManager.prototype.releaseObject = function()
{
	this.clearCache();
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QGeoManager.prototype.reset = function()
{
	this.clearCache();
	this.initialize();
};
oFF.QGeoManager.prototype.setupGeoManager = function(context)
{
	this.setupModelComponentWithName(context, null, "GeoManager");
	oFF.QGeoConstants.staticSetup();
	this.initialize();
};

oFF.QModelDimensionLinksManager = function() {};
oFF.QModelDimensionLinksManager.prototype = new oFF.QModelComponent();
oFF.QModelDimensionLinksManager.prototype._ff_c = "QModelDimensionLinksManager";

oFF.QModelDimensionLinksManager.create = function(context)
{
	let modelLinkManager = new oFF.QModelDimensionLinksManager();
	modelLinkManager.setupModelLinkManager(context);
	return modelLinkManager;
};
oFF.QModelDimensionLinksManager.prototype.m_dimensionLinksMap = null;
oFF.QModelDimensionLinksManager.prototype.addDimensionLinkFromDimensionParts = function(storageName, firstDimensionLinkPart, secondDimensionLinkPart, linkOnMatchingHierarchies)
{
	this.addDimensionLinkFromDimensionPartsExt(storageName, firstDimensionLinkPart, secondDimensionLinkPart, linkOnMatchingHierarchies, false);
};
oFF.QModelDimensionLinksManager.prototype.addDimensionLinkFromDimensionPartsExt = function(storageName, firstDimensionLinkPart, secondDimensionLinkPart, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy)
{
	let firstDatasetId = firstDimensionLinkPart.getQueryManagerKey();
	if (oFF.isNull(firstDatasetId))
	{
		throw oFF.XException.createIllegalArgumentException("firstDimensionLinkPart requires query manager key.");
	}
	let secondDatasetId = secondDimensionLinkPart.getQueryManagerKey();
	if (oFF.isNull(secondDatasetId))
	{
		throw oFF.XException.createIllegalArgumentException("secondDimensionLinkPart requires query manager key.");
	}
	let modelDimensionLinks = this.getModelDimensionLinksStorage(storageName, firstDatasetId, secondDatasetId);
	modelDimensionLinks.addNewLinkFromParts(firstDimensionLinkPart, secondDimensionLinkPart, linkOnMatchingHierarchies, treatFlatToFlatAsMatchingHierarchy);
	firstDimensionLinkPart.addSecondaryParent(modelDimensionLinks);
	secondDimensionLinkPart.addSecondaryParent(modelDimensionLinks);
};
oFF.QModelDimensionLinksManager.prototype.createBlendableQueryManager = function(storageName, primaryQueryManager, name)
{
	let keyRefStoreContext = oFF.QFactory.createKeyRefStoreContext(this, oFF.KeyRefConstants.MAIN_STORAGE);
	keyRefStoreContext.getKeyRefStorage().setSubKefRefStore(this.getOlapEnv().getClientQueryObjectManager().getKeyRefStorage());
	if (oFF.notNull(primaryQueryManager))
	{
		primaryQueryManager.setName(oFF.XStringUtils.concatenate2(primaryQueryManager.getName(), "_blendPrimary"));
	}
	let blendableQueryManager = oFF.BlendableQueryManager.create(keyRefStoreContext, name);
	blendableQueryManager.setClientQueryObjectStorageName(storageName);
	if (oFF.notNull(primaryQueryManager))
	{
		blendableQueryManager.setPrimaryQueryManager(primaryQueryManager);
		if (oFF.XStringUtils.isNullOrEmpty(primaryQueryManager.getClientQueryObjectStorageName()))
		{
			primaryQueryManager.setClientQueryObjectStorageName(storageName);
		}
	}
	return blendableQueryManager;
};
oFF.QModelDimensionLinksManager.prototype.getDimensionLinks = function(storageName)
{
	let modelDimensionLinksList = this.m_dimensionLinksMap.getByKey(storageName);
	if (oFF.isNull(modelDimensionLinksList))
	{
		modelDimensionLinksList = oFF.XList.create();
	}
	return modelDimensionLinksList;
};
oFF.QModelDimensionLinksManager.prototype.getDimensionLinksByDatasetId = function(storageName, datasetId, reorderMatchingLinksByFirstDatasetId)
{
	let dimensionLinksList = this.m_dimensionLinksMap.getByKey(storageName);
	let matchingLinks = oFF.XList.create();
	if (oFF.notNull(dimensionLinksList))
	{
		let dimensionLinksListIter = dimensionLinksList.getIterator();
		while (dimensionLinksListIter.hasNext())
		{
			let dimensionLinks = dimensionLinksListIter.next();
			if (oFF.XString.isEqual(datasetId, dimensionLinks.getFirstDatasetId()) || oFF.XString.isEqual(datasetId, dimensionLinks.getSecondDatasetId()))
			{
				let dimensionLinksIter = dimensionLinks.getIterator();
				while (dimensionLinksIter.hasNext())
				{
					let dimensionLink = dimensionLinksIter.next();
					if (oFF.XString.isEqual(datasetId, dimensionLink.getFirstPart().getQueryManagerKey()))
					{
						matchingLinks.add(dimensionLink);
					}
					else if (oFF.XString.isEqual(datasetId, dimensionLink.getSecondPart().getQueryManagerKey()))
					{
						if (reorderMatchingLinksByFirstDatasetId)
						{
							matchingLinks.add(oFF.QDimensionLink.createDimensionLinkFromParts(this.getContext(), null, dimensionLink.getSecondPart(), dimensionLink.getFirstPart(), dimensionLink.isLinkOnMatchingHierarchies(), dimensionLink.isTreatFlatToFlatAsMatchingHierarchy()));
						}
						else
						{
							matchingLinks.add(dimensionLink);
						}
					}
				}
			}
		}
	}
	return matchingLinks;
};
oFF.QModelDimensionLinksManager.prototype.getDimensionLinksByDatasetIds = function(storageName, firstDatasetId, secondDatasetId, reorderMatchLinksByFirstSecondDatasetId)
{
	let matchingLinks = oFF.XList.create();
	let modelDimensionLinks = oFF.ModelDimensionLinksManagerHelper.findModelDimensionLinksByDatasetIds(firstDatasetId, secondDatasetId, this.m_dimensionLinksMap.getByKey(storageName));
	if (oFF.notNull(modelDimensionLinks))
	{
		let modelDimensionLinksIter = modelDimensionLinks.getIterator();
		while (modelDimensionLinksIter.hasNext())
		{
			let dimensionLink = modelDimensionLinksIter.next();
			let dimensionLinkFirstDatasetId = dimensionLink.getFirstPart().getQueryManagerKey();
			let dimensionLinkSecondDatasetId = dimensionLink.getSecondPart().getQueryManagerKey();
			if (oFF.XString.isEqual(firstDatasetId, dimensionLinkFirstDatasetId) && oFF.XString.isEqual(secondDatasetId, dimensionLinkSecondDatasetId) || oFF.XString.isEqual(firstDatasetId, dimensionLinkSecondDatasetId) && oFF.XString.isEqual(secondDatasetId, dimensionLinkFirstDatasetId))
			{
				if (!reorderMatchLinksByFirstSecondDatasetId || oFF.XString.isEqual(firstDatasetId, dimensionLink.getFirstPart().getQueryManagerKey()))
				{
					matchingLinks.add(dimensionLink);
				}
				else
				{
					matchingLinks.add(oFF.QDimensionLink.createDimensionLinkFromParts(this.getContext(), null, dimensionLink.getSecondPart(), dimensionLink.getFirstPart(), dimensionLink.isLinkOnMatchingHierarchies(), dimensionLink.isTreatFlatToFlatAsMatchingHierarchy()));
				}
			}
		}
	}
	return matchingLinks;
};
oFF.QModelDimensionLinksManager.prototype.getModelDimensionLinksStorage = function(storageName, firstDatasetId, secondDatasetId)
{
	let modelDimensionLinksList = this.m_dimensionLinksMap.getByKey(storageName);
	if (oFF.isNull(modelDimensionLinksList))
	{
		modelDimensionLinksList = oFF.XList.create();
		this.m_dimensionLinksMap.put(storageName, modelDimensionLinksList);
	}
	let modelDimensionLinks = oFF.ModelDimensionLinksManagerHelper.findModelDimensionLinksByDatasetIds(firstDatasetId, secondDatasetId, modelDimensionLinksList);
	if (oFF.isNull(modelDimensionLinks))
	{
		modelDimensionLinks = oFF.QModelDimensionLinks.create(this, firstDatasetId, secondDatasetId);
		modelDimensionLinksList.add(modelDimensionLinks);
	}
	return modelDimensionLinks;
};
oFF.QModelDimensionLinksManager.prototype.releaseObject = function()
{
	this.m_dimensionLinksMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dimensionLinksMap);
};
oFF.QModelDimensionLinksManager.prototype.removeAllDimensionLinks = function(storageName)
{
	let dimensionLinksList = this.m_dimensionLinksMap.getByKey(storageName);
	if (oFF.notNull(dimensionLinksList))
	{
		let dimensionLinksListIter = dimensionLinksList.getIterator();
		while (dimensionLinksListIter.hasNext())
		{
			let dimensionLinks = dimensionLinksListIter.next();
			dimensionLinks.clear();
		}
	}
};
oFF.QModelDimensionLinksManager.prototype.removeDimensionLink = function(storageName, firstDimensionLinkPart, secondDimensionLinkPart)
{
	let firstDatasetId = firstDimensionLinkPart.getQueryManagerKey();
	if (oFF.isNull(firstDatasetId))
	{
		throw oFF.XException.createIllegalArgumentException("firstDimensionLinkPart requires query manager key.");
	}
	let secondDatasetId = secondDimensionLinkPart.getQueryManagerKey();
	if (oFF.isNull(secondDatasetId))
	{
		throw oFF.XException.createIllegalArgumentException("secondDimensionLinkPart requires query manager key.");
	}
	let modelDimensionLinksList = this.m_dimensionLinksMap.getByKey(storageName);
	if (oFF.notNull(modelDimensionLinksList))
	{
		let modelDimensionLinks = oFF.ModelDimensionLinksManagerHelper.findModelDimensionLinksByDatasetIds(firstDatasetId, secondDatasetId, modelDimensionLinksList);
		if (oFF.notNull(modelDimensionLinks))
		{
			modelDimensionLinks.removeLinkByParts(firstDimensionLinkPart, secondDimensionLinkPart);
		}
	}
};
oFF.QModelDimensionLinksManager.prototype.setupModelLinkManager = function(context)
{
	this.setupModelComponentWithName(context, null, "ModelLinkManager");
	this.m_dimensionLinksMap = oFF.XHashMapByString.create();
};

oFF.HierarchyCatalogManager = function() {};
oFF.HierarchyCatalogManager.prototype = new oFF.QOlapSyncAction();
oFF.HierarchyCatalogManager.prototype._ff_c = "HierarchyCatalogManager";

oFF.HierarchyCatalogManager.BW_DATE_FROM = "DateFrom";
oFF.HierarchyCatalogManager.BW_DATE_FROM_KEY = "DateFrom.KEY";
oFF.HierarchyCatalogManager.BW_DATE_TO_KEY = "DateTo.KEY";
oFF.HierarchyCatalogManager.BW_HIEID = "HieID";
oFF.HierarchyCatalogManager.BW_HIEID_KEY = "HieID.KEY";
oFF.HierarchyCatalogManager.BW_HIETYPE = "HieType";
oFF.HierarchyCatalogManager.BW_HIETYPE_KEY = "HieType.KEY";
oFF.HierarchyCatalogManager.BW_IS_REMOTE = "Is_Remote_Hier";
oFF.HierarchyCatalogManager.BW_IS_REMOTE_KEY = "Is_Remote_Hier.KEY";
oFF.HierarchyCatalogManager.BW_NAME_KEY = "Name.KEY";
oFF.HierarchyCatalogManager.BW_OBJVERS = "ObjVers";
oFF.HierarchyCatalogManager.BW_OBJVERS_KEY = "ObjVers.KEY";
oFF.HierarchyCatalogManager.BW_OWNER_KEY = "Owner.KEY";
oFF.HierarchyCatalogManager.BW_TEXT_LONG_TEXT = "Text.LONG_TEXT";
oFF.HierarchyCatalogManager.BW_TEXT_MEDIUM_TEXT = "Text.MEDIUM_TEXT";
oFF.HierarchyCatalogManager.BW_TEXT_SHORT_TEXT = "Text.SHORT_TEXT";
oFF.HierarchyCatalogManager.BW_TYPE_CUSTOM_HIERARCHY = "0";
oFF.HierarchyCatalogManager.BW_VERSION_DISPLAY_KEY = "Version.DISPLAY_KEY";
oFF.HierarchyCatalogManager.BW_VERSION_KEY = "Version.KEY";
oFF.HierarchyCatalogManager.BW_VERSION_LONG_TEXT = "Version.LONG_TEXT";
oFF.HierarchyCatalogManager.HIERARCHY_NAME = "hierarchyName";
oFF.HierarchyCatalogManager.OBJECT_VERSION = "objectVersion";
oFF.HierarchyCatalogManager.VERSION_NAME = "versionName";
oFF.HierarchyCatalogManager.create = function(queryManager, dataSource, dimensionName, dimensionQueryModel)
{
	let object = new oFF.HierarchyCatalogManager();
	object.setupCatalogManager(queryManager, dataSource, dimensionName, dimensionQueryModel);
	return object;
};
oFF.HierarchyCatalogManager.prototype.m_catalogResult = null;
oFF.HierarchyCatalogManager.prototype.m_dataSource = null;
oFF.HierarchyCatalogManager.prototype.m_dimensionName = null;
oFF.HierarchyCatalogManager.prototype.m_dimensionQueryModel = null;
oFF.HierarchyCatalogManager.prototype.m_enableFilterHierarchyDate = false;
oFF.HierarchyCatalogManager.prototype.m_filter = null;
oFF.HierarchyCatalogManager.prototype.m_filterHierarchyDate = null;
oFF.HierarchyCatalogManager.prototype.m_hierarchyNamesFilter = null;
oFF.HierarchyCatalogManager.prototype.m_includeCustomHierarchies = false;
oFF.HierarchyCatalogManager.prototype.m_operator = null;
oFF.HierarchyCatalogManager.prototype.m_variableHash = null;
oFF.HierarchyCatalogManager.prototype._addFilter = function(commands, dimName, filterValue, operator)
{
	commands.clearFiltersByDimensionName(dimName);
	if (oFF.notNull(operator))
	{
		commands.addSingleMemberFilterByDimensionName(dimName, filterValue, operator);
	}
};
oFF.HierarchyCatalogManager.prototype._setFilterInternal = function(key, value, operator)
{
	this.assertComparisonOperator(operator);
	this.m_filter.put(key, value);
	this.m_operator.put(key, operator);
	this.resetSyncState();
};
oFF.HierarchyCatalogManager.prototype.addCustomHierarchies = function(catalogResult, resultSet, dimensionName, datasourceName, customHierarchyRepo, hierarchyNameFilter)
{
	catalogResult.addAllItems(customHierarchyRepo._getCustomHierarchyCatalogItemsByDimensionName(resultSet.getQueryManager().getSystemName(), datasourceName, dimensionName, hierarchyNameFilter));
};
oFF.HierarchyCatalogManager.prototype.addDimensionAndField = function(commands, dimensionName, fieldName)
{
	commands.moveDimensionToRows(dimensionName);
	commands.addFieldToResultSet(dimensionName, fieldName);
};
oFF.HierarchyCatalogManager.prototype.addHierarchyNamesToFilter = function(commands)
{
	commands.clearFiltersByDimensionName("Name");
	if (oFF.notNull(this.m_hierarchyNamesFilter))
	{
		let itr = this.m_hierarchyNamesFilter.getIterator();
		while (itr.hasNext())
		{
			commands.addSingleMemberFilterByDimensionName("Name", itr.next(), oFF.ComparisonOperator.EQUAL);
		}
	}
};
oFF.HierarchyCatalogManager.prototype.assertComparisonOperator = function(comparisonOperator)
{
	if (oFF.notNull(comparisonOperator) && comparisonOperator !== oFF.ComparisonOperator.EQUAL && comparisonOperator !== oFF.ComparisonOperator.MATCH)
	{
		throw oFF.XException.createRuntimeException("illegal comparison operator");
	}
};
oFF.HierarchyCatalogManager.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onHierarchyCatalogResult(extResult, data, customIdentifier);
};
oFF.HierarchyCatalogManager.prototype.createVariableHash = function(variableManager)
{
	return oFF.XSha1.createSHA1(variableManager.serializeToString(oFF.QModelFormat.INA_DATA));
};
oFF.HierarchyCatalogManager.prototype.customHierarchiesIncluded = function()
{
	return this.m_includeCustomHierarchies;
};
oFF.HierarchyCatalogManager.prototype.getFieldIfPresent = function(commands, queryModel, dimensionName, fieldName)
{
	if (commands.containsResultSetField(dimensionName, fieldName))
	{
		return queryModel.getDimensionByName(dimensionName).getFieldByName(fieldName);
	}
	return null;
};
oFF.HierarchyCatalogManager.prototype.getFilterHierarchyDate = function()
{
	return this.m_filterHierarchyDate;
};
oFF.HierarchyCatalogManager.prototype.getFilterHierarchyName = function()
{
	return this.m_filter.getByKey(oFF.HierarchyCatalogManager.HIERARCHY_NAME);
};
oFF.HierarchyCatalogManager.prototype.getFilterHierarchyObjectVersion = function()
{
	return this.m_filter.getByKey(oFF.HierarchyCatalogManager.OBJECT_VERSION);
};
oFF.HierarchyCatalogManager.prototype.getFilterVersionName = function()
{
	return this.m_filter.getByKey(oFF.HierarchyCatalogManager.VERSION_NAME);
};
oFF.HierarchyCatalogManager.prototype.getHanaKeyField = function(queryModel, dimensionName)
{
	let dimension = queryModel.getDimensionByName(dimensionName);
	return oFF.notNull(dimension) ? dimension.getFieldByName(oFF.XStringUtils.concatenate2("Key", dimensionName)) : null;
};
oFF.HierarchyCatalogManager.prototype.getOperatorHierarchyName = function()
{
	return this.m_operator.getByKey(oFF.HierarchyCatalogManager.HIERARCHY_NAME);
};
oFF.HierarchyCatalogManager.prototype.getOperatorHierarchyObjectVersion = function()
{
	return this.m_operator.getByKey(oFF.HierarchyCatalogManager.OBJECT_VERSION);
};
oFF.HierarchyCatalogManager.prototype.getOperatorVersionName = function()
{
	return this.m_operator.getByKey(oFF.HierarchyCatalogManager.VERSION_NAME);
};
oFF.HierarchyCatalogManager.prototype.hasMatchingVariables = function(otherVariableManager)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager) && queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA))
	{
		if (oFF.isNull(otherVariableManager) || !otherVariableManager.hasVariables())
		{
			return oFF.isNull(this.m_variableHash);
		}
		return oFF.XString.isEqual(this.m_variableHash, this.createVariableHash(otherVariableManager));
	}
	return true;
};
oFF.HierarchyCatalogManager.prototype.isFilterHierarchyNameEnabled = function()
{
	return this.getOperatorHierarchyName() !== null;
};
oFF.HierarchyCatalogManager.prototype.isFilterHierarchyObjectVersionEnabled = function()
{
	return this.getOperatorHierarchyObjectVersion() !== null;
};
oFF.HierarchyCatalogManager.prototype.isFilterVersionNameEnabled = function()
{
	return this.getOperatorVersionName() !== null;
};
oFF.HierarchyCatalogManager.prototype.isHierarchyLevelsRequest = function()
{
	let queryManager = this.getQueryManager();
	return oFF.notNull(queryManager) && oFF.XString.isEqual(queryManager.getDataSource().getName(), "$$HierarchyLevels$$");
};
oFF.HierarchyCatalogManager.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.addAllMessages(extResult);
	if (extResult.isValid())
	{
		let classicResultSet = resultSetContainer.getClassicResultSet();
		let catalogResult = oFF.QFactory.createHierarchyCatalogResult();
		this.setupExt(catalogResult, classicResultSet, this.m_dimensionName);
		if (this.customHierarchiesIncluded())
		{
			let datasourceName = classicResultSet.getQueryManager().getSystemType().isTypeOf(oFF.SystemType.ABAP) ? null : this.m_dataSource.getName();
			this.addCustomHierarchies(catalogResult, classicResultSet, this.m_dimensionName, datasourceName, this.getOlapEnv().getCustomHierarchyRepository(), this.m_filter.getByKey(oFF.HierarchyCatalogManager.HIERARCHY_NAME));
		}
		this.m_catalogResult = catalogResult;
		this.setData(this.m_catalogResult);
	}
	this.endSync();
};
oFF.HierarchyCatalogManager.prototype.processBW = function(commands)
{
	this.addDimensionAndField(commands, "Name", oFF.HierarchyCatalogManager.BW_NAME_KEY);
	commands.moveDimensionToRows("Text");
	commands.addFieldToResultSet("Text", oFF.HierarchyCatalogManager.BW_TEXT_SHORT_TEXT);
	commands.addFieldToResultSet("Text", oFF.HierarchyCatalogManager.BW_TEXT_MEDIUM_TEXT);
	commands.addFieldToResultSet("Text", oFF.HierarchyCatalogManager.BW_TEXT_LONG_TEXT);
	commands.moveDimensionToRows("Version");
	commands.addFieldToResultSet("Version", oFF.HierarchyCatalogManager.BW_VERSION_KEY);
	commands.addFieldToResultSet("Version", oFF.HierarchyCatalogManager.BW_VERSION_LONG_TEXT);
	this.addDimensionAndField(commands, "DateTo", oFF.HierarchyCatalogManager.BW_DATE_TO_KEY);
	this.addDimensionAndField(commands, oFF.HierarchyCatalogManager.BW_DATE_FROM, oFF.HierarchyCatalogManager.BW_DATE_FROM_KEY);
	this.addDimensionAndField(commands, "Owner", oFF.HierarchyCatalogManager.BW_OWNER_KEY);
	this.addDimensionAndField(commands, oFF.HierarchyCatalogManager.BW_HIEID, oFF.HierarchyCatalogManager.BW_HIEID_KEY);
	this.addDimensionAndField(commands, oFF.HierarchyCatalogManager.BW_OBJVERS, oFF.HierarchyCatalogManager.BW_OBJVERS_KEY);
	this.addDimensionAndField(commands, oFF.HierarchyCatalogManager.BW_IS_REMOTE, oFF.HierarchyCatalogManager.BW_IS_REMOTE_KEY);
	this._addFilter(commands, oFF.HierarchyCatalogManager.BW_OBJVERS, this.getFilterHierarchyObjectVersion(), this.getOperatorHierarchyObjectVersion());
	if (oFF.notNull(this.m_filterHierarchyDate) && this.m_enableFilterHierarchyDate)
	{
		let hierarchyDate = this.m_filterHierarchyDate.toSAPFormat();
		this._addFilter(commands, oFF.HierarchyCatalogManager.BW_DATE_FROM, hierarchyDate, oFF.ComparisonOperator.LESS_EQUAL);
		this._addFilter(commands, "DateTo", hierarchyDate, oFF.ComparisonOperator.GREATER_EQUAL);
	}
};
oFF.HierarchyCatalogManager.prototype.processGetResult = function(syncType, listener, customIdentifier)
{
	return this.processSyncAction(syncType, listener, customIdentifier);
};
oFF.HierarchyCatalogManager.prototype.processHana = function(commands)
{
	let dataSource = this.m_dataSource;
	commands.addSimpleSingleMemberFilter("Type", dataSource.getType() === null ? null : dataSource.getType().getCamelCaseName());
	commands.addSimpleSingleMemberFilter("SchemaName", dataSource.getSchemaName());
	commands.addSimpleSingleMemberFilter("PackageName", dataSource.getPackageName());
	commands.addSimpleSingleMemberFilter("ObjectName", dataSource.getObjectName());
	commands.moveDimensionToRows("Dimension");
	commands.moveDimensionToRows("Name");
	commands.moveDimensionToRows("Version");
	commands.moveDimensionToRows("DateTo");
	if (this.isHierarchyLevelsRequest())
	{
		commands.moveDimensionToRows("$$HierarchyLevel$$");
		commands.moveDimensionToRows("$$HierarchyLevelName$$");
		commands.moveDimensionToRows("$$HierarchyLevelUniqueName$$");
		commands.moveDimensionToRows("$$HierarchyLevelCaption$$");
		commands.moveDimensionToRows("$$HierarchyLevelType$$");
	}
	else
	{
		commands.moveDimensionToRows("$$HierarchyName$$");
		commands.moveDimensionToRows("Description");
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_dimensionName))
	{
		commands.addSimpleSingleMemberFilter("Dimension", this.m_dimensionName);
	}
	let queryModel = this.getQueryModel();
	if (oFF.notNull(this.m_dimensionQueryModel) && this.m_dimensionQueryModel.hasVariables() && oFF.notNull(queryModel))
	{
		let variableManager = queryModel.getVariableManager();
		oFF.XCollectionUtils.forEach(this.m_dimensionQueryModel.getVariables(), (variable) => {
			let copiedVariable = oFF.QFactory.createVariable(variableManager.getContext(), variableManager, variable);
			copiedVariable.setCustomVariable(variable.isCustomVariable());
			copiedVariable.setExternalRepresentation(variable);
			variableManager.addVariable(copiedVariable);
		});
		this.m_variableHash = this.createVariableHash(variableManager);
	}
};
oFF.HierarchyCatalogManager.prototype.processSynchronization = function(syncType)
{
	let queryManager = this.getQueryManager();
	let queryModel = queryManager.getQueryModel();
	let commands = queryModel.getConvenienceCommands();
	commands.resetToDefault();
	if (queryManager.getSystemType().isTypeOf(oFF.SystemType.HANA))
	{
		this.processHana(commands);
	}
	else
	{
		this.processBW(commands);
	}
	if (oFF.XCollectionUtils.hasElements(this.m_hierarchyNamesFilter))
	{
		this.addHierarchyNamesToFilter(commands);
	}
	else
	{
		this._addFilter(commands, "Name", this.getFilterHierarchyName(), this.getOperatorHierarchyName());
	}
	this._addFilter(commands, "Version", this.getFilterVersionName(), this.getOperatorVersionName());
	if (oFF.notNull(this.m_dimensionQueryModel))
	{
		queryManager.getClientInfo().copyFromContext(this.m_dimensionQueryModel);
	}
	queryManager.processQueryExecution(syncType, this, null);
	return true;
};
oFF.HierarchyCatalogManager.prototype.releaseObjectInternal = function()
{
	this.m_dataSource = null;
	this.m_dimensionName = null;
	this.m_dimensionQueryModel = null;
	this.m_catalogResult = oFF.XObjectExt.release(this.m_catalogResult);
	this.m_filterHierarchyDate = oFF.XObjectExt.release(this.m_filterHierarchyDate);
	this.m_variableHash = null;
	this.m_filter = oFF.XObjectExt.release(this.m_filter);
	this.m_operator = oFF.XObjectExt.release(this.m_operator);
	this.m_hierarchyNamesFilter = oFF.XObjectExt.release(this.m_hierarchyNamesFilter);
	oFF.XObjectExt.release(this.getQueryManager());
};
oFF.HierarchyCatalogManager.prototype.setFilterHierarchyDate = function(date, enable)
{
	if (oFF.isNull(date))
	{
		this.m_filterHierarchyDate = oFF.XObjectExt.release(this.m_filterHierarchyDate);
	}
	else
	{
		if (oFF.isNull(this.m_filterHierarchyDate))
		{
			this.m_filterHierarchyDate = oFF.XDate.createDateWithValues(date.getYear(), date.getMonthOfYear(), date.getDayOfMonth());
		}
		else
		{
			this.m_filterHierarchyDate.resetValue(date);
		}
	}
	this.resetSyncState();
	this.m_enableFilterHierarchyDate = enable;
};
oFF.HierarchyCatalogManager.prototype.setFilterHierarchyName = function(hierarchyName, enable)
{
	if (enable)
	{
		this.setFilterHierarchyNameWithOperator(hierarchyName, oFF.ComparisonOperator.EQUAL);
	}
	else
	{
		this.setFilterHierarchyNameWithOperator(hierarchyName, null);
	}
	this.m_hierarchyNamesFilter.clear();
};
oFF.HierarchyCatalogManager.prototype.setFilterHierarchyNameWithOperator = function(hierarchyName, comparisonOperator)
{
	this._setFilterInternal(oFF.HierarchyCatalogManager.HIERARCHY_NAME, hierarchyName, comparisonOperator);
};
oFF.HierarchyCatalogManager.prototype.setFilterHierarchyNames = function(loadedHierarchies)
{
	if (oFF.notNull(loadedHierarchies))
	{
		this.setFilterHierarchyName(null, false);
		oFF.XCollectionUtils.forEach(loadedHierarchies.getObjects(), (hierarchyItem) => {
			this.m_hierarchyNamesFilter.add(hierarchyItem.getHierarchyUniqueName());
		});
		this.m_operator.put(oFF.HierarchyCatalogManager.HIERARCHY_NAME, oFF.ComparisonOperator.EQUAL);
		this.resetSyncState();
	}
};
oFF.HierarchyCatalogManager.prototype.setFilterHierarchyObjectVersion = function(objectVersion, enable)
{
	if (enable)
	{
		this.setFilterHierarchyObjectVersionWithOperator(objectVersion, oFF.ComparisonOperator.EQUAL);
	}
	else
	{
		this.setFilterHierarchyObjectVersionWithOperator(objectVersion, null);
	}
};
oFF.HierarchyCatalogManager.prototype.setFilterHierarchyObjectVersionWithOperator = function(objectVersion, comparisonOperator)
{
	this._setFilterInternal(oFF.HierarchyCatalogManager.OBJECT_VERSION, objectVersion, comparisonOperator);
};
oFF.HierarchyCatalogManager.prototype.setFilterVersionName = function(versionName, enable)
{
	if (enable)
	{
		this.setFilterVersionNameWithOperator(versionName, oFF.ComparisonOperator.EQUAL);
	}
	else
	{
		this.setFilterVersionNameWithOperator(versionName, null);
	}
};
oFF.HierarchyCatalogManager.prototype.setFilterVersionNameWithOperator = function(versionName, comparisonOperator)
{
	this._setFilterInternal(oFF.HierarchyCatalogManager.VERSION_NAME, versionName, comparisonOperator);
};
oFF.HierarchyCatalogManager.prototype.setIncludeCustomHierarchies = function(includeCustomHierarchies)
{
	this.m_includeCustomHierarchies = includeCustomHierarchies;
	this.resetSyncState();
};
oFF.HierarchyCatalogManager.prototype.setupBW = function(catalogResult, resultSet, dimensionName)
{
	let queryModel = resultSet.getQueryModel();
	let commands = queryModel.getConvenienceCommands();
	let hierarchyNameField = queryModel.getDimensionByName("Name").getFieldByName(oFF.HierarchyCatalogManager.BW_NAME_KEY);
	let hierarchyShortTextField = this.getFieldIfPresent(commands, queryModel, "Text", oFF.HierarchyCatalogManager.BW_TEXT_SHORT_TEXT);
	let hierarchyMediumTextField = this.getFieldIfPresent(commands, queryModel, "Text", oFF.HierarchyCatalogManager.BW_TEXT_MEDIUM_TEXT);
	let hierarchyLongTextField = this.getFieldIfPresent(commands, queryModel, "Text", oFF.HierarchyCatalogManager.BW_TEXT_LONG_TEXT);
	let versionDimension = queryModel.getDimensionByName("Version");
	let versionDisplayKeyField = versionDimension.getFieldByName(oFF.HierarchyCatalogManager.BW_VERSION_DISPLAY_KEY);
	let versionNameField = versionDimension.getFieldByName(oFF.HierarchyCatalogManager.BW_VERSION_KEY);
	let versionLongTextField = versionDimension.getFieldByName(oFF.HierarchyCatalogManager.BW_VERSION_LONG_TEXT);
	let dataToField = queryModel.getDimensionByName("DateTo").getFieldByName(oFF.HierarchyCatalogManager.BW_DATE_TO_KEY);
	let dataFromField = this.getFieldIfPresent(commands, queryModel, oFF.HierarchyCatalogManager.BW_DATE_FROM, oFF.HierarchyCatalogManager.BW_DATE_FROM_KEY);
	let ownerField = this.getFieldIfPresent(commands, queryModel, "Owner", oFF.HierarchyCatalogManager.BW_OWNER_KEY);
	let idField = this.getFieldIfPresent(commands, queryModel, oFF.HierarchyCatalogManager.BW_HIEID, oFF.HierarchyCatalogManager.BW_HIEID_KEY);
	let typeField = this.getFieldIfPresent(commands, queryModel, oFF.HierarchyCatalogManager.BW_HIETYPE, oFF.HierarchyCatalogManager.BW_HIETYPE_KEY);
	let objVersField = this.getFieldIfPresent(commands, queryModel, oFF.HierarchyCatalogManager.BW_OBJVERS, oFF.HierarchyCatalogManager.BW_OBJVERS_KEY);
	let isRemoteField = this.getFieldIfPresent(commands, queryModel, oFF.HierarchyCatalogManager.BW_IS_REMOTE, oFF.HierarchyCatalogManager.BW_IS_REMOTE_KEY);
	let connection = resultSet.getQueryManager().getConnection();
	let customHierarchySessionData = oFF.notNull(connection) ? connection.getCustomObject(oFF.CustomHierarchySessionData.CUSTOM_HIERARCHY_SESSION_DATA) : null;
	let rowsAxis = resultSet.getRowsAxis();
	let tuplesCount = rowsAxis.getTuplesCount();
	for (let i = 0; i < tuplesCount; i++)
	{
		let tuple = rowsAxis.getTupleAt(i);
		let type = oFF.notNull(typeField) ? tuple.getStringByField(typeField) : null;
		let hierarchyName = oFF.notNull(hierarchyNameField) ? tuple.getStringByField(hierarchyNameField) : null;
		if (oFF.XString.isEqual(type, oFF.HierarchyCatalogManager.BW_TYPE_CUSTOM_HIERARCHY) && oFF.notNull(customHierarchySessionData) && customHierarchySessionData.getHierarchyDefinitionByName(hierarchyName) !== null)
		{
			continue;
		}
		let item = oFF.HierarchyCatalogItem.createCatalogItem();
		item.setDimensionName(dimensionName);
		if (oFF.notNull(hierarchyName))
		{
			item.setHierarchyName(hierarchyName);
		}
		if (oFF.notNull(hierarchyShortTextField))
		{
			item.setHierarchyShortText(tuple.getStringByField(hierarchyShortTextField));
		}
		if (oFF.notNull(hierarchyMediumTextField))
		{
			item.setHierarchyMediumText(tuple.getStringByField(hierarchyMediumTextField));
		}
		if (oFF.notNull(hierarchyLongTextField))
		{
			item.setHierarchyLongText(tuple.getStringByField(hierarchyLongTextField));
		}
		if (oFF.notNull(versionNameField))
		{
			item.setVersionName(tuple.getStringByField(versionNameField));
		}
		if (oFF.notNull(versionDisplayKeyField))
		{
			item.setVersionDisplayKey(tuple.getStringByField(versionDisplayKeyField));
		}
		if (oFF.notNull(versionLongTextField))
		{
			item.setVersionDescription(tuple.getStringByField(versionLongTextField));
		}
		if (oFF.notNull(dataToField))
		{
			let dateToValue = tuple.getStringByField(dataToField);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToValue))
			{
				item.setDateTo(oFF.XDate.createDateFromSAPFormat(dateToValue));
			}
		}
		if (oFF.notNull(dataFromField))
		{
			let dateFromValue = tuple.getStringByField(dataFromField);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateFromValue))
			{
				item.setDateFrom(oFF.XDate.createDateFromSAPFormat(dateFromValue));
			}
		}
		if (oFF.notNull(ownerField))
		{
			item.setOwner(tuple.getStringByField(ownerField));
		}
		if (oFF.notNull(idField))
		{
			item.setHierId(tuple.getStringByField(idField));
		}
		if (oFF.notNull(type))
		{
			item.setHierType(type);
		}
		if (oFF.notNull(objVersField))
		{
			item.setObjectVersion(tuple.getStringByField(objVersField));
		}
		if (oFF.notNull(isRemoteField))
		{
			let isRemote = false;
			if (isRemoteField.getValueType() === oFF.XValueType.STRING)
			{
				if (oFF.XString.isEqual(tuple.getStringByField(isRemoteField), "X"))
				{
					isRemote = true;
				}
			}
			else if (isRemoteField.getValueType() === oFF.XValueType.BOOLEAN)
			{
				isRemote = tuple.getBooleanByField(isRemoteField);
			}
			item.setIsRemote(isRemote);
		}
		catalogResult.addItem(item);
	}
};
oFF.HierarchyCatalogManager.prototype.setupCatalogManager = function(queryManager, dataSource, dimensionName, dimensionQueryModel)
{
	this.setupAction(null, null, null, queryManager);
	this.m_dataSource = dataSource;
	this.m_dimensionName = dimensionName;
	this.m_dimensionQueryModel = dimensionQueryModel;
	this.m_filter = oFF.XHashMapByString.create();
	this.m_hierarchyNamesFilter = oFF.XHashSetOfString.create();
	this.m_operator = oFF.XHashMapByString.create();
};
oFF.HierarchyCatalogManager.prototype.setupExt = function(catalogResult, resultSet, dimensionName)
{
	if (resultSet.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.HANA))
	{
		if (this.isHierarchyLevelsRequest())
		{
			this.setupHanaHierarchyLevels(catalogResult, resultSet);
		}
		else
		{
			this.setupHana(catalogResult, resultSet);
		}
	}
	else
	{
		this.setupBW(catalogResult, resultSet, dimensionName);
	}
};
oFF.HierarchyCatalogManager.prototype.setupHana = function(catalogResult, resultSet)
{
	let queryModel = resultSet.getQueryModel();
	let dimensionNameField = this.getHanaKeyField(queryModel, "Dimension");
	let hierarchyNameField = this.getHanaKeyField(queryModel, "Name");
	let hierarchyUniqueNameField = this.getHanaKeyField(queryModel, "$$HierarchyName$$");
	let hierarchyDescriptionField = this.getHanaKeyField(queryModel, "Description");
	let versionNameField = this.getHanaKeyField(queryModel, "Version");
	let dateToField = this.getHanaKeyField(queryModel, "DateTo");
	let rowsAxis = resultSet.getRowsAxis();
	let tuplesCount = rowsAxis.getTuplesCount();
	for (let i = 0; i < tuplesCount; i++)
	{
		let tuple = rowsAxis.getTupleAt(i);
		let item = oFF.HierarchyCatalogItem.createCatalogItem();
		if (oFF.notNull(dimensionNameField))
		{
			item.setDimensionName(tuple.getStringByField(dimensionNameField));
		}
		if (oFF.notNull(hierarchyNameField))
		{
			item.setHierarchyName(tuple.getStringByField(hierarchyNameField));
		}
		if (oFF.notNull(hierarchyUniqueNameField))
		{
			item.setHierarchyUniqueName(tuple.getStringByField(hierarchyUniqueNameField));
		}
		if (oFF.notNull(hierarchyDescriptionField))
		{
			item.setHierarchyLongText(tuple.getStringByField(hierarchyDescriptionField));
		}
		if (oFF.notNull(versionNameField))
		{
			item.setVersionName(tuple.getStringByField(versionNameField));
		}
		if (oFF.notNull(dateToField))
		{
			let dateToFieldString = tuple.getStringByField(dateToField);
			if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToFieldString))
			{
				item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToFieldString));
			}
		}
		catalogResult.addItem(item);
	}
};
oFF.HierarchyCatalogManager.prototype.setupHanaHierarchyLevels = function(catalogResult, resultSet)
{
	let queryModel = resultSet.getQueryModel();
	let hierarchyNameField = this.getHanaKeyField(queryModel, "Name");
	let versionNameField = this.getHanaKeyField(queryModel, "Version");
	let dateToField = this.getHanaKeyField(queryModel, "DateTo");
	let dimensionNameField = this.getHanaKeyField(queryModel, "Dimension");
	let levelField = this.getHanaKeyField(queryModel, "$$HierarchyLevel$$");
	let levelNameField = this.getHanaKeyField(queryModel, "$$HierarchyLevelName$$");
	let levelUniqueNameField = this.getHanaKeyField(queryModel, "$$HierarchyLevelUniqueName$$");
	let levelCaptionField = this.getHanaKeyField(queryModel, "$$HierarchyLevelCaption$$");
	let levelTypeField = this.getHanaKeyField(queryModel, "$$HierarchyLevelType$$");
	let rowsAxis = resultSet.getRowsAxis();
	let tuplesCount = rowsAxis.getTuplesCount();
	for (let i = 0; i < tuplesCount; i++)
	{
		let tuple = rowsAxis.getTupleAt(i);
		let hierarchyName = oFF.notNull(hierarchyNameField) ? tuple.getStringByField(hierarchyNameField) : null;
		if (oFF.XStringUtils.isNullOrEmpty(hierarchyName))
		{
			continue;
		}
		let levels;
		let item = oFF.XCollectionUtils.findFirst(catalogResult.getObjects(), (catalogItem) => {
			return oFF.XString.isEqual(catalogItem.getHierarchyUniqueName(), hierarchyName);
		});
		if (oFF.isNull(item))
		{
			levels = oFF.XList.create();
			item = oFF.HierarchyCatalogItem.createCatalogItem();
			item.setHierarchyLevels(levels);
			item.setHierarchyName(hierarchyName);
			item.setHierarchyUniqueName(hierarchyName);
			item.setSupportsHierarchyLevels(true);
			if (oFF.notNull(dimensionNameField))
			{
				item.setDimensionName(tuple.getStringByField(dimensionNameField));
			}
			if (oFF.notNull(versionNameField))
			{
				item.setVersionName(tuple.getStringByField(versionNameField));
			}
			if (oFF.notNull(dateToField))
			{
				let dateToFieldString = tuple.getStringByField(dateToField);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(dateToFieldString))
				{
					item.setDateTo(oFF.XDate.createDateFromIsoFormat(dateToFieldString));
				}
			}
			catalogResult.addItem(item);
		}
		else
		{
			levels = item.getHierarchyLevels();
		}
		let level = oFF.HierarchyCatalogLevel.createCatalogLevel();
		levels.add(level);
		if (oFF.notNull(levelField))
		{
			let levelValue = oFF.XInteger.convertFromStringWithDefault(tuple.getStringByField(levelField), -1);
			if (levelValue > -1)
			{
				level.setLevel(levelValue);
			}
		}
		if (oFF.notNull(levelTypeField))
		{
			let levelTypeValue = oFF.XInteger.convertFromStringWithDefault(tuple.getStringByField(levelTypeField), -1);
			if (levelTypeValue > -1)
			{
				level.setLevelType(oFF.QInAConverter.lookupHierarchyLevelType(levelTypeValue));
			}
		}
		if (oFF.notNull(levelNameField))
		{
			level.setLevelName(tuple.getStringByField(levelNameField));
		}
		if (oFF.notNull(levelUniqueNameField))
		{
			level.setLevelUniqueName(tuple.getStringByField(levelUniqueNameField));
		}
		if (oFF.notNull(levelCaptionField))
		{
			level.setLevelDescription(tuple.getStringByField(levelCaptionField));
		}
	}
};

oFF.QmShutdownAction = function() {};
oFF.QmShutdownAction.prototype = new oFF.QOlapSyncAction();
oFF.QmShutdownAction.prototype._ff_c = "QmShutdownAction";

oFF.QmShutdownAction.createAndRun = function(syncType, listener, customIdentifier, parent)
{
	let newObject = new oFF.QmShutdownAction();
	newObject.setupActionAndRun(syncType, listener, customIdentifier, parent);
	return newObject;
};
oFF.QmShutdownAction.prototype.m_providerShutdownAction = null;
oFF.QmShutdownAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onQueryManagerRelease(extResult, data, customIdentifier);
};
oFF.QmShutdownAction.prototype.cancelSynchronization = function()
{
	oFF.QOlapSyncAction.prototype.cancelSynchronization.call( this );
	this.m_providerShutdownAction.cancelSynchronization();
};
oFF.QmShutdownAction.prototype.onProviderShutdown = function(extResult, queryProvider, customIdentifier)
{
	this.addAllMessages(extResult);
	let parent = this.getActionContext();
	if (oFF.notNull(parent))
	{
		parent.setLifeCycleState(oFF.LifeCycleState.TERMINATED);
	}
	this.setData(parent);
	this.endSync();
};
oFF.QmShutdownAction.prototype.processSynchronization = function(syncType)
{
	let parent = this.getActionContext();
	if (oFF.notNull(parent))
	{
		if (parent.getLifeCycleState() !== oFF.LifeCycleState.ACTIVE)
		{
			this.addError(oFF.ErrorCodes.INVALID_STATE, "Query Manager cannot be shutdown, it is not in active state");
			return false;
		}
		parent.setLifeCycleState(oFF.LifeCycleState.SHUTTING_DOWN);
		this.m_providerShutdownAction = parent.processProviderShutdown(syncType, this, null);
		return true;
	}
	return false;
};
oFF.QmShutdownAction.prototype.releaseObjectInternal = function()
{
	this.m_providerShutdownAction = null;
	oFF.QOlapSyncAction.prototype.releaseObjectInternal.call( this );
};

oFF.QueryManager = function() {};
oFF.QueryManager.prototype = new oFF.DfService();
oFF.QueryManager.prototype._ff_c = "QueryManager";

oFF.QueryManager.prototype.m_activeContainer = null;
oFF.QueryManager.prototype.m_beforeQueryExecutionListener = null;
oFF.QueryManager.prototype.m_cacheHintsEnabled = false;
oFF.QueryManager.prototype.m_clientInfo = null;
oFF.QueryManager.prototype.m_clientQueryObjectStorageName = null;
oFF.QueryManager.prototype.m_convenienceCmds = null;
oFF.QueryManager.prototype.m_dataSource = null;
oFF.QueryManager.prototype.m_dimensionsRequestedFromClient = null;
oFF.QueryManager.prototype.m_dimensionsToClone = null;
oFF.QueryManager.prototype.m_directVariableTransferConsumer = false;
oFF.QueryManager.prototype.m_disableExitVariables = false;
oFF.QueryManager.prototype.m_documentsService = null;
oFF.QueryManager.prototype.m_enableHierarchyToUDHConversion = false;
oFF.QueryManager.prototype.m_hasPreparedAfterVariables = false;
oFF.QueryManager.prototype.m_includePerformanceData = null;
oFF.QueryManager.prototype.m_isMetadataCached = false;
oFF.QueryManager.prototype.m_keyRefSerializationEnabled = false;
oFF.QueryManager.prototype.m_lifeCycleState = null;
oFF.QueryManager.prototype.m_lovManager = null;
oFF.QueryManager.prototype.m_metadataModel = null;
oFF.QueryManager.prototype.m_modCounterState = null;
oFF.QueryManager.prototype.m_mode = null;
oFF.QueryManager.prototype.m_myNameAsMicroCube = null;
oFF.QueryManager.prototype.m_name = null;
oFF.QueryManager.prototype.m_planningManager = null;
oFF.QueryManager.prototype.m_preQueryExecutor = null;
oFF.QueryManager.prototype.m_preQueryName = null;
oFF.QueryManager.prototype.m_processorStateListeners = null;
oFF.QueryManager.prototype.m_queryExecutedListener = null;
oFF.QueryManager.prototype.m_queryModel = null;
oFF.QueryManager.prototype.m_resultsetStateId = 0;
oFF.QueryManager.prototype.m_resultsetStateIdUsed = false;
oFF.QueryManager.prototype.m_systemDescription = null;
oFF.QueryManager.prototype.m_validateLocalFormulaMembers = false;
oFF.QueryManager.prototype.m_variableProcessorPreviousState = null;
oFF.QueryManager.prototype.m_variableProcessorState = null;
oFF.QueryManager.prototype._createPlanningManager = function()
{
	return this.getPlanningManager() !== null;
};
oFF.QueryManager.prototype.activateVariableVariant = oFF.noSupport;
oFF.QueryManager.prototype.addInputReadinessFilterState = function(flag, parameter)
{
	this.getQueryModel().addInputReadinessFilterState(flag, parameter);
};
oFF.QueryManager.prototype.addNewInputEnablementRule = function(mode, reason)
{
	return this.getPlanningManager().addNewInputEnablementRule(mode, reason);
};
oFF.QueryManager.prototype.addPlanningVersionSettings = function(sequenceSettings)
{
	return this.getPlanningManager().addPlanningVersionSettings(sequenceSettings);
};
oFF.QueryManager.prototype.addVariableVariant = oFF.noSupport;
oFF.QueryManager.prototype.applyRSFeatureRequest = oFF.noSupport;
oFF.QueryManager.prototype.applyState = oFF.noSupport;
oFF.QueryManager.prototype.applyValueHelpCapabilities = oFF.noSupport;
oFF.QueryManager.prototype.applyingStateOnQueryManager = oFF.noSupport;
oFF.QueryManager.prototype.assertLifeCycleActive = function()
{
	if (this.m_lifeCycleState !== oFF.LifeCycleState.ACTIVE && this.m_lifeCycleState !== oFF.LifeCycleState.STARTING_UP)
	{
		throw oFF.XException.createIllegalStateException("Query manager is not active");
	}
};
oFF.QueryManager.prototype.attachBeforeQueryExecutionListener = function(listener, customIdentifier)
{
	this.m_beforeQueryExecutionListener.put(listener, oFF.XPair.create(listener, customIdentifier));
};
oFF.QueryManager.prototype.attachQueryExecutedListener = function(listener, customIdentifier)
{
	this.m_queryExecutedListener.put(listener, oFF.XPair.create(listener, customIdentifier));
};
oFF.QueryManager.prototype.callOnBeforeQueryExecutionListeners = function(customIdentifier)
{
	if (oFF.XCollectionUtils.hasElements(this.m_beforeQueryExecutionListener))
	{
		let listenerPairs = this.m_beforeQueryExecutionListener.getValuesAsReadOnlyList().getIterator();
		while (listenerPairs.hasNext())
		{
			let pair = listenerPairs.next();
			pair.getFirstObject().onBeforeQueryExecuted(oFF.notNull(customIdentifier) ? customIdentifier : pair.getSecondObject());
		}
	}
};
oFF.QueryManager.prototype.canHaveExtensions = function()
{
	return false;
};
oFF.QueryManager.prototype.canMaterializeCompleteObject = function()
{
	return false;
};
oFF.QueryManager.prototype.cancelReInitVariables = function(syncType, listener, customIdentifier)
{
	return this.getVariableProcessorProvider().processVariableCancel(syncType, listener, customIdentifier);
};
oFF.QueryManager.prototype.checkRootNodeFetching = function()
{
	if (this.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		let leafQueryModels = oFF.BlendingUtils.getLeafQueryModels(this);
		oFF.XCollectionUtils.forEach(leafQueryModels, (leafQueryModel) => {
			let leafDrillManager = leafQueryModel.getDrillManager();
			if (oFF.notNull(leafDrillManager))
			{
				leafDrillManager.checkRootNodeFetching();
			}
		});
	}
	else
	{
		let drillManager = this.getDrillManager();
		if (oFF.notNull(drillManager))
		{
			drillManager.checkRootNodeFetching();
		}
	}
};
oFF.QueryManager.prototype.checkVariables = function(syncType, listener, customIdentifier)
{
	return this.getVariableProcessorProvider().processCheckVariables(syncType, listener, customIdentifier);
};
oFF.QueryManager.prototype.cleanPersistencySettings = function()
{
	this.setResultSetPersistenceIdentifier(null);
	this.setResultSetPersistanceTargetSchema(null);
	this.setResultSetPersistanceTargetTable(null);
	this.getActiveResultSetContainerBase().setSerializedData(null, null);
};
oFF.QueryManager.prototype.clearClientInfo = function()
{
	this.getClientInfo().clearClientInfo();
};
oFF.QueryManager.prototype.clearExternalVariablesRepresentations = function()
{
	this.assertLifeCycleActive();
	this.m_queryModel.clearExternalVariablesRepresentations();
};
oFF.QueryManager.prototype.clearInputEnablementRules = function()
{
	this.getPlanningManager().clearInputEnablementRules();
};
oFF.QueryManager.prototype.clearInputReadinessFilter = function()
{
	this.getQueryModel().clearInputReadinessFilter();
};
oFF.QueryManager.prototype.clearVariableVariants = oFF.noSupport;
oFF.QueryManager.prototype.clearVersionAliases = function()
{
	this.getPlanningManager().clearVersionAliases();
};
oFF.QueryManager.prototype.cloneExt = function(flags)
{
	let cloneMode = oFF.QueryCloneMode.findInFlags(flags, oFF.QueryCloneMode.CURRENT_STATE);
	return this.cloneQueryManagerExt(cloneMode);
};
oFF.QueryManager.prototype.cloneOlapComponent = function(context, parent)
{
	return this.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
};
oFF.QueryManager.prototype.cloneQueryManager = function()
{
	return this.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
};
oFF.QueryManager.prototype.cloneQueryManagerBase = function(cloneMode)
{
	this.assertLifeCycleActive();
	let queryMgr = this.newObject();
	queryMgr.setupClone(this, cloneMode, null);
	return queryMgr;
};
oFF.QueryManager.prototype.cloneQueryManagerExt = function(cloneMode)
{
	let queryManagerClone;
	if (this.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		let serviceConfig = this.getServiceConfig();
		let blendingDefinition = serviceConfig.getBlendingDefinition();
		let cloneBlendingDefinition = blendingDefinition.clone();
		let blendingServiceConfig = oFF.QueryServiceConfig.createWithBlendingDefinition(this.getApplication(), cloneBlendingDefinition);
		let extBlendingManager = blendingServiceConfig.processQueryManagerCreation(oFF.SyncType.BLOCKING, null, null);
		oFF.MessageUtil.checkNoError(extBlendingManager);
		queryManagerClone = extBlendingManager.getData();
		let queryModelClone = queryManagerClone.getQueryModel();
		queryModelClone.getDrillManager().setValidateContextFreeNavigations(this.m_queryModel.getDrillManager().isValidatingContextFreeNavigations());
		let originalModel = this.m_queryModel.serializeToString(oFF.QModelFormat.INA_REPOSITORY);
		queryModelClone.stopEventing();
		let deserializeExt = queryModelClone.deserializeExt(oFF.QModelFormat.INA_REPOSITORY, originalModel);
		queryModelClone.resumeEventing();
		let dimensions = this.m_queryModel.getDimensions();
		if (oFF.notNull(dimensions))
		{
			let dimensionsSize = dimensions.size();
			for (let dimensionIndex = 0; dimensionIndex < dimensionsSize; dimensionIndex++)
			{
				let dimension = dimensions.get(dimensionIndex);
				if (oFF.isNull(dimension))
				{
					continue;
				}
				let cloneDimension = queryModelClone.getDimensionByNameFromExistingMetadata(dimension.getName());
				if (oFF.isNull(cloneDimension))
				{
					continue;
				}
				cloneDimension.reOrderStructureMembers(dimension.getOrderedStructureMemberNames());
			}
		}
		queryModelClone.getDrillManager().copyRootNodesFrom(this.m_queryModel.getDrillManager());
		oFF.MessageUtil.checkNoError(deserializeExt);
		if (cloneMode === oFF.QueryCloneMode.BASE_STATE)
		{
			queryManagerClone.getConvenienceCommands().resetToDefault();
		}
	}
	else
	{
		queryManagerClone = this.cloneQueryManagerBase(cloneMode);
	}
	return queryManagerClone;
};
oFF.QueryManager.prototype.cloneQueryManagerOptimized = function(neededDimensions)
{
	let queryModel = this.getQueryModelBase();
	let usedDimensions = oFF.XHashSetOfString.create();
	let dimensionsRequestedFromClient = oFF.XHashSetOfString.create();
	dimensionsRequestedFromClient.addAll(neededDimensions);
	dimensionsRequestedFromClient.add(queryModel.getMeasureDimension().getName());
	this.setDimensionsRequestedFromClient(dimensionsRequestedFromClient);
	usedDimensions.addAll(neededDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByVariables(queryModel, usedDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedInFilters(queryModel, usedDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedInUniversalDisplayHierarchies(queryModel, usedDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedByLeveledHierarchies(queryModel, usedDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedInExceptions(queryModel, usedDimensions);
	oFF.DimensionUsageAnalyzer2.addDimensionsUsedInConditions(queryModel, usedDimensions);
	usedDimensions.add(this.getQueryModel().getMeasureDimension().getName());
	this.setDimensionsToClone(usedDimensions);
	let cloneQueryManagerBase = this.cloneQueryManagerBase(oFF.QueryCloneMode.CURRENT_STATE);
	let cloneQServiceConfig = cloneQueryManagerBase.getQueryServiceConfig();
	cloneQServiceConfig.setRequiredDimensions(oFF.XList.createWithList(usedDimensions.getValuesAsReadOnlyList()));
	cloneQServiceConfig.setSupportsDimensionLazyLoad(false);
	this.getDimensionsToClone().clear();
	this.getDimensionsRequestedFromClient().clear();
	return cloneQueryManagerBase;
};
oFF.QueryManager.prototype.cloneQueryManagerOptimizedWithLazyLoad = oFF.noSupport;
oFF.QueryManager.prototype.cloneQueryManagerUsingExtDataSource = oFF.noSupport;
oFF.QueryManager.prototype.createCustomHierarchyProvider = oFF.noSupport;
oFF.QueryManager.prototype.createDataAreaCommand = function(commandType)
{
	let dataArea = this.getPlanningManager().getDataArea();
	let command;
	if (oFF.isNull(dataArea))
	{
		command = oFF.QLightweightDataAreaCommand.create(this, this.getQueryModelBase(), commandType);
	}
	else
	{
		command = dataArea.createPlanningContextCommand(commandType);
		command.setConnection(this.getConnection());
	}
	return command;
};
oFF.QueryManager.prototype.createDataAreaCommandDocReset = function()
{
	return this.createDataAreaCommand(oFF.PlanningContextCommandType.DOC_RESET);
};
oFF.QueryManager.prototype.createDataAreaCommandDocSave = function()
{
	return this.createDataAreaCommand(oFF.PlanningContextCommandType.DOC_SAVE);
};
oFF.QueryManager.prototype.createDataAreaCommandRefresh = function()
{
	return this.createDataAreaCommand(oFF.PlanningContextCommandType.REFRESH);
};
oFF.QueryManager.prototype.deletePlanningVersionSettings = function(versionIdentifier)
{
	return this.getPlanningManager().deletePlanningVersionSettings(versionIdentifier);
};
oFF.QueryManager.prototype.deleteVariableVariant = oFF.noSupport;
oFF.QueryManager.prototype.deserializeExt = oFF.noSupport;
oFF.QueryManager.prototype.deserializeFromContent = function(content)
{
	return this.deserializeFromElementExt(content.getContentType(), content.getJsonContent());
};
oFF.QueryManager.prototype.deserializeFromElementExt = function(modelFormat, element)
{
	return this.getQueryModel().deserializeFromElementExt(modelFormat, element);
};
oFF.QueryManager.prototype.deserializeNewComponentExt = oFF.noSupport;
oFF.QueryManager.prototype.deserializeNewComponentFromElementExt = oFF.noSupport;
oFF.QueryManager.prototype.detachBeforeQueryExecutionListener = function(listener)
{
	this.m_beforeQueryExecutionListener.remove(listener);
};
oFF.QueryManager.prototype.detachQueryExecutedListener = function(listener)
{
	this.m_queryExecutedListener.remove(listener);
};
oFF.QueryManager.prototype.disableReturnedDataSelection = function(dataSelection)
{
	this.m_queryModel.toggleReturnedDataSelection(dataSelection, false);
};
oFF.QueryManager.prototype.emptyVariableDefinition = oFF.noSupport;
oFF.QueryManager.prototype.enableHierarchyToUDHConversion = function(enableConversion)
{
	if (this.getSystemType().isTypeOf(oFF.SystemType.BW) && this.getModelCapabilities().supportsUniversalDisplayHierarchiesCustomDimensions())
	{
		this.m_enableHierarchyToUDHConversion = enableConversion;
		this.invalidateState();
	}
};
oFF.QueryManager.prototype.enableReturnedDataSelection = function(dataSelection)
{
	this.m_queryModel.toggleReturnedDataSelection(dataSelection, true);
};
oFF.QueryManager.prototype.getAbstractRendering = function(type, protocol)
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().getAbstractRendering(type, protocol);
};
oFF.QueryManager.prototype.getActiveResultSetContainer = function()
{
	return this.getResultsetContainer(false);
};
oFF.QueryManager.prototype.getActiveResultSetContainerBase = function()
{
	return this.getResultsetContainer(false);
};
oFF.QueryManager.prototype.getAllDisabledReturnedDataSelections = function()
{
	if (!this.supportsReturnedDataSelection())
	{
		return null;
	}
	return oFF.XStream.of(this.m_queryModel.getAllDisabledReturnedDataSelectionConstants()).collect(oFF.XStreamCollector.toListOfString((retDataSel) => {
		return retDataSel.getName();
	}));
};
oFF.QueryManager.prototype.getAllEnabledReturnedDataSelections = function()
{
	if (!this.supportsReturnedDataSelection())
	{
		return null;
	}
	return oFF.XStream.of(this.m_queryModel.getAllEnabledReturnedDataSelectionConstants()).collect(oFF.XStreamCollector.toListOfString((retDataSel) => {
		return retDataSel.getName();
	}));
};
oFF.QueryManager.prototype.getAllPlanningVersionSettings = function()
{
	return this.getPlanningManager().getAllPlanningVersionSettings();
};
oFF.QueryManager.prototype.getAndUseResultsetStateId = function()
{
	this.m_resultsetStateIdUsed = true;
	return this.m_resultsetStateId;
};
oFF.QueryManager.prototype.getCapabilitiesBase = oFF.noSupport;
oFF.QueryManager.prototype.getCellContextManager = function()
{
	this.assertLifeCycleActive();
	return oFF.isNull(this.m_queryModel) ? null : this.m_queryModel.getCellContextManager();
};
oFF.QueryManager.prototype.getChangedProperties = function()
{
	return null;
};
oFF.QueryManager.prototype.getChangedPropertiesFromModellerMetadata = function()
{
	return null;
};
oFF.QueryManager.prototype.getChangedPropertiesInDetail = function()
{
	return null;
};
oFF.QueryManager.prototype.getClassicResultSet = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().getClassicResultSet();
};
oFF.QueryManager.prototype.getClientComponent = function()
{
	return this.getClientInfo().getClientComponent();
};
oFF.QueryManager.prototype.getClientIdentifier = function()
{
	return this.getClientInfo().getClientIdentifier();
};
oFF.QueryManager.prototype.getClientInfo = function()
{
	if (oFF.isNull(this.m_clientInfo))
	{
		this.m_clientInfo = oFF.XClientInfo.createWithParent(this.getApplication().getClientInfo());
	}
	return this.m_clientInfo;
};
oFF.QueryManager.prototype.getClientQueryObjectMigrationStorageName = function()
{
	return this.m_clientQueryObjectStorageName;
};
oFF.QueryManager.prototype.getClientQueryObjectStorageName = function()
{
	return this.m_clientQueryObjectStorageName;
};
oFF.QueryManager.prototype.getClientVersion = function()
{
	return this.getClientInfo().getClientVersion();
};
oFF.QueryManager.prototype.getComponentType = function()
{
	return this.getOlapComponentType();
};
oFF.QueryManager.prototype.getContext = function()
{
	return this;
};
oFF.QueryManager.prototype.getConvenienceCommands = function()
{
	if (oFF.isNull(this.m_convenienceCmds))
	{
		this.m_convenienceCmds = this.getOlapEnv().selectCmds(this);
	}
	return this.m_convenienceCmds;
};
oFF.QueryManager.prototype.getCursorResultSet = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().getCursorResultSet();
};
oFF.QueryManager.prototype.getDWCOrEPFSpaceId = function()
{
	if (this.getSystemDescription().isDWCConnection())
	{
		let dataSource = this.getDataSource();
		if (dataSource.getType() === oFF.MetaObjectType.INA_MODEL)
		{
			return dataSource.getSchemaName();
		}
		else if (dataSource.getType() === oFF.MetaObjectType.PLANNING)
		{
			let schemaName = dataSource.getSchemaName();
			let spaceIdDelimiterIndex = oFF.XString.indexOf(schemaName, "#");
			if (spaceIdDelimiterIndex !== -1)
			{
				return oFF.XString.substring(schemaName, 0, spaceIdDelimiterIndex);
			}
		}
	}
	return null;
};
oFF.QueryManager.prototype.getDataArea = function()
{
	return this.getPlanningManager().getDataArea();
};
oFF.QueryManager.prototype.getDataRefreshEnabled = function()
{
	return this.getResultsetContainer(false).getDataRefreshEnabled();
};
oFF.QueryManager.prototype.getDataRequest = oFF.noSupport;
oFF.QueryManager.prototype.getDataRequestAsString = oFF.noSupport;
oFF.QueryManager.prototype.getDataSource = function()
{
	return this.m_dataSource;
};
oFF.QueryManager.prototype.getDataSourceOrigin = function()
{
	return this.getDataSource();
};
oFF.QueryManager.prototype.getDataSourceTarget = function()
{
	return this.getDataSource();
};
oFF.QueryManager.prototype.getDefinition = function()
{
	return this.getInitSettings().getDefinition();
};
oFF.QueryManager.prototype.getDimensionAccessor = function()
{
	this.assertLifeCycleActive();
	return oFF.isNull(this.m_queryModel) ? null : this.m_queryModel.getDimensionAccessor();
};
oFF.QueryManager.prototype.getDimensionMemberVariables = function()
{
	return this.getVariableContainer().getDimensionMemberVariables();
};
oFF.QueryManager.prototype.getDimensionsRequestedFromClient = function()
{
	return this.m_dimensionsRequestedFromClient;
};
oFF.QueryManager.prototype.getDimensionsToClone = function()
{
	return this.m_dimensionsToClone;
};
oFF.QueryManager.prototype.getDrillManager = function()
{
	this.assertLifeCycleActive();
	return oFF.isNull(this.m_queryModel) ? null : this.m_queryModel.getDrillManager();
};
oFF.QueryManager.prototype.getExecuteRequestOnOldResultSet = function()
{
	return this.getActiveResultSetContainer().getExecuteRequestOnOldResultSet();
};
oFF.QueryManager.prototype.getFieldAccessorSingle = function()
{
	this.assertLifeCycleActive();
	return oFF.isNull(this.m_queryModel) ? null : this.m_queryModel.getFieldAccessorSingle();
};
oFF.QueryManager.prototype.getHierarchyNameVariable = function(name)
{
	return this.getVariableContainer().getHierarchyNameVariable(name);
};
oFF.QueryManager.prototype.getHierarchyNameVariables = function()
{
	return this.getVariableContainer().getHierarchyNameVariables();
};
oFF.QueryManager.prototype.getHierarchyNodeVariable = function(name)
{
	return this.getVariableContainer().getHierarchyNodeVariable(name);
};
oFF.QueryManager.prototype.getIncludePerformanceData = function()
{
	return this.m_includePerformanceData;
};
oFF.QueryManager.prototype.getInitSettings = function()
{
	return this.getServiceConfig();
};
oFF.QueryManager.prototype.getInputEnabledAndNonTechnicalVariables = function()
{
	this.assertLifeCycleActive();
	return this.m_queryModel.getInputEnabledAndNonTechnicalVariables();
};
oFF.QueryManager.prototype.getInputEnabledVariable = function(name)
{
	return this.getVariableContainer().getInputEnabledVariable(name);
};
oFF.QueryManager.prototype.getInputEnabledVariables = function()
{
	this.assertLifeCycleActive();
	return this.m_queryModel.getInputEnabledVariables();
};
oFF.QueryManager.prototype.getInputEnablementRules = function()
{
	return this.getPlanningManager().getInputEnablementRules();
};
oFF.QueryManager.prototype.getInputReadinessCacheMode = function()
{
	return this.getPlanningManager().getInputReadinessCacheMode();
};
oFF.QueryManager.prototype.getInputReadinessFilter = function()
{
	return this.getQueryModel().getInputReadinessFilter();
};
oFF.QueryManager.prototype.getInputReadinessMainQuery = function()
{
	return this.getPlanningManager().getInputReadinessMainQuery();
};
oFF.QueryManager.prototype.getInstanceId = function()
{
	return this.getInitSettings().getInstanceId();
};
oFF.QueryManager.prototype.getKeyRefStorage = oFF.noSupport;
oFF.QueryManager.prototype.getLanguageLocale = function()
{
	return this.getApplication().getLanguageLocale();
};
oFF.QueryManager.prototype.getLifeCycleState = function()
{
	return this.m_lifeCycleState;
};
oFF.QueryManager.prototype.getLovManager = function()
{
	if (oFF.isNull(this.m_lovManager))
	{
		this.m_lovManager = oFF.LovManager.create(this);
	}
	return this.m_lovManager;
};
oFF.QueryManager.prototype.getMaxColumns = function()
{
	return this.getResultsetContainer(false).getMaxColumns();
};
oFF.QueryManager.prototype.getMaxResultRecords = function()
{
	return this.getResultsetContainer(false).getMaxResultRecords();
};
oFF.QueryManager.prototype.getMaxRows = function()
{
	return this.getResultsetContainer(false).getMaxRows();
};
oFF.QueryManager.prototype.getMessageManager = oFF.noSupport;
oFF.QueryManager.prototype.getMetadataModel = function()
{
	this.lazyLoadMetadataModel();
	return this.m_metadataModel;
};
oFF.QueryManager.prototype.getMetadataModelBase = function()
{
	this.lazyLoadMetadataModel();
	return this.m_metadataModel;
};
oFF.QueryManager.prototype.getModCounterState = function()
{
	if (oFF.isNull(this.m_modCounterState))
	{
		this.m_modCounterState = oFF.ModCounterState.create(this);
	}
	return this.m_modCounterState;
};
oFF.QueryManager.prototype.getMode = function()
{
	if (oFF.isNull(this.m_mode))
	{
		this.m_mode = this.getInitSettings().getMode();
	}
	return this.m_mode;
};
oFF.QueryManager.prototype.getModelCapabilities = function()
{
	this.assertLifeCycleActive();
	if (oFF.isNull(this.m_queryModel))
	{
		return this.getOlapSystemContainer().getServiceCapabilitiesExt(this.getProviderType());
	}
	return this.m_queryModel.getModelCapabilities();
};
oFF.QueryManager.prototype.getName = function()
{
	return oFF.isNull(this.m_name) ? this.getInstanceId() : this.m_name;
};
oFF.QueryManager.prototype.getNameForMicroCubeUse = function()
{
	return this.m_myNameAsMicroCube;
};
oFF.QueryManager.prototype.getOffsetColumns = function()
{
	return this.getResultsetContainer(false).getOffsetColumns();
};
oFF.QueryManager.prototype.getOffsetRows = function()
{
	return this.getResultsetContainer(false).getOffsetRows();
};
oFF.QueryManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUERY_MANAGER;
};
oFF.QueryManager.prototype.getOlapEnv = function()
{
	let application = this.getApplication();
	return oFF.isNull(application) ? null : application.getOlapEnvironment();
};
oFF.QueryManager.prototype.getOlapEnvironmentBase = function()
{
	let application = this.getApplication();
	return oFF.isNull(application) ? null : application.getOlapEnvironment();
};
oFF.QueryManager.prototype.getOlapSystemContainer = function()
{
	let systemName = this.getSystemName();
	return this.getOlapEnv().getSystemContainer(systemName);
};
oFF.QueryManager.prototype.getOrCreateDocumentsStoreService = function(withVersions)
{
	if (oFF.isNull(this.m_documentsService))
	{
		if (this.isShallow())
		{
			let activeResultSetContainer = this.getActiveResultSetContainer();
			if (oFF.notNull(activeResultSetContainer) && oFF.XStringUtils.isNotNullAndNotEmpty(activeResultSetContainer.getRsDocumentServicePath()))
			{
				this.m_documentsService = oFF.DocumentsStoreServiceFactory.createDocumentStoreForShallowQueryManager(this, this.getInstanceId(), activeResultSetContainer.getRsDocumentServicePath(), withVersions, activeResultSetContainer.getRsDataArea());
			}
		}
		else if (this.getQueryModel() !== null)
		{
			let documentsInfo = this.getQueryModel().getDocumentsInfo();
			this.m_documentsService = oFF.isNull(documentsInfo) || documentsInfo.getSupportsDocuments() === oFF.DocumentsSupportType.NONE || oFF.XStringUtils.isNullOrEmpty(documentsInfo.getDocumentsServicePath()) ? null : oFF.DocumentsStoreServiceFactory.createDocumentStore(this, withVersions, this.getQueryModel().getDataArea());
		}
	}
	return this.m_documentsService;
};
oFF.QueryManager.prototype.getPlanningManager = function()
{
	if (oFF.isNull(this.m_planningManager))
	{
		this.m_planningManager = oFF.PlanningFactory.createPlanningManager(this);
	}
	return this.m_planningManager;
};
oFF.QueryManager.prototype.getPlanningMode = function()
{
	return this.getPlanningManager().getPlanningMode();
};
oFF.QueryManager.prototype.getPlanningModel = function()
{
	return this.getPlanningManager().getPlanningModel();
};
oFF.QueryManager.prototype.getPlanningRestriction = function()
{
	return this.getPlanningManager().getPlanningRestriction();
};
oFF.QueryManager.prototype.getPlanningVersionIdentifier = function(versionId, sharedVersion, versionOwner)
{
	return this.getPlanningManager().getPlanningVersionIdentifier(versionId, sharedVersion, versionOwner);
};
oFF.QueryManager.prototype.getPlanningVersionSettings = function(versionIdentifier, sequenceId, useExternalView)
{
	return this.getPlanningManager().getPlanningVersionSettings(versionIdentifier, sequenceId, useExternalView);
};
oFF.QueryManager.prototype.getPlanningVersionSettingsMode = function()
{
	return this.getPlanningManager().getPlanningVersionSettingsMode();
};
oFF.QueryManager.prototype.getPlanningVersionSettingsSimple = function(versionId, sequenceId, useExternalView)
{
	return this.getPlanningManager().getPlanningVersionSettingsSimple(versionId, sequenceId, useExternalView);
};
oFF.QueryManager.prototype.getPreQueryExecutor = function()
{
	if (oFF.isNull(this.m_preQueryExecutor))
	{
		this.m_preQueryExecutor = oFF.PreQueryExecutor.create(this);
	}
	return this.m_preQueryExecutor;
};
oFF.QueryManager.prototype.getPreQueryName = function()
{
	return this.m_preQueryName;
};
oFF.QueryManager.prototype.getPreviousVariableProcessorState = function()
{
	return this.m_variableProcessorPreviousState;
};
oFF.QueryManager.prototype.getProviderType = function()
{
	return this.getInitSettings().getProviderType();
};
oFF.QueryManager.prototype.getQueryManager = function()
{
	return this;
};
oFF.QueryManager.prototype.getQueryManagerProvider = oFF.noSupport;
oFF.QueryManager.prototype.getQueryModel = function()
{
	return this.m_queryModel;
};
oFF.QueryManager.prototype.getQueryModelBase = function()
{
	return this.m_queryModel;
};
oFF.QueryManager.prototype.getQueryServiceConfig = function()
{
	return this.getServiceConfig();
};
oFF.QueryManager.prototype.getResourceDetailsFromResourceIdentifier = oFF.noSupport;
oFF.QueryManager.prototype.getResourcePath = oFF.noSupport;
oFF.QueryManager.prototype.getResultSetMessages = function()
{
	return this.getActiveResultSetContainer();
};
oFF.QueryManager.prototype.getResultSetPersistenceIdentifier = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceIdentifier();
};
oFF.QueryManager.prototype.getResultSetPersistenceSchema = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceSchema();
};
oFF.QueryManager.prototype.getResultSetPersistenceTable = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceTable();
};
oFF.QueryManager.prototype.getResultSetPersistenceType = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceType();
};
oFF.QueryManager.prototype.getResultSetProviderFactory = oFF.noSupport;
oFF.QueryManager.prototype.getResultSetSyncState = function()
{
	return this.getActiveResultSetContainer().getResultSetSyncState();
};
oFF.QueryManager.prototype.getResultsetContainer = function(enforceOutOfSync)
{
	if (oFF.isNull(this.m_activeContainer) || this.m_activeContainer.isReleased() || enforceOutOfSync && this.m_activeContainer.getSyncState() !== oFF.SyncState.OUT_OF_SYNC)
	{
		let oldContainer = this.m_activeContainer;
		this.m_activeContainer = oFF.ResultSetContainer.create(this, this.m_activeContainer);
		this.resetVisualizationContainers();
		if (oFF.notNull(oldContainer))
		{
			oldContainer.setSerializedData(null, null);
		}
	}
	return this.m_activeContainer;
};
oFF.QueryManager.prototype.getRriTargetManager = oFF.noSupport;
oFF.QueryManager.prototype.getSelectionTagging = function()
{
	return null;
};
oFF.QueryManager.prototype.getSettingsBase = function()
{
	return this.getServiceConfig();
};
oFF.QueryManager.prototype.getStorageGroupName = function()
{
	return null;
};
oFF.QueryManager.prototype.getStorageName = function()
{
	return null;
};
oFF.QueryManager.prototype.getStorageObjectName = function()
{
	return null;
};
oFF.QueryManager.prototype.getStoryId = function()
{
	return this.getClientInfo().getStoryId();
};
oFF.QueryManager.prototype.getStoryName = function()
{
	return this.getClientInfo().getStoryName();
};
oFF.QueryManager.prototype.getSuppressCalculatedMembersWithoutBookedData = function()
{
	return this.getResultsetContainer(false).getSuppressCalculatedMembersWithoutBookedData();
};
oFF.QueryManager.prototype.getSystemDescription = function()
{
	if (oFF.isNull(this.m_systemDescription))
	{
		let initSettings = this.getInitSettings();
		let systemDescription = initSettings.getSystemDescription();
		this.m_systemDescription = oFF.XWeakReferenceUtil.getWeakRef(systemDescription);
	}
	return oFF.XWeakReferenceUtil.getHardRef(this.m_systemDescription);
};
oFF.QueryManager.prototype.getSystemName = function()
{
	let systemDescription = this.getSystemDescription();
	if (oFF.isNull(systemDescription))
	{
		return null;
	}
	return systemDescription.getSystemName();
};
oFF.QueryManager.prototype.getSystemType = function()
{
	return this.getSystemDescription().getSystemType();
};
oFF.QueryManager.prototype.getTagging = function()
{
	return this.getServiceConfig().getTagging();
};
oFF.QueryManager.prototype.getTransientFilterActions = function(syncType)
{
	let actions = oFF.XList.create();
	if (this.getQueryModel() !== null && this.getQueryModel().getModelCapabilities().supportsFunctionalVariables() && this.getQueryModel().getModelCapabilities().supportsSupportsDimensionSemanticType())
	{
		let valueHelpProvider = this.getValueHelpProvider();
		let queryModelWithFuncVarMetadata = this.getQueryModel();
		let sharedQueryManger = this.getOlapEnv().getSharedQueryManager(queryModelWithFuncVarMetadata.getDatasetId());
		if (oFF.notNull(sharedQueryManger))
		{
			if (sharedQueryManger.getValueHelpProvider() !== null)
			{
				valueHelpProvider = sharedQueryManger.getValueHelpProvider();
				queryModelWithFuncVarMetadata = sharedQueryManger.getQueryModel();
			}
		}
		let timeRangeFilters = oFF.QFilterUtil.collectShiftableTimeRangeFilters(this.getQueryModel());
		let processedDimensions = oFF.XHashSetOfString.create();
		for (let i = 0; i < timeRangeFilters.size(); i++)
		{
			let filter = timeRangeFilters.get(i);
			let timeDimension = queryModelWithFuncVarMetadata.getDimensionByName(filter.getTimeDimensionName());
			if (processedDimensions.contains(timeDimension.getName()) || !oFF.QTimeDimensionUtil.isFiscalWithFunctionalVariables(timeDimension))
			{
				continue;
			}
			processedDimensions.add(timeDimension.getName());
			let functionalVariables = valueHelpProvider.getCachedFunctionalVariables(timeDimension);
			if (oFF.isNull(functionalVariables))
			{
				let action = valueHelpProvider.processFunctionalVariableHelp(timeDimension, syncType, null, null);
				if (oFF.notNull(action))
				{
					actions.add(action);
				}
			}
		}
	}
	let filterAcrossModels = oFF.QFilterUtil.collectFilterAcrossModels(this.getQueryModel());
	for (let i = 0; i < filterAcrossModels.size(); i++)
	{
		let filterAcrossModel = filterAcrossModels.get(i);
		let famTargetDatasetId = filterAcrossModel.getTargetDatasetId();
		let targetContext;
		if (oFF.XString.isEqual(famTargetDatasetId, this.getQueryModel().getDatasetId()))
		{
			targetContext = this;
		}
		else
		{
			targetContext = this.getOlapEnv().getSharedQueryManager(famTargetDatasetId);
		}
		if (oFF.notNull(targetContext))
		{
			let action = filterAcrossModel.processLovQueriesExecutionExt(targetContext.getQueryModel(), syncType, null, null);
			if (oFF.notNull(action))
			{
				actions.add(action);
			}
		}
	}
	return actions;
};
oFF.QueryManager.prototype.getValueHelpProvider = oFF.noSupport;
oFF.QueryManager.prototype.getVariable = function(name)
{
	this.assertLifeCycleActive();
	let variableManagerBase = this.m_queryModel.getVariableManagerBase();
	return variableManagerBase.getVariableBaseByName(name);
};
oFF.QueryManager.prototype.getVariableContainer = function()
{
	return this.getVariableContainerBase();
};
oFF.QueryManager.prototype.getVariableContainerBase = function()
{
	return oFF.isNull(this.m_queryModel) ? null : this.m_queryModel.getVariableManagerBase();
};
oFF.QueryManager.prototype.getVariableMode = function()
{
	if (this.getVariableProcessorProvider().isDirectVariableTransfer())
	{
		return oFF.VariableMode.DIRECT_VALUE_TRANSFER;
	}
	return oFF.VariableMode.SUBMIT_AND_REINIT;
};
oFF.QueryManager.prototype.getVariableProcessor = function()
{
	return this;
};
oFF.QueryManager.prototype.getVariableProcessorProvider = oFF.noSupport;
oFF.QueryManager.prototype.getVariableProcessorState = function()
{
	return this.m_variableProcessorState;
};
oFF.QueryManager.prototype.getVariableVariantByName = oFF.noSupport;
oFF.QueryManager.prototype.getVariableVariants = oFF.noSupport;
oFF.QueryManager.prototype.getVariables = function()
{
	this.assertLifeCycleActive();
	return this.m_queryModel.getVariables();
};
oFF.QueryManager.prototype.getVersionAliases = function()
{
	return this.getPlanningManager().getVersionAliases();
};
oFF.QueryManager.prototype.getWidgetId = function()
{
	return this.getClientInfo().getWidgetId();
};
oFF.QueryManager.prototype.hasChangedCells = function()
{
	return this.getPlanningManager().hasChangedCells();
};
oFF.QueryManager.prototype.hasChangedValueLocks = function()
{
	return this.getPlanningManager().hasChangedValueLocks();
};
oFF.QueryManager.prototype.hasChangedValues = function()
{
	return this.getPlanningManager().hasChangedValues();
};
oFF.QueryManager.prototype.hasInputEnabledAndNonTechnicalVariables = function()
{
	this.assertLifeCycleActive();
	return oFF.notNull(this.m_queryModel) && this.m_queryModel.hasInputEnabledAndNonTechnicalVariables();
};
oFF.QueryManager.prototype.hasInputEnabledVariables = function()
{
	this.assertLifeCycleActive();
	return oFF.notNull(this.m_queryModel) && this.m_queryModel.hasInputEnabledVariables();
};
oFF.QueryManager.prototype.hasLovManager = function()
{
	return oFF.notNull(this.m_lovManager);
};
oFF.QueryManager.prototype.hasMandatoryVariables = function()
{
	this.assertLifeCycleActive();
	return oFF.notNull(this.m_queryModel) && this.m_queryModel.hasMandatoryVariables();
};
oFF.QueryManager.prototype.hasMoreColumnRecordsAvailable = function()
{
	return this.getActiveResultSetContainer().hasMoreColumnRecordsAvailable();
};
oFF.QueryManager.prototype.hasMoreRowRecordsAvailable = function()
{
	return this.getActiveResultSetContainer().hasMoreRowRecordsAvailable();
};
oFF.QueryManager.prototype.hasNewValues = function()
{
	return this.getPlanningManager().hasNewValues();
};
oFF.QueryManager.prototype.hasPendingDocumentIdRequests = function()
{
	return this.getActiveResultSetContainer().hasDocumentIdCollection();
};
oFF.QueryManager.prototype.hasPlanningManager = function()
{
	return oFF.notNull(this.m_planningManager);
};
oFF.QueryManager.prototype.hasVariables = function()
{
	this.assertLifeCycleActive();
	return oFF.notNull(this.m_queryModel) && this.m_queryModel.hasVariables();
};
oFF.QueryManager.prototype.initializeDataAreaState = function()
{
	return this.getPlanningManager().initializeDataAreaState();
};
oFF.QueryManager.prototype.initializeMainSequence = function(syncType, listener, customIdentifier)
{
	let transientFilterActions = this.getTransientFilterActions(syncType);
	let mainSequence = null;
	if (transientFilterActions.size() > 0)
	{
		mainSequence = oFF.SyncActionSequence.create(syncType, listener, customIdentifier, this);
		for (let i = 0; i < transientFilterActions.size(); i++)
		{
			mainSequence.addAction(transientFilterActions.get(i));
		}
	}
	return mainSequence;
};
oFF.QueryManager.prototype.invalidateAndIncrementModelStateId = function()
{
	if (this.m_resultsetStateIdUsed)
	{
		this.m_resultsetStateIdUsed = false;
		this.m_resultsetStateId = this.m_resultsetStateId + 1;
	}
};
oFF.QueryManager.prototype.invalidateState = function()
{
	if (this._createPlanningManager())
	{
		this.m_planningManager.setPublicVersionEditPossible(false);
	}
	if (this.getMode() === oFF.QueryManagerMode.RAW_QUERY)
	{
		this.getResultsetContainer(true);
	}
	else
	{
		this.m_queryModel.notifyNodeChanged();
	}
};
oFF.QueryManager.prototype.invalidateVisualizationContainers = function()
{
	let queryModel = this.getQueryModel();
	let visualizationManager = oFF.isNull(queryModel) ? null : queryModel.getVisualizationManager();
	if (oFF.notNull(visualizationManager))
	{
		visualizationManager.invalidateGridCollector();
	}
	let visualizationDefinitions = oFF.isNull(visualizationManager) ? null : visualizationManager.getVisualizationDefinitions();
	if (oFF.XCollectionUtils.hasElements(visualizationDefinitions))
	{
		oFF.XCollectionUtils.forEach(visualizationDefinitions, (visDef) => {
			visDef.invalidateVisualizationContainer();
		});
	}
};
oFF.QueryManager.prototype.isApplyingRepoState = oFF.noSupport;
oFF.QueryManager.prototype.isBasedOnVirtualDataSource = function()
{
	return oFF.XString.isEqual(this.getDataSource().getFullQualifiedName(), oFF.QModelConstants.UPDATE_DYN_VAR_VIRTUAL_DATASOURCE);
};
oFF.QueryManager.prototype.isCacheHintEnabled = function()
{
	return this.m_cacheHintsEnabled;
};
oFF.QueryManager.prototype.isCancelNeeded = function()
{
	return this.getVariableProcessorState().isCancelNeeded() && (this.hasVariables() || this.supportsAndAllowsEmptyExtendedVarDefinition());
};
oFF.QueryManager.prototype.isClassicResultSetAvailable = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().isClassicResultSetAvailable();
};
oFF.QueryManager.prototype.isCursorResultSetAvailable = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().isCursorResultSetAvailable();
};
oFF.QueryManager.prototype.isDataEntryEnabled = function()
{
	return this.getPlanningManager().isDataEntryEnabled();
};
oFF.QueryManager.prototype.isDataEntryReadOnly = function()
{
	return this.getPlanningManager().isDataEntryReadOnly();
};
oFF.QueryManager.prototype.isDataSourceInitial = function()
{
	return oFF.isNull(this.m_dataSource) || this.m_dataSource.getType() === null;
};
oFF.QueryManager.prototype.isDirectVariableTransferEnabled = function()
{
	return this.m_directVariableTransferConsumer;
};
oFF.QueryManager.prototype.isEventingStopped = function()
{
	this.assertLifeCycleActive();
	return oFF.notNull(this.m_queryModel) && this.m_queryModel.isEventingStopped();
};
oFF.QueryManager.prototype.isExecuteAutoVariableSubmit = function()
{
	return oFF.notNull(this.m_queryModel) && this.getModelCapabilities().supportsAutoVariableSubmit() && this.getInitSettings().isEnableAutoVariableSubmit();
};
oFF.QueryManager.prototype.isFailedSubmit = function()
{
	return this.getVariableProcessorState().isFailedSubmit();
};
oFF.QueryManager.prototype.isHierarchyToUDHConversionEnabled = function()
{
	return this.m_enableHierarchyToUDHConversion;
};
oFF.QueryManager.prototype.isHierarchyToUDHConversionEnabledForCurrentRs = function()
{
	return this.getActiveResultSetContainer().isHierarchyToUDHConversionEnabled();
};
oFF.QueryManager.prototype.isIncludePerformanceNotDefault = oFF.noSupport;
oFF.QueryManager.prototype.isKeyRefSerializationEnabled = function()
{
	return this.m_keyRefSerializationEnabled;
};
oFF.QueryManager.prototype.isKeyfigureCalculationSuppressed = function()
{
	return this.getResultsetContainer(false).isKeyfigureCalculationSuppressed();
};
oFF.QueryManager.prototype.isLightweightSearch = function()
{
	let dataSource = this.getDataSource();
	return oFF.notNull(dataSource) && dataSource.getType() === oFF.MetaObjectType.CATALOG_VIEW_2;
};
oFF.QueryManager.prototype.isMetadataCached = function()
{
	return this.m_isMetadataCached;
};
oFF.QueryManager.prototype.isProcessingAutoSubmit = function()
{
	return this.m_variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || this.m_variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT;
};
oFF.QueryManager.prototype.isPublicVersionEditPossible = function()
{
	return this.getPlanningManager().isPublicVersionEditPossible();
};
oFF.QueryManager.prototype.isReinitNeeded = function()
{
	return this.getVariableProcessorState().isReinitNeeded() && (this.hasVariables() || this.supportsAndAllowsEmptyExtendedVarDefinition());
};
oFF.QueryManager.prototype.isRequestingPerformanceData = function()
{
	return this.m_includePerformanceData.getBoolean() === true;
};
oFF.QueryManager.prototype.isResultInvalidWithFallback = function(resultSetContainer)
{
	let containerForChecking;
	if (oFF.isNull(resultSetContainer))
	{
		containerForChecking = this.m_activeContainer;
	}
	else
	{
		containerForChecking = resultSetContainer;
	}
	return oFF.isNull(containerForChecking) || containerForChecking.getSyncState().isNotInSync() && containerForChecking.getSyncState() !== oFF.SyncState.PROCESSING;
};
oFF.QueryManager.prototype.isResultSetTransportEnabled = function()
{
	return this.getResultsetContainer(false).isResultSetTransportEnabled();
};
oFF.QueryManager.prototype.isShallow = function()
{
	let initSettings = this.getInitSettings();
	let hasRuntimeQueryModel = initSettings.getMode() === oFF.QueryManagerMode.RAW_QUERY && initSettings.getDefinitionType() === oFF.QModelFormat.INA_CLONE_RENDERING;
	return initSettings.getDataRequestAsString() !== null && (this.getQueryModel() === null || hasRuntimeQueryModel);
};
oFF.QueryManager.prototype.isSubmitNeeded = function()
{
	return this.getVariableProcessorState().isSubmitNeeded() && (this.hasVariables() || this.supportsAndAllowsEmptyExtendedVarDefinition());
};
oFF.QueryManager.prototype.isSubmitted = function()
{
	return this.m_variableProcessorState.isTypeOf(oFF.VariableProcessorState.SUBMITTED);
};
oFF.QueryManager.prototype.isSystemMappingValid = function(remoteQueryManager)
{
	return this.getSystemDescription().isSystemMappingValid(remoteQueryManager.getSystemDescription());
};
oFF.QueryManager.prototype.isUpdatingDataRequestCapabilities = oFF.noSupport;
oFF.QueryManager.prototype.isUsingSavedPromptsForExitVariables = function()
{
	return this.m_disableExitVariables;
};
oFF.QueryManager.prototype.isValidatingLocalFormulaMembers = function()
{
	return this.m_validateLocalFormulaMembers;
};
oFF.QueryManager.prototype.isVariableSubmitFailed = function()
{
	return this.m_variableProcessorState.isFailedSubmit();
};
oFF.QueryManager.prototype.lazyLoadMetadataModel = function()
{
	if (oFF.isNull(this.m_metadataModel))
	{
		this.m_metadataModel = oFF.QMetadataModel.create(this.m_queryModel);
	}
};
oFF.QueryManager.prototype.loadQueryModel = oFF.noSupport;
oFF.QueryManager.prototype.maintainStateForRsWithAutoSubmit = function(resultSetContainer)
{
	if (oFF.notNull(this.m_queryModel) && this.getModelCapabilities().supportsAutoVariableSubmit())
	{
		this.m_queryModel.setIsMetadataUpdatedByAutoSubmit(false);
	}
	let variableProcessorState = this.getVariableProcessorState();
	if (this.isExecuteAutoVariableSubmit() && !this.isProcessingAutoSubmit())
	{
		if (variableProcessorState !== oFF.VariableProcessorState.SUBMITTED && this.hasVariables() && !this.hasNewValues() && !this.hasPendingDocumentIdRequests())
		{
			let isVariableValueHelp = variableProcessorState === oFF.VariableProcessorState.VALUE_HELP;
			if (oFF.notNull(resultSetContainer))
			{
				let rsQueryModelDef = resultSetContainer.getRsQueryModelDef();
				isVariableValueHelp = isVariableValueHelp || oFF.notNull(rsQueryModelDef) && !rsQueryModelDef.isExecuteAutoVariableSubmit();
			}
			let rsContainer = oFF.notNull(resultSetContainer) ? resultSetContainer : this.getActiveResultSetContainer();
			if (variableProcessorState === oFF.VariableProcessorState.CHANGEABLE_REINIT && rsContainer.getSyncState().isInSync())
			{
				this.getResultsetContainer(true);
			}
			if (!isVariableValueHelp)
			{
				let processingStateForAutoSubmit = null;
				if (variableProcessorState.isTypeOf(oFF.VariableProcessorState.CHANGEABLE_STARTUP))
				{
					processingStateForAutoSubmit = oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT;
				}
				else if (variableProcessorState.isTypeOf(oFF.VariableProcessorState.CHANGEABLE_REINIT))
				{
					processingStateForAutoSubmit = oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT;
				}
				if (oFF.notNull(processingStateForAutoSubmit))
				{
					let dimensionMemberVariables = this.getDimensionMemberVariables();
					this.queueEventing();
					for (let i = 0; i < dimensionMemberVariables.size(); i++)
					{
						let variable = dimensionMemberVariables.get(i);
						let varType = variable.getVariableType();
						if (varType === oFF.VariableType.HIERARCHY_NAME_VARIABLE)
						{
							let hierarchyDimension = variable.getHierarchyNameDimension();
							let hierNameVarName = hierarchyDimension.getHierarchyNameVariableName();
							let hierarchyActive = hierarchyDimension.isHierarchyActive();
							hierarchyDimension.getHierarchyManagerBase().setHierarchyActiveBeforeAutoSubmit(hierarchyActive);
							if (oFF.XString.isEqual(variable.getName(), hierNameVarName) && (hierarchyDimension.isEnforceHierarchyNameVariable() && (variable.isWinControlInAutoSubmit() || hierarchyActive) || hierarchyDimension.useHierarchyNameVariable() && variable.isWinControlInAutoSubmit()) && !hierarchyDimension.isDisplayHierarchyFixInFilter())
							{
								hierarchyDimension.setHierarchy(null);
							}
						}
					}
					for (let j = 0; j < dimensionMemberVariables.size(); j++)
					{
						let variable = dimensionMemberVariables.get(j);
						variable.maintainFilterStateForAutoSubmit();
					}
					this.setVariableProcessorState(processingStateForAutoSubmit);
					this.resumeEventing();
				}
			}
		}
		else if (this.isResultInvalidWithFallback(resultSetContainer) && !this.hasNewValues() && !this.hasPendingDocumentIdRequests() && this.hasVariables() && variableProcessorState === oFF.VariableProcessorState.SUBMITTED)
		{
			if (this.getQueryModel() !== null)
			{
				let dimensions = this.getQueryModel().getLoadedDimensions();
				let resetHierarchyNamePredicate = (dim) => {
					return dim.isHierarchyActive() && dim.isEnforceHierarchyNameVariable();
				};
				if (oFF.XStream.of(dimensions).anyMatch(resetHierarchyNamePredicate))
				{
					this.queueEventing();
					oFF.XStream.of(dimensions).filter(resetHierarchyNamePredicate).forEach((dimension) => {
						dimension.setHierarchy(null);
					});
					this.resumeEventing();
				}
			}
		}
	}
};
oFF.QueryManager.prototype.newObject = oFF.noSupport;
oFF.QueryManager.prototype.onModelChange = function(phase)
{
	if (phase === oFF.QDeltaBroadcastPhase.BEFORE_EVENTS_BROADCAST && !this.getVariableProcessorState().isTypeOf(oFF.VariableProcessorState.PROCESSING_SUBMIT))
	{
		this.getResultsetContainer(true);
		this.invalidateVisualizationContainers();
		this.invalidateAndIncrementModelStateId();
	}
};
oFF.QueryManager.prototype.prepareAfterVariables = function()
{
	if (!this.m_hasPreparedAfterVariables)
	{
		let state = this.getVariableProcessorState();
		let hasVariables = this.hasVariables();
		if (!hasVariables || state === oFF.VariableProcessorState.SUBMITTED || state === oFF.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER)
		{
			let initSettings = this.getInitSettings();
			let definitionType = initSettings.getDefinitionType();
			let definitionAsStructure = initSettings.getDefinitionAsStructure();
			if (oFF.notNull(definitionType) && oFF.notNull(definitionAsStructure))
			{
				let preparator = oFF.QueryPreparatorFactory.newInstance(definitionType);
				if (oFF.notNull(preparator))
				{
					preparator.prepareAfterVariables(this, definitionAsStructure);
				}
			}
			this.m_hasPreparedAfterVariables = true;
		}
	}
};
oFF.QueryManager.prototype.prepareMergeCandidate = oFF.noSupport;
oFF.QueryManager.prototype.processBLOB = oFF.noSupport;
oFF.QueryManager.prototype.processCancel = function(syncType)
{
	this.getQueryManagerProvider().processProviderCancelThreads(syncType, null, null);
};
oFF.QueryManager.prototype.processClearCache = function(syncType, timestamp)
{
	this.getQueryManagerProvider().processProviderClearCache(syncType, null, null, timestamp);
};
oFF.QueryManager.prototype.processDeserializeExt = oFF.noSupport;
oFF.QueryManager.prototype.processModelInitialization = oFF.noSupport;
oFF.QueryManager.prototype.processModelInitializationAndApplyRepoState = oFF.noSupport;
oFF.QueryManager.prototype.processQueryExecution = function(syncType, listener, customIdentifier)
{
	this.checkRootNodeFetching();
	if (oFF.notNull(this.m_lovManager) && this.m_lovManager.isLovAbstractionEnabled() && this.getActiveResultSetContainer().getSyncState().isNotInSync())
	{
		let lovConfig = this.m_lovManager.createConfigForActiveResultSetContainer(this.getActiveResultSetContainer());
		if (lovConfig.isValid())
		{
			return this.m_lovManager.processListOfValuesByConfig(lovConfig, syncType, listener, customIdentifier);
		}
		oFF.XObjectExt.release(lovConfig);
	}
	this.maintainStateForRsWithAutoSubmit(null);
	return this.processQueryExecutionInternal(syncType, listener, customIdentifier, this.getMode() === oFF.QueryManagerMode.BLENDING);
};
oFF.QueryManager.prototype.processQueryExecutionAsBlendingSource = function(syncType, persistanceType, listener, customIdentifier)
{
	this.setResultSetPersistenceTargetType(persistanceType);
	return this.processQueryExecutionInternal(syncType, listener, customIdentifier, true);
};
oFF.QueryManager.prototype.processQueryExecutionAsLovProcess = function(lovConfig, syncType, listener, customIdentifier)
{
	let lovManager = this.getLovManager();
	if (lovConfig.isUseActiveResultSetContainer())
	{
		return this.processQueryExecutionInternal(syncType, listener, customIdentifier, false);
	}
	let activeContainer = this.m_activeContainer;
	this.m_activeContainer = oFF.ResultSetContainer.create(this, activeContainer);
	this.m_activeContainer.setLovConfig(lovConfig);
	lovManager.setKeyFigureCalculation(this.m_activeContainer, lovConfig);
	let result = this.processQueryExecutionInternal(syncType, listener, customIdentifier, false);
	this.m_activeContainer = activeContainer;
	return result;
};
oFF.QueryManager.prototype.processQueryExecutionAsRemotePreQuery = function(syncType, listener, customIdentifier)
{
	this.getActiveResultSetContainerBase().setIsRemotePreQuery(true);
	return this.processQueryExecutionInternal(syncType, listener, customIdentifier, true);
};
oFF.QueryManager.prototype.processQueryExecutionInternal = function(syncType, listener, customIdentifier, isBlendingProcess)
{
	this.assertLifeCycleActive();
	if (syncType === oFF.SyncType.REGISTER)
	{
		this.m_queryExecutedListener.put(listener, oFF.XPair.create(listener, customIdentifier));
		this.getActiveResultSetContainerBase().attachListener(listener, oFF.ListenerType.SPECIFIC, customIdentifier);
		return null;
	}
	else if (syncType === oFF.SyncType.UNREGISTER)
	{
		this.m_queryExecutedListener.remove(listener);
		return null;
	}
	this.callOnBeforeQueryExecutionListeners(customIdentifier);
	if (this.getOlapEnv() !== null && this.getOlapEnv().getFilterManager() !== null)
	{
		let variableProcessorState = this.getVariableProcessorState();
		this.getOlapEnv().getFilterManager().cleanupFilterBeforeAutoSubmit(this, variableProcessorState === oFF.VariableProcessorState.PROCESSING_SUBMIT || variableProcessorState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || variableProcessorState === oFF.VariableProcessorState.CHANGEABLE_STARTUP);
	}
	let mainSequence = null;
	if (this.getPreQueryName() === null)
	{
		mainSequence = this.initializeMainSequence(syncType, listener, customIdentifier);
	}
	if (this.variablesRequireImplicitSubmit())
	{
		this.getActiveResultSetContainerBase().attachAllListeners(this.m_queryExecutedListener.getValuesAsReadOnlyList());
		return this.processSequenceWithMainSequence(mainSequence, oFF.QueryManagerProcessingSequence.createSequence(this, this.getActiveResultSetContainer(), true, false), syncType, listener, customIdentifier);
	}
	this.prepareAfterVariables();
	this.getActiveResultSetContainerBase().attachAllListeners(this.m_queryExecutedListener.getValuesAsReadOnlyList());
	if (!this.getActiveResultSetContainer().areAllPrequeriesInSync() || this.getPreQueryName() !== null || oFF.notNull(this.m_queryModel) && this.m_queryModel.isBasedOnMicroCube() || isBlendingProcess && this.getActiveResultSetContainer().getSyncState().isTypeOf(oFF.SyncState.PROCESSING))
	{
		this.getResultsetContainer(true);
	}
	if (!isBlendingProcess && this.getResultSetPersistenceIdentifier() !== null)
	{
		this.cleanPersistencySettings();
	}
	if (this.getModelCapabilities().supportsCustomHierarchy())
	{
		return this.processSequenceWithMainSequence(mainSequence, oFF.QueryManagerProcessingSequence.createSequence(this, this.getActiveResultSetContainer(), false, false), syncType, listener, customIdentifier);
	}
	if (oFF.isNull(mainSequence))
	{
		return this.getActiveResultSetContainerBase().processExecution(syncType, listener, customIdentifier);
	}
	else
	{
		mainSequence.setMainAction(oFF.ResultSetContainerProcessExecutionAction.createAction(this.getActiveResultSetContainer()));
		return mainSequence.processSyncAction(syncType, listener, customIdentifier);
	}
};
oFF.QueryManager.prototype.processSequenceWithMainSequence = function(mainSequence, sequence, syncType, listener, customIdentifier)
{
	if (oFF.isNull(mainSequence))
	{
		return sequence.processSyncAction(syncType, listener, customIdentifier);
	}
	else
	{
		mainSequence.setMainAction(sequence);
		return mainSequence.processSyncAction(syncType, listener, customIdentifier);
	}
};
oFF.QueryManager.prototype.processShutdown = function(syncType, listener, customIdentifier)
{
	return oFF.QmShutdownAction.createAndRun(syncType, listener, customIdentifier, this);
};
oFF.QueryManager.prototype.processUpdateRuntimeBlendQueryFromDependentQueries = oFF.noSupport;
oFF.QueryManager.prototype.queueEventing = function()
{
	this.assertLifeCycleActive();
	if (oFF.notNull(this.m_queryModel))
	{
		this.m_queryModel.queueEventing();
	}
};
oFF.QueryManager.prototype.reInitVariablesAfterSubmit = function(syncType, listener, customIdentifier)
{
	return this.getVariableProcessorProvider().processReInitVariableAfterSubmit(syncType, listener, customIdentifier);
};
oFF.QueryManager.prototype.recordState = oFF.noSupport;
oFF.QueryManager.prototype.recordingStateOfQueryManager = oFF.noSupport;
oFF.QueryManager.prototype.registerChangedListener = oFF.noSupport;
oFF.QueryManager.prototype.registerVariableProcessorStateChangedListener = function(listener, customIdentifier)
{
	if (oFF.notNull(listener))
	{
		if (oFF.isNull(this.m_processorStateListeners))
		{
			this.m_processorStateListeners = oFF.XList.create();
		}
		this.m_processorStateListeners.add(oFF.ListenerPair.create(listener, customIdentifier));
	}
};
oFF.QueryManager.prototype.releaseObjectInternal = function()
{
	let olapEnvironmentBase = this.getOlapEnvironmentBase();
	if (oFF.notNull(olapEnvironmentBase))
	{
		olapEnvironmentBase.getFilterManager().releaseExternalizedFilter(this);
		olapEnvironmentBase.unregisterQueryManager(this);
		if (oFF.notNull(this.m_myNameAsMicroCube))
		{
			olapEnvironmentBase.removeMicroCubeName(this.getSystemName(), this.m_myNameAsMicroCube);
			this.m_myNameAsMicroCube = null;
		}
	}
	this.m_convenienceCmds = oFF.XObjectExt.release(this.m_convenienceCmds);
	this.m_activeContainer = oFF.XObjectExt.release(this.m_activeContainer);
	this.m_processorStateListeners = oFF.XObjectExt.release(this.m_processorStateListeners);
	this.m_queryModel = oFF.XObjectExt.release(this.m_queryModel);
	this.setLifeCycleState(oFF.LifeCycleState.RELEASED);
	this.m_metadataModel = oFF.XObjectExt.release(this.m_metadataModel);
	this.m_planningManager = oFF.XObjectExt.release(this.m_planningManager);
	this.m_preQueryExecutor = oFF.XObjectExt.release(this.m_preQueryExecutor);
	this.m_systemDescription = null;
	this.m_variableProcessorPreviousState = null;
	this.m_variableProcessorState = null;
	this.m_queryExecutedListener = null;
	this.m_beforeQueryExecutionListener = null;
	this.m_dimensionsToClone = oFF.XObjectExt.release(this.m_dimensionsToClone);
	this.m_dimensionsRequestedFromClient = oFF.XObjectExt.release(this.m_dimensionsRequestedFromClient);
	this.m_includePerformanceData = null;
	this.m_lovManager = oFF.XObjectExt.release(this.m_lovManager);
	this.m_clientQueryObjectStorageName = null;
	this.m_modCounterState = oFF.XObjectExt.release(this.m_modCounterState);
	this.m_documentsService = oFF.XObjectExt.release(this.m_documentsService);
	oFF.DfService.prototype.releaseObjectInternal.call( this );
};
oFF.QueryManager.prototype.removeVariableVariant = oFF.noSupport;
oFF.QueryManager.prototype.removeVersionAlias = function(aliasName)
{
	this.getPlanningManager().removeVersionAlias(aliasName);
};
oFF.QueryManager.prototype.reorderStructureMember = function(cloneDimension, origDimension)
{
	if (oFF.notNull(cloneDimension) && oFF.notNull(origDimension))
	{
		cloneDimension.reOrderStructureMembers(origDimension.getOrderedStructureMemberNames());
	}
};
oFF.QueryManager.prototype.resetExitOrUpdateDynamicVariable = oFF.noSupport;
oFF.QueryManager.prototype.resetMaxResultRecords = function()
{
	this.getResultsetContainer(true).resetMaxResultRecords();
	return null;
};
oFF.QueryManager.prototype.resetNewValues = function()
{
	this.getPlanningManager().resetNewValues();
};
oFF.QueryManager.prototype.resetPreparation = function()
{
	this.m_hasPreparedAfterVariables = false;
};
oFF.QueryManager.prototype.resetVisualizationContainers = function()
{
	let queryModel = this.getQueryModel();
	let visualizationManager = oFF.isNull(queryModel) ? null : queryModel.getVisualizationManager();
	if (oFF.notNull(visualizationManager))
	{
		let gridCollector = visualizationManager.getGridCollector();
		if (oFF.notNull(gridCollector))
		{
			gridCollector.resetState();
		}
		let visualizationDefinitions = visualizationManager.getVisualizationDefinitions();
		if (oFF.XCollectionUtils.hasElements(visualizationDefinitions))
		{
			oFF.XCollectionUtils.forEach(visualizationDefinitions, (visDef) => {
				visDef.resetVisualizationContainer();
			});
		}
	}
};
oFF.QueryManager.prototype.resumeEventing = function()
{
	this.assertLifeCycleActive();
	if (oFF.notNull(this.m_queryModel))
	{
		this.m_queryModel.resumeEventing();
	}
};
oFF.QueryManager.prototype.retriggerQueryExecutionWithCustomHierarchies = function(syncType, listener, customIdentifier, resultSetContainer)
{
	oFF.QueryManagerProcessingSequence.createSequence(this, resultSetContainer, false, true).processSyncAction(syncType, listener, customIdentifier);
};
oFF.QueryManager.prototype.returnToPreviousProcessorState = function()
{
	if (this.m_variableProcessorPreviousState === oFF.VariableProcessorState.PROCESSING_REINIT)
	{
		this.m_variableProcessorPreviousState = oFF.VariableProcessorState.CHANGEABLE_REINIT;
	}
	else if (this.m_variableProcessorPreviousState === oFF.VariableProcessorState.PROCESSING_SUBMIT || this.m_variableProcessorPreviousState === oFF.VariableProcessorState.PROCESSING_SUBMIT_AFTER_REINIT || this.m_variableProcessorPreviousState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT || this.m_variableProcessorPreviousState === oFF.VariableProcessorState.PROCESSING_AUTO_SUBMIT_AFTER_REINIT)
	{
		this.m_variableProcessorPreviousState = oFF.VariableProcessorState.SUBMITTED;
	}
	if (this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.CHANGEABLE_REINIT && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.CHANGEABLE_STARTUP && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.SUBMITTED && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.SUBMIT_FAILED && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.SUBMIT_FAILED_AFTER_REINIT && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.VALUE_HELP && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION && this.m_variableProcessorPreviousState !== oFF.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER)
	{
		oFF.XObjectExt.assertNotNullExt(this.m_variableProcessorPreviousState, "Not allowed to return to previous state: [null]");
		throw oFF.XException.createIllegalStateException(oFF.XStringUtils.concatenate2("Not allowed to return to previous state: ", this.m_variableProcessorPreviousState.getName()));
	}
	let tmp = this.m_variableProcessorPreviousState;
	this.setVariableProcessorState(tmp);
	this.m_variableProcessorPreviousState = null;
};
oFF.QueryManager.prototype.saveVariableVariant = oFF.noSupport;
oFF.QueryManager.prototype.serialize = function(modelFormat, capabilities)
{
	return this.serializeToStringExt(modelFormat, capabilities);
};
oFF.QueryManager.prototype.serializeToContent = function(modelFormat)
{
	return this.serializeToContentExt(modelFormat, null);
};
oFF.QueryManager.prototype.serializeToContentExt = function(modelFormat, capabilities)
{
	if (oFF.notNull(this.m_lovManager) && this.m_lovManager.isLovAbstractionEnabled() && modelFormat.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		return this.m_lovManager.serializeToContentExt(modelFormat, capabilities);
	}
	let exporter;
	let theCapabilities = capabilities;
	if (oFF.isNull(theCapabilities) && modelFormat.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		theCapabilities = this.getModelCapabilities();
	}
	let contextType = null;
	if (modelFormat.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		contextType = oFF.QContextType.RESULT_SET;
	}
	exporter = oFF.QInAExportFactory.create(this.getApplication(), modelFormat, theCapabilities, contextType);
	let element = exporter.exportComponent(null, this, null, oFF.QImExFlag.DEFAULT_ALL);
	let content = oFF.XContent.createJsonObjectContent(modelFormat, element);
	return content;
};
oFF.QueryManager.prototype.serializeToElement = function(modelFormat)
{
	return this.serializeToElementExt(modelFormat, null);
};
oFF.QueryManager.prototype.serializeToElementExt = function(modelFormat, capabilities)
{
	let content = this.serializeToContentExt(modelFormat, capabilities);
	let inaStructure = content.getJsonContent();
	return inaStructure;
};
oFF.QueryManager.prototype.serializeToFormat = function(modelFormat)
{
	return this.serializeToString(modelFormat);
};
oFF.QueryManager.prototype.serializeToString = function(modelFormat)
{
	let content = this.serializeToContentExt(modelFormat, null);
	let inaStructure = content.getJsonContent();
	return oFF.PrUtils.serialize(inaStructure, true, false, 0);
};
oFF.QueryManager.prototype.serializeToStringExt = function(modelFormat, capabilities)
{
	let content = this.serializeToContentExt(modelFormat, capabilities);
	let inaStructure = content.getJsonContent();
	return oFF.PrUtils.serialize(inaStructure, true, false, 0);
};
oFF.QueryManager.prototype.setActiveResultSetContainer = function(activeResultSetContainer)
{
	this.m_activeContainer = activeResultSetContainer;
};
oFF.QueryManager.prototype.setCacheHintEnabled = function(enabled)
{
	this.m_cacheHintsEnabled = enabled;
};
oFF.QueryManager.prototype.setChangedProperties = oFF.noSupport;
oFF.QueryManager.prototype.setClientInfo = function(version, identifier, component)
{
	this.getClientInfo().setClientInfo(version, identifier, component);
};
oFF.QueryManager.prototype.setClientQueryObjectMigrationStorageName = function(storageName)
{
	this.m_clientQueryObjectStorageName = storageName;
};
oFF.QueryManager.prototype.setClientQueryObjectStorageName = function(storageName)
{
	this.m_clientQueryObjectStorageName = storageName;
};
oFF.QueryManager.prototype.setDataEntryEnabled = function(dataEntryEnabled)
{
	this.getPlanningManager().setDataEntryEnabled(dataEntryEnabled);
};
oFF.QueryManager.prototype.setDataEntryReadOnly = function(dataEntryReadOnly)
{
	this.getPlanningManager().setDataEntryReadOnly(dataEntryReadOnly);
};
oFF.QueryManager.prototype.setDataRefreshEnabled = function(dataRefreshEnabled)
{
	if (this.getResultsetContainer(false).getDataRefreshEnabled() !== dataRefreshEnabled)
	{
		this.getResultsetContainer(true).setDataRefreshEnabled(dataRefreshEnabled);
	}
};
oFF.QueryManager.prototype.setDataSource = function(dataSource)
{
	this.m_dataSource = dataSource;
};
oFF.QueryManager.prototype.setDeserializationStructureAsNull = oFF.noSupport;
oFF.QueryManager.prototype.setDimensionsRequestedFromClient = function(dimensionsRequestedFromClient)
{
	this.m_dimensionsRequestedFromClient = dimensionsRequestedFromClient;
};
oFF.QueryManager.prototype.setDimensionsToClone = function(dimensionsToClone)
{
	this.m_dimensionsToClone = dimensionsToClone;
};
oFF.QueryManager.prototype.setDirectVariableTransferEnabled = function(directVariableTransfer)
{
	if (this.m_directVariableTransferConsumer !== directVariableTransfer)
	{
		if (this.supportsDirectVariableTransfer())
		{
			this.m_directVariableTransferConsumer = directVariableTransfer;
			this.getVariableProcessorProvider().setDirectVariableTransfer(directVariableTransfer);
			this.getVariableProcessorProvider().setIsVariableSubmitNeeded(!this.m_directVariableTransferConsumer);
			if (oFF.notNull(this.m_queryModel))
			{
				this.m_queryModel.notifyNodeChanged();
			}
			if (this.m_directVariableTransferConsumer)
			{
				this.setVariableProcessorState(oFF.VariableProcessorState.CHANGEABLE_DIRECT_VALUE_TRANSFER);
			}
			else
			{
				this.setVariableProcessorState(oFF.VariableProcessorState.CHANGEABLE_REINIT);
			}
		}
	}
};
oFF.QueryManager.prototype.setExecuteRequestOnOldResultSet = function(executeRequestOnOldResultSet)
{
	if (this.getResultsetContainer(false).getExecuteRequestOnOldResultSet() !== executeRequestOnOldResultSet)
	{
		this.getResultsetContainer(true).setExecuteRequestOnOldResultSet(executeRequestOnOldResultSet);
	}
	return null;
};
oFF.QueryManager.prototype.setInputReadinessCacheMode = function(cacheMode)
{
	this.getPlanningManager().setInputReadinessCacheMode(cacheMode);
};
oFF.QueryManager.prototype.setInputReadinessFilter = function(mode)
{
	this.getQueryModel().setInputReadinessFilter(mode);
};
oFF.QueryManager.prototype.setInputReadinessMainQuery = function(mainQuery)
{
	this.getPlanningManager().setInputReadinessMainQuery(mainQuery);
};
oFF.QueryManager.prototype.setIsMetadataCached = function(isMetadataCached)
{
	this.m_isMetadataCached = isMetadataCached;
};
oFF.QueryManager.prototype.setLanguageLocale = function(languageLocale)
{
	this.getClientInfo().setLanguageLocale(languageLocale);
};
oFF.QueryManager.prototype.setLifeCycleState = function(desiredLifeCycleState)
{
	if (desiredLifeCycleState === oFF.LifeCycleState.TERMINATED && this.m_lifeCycleState === oFF.LifeCycleState.RELEASED)
	{
		return;
	}
	if (desiredLifeCycleState.getCode() < this.m_lifeCycleState.getCode())
	{
		let buffer = oFF.XStringBuffer.create();
		buffer.append("QueryManager: cannot change lifeCycle from ");
		buffer.append(this.m_lifeCycleState.getName()).append(" to ");
		buffer.append(desiredLifeCycleState.getName());
		throw oFF.XException.createIllegalStateException(buffer.toString());
	}
	this.m_lifeCycleState = desiredLifeCycleState;
};
oFF.QueryManager.prototype.setMaxColumns = function(max)
{
	if (this.getResultsetContainer(false).getMaxColumns() !== max)
	{
		this.getResultsetContainer(true).setMaxColumns(max);
	}
	return null;
};
oFF.QueryManager.prototype.setMaxResultRecords = function(maxResultRecords)
{
	if (this.getResultsetContainer(false).getMaxResultRecords() !== maxResultRecords)
	{
		this.getResultsetContainer(true).setMaxResultRecords(maxResultRecords);
	}
	return null;
};
oFF.QueryManager.prototype.setMaxRows = function(max)
{
	if (this.getResultsetContainer(false).getMaxRows() !== max)
	{
		this.getResultsetContainer(true).setMaxRows(max);
	}
	return null;
};
oFF.QueryManager.prototype.setMode = function(mode)
{
	this.m_mode = mode;
};
oFF.QueryManager.prototype.setName = function(name)
{
	oFF.XStringUtils.checkStringNotEmpty(name, "Name of query manager must be a valid string");
	let olapEnv = this.getOlapEnvironmentBase();
	if (!oFF.XString.isEqual(name, this.m_name))
	{
		if (olapEnv.containsQueryManagerWithName(name))
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Olap Environment already contains Query Manager with name:", name));
		}
		olapEnv.unregisterQueryManager(this);
		this.m_name = name;
		olapEnv.registerQueryManager(this);
	}
};
oFF.QueryManager.prototype.setNameForMicroCubeUse = function(name)
{
	let olapEnv = this.getOlapEnv();
	let isValidValue = olapEnv.addMicroCube(this.getSystemName(), name, this);
	oFF.XBooleanUtils.checkTrue(isValidValue, oFF.XStringUtils.concatenate2("MicroCube's name is not valid or already exists: ", name));
	this.m_myNameAsMicroCube = name;
};
oFF.QueryManager.prototype.setNoVariableSubmitResponse = oFF.noSupport;
oFF.QueryManager.prototype.setOffsetColumns = function(offset)
{
	if (this.getResultsetContainer(false).getOffsetColumns() !== offset)
	{
		this.getResultsetContainer(true).setOffsetColumns(offset);
	}
	return null;
};
oFF.QueryManager.prototype.setOffsetRows = function(offset)
{
	if (this.getResultsetContainer(false).getOffsetRows() !== offset)
	{
		this.getResultsetContainer(true).setOffsetRows(offset);
	}
	return null;
};
oFF.QueryManager.prototype.setPlanningMode = function(planningMode)
{
	this.getPlanningManager().setPlanningMode(planningMode);
};
oFF.QueryManager.prototype.setPlanningRestriction = function(restrictionType)
{
	this.getPlanningManager().setPlanningRestriction(restrictionType);
};
oFF.QueryManager.prototype.setPlanningVersionSettingsMode = function(settingsMode)
{
	this.getPlanningManager().setPlanningVersionSettingsMode(settingsMode);
};
oFF.QueryManager.prototype.setPreQueryName = function(preQueryName)
{
	this.m_preQueryName = preQueryName;
};
oFF.QueryManager.prototype.setPreviousVariableProcessorState = function(variableProcessorPreviousState)
{
	this.m_variableProcessorPreviousState = variableProcessorPreviousState;
};
oFF.QueryManager.prototype.setPublicVersionEditPossible = function(publicVersionEdit)
{
	this.getPlanningManager().setPublicVersionEditPossible(publicVersionEdit);
};
oFF.QueryManager.prototype.setRequestPerformanceData = function(requestPerformanceData)
{
	if (this.getSystemType().isTypeOf(oFF.SystemType.HANA))
	{
		this.m_includePerformanceData = oFF.TriStateBool.lookup(requestPerformanceData);
	}
};
oFF.QueryManager.prototype.setResultSetPersistanceTargetSchema = function(resultSetPersistenceSchema)
{
	let currentSchema = this.getResultsetContainer(false).getResultSetPersistenceSchema();
	if (!oFF.XString.isEqual(currentSchema, resultSetPersistenceSchema))
	{
		this.getResultsetContainer(true).setResultSetPersistanceTargetSchema(resultSetPersistenceSchema);
	}
	return null;
};
oFF.QueryManager.prototype.setResultSetPersistanceTargetTable = function(resultSetPersistenceTable)
{
	let currentTable = this.getResultsetContainer(false).getResultSetPersistenceTable();
	if (!oFF.XString.isEqual(currentTable, resultSetPersistenceTable))
	{
		this.getResultsetContainer(true).setResultSetPersistanceTargetTable(resultSetPersistenceTable);
	}
	return null;
};
oFF.QueryManager.prototype.setResultSetPersistenceIdentifier = function(resultSetPersistenceIdentifier)
{
	let currentIdentifier = this.getResultsetContainer(false).getResultSetPersistenceIdentifier();
	if (!oFF.XString.isEqual(currentIdentifier, resultSetPersistenceIdentifier))
	{
		this.getResultsetContainer(true).setResultSetPersistenceIdentifier(resultSetPersistenceIdentifier);
	}
	return null;
};
oFF.QueryManager.prototype.setResultSetPersistenceTargetType = function(resultSetPersistenceType)
{
	let currentType = this.getResultsetContainer(false).getResultSetPersistenceType();
	if (currentType !== resultSetPersistenceType)
	{
		this.getResultsetContainer(true).setResultSetPersistenceTargetType(resultSetPersistenceType);
	}
	return null;
};
oFF.QueryManager.prototype.setResultSetTransportEnabled = function(isEnabled)
{
	if (this.getResultsetContainer(false).isResultSetTransportEnabled() !== isEnabled)
	{
		this.getResultsetContainer(true).setResultSetTransportEnabled(isEnabled);
	}
	return null;
};
oFF.QueryManager.prototype.setStoryId = function(storyId)
{
	this.getClientInfo().setStoryId(storyId);
};
oFF.QueryManager.prototype.setStoryName = function(storyName)
{
	this.getClientInfo().setStoryName(storyName);
};
oFF.QueryManager.prototype.setSuppressCalculatedMembersWithoutBookedData = function(suppressIndicator)
{
	this.getResultsetContainer(true).setSuppressCalculatedMembersWithoutBookedData(suppressIndicator);
};
oFF.QueryManager.prototype.setSuppressKeyfigureCalculation = function(doSupress)
{
	if (this.getResultsetContainer(false).isKeyfigureCalculationSuppressed() !== doSupress)
	{
		this.getResultsetContainer(true).setSuppressKeyfigureCalculation(doSupress);
	}
	return null;
};
oFF.QueryManager.prototype.setSystemDescription = function(systemDescription)
{
	this.m_systemDescription = oFF.XWeakReferenceUtil.getWeakRef(systemDescription);
};
oFF.QueryManager.prototype.setUpdatingDataRequestCapabilities = oFF.noSupport;
oFF.QueryManager.prototype.setUseSavedPromptsForExitVariables = function(disableExitVariables)
{
	this.m_disableExitVariables = disableExitVariables;
};
oFF.QueryManager.prototype.setValidateLocalFormulaMembers = function(validate)
{
	this.m_validateLocalFormulaMembers = validate;
};
oFF.QueryManager.prototype.setValueHelpProvider = oFF.noSupport;
oFF.QueryManager.prototype.setVariableProcessorState = function(variableProcessorState)
{
	if (variableProcessorState === oFF.VariableProcessorState.VALUE_HELP)
	{
		this.m_variableProcessorPreviousState = variableProcessorState;
		this.m_variableProcessorState = variableProcessorState;
	}
	else
	{
		if (this.m_variableProcessorState !== variableProcessorState)
		{
			this.m_variableProcessorPreviousState = this.m_variableProcessorState;
			this.m_variableProcessorState = variableProcessorState;
			if (oFF.notNull(this.m_processorStateListeners))
			{
				for (let i = this.m_processorStateListeners.size() - 1; i >= 0; i--)
				{
					let listenerPair = this.m_processorStateListeners.get(i);
					let listener = listenerPair.getListener();
					listener.onVariableProcessorStateChanged(this, listenerPair.getCustomIdentifier());
				}
			}
		}
	}
};
oFF.QueryManager.prototype.setVersionAliasById = function(aliasName, versionId)
{
	this.getPlanningManager().setVersionAliasById(aliasName, versionId);
};
oFF.QueryManager.prototype.setWidgetId = function(widgetId)
{
	this.getClientInfo().setWidgetId(widgetId);
};
oFF.QueryManager.prototype.setWinControlInAutoSubmitByType = function(variableType, isWinControlInAutoSubmit, isLimitToExitVariable)
{
	this.assertLifeCycleActive();
	this.m_queryModel.setWinControlInAutoSubmitByType(variableType, isWinControlInAutoSubmit, isLimitToExitVariable);
};
oFF.QueryManager.prototype.setkeyRefSerializationEnabled = function(keyRefSerializationEnabled)
{
	this.m_keyRefSerializationEnabled = keyRefSerializationEnabled;
};
oFF.QueryManager.prototype.setupClone = function(origin, cloneMode, dataSource)
{
	let application = origin.getApplication();
	let serviceConfig = origin.getServiceConfig();
	let serviceConfigClone;
	if (cloneMode === oFF.QueryCloneMode.MICRO_CUBE)
	{
		serviceConfigClone = serviceConfig.cloneUsingExtDataSource(dataSource);
	}
	else
	{
		serviceConfigClone = serviceConfig.clone();
	}
	oFF.DfService.prototype.setupService.call( this , serviceConfigClone);
	serviceConfigClone.linkToQueryManager(this);
	let connectionPool = application.getConnectionPool();
	let origSystemDescription = origin.getSystemDescription();
	let originConnection = origin.getConnection();
	let cloneConnection = originConnection;
	if (oFF.isNull(originConnection))
	{
		cloneConnection = connectionPool.getConnection(origSystemDescription.getSystemName());
	}
	else if (originConnection.useSessionUrlRewrite() && connectionPool.getMaximumSharedConnections(origSystemDescription.getSystemName()) > 1)
	{
		cloneConnection = connectionPool.getConnectionExt(origSystemDescription.getSystemName(), false, originConnection.getName());
		if (originConnection.getWebServicePathForBLOBs() !== null)
		{
			cloneConnection.setWebServicePathForBLOBs(originConnection.getWebServicePathForBLOBs().getPath());
		}
	}
	if (cloneMode === oFF.QueryCloneMode.MICRO_CUBE)
	{
		this.setDataSource(dataSource);
	}
	else
	{
		let dataSourceOrigin = origin.getDataSource();
		let dataSourceClone = null;
		if (oFF.notNull(dataSourceOrigin))
		{
			dataSourceClone = dataSourceOrigin.clone();
		}
		this.setDataSource(dataSourceClone);
	}
	this.setConnection(cloneConnection);
	this.setSystemDescription(origSystemDescription);
	this.getSettingsBase().setDataRequest(origin.getInitSettings().getDataRequest());
	this.setUseSavedPromptsForExitVariables(origin.isUsingSavedPromptsForExitVariables());
	this.getClientInfo().copyFromContext(origin);
	this.setupValues();
	this.m_includePerformanceData = origin.getIncludePerformanceData();
	if (origin.getQueryModel() !== null)
	{
		this.setupQueryModel();
	}
	this.m_lifeCycleState = oFF.LifeCycleState.STARTING_UP;
	this.m_mode = origin.getMode();
	this.m_activeContainer = oFF.ResultSetContainer.create(this, origin.getActiveResultSetContainer());
	this.m_enableHierarchyToUDHConversion = origin.isHierarchyToUDHConversionEnabled();
	this.m_clientQueryObjectStorageName = origin.getClientQueryObjectStorageName();
	this.m_validateLocalFormulaMembers = origin.isValidatingLocalFormulaMembers();
	this.setOffsetColumns(origin.getOffsetColumns());
	this.setOffsetRows(origin.getOffsetRows());
	this.setMaxRows(origin.getMaxRows());
	this.setMaxColumns(origin.getMaxColumns());
	if (cloneMode !== oFF.QueryCloneMode.MICRO_CUBE)
	{
		let variableVariants = origin.getVariableVariants();
		if (oFF.notNull(variableVariants))
		{
			let sizeVariants = variableVariants.size();
			for (let idxVariants = 0; idxVariants < sizeVariants; idxVariants++)
			{
				this.addVariableVariant(variableVariants.get(idxVariants).clone());
			}
		}
	}
	if (oFF.XCollectionUtils.hasElements(serviceConfig.getRequiredDimensions()))
	{
		serviceConfigClone.setRequiredDimensions(serviceConfig.getRequiredDimensions().createListCopy());
	}
	if (oFF.XCollectionUtils.hasElements(origin.getDimensionsToClone()))
	{
		this.setDimensionsToClone(origin.getDimensionsToClone().createSetOfStringCopy());
		this.setDimensionsRequestedFromClient(origin.getDimensionsRequestedFromClient().createSetOfStringCopy());
	}
	if (oFF.notNull(this.m_queryModel))
	{
		this.m_queryModel.stopEventing();
	}
	let originQueryModel = origin.getQueryModel();
	if (oFF.notNull(originQueryModel))
	{
		let serverBaseSerialization;
		if (cloneMode === oFF.QueryCloneMode.BASE_STATE)
		{
			serverBaseSerialization = originQueryModel.getServerBaseSerializationForBaseState();
		}
		else
		{
			serverBaseSerialization = originQueryModel.getServerBaseSerialization();
		}
		if (cloneMode === oFF.QueryCloneMode.CURRENT_STATE || cloneMode === oFF.QueryCloneMode.MICRO_CUBE)
		{
			this.m_queryModel.copyQueryModel(originQueryModel, cloneMode);
		}
		else
		{
			let modelCapabilities = this.getModelCapabilities();
			if (cloneMode === oFF.QueryCloneMode.CURRENT_STATE_INA)
			{
				let serializer = oFF.QInAExportFactory.createForCloning(application, modelCapabilities);
				let inaQueryModel = serializer.exportQueryModel(originQueryModel, true, true);
				let deserializer = oFF.QInAImportFactory.createForCloning(application, modelCapabilities);
				deserializer.importQueryModel(inaQueryModel, this.m_queryModel);
				oFF.MessageUtil.checkNoError(deserializer);
			}
			else if (cloneMode === oFF.QueryCloneMode.BASE_STATE)
			{
				let deserializer2 = oFF.QInAImportFactory.create(application, oFF.QModelFormat.INA_METADATA, modelCapabilities);
				deserializer2.importQueryModel(serverBaseSerialization, this.m_queryModel);
			}
			else
			{
				throw oFF.XException.createRuntimeException(oFF.XStringUtils.concatenate2("Mode not yet supported: ", cloneMode.toString()));
			}
		}
		this.m_queryModel.getDrillManager().setValidateContextFreeNavigations(originQueryModel.getDrillManager().isValidatingContextFreeNavigations());
		this.m_queryModel.setExportFixedFilter(originQueryModel.isExportingFixedFilter());
		this.m_queryModel.setExportVariables(originQueryModel.isExportingVariables());
		this.m_queryModel.setServerBaseSerialization(null, oFF.QModelOrigin.CLONING, serverBaseSerialization);
		this.m_queryModel.setSupportsDataEntryReadOnly(originQueryModel.supportsDataEntryReadOnly());
		this.m_queryModel.setDataEntryReadOnly(originQueryModel.isDataEntryReadOnly());
		this.m_queryModel.setDataEntryEnabled(originQueryModel.isDataEntryEnabled());
		this.reorderStructureMember(this.m_queryModel.getMeasureDimension(), originQueryModel.getMeasureDimension());
		this.reorderStructureMember(this.m_queryModel.getNonMeasureDimension(), originQueryModel.getNonMeasureDimension());
		this.reorderStructureMember(this.m_queryModel.getNonMeasureDimension2(), originQueryModel.getNonMeasureDimension2());
		this.reorderStructureMember(this.m_queryModel.getAccountDimension(), originQueryModel.getAccountDimension());
		this.m_queryModel.getDrillManagerBase().copyRootNodesFrom(originQueryModel.getDrillManager());
		this.m_queryModel.getDrillManagerBase().setBackendDrillValidationForAutoSubmit(originQueryModel.getDrillManager().isBackendDrillValidationForAutoSubmit());
	}
	this.m_metadataModel = origin.getMetadataModel().cloneOlapComponent(this.getQueryModel(), null);
	if (oFF.notNull(this.m_queryModel) && this.getInitSettings().isExternalizedNonVariableFilter())
	{
		let olapEnvironment = this.getOlapEnv();
		let olapFilterManager = oFF.isNull(olapEnvironment) ? null : olapEnvironment.getFilterManager();
		if (cloneMode === oFF.QueryCloneMode.BASE_STATE)
		{
			olapFilterManager.externalizeNonVariableFilter(this);
		}
		else
		{
			let externalizedNonVariableFilter = oFF.isNull(olapFilterManager) ? null : olapFilterManager.getNonVariableDrivenFilters(origin);
			if (oFF.notNull(externalizedNonVariableFilter))
			{
				let filter = this.m_queryModel.getFilter();
				let filterName = filter.getExternalizedNonVariableFilterName();
				let newNonVariableFilter = olapFilterManager.getFilterByName(filterName);
				let newProduct = newNonVariableFilter.getCartesianProductWithDefault();
				newProduct.copyFrom(externalizedNonVariableFilter, null);
				this.m_queryModel.getFilter().linkFilter(filterName, newNonVariableFilter);
			}
		}
	}
	if (oFF.notNull(this.m_queryModel))
	{
		let instanceId = serviceConfigClone.getInstanceId();
		let dataSourceBase = this.m_queryModel.getDataSourceBase();
		dataSourceBase.setInstanceId(instanceId);
		this.m_queryModel.resumeEventing();
	}
	if (this.getResultSetPersistenceIdentifier() !== null)
	{
		this.setResultSetPersistenceIdentifier(null);
		this.setResultSetPersistanceTargetSchema(null);
		this.setResultSetPersistanceTargetTable(null);
	}
	if (origin.hasLovManager())
	{
		this.getLovManager().copyFrom(origin.getLovManager(), null);
	}
	if (origin.hasPlanningManager())
	{
		this.getPlanningManager().copyFrom(origin.getPlanningManager(), null);
	}
	this.setLifeCycleState(oFF.LifeCycleState.ACTIVE);
	if (oFF.VariableProcessorState.PROCESSING_EMPTY_VARIABLE_DEFINITION === origin.getVariableProcessorState())
	{
		this.setVariableProcessorState(origin.getVariableProcessorState());
	}
	this.m_includePerformanceData = origin.getIncludePerformanceData();
	this.setCacheHintEnabled(origin.isCacheHintEnabled());
	this.m_keyRefSerializationEnabled = origin.isKeyRefSerializationEnabled();
};
oFF.QueryManager.prototype.setupQueryModel = function()
{
	let capabilities = this.getCapabilitiesBase();
	this.m_queryModel = oFF.QueryModel.create(this.getOlapEnv(), this, capabilities);
	if (this.isLightweightSearch())
	{
		this.m_queryModel.getModelCapabilitiesBase().setSupportsComplexFilter(true);
	}
	let dataSource = this.getDataSource();
	if (oFF.notNull(dataSource))
	{
		this.m_queryModel.getModelCapabilitiesBase().setSupportsExtendedVariableDefinition(this.supportsAndAllowsEmptyExtendedVarDefinition());
		this.m_queryModel.getDataSourceBase().copyFrom(dataSource, null);
	}
	return this.m_queryModel;
};
oFF.QueryManager.prototype.setupService = function(serviceConfigInfo)
{
	oFF.DfService.prototype.setupService.call( this , serviceConfigInfo);
	let config = serviceConfigInfo;
	let dataSource = config.getDataSource();
	let targetDataSource;
	if (oFF.notNull(dataSource))
	{
		targetDataSource = dataSource.clone();
	}
	else
	{
		targetDataSource = oFF.QDataSource.create();
	}
	this.setDataSource(targetDataSource);
};
oFF.QueryManager.prototype.setupValues = function()
{
	this.m_lifeCycleState = oFF.LifeCycleState.INITIAL;
	this.m_activeContainer = oFF.ResultSetContainer.create(this, null);
	this.m_variableProcessorState = oFF.VariableProcessorState.CHANGEABLE_STARTUP;
	let olapEnvironmentBase = this.getOlapEnvironmentBase();
	olapEnvironmentBase.registerQueryManager(this);
	this.m_queryExecutedListener = oFF.XSimpleMap.create();
	this.m_beforeQueryExecutionListener = oFF.XSimpleMap.create();
	this.m_includePerformanceData = oFF.TriStateBool._DEFAULT;
	this.m_isMetadataCached = false;
	this.m_keyRefSerializationEnabled = true;
	this.m_clientQueryObjectStorageName = null;
};
oFF.QueryManager.prototype.stopEventing = function()
{
	this.assertLifeCycleActive();
	if (oFF.notNull(this.m_queryModel))
	{
		this.m_queryModel.stopEventing();
	}
};
oFF.QueryManager.prototype.submitVariables = function(syncType, listener, customIdentifier)
{
	return this.getVariableProcessorProvider().processVariableSubmit(syncType, listener, customIdentifier);
};
oFF.QueryManager.prototype.supportsAnalyticCapability = function(capabilityName)
{
	if (oFF.XStringUtils.isNullOrEmpty(capabilityName))
	{
		return false;
	}
	let connectionContainer = this.getConnection();
	if (oFF.isNull(connectionContainer))
	{
		return false;
	}
	return connectionContainer.getSystemConnect().getServerMetadata().supportsCapability(oFF.ServerService.ANALYTIC, capabilityName);
};
oFF.QueryManager.prototype.supportsAndAllowsEmptyExtendedVarDefinition = function()
{
	let type = this.getDataSource().getType();
	return this.getCapabilitiesBase().supportsExtendedVariableDefinition() && this.getQueryServiceConfig().getMakeEmptyVariableDefinitionInsteadOfMetadata() && (oFF.MetaObjectType.QUERY === type || oFF.MetaObjectType.DEFAULT_PLAN_QUERY === type || oFF.MetaObjectType.DEFAULT_REPORT_QUERY === type || oFF.MetaObjectType.LOCAL_QUERY === type || oFF.MetaObjectType.QUERY_VIEW === type);
};
oFF.QueryManager.prototype.supportsBatchBlendingRsStreaming = function()
{
	return this.getCapabilitiesBase().supportsBatchBlendingRsStreaming();
};
oFF.QueryManager.prototype.supportsBatchBlendingRsStreamingExt = function()
{
	let isBlended = false;
	let initSettings = this.getInitSettings();
	if (initSettings.getMode() === oFF.QueryManagerMode.BLENDING)
	{
		isBlended = true;
	}
	else if (initSettings.getMode() === oFF.QueryManagerMode.RAW_QUERY)
	{
		let structureJSON = initSettings.getDataRequest();
		if (oFF.notNull(structureJSON) && structureJSON.containsKey("Analytics"))
		{
			structureJSON = structureJSON.getStructureByKey("Analytics");
			if (structureJSON.containsKey("DataSource"))
			{
				structureJSON = structureJSON.getStructureByKey("DataSource");
				if (structureJSON.containsKey("Sources"))
				{
					let sourcesStructureJSON = structureJSON.getListByKey("Sources");
					if (sourcesStructureJSON.size() > 0)
					{
						isBlended = true;
					}
				}
			}
		}
	}
	return isBlended ? this.supportsBatchBlendingRsStreaming() : this.supportsBatchRsStreaming();
};
oFF.QueryManager.prototype.supportsBatchRsStreaming = function()
{
	return this.getCapabilitiesBase().supportsBatchRsStreaming();
};
oFF.QueryManager.prototype.supportsCheckVariables = function()
{
	return this.getCapabilitiesBase().supportsCheckVariables();
};
oFF.QueryManager.prototype.supportsDataEntryReadOnly = function()
{
	return this.getPlanningManager().supportsDataEntryReadOnly();
};
oFF.QueryManager.prototype.supportsDirectVariableTransfer = function()
{
	return this.getCapabilitiesBase().supportsDirectVariableTransfer();
};
oFF.QueryManager.prototype.supportsInputReadinessStates = function()
{
	return this.getCapabilitiesBase().supportsInputReadinessStates();
};
oFF.QueryManager.prototype.supportsMaintainsVariableVariants = function()
{
	return this.getCapabilitiesBase().supportsMaintainsVariableVariants();
};
oFF.QueryManager.prototype.supportsReInitVariables = function()
{
	return this.getCapabilitiesBase().supportsReInitVariables();
};
oFF.QueryManager.prototype.supportsReturnedDataSelection = function()
{
	return this.getCapabilitiesBase().supportsReturnedDataSelection();
};
oFF.QueryManager.prototype.supportsServerState = function()
{
	return this.getCapabilitiesBase().supportsServerState();
};
oFF.QueryManager.prototype.supportsShutdown = function()
{
	return this.getCapabilitiesBase().supportsShutdown();
};
oFF.QueryManager.prototype.supportsVariableMasking = function()
{
	return this.getCapabilitiesBase().supportsVariableMasking();
};
oFF.QueryManager.prototype.transferDataEntry = function()
{
	let resultSetContainer = this.getActiveResultSetContainerBase();
	let resultSetId = resultSetContainer.getId();
	let dataEntryCollection = resultSetContainer.getDataEntryCollection();
	resultSetContainer.setDataEntryCollection(null);
	let newLineCollection = resultSetContainer.getNewLineCollection();
	resultSetContainer.setNewLineCollection(null);
	let documentIdCollection = resultSetContainer.getDocumentIdCollection();
	resultSetContainer.setDocumentIdCollection(null);
	this.getResultsetContainer(true);
	resultSetContainer = this.getActiveResultSetContainerBase();
	resultSetContainer.setId(resultSetId);
	resultSetContainer.setDataEntryCollection(dataEntryCollection);
	resultSetContainer.setNewLineCollection(newLineCollection);
	resultSetContainer.setDocumentIdCollection(documentIdCollection);
};
oFF.QueryManager.prototype.transferNewDocuments = function()
{
	let resultSetContainer = this.getActiveResultSetContainerBase();
	let resultSetId = resultSetContainer.getId();
	let documentIdCollection = resultSetContainer.getDocumentIdCollection();
	resultSetContainer.setDocumentIdCollection(null);
	this.getResultsetContainer(true);
	resultSetContainer = this.getActiveResultSetContainerBase();
	resultSetContainer.setId(resultSetId);
	resultSetContainer.setDocumentIdCollection(documentIdCollection);
};
oFF.QueryManager.prototype.transferNewValues = function()
{
	this.getPlanningManager().transferNewValues();
};
oFF.QueryManager.prototype.transferVariables = oFF.noSupport;
oFF.QueryManager.prototype.transferVariablesByVariable = oFF.noSupport;
oFF.QueryManager.prototype.unregisterChangedListener = oFF.noSupport;
oFF.QueryManager.prototype.unregisterVariableProcessorStateChangedListener = function(listener)
{
	if (oFF.notNull(this.m_processorStateListeners))
	{
		for (let i = 0; i < this.m_processorStateListeners.size(); )
		{
			let listenerPair = this.m_processorStateListeners.get(i);
			if (listenerPair.getListener() === listener)
			{
				this.m_processorStateListeners.removeAt(i);
			}
			else
			{
				i++;
			}
		}
	}
};
oFF.QueryManager.prototype.updateDynamicVariables = oFF.noSupport;
oFF.QueryManager.prototype.updateQueryManager = oFF.noSupport;
oFF.QueryManager.prototype.updateVariableVariantValues = oFF.noSupport;
oFF.QueryManager.prototype.variablesRequireImplicitSubmit = function()
{
	if (this.isDirectVariableTransferEnabled())
	{
		return false;
	}
	if (this.isShallow())
	{
		return false;
	}
	if (this.isExecuteAutoVariableSubmit())
	{
		return false;
	}
	return (this.supportsAndAllowsEmptyExtendedVarDefinition() || this.hasVariables()) && !this.isSubmitted() && !this.isVariableSubmitFailed();
};
oFF.QueryManager.prototype.variablesRequireImplicitSubmitForValueHelp = function(valueHelpDimension)
{
	if (this.isDirectVariableTransferEnabled())
	{
		return false;
	}
	if (this.isShallow())
	{
		return false;
	}
	let isNonHierarchicalStructureMemberValueHelp = oFF.notNull(valueHelpDimension) && valueHelpDimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) && !valueHelpDimension.isHierarchyActive();
	if (this.isExecuteAutoVariableSubmit() && !(isNonHierarchicalStructureMemberValueHelp && this.getQueryModelBase().getVariableManagerBase().hasVariableByType(oFF.VariableType.TEXT_VARIABLE)))
	{
		return false;
	}
	if (isNonHierarchicalStructureMemberValueHelp && !this.getQueryModelBase().getVariableManagerBase().hasVariableByType(oFF.VariableType.TEXT_VARIABLE))
	{
		return false;
	}
	return (this.supportsAndAllowsEmptyExtendedVarDefinition() || this.hasVariables()) && !this.isSubmitted() && !this.isVariableSubmitFailed();
};
oFF.QueryManager.prototype.variablesRequireSACImplicitSubmit = function()
{
	if (this.isDirectVariableTransferEnabled() || this.isShallow())
	{
		return false;
	}
	return (this.supportsAndAllowsEmptyExtendedVarDefinition() || this.hasVariables()) && !this.isSubmitted() && !this.isVariableSubmitFailed();
};

oFF.QRriTarget = function() {};
oFF.QRriTarget.prototype = new oFF.QModelComponent();
oFF.QRriTarget.prototype._ff_c = "QRriTarget";

oFF.QRriTarget.m_supportedTargetTypes = null;
oFF.QRriTarget.create = function()
{
	let target = new oFF.QRriTarget();
	target.m_parameters = oFF.XHashMapByString.create();
	target.m_customProperties = oFF.XHashMapByString.create();
	target.m_targetType = oFF.RriTargetType.UNSUPPORTED;
	oFF.QRriTarget.setSupportedTargetTypes();
	return target;
};
oFF.QRriTarget.setSupportedTargetTypes = function()
{
	oFF.QRriTarget.m_supportedTargetTypes = oFF.XHashMapByString.create();
	oFF.QRriTarget.m_supportedTargetTypes.put("QURY", "Query");
	oFF.QRriTarget.m_supportedTargetTypes.put("TR", "Transaction");
	oFF.QRriTarget.m_supportedTargetTypes.put("URL", "Url");
	oFF.QRriTarget.m_supportedTargetTypes.put("RT", "AbapReport");
	oFF.QRriTarget.m_supportedTargetTypes.put("", "Transaction");
};
oFF.QRriTarget.prototype.m_customProperties = null;
oFF.QRriTarget.prototype.m_parameters = null;
oFF.QRriTarget.prototype.m_targetType = null;
oFF.QRriTarget.prototype.canBeExecutedLocally = function()
{
	if (this.m_parameters.containsKey("LogicalDestination"))
	{
		let logicalDestination = this.m_parameters.getByKey("LogicalDestination");
		if (oFF.XStringUtils.isNullOrEmpty(logicalDestination))
		{
			return true;
		}
		return oFF.XString.isEqual(logicalDestination, "*");
	}
	return false;
};
oFF.QRriTarget.prototype.getCustomProperties = function()
{
	return this.m_customProperties;
};
oFF.QRriTarget.prototype.getDataSource = function()
{
	if (!this.isQuery())
	{
		return null;
	}
	let query = this.m_customProperties.getByKey("QUERY");
	if (oFF.XStringUtils.isNullOrEmpty(query))
	{
		return null;
	}
	let rriName = this.m_customProperties.getByKey("RRI_PARAMETER_NAME");
	if (oFF.XStringUtils.isNullOrEmpty(rriName))
	{
		return null;
	}
	let rriValue = this.m_customProperties.getByKey("RRI_PARAMETER_VALUE");
	if (oFF.XStringUtils.isNullOrEmpty(rriValue))
	{
		return null;
	}
	let dataSource = oFF.QFactory.createDataSourceWithType(oFF.MetaObjectType.QUERY, query);
	dataSource.setRriName(rriName);
	dataSource.setRriValue(rriValue);
	return dataSource;
};
oFF.QRriTarget.prototype.getInfoProviderName = function()
{
	if (!this.isQuery())
	{
		return null;
	}
	return this.m_customProperties.getByKey("INFO_PROVIDER");
};
oFF.QRriTarget.prototype.getKey = function()
{
	return this.m_parameters.getByKey("Key");
};
oFF.QRriTarget.prototype.getParameters = function()
{
	return this.m_parameters;
};
oFF.QRriTarget.prototype.getQueryName = function()
{
	if (!this.isQuery())
	{
		return null;
	}
	return this.m_customProperties.getByKey("QUERY");
};
oFF.QRriTarget.prototype.getTargetType = function()
{
	return this.m_targetType;
};
oFF.QRriTarget.prototype.getTargetTypeByValue = function(parameterValue, isRri2Behavior)
{
	let typeName = oFF.QRriTarget.m_supportedTargetTypes.getByKey(parameterValue.getString());
	let defaultTypeName = isRri2Behavior ? "Unsupported" : "CustomDynamic";
	return oFF.RriTargetType.lookup(oFF.isNull(typeName) ? defaultTypeName : typeName);
};
oFF.QRriTarget.prototype.getTargetUrl = function()
{
	let url = null;
	if (this.m_targetType !== oFF.RriTargetType.UNSUPPORTED)
	{
		let targetUrl = this.m_parameters.getByKey("URL");
		let targetUri = oFF.XUri.createFromUrl(targetUrl);
		if (targetUri.getScheme() !== null && !targetUri.isRelativeUri())
		{
			let protocolType = targetUri.getProtocolType();
			if (protocolType === oFF.ProtocolType.HTTPS)
			{
				url = targetUri.getUrl();
			}
		}
	}
	return url;
};
oFF.QRriTarget.prototype.getText = function()
{
	return this.m_parameters.getByKey("Text");
};
oFF.QRriTarget.prototype.isQuery = function()
{
	return this.m_targetType === oFF.RriTargetType.QUERY;
};
oFF.QRriTarget.prototype.isTargetTypeSupported = function()
{
	return this.m_targetType !== oFF.RriTargetType.UNSUPPORTED;
};
oFF.QRriTarget.prototype.isTransaction = function()
{
	return this.m_targetType === oFF.RriTargetType.TRANSACTION;
};
oFF.QRriTarget.prototype.isWebUrl = function()
{
	return this.m_targetType === oFF.RriTargetType.URL;
};
oFF.QRriTarget.prototype.releaseObject = function()
{
	this.m_parameters = oFF.XObjectExt.release(this.m_parameters);
	this.m_customProperties = oFF.XObjectExt.release(this.m_customProperties);
	this.m_targetType = null;
	oFF.QRriTarget.m_supportedTargetTypes = oFF.XObjectExt.release(oFF.QRriTarget.m_supportedTargetTypes);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.QRriTarget.prototype.setParameterValues = function(targetStructure, isRri2Behavior)
{
	let parameterNames = oFF.PrUtils.getKeysAsReadOnlyList(targetStructure, null);
	if (oFF.notNull(parameterNames))
	{
		let parameters = this.getParameters();
		for (let i = 0; i < parameterNames.size(); i++)
		{
			let parameterName = parameterNames.get(i);
			let parameterValue = oFF.PrUtils.getStringProperty(targetStructure, parameterName);
			if (oFF.notNull(parameterValue))
			{
				if (oFF.XString.isEqual(parameterName, "ReceiverApplicationType") || oFF.XString.isEqual(parameterName, "AppType"))
				{
					this.setTargetType(this.getTargetTypeByValue(parameterValue, isRri2Behavior));
				}
				else
				{
					parameters.put(parameterName, parameterValue.getString());
				}
			}
		}
	}
};
oFF.QRriTarget.prototype.setProperties = function(targetStructure)
{
	let properties = oFF.PrUtils.getStructureProperty(targetStructure, "Properties");
	let propertyNames = oFF.PrUtils.getKeysAsReadOnlyList(properties, null);
	if (oFF.notNull(propertyNames))
	{
		let customProperties = this.getCustomProperties();
		for (let i = 0; i < propertyNames.size(); i++)
		{
			let propertyName = propertyNames.get(i);
			let propertyValue = oFF.PrUtils.getStringProperty(properties, propertyName);
			if (oFF.notNull(propertyValue))
			{
				customProperties.put(propertyName, propertyValue.getString());
			}
		}
	}
};
oFF.QRriTarget.prototype.setTargetType = function(targetType)
{
	this.m_targetType = targetType;
	this.notifyNodeChanged();
};

oFF.OlapVarImmediateCallback = function() {};
oFF.OlapVarImmediateCallback.prototype = new oFF.QOlapSyncAction();
oFF.OlapVarImmediateCallback.prototype._ff_c = "OlapVarImmediateCallback";

oFF.OlapVarImmediateCallback.createAndRun = function(syncType, listener, customIdentifier)
{
	let obj = new oFF.OlapVarImmediateCallback();
	obj.setupActionAndRun(syncType, listener, customIdentifier, null);
	return obj;
};
oFF.OlapVarImmediateCallback.createAndRunError = function(errorCode, errorMessage, syncType, listener, customIdentifier)
{
	let obj = new oFF.OlapVarImmediateCallback();
	obj.m_errorMessage = errorMessage;
	obj.m_errorCode = errorCode;
	obj.setupActionAndRun(syncType, listener, customIdentifier, null);
	return obj;
};
oFF.OlapVarImmediateCallback.prototype.m_errorCode = 0;
oFF.OlapVarImmediateCallback.prototype.m_errorMessage = null;
oFF.OlapVarImmediateCallback.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_errorMessage))
	{
		this.addError(this.m_errorCode, this.m_errorMessage);
	}
	listener.onVariableProcessorExecuted(this, this, customIdentifier);
};
oFF.OlapVarImmediateCallback.prototype.isSuccessfullyProcessed = function()
{
	return this.isValid();
};

oFF.AbstractBlendableQueryManager = function() {};
oFF.AbstractBlendableQueryManager.prototype = new oFF.QModelComponent();
oFF.AbstractBlendableQueryManager.prototype._ff_c = "AbstractBlendableQueryManager";

oFF.AbstractBlendableQueryManager.prototype.m_activeContainer = null;
oFF.AbstractBlendableQueryManager.prototype.m_clientQueryObjectStorageName = null;
oFF.AbstractBlendableQueryManager.prototype.m_primaryDatasetId = null;
oFF.AbstractBlendableQueryManager.prototype.m_queryManagers = null;
oFF.AbstractBlendableQueryManager.prototype.activateVariableVariant = function(variableVariant, syncType, listener, customIdentifier)
{
	let blendableVariableSubmitProcessor = oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor(this);
	return blendableVariableSubmitProcessor.activateVariableVariant(variableVariant, syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.addInputReadinessFilterState = function(flag, parameter)
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		queryModel.addInputReadinessFilterState(flag, parameter);
	}
};
oFF.AbstractBlendableQueryManager.prototype.addNewInputEnablementRule = function(mode, reason)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		return queryManager.addNewInputEnablementRule(mode, reason);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.addPlanningVersionSettings = function(sequenceSettings)
{
	let queryManager = this.getQueryManager();
	let settings = null;
	if (oFF.notNull(queryManager))
	{
		settings = queryManager.addPlanningVersionSettings(sequenceSettings);
	}
	return settings;
};
oFF.AbstractBlendableQueryManager.prototype.addVariableVariant = function(variant)
{
	this.getQueryManagerBase().addVariableVariant(variant);
};
oFF.AbstractBlendableQueryManager.prototype.applyRSFeatureRequest = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.applyRSFeatureRequest();
	}
};
oFF.AbstractBlendableQueryManager.prototype.applyState = function(syncType, listener, customerIdentifier, stateId)
{
	let queryManager = this.getQueryManager();
	let syncAction = null;
	if (oFF.notNull(queryManager))
	{
		syncAction = queryManager.applyState(syncType, listener, customerIdentifier, stateId);
	}
	return syncAction;
};
oFF.AbstractBlendableQueryManager.prototype.applyValueHelpCapabilities = function()
{
	this.getQueryManagerBase().applyValueHelpCapabilities();
};
oFF.AbstractBlendableQueryManager.prototype.applyingStateOnQueryManager = function()
{
	let queryManager = this.getQueryManager();
	let applyingState = false;
	if (oFF.notNull(queryManager))
	{
		applyingState = queryManager.applyingStateOnQueryManager();
	}
	return applyingState;
};
oFF.AbstractBlendableQueryManager.prototype.assertLifeCycleActive = function()
{
	if (this.getLifeCycleState() !== oFF.LifeCycleState.ACTIVE && this.getLifeCycleState() !== oFF.LifeCycleState.STARTING_UP)
	{
		throw oFF.XException.createIllegalStateException("Query manager is not active");
	}
};
oFF.AbstractBlendableQueryManager.prototype.attachBeforeQueryExecutionListener = function(listener, customIdentifier)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.attachBeforeQueryExecutionListener(listener, customIdentifier);
	}
};
oFF.AbstractBlendableQueryManager.prototype.attachQueryExecutedListener = function(listener, customIdentifier)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.attachQueryExecutedListener(listener, customIdentifier);
	}
};
oFF.AbstractBlendableQueryManager.prototype.cancelReInitVariables = function(syncType, listener, customIdentifier)
{
	let blendableVariableSubmitProcessor = oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor(this);
	return blendableVariableSubmitProcessor.cancelReInitVariables(syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.checkVariables = function(syncType, listener, customIdentifier)
{
	let blendableVariableSubmitProcessor = oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor(this);
	return blendableVariableSubmitProcessor.checkVariables(syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.clearExternalVariablesRepresentations = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.clearExternalVariablesRepresentations();
	}
};
oFF.AbstractBlendableQueryManager.prototype.clearInputEnablementRules = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.clearInputEnablementRules();
	}
};
oFF.AbstractBlendableQueryManager.prototype.clearInputReadinessFilter = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		queryModel.clearInputReadinessFilter();
	}
};
oFF.AbstractBlendableQueryManager.prototype.clearVariableVariants = function()
{
	this.getQueryManagerBase().clearVariableVariants();
};
oFF.AbstractBlendableQueryManager.prototype.clearVersionAliases = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.clearVersionAliases();
	}
};
oFF.AbstractBlendableQueryManager.prototype.cloneQueryManager = function()
{
	return this.cloneQueryManagerExt(oFF.QueryCloneMode.CURRENT_STATE);
};
oFF.AbstractBlendableQueryManager.prototype.cloneQueryManagerBase = function(cloneMode)
{
	return this.cloneQueryManagerExt(cloneMode);
};
oFF.AbstractBlendableQueryManager.prototype.cloneQueryManagerExt = function(cloneMode)
{
	let cloneBlendableQueryManager = this.newBlendableQueryManager();
	let keyRefStoreContext = oFF.QFactory.createKeyRefStoreContext(this.getOlapEnv().getModelLinkManager(), this.getStorageName());
	keyRefStoreContext.getKeyRefStorage().setSubKefRefStore(this.getOlapEnv().getClientQueryObjectManager().getKeyRefStorage());
	cloneBlendableQueryManager.setupBlendingManager(keyRefStoreContext);
	cloneBlendableQueryManager.setupClone(this, cloneMode, null);
	return cloneBlendableQueryManager;
};
oFF.AbstractBlendableQueryManager.prototype.cloneQueryManagerOptimized = function(neededDimensions)
{
	let cloneBlendableQueryManager = this.newBlendableQueryManager();
	let keyRefStoreContext = oFF.QFactory.createKeyRefStoreContext(this.getOlapEnv().getModelLinkManager(), this.getStorageName());
	keyRefStoreContext.getKeyRefStorage().setSubKefRefStore(this.getOlapEnv().getClientQueryObjectManager().getKeyRefStorage());
	cloneBlendableQueryManager.setupBlendingManager(keyRefStoreContext);
	cloneBlendableQueryManager.setupClone(this, oFF.QueryCloneMode.CURRENT_STATE, null);
	return cloneBlendableQueryManager;
};
oFF.AbstractBlendableQueryManager.prototype.cloneQueryManagerOptimizedWithLazyLoad = function(serializedModel)
{
	return this.cloneQueryManagerOptimizedWithLazyLoad(serializedModel);
};
oFF.AbstractBlendableQueryManager.prototype.cloneQueryManagerUsingExtDataSource = function(cloneMode, dataSource)
{
	let queryManager = this.getQueryManager();
	let cloneQueryManager = null;
	if (oFF.notNull(queryManager))
	{
		cloneQueryManager = queryManager.cloneQueryManagerUsingExtDataSource(cloneMode, dataSource);
	}
	return cloneQueryManager;
};
oFF.AbstractBlendableQueryManager.prototype.containsCode = function(severity, code)
{
	let queryManager = this.getQueryManager();
	let containsCode = false;
	if (oFF.notNull(queryManager))
	{
		containsCode = queryManager.containsCode(severity, code);
	}
	return containsCode;
};
oFF.AbstractBlendableQueryManager.prototype.copyFromInternal = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.createCustomHierarchyProvider = function(customHierarchyDefinition, enforceRequest)
{
	return this.getQueryManagerBase().createCustomHierarchyProvider(customHierarchyDefinition, enforceRequest);
};
oFF.AbstractBlendableQueryManager.prototype.createDataAreaCommand = function(commandType)
{
	let queryManager = this.getQueryManager();
	let command = null;
	if (oFF.notNull(queryManager))
	{
		command = queryManager.createDataAreaCommand(commandType);
	}
	return command;
};
oFF.AbstractBlendableQueryManager.prototype.createDataAreaCommandDocReset = function()
{
	return this.createDataAreaCommand(oFF.PlanningContextCommandType.DOC_RESET);
};
oFF.AbstractBlendableQueryManager.prototype.createDataAreaCommandDocSave = function()
{
	return this.createDataAreaCommand(oFF.PlanningContextCommandType.DOC_SAVE);
};
oFF.AbstractBlendableQueryManager.prototype.createDataAreaCommandRefresh = function()
{
	return this.createDataAreaCommand(oFF.PlanningContextCommandType.REFRESH);
};
oFF.AbstractBlendableQueryManager.prototype.deletePlanningVersionSettings = function(versionIdentifier)
{
	let queryManager = this.getQueryManager();
	let settings = null;
	if (oFF.notNull(queryManager))
	{
		settings = queryManager.deletePlanningVersionSettings(versionIdentifier);
	}
	return settings;
};
oFF.AbstractBlendableQueryManager.prototype.deleteVariableVariant = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.detachBeforeQueryExecutionListener = function(listener)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.detachBeforeQueryExecutionListener(listener);
	}
};
oFF.AbstractBlendableQueryManager.prototype.detachQueryExecutedListener = function(listener)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.detachQueryExecutedListener(listener);
	}
};
oFF.AbstractBlendableQueryManager.prototype.disableReturnedDataSelection = function(dataSelection)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.disableReturnedDataSelection(dataSelection);
	}
};
oFF.AbstractBlendableQueryManager.prototype.emptyVariableDefinition = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.enableHierarchyToUDHConversion = function(enableConversion)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.enableHierarchyToUDHConversion(enableConversion);
	}
};
oFF.AbstractBlendableQueryManager.prototype.enableReturnedDataSelection = function(dataSelection)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.enableReturnedDataSelection(dataSelection);
	}
};
oFF.AbstractBlendableQueryManager.prototype.getAbstractRendering = function(type, protocol)
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().getAbstractRendering(type, protocol);
};
oFF.AbstractBlendableQueryManager.prototype.getActiveResultSetContainer = function()
{
	return this.getResultsetContainer(false);
};
oFF.AbstractBlendableQueryManager.prototype.getActiveResultSetContainerBase = function()
{
	return this.getResultsetContainer(false);
};
oFF.AbstractBlendableQueryManager.prototype.getAllDisabledReturnedDataSelections = function()
{
	let queryManager = this.getQueryManager();
	let disabledReturnedDataSelections = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		disabledReturnedDataSelections = queryManager.getAllDisabledReturnedDataSelections();
	}
	return disabledReturnedDataSelections;
};
oFF.AbstractBlendableQueryManager.prototype.getAllEnabledReturnedDataSelections = function()
{
	let queryManager = this.getQueryManager();
	let enabledReturnedDataSelections = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		enabledReturnedDataSelections = queryManager.getAllEnabledReturnedDataSelections();
	}
	return enabledReturnedDataSelections;
};
oFF.AbstractBlendableQueryManager.prototype.getAllPlanningVersionSettings = function()
{
	let queryManager = this.getQueryManager();
	let settings = null;
	if (oFF.notNull(queryManager))
	{
		settings = queryManager.getAllPlanningVersionSettings();
	}
	return settings;
};
oFF.AbstractBlendableQueryManager.prototype.getAllQueryManagers = function()
{
	return this.m_queryManagers.getValuesAsReadOnlyList();
};
oFF.AbstractBlendableQueryManager.prototype.getAndUseResultsetStateId = function()
{
	let queryManager = this.getQueryManagerBase();
	let stateId = 0;
	if (oFF.notNull(queryManager))
	{
		stateId = queryManager.getAndUseResultsetStateId();
	}
	return stateId;
};
oFF.AbstractBlendableQueryManager.prototype.getCapabilitiesBase = function()
{
	return this.getQueryManagerBase().getCapabilitiesBase();
};
oFF.AbstractBlendableQueryManager.prototype.getClassicResultSet = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().getClassicResultSet();
};
oFF.AbstractBlendableQueryManager.prototype.getClientQueryObjectMigrationStorageName = function()
{
	let queryManager = this.getQueryManager();
	let storageName = null;
	if (oFF.notNull(queryManager))
	{
		storageName = queryManager.getClientQueryObjectStorageName();
	}
	return storageName;
};
oFF.AbstractBlendableQueryManager.prototype.getClientQueryObjectStorageName = function()
{
	return this.m_clientQueryObjectStorageName;
};
oFF.AbstractBlendableQueryManager.prototype.getClientStatusCode = function()
{
	let queryManager = this.getQueryManager();
	let code = 0;
	if (oFF.notNull(queryManager))
	{
		code = queryManager.getClientStatusCode();
	}
	return code;
};
oFF.AbstractBlendableQueryManager.prototype.getConnection = function()
{
	return this.getQueryManagerBase().getConnection();
};
oFF.AbstractBlendableQueryManager.prototype.getContext = function()
{
	return this;
};
oFF.AbstractBlendableQueryManager.prototype.getCursorResultSet = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().getCursorResultSet();
};
oFF.AbstractBlendableQueryManager.prototype.getDWCOrEPFSpaceId = function()
{
	let queryManager = this.getQueryManager();
	let spaceId = null;
	if (oFF.notNull(queryManager))
	{
		spaceId = queryManager.getDWCOrEPFSpaceId();
	}
	return spaceId;
};
oFF.AbstractBlendableQueryManager.prototype.getDataArea = function()
{
	let queryManager = this.getQueryManager();
	let dataArea = null;
	if (oFF.notNull(queryManager))
	{
		dataArea = queryManager.getDataArea();
	}
	return dataArea;
};
oFF.AbstractBlendableQueryManager.prototype.getDataRefreshEnabled = function()
{
	return this.getResultsetContainer(false).getDataRefreshEnabled();
};
oFF.AbstractBlendableQueryManager.prototype.getDataRequest = function()
{
	let queryManager = this.getQueryManager();
	let request = null;
	if (oFF.notNull(queryManager))
	{
		request = queryManager.getDataRequest();
	}
	return request;
};
oFF.AbstractBlendableQueryManager.prototype.getDataRequestAsString = function()
{
	let queryManager = this.getQueryManager();
	let request = null;
	if (oFF.notNull(queryManager))
	{
		request = queryManager.getDataRequestAsString();
	}
	return request;
};
oFF.AbstractBlendableQueryManager.prototype.getDefinition = function()
{
	let queryManager = this.getQueryManager();
	let definition = null;
	if (oFF.notNull(queryManager))
	{
		definition = queryManager.getInitSettings().getDefinition();
	}
	return definition;
};
oFF.AbstractBlendableQueryManager.prototype.getDimensionMemberVariables = function()
{
	let queryManager = this.getQueryManager();
	let variables = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		variables = queryManager.getDimensionMemberVariables();
	}
	return variables;
};
oFF.AbstractBlendableQueryManager.prototype.getDimensionsRequestedFromClient = function()
{
	return this.getQueryManagerBase().getDimensionsRequestedFromClient();
};
oFF.AbstractBlendableQueryManager.prototype.getDimensionsToClone = function()
{
	return this.getQueryManagerBase().getDimensionsToClone();
};
oFF.AbstractBlendableQueryManager.prototype.getErrors = function()
{
	let queryManager = this.getQueryManager();
	let msgs = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		msgs = queryManager.getErrors();
	}
	return msgs;
};
oFF.AbstractBlendableQueryManager.prototype.getExecuteRequestOnOldResultSet = function()
{
	return this.getActiveResultSetContainer().getExecuteRequestOnOldResultSet();
};
oFF.AbstractBlendableQueryManager.prototype.getFirstError = function()
{
	let queryManager = this.getQueryManager();
	let error = null;
	if (oFF.notNull(queryManager))
	{
		error = queryManager.getFirstError();
	}
	return error;
};
oFF.AbstractBlendableQueryManager.prototype.getFirstWithSeverity = function(severity)
{
	let queryManager = this.getQueryManager();
	let msg = null;
	if (oFF.notNull(queryManager))
	{
		msg = queryManager.getFirstWithSeverity(severity);
	}
	return msg;
};
oFF.AbstractBlendableQueryManager.prototype.getHierarchyNameVariable = function(name)
{
	let queryManager = this.getQueryManager();
	let variable = null;
	if (oFF.notNull(queryManager))
	{
		variable = queryManager.getHierarchyNameVariable(name);
	}
	return variable;
};
oFF.AbstractBlendableQueryManager.prototype.getHierarchyNameVariables = function()
{
	let queryManager = this.getQueryManager();
	let variables = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		variables = queryManager.getHierarchyNameVariables();
	}
	return variables;
};
oFF.AbstractBlendableQueryManager.prototype.getHierarchyNodeVariable = function(name)
{
	let queryManager = this.getQueryManager();
	let variable = null;
	if (oFF.notNull(queryManager))
	{
		variable = queryManager.getHierarchyNodeVariable(name);
	}
	return variable;
};
oFF.AbstractBlendableQueryManager.prototype.getIncludePerformanceData = function()
{
	return this.getQueryManagerBase().getIncludePerformanceData();
};
oFF.AbstractBlendableQueryManager.prototype.getInfos = function()
{
	let queryManager = this.getQueryManager();
	let msgs = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		msgs = queryManager.getInfos();
	}
	return msgs;
};
oFF.AbstractBlendableQueryManager.prototype.getInitSettings = function()
{
	let queryManager = this.getQueryManager();
	let settings = null;
	if (oFF.notNull(queryManager))
	{
		settings = queryManager.getInitSettings();
	}
	return settings;
};
oFF.AbstractBlendableQueryManager.prototype.getInputEnabledAndNonTechnicalVariables = function()
{
	let queryManager = this.getQueryManager();
	let variables = oFF.XListOfNameObject.create();
	if (oFF.notNull(queryManager))
	{
		variables = queryManager.getInputEnabledAndNonTechnicalVariables();
	}
	return variables;
};
oFF.AbstractBlendableQueryManager.prototype.getInputEnabledVariable = function(name)
{
	let queryManager = this.getQueryManager();
	let variable = null;
	if (oFF.notNull(queryManager))
	{
		variable = queryManager.getInputEnabledVariable(name);
	}
	return variable;
};
oFF.AbstractBlendableQueryManager.prototype.getInputEnabledVariables = function()
{
	let queryManager = this.getQueryManager();
	let variables = oFF.XListOfNameObject.create();
	if (oFF.notNull(queryManager))
	{
		variables = queryManager.getInputEnabledVariables();
	}
	return variables;
};
oFF.AbstractBlendableQueryManager.prototype.getInputEnablementRules = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		return queryManager.getInputEnablementRules();
	}
	return oFF.XList.create();
};
oFF.AbstractBlendableQueryManager.prototype.getInputReadinessCacheMode = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		return queryManager.getInputReadinessCacheMode();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.getInputReadinessFilter = function()
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		return queryModel.getInputReadinessFilter();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.getInputReadinessMainQuery = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		return queryManager.getInputReadinessMainQuery();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.getInstanceId = function()
{
	let queryManager = this.getQueryManager();
	let instanceId = null;
	if (oFF.notNull(queryManager))
	{
		instanceId = queryManager.getInstanceId();
	}
	return instanceId;
};
oFF.AbstractBlendableQueryManager.prototype.getLifeCycleState = function()
{
	let queryManager = this.getQueryManager();
	let lifeCycleState = null;
	if (oFF.notNull(queryManager))
	{
		lifeCycleState = queryManager.getLifeCycleState();
	}
	return lifeCycleState;
};
oFF.AbstractBlendableQueryManager.prototype.getLovManager = function()
{
	let queryManager = this.getQueryManager();
	let lovManager = null;
	if (oFF.notNull(queryManager))
	{
		lovManager = queryManager.getLovManager();
	}
	return lovManager;
};
oFF.AbstractBlendableQueryManager.prototype.getMaxColumns = function()
{
	return this.getResultsetContainer(false).getMaxColumns();
};
oFF.AbstractBlendableQueryManager.prototype.getMaxResultRecords = function()
{
	return this.getResultsetContainer(false).getMaxResultRecords();
};
oFF.AbstractBlendableQueryManager.prototype.getMaxRows = function()
{
	return this.getResultsetContainer(false).getMaxRows();
};
oFF.AbstractBlendableQueryManager.prototype.getMessage = function(severity, code)
{
	let queryManager = this.getQueryManager();
	let msg = null;
	if (oFF.notNull(queryManager))
	{
		msg = queryManager.getMessage(severity, code);
	}
	return msg;
};
oFF.AbstractBlendableQueryManager.prototype.getMessageManager = function()
{
	return this.getQueryManagerBase();
};
oFF.AbstractBlendableQueryManager.prototype.getMessages = function()
{
	let queryManager = this.getQueryManager();
	let msgs = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		msgs = queryManager.getMessages();
	}
	return msgs;
};
oFF.AbstractBlendableQueryManager.prototype.getMetadataModel = function()
{
	let queryManager = this.getQueryManager();
	let metadataModel = null;
	if (oFF.notNull(queryManager))
	{
		metadataModel = queryManager.getMetadataModel();
	}
	return metadataModel;
};
oFF.AbstractBlendableQueryManager.prototype.getMetadataModelBase = function()
{
	return this.getQueryManagerBase().getMetadataModelBase();
};
oFF.AbstractBlendableQueryManager.prototype.getMode = function()
{
	let queryManager = this.getQueryManager();
	let mode = null;
	if (oFF.notNull(queryManager))
	{
		mode = queryManager.getInitSettings().getMode();
	}
	return mode;
};
oFF.AbstractBlendableQueryManager.prototype.getModelCapabilities = function()
{
	let primaryQueryManager = this.getQueryManagerByDatasetId(this.m_primaryDatasetId);
	let modelCapabilities = null;
	if (oFF.notNull(primaryQueryManager))
	{
		modelCapabilities = primaryQueryManager.getModelCapabilities();
	}
	return modelCapabilities;
};
oFF.AbstractBlendableQueryManager.prototype.getNameForMicroCubeUse = function()
{
	let queryManager = this.getQueryManager();
	let name = null;
	if (oFF.notNull(queryManager))
	{
		name = queryManager.getNameForMicroCubeUse();
	}
	return name;
};
oFF.AbstractBlendableQueryManager.prototype.getNumberOfErrors = function()
{
	let queryManager = this.getQueryManager();
	let num = 0;
	if (oFF.notNull(queryManager))
	{
		num = queryManager.getNumberOfErrors();
	}
	return num;
};
oFF.AbstractBlendableQueryManager.prototype.getNumberOfSeverity = function(severity)
{
	let queryManager = this.getQueryManager();
	let num = 0;
	if (oFF.notNull(queryManager))
	{
		num = queryManager.getNumberOfSeverity(severity);
	}
	return num;
};
oFF.AbstractBlendableQueryManager.prototype.getNumberOfWarnings = function()
{
	let queryManager = this.getQueryManager();
	let num = 0;
	if (oFF.notNull(queryManager))
	{
		num = queryManager.getNumberOfWarnings();
	}
	return num;
};
oFF.AbstractBlendableQueryManager.prototype.getOffsetColumns = function()
{
	return this.getResultsetContainer(false).getOffsetColumns();
};
oFF.AbstractBlendableQueryManager.prototype.getOffsetRows = function()
{
	return this.getResultsetContainer(false).getOffsetRows();
};
oFF.AbstractBlendableQueryManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.BLENDABLE_QUERY_MANAGER;
};
oFF.AbstractBlendableQueryManager.prototype.getOlapSystemContainer = function()
{
	let queryManager = this.getQueryManager();
	let olapSystemContainer = null;
	if (oFF.notNull(queryManager))
	{
		olapSystemContainer = queryManager.getOlapSystemContainer();
	}
	return olapSystemContainer;
};
oFF.AbstractBlendableQueryManager.prototype.getOrCreateDocumentsStoreService = function(withVersions)
{
	let queryManager = this.getQueryManagerBase();
	let service = null;
	if (oFF.notNull(queryManager))
	{
		service = queryManager.getOrCreateDocumentsStoreService(withVersions);
	}
	return service;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningManager = function()
{
	let queryManager = this.getQueryManager();
	let planningManager = null;
	if (oFF.notNull(queryManager))
	{
		planningManager = queryManager.getPlanningManager();
	}
	return planningManager;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningMode = function()
{
	let queryManager = this.getQueryManager();
	let planningMode = null;
	if (oFF.notNull(queryManager))
	{
		planningMode = queryManager.getPlanningMode();
	}
	return planningMode;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningModel = function()
{
	let queryManager = this.getQueryManager();
	let planningModel = null;
	if (oFF.notNull(queryManager))
	{
		planningModel = queryManager.getPlanningModel();
	}
	return planningModel;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningRestriction = function()
{
	let queryManager = this.getQueryManager();
	let planningRestriction = null;
	if (oFF.notNull(queryManager))
	{
		planningRestriction = queryManager.getPlanningRestriction();
	}
	return planningRestriction;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningVersionIdentifier = function(versionId, sharedVersion, versionOwner)
{
	let queryManager = this.getQueryManager();
	let planningVersionIdentifier = null;
	if (oFF.notNull(queryManager))
	{
		planningVersionIdentifier = queryManager.getPlanningVersionIdentifier(versionId, sharedVersion, versionOwner);
	}
	return planningVersionIdentifier;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningVersionSettings = function(versionIdentifier, sequenceId, useExternalView)
{
	let queryManager = this.getQueryManager();
	let settings = null;
	if (oFF.notNull(queryManager))
	{
		settings = queryManager.getPlanningVersionSettings(versionIdentifier, sequenceId, useExternalView);
	}
	return settings;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningVersionSettingsMode = function()
{
	let queryManager = this.getQueryManager();
	let settingsMode = null;
	if (oFF.notNull(queryManager))
	{
		settingsMode = queryManager.getPlanningVersionSettingsMode();
	}
	return settingsMode;
};
oFF.AbstractBlendableQueryManager.prototype.getPlanningVersionSettingsSimple = function(versionId, sequenceId, useExternalView)
{
	let queryManager = this.getQueryManager();
	let settings = null;
	if (oFF.notNull(queryManager))
	{
		settings = queryManager.getPlanningVersionSettingsSimple(versionId, sequenceId, useExternalView);
	}
	return settings;
};
oFF.AbstractBlendableQueryManager.prototype.getPreQueryExecutor = function()
{
	let queryManager = this.getQueryManager();
	let preQueryExecutor = null;
	if (oFF.notNull(queryManager))
	{
		preQueryExecutor = queryManager.getPreQueryExecutor();
	}
	return preQueryExecutor;
};
oFF.AbstractBlendableQueryManager.prototype.getPreQueryName = function()
{
	let queryManager = this.getQueryManager();
	let preQueryName = null;
	if (oFF.notNull(queryManager))
	{
		preQueryName = queryManager.getPreQueryName();
	}
	return preQueryName;
};
oFF.AbstractBlendableQueryManager.prototype.getPreviousVariableProcessorState = function()
{
	return this.getQueryManagerBase().getPreviousVariableProcessorState();
};
oFF.AbstractBlendableQueryManager.prototype.getPrimaryQueryManager = function()
{
	return this.getQueryManagerByDatasetId(this.m_primaryDatasetId);
};
oFF.AbstractBlendableQueryManager.prototype.getProviderType = function()
{
	let queryManager = this.getQueryManager();
	let providerType = null;
	if (oFF.notNull(queryManager))
	{
		providerType = queryManager.getInitSettings().getProviderType();
	}
	return providerType;
};
oFF.AbstractBlendableQueryManager.prototype.getQueryManager = function()
{
	return this.getPrimaryQueryManager();
};
oFF.AbstractBlendableQueryManager.prototype.getQueryManagerByDatasetId = function(name)
{
	return this.m_queryManagers.getByKey(name);
};
oFF.AbstractBlendableQueryManager.prototype.getQueryModel = function()
{
	let primaryQueryManager = this.getQueryManagerByDatasetId(this.m_primaryDatasetId);
	let queryModel = null;
	if (oFF.notNull(primaryQueryManager))
	{
		queryModel = primaryQueryManager.getQueryModel();
	}
	return queryModel;
};
oFF.AbstractBlendableQueryManager.prototype.getQueryServiceConfig = function()
{
	let queryManager = this.getQueryManager();
	let serviceConfig = null;
	if (oFF.notNull(queryManager))
	{
		serviceConfig = queryManager.getQueryServiceConfig();
	}
	return serviceConfig;
};
oFF.AbstractBlendableQueryManager.prototype.getResourceDetailsFromResourceIdentifier = function(resourceKey)
{
	let queryManager = this.getQueryManager();
	let resourceDetails = null;
	if (oFF.notNull(queryManager))
	{
		resourceDetails = queryManager.getResourceDetailsFromResourceIdentifier(resourceKey);
	}
	return resourceDetails;
};
oFF.AbstractBlendableQueryManager.prototype.getResourcePath = function()
{
	let queryManager = this.getQueryManager();
	let resourcePath = null;
	if (oFF.notNull(queryManager))
	{
		resourcePath = queryManager.getResourcePath();
	}
	return resourcePath;
};
oFF.AbstractBlendableQueryManager.prototype.getResultSetMessages = function()
{
	return this.getActiveResultSetContainer();
};
oFF.AbstractBlendableQueryManager.prototype.getResultSetPersistenceIdentifier = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceIdentifier();
};
oFF.AbstractBlendableQueryManager.prototype.getResultSetPersistenceSchema = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceSchema();
};
oFF.AbstractBlendableQueryManager.prototype.getResultSetPersistenceTable = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceTable();
};
oFF.AbstractBlendableQueryManager.prototype.getResultSetPersistenceType = function()
{
	return this.getResultsetContainer(false).getResultSetPersistenceType();
};
oFF.AbstractBlendableQueryManager.prototype.getResultSetProviderFactory = function()
{
	return this.getQueryManagerBase().getResultSetProviderFactory();
};
oFF.AbstractBlendableQueryManager.prototype.getResultSetSyncState = function()
{
	return this.getActiveResultSetContainer().getResultSetSyncState();
};
oFF.AbstractBlendableQueryManager.prototype.getResultsetContainer = function(enforceOutOfSync)
{
	if (oFF.isNull(this.m_activeContainer) || this.m_activeContainer.isReleased() || enforceOutOfSync && this.m_activeContainer.getSyncState() !== oFF.SyncState.OUT_OF_SYNC)
	{
		let previousRuntimeQueryManager = null;
		let lastState = null;
		if (oFF.notNull(this.m_activeContainer) && !this.m_activeContainer.isReleased())
		{
			let activeContainer = this.m_activeContainer;
			let runtimeQueryManager = activeContainer.getRuntimeQueryManager();
			if (oFF.notNull(runtimeQueryManager) && !runtimeQueryManager.isReleased())
			{
				if (runtimeQueryManager.getInitSettings().getMode() === oFF.QueryManagerMode.BLENDING)
				{
					previousRuntimeQueryManager = runtimeQueryManager;
					previousRuntimeQueryManager.invalidateState();
				}
			}
		}
		let oldContainer = this.m_activeContainer;
		let baseContainer = this.m_activeContainer;
		if (oFF.notNull(baseContainer) && baseContainer.getBlendingProcess() !== null)
		{
			lastState = baseContainer.getBlendingProcess().getLastState();
		}
		this.m_activeContainer = oFF.BlendableResultSetContainer.createBlendableResultSetContainer(this, previousRuntimeQueryManager, lastState);
		if (oFF.notNull(oldContainer))
		{
			oldContainer.setSerializedData(null, null);
		}
	}
	return this.m_activeContainer;
};
oFF.AbstractBlendableQueryManager.prototype.getRootProfileNode = function()
{
	let queryManager = this.getQueryManager();
	let node = null;
	if (oFF.notNull(queryManager))
	{
		node = queryManager.getRootProfileNode();
	}
	return node;
};
oFF.AbstractBlendableQueryManager.prototype.getRriTargetManager = function()
{
	let queryManager = this.getQueryManager();
	let rriTargetManager = null;
	if (oFF.notNull(queryManager))
	{
		rriTargetManager = queryManager.getRriTargetManager();
	}
	return rriTargetManager;
};
oFF.AbstractBlendableQueryManager.prototype.getSecondaryQueryManagers = function()
{
	let allQueryManagers = this.getAllQueryManagers();
	let secondaryQueryManagers = oFF.XList.create();
	let queryManagerIterator = allQueryManagers.getIterator();
	while (queryManagerIterator.hasNext())
	{
		let queryManager = queryManagerIterator.next();
		if (!oFF.XString.isEqual(queryManager.getQueryModel().getDatasetId(), this.m_primaryDatasetId))
		{
			secondaryQueryManagers.add(queryManager);
		}
	}
	return secondaryQueryManagers;
};
oFF.AbstractBlendableQueryManager.prototype.getSelectionTagging = function()
{
	let queryManager = this.getQueryManager();
	let tagging = null;
	if (oFF.notNull(queryManager))
	{
		tagging = queryManager.getSelectionTagging();
	}
	return tagging;
};
oFF.AbstractBlendableQueryManager.prototype.getSemanticalErrors = function()
{
	let queryManager = this.getQueryManager();
	let msgs = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		msgs = queryManager.getSemanticalErrors();
	}
	return msgs;
};
oFF.AbstractBlendableQueryManager.prototype.getServerStatusCode = function()
{
	let queryManager = this.getQueryManager();
	let code = 0;
	if (oFF.notNull(queryManager))
	{
		code = queryManager.getServerStatusCode();
	}
	return code;
};
oFF.AbstractBlendableQueryManager.prototype.getServerStatusDetails = function()
{
	let queryManager = this.getQueryManager();
	let details = null;
	if (oFF.notNull(queryManager))
	{
		details = queryManager.getServerStatusDetails();
	}
	return details;
};
oFF.AbstractBlendableQueryManager.prototype.getServiceConfig = function()
{
	let queryManager = this.getQueryManager();
	let serviceConfig = null;
	if (oFF.notNull(queryManager))
	{
		serviceConfig = queryManager.getServiceConfig();
	}
	return serviceConfig;
};
oFF.AbstractBlendableQueryManager.prototype.getSummary = function()
{
	let queryManager = this.getQueryManager();
	let summary = null;
	if (oFF.notNull(queryManager))
	{
		summary = queryManager.getSummary();
	}
	return summary;
};
oFF.AbstractBlendableQueryManager.prototype.getSuppressCalculatedMembersWithoutBookedData = function()
{
	return this.getResultsetContainer(false).getSuppressCalculatedMembersWithoutBookedData();
};
oFF.AbstractBlendableQueryManager.prototype.getSystemDescription = function()
{
	let queryManager = this.getQueryManager();
	let systemDescription = null;
	if (oFF.notNull(queryManager))
	{
		systemDescription = queryManager.getSystemDescription();
	}
	return systemDescription;
};
oFF.AbstractBlendableQueryManager.prototype.getSystemName = function()
{
	let queryManager = this.getQueryManager();
	let systemName = null;
	if (oFF.notNull(queryManager))
	{
		systemName = queryManager.getSystemName();
	}
	return systemName;
};
oFF.AbstractBlendableQueryManager.prototype.getSystemType = function()
{
	let queryManager = this.getQueryManager();
	let systemType = null;
	if (oFF.notNull(queryManager))
	{
		systemType = queryManager.getSystemType();
	}
	return systemType;
};
oFF.AbstractBlendableQueryManager.prototype.getValueHelpProvider = function()
{
	return this.getQueryManagerBase().getValueHelpProvider();
};
oFF.AbstractBlendableQueryManager.prototype.getVariable = function(name)
{
	let queryManager = this.getQueryManager();
	let variable = null;
	if (oFF.notNull(queryManager))
	{
		variable = queryManager.getVariable(name);
	}
	return variable;
};
oFF.AbstractBlendableQueryManager.prototype.getVariableContainerBase = function()
{
	return this.getQueryManagerBase().getVariableContainerBase();
};
oFF.AbstractBlendableQueryManager.prototype.getVariableMode = function()
{
	let queryManager = this.getQueryManager();
	let variableMode = null;
	if (oFF.notNull(queryManager))
	{
		variableMode = queryManager.getVariableMode();
	}
	return variableMode;
};
oFF.AbstractBlendableQueryManager.prototype.getVariableProcessor = function()
{
	let queryManager = this.getQueryManager();
	let variableProcessor = null;
	if (oFF.notNull(queryManager))
	{
		variableProcessor = queryManager.getVariableProcessor();
	}
	return variableProcessor;
};
oFF.AbstractBlendableQueryManager.prototype.getVariableProcessorState = function()
{
	let queryManager = this.getQueryManager();
	let variableProcessorState = null;
	if (oFF.notNull(queryManager))
	{
		variableProcessorState = queryManager.getVariableProcessorState();
	}
	return variableProcessorState;
};
oFF.AbstractBlendableQueryManager.prototype.getVariableVariantByName = function(variableVariantName)
{
	let queryManager = this.getQueryManager();
	let variableVariant = null;
	if (oFF.notNull(queryManager))
	{
		variableVariant = queryManager.getVariableVariantByName(variableVariantName);
	}
	return variableVariant;
};
oFF.AbstractBlendableQueryManager.prototype.getVariableVariants = function()
{
	let queryManager = this.getQueryManager();
	let variants = null;
	if (oFF.notNull(queryManager))
	{
		variants = queryManager.getVariableVariants();
	}
	return variants;
};
oFF.AbstractBlendableQueryManager.prototype.getVariables = function()
{
	let queryManager = this.getQueryManager();
	let variables = oFF.XListOfNameObject.create();
	if (oFF.notNull(queryManager))
	{
		variables = queryManager.getVariables();
	}
	return variables;
};
oFF.AbstractBlendableQueryManager.prototype.getVersionAliases = function()
{
	let queryManager = this.getQueryManager();
	let versionAliases = oFF.XHashMapByString.create();
	if (oFF.notNull(queryManager))
	{
		versionAliases = queryManager.getVersionAliases();
	}
	return versionAliases;
};
oFF.AbstractBlendableQueryManager.prototype.getWarnings = function()
{
	let queryManager = this.getQueryManager();
	let msgs = oFF.XList.create();
	if (oFF.notNull(queryManager))
	{
		msgs = queryManager.getWarnings();
	}
	return msgs;
};
oFF.AbstractBlendableQueryManager.prototype.hasChangedCells = function()
{
	let queryManager = this.getQueryManager();
	let hasChangedCells = false;
	if (oFF.notNull(queryManager))
	{
		hasChangedCells = queryManager.hasChangedCells();
	}
	return hasChangedCells;
};
oFF.AbstractBlendableQueryManager.prototype.hasChangedValueLocks = function()
{
	let queryManager = this.getQueryManager();
	let hasChangedValueLocks = false;
	if (oFF.notNull(queryManager))
	{
		hasChangedValueLocks = queryManager.hasChangedValueLocks();
	}
	return hasChangedValueLocks;
};
oFF.AbstractBlendableQueryManager.prototype.hasChangedValues = function()
{
	let queryManager = this.getQueryManager();
	let hasChangedValues = false;
	if (oFF.notNull(queryManager))
	{
		hasChangedValues = queryManager.hasChangedValues();
	}
	return hasChangedValues;
};
oFF.AbstractBlendableQueryManager.prototype.hasErrors = function()
{
	let queryManager = this.getQueryManager();
	let hasErrors = false;
	if (oFF.notNull(queryManager))
	{
		hasErrors = queryManager.hasErrors();
	}
	return hasErrors;
};
oFF.AbstractBlendableQueryManager.prototype.hasInputEnabledAndNonTechnicalVariables = function()
{
	return oFF.XCollectionUtils.hasElements(this.getInputEnabledAndNonTechnicalVariables());
};
oFF.AbstractBlendableQueryManager.prototype.hasInputEnabledVariables = function()
{
	let queryManager = this.getQueryManager();
	let hasInputEnabledVariables = false;
	if (oFF.notNull(queryManager))
	{
		hasInputEnabledVariables = queryManager.hasInputEnabledVariables();
	}
	return hasInputEnabledVariables;
};
oFF.AbstractBlendableQueryManager.prototype.hasLovManager = function()
{
	return this.getQueryManagerBase().hasLovManager();
};
oFF.AbstractBlendableQueryManager.prototype.hasMandatoryVariables = function()
{
	let queryManager = this.getQueryManager();
	let hasMandatoryVariables = false;
	if (oFF.notNull(queryManager))
	{
		hasMandatoryVariables = queryManager.hasMandatoryVariables();
	}
	return hasMandatoryVariables;
};
oFF.AbstractBlendableQueryManager.prototype.hasMoreColumnRecordsAvailable = function()
{
	return this.getActiveResultSetContainer().hasMoreColumnRecordsAvailable();
};
oFF.AbstractBlendableQueryManager.prototype.hasMoreRowRecordsAvailable = function()
{
	return this.getActiveResultSetContainer().hasMoreRowRecordsAvailable();
};
oFF.AbstractBlendableQueryManager.prototype.hasNewValues = function()
{
	let queryManager = this.getQueryManager();
	let hasNewValues = false;
	if (oFF.notNull(queryManager))
	{
		hasNewValues = queryManager.hasNewValues();
	}
	return hasNewValues;
};
oFF.AbstractBlendableQueryManager.prototype.hasPlanningManager = function()
{
	return this.getQueryManagerBase().hasPlanningManager();
};
oFF.AbstractBlendableQueryManager.prototype.hasSeverity = function(severity)
{
	let queryManager = this.getQueryManager();
	let hasSeverity = false;
	if (oFF.notNull(queryManager))
	{
		hasSeverity = queryManager.hasSeverity(severity);
	}
	return hasSeverity;
};
oFF.AbstractBlendableQueryManager.prototype.hasVariables = function()
{
	let queryManager = this.getQueryManager();
	let hasVariables = false;
	if (oFF.notNull(queryManager))
	{
		hasVariables = queryManager.hasVariables();
	}
	return hasVariables;
};
oFF.AbstractBlendableQueryManager.prototype.hasWarnings = function()
{
	let queryManager = this.getQueryManager();
	let hasWarnings = false;
	if (oFF.notNull(queryManager))
	{
		hasWarnings = queryManager.hasWarnings();
	}
	return hasWarnings;
};
oFF.AbstractBlendableQueryManager.prototype.initializeDataAreaState = function()
{
	let queryManager = this.getQueryManager();
	let initializeDataAreaState = null;
	if (oFF.notNull(queryManager))
	{
		initializeDataAreaState = queryManager.initializeDataAreaState();
	}
	return initializeDataAreaState;
};
oFF.AbstractBlendableQueryManager.prototype.invalidateState = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.invalidateState();
	}
	this.getResultsetContainer(true);
};
oFF.AbstractBlendableQueryManager.prototype.invalidateVisualizationContainers = function()
{
	let queryManager = this.getQueryManagerBase();
	if (oFF.notNull(queryManager))
	{
		queryManager.invalidateVisualizationContainers();
	}
};
oFF.AbstractBlendableQueryManager.prototype.isApplyingRepoState = function()
{
	return this.getQueryManagerBase().isApplyingRepoState();
};
oFF.AbstractBlendableQueryManager.prototype.isBasedOnVirtualDataSource = function()
{
	return false;
};
oFF.AbstractBlendableQueryManager.prototype.isCacheHintEnabled = function()
{
	let queryManager = this.getQueryManager();
	let isCacheHintEnabled = false;
	if (oFF.notNull(queryManager))
	{
		isCacheHintEnabled = queryManager.isCacheHintEnabled();
	}
	return isCacheHintEnabled;
};
oFF.AbstractBlendableQueryManager.prototype.isCancelNeeded = function()
{
	let isCancelNeeded = false;
	let allQMIter = this.getAllQueryManagers().getIterator();
	while (allQMIter.hasNext())
	{
		let qm = allQMIter.next();
		isCancelNeeded = qm.isCancelNeeded();
		if (isCancelNeeded)
		{
			break;
		}
	}
	return isCancelNeeded;
};
oFF.AbstractBlendableQueryManager.prototype.isClassicResultSetAvailable = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().isClassicResultSetAvailable();
};
oFF.AbstractBlendableQueryManager.prototype.isCursorResultSetAvailable = function()
{
	this.assertLifeCycleActive();
	return this.getActiveResultSetContainer().isCursorResultSetAvailable();
};
oFF.AbstractBlendableQueryManager.prototype.isDataEntryEnabled = function()
{
	let queryManager = this.getQueryManager();
	let isDataEntryEnabled = false;
	if (oFF.notNull(queryManager))
	{
		isDataEntryEnabled = queryManager.isDataEntryEnabled();
	}
	return isDataEntryEnabled;
};
oFF.AbstractBlendableQueryManager.prototype.isDataEntryReadOnly = function()
{
	let queryManager = this.getQueryManager();
	let isDataEntryReadOnly = false;
	if (oFF.notNull(queryManager))
	{
		isDataEntryReadOnly = queryManager.isDataEntryReadOnly();
	}
	return isDataEntryReadOnly;
};
oFF.AbstractBlendableQueryManager.prototype.isDataSourceInitial = function()
{
	return this.getQueryManagerBase().isDataSourceInitial();
};
oFF.AbstractBlendableQueryManager.prototype.isDirectVariableTransferEnabled = function()
{
	let queryManager = this.getQueryManager();
	let isDirectVariableTransferEnabled = false;
	if (oFF.notNull(queryManager))
	{
		isDirectVariableTransferEnabled = queryManager.isDirectVariableTransferEnabled();
	}
	return isDirectVariableTransferEnabled;
};
oFF.AbstractBlendableQueryManager.prototype.isExecuteAutoVariableSubmit = function()
{
	return this.getQueryManagerBase().isExecuteAutoVariableSubmit();
};
oFF.AbstractBlendableQueryManager.prototype.isFailedSubmit = function()
{
	let allQMIter = this.getAllQueryManagers().getIterator();
	while (allQMIter.hasNext())
	{
		if (allQMIter.next().isFailedSubmit())
		{
			return true;
		}
	}
	return false;
};
oFF.AbstractBlendableQueryManager.prototype.isHierarchyToUDHConversionEnabled = function()
{
	let queryManager = this.getQueryManager();
	return oFF.notNull(queryManager) && queryManager.isHierarchyToUDHConversionEnabled();
};
oFF.AbstractBlendableQueryManager.prototype.isHierarchyToUDHConversionEnabledForCurrentRs = function()
{
	let queryManager = this.getQueryManager();
	return oFF.notNull(queryManager) && queryManager.isHierarchyToUDHConversionEnabledForCurrentRs();
};
oFF.AbstractBlendableQueryManager.prototype.isIncludePerformanceNotDefault = function()
{
	return this.getQueryManagerBase().isIncludePerformanceNotDefault();
};
oFF.AbstractBlendableQueryManager.prototype.isKeyRefSerializationEnabled = function()
{
	let queryManager = this.getQueryManager();
	let isKeyRefSerializationEnabled = false;
	if (oFF.notNull(queryManager))
	{
		isKeyRefSerializationEnabled = queryManager.isKeyRefSerializationEnabled();
	}
	return isKeyRefSerializationEnabled;
};
oFF.AbstractBlendableQueryManager.prototype.isKeyfigureCalculationSuppressed = function()
{
	return this.getResultsetContainer(false).isKeyfigureCalculationSuppressed();
};
oFF.AbstractBlendableQueryManager.prototype.isLightweightSearch = function()
{
	return this.getQueryManagerBase().isLightweightSearch();
};
oFF.AbstractBlendableQueryManager.prototype.isMetadataCached = function()
{
	return this.getQueryManagerBase().isMetadataCached();
};
oFF.AbstractBlendableQueryManager.prototype.isProcessingAutoSubmit = function()
{
	let isProcessingAutoSubmit = false;
	let allQMIter = this.getAllQueryManagers().getIterator();
	while (allQMIter.hasNext())
	{
		let qm = allQMIter.next();
		if (qm.isProcessingAutoSubmit())
		{
			isProcessingAutoSubmit = true;
			break;
		}
	}
	return isProcessingAutoSubmit;
};
oFF.AbstractBlendableQueryManager.prototype.isPublicVersionEditPossible = function()
{
	let queryManager = this.getQueryManager();
	let isPublicVersionEditPossible = false;
	if (oFF.notNull(queryManager))
	{
		isPublicVersionEditPossible = queryManager.isPublicVersionEditPossible();
	}
	return isPublicVersionEditPossible;
};
oFF.AbstractBlendableQueryManager.prototype.isReinitNeeded = function()
{
	let isReinitNeeded = false;
	let allQMIter = this.getAllQueryManagers().getIterator();
	while (allQMIter.hasNext())
	{
		let qm = allQMIter.next();
		isReinitNeeded = qm.isReinitNeeded();
		if (isReinitNeeded)
		{
			break;
		}
	}
	return isReinitNeeded;
};
oFF.AbstractBlendableQueryManager.prototype.isRequestingPerformanceData = function()
{
	let queryManager = this.getQueryManager();
	let isRequestingPerformanceData = false;
	if (oFF.notNull(queryManager))
	{
		isRequestingPerformanceData = queryManager.isRequestingPerformanceData();
	}
	return isRequestingPerformanceData;
};
oFF.AbstractBlendableQueryManager.prototype.isResultSetTransportEnabled = function()
{
	return this.getResultsetContainer(false).isResultSetTransportEnabled();
};
oFF.AbstractBlendableQueryManager.prototype.isShallow = function()
{
	return false;
};
oFF.AbstractBlendableQueryManager.prototype.isSubmitNeeded = function()
{
	let isSubmitNeeded = false;
	let allQMIter = this.getAllQueryManagers().getIterator();
	while (allQMIter.hasNext())
	{
		let qm = allQMIter.next();
		isSubmitNeeded = qm.isSubmitNeeded();
		if (isSubmitNeeded)
		{
			break;
		}
	}
	return isSubmitNeeded;
};
oFF.AbstractBlendableQueryManager.prototype.isSubmitted = function()
{
	let isSubmitted = true;
	let allQMIter = this.getAllQueryManagers().getIterator();
	while (allQMIter.hasNext())
	{
		let qm = allQMIter.next();
		if ((qm.supportsAndAllowsEmptyExtendedVarDefinition() || qm.hasVariables()) && !qm.isSubmitted())
		{
			isSubmitted = false;
			break;
		}
	}
	return isSubmitted;
};
oFF.AbstractBlendableQueryManager.prototype.isSystemMappingValid = function(remoteQueryManager)
{
	let queryManager = this.getQueryManager();
	let isSystemMappingValid = false;
	if (oFF.notNull(queryManager))
	{
		isSystemMappingValid = queryManager.isSystemMappingValid(remoteQueryManager);
	}
	return isSystemMappingValid;
};
oFF.AbstractBlendableQueryManager.prototype.isUpdatingDataRequestCapabilities = function()
{
	let queryManager = this.getQueryManager();
	let isUpdatingDataRequestCapabilities = false;
	if (oFF.notNull(queryManager))
	{
		isUpdatingDataRequestCapabilities = queryManager.isUpdatingDataRequestCapabilities();
	}
	return isUpdatingDataRequestCapabilities;
};
oFF.AbstractBlendableQueryManager.prototype.isValid = function()
{
	let queryManager = this.getQueryManager();
	let isValid = false;
	if (oFF.notNull(queryManager))
	{
		isValid = queryManager.isValid();
	}
	return isValid;
};
oFF.AbstractBlendableQueryManager.prototype.isValidatingLocalFormulaMembers = function()
{
	let queryManager = this.getQueryManager();
	return oFF.notNull(queryManager) && queryManager.isValidatingLocalFormulaMembers();
};
oFF.AbstractBlendableQueryManager.prototype.loadQueryModel = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.maintainStateForRsWithAutoSubmit = function(resultSetContainer)
{
	this.getQueryManagerBase().maintainStateForRsWithAutoSubmit(resultSetContainer);
};
oFF.AbstractBlendableQueryManager.prototype.onModelChange = function(phase)
{
	this.getQueryManagerBase().onModelChange(phase);
};
oFF.AbstractBlendableQueryManager.prototype.prepareAfterVariables = function()
{
	this.getQueryManagerBase().prepareAfterVariables();
};
oFF.AbstractBlendableQueryManager.prototype.processBLOB = function(syncType, listener, customIdentifier, imagePath)
{
	let queryManager = this.getQueryManager();
	let syncAction = null;
	if (oFF.notNull(queryManager))
	{
		syncAction = queryManager.processBLOB(syncType, listener, customIdentifier, imagePath);
	}
	return syncAction;
};
oFF.AbstractBlendableQueryManager.prototype.processCancel = function(syncType)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.processCancel(syncType);
	}
};
oFF.AbstractBlendableQueryManager.prototype.processClearCache = function(syncType, timestamp)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.processClearCache(syncType, timestamp);
	}
};
oFF.AbstractBlendableQueryManager.prototype.processModelInitialization = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.processModelInitializationAndApplyRepoState = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.processQueryExecution = function(syncType, listener, customIdentifier)
{
	return this.getResultsetContainer(false).processExecution(syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.processQueryExecutionAsBlendingSource = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.processQueryExecutionAsLovProcess = function(lovConfig, syncType, listener, customIdentifier)
{
	return this.getQueryManagerBase().processQueryExecutionAsLovProcess(lovConfig, syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.processQueryExecutionAsRemotePreQuery = function(syncType, listener, customIdentifier)
{
	return this.getQueryManagerBase().processQueryExecutionAsRemotePreQuery(syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.processShutdown = function(syncType, listener, customIdentifier)
{
	let queryManager = this.getQueryManager();
	let syncAction = null;
	if (oFF.notNull(queryManager))
	{
		syncAction = queryManager.processShutdown(syncType, listener, customIdentifier);
	}
	return syncAction;
};
oFF.AbstractBlendableQueryManager.prototype.processUpdateRuntimeBlendQueryFromDependentQueries = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.reInitVariablesAfterSubmit = function(syncType, listener, customIdentifier)
{
	let blendableVariableSubmitProcessor = oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor(this);
	return blendableVariableSubmitProcessor.reInitVariablesAfterSubmit(syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.recordState = function()
{
	let queryManager = this.getQueryManager();
	let state = null;
	if (oFF.notNull(queryManager))
	{
		state = queryManager.recordState();
	}
	return state;
};
oFF.AbstractBlendableQueryManager.prototype.recordingStateOfQueryManager = function()
{
	let queryManager = this.getQueryManager();
	let recordingState = false;
	if (oFF.notNull(queryManager))
	{
		recordingState = queryManager.recordingStateOfQueryManager();
	}
	return recordingState;
};
oFF.AbstractBlendableQueryManager.prototype.registerVariableProcessorStateChangedListener = function(listener, customIdentifier)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.registerVariableProcessorStateChangedListener(listener, customIdentifier);
	}
};
oFF.AbstractBlendableQueryManager.prototype.releaseObject = function()
{
	this.m_primaryDatasetId = null;
	this.m_queryManagers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_queryManagers);
	this.m_activeContainer = oFF.XObjectExt.release(this.m_activeContainer);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.AbstractBlendableQueryManager.prototype.removeVariableVariant = function(variant)
{
	this.getQueryManagerBase().removeVariableVariant(variant);
};
oFF.AbstractBlendableQueryManager.prototype.removeVersionAlias = function(aliasName)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.removeVersionAlias(aliasName);
	}
};
oFF.AbstractBlendableQueryManager.prototype.resetExitOrUpdateDynamicVariable = function(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.resetExitOrUpdateDynamicVariable(syncType, listener, customIdentifier, overwriteDefaultForInputEnabledVar);
	}
};
oFF.AbstractBlendableQueryManager.prototype.resetMaxResultRecords = function()
{
	this.getResultsetContainer(true).resetMaxResultRecords();
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.resetNewValues = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.resetNewValues();
	}
};
oFF.AbstractBlendableQueryManager.prototype.resetPreparation = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.resetPreparation();
	}
};
oFF.AbstractBlendableQueryManager.prototype.retriggerQueryExecutionWithCustomHierarchies = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.returnToPreviousProcessorState = function()
{
	this.getQueryManagerBase().returnToPreviousProcessorState();
};
oFF.AbstractBlendableQueryManager.prototype.saveVariableVariant = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.setActiveResultSetContainer = function(activeResultSetContainer)
{
	this.m_activeContainer = activeResultSetContainer;
};
oFF.AbstractBlendableQueryManager.prototype.setCacheHintEnabled = function(enabled)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setCacheHintEnabled(enabled);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setClientQueryObjectMigrationStorageName = function(storageName)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setClientQueryObjectStorageName(storageName);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setClientQueryObjectStorageName = function(storageName)
{
	this.m_clientQueryObjectStorageName = storageName;
};
oFF.AbstractBlendableQueryManager.prototype.setDataEntryEnabled = function(dataEntryEnabled)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setDataEntryEnabled(dataEntryEnabled);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setDataEntryReadOnly = function(dataEntryReadOnly)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setDataEntryReadOnly(dataEntryReadOnly);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setDataRefreshEnabled = function(dataRefreshEnabled)
{
	if (this.getResultsetContainer(false).getDataRefreshEnabled() !== dataRefreshEnabled)
	{
		this.getResultsetContainer(true).setDataRefreshEnabled(dataRefreshEnabled);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setDataSource = function(dataSource)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setDataSource(dataSource);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setDeserializationStructureAsNull = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setDeserializationStructureAsNull();
	}
};
oFF.AbstractBlendableQueryManager.prototype.setDirectVariableTransferEnabled = function(directVariableTransfer)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setDirectVariableTransferEnabled(directVariableTransfer);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setExecuteRequestOnOldResultSet = function(executeRequestOnOldResultSet)
{
	if (this.getResultsetContainer(false).getExecuteRequestOnOldResultSet() !== executeRequestOnOldResultSet)
	{
		this.getResultsetContainer(true).setExecuteRequestOnOldResultSet(executeRequestOnOldResultSet);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setInputReadinessCacheMode = function(cacheMode)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setInputReadinessCacheMode(cacheMode);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setInputReadinessFilter = function(mode)
{
	let queryModel = this.getQueryModel();
	if (oFF.notNull(queryModel))
	{
		queryModel.setInputReadinessFilter(mode);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setInputReadinessMainQuery = function(mainQuery)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setInputReadinessMainQuery(mainQuery);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setIsMetadataCached = function(isMetadataCached)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setIsMetadataCached(isMetadataCached);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setLifeCycleState = function(desiredLifeCycleState)
{
	this.getQueryManagerBase().setLifeCycleState(desiredLifeCycleState);
};
oFF.AbstractBlendableQueryManager.prototype.setMaxColumns = function(max)
{
	if (this.getResultsetContainer(false).getMaxColumns() !== max)
	{
		this.getResultsetContainer(true).setMaxColumns(max);
		this.notifyNodeChanged();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setMaxResultRecords = function(maxResultRecords)
{
	if (this.getResultsetContainer(false).getMaxResultRecords() !== maxResultRecords)
	{
		this.getResultsetContainer(true).setMaxResultRecords(maxResultRecords);
		this.notifyNodeChanged();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setMaxRows = function(max)
{
	if (this.getResultsetContainer(false).getMaxRows() !== max)
	{
		this.getResultsetContainer(true).setMaxRows(max);
		this.notifyNodeChanged();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setNameForMicroCubeUse = function(name)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setNameForMicroCubeUse(name);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setNoVariableSubmitResponse = function(noVariableSubmitResponse)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setNoVariableSubmitResponse(noVariableSubmitResponse);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setOffsetColumns = function(offset)
{
	if (this.getResultsetContainer(false).getOffsetColumns() !== offset)
	{
		this.getResultsetContainer(true).setOffsetColumns(offset);
		this.notifyNodeChanged();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setOffsetRows = function(offset)
{
	if (this.getResultsetContainer(false).getOffsetRows() !== offset)
	{
		this.getResultsetContainer(true).setOffsetRows(offset);
		this.notifyNodeChanged();
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setPlanningMode = function(planningMode)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setPlanningMode(planningMode);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setPlanningRestriction = function(restrictionType)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setPlanningRestriction(restrictionType);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setPlanningVersionSettingsMode = function(settingsMode)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setPlanningVersionSettingsMode(settingsMode);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setPreQueryName = function(preQueryName)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setPreQueryName(preQueryName);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setPreviousVariableProcessorState = function(variableProcessorPreviousState)
{
	this.getQueryManagerBase().setPreviousVariableProcessorState(variableProcessorPreviousState);
};
oFF.AbstractBlendableQueryManager.prototype.setPublicVersionEditPossible = function(publicVersionEdit)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setPublicVersionEditPossible(publicVersionEdit);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setRequestPerformanceData = function(requestPerformanceData)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setRequestPerformanceData(requestPerformanceData);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setResultSetPersistanceTargetSchema = function(resultSetPersistenceSchema)
{
	let currentSchema = this.getResultsetContainer(false).getResultSetPersistenceSchema();
	if (!oFF.XString.isEqual(currentSchema, resultSetPersistenceSchema))
	{
		this.getResultsetContainer(true).setResultSetPersistanceTargetSchema(resultSetPersistenceSchema);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setResultSetPersistanceTargetTable = function(resultSetPersistenceTable)
{
	let currentTable = this.getResultsetContainer(false).getResultSetPersistenceTable();
	if (!oFF.XString.isEqual(currentTable, resultSetPersistenceTable))
	{
		this.getResultsetContainer(true).setResultSetPersistanceTargetTable(resultSetPersistenceTable);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setResultSetPersistenceIdentifier = function(resultSetPersistenceIdentifier)
{
	let currentIdentifier = this.getResultsetContainer(false).getResultSetPersistenceIdentifier();
	if (!oFF.XString.isEqual(currentIdentifier, resultSetPersistenceIdentifier))
	{
		this.getResultsetContainer(true).setResultSetPersistenceIdentifier(resultSetPersistenceIdentifier);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setResultSetPersistenceTargetType = function(resultSetPersistenceType)
{
	let currentType = this.getResultsetContainer(false).getResultSetPersistenceType();
	if (currentType !== resultSetPersistenceType)
	{
		this.getResultsetContainer(true).setResultSetPersistenceTargetType(resultSetPersistenceType);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setResultSetTransportEnabled = function(isEnabled)
{
	if (this.getResultsetContainer(false).isResultSetTransportEnabled() !== isEnabled)
	{
		this.getResultsetContainer(true).setResultSetTransportEnabled(isEnabled);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setSuppressCalculatedMembersWithoutBookedData = function(suppressIndicator)
{
	this.getResultsetContainer(true).setSuppressCalculatedMembersWithoutBookedData(suppressIndicator);
};
oFF.AbstractBlendableQueryManager.prototype.setSuppressKeyfigureCalculation = function(doSupress)
{
	if (this.getResultsetContainer(false).isKeyfigureCalculationSuppressed() !== doSupress)
	{
		this.getResultsetContainer(true).setSuppressKeyfigureCalculation(doSupress);
	}
	return null;
};
oFF.AbstractBlendableQueryManager.prototype.setSystemDescription = function(systemDescription)
{
	this.getQueryManagerBase().setSystemDescription(systemDescription);
};
oFF.AbstractBlendableQueryManager.prototype.setUpdatingDataRequestCapabilities = function(updateCapabilities)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setRequestPerformanceData(updateCapabilities);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setValidateLocalFormulaMembers = function(validate)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setValidateLocalFormulaMembers(validate);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setValueHelpProvider = function(valueHelpProvider)
{
	this.getQueryManagerBase().setValueHelpProvider(valueHelpProvider);
};
oFF.AbstractBlendableQueryManager.prototype.setVariableProcessorState = function(variableProcessorState)
{
	this.getQueryManagerBase().setVariableProcessorState(variableProcessorState);
};
oFF.AbstractBlendableQueryManager.prototype.setVersionAliasById = function(aliasName, versionId)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setVersionAliasById(aliasName, versionId);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setWinControlInAutoSubmitByType = function(variableType, isWinControlInAutoSubmit, isLimitToExitVariable)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setWinControlInAutoSubmitByType(variableType, isWinControlInAutoSubmit, isLimitToExitVariable);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setkeyRefSerializationEnabled = function(keyRefSerializationEnabled)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.setkeyRefSerializationEnabled(keyRefSerializationEnabled);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setupBlendingManager = function(context)
{
	this.setupModelComponent(context, null);
	this.m_queryManagers = oFF.XLinkedHashMapByString.create();
	this.m_primaryDatasetId = null;
};
oFF.AbstractBlendableQueryManager.prototype.setupClone = function(origin, cloneMode, dataSource)
{
	let originBlendableQM = origin;
	this.m_primaryDatasetId = originBlendableQM.m_primaryDatasetId;
	this.m_clientQueryObjectStorageName = originBlendableQM.m_clientQueryObjectStorageName;
	this.m_queryManagers.clear();
	let originQueryManagers = originBlendableQM.getAllQueryManagers();
	for (let j = 0; j < originQueryManagers.size(); j++)
	{
		let originQueryManager = originQueryManagers.get(j);
		let copyQueryManager = originQueryManager.cloneQueryManagerExt(cloneMode);
		this.addQueryManager(copyQueryManager);
	}
};
oFF.AbstractBlendableQueryManager.prototype.setupQueryModel = function()
{
	return this.getQueryManagerBase().setupQueryModel();
};
oFF.AbstractBlendableQueryManager.prototype.submitVariables = function(syncType, listener, customIdentifier)
{
	let blendableVariableSubmitProcessor = oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor(this);
	return blendableVariableSubmitProcessor.submitVariables(syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.supportsAnalyticCapability = function(capabilityName)
{
	let queryManager = this.getQueryManager();
	let supportsAnalyticCapability = false;
	if (oFF.notNull(queryManager))
	{
		supportsAnalyticCapability = queryManager.supportsAnalyticCapability(capabilityName);
	}
	return supportsAnalyticCapability;
};
oFF.AbstractBlendableQueryManager.prototype.supportsAndAllowsEmptyExtendedVarDefinition = function()
{
	let queryManager = this.getQueryManager();
	let supportsAndAllowsEmptyExtendedVarDefinition = false;
	if (oFF.notNull(queryManager))
	{
		supportsAndAllowsEmptyExtendedVarDefinition = queryManager.supportsAndAllowsEmptyExtendedVarDefinition();
	}
	return supportsAndAllowsEmptyExtendedVarDefinition;
};
oFF.AbstractBlendableQueryManager.prototype.supportsBatchBlendingRsStreaming = function()
{
	let queryManager = this.getQueryManager();
	let supportsBatchBlendingRsStreaming = false;
	if (oFF.notNull(queryManager))
	{
		supportsBatchBlendingRsStreaming = queryManager.supportsBatchBlendingRsStreaming();
	}
	return supportsBatchBlendingRsStreaming;
};
oFF.AbstractBlendableQueryManager.prototype.supportsBatchRsStreaming = function()
{
	let queryManager = this.getQueryManager();
	let supportsBatchRsStreaming = false;
	if (oFF.notNull(queryManager))
	{
		supportsBatchRsStreaming = queryManager.supportsBatchRsStreaming();
	}
	return supportsBatchRsStreaming;
};
oFF.AbstractBlendableQueryManager.prototype.supportsCheckVariables = function()
{
	let queryManager = this.getQueryManager();
	let supportsCheckVariables = false;
	if (oFF.notNull(queryManager))
	{
		supportsCheckVariables = queryManager.supportsCheckVariables();
	}
	return supportsCheckVariables;
};
oFF.AbstractBlendableQueryManager.prototype.supportsDataEntryReadOnly = function()
{
	let queryManager = this.getQueryManager();
	let supportsDataEntryReadOnly = false;
	if (oFF.notNull(queryManager))
	{
		supportsDataEntryReadOnly = queryManager.supportsDataEntryReadOnly();
	}
	return supportsDataEntryReadOnly;
};
oFF.AbstractBlendableQueryManager.prototype.supportsDirectVariableTransfer = function()
{
	let queryManager = this.getQueryManager();
	let supportsDirectVariableTransfer = false;
	if (oFF.notNull(queryManager))
	{
		supportsDirectVariableTransfer = queryManager.supportsDirectVariableTransfer();
	}
	return supportsDirectVariableTransfer;
};
oFF.AbstractBlendableQueryManager.prototype.supportsInputReadinessStates = function()
{
	let queryManager = this.getQueryManager();
	let supportsInputReadinessStates = false;
	if (oFF.notNull(queryManager))
	{
		supportsInputReadinessStates = queryManager.supportsInputReadinessStates();
	}
	return supportsInputReadinessStates;
};
oFF.AbstractBlendableQueryManager.prototype.supportsMaintainsVariableVariants = function()
{
	return false;
};
oFF.AbstractBlendableQueryManager.prototype.supportsReInitVariables = function()
{
	let queryManager = this.getQueryManager();
	let supportsReInitVariables = false;
	if (oFF.notNull(queryManager))
	{
		supportsReInitVariables = queryManager.supportsReInitVariables();
	}
	return supportsReInitVariables;
};
oFF.AbstractBlendableQueryManager.prototype.supportsReturnedDataSelection = function()
{
	let queryManager = this.getQueryManager();
	let supportsReturnedDataSelection = false;
	if (oFF.notNull(queryManager))
	{
		supportsReturnedDataSelection = queryManager.supportsReturnedDataSelection();
	}
	return supportsReturnedDataSelection;
};
oFF.AbstractBlendableQueryManager.prototype.supportsServerState = function()
{
	let queryManager = this.getQueryManager();
	let supportsServerState = false;
	if (oFF.notNull(queryManager))
	{
		supportsServerState = queryManager.supportsServerState();
	}
	return supportsServerState;
};
oFF.AbstractBlendableQueryManager.prototype.supportsShutdown = function()
{
	let queryManager = this.getQueryManager();
	let supportsShutdown = false;
	if (oFF.notNull(queryManager))
	{
		supportsShutdown = queryManager.supportsShutdown();
	}
	return supportsShutdown;
};
oFF.AbstractBlendableQueryManager.prototype.supportsVariableMasking = function()
{
	let queryManager = this.getQueryManager();
	let supportsVariableMasking = false;
	if (oFF.notNull(queryManager))
	{
		supportsVariableMasking = queryManager.supportsVariableMasking();
	}
	return supportsVariableMasking;
};
oFF.AbstractBlendableQueryManager.prototype.transferDataEntry = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.transferDataEntry();
	}
};
oFF.AbstractBlendableQueryManager.prototype.transferNewDocuments = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		this.getResultsetContainer(true);
		queryManager.transferNewDocuments();
	}
};
oFF.AbstractBlendableQueryManager.prototype.transferNewValues = function()
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.transferNewValues();
	}
};
oFF.AbstractBlendableQueryManager.prototype.transferVariables = function(syncType, listener, customIdentifier)
{
	let blendableVariableSubmitProcessor = oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor(this);
	return blendableVariableSubmitProcessor.transferVariables(syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.transferVariablesByVariable = function(variable, syncType, listener, customIdentifier)
{
	let blendableVariableSubmitProcessor = oFF.BlendableQMVariableSubmitProcessor.createBlendableVariableSubmitProcessor(this);
	return blendableVariableSubmitProcessor.transferVariablesByVariable(variable, syncType, listener, customIdentifier);
};
oFF.AbstractBlendableQueryManager.prototype.unregisterVariableProcessorStateChangedListener = function(listener)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.unregisterVariableProcessorStateChangedListener(listener);
	}
};
oFF.AbstractBlendableQueryManager.prototype.updateDynamicVariables = function(syncType, listener, customIdentifier)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.updateDynamicVariables(syncType, listener, customIdentifier);
	}
};
oFF.AbstractBlendableQueryManager.prototype.updateQueryManager = function(masterQueryManager, neededDimensions)
{
	let queryManager = this.getQueryManager();
	if (oFF.notNull(queryManager))
	{
		queryManager.updateQueryManager(masterQueryManager, neededDimensions);
	}
};
oFF.AbstractBlendableQueryManager.prototype.updateVariableVariantValues = oFF.noSupport;
oFF.AbstractBlendableQueryManager.prototype.variablesRequireImplicitSubmit = function()
{
	return this.getQueryManagerBase().variablesRequireImplicitSubmit();
};
oFF.AbstractBlendableQueryManager.prototype.variablesRequireImplicitSubmitForValueHelp = function(valueHelpDimension)
{
	return this.getQueryManagerBase().variablesRequireImplicitSubmitForValueHelp(valueHelpDimension);
};
oFF.AbstractBlendableQueryManager.prototype.variablesRequireSACImplicitSubmit = function()
{
	return this.getQueryManager().variablesRequireSACImplicitSubmit();
};

oFF.QCustomHierarchyDefinitionExt = function() {};
oFF.QCustomHierarchyDefinitionExt.prototype = new oFF.QCustomHierarchyDefinition();
oFF.QCustomHierarchyDefinitionExt.prototype._ff_c = "QCustomHierarchyDefinitionExt";

oFF.QCustomHierarchyDefinitionExt.createExtendedHierarchyDefinition = function(origin, inaHierarchy)
{
	let definitionResponse = new oFF.QCustomHierarchyDefinitionExt();
	definitionResponse.setupHierarchyDefinition(null, null, null, null, true);
	definitionResponse.copyFrom(origin, null);
	definitionResponse.m_inaHierarchy = inaHierarchy;
	return definitionResponse;
};
oFF.QCustomHierarchyDefinitionExt.prototype.m_inaHierarchy = null;
oFF.QCustomHierarchyDefinitionExt.prototype.getInaHierarchy = function()
{
	return this.m_inaHierarchy;
};
oFF.QCustomHierarchyDefinitionExt.prototype.releaseObject = function()
{
	oFF.QCustomHierarchyDefinition.prototype.releaseObject.call( this );
	this.m_inaHierarchy = oFF.XObjectExt.release(this.m_inaHierarchy);
};
oFF.QCustomHierarchyDefinitionExt.prototype.setInaHierarchy = function(inaHierarchy)
{
	this.m_inaHierarchy = inaHierarchy;
};

oFF.BlendableQueryManager = function() {};
oFF.BlendableQueryManager.prototype = new oFF.AbstractBlendableQueryManager();
oFF.BlendableQueryManager.prototype._ff_c = "BlendableQueryManager";

oFF.BlendableQueryManager.create = function(context, name)
{
	let blendingManager = new oFF.BlendableQueryManager();
	blendingManager.setupModelComponent(context, null);
	blendingManager.setName(oFF.notNull(name) ? name : context.getApplication().createNextInstanceId());
	blendingManager.setupBlendingManager(context);
	return blendingManager;
};
oFF.BlendableQueryManager.prototype.m_blendedDimensionOrder = null;
oFF.BlendableQueryManager.prototype.m_blendedDrillOperations = null;
oFF.BlendableQueryManager.prototype.m_blendedZoomDrills = null;
oFF.BlendableQueryManager.prototype.m_blendingRestrictionsEnabled = false;
oFF.BlendableQueryManager.prototype.m_blendingZeroSuppressionType = null;
oFF.BlendableQueryManager.prototype.m_expandedChildMembersByDatasetId = null;
oFF.BlendableQueryManager.prototype.m_formulaExceptions = null;
oFF.BlendableQueryManager.prototype.m_includesDisplayKeyInMeasureDimension = false;
oFF.BlendableQueryManager.prototype.m_isAllMembersOrFsicEnabled = null;
oFF.BlendableQueryManager.prototype.m_isFormulaExceptionResultHidden = false;
oFF.BlendableQueryManager.prototype.m_isPreserveAttributeLayout = false;
oFF.BlendableQueryManager.prototype.m_modCounterState = null;
oFF.BlendableQueryManager.prototype.m_primaryBlendedMeasureContainer = null;
oFF.BlendableQueryManager.prototype.m_queryModelLinkSettings = null;
oFF.BlendableQueryManager.prototype.m_rankSettings = null;
oFF.BlendableQueryManager.prototype.m_sortContainer = null;
oFF.BlendableQueryManager.prototype.m_supportsAccountSecondaryMeasureDimensionOnNoneAxis = false;
oFF.BlendableQueryManager.prototype.m_supportsConcurrentDimensionAndMeasureSorting = false;
oFF.BlendableQueryManager.prototype.m_supportsDrillonBlendNodeOnly = false;
oFF.BlendableQueryManager.prototype.m_transientMeasures = null;
oFF.BlendableQueryManager.prototype.addActivePrimaryLinkDimensionName = function(secondaryDatasetId, primaryDimensionLinkName)
{
	let queryModelLinkSettings = this.getQueryModelLinkSettings(secondaryDatasetId);
	queryModelLinkSettings.addActivePrimaryLinkDimensionName(primaryDimensionLinkName);
};
oFF.BlendableQueryManager.prototype.addBlendableDimensionSort = function(fieldName, datasetId, sortDirection, preserveGrouping, language)
{
	return this.m_sortContainer.addBlendableDimensionSort(fieldName, datasetId, sortDirection, preserveGrouping, language);
};
oFF.BlendableQueryManager.prototype.addBlendedDimensionInfoToAxis = function(axis, datasetId, dimensionName)
{
	this.removeBlendedDimensionInfoInternal(datasetId, dimensionName);
	let blendedDimensionInfo = this.m_blendedDimensionOrder.getByKey(axis.getName());
	let newBlendedDimensionInfo = this.insertBlendedDimensionInfoToAxisInternal(axis, datasetId, dimensionName, oFF.notNull(blendedDimensionInfo) ? blendedDimensionInfo.size() : 0);
	return newBlendedDimensionInfo;
};
oFF.BlendableQueryManager.prototype.addExpandedParentChildMember = function(datasetId, parentMemberName, childMemberName)
{
	let parentChildMembersMap = this.m_expandedChildMembersByDatasetId.getByKey(datasetId);
	if (oFF.isNull(parentChildMembersMap))
	{
		parentChildMembersMap = oFF.XHashMapByString.create();
		this.m_expandedChildMembersByDatasetId.put(datasetId, parentChildMembersMap);
	}
	let childMembers = parentChildMembersMap.getByKey(parentMemberName);
	if (oFF.isNull(childMembers))
	{
		childMembers = oFF.XHashSetOfString.create();
		parentChildMembersMap.put(parentMemberName, childMembers);
	}
	childMembers.add(childMemberName);
};
oFF.BlendableQueryManager.prototype.addFormulaException = function(formulaException)
{
	if (oFF.notNull(formulaException))
	{
		this.m_formulaExceptions.add(formulaException);
		formulaException.addSecondaryParent(this);
	}
};
oFF.BlendableQueryManager.prototype.addNewBlendedDrillOperation = function(datasetId, dimensionName)
{
	let newBlendedDimensionDrillInfo = oFF.BlendedDrillInfo.createBlendedDimensionDrillInfo(this, datasetId, dimensionName);
	this.addOrReplaceExistingBlendedDrillOperation(newBlendedDimensionDrillInfo, this.m_blendedDrillOperations);
	return newBlendedDimensionDrillInfo;
};
oFF.BlendableQueryManager.prototype.addNewBlendedZoomDrill = function(datasetId, dimensionName, isHideRoots)
{
	let newBlendedDimensionDrillInfo = oFF.BlendedDrillInfo.createBlendedZoomDrillInfo(this, datasetId, dimensionName, isHideRoots);
	this.addOrReplaceExistingBlendedDrillOperation(newBlendedDimensionDrillInfo, this.m_blendedZoomDrills);
	return newBlendedDimensionDrillInfo;
};
oFF.BlendableQueryManager.prototype.addNewQueryModelLinkSettings = function(primaryDatasetId, secondaryDatasetId)
{
	let queryModelLinkSettings = oFF.QueryModelLinkSettings.create(this, primaryDatasetId, secondaryDatasetId);
	this.m_queryModelLinkSettings.add(queryModelLinkSettings);
};
oFF.BlendableQueryManager.prototype.addOrReplaceExistingBlendedDrillOperation = function(newDrillOperation, blendedDrillOperations)
{
	for (let i = blendedDrillOperations.size() - 1; i >= 0; i--)
	{
		let blendedDrillOperation = blendedDrillOperations.get(i);
		if (oFF.XString.isEqual(blendedDrillOperation.getDatasetId(), newDrillOperation.getDatasetId()) && oFF.XString.isEqual(blendedDrillOperation.getDimensionName(), newDrillOperation.getDimensionName()))
		{
			let blendedDrillPathElements = blendedDrillOperation.getBlendedDrillPathElementInfos();
			let drillPathIterator = blendedDrillPathElements.getIterator();
			let newBlendedDrillPathElementInfos = newDrillOperation.getBlendedDrillPathElementInfos();
			let isPathElementsMatch = false;
			if (newBlendedDrillPathElementInfos.size() === blendedDrillPathElements.size())
			{
				isPathElementsMatch = true;
				while (drillPathIterator.hasNext())
				{
					let drillPathElement = drillPathIterator.next();
					if (!oFF.XCollectionUtils.contains(newBlendedDrillPathElementInfos, (newBlendedDrillPathElementInfo) => {
						return oFF.XString.isEqual(newBlendedDrillPathElementInfo.getDrillMember(), drillPathElement.getDrillMember());
					}))
					{
						isPathElementsMatch = false;
						break;
					}
				}
			}
			if (isPathElementsMatch)
			{
				blendedDrillOperations.removeAt(i);
				break;
			}
		}
	}
	blendedDrillOperations.add(newDrillOperation);
};
oFF.BlendableQueryManager.prototype.addPrimaryBlendedMeasure = function(member)
{
	this.m_primaryBlendedMeasureContainer.addPrimaryBlendedMeasure(member);
};
oFF.BlendableQueryManager.prototype.addQueryManager = function(queryManager)
{
	let queryModel = queryManager.getQueryModel();
	let datasetId = queryModel.getDatasetId();
	if (oFF.isNull(datasetId))
	{
		throw oFF.XException.createIllegalArgumentException("The query manager requires a datasetId.");
	}
	this.m_queryManagers.put(datasetId, queryManager);
	queryModel.addSecondaryParent(this);
	let rowsIter = queryModel.getRowsAxis().getIterator();
	while (rowsIter.hasNext())
	{
		this.addBlendedDimensionInfoToAxis(oFF.AxisType.ROWS, datasetId, rowsIter.next().getName());
	}
	let columnsIter = queryModel.getColumnsAxis().getIterator();
	while (columnsIter.hasNext())
	{
		this.addBlendedDimensionInfoToAxis(oFF.AxisType.COLUMNS, datasetId, columnsIter.next().getName());
	}
	queryManager.getTagging().put(oFF.QStateConstants.TAG_UNDO_IGNORE, "");
};
oFF.BlendableQueryManager.prototype.addRankSettings = function(rankSettings)
{
	this.m_rankSettings.add(rankSettings);
};
oFF.BlendableQueryManager.prototype.addSecondaryQueryManager = function(queryManager)
{
	this.addQueryManager(queryManager);
	let primaryDatasetId = this.getPrimaryQueryManager().getQueryModel().getDatasetId();
	let secondaryDatasetId = queryManager.getQueryModel().getDatasetId();
	this.addNewQueryModelLinkSettings(primaryDatasetId, secondaryDatasetId);
};
oFF.BlendableQueryManager.prototype.addTransientMeasure = function(transientMeasure)
{
	if (oFF.notNull(transientMeasure) && !this.m_transientMeasures.contains(transientMeasure) && this.getOlapEnv().getClientQueryObjectManager().getClientQueryObjectByKeyRef(transientMeasure) !== null)
	{
		this.m_transientMeasures.add(transientMeasure);
		transientMeasure.addSecondaryParent(this);
	}
};
oFF.BlendableQueryManager.prototype.clearBlendableDimensionSorts = function()
{
	this.m_sortContainer.clearBlendableDimensionSorts();
};
oFF.BlendableQueryManager.prototype.clearBlendedDimensionInfosByAxis = function(axis)
{
	let blendedDimensionOrder = this.m_blendedDimensionOrder.getByKey(axis.getName());
	if (oFF.notNull(blendedDimensionOrder) && blendedDimensionOrder.size() > 0)
	{
		blendedDimensionOrder.clear();
	}
};
oFF.BlendableQueryManager.prototype.clearBlendedDrillOperations = function()
{
	if (this.m_blendedDrillOperations.size() > 0)
	{
		this.m_blendedDrillOperations.clear();
	}
};
oFF.BlendableQueryManager.prototype.clearBlendedZoomDrills = function()
{
	if (this.m_blendedZoomDrills.size() > 0)
	{
		this.m_blendedZoomDrills.clear();
	}
};
oFF.BlendableQueryManager.prototype.clearClientInfo = function() {};
oFF.BlendableQueryManager.prototype.clearFormulaExceptions = function()
{
	oFF.XCollectionUtils.forEach(this.m_formulaExceptions, (formulaException) => {
		formulaException.removeSecondaryParent(this);
	});
	this.m_formulaExceptions.clear();
};
oFF.BlendableQueryManager.prototype.clearPrimaryBlendableMemberMeasureSort = function()
{
	this.m_sortContainer.clearPrimaryBlendableMemberMeasureSort();
};
oFF.BlendableQueryManager.prototype.clearPrimaryBlendedMeasures = function()
{
	this.m_primaryBlendedMeasureContainer.clearPrimaryBlendedMeasures();
};
oFF.BlendableQueryManager.prototype.clearQueryModelLinkSettings = function()
{
	oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_queryModelLinkSettings);
	this.m_queryModelLinkSettings.clear();
};
oFF.BlendableQueryManager.prototype.clearRankSettings = function()
{
	if (this.m_rankSettings.size() > 0)
	{
		oFF.XCollectionUtils.releaseEntriesFromCollection(this.m_rankSettings);
		this.m_rankSettings.clear();
	}
};
oFF.BlendableQueryManager.prototype.clearTransientMeasures = function()
{
	oFF.XCollectionUtils.forEach(this.m_transientMeasures, (transientMeasure) => {
		transientMeasure.removeSecondaryParent(this);
	});
	this.m_transientMeasures.clear();
};
oFF.BlendableQueryManager.prototype.cloneQueryManagerExt = function(cloneMode)
{
	let cloneBlendableQueryManager = oFF.AbstractBlendableQueryManager.prototype.cloneQueryManagerExt.call( this , cloneMode);
	cloneBlendableQueryManager.copyFrom(this, null);
	return cloneBlendableQueryManager;
};
oFF.BlendableQueryManager.prototype.cloneQueryManagerOptimized = function(neededDimensions)
{
	let cloneBlendableQueryManager = oFF.AbstractBlendableQueryManager.prototype.cloneQueryManagerOptimized.call( this , neededDimensions);
	cloneBlendableQueryManager.copyFrom(this, null);
	return cloneBlendableQueryManager;
};
oFF.BlendableQueryManager.prototype.copyFromInternal = function(other, flags)
{
	let origin = other;
	this.m_primaryBlendedMeasureContainer.copyFrom(origin.m_primaryBlendedMeasureContainer, null);
	this.m_queryModelLinkSettings.clear();
	let queryModelLinkSettingsIterator = origin.m_queryModelLinkSettings.getIterator();
	while (queryModelLinkSettingsIterator.hasNext())
	{
		let queryModelLinkSettings = queryModelLinkSettingsIterator.next();
		this.m_queryModelLinkSettings.add(queryModelLinkSettings.cloneOlapComponent(this, null));
	}
	this.m_sortContainer.copyFrom(origin.m_sortContainer, null);
	this.m_blendedDimensionOrder.clear();
	let blendedDimensionOrderRowsIter = origin.getBlendedDimensionsByAxis(oFF.AxisType.ROWS).getIterator();
	while (blendedDimensionOrderRowsIter.hasNext())
	{
		let blendedDimensionOrderRow = blendedDimensionOrderRowsIter.next();
		let newBlendedDimensionInfoRow = this.addBlendedDimensionInfoToAxis(oFF.AxisType.ROWS, blendedDimensionOrderRow.getDatasetId(), blendedDimensionOrderRow.getDimensionName());
		newBlendedDimensionInfoRow.copyFrom(blendedDimensionOrderRow, null);
	}
	let blendedDimensionOrderColumnsIter = origin.getBlendedDimensionsByAxis(oFF.AxisType.COLUMNS).getIterator();
	while (blendedDimensionOrderColumnsIter.hasNext())
	{
		let blendedDimensionOrderColumn = blendedDimensionOrderColumnsIter.next();
		let newBlendedDimensionOrderColumn = this.addBlendedDimensionInfoToAxis(oFF.AxisType.COLUMNS, blendedDimensionOrderColumn.getDatasetId(), blendedDimensionOrderColumn.getDimensionName());
		newBlendedDimensionOrderColumn.copyFrom(blendedDimensionOrderColumn, null);
	}
	this.m_blendedDrillOperations.clear();
	let blendedDrillInfosIter = origin.getBlendedDrillOperations().getIterator();
	while (blendedDrillInfosIter.hasNext())
	{
		let blendedDrillInfo = blendedDrillInfosIter.next();
		let newBlendedDrillInfo = this.addNewBlendedDrillOperation(blendedDrillInfo.getDatasetId(), blendedDrillInfo.getDimensionName());
		newBlendedDrillInfo.copyFrom(blendedDrillInfo, null);
	}
	this.m_blendedZoomDrills.clear();
	let blendedZoomDrillsIter = origin.getBlendedZoomDrills().getIterator();
	while (blendedZoomDrillsIter.hasNext())
	{
		let blendedZoomDrill = blendedZoomDrillsIter.next();
		let newBlendedDrillInfo = this.addNewBlendedZoomDrill(blendedZoomDrill.getDatasetId(), blendedZoomDrill.getDimensionName(), blendedZoomDrill.isHideRoots());
		newBlendedDrillInfo.copyFrom(blendedZoomDrill, null);
	}
	this.m_rankSettings.clear();
	let rankSettingsIter = origin.getRankSettings().getIterator();
	while (rankSettingsIter.hasNext())
	{
		let rankSettings = oFF.QFactory.createRankSettings();
		rankSettings.copyFrom(rankSettingsIter.next(), null);
		this.m_rankSettings.add(rankSettings);
	}
	this.clearFormulaExceptions();
	let formulaExceptionsIter = origin.m_formulaExceptions.getIterator();
	while (formulaExceptionsIter.hasNext())
	{
		this.addFormulaException(formulaExceptionsIter.next());
	}
	this.m_blendingRestrictionsEnabled = origin.m_blendingRestrictionsEnabled;
	this.m_blendingZeroSuppressionType = origin.m_blendingZeroSuppressionType.createMapByStringCopy();
	this.m_expandedChildMembersByDatasetId = origin.m_expandedChildMembersByDatasetId.createMapByStringCopy();
	this.m_isAllMembersOrFsicEnabled = origin.m_isAllMembersOrFsicEnabled.createMapByStringCopy();
	this.m_supportsDrillonBlendNodeOnly = origin.m_supportsDrillonBlendNodeOnly;
	this.m_isFormulaExceptionResultHidden = origin.m_isFormulaExceptionResultHidden;
	this.m_isPreserveAttributeLayout = origin.m_isPreserveAttributeLayout;
	this.m_supportsConcurrentDimensionAndMeasureSorting = origin.m_supportsConcurrentDimensionAndMeasureSorting;
	this.m_includesDisplayKeyInMeasureDimension = origin.m_includesDisplayKeyInMeasureDimension;
	this.m_supportsAccountSecondaryMeasureDimensionOnNoneAxis = origin.m_supportsAccountSecondaryMeasureDimensionOnNoneAxis;
};
oFF.BlendableQueryManager.prototype.doesChildMemberExist = function(datasetId, childMemberName)
{
	let parentChildMembersMap = this.m_expandedChildMembersByDatasetId.getByKey(datasetId);
	if (oFF.notNull(parentChildMembersMap))
	{
		return oFF.XCollectionUtils.contains(parentChildMembersMap.getValuesAsReadOnlyList(), (childMembers) => {
			return childMembers.contains(childMemberName);
		});
	}
	return false;
};
oFF.BlendableQueryManager.prototype.exportPersistedQueriesAndRuntimeQueryManager = function(syncType, listener, customIdentifier)
{
	let blendableQMPersistedInAExportAction = oFF.BlendableQMPersistedInAExportAction.create(this);
	return blendableQMPersistedInAExportAction.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQueryManager.prototype.getActivePrimaryLinkDimensionNames = function(secondaryDatasetId)
{
	let activePrimaryLinkedDimensionNames = oFF.XHashSetOfString.create();
	activePrimaryLinkedDimensionNames.addAll(this.getActivePrimaryLinkDimensionNamesSettings(secondaryDatasetId));
	let modelLinks = this.getModelLinks(this.getOlapEnv().getModelLinkManager(), this.m_primaryDatasetId, secondaryDatasetId);
	let primaryQueryModel = this.getPrimaryQueryManager().getQueryModel();
	oFF.XCollectionUtils.forEach(modelLinks, (modelLink) => {
		let dimension = primaryQueryModel.getDimensionByName(modelLink.getFirstPart().getDimensionName());
		if (oFF.notNull(dimension) && (dimension.getAxisType() === oFF.AxisType.ROWS || dimension.getAxisType() === oFF.AxisType.COLUMNS))
		{
			activePrimaryLinkedDimensionNames.add(dimension.getName());
		}
	});
	return activePrimaryLinkedDimensionNames.getValuesAsReadOnlyList();
};
oFF.BlendableQueryManager.prototype.getActivePrimaryLinkDimensionNamesSettings = function(secondaryDatasetId)
{
	let activePrimaryLinkedDimensionNames = oFF.XHashSetOfString.create();
	let queryModelLinkSettings = this.m_queryModelLinkSettings.getByKey(secondaryDatasetId);
	if (oFF.notNull(queryModelLinkSettings))
	{
		activePrimaryLinkedDimensionNames.addAll(queryModelLinkSettings.getActivePrimaryLinkDimensionNames());
	}
	return activePrimaryLinkedDimensionNames.getValuesAsReadOnlyList();
};
oFF.BlendableQueryManager.prototype.getAllMembersOrFsicEnabled = function(datasetId)
{
	if (oFF.isNull(datasetId))
	{
		return false;
	}
	return this.m_isAllMembersOrFsicEnabled.getByKey(datasetId) !== null && this.m_isAllMembersOrFsicEnabled.getByKey(datasetId).getBoolean();
};
oFF.BlendableQueryManager.prototype.getAllQueryModelLinkSettings = function()
{
	return this.m_queryModelLinkSettings;
};
oFF.BlendableQueryManager.prototype.getBlendableDimensionSorts = function()
{
	return this.m_sortContainer.getBlendableDimensionSorts();
};
oFF.BlendableQueryManager.prototype.getBlendableMeasureMemberSort = function()
{
	return this.m_sortContainer.getBlendableMeasureMemberSort();
};
oFF.BlendableQueryManager.prototype.getBlendedDimensionsByAxis = function(axis)
{
	let blendedDimensionOrder = this.m_blendedDimensionOrder.getByKey(axis.getName());
	if (oFF.isNull(blendedDimensionOrder))
	{
		blendedDimensionOrder = oFF.XList.create();
	}
	return blendedDimensionOrder;
};
oFF.BlendableQueryManager.prototype.getBlendedDrillOperations = function()
{
	return this.m_blendedDrillOperations;
};
oFF.BlendableQueryManager.prototype.getBlendedZoomDrills = function()
{
	return this.m_blendedZoomDrills;
};
oFF.BlendableQueryManager.prototype.getBlendingProcessConfigs = function(validationResult)
{
	let modelLinkManager = this.getOlapEnv().getModelLinkManager();
	let primaryQueryManager = this.getPrimaryQueryManager();
	let primaryDatasetId = primaryQueryManager.getQueryModel().getDatasetId();
	let configs = oFF.XList.create();
	if (this.m_blendingRestrictionsEnabled && !oFF.BlendingUtils.isQueryModelInUseForBlending(primaryQueryManager.getQueryModel(), this))
	{
		let primaryNotInUseArgs = oFF.XList.create();
		primaryNotInUseArgs.add(primaryQueryManager.getQueryModel().getDatasetUIName());
		let primaryQMNotInUseMsg = oFF.ErrorMessages.getText(oFF.ErrorMessages.QUERYMODEL_NOT_IN_USE, primaryNotInUseArgs, null, null);
		validationResult.addError(oFF.ErrorCodes.QUERYMODEL_NOT_IN_USE, primaryQMNotInUseMsg);
		return configs;
	}
	let queryModelLinkSettingsIterator = this.m_queryModelLinkSettings.getIterator();
	while (queryModelLinkSettingsIterator.hasNext())
	{
		let queryModelLinkSettings = queryModelLinkSettingsIterator.next();
		let secondDatasetId = queryModelLinkSettings.getSecondDatasetId();
		let secondaryQueryManager = this.getQueryManagerByDatasetId(secondDatasetId);
		if (oFF.isNull(secondaryQueryManager) || !oFF.BlendingUtils.isQueryModelInUseForBlending(secondaryQueryManager.getQueryModel(), this))
		{
			let secondaryQMNotInUseArgs = oFF.XList.create();
			secondaryQMNotInUseArgs.add(secondaryQueryManager.getQueryModel().getDatasetUIName());
			let secondaryQMNotInUseMsg = oFF.ErrorMessages.getText(oFF.ErrorMessages.QUERYMODEL_NOT_IN_USE, secondaryQMNotInUseArgs, null, null);
			validationResult.addError(oFF.ErrorCodes.QUERYMODEL_NOT_IN_USE, secondaryQMNotInUseMsg);
			continue;
		}
		if (primaryQueryManager.getConvenienceCommands().isLinkingToQueryManagerUnsupported(secondaryQueryManager))
		{
			validationResult.addError(oFF.ErrorCodes.BLENDING_INVALID_MODEL_LINK, oFF.ErrorMessages.BLENDING_INVALID_MODEL_LINK);
			continue;
		}
		let modelLinks = this.getModelLinks(modelLinkManager, primaryDatasetId, secondDatasetId);
		if (modelLinks.size() > 0)
		{
			let copyQueryModelLinkSettings = oFF.QueryModelLinkSettings.create(this, primaryDatasetId, secondDatasetId);
			copyQueryModelLinkSettings.copyFrom(queryModelLinkSettings, null);
			let copyModelLinks = oFF.XList.create();
			let modelDimensionLinksIter = modelLinks.getIterator();
			let primaryLinkDimensionFound = !this.m_blendingRestrictionsEnabled;
			let linkDimensionNotInDrillArgs;
			let linkDimensionNotInDrillArgsMsg;
			while (modelDimensionLinksIter.hasNext())
			{
				let activeDimensionLink = modelDimensionLinksIter.next();
				let isValidLink = !this.m_blendingRestrictionsEnabled;
				if (!isValidLink)
				{
					let primaryDimension = this.getPrimaryQueryManager().getQueryModel().getDimensionByName(activeDimensionLink.getFirstPart().getDimensionName());
					isValidLink = oFF.notNull(primaryDimension) && (oFF.AxisType.ROWS === primaryDimension.getAxisType() || oFF.AxisType.COLUMNS === primaryDimension.getAxisType());
					if (isValidLink)
					{
						primaryLinkDimensionFound = true;
					}
					let secondaryDimension = this.getQueryManagerByDatasetId(secondDatasetId).getQueryModel().getDimensionByName(activeDimensionLink.getSecondPart().getDimensionName());
					if (oFF.BlendingMappingUtils.isDimensionInDrill(secondaryDimension))
					{
						isValidLink = false;
						linkDimensionNotInDrillArgs = oFF.XList.create();
						linkDimensionNotInDrillArgs.add(secondaryDimension.getText());
						linkDimensionNotInDrillArgsMsg = oFF.ErrorMessages.getText(oFF.ErrorMessages.SECONDARY_LINK_DIMENSION_IN_DRILL, linkDimensionNotInDrillArgs, null, null);
						validationResult.addError(oFF.ErrorCodes.SECONDARY_LINK_DIMENSION_IN_DRILL, linkDimensionNotInDrillArgsMsg);
					}
					let isPrimaryDimensionBWDateWithActiveHierarchy = oFF.notNull(primaryDimension) && primaryDimension.getQueryModel().getConvenienceCommands().isTypeOfBw() && oFF.BlendingMappingUtils.isDateOrTimeLikeLinkDimension(primaryDimension) && !oFF.QTimeDimensionUtil.isFiscalWithFunctionalVariables(primaryDimension) && primaryDimension.isHierarchyActive();
					if (isPrimaryDimensionBWDateWithActiveHierarchy)
					{
						isValidLink = false;
						if (oFF.BlendingMappingUtils.isDimensionInDrill(primaryDimension))
						{
							validationResult.addError(oFF.ErrorCodes.BW_DATE_TIME_DIMENSION_ONLY_SUPPORTED_AS_FLAT_LINKED_DIMENSION, oFF.ErrorMessages.BW_DATE_TIME_DIMENSION_ONLY_SUPPORTED_AS_FLAT_LINKED_DIMENSION);
						}
					}
				}
				if (isValidLink)
				{
					copyModelLinks.add(activeDimensionLink.cloneOlapComponent(this.getContext(), null));
				}
			}
			if (!primaryLinkDimensionFound)
			{
				linkDimensionNotInDrillArgs = oFF.XList.create();
				linkDimensionNotInDrillArgs.add(secondaryQueryManager.getQueryModel().getDatasetUIName());
				linkDimensionNotInDrillArgsMsg = oFF.ErrorMessages.getText(oFF.ErrorMessages.LINK_DIMENSION_NOT_IN_DRILL, linkDimensionNotInDrillArgs, null, null);
				validationResult.addError(oFF.ErrorCodes.LINK_DIMENSION_NOT_IN_DRILL, linkDimensionNotInDrillArgsMsg);
			}
			if (copyModelLinks.size() > 0)
			{
				configs.add(oFF.BlendingProcessConfig.create(primaryQueryManager, secondaryQueryManager, copyModelLinks, copyQueryModelLinkSettings));
			}
		}
		else
		{
			validationResult.addError(oFF.ErrorCodes.NO_DIMENSION_LINKS, oFF.ErrorMessages.NO_DIMENSION_LINKS);
		}
	}
	if (!validationResult.hasErrors())
	{
		let primaryCalculationDimension = primaryQueryManager.getQueryModel().getPrimaryCalculationDimension();
		if (primaryCalculationDimension.getAxisType() !== oFF.AxisType.ROWS && primaryCalculationDimension.getAxisType() !== oFF.AxisType.COLUMNS)
		{
			validationResult.addError(oFF.ErrorCodes.BLENDING_PRIMARY_CALCULATION_DIMENSION_NOT_IN_DRILL, oFF.ErrorMessages.BLENDING_PRIMARY_CALCULATION_DIMENSION_NOT_IN_DRILL);
		}
	}
	return configs;
};
oFF.BlendableQueryManager.prototype.getBlendingZeroSuppressionType = function(axisType)
{
	if (oFF.isNull(this.m_blendingZeroSuppressionType) || oFF.isNull(axisType))
	{
		return null;
	}
	return this.m_blendingZeroSuppressionType.getByKey(axisType.getName());
};
oFF.BlendableQueryManager.prototype.getClientComponent = function()
{
	return null;
};
oFF.BlendableQueryManager.prototype.getClientIdentifier = function()
{
	return null;
};
oFF.BlendableQueryManager.prototype.getClientInfo = function()
{
	return this.getApplication().getClientInfo();
};
oFF.BlendableQueryManager.prototype.getClientVersion = function()
{
	return null;
};
oFF.BlendableQueryManager.prototype.getExpandedParentsMap = function(datasetId)
{
	return this.m_expandedChildMembersByDatasetId.getByKey(datasetId);
};
oFF.BlendableQueryManager.prototype.getFormulaExceptions = function()
{
	return this.m_formulaExceptions;
};
oFF.BlendableQueryManager.prototype.getLanguageLocale = function()
{
	return null;
};
oFF.BlendableQueryManager.prototype.getLinkType = function(secondaryDatasetId)
{
	let blendingLinkType = null;
	let queryModelLinkSettings = this.m_queryModelLinkSettings.getByKey(secondaryDatasetId);
	if (oFF.notNull(queryModelLinkSettings))
	{
		blendingLinkType = queryModelLinkSettings.getLinkType();
	}
	return blendingLinkType;
};
oFF.BlendableQueryManager.prototype.getModCounterState = function()
{
	if (oFF.isNull(this.m_modCounterState))
	{
		this.m_modCounterState = oFF.ModCounterState.create(this);
	}
	return this.m_modCounterState;
};
oFF.BlendableQueryManager.prototype.getModelLinks = function(modelLinkManager, primaryDatasetId, secondDatasetId)
{
	let modelLinks = oFF.XCollectionUtils.filter(modelLinkManager.getDimensionLinksByDatasetIds(this.getClientQueryObjectStorageName(), primaryDatasetId, secondDatasetId, true), (dimensionLink) => {
		let firstPart = dimensionLink.getFirstPart();
		let secondPart = dimensionLink.getSecondPart();
		let firstDimension = firstPart.getDimensionAccessor().getDimensionByName(firstPart.getDimensionName());
		let isFirstPartFlexibleTime = !oFF.QTimeDimensionUtil.isFiscalWithFunctionalVariables(firstDimension) && (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(firstDimension) || oFF.QTimeDimensionUtil.hasFlexibleTimeGroupingDimension(firstDimension));
		let secondDimension = secondPart.getDimensionAccessor().getDimensionByName(secondPart.getDimensionName());
		let isSecondPartFlexibleTime = !oFF.QTimeDimensionUtil.isFiscalWithFunctionalVariables(secondDimension) && (oFF.QTimeDimensionUtil.isFlexibleTimeDimension(secondDimension) || oFF.QTimeDimensionUtil.hasFlexibleTimeGroupingDimension(secondDimension));
		return !isFirstPartFlexibleTime && !isSecondPartFlexibleTime;
	});
	return modelLinks;
};
oFF.BlendableQueryManager.prototype.getPrimaryBlendableMeasureMemberSort = function()
{
	return this.m_sortContainer.getPrimaryBlendableMeasureMemberSort();
};
oFF.BlendableQueryManager.prototype.getPrimaryBlendedMeasureContainer = function()
{
	return this.m_primaryBlendedMeasureContainer;
};
oFF.BlendableQueryManager.prototype.getPrimaryBlendedMeasures = function()
{
	return this.m_primaryBlendedMeasureContainer.getPrimaryBlendedMeasures();
};
oFF.BlendableQueryManager.prototype.getPrimaryBlendedMeasuresFromFilters = function()
{
	return oFF.BlendingUtils.getPrimaryMeasuresFromFilters(this, true, true, false);
};
oFF.BlendableQueryManager.prototype.getQueryModelLinkSettings = function(secondaryDatasetId)
{
	let queryModelLinkSettings = this.m_queryModelLinkSettings.getByKey(secondaryDatasetId);
	if (this.getQueryManagerByDatasetId(secondaryDatasetId) !== null && oFF.isNull(queryModelLinkSettings))
	{
		queryModelLinkSettings = oFF.QueryModelLinkSettings.create(this, this.getPrimaryQueryManager().getQueryModel().getDatasetId(), secondaryDatasetId);
		this.m_queryModelLinkSettings.add(queryModelLinkSettings);
	}
	return queryModelLinkSettings;
};
oFF.BlendableQueryManager.prototype.getRankSettings = function()
{
	return this.m_rankSettings;
};
oFF.BlendableQueryManager.prototype.getRuntimeQueryManager = function(syncType, listener, customIdentifier)
{
	let runtimeBlendedQueryManagerAction = oFF.RuntimeBlendedQueryManagerAction.create(this);
	return runtimeBlendedQueryManagerAction.processSyncAction(syncType, listener, customIdentifier);
};
oFF.BlendableQueryManager.prototype.getSecondaryModelDatasetIdOrder = function()
{
	let datasetIds = oFF.XList.create();
	oFF.XCollectionUtils.forEach(this.m_queryModelLinkSettings, (queryModelLinks) => {
		datasetIds.add(queryModelLinks.getSecondDatasetId());
	});
	return datasetIds;
};
oFF.BlendableQueryManager.prototype.getSortingContainer = function()
{
	return this.m_sortContainer;
};
oFF.BlendableQueryManager.prototype.getStoryId = function()
{
	return null;
};
oFF.BlendableQueryManager.prototype.getStoryName = function()
{
	return null;
};
oFF.BlendableQueryManager.prototype.getUnlinkedDimensionJoinType = function(secondaryDatasetId)
{
	let unlinkedDimensionJoinType = null;
	let queryModelLinkSettings = this.m_queryModelLinkSettings.getByKey(secondaryDatasetId);
	if (oFF.notNull(queryModelLinkSettings))
	{
		unlinkedDimensionJoinType = queryModelLinkSettings.getUnlinkedDimensionJoinType();
	}
	return unlinkedDimensionJoinType;
};
oFF.BlendableQueryManager.prototype.getWidgetId = function()
{
	return null;
};
oFF.BlendableQueryManager.prototype.includesDisplayKeyInMeasureDimension = function()
{
	return this.m_includesDisplayKeyInMeasureDimension;
};
oFF.BlendableQueryManager.prototype.insertBlendedDimensionInfoToAxis = function(axis, datasetId, dimensionName, index)
{
	this.removeBlendedDimensionInfoInternal(datasetId, dimensionName);
	return this.insertBlendedDimensionInfoToAxisInternal(axis, datasetId, dimensionName, index);
};
oFF.BlendableQueryManager.prototype.insertBlendedDimensionInfoToAxisInternal = function(axis, datasetId, dimensionName, index)
{
	let dimension = null;
	let queryManager = this.getQueryManagerByDatasetId(datasetId);
	let blendedDimensionInfo = null;
	if (oFF.notNull(queryManager))
	{
		let queryModel = queryManager.getQueryModel();
		dimension = queryModel.getDimensionByName(dimensionName);
		if (oFF.notNull(dimension))
		{
			if (queryManager !== this.getPrimaryQueryManager())
			{
				if (dimension === queryModel.getPrimaryCalculationDimension() || queryModel.getSecondaryCalculationDimension() !== null && queryModel.getSecondaryCalculationDimension() === dimension)
				{
					return null;
				}
			}
			let blendedDimensionInfoList = this.m_blendedDimensionOrder.getByKey(axis.getName());
			if (oFF.isNull(blendedDimensionInfoList))
			{
				blendedDimensionInfoList = oFF.QModelComponentList.createModelComponentList(this, this, true, "Blended Dimension Order");
				this.m_blendedDimensionOrder.put(axis.getName(), blendedDimensionInfoList);
			}
			blendedDimensionInfo = oFF.BlendedDimensionInfo.createBlendedDimensionInfo(datasetId, dimensionName);
			blendedDimensionInfoList.insert(index, blendedDimensionInfo);
		}
	}
	return blendedDimensionInfo;
};
oFF.BlendableQueryManager.prototype.isAccountSecondaryMeasureDimensionOnNoneAxis = function()
{
	return this.m_supportsAccountSecondaryMeasureDimensionOnNoneAxis && this.getCapabilitiesBase().supportsCubeBlendingCustomDimension1NoneAxis() && this.getQueryModel().getAccountDimension() !== null;
};
oFF.BlendableQueryManager.prototype.isBlended = function()
{
	let validateBlend = this.validateBlend();
	return !validateBlend.hasErrors();
};
oFF.BlendableQueryManager.prototype.isBlendingRestrictionsEnabled = function()
{
	return this.m_blendingRestrictionsEnabled;
};
oFF.BlendableQueryManager.prototype.isDefaultOrder = function()
{
	return this.m_sortContainer.isDefaultOrder();
};
oFF.BlendableQueryManager.prototype.isFormulaExceptionResultHidden = function()
{
	return this.m_isFormulaExceptionResultHidden;
};
oFF.BlendableQueryManager.prototype.isPreserveAttributeLayout = function()
{
	return this.m_isPreserveAttributeLayout;
};
oFF.BlendableQueryManager.prototype.isUsingSavedPromptsForExitVariables = function()
{
	return false;
};
oFF.BlendableQueryManager.prototype.migrateLegacyBlendedQueryState = function(originalBlendedQueryManager)
{
	oFF.BlendingUtils.migrateAxis(this, originalBlendedQueryManager, oFF.AxisType.ROWS);
	oFF.BlendingUtils.migrateAxis(this, originalBlendedQueryManager, oFF.AxisType.COLUMNS);
	oFF.BlendingUtils.migrateDrillManager(this, originalBlendedQueryManager);
};
oFF.BlendableQueryManager.prototype.newBlendableQueryManager = function()
{
	return new oFF.BlendableQueryManager();
};
oFF.BlendableQueryManager.prototype.notifyChildChanged = function(changedNodes)
{
	let isEventingPaused = false;
	for (let i = 0; i < changedNodes.size(); i++)
	{
		let changedNode = changedNodes.get(i);
		let componentType = changedNode.getComponentType();
		if (oFF.notNull(componentType))
		{
			if (componentType.isTypeOf(oFF.OlapComponentType.AXIS))
			{
				let axis = changedNode;
				let dimensionNamesInAxis = oFF.XList.create();
				dimensionNamesInAxis.addAll(axis.getDimensionNames());
				let datasetId = axis.getQueryModel().getDatasetId();
				for (let j = 0; j < dimensionNamesInAxis.size(); j++)
				{
					let dimensionName = dimensionNamesInAxis.get(j);
					if (axis.getType() === oFF.AxisType.FREE)
					{
						this.removeBlendedDimensionInfoExt(datasetId, dimensionName);
					}
					else
					{
						let blendedDimensionInfos = oFF.XList.create();
						blendedDimensionInfos.addAll(this.m_blendedDimensionOrder.getByKey(axis.getType().getName()));
						let isDimensionFound = false;
						for (let k = blendedDimensionInfos.size() - 1; k >= 0; k--)
						{
							let blendedDimensionInfo = blendedDimensionInfos.get(k);
							if (oFF.XString.isEqual(blendedDimensionInfo.getDatasetId(), datasetId) && oFF.XString.isEqual(blendedDimensionInfo.getDimensionName(), dimensionName))
							{
								isDimensionFound = true;
								break;
							}
						}
						if (!isDimensionFound)
						{
							this.addBlendedDimensionInfoToAxis(axis.getType(), datasetId, dimensionName);
						}
					}
				}
			}
			else if (componentType.isTypeOf(oFF.OlapComponentType.QUERY_MODEL) && !changedNode.isRaisingEvents())
			{
				isEventingPaused = true;
			}
		}
	}
	if (!isEventingPaused)
	{
		this.getResultsetContainer(true);
		oFF.AbstractBlendableQueryManager.prototype.notifyChildChanged.call( this , changedNodes);
	}
};
oFF.BlendableQueryManager.prototype.popZoomDrill = function(datasetId, dimensionName)
{
	for (let i = this.m_blendedZoomDrills.size() - 1; i >= 0; i--)
	{
		let blendedZoomDrill = this.m_blendedZoomDrills.get(i);
		if (oFF.XString.isEqual(blendedZoomDrill.getDatasetId(), datasetId) && oFF.XString.isEqual(blendedZoomDrill.getDimensionName(), dimensionName))
		{
			let removedZoomDrill = this.m_blendedZoomDrills.removeAt(i);
			return removedZoomDrill;
		}
	}
	return null;
};
oFF.BlendableQueryManager.prototype.prepareMergeCandidate = oFF.noSupport;
oFF.BlendableQueryManager.prototype.reOrderSecondaryModelsByDatasetId = function(datasetIds)
{
	oFF.XListUtils.reorderList(this.m_queryModelLinkSettings, datasetIds);
};
oFF.BlendableQueryManager.prototype.releaseObject = function()
{
	let olapEnvironmentBase = this.getOlapEnv();
	olapEnvironmentBase.unregisterQueryManager(this);
	this.m_primaryBlendedMeasureContainer = oFF.XObjectExt.release(this.m_primaryBlendedMeasureContainer);
	this.m_queryModelLinkSettings = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_queryModelLinkSettings);
	this.m_blendedDimensionOrder = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_blendedDimensionOrder);
	this.m_rankSettings = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_rankSettings);
	this.m_sortContainer = oFF.XObjectExt.release(this.m_sortContainer);
	this.m_blendedDrillOperations = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_blendedDrillOperations);
	this.m_blendedZoomDrills = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_blendedZoomDrills);
	this.m_modCounterState = oFF.XObjectExt.release(this.m_modCounterState);
	this.m_formulaExceptions = oFF.XObjectExt.release(this.m_formulaExceptions);
	this.m_blendingZeroSuppressionType = oFF.XObjectExt.release(this.m_blendingZeroSuppressionType);
	this.m_expandedChildMembersByDatasetId = oFF.XObjectExt.release(this.m_expandedChildMembersByDatasetId);
	this.m_transientMeasures = oFF.XObjectExt.release(this.m_transientMeasures);
	if (this.m_isAllMembersOrFsicEnabled.size() > 0)
	{
		this.m_isAllMembersOrFsicEnabled = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_isAllMembersOrFsicEnabled);
	}
	oFF.AbstractBlendableQueryManager.prototype.releaseObject.call( this );
};
oFF.BlendableQueryManager.prototype.removeActivePrimaryLinkDimensionName = function(secondaryDatasetId, primaryDimensionLinkName)
{
	let queryModelLinkSettings = this.getQueryModelLinkSettings(secondaryDatasetId);
	queryModelLinkSettings.removeActivePrimaryLinkDimensionName(primaryDimensionLinkName);
};
oFF.BlendableQueryManager.prototype.removeAllActivePrimaryLinkDimensionNames = function(secondaryDatasetId)
{
	let queryModelLinkSettings = this.getQueryModelLinkSettings(secondaryDatasetId);
	queryModelLinkSettings.removeAllActivePrimaryLinkDimensionNames();
};
oFF.BlendableQueryManager.prototype.removeBlendableDimensionSort = function(fieldName, datasetId)
{
	this.m_sortContainer.removeBlendableDimensionSort(fieldName, datasetId);
};
oFF.BlendableQueryManager.prototype.removeBlendedCalculationsFromFilters = function(datasetId)
{
	let removedBlendedMeasure = oFF.XList.create();
	if (this.getSession().hasFeature(oFF.FeatureToggleOlap.MERGABLE_MEASURE_FILTER))
	{
		oFF.XCollectionUtils.forEach(this.getAllQueryManagers(), (leafQueryManager) => {
			let primaryCalculationDimension = leafQueryManager.getQueryModel().getPrimaryCalculationDimension();
			let measureFilter = oFF.QFilterUtil.getLinkedFilterOrDynamicFilterForDimension(primaryCalculationDimension);
			if (oFF.notNull(measureFilter))
			{
				for (let i = measureFilter.size() - 1; i >= 0; i--)
				{
					let element = measureFilter.getCartesianElement(i);
					let memberName = element.getLow().getString();
					let structureMember = oFF.BlendingUtils.getPrimaryStructureMemberByName(primaryCalculationDimension, memberName, false, false);
					if (oFF.notNull(structureMember))
					{
						let formulaItemDimensionContexts = oFF.BlendingUtils.getFormulaItemDimensionContexts(structureMember);
						if (oFF.XStringUtils.isNotNullAndNotEmpty(datasetId) && oFF.XCollectionUtils.contains(formulaItemDimensionContexts, (dimensionContext) => {
							return oFF.XString.isEqual(dimensionContext.getQueryModel().getDatasetId(), datasetId);
						}) || oFF.XStringUtils.isNullOrEmpty(datasetId) && formulaItemDimensionContexts.size() > 1)
						{
							measureFilter.removeElement(element);
							removedBlendedMeasure.add(structureMember);
						}
					}
				}
			}
		});
	}
	return removedBlendedMeasure;
};
oFF.BlendableQueryManager.prototype.removeBlendedDimensionInfo = function(axisType, blendedDimensionInfo)
{
	let rowsBlendedDimensionInfo = this.m_blendedDimensionOrder.getByKey(axisType.getName());
	if (oFF.notNull(rowsBlendedDimensionInfo))
	{
		rowsBlendedDimensionInfo.removeElement(blendedDimensionInfo);
	}
};
oFF.BlendableQueryManager.prototype.removeBlendedDimensionInfoExt = function(datasetId, dimensionName)
{
	this.removeBlendedDimensionInfoInternal(datasetId, dimensionName);
};
oFF.BlendableQueryManager.prototype.removeBlendedDimensionInfoInternal = function(datasetId, dimensionName)
{
	let blendedDimensionOrderLists = this.m_blendedDimensionOrder.getValuesAsReadOnlyList();
	let blendedDimensionOrderListsIter = blendedDimensionOrderLists.getIterator();
	while (blendedDimensionOrderListsIter.hasNext())
	{
		let blendedDimensionOrderList = blendedDimensionOrderListsIter.next();
		let matchBlendedDimensionInfo = oFF.XCollectionUtils.findFirst(blendedDimensionOrderList, (blendedDimensionInfo) => {
			return oFF.XString.isEqual(blendedDimensionInfo.getDimensionName(), dimensionName) && oFF.XString.isEqual(blendedDimensionInfo.getDatasetId(), datasetId);
		});
		if (oFF.notNull(matchBlendedDimensionInfo))
		{
			blendedDimensionOrderList.removeElement(matchBlendedDimensionInfo);
			return;
		}
	}
};
oFF.BlendableQueryManager.prototype.removeBlendedDrillOperation = function(blendedDrillOperation)
{
	this.m_blendedDrillOperations.removeElement(blendedDrillOperation);
};
oFF.BlendableQueryManager.prototype.removeFormulaException = function(name)
{
	let formulaException = oFF.XCollectionUtils.getByName(this.m_formulaExceptions, name);
	if (oFF.notNull(formulaException))
	{
		formulaException.removeSecondaryParent(this);
	}
	this.m_formulaExceptions.removeElement(formulaException);
	return formulaException;
};
oFF.BlendableQueryManager.prototype.removePrimaryBlendedMeasure = function(member)
{
	this.m_primaryBlendedMeasureContainer.removePrimaryBlendedMeasure(member);
};
oFF.BlendableQueryManager.prototype.removeRankSettings = function(index)
{
	return this.m_rankSettings.removeAt(index);
};
oFF.BlendableQueryManager.prototype.removeSecondaryQueryManager = function(datasetId)
{
	let queryModelLinkSettings = this.m_queryModelLinkSettings.getByKey(datasetId);
	if (oFF.notNull(queryModelLinkSettings))
	{
		this.m_queryModelLinkSettings.removeElement(queryModelLinkSettings);
	}
	let removedQueryManager = this.m_queryManagers.remove(datasetId);
	oFF.XObjectExt.release(removedQueryManager);
	let blendedDimensionOrderIter = this.m_blendedDimensionOrder.getKeysAsIterator();
	while (blendedDimensionOrderIter.hasNext())
	{
		let dimensionInfos = this.m_blendedDimensionOrder.getByKey(blendedDimensionOrderIter.next());
		for (let h = dimensionInfos.size() - 1; h >= 0; h--)
		{
			if (oFF.XString.isEqual(dimensionInfos.get(h).getDatasetId(), datasetId))
			{
				dimensionInfos.removeAt(h);
			}
		}
	}
	for (let i = this.m_blendedZoomDrills.size() - 1; i >= 0; i--)
	{
		if (oFF.XString.isEqual(this.m_blendedZoomDrills.get(i).getDatasetId(), datasetId))
		{
			this.m_blendedZoomDrills.removeAt(i);
		}
	}
	for (let j = this.m_blendedDrillOperations.size() - 1; j >= 0; j--)
	{
		if (oFF.XString.isEqual(this.m_blendedDrillOperations.get(j).getDatasetId(), datasetId))
		{
			this.m_blendedDrillOperations.removeAt(j);
		}
	}
	let blendableDimensionSorts = this.m_sortContainer.getBlendableDimensionSorts();
	for (let k = blendableDimensionSorts.size() - 1; k >= 0; k--)
	{
		if (oFF.XString.isEqual(blendableDimensionSorts.get(k).getDatasetId(), datasetId))
		{
			blendableDimensionSorts.removeAt(k);
		}
	}
	for (let l = this.m_rankSettings.size() - 1; l >= 0; l--)
	{
		if (oFF.XString.isEqual(this.m_rankSettings.get(l).getPrimaryMeasureDatasetId(), datasetId) || oFF.XString.isEqual(this.m_rankSettings.get(l).getSecondaryMeasureDatasetId(), datasetId))
		{
			this.m_rankSettings.removeAt(l);
		}
	}
	let removedBlendedMeasure = oFF.XList.create();
	let primaryBlendedMeasures = this.m_primaryBlendedMeasureContainer.getPrimaryBlendedMeasures();
	for (let m = primaryBlendedMeasures.size() - 1; m >= 0; m--)
	{
		let blendedMeasure = primaryBlendedMeasures.get(m);
		if (oFF.XCollectionUtils.contains(oFF.BlendingUtils.getFormulaItemDimensionContexts(blendedMeasure), (dimensionContext) => {
			return oFF.XString.isEqual(dimensionContext.getQueryModel().getDatasetId(), datasetId);
		}))
		{
			this.removePrimaryBlendedMeasure(blendedMeasure);
			removedBlendedMeasure.add(blendedMeasure);
		}
	}
	removedBlendedMeasure.addAll(this.removeBlendedCalculationsFromFilters(datasetId));
	for (let o = this.m_formulaExceptions.size() - 1; o >= 0; o--)
	{
		let formulaException = this.m_formulaExceptions.get(o);
		if (oFF.XString.isEqual(formulaException.getQueryModel().getDatasetId(), datasetId) || removedBlendedMeasure.contains(formulaException.getMeasure()))
		{
			formulaException.removeSecondaryParent(this);
			this.m_formulaExceptions.removeAt(o);
		}
	}
};
oFF.BlendableQueryManager.prototype.serializeToContentExt = function(modelFormat, capabilities)
{
	let content;
	if (modelFormat.isTypeOf(oFF.QModelFormat.INA_DATA))
	{
		throw oFF.XException.createIllegalArgumentException("BlendableQueryManager cannot be serialized with INA_DATA format. Use BlendableQueryManager.exportPersistedQueriesAndRuntimeQueryManager to get INA_DATA serialization.");
	}
	else
	{
		content = oFF.AbstractBlendableQueryManager.prototype.serializeToContentExt.call( this , modelFormat, capabilities);
	}
	return content;
};
oFF.BlendableQueryManager.prototype.setAllMembersOrFsicEnabled = function(datasetId, allMembersOrFsicEnabled)
{
	if (oFF.notNull(datasetId) && this.m_isAllMembersOrFsicEnabled.getByKey(datasetId) !== oFF.XBooleanValue.create(allMembersOrFsicEnabled))
	{
		this.m_isAllMembersOrFsicEnabled.put(datasetId, oFF.XBooleanValue.create(allMembersOrFsicEnabled));
		this.notifyNodeChanged();
	}
};
oFF.BlendableQueryManager.prototype.setBlendableMeasureMemberSort = function(blendableMeasureSort)
{
	this.m_sortContainer.setBlendableMeasureMemberSort(blendableMeasureSort);
};
oFF.BlendableQueryManager.prototype.setBlendedDimensionInfosByAxis = function(axis, blendedDimensionOrder)
{
	let newBlendedDimensionOrder = oFF.QModelComponentList.createModelComponentList(this, this, true, "Blended Dimension Order");
	newBlendedDimensionOrder.addAll(blendedDimensionOrder);
	this.m_blendedDimensionOrder.put(axis.getName(), newBlendedDimensionOrder);
};
oFF.BlendableQueryManager.prototype.setBlendingRestrictionsEnabled = function(blendingRestrictionsEnabled)
{
	this.m_blendingRestrictionsEnabled = blendingRestrictionsEnabled;
};
oFF.BlendableQueryManager.prototype.setBlendingZeroSuppressionType = function(axisType, blendingZeroSuppressionType)
{
	if (oFF.notNull(this.m_blendingZeroSuppressionType) && oFF.notNull(axisType))
	{
		if (this.m_blendingZeroSuppressionType.getByKey(axisType.getName()) !== blendingZeroSuppressionType)
		{
			this.m_blendingZeroSuppressionType.put(axisType.getName(), blendingZeroSuppressionType);
			this.notifyNodeChanged();
		}
	}
};
oFF.BlendableQueryManager.prototype.setClientInfo = function(version, identifier, component) {};
oFF.BlendableQueryManager.prototype.setFormulaExceptionResultHidden = function(isHidden)
{
	if (this.m_isFormulaExceptionResultHidden !== isHidden)
	{
		this.m_isFormulaExceptionResultHidden = isHidden;
		this.notifyNodeChanged();
	}
};
oFF.BlendableQueryManager.prototype.setIncludesDisplayKeyInMeasureDimension = function(includesDisplayKeyInMeasureDimension)
{
	this.m_includesDisplayKeyInMeasureDimension = includesDisplayKeyInMeasureDimension;
};
oFF.BlendableQueryManager.prototype.setIsDefaultOrder = function(isDefaultOrder)
{
	this.m_sortContainer.setIsDefaultOrder(isDefaultOrder);
};
oFF.BlendableQueryManager.prototype.setLanguageLocale = function(languageLocale) {};
oFF.BlendableQueryManager.prototype.setLinkType = function(secondaryDatasetId, blendingLinkType)
{
	let queryModelLinkSettings = this.getQueryModelLinkSettings(secondaryDatasetId);
	queryModelLinkSettings.setLinkType(blendingLinkType);
};
oFF.BlendableQueryManager.prototype.setName = function(name)
{
	oFF.XStringUtils.checkStringNotEmpty(name, "Name of query manager must be a valid string");
	let olapEnvironmentBase = this.getOlapEnv();
	if (!oFF.XString.isEqual(name, this.getName()))
	{
		if (olapEnvironmentBase.containsQueryManagerWithName(name))
		{
			throw oFF.XException.createIllegalArgumentException(oFF.XStringUtils.concatenate2("Olap Environment already contains Query Manager with name:", name));
		}
		olapEnvironmentBase.unregisterQueryManager(this);
		oFF.AbstractBlendableQueryManager.prototype.setName.call( this , name);
		olapEnvironmentBase.registerQueryManager(this);
	}
};
oFF.BlendableQueryManager.prototype.setPreserveAttributeLayout = function(isPreserveAttributeLayout)
{
	this.m_isPreserveAttributeLayout = isPreserveAttributeLayout;
};
oFF.BlendableQueryManager.prototype.setPrimaryBlendableMeasureMemberSort = function(measureMemberName, datasetId, sortDirection)
{
	this.m_sortContainer.setPrimaryBlendableMeasureMemberSort(measureMemberName, datasetId, sortDirection);
};
oFF.BlendableQueryManager.prototype.setPrimaryQueryManager = function(queryManager)
{
	this.m_primaryDatasetId = queryManager.getQueryModel().getDatasetId();
	this.updateModCounter(queryManager.getQueryModel().getModCounter());
	this.addQueryManager(queryManager);
};
oFF.BlendableQueryManager.prototype.setSkipFilterValidationByDatasetId = function(skipValidation, datasetId)
{
	if (!oFF.XString.isEqual(datasetId, this.m_primaryDatasetId))
	{
		let queryModelLinkSettings = this.m_queryModelLinkSettings.getByKey(datasetId);
		if (oFF.notNull(queryModelLinkSettings))
		{
			queryModelLinkSettings.setSkipFilterValidation(skipValidation);
		}
	}
};
oFF.BlendableQueryManager.prototype.setStoryId = function(storyId) {};
oFF.BlendableQueryManager.prototype.setStoryName = function(storyName) {};
oFF.BlendableQueryManager.prototype.setSupportsAccountSecondaryMeasureDimensionOnNoneAxis = function(supportsAccountSecondaryMeasureDimensionOnNoneAxis)
{
	this.m_supportsAccountSecondaryMeasureDimensionOnNoneAxis = supportsAccountSecondaryMeasureDimensionOnNoneAxis;
};
oFF.BlendableQueryManager.prototype.setSupportsConcurrentDimensionAndMeasureSorting = function(supportsConcurrentDimensionAndMeasureSorting)
{
	this.m_supportsConcurrentDimensionAndMeasureSorting = supportsConcurrentDimensionAndMeasureSorting;
};
oFF.BlendableQueryManager.prototype.setSupportsDrillOnBlendNodeOnly = function(supportsDrillonBlendNodeOnly)
{
	this.m_supportsDrillonBlendNodeOnly = supportsDrillonBlendNodeOnly;
};
oFF.BlendableQueryManager.prototype.setUnlinkedDimensionJoinType = function(secondaryDatasetId, unlinkedDimensionJoinType)
{
	let queryModelLinkSettings = this.getQueryModelLinkSettings(secondaryDatasetId);
	queryModelLinkSettings.setUnlinkedDimensionJoinType(unlinkedDimensionJoinType);
};
oFF.BlendableQueryManager.prototype.setUseSavedPromptsForExitVariables = function(disableExitVariables) {};
oFF.BlendableQueryManager.prototype.setWidgetId = function(widgetId) {};
oFF.BlendableQueryManager.prototype.setupBlendingManager = function(context)
{
	oFF.AbstractBlendableQueryManager.prototype.setupBlendingManager.call( this , context);
	this.m_primaryBlendedMeasureContainer = oFF.QBlendedMeasureContainer.create(this);
	this.m_queryModelLinkSettings = oFF.QModelComponentList.createModelComponentList(context, this, true, "Query Model Link Settings");
	this.m_blendedDimensionOrder = oFF.XHashMapByString.create();
	this.m_blendedDrillOperations = oFF.QModelComponentList.createModelComponentList(context, this, true, "Blendable Drill Operation");
	this.m_blendedZoomDrills = oFF.QModelComponentList.createModelComponentList(context, this, true, "Blendable Zoom Drills");
	this.m_isAllMembersOrFsicEnabled = oFF.XHashMapByString.create();
	this.m_rankSettings = oFF.QModelComponentList.createModelComponentList(context, this, true, "Rank Settings");
	this.m_sortContainer = oFF.QBlendingSortContainer.create(this);
	this.m_formulaExceptions = oFF.QModelComponentList.createModelComponentWithNameList(context, this, false, "Thresholds", true);
	this.m_blendingRestrictionsEnabled = false;
	this.m_blendingZeroSuppressionType = oFF.XHashMapByString.create();
	this.m_expandedChildMembersByDatasetId = oFF.XHashMapByString.create();
	this.m_transientMeasures = oFF.XList.create();
	this.m_supportsDrillonBlendNodeOnly = false;
	this.m_isFormulaExceptionResultHidden = false;
	this.m_isPreserveAttributeLayout = false;
	this.m_supportsConcurrentDimensionAndMeasureSorting = false;
	this.m_includesDisplayKeyInMeasureDimension = false;
	this.m_supportsAccountSecondaryMeasureDimensionOnNoneAxis = false;
};
oFF.BlendableQueryManager.prototype.skipFilterValidationByDatasetId = function(datasetId)
{
	if (!oFF.XString.isEqual(datasetId, this.m_primaryDatasetId))
	{
		let queryModelLinkSettings = this.m_queryModelLinkSettings.getByKey(datasetId);
		if (oFF.notNull(queryModelLinkSettings))
		{
			return queryModelLinkSettings.skipFilterValidation();
		}
	}
	return false;
};
oFF.BlendableQueryManager.prototype.supportsAccountSecondaryMeasureDimensionOnNoneAxis = function()
{
	return this.m_supportsAccountSecondaryMeasureDimensionOnNoneAxis;
};
oFF.BlendableQueryManager.prototype.supportsBatchBlendingRsStreamingExt = function()
{
	if (this.isBlended())
	{
		return this.supportsBatchBlendingRsStreaming();
	}
	return this.supportsBatchRsStreaming();
};
oFF.BlendableQueryManager.prototype.supportsConcurrentDimensionAndMeasureSorting = function()
{
	return this.m_supportsConcurrentDimensionAndMeasureSorting;
};
oFF.BlendableQueryManager.prototype.supportsDrillOnBlendNodeOnly = function()
{
	return this.m_supportsDrillonBlendNodeOnly;
};
oFF.BlendableQueryManager.prototype.unblend = function()
{
	if (this.supportsAccountSecondaryMeasureDimensionOnNoneAxis())
	{
		let secondaryMeasureDimension = this.getQueryModel().getSecondaryCalculationDimension();
		if (oFF.notNull(secondaryMeasureDimension) && (secondaryMeasureDimension.getAxisType() === oFF.AxisType.ROWS || secondaryMeasureDimension.getAxisType() === oFF.AxisType.COLUMNS))
		{
			this.getQueryModel().getFreeAxis().add(secondaryMeasureDimension);
		}
	}
	this.removeBlendedCalculationsFromFilters(null);
	let primaryQueryManager = this.m_queryManagers.remove(this.m_primaryDatasetId);
	primaryQueryManager.getQueryModel().setModCounter(this.getModCounter() + 1);
	primaryQueryManager.invalidateState();
	let originalName = this.getName();
	let zeroSuppressionTypeRows = this.getBlendingZeroSuppressionType(oFF.AxisType.ROWS);
	let zeroSuppressionTypeColumns = this.getBlendingZeroSuppressionType(oFF.AxisType.COLUMNS);
	this.releaseObject();
	primaryQueryManager.setName(originalName);
	if (oFF.notNull(zeroSuppressionTypeRows))
	{
		primaryQueryManager.getQueryModel().getRowsAxis().setZeroSuppressionType(zeroSuppressionTypeRows);
	}
	if (oFF.notNull(zeroSuppressionTypeColumns))
	{
		primaryQueryManager.getQueryModel().getColumnsAxis().setZeroSuppressionType(zeroSuppressionTypeColumns);
	}
	primaryQueryManager.getTagging().remove(oFF.QStateConstants.TAG_UNDO_IGNORE);
	return primaryQueryManager;
};
oFF.BlendableQueryManager.prototype.validateBlend = function()
{
	let validationResult = oFF.MessageManager.createMessageManagerExt(this.getSession());
	this.getBlendingProcessConfigs(validationResult);
	return validationResult;
};

oFF.OlapImplModule = function() {};
oFF.OlapImplModule.prototype = new oFF.DfModule();
oFF.OlapImplModule.prototype._ff_c = "OlapImplModule";

oFF.OlapImplModule.s_module = null;
oFF.OlapImplModule.getInstance = function()
{
	if (oFF.isNull(oFF.OlapImplModule.s_module))
	{
		oFF.DfModule.checkInitialized(oFF.ProtocolModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.OlapApiModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.OlapApiBaseModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.ResultsetModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.OlapModelModule.getInstance());
		oFF.OlapImplModule.s_module = oFF.DfModule.startExt(new oFF.OlapImplModule());
		let registrationService = oFF.RegistrationService.getInstance();
		oFF.QInAConverter.staticSetup();
		oFF.QDeltaOperationPhase.staticSetup();
		oFF.QDeltaBroadcastPhase.staticSetup();
		oFF.QDeltaChangeState.staticSetup();
		oFF.QInAImportFactory.staticSetup();
		oFF.QInAExportFactory.staticSetup();
		oFF.QTechnicalVariableNames.staticSetup();
		oFF.InACapabilitiesProvider.staticSetup();
		oFF.QFactory.setInstance(oFF.QFactoryImpl.create());
		oFF.HierarchyCatalogServiceConfig.staticSetup();
		registrationService.addServiceConfig(oFF.OlapApiModule.XS_HIERARCHY_CATALOG, oFF.HierarchyCatalogServiceConfig.CLAZZ);
		oFF.HierarchyCatalogService.staticSetup();
		registrationService.addService(oFF.OlapApiModule.XS_HIERARCHY_CATALOG, oFF.HierarchyCatalogService.CLAZZ);
		oFF.OlapEnvironmentFactoryImpl.staticSetupImpl();
		oFF.PlanningFactory.setInstance(new oFF.PlanningManagerFactoryDummyImpl());
		oFF.CommandSpaceFactory.setInstance(new oFF.CommandSpaceFactoryImpl());
		oFF.CommentingFactory.setInstance(oFF.CommentingFactoryImpl.create());
		oFF.DfModule.stopExt(oFF.OlapImplModule.s_module);
	}
	return oFF.OlapImplModule.s_module;
};
oFF.OlapImplModule.prototype.getName = function()
{
	return "ff4310.olap.impl";
};

oFF.OlapImplModule.getInstance();

return oFF;
} );