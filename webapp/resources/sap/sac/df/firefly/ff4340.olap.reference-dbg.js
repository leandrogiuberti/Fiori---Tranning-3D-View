/*!
 * SAPUI5
    (c) Copyright 2009-2021 SAP SE. All rights reserved
  
 */
/*global sap*/
sap.ui.define(
[
"sap/sac/df/firefly/ff2166.space.impl","sap/sac/df/firefly/ff2670.visualization.ui","sap/sac/df/firefly/ff4310.olap.impl"
],
function(oFF)
{
"use strict";

oFF.QDefaultChartStyleConfigurator = function() {};
oFF.QDefaultChartStyleConfigurator.prototype = new oFF.XObject();
oFF.QDefaultChartStyleConfigurator.prototype._ff_c = "QDefaultChartStyleConfigurator";

oFF.QDefaultChartStyleConfigurator.s_instance = null;
oFF.QDefaultChartStyleConfigurator.getInstance = function()
{
	if (oFF.isNull(oFF.QDefaultChartStyleConfigurator.s_instance))
	{
		oFF.QDefaultChartStyleConfigurator.s_instance = new oFF.QDefaultChartStyleConfigurator();
	}
	return oFF.QDefaultChartStyleConfigurator.s_instance;
};
oFF.QDefaultChartStyleConfigurator.prototype.configure = function(visualizationTemplateManager)
{
	let specificContainerHorizontal = visualizationTemplateManager.addNewVisualizationSpecificStyleContainer();
	specificContainerHorizontal.setVisualizationType(oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION);
	specificContainerHorizontal.addChartType(oFF.ChartType.BAR);
	specificContainerHorizontal.addChartType(oFF.ChartType.STACKED_BAR);
	let horizontalVariableContainer = specificContainerHorizontal.getVisualizationVariableHolder();
	let specificContainerVertical = visualizationTemplateManager.addNewVisualizationSpecificStyleContainer();
	specificContainerVertical.setVisualizationType(oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION);
	specificContainerVertical.addChartType(oFF.ChartType.COLUMN);
	specificContainerVertical.addChartType(oFF.ChartType.STACKED_COLUMN);
	let verticalVariableContainer = specificContainerVertical.getVisualizationVariableHolder();
	let specificContainerLine = visualizationTemplateManager.addNewVisualizationSpecificStyleContainer();
	specificContainerLine.setVisualizationType(oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION);
	specificContainerLine.addChartType(oFF.ChartType.LINE);
	specificContainerLine.addChartType(oFF.ChartType.SPLINE);
	let lineVariableContainer = specificContainerLine.getVisualizationVariableHolder();
	let chartTemplateList = visualizationTemplateManager.getOrCreateChartTemplateList(oFF.OlapVisualizationConstants.VARIABLE_CHART_STYLING_TEMPLATE);
	let chartStyle = oFF.QFactory.createChartStyleWithName(oFF.OlapVisualizationConstants.VARIABLE_CHART_STYLING_TEMPLATE);
	chartStyle.getTitleStyle().getFontFamilyRaw().setVariableName(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_FAMILY);
	chartStyle.getTitleStyle().getFontSizeRaw().setVariableName(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_SIZE);
	chartStyle.getTitleStyle().getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_COLOR);
	chartStyle.getTitleStyle().getFontItalicRaw().setVariableName(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_ITALIC);
	chartStyle.getTitleStyle().getFontBoldRaw().setVariableName(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_BOLD);
	chartStyle.getTitleStyle().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_ENABLED);
	chartStyle.getTitleStyle().getHorizontalAlignmentRaw().setVariableName(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT);
	let chartTitleFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_FAMILY, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_FAMILY, false);
	chartTitleFontFamilyVariable.setString("'72-Web', Arial, Helvetica, sans-serif");
	let chartTitleFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.INTEGER, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_SIZE, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_SIZE, false);
	chartTitleFontSizeVariable.setInteger(18);
	let chartTitleFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_ITALIC, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_ITALIC, false);
	chartTitleFontStyleVariable.setBoolean(false);
	let chartTitleFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_BOLD, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_BOLD, false);
	chartTitleFontWeightVariable.setBoolean(true);
	let chartTitleFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_COLOR, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_COLOR, false);
	chartTitleFontColorVariable.setString("#000000");
	let chartTitleEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_ENABLED, false);
	chartTitleEnabledVariable.setBoolean(false);
	let chartTitleHorizontalAlignmentVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT, oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT, false);
	chartTitleHorizontalAlignmentVariable.setString("Right");
	chartStyle.getDefaultAxisStyle().getLabelStyle().getFontFamilyRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_FAMILY);
	chartStyle.getDefaultAxisStyle().getLabelStyle().getFontSizeRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_SIZE);
	chartStyle.getDefaultAxisStyle().getLabelStyle().getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_COLOR);
	chartStyle.getDefaultAxisStyle().getLabelStyle().getFontItalicRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_ITALIC);
	chartStyle.getDefaultAxisStyle().getLabelStyle().getFontBoldRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_BOLD);
	chartStyle.getCategoryAxisStyle().getLabelStyle().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_ENABLED);
	let axisLabelFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_FAMILY, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_FAMILY, false);
	axisLabelFontFamilyVariable.setString("'72-Web', Arial, Helvetica, sans-serif");
	let axisLabelFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.INTEGER, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_SIZE, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_SIZE, false);
	axisLabelFontSizeVariable.setInteger(13);
	let axisLabelFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_ITALIC, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_ITALIC, false);
	axisLabelFontStyleVariable.setBoolean(false);
	let axisLabelFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_BOLD, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_BOLD, false);
	axisLabelFontWeightVariable.setBoolean(false);
	let axisLabelFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_COLOR, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_COLOR, false);
	axisLabelFontColorVariable.setString("#A6A8AB");
	let axisLabelEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_ENABLED, false);
	axisLabelEnabledVariable.setBoolean(true);
	chartStyle.getDefaultAxisStyle().getHeaderStyle().getFontFamilyRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_FAMILY);
	let axisTitleFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_FAMILY, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_FAMILY, false);
	axisTitleFontFamilyVariable.setString("'72-Web', Arial, Helvetica, sans-serif");
	chartStyle.getDefaultAxisStyle().getHeaderStyle().getFontSizeRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_SIZE);
	let axisTitleFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.INTEGER, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_SIZE, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_SIZE, false);
	axisTitleFontSizeVariable.setInteger(13);
	chartStyle.getDefaultAxisStyle().getHeaderStyle().getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_COLOR);
	let axisTitleFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_COLOR, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_COLOR, false);
	axisTitleFontColorVariable.setString("#000000");
	chartStyle.getDefaultAxisStyle().getHeaderStyle().getFontItalicRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_ITALIC);
	let axisTitleFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_ITALIC, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_ITALIC, false);
	axisTitleFontStyleVariable.setBoolean(false);
	chartStyle.getDefaultAxisStyle().getHeaderStyle().getFontBoldRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_BOLD);
	let axisTitleFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_BOLD, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_BOLD, false);
	axisTitleFontWeightVariable.setBoolean(false);
	chartStyle.getDefaultAxisStyle().getHeaderStyle().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_ENABLED);
	let axisTitleEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	axisTitleEnabledVariable.setBoolean(true);
	let xAxisTitleVariableHorizontal = horizontalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	xAxisTitleVariableHorizontal.setBoolean(false);
	let yAxisTitleVariableHorizontal = horizontalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	yAxisTitleVariableHorizontal.setBoolean(false);
	let xAxisLabelVariableHorizontal = horizontalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.X_AXIS_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	xAxisLabelVariableHorizontal.setBoolean(false);
	let yAxisLabelVariableHorizontal = horizontalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.Y_AXIS_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	yAxisLabelVariableHorizontal.setBoolean(true);
	let xAxisTitleVariableVertical = verticalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	xAxisTitleVariableVertical.setBoolean(false);
	let yAxisTitleVariableVertical = verticalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	yAxisTitleVariableVertical.setBoolean(false);
	let xAxisLabelVariableVertical = verticalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.X_AXIS_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	xAxisLabelVariableVertical.setBoolean(true);
	let yAxisLabelVariableVertical = verticalVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.Y_AXIS_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	yAxisLabelVariableVertical.setBoolean(false);
	let xAxisTitleVariableLine = lineVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	xAxisTitleVariableLine.setBoolean(false);
	let yAxisTitleVariableLine = lineVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	yAxisTitleVariableLine.setBoolean(true);
	let xAxisLabelVariableLine = lineVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.X_AXIS_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	xAxisLabelVariableLine.setBoolean(true);
	let yAxisLabelVariableLine = lineVariableContainer.addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.Y_AXIS_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED, false);
	yAxisLabelVariableLine.setBoolean(true);
	let xAxisStyle = chartStyle.getOrCreateChartAxisStyleByPosition(oFF.ChartAxisPosition.X);
	xAxisStyle.getHeaderStyle().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.X_AXIS_TITLE_STYLE_VARIABLE_ENABLED);
	xAxisStyle.getLabelStyle().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.X_AXIS_LABEL_STYLE_VARIABLE_ENABLED);
	let yAxisStyle = chartStyle.getOrCreateChartAxisStyleByPosition(oFF.ChartAxisPosition.Y);
	yAxisStyle.getHeaderStyle().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.Y_AXIS_TITLE_STYLE_VARIABLE_ENABLED);
	yAxisStyle.getLabelStyle().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.Y_AXIS_LABEL_STYLE_VARIABLE_ENABLED);
	chartStyle.getLegendStyle().getLabelStyle().getFontFamilyRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_FAMILY);
	let legendFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_FAMILY, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_FAMILY, false);
	legendFontFamilyVariable.setString("'72-Web', Arial, Helvetica, sans-serif");
	chartStyle.getLegendStyle().getLabelStyle().getFontSizeRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_SIZE);
	let legendFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.INTEGER, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_SIZE, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_SIZE, false);
	legendFontSizeVariable.setInteger(13);
	chartStyle.getLegendStyle().getLabelStyle().getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_COLOR);
	let legendFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_COLOR, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_COLOR, false);
	legendFontColorVariable.setString("#000000");
	chartStyle.getLegendStyle().getLabelStyle().getFontItalicRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_ITALIC);
	let legendFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_ITALIC, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_ITALIC, false);
	legendFontStyleVariable.setBoolean(false);
	chartStyle.getLegendStyle().getLabelStyle().getFontBoldRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_BOLD);
	let legendFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_BOLD, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_BOLD, false);
	legendFontWeightVariable.setBoolean(false);
	chartStyle.getLegendStyle().getLegendPositionRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_POSITION);
	let legendPositionVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_POSITION, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_POSITION, false);
	legendPositionVariable.setString(oFF.ChartLegendPosition.TOP.getName());
	chartStyle.getLegendStyle().getHorizontalAlignmentRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT);
	let legendHorizontalAlignmentVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT, false);
	legendHorizontalAlignmentVariable.setString("Center");
	chartStyle.getLegendStyle().getVerticalAlignmentRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_VERTICAL_ALIGNMENT);
	let legendVerticalAlignmentVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_VERTICAL_ALIGNMENT, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_VERTICAL_ALIGNMENT, false);
	legendVerticalAlignmentVariable.setString("Top");
	chartStyle.getLegendStyle().getEnabledRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_ENABLED);
	let legendEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_ENABLED, false);
	legendEnabledVariable.setBoolean(true);
	chartStyle.getLegendStyle().getLayoutDirectionRaw().setVariableName(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_LAYOUT_DIRECTION);
	let legendLayoutDirectionVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_LAYOUT_DIRECTION, oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_LAYOUT_DIRECTION, false);
	legendLayoutDirectionVariable.setString("Horizontal");
	chartStyle.getPlotArea().getDataLabel().getFontFamilyRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_FAMILY);
	chartStyle.getPlotArea().getDataLabel().getFontSizeRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_SIZE);
	chartStyle.getPlotArea().getDataLabel().getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_COLOR);
	chartStyle.getPlotArea().getDataLabel().getFontItalicRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_ITALIC);
	chartStyle.getPlotArea().getDataLabel().getFontBoldRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_BOLD);
	chartStyle.getPlotArea().getDataLabel().getShowLabelRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_ENABLED);
	chartStyle.getPlotArea().getDataLabel().getAvoidOverlapRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_AVOID_OVERLAP);
	chartStyle.getPlotArea().getDataLabel().getShowAbsoluteValuesRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_SHOW_ABSOLUTE_VALUES);
	chartStyle.getPlotArea().getDataLabel().getShowCornerValuesRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_SHOW_CORNER_VALUES);
	chartStyle.getPlotArea().getDataLabel().getDirectionRaw().setVariableName(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_DIRECTION);
	let dataLabelFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_FAMILY, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_FAMILY, false);
	dataLabelFontFamilyVariable.setString("LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	let dataLabelFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.DOUBLE, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_SIZE, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_SIZE, false);
	dataLabelFontSizeVariable.setInteger(12);
	let dataLabelFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_ITALIC, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_ITALIC, false);
	dataLabelFontStyleVariable.setBoolean(false);
	let dataLabelFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_BOLD, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_BOLD, false);
	dataLabelFontWeightVariable.setBoolean(true);
	let fontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_COLOR, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_COLOR, false);
	fontColorVariable.setString("#000000");
	let dataLabelEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_ENABLED, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_ENABLED, false);
	dataLabelEnabledVariable.setBoolean(true);
	let dataLabelAvoidOverlapVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.BOOLEAN, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_AVOID_OVERLAP, oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_AVOID_OVERLAP, false);
	dataLabelAvoidOverlapVariable.setBoolean(false);
	chartTemplateList.add(chartStyle);
	chartTemplateList.setActiveTemplateName(oFF.OlapVisualizationConstants.VARIABLE_CHART_STYLING_TEMPLATE);
	this.loadDefaults(visualizationTemplateManager);
};
oFF.QDefaultChartStyleConfigurator.prototype.loadDefaults = function(visualizationTemplateManager)
{
	let chartConfiguration = oFF.CoChartDefaultConfigurationUtils.getDataAppConfigForProcess(visualizationTemplateManager.getProcess());
	if (oFF.notNull(chartConfiguration))
	{
		let chartConfigurationHelper = oFF.CoChartDefaultConfigurationWrapper.create(chartConfiguration);
		this.setTitleDefaults(chartConfigurationHelper, visualizationTemplateManager);
		this.setAxisLabelDefaults(chartConfigurationHelper, visualizationTemplateManager);
		this.setAxisTitleDefaults(chartConfigurationHelper, visualizationTemplateManager);
		this.setDataLabelDefaults(chartConfigurationHelper, visualizationTemplateManager);
		this.setLegendDefaults(chartConfigurationHelper, visualizationTemplateManager);
	}
};
oFF.QDefaultChartStyleConfigurator.prototype.setAxisLabelDefaults = function(chartConfigurationHelper, visualizationTemplateManager)
{
	let axisLabelFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_FAMILY);
	axisLabelFontFamilyVariable.setString(chartConfigurationHelper.getAxisLabelFontFamily());
	let axisLabelFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_COLOR);
	axisLabelFontColorVariable.setString(chartConfigurationHelper.getAxisLabelFontColor());
	let axisLabelFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_SIZE);
	axisLabelFontSizeVariable.setInteger(chartConfigurationHelper.getAxisLabelFontSize());
	let axisLabelFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_ITALIC);
	axisLabelFontStyleVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getAxisLabelFontStyle(), oFF.CoChartDefaultConfigurationWrapper.ITALIC));
	let axisLabelFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_FONT_BOLD);
	axisLabelFontWeightVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getAxisLabelFontWeight(), oFF.CoChartDefaultConfigurationWrapper.BOLD));
	let axisLabelEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_LABEL_STYLE_VARIABLE_ENABLED);
	axisLabelEnabledVariable.setBoolean(chartConfigurationHelper.isAxisLabelEnabled());
};
oFF.QDefaultChartStyleConfigurator.prototype.setAxisTitleDefaults = function(chartConfigurationHelper, visualizationTemplateManager)
{
	let axisTitleFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_FAMILY);
	axisTitleFontFamilyVariable.setString(chartConfigurationHelper.getAxisTitleFontFamily());
	let axisTitleFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_COLOR);
	axisTitleFontColorVariable.setString(chartConfigurationHelper.getAxisTitleFontColor());
	let axisTitleFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_SIZE);
	axisTitleFontSizeVariable.setInteger(chartConfigurationHelper.getAxisTitleFontSize());
	let axisTitleFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_ITALIC);
	axisTitleFontStyleVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getAxisTitleFontStyle(), oFF.CoChartDefaultConfigurationWrapper.ITALIC));
	let axisTitleFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.AXIS_TITLE_STYLE_VARIABLE_FONT_BOLD);
	axisTitleFontWeightVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getAxisTitleFontWeight(), oFF.CoChartDefaultConfigurationWrapper.BOLD));
};
oFF.QDefaultChartStyleConfigurator.prototype.setDataLabelDefaults = function(chartConfigurationHelper, visualizationTemplateManager)
{
	let dataLabelFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_FAMILY);
	dataLabelFontFamilyVariable.setString(chartConfigurationHelper.getDataLabelFontFamily());
	let dataLabelFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_COLOR);
	dataLabelFontColorVariable.setString(chartConfigurationHelper.getDataLabelFontColor());
	let dataLabelFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_SIZE);
	dataLabelFontSizeVariable.setInteger(chartConfigurationHelper.getDataLabelFontSize());
	let dataLabelFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_ITALIC);
	dataLabelFontStyleVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getDataLabelFontStyle(), oFF.CoChartDefaultConfigurationWrapper.ITALIC));
	let dataLabelFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_FONT_BOLD);
	dataLabelFontWeightVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getDataLabelFontWeight(), oFF.CoChartDefaultConfigurationWrapper.BOLD));
	let dataLabelEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.DATA_LABEL_STYLE_VARIABLE_ENABLED);
	dataLabelEnabledVariable.setBoolean(chartConfigurationHelper.isDataLabelEnabled());
};
oFF.QDefaultChartStyleConfigurator.prototype.setLegendDefaults = function(chartConfigurationHelper, visualizationTemplateManager)
{
	let legendFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_FAMILY);
	legendFontFamilyVariable.setString(chartConfigurationHelper.getLegendFontFamily());
	let legendFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_COLOR);
	legendFontColorVariable.setString(chartConfigurationHelper.getLegendFontColor());
	let legendFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_SIZE);
	legendFontSizeVariable.setInteger(chartConfigurationHelper.getLegendFontSize());
	let legendFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_ITALIC);
	legendFontStyleVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getLegendFontStyle(), oFF.CoChartDefaultConfigurationWrapper.ITALIC));
	let legendFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_FONT_BOLD);
	legendFontWeightVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getLegendFontWeight(), oFF.CoChartDefaultConfigurationWrapper.BOLD));
	let legendHorizontalAlignmentVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT);
	legendHorizontalAlignmentVariable.setString(chartConfigurationHelper.getLegendHorizontalAlignment());
	let legendVerticalAlignmentVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_VERTICAL_ALIGNMENT);
	legendVerticalAlignmentVariable.setString(chartConfigurationHelper.getLegendVerticalAlignment());
	let legendEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_ENABLED);
	legendEnabledVariable.setBoolean(chartConfigurationHelper.isLegendEnabled());
	let legendLayoutDirectionVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.LEGEND_STYLE_VARIABLE_LAYOUT_DIRECTION);
	legendLayoutDirectionVariable.setString(chartConfigurationHelper.getLegendLayoutDirection());
};
oFF.QDefaultChartStyleConfigurator.prototype.setTitleDefaults = function(chartConfigurationHelper, visualizationTemplateManager)
{
	let chartTitleFontFamilyVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_FAMILY);
	chartTitleFontFamilyVariable.setString(chartConfigurationHelper.getChartTitleFontFamily());
	let chartTitleFontColorVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_COLOR);
	chartTitleFontColorVariable.setString(chartConfigurationHelper.getChartTitleFontColor());
	let chartTitleFontSizeVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_SIZE);
	chartTitleFontSizeVariable.setInteger(chartConfigurationHelper.getChartTitleFontSize());
	let chartTitleFontStyleVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_ITALIC);
	chartTitleFontStyleVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getChartTitleFontStyle(), oFF.CoChartDefaultConfigurationWrapper.ITALIC));
	let chartTitleFontWeightVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_FONT_BOLD);
	chartTitleFontWeightVariable.setBoolean(oFF.XString.isEqual(chartConfigurationHelper.getChartTitleFontWeight(), oFF.CoChartDefaultConfigurationWrapper.BOLD));
	let chartTitleEnabledVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_ENABLED);
	chartTitleEnabledVariable.setBoolean(chartConfigurationHelper.isChartTitleEnabled());
	let chartTitleHorizontalAlignmentVariable = visualizationTemplateManager.getVisualizationVariableHolder().getVariable(oFF.OlapVisualizationConstants.CHART_TITLE_STYLE_VARIABLE_HORIZONTAL_ALIGNMENT);
	chartTitleHorizontalAlignmentVariable.setString(chartConfigurationHelper.getChartTitleHorizontalAlignment());
};

oFF.QDefaultTableStyleConfigurator = function() {};
oFF.QDefaultTableStyleConfigurator.prototype = new oFF.XObject();
oFF.QDefaultTableStyleConfigurator.prototype._ff_c = "QDefaultTableStyleConfigurator";

oFF.QDefaultTableStyleConfigurator.EXCEPTION = "EXCEPTION";
oFF.QDefaultTableStyleConfigurator.s_instance = null;
oFF.QDefaultTableStyleConfigurator.getInstance = function()
{
	if (oFF.isNull(oFF.QDefaultTableStyleConfigurator.s_instance))
	{
		oFF.QDefaultTableStyleConfigurator.s_instance = new oFF.QDefaultTableStyleConfigurator();
	}
	return oFF.QDefaultTableStyleConfigurator.s_instance;
};
oFF.QDefaultTableStyleConfigurator.prototype.addExceptionDataPointVariable = function(visualizationTemplateManager, colorContainerName, nameValue, textValue, colorValue, symbolValue, min, max)
{
	let dpvc = visualizationTemplateManager.addNewDatapointVariableContainer(colorContainerName, colorContainerName);
	dpvc.setAlertLevelMin(min);
	dpvc.setAlertLevelMax(max);
	let variable = dpvc.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR, false);
	variable.setString(colorValue);
	variable = dpvc.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_SYMBOL, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_SYMBOL, false);
	variable.setString(symbolValue);
	variable = dpvc.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_NAME, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_NAME, false);
	variable.setString(nameValue);
	variable = dpvc.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_TEXT, oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_TEXT, false);
	variable.setString(textValue);
};
oFF.QDefaultTableStyleConfigurator.prototype.configure = function(visualizationTemplateManager)
{
	let templateList = visualizationTemplateManager.getOrCreateTableTemplateList(oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK);
	let tableDefinition = oFF.QFactory.createTableDefinitionWithName(oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK);
	let formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK, oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK);
	formattingStyle.setPriority(1);
	formattingStyle.addNewCellTypeRestriction().addCellType(oFF.TableCellType.VALUE);
	formattingStyle.getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.DEFAULT_TABLE_DATA_CELL_FONT_COLOR);
	formattingStyle.getCellChartBarColorRaw().setVariableName(oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR);
	formattingStyle.setCellChartLineColor(oFF.OlapVisualizationConstants.VA_TABLE_CELL_CHART_LINE_COLOR);
	let scopedStyle = tableDefinition.addNewScopedStyle(oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK, oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK);
	scopedStyle.getOrthogonalRowsScope().setMatchFullDataSection(true);
	scopedStyle.setStyle(formattingStyle);
	let tableMarkup = tableDefinition.addNewTableMarkup(oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK, oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK);
	tableMarkup.getColumnsScope().setMatchFullDataSection(true);
	tableMarkup.addScopedStyle(scopedStyle);
	let datapointStyle = tableDefinition.addNewDataPointStyle(oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR);
	formattingStyle.setPriority(0);
	formattingStyle.getCellChartBarColorRaw().setVariableName(oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR_VARIANCE);
	formattingStyle.getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.DEFAULT_TABLE_DATA_CELL_FONT_COLOR_VARIANCE);
	datapointStyle.setFormattingStyle(formattingStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationTemplateManager.WRAPPING_STYLE, oFF.OlapVisualizationTemplateManager.WRAPPING_STYLE);
	formattingStyle.getWrapRaw().setVariableName(oFF.OlapVisualizationConstants.WRAP_TEXT_VARIABLE_NAME);
	let rectangularStyle = tableDefinition.addNewLayeredRectangularStyle(oFF.OlapVisualizationTemplateManager.WRAPPING_STYLE, oFF.OlapVisualizationTemplateManager.WRAPPING_STYLE);
	rectangularStyle.getColumnsScope().setMatchFullDataSection(true);
	rectangularStyle.getColumnsScope().setMatchFullHeaderSection(true);
	rectangularStyle.getRowsScope().setMatchFullDataSection(true);
	rectangularStyle.getRowsScope().setMatchFullHeaderSection(true);
	rectangularStyle.setStyle(formattingStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationTemplateManager.PLANNING_UPDATED_VALUES_STYLE, oFF.OlapVisualizationTemplateManager.PLANNING_UPDATED_VALUES_STYLE);
	let ctr = formattingStyle.addNewCellTypeRestriction();
	ctr.setDataUpdated(oFF.TriStateBool._TRUE);
	ctr.addCellType(oFF.TableCellType.VALUE);
	formattingStyle.getFillColorRaw().setVariableName(oFF.OlapVisualizationConstants.PLANNING_EDIT_VARIABLE_NAME);
	rectangularStyle = tableDefinition.addNewLayeredRectangularStyle(oFF.OlapVisualizationTemplateManager.PLANNING_UPDATED_VALUES_STYLE, oFF.OlapVisualizationTemplateManager.PLANNING_UPDATED_VALUES_STYLE);
	rectangularStyle.getColumnsScope().setMatchFullDataSection(true);
	rectangularStyle.getColumnsScope().setMatchFullHeaderSection(true);
	rectangularStyle.getRowsScope().setMatchFullDataSection(true);
	rectangularStyle.getRowsScope().setMatchFullHeaderSection(true);
	rectangularStyle.setStyle(formattingStyle);
	templateList.add(tableDefinition);
	templateList.setActiveTemplate(tableDefinition);
	let variable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.WRAP_TEXT_VARIABLE_NAME, oFF.OlapVisualizationConstants.WRAP_TEXT_VARIABLE_NAME, false);
	variable.setBoolean(false);
	variable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR, false);
	variable.setString(oFF.OlapVisualizationConstants.VA_TABLE_CELL_CHART_BAR_COLOR_NEUTRAL);
	let dpvc = visualizationTemplateManager.addNewDatapointVariableContainer(oFF.OlapVisualizationConstants.CELL_CHART_DATA_POINT_VARIABLE_CONTAINER_NEGATIVE, oFF.OlapVisualizationConstants.CELL_CHART_DATA_POINT_VARIABLE_CONTAINER_NEGATIVE);
	dpvc.setValueSign(oFF.ValueSign.NEGATIVE);
	dpvc.addTag(oFF.OlapVisualizationConstants.STRUCTURE_MEMBER_VARIANCE_TAG);
	let colorVariable = dpvc.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR_VARIANCE, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR_VARIANCE, false);
	colorVariable.setString(oFF.OlapVisualizationConstants.VA_TABLE_CELL_CHART_BAR_COLOR_NEGATIVE);
	colorVariable = dpvc.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.DEFAULT_TABLE_DATA_CELL_FONT_COLOR_VARIANCE, oFF.OlapVisualizationConstants.DEFAULT_TABLE_DATA_CELL_FONT_COLOR_VARIANCE, false);
	colorVariable.setValueByString(oFF.OlapVisualizationConstants.VA_TABLE_TEXT_NEGATIVE_COLOR);
	dpvc = visualizationTemplateManager.addNewDatapointVariableContainer(oFF.OlapVisualizationConstants.CELL_CHART_DATA_POINT_VARIABLE_CONTAINER_POSITIVE, oFF.OlapVisualizationConstants.CELL_CHART_DATA_POINT_VARIABLE_CONTAINER_POSITIVE);
	dpvc.setValueSign(oFF.ValueSign.POSITIVE);
	dpvc.addTag(oFF.OlapVisualizationConstants.STRUCTURE_MEMBER_VARIANCE_TAG);
	colorVariable = dpvc.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR_VARIANCE, oFF.OlapVisualizationConstants.DEFAULT_TABLE_CELL_CHART_BAR_COLOR_VARIANCE, false);
	colorVariable.setString(oFF.OlapVisualizationConstants.VA_TABLE_CELL_CHART_BAR_COLOR_POSITIVE);
	colorVariable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.DEFAULT_TABLE_DATA_CELL_FONT_COLOR, oFF.OlapVisualizationConstants.DEFAULT_TABLE_DATA_CELL_FONT_COLOR, false);
	colorVariable.setString(oFF.OlapVisualizationConstants.VA_DEFAULT_TABLE_DATA_CELL_FONT_COLOR);
	templateList = visualizationTemplateManager.getOrCreateTableTemplateList(oFF.OlapVisualizationConstants.EXCEPTIONS_LINK);
	templateList.setActiveTemplateName(oFF.OlapVisualizationConstants.EXCEPTIONS_VARIABLE);
	tableDefinition = oFF.QFactory.createTableDefinitionWithName(oFF.OlapVisualizationConstants.EXCEPTIONS_VARIABLE);
	datapointStyle = tableDefinition.addNewDataPointStyle(oFF.QDefaultTableStyleConfigurator.EXCEPTION, null);
	datapointStyle.setPriority(0);
	datapointStyle.getFormattingStyleNameRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_STYLE_VARIABLE_NAME);
	datapointStyle.setUnmatchedExceptions();
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationConstants.EXCEPTION_SYMBOL, null);
	formattingStyle.setPriority(0);
	formattingStyle.getAlertSymbolRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_SYMBOL);
	formattingStyle.getAlertColorRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationConstants.EXCEPTION_FONT_COLOR, null);
	formattingStyle.setPriority(0);
	formattingStyle.getFontColorRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationConstants.EXCEPTION_CELL_FILL, null);
	formattingStyle.setFillAlpha(0.2);
	formattingStyle.setPriority(0);
	formattingStyle.getFillColorRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationConstants.EXCEPTION_CELL_FILL_WITHOUT_TRANSPARENCY, null);
	formattingStyle.setPriority(0);
	formattingStyle.getFillColorRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.OlapVisualizationConstants.EXCEPTION_CELL_FILL_WITHOUT_TEXT, null);
	formattingStyle.setShowFormattedText(oFF.TriStateBool._FALSE);
	formattingStyle.setPriority(0);
	formattingStyle.getFillColorRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR);
	templateList.add(tableDefinition);
	this.addExceptionDataPointVariable(visualizationTemplateManager, oFF.OlapVisualizationConstants.EXCEPTIONS_COLOR_CONTAINER_GOOD, oFF.OlapVisualizationConstants.EXCEPTION_NAME_GOOD, oFF.OlapVisualizationConstants.EXCEPTION_NAME_GOOD, oFF.OlapVisualizationConstants.EXCEPTION_COLOR_GOOD, oFF.OlapVisualizationConstants.EXCEPTION_SYMBOL_GOOD, oFF.AlertLevel.GOOD_1, oFF.AlertLevel.GOOD_3);
	this.addExceptionDataPointVariable(visualizationTemplateManager, oFF.OlapVisualizationConstants.EXCEPTIONS_COLOR_CONTAINER_CRITICAL, oFF.OlapVisualizationConstants.EXCEPTION_NAME_CRITICAL, oFF.OlapVisualizationConstants.EXCEPTION_NAME_CRITICAL, oFF.OlapVisualizationConstants.EXCEPTION_COLOR_CRITICAL, oFF.OlapVisualizationConstants.EXCEPTION_SYMBOL_CRITICAL, oFF.AlertLevel.CRITICAL_1, oFF.AlertLevel.CRITICAL_3);
	this.addExceptionDataPointVariable(visualizationTemplateManager, oFF.OlapVisualizationConstants.EXCEPTIONS_COLOR_CONTAINER_BAD, oFF.OlapVisualizationConstants.EXCEPTION_NAME_BAD, oFF.OlapVisualizationConstants.EXCEPTION_NAME_BAD, oFF.OlapVisualizationConstants.EXCEPTION_COLOR_BAD, oFF.OlapVisualizationConstants.EXCEPTION_SYMBOL_BAD, oFF.AlertLevel.BAD_1, oFF.AlertLevel.BAD_3);
	variable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.EXCEPTION_STYLE_VARIABLE_NAME, oFF.OlapVisualizationConstants.EXCEPTION_STYLE_VARIABLE_NAME, false);
	let featureConfiguration = oFF.CoGlobalConfigurationUtils.getDataAppConfigForProcess(visualizationTemplateManager.getProcess());
	if (oFF.notNull(featureConfiguration))
	{
		variable.setString(featureConfiguration.getStringByKey(oFF.CoGlobalConfigurationUtils.EXTENDED_TABLE_EXCEPTION_STYLE_SELECTION));
	}
	else
	{
		variable.setString(oFF.OlapVisualizationConstants.EXCEPTION_SYMBOL);
	}
	variable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.PLANNING_EDIT_VARIABLE_NAME, oFF.OlapVisualizationConstants.PLANNING_EDIT_VARIABLE_NAME, false);
	variable.setString(oFF.OlapVisualizationConstants.VA_PLANNING_EDIT_BACKGROUND_COLOR);
};

oFF.QDefaultTableTemplatesConfigurator = function() {};
oFF.QDefaultTableTemplatesConfigurator.prototype = new oFF.XObject();
oFF.QDefaultTableTemplatesConfigurator.prototype._ff_c = "QDefaultTableTemplatesConfigurator";

oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND = "grey-background";
oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND_COLOR = "theme?sapField_ReadOnly_Background:rgba(231,231,231,0.6)";
oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND_MARKUP = "alternatingRows";
oFF.QDefaultTableTemplatesConfigurator.BLACK_BOTTOM_LINE = "BlackBottomLine";
oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE = "BoldHierarchyNodeStyle";
oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR = "theme?sapUiBlackBorder:#000000";
oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BRAND_COLOR = "theme?sapUiBrand:#000000";
oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_PATTERN_COLOR = "theme?sapUiBaseText:rgb(76,73,81)";
oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_UNRATED_COLOR = "theme?sapUiContentUnratedColor:#000000";
oFF.QDefaultTableTemplatesConfigurator.BOTTOM_UP_HIERARCHY_LINE_STYLE = "BottomUpHierarchyLineStyle";
oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_HATCHIHG = "BrandBottomHatching";
oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_LINE = "BrandBottomLine";
oFF.QDefaultTableTemplatesConfigurator.DATA_BOTTOM_LINE = "DataBottomLine";
oFF.QDefaultTableTemplatesConfigurator.DATA_BOTTOM_LINE_COLOR = "rgba(204,204,240,1)";
oFF.QDefaultTableTemplatesConfigurator.DATA_STYLE = "DataStyle";
oFF.QDefaultTableTemplatesConfigurator.EMPTY_BOTTOM_LINE = "EmptyBottomLine";
oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_MARKUP = "EmptyHeaderAreaMarkup";
oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_STYLE = "EmptyHeaderAreaStyle";
oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_BACKGROUND_COLOR = "theme?sapUiTableRowBG:#ffffff";
oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_TOP_STYLE = "EmptyHeaderTopStyle";
oFF.QDefaultTableTemplatesConfigurator.GREY_BACKGROUND = "GreyBackground";
oFF.QDefaultTableTemplatesConfigurator.GREY_BACKGROUND_COLOR = "theme?sapField_ReadOnly_Background:rgba(231,231,231,0.6)";
oFF.QDefaultTableTemplatesConfigurator.HATCHING_BOTTOM_LINE = "HatchingBottomLine";
oFF.QDefaultTableTemplatesConfigurator.HEADER_DATA_BACKGROUND = "HeaderDataBackground";
oFF.QDefaultTableTemplatesConfigurator.HEADER_END_ROW_LINE = "HeaderEndRowLine";
oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_MARKUP = "HeaderLineMarkup";
oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_STYLE = "HeaderLineStyle";
oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL0 = "HierarchyBottomUpLevel0";
oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL1 = "HierarchyBottomUpLevel1";
oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL2 = "HierarchyBottomUpLevel2";
oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_MARKUP = "HierarchyMarkup";
oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL0 = "HierarchyTopDownLevel0";
oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL1 = "HierarchyTopDownLevel1";
oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL2 = "HierarchyTopDownLevel2";
oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_FONT_COLOR = "theme?sapUiDarkText:rgb(172,172,173)";
oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_STYLE = "LightHeaderStyle";
oFF.QDefaultTableTemplatesConfigurator.MIDDLE_ALIGNMENT = "MiddleAlignment";
oFF.QDefaultTableTemplatesConfigurator.READING_LINE_MARKUP = "ReadingLineMarkup";
oFF.QDefaultTableTemplatesConfigurator.READING_LINE_STYLE = "ReadingLine";
oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP = "RowInserterMarkup";
oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP_HIERARCHY = "RowInserterMarkupHierarchy";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_ABSOLUTE_VARIANCE = "Absolute Variance";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_ACTUALS = "Actuals";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_BUDGET = "Budget";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_CATEGORY = "SAC::VersionCategory";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_FORECAST = "Forecast";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_PERCENTAGE_VARIANCE = "Percentage Variance";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_PLAN = "Plan";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_PREVIOUS = "Previous";
oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_ROLLING_FORECAST = "Rolling Forecast";
oFF.QDefaultTableTemplatesConfigurator.SEMANTIC_MARKUP = "Semantic";
oFF.QDefaultTableTemplatesConfigurator.SEPARATOR_LINE_COLOR = "rgb(63,81,97)";
oFF.QDefaultTableTemplatesConfigurator.THIN_HIERARCHY_LEAVES_STYLE = "ThinHierarchyNodeStyle";
oFF.QDefaultTableTemplatesConfigurator.TOP_DOWN_HIERARCHY_LINE_STYLE = "TopDownHierarchyLineStyle";
oFF.QDefaultTableTemplatesConfigurator.TOTAL_LINE_STYLE = "TotalLineStyle";
oFF.QDefaultTableTemplatesConfigurator.UNRATED_BOTTOM_LINE = "UnratedBottomLine";
oFF.QDefaultTableTemplatesConfigurator.WHITE_COLOR = "theme?sapUiWhite:#ffffff";
oFF.QDefaultTableTemplatesConfigurator.s_instance = null;
oFF.QDefaultTableTemplatesConfigurator.getInstance = function()
{
	if (oFF.isNull(oFF.QDefaultTableTemplatesConfigurator.s_instance))
	{
		oFF.QDefaultTableTemplatesConfigurator.s_instance = new oFF.QDefaultTableTemplatesConfigurator();
	}
	return oFF.QDefaultTableTemplatesConfigurator.s_instance;
};
oFF.QDefaultTableTemplatesConfigurator.prototype.addAlternatingRowsTemplate = function(templateList)
{
	let tableDefinition = oFF.QFactory.createTableDefinitionWithName(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_ALTERNATING_ROWS_NAME);
	let formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND, oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND);
	formattingStyle.setPriority(0);
	formattingStyle.setFillColor(oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND_COLOR);
	let scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND, oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND);
	let rowScope = scopedStyle.getOrthogonalRowsScope();
	rowScope.setMatchFullDataSection(true);
	rowScope.setMatchModulo(2);
	rowScope.setMatchOrdinal(1);
	rowScope.setMatchRootContentIndices(true);
	scopedStyle.setStyle(formattingStyle);
	let tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND_MARKUP, oFF.QDefaultTableTemplatesConfigurator.ALTERNATING_BACKGROUND_MARKUP);
	tableMarkup.setPriority(0);
	tableMarkup.addScopedStyle(scopedStyle);
	let columnsScope = tableMarkup.getColumnsScope();
	columnsScope.setMatchFullDataSection(true);
	columnsScope.setMatchFullHeaderSection(true);
	tableDefinition.setTableHeaderCompactionType(oFF.TableHeaderCompactionType.PREFERABLY_COLUMN);
	tableDefinition.setTableMemberHeaderHandling(oFF.TableMemberHeaderHandling.FIRST_MEMBER);
	templateList.add(tableDefinition);
};
oFF.QDefaultTableTemplatesConfigurator.prototype.addBasicTemplate = function(templateList)
{
	let tableDefinition = oFF.QFactory.createTableDefinitionWithName(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_BASIC_NAME);
	tableDefinition.setShowGrid(oFF.TriStateBool._TRUE);
	let formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.GREY_BACKGROUND, oFF.QDefaultTableTemplatesConfigurator.GREY_BACKGROUND);
	formattingStyle.setFillColor(oFF.QDefaultTableTemplatesConfigurator.GREY_BACKGROUND_COLOR);
	formattingStyle.setPriority(0);
	let scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HEADER_DATA_BACKGROUND, oFF.QDefaultTableTemplatesConfigurator.HEADER_DATA_BACKGROUND);
	scopedStyle.getOrthogonalRowsScope().setMatchFullDataSection(true);
	scopedStyle.getOrthogonalColumnsScope().setMatchFullDataSection(true);
	scopedStyle.setStyle(formattingStyle);
	let tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.HEADER_DATA_BACKGROUND, oFF.QDefaultTableTemplatesConfigurator.HEADER_DATA_BACKGROUND);
	tableMarkup.getColumnsScope().setMatchFullHeaderSection(true);
	tableMarkup.getRowsScope().setMatchFullHeaderSection(true);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_STYLE, oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_STYLE);
	formattingStyle.setPriority(0);
	formattingStyle.setFontColor(oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_FONT_COLOR);
	formattingStyle.addNewCellTypeRestriction().setRepeatedMemberName(oFF.TriStateBool._TRUE);
	let ctr = formattingStyle.addNewCellTypeRestriction();
	ctr.addCellType(oFF.TableCellType.ATTRIBUTE_COL_DIM_HEADER);
	ctr.addCellType(oFF.TableCellType.ATTRIBUTE_ROW_DIM_HEADER);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_STYLE, oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_STYLE);
	scopedStyle.getOrthogonalRowsScope().setMatchFullHeaderSection(true);
	scopedStyle.getOrthogonalColumnsScope().setMatchFullHeaderSection(true);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_STYLE, oFF.QDefaultTableTemplatesConfigurator.LIGHT_HEADER_STYLE);
	tableMarkup.setPriority(0);
	let scope = tableMarkup.getRowsScope();
	scope.setMatchFullHeaderSection(true);
	scope.setMatchFullDataSection(true);
	scope = tableMarkup.getColumnsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchFullHeaderSection(true);
	tableMarkup.addScopedStyle(scopedStyle);
	templateList.add(tableDefinition);
};
oFF.QDefaultTableTemplatesConfigurator.prototype.addDefaultTemplate = function(templateList)
{
	let tableDefinition = oFF.QFactory.createTableDefinitionWithName(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_DEFAULT_NAME);
	let tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.SEMANTIC_MARKUP, oFF.QDefaultTableTemplatesConfigurator.SEMANTIC_MARKUP);
	tableMarkup.setPriority(0);
	tableMarkup.setCellHeightAddition(3);
	tableMarkup.getRowsScope().setMatchHeaderSectionEnd(true);
	let formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HEADER_END_ROW_LINE, oFF.QDefaultTableTemplatesConfigurator.HEADER_END_ROW_LINE);
	formattingStyle.setPriority(5);
	formattingStyle.getStyledLineBottom().setColor(oFF.QDefaultTableTemplatesConfigurator.SEPARATOR_LINE_COLOR);
	let scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HEADER_END_ROW_LINE, oFF.QDefaultTableTemplatesConfigurator.HEADER_END_ROW_LINE);
	let scope = scopedStyle.getOrthogonalColumnsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchFullHeaderSection(true);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	this.addSemanticStyles(tableDefinition, tableMarkup);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.DATA_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.DATA_BOTTOM_LINE);
	formattingStyle.setPriority(5);
	formattingStyle.getStyledLineBottom().setColor(oFF.QDefaultTableTemplatesConfigurator.DATA_BOTTOM_LINE_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.DATA_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.DATA_BOTTOM_LINE);
	scope = scopedStyle.getOrthogonalColumnsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchFullHeaderSection(true);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.DATA_STYLE, oFF.QDefaultTableTemplatesConfigurator.DATA_STYLE);
	tableMarkup.setPriority(0);
	tableMarkup.getRowsScope().setMatchFullDataSection(true);
	tableMarkup.addScopedStyle(scopedStyle);
	templateList.add(tableDefinition);
};
oFF.QDefaultTableTemplatesConfigurator.prototype.addFinTemplate = function(templateList)
{
	let tableDefinition = oFF.QFactory.createTableDefinitionWithName(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_FIN_NAME);
	tableDefinition.setTableMemberHeaderHandling(oFF.TableMemberHeaderHandling.FIRST_MEMBER);
	let formattingStyle;
	let scopedStyle;
	let tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.SEMANTIC_MARKUP, oFF.QDefaultTableTemplatesConfigurator.SEMANTIC_MARKUP);
	tableMarkup.setPriority(0);
	tableMarkup.setCellHeightAddition(3);
	tableMarkup.getRowsScope().setMatchHeaderSectionEnd(true);
	this.addSemanticStyles(tableDefinition, tableMarkup);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_MARKUP, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_MARKUP);
	tableMarkup.setPriority(0);
	let scope = tableMarkup.getColumnsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchFullHeaderSection(true);
	scope.setMatchModulo(0);
	scope.setMatchOrdinal(0);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE, oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE);
	formattingStyle.setFontBold(true);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE, oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE);
	let pathElement;
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.THIN_HIERARCHY_LEAVES_STYLE, oFF.QDefaultTableTemplatesConfigurator.THIN_HIERARCHY_LEAVES_STYLE);
	formattingStyle.setFontBold(false);
	let bottomLine = formattingStyle.getStyledLineBottom();
	bottomLine.setLineStyle(oFF.TableLineStyle.SOLID);
	bottomLine.setWidth(1);
	bottomLine.setColor(oFF.QDefaultTableTemplatesConfigurator.WHITE_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.THIN_HIERARCHY_LEAVES_STYLE, oFF.QDefaultTableTemplatesConfigurator.THIN_HIERARCHY_LEAVES_STYLE);
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setMatchesLeaves(oFF.TriStateBool._TRUE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL0, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL0);
	formattingStyle.setFontBold(false);
	bottomLine = formattingStyle.getStyledLineBottom();
	bottomLine.setLineStyle(oFF.TableLineStyle.SOLID);
	bottomLine.setWidth(2);
	bottomLine.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BRAND_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL0, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL0);
	let rowScope = scopedStyle.getOrthogonalRowsScope();
	rowScope.setMatchModulo(-1);
	rowScope.setMatchOrdinal(-1);
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setHierarchyLevel(0);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_BELOW_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL1, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL1);
	formattingStyle.setFontBold(false);
	bottomLine = formattingStyle.getStyledLineBottom();
	bottomLine.setLineStyle(oFF.TableLineStyle.SOLID);
	bottomLine.setWidth(2);
	bottomLine.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL1, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL1);
	rowScope = scopedStyle.getOrthogonalRowsScope();
	rowScope.setMatchModulo(-1);
	rowScope.setMatchOrdinal(-1);
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setHierarchyLevel(1);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_BELOW_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL2, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL2);
	formattingStyle.setFontBold(false);
	bottomLine = formattingStyle.getStyledLineBottom();
	bottomLine.setLineStyle(oFF.TableLineStyle.SOLID);
	bottomLine.setWidth(1);
	bottomLine.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL2, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_TOP_DOWN_LEVEL2);
	rowScope = scopedStyle.getOrthogonalRowsScope();
	rowScope.setMatchModulo(-1);
	rowScope.setMatchOrdinal(-1);
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setHierarchyLevel(2);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_BELOW_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL0, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL0);
	formattingStyle.setFontBold(false);
	bottomLine = formattingStyle.getStyledLineBottom();
	bottomLine.setLineStyle(oFF.TableLineStyle.SOLID);
	bottomLine.setWidth(2);
	bottomLine.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BRAND_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL0, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL0);
	rowScope = scopedStyle.getOrthogonalRowsScope();
	rowScope.setMatchModulo(-1);
	rowScope.setMatchOrdinal(0);
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setHierarchyLevel(0);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_ABOVE_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL1, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL1);
	formattingStyle.setFontBold(false);
	bottomLine = formattingStyle.getStyledLineBottom();
	bottomLine.setLineStyle(oFF.TableLineStyle.SOLID);
	bottomLine.setWidth(2);
	bottomLine.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL1, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL1);
	rowScope = scopedStyle.getOrthogonalRowsScope();
	rowScope.setMatchModulo(-1);
	rowScope.setMatchOrdinal(0);
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setHierarchyLevel(1);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_ABOVE_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL2, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL2);
	formattingStyle.setFontBold(false);
	bottomLine = formattingStyle.getStyledLineBottom();
	bottomLine.setLineStyle(oFF.TableLineStyle.SOLID);
	bottomLine.setWidth(1);
	bottomLine.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL2, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_BOTTOM_UP_LEVEL2);
	rowScope = scopedStyle.getOrthogonalRowsScope();
	rowScope.setMatchModulo(-1);
	rowScope.setMatchOrdinal(0);
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setHierarchyLevel(2);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_ABOVE_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	templateList.add(tableDefinition);
};
oFF.QDefaultTableTemplatesConfigurator.prototype.addReportingTemplate = function(templateList)
{
	let formattingStyle;
	let line;
	let scopedStyle;
	let tableDefinition = oFF.QFactory.createTableDefinitionWithName(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_REPORT_NAME);
	tableDefinition.setShowDimensionTitles(oFF.TriStateBool._FALSE);
	tableDefinition.setTableMemberHeaderHandling(oFF.TableMemberHeaderHandling.FIRST_MEMBER);
	tableDefinition.setTableHeaderCompactionType(oFF.TableHeaderCompactionType.PREFERABLY_COLUMN);
	let tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.SEMANTIC_MARKUP, oFF.QDefaultTableTemplatesConfigurator.SEMANTIC_MARKUP);
	tableMarkup.setPriority(0);
	tableMarkup.setCellHeightAddition(3);
	tableMarkup.getRowsScope().setMatchHeaderSectionEnd(true);
	this.addSemanticStyles(tableDefinition, tableMarkup);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_MARKUP, oFF.QDefaultTableTemplatesConfigurator.HIERARCHY_MARKUP);
	tableMarkup.setPriority(0);
	let scope = tableMarkup.getColumnsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchFullHeaderSection(true);
	scope.setMatchModulo(0);
	scope.setMatchOrdinal(0);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE, oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE);
	formattingStyle.setFontBold(true);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE, oFF.QDefaultTableTemplatesConfigurator.BOLD_HIERARCHY_NODE_STYLE);
	let pathElement;
	pathElement = scopedStyle.getOrthogonalRowsScope().addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(0);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.TOP_DOWN_HIERARCHY_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.TOP_DOWN_HIERARCHY_LINE_STYLE);
	line = formattingStyle.getStyledLineBottom();
	line.setColor(oFF.OlapVisualizationConstants.VA_TABLE_TOTALS_BORDER_COLOR);
	line.setWidth(2);
	line.setLineStyle(oFF.TableLineStyle.SOLID);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.TOP_DOWN_HIERARCHY_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.TOP_DOWN_HIERARCHY_LINE_STYLE);
	scope = scopedStyle.getOrthogonalRowsScope();
	scope.setMatchModulo(-1);
	scope.setMatchOrdinal(-1);
	pathElement = scope.addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(-2);
	pathElement.setHierarchyLevel(-1);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_BELOW_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.TOTAL_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.TOTAL_LINE_STYLE);
	formattingStyle.setPriority(2);
	formattingStyle.setFontBold(true);
	formattingStyle.setShowFormattedText(oFF.TriStateBool._TRUE);
	formattingStyle.setPriority(2);
	line = formattingStyle.getStyledLineBottom();
	line.setWidth(0);
	line.setLineStyle(oFF.TableLineStyle.NONE);
	line.setColor(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_BACKGROUND_COLOR);
	line = formattingStyle.getStyledLineTop();
	line.setWidth(2);
	line.setLineStyle(oFF.TableLineStyle.SOLID);
	line.setColor(oFF.OlapVisualizationConstants.VA_TABLE_TOTALS_BORDER_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_UP_HIERARCHY_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.BOTTOM_UP_HIERARCHY_LINE_STYLE);
	scope = scopedStyle.getOrthogonalRowsScope();
	scope.setMatchModulo(-1);
	scope.setMatchOrdinal(0);
	pathElement = scope.addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(-2);
	pathElement.setHierarchyLevel(-1);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_ABOVE_PARENT);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.TOTAL_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.TOTAL_LINE_STYLE);
	scope = scopedStyle.getOrthogonalRowsScope();
	pathElement = scope.addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(-3);
	pathElement.setIncludeTotalsBand(oFF.TriStateBool._TRUE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_STYLE);
	line = formattingStyle.getStyledLineBottom();
	line.setLineStyle(oFF.TableLineStyle.SOLID);
	line.setColor(oFF.OlapVisualizationConstants.VA_TABLE_COLUMN_HEADER_BORDER_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_STYLE);
	scopedStyle.getOrthogonalRowsScope().setMatchHeaderSectionEnd(true);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_MARKUP, oFF.QDefaultTableTemplatesConfigurator.HEADER_LINE_MARKUP);
	tableMarkup.setPriority(2);
	scope = tableMarkup.getColumnsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchFullHeaderSection(true);
	scope.setMatchModulo(0);
	scope.setMatchOrdinal(0);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_STYLE, oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_STYLE);
	line = formattingStyle.getStyledLineBottom();
	line.setColor(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_BACKGROUND_COLOR);
	line.setWidth(0);
	line.setLineStyle(oFF.TableLineStyle.NONE);
	formattingStyle.setPriority(3);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_STYLE, oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_STYLE);
	scope = scopedStyle.getOrthogonalColumnsScope();
	scope.setMatchFullHeaderSection(true);
	scope.setMatchModulo(0);
	scope.setMatchOrdinal(0);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_MARKUP, oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_AREA_MARKUP);
	tableMarkup.setPriority(2);
	scope = tableMarkup.getRowsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchModulo(0);
	scope.setMatchOrdinal(0);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_TOP_STYLE, oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_TOP_STYLE);
	line = formattingStyle.getStyledLineTop();
	line.setColor(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_BACKGROUND_COLOR);
	line.setWidth(0);
	line.setLineStyle(oFF.TableLineStyle.NONE);
	formattingStyle.setPriority(0);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_TOP_STYLE, oFF.QDefaultTableTemplatesConfigurator.EMPTY_HEADER_TOP_STYLE);
	scope = scopedStyle.getOrthogonalColumnsScope();
	scope.setMatchFullDataSection(true);
	scope.setMatchFullHeaderSection(true);
	scope.setMatchModulo(0);
	scope.setMatchOrdinal(0);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP, oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP);
	scope = tableMarkup.getRowsScope();
	scope.setMatchModulo(-1);
	scope.setMatchOrdinal(-1);
	scope.addNewAxisPath().addNewElement().setAxisLevel(-3);
	let insertedTupleAfter = tableMarkup.addNewTuplesAfter(oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP, oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP);
	insertedTupleAfter.setCellHeight(20);
	insertedTupleAfter.addScopedStyle(scopedStyle);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP_HIERARCHY, oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP_HIERARCHY);
	scope = tableMarkup.getRowsScope();
	scope.setMatchModulo(-1);
	scope.setMatchOrdinal(-1);
	pathElement = scope.addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(-2);
	pathElement.setHierarchyLevel(-1);
	pathElement.setIncludeHeaderBand(oFF.TriStateBool._FALSE);
	pathElement.setExactHierarchyLevel(true);
	pathElement.setMatchesLeaves(oFF.TriStateBool._FALSE);
	pathElement.setMatchesExpanded(oFF.TriStateBool._TRUE);
	pathElement.setHierarchyAlignment(oFF.Alignment.CHILDREN_ABOVE_PARENT);
	insertedTupleAfter = tableMarkup.addNewTuplesAfter(oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP_HIERARCHY, oFF.QDefaultTableTemplatesConfigurator.ROW_INSERTER_MARKUP_HIERARCHY);
	insertedTupleAfter.setCellHeight(20);
	insertedTupleAfter.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.READING_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.READING_LINE_STYLE);
	formattingStyle.setPriority(3);
	line = formattingStyle.getStyledLineBottom();
	line.setLineStyle(oFF.TableLineStyle.DOTTED);
	line.setColor(oFF.OlapVisualizationConstants.VA_TABLE_CELL_BORDER_COLOR);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.READING_LINE_STYLE, oFF.QDefaultTableTemplatesConfigurator.READING_LINE_STYLE);
	scope = scopedStyle.getOrthogonalRowsScope();
	scope.getMatchModuloRaw().setVariableName(oFF.OlapVisualizationConstants.READING_LINE_FREQUENCY_VARIABLE_NAME);
	scope.setMatchOrdinal(0);
	scope.setMatchSkipLast(1);
	scopedStyle.setStyle(formattingStyle);
	pathElement = scope.addNewAxisPath().addNewElement();
	pathElement.setAxisLevel(-3);
	pathElement.setHierarchyLevel(-1);
	pathElement.setExactHierarchyLevel(false);
	pathElement.setIncludeTotalsBand(oFF.TriStateBool._FALSE);
	tableMarkup = tableDefinition.addNewTableMarkup(oFF.QDefaultTableTemplatesConfigurator.READING_LINE_MARKUP, oFF.QDefaultTableTemplatesConfigurator.READING_LINE_MARKUP);
	tableMarkup.addScopedStyle(scopedStyle);
	tableMarkup.setPriority(3);
	scope = tableMarkup.getColumnsScope();
	scope.setMatchFullHeaderSection(false);
	scope.setMatchHeaderSectionEnd(true);
	scope.setMatchFullDataSection(true);
	scope.addNewHeaderSectionInfo().setAxisLevel(-2);
	templateList.add(tableDefinition);
};
oFF.QDefaultTableTemplatesConfigurator.prototype.addSemanticStyles = function(tableDefinition, tableMarkup)
{
	let formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.MIDDLE_ALIGNMENT, oFF.QDefaultTableTemplatesConfigurator.MIDDLE_ALIGNMENT);
	formattingStyle.setPriority(0);
	formattingStyle.setVerticalAlignment(oFF.CellAlignmentVertical.MIDDLE);
	let scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.MIDDLE_ALIGNMENT, oFF.QDefaultTableTemplatesConfigurator.MIDDLE_ALIGNMENT);
	scopedStyle.getOrthogonalColumnsScope().setMatchFullDataSection(true);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.BLACK_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.BLACK_BOTTOM_LINE);
	formattingStyle.setPriority(0);
	let line = formattingStyle.getStyledLineBottom();
	line.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	line.setPatternColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	line.setPatternBorderColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	line.setPatternWidth(3);
	line.setPatternType(oFF.BackgroundPatternType.SOLID);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.BLACK_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.BLACK_BOTTOM_LINE);
	let pathElement = scopedStyle.getOrthogonalColumnsScope().addNewAxisPath().addNewElement();
	pathElement.getDimensionTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE);
	pathElement.getSemanticTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE);
	pathElement.getMemberNamesRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_ACTUALS_VARIABLE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.UNRATED_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.UNRATED_BOTTOM_LINE);
	formattingStyle.setPriority(0);
	line = formattingStyle.getStyledLineBottom();
	line.setColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_UNRATED_COLOR);
	line.setPatternColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_UNRATED_COLOR);
	line.setPatternBorderColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_UNRATED_COLOR);
	line.setPatternWidth(3);
	line.setPatternType(oFF.BackgroundPatternType.SOLID);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.UNRATED_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.UNRATED_BOTTOM_LINE);
	pathElement = scopedStyle.getOrthogonalColumnsScope().addNewAxisPath().addNewElement();
	pathElement.getDimensionTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE);
	pathElement.getSemanticTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE);
	pathElement.getMemberNamesRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_PREVIOUS_VARIABLE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.EMPTY_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.EMPTY_BOTTOM_LINE);
	formattingStyle.setPriority(0);
	line = formattingStyle.getStyledLineBottom();
	line.setPatternBorderColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	line.setPatternType(oFF.BackgroundPatternType.WHITE_FILL);
	line.setPatternWidth(3);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.EMPTY_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.EMPTY_BOTTOM_LINE);
	pathElement = scopedStyle.getOrthogonalColumnsScope().addNewAxisPath().addNewElement();
	pathElement.getDimensionTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE);
	pathElement.getSemanticTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE);
	pathElement.getMemberNamesRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_BUDGET_PLAN_VARIABLE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.HATCHING_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.HATCHING_BOTTOM_LINE);
	formattingStyle.setPriority(0);
	line = formattingStyle.getStyledLineBottom();
	line.setPatternColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_PATTERN_COLOR);
	line.setPatternBorderColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BORDER_COLOR);
	line.setPatternType(oFF.BackgroundPatternType.HATCHIING_1);
	line.setPatternWidth(3);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.HATCHING_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.HATCHING_BOTTOM_LINE);
	pathElement = scopedStyle.getOrthogonalColumnsScope().addNewAxisPath().addNewElement();
	pathElement.getDimensionTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE);
	pathElement.getSemanticTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE);
	pathElement.getMemberNamesRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_FORECAST_VARIABLE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_LINE);
	formattingStyle.setPriority(0);
	line = formattingStyle.getStyledLineBottom();
	line.setPatternBorderColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BRAND_COLOR);
	line.setPatternType(oFF.BackgroundPatternType.WHITE_FILL);
	line.setPatternWidth(3);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_LINE, oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_LINE);
	pathElement = scopedStyle.getOrthogonalColumnsScope().addNewAxisPath().addNewElement();
	pathElement.getDimensionTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE);
	pathElement.getSemanticTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE);
	pathElement.getMemberNamesRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_ABSOLUTE_VARIANCE_VARIABLE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
	formattingStyle = tableDefinition.addNewFormattingStyle(oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_HATCHIHG, oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_HATCHIHG);
	formattingStyle.setPriority(0);
	line = formattingStyle.getStyledLineBottom();
	line.setPatternColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BRAND_COLOR);
	line.setPatternBorderColor(oFF.QDefaultTableTemplatesConfigurator.BOTTOM_LINE_BRAND_COLOR);
	line.setPatternType(oFF.BackgroundPatternType.HATCHIING_1);
	line.setPatternWidth(3);
	scopedStyle = tableDefinition.addNewScopedStyle(oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_HATCHIHG, oFF.QDefaultTableTemplatesConfigurator.BRAND_BOTTOM_HATCHIHG);
	pathElement = scopedStyle.getOrthogonalColumnsScope().addNewAxisPath().addNewElement();
	pathElement.getDimensionTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE);
	pathElement.getSemanticTypeRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE);
	pathElement.getMemberNamesRaw().setVariableName(oFF.OlapVisualizationConstants.SAC_VERSION_PERCENTAGE_VARIANCE_VARIABLE);
	scopedStyle.setStyle(formattingStyle);
	tableMarkup.addScopedStyle(scopedStyle);
};
oFF.QDefaultTableTemplatesConfigurator.prototype.configure = function(visualizationTemplateManager)
{
	let templateList = visualizationTemplateManager.getOrCreateTableTemplateList(oFF.OlapVisualizationConstants.TABLE_ALTERNATING_ROWS_LINK);
	this.addAlternatingRowsTemplate(templateList);
	templateList = visualizationTemplateManager.getOrCreateTableTemplateList(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_LINK);
	templateList.setActiveTemplateName(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_DEFAULT_NAME);
	let featureConfiguration = oFF.CoGlobalConfigurationUtils.getDataAppConfigForProcess(visualizationTemplateManager.getProcess());
	if (oFF.notNull(featureConfiguration))
	{
		let tableTemplates = featureConfiguration.getListByKey(oFF.CoGlobalConfigurationUtils.EXTENDED_TABLE_TEMPLATES);
		let finalTemplateList = templateList;
		oFF.XCollectionUtils.forEach(tableTemplates, (item) => {
			if (item.isString())
			{
				switch (item.asString().getString())
				{
					case oFF.OlapVisualizationConstants.TABLE_TEMPLATE_BASIC_NAME:
						this.addBasicTemplate(finalTemplateList);
						break;

					case oFF.OlapVisualizationConstants.TABLE_TEMPLATE_DEFAULT_NAME:
						this.addDefaultTemplate(finalTemplateList);
						break;

					case oFF.OlapVisualizationConstants.TABLE_TEMPLATE_REPORT_NAME:
						this.addReportingTemplate(finalTemplateList);
						break;

					case oFF.OlapVisualizationConstants.TABLE_TEMPLATE_FIN_NAME:
						this.addFinTemplate(finalTemplateList);
						break;
				}
			}
		});
		templateList.setActiveTemplateName(featureConfiguration.getStringByKey(oFF.CoGlobalConfigurationUtils.EXTENDED_TABLE_TEMPLATE_SELECTION));
	}
	else
	{
		this.addDefaultTemplate(templateList);
		this.addBasicTemplate(templateList);
		this.addReportingTemplate(templateList);
		templateList.setActiveTemplateName(oFF.OlapVisualizationConstants.TABLE_TEMPLATE_DEFAULT_NAME);
	}
	let variable = visualizationTemplateManager.getVisualizationVariableHolder().addNewSimpleTypeVariable(oFF.XValueType.INTEGER, oFF.OlapVisualizationConstants.READING_LINE_FREQUENCY_VARIABLE_NAME, oFF.OlapVisualizationConstants.EXCEPTION_STYLE_VARIABLE_NAME, false);
	variable.setInteger(1);
	this.setupSemanticStyleVariables(visualizationTemplateManager.getVisualizationVariableHolder());
};
oFF.QDefaultTableTemplatesConfigurator.prototype.setupSemanticStyleVariables = function(visualizationVariableHolder)
{
	let variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_DIMENSION_TYPE_VARIABLE, false);
	variable.setString(oFF.DimensionType.GENERAL_VERSION.getName());
	variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_SEMANTIC_TYPE_VARIABLE, false);
	variable.setString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_CATEGORY);
	variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_ACTUALS_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_ACTUALS_VARIABLE, true);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_ACTUALS);
	variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_PREVIOUS_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_PREVIOUS_VARIABLE, true);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_PREVIOUS);
	variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_BUDGET_PLAN_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_BUDGET_PLAN_VARIABLE, true);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_BUDGET);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_PLAN);
	variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_FORECAST_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_FORECAST_VARIABLE, true);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_FORECAST);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_ROLLING_FORECAST);
	variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_ABSOLUTE_VARIANCE_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_ABSOLUTE_VARIANCE_VARIABLE, true);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_ABSOLUTE_VARIANCE);
	variable = visualizationVariableHolder.addNewSimpleTypeVariable(oFF.XValueType.STRING, oFF.OlapVisualizationConstants.SAC_VERSION_PERCENTAGE_VARIANCE_VARIABLE, oFF.OlapVisualizationConstants.SAC_VERSION_PERCENTAGE_VARIANCE_VARIABLE, true);
	variable.addString(oFF.QDefaultTableTemplatesConfigurator.SAC_VERSION_PERCENTAGE_VARIANCE);
};

oFF.QExtendedChartTemplatesConfigurator = function() {};
oFF.QExtendedChartTemplatesConfigurator.prototype = new oFF.XObject();
oFF.QExtendedChartTemplatesConfigurator.prototype._ff_c = "QExtendedChartTemplatesConfigurator";

oFF.QExtendedChartTemplatesConfigurator.VARIABLE_VALUE_STYLE_NAME = "VariableValueStyle";
oFF.QExtendedChartTemplatesConfigurator.s_instance = null;
oFF.QExtendedChartTemplatesConfigurator.getInstance = function()
{
	if (oFF.isNull(oFF.QExtendedChartTemplatesConfigurator.s_instance))
	{
		oFF.QExtendedChartTemplatesConfigurator.s_instance = new oFF.QExtendedChartTemplatesConfigurator();
	}
	return oFF.QExtendedChartTemplatesConfigurator.s_instance;
};
oFF.QExtendedChartTemplatesConfigurator.prototype.configure = function(visualizationTemplateManager)
{
	let chartTemplateList = visualizationTemplateManager.getOrCreateChartTemplateList(oFF.OlapVisualizationConstants.CHART_EXCEPTION_NAME);
	let chartStyle = oFF.QFactory.createChartStyleWithName(oFF.OlapVisualizationConstants.CHART_EXCEPTION_NAME);
	let chartPointStyle = chartStyle.getOrCreateChartPointStyle(oFF.QExtendedChartTemplatesConfigurator.VARIABLE_VALUE_STYLE_NAME, null);
	chartPointStyle.getColorRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_COLOR);
	let dataPointStyle = chartStyle.getOrCreateNewChartDataPointStyle(oFF.QExtendedChartTemplatesConfigurator.VARIABLE_VALUE_STYLE_NAME, null);
	dataPointStyle.setUnmatchedExceptions();
	dataPointStyle.setPriority(0);
	dataPointStyle.setChartPointStyleName(chartPointStyle.getName());
	dataPointStyle.getDataPointCategoryTextRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_TEXT);
	dataPointStyle.getDataPointCategoryNameRaw().setVariableName(oFF.OlapVisualizationConstants.EXCEPTION_VARIABLE_NAME);
	chartTemplateList.add(chartStyle);
	let globalConfiguration = oFF.CoGlobalConfigurationUtils.getDataAppConfigForProcess(visualizationTemplateManager.getProcess());
	if (oFF.notNull(globalConfiguration) && globalConfiguration.getBooleanByKey(oFF.CoGlobalConfigurationUtils.CHART_EXCEPTIONS))
	{
		chartTemplateList.setActiveTemplateName(oFF.OlapVisualizationConstants.CHART_EXCEPTION_NAME);
	}
	if (oFF.notNull(globalConfiguration))
	{
		let chartTemplates = globalConfiguration.getListByKey(oFF.CoGlobalConfigurationUtils.EXTENDED_CHART_TEMPLATES);
		let finalTemplateList = visualizationTemplateManager.getOrCreateChartTemplateList(oFF.OlapVisualizationConstants.CHART_TEMPLATE_LINK);
		oFF.XCollectionUtils.forEach(chartTemplates, (item) => {
			if (item.isString())
			{
				let templateStyle = oFF.QFactory.createChartStyleWithName(item.asString().getString());
				let chartColorScheme = templateStyle.getOrCreateChartColorScheme(oFF.OlapVisualizationConstants.CHART_COLOR_SCHEME_NAME);
				switch (item.asString().getString())
				{
					case oFF.OlapVisualizationConstants.CHART_COLOR_NAME:
						this.setupDefaultColors(chartColorScheme);
						break;

					case oFF.OlapVisualizationConstants.CHART_HATCHING_NAME:
						chartColorScheme.addColor("#000000");
						this.setupDefaultPatterns(chartColorScheme);
						break;

					case oFF.OlapVisualizationConstants.CHART_COMBO_NAME:
						this.setupDefaultColors(chartColorScheme);
						this.setupDefaultPatterns(chartColorScheme);
						break;
				}
				finalTemplateList.add(templateStyle);
			}
		});
		finalTemplateList.setActiveTemplateName(globalConfiguration.getStringByKey(oFF.CoGlobalConfigurationUtils.EXTENDED_CHART_TEMPLATE_SELECTION));
	}
};
oFF.QExtendedChartTemplatesConfigurator.prototype.setupDefaultColors = function(chartColorScheme)
{
	chartColorScheme.addColor("#488CCC");
	chartColorScheme.addColor("#D87D4F");
	chartColorScheme.addColor("#52A37D");
	chartColorScheme.addColor("#E467AA");
	chartColorScheme.addColor("#A36FC9");
	chartColorScheme.addColor("#12A2AF");
	chartColorScheme.addColor("#E05C64");
	chartColorScheme.addColor("#CC3DA8");
	chartColorScheme.addColor("#636CDA");
	chartColorScheme.addColor("#DC4180");
	chartColorScheme.addColor("#809E57");
	chartColorScheme.addColor("#7c7c7c");
	chartColorScheme.addColor("#6c6c6c");
	chartColorScheme.addColor("#222a35");
	chartColorScheme.addColor("#000000");
	chartColorScheme.addColor("#4a3f93");
	chartColorScheme.addColor("#c9024a");
	chartColorScheme.addColor("#37962d");
};
oFF.QExtendedChartTemplatesConfigurator.prototype.setupDefaultPatterns = function(chartColorScheme)
{
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_1);
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_2);
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_3);
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_4);
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_5);
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_6);
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_7);
	chartColorScheme.addPattern(oFF.BackgroundPatternType.HATCHIING_8);
};

oFF.QLambdaVisualizationTemplateConfigurationHelper = function() {};
oFF.QLambdaVisualizationTemplateConfigurationHelper.prototype = new oFF.XObject();
oFF.QLambdaVisualizationTemplateConfigurationHelper.prototype._ff_c = "QLambdaVisualizationTemplateConfigurationHelper";

oFF.QLambdaVisualizationTemplateConfigurationHelper.create = function(templateConsumer)
{
	let instance = new oFF.QLambdaVisualizationTemplateConfigurationHelper();
	instance.m_templateConsumer = templateConsumer;
	return instance;
};
oFF.QLambdaVisualizationTemplateConfigurationHelper.prototype.m_templateConsumer = null;
oFF.QLambdaVisualizationTemplateConfigurationHelper.prototype.configure = function(visualizationTemplateManager)
{
	if (oFF.notNull(this.m_templateConsumer))
	{
		this.m_templateConsumer(visualizationTemplateManager);
	}
};

oFF.QQuickActionCoordinate = function() {};
oFF.QQuickActionCoordinate.prototype = new oFF.XObject();
oFF.QQuickActionCoordinate.prototype._ff_c = "QQuickActionCoordinate";

oFF.QQuickActionCoordinate.create = function()
{
	let instance = new oFF.QQuickActionCoordinate();
	instance.m_columMap = oFF.XSimpleMap.create();
	instance.m_rowMap = oFF.XSimpleMap.create();
	instance.m_columnCoordinate = -1;
	instance.m_rowCoordinate = -1;
	return instance;
};
oFF.QQuickActionCoordinate.prototype.m_columMap = null;
oFF.QQuickActionCoordinate.prototype.m_columnCoordinate = 0;
oFF.QQuickActionCoordinate.prototype.m_rowCoordinate = 0;
oFF.QQuickActionCoordinate.prototype.m_rowMap = null;
oFF.QQuickActionCoordinate.prototype.applyColumnParameter = function(column, parameter)
{
	this.m_columMap.put(oFF.XIntegerValue.create(column), parameter);
	this.m_columnCoordinate = oFF.XMath.max(this.m_columnCoordinate, column);
};
oFF.QQuickActionCoordinate.prototype.applyRowParameter = function(row, parameter)
{
	this.m_rowMap.put(oFF.XIntegerValue.create(row), parameter);
	this.m_rowCoordinate = oFF.XMath.max(this.m_rowCoordinate, row);
};
oFF.QQuickActionCoordinate.prototype.getColumMap = function()
{
	return this.m_columMap;
};
oFF.QQuickActionCoordinate.prototype.getColumnCoordinate = function()
{
	return this.m_columnCoordinate;
};
oFF.QQuickActionCoordinate.prototype.getRowCoordinate = function()
{
	return this.m_rowCoordinate;
};
oFF.QQuickActionCoordinate.prototype.getRowMap = function()
{
	return this.m_rowMap;
};
oFF.QQuickActionCoordinate.prototype.reset = function()
{
	this.m_columnCoordinate = -1;
	this.m_rowCoordinate = -1;
	this.m_columMap.clear();
	this.m_rowMap.clear();
};

oFF.QQuickActionParameterResolveUtil = {

	fieldValueParameterMatchesMember:function(fieldValueParameter, dimensionMember, drillState)
	{
			let matchesTotals = fieldValueParameter.getMatchesTotals();
		let matchesExpanded = fieldValueParameter.getMatchesExpanded();
		let matchesLeaves = fieldValueParameter.getMatchesLeaves();
		return (!oFF.TriStateBool.isExplicitBooleanValue(matchesTotals) || dimensionMember.getMemberType().isTypeOf(oFF.MemberType.RESULT) === matchesTotals.getBoolean()) && (!oFF.TriStateBool.isExplicitBooleanValue(matchesExpanded) || (drillState === oFF.DrillState.EXPANDED) === matchesExpanded.getBoolean()) && (!oFF.TriStateBool.isExplicitBooleanValue(matchesLeaves) || (drillState === oFF.DrillState.LEAF || oFF.isNull(drillState)) === matchesLeaves.getBoolean());
	},
	readFromCartesianList:function(filterValues, filterCartesianList)
	{
			oFF.XCollectionUtils.forEach(filterCartesianList, (filterOperation) => {
			oFF.XCollectionUtils.addIfNotNull(filterValues, oFF.QQuickActionParameterResolveUtil.resolveFromFilterOperation(filterOperation));
		});
		return filterValues;
	},
	resolveFromFilterElement:function(queryModel, fieldValueParameter, filterElement)
	{
			let filterValues = oFF.XList.create();
		let componentType = filterElement.getOlapComponentType();
		let dimension = fieldValueParameter.getDimension();
		let field = fieldValueParameter.getField();
		let semanticObject = fieldValueParameter.getSemanticObject();
		let list = null;
		if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_PRODUCT))
		{
			let cartesianProduct = filterElement;
			if (oFF.notNull(dimension))
			{
				list = cartesianProduct.getCartesianListByDimensionName(dimension.getName());
			}
			else if (oFF.notNull(field))
			{
				list = cartesianProduct.getCartesianListByField(field);
			}
			else if (oFF.XStringUtils.isNotNullAndNotEmpty(semanticObject))
			{
				list = oFF.XStream.of(cartesianProduct).find((fe) => {
					return oFF.XString.isEqual(semanticObject, queryModel.getDimensionByName(fe.getDimensionName()).getSemanticObject());
				}).orElse(null);
			}
			if (oFF.notNull(list))
			{
				oFF.QQuickActionParameterResolveUtil.readFromCartesianList(filterValues, list);
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.CARTESIAN_LIST))
		{
			let cartesianList = filterElement;
			if (oFF.notNull(dimension) && oFF.XString.isEqual(cartesianList.getDimensionName(), dimension.getName()) || oFF.notNull(field) && cartesianList.getFieldMetadata() === field.getMetadata() || oFF.XStringUtils.isNotNullAndNotEmpty(semanticObject) && oFF.XString.isEqual(semanticObject, queryModel.getDimensionByName(cartesianList.getDimensionName()).getSemanticObject()))
			{
				oFF.QQuickActionParameterResolveUtil.readFromCartesianList(filterValues, cartesianList);
			}
		}
		else if (componentType.isTypeOf(oFF.FilterComponentType.OPERATION))
		{
			let filterOperation = filterElement;
			if (oFF.notNull(dimension) && oFF.XString.isEqual(filterOperation.getDimensionName(), dimension.getName()) || oFF.notNull(field) && filterOperation.getFieldMetadata() === field.getMetadata() || oFF.XStringUtils.isNotNullAndNotEmpty(semanticObject) && oFF.XString.isEqual(semanticObject, queryModel.getDimensionByName(filterOperation.getDimensionName()).getSemanticObject()))
			{
				filterValues.add(oFF.QQuickActionParameterResolveUtil.resolveFromFilterOperation(filterOperation));
			}
		}
		return filterValues;
	},
	resolveFromFilterOperation:function(filterElement)
	{
			let filterValueBag = oFF.QFilterValueBag._create(null, null, null);
		filterValueBag.copyFrom(filterElement.getLow(), null);
		return filterValueBag;
	}
};

oFF.BindingUtils = {

	getBindingSoureList:function(vizDef, feedName)
	{
			let chartDefBindings = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getListByKey(oFF.VizDefConstants.K_BINDINGS);
		let ids = oFF.XList.create();
		for (let i = 0; i < chartDefBindings.size(); ++i)
		{
			let binding = chartDefBindings.getStructureAt(i);
			if (oFF.XString.isEqual(binding.getStringByKey(oFF.VizDefConstants.K_FEED), feedName))
			{
				let source = binding.getListByKey(oFF.VizDefConstants.K_SOURCE);
				for (let j = 0; j < source.size(); ++j)
				{
					ids.add(source.getStructureAt(j).getStringByKey(oFF.VizDefConstants.K_ID));
				}
			}
		}
		return ids;
	}
};

oFF.ChartRendererFactoryImpl = function() {};
oFF.ChartRendererFactoryImpl.prototype = new oFF.XObject();
oFF.ChartRendererFactoryImpl.prototype._ff_c = "ChartRendererFactoryImpl";

oFF.ChartRendererFactoryImpl.create = function()
{
	return new oFF.ChartRendererFactoryImpl();
};
oFF.ChartRendererFactoryImpl.prototype.newRenderer = function(protocolType)
{
	if (protocolType.isTypeOf(oFF.ProtocolBindingType.GOOGLE_CHART_PROTOCOL))
	{
		return oFF.RsGoogleChartRenderer.create();
	}
	if (protocolType.isTypeOf(oFF.ProtocolBindingType.VIZ_FRAME_PROTOCOL))
	{
		return oFF.RsVizFrameRenderer.create();
	}
	if (protocolType.isTypeOf(oFF.ProtocolBindingType.MICRO_CHART_PROTOCOL))
	{
		return oFF.RsMicroChartRenderer.create();
	}
	if (protocolType.isTypeOf(oFF.ProtocolBindingType.VIZ_INSTANCE_PROTOCOL))
	{
		return oFF.RsVizInstanceRenderer.create();
	}
	return oFF.RsHiChartRenderer.create();
};
oFF.ChartRendererFactoryImpl.prototype.newSimpleRenderer = function(protocolType, chartContainer)
{
	return oFF.GenericHiChartRendererLatest.create(chartContainer.getVisualizationData(), true);
};

oFF.RsHiChartRenderer = function() {};
oFF.RsHiChartRenderer.prototype = new oFF.XObject();
oFF.RsHiChartRenderer.prototype._ff_c = "RsHiChartRenderer";

oFF.RsHiChartRenderer.create = function()
{
	return new oFF.RsHiChartRenderer();
};
oFF.RsHiChartRenderer.getDoubleValueExtended = function(structure, name, defaultValue)
{
	let result = defaultValue;
	let number2beConverted = structure.getStringByKeyExt(name, "0");
	if (structure.getElementTypeByKey(name).isNumber())
	{
		result = structure.getByKey(name).asNumber().getDouble();
	}
	else if (oFF.notNull(number2beConverted) && oFF.XString.containsString(number2beConverted, "E"))
	{
		let number2be = oFF.XDouble.convertFromString(oFF.XString.substring(number2beConverted, 0, oFF.XString.indexOf(number2beConverted, "E")));
		let exponotialComponent = oFF.XInteger.convertFromString(oFF.XString.substring(number2beConverted, oFF.XString.indexOf(number2beConverted, "E"), oFF.XString.size(number2beConverted)));
		result = number2be * oFF.XMath.pow(10, exponotialComponent);
	}
	else if (oFF.notNull(number2beConverted))
	{
		try
		{
			result = oFF.XDouble.convertFromString(number2beConverted);
		}
		catch (t)
		{
			result = defaultValue;
		}
	}
	return result;
};
oFF.RsHiChartRenderer.prototype.render = function(type, rs)
{
	if (oFF.notNull(rs))
	{
		let helper = oFF.RsHiChartRenderHelper.create(type, rs);
		return helper.getChartData();
	}
	return null;
};
oFF.RsHiChartRenderer.prototype.renderVisualizationWithResultSet = function(visualizationDefinition, cursorResultSet)
{
	if (oFF.notNull(cursorResultSet))
	{
		let helper = oFF.RsHiChartRenderHelper.createWithVisualizationDefinition(visualizationDefinition, cursorResultSet);
		let theChartData = helper.getChartData();
		if (!theChartData.containsKey(oFF.VizDefConstants.K_TITLE))
		{
			let title = theChartData.putNewStructure(oFF.VizDefConstants.K_TITLE);
			title.putString(oFF.VizDefConstants.K_TEXT, "");
		}
		return helper.getChartData();
	}
	return null;
};

oFF.RsHiChartUtils = {

	axisPloter:function(vizAxis, axisChart, chartType, defaultlabeling)
	{
			let isVisible = true;
		let isVisibleLabels = defaultlabeling;
		let isAxisTickVisible = false;
		let axisColor = "#FFFFFF";
		let vizPropAxisLine = vizAxis.getStructureByKey(oFF.VizDefConstants.K_AXIS_LINE);
		if (vizAxis.getElementTypeByKey(oFF.VizDefConstants.K_VISIBLE) === oFF.PrElementType.BOOLEAN)
		{
			isVisibleLabels = vizAxis.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, defaultlabeling);
		}
		let vizPropAxisTick = vizAxis.getStructureByKey(oFF.VizDefConstants.K_AXIS_TICK);
		if (oFF.notNull(vizPropAxisLine))
		{
			if (vizPropAxisLine.containsKey(oFF.VizDefConstants.K_SIZE))
			{
				let axisLineSize = vizPropAxisLine.getIntegerByKeyExt(oFF.VizDefConstants.K_SIZE, 0);
				axisChart.putInteger(oFF.VizDefConstants.K_LINE_WIDTH, axisLineSize);
			}
			isVisible = vizPropAxisLine.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, true);
		}
		if (oFF.notNull(vizPropAxisTick))
		{
			isAxisTickVisible = vizPropAxisTick.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, false);
		}
		let isShowLabelGrids = vizAxis.getBooleanByKeyExt(oFF.VizDefConstants.K_SHOW_LABEL_GRIDS, true);
		if (!oFF.XString.isEqual(oFF.VizDefConstants.K_HEATMAP, chartType) && vizAxis.hasStringByKey(oFF.VizDefConstants.K_COLOR) && isVisible)
		{
			axisColor = vizAxis.getStringByKeyExt(oFF.VizDefConstants.K_COLOR, "#FFFFFF");
		}
		axisChart.putString(oFF.VizDefConstants.K_LINE_COLOR, axisColor);
		let vizAxisLabel = vizAxis.getStructureByKey(oFF.VizDefConstants.K_LABEL);
		if (oFF.notNull(vizAxisLabel))
		{
			let vizAxisLabelStyle = vizAxisLabel.getStructureByKey(oFF.VizDefConstants.K_STYLE);
			if (oFF.notNull(vizAxisLabelStyle))
			{
				let axisLabelColor = vizAxisLabelStyle.getStringByKey(oFF.VizDefConstants.K_COLOR);
				let axisLabelFontFamily = vizAxisLabelStyle.getStringByKey(oFF.VizDefConstants.K_FONT_FAMILY);
				let axisLabelFontsize = vizAxisLabelStyle.getStringByKey(oFF.VizDefConstants.K_FONT_SIZE);
				let xAxisLabels = axisChart.putNewStructure(oFF.VizDefConstants.K_LABELS);
				if (isShowLabelGrids)
				{
					xAxisLabels.putInteger(oFF.VizDefConstants.K_X, -5);
					let xAxisLabelsStyle = xAxisLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
					xAxisLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, axisLabelFontsize);
					xAxisLabelsStyle.putString(oFF.VizDefConstants.K_FILL, axisLabelColor);
					if (oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT))
					{
						xAxisLabelsStyle.putString(oFF.VizDefConstants.K_COLOR, axisLabelColor);
					}
					xAxisLabelsStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, axisLabelFontFamily);
				}
				xAxisLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, isVisibleLabels);
			}
		}
		if (!isAxisTickVisible)
		{
			axisChart.putInteger(oFF.VizDefConstants.K_GRIDLINE_WIDTH, 0);
			axisChart.putString(oFF.VizDefConstants.K_TICK_COLOR, "rgb(166, 168, 171)");
			axisChart.putInteger(oFF.VizDefConstants.K_TICK_WIDTH, 0);
		}
		return axisChart;
	},
	create:function()
	{
			return new oFF.RsHiChartUtils();
	},
	responsiveBuilder:function(chartType, theChartData)
	{
			let responsive = theChartData.putNewStructure(oFF.VizDefConstants.K_RESPONSIVE);
		let rules = responsive.putNewList(oFF.VizDefConstants.K_RULES);
		let rules3Object = rules.addNewStructure();
		let conditionStruct3 = rules3Object.putNewStructure(oFF.VizDefConstants.K_CONDITION);
		conditionStruct3.putInteger(oFF.VizDefConstants.K_MAX_HEIGHT, 176);
		let chartOptions3Rules = rules3Object.putNewStructure(oFF.VizDefConstants.K_CHART_OPTIONS);
		let chartOptionsLegend3 = chartOptions3Rules.putNewStructure(oFF.VizDefConstants.K_LEGEND);
		chartOptionsLegend3.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
		let chartOptions3yAxis = chartOptions3Rules.putNewStructure(oFF.VizDefConstants.K_Y_AXIS);
		let chartOptions3yAxisLabel = chartOptions3yAxis.putNewStructure(oFF.VizDefConstants.K_LABELS);
		chartOptions3yAxisLabel.putInteger(oFF.VizDefConstants.K_ROTATION, 344);
		chartOptions3yAxisLabel.putInteger(oFF.VizDefConstants.K_X, 10);
		let rules1Object = rules.addNewStructure();
		let conditionStruct = rules1Object.putNewStructure(oFF.VizDefConstants.K_CONDITION);
		conditionStruct.putInteger(oFF.VizDefConstants.K_MAX_WIDTH, 359);
		conditionStruct.putInteger(oFF.VizDefConstants.K_MIN_HEIGHT, 70);
		let chartOptions1Rules = rules1Object.putNewStructure(oFF.VizDefConstants.K_CHART_OPTIONS);
		let chartInfo = chartOptions1Rules.putNewStructure(oFF.VizDefConstants.K_CHART);
		chartInfo.putBoolean(oFF.VizDefConstants.K_ANIMATION, false);
		let chartOptionsPlotOptions = chartOptions1Rules.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
		let chartOptionsPlotOptionsSeries = chartOptionsPlotOptions.putNewStructure(oFF.VizDefConstants.K_SERIES);
		let chartOptionsDatalabels = chartOptionsPlotOptionsSeries.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
		let chartOptionsDatalabelsStyle = chartOptionsDatalabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
		if (oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_PIE))
		{
			chartOptionsDatalabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "9px");
			chartOptionsDatalabels.putInteger(oFF.VizDefConstants.K_CONNECTOR_WIDTH, 0);
			chartOptionsDatalabels.putInteger(oFF.VizDefConstants.K_DISTANCE, -30);
			chartOptionsDatalabels.putBoolean(oFF.VizDefConstants.K_INSIDE, true);
			chartInfo.putInteger(oFF.VizDefConstants.K_MARGIN_TOP, 40);
		}
		else
		{
			chartInfo.putInteger(oFF.VizDefConstants.K_MARGIN_TOP, 50);
			chartOptionsDatalabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "9px");
		}
		let chartOptionsTitle = chartOptions1Rules.putNewStructure(oFF.VizDefConstants.K_TITLE);
		let chartOptionsTitleStyle = chartOptionsTitle.putNewStructure(oFF.VizDefConstants.K_STYLE);
		chartOptionsTitleStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "13px");
		chartOptionsTitleStyle.putBoolean(oFF.VizDefConstants.K_FLOATING, true);
		let chartOptions1subTitle = chartOptions1Rules.putNewStructure(oFF.VizDefConstants.K_SUBTITLE);
		chartOptions1subTitle.putString(oFF.VizDefConstants.K_TEXT, "");
		let chartOptionsxAxis = chartOptions1Rules.putNewStructure(oFF.VizDefConstants.K_X_AXIS);
		let chartOptionsxAxisLabel = chartOptionsxAxis.putNewStructure(oFF.VizDefConstants.K_LABELS);
		let chartOptionsxAxisLabelStyle = chartOptionsxAxisLabel.putNewStructure(oFF.VizDefConstants.K_STYLE);
		chartOptionsxAxisLabelStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "10px");
		let chartOptionsyAxis = chartOptions1Rules.putNewStructure(oFF.VizDefConstants.K_Y_AXIS);
		let chartOptionsyAxisLabel = chartOptionsyAxis.putNewStructure(oFF.VizDefConstants.K_LABELS);
		let chartOptionsyAxisLabelStyle = chartOptionsyAxisLabel.putNewStructure(oFF.VizDefConstants.K_STYLE);
		chartOptionsyAxisLabelStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "10px");
		let rules2Object = rules.addNewStructure();
		let condition2Struct = rules2Object.putNewStructure(oFF.VizDefConstants.K_CONDITION);
		condition2Struct.putInteger(oFF.VizDefConstants.K_MAX_WIDTH, 176);
		let chartOptions2Rules = rules2Object.putNewStructure(oFF.VizDefConstants.K_CHART_OPTIONS);
		let chart2Info = chartOptions2Rules.putNewStructure(oFF.VizDefConstants.K_CHART);
		chart2Info.putBoolean(oFF.VizDefConstants.K_ANIMATION, false);
		let chartOptionsLegend2 = chartOptions2Rules.putNewStructure(oFF.VizDefConstants.K_LEGEND);
		chartOptionsLegend2.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
		chartOptionsLegend2.putInteger(oFF.VizDefConstants.K_Y, 25);
		let chartOptions2PlotOptions = chartOptions2Rules.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
		let chartOptions2PlotOptionsPie = chartOptions2PlotOptions.putNewStructure(oFF.VizDefConstants.K_SERIES);
		chartOptions2PlotOptionsPie.putInteger(oFF.VizDefConstants.K_MIN_SIZE, 100);
		let chartOptions2Datalabels = chartOptions2PlotOptionsPie.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
		chartOptions2Datalabels.putInteger(oFF.VizDefConstants.K_CONNECTOR_WIDTH, 0);
		chartOptions2Datalabels.putInteger(oFF.VizDefConstants.K_DISTANCE, -25);
		let chartOptions2DatalabelsStyle = chartOptions2Datalabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
		chartOptions2DatalabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "8px");
		chart2Info.putInteger(oFF.VizDefConstants.K_MARGIN_TOP, 40);
		let chartOptions2Title = chartOptions2Rules.putNewStructure(oFF.VizDefConstants.K_TITLE);
		let chartOptions2TitleStyle = chartOptions2Title.putNewStructure(oFF.VizDefConstants.K_STYLE);
		chartOptions2TitleStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "10px");
		let chartOptions2subTitle = chartOptions2Rules.putNewStructure(oFF.VizDefConstants.K_SUBTITLE);
		chartOptions2subTitle.putString(oFF.VizDefConstants.K_TEXT, "");
		let chartOptions2xAxis = chartOptions2Rules.putNewStructure(oFF.VizDefConstants.K_X_AXIS);
		let chartOptions2xAxisLabel = chartOptions2xAxis.putNewStructure(oFF.VizDefConstants.K_LABELS);
		let chartOptions2xAxisLabelStyle = chartOptions2xAxisLabel.putNewStructure(oFF.VizDefConstants.K_STYLE);
		chartOptions2xAxisLabelStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "9px");
		let chartOptions2yAxis = chartOptions2Rules.putNewStructure(oFF.VizDefConstants.K_Y_AXIS);
		let chartOptions2yAxisLabel = chartOptions2yAxis.putNewStructure(oFF.VizDefConstants.K_LABELS);
		let chartOptions2yAxisLabelStyle = chartOptions2yAxisLabel.putNewStructure(oFF.VizDefConstants.K_STYLE);
		chartOptions2yAxisLabelStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "9px");
	}
};

oFF.RsGoogleChartConfig = {

	s_charts:null,
	createMetadata:function(vizDef, columns)
	{
			let chart = oFF.RsGoogleChartConfig.s_charts.getByKey(oFF.RsGoogleChartConfig.getChartType(vizDef));
		if (oFF.notNull(chart))
		{
			return chart.createMetadata(columns);
		}
		return oFF.PrFactory.createStructure();
	},
	createOptions:function(vizDef)
	{
			let chart = oFF.RsGoogleChartConfig.s_charts.getByKey(oFF.RsGoogleChartConfig.getChartType(vizDef));
		if (oFF.notNull(chart))
		{
			return chart.createOptions(vizDef);
		}
		return oFF.PrFactory.createStructure();
	},
	getChartType:function(vizDef)
	{
			let vizDefChart = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
		let type = vizDefChart.getStringByKey(oFF.VizDefConstants.K_TYPE);
		if (oFF.XString.isEqual(type, oFF.VizDefConstants.V_CHART_TYPE_BAR) || oFF.XString.isEqual(type, oFF.VizDefConstants.V_STACKED_BAR))
		{
			return oFF.SemanticBindingType.BAR;
		}
		if (oFF.XString.isEqual(type, oFF.VizDefConstants.V_CHART_TYPE_COLUMN) || oFF.XString.isEqual(type, oFF.VizDefConstants.V_STACKED_COLUMN))
		{
			return oFF.SemanticBindingType.COLUMN;
		}
		if (oFF.XString.isEqual(type, oFF.VizDefConstants.V_TYPE_BARCOLUMN))
		{
			let properties = vizDefChart.getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
			let propertiesGeneral = properties.getStructureByKey(oFF.VizDefConstants.K_GENERAL);
			if (oFF.notNull(propertiesGeneral) && propertiesGeneral.getBooleanByKeyExt(oFF.VizDefConstants.K_INVERTED, false))
			{
				return oFF.SemanticBindingType.BAR;
			}
			return oFF.SemanticBindingType.COLUMN;
		}
		if (oFF.XString.isEqual(type, oFF.VizDefConstants.K_LINE))
		{
			return oFF.SemanticBindingType.LINE;
		}
		return null;
	},
	staticSetup:function()
	{
			if (oFF.isNull(oFF.RsGoogleChartConfig.s_charts))
		{
			oFF.RsGoogleChartConfig.s_charts = oFF.XSimpleMap.create();
			oFF.RsGoogleChartConfig.s_charts.put(oFF.SemanticBindingType.BAR, oFF.GoogleChartBar.create());
			oFF.RsGoogleChartConfig.s_charts.put(oFF.SemanticBindingType.COLUMN, oFF.GoogleChartColumn.create());
			oFF.RsGoogleChartConfig.s_charts.put(oFF.SemanticBindingType.LINE, oFF.GoogleChartLine.create());
		}
	}
};

oFF.RsGoogleChartRenderer = function() {};
oFF.RsGoogleChartRenderer.prototype = new oFF.XObject();
oFF.RsGoogleChartRenderer.prototype._ff_c = "RsGoogleChartRenderer";

oFF.RsGoogleChartRenderer.create = function()
{
	return new oFF.RsGoogleChartRenderer();
};
oFF.RsGoogleChartRenderer.prototype.addHeader = function(cols, label, type)
{
	let columnStructure = cols.addNewStructure();
	columnStructure.putString(oFF.GoogleConstants.K_TYPE, type);
	columnStructure.putString(oFF.GoogleConstants.K_LABEL, label);
};
oFF.RsGoogleChartRenderer.prototype.addHeaderForDimensionColumns = function(rowsAxis, cols)
{
	rowsAxis.setTupleCursorBeforeStart();
	rowsAxis.nextTuple();
	for (let i = 0; i < rowsAxis.getTupleElementsCount(); i++)
	{
		rowsAxis.nextTupleElement();
		rowsAxis.nextFieldValue();
		let dimension = rowsAxis.getField().getDimension();
		this.addHeader(cols, dimension.getText(), oFF.GoogleConstants.V_TYPE_STRING);
	}
};
oFF.RsGoogleChartRenderer.prototype.addHeaderForMeasureColumns = function(columnsAxis, cols)
{
	columnsAxis.setTupleCursorBeforeStart();
	while (columnsAxis.hasNextTuple())
	{
		columnsAxis.nextTuple();
		let header = oFF.XStringBuffer.create();
		while (columnsAxis.hasNextTupleElement())
		{
			columnsAxis.nextTupleElement();
			if (header.length() > 0)
			{
				header.append("/");
			}
			header.append(this.getMemberName(columnsAxis));
		}
		this.addHeader(cols, header.toString(), oFF.GoogleConstants.V_TYPE_NUMBER);
	}
};
oFF.RsGoogleChartRenderer.prototype.addRowCell = function(list, value)
{
	let structure = list.addNewStructure();
	let valueType = value.getValueType();
	if (valueType === oFF.XValueType.STRING)
	{
		structure.putString(oFF.GoogleConstants.K_V, value.getStringRepresentation());
	}
	else if (valueType === oFF.XValueType.INTEGER)
	{
		structure.putInteger(oFF.GoogleConstants.K_V, value.getInteger());
	}
	else if (valueType === oFF.XValueType.DOUBLE)
	{
		structure.putDouble(oFF.GoogleConstants.K_V, value.getDouble());
	}
	else if (valueType === oFF.XValueType.LONG)
	{
		structure.putLong(oFF.GoogleConstants.K_V, value.getLong());
	}
	else if (valueType === oFF.XValueType.BOOLEAN)
	{
		structure.putBoolean(oFF.GoogleConstants.K_V, value.getBoolean());
	}
};
oFF.RsGoogleChartRenderer.prototype.addRows = function(rowsAxis, rows, rs)
{
	let tuplesRows = rowsAxis.getTuplesCount();
	rowsAxis.setTupleCursorBeforeStart();
	for (let tupleIndex = 0; tupleIndex < tuplesRows; tupleIndex++)
	{
		rowsAxis.nextTuple();
		if (!this.isResultRow(rowsAxis))
		{
			let rowStructure = rows.addNewStructure();
			let list = rowStructure.putNewList(oFF.GoogleConstants.K_C);
			while (rowsAxis.hasNextTupleElement())
			{
				rowsAxis.nextTupleElement();
				this.addRowCell(list, oFF.XStringValue.create(this.getMemberName(rowsAxis)));
			}
			for (let cellIndex = 0; cellIndex < rs.getDataColumns(); cellIndex++)
			{
				let dataCell = rs.getDataCell(cellIndex, tupleIndex);
				this.addRowCell(list, this.getCellValue(dataCell));
			}
		}
	}
};
oFF.RsGoogleChartRenderer.prototype.getCellValue = function(dataCell)
{
	let valueException = dataCell.getValueException();
	if (valueException === oFF.ValueException.NULL_VALUE || valueException === oFF.ValueException.UNDEFINED)
	{
		return oFF.XStringValue.create(null);
	}
	if (valueException === oFF.ValueException.ZERO)
	{
		return oFF.XIntegerValue.create(0);
	}
	return dataCell.getXValue();
};
oFF.RsGoogleChartRenderer.prototype.getMemberName = function(axis)
{
	let member = null;
	while (axis.hasNextFieldValue())
	{
		let fieldValue = axis.nextFieldValue();
		if (oFF.isNull(member) || oFF.PresentationType.isTextPresentation(fieldValue.getField().getPresentationType()))
		{
			member = fieldValue.getValue().getStringRepresentation();
		}
	}
	return member;
};
oFF.RsGoogleChartRenderer.prototype.isResultRow = function(rowsAxis)
{
	if (rowsAxis.hasNextTupleElement())
	{
		rowsAxis.nextTupleElement();
		if (rowsAxis.getDimensionMemberType() === oFF.MemberType.RESULT)
		{
			return true;
		}
		rowsAxis.setTupleElementCursorBeforeStart();
	}
	return false;
};
oFF.RsGoogleChartRenderer.prototype.render = function(type, rs)
{
	let structure = oFF.PrFactory.createStructure();
	let vizDef = rs.getQueryModel().getVizManager().getVizDef();
	if (oFF.notNull(vizDef) && vizDef.containsKey(oFF.VizDefConstants.K_CHART) && rs.getAvailableDataCellCount() > 0)
	{
		let rowsAxis = rs.getCursorRowsAxis();
		let columnsAxis = rs.getCursorColumnsAxis();
		let dataStructure = structure.putNewStructure(oFF.GoogleConstants.K_DATA);
		let cols = dataStructure.putNewList(oFF.GoogleConstants.K_COLS);
		let rows = dataStructure.putNewList(oFF.GoogleConstants.K_ROWS);
		this.addHeaderForDimensionColumns(rowsAxis, cols);
		this.addHeaderForMeasureColumns(columnsAxis, cols);
		this.addRows(rowsAxis, rows, rs);
		structure.put(oFF.GoogleConstants.K_OPTIONS, oFF.RsGoogleChartConfig.createOptions(vizDef));
		structure.put(oFF.GoogleConstants.K_METADATA, oFF.RsGoogleChartConfig.createMetadata(vizDef, cols));
	}
	return structure;
};
oFF.RsGoogleChartRenderer.prototype.renderVisualizationWithResultSet = function(visualizationDefinition, cursorResultSet)
{
	return this.render(visualizationDefinition.getSemanticBindingType(), cursorResultSet);
};

oFF.GoogleChart = function() {};
oFF.GoogleChart.prototype = new oFF.XObject();
oFF.GoogleChart.prototype._ff_c = "GoogleChart";

oFF.GoogleChart.ANIMATION_DURATION = 750;
oFF.GoogleChart.HEIGHT = 500;
oFF.GoogleChart.HEIGHT_CHART_AREA = 380;
oFF.GoogleChart.LEGEND_MAX_LINES = 3;
oFF.GoogleChart.WIDTH = 600;
oFF.GoogleChart.prototype.createMetadata = function(columns)
{
	let structure = oFF.PrFactory.createStructure();
	structure.putString(oFF.GoogleConstants.K_CHART_TYPE, this.getChartName());
	let cols = structure.putNewList(oFF.GoogleConstants.K_COLS);
	for (let i = 0; i < columns.size(); i++)
	{
		cols.addInteger(i);
		let columnType = columns.getStructureAt(i).getStringByKey(oFF.GoogleConstants.K_TYPE);
		if (oFF.XString.isEqual(columnType, oFF.GoogleConstants.K_NUMBER))
		{
			let colAnnotation = cols.addNewStructure();
			colAnnotation.putString(oFF.GoogleConstants.K_ROLE, oFF.GoogleConstants.V_ROLE_ANNOTATION);
			colAnnotation.putString(oFF.GoogleConstants.K_TYPE, oFF.GoogleConstants.V_TYPE_STRING);
			colAnnotation.putString(oFF.GoogleConstants.K_CALC, oFF.GoogleConstants.V_CALC_STRINGIFY);
			colAnnotation.putInteger(oFF.GoogleConstants.K_SOURCE_COLUMN, i);
		}
	}
	return structure;
};
oFF.GoogleChart.prototype.createOptions = function(vizDef)
{
	let structure = oFF.PrFactory.createStructure();
	let vizDefChart = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
	let vdProperties = vizDefChart.getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
	structure.putString(oFF.GoogleConstants.K_TITLE, vizDefChart.getStringByKeyExt(oFF.VizDefConstants.K_TITLE, ""));
	structure.putNewStructure(oFF.GoogleConstants.K_SERIES);
	let vdLegend = vdProperties.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
	let vdLegendLabel = vdLegend.getStructureByKey(oFF.VizDefConstants.K_LABEL);
	let vdLegendLabelStyle = vdLegendLabel.getStructureByKey(oFF.VizDefConstants.K_STYLE);
	let vdLegendGroup = vdProperties.getStructureByKey(oFF.VizDefConstants.K_LEGEND_GROUP);
	let vdLegendGroupLayout = vdLegendGroup.getStructureByKey(oFF.VizDefConstants.K_LAYOUT);
	let vdLegendGroupPosition = vdLegendGroupLayout.getStringByKeyExt(oFF.VizDefConstants.K_POSITION, oFF.GoogleConstants.V_POSITION_NONE);
	let legend = structure.putNewStructure(oFF.GoogleConstants.K_LEGEND);
	this.setTextStyle(legend, vdLegendLabelStyle);
	legend.putString(oFF.GoogleConstants.K_POSITION, vdLegendGroupPosition);
	legend.putString(oFF.GoogleConstants.K_ALIGNMENT, oFF.GoogleConstants.V_CENTER);
	legend.putInteger(oFF.GoogleConstants.K_MAX_LINES, oFF.GoogleChart.LEGEND_MAX_LINES);
	structure.putInteger(oFF.GoogleConstants.K_WIDTH, oFF.GoogleChart.WIDTH);
	structure.putInteger(oFF.GoogleConstants.K_HEIGHT, oFF.GoogleChart.HEIGHT);
	let chartArea = structure.putNewStructure(oFF.GoogleConstants.K_CHART_AREA);
	chartArea.putInteger(oFF.GoogleConstants.K_HEIGHT, oFF.GoogleChart.HEIGHT_CHART_AREA);
	let animation = structure.putNewStructure(oFF.GoogleConstants.K_ANIMATION);
	animation.putBoolean(oFF.GoogleConstants.K_STARTUP, true);
	animation.putInteger(oFF.GoogleConstants.K_DURATION, oFF.GoogleChart.ANIMATION_DURATION);
	animation.putString(oFF.GoogleConstants.K_EASING, oFF.GoogleConstants.V_EASING_LINEAR);
	let vdPlotArea = vdProperties.getStructureByKey(oFF.VizDefConstants.K_PLOT_AREA);
	let vdPlotAreaColumnLabel = vdPlotArea.getStructureByKey(oFF.VizDefConstants.K_STACK_COLUMN_LABEL);
	let vdPlotAreaColumnLabelStyle = vdPlotAreaColumnLabel.getStructureByKey(oFF.VizDefConstants.K_STYLE);
	let annotations = structure.putNewStructure(oFF.GoogleConstants.K_ROLE_ANNOTATIONS);
	annotations.putBoolean(oFF.GoogleConstants.K_HIGH_CONTRAST, true);
	this.setTextStyle(annotations, vdPlotAreaColumnLabelStyle);
	let stem = annotations.putNewStructure(oFF.GoogleConstants.K_STEM);
	stem.putInteger(oFF.GoogleConstants.K_LENGTH, 2);
	let tooltip = structure.putNewStructure(oFF.GoogleConstants.K_TOOLTIP);
	this.setTextStyle(tooltip, vdPlotAreaColumnLabelStyle);
	this.addChartSpecificOptions(structure, vizDef);
	return structure;
};
oFF.GoogleChart.prototype.getAxisReferenceLines = function(vizDef, axisName)
{
	let vdAnalyticObjects = vizDef.getStructureByKey(oFF.VizDefConstants.K_ANALYTIC_OBJECTS);
	let vdReferenceLines = vdAnalyticObjects.getListByKey(oFF.VizDefConstants.K_REFERENCELINES);
	if (oFF.notNull(vdReferenceLines))
	{
		for (let i = 0; i < vdReferenceLines.size(); i++)
		{
			let feed = vdReferenceLines.getStructureAt(i);
			if (oFF.XString.isEqual(feed.getStringByKey(oFF.VizDefConstants.K_FEED), axisName))
			{
				let markers = feed.getListByKey(oFF.VizDefConstants.K_MARKERS);
				if (!oFF.PrUtils.isListEmpty(markers))
				{
					return markers;
				}
			}
		}
	}
	return null;
};
oFF.GoogleChart.prototype.getOppositeAxis = function(axisName, vdProperties)
{
	if (oFF.XString.isEqual(axisName, oFF.VizDefConstants.K_CATEGORY_AXIS))
	{
		return vdProperties.getStructureByKey(oFF.VizDefConstants.K_VALUE_AXIS);
	}
	return vdProperties.getStructureByKey(oFF.VizDefConstants.K_CATEGORY_AXIS);
};
oFF.GoogleChart.prototype.isTicksVisible = function(vdAxis)
{
	let vdAxisTick = vdAxis.getStructureByKey(oFF.VizDefConstants.K_AXIS_TICK);
	return oFF.notNull(vdAxisTick) && vdAxisTick.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, false);
};
oFF.GoogleChart.prototype.setAxisStyle = function(axis, vizDef, axisName, showLabels)
{
	let vdChart = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
	let vdProperties = vdChart.getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
	let vdAxis = vdProperties.getStructureByKey(axisName);
	let vdAxisLabel = vdAxis.getStructureByKey(oFF.VizDefConstants.K_LABEL);
	let vdOtherAxis = this.getOppositeAxis(axisName, vdProperties);
	this.setTextStyle(axis, vdAxisLabel.getStructureByKey(oFF.VizDefConstants.K_STYLE));
	if (!showLabels)
	{
		axis.putString(oFF.GoogleConstants.K_TEXT_POSITION, oFF.GoogleConstants.V_POSITION_NONE);
	}
	let vdAxisLine = vdOtherAxis.getStructureByKey(oFF.VizDefConstants.K_AXIS_LINE);
	if (oFF.notNull(vdAxisLine) && vdAxisLine.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, true))
	{
		axis.putInteger(oFF.GoogleConstants.K_BASELINE, 0);
	}
	let vdAxisReferenceLines = this.getAxisReferenceLines(vizDef, axisName);
	if (oFF.notNull(vdAxisReferenceLines))
	{
		let ticks = axis.putNewList(oFF.GoogleConstants.K_TICKS);
		for (let i = 0; i < vdAxisReferenceLines.size(); i++)
		{
			ticks.addString(vdAxisReferenceLines.getStructureAt(i).getStringByKey(oFF.VizDefConstants.K_VALUE));
		}
	}
	else if (!this.isTicksVisible(vdOtherAxis))
	{
		axis.putNewList(oFF.GoogleConstants.K_TICKS);
	}
};
oFF.GoogleChart.prototype.setTextStyle = function(structure, vizDefStyle)
{
	let textStyle = structure.putNewStructure(oFF.GoogleConstants.K_TEXT_STYLE);
	textStyle.putString(oFF.GoogleConstants.K_FONT_NAME, vizDefStyle.getStringByKeyExt(oFF.VizDefConstants.K_FONT_FAMILY, ""));
	textStyle.putString(oFF.GoogleConstants.K_COLOR, vizDefStyle.getStringByKeyExt(oFF.VizDefConstants.K_COLOR, "rgb(0,0,0)"));
	let fontSize = vizDefStyle.getStringByKey(oFF.VizDefConstants.K_FONT_SIZE);
	if (oFF.notNull(fontSize))
	{
		textStyle.putString(oFF.GoogleConstants.K_FONT_SIZE, oFF.XString.replace(fontSize, "px", ""));
	}
	let fontWeight = vizDefStyle.getStringByKey(oFF.VizDefConstants.K_FONT_WEIGHT);
	if (oFF.XString.isEqual(fontWeight, oFF.VizDefConstants.V_FONT_WEIGHT_BOLD))
	{
		textStyle.putBoolean(oFF.GoogleConstants.K_BOLD, true);
	}
};

oFF.RsHiChartRenderHelper = function() {};
oFF.RsHiChartRenderHelper.prototype = new oFF.XObject();
oFF.RsHiChartRenderHelper.prototype._ff_c = "RsHiChartRenderHelper";

oFF.RsHiChartRenderHelper.checkChartTypePolar = function(chartType)
{
	return chartType === oFF.ChartType.RADAR || chartType === oFF.ChartType.PIE || chartType === oFF.ChartType.VARIABLE_PIE || chartType === oFF.ChartType.DOUGHNUT;
};
oFF.RsHiChartRenderHelper.create = function(type, rs)
{
	let helper = null;
	let userPrefrence = null;
	if (oFF.notNull(rs))
	{
		let intermediatechartType = null;
		let vizDef = rs.getQueryModel().getVizManager().getVizDef();
		let globalDef = rs.getQueryModel().getVizManager().getGlobalDef();
		let chartType = oFF.XString.toLowerCase(type.getName());
		let secondChart = null;
		let isPolar = false;
		let isTimeseries = false;
		let innerRadius = "0%";
		let stackingType = null;
		if (oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_COMB_BCL))
		{
			chartType = oFF.VizDefConstants.V_CHART_TYPE_COLUMN;
			secondChart = oFF.VizDefConstants.K_LINE;
		}
		else if (oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_RADAR))
		{
			chartType = oFF.VizDefConstants.K_LINE;
			isPolar = true;
		}
		let inverted = false;
		if (oFF.notNull(vizDef))
		{
			let chart = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
			userPrefrence = vizDef.getStructureByKey(oFF.VizDefConstants.K_USER_PREFERENCES);
			if (oFF.notNull(chart))
			{
				intermediatechartType = chart.getStringByKey(oFF.VizDefConstants.K_TYPE);
				if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.V_CHART_TYPE_BAR) || oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.V_STACKED_BAR))
				{
					inverted = true;
				}
			}
			let chartPropertiesGeneral;
			let chartProperties = chart.getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
			if (oFF.notNull(chartProperties))
			{
				chartPropertiesGeneral = chartProperties.getStructureByKey(oFF.VizDefConstants.K_GENERAL);
				if (oFF.notNull(chartPropertiesGeneral))
				{
					if (chartPropertiesGeneral.containsKey(oFF.VizDefConstants.K_INVERTED))
					{
						inverted = chartPropertiesGeneral.getBooleanByKey(oFF.VizDefConstants.K_INVERTED);
					}
					if (chartPropertiesGeneral.containsKey(oFF.VizDefConstants.K_ORIENTATION))
					{
						inverted = oFF.XString.isEqual(chartPropertiesGeneral.getStringByKey(oFF.VizDefConstants.K_ORIENTATION), oFF.VizDefConstants.V_HORIZONTAL);
					}
					stackingType = chartPropertiesGeneral.getStringByKey(oFF.VizDefConstants.K_FULL_STACKING);
				}
			}
			if (oFF.notNull(userPrefrence))
			{
				chartPropertiesGeneral = userPrefrence.getStructureByKey(oFF.VizDefConstants.K_GENERAL);
				if (oFF.notNull(chartPropertiesGeneral))
				{
					if (chartPropertiesGeneral.containsKey(oFF.VizDefConstants.K_INVERTED))
					{
						inverted = chartPropertiesGeneral.getBooleanByKey(oFF.VizDefConstants.K_INVERTED);
					}
					if (chartPropertiesGeneral.containsKey(oFF.VizDefConstants.K_ORIENTATION))
					{
						inverted = oFF.XString.isEqual(chartPropertiesGeneral.getStringByKey(oFF.VizDefConstants.K_ORIENTATION), oFF.VizDefConstants.V_HORIZONTAL);
					}
					if (chartPropertiesGeneral.containsKey(oFF.VizDefConstants.K_FULL_STACKING))
					{
						stackingType = chartPropertiesGeneral.getStringByKey(oFF.VizDefConstants.K_FULL_STACKING);
					}
				}
			}
			if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_MARIMEKKO))
			{
				chartType = oFF.VizDefConstants.K_VARIWIDE;
				stackingType = oFF.VizDefConstants.V_NORMAL;
				inverted = false;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_BAR_COLUMN))
			{
				stackingType = null;
				if (!inverted)
				{
					chartType = oFF.VizDefConstants.V_CHART_TYPE_COLUMN;
				}
				else
				{
					chartType = oFF.VizDefConstants.V_CHART_TYPE_BAR;
				}
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.V_TYPE_CHART_DONUT))
			{
				stackingType = null;
				inverted = false;
				chartType = oFF.VizDefConstants.K_PIE;
				innerRadius = "50%";
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_SCATTER_PLOT))
			{
				stackingType = null;
				inverted = false;
				chartType = oFF.VizDefConstants.K_SCATTER;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_RADAR))
			{
				stackingType = null;
				inverted = false;
				chartType = oFF.VizDefConstants.K_LINE;
				isPolar = true;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_METRIC))
			{
				stackingType = null;
				inverted = false;
				chartType = oFF.VizDefConstants.K_SOLID_GAUGE;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_AREA))
			{
				inverted = false;
				stackingType = oFF.VizDefConstants.V_NORMAL;
				chartType = oFF.VizDefConstants.K_AREA;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_STACKED_BAR) || oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_STACKED_COLUMN))
			{
				if (oFF.isNull(stackingType))
				{
					stackingType = oFF.VizDefConstants.V_NORMAL;
				}
				if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_STACKED_COLUMN) && !inverted)
				{
					chartType = oFF.VizDefConstants.V_CHART_TYPE_COLUMN;
				}
				else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_STACKED_BAR) && inverted)
				{
					chartType = oFF.VizDefConstants.V_CHART_TYPE_BAR;
				}
				else
				{
					chartType = oFF.VizDefConstants.V_CHART_TYPE_COLUMN;
				}
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_COMB_STACKED_BCL))
			{
				chartType = oFF.VizDefConstants.V_CHART_TYPE_COLUMN;
				secondChart = oFF.VizDefConstants.K_LINE;
				stackingType = oFF.VizDefConstants.V_NORMAL;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_COMB_BCL))
			{
				chartType = oFF.VizDefConstants.V_CHART_TYPE_COLUMN;
				secondChart = oFF.VizDefConstants.K_LINE;
				stackingType = null;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT))
			{
				chartType = oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT;
				stackingType = null;
				inverted = false;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_TIME_SERIES))
			{
				isTimeseries = true;
				chartType = oFF.VizDefConstants.K_LINE;
				stackingType = null;
				inverted = false;
			}
			else if (oFF.XString.isEqual(intermediatechartType, oFF.VizDefConstants.K_CLUSTER_BUBBLE))
			{
				chartType = oFF.VizDefConstants.K_PACKED_BUBBLE;
				stackingType = null;
				inverted = false;
			}
			else
			{
				chartType = oFF.XString.toLowerCase(vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getStringByKey(oFF.VizDefConstants.K_TYPE));
				stackingType = null;
				inverted = false;
			}
		}
		let isCombinationChart = !oFF.XString.isEqual(null, secondChart);
		let isColumn = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_COLUMN);
		let isBellcurve = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BELLCURVE);
		let isLine = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_LINE);
		let isBar = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BAR);
		let isSpline = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_SPLINE);
		let isArea = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_AREA);
		let isPie = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_PIE);
		let isWordcloud = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_WORDCLOUD);
		let isVariablepie = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_VARIPIE);
		let isVariwide = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_VARIWIDE);
		let isScatter = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_SCATTER);
		let isBubble = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BUBBLE);
		let isPackedBubble = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_PACKED_BUBBLE);
		let isHeatMap = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_HEATMAP);
		let isTreeMap = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_TREEMAP);
		let isBoxPlot = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT);
		let isMetric = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_SOLID_GAUGE);
		if (isLine || isBar || isSpline || isBellcurve || isColumn || isArea || isCombinationChart)
		{
			if (isTimeseries)
			{
				helper = new oFF.RsHiChartTimeSeriesHelper();
			}
			else
			{
				helper = new oFF.RsHiChartCategorialSeriesHelper();
			}
		}
		else if (isWordcloud)
		{
			helper = new oFF.RsHiChartWordcloudHelper();
		}
		else if (isPie || isVariablepie || isWordcloud)
		{
			helper = new oFF.RsHiChartPieHelper();
		}
		else if (isBoxPlot)
		{
			helper = new oFF.RsHiChartBoxplotHelper();
		}
		else if (isBubble || isScatter)
		{
			helper = new oFF.RsHiChartCorrelationHelper();
		}
		else if (isHeatMap)
		{
			helper = new oFF.RsHiChartHeatmapHelper();
		}
		else if (isTreeMap)
		{
			helper = new oFF.RsHiChartTreemapHelper();
		}
		else if (isMetric)
		{
			helper = new oFF.RsHiChartMetricHelper();
		}
		else if (isVariwide)
		{
			helper = new oFF.RsHiChartMarimekkoHelper();
		}
		else if (isPackedBubble)
		{
			helper = new oFF.RsHiChartClusterBubbleHelper();
		}
		else
		{
			helper = new oFF.RsHiChartUnsupportedHelper();
		}
		helper.setupBase(vizDef, globalDef, null, rs, chartType, secondChart, stackingType, innerRadius, isPolar, isCombinationChart, inverted);
		if (oFF.notNull(userPrefrence))
		{
			oFF.RsHiChartVizUserPrefrence.userPrefrence(helper.getChartData(), userPrefrence, chartType);
		}
	}
	return helper;
};
oFF.RsHiChartRenderHelper.createWithVisualizationDefinition = function(visualizationDefinition, cursorResultSet)
{
	let helper = null;
	let chartSetting = visualizationDefinition.getChartSetting();
	let chartType = oFF.ChartType.BAR;
	let chartOrientation = oFF.ChartOrientation.HORIZONTAL;
	let secondChartType = oFF.ChartType.NONE;
	let stackingType = oFF.ChartStackingType.NONE;
	if (oFF.notNull(chartSetting))
	{
		chartType = chartSetting.getChartType();
		if (chartType.isTypeOf(oFF.ChartType.BAR_COLUMN) && chartSetting.getChartType2() !== null)
		{
			secondChartType = chartSetting.getChartType2();
		}
		if (chartSetting.getChartOrientation() !== null)
		{
			chartOrientation = chartSetting.getChartOrientation();
		}
		stackingType = chartSetting.getChartStackingType();
	}
	if (oFF.notNull(cursorResultSet))
	{
		let chartTypeString = null;
		let secondChart = null;
		let isPolar;
		let innerRadius = "0%";
		let stackingTypeString = null;
		if (chartType === oFF.ChartType.VARIABLE_PIE || chartType === oFF.ChartType.VARI_WIDE)
		{
			stackingTypeString = oFF.VizDefConstants.V_NORMAL;
		}
		if (stackingType === oFF.ChartStackingType.NORMAL)
		{
			stackingTypeString = oFF.VizDefConstants.V_NORMAL;
		}
		else if (stackingType === oFF.ChartStackingType.PERCENT)
		{
			stackingTypeString = oFF.VizDefConstants.V_PERCENT;
		}
		if (!chartType.isTypeOf(oFF.ChartType.BAR_COLUMN) && chartType !== oFF.ChartType.LINE && chartType !== oFF.ChartType.AREA && chartType !== oFF.ChartType.VARI_WIDE && chartType !== oFF.ChartType.VARIABLE_PIE)
		{
			stackingTypeString = null;
		}
		chartTypeString = oFF.RsHiChartRenderHelper.unmapChartType(chartType, chartOrientation);
		if ((chartType === oFF.ChartType.LINE || chartType === oFF.ChartType.AREA || chartType === oFF.ChartType.POINT || chartType.isTypeOf(oFF.ChartType.BAR_COLUMN)) && (secondChartType === oFF.ChartType.LINE || secondChartType === oFF.ChartType.AREA || secondChartType === oFF.ChartType.POINT || secondChartType.isTypeOf(oFF.ChartType.BAR_COLUMN)))
		{
			secondChart = oFF.RsHiChartRenderHelper.unmapChartType(secondChartType, chartOrientation);
		}
		isPolar = oFF.RsHiChartRenderHelper.checkChartTypePolar(chartType) || chartSetting.isPolar();
		let inverted = chartOrientation === oFF.ChartOrientation.HORIZONTAL;
		let isCombinationChart = secondChartType !== oFF.ChartType.NONE;
		let isColumn = chartType.isTypeOf(oFF.ChartType.COLUMN) || chartType === oFF.ChartType.BAR_COLUMN && chartOrientation === oFF.ChartOrientation.VERTICAL;
		let isBellcurve = chartType === oFF.ChartType.BELL_CURVE;
		let isLine = chartType === oFF.ChartType.LINE || chartType === oFF.ChartType.TIME_SERIES;
		let isTimeseries = chartType === oFF.ChartType.TIME_SERIES || chartSetting.isTimeSeries();
		let isBar = chartType.isTypeOf(oFF.ChartType.BAR) || chartType === oFF.ChartType.BAR_COLUMN && chartOrientation === oFF.ChartOrientation.HORIZONTAL;
		let isSpline = chartType === oFF.ChartType.SPLINE;
		let isArea = chartType === oFF.ChartType.AREA;
		let isPie = chartType === oFF.ChartType.PIE || chartType === oFF.ChartType.DOUGHNUT;
		let isWordcloud = chartType === oFF.ChartType.WORD_CLOUD;
		let isVariablepie = chartType === oFF.ChartType.VARIABLE_PIE;
		let isVariwide = chartType === oFF.ChartType.VARI_WIDE;
		let isScatter = chartType === oFF.ChartType.SCATTER_PLOT;
		let isBubble = chartType === oFF.ChartType.BUBBLE;
		let isPackedBubble = chartType === oFF.ChartType.PACKED_BUBBLE;
		let isHeatMap = chartType === oFF.ChartType.HEAT_MAP;
		let isTreeMap = chartType === oFF.ChartType.TREE_MAP;
		let isBoxPlot = chartType === oFF.ChartType.BOX_PLOT;
		let isMetric = chartType === oFF.ChartType.METRIC;
		if (isLine || isBar || isSpline || isBellcurve || isColumn || isArea || isCombinationChart)
		{
			if (isTimeseries)
			{
				helper = new oFF.RsHiChartTimeSeriesHelper();
			}
			else
			{
				helper = new oFF.RsHiChartCategorialSeriesHelper();
			}
		}
		else if (isWordcloud)
		{
			helper = new oFF.RsHiChartWordcloudHelper();
		}
		else if (isPie || isVariablepie || isWordcloud)
		{
			helper = new oFF.RsHiChartPieHelper();
			if (chartType === oFF.ChartType.DOUGHNUT)
			{
				innerRadius = "50%";
			}
		}
		else if (isBoxPlot)
		{
			helper = new oFF.RsHiChartBoxplotHelper();
		}
		else if (isBubble || isScatter)
		{
			helper = new oFF.RsHiChartCorrelationHelper();
		}
		else if (isHeatMap)
		{
			helper = new oFF.RsHiChartHeatmapHelper();
		}
		else if (isTreeMap)
		{
			helper = new oFF.RsHiChartTreemapHelper();
		}
		else if (isMetric)
		{
			helper = new oFF.RsHiChartMetricHelper();
		}
		else if (isVariwide)
		{
			helper = new oFF.RsHiChartMarimekkoHelper();
		}
		else if (isPackedBubble)
		{
			helper = new oFF.RsHiChartClusterBubbleHelper();
		}
		else
		{
			helper = new oFF.RsHiChartUnsupportedHelper();
		}
		helper.setupBase(null, null, visualizationDefinition, cursorResultSet, chartTypeString, secondChart, stackingTypeString, innerRadius, isPolar, isCombinationChart, inverted);
	}
	return helper;
};
oFF.RsHiChartRenderHelper.unmapChartType = function(chartType, chartOrientation)
{
	let chartTypeString = null;
	if (chartType.isTypeOf(oFF.ChartType.BAR) || chartType === oFF.ChartType.BAR_COLUMN && chartOrientation === oFF.ChartOrientation.HORIZONTAL)
	{
		chartTypeString = oFF.VizDefConstants.V_CHART_TYPE_BAR;
	}
	else if (chartType.isTypeOf(oFF.ChartType.COLUMN) || chartType === oFF.ChartType.BAR_COLUMN && chartOrientation === oFF.ChartOrientation.VERTICAL)
	{
		chartTypeString = oFF.VizDefConstants.V_CHART_TYPE_COLUMN;
	}
	else if (chartType === oFF.ChartType.VARI_WIDE)
	{
		chartTypeString = oFF.VizDefConstants.K_VARIWIDE;
	}
	else if (chartType === oFF.ChartType.DOUGHNUT || chartType === oFF.ChartType.PIE)
	{
		chartTypeString = oFF.VizDefConstants.K_PIE;
	}
	else if (chartType === oFF.ChartType.SCATTER_PLOT)
	{
		chartTypeString = oFF.VizDefConstants.K_SCATTER;
	}
	else if (chartType === oFF.ChartType.BUBBLE)
	{
		chartTypeString = oFF.VizDefConstants.V_CHART_TYPE_BUBBLE;
	}
	else if (chartType === oFF.ChartType.RADAR)
	{
		chartTypeString = oFF.VizDefConstants.K_LINE;
	}
	else if (chartType === oFF.ChartType.METRIC)
	{
		chartTypeString = oFF.VizDefConstants.K_SOLID_GAUGE;
	}
	else if (chartType === oFF.ChartType.AREA)
	{
		chartTypeString = oFF.VizDefConstants.K_AREA;
	}
	else if (chartType === oFF.ChartType.BOX_PLOT)
	{
		chartTypeString = oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT;
	}
	else if (chartType === oFF.ChartType.TIME_SERIES)
	{
		chartTypeString = oFF.VizDefConstants.K_LINE;
	}
	else if (chartType === oFF.ChartType.LINE)
	{
		chartTypeString = oFF.VizDefConstants.K_LINE;
	}
	else if (chartType === oFF.ChartType.PACKED_BUBBLE)
	{
		chartTypeString = oFF.VizDefConstants.K_PACKED_BUBBLE;
	}
	else if (chartType === oFF.ChartType.WORD_CLOUD)
	{
		chartTypeString = oFF.VizDefConstants.K_WORDCLOUD;
	}
	else if (chartType === oFF.ChartType.BELL_CURVE)
	{
		chartTypeString = oFF.VizDefConstants.V_CHART_TYPE_BELLCURVE;
	}
	else if (chartType === oFF.ChartType.SPLINE)
	{
		chartTypeString = oFF.VizDefConstants.K_SPLINE;
	}
	else if (chartType === oFF.ChartType.VARIABLE_PIE)
	{
		chartTypeString = oFF.VizDefConstants.K_VARIPIE;
	}
	else if (chartType === oFF.ChartType.HEAT_MAP)
	{
		chartTypeString = oFF.VizDefConstants.K_HEATMAP;
	}
	else if (chartType === oFF.ChartType.TREE_MAP)
	{
		chartTypeString = oFF.VizDefConstants.K_TREEMAP;
	}
	else if (chartType === oFF.ChartType.BOX_PLOT)
	{
		chartTypeString = oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT;
	}
	return chartTypeString;
};
oFF.RsHiChartRenderHelper.prototype.m_chartType = null;
oFF.RsHiChartRenderHelper.prototype.m_colorIndex = 0;
oFF.RsHiChartRenderHelper.prototype.m_colors = null;
oFF.RsHiChartRenderHelper.prototype.m_globalDef = null;
oFF.RsHiChartRenderHelper.prototype.m_innerRadius = null;
oFF.RsHiChartRenderHelper.prototype.m_inverted = false;
oFF.RsHiChartRenderHelper.prototype.m_localization = null;
oFF.RsHiChartRenderHelper.prototype.m_polar = false;
oFF.RsHiChartRenderHelper.prototype.m_secondChart = null;
oFF.RsHiChartRenderHelper.prototype.m_showLegend = false;
oFF.RsHiChartRenderHelper.prototype.m_stackingType = null;
oFF.RsHiChartRenderHelper.prototype.m_theChartData = null;
oFF.RsHiChartRenderHelper.prototype.m_vizDef = null;
oFF.RsHiChartRenderHelper.prototype.addColorAndPattern = function(colorOrig, pattern, dataLayer, chartType, individualDataPoint)
{
	if (!individualDataPoint)
	{
		this.m_colorIndex++;
	}
	let color = colorOrig;
	if (oFF.XStringUtils.isNullOrEmpty(color) && this.m_colorIndex < this.m_colors.size())
	{
		color = this.m_colors.get(this.m_colorIndex);
	}
	if (!oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_LINE) && oFF.XStringUtils.isNotNullAndNotEmpty(pattern))
	{
		dataLayer.putStringNotNullAndNotEmpty(oFF.VizDefConstants.K_BORDER_COLOR, color);
		if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_NON_FILL))
		{
			if (individualDataPoint && !oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_AREA))
			{
				dataLayer.putString(oFF.VizDefConstants.K_COLOR, "#ffffff");
			}
			else
			{
				dataLayer.putStringNotNullAndNotEmpty(oFF.VizDefConstants.K_COLOR, color);
			}
		}
		else
		{
			let size = 0;
			let path = "";
			if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING1))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING1;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING1;
			}
			else if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING2))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING2;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING2;
			}
			else if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING3))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING3;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING3;
			}
			else if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING4))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING4;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING4;
			}
			else if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING5))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING5;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING5;
			}
			else if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING6))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING6;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING6;
			}
			else if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING7))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING7;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING7;
			}
			else if (oFF.XString.isEqual(pattern, oFF.VizDefConstants.K_PATTERN_HATCHING8))
			{
				size = oFF.VizDefConstants.V_PATTERN_SIZE_HATCHING8;
				path = oFF.VizDefConstants.V_PATTERN_PATH_HATCHING8;
			}
			if (size > 0 && oFF.XStringUtils.isNotNullAndNotEmpty(path))
			{
				let patternStructure = dataLayer.putNewStructure(oFF.VizDefConstants.K_COLOR).putNewStructure(oFF.VizDefConstants.K_PATTERN);
				patternStructure.putStringNotNullAndNotEmpty(oFF.VizDefConstants.K_COLOR, color);
				patternStructure.putInteger(oFF.VizDefConstants.K_WIDTH, size);
				patternStructure.putInteger(oFF.VizDefConstants.K_HEIGHT, size);
				patternStructure.putString(oFF.VizDefConstants.K_PATH, path);
			}
		}
	}
	else
	{
		dataLayer.putStringNotNullAndNotEmpty(oFF.VizDefConstants.K_COLOR, color);
	}
};
oFF.RsHiChartRenderHelper.prototype.addColorList = function()
{
	let colors = this.m_theChartData.putNewList(oFF.VizDefConstants.K_COLORS);
	for (let cls = 0; cls < this.m_colors.size(); cls++)
	{
		colors.addString(this.m_colors.get(cls));
	}
};
oFF.RsHiChartRenderHelper.prototype.getChartData = function()
{
	return this.m_theChartData;
};
oFF.RsHiChartRenderHelper.prototype.getChartType = function()
{
	return this.m_chartType;
};
oFF.RsHiChartRenderHelper.prototype.getColorAt = function(index)
{
	if (index > 0 && this.m_colors.size() > index)
	{
		return this.m_colors.get(index);
	}
	return null;
};
oFF.RsHiChartRenderHelper.prototype.getCurrentColor = function()
{
	return this.getColorAt(this.m_colorIndex);
};
oFF.RsHiChartRenderHelper.prototype.getGlobalDef = function()
{
	return this.m_globalDef;
};
oFF.RsHiChartRenderHelper.prototype.getInnerRadius = function()
{
	return this.m_innerRadius;
};
oFF.RsHiChartRenderHelper.prototype.getLocalizationProvider = function()
{
	return this.m_localization;
};
oFF.RsHiChartRenderHelper.prototype.getSecondChart = function()
{
	return this.m_secondChart;
};
oFF.RsHiChartRenderHelper.prototype.getStackingType = function()
{
	return this.m_stackingType;
};
oFF.RsHiChartRenderHelper.prototype.getVizDef = function()
{
	return this.m_vizDef;
};
oFF.RsHiChartRenderHelper.prototype.initializeColorList = function()
{
	this.m_colors = oFF.XList.create();
	let colorCollector = oFF.XList.create();
	if (oFF.notNull(this.m_vizDef))
	{
		let colorScheme = this.m_vizDef.getStructureByKey(oFF.VizDefConstants.K_COLOR_SCHEME);
		let colorSet = oFF.XHashSetOfString.create();
		let colorSync = this.m_globalDef.getStructureByKey(oFF.VizDefConstants.K_COLOR_SYNC);
		let colorBindingName = oFF.XStringBuffer.create();
		let chartDefBindings = this.m_vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getListByKey(oFF.VizDefConstants.K_BINDINGS);
		for (let i = 0; i < chartDefBindings.size(); ++i)
		{
			let binding = chartDefBindings.getStructureAt(i);
			if (oFF.XString.isEqual(binding.getStringByKey(oFF.VizDefConstants.K_FEED), oFF.VizDefConstants.K_COLOR))
			{
				let colorSource = binding.getListByKey(oFF.VizDefConstants.K_SOURCE);
				if (colorSource.size() > 0)
				{
					for (let j = 0; j < colorSource.size(); ++j)
					{
						if (colorSource.getStructureAt(j).hasStringByKey(oFF.VizDefConstants.K_ID))
						{
							if (colorBindingName.length() !== 0)
							{
								colorBindingName.append("/");
							}
							let curColorSource = colorSource.getStructureAt(j);
							if (curColorSource.containsKey(oFF.VizDefConstants.K_DIMENSION))
							{
								colorBindingName.append(curColorSource.getStringByKey(oFF.VizDefConstants.K_DIMENSION));
							}
							else
							{
								colorBindingName.append(curColorSource.getStringByKey(oFF.VizDefConstants.K_ID));
							}
						}
					}
				}
			}
		}
		if (!this.m_vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getBooleanByKeyExt(oFF.VizDefConstants.K_IS_EXCLUDE_COLOR_SYNC, false))
		{
			if (oFF.XStringUtils.isNotNullAndNotEmpty(colorBindingName.toString()) && oFF.XCollectionUtils.hasElements(colorSync))
			{
				let colorMap = colorSync.getStructureByKey(colorBindingName.toString());
				if (oFF.notNull(colorMap))
				{
					let curColors = colorMap.getListByKey(oFF.VizDefConstants.K_COLORS);
					for (let k = 0; k < curColors.size(); ++k)
					{
						colorCollector.add(curColors.getStringAt(k));
					}
				}
			}
		}
		if (oFF.XCollectionUtils.hasElements(colorScheme))
		{
			let palleteColors = colorScheme.getListByKey(oFF.VizDefConstants.K_PALETTE_COLORS);
			if (oFF.notNull(palleteColors))
			{
				for (let y = 0; y < palleteColors.size(); y++)
				{
					colorCollector.add(palleteColors.getStringAt(y));
				}
			}
		}
		if (colorCollector.size() < 5 && oFF.XCollectionUtils.hasElements(colorSync))
		{
			let colorKeys = colorSync.getKeysAsReadOnlyListSorted();
			for (let cki = 0; cki < colorKeys.size(); cki++)
			{
				let curColorKey = colorKeys.get(cki);
				if (!oFF.XString.isEqual(curColorKey, colorBindingName.toString()))
				{
					let colourMap = colorSync.getStructureByKey(curColorKey);
					if (oFF.notNull(colourMap))
					{
						let curColours = colourMap.getListByKey(oFF.VizDefConstants.K_COLORS);
						for (let z = 0; z < curColours.size(); ++z)
						{
							colorCollector.add(curColours.getStringAt(z));
						}
					}
				}
			}
		}
		if (colorCollector.size() < 5)
		{
			colorCollector.add(oFF.VizDefConstants.V_COLOR_1);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_2);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_3);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_4);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_5);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_6);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_7);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_8);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_9);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_10);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_11);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_12);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_13);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_14);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_15);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_16);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_17);
			colorCollector.add(oFF.VizDefConstants.V_COLOR_18);
		}
		colorSet.addAll(colorCollector);
		for (let cls = 0; cls < colorCollector.size(); cls++)
		{
			let curColor = colorCollector.get(cls);
			if (colorSet.contains(curColor))
			{
				colorSet.removeElement(curColor);
				this.m_colors.add(curColor);
			}
		}
	}
	else
	{
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_1);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_2);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_3);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_4);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_5);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_6);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_7);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_8);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_9);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_10);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_11);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_12);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_13);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_14);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_15);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_16);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_17);
		this.m_colors.add(oFF.VizDefConstants.V_COLOR_18);
	}
};
oFF.RsHiChartRenderHelper.prototype.isInverted = function()
{
	return this.m_inverted;
};
oFF.RsHiChartRenderHelper.prototype.isPolar = function()
{
	return this.m_polar;
};
oFF.RsHiChartRenderHelper.prototype.isResponsive = function()
{
	return true;
};
oFF.RsHiChartRenderHelper.prototype.isShowLegend = function()
{
	return this.m_showLegend;
};
oFF.RsHiChartRenderHelper.prototype.isUnsupported = function()
{
	return false;
};
oFF.RsHiChartRenderHelper.prototype.reiterateResultSet = function(columnAxis, rowAxis, rs) {};
oFF.RsHiChartRenderHelper.prototype.setShowLegend = function(showLegend)
{
	this.m_showLegend = showLegend;
};
oFF.RsHiChartRenderHelper.prototype.setupBase = function(vizDef, globalDef, visualizationDefinition, rs, chartType, secondChart, stackingType, innerRadius, isPolar, isCombinationChart, inverted)
{
	this.m_polar = isPolar;
	this.m_chartType = chartType;
	this.m_secondChart = secondChart;
	this.m_innerRadius = innerRadius;
	this.m_vizDef = vizDef;
	this.m_globalDef = globalDef;
	this.m_theChartData = oFF.PrFactory.createStructure();
	this.m_inverted = inverted;
	this.m_stackingType = stackingType;
	this.m_colorIndex = -1;
	this.m_localization = oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName("AuChartView");
	let isBar = oFF.XString.isEqual(this.m_chartType, oFF.VizDefConstants.V_CHART_TYPE_BAR);
	let scrollbarStruct = this.m_theChartData.putNewStructure(oFF.VizDefConstants.K_SCROLL_BAR);
	scrollbarStruct.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
	let chartTypeInfo = this.m_theChartData.putNewStructure(oFF.VizDefConstants.K_CHART);
	let topSpacing = 50;
	let rightSpacing = 50;
	let bottomSpacing = 50;
	let leftSpacing = 50;
	if (this.m_inverted && !isBar)
	{
		chartTypeInfo.putBoolean(oFF.VizDefConstants.K_INVERTED, true);
	}
	let spacingPrList = chartTypeInfo.putNewList(oFF.VizDefConstants.K_SPACING);
	spacingPrList.addInteger(topSpacing);
	spacingPrList.addInteger(rightSpacing);
	spacingPrList.addInteger(bottomSpacing);
	spacingPrList.addInteger(leftSpacing);
	if (isBar)
	{
		chartTypeInfo.putInteger(oFF.VizDefConstants.K_MARGIN_LEFT, 200);
	}
	chartTypeInfo.putBoolean(oFF.VizDefConstants.K_POLAR, isPolar);
	chartTypeInfo.putString(oFF.VizDefConstants.K_TYPE, chartType);
	chartTypeInfo.putBoolean(oFF.VizDefConstants.K_ANIMATION, false);
	let chartlang = this.m_theChartData.putNewStructure(oFF.VizDefConstants.K_LANG);
	chartlang.putString(oFF.VizDefConstants.K_DECIMAL_POINT, ",");
	chartlang.putString(oFF.VizDefConstants.K_THOUSANDS_SEP, ".");
	let backgroundColor = "rgba(0,0,0,0)";
	chartTypeInfo.putString(oFF.VizDefConstants.K_BACKGROUND_COLOR, backgroundColor);
	if (oFF.notNull(vizDef))
	{
		backgroundColor = vizDef.getStringByKey(oFF.VizDefConstants.K_BBACKGROUND_COLOR);
		if (oFF.notNull(backgroundColor))
		{
			if (oFF.XString.size(backgroundColor) > 0)
			{
				chartTypeInfo.putString(oFF.VizDefConstants.K_BACKGROUND_COLOR, backgroundColor);
			}
		}
	}
	let chartTypeInfostyle = chartTypeInfo.putNewStructure(oFF.VizDefConstants.K_STYLE);
	chartTypeInfostyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	let boost = this.m_theChartData.putNewStructure(oFF.VizDefConstants.K_BOOST);
	let credits = this.m_theChartData.putNewStructure(oFF.VizDefConstants.K_CREDITS);
	credits.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
	boost.putBoolean(oFF.VizDefConstants.K_USER_GPU_TRANSLATIONS, true);
	if (this.isUnsupported())
	{
		chartlang.putString(oFF.VizDefConstants.K_NO_DATA, "Chart not supported ");
		this.getChartData().putBoolean("fullscreenEnabled", false);
		return;
	}
	if (rs.hasErrors())
	{
		chartlang.putString(oFF.VizDefConstants.K_NO_DATA, "Olap query returned with errors ");
		this.getChartData().putBoolean(oFF.VizDefConstants.K_FULL_SCREEN_ENABLED, false);
		return;
	}
	oFF.RsHiChartVizUtils.vizProcessor(vizDef, chartTypeInfostyle, this.m_theChartData, chartType);
	if (this.isResponsive())
	{
		oFF.RsHiChartUtils.responsiveBuilder(chartType, this.m_theChartData);
	}
	let customFormatting = null;
	let feedMembers = null;
	if (oFF.notNull(vizDef))
	{
		let feedMembersFromVizDef = oFF.XHashMapByString.create();
		customFormatting = oFF.RsVizAxisExtractor.extractCustomFormatting(vizDef, globalDef);
		let feedMemberStructure = vizDef.getStructureByKey("feedMembers");
		oFF.XCollectionUtils.forEach(feedMemberStructure.getKeysAsReadOnlyList(), (feedKey) => {
			let feedValues = oFF.XStream.of(feedMemberStructure.getListByKey(feedKey)).filterNullValues().collect(oFF.XStreamCollector.toListOfString((fv) => {
				return fv.asString().getString();
			}));
			feedMembersFromVizDef.put(feedKey, feedValues);
		});
		feedMembers = feedMembersFromVizDef;
	}
	if (oFF.isNull(feedMembers) && oFF.notNull(visualizationDefinition))
	{
		feedMembers = oFF.RsVizAxisExtractor.getFeedMembersFromVisualizationDefinition(rs, visualizationDefinition);
	}
	if (oFF.isNull(feedMembers))
	{
		feedMembers = oFF.RsVizAxisExtractor.guessFeedMembers(rs, chartType, isCombinationChart);
	}
	let columnTuples = oFF.RsVizAxisExtractor.getTuplesFromColumnAxis(rs, feedMembers, customFormatting);
	let rowTuples = oFF.RsVizAxisExtractor.getTuplesFromRowAxis(rs, feedMembers, customFormatting);
	this.initializeColorList();
	this.prepareRendering();
	this.readResultSetData(columnTuples, rowTuples, rs);
	this.reiterateResultSet(columnTuples, rowTuples, rs);
	this.addColorList();
	oFF.RsHiChartVizUtils.addColorGradient(globalDef, vizDef, this.m_theChartData);
	oFF.RsHiChartVizUtils.checkShowLegend(vizDef, this.m_theChartData, chartType, this.isShowLegend());
	this.finishRendering();
};

oFF.RsMicroChartRenderer = function() {};
oFF.RsMicroChartRenderer.prototype = new oFF.XObject();
oFF.RsMicroChartRenderer.prototype._ff_c = "RsMicroChartRenderer";

oFF.RsMicroChartRenderer.create = function()
{
	return new oFF.RsMicroChartRenderer();
};
oFF.RsMicroChartRenderer.prototype.m_seriesFilColor = null;
oFF.RsMicroChartRenderer.prototype.m_valueAxis = null;
oFF.RsMicroChartRenderer.prototype.extractSeriesColorsFromVizDef = function(vizDef)
{
	this.m_seriesFilColor = oFF.PrStructure.create();
	if (oFF.notNull(vizDef))
	{
		let userPreferences = vizDef.getStructureByKey("userPreferences");
		if (oFF.notNull(userPreferences))
		{
			let series = userPreferences.getStructureByKey("series");
			if (oFF.notNull(series))
			{
				let fillColor = series.getStructureByKey("fillColor");
				if (oFF.notNull(fillColor))
				{
					let fillColorKeysIterator = fillColor.getKeysAsIterator();
					while (fillColorKeysIterator.hasNext())
					{
						let tmpFillColorKey = fillColorKeysIterator.next();
						let tmpColorList = fillColor.getListByKey(tmpFillColorKey);
						for (let a = 0; a < tmpColorList.size(); a++)
						{
							let tmpSecondaryList = tmpColorList.getListAt(a);
							if (tmpSecondaryList.size() > 0)
							{
								let tmpThirdList = tmpSecondaryList.getListAt(0);
								if (tmpThirdList.size() > 0)
								{
									let tmpColorMember = tmpThirdList.getStructureAt(0);
									if (oFF.notNull(tmpColorMember))
									{
										let tmpEntityId = tmpColorMember.getStructureByKey("entityId");
										if (oFF.notNull(tmpEntityId))
										{
											let memberId = tmpEntityId.getStringByKeyExt("id", null);
											if (oFF.notNull(memberId))
											{
												let validColor = oFF.XString.replace(tmpFillColorKey, "\"", "");
												this.m_seriesFilColor.putString(memberId, validColor);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
};
oFF.RsMicroChartRenderer.prototype.extractValueAxisFromVizDef = function(vizDef)
{
	if (oFF.notNull(vizDef))
	{
		let feedMembers = vizDef.getStructureByKey("feedMembers");
		if (oFF.notNull(feedMembers))
		{
			this.m_valueAxis = feedMembers.getListByKey("valueAxis");
		}
	}
};
oFF.RsMicroChartRenderer.prototype.generateColumns = function(rs, columnList)
{
	let colAxis = rs.getCursorColumnsAxis();
	colAxis.setTupleCursorBeforeStart();
	let colCounter = 0;
	while (colAxis.hasNextTuple())
	{
		let colLabel = null;
		let colVal = 0;
		let colDisplayVal = null;
		let colHierarchyKey = null;
		let debugAllFieldValues = "";
		colAxis.nextTuple();
		while (colAxis.hasNextTupleElement())
		{
			colAxis.nextTupleElement();
			while (colAxis.hasNextFieldValue())
			{
				colAxis.nextFieldValue();
				let pt = colAxis.getField().getPresentationType();
				let formattedValue = colAxis.getFormattedValue();
				debugAllFieldValues = oFF.XStringUtils.concatenate5(pt.getName(), ":", formattedValue, " - ", debugAllFieldValues);
				if (pt.isTypeOf(oFF.PresentationType.SHORT_TEXT) || pt.isTypeOf(oFF.PresentationType.LONG_TEXT) || pt.isTypeOf(oFF.PresentationType.MEDIUM_TEXT) || pt.isTypeOf(oFF.PresentationType.HIERARCHY_TEXT))
				{
					colLabel = formattedValue;
				}
				else if (oFF.isNull(colLabel) && pt.isTypeOf(oFF.PresentationType.DISPLAY_KEY))
				{
					colLabel = formattedValue;
				}
				if (pt.isTypeOf(oFF.PresentationType.HIERARCHY_KEY))
				{
					colHierarchyKey = formattedValue;
				}
			}
		}
		let tmpDataCell = rs.getDataCell(colCounter, 0);
		colVal = tmpDataCell.getDouble();
		colDisplayVal = tmpDataCell.getFormattedValue();
		colCounter++;
		let memberIndex = this.getIndexOfMember(colHierarchyKey);
		let columnColor = this.getColorForMember(colHierarchyKey);
		let tmpCol = oFF.PrStructure.create();
		if (memberIndex !== -1 && columnList.size() > memberIndex)
		{
			columnList.insert(memberIndex, tmpCol);
		}
		else
		{
			columnList.add(tmpCol);
		}
		tmpCol.putDouble("value", colVal);
		tmpCol.putString("displayValue", colDisplayVal);
		tmpCol.putString("label", colLabel);
		if (oFF.notNull(columnColor))
		{
			tmpCol.putString("color", columnColor);
		}
		tmpCol.putString("hierarchyKey", colHierarchyKey);
	}
};
oFF.RsMicroChartRenderer.prototype.getColorForMember = function(hierarchyKey)
{
	if (oFF.notNull(this.m_seriesFilColor) && this.m_seriesFilColor.size() > 0)
	{
		return this.m_seriesFilColor.getStringByKey(hierarchyKey);
	}
	return null;
};
oFF.RsMicroChartRenderer.prototype.getIndexOfMember = function(hierarchyKey)
{
	if (oFF.notNull(this.m_valueAxis))
	{
		return this.m_valueAxis.getIndex(oFF.PrString.createWithValue(hierarchyKey));
	}
	return -1;
};
oFF.RsMicroChartRenderer.prototype.render = function(type, rs)
{
	let vizDef = rs.getQueryModel().getVizManager().getVizDef();
	let globalDef = rs.getQueryModel().getVizManager().getGlobalDef();
	let chartJson = oFF.PrFactory.createStructure();
	if (oFF.notNull(vizDef))
	{
		let chartDef = vizDef.getStructureByKey("chart");
		if (oFF.notNull(chartDef))
		{
			if (oFF.XString.isEqual(chartDef.getStringByKey("type"), "barcolumn"))
			{
				this.renderColumnChart(rs, chartJson, vizDef);
			}
		}
		chartJson.put("vizDef", vizDef);
		chartJson.put("globalDef", globalDef);
	}
	else
	{
		this.renderColumnChart(rs, chartJson, null);
	}
	return chartJson;
};
oFF.RsMicroChartRenderer.prototype.renderColumnChart = function(rs, chartJson, vizDef)
{
	chartJson.putString("chart", "Column");
	chartJson.putBoolean("allowColumnLabels", true);
	let columnList = chartJson.putNewList("columns");
	this.extractValueAxisFromVizDef(vizDef);
	this.extractSeriesColorsFromVizDef(vizDef);
	this.generateColumns(rs, columnList);
};
oFF.RsMicroChartRenderer.prototype.renderVisualizationWithResultSet = function(visualizationDefinition, cursorResultSet)
{
	return this.render(visualizationDefinition.getSemanticBindingType(), cursorResultSet);
};

oFF.RsVizAxis = function() {};
oFF.RsVizAxis.prototype = new oFF.XObject();
oFF.RsVizAxis.prototype._ff_c = "RsVizAxis";

oFF.RsVizAxis.create = function()
{
	let newInstance = new oFF.RsVizAxis();
	newInstance.m_numberFormatingInfosByFeed = oFF.XHashMapByString.create();
	newInstance.m_elements = oFF.XList.create();
	newInstance.m_availableFeedTypes = oFF.XHashSetOfString.create();
	return newInstance;
};
oFF.RsVizAxis.prototype.m_availableFeedTypes = null;
oFF.RsVizAxis.prototype.m_elements = null;
oFF.RsVizAxis.prototype.m_numberFormatingInfosByFeed = null;
oFF.RsVizAxis.prototype.m_numberFormattingInfo = null;
oFF.RsVizAxis.prototype.addElement = function(element)
{
	this.m_elements.add(element);
	let availableFeedTypes = element.getAvailableFeedTypes();
	this.m_availableFeedTypes.addAll(availableFeedTypes);
	let newNumberFormattingInfo = element.getNumberFormattingInfo();
	if (oFF.isNull(this.m_numberFormattingInfo) || this.m_numberFormattingInfo.isUseFormattingFromDataCell())
	{
		this.m_numberFormattingInfo = newNumberFormattingInfo;
	}
	let feedTypeIterator = availableFeedTypes.getIterator();
	while (feedTypeIterator.hasNext())
	{
		let curFeedType = feedTypeIterator.next();
		let curNumberFormattingInfo = this.m_numberFormatingInfosByFeed.getByKey(curFeedType);
		if (oFF.isNull(curNumberFormattingInfo) || curNumberFormattingInfo.isUseFormattingFromDataCell())
		{
			this.m_numberFormatingInfosByFeed.put(curFeedType, newNumberFormattingInfo);
		}
	}
};
oFF.RsVizAxis.prototype.getCategories = function(unique, includeTotals, feedSelector)
{
	let list = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(feedSelector))
	{
		list.add(feedSelector);
	}
	let resultList = oFF.XList.create();
	let keyResult = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let categories = this.m_elements.get(i).getCategories(list);
		let prettyKeyResult = this.m_elements.get(i).getPrettyKeyText(list);
		if (oFF.XCollectionUtils.hasElements(categories))
		{
			if (!unique || !keyResult.contains(prettyKeyResult) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				resultList.add(categories);
				keyResult.add(prettyKeyResult);
			}
		}
	}
	return resultList;
};
oFF.RsVizAxis.prototype.getCategoryObjects = function(unique, includeTotals, feedSelector)
{
	let list = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(feedSelector))
	{
		list.add(feedSelector);
	}
	let resultList = oFF.XList.create();
	let keyResult = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let categories = this.m_elements.get(i).getCategoriesObjects(list);
		let prettyKeyResult = this.m_elements.get(i).getPrettyKeyText(list);
		if (oFF.XCollectionUtils.hasElements(categories))
		{
			if (!unique || !keyResult.contains(prettyKeyResult) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				resultList.add(categories);
				keyResult.add(prettyKeyResult);
			}
		}
	}
	return resultList;
};
oFF.RsVizAxis.prototype.getDateList = function()
{
	let i = 0;
	let fallbackLevel = 0;
	let dateFound = false;
	for (; fallbackLevel < 4; fallbackLevel++)
	{
		let result = oFF.XList.create();
		for (i = 0; i < this.m_elements.size(); i++)
		{
			let curDate = this.m_elements.get(i).getDate(fallbackLevel);
			if (oFF.notNull(curDate))
			{
				dateFound = true;
			}
			result.add(curDate);
		}
		if (dateFound)
		{
			return result;
		}
	}
	return null;
};
oFF.RsVizAxis.prototype.getDecimalPlaces = function(baseFeed)
{
	let selectedNumberFormattingInfo = this.m_numberFormatingInfosByFeed.getByKey(baseFeed);
	if (oFF.notNull(selectedNumberFormattingInfo))
	{
		return selectedNumberFormattingInfo.getMaxDecimalPlaces();
	}
	return oFF.notNull(this.m_numberFormattingInfo) ? this.m_numberFormattingInfo.getMaxDecimalPlaces() : 0;
};
oFF.RsVizAxis.prototype.getDimensionsForFeed = function(feed)
{
	let list = oFF.XList.create();
	list.add(feed);
	return this.getDimensionsForFeeds(list);
};
oFF.RsVizAxis.prototype.getDimensionsForFeeds = function(feeds)
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let subDimensions = this.m_elements.get(i).getDimensionTextsForFeeds(feeds);
		for (let j = 0; j < subDimensions.size(); j++)
		{
			if (!result.contains(subDimensions.get(j)))
			{
				result.add(subDimensions.get(j));
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getExtendedPrettyNames = function(unique, includeTotals)
{
	return this.getExtendedPrettyNamesForFeed(unique, includeTotals, null, null);
};
oFF.RsVizAxis.prototype.getExtendedPrettyNamesForFeed = function(unique, includeTotals, feedSelector, extensions)
{
	let list = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(feedSelector))
	{
		list.add(feedSelector);
	}
	return this.getExtendedPrettyNamesForFeeds(unique, includeTotals, list, extensions);
};
oFF.RsVizAxis.prototype.getExtendedPrettyNamesForFeeds = function(unique, includeTotals, feedSelectorOrig, extensions)
{
	let feedSelector = oFF.XList.create();
	feedSelector.addAll(feedSelectorOrig);
	let availableFeedIterator;
	if (oFF.XCollectionUtils.hasElements(extensions))
	{
		availableFeedIterator = extensions.getIterator();
	}
	else
	{
		availableFeedIterator = this.m_availableFeedTypes.getIterator();
	}
	while (availableFeedIterator.hasNext())
	{
		let feed = availableFeedIterator.next();
		if (!feedSelectorOrig.contains(feed) && this.getPrettyNamesForFeed(true, includeTotals, feed).size() > 1)
		{
			feedSelector.add(feed);
		}
	}
	return this.getPrettyNamesForFeeds(unique, includeTotals, feedSelector);
};
oFF.RsVizAxis.prototype.getFeedDimensionTuple = function(selectorList)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let dimensionNames = this.m_elements.get(i).getDimensionNamesForFeeds(selectorList);
		let resultBuffer = oFF.XStringBuffer.create();
		for (let j = 0; j < dimensionNames.size(); j++)
		{
			resultBuffer.append(dimensionNames.get(j));
			resultBuffer.append("/");
		}
		let resultString = resultBuffer.toString();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(resultString))
		{
			return oFF.XString.substring(resultString, 0, oFF.XString.size(resultString) - 1);
		}
	}
	return "";
};
oFF.RsVizAxis.prototype.getFormattedDateList = function()
{
	let result = oFF.XList.create();
	let i = 0;
	let dateFound = false;
	for (i = 0; i < this.m_elements.size(); i++)
	{
		let curDate = this.m_elements.get(i).getFormattedDate();
		if (oFF.notNull(curDate))
		{
			dateFound = true;
		}
		result.add(curDate);
	}
	if (dateFound)
	{
		return result;
	}
	return null;
};
oFF.RsVizAxis.prototype.getFormattedNames = function(unique, includeTotals)
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let prettyResult = this.m_elements.get(i).getFormattedText(null);
		if (oFF.XStringUtils.isNullOrEmpty(prettyResult))
		{
			prettyResult = this.m_elements.get(i).getFormattedDefaultText();
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(prettyResult))
		{
			if (!unique || !result.contains(prettyResult) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				result.add(prettyResult);
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getFormattedNamesForFeed = function(unique, includeTotals, feedSelector)
{
	let list = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(feedSelector))
	{
		list.add(feedSelector);
	}
	return this.getFormattedNamesForFeeds(unique, includeTotals, list);
};
oFF.RsVizAxis.prototype.getFormattedNamesForFeeds = function(unique, includeTotals, feedSelector)
{
	let result = oFF.XList.create();
	let keyResult = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let prettyResult = this.m_elements.get(i).getFormattedText(feedSelector);
		let prettyKeyResult = this.m_elements.get(i).getPrettyKeyText(feedSelector);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(prettyResult))
		{
			if (!unique || !keyResult.contains(prettyKeyResult) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				result.add(prettyResult);
				keyResult.add(prettyKeyResult);
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getFormattedValue = function(baseFeed, feedTuple, dataCell)
{
	let fallBackFormattingInfo = this.m_numberFormatingInfosByFeed.getByKey(baseFeed);
	return oFF.RsVizAxisExtractor.getFormattedValue(dataCell, feedTuple.getNumberFormattingInfo(), fallBackFormattingInfo);
};
oFF.RsVizAxis.prototype.getIndicesByFeedOrder = function(feedSelector)
{
	let list = oFF.XList.create();
	for (let h = 0; h < feedSelector.size(); h++)
	{
		let currentFeed = feedSelector.get(h);
		let currentBorder = list.size();
		for (let i = 0; i < this.m_elements.size(); i++)
		{
			let currentElement = this.m_elements.get(i);
			if (currentElement.isSelectedByString(currentFeed))
			{
				let j = list.size();
				while (j > currentBorder && currentElement.compareTo(this.m_elements.get(list.get(j - 1).getInteger())) < 0)
				{
					j--;
				}
				list.insert(j, oFF.XIntegerValue.create(i));
			}
		}
	}
	return list;
};
oFF.RsVizAxis.prototype.getIndicesGroupedByFeed = function(groupingFeed)
{
	let map = oFF.XHashMapByString.create();
	for (let i = 0; i < this.getTuplesCount(); i++)
	{
		let currentTuple = this.getTupleAt(i);
		let currentGroupingFeed = currentTuple.getPrettyText(groupingFeed);
		if (!map.containsKey(currentGroupingFeed))
		{
			map.put(currentGroupingFeed, oFF.XList.create());
		}
		map.getByKey(currentGroupingFeed).add(oFF.XIntegerValue.create(i));
	}
	return map;
};
oFF.RsVizAxis.prototype.getIndicesGroupedByFeedAndOrdered = function(groupingFeed, orderingFeed)
{
	let map = oFF.XHashMapByString.create();
	let list = this.getIndicesByFeedOrder(orderingFeed);
	for (let i = 0; i < list.size(); i++)
	{
		let currentIndex = list.get(i);
		let currentTuple = this.getTupleAt(currentIndex.getInteger());
		let currentGroupingFeed = currentTuple.getPrettyText(groupingFeed);
		if (!map.containsKey(currentGroupingFeed))
		{
			map.put(currentGroupingFeed, oFF.XList.create());
		}
		map.getByKey(currentGroupingFeed).add(currentIndex);
	}
	return map;
};
oFF.RsVizAxis.prototype.getLabels = function(unique, includeTotals, withHierarchy)
{
	let container = oFF.XHashSetOfString.create();
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let prettyResult = this.m_elements.get(i).getLabel(withHierarchy ? this : null, null);
		if (oFF.isNull(prettyResult))
		{
			prettyResult = this.m_elements.get(i).getDefaultLabel(withHierarchy ? this : null);
		}
		if (oFF.notNull(prettyResult))
		{
			if (!unique || !container.contains(prettyResult.getCompoundId()) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				container.add(prettyResult.getCompoundId());
				result.add(prettyResult);
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getLabelsForFeed = function(unique, includeTotals, withHierarchy, feedSelector)
{
	let list = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(feedSelector))
	{
		list.add(feedSelector);
	}
	return this.getLabelsForFeeds(unique, includeTotals, withHierarchy, list);
};
oFF.RsVizAxis.prototype.getLabelsForFeeds = function(unique, includeTotals, withHierarchy, feedSelector)
{
	let container = oFF.XHashSetOfString.create();
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let prettyResult = this.m_elements.get(i).getLabel(withHierarchy ? this : null, feedSelector);
		if (oFF.notNull(prettyResult))
		{
			if (!unique || !container.contains(prettyResult.getCompoundId()) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				result.add(prettyResult);
				container.add(prettyResult.getCompoundId());
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getMatchingFeedSubList = function(feedSelector)
{
	let result = oFF.XList.create();
	for (let j = 0; j < feedSelector.size(); j++)
	{
		for (let i = 0; i < this.m_elements.size(); i++)
		{
			if (this.m_elements.get(i).isSelectedByString(feedSelector.get(j)))
			{
				result.add(feedSelector.get(j));
				break;
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getMatchingTupleIndicesForMemberNameAndFeed = function(memberNames, feed)
{
	let result = oFF.XList.create();
	for (let h = 0; h < this.m_elements.size(); h++)
	{
		let selected = 2;
		let curElement = this.m_elements.get(h);
		if (curElement.isSelectedByString(feed))
		{
			for (let j = 0; j < memberNames.size(); j++)
			{
				let curMemberName = memberNames.get(j);
				if (!curElement.getMemberKeys().contains(curMemberName))
				{
					selected--;
				}
			}
			if (selected > 0)
			{
				result.add(oFF.XIntegerValue.create(h));
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getMatchingTupleIndicesForMemberNamesAndSuffix = function(memberNames, suffix)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let selected = true;
		let matchSuffix = false;
		let curElement = this.m_elements.get(i);
		for (let j = 0; j < memberNames.size(); j++)
		{
			let curFeedSelector = memberNames.get(j);
			let matchCurrentSuffix = curElement.isSelectedByString(oFF.XStringUtils.concatenate2(curFeedSelector, suffix));
			matchSuffix = matchCurrentSuffix || matchSuffix;
			if (!curElement.getMemberKeys().contains(curFeedSelector) && !matchCurrentSuffix)
			{
				selected = false;
				break;
			}
		}
		if (selected && matchSuffix)
		{
			return i;
		}
	}
	return -1;
};
oFF.RsVizAxis.prototype.getNumericShift = function(baseFeed)
{
	let selectedNumberFormattingInfo = this.m_numberFormatingInfosByFeed.getByKey(baseFeed);
	if (oFF.notNull(selectedNumberFormattingInfo))
	{
		return selectedNumberFormattingInfo.getNumericShift();
	}
	return oFF.notNull(this.m_numberFormattingInfo) ? this.m_numberFormattingInfo.getNumericShift() : 0;
};
oFF.RsVizAxis.prototype.getPrettyNames = function(unique, includeTotals)
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let prettyResult = this.m_elements.get(i).getPrettyText(null);
		if (oFF.XStringUtils.isNullOrEmpty(prettyResult))
		{
			prettyResult = this.m_elements.get(i).getPrettyDefaultText();
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(prettyResult))
		{
			if (!unique || !result.contains(prettyResult) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				result.add(prettyResult);
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getPrettyNamesForFeed = function(unique, includeTotals, feedSelector)
{
	let list = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(feedSelector))
	{
		list.add(feedSelector);
	}
	return this.getPrettyNamesForFeeds(unique, includeTotals, list);
};
oFF.RsVizAxis.prototype.getPrettyNamesForFeedExclude = function(unique, includeTotals, feedSelector, excludeFeeds)
{
	let list = oFF.XList.create();
	if (oFF.XStringUtils.isNotNullAndNotEmpty(feedSelector))
	{
		list.add(feedSelector);
	}
	return this.getPrettyNamesForFeedsExclude(unique, includeTotals, list, excludeFeeds);
};
oFF.RsVizAxis.prototype.getPrettyNamesForFeeds = function(unique, includeTotals, feedSelector)
{
	let result = oFF.XList.create();
	let keyResult = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let prettyResult = this.m_elements.get(i).getPrettyText(feedSelector);
		let prettyKeyResult = this.m_elements.get(i).getPrettyKeyText(feedSelector);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(prettyResult))
		{
			if (!unique || !keyResult.contains(prettyKeyResult) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				result.add(prettyResult);
				keyResult.add(prettyKeyResult);
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getPrettyNamesForFeedsExclude = function(unique, includeTotals, feedSelector, excludeFeeds)
{
	let result = oFF.XList.create();
	let keyResult = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let prettyResult = this.m_elements.get(i).getPrettyTextExclude(feedSelector, excludeFeeds);
		let prettyKeyResult = this.m_elements.get(i).getPrettyKeyText(feedSelector);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(prettyResult))
		{
			if (!unique || !keyResult.contains(prettyKeyResult) && (includeTotals || !this.m_elements.get(i).isTotal()))
			{
				result.add(prettyResult);
				keyResult.add(prettyKeyResult);
			}
		}
	}
	return result;
};
oFF.RsVizAxis.prototype.getScaledValue = function(baseFeed, feedTuple, dataCell)
{
	let fallBackFormattingInfo = this.m_numberFormatingInfosByFeed.getByKey(baseFeed);
	return oFF.RsVizAxisExtractor.getScaledValue(dataCell, feedTuple.getNumberFormattingInfo(), fallBackFormattingInfo);
};
oFF.RsVizAxis.prototype.getTupleAt = function(i)
{
	return i > -1 && i < this.m_elements.size() ? this.m_elements.get(i) : null;
};
oFF.RsVizAxis.prototype.getTupleForFeed = function(feed)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByString(feed))
		{
			return this.m_elements.get(i);
		}
	}
	return null;
};
oFF.RsVizAxis.prototype.getTupleIndexForMemberName = function(memberName)
{
	let list = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).getMemberKeys().contains(memberName))
		{
			list.add(oFF.XIntegerValue.create(i));
		}
	}
	return list;
};
oFF.RsVizAxis.prototype.getTupleIndexForMemberNames = function(memberNames)
{
	let list = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let candidate = true;
		for (let j = 0; j < memberNames.size(); j++)
		{
			let member = memberNames.get(j);
			if (!this.m_elements.get(i).getMemberKeys().contains(member))
			{
				candidate = false;
				break;
			}
		}
		if (candidate)
		{
			list.add(oFF.XIntegerValue.create(i));
		}
	}
	return list;
};
oFF.RsVizAxis.prototype.getTuplesCount = function()
{
	return this.m_elements.size();
};
oFF.RsVizAxis.prototype.hasTupleForFeed = function(feed)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByString(feed))
		{
			return true;
		}
	}
	return false;
};
oFF.RsVizAxis.prototype.releaseObject = function()
{
	this.m_elements = oFF.XObjectExt.release(this.m_elements);
	this.m_availableFeedTypes = oFF.XObjectExt.release(this.m_availableFeedTypes);
	this.m_numberFormattingInfo = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RsVizAxis.prototype.toString = function()
{
	return oFF.XStringUtils.concatenate3(this.m_elements.toString(), ":::", this.m_availableFeedTypes.toString());
};

oFF.RsVizAxisExtractor = {

	createTupleElement:function(cursorAxis, dimensionForMeasures, subFeedTypes, memberFormatMap, feedTuple, memberType)
	{
			cursorAxis.setFieldValueCursorBeforeStart();
		let text = "";
		let key = "";
		let displayText = "";
		let dimensionmember = null;
		let displayLevel = 0;
		let parentIndex = -1;
		let drillState = oFF.DrillState.LEAF;
		let formattedValueList = oFF.XList.create();
		let valueList = oFF.XList.create();
		let valueTypeList = oFF.XList.create();
		let presentationTypeList = oFF.XList.create();
		let textValidity = 0;
		let keyValidity = 0;
		let hierarchyNavigationFieldValue = "";
		while (cursorAxis.hasNextFieldValue())
		{
			cursorAxis.nextFieldValue();
			let field = cursorAxis.getField();
			let pt = field.getPresentationType();
			let formattedValue = cursorAxis.getFormattedValue();
			formattedValueList.add(formattedValue);
			presentationTypeList.add(pt);
			let cvt = cursorAxis.getValueType();
			if (field.isHierarchyNavigationField())
			{
				hierarchyNavigationFieldValue = cursorAxis.getFormattedValue();
			}
			if (cursorAxis.getValue() !== null)
			{
				valueList.add(cursorAxis.getValue().clone());
			}
			valueTypeList.add(cvt);
			if (pt.isTypeOf(oFF.PresentationType.SHORT_TEXT) || pt.isTypeOf(oFF.PresentationType.LONG_TEXT) || pt.isTypeOf(oFF.PresentationType.MEDIUM_TEXT))
			{
				if (textValidity < 5 && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
				{
					text = formattedValue;
					textValidity = 5;
				}
			}
			else if (pt.isTypeOf(oFF.PresentationType.HIERARCHY_TEXT) && textValidity < 4 && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				text = formattedValue;
				textValidity = 4;
			}
			else if (pt.isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY) && textValidity < 3 && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				text = formattedValue;
				textValidity = 3;
			}
			else if (pt.isTypeOf(oFF.PresentationType.DISPLAY_KEY) && textValidity < 2 && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				text = formattedValue;
				textValidity = 2;
			}
			else if (textValidity <= 1 && oFF.PresentationType.isTextPresentation(pt) && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				text = formattedValue;
				textValidity = 1;
			}
			if (keyValidity <= 4 && pt.isTypeOf(oFF.PresentationType.HIERARCHY_KEY) && !pt.isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY) && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				key = formattedValue;
				keyValidity = 4;
			}
			else if (keyValidity <= 3 && pt.isTypeOf(oFF.PresentationType.HIERARCHY_KEY) && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				key = formattedValue;
				keyValidity = 3;
			}
			else if (keyValidity <= 2 && pt.isTypeOf(oFF.PresentationType.KEY) && !pt.isTypeOf(oFF.PresentationType.DISPLAY_KEY) && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				key = formattedValue;
				keyValidity = 2;
			}
			else if (keyValidity <= 1 && oFF.PresentationType.isKeyPresentation(pt) && oFF.XStringUtils.isNotNullAndNotEmpty(formattedValue))
			{
				key = formattedValue;
				keyValidity = 1;
			}
			let rsFields = cursorAxis.getRsDimensionAtCurrentPosition().getResultSetFields();
			let fieldShownToUser = oFF.XStream.of(rsFields).find((rsField) => {
				return oFF.XString.isEqual(rsField.getName(), field.getName());
			}).isPresent();
			if (fieldShownToUser)
			{
				displayText = oFF.XStringUtils.concatenate3(displayText, " ", formattedValue);
			}
		}
		if (dimensionForMeasures.containsStructureMember(key) && oFF.XStringUtils.isNotNullAndNotEmpty(dimensionForMeasures.getStructureMember(key).getText()))
		{
			text = dimensionForMeasures.getStructureMember(key).getText();
		}
		if (!cursorAxis.getRsDimensionAtCurrentPosition().isMeasureStructure())
		{
			if (memberType.isResult())
			{
				dimensionmember = cursorAxis.getField().getDimension().getResultMember(memberType);
			}
			else
			{
				dimensionmember = cursorAxis.getField().getDimension().getDimensionMember(cursorAxis.getDimensionMemberName());
			}
			displayLevel = cursorAxis.getDisplayLevel();
			parentIndex = cursorAxis.getParentNodeIndex();
			drillState = cursorAxis.getDrillState();
			if (oFF.XStringUtils.isNullOrEmpty(text))
			{
				text = dimensionmember.getText();
				key = dimensionmember.getName();
			}
		}
		let formatelement = null;
		let showSignAs = "()";
		let decimalPlaces = -1;
		let color = null;
		let pattern = null;
		if (oFF.notNull(memberFormatMap))
		{
			let vi;
			let formatMap = memberFormatMap.getStructureByKey(oFF.VizDefConstants.K_NUMBER_FORMATTING);
			if (oFF.notNull(formatMap))
			{
				formatelement = formatMap.getByKey(key);
				for (vi = 0; oFF.isNull(formatelement) && vi < valueList.size(); vi++)
				{
					formatelement = formatMap.getByKey(valueList.get(vi).getStringRepresentation());
				}
			}
			formatMap = memberFormatMap.getStructureByKey(oFF.VizDefConstants.K_SHOW_SIGN_AS);
			if (oFF.notNull(formatMap))
			{
				showSignAs = formatMap.getStringByKey(key);
				for (vi = 0; oFF.isNull(formatelement) && vi < valueList.size(); vi++)
				{
					showSignAs = formatMap.getStringByKey(valueList.get(vi).getStringRepresentation());
				}
			}
			formatMap = memberFormatMap.getStructureByKey(oFF.VizDefConstants.K_DECIMAL_PLACES);
			if (oFF.notNull(formatMap))
			{
				decimalPlaces = formatMap.getIntegerByKey(key);
				for (vi = 0; oFF.isNull(formatelement) && vi < valueList.size(); vi++)
				{
					decimalPlaces = formatMap.getIntegerByKey(valueList.get(vi).getStringRepresentation());
				}
			}
			formatMap = memberFormatMap.getStructureByKey(oFF.VizDefConstants.K_PATTERN_FORMATTING);
			if (oFF.notNull(formatMap))
			{
				pattern = formatMap.getStringByKey(key);
				for (vi = 0; oFF.isNull(pattern) && vi < valueList.size(); vi++)
				{
					pattern = formatMap.getStringByKey(valueList.get(vi).getStringRepresentation());
				}
			}
			formatMap = memberFormatMap.getStructureByKey(oFF.VizDefConstants.K_COLOR_FORMATTING);
			if (oFF.notNull(formatMap))
			{
				color = formatMap.getStringByKey(key);
				for (vi = 0; oFF.isNull(color) && vi < valueList.size(); vi++)
				{
					color = formatMap.getStringByKey(valueList.get(vi).getStringRepresentation());
				}
			}
		}
		feedTuple.setColor(color);
		feedTuple.setPattern(pattern);
		if (oFF.notNull(formatelement))
		{
			let numericShift = 0;
			let numericScale = 2;
			let numericScaleMin = 0;
			if (formatelement.isStructure())
			{
				let formatStructure = formatelement.asStructure();
				let options = formatStructure.getStructureByKey(oFF.VizDefConstants.K_OPTIONS);
				let multiplier = formatStructure.getStructureByKey(oFF.VizDefConstants.K_SCALE).getStringByKey(oFF.VizDefConstants.K_MULTIPLIER);
				if (oFF.XString.startsWith(multiplier, "1E"))
				{
					numericShift = oFF.XInteger.convertFromString(oFF.XString.substring(multiplier, 2, oFF.XString.size(multiplier)));
				}
				if (options.containsKey(oFF.VizDefConstants.K_MINIMUM_FRACTION_DIGITS))
				{
					numericScaleMin = options.getIntegerByKey(oFF.VizDefConstants.K_MINIMUM_FRACTION_DIGITS);
				}
				if (options.containsKey(oFF.VizDefConstants.K_MAXIMUM_FRACTION_DIGITS))
				{
					numericScale = options.getIntegerByKey(oFF.VizDefConstants.K_MAXIMUM_FRACTION_DIGITS) - numericScaleMin;
				}
			}
			else if (formatelement.isInteger())
			{
				numericShift = formatelement.asInteger().getInteger();
			}
			if (decimalPlaces > -1)
			{
				numericScale = decimalPlaces;
				numericScaleMin = decimalPlaces;
			}
			let overriddenInfo = oFF.RsVizNumberFormattingInfo.createNumberFormat(numericShift, numericScaleMin, numericScale, showSignAs, false);
			feedTuple.setNumberFormattingInfo(overriddenInfo);
		}
		if (oFF.XStringUtils.isNullOrEmpty(text))
		{
			text = oFF.XStringUtils.isNotNullAndNotEmpty(key) ? key : displayText;
		}
		if (oFF.XStringUtils.isNullOrEmpty(oFF.XString.trim(displayText)))
		{
			displayText = oFF.XStringUtils.isNotNullAndNotEmpty(text) ? text : key;
		}
		if (memberType.isResult() && oFF.notNull(dimensionmember))
		{
			text = dimensionmember.getFormattedValue();
		}
		return oFF.RsVizTupleElement.createTupleElement(dimensionmember, displayLevel, parentIndex, drillState, key, text, displayText, subFeedTypes, formattedValueList, valueList, valueTypeList, presentationTypeList, memberType, hierarchyNavigationFieldValue);
	},
	extractCustomFormatting:function(vizDef, globalDef)
	{
			if (oFF.isNull(vizDef))
		{
			return null;
		}
		let customFormatting = vizDef.getStructureByKey(oFF.VizDefConstants.K_CUSTOM_FORMATTING);
		let placeholders2Id = vizDef.getStructureByKey(oFF.VizDefConstants.K_PLACEHOLDER_2_ID);
		let measureSync = oFF.isNull(globalDef) ? null : globalDef.getListByKey(oFF.VizDefConstants.K_MEASURE_SYNC);
		if (oFF.isNull(customFormatting))
		{
			customFormatting = vizDef.putNewStructure(oFF.VizDefConstants.K_CUSTOM_FORMATTING);
		}
		let patternFormatting = customFormatting.getStructureByKey(oFF.VizDefConstants.K_PATTERN_FORMATTING);
		if (oFF.isNull(patternFormatting))
		{
			patternFormatting = customFormatting.putNewStructure(oFF.VizDefConstants.K_PATTERN_FORMATTING);
		}
		let colorFormatting = customFormatting.getStructureByKey(oFF.VizDefConstants.K_COLOR_FORMATTING);
		if (oFF.isNull(colorFormatting))
		{
			colorFormatting = customFormatting.putNewStructure(oFF.VizDefConstants.K_COLOR_FORMATTING);
		}
		let upIds = oFF.XHashSetOfString.create();
		if (!vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getBooleanByKeyExt(oFF.VizDefConstants.K_IS_EXCLUDE_COLOR_SYNC, false))
		{
			if (oFF.notNull(measureSync))
			{
				for (let h = 0; h < measureSync.size(); h++)
				{
					let ms = measureSync.getStructureAt(h);
					let idStruct = ms.getStructureByKey(oFF.VizDefConstants.K_ID);
					let idName = idStruct.getStringByKey(oFF.VizDefConstants.K_ID);
					if (!colorFormatting.containsKey(idName))
					{
						colorFormatting.putStringNotNullAndNotEmpty(idName, ms.getStringByKey(oFF.VizDefConstants.K_COLOR));
					}
					if (!patternFormatting.containsKey(idName))
					{
						patternFormatting.putStringNotNullAndNotEmpty(idName, ms.getStringByKey(oFF.VizDefConstants.K_PATTERN));
					}
				}
			}
		}
		else
		{
			let feedMembers = vizDef.getStructureByKey(oFF.VizDefConstants.K_FEED_MEMBERS);
			let feedKeys = feedMembers.getKeysAsReadOnlyList();
			for (let fi = 0; fi < feedKeys.size(); fi++)
			{
				let curFeedKey = feedKeys.get(fi);
				if (!oFF.XString.containsString(curFeedKey, oFF.VizDefConstants.K_ERRORBAR_INFIX))
				{
					let deleteValue = feedMembers.getListByKey(curFeedKey);
					for (let dvi = 0; dvi < deleteValue.size(); dvi++)
					{
						colorFormatting.remove(deleteValue.getStringAt(dvi));
					}
				}
			}
			patternFormatting.clear();
			let userPrefrence = vizDef.getStructureByKey(oFF.VizDefConstants.K_USER_PREFERENCES);
			if (oFF.notNull(userPrefrence))
			{
				let measuresStructure = userPrefrence.getStructureByKey(oFF.VizDefConstants.K_MEASURE);
				if (oFF.notNull(measuresStructure))
				{
					let measureColors = measuresStructure.getListByKey(oFF.VizDefConstants.K_COLORS);
					if (oFF.notNull(measureColors))
					{
						for (let g = 0; g < measureColors.size(); g++)
						{
							let msUp = measureColors.getStructureAt(g);
							let idStructUp = msUp.getStructureByKey(oFF.VizDefConstants.K_ID);
							let idNameUp = idStructUp.getStringByKey(oFF.VizDefConstants.K_ID);
							colorFormatting.putStringNotNullAndNotEmpty(idNameUp, msUp.getStringByKey(oFF.VizDefConstants.K_COLOR));
							patternFormatting.putStringNotNullAndNotEmpty(idNameUp, msUp.getStringByKey(oFF.VizDefConstants.K_PATTERN));
							upIds.add(idNameUp);
						}
					}
				}
			}
		}
		if (oFF.notNull(placeholders2Id))
		{
			let placeholders = placeholders2Id.getKeysAsReadOnlyList();
			for (let i = 0; i < placeholders.size(); i++)
			{
				let placeholder = placeholders.get(i);
				let mappedId = placeholders2Id.getStringByKey(placeholder);
				if (colorFormatting.containsKey(placeholder) && (!colorFormatting.containsKey(mappedId) || upIds.contains(placeholder)))
				{
					colorFormatting.putString(mappedId, colorFormatting.getStringByKey(placeholder));
				}
				if (patternFormatting.containsKey(placeholder) && !patternFormatting.containsKey(mappedId))
				{
					patternFormatting.putString(mappedId, patternFormatting.getStringByKey(placeholder));
				}
				if (colorFormatting.containsKey(mappedId) && (!colorFormatting.containsKey(placeholder) || upIds.contains(mappedId)))
				{
					colorFormatting.putString(placeholder, colorFormatting.getStringByKey(mappedId));
				}
				if (patternFormatting.containsKey(mappedId) && !patternFormatting.containsKey(placeholder))
				{
					patternFormatting.putString(placeholder, patternFormatting.getStringByKey(mappedId));
				}
			}
		}
		return customFormatting;
	},
	getAxisMemberFeedTypes:function(cursorAxis, feedTypes)
	{
			let result = oFF.XLinkedHashMapByString.create();
		cursorAxis.setFieldValueCursorBeforeStart();
		let keys = feedTypes.getKeysAsReadOnlyList();
		while (cursorAxis.hasNextFieldValue())
		{
			cursorAxis.nextFieldValue();
			let fieldValueV = cursorAxis.getFieldValue();
			let dimName = fieldValueV.getField().getDimension().getName();
			let memberName = cursorAxis.getDimensionMemberName();
			let memberAlias = "";
			if (oFF.XStringUtils.isNotNullAndNotEmpty(memberName))
			{
				let structureMember = cursorAxis.getField().getDimension().getStructureMember(memberName);
				if (oFF.notNull(structureMember))
				{
					memberAlias = structureMember.getAliasName();
				}
			}
			for (let i = 0; i < keys.size(); i++)
			{
				let feedType = keys.get(i);
				let feedMembers = feedTypes.getByKey(feedType);
				for (let j = 0; j < feedMembers.size(); j++)
				{
					let currentFeedName = feedMembers.get(j);
					if (oFF.XString.isEqual(memberAlias, currentFeedName) || oFF.XString.isEqual(memberName, currentFeedName) || oFF.XString.isEqual(fieldValueV.toString(), currentFeedName) || oFF.XString.isEqual(fieldValueV.getFormattedValue(), currentFeedName) || oFF.XString.isEqual(dimName, currentFeedName))
					{
						if (!result.containsKey(feedType))
						{
							result.put(feedType, oFF.XIntegerValue.create(j));
						}
						break;
					}
				}
			}
		}
		cursorAxis.setFieldValueCursorBeforeStart();
		return result;
	},
	getDimensionStack:function(axis)
	{
			let resultList = oFF.XList.create();
		axis.setFieldValueCursorBeforeStart();
		axis.setTupleElementCursorBeforeStart();
		axis.setTupleCursorBeforeStart();
		if (axis.hasNextTuple())
		{
			axis.nextTuple();
			while (axis.hasNextTupleElement())
			{
				axis.nextTupleElement();
				if (axis.hasNextFieldValue())
				{
					axis.nextFieldValue();
				}
				resultList.add(axis.getRsDimensionAtCurrentPosition().getName());
			}
		}
		axis.setFieldValueCursorBeforeStart();
		axis.setTupleElementCursorBeforeStart();
		axis.setTupleCursorBeforeStart();
		return resultList;
	},
	getFeedMembersFromVisualizationDefinition:function(rs, visualizationDefinition)
	{
			let feedMembersMap = oFF.XHashMapByString.create();
		let chartSetting = visualizationDefinition.getChartSetting();
		let chartType = chartSetting.getChartType();
		let secondaryChartType = chartSetting.getChartType2();
		let categoryList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_CATEGORY_AXIS, categoryList);
		let categoryList2 = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_CATEGORY_AXIS2, categoryList2);
		let valueList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_VALUE_AXIS, valueList);
		let valueList2 = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_VALUE_AXIS2, valueList2);
		let valueListVariance = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_VARIANCE, valueListVariance);
		let bubbleList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_BUBBLE_WIDTH, bubbleList);
		let weightList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_WEIGHT, weightList);
		let sizeList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_SIZE, sizeList);
		let timeList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_TIME_AXIS, timeList);
		let colorList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_COLOR, colorList);
		let cursorColumnAxis = rs.getCursorColumnsAxis();
		let cursorRowAxis = rs.getCursorRowsAxis();
		let colDimStack;
		let rowDimStack;
		if (oFF.XStream.of(cursorColumnAxis.getRsDimensions()).anyMatch((defDim) => {
			return oFF.XString.isEqual(defDim.getName(), visualizationDefinition.getKeyFigureDimension().getName());
		}))
		{
			colDimStack = oFF.RsVizAxisExtractor.getDimensionStack(cursorColumnAxis);
			rowDimStack = oFF.RsVizAxisExtractor.getDimensionStack(cursorRowAxis);
		}
		else
		{
			rowDimStack = oFF.RsVizAxisExtractor.getDimensionStack(cursorColumnAxis);
			colDimStack = oFF.RsVizAxisExtractor.getDimensionStack(cursorRowAxis);
		}
		colDimStack.removeElement(visualizationDefinition.getKeyFigureDimension().getName());
		if (chartType === oFF.ChartType.LINE || chartType.isTypeOf(oFF.ChartType.BAR_COLUMN) || chartType === oFF.ChartType.AREA)
		{
			categoryList.addAll(rowDimStack);
			colorList.addAll(colDimStack);
			valueList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE));
			if (secondaryChartType !== oFF.ChartType.NONE || chartType === oFF.ChartType.LINE)
			{
				valueList2.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE_B));
			}
			valueListVariance.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE_VARIANCE));
		}
		else if (chartType === oFF.ChartType.RADAR)
		{
			categoryList.addAll(rowDimStack);
			colorList.addAll(colDimStack);
			valueList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE));
		}
		else if (chartType === oFF.ChartType.BOX_PLOT)
		{
			categoryList.addAll(rowDimStack);
			colorList.addAll(colDimStack);
			valueList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE));
		}
		else if (chartType === oFF.ChartType.TIME_SERIES)
		{
			timeList.addAll(rowDimStack);
			colorList.addAll(colDimStack);
			valueList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE));
		}
		else if (chartType === oFF.ChartType.HEAT_MAP)
		{
			categoryList.addAll(rowDimStack);
			categoryList2.addAll(colDimStack);
			colorList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.COLOR));
		}
		else if (chartType === oFF.ChartType.PACKED_BUBBLE || chartType === oFF.ChartType.BUBBLE || chartType === oFF.ChartType.SCATTER_PLOT || chartType === oFF.ChartType.VARI_WIDE)
		{
			colorList.addAll(colDimStack);
			valueList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE));
			valueList2.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE_B));
			if (chartType === oFF.ChartType.BUBBLE || chartType === oFF.ChartType.PACKED_BUBBLE)
			{
				bubbleList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.SIZE));
			}
		}
		else if (chartType === oFF.ChartType.METRIC)
		{
			valueList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE));
			valueList2.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE_B));
			valueListVariance.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.VALUE_VARIANCE));
		}
		else if (chartType === oFF.ChartType.PIE || chartType === oFF.ChartType.DOUGHNUT)
		{
			categoryList.addAll(rowDimStack);
			sizeList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.SIZE));
		}
		else if (chartType === oFF.ChartType.TREE_MAP)
		{
			categoryList.addAll(rowDimStack);
			colorList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.COLOR));
			weightList.addAll(oFF.RsVizAxisExtractor.getMemberStackFromVisualizationDefinition(visualizationDefinition, oFF.VisualizationValueType.WEIGHT));
		}
		return feedMembersMap;
	},
	getFormattedValue:function(dataCell, numberFormattingInfo, numberFormattingInfoDefault)
	{
			let formattedValue = dataCell.getFormattedValue();
		if (oFF.XStringUtils.isNullOrEmpty(formattedValue) && dataCell.getValueException() === oFF.ValueException.NORMAL)
		{
			formattedValue = oFF.XDouble.convertToString(dataCell.getDouble());
		}
		if (oFF.XValueType.PERCENT.isEqualTo(dataCell.getValueType()))
		{
			formattedValue = oFF.XStringUtils.concatenate2(formattedValue, "%");
		}
		let cellFormatterSettings = oFF.DataCellNumberFormatterSettings.create(dataCell);
		let currencyUnitPair = oFF.RscMappingUtils.resolveCurrencyUnitPair(dataCell.getComplexUnit(), cellFormatterSettings.getCurrencyFormatSettings().getCurrencyPresentation(), oFF.XPairOfString.create("", ""));
		let formattedValue2 = oFF.XNumberFormatter.formatHeaderStringUsingSettingsWithCurrency(cellFormatterSettings, currencyUnitPair, oFF.XIntegerValue.create(-numberFormattingInfo.getNumericShift()), null);
		return oFF.XStringUtils.concatenate3(formattedValue, " ", formattedValue2);
	},
	getMemberStack:function(axis, position)
	{
			let resultList = oFF.XList.create();
		axis.setFieldValueCursorBeforeStart();
		axis.setTupleElementCursorBeforeStart();
		axis.setTupleCursorBeforeStart();
		while (axis.hasNextTuple())
		{
			axis.nextTuple();
			axis.setTupleElementCursorBeforeStart();
			let tupleIndex = 0;
			while (axis.hasNextTupleElement() && tupleIndex++ < position)
			{
				axis.nextTupleElement();
			}
			if (axis.hasNextFieldValue())
			{
				axis.nextFieldValue();
			}
			resultList.add(axis.getDimensionMemberName());
		}
		axis.setFieldValueCursorBeforeStart();
		axis.setTupleElementCursorBeforeStart();
		axis.setTupleCursorBeforeStart();
		return resultList;
	},
	getMemberStackFromVisualizationDefinition:function(visualizationDefinition, vvt)
	{
			let resultList = oFF.XList.create();
		let visualizationValueTypes = visualizationDefinition.getChartSetting().getTypedValueSelectionsForType(vvt);
		for (let i = 0; i < visualizationValueTypes.size(); i++)
		{
			resultList.add(visualizationValueTypes.get(i).getDimensionMember().getName());
		}
		return resultList;
	},
	getScaledValue:function(dataCell, numberFormattingInfo, numberFormattingInfoDefault)
	{
			let currentNumberFormattingInfo = numberFormattingInfo;
		if (oFF.isNull(currentNumberFormattingInfo) || currentNumberFormattingInfo.isUseFormattingFromDataCell())
		{
			if (dataCell.getScalingFactor() === 0 && oFF.notNull(numberFormattingInfoDefault) && !numberFormattingInfoDefault.isUseFormattingFromDataCell())
			{
				currentNumberFormattingInfo = numberFormattingInfoDefault;
			}
		}
		let numericShift;
		if (oFF.notNull(currentNumberFormattingInfo) && !currentNumberFormattingInfo.isUseFormattingFromDataCell())
		{
			numericShift = currentNumberFormattingInfo.getNumericShift();
		}
		else
		{
			numericShift = dataCell.getScalingFactor();
		}
		if (!dataCell.getValueException().isValidValue() && dataCell.getValueException() !== oFF.ValueException.MIXED_CURRENCIES_OR_UNITS)
		{
			return 0;
		}
		try
		{
			return dataCell.getDouble() * oFF.XMath.pow(10, numericShift);
		}
		catch (t)
		{
			return 0;
		}
	},
	getTuplesFromAxis:function(rs, cursorAxis, isRow, feedMembers, customFormatting)
	{
			let result = oFF.RsVizAxis.create();
		let dimensionForMeasures = rs.getQueryModel().getAccountDimension();
		if (oFF.isNull(dimensionForMeasures))
		{
			dimensionForMeasures = rs.getQueryModel().getMeasureDimension();
		}
		cursorAxis.setTupleCursorBeforeStart();
		let i = 0;
		while (cursorAxis.hasNextTuple())
		{
			cursorAxis.nextTuple();
			let cellPrototype = null;
			if (isRow)
			{
				if (rs.getDataColumns() > 0)
				{
					cellPrototype = rs.getDataCell(0, i);
				}
			}
			else
			{
				if (rs.getDataRows() > 0)
				{
					cellPrototype = rs.getDataCell(i, 0);
				}
			}
			if (oFF.notNull(cellPrototype))
			{
				let decimalPlaces = cellPrototype.getDecimalPlaces();
				let formattedValueIsEmpty = oFF.XStringUtils.isNullOrEmpty(cellPrototype.getFormattedValue());
				let scalingFactor = formattedValueIsEmpty && cursorAxis.getScalingFactor() !== null ? cursorAxis.getScalingFactor().getInteger() : cellPrototype.getScalingFactor();
				let showSignAs = cellPrototype.getFormatString();
				let defaultFormatting = oFF.RsVizNumberFormattingInfo.createNumberFormat(scalingFactor, decimalPlaces, decimalPlaces, showSignAs, scalingFactor === 0);
				let feedTuple = oFF.RsVizFeedTuple.createTuple();
				feedTuple.setNumberFormattingInfo(defaultFormatting);
				while (cursorAxis.hasNextTupleElement())
				{
					let memberType = cursorAxis.nextTupleElement().getDimensionMemberType();
					let subFeedTypes = oFF.RsVizAxisExtractor.getAxisMemberFeedTypes(cursorAxis, feedMembers);
					feedTuple.addElement(oFF.RsVizAxisExtractor.createTupleElement(cursorAxis, dimensionForMeasures, subFeedTypes, customFormatting, feedTuple, memberType));
				}
				result.addElement(feedTuple);
			}
			i++;
		}
		return result;
	},
	getTuplesFromColumnAxis:function(rs, feedMembers, customFormatting)
	{
			return oFF.RsVizAxisExtractor.getTuplesFromAxis(rs, rs.getCursorColumnsAxis(), false, feedMembers, customFormatting);
	},
	getTuplesFromRowAxis:function(rs, feedMembers, customFormatting)
	{
			return oFF.RsVizAxisExtractor.getTuplesFromAxis(rs, rs.getCursorRowsAxis(), true, feedMembers, customFormatting);
	},
	guessFeedMembers:function(rs, chartType, isCombinationChart)
	{
			let isColumn = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_COLUMN);
		let isBellcurve = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BELLCURVE);
		let isLine = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_LINE);
		let isBar = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BAR);
		let isSpline = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_SPLINE);
		let isArea = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_AREA);
		let isPie = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_PIE);
		let isWordcloud = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_WORDCLOUD);
		let isVariablepie = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_VARIPIE);
		let isVariwide = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_VARIWIDE);
		let isScatter = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_SCATTER);
		let isBubble = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BUBBLE);
		let isPackedBubble = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_PACKED_BUBBLE);
		let isHeatMap = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_HEATMAP);
		let isTreeMap = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_TREEMAP);
		let isBoxPlot = oFF.XString.isEqual(chartType, oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT);
		let isMetric = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_SOLID_GAUGE);
		let feedMembersMap = oFF.XHashMapByString.create();
		let rowAxis = rs.getCursorRowsAxis();
		let colAxis = rs.getCursorColumnsAxis();
		let categoryList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_CATEGORY_AXIS, categoryList);
		let categoryList2 = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_CATEGORY_AXIS2, categoryList2);
		let valueList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_VALUE_AXIS, valueList);
		let valueList2 = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_VALUE_AXIS2, valueList2);
		let bubbleList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_BUBBLE_WIDTH, bubbleList);
		let weightList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_WEIGHT, weightList);
		let sizeList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_SIZE, sizeList);
		let timeList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_TIME_AXIS, timeList);
		let colorList = oFF.XList.create();
		feedMembersMap.put(oFF.VizDefConstants.K_COLOR, colorList);
		let colDimStack = oFF.RsVizAxisExtractor.getDimensionStack(colAxis);
		let rowDimStack = oFF.RsVizAxisExtractor.getDimensionStack(rowAxis);
		let measureStack = oFF.RsVizAxisExtractor.getMemberStack(colAxis, colDimStack.size());
		if (rowDimStack.size() > 0)
		{
			timeList.add(rowDimStack.get(rowDimStack.size() - 1));
			colorList.add(rowDimStack.get(rowDimStack.size() - 1));
			categoryList.add(rowDimStack.get(rowDimStack.size() - 1));
		}
		if (colDimStack.size() > 1)
		{
			if (isHeatMap)
			{
				categoryList2.add(colDimStack.get(colDimStack.size() - 2));
			}
			else
			{
				colorList.add(colDimStack.get(colDimStack.size() - 2));
			}
		}
		if (isLine || isBar || isSpline || isBellcurve || isColumn || isArea || isCombinationChart || isMetric || isBoxPlot)
		{
			let size = measureStack.size();
			if (isCombinationChart && measureStack.size() > 1)
			{
				size--;
				valueList2.add(measureStack.get(measureStack.size() - 1));
			}
			for (let i = 0; i < size; i++)
			{
				valueList.add(measureStack.get(i));
			}
		}
		else if (isPie || isVariablepie || isWordcloud || isBubble || isScatter || isTreeMap || isVariwide || isPackedBubble)
		{
			if (measureStack.size() > 0)
			{
				weightList.add(measureStack.get(0));
				valueList.add(measureStack.get(0));
				sizeList.add(measureStack.get(measureStack.size() - 1));
			}
			if (measureStack.size() > 1)
			{
				valueList2.add(measureStack.get(1));
			}
			if (measureStack.size() > 2)
			{
				bubbleList.add(measureStack.get(2));
			}
		}
		else if (isHeatMap)
		{
			if (measureStack.size() > 0)
			{
				colorList.add(measureStack.get(0));
			}
		}
		return feedMembersMap;
	}
};

oFF.RsVizFeedTuple = function() {};
oFF.RsVizFeedTuple.prototype = new oFF.XObject();
oFF.RsVizFeedTuple.prototype._ff_c = "RsVizFeedTuple";

oFF.RsVizFeedTuple.createTuple = function()
{
	let newInstance = new oFF.RsVizFeedTuple();
	newInstance.m_elements = oFF.XList.create();
	newInstance.m_availableFeedTypes = oFF.XHashSetOfString.create();
	return newInstance;
};
oFF.RsVizFeedTuple.prototype.m_availableFeedTypes = null;
oFF.RsVizFeedTuple.prototype.m_color = null;
oFF.RsVizFeedTuple.prototype.m_elements = null;
oFF.RsVizFeedTuple.prototype.m_numberFormattingInfo = null;
oFF.RsVizFeedTuple.prototype.m_pattern = null;
oFF.RsVizFeedTuple.prototype.addElement = function(element)
{
	this.m_elements.add(element);
	this.m_availableFeedTypes.addAll(element.getFeedTypes());
};
oFF.RsVizFeedTuple.prototype.compareTo = function(objectToCompare)
{
	if (oFF.isNull(objectToCompare))
	{
		return 1;
	}
	let otherObject = objectToCompare;
	let size = oFF.XMath.min(this.m_elements.size(), otherObject.m_elements.size());
	for (let i = 0; i < size; i++)
	{
		let compVal = this.m_elements.get(i).compareTo(otherObject.m_elements.get(i));
		if (compVal !== 0)
		{
			return compVal;
		}
	}
	return 0;
};
oFF.RsVizFeedTuple.prototype.createVizLabel = function(i, axisForHierarchyLookup, parent)
{
	let result = parent;
	let currentElement = this.m_elements.get(i);
	return oFF.RsVizLabel.create(currentElement.getKey(), currentElement.getText(), currentElement.getFormattedText(), result, currentElement.getDisplayLevel(), currentElement.getDrillState());
};
oFF.RsVizFeedTuple.prototype.getAvailableFeedTypes = function()
{
	return this.m_availableFeedTypes;
};
oFF.RsVizFeedTuple.prototype.getCategories = function(feedSelector)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes))
	{
		return null;
	}
	let resultList = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByList(feedSelector))
		{
			resultList.add(this.m_elements.get(i).getText());
		}
	}
	return resultList;
};
oFF.RsVizFeedTuple.prototype.getCategoriesObjects = function(feedSelector)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes))
	{
		return null;
	}
	let resultList = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByList(feedSelector))
		{
			resultList.add(this.m_elements.get(i));
		}
	}
	return resultList;
};
oFF.RsVizFeedTuple.prototype.getColor = function()
{
	return this.m_color;
};
oFF.RsVizFeedTuple.prototype.getDate = function(fallbackLevel)
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let date = this.m_elements.get(i).getDate(fallbackLevel);
		if (oFF.notNull(date))
		{
			return date;
		}
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getDecimalPlaces = function()
{
	return this.m_numberFormattingInfo.getMaxDecimalPlaces();
};
oFF.RsVizFeedTuple.prototype.getDefaultLabel = function(axisForHierarchyLookup)
{
	let result = null;
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes) || oFF.XCollectionUtils.hasElements(this.m_elements.get(i).getFeedTypes()))
		{
			result = this.createVizLabel(i, axisForHierarchyLookup, result);
		}
	}
	return result;
};
oFF.RsVizFeedTuple.prototype.getDimensionNamesForFeeds = function(feeds)
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let curElement = this.m_elements.get(i);
		if (curElement.getDimensionMember() !== null && curElement.getDimensionMember().getDimension() !== null && curElement.isSelectedByList(feeds) && !result.contains(curElement.getDimensionMember().getDimension().getName()))
		{
			result.add(curElement.getDimensionMember().getDimension().getName());
		}
	}
	return result;
};
oFF.RsVizFeedTuple.prototype.getDimensionTextsForFeeds = function(feeds)
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let curElement = this.m_elements.get(i);
		if (curElement.getDimensionMember() !== null && curElement.getDimensionMember().getDimension() !== null && curElement.isSelectedByList(feeds) && !result.contains(curElement.getDimensionMember().getDimension().getName()))
		{
			result.add(curElement.getDimensionMember().getDimension().getText());
		}
	}
	return result;
};
oFF.RsVizFeedTuple.prototype.getFormattedDate = function()
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		let date = this.m_elements.get(i).getFormattedDate();
		if (oFF.notNull(date))
		{
			return date;
		}
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getFormattedDefaultText = function()
{
	let val = oFF.XStringBuffer.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes) || oFF.XCollectionUtils.hasElements(this.m_elements.get(i).getFeedTypes()))
		{
			val.append("/");
			val.append(this.m_elements.get(i).getFormattedText());
		}
	}
	let result = val.toString();
	if (oFF.XString.size(result) > 1)
	{
		return oFF.XString.substring(result, 1, oFF.XString.size(result));
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getFormattedText = function(feedSelector)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes))
	{
		return null;
	}
	let val = oFF.XStringBuffer.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByList(feedSelector))
		{
			val.append("/");
			val.append(this.m_elements.get(i).getFormattedText());
		}
	}
	let result = val.toString();
	if (oFF.XString.size(result) > 1)
	{
		return oFF.XString.substring(result, 1, oFF.XString.size(result));
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getFormattedValue = function(dataCell)
{
	return oFF.RsVizAxisExtractor.getFormattedValue(dataCell, this.getNumberFormattingInfo(), null);
};
oFF.RsVizFeedTuple.prototype.getLabel = function(axisForHierarchyLookup, feedSelector)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes))
	{
		return null;
	}
	let result = null;
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByList(feedSelector))
		{
			result = this.createVizLabel(i, axisForHierarchyLookup, result);
		}
	}
	return result;
};
oFF.RsVizFeedTuple.prototype.getMemberKeys = function()
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		result.add(this.m_elements.get(i).getKey());
	}
	return result;
};
oFF.RsVizFeedTuple.prototype.getMemberKeysForFeedsOtherThan = function(feed)
{
	let result = oFF.XList.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (!this.m_elements.get(i).isSelectedByString(feed))
		{
			result.add(this.m_elements.get(i).getKey());
		}
	}
	return result;
};
oFF.RsVizFeedTuple.prototype.getNumberFormattingInfo = function()
{
	return this.m_numberFormattingInfo;
};
oFF.RsVizFeedTuple.prototype.getNumericShift = function()
{
	return this.m_numberFormattingInfo.getNumericShift();
};
oFF.RsVizFeedTuple.prototype.getPattern = function()
{
	return this.m_pattern;
};
oFF.RsVizFeedTuple.prototype.getPrettyDefaultText = function()
{
	let val = oFF.XStringBuffer.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes) || oFF.XCollectionUtils.hasElements(this.m_elements.get(i).getFeedTypes()))
		{
			val.append("/");
			val.append(this.m_elements.get(i).getText());
		}
	}
	let result = val.toString();
	if (oFF.XString.size(result) > 1)
	{
		return oFF.XString.substring(result, 1, oFF.XString.size(result));
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getPrettyKeyText = function(feedSelector)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes))
	{
		return null;
	}
	let val = oFF.XStringBuffer.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByList(feedSelector))
		{
			val.append("/");
			val.append(this.m_elements.get(i).getKey());
		}
	}
	let result = val.toString();
	if (oFF.XString.size(result) > 1)
	{
		return oFF.XString.substring(result, 1, oFF.XString.size(result));
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getPrettyText = function(feedSelector)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes))
	{
		return null;
	}
	let val = oFF.XStringBuffer.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByList(feedSelector))
		{
			val.append("/");
			val.append(this.m_elements.get(i).getText());
		}
	}
	let result = val.toString();
	if (oFF.XString.size(result) > 1)
	{
		return oFF.XString.substring(result, 1, oFF.XString.size(result));
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getPrettyTextExclude = function(feedSelector, feedExclude)
{
	if (!oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes))
	{
		return null;
	}
	let val = oFF.XStringBuffer.create();
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isSelectedByList(feedSelector) && !this.m_elements.get(i).isSelectedByList(feedExclude))
		{
			val.append("/");
			val.append(this.m_elements.get(i).getText());
		}
	}
	let result = val.toString();
	if (oFF.XString.size(result) > 1)
	{
		return oFF.XString.substring(result, 1, oFF.XString.size(result));
	}
	return null;
};
oFF.RsVizFeedTuple.prototype.getPrettyTextForFeed = function(feedSelector)
{
	let feeds = oFF.XList.create();
	feeds.add(feedSelector);
	return this.getPrettyText(feeds);
};
oFF.RsVizFeedTuple.prototype.getScaledValue = function(dataCell)
{
	return oFF.RsVizAxisExtractor.getScaledValue(dataCell, this.getNumberFormattingInfo(), null);
};
oFF.RsVizFeedTuple.prototype.isSelectedByList = function(feedSelector)
{
	if (oFF.XCollectionUtils.hasElements(this.m_availableFeedTypes) && !oFF.XCollectionUtils.hasElements(feedSelector))
	{
		return true;
	}
	for (let i = 0; i < feedSelector.size(); i++)
	{
		if (this.m_availableFeedTypes.contains(feedSelector.get(i)))
		{
			return true;
		}
	}
	return false;
};
oFF.RsVizFeedTuple.prototype.isSelectedByString = function(feedSelector)
{
	return oFF.XStringUtils.isNullOrEmpty(feedSelector) || this.m_availableFeedTypes.contains(feedSelector);
};
oFF.RsVizFeedTuple.prototype.isTotal = function()
{
	for (let i = 0; i < this.m_elements.size(); i++)
	{
		if (this.m_elements.get(i).isTotal())
		{
			return true;
		}
	}
	return false;
};
oFF.RsVizFeedTuple.prototype.releaseObject = function()
{
	this.m_elements = oFF.XObjectExt.release(this.m_elements);
	this.m_availableFeedTypes = oFF.XObjectExt.release(this.m_availableFeedTypes);
	this.m_numberFormattingInfo = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RsVizFeedTuple.prototype.setColor = function(color)
{
	this.m_color = color;
};
oFF.RsVizFeedTuple.prototype.setNumberFormattingInfo = function(value)
{
	this.m_numberFormattingInfo = value;
};
oFF.RsVizFeedTuple.prototype.setPattern = function(pattern)
{
	this.m_pattern = pattern;
};
oFF.RsVizFeedTuple.prototype.toString = function()
{
	return oFF.XStringUtils.concatenate3(this.m_elements.toString(), ":::", this.m_availableFeedTypes.toString());
};

oFF.RsVizLabel = function() {};
oFF.RsVizLabel.prototype = new oFF.XObject();
oFF.RsVizLabel.prototype._ff_c = "RsVizLabel";

oFF.RsVizLabel.create = function(id, label, formattedLabel, parent, displayLevel, drillState)
{
	let newInstance = new oFF.RsVizLabel();
	newInstance.m_id = id;
	newInstance.m_label = label;
	newInstance.m_formattedLabel = formattedLabel;
	newInstance.m_parent = parent;
	newInstance.m_leafOrCollapsed = oFF.isNull(drillState) || drillState === oFF.DrillState.LEAF || drillState === oFF.DrillState.COLLAPSED || drillState === oFF.DrillState.COLLAPSED_EXPAND_AND_DRILLDOWN_ALLOWED;
	newInstance.m_displayLevel = displayLevel;
	if (oFF.notNull(parent))
	{
		parent.m_leafOrCollapsed = false;
	}
	return newInstance;
};
oFF.RsVizLabel.prototype.m_compoundFormattedLabel = null;
oFF.RsVizLabel.prototype.m_compoundId = null;
oFF.RsVizLabel.prototype.m_compoundLabel = null;
oFF.RsVizLabel.prototype.m_displayLevel = 0;
oFF.RsVizLabel.prototype.m_formattedLabel = null;
oFF.RsVizLabel.prototype.m_id = null;
oFF.RsVizLabel.prototype.m_label = null;
oFF.RsVizLabel.prototype.m_leafOrCollapsed = false;
oFF.RsVizLabel.prototype.m_parent = null;
oFF.RsVizLabel.prototype.getCompoundFormattedLabel = function()
{
	if (oFF.isNull(this.m_compoundFormattedLabel))
	{
		if (oFF.notNull(this.m_parent))
		{
			this.m_compoundFormattedLabel = oFF.XStringUtils.concatenate3(this.m_parent.getCompoundFormattedLabel(), "/", this.m_formattedLabel);
		}
		else
		{
			this.m_compoundFormattedLabel = this.m_formattedLabel;
		}
	}
	return this.m_compoundFormattedLabel;
};
oFF.RsVizLabel.prototype.getCompoundId = function()
{
	if (oFF.isNull(this.m_compoundId))
	{
		if (oFF.notNull(this.m_parent))
		{
			this.m_compoundId = oFF.XStringUtils.concatenate3(this.m_parent.getCompoundId(), "/", this.m_id);
		}
		else
		{
			this.m_compoundId = this.m_id;
		}
	}
	return this.m_compoundId;
};
oFF.RsVizLabel.prototype.getCompoundLabel = function()
{
	if (oFF.isNull(this.m_compoundLabel))
	{
		if (oFF.notNull(this.m_parent))
		{
			this.m_compoundLabel = oFF.XStringUtils.concatenate3(this.m_parent.getCompoundLabel(), "/", this.m_label);
		}
		else
		{
			this.m_compoundLabel = this.m_label;
		}
	}
	return this.m_compoundLabel;
};
oFF.RsVizLabel.prototype.getDisplayLevel = function()
{
	return this.m_displayLevel;
};
oFF.RsVizLabel.prototype.getFormattedLabel = function()
{
	return this.m_formattedLabel;
};
oFF.RsVizLabel.prototype.getId = function()
{
	return this.m_id;
};
oFF.RsVizLabel.prototype.getLabel = function()
{
	return this.m_label;
};
oFF.RsVizLabel.prototype.getParent = function()
{
	return this.m_parent;
};
oFF.RsVizLabel.prototype.isLeafOrCollapsed = function()
{
	return this.m_leafOrCollapsed;
};
oFF.RsVizLabel.prototype.releaseObject = function()
{
	this.m_id = null;
	this.m_label = null;
	this.m_formattedLabel = null;
	this.m_parent = null;
	this.m_compoundFormattedLabel = null;
	this.m_compoundId = null;
	this.m_compoundLabel = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.RsVizNumberFormattingInfo = function() {};
oFF.RsVizNumberFormattingInfo.prototype = new oFF.XObject();
oFF.RsVizNumberFormattingInfo.prototype._ff_c = "RsVizNumberFormattingInfo";

oFF.RsVizNumberFormattingInfo.createNumberFormat = function(numericShift, minDecimalPlaces, maxDecimalPlaces, showSignAs, useFormattingFromDataCell)
{
	let newInstance = new oFF.RsVizNumberFormattingInfo();
	newInstance.m_numericShift = numericShift;
	newInstance.m_minDecimalPlaces = minDecimalPlaces;
	newInstance.m_maxDecimalPlaces = maxDecimalPlaces;
	newInstance.m_useFormattingFromDataCell = useFormattingFromDataCell;
	newInstance.m_showSignAs = showSignAs;
	return newInstance;
};
oFF.RsVizNumberFormattingInfo.prototype.m_maxDecimalPlaces = 0;
oFF.RsVizNumberFormattingInfo.prototype.m_minDecimalPlaces = 0;
oFF.RsVizNumberFormattingInfo.prototype.m_numericShift = 0;
oFF.RsVizNumberFormattingInfo.prototype.m_showSignAs = null;
oFF.RsVizNumberFormattingInfo.prototype.m_useFormattingFromDataCell = false;
oFF.RsVizNumberFormattingInfo.prototype.getMaxDecimalPlaces = function()
{
	return this.m_maxDecimalPlaces;
};
oFF.RsVizNumberFormattingInfo.prototype.getMinDecimalPlaces = function()
{
	return this.m_minDecimalPlaces;
};
oFF.RsVizNumberFormattingInfo.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.RsVizNumberFormattingInfo.prototype.getShowSignAs = function()
{
	return this.m_showSignAs;
};
oFF.RsVizNumberFormattingInfo.prototype.isShowPlusSign = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_showSignAs) && oFF.XString.startsWith(this.m_showSignAs, "+");
};
oFF.RsVizNumberFormattingInfo.prototype.isUseFormattingFromDataCell = function()
{
	return this.m_useFormattingFromDataCell;
};
oFF.RsVizNumberFormattingInfo.prototype.releaseObject = function()
{
	this.m_showSignAs = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.RsVizTupleElement = function() {};
oFF.RsVizTupleElement.prototype = new oFF.XObject();
oFF.RsVizTupleElement.prototype._ff_c = "RsVizTupleElement";

oFF.RsVizTupleElement.createTupleElement = function(dimensionMember, displayLevel, parentIndex, drillState, key, text, displayText, feedTypes, formattedValueList, valueList, valueTypeList, presentationTypeList, memberType, hierarchyNavigation)
{
	let newInstance = new oFF.RsVizTupleElement();
	newInstance.m_displayLevel = displayLevel;
	newInstance.m_drillState = drillState;
	newInstance.m_member = dimensionMember;
	newInstance.m_parentIndex = parentIndex;
	newInstance.m_key = key;
	newInstance.m_text = text;
	newInstance.m_displayText = displayText;
	newInstance.m_feedTypes = feedTypes;
	newInstance.m_formattedValueList = formattedValueList;
	newInstance.m_valueList = valueList;
	newInstance.m_valueTypeList = valueTypeList;
	newInstance.m_presentationTypeList = presentationTypeList;
	newInstance.m_memberType = memberType;
	newInstance.m_hierarchyNavigation = hierarchyNavigation;
	return newInstance;
};
oFF.RsVizTupleElement.prototype.m_displayLevel = 0;
oFF.RsVizTupleElement.prototype.m_displayText = null;
oFF.RsVizTupleElement.prototype.m_drillState = null;
oFF.RsVizTupleElement.prototype.m_feedTypes = null;
oFF.RsVizTupleElement.prototype.m_formattedValueList = null;
oFF.RsVizTupleElement.prototype.m_hierarchyNavigation = null;
oFF.RsVizTupleElement.prototype.m_key = null;
oFF.RsVizTupleElement.prototype.m_member = null;
oFF.RsVizTupleElement.prototype.m_memberType = null;
oFF.RsVizTupleElement.prototype.m_parentIndex = 0;
oFF.RsVizTupleElement.prototype.m_presentationTypeList = null;
oFF.RsVizTupleElement.prototype.m_text = null;
oFF.RsVizTupleElement.prototype.m_valueList = null;
oFF.RsVizTupleElement.prototype.m_valueTypeList = null;
oFF.RsVizTupleElement.prototype.compareTo = function(objectToCompare)
{
	if (oFF.isNull(objectToCompare))
	{
		return 1;
	}
	let otherObject = objectToCompare;
	let keys = this.m_feedTypes.getKeysAsReadOnlyList();
	let size = keys.size();
	for (let i = 0; i < size; i++)
	{
		let key = keys.get(i);
		let ftThis = this.m_feedTypes.getByKey(key);
		let ftThat = otherObject.m_feedTypes.getByKey(key);
		if (oFF.isNull(ftThat))
		{
			return 1;
		}
		let compVal = ftThis.getInteger() - ftThat.getInteger();
		if (compVal !== 0)
		{
			return compVal;
		}
	}
	return oFF.XString.isEqual(this.getKey(), otherObject.getKey()) ? 0 : 1;
};
oFF.RsVizTupleElement.prototype.getDate = function(fallbackLevel)
{
	if (oFF.isNull(this.m_member))
	{
		return null;
	}
	for (let i = 0; i < this.m_valueList.size(); i++)
	{
		let fieldValue = this.m_valueList.get(i);
		if (fieldValue.getValueType() === oFF.XValueType.DATE)
		{
			return fieldValue;
		}
		if (fallbackLevel === 0)
		{
			return null;
		}
		let rep = fieldValue.getStringRepresentation();
		if (fallbackLevel === 2)
		{
			rep = oFF.XStringUtils.concatenate2(rep, "01");
		}
		else if (fallbackLevel === 3)
		{
			rep = oFF.XStringUtils.concatenate2(rep, "0101");
		}
		try
		{
			if (oFF.XString.startsWith(rep, "!") && oFF.XString.size(rep) === 9)
			{
				return oFF.XDate.createDateFromString(oFF.XString.substring(rep, 1, 9), oFF.DateTimeFormat.SAP);
			}
			else if (oFF.XString.size(rep) === 8)
			{
				return oFF.XDate.createDateFromString(rep, oFF.DateTimeFormat.SAP);
			}
			else if (oFF.XString.startsWith(rep, "!") && oFF.XString.size(rep) === 11)
			{
				return oFF.XDate.createDateFromString(oFF.XString.substring(rep, 1, 11), oFF.DateTimeFormat.ISO);
			}
			else if (oFF.XString.size(rep) === 10)
			{
				return oFF.XDate.createDateFromString(rep, oFF.DateTimeFormat.ISO);
			}
		}
		catch (t)
		{
			continue;
		}
	}
	return null;
};
oFF.RsVizTupleElement.prototype.getDimensionMember = function()
{
	return this.m_member;
};
oFF.RsVizTupleElement.prototype.getDisplayLevel = function()
{
	return this.m_displayLevel;
};
oFF.RsVizTupleElement.prototype.getDrillState = function()
{
	return this.m_drillState;
};
oFF.RsVizTupleElement.prototype.getFeedTypes = function()
{
	return this.m_feedTypes.getKeysAsReadOnlyList();
};
oFF.RsVizTupleElement.prototype.getFormattedDate = function()
{
	if (oFF.isNull(this.m_member))
	{
		return null;
	}
	for (let i = 0; i < this.m_valueList.size(); i++)
	{
		let fieldValue = this.m_valueList.get(i);
		if (fieldValue.getValueType() === oFF.XValueType.DATE)
		{
			return fieldValue.toString();
		}
	}
	return this.m_text;
};
oFF.RsVizTupleElement.prototype.getFormattedText = function()
{
	let prefix = "";
	let suffix = "";
	if (oFF.notNull(this.m_drillState) && this.m_drillState !== oFF.DrillState.LEAF && this.m_drillState !== oFF.DrillState.LEAF_UDH)
	{
		if (this.m_displayLevel === 0)
		{
			prefix = "<b>";
			suffix = "</b>";
		}
		else if (this.m_displayLevel === 1)
		{
			prefix = "<b><em>";
			suffix = "</em></b>";
		}
		else if (this.m_displayLevel === 2)
		{
			prefix = "<em>";
			suffix = "</em>";
		}
	}
	return oFF.XStringUtils.concatenate3(prefix, this.m_text, suffix);
};
oFF.RsVizTupleElement.prototype.getFormattedValueList = function()
{
	return this.m_formattedValueList;
};
oFF.RsVizTupleElement.prototype.getHierarchyNavigation = function()
{
	return this.m_hierarchyNavigation;
};
oFF.RsVizTupleElement.prototype.getKey = function()
{
	if (this.m_memberType.isResult() && oFF.notNull(this.m_member))
	{
		return this.m_member.getFormattedValue();
	}
	return this.m_key;
};
oFF.RsVizTupleElement.prototype.getParentIndex = function()
{
	return this.m_parentIndex;
};
oFF.RsVizTupleElement.prototype.getPresentationTypeList = function()
{
	return this.m_presentationTypeList;
};
oFF.RsVizTupleElement.prototype.getText = function()
{
	return this.m_displayText;
};
oFF.RsVizTupleElement.prototype.getValueTypeList = function()
{
	return this.m_valueTypeList;
};
oFF.RsVizTupleElement.prototype.isSelectedByList = function(feedSelector)
{
	let feedTypes = this.m_feedTypes.getKeysAsReadOnlyList();
	if (oFF.XCollectionUtils.hasElements(this.m_feedTypes) && !oFF.XCollectionUtils.hasElements(feedSelector))
	{
		return true;
	}
	for (let i = 0; i < this.m_feedTypes.size(); i++)
	{
		if (feedSelector.contains(feedTypes.get(i)))
		{
			return true;
		}
	}
	return false;
};
oFF.RsVizTupleElement.prototype.isSelectedByString = function(feedSelector)
{
	return oFF.XStringUtils.isNullOrEmpty(feedSelector) || this.m_feedTypes.containsKey(feedSelector);
};
oFF.RsVizTupleElement.prototype.isTotal = function()
{
	return oFF.notNull(this.m_memberType) && this.m_memberType.isTypeOf(oFF.MemberType.RESULT);
};
oFF.RsVizTupleElement.prototype.releaseObject = function()
{
	this.m_member = null;
	this.m_key = null;
	this.m_text = null;
	this.m_displayText = null;
	this.m_feedTypes = oFF.XObjectExt.release(this.m_feedTypes);
	this.m_formattedValueList = oFF.XObjectExt.release(this.m_formattedValueList);
	this.m_valueList = oFF.XObjectExt.release(this.m_valueList);
	this.m_valueTypeList = oFF.XObjectExt.release(this.m_valueTypeList);
	this.m_presentationTypeList = oFF.XObjectExt.release(this.m_presentationTypeList);
	this.m_memberType = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RsVizTupleElement.prototype.toString = function()
{
	return oFF.XStringUtils.concatenate5(this.m_feedTypes.toString(), "::<", this.m_key, ">::", this.m_text);
};

oFF.RsVizFrameRenderer = function() {};
oFF.RsVizFrameRenderer.prototype = new oFF.XObject();
oFF.RsVizFrameRenderer.prototype._ff_c = "RsVizFrameRenderer";

oFF.RsVizFrameRenderer.create = function()
{
	return new oFF.RsVizFrameRenderer();
};
oFF.RsVizFrameRenderer.prototype.render = function(type, rs)
{
	let structure = oFF.PrFactory.createStructure();
	let vizDef = rs.getQueryModel().getVizManager().getVizDef();
	if (oFF.notNull(vizDef) && vizDef.containsKey(oFF.VizDefConstants.K_CHART) && rs.getAvailableDataCellCount() > 0)
	{
		structure.putString("test", "testValue");
	}
	structure.putString("test2", "testValue2");
	return structure;
};
oFF.RsVizFrameRenderer.prototype.renderVisualizationWithResultSet = function(visualizationDefinition, cursorResultSet)
{
	return this.render(visualizationDefinition.getSemanticBindingType(), cursorResultSet);
};

oFF.RsVizInstanceRenderer = function() {};
oFF.RsVizInstanceRenderer.prototype = new oFF.XObject();
oFF.RsVizInstanceRenderer.prototype._ff_c = "RsVizInstanceRenderer";

oFF.RsVizInstanceRenderer.create = function()
{
	return new oFF.RsVizInstanceRenderer();
};
oFF.RsVizInstanceRenderer.prototype.render = function(type, rs)
{
	let structure = oFF.PrFactory.createStructure();
	let vizDef = rs.getQueryModel().getVizManager().getVizDef();
	if (oFF.notNull(vizDef) && vizDef.containsKey(oFF.VizDefConstants.K_CHART) && rs.getAvailableDataCellCount() > 0)
	{
		structure.putString("test", "testValue");
	}
	return structure;
};
oFF.RsVizInstanceRenderer.prototype.renderVisualizationWithResultSet = function(visualizationDefinition, cursorResultSet)
{
	return this.render(visualizationDefinition.getSemanticBindingType(), cursorResultSet);
};

oFF.RsHiChartVizUserPrefrence = {

	create:function()
	{
			return new oFF.RsHiChartVizUserPrefrence();
	},
	userPrefrence:function(theChartData, userPrefrence, chartType)
	{
			if (!oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_SOLID_GAUGE))
		{
			let userDatalabels = userPrefrence.getStructureByKey(oFF.VizDefConstants.K_DATA_LABEL);
			if (oFF.notNull(userDatalabels))
			{
				let userDatalabelsStyle = userDatalabels.getStructureByKey(oFF.VizDefConstants.K_STYLE);
				let userDatalabelsStyleColor = userDatalabelsStyle.getStringByKey(oFF.VizDefConstants.K_COLOR);
				let userDatalabelsStyleFontWeight = userDatalabelsStyle.getStringByKey(oFF.VizDefConstants.K_FONT_WEIGHT);
				let userDatalabelsStyleforSize = userDatalabelsStyle.getStringByKey(oFF.VizDefConstants.K_FONT_SIZE);
				let plotOptions = theChartData.getStructureByKey(oFF.VizDefConstants.K_PLOT_OPTIONS);
				if (oFF.notNull(plotOptions))
				{
					let plotOptionChartTypeStructureSeries = plotOptions.getStructureByKey(chartType);
					if (oFF.notNull(plotOptionChartTypeStructureSeries))
					{
						let plotOptionChartTypeStructureDatalabels = plotOptionChartTypeStructureSeries.getStructureByKey(oFF.VizDefConstants.K_DATA_LABELS);
						let yAxis = theChartData.getListByKey(oFF.VizDefConstants.K_Y_AXIS);
						if (oFF.notNull(yAxis))
						{
							let yAxisStack = yAxis.getStructureAt(0);
							if (oFF.notNull(yAxisStack))
							{
								if (yAxisStack.containsKey(oFF.VizDefConstants.K_STACK_LABELS))
								{
									let stackLabelsHi = yAxisStack.putNewStructure(oFF.VizDefConstants.K_STACK_LABELS);
									stackLabelsHi.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
									let stackLabelsHiStyle = stackLabelsHi.putNewStructure(oFF.VizDefConstants.K_STYLE);
									if (oFF.notNull(userDatalabelsStyleColor))
									{
										stackLabelsHiStyle.putString(oFF.VizDefConstants.K_COLOR, userDatalabelsStyleColor);
										stackLabelsHiStyle.putString(oFF.VizDefConstants.K_FILL, userDatalabelsStyleColor);
									}
									stackLabelsHiStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, userDatalabelsStyleFontWeight);
									stackLabelsHiStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, userDatalabelsStyleforSize);
								}
							}
						}
						if (oFF.notNull(plotOptionChartTypeStructureDatalabels))
						{
							let plotOptionChartTypeStructureDatalabelsStyle = plotOptionChartTypeStructureDatalabels.getStructureByKey(oFF.VizDefConstants.K_STYLE);
							if (oFF.notNull(plotOptionChartTypeStructureDatalabelsStyle))
							{
								if (oFF.notNull(userDatalabelsStyleColor))
								{
									plotOptionChartTypeStructureDatalabelsStyle.putString(oFF.VizDefConstants.K_COLOR, userDatalabelsStyleColor);
									plotOptionChartTypeStructureDatalabelsStyle.putString(oFF.VizDefConstants.K_FILL, userDatalabelsStyleColor);
								}
								plotOptionChartTypeStructureDatalabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, userDatalabelsStyleFontWeight);
								plotOptionChartTypeStructureDatalabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, userDatalabelsStyleforSize);
							}
						}
					}
				}
			}
			let userTitle = userPrefrence.getStructureByKey(oFF.VizDefConstants.K_TITLE);
			if (oFF.notNull(userTitle))
			{
				let isTitleVisible = userTitle.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, true);
				let title = theChartData.getStructureByKey(oFF.VizDefConstants.K_TITLE);
				if (oFF.notNull(title))
				{
					if (isTitleVisible === false)
					{
						title.putString(oFF.VizDefConstants.K_TEXT, "");
					}
					let userPrefsTitleStyle = userTitle.getStructureByKey(oFF.VizDefConstants.K_STYLE);
					if (oFF.notNull(userPrefsTitleStyle))
					{
						title.put(oFF.VizDefConstants.K_STYLE, userPrefsTitleStyle);
					}
				}
			}
			let userSubTitle = userPrefrence.getStructureByKey(oFF.VizDefConstants.K_SUB_TITLE);
			if (oFF.notNull(userSubTitle))
			{
				let isSubTitleVisible = userSubTitle.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, true);
				let subTitle = theChartData.getStructureByKey(oFF.VizDefConstants.K_SUBTITLE);
				if (oFF.notNull(subTitle))
				{
					if (isSubTitleVisible === false)
					{
						subTitle.putString(oFF.VizDefConstants.K_TEXT, "");
					}
					let userPrefsSubTitleStyle = userSubTitle.getStructureByKey(oFF.VizDefConstants.K_STYLE);
					if (oFF.notNull(userPrefsSubTitleStyle))
					{
						subTitle.put(oFF.VizDefConstants.K_STYLE, userPrefsSubTitleStyle);
					}
				}
			}
			let xAxisElement = theChartData.getByKey(oFF.VizDefConstants.K_X_AXIS);
			let xAxis = oFF.notNull(xAxisElement) && xAxisElement.isList() ? xAxisElement.asList() : null;
			let xAxisStruct = oFF.notNull(xAxisElement) && xAxisElement.isStructure() ? xAxisElement.asStructure() : oFF.XCollectionUtils.hasElements(xAxis) ? xAxis.getStructureAt(0) : null;
			let generalUserPrefs = userPrefrence.getStructureByKey(oFF.VizDefConstants.K_GENERAL);
			if (oFF.notNull(generalUserPrefs))
			{
				let axisLabel = generalUserPrefs.getStructureByKey(oFF.VizDefConstants.K_AXIS_LABEL);
				if (oFF.notNull(axisLabel))
				{
					if (oFF.notNull(xAxisStruct))
					{
						let xAxisStructLabels = xAxisStruct.getStructureByKey(oFF.VizDefConstants.K_LABELS);
						if (oFF.isNull(xAxisStructLabels))
						{
							xAxisStructLabels = xAxisStruct.putNewStructure(oFF.VizDefConstants.K_LABELS);
						}
						let userAxisLabelsStyle = axisLabel.getStructureByKey(oFF.VizDefConstants.K_STYLE);
						if (oFF.notNull(userAxisLabelsStyle))
						{
							xAxisStructLabels.put(oFF.VizDefConstants.K_STYLE, userAxisLabelsStyle);
						}
					}
				}
			}
			let chartlegend = theChartData.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
			if (oFF.notNull(chartlegend))
			{
				let userLegend = userPrefrence.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
				if (oFF.notNull(userLegend))
				{
					let userLegendLabels = userLegend.getStructureByKey(oFF.VizDefConstants.K_LABEL);
					if (oFF.notNull(userLegendLabels))
					{
						let userLegendStyle = userLegendLabels.getStructureByKey(oFF.VizDefConstants.K_STYLE);
						if (oFF.notNull(userLegendStyle))
						{
							chartlegend.put(oFF.VizDefConstants.K_ITEM_STYLE, userLegendStyle);
						}
					}
				}
			}
		}
		return theChartData;
	}
};

oFF.RsHiChartVizUtils = {

	addColorGradient:function(globalDef, vizDef, theChartData)
	{
			if (oFF.notNull(vizDef))
		{
			let colorScheme = vizDef.getStructureByKey(oFF.VizDefConstants.K_COLOR_SCHEME);
			let colorSync = globalDef.getStructureByKey(oFF.VizDefConstants.K_COLOR_SYNC);
			if (!vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getBooleanByKeyExt(oFF.VizDefConstants.K_IS_EXCLUDE_COLOR_SYNC, false))
			{
				if (oFF.XCollectionUtils.hasElements(colorScheme))
				{
					let palleteDesc = colorScheme.getStructureByKey(oFF.VizDefConstants.K_PALETTE_DESC);
					if (oFF.notNull(palleteDesc))
					{
						let palette = theChartData.putNewStructure(oFF.VizDefConstants.K_PALETTE);
						let keysList = palette.putNewList(oFF.VizDefConstants.K_GRADIENT_KEYS);
						let gradientstruct = palleteDesc.getStructureByKey(oFF.VizDefConstants.K_GRADIENT);
						if (oFF.notNull(gradientstruct))
						{
							let gradientKeys = gradientstruct.getKeysAsReadOnlyList();
							let listofKeys = oFF.XList.create();
							for (let yyy = 0; yyy < gradientKeys.size(); yyy++)
							{
								listofKeys.add(oFF.XDoubleValue.create(oFF.XDouble.convertFromString(gradientKeys.get(yyy))));
							}
							listofKeys.sortByComparator(new oFF.XComparatorDouble());
							for (let yfc = 0; yfc < listofKeys.size(); yfc++)
							{
								keysList.addDouble(listofKeys.get(yfc).getDouble());
							}
							palette.put(oFF.VizDefConstants.K_GRADIENT, gradientstruct);
						}
					}
				}
			}
			let feedStruct;
			let colorSyncColordim;
			let colordimensionId = null;
			let chartObject = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
			if (oFF.notNull(chartObject))
			{
				let bindingsList = chartObject.getListByKey(oFF.VizDefConstants.K_BINDINGS);
				for (let bIndex = 0; bIndex < bindingsList.size(); bIndex++)
				{
					feedStruct = bindingsList.getStructureAt(bIndex);
					if (oFF.XString.isEqual(feedStruct.getStringByKey(oFF.VizDefConstants.K_FEED), oFF.VizDefConstants.K_COLOR))
					{
						let sourceList = feedStruct.getListByKey(oFF.VizDefConstants.K_SOURCE);
						if (sourceList.size() > 0)
						{
							colordimensionId = sourceList.getStructureAt(0).getStringByKey(oFF.VizDefConstants.K_ID);
						}
						break;
					}
				}
				let storyWideSettings = globalDef.getStructureByKey(oFF.VizDefConstants.K_STORY_WIDE_SETTINGS);
				if (oFF.notNull(storyWideSettings))
				{
					let customColorPalette = storyWideSettings.getListByKey(oFF.VizDefConstants.K_CUSTOM_COLOR_PALETTES);
					if (oFF.notNull(customColorPalette))
					{
						let customColorPaletteGradient = customColorPalette.getStructureAt(0).getStructureByKey(oFF.VizDefConstants.K_GRADIENT);
						let strcut = customColorPaletteGradient.getKeysAsReadOnlyList();
						let stopList = oFF.PrFactory.createList();
						for (let oo = 0; oo < strcut.size(); oo++)
						{
							let list = oFF.PrFactory.createList();
							list.addString(strcut.get(oo));
							list.addString(customColorPaletteGradient.getStringByKey(strcut.get(oo)));
							stopList.add(list);
						}
					}
				}
				if (oFF.notNull(colorSync))
				{
					colorSyncColordim = colorSync.getStructureByKey(colordimensionId);
					if (oFF.notNull(colorSyncColordim))
					{
						let explicitColorAssignments = colorSyncColordim.getStructureByKey(oFF.VizDefConstants.K_EXPLICIT_COLOR_ASSIGNMENTS);
						theChartData.put(oFF.VizDefConstants.K_EXPLICIT_COLOR_ASSIGNMENTS, explicitColorAssignments);
					}
				}
			}
		}
	},
	chartLegendBuilder:function(theChartData)
	{
			let legend = theChartData.putNewStructure(oFF.VizDefConstants.K_LEGEND);
		legend.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
		legend.putInteger(oFF.VizDefConstants.K_SYMBOL_RADIUS, 0);
		legend.putString(oFF.VizDefConstants.K_LAYOUT, oFF.VizDefConstants.V_VERTICAL);
		legend.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_RIGHT);
		legend.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
		legend.putBoolean(oFF.VizDefConstants.K_SQUARE_SYMBOL, true);
		let legenditemStyle = legend.putNewStructure(oFF.VizDefConstants.K_ITEM_STYLE);
		legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
		legenditemStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_NORMAL);
		legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
		let legenditemHoverStyle = legend.putNewStructure(oFF.VizDefConstants.K_ITEM_HOVER_STYLE);
		legenditemHoverStyle.putString(oFF.VizDefConstants.K_CURSOR_STYLE, "default");
	},
	chartPlotBuilder:function(theChartData, chartType, plotArea)
	{
			let isDataLabels = true;
		if (oFF.notNull(plotArea) && plotArea.hasElements())
		{
			let dataLabelPlotArea = plotArea.getStructureByKey(oFF.VizDefConstants.K_DATA_LABEL);
			isDataLabels = dataLabelPlotArea.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, false);
		}
		let plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
		let plotOptionsSeries = plotOptions.putNewStructure(oFF.VizDefConstants.K_SERIES);
		plotOptionsSeries.putInteger(oFF.VizDefConstants.K_CROP_THRESHOLD, 1000);
		let plotOptionChartTypeStructure = plotOptions.putNewStructure(chartType);
		plotOptionChartTypeStructure.putBoolean(oFF.VizDefConstants.K_GROUPING, true);
		let dataLabels = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
		dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, isDataLabels);
		dataLabels.putString(oFF.VizDefConstants.K_FORMAT, "{point.yFormatted} ");
		let dataLabelsStyle = dataLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_BOLD);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_COLOR, "rgb(88,89,91)");
	},
	chartTitleBuilder:function(theChartData, charTtitle, chartSubtitle)
	{
			if (oFF.notNull(charTtitle))
		{
			let title = theChartData.putNewStructure(oFF.VizDefConstants.K_TITLE);
			title.putString(oFF.VizDefConstants.K_TEXT, charTtitle);
			title.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_LEFT);
		}
		if (oFF.notNull(chartSubtitle))
		{
			let subtitle = theChartData.putNewStructure(oFF.VizDefConstants.K_SUBTITLE);
			subtitle.putString(oFF.VizDefConstants.K_TEXT, chartSubtitle);
			subtitle.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_LEFT);
		}
	},
	checkShowLegend:function(vizDef, theChartData, chartType, isShowLegendInitial)
	{
			let plotOptions = theChartData.getStructureByKey(oFF.VizDefConstants.K_PLOT_OPTIONS);
		let plotOptionChartTypeStructure = plotOptions.getStructureByKey(chartType);
		plotOptionChartTypeStructure.putBoolean(oFF.VizDefConstants.K_SHOW_IN_LEGEND, isShowLegendInitial);
		let legendViz = theChartData.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
		legendViz.putBoolean(oFF.VizDefConstants.K_ENABLED, isShowLegendInitial);
		if (oFF.isNull(vizDef))
		{
			return;
		}
		let chartObject = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
		if (oFF.isNull(chartObject))
		{
			return;
		}
		let isShowLegend = false;
		let isShowLegendFinal = isShowLegendInitial;
		let chartProperties = chartObject.getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
		if (oFF.notNull(chartProperties))
		{
			let legendGroup = chartProperties.getStructureByKey(oFF.VizDefConstants.K_LEGEND_GROUP);
			if (oFF.notNull(legendGroup))
			{
				if (legendGroup.getElementTypeByKey(oFF.VizDefConstants.K_VISIBLE) === oFF.PrElementType.BOOLEAN)
				{
					isShowLegend = legendGroup.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, isShowLegendInitial);
				}
				else if (legendGroup.getElementTypeByKey(oFF.VizDefConstants.K_VISIBLE) === oFF.PrElementType.STRING)
				{
					isShowLegend = oFF.XBoolean.convertFromStringWithDefault(legendGroup.getStringByKey(oFF.VizDefConstants.K_VISIBLE), isShowLegendInitial);
				}
				else
				{
					isShowLegend = isShowLegendInitial;
				}
				let isResponsiveLegend = legendGroup.getBooleanByKeyExt(oFF.VizDefConstants.K_RESPONSIVE, true);
				isShowLegendFinal = isShowLegend && !isResponsiveLegend || isShowLegendInitial && isResponsiveLegend;
				legendViz.putBoolean(oFF.VizDefConstants.K_ENABLED, isShowLegendFinal);
			}
		}
		plotOptionChartTypeStructure.putBoolean(oFF.VizDefConstants.K_SHOW_IN_LEGEND, isShowLegendInitial);
	},
	create:function()
	{
			return new oFF.RsHiChartVizUtils();
	},
	datalabelPloter:function(vizDatalabel, datalabelChart)
	{
			let isDataLabels = vizDatalabel.getBooleanByKeyExt(oFF.VizDefConstants.K_VISIBLE, true);
		let isHideWhenOverlap = vizDatalabel.getBooleanByKeyExt(oFF.VizDefConstants.K_IS_HIDDEN_WHEN_OVERLAP, true);
		let datalabelStyle = vizDatalabel.getStructureByKey(oFF.VizDefConstants.K_STYLE);
		let fontSize = datalabelStyle.getStringByKey(oFF.VizDefConstants.K_FONT_SIZE);
		let fontWeight = datalabelStyle.getStringByKey(oFF.VizDefConstants.K_FONT_WEIGHT);
		let fontFamily = datalabelStyle.getStringByKey(oFF.VizDefConstants.K_FONT_FAMILY);
		let color = datalabelStyle.getStringByKey(oFF.VizDefConstants.K_COLOR);
		datalabelChart.putBoolean(oFF.VizDefConstants.K_ENABLED, isDataLabels);
		datalabelChart.putBoolean(oFF.VizDefConstants.K_HIDE_WHEN_OVERLAP, isHideWhenOverlap);
		let dataLabelsStyle = datalabelChart.putNewStructure(oFF.VizDefConstants.K_STYLE);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, fontFamily);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, fontSize);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, fontWeight);
		if (!oFF.XString.isEqual(color, null))
		{
			dataLabelsStyle.putString("fill", color);
			dataLabelsStyle.putString(oFF.VizDefConstants.K_COLOR, color);
		}
		dataLabelsStyle.putString("textOutline", "0px");
		return datalabelChart;
	},
	vizProcessor:function(vizDef, chartTypeInfo, theChartData, chartType)
	{
			let chartTitle = null;
		let chartSubTitle = null;
		let chartProperties;
		let legendlObject;
		let layoutObject;
		let legendGroup;
		let plotArea = oFF.PrFactory.createStructure();
		if (oFF.notNull(vizDef))
		{
			let chartObject = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
			let legendViz = theChartData.putNewStructure(oFF.VizDefConstants.K_LEGEND);
			if (oFF.notNull(chartObject))
			{
				chartTitle = chartObject.getStringByKey(oFF.VizDefConstants.K_TITLE);
				chartSubTitle = chartObject.getStringByKey(oFF.VizDefConstants.K_SUB_TITLE);
				oFF.RsHiChartVizUtils.chartTitleBuilder(theChartData, chartTitle, chartSubTitle);
				let plotOptionChart = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
				let plotOptionChartTypeStructure = plotOptionChart.putNewStructure(chartType);
				let plotOptionsSeries = plotOptionChart.putNewStructure(oFF.VizDefConstants.K_SERIES);
				plotOptionsSeries.putString(oFF.VizDefConstants.K_BORDER_COLOR, oFF.VizDefConstants.K_TRANSPARENT);
				let plotOptionsSeriesMarker = plotOptionsSeries.putNewStructure(oFF.VizDefConstants.K_MARKER);
				plotOptionsSeriesMarker.putString(oFF.VizDefConstants.K_SYMBOL, "circle");
				let dataLabels = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
				chartProperties = chartObject.getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
				if (oFF.notNull(chartProperties))
				{
					let generalObject = chartProperties.getStructureByKey(oFF.VizDefConstants.K_GENERAL);
					if (oFF.notNull(generalObject))
					{
						layoutObject = generalObject.getStructureByKey(oFF.VizDefConstants.K_LAYOUT);
						if (oFF.notNull(layoutObject))
						{
							let spacingBottom = layoutObject.getIntegerByKey(oFF.VizDefConstants.K_PADDING_BOTTOM);
							chartTypeInfo.putInteger(oFF.VizDefConstants.K_SPACING_BOTTOM, spacingBottom);
						}
						else
						{
							chartTypeInfo.putInteger(oFF.VizDefConstants.K_SPACING_BOTTOM, 0);
						}
					}
					legendlObject = chartProperties.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
					if (oFF.notNull(legendlObject))
					{
						legendViz = theChartData.putNewStructure(oFF.VizDefConstants.K_LEGEND);
						let legendLabel = legendlObject.getStructureByKey(oFF.VizDefConstants.K_LABEL);
						if (oFF.notNull(legendLabel))
						{
							let legendlayoutStyle = legendLabel.getStructureByKey(oFF.VizDefConstants.K_STYLE);
							if (oFF.notNull(legendlayoutStyle))
							{
								let fontFamily = legendlayoutStyle.getStringByKey(oFF.VizDefConstants.K_FONT_FAMILY);
								let fontSize = legendlayoutStyle.getStringByKey(oFF.VizDefConstants.K_FONT_SIZE);
								let fontWeight = legendlayoutStyle.getStringByKey(oFF.VizDefConstants.K_FONT_WEIGHT);
								let legenditemStyle = legendViz.putNewStructure(oFF.VizDefConstants.K_ITEM_STYLE);
								legenditemStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, fontFamily);
								legenditemStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, fontWeight);
								legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, fontSize);
							}
						}
					}
					legendGroup = chartProperties.getStructureByKey(oFF.VizDefConstants.K_LEGEND_GROUP);
					if (oFF.notNull(legendGroup))
					{
						let legendGrouplayout = legendGroup.getStructureByKey(oFF.VizDefConstants.K_LAYOUT);
						if (oFF.notNull(legendGrouplayout))
						{
							let legendgroupPosition = legendGrouplayout.getStringByKey(oFF.VizDefConstants.K_POSITION);
							legendViz.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, legendgroupPosition);
						}
					}
					plotArea = chartProperties.getStructureByKey(oFF.VizDefConstants.K_PLOT_AREA);
					if (oFF.notNull(plotArea))
					{
						let vizDatalabel = plotArea.getStructureByKey(oFF.VizDefConstants.K_DATA_LABEL);
						if (oFF.notNull(vizDatalabel))
						{
							dataLabels = oFF.RsHiChartVizUtils.datalabelPloter(vizDatalabel, dataLabels);
						}
						let seriesDataLabels = plotOptionsSeries.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
						seriesDataLabels.putString(oFF.VizDefConstants.K_FORMAT, "{point.yFormatted}");
					}
				}
			}
		}
		else
		{
			legendlObject = theChartData.putNewStructure(oFF.VizDefConstants.K_LEGEND);
			legendlObject.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
			chartTypeInfo.putInteger(oFF.VizDefConstants.K_SPACING_TOP, 0);
			oFF.RsHiChartVizUtils.chartTitleBuilder(theChartData, chartTitle, chartSubTitle);
			oFF.RsHiChartVizUtils.chartLegendBuilder(theChartData);
			oFF.RsHiChartVizUtils.chartPlotBuilder(theChartData, chartType, plotArea);
		}
	}
};

oFF.RsHiChartVizUtilsCorrelation = {

	create:function()
	{
			return new oFF.RsHiChartVizUtilsCorrelation();
	},
	legendStyler:function(theChartData)
	{
			let legend = theChartData.putNewStructure(oFF.VizDefConstants.K_LEGEND);
		legend.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
		legend.putBoolean(oFF.VizDefConstants.K_SQUARE_SYMBOL, true);
		legend.putInteger(oFF.VizDefConstants.K_SYMBOL_RADIUS, 0);
		legend.putString(oFF.VizDefConstants.K_LAYOUT, oFF.VizDefConstants.V_HORIZONTAL);
		legend.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_CENTER);
		legend.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
		let legenditemStyle = legend.putNewStructure(oFF.VizDefConstants.K_ITEM_STYLE);
		legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
		legenditemStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_NORMAL);
		legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
	},
	renderValueAxis:function(axisData, axisDef, bAlignTitle)
	{
			let axisTitle = axisData.putNewStructure(oFF.VizDefConstants.K_TITLE);
		axisData.putInteger(oFF.VizDefConstants.K_GRIDLINE_WIDTH, 0);
		if (oFF.isNull(axisDef))
		{
			return;
		}
		axisData.putBoolean(oFF.VizDefConstants.K_VISIBLE, axisDef.getBooleanByKey(oFF.VizDefConstants.K_VISIBLE));
		let axisLine = axisDef.getStructureByKey(oFF.VizDefConstants.K_AXIS_LINE);
		axisData.putInteger(oFF.VizDefConstants.K_LINE_WIDTH, axisLine.getBooleanByKey(oFF.VizDefConstants.K_VISIBLE) ? 3 : 0);
		axisData.putString(oFF.VizDefConstants.K_LINE_COLOR, "#bbbdbf");
		let axisTick = axisDef.getStructureByKey(oFF.VizDefConstants.K_AXIS_TICK);
		let iTickLen = 0;
		if (oFF.notNull(axisTick) && axisTick.getBooleanByKey(oFF.VizDefConstants.K_VISIBLE))
		{
			iTickLen = axisTick.getIntegerByKey(oFF.VizDefConstants.K_SIZE);
		}
		axisData.putInteger(oFF.VizDefConstants.K_TICK_LENGTH, iTickLen);
		axisData.putString(oFF.VizDefConstants.K_TICK_COLOR, "rgb(166, 168, 171)");
		let axisLabelProperties = axisDef.getStructureByKey(oFF.VizDefConstants.K_LABEL);
		let axisLabel = axisData.putNewStructure(oFF.VizDefConstants.K_LABEL);
		axisLabel.putBoolean(oFF.VizDefConstants.K_ENABLED, axisLabelProperties.getBooleanByKey(oFF.VizDefConstants.K_VISIBLE));
		let labelFont = axisData.putNewStructure(oFF.VizDefConstants.K_STYLE);
		let labelProperties = axisLabelProperties.getStructureByKey(oFF.VizDefConstants.K_STYLE);
		labelFont.putString(oFF.VizDefConstants.K_COLOR, labelProperties.getStringByKey(oFF.VizDefConstants.K_COLOR));
		labelFont.putString(oFF.VizDefConstants.K_FONT_FAMILY, axisLabelProperties.getStringByKey(oFF.VizDefConstants.K_FONT_FAMILY));
		labelFont.putString(oFF.VizDefConstants.K_FONT_SIZE, axisLabelProperties.getStringByKey(oFF.VizDefConstants.K_FONT_SIZE));
		let titleProperties = axisDef.getStructureByKey(oFF.VizDefConstants.K_TITLE);
		axisTitle.putBoolean(oFF.VizDefConstants.K_ENABLED, titleProperties.getBooleanByKey(oFF.VizDefConstants.K_VISIBLE));
		if (bAlignTitle)
		{
			axisTitle.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_MIDDLE);
		}
		let axisTitleStyle = axisTitle.putNewStructure(oFF.VizDefConstants.K_STYLE);
		let titleFont = titleProperties.getStructureByKey(oFF.VizDefConstants.K_STYLE);
		axisTitleStyle.putString(oFF.VizDefConstants.K_COLOR, "#000000");
		axisTitleStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.K_BOLD);
		labelFont.putString(oFF.VizDefConstants.K_COLOR, titleFont.getStringByKey(oFF.VizDefConstants.K_COLOR));
		labelFont.putString(oFF.VizDefConstants.K_FONT_FAMILY, titleFont.getStringByKey(oFF.VizDefConstants.K_FONT_FAMILY));
		labelFont.putString(oFF.VizDefConstants.K_FONT_SIZE, titleFont.getStringByKey(oFF.VizDefConstants.K_FONT_SIZE));
	}
};

oFF.RsHiChartVizUtilsHeatmap = {

	create:function()
	{
			return new oFF.RsHiChartVizUtilsHeatmap();
	},
	rendrerHeatmap:function(theChartData, chartType, vizDef, globalDef)
	{
			let plotOptions = theChartData.getStructureByKey(oFF.VizDefConstants.K_PLOT_OPTIONS);
		if (oFF.isNull(plotOptions))
		{
			plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
		}
		let plotOptionChartTypeStructure = plotOptions.getStructureByKey(chartType);
		plotOptionChartTypeStructure.putBoolean(oFF.VizDefConstants.K_COLOR_BY_POINT, false);
		let chartTypeInfo = theChartData.getStructureByKey(oFF.VizDefConstants.K_CHART);
		chartTypeInfo.putString(oFF.VizDefConstants.K_TYPE, chartType);
		let isInverted = true;
		chartTypeInfo.putBoolean(oFF.VizDefConstants.K_INVERTED, isInverted);
		let colorAxis = theChartData.putNewStructure(oFF.VizDefConstants.K_COLOR_AXIS);
		let paletteChart = theChartData.getStructureByKey(oFF.VizDefConstants.K_PALETTE);
		if (oFF.notNull(paletteChart))
		{
			let thresholdList1 = oFF.PrFactory.createList();
			let altValue = 0;
			let colorInt = "#FFFFFF";
			let gradientKeys = paletteChart.getListByKey(oFF.VizDefConstants.K_GRADIENT_KEYS);
			let gradientStructure = paletteChart.getStructureByKey(oFF.VizDefConstants.K_GRADIENT);
			for (let gk = 0; gk < gradientKeys.size(); gk++)
			{
				let intervalList1 = oFF.PrFactory.createList();
				altValue = gradientKeys.getDoubleAt(gk) / 100;
				colorInt = gradientStructure.getStringByKey(oFF.XDouble.convertToString(gradientKeys.getDoubleAt(gradientKeys.size() - 1 - gk)));
				intervalList1.addDouble(altValue);
				intervalList1.addString(colorInt);
				thresholdList1.add(intervalList1);
			}
			colorAxis.put(oFF.VizDefConstants.K_STOPS, thresholdList1);
		}
		let isHeatmap = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_HEATMAP);
		if (oFF.notNull(globalDef))
		{
			let intervalStructure = oFF.PrFactory.createStructure();
			let minInterval = 0;
			let gradiantValue = 0;
			let intervalColor = "#FFFFFF";
			let thresholdIntervals = globalDef.getListByKey(oFF.VizDefConstants.K_THRESHOLDS);
			if (oFF.notNull(thresholdIntervals) && isHeatmap)
			{
				let thresholdList = oFF.PrFactory.createList();
				let maxElement = 1;
				if (theChartData.containsKey(oFF.VizDefConstants.K_MAX_ELEMENT))
				{
					maxElement = oFF.XMath.max(oFF.XDouble.convertToInt(theChartData.getDoubleByKey(oFF.VizDefConstants.K_MAX_ELEMENT)), oFF.XDouble.convertToInt(theChartData.getDoubleByKey(oFF.VizDefConstants.K_MAX_ELEMENT)) * -1);
				}
				for (let ti = 0; ti < thresholdIntervals.size(); ti++)
				{
					intervalStructure = thresholdIntervals.getStructureAt(ti);
					let intervalList = oFF.PrFactory.createList();
					minInterval = intervalStructure.getDoubleByKey(oFF.VizDefConstants.K_LOW);
					intervalColor = intervalStructure.getStringByKey(oFF.VizDefConstants.K_COLOR);
					gradiantValue = minInterval / maxElement;
					intervalList.addDouble(gradiantValue);
					intervalList.addString(intervalColor);
					thresholdList.add(intervalList);
				}
				colorAxis.put(oFF.VizDefConstants.K_STOPS, thresholdList);
			}
		}
		let legend = theChartData.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
		let xAxis = oFF.PrFactory.createList();
		let xAxisStruct = oFF.PrFactory.createStructure();
		let yAxis = oFF.PrFactory.createList();
		let yAxisStruct = oFF.PrFactory.createStructure();
		if (isHeatmap)
		{
			xAxis = theChartData.getListByKey(oFF.VizDefConstants.K_X_AXIS);
			if (oFF.isNull(xAxis))
			{
				xAxis = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
				xAxisStruct = xAxis.addNewStructure();
			}
			else
			{
				xAxisStruct = xAxis.getStructureAt(0);
			}
			yAxis = theChartData.getListByKey(oFF.VizDefConstants.K_Y_AXIS);
			if (oFF.isNull(yAxis))
			{
				yAxis = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
				yAxisStruct = yAxis.addNewStructure();
			}
			else
			{
				yAxisStruct = yAxis.getStructureAt(0);
			}
		}
		let dataLabels = plotOptionChartTypeStructure.getStructureByKey(oFF.VizDefConstants.K_DATA_LABELS);
		let yAxisTitle = yAxisStruct.putNewStructure(oFF.VizDefConstants.K_TITLE);
		let xAxisTitle = xAxisStruct.putNewStructure(oFF.VizDefConstants.K_TITLE);
		yAxisTitle.putString(oFF.VizDefConstants.K_TEXT, "");
		xAxisTitle.putString(oFF.VizDefConstants.K_TEXT, "");
		let minColor = "#a0f3ff";
		let maxColor = "#003c6b";
		let isDataLabels = true;
		if (oFF.notNull(vizDef))
		{
			let colorScheme = vizDef.getStructureByKey(oFF.VizDefConstants.K_COLOR_SCHEME);
			if (oFF.notNull(colorScheme))
			{
				let paletteColors = colorScheme.getListByKey(oFF.VizDefConstants.K_PALETTE_COLORS);
				if (oFF.notNull(paletteColors))
				{
					if (paletteColors.size() > 0)
					{
						maxColor = paletteColors.getStringAt(0);
						minColor = paletteColors.getStringAt(paletteColors.size() - 1);
					}
				}
			}
			let vizProp = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
			if (oFF.notNull(vizProp))
			{
				let vizPropCategoryAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_CATEGORY_AXIS2);
				if (oFF.notNull(vizPropCategoryAxis))
				{
					xAxisStruct = oFF.RsHiChartUtils.axisPloter(vizPropCategoryAxis, xAxisStruct, chartType, true);
				}
				let vizPropCategoryAxis2 = vizProp.getStructureByKey(oFF.VizDefConstants.K_CATEGORY_AXIS);
				if (oFF.notNull(vizPropCategoryAxis2))
				{
					yAxisStruct = oFF.RsHiChartUtils.axisPloter(vizPropCategoryAxis2, yAxisStruct, chartType, true);
				}
				let vizPlotArea = vizProp.getStructureByKey(oFF.VizDefConstants.K_PLOT_AREA);
				if (oFF.notNull(vizPlotArea))
				{
					dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, isDataLabels);
				}
			}
			colorAxis.putString(oFF.VizDefConstants.K_MIN_COLOR, minColor);
			colorAxis.putString(oFF.VizDefConstants.K_MAX_COLOR, maxColor);
			colorAxis.putBoolean(oFF.VizDefConstants.K_REVERSED, false);
		}
		else
		{
			let yAxisLabels = yAxisStruct.putNewStructure(oFF.VizDefConstants.K_LABELS);
			let yAxisLabelsStyle = yAxisLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
			yAxisLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "13px");
			yAxisLabelsStyle.putString(oFF.VizDefConstants.K_FILL, "rgb(166, 168, 171)");
			yAxisLabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_NORMAL);
			xAxisStruct.putString(oFF.VizDefConstants.K_LINE_COLOR, "#FFFFFF");
			let xAxisLabels1 = xAxisStruct.putNewStructure(oFF.VizDefConstants.K_LABELS);
			let xAxisLabelsStyle1 = xAxisLabels1.putNewStructure(oFF.VizDefConstants.K_STYLE);
			xAxisLabelsStyle1.putString(oFF.VizDefConstants.K_FONT_SIZE, "13px");
			xAxisLabelsStyle1.putString(oFF.VizDefConstants.K_FILL, "rgb(166, 168, 171)");
			xAxisLabelsStyle1.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_NORMAL);
			colorAxis.putString(oFF.VizDefConstants.K_MIN_COLOR, minColor);
			colorAxis.putString(oFF.VizDefConstants.K_MAX_COLOR, maxColor);
			colorAxis.putInteger(oFF.VizDefConstants.K_MIN, 1);
		}
		let isTreemap = oFF.XString.isEqual(chartType, oFF.VizDefConstants.K_TREEMAP);
		if (isTreemap)
		{
			plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_TYPE, chartType);
			let objectLevels = plotOptionChartTypeStructure.putNewList(oFF.VizDefConstants.K_LEVELS);
			let objectLevel1 = objectLevels.addNewStructure();
			objectLevel1.putInteger(oFF.VizDefConstants.K_LEVEL, 1);
			objectLevel1.putInteger(oFF.VizDefConstants.K_BORDER_WIDTH, 6);
			let objectLeveldatalabels = objectLevel1.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
			objectLeveldatalabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
			objectLeveldatalabels.putString(oFF.VizDefConstants.K_FORMAT, "<div>{point.name}</div><br/>");
			objectLeveldatalabels.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_LEFT);
			objectLeveldatalabels.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
			let objectLeveldatalabelsStyle = objectLeveldatalabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
			objectLeveldatalabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "14px");
			let objectLevel2 = objectLevels.addNewStructure();
			objectLevel2.putInteger(oFF.VizDefConstants.K_LEVEL, 2);
			let objectLeveldatalabels1 = objectLevel2.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
			objectLeveldatalabels1.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
			objectLeveldatalabels1.putString(oFF.VizDefConstants.K_FORMAT, "<div>{point.name}</div><br/><div>{point.valueFormatted}</div >");
			legend.putInteger(oFF.VizDefConstants.K_Y, 25);
		}
		dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, isDataLabels);
		dataLabels.putBoolean(oFF.VizDefConstants.K_HIDE_WHEN_OVERLAP, true);
		let dataLabelsStyle = dataLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "10px");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_NORMAL);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FILL, "black");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_COLOR, "black");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_TEXT_OUTLINE, "0px");
		dataLabels.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_CENTER);
		legend.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
		legend.putString(oFF.VizDefConstants.K_LAYOUT, oFF.VizDefConstants.V_VERTICAL);
		legend.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_RIGHT);
		legend.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_MIDDLE);
		legend.putInteger("x", 15);
		let legendStyle = legend.putNewStructure(oFF.VizDefConstants.K_STYLE);
		legendStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
		return theChartData;
	}
};

oFF.RsHiChartVizUtilsSimple = {

	addReferenceLine:function(vizDef, valueAxisStruct, valueAxis2Struct, colAxis, rowAxis, crs)
	{
			let hasReferenceLines = false;
		let analyticObjects = vizDef.getStructureByKey(oFF.VizDefConstants.K_ANALYTIC_OBJECTS);
		if (oFF.notNull(analyticObjects))
		{
			let referenceLineList = analyticObjects.getListByKey(oFF.VizDefConstants.K_REFERENCELINES);
			if (oFF.notNull(referenceLineList))
			{
				if (referenceLineList.hasElements())
				{
					hasReferenceLines = true;
					for (let i = 0; i < referenceLineList.size(); i++)
					{
						let referenceLine = referenceLineList.getStructureAt(i);
						let referenceLineMarkers = referenceLine.getListByKey(oFF.VizDefConstants.K_MARKERS);
						let referenceLineFeed = referenceLine.getStringByKey(oFF.VizDefConstants.K_FEED);
						for (let qq = 0; qq < referenceLineMarkers.size(); qq++)
						{
							let referenceLineMarkersStruct = referenceLineMarkers.getStructureAt(qq);
							let plotLineValue = 0;
							if (referenceLineMarkersStruct.containsKey(oFF.VizDefConstants.K_DYNAMIC_VALUE))
							{
								let dnStruct = referenceLineMarkersStruct.getStructureByKey(oFF.VizDefConstants.K_DYNAMIC_VALUE);
								let aggType = dnStruct.getStringByKey(oFF.VizDefConstants.K_AGGREGATION_TYPE);
								let measureId = dnStruct.getStructureByKey(oFF.VizDefConstants.K_MEASURE).getStructureByKey(oFF.VizDefConstants.K_ID).getStringByKey(oFF.VizDefConstants.K_ID);
								let colId = colAxis.getTupleIndexForMemberName(measureId);
								if (!oFF.XCollectionUtils.hasElements(colId))
								{
									let rowId = rowAxis.getTupleIndexForMemberName(measureId);
									if (oFF.XCollectionUtils.hasElements(rowId))
									{
										plotLineValue = oFF.RsHiChartVizUtilsSimple.getAggregateValue(rowId, colAxis, aggType, false, crs);
									}
								}
								else
								{
									plotLineValue = oFF.RsHiChartVizUtilsSimple.getAggregateValue(colId, rowAxis, aggType, true, crs);
								}
							}
							else
							{
								plotLineValue = oFF.RsHiChartRenderer.getDoubleValueExtended(referenceLineMarkersStruct, oFF.VizDefConstants.K_VALUE, 0);
							}
							let color = oFF.VizDefConstants.V_BLACK;
							if (referenceLineMarkersStruct.hasStringByKey(oFF.VizDefConstants.K_COLOR))
							{
								color = referenceLineMarkersStruct.getStringByKey(oFF.VizDefConstants.K_COLOR);
							}
							let colorBelow = referenceLineMarkersStruct.getStringByKey("belowColor");
							let colorAbove = referenceLineMarkersStruct.getStringByKey("aboveColor");
							let referenceLineLabel = referenceLineMarkersStruct.getStructureByKey(oFF.VizDefConstants.K_LABEL);
							let text = referenceLineLabel.getStringByKey(oFF.VizDefConstants.K_TEXT);
							let referenceLineLabelStyle = referenceLineLabel.getStructureByKey(oFF.VizDefConstants.K_STYLE);
							if (oFF.XString.isEqual(oFF.VizDefConstants.K_VALUE_AXIS, referenceLineFeed))
							{
								oFF.RsHiChartVizUtilsSimple.ploLineBuilder(valueAxisStruct, plotLineValue, colorBelow, colorAbove, color, text, referenceLineLabelStyle);
							}
							if (oFF.XString.isEqual(oFF.VizDefConstants.K_VALUE_AXIS2, referenceLineFeed))
							{
								oFF.RsHiChartVizUtilsSimple.ploLineBuilder(valueAxis2Struct, plotLineValue, colorBelow, colorAbove, color, text, referenceLineLabelStyle);
							}
						}
					}
				}
			}
		}
		return hasReferenceLines;
	},
	create:function()
	{
			return new oFF.RsHiChartVizUtilsSimple();
	},
	dataLabelAlignment:function(yAxis, chartType, decimalPlaces, showStackingLabel)
	{
			let axisStackLabels = yAxis.putNewStructure(oFF.VizDefConstants.K_STACK_LABELS);
		axisStackLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, showStackingLabel);
		axisStackLabels.putString(oFF.VizDefConstants.K_FORMAT, oFF.XStringUtils.concatenate3("{total:,.", oFF.XInteger.convertToString(decimalPlaces), "f}"));
		if (oFF.XString.isEqual(oFF.VizDefConstants.V_CHART_TYPE_BAR, chartType))
		{
			let stackLabelsStlye = axisStackLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
			stackLabelsStlye.putString(oFF.VizDefConstants.K_COLOR, "rgb(88,89,91)");
			stackLabelsStlye.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
			stackLabelsStlye.putString(oFF.VizDefConstants.K_FONT_STYLE, oFF.VizDefConstants.V_NORMAL);
			stackLabelsStlye.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.K_BOLD);
		}
		else if (oFF.XString.isEqual(oFF.VizDefConstants.V_CHART_TYPE_COLUMN, chartType))
		{
			axisStackLabels.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_CENTER);
			axisStackLabels.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
			axisStackLabels.putInteger(oFF.VizDefConstants.K_Y, -20);
			axisStackLabels.putInteger(oFF.VizDefConstants.K_X, 5);
		}
		else
		{
			axisStackLabels.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_CENTER);
			axisStackLabels.putInteger(oFF.VizDefConstants.K_Y, -20);
		}
	},
	dataLabelBuilder:function(dataLabels, stackingType)
	{
			let dataLabelsStyle = dataLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
		dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
		dataLabels.putBoolean(oFF.VizDefConstants.K_HIDE_WHEN_OVERLAP, true);
		if (oFF.XString.isEqual(oFF.XString.toLowerCase(oFF.ChartStackingType.PERCENT.getName()), stackingType))
		{
			dataLabels.putString(oFF.VizDefConstants.K_FORMAT, "{point.percentage:.2f} %");
		}
		else
		{
			dataLabels.putString(oFF.VizDefConstants.K_FORMAT, "{point.yFormatted}");
		}
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FILL, "black");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_COLOR, "black");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
		dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_NORMAL);
		dataLabelsStyle.putString(oFF.VizDefConstants.K_TEXT_OUTLINE, "0px");
	},
	getAggregateValue:function(indexList, axis, aggType, rowIteration, crs)
	{
			let counter = 0;
		let aggregator = 0;
		for (let i = 0; i < axis.getTuplesCount(); i++)
		{
			if (!axis.getTupleAt(i).isTotal())
			{
				for (let j = 0; j < indexList.size(); j++)
				{
					let index = indexList.get(j).getInteger();
					let curDataCell;
					if (rowIteration)
					{
						curDataCell = crs.getDataCell(index, i);
					}
					else
					{
						curDataCell = crs.getDataCell(i, index);
					}
					if (curDataCell.getValueException() !== oFF.ValueException.NORMAL)
					{
						continue;
					}
					let curValue = curDataCell.getDouble();
					if (counter === 0)
					{
						aggregator = curValue;
					}
					else if (oFF.XString.isEqual(aggType, "max"))
					{
						if (aggregator < curValue)
						{
							aggregator = curValue;
						}
					}
					else if (oFF.XString.isEqual(aggType, "min"))
					{
						if (aggregator > curValue)
						{
							aggregator = curValue;
						}
					}
					else
					{
						aggregator = aggregator + curValue;
					}
					counter++;
				}
			}
		}
		if (oFF.XString.isEqual(aggType, "average") || oFF.XString.isEqual(aggType, "avg"))
		{
			return aggregator / counter;
		}
		return aggregator;
	},
	legendStyler:function(theChartData)
	{
			let legend = theChartData.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
		if (oFF.notNull(legend))
		{
			legend.putBoolean(oFF.VizDefConstants.K_SQUARE_SYMBOL, true);
			legend.putInteger(oFF.VizDefConstants.K_SYMBOL_RADIUS, 0);
			legend.putString(oFF.VizDefConstants.K_LAYOUT, oFF.VizDefConstants.V_VERTICAL);
			legend.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_RIGHT);
			legend.putInteger(oFF.VizDefConstants.K_WIDTH, 200);
			legend.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
			let legenditemStyle = legend.putNewStructure(oFF.VizDefConstants.K_ITEM_STYLE);
			legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
			legenditemStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_BOLD);
			legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
			let legenditemHoverStyle = legend.putNewStructure(oFF.VizDefConstants.K_ITEM_HOVER_STYLE);
			legenditemHoverStyle.putString(oFF.VizDefConstants.K_CURSOR_STYLE, "default");
		}
	},
	ploLineBuilder:function(yAxis, Value, belowColor, aboveColor, color, text, styleStructure)
	{
			let colorB = "#000000";
		let plotLines = yAxis.containsKey(oFF.VizDefConstants.K_PLOT_LINES) ? yAxis.getListByKey(oFF.VizDefConstants.K_PLOT_LINES) : yAxis.putNewList(oFF.VizDefConstants.K_PLOT_LINES);
		let plotLinepProp = plotLines.addNewStructure();
		if (oFF.notNull(color))
		{
			colorB = color;
		}
		plotLinepProp.putString(oFF.VizDefConstants.K_COLOR, colorB);
		let plotLineslabels = plotLinepProp.putNewStructure(oFF.VizDefConstants.K_LABEL);
		if (oFF.notNull(text))
		{
			plotLineslabels.putString(oFF.VizDefConstants.K_TEXT, text);
		}
		else
		{
			plotLineslabels.putString(oFF.VizDefConstants.K_TEXT, oFF.XDouble.convertToString(Value));
		}
		let plotLinepPropStrucStyle = plotLineslabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
		plotLinepPropStrucStyle.putString(oFF.VizDefConstants.K_COLOR, styleStructure.getStringByKey(oFF.VizDefConstants.K_COLOR));
		plotLinepProp.putString(oFF.VizDefConstants.K_DASH_STYLE, oFF.VizDefConstants.K_SHORT_DOT);
		plotLineslabels.putInteger(oFF.VizDefConstants.K_ROTATION, 0);
		plotLinepProp.putDouble(oFF.VizDefConstants.K_VALUE, Value);
		plotLinepProp.putInteger(oFF.VizDefConstants.K_WIDTH, 2);
		let plotBands = yAxis.containsKey(oFF.VizDefConstants.K_PLOT_BANDS) ? yAxis.getListByKey(oFF.VizDefConstants.K_PLOT_BANDS) : yAxis.putNewList(oFF.VizDefConstants.K_PLOT_BANDS);
		if (oFF.notNull(belowColor))
		{
			let plotBandsProp = plotBands.addNewStructure();
			plotBandsProp.putString(oFF.VizDefConstants.K_COLOR, oFF.RsHiChartVizUtilsSimple.setColorAlpha(belowColor, 0.2));
			plotBandsProp.putDouble(oFF.VizDefConstants.K_FROM, 0);
			plotBandsProp.putDouble(oFF.VizDefConstants.K_TO, Value);
		}
		if (oFF.notNull(aboveColor))
		{
			let plotBandsProp1 = plotBands.addNewStructure();
			plotBandsProp1.putString(oFF.VizDefConstants.K_COLOR, oFF.RsHiChartVizUtilsSimple.setColorAlpha(aboveColor, 0.2));
			plotBandsProp1.putDouble(oFF.VizDefConstants.K_FROM, Value);
			plotBandsProp1.putDouble(oFF.VizDefConstants.K_TO, Value * 100);
		}
	},
	plotOptionChart:function(yAxis, chartType, stackingType, plotOptions, yNumber, fillColor, title)
	{
			let yAxisTitle = yAxis.putNewStructure(oFF.VizDefConstants.K_TITLE);
		let titleStyleStructure = yAxisTitle.putNewStructure(oFF.VizDefConstants.K_STYLE);
		titleStyleStructure.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_BOLD);
		yAxisTitle.putString(oFF.VizDefConstants.K_TEXT, title);
		yAxis.putInteger(oFF.VizDefConstants.K_GRID_LINE_WIDTH, 0);
		let plotOptionChartTypeStructure;
		plotOptionChartTypeStructure = plotOptions.getStructureByKey(chartType);
		if (yNumber === 1 || oFF.isNull(plotOptionChartTypeStructure))
		{
			plotOptionChartTypeStructure = plotOptions.putNewStructure(chartType);
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(stackingType) && !oFF.XString.isEqual(stackingType, "null"))
		{
			plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_STACKING, stackingType);
		}
		plotOptionChartTypeStructure.putInteger(oFF.VizDefConstants.K_Y_AXIS, yNumber);
		plotOptionChartTypeStructure.putBoolean(oFF.VizDefConstants.K_COLOR_BY_POINT, false);
		plotOptionChartTypeStructure.putDouble(oFF.VizDefConstants.K_POINT_PADDING, 0);
		if (oFF.XString.isEqual(oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT, chartType))
		{
			plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_FILL_COLOR, fillColor);
			yAxis.putInteger(oFF.VizDefConstants.K_TICK_AMOUNT, 4);
		}
		let dataLabels = plotOptionChartTypeStructure.getStructureByKey(oFF.VizDefConstants.K_DATA_LABELS);
		if (oFF.isNull(dataLabels))
		{
			dataLabels = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
		}
		oFF.RsHiChartVizUtilsSimple.dataLabelBuilder(dataLabels, stackingType);
	},
	setColorAlpha:function(colorString, alpha)
	{
			let newColor = null;
		let alphaString = oFF.XDouble.convertToString(alpha);
		if (oFF.notNull(colorString))
		{
			if (oFF.XString.startsWith(colorString, "rgb"))
			{
				let end = oFF.XString.indexOf(colorString, ")");
				if (end > 0)
				{
					newColor = oFF.XString.replace(colorString, "rgb", "rgba");
					let alphaToAdd = oFF.XStringUtils.concatenate3(",", alphaString, ")");
					newColor = oFF.XString.replace(newColor, ")", alphaToAdd);
				}
			}
			else if (oFF.XString.isEqual(colorString, "transparent"))
			{
				newColor = oFF.XStringUtils.concatenate3("rgba(255,255,255,", alphaString, ")");
			}
			else
			{
				newColor = colorString;
			}
		}
		return newColor;
	}
};

oFF.RscAxisReference = function() {};
oFF.RscAxisReference.prototype = new oFF.XObject();
oFF.RscAxisReference.prototype._ff_c = "RscAxisReference";

oFF.RscAxisReference.createForEmptyResultSet = function(rscGridContainer, axis, queryModel, overwriteTexts)
{
	let instance = oFF.RscAxisReference.createInternal(rscGridContainer);
	instance.setupForEmptyResultSet(axis, queryModel, overwriteTexts);
	return instance;
};
oFF.RscAxisReference.createForStructureProjectionInternal = function(gridContainer, structureDimensions, structureModelReferences, axisReference)
{
	let instance = oFF.RscAxisReference.createInternal(gridContainer);
	instance.setupForProjection(structureDimensions, structureModelReferences, axisReference);
	return instance;
};
oFF.RscAxisReference.createForValidResultSet = function(rscGridContainer, cursorAxis, queryModel)
{
	let instance = oFF.RscAxisReference.createInternal(rscGridContainer);
	instance.setupForValidResultSet(cursorAxis, queryModel);
	return instance;
};
oFF.RscAxisReference.createInternal = function(gridContainer)
{
	let instance = new oFF.RscAxisReference();
	instance.setup();
	instance.setGridContainer(gridContainer);
	return instance;
};
oFF.RscAxisReference.createMergedAxis = function(primaryAxis, secondaryAxis, gridContainer, structureDimensions, selectionPath, memberRestrictions)
{
	let instance = oFF.RscAxisReference.createInternal(gridContainer);
	instance.setupForMerge(primaryAxis, secondaryAxis, gridContainer, structureDimensions, selectionPath, memberRestrictions);
	return instance;
};
oFF.RscAxisReference.prototype.m_axisType = null;
oFF.RscAxisReference.prototype.m_componentsOnAxis = null;
oFF.RscAxisReference.prototype.m_dimensionReferences = null;
oFF.RscAxisReference.prototype.m_gridContainer = null;
oFF.RscAxisReference.prototype.m_modelDimensionsOnAxis = null;
oFF.RscAxisReference.prototype.m_resultSetDimensionsOnAxis = null;
oFF.RscAxisReference.prototype.m_structureMembersOnAxis = null;
oFF.RscAxisReference.prototype.m_tupleTotalsCount = 0;
oFF.RscAxisReference.prototype.m_tuplesOnAxis = null;
oFF.RscAxisReference.prototype.m_visibleComponentsOnAxis = null;
oFF.RscAxisReference.prototype.addFromResultSetFields = function(resultSetFields, dimension, dimensionReference, visitedAttributes, fieldLayoutType, mainFields, oldIndex, overwriteTexts)
{
	let rsfSize = resultSetFields.size();
	let j;
	let index = oldIndex;
	let added = 0;
	for (j = 0; j < rsfSize; j++)
	{
		let field = dimension.getFieldByName(resultSetFields.get(j).getName());
		let curAttribute = field.getAttribute();
		let attributeText = "";
		if (oFF.notNull(curAttribute) && !visitedAttributes.contains(curAttribute))
		{
			attributeText = curAttribute.getText();
			if (oFF.isNull(attributeText))
			{
				attributeText = curAttribute.getName();
			}
			if (curAttribute === dimension.getMainAttribute())
			{
				attributeText = oFF.RscMappingUtils.getDimText(dimension);
			}
		}
		else if (j === 0 && oFF.isNull(curAttribute) && oFF.isNull(mainFields) && oFF.RscMappingUtils.isImplicitMainField(dimension, field))
		{
			attributeText = oFF.RscMappingUtils.getDimText(dimension);
		}
		let visible = field.getObtainability() !== oFF.ObtainabilityType.USER_INTERFACE;
		let inMainFields = oFF.RscMappingUtils.isMainFieldGeneric(mainFields, field, dimension, fieldLayoutType);
		let text;
		if (!visible)
		{
			text = field.getText();
		}
		else if (inMainFields || fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
		{
			text = attributeText;
			attributeText = "";
		}
		else
		{
			text = field.getText();
			if (oFF.isNull(text))
			{
				text = field.getName();
			}
		}
		if (visible && oFF.notNull(curAttribute))
		{
			visitedAttributes.add(curAttribute);
		}
		let fieldReference = oFF.RscFieldReference.create(this, text, field.getName(), dimensionReference, field, visible ? index : -1, inMainFields, visible, null);
		this.m_componentsOnAxis.add(fieldReference);
		if (visible)
		{
			this.m_visibleComponentsOnAxis.add(fieldReference);
			index++;
			added++;
		}
	}
	return added;
};
oFF.RscAxisReference.prototype.createForStructureProjection = function(structureDimensions, structureMembersMap)
{
	let effectiveStructureDimensionOnAxis = oFF.XStream.of(structureDimensions).filter((sdi) => {
		return this.m_modelDimensionsOnAxis.contains(sdi);
	}).collect(oFF.XStreamCollector.toList());
	let structureModelReferences = oFF.XListOfNameObject.create();
	if (effectiveStructureDimensionOnAxis.size() > 0)
	{
		let result1 = structureMembersMap.getByKey(effectiveStructureDimensionOnAxis.get(0).getName());
		let result2 = effectiveStructureDimensionOnAxis.size() > 1 ? structureMembersMap.getByKey(effectiveStructureDimensionOnAxis.get(1).getName()) : null;
		for (let k = 0; k < result1.size(); k++)
		{
			let vh1 = oFF.RscMeasureReference.createForValueHelpNode(result1.get(k));
			if (oFF.XCollectionUtils.hasElements(result2))
			{
				for (let l = 0; l < result2.size(); l++)
				{
					structureModelReferences.add(oFF.RscDataCellReference.create(vh1, oFF.RscMeasureReference.createForValueHelpNode(result2.get(l))));
				}
			}
			else
			{
				structureModelReferences.add(vh1);
			}
		}
	}
	return oFF.RscAxisReference.createForStructureProjectionInternal(this.getGridContainer(), effectiveStructureDimensionOnAxis, structureModelReferences, this);
};
oFF.RscAxisReference.prototype.getAxisType = function()
{
	return this.m_axisType;
};
oFF.RscAxisReference.prototype.getComponentByName = function(name)
{
	return this.m_componentsOnAxis.getByKey(name);
};
oFF.RscAxisReference.prototype.getComponentsOnAxis = function()
{
	return this.m_componentsOnAxis;
};
oFF.RscAxisReference.prototype.getDimensionMember = function(name)
{
	let result = oFF.XStream.of(this.m_visibleComponentsOnAxis).find((c) => {
		return oFF.XString.isEqual(c.getName(), name);
	});
	return result.isPresent() ? result.get().getStructureMember() : null;
};
oFF.RscAxisReference.prototype.getDimensionReference = function(name)
{
	return this.m_dimensionReferences.getByKey(name);
};
oFF.RscAxisReference.prototype.getDimensionReferenceBySemanticObject = function(semanticObject)
{
	return oFF.XStream.of(this.m_dimensionReferences).find((drf) => {
		return oFF.XString.isEqual(drf.getDimension().getSemanticObject(), semanticObject);
	});
};
oFF.RscAxisReference.prototype.getDimensionReferences = function()
{
	return this.m_dimensionReferences;
};
oFF.RscAxisReference.prototype.getGridContainer = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_gridContainer);
};
oFF.RscAxisReference.prototype.getMeasureReference = function(name)
{
	let result = oFF.XStream.of(this.m_visibleComponentsOnAxis).find((c) => {
		return oFF.XString.isEqual(c.getName(), name);
	});
	return result.isPresent() ? result.get() : null;
};
oFF.RscAxisReference.prototype.getModelDimensionsOnAxis = function()
{
	return this.m_modelDimensionsOnAxis;
};
oFF.RscAxisReference.prototype.getOrCreateComponentForField = function(dimensionReference, field, fieldValues)
{
	let dimension = field.getDimension();
	let mainAttribute = oFF.isNull(dimension) ? null : dimension.getMainAttribute();
	let mainFields = oFF.isNull(mainAttribute) ? null : mainAttribute.getFields();
	let fieldLayoutType = oFF.isNull(dimension) ? null : dimension.getFieldLayoutType();
	let inMainFields = oFF.RscMappingUtils.isMainFieldGeneric(mainFields, field, dimension, fieldLayoutType);
	let fieldReference = oFF.RscFieldReference.create(this, field.getText(), field.getName(), dimensionReference, field, -1, inMainFields, false, fieldValues);
	this.m_componentsOnAxis.add(fieldReference);
	return fieldReference;
};
oFF.RscAxisReference.prototype.getOrCreateDimensionReference = function(queryModel, name, index)
{
	if (!this.m_dimensionReferences.containsKey(name))
	{
		let dimension = queryModel.getDimensionByName(name);
		if (oFF.notNull(dimension))
		{
			this.m_dimensionReferences.put(name, oFF.RscDimensionReference.create(this, name, dimension.getText(), dimension, index));
		}
	}
	return this.m_dimensionReferences.getByKey(name);
};
oFF.RscAxisReference.prototype.getResultSetDimensionsOnAxis = function()
{
	return this.m_resultSetDimensionsOnAxis;
};
oFF.RscAxisReference.prototype.getStructureMembersOnAxis = function()
{
	return this.m_structureMembersOnAxis;
};
oFF.RscAxisReference.prototype.getTupleAt = function(tupleIndex)
{
	return tupleIndex > -1 && tupleIndex < this.m_tuplesOnAxis.size() ? this.m_tuplesOnAxis.get(tupleIndex) : null;
};
oFF.RscAxisReference.prototype.getTuplesLoadedCount = function()
{
	return oFF.XStream.of(this.m_tuplesOnAxis).filterNullValues().countItems();
};
oFF.RscAxisReference.prototype.getTuplesOnAxis = function()
{
	return this.m_tuplesOnAxis;
};
oFF.RscAxisReference.prototype.getTuplesTotalCount = function()
{
	return this.m_tupleTotalsCount;
};
oFF.RscAxisReference.prototype.getVisibleComponentsOnAxis = function()
{
	return this.m_visibleComponentsOnAxis;
};
oFF.RscAxisReference.prototype.hasActiveHierarchy = function()
{
	return oFF.XStream.of(this.m_modelDimensionsOnAxis).anyMatch((rim) => {
		return rim.isHierarchyActive();
	}) || this.m_resultSetDimensionsOnAxis.size() === 1 && this.m_resultSetDimensionsOnAxis.get(0).isUniversalDisplayHierarchyDimension() && this.m_modelDimensionsOnAxis.size() > 1;
};
oFF.RscAxisReference.prototype.insertTuple = function(tupleIndex, rscTuple)
{
	while (tupleIndex > this.m_tuplesOnAxis.size() - 1)
	{
		this.m_tuplesOnAxis.add(null);
	}
	let oldElement = this.m_tuplesOnAxis.get(tupleIndex);
	this.m_tuplesOnAxis.set(tupleIndex, rscTuple);
	oFF.XObjectExt.release(oldElement);
};
oFF.RscAxisReference.prototype.isComplete = function()
{
	return this.getTuplesLoadedCount() === this.getTuplesTotalCount();
};
oFF.RscAxisReference.prototype.prepareForStructureProjection = function(structureDimensions)
{
	let result = oFF.XLinkedHashMapByString.create();
	let promises = oFF.XPromiseList.create();
	let effectiveStructureDimensionOnAxis = oFF.XStream.of(structureDimensions).filter((sdi) => {
		return this.m_modelDimensionsOnAxis.contains(sdi);
	}).collect(oFF.XStreamCollector.toList());
	for (let i = 0; i < effectiveStructureDimensionOnAxis.size(); i++)
	{
		let dimension = effectiveStructureDimensionOnAxis.get(i);
		promises.add(dimension.getMemberManager().getMembers());
		result.put(oFF.DfNameObject.getSafeName(dimension), oFF.XListOfNameObject.create());
	}
	return oFF.XPromise.allSettled(promises).then((list) => {
		for (let j = 0; j < list.size(); j++)
		{
			if (promises.get(j).getState() === oFF.XPromiseState.FULFILLED)
			{
				let promiseResult = list.get(j);
				let values = promiseResult.getValue();
				if (oFF.XCollectionUtils.hasElements(values))
				{
					result.put(oFF.DfNameObject.getSafeName(values.get(0).getDimension()), values);
				}
			}
		}
		let structureModelReferences = oFF.XListOfNameObject.create();
		if (effectiveStructureDimensionOnAxis.size() > 0)
		{
			let result1 = result.getByKey(oFF.DfNameObject.getSafeName(effectiveStructureDimensionOnAxis.get(0)));
			let result2 = effectiveStructureDimensionOnAxis.size() > 1 ? result.getByKey(oFF.DfNameObject.getSafeName(effectiveStructureDimensionOnAxis.get(1))) : null;
			for (let k = 0; k < result1.size(); k++)
			{
				let vh1 = oFF.RscMeasureReference.createForValueHelpNode(result1.get(k));
				if (oFF.XCollectionUtils.hasElements(result2))
				{
					for (let l = 0; l < result2.size(); l++)
					{
						structureModelReferences.add(oFF.RscDataCellReference.create(vh1, oFF.RscMeasureReference.createForValueHelpNode(result2.get(l))));
					}
				}
				else
				{
					structureModelReferences.add(vh1);
				}
			}
		}
		return oFF.RscAxisReference.createForStructureProjectionInternal(this.getGridContainer(), effectiveStructureDimensionOnAxis, structureModelReferences, this);
	}, null);
};
oFF.RscAxisReference.prototype.releaseObject = function()
{
	this.m_componentsOnAxis = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_componentsOnAxis);
	this.m_tuplesOnAxis = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_tuplesOnAxis);
	this.m_visibleComponentsOnAxis = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_visibleComponentsOnAxis);
	this.m_modelDimensionsOnAxis = oFF.XObjectExt.release(this.m_modelDimensionsOnAxis);
	this.m_resultSetDimensionsOnAxis = oFF.XObjectExt.release(this.m_resultSetDimensionsOnAxis);
	this.m_structureMembersOnAxis = oFF.XObjectExt.release(this.m_structureMembersOnAxis);
	this.m_dimensionReferences = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dimensionReferences);
	this.m_tupleTotalsCount = 0;
	this.m_axisType = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscAxisReference.prototype.retrieveActionParameterDimensionIndex = function(dimensionActionParameter)
{
	let dimensionIndex = -1;
	let dimension = dimensionActionParameter.getDimension();
	let field = dimensionActionParameter.getField();
	let semanticObject = dimensionActionParameter.getSemanticObject();
	if (oFF.isNull(dimension) && oFF.notNull(field))
	{
		dimension = field.getDimension();
	}
	if (oFF.notNull(dimension))
	{
		let dimensionReference = this.m_dimensionReferences.getByKey(dimension.getName());
		if (oFF.notNull(dimensionReference))
		{
			dimensionIndex = dimensionReference.getIndex();
		}
	}
	else if (oFF.XStringUtils.isNotNullAndNotEmpty(semanticObject))
	{
		let dimRef = this.getDimensionReferenceBySemanticObject(semanticObject);
		if (dimRef.isPresent())
		{
			dimensionIndex = dimRef.get().getIndex();
		}
	}
	return dimensionIndex;
};
oFF.RscAxisReference.prototype.selectTuplesByPath = function(tuplesOnAxis, selectionPath, memberRestrictions)
{
	let tuplesOnAxisResult = tuplesOnAxis;
	if (oFF.XCollectionUtils.hasElements(selectionPath) || oFF.XCollectionUtils.hasElements(memberRestrictions))
	{
		tuplesOnAxisResult = oFF.XStream.of(tuplesOnAxis).filter((tup) => {
			let matchedDimensions1 = oFF.XHashSetOfString.create();
			let unMatchedDimensions1 = oFF.XHashSetOfString.create();
			let matchedDimensions2 = oFF.XHashSetOfString.create();
			let unMatchedDimensions2 = oFF.XHashSetOfString.create();
			oFF.XCollectionUtils.forEach(tup.getValues(), (vr) => {
				if (vr.getModelReference().getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD))
				{
					let fvr = vr;
					let dimensionName = oFF.DfNameObject.getSafeName(fvr.getModelReference().getDimension());
					let expectedValue = oFF.XCollectionUtils.getOptionalByString(selectionPath, dimensionName).orElse(null);
					let expectedValues = oFF.XCollectionUtils.getOptionalByString(memberRestrictions, dimensionName).orElse(null);
					if (oFF.XStringUtils.isNotNullAndNotEmpty(expectedValue))
					{
						if ((oFF.XString.isEqual(expectedValue, fvr.getFormattedText()) || oFF.XString.isEqual(expectedValue, oFF.XValueUtil.getString(fvr.getPlainValue())) || oFF.XString.isEqual(expectedValue, fvr.getDimensionMemberName())))
						{
							matchedDimensions1.add(dimensionName);
							unMatchedDimensions1.removeElement(dimensionName);
						}
						else if (!matchedDimensions1.contains(dimensionName))
						{
							unMatchedDimensions1.add(dimensionName);
						}
					}
					if (oFF.XCollectionUtils.hasElements(expectedValues))
					{
						if ((expectedValues.contains(fvr.getFormattedText()) || expectedValues.contains(oFF.XValueUtil.getString(fvr.getPlainValue())) || expectedValues.contains(fvr.getDimensionMemberName())))
						{
							matchedDimensions2.add(dimensionName);
							unMatchedDimensions2.removeElement(dimensionName);
						}
						else if (!matchedDimensions2.contains(dimensionName))
						{
							unMatchedDimensions2.add(dimensionName);
						}
					}
				}
			});
			return oFF.XStream.ofString(selectionPath.getKeysAsReadOnlyList()).allMatch((k) => {
				return !unMatchedDimensions1.contains(k.getString());
			}) && oFF.XStream.ofString(memberRestrictions.getKeysAsReadOnlyList()).allMatch((l) => {
				return !unMatchedDimensions2.contains(l.getString());
			});
		}).collect(oFF.XStreamCollector.toList());
	}
	return tuplesOnAxisResult;
};
oFF.RscAxisReference.prototype.setGridContainer = function(gridContainer)
{
	this.m_gridContainer = oFF.XWeakReferenceUtil.getWeakRef(gridContainer);
};
oFF.RscAxisReference.prototype.setTuplesTotalCount = function(tuplesTotalCount)
{
	this.m_tupleTotalsCount = tuplesTotalCount;
};
oFF.RscAxisReference.prototype.setup = function()
{
	this.m_componentsOnAxis = oFF.XListOfNameObject.create();
	this.m_tuplesOnAxis = oFF.XList.create();
	this.m_visibleComponentsOnAxis = oFF.XList.create();
	this.m_modelDimensionsOnAxis = oFF.XList.create();
	this.m_resultSetDimensionsOnAxis = oFF.XList.create();
	this.m_structureMembersOnAxis = oFF.XList.create();
	this.m_dimensionReferences = oFF.XLinkedHashMapByString.create();
};
oFF.RscAxisReference.prototype.setupForEmptyResultSet = function(axis, queryModel, overwriteTexts)
{
	this.m_axisType = axis.getType();
	let i;
	let j;
	let dimensions = axis.getDimensions();
	let size = dimensions.size();
	let index = 0;
	let text;
	let fieldReference;
	for (i = 0; i < size; i++)
	{
		let dimension = dimensions.get(i);
		let dimensionReference = this.getOrCreateDimensionReference(queryModel, dimension.getName(), i);
		oFF.XCollectionUtils.addIfNotPresent(this.m_modelDimensionsOnAxis, dimension);
		oFF.XCollectionUtils.addIfNotPresent(this.m_resultSetDimensionsOnAxis, dimension);
		let mainAttribute = dimension.getMainAttribute();
		let field;
		let visitedAttributes = oFF.XSetOfNameObject.create();
		let mainFields = oFF.isNull(mainAttribute) ? null : mainAttribute.getFields();
		let fieldLayoutType = dimension.getFieldLayoutType();
		let fieldsAdded = 0;
		if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
		{
			fieldsAdded = this.addFromResultSetFields(dimension.getResultSetFields(), dimension, dimensionReference, visitedAttributes, fieldLayoutType, mainFields, index, overwriteTexts);
			index = index + fieldsAdded;
		}
		else
		{
			let rsAttributes = dimension.getResultSetAttributes();
			for (j = 0; j < rsAttributes.size(); j++)
			{
				let fa = this.addFromResultSetFields(rsAttributes.get(j).getResultSetFields(), dimension, dimensionReference, visitedAttributes, fieldLayoutType, mainFields, index, overwriteTexts);
				index = index + fa;
				fieldsAdded = fieldsAdded + fa;
			}
		}
		if (fieldsAdded === 0)
		{
			field = dimension.getKeyField();
			text = oFF.RscMappingUtils.getDimText(dimension);
			fieldReference = oFF.RscFieldReference.create(this, text, field.getName(), dimensionReference, field, index, true, true, null);
			this.m_componentsOnAxis.add(fieldReference);
			this.m_visibleComponentsOnAxis.add(fieldReference);
		}
	}
};
oFF.RscAxisReference.prototype.setupForMerge = function(primaryAxis, secondaryAxis, gridContainer, structureDimensions, selectionPathRaw, memberRestrictions)
{
	this.m_axisType = primaryAxis.getAxisType();
	let selectionPath = oFF.XHashMapByString.createWithMap(selectionPathRaw);
	oFF.XCollectionUtils.forEach(structureDimensions, (sd) => {
		selectionPath.remove(oFF.DfNameObject.getSafeName(sd));
	});
	let overallFieldPredicate = (cp) => {
		return cp.getModelComponentType() === oFF.OlapComponentType.FIELD && !structureDimensions.contains(cp.getDimension());
	};
	this.m_componentsOnAxis.addAll(oFF.XStream.of(primaryAxis.getComponentsOnAxis()).filter(overallFieldPredicate).collect(oFF.XStreamCollector.toList()));
	this.m_componentsOnAxis.addAll(oFF.XStream.of(secondaryAxis.getComponentsOnAxis()).filter(overallFieldPredicate).collect(oFF.XStreamCollector.toList()));
	let fieldPredicate = (vcp) => {
		return vcp.getModelComponentType() === oFF.OlapComponentType.FIELD && !structureDimensions.contains(vcp.getDimension()) && (oFF.isNull(selectionPath) || !selectionPath.containsKey(vcp.getDimension().getName()));
	};
	this.m_visibleComponentsOnAxis.addAll(oFF.XStream.of(primaryAxis.getVisibleComponentsOnAxis()).filter(fieldPredicate).collect(oFF.XStreamCollector.toList()));
	this.m_visibleComponentsOnAxis.addAll(oFF.XStream.of(secondaryAxis.getVisibleComponentsOnAxis()).filter(fieldPredicate).collect(oFF.XStreamCollector.toList()));
	this.m_modelDimensionsOnAxis.addAll(primaryAxis.getModelDimensionsOnAxis());
	this.m_modelDimensionsOnAxis.addAll(secondaryAxis.getModelDimensionsOnAxis());
	this.m_resultSetDimensionsOnAxis.addAll(primaryAxis.getResultSetDimensionsOnAxis());
	this.m_resultSetDimensionsOnAxis.addAll(secondaryAxis.getResultSetDimensionsOnAxis());
	this.m_dimensionReferences.putAll(primaryAxis.getDimensionReferences());
	this.m_dimensionReferences.putAll(secondaryAxis.getDimensionReferences());
	let keysToDelete = oFF.XStream.ofString(this.m_dimensionReferences.getKeysAsReadOnlyList()).filter((drk) => {
		return structureDimensions.contains(this.m_dimensionReferences.getByKey(drk.getString()).getDimension());
	}).collect(oFF.XStreamCollector.toListOfString((ktd) => {
		return ktd.getString();
	}));
	oFF.XCollectionUtils.forEach(keysToDelete, (keyToDelete) => {
		this.m_dimensionReferences.remove(keyToDelete);
	});
	let primarySm = oFF.XStream.of(primaryAxis.getComponentsOnAxis()).filter((smp) => {
		return smp.getModelComponentType() !== oFF.OlapComponentType.FIELD;
	}).collect(oFF.XStreamCollector.toList());
	let secondarySm = oFF.XStream.of(secondaryAxis.getComponentsOnAxis()).filter((smp) => {
		return smp.getModelComponentType() !== oFF.OlapComponentType.FIELD;
	}).collect(oFF.XStreamCollector.toList());
	let hasPrimarySm = oFF.XCollectionUtils.hasElements(primarySm);
	let hasSecondarySm = oFF.XCollectionUtils.hasElements(secondarySm);
	let componentCandidates = oFF.XListOfNameObject.create();
	if (hasPrimarySm && hasSecondarySm)
	{
		for (let i = 0; i < primarySm.size(); i++)
		{
			for (let j = 0; j < secondarySm.size(); j++)
			{
				let newCoponent = oFF.RscDataCellReference.create(primarySm.get(i), secondarySm.get(j));
				this.m_componentsOnAxis.add(newCoponent);
				componentCandidates.add(newCoponent);
			}
		}
	}
	else if (hasPrimarySm)
	{
		this.m_componentsOnAxis.addAll(primarySm);
		componentCandidates.addAll(primarySm);
	}
	else if (hasSecondarySm)
	{
		this.m_componentsOnAxis.addAll(secondarySm);
		componentCandidates.addAll(secondarySm);
	}
	let primaryTuples = this.selectTuplesByPath(primaryAxis.getTuplesOnAxis(), selectionPath, memberRestrictions);
	let secondaryTuples = this.selectTuplesByPath(secondaryAxis.getTuplesOnAxis(), selectionPath, memberRestrictions);
	for (let k = 0; k < primaryTuples.size(); k++)
	{
		let primaryTuple = primaryTuples.get(k);
		for (let j = 0; j < secondaryTuples.size(); j++)
		{
			let secondaryTuple = secondaryTuples.get(j);
			this.m_tuplesOnAxis.add(oFF.RscTupleReference.mergeTuples(this, primaryTuple, secondaryTuple, gridContainer));
		}
	}
	this.m_visibleComponentsOnAxis.addAll(oFF.XStream.of(componentCandidates).filter((cc) => {
		return cc.isVisible();
	}).collect(oFF.XStreamCollector.toList()));
};
oFF.RscAxisReference.prototype.setupForProjection = function(structureDimensions, structureModelReferences, axisReference)
{
	this.m_axisType = axisReference.getAxisType();
	this.m_componentsOnAxis.addAll(axisReference.getComponentsOnAxis());
	this.m_componentsOnAxis.addAll(structureModelReferences);
	this.m_visibleComponentsOnAxis.addAll(axisReference.getVisibleComponentsOnAxis());
	this.m_modelDimensionsOnAxis.addAll(axisReference.getModelDimensionsOnAxis());
	this.m_resultSetDimensionsOnAxis.addAll(axisReference.getResultSetDimensionsOnAxis());
	this.m_dimensionReferences.putAll(axisReference.getDimensionReferences());
	let tupleReferenceMap = oFF.XLinkedHashMapByString.create();
	let referenceTuples = axisReference.getTuplesOnAxis();
	for (let i = 0; i < referenceTuples.size(); i++)
	{
		let inputTuple = referenceTuples.get(i);
		let keyList = oFF.XStream.of(inputTuple.getValues()).filter((mr) => {
			return oFF.XObjectExt.isValidObject(mr.getModelReference());
		}).filter((ivr) => {
			return ivr.getModelReference().getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD);
		}).filter((fvr) => {
			return !structureDimensions.contains(fvr.getModelReference().getDimension());
		}).collect(oFF.XStreamCollector.toListOfString((vr) => {
			return oFF.XValueUtil.getString(vr.getPlainValue());
		}));
		let key = oFF.XCollectionUtils.getUniqueKeyForListOfString(keyList);
		let referenceTuple = tupleReferenceMap.getByKey(key);
		if (oFF.isNull(referenceTuple))
		{
			let newTuple = oFF.RscTupleReference.createForListByOrigTuple(inputTuple, structureDimensions, this, structureModelReferences);
			tupleReferenceMap.put(key, newTuple);
		}
		else
		{
			oFF.RscTupleReference.mergeOnSameAxis(referenceTuple, inputTuple, structureDimensions, structureModelReferences);
		}
	}
	this.m_tuplesOnAxis.addAll(tupleReferenceMap.getValuesAsReadOnlyList());
};
oFF.RscAxisReference.prototype.setupForValidResultSet = function(cursorAxis, queryModel)
{
	let i;
	let j;
	this.m_axisType = cursorAxis.getType();
	this.m_tupleTotalsCount = cursorAxis.getTuplesCountTotal();
	let dimensions = cursorAxis.getRsDimensions();
	let supportsUdhKey = queryModel.getModelCapabilities().supportsUdhKey();
	let size = dimensions.size();
	let index = 0;
	let text;
	let curAttribute;
	let visitedAttributes = oFF.XSetOfNameObject.create();
	let attributeText = "";
	let fieldReference;
	let visible;
	for (i = 0; i < size; i++)
	{
		let baseDimension = dimensions.get(i);
		let dimensionReference = this.getOrCreateDimensionReference(queryModel, baseDimension.getName(), i);
		let dimension = queryModel.getDimensionByName(baseDimension.getName());
		let mainAttribute = dimension.getMainAttribute();
		if (!baseDimension.isUniversalDisplayHierarchyDimension() && !this.m_modelDimensionsOnAxis.contains(dimension))
		{
			this.m_modelDimensionsOnAxis.add(dimension);
		}
		else if (size === 1 && baseDimension.isUniversalDisplayHierarchyDimension() && this.m_modelDimensionsOnAxis.isEmpty())
		{
			this.m_modelDimensionsOnAxis.addAll(dimension.getAxis());
		}
		if (!this.m_resultSetDimensionsOnAxis.contains(baseDimension))
		{
			this.m_resultSetDimensionsOnAxis.add(baseDimension);
		}
		text = dimension.getDisplayDescription();
		if (oFF.isNull(text))
		{
			text = dimension.getDisplayName();
		}
		let rsfSize;
		let field;
		if (dimension.isUniversalDisplayHierarchyDimension())
		{
			let udhDimensionFields = baseDimension.getAllFields();
			rsfSize = udhDimensionFields.size();
			for (j = 0; j < rsfSize; j++)
			{
				field = dimension.getFieldByName(udhDimensionFields.get(j).getName());
				text = oFF.RscMappingUtils.getUdhDimText(queryModel, dimension, j);
				curAttribute = field.getAttribute();
				let isMainAttribute = oFF.RscMappingUtils.isUdhMainAttribute(field);
				if (isMainAttribute && (j > 0 && !oFF.RscMappingUtils.showMoreUdhMainAttributeFields(dimension.getAxis()) || j > 1))
				{
					continue;
				}
				if (!isMainAttribute && field.getObtainability() !== null && field.getObtainability() !== oFF.ObtainabilityType.ALWAYS)
				{
					continue;
				}
				if (oFF.notNull(curAttribute) && !visitedAttributes.contains(curAttribute))
				{
					attributeText = curAttribute.getText();
					if (oFF.isNull(attributeText))
					{
						attributeText = curAttribute.getName();
					}
					if (!isMainAttribute)
					{
						text = attributeText;
					}
				}
				let actualFieldName = isMainAttribute ? oFF.XInteger.convertToString(j) : field.getName();
				fieldReference = oFF.RscFieldReference.create(this, text, actualFieldName, dimensionReference, field, index, isMainAttribute, true, cursorAxis.getFieldValues(dimension.getName(), field.getName()));
				this.m_componentsOnAxis.add(fieldReference);
				this.m_visibleComponentsOnAxis.add(fieldReference);
				index++;
			}
			if (supportsUdhKey)
			{
				let currentAxis = queryModel.getAxis(dimension.getAxisType());
				for (j = 0; j < currentAxis.size(); j++)
				{
					let drillGroupDimension = currentAxis.get(j);
					dimensionReference = this.getOrCreateDimensionReference(queryModel, drillGroupDimension.getName(), i);
					let drillGroupField = drillGroupDimension.getKeyField();
					if (oFF.notNull(drillGroupField))
					{
						fieldReference = oFF.RscFieldReference.create(this, text, drillGroupField.getName(), dimensionReference, drillGroupField, index, true, true, null);
						this.m_componentsOnAxis.add(fieldReference);
					}
					drillGroupField = drillGroupDimension.getHierarchyNavigationField();
					if (oFF.notNull(drillGroupField))
					{
						fieldReference = oFF.RscFieldReference.create(this, text, drillGroupField.getName(), dimensionReference, drillGroupField, index, true, true, null);
						this.m_componentsOnAxis.add(fieldReference);
					}
				}
			}
		}
		else
		{
			let fieldLayoutType = dimension.getFieldLayoutType();
			let resultSetFields = baseDimension.getResultSetFields();
			let mainFields = oFF.isNull(mainAttribute) ? null : mainAttribute.getFields();
			rsfSize = resultSetFields.size();
			attributeText = text;
			for (j = 0; j < rsfSize; j++)
			{
				field = dimension.getFieldByName(resultSetFields.get(j).getName());
				curAttribute = field.getAttribute();
				if (oFF.notNull(curAttribute) && !visitedAttributes.contains(curAttribute))
				{
					attributeText = curAttribute.getText();
					if (oFF.isNull(attributeText))
					{
						attributeText = curAttribute.getName();
					}
					if (curAttribute === dimension.getMainAttribute())
					{
						attributeText = oFF.RscMappingUtils.getDimText(dimension);
					}
				}
				else if (j === 0 && oFF.isNull(curAttribute) && oFF.isNull(mainFields) && oFF.RscMappingUtils.isImplicitMainField(dimension, field))
				{
					attributeText = oFF.RscMappingUtils.getDimText(dimension);
				}
				visible = field.getObtainability() !== oFF.ObtainabilityType.USER_INTERFACE;
				let inMainFields = oFF.RscMappingUtils.isMainFieldGeneric(mainFields, field, dimension, fieldLayoutType);
				if (!visible)
				{
					text = field.getText();
				}
				else if (inMainFields || fieldLayoutType === oFF.FieldLayoutType.ATTRIBUTE_BASED)
				{
					text = attributeText;
					attributeText = "";
				}
				else
				{
					text = field.getText();
					if (oFF.isNull(text))
					{
						text = field.getName();
					}
				}
				if (visible && oFF.notNull(curAttribute))
				{
					visitedAttributes.add(curAttribute);
				}
				fieldReference = oFF.RscFieldReference.create(this, text, field.getName(), dimensionReference, field, visible ? index : -1, inMainFields, visible, cursorAxis.getFieldValues(dimension.getName(), field.getName()));
				this.m_componentsOnAxis.add(fieldReference);
				if (visible)
				{
					this.m_visibleComponentsOnAxis.add(fieldReference);
					index++;
				}
			}
		}
	}
};

oFF.RscCollectorConstants = {

	PERCENT:"%",
	S_SCALE_LONG_BILLION:"ScaleLongBillion",
	S_SCALE_LONG_MILLION:"ScaleLongMillion",
	S_SCALE_LONG_THOUSAND:"ScaleLongThousand",
	S_SCALE_SHORT_BILLION:"ScaleShortBillion",
	S_SCALE_SHORT_MILLION:"ScaleShortMillion",
	S_SCALE_SHORT_THOUSAND:"ScaleShortThousand"
};

oFF.RscDimensionValue = function() {};
oFF.RscDimensionValue.prototype = new oFF.XObject();
oFF.RscDimensionValue.prototype._ff_c = "RscDimensionValue";

oFF.RscDimensionValue.create = function(memberValueReference)
{
	let instance = new oFF.RscDimensionValue();
	instance.m_fieldValueReferences = oFF.XHashMapByString.create();
	instance.m_memberValueReference = memberValueReference;
	return instance;
};
oFF.RscDimensionValue.prototype.m_fieldValueReferences = null;
oFF.RscDimensionValue.prototype.m_memberValueReference = null;
oFF.RscDimensionValue.prototype.addFieldValueReference = function(fieldValueReference)
{
	let fieldReference = oFF.isNull(fieldValueReference) ? null : fieldValueReference.getFieldReference();
	let field = oFF.isNull(fieldReference) ? null : fieldReference;
	if (oFF.notNull(field))
	{
		this.m_fieldValueReferences.put(field.getName(), fieldValueReference);
	}
};
oFF.RscDimensionValue.prototype.getFieldValueReference = function(fieldName)
{
	return this.m_fieldValueReferences.getByKey(fieldName);
};
oFF.RscDimensionValue.prototype.getMemberValueReference = function()
{
	return this.m_memberValueReference;
};
oFF.RscDimensionValue.prototype.releaseObject = function()
{
	this.m_memberValueReference = null;
	this.m_fieldValueReferences = oFF.XObjectExt.release(this.m_fieldValueReferences);
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.RscFormattingInfoHelper = function() {};
oFF.RscFormattingInfoHelper.prototype = new oFF.XObject();
oFF.RscFormattingInfoHelper.prototype._ff_c = "RscFormattingInfoHelper";

oFF.RscFormattingInfoHelper.create = function(formattedValueSimple, formattedValue, formattedValueFull, formatPatternSimple, formatPattern, formatPatternFull, numberFormatterSettings, decimalSeparator, decimalGroupSeparator)
{
	let instance = new oFF.RscFormattingInfoHelper();
	instance.m_formattedValueSimple = formattedValueSimple;
	instance.m_formattedValue = formattedValue;
	instance.m_formattedValueFull = formattedValueFull;
	instance.m_formatPatternSimple = formatPatternSimple;
	instance.m_formatPattern = formatPattern;
	instance.m_formatPatternFull = formatPatternFull;
	instance.m_formatterSettings = numberFormatterSettings;
	instance.m_decimalSeparator = decimalSeparator;
	instance.m_decimalGroupSeparator = decimalGroupSeparator;
	return instance;
};
oFF.RscFormattingInfoHelper.getDefaultFormat = function(value, userProfile)
{
	return oFF.RscFormattingInfoHelper.getDefaultFormatForValueType(oFF.isNull(value) ? null : value.getValueType(), userProfile);
};
oFF.RscFormattingInfoHelper.getDefaultFormatForValueType = function(valueType, userProfile)
{
	let result = null;
	if (oFF.notNull(valueType) && oFF.notNull(userProfile))
	{
		if (valueType.isTypeOf(oFF.XValueType.DOUBLE))
		{
			result = userProfile.getDecimalFormat();
		}
		else if (valueType.isTypeOf(oFF.XValueType.TIME))
		{
			result = userProfile.getTimeFormatting();
		}
		else if (valueType.isTypeOf(oFF.XValueType.DATE) || valueType.isTypeOf(oFF.XValueType.CALENDAR_DATE))
		{
			result = userProfile.getDateFormatting();
		}
		else if (valueType.isTypeOf(oFF.XValueType.DATE_TIME) || valueType.isTypeOf(oFF.XValueType.SECOND_DATE))
		{
			result = oFF.XStringUtils.concatenate3(userProfile.getDateFormatting(), " ", userProfile.getTimeFormatting());
		}
	}
	return result;
};
oFF.RscFormattingInfoHelper.prototype.m_decimalGroupSeparator = null;
oFF.RscFormattingInfoHelper.prototype.m_decimalSeparator = null;
oFF.RscFormattingInfoHelper.prototype.m_formatPattern = null;
oFF.RscFormattingInfoHelper.prototype.m_formatPatternFull = null;
oFF.RscFormattingInfoHelper.prototype.m_formatPatternSimple = null;
oFF.RscFormattingInfoHelper.prototype.m_formattedValue = null;
oFF.RscFormattingInfoHelper.prototype.m_formattedValueFull = null;
oFF.RscFormattingInfoHelper.prototype.m_formattedValueSimple = null;
oFF.RscFormattingInfoHelper.prototype.m_formatterSettings = null;
oFF.RscFormattingInfoHelper.prototype.getDecimalGroupSeparator = function()
{
	return this.m_decimalGroupSeparator;
};
oFF.RscFormattingInfoHelper.prototype.getDecimalSeparator = function()
{
	return this.m_decimalSeparator;
};
oFF.RscFormattingInfoHelper.prototype.getFormatPattern = function()
{
	return this.m_formatPattern;
};
oFF.RscFormattingInfoHelper.prototype.getFormatPatternFull = function()
{
	return this.m_formatPatternFull;
};
oFF.RscFormattingInfoHelper.prototype.getFormatPatternSimple = function()
{
	return this.m_formatPatternSimple;
};
oFF.RscFormattingInfoHelper.prototype.getFormattedValue = function()
{
	return this.m_formattedValue;
};
oFF.RscFormattingInfoHelper.prototype.getFormattedValueFull = function()
{
	return this.m_formattedValueFull;
};
oFF.RscFormattingInfoHelper.prototype.getFormattedValueSimple = function()
{
	return this.m_formattedValueSimple;
};
oFF.RscFormattingInfoHelper.prototype.getFormatterSettings = function()
{
	return this.m_formatterSettings;
};
oFF.RscFormattingInfoHelper.prototype.releaseObject = function()
{
	this.m_formatterSettings = null;
	this.m_formattedValue = null;
	this.m_formattedValueFull = null;
	this.m_formattedValueSimple = null;
	this.m_formatPattern = null;
	this.m_formatPatternFull = null;
	this.m_formatPatternSimple = null;
	this.m_decimalSeparator = null;
	this.m_decimalGroupSeparator = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.RscGenericValue = function() {};
oFF.RscGenericValue.prototype = new oFF.XObject();
oFF.RscGenericValue.prototype._ff_c = "RscGenericValue";

oFF.RscGenericValue.prototype.m_dataUpdated = false;
oFF.RscGenericValue.prototype.m_decimalGroupSeparator = null;
oFF.RscGenericValue.prototype.m_decimalPlaces = 0;
oFF.RscGenericValue.prototype.m_decimalSeparator = null;
oFF.RscGenericValue.prototype.m_formatPattern = null;
oFF.RscGenericValue.prototype.m_formatPatternFull = null;
oFF.RscGenericValue.prototype.m_formatPatternSimple = null;
oFF.RscGenericValue.prototype.m_formattedText = null;
oFF.RscGenericValue.prototype.m_formattedTextFull = null;
oFF.RscGenericValue.prototype.m_formattedTextSimple = null;
oFF.RscGenericValue.prototype.m_signPresentation = null;
oFF.RscGenericValue.prototype.m_text = null;
oFF.RscGenericValue.prototype.m_value = null;
oFF.RscGenericValue.prototype.applyPlainValue = function(value)
{
	this.m_value = oFF.XValueUtil.copyValue(value);
};
oFF.RscGenericValue.prototype.applyStringValue = function(stringValue)
{
	this.m_value = oFF.XStringValue.create(stringValue);
};
oFF.RscGenericValue.prototype.getDecimalGroupSeparator = function()
{
	return this.m_decimalGroupSeparator;
};
oFF.RscGenericValue.prototype.getDecimalPlaces = function()
{
	return this.m_decimalPlaces;
};
oFF.RscGenericValue.prototype.getDecimalSeparator = function()
{
	return this.m_decimalSeparator;
};
oFF.RscGenericValue.prototype.getFormatPattern = function()
{
	return this.m_formatPattern;
};
oFF.RscGenericValue.prototype.getFormatPatternFull = function()
{
	return this.m_formatPatternFull;
};
oFF.RscGenericValue.prototype.getFormatPatternSimple = function()
{
	return this.m_formatPatternSimple;
};
oFF.RscGenericValue.prototype.getFormattedText = function()
{
	return this.m_formattedText;
};
oFF.RscGenericValue.prototype.getFormattedTextFull = function()
{
	return this.m_formattedTextFull;
};
oFF.RscGenericValue.prototype.getFormattedTextSimple = function()
{
	return this.m_formattedTextSimple;
};
oFF.RscGenericValue.prototype.getPlainDouble = function()
{
	return oFF.XValueUtil.getDouble(this.m_value, false, true);
};
oFF.RscGenericValue.prototype.getPlainValue = function()
{
	return this.m_value;
};
oFF.RscGenericValue.prototype.getSignPresentation = function()
{
	return this.m_signPresentation;
};
oFF.RscGenericValue.prototype.getText = function()
{
	return this.m_text;
};
oFF.RscGenericValue.prototype.isDataUpdated = function()
{
	return this.m_dataUpdated;
};
oFF.RscGenericValue.prototype.releaseObject = function()
{
	this.m_value = null;
	this.m_text = null;
	this.m_formatPatternSimple = null;
	this.m_formatPattern = null;
	this.m_formatPatternFull = null;
	this.m_formattedTextSimple = null;
	this.m_formattedText = null;
	this.m_formattedTextFull = null;
	this.m_decimalPlaces = -1;
	this.m_decimalSeparator = null;
	this.m_decimalGroupSeparator = null;
	this.m_signPresentation = null;
	this.m_dataUpdated = false;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscGenericValue.prototype.setDataUpdated = function(dataUpdated)
{
	this.m_dataUpdated = true;
};
oFF.RscGenericValue.prototype.setDecimalGroupSeparator = function(decimalGroupSeparator)
{
	this.m_decimalGroupSeparator = decimalGroupSeparator;
};
oFF.RscGenericValue.prototype.setDecimalPlaces = function(decimalPlaces)
{
	this.m_decimalPlaces = decimalPlaces;
};
oFF.RscGenericValue.prototype.setDecimalSeparator = function(decimalSeparator)
{
	this.m_decimalSeparator = decimalSeparator;
};
oFF.RscGenericValue.prototype.setFormatPattern = function(formatPattern)
{
	this.m_formatPattern = formatPattern;
};
oFF.RscGenericValue.prototype.setFormatPatternFull = function(formatPatternFull)
{
	this.m_formatPatternFull = formatPatternFull;
};
oFF.RscGenericValue.prototype.setFormatPatternSimple = function(formatPatternSimple)
{
	this.m_formatPatternSimple = formatPatternSimple;
};
oFF.RscGenericValue.prototype.setFormattedText = function(text)
{
	this.m_formattedText = text;
};
oFF.RscGenericValue.prototype.setFormattedTextFull = function(text)
{
	this.m_formattedTextFull = text;
};
oFF.RscGenericValue.prototype.setFormattedTextSimple = function(text)
{
	this.m_formattedTextSimple = text;
};
oFF.RscGenericValue.prototype.setSignPresentation = function(signPresentation)
{
	this.m_signPresentation = signPresentation;
};
oFF.RscGenericValue.prototype.setText = function(text)
{
	this.m_text = text;
};
oFF.RscGenericValue.prototype.setupInternal = function(value, text, formatPatternSimple, formattedTextSimple, formatPattern, formattedText, patternFull, formattedTextFull)
{
	this.m_value = oFF.XValueUtil.copyValue(value);
	this.m_text = text;
	this.m_formatPatternSimple = formatPatternSimple;
	this.m_formattedTextSimple = formattedTextSimple;
	this.m_formatPattern = formatPattern;
	this.m_formattedText = formattedText;
	this.m_formatPatternFull = patternFull;
	this.m_formattedTextFull = formattedTextFull;
	this.m_decimalPlaces = -1;
};

oFF.RscGridRequestToken = function() {};
oFF.RscGridRequestToken.prototype = new oFF.XObject();
oFF.RscGridRequestToken.prototype._ff_c = "RscGridRequestToken";

oFF.RscGridRequestToken.create = function(syncType, collectorListener, queryExecutedListener, identifier, rowStart, rowEnd, colStart, colEnd)
{
	let instance = new oFF.RscGridRequestToken();
	instance.m_syncType = syncType;
	instance.m_resultSetCollectorListener = collectorListener;
	instance.m_queryExecutedListener = queryExecutedListener;
	instance.m_identifier = identifier;
	instance.m_rowStart = rowStart;
	instance.m_rowEnd = rowEnd;
	instance.m_colStart = colStart;
	instance.m_colEnd = colEnd;
	return instance;
};
oFF.RscGridRequestToken.prototype.m_colEnd = 0;
oFF.RscGridRequestToken.prototype.m_colStart = 0;
oFF.RscGridRequestToken.prototype.m_identifier = null;
oFF.RscGridRequestToken.prototype.m_queryExecutedListener = null;
oFF.RscGridRequestToken.prototype.m_resultSetCollectorListener = null;
oFF.RscGridRequestToken.prototype.m_rowEnd = 0;
oFF.RscGridRequestToken.prototype.m_rowStart = 0;
oFF.RscGridRequestToken.prototype.m_syncType = null;
oFF.RscGridRequestToken.prototype.getColEnd = function()
{
	return this.m_colEnd;
};
oFF.RscGridRequestToken.prototype.getColStart = function()
{
	return this.m_colStart;
};
oFF.RscGridRequestToken.prototype.getIdentifier = function()
{
	return this.m_identifier;
};
oFF.RscGridRequestToken.prototype.getQueryExecutedListener = function()
{
	return this.m_queryExecutedListener;
};
oFF.RscGridRequestToken.prototype.getResultSetCollectorListener = function()
{
	return this.m_resultSetCollectorListener;
};
oFF.RscGridRequestToken.prototype.getRowEnd = function()
{
	return this.m_rowEnd;
};
oFF.RscGridRequestToken.prototype.getRowStart = function()
{
	return this.m_rowStart;
};
oFF.RscGridRequestToken.prototype.getSyncType = function()
{
	return this.m_syncType;
};

oFF.RscGridTileCarrier = function() {};
oFF.RscGridTileCarrier.prototype = new oFF.XObject();
oFF.RscGridTileCarrier.prototype._ff_c = "RscGridTileCarrier";

oFF.RscGridTileCarrier.create = function(rowMin, rowMax, columnMin, columnMax)
{
	let carrier = new oFF.RscGridTileCarrier();
	carrier.setupCarrier(rowMin, rowMax, columnMin, columnMax);
	return carrier;
};
oFF.RscGridTileCarrier.isValid = function(pendingTileCarrier)
{
	return oFF.notNull(pendingTileCarrier) && pendingTileCarrier.getColumnMax() >= pendingTileCarrier.getColumnMin() && pendingTileCarrier.getRowMax() >= pendingTileCarrier.getRowMin();
};
oFF.RscGridTileCarrier.prototype.m_columnMax = 0;
oFF.RscGridTileCarrier.prototype.m_columnMin = 0;
oFF.RscGridTileCarrier.prototype.m_rowMax = 0;
oFF.RscGridTileCarrier.prototype.m_rowMin = 0;
oFF.RscGridTileCarrier.prototype.getColumnMax = function()
{
	return this.m_columnMax;
};
oFF.RscGridTileCarrier.prototype.getColumnMin = function()
{
	return this.m_columnMin;
};
oFF.RscGridTileCarrier.prototype.getRowMax = function()
{
	return this.m_rowMax;
};
oFF.RscGridTileCarrier.prototype.getRowMin = function()
{
	return this.m_rowMin;
};
oFF.RscGridTileCarrier.prototype.releaseObject = function()
{
	this.m_rowMin = 0;
	this.m_rowMax = 0;
	this.m_columnMin = 0;
	this.m_columnMax = 0;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscGridTileCarrier.prototype.setupCarrier = function(rowMin, rowMax, columnMin, columnMax)
{
	this.m_rowMin = rowMin;
	this.m_rowMax = rowMax;
	this.m_columnMin = columnMin;
	this.m_columnMax = columnMax;
};

oFF.RscMappingUtils = {

	POTENCE_OPERATOR:"^",
	PRODUCT_SPACE_OPERATOR:" ",
	QUOTIENT_OPERATOR:"/",
	correctFieldIdConsideringUdhSettings:function(field, drillGroupDimensionOrig)
	{
			let fieldId = field.getName();
		if (field.getDimension().isUniversalDisplayHierarchyDimension() && oFF.RscMappingUtils.isUdhMainAttribute(field))
		{
			let drillGroupDimension = drillGroupDimensionOrig.isUniversalDisplayHierarchyDimension() && drillGroupDimensionOrig.getAxis().size() > 0 ? drillGroupDimensionOrig.getAxis().get(0) : drillGroupDimensionOrig;
			if (oFF.notNull(drillGroupDimension))
			{
				let rsFields = drillGroupDimension.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED ? drillGroupDimension.getResultSetFields() : drillGroupDimension.getMainAttribute().getResultSetFields();
				let presList = oFF.XStream.of(rsFields).filter((fi) => {
					return fi.getObtainability() !== oFF.ObtainabilityType.USER_INTERFACE;
				}).map((fl) => {
					return oFF.RscMappingUtils.mapPresentationType(fl);
				}).collect(oFF.XStreamCollector.toList());
				let mappedPresentationType = oFF.RscMappingUtils.mapPresentationType(field);
				let index = presList.getIndex(mappedPresentationType);
				if (index > -1)
				{
					fieldId = oFF.XInteger.convertToString(index);
				}
				else if (drillGroupDimension.isUniversalDisplayHierarchyDimension() && field.getObtainability() === oFF.ObtainabilityType.ALWAYS)
				{
					fieldId = "0";
				}
			}
		}
		return fieldId;
	},
	correctFieldValueConsideringUdhSettings:function(dimensionMemberId, field, drillGroupDimensionOrig)
	{
			let formatted = null;
		if (field.getDimension().isUniversalDisplayHierarchyDimension() && oFF.RscMappingUtils.isUdhMainAttribute(field))
		{
			let drillGroupDimension = drillGroupDimensionOrig.isUniversalDisplayHierarchyDimension() && drillGroupDimensionOrig.getAxis().size() > 0 ? drillGroupDimensionOrig.getAxis().get(0) : drillGroupDimensionOrig;
			if (oFF.notNull(drillGroupDimension))
			{
				let structureMember = drillGroupDimension.getStructureMember(dimensionMemberId);
				if (oFF.notNull(structureMember))
				{
					if (field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT) && (drillGroupDimension.getMainAttribute() === field.getAttribute() && drillGroupDimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED || drillGroupDimension.getTextField() === field || drillGroupDimension.getClientDefaultTextField() === field || drillGroupDimension.getDefaultResultSetTextField() === field) && oFF.XStringUtils.isNotNullAndNotEmpty(structureMember.getText()))
					{
						formatted = structureMember.getDisplayDescription();
					}
					else if ((field.getPresentationType().isTypeOf(oFF.PresentationType.DISPLAY_KEY) || field.getPresentationType().isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY) || drillGroupDimension.getDisplayKeyField() === field) && (drillGroupDimension.getMainAttribute() === field.getAttribute() && drillGroupDimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED || drillGroupDimension.getDisplayKeyField() === field) && structureMember.isDisplayNameSet())
					{
						formatted = structureMember.getDisplayName();
					}
				}
			}
		}
		return formatted;
	},
	createUnitTextWithExponent:function(description, value, exponent)
	{
			let valueToUse = oFF.XStringUtils.isNullOrEmpty(description) ? value : description;
		let result;
		if (exponent > 1)
		{
			result = oFF.XStringUtils.concatenate3(valueToUse, oFF.RscMappingUtils.POTENCE_OPERATOR, oFF.XInteger.convertToString(exponent));
		}
		else
		{
			result = valueToUse;
		}
		return result;
	},
	getCurrencyUnitPair:function(complexUnit, skipUnit, currencyPresentation)
	{
			let pair = null;
		if (skipUnit)
		{
			pair = oFF.XPairOfString.create("", "");
		}
		else
		{
			pair = oFF.RscMappingUtils.resolveCurrencyUnitPair(complexUnit, currencyPresentation, null);
		}
		return pair;
	},
	getDimText:function(dimension)
	{
			let dimPres = dimension.getDisplayDescription();
		if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.MEASURE_STRUCTURE))
		{
			dimPres = oFF.XLocalizationCenter.getCenter().getText(oFF.RscMappingI18n.COMMON_MEASURES);
			if (oFF.XStringUtils.isNullOrEmpty(dimPres))
			{
				dimPres = dimension.getDisplayDescription();
			}
		}
		else if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.SECONDARY_STRUCTURE))
		{
			if (dimension.getProcess().hasFeature(oFF.FeatureToggleOlap.USE_ORIGINAL_STRUCTURE_TEXT_IN_UI) && oFF.XStringUtils.isNotNullAndNotEmpty(dimension.getOriginalText()))
			{
				dimPres = dimension.getOriginalText();
			}
			else
			{
				dimPres = oFF.XLocalizationCenter.getCenter().getText(oFF.RscMappingI18n.COMMON_STRUCTURE);
			}
		}
		if (oFF.isNull(dimPres))
		{
			dimPres = dimension.getDisplayName();
		}
		return dimPres;
	},
	getSimplifiedUniqueName:function(elementPath)
	{
			let simplifiedName = "";
		for (let i = 0; i < elementPath.size(); i++)
		{
			let pathElement = elementPath.get(i);
			simplifiedName = oFF.XStringUtils.concatenate5(simplifiedName, "::[", pathElement.getDimension().getName(), "]==>", pathElement.getSelectValue());
		}
		return simplifiedName;
	},
	getUdhDimText:function(queryModel, dimension, index)
	{
			let text = "";
		if (index === 0)
		{
			let dimTextList = oFF.XStream.ofString(oFF.RscMappingUtils.getUdhDimensionNames(dimension)).map((str) => {
				return queryModel.getDimensionByName(str.getString());
			}).collect(oFF.XStreamCollector.toListOfString((dim) => {
				return oFF.RscMappingUtils.getDimText(dim);
			}));
			text = oFF.XCollectionUtils.join(dimTextList, "/");
		}
		return text;
	},
	getUdhDimensionNames:function(dimension)
	{
			let result;
		if (dimension.isUniversalDisplayHierarchyDimension())
		{
			result = dimension.getQueryModel().getUniversalDisplayHierarchies().getByAxisType(dimension.getAxisType()).getDimensionNames();
		}
		else
		{
			result = oFF.XList.create();
		}
		return result;
	},
	getUnitsSuffix:function(startIndex, lookupList, fallbackList, exponents)
	{
			let size = lookupList.size();
		let counterList = oFF.XList.create();
		let denominatorList = oFF.XList.create();
		for (let i = startIndex; i < size; i++)
		{
			let exponent = exponents.get(i).getInteger();
			if (exponent > 0)
			{
				counterList.add(oFF.RscMappingUtils.createUnitTextWithExponent(lookupList.get(i), fallbackList.get(i), exponent));
			}
			else if (exponent < 0)
			{
				denominatorList.add(oFF.RscMappingUtils.createUnitTextWithExponent(lookupList.get(i), fallbackList.get(i), -exponent));
			}
		}
		let hasCounters = oFF.XCollectionUtils.hasElements(counterList);
		let hasDenominators = oFF.XCollectionUtils.hasElements(denominatorList);
		let result = null;
		if (hasDenominators && hasCounters)
		{
			result = oFF.XStringUtils.concatenate3(oFF.XCollectionUtils.join(counterList, oFF.RscMappingUtils.PRODUCT_SPACE_OPERATOR), oFF.RscMappingUtils.QUOTIENT_OPERATOR, oFF.XCollectionUtils.join(denominatorList, oFF.RscMappingUtils.PRODUCT_SPACE_OPERATOR));
		}
		else if (hasCounters)
		{
			result = oFF.XStringUtils.concatenate2(oFF.RscMappingUtils.PRODUCT_SPACE_OPERATOR, oFF.XCollectionUtils.join(counterList, oFF.RscMappingUtils.PRODUCT_SPACE_OPERATOR));
		}
		else if (hasDenominators)
		{
			result = oFF.XStringUtils.concatenate2(oFF.RscMappingUtils.QUOTIENT_OPERATOR, oFF.XCollectionUtils.join(denominatorList, oFF.RscMappingUtils.PRODUCT_SPACE_OPERATOR));
		}
		return result;
	},
	isExplicitlyInRsPresentationForUdh:function(field, drillGroupDimensionOrig)
	{
			let isExplicitlyVisible = false;
		if (field.getDimension().isUniversalDisplayHierarchyDimension() && oFF.RscMappingUtils.isUdhMainAttribute(field))
		{
			let drillGroupDimension = drillGroupDimensionOrig.isUniversalDisplayHierarchyDimension() && drillGroupDimensionOrig.getAxis().size() > 0 ? drillGroupDimensionOrig.getAxis().get(0) : drillGroupDimensionOrig;
			if (oFF.notNull(drillGroupDimension))
			{
				let rsFields = drillGroupDimension.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED ? drillGroupDimension.getResultSetFields() : drillGroupDimension.getMainAttribute().getResultSetFields();
				let presList = oFF.XStream.of(rsFields).filter((fi) => {
					return fi.getObtainability() !== oFF.ObtainabilityType.USER_INTERFACE;
				}).map((fl) => {
					return fl.getPresentationType();
				}).collect(oFF.XStreamCollector.toList());
				isExplicitlyVisible = presList.contains(field.getPresentationType());
			}
		}
		return isExplicitlyVisible;
	},
	isImplicitMainField:function(dimension, field)
	{
			return dimension.getTextField() === field || dimension.getFlatTextField() === field || dimension.getHierarchyTextField() === field || dimension.getKeyField() === field || dimension.getFlatKeyField() === field || dimension.getHierarchyKeyField() === field || dimension.getDisplayKeyField() === field || dimension.getFlatDisplayKeyField() === field || dimension.getHierarchyDisplayKeyField() === field;
	},
	isMainFieldGeneric:function(mainFields, field, dimension, fieldLayoutType)
	{
			return oFF.notNull(dimension) && oFF.notNull(field) && field.getAttribute() === dimension.getMainAttribute() || fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED && oFF.notNull(mainFields) && mainFields.contains(field) || oFF.isNull(mainFields) && oFF.notNull(field) && oFF.notNull(dimension) && field.getAttribute() === null && oFF.RscMappingUtils.isImplicitMainField(dimension, field);
	},
	isUdhMainAttribute:function(field)
	{
			let attribute = field.getAttribute();
		let dimension = oFF.isNull(attribute) ? null : attribute.getDimension();
		return oFF.isNull(dimension) || oFF.isNull(attribute) || dimension.getMainAttribute() === attribute;
	},
	mapPresentationType:function(field)
	{
			let mappedPresentationType = field.getPresentationType();
		if (mappedPresentationType.isTypeOf(oFF.PresentationType.DISPLAY_KEY) || mappedPresentationType.isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY))
		{
			mappedPresentationType = oFF.PresentationType.DISPLAY_KEY;
		}
		else if (mappedPresentationType.isTypeOf(oFF.PresentationType.ABSTRACT_KEY))
		{
			mappedPresentationType = oFF.PresentationType.ABSTRACT_KEY;
		}
		else if (mappedPresentationType.isTypeOf(oFF.PresentationType.ABSTRACT_TEXT))
		{
			mappedPresentationType = oFF.PresentationType.ABSTRACT_TEXT;
		}
		return mappedPresentationType;
	},
	resolveCurrencyUnitPair:function(complexUnit, currencyPresentation, fallback)
	{
			let pair = fallback;
		let unitTypes = oFF.isNull(complexUnit) ? null : complexUnit.getUnitTypes();
		if (oFF.notNull(unitTypes) && unitTypes.size() > 0)
		{
			let exponents = complexUnit.getUnitExponents();
			let lookupList = currencyPresentation === oFF.CurrencyPresentation.ISO ? complexUnit.getUnitValues() : complexUnit.getUnitDescriptions();
			let fallbackList = complexUnit.getUnitValues();
			let prefix = "";
			let suffix = null;
			if (oFF.UnitType.lookup(unitTypes.get(0)) === oFF.UnitType.CURRENCY && exponents.get(0).getInteger() > 0)
			{
				prefix = oFF.RscMappingUtils.createUnitTextWithExponent(lookupList.get(0), fallbackList.get(0), exponents.get(0).getInteger());
				if (unitTypes.size() > 1)
				{
					suffix = oFF.RscMappingUtils.getUnitsSuffix(1, lookupList, fallbackList, exponents);
				}
			}
			else
			{
				suffix = oFF.RscMappingUtils.getUnitsSuffix(0, lookupList, fallbackList, exponents);
			}
			if (oFF.XStringUtils.isNotNullAndNotEmpty(prefix) || oFF.XStringUtils.isNotNullAndNotEmpty(suffix))
			{
				pair = oFF.XPairOfString.create(prefix, suffix);
			}
		}
		return pair;
	},
	showMoreUdhMainAttributeFields:function(axis)
	{
			return oFF.XStream.of(axis).map((dim) => {
			return dim.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED ? dim.getResultSetFields() : dim.getMainAttribute().getResultSetFields();
		}).anyMatch((fl) => {
			return oFF.XStream.of(fl).filter((fle) => {
				return fle.getObtainability() !== oFF.ObtainabilityType.USER_INTERFACE;
			}).collect(oFF.XStreamCollector.toList()).size() > 1;
		});
	}
};

oFF.RscResultsetCollectorFactoryImpl = function() {};
oFF.RscResultsetCollectorFactoryImpl.prototype = new oFF.XObject();
oFF.RscResultsetCollectorFactoryImpl.prototype._ff_c = "RscResultsetCollectorFactoryImpl";

oFF.RscResultsetCollectorFactoryImpl.create = function()
{
	return new oFF.RscResultsetCollectorFactoryImpl();
};
oFF.RscResultsetCollectorFactoryImpl.prototype.newGridCollector = function(visualizationManager)
{
	return oFF.RscGridCollector.create(visualizationManager);
};
oFF.RscResultsetCollectorFactoryImpl.prototype.newListCollector = function(gridCollector, leadingAxis, structuresToRemap, selectionPath, memberRestrictions)
{
	return oFF.RscListCollector.create(gridCollector, leadingAxis, structuresToRemap, selectionPath, memberRestrictions);
};

oFF.GridRendererFactoryImpl = function() {};
oFF.GridRendererFactoryImpl.prototype = new oFF.XObject();
oFF.GridRendererFactoryImpl.prototype._ff_c = "GridRendererFactoryImpl";

oFF.GridRendererFactoryImpl.create = function()
{
	return new oFF.GridRendererFactoryImpl();
};
oFF.GridRendererFactoryImpl.prototype.newRenderer = function(protocolType)
{
	return oFF.RsSacTableRenderer.createAnalyticsGridRenderer();
};

oFF.SacTableClipboardHelperFactory = function() {};
oFF.SacTableClipboardHelperFactory.prototype = new oFF.XObject();
oFF.SacTableClipboardHelperFactory.prototype._ff_c = "SacTableClipboardHelperFactory";

oFF.SacTableClipboardHelperFactory.create = function()
{
	return new oFF.SacTableClipboardHelperFactory();
};
oFF.SacTableClipboardHelperFactory.prototype.newClipboardHelper = function(analyticsTable, userProfile)
{
	return oFF.SacAnalyticsTableClipboardHelper.createForAnalytics(analyticsTable, userProfile);
};

oFF.RsSacTableRenderer = function() {};
oFF.RsSacTableRenderer.prototype = new oFF.XObject();
oFF.RsSacTableRenderer.prototype._ff_c = "RsSacTableRenderer";

oFF.RsSacTableRenderer.createAnalyticsGridRenderer = function()
{
	let newSacTableRenderer = new oFF.RsSacTableRenderer();
	return newSacTableRenderer;
};
oFF.RsSacTableRenderer.prototype.m_rowList = null;
oFF.RsSacTableRenderer.prototype.m_tableJson = null;
oFF.RsSacTableRenderer.prototype.getFullOrPaginatedRowList = function(table)
{
	let rowList = oFF.XList.create();
	let prRowList = oFF.PrFactory.createList();
	let renderHelper = oFF.SacTableWidgetRenderHelper.createTableRenderHelper(table);
	renderHelper.fillRowsFromList(table.getHeaderRowList(), prRowList, 0, table.isFreezeHeaderRows(), table.getFreezeUpToRow());
	renderHelper.fillRowsFromListKeepGaps(table.isRowPaginated() ? table.getLocalRowList() : table.getRowList(), prRowList, table.getHeaderRowList().size());
	for (let i = 0; i < prRowList.size(); i++)
	{
		rowList.add(prRowList.getStructureAt(i));
	}
	return rowList;
};
oFF.RsSacTableRenderer.prototype.getTableJson = function()
{
	return this.m_tableJson;
};
oFF.RsSacTableRenderer.prototype.postRender = function(renderHelper, table)
{
	let tokenList = null;
	if (oFF.XObjectExt.isValidObject(table) && oFF.XObjectExt.isValidObject(renderHelper))
	{
		let themeCache = oFF.XHashMapByString.create();
		tokenList = renderHelper.renderGenericSettings(this.m_tableJson);
		let highlightedCells = table.getEffectiveHighlightedCells();
		if (oFF.XCollectionUtils.hasElements(highlightedCells))
		{
			let highlightingList = this.getTableJson().putNewList(oFF.SacTableConstants.TD_L_HIGHLIGHTED_CELLS);
			oFF.XCollectionUtils.forEach(highlightedCells, (cell) => {
				let struct = highlightingList.addNewStructure();
				struct.putString(oFF.SacTableConstants.HC_S_BACKGROUND_COLOR, oFF.RenderThemingHelper.remapColor(themeCache, cell.getColor()));
				struct.putInteger(oFF.SacTableConstants.C_N_X, cell.getColumn());
				struct.putInteger(oFF.SacTableConstants.C_N_Y, cell.getRow());
			});
		}
		else
		{
			this.getTableJson().putNewList(oFF.SacTableConstants.TD_L_HIGHLIGHTED_CELLS);
		}
		this.getTableJson().putInteger(oFF.SacTableConstants.TD_N_DATA_REGION_HEADER_END_ROW, table.getHeaderEndRow());
		let totalRowsDiff = table.getTotalRowDiff();
		if (totalRowsDiff < 0)
		{
			this.getTableJson().putInteger(oFF.SacTableConstants.TD_N_TOTAL_ROWS_DIFF, totalRowsDiff);
		}
		else
		{
			this.getTableJson().remove(oFF.SacTableConstants.TD_N_TOTAL_ROWS_DIFF);
		}
		table.setTotalRowDiff(0);
	}
	return tokenList;
};
oFF.RsSacTableRenderer.prototype.prepareJsonStructure = function()
{
	this.m_tableJson = oFF.PrFactory.createStructure();
	this.m_rowList = this.m_tableJson.putNewList(oFF.SacTableConstants.TD_L_ROWS);
};
oFF.RsSacTableRenderer.prototype.reFormat = function(tableContainer)
{
	let tableContainerC = tableContainer;
	return !oFF.XObjectExt.isValidObject(tableContainerC) ? null : this.reFormatInternal(tableContainerC, true);
};
oFF.RsSacTableRenderer.prototype.reFormatInternal = function(tableContainer, markPristine)
{
	let table = !oFF.XObjectExt.isValidObject(tableContainer) ? null : tableContainer.getResultTable();
	let tableJson = null;
	if (oFF.XObjectExt.isValidObject(table) && table.isHeaderComplete())
	{
		let renderHelper = oFF.SacAnalyticTableWidgetRenderHelper.createAnalyticTableRenderHelper(table);
		this.prepareJsonStructure();
		if (markPristine && tableContainer.needsReApplyFormatting())
		{
			table.reApplyTableStyling();
		}
		if (markPristine && (tableContainer.needsReWriteRows() || tableContainer.needsRecreateRows()))
		{
			if (tableContainer.needsRecreateRows())
			{
				table.recreateHeaderColumns();
			}
			renderHelper.fillRowsFromList(table.getHeaderRowList(), this.m_rowList, 0, table.isFreezeHeaderRows(), table.getFreezeUpToRow());
			renderHelper.fillRowsFromList(table.getRowList(), this.m_rowList, table.getHeaderRowList().size(), false, table.getFreezeUpToRow());
		}
		this.postRender(renderHelper, table);
		tableJson = this.getTableJson();
		tableJson.putBoolean(oFF.SacTableConstants.TD_B_PARTIAL, true);
		tableJson.putBoolean(oFF.SacTableConstants.TD_B_SCROLL_TO_TOP, false);
	}
	if (markPristine)
	{
		tableContainer.markPristine();
	}
	return tableJson;
};
oFF.RsSacTableRenderer.prototype.reHighlight = function(rowMin, rowMax, colMin, colMax, tableContainer)
{
	let result = null;
	if (oFF.XObjectExt.isValidObject(tableContainer))
	{
		tableContainer.applyRenderingScope(rowMin, rowMax, colMin, colMax);
		result = this.reFormatInternal(tableContainer, false);
		tableContainer.resetRenderingScope();
	}
	return result;
};
oFF.RsSacTableRenderer.prototype.releaseObject = function()
{
	this.releaseStaleData();
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RsSacTableRenderer.prototype.releaseStaleData = function()
{
	this.m_tableJson = null;
	this.m_rowList = null;
};
oFF.RsSacTableRenderer.prototype.render = function(tableContainer)
{
	let table = tableContainer.getVisualizationData();
	this.prepareJsonStructure();
	let tableJson = this.getTableJson();
	let renderHelper = oFF.SacAnalyticTableWidgetRenderHelper.createAnalyticTableRenderHelper(table);
	if (!oFF.XObjectExt.isValidObject(table) || !table.isHeaderComplete())
	{
		tableJson = null;
	}
	else
	{
		if (table.isRowPaginated())
		{
			renderHelper.fillRowsFromList(table.getHeaderRowList(), this.m_rowList, 0, table.isFreezeHeaderRows(), table.getFreezeUpToRow());
			let localRowList = table.getLocalRowList();
			if (oFF.XCollectionUtils.hasElements(localRowList))
			{
				renderHelper.fillRowsFromList(localRowList, this.m_rowList, table.getHeaderRowList().size(), false, table.getFreezeUpToRow());
			}
		}
		else if (table.isPartial())
		{
			renderHelper.fillRowsFromList(table.getHeaderRowList(), this.m_rowList, 0, table.isFreezeHeaderRows(), table.getFreezeUpToRow());
			let localRowList = table.getLocalRowList();
			if (oFF.XCollectionUtils.hasElements(localRowList))
			{
				renderHelper.fillRowsFromList(localRowList, this.m_rowList, table.getTableRowOffsetForTupleIndex(localRowList.get(0).getRootTupleIndex()), false, table.getFreezeUpToRow());
			}
			tableJson.putBoolean(oFF.SacTableConstants.TD_B_PARTIAL, true);
		}
		else
		{
			renderHelper.fillRowsFromList(table.getHeaderRowList(), this.m_rowList, 0, table.isFreezeHeaderRows(), table.getFreezeUpToRow());
			renderHelper.fillRowsFromList(table.getRowList(), this.m_rowList, table.getHeaderRowList().size(), false, table.getFreezeUpToRow());
			let partialStructure = tableJson.putNewStructure(oFF.SacTableConstants.TD_B_PARTIAL);
			partialStructure.putInteger(oFF.SacTableConstants.TDP_N_TOTAL_ROWS, table.getRowsTotalCount());
			partialStructure.putInteger(oFF.SacTableConstants.TDP_N_ROW_HEIGHT, oFF.SacTableConstants.DF_R_N_HEIGHT);
		}
		this.postRender(renderHelper, table);
		tableJson.putBoolean(oFF.SacTableConstants.TD_B_SCROLL_TO_TOP, false);
	}
	return tableJson;
};

oFF.FioriGrid = function() {};
oFF.FioriGrid.prototype = new oFF.XObject();
oFF.FioriGrid.prototype._ff_c = "FioriGrid";

oFF.FioriGrid.MAGIC_CELL_DIV = "/";
oFF.FioriGrid.create = function(resultSet)
{
	let grid = new oFF.FioriGrid();
	grid.setupGrid(resultSet);
	return grid;
};
oFF.FioriGrid.prototype.m_cells = null;
oFF.FioriGrid.prototype.m_colDefs = null;
oFF.FioriGrid.prototype.m_fixedHeight = 0;
oFF.FioriGrid.prototype.m_fixedHeightOff = 0;
oFF.FioriGrid.prototype.m_fixedWidth = 0;
oFF.FioriGrid.prototype.m_fixedWidthOff = 0;
oFF.FioriGrid.prototype.m_offsetColumns = 0;
oFF.FioriGrid.prototype.m_offsetRows = 0;
oFF.FioriGrid.prototype.m_resultSet = null;
oFF.FioriGrid.prototype.m_rowDefs = null;
oFF.FioriGrid.prototype.m_semStyles = null;
oFF.FioriGrid.prototype.m_suppressRepetition = true;
oFF.FioriGrid.prototype.m_suppress_unit = null;
oFF.FioriGrid.prototype.m_withDetails = false;
oFF.FioriGrid.prototype.addCell = function(axisType, position, tupleIndex, tupleOffset, cell)
{
	if (axisType === oFF.AxisType.ROWS)
	{
		cell.setRow(tupleIndex + tupleOffset + this.m_offsetRows);
		cell.setColumn(position);
		this.setCell(position, tupleIndex + tupleOffset, cell);
	}
	else
	{
		cell.setRow(position);
		cell.setColumn(tupleIndex + tupleOffset + this.m_offsetColumns);
		this.setCell(tupleIndex + tupleOffset, position, cell);
	}
};
oFF.FioriGrid.prototype.addSemanticStyle = function(member, semantic)
{
	this.m_semStyles.put(member, semantic);
};
oFF.FioriGrid.prototype.appendAlertLevel = function(dataCell, sb)
{
	let maxAlertLevel = dataCell.getMaxAlertLevel();
	if (maxAlertLevel !== oFF.AlertLevel.NORMAL)
	{
		sb.append("|[");
		sb.append(oFF.isNull(maxAlertLevel) ? "<null>" : maxAlertLevel.getName());
		sb.append("]");
	}
};
oFF.FioriGrid.prototype.appendAlertLevelToValue = function(element, formattedValue)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(element.getExceptionName()))
	{
		formattedValue.append(" [").appendInt(element.getAlertLevel()).append("]");
	}
};
oFF.FioriGrid.prototype.appendCurrencyUnit = function(currencyUnit, sb)
{
	if (oFF.notNull(currencyUnit) && !currencyUnit.isEmpty())
	{
		sb.append("|");
		if (currencyUnit.isMixed())
		{
			sb.append("M:");
		}
		else if (currencyUnit.hasUnit())
		{
			sb.append("U:");
		}
		else if (currencyUnit.hasCurrency())
		{
			sb.append("C:");
		}
		if (currencyUnit.hasFormatted())
		{
			sb.append(currencyUnit.getFormatted());
		}
		else
		{
			sb.append("<null>");
		}
	}
};
oFF.FioriGrid.prototype.appendInputReadiness = function(dataCell, readinessStates, sb)
{
	let queryManager = dataCell.getQueryModel().getQueryManager();
	if (queryManager.supportsInputReadinessStates() && dataCell.getQueryModel().isDataEntryEnabled())
	{
		let inputReadinessState = dataCell.getInputReadinessState();
		if (oFF.notNull(inputReadinessState))
		{
			let readinessState = readinessStates.get(inputReadinessState.getIndex());
			let inputReadinessTypes = readinessState.getInputReadinessTypes();
			let types = oFF.XList.create();
			for (let i = 0; i < inputReadinessTypes.size(); i++)
			{
				types.add(inputReadinessTypes.get(i).getShortcut());
			}
			sb.append("|S:").append(oFF.XCollectionUtils.join(types, ","));
		}
	}
};
oFF.FioriGrid.prototype.appendPrefixValueSuffix = function(currencyUnit, dataCell, sb)
{
	if (oFF.notNull(currencyUnit) && oFF.XString.compare(this.m_suppress_unit, currencyUnit.getFormatted()) === 0)
	{
		sb.append(this.formatDataCellValue(dataCell));
	}
	else
	{
		if (oFF.notNull(currencyUnit) && currencyUnit.hasPrefix())
		{
			sb.append(currencyUnit.getPrefix()).append(" ");
		}
		sb.append(this.formatDataCellValue(dataCell));
		if (oFF.notNull(currencyUnit) && currencyUnit.hasSuffix())
		{
			sb.append(" ").append(currencyUnit.getSuffix());
		}
	}
};
oFF.FioriGrid.prototype.appendValueChanged = function(dataCell, sb)
{
	if (dataCell.isValueChanged())
	{
		sb.append("|N:");
		let newValue = dataCell.getXValue();
		if (oFF.isNull(newValue))
		{
			sb.append("<null>");
		}
		else
		{
			sb.append(newValue.getValueType().getName());
			if (newValue.getValueType() === oFF.XValueType.STRING)
			{
				sb.append(" ").append(newValue.getString());
			}
		}
	}
	if (dataCell.isNewValueForced())
	{
		sb.append("|F:");
	}
};
oFF.FioriGrid.prototype.appendValueException = function(dataCell, sb)
{
	let valueException = dataCell.getValueException();
	if (valueException !== oFF.ValueException.NORMAL)
	{
		sb.append("|");
		if (oFF.isNull(valueException))
		{
			sb.append("<null>");
		}
		else
		{
			sb.append(valueException.getName());
		}
	}
};
oFF.FioriGrid.prototype.exportToFireflyGrid = function(suppressRepetition)
{
	this.m_suppressRepetition = suppressRepetition;
	this.prepareCellStructure();
	let colCount = this.getColumnCount();
	let rowCount = this.getRowCount();
	let fixedRows = this.getFixedRowsCount();
	let fixedCols = this.getFixedColumnsCount();
	let layer1 = oFF.PrFactory.createStructure();
	layer1.putString("Type", "Grid");
	layer1.putString("ApplicationName", this.m_resultSet.getApplication().getApplicationName());
	layer1.putInteger("RowCount", rowCount);
	layer1.putInteger("ColCount", colCount);
	layer1.putInteger("FixedRows", fixedRows);
	layer1.putInteger("FixedColumns", fixedCols);
	let layer1Cells = layer1.putNewList("Cells");
	for (let y = 0; y < rowCount; y++)
	{
		for (let x = 0; x < colCount; x++)
		{
			let gridCell = this.getSimpleCell(x, y);
			if (oFF.notNull(gridCell))
			{
				let cell = layer1Cells.addNewStructure();
				cell.putString("Type", "Text");
				cell.putString("DisplayValue", gridCell.getDisplayValue());
				cell.putString("Value", gridCell.getText(-1));
				cell.putInteger("Row", gridCell.getRow());
				cell.putInteger("Column", gridCell.getColumn());
				cell.putString("DrillState", gridCell.getDrillState());
				cell.putString("DataValueId", gridCell.getDataValueId());
				cell.putInteger("DisplayLevel", gridCell.getDisplayLevel());
				cell.putInteger("RowTupleIndex", gridCell.getRowTupleIndex());
				cell.putInteger("ColumnTupleIndex", gridCell.getColumnTupleIndex());
				cell.putInteger("TupleIndex", gridCell.getRowTupleIndex() > 0 ? gridCell.getRowTupleIndex() : gridCell.getColumnTupleIndex());
				cell.putString("Icon", gridCell.getIcon());
				cell.putString("AlertLevel", gridCell.getAlertLevel());
				cell.putString("DocumentId", gridCell.getDocumentId());
				cell.putBoolean("Input", gridCell.getInput());
				if (gridCell.isTotals())
				{
					cell.putBoolean("Totals", true);
				}
				let cellType = gridCell.getCellType();
				if (cellType === oFF.FioriCellType.HEADER)
				{
					cell.putString("Semantic", "Header");
					cell.putString("Dimension", gridCell.getDimension());
					cell.putString("Member", gridCell.getMember());
					cell.putString("SemanticClass", gridCell.getSemantic());
				}
				else if (cellType === oFF.FioriCellType.TITLE)
				{
					cell.putString("Semantic", "Title");
					cell.putString("Dimension", gridCell.getDimension());
					if (gridCell.getDimensionOther() !== null)
					{
						cell.putString("DimensionOther", gridCell.getDimensionOther());
					}
				}
				else if (cellType === oFF.FioriCellType.DATA)
				{
					cell.putInteger("DataRow", y - fixedRows);
					cell.putInteger("DataColumn", x - fixedCols);
					cell.putString("Member", gridCell.getMember());
					cell.putString("Member2", gridCell.getMember2());
					cell.putString("Semantic", gridCell.isTotals() ? "Result" : "Standard");
				}
				else
				{
					cell.putString("Semantic", "Empty");
					cell.putString("GridPart", "Empty");
				}
			}
		}
	}
	return layer1;
};
oFF.FioriGrid.prototype.formatDataCellValue = function(dataCell)
{
	return dataCell.getFormattedValue();
};
oFF.FioriGrid.prototype.formatFieldValue = function(fieldValue)
{
	if (oFF.isNull(fieldValue))
	{
		return "";
	}
	else
	{
		if (fieldValue.getValueType() === oFF.XValueType.DOUBLE)
		{
			let value = fieldValue.getDouble();
			return oFF.XNumberFormatter.formatDoubleToString(value, "#.0000");
		}
		else
		{
			return fieldValue.getFormattedValue();
		}
	}
};
oFF.FioriGrid.prototype.getCellValue = function(formattedValue, dataCell)
{
	let valueException = dataCell.getValueException();
	if (valueException === oFF.ValueException.NULL_VALUE || valueException === oFF.ValueException.UNDEFINED)
	{
		return "";
	}
	let exceptionText = null;
	if (valueException !== oFF.ValueException.NORMAL && valueException !== oFF.ValueException.ZERO)
	{
		exceptionText = valueException.getName();
	}
	let alertLevelText = null;
	let maxAlertLevel = dataCell.getMaxAlertLevel();
	if (maxAlertLevel !== oFF.AlertLevel.NORMAL)
	{
		alertLevelText = maxAlertLevel.getName();
	}
	if (oFF.notNull(exceptionText) || oFF.notNull(alertLevelText))
	{
		let buffer = oFF.XStringBuffer.create();
		buffer.append(formattedValue);
		if (oFF.notNull(alertLevelText))
		{
			buffer.append(" [").append(alertLevelText).append("]");
		}
		if (oFF.notNull(exceptionText))
		{
			buffer.append(" [").append(exceptionText).append("]");
		}
		return buffer.toString();
	}
	return formattedValue;
};
oFF.FioriGrid.prototype.getCellValueWithDetails = function(dataCell, readinessStates)
{
	let sb = oFF.XStringBuffer.create();
	let qDataCell = dataCell.getDataCell();
	if (oFF.notNull(qDataCell))
	{
		sb.append("(DataCell->").append(qDataCell.getName()).append(")");
	}
	let decimalPlaces = dataCell.getDecimalPlaces();
	if (decimalPlaces !== 0)
	{
		sb.append("(Decimal Places=").appendInt(decimalPlaces).append(")");
	}
	if (dataCell.isDataEntryEnabled())
	{
		sb.append("I:");
	}
	if (dataCell.isValueLocked())
	{
		sb.append("L:");
	}
	let currencyUnit = dataCell.getCurrencyUnit();
	this.appendPrefixValueSuffix(currencyUnit, dataCell, sb);
	this.appendValueException(dataCell, sb);
	this.appendAlertLevel(dataCell, sb);
	this.appendValueChanged(dataCell, sb);
	sb.append("|").append(dataCell.getValueType().getName());
	sb.append("|").append(dataCell.getFormatString());
	this.appendCurrencyUnit(currencyUnit, sb);
	this.appendInputReadiness(dataCell, readinessStates, sb);
	return sb.toString();
};
oFF.FioriGrid.prototype.getColumnCount = function()
{
	return this.m_cells.size0();
};
oFF.FioriGrid.prototype.getColumnMaxCharacters = function(column, rowStart, maxRowCount)
{
	let max = 0;
	let totalRows = this.m_cells.size1();
	let rowCounter = 0;
	for (let row = rowStart; row < totalRows && (maxRowCount === -1 || rowCounter < maxRowCount); row++)
	{
		let cell = this.m_cells.getByIndices(column, row);
		if (oFF.notNull(cell))
		{
			max = oFF.XMath.max(cell.getCharacterCount(), max);
		}
		rowCounter++;
	}
	return max;
};
oFF.FioriGrid.prototype.getEffectiveFieldSizeCol = function(axis)
{
	let effectiveSize = 0;
	let rsDimensions = axis.getRsDimensions();
	let dimensionSize = rsDimensions.size();
	for (let idxDim = 0; idxDim < dimensionSize; idxDim++)
	{
		effectiveSize = effectiveSize + rsDimensions.get(idxDim).getResultSetFields().size();
		effectiveSize = effectiveSize + this.getMaxDisplayLevel(axis, rsDimensions.get(idxDim));
	}
	return effectiveSize;
};
oFF.FioriGrid.prototype.getEffectiveFieldSizeRow = function(axis)
{
	let effectiveSize = 0;
	let rsDimensions = axis.getRsDimensions();
	let dimensionSize = rsDimensions.size();
	for (let idxDim = 0; idxDim < dimensionSize; idxDim++)
	{
		effectiveSize = effectiveSize + rsDimensions.get(idxDim).getResultSetFields().size();
	}
	return effectiveSize;
};
oFF.FioriGrid.prototype.getFixedColumnsCount = function()
{
	return this.m_fixedWidth;
};
oFF.FioriGrid.prototype.getFixedRowsCount = function()
{
	return this.m_fixedHeight;
};
oFF.FioriGrid.prototype.getMaxDisplayLevel = function(columns, rsDim)
{
	let tuplesCount = columns.getTuplesCount();
	let result = 0;
	for (let tupleIndex = 0; tupleIndex < tuplesCount; tupleIndex++)
	{
		let tuple = columns.getTupleAt(tupleIndex);
		result = oFF.XMath.max(result, tuple.getTupleElementByDimension(rsDim).getDisplayLevel());
	}
	return result;
};
oFF.FioriGrid.prototype.getRowCount = function()
{
	return this.m_cells.size1();
};
oFF.FioriGrid.prototype.getSimpleCell = function(column, row)
{
	return this.m_cells.getByIndices(column, row);
};
oFF.FioriGrid.prototype.prepareCellStructure = function()
{
	if (oFF.isNull(this.m_cells) && oFF.notNull(this.m_resultSet))
	{
		this.prepareStructure();
	}
};
oFF.FioriGrid.prototype.prepareStructure = function()
{
	let columnsAxis = this.m_resultSet.getColumnsAxis();
	let colMaxCount = oFF.XMath.max(columnsAxis.getDataCount(), columnsAxis.getTuplesCount());
	let rowsAxis = this.m_resultSet.getRowsAxis();
	this.m_fixedHeight = oFF.XMath.max(this.getEffectiveFieldSizeCol(columnsAxis), this.getEffectiveFieldSizeRow(rowsAxis) === 0 ? 0 : 1);
	let rowDataCount = rowsAxis.getDataCount();
	let rowTupleCount = rowsAxis.getTuplesCount();
	let rowMaxCount = oFF.XMath.max(rowDataCount, rowTupleCount);
	this.m_fixedWidth = oFF.XMath.max(this.getEffectiveFieldSizeRow(rowsAxis), 1);
	let totalColumns = this.m_fixedWidth + colMaxCount;
	let totalRows = this.m_fixedHeight + rowMaxCount;
	this.m_offsetColumns = this.m_resultSet.getQueryManager().getOffsetColumns();
	this.m_offsetRows = this.m_resultSet.getQueryManager().getOffsetRows();
	this.m_cells = oFF.XArray2Dim.create(totalColumns, totalRows);
	this.m_rowDefs = oFF.XList.create();
	this.m_colDefs = oFF.XList.create();
	for (let x = 0; x < totalColumns; x++)
	{
		this.m_colDefs.add(oFF.FioriLineDef.create());
	}
	for (let y = 0; y < totalRows; y++)
	{
		this.m_rowDefs.add(oFF.FioriLineDef.create());
	}
	this.setTitleCells(rowsAxis, oFF.XMath.max(this.m_fixedHeight - 1, 0), columnsAxis.getRsDimensions().isEmpty());
	this.setTitleCells(columnsAxis, oFF.XMath.max(this.m_fixedWidth - 1, 0), rowsAxis.getRsDimensions().isEmpty());
	let fixedHeight = this.m_fixedHeight - this.m_fixedHeightOff;
	this.setHeaderCells(rowsAxis, fixedHeight);
	let fixedWidth = this.m_fixedWidth - this.m_fixedWidthOff;
	this.setHeaderCells(columnsAxis, fixedWidth);
	this.setDataCells();
};
oFF.FioriGrid.prototype.prependToFirstField = function(element, formattedValue)
{
	let displayLevel = element.getDisplayLevel();
	let drillState = element.getDrillState();
	if (displayLevel > 0 || drillState !== oFF.DrillState.LEAF)
	{
		let oldValue = formattedValue.toString();
		formattedValue.clear();
		for (let i = 0; i < displayLevel; i++)
		{
			formattedValue.append("  ");
		}
		if (drillState === oFF.DrillState.COLLAPSED || drillState === oFF.DrillState.LEAF_DRILLDOWN_ALLOWED || drillState === oFF.DrillState.LEAF_UDH_EXPAND_ALLOWED || drillState === oFF.DrillState.COLLAPSED_EXPAND_AND_DRILLDOWN_ALLOWED)
		{
			formattedValue.append("+ ");
		}
		else if (drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED || drillState === oFF.DrillState.LEAF_UDH)
		{
			formattedValue.append("- ");
		}
		formattedValue.append(oldValue);
	}
};
oFF.FioriGrid.prototype.releaseObject = function()
{
	if (oFF.notNull(this.m_cells))
	{
		let size0 = this.m_cells.size0();
		for (let x = 0; x < size0; x++)
		{
			let size1 = this.m_cells.size1();
			for (let y = 0; y < size1; y++)
			{
				let cell = this.m_cells.getByIndices(x, y);
				if (oFF.notNull(cell))
				{
					oFF.XObjectExt.release(cell);
					this.m_cells.setByIndices(x, y, null);
				}
			}
		}
		oFF.XObjectExt.release(this.m_cells);
		this.m_cells = null;
	}
	this.m_colDefs = null;
	this.m_rowDefs = null;
	this.m_resultSet = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FioriGrid.prototype.setCell = function(x, y, cell)
{
	if (this.m_rowDefs.get(y).hasTotals() || this.m_colDefs.get(x).hasTotals())
	{
		cell.setIsTotal(true);
	}
	this.m_cells.setByIndices(x, y, cell);
};
oFF.FioriGrid.prototype.setDataCells = function()
{
	let readinessStates = this.m_resultSet.getInputReadinessStates();
	let dc = this.m_resultSet.getDataColumns();
	let dr = this.m_resultSet.getDataRows();
	let sb = oFF.XStringBuffer.create();
	for (let y = 0; y < dr; y++)
	{
		for (let x = 0; x < dc; x++)
		{
			let dataCell = this.m_resultSet.getDataCell(x, y);
			let cell;
			if (this.m_withDetails)
			{
				cell = oFF.FioriGridCell.create(this.getCellValueWithDetails(dataCell, readinessStates), oFF.FioriCellType.DATA);
			}
			else
			{
				cell = oFF.FioriGridCell.create(this.getCellValue(this.formatDataCellValue(dataCell), dataCell), oFF.FioriCellType.DATA);
			}
			sb.clear();
			this.appendPrefixValueSuffix(dataCell.getCurrencyUnit(), dataCell, sb);
			cell.setDisplayValue(sb.toString());
			cell.setAlertLevel(dataCell.getMaxAlertLevel().getName());
			cell.setDocumentId(dataCell.getDocumentId());
			cell.setInput(dataCell.isDataEntryEnabled());
			let rsDC = dataCell.getDataCell();
			if (oFF.notNull(rsDC))
			{
				sb.clear();
				let refStr = rsDC.getReferenceStructureElement1();
				if (oFF.notNull(refStr))
				{
					sb.append("mem-");
					sb.append(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
					if (refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()) !== null)
					{
						cell.setMember(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
					}
					else
					{
						cell.setMember(refStr.getName());
					}
				}
				refStr = rsDC.getReferenceStructureElement2();
				if (oFF.notNull(refStr))
				{
					sb.append("-mem-");
					sb.append(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
					if (refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()) !== null)
					{
						cell.setMember2(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
					}
					else
					{
						cell.setMember(refStr.getName());
					}
				}
				let s3 = dataCell.getDocumentId();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(s3))
				{
					cell.setDataValueId(oFF.XStringUtils.concatenate3("docId", "-", s3));
				}
			}
			cell.setRow(y + this.m_fixedHeight - this.m_fixedHeightOff + this.m_offsetRows);
			cell.setColumn(x + this.m_fixedWidth - this.m_fixedWidthOff + this.m_offsetColumns);
			this.setCell(x + this.m_fixedWidth - this.m_fixedWidthOff, y + this.m_fixedHeight - this.m_fixedHeightOff, cell);
		}
	}
};
oFF.FioriGrid.prototype.setHeaderCells = function(axis, tupleOffset)
{
	let rsDimensions = axis.getRsDimensions();
	let axisType = axis.getType();
	let tuplesCount = axis.getTuplesCount();
	let formattedValue = oFF.XStringBuffer.create();
	let displayValue = oFF.XStringBuffer.create();
	let isColAxis = axis.getType() === oFF.AxisType.COLUMNS;
	for (let tupleIndex = 0; tupleIndex < tuplesCount; tupleIndex++)
	{
		let tuple = axis.getTupleAt(tupleIndex);
		let position = 0;
		let tupleSize = tuple.size();
		for (let tupleElementIndex = 0; tupleElementIndex < tupleSize; tupleElementIndex++)
		{
			let rsDimension = rsDimensions.get(tupleElementIndex);
			let element = tuple.get(tupleElementIndex);
			let adjustDispLevel = isColAxis ? element.getDisplayLevel() : 0;
			let rsVisibleFields = rsDimension.getResultSetFields();
			let visibleFieldCount = rsVisibleFields.size();
			let dimensionMember = element.getDimensionMember();
			formattedValue.clear();
			let maxDispLevel = isColAxis && visibleFieldCount > 0 ? this.getMaxDisplayLevel(axis, rsDimension) : 0;
			if (isColAxis && visibleFieldCount > 0 && maxDispLevel > 0)
			{
				for (let fillIndex = 0; fillIndex <= maxDispLevel; ++fillIndex)
				{
					let fillCell = oFF.FioriGridCell.create("", oFF.FioriCellType.HEADER);
					fillCell.setDisplayValue("");
					let extName3 = this.m_resultSet.getQueryModel().getDimensionByName(rsDimension.getName()).getExternalName();
					if (oFF.notNull(extName3))
					{
						fillCell.setDimension(extName3);
					}
					else
					{
						fillCell.setDimension(rsDimension.getName());
					}
					if (dimensionMember.getName() !== null && rsDimension.isStructure() && dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()) !== null)
					{
						fillCell.setMember(dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()).getString());
					}
					else
					{
						fillCell.setMember(dimensionMember.getName());
					}
					fillCell.setRow(position + fillIndex);
					fillCell.setColumn(tupleIndex + tupleOffset);
					this.setCell(tupleIndex + tupleOffset, position + fillIndex, fillCell);
				}
			}
			for (let fieldIndex = 0; fieldIndex < visibleFieldCount; fieldIndex++)
			{
				let fieldValue = dimensionMember.getAllFieldValues().getByKey(rsVisibleFields.get(fieldIndex).getName());
				formattedValue.append(this.formatFieldValue(fieldValue));
				displayValue.append(this.formatFieldValue(fieldValue));
				if (fieldIndex === 0)
				{
					this.prependToFirstField(element, formattedValue);
					this.appendAlertLevelToValue(element, formattedValue);
				}
				let gridCell = oFF.FioriGridCell.create(formattedValue.toString(), oFF.FioriCellType.HEADER);
				if (!this.m_suppressRepetition || element.getFirstTuple() === tuple)
				{
					gridCell.setDisplayValue(displayValue.toString());
				}
				let extName5 = this.m_resultSet.getQueryModel().getDimensionByName(rsDimension.getName()).getExternalName();
				if (oFF.notNull(extName5))
				{
					gridCell.setDimension(extName5);
				}
				else
				{
					gridCell.setDimension(rsDimension.getName());
				}
				if (rsDimension.isStructure() && dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()) !== null)
				{
					gridCell.setMember(dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()).getString());
					let sM = gridCell.getMember();
					if (oFF.notNull(sM))
					{
						gridCell.setSemantic(this.m_semStyles.getByKey(sM));
					}
				}
				else
				{
					gridCell.setMember(dimensionMember.getName());
				}
				if (axis === this.m_resultSet.getRowsAxis())
				{
					gridCell.setRowTupleIndex(tupleIndex);
				}
				else
				{
					gridCell.setColumnTupleIndex(tupleIndex);
				}
				if (fieldIndex === 0 && element.getFirstTuple() === tuple)
				{
					gridCell.setDisplayLevel(isColAxis ? 0 : element.getDisplayLevel());
					let drillState = element.getDrillState();
					let icon = "";
					if (drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED)
					{
						gridCell.setDrillState("Expanded");
						if (rsDimension.getLowerLevelNodeAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT)
						{
							if (axisType === oFF.AxisType.ROWS)
							{
								icon = "sap-icon://slim-arrow-up";
							}
							else
							{
								icon = "sap-icon://slim-arrow-left";
							}
						}
						else
						{
							if (axisType === oFF.AxisType.ROWS)
							{
								icon = "sap-icon://slim-arrow-down";
							}
							else
							{
								icon = "sap-icon://slim-arrow-down";
							}
						}
					}
					else if (drillState === oFF.DrillState.COLLAPSED || drillState === oFF.DrillState.LEAF_UDH_EXPAND_ALLOWED)
					{
						gridCell.setDrillState("Collapsed");
						if (rsDimension.getLowerLevelNodeAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT)
						{
							if (axisType === oFF.AxisType.ROWS)
							{
								icon = "sap-icon://slim-arrow-right";
							}
							else
							{
								icon = "sap-icon://slim-arrow-up";
							}
						}
						else
						{
							if (axisType === oFF.AxisType.ROWS)
							{
								icon = "sap-icon://slim-arrow-right";
							}
							else
							{
								icon = "sap-icon://slim-arrow-right";
							}
						}
					}
					else
					{
						gridCell.setDrillState("None");
						icon = "";
					}
					gridCell.setIcon(icon);
				}
				let sMember = gridCell.getMember();
				if (oFF.notNull(sMember) && this.m_semStyles.getByKey(sMember) !== null)
				{
					gridCell.setSemantic(this.m_semStyles.getByKey(sMember));
				}
				formattedValue.clear();
				displayValue.clear();
				this.addCell(axisType, position + adjustDispLevel, tupleIndex, tupleOffset, gridCell);
				position++;
			}
		}
	}
};
oFF.FioriGrid.prototype.setSuppressUnit = function(unit)
{
	this.m_suppress_unit = unit;
};
oFF.FioriGrid.prototype.setTitleCells = function(axis, offset, complementaryAxisEmpty)
{
	let type = axis.getType();
	let rsDimensions = axis.getRsDimensions();
	let position = 0;
	let buffer = oFF.XStringBuffer.create();
	let bufferDV = oFF.XStringBuffer.create();
	let dimSize = rsDimensions.size();
	for (let idxDim = 0; idxDim < dimSize; idxDim++)
	{
		let rsDimension = rsDimensions.get(idxDim);
		let visibleFields = rsDimension.getResultSetFields();
		let fieldSize = visibleFields.size();
		for (let idxField = 0; idxField < fieldSize; idxField++)
		{
			let fieldName = visibleFields.get(idxField).getName();
			if (oFF.XStringUtils.isNullOrEmpty(rsDimension.getName()))
			{
				buffer.append("[").append(fieldName).append("]");
			}
			else
			{
				if (idxField === 0)
				{
					bufferDV.append(rsDimension.getText());
				}
				if (rsDimension.isMeasureStructure())
				{
					if (idxField === 0)
					{
						buffer.append("Measures");
					}
				}
				else if (rsDimension.isStructure())
				{
					if (idxField === 0)
					{
						buffer.append("Structure");
					}
				}
				else
				{
					if (idxField === 0)
					{
						buffer.append(rsDimension.getName()).append(".[");
					}
					else
					{
						buffer.append("[");
					}
					buffer.append(fieldName).append("]");
				}
			}
			if (type === oFF.AxisType.ROWS)
			{
				if (!(rsDimension.isStructure() && dimSize === idxDim + 1))
				{
					let titleCell = oFF.FioriGridCell.create(buffer.toString(), oFF.FioriCellType.TITLE);
					titleCell.setDisplayValue(bufferDV.toString());
					let extName1 = this.m_resultSet.getQueryModel().getDimensionByName(rsDimension.getName()).getExternalName();
					if (oFF.notNull(extName1))
					{
						titleCell.setDimension(extName1);
					}
					else
					{
						titleCell.setDimension(rsDimension.getName());
					}
					titleCell.setRow(offset);
					titleCell.setColumn(position);
					this.setCell(position, offset, titleCell);
				}
			}
			else
			{
				if (!(rsDimension.isStructure() && dimSize === idxDim + 1))
				{
					let existingCell = this.m_cells.getByIndices(offset, position);
					if (oFF.notNull(existingCell))
					{
						let simpleName = buffer.toString();
						buffer.clear();
						bufferDV.clear();
						buffer.append(existingCell.toString());
						buffer.append(oFF.FioriGrid.MAGIC_CELL_DIV);
						buffer.append(simpleName);
						bufferDV.append(existingCell.getDisplayValue());
						if (idxField === 0 && !rsDimension.isStructure())
						{
							bufferDV.append(oFF.FioriGrid.MAGIC_CELL_DIV);
							bufferDV.append(rsDimension.getText());
						}
					}
					let titCell = oFF.FioriGridCell.create(buffer.toString(), oFF.FioriCellType.TITLE);
					titCell.setRow(position);
					titCell.setColumn(offset);
					titCell.setDisplayValue(bufferDV.toString());
					if (oFF.notNull(existingCell))
					{
						titCell.setDimension(existingCell.getDimension());
						let extName2 = this.m_resultSet.getQueryModel().getDimensionByName(rsDimension.getName()).getExternalName();
						if (oFF.notNull(extName2))
						{
							titCell.setDimensionOther(extName2);
						}
						else
						{
							titCell.setDimensionOther(rsDimension.getName());
						}
					}
					else
					{
						let extNameO = this.m_resultSet.getQueryModel().getDimensionByName(rsDimension.getName()).getExternalName();
						if (oFF.notNull(extNameO))
						{
							titCell.setDimension(extNameO);
						}
						else
						{
							titCell.setDimension(rsDimension.getName());
						}
					}
					this.setCell(offset, position, titCell);
				}
				else if (complementaryAxisEmpty)
				{
					this.m_fixedWidthOff = 1;
				}
			}
			buffer.clear();
			bufferDV.clear();
			position++;
		}
	}
};
oFF.FioriGrid.prototype.setupGrid = function(resultSet)
{
	this.m_resultSet = resultSet;
	this.m_withDetails = true;
	this.m_semStyles = oFF.XHashMapByString.create();
};

oFF.FioriGridCell = function() {};
oFF.FioriGridCell.prototype = new oFF.XObject();
oFF.FioriGridCell.prototype._ff_c = "FioriGridCell";

oFF.FioriGridCell.create = function(content, cellType)
{
	let object = new oFF.FioriGridCell();
	object.setupExt(content, cellType);
	return object;
};
oFF.FioriGridCell.prototype.m_alertLevel = null;
oFF.FioriGridCell.prototype.m_cellType = null;
oFF.FioriGridCell.prototype.m_col = 0;
oFF.FioriGridCell.prototype.m_colIndex = 0;
oFF.FioriGridCell.prototype.m_content = null;
oFF.FioriGridCell.prototype.m_dataValueId = null;
oFF.FioriGridCell.prototype.m_dimName = null;
oFF.FioriGridCell.prototype.m_displayLevel = 0;
oFF.FioriGridCell.prototype.m_displayValue = null;
oFF.FioriGridCell.prototype.m_documentId = null;
oFF.FioriGridCell.prototype.m_drillState = null;
oFF.FioriGridCell.prototype.m_icon = null;
oFF.FioriGridCell.prototype.m_input = false;
oFF.FioriGridCell.prototype.m_isLeftAligned = false;
oFF.FioriGridCell.prototype.m_isRep = false;
oFF.FioriGridCell.prototype.m_isTotal = false;
oFF.FioriGridCell.prototype.m_memName = null;
oFF.FioriGridCell.prototype.m_memName2 = null;
oFF.FioriGridCell.prototype.m_oDimName = null;
oFF.FioriGridCell.prototype.m_row = 0;
oFF.FioriGridCell.prototype.m_rowIndex = 0;
oFF.FioriGridCell.prototype.m_semantic = null;
oFF.FioriGridCell.prototype.getAlertLevel = function()
{
	return this.m_alertLevel;
};
oFF.FioriGridCell.prototype.getCellType = function()
{
	return this.m_cellType;
};
oFF.FioriGridCell.prototype.getCharacterCount = function()
{
	if (oFF.isNull(this.m_content))
	{
		return 0;
	}
	return oFF.XString.size(this.m_content);
};
oFF.FioriGridCell.prototype.getColumn = function()
{
	return this.m_col;
};
oFF.FioriGridCell.prototype.getColumnTupleIndex = function()
{
	return this.m_colIndex;
};
oFF.FioriGridCell.prototype.getDataValueId = function()
{
	return this.m_dataValueId;
};
oFF.FioriGridCell.prototype.getDimension = function()
{
	return this.m_dimName;
};
oFF.FioriGridCell.prototype.getDimensionOther = function()
{
	return this.m_oDimName;
};
oFF.FioriGridCell.prototype.getDisplayLevel = function()
{
	return this.m_displayLevel;
};
oFF.FioriGridCell.prototype.getDisplayValue = function()
{
	return this.m_displayValue;
};
oFF.FioriGridCell.prototype.getDocumentId = function()
{
	return this.m_documentId;
};
oFF.FioriGridCell.prototype.getDrillState = function()
{
	return this.m_drillState;
};
oFF.FioriGridCell.prototype.getIcon = function()
{
	return this.m_icon;
};
oFF.FioriGridCell.prototype.getInput = function()
{
	return this.m_input;
};
oFF.FioriGridCell.prototype.getIsRepetition = function()
{
	return this.m_isRep;
};
oFF.FioriGridCell.prototype.getMember = function()
{
	return this.m_memName;
};
oFF.FioriGridCell.prototype.getMember2 = function()
{
	return this.m_memName2;
};
oFF.FioriGridCell.prototype.getRow = function()
{
	return this.m_row;
};
oFF.FioriGridCell.prototype.getRowTupleIndex = function()
{
	return this.m_rowIndex;
};
oFF.FioriGridCell.prototype.getSemantic = function()
{
	return this.m_semantic;
};
oFF.FioriGridCell.prototype.getText = function(max)
{
	if (oFF.isNull(this.m_content))
	{
		return "";
	}
	if (oFF.XString.size(this.m_content) > max)
	{
		return oFF.XString.substring(this.m_content, 0, max);
	}
	return this.m_content;
};
oFF.FioriGridCell.prototype.isLeftAligned = function()
{
	return this.m_isLeftAligned;
};
oFF.FioriGridCell.prototype.isTotals = function()
{
	return this.m_isTotal;
};
oFF.FioriGridCell.prototype.releaseObject = function()
{
	this.m_content = null;
	this.m_cellType = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.FioriGridCell.prototype.setAlertLevel = function(alertLevel)
{
	this.m_alertLevel = alertLevel;
};
oFF.FioriGridCell.prototype.setColumn = function(column)
{
	this.m_col = column;
};
oFF.FioriGridCell.prototype.setColumnTupleIndex = function(index)
{
	this.m_colIndex = index;
};
oFF.FioriGridCell.prototype.setDataValueId = function(dataValueId)
{
	this.m_dataValueId = dataValueId;
};
oFF.FioriGridCell.prototype.setDimension = function(value)
{
	this.m_dimName = value;
};
oFF.FioriGridCell.prototype.setDimensionOther = function(value)
{
	this.m_oDimName = value;
};
oFF.FioriGridCell.prototype.setDisplayLevel = function(displayLevel)
{
	this.m_displayLevel = displayLevel;
};
oFF.FioriGridCell.prototype.setDisplayValue = function(displayValue)
{
	this.m_displayValue = displayValue;
};
oFF.FioriGridCell.prototype.setDocumentId = function(documentId)
{
	this.m_documentId = documentId;
};
oFF.FioriGridCell.prototype.setDrillState = function(drillState)
{
	this.m_drillState = drillState;
};
oFF.FioriGridCell.prototype.setIcon = function(icon)
{
	this.m_icon = icon;
};
oFF.FioriGridCell.prototype.setInput = function(bInput)
{
	this.m_input = bInput;
};
oFF.FioriGridCell.prototype.setIsRepetition = function(value)
{
	this.m_isRep = value;
};
oFF.FioriGridCell.prototype.setIsTotal = function(isTotal)
{
	this.m_isTotal = isTotal;
};
oFF.FioriGridCell.prototype.setMember = function(value)
{
	this.m_memName = value;
};
oFF.FioriGridCell.prototype.setMember2 = function(value)
{
	this.m_memName2 = value;
};
oFF.FioriGridCell.prototype.setRow = function(row)
{
	this.m_row = row;
};
oFF.FioriGridCell.prototype.setRowTupleIndex = function(index)
{
	this.m_rowIndex = index;
};
oFF.FioriGridCell.prototype.setSemantic = function(semantic)
{
	this.m_semantic = semantic;
};
oFF.FioriGridCell.prototype.setupExt = function(content, cellType)
{
	this.m_content = content;
	this.m_isLeftAligned = cellType !== oFF.FioriCellType.DATA;
	this.m_cellType = cellType;
};
oFF.FioriGridCell.prototype.toString = function()
{
	if (oFF.isNull(this.m_content))
	{
		return "";
	}
	return this.m_content;
};

oFF.FioriGridFactoryImpl = function() {};
oFF.FioriGridFactoryImpl.prototype = new oFF.XObject();
oFF.FioriGridFactoryImpl.prototype._ff_c = "FioriGridFactoryImpl";

oFF.FioriGridFactoryImpl.create = function()
{
	return new oFF.FioriGridFactoryImpl();
};
oFF.FioriGridFactoryImpl.prototype.createFioriGrid = function(resultSet)
{
	return oFF.FioriGrid.create(resultSet);
};

oFF.FioriLineDef = function() {};
oFF.FioriLineDef.prototype = new oFF.XObject();
oFF.FioriLineDef.prototype._ff_c = "FioriLineDef";

oFF.FioriLineDef.create = function()
{
	return new oFF.FioriLineDef();
};
oFF.FioriLineDef.prototype.m_hasTotals = false;
oFF.FioriLineDef.prototype.hasTotals = function()
{
	return this.m_hasTotals;
};
oFF.FioriLineDef.prototype.setHasTotals = function(hasTotals)
{
	this.m_hasTotals = hasTotals;
};
oFF.FioriLineDef.prototype.toString = function()
{
	return oFF.XStringBuffer.create().append("Totals:").appendBoolean(this.m_hasTotals).toString();
};

oFF.ReferenceGridFactoryImpl = function() {};
oFF.ReferenceGridFactoryImpl.prototype = new oFF.XObject();
oFF.ReferenceGridFactoryImpl.prototype._ff_c = "ReferenceGridFactoryImpl";

oFF.ReferenceGridFactoryImpl.create = function()
{
	return new oFF.ReferenceGridFactoryImpl();
};
oFF.ReferenceGridFactoryImpl.prototype.createForVizGrid = function(resultSet)
{
	return oFF.ReferenceGrid.createForVizGrid(resultSet);
};
oFF.ReferenceGridFactoryImpl.prototype.createReferenceGrid = function(resultSet, withDetails)
{
	if (withDetails)
	{
		return this.createReferenceGridWithDetails(resultSet);
	}
	return this.createReferenceGridSimple(resultSet);
};
oFF.ReferenceGridFactoryImpl.prototype.createReferenceGridSimple = function(resultSet)
{
	return oFF.ReferenceGrid.create(resultSet);
};
oFF.ReferenceGridFactoryImpl.prototype.createReferenceGridWithDetails = function(resultSet)
{
	return oFF.ReferenceGrid.createWithDetails(resultSet);
};
oFF.ReferenceGridFactoryImpl.prototype.createReferenceGridWithName = function(name, resultSet)
{
	if (oFF.notNull(name) && oFF.XString.endsWith(name, "_gen"))
	{
		return oFF.ReferenceGrid2.createWithName2(name, resultSet);
	}
	return oFF.ReferenceGrid.createWithName(name, resultSet);
};
oFF.ReferenceGridFactoryImpl.prototype.createReferenceGridWithNameAndDetails = function(name, resultSet)
{
	return oFF.ReferenceGrid.createWithNameAndDetails(name, resultSet);
};

oFF.KpiRendererFactoryImpl = function() {};
oFF.KpiRendererFactoryImpl.prototype = new oFF.XObject();
oFF.KpiRendererFactoryImpl.prototype._ff_c = "KpiRendererFactoryImpl";

oFF.KpiRendererFactoryImpl.create = function()
{
	return new oFF.KpiRendererFactoryImpl();
};
oFF.KpiRendererFactoryImpl.prototype.newContainerRenderer = function(protocolBindingType)
{
	return oFF.VizKpiRenderer.create();
};
oFF.KpiRendererFactoryImpl.prototype.newRenderer = function(protocolType)
{
	return oFF.RsKpiRenderer.create();
};

oFF.RsKpiRenderer = function() {};
oFF.RsKpiRenderer.prototype = new oFF.XObject();
oFF.RsKpiRenderer.prototype._ff_c = "RsKpiRenderer";

oFF.RsKpiRenderer.stateMap = null;
oFF.RsKpiRenderer.unitMap = null;
oFF.RsKpiRenderer.addIndicatorContent = function(tuple, dataCell1, indicator)
{
	let unitMap = oFF.RsKpiRenderer.getUnitMap();
	let unit = "";
	let scaleFactor = oFF.XInteger.convertToString(tuple.getNumericShift());
	if (unitMap.containsKey(scaleFactor))
	{
		unit = unitMap.getStringByKey(scaleFactor);
	}
	let numberValue = oFF.XStringBuffer.create();
	numberValue.append(!dataCell1.getCurrencyUnit().isEmpty() ? dataCell1.getCurrencyUnit().getSuffix() : "");
	numberValue.append(tuple.getFormattedValue(dataCell1));
	indicator.putString(oFF.SapKpiConstants.K_UNIT, unit);
	indicator.putString(oFF.SapKpiConstants.K_NUMBER, numberValue.toString());
};
oFF.RsKpiRenderer.create = function()
{
	return new oFF.RsKpiRenderer();
};
oFF.RsKpiRenderer.getStateMap = function()
{
	if (oFF.isNull(oFF.RsKpiRenderer.stateMap))
	{
		oFF.RsKpiRenderer.stateMap = oFF.PrFactory.createStructure();
		oFF.RsKpiRenderer.stateMap.putString("0", oFF.SapKpiConstants.V_GOOD);
		oFF.RsKpiRenderer.stateMap.putString("1", oFF.SapKpiConstants.V_CRITICAL);
		oFF.RsKpiRenderer.stateMap.putString("2", oFF.SapKpiConstants.V_ERROR);
	}
	return oFF.RsKpiRenderer.stateMap;
};
oFF.RsKpiRenderer.getUnitMap = function()
{
	if (oFF.isNull(oFF.RsKpiRenderer.unitMap))
	{
		oFF.RsKpiRenderer.unitMap = oFF.PrFactory.createStructure();
		oFF.RsKpiRenderer.unitMap.putString("-3", "K");
		oFF.RsKpiRenderer.unitMap.putString("-6", "M");
		oFF.RsKpiRenderer.unitMap.putString("-9", "B");
	}
	return oFF.RsKpiRenderer.unitMap;
};
oFF.RsKpiRenderer.processMetricData = function(columnAxis, rs, vizDef)
{
	let theChartData = oFF.PrFactory.createStructure();
	let chartInfo = theChartData.putNewStructure(oFF.VizDefConstants.K_CHART);
	chartInfo.putString(oFF.VizDefConstants.K_TYPE, oFF.SapKpiConstants.K_METRIC);
	let sapCard = theChartData.putNewStructure(oFF.SapKpiConstants.K_SAP_CARD);
	sapCard.putString(oFF.VizDefConstants.K_TYPE, oFF.SapKpiConstants.K_ANALYTICAL);
	let header = sapCard.putNewStructure(oFF.SapKpiConstants.K_HEADER);
	header.putString(oFF.VizDefConstants.K_TYPE, oFF.SapKpiConstants.K_NUMERIC);
	header.putString(oFF.VizDefConstants.K_TITLE, vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getStringByKey(oFF.VizDefConstants.K_TITLE));
	header.putString(oFF.VizDefConstants.K_SUB_TITLE, vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getStringByKey(oFF.VizDefConstants.K_SUB_TITLE));
	let feedSelector = oFF.XList.create();
	feedSelector.add(oFF.VizDefConstants.K_VALUE_AXIS);
	feedSelector.add(oFF.VizDefConstants.K_VALUE_AXIS2);
	feedSelector.add(oFF.VizDefConstants.K_THRESHOLD_REFERENCE);
	feedSelector.add(oFF.VizDefConstants.K_VARIANCE);
	let columnIndices = columnAxis.getIndicesByFeedOrder(feedSelector);
	let needProcessPrimary = columnAxis.hasTupleForFeed(oFF.VizDefConstants.K_VALUE_AXIS);
	let sideInds = header.putNewList(oFF.SapKpiConstants.K_SIDEINDICATORS);
	let mainInd = null;
	let state = "";
	let trend = "";
	for (let i = 0; i < columnIndices.size(); i++)
	{
		let ij = columnIndices.get(i).getInteger();
		let currentTuple = columnAxis.getTupleAt(ij);
		let currentMeasureName = currentTuple.getPrettyText(feedSelector);
		let dataCell1 = rs.getDataCell(ij, 0);
		if (needProcessPrimary && currentTuple.isSelectedByString(oFF.VizDefConstants.K_VALUE_AXIS))
		{
			header.putString(oFF.SapKpiConstants.K_UNIT_OF_MEASUREMENT, dataCell1.getCurrencyUnit().getFormatted());
			header.putString(oFF.VizDefConstants.K_SUB_TITLE, currentMeasureName);
			mainInd = header.putNewStructure(oFF.SapKpiConstants.K_MAININDICATOR);
			oFF.RsKpiRenderer.addIndicatorContent(currentTuple, dataCell1, mainInd);
			needProcessPrimary = false;
		}
		else if (currentTuple.isSelectedByString(oFF.VizDefConstants.K_VALUE_AXIS2))
		{
			let side = sideInds.addNewStructure();
			side.putString(oFF.VizDefConstants.K_TITLE, currentMeasureName);
			oFF.RsKpiRenderer.addIndicatorContent(currentTuple, dataCell1, side);
		}
		if (currentTuple.isSelectedByString(oFF.VizDefConstants.K_THRESHOLD_REFERENCE))
		{
			let val = oFF.XInteger.convertToString((dataCell1.getExceptionSettingPriorityByName(oFF.ExceptionSetting.ALERT_LEVEL.getName()).getInteger() - 1) / 3);
			if (oFF.RsKpiRenderer.getStateMap().containsKey(val))
			{
				state = oFF.RsKpiRenderer.getStateMap().getStringByKey(val);
			}
		}
		if (currentTuple.isSelectedByString(oFF.VizDefConstants.K_VARIANCE))
		{
			let doubleVal = dataCell1.getDouble();
			if (doubleVal !== 0)
			{
				trend = doubleVal > 0 ? oFF.SapKpiConstants.V_UP : oFF.SapKpiConstants.V_DOWN;
			}
		}
	}
	if (oFF.notNull(mainInd))
	{
		if (!oFF.XString.isEqual(state, ""))
		{
			mainInd.putString(oFF.SapKpiConstants.K_STATE, state);
		}
		if (!oFF.XString.isEqual(trend, ""))
		{
			mainInd.putString(oFF.SapKpiConstants.K_TREND, trend);
		}
	}
	return theChartData;
};
oFF.RsKpiRenderer.prototype.render = function(rs)
{
	let vizDef = rs.getQueryModel().getVizManager().getVizDef();
	let globalDef = rs.getQueryModel().getVizManager().getGlobalDef();
	if (oFF.notNull(vizDef) && vizDef.containsKey(oFF.VizDefConstants.K_CHART) && rs.getAvailableDataCellCount() > 0)
	{
		let chart = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
		if (oFF.XString.isEqual(chart.getStringByKey(oFF.VizDefConstants.K_TYPE), oFF.SapKpiConstants.K_METRIC))
		{
			let customFormatting = oFF.RsVizAxisExtractor.extractCustomFormatting(vizDef, globalDef);
			let feedMembersFromVizDef = oFF.XHashMapByString.create();
			let feedMemberStructure = vizDef.getStructureByKey("feedMembers");
			oFF.XCollectionUtils.forEach(feedMemberStructure.getKeysAsReadOnlyList(), (feedKey) => {
				let feedValues = oFF.XStream.of(feedMemberStructure.getListByKey(feedKey)).collect(oFF.XStreamCollector.toListOfString((fv) => {
					return fv.asString().getString();
				}));
				feedMembersFromVizDef.put(feedKey, feedValues);
			});
			let columnTuples = oFF.RsVizAxisExtractor.getTuplesFromColumnAxis(rs, feedMembersFromVizDef, customFormatting);
			return oFF.RsKpiRenderer.processMetricData(columnTuples, rs, vizDef);
		}
	}
	return oFF.PrFactory.createStructure();
};

oFF.SapKpiConstants = {

	K_ANALYTICAL:"Analytical",
	K_CALCULATIONS:"Calculations",
	K_FEEDMEMBERS:"feedMembers",
	K_GLOBALOBJECTS:"GlobalObjects",
	K_HEADER:"header",
	K_MAININDICATOR:"mainIndicator",
	K_METRIC:"metric",
	K_NUMBER:"number",
	K_NUMERIC:"Numeric",
	K_SAP_CARD:"sap.card",
	K_SIDEINDICATORS:"sideIndicators",
	K_STATE:"state",
	K_THRESHOLDREFERENCE:"thresholdReference",
	K_TREND:"trend",
	K_UNIT:"unit",
	K_UNIT_OF_MEASUREMENT:"unitOfMeasurement",
	K_VARIANCE:"variance",
	V_CALCULATION:"calculation",
	V_CRITICAL:"Critical",
	V_DOWN:"Down",
	V_ERROR:"Error",
	V_GOOD:"Good",
	V_UP:"Up"
};

oFF.VizKpiRenderer = function() {};
oFF.VizKpiRenderer.prototype = new oFF.XObject();
oFF.VizKpiRenderer.prototype._ff_c = "VizKpiRenderer";

oFF.VizKpiRenderer.stateMap = null;
oFF.VizKpiRenderer.addIndicatorContent = function(value, indicator)
{
	let numberValue = oFF.XStringBuffer.create();
	let unitInformation = value.getUnitInformation();
	if (oFF.notNull(unitInformation))
	{
		numberValue.append(unitInformation.getSecondString());
	}
	numberValue.append(value.getFormattedText());
	indicator.putString(oFF.SapKpiConstants.K_UNIT, value.getScalingText());
	indicator.putString(oFF.SapKpiConstants.K_NUMBER, numberValue.toString());
};
oFF.VizKpiRenderer.create = function()
{
	return new oFF.VizKpiRenderer();
};
oFF.VizKpiRenderer.getStateMap = function()
{
	if (oFF.isNull(oFF.VizKpiRenderer.stateMap))
	{
		oFF.VizKpiRenderer.stateMap = oFF.PrFactory.createStructure();
		oFF.VizKpiRenderer.stateMap.putString("0", oFF.SapKpiConstants.V_GOOD);
		oFF.VizKpiRenderer.stateMap.putString("1", oFF.SapKpiConstants.V_CRITICAL);
		oFF.VizKpiRenderer.stateMap.putString("2", oFF.SapKpiConstants.V_ERROR);
	}
	return oFF.VizKpiRenderer.stateMap;
};
oFF.VizKpiRenderer.prototype.addSideValue = function(sideInds, sideValue)
{
	if (oFF.notNull(sideValue))
	{
		let side = sideInds.addNewStructure();
		side.putString(oFF.VizDefConstants.K_TITLE, sideValue.getMemberText());
		oFF.VizKpiRenderer.addIndicatorContent(sideValue, side);
	}
};
oFF.VizKpiRenderer.prototype.render = function(kpiContainer)
{
	return this.renderData(kpiContainer.getVisualizationData());
};
oFF.VizKpiRenderer.prototype.renderData = function(visualizationData)
{
	let result = null;
	if (oFF.notNull(visualizationData))
	{
		result = this.renderDataInternal(visualizationData);
	}
	return result;
};
oFF.VizKpiRenderer.prototype.renderDataInternal = function(visualizationData)
{
	let theChartData = oFF.PrFactory.createStructure();
	let chartInfo = theChartData.putNewStructure(oFF.VizDefConstants.K_CHART);
	chartInfo.putString(oFF.VizDefConstants.K_TYPE, oFF.SapKpiConstants.K_METRIC);
	let sapCard = theChartData.putNewStructure(oFF.SapKpiConstants.K_SAP_CARD);
	sapCard.putString(oFF.VizDefConstants.K_TYPE, oFF.SapKpiConstants.K_ANALYTICAL);
	let header = sapCard.putNewStructure(oFF.SapKpiConstants.K_HEADER);
	header.putString(oFF.VizDefConstants.K_TYPE, oFF.SapKpiConstants.K_NUMERIC);
	header.putString(oFF.VizDefConstants.K_TITLE, visualizationData.getTitle());
	header.putString(oFF.VizDefConstants.K_SUB_TITLE, visualizationData.getSubTitle());
	let visualization = oFF.XCollectionUtils.getOptionalAtIndex(visualizationData.getValues().getValuesAsReadOnlyList(), 0).orElse(null);
	let baseValue = visualization.getKpiValue();
	let unitInformation = baseValue.getUnitInformation();
	if (oFF.notNull(unitInformation))
	{
		header.putString(oFF.SapKpiConstants.K_UNIT_OF_MEASUREMENT, unitInformation.getSecondString());
	}
	header.putString(oFF.VizDefConstants.K_SUB_TITLE, baseValue.getMemberText());
	let mainInd = header.putNewStructure(oFF.SapKpiConstants.K_MAININDICATOR);
	oFF.VizKpiRenderer.addIndicatorContent(baseValue, mainInd);
	let sideInds = header.putNewList(oFF.SapKpiConstants.K_SIDEINDICATORS);
	this.addSideValue(sideInds, visualization.getTargetValue());
	this.addSideValue(sideInds, visualization.getDeviationValue());
	let state = "";
	let referenceValue = visualization.getExceptionValue();
	if (oFF.notNull(referenceValue) && referenceValue.getAlertLevel() !== null)
	{
		let val = oFF.XInteger.convertToString((referenceValue.getAlertLevel().getLevel() - 1) / 3);
		if (oFF.VizKpiRenderer.getStateMap().containsKey(val))
		{
			state = oFF.VizKpiRenderer.getStateMap().getStringByKey(val);
		}
	}
	let trend = "";
	let trendValue = visualization.getTrendValue();
	if (oFF.notNull(trendValue))
	{
		let trendDouble = trendValue.getPlainDouble();
		if (trendDouble !== 0)
		{
			trend = trendDouble > 0 ? oFF.SapKpiConstants.V_UP : oFF.SapKpiConstants.V_DOWN;
		}
	}
	if (oFF.notNull(mainInd))
	{
		if (!oFF.XString.isEqual(state, ""))
		{
			mainInd.putString(oFF.SapKpiConstants.K_STATE, state);
		}
		if (!oFF.XString.isEqual(trend, ""))
		{
			if (oFF.XString.isEqual(state, ""))
			{
				let fallbackState = oFF.XString.isEqual(trend, oFF.SapKpiConstants.V_UP) ? oFF.SapKpiConstants.V_GOOD : oFF.SapKpiConstants.V_ERROR;
				mainInd.putString(oFF.SapKpiConstants.K_STATE, fallbackState);
			}
			mainInd.putString(oFF.SapKpiConstants.K_TREND, trend);
		}
	}
	return theChartData;
};

oFF.OlapVizToChartConverterUtil = {

	BASE_PLOT_LINE_NAME:"BASE_PLOT_LINE",
	COORDINATE_SYTEM_BICATEGORIAL:"CoordinateSystemBiCategorical",
	COORDINATE_SYTEM_BISCALAR:"CoordinateSystemBiScalar",
	COORDINATE_SYTEM_CATVAL1:"CoordinateSystemCatVal1",
	COORDINATE_SYTEM_CATVAL2:"CoordinateSystemCatVal2",
	COORDINATE_SYTEM_CATVAL3:"CoordinateSystemCatVal3",
	COORDINATE_SYTEM_CATVAL4:"CoordinateSystemCatVal4",
	INFO_PREFIX:" (",
	INFO_SUFFIX:")",
	UNIFORM_SERIES:"UNIFORM_SERIES",
	addBasePlotLine:function(axis)
	{
			if (oFF.notNull(axis))
		{
			let basePlotLine = axis.addPlotLine(oFF.OlapVizToChartConverterUtil.BASE_PLOT_LINE_NAME, "");
			basePlotLine.setWidth(2);
			basePlotLine.setValue(0);
			basePlotLine.setColor("#000000");
		}
	},
	addDataPointExceptionInfo:function(dataPoint, tuple, measureValueReference, queryModel)
	{
			let valueSign = null;
		if (oFF.notNull(measureValueReference))
		{
			let maxAlertLevel = measureValueReference.getAlertLevel();
			let alertLevelName = measureValueReference.getExceptionName();
			let formulaExceptionManager = queryModel.getFormulaExceptionManager();
			let threshold = oFF.isNull(formulaExceptionManager) ? null : formulaExceptionManager.getModelFormulaExceptionThreshold(alertLevelName);
			let exceptionInformation = dataPoint.addExceptionInformation();
			let color = oFF.isNull(threshold) ? null : threshold.getColor();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(color))
			{
				exceptionInformation.setColor(threshold.getColor());
			}
			let thresholdName = oFF.isNull(threshold) ? null : threshold.getName();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(thresholdName))
			{
				exceptionInformation.setThresholdName(thresholdName);
			}
			let thresholdText = oFF.isNull(threshold) ? null : threshold.getText();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(thresholdText))
			{
				exceptionInformation.setThresholdText(thresholdText);
			}
			exceptionInformation.setExceptionName(alertLevelName);
			exceptionInformation.setLevel(oFF.SacAlertLevel.getByLevelValue(maxAlertLevel.getLevel()));
			valueSign = oFF.OlapVizToChartConverterUtil.getValueSignFromMeasure(measureValueReference);
			exceptionInformation.setValueSign(valueSign);
			oFF.XCollectionUtils.forEach(measureValueReference.getTags(), (tag) => {
				exceptionInformation.addTag(tag);
			});
			let dataPathTag = oFF.SacDataPathTag.createTag();
			oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromTupleToPath(tuple, dataPathTag);
			dataPathTag.add(oFF.RscMeasureInfoTag.create(measureValueReference.getModelReference()));
			let chartVisualization = dataPoint.getParentSeries().getParentSeriesGroup().getParentCoordinateSystem().getParentChartVisualization();
			let relevantDataPathTags = chartVisualization.getRelevantDataPathTags();
			oFF.OlapToVisualizationConverterUtil.complementExceptionInformation(exceptionInformation, dataPathTag, relevantDataPathTags);
			chartVisualization.addExceptionInformation(exceptionInformation);
		}
		return valueSign;
	},
	applyChartStylingAxis:function(sdk, sds, chartData, chartSetting, listContainer, needsMeasureDistinction)
	{
			let sta = chartData.getOrCreateStylingAxis(sdk);
		oFF.OlapVizToChartConverterUtil.transferColorScheme(sta.getAxisDomain().getAsCategorial(), sds, chartSetting);
		oFF.OlapVizToChartConverterUtil.fillCategoryAxis(chartSetting, chartData, sta, sds, sds.shouldIncludeKeyFigureDimension(), listContainer, oFF.ChartTotalsRestriction.TOTALS_ALLOWED, true, needsMeasureDistinction);
	},
	chartPlotAreaLabelStyle:function(chartDefinition)
	{
			let labelStyle = oFF.ChartLabelStyle.create("ChartPlotAreaLabelStyle", "ChartPlotAreaLabelStyle");
		let modelPlotArea = chartDefinition.getChartSetting().getChartStyle().getPlotArea();
		let modelDataLabel = modelPlotArea.getDataLabel();
		let labelStyles = oFF.XList.create();
		labelStyles.add(modelDataLabel);
		oFF.OlapVizToChartConverterUtil.createLabelStyle(chartDefinition, labelStyle, labelStyles);
		return labelStyle;
	},
	convertChartType:function(chartType)
	{
			return oFF.ChartVisualizationType.lookup(chartType.getName());
	},
	createAxis:function(chartData, position, domainType, valueType, chartSetting)
	{
			let axis = null;
		if (oFF.notNull(position))
		{
			let visualizationPosition = oFF.OlapVizToChartConverterUtil.lookupAxisPosition(position);
			let axisName = oFF.XStringUtils.concatenate3(valueType.getName(), ":", position.getName());
			if (visualizationPosition.isTypeOf(oFF.ChartVisualizationAxisPosition.X))
			{
				axis = chartData.addXAxis(axisName, axisName, domainType);
			}
			else if (visualizationPosition.isTypeOf(oFF.ChartVisualizationAxisPosition.Y))
			{
				axis = chartData.addYAxis(axisName, axisName, domainType);
			}
			else if (visualizationPosition.isTypeOf(oFF.ChartVisualizationAxisPosition.Z))
			{
				axis = chartData.addZAxis(axisName, axisName, domainType);
			}
			else if (visualizationPosition.isTypeOf(oFF.ChartVisualizationAxisPosition.HIDDEN))
			{
				axis = chartData.addHiddenAxis(axisName, axisName, domainType);
			}
			else
			{
				axis = chartData.addHiddenAxis(axisName, axisName, domainType);
			}
			axis.setPosition(visualizationPosition);
			axis.setLabelStyle(oFF.OlapVizToChartConverterUtil.createAxisLabelStyle(position, valueType, axis.getAxisDomain().getAxisDomainType(), chartSetting.getChartDefinition()));
			axis.setTitleStyle(oFF.OlapVizToChartConverterUtil.createAxisTitleStyle(position, valueType, axis.getAxisDomain().getAxisDomainType(), chartSetting.getChartDefinition()));
		}
		return axis;
	},
	createAxisLabelStyle:function(position, valueType, axisDomainType, chartDefinition)
	{
			let labelStyle = oFF.ChartLabelStyle.create("AxisLabelStyle", "AxisLabelStyle");
		let chartStyle = chartDefinition.getChartSetting().getChartStyle();
		let defaultAxisStyle = chartStyle.getDefaultAxisStyle();
		let axisStyleByType = null;
		if (axisDomainType.isTypeOf(oFF.ChartAxisDomainType.CATEGORIAL))
		{
			axisStyleByType = chartStyle.getCategoryAxisStyle();
		}
		else if (axisDomainType.isTypeOf(oFF.ChartAxisDomainType.SCALAR))
		{
			axisStyleByType = chartStyle.getOrCreateValueAxisStyle(valueType);
		}
		let axisStyleByPosition = chartStyle.getOrCreateChartAxisStyleByPosition(position);
		let chartLabelStyles = oFF.XList.create();
		if (oFF.notNull(axisStyleByPosition))
		{
			chartLabelStyles.add(axisStyleByPosition.getLabelStyle());
		}
		let parentPosition = oFF.isNull(position) ? null : position.getParent();
		axisStyleByPosition = chartStyle.getOrCreateChartAxisStyleByPosition(parentPosition);
		if (oFF.notNull(axisStyleByPosition))
		{
			chartLabelStyles.add(axisStyleByPosition.getLabelStyle());
		}
		if (oFF.notNull(axisStyleByType))
		{
			chartLabelStyles.add(axisStyleByType.getLabelStyle());
		}
		if (oFF.notNull(defaultAxisStyle))
		{
			chartLabelStyles.add(defaultAxisStyle.getLabelStyle());
		}
		oFF.OlapVizToChartConverterUtil.createLabelStyle(chartDefinition, labelStyle, chartLabelStyles);
		return labelStyle;
	},
	createAxisTitleStyle:function(position, valueType, axisDomainType, chartDefinition)
	{
			let labelStyle = oFF.ChartLabelStyle.create("AxisTitleStyle", "AxisTitleStyle");
		let chartStyle = chartDefinition.getChartSetting().getChartStyle();
		let defaultAxisStyle = chartStyle.getDefaultAxisStyle();
		let axisStyleByType = null;
		if (axisDomainType.isTypeOf(oFF.ChartAxisDomainType.CATEGORIAL))
		{
			axisStyleByType = chartStyle.getCategoryAxisStyle();
		}
		else if (axisDomainType.isTypeOf(oFF.ChartAxisDomainType.SCALAR))
		{
			axisStyleByType = chartStyle.getOrCreateValueAxisStyle(valueType);
		}
		let axisStyleByPosition = chartStyle.getOrCreateChartAxisStyleByPosition(position);
		let chartTitleStyles = oFF.XList.create();
		if (oFF.notNull(axisStyleByPosition))
		{
			chartTitleStyles.add(axisStyleByPosition.getHeaderStyle());
		}
		let parentPosition = oFF.isNull(position) ? null : position.getParent();
		axisStyleByPosition = chartStyle.getOrCreateChartAxisStyleByPosition(parentPosition);
		if (oFF.notNull(axisStyleByPosition))
		{
			chartTitleStyles.add(axisStyleByPosition.getHeaderStyle());
		}
		if (oFF.notNull(axisStyleByType))
		{
			chartTitleStyles.add(axisStyleByType.getHeaderStyle());
		}
		if (oFF.notNull(defaultAxisStyle))
		{
			chartTitleStyles.add(defaultAxisStyle.getHeaderStyle());
		}
		oFF.OlapVizToChartConverterUtil.createLabelStyle(chartDefinition, labelStyle, chartTitleStyles);
		return labelStyle;
	},
	createChartLegend:function(chartDefinition)
	{
			let chartLegend = oFF.ChartLegend.create("ChartLegend", "ChartLegend");
		let legendStyle = chartDefinition.getChartSetting().getChartStyle().getLegendStyle();
		chartLegend.setVerticalAlignment(oFF.OlapToVisualizationConverterUtil.getVerticalAlignmentFromViz(legendStyle.getVerticalAlignmentRaw().getResolvedValue(chartDefinition)));
		chartLegend.setHorizontalAlignment(oFF.OlapToVisualizationConverterUtil.getHorizontalAlignmentFromViz(legendStyle.getHorizontalAlignmentRaw().getResolvedValue(chartDefinition)));
		chartLegend.setLayoutDirection(oFF.OlapToVisualizationConverterUtil.getLayoutDirectionFromViz(legendStyle.getLayoutDirectionRaw().getResolvedValue(chartDefinition)));
		chartLegend.setLegendPosition(oFF.SacChartLegendPosition.lookup(oFF.DfNameObject.getSafeName(legendStyle.getLegendPositionRaw().getResolvedValue(chartDefinition))));
		chartLegend.setEnabled(legendStyle.getEnabledRaw().resolveBoolean(chartDefinition));
		chartLegend.setLabelStyle(oFF.OlapVizToChartConverterUtil.createLegendLabelStyle(chartDefinition));
		return chartLegend;
	},
	createChartPlotArea:function(chartDefinition)
	{
			let chartPlotArea = oFF.ChartPlotArea.create("ChartPlotArea", "ChartPlotArea");
		chartPlotArea.setLabelStyle(oFF.OlapVizToChartConverterUtil.chartPlotAreaLabelStyle(chartDefinition));
		return chartPlotArea;
	},
	createChartTitleStyle:function(chartDefinition, chartVisualization)
	{
			chartVisualization.setTitle(chartDefinition.getChartSetting().getTitle());
		let chartTitleLabelStyle = oFF.ChartLabelStyle.create("ChartTitle", "ChartTitle");
		let chartTitleStyle = chartDefinition.getChartSetting().getChartStyle().getTitleStyle();
		chartTitleLabelStyle.setFontWeight(chartTitleStyle.getFontBoldRaw().resolveBoolean(chartDefinition) ? "bold" : "normal");
		chartTitleLabelStyle.setFontStyle(chartTitleStyle.getFontItalicRaw().resolveBoolean(chartDefinition) ? "italic" : "normal");
		chartTitleLabelStyle.setFontFamily(chartTitleStyle.getFontFamilyRaw().resolveString(chartDefinition));
		chartTitleLabelStyle.setFontSize(oFF.XStringUtils.concatenate2(oFF.XDouble.convertToString(chartTitleStyle.getFontSizeRaw().resolveDouble(chartDefinition)), "px"));
		chartTitleLabelStyle.setFontColor(chartTitleStyle.getFontColorRaw().resolveString(chartDefinition));
		chartTitleLabelStyle.setEnabled(chartTitleStyle.getShowLabelRaw().resolveBoolean(chartDefinition));
		chartTitleLabelStyle.setTextAlign(oFF.OlapToVisualizationConverterUtil.getHorizontalAlignmentFromViz(chartTitleStyle.getHorizontalAlignmentRaw().getResolvedValue(chartDefinition)));
		chartVisualization.setChartTitleStyle(chartTitleLabelStyle);
	},
	createLabelStyle:function(chartDefinition, labelStyle, modelLabelStyles)
	{
			let isBold = oFF.OlapVizToChartConverterUtil.resolveBoolean(modelLabelStyles, chartDefinition, (b) => {
			return b.getFontBoldRaw();
		});
		labelStyle.setFontWeight(isBold ? "bold" : "normal");
		let isItalic = oFF.OlapVizToChartConverterUtil.resolveBoolean(modelLabelStyles, chartDefinition, (i) => {
			return i.getFontItalicRaw();
		});
		labelStyle.setFontStyle(isItalic ? "italic" : "normal");
		let fontFamily = oFF.OlapVizToChartConverterUtil.resolveString(modelLabelStyles, chartDefinition, (f) => {
			return f.getFontFamilyRaw();
		});
		labelStyle.setFontFamily(fontFamily);
		let fontSize = oFF.OlapVizToChartConverterUtil.resolveDouble(modelLabelStyles, chartDefinition, (s) => {
			return s.getFontSizeRaw();
		});
		labelStyle.setFontSize(oFF.XStringUtils.concatenate2(oFF.XDouble.convertToString(fontSize), "px"));
		let fontColor = oFF.OlapVizToChartConverterUtil.resolveString(modelLabelStyles, chartDefinition, (f) => {
			return f.getFontColorRaw();
		});
		if (!oFF.XStringUtils.isNotNullAndNotEmpty(fontColor))
		{
			fontColor = "#000000";
		}
		labelStyle.setFontColor(fontColor);
		labelStyle.setEnabled(oFF.OlapVizToChartConverterUtil.resolveBoolean(modelLabelStyles, chartDefinition, (e) => {
			return e.getShowLabelRaw();
		}));
		labelStyle.setCornerValuesEnabled(oFF.OlapVizToChartConverterUtil.resolveBoolean(modelLabelStyles, chartDefinition, (e) => {
			return e.getShowCornerValuesRaw();
		}));
		labelStyle.setAbsoluteValuesEnabled(oFF.OlapVizToChartConverterUtil.resolveBoolean(modelLabelStyles, chartDefinition, (e) => {
			return e.getShowAbsoluteValuesRaw();
		}));
		labelStyle.setDirection(oFF.SacLayoutDirection.lookup(oFF.DfNameObject.getSafeName(oFF.OlapVizToChartConverterUtil.resolveConstant(modelLabelStyles, chartDefinition, (e) => {
			return e.getDirectionRaw();
		}))));
	},
	createLegendLabelStyle:function(chartDefinition)
	{
			let labelStyle = oFF.ChartLabelStyle.create("LegendLabelStyle", "LegendLabelStyle");
		let modelDataLabel = chartDefinition.getChartSetting().getChartStyle().getLegendStyle().getLabelStyle();
		let labelStyles = oFF.XList.create();
		labelStyles.add(modelDataLabel);
		oFF.OlapVizToChartConverterUtil.createLabelStyle(chartDefinition, labelStyle, labelStyles);
		return labelStyle;
	},
	createValueAxis:function(chartData, chartAxisPosition, chartSetting, valueFeed)
	{
			let axis = null;
		if (oFF.XCollectionUtils.hasElements(chartSetting.getTypedValueSelectionsForType(valueFeed)))
		{
			axis = oFF.OlapVizToChartConverterUtil.createAxis(chartData, chartAxisPosition, oFF.ChartAxisDomainType.SCALAR, valueFeed, chartSetting);
		}
		return axis;
	},
	decorateDataPoint:function(tuple, dataPoint, series, seriesGroup, stylingAxis, chartSetting, dimensionVisualizationSelection, structureMember)
	{
			let dimensionVisualizationNames = dimensionVisualizationSelection.getDimensionNames();
		let shouldIncludeMeasures = dimensionVisualizationSelection.shouldIncludeKeyFigureDimension();
		if (oFF.notNull(dataPoint) && oFF.XCollectionUtils.hasElements(dimensionVisualizationNames) || shouldIncludeMeasures)
		{
			let includesMeasureName = shouldIncludeMeasures && oFF.notNull(structureMember);
			let stylingKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, dimensionVisualizationSelection.getDimensionNames(), includesMeasureName ? structureMember.getName() : null);
			let stylingCategory = stylingAxis.getAxisDomain().getAsCategorial().getCategoryByName(stylingKey);
			if (oFF.isNull(stylingCategory) && includesMeasureName)
			{
				stylingKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, dimensionVisualizationSelection.getDimensionNames(), null);
				stylingCategory = stylingAxis.getAxisDomain().getAsCategorial().getCategoryByName(stylingKey);
			}
			if (oFF.OlapVizToChartConverterUtil.dimensionVisualizationSectionCovered(chartSetting.getDistributionDimensionSelection(), null, dimensionVisualizationSelection))
			{
				series.addStylingCategory(stylingCategory);
			}
			else if (oFF.OlapVizToChartConverterUtil.dimensionVisualizationSectionCovered(chartSetting.getGroupingDimensionSelection(), null, dimensionVisualizationSelection))
			{
				seriesGroup.addStylingCategory(stylingCategory);
			}
			else if (oFF.OlapVizToChartConverterUtil.dimensionVisualizationSectionCovered(chartSetting.getDistributionDimensionSelection(), chartSetting.getGroupingDimensionSelection(), dimensionVisualizationSelection))
			{
				series.addStylingCategory(stylingCategory);
			}
			else
			{
				dataPoint.addStylingCategory(stylingCategory);
			}
		}
	},
	decorateDataPointInternal:function(key, dataPoint, typedValueSelectionSub, tuple, scalingTextMap, unitInfoMap)
	{
			let memberName = typedValueSelectionSub.getDimensionMember().getName();
		let visualizationValue = tuple.getValueForKey(memberName);
		let vizValue = null;
		if (oFF.notNull(visualizationValue))
		{
			let valueSign = oFF.OlapVizToChartConverterUtil.addDataPointExceptionInfo(dataPoint, tuple, visualizationValue, typedValueSelectionSub.getQueryModel());
			dataPoint.setIsEmptyValue(visualizationValue.getValueException() !== oFF.ValueException.NORMAL && visualizationValue.getValueException() !== oFF.ValueException.ZERO);
			vizValue = visualizationValue.getScaledValue();
			let coordinate = dataPoint.addCoordinate(key, key, vizValue, visualizationValue.getFormattedTextFull(), visualizationValue.getFormattedText(), visualizationValue.getScalingText(), visualizationValue.getUnitInformation(), typedValueSelectionSub.getDimensionMember().getText());
			coordinate.setPlainValue(visualizationValue.getPlainValue());
			coordinate.setFormattedTextSimple(visualizationValue.getFormattedTextSimple());
			coordinate.setFormatPatternSimple(visualizationValue.getFormatPatternSimple());
			coordinate.setFormatPattern(visualizationValue.getFormatPattern());
			coordinate.setFormatPatternFull(visualizationValue.getFormatPatternFull());
			let numericShift = visualizationValue.getNumericShift();
			if (visualizationValue.getCellValueType() === oFF.XValueType.PERCENT && (oFF.isNull(numericShift) || numericShift.getInteger() === 0))
			{
				numericShift = oFF.XIntegerValue.create(2);
			}
			coordinate.setNumericShift(numericShift);
			coordinate.setDecimalPlaces(visualizationValue.getDecimalPlaces());
			coordinate.setDecimalSeparator(visualizationValue.getDecimalSeparator());
			coordinate.setDecimalGroupSeparator(visualizationValue.getDecimalGroupSeparator());
			coordinate.setSignPresentation(oFF.SacSignPresentation.lookup(oFF.DfNameObject.getSafeName(visualizationValue.getSignPresentation())));
			coordinate.setValueSign(valueSign);
			let complexUnit = visualizationValue.getComplexUnit();
			if (oFF.notNull(complexUnit))
			{
				coordinate.specifyComplexUnitInfo(complexUnit.getUnitValues(), complexUnit.getUnitDescriptions(), complexUnit.getUnitExponents(), complexUnit.getUnitTypes());
			}
			let style = typedValueSelectionSub.getStyle();
			if (oFF.notNull(style))
			{
				oFF.OlapVizToChartConverterUtil.transferVizToChartStyle(style, dataPoint.getStyle(), null);
			}
			if (!dataPoint.isEmptyValue())
			{
				if (!scalingTextMap.containsKey(memberName))
				{
					scalingTextMap.put(memberName, oFF.XList.create());
				}
				if (!unitInfoMap.containsKey(memberName))
				{
					unitInfoMap.put(memberName, oFF.XList.create());
				}
				oFF.XCollectionUtils.addIfNotPresentExt(scalingTextMap.getByKey(memberName), visualizationValue.getScalingText(), true);
				oFF.XCollectionUtils.addIfNotPresentExt(unitInfoMap.getByKey(memberName), visualizationValue.getUnitInformation(), true);
			}
			oFF.OlapVizToChartConverterUtil.decorateSimpleDataPoint(oFF.XStringUtils.concatenate2(key, "."), dataPoint, typedValueSelectionSub, typedValueSelectionSub.getVisualizationValueTypes(), tuple, scalingTextMap, unitInfoMap);
		}
		return vizValue;
	},
	decorateSimpleDataPoint:function(prefix, dataPoint, typedValueSelection, visualizationValueTypes, tuple, scalingTextMap, unitInfoMap)
	{
			for (let i = 0; i < visualizationValueTypes.size(); i++)
		{
			let visualizationValueType = visualizationValueTypes.get(i);
			let key = oFF.XStringUtils.concatenate2(prefix, visualizationValueType.getName());
			let typedValueSelectionSubs = typedValueSelection.getTypedValueSelectionsForType(visualizationValueType);
			if (oFF.XCollectionUtils.hasElements(typedValueSelectionSubs))
			{
				let typedValueSelectionSub = typedValueSelectionSubs.get(0);
				if (typedValueSelectionSub.getDimensionMember() !== null)
				{
					oFF.OlapVizToChartConverterUtil.decorateDataPointInternal(key, dataPoint, typedValueSelectionSub, tuple, scalingTextMap, unitInfoMap);
				}
			}
		}
	},
	decorateWithCategory:function(dataPoint, category, categoryAxisKey)
	{
			if (oFF.notNull(category))
		{
			let domain = category.getParentChartDomain();
			let chartAxis = oFF.isNull(domain) ? null : domain.getChartAxis();
			if (oFF.notNull(domain))
			{
				dataPoint.addCoordinate(chartAxis.getName(), chartAxis.getText(), oFF.XStringValue.create(category.getName()), null, null, null, null, null);
				if (oFF.notNull(categoryAxisKey))
				{
					dataPoint.addCoordinate(categoryAxisKey, categoryAxisKey, oFF.XIntegerValue.create(domain.getCategoryIndex(category)), null, null, null, null, null);
				}
			}
		}
	},
	dimensionVisualizationSectionCovered:function(superset, superset2, subset)
	{
			return oFF.XStream.ofString(subset.getDimensionNames()).allMatch((m) => {
			return superset.getDimensionNames().contains(m.getString()) || oFF.notNull(superset2) && superset2.getDimensionNames().contains(m.getString());
		}) && (superset.shouldIncludeKeyFigureDimension() || oFF.notNull(superset2) && superset2.shouldIncludeKeyFigureDimension() || !subset.shouldIncludeKeyFigureDimension());
	},
	expandAndApplyDataPointStyle:function(vizDataPointStyle, sacDataPointStyle, exceptionInfo, variableRequestors)
	{
			oFF.OlapVizToChartConverterUtil.transferChartDataPointStyle(vizDataPointStyle, sacDataPointStyle, variableRequestors);
		let valueSign = exceptionInfo.getValueSign();
		if (oFF.notNull(valueSign))
		{
			sacDataPointStyle.setValueSign(valueSign);
		}
		let exceptionName = exceptionInfo.getExceptionName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(exceptionName))
		{
			sacDataPointStyle.setExceptionName(exceptionName);
		}
		let level = exceptionInfo.getLevel();
		if (oFF.notNull(level))
		{
			sacDataPointStyle.setAlertLevelMin(level);
			sacDataPointStyle.setAlertLevelMax(level);
		}
		oFF.XCollectionUtils.forEach(exceptionInfo.getTags(), (tag) => {
			sacDataPointStyle.addTag(tag);
		});
	},
	expandDataPointStylesForExceptionInformation:function(chartData, dataPointStyleMap, exceptionInfo, variableHolders)
	{
			oFF.XStream.of(dataPointStyleMap.getKeysAsReadOnlyList()).filter((dps) => {
			return chartData.matchesExceptionInfo(dps, exceptionInfo);
		}).forEach((dataPointStyle) => {
			oFF.OlapVizToChartConverterUtil.expandAndApplyDataPointStyle(dataPointStyleMap.getByKey(dataPointStyle), chartData.addNewDataPointStyle(dataPointStyle.getName(), dataPointStyle.getText()), exceptionInfo, variableHolders);
		});
	},
	fillCategoryAxis:function(chartSetting, chartData, chartAxis, dimensionSelection, shouldIncludeKeyFigureDimension, listCollector, chartTotalsRestriction, axisSupportsHierarchy, needsMeasureDistinction)
	{
			oFF.OlapVizToChartConverterUtil.tagChartDimensions(chartData, chartAxis, dimensionSelection);
		chartAxis.setText(oFF.XCollectionUtils.join(oFF.XStream.of(dimensionSelection.getDimensions()).collect(oFF.XStreamCollector.toListOfString((dim) => {
			return dim.getDisplayDescription();
		})), " / "));
		oFF.OlapVizToChartConverterUtil.transferColorScheme(chartAxis.getAxisDomain().getAsCategorial(), dimensionSelection, chartSetting);
		let listAxis = listCollector.getListAxis();
		let tuples = listAxis.getTuplesOnAxis();
		for (let i = 0; i < tuples.size(); i++)
		{
			let tuple = tuples.get(i);
			oFF.OlapVizToChartConverterUtil.getOrCreateCategoryIteratively(chartSetting, chartAxis, tuple, dimensionSelection, shouldIncludeKeyFigureDimension, i, chartTotalsRestriction, axisSupportsHierarchy, needsMeasureDistinction);
		}
	},
	fillValueAxis:function(chartSetting, valAxis, valueFeed, memberUnitMap)
	{
			let tvss = chartSetting.getTypedValueSelectionsForType(valueFeed);
		if (oFF.XCollectionUtils.hasElements(tvss))
		{
			let newText = oFF.XCollectionUtils.join(oFF.XStream.of(tvss).filter((tvs) => {
				return tvs.getDimensionMember() !== null && oFF.XStringUtils.isNotNullAndNotEmpty(tvs.getDimensionMember().getText()) && memberUnitMap.containsKey(tvs.getDimensionMember());
			}).collect(oFF.XStreamCollector.toListOfString((tv) => {
				let dm = tv.getDimensionMember();
				return oFF.XStringUtils.concatenate2(dm.getText(), memberUnitMap.getByKey(dm).getString());
			})), ", ");
			valAxis.setText(newText);
		}
		else
		{
			valAxis.setText("");
		}
	},
	getNameForCategory:function(category)
	{
			return oFF.isNull(category) ? "" : category.getName();
	},
	getOrCreateCategory:function(chartAxis, tuple, categoryDimensionNames, dimensionMember, needsMeasureDistiction, tupleIndex, chartTotalsRestriction, axisSupportsHierarchy)
	{
			let key = oFF.ChartAxisCategoryAnalytic.getKey(tuple, categoryDimensionNames, oFF.isNull(dimensionMember) ? null : dimensionMember.getName());
		let axisDomain = chartAxis.getAxisDomain().getAsCategorial();
		let relevantModelComponents = oFF.XStream.of(tuple.getAxisReference().getVisibleComponentsOnAxis()).filter((vcoa) => {
			return vcoa.getModelComponentType() === oFF.OlapComponentType.FIELD && oFF.OlapVizToChartConverterUtil.matchDimensions(categoryDimensionNames, vcoa.getDimension());
		}).collect(oFF.XStreamCollector.toList());
		let measureReference = oFF.isNull(dimensionMember) ? null : tuple.getAxisReference().getMeasureReference(dimensionMember.getName());
		let supportedByDrill = oFF.isNull(dimensionMember) || oFF.notNull(measureReference) && tuple.getValueForKey(dimensionMember.getName()) !== null;
		let supportedByHierarchy = axisSupportsHierarchy || oFF.XStream.of(relevantModelComponents).allMatch((rmc) => {
			let drillState = tuple.getValueForModelComponent(rmc).getDrillState();
			return oFF.isNull(drillState) || drillState === oFF.DrillState.LEAF || drillState === oFF.DrillState.COLLAPSED || drillState === oFF.DrillState.COLLAPSED_EXPAND_AND_DRILLDOWN_ALLOWED;
		});
		let totalPredicate = (tmc) => {
			let dimensionMemberType = tuple.getValueForModelComponent(tmc).getDimensionMemberType();
			return dimensionMemberType.isTypeOf(oFF.MemberType.RESULT) || oFF.OlapComponentType.TOTALS === dimensionMemberType;
		};
		let supportedByTotals = !(chartTotalsRestriction === oFF.ChartTotalsRestriction.TOTALS_FORBIDDEN && oFF.XStream.of(relevantModelComponents).anyMatch(totalPredicate));
		let category = axisDomain.getCategoryByName(key);
		if (supportedByDrill && supportedByHierarchy && supportedByTotals)
		{
			if (oFF.isNull(category))
			{
				let text = oFF.ChartAxisCategoryAnalytic.getKey(tuple, categoryDimensionNames, !needsMeasureDistiction || oFF.isNull(dimensionMember) ? null : dimensionMember.getText());
				category = oFF.ChartAxisCategoryAnalytic.createAnalyticCategory(key, text, chartAxis, tuple, categoryDimensionNames, measureReference, needsMeasureDistiction, tupleIndex);
			}
			else
			{
				category.obtainTupleCoordinates(tuple, tupleIndex);
			}
		}
		return category;
	},
	getOrCreateCategoryIteratively:function(chartSetting, chartAxis, tuple, dimensionSelection, shouldIncludeKeyFigureDimension, tupleIndex, chartTotalsRestriction, axisSupportsHierarchy, needsMeasureDistinction)
	{
			if (shouldIncludeKeyFigureDimension)
		{
			let vvt = chartSetting.getVisualizationValueTypes();
			for (let j = 0; j < vvt.size(); j++)
			{
				let visualizationValueType = vvt.get(j);
				let tvs = chartSetting.getTypedValueSelectionsForType(visualizationValueType);
				for (let k = 0; k < tvs.size(); k++)
				{
					let typedValueSelection = tvs.get(k);
					if (typedValueSelection.getDimensionMember() !== null && oFF.XStringUtils.isNotNullAndNotEmpty(typedValueSelection.getDimensionMember().getName()))
					{
						oFF.OlapVizToChartConverterUtil.getOrCreateCategory(chartAxis, tuple, dimensionSelection.getDimensionNames(), typedValueSelection.getDimensionMember(), needsMeasureDistinction || !oFF.XCollectionUtils.hasElements(dimensionSelection.getDimensionNames()), tupleIndex, chartTotalsRestriction, axisSupportsHierarchy);
					}
				}
			}
		}
		else
		{
			oFF.OlapVizToChartConverterUtil.getOrCreateCategory(chartAxis, tuple, dimensionSelection.getDimensionNames(), null, false, tupleIndex, chartTotalsRestriction, axisSupportsHierarchy);
		}
	},
	getValueSignFromMeasure:function(measureValue)
	{
			let valueException = measureValue.getValueException();
		let resultSign = null;
		let plainValue = measureValue.getPlainValue();
		let valueType = oFF.isNull(plainValue) ? null : plainValue.getValueType();
		if (valueException === oFF.ValueException.UNDEFINED || valueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS || valueException === oFF.ValueException.UNDEFINED_NOP)
		{
			resultSign = oFF.SacValueSign.UNDEFINED;
		}
		else if (valueException !== oFF.ValueException.NORMAL && valueException !== oFF.ValueException.ZERO)
		{
			resultSign = oFF.SacValueSign.UNBOOKED;
		}
		else
		{
			if (oFF.notNull(valueType) && valueType.isNumber())
			{
				let doubleValue = oFF.XValueUtil.getDouble(plainValue, false, true);
				if (valueException === oFF.ValueException.ZERO)
				{
					resultSign = oFF.SacValueSign.ZERO;
				}
				else if (doubleValue > 0)
				{
					resultSign = oFF.SacValueSign.POSITIVE;
				}
				else if (doubleValue < 0)
				{
					resultSign = oFF.SacValueSign.NEGATIVE;
				}
			}
			else
			{
				resultSign = oFF.SacValueSign.NORMAL;
			}
		}
		return resultSign;
	},
	lookupAxisPosition:function(position)
	{
			return oFF.isNull(position) ? null : oFF.ChartVisualizationAxisPosition.lookup(position.getName());
	},
	lookupTargetStackingType:function(chartStackingType)
	{
			return oFF.isNull(chartStackingType) ? null : oFF.ChartVisualizationStackingType.lookup(chartStackingType.getName());
	},
	matchDimensions:function(categoryDimensionNames, dimension)
	{
			return categoryDimensionNames.contains(dimension.getName()) || dimension.isUniversalDisplayHierarchyDimension() && oFF.XStream.ofString(oFF.RscMappingUtils.getUdhDimensionNames(dimension)).allMatch((dim) => {
			return categoryDimensionNames.contains(dim.getString());
		});
	},
	processBiCategorialCoordinateSystem:function(chartSetting, chartData, heatCoordinateSystem, listContainer, needsMeasureDistinction, scalingTextMap, unitInfoMap)
	{
			let groupingAxis = chartData.getGroupingAxis();
		oFF.OlapVizToChartConverterUtil.transferColorScheme(groupingAxis.getAxisDomain().getAsCategorial(), chartSetting.getDefaultStylingDimensionSelection(), chartSetting);
		oFF.OlapVizToChartConverterUtil.fillCategoryAxis(chartSetting, chartData, groupingAxis, chartSetting.getGroupingDimensionSelection(), chartSetting.groupingDimensionSelectionEffectivelyIncludesKeyFigureDimension(), listContainer, chartSetting.getChartType().getGroupingCategoryTotalsRestriction(), chartSetting.getChartType().getGroupingCategoryHierarchyAllowed(), needsMeasureDistinction);
		let category1Domain = heatCoordinateSystem.getYAxisReference().getAxisDomain().getAsCategorial();
		let category2Domain = heatCoordinateSystem.getXAxisReference().getAxisDomain().getAsCategorial();
		let seriesGroup = heatCoordinateSystem.getOrCreateSeriesGroup(oFF.OlapVizToChartConverterUtil.UNIFORM_SERIES, oFF.OlapVizToChartConverterUtil.UNIFORM_SERIES);
		let series = seriesGroup.getOrCreateSeries(oFF.OlapVizToChartConverterUtil.UNIFORM_SERIES, oFF.OlapVizToChartConverterUtil.UNIFORM_SERIES);
		let listAxis = listContainer.getListAxis();
		let tuples = listAxis.getTuplesOnAxis();
		for (let i = 0; i < tuples.size(); i++)
		{
			let tuple = tuples.get(i);
			let category1Key = oFF.ChartAxisCategoryAnalytic.getKey(tuple, chartSetting.getCategoryDimensionSelection().getDimensionNames(), null);
			let category1 = category1Domain.getCategoryByName(category1Key);
			let category2Key = oFF.ChartAxisCategoryAnalytic.getKey(tuple, chartSetting.getGroupingDimensionSelection().getDimensionNames(), null);
			let category2 = category2Domain.getCategoryByName(category2Key);
			oFF.OlapVizToChartConverterUtil.processSimpleDataPointCreation(series, chartSetting, chartSetting.getVisualizationValueTypes(), tuple, category1, category2, null, scalingTextMap, unitInfoMap);
		}
	},
	processComplexDataPointCreation:function(series, keyFigureSelection, tuple, category, distributionKey, positiveSum, negativeSum, scalingTextMap, unitInfoMap)
	{
			let pointName = oFF.isNull(category) ? oFF.XInteger.convertToString(tuple.getTupleIndex()) : category.getName();
		let dataPoint = series.addChartDataPoint(pointName, pointName);
		let value = oFF.OlapVizToChartConverterUtil.decorateDataPointInternal(keyFigureSelection.getType().getName(), dataPoint, keyFigureSelection, tuple, scalingTextMap, unitInfoMap);
		dataPoint.setCategory(category);
		if (oFF.notNull(value) && value.getValueType().isNumber())
		{
			let primitiveDoubleValue = oFF.XValueUtil.convertValue(value, oFF.XValueType.DOUBLE).getDouble();
			if (primitiveDoubleValue > 0)
			{
				oFF.OlapVizToChartConverterUtil.sumUpValue(distributionKey, positiveSum, primitiveDoubleValue);
			}
			else if (primitiveDoubleValue < 0)
			{
				oFF.OlapVizToChartConverterUtil.sumUpValue(distributionKey, negativeSum, primitiveDoubleValue);
			}
		}
		return dataPoint;
	},
	processCorrelationCoordinateSystem:function(chartSetting, chartData, correlationCoordinateSystem, listContainer, val1, val2, needsMeasureDistinction, scalingTextMap, unitInfoMap)
	{
			let groupingAxis = chartData.getGroupingAxis();
		let groupingAxisDomain = groupingAxis.getAxisDomain().getAsCategorial();
		oFF.OlapVizToChartConverterUtil.transferColorScheme(groupingAxisDomain, chartSetting.getDefaultStylingDimensionSelection(), chartSetting);
		oFF.OlapVizToChartConverterUtil.fillCategoryAxis(chartSetting, chartData, groupingAxis, chartSetting.getGroupingDimensionSelection(), chartSetting.groupingDimensionSelectionEffectivelyIncludesKeyFigureDimension(), listContainer, chartSetting.getChartType().getGroupingCategoryTotalsRestriction(), chartSetting.getChartType().getGroupingCategoryHierarchyAllowed(), needsMeasureDistinction);
		let distributionAxisDomain = chartData.getDistributionAxis().getAxisDomain().getAsCategorial();
		let listAxis = listContainer.getListAxis();
		let tuples = listAxis.getTuplesOnAxis();
		for (let i = 0; i < tuples.size(); i++)
		{
			let tuple = tuples.get(i);
			let groupingKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, chartSetting.getGroupingDimensionSelection().getDimensionNames(), null);
			let distributionKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, chartSetting.getDistributionDimensionSelection().getDimensionNames(), null);
			let seriesGroup = correlationCoordinateSystem.getOrCreateSeriesGroup(groupingKey, groupingKey);
			let groupCategory = groupingAxisDomain.getCategoryByName(groupingKey);
			seriesGroup.setCategory(groupCategory);
			let distributionCategory = distributionAxisDomain.getCategoryByName(distributionKey);
			let series = seriesGroup.getOrCreateSeries(distributionKey, distributionKey);
			series.setCategory(distributionCategory);
			oFF.OlapVizToChartConverterUtil.processSimpleDataPointCreation(series, chartSetting, chartSetting.getVisualizationValueTypes(), tuple, groupCategory, distributionCategory, null, scalingTextMap, unitInfoMap);
		}
	},
	processCorrelationDataPointCreation:function(chartSetting, chartData, correlationCoordinateSystem, tuple, category, groupingAxisDomain, tupleIndex, scalingTextMap, unitInfoMap)
	{
			let groupingKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, chartSetting.getGroupingDimensionSelection().getDimensionNames(), null);
		let distributionDimensionNames = chartSetting.getDistributionDimensionSelection().getDimensionNames();
		let distributionKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, distributionDimensionNames, null);
		let distributionAxisDomain = chartData.getDistributionAxis().getAxisDomain().getAsCategorial();
		let seriesGroup = correlationCoordinateSystem.getOrCreateSeriesGroup(groupingKey, groupingKey);
		let groupCategory = groupingAxisDomain.getCategoryByName(groupingKey);
		seriesGroup.setCategory(groupCategory);
		let distributionCategory = distributionAxisDomain.getCategoryByName(distributionKey);
		if (oFF.notNull(distributionCategory) || distributionDimensionNames.size() === 0)
		{
			let series = seriesGroup.getOrCreateSeries(distributionKey, distributionKey);
			series.setCategory(distributionCategory);
			let dataPoint = oFF.OlapVizToChartConverterUtil.processSimpleDataPointCreation(series, chartSetting, chartSetting.getVisualizationValueTypes(), tuple, category, groupCategory, distributionCategory, scalingTextMap, unitInfoMap);
			oFF.XCollectionUtils.forEach(chartSetting.getStylingDimensionKeys(), (sdk) => {
				oFF.OlapVizToChartConverterUtil.decorateDataPoint(tuple, dataPoint, series, seriesGroup, chartData.getOrCreateStylingAxis(sdk), chartSetting, chartSetting.getStylingDimensionSelection(sdk), null);
			});
			oFF.OlapVizToChartConverterUtil.decorateDataPoint(tuple, dataPoint, series, seriesGroup, chartData.getOrCreateStylingAxis(oFF.ChartVisualization.DEFAULT_STYLING_AXIS_NAME), chartSetting, chartSetting.getDefaultStylingDimensionSelection(), null);
		}
	},
	processDataPointStyleForCoordinateSystem:function(coordinateSystem, themeCache)
	{
			oFF.XCollectionUtils.forEach(coordinateSystem.getSeriesGroups(), (sg) => {
			oFF.OlapVizToChartConverterUtil.processDataPointStyleForSeriesGroup(sg, themeCache);
		});
	},
	processDataPointStyleForSeries:function(series, themeCache)
	{
			oFF.XCollectionUtils.forEach(series.getChartDataPoints(), (dp) => {
			oFF.OlapVizToChartConverterUtil.processDatapointStyleForChartDataPoint(dp, themeCache);
		});
	},
	processDataPointStyleForSeriesGroup:function(seriesGroup, themeCache)
	{
			oFF.XCollectionUtils.forEach(seriesGroup.getSeries(), (se) => {
			oFF.OlapVizToChartConverterUtil.processDataPointStyleForSeries(se, themeCache);
		});
	},
	processDataPointStyles:function(chartDefinition, chartData)
	{
			let prioritizedDataPointStyles = chartDefinition.getChartSetting().getChartStyle().getPrioritizedDataPointStyles();
		let dataPointStyleMap = oFF.XSimpleMap.create();
		oFF.XCollectionUtils.forEach(prioritizedDataPointStyles, (dps) => {
			let chartDataPointStyle = chartData.addNewDataPointStyle(dps.getName(), dps.getText());
			oFF.OlapVizToChartConverterUtil.transferChartDataPointStyle(dps, chartDataPointStyle, null);
			dataPointStyleMap.put(chartDataPointStyle, dps);
		});
		chartData.tagMatchedExceptions();
		if (oFF.XCollectionUtils.hasElements(chartDefinition.getDatapointVariableContainers()))
		{
			chartData.clearDataPointStyles();
			oFF.XCollectionUtils.forEach(chartData.getExceptionInformation(), (mei) => {
				let variableHolders = chartDefinition.getVariableHolderForDataPoint(mei, () => {
					return oFF.SacDataSectionInfoReference.create();
				});
				oFF.OlapVizToChartConverterUtil.expandDataPointStylesForExceptionInformation(chartData, dataPointStyleMap, mei, variableHolders);
			});
		}
	},
	processDatapointStyleForChartDataPoint:function(dataPoint, themeCache)
	{
			let chartData = dataPoint.getParentSeries().getParentSeriesGroup().getParentCoordinateSystem().getParentChartVisualization();
		let dataPointStyles = chartData.getDataPointStyles();
		if (oFF.XCollectionUtils.hasElements(dataPointStyles))
		{
			let axis = chartData.getOrCreateStylingAxis(oFF.ChartVisualization.EXCEPTIONAL_STYLING_AXIS_NAME);
			let domain = axis.getAxisDomain().getAsCategorial();
			let matchedChartDataPointStyles = oFF.XList.create();
			let i;
			let dps;
			let exceptionInfoList = dataPoint.getExceptionInformation();
			let dpsSize = dataPointStyles.size();
			let eiSize = exceptionInfoList.size();
			let color = null;
			for (i = 0; i < dpsSize; i++)
			{
				let dataPointStyle = dataPointStyles.get(i);
				for (let j = 0; j < eiSize; j++)
				{
					let exceptionInfo = exceptionInfoList.get(j);
					if (chartData.matchesExceptionInfo(dataPointStyle, exceptionInfo))
					{
						matchedChartDataPointStyles.add(dataPointStyle);
					}
				}
			}
			let lineStyle = null;
			let pattern = null;
			let shape = null;
			let customPattern = null;
			let customShape = null;
			let colorFilled = oFF.XStringUtils.isNotNullAndNotEmpty(color);
			let patternFilled = false;
			let lineStyleFilled = false;
			let shapeFilled = false;
			let keys = oFF.XList.create();
			let texts = oFF.XList.create();
			for (i = 0; i < matchedChartDataPointStyles.size(); i++)
			{
				dps = matchedChartDataPointStyles.get(i);
				let chartPointStyle = dps.getChartPointStyle();
				let categoryRelevant = false;
				if (!colorFilled)
				{
					color = chartPointStyle.getColor();
					colorFilled = oFF.notNull(color);
					if (colorFilled)
					{
						categoryRelevant = true;
					}
				}
				if (!lineStyleFilled)
				{
					lineStyle = chartPointStyle.getLineStyle();
					lineStyleFilled = oFF.notNull(lineStyle);
					if (lineStyleFilled)
					{
						categoryRelevant = true;
					}
				}
				if (!patternFilled)
				{
					pattern = chartPointStyle.getPattern();
					customPattern = chartPointStyle.getCustomPattern();
					patternFilled = oFF.notNull(pattern) || oFF.notNull(customPattern);
					if (patternFilled)
					{
						categoryRelevant = true;
					}
				}
				if (!shapeFilled)
				{
					shape = chartPointStyle.getShape();
					customShape = chartPointStyle.getCustomShape();
					shapeFilled = oFF.notNull(shape) || oFF.notNull(customShape);
					if (shapeFilled)
					{
						categoryRelevant = true;
					}
				}
				if (categoryRelevant)
				{
					keys.add(dps.getDataPointCategoryName());
					texts.add(dps.getDataPointCategoryText());
				}
				if (colorFilled && lineStyleFilled && shapeFilled && patternFilled)
				{
					break;
				}
			}
			if (!keys.isEmpty() && !texts.isEmpty())
			{
				let key = oFF.XCollectionUtils.join(keys, "/");
				let text = oFF.XCollectionUtils.join(texts, " / ");
				let category = domain.getCategoryByName(key);
				if (oFF.isNull(category))
				{
					category = domain.addCategory(key, text);
					category.addCategoryElement(key, text, text, false, false);
				}
				let categoryStyle = category.getStyle();
				categoryStyle.setColor(oFF.RenderThemingHelper.remapColor(themeCache, color));
				categoryStyle.setCustomPattern(customPattern);
				categoryStyle.setCustomShape(customShape);
				if (oFF.notNull(shape))
				{
					categoryStyle.setShape(shape);
				}
				if (oFF.notNull(pattern))
				{
					categoryStyle.setPattern(pattern);
				}
				if (oFF.notNull(lineStyle))
				{
					categoryStyle.setLineStyle(lineStyle);
				}
				dataPoint.addStylingCategory(category);
			}
		}
	},
	processListContainerToChart:function(listContainer, chartDefinition, chartData)
	{
			let queryModel = chartDefinition.getQueryModel();
		let supportsUdh = queryModel.getModelCapabilities().supportsUniversalDisplayHierarchies();
		let udhs = supportsUdh ? queryModel.getUniversalDisplayHierarchies() : null;
		oFF.XCollectionUtils.forEach(listContainer.getListAxis().getDimensionReferences(), (dimensionReference) => {
			let dimension = dimensionReference.getDimension();
			if (oFF.isNull(udhs) || !udhs.getByAxisType(dimension.getAxisType()).isActive() || dimension.isUniversalDisplayHierarchyDimension())
			{
				let fieldNames = dimensionReference.getFieldNames();
				let uniqueMemberValues = dimensionReference.getUniqueMemberValues();
				let chartDimension = chartData.getOrCreateChartDimension(oFF.DfNameObject.getSafeName(dimension), dimension.getDisplayDescription());
				oFF.XCollectionUtils.forEach(fieldNames, (fieldName) => {
					let field = dimension.getFieldByName(fieldName);
					let isKeyFieldFallback = dimension.getKeyField() === field;
					let isKeyField = false;
					let isDisplayKeyFieldFallback = dimension.getDisplayKeyField() === field;
					let isDisplayKeyField = false;
					let isShownKeyField = dimension.getClientDefaultKeyField() === field;
					if (isShownKeyField && oFF.notNull(field))
					{
						if (field.getPresentationType().isTypeOf(oFF.PresentationType.DISPLAY_KEY) || field.getPresentationType().isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY))
						{
							isDisplayKeyField = true;
						}
						else
						{
							isKeyField = false;
						}
					}
					let isTextField = dimension.getClientDefaultKeyField() === field;
					let isTextFieldFallback = dimension.getTextField() === field;
					let memberFieldValues = oFF.XStream.of(uniqueMemberValues).collect(oFF.XStreamCollector.toListOfString((udmv) => {
						let fvr = udmv.getFieldValueReference(fieldName);
						return oFF.isNull(fvr) ? "" : fvr.getFormattedText();
					}));
					chartDimension.addFieldValues(oFF.DfNameObject.getSafeName(field), oFF.DfNameTextObject.getTextOfObject(field), memberFieldValues, isKeyField, isKeyFieldFallback, isDisplayKeyField, isDisplayKeyFieldFallback, isTextField, isTextFieldFallback);
				});
				chartDimension.setMemberTypes(oFF.XStream.of(uniqueMemberValues).collect(oFF.XStreamCollector.toListOfString((udmt) => {
					return oFF.DfNameObject.getSafeName(udmt.getMemberValueReference().getDimensionMemberType());
				})));
				chartDimension.setDrillStates(oFF.XStream.of(uniqueMemberValues).collect(oFF.XStreamCollector.toListOfString((udds) => {
					return oFF.DfNameObject.getSafeName(udds.getMemberValueReference().getDrillState());
				})));
				chartDimension.setValueExceptions(oFF.XStream.of(uniqueMemberValues).collect(oFF.XStreamCollector.toListOfString((udve) => {
					return oFF.DfNameObject.getSafeName(udve.getMemberValueReference().getValueException());
				})));
			}
		});
		let chartSetting = chartDefinition.getChartSetting();
		oFF.OlapVizToChartConverterUtil.transferDataPointStyles(chartDefinition, chartData);
		let reducer = oFF.XList.create();
		let availableKfs = oFF.XStream.of(chartSetting.getVisualizationValueTypes()).map((vvta) => {
			return chartSetting.getTypedValueSelectionsForType(vvta);
		}).reduce(reducer, (a, b) => {
			a.addAll(oFF.XStream.of(b).filter((bv) => {
				return bv.getDimensionMember() !== null && bv.getDimensionMember().getName() !== null;
			}).collect(oFF.XStreamCollector.toList()));
			return a;
		});
		let needsMeasureDistinction = availableKfs.size() > 1;
		let categoryDimensionSelection = chartSetting.getCategoryDimensionSelection();
		let groupingDimensionSelection = chartSetting.getGroupingDimensionSelection();
		let distributionDimensionSelection = chartSetting.getDistributionDimensionSelection();
		oFF.OlapVizToChartConverterUtil.transferVizToChartStyle(chartSetting.getMinColor(), chartData.getMinColor(), null);
		oFF.OlapVizToChartConverterUtil.transferVizToChartStyle(chartSetting.getMaxColor(), chartData.getMaxColor(), null);
		chartData.setUseColorAxis(chartSetting.isUseColorAxis());
		oFF.OlapVizToChartConverterUtil.createChartTitleStyle(chartDefinition, chartData);
		let leadingAxisType = chartDefinition.getLeadingAxis();
		chartDefinition.getQueryModel().getAxis(leadingAxisType);
		let chartType = chartSetting.getChartType();
		let cat1 = oFF.OlapVizToChartConverterUtil.createAxis(chartData, chartType.getFirstCategoryPosition(), oFF.ChartAxisDomainType.NOMINAL, oFF.VisualizationValueType.CATEGORY, chartSetting);
		let cat2 = oFF.OlapVizToChartConverterUtil.createAxis(chartData, chartType.getSecondCategoryPosition(), oFF.ChartAxisDomainType.NOMINAL, oFF.VisualizationValueType.CATEGORY_B, chartSetting);
		let val1 = oFF.OlapVizToChartConverterUtil.createValueAxis(chartData, chartType.getPrimaryValuePosition(), chartSetting, chartType.getPrimaryValueFeed());
		oFF.OlapVizToChartConverterUtil.addBasePlotLine(val1);
		if (chartSetting.areYAxisOnSameSide() && oFF.notNull(val1))
		{
			val1.setFrom(0);
			val1.setTo(1);
		}
		let val2;
		if (chartSetting.areYAxisOnSameSide())
		{
			val2 = oFF.OlapVizToChartConverterUtil.createValueAxis(chartData, oFF.ChartAxisPosition.Y_LEFT, chartSetting, chartType.getSecondaryValueFeed());
			if (oFF.notNull(val2))
			{
				val2.setFrom(1);
				val2.setTo(2);
			}
		}
		else
		{
			val2 = oFF.OlapVizToChartConverterUtil.createValueAxis(chartData, chartType.getSecondaryValuePosition(), chartSetting, chartType.getSecondaryValueFeed());
		}
		let val3 = oFF.OlapVizToChartConverterUtil.createValueAxis(chartData, chartType.getThirdValuePosition(), chartSetting, chartType.getThirdValueFeed());
		let val4 = oFF.OlapVizToChartConverterUtil.createValueAxis(chartData, chartType.getFourthValuePosition(), chartSetting, chartType.getFourthValueFeed());
		chartData.setChartType(oFF.OlapVizToChartConverterUtil.convertChartType(chartType));
		chartData.setPolar(chartSetting.isPolar());
		chartData.setChartLegend(oFF.OlapVizToChartConverterUtil.createChartLegend(chartDefinition));
		chartData.setChartPlotArea(oFF.OlapVizToChartConverterUtil.createChartPlotArea(chartDefinition));
		let chartOrientation = chartSetting.getChartOrientation();
		if (chartOrientation === oFF.ChartOrientation.HORIZONTAL)
		{
			chartData.setInverted(true);
		}
		let stackingType = oFF.OlapVizToChartConverterUtil.lookupTargetStackingType(chartSetting.getChartStackingType());
		let stylingDimensionKeys = chartSetting.getStylingDimensionKeys();
		oFF.XCollectionUtils.forEach(stylingDimensionKeys, (sdk) => {
			oFF.OlapVizToChartConverterUtil.applyChartStylingAxis(sdk, chartSetting.getStylingDimensionSelection(sdk), chartData, chartSetting, listContainer, needsMeasureDistinction);
		});
		oFF.OlapVizToChartConverterUtil.applyChartStylingAxis(oFF.ChartVisualization.DEFAULT_STYLING_AXIS_NAME, chartSetting.getDefaultStylingDimensionSelection(), chartData, chartSetting, listContainer, needsMeasureDistinction);
		let scalingTextMap = oFF.XHashMapByString.create();
		let unitInfoMap = oFF.XHashMapByString.create();
		let listAxis = listContainer.getListAxis();
		let memberUnitMap = oFF.XSimpleMap.create();
		oFF.XStream.of(listAxis.getVisibleComponentsOnAxis()).filter((vc) => {
			return vc.getModelComponentType().isTypeOf(oFF.MemberType.ABSTRACT_MEMBER);
		}).map((mc) => {
			return mc;
		}).forEach((mvr) => {
			let unitInfo = mvr.getUniqueUnitScaleInformation();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(unitInfo))
			{
				unitInfo = oFF.XStringUtils.concatenate3(oFF.OlapVizToChartConverterUtil.INFO_PREFIX, unitInfo, oFF.OlapVizToChartConverterUtil.INFO_SUFFIX);
			}
			let sm = mvr.getStructureMember();
			let refVal = memberUnitMap.getByKey(sm);
			if (oFF.isNull(refVal))
			{
				memberUnitMap.put(sm, oFF.XStringValue.create(unitInfo));
			}
			else if (!oFF.XString.isEqual(refVal.getString(), unitInfo))
			{
				memberUnitMap.put(sm, oFF.XStringValue.create(""));
			}
		});
		if (oFF.notNull(val1))
		{
			oFF.OlapVizToChartConverterUtil.fillValueAxis(chartSetting, val1, chartType.getPrimaryValueFeed(), memberUnitMap);
		}
		if (oFF.notNull(val2))
		{
			oFF.OlapVizToChartConverterUtil.fillValueAxis(chartSetting, val2, chartType.getSecondaryValueFeed(), memberUnitMap);
		}
		if (oFF.notNull(val3))
		{
			oFF.OlapVizToChartConverterUtil.fillValueAxis(chartSetting, val3, chartType.getThirdValueFeed(), memberUnitMap);
		}
		if (oFF.notNull(val4))
		{
			oFF.OlapVizToChartConverterUtil.fillValueAxis(chartSetting, val4, chartType.getFourthValueFeed(), memberUnitMap);
		}
		oFF.OlapVizToChartConverterUtil.transferColorScheme(chartData.getDistributionAxis().getAxisDomain().getAsCategorial(), distributionDimensionSelection, chartSetting);
		if (oFF.notNull(cat1))
		{
			oFF.OlapVizToChartConverterUtil.fillCategoryAxis(chartSetting, chartData, cat1, categoryDimensionSelection, chartSetting.categoryDimensionSelectionEffectivelyIncludesKeyFigureDimension(), listContainer, chartType.getFirstCategoryTotalsRestriction(), chartType.getFirstCategoryHierarchyAllowed(), needsMeasureDistinction);
		}
		if (oFF.notNull(cat2))
		{
			oFF.OlapVizToChartConverterUtil.fillCategoryAxis(chartSetting, chartData, cat2, groupingDimensionSelection, chartSetting.groupingDimensionSelectionEffectivelyIncludesKeyFigureDimension(), listContainer, chartType.getSecondCategoryTotalsRestriction(), chartType.getSecondCategoryHierarchyAllowed(), needsMeasureDistinction);
		}
		oFF.OlapVizToChartConverterUtil.fillCategoryAxis(chartSetting, chartData, chartData.getDistributionAxis(), distributionDimensionSelection, chartSetting.distributionDimensionSelectionEffectivelyIncludesKeyFigureDimension(), listContainer, chartType.getDistributionCategoryTotalsRestriction(), chartType.getDistributionCategoryHierarchyAllowed(), needsMeasureDistinction);
		if (oFF.notNull(cat1) && oFF.notNull(cat2))
		{
			let heatCoordinateSystem = chartData.addCoordinateSystem(oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_BICATEGORIAL, oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_BICATEGORIAL, cat2, cat1, null);
			oFF.OlapVizToChartConverterUtil.processBiCategorialCoordinateSystem(chartSetting, chartData, heatCoordinateSystem, listContainer, needsMeasureDistinction, scalingTextMap, unitInfoMap);
		}
		else if (chartType.isTypeOf(oFF.ChartType.ABSTRACT_VALUE_CORRELATION) && oFF.notNull(val1) && oFF.notNull(val2))
		{
			let correlationCoordinateSystem = chartData.addCoordinateSystem(oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_BISCALAR, oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_BISCALAR, val1, val2, null);
			oFF.OlapVizToChartConverterUtil.processOverallCorrelationCoordinateSystemInternal(cat1, chartSetting, chartData, correlationCoordinateSystem, listContainer, scalingTextMap, unitInfoMap);
		}
		else if (oFF.notNull(cat1))
		{
			if (oFF.notNull(val1))
			{
				let catVal1CoordinateSystem = chartData.addCoordinateSystem(oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL1, oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL1, cat1, val1, null);
				if (chartType.getSecondaryValuePosition() === null && chartType.getSecondaryValueFeed() !== null)
				{
					oFF.OlapVizToChartConverterUtil.processOverallSeriesSeriesCoordinateSystem(chartSetting, chartData, stackingType, catVal1CoordinateSystem, listContainer, val1, needsMeasureDistinction, scalingTextMap, unitInfoMap);
				}
				else
				{
					oFF.OlapVizToChartConverterUtil.processSelectiveSeriesCoordinateSystem(chartSetting, chartData, stackingType, catVal1CoordinateSystem, chartType.getPrimaryValueFeed(), listContainer, val1, needsMeasureDistinction, scalingTextMap, unitInfoMap);
				}
			}
			if (oFF.notNull(val2))
			{
				let catVal2CoordinateSystem = chartData.addCoordinateSystem(oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL2, oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL2, cat1, val2, null);
				oFF.OlapVizToChartConverterUtil.processSelectiveSeriesCoordinateSystem(chartSetting, chartData, null, catVal2CoordinateSystem, chartType.getSecondaryValueFeed(), listContainer, val2, needsMeasureDistinction, scalingTextMap, unitInfoMap);
			}
			if (oFF.notNull(val3))
			{
				let catVal3CoordinateSystem = chartData.addCoordinateSystem(oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL3, oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL3, cat1, val3, null);
				oFF.OlapVizToChartConverterUtil.processSelectiveSeriesCoordinateSystem(chartSetting, chartData, null, catVal3CoordinateSystem, chartType.getThirdValueFeed(), listContainer, val3, needsMeasureDistinction, scalingTextMap, unitInfoMap);
			}
			if (oFF.notNull(val4))
			{
				let catVal4CoordinateSystem = chartData.addCoordinateSystem(oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL4, oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_CATVAL4, cat1, val4, null);
				oFF.OlapVizToChartConverterUtil.processSelectiveSeriesCoordinateSystem(chartSetting, chartData, null, catVal4CoordinateSystem, chartType.getFourthValueFeed(), listContainer, val4, needsMeasureDistinction, scalingTextMap, unitInfoMap);
			}
		}
		else if (oFF.notNull(val1) && oFF.notNull(val2))
		{
			oFF.OlapVizToChartConverterUtil.processCorrelationCoordinateSystem(chartSetting, chartData, chartData.addCoordinateSystem(oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_BISCALAR, oFF.OlapVizToChartConverterUtil.COORDINATE_SYTEM_BISCALAR, val1, val2, null), listContainer, val1, val2, needsMeasureDistinction, scalingTextMap, unitInfoMap);
		}
		oFF.OlapVizToChartConverterUtil.processDataPointStyles(chartDefinition, chartData);
		let themeCache = oFF.XHashMapByString.create();
		oFF.XCollectionUtils.forEach(chartData.getCoordinateSystems(), (cs) => {
			oFF.OlapVizToChartConverterUtil.processDataPointStyleForCoordinateSystem(cs, themeCache);
		});
		oFF.XCollectionUtils.forEach(memberUnitMap.getKeysAsReadOnlyList(), (dimMemberForListing) => {
			let rawName = dimMemberForListing.getName();
			let memberName = dimMemberForListing.getDisplayName();
			if (oFF.XStringUtils.isNullOrEmpty(memberName))
			{
				memberName = rawName;
			}
			let fieldValue = dimMemberForListing.getFieldValue(dimMemberForListing.getDimension().getDisplayKeyField());
			let memberDisplayName = oFF.isNull(fieldValue) ? null : fieldValue.getString();
			if (oFF.XStringUtils.isNullOrEmpty(memberDisplayName))
			{
				memberDisplayName = memberName;
			}
			let memberText = dimMemberForListing.getDisplayDescription();
			if (oFF.XStringUtils.isNullOrEmpty(memberText))
			{
				memberText = dimMemberForListing.getText();
			}
			let uikf = memberUnitMap.getByKey(dimMemberForListing);
			let dimensionOfMember = dimMemberForListing.getDimension();
			let unitScaleInfoLocal = oFF.isNull(uikf) ? null : uikf.getString();
			if (oFF.XStringUtils.isNullOrEmpty(unitScaleInfoLocal))
			{
				let unitInfos = unitInfoMap.getByKey(rawName);
				let scalingTexts = scalingTextMap.getByKey(rawName);
				let unitInfoSize = oFF.XCollectionUtils.size(unitInfos);
				let scalingTextsSize = oFF.XCollectionUtils.size(scalingTexts);
				let unitLocal;
				if (unitInfoSize === 1 && scalingTextsSize === 1)
				{
					unitLocal = unitInfos.get(0);
					unitScaleInfoLocal = oFF.XString.trim(oFF.XStringUtils.concatenate5(oFF.XString.trim(scalingTexts.get(0)), " ", oFF.XString.trim(unitLocal.getFirstString()), " ", oFF.XString.trim(unitLocal.getSecondString())));
				}
				else if (scalingTextsSize === 1)
				{
					unitScaleInfoLocal = oFF.XString.trim(scalingTexts.get(0));
				}
				else if (unitInfoSize === 1)
				{
					unitLocal = unitInfos.get(0);
					unitScaleInfoLocal = oFF.XString.trim(oFF.XStringUtils.concatenate3(oFF.XString.trim(unitLocal.getFirstString()), " ", oFF.XString.trim(unitLocal.getSecondString())));
				}
				if (oFF.XStringUtils.isNotNullAndNotEmpty(unitScaleInfoLocal))
				{
					unitScaleInfoLocal = oFF.XStringUtils.concatenate3(oFF.OlapVizToChartConverterUtil.INFO_PREFIX, unitScaleInfoLocal, oFF.OlapVizToChartConverterUtil.INFO_SUFFIX);
				}
			}
			chartData.addKeyFigureInfo(dimensionOfMember.getName(), dimensionOfMember.getDisplayDescription(), memberName, memberDisplayName, memberText, unitScaleInfoLocal);
		});
	},
	processOverallCorrelationCoordinateSystemInternal:function(categoryAxis, chartSetting, chartData, correlationCoordinateSystem, listContainer, scalingTextMap, unitInfoMap)
	{
			let categoryDomain = categoryAxis.getAxisDomain().getAsCategorial();
		let groupingAxis = chartData.getGroupingAxis();
		let groupingDimensionSelection = chartSetting.getGroupingDimensionSelection();
		oFF.OlapVizToChartConverterUtil.transferColorScheme(groupingAxis.getAxisDomain().getAsCategorial(), chartSetting.getDefaultStylingDimensionSelection(), chartSetting);
		oFF.OlapVizToChartConverterUtil.transferColorScheme(groupingAxis.getAxisDomain().getAsCategorial(), groupingDimensionSelection, chartSetting);
		let listAxis = listContainer.getListAxis();
		let tuples = listAxis.getTuplesOnAxis();
		for (let i = 0; i < tuples.size(); i++)
		{
			let tuple = tuples.get(i);
			let categoryKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, chartSetting.getCategoryDimensionSelection().getDimensionNames(), null);
			let category = categoryDomain.getCategoryByName(categoryKey);
			if (oFF.isNull(category))
			{
				continue;
			}
			oFF.OlapVizToChartConverterUtil.processCorrelationDataPointCreation(chartSetting, chartData, correlationCoordinateSystem, tuple, category, groupingAxis.getAxisDomain().getAsCategorial(), i, scalingTextMap, unitInfoMap);
		}
	},
	processOverallSeriesSeriesCoordinateSystem:function(chartSetting, chartData, stackingType, seriesCoordinateSystem, listContainer, val1, needsMeasureDistinction, scalingTextMap, unitInfoMap)
	{
			oFF.OlapVizToChartConverterUtil.processOverallSeriesSeriesCoordinateSystemInternal(chartSetting, chartData, stackingType, chartSetting.getVisualizationValueTypes(), seriesCoordinateSystem, listContainer, needsMeasureDistinction, scalingTextMap, unitInfoMap);
	},
	processOverallSeriesSeriesCoordinateSystemInternal:function(chartSetting, chartData, stackingType, visualizationValueTypesOrig, seriesCoordinateSystem, listContainer, needsMeasureDistinction, scalingTextMap, unitInfoMap)
	{
			let categoryDomain = seriesCoordinateSystem.getXAxisReference().getAxisDomain().getAsCategorial();
		let groupingAxis = chartData.getGroupingAxis();
		let groupingDimensionSelection = chartSetting.getGroupingDimensionSelection();
		oFF.OlapVizToChartConverterUtil.transferColorScheme(groupingAxis.getAxisDomain().getAsCategorial(), groupingDimensionSelection, chartSetting);
		let listAxis = listContainer.getListAxis();
		let tuples = listAxis.getTuplesOnAxis();
		let visualizationValueTypes = oFF.XStream.of(visualizationValueTypesOrig).filter((vvt) => {
			return oFF.XCollectionUtils.hasElements(chartSetting.getTypedValueSelectionsForType(vvt));
		}).collect(oFF.XStreamCollector.toList());
		let vvs = visualizationValueTypes.size();
		let scalarDomain = seriesCoordinateSystem.getYAxisReference().getAxisDomain().getAsScalar();
		let positiveSum = oFF.XHashMapByString.create();
		let negativeSum = oFF.XHashMapByString.create();
		let i;
		for (i = 0; i < tuples.size(); i++)
		{
			let tuple = tuples.get(i);
			let colorSettings = chartSetting.getTypedValueSelectionsForType(oFF.VisualizationValueType.COLOR);
			let colorSetting = oFF.XCollectionUtils.hasElements(colorSettings) ? oFF.XStream.of(colorSettings).find((kfs) => {
				return kfs.getDimensionMember() !== null;
			}).orElse(null) : null;
			for (let h = 0; h < vvs; h++)
			{
				let visualizationValueType = visualizationValueTypes.get(h);
				let effectiveChartType = chartSetting.getChartType().getChartTypeForVisualizationValueType(visualizationValueType, chartSetting.getChartType2());
				let typedValueSelections = chartSetting.getTypedValueSelectionsForType(visualizationValueType);
				oFF.OlapVizToChartConverterUtil.processSeriesDataPointCreation(needsMeasureDistinction, effectiveChartType, typedValueSelections, colorSetting, chartSetting, stackingType, chartData, tuple, i, categoryDomain, seriesCoordinateSystem, groupingAxis, groupingDimensionSelection, positiveSum, negativeSum, scalingTextMap, unitInfoMap);
			}
		}
		let minVal = 0;
		let cur;
		let negativeSums = negativeSum.getValuesAsReadOnlyList();
		for (i = 0; i < negativeSums.size(); i++)
		{
			cur = negativeSums.get(i).getDouble();
			if (minVal > cur)
			{
				minVal = cur;
			}
		}
		let maxVal = 0;
		let positiveSums = positiveSum.getValuesAsReadOnlyList();
		for (i = 0; i < positiveSums.size(); i++)
		{
			cur = positiveSums.get(i).getDouble();
			if (maxVal < cur)
			{
				maxVal = cur;
			}
		}
		if (minVal < 0)
		{
			scalarDomain.setMin(minVal);
		}
		if (maxVal > 0)
		{
			scalarDomain.setMax(maxVal);
		}
	},
	processSelectiveSeriesCoordinateSystem:function(chartSetting, chartData, stackingType, seriesCoordinateSystem, valueFeed, listContainer, val1, needsMeasureDistinction, scalingTextMap, unitInfoMap)
	{
			let valueFeeds = oFF.XList.create();
		valueFeeds.add(valueFeed);
		oFF.OlapVizToChartConverterUtil.processOverallSeriesSeriesCoordinateSystemInternal(chartSetting, chartData, stackingType, valueFeeds, seriesCoordinateSystem, listContainer, needsMeasureDistinction, scalingTextMap, unitInfoMap);
	},
	processSeriesDataPointCreation:function(needsMeasureDistinction, effectiveChartType, typedValueSelections, colorSetting, chartSetting, stackingType, chartData, tuple, tupleIndex, categoryDomain, seriesCoordinateSystem, groupingAxis, groupingDimensionSelection, positiveSum, negativeSum, scalingTextMap, unitInfoMap)
	{
			let tvs = typedValueSelections.size();
		oFF.OlapVizToChartConverterUtil.tagChartDimensions(chartData, groupingAxis, groupingDimensionSelection);
		let distributionAxisDomain = chartData.getDistributionAxis().getAxisDomain().getAsCategorial();
		let distributionDimensionSelection = chartSetting.getDistributionDimensionSelection();
		for (let g = 0; g < tvs; g++)
		{
			let typedValueSelection = typedValueSelections.get(g);
			let member = typedValueSelection.getDimensionMember();
			let categoryKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, chartSetting.getCategoryDimensionSelection().getDimensionNames(), chartSetting.categoryDimensionSelectionEffectivelyIncludesKeyFigureDimension() && oFF.notNull(member) ? member.getName() : null);
			let category = categoryDomain.getCategoryByName(categoryKey);
			if (oFF.isNull(category))
			{
				continue;
			}
			let effectivelyNeedsGroupMeasureDistinction = (needsMeasureDistinction || !oFF.XCollectionUtils.hasElements(groupingDimensionSelection.getDimensionNames())) && chartSetting.groupingDimensionSelectionEffectivelyIncludesKeyFigureDimension();
			let groupStructure = chartSetting.groupingDimensionSelectionEffectivelyIncludesKeyFigureDimension() ? member : null;
			let groupingKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, groupingDimensionSelection.getDimensionNames(), !effectivelyNeedsGroupMeasureDistinction || oFF.isNull(groupStructure) ? null : groupStructure.getName());
			let groupCategory = oFF.OlapVizToChartConverterUtil.getOrCreateCategory(groupingAxis, tuple, groupingDimensionSelection.getDimensionNames(), groupStructure, effectivelyNeedsGroupMeasureDistinction, tupleIndex, chartSetting.getChartType().getGroupingCategoryTotalsRestriction(), chartSetting.getChartType().getGroupingCategoryHierarchyAllowed());
			let distributionStructure = chartSetting.distributionDimensionSelectionEffectivelyIncludesKeyFigureDimension() ? member : null;
			let distributionKey = oFF.ChartAxisCategoryAnalytic.getKey(tuple, distributionDimensionSelection.getDimensionNames(), oFF.isNull(distributionStructure) ? null : distributionStructure.getName());
			let distributionCategory = distributionAxisDomain.getCategoryByName(distributionKey);
			if (oFF.notNull(distributionCategory) && oFF.notNull(distributionStructure))
			{
				oFF.OlapVizToChartConverterUtil.transferVizToChartStyle(typedValueSelection.getStyle(), distributionCategory.getStyle(), null);
			}
			else if (oFF.notNull(groupCategory) && oFF.notNull(groupStructure))
			{
				oFF.OlapVizToChartConverterUtil.transferVizToChartStyle(typedValueSelection.getStyle(), groupCategory.getStyle(), null);
			}
			if (oFF.notNull(groupCategory) && oFF.notNull(distributionCategory))
			{
				let seriesGroup = seriesCoordinateSystem.getOrCreateSeriesGroup(groupingKey, groupingKey);
				seriesGroup.setChartType(oFF.OlapVizToChartConverterUtil.convertChartType(effectiveChartType));
				seriesGroup.setStackingType(stackingType);
				seriesGroup.setCategory(groupCategory);
				let series = seriesGroup.getOrCreateSeries(distributionKey, distributionKey);
				series.setCategory(distributionCategory);
				let dataPoint = oFF.OlapVizToChartConverterUtil.processComplexDataPointCreation(series, typedValueSelection, tuple, category, oFF.XStringUtils.concatenate3(category.getName(), "_", groupingKey), positiveSum, negativeSum, scalingTextMap, unitInfoMap);
				if (oFF.notNull(colorSetting))
				{
					oFF.OlapVizToChartConverterUtil.decorateDataPointInternal(oFF.VisualizationValueType.COLOR.getName(), dataPoint, colorSetting, tuple, scalingTextMap, unitInfoMap);
				}
				oFF.XCollectionUtils.forEach(chartSetting.getStylingDimensionKeys(), (sdk) => {
					oFF.OlapVizToChartConverterUtil.decorateDataPoint(tuple, dataPoint, series, seriesGroup, chartData.getOrCreateStylingAxis(sdk), chartSetting, chartSetting.getStylingDimensionSelection(sdk), member);
				});
				oFF.OlapVizToChartConverterUtil.decorateDataPoint(tuple, dataPoint, series, seriesGroup, chartData.getOrCreateStylingAxis(oFF.ChartVisualization.DEFAULT_STYLING_AXIS_NAME), chartSetting, chartSetting.getDefaultStylingDimensionSelection(), member);
			}
		}
	},
	processSimpleDataPointCreation:function(series, chartSetting, visualizationValueTypes, tuple, category1, category2, category3, scalingTextMap, unitInfoMap)
	{
			let pointName = oFF.XStringUtils.concatenate5(oFF.OlapVizToChartConverterUtil.getNameForCategory(category1), "/", oFF.OlapVizToChartConverterUtil.getNameForCategory(category2), "/", oFF.OlapVizToChartConverterUtil.getNameForCategory(category3));
		let dataPoint = series.addChartDataPoint(pointName, pointName);
		dataPoint.setCategory(category1);
		oFF.OlapVizToChartConverterUtil.decorateWithCategory(dataPoint, category1, oFF.ChartVisualization.CATEGORY_AXIS_NAME);
		oFF.OlapVizToChartConverterUtil.decorateWithCategory(dataPoint, category2, oFF.ChartVisualization.CATEGORY_AXIS2_NAME);
		oFF.OlapVizToChartConverterUtil.decorateWithCategory(dataPoint, category3, null);
		oFF.OlapVizToChartConverterUtil.decorateSimpleDataPoint("", dataPoint, chartSetting, visualizationValueTypes, tuple, scalingTextMap, unitInfoMap);
		return dataPoint;
	},
	remapAlertLevel:function(alertLevel)
	{
			return oFF.isNull(alertLevel) ? null : oFF.SacAlertLevel.getByLevelValue(alertLevel.getLevel());
	},
	resolveBoolean:function(labelStyles, chartDefinition, accessor)
	{
			let stylingValue = oFF.TriStateBool._DEFAULT;
		for (let i = 0; i < labelStyles.size(); i++)
		{
			let labelStyle = labelStyles.get(i);
			if (oFF.notNull(labelStyle))
			{
				stylingValue = accessor(labelStyle).resolveTriStateBoolean(chartDefinition);
				if (oFF.TriStateBool.isExplicitBooleanValue(stylingValue))
				{
					break;
				}
			}
		}
		return stylingValue.getBoolean();
	},
	resolveConstant:function(labelStyles, chartDefinition, accessor)
	{
			let stylingValue = null;
		for (let i = 0; i < labelStyles.size(); i++)
		{
			let labelStyle = labelStyles.get(i);
			if (oFF.notNull(labelStyle))
			{
				stylingValue = accessor(labelStyle).getResolvedValue(chartDefinition);
				if (oFF.notNull(stylingValue))
				{
					break;
				}
			}
		}
		return stylingValue;
	},
	resolveDouble:function(labelStyles, chartDefinition, accessor)
	{
			let stylingValue = 0;
		for (let i = 0; i < labelStyles.size(); i++)
		{
			let labelStyle = labelStyles.get(i);
			if (oFF.notNull(labelStyle))
			{
				stylingValue = accessor(labelStyle).resolveDouble(chartDefinition);
				if (stylingValue > 0)
				{
					break;
				}
			}
		}
		return stylingValue;
	},
	resolveString:function(labelStyles, chartDefinition, accessor)
	{
			let stylingValue = null;
		for (let i = 0; i < labelStyles.size(); i++)
		{
			let labelStyle = labelStyles.get(i);
			if (oFF.notNull(labelStyle))
			{
				stylingValue = accessor(labelStyle).resolveString(chartDefinition);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(stylingValue))
				{
					break;
				}
			}
		}
		return stylingValue;
	},
	sumUpValue:function(distributionKey, sumsByDistributionCategory, primitiveDoubleValue)
	{
			if (!sumsByDistributionCategory.containsKey(distributionKey))
		{
			sumsByDistributionCategory.put(distributionKey, oFF.XDoubleValue.create(primitiveDoubleValue));
		}
		else
		{
			sumsByDistributionCategory.put(distributionKey, oFF.XDoubleValue.create(primitiveDoubleValue + sumsByDistributionCategory.getByKey(distributionKey).getDouble()));
		}
	},
	tagChartDimensions:function(chartData, chartAxis, dimensionSelection)
	{
			let chartDimensions = chartData.getChartDimensions();
		oFF.XCollectionUtils.forEach(dimensionSelection.getDimensionNames(), (dimensionName) => {
			oFF.XCollectionUtils.getOptionalByString(chartDimensions, dimensionName).ifPresent((cd) => {
				cd.addAxisName(chartAxis.getName());
			});
		});
	},
	transferChartDataPointStyle:function(dps, chartDataPointStyle, variableRequestor)
	{
			if (dps.isUnmatchedTags())
		{
			chartDataPointStyle.setUnmatchedTags();
		}
		else
		{
			chartDataPointStyle.clearTags();
			oFF.XCollectionUtils.forEach(dps.getTags(), (tag) => {
				chartDataPointStyle.addTag(tag);
			});
		}
		if (dps.isUnmatchedExceptions())
		{
			chartDataPointStyle.setUnmatchedExceptions();
		}
		else
		{
			chartDataPointStyle.setExceptionName(dps.getExceptionName());
		}
		if (dps.isUnmatchedAlertLevels())
		{
			chartDataPointStyle.setUnmatchedAlertLevels();
		}
		else
		{
			chartDataPointStyle.setAlertLevelMin(oFF.OlapVizToChartConverterUtil.remapAlertLevel(dps.getAlertLevelMin()));
			chartDataPointStyle.setAlertLevelMax(oFF.OlapVizToChartConverterUtil.remapAlertLevel(dps.getAlertLevelMax()));
		}
		if (dps.isUnmatchedValueSigns())
		{
			chartDataPointStyle.setUnmatchedValueSigns();
		}
		else
		{
			chartDataPointStyle.setValueSign(oFF.OlapToVisualizationConverterUtil.getValueSignFromViz(dps.getValueSign()));
		}
		if (dps.isUnmatchedPathElements())
		{
			chartDataPointStyle.setUnmatchedPathElements();
		}
		else
		{
			oFF.XCollectionUtils.forEach(dps.getPathElements(), (pathElement) => {
				oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromViz(pathElement, chartDataPointStyle.addNewPathElement());
			});
		}
		let dataPointStyleCategoryName = dps.getDataPointCategoryNameRaw().resolveStringExtended(variableRequestor, dps.getChartDefinition());
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataPointStyleCategoryName))
		{
			chartDataPointStyle.setDataPointCategoryName(dataPointStyleCategoryName);
		}
		let dataPointStyleCategoryText = dps.getDataPointCategoryTextRaw().resolveStringExtended(variableRequestor, dps.getChartDefinition());
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataPointStyleCategoryText))
		{
			chartDataPointStyle.setDataPointCategoryText(dataPointStyleCategoryText);
		}
		let chartPointStyleName = dps.getChartPointStyleNameRaw().resolveStringExtended(variableRequestor, dps.getChartDefinition());
		let chartPointStyle = oFF.isNull(chartPointStyleName) ? null : dps.getChartDefinition().getChartSetting().getChartStyle().getOrCreateChartPointStyle(chartPointStyleName, null);
		if (oFF.notNull(chartPointStyle))
		{
			oFF.OlapVizToChartConverterUtil.transferVizToChartStyle(chartPointStyle, chartDataPointStyle.getChartPointStyle(), variableRequestor);
		}
		chartDataPointStyle.setPriority(dps.getPriority());
	},
	transferColorScheme:function(domainCategorial, dimensionSelection, chartSetting)
	{
			if (oFF.notNull(dimensionSelection) && chartSetting.getChartStyle().hasChartColorSchemeForKey(dimensionSelection.getColorSchemeKey()))
		{
			let colorScheme = chartSetting.getChartStyle().getChartColorSchemeIfAvailable(dimensionSelection.getColorSchemeKey());
			if (oFF.XCollectionUtils.hasElements(colorScheme.getColors()))
			{
				domainCategorial.clearColors();
				domainCategorial.putAllColors(colorScheme.getColors());
			}
			if (oFF.XCollectionUtils.hasElements(colorScheme.getPatterns()))
			{
				domainCategorial.clearPatterns();
				domainCategorial.putAllPatterns(oFF.XStream.of(colorScheme.getPatterns()).map((p) => {
					return oFF.VisualizationBackgroundPatternType.lookup(p.getName());
				}).collect(oFF.XStreamCollector.toList()));
			}
			if (oFF.XCollectionUtils.hasElements(colorScheme.getLineStyles()))
			{
				domainCategorial.clearLineStyles();
				domainCategorial.putAllLineStyles(oFF.XStream.of(colorScheme.getLineStyles()).map((l) => {
					return oFF.ChartVisualizationLineStyle.lookup(l.getName());
				}).collect(oFF.XStreamCollector.toList()));
			}
			if (oFF.XCollectionUtils.hasElements(colorScheme.getShapes()))
			{
				domainCategorial.clearShapes();
				domainCategorial.putAllShapes(oFF.XStream.of(colorScheme.getShapes()).map((l) => {
					return oFF.VisualizationChartPointShape.lookup(l.getName());
				}).collect(oFF.XStreamCollector.toList()));
			}
		}
	},
	transferDataPointStyles:function(chartDefinition, chartData)
	{
			chartData.clearRelevantDataPathTags();
		oFF.XCollectionUtils.forEach(chartDefinition.getRelevantDataPointPaths(), (rdpp) => {
			let dsir = oFF.SacDataSectionInfoReference.create();
			oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromViz(rdpp, dsir);
			chartData.addRelevantDataPathTag(dsir);
		});
	},
	transferVizToChartStyle:function(styleViz, styleChart, variableRequestor)
	{
			let chartDefinition = styleViz.getChartDefinition();
		styleChart.setColor(styleViz.getColorRaw().resolveStringExtended(variableRequestor, chartDefinition));
		styleChart.setCustomPattern(styleViz.getCustomPatternRaw().resolveStringExtended(variableRequestor, chartDefinition));
		styleChart.setCustomShape(styleViz.getCustomShapeRaw().resolveStringExtended(variableRequestor, chartDefinition));
		let safeName = oFF.DfNameObject.getSafeName(styleViz.getLineStyleRaw().getResolvedValueExtended(variableRequestor, chartDefinition));
		if (oFF.XStringUtils.isNotNullAndNotEmpty(safeName))
		{
			styleChart.setLineStyle(oFF.ChartVisualizationLineStyle.lookup(safeName));
		}
		safeName = oFF.DfNameObject.getSafeName(styleViz.getPatternRaw().getResolvedValueExtended(variableRequestor, chartDefinition));
		if (oFF.XStringUtils.isNotNullAndNotEmpty(safeName))
		{
			styleChart.setPattern(oFF.VisualizationBackgroundPatternType.lookup(safeName));
		}
		safeName = oFF.DfNameObject.getSafeName(styleViz.getShapeRaw().getResolvedValueExtended(variableRequestor, chartDefinition));
		if (oFF.XStringUtils.isNotNullAndNotEmpty(safeName))
		{
			styleChart.setShape(oFF.VisualizationChartPointShape.lookup(safeName));
		}
	}
};

oFF.RsVizContainerFactoryImpl = function() {};
oFF.RsVizContainerFactoryImpl.prototype = new oFF.XObject();
oFF.RsVizContainerFactoryImpl.prototype._ff_c = "RsVizContainerFactoryImpl";

oFF.RsVizContainerFactoryImpl.create = function()
{
	return new oFF.RsVizContainerFactoryImpl();
};
oFF.RsVizContainerFactoryImpl.prototype.newVisualizationContainer = function(visualizationDefinition)
{
	if (visualizationDefinition.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_TABLE_DEFINITION)
	{
		return oFF.RsVizTableContainer.create(visualizationDefinition);
	}
	else if (visualizationDefinition.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_CHART_DEFINITION)
	{
		return oFF.RsVizChartContainer.create(visualizationDefinition);
	}
	else if (visualizationDefinition.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_KPI_DEFINITION)
	{
		return oFF.RsVizKpiContainer.create(visualizationDefinition);
	}
	else if (visualizationDefinition.getOlapComponentType() === oFF.OlapComponentType.VISUALIZATION_CUSTOM_DEFINITION)
	{
		return oFF.RsVizCustomVisualizationContainer.create(visualizationDefinition);
	}
	else
	{
		return null;
	}
};

oFF.PivotTableEngine = function() {};
oFF.PivotTableEngine.prototype = new oFF.XObject();
oFF.PivotTableEngine.prototype._ff_c = "PivotTableEngine";

oFF.PivotTableEngine.create = function(tableDefinition, gridContainer)
{
	let instance = new oFF.PivotTableEngine();
	instance.m_tableDefinition = tableDefinition;
	instance.m_gridContainer = gridContainer;
	instance.m_sacAnalyticsTable = oFF.PivotTableProxy.create(instance.m_gridContainer, instance);
	instance.m_table = oFF.SacFormattableTableFragment.create(instance.m_sacAnalyticsTable, 0, 0, 0, 0);
	instance.m_sacAnalyticsTable.setBaseTile(instance.m_table);
	return instance;
};
oFF.PivotTableEngine.prototype.m_gridContainer = null;
oFF.PivotTableEngine.prototype.m_headerCompactionType = null;
oFF.PivotTableEngine.prototype.m_neededEmptyHeaderRows = null;
oFF.PivotTableEngine.prototype.m_sacAnalyticsTable = null;
oFF.PivotTableEngine.prototype.m_showDimensionTitles = false;
oFF.PivotTableEngine.prototype.m_table = null;
oFF.PivotTableEngine.prototype.m_tableDefinition = null;
oFF.PivotTableEngine.prototype.applyCellChart = function(axis, tuple)
{
	let cellChartMember = this.extractStructureMemberWithCellChart(tuple);
	if (oFF.notNull(cellChartMember))
	{
		this.fillCellChart(axis, cellChartMember);
	}
};
oFF.PivotTableEngine.prototype.applyTableDefinition = function(tableDefinition)
{
	if (oFF.notNull(tableDefinition))
	{
		this.m_tableDefinition = tableDefinition;
		let applicationSettings = tableDefinition.getApplicationSettings();
		if (oFF.notNull(applicationSettings))
		{
			if (applicationSettings.getWidgetWidth() > 0)
			{
				this.m_sacAnalyticsTable.setWidth(applicationSettings.getWidgetWidth());
			}
			if (applicationSettings.getWidgetHeight() > 0)
			{
				this.m_sacAnalyticsTable.setHeight(applicationSettings.getWidgetHeight());
			}
			if (applicationSettings.getMaxColumns() > 0)
			{
				this.m_sacAnalyticsTable.setMaxColumns(applicationSettings.getMaxColumns());
			}
			if (applicationSettings.getMaxRows() > 0)
			{
				this.m_sacAnalyticsTable.setMaxRows(applicationSettings.getMaxRows());
			}
			this.m_sacAnalyticsTable.setMemberSortIconsLevel(applicationSettings.getMemberSortIconsLevel());
		}
		this.m_sacAnalyticsTable.setStripeDataRows(tableDefinition.isEffectiveStripeDataRows());
		this.m_sacAnalyticsTable.setStripeDataColumns(tableDefinition.isEffectiveStripeDataColumns());
		this.m_sacAnalyticsTable.setFreezeHeaderRows(tableDefinition.isEffectiveFreezeHeaderRows());
		this.m_sacAnalyticsTable.setFreezeHeaderColumns(tableDefinition.isEffectiveFreezeHeaderColumns());
		this.m_sacAnalyticsTable.setFreezeUpToColumn(tableDefinition.getFreezeUpToColumn());
		this.m_sacAnalyticsTable.setFreezeUpToRow(tableDefinition.getFreezeUpToRow());
		this.m_sacAnalyticsTable.setShowFreezeLines(tableDefinition.isEffectiveShowFreezeLines());
		this.m_sacAnalyticsTable.setShowGrid(tableDefinition.isEffectiveShowGrid());
		this.m_sacAnalyticsTable.setHeaderCompactionType(tableDefinition.getEffectiveTableHeaderCompactionType());
		this.m_sacAnalyticsTable.setShowDimensionTitles(tableDefinition.isEffectiveShowDimensionTitles());
		this.m_sacAnalyticsTable.setTableMemberHeaderHandling(oFF.OlapVizToPivotConverterUtil.getTableMemberHeaderHandlingFromViz(tableDefinition.getEffectiveTableMemberHeaderHandling()));
		this.m_sacAnalyticsTable.setShowCoordinateHeader(tableDefinition.isEffectiveShowCoordinateHeader());
		this.m_sacAnalyticsTable.setHeaderColor(tableDefinition.getHeaderColor());
		this.m_sacAnalyticsTable.setTotalLevel6Color(tableDefinition.getTotalLevel6Color());
		this.m_sacAnalyticsTable.setTotalLevel5Color(tableDefinition.getTotalLevel5Color());
		this.m_sacAnalyticsTable.setTotalLevel4Color(tableDefinition.getTotalLevel4Color());
		this.m_sacAnalyticsTable.setTotalLevel3Color(tableDefinition.getTotalLevel3Color());
		this.m_sacAnalyticsTable.setTotalLevel2Color(tableDefinition.getTotalLevel2Color());
		this.m_sacAnalyticsTable.setTotalLevel1Color(tableDefinition.getTotalLevel1Color());
		this.m_sacAnalyticsTable.setTotalLevel0Color(tableDefinition.getTotalLevel0Color());
		this.m_sacAnalyticsTable.applyTableDefinition(tableDefinition);
		this.m_headerCompactionType = tableDefinition.getEffectiveTableHeaderCompactionType();
		this.m_showDimensionTitles = tableDefinition.isEffectiveShowDimensionTitles();
		this.synchronizeTable(this.m_table);
	}
};
oFF.PivotTableEngine.prototype.applyTableMarkups = function()
{
	if (this.getAvailableTableMarkups() !== null)
	{
		this.m_table.clearTableMarkups();
		let vizIterator = this.getAvailableTableMarkups().getIterator();
		while (vizIterator.hasNext())
		{
			oFF.OlapVizToPivotConverterUtil.applyTableMarkupFromViz(vizIterator.next(), this.m_table.addNewTableMarkup());
		}
	}
	if (this.getAvailableLayeredStyles() !== null)
	{
		this.m_table.clearLayeredRectangularStyles();
		let vizLIterator = this.getAvailableLayeredStyles().getIterator();
		while (vizLIterator.hasNext())
		{
			oFF.OlapVizToPivotConverterUtil.applyLayeredRectangularStyleFromViz(vizLIterator.next(), this.m_table.addNewLayeredRectangularStyle());
		}
	}
};
oFF.PivotTableEngine.prototype.applyTotalIndex = function(fragment, tuple)
{
	let vcoa = tuple.getAxisReference().getVisibleComponentsOnAxis();
	for (let j = vcoa.size() - 1; j > -1; j--)
	{
		let tupleValue = tuple.getValueForModelComponent(vcoa.get(j));
		let dimensionMemberType = oFF.isNull(tupleValue) ? null : tupleValue.getDimensionMemberType();
		if (dimensionMemberType === oFF.MemberType.RESULT || oFF.OlapComponentType.TOTALS === dimensionMemberType)
		{
			fragment.setTotalLevel(tupleValue.getFieldReference().getDimensionIndex());
			fragment.setTotalsContext(true);
			break;
		}
	}
};
oFF.PivotTableEngine.prototype.checkRowDiff = function(needs)
{
	if (oFF.TriStateBool.isExplicitBooleanValue(this.m_neededEmptyHeaderRows) && needs !== this.m_neededEmptyHeaderRows.getBoolean())
	{
		if (needs)
		{
			this.m_sacAnalyticsTable.setTotalRowDiff(this.m_sacAnalyticsTable.getTotalRowDiff() + 1);
		}
		else
		{
			this.m_sacAnalyticsTable.setTotalRowDiff(this.m_sacAnalyticsTable.getTotalRowDiff() - 1);
		}
	}
	this.m_neededEmptyHeaderRows = oFF.TriStateBool.lookup(needs);
};
oFF.PivotTableEngine.prototype.correctTileCarrier = function(tileCarrierBase)
{
	return oFF.RscGridTileCarrier.create(this.m_sacAnalyticsTable.isRowPaginated() ? tileCarrierBase.getRowMin() : this.getMin(tileCarrierBase.getRowMin(), this.m_table.getRowsBundle()), tileCarrierBase.getRowMax(), this.m_sacAnalyticsTable.isColumnPaginated() ? tileCarrierBase.getColumnMin() : this.getMin(tileCarrierBase.getColumnMin(), this.m_table.getColumnsBundle()), tileCarrierBase.getColumnMax());
};
oFF.PivotTableEngine.prototype.extractStructureMemberWithCellChart = function(columnTuple)
{
	let structureMember = null;
	if (oFF.notNull(columnTuple))
	{
		let values = columnTuple.getValues();
		for (let i = 0; i < values.size(); i++)
		{
			let value = values.get(i);
			let dimension = value.getFieldReference().getDimension();
			if (dimension.getDimensionType().isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) || dimension.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				structureMember = dimension.getStructureMemberByAliasOrMember(value.getDimensionMemberName());
				if (oFF.notNull(structureMember))
				{
					if (structureMember.isShowCellChart())
					{
						break;
					}
					else
					{
						structureMember = null;
					}
				}
			}
		}
	}
	return structureMember;
};
oFF.PivotTableEngine.prototype.fillCellChart = function(formattableElement, structureMemberWithCellChart)
{
	if (oFF.notNull(structureMemberWithCellChart) && structureMemberWithCellChart.isShowCellChart())
	{
		let cellChartType = structureMemberWithCellChart.getCellChartType();
		if (oFF.isNull(cellChartType) || cellChartType === oFF.CellChartType.NONE)
		{
			cellChartType = oFF.CellChartType.BAR;
		}
		let memberName = structureMemberWithCellChart.getAliasOrMemberName();
		formattableElement.setShowCellChart(true);
		formattableElement.setCellChartType(oFF.OlapVizToPivotConverterUtil.getCellChartTypeFromViz(cellChartType));
		formattableElement.setCellChartMemberName(memberName);
		formattableElement.getTableStyle().setCellChartLineColor(structureMemberWithCellChart.getCellChartLineColor());
		formattableElement.getTableStyle().setCellChartBarColor(structureMemberWithCellChart.getCellChartBarColor());
		formattableElement.setHideNumberForCellChart(structureMemberWithCellChart.isHideNumberForCellChart());
		formattableElement.setCellChartOrientation(oFF.OlapVizToPivotConverterUtil.getCellChartOrientationFromViz(structureMemberWithCellChart.getCellChartOrientationEffective()));
	}
};
oFF.PivotTableEngine.prototype.fillHeader = function(currentTableTile)
{
	let fieldReference;
	let columnComponents = this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis();
	let i;
	let field;
	let columnComponentsSize = columnComponents.size();
	let rowsBundle = currentTableTile.getRowsBundle();
	rowsBundle.clearHeaders();
	rowsBundle.clearHeaderGroupNames();
	let rowDimensions = this.m_gridContainer.getRowsAxis().getModelDimensionsOnAxis();
	oFF.XCollectionUtils.forEach(rowDimensions, (rd) => {
		rowsBundle.addHeaderGroupName(rd.getName());
	});
	let row = null;
	for (i = 0; i < columnComponentsSize; i++)
	{
		row = oFF.SacTableFragmentRow._create(rowsBundle);
		row.setHeader(true);
		fieldReference = columnComponents.get(i);
		field = fieldReference.getField();
		row.setComponentIndex(i);
		oFF.OlapVizToPivotConverterUtil.applyHeaderSectionInfoFromField(field, row);
		rowsBundle.addHeader(row);
	}
	if (this.needsEmptyHeaderRow())
	{
		row = oFF.SacTableFragmentRow._create(rowsBundle);
		row.setHeader(true);
		oFF.OlapVizToPivotConverterUtil.applyHeaderSectionInfoFromUniqueHeader(row);
		rowsBundle.addHeader(row);
	}
	if (oFF.notNull(row))
	{
		row.setHeaderBoundary(true);
	}
	let rowComponents = this.m_gridContainer.getRowsAxis().getVisibleComponentsOnAxis();
	let rowComponentsSize = rowComponents.size();
	let column = null;
	let columnsBundle = currentTableTile.getColumnsBundle();
	columnsBundle.clearHeaders();
	columnsBundle.clearHeaderGroupNames();
	let columnDimensions = this.m_gridContainer.getColumnsAxis().getModelDimensionsOnAxis();
	oFF.XCollectionUtils.forEach(columnDimensions, (cd) => {
		columnsBundle.addHeaderGroupName(cd.getName());
	});
	for (i = 0; i < rowComponentsSize; i++)
	{
		column = oFF.SacTableFragmentColumn._create(columnsBundle);
		column.setHeader(true);
		fieldReference = rowComponents.get(i);
		field = fieldReference.getField();
		column.setComponentIndex(i);
		oFF.OlapVizToPivotConverterUtil.applyHeaderSectionInfoFromField(field, column);
		columnsBundle.addHeader(column);
	}
	if (this.needsEmptyHeaderColumn())
	{
		column = oFF.SacTableFragmentColumn._create(columnsBundle);
		column.setHeader(true);
		oFF.OlapVizToPivotConverterUtil.applyHeaderSectionInfoFromUniqueHeader(column);
		columnsBundle.addHeader(column);
	}
	if (oFF.notNull(column))
	{
		column.setHeaderBoundary(true);
	}
};
oFF.PivotTableEngine.prototype.fillOrigin = function(tileCarrier)
{
	this.applyTableMarkups();
	this.m_table.clear();
	return this.fillTileInternal(tileCarrier, this.m_table);
};
oFF.PivotTableEngine.prototype.fillProjection = function(tileCarrier)
{
	let tileCarrierNew = this.correctTileCarrier(tileCarrier);
	let currentTableTile = this.projectTile(tileCarrierNew);
	this.transferTableMarkups(currentTableTile);
	currentTableTile.clear();
	return this.fillTileInternal(tileCarrierNew, currentTableTile);
};
oFF.PivotTableEngine.prototype.fillTile = function(tc, currentTableTile)
{
	let i;
	let row;
	let column;
	this.fillHeader(currentTableTile);
	let minTupleId = tc.getColumnMin();
	let maxTupleId = tc.getColumnMax();
	let columnsBundle = currentTableTile.getColumnsBundle();
	for (i = minTupleId; i <= maxTupleId; i++)
	{
		let columnTuple = this.m_gridContainer.getColumnTupleAt(i);
		if (oFF.notNull(columnTuple))
		{
			column = oFF.SacTableFragmentColumn._create(columnsBundle);
			column.setTupleIndex(i);
			oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromTuple(columnTuple, column);
			this.applyCellChart(column, columnTuple);
			this.applyTotalIndex(column, columnTuple);
			columnsBundle.addTuple(column);
		}
		else
		{
			columnsBundle.addEmptyTuple();
		}
	}
	minTupleId = tc.getRowMin();
	maxTupleId = tc.getRowMax();
	let rowsBundle = currentTableTile.getRowsBundle();
	for (i = minTupleId; i <= maxTupleId; i++)
	{
		let rowTuple = this.m_gridContainer.getRowTupleAt(i);
		if (oFF.notNull(rowTuple))
		{
			row = oFF.SacTableFragmentRow._create(rowsBundle);
			row.setTupleIndex(i);
			oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromTuple(rowTuple, row);
			this.applyCellChart(row, rowTuple);
			if (row.isShowCellChart() && row.getCellChartOrientation() === oFF.SacCellChartOrientation.VERTICAL)
			{
				row.setHeight(oFF.SacTableConstants.DF_R_N_HEIGHT_VERTICAL_CHARTS);
			}
			this.applyTotalIndex(row, rowTuple);
			rowsBundle.addTuple(row);
		}
		else
		{
			rowsBundle.addEmptyTuple();
		}
	}
};
oFF.PivotTableEngine.prototype.fillTileInternal = function(tileCarrierNew, currentTableTile)
{
	let columnDimensions = this.m_gridContainer.getColumnsAxis().getModelDimensionsOnAxis();
	let rowDimensions = this.m_gridContainer.getRowsAxis().getModelDimensionsOnAxis();
	let columnDimensionCount = columnDimensions.size();
	let rowDimensionCount = rowDimensions.size();
	let rowTuplesCountLocal = this.m_gridContainer.getRowsLoadedCount();
	let columnTuplesCount = this.m_gridContainer.getColumnsLoadedCount();
	let hasData = columnTuplesCount > 0 && columnDimensionCount > 0 || rowTuplesCountLocal > 0 && rowDimensionCount > 0;
	this.fillTile(tileCarrierNew, currentTableTile);
	currentTableTile.formatTable();
	if (this.m_table !== currentTableTile)
	{
		this.m_table.swallow(currentTableTile);
	}
	currentTableTile.applyColumnAndRowSizes(this.m_tableDefinition.getFixedPixelHeightsForRows(), this.m_tableDefinition.getFixedPixelWidthsForColumns());
	let columnsRanges = currentTableTile.getColumnsBundle().getTupleRanges();
	let rowsRanges = currentTableTile.getRowsBundle().getTupleRanges();
	let rowMin = 0;
	let colMin = 0;
	let rowMax = -1;
	let colMax = -1;
	if (oFF.XCollectionUtils.hasElements(columnsRanges))
	{
		colMin = columnsRanges.get(0).getFirstObject().getInteger();
		colMax = columnsRanges.get(columnsRanges.size() - 1).getSecondObject().getInteger();
	}
	if (oFF.XCollectionUtils.hasElements(rowsRanges))
	{
		rowMin = rowsRanges.get(0).getFirstObject().getInteger();
		rowMax = rowsRanges.get(rowsRanges.size() - 1).getSecondObject().getInteger();
	}
	this.m_sacAnalyticsTable.prepareTable(rowMin, rowMax, colMin, colMax);
	return hasData;
};
oFF.PivotTableEngine.prototype.getAvailableLayeredStyles = function()
{
	return oFF.isNull(this.m_tableDefinition) ? null : this.m_tableDefinition.getLayeredRectangularStyles();
};
oFF.PivotTableEngine.prototype.getAvailableTableMarkups = function()
{
	return oFF.isNull(this.m_tableDefinition) ? null : this.m_tableDefinition.getTableMarkups();
};
oFF.PivotTableEngine.prototype.getMin = function(min, bundle)
{
	return min + (min > 0 && (bundle.getTuples().size() < min || bundle.getTuples().get(min - 1) === null) ? 1 : 0);
};
oFF.PivotTableEngine.prototype.getResultTable = function()
{
	return this.m_sacAnalyticsTable;
};
oFF.PivotTableEngine.prototype.getTableProxy = function()
{
	return this.m_sacAnalyticsTable;
};
oFF.PivotTableEngine.prototype.isEffectivelyShownDimensionTitles = function()
{
	return this.m_showDimensionTitles || (this.m_gridContainer.getRowsAxis().getTuplesTotalCount() === 0 && this.m_gridContainer.getColumnsAxis().getTuplesTotalCount() === 0);
};
oFF.PivotTableEngine.prototype.isEmptyColumnDimensions = function()
{
	return this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis().size() === 0;
};
oFF.PivotTableEngine.prototype.isEmptyRowDimensions = function()
{
	let rowsAxis = this.m_gridContainer.getRowsAxis();
	return oFF.isNull(rowsAxis) || rowsAxis.getVisibleComponentsOnAxis().isEmpty();
};
oFF.PivotTableEngine.prototype.needsEmptyHeaderColumn = function()
{
	let emptyColumnDimensions = this.isEmptyColumnDimensions();
	return this.m_headerCompactionType === oFF.TableHeaderCompactionType.NONE || this.m_headerCompactionType === oFF.TableHeaderCompactionType.ROW || !emptyColumnDimensions && this.isEffectivelyShownDimensionTitles() && this.m_headerCompactionType === oFF.TableHeaderCompactionType.PREFERABLY_ROW || !emptyColumnDimensions && this.isEmptyRowDimensions() && this.isEffectivelyShownDimensionTitles();
};
oFF.PivotTableEngine.prototype.needsEmptyHeaderRow = function()
{
	let emptyRowDimensions = this.isEmptyRowDimensions();
	let needs = this.m_headerCompactionType === oFF.TableHeaderCompactionType.NONE || this.m_headerCompactionType === oFF.TableHeaderCompactionType.COLUMN || !emptyRowDimensions && this.isEffectivelyShownDimensionTitles() && this.m_headerCompactionType === oFF.TableHeaderCompactionType.PREFERABLY_COLUMN || !emptyRowDimensions && this.isEmptyColumnDimensions() && this.isEffectivelyShownDimensionTitles();
	this.checkRowDiff(needs);
	return needs;
};
oFF.PivotTableEngine.prototype.projectTile = function(tileCarrier)
{
	let rowDataStartIndex = this.m_table.getRowsBundle().projectMinDataIndexFromTuple(tileCarrier.getRowMin());
	let columnDataStartIndex = this.m_table.getColumnsBundle().projectMinDataIndexFromTuple(tileCarrier.getColumnMin());
	let result = oFF.SacFormattableTableFragment.create(this.m_sacAnalyticsTable, rowDataStartIndex, columnDataStartIndex, tileCarrier.getRowMin(), tileCarrier.getColumnMin());
	this.synchronizeTable(result);
	return result;
};
oFF.PivotTableEngine.prototype.reCreateHeaders = function()
{
	if (oFF.XObjectExt.isValidObject(this.m_gridContainer))
	{
		this.fillHeader(this.m_table);
		this.m_table.getColumnsBundle().updateHeaderStyles();
		this.m_table.getRowsBundle().updateHeaderStyles();
		this.m_table.applyColumnAndRowSizes(this.m_tableDefinition.getFixedPixelHeightsForRows(), this.m_tableDefinition.getFixedPixelWidthsForColumns());
	}
};
oFF.PivotTableEngine.prototype.reFillForFormatting = function()
{
	return oFF.XObjectExt.isValidObject(this.m_gridContainer) && this.fillTileInternal(oFF.RscGridTileCarrier.create(0, -1, 0, -1), this.m_table);
};
oFF.PivotTableEngine.prototype.releaseObject = function()
{
	this.m_tableDefinition = null;
	this.m_gridContainer = null;
	this.m_sacAnalyticsTable = oFF.XObjectExt.release(this.m_sacAnalyticsTable);
	this.m_table = oFF.XObjectExt.release(this.m_table);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.PivotTableEngine.prototype.synchronizeTable = function(table)
{
	table.setTableMemberHeaderHandling(this.m_sacAnalyticsTable.getTableMemberHeaderHandling());
	table.getRowsBundle().setMemberHeaderHandling(this.m_sacAnalyticsTable.getRowsMemberHeaderHandling());
	table.getColumnsBundle().setMemberHeaderHandling(this.m_sacAnalyticsTable.getColumnsMemberHeaderHandling());
};
oFF.PivotTableEngine.prototype.transferTableMarkups = function(currentTableTile)
{
	if (this.m_table.getTableMarkups() !== null)
	{
		currentTableTile.clearTableMarkups();
		currentTableTile.addTableMarkups(this.m_table.getTableMarkups());
	}
	if (this.m_table.getLayeredRectangularStyles() !== null)
	{
		currentTableTile.clearLayeredRectangularStyles();
		currentTableTile.addRectangularStyles(this.m_table.getLayeredRectangularStyles());
	}
};

oFF.PivotTableCellContextProvider = function() {};
oFF.PivotTableCellContextProvider.prototype = new oFF.XObject();
oFF.PivotTableCellContextProvider.prototype._ff_c = "PivotTableCellContextProvider";

oFF.PivotTableCellContextProvider.create = function(queryManager)
{
	let instance = new oFF.PivotTableCellContextProvider();
	instance.setup();
	instance.m_queryManager = queryManager;
	return instance;
};
oFF.PivotTableCellContextProvider.prototype.m_queryManager = null;
oFF.PivotTableCellContextProvider.prototype.getCellContext = function(syncType, listener, indexInfo)
{
	return oFF.CellContextGetAction.createAndRunAction(syncType, listener, this.m_queryManager, indexInfo);
};
oFF.PivotTableCellContextProvider.prototype.releaseObject = function()
{
	this.m_queryManager = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.PivotTableExport = function() {};
oFF.PivotTableExport.prototype = new oFF.XObject();
oFF.PivotTableExport.prototype._ff_c = "PivotTableExport";

oFF.PivotTableExport.addSemanticObjects = function(semanticObjects, semanticObject)
{
	if (oFF.notNull(semanticObject) && !semanticObjects.contains(oFF.PrFactory.createString(semanticObject)))
	{
		semanticObjects.addString(semanticObject);
	}
};
oFF.PivotTableExport.create = function(table, tableDefinition)
{
	let instance = new oFF.PivotTableExport();
	instance.m_table = table;
	instance.m_tableDefinition = tableDefinition;
	return instance;
};
oFF.PivotTableExport.getCellType = function(effectiveCellType)
{
	if (effectiveCellType === oFF.SacTableConstants.CT_VALUE)
	{
		return oFF.PivotTableExportConstants.CT_VALUE;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_INPUT)
	{
		return oFF.PivotTableExportConstants.CT_VALUE;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_UNBOOKED)
	{
		return oFF.PivotTableExportConstants.CT_VALUE;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_HEADER)
	{
		return oFF.PivotTableExportConstants.CT_HEADER;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_ROW_DIM_HEADER)
	{
		return oFF.PivotTableExportConstants.CT_DIM_HEADER_ROW;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_COL_DIM_HEADER)
	{
		return oFF.PivotTableExportConstants.CT_DIM_HEADER_COL;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_COL_DIM_MEMBER)
	{
		return oFF.PivotTableExportConstants.CT_DIM_MEMBER_COL;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_ROW_DIM_MEMBER)
	{
		return oFF.PivotTableExportConstants.CT_DIM_MEMBER_ROW;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_EMPTY_AXIS_ROW_HEADER)
	{
		return oFF.PivotTableExportConstants.CT_EMPTY_AXIS_HEADER_ROW;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_EMPTY_AXIS_COLUMN_HEADER)
	{
		return oFF.PivotTableExportConstants.CT_EMPTY_AXIS_HEADER_COL;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_ATTRIBUTE)
	{
		return oFF.PivotTableExportConstants.CT_ATTRIBUTE;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_ATTRIBUTE_ROW_DIM_HEADER)
	{
		return oFF.PivotTableExportConstants.CT_ATTRIBUTE_ROW_DIM_HEADER;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_ATTRIBUTE_COL_DIM_HEADER)
	{
		return oFF.PivotTableExportConstants.CT_ATTRIBUTE_COL_DIM_HEADER;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_ATTRIBUTE_ROW_DIM_MEMBER)
	{
		return oFF.PivotTableExportConstants.CT_ATTRIBUTE_ROW_DIM_MEMBER;
	}
	else if (effectiveCellType === oFF.SacTableConstants.CT_ATTRIBUTE_COL_DIM_MEMBER)
	{
		return oFF.PivotTableExportConstants.CT_ATTRIBUTE_COL_DIM_MEMBER;
	}
	else
	{
		return oFF.XInteger.convertToString(effectiveCellType);
	}
};
oFF.PivotTableExport.getDimensionMemberName = function(dimensionMember)
{
	let name = null;
	let dimension = dimensionMember.getDimension();
	if (dimension.isStructure())
	{
		let structureMember = dimension.getStructureMember(dimensionMember.getName());
		let displayKeyField = structureMember.getDimension().getDisplayKeyField();
		let fieldValue = structureMember.getFieldValue(displayKeyField);
		if (oFF.notNull(fieldValue))
		{
			name = fieldValue.getValue().getStringRepresentation();
		}
	}
	if (oFF.isNull(name))
	{
		name = dimensionMember.getName();
	}
	return name;
};
oFF.PivotTableExport.prototype.m_cellType = null;
oFF.PivotTableExport.prototype.m_currentCellBase = null;
oFF.PivotTableExport.prototype.m_currentCellJson = null;
oFF.PivotTableExport.prototype.m_currentColIndex = 0;
oFF.PivotTableExport.prototype.m_currentRowIndex = 0;
oFF.PivotTableExport.prototype.m_table = null;
oFF.PivotTableExport.prototype.m_tableDefinition = null;
oFF.PivotTableExport.prototype._export = function()
{
	let rowList = this.m_table.getRowList();
	let colList = this.m_table.getColumnList();
	let rows = rowList.size();
	let cols = colList.size();
	let endRow = rows - 1;
	let endCol = cols - 1;
	let grid = oFF.PrFactory.createStructure();
	grid.putInteger(oFF.PivotTableExportConstants.TOTAL_ROWS, this.m_table.getRowsTotalCount());
	grid.putInteger(oFF.PivotTableExportConstants.TOTAL_COLUMNS, this.m_table.getColumnsTotalCount());
	let headerRowList = this.m_table.getHeaderRowList();
	let cellsList = grid.putNewList("Cells");
	if (this.m_table.getColumnsTotalCount() !== 0 || this.m_table.getRowsTotalCount() !== 0)
	{
		let headerRowSize = headerRowList.size();
		let colEndIndex = oFF.XMath.min(colList.size(), endCol + 1);
		let rowEndIndex = oFF.XMath.min(rowList.size(), endRow + 1);
		let row;
		let effectiveIndex = 0;
		let index;
		for (index = 0; index < headerRowSize; index++)
		{
			row = headerRowList.get(index);
			if (oFF.notNull(row) && !row.isEffectivelyHidden())
			{
				this.renderRow(cellsList, row, effectiveIndex++, colEndIndex);
			}
			else if (oFF.isNull(row))
			{
				effectiveIndex++;
			}
		}
		for (index = 0; index < rowEndIndex; index++)
		{
			row = rowList.get(index);
			if (oFF.notNull(row) && !row.isEffectivelyHidden())
			{
				this.renderRow(cellsList, row, effectiveIndex++, colEndIndex);
			}
			else if (oFF.isNull(row))
			{
				effectiveIndex++;
			}
		}
	}
	return grid;
};
oFF.PivotTableExport.prototype.addSemanticObjectFromTupleElement = function(semanticObjects, tupleElement)
{
	if (oFF.notNull(tupleElement))
	{
		let dimension = this.m_tableDefinition.getQueryModel().getDimensionByName(tupleElement.getDimension().getName());
		let semanticObject = dimension.getSemanticObject();
		oFF.PivotTableExport.addSemanticObjects(semanticObjects, semanticObject);
		if (dimension.isStructure())
		{
			let dimensionMember = tupleElement.getDimensionMember();
			if (oFF.notNull(dimensionMember))
			{
				let structureMember = dimension.getStructureMember(dimensionMember.getName());
				semanticObject = structureMember.getSemanticObject();
				oFF.PivotTableExport.addSemanticObjects(semanticObjects, semanticObject);
			}
		}
	}
};
oFF.PivotTableExport.prototype.fillCellType = function()
{
	this.m_cellType = oFF.PivotTableExport.getCellType(this.m_currentCellBase.getEffectiveCellType());
	this.m_currentCellJson.putString(oFF.PivotTableExportConstants.CELL_TYPE, this.m_cellType);
};
oFF.PivotTableExport.prototype.fillDimension = function()
{
	if (oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_MEMBER_COL) || oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_HEADER_COL))
	{
		let columnDimension = this.m_tableDefinition.getColumnDimension(this.m_currentRowIndex);
		if (oFF.notNull(columnDimension))
		{
			this.m_currentCellJson.putString("Dimension", this.getDimensionName(columnDimension));
		}
	}
	if (oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_MEMBER_ROW) || oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_HEADER_ROW))
	{
		let rowDimension = this.m_tableDefinition.getRowDimension(this.m_currentColIndex);
		if (oFF.notNull(rowDimension))
		{
			this.m_currentCellJson.putString("Dimension", this.getDimensionName(rowDimension));
		}
	}
};
oFF.PivotTableExport.prototype.fillDocument = function()
{
	if (this.m_currentCellBase.getCommentDocumentId() !== null)
	{
		this.m_currentCellJson.putString(oFF.PivotTableExportConstants.DOCUMENT_ID, this.m_currentCellBase.getCommentDocumentId());
	}
};
oFF.PivotTableExport.prototype.fillFormattedValue = function()
{
	let styles = this.m_currentCellBase.getPrioritizedStylesList();
	this.m_currentCellJson.putString(oFF.PivotTableExportConstants.FORMATTED, this.m_currentCellBase.getEffectiveFormattedText(styles));
	let formattingPattern = this.m_currentCellBase.getEffectiveFormattingPattern(styles);
	if (!this.m_currentCellBase.isHeaderCell())
	{
		this.m_currentCellJson.putString(oFF.PivotTableExportConstants.FORMAT_STRING, formattingPattern);
	}
};
oFF.PivotTableExport.prototype.fillHierarchyInfo = function()
{
	let inHierarchy = this.m_currentCellBase.isInHierarchy();
	this.m_currentCellJson.putBoolean(oFF.PivotTableExportConstants.IN_HIERARCHY, inHierarchy);
	if (inHierarchy)
	{
		this.m_currentCellJson.putInteger(oFF.PivotTableExportConstants.HIERARCHY_LEVEL, this.m_currentCellBase.getHierarchyLevel());
		this.m_currentCellJson.putBoolean(oFF.PivotTableExportConstants.HIERARCHY_NODE_EXPANDED, this.m_currentCellBase.isExpanded());
	}
};
oFF.PivotTableExport.prototype.fillMember = function()
{
	let tupleElement = null;
	let dimension = null;
	if (oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_MEMBER_COL))
	{
		tupleElement = this.m_tableDefinition.getColumnTupleElement(this.m_currentColIndex, this.m_currentRowIndex);
		dimension = this.m_tableDefinition.getColumnDimension(this.m_currentRowIndex);
	}
	if (oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_MEMBER_ROW))
	{
		tupleElement = this.m_tableDefinition.getRowTupleElement(this.m_currentColIndex, this.m_currentRowIndex);
		dimension = this.m_tableDefinition.getRowDimension(this.m_currentColIndex);
	}
	if (oFF.notNull(tupleElement))
	{
		let dimensionMember = tupleElement.getDimensionMember();
		this.m_currentCellJson.putString("Member", oFF.PivotTableExport.getDimensionMemberName(dimensionMember));
		this.m_currentCellJson.putBoolean(oFF.PivotTableExportConstants.REPEATED_MEMBER_NAME, this.m_currentCellBase.isRepeatedHeader());
		if (dimension.isStructure())
		{
			let structureMember = this.m_tableDefinition.getQueryModel().getDimensionByName(dimension.getName()).getStructureMember(dimensionMember.getName());
			if (structureMember.getMemberType().isCustomMember())
			{
				this.m_currentCellJson.putBoolean("Custom", true);
			}
		}
	}
};
oFF.PivotTableExport.prototype.fillMergedCellInfo = function()
{
	let mergedColumns = this.m_currentCellBase.getMergedColumns();
	let mergedRows = this.m_currentCellBase.getMergedRows();
	if (mergedColumns !== 0 || mergedRows !== 0)
	{
		let mergerStructure = this.m_currentCellJson.putNewStructure(oFF.PivotTableExportConstants.MERGED);
		if (mergedColumns >= 0 && mergedRows >= 0)
		{
			if (this.m_currentCellBase.getMergedColumns() > 0)
			{
				mergerStructure.putInteger(oFF.PivotTableExportConstants.MERGED_COLUMNS, this.m_currentCellBase.getMergedColumns());
			}
			if (this.m_currentCellBase.getMergedRows() > 0)
			{
				mergerStructure.putInteger(oFF.PivotTableExportConstants.MERGED_ROWS, this.m_currentCellBase.getMergedRows());
			}
		}
		else
		{
			mergerStructure.putInteger(oFF.PivotTableExportConstants.ORIGINAL_COLUMN, this.m_currentColIndex + this.m_currentCellBase.getMergedColumns());
			mergerStructure.putInteger(oFF.PivotTableExportConstants.ORIGINAL_ROW, this.m_currentRowIndex + this.m_currentCellBase.getMergedRows());
		}
	}
};
oFF.PivotTableExport.prototype.fillPlainValue = function()
{
	let plainValue = this.m_currentCellBase.getPlain();
	if (oFF.notNull(plainValue))
	{
		let valueType = plainValue.getValueType();
		this.m_currentCellJson.putString(oFF.PivotTableExportConstants.CELL_DATA_TYPE, valueType.getName());
		if (!this.m_currentCellBase.isHeaderCell())
		{
			if (valueType === oFF.XValueType.BOOLEAN)
			{
				this.m_currentCellJson.putBoolean(oFF.PivotTableExportConstants.CELL_PLAIN, oFF.XValueUtil.getBoolean(plainValue, false, true));
			}
			else if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT && plainValue.mayLoosePrecision())
			{
				this.m_currentCellJson.putDouble(oFF.PivotTableExportConstants.CELL_PLAIN, oFF.XValueUtil.getDouble(plainValue, false, true));
			}
			else if (valueType === oFF.XValueType.LONG)
			{
				this.m_currentCellJson.putLong(oFF.PivotTableExportConstants.CELL_PLAIN, oFF.XValueUtil.getLong(plainValue, false, true));
			}
			else if (valueType === oFF.XValueType.INTEGER)
			{
				this.m_currentCellJson.putInteger(oFF.PivotTableExportConstants.CELL_PLAIN, oFF.XValueUtil.getInteger(plainValue, false, true));
			}
			else
			{
				this.m_currentCellJson.putString(oFF.PivotTableExportConstants.CELL_PLAIN, plainValue.getStringRepresentation());
			}
		}
	}
	let unit = this.m_currentCellBase.getUnitInformation();
	if (oFF.notNull(unit))
	{
		let unitStr = oFF.XStringUtils.isNotNullAndNotEmpty(unit.getFirstString()) ? unit.getFirstString() : unit.getSecondString();
		this.m_currentCellJson.putString("Unit", unitStr);
	}
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_currentCellBase.getScalingText()))
	{
		this.m_currentCellJson.putString("Scaling", this.m_currentCellBase.getScalingText());
	}
};
oFF.PivotTableExport.prototype.fillSemanticObjects = function()
{
	let isDataCell = oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_VALUE);
	let semanticObjects = oFF.PrFactory.createList();
	this.addSemanticObjectFromTupleElement(semanticObjects, this.m_tableDefinition.getColumnTupleElement(this.m_currentColIndex, this.m_currentRowIndex));
	this.addSemanticObjectFromTupleElement(semanticObjects, this.m_tableDefinition.getRowTupleElement(this.m_currentColIndex, this.m_currentRowIndex));
	if (isDataCell)
	{
		let tuple = this.m_tableDefinition.getColumnTuple(this.m_currentColIndex);
		if (oFF.notNull(tuple))
		{
			for (let i = 0; i < tuple.size(); i++)
			{
				this.addSemanticObjectFromTupleElement(semanticObjects, tuple.getTupleElementAt(i));
			}
		}
		tuple = this.m_tableDefinition.getRowTuple(this.m_currentRowIndex);
		if (oFF.notNull(tuple))
		{
			for (let i = 0; i < tuple.size(); i++)
			{
				this.addSemanticObjectFromTupleElement(semanticObjects, tuple.getTupleElementAt(i));
			}
		}
	}
	let dataCellRef = this.m_currentCellBase.getDataCellRef();
	if (oFF.notNull(dataCellRef))
	{
		let queryDataCell = this.m_tableDefinition.getQueryModel().getQueryDataCell(dataCellRef);
		if (oFF.notNull(queryDataCell) && queryDataCell.getSemanticObject() !== null)
		{
			oFF.PivotTableExport.addSemanticObjects(semanticObjects, queryDataCell.getSemanticObject());
		}
	}
	if (semanticObjects.hasElements())
	{
		this.m_currentCellJson.put("SemanticObjects", semanticObjects);
	}
};
oFF.PivotTableExport.prototype.fillTotals = function()
{
	if (this.m_currentCellBase.isEffectiveTotalsContext())
	{
		this.m_currentCellJson.putBoolean(oFF.PivotTableExportConstants.TOTALS, true);
	}
};
oFF.PivotTableExport.prototype.fillTupleIndex = function()
{
	if (oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_MEMBER_COL) || oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_VALUE))
	{
		let parentColumn = this.m_currentCellBase.getParentColumn();
		let colTupleIndex = parentColumn.getTupleIndex();
		this.m_currentCellJson.putInteger("TupleIndexCol", colTupleIndex);
	}
	if (oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_DIM_MEMBER_ROW) || oFF.XString.isEqual(this.m_cellType, oFF.PivotTableExportConstants.CT_VALUE))
	{
		let parentRow = this.m_currentCellBase.getParentRow();
		let rowTupleIndex = parentRow.getTupleIndex();
		this.m_currentCellJson.putInteger("TupleIndexRow", rowTupleIndex);
	}
};
oFF.PivotTableExport.prototype.fillValueException = function()
{
	if (this.m_currentCellBase.getValueException() !== null)
	{
		this.m_currentCellJson.putString(oFF.PivotTableExportConstants.VAL_EXPT, this.m_currentCellBase.getValueException().getName());
	}
};
oFF.PivotTableExport.prototype.getDimensionName = function(dimension)
{
	let mdDimension = this.m_tableDefinition.getQueryModel().getDimensionByName(dimension.getName());
	if (mdDimension.isMeasureStructure())
	{
		return "MeasureStructure";
	}
	if (mdDimension.isStructure())
	{
		return "NonMeasureStructure";
	}
	return mdDimension.getExternalName() !== null ? mdDimension.getExternalName() : dimension.getName();
};
oFF.PivotTableExport.prototype.renderCell = function(cellList, cellBase, rowIndex, colIndex)
{
	this.m_currentCellBase = cellBase;
	this.m_currentRowIndex = rowIndex;
	this.m_currentColIndex = colIndex;
	this.m_currentCellJson = cellList.addNewStructure();
	this.m_currentCellJson.putInteger(oFF.PivotTableExportConstants.ROW, this.m_currentRowIndex);
	this.m_currentCellJson.putInteger(oFF.PivotTableExportConstants.COLUMN, this.m_currentColIndex);
	this.fillMergedCellInfo();
	this.fillCellType();
	this.fillFormattedValue();
	this.fillPlainValue();
	this.fillTupleIndex();
	this.fillDimension();
	this.fillMember();
	this.fillDocument();
	this.fillTotals();
	this.fillHierarchyInfo();
	this.fillSemanticObjects();
	this.fillValueException();
};
oFF.PivotTableExport.prototype.renderRow = function(cellList, row, rowIndex, colEndIndex)
{
	let effectiveIndex = 0;
	let preColumnsAmount = this.m_table.getPreColumnsAmount();
	for (let i = 0; i < preColumnsAmount + colEndIndex; i++)
	{
		let cell = row.getCells().get(i);
		if (oFF.notNull(cell) && cell.getParentColumn() !== null && !cell.getParentColumn().isEffectivelyHidden())
		{
			this.renderCell(cellList, cell, rowIndex, effectiveIndex++);
		}
		else if (oFF.isNull(cell))
		{
			effectiveIndex++;
		}
	}
};

oFF.PivotTableExportConstants = {

	CELL_DATA_TYPE:"Type",
	CELL_PLAIN:"PlainValue",
	CELL_TYPE:"CellType",
	COLUMN:"Column",
	CT_ATTRIBUTE:"Attribute",
	CT_ATTRIBUTE_COL_DIM_HEADER:"DimAttrHeaderCol",
	CT_ATTRIBUTE_COL_DIM_MEMBER:"DimAttrMemberCol",
	CT_ATTRIBUTE_ROW_DIM_HEADER:"DimAttrHeaderRow",
	CT_ATTRIBUTE_ROW_DIM_MEMBER:"DimAttrMemberRow",
	CT_DIM_HEADER_COL:"DimHeaderCol",
	CT_DIM_HEADER_ROW:"DimHeaderRow",
	CT_DIM_MEMBER_COL:"DimMemberCol",
	CT_DIM_MEMBER_ROW:"DimMemberRow",
	CT_EMPTY_AXIS_HEADER_COL:"EmptyAxisHeaderCol",
	CT_EMPTY_AXIS_HEADER_ROW:"EmptyAxisHeaderRow",
	CT_HEADER:"Header",
	CT_VALUE:"Value",
	DOCUMENT_ID:"DocumentId",
	FORMATTED:"Value",
	FORMAT_STRING:"FormatString",
	HIERARCHY_LEVEL:"HierarchyLevel",
	HIERARCHY_NODE_EXPANDED:"HierarchyNodeExpanded",
	IN_HIERARCHY:"InHierarchy",
	MERGED:"Merged",
	MERGED_COLUMNS:"MergedColumns",
	MERGED_ROWS:"MergedRows",
	ORIGINAL_COLUMN:"OriginalColumn",
	ORIGINAL_ROW:"OriginalRow",
	REPEATED_MEMBER_NAME:"RepeatedMemberName",
	ROW:"Row",
	TOTALS:"Totals",
	TOTAL_COLUMNS:"TotalColumns",
	TOTAL_ROWS:"TotalRows",
	VAL_EXPT:"ValueException"
};

oFF.QFilterCartesianListTransformer = function() {};
oFF.QFilterCartesianListTransformer.prototype = new oFF.XObject();
oFF.QFilterCartesianListTransformer.prototype._ff_c = "QFilterCartesianListTransformer";

oFF.QFilterCartesianListTransformer.create = function(filterCartesianList)
{
	let transformer = new oFF.QFilterCartesianListTransformer();
	transformer.setup();
	transformer.m_cartesianList = filterCartesianList;
	return transformer;
};
oFF.QFilterCartesianListTransformer.prototype.m_cartesianList = null;
oFF.QFilterCartesianListTransformer.prototype.addComponents = function(filterInfo, members, partName)
{
	if (oFF.XCollectionUtils.hasElements(members))
	{
		let lowExternalComponents = filterInfo.putNewList(partName);
		oFF.XCollectionUtils.forEach(members, (member) => {
			let field = member.getField();
			if (oFF.notNull(field))
			{
				let dimension = field.getDimension();
				let memberInfo = lowExternalComponents.addNewStructure();
				let dimName = dimension.getExternalName();
				if (oFF.XStringUtils.isNullOrEmpty(dimName))
				{
					dimName = dimension.getName();
				}
				memberInfo.putString("Dimension", dimName);
				memberInfo.putString("Member", member.getValueAsString());
			}
		});
	}
};
oFF.QFilterCartesianListTransformer.prototype.computeFilterValueText = function(filterElement, isExcluding)
{
	let textLow = this.getFilterElementValueText(filterElement, filterElement.getLow());
	let textHigh = this.getFilterElementValueText(filterElement, filterElement.getHigh());
	let text = oFF.notNull(textHigh) ? oFF.XStringUtils.concatenate3(textLow, " - ", textHigh) : textLow;
	if (isExcluding)
	{
		text = oFF.XStringUtils.concatenate3("!( ", text, " )");
	}
	return text;
};
oFF.QFilterCartesianListTransformer.prototype.convertMemberFilterList = function()
{
	let filterList = oFF.PrList.create();
	if (oFF.notNull(this.m_cartesianList))
	{
		for (let j = 0; j < this.m_cartesianList.size(); j++)
		{
			let filterElement = this.m_cartesianList.getCartesianElement(j);
			if (oFF.notNull(filterElement))
			{
				let lowFilterValue = filterElement.getLow();
				let highFilterValue = filterElement.getHigh();
				let isExcluding = filterElement.getSetSign() === oFF.SetSign.EXCLUDING;
				let filterInfo = filterList.addNewStructure();
				filterInfo.putString("Low", lowFilterValue.getString());
				this.addComponents(filterInfo, lowFilterValue.getExternalKeyMembers(), "LowExternal");
				this.addComponents(filterInfo, lowFilterValue.getInternalKeyMembers(), "LowIntenal");
				if (highFilterValue.getString() !== null)
				{
					filterInfo.putString("High", highFilterValue.getString());
					this.addComponents(filterInfo, highFilterValue.getExternalKeyMembers(), "HighExternal");
					this.addComponents(filterInfo, highFilterValue.getInternalKeyMembers(), "HighInternal");
				}
				filterInfo.putString("ComparisonOperator", filterElement.getComparisonOperator().getName());
				filterInfo.putString("Text", this.computeFilterValueText(filterElement, isExcluding));
				filterInfo.putBoolean("IsExcluding", isExcluding);
				filterInfo.put("Hierarchy", this.getHierarchyInfo(filterElement));
			}
		}
	}
	return filterList;
};
oFF.QFilterCartesianListTransformer.prototype.getFilterElementValueText = function(filterElement, filterValueBag)
{
	let filterText = filterValueBag.getString();
	let dimension = filterElement.getDimension();
	let textField = dimension.getTextField();
	if (oFF.notNull(textField))
	{
		let supplementValue = filterValueBag.getSupplementValueString(textField.getName());
		if (oFF.XStringUtils.isNotNullAndNotEmpty(supplementValue))
		{
			filterText = supplementValue;
		}
	}
	return filterText;
};
oFF.QFilterCartesianListTransformer.prototype.getHierarchyInfo = function(filterElement)
{
	let hierarchyInfo = oFF.PrStructure.create();
	let hierarchyName = filterElement.getHierarchyName();
	if (oFF.notNull(hierarchyName))
	{
		hierarchyInfo.putString("name", hierarchyName);
		hierarchyInfo.putString("version", filterElement.getHierarchyVersion());
		hierarchyInfo.putString("dueDate", filterElement.getHierarchyDueDate().getStringRepresentation());
		hierarchyInfo.putInteger("levelOffset", filterElement.getLevelOffset());
		hierarchyInfo.putInteger("depth", filterElement.getDepth());
	}
	return hierarchyInfo;
};
oFF.QFilterCartesianListTransformer.prototype.releaseObject = function()
{
	this.m_cartesianList = null;
	oFF.XObject.prototype.releaseObject.call( this );
};

oFF.DataCellNumberFormatterSettings = function() {};
oFF.DataCellNumberFormatterSettings.prototype = new oFF.XObject();
oFF.DataCellNumberFormatterSettings.prototype._ff_c = "DataCellNumberFormatterSettings";

oFF.DataCellNumberFormatterSettings.create = function(cell)
{
	let settings = new oFF.DataCellNumberFormatterSettings();
	let format = cell.getFormatString();
	settings.setDecimalGroupingSeparatorFromFormat(format);
	settings.setDecimalSeparatorFromFormat(format);
	settings.setScaleFactor(cell);
	settings.setMaxDigitsRightAndPadding(cell);
	settings.setCurrencyFormatSettings(cell.getCurrencyUnit());
	return settings;
};
oFF.DataCellNumberFormatterSettings.prototype.m_currencySettings = null;
oFF.DataCellNumberFormatterSettings.prototype.m_decimalGroupingSeparator = null;
oFF.DataCellNumberFormatterSettings.prototype.m_decimalSeparator = null;
oFF.DataCellNumberFormatterSettings.prototype.m_maxDigitsRight = -1;
oFF.DataCellNumberFormatterSettings.prototype.m_rightPad = -1;
oFF.DataCellNumberFormatterSettings.prototype.m_scaleFactor = null;
oFF.DataCellNumberFormatterSettings.prototype.getCurrencyFormatSettings = function()
{
	return this.m_currencySettings;
};
oFF.DataCellNumberFormatterSettings.prototype.getDecimalGroupingSeparator = function()
{
	return this.m_decimalGroupingSeparator;
};
oFF.DataCellNumberFormatterSettings.prototype.getDecimalSeparator = function()
{
	return this.m_decimalSeparator;
};
oFF.DataCellNumberFormatterSettings.prototype.getFirstCharacterAfter = function(source, search)
{
	if (oFF.isNull(source) || oFF.isNull(search))
	{
		return null;
	}
	let index = oFF.XString.indexOf(source, search);
	if (index < 0 || index === oFF.XString.size(source) - 1)
	{
		return null;
	}
	return oFF.XString.substring(source, index + 1, index + 2);
};
oFF.DataCellNumberFormatterSettings.prototype.getMaxDigitsRight = function()
{
	return this.m_maxDigitsRight;
};
oFF.DataCellNumberFormatterSettings.prototype.getRightPad = function()
{
	return this.m_rightPad;
};
oFF.DataCellNumberFormatterSettings.prototype.getScaleFactor = function()
{
	return this.m_scaleFactor;
};
oFF.DataCellNumberFormatterSettings.prototype.getScaleFormat = function()
{
	return null;
};
oFF.DataCellNumberFormatterSettings.prototype.getSignPresentation = function()
{
	return null;
};
oFF.DataCellNumberFormatterSettings.prototype.isShowMixedUnitValues = function()
{
	return false;
};
oFF.DataCellNumberFormatterSettings.prototype.isSupportedDecimalGroupingSeparator = function(separator)
{
	return oFF.XString.isEqual(",", separator) || oFF.XString.isEqual(".", separator) || oFF.XString.isEqual(" ", separator);
};
oFF.DataCellNumberFormatterSettings.prototype.isSupportedDecimalSeparator = function(separator)
{
	return oFF.XString.isEqual(",", separator) || oFF.XString.isEqual(".", separator);
};
oFF.DataCellNumberFormatterSettings.prototype.setCurrencyFormatSettings = function(currencyUnit)
{
	let settings = null;
	if (currencyUnit.hasPrefix())
	{
		settings = oFF.XCurrencyFormatSettings.create();
		settings.setCurrencyPresentationPosition(0);
		settings.setValuePosition(1);
		settings.setScaleTextPosition(2);
		settings.setCurrencyPresentationHasSpace(true);
		settings.setScaleTextHasSpace(true);
	}
	else
	{
		settings = oFF.XCurrencyFormatSettings.create();
		settings.setCurrencyPresentationPosition(2);
		settings.setValuePosition(0);
		settings.setScaleTextPosition(1);
		settings.setCurrencyPresentationHasSpace(true);
		settings.setScaleTextHasSpace(true);
	}
	this.m_currencySettings = settings;
};
oFF.DataCellNumberFormatterSettings.prototype.setDecimalGroupingSeparatorFromFormat = function(format)
{
	let decimalGroupingSeparator = this.getFirstCharacterAfter(format, "#");
	if (oFF.isNull(decimalGroupingSeparator) && !oFF.XString.containsString(format, "#"))
	{
		this.m_decimalGroupingSeparator = " ";
	}
	else if (this.isSupportedDecimalGroupingSeparator(decimalGroupingSeparator))
	{
		this.m_decimalGroupingSeparator = decimalGroupingSeparator;
	}
};
oFF.DataCellNumberFormatterSettings.prototype.setDecimalSeparatorFromFormat = function(format)
{
	let decimalSeparator = this.getFirstCharacterAfter(format, "0");
	if (this.isSupportedDecimalSeparator(decimalSeparator))
	{
		this.m_decimalSeparator = decimalSeparator;
	}
};
oFF.DataCellNumberFormatterSettings.prototype.setMaxDigitsRightAndPadding = function(dataCell)
{
	let decimalPlaces = dataCell.getDecimalPlaces();
	if (decimalPlaces >= 0)
	{
		this.m_maxDigitsRight = decimalPlaces;
		this.m_rightPad = decimalPlaces;
	}
};
oFF.DataCellNumberFormatterSettings.prototype.setScaleFactor = function(dataCell)
{
	this.m_scaleFactor = oFF.XIntegerValue.create(-dataCell.getScalingFactor());
};

oFF.QStructureMemberFormatterSettings = function() {};
oFF.QStructureMemberFormatterSettings.prototype = new oFF.XObject();
oFF.QStructureMemberFormatterSettings.prototype._ff_c = "QStructureMemberFormatterSettings";

oFF.QStructureMemberFormatterSettings.create = function(structureMembers, queryModel)
{
	let settings = new oFF.QStructureMemberFormatterSettings();
	let structureMember1 = oFF.XCollectionUtils.hasElements(structureMembers) ? structureMembers.get(0) : null;
	let structureMember2 = oFF.XCollectionUtils.hasElements(structureMembers) && structureMembers.size() > 1 ? structureMembers.get(1) : null;
	let queryDataCell = settings.getDataCell(structureMember1, structureMember2, queryModel);
	settings.setScaleFactor(structureMember1, structureMember2, queryDataCell);
	settings.setMaxDigitsRightAndPadding(structureMember1, structureMember2, queryDataCell);
	settings.setScaleFormat(structureMember1, structureMember2, queryDataCell);
	settings.setSignPresentation(structureMember1, structureMember2, queryDataCell);
	settings.setCurrencyPresentation(structureMember1, structureMember2, queryDataCell);
	settings.setShowMixedUnitValues(structureMember1, structureMember2, queryDataCell);
	return settings;
};
oFF.QStructureMemberFormatterSettings.findBySolveOrder = function(firstStructureMember, otherStructureMember, queryStructureFn)
{
	let first = firstStructureMember;
	let second = otherStructureMember;
	if (oFF.notNull(firstStructureMember) && oFF.notNull(otherStructureMember))
	{
		let queryModel = firstStructureMember.getQueryModel();
		let firstSolveOrder = firstStructureMember.getSolveOrder();
		let otherSolveOrder = otherStructureMember.getSolveOrder();
		if (firstSolveOrder < otherSolveOrder)
		{
			first = otherStructureMember;
			second = firstStructureMember;
		}
		else if (firstSolveOrder === otherSolveOrder)
		{
			if (queryModel.isLeadingStructureAccount() && firstStructureMember.getDimension().isMeasureStructure())
			{
				first = otherStructureMember;
				second = firstStructureMember;
			}
			else if (!queryModel.isLeadingStructureAccount() && otherStructureMember.getDimension().isMeasureStructure())
			{
				first = otherStructureMember;
				second = firstStructureMember;
			}
		}
	}
	let result = null;
	if (oFF.notNull(first))
	{
		result = queryStructureFn(first);
	}
	if (oFF.isNull(result) && oFF.notNull(second))
	{
		result = queryStructureFn(second);
	}
	return oFF.XOptional.ofNullable(result);
};
oFF.QStructureMemberFormatterSettings.getLeadingScalingPower = function(rowStructureMember, columnStructureMember)
{
	return oFF.QStructureMemberFormatterSettings.findBySolveOrder(rowStructureMember, columnStructureMember, (queryStructure) => {
		return queryStructure.getNumericShift();
	});
};
oFF.QStructureMemberFormatterSettings.prototype.m_currencyFormatSettings = null;
oFF.QStructureMemberFormatterSettings.prototype.m_maxDigitsRight = -1;
oFF.QStructureMemberFormatterSettings.prototype.m_presentMixedUnitValues = false;
oFF.QStructureMemberFormatterSettings.prototype.m_rightPad = -1;
oFF.QStructureMemberFormatterSettings.prototype.m_scaleFactor = null;
oFF.QStructureMemberFormatterSettings.prototype.m_scaleFormat = null;
oFF.QStructureMemberFormatterSettings.prototype.m_signPresentation = null;
oFF.QStructureMemberFormatterSettings.prototype.getCurrencyFormatSettings = function()
{
	return this.m_currencyFormatSettings;
};
oFF.QStructureMemberFormatterSettings.prototype.getDataCell = function(rowStructureMember, columnStructureMember, queryModel)
{
	let result = oFF.XOptional.empty();
	let queryDataCells = queryModel.getQueryDataCells();
	if (oFF.XCollectionUtils.hasElements(queryDataCells))
	{
		result = oFF.XStream.of(queryDataCells).filter((i) => {
			return (oFF.isNull(rowStructureMember) || i.hasMemberReference(rowStructureMember)) && (oFF.isNull(columnStructureMember) || i.hasMemberReference(columnStructureMember));
		}).findAny();
	}
	return result;
};
oFF.QStructureMemberFormatterSettings.prototype.getDecimalGroupingSeparator = function()
{
	return null;
};
oFF.QStructureMemberFormatterSettings.prototype.getDecimalSeparator = function()
{
	return null;
};
oFF.QStructureMemberFormatterSettings.prototype.getLeadingCurrencyPresentation = function(rowStructureMember, columnStructureMember)
{
	return oFF.QStructureMemberFormatterSettings.findBySolveOrder(rowStructureMember, columnStructureMember, (queryStructure) => {
		return queryStructure.getCurrencyPresentation();
	});
};
oFF.QStructureMemberFormatterSettings.prototype.getLeadingDecimalPlaces = function(rowStructureMember, columnStructureMember)
{
	return oFF.QStructureMemberFormatterSettings.findBySolveOrder(rowStructureMember, columnStructureMember, (queryStructure) => {
		return queryStructure.getNumericScale();
	});
};
oFF.QStructureMemberFormatterSettings.prototype.getLeadingScaleFormat = function(rowStructureMember, columnStructureMember)
{
	return oFF.QStructureMemberFormatterSettings.findBySolveOrder(rowStructureMember, columnStructureMember, (queryStructure) => {
		return queryStructure.getScaleFormat();
	});
};
oFF.QStructureMemberFormatterSettings.prototype.getLeadingSignPresentation = function(rowStructureMember, columnStructureMember)
{
	return oFF.QStructureMemberFormatterSettings.findBySolveOrder(rowStructureMember, columnStructureMember, (queryStructure) => {
		return queryStructure.getSignPresentation();
	});
};
oFF.QStructureMemberFormatterSettings.prototype.getMaxDigitsRight = function()
{
	return this.m_maxDigitsRight;
};
oFF.QStructureMemberFormatterSettings.prototype.getRightPad = function()
{
	return this.m_rightPad;
};
oFF.QStructureMemberFormatterSettings.prototype.getScaleFactor = function()
{
	return this.m_scaleFactor;
};
oFF.QStructureMemberFormatterSettings.prototype.getScaleFormat = function()
{
	return this.m_scaleFormat;
};
oFF.QStructureMemberFormatterSettings.prototype.getSignPresentation = function()
{
	return this.m_signPresentation;
};
oFF.QStructureMemberFormatterSettings.prototype.isLeadingShowMixedUnitValues = function(rowStructureMember, columnStructureMember)
{
	return oFF.QStructureMemberFormatterSettings.findBySolveOrder(rowStructureMember, columnStructureMember, (queryStructure) => {
		return oFF.XBooleanValue.create(queryStructure.isMixedUnitsCurrenciesEnabled());
	});
};
oFF.QStructureMemberFormatterSettings.prototype.isShowMixedUnitValues = function()
{
	return this.m_presentMixedUnitValues;
};
oFF.QStructureMemberFormatterSettings.prototype.setCurrencyPresentation = function(rowStructureMember, columnStructureMember, queryDataCell)
{
	this.m_currencyFormatSettings = oFF.XCurrencyFormatSettings.create();
	if (queryDataCell.isPresent())
	{
		this.m_currencyFormatSettings.setCurrencyPresentation(queryDataCell.get().getCurrencyPresentation());
	}
	else
	{
		this.m_currencyFormatSettings.setCurrencyPresentation(this.getLeadingCurrencyPresentation(rowStructureMember, columnStructureMember).orElse(null));
	}
};
oFF.QStructureMemberFormatterSettings.prototype.setMaxDigitsRightAndPadding = function(rowStructureMember, columnStructureMember, queryDataCell)
{
	let decimalPlaces;
	if (queryDataCell.isPresent())
	{
		let qdc = queryDataCell.get();
		decimalPlaces = !qdc.getModelCapabilities().supportsQueryDataCellModelDefaults() && qdc.isDecimalPlacesDefault() ? -1 : qdc.getDecimalPlaces();
	}
	else
	{
		let leadingDecimalPlaces = this.getLeadingDecimalPlaces(rowStructureMember, columnStructureMember);
		decimalPlaces = leadingDecimalPlaces.isPresent() ? leadingDecimalPlaces.get().getInteger() : -1;
	}
	if (decimalPlaces >= 0)
	{
		this.m_maxDigitsRight = decimalPlaces;
		this.m_rightPad = decimalPlaces;
	}
};
oFF.QStructureMemberFormatterSettings.prototype.setScaleFactor = function(rowStructureMember, columnStructureMember, queryDataCell)
{
	if (queryDataCell.isPresent())
	{
		let qdc = queryDataCell.get();
		if (!qdc.isScalingFactorDefault())
		{
			let queryScaleFactor = qdc.getScalingFactor();
			this.m_scaleFactor = oFF.XIntegerValue.create(queryScaleFactor);
		}
	}
	else
	{
		oFF.QStructureMemberFormatterSettings.getLeadingScalingPower(rowStructureMember, columnStructureMember).ifPresent((scale) => {
			this.m_scaleFactor = oFF.XIntegerValue.create(-scale.getInteger());
		});
	}
};
oFF.QStructureMemberFormatterSettings.prototype.setScaleFormat = function(rowStructureMember, columnStructureMember, queryDataCell)
{
	if (queryDataCell.isPresent())
	{
		this.m_scaleFormat = queryDataCell.get().getScaleFormat();
	}
	else
	{
		this.m_scaleFormat = this.getLeadingScaleFormat(rowStructureMember, columnStructureMember).orElse(null);
	}
};
oFF.QStructureMemberFormatterSettings.prototype.setShowMixedUnitValues = function(rowStructureMember, columnStructureMember, queryDataCell)
{
	if (queryDataCell.isPresent())
	{
		this.m_presentMixedUnitValues = queryDataCell.get().isMixedUnitsCurrenciesEnabled();
	}
	else
	{
		this.m_presentMixedUnitValues = oFF.XBooleanValue.getBooleanExt(this.isLeadingShowMixedUnitValues(rowStructureMember, columnStructureMember).orElse(oFF.XBooleanValue.create(false)), false);
	}
};
oFF.QStructureMemberFormatterSettings.prototype.setSignPresentation = function(rowStructureMember, columnStructureMember, queryDataCell)
{
	if (queryDataCell.isPresent())
	{
		this.m_signPresentation = queryDataCell.get().getSignPresentation();
	}
	else
	{
		this.m_signPresentation = this.getLeadingSignPresentation(rowStructureMember, columnStructureMember).orElse(null);
	}
};

oFF.PivotActionResolver = function() {};
oFF.PivotActionResolver.prototype = new oFF.XObject();
oFF.PivotActionResolver.prototype._ff_c = "PivotActionResolver";

oFF.PivotActionResolver.create = function(gridContainer)
{
	let instance = new oFF.PivotActionResolver();
	instance.m_gridContainer = gridContainer;
	return instance;
};
oFF.PivotActionResolver.prototype.m_gridContainer = null;
oFF.PivotActionResolver.prototype.canResolveSimple = function(quickAction, rowTupleLevel, columnTupleLevel)
{
	let coordinates = this.getSimpleGridCoordinates(quickAction);
	let columnLevel = coordinates.getColumnCoordinate();
	let rowLevel = coordinates.getRowCoordinate();
	let result = false;
	if (rowTupleLevel === -1 && columnTupleLevel === -1 && columnLevel > -1 && rowLevel > -1)
	{
		result = true;
	}
	else if (rowTupleLevel === rowLevel && columnLevel === -1 && columnTupleLevel === -1)
	{
		result = true;
	}
	else if (columnLevel === columnTupleLevel && rowLevel === -1 && rowTupleLevel === -1)
	{
		result = true;
	}
	return result;
};
oFF.PivotActionResolver.prototype.correctIndex = function(index, maxElements)
{
	return index < 0 ? maxElements + index : index;
};
oFF.PivotActionResolver.prototype.encodeForUrl = function(value)
{
	return oFF.isNull(value) ? null : oFF.XHttpUtils.encodeURIComponent(value.getStringRepresentation());
};
oFF.PivotActionResolver.prototype.getDpCommandPairFromSimpleContext = function(dataProviderQuickActionCommand, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel)
{
	let paramList = oFF.XStream.of(dataProviderQuickActionCommand.getParameters()).collect(oFF.XStreamCollector.toListOfString((el) => {
		return oFF.XValueUtil.getString(this.resolveParameter(el, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel));
	}));
	return oFF.XPair.create(oFF.XStringValue.create(dataProviderQuickActionCommand.getCommandName()), paramList);
};
oFF.PivotActionResolver.prototype.getDpCommandPairsFromSimpleContext = function(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel)
{
	return oFF.XStream.of(action).map((command) => {
		return this.getDpCommandPairFromSimpleContext(command, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel);
	}).collect(oFF.XStreamCollector.toList());
};
oFF.PivotActionResolver.prototype.getSimpleGridCoordinates = function(quickAction)
{
	let parameters = quickAction.getParameters();
	let size = parameters.size();
	let quickActionCoordinate = oFF.QQuickActionCoordinate.create();
	for (let i = 0; i < size; i++)
	{
		let parameter = parameters.get(i);
		if (parameter.getOlapComponentType() === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_FIELD_VALUE)
		{
			let dimPar = parameter;
			let newLevel = this.m_gridContainer.getRowsAxis().retrieveActionParameterDimensionIndex(dimPar);
			if (newLevel > -1)
			{
				quickActionCoordinate.applyRowParameter(newLevel, parameter);
			}
			else
			{
				newLevel = this.m_gridContainer.getColumnsAxis().retrieveActionParameterDimensionIndex(dimPar);
				if (newLevel > -1)
				{
					quickActionCoordinate.applyColumnParameter(newLevel, parameter);
				}
				else
				{
					quickActionCoordinate.reset();
					break;
				}
			}
		}
	}
	return quickActionCoordinate;
};
oFF.PivotActionResolver.prototype.getUriFromSimpleContext = function(urlQuickAction, rowTupleReference, rowTupleLevel, columnTupleReference, columnTupleLevel)
{
	let paramList = oFF.XStream.of(urlQuickAction.getParameters()).collect(oFF.XStreamCollector.toListOfString((el) => {
		return this.resolveSimpleParameterUrl(el, rowTupleReference, rowTupleLevel, columnTupleReference, columnTupleLevel);
	}));
	let url = oFF.XUri.create();
	url.setUrl(oFF.XCollectionUtils.join(paramList, ""));
	return url;
};
oFF.PivotActionResolver.prototype.resolveByFilterElement = function(actionParameter, filterElement)
{
	return oFF.QQuickActionParameterResolveUtil.resolveFromFilterElement(actionParameter.getQueryModel(), actionParameter, filterElement);
};
oFF.PivotActionResolver.prototype.resolveByTupleContext = function(actionParameter, tupleReferences)
{
	return oFF.XStream.of(tupleReferences).map((tupleReference) => {
		return tupleReference.resolveFieldValueActionParameter(actionParameter);
	}).collect(oFF.XStreamCollector.toList());
};
oFF.PivotActionResolver.prototype.resolveOlapParameter = function(parameter, axisReference, level)
{
	let typeToResolve = parameter.getComponentTypeToResolve();
	let modelObject = null;
	if (typeToResolve.isTypeOf(oFF.OlapComponentType.QUERY_MODEL))
	{
		modelObject = this.m_gridContainer.getQueryModel();
	}
	else
	{
		let visibleComponents = axisReference.getVisibleComponentsOnAxis();
		if (level > -1 && level < oFF.XCollectionUtils.size(visibleComponents))
		{
			let componentOnAxis = visibleComponents.get(level);
			if (typeToResolve.isTypeOf(oFF.OlapComponentType.AXIS))
			{
				modelObject = axisReference.getAxisType();
			}
			else if (componentOnAxis.getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD))
			{
				let fieldReference = componentOnAxis;
				if (typeToResolve.isTypeOf(oFF.OlapComponentType.FIELD))
				{
					modelObject = fieldReference.getField();
				}
				else if (typeToResolve.isTypeOf(oFF.OlapComponentType.ATTRIBUTE))
				{
					modelObject = fieldReference.getField().getAttribute();
				}
				else if (typeToResolve.isTypeOf(oFF.OlapComponentType.ABSTRACT_DIMENSION))
				{
					modelObject = fieldReference.getField().getDimension();
				}
			}
		}
	}
	return oFF.XCollectionUtils.singletonList(oFF.XValueAccess.createWithValue(oFF.XStringValue.create(oFF.DfNameObject.getSafeName(modelObject))));
};
oFF.PivotActionResolver.prototype.resolveParameter = function(parameter, rowTupleReference, rowTupleLevel, columnTupleReference, columnTupleLevel)
{
	let parameterType = parameter.getOlapComponentType();
	let result = null;
	if (parameterType.isTypeOf(oFF.OlapComponentType.QUICK_ACTION_PARAMETER_FIELD_VALUE))
	{
		let fieldValueParameter = parameter;
		if (this.resolvesAxisContext(fieldValueParameter, rowTupleReference, 0, rowTupleLevel))
		{
			result = this.resolveByTupleContext(fieldValueParameter, oFF.XCollectionUtils.singletonList(rowTupleReference));
		}
		else if (this.resolvesAxisContext(fieldValueParameter, columnTupleReference, 0, columnTupleLevel))
		{
			result = this.resolveByTupleContext(fieldValueParameter, oFF.XCollectionUtils.singletonList(columnTupleReference));
		}
		else if (this.resolvesFilterElement(fieldValueParameter, parameter.getQueryModel().getFilter().getDynamicFilter().getFilterRootElement()))
		{
			result = this.resolveByFilterElement(fieldValueParameter, parameter.getQueryModel().getFilter().getDynamicFilter().getFilterRootElement());
		}
	}
	else if (parameterType.isTypeOf(oFF.OlapComponentType.QUICK_ACTION_PARAMETER_OLAP))
	{
		if (rowTupleLevel > -1)
		{
			result = this.resolveOlapParameter(parameter, rowTupleReference.getAxisReference(), rowTupleLevel);
		}
		else if (columnTupleLevel > -1)
		{
			result = this.resolveOlapParameter(parameter, columnTupleReference.getAxisReference(), columnTupleLevel);
		}
	}
	else if (parameterType.isTypeOf(oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT))
	{
		result = parameter.resolveConstantValue();
	}
	else if (parameterType.isTypeOf(oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT_LIST))
	{
		result = parameter.resolveConstantValue();
	}
	else if (parameterType.isTypeOf(oFF.OlapComponentType.QUICK_ACTION_PARAMETER_URL_LITERAL))
	{
		result = parameter.resolveConstantValue();
	}
	return oFF.XCollectionUtils.hasElements(result) ? result.get(0).getValue() : null;
};
oFF.PivotActionResolver.prototype.resolveSimpleParameterUrl = function(parameter, rowTupleReference, rowTupleLevel, columnTupleReference, columnTupleLevel)
{
	let parameterType = parameter.getOlapComponentType();
	let value = this.resolveParameter(parameter, rowTupleReference, rowTupleLevel, columnTupleReference, columnTupleLevel);
	return parameterType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_URL_LITERAL ? oFF.XValueUtil.getString(value) : this.encodeForUrl(value);
};
oFF.PivotActionResolver.prototype.resolvesAxisContext = function(actionParameter, tupleReference, min, max)
{
	let result = false;
	let axisReference;
	if (oFF.notNull(tupleReference))
	{
		axisReference = tupleReference.getAxisReference();
		let index = axisReference.retrieveActionParameterDimensionIndex(actionParameter);
		let dimensionsOnAxis = oFF.XCollectionUtils.size(axisReference.getModelDimensionsOnAxis());
		result = index > -1 && this.correctIndex(min, dimensionsOnAxis) <= index && this.correctIndex(max, dimensionsOnAxis) >= index;
	}
	return result;
};
oFF.PivotActionResolver.prototype.resolvesFilterElement = function(actionParameter, filterElement)
{
	return false;
};

oFF.PivotTextMeasureUtil = {

	calculateWidth:function(currentFramework, stringToMeasure, cssString, bold, fontSize)
	{
			let length = 0;
		let stringSize = oFF.XString.size(stringToMeasure);
		if (stringSize > 0)
		{
			length = oFF.XDouble.convertToInt(oFF.XMath.ceil(currentFramework.calculateTextWidth(stringToMeasure, cssString)));
			if (length === 0)
			{
				length = oFF.XDouble.convertToInt(oFF.XMath.ceil(fontSize * stringSize * (bold ? 8 : 7) / 13.0));
			}
		}
		return length;
	},
	getFontCssString:function(fontFamily, fontBold, fontItalic, fontSize)
	{
			let fontBuffer = oFF.XStringBuffer.create();
		if (fontBold)
		{
			fontBuffer.append("bold ");
		}
		if (fontItalic)
		{
			fontBuffer.append("italic ");
		}
		fontBuffer.append(oFF.XDouble.convertToString(fontSize));
		fontBuffer.append("px");
		fontBuffer.append(" ");
		fontBuffer.append(fontFamily);
		return fontBuffer.toString();
	},
	measureText:function(listOfTextsToMeasure, lengthAddition, bold, italic, fontSize, fontFamily)
	{
			let cssString = oFF.PivotTextMeasureUtil.getFontCssString(fontFamily, bold, italic, fontSize);
		let currentFramework = oFF.UiFramework.currentFramework();
		return oFF.XStream.ofString(listOfTextsToMeasure).map((str) => {
			return oFF.XIntegerValue.create(oFF.PivotTextMeasureUtil.calculateWidth(currentFramework, str.getString(), cssString, bold, fontSize));
		}).reduce(oFF.XIntegerValue.create(0), (a, b) => {
			return oFF.XIntegerValue.create(oFF.XMath.max(a.getInteger(), b.getInteger()));
		}).getInteger();
	},
	measureTextOrRetokenize:function(listOfTextsToMeasure, bold, italic, fontSize, fontFamily, cellWrap, reTokenized, idealWidth)
	{
			let cssString = oFF.PivotTextMeasureUtil.getFontCssString(fontFamily, bold, italic, fontSize);
		let currentFramework = oFF.UiFramework.currentFramework();
		let textIterator = listOfTextsToMeasure.getIterator();
		let length = 0;
		while (textIterator.hasNext())
		{
			let subText = textIterator.next();
			let localLength = oFF.PivotTextMeasureUtil.calculateWidth(currentFramework, subText, cssString, bold, fontSize);
			if (cellWrap && idealWidth > 0)
			{
				localLength = oFF.PivotTextMeasureUtil.subTokenize(subText, idealWidth, localLength, reTokenized, currentFramework, cssString, bold, fontSize);
			}
			else
			{
				reTokenized.add(subText);
			}
			length = oFF.XMath.max(length, localLength);
		}
		return length;
	},
	subTokenize:function(text, idealWidth, localLength, reTokenized, currentFramework, cssString, bold, fontSize)
	{
			let newString = text;
		let newLength = localLength;
		let textSize = oFF.XString.size(text);
		let cutoffIndex = textSize;
		while (newLength > idealWidth && cutoffIndex > 0)
		{
			let newCutoffIndex = oFF.XString.size(newString) - 1;
			while (newCutoffIndex > 0 && !oFF.PivotTextWrappingUtil.canWrapAtPosition(newString, newCutoffIndex))
			{
				newCutoffIndex--;
			}
			if (newCutoffIndex < 1)
			{
				break;
			}
			cutoffIndex = newCutoffIndex;
			newString = oFF.XString.trim(oFF.XString.substring(text, 0, cutoffIndex));
			newLength = oFF.PivotTextMeasureUtil.calculateWidth(currentFramework, newString, cssString, bold, fontSize);
		}
		reTokenized.add(newString);
		if (cutoffIndex < textSize)
		{
			let remainderText = oFF.XString.trim(oFF.XString.substring(text, cutoffIndex, -1));
			newLength = oFF.XMath.max(newLength, oFF.PivotTextMeasureUtil.subTokenize(remainderText, idealWidth, localLength - newLength, reTokenized, currentFramework, cssString, bold, fontSize));
		}
		return newLength;
	}
};

oFF.PivotTextWrappingUtil = {

	CJK_BASE_MAX_9FFF:40959,
	CJK_BASE_MIN_4E00:19968,
	CJK_COMP_MAX_FAFF:64255,
	CJK_COMP_MIN_F900:63744,
	CJK_EXT_A_MAX_4DBF:19903,
	CJK_EXT_A_MIN_3400:13312,
	CJK_EXT_B_MAX_2A6DF:173791,
	CJK_EXT_B_MIN_20000:131072,
	CJK_EXT_C_MAX_2B73F:177983,
	CJK_EXT_C_MIN_2A700:173824,
	CJK_EXT_D_MAX_2B81F:178207,
	CJK_EXT_D_MIN_2B740:177984,
	CJK_EXT_E_MAX_2CEAF:183983,
	CJK_EXT_E_MIN_2B820:178208,
	CJK_EXT_F_MAX_2EBEF:191471,
	CJK_EXT_F_MIN_2CEB0:183984,
	CJK_EXT_G_MAX_3134F:201551,
	CJK_EXT_G_MIN_30000:196608,
	CJK_EXT_H_MAX_323AF:205743,
	CJK_EXT_H_MIN_31350:201552,
	CJK_EXT_I_MAX_2EE5F:192095,
	CJK_EXT_I_MIN_2EBF0:191472,
	HANGUL_MAX_D7AF:55215,
	HANGUL_MIN_AC00:44032,
	JAP_MAX_30FF:12543,
	JAP_MIN_3040:12352,
	s_breakingWhiteSpaces:null,
	s_endDelimiters:null,
	s_hyphens:null,
	s_nonSeparatableDelimiters:null,
	s_startDelimiters:null,
	addInteger:function(delimiters, integer)
	{
			delimiters.add(oFF.XIntegerValue.create(integer));
	},
	canBeSplitToTheLeft:function(characterCode)
	{
			return characterCode !== -1 && !oFF.PivotTextWrappingUtil.isNonSeparatableDelimiter(characterCode) && !oFF.PivotTextWrappingUtil.isEndDelimiter(characterCode) && (oFF.PivotTextWrappingUtil.isCjkCharacter(characterCode) || oFF.PivotTextWrappingUtil.isStartDelimiter(characterCode));
	},
	canBeSplitToTheRight:function(characterCode)
	{
			return characterCode !== -1 && !oFF.PivotTextWrappingUtil.isNonSeparatableDelimiter(characterCode) && !oFF.PivotTextWrappingUtil.isStartDelimiter(characterCode) && (oFF.PivotTextWrappingUtil.isCjkCharacter(characterCode) || oFF.PivotTextWrappingUtil.isEndDelimiter(characterCode));
	},
	canWrapAtPosition:function(str, index)
	{
			let prepreviousChar = index > 1 ? oFF.XString.getCharAt(str, index - 2) : -1;
		let previousChar = index > 0 ? oFF.XString.getCharAt(str, index - 1) : -1;
		let currentChar = oFF.XString.getCharAt(str, index);
		return oFF.PivotTextWrappingUtil.isBreakingWhiteSpace(currentChar) || oFF.PivotTextWrappingUtil.isBreakingWhiteSpace(previousChar) || oFF.PivotTextWrappingUtil.isHyphen(previousChar) && prepreviousChar > -1 && !oFF.PivotTextWrappingUtil.isBreakingWhiteSpace(prepreviousChar) || oFF.PivotTextWrappingUtil.canBeSplitToTheRight(previousChar) && oFF.PivotTextWrappingUtil.canBeSplitToTheLeft(currentChar);
	},
	isBetween:function(number, low, high)
	{
			return number >= low && number <= high;
	},
	isBreakingWhiteSpace:function(characterCode)
	{
			return oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces.contains(oFF.XIntegerValue.create(characterCode));
	},
	isCjkCharacter:function(characterCode)
	{
			return oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.HANGUL_MIN_AC00, oFF.PivotTextWrappingUtil.HANGUL_MAX_D7AF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.JAP_MIN_3040, oFF.PivotTextWrappingUtil.JAP_MAX_30FF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_BASE_MIN_4E00, oFF.PivotTextWrappingUtil.CJK_BASE_MAX_9FFF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_COMP_MIN_F900, oFF.PivotTextWrappingUtil.CJK_COMP_MAX_FAFF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_A_MIN_3400, oFF.PivotTextWrappingUtil.CJK_EXT_A_MAX_4DBF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_B_MIN_20000, oFF.PivotTextWrappingUtil.CJK_EXT_B_MAX_2A6DF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_C_MIN_2A700, oFF.PivotTextWrappingUtil.CJK_EXT_C_MAX_2B73F) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_D_MIN_2B740, oFF.PivotTextWrappingUtil.CJK_EXT_D_MAX_2B81F) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_E_MIN_2B820, oFF.PivotTextWrappingUtil.CJK_EXT_E_MAX_2CEAF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_F_MIN_2CEB0, oFF.PivotTextWrappingUtil.CJK_EXT_F_MAX_2EBEF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_G_MIN_30000, oFF.PivotTextWrappingUtil.CJK_EXT_G_MAX_3134F) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_H_MIN_31350, oFF.PivotTextWrappingUtil.CJK_EXT_H_MAX_323AF) || oFF.PivotTextWrappingUtil.isBetween(characterCode, oFF.PivotTextWrappingUtil.CJK_EXT_I_MIN_2EBF0, oFF.PivotTextWrappingUtil.CJK_EXT_I_MAX_2EE5F);
	},
	isEndDelimiter:function(characterCode)
	{
			return oFF.PivotTextWrappingUtil.s_endDelimiters.contains(oFF.XIntegerValue.create(characterCode));
	},
	isHyphen:function(characterCode)
	{
			return oFF.PivotTextWrappingUtil.s_hyphens.contains(oFF.XIntegerValue.create(characterCode));
	},
	isNonSeparatableDelimiter:function(characterCode)
	{
			return oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters.contains(oFF.XIntegerValue.create(characterCode));
	},
	isStartDelimiter:function(characterCode)
	{
			return oFF.PivotTextWrappingUtil.s_startDelimiters.contains(oFF.XIntegerValue.create(characterCode));
	},
	staticSetup:function()
	{
			oFF.PivotTextWrappingUtil.s_startDelimiters = oFF.XList.create();
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 32);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 34);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 35);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 36);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 39);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 40);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 91);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 123);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 163);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 165);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 171);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 183);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 8245);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12293);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12295);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12296);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12297);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12298);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12299);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12300);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12301);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12302);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12304);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12308);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12310);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12312);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 12317);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65076);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65077);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65079);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65081);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65083);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65085);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65087);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65089);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65091);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65103);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65113);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65115);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65284);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65288);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65294);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65339);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65371);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65375);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65376);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65505);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65509);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_startDelimiters, 65510);
		oFF.PivotTextWrappingUtil.s_endDelimiters = oFF.XList.create();
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 32);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 33);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 34);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 37);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 39);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 41);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 44);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 46);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 58);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 59);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 63);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 93);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 125);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 162);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 176);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 183);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 187);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8211);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8212);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8224);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8225);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8226);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8250);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8451);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 8758);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12289);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12290);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12291);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12294);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12296);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12297);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12298);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12299);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12300);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12301);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12302);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12303);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12305);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12309);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12311);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12313);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12318);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 12319);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65072);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65073);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65074);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65075);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65078);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65080);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65082);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65084);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65086);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65088);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65090);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65104);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65105);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65106);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65107);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65108);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65109);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65110);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65111);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65112);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65114);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65116);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65281);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65282);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65285);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65287);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65289);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65292);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65294);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65306);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65307);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65311);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65341);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65372);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65373);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65374);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65376);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_endDelimiters, 65380);
		oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters = oFF.XList.create();
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters, 346);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters, 8212);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters, 8229);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters, 12339);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters, 12340);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_nonSeparatableDelimiters, 12341);
		oFF.PivotTextWrappingUtil.s_hyphens = oFF.XList.create();
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_hyphens, 45);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_hyphens, 8208);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_hyphens, 8211);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_hyphens, 12316);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_hyphens, 12448);
		oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces = oFF.XList.create();
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces, 9);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces, 10);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces, 11);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces, 12);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces, 13);
		oFF.PivotTextWrappingUtil.addInteger(oFF.PivotTextWrappingUtil.s_breakingWhiteSpaces, 32);
	}
};

oFF.OlapVizToPivotConverterUtil = {

	applyCellTypeRestrictionFromViz:function(vizCellTypeRestriction, sacCellTypeRestriction)
	{
			sacCellTypeRestriction.setInHierarchy(vizCellTypeRestriction.isInHierarchy());
		sacCellTypeRestriction.setInTotalsContext(vizCellTypeRestriction.isInTotalsContext());
		sacCellTypeRestriction.setExpanded(vizCellTypeRestriction.isExpanded());
		sacCellTypeRestriction.setRepeatedMemberName(vizCellTypeRestriction.isRepeatedMemberName());
		sacCellTypeRestriction.setMerged(vizCellTypeRestriction.isMerged());
		sacCellTypeRestriction.setDataEntryEnabled(vizCellTypeRestriction.isDataEntryEnabled());
		sacCellTypeRestriction.setLocked(vizCellTypeRestriction.isLocked());
		sacCellTypeRestriction.setVersionEdited(vizCellTypeRestriction.isVersionEdited());
		sacCellTypeRestriction.setDataUpdated(vizCellTypeRestriction.isDataUpdated());
		oFF.XCollectionUtils.forEach(vizCellTypeRestriction.getMatchingCellTypes(), (mct) => {
			sacCellTypeRestriction.addCellType(oFF.OlapVizToPivotConverterUtil.getCellTypeFromViz(mct));
		});
	},
	applyCellsReferenceScopeFromViz:function(vizCellsReferenceScope, sectionReference)
	{
			let headerSectionInfos = vizCellsReferenceScope.getHeaderSectionInfos().getIterator();
		sectionReference.clearHeaderSectionsInfos();
		while (headerSectionInfos.hasNext())
		{
			oFF.OlapVizToPivotConverterUtil.applyHeaderSectionInfoFromViz(headerSectionInfos.next(), sectionReference.addNewHeaderSectionInfo());
		}
		sectionReference.setMatchHeaderSectionStart(vizCellsReferenceScope.isMatchHeaderSectionStart());
		sectionReference.setMatchHeaderSectionEnd(vizCellsReferenceScope.isMatchHeaderSectionEnd());
		sectionReference.setMatchHeaderFieldsSectionEnd(vizCellsReferenceScope.isMatchHeaderFieldsSectionEnd());
		sectionReference.setMatchFullHeaderSection(vizCellsReferenceScope.isMatchFullHeaderSection());
		let dataPaths = vizCellsReferenceScope.getAxisPaths().getIterator();
		sectionReference.clearDataPaths();
		while (dataPaths.hasNext())
		{
			oFF.OlapToVisualizationConverterUtil.applyPathInfoFromViz(dataPaths.next(), sectionReference.addNewDataPath());
		}
		sectionReference.setMatchDataSectionStart(vizCellsReferenceScope.isMatchDataSectionStart());
		sectionReference.setMatchDataSectionEnd(vizCellsReferenceScope.isMatchDataSectionEnd());
		sectionReference.setMatchFullDataSection(vizCellsReferenceScope.isMatchFullDataSection());
		sectionReference.setMatchModulo(vizCellsReferenceScope.getMatchModulo());
		sectionReference.setMatchOrdinal(vizCellsReferenceScope.getMatchOrdinal());
		sectionReference.setMatchSkipFirst(vizCellsReferenceScope.getMatchSkipFirst());
		sectionReference.setMatchSkipLast(vizCellsReferenceScope.getMatchSkipLast());
		sectionReference.setMatchRootContentIndices(vizCellsReferenceScope.isMatchRootContentIndices());
	},
	applyDataPointStyleFromViz:function(vizDataPointStyle, sacDataPointStyle)
	{
			oFF.OlapVizToPivotConverterUtil.applyDataPointStyleFromVizExt(vizDataPointStyle, sacDataPointStyle, null);
	},
	applyDataPointStyleFromVizExt:function(vizDataPointStyle, sacDataPointStyle, variableHolders)
	{
			if (vizDataPointStyle.isUnmatchedTags())
		{
			sacDataPointStyle.setUnmatchedTags();
		}
		else
		{
			sacDataPointStyle.clearTags();
			oFF.XCollectionUtils.forEach(vizDataPointStyle.getTags(), (tag) => {
				vizDataPointStyle.addTag(tag);
			});
		}
		if (vizDataPointStyle.isUnmatchedExceptions())
		{
			sacDataPointStyle.setUnmatchedExceptions();
		}
		else
		{
			sacDataPointStyle.setExceptionName(vizDataPointStyle.getExceptionName());
		}
		if (vizDataPointStyle.isUnmatchedAlertLevels())
		{
			sacDataPointStyle.setUnmatchedAlertLevels();
		}
		else
		{
			sacDataPointStyle.setAlertLevelMin(oFF.OlapVizToPivotConverterUtil.getAlertLevelFromViz(vizDataPointStyle.getAlertLevelMin()));
			sacDataPointStyle.setAlertLevelMax(oFF.OlapVizToPivotConverterUtil.getAlertLevelFromViz(vizDataPointStyle.getAlertLevelMax()));
		}
		if (vizDataPointStyle.isUnmatchedValueSigns())
		{
			sacDataPointStyle.setUnmatchedValueSigns();
		}
		else
		{
			sacDataPointStyle.setValueSign(oFF.OlapToVisualizationConverterUtil.getValueSignFromViz(vizDataPointStyle.getValueSign()));
		}
		if (vizDataPointStyle.isUnmatchedPathElements())
		{
			sacDataPointStyle.setUnmatchedPathElements();
		}
		else
		{
			oFF.XCollectionUtils.forEach(vizDataPointStyle.getPathElements(), (pathElement) => {
				oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromViz(pathElement, sacDataPointStyle.addNewPathElement());
			});
		}
		let tableDefinition = vizDataPointStyle.getTableDefinition();
		let dataPointStyleCategoryName = vizDataPointStyle.getDataPointCategoryNameRaw().resolveStringExtended(variableHolders, tableDefinition);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataPointStyleCategoryName))
		{
			sacDataPointStyle.setDataPointCategoryName(dataPointStyleCategoryName);
		}
		let dataPointStyleCategoryText = vizDataPointStyle.getDataPointCategoryTextRaw().resolveStringExtended(variableHolders, tableDefinition);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(dataPointStyleCategoryText))
		{
			sacDataPointStyle.setDataPointCategoryText(dataPointStyleCategoryText);
		}
		let formattingStyleName = vizDataPointStyle.getFormattingStyleNameRaw().resolveStringExtended(variableHolders, tableDefinition);
		let formattingStyle = tableDefinition.getFormattingStyle(formattingStyleName);
		oFF.OlapVizToPivotConverterUtil.applyTableStyleFromVizExt(formattingStyle, sacDataPointStyle.getTableStyle(), variableHolders);
		sacDataPointStyle.setPriority(vizDataPointStyle.getPriority());
	},
	applyHeaderSectionInfoFromField:function(field, tableAxis)
	{
			let attribute = field.getAttribute();
		let dimension = field.getDimension();
		let startOfDimension = false;
		let endOfDimension = false;
		let startOfAttribute = false;
		let endOfAttribute = false;
		let fieldFilter = (fi) => {
			return fi.getObtainability() === null || fi.getObtainability() === oFF.ObtainabilityType.ALWAYS;
		};
		if (oFF.isNull(attribute) || dimension.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED)
		{
			let drsf = oFF.XStream.of(dimension.getResultSetFields()).filter(fieldFilter).collect(oFF.XStreamCollector.toList());
			startOfDimension = drsf.getIndex(field) === 0;
			startOfAttribute = startOfDimension;
			endOfDimension = drsf.getIndex(field) === drsf.size() - 1;
			endOfAttribute = endOfDimension;
		}
		else
		{
			let rsa = dimension.getResultSetAttributes();
			let arsf = oFF.XStream.of(attribute.getResultSetFields()).filter(fieldFilter).collect(oFF.XStreamCollector.toList());
			startOfAttribute = arsf.getIndex(field) === 0;
			endOfAttribute = arsf.getIndex(field) === arsf.size() - 1;
			startOfDimension = startOfAttribute && rsa.getIndex(attribute) === 0;
			endOfDimension = endOfAttribute && rsa.getIndex(attribute) === rsa.size() - 1;
		}
		let axisLevel = dimension.getIndexOnAxis();
		let reversedAxisLevel = axisLevel - dimension.getAxis().size() - 1;
		let dimensionHeader = tableAxis.addPartOfHeaderSectionInfo(startOfDimension, endOfDimension);
		dimensionHeader.setHeaderLevel(0);
		dimensionHeader.setHeaderName(dimension.getName());
		dimensionHeader.setAxisLevel(axisLevel);
		dimensionHeader.setReversedAxisLevel(reversedAxisLevel);
		dimensionHeader.setExactHeaderLevel(startOfDimension);
		let attributeHeader = tableAxis.addPartOfHeaderSectionInfo(startOfAttribute, endOfAttribute);
		attributeHeader.setHeaderLevel(1);
		attributeHeader.setHeaderName(oFF.isNull(attribute) ? dimension.getName() : attribute.getName());
		attributeHeader.setAxisLevel(axisLevel);
		attributeHeader.setReversedAxisLevel(reversedAxisLevel);
		attributeHeader.setExactHeaderLevel(startOfAttribute);
		let fieldHeader = tableAxis.addPartOfHeaderSectionInfo(true, true);
		fieldHeader.setHeaderLevel(2);
		fieldHeader.setHeaderName(field.getName());
		fieldHeader.setAxisLevel(axisLevel);
		fieldHeader.setReversedAxisLevel(reversedAxisLevel);
		fieldHeader.setExactHeaderLevel(true);
	},
	applyHeaderSectionInfoFromUniqueHeader:function(tableAxis)
	{
			let dimensionHeader = tableAxis.addPartOfHeaderSectionInfo(false, false);
		dimensionHeader.setHeaderLevel(3);
		dimensionHeader.setExactHeaderLevel(true);
	},
	applyHeaderSectionInfoFromViz:function(headerSectionInfo, sacHeaderSectionInfo)
	{
			if (headerSectionInfo.isDimensionLevel())
		{
			sacHeaderSectionInfo.setHeaderLevel(0);
		}
		else if (headerSectionInfo.isAttributeLevel())
		{
			sacHeaderSectionInfo.setHeaderLevel(1);
		}
		else if (headerSectionInfo.isFieldLevel())
		{
			sacHeaderSectionInfo.setHeaderLevel(2);
		}
		else if (headerSectionInfo.isUniqueUnitsLevel())
		{
			sacHeaderSectionInfo.setHeaderLevel(3);
		}
		else
		{
			sacHeaderSectionInfo.setHeaderLevel(-1);
		}
		sacHeaderSectionInfo.setHeaderName(headerSectionInfo.getHeaderName());
		sacHeaderSectionInfo.setExactHeaderLevel(headerSectionInfo.isExactHeaderLevel());
		sacHeaderSectionInfo.setAxisLevel(headerSectionInfo.getAxisLevel());
		sacHeaderSectionInfo.setSectionStart(headerSectionInfo.isSectionStart());
		sacHeaderSectionInfo.setSectionEnd(headerSectionInfo.isSectionEnd());
	},
	applyHighlightingFromViz:function(vizHighlightArea, sacTableHighlightArea)
	{
			sacTableHighlightArea.setHighlightColor(vizHighlightArea.getHighlightColor());
		sacTableHighlightArea.setPriority(vizHighlightArea.getPriority());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizHighlightArea.getColumnsReference(), sacTableHighlightArea.getColumnsReference());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizHighlightArea.getRowsReference(), sacTableHighlightArea.getRowsReference());
		oFF.OlapVizToPivotConverterUtil.applyCellTypeRestrictionFromViz(vizHighlightArea.getCellTypeRestriction(), sacTableHighlightArea.getCellTypeRestriction());
	},
	applyInsertedTupleFromViz:function(vizTuple, sacTuple)
	{
			let tableDefinition = vizTuple.getTableDefinition();
		sacTuple.setCellWidth(vizTuple.getCellWidth());
		sacTuple.setCellHeight(vizTuple.getCellHeight());
		sacTuple.setFormattedText(vizTuple.getFormattedText());
		sacTuple.setMerged(vizTuple.isMerged());
		let vizScopedStyles = vizTuple.getScopedStyleNames().getIterator();
		while (vizScopedStyles.hasNext())
		{
			oFF.OlapVizToPivotConverterUtil.applyScopedStyleFromViz(tableDefinition.getScopedStyle(vizScopedStyles.next()), sacTuple.addNewScopedStyle());
		}
	},
	applyLayeredRectangularStyleFromViz:function(vizLRStyle, sacLRStyle)
	{
			oFF.OlapVizToPivotConverterUtil.applyTableStyleFromViz(vizLRStyle.getStyle(), sacLRStyle.getStyle());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizLRStyle.getRowsScope(), sacLRStyle.getRowsRestriction());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizLRStyle.getColumnsScope(), sacLRStyle.getColumnsRestriction());
	},
	applyPageBreakHandlingFromViz:function(vizPageBreakHandling, sacPageBreakHandling)
	{
			sacPageBreakHandling.setBreakAfter(vizPageBreakHandling.isBreakAfter());
		sacPageBreakHandling.setBreakBefore(vizPageBreakHandling.isBreakBefore());
		sacPageBreakHandling.setKeepTogether(vizPageBreakHandling.isKeepTogether());
	},
	applyScopedStyleFromViz:function(vizScopedTableStyle, scopedStyle)
	{
			oFF.OlapVizToPivotConverterUtil.applyTableStyleFromViz(vizScopedTableStyle.getStyle(), scopedStyle.getStyle());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizScopedTableStyle.getOrthogonalColumnsScope(), scopedStyle.getOrthogonalColumnsRestriction());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizScopedTableStyle.getOrthogonalRowsScope(), scopedStyle.getOrthogonalRowsRestriction());
	},
	applyTableMarkupFromViz:function(vizTableMarkup, sacTableMarkup)
	{
			let tableDefinition = vizTableMarkup.getTableDefinition();
		sacTableMarkup.setHide(vizTableMarkup.isHide());
		sacTableMarkup.setCellHeight(vizTableMarkup.getCellHeight());
		sacTableMarkup.setCellWidth(vizTableMarkup.getCellWidth());
		sacTableMarkup.setCellHeightAddition(vizTableMarkup.getCellHeightAddition());
		sacTableMarkup.setCellWidthAddition(vizTableMarkup.getCellWidthAddition());
		sacTableMarkup.setPriority(vizTableMarkup.getPriority());
		oFF.OlapVizToPivotConverterUtil.applyPageBreakHandlingFromViz(vizTableMarkup.getPageBreakHandling(), sacTableMarkup.getPageBreakHandling());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizTableMarkup.getColumnsScope(), sacTableMarkup.getColumnsScope());
		oFF.OlapVizToPivotConverterUtil.applyCellsReferenceScopeFromViz(vizTableMarkup.getRowsScope(), sacTableMarkup.getRowsScope());
		let vizScopedStyles = vizTableMarkup.getScopedStyleNames().getIterator();
		while (vizScopedStyles.hasNext())
		{
			let newScopedStyle = sacTableMarkup.addNewScopedStyle();
			oFF.OlapVizToPivotConverterUtil.applyScopedStyleFromViz(tableDefinition.getScopedStyle(vizScopedStyles.next()), newScopedStyle);
			if (newScopedStyle.getPriority() < 0 && sacTableMarkup.getPriority() > -1)
			{
				newScopedStyle.setPriority(sacTableMarkup.getPriority());
			}
		}
		let vizInsertedTuples = vizTableMarkup.getTuplesBefore().getIterator();
		while (vizInsertedTuples.hasNext())
		{
			oFF.OlapVizToPivotConverterUtil.applyInsertedTupleFromViz(vizInsertedTuples.next(), sacTableMarkup.addNewTupleBefore());
		}
		vizInsertedTuples = vizTableMarkup.getTuplesAfter().getIterator();
		while (vizInsertedTuples.hasNext())
		{
			oFF.OlapVizToPivotConverterUtil.applyInsertedTupleFromViz(vizInsertedTuples.next(), sacTableMarkup.addNewTupleAfter());
		}
	},
	applyTableStyleFromViz:function(formattingStyle, sacTableStyle)
	{
			oFF.OlapVizToPivotConverterUtil.applyTableStyleFromVizExt(formattingStyle, sacTableStyle, null);
	},
	applyTableStyleFromVizExt:function(formattingStyle, sacTableStyle, variableHolder)
	{
			let tableDefinition = oFF.isNull(formattingStyle) ? null : formattingStyle.getTableDefinition();
		if (oFF.notNull(formattingStyle) && formattingStyle.getActiveRaw().resolveBooleanExtended(variableHolder, tableDefinition, true))
		{
			sacTableStyle.setOverridePlaceholderForFormattedText(formattingStyle.getOverridePlaceholderForFormattedTextRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setOverrideText(formattingStyle.getOverrideTextRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setShowFormattedText(formattingStyle.getShowFormattedTextRaw().resolveTriStateBooleanExtended(variableHolder, tableDefinition));
			sacTableStyle.setFillColor(formattingStyle.getFillColorRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setFillAlpha(formattingStyle.getFillAlphaRaw().resolveDoubleExtended(variableHolder, tableDefinition, -1));
			oFF.OlapVizToPivotConverterUtil.transferStyledLine(sacTableStyle.getStyledLineTop(), formattingStyle.getStyledLineTop(), variableHolder);
			oFF.OlapVizToPivotConverterUtil.transferStyledLine(sacTableStyle.getStyledLineBottom(), formattingStyle.getStyledLineBottom(), variableHolder);
			oFF.OlapVizToPivotConverterUtil.transferStyledLine(sacTableStyle.getStyledLineLeft(), formattingStyle.getStyledLineLeft(), variableHolder);
			oFF.OlapVizToPivotConverterUtil.transferStyledLine(sacTableStyle.getStyledLineRight(), formattingStyle.getStyledLineRight(), variableHolder);
			oFF.XCollectionUtils.forEach(formattingStyle.getCellTypeRestrictions(), (ctr) => {
				oFF.OlapVizToPivotConverterUtil.applyCellTypeRestrictionFromViz(ctr, sacTableStyle.addNewCellTypeRestriction());
			});
			sacTableStyle.setBackgroundContent(formattingStyle.getBackgroundContentRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setBackgroundPatternType(oFF.OlapVizToPivotConverterUtil.getLinePatternTypeFromViz(formattingStyle.getBackgroundPatternTypeRaw().getResolvedValueExtended(variableHolder, tableDefinition)));
			sacTableStyle.setFontItalicExt(formattingStyle.getFontItalicRaw().resolveTriStateBooleanExtended(variableHolder, tableDefinition));
			sacTableStyle.setFontBoldExt(formattingStyle.getFontBoldRaw().resolveTriStateBooleanExtended(variableHolder, tableDefinition));
			sacTableStyle.setFontUnderlineExt(formattingStyle.getFontUnderlineRaw().resolveTriStateBooleanExtended(variableHolder, tableDefinition));
			sacTableStyle.setFontStrikeThroughExt(formattingStyle.getFontStrikeThroughRaw().resolveTriStateBooleanExtended(variableHolder, tableDefinition));
			sacTableStyle.setWrapExt(formattingStyle.getWrapRaw().resolveTriStateBooleanExtended(variableHolder, tableDefinition));
			sacTableStyle.setFontSize(formattingStyle.getFontSizeRaw().resolveDoubleExtended(variableHolder, tableDefinition, 0));
			sacTableStyle.setFontFamily(formattingStyle.getFontFamilyRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setFontColor(formattingStyle.getFontColorRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setCellChartLineColor(formattingStyle.getCellChartLineColorRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setCellChartBarColor(formattingStyle.getCellChartBarColorRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setThresholdType(oFF.OlapVizToPivotConverterUtil.getAlertSymbolFromViz(formattingStyle.getAlertSymbolRaw().getResolvedValueExtended(variableHolder, tableDefinition)));
			sacTableStyle.setThresholdColor(formattingStyle.getAlertColorRaw().resolveStringExtended(variableHolder, tableDefinition));
			sacTableStyle.setVerticalAlignment(oFF.OlapToVisualizationConverterUtil.getVerticalAlignmentFromViz(formattingStyle.getVerticalAlignmentRaw().getResolvedValueExtended(variableHolder, tableDefinition)));
			sacTableStyle.setHorizontalAlignment(oFF.OlapToVisualizationConverterUtil.getHorizontalAlignmentFromViz(formattingStyle.getHorizontalAlignmentRaw().getResolvedValueExtended(variableHolder, tableDefinition)));
			sacTableStyle.setPriority(formattingStyle.getPriority());
		}
	},
	applyVizStyleFromTable:function(vizStyle, tableStyle)
	{
			if (oFF.notNull(tableStyle))
		{
			vizStyle.setOverridePlaceholderForFormattedText(tableStyle.getOverridePlaceholderForFormattedText());
			vizStyle.setOverrideText(tableStyle.getOverrideText());
			vizStyle.setShowFormattedText(tableStyle.isShowFormattedText());
			vizStyle.setFillColor(tableStyle.getFillColor());
			vizStyle.setFillAlpha(tableStyle.getFillAlpha());
			oFF.OlapVizToPivotConverterUtil.transferBackStyledLine(vizStyle.getStyledLineTop(), tableStyle.getStyledLineTop());
			oFF.OlapVizToPivotConverterUtil.transferBackStyledLine(vizStyle.getStyledLineBottom(), tableStyle.getStyledLineBottom());
			oFF.OlapVizToPivotConverterUtil.transferBackStyledLine(vizStyle.getStyledLineLeft(), tableStyle.getStyledLineLeft());
			oFF.OlapVizToPivotConverterUtil.transferBackStyledLine(vizStyle.getStyledLineRight(), tableStyle.getStyledLineRight());
			vizStyle.setBackgroundContent(tableStyle.getBackgroundContent());
			vizStyle.setBackgroundPatternType(oFF.OlapVizToPivotConverterUtil.getLinePatternTypeFromTable(tableStyle.getBackgroundPatternType()));
			vizStyle.setFontItalicExt(tableStyle.isFontItalicExt());
			vizStyle.setFontBoldExt(tableStyle.isFontBoldExt());
			vizStyle.setFontUnderlineExt(tableStyle.isFontUnderlineExt());
			vizStyle.setFontStrikeThroughExt(tableStyle.isFontStrikeThroughExt());
			vizStyle.setFontSize(tableStyle.getFontSize());
			vizStyle.setFontFamily(tableStyle.getFontFamily());
			vizStyle.setFontColor(tableStyle.getFontColor());
			vizStyle.setCellChartLineColor(tableStyle.getCellChartLineColor());
			vizStyle.setCellChartBarColor(tableStyle.getCellChartBarColor());
			vizStyle.setAlertSymbol(oFF.OlapVizToPivotConverterUtil.getThresholdTypeFromTable(tableStyle.getThresholdType()));
			vizStyle.getWrapRaw().setTriStateBoolean(tableStyle.getWrapExt());
			vizStyle.setAlertColor(tableStyle.getThresholdColor());
			vizStyle.setHorizontalAlignment(oFF.OlapToVisualizationConverterUtil.getHorizontalAlignmentFromTable(tableStyle.getHorizontalAlignment()));
			vizStyle.setVerticalAlignment(oFF.OlapToVisualizationConverterUtil.getVerticalAlignmentFromTable(tableStyle.getVerticalAlignment()));
			vizStyle.setPriority(tableStyle.getPriority());
		}
	},
	expandAndApplyDataPointStyle:function(vizDataPointStyle, sacDataPointStyle, exceptionInfo, variableRequestors)
	{
			oFF.OlapVizToPivotConverterUtil.applyDataPointStyleFromVizExt(vizDataPointStyle, sacDataPointStyle, variableRequestors);
		let valueSign = exceptionInfo.getValueSign();
		if (oFF.notNull(valueSign))
		{
			sacDataPointStyle.setValueSign(valueSign);
		}
		let exceptionName = exceptionInfo.getExceptionName();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(exceptionName))
		{
			sacDataPointStyle.setExceptionName(exceptionName);
		}
		let level = exceptionInfo.getLevel();
		if (oFF.notNull(level))
		{
			sacDataPointStyle.setAlertLevelMin(level);
			sacDataPointStyle.setAlertLevelMax(level);
		}
		oFF.XCollectionUtils.forEach(exceptionInfo.getTags(), (tag) => {
			sacDataPointStyle.addTag(tag);
		});
	},
	getAlertLevelFromViz:function(alertLevel)
	{
			return oFF.isNull(alertLevel) ? null : oFF.SacAlertLevel.getByLevelValue(alertLevel.getLevel());
	},
	getAlertSymbolFromViz:function(alertSymbol)
	{
			let result = null;
		if (oFF.notNull(alertSymbol))
		{
			result = oFF.SacAlertSymbol.lookup(alertSymbol.getName());
		}
		return result;
	},
	getCellChartOrientationFromViz:function(cellChartOrientation)
	{
			return cellChartOrientation === oFF.CellChartOrientation.VERTICAL ? oFF.SacCellChartOrientation.VERTICAL : oFF.SacCellChartOrientation.HORIZONTAL;
	},
	getCellChartTypeFromViz:function(cellChartType)
	{
			if (cellChartType === oFF.CellChartType.BAR)
		{
			return oFF.SacCellChartType.BAR;
		}
		else if (cellChartType === oFF.CellChartType.VARIANCE_BAR)
		{
			return oFF.SacCellChartType.VARIANCE_BAR;
		}
		else if (cellChartType === oFF.CellChartType.PIN)
		{
			return oFF.SacCellChartType.PIN;
		}
		return null;
	},
	getCellTypeFromViz:function(tableCellType)
	{
			return oFF.isNull(tableCellType) ? null : oFF.SacCellType.lookup(tableCellType.getName());
	},
	getLinePatternTypeFromTable:function(backgroundPatternType)
	{
			return oFF.isNull(backgroundPatternType) ? null : oFF.BackgroundPatternType.lookup(backgroundPatternType.getName());
	},
	getLinePatternTypeFromViz:function(backgroundPatternType)
	{
			return oFF.isNull(backgroundPatternType) ? null : oFF.VisualizationBackgroundPatternType.lookup(backgroundPatternType.getName());
	},
	getLineStyleFromTable:function(lineStyle)
	{
			return oFF.isNull(lineStyle) ? null : oFF.TableLineStyle.lookup(lineStyle.getName());
	},
	getLineStyleFromViz:function(lineStyle)
	{
			return oFF.isNull(lineStyle) ? null : oFF.SacTableLineStyle.lookup(lineStyle.getName());
	},
	getTableAxisTypeFromViz:function(axisType)
	{
			if (axisType === oFF.AxisType.ROWS)
		{
			return oFF.SacTableAxisType.ROWS;
		}
		if (axisType === oFF.AxisType.COLUMNS)
		{
			return oFF.SacTableAxisType.COLUMNS;
		}
		return null;
	},
	getTableMemberHeaderHandlingFromViz:function(tableMemberHeaderHandling)
	{
			let result = null;
		if (oFF.notNull(tableMemberHeaderHandling))
		{
			result = oFF.SacTableMemberHeaderHandling.lookup(tableMemberHeaderHandling.getName());
		}
		return result;
	},
	getThresholdTypeFromTable:function(alertSymbol)
	{
			let result = null;
		if (oFF.notNull(alertSymbol))
		{
			result = oFF.AlertSymbol.lookup(alertSymbol.getName());
		}
		return result;
	},
	getValueSignFromValue:function(dataCell)
	{
			let valueException = dataCell.getValueException();
		let resultSign = null;
		let plainValue = dataCell.getPlainValue();
		let valueType = oFF.isNull(plainValue) ? null : plainValue.getValueType();
		if (valueException === oFF.ValueException.UNDEFINED || valueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS || valueException === oFF.ValueException.UNDEFINED_NOP)
		{
			resultSign = oFF.ValueSign.UNDEFINED;
		}
		else if (valueException !== oFF.ValueException.NORMAL && valueException !== oFF.ValueException.ZERO)
		{
			resultSign = oFF.ValueSign.UNBOOKED;
		}
		else
		{
			if (oFF.notNull(valueType) && valueType.isNumber())
			{
				let doubleValue = oFF.XValueUtil.getDouble(plainValue, false, true);
				if (valueException === oFF.ValueException.ZERO)
				{
					resultSign = oFF.ValueSign.ZERO;
				}
				else if (doubleValue > 0)
				{
					resultSign = oFF.ValueSign.POSITIVE;
				}
				else if (doubleValue < 0)
				{
					resultSign = oFF.ValueSign.NEGATIVE;
				}
			}
			else
			{
				resultSign = oFF.ValueSign.NORMAL;
			}
		}
		return resultSign;
	},
	transferBackStyledLine:function(styledLineViz, tableStyledLine)
	{
			styledLineViz.setLeftPadding(tableStyledLine.getLeftPadding());
		styledLineViz.setRightPadding(tableStyledLine.getRightPadding());
		styledLineViz.setTopPadding(tableStyledLine.getTopPadding());
		styledLineViz.setBottomPadding(tableStyledLine.getBottomPadding());
		styledLineViz.setColor(tableStyledLine.getColor());
		styledLineViz.setWidth(tableStyledLine.getWidth());
		styledLineViz.setPatternWidth(tableStyledLine.getPatternWidth());
		styledLineViz.setPatternBackground(tableStyledLine.getPatternBackground());
		styledLineViz.setPatternColor(tableStyledLine.getPatternColor());
		styledLineViz.setPatternBorderColor(tableStyledLine.getPatternBorderColor());
		styledLineViz.setPatternType(oFF.OlapVizToPivotConverterUtil.getLinePatternTypeFromTable(tableStyledLine.getPatternType()));
		styledLineViz.setLineStyle(oFF.OlapVizToPivotConverterUtil.getLineStyleFromTable(tableStyledLine.getLineStyle()));
	},
	transferStyledLine:function(lineStyleSac, lineStyleOlap, variableRequestors)
	{
			let tableDefinition = lineStyleOlap.getTableDefinition();
		lineStyleSac.setLeftPadding(lineStyleOlap.getLeftPaddingRaw().resolveDoubleExtended(variableRequestors, tableDefinition, -1));
		lineStyleSac.setRightPadding(lineStyleOlap.getRightPaddingRaw().resolveDoubleExtended(variableRequestors, tableDefinition, -1));
		lineStyleSac.setTopPadding(lineStyleOlap.getTopPaddingRaw().resolveDoubleExtended(variableRequestors, tableDefinition, -1));
		lineStyleSac.setBottomPadding(lineStyleOlap.getBottomPaddingRaw().resolveDoubleExtended(variableRequestors, tableDefinition, -1));
		lineStyleSac.setColor(lineStyleOlap.getColorRaw().resolveStringExtended(variableRequestors, tableDefinition));
		lineStyleSac.setWidth(lineStyleOlap.getWidthRaw().resolveDoubleExtended(variableRequestors, tableDefinition, -1));
		lineStyleSac.setPatternWidth(lineStyleOlap.getPatternWidthRaw().resolveDoubleExtended(variableRequestors, tableDefinition, 0));
		lineStyleSac.setPatternBackground(lineStyleOlap.getPatternBackgroundRaw().resolveStringExtended(variableRequestors, tableDefinition));
		lineStyleSac.setPatternColor(lineStyleOlap.getPatternColorRaw().resolveStringExtended(variableRequestors, tableDefinition));
		lineStyleSac.setPatternBorderColor(lineStyleOlap.getPatternBorderColorRaw().resolveStringExtended(variableRequestors, tableDefinition));
		lineStyleSac.setPatternType(oFF.OlapVizToPivotConverterUtil.getLinePatternTypeFromViz(lineStyleOlap.getPatternTypeRaw().getResolvedValueExtended(variableRequestors, tableDefinition)));
		lineStyleSac.setLineStyle(oFF.OlapVizToPivotConverterUtil.getLineStyleFromViz(lineStyleOlap.getLineStyleRaw().getResolvedValueExtended(variableRequestors, tableDefinition)));
	}
};

oFF.OlapToVisualizationConverterUtil = {

	applyDataSectionInfoFromElement:function(dataPath, fieldValue)
	{
			let dataPathElement = oFF.RscDataSectionInfoTag.create(fieldValue);
		let dimensionIndex = fieldValue.getFieldReference().getDimensionIndex();
		dataPath.addGroupLevelIndex(dimensionIndex);
		dataPath.add(dataPathElement);
		return dimensionIndex;
	},
	applyDataSectionInfoFromTuple:function(rscTuple, tableAxis)
	{
			let dataPath = tableAxis.getDataPath();
		oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromTupleToPath(rscTuple, dataPath);
	},
	applyDataSectionInfoFromTupleToPath:function(rscTuple, dataPath)
	{
			if (oFF.notNull(rscTuple))
		{
			let values = rscTuple.getValues().getIterator();
			let maxDimensionIndex = -1;
			while (values.hasNext())
			{
				let value = values.next();
				let modelReference = value.getModelReference();
				if (!oFF.XObjectExt.isValidObject(modelReference))
				{
					continue;
				}
				let componentType = modelReference.getModelComponentType();
				if (componentType === oFF.OlapComponentType.FIELD)
				{
					let dimensionIndex = oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromElement(dataPath, value);
					maxDimensionIndex = oFF.XMath.max(dimensionIndex, maxDimensionIndex);
				}
			}
			let dummyElement = dataPath.addNewPathElement();
			dummyElement.setGroupLevel(-1);
			dummyElement.setReversedGroupLevel(-maxDimensionIndex - 3);
			dummyElement.setGroupLevelStart(rscTuple.getTupleIndex() === 0);
			dummyElement.setGroupLevelEnd(rscTuple.getTupleIndex() === rscTuple.getAxisReference().getTuplesTotalCount() - 1);
			dummyElement.setExactSectionLevel(true);
			dataPath.applyBandInformation();
		}
	},
	applyDataSectionInfoFromViz:function(axisPathElement, sacDataSectionInfo)
	{
			let groupName = null;
		let field = axisPathElement.getField();
		if (oFF.isNull(field))
		{
			let attribute = axisPathElement.getAttribute();
			let dimension = axisPathElement.getDimension();
			let dimensionType = axisPathElement.getDimensionType();
			let presentationType = axisPathElement.getPresentationType();
			let semanticType = axisPathElement.getSemanticType();
			if (oFF.isNull(dimension) && oFF.notNull(dimensionType))
			{
				dimension = axisPathElement.getQueryModel().getDimensionByType(dimensionType);
			}
			if (oFF.notNull(dimension))
			{
				groupName = dimension.getName();
			}
			if (oFF.notNull(presentationType))
			{
				if (oFF.notNull(attribute))
				{
					groupName = attribute.getName();
					if (presentationType === oFF.PresentationType.ACTIVE_KEY)
					{
						field = attribute.getKeyField();
					}
					else if (presentationType === oFF.PresentationType.ACTIVE_TEXT)
					{
						field = attribute.getTextField();
					}
					else if (presentationType === oFF.PresentationType.ACTIVE_DISPLAY_KEY)
					{
						field = attribute.getHierarchyTextField();
					}
					else
					{
						field = attribute.getFieldByPresentationType(presentationType);
					}
				}
				else if (oFF.notNull(dimension))
				{
					if (presentationType === oFF.PresentationType.ACTIVE_KEY)
					{
						field = dimension.getKeyField();
					}
					else if (presentationType === oFF.PresentationType.ACTIVE_TEXT)
					{
						field = dimension.getTextField();
					}
					else if (presentationType === oFF.PresentationType.ACTIVE_DISPLAY_KEY)
					{
						field = dimension.getHierarchyTextField();
					}
					else
					{
						field = dimension.getFieldByPresentationType(presentationType);
					}
				}
			}
			else if (oFF.notNull(dimension) && oFF.XStringUtils.isNotNullAndNotEmpty(semanticType))
			{
				field = dimension.getFieldBySemanticType(semanticType);
			}
		}
		if (oFF.notNull(field))
		{
			groupName = field.getName();
		}
		sacDataSectionInfo.setGroupName(groupName);
		sacDataSectionInfo.setSectionLevelName(axisPathElement.getHierarchyLevelName());
		sacDataSectionInfo.clearSectionNodeNames();
		oFF.XCollectionUtils.forEach(axisPathElement.getMemberNames(), (snn) => {
			sacDataSectionInfo.addSectionNodeName(snn);
		});
		sacDataSectionInfo.setGroupLevel(axisPathElement.getAxisLevel());
		sacDataSectionInfo.setSectionLevel(axisPathElement.getHierarchyLevel());
		sacDataSectionInfo.setExactSectionLevel(axisPathElement.isExactHierarchyLevel());
		sacDataSectionInfo.setIncludeHeaderBand(axisPathElement.isIncludeHeaderBand());
		sacDataSectionInfo.setIncludeTotalsBand(axisPathElement.isIncludeTotalsBand());
		sacDataSectionInfo.setIncludeInnerBands(axisPathElement.isIncludeSubDrills());
		sacDataSectionInfo.setMatchesExpanded(axisPathElement.isMatchesExpanded());
		if (axisPathElement.getHierarchyAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT)
		{
			sacDataSectionInfo.setMatchesHierarchyBottomUp(oFF.TriStateBool._TRUE);
		}
		else if (axisPathElement.getHierarchyAlignment() === oFF.Alignment.CHILDREN_BELOW_PARENT)
		{
			sacDataSectionInfo.setMatchesHierarchyBottomUp(oFF.TriStateBool._FALSE);
		}
		sacDataSectionInfo.setMatchesLeaves(axisPathElement.isMatchesLeaves());
		sacDataSectionInfo.setMatchesTotals(axisPathElement.isMatchesTotals());
	},
	applyPathInfoFromViz:function(axisPath, sacPath)
	{
			sacPath.setMatchingGroupSectionStart(axisPath.isMatchingDimensionSectionStart());
		sacPath.setMatchingGroupSectionEnd(axisPath.isMatchingDimensionSectionEnd());
		sacPath.setMatchingExactLevelStart(axisPath.isMatchingHierarchyLevelStart());
		sacPath.setMatchingExactLevelEnd(axisPath.isMatchingHierarchyLevelEnd());
		oFF.XCollectionUtils.forEach(axisPath, (element) => {
			oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromViz(element, sacPath.addNewPathElement());
		});
		sacPath.indexLevels();
	},
	complementExceptionInformation:function(exceptionInformation, dataPathTag, relevantDataPointPathElements)
	{
			if (oFF.XCollectionUtils.hasElements(relevantDataPointPathElements))
		{
			oFF.XCollectionUtils.forEach(dataPathTag.getPathElements(), (dpt) => {
				if (oFF.XStream.of(relevantDataPointPathElements).anyMatch((rdpe) => {
					return dpt.matches(rdpe);
				}))
				{
					let dsIT = exceptionInformation.addNewDataSectionInfoTag();
					dsIT.setGroupName(dpt.getGroupName());
					dsIT.setSectionNodeName(dpt.getSectionNodeName());
				}
			});
		}
	},
	getHorizontalAlignmentFromTable:function(horizontalAlignment)
	{
			let result = null;
		if (horizontalAlignment === oFF.SacVisualizationHorizontalAlignment.LEFT)
		{
			result = oFF.CellAlignmentHorizontal.LEFT;
		}
		else if (horizontalAlignment === oFF.SacVisualizationHorizontalAlignment.CENTER)
		{
			result = oFF.CellAlignmentHorizontal.CENTER;
		}
		else if (horizontalAlignment === oFF.SacVisualizationHorizontalAlignment.RIGHT)
		{
			result = oFF.CellAlignmentHorizontal.RIGHT;
		}
		else if (horizontalAlignment === oFF.SacVisualizationHorizontalAlignment.INHERIT)
		{
			result = oFF.CellAlignmentHorizontal.INHERIT;
		}
		return result;
	},
	getHorizontalAlignmentFromViz:function(horizontalAlignment)
	{
			let result = null;
		if (horizontalAlignment === oFF.CellAlignmentHorizontal.LEFT)
		{
			result = oFF.SacVisualizationHorizontalAlignment.LEFT;
		}
		else if (horizontalAlignment === oFF.CellAlignmentHorizontal.CENTER)
		{
			result = oFF.SacVisualizationHorizontalAlignment.CENTER;
		}
		else if (horizontalAlignment === oFF.CellAlignmentHorizontal.RIGHT)
		{
			result = oFF.SacVisualizationHorizontalAlignment.RIGHT;
		}
		else if (horizontalAlignment === oFF.CellAlignmentHorizontal.INHERIT)
		{
			result = oFF.SacVisualizationHorizontalAlignment.INHERIT;
		}
		return result;
	},
	getLayoutDirectionFromViz:function(layoutDirection)
	{
			return oFF.SacLayoutDirection.lookup(oFF.DfNameObject.getSafeName(layoutDirection));
	},
	getValueSignFromViz:function(valueSign)
	{
			let result = null;
		if (oFF.notNull(valueSign))
		{
			if (valueSign === oFF.ValueSign.NORMAL)
			{
				result = oFF.SacValueSign.NORMAL;
			}
			else if (valueSign === oFF.ValueSign.NEGATIVE)
			{
				result = oFF.SacValueSign.NEGATIVE;
			}
			else if (valueSign === oFF.ValueSign.ZERO)
			{
				result = oFF.SacValueSign.ZERO;
			}
			else if (valueSign === oFF.ValueSign.POSITIVE)
			{
				result = oFF.SacValueSign.POSITIVE;
			}
			else if (valueSign === oFF.ValueSign.NULL_VALUE)
			{
				result = oFF.SacValueSign.NULL_VALUE;
			}
			else if (valueSign === oFF.ValueSign.UNBOOKED)
			{
				result = oFF.SacValueSign.UNBOOKED;
			}
			else if (valueSign === oFF.ValueSign.UNDEFINED)
			{
				result = oFF.SacValueSign.UNDEFINED;
			}
		}
		return result;
	},
	getVerticalAlignmentFromTable:function(verticalAlignment)
	{
			let result = null;
		if (verticalAlignment === oFF.SacVisualizationVerticalAlignment.TOP)
		{
			result = oFF.CellAlignmentVertical.TOP;
		}
		else if (verticalAlignment === oFF.SacVisualizationVerticalAlignment.MIDDLE)
		{
			result = oFF.CellAlignmentVertical.MIDDLE;
		}
		else if (verticalAlignment === oFF.SacVisualizationVerticalAlignment.BOTTOM)
		{
			result = oFF.CellAlignmentVertical.BOTTOM;
		}
		else if (verticalAlignment === oFF.SacVisualizationVerticalAlignment.INHERIT)
		{
			result = oFF.CellAlignmentVertical.INHERIT;
		}
		return result;
	},
	getVerticalAlignmentFromViz:function(verticalAlignment)
	{
			let result = null;
		if (verticalAlignment === oFF.CellAlignmentVertical.TOP)
		{
			result = oFF.SacVisualizationVerticalAlignment.TOP;
		}
		else if (verticalAlignment === oFF.CellAlignmentVertical.MIDDLE)
		{
			result = oFF.SacVisualizationVerticalAlignment.MIDDLE;
		}
		else if (verticalAlignment === oFF.CellAlignmentVertical.BOTTOM)
		{
			result = oFF.SacVisualizationVerticalAlignment.BOTTOM;
		}
		else if (verticalAlignment === oFF.CellAlignmentVertical.INHERIT)
		{
			result = oFF.SacVisualizationVerticalAlignment.INHERIT;
		}
		return result;
	}
};

oFF.GoogleChartBar = function() {};
oFF.GoogleChartBar.prototype = new oFF.GoogleChart();
oFF.GoogleChartBar.prototype._ff_c = "GoogleChartBar";

oFF.GoogleChartBar.create = function()
{
	return new oFF.GoogleChartBar();
};
oFF.GoogleChartBar.prototype.addChartSpecificOptions = function(structure, vizDef)
{
	let vizDefChart = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
	let vdType = vizDefChart.getStringByKey(oFF.VizDefConstants.K_TYPE);
	structure.putBoolean(oFF.GoogleConstants.K_STACKED, oFF.XString.isEqual(vdType, oFF.VizDefConstants.V_STACKED_BAR));
	let bar = structure.putNewStructure(oFF.GoogleConstants.K_BAR);
	bar.putString(oFF.GoogleConstants.K_GROUP_WIDTH, "50%");
	this.setAxisStyle(structure.putNewStructure(oFF.GoogleConstants.K_VERTICAL_AXIS), vizDef, oFF.VizDefConstants.K_CATEGORY_AXIS, true);
	this.setAxisStyle(structure.putNewStructure(oFF.GoogleConstants.K_HORIZONTAL_AXIS), vizDef, oFF.VizDefConstants.K_VALUE_AXIS, false);
};
oFF.GoogleChartBar.prototype.getChartName = function()
{
	return "BarChart";
};

oFF.GoogleChartColumn = function() {};
oFF.GoogleChartColumn.prototype = new oFF.GoogleChart();
oFF.GoogleChartColumn.prototype._ff_c = "GoogleChartColumn";

oFF.GoogleChartColumn.create = function()
{
	return new oFF.GoogleChartColumn();
};
oFF.GoogleChartColumn.prototype.addChartSpecificOptions = function(structure, vizDef)
{
	let vizDefChart = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART);
	let vdType = vizDefChart.getStringByKey(oFF.VizDefConstants.K_TYPE);
	structure.putBoolean(oFF.GoogleConstants.K_STACKED, oFF.XString.isEqual(vdType, oFF.VizDefConstants.V_STACKED_BAR));
	let bar = structure.putNewStructure(oFF.GoogleConstants.K_BAR);
	bar.putString(oFF.GoogleConstants.K_GROUP_WIDTH, "50%");
	this.setAxisStyle(structure.putNewStructure(oFF.GoogleConstants.K_VERTICAL_AXIS), vizDef, oFF.VizDefConstants.K_VALUE_AXIS, false);
	this.setAxisStyle(structure.putNewStructure(oFF.GoogleConstants.K_HORIZONTAL_AXIS), vizDef, oFF.VizDefConstants.K_CATEGORY_AXIS, true);
};
oFF.GoogleChartColumn.prototype.getChartName = function()
{
	return "ColumnChart";
};

oFF.GoogleChartLine = function() {};
oFF.GoogleChartLine.prototype = new oFF.GoogleChart();
oFF.GoogleChartLine.prototype._ff_c = "GoogleChartLine";

oFF.GoogleChartLine.POINT_SIZE = 3;
oFF.GoogleChartLine.create = function()
{
	return new oFF.GoogleChartLine();
};
oFF.GoogleChartLine.prototype.addChartSpecificOptions = function(structure, vizDef)
{
	structure.putInteger(oFF.GoogleConstants.K_POINT_SIZE, oFF.GoogleChartLine.POINT_SIZE);
	this.setAxisStyle(structure.putNewStructure(oFF.GoogleConstants.K_VERTICAL_AXIS), vizDef, oFF.VizDefConstants.K_VALUE_AXIS, false);
	this.setAxisStyle(structure.putNewStructure(oFF.GoogleConstants.K_HORIZONTAL_AXIS), vizDef, oFF.VizDefConstants.K_CATEGORY_AXIS, true);
};
oFF.GoogleChartLine.prototype.getChartName = function()
{
	return "LineChart";
};

oFF.RsHiChartCovariationHelper = function() {};
oFF.RsHiChartCovariationHelper.prototype = new oFF.RsHiChartRenderHelper();
oFF.RsHiChartCovariationHelper.prototype._ff_c = "RsHiChartCovariationHelper";

oFF.RsHiChartCovariationHelper.prototype.m_categoriesFormattedList = null;
oFF.RsHiChartCovariationHelper.prototype.m_categoriesList = null;
oFF.RsHiChartCovariationHelper.prototype.m_categoryLabels = null;
oFF.RsHiChartCovariationHelper.prototype.m_colorList = null;
oFF.RsHiChartCovariationHelper.prototype.m_tooltipList = null;
oFF.RsHiChartCovariationHelper.prototype.m_tooltipListFormatted = null;
oFF.RsHiChartCovariationHelper.prototype.m_tooltipValueMeasures = null;
oFF.RsHiChartCovariationHelper.prototype.m_xColors = null;
oFF.RsHiChartCovariationHelper.prototype.m_xList = null;
oFF.RsHiChartCovariationHelper.prototype.m_xListFormatted = null;
oFF.RsHiChartCovariationHelper.prototype.m_xMeasures = null;
oFF.RsHiChartCovariationHelper.prototype.m_xPatterns = null;
oFF.RsHiChartCovariationHelper.prototype.m_yColors = null;
oFF.RsHiChartCovariationHelper.prototype.m_yList = null;
oFF.RsHiChartCovariationHelper.prototype.m_yListFormatted = null;
oFF.RsHiChartCovariationHelper.prototype.m_yMeasures = null;
oFF.RsHiChartCovariationHelper.prototype.m_yPatterns = null;
oFF.RsHiChartCovariationHelper.prototype.m_zColors = null;
oFF.RsHiChartCovariationHelper.prototype.m_zList = null;
oFF.RsHiChartCovariationHelper.prototype.m_zListFormatted = null;
oFF.RsHiChartCovariationHelper.prototype.m_zMeasures = null;
oFF.RsHiChartCovariationHelper.prototype.m_zPatterns = null;
oFF.RsHiChartCovariationHelper.prototype.addToolTipsToSeries = function(newStructure, xOffset, rowIndex)
{
	if (oFF.XCollectionUtils.hasElements(this.m_tooltipValueMeasures))
	{
		let tsize = this.m_tooltipValueMeasures.size();
		for (let j = 0; j < tsize; j++)
		{
			newStructure.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_HEADER, oFF.XInteger.convertToString(j)), this.m_tooltipValueMeasures.get(j));
			newStructure.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_FORMATTED, oFF.XInteger.convertToString(j)), this.m_tooltipListFormatted.getListAt(xOffset * tsize + j).getStringAt(rowIndex));
		}
	}
};
oFF.RsHiChartCovariationHelper.prototype.addValueToList = function(rs, i, j, curList, curListFormatted, curFeed, columnAxis, columnTuple)
{
	let dataCellS = rs.getDataCell(i, j);
	let valueTypeS = dataCellS.getValueType();
	if (valueTypeS === oFF.XValueType.DOUBLE || valueTypeS === oFF.XValueType.DECIMAL_FLOAT)
	{
		if (dataCellS.getXValue() === null)
		{
			curList.addDouble(0);
		}
		else
		{
			curList.addDouble(dataCellS.getDouble());
		}
		let formattedValue = columnAxis.getFormattedValue(curFeed, columnTuple, dataCellS);
		curListFormatted.addString(formattedValue);
	}
};
oFF.RsHiChartCovariationHelper.prototype.decorateToolTip = function(stringBuffer) {};
oFF.RsHiChartCovariationHelper.prototype.getCategoriesFormattedList = function()
{
	return this.m_categoriesFormattedList;
};
oFF.RsHiChartCovariationHelper.prototype.getCategoriesList = function()
{
	return this.m_categoriesList;
};
oFF.RsHiChartCovariationHelper.prototype.getCategoryLabels = function()
{
	return this.m_categoryLabels;
};
oFF.RsHiChartCovariationHelper.prototype.getColorList = function()
{
	return this.m_colorList;
};
oFF.RsHiChartCovariationHelper.prototype.getXColors = function()
{
	return this.m_xColors;
};
oFF.RsHiChartCovariationHelper.prototype.getXList = function()
{
	return this.m_xList;
};
oFF.RsHiChartCovariationHelper.prototype.getXListFormatted = function()
{
	return this.m_xListFormatted;
};
oFF.RsHiChartCovariationHelper.prototype.getXListFormattedRemapped = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_xListFormatted))
	{
		return this.m_xListFormatted.getListAt(0);
	}
	return null;
};
oFF.RsHiChartCovariationHelper.prototype.getXListRemapped = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_xList))
	{
		return this.m_xList.getListAt(0);
	}
	return null;
};
oFF.RsHiChartCovariationHelper.prototype.getXMeasures = function()
{
	return this.m_xMeasures;
};
oFF.RsHiChartCovariationHelper.prototype.getXPatterns = function()
{
	return this.m_xPatterns;
};
oFF.RsHiChartCovariationHelper.prototype.getYColors = function()
{
	return this.m_yColors;
};
oFF.RsHiChartCovariationHelper.prototype.getYList = function()
{
	return this.m_yList;
};
oFF.RsHiChartCovariationHelper.prototype.getYListFormatted = function()
{
	return this.m_yListFormatted;
};
oFF.RsHiChartCovariationHelper.prototype.getYListFormattedRemapped = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_yListFormatted))
	{
		return this.m_yListFormatted.getListAt(0);
	}
	return this.getXListFormattedRemapped();
};
oFF.RsHiChartCovariationHelper.prototype.getYListRemapped = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_yList))
	{
		return this.m_yList.getListAt(0);
	}
	return this.getXListRemapped();
};
oFF.RsHiChartCovariationHelper.prototype.getYMeasures = function()
{
	return this.m_yMeasures;
};
oFF.RsHiChartCovariationHelper.prototype.getYPatterns = function()
{
	return this.m_yPatterns;
};
oFF.RsHiChartCovariationHelper.prototype.getZColors = function()
{
	return this.m_zColors;
};
oFF.RsHiChartCovariationHelper.prototype.getZList = function()
{
	return this.m_zList;
};
oFF.RsHiChartCovariationHelper.prototype.getZListFormatted = function()
{
	return this.m_zListFormatted;
};
oFF.RsHiChartCovariationHelper.prototype.getZListFormattedRemapped = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_zListFormatted))
	{
		return this.m_zListFormatted.getListAt(0);
	}
	return this.getYListFormattedRemapped();
};
oFF.RsHiChartCovariationHelper.prototype.getZListRemapped = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_zList))
	{
		return this.m_zList.getListAt(0);
	}
	return this.getYListRemapped();
};
oFF.RsHiChartCovariationHelper.prototype.getZMeasures = function()
{
	return this.m_zMeasures;
};
oFF.RsHiChartCovariationHelper.prototype.getZPatterns = function()
{
	return this.m_zPatterns;
};
oFF.RsHiChartCovariationHelper.prototype.readResultSetData = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let hideTotalOnRows = true;
	if (rs.getAvailableDataCellCount() > 0)
	{
		this.m_xMeasures = oFF.XList.create();
		this.m_yMeasures = oFF.XList.create();
		this.m_zMeasures = oFF.XList.create();
		this.m_xPatterns = oFF.XList.create();
		this.m_yPatterns = oFF.XList.create();
		this.m_zPatterns = oFF.XList.create();
		this.m_xColors = oFF.XList.create();
		this.m_yColors = oFF.XList.create();
		this.m_zColors = oFF.XList.create();
		let colFeeds = oFF.XList.create();
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getXFeed()))
		{
			colFeeds.add(this.getXFeed());
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getYFeed()))
		{
			colFeeds.add(this.getYFeed());
		}
		if (oFF.XStringUtils.isNotNullAndNotEmpty(this.getZFeed()))
		{
			colFeeds.add(this.getZFeed());
		}
		this.m_tooltipValueMeasures = oFF.XList.create();
		colFeeds.add(oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
		this.m_colorList = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_COLOR);
		this.m_categoriesList = rowAxis.getPrettyNames(true, !hideTotalOnRows);
		this.m_categoriesFormattedList = rowAxis.getCategories(true, !hideTotalOnRows, oFF.VizDefConstants.K_CATEGORY_AXIS);
		this.m_categoryLabels = rowAxis.getLabels(true, !hideTotalOnRows, true);
		if (!oFF.XCollectionUtils.hasElements(this.m_categoriesList))
		{
			this.m_categoriesList = oFF.XList.create();
			this.m_categoriesList.add("");
		}
		this.m_xList = oFF.PrFactory.createList();
		this.m_yList = oFF.PrFactory.createList();
		this.m_zList = oFF.PrFactory.createList();
		this.m_tooltipList = oFF.PrFactory.createList();
		this.m_xListFormatted = oFF.PrFactory.createList();
		this.m_yListFormatted = oFF.PrFactory.createList();
		this.m_zListFormatted = oFF.PrFactory.createList();
		this.m_tooltipListFormatted = oFF.PrFactory.createList();
		let curList;
		let curListFormatted;
		let curFeed;
		let rowSelector = oFF.XList.create();
		rowSelector.add(oFF.VizDefConstants.K_CATEGORY_AXIS);
		rowSelector.add(oFF.VizDefConstants.K_COLOR);
		let indices = columnAxis.getIndicesByFeedOrder(colFeeds);
		for (let ij = 0; ij < indices.size(); ij++)
		{
			let i = indices.get(ij).getInteger();
			let columnTuple = columnAxis.getTupleAt(i);
			if (columnTuple.isSelectedByString(this.getXFeed()))
			{
				let xTitle = columnTuple.getPrettyTextForFeed(this.getXFeed());
				if (!this.m_xMeasures.contains(xTitle))
				{
					this.m_xMeasures.add(xTitle);
					this.m_xPatterns.add(columnTuple.getPattern());
					this.m_xColors.add(columnTuple.getColor());
				}
				curList = this.m_xList.addNewList();
				curListFormatted = this.m_xListFormatted.addNewList();
				curFeed = this.getXFeed();
			}
			else if (this.getYFeed() !== null && columnTuple.isSelectedByString(this.getYFeed()))
			{
				let yTitle = columnTuple.getPrettyTextForFeed(this.getYFeed());
				if (!this.m_yMeasures.contains(yTitle))
				{
					this.m_yMeasures.add(yTitle);
					this.m_yPatterns.add(columnTuple.getPattern());
					this.m_yColors.add(columnTuple.getColor());
				}
				curList = this.m_yList.addNewList();
				curListFormatted = this.m_yListFormatted.addNewList();
				curFeed = this.getYFeed();
			}
			else if (this.getZFeed() !== null && columnTuple.isSelectedByString(this.getZFeed()))
			{
				let zTitle = columnTuple.getPrettyTextForFeed(this.getZFeed());
				if (!this.m_zMeasures.contains(zTitle))
				{
					this.m_zMeasures.add(zTitle);
					this.m_zPatterns.add(columnTuple.getPattern());
					this.m_zColors.add(columnTuple.getColor());
				}
				curList = this.m_zList.addNewList();
				curListFormatted = this.m_zListFormatted.addNewList();
				curFeed = this.getZFeed();
			}
			else if (columnTuple.isSelectedByString(oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS))
			{
				let tTitle = columnTuple.getPrettyTextForFeed(oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
				if (!this.m_tooltipValueMeasures.contains(tTitle))
				{
					this.m_tooltipValueMeasures.add(tTitle);
				}
				curList = this.m_tooltipList.addNewList();
				curListFormatted = this.m_tooltipListFormatted.addNewList();
				curFeed = "";
			}
			else
			{
				continue;
			}
			if (rowAxis.getTuplesCount() > 0)
			{
				for (let j = 0; j < rowAxis.getTuplesCount(); j++)
				{
					if (hideTotalOnRows && rowAxis.getTupleAt(j).isTotal())
					{
						continue;
					}
					this.addValueToList(rs, i, j, curList, curListFormatted, curFeed, columnAxis, columnTuple);
				}
			}
			else
			{
				this.addValueToList(rs, i, 0, curList, curListFormatted, curFeed, columnAxis, columnTuple);
			}
		}
		let tooltipBuffer = oFF.XStringBuffer.create();
		tooltipBuffer.append("<b>{series.name}</b><br/>");
		this.decorateToolTip(tooltipBuffer);
		for (let ti = 0; ti < this.m_tooltipListFormatted.size(); ti++)
		{
			tooltipBuffer.append("<b>{point.tHeader");
			tooltipBuffer.append(oFF.XInteger.convertToString(ti));
			tooltipBuffer.append("}</b>  {point.tFormatted");
			tooltipBuffer.append(oFF.XInteger.convertToString(ti));
			tooltipBuffer.append("}<br/>");
		}
		tooltipBuffer.append("{point.errorRange}");
		let ttStruct = theChartData.putNewStructure(oFF.VizDefConstants.K_TOOLTIP);
		ttStruct.putString(oFF.VizDefConstants.K_POINT_FORMAT, tooltipBuffer.toString());
		ttStruct.putString(oFF.VizDefConstants.K_HEADER_FORMAT, "");
	}
	this.setShowLegend(oFF.XCollectionUtils.hasElements(this.getXList()));
};

oFF.RsHiChartHeatmapHelper = function() {};
oFF.RsHiChartHeatmapHelper.prototype = new oFF.RsHiChartRenderHelper();
oFF.RsHiChartHeatmapHelper.prototype._ff_c = "RsHiChartHeatmapHelper";

oFF.RsHiChartHeatmapHelper.prototype.finishRendering = function()
{
	oFF.RsHiChartVizUtilsHeatmap.rendrerHeatmap(this.getChartData(), this.getChartType(), this.getVizDef(), this.getGlobalDef());
};
oFF.RsHiChartHeatmapHelper.prototype.isShowLegend = function()
{
	return false;
};
oFF.RsHiChartHeatmapHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartHeatmapHelper.prototype.readResultSetData = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let listOfDoubles = oFF.XList.create();
	let chartlang = theChartData.putNewStructure(oFF.VizDefConstants.K_LANG);
	if (rs.getAvailableDataCellCount() > 0)
	{
		let hideTotalOnRows = true;
		let xAxis = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
		let yAxis = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
		let xAxisStruct = xAxis.addNewStructure();
		let yAxisStruct = yAxis.addNewStructure();
		let yDList = yAxisStruct.putNewList(oFF.VizDefConstants.K_CATEGORIES);
		let xDList = xAxisStruct.putNewList(oFF.VizDefConstants.K_CATEGORIES);
		let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
		let seriesListStructure = seriesList.addNewStructure();
		let dataLabels = seriesListStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
		dataLabels.putString(oFF.VizDefConstants.K_POINT_FORMAT, "{point.valueFormatted}");
		let dataLayerList = seriesListStructure.putNewList(oFF.VizDefConstants.K_DATA);
		let tooltipBuffer = oFF.XStringBuffer.create();
		let columnSelectors = oFF.XList.create();
		columnSelectors.add(oFF.VizDefConstants.K_COLOR);
		let colorList = oFF.XList.create();
		tooltipBuffer.append("<b>{point.xCategory} / {point.yCategory}</b><br/><b>{point.series.name}</b>:  {point.valueFormatted}<br/>");
		let columnIterator = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_CATEGORY_AXIS2).getIterator();
		while (columnIterator.hasNext())
		{
			xDList.addString(columnIterator.next());
		}
		let straightOrdering = oFF.XCollectionUtils.hasElements(xDList) && xDList.size() > 1;
		let rowIterator = rowAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_CATEGORY_AXIS).getIterator();
		let tooltipHeaders = columnAxis.getPrettyNamesForFeed(true, false, oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
		for (let h = 0; h < tooltipHeaders.size(); h++)
		{
			tooltipBuffer.append("<b>{point.tHeader");
			tooltipBuffer.append(oFF.XInteger.convertToString(h));
			tooltipBuffer.append("}</b>:  {point.tFormatted");
			tooltipBuffer.append(oFF.XInteger.convertToString(h));
			tooltipBuffer.append("}<br/>");
		}
		while (rowIterator.hasNext())
		{
			yDList.addString(rowIterator.next());
		}
		if (xDList.isEmpty())
		{
			xDList.addString("");
		}
		if (yDList.isEmpty())
		{
			yDList.addString("");
		}
		let ii = 0;
		let indices = columnAxis.getIndicesByFeedOrder(columnSelectors);
		for (let ij = 0; ij < indices.size(); ij++)
		{
			let i = indices.get(ij).getInteger();
			let columnTuple = columnAxis.getTupleAt(i);
			if (!columnTuple.isSelectedByString(oFF.VizDefConstants.K_COLOR))
			{
				continue;
			}
			if (hideTotalOnRows && columnAxis.getTupleAt(i).isTotal())
			{
				continue;
			}
			colorList.add(columnTuple.getPrettyTextForFeed(oFF.VizDefConstants.K_COLOR));
			let memberNames = columnTuple.getMemberKeys();
			let tooltipIndices = null;
			let tooltipValues = null;
			if (oFF.XCollectionUtils.hasElements(memberNames))
			{
				tooltipIndices = columnAxis.getMatchingTupleIndicesForMemberNameAndFeed(memberNames, oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
			}
			let jj = 0;
			for (let j = 0; j < rowAxis.getTuplesCount(); j++)
			{
				if (!rowAxis.getTupleAt(j).isSelectedByString(oFF.VizDefConstants.K_CATEGORY_AXIS))
				{
					continue;
				}
				if (oFF.XCollectionUtils.hasElements(tooltipIndices))
				{
					tooltipValues = oFF.XList.create();
					for (let ttindex = 0; ttindex < tooltipIndices.size(); ttindex++)
					{
						let tooltipIndex = tooltipIndices.get(ttindex).getInteger();
						tooltipValues.add(columnAxis.getFormattedValue(oFF.VizDefConstants.K_COLOR, columnAxis.getTupleAt(tooltipIndex), rs.getDataCell(tooltipIndex, j)));
					}
				}
				let dataCell1 = rs.getDataCell(i, j);
				let dataList = oFF.PrFactory.createStructure();
				let xValue = dataCell1.getXValue();
				if (!hideTotalOnRows || !rowAxis.getTupleAt(j).isTotal())
				{
					if (oFF.notNull(xValue))
					{
						dataList.putInteger(oFF.VizDefConstants.K_X, straightOrdering ? ii : jj);
						dataList.putInteger(oFF.VizDefConstants.K_Y, straightOrdering ? jj : ii);
						dataList.putDouble(oFF.VizDefConstants.K_VALUE, dataCell1.getDouble());
						dataList.putString(oFF.VizDefConstants.K_VALUE_FORMATTED, dataCell1.getFormattedValue());
						dataList.putString(oFF.VizDefConstants.K_X_CATEGORY, oFF.XCollectionUtils.hasElements(xDList) && ii < xDList.size() ? xDList.getStringAt(ii) : "");
						dataList.putString(oFF.VizDefConstants.K_Y_CATEGORY, oFF.XCollectionUtils.hasElements(yDList) && jj < yDList.size() ? yDList.getStringAt(jj) : "");
						if (oFF.XCollectionUtils.hasElements(tooltipHeaders))
						{
							for (let th = 0; th < tooltipHeaders.size(); th++)
							{
								dataList.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_HEADER, oFF.XInteger.convertToString(th)), tooltipHeaders.get(th));
							}
						}
						if (oFF.XCollectionUtils.hasElements(tooltipValues))
						{
							for (let tv = 0; tv < tooltipValues.size(); tv++)
							{
								dataList.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_FORMATTED, oFF.XInteger.convertToString(tv)), tooltipValues.get(tv));
							}
						}
						dataLayerList.add(dataList);
						listOfDoubles.add(oFF.XDoubleValue.create(dataCell1.getDouble()));
					}
				}
				jj++;
			}
			ii++;
		}
		if (!straightOrdering)
		{
			yAxisStruct.put(oFF.VizDefConstants.K_CATEGORIES, xDList);
			xAxisStruct.put(oFF.VizDefConstants.K_CATEGORIES, yDList);
		}
		if (oFF.XCollectionUtils.hasElements(colorList))
		{
			seriesListStructure.putString(oFF.VizDefConstants.K_NAME, colorList.get(0));
		}
		let maxelement = oFF.XDoubleValue.create(1);
		if (listOfDoubles.size() > 1)
		{
			listOfDoubles.sortByComparator(new oFF.XComparatorDouble());
			maxelement = listOfDoubles.get(listOfDoubles.size() - 1);
		}
		seriesListStructure.putInteger(oFF.VizDefConstants.K_BORDER_WIDTH, 2);
		seriesListStructure.putString(oFF.VizDefConstants.K_BORDER_COLOR, "white");
		if (oFF.XCollectionUtils.hasElements(listOfDoubles))
		{
			theChartData.putDouble(oFF.VizDefConstants.K_MIN_ELEMENT, listOfDoubles.get(0).getDouble());
			theChartData.putDouble(oFF.VizDefConstants.K_MAX_ELEMENT, maxelement.getDouble());
		}
		let tooltip = theChartData.putNewStructure(oFF.VizDefConstants.K_TOOLTIP);
		tooltip.putString(oFF.VizDefConstants.K_POINT_FORMAT, tooltipBuffer.toString());
		tooltip.putString(oFF.VizDefConstants.K_HEADER_FORMAT, "");
		oFF.RsHiChartVizUtilsHeatmap.rendrerHeatmap(theChartData, this.getChartType(), this.getVizDef(), this.getGlobalDef());
	}
	else
	{
		theChartData.putBoolean(oFF.VizDefConstants.K_FULL_SCREEN_ENABLED, false);
		chartlang.putString(oFF.VizDefConstants.K_NO_DATA, "FireFly Resultset is empty.");
	}
};

oFF.RsHiChartSeriesHelper = function() {};
oFF.RsHiChartSeriesHelper.prototype = new oFF.RsHiChartRenderHelper();
oFF.RsHiChartSeriesHelper.prototype._ff_c = "RsHiChartSeriesHelper";

oFF.RsHiChartSeriesHelper.X_LIMIT = 5;
oFF.RsHiChartSeriesHelper.prototype.m_chartWidth = 0;
oFF.RsHiChartSeriesHelper.prototype.m_hasVariance = false;
oFF.RsHiChartSeriesHelper.prototype.m_maxYValue = 0.0;
oFF.RsHiChartSeriesHelper.prototype.m_widthScale = 0;
oFF.RsHiChartSeriesHelper.prototype.getChartWidth = function()
{
	return this.m_chartWidth;
};
oFF.RsHiChartSeriesHelper.prototype.getMaxYValue = function()
{
	return this.m_maxYValue;
};
oFF.RsHiChartSeriesHelper.prototype.getWidthScale = function()
{
	return this.m_widthScale;
};
oFF.RsHiChartSeriesHelper.prototype.isCombinationChart = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.getSecondChart());
};
oFF.RsHiChartSeriesHelper.prototype.isHasVariance = function()
{
	return this.m_hasVariance;
};
oFF.RsHiChartSeriesHelper.prototype.isTimeseries = function()
{
	return false;
};
oFF.RsHiChartSeriesHelper.prototype.reiterateResultSet = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let hideTotalOnRows = !rs.getQueryModel().getRowsAxis().isTotalsVisible();
	let hasValueAxis2 = columnAxis.hasTupleForFeed(oFF.VizDefConstants.K_VALUE_AXIS2);
	let yAxisList = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
	let yAxis = yAxisList.addNewStructure();
	let xAxis;
	let xAxisStruct;
	let plotOptions = oFF.PrFactory.createStructure();
	plotOptions = theChartData.getStructureByKey(oFF.VizDefConstants.K_PLOT_OPTIONS);
	let fillColor = oFF.VizDefConstants.K_TRANSPARENT;
	if (theChartData.getListByKey(oFF.VizDefConstants.K_COLORS) !== null)
	{
		if (theChartData.getListByKey(oFF.VizDefConstants.K_COLORS).size() > 0)
		{
			fillColor = theChartData.getListByKey(oFF.VizDefConstants.K_COLORS).getStringAt(0);
		}
	}
	if (oFF.isNull(plotOptions))
	{
		plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
	}
	let series = theChartData.getListByKey(oFF.VizDefConstants.K_SERIES);
	let seriesType = null;
	let errorBarIndex = 0;
	if (this.isTimeseries())
	{
		xAxis = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
		xAxisStruct = xAxis.addNewStructure();
		xAxisStruct.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_DATE_TIME);
	}
	else
	{
		xAxis = theChartData.getListByKey(oFF.VizDefConstants.K_X_AXIS);
		if (oFF.isNull(xAxis))
		{
			xAxis = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
		}
		xAxisStruct = xAxis.getStructureAt(0);
		if (oFF.isNull(xAxisStruct))
		{
			xAxisStruct = xAxis.addNewStructure();
		}
	}
	xAxisStruct.putInteger(oFF.VizDefConstants.K_MIN, 0);
	let xSize = this.getChartWidth();
	let scrollbarStruct = this.getChartData().getStructureByKey(oFF.VizDefConstants.K_SCROLL_BAR);
	if (oFF.isNull(scrollbarStruct))
	{
		scrollbarStruct = this.getChartData().putNewStructure(oFF.VizDefConstants.K_SCROLL_BAR);
	}
	if (xSize > oFF.RsHiChartSeriesHelper.X_LIMIT)
	{
		xAxisStruct.putInteger(oFF.VizDefConstants.K_MAX, oFF.RsHiChartSeriesHelper.X_LIMIT);
	}
	else
	{
		scrollbarStruct.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
		xAxisStruct.putInteger(oFF.VizDefConstants.K_MAX, xSize - 1);
	}
	if (this.getStackingType() === null || oFF.ChartStackingType.NONE.isEqualTo(oFF.ChartStackingType.lookup(this.getStackingType())))
	{
		yAxis.putDouble(oFF.VizDefConstants.K_MAX, this.getMaxYValue());
	}
	let yAxis1 = null;
	if (hasValueAxis2)
	{
		let axisMeasures1 = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_VALUE_AXIS2);
		let axisTitle1 = oFF.XCollectionUtils.join(axisMeasures1, ",");
		yAxis1 = yAxisList.addNewStructure();
		oFF.RsHiChartVizUtilsSimple.plotOptionChart(yAxis1, this.getSecondChart(), null, plotOptions, 1, fillColor, axisTitle1);
		yAxis1.putBoolean(oFF.VizDefConstants.K_OPPOSITE, true);
		if (this.isHasVariance())
		{
			if (this.isInverted())
			{
				yAxis1.putString(oFF.VizDefConstants.K_WIDTH, "50%");
			}
			else
			{
				yAxis1.putString(oFF.VizDefConstants.K_WIDTH, "50%");
				yAxis.putString(oFF.VizDefConstants.V_POSITION_TOP, "50%");
			}
		}
		oFF.RsHiChartVizUtilsSimple.dataLabelAlignment(yAxis1, this.getSecondChart(), columnAxis.getDecimalPlaces(oFF.VizDefConstants.K_VALUE_AXIS2), false);
	}
	let seriesStruct;
	let seriesStructPrevious;
	let hasErrorBar = false;
	let vizProp = null;
	if (this.getVizDef() !== null)
	{
		vizProp = this.getVizDef().getStructureByKey(oFF.VizDefConstants.K_CHART).getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
		if (oFF.notNull(vizProp))
		{
			let vizPropCategoryAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_CATEGORY_AXIS);
			if (oFF.notNull(vizPropCategoryAxis) && !this.isPolar())
			{
				xAxisStruct = oFF.RsHiChartUtils.axisPloter(vizPropCategoryAxis, xAxisStruct, this.getChartType(), true);
			}
			let vizPropValueAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_VALUE_AXIS);
			if (oFF.notNull(vizPropValueAxis) && !this.isPolar())
			{
				yAxis = oFF.RsHiChartUtils.axisPloter(vizPropValueAxis, yAxis, this.getChartType(), false);
			}
			oFF.RsHiChartVizUtilsSimple.addReferenceLine(this.getVizDef(), yAxis, yAxis1, columnAxis, rowAxis, rs);
		}
	}
	if (this.isHasVariance())
	{
		let yAxis2 = yAxisList.addNewStructure();
		if (this.isInverted())
		{
			yAxis.putString(oFF.VizDefConstants.K_WIDTH, "50%");
			yAxis2.putString(oFF.VizDefConstants.K_WIDTH, "50%");
			yAxis2.putString(oFF.VizDefConstants.V_LEFT, "50%");
		}
		else
		{
			yAxis.putString(oFF.VizDefConstants.K_HEIGHT, "50%");
			yAxis2.putString(oFF.VizDefConstants.K_HEIGHT, "50%");
			yAxis.putString(oFF.VizDefConstants.V_POSITION_TOP, "50%");
		}
		if (oFF.notNull(vizProp))
		{
			let valAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_VALUE_AXIS);
			if (oFF.notNull(valAxis))
			{
				oFF.RsHiChartUtils.axisPloter(valAxis, yAxis2, this.getChartType(), false);
			}
		}
		let axisMeasures2 = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_VARIANCE);
		let axisTitle2 = oFF.XCollectionUtils.join(axisMeasures2, ",");
		oFF.RsHiChartVizUtilsSimple.plotOptionChart(yAxis2, this.getChartType(), null, plotOptions, this.isCombinationChart() ? 2 : 1, fillColor, axisTitle2);
	}
	oFF.RsHiChartVizUtilsSimple.legendStyler(theChartData);
	if (hasErrorBar)
	{
		for (let z = 0; z < series.size(); z++)
		{
			oFF.RsHiChartVizUtilsSimple.plotOptionChart(yAxis, this.getChartType(), this.getStackingType(), plotOptions, 0, fillColor, "");
			seriesStruct = series.getStructureAt(z);
			seriesType = seriesStruct.getStringByKey(oFF.VizDefConstants.K_TYPE);
			if (oFF.XString.isEqual(seriesType, oFF.VizDefConstants.K_ERRORBAR))
			{
				errorBarIndex = z;
				seriesStructPrevious = series.getStructureAt(errorBarIndex - 1);
				let dataLabelsSeriesStruct = seriesStruct.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
				dataLabelsSeriesStruct.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
				let dataLabelsSeriesStructStyle = dataLabelsSeriesStruct.putNewStructure(oFF.VizDefConstants.K_STYLE);
				dataLabelsSeriesStructStyle.putString(oFF.VizDefConstants.K_FILL, "black");
				dataLabelsSeriesStructStyle.putString(oFF.VizDefConstants.K_COLOR, "black");
				let dataLabelsSeriesStructPrevious = seriesStructPrevious.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
				dataLabelsSeriesStructPrevious.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
			}
		}
	}
	else
	{
		let axisMeasures3 = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_VALUE_AXIS);
		let axisTitle3 = oFF.XCollectionUtils.join(axisMeasures3, ",");
		oFF.RsHiChartVizUtilsSimple.plotOptionChart(yAxis, this.getChartType(), this.getStackingType(), plotOptions, 0, fillColor, axisTitle3);
	}
	let showStackingLabels = oFF.XStringUtils.isNullOrEmpty(this.getSecondChart()) && oFF.XString.isEqual(oFF.VizDefConstants.V_NORMAL, this.getStackingType()) && (oFF.XString.isEqual(this.getChartType(), oFF.VizDefConstants.V_CHART_TYPE_BAR) || oFF.XString.isEqual(this.getChartType(), oFF.VizDefConstants.V_CHART_TYPE_COLUMN));
	oFF.RsHiChartVizUtilsSimple.dataLabelAlignment(yAxis, this.getChartType(), columnAxis.getDecimalPlaces(oFF.VizDefConstants.K_VALUE_AXIS), showStackingLabels);
	let isBar = oFF.XString.isEqual(oFF.VizDefConstants.V_CHART_TYPE_BAR, this.getChartType());
	let isColumn = oFF.XString.isEqual(oFF.VizDefConstants.V_CHART_TYPE_COLUMN, this.getChartType());
	if (isBar || isColumn)
	{
		let plotLines = yAxis.containsKey(oFF.VizDefConstants.K_PLOT_LINES) ? yAxis.getListByKey(oFF.VizDefConstants.K_PLOT_LINES) : yAxis.putNewList(oFF.VizDefConstants.K_PLOT_LINES);
		let plotLinepProp = plotLines.addNewStructure();
		plotLinepProp.putString(oFF.VizDefConstants.K_COLOR, oFF.VizDefConstants.V_BLACK);
		plotLinepProp.putInteger(oFF.VizDefConstants.K_WIDTH, 2);
		plotLinepProp.putInteger(oFF.VizDefConstants.K_VALUE, 0);
		plotLinepProp.putString(oFF.VizDefConstants.K_ID, oFF.VizDefConstants.V_BASE_PLOTLINE_ID);
		plotLinepProp.putInteger(oFF.VizDefConstants.K_Z_INDEX, 6);
	}
};
oFF.RsHiChartSeriesHelper.prototype.setChartWidth = function(chartWidth)
{
	this.m_chartWidth = chartWidth;
};
oFF.RsHiChartSeriesHelper.prototype.setHasVariance = function(hasVariance)
{
	this.m_hasVariance = hasVariance;
};
oFF.RsHiChartSeriesHelper.prototype.setMaxYValue = function(maxYValue)
{
	this.m_maxYValue = maxYValue;
};
oFF.RsHiChartSeriesHelper.prototype.setWidthScale = function(widthScale)
{
	this.m_widthScale = widthScale;
};

oFF.RsHiChartUnsupportedHelper = function() {};
oFF.RsHiChartUnsupportedHelper.prototype = new oFF.RsHiChartRenderHelper();
oFF.RsHiChartUnsupportedHelper.prototype._ff_c = "RsHiChartUnsupportedHelper";

oFF.RsHiChartUnsupportedHelper.prototype.finishRendering = function() {};
oFF.RsHiChartUnsupportedHelper.prototype.isUnsupported = function()
{
	return true;
};
oFF.RsHiChartUnsupportedHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartUnsupportedHelper.prototype.readResultSetData = function(columnAxis, rowAxis, rs) {};

oFF.RscCellValueReference = function() {};
oFF.RscCellValueReference.prototype = new oFF.RscGenericValue();
oFF.RscCellValueReference.prototype._ff_c = "RscCellValueReference";

oFF.RscCellValueReference.create = function(value, text, formattedValueSimple, formattedValue, formattedValueFull, patternSimple, pattern, patternFull, decimalSeparator, decimalGroupSeparator, numericShift, currencyUnit, complexUnit, cellValueType, valueException, tags, exceptionName, alertLevel, documentId, dataEntryEnabled, dataCellName)
{
	let instance = new oFF.RscCellValueReference();
	instance.setupCellValue(value, text, patternSimple, formattedValueSimple, pattern, formattedValue, patternFull, formattedValueFull, decimalSeparator, decimalGroupSeparator, numericShift, currencyUnit, complexUnit, cellValueType, valueException, tags, exceptionName, alertLevel, documentId, dataEntryEnabled, dataCellName);
	return instance;
};
oFF.RscCellValueReference.prototype.m_alertLevel = null;
oFF.RscCellValueReference.prototype.m_cellValueType = null;
oFF.RscCellValueReference.prototype.m_complexUnit = null;
oFF.RscCellValueReference.prototype.m_currencyUnit = null;
oFF.RscCellValueReference.prototype.m_dataCellName = null;
oFF.RscCellValueReference.prototype.m_dataEntryEnabled = false;
oFF.RscCellValueReference.prototype.m_documentId = null;
oFF.RscCellValueReference.prototype.m_exceptionName = null;
oFF.RscCellValueReference.prototype.m_numericShift = 0;
oFF.RscCellValueReference.prototype.m_scalingText = null;
oFF.RscCellValueReference.prototype.m_tags = null;
oFF.RscCellValueReference.prototype.m_unitInformation = null;
oFF.RscCellValueReference.prototype.m_valueException = null;
oFF.RscCellValueReference.prototype.getAlertLevel = function()
{
	return this.m_alertLevel;
};
oFF.RscCellValueReference.prototype.getCellValueType = function()
{
	return this.m_cellValueType;
};
oFF.RscCellValueReference.prototype.getComplexUnit = function()
{
	return this.m_complexUnit;
};
oFF.RscCellValueReference.prototype.getCurrencyUnit = function()
{
	return this.m_currencyUnit;
};
oFF.RscCellValueReference.prototype.getDataCellName = function()
{
	return this.m_dataCellName;
};
oFF.RscCellValueReference.prototype.getDocumentId = function()
{
	return this.m_documentId;
};
oFF.RscCellValueReference.prototype.getExceptionName = function()
{
	return this.m_exceptionName;
};
oFF.RscCellValueReference.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.RscCellValueReference.prototype.getReversedScalingFactor = function()
{
	return -this.m_numericShift;
};
oFF.RscCellValueReference.prototype.getScalingText = function()
{
	return this.m_scalingText;
};
oFF.RscCellValueReference.prototype.getTags = function()
{
	return this.m_tags;
};
oFF.RscCellValueReference.prototype.getUnitInformation = function()
{
	return this.m_unitInformation;
};
oFF.RscCellValueReference.prototype.getValueException = function()
{
	return this.m_valueException;
};
oFF.RscCellValueReference.prototype.isDataEntryEnabled = function()
{
	return this.m_dataEntryEnabled;
};
oFF.RscCellValueReference.prototype.releaseObject = function()
{
	this.m_numericShift = 0;
	this.m_currencyUnit = null;
	this.m_complexUnit = null;
	this.m_cellValueType = null;
	this.m_valueException = null;
	this.m_tags = oFF.XObjectExt.release(this.m_tags);
	this.m_exceptionName = null;
	this.m_alertLevel = null;
	this.m_documentId = null;
	this.m_dataEntryEnabled = false;
	this.m_dataCellName = null;
	oFF.RscGenericValue.prototype.releaseObject.call( this );
};
oFF.RscCellValueReference.prototype.setScalingText = function(formattedScale)
{
	this.m_scalingText = formattedScale;
};
oFF.RscCellValueReference.prototype.setUnitInformation = function(unitInformation)
{
	this.m_unitInformation = unitInformation;
};
oFF.RscCellValueReference.prototype.setupCellValue = function(value, text, patternSimple, formattedValueSimple, pattern, formattedValue, patternFull, formattedValueFull, decimalSeparator, decimalGroupSeparator, numericShift, currencyUnit, complexUnit, cellValueType, valueException, tags, exceptionName, alertLevel, documentId, dataEntryEnabled, dataCellName)
{
	oFF.RscGenericValue.prototype.setupInternal.call( this , value, text, patternSimple, formattedValueSimple, pattern, formattedValue, patternFull, formattedValueFull);
	this.m_numericShift = numericShift;
	this.m_currencyUnit = currencyUnit;
	this.m_complexUnit = complexUnit;
	this.m_cellValueType = cellValueType;
	this.m_tags = tags;
	this.m_valueException = valueException;
	this.m_exceptionName = exceptionName;
	this.m_alertLevel = alertLevel;
	this.m_documentId = documentId;
	this.m_dataEntryEnabled = dataEntryEnabled;
	this.m_dataCellName = dataCellName;
	this.setDecimalSeparator(decimalSeparator);
	this.setDecimalGroupSeparator(decimalGroupSeparator);
};

oFF.RscDataSectionInfoTag = function() {};
oFF.RscDataSectionInfoTag.prototype = new oFF.XObject();
oFF.RscDataSectionInfoTag.prototype._ff_c = "RscDataSectionInfoTag";

oFF.RscDataSectionInfoTag.create = function(fieldValueReference)
{
	let instance = new oFF.RscDataSectionInfoTag();
	instance.setupWithFieldValueReference(fieldValueReference);
	return instance;
};
oFF.RscDataSectionInfoTag.prototype.m_fieldValueReference = null;
oFF.RscDataSectionInfoTag.prototype.m_headerBand = false;
oFF.RscDataSectionInfoTag.prototype.m_innerBand = false;
oFF.RscDataSectionInfoTag.prototype.m_totalBand = false;
oFF.RscDataSectionInfoTag.prototype.copyFrom = function(other, flags)
{
	let orig = other;
	this.m_fieldValueReference = orig.m_fieldValueReference;
	this.m_headerBand = orig.m_headerBand;
	this.m_innerBand = orig.m_innerBand;
	this.m_totalBand = orig.m_totalBand;
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
};
oFF.RscDataSectionInfoTag.prototype.createCopy = function()
{
	let newInstance = oFF.RscDataSectionInfoTag.create(this.m_fieldValueReference);
	newInstance.copyFrom(this, null);
	return newInstance;
};
oFF.RscDataSectionInfoTag.prototype.getFieldReference = function()
{
	return oFF.notNull(this.m_fieldValueReference) ? this.m_fieldValueReference.getFieldReference() : null;
};
oFF.RscDataSectionInfoTag.prototype.getGroupLevel = function()
{
	let fieldReference = this.getFieldReference();
	return oFF.notNull(fieldReference) ? fieldReference.getDimensionIndex() : -1;
};
oFF.RscDataSectionInfoTag.prototype.getGroupName = function()
{
	let fieldReference = this.getFieldReference();
	return oFF.notNull(fieldReference) ? fieldReference.getDimension().getName() : null;
};
oFF.RscDataSectionInfoTag.prototype.getReversedGroupLevel = function()
{
	let fieldReference = this.getFieldReference();
	return oFF.notNull(fieldReference) ? fieldReference.getReversedDimensionIndex() : -1;
};
oFF.RscDataSectionInfoTag.prototype.getSectionLevel = function()
{
	return oFF.notNull(this.m_fieldValueReference) ? this.m_fieldValueReference.getDisplayLevel() : -1;
};
oFF.RscDataSectionInfoTag.prototype.getSectionLevelName = function()
{
	return null;
};
oFF.RscDataSectionInfoTag.prototype.getSectionNodeName = function()
{
	return oFF.XObjectExt.isValidObject(this.m_fieldValueReference) ? this.m_fieldValueReference.getDimensionMemberName() : null;
};
oFF.RscDataSectionInfoTag.prototype.isExactSectionLevel = function()
{
	return true;
};
oFF.RscDataSectionInfoTag.prototype.isExpanded = function()
{
	let drillState = oFF.XObjectExt.isValidObject(this.m_fieldValueReference) ? this.m_fieldValueReference.getDrillState() : null;
	return drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED;
};
oFF.RscDataSectionInfoTag.prototype.isGroupLevelEnd = function()
{
	return !oFF.XObjectExt.isValidObject(this.m_fieldValueReference) || this.m_fieldValueReference.isDimensionSectionEnd();
};
oFF.RscDataSectionInfoTag.prototype.isGroupLevelStart = function()
{
	return !oFF.XObjectExt.isValidObject(this.m_fieldValueReference) || this.m_fieldValueReference.isDimensionSectionStart();
};
oFF.RscDataSectionInfoTag.prototype.isHeaderBand = function()
{
	return this.m_headerBand;
};
oFF.RscDataSectionInfoTag.prototype.isHierarchyBottomUp = function()
{
	let fieldReference = this.getFieldReference();
	return oFF.notNull(fieldReference) && fieldReference.getLowerLevelNodeAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT;
};
oFF.RscDataSectionInfoTag.prototype.isInnerBand = function()
{
	return this.m_innerBand;
};
oFF.RscDataSectionInfoTag.prototype.isLeaf = function()
{
	let drillState = oFF.XObjectExt.isValidObject(this.m_fieldValueReference) ? this.m_fieldValueReference.getDrillState() : null;
	return drillState === oFF.DrillState.LEAF || oFF.isNull(drillState);
};
oFF.RscDataSectionInfoTag.prototype.isMatchingGroupName = function(groupName, component)
{
	return oFF.XStringUtils.isNullOrEmpty(groupName) || oFF.notNull(component) && (oFF.XString.isEqual(groupName, component.getName()) || oFF.XString.isEqual(groupName, component.getText()) || oFF.XString.isEqual(groupName, component.getDisplayName()) || oFF.XString.isEqual(groupName, component.getText()));
};
oFF.RscDataSectionInfoTag.prototype.isSectionLevelEnd = function()
{
	return !oFF.XObjectExt.isValidObject(this.m_fieldValueReference) || this.m_fieldValueReference.isHierarchyLevelEnd();
};
oFF.RscDataSectionInfoTag.prototype.isSectionLevelStart = function()
{
	return !oFF.XObjectExt.isValidObject(this.m_fieldValueReference) || this.m_fieldValueReference.isHierarchyLevelStart();
};
oFF.RscDataSectionInfoTag.prototype.isTotal = function()
{
	return this.m_fieldValueReference.getDimensionMemberType().isTypeOf(oFF.MemberType.RESULT);
};
oFF.RscDataSectionInfoTag.prototype.isTotalBand = function()
{
	return this.m_totalBand;
};
oFF.RscDataSectionInfoTag.prototype.matches = function(element)
{
	let groupName = element.getGroupName();
	let fieldReference = this.getFieldReference();
	let result = false;
	if (oFF.notNull(fieldReference))
	{
		let dimension = fieldReference.getDimension();
		let field = fieldReference.getField();
		let attribute = field.getAttribute();
		let isMainAttribute = fieldReference.isMainAttribute();
		let isMatchingAttributeName = this.isMatchingGroupName(groupName, attribute);
		let isMatchingDimensionName = isMainAttribute && isMatchingAttributeName || this.isMatchingGroupName(groupName, dimension);
		let isMatchingFieldName = this.isMatchingGroupName(groupName, field);
		let isAttributeMainField = fieldReference.isMainFieldForAttribute();
		let isDimensionMainField = isAttributeMainField && isMainAttribute || fieldReference.isMainFieldForDimension();
		let mayMatchPlainValue = isMatchingFieldName || isAttributeMainField && isMatchingAttributeName || isDimensionMainField && isMatchingDimensionName;
		let mayMatchFormattedValue = mayMatchPlainValue;
		result = this.matchesSections(element, this) && this.matchesDrillState(element, this) && this.matchesHierarchyAlignment(element, this) && this.matchesTotal(element, this) && (isMatchingDimensionName || isMatchingAttributeName || isMatchingFieldName) && (element.getGroupLevel() === -1 || this.getGroupLevel() === element.getGroupLevel() || this.getReversedGroupLevel() === element.getGroupLevel()) && this.matchesNamesAndLevelsExt(element, this.m_fieldValueReference, mayMatchPlainValue, mayMatchFormattedValue, isMatchingDimensionName);
	}
	return result;
};
oFF.RscDataSectionInfoTag.prototype.matchesDrillState = function(element, sectionInfoTag)
{
	return oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isMatchesLeaves(), sectionInfoTag.isLeaf()) || oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isMatchesExpanded(), sectionInfoTag.isExpanded()) && sectionInfoTag.isExactSectionLevel() || oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isMatchesLeaves(), sectionInfoTag.isLeaf()) && oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isMatchesExpanded(), sectionInfoTag.isExpanded()) && sectionInfoTag.isExactSectionLevel();
};
oFF.RscDataSectionInfoTag.prototype.matchesHierarchyAlignment = function(element, sacDataSectionInfoTag)
{
	return oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isMatchesHierarchyBottomUp(), this.isHierarchyBottomUp()) || oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isMatchesHierarchyBottomUp(), this.isHierarchyBottomUp());
};
oFF.RscDataSectionInfoTag.prototype.matchesNamesAndLevelsExt = function(element, valueReference, mayMatchPlainValue, mayMatchFormattedValue, mayMatchDimensionMemberName)
{
	let plainValue = oFF.XValueUtil.getString(valueReference.getPlainValue());
	let formattedValue = valueReference.getFormattedText();
	let dimensionMemberValue = valueReference.getDimensionMemberName();
	let sectionNodeNames = element.getSectionNodeNames();
	let exactLevelResult = (element.getSectionLevel() < 0 || valueReference.getDisplayLevel() === element.getSectionLevel()) && (!oFF.XCollectionUtils.hasElements(sectionNodeNames) || mayMatchPlainValue && sectionNodeNames.contains(plainValue) || mayMatchFormattedValue && sectionNodeNames.contains(formattedValue) || mayMatchDimensionMemberName && sectionNodeNames.contains(dimensionMemberValue));
	let parentValueReference = valueReference.getParent();
	return exactLevelResult || !element.isExactSectionLevel() && oFF.notNull(parentValueReference) && this.matchesNamesAndLevelsExt(element, parentValueReference, mayMatchPlainValue, mayMatchFormattedValue, mayMatchDimensionMemberName);
};
oFF.RscDataSectionInfoTag.prototype.matchesSections = function(element, sectionInfoTag)
{
	return oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isIncludeHeaderBand(), sectionInfoTag.isHeaderBand()) || oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isIncludeTotalsBand(), sectionInfoTag.isTotalBand()) || oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isIncludeInnerBands(), sectionInfoTag.isInnerBand()) || oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isIncludeHeaderBand(), sectionInfoTag.isHeaderBand()) && oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isIncludeTotalsBand(), sectionInfoTag.isTotalBand()) && oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isIncludeHeaderBand(), sectionInfoTag.isHeaderBand());
};
oFF.RscDataSectionInfoTag.prototype.matchesSibling = function(element)
{
	let result = this.isTotal() === element.isTotal() && this.isLeaf() === element.isLeaf() && this.isExpanded() === element.isExpanded() && (!element.isExactSectionLevel() || this.isExactSectionLevel()) && (element.getGroupLevel() === -1 || this.getGroupLevel() === element.getGroupLevel()) && (element.getSectionLevel() < 0 || this.getSectionLevel() === element.getSectionLevel()) && (oFF.XStringUtils.isNullOrEmpty(element.getGroupName()) || oFF.XString.isEqual(element.getGroupName(), this.getGroupName())) && (oFF.XStringUtils.isNullOrEmpty(element.getSectionNodeName()) || oFF.XString.isEqual(element.getSectionNodeName(), this.getSectionNodeName()));
	return result;
};
oFF.RscDataSectionInfoTag.prototype.matchesTotal = function(element, sacDataSectionInfoTag)
{
	return oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isMatchesTotals(), this.isTotal()) || oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isMatchesTotals(), this.isTotal());
};
oFF.RscDataSectionInfoTag.prototype.releaseObject = function()
{
	this.m_headerBand = false;
	this.m_totalBand = false;
	this.m_innerBand = false;
	this.m_fieldValueReference = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscDataSectionInfoTag.prototype.setHeaderBand = function(headerBand)
{
	this.m_headerBand = headerBand;
};
oFF.RscDataSectionInfoTag.prototype.setInnerBand = function(innerBand)
{
	this.m_innerBand = innerBand;
};
oFF.RscDataSectionInfoTag.prototype.setTotalBand = function(totalBand)
{
	this.m_totalBand = totalBand;
};
oFF.RscDataSectionInfoTag.prototype.setupWithFieldValueReference = function(fieldValueReference)
{
	this.m_fieldValueReference = fieldValueReference;
	if (this.m_fieldValueReference.isDrillGroupHeader())
	{
		this.m_headerBand = true;
		this.m_innerBand = false;
	}
};

oFF.RscMeasureInfoTag = function() {};
oFF.RscMeasureInfoTag.prototype = new oFF.XObject();
oFF.RscMeasureInfoTag.prototype._ff_c = "RscMeasureInfoTag";

oFF.RscMeasureInfoTag.create = function(measureReference)
{
	let instance = new oFF.RscMeasureInfoTag();
	instance.setupWithMeasureReference(measureReference);
	return instance;
};
oFF.RscMeasureInfoTag.prototype.m_headerBand = false;
oFF.RscMeasureInfoTag.prototype.m_innerBand = false;
oFF.RscMeasureInfoTag.prototype.m_measureReference = null;
oFF.RscMeasureInfoTag.prototype.m_totalBand = false;
oFF.RscMeasureInfoTag.prototype.copyFrom = function(other, flags)
{
	let orig = other;
	this.m_measureReference = orig.m_measureReference;
	this.m_headerBand = orig.m_headerBand;
	this.m_innerBand = orig.m_innerBand;
	this.m_totalBand = orig.m_totalBand;
	oFF.XObject.prototype.copyFrom.call( this , other, flags);
};
oFF.RscMeasureInfoTag.prototype.createCopy = function()
{
	let newInstance = oFF.RscMeasureInfoTag.create(this.m_measureReference);
	newInstance.copyFrom(this, null);
	return newInstance;
};
oFF.RscMeasureInfoTag.prototype.getGroupLevel = function()
{
	return -1;
};
oFF.RscMeasureInfoTag.prototype.getGroupName = function()
{
	let measureReference = this.getMeasureReference();
	return oFF.notNull(measureReference) ? measureReference.getStructureMember().getDimension().getName() : null;
};
oFF.RscMeasureInfoTag.prototype.getMeasureReference = function()
{
	return oFF.notNull(this.m_measureReference) ? this.m_measureReference : null;
};
oFF.RscMeasureInfoTag.prototype.getReversedGroupLevel = function()
{
	return -1;
};
oFF.RscMeasureInfoTag.prototype.getSectionLevel = function()
{
	return oFF.notNull(this.m_measureReference) ? this.m_measureReference.getDisplayLevel() : -1;
};
oFF.RscMeasureInfoTag.prototype.getSectionLevelName = function()
{
	return null;
};
oFF.RscMeasureInfoTag.prototype.getSectionNodeName = function()
{
	return oFF.notNull(this.m_measureReference) ? this.m_measureReference.getStructureMember().getName() : null;
};
oFF.RscMeasureInfoTag.prototype.isExactSectionLevel = function()
{
	return true;
};
oFF.RscMeasureInfoTag.prototype.isExpanded = function()
{
	let drillState = oFF.notNull(this.m_measureReference) ? this.m_measureReference.getDrillState() : null;
	return drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED;
};
oFF.RscMeasureInfoTag.prototype.isGroupLevelEnd = function()
{
	return false;
};
oFF.RscMeasureInfoTag.prototype.isGroupLevelStart = function()
{
	return false;
};
oFF.RscMeasureInfoTag.prototype.isHeaderBand = function()
{
	return this.m_headerBand;
};
oFF.RscMeasureInfoTag.prototype.isHierarchyBottomUp = function()
{
	return false;
};
oFF.RscMeasureInfoTag.prototype.isInnerBand = function()
{
	return this.m_innerBand;
};
oFF.RscMeasureInfoTag.prototype.isLeaf = function()
{
	let drillState = oFF.notNull(this.m_measureReference) ? this.m_measureReference.getDrillState() : null;
	return drillState === oFF.DrillState.LEAF || oFF.isNull(drillState);
};
oFF.RscMeasureInfoTag.prototype.isMatchingGroupName = function(groupName, component)
{
	return oFF.XStringUtils.isNullOrEmpty(groupName) || oFF.notNull(component) && (oFF.XString.isEqual(groupName, component.getName()) || oFF.XString.isEqual(groupName, component.getText()) || oFF.XString.isEqual(groupName, component.getDisplayName()) || oFF.XString.isEqual(groupName, component.getText()));
};
oFF.RscMeasureInfoTag.prototype.isSectionLevelEnd = function()
{
	return false;
};
oFF.RscMeasureInfoTag.prototype.isSectionLevelStart = function()
{
	return false;
};
oFF.RscMeasureInfoTag.prototype.isTotal = function()
{
	return false;
};
oFF.RscMeasureInfoTag.prototype.isTotalBand = function()
{
	return this.m_totalBand;
};
oFF.RscMeasureInfoTag.prototype.matches = function(element)
{
	let groupName = element.getGroupName();
	let measureReference = this.getMeasureReference();
	let result = false;
	if (oFF.notNull(measureReference))
	{
		let member = measureReference.getStructureMember();
		let dimension = member.getDimension();
		let isMatchingDimensionName = this.isMatchingGroupName(groupName, dimension);
		result = this.matchesDrillState(element, this) && isMatchingDimensionName && this.matchesNamesAndLevelsExt(element, measureReference);
	}
	return result;
};
oFF.RscMeasureInfoTag.prototype.matchesDrillState = function(element, sectionInfoTag)
{
	return oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isMatchesLeaves(), sectionInfoTag.isLeaf()) || oFF.TriStateMatchingUtil.matchesTriStateStrictPositive(element.isMatchesExpanded(), sectionInfoTag.isExpanded()) && sectionInfoTag.isExactSectionLevel() || oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isMatchesLeaves(), sectionInfoTag.isLeaf()) && oFF.TriStateMatchingUtil.matchesTriStateNegative(element.isMatchesExpanded(), sectionInfoTag.isExpanded()) && sectionInfoTag.isExactSectionLevel();
};
oFF.RscMeasureInfoTag.prototype.matchesNamesAndLevelsExt = function(element, measureReference)
{
	let sectionNodeNames = element.getSectionNodeNames();
	let member = measureReference.getStructureMember();
	let exactLevelResult = (element.getSectionLevel() < 0 || measureReference.getDisplayLevel() === element.getSectionLevel()) && (!oFF.XCollectionUtils.hasElements(sectionNodeNames) || oFF.XStream.of(member.getAllFieldValues()).anyMatch((fiva) => {
		return sectionNodeNames.contains(fiva.getValue().getStringRepresentation());
	}) || sectionNodeNames.contains(member.getName()) || sectionNodeNames.contains(member.getDisplayName()) || sectionNodeNames.contains(member.getText()) || sectionNodeNames.contains(member.getDisplayDescription()) || member.getMemberType().isTypeOf(oFF.MemberType.MEASURE) && sectionNodeNames.contains(member.getAliasName()));
	let parentValueReference = measureReference.getParent();
	return exactLevelResult || !element.isExactSectionLevel() && oFF.notNull(parentValueReference) && this.matchesNamesAndLevelsExt(element, parentValueReference);
};
oFF.RscMeasureInfoTag.prototype.matchesSibling = function(element)
{
	let result = this.isTotal() === element.isTotal() && this.isLeaf() === element.isLeaf() && this.isExpanded() === element.isExpanded() && (!element.isExactSectionLevel() || this.isExactSectionLevel()) && (element.getGroupLevel() === -1 || this.getGroupLevel() === element.getGroupLevel()) && (element.getSectionLevel() < 0 || this.getSectionLevel() === element.getSectionLevel()) && (oFF.XStringUtils.isNullOrEmpty(element.getGroupName()) || oFF.XString.isEqual(element.getGroupName(), this.getGroupName())) && (oFF.XStringUtils.isNullOrEmpty(element.getSectionNodeName()) || oFF.XString.isEqual(element.getSectionNodeName(), this.getSectionNodeName()));
	return result;
};
oFF.RscMeasureInfoTag.prototype.releaseObject = function()
{
	this.m_headerBand = false;
	this.m_totalBand = false;
	this.m_innerBand = false;
	this.m_measureReference = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscMeasureInfoTag.prototype.setHeaderBand = function(headerBand)
{
	this.m_headerBand = headerBand;
};
oFF.RscMeasureInfoTag.prototype.setInnerBand = function(innerBand)
{
	this.m_innerBand = innerBand;
};
oFF.RscMeasureInfoTag.prototype.setTotalBand = function(totalBand)
{
	this.m_totalBand = totalBand;
};
oFF.RscMeasureInfoTag.prototype.setupWithMeasureReference = function(measureReference)
{
	this.m_measureReference = measureReference;
};

oFF.RscTupleReference = function() {};
oFF.RscTupleReference.prototype = new oFF.XObject();
oFF.RscTupleReference.prototype._ff_c = "RscTupleReference";

oFF.RscTupleReference.ERROR = "ERROR";
oFF.RscTupleReference.NULL = "NULL";
oFF.RscTupleReference.OTHER = "OTHER";
oFF.RscTupleReference.UNDEFINED = "UNDEFINED";
oFF.RscTupleReference.applyValues = function(tuple, referenceTuple)
{
	let values = tuple.getValuesMap();
	let keys = values.getKeysAsIterator();
	let mergableValues = oFF.XHashMapByString.create();
	while (keys.hasNext())
	{
		let key = keys.next();
		let value = tuple.getValueForKey(key).createValueCopy(tuple, tuple.getAxisReference());
		let modelReference = value.getModelReference();
		if (!oFF.XObjectExt.isValidObject(modelReference))
		{
			continue;
		}
		if (modelReference.getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD))
		{
			referenceTuple.putTupleValueReference(key, value);
		}
		else
		{
			mergableValues.put(key, value);
		}
	}
	return mergableValues;
};
oFF.RscTupleReference.compareRepetition = function(previous, following)
{
	if (oFF.notNull(previous) && oFF.notNull(following))
	{
		let previousElements = previous.m_memberValues;
		let followingElements = following.m_memberValues;
		let previousKeys = previousElements.getKeysAsIterator();
		while (previousKeys.hasNext())
		{
			let key = previousKeys.next();
			let previousElement = previousElements.getByKey(key);
			let followingElement = followingElements.getByKey(key);
			if (oFF.notNull(previousElement) && oFF.notNull(followingElement))
			{
				let repetitive = oFF.XObjectExt.areEqual(previousElement.getPlainValue(), followingElement.getPlainValue()) && previousElement.getDisplayLevel() === followingElement.getDisplayLevel() && previousElement.getValueException() === followingElement.getValueException() && oFF.XString.isEqual(previousElement.getPathKey(), followingElement.getPathKey());
				followingElement.setRepeatedMemberName(repetitive);
				followingElement.setDimensionSectionStart(!repetitive);
				if (!repetitive)
				{
					previousElement.setDimensionSectionEnd();
				}
			}
		}
	}
};
oFF.RscTupleReference.createForListByOrigTuple = function(inputTuple, dimensions, axisReference, structureModelReferences)
{
	let instance = oFF.RscTupleReference.createInternal(axisReference, -1);
	instance.setupFromOrigTupleAndDimension(inputTuple, dimensions, structureModelReferences);
	return instance;
};
oFF.RscTupleReference.createForRsAxis = function(axisReference, tupleIndex, cursorAxis, overwriteTexts, scaleTextsMap, userProfile, emptyCurrencyPair, activeVersions, deriverPercentageFromShift)
{
	let instance = oFF.RscTupleReference.createInternal(axisReference, tupleIndex);
	instance.setupForRsAxis(cursorAxis, overwriteTexts, scaleTextsMap, userProfile, emptyCurrencyPair, activeVersions, deriverPercentageFromShift);
	return instance;
};
oFF.RscTupleReference.createForRsAxisDummy = function(axisReference, tupleIndex)
{
	let instance = oFF.RscTupleReference.createInternal(axisReference, tupleIndex);
	return instance;
};
oFF.RscTupleReference.createInternal = function(axisReference, tupleIndex)
{
	let instance = new oFF.RscTupleReference();
	instance.initializeInternal(axisReference, tupleIndex);
	return instance;
};
oFF.RscTupleReference.getReference = function(fieldValueReferences)
{
	let result = null;
	if (fieldValueReferences.size() === 1)
	{
		result = oFF.RscMeasureReference.createForFieldValueReference(fieldValueReferences.get(0));
	}
	else if (fieldValueReferences.size() === 2)
	{
		result = oFF.RscDataCellReference.create(oFF.RscMeasureReference.createForFieldValueReference(fieldValueReferences.get(0)), oFF.RscMeasureReference.createForFieldValueReference(fieldValueReferences.get(1)));
	}
	return result;
};
oFF.RscTupleReference.mergeCoordinates = function(coordinates)
{
	let first = null;
	let second = null;
	for (let i = 0; i < coordinates.size(); i++)
	{
		let coordinate = coordinates.get(i);
		if (oFF.notNull(coordinate))
		{
			if (oFF.isNull(first))
			{
				first = coordinate.getFirstObject();
			}
			if (oFF.isNull(second))
			{
				second = coordinate.getSecondObject();
			}
		}
	}
	return oFF.XPair.create(first, second);
};
oFF.RscTupleReference.mergeOnSameAxis = function(referenceTuple, inputTuple, dimensions, structureModelReferences)
{
	let values = inputTuple.getValues();
	let inputTupleIndex = oFF.XIntegerValue.create(inputTuple.getTupleIndex());
	let coordinate = referenceTuple.getAxisReference().getAxisType() === oFF.AxisType.ROWS ? oFF.XPair.create(inputTupleIndex, null) : oFF.XPair.create(null, inputTupleIndex);
	let structureMemberNames = oFF.XList.create();
	let fieldValueReferences = oFF.XList.create();
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		let modelReference = value.getModelReference();
		if (!oFF.XObjectExt.isValidObject(modelReference))
		{
			continue;
		}
		if (modelReference.getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD) && dimensions.contains(value.getFieldReference().getDimension()))
		{
			let fieldValueReference = value;
			let dimMemberName = fieldValueReference.getDimensionMemberName();
			if (!structureMemberNames.contains(dimMemberName))
			{
				structureMemberNames.add(dimMemberName);
				fieldValueReferences.add(fieldValueReference);
			}
		}
	}
	if (oFF.XCollectionUtils.hasElements(structureMemberNames))
	{
		let measureReference = structureModelReferences.getByKey(oFF.XCollectionUtils.join(structureMemberNames, " "));
		if (oFF.isNull(measureReference))
		{
			measureReference = oFF.RscTupleReference.getReference(fieldValueReferences);
		}
		measureReference.applyUnitAndScalingInfoAndMakeVisible(inputTuple);
		let measureValueReference = oFF.RscMeasureValueReference.createWithCoordinate(coordinate, referenceTuple, measureReference);
		referenceTuple.putTupleValueReference(oFF.XCollectionUtils.join(structureMemberNames, " "), measureValueReference);
	}
};
oFF.RscTupleReference.mergeTuples = function(axisReference, origTuple, orthogonalTuple, gridContainer)
{
	let mergedTuple = oFF.RscTupleReference.createInternal(axisReference, -1);
	let coordinates = oFF.XList.create();
	coordinates.add(origTuple.m_tupleIndexCoordinate);
	coordinates.add(orthogonalTuple.m_tupleIndexCoordinate);
	mergedTuple.m_tupleIndexCoordinate = oFF.RscTupleReference.mergeCoordinates(coordinates);
	let mergeableValues1 = oFF.RscTupleReference.applyValues(origTuple, mergedTuple);
	let mergeableValues2 = oFF.RscTupleReference.applyValues(orthogonalTuple, mergedTuple);
	let hasMergable1 = oFF.XCollectionUtils.hasElements(mergeableValues1);
	let hasMergable2 = oFF.XCollectionUtils.hasElements(mergeableValues2);
	if (hasMergable1 && hasMergable2)
	{
		mergedTuple.mergeAndResolveValues(mergeableValues1, mergeableValues2, gridContainer);
	}
	else if (hasMergable1)
	{
		mergedTuple.resolveAllValues(mergeableValues1, gridContainer);
	}
	else if (hasMergable2)
	{
		mergedTuple.resolveAllValues(mergeableValues2, gridContainer);
	}
	return mergedTuple;
};
oFF.RscTupleReference.prototype.m_accountMemberName = null;
oFF.RscTupleReference.prototype.m_axisReference = null;
oFF.RscTupleReference.prototype.m_cellValueType = null;
oFF.RscTupleReference.prototype.m_complexUnit = null;
oFF.RscTupleReference.prototype.m_currencyUnit = null;
oFF.RscTupleReference.prototype.m_measureName = null;
oFF.RscTupleReference.prototype.m_memberValues = null;
oFF.RscTupleReference.prototype.m_numericShift = null;
oFF.RscTupleReference.prototype.m_relevantTupleCoordinates = null;
oFF.RscTupleReference.prototype.m_secondaryStructureMemberName = null;
oFF.RscTupleReference.prototype.m_tupleIndex = 0;
oFF.RscTupleReference.prototype.m_tupleIndexCoordinate = null;
oFF.RscTupleReference.prototype.m_uniqueDecimalPlaces = 0;
oFF.RscTupleReference.prototype.m_uniqueScalingText = null;
oFF.RscTupleReference.prototype.m_uniqueUnitInfo = null;
oFF.RscTupleReference.prototype.m_uniqueUnitScaleInformation = null;
oFF.RscTupleReference.prototype.m_values = null;
oFF.RscTupleReference.prototype.complementByDimensionTypes = function(queryModel, members, dimensionTypePresent, dimensionType)
{
	let dimension = queryModel.getDimensionByType(dimensionType);
	if (oFF.notNull(dimension) && dimensionType !== dimensionTypePresent)
	{
		members.addAll(dimension.getAllStructureMembers());
	}
};
oFF.RscTupleReference.prototype.correctNumericShift = function(structureMembers, derivePercentageFromShift)
{
	let axisReference = this.getAxisReference();
	let gridContainer = oFF.isNull(axisReference) ? null : axisReference.getGridContainer();
	let queryModel = oFF.isNull(gridContainer) ? null : gridContainer.getQueryModel();
	if (oFF.notNull(queryModel) && !queryModel.getModelCapabilities().supportsDataCells() && oFF.notNull(this.m_numericShift) && this.getCellValueType() !== oFF.XValueType.PERCENT)
	{
		if (oFF.XCollectionUtils.size(structureMembers) === 1)
		{
			let members = oFF.XList.create();
			let structureMember = structureMembers.get(0);
			let dimensionType = structureMember.getDimension().getDimensionType();
			this.complementByDimensionTypes(queryModel, members, dimensionType, oFF.DimensionType.ACCOUNT);
			this.complementByDimensionTypes(queryModel, members, dimensionType, oFF.DimensionType.MEASURE_STRUCTURE);
			this.complementByDimensionTypes(queryModel, members, dimensionType, oFF.DimensionType.SECONDARY_STRUCTURE);
			let integerList = oFF.XList.create();
			let nullValuePresent = false;
			for (let i = 0; i < members.size(); i++)
			{
				let orthMember = members.get(i);
				let newShift = oFF.QStructureMemberFormatterSettings.getLeadingScalingPower(structureMember, orthMember);
				if (!newShift.isPresent())
				{
					nullValuePresent = true;
				}
				else
				{
					oFF.XCollectionUtils.addIfNotPresent(integerList, newShift.get());
				}
			}
			if (oFF.XCollectionUtils.size(integerList) === 1 && !nullValuePresent)
			{
				let numericShift = integerList.get(0);
				if (numericShift.getInteger() !== 2 || !derivePercentageFromShift)
				{
					this.setNumericShift(numericShift);
				}
			}
			else if (oFF.XCollectionUtils.size(members) > 1 && (oFF.XCollectionUtils.hasElements(integerList) || !nullValuePresent))
			{
				this.setNumericShift(null);
			}
		}
		else if (oFF.XCollectionUtils.size(structureMembers) > 1)
		{
			let numericShiftOnAxis = oFF.QStructureMemberFormatterSettings.getLeadingScalingPower(structureMembers.get(0), structureMembers.get(1));
			if (numericShiftOnAxis.isPresent())
			{
				this.setNumericShift(numericShiftOnAxis.get());
			}
		}
		else if (!oFF.XCollectionUtils.hasElements(structureMembers))
		{
			this.setNumericShift(null);
		}
	}
};
oFF.RscTupleReference.prototype.extractDrillGroupDimenisonMembers = function(drillGroupDimension, udhKey, tupleElement, pathKey, valueException, fieldNameList, fieldNameValueMap, fieldPlainValueMap, memberValueReference)
{
	let axis = drillGroupDimension.getAxis();
	oFF.XCollectionUtils.forEach(axis, (dimension) => {
		this.extractDrillGroupDimensionMember(dimension, udhKey, tupleElement, pathKey, valueException, fieldNameList, fieldNameValueMap, fieldPlainValueMap);
	});
	let drillGroupReference = this.m_values.getByKey(drillGroupDimension.getKeyField().getName());
	drillGroupReference.setDrillGroupHeader(true);
	memberValueReference.setDrillGroupReference(drillGroupReference);
};
oFF.RscTupleReference.prototype.extractDrillGroupDimensionMember = function(drillGroupDimension, udhKey, tupleElement, pathKey, valueException, fieldNameList, fieldNameValueMap, fieldPlainValueMap)
{
	let field = drillGroupDimension.getKeyField();
	let dimensionReference = this.getAxisReference().getDimensionReference(drillGroupDimension.getName());
	let fieldName = field.getName();
	let dimensionMemberName = udhKey.getHierarchyKeyByDimension(drillGroupDimension);
	let fieldReference = this.getAxisReference().getComponentByName(fieldName);
	let previousTuple = this.getTupleIndex() > 0 ? this.getAxisReference().getTupleAt(this.getTupleIndex() - 1) : null;
	let previousMemberValueReference = oFF.isNull(previousTuple) ? null : previousTuple.m_memberValues.getByKey(field.getDimension().getName());
	let newMemberValueReference = this.getOrCreateMemberValueReference(dimensionReference, tupleElement, dimensionMemberName, previousMemberValueReference, pathKey);
	let dimensionType = drillGroupDimension.getDimensionType();
	if (dimensionType.isTypeOf(oFF.DimensionType.ACCOUNT))
	{
		this.m_accountMemberName = dimensionMemberName;
	}
	else if (dimensionType.isTypeOf(oFF.DimensionType.MEASURE_STRUCTURE))
	{
		this.m_measureName = dimensionMemberName;
	}
	else if (dimensionType.isTypeOf(oFF.DimensionType.SECONDARY_STRUCTURE))
	{
		this.m_secondaryStructureMemberName = dimensionMemberName;
	}
	let plain = oFF.XStringValue.create(dimensionMemberName);
	fieldNameValueMap.put(fieldName, dimensionMemberName);
	fieldPlainValueMap.put(fieldName, plain);
	let fvr = oFF.RscFieldValueReference.create(this, fieldReference, plain, dimensionMemberName, newMemberValueReference);
	fvr.setValueException(valueException);
	if (!this.m_values.containsKey(fieldName))
	{
		this.m_values.put(fieldName, fvr);
	}
	if (!fieldNameList.contains(fieldName))
	{
		fieldNameList.add(fieldName);
	}
	field = drillGroupDimension.getHierarchyNavigationField();
	fieldName = field.getName();
	let formattedValue = udhKey.getId();
	fieldReference = this.getAxisReference().getComponentByName(fieldName);
	plain = oFF.XStringValue.create(formattedValue);
	fieldNameValueMap.put(fieldName, formattedValue);
	fieldPlainValueMap.put(fieldName, plain);
	fvr = oFF.RscFieldValueReference.create(this, fieldReference, plain, formattedValue, newMemberValueReference);
	fvr.setValueException(valueException);
	if (!this.m_values.containsKey(fieldName))
	{
		this.m_values.put(fieldName, fvr);
	}
	if (!fieldNameList.contains(fieldName))
	{
		fieldNameList.add(fieldName);
	}
};
oFF.RscTupleReference.prototype.extractStructureMembers = function(listToFill)
{
	let values = this.getValues();
	let typeSet = oFF.XSetOfNameObject.create();
	for (let i = 0; i < values.size(); i++)
	{
		let value = values.get(i);
		let dimension = value.getFieldReference().getDimension();
		let dimensionType = dimension.getDimensionType();
		typeSet.add(dimensionType);
		if (dimensionType.isTypeOf(oFF.DimensionType.ABSTRACT_STRUCTURE) || dimension.getDimensionType().isTypeOf(oFF.DimensionType.ACCOUNT))
		{
			let member = dimension.getStructureMemberByAliasOrMember(value.getDimensionMemberName());
			if (oFF.notNull(member) && !listToFill.contains(member))
			{
				listToFill.add(member);
			}
		}
	}
	this.extractStructureMembersFromFilter(listToFill, oFF.DimensionType.ACCOUNT, typeSet);
	this.extractStructureMembersFromFilter(listToFill, oFF.DimensionType.SECONDARY_STRUCTURE, typeSet);
	this.extractStructureMembersFromFilter(listToFill, oFF.DimensionType.MEASURE_STRUCTURE, typeSet);
};
oFF.RscTupleReference.prototype.extractStructureMembersFromFilter = function(listToFill, dimensionType, typeSet)
{
	if (!typeSet.contains(dimensionType))
	{
		let axisReference = this.getAxisReference();
		let gridContainer = oFF.isNull(axisReference) ? null : axisReference.getGridContainer();
		let queryModel = oFF.isNull(gridContainer) ? null : gridContainer.getQueryModel();
		let dimension = oFF.isNull(queryModel) ? null : queryModel.getDimensionByType(dimensionType);
		if (oFF.notNull(dimension) && (!oFF.AxisType.isAxisVisible(dimension.getAxisType()) || oFF.XCollectionUtils.size(dimension.getAllStructureMembers()) === 1 || !dimension.isHierarchyActive()))
		{
			let dynFilter = dimension.getQueryModel().getFilter().getDynamicFilter();
			let cartProd = oFF.isNull(dynFilter) ? null : dynFilter.getCartesianProduct();
			let cartesianList = oFF.isNull(cartProd) ? null : cartProd.getCartesianList(dimension);
			let element = oFF.notNull(cartesianList) && cartesianList.size() === 1 ? cartesianList.getCartesianElement(0) : null;
			let filterBag = oFF.isNull(element) || element.getSetSign() === oFF.SetSign.EXCLUDING ? null : element.getLow();
			let member = oFF.isNull(filterBag) ? null : filterBag.getDimensionMember();
			if (oFF.isNull(member) && oFF.notNull(cartesianList) && oFF.notNull(filterBag))
			{
				member = cartesianList.getDimension().getDimensionMember(filterBag.getString());
			}
			let structureMember = oFF.isNull(member) ? null : dimension.getStructureMember(member.getName());
			if (oFF.notNull(structureMember))
			{
				oFF.XCollectionUtils.addIfNotPresent(listToFill, structureMember);
			}
		}
	}
};
oFF.RscTupleReference.prototype.getAccountMemberName = function()
{
	return this.m_accountMemberName;
};
oFF.RscTupleReference.prototype.getAxisReference = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_axisReference);
};
oFF.RscTupleReference.prototype.getCellValueType = function()
{
	return this.m_cellValueType;
};
oFF.RscTupleReference.prototype.getComplexUnit = function()
{
	return this.m_complexUnit;
};
oFF.RscTupleReference.prototype.getCurrencyUnit = function()
{
	return this.m_currencyUnit;
};
oFF.RscTupleReference.prototype.getFormattedUnitScalingHeader = function(scaleTextsMap, formatterSettings, emptyCurrencyPair)
{
	let formattedValue = "";
	let currencyUnitPair = oFF.RscMappingUtils.getCurrencyUnitPair(this.getComplexUnit(), false, formatterSettings.getCurrencyFormatSettings().getCurrencyPresentation());
	if (this.getCellValueType() === oFF.XValueType.PERCENT)
	{
		formattedValue = oFF.RscCollectorConstants.PERCENT;
	}
	else if (oFF.notNull(currencyUnitPair))
	{
		formattedValue = oFF.XNumberFormatter.formatHeaderStringUsingSettingsWithCurrency(formatterSettings, currencyUnitPair, this.getReversedScalingFactor(), scaleTextsMap);
	}
	else if (this.getCurrencyUnit() !== null)
	{
		let currencyUnit = this.getCurrencyUnit();
		let currencyUnitPrefix = "";
		let currencyUnitSuffix = "";
		if (currencyUnit.hasPrefix())
		{
			currencyUnitPrefix = oFF.XStringUtils.concatenate2(currencyUnit.getPrefix(), " ");
		}
		if (currencyUnit.hasSuffix())
		{
			currencyUnitSuffix = oFF.XStringUtils.concatenate2(" ", currencyUnit.getSuffix());
		}
		let currency = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
		formattedValue = oFF.XNumberFormatter.formatHeaderStringUsingSettingsWithCurrency(formatterSettings, currency, this.getReversedScalingFactor(), scaleTextsMap);
	}
	else
	{
		formattedValue = oFF.XNumberFormatter.formatHeaderStringUsingSettingsWithCurrency(formatterSettings, emptyCurrencyPair, this.getReversedScalingFactor(), scaleTextsMap);
	}
	return formattedValue;
};
oFF.RscTupleReference.prototype.getMeasureName = function()
{
	return this.m_measureName;
};
oFF.RscTupleReference.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.RscTupleReference.prototype.getOrCreateMemberValueReference = function(dimensionReference, tupleElement, dimensionMemberName, previousMemberValueReference, pathKey)
{
	let dimensionName = dimensionReference.getName();
	if (!this.m_memberValues.containsKey(dimensionName))
	{
		let plain = oFF.XStringValue.create(dimensionMemberName);
		let displayLevel = tupleElement.getDisplayLevel();
		let newMemberReference = oFF.RscMemberValueReference.create(this, dimensionReference, plain, dimensionMemberName, null, tupleElement.getDimensionMemberType(), tupleElement.getDrillState(), displayLevel);
		this.m_memberValues.put(dimensionName, newMemberReference);
		let valueException = tupleElement.getDimensionMemberNameValueException();
		newMemberReference.setValueException(valueException);
		let parentDimensionMemberName = tupleElement.getParentDimensionMemberName();
		newMemberReference.setParentDimensionMemberName(parentDimensionMemberName);
		let repeatedMemberName = true;
		let referenceTupleIndex;
		if (oFF.isNull(previousMemberValueReference))
		{
			repeatedMemberName = false;
			referenceTupleIndex = this.getTupleIndex();
		}
		else
		{
			let previousDimensionMemberName = oFF.XValueUtil.getString(previousMemberValueReference.getPlainValue());
			if (!oFF.XString.isEqual(dimensionMemberName, previousDimensionMemberName) || previousMemberValueReference.getDisplayLevel() !== displayLevel || previousMemberValueReference.getValueException() !== valueException || !oFF.XString.isEqual(previousMemberValueReference.getPathKey(), pathKey))
			{
				previousMemberValueReference.setDimensionSectionEnd();
				referenceTupleIndex = this.getTupleIndex();
				repeatedMemberName = false;
			}
			else
			{
				referenceTupleIndex = previousMemberValueReference.getReferenceTupleIndex();
			}
			if (!oFF.XString.isEqual(dimensionMemberName, parentDimensionMemberName))
			{
				if (oFF.XString.isEqual(parentDimensionMemberName, previousDimensionMemberName))
				{
					newMemberReference.setParent(previousMemberValueReference);
				}
				else if (oFF.XString.isEqual(dimensionMemberName, previousMemberValueReference.getParentDimensionMemberName()))
				{
					previousMemberValueReference.setParent(newMemberReference);
				}
			}
			newMemberReference.setHierarchyLevelStart(!previousMemberValueReference.findParent(newMemberReference));
			previousMemberValueReference.setHierarchyLevelEnd(!newMemberReference.findParent(previousMemberValueReference));
		}
		newMemberReference.setReferenceTupleIndex(referenceTupleIndex);
		newMemberReference.setRepeatedMemberName(repeatedMemberName);
		newMemberReference.setDimensionSectionStart(!repeatedMemberName);
		newMemberReference.setPathKey(pathKey);
	}
	return this.m_memberValues.getByKey(dimensionName);
};
oFF.RscTupleReference.prototype.getPlainValueFromField = function(fieldPlainValueMap, fieldPlainExceptionMap, internalKeyField)
{
	let internalKeyFieldName = oFF.DfNameObject.getSafeName(internalKeyField);
	let plainValueWithException = null;
	if (oFF.notNull(internalKeyField) && fieldPlainValueMap.containsKey(internalKeyFieldName) && fieldPlainExceptionMap.containsKey(internalKeyFieldName) && internalKeyField.getValueType() !== oFF.XValueType.STRING)
	{
		plainValueWithException = oFF.XPair.create(fieldPlainValueMap.getByKey(internalKeyFieldName), fieldPlainExceptionMap.getByKey(internalKeyFieldName));
	}
	return plainValueWithException;
};
oFF.RscTupleReference.prototype.getRelevantTupleIndices = function()
{
	return this.m_relevantTupleCoordinates;
};
oFF.RscTupleReference.prototype.getReversedScalingFactor = function()
{
	return oFF.isNull(this.m_numericShift) ? null : oFF.XIntegerValue.create(-this.m_numericShift.getInteger());
};
oFF.RscTupleReference.prototype.getScalingText = function(scaleTextsMap, formatterSettings, emptyCurrencyPair, derivePercentageFromShift)
{
	let scalingText = "";
	if (this.getCellValueType() === oFF.XValueType.PERCENT || derivePercentageFromShift && oFF.notNull(this.m_numericShift) && this.m_numericShift.getInteger() === 2)
	{
		scalingText = oFF.RscCollectorConstants.PERCENT;
	}
	else
	{
		scalingText = oFF.XNumberFormatter.formatHeaderStringUsingSettingsWithCurrency(formatterSettings, emptyCurrencyPair, this.getReversedScalingFactor(), scaleTextsMap);
	}
	return scalingText;
};
oFF.RscTupleReference.prototype.getSecondaryStructureMemberName = function()
{
	return this.m_secondaryStructureMemberName;
};
oFF.RscTupleReference.prototype.getTextWithSuffix = function(activeVersions, dimension, plainValue, formattedValue)
{
	if (oFF.XCollectionUtils.hasElements(activeVersions) && dimension.getDimensionType().isTypeOf(oFF.DimensionType.GENERAL_VERSION) && oFF.XStream.of(activeVersions).anyMatch((av) => {
		return (oFF.XString.isEqual(av.getVersionDescription(), plainValue) || oFF.XString.isEqual(av.getVersionUniqueName(), plainValue) || oFF.XString.isEqual(av.getVersionDescription(), formattedValue)) && av.getVersionState() === oFF.PlanningVersionState.CHANGED;
	}))
	{
		return oFF.XStringUtils.concatenate2(formattedValue, " *");
	}
	else
	{
		return formattedValue;
	}
};
oFF.RscTupleReference.prototype.getTupleIndex = function()
{
	return this.m_tupleIndex;
};
oFF.RscTupleReference.prototype.getUniqueDecimalPlaces = function()
{
	return this.m_uniqueDecimalPlaces;
};
oFF.RscTupleReference.prototype.getUniqueScalingText = function()
{
	return this.m_uniqueScalingText;
};
oFF.RscTupleReference.prototype.getUniqueUnitInfo = function()
{
	return this.m_uniqueUnitInfo;
};
oFF.RscTupleReference.prototype.getUniqueUnitInformation = function(formatterSettings)
{
	let currencyUnitPair = oFF.RscMappingUtils.getCurrencyUnitPair(this.getComplexUnit(), false, formatterSettings.getCurrencyFormatSettings().getCurrencyPresentation());
	if (oFF.isNull(currencyUnitPair) && this.getCurrencyUnit() !== null)
	{
		let currencyUnit = this.getCurrencyUnit();
		let currencyUnitPrefix = "";
		let currencyUnitSuffix = "";
		if (currencyUnit.hasPrefix())
		{
			currencyUnitPrefix = oFF.XStringUtils.concatenate2(currencyUnit.getPrefix(), " ");
		}
		if (currencyUnit.hasSuffix())
		{
			currencyUnitSuffix = oFF.XStringUtils.concatenate2(" ", currencyUnit.getSuffix());
		}
		currencyUnitPair = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
	}
	return currencyUnitPair;
};
oFF.RscTupleReference.prototype.getUniqueUnitScaleInformation = function()
{
	return this.m_uniqueUnitScaleInformation;
};
oFF.RscTupleReference.prototype.getValueForKey = function(key)
{
	return this.m_values.getByKey(key);
};
oFF.RscTupleReference.prototype.getValueForModelComponent = function(reference)
{
	return this.m_values.getByKey(reference.getName());
};
oFF.RscTupleReference.prototype.getValues = function()
{
	return this.m_values.getValuesAsReadOnlyList();
};
oFF.RscTupleReference.prototype.getValuesMap = function()
{
	return this.m_values;
};
oFF.RscTupleReference.prototype.initializeInternal = function(axisReference, tupleIndex)
{
	this.m_values = oFF.XLinkedHashMapByString.create();
	this.m_memberValues = oFF.XLinkedHashMapByString.create();
	this.m_tupleIndex = tupleIndex;
	this.m_axisReference = oFF.XWeakReferenceUtil.getWeakRef(axisReference);
	this.m_relevantTupleCoordinates = oFF.XList.create();
};
oFF.RscTupleReference.prototype.mapResult = function(result)
{
	oFF.XStream.of(this.getAxisReference().getComponentsOnAxis()).filter((coa) => {
		return coa.getModelComponentType() === oFF.OlapComponentType.FIELD;
	}).map((gct) => {
		return gct;
	}).filter((fr) => {
		return fr.getDimension() === result.getDimension() && fr.getField() !== result.getField();
	}).forEach((fir) => {
		let valueReference = this.getValueForModelComponent(fir);
		result.addSupplementValue(fir.getField().getName(), oFF.XValueUtil.getString(valueReference.getPlainValue()));
	});
};
oFF.RscTupleReference.prototype.mergeAndResolveValues = function(mergeableValues1, mergeableValues2, gridContainer)
{
	let keys1 = mergeableValues1.getKeysAsIterator();
	while (keys1.hasNext())
	{
		let key1 = keys1.next();
		let value1 = mergeableValues1.getByKey(key1);
		let keys2 = mergeableValues2.getKeysAsIterator();
		while (keys2.hasNext())
		{
			let key2 = keys2.next();
			let value2 = mergeableValues2.getByKey(key2);
			let coordinates = oFF.XList.create();
			coordinates.add(value1.getTupleIndexCoordinate());
			coordinates.add(value2.getTupleIndexCoordinate());
			coordinates.add(this.m_tupleIndexCoordinate);
			let newCoordinate = oFF.RscTupleReference.mergeCoordinates(coordinates);
			if (newCoordinate.getFirstObject() === null || newCoordinate.getSecondObject() === null)
			{
				throw oFF.XException.createIllegalStateException("INVALID STATE: VALUE CANNOT BE FETCHED");
			}
			this.m_relevantTupleCoordinates.add(newCoordinate);
			let cellValue = gridContainer.getCellValueReference(newCoordinate.getSecondObject().getInteger(), newCoordinate.getFirstObject().getInteger());
			let componentKey = oFF.XStringUtils.concatenate3(oFF.DfNameObject.getSafeName(value1.getModelReference()), " ", oFF.DfNameObject.getSafeName(value2.getModelReference()));
			let measureReference = this.getAxisReference().getComponentByName(componentKey);
			measureReference.setVisible(true);
			let value = oFF.RscMeasureValueReference.createWithCoordinate(newCoordinate, this, measureReference);
			value.pullFromCellValue(cellValue);
			this.putTupleValueReference(oFF.XStringUtils.concatenate3(key1, " ", key2), value);
		}
	}
};
oFF.RscTupleReference.prototype.putTupleValueReference = function(key, value)
{
	this.m_values.put(key, value);
};
oFF.RscTupleReference.prototype.releaseObject = function()
{
	this.m_axisReference = null;
	this.m_values = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_values);
	this.m_memberValues = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_memberValues);
	this.m_relevantTupleCoordinates = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_relevantTupleCoordinates);
	this.m_tupleIndex = 0;
	this.m_numericShift = null;
	this.m_currencyUnit = null;
	this.m_complexUnit = null;
	this.m_cellValueType = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscTupleReference.prototype.resolveAllValues = function(mergeableValues, gridContainer)
{
	let keys = mergeableValues.getKeysAsIterator();
	while (keys.hasNext())
	{
		let key = keys.next();
		let mergeableValue = mergeableValues.getByKey(key);
		let coordinates = oFF.XList.create();
		coordinates.add(mergeableValue.getTupleIndexCoordinate());
		coordinates.add(this.m_tupleIndexCoordinate);
		let newCoordinate = oFF.RscTupleReference.mergeCoordinates(coordinates);
		if (newCoordinate.getFirstObject() === null || newCoordinate.getSecondObject() === null)
		{
			throw oFF.XException.createIllegalStateException("INVALID STATE: VALUE CANNOT BE FETCHED");
		}
		this.m_relevantTupleCoordinates.add(newCoordinate);
		let cellValue = gridContainer.getCellValueReference(newCoordinate.getSecondObject().getInteger(), newCoordinate.getFirstObject().getInteger());
		mergeableValue.pullFromCellValue(cellValue);
		this.putTupleValueReference(key, mergeableValue);
	}
};
oFF.RscTupleReference.prototype.resolveFieldValueActionParameter = function(fieldValueParameter)
{
	let field = fieldValueParameter.getField();
	let attribute = fieldValueParameter.getAttribute();
	let dimension = fieldValueParameter.getDimension();
	let semanticObject = fieldValueParameter.getSemanticObject();
	if (oFF.isNull(dimension) && oFF.XStringUtils.isNotNullAndNotEmpty(semanticObject))
	{
		let optionalDimensionReference = this.getAxisReference().getDimensionReferenceBySemanticObject(semanticObject);
		if (optionalDimensionReference.isPresent())
		{
			dimension = optionalDimensionReference.get().getDimension();
		}
	}
	let fieldContainer = dimension;
	if (oFF.isNull(field) && oFF.notNull(attribute))
	{
		fieldContainer = attribute;
	}
	let semanticType = fieldValueParameter.getSemanticType();
	let presentationType = fieldValueParameter.getPresentationType();
	if (oFF.isNull(field) && oFF.notNull(fieldContainer))
	{
		if (oFF.notNull(presentationType))
		{
			field = fieldContainer.getFieldByPresentationType(presentationType);
		}
		if (oFF.isNull(field) && oFF.notNull(semanticType))
		{
			field = fieldContainer.getFieldBySemanticType(semanticType);
		}
		if (oFF.isNull(field))
		{
			field = fieldContainer.getClientDefaultTextField();
		}
		if (oFF.isNull(field))
		{
			field = fieldContainer.getClientDefaultKeyField();
		}
	}
	let result = null;
	let dimensionMember;
	if (oFF.notNull(field))
	{
		let fieldValueReference = this.m_values.getByKey(field.getName());
		dimensionMember = field.getDimension().getDimensionMember(fieldValueReference.getDimensionMemberName());
		if (oFF.QQuickActionParameterResolveUtil.fieldValueParameterMatchesMember(fieldValueParameter, dimensionMember, fieldValueReference.getDrillState()))
		{
			result = oFF.QFilterValueBag._create(null, null, null);
			result.setFieldValue(oFF.QFieldValue.createWithValue(null, field, dimensionMember, fieldValueReference.getPlainValue()));
			result.setValue(fieldValueReference.getPlainValue());
			this.mapResult(result);
		}
	}
	else if (oFF.notNull(dimension))
	{
		let dimensionValueReference = this.m_memberValues.getByKey(dimension.getName());
		dimensionMember = dimension.getDimensionMember(oFF.XValueUtil.getString(dimensionValueReference.getPlainValue()));
		if (oFF.QQuickActionParameterResolveUtil.fieldValueParameterMatchesMember(fieldValueParameter, dimensionMember, dimensionValueReference.getDrillState()))
		{
			result = oFF.QFilterValueBag._create(null, null, null);
			result.setDimensionMember(dimensionMember);
			result.setValue(dimensionValueReference.getPlainValue());
			this.mapResult(result);
		}
	}
	return result;
};
oFF.RscTupleReference.prototype.setCellValueType = function(cellValueType)
{
	this.m_cellValueType = cellValueType;
};
oFF.RscTupleReference.prototype.setComplexUnit = function(complexUnit)
{
	this.m_complexUnit = complexUnit;
};
oFF.RscTupleReference.prototype.setCurrencyUnit = function(currencyUnit)
{
	this.m_currencyUnit = currencyUnit;
};
oFF.RscTupleReference.prototype.setNumericShift = function(numericShift)
{
	this.m_numericShift = numericShift;
};
oFF.RscTupleReference.prototype.setUnitInformation = function(unitInformation)
{
	this.m_uniqueUnitScaleInformation = unitInformation;
};
oFF.RscTupleReference.prototype.setupForRsAxis = function(cursorAxis, overwriteTexts, scaleTextsMap, userProfile, emptyCurrencyPair, activeVersions, derivePercentageFromShift)
{
	let pathKey = "";
	let dummyTupleElement = null;
	let localizer = oFF.XLocalizationCenter.getCenter();
	while (cursorAxis.hasNextTupleElement())
	{
		let tupleElement = cursorAxis.nextTupleElement();
		let dimensionMemberName = tupleElement.getDimensionMemberName();
		dummyTupleElement = tupleElement;
		let memberType = tupleElement.getDimensionMemberType();
		let formattedValue;
		if (!memberType.isTypeOf(oFF.MemberType.RESULT))
		{
			pathKey = oFF.XStringUtils.concatenate5(pathKey, "::[", tupleElement.getRsDimensionAtCurrentPosition().getName(), "]==>", dimensionMemberName);
		}
		let valueException;
		let dmValueException = tupleElement.getDimensionMemberNameValueException();
		let field;
		let fieldNameValueMap = oFF.XLinkedHashMapByString.create();
		let fieldPlainValueMap = oFF.XLinkedHashMapByString.create();
		let fieldPlainExceptionMap = oFF.XLinkedHashMapByString.create();
		let fieldNameList = oFF.XList.create();
		let explicitFieldNameList = oFF.XList.create();
		let drillGroupDimension = tupleElement.getDrillGroupDimensionAtCurrentPosition();
		let fieldName;
		let fieldReference;
		let dimensionMemberId = dimensionMemberName;
		let dimensionMemberKey = oFF.XStringUtils.concatenate4(dimensionMemberName, oFF.DfNameObject.getSafeName(dmValueException), oFF.DfNameObject.getSafeName(tupleElement.getDrillState()), oFF.DfNameObject.getSafeName(memberType));
		let dimensionReference = null;
		let memberValueReference = null;
		while (cursorAxis.hasNextFieldValue())
		{
			let fieldValue = cursorAxis.nextFieldValue();
			field = fieldValue.getField();
			dimensionReference = this.getAxisReference().getDimensionReference(field.getDimension().getName());
			let previousTuple = this.getTupleIndex() > 0 ? this.getAxisReference().getTupleAt(this.getTupleIndex() - 1) : null;
			let previousMemberValueReference = oFF.isNull(previousTuple) ? null : previousTuple.m_memberValues.getByKey(field.getDimension().getName());
			memberValueReference = this.getOrCreateMemberValueReference(dimensionReference, tupleElement, tupleElement.getDimensionMemberName(), previousMemberValueReference, pathKey);
			valueException = fieldValue.getValueException();
			fieldName = oFF.RscMappingUtils.correctFieldIdConsideringUdhSettings(field, drillGroupDimension);
			fieldReference = this.getAxisReference().getComponentByName(fieldName);
			if (oFF.isNull(fieldReference))
			{
				fieldReference = this.getAxisReference().getOrCreateComponentForField(dimensionReference, field, cursorAxis.getFieldValues(field.getDimension().getName(), fieldName));
			}
			let dimension = oFF.isNull(fieldReference) ? null : fieldReference.getDimension();
			let structureMember = oFF.isNull(dimension) ? null : dimension.getStructureMemberByAliasOrMember(dimensionMemberName);
			if (oFF.notNull(dimension))
			{
				let dimensionType = dimension.getDimensionType();
				if (dimensionType.isTypeOf(oFF.DimensionType.ACCOUNT))
				{
					this.m_accountMemberName = dimensionMemberName;
				}
				else if (dimensionType.isTypeOf(oFF.DimensionType.MEASURE_STRUCTURE))
				{
					this.m_measureName = dimensionMemberName;
				}
				else if (dimensionType.isTypeOf(oFF.DimensionType.SECONDARY_STRUCTURE))
				{
					this.m_secondaryStructureMemberName = dimensionMemberName;
				}
			}
			let plain = fieldValue.getValue();
			let plainString = oFF.XValueUtil.getString(plain);
			formattedValue = fieldValue.getFormattedValue();
			if (oFF.notNull(structureMember) && field.getPresentationType() !== null)
			{
				if (field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT) && (dimension.getMainAttribute() === field.getAttribute() && dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED || dimension.getTextField() === field || dimension.getClientDefaultTextField() === field || dimension.getDefaultResultSetTextField() === field) && oFF.XStringUtils.isNotNullAndNotEmpty(structureMember.getText()))
				{
					formattedValue = structureMember.getDisplayDescription();
					if (oFF.XStringUtils.isNullOrEmpty(plainString) && !oFF.XStringUtils.isNullOrEmpty(dimensionMemberName))
					{
						plain = oFF.XStringValue.create(dimensionMemberName);
					}
				}
				else if ((field.getPresentationType().isTypeOf(oFF.PresentationType.DISPLAY_KEY) || field.getPresentationType().isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY) || dimension.getDisplayKeyField() === field) && (dimension.getMainAttribute() === field.getAttribute() && dimension.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED || dimension.getDisplayKeyField() === field) && structureMember.isDisplayNameSet())
				{
					formattedValue = structureMember.getDisplayName();
					if (oFF.XStringUtils.isNullOrEmpty(plainString) && !oFF.XStringUtils.isNullOrEmpty(dimensionMemberName))
					{
						plain = oFF.XStringValue.create(dimensionMemberName);
					}
				}
			}
			if (oFF.XStringUtils.isNullOrEmpty(formattedValue))
			{
				formattedValue = plainString;
			}
			if (valueException === oFF.ValueException.UNDEFINED)
			{
				formattedValue = localizer.getText(oFF.RscMappingI18n.VALUE_EXCEPTION_UNDEFINED);
				if (oFF.XStringUtils.isNullOrEmpty(formattedValue))
				{
					formattedValue = oFF.XStringUtils.concatenate4(oFF.RscTupleReference.UNDEFINED, "(", formattedValue, ")");
				}
				plain = oFF.XStringValue.create(oFF.XStringUtils.concatenate4(oFF.RscTupleReference.UNDEFINED, "(", oFF.XValueUtil.getString(plain), ")"));
			}
			else if (valueException === oFF.ValueException.ERROR)
			{
				formattedValue = localizer.getText(oFF.RscMappingI18n.VALUE_EXCEPTION_ERROR);
				if (oFF.XStringUtils.isNullOrEmpty(formattedValue))
				{
					formattedValue = oFF.XStringUtils.concatenate4(oFF.RscTupleReference.ERROR, "(", formattedValue, ")");
				}
				plain = oFF.XStringValue.create(oFF.XStringUtils.concatenate4(oFF.RscTupleReference.ERROR, "(", oFF.XValueUtil.getString(plain), ")"));
			}
			else if (valueException === oFF.ValueException.NULL_VALUE && dmValueException === oFF.ValueException.NULL_VALUE)
			{
				formattedValue = localizer.getText(oFF.RscMappingI18n.VALUE_EXCEPTION_NULL);
				if (oFF.XStringUtils.isNullOrEmpty(formattedValue))
				{
					formattedValue = oFF.XStringUtils.concatenate4(oFF.RscTupleReference.NULL, "(", formattedValue, ")");
				}
				plain = oFF.XStringValue.create(oFF.XStringUtils.concatenate4(oFF.RscTupleReference.NULL, "(", oFF.XValueUtil.getString(plain), ")"));
			}
			else if (oFF.notNull(valueException) && valueException !== oFF.ValueException.NORMAL && valueException !== oFF.ValueException.ZERO && valueException !== oFF.ValueException.NULL_VALUE)
			{
				formattedValue = localizer.getText(oFF.RscMappingI18n.VALUE_EXCEPTION_OTHER);
				if (oFF.XStringUtils.isNullOrEmpty(formattedValue))
				{
					formattedValue = oFF.XStringUtils.concatenate4(oFF.RscTupleReference.OTHER, "(", formattedValue, ")");
				}
				plain = oFF.XStringValue.create(oFF.XStringUtils.concatenate4(oFF.RscTupleReference.OTHER, "(", oFF.XValueUtil.getString(plain), ")"));
			}
			formattedValue = this.getTextWithSuffix(activeVersions, dimension, plainString, formattedValue);
			fieldNameValueMap.put(fieldName, formattedValue);
			fieldPlainValueMap.put(fieldName, plain);
			fieldPlainExceptionMap.put(fieldName, valueException);
			let fvr = oFF.RscFieldValueReference.create(this, fieldReference, plain, formattedValue, memberValueReference);
			if (cursorAxis.hasUniqueScalingFactor())
			{
				this.setNumericShift(cursorAxis.getScalingFactor());
			}
			if (cursorAxis.hasUniqueComplexUnit())
			{
				this.setComplexUnit(cursorAxis.getComplexUnit());
			}
			if (cursorAxis.hasUniqueCurrencyUnit())
			{
				this.setCurrencyUnit(cursorAxis.getCurrencyUnit());
			}
			if (cursorAxis.hasUniqueCellValueType())
			{
				this.setCellValueType(cursorAxis.getCellValueType());
			}
			fvr.setValueException(valueException);
			let isExplicitPresentationType = oFF.RscMappingUtils.isExplicitlyInRsPresentationForUdh(field, drillGroupDimension);
			if (!this.m_values.containsKey(fieldName) || isExplicitPresentationType || !explicitFieldNameList.contains(fieldName) && field.getObtainability() === oFF.ObtainabilityType.ALWAYS)
			{
				this.m_values.put(fieldName, fvr);
				if (isExplicitPresentationType)
				{
					explicitFieldNameList.add(fieldName);
				}
			}
			if (!fieldNameList.contains(fieldName))
			{
				fieldNameList.add(fieldName);
			}
			let udhKey = fieldValue.getUdhKey();
			if (oFF.notNull(drillGroupDimension) && oFF.notNull(udhKey))
			{
				dimensionMemberId = udhKey.getHierarchyKeyByDimension(drillGroupDimension);
				this.extractDrillGroupDimenisonMembers(drillGroupDimension, udhKey, tupleElement, pathKey, valueException, fieldNameList, fieldNameValueMap, fieldPlainValueMap, memberValueReference);
			}
		}
		let dimensionValue = null;
		let needsUniqueDimensionValue = oFF.notNull(memberValueReference) && oFF.notNull(dimensionReference) && !dimensionReference.hasUniqueMember(dimensionMemberKey);
		if (needsUniqueDimensionValue)
		{
			dimensionValue = oFF.RscDimensionValue.create(memberValueReference);
			dimensionReference.putUniqueMember(dimensionMemberKey, dimensionValue);
		}
		let visIndex = 0;
		for (let i = 0; i < fieldNameList.size(); i++)
		{
			fieldName = fieldNameList.get(i);
			let fivare = this.getValueForKey(fieldName);
			formattedValue = oFF.RscMappingUtils.correctFieldValueConsideringUdhSettings(dimensionMemberId, fivare.getFieldReference().getField(), drillGroupDimension);
			if (oFF.XStringUtils.isNullOrEmpty(formattedValue))
			{
				formattedValue = fivare.getText();
			}
			let plainValue = fivare.getPlainValue();
			let plainStringValue = oFF.XValueUtil.getString(plainValue);
			let isPlainValueEmpty = oFF.XStringUtils.isNullOrEmpty(plainStringValue);
			let keyCorrectionCandidate = null;
			memberType = fivare.getDimensionMemberType();
			let newText;
			if (memberType === oFF.MemberType.RESULT)
			{
				newText = localizer.getText(oFF.RscMappingI18n.TOTALS);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(newText))
				{
					formattedValue = visIndex === 0 ? newText : "";
					keyCorrectionCandidate = formattedValue;
				}
			}
			else if (memberType === oFF.MemberType.CONDITION_RESULT)
			{
				newText = localizer.getText(oFF.RscMappingI18n.TOTALS_INCLUDING);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(newText))
				{
					formattedValue = visIndex === 0 ? newText : "";
					keyCorrectionCandidate = formattedValue;
				}
			}
			else if (memberType === oFF.MemberType.CONDITION_OTHERS_RESULT || memberType === oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT)
			{
				newText = localizer.getText(oFF.RscMappingI18n.TOTALS_REMAINING);
				if (oFF.XStringUtils.isNotNullAndNotEmpty(newText))
				{
					formattedValue = visIndex === 0 ? newText : "";
					keyCorrectionCandidate = formattedValue;
				}
			}
			else if (oFF.XStringUtils.isNullOrEmpty(formattedValue) && (fivare.getValueException() === null || fivare.getValueException() === oFF.ValueException.NORMAL || fivare.getDimensionMemberValueException() === null || fivare.getDimensionMemberValueException() === oFF.ValueException.NORMAL))
			{
				fieldReference = fivare.getFieldReference();
				field = oFF.isNull(fieldReference) ? null : fivare.getFieldReference().getField();
				let attribute = oFF.isNull(field) ? null : field.getAttribute();
				if (oFF.isNull(attribute))
				{
					formattedValue = fivare.getDimensionMemberName();
					keyCorrectionCandidate = formattedValue;
				}
				if (oFF.notNull(attribute) && oFF.XStringUtils.isNullOrEmpty(formattedValue) && !oFF.PresentationType.DISPLAY_KEY.isTypeOf(field.getPresentationType()) && !oFF.PresentationType.HIERARCHY_DISPLAY_KEY.isTypeOf(field.getPresentationType()) && !oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND.isTypeOf(field.getPresentationType()))
				{
					let displayKeyField = attribute.getFieldByPresentationType(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND);
					if (oFF.isNull(displayKeyField))
					{
						displayKeyField = attribute.getDisplayKeyField();
					}
					if (oFF.notNull(displayKeyField))
					{
						let displayKeyFieldName = displayKeyField.getName();
						if (fieldNameValueMap.containsKey(displayKeyFieldName))
						{
							formattedValue = fieldNameValueMap.getByKey(displayKeyFieldName);
						}
						if (fieldPlainValueMap.containsKey(displayKeyFieldName))
						{
							fivare.applyPlainValue(fieldPlainValueMap.getByKey(displayKeyFieldName));
						}
						else
						{
							keyCorrectionCandidate = formattedValue;
						}
					}
				}
				if (oFF.XStringUtils.isNullOrEmpty(formattedValue) && !(field.getDimension().isUniversalDisplayHierarchyDimension() && !oFF.RscMappingUtils.isUdhMainAttribute(field)))
				{
					formattedValue = localizer.getText(oFF.RscMappingI18n.VALUE_EXCEPTION_NO_VALUE);
				}
			}
			else
			{
				fieldReference = fivare.getFieldReference();
				field = oFF.isNull(fieldReference) ? null : fivare.getFieldReference().getField();
				let attr = oFF.isNull(field) ? null : field.getAttribute();
				let dimsn = oFF.isNull(field) ? null : field.getDimension();
				let fieldContainer;
				if (oFF.notNull(attr))
				{
					fieldContainer = attr;
				}
				else
				{
					fieldContainer = dimsn;
				}
				let nonCompoundInternalKeyField = oFF.isNull(fieldContainer) ? null : fieldContainer.getFieldByPresentationType(oFF.PresentationType.KEY_NOT_COMPOUND);
				let internalKeyField = oFF.isNull(fieldContainer) ? null : fieldContainer.getKeyField();
				let displKeyField = oFF.isNull(fieldContainer) ? null : fieldContainer.getDisplayKeyField();
				let isMainAttributeField = oFF.isNull(attr) || attr === dimsn.getMainAttribute();
				let presentationType = oFF.isNull(field) ? null : field.getPresentationType();
				if (field === displKeyField || isMainAttributeField && oFF.notNull(presentationType) && (presentationType.isTypeOf(oFF.PresentationType.DISPLAY_KEY) || presentationType.isTypeOf(oFF.PresentationType.HIERARCHY_DISPLAY_KEY) || presentationType.isTypeOf(oFF.PresentationType.DISPLAY_KEY_NOT_COMPOUND) || presentationType.isTypeOf(oFF.PresentationType.DISPLAY_KEY_MIXED_COMPOUNDMENT)))
				{
					let valueWithException = this.getPlainValueFromField(fieldPlainValueMap, fieldPlainExceptionMap, nonCompoundInternalKeyField);
					if (oFF.isNull(valueWithException))
					{
						valueWithException = this.getPlainValueFromField(fieldPlainValueMap, fieldPlainExceptionMap, internalKeyField);
					}
					if (oFF.notNull(valueWithException))
					{
						plainValue = valueWithException.getFirstObject();
						fivare.applyPlainValue(plainValue);
						fivare.setValueException(valueWithException.getSecondObject());
						let defaultFormat = oFF.RscFormattingInfoHelper.getDefaultFormat(plainValue, userProfile);
						fivare.setFormatPattern(defaultFormat);
						fivare.setFormatPatternFull(defaultFormat);
						fivare.setFormatPatternSimple(defaultFormat);
					}
				}
			}
			let obtainability = fivare.getFieldReference().getField().getObtainability();
			if (oFF.isNull(obtainability) || obtainability === oFF.ObtainabilityType.ALWAYS || oFF.XString.isEqual(fieldName, "0"))
			{
				visIndex++;
			}
			fivare.setText(formattedValue);
			if (oFF.notNull(userProfile))
			{
				fivare.setDecimalSeparator(userProfile.getDecimalSeparator());
				fivare.setDecimalGroupSeparator(userProfile.getDecimalGroupingSeparator());
			}
			fivare.setFormattedText(formattedValue);
			fivare.setFormattedTextFull(formattedValue);
			fivare.setFormattedTextSimple(formattedValue);
			if (isPlainValueEmpty && oFF.XStringUtils.isNotNullAndNotEmpty(keyCorrectionCandidate))
			{
				fivare.applyStringValue(keyCorrectionCandidate);
			}
			if (oFF.notNull(dimensionValue))
			{
				dimensionReference.addFieldName(fieldName);
				dimensionValue.addFieldValueReference(fivare);
			}
		}
	}
	let finalDummyTupleElement = dummyTupleElement;
	oFF.XStream.of(this.getAxisReference().getComponentsOnAxis()).find((coa) => {
		return this.getValueForModelComponent(coa) === null;
	}).ifPresent((foa) => {
		let dummyReference = foa;
		let dimensionReference = this.getAxisReference().getDimensionReference(dummyReference.getDimension().getName());
		let memberValueReference = this.getOrCreateMemberValueReference(dimensionReference, finalDummyTupleElement, null, null, null);
		let dummyValue = oFF.RscFieldValueReference.create(this, dummyReference, oFF.XStringValue.create(""), "", memberValueReference);
		this.m_values.put(dummyReference.getName(), dummyValue);
	});
	let structureMembers = oFF.XList.create();
	this.extractStructureMembers(structureMembers);
	let settingsFactory = oFF.XNumberFormatterSettingsFactory.getInstance();
	let queryModel = cursorAxis.getCursorResultSet().getQueryModel();
	let structureMemberFormatterSettings = oFF.QStructureMemberFormatterSettings.create(structureMembers, queryModel);
	let formatterSettings = settingsFactory.merge(userProfile, structureMemberFormatterSettings);
	this.correctNumericShift(structureMembers, derivePercentageFromShift);
	this.m_uniqueUnitInfo = this.getUniqueUnitInformation(formatterSettings);
	if (queryModel.getModelCapabilities().supportsNumericShiftPercent() && oFF.XStream.of(structureMembers).anyMatch((sm) => {
		return sm.isNumericShiftPercent() && sm.getUnitType() === oFF.UnitType.NONE;
	}) && oFF.notNull(this.m_numericShift) || derivePercentageFromShift && oFF.XStream.of(structureMembers).anyMatch((sm) => {
		return (sm.getUnitType() === oFF.UnitType.NONE || sm.getUnitType() === oFF.UnitType.UNDEFINED || sm.getUnitType() === oFF.UnitType.NULL_VALUE || sm.getUnitType() === null) && oFF.notNull(this.m_numericShift) && this.m_numericShift.getInteger() === 2;
	}))
	{
		this.m_cellValueType = oFF.XValueType.PERCENT;
	}
	this.m_uniqueUnitScaleInformation = this.getFormattedUnitScalingHeader(scaleTextsMap, formatterSettings, emptyCurrencyPair);
	this.m_uniqueScalingText = this.getScalingText(scaleTextsMap, formatterSettings, emptyCurrencyPair, derivePercentageFromShift);
	this.m_uniqueDecimalPlaces = formatterSettings.getRightPad();
};
oFF.RscTupleReference.prototype.setupFromOrigTupleAndDimension = function(inputTuple, dimensions, structureModelReferences)
{
	let values = inputTuple.getValuesMap();
	let inputTupleIndex = oFF.XIntegerValue.create(inputTuple.getTupleIndex());
	let coordinate = this.getAxisReference().getAxisType() === oFF.AxisType.ROWS ? oFF.XPair.create(inputTupleIndex, null) : oFF.XPair.create(null, inputTupleIndex);
	let structureMemberNames = oFF.XList.create();
	let keys = values.getKeysAsIterator();
	let fieldValueReferences = oFF.XList.create();
	while (keys.hasNext())
	{
		let key = keys.next();
		let value = inputTuple.getValueForKey(key);
		let modelReference = value.getModelReference();
		if (!oFF.XObjectExt.isValidObject(modelReference))
		{
			continue;
		}
		if (modelReference.getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD) && dimensions.contains(value.getFieldReference().getDimension()))
		{
			let fieldValueReference = value;
			let dimMemberName = fieldValueReference.getDimensionMemberName();
			if (!structureMemberNames.contains(dimMemberName))
			{
				structureMemberNames.add(dimMemberName);
				fieldValueReferences.add(fieldValueReference);
			}
		}
		else
		{
			this.putTupleValueReference(key, value);
		}
	}
	if (oFF.XCollectionUtils.hasElements(structureMemberNames))
	{
		let measureReference = structureModelReferences.getByKey(oFF.XCollectionUtils.join(structureMemberNames, " "));
		if (oFF.isNull(measureReference))
		{
			measureReference = oFF.RscTupleReference.getReference(fieldValueReferences);
		}
		measureReference.applyUnitAndScalingInfoAndMakeVisible(inputTuple);
		let measureValueReference = oFF.RscMeasureValueReference.createWithCoordinate(coordinate, this, measureReference);
		this.putTupleValueReference(oFF.XCollectionUtils.join(structureMemberNames, " "), measureValueReference);
	}
	else
	{
		this.m_tupleIndexCoordinate = coordinate;
	}
};

oFF.RscTupleValueReference = function() {};
oFF.RscTupleValueReference.prototype = new oFF.RscGenericValue();
oFF.RscTupleValueReference.prototype._ff_c = "RscTupleValueReference";

oFF.RscTupleValueReference.prototype.m_modelReference = null;
oFF.RscTupleValueReference.prototype.m_parent = null;
oFF.RscTupleValueReference.prototype.m_tupleReference = null;
oFF.RscTupleValueReference.prototype.findParent = function(fvr)
{
	let newParent = this.getParent();
	let i = 0;
	while (oFF.notNull(newParent) && newParent !== fvr && i < 100)
	{
		newParent = newParent.getParent();
		i++;
	}
	return newParent === fvr;
};
oFF.RscTupleValueReference.prototype.getModelReference = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_modelReference);
};
oFF.RscTupleValueReference.prototype.getParent = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_parent);
};
oFF.RscTupleValueReference.prototype.getTupleReference = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_tupleReference);
};
oFF.RscTupleValueReference.prototype.releaseObject = function()
{
	this.m_modelReference = null;
	oFF.RscGenericValue.prototype.releaseObject.call( this );
};
oFF.RscTupleValueReference.prototype.setParent = function(previousTupleValue)
{
	this.m_parent = oFF.XWeakReferenceUtil.getWeakRef(previousTupleValue);
};
oFF.RscTupleValueReference.prototype.setupWithTupleReference = function(tupleReference, value, text, formatPatternSimple, formattedTextSimple, formatPattern, formattedText, formatPatternFull, formattedTextFull, modelReference)
{
	this.m_tupleReference = oFF.XWeakReferenceUtil.getWeakRef(tupleReference);
	this.m_modelReference = oFF.XWeakReferenceUtil.getWeakRef(modelReference);
	oFF.RscGenericValue.prototype.setupInternal.call( this , value, text, formatPatternSimple, formattedTextSimple, formatPattern, formattedText, formatPatternFull, formattedTextFull);
};

oFF.SacAnalyticTableCsvRenderHelper = function() {};
oFF.SacAnalyticTableCsvRenderHelper.prototype = new oFF.SacTableCsvRenderHelper();
oFF.SacAnalyticTableCsvRenderHelper.prototype._ff_c = "SacAnalyticTableCsvRenderHelper";


oFF.SacAnalyticTableWidgetRenderHelper = function() {};
oFF.SacAnalyticTableWidgetRenderHelper.prototype = new oFF.SacTableWidgetRenderHelper();
oFF.SacAnalyticTableWidgetRenderHelper.prototype._ff_c = "SacAnalyticTableWidgetRenderHelper";

oFF.SacAnalyticTableWidgetRenderHelper.createAnalyticTableRenderHelper = function(parentTable)
{
	let instance = new oFF.SacAnalyticTableWidgetRenderHelper();
	instance.initializeRH(parentTable);
	instance.m_rowTupleIndexMap = oFF.XSimpleMap.create();
	instance.m_columnTupleIndexMap = oFF.XSimpleMap.create();
	return instance;
};
oFF.SacAnalyticTableWidgetRenderHelper.prototype.m_columnTupleIndexMap = null;
oFF.SacAnalyticTableWidgetRenderHelper.prototype.m_rowTupleIndexMap = null;
oFF.SacAnalyticTableWidgetRenderHelper.prototype.getAnalyticTable = function()
{
	return this.getTableObject();
};
oFF.SacAnalyticTableWidgetRenderHelper.prototype.preFormatCellChart = function(themeCache, cellBase, structure, rowIndex, colIndex)
{
	let cellChart = oFF.SacTableWidgetRenderHelper.prototype.preFormatCellChart.call( this , themeCache, cellBase, structure, rowIndex, colIndex);
	return cellChart;
};
oFF.SacAnalyticTableWidgetRenderHelper.prototype.renderCell = function(themeCache, cellList, cellBase, styles, rowIndex, colIndex)
{
	let cellBaseActual = cellBase;
	if (cellBase.isEffectiveMergeRepetitiveHeaderCells())
	{
		if (cellBaseActual.getRepetitiveColumns() > 0)
		{
			cellBaseActual.setMergedColumns(cellBaseActual.getRepetitiveColumns());
		}
		if (cellBaseActual.getRepetitiveRows() > 0)
		{
			cellBaseActual.setMergedRows(cellBaseActual.getRepetitiveRows());
		}
	}
	else
	{
		if (cellBaseActual.getParentRow().isBaseElement() && cellBaseActual.getMergedColumns() > 0)
		{
			cellBaseActual.setMergedColumns(0);
		}
		if (cellBaseActual.getParentColumn().isBaseElement() && cellBaseActual.getMergedRows() > 0)
		{
			cellBaseActual.setMergedRows(0);
		}
	}
	let structure = oFF.SacTableWidgetRenderHelper.prototype.renderCell.call( this , themeCache, cellList, cellBase, styles, rowIndex, colIndex);
	let parentColumn = cellBaseActual.getParentColumn();
	let parentRow = cellBaseActual.getParentRow();
	let rowTupleIndex = parentRow.getTupleIndex();
	let columnTupleIndex = parentColumn.getTupleIndex();
	let rowTupleIndexValue = oFF.XIntegerValue.create(rowTupleIndex);
	let columnTupleIndexValue = oFF.XIntegerValue.create(columnTupleIndex);
	if (!this.m_rowTupleIndexMap.containsKey(rowTupleIndexValue))
	{
		this.m_rowTupleIndexMap.put(rowTupleIndexValue, oFF.XIntegerValue.create(rowIndex));
	}
	if (!this.m_columnTupleIndexMap.containsKey(columnTupleIndexValue))
	{
		this.m_columnTupleIndexMap.put(columnTupleIndexValue, oFF.XIntegerValue.create(colIndex));
	}
	let refCol = colIndex;
	let refRow = rowIndex;
	let repeatedRefColumn = cellBaseActual.getRepeatedRefColumn();
	let repeatedRefRow = cellBaseActual.getRepeatedRefRow();
	if (cellBaseActual.isRepeatedHeader())
	{
		let repeatedRefColumnValue = oFF.XIntegerValue.create(repeatedRefColumn);
		let repeatedRefRowValue = oFF.XIntegerValue.create(repeatedRefRow);
		let referenceValueAvailable = false;
		if (repeatedRefColumn > -1 && this.m_columnTupleIndexMap.containsKey(repeatedRefColumnValue))
		{
			refCol = this.m_columnTupleIndexMap.getByKey(repeatedRefColumnValue).getInteger();
			referenceValueAvailable = true;
		}
		if (repeatedRefRow > -1 && this.m_rowTupleIndexMap.containsKey(repeatedRefRowValue))
		{
			refRow = this.m_rowTupleIndexMap.getByKey(repeatedRefRowValue).getInteger();
			referenceValueAvailable = true;
		}
		if (referenceValueAvailable)
		{
			structure.putInteger(oFF.SacTableConstants.C_N_REF_ROW, refRow);
			structure.putInteger(oFF.SacTableConstants.C_N_REF_COL, refCol);
		}
	}
	structure.putInteger(oFF.SacTableConstants.N_TUPLE_INDEX, columnTupleIndex);
	if (cellBaseActual.getParentRow().isLastHeader() && !this.getAnalyticTable().isEmptyRowDimensions())
	{
		structure.putInteger(oFF.SacTableConstants.RCS_N_INDEX, parentColumn.getDimensionIndex());
		if (parentColumn.getFieldName() !== null)
		{
			structure.putString(oFF.SacTableConstants.C_SN_FIELD, parentColumn.getFieldName());
		}
	}
	else
	{
		structure.putInteger(oFF.SacTableConstants.RCS_N_INDEX, parentRow.getDimensionIndex());
		if (parentRow.getFieldName() !== null)
		{
			structure.putString(oFF.SacTableConstants.C_SN_FIELD, parentRow.getFieldName());
		}
	}
	if (cellBaseActual.getSortDirection() !== null)
	{
		let iconContent = null;
		if (cellBaseActual.getSortDirection() === oFF.XSortDirection.DEFAULT_VALUE)
		{
			iconContent = "\uE095";
		}
		else if (cellBaseActual.getSortDirection() === oFF.XSortDirection.ASCENDING)
		{
			iconContent = "\uE1FD";
		}
		else if (cellBaseActual.getSortDirection() === oFF.XSortDirection.DESCENDING)
		{
			iconContent = "\uE1FC";
		}
		let cellIcon = structure.putNewList(oFF.SacTableConstants.C_L_CELL_ICONS_RIGHT).addNewStructure();
		cellIcon.putString(oFF.SacTableConstants.CI_S_CLASS_NAME, oFF.SacTableConstants.CI_SV_CLASS_NAME_SAP_UI_ICON);
		let cellIconAttribute = cellIcon.putNewStructure(oFF.SacTableConstants.CI_M_DATA_ATTRIBUTES);
		cellIconAttribute.putString(oFF.SacTableConstants.CIA_S_DATA_SAP_UI_ICON_CONTENT, iconContent);
		let cellIconStyle = cellIcon.putNewStructure(oFF.SacTableConstants.CI_M_STYLE);
		cellIconStyle.putString(oFF.SacTableConstants.CIS_S_FONT_FAMILY, oFF.SacTableConstants.CIS_SV_SAP_ICONS);
		cellIconStyle.putInteger(oFF.SacTableConstants.CIS_N_MARGIN_LEFT, oFF.SacTableConstants.CIS_NV_MARGIN_RIGHT);
		let type = cellBaseActual.getType();
		if (type === oFF.SacTableConstants.CT_ATTRIBUTE_COL_DIM_HEADER || type === oFF.SacTableConstants.CT_COL_DIM_HEADER || type === oFF.SacTableConstants.CT_ROW_DIM_MEMBER || type === oFF.SacTableConstants.CT_ATTRIBUTE_ROW_DIM_MEMBER)
		{
			cellIconStyle.putString(oFF.SacTableConstants.CIS_S_ROTATE, oFF.SacTableConstants.CIS_SV_ROTATE);
		}
		cellIcon.putBoolean(oFF.SacTableConstants.CI_B_ICON_AFTER, true);
	}
	return structure;
};
oFF.SacAnalyticTableWidgetRenderHelper.prototype.renderColumn = function(sacTableColumn, columnStructure)
{
	if (oFF.notNull(sacTableColumn))
	{
		let sacTableColumnActual = sacTableColumn;
		columnStructure.putInteger(oFF.SacTableConstants.RCS_N_INDEX, sacTableColumnActual.getDimensionIndex());
		columnStructure.putInteger(oFF.SacTableConstants.N_TUPLE_INDEX, sacTableColumnActual.getTupleIndex());
		columnStructure.putString(oFF.SacTableConstants.C_SN_FIELD, sacTableColumnActual.getFieldName());
	}
};
oFF.SacAnalyticTableWidgetRenderHelper.prototype.renderRow = function(themeCache, rowList, row, rowIndex, headerColumnListSize, curColumnPageStart, curColumnPageEnd)
{
	let rowActual = row;
	let structure = oFF.SacTableWidgetRenderHelper.prototype.renderRow.call( this , themeCache, rowList, row, rowIndex, headerColumnListSize, curColumnPageStart, curColumnPageEnd);
	structure.putInteger(oFF.SacTableConstants.N_TUPLE_INDEX, rowActual.getTupleIndex());
	structure.putInteger(oFF.SacTableConstants.RCS_N_INDEX, rowActual.getDimensionIndex());
	structure.putString(oFF.SacTableConstants.C_SN_FIELD, rowActual.getFieldName());
	return structure;
};

oFF.SacAnalyticTableXlsRenderHelper = function() {};
oFF.SacAnalyticTableXlsRenderHelper.prototype = new oFF.SacTableXlsRenderHelper();
oFF.SacAnalyticTableXlsRenderHelper.prototype._ff_c = "SacAnalyticTableXlsRenderHelper";


oFF.ReferenceGrid = function() {};
oFF.ReferenceGrid.prototype = new oFF.XObject();
oFF.ReferenceGrid.prototype._ff_c = "ReferenceGrid";

oFF.ReferenceGrid.MAGIC_CELL_DIV = "/";
oFF.ReferenceGrid.create = function(resultSet)
{
	let grid = new oFF.ReferenceGrid();
	grid.setupSimpleGrid(resultSet, false, false);
	return grid;
};
oFF.ReferenceGrid.createForVizGrid = function(resultSet)
{
	let grid = new oFF.ReferenceGrid();
	grid.setupSimpleGrid(resultSet, false, true);
	return grid;
};
oFF.ReferenceGrid.createWithDetails = function(resultSet)
{
	let grid = new oFF.ReferenceGrid();
	grid.setupSimpleGrid(resultSet, true, false);
	return grid;
};
oFF.ReferenceGrid.createWithName = function(gridName, resultSet)
{
	let grid = new oFF.ReferenceGrid();
	grid.setupSimpleGrid(resultSet, false, false);
	return grid;
};
oFF.ReferenceGrid.createWithNameAndDetails = function(gridName, resultSet)
{
	let grid = new oFF.ReferenceGrid();
	grid.setupSimpleGrid(resultSet, true, false);
	return grid;
};
oFF.ReferenceGrid.prototype.m_defineAllCells = false;
oFF.ReferenceGrid.prototype.m_fixedHeightOff = 0;
oFF.ReferenceGrid.prototype.m_fixedWidthOff = 0;
oFF.ReferenceGrid.prototype.m_formattingCellFn = null;
oFF.ReferenceGrid.prototype.m_grid = null;
oFF.ReferenceGrid.prototype.m_offsetColumns = 0;
oFF.ReferenceGrid.prototype.m_offsetRows = 0;
oFF.ReferenceGrid.prototype.m_renderForFireflyGrid = false;
oFF.ReferenceGrid.prototype.m_resultSet = null;
oFF.ReferenceGrid.prototype.m_withDetails = false;
oFF.ReferenceGrid.prototype.addCell = function(axisType, position, tupleIndex, tupleOffset, cell)
{
	if (axisType === oFF.AxisType.ROWS)
	{
		cell.setRow(tupleIndex + tupleOffset + this.m_offsetRows);
		cell.setColumn(position + this.m_offsetColumns);
		this.m_grid.setCell(position, tupleIndex + tupleOffset, cell, false);
	}
	else
	{
		cell.setRow(position);
		cell.setColumn(tupleIndex + tupleOffset);
		this.m_grid.setCell(tupleIndex + tupleOffset, position, cell, false);
	}
};
oFF.ReferenceGrid.prototype.addColumnsDef = function(line)
{
	this.m_grid.addColumnsDef(line);
};
oFF.ReferenceGrid.prototype.addRowsDef = function(line)
{
	this.m_grid.addRowsDef(line);
};
oFF.ReferenceGrid.prototype.appendAlertLevel = function(dataCell, sb)
{
	let maxAlertLevel = dataCell.getMaxAlertLevel();
	if (maxAlertLevel !== oFF.AlertLevel.NORMAL)
	{
		sb.append("|[");
		sb.append(oFF.isNull(maxAlertLevel) ? "<null>" : maxAlertLevel.getName());
		sb.append("]");
	}
};
oFF.ReferenceGrid.prototype.appendAlertLevelToValue = function(element, formattedValue)
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(element.getExceptionName()))
	{
		formattedValue.append(" [").appendInt(element.getAlertLevel()).append("]");
	}
};
oFF.ReferenceGrid.prototype.appendCurrencyUnit = function(currencyUnit, sb)
{
	if (oFF.notNull(currencyUnit) && !currencyUnit.isEmpty())
	{
		sb.append("|");
		if (currencyUnit.isMixed())
		{
			sb.append("M:");
		}
		else if (currencyUnit.hasUnit())
		{
			sb.append("U:");
		}
		else if (currencyUnit.hasCurrency())
		{
			sb.append("C:");
		}
		if (currencyUnit.hasFormatted())
		{
			sb.append(currencyUnit.getFormatted());
		}
		else
		{
			sb.append("<null>");
		}
	}
};
oFF.ReferenceGrid.prototype.appendInputReadiness = function(dataCell, readinessStates, sb)
{
	let queryManager = dataCell.getQueryModel().getQueryManager();
	if (queryManager.supportsInputReadinessStates() && dataCell.getQueryModel().isDataEntryEnabled())
	{
		let inputReadinessState = dataCell.getInputReadinessState();
		if (oFF.notNull(inputReadinessState))
		{
			let readinessState = readinessStates.get(inputReadinessState.getIndex());
			let inputReadinessTypes = readinessState.getInputReadinessTypes();
			let types = oFF.XList.create();
			for (let i = 0; i < inputReadinessTypes.size(); i++)
			{
				types.add(inputReadinessTypes.get(i).getShortcut());
			}
			sb.append("|S:").append(oFF.XCollectionUtils.join(types, ","));
		}
	}
};
oFF.ReferenceGrid.prototype.appendPrefixValueSuffix = function(currencyUnit, dataCell, sb)
{
	if (oFF.notNull(currencyUnit) && currencyUnit.hasPrefix())
	{
		sb.append(currencyUnit.getPrefix()).append(" ");
	}
	sb.append(this.formatDataCellValue(dataCell));
	if (oFF.notNull(currencyUnit) && currencyUnit.hasSuffix())
	{
		sb.append(" ").append(currencyUnit.getSuffix());
	}
};
oFF.ReferenceGrid.prototype.appendValueChanged = function(dataCell, sb)
{
	if (dataCell.isValueChanged())
	{
		sb.append("|N:");
		let newValue = dataCell.getXValue();
		if (oFF.isNull(newValue))
		{
			sb.append("<null>");
		}
		else
		{
			sb.append(newValue.getValueType().getName());
			if (newValue.getValueType() === oFF.XValueType.STRING)
			{
				sb.append(" ").append(newValue.getString());
			}
		}
	}
	if (dataCell.isNewValueForced())
	{
		sb.append("|F:");
	}
};
oFF.ReferenceGrid.prototype.appendValueException = function(dataCell, sb)
{
	let valueException = dataCell.getValueException();
	if (valueException !== oFF.ValueException.NORMAL)
	{
		sb.append("|");
		if (oFF.isNull(valueException))
		{
			sb.append("<null>");
		}
		else
		{
			sb.append(valueException.getName());
		}
	}
};
oFF.ReferenceGrid.prototype.enableTotals = function(axisType, position)
{
	let rgLineDef;
	if (axisType === oFF.AxisType.ROWS)
	{
		rgLineDef = this.m_grid.getRowsDef(position);
	}
	else
	{
		rgLineDef = this.m_grid.getColumnDef(position);
	}
	if (oFF.notNull(rgLineDef))
	{
		rgLineDef.setHasTotals(true);
	}
};
oFF.ReferenceGrid.prototype.exportBodyColumns = function(maxCellSize, useColumnsHeaderPane, columnStart, maxColumnCount)
{
	return this.exportToAsciiExt(maxCellSize, false, useColumnsHeaderPane, 0, -1, columnStart, maxColumnCount);
};
oFF.ReferenceGrid.prototype.exportBodyRows = function(maxCellSize, useRowsHeaderPane, rowStart, maxRowCount)
{
	return this.exportToAsciiExt(maxCellSize, useRowsHeaderPane, false, rowStart, maxRowCount, 0, -1);
};
oFF.ReferenceGrid.prototype.exportForProtocol = function(protocolType)
{
	return this.exportToVizGrid();
};
oFF.ReferenceGrid.prototype.exportToAscii = function(maxCellSize)
{
	return this.exportToAsciiExt(maxCellSize, true, true, 0, -1, 0, -1);
};
oFF.ReferenceGrid.prototype.exportToAsciiExt = function(maxCellSize, useRowsHeaderPane, useColumnsHeaderPane, rowStart, maxRowCount, columnStart, maxColumnCount)
{
	this.prepareCellStructure(useRowsHeaderPane, useColumnsHeaderPane);
	return this.m_grid.exportToAsciiExt(maxCellSize, useRowsHeaderPane, useColumnsHeaderPane, rowStart, maxRowCount, columnStart, maxColumnCount);
};
oFF.ReferenceGrid.prototype.exportToCsv = function(maxRowCount, maxColumnCount)
{
	this.prepareCellStructure(true, true);
	return this.m_grid.exportToCsv(maxRowCount, maxColumnCount);
};
oFF.ReferenceGrid.prototype.exportToFingerprint = function()
{
	this.m_grid.setFingerprintMode();
	this.prepareCellStructure(true, true);
	return this.m_grid.getFingerprint();
};
oFF.ReferenceGrid.prototype.exportToVizGrid = function()
{
	this.prepareCellStructure(true, true);
	let colCount = this.m_grid.getColumnCount();
	let rowCount = this.m_grid.getRowCount();
	let layer1 = oFF.PrFactory.createStructure();
	layer1.putString("Type", "Grid");
	layer1.putInteger("RowCount", rowCount);
	layer1.putInteger("ColCount", colCount);
	let layer1Cells = layer1.putNewList("Cells");
	for (let y = 0; y < rowCount; y++)
	{
		for (let x = 0; x < colCount; x++)
		{
			let cell = layer1Cells.addNewStructure();
			let gridCell = this.m_grid.getSimpleCell(x, y);
			if (oFF.notNull(gridCell))
			{
				cell.putString("Type", gridCell.getValueType().isNumber() ? "Number" : "Text");
				cell.putString("Value", gridCell.getText(50));
				if (!gridCell.isLeftAligned())
				{
					cell.putString("HAlign", "End");
				}
				if (gridCell.isTotals())
				{
					cell.putBoolean("Totals", true);
				}
				let cellType = gridCell.getCellType();
				if (cellType === oFF.RgCellType.HEADER)
				{
					cell.putString("Semantic", "Header");
				}
				else if (cellType === oFF.RgCellType.TITLE)
				{
					cell.putString("Semantic", "Title");
				}
			}
			else
			{
				cell.putString("Type", "Empty");
			}
		}
	}
	return layer1;
};
oFF.ReferenceGrid.prototype.formatDataCellValue = function(dataCell)
{
	if (oFF.notNull(this.m_formattingCellFn))
	{
		return this.m_formattingCellFn(dataCell);
	}
	return dataCell.getFormattedValue();
};
oFF.ReferenceGrid.prototype.formatFieldValue = function(fieldValue)
{
	if (oFF.isNull(fieldValue))
	{
		return "[null]";
	}
	else
	{
		if (fieldValue.getValueType() === oFF.XValueType.DOUBLE || fieldValue.getValueType() === oFF.XValueType.DECIMAL_FLOAT && fieldValue.getDecFloat().mayLoosePrecision())
		{
			let value = fieldValue.getDouble();
			return oFF.XNumberFormatter.formatDoubleToString(value, "#.0000");
		}
		else
		{
			return fieldValue.getFormattedValue();
		}
	}
};
oFF.ReferenceGrid.prototype.getCellValue = function(formattedValue, dataCell)
{
	let valueException = dataCell.getValueException();
	if (valueException === oFF.ValueException.NULL_VALUE || valueException === oFF.ValueException.UNDEFINED)
	{
		return "";
	}
	let exceptionText = null;
	if (valueException !== oFF.ValueException.NORMAL && valueException !== oFF.ValueException.ZERO)
	{
		exceptionText = valueException.getName();
	}
	let alertLevelText = null;
	let maxAlertLevel = dataCell.getMaxAlertLevel();
	if (maxAlertLevel !== oFF.AlertLevel.NORMAL)
	{
		alertLevelText = maxAlertLevel.getName();
	}
	if (oFF.notNull(exceptionText) || oFF.notNull(alertLevelText))
	{
		let buffer = oFF.XStringBuffer.create();
		buffer.append(formattedValue);
		if (oFF.notNull(alertLevelText))
		{
			buffer.append(" [").append(alertLevelText).append("]");
		}
		if (oFF.notNull(exceptionText))
		{
			buffer.append(" [").append(exceptionText).append("]");
		}
		return buffer.toString();
	}
	return formattedValue;
};
oFF.ReferenceGrid.prototype.getCellValueWithDetails = function(dataCell, readinessStates)
{
	let sb = oFF.XStringBuffer.create();
	let qDataCell = dataCell.getDataCell();
	if (oFF.notNull(qDataCell))
	{
		sb.append("(DataCell->").append(qDataCell.getName()).append(")");
	}
	let decimalPlaces = dataCell.getDecimalPlaces();
	if (decimalPlaces !== 0)
	{
		sb.append("(Decimal Places=").appendInt(decimalPlaces).append(")");
	}
	if (dataCell.isDataEntryEnabled())
	{
		sb.append("I:");
	}
	if (dataCell.isValueLocked())
	{
		sb.append("L:");
	}
	let currencyUnit = dataCell.getCurrencyUnit();
	this.appendPrefixValueSuffix(currencyUnit, dataCell, sb);
	this.appendValueException(dataCell, sb);
	this.appendAlertLevel(dataCell, sb);
	this.appendValueChanged(dataCell, sb);
	sb.append("|").append(dataCell.getValueType().getName());
	sb.append("|").append(dataCell.getFormatString());
	this.appendCurrencyUnit(currencyUnit, sb);
	this.appendInputReadiness(dataCell, readinessStates, sb);
	return sb.toString();
};
oFF.ReferenceGrid.prototype.getColumnCount = function()
{
	return this.m_grid.getColumnCount();
};
oFF.ReferenceGrid.prototype.getColumnDef = function(index)
{
	return this.m_grid.getColumnDef(index);
};
oFF.ReferenceGrid.prototype.getColumnMaxCharacters = function(column, rowStart, maxRowCount)
{
	return this.m_grid.getColumnMaxCharacters(column, rowStart, maxRowCount);
};
oFF.ReferenceGrid.prototype.getEffectiveFieldSize = function(axis)
{
	let effectiveSize = 0;
	let rsDimensions = axis.getRsDimensions();
	let dimensionSize = rsDimensions.size();
	for (let idxDim = 0; idxDim < dimensionSize; idxDim++)
	{
		effectiveSize = effectiveSize + rsDimensions.get(idxDim).getResultSetFields().size();
	}
	return effectiveSize;
};
oFF.ReferenceGrid.prototype.getFingerprint = oFF.noSupport;
oFF.ReferenceGrid.prototype.getFixedColumnsCount = function()
{
	return this.m_grid.getFixedColumnsCount();
};
oFF.ReferenceGrid.prototype.getFixedHeight = function()
{
	return this.m_grid.getFixedHeight();
};
oFF.ReferenceGrid.prototype.getFixedRowsCount = function()
{
	return this.m_grid.getFixedRowsCount();
};
oFF.ReferenceGrid.prototype.getFixedWidth = function()
{
	return this.m_grid.getFixedWidth();
};
oFF.ReferenceGrid.prototype.getRowCount = function()
{
	return this.m_grid.getRowCount();
};
oFF.ReferenceGrid.prototype.getRowsDef = function(index)
{
	return this.m_grid.getRowsDef(index);
};
oFF.ReferenceGrid.prototype.getSimpleCell = function(column, row)
{
	return this.m_grid.getSimpleCell(column, row);
};
oFF.ReferenceGrid.prototype.hasCells = function()
{
	return this.m_grid.hasCells();
};
oFF.ReferenceGrid.prototype.prepareCellStructure = function(useRowsHeaderPane, useColumnsHeaderPane)
{
	if (this.m_grid.hasCells() === false && oFF.notNull(this.m_resultSet))
	{
		this.prepareStructure(useRowsHeaderPane, useColumnsHeaderPane);
	}
};
oFF.ReferenceGrid.prototype.prepareStructure = function(useRowsHeaderPane, useColumnsHeaderPane)
{
	let columnsAxis = this.m_resultSet.getColumnsAxis();
	let colMaxCount = oFF.XMath.max(columnsAxis.getDataCount(), columnsAxis.getTuplesCount());
	let rowsAxis = this.m_resultSet.getRowsAxis();
	if (useColumnsHeaderPane)
	{
		this.m_grid.setFixedHeight(oFF.XMath.max(this.getEffectiveFieldSize(columnsAxis), this.m_renderForFireflyGrid && this.getEffectiveFieldSize(rowsAxis) === 0 ? 0 : 1));
	}
	else
	{
		this.m_grid.setFixedHeight(0);
	}
	let rowDataCount = rowsAxis.getDataCount();
	let rowTupleCount = rowsAxis.getTuplesCount();
	let rowMaxCount = oFF.XMath.max(rowDataCount, rowTupleCount);
	if (useRowsHeaderPane)
	{
		this.m_grid.setFixedWidth(oFF.XMath.max(this.getEffectiveFieldSize(rowsAxis), 1));
	}
	else
	{
		this.m_grid.setFixedWidth(0);
	}
	let totalColumns = this.m_grid.getFixedWidth() + colMaxCount;
	let totalRows = this.m_grid.getFixedHeight() + rowMaxCount;
	this.m_offsetColumns = this.m_resultSet.getQueryManager().getOffsetColumns();
	this.m_offsetRows = this.m_resultSet.getQueryManager().getOffsetRows();
	this.m_grid.setFullSize(totalColumns, totalRows);
	for (let x = 0; x < totalColumns; x++)
	{
		this.m_grid.addColumnsDef(oFF.XReferenceGridLine.create());
	}
	for (let y = 0; y < totalRows; y++)
	{
		this.m_grid.addRowsDef(oFF.XReferenceGridLine.create());
	}
	if (useRowsHeaderPane && useColumnsHeaderPane)
	{
		this.setTitleCells(rowsAxis, oFF.XMath.max(this.getFixedHeight() - 1, 0), columnsAxis.getRsDimensions().isEmpty());
		this.setTitleCells(columnsAxis, oFF.XMath.max(this.getFixedWidth() - 1, 0), rowsAxis.getRsDimensions().isEmpty());
	}
	if (useRowsHeaderPane)
	{
		let fixedHeight = this.m_grid.getFixedHeight() - this.m_fixedHeightOff;
		this.setHeaderCells(rowsAxis, fixedHeight);
	}
	if (useColumnsHeaderPane)
	{
		let fixedWidth = this.m_grid.getFixedWidth() - this.m_fixedWidthOff;
		this.setHeaderCells(columnsAxis, fixedWidth);
	}
	this.setDataCells();
};
oFF.ReferenceGrid.prototype.prependToFirstField = function(element, formattedValue)
{
	let displayLevel = element.getDisplayLevel();
	let drillState = element.getDrillState();
	if (displayLevel > 0 || drillState !== oFF.DrillState.LEAF)
	{
		let oldValue = formattedValue.toString();
		formattedValue.clear();
		for (let i = 0; i < displayLevel; i++)
		{
			formattedValue.append("  ");
		}
		if (drillState === oFF.DrillState.COLLAPSED || drillState === oFF.DrillState.LEAF_DRILLDOWN_ALLOWED || drillState === oFF.DrillState.LEAF_UDH_EXPAND_ALLOWED || drillState === oFF.DrillState.COLLAPSED_EXPAND_AND_DRILLDOWN_ALLOWED)
		{
			formattedValue.append("+ ");
		}
		else if (drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED || drillState === oFF.DrillState.LEAF_UDH)
		{
			formattedValue.append("- ");
		}
		formattedValue.append(oldValue);
	}
};
oFF.ReferenceGrid.prototype.releaseObject = function()
{
	this.m_resultSet = null;
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.ReferenceGrid.prototype.setCell = function(x, y, cell, overwriteAllowed)
{
	this.m_grid.setCell(x, y, cell, overwriteAllowed);
};
oFF.ReferenceGrid.prototype.setDataCells = function()
{
	let readinessStates = this.m_resultSet.getInputReadinessStates();
	let dc = this.m_resultSet.getDataColumns();
	let dr = this.m_resultSet.getDataRows();
	let sb = oFF.XStringBuffer.create();
	for (let y = 0; y < dr; y++)
	{
		for (let x = 0; x < dc; x++)
		{
			let dataCell = this.m_resultSet.getDataCell(x, y);
			let cell;
			if (this.m_withDetails)
			{
				cell = oFF.XReferenceGridCell.create(this.getCellValueWithDetails(dataCell, readinessStates), oFF.RgCellType.DATA);
			}
			else
			{
				cell = oFF.XReferenceGridCell.create(this.getCellValue(this.formatDataCellValue(dataCell), dataCell), oFF.RgCellType.DATA);
			}
			cell.setValueType(dataCell.getValueType());
			if (this.m_renderForFireflyGrid)
			{
				sb.clear();
				this.appendPrefixValueSuffix(dataCell.getCurrencyUnit(), dataCell, sb);
				cell.setDisplayValue(sb.toString());
				cell.setPart("Data");
				cell.setAlertLeve(dataCell.getMaxAlertLevel().getName());
				cell.setIsInputEnabled(dataCell.isDataEntryEnabled());
				let rsDC = dataCell.getDataCell();
				if (oFF.notNull(rsDC))
				{
					let s1 = dataCell.getQueryModel().getDataSource().getName();
					sb.clear();
					let refStr = rsDC.getReferenceStructureElement1();
					if (oFF.notNull(refStr))
					{
						sb.append("mem-");
						sb.append(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
						if (refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()) !== null)
						{
							cell.setMember(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
						}
						else
						{
							cell.setMember(refStr.getName());
						}
					}
					refStr = rsDC.getReferenceStructureElement2();
					if (oFF.notNull(refStr))
					{
						sb.append("-mem-");
						sb.append(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
						if (refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()) !== null)
						{
							cell.setMember2(refStr.getFieldValue(refStr.getDimension().getDisplayKeyField()).getString());
						}
						else
						{
							cell.setMember(refStr.getName());
						}
					}
					let s2 = sb.toString();
					let s3 = dataCell.getValueException().isValidValue() && dataCell.getValueException() !== oFF.ValueException.NULL_VALUE ? oFF.XNumberFormatter.formatDoubleToString(dataCell.getDouble(), "0.####") : "";
					sb.clear();
					cell.setDataValueId(oFF.XStringUtils.concatenate5(s1, "-", s2, "-", s3));
				}
				cell.setRow(y + this.m_grid.getFixedHeight() - this.m_fixedHeightOff + this.m_offsetRows);
				cell.setColumn(x + this.m_grid.getFixedWidth() - this.m_fixedWidthOff + this.m_offsetColumns);
			}
			this.m_grid.setCell(x + this.m_grid.getFixedWidth() - this.m_fixedWidthOff, y + this.m_grid.getFixedHeight() - this.m_fixedHeightOff, cell, false);
		}
	}
};
oFF.ReferenceGrid.prototype.setFingerprintMode = oFF.noSupport;
oFF.ReferenceGrid.prototype.setFixedHeight = function(fixedHeight)
{
	this.m_grid.setFixedHeight(fixedHeight);
};
oFF.ReferenceGrid.prototype.setFixedWidth = function(fixedWidth)
{
	this.m_grid.setFixedWidth(fixedWidth);
};
oFF.ReferenceGrid.prototype.setFormattingCellFn = function(formattingCellFn)
{
	this.m_formattingCellFn = formattingCellFn;
};
oFF.ReferenceGrid.prototype.setFullSize = function(totalColumns, totalRows)
{
	this.m_grid.setFullSize(totalColumns, totalRows);
};
oFF.ReferenceGrid.prototype.setHeaderCells = function(axis, tupleOffset)
{
	let rsDimensions = axis.getRsDimensions();
	let axisType = axis.getType();
	let tuplesCount = axis.getTuplesCount();
	let formattedValue = oFF.XStringBuffer.create();
	let displayValue = oFF.XStringBuffer.create();
	let emptyHeaderCell = oFF.XReferenceGridCell.create(null, oFF.RgCellType.HEADER);
	let emptyHeaderTotalsCell = oFF.XReferenceGridCell.create(null, oFF.RgCellType.HEADER);
	for (let tupleIndex = 0; tupleIndex < tuplesCount; tupleIndex++)
	{
		let tuple = axis.getTupleAt(tupleIndex);
		let position = 0;
		let hasTotals = false;
		let tupleSize = tuple.size();
		for (let tupleElementIndex = 0; tupleElementIndex < tupleSize; tupleElementIndex++)
		{
			let rsDimension = rsDimensions.get(tupleElementIndex);
			let element = tuple.get(tupleElementIndex);
			let rsVisibleFields = rsDimension.getResultSetFields();
			let visibleFieldCount = rsVisibleFields.size();
			if (element.getFirstTuple() === tuple || this.m_renderForFireflyGrid === true)
			{
				let dimensionMember = element.getDimensionMember();
				formattedValue.clear();
				let memberType = dimensionMember.getMemberType();
				if (memberType.isResult() && memberType !== oFF.MemberType.OTHERS_FROM_CONDITIONS_RESULT)
				{
					this.enableTotals(axisType, tupleIndex + tupleOffset);
					if (visibleFieldCount > 0)
					{
						let added = 0;
						if (!hasTotals)
						{
							if (memberType === oFF.MemberType.CONDITION_RESULT)
							{
								formattedValue.append("[Totals Included]");
								displayValue.append("[Totals Included]");
							}
							else if (memberType === oFF.MemberType.CONDITION_OTHERS_RESULT)
							{
								formattedValue.append("[Totals Remaining]");
								displayValue.append("[Totals Remaining]");
							}
							else
							{
								formattedValue.append("[Totals]");
								displayValue.append("[Totals]");
							}
							this.appendAlertLevelToValue(element, formattedValue);
							let totalsCell = oFF.XReferenceGridCell.create(formattedValue.toString(), oFF.RgCellType.HEADER);
							if (this.m_renderForFireflyGrid)
							{
								if (element.getFirstTuple() === tuple)
								{
									totalsCell.setDisplayValue(displayValue.toString());
								}
								totalsCell.setDimension(rsDimension.getName());
								if (rsDimension.isStructure() && dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()) !== null)
								{
									totalsCell.setMember(dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()).getString());
								}
								else
								{
									totalsCell.setMember(dimensionMember.getName());
								}
								if (axis === this.m_resultSet.getRowsAxis())
								{
									totalsCell.setPart("Rows");
									totalsCell.setRowTupleIndex(tupleIndex);
								}
								else
								{
									totalsCell.setPart("Columns");
									totalsCell.setColumnTupleIndex(tupleIndex);
								}
							}
							this.addCell(axisType, position, tupleIndex, tupleOffset, totalsCell);
							formattedValue.clear();
							displayValue.clear();
							added = 1;
						}
						if (this.m_defineAllCells)
						{
							position = position + added;
							for (let x = added; x < visibleFieldCount; x++)
							{
								this.addCell(axisType, position, tupleIndex, tupleOffset, emptyHeaderTotalsCell);
								position++;
							}
						}
						else
						{
							position = position + visibleFieldCount;
						}
					}
					hasTotals = true;
				}
				else
				{
					for (let fieldIndex = 0; fieldIndex < visibleFieldCount; fieldIndex++)
					{
						let fieldValue = dimensionMember.getAllFieldValues().getByKey(rsVisibleFields.get(fieldIndex).getName());
						formattedValue.append(this.formatFieldValue(fieldValue));
						displayValue.append(this.formatFieldValue(fieldValue));
						if (fieldIndex === 0)
						{
							this.prependToFirstField(element, formattedValue);
							this.appendAlertLevelToValue(element, formattedValue);
						}
						let gridCell = oFF.XReferenceGridCell.create(formattedValue.toString(), oFF.RgCellType.HEADER);
						if (this.m_renderForFireflyGrid)
						{
							if (axisType === oFF.AxisType.ROWS)
							{
								gridCell.setPart("Rows");
							}
							else
							{
								gridCell.setPart("Columns");
							}
							if (element.getFirstTuple() === tuple)
							{
								gridCell.setDisplayValue(displayValue.toString());
							}
							gridCell.setDimension(rsDimension.getName());
							if (rsDimension.isStructure() && dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()) !== null)
							{
								gridCell.setMember(dimensionMember.getDimension().getStructureMember(dimensionMember.getName()).getFieldValue(dimensionMember.getDimension().getDisplayKeyField()).getString());
							}
							else
							{
								gridCell.setMember(dimensionMember.getName());
							}
							if (axis === this.m_resultSet.getRowsAxis())
							{
								gridCell.setRowTupleIndex(tupleIndex);
							}
							else
							{
								gridCell.setColumnTupleIndex(tupleIndex);
							}
						}
						if (fieldIndex === 0 && element.getFirstTuple() === tuple)
						{
							gridCell.setDisplayLevel(element.getDisplayLevel());
							let drillState = element.getDrillState();
							let icon = "";
							if (drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED)
							{
								gridCell.setDrillState("Expanded");
								if (rsDimension.getLowerLevelNodeAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT)
								{
									if (axisType === oFF.AxisType.ROWS)
									{
										icon = "sap-icon://slim-arrow-up";
									}
									else
									{
										icon = "sap-icon://slim-arrow-left";
									}
								}
								else
								{
									if (axisType === oFF.AxisType.ROWS)
									{
										icon = "sap-icon://slim-arrow-down";
									}
									else
									{
										icon = "sap-icon://slim-arrow-down";
									}
								}
							}
							else if (drillState === oFF.DrillState.COLLAPSED || drillState === oFF.DrillState.LEAF_UDH_EXPAND_ALLOWED)
							{
								gridCell.setDrillState("Collapsed");
								if (rsDimension.getLowerLevelNodeAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT)
								{
									if (axisType === oFF.AxisType.ROWS)
									{
										icon = "sap-icon://slim-arrow-right";
									}
									else
									{
										icon = "sap-icon://slim-arrow-up";
									}
								}
								else
								{
									if (axisType === oFF.AxisType.ROWS)
									{
										icon = "sap-icon://slim-arrow-right";
									}
									else
									{
										icon = "sap-icon://slim-arrow-right";
									}
								}
							}
							else
							{
								gridCell.setDrillState("None");
								icon = "";
							}
							gridCell.setIcon(icon);
						}
						formattedValue.clear();
						displayValue.clear();
						this.addCell(axisType, position, tupleIndex, tupleOffset, gridCell);
						position++;
					}
				}
			}
			else
			{
				if (this.m_defineAllCells)
				{
					for (let m = 0; m < visibleFieldCount; m++)
					{
						this.addCell(axisType, position, tupleIndex, tupleOffset, emptyHeaderCell);
						position++;
					}
				}
				else
				{
					position = position + visibleFieldCount;
				}
			}
		}
	}
};
oFF.ReferenceGrid.prototype.setTitleCells = function(axis, row, complementaryAxisEmpty)
{
	let type = axis.getType();
	let rsDimensions = axis.getRsDimensions();
	let column = 0;
	let buffer = oFF.XStringBuffer.create();
	let bufferDV = oFF.XStringBuffer.create();
	let dimSize = rsDimensions.size();
	for (let idxDim = 0; idxDim < dimSize; idxDim++)
	{
		let rsDimension = rsDimensions.get(idxDim);
		let visibleFields = rsDimension.getResultSetFields();
		let fieldSize = visibleFields.size();
		for (let idxField = 0; idxField < fieldSize; idxField++)
		{
			let fieldName = visibleFields.get(idxField).getName();
			if (oFF.XStringUtils.isNullOrEmpty(rsDimension.getName()))
			{
				buffer.append("[").append(fieldName).append("]");
			}
			else
			{
				if (idxField === 0)
				{
					bufferDV.append(rsDimension.getText());
				}
				if (rsDimension.isMeasureStructure())
				{
					if (idxField === 0)
					{
						buffer.append("Measures");
					}
				}
				else if (rsDimension.isStructure())
				{
					if (idxField === 0)
					{
						buffer.append("Structure");
					}
				}
				else
				{
					if (idxField === 0)
					{
						buffer.append(rsDimension.getName()).append(".[");
					}
					else
					{
						buffer.append("[");
					}
					buffer.append(fieldName).append("]");
				}
			}
			if (type === oFF.AxisType.ROWS)
			{
				if (!(this.m_renderForFireflyGrid && rsDimension.isStructure() && dimSize === idxDim + 1))
				{
					let titleCell = oFF.XReferenceGridCell.create(buffer.toString(), oFF.RgCellType.TITLE);
					titleCell.setDisplayValue(bufferDV.toString());
					titleCell.setDimension(rsDimension.getName());
					titleCell.setPart("Rows");
					titleCell.setRow(row);
					titleCell.setColumn(column);
					this.m_grid.setCell(column, row, titleCell, false);
				}
				else if (complementaryAxisEmpty && !this.m_renderForFireflyGrid)
				{
					this.m_fixedHeightOff = 1;
				}
			}
			else
			{
				if (!(this.m_renderForFireflyGrid && rsDimension.isStructure() && dimSize === idxDim + 1))
				{
					let existingCell = this.m_grid.getSimpleCell(row, column);
					if (oFF.notNull(existingCell))
					{
						let simpleName = buffer.toString();
						buffer.clear();
						bufferDV.clear();
						buffer.append(existingCell.toString());
						buffer.append(oFF.ReferenceGrid.MAGIC_CELL_DIV);
						buffer.append(simpleName);
						if (this.m_renderForFireflyGrid)
						{
							bufferDV.append(existingCell.getDisplayValue());
						}
						if (idxField === 0 && !rsDimension.isStructure())
						{
							bufferDV.append(oFF.ReferenceGrid.MAGIC_CELL_DIV);
							bufferDV.append(rsDimension.getText());
						}
					}
					let titCell = oFF.XReferenceGridCell.create(buffer.toString(), oFF.RgCellType.TITLE);
					if (this.m_renderForFireflyGrid)
					{
						titCell.setRow(row);
						titCell.setColumn(column);
						titCell.setDisplayValue(bufferDV.toString());
						if (oFF.notNull(existingCell))
						{
							titCell.setPart("Mixed");
						}
						else
						{
							titCell.setPart("Columns");
						}
						if (oFF.notNull(existingCell))
						{
							titCell.setDimension(existingCell.getDimension());
						}
						else
						{
							titCell.setDimension(rsDimension.getName());
						}
					}
					else
					{
						titCell.setDimension(rsDimension.getName());
					}
					this.m_grid.setCell(row, column, titCell, true);
				}
				else if (complementaryAxisEmpty)
				{
					this.m_fixedWidthOff = 1;
				}
			}
			buffer.clear();
			bufferDV.clear();
			column++;
		}
	}
};
oFF.ReferenceGrid.prototype.setupSimpleGrid = function(resultSet, withDetails, defineAllCells)
{
	this.setup();
	this.m_withDetails = withDetails;
	this.m_defineAllCells = defineAllCells;
	this.m_resultSet = resultSet;
	this.m_grid = oFF.XReferenceGrid.create();
};

oFF.RsHiChartBoxplotHelper = function() {};
oFF.RsHiChartBoxplotHelper.prototype = new oFF.RsHiChartSeriesHelper();
oFF.RsHiChartBoxplotHelper.prototype._ff_c = "RsHiChartBoxplotHelper";

oFF.RsHiChartBoxplotHelper.prototype.finishRendering = function() {};
oFF.RsHiChartBoxplotHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartBoxplotHelper.prototype.readResultSetData = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let xAxis = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
	let xAxisStruct = xAxis.addNewStructure();
	let chartlang = theChartData.putNewStructure(oFF.VizDefConstants.K_LANG);
	let decimalPlaceString = oFF.XInteger.convertToString(columnAxis.getDecimalPlaces(oFF.VizDefConstants.K_VALUE_AXIS));
	if (rs.getAvailableDataCellCount() > 0)
	{
		let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
		let buff = oFF.XStringBuffer.create();
		buff.append("<b>{series.name}</b><br/><b>Distribution</b> <br/>");
		buff.append("Maximum: {point.high:,.");
		buff.append(decimalPlaceString);
		buff.append("f} <br/>Upper Quartile: {point.q3:,.");
		buff.append(decimalPlaceString);
		buff.append("f} <br/>Median: {point.median:,.");
		buff.append(decimalPlaceString);
		buff.append("f} <br/>Lower Quartile: {point.q1:,.");
		buff.append(decimalPlaceString);
		buff.append("f} <br/>Minimum: {point.low:,.");
		buff.append(decimalPlaceString);
		buff.append("f}");
		let categoriesList = xAxisStruct.putNewList(oFF.VizDefConstants.K_CATEGORIES);
		let rowHeadings = rowAxis.getPrettyNamesForFeed(true, false, oFF.VizDefConstants.K_CATEGORY_AXIS);
		let columnSelectors = oFF.XList.create();
		columnSelectors.add(oFF.VizDefConstants.K_VALUE_AXIS);
		columnSelectors.add(oFF.VizDefConstants.K_VALUE_AXIS2);
		columnSelectors.add(oFF.VizDefConstants.K_VARIANCE);
		for (let h = 0; h < rowHeadings.size(); h++)
		{
			categoriesList.addString(rowHeadings.get(h));
		}
		let numberOfSubSeries = columnAxis.getPrettyNamesForFeeds(true, false, columnSelectors).size();
		let indices = columnAxis.getIndicesByFeedOrder(columnSelectors);
		let contextFeed = oFF.VizDefConstants.V_FEED_COLOR;
		columnSelectors.add(oFF.VizDefConstants.K_COLOR);
		let pureColors = columnAxis.getPrettyNamesForFeed(true, false, oFF.VizDefConstants.K_COLOR);
		let overwriteColors = pureColors.size() < 2;
		if (columnAxis.hasTupleForFeed(oFF.VizDefConstants.V_FEED_DATA_CONTEXT) && columnAxis.getPrettyNamesForFeed(true, false, oFF.VizDefConstants.V_FEED_DATA_CONTEXT).size() > 1)
		{
			contextFeed = oFF.VizDefConstants.V_FEED_DATA_CONTEXT;
			numberOfSubSeries = columnAxis.getPrettyNamesForFeeds(true, false, columnSelectors).size();
		}
		let alreadyHandledIndices = oFF.XList.create();
		let ix = -1;
		for (let ij = 0; ij < indices.size(); ij++)
		{
			let curInt = indices.get(ij);
			if (alreadyHandledIndices.contains(curInt))
			{
				continue;
			}
			ix = ix + 1;
			let i = curInt.getInteger();
			let columnTuple = columnAxis.getTupleAt(i);
			let currentContextMembers = columnTuple.getMemberKeysForFeedsOtherThan(contextFeed);
			let aggregatableIndices = columnAxis.getTupleIndexForMemberNames(currentContextMembers);
			alreadyHandledIndices.addAll(aggregatableIndices);
			this.setShowLegend(numberOfSubSeries > 1);
			let compositeMeasureName = columnTuple.getPrettyText(columnSelectors);
			let dataLayer = seriesList.addNewStructure();
			let boxplotData = dataLayer.putNewList(oFF.VizDefConstants.K_DATA);
			let dolt = dataLayer.putNewStructure(oFF.VizDefConstants.K_TOOLTIP);
			dolt.putString(oFF.VizDefConstants.K_POINT_FORMAT, buff.toString());
			dolt.putString(oFF.VizDefConstants.K_HEADER_FORMAT, "");
			dataLayer.putBoolean(oFF.VizDefConstants.K_SHOW_IN_LEGEND, true);
			dataLayer.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT);
			dataLayer.putString(oFF.VizDefConstants.K_NAME, compositeMeasureName);
			let dataLayerOutlier = seriesList.addNewStructure();
			dataLayerOutlier.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_SCATTER);
			dataLayerOutlier.putString(oFF.VizDefConstants.K_NAME, compositeMeasureName);
			dataLayerOutlier.putString("linkedTo", ":previous");
			let dataLayerOutlierMarkers = dataLayerOutlier.putNewStructure(oFF.VizDefConstants.K_MARKER);
			dataLayerOutlierMarkers.putString(oFF.VizDefConstants.K_FILL_COLOR, oFF.VizDefConstants.K_TRANSPARENT);
			dataLayerOutlierMarkers.putInteger(oFF.VizDefConstants.K_LINE_WIDTH, 1);
			let outlier = dataLayerOutlier.putNewList(oFF.VizDefConstants.K_DATA);
			let dott = dataLayerOutlier.putNewStructure(oFF.VizDefConstants.K_TOOLTIP);
			dott.putString(oFF.VizDefConstants.K_POINT_FORMAT, oFF.XStringUtils.concatenate3("<b>{series.name}</b><br/><b>Outliers</b><br/><br/> {point.categoryName}: {point.y:,.", decimalPlaceString, "f}"));
			dott.putString(oFF.VizDefConstants.K_HEADER_FORMAT, "");
			if (overwriteColors)
			{
				this.addColorAndPattern(columnTuple.getColor(), columnTuple.getPattern(), dataLayer, oFF.VizDefConstants.V_CHART_TYPE_BOXPLOT, false);
				this.addColorAndPattern(columnTuple.getColor(), columnTuple.getPattern(), dataLayerOutlier, oFF.VizDefConstants.K_SCATTER, true);
				dataLayerOutlierMarkers.putString(oFF.VizDefConstants.K_LINE_COLOR, this.getCurrentColor());
			}
			else
			{
				dataLayerOutlierMarkers.putString(oFF.VizDefConstants.K_LINE_COLOR, this.getColorAt(0));
			}
			for (let j = 0; j < rowAxis.getTuplesCount(); j++)
			{
				if (!rowAxis.getTupleAt(j).isSelectedByString(oFF.VizDefConstants.K_CATEGORY_AXIS))
				{
					continue;
				}
				if (rowAxis.getTupleAt(j).isTotal())
				{
					continue;
				}
				let listOfDoubles = oFF.XList.create();
				for (let kj = 0; kj < aggregatableIndices.size(); kj++)
				{
					let k = aggregatableIndices.get(kj).getInteger();
					let currentTuple = columnAxis.getTupleAt(i);
					if (!currentTuple.isSelectedByString(oFF.VizDefConstants.K_VALUE_AXIS))
					{
						continue;
					}
					let dataCell = rs.getDataCell(k, j);
					let doubleValue = 0;
					let valueType = dataCell.getValueType();
					if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
					{
						if (dataCell.getXValue() !== null)
						{
							doubleValue = columnAxis.getScaledValue(oFF.VizDefConstants.K_VALUE_AXIS, currentTuple, dataCell);
							listOfDoubles.add(oFF.XDoubleValue.create(doubleValue));
						}
					}
				}
				if (listOfDoubles.size() === 0)
				{
					continue;
				}
				listOfDoubles.sortByComparator(oFF.XComparatorDouble.create());
				let boxPlotDataStructure = boxplotData.addNewStructure();
				let firstQuarter = 0;
				let thirdQuarter = 0;
				let intervalQuartile = 0;
				let median = 0;
				let element = 0;
				let min = 0;
				let max = 0;
				let divNumber = listOfDoubles.size() - 1;
				let quarter1Index = divNumber / 4;
				let quarter2Index = divNumber / 2;
				let quarter3Index = divNumber * 3 / 4;
				firstQuarter = listOfDoubles.get(oFF.XDouble.convertToInt(quarter1Index)).getDouble();
				median = listOfDoubles.get(oFF.XDouble.convertToInt(quarter2Index)).getDouble();
				thirdQuarter = listOfDoubles.get(oFF.XDouble.convertToInt(quarter3Index)).getDouble();
				intervalQuartile = (thirdQuarter - firstQuarter) * 1.5;
				max = listOfDoubles.get(0).getDouble();
				min = listOfDoubles.get(listOfDoubles.size() - 1).getDouble();
				for (let ld = 0; ld < listOfDoubles.size(); ld++)
				{
					element = listOfDoubles.get(ld).getDouble();
					if (thirdQuarter + intervalQuartile < element || firstQuarter - intervalQuartile > element)
					{
						let outlierStruct = outlier.addNewStructure();
						outlierStruct.putDouble(oFF.VizDefConstants.K_X, j - 0.25 + (0.5 + ix) / numberOfSubSeries / 2);
						outlierStruct.putDouble(oFF.VizDefConstants.K_Y, element);
						outlierStruct.putString(oFF.VizDefConstants.K_CATEGORY_NAME, rowHeadings.get(j));
						if (overwriteColors)
						{
							this.addColorAndPattern(columnTuple.getColor(), columnTuple.getPattern(), outlierStruct, oFF.VizDefConstants.K_SCATTER, true);
						}
					}
					else
					{
						if (element < min)
						{
							min = element;
						}
						if (element > max)
						{
							max = element;
						}
					}
				}
				boxPlotDataStructure.putDouble("low", min);
				boxPlotDataStructure.putDouble("q1", firstQuarter);
				boxPlotDataStructure.putDouble("median", median);
				boxPlotDataStructure.putDouble("q3", thirdQuarter);
				boxPlotDataStructure.putDouble("high", max);
				if (overwriteColors)
				{
					this.addColorAndPattern(columnTuple.getColor(), columnTuple.getPattern(), boxPlotDataStructure, oFF.VizDefConstants.K_SCATTER, true);
				}
			}
		}
	}
	else
	{
		theChartData.putBoolean(oFF.VizDefConstants.K_FULL_SCREEN_ENABLED, false);
		chartlang.putString(oFF.VizDefConstants.K_NO_DATA, "Firefly Resultset is Empty.");
	}
};

oFF.RsHiChartCategorialSeriesHelper = function() {};
oFF.RsHiChartCategorialSeriesHelper.prototype = new oFF.RsHiChartSeriesHelper();
oFF.RsHiChartCategorialSeriesHelper.prototype._ff_c = "RsHiChartCategorialSeriesHelper";

oFF.RsHiChartCategorialSeriesHelper.prototype.addValue = function(currentFeedType, dataList, dataCell, axis, tuple, measureName, errorList, error1, error2, dimensionNames, dimensionValues, tooltipHeaders, tooltipValues, error1Formatted, error2Formatted, enforceColor, seriesChartType)
{
	let doubleValue = 0;
	let valueType = dataCell.getValueType();
	let intermediateStructure = dataList.addNewStructure();
	if (dataCell.getComplexUnit() !== null && oFF.XString.isEqual(dataCell.getComplexUnit().getUnitValues().get(0), "*"))
	{
		return;
	}
	if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT || valueType === oFF.XValueType.PERCENT)
	{
		if (dataCell.getXValue() !== null)
		{
			doubleValue = axis.getScaledValue(currentFeedType, tuple, dataCell);
			if (doubleValue > this.getMaxYValue())
			{
				this.setMaxYValue(doubleValue);
			}
			intermediateStructure.putDouble(oFF.VizDefConstants.K_Y, doubleValue);
			intermediateStructure.putString(oFF.VizDefConstants.K_Y_FORMATTED, axis.getFormattedValue(currentFeedType, tuple, dataCell));
		}
		else
		{
			intermediateStructure.putString(oFF.VizDefConstants.K_Y, null);
			intermediateStructure.putString(oFF.VizDefConstants.K_Y_FORMATTED, null);
		}
		if (enforceColor)
		{
			this.addColorAndPattern(tuple.getColor(), tuple.getPattern(), intermediateStructure, seriesChartType, true);
		}
		intermediateStructure.putString(oFF.VizDefConstants.K_NAME, measureName);
		if (oFF.notNull(dimensionValues))
		{
			let categoryName = this.getFormattedCategoriesForTooltip(dimensionNames, dimensionValues);
			if (oFF.notNull(categoryName))
			{
				intermediateStructure.putString("formattedCategories", categoryName);
			}
		}
	}
	if (oFF.notNull(errorList))
	{
		let subList = errorList.addNewList();
		subList.addDouble(error1);
		subList.addDouble(error2);
		if (error1 < error2)
		{
			intermediateStructure.putString(oFF.VizDefConstants.K_ERROR_RANGE, oFF.XStringUtils.concatenate3(error1Formatted, " .. ", error2Formatted));
		}
		else
		{
			intermediateStructure.putString(oFF.VizDefConstants.K_ERROR_RANGE, oFF.XStringUtils.concatenate3(error2Formatted, " .. ", error1Formatted));
		}
	}
	if (oFF.XCollectionUtils.hasElements(tooltipHeaders))
	{
		for (let j = 0; j < tooltipHeaders.size(); j++)
		{
			intermediateStructure.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_HEADER, oFF.XInteger.convertToString(j)), tooltipHeaders.get(j));
		}
	}
	if (oFF.XCollectionUtils.hasElements(tooltipValues))
	{
		for (let i = 0; i < tooltipValues.size(); i++)
		{
			intermediateStructure.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_FORMATTED, oFF.XInteger.convertToString(i)), tooltipValues.get(i));
		}
	}
};
oFF.RsHiChartCategorialSeriesHelper.prototype.createCategoryStructureRec = function(tuppleElement, categoryPrList, addedKeys)
{
	if (oFF.XCollectionUtils.hasElements(tuppleElement))
	{
		let categoryName = tuppleElement.get(0).getText();
		let key = oFF.XStringUtils.concatenate2(tuppleElement.get(0).getKey(), tuppleElement.get(0).getHierarchyNavigation());
		let drillState = tuppleElement.get(0).getDrillState();
		tuppleElement.removeAt(0);
		let categoryStructure = addedKeys.getByKey(key);
		if (oFF.isNull(categoryStructure) || oFF.DrillState.LEAF.isEqualTo(drillState))
		{
			categoryStructure = categoryPrList.addNewStructure();
			categoryStructure.putString(oFF.VizDefConstants.K_NAME, categoryName);
			if (tuppleElement.size() > 0)
			{
				categoryStructure.putNewList(oFF.VizDefConstants.K_CATEGORIES);
			}
			addedKeys.put(key, categoryStructure);
		}
		if (tuppleElement.size() === 1)
		{
			categoryStructure.getListByKey(oFF.VizDefConstants.K_CATEGORIES).addString(tuppleElement.get(0).getText());
		}
		if (tuppleElement.size() > 1)
		{
			this.createCategoryStructureRec(tuppleElement, categoryStructure.getListByKey(oFF.VizDefConstants.K_CATEGORIES), addedKeys);
		}
	}
};
oFF.RsHiChartCategorialSeriesHelper.prototype.fillCategories = function(tuppleCategories, categories, addedKeys)
{
	for (let i = 0; i < tuppleCategories.size(); i++)
	{
		let tupple = tuppleCategories.get(i);
		this.createCategoryStructureRec(tupple, categories, addedKeys);
	}
};
oFF.RsHiChartCategorialSeriesHelper.prototype.finishRendering = function() {};
oFF.RsHiChartCategorialSeriesHelper.prototype.getFormattedCategoriesForTooltip = function(dimensionNames, dimensionValues)
{
	let buffer = oFF.XStringBuffer.create();
	if (dimensionNames.size() === dimensionValues.size())
	{
		for (let i = 0; i < dimensionNames.size(); i++)
		{
			if (i !== 0)
			{
				buffer.append("<br/>");
			}
			buffer.append(oFF.XStringUtils.concatenate3(dimensionNames.get(i), ": ", dimensionValues.get(i)));
		}
	}
	return buffer.toString();
};
oFF.RsHiChartCategorialSeriesHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartCategorialSeriesHelper.prototype.readResultSetData = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let dataList;
	let dataLayer;
	let errorLayer;
	let errorList;
	let compositemeasureName = null;
	let hasVariance = false;
	let hideTotalOnRows = false;
	let xAxis = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
	let xAxisStruct = xAxis.addNewStructure();
	xAxisStruct.putInteger(oFF.VizDefConstants.K_TICK_WIDTH, 1);
	let chartlang = theChartData.putNewStructure(oFF.VizDefConstants.K_LANG);
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let customColor = theChartData.getStructureByKey(oFF.VizDefConstants.K_EXPLICIT_COLOR_ASSIGNMENTS);
	if (oFF.notNull(customColor))
	{
		theChartData.getListByKey(oFF.VizDefConstants.K_COLORS).clear();
	}
	let tooltipBuffer = oFF.XStringBuffer.create();
	tooltipBuffer.append("<b>{series.name}</b>: {point.yFormatted}<br/>");
	tooltipBuffer.append("{point.formattedCategories}");
	if (rs.getAvailableDataCellCount() > 0)
	{
		let explicitCategories = true;
		let rowCategories = rowAxis.getFormattedNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_CATEGORY_AXIS);
		let tuppleCategories = rowAxis.getCategoryObjects(false, !hideTotalOnRows, oFF.VizDefConstants.K_CATEGORY_AXIS);
		if (rowCategories.size() === 0)
		{
			rowCategories = rowAxis.getFormattedNames(true, !hideTotalOnRows);
			explicitCategories = false;
		}
		let columnSelectors = oFF.XList.create();
		columnSelectors.add(oFF.VizDefConstants.K_VALUE_AXIS);
		columnSelectors.add(oFF.VizDefConstants.K_VALUE_AXIS2);
		columnSelectors.add(oFF.VizDefConstants.K_VARIANCE);
		let rowSelector = oFF.XList.create();
		rowSelector.add(oFF.VizDefConstants.K_CATEGORY_AXIS);
		let pureColors = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_COLOR);
		let pureMeasures = columnAxis.getPrettyNamesForFeeds(true, !hideTotalOnRows, columnSelectors);
		let overwriteColors = pureColors.size() < 2;
		let rowCategoryCount = rowCategories.size();
		let dimensions = rowAxis.getDimensionsForFeed(oFF.VizDefConstants.K_CATEGORY_AXIS);
		if (rowCategoryCount > 0)
		{
			let categoriesList = xAxisStruct.putNewList(oFF.VizDefConstants.K_CATEGORIES);
			let addedKeys = oFF.XHashMapByString.create();
			this.fillCategories(tuppleCategories, categoriesList, addedKeys);
		}
		else
		{
			xAxisStruct.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_CATEGORY);
		}
		let xAxisTitleStruct = xAxisStruct.putNewStructure(oFF.VizDefConstants.K_TITLE);
		let titleStyleStructure = xAxisTitleStruct.putNewStructure(oFF.VizDefConstants.K_STYLE);
		titleStyleStructure.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_BOLD);
		xAxisTitleStruct.putString(oFF.VizDefConstants.K_TEXT, oFF.XCollectionUtils.join(dimensions, ", "));
		let selectorList = oFF.XList.create();
		if (pureColors.size() > 1)
		{
			selectorList.add(oFF.VizDefConstants.K_COLOR);
		}
		if (pureMeasures.size() > 1)
		{
			selectorList.addAll(columnSelectors);
		}
		let tooltipHeaders = columnAxis.getPrettyNamesForFeed(true, false, oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
		for (let ti = 0; ti < tooltipHeaders.size(); ti++)
		{
			tooltipBuffer.append("<b>{point.tHeader");
			tooltipBuffer.append(oFF.XInteger.convertToString(ti));
			tooltipBuffer.append("}</b>  {point.tFormatted");
			tooltipBuffer.append(oFF.XInteger.convertToString(ti));
			tooltipBuffer.append("}<br/>");
		}
		tooltipBuffer.append("{point.errorRange}");
		let indices = columnAxis.getIndicesByFeedOrder(columnSelectors);
		this.setShowLegend(true);
		for (let ij = 0; ij < indices.size(); ij++)
		{
			let i = indices.get(ij).getInteger();
			let columnTuple = columnAxis.getTupleAt(i);
			if (!columnTuple.isSelectedByList(columnSelectors))
			{
				continue;
			}
			dataLayer = seriesList.addNewStructure();
			let variance = columnTuple.isSelectedByString(oFF.VizDefConstants.K_VARIANCE);
			let valueAxis2 = !variance && columnTuple.isSelectedByString(oFF.VizDefConstants.K_VALUE_AXIS2);
			let axisIndex = valueAxis2 ? 1 : variance ? this.isCombinationChart() ? 2 : 1 : 0;
			compositemeasureName = variance ? "\u0394" : columnTuple.getPrettyText(selectorList);
			dataLayer.putBoolean(oFF.VizDefConstants.K_ANIMATION, false);
			dataLayer.putString(oFF.VizDefConstants.K_NAME, compositemeasureName);
			let simpleMeasureName = variance ? "" : columnTuple.getPrettyText(columnSelectors);
			let seriesChartType = valueAxis2 ? this.getSecondChart() : this.getChartType();
			dataLayer.putString(oFF.VizDefConstants.K_TYPE, seriesChartType);
			dataLayer.putInteger(oFF.VizDefConstants.K_Y_AXIS, axisIndex);
			let currentFeedType = variance ? oFF.VizDefConstants.K_VARIANCE : valueAxis2 ? oFF.VizDefConstants.K_VALUE_AXIS2 : oFF.VizDefConstants.K_VALUE_AXIS;
			dataLayer.putString(oFF.VizDefConstants.K_AXIS, currentFeedType);
			hasVariance = hasVariance || variance;
			dataList = dataLayer.putNewList(oFF.VizDefConstants.K_DATA);
			let memberNames = columnTuple.getMemberKeys();
			errorList = null;
			let errorIndex1 = i;
			let errorIndex2 = i;
			let hasErrorBar = false;
			let tooltipIndices = null;
			let tooltipValues = null;
			if (oFF.XCollectionUtils.hasElements(memberNames))
			{
				tooltipIndices = columnAxis.getMatchingTupleIndicesForMemberNameAndFeed(memberNames, oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
				let errorIndex = columnAxis.getMatchingTupleIndicesForMemberNamesAndSuffix(memberNames, oFF.VizDefConstants.K_ERRORBAR_MIN);
				if (errorIndex !== -1)
				{
					errorIndex1 = errorIndex;
					hasErrorBar = true;
				}
				errorIndex = columnAxis.getMatchingTupleIndicesForMemberNamesAndSuffix(memberNames, oFF.VizDefConstants.K_ERRORBAR_MAX);
				if (errorIndex !== -1)
				{
					errorIndex2 = errorIndex;
					hasErrorBar = true;
				}
				if (hasErrorBar)
				{
					errorLayer = seriesList.addNewStructure();
					errorList = errorLayer.putNewList(oFF.VizDefConstants.K_DATA);
					errorLayer.putInteger(oFF.VizDefConstants.K_Y_AXIS, axisIndex);
					errorLayer.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_ERRORBAR);
					errorLayer.putStringNotNullAndNotEmpty(oFF.VizDefConstants.K_COLOR, columnAxis.getTupleAt(oFF.XMath.max(errorIndex1, errorIndex2)).getColor());
				}
			}
			let dataCell;
			let error1 = 0;
			let error2 = 0;
			let error1Formatted = "";
			let error2Formatted = "";
			if (overwriteColors)
			{
				this.addColorAndPattern(columnTuple.getColor(), columnTuple.getPattern(), dataLayer, seriesChartType, false);
			}
			if (rowCategoryCount > 0)
			{
				for (let j = 0; j < rowAxis.getTuplesCount(); j++)
				{
					if (explicitCategories && !rowAxis.getTupleAt(j).isSelectedByString(oFF.VizDefConstants.K_CATEGORY_AXIS))
					{
						continue;
					}
					if (!hideTotalOnRows || !rowAxis.getTupleAt(j).isTotal())
					{
						if (hasErrorBar)
						{
							error1 = columnAxis.getScaledValue(currentFeedType, columnAxis.getTupleAt(errorIndex1), rs.getDataCell(errorIndex1, j));
							error1Formatted = columnAxis.getFormattedValue(currentFeedType, columnAxis.getTupleAt(errorIndex1), rs.getDataCell(errorIndex1, j));
							error2 = columnAxis.getScaledValue(currentFeedType, columnAxis.getTupleAt(errorIndex2), rs.getDataCell(errorIndex2, j));
							error2Formatted = columnAxis.getFormattedValue(currentFeedType, columnAxis.getTupleAt(errorIndex2), rs.getDataCell(errorIndex2, j));
						}
						if (oFF.XCollectionUtils.hasElements(tooltipIndices))
						{
							tooltipValues = oFF.XList.create();
							for (let ttindex = 0; ttindex < tooltipIndices.size(); ttindex++)
							{
								let tooltipIndex = tooltipIndices.get(ttindex).getInteger();
								tooltipValues.add(columnAxis.getFormattedValue("", columnAxis.getTupleAt(tooltipIndex), rs.getDataCell(tooltipIndex, j)));
							}
						}
						dataCell = rs.getDataCell(i, j);
						let feeds = oFF.XList.create();
						feeds.add(oFF.VizDefConstants.K_CATEGORY_AXIS);
						let categories = rowAxis.getTupleAt(j).getCategories(feeds);
						this.addValue(currentFeedType, dataList, dataCell, columnAxis, columnTuple, simpleMeasureName, errorList, error1, error2, dimensions, categories, tooltipHeaders, tooltipValues, error1Formatted, error2Formatted, overwriteColors, seriesChartType);
					}
				}
			}
			else if (rs.getDataRows() > 0)
			{
				for (let jj = 0; jj < rs.getDataRows(); jj++)
				{
					if (hasErrorBar)
					{
						error1 = columnAxis.getScaledValue(currentFeedType, columnAxis.getTupleAt(errorIndex1), rs.getDataCell(errorIndex1, jj));
						error1Formatted = columnAxis.getFormattedValue(currentFeedType, columnAxis.getTupleAt(errorIndex1), rs.getDataCell(errorIndex1, jj));
						error2 = columnAxis.getScaledValue(currentFeedType, columnAxis.getTupleAt(errorIndex2), rs.getDataCell(errorIndex2, jj));
						error2Formatted = columnAxis.getFormattedValue(currentFeedType, columnAxis.getTupleAt(errorIndex2), rs.getDataCell(errorIndex2, jj));
					}
					if (oFF.XCollectionUtils.hasElements(tooltipIndices))
					{
						tooltipValues = oFF.XList.create();
						for (let tt1index = 0; tt1index < tooltipIndices.size(); tt1index++)
						{
							let tooltipIndex1 = tooltipIndices.get(tt1index).getInteger();
							tooltipValues.add(columnAxis.getFormattedValue("", columnAxis.getTupleAt(tooltipIndex1), rs.getDataCell(tooltipIndex1, jj)));
						}
					}
					dataCell = rs.getDataCell(i, jj);
					this.addValue(currentFeedType, dataList, dataCell, columnAxis, columnTuple, simpleMeasureName, errorList, error1, error2, dimensions, null, tooltipHeaders, tooltipValues, error1Formatted, error2Formatted, overwriteColors, seriesChartType);
				}
			}
		}
		this.setChartWidth(oFF.XMath.max(rowCategoryCount, 1));
		this.setWidthScale(1);
		if (oFF.XStringUtils.isNullOrEmpty(this.getStackingType()) || !oFF.XString.isEqual(this.getChartType(), oFF.VizDefConstants.V_CHART_TYPE_BAR) && !oFF.XString.isEqual(this.getChartType(), oFF.VizDefConstants.V_CHART_TYPE_COLUMN))
		{
			let divisor = this.isCombinationChart() ? 2 : 1;
			if (rowCategoryCount > 1)
			{
				this.setWidthScale(indices.size() / divisor);
			}
			else if (pureColors.size() > 1)
			{
				this.setWidthScale(oFF.XMath.max(1, pureMeasures.size() / divisor));
			}
		}
		if (seriesList.size() === 0)
		{
			chartlang.putString(oFF.VizDefConstants.K_NO_DATA, "At least one measure is required to build a chart.");
		}
	}
	let tooltip = theChartData.putNewStructure(oFF.VizDefConstants.K_TOOLTIP);
	tooltip.putString(oFF.VizDefConstants.K_POINT_FORMAT, tooltipBuffer.toString());
	tooltip.putString(oFF.VizDefConstants.K_HEADER_FORMAT, "");
	this.setHasVariance(hasVariance);
};

oFF.RsHiChartClusterBubbleHelper = function() {};
oFF.RsHiChartClusterBubbleHelper.prototype = new oFF.RsHiChartCovariationHelper();
oFF.RsHiChartClusterBubbleHelper.prototype._ff_c = "RsHiChartClusterBubbleHelper";

oFF.RsHiChartClusterBubbleHelper.prototype.decorateToolTip = function(stringBuffer)
{
	stringBuffer.append("<b>{point.name}</b>: {point.valueFormatted} <br/>");
};
oFF.RsHiChartClusterBubbleHelper.prototype.finishRendering = function()
{
	let theChartData = this.getChartData();
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let intermediateList = oFF.PrFactory.createList();
	intermediateList.addAll(this.getXList());
	intermediateList.addAll(this.getYList());
	intermediateList.addAll(this.getZList());
	let intermediateListFormatted = oFF.PrFactory.createList();
	intermediateListFormatted.addAll(this.getXListFormatted());
	intermediateListFormatted.addAll(this.getYListFormatted());
	intermediateListFormatted.addAll(this.getZListFormatted());
	let measureList = oFF.XList.create();
	measureList.addAll(this.getXMeasures());
	measureList.addAll(this.getYMeasures());
	measureList.addAll(this.getZMeasures());
	for (let g = 0; g < intermediateList.size(); g++)
	{
		let polarLayer = seriesList.addNewStructure();
		let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
		polarLayer.putString(oFF.VizDefConstants.K_NAME, this.getColorList().get(g));
		let subList = intermediateList.getListAt(g);
		let subListFormatted = intermediateListFormatted.getListAt(g);
		for (let e = 0; e < subList.size(); e++)
		{
			let subStructure = newList.addNewStructure();
			subStructure.putDouble(oFF.VizDefConstants.K_VALUE, subList.getDoubleAt(e));
			subStructure.putString(oFF.VizDefConstants.K_VALUE_FORMATTED, subListFormatted.getStringAt(e));
			if (oFF.XCollectionUtils.hasElements(measureList))
			{
				subStructure.putString(oFF.VizDefConstants.K_NAME, measureList.get(0));
			}
			else
			{
				subStructure.putString(oFF.VizDefConstants.K_NAME, "");
			}
			this.addToolTipsToSeries(subStructure, g, e);
		}
	}
};
oFF.RsHiChartClusterBubbleHelper.prototype.getXFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS;
};
oFF.RsHiChartClusterBubbleHelper.prototype.getYFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS2;
};
oFF.RsHiChartClusterBubbleHelper.prototype.getZFeed = function()
{
	return oFF.VizDefConstants.K_BUBBLE_WIDTH;
};
oFF.RsHiChartClusterBubbleHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartClusterBubbleHelper.prototype.reiterateResultSet = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let yAxisList = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
	let yAxis = yAxisList.addNewStructure();
	let xAxisList = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
	let xAxisStruct = xAxisList.addNewStructure();
	let hideTotalOnRows = !rs.getQueryModel().getRowsAxis().isTotalsVisible();
	let vizProp = null;
	if (this.getVizDef() !== null)
	{
		vizProp = this.getVizDef().getStructureByKey(oFF.VizDefConstants.K_CHART).getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
		if (oFF.notNull(vizProp))
		{
			let vizPropCategoryAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_CATEGORY_AXIS);
			if (oFF.notNull(vizPropCategoryAxis))
			{
				oFF.RsHiChartUtils.axisPloter(vizPropCategoryAxis, xAxisStruct, this.getChartType(), true);
			}
			let vizPropValueAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_VALUE_AXIS);
			if (oFF.notNull(vizPropValueAxis))
			{
				yAxis = oFF.RsHiChartUtils.axisPloter(vizPropValueAxis, yAxis, this.getChartType(), false);
			}
		}
	}
	oFF.RsHiChartVizUtilsSimple.legendStyler(theChartData);
	let plotOptions = oFF.PrFactory.createStructure();
	plotOptions = theChartData.getStructureByKey(oFF.VizDefConstants.K_PLOT_OPTIONS);
	let fillColor = oFF.VizDefConstants.K_TRANSPARENT;
	if (theChartData.getListByKey(oFF.VizDefConstants.K_COLORS) !== null)
	{
		if (theChartData.getListByKey(oFF.VizDefConstants.K_COLORS).size() > 0)
		{
			fillColor = theChartData.getListByKey(oFF.VizDefConstants.K_COLORS).getStringAt(0);
		}
	}
	if (oFF.isNull(plotOptions))
	{
		plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
	}
	if (!oFF.XString.isEqual(this.getStackingType(), null))
	{
		oFF.RsHiChartVizUtilsSimple.dataLabelAlignment(yAxis, this.getChartType(), columnAxis.getDecimalPlaces(this.getXFeed()), false);
	}
	let axisMeasures = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_VALUE_AXIS);
	let axisTitle = oFF.XCollectionUtils.join(axisMeasures, ",");
	oFF.RsHiChartVizUtilsSimple.plotOptionChart(yAxis, this.getChartType(), this.getStackingType(), plotOptions, 0, fillColor, axisTitle);
	oFF.RsHiChartVizUtilsSimple.dataLabelAlignment(yAxis, this.getChartType(), columnAxis.getDecimalPlaces(this.getXFeed()), false);
};

oFF.RsHiChartCorrelationHelper = function() {};
oFF.RsHiChartCorrelationHelper.prototype = new oFF.RsHiChartCovariationHelper();
oFF.RsHiChartCorrelationHelper.prototype._ff_c = "RsHiChartCorrelationHelper";

oFF.RsHiChartCorrelationHelper.prototype.addPadding = function(valueList, axisStruct)
{
	let valueSet = false;
	let min = 0;
	let max = 0;
	let index;
	let subIndex;
	let curValue;
	let curList;
	for (index = 0; index < valueList.size(); index++)
	{
		curList = valueList.getListAt(index);
		for (subIndex = 0; subIndex < curList.size(); subIndex++)
		{
			curValue = curList.getDoubleAt(subIndex);
			if (!valueSet || curValue > max)
			{
				max = curValue;
			}
			if (!valueSet || curValue < min)
			{
				min = curValue;
			}
			valueSet = true;
		}
	}
	let paddingMargin = (max - min) / 10;
	if (max + paddingMargin < 0)
	{
		axisStruct.putDouble(oFF.VizDefConstants.K_MAX, 0);
	}
	else
	{
		axisStruct.putDouble(oFF.VizDefConstants.K_MAX_PADDING, 0.05);
	}
	if (min - paddingMargin > 0)
	{
		axisStruct.putDouble(oFF.VizDefConstants.K_MIN, 0);
	}
	else
	{
		axisStruct.putDouble(oFF.VizDefConstants.K_MIN_PADDING, 0.05);
	}
};
oFF.RsHiChartCorrelationHelper.prototype.decorateToolTip = function(stringBuffer)
{
	stringBuffer.append("<b>{point.name}</b> <br/>");
	stringBuffer.append("<b>{point.SeriesX}</b>: {point.xFormatted} <br/>");
	stringBuffer.append("<b>{point.SeriesY}</b>: {point.yFormatted} <br/>");
	if (oFF.XCollectionUtils.hasElements(this.getZMeasures()))
	{
		stringBuffer.append("<b>{point.SeriesZ}</b>: {point.zFormatted} <br/>");
	}
};
oFF.RsHiChartCorrelationHelper.prototype.finishRendering = function()
{
	let theChartData = this.getChartData();
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let xList = this.getXList();
	let yList = this.getYList();
	let zList = this.getZList();
	let xListFormatted = this.getXListFormatted();
	let yListFormatted = this.getYListFormatted();
	let zListFormatted = this.getZListFormatted();
	let xtitle = oFF.XCollectionUtils.hasElements(this.getXMeasures()) ? this.getXMeasures().get(0) : "";
	let ytitle = oFF.XCollectionUtils.hasElements(this.getYMeasures()) ? this.getYMeasures().get(0) : "";
	let ztitle = oFF.XCollectionUtils.hasElements(this.getZMeasures()) ? this.getZMeasures().get(0) : "";
	if (oFF.XStringUtils.isNotNullAndNotEmpty(xtitle) || oFF.XStringUtils.isNotNullAndNotEmpty(ytitle))
	{
		let xAxistitle = this.getChartData().getListByKey(oFF.VizDefConstants.K_X_AXIS).getStructureAt(0).getStructureByKey(oFF.VizDefConstants.K_TITLE);
		xAxistitle.putString(oFF.VizDefConstants.K_TEXT, xtitle);
		let yAxistitle = this.getChartData().getListByKey(oFF.VizDefConstants.K_Y_AXIS).getStructureAt(0).getStructureByKey(oFF.VizDefConstants.K_TITLE);
		yAxistitle.putString(oFF.VizDefConstants.K_TEXT, ytitle);
	}
	let valueSizeC = 0;
	let valueY = 0;
	let valueX = 0;
	let valueSizeCFormatted = "0";
	let valueYFormatted = "0";
	let valueXFormatted = "0";
	let zListinterim = oFF.PrFactory.createList();
	let zListFormattedinterim = oFF.PrFactory.createList();
	for (let count = 0; count < oFF.XMath.min(xList.size(), yList.size()); count++)
	{
		let newdataStruct = seriesList.addNewStructure();
		let newdatalist = newdataStruct.putNewList(oFF.VizDefConstants.K_DATA);
		newdataStruct.putString(oFF.VizDefConstants.K_TYPE, this.getChartType());
		if (oFF.XCollectionUtils.hasElements(this.getColorList()) && this.getColorList().size() > count)
		{
			newdataStruct.putString(oFF.VizDefConstants.K_NAME, this.getColorList().get(count));
		}
		else
		{
			newdataStruct.putString(oFF.VizDefConstants.K_NAME, "");
		}
		newdataStruct.putBoolean(oFF.VizDefConstants.K_SIZE_BY_ABSOLUTE_VALUE, true);
		let xListinterim = xList.getListAt(count);
		let xListFormattedinterim = xListFormatted.getListAt(count);
		let yListinterim = yList.getListAt(count);
		let yListFormattedinterim = yListFormatted.getListAt(count);
		if (zList.size() > 0)
		{
			zListinterim = zList.getListAt(count);
		}
		if (zListFormatted.size() > 0)
		{
			zListFormattedinterim = zListFormatted.getListAt(count);
		}
		for (let a = 0; a < this.getCategoriesList().size(); a++)
		{
			let nestedlist = oFF.PrFactory.createStructure();
			valueX = xListinterim.getDoubleAt(a);
			valueY = yListinterim.getDoubleAt(a);
			valueXFormatted = xListFormattedinterim.getStringAt(a);
			valueYFormatted = yListFormattedinterim.getStringAt(a);
			let name = this.getCategoriesList().get(a);
			nestedlist.putString(oFF.VizDefConstants.K_NAME, name);
			nestedlist.putDouble(oFF.VizDefConstants.K_X, valueX);
			nestedlist.putDouble(oFF.VizDefConstants.K_Y, valueY);
			nestedlist.putString(oFF.VizDefConstants.K_X_FORMATTED, valueXFormatted);
			nestedlist.putString(oFF.VizDefConstants.K_Y_FORMATTED, valueYFormatted);
			if (oFF.notNull(zListinterim))
			{
				if (zListinterim.size() > a)
				{
					valueSizeC = zListinterim.getDoubleAt(a);
					nestedlist.putDouble(oFF.VizDefConstants.K_Z, valueSizeC);
				}
			}
			if (oFF.notNull(zListFormattedinterim))
			{
				if (zListFormattedinterim.size() > a)
				{
					valueSizeCFormatted = zListFormattedinterim.getStringAt(a);
					nestedlist.putString(oFF.VizDefConstants.K_Z_FORMATTED, valueSizeCFormatted);
				}
			}
			nestedlist.putString(oFF.VizDefConstants.K_SERIES_X, xtitle);
			nestedlist.putString(oFF.VizDefConstants.K_SERIES_Y, ytitle);
			nestedlist.putString(oFF.VizDefConstants.K_SERIES_Z, ztitle);
			if (!(valueSizeC === 0 && valueX === 0 && valueY === 0))
			{
				newdatalist.add(nestedlist);
			}
			this.addToolTipsToSeries(nestedlist, count, a);
		}
	}
};
oFF.RsHiChartCorrelationHelper.prototype.getXFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS;
};
oFF.RsHiChartCorrelationHelper.prototype.getYFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS2;
};
oFF.RsHiChartCorrelationHelper.prototype.getZFeed = function()
{
	return oFF.VizDefConstants.K_BUBBLE_WIDTH;
};
oFF.RsHiChartCorrelationHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartCorrelationHelper.prototype.reiterateResultSet = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let vizDef = this.getVizDef();
	let bubbleColor = "#FFAA49";
	let dashStyle = "Dash";
	let yAxis = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
	let xAxis = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
	let xAxisStruct = xAxis.addNewStructure();
	let yAxisStruct = yAxis.addNewStructure();
	if (oFF.notNull(vizDef))
	{
		oFF.RsHiChartVizUtilsSimple.addReferenceLine(vizDef, xAxisStruct, yAxisStruct, columnAxis, rowAxis, rs);
		if (vizDef.containsKey(oFF.VizDefConstants.K_BUBBLE_STYLING))
		{
			let BubbleStyle = vizDef.getStructureByKey(oFF.VizDefConstants.K_BUBBLE_STYLING);
			if (oFF.notNull(BubbleStyle))
			{
				dashStyle = BubbleStyle.getStringByKey(oFF.VizDefConstants.K_PATTERN);
				bubbleColor = BubbleStyle.getStringByKey(oFF.VizDefConstants.K_COLOR);
			}
		}
	}
	let chartTypeInfo = theChartData.getStructureByKey(oFF.VizDefConstants.K_CHART);
	chartTypeInfo.putString(oFF.VizDefConstants.K_TYPE, this.getChartType());
	let chartTypeInfostyle = chartTypeInfo.putNewStructure(oFF.VizDefConstants.K_STYLE);
	chartTypeInfostyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	chartTypeInfostyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "13px");
	chartTypeInfo.putInteger(oFF.VizDefConstants.K_MARGIN_TOP, 100);
	let valueAxisProperties = null;
	if (oFF.notNull(vizDef))
	{
		valueAxisProperties = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getStructureByKey(oFF.VizDefConstants.K_PROPERTIES).getStructureByKey(oFF.VizDefConstants.K_VALUE_AXIS);
	}
	oFF.RsHiChartVizUtilsCorrelation.renderValueAxis(xAxisStruct, valueAxisProperties, false);
	if (oFF.notNull(vizDef))
	{
		valueAxisProperties = vizDef.getStructureByKey(oFF.VizDefConstants.K_CHART).getStructureByKey(oFF.VizDefConstants.K_PROPERTIES).getStructureByKey(oFF.VizDefConstants.K_VALUE_AXIS2);
	}
	oFF.RsHiChartVizUtilsCorrelation.renderValueAxis(yAxisStruct, valueAxisProperties, true);
	let legend = theChartData.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
	legend.putBoolean(oFF.VizDefConstants.K_SQUARE_SYMBOL, true);
	legend.putString(oFF.VizDefConstants.K_LAYOUT, oFF.VizDefConstants.V_VERTICAL);
	legend.putInteger(oFF.VizDefConstants.K_MAX_HEIGHT, 50);
	legend.putInteger(oFF.VizDefConstants.K_Y, 20);
	legend.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_CENTER);
	legend.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
	let legenditemStyle = legend.putNewStructure(oFF.VizDefConstants.K_ITEM_STYLE);
	legenditemStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
	legenditemStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_NORMAL);
	let plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
	let plotOptionChartTypeStructure = plotOptions.putNewStructure(this.getChartType());
	let plotOptionChartMarkerStructure = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_MARKER);
	plotOptionChartMarkerStructure.putString(oFF.VizDefConstants.K_SYMBOL, oFF.VizDefConstants.V_CIRCLE);
	let shapeOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_SHAPE_OPTIONS);
	if (this.getXList().size() > 1)
	{
		oFF.RsHiChartVizUtilsCorrelation.legendStyler(theChartData);
	}
	else
	{
		plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_DASH_STYLE, dashStyle);
		plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_COLOR, bubbleColor);
		plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_STROKE, bubbleColor);
		plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_FILL, bubbleColor);
		shapeOptions.putString(oFF.VizDefConstants.K_FILL, bubbleColor);
	}
	let dataLabels = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
	dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
	this.addPadding(this.getXList(), xAxisStruct);
	this.addPadding(this.getYList(), yAxisStruct);
};

oFF.RsHiChartMarimekkoHelper = function() {};
oFF.RsHiChartMarimekkoHelper.prototype = new oFF.RsHiChartCovariationHelper();
oFF.RsHiChartMarimekkoHelper.prototype._ff_c = "RsHiChartMarimekkoHelper";

oFF.RsHiChartMarimekkoHelper.prototype.createOneDimensionalColorSeries = function(seriesList)
{
	let xMeasuresSize = this.getXMeasures().size();
	for (let cc = 0; cc < this.getColorList().size(); cc++)
	{
		let color = this.getColorList().get(cc);
		for (let ww = 0; ww < this.getXMeasures().size(); ww++)
		{
			let polarLayer = seriesList.addNewStructure();
			let dataLabels = polarLayer.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
			dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
			polarLayer.putString(oFF.VizDefConstants.K_NAME, oFF.XStringUtils.concatenate3(color, "/", this.getXMeasures().get(ww)));
			let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
			for (let uu = 0; uu < this.getCategoriesList().size(); uu++)
			{
				let xmeasure = this.getXList().getListAt(this.getXMeasures().size() * cc + ww).getDoubleAt(uu);
				let ymeasure = 0;
				let vv;
				for (vv = 0; vv < this.getXList().size(); vv++)
				{
					ymeasure = this.getXList().getListAt(vv).getDoubleAt(uu);
					if (ymeasure !== 0)
					{
						break;
					}
				}
				let xmeasureFormatted = this.getXListFormatted().getListAt(this.getXMeasures().size() * cc + ww).getStringAt(uu);
				let xName = this.getXMeasures().get(ww);
				let ml = newList.addNewStructure();
				ml.putInteger(oFF.VizDefConstants.K_X, uu);
				ml.putDouble(oFF.VizDefConstants.K_Y, xmeasure);
				ml.putDouble(oFF.VizDefConstants.K_Z, ymeasure);
				ml.putString(oFF.VizDefConstants.K_Y_FORMATTED, xmeasureFormatted);
				ml.putString(oFF.VizDefConstants.K_X_NAME, this.getCategoriesList().get(uu));
				ml.putString(oFF.VizDefConstants.K_Y_NAME, xName);
				this.addToolTipsToSeries(ml, oFF.XMath.div(vv, xMeasuresSize), uu);
			}
		}
	}
};
oFF.RsHiChartMarimekkoHelper.prototype.createOneDimensionalSeries = function(seriesList)
{
	for (let ww = 0; ww < this.getXMeasures().size(); ww++)
	{
		let polarLayer = seriesList.addNewStructure();
		let dataLabels = polarLayer.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
		dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
		polarLayer.putString(oFF.VizDefConstants.K_NAME, this.getXMeasures().get(ww));
		this.addColorAndPattern(this.getXColors().get(ww), this.getXPatterns().get(ww), polarLayer, oFF.VizDefConstants.K_VARIWIDE, false);
		let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
		for (let uu = 0; uu < this.getCategoriesList().size(); uu++)
		{
			let ml = newList.addNewStructure();
			ml.putInteger(oFF.VizDefConstants.K_X, uu);
			ml.putDouble(oFF.VizDefConstants.K_Y, this.getXList().getListAt(ww).getDoubleAt(uu));
			ml.putDouble(oFF.VizDefConstants.K_Z, this.getXList().getListAt(ww).getDoubleAt(uu));
			ml.putString(oFF.VizDefConstants.K_Y_FORMATTED, this.getXListFormatted().getListAt(ww).getStringAt(uu));
			ml.putString(oFF.VizDefConstants.K_Z_FORMATTED, this.getXListFormatted().getListAt(ww).getStringAt(uu));
			ml.putString(oFF.VizDefConstants.K_X_NAME, this.getCategoriesList().get(uu));
			ml.putString(oFF.VizDefConstants.K_Y_NAME, this.getXMeasures().get(ww));
			ml.putString(oFF.VizDefConstants.K_Z_NAME, this.getXMeasures().get(ww));
			this.addColorAndPattern(this.getXColors().get(ww), this.getXPatterns().get(ww), ml, oFF.VizDefConstants.K_VARIWIDE, true);
			this.addToolTipsToSeries(ml, 0, uu);
		}
	}
};
oFF.RsHiChartMarimekkoHelper.prototype.createTwoDimensionalColorSeries = function(seriesList)
{
	let yListSize = this.getYList().size();
	let yMeasuresSize = this.getYMeasures().size();
	for (let cc = 0; cc < this.getColorList().size(); cc++)
	{
		let color = this.getColorList().get(cc);
		for (let ww = 0; ww < this.getXMeasures().size(); ww++)
		{
			let polarLayer = seriesList.addNewStructure();
			let dataLabels = polarLayer.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
			dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
			polarLayer.putString(oFF.VizDefConstants.K_NAME, oFF.XStringUtils.concatenate3(color, "/", this.getXMeasures().get(ww)));
			let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
			for (let uu = 0; uu < this.getCategoriesList().size(); uu++)
			{
				let xmeasure = this.getXList().getListAt(this.getXMeasures().size() * cc + ww).getDoubleAt(uu);
				let xmeasureFormatted = this.getXListFormatted().getListAt(this.getXMeasures().size() * cc + ww).getStringAt(uu);
				let ymeasureFormatted = "";
				let xName = this.getXMeasures().get(ww);
				let yName = "";
				let ymeasure = 0;
				let vv;
				for (vv = 0; vv < yListSize; vv++)
				{
					ymeasure = this.getYList().getListAt(vv).getDoubleAt(uu);
					ymeasureFormatted = this.getYListFormatted().getListAt(vv).getStringAt(uu);
					yName = this.getYMeasures().get(0);
					if (ymeasure !== 0)
					{
						break;
					}
				}
				let ml = newList.addNewStructure();
				ml.putInteger(oFF.VizDefConstants.K_X, uu);
				ml.putDouble(oFF.VizDefConstants.K_Y, xmeasure);
				ml.putDouble(oFF.VizDefConstants.K_Z, ymeasure);
				ml.putString(oFF.VizDefConstants.K_Y_FORMATTED, xmeasureFormatted);
				ml.putString(oFF.VizDefConstants.K_Z_FORMATTED, ymeasureFormatted);
				ml.putString(oFF.VizDefConstants.K_X_NAME, this.getCategoriesList().get(uu));
				ml.putString(oFF.VizDefConstants.K_Y_NAME, xName);
				ml.putString(oFF.VizDefConstants.K_Z_NAME, yName);
				this.addToolTipsToSeries(ml, oFF.XMath.div(vv, yMeasuresSize), uu);
			}
		}
	}
};
oFF.RsHiChartMarimekkoHelper.prototype.createTwoDimensionalSeries = function(seriesList)
{
	for (let ww = 0; ww < this.getXMeasures().size(); ww++)
	{
		for (let vv = 0; vv < this.getYMeasures().size(); vv++)
		{
			let polarLayer = seriesList.addNewStructure();
			let dataLabels = polarLayer.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
			dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
			polarLayer.putString(oFF.VizDefConstants.K_NAME, oFF.XStringUtils.concatenate3(this.getXMeasures().get(ww), "/", this.getYMeasures().get(vv)));
			this.addColorAndPattern(this.getXColors().get(ww), this.getXPatterns().get(ww), polarLayer, oFF.VizDefConstants.K_VARIWIDE, false);
			let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
			for (let uu = 0; uu < this.getCategoriesList().size(); uu++)
			{
				let ml = newList.addNewStructure();
				this.addColorAndPattern(this.getXColors().get(ww), this.getXPatterns().get(ww), ml, oFF.VizDefConstants.K_VARIWIDE, true);
				ml.putInteger(oFF.VizDefConstants.K_X, uu);
				ml.putDouble(oFF.VizDefConstants.K_Y, this.getXList().getListAt(ww).getDoubleAt(uu));
				ml.putDouble(oFF.VizDefConstants.K_Z, this.getYList().getListAt(vv).getDoubleAt(uu));
				ml.putString(oFF.VizDefConstants.K_X_NAME, this.getCategoriesList().get(uu));
				ml.putString(oFF.VizDefConstants.K_Y_FORMATTED, this.getXListFormatted().getListAt(ww).getStringAt(uu));
				ml.putString(oFF.VizDefConstants.K_Z_FORMATTED, this.getYListFormatted().getListAt(vv).getStringAt(uu));
				ml.putString(oFF.VizDefConstants.K_Y_NAME, this.getXMeasures().get(ww));
				ml.putString(oFF.VizDefConstants.K_Z_NAME, this.getYMeasures().get(vv));
				this.addToolTipsToSeries(ml, 0, uu);
			}
		}
	}
};
oFF.RsHiChartMarimekkoHelper.prototype.decorateToolTip = function(stringBuffer)
{
	stringBuffer.append("<b>{point.xName}</b> <br/>");
	stringBuffer.append("<b>{point.yName}</b>: {point.yFormatted} <br/>");
	if (oFF.XCollectionUtils.hasElements(this.getYMeasures()))
	{
		stringBuffer.append("<b>{point.zName}</b>: {point.zFormatted} <br/>");
	}
};
oFF.RsHiChartMarimekkoHelper.prototype.finishRendering = function()
{
	let theChartData = this.getChartData();
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let xAxisStruct = this.getChartData().putNewStructure(oFF.VizDefConstants.K_X_AXIS);
	xAxisStruct.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_CATEGORY);
	let xDList = xAxisStruct.putNewList(oFF.VizDefConstants.K_CATEGORIES);
	for (let i = 0; i < this.getCategoriesList().size(); i++)
	{
		xDList.addString(this.getCategoriesList().get(i));
	}
	seriesList.clear();
	if (oFF.XCollectionUtils.hasElements(this.getColorList()))
	{
		if (this.getYMeasures().size() === 0)
		{
			this.createOneDimensionalColorSeries(seriesList);
		}
		else
		{
			this.createTwoDimensionalColorSeries(seriesList);
		}
	}
	else
	{
		if (this.getYMeasures().size() === 0)
		{
			this.createOneDimensionalSeries(seriesList);
		}
		else
		{
			this.createTwoDimensionalSeries(seriesList);
		}
	}
};
oFF.RsHiChartMarimekkoHelper.prototype.getXFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS;
};
oFF.RsHiChartMarimekkoHelper.prototype.getYFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS2;
};
oFF.RsHiChartMarimekkoHelper.prototype.getZFeed = function()
{
	return oFF.VizDefConstants.K_BUBBLE_WIDTH;
};
oFF.RsHiChartMarimekkoHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartMarimekkoHelper.prototype.reiterateResultSet = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let yAxisList = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
	let yAxis = yAxisList.addNewStructure();
	let xAxisList = theChartData.putNewList(oFF.VizDefConstants.K_X_AXIS);
	let xAxisStruct = xAxisList.addNewStructure();
	xAxisStruct.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_CATEGORY);
	let vizProp = null;
	let hideTotalOnRows = !rs.getQueryModel().getRowsAxis().isTotalsVisible();
	if (this.getVizDef() !== null)
	{
		vizProp = this.getVizDef().getStructureByKey(oFF.VizDefConstants.K_CHART).getStructureByKey(oFF.VizDefConstants.K_PROPERTIES);
		if (oFF.notNull(vizProp))
		{
			let vizPropCategoryAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_CATEGORY_AXIS);
			if (oFF.notNull(vizPropCategoryAxis))
			{
				xAxisStruct = oFF.RsHiChartUtils.axisPloter(vizPropCategoryAxis, xAxisStruct, this.getChartType(), true);
			}
			let vizPropValueAxis = vizProp.getStructureByKey(oFF.VizDefConstants.K_VALUE_AXIS);
			if (oFF.notNull(vizPropValueAxis))
			{
				yAxis = oFF.RsHiChartUtils.axisPloter(vizPropValueAxis, yAxis, this.getChartType(), false);
			}
			oFF.RsHiChartVizUtilsSimple.addReferenceLine(this.getVizDef(), yAxis, yAxis, columnAxis, rowAxis, rs);
		}
	}
	oFF.RsHiChartVizUtilsSimple.legendStyler(theChartData);
	let plotOptions = oFF.PrFactory.createStructure();
	plotOptions = theChartData.getStructureByKey(oFF.VizDefConstants.K_PLOT_OPTIONS);
	let fillColor = oFF.VizDefConstants.K_TRANSPARENT;
	if (theChartData.getListByKey(oFF.VizDefConstants.K_COLORS) !== null)
	{
		if (theChartData.getListByKey(oFF.VizDefConstants.K_COLORS).size() > 0)
		{
			fillColor = theChartData.getListByKey(oFF.VizDefConstants.K_COLORS).getStringAt(0);
		}
	}
	if (oFF.isNull(plotOptions))
	{
		plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
	}
	if (!oFF.XString.isEqual(this.getStackingType(), null))
	{
		oFF.RsHiChartVizUtilsSimple.dataLabelAlignment(yAxis, this.getChartType(), columnAxis.getDecimalPlaces(this.getXFeed()), false);
	}
	let axisMeasures = columnAxis.getPrettyNamesForFeed(true, !hideTotalOnRows, oFF.VizDefConstants.K_VALUE_AXIS);
	let axisTitle = oFF.XCollectionUtils.join(axisMeasures, ",");
	oFF.RsHiChartVizUtilsSimple.plotOptionChart(yAxis, this.getChartType(), this.getStackingType(), plotOptions, 0, fillColor, axisTitle);
	oFF.RsHiChartVizUtilsSimple.dataLabelAlignment(yAxis, this.getChartType(), columnAxis.getDecimalPlaces(this.getXFeed()), false);
};

oFF.RsHiChartMetricHelper = function() {};
oFF.RsHiChartMetricHelper.prototype = new oFF.RsHiChartCovariationHelper();
oFF.RsHiChartMetricHelper.prototype._ff_c = "RsHiChartMetricHelper";

oFF.RsHiChartMetricHelper.prototype.finishRendering = function()
{
	let xList = this.getXList();
	if (!oFF.XCollectionUtils.hasElements(xList))
	{
		return;
	}
	let zList = this.getZList();
	let xListFormatted = this.getXListFormatted();
	let yListFormatted = this.getYListFormatted();
	let zListFormatted = this.getZListFormatted();
	if (!oFF.XCollectionUtils.hasElements(xListFormatted))
	{
		return;
	}
	let theChartData = this.getChartData();
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let polarLayer = seriesList.addNewStructure();
	let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
	let valueAxisAxisStyleFontSize = "120px";
	let categoryAxisStyleFontSize = "30px";
	let sideAxisStyleFontSize = "40px";
	let categoryAxisStyleFontColor = oFF.VizDefConstants.V_BLACK;
	let valueAxisAxisStyleFontColor = oFF.VizDefConstants.V_BLACK;
	let yStructure = newList.addNewStructure();
	yStructure.putString(oFF.VizDefConstants.K_VALUE_FORMATTED, xListFormatted.getListAt(0).getStringAt(0));
	yStructure.putDouble(oFF.VizDefConstants.K_Y, xList.getListAt(0).getDoubleAt(0));
	yStructure.putString(oFF.VizDefConstants.K_NAME, this.getXMeasures().get(0));
	let i = 0;
	let targetValues = yStructure.putNewList(oFF.VizDefConstants.K_TARGET_VALUES);
	let sb = oFF.XStringBuffer.create();
	if (yListFormatted.size() + zListFormatted.size() > 0)
	{
		sb.append("<br/><div style=\"font-size:");
		sb.append(sideAxisStyleFontSize);
		sb.append("\">");
	}
	let maxLabelSize = 0;
	let maxNumberLength = 0;
	for (i = 0; i < yListFormatted.size(); i++)
	{
		maxNumberLength = oFF.XMath.max(maxNumberLength, oFF.XString.size(yListFormatted.getListAt(i).getStringAt(0)));
		if (i < this.getYMeasures().size())
		{
			maxLabelSize = oFF.XMath.max(maxLabelSize, oFF.XString.size(this.getYMeasures().get(i)));
		}
	}
	if (zListFormatted.size() > 0)
	{
		maxNumberLength = oFF.XMath.max(maxNumberLength, oFF.XString.size(zListFormatted.getListAt(0).getStringAt(0)));
	}
	for (i = 0; i < yListFormatted.size(); i++)
	{
		let tvs = targetValues.addNewStructure();
		tvs.putString(oFF.VizDefConstants.K_TARGET_FORMATTED, yListFormatted.getListAt(i).getStringAt(0));
		let yMeasureString = "";
		if (i < this.getYMeasures().size())
		{
			yMeasureString = this.getYMeasures().get(i);
		}
		tvs.putString(oFF.VizDefConstants.K_NAME, yMeasureString);
		sb.append("<br/><div><span style=\"text-align:left;font-size:");
		sb.append(sideAxisStyleFontSize);
		sb.append(";width:");
		let spacing = 3 + maxNumberLength - oFF.XString.size(yMeasureString);
		sb.append(oFF.XInteger.convertToString(spacing));
		sb.append("em;\">{point.targetValues.");
		sb.append(oFF.XInteger.convertToString(i));
		sb.append(".targetFormatted}");
		for (let j = 0; j < spacing; j++)
		{
			sb.append("\u00A0");
		}
		sb.append(" </span><span style=\"text-align:right;font-size:");
		sb.append(sideAxisStyleFontSize);
		sb.append(";\">{point.targetValues.");
		sb.append(oFF.XInteger.convertToString(i));
		sb.append(".name}</span></div>");
	}
	if (zListFormatted.size() > 0)
	{
		yStructure.putString(oFF.VizDefConstants.K_VARIANCE, zListFormatted.getListAt(0).getStringAt(0));
		sb.append("<br/><div><span style=\"font-size:");
		sb.append(sideAxisStyleFontSize);
		sb.append(";width:");
		let tabbing = 3 + maxLabelSize + maxNumberLength - oFF.XString.size(zListFormatted.getListAt(0).getStringAt(0));
		sb.append(oFF.XInteger.convertToString(tabbing));
		sb.append("em;\">");
		sb.append(zList.getListAt(0).getDoubleAt(0) < 0 ? "\u21E9" : zList.getListAt(0).getDoubleAt(0) === 0 ? "\u21E8" : "\u21E7");
		sb.append("\u00A0{point.variance}");
		sb.append("</span><span style=\"text-align:right;font-size:");
		sb.append(sideAxisStyleFontSize);
		sb.append(";\"></span></div>");
	}
	if (yListFormatted.size() + zListFormatted.size() > 0)
	{
		sb.append("</div>");
	}
	let chartTypeInfo = theChartData.getStructureByKey(oFF.VizDefConstants.K_CHART);
	let chartLang = theChartData.putNewStructure(oFF.VizDefConstants.K_LANG);
	chartLang.putString(oFF.VizDefConstants.K_THOUSANDS_SEP, ",");
	chartTypeInfo.putInteger(oFF.VizDefConstants.K_MARGIN_TOP, 110);
	let tooltip = theChartData.putNewStructure(oFF.VizDefConstants.K_TOOLTIP);
	tooltip.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
	let pane = theChartData.putNewStructure(oFF.VizDefConstants.K_PANE);
	let paneBackground = pane.putNewList(oFF.VizDefConstants.K_BACKGROUND).addNewStructure();
	paneBackground.putString(oFF.VizDefConstants.K_BACKGROUND_COLOR, "rgba(0,0,0,0)");
	paneBackground.putString(oFF.VizDefConstants.K_INNER_RADIUS, "0%");
	paneBackground.putString(oFF.VizDefConstants.K_OUTER_RADIUS, "0%");
	paneBackground.putString(oFF.VizDefConstants.K_SHAPE, oFF.VizDefConstants.V_ARC);
	pane.putInteger(oFF.VizDefConstants.K_END_ANGLE, 0);
	pane.putInteger(oFF.VizDefConstants.K_START_ANGLE, 0);
	pane.putInteger(oFF.VizDefConstants.K_SIZE, 0);
	let centerPane = pane.putNewList(oFF.VizDefConstants.V_CENTER);
	centerPane.addString("0%");
	centerPane.addString("0%");
	let yAxis = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
	let yAxisStruct = yAxis.addNewStructure();
	yAxisStruct.putInteger(oFF.VizDefConstants.K_LINE_WIDTH, 0);
	yAxisStruct.putInteger(oFF.VizDefConstants.K_GRIDLINE_WIDTH, 0);
	yAxisStruct.putBoolean(oFF.VizDefConstants.K_VISIBLE, false);
	let legend = theChartData.putNewStructure(oFF.VizDefConstants.K_LEGEND);
	legend.putBoolean(oFF.VizDefConstants.K_ENABLED, false);
	let plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
	let plotOptionChartTypeStructure = plotOptions.putNewStructure(oFF.VizDefConstants.K_SERIES);
	let dataLabels = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
	dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
	dataLabels.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_RIGHT);
	dataLabels.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_MIDDLE);
	dataLabels.putInteger(oFF.VizDefConstants.K_Y, 0);
	dataLabels.putInteger(oFF.VizDefConstants.K_BORDER_WIDTH, 0);
	let valueAxisformat = ";\">{point.valueFormatted}</span>";
	let categoryAxisformat = ";\">{point.name}</span></div>";
	theChartData.putBoolean(oFF.VizDefConstants.K_FULL_SCREEN_ENABLED, false);
	let formatCategoryAxis = null;
	let formatValueAxis = null;
	let format = null;
	formatCategoryAxis = oFF.XStringUtils.concatenate5("<div><span style=\"font-size:", categoryAxisStyleFontSize, ";color:", categoryAxisStyleFontColor, categoryAxisformat);
	formatValueAxis = oFF.XStringUtils.concatenate5("<span style=\"font-size:", valueAxisAxisStyleFontSize, ";color:", valueAxisAxisStyleFontColor, valueAxisformat);
	let formatTerciaryAxis = sb.toString();
	format = oFF.XStringUtils.concatenate4(formatValueAxis, "<br/>", formatCategoryAxis, formatTerciaryAxis);
	dataLabels.putString(oFF.VizDefConstants.K_FORMAT, format);
	let styleDatalabels = dataLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
	styleDatalabels.putString(oFF.VizDefConstants.K_TEXT_OUTLINE, "0px");
	let plotOptionSolidGauge = plotOptions.putNewStructure(oFF.VizDefConstants.K_SOLID_GAUGE);
	plotOptionSolidGauge.putBoolean(oFF.VizDefConstants.K_ANIMATION, false);
};
oFF.RsHiChartMetricHelper.prototype.getXFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS;
};
oFF.RsHiChartMetricHelper.prototype.getYFeed = function()
{
	return oFF.VizDefConstants.K_VALUE_AXIS2;
};
oFF.RsHiChartMetricHelper.prototype.getZFeed = function()
{
	return oFF.VizDefConstants.K_VARIANCE;
};
oFF.RsHiChartMetricHelper.prototype.isResponsive = function()
{
	return false;
};
oFF.RsHiChartMetricHelper.prototype.prepareRendering = function() {};

oFF.RsHiChartPieHelper = function() {};
oFF.RsHiChartPieHelper.prototype = new oFF.RsHiChartCovariationHelper();
oFF.RsHiChartPieHelper.prototype._ff_c = "RsHiChartPieHelper";

oFF.RsHiChartPieHelper.ERROR_MESSAGE = "ERROR_MESSAGE";
oFF.RsHiChartPieHelper.I18N_CV_CHART_PIE_NEGATIVE_POSITIVE = "I18N_CV_CHART_PIE_NEGATIVE_POSITIVE";
oFF.RsHiChartPieHelper.prototype.decorateToolTip = function(stringBuffer)
{
	stringBuffer.append("<b>{point.name}</b>: {point.yFormatted} <br/>");
};
oFF.RsHiChartPieHelper.prototype.finishRendering = function()
{
	let theChartData = this.getChartData();
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	if (!oFF.XCollectionUtils.hasElements(this.getXList()))
	{
		return;
	}
	let polarLayer = seriesList.addNewStructure();
	let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
	polarLayer.putString(oFF.VizDefConstants.K_NAME, this.getXMeasures().get(0));
	let xList = this.getXListRemapped();
	let yList = this.getYListRemapped();
	let xListFormatted = this.getXListFormattedRemapped();
	let yListFormatted = this.getYListFormattedRemapped();
	let categoriesList = this.getCategoriesFormattedList();
	for (let p = 0; p < xList.size(); p++)
	{
		let previous = p > 0 ? xList.getDoubleAt(p - 1) : 0.0;
		let yValue = xList.getDoubleAt(p);
		if (previous * yValue >= 0)
		{
			let newstruct = newList.addNewStructure();
			let yValueFormatted = oFF.XDouble.convertToString(yValue);
			let zValue = 0.0;
			let zValueFormatted = "0.0";
			if (p < xListFormatted.size())
			{
				yValueFormatted = xListFormatted.getStringAt(p);
			}
			if (p < yList.size())
			{
				zValue = yList.getDoubleAt(p);
				zValueFormatted = oFF.XDouble.convertToString(zValue);
			}
			if (p < yListFormatted.size())
			{
				zValueFormatted = yListFormatted.getStringAt(p);
			}
			newstruct.putString(oFF.VizDefConstants.K_Y_FORMATTED, yValueFormatted);
			newstruct.putString(oFF.VizDefConstants.K_Z_FORMATTED, zValueFormatted);
			newstruct.putDouble(oFF.VizDefConstants.K_Y, oFF.XMath.abs(yValue));
			newstruct.putDouble(oFF.VizDefConstants.K_Z, zValue);
			this.addToolTipsToSeries(newstruct, 0, p);
			if (categoriesList.size() > p)
			{
				let categoryLabelList = categoriesList.get(p);
				let buffer = oFF.XStringBuffer.create();
				for (let i = 0; i < categoryLabelList.size(); i++)
				{
					buffer.append(categoryLabelList.get(i));
					if (!(i === categoryLabelList.size() - 1))
					{
						buffer.append("/");
					}
				}
				newstruct.putString(oFF.VizDefConstants.K_NAME, buffer.toString());
			}
		}
		else
		{
			this.getChartData().putString(oFF.RsHiChartPieHelper.ERROR_MESSAGE, this.getLocalizationProvider().getText(oFF.RsHiChartPieHelper.I18N_CV_CHART_PIE_NEGATIVE_POSITIVE));
			return;
		}
	}
};
oFF.RsHiChartPieHelper.prototype.getXFeed = function()
{
	return oFF.VizDefConstants.K_SIZE;
};
oFF.RsHiChartPieHelper.prototype.getYFeed = function()
{
	return null;
};
oFF.RsHiChartPieHelper.prototype.getZFeed = function()
{
	return null;
};
oFF.RsHiChartPieHelper.prototype.isShowLegend = function()
{
	return true;
};
oFF.RsHiChartPieHelper.prototype.prepareRendering = function()
{
	let theChartData = this.getChartData();
	let chartTypeInfo = theChartData.getStructureByKey(oFF.VizDefConstants.K_CHART);
	let chartTypeInfostyle = chartTypeInfo.putNewStructure(oFF.VizDefConstants.K_STYLE);
	chartTypeInfostyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	chartTypeInfostyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "13px");
	let legend = theChartData.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
	legend.putBoolean(oFF.VizDefConstants.K_SQUARE_SYMBOL, true);
	legend.putInteger(oFF.VizDefConstants.K_SYMBOL_RADIUS, 0);
	legend.putString(oFF.VizDefConstants.K_LAYOUT, oFF.VizDefConstants.V_VERTICAL);
	legend.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_RIGHT);
	legend.putInteger(oFF.VizDefConstants.K_WIDTH, 200);
	legend.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
	let plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
	let yAxis = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
	let yAxisStruct = yAxis.addNewStructure();
	let yAxisTitle = yAxisStruct.putNewStructure(oFF.VizDefConstants.K_TITLE);
	yAxisTitle.putString(oFF.VizDefConstants.K_TEXT, "");
	let plotOptionChartTypeStructure = plotOptions.putNewStructure(this.getChartType());
	plotOptionChartTypeStructure.putBoolean(oFF.VizDefConstants.K_SHOW_IN_LEGEND, true);
	plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_INNER_SIZE, this.getInnerRadius());
	plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_SIZE, "70%");
	let dataLabels = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
	dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
	dataLabels.putString(oFF.VizDefConstants.K_FORMAT, "{point.percentage:.2f} %");
	dataLabels.putBoolean(oFF.VizDefConstants.K_HIDE_WHEN_OVERLAP, true);
	dataLabels.putInteger(oFF.VizDefConstants.K_DISTANCE, 15);
	let dataLabelsStyle = dataLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
	dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.V_FONT_WEIGHT_BOLD);
	dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
	dataLabelsStyle.putString(oFF.VizDefConstants.K_COLOR, "rgb(88,89,91)");
};

oFF.RsHiChartTimeSeriesHelper = function() {};
oFF.RsHiChartTimeSeriesHelper.prototype = new oFF.RsHiChartSeriesHelper();
oFF.RsHiChartTimeSeriesHelper.prototype._ff_c = "RsHiChartTimeSeriesHelper";

oFF.RsHiChartTimeSeriesHelper.addValue = function(dataList, date, dataCell, axis, tuple, measureName, errorList, error1, error2, categoryName, tooltipHeaders, tooltipValues, error1Formatted, error2Formatted, enforceColor)
{
	let doubleValue = 0;
	let valueType = dataCell.getValueType();
	let intermediateStructure = dataList.addNewStructure();
	if (valueType === oFF.XValueType.DOUBLE || valueType === oFF.XValueType.DECIMAL_FLOAT)
	{
		intermediateStructure.putDouble(oFF.VizDefConstants.K_X, date.getMilliseconds());
		if (dataCell.getXValue() !== null)
		{
			doubleValue = dataCell.getDouble();
			intermediateStructure.putDouble(oFF.VizDefConstants.K_Y, doubleValue);
			intermediateStructure.putString(oFF.VizDefConstants.K_Y_FORM, axis.getFormattedValue(oFF.VizDefConstants.K_VALUE_AXIS, tuple, dataCell));
			intermediateStructure.putDouble(oFF.VizDefConstants.K_PERCENT, doubleValue * 100);
		}
		else
		{
			intermediateStructure.putString(oFF.VizDefConstants.K_Y, null);
			intermediateStructure.putString(oFF.VizDefConstants.K_Y_FORM, null);
		}
		if (enforceColor)
		{
			intermediateStructure.putStringNotNullAndNotEmpty(oFF.VizDefConstants.K_COLOR, tuple.getColor());
		}
		intermediateStructure.putString(oFF.VizDefConstants.K_NAME, measureName);
		if (oFF.notNull(categoryName))
		{
			intermediateStructure.putString(oFF.VizDefConstants.K_CATEGORY_FORM, categoryName);
		}
	}
	if (oFF.notNull(errorList))
	{
		let subList = errorList.addNewList();
		subList.addDouble(error1);
		subList.addDouble(error2);
		if (error1 < error2)
		{
			intermediateStructure.putString(oFF.VizDefConstants.K_ERROR_RANGE, oFF.XStringUtils.concatenate3(error1Formatted, " .. ", error2Formatted));
		}
		else
		{
			intermediateStructure.putString(oFF.VizDefConstants.K_ERROR_RANGE, oFF.XStringUtils.concatenate3(error2Formatted, " .. ", error1Formatted));
		}
	}
	if (oFF.XCollectionUtils.hasElements(tooltipHeaders))
	{
		for (let j = 0; j < tooltipHeaders.size(); j++)
		{
			intermediateStructure.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_HEADER, oFF.XInteger.convertToString(j)), tooltipHeaders.get(j));
		}
	}
	if (oFF.XCollectionUtils.hasElements(tooltipValues))
	{
		for (let i = 0; i < tooltipValues.size(); i++)
		{
			intermediateStructure.putString(oFF.XStringUtils.concatenate2(oFF.VizDefConstants.K_T_FORMATTED, oFF.XInteger.convertToString(i)), tooltipValues.get(i));
		}
	}
};
oFF.RsHiChartTimeSeriesHelper.prototype.finishRendering = function()
{
	this.getChartData().putBoolean(oFF.VizDefConstants.K_IS_TIME_SERIES, true);
};
oFF.RsHiChartTimeSeriesHelper.prototype.isTimeseries = function()
{
	return true;
};
oFF.RsHiChartTimeSeriesHelper.prototype.prepareRendering = function() {};
oFF.RsHiChartTimeSeriesHelper.prototype.readResultSetData = function(columnAxis, rowAxis, rs)
{
	let theChartData = this.getChartData();
	let dataList = null;
	let dataLayer = null;
	let chartlang = theChartData.putNewStructure(oFF.VizDefConstants.K_LANG);
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let tooltipBuffer = oFF.XStringBuffer.create();
	tooltipBuffer.append("<b>{series.name}</b><br/>");
	let errorList;
	tooltipBuffer.append("<b>{point.name}</b>:  {point.yForm}<br/>");
	let dataAvailable = false;
	let columnSelectors = oFF.XList.create();
	columnSelectors.add(oFF.VizDefConstants.K_VALUE_AXIS);
	columnSelectors.add(oFF.VizDefConstants.K_VALUE_AXIS2);
	columnSelectors.add(oFF.VizDefConstants.K_VARIANCE);
	let pureColors = columnAxis.getPrettyNamesForFeed(true, false, oFF.VizDefConstants.K_COLOR);
	if (rs.getAvailableDataCellCount() > 0)
	{
		let tooltipHeaders = columnAxis.getPrettyNamesForFeed(true, false, oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
		for (let ti = 0; ti < tooltipHeaders.size(); ti++)
		{
			tooltipBuffer.append("<b>{point.tHeader");
			tooltipBuffer.append(oFF.XInteger.convertToString(ti));
			tooltipBuffer.append("}</b>:  {point.tFormatted");
			tooltipBuffer.append(oFF.XInteger.convertToString(ti));
			tooltipBuffer.append("}<br/>");
		}
		tooltipBuffer.append("{point.errorRange}<br/>");
		tooltipBuffer.append("{point.categoryForm}<br/>");
		let rowList = rowAxis.getDateList();
		let rowFormattedList = rowAxis.getFormattedDateList();
		if (oFF.XCollectionUtils.hasElements(rowList))
		{
			let indices = columnAxis.getIndicesByFeedOrder(columnSelectors);
			let selectorList = oFF.XList.create();
			selectorList.add(oFF.VizDefConstants.K_COLOR);
			selectorList.addAll(columnSelectors);
			this.setShowLegend(indices.size() > 1);
			for (let ij = 0; ij < indices.size(); ij++)
			{
				let i = indices.get(ij).getInteger();
				let columnTuple = columnAxis.getTupleAt(i);
				if (!columnTuple.isSelectedByString(oFF.VizDefConstants.K_VALUE_AXIS))
				{
					continue;
				}
				let overwriteColors = pureColors.size() < 2;
				dataLayer = seriesList.addNewStructure();
				dataLayer.putString(oFF.VizDefConstants.K_NAME, columnTuple.getPrettyDefaultText());
				dataList = dataLayer.putNewList(oFF.VizDefConstants.K_DATA);
				if (overwriteColors)
				{
					dataLayer.putStringNotNullAndNotEmpty(oFF.VizDefConstants.K_COLOR, columnTuple.getColor());
				}
				let memberNames = columnTuple.getMemberKeys();
				errorList = null;
				let errorIndex1 = i;
				let errorIndex2 = i;
				let hasErrorBar = false;
				let tooltipIndices = null;
				let tooltipValues = null;
				if (oFF.XCollectionUtils.hasElements(memberNames))
				{
					tooltipIndices = columnAxis.getMatchingTupleIndicesForMemberNameAndFeed(memberNames, oFF.VizDefConstants.K_TOOLTIP_VALUE_AXIS);
					let errorIndex = columnAxis.getMatchingTupleIndicesForMemberNamesAndSuffix(memberNames, oFF.VizDefConstants.K_ERRORBAR_MIN);
					if (errorIndex !== -1)
					{
						errorIndex1 = errorIndex;
						hasErrorBar = true;
					}
					errorIndex = columnAxis.getMatchingTupleIndicesForMemberNamesAndSuffix(memberNames, oFF.VizDefConstants.K_ERRORBAR_MAX);
					if (errorIndex !== -1)
					{
						errorIndex2 = errorIndex;
						hasErrorBar = true;
					}
					if (hasErrorBar)
					{
						let errorLayer = seriesList.addNewStructure();
						errorList = errorLayer.putNewList(oFF.VizDefConstants.K_DATA);
						errorLayer.putString(oFF.VizDefConstants.K_TYPE, oFF.VizDefConstants.K_ERRORBAR);
					}
				}
				for (let j = 0; j < rowAxis.getTuplesCount(); j++)
				{
					if (!rowAxis.getTupleAt(j).isSelectedByString(oFF.VizDefConstants.K_TIME_AXIS))
					{
						continue;
					}
					let date = rowList.get(j);
					let error1 = 0;
					let error2 = 0;
					let error1Formatted = "";
					let error2Formatted = "";
					if (oFF.notNull(date))
					{
						if (hasErrorBar)
						{
							error1 = rs.getDataCell(errorIndex1, j).getDouble();
							error1Formatted = columnAxis.getFormattedValue(oFF.VizDefConstants.K_VALUE_AXIS, columnAxis.getTupleAt(errorIndex1), rs.getDataCell(errorIndex1, j));
							error2 = rs.getDataCell(errorIndex2, j).getDouble();
							error2Formatted = columnAxis.getFormattedValue(oFF.VizDefConstants.K_VALUE_AXIS, columnAxis.getTupleAt(errorIndex2), rs.getDataCell(errorIndex2, j));
						}
						if (oFF.XCollectionUtils.hasElements(tooltipIndices))
						{
							tooltipValues = oFF.XList.create();
							for (let ttindex = 0; ttindex < tooltipIndices.size(); ttindex++)
							{
								let tooltipIndex = tooltipIndices.get(ttindex).getInteger();
								tooltipValues.add(columnAxis.getFormattedValue("", columnAxis.getTupleAt(tooltipIndex), rs.getDataCell(tooltipIndex, j)));
							}
						}
						let dataCell = rs.getDataCell(i, j);
						if (!rowAxis.getTupleAt(j).isTotal())
						{
							oFF.RsHiChartTimeSeriesHelper.addValue(dataList, date, dataCell, columnAxis, columnTuple, columnTuple.getPrettyDefaultText(), errorList, error1, error2, rowFormattedList.get(j), tooltipHeaders, tooltipValues, error1Formatted, error2Formatted, overwriteColors);
							dataAvailable = true;
						}
					}
				}
			}
			let tooltip = theChartData.putNewStructure(oFF.VizDefConstants.K_TOOLTIP);
			tooltip.putString(oFF.VizDefConstants.K_POINT_FORMAT, tooltipBuffer.toString());
			tooltip.putString(oFF.VizDefConstants.K_HEADER_FORMAT, "");
		}
	}
	if (!dataAvailable)
	{
		chartlang.putString(oFF.VizDefConstants.K_NO_DATA, "Firefly Resultset is Empty.");
		theChartData.putBoolean(oFF.VizDefConstants.K_FULL_SCREEN_ENABLED, false);
	}
};

oFF.RsHiChartTreemapHelper = function() {};
oFF.RsHiChartTreemapHelper.prototype = new oFF.RsHiChartCovariationHelper();
oFF.RsHiChartTreemapHelper.prototype._ff_c = "RsHiChartTreemapHelper";

oFF.RsHiChartTreemapHelper.prototype.decorateToolTip = function(stringBuffer)
{
	stringBuffer.append("<b>{point.name}</b><br/><b>{point.valueName}</b>: {point.valueFormatted} <br/>");
	if (oFF.XCollectionUtils.hasElements(this.getYMeasures()))
	{
		stringBuffer.append("<b>{point.colorName}</b>: {point.colorValueFormatted} <br/>");
	}
};
oFF.RsHiChartTreemapHelper.prototype.finishRendering = function()
{
	let theChartData = this.getChartData();
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let polarLayer = seriesList.addNewStructure();
	polarLayer.putString(oFF.VizDefConstants.K_LAYOUT_ALGORITHM, oFF.VizDefConstants.V_TREEMAP_LAYOUT_STRIP);
	let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
	if (this.getXList().size() === 0)
	{
		return;
	}
	if (this.getYMeasures().size() > 0)
	{
		polarLayer.putString(oFF.VizDefConstants.K_NAME, this.getYMeasures().get(0));
	}
	else if (this.getXMeasures().size() > 0)
	{
		polarLayer.putString(oFF.VizDefConstants.K_NAME, this.getXMeasures().get(0));
	}
	else
	{
		polarLayer.putString(oFF.VizDefConstants.K_NAME, "");
	}
	let xList = this.getXListRemapped();
	let yList = this.getYListRemapped();
	let xListFormatted = this.getXListFormattedRemapped();
	let yListFormatted = this.getYListFormattedRemapped();
	let xMeasures = this.getXMeasures();
	let yMeasures = this.getYMeasures();
	let categoriesLabels = this.getCategoryLabels();
	let twoDimensional = oFF.XCollectionUtils.hasElements(yMeasures);
	if (!twoDimensional)
	{
		yList = xList;
		yListFormatted = xListFormatted;
		yMeasures = xMeasures;
	}
	let dataLabels = polarLayer.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
	dataLabels.putString(oFF.VizDefConstants.K_POINT_FORMAT, "<b>{point.name}</b><br/> {point.valueFormatted}");
	let xValues = 0;
	let yValues = 0;
	let xValuesFormatted = "0";
	let yValuesFormatted = "0";
	let keySet = oFF.XHashSetOfString.create();
	for (let k = 0; k < categoriesLabels.size(); k++)
	{
		let element = categoriesLabels.get(k);
		xValues = xList.getDoubleAt(k);
		yValues = yList.getDoubleAt(k);
		xValuesFormatted = xListFormatted.getStringAt(k);
		yValuesFormatted = yListFormatted.getStringAt(k);
		let newStructure = this.getNewLabeledStructure(newList, element, keySet);
		if (element.isLeafOrCollapsed())
		{
			newStructure.putDouble(oFF.VizDefConstants.K_VALUE, xValues);
			newStructure.putDouble(oFF.VizDefConstants.K_COLOR_VALUE, yValues);
		}
		newStructure.putString(oFF.VizDefConstants.K_VALUE_FORMATTED, xValuesFormatted);
		newStructure.putString(oFF.VizDefConstants.K_COLOR_VALUE_FORMATTED, yValuesFormatted);
		newStructure.putString(oFF.VizDefConstants.K_COLOR_NAME, yMeasures.get(0));
		newStructure.putString(oFF.VizDefConstants.K_VALUE_NAME, xMeasures.get(0));
		newStructure.putString(oFF.VizDefConstants.K_TYPE, this.getChartType());
		this.addToolTipsToSeries(newStructure, 0, k);
	}
	oFF.RsHiChartVizUtilsHeatmap.rendrerHeatmap(this.getChartData(), this.getChartType(), this.getVizDef(), this.getGlobalDef());
};
oFF.RsHiChartTreemapHelper.prototype.getNewLabeledStructure = function(newList, element, keySet)
{
	if (keySet.contains(element.getCompoundId()))
	{
		return null;
	}
	if (element.getParent() !== null)
	{
		this.getNewLabeledStructure(newList, element.getParent(), keySet);
	}
	keySet.add(element.getCompoundId());
	let newStructure = newList.addNewStructure();
	newStructure.putString(oFF.VizDefConstants.K_ID, element.getCompoundId());
	if (element.getParent() !== null)
	{
		newStructure.putString(oFF.VizDefConstants.K_PARENT, element.getParent().getCompoundId());
	}
	newStructure.putString(oFF.VizDefConstants.K_NAME, element.getLabel());
	if (!element.isLeafOrCollapsed())
	{
		newStructure.putInteger(oFF.VizDefConstants.K_BORDER_WIDTH, oFF.XMath.div(6, element.getDisplayLevel() + 1));
		newStructure.putString(oFF.VizDefConstants.K_BORDER_COLOR, "grey");
	}
	return newStructure;
};
oFF.RsHiChartTreemapHelper.prototype.getXFeed = function()
{
	return oFF.VizDefConstants.K_WEIGHT;
};
oFF.RsHiChartTreemapHelper.prototype.getYFeed = function()
{
	return oFF.VizDefConstants.K_COLOR;
};
oFF.RsHiChartTreemapHelper.prototype.getZFeed = function()
{
	return null;
};
oFF.RsHiChartTreemapHelper.prototype.prepareRendering = function() {};

oFF.RsHiChartWordcloudHelper = function() {};
oFF.RsHiChartWordcloudHelper.prototype = new oFF.RsHiChartCovariationHelper();
oFF.RsHiChartWordcloudHelper.prototype._ff_c = "RsHiChartWordcloudHelper";

oFF.RsHiChartWordcloudHelper.prototype.decorateToolTip = function(stringBuffer)
{
	stringBuffer.append("<b>{point.name}</b>: {point.weightFormatted}  <br/>");
};
oFF.RsHiChartWordcloudHelper.prototype.finishRendering = function()
{
	let theChartData = this.getChartData();
	let seriesList = theChartData.putNewList(oFF.VizDefConstants.K_SERIES);
	let xList = this.getXList();
	let xlistFormatted = this.getXListFormatted();
	let listSize = xList.size();
	for (let o = 0; o < listSize; o++)
	{
		let polarLayer = seriesList.addNewStructure();
		polarLayer.putString(oFF.VizDefConstants.K_NAME, this.getXMeasures().get(o));
		let newList = polarLayer.putNewList(oFF.VizDefConstants.K_DATA);
		let xListSub = xList.getListAt(o);
		let xListFormattedSub = xlistFormatted.getListAt(o);
		for (let p = 0; p < xListSub.size(); p++)
		{
			let newStruct = newList.addNewStructure();
			let yValue = xListSub.getDoubleAt(p);
			let yValueFormatted = oFF.XDouble.convertToString(yValue);
			if (p < xListFormattedSub.size())
			{
				yValueFormatted = xListFormattedSub.getStringAt(p);
			}
			newStruct.putDouble(oFF.VizDefConstants.K_WEIGHT, yValue);
			newStruct.putString(oFF.VizDefConstants.K_WEIGHT_FORMATTED, yValueFormatted);
			let nameString = this.getCategoriesList().get(p);
			newStruct.putString(oFF.VizDefConstants.K_NAME, nameString);
			newStruct.putString(oFF.VizDefConstants.K_TYPE, this.getChartType());
			this.addToolTipsToSeries(newStruct, o, p);
		}
	}
};
oFF.RsHiChartWordcloudHelper.prototype.getXFeed = function()
{
	return oFF.VizDefConstants.K_SIZE;
};
oFF.RsHiChartWordcloudHelper.prototype.getYFeed = function()
{
	return null;
};
oFF.RsHiChartWordcloudHelper.prototype.getZFeed = function()
{
	return null;
};
oFF.RsHiChartWordcloudHelper.prototype.prepareRendering = function()
{
	let theChartData = this.getChartData();
	let chartTypeInfo = theChartData.getStructureByKey(oFF.VizDefConstants.K_CHART);
	let chartTypeInfostyle = chartTypeInfo.putNewStructure(oFF.VizDefConstants.K_STYLE);
	chartTypeInfostyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	chartTypeInfostyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "13px");
	let legend = theChartData.getStructureByKey(oFF.VizDefConstants.K_LEGEND);
	legend.putBoolean(oFF.VizDefConstants.K_SQUARE_SYMBOL, true);
	legend.putInteger(oFF.VizDefConstants.K_SYMBOL_RADIUS, 0);
	legend.putString(oFF.VizDefConstants.K_LAYOUT, oFF.VizDefConstants.V_HORIZONTAL);
	legend.putString(oFF.VizDefConstants.K_ALIGN, oFF.VizDefConstants.V_CENTER);
	legend.putString(oFF.VizDefConstants.K_VERTICAL_ALIGN, oFF.VizDefConstants.V_POSITION_TOP);
	let plotOptions = theChartData.putNewStructure(oFF.VizDefConstants.K_PLOT_OPTIONS);
	let yAxis = theChartData.putNewList(oFF.VizDefConstants.K_Y_AXIS);
	let yAxisStruct = yAxis.addNewStructure();
	let yAxisTitle = yAxisStruct.putNewStructure(oFF.VizDefConstants.K_TITLE);
	yAxisTitle.putString(oFF.VizDefConstants.K_TEXT, "");
	let plotOptionChartTypeStructure = plotOptions.putNewStructure(this.getChartType());
	let plotOptionChartTypeStructureStyle = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_STYLE);
	plotOptionChartTypeStructureStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	let plotOptionChartTypeStructureRotation = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_ROTATION);
	plotOptionChartTypeStructureRotation.putInteger(oFF.VizDefConstants.K_FROM, -45);
	plotOptionChartTypeStructureRotation.putInteger(oFF.VizDefConstants.K_TO, 25);
	plotOptionChartTypeStructure.putString(oFF.VizDefConstants.K_PLACEMENT_STRATEGY, "center");
	plotOptionChartTypeStructure.putBoolean(oFF.VizDefConstants.K_SHOW_IN_LEGEND, true);
	let dataLabels = plotOptionChartTypeStructure.putNewStructure(oFF.VizDefConstants.K_DATA_LABELS);
	dataLabels.putBoolean(oFF.VizDefConstants.K_ENABLED, true);
	dataLabels.putString(oFF.VizDefConstants.K_FORMAT, "{point.percentage:.2f} %");
	dataLabels.putBoolean(oFF.VizDefConstants.K_HIDE_WHEN_OVERLAP, true);
	dataLabels.putInteger(oFF.VizDefConstants.K_DISTANCE, 15);
	let dataLabelsStyle = dataLabels.putNewStructure(oFF.VizDefConstants.K_STYLE);
	dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_WEIGHT, oFF.VizDefConstants.K_BOLD);
	dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_FAMILY, "LatoWeb, 'Open Sans', 'Helvetica Neue', Helvetica, Arial, 'sans serif'");
	dataLabelsStyle.putString(oFF.VizDefConstants.K_FONT_SIZE, "12px");
	dataLabelsStyle.putString(oFF.VizDefConstants.K_COLOR, "rgb(88,89,91)");
};

oFF.RscGenericModelReference = function() {};
oFF.RscGenericModelReference.prototype = new oFF.XObject();
oFF.RscGenericModelReference.prototype._ff_c = "RscGenericModelReference";

oFF.RscGenericModelReference.prototype.m_axisReference = null;
oFF.RscGenericModelReference.prototype.m_name = null;
oFF.RscGenericModelReference.prototype.m_text = null;
oFF.RscGenericModelReference.prototype.m_visible = false;
oFF.RscGenericModelReference.prototype.getAxisReference = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_axisReference);
};
oFF.RscGenericModelReference.prototype.getName = function()
{
	return this.m_name;
};
oFF.RscGenericModelReference.prototype.getText = function()
{
	return this.m_text;
};
oFF.RscGenericModelReference.prototype.isVisible = function()
{
	return this.m_visible;
};
oFF.RscGenericModelReference.prototype.setVisible = function(visible)
{
	this.m_visible = visible;
};
oFF.RscGenericModelReference.prototype.setupInternal = function(name, text, axisReference)
{
	this.m_name = name;
	this.m_text = text;
	this.m_axisReference = oFF.XWeakReferenceUtil.getWeakRef(axisReference);
};

oFF.RscGridContainerProvider = function() {};
oFF.RscGridContainerProvider.prototype = new oFF.XObjectExt();
oFF.RscGridContainerProvider.prototype._ff_c = "RscGridContainerProvider";


oFF.RscMeasureValueReference = function() {};
oFF.RscMeasureValueReference.prototype = new oFF.RscTupleValueReference();
oFF.RscMeasureValueReference.prototype._ff_c = "RscMeasureValueReference";

oFF.RscMeasureValueReference.createCopy = function(axisReference, rscTupleReference, original)
{
	let instance = new oFF.RscMeasureValueReference();
	instance.m_tags = oFF.XList.create();
	let orig = original;
	instance.setupWithTupleReference(rscTupleReference, null, null, null, null, null, null, null, null, axisReference.getComponentByName(oFF.DfNameObject.getSafeName(original.getModelReference())));
	instance.m_tupleIndexCoordinate = orig.m_tupleIndexCoordinate;
	return instance;
};
oFF.RscMeasureValueReference.createWithCoordinate = function(coordinate, tupleReference, modelReference)
{
	let instance = new oFF.RscMeasureValueReference();
	instance.m_tags = oFF.XList.create();
	instance.setupWithTupleReference(tupleReference, null, null, null, null, null, null, null, null, modelReference);
	instance.m_tupleIndexCoordinate = coordinate;
	return instance;
};
oFF.RscMeasureValueReference.prototype.m_alertLevel = null;
oFF.RscMeasureValueReference.prototype.m_cellValueType = null;
oFF.RscMeasureValueReference.prototype.m_complexUnit = null;
oFF.RscMeasureValueReference.prototype.m_currencyUnit = null;
oFF.RscMeasureValueReference.prototype.m_documentId = null;
oFF.RscMeasureValueReference.prototype.m_exceptionName = null;
oFF.RscMeasureValueReference.prototype.m_numericShift = null;
oFF.RscMeasureValueReference.prototype.m_scalingText = null;
oFF.RscMeasureValueReference.prototype.m_tags = null;
oFF.RscMeasureValueReference.prototype.m_tupleIndexCoordinate = null;
oFF.RscMeasureValueReference.prototype.m_unitInformation = null;
oFF.RscMeasureValueReference.prototype.m_valueException = null;
oFF.RscMeasureValueReference.prototype.createValueCopy = function(rscTupleReference, axisReference)
{
	return oFF.RscMeasureValueReference.createCopy(axisReference, rscTupleReference, this);
};
oFF.RscMeasureValueReference.prototype.getAlertLevel = function()
{
	return this.m_alertLevel;
};
oFF.RscMeasureValueReference.prototype.getCellValueType = function()
{
	return this.m_cellValueType;
};
oFF.RscMeasureValueReference.prototype.getComplexUnit = function()
{
	return this.m_complexUnit;
};
oFF.RscMeasureValueReference.prototype.getCurrencyUnit = function()
{
	return this.m_currencyUnit;
};
oFF.RscMeasureValueReference.prototype.getDocumentId = function()
{
	return this.m_documentId;
};
oFF.RscMeasureValueReference.prototype.getEffectiveScalingFactor = function()
{
	let factor = 1;
	if (this.m_cellValueType === oFF.XValueType.PERCENT)
	{
		factor = 100.0;
	}
	else if (oFF.notNull(this.m_numericShift))
	{
		factor = oFF.XMath.pow(10, this.m_numericShift.getInteger());
	}
	return factor;
};
oFF.RscMeasureValueReference.prototype.getExceptionName = function()
{
	return this.m_exceptionName;
};
oFF.RscMeasureValueReference.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.RscMeasureValueReference.prototype.getReversedScalingFactor = function()
{
	return oFF.isNull(this.m_numericShift) ? null : oFF.XIntegerValue.create(-this.m_numericShift.getInteger());
};
oFF.RscMeasureValueReference.prototype.getScaledDouble = function()
{
	return this.getEffectiveScalingFactor() * this.getPlainDouble();
};
oFF.RscMeasureValueReference.prototype.getScaledValue = function()
{
	let plainValue = this.getPlainValue();
	let scaledValue = null;
	if (oFF.notNull(plainValue))
	{
		scaledValue = oFF.XDoubleValue.create(oFF.XValueUtil.getDouble(plainValue, false, true) * this.getEffectiveScalingFactor());
	}
	return scaledValue;
};
oFF.RscMeasureValueReference.prototype.getScalingText = function()
{
	return this.m_scalingText;
};
oFF.RscMeasureValueReference.prototype.getTags = function()
{
	return this.m_tags;
};
oFF.RscMeasureValueReference.prototype.getTupleIndexCoordinate = function()
{
	return this.m_tupleIndexCoordinate;
};
oFF.RscMeasureValueReference.prototype.getUnitInformation = function()
{
	return this.m_unitInformation;
};
oFF.RscMeasureValueReference.prototype.getValueException = function()
{
	return this.m_valueException;
};
oFF.RscMeasureValueReference.prototype.pullFromCellValue = function(cellValue)
{
	this.setupInternal(cellValue.getPlainValue(), cellValue.getText(), cellValue.getFormatPatternSimple(), cellValue.getFormattedTextSimple(), cellValue.getFormatPattern(), cellValue.getFormattedText(), cellValue.getFormatPatternFull(), cellValue.getFormattedTextFull());
	this.setDecimalPlaces(cellValue.getDecimalPlaces());
	this.setSignPresentation(cellValue.getSignPresentation());
	this.setDataUpdated(cellValue.isDataUpdated());
	this.setDecimalSeparator(cellValue.getDecimalSeparator());
	this.setDecimalGroupSeparator(cellValue.getDecimalGroupSeparator());
	this.m_numericShift = oFF.XIntegerValue.create(cellValue.getNumericShift());
	this.m_currencyUnit = cellValue.getCurrencyUnit();
	this.m_complexUnit = cellValue.getComplexUnit();
	this.m_cellValueType = cellValue.getCellValueType();
	this.m_valueException = cellValue.getValueException();
	this.m_tags = cellValue.getTags().createListCopy();
	this.m_unitInformation = cellValue.getUnitInformation();
	this.m_scalingText = cellValue.getScalingText();
	this.m_alertLevel = cellValue.getAlertLevel();
	this.m_exceptionName = cellValue.getExceptionName();
	this.m_documentId = cellValue.getDocumentId();
};

oFF.RscMemberValueReference = function() {};
oFF.RscMemberValueReference.prototype = new oFF.RscTupleValueReference();
oFF.RscMemberValueReference.prototype._ff_c = "RscMemberValueReference";

oFF.RscMemberValueReference.create = function(rscTupleReference, dimensionReference, value, text, pattern, memberType, drillState, displayLevel)
{
	let instance = new oFF.RscMemberValueReference();
	instance.setupWithFieldReference(rscTupleReference, dimensionReference, value, text, null, null, null, memberType, drillState, displayLevel);
	return instance;
};
oFF.RscMemberValueReference.createCopy = function(axisReference, rscTupleReference, original)
{
	let instance = new oFF.RscMemberValueReference();
	instance.setupWithFieldReference(rscTupleReference, axisReference.getComponentByName(original.getFieldReference().getName()), oFF.XValueUtil.copyValue(original.getPlainValue()), original.getFormattedText(), original.getFormatPattern(), original.getDecimalSeparator(), original.getDecimalGroupSeparator(), original.getDimensionMemberType(), original.getDrillState(), original.getDisplayLevel());
	instance.setRepeatedMemberName(original.isRepeatedMemberName());
	instance.setReferenceTupleIndex(original.getReferenceTupleIndex());
	instance.setDimensionSectionStart(original.isDimensionSectionStart());
	if (original.isDimensionSectionEnd())
	{
		instance.setDimensionSectionEnd();
	}
	return instance;
};
oFF.RscMemberValueReference.prototype.m_dimensionMemberType = null;
oFF.RscMemberValueReference.prototype.m_dimensionSectionEnd = false;
oFF.RscMemberValueReference.prototype.m_dimensionSectionStart = false;
oFF.RscMemberValueReference.prototype.m_displayLevel = 0;
oFF.RscMemberValueReference.prototype.m_drillGroupReference = null;
oFF.RscMemberValueReference.prototype.m_drillState = null;
oFF.RscMemberValueReference.prototype.m_hierarchyLevelEnd = false;
oFF.RscMemberValueReference.prototype.m_hierarchyLevelStart = false;
oFF.RscMemberValueReference.prototype.m_parentDimensionMemberName = null;
oFF.RscMemberValueReference.prototype.m_pathKey = null;
oFF.RscMemberValueReference.prototype.m_referenceTupleIndex = 0;
oFF.RscMemberValueReference.prototype.m_repeatedMemberName = false;
oFF.RscMemberValueReference.prototype.m_valueException = null;
oFF.RscMemberValueReference.prototype.createValueCopy = function(rscTupleReference, axisReference)
{
	return oFF.RscMemberValueReference.createCopy(axisReference, rscTupleReference, this);
};
oFF.RscMemberValueReference.prototype.getDimensionMemberType = function()
{
	return this.m_dimensionMemberType;
};
oFF.RscMemberValueReference.prototype.getDisplayLevel = function()
{
	return this.m_displayLevel;
};
oFF.RscMemberValueReference.prototype.getDrillGroupReference = function()
{
	return this.m_drillGroupReference;
};
oFF.RscMemberValueReference.prototype.getDrillState = function()
{
	return this.m_drillState;
};
oFF.RscMemberValueReference.prototype.getFieldReference = function()
{
	return this.getModelReference();
};
oFF.RscMemberValueReference.prototype.getParentDimensionMemberName = function()
{
	return this.m_parentDimensionMemberName;
};
oFF.RscMemberValueReference.prototype.getPathKey = function()
{
	return this.m_pathKey;
};
oFF.RscMemberValueReference.prototype.getReferenceTupleIndex = function()
{
	return this.m_referenceTupleIndex;
};
oFF.RscMemberValueReference.prototype.getValueException = function()
{
	return this.m_valueException;
};
oFF.RscMemberValueReference.prototype.isDimensionSectionEnd = function()
{
	return this.m_dimensionSectionEnd;
};
oFF.RscMemberValueReference.prototype.isDimensionSectionStart = function()
{
	return this.m_dimensionSectionStart;
};
oFF.RscMemberValueReference.prototype.isHierarchyLevelEnd = function()
{
	return this.m_hierarchyLevelEnd;
};
oFF.RscMemberValueReference.prototype.isHierarchyLevelStart = function()
{
	return this.m_hierarchyLevelStart;
};
oFF.RscMemberValueReference.prototype.isRepeatedMemberName = function()
{
	return this.m_repeatedMemberName;
};
oFF.RscMemberValueReference.prototype.releaseObject = function()
{
	this.m_drillState = null;
	this.m_displayLevel = 0;
	this.m_dimensionMemberType = null;
	this.m_pathKey = null;
	this.m_valueException = null;
	this.m_parentDimensionMemberName = null;
	this.m_referenceTupleIndex = -1;
	this.m_repeatedMemberName = false;
	this.m_dimensionSectionStart = false;
	this.m_dimensionSectionEnd = false;
	this.m_hierarchyLevelStart = false;
	this.m_hierarchyLevelEnd = false;
	this.m_drillGroupReference = null;
	oFF.RscTupleValueReference.prototype.releaseObject.call( this );
};
oFF.RscMemberValueReference.prototype.setDimensionSectionEnd = function()
{
	this.m_dimensionSectionEnd = true;
};
oFF.RscMemberValueReference.prototype.setDimensionSectionStart = function(dimensionSectionStart)
{
	this.m_dimensionSectionStart = dimensionSectionStart;
};
oFF.RscMemberValueReference.prototype.setDrillGroupReference = function(drillGroupReference)
{
	this.m_drillGroupReference = drillGroupReference;
};
oFF.RscMemberValueReference.prototype.setHierarchyLevelEnd = function(hierarchyLevelEnd)
{
	this.m_hierarchyLevelEnd = hierarchyLevelEnd;
};
oFF.RscMemberValueReference.prototype.setHierarchyLevelStart = function(hierarchyLevelStart)
{
	this.m_hierarchyLevelStart = hierarchyLevelStart;
};
oFF.RscMemberValueReference.prototype.setParentDimensionMemberName = function(parentDimensionMemberName)
{
	this.m_parentDimensionMemberName = parentDimensionMemberName;
};
oFF.RscMemberValueReference.prototype.setPathKey = function(pathKey)
{
	this.m_pathKey = pathKey;
};
oFF.RscMemberValueReference.prototype.setReferenceTupleIndex = function(repeatedMemberOffset)
{
	this.m_referenceTupleIndex = repeatedMemberOffset;
};
oFF.RscMemberValueReference.prototype.setRepeatedMemberName = function(repeatedMemberName)
{
	this.m_repeatedMemberName = repeatedMemberName;
};
oFF.RscMemberValueReference.prototype.setValueException = function(valueException)
{
	this.m_valueException = valueException;
};
oFF.RscMemberValueReference.prototype.setupWithFieldReference = function(rscTupleReference, dimensionReference, value, text, pattern, decimalSeparator, decimalGroupSeparator, memberType, drillState, displayLevel)
{
	this.setupWithTupleReference(rscTupleReference, value, text, pattern, text, pattern, text, pattern, text, dimensionReference);
	this.setDecimalGroupSeparator(decimalGroupSeparator);
	this.setDecimalSeparator(decimalSeparator);
	this.m_dimensionMemberType = memberType;
	this.m_drillState = drillState;
	this.m_displayLevel = displayLevel;
};

oFF.SacAnalyticsTableClipboardHelper = function() {};
oFF.SacAnalyticsTableClipboardHelper.prototype = new oFF.SacTableClipboardHelper();
oFF.SacAnalyticsTableClipboardHelper.prototype._ff_c = "SacAnalyticsTableClipboardHelper";

oFF.SacAnalyticsTableClipboardHelper.INTERNAL_DECIMAL_SEPARATOR = ".";
oFF.SacAnalyticsTableClipboardHelper.createForAnalytics = function(analyticsTable, userProfile)
{
	let instance = new oFF.SacAnalyticsTableClipboardHelper();
	instance.setupWithTable(analyticsTable);
	instance.setUserProfile(userProfile);
	return instance;
};
oFF.SacAnalyticsTableClipboardHelper.prototype.m_userProfile = null;
oFF.SacAnalyticsTableClipboardHelper.prototype.fillStructureOfCell = function(tableCell, owningList, rowIndex, colIndex)
{
	let parentTable = this.getTable();
	if (tableCell.isEffectiveMergeRepetitiveHeaderCells())
	{
		if (tableCell.getRepetitiveColumns() > 0)
		{
			tableCell.setMergedColumns(tableCell.getRepetitiveColumns());
		}
		if (tableCell.getRepetitiveRows() > 0)
		{
			tableCell.setMergedRows(tableCell.getRepetitiveRows());
		}
	}
	else
	{
		if (tableCell.getMergedColumns() > 0)
		{
			tableCell.setMergedColumns(0);
		}
		if (tableCell.getMergedRows() > 0)
		{
			tableCell.setMergedRows(0);
		}
	}
	let structure = oFF.SacTableClipboardHelper.prototype.fillStructureOfCell.call( this , tableCell, owningList, rowIndex, colIndex);
	let parentColumn = tableCell.getParentColumn();
	let parentRow = tableCell.getParentRow();
	structure.putInteger(oFF.SacTableConstants.N_TUPLE_INDEX, parentColumn.getTupleIndex());
	if (tableCell.isLastHeaderRow() && !parentTable.isEmptyRowDimensions())
	{
		structure.putInteger(oFF.SacTableConstants.RCS_N_INDEX, parentColumn.getDimensionIndex());
		if (parentColumn.getFieldName() !== null)
		{
			structure.putString(oFF.SacTableConstants.C_SN_FIELD, parentColumn.getFieldName());
		}
	}
	else
	{
		structure.putInteger(oFF.SacTableConstants.RCS_N_INDEX, parentRow.getDimensionIndex());
		if (parentRow.getFieldName() !== null)
		{
			structure.putString(oFF.SacTableConstants.C_SN_FIELD, parentRow.getFieldName());
		}
	}
	let sortDirection = tableCell.getSortDirection();
	if (oFF.notNull(sortDirection))
	{
		let iconContent = null;
		if (sortDirection === oFF.XSortDirection.DEFAULT_VALUE)
		{
			iconContent = "\uE095";
		}
		else if (sortDirection === oFF.XSortDirection.ASCENDING)
		{
			iconContent = "\uE1FD";
		}
		else if (sortDirection === oFF.XSortDirection.DESCENDING)
		{
			iconContent = "\uE1FC";
		}
		let cellIcon = structure.putNewList(oFF.SacTableConstants.C_L_CELL_ICONS_RIGHT).addNewStructure();
		cellIcon.putString(oFF.SacTableConstants.CI_S_CLASS_NAME, oFF.SacTableConstants.CI_SV_CLASS_NAME_SAP_UI_ICON);
		let cellIconAttribute = cellIcon.putNewStructure(oFF.SacTableConstants.CI_M_DATA_ATTRIBUTES);
		cellIconAttribute.putString(oFF.SacTableConstants.CIA_S_DATA_SAP_UI_ICON_CONTENT, iconContent);
		let cellIconStyle = cellIcon.putNewStructure(oFF.SacTableConstants.CI_M_STYLE);
		cellIconStyle.putString(oFF.SacTableConstants.CIS_S_FONT_FAMILY, oFF.SacTableConstants.CIS_SV_SAP_ICONS);
		cellIconStyle.putInteger(oFF.SacTableConstants.CIS_N_MARGIN_LEFT, oFF.SacTableConstants.CIS_NV_MARGIN_RIGHT);
		cellIcon.putBoolean(oFF.SacTableConstants.CI_B_ICON_AFTER, true);
	}
	return structure;
};
oFF.SacAnalyticsTableClipboardHelper.prototype.getLocalizedNumber = function(plainValue)
{
	return oFF.isNull(this.m_userProfile) || this.m_userProfile.getDecimalSeparator() === null ? plainValue.getStringRepresentation() : oFF.XString.replace(plainValue.getStringRepresentation(), oFF.SacAnalyticsTableClipboardHelper.INTERNAL_DECIMAL_SEPARATOR, this.m_userProfile.getDecimalSeparator());
};
oFF.SacAnalyticsTableClipboardHelper.prototype.setUserProfile = function(userProfile)
{
	this.m_userProfile = userProfile;
};

oFF.ReferenceGrid2 = function() {};
oFF.ReferenceGrid2.prototype = new oFF.ReferenceGrid();
oFF.ReferenceGrid2.prototype._ff_c = "ReferenceGrid2";

oFF.ReferenceGrid2.createWithName2 = function(gridName, resultSet)
{
	let grid = new oFF.ReferenceGrid2();
	grid.setupSimpleGrid(resultSet, false, false);
	return grid;
};
oFF.ReferenceGrid2.prototype.formatDataCellValue = function(dataCell)
{
	let value;
	if (dataCell.getXValue() !== null && dataCell.getXValue().getValueType() === oFF.XValueType.DOUBLE)
	{
		let stringRepresentation = dataCell.getXValue().getStringRepresentation();
		value = oFF.XNumberFormatter.formatDoubleToString(oFF.XDouble.convertFromString(stringRepresentation), "#,#.###");
	}
	else
	{
		value = dataCell.getFormattedValue();
	}
	return value;
};
oFF.ReferenceGrid2.prototype.prepareCellStructure = function(useRowsHeaderPane, useColumnsHeaderPane)
{
	if (oFF.notNull(this.m_resultSet))
	{
		this.prepareStructure(useRowsHeaderPane, useColumnsHeaderPane);
	}
};

oFF.RscDimensionReference = function() {};
oFF.RscDimensionReference.prototype = new oFF.RscGenericModelReference();
oFF.RscDimensionReference.prototype._ff_c = "RscDimensionReference";

oFF.RscDimensionReference.create = function(axisReference, name, text, dimension, index)
{
	let instance = oFF.RscDimensionReference.createInternal(name, text, axisReference);
	instance.setupWithParameters(dimension, index);
	return instance;
};
oFF.RscDimensionReference.createInternal = function(name, text, axisReference)
{
	let instance = new oFF.RscDimensionReference();
	instance.setupInternal(name, text, axisReference);
	return instance;
};
oFF.RscDimensionReference.prototype.m_dimension = null;
oFF.RscDimensionReference.prototype.m_fieldNames = null;
oFF.RscDimensionReference.prototype.m_index = 0;
oFF.RscDimensionReference.prototype.m_lowerLevelNodeAlignment = null;
oFF.RscDimensionReference.prototype.m_reversedIndex = 0;
oFF.RscDimensionReference.prototype.m_uniqueMemberValues = null;
oFF.RscDimensionReference.prototype.addFieldName = function(fieldName)
{
	this.m_fieldNames.add(fieldName);
};
oFF.RscDimensionReference.prototype.getDimension = function()
{
	return this.m_dimension;
};
oFF.RscDimensionReference.prototype.getFieldNames = function()
{
	return this.m_fieldNames;
};
oFF.RscDimensionReference.prototype.getIndex = function()
{
	return this.m_index;
};
oFF.RscDimensionReference.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_lowerLevelNodeAlignment;
};
oFF.RscDimensionReference.prototype.getModelComponentType = function()
{
	return oFF.OlapComponentType.ABSTRACT_DIMENSION;
};
oFF.RscDimensionReference.prototype.getReversedIndex = function()
{
	return this.m_reversedIndex;
};
oFF.RscDimensionReference.prototype.getUniqueMemberValues = function()
{
	return this.m_uniqueMemberValues.getValuesAsReadOnlyList();
};
oFF.RscDimensionReference.prototype.hasUniqueMember = function(dimensionMemberKey)
{
	return this.m_uniqueMemberValues.containsKey(dimensionMemberKey);
};
oFF.RscDimensionReference.prototype.putUniqueMember = function(dimensionMemberKey, dimensionValue)
{
	this.m_uniqueMemberValues.put(dimensionMemberKey, dimensionValue);
};
oFF.RscDimensionReference.prototype.releaseObject = function()
{
	this.m_dimension = null;
	this.m_index = 0;
	this.m_reversedIndex = 0;
	this.m_lowerLevelNodeAlignment = null;
	oFF.RscGenericModelReference.prototype.releaseObject.call( this );
};
oFF.RscDimensionReference.prototype.setupWithParameters = function(dimension, index)
{
	this.m_dimension = dimension;
	this.m_index = index;
	this.m_reversedIndex = index - dimension.getAxis().size() - 1;
	this.m_lowerLevelNodeAlignment = dimension.getLowerLevelNodeAlignment();
	this.m_uniqueMemberValues = oFF.XLinkedHashMapByString.create();
	this.m_fieldNames = oFF.XHashSetOfString.create();
	this.setVisible(false);
};

oFF.RscFieldValueReference = function() {};
oFF.RscFieldValueReference.prototype = new oFF.RscTupleValueReference();
oFF.RscFieldValueReference.prototype._ff_c = "RscFieldValueReference";

oFF.RscFieldValueReference.create = function(rscTupleReference, fieldReference, value, text, memberValueReference)
{
	let instance = new oFF.RscFieldValueReference();
	instance.setupWithMemberReference(rscTupleReference, fieldReference, value, text, memberValueReference);
	return instance;
};
oFF.RscFieldValueReference.createCopy = function(axisReference, rscTupleReference, original, memberValueReference)
{
	let instance = new oFF.RscFieldValueReference();
	instance.setupWithMemberReference(rscTupleReference, axisReference.getComponentByName(original.getFieldReference().getName()), oFF.XValueUtil.copyValue(original.getPlainValue()), original.getFormattedText(), memberValueReference);
	return instance;
};
oFF.RscFieldValueReference.prototype.m_drillGroupHeader = false;
oFF.RscFieldValueReference.prototype.m_memberValueReference = null;
oFF.RscFieldValueReference.prototype.m_valueException = null;
oFF.RscFieldValueReference.prototype.createValueCopy = function(rscTupleReference, axisReference)
{
	return oFF.RscFieldValueReference.createCopy(axisReference, rscTupleReference, this, this.m_memberValueReference);
};
oFF.RscFieldValueReference.prototype.getDimensionMemberName = function()
{
	return oFF.XValueUtil.getString(this.m_memberValueReference.getPlainValue());
};
oFF.RscFieldValueReference.prototype.getDimensionMemberType = function()
{
	return this.m_memberValueReference.getDimensionMemberType();
};
oFF.RscFieldValueReference.prototype.getDimensionMemberValueException = function()
{
	return this.m_memberValueReference.getValueException();
};
oFF.RscFieldValueReference.prototype.getDisplayLevel = function()
{
	return this.m_memberValueReference.getDisplayLevel();
};
oFF.RscFieldValueReference.prototype.getDrillGroupReference = function()
{
	return this.m_memberValueReference.getDrillGroupReference();
};
oFF.RscFieldValueReference.prototype.getDrillState = function()
{
	return this.m_memberValueReference.getDrillState();
};
oFF.RscFieldValueReference.prototype.getFieldReference = function()
{
	return this.getModelReference();
};
oFF.RscFieldValueReference.prototype.getParentDimensionMemberName = function()
{
	return this.m_memberValueReference.getParentDimensionMemberName();
};
oFF.RscFieldValueReference.prototype.getPathKey = function()
{
	return this.m_memberValueReference.getPathKey();
};
oFF.RscFieldValueReference.prototype.getReferenceTupleIndex = function()
{
	return this.m_memberValueReference.getReferenceTupleIndex();
};
oFF.RscFieldValueReference.prototype.getValueException = function()
{
	return this.m_valueException;
};
oFF.RscFieldValueReference.prototype.isDimensionSectionEnd = function()
{
	return this.m_memberValueReference.isDimensionSectionEnd();
};
oFF.RscFieldValueReference.prototype.isDimensionSectionStart = function()
{
	return this.m_memberValueReference.isDimensionSectionStart();
};
oFF.RscFieldValueReference.prototype.isDrillGroupHeader = function()
{
	return this.m_drillGroupHeader;
};
oFF.RscFieldValueReference.prototype.isHierarchyLevelEnd = function()
{
	return this.m_memberValueReference.isHierarchyLevelEnd();
};
oFF.RscFieldValueReference.prototype.isHierarchyLevelStart = function()
{
	return this.m_memberValueReference.isHierarchyLevelStart();
};
oFF.RscFieldValueReference.prototype.isRepeatedMemberName = function()
{
	return this.m_memberValueReference.isRepeatedMemberName();
};
oFF.RscFieldValueReference.prototype.releaseObject = function()
{
	this.m_memberValueReference = null;
	this.m_valueException = null;
	oFF.RscTupleValueReference.prototype.releaseObject.call( this );
};
oFF.RscFieldValueReference.prototype.setDrillGroupHeader = function(notExactDrillGroup)
{
	this.m_drillGroupHeader = notExactDrillGroup;
};
oFF.RscFieldValueReference.prototype.setDrillGroupReference = function(drillGroupReference)
{
	this.m_memberValueReference.setDrillGroupReference(drillGroupReference);
};
oFF.RscFieldValueReference.prototype.setValueException = function(valueException)
{
	this.m_valueException = valueException;
};
oFF.RscFieldValueReference.prototype.setupWithMemberReference = function(rscTupleReference, fieldReference, value, text, memberValueReference)
{
	this.setupWithTupleReference(rscTupleReference, value, text, memberValueReference.getFormatPatternSimple(), text, memberValueReference.getFormatPattern(), text, memberValueReference.getFormatPatternFull(), text, fieldReference);
	this.m_memberValueReference = memberValueReference;
};

oFF.RscMappingI18n = function() {};
oFF.RscMappingI18n.prototype = new oFF.DfXLocalizationProvider();
oFF.RscMappingI18n.prototype._ff_c = "RscMappingI18n";

oFF.RscMappingI18n.COMMON_MEASURES = "FF_RSC_COMMON_MEASURES";
oFF.RscMappingI18n.COMMON_STRUCTURE = "FF_RSC_QB_COMMON_STRUCTURE";
oFF.RscMappingI18n.KPI_DEVIATION = "FF_RSC_KPI_DEVIATION";
oFF.RscMappingI18n.KPI_TARGET = "FF_RSC_KPI_TARGET";
oFF.RscMappingI18n.PROVIDER_NAME = "RscMapping";
oFF.RscMappingI18n.STYLE_SCALE_LONG_BILLION = "FF_RSC_SCALE_LONG_BILLION";
oFF.RscMappingI18n.STYLE_SCALE_LONG_MILLION = "FF_RSC_SCALE_LONG_MILLION";
oFF.RscMappingI18n.STYLE_SCALE_LONG_THOUSAND = "FF_RSC_SCALE_LONG_THOUSAND";
oFF.RscMappingI18n.STYLE_SCALE_SHORT_BILLION = "FF_RSC_SCALE_SHORT_BILLION";
oFF.RscMappingI18n.STYLE_SCALE_SHORT_MILLION = "FF_RSC_SCALE_SHORT_MILLION";
oFF.RscMappingI18n.STYLE_SCALE_SHORT_THOUSAND = "FF_RSC_SCALE_SHORT_THOUSAND";
oFF.RscMappingI18n.TOTALS = "FF_RSC_TOTALS";
oFF.RscMappingI18n.TOTALS_INCLUDING = "FF_RSC_TOTALS_INCLUDING";
oFF.RscMappingI18n.TOTALS_REMAINING = "FF_RSC_TOTALS_REMAINING";
oFF.RscMappingI18n.VALUE_EXCEPTION_ERROR = "FF_RSC_VALUE_EXCEPTION_ERROR";
oFF.RscMappingI18n.VALUE_EXCEPTION_NO_VALUE = "FF_RSC_VALUE_EXCEPTION_NO_VALUE";
oFF.RscMappingI18n.VALUE_EXCEPTION_NULL = "FF_RSC_VALUE_EXCEPTION_NULL";
oFF.RscMappingI18n.VALUE_EXCEPTION_OTHER = "FF_RSC_VALUE_EXCEPTION_OTHER";
oFF.RscMappingI18n.VALUE_EXCEPTION_UNDEFINED = "FF_RSC_VALUE_EXCEPTION_UNDEFINED";
oFF.RscMappingI18n.getLocalization = function()
{
	return oFF.XLocalizationCenter.getCenter().getLocalizationProviderByName(oFF.RscMappingI18n.PROVIDER_NAME);
};
oFF.RscMappingI18n.staticSetup = function()
{
	let lProvider = new oFF.RscMappingI18n();
	lProvider.setupProvider(oFF.RscMappingI18n.PROVIDER_NAME, true);
	lProvider.addText(oFF.RscMappingI18n.STYLE_SCALE_SHORT_THOUSAND, "k");
	lProvider.addComment(oFF.RscMappingI18n.STYLE_SCALE_SHORT_THOUSAND, "#XTIT: k (short form for thousand)");
	lProvider.addText(oFF.RscMappingI18n.STYLE_SCALE_SHORT_MILLION, "m");
	lProvider.addComment(oFF.RscMappingI18n.STYLE_SCALE_SHORT_MILLION, "#XTIT: m (short form for million)");
	lProvider.addText(oFF.RscMappingI18n.STYLE_SCALE_SHORT_BILLION, "bn");
	lProvider.addComment(oFF.RscMappingI18n.STYLE_SCALE_SHORT_BILLION, "#XTIT: bn (short form for billion)");
	lProvider.addText(oFF.RscMappingI18n.STYLE_SCALE_LONG_THOUSAND, "Thousand");
	lProvider.addComment(oFF.RscMappingI18n.STYLE_SCALE_LONG_THOUSAND, "#XTIT: Thousand");
	lProvider.addText(oFF.RscMappingI18n.STYLE_SCALE_LONG_MILLION, "Million");
	lProvider.addComment(oFF.RscMappingI18n.STYLE_SCALE_LONG_MILLION, "#XTIT: Million");
	lProvider.addText(oFF.RscMappingI18n.STYLE_SCALE_LONG_BILLION, "Billion");
	lProvider.addComment(oFF.RscMappingI18n.STYLE_SCALE_LONG_BILLION, "#XTIT: Billion");
	lProvider.addText(oFF.RscMappingI18n.KPI_DEVIATION, "Deviation");
	lProvider.addComment(oFF.RscMappingI18n.KPI_DEVIATION, "#XTIT: title for the deviation figure");
	lProvider.addText(oFF.RscMappingI18n.KPI_TARGET, "Target");
	lProvider.addComment(oFF.RscMappingI18n.KPI_TARGET, "#XTIT: title for the target figure");
	lProvider.addText(oFF.RscMappingI18n.COMMON_MEASURES, "Measures");
	lProvider.addComment(oFF.RscMappingI18n.COMMON_MEASURES, "#XTIT: The title of an element for the measure structure");
	lProvider.addText(oFF.RscMappingI18n.COMMON_STRUCTURE, "Structure");
	lProvider.addComment(oFF.RscMappingI18n.COMMON_STRUCTURE, "#XTIT: The title of an element for the second structure");
	lProvider.addText(oFF.RscMappingI18n.TOTALS, "Totals");
	lProvider.addComment(oFF.RscMappingI18n.TOTALS, "#XTIT: Totals");
	lProvider.addText(oFF.RscMappingI18n.TOTALS_INCLUDING, "Totals Including");
	lProvider.addComment(oFF.RscMappingI18n.TOTALS_INCLUDING, "#XTIT: Totals Including");
	lProvider.addText(oFF.RscMappingI18n.TOTALS_REMAINING, "Totals Remaining");
	lProvider.addComment(oFF.RscMappingI18n.TOTALS_REMAINING, "#XTIT: Totals Remaining");
	lProvider.addText(oFF.RscMappingI18n.VALUE_EXCEPTION_NULL, "(Null)");
	lProvider.addComment(oFF.RscMappingI18n.VALUE_EXCEPTION_NULL, "#XTIT: (Null)");
	lProvider.addText(oFF.RscMappingI18n.VALUE_EXCEPTION_ERROR, "(Error)");
	lProvider.addComment(oFF.RscMappingI18n.VALUE_EXCEPTION_ERROR, "#XTIT: (Error)");
	lProvider.addText(oFF.RscMappingI18n.VALUE_EXCEPTION_UNDEFINED, "(Undefined)");
	lProvider.addComment(oFF.RscMappingI18n.VALUE_EXCEPTION_UNDEFINED, "#XTIT: (Undefined)");
	lProvider.addText(oFF.RscMappingI18n.VALUE_EXCEPTION_OTHER, "(Other)");
	lProvider.addComment(oFF.RscMappingI18n.VALUE_EXCEPTION_OTHER, "#XTIT: (Other)");
	lProvider.addText(oFF.RscMappingI18n.VALUE_EXCEPTION_NO_VALUE, "(No Value)");
	lProvider.addComment(oFF.RscMappingI18n.VALUE_EXCEPTION_NO_VALUE, "#XTIT: (No Value)");
	return lProvider;
};

oFF.RscDataCellReference = function() {};
oFF.RscDataCellReference.prototype = new oFF.RscGenericModelReference();
oFF.RscDataCellReference.prototype._ff_c = "RscDataCellReference";

oFF.RscDataCellReference.create = function(mr1, mr2)
{
	let instance = new oFF.RscDataCellReference();
	let name = oFF.XStringUtils.concatenate3(mr1.getName(), " ", mr2.getName());
	let text = oFF.XStringUtils.concatenate3(mr1.getText(), " ", mr2.getText());
	instance.setupInternal(name, text, null);
	instance.setupDataCellReference(mr1, mr2);
	return instance;
};
oFF.RscDataCellReference.prototype.m_cellValueType = null;
oFF.RscDataCellReference.prototype.m_complexUnit = null;
oFF.RscDataCellReference.prototype.m_currencyUnit = null;
oFF.RscDataCellReference.prototype.m_displayLevel1 = 0;
oFF.RscDataCellReference.prototype.m_displayLevel2 = 0;
oFF.RscDataCellReference.prototype.m_drillState1 = null;
oFF.RscDataCellReference.prototype.m_drillState2 = null;
oFF.RscDataCellReference.prototype.m_numericShift = null;
oFF.RscDataCellReference.prototype.m_parent1 = null;
oFF.RscDataCellReference.prototype.m_parent2 = null;
oFF.RscDataCellReference.prototype.m_structureMember1 = null;
oFF.RscDataCellReference.prototype.m_structureMember2 = null;
oFF.RscDataCellReference.prototype.m_uniqueDecimalPlaces = 0;
oFF.RscDataCellReference.prototype.m_uniqueScalingText = null;
oFF.RscDataCellReference.prototype.m_uniqueUnitInfo = null;
oFF.RscDataCellReference.prototype.m_uniqueUnitScaleInformation = null;
oFF.RscDataCellReference.prototype.applyUnitAndScalingInfoAndMakeVisible = function(headerComponent)
{
	if (!this.isVisible())
	{
		this.m_numericShift = headerComponent.getNumericShift();
		this.m_currencyUnit = headerComponent.getCurrencyUnit();
		this.m_complexUnit = headerComponent.getComplexUnit();
		this.m_cellValueType = headerComponent.getCellValueType();
		this.m_uniqueUnitScaleInformation = headerComponent.getUniqueUnitScaleInformation();
		this.m_uniqueUnitInfo = headerComponent.getUniqueUnitInfo();
		this.m_uniqueScalingText = headerComponent.getUniqueScalingText();
		this.m_uniqueDecimalPlaces = headerComponent.getUniqueDecimalPlaces();
		this.setVisible(true);
	}
	else
	{
		if (!oFF.XObjectExt.areEqual(this.m_numericShift, headerComponent.getNumericShift()))
		{
			this.m_numericShift = null;
		}
		if (!oFF.XObjectExt.areEqual(this.m_currencyUnit, headerComponent.getCurrencyUnit()))
		{
			this.m_currencyUnit = null;
		}
		if (!oFF.XObjectExt.areEqual(this.m_complexUnit, headerComponent.getComplexUnit()))
		{
			this.m_complexUnit = null;
		}
		if (!oFF.XObjectExt.areEqual(this.m_cellValueType, headerComponent.getCellValueType()))
		{
			this.m_cellValueType = null;
		}
		if (!oFF.XString.isEqual(this.m_uniqueUnitScaleInformation, headerComponent.getUniqueUnitScaleInformation()))
		{
			this.m_uniqueUnitScaleInformation = null;
		}
		if (!oFF.XPairOfString.arePairsEqual(this.m_uniqueUnitInfo, headerComponent.getUniqueUnitInfo()))
		{
			this.m_uniqueUnitInfo = null;
		}
		if (!oFF.XString.isEqual(this.m_uniqueScalingText, headerComponent.getUniqueScalingText()))
		{
			this.m_uniqueScalingText = null;
		}
		if (this.m_uniqueDecimalPlaces !== headerComponent.getUniqueDecimalPlaces())
		{
			this.m_uniqueDecimalPlaces = 0;
		}
	}
};
oFF.RscDataCellReference.prototype.getCellValueType = function()
{
	return this.m_cellValueType;
};
oFF.RscDataCellReference.prototype.getComplexUnit = function()
{
	return this.m_complexUnit;
};
oFF.RscDataCellReference.prototype.getCurrencyUnit = function()
{
	return this.m_currencyUnit;
};
oFF.RscDataCellReference.prototype.getDisplayLevel1 = function()
{
	return this.m_displayLevel1;
};
oFF.RscDataCellReference.prototype.getDisplayLevel2 = function()
{
	return this.m_displayLevel2;
};
oFF.RscDataCellReference.prototype.getDrillState1 = function()
{
	return this.m_drillState1;
};
oFF.RscDataCellReference.prototype.getDrillState2 = function()
{
	return this.m_drillState2;
};
oFF.RscDataCellReference.prototype.getModelComponentType = function()
{
	return oFF.OlapComponentType.DATA_CELL;
};
oFF.RscDataCellReference.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.RscDataCellReference.prototype.getParent1 = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_parent1);
};
oFF.RscDataCellReference.prototype.getParent2 = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_parent2);
};
oFF.RscDataCellReference.prototype.getReversedScalingFactor = function()
{
	return oFF.isNull(this.m_numericShift) ? null : oFF.XIntegerValue.create(-this.m_numericShift.getInteger());
};
oFF.RscDataCellReference.prototype.getStructureMember1 = function()
{
	return this.m_structureMember1;
};
oFF.RscDataCellReference.prototype.getStructureMember2 = function()
{
	return this.m_structureMember2;
};
oFF.RscDataCellReference.prototype.getUniqueDecimalPlaces = function()
{
	return this.m_uniqueDecimalPlaces;
};
oFF.RscDataCellReference.prototype.getUniqueObject = function(object1, object2)
{
	let nullObject = null;
	return oFF.XObjectExt.areEqual(object1, object2) ? object1 : nullObject;
};
oFF.RscDataCellReference.prototype.getUniquePositiveInt = function(int1, int2)
{
	return int1 === int2 ? int1 : 0;
};
oFF.RscDataCellReference.prototype.getUniqueScalingText = function()
{
	return this.m_uniqueScalingText;
};
oFF.RscDataCellReference.prototype.getUniqueString = function(text1, text2)
{
	return oFF.XString.isEqual(text1, text2) ? text1 : null;
};
oFF.RscDataCellReference.prototype.getUniqueStringPair = function(pair1, pair2)
{
	return oFF.XPairOfString.arePairsEqual(pair1, pair2) ? pair1 : null;
};
oFF.RscDataCellReference.prototype.getUniqueUnitInfo = function()
{
	return this.m_uniqueUnitInfo;
};
oFF.RscDataCellReference.prototype.getUniqueUnitScaleInformation = function()
{
	return this.m_uniqueUnitScaleInformation;
};
oFF.RscDataCellReference.prototype.setupDataCellReference = function(mr1, mr2)
{
	this.m_structureMember1 = mr1.getStructureMember();
	this.m_displayLevel1 = mr1.getDisplayLevel();
	this.m_drillState1 = mr1.getDrillState();
	this.m_structureMember2 = mr2.getStructureMember();
	this.m_displayLevel2 = mr2.getDisplayLevel();
	this.m_drillState2 = mr2.getDrillState();
	this.m_uniqueUnitScaleInformation = this.getUniqueString(mr1.getUniqueUnitScaleInformation(), mr2.getUniqueUnitScaleInformation());
	this.m_numericShift = this.getUniqueObject(mr1.getNumericShift(), mr2.getNumericShift());
	this.m_currencyUnit = this.getUniqueObject(mr1.getCurrencyUnit(), mr2.getCurrencyUnit());
	this.m_complexUnit = this.getUniqueObject(mr1.getComplexUnit(), mr2.getComplexUnit());
	this.m_cellValueType = this.getUniqueObject(mr1.getCellValueType(), mr2.getCellValueType());
	this.m_uniqueUnitInfo = this.getUniqueStringPair(mr1.getUniqueUnitInfo(), mr2.getUniqueUnitInfo());
	this.m_uniqueScalingText = this.getUniqueString(mr1.getUniqueScalingText(), mr2.getUniqueScalingText());
	this.m_uniqueDecimalPlaces = this.getUniquePositiveInt(mr1.getUniqueDecimalPlaces(), mr2.getUniqueDecimalPlaces());
};

oFF.RscFieldReference = function() {};
oFF.RscFieldReference.prototype = new oFF.RscGenericModelReference();
oFF.RscFieldReference.prototype._ff_c = "RscFieldReference";

oFF.RscFieldReference.create = function(axisReference, text, actualFieldName, dimensionReference, field, index, isMainAttribute, visible, memberFieldValues)
{
	let instance = oFF.RscFieldReference.createInternal(actualFieldName, text, axisReference);
	instance.setupWithParameters(dimensionReference, field, index, isMainAttribute, visible, memberFieldValues);
	return instance;
};
oFF.RscFieldReference.createInternal = function(name, text, axisReference)
{
	let instance = new oFF.RscFieldReference();
	instance.setupInternal(name, text, axisReference);
	return instance;
};
oFF.RscFieldReference.prototype.m_dimensionReference = null;
oFF.RscFieldReference.prototype.m_fieldName = null;
oFF.RscFieldReference.prototype.m_index = 0;
oFF.RscFieldReference.prototype.m_isMainAttribute = false;
oFF.RscFieldReference.prototype.m_isMainFieldForAttribute = false;
oFF.RscFieldReference.prototype.m_isMainFieldForDimension = false;
oFF.RscFieldReference.prototype.addFieldName = oFF.noSupport;
oFF.RscFieldReference.prototype.getDimension = function()
{
	return this.m_dimensionReference.getDimension();
};
oFF.RscFieldReference.prototype.getDimensionIndex = function()
{
	return this.m_dimensionReference.getIndex();
};
oFF.RscFieldReference.prototype.getField = function()
{
	return this.m_dimensionReference.getDimension().getFieldByName(this.m_fieldName);
};
oFF.RscFieldReference.prototype.getFieldNames = oFF.noSupport;
oFF.RscFieldReference.prototype.getIndex = function()
{
	return this.m_index;
};
oFF.RscFieldReference.prototype.getLowerLevelNodeAlignment = function()
{
	return this.m_dimensionReference.getLowerLevelNodeAlignment();
};
oFF.RscFieldReference.prototype.getModelComponentType = function()
{
	return oFF.OlapComponentType.FIELD;
};
oFF.RscFieldReference.prototype.getReversedDimensionIndex = function()
{
	return this.m_dimensionReference.getReversedIndex();
};
oFF.RscFieldReference.prototype.getReversedIndex = oFF.noSupport;
oFF.RscFieldReference.prototype.getUniqueMemberValues = oFF.noSupport;
oFF.RscFieldReference.prototype.hasUniqueMember = oFF.noSupport;
oFF.RscFieldReference.prototype.isMainAttribute = function()
{
	return this.m_isMainAttribute;
};
oFF.RscFieldReference.prototype.isMainFieldFor = function(field, fieldContainer)
{
	return oFF.notNull(fieldContainer) && (field === fieldContainer.getTextField() || field === fieldContainer.getKeyField() || field === fieldContainer.getDisplayKeyField() || field === fieldContainer.getHierarchyKeyField() || field === fieldContainer.getFlatKeyField() || field === fieldContainer.getHierarchyTextField() || field === fieldContainer.getFlatTextField() || field === fieldContainer.getHierarchyDisplayKeyField() || field === fieldContainer.getFlatDisplayKeyField() || field === fieldContainer.getHierarchyNavigationField());
};
oFF.RscFieldReference.prototype.isMainFieldForAttribute = function()
{
	return this.m_isMainFieldForAttribute;
};
oFF.RscFieldReference.prototype.isMainFieldForDimension = function()
{
	return this.m_isMainFieldForDimension;
};
oFF.RscFieldReference.prototype.putUniqueMember = oFF.noSupport;
oFF.RscFieldReference.prototype.releaseObject = function()
{
	this.m_dimensionReference = null;
	this.m_index = 0;
	this.m_isMainAttribute = false;
	this.m_isMainFieldForAttribute = false;
	this.m_isMainFieldForDimension = false;
	this.m_fieldName = null;
	oFF.RscGenericModelReference.prototype.releaseObject.call( this );
};
oFF.RscFieldReference.prototype.setupWithParameters = function(dimensionReference, field, index, isMainAttribute, visible, memberFieldValues)
{
	this.m_dimensionReference = dimensionReference;
	this.m_fieldName = oFF.DfNameObject.getSafeName(field);
	this.m_index = index;
	this.m_isMainAttribute = isMainAttribute;
	this.m_isMainFieldForAttribute = this.isMainFieldFor(field, field.getAttribute());
	this.m_isMainFieldForDimension = this.isMainFieldFor(field, field.getDimension());
	this.setVisible(visible);
};

oFF.RscGridContainer = function() {};
oFF.RscGridContainer.prototype = new oFF.XObject();
oFF.RscGridContainer.prototype._ff_c = "RscGridContainer";

oFF.RscGridContainer.create = function(visualizationManager, collector)
{
	let instance = new oFF.RscGridContainer();
	instance.setupWithVisualizationManager(visualizationManager, collector);
	return instance;
};
oFF.RscGridContainer.prototype.m_activeVersions = null;
oFF.RscGridContainer.prototype.m_cellValues = null;
oFF.RscGridContainer.prototype.m_columnsAxis = null;
oFF.RscGridContainer.prototype.m_columnsTotalCount = 0;
oFF.RscGridContainer.prototype.m_dateFormatter = null;
oFF.RscGridContainer.prototype.m_dateTimeFormatter = null;
oFF.RscGridContainer.prototype.m_derivePercentageFromShift = false;
oFF.RscGridContainer.prototype.m_emptyCurrencyPair = null;
oFF.RscGridContainer.prototype.m_filled = false;
oFF.RscGridContainer.prototype.m_gridCollector = null;
oFF.RscGridContainer.prototype.m_lastColumnToFetch = 0;
oFF.RscGridContainer.prototype.m_lastRowToFetch = 0;
oFF.RscGridContainer.prototype.m_overwriteTexts = null;
oFF.RscGridContainer.prototype.m_rowsAxis = null;
oFF.RscGridContainer.prototype.m_rowsTotalCount = 0;
oFF.RscGridContainer.prototype.m_scaleTextsMap = null;
oFF.RscGridContainer.prototype.m_sortDirections = null;
oFF.RscGridContainer.prototype.m_totalColumnsCountAccurate = false;
oFF.RscGridContainer.prototype.m_totalRowsCountAccurate = false;
oFF.RscGridContainer.prototype.m_visualizationManager = null;
oFF.RscGridContainer.prototype.addCelValueAt = function(containingRow, index, cellValue)
{
	while (containingRow.size() < index)
	{
		containingRow.add(null);
	}
	if (index === containingRow.size())
	{
		containingRow.add(cellValue);
	}
	else
	{
		if (this.isPlanningDataEntryEnabled())
		{
			let oldCellValue = containingRow.get(index);
			if (oFF.notNull(oldCellValue) && !oFF.XString.isEqual(oldCellValue.getFormattedText(), cellValue.getFormattedText()))
			{
				cellValue.setDataUpdated(true);
			}
		}
		containingRow.set(index, cellValue);
	}
};
oFF.RscGridContainer.prototype.analyzeSortingOperations = function(queryModel)
{
	let sortingManager = queryModel.getSortingManager();
	let sortingOperations = sortingManager.getSortingOperations();
	let i;
	let sortDim;
	for (i = 0; i < sortingOperations.size(); i++)
	{
		let sortOp = sortingOperations.get(i);
		let sortType = sortOp.getSortingType();
		let direction = sortOp.getDirection();
		if (sortOp.getCustomSort() !== null)
		{
			continue;
		}
		else if (sortType.isTypeOf(oFF.SortType.MEMBER_KEY))
		{
			sortDim = sortOp.getDimension();
			if (this.checkAbstractDimensionSort(sortDim, queryModel, sortingManager))
			{
				oFF.XStream.of(sortOp.getDimension().getMainAttribute().getFields()).filter((fi) => {
					return fi.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_KEY);
				}).forEach((fil) => {
					this.getSortDirections().put(fil.getName(), direction);
				});
			}
		}
		else if (sortType.isTypeOf(oFF.SortType.MEMBER_TEXT))
		{
			sortDim = sortOp.getDimension();
			if (this.checkAbstractDimensionSort(sortDim, queryModel, sortingManager))
			{
				oFF.XStream.of(sortOp.getDimension().getMainAttribute().getFields()).filter((fi2) => {
					return fi2.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_TEXT);
				}).forEach((fil2) => {
					this.getSortDirections().put(fil2.getName(), direction);
				});
			}
		}
		else if (sortType.isTypeOf(oFF.SortType.FIELD))
		{
			let field = sortOp.getField();
			sortDim = field.getDimension();
			if (this.checkAbstractDimensionSort(sortDim, queryModel, sortingManager) && !this.isFallbackFieldSort(field))
			{
				this.getSortDirections().put(field.getName(), direction);
			}
		}
		else if (sortType.isTypeOf(oFF.SortType.DATA_CELL_VALUE) || sortType.isTypeOf(oFF.SortType.COMPLEX))
		{
			let pathUniqueName = oFF.RscMappingUtils.getSimplifiedUniqueName(sortOp.getElementPath());
			this.getSortDirections().put(pathUniqueName, direction);
		}
		else if (sortType.isTypeOf(oFF.SortType.MEASURE))
		{
			let measure = sortOp.getMeasure();
			this.getSortDirections().put(measure.getName(), direction);
			let secStruMe = sortOp.getSecondaryMeasure();
			if (oFF.notNull(secStruMe))
			{
				this.getSortDirections().put(oFF.XStringUtils.concatenate3(measure.getName(), ":", secStruMe.getName()), direction);
			}
		}
	}
};
oFF.RscGridContainer.prototype.areCellValuesComplete = function()
{
	return !oFF.XCollectionUtils.contains(this.m_cellValues, (cv) => {
		return oFF.isNull(cv);
	}) && !oFF.XStream.of(this.m_cellValues).anyMatch((cvl) => {
		return oFF.XCollectionUtils.contains(cvl, (cvle) => {
			return oFF.isNull(cvle);
		});
	});
};
oFF.RscGridContainer.prototype.checkAbstractDimensionSort = function(sortDim, queryModel, sortingManager)
{
	return !sortingManager.hasOverrulingSortingOperationForDimension(sortDim) && (queryModel.getRowsAxis().contains(sortDim) || queryModel.getColumnsAxis().contains(sortDim));
};
oFF.RscGridContainer.prototype.checkColumnComplete = function(colIndex, rowIndexStart, rowIndexEnd)
{
	let complete = false;
	let rowListSize = this.m_cellValues.size();
	let rowStartActual = rowListSize > rowIndexStart ? rowIndexStart : -1;
	let rowEndActual = rowListSize > rowIndexEnd ? rowIndexEnd : -1;
	let i;
	if (this.getDataRowsTotalCount() > 0)
	{
		complete = rowStartActual > -1 && rowEndActual > -1 && rowStartActual < rowListSize && rowEndActual < rowListSize;
		if (complete)
		{
			for (i = rowStartActual; i <= rowEndActual; i++)
			{
				if (this.getCellValueReference(colIndex, i) === null)
				{
					complete = false;
					break;
				}
			}
		}
	}
	else if (this.m_columnsAxis.getComponentsOnAxis().size() > 0)
	{
		let tuples = this.m_columnsAxis.getTuplesOnAxis();
		complete = oFF.notNull(tuples) && tuples.size() > colIndex && tuples.get(colIndex) !== null;
	}
	return complete;
};
oFF.RscGridContainer.prototype.checkColumnsRange = function(columnIndexStart, columnIndexEnd)
{
	return this.getDataColumnsTotalCount() === 0 || this.checkListRange(this.m_columnsAxis.getTuplesOnAxis(), columnIndexStart, columnIndexEnd);
};
oFF.RscGridContainer.prototype.checkListRange = function(list, indexStart, indexEnd)
{
	let passed = false;
	let size = list.size();
	if (indexStart <= size && indexEnd < size)
	{
		passed = true;
		for (let i = indexStart; i <= indexEnd; i++)
		{
			if (list.get(i) === null)
			{
				passed = false;
				break;
			}
		}
	}
	return passed;
};
oFF.RscGridContainer.prototype.checkRowComplete = function(rowIndex, columnIndexStart, columnIndexEnd)
{
	let complete = false;
	let size = this.getDataColumnsTotalCount();
	let i;
	if (size > 0)
	{
		let cellsStartActual = size > columnIndexStart ? columnIndexStart : -1;
		let cellsEndActual = size > columnIndexEnd ? columnIndexEnd : -1;
		complete = cellsStartActual > -1 && cellsEndActual > -1 && cellsStartActual < size && cellsEndActual < size;
		if (complete)
		{
			let row = this.m_cellValues.get(rowIndex);
			if (oFF.isNull(row))
			{
				complete = false;
			}
			else
			{
				for (i = cellsStartActual; i <= cellsEndActual; i++)
				{
					if (i >= row.size() || row.get(i) === null)
					{
						complete = false;
						break;
					}
				}
			}
		}
	}
	else if (this.m_rowsAxis.getComponentsOnAxis().size() > 0)
	{
		let tuples = this.m_rowsAxis.getTuplesOnAxis();
		complete = oFF.notNull(tuples) && tuples.size() > rowIndex && tuples.get(rowIndex) !== null;
	}
	return complete;
};
oFF.RscGridContainer.prototype.checkRowsRange = function(rowIndexStart, rowIndexEnd)
{
	return this.getDataRowsTotalCount() === 0 || this.checkListRange(this.m_rowsAxis.getTuplesOnAxis(), rowIndexStart, rowIndexEnd);
};
oFF.RscGridContainer.prototype.clearInternal = function()
{
	this.m_rowsAxis = oFF.XObjectExt.release(this.m_rowsAxis);
	this.m_columnsAxis = oFF.XObjectExt.release(this.m_columnsAxis);
	this.m_cellValues = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cellValues);
	this.m_sortDirections = oFF.XObjectExt.release(this.m_sortDirections);
	this.m_activeVersions = null;
	this.m_lastRowToFetch = -1;
	this.m_lastColumnToFetch = -1;
	this.m_totalRowsCountAccurate = false;
	this.m_totalColumnsCountAccurate = false;
	this.m_filled = false;
};
oFF.RscGridContainer.prototype.createDataColumns = function(cursorResultSet, lowerColumn, upperColumn)
{
	let offset = lowerColumn;
	this.m_lastColumnToFetch = oFF.XMath.max(1, lowerColumn + cursorResultSet.getCursorColumnsAxis().getTuplesCount());
	if (upperColumn > -1)
	{
		this.m_lastColumnToFetch = oFF.XMath.min(upperColumn + 1, this.m_lastColumnToFetch);
	}
	if (this.m_columnsTotalCount === -1 || this.m_columnsTotalCount > lowerColumn || !this.m_totalColumnsCountAccurate)
	{
		this.preFillAxis(cursorResultSet.getCursorColumnsAxis(), this.m_columnsAxis, cursorResultSet.getResultSetContainer().getOffsetColumns(), cursorResultSet.getDataColumns());
		if (this.m_columnsAxis.getTupleAt(lowerColumn) === null)
		{
			offset = lowerColumn + 1;
		}
	}
	return offset;
};
oFF.RscGridContainer.prototype.createDataRows = function(cursorResultSet, lowerRow, upperRow)
{
	let offset = lowerRow;
	this.m_lastRowToFetch = oFF.XMath.max(1, cursorResultSet.getResultSetContainer().getOffsetRows() + cursorResultSet.getCursorRowsAxis().getTuplesCount());
	if (upperRow > -1)
	{
		this.m_lastRowToFetch = oFF.XMath.min(this.m_lastRowToFetch, upperRow + 1);
	}
	if (this.m_rowsTotalCount === -1 || this.m_rowsTotalCount > lowerRow || !this.m_totalRowsCountAccurate)
	{
		this.preFillAxis(cursorResultSet.getCursorRowsAxis(), this.m_rowsAxis, cursorResultSet.getResultSetContainer().getOffsetRows(), cursorResultSet.getDataRows());
		if (this.m_rowsAxis.getTupleAt(lowerRow) === null)
		{
			offset = lowerRow + 1;
		}
	}
	this.retrieveColumnsTotalCount(cursorResultSet);
	this.retrieveRowsTotalCount(cursorResultSet);
	return offset;
};
oFF.RscGridContainer.prototype.createFormatterSettings = function(dataCell, structureMembers)
{
	let cellFormatterSettings = oFF.DataCellNumberFormatterSettings.create(dataCell);
	let settingsFactory = oFF.XNumberFormatterSettingsFactory.getInstance();
	let formatterSettings = settingsFactory.merge(cellFormatterSettings, this.getUserProfile());
	let qStructureMemberFormatterSettings = oFF.QStructureMemberFormatterSettings.create(structureMembers, dataCell.getQueryModel());
	return settingsFactory.merge(formatterSettings, qStructureMemberFormatterSettings);
};
oFF.RscGridContainer.prototype.createScaleTextsMap = function()
{
	this.m_scaleTextsMap = oFF.XHashMapByString.create();
	let localizer = oFF.XLocalizationCenter.getCenter();
	this.m_scaleTextsMap.put(oFF.XStringUtils.concatenate2(oFF.ScaleFormat.SHORT.getName(), "_3"), localizer.getText(oFF.RscMappingI18n.STYLE_SCALE_SHORT_THOUSAND));
	this.m_scaleTextsMap.put(oFF.XStringUtils.concatenate2(oFF.ScaleFormat.SHORT.getName(), "_6"), localizer.getText(oFF.RscMappingI18n.STYLE_SCALE_SHORT_MILLION));
	this.m_scaleTextsMap.put(oFF.XStringUtils.concatenate2(oFF.ScaleFormat.SHORT.getName(), "_9"), localizer.getText(oFF.RscMappingI18n.STYLE_SCALE_SHORT_BILLION));
	this.m_scaleTextsMap.put(oFF.XStringUtils.concatenate2(oFF.ScaleFormat.LONG.getName(), "_3"), localizer.getText(oFF.RscMappingI18n.STYLE_SCALE_LONG_THOUSAND));
	this.m_scaleTextsMap.put(oFF.XStringUtils.concatenate2(oFF.ScaleFormat.LONG.getName(), "_6"), localizer.getText(oFF.RscMappingI18n.STYLE_SCALE_LONG_MILLION));
	this.m_scaleTextsMap.put(oFF.XStringUtils.concatenate2(oFF.ScaleFormat.LONG.getName(), "_9"), localizer.getText(oFF.RscMappingI18n.STYLE_SCALE_LONG_BILLION));
};
oFF.RscGridContainer.prototype.extractStructureMembers = function(columnIndex, rowIndex)
{
	let structureMembers = oFF.XList.create();
	this.extractStructureMembersInternal(structureMembers, this.m_columnsAxis.getTupleAt(columnIndex));
	this.extractStructureMembersInternal(structureMembers, this.m_rowsAxis.getTupleAt(rowIndex));
	return structureMembers;
};
oFF.RscGridContainer.prototype.extractStructureMembersInternal = function(listToFill, tupleReference)
{
	if (oFF.notNull(tupleReference))
	{
		tupleReference.extractStructureMembers(listToFill);
	}
};
oFF.RscGridContainer.prototype.fillDataCells = function(cursorResultSet, offsetRows, offsetColumns, documentIds)
{
	for (let i = 0; i < cursorResultSet.getDataRows(); i++)
	{
		let rowTupleIndex = offsetRows + i;
		let cellRow = this.getOrCreateCellRow(rowTupleIndex);
		for (let j = 0; j < cursorResultSet.getDataColumns(); j++)
		{
			let columnTupleIndex = offsetColumns + j;
			let dataCell = cursorResultSet.getDataCell(j, i);
			let dataEntryEnabled = dataCell.isDataEntryEnabled();
			let dataCellName = dataCell.getQueryDataCellReference();
			let formattedText = dataCell.getFormattedValue();
			let scaleFormatTuple = this.getFormattedValue(dataCell, rowTupleIndex, columnTupleIndex);
			let value;
			let valueType = dataCell.getValueType();
			if (dataCell.getValueException() !== oFF.ValueException.UNDEFINED && dataCell.getValueException() !== oFF.ValueException.NULL_VALUE)
			{
				if (valueType.isNumber())
				{
					value = dataCell.getDecFloat();
				}
				else if (valueType === oFF.XValueType.DATE)
				{
					value = dataCell.getDate();
				}
				else if (valueType === oFF.XValueType.TIME)
				{
					value = dataCell.getTime();
				}
				else if (valueType === oFF.XValueType.DATE_TIME)
				{
					value = dataCell.getDateTime();
				}
				else
				{
					value = oFF.XStringValue.create(dataCell.getStringRepresentation());
				}
			}
			else
			{
				value = oFF.XStringValue.create("");
			}
			if (oFF.isNull(value))
			{
				value = oFF.XStringValue.create(null);
			}
			let valueException = dataCell.getValueException();
			let documentId = dataCell.getDocumentId();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(documentId))
			{
				documentIds.add(documentId);
			}
			let maxAlertLevel = dataCell.getMaxAlertLevel();
			let alertLevelName = dataCell.getMaxAlertLevelName();
			let structureMembers = this.extractStructureMembers(columnTupleIndex, rowTupleIndex);
			let tags = this.getTags(dataCell.getQueryModel(), structureMembers);
			let cell = oFF.RscCellValueReference.create(value, formattedText, scaleFormatTuple.getFormattedValueSimple(), scaleFormatTuple.getFormattedValue(), scaleFormatTuple.getFormattedValueFull(), scaleFormatTuple.getFormatPatternSimple(), scaleFormatTuple.getFormatPattern(), scaleFormatTuple.getFormatPatternFull(), scaleFormatTuple.getDecimalSeparator(), scaleFormatTuple.getDecimalGroupSeparator(), dataCell.getScalingFactor(), dataCell.getCurrencyUnit(), dataCell.getComplexUnit(), dataCell.getValueType(), valueException, tags, alertLevelName, maxAlertLevel, documentId, dataEntryEnabled, dataCellName);
			let formatterSettings = scaleFormatTuple.getFormatterSettings();
			cell.setScalingText(this.getFormattedScale(dataCell, structureMembers, formatterSettings));
			cell.setUnitInformation(this.getUnitInformation(dataCell, structureMembers, formatterSettings));
			if (oFF.notNull(formatterSettings))
			{
				cell.setDecimalPlaces(formatterSettings.getRightPad());
				cell.setSignPresentation(formatterSettings.getSignPresentation());
			}
			this.addCelValueAt(cellRow, columnTupleIndex, cell);
		}
	}
	this.retrieveColumnsTotalCount(cursorResultSet);
	this.retrieveRowsTotalCount(cursorResultSet);
};
oFF.RscGridContainer.prototype.fillEmptyTable = function(queryModel)
{
	this.m_overwriteTexts = oFF.XHashMapByString.create();
	let overwriteTexts = queryModel.getVisualizationManager().getApplicationSettings().getOverwriteTexts();
	let overwriteTextKeys = overwriteTexts.getKeysAsIterator();
	while (overwriteTextKeys.hasNext())
	{
		let key = overwriteTextKeys.next();
		this.m_overwriteTexts.put(key, overwriteTexts.getByKey(key));
	}
	this.m_rowsAxis = oFF.RscAxisReference.createForEmptyResultSet(this, queryModel.getRowsAxis(), queryModel, this.m_overwriteTexts);
	this.m_columnsAxis = oFF.RscAxisReference.createForEmptyResultSet(this, queryModel.getColumnsAxis(), queryModel, this.m_overwriteTexts);
	this.m_filled = true;
};
oFF.RscGridContainer.prototype.fillFromResultSetContainer = function(resultSetContainer, documentIds)
{
	let applicationSettings = resultSetContainer.getQueryModel().getVisualizationManager().getApplicationSettings();
	this.m_emptyCurrencyPair = oFF.XPairOfString.create("", "");
	this.initializeUserProfileSettings();
	let offsetRows = resultSetContainer.getOffsetRows();
	let offsetColumns = resultSetContainer.getOffsetColumns();
	let hasData = true;
	let emptyResultToRender = resultSetContainer.hasErrors() || resultSetContainer.getSyncState().isNotInSync();
	let result = null;
	if (oFF.isNull(this.m_rowsAxis) || oFF.isNull(this.m_columnsAxis) || oFF.isNull(this.m_cellValues) || this.needsStartOver(resultSetContainer) || emptyResultToRender)
	{
		this.clearInternal();
		this.m_cellValues = oFF.XList.create();
		this.m_overwriteTexts = oFF.XHashMapByString.create();
		this.m_derivePercentageFromShift = applicationSettings.isDerivePercentageFromShift();
		let overwriteTexts = applicationSettings.getOverwriteTexts();
		let overwriteTextKeys = overwriteTexts.getKeysAsIterator();
		while (overwriteTextKeys.hasNext())
		{
			let key = overwriteTextKeys.next();
			this.m_overwriteTexts.put(key, overwriteTexts.getByKey(key));
		}
		hasData = !emptyResultToRender && this.preFill(resultSetContainer.getCursorResultSet());
	}
	if (hasData)
	{
		let cursorResultSet = resultSetContainer.getCursorResultSet();
		let lastRow = offsetRows + oFF.XMath.max(cursorResultSet.getDataRows(), cursorResultSet.getCursorRowsAxis().getTuplesCount()) - 1;
		let lastColumn = offsetColumns + oFF.XMath.max(cursorResultSet.getDataColumns(), cursorResultSet.getCursorColumnsAxis().getTuplesCount()) - 1;
		let lowerRow = this.getIndexOfFirstUndefinedRowAfter(offsetRows);
		let upperRow = this.getIndexOfLastUndefinedRowBefore(lastRow);
		let lowerColumn = this.getIndexOfFirstUndefinedColumnAfter(offsetColumns);
		let upperColumn = this.getIndexOfLastUndefinedColumnBefore(lastColumn);
		if (lowerRow <= upperRow)
		{
			this.prepareDataRows(cursorResultSet, lowerRow, upperRow);
		}
		if (lowerColumn <= upperColumn)
		{
			this.prepareDataColumns(cursorResultSet, lowerColumn, upperColumn);
		}
		this.fillDataCells(cursorResultSet, offsetRows, offsetColumns, documentIds);
		result = oFF.RscGridTileCarrier.create(offsetRows, lastRow, offsetColumns, lastColumn);
	}
	else
	{
		result = oFF.RscGridTileCarrier.create(0, -2, 0, -2);
		this.fillEmptyTable(resultSetContainer.getQueryModel());
	}
	this.m_filled = true;
	return result;
};
oFF.RscGridContainer.prototype.getApplication = function()
{
	return this.getQueryModel().getApplication();
};
oFF.RscGridContainer.prototype.getCellValueReference = function(column, row)
{
	let cells = oFF.notNull(this.m_cellValues) && row > -1 && row < this.m_cellValues.size() ? this.m_cellValues.get(row) : null;
	return oFF.notNull(cells) && column > -1 && column < cells.size() ? cells.get(column) : null;
};
oFF.RscGridContainer.prototype.getCellValueReferenceStrict = function(column, row)
{
	let maxRow = oFF.XCollectionUtils.size(this.m_cellValues);
	oFF.XBooleanUtils.checkFalse(row < 0 || row >= maxRow, oFF.XStringUtils.concatenate3("Row index is invalid, valid indices are [0, ", oFF.XIntegerValue.create(maxRow - 1).toString(), "]"));
	let cells = row > -1 && row < this.m_cellValues.size() ? this.m_cellValues.get(row) : null;
	let maxCol = oFF.XCollectionUtils.size(cells);
	oFF.XBooleanUtils.checkFalse(column < 0 || column >= maxCol, oFF.XStringUtils.concatenate3("Column index is invalid, valid indices are [0, ", oFF.XIntegerValue.create(maxCol - 1).toString(), "]"));
	return column > -1 && column < cells.size() ? cells.get(column) : null;
};
oFF.RscGridContainer.prototype.getCollector = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_gridCollector);
};
oFF.RscGridContainer.prototype.getColumnTupleAt = function(tupleIndex)
{
	return this.m_columnsAxis.getTupleAt(tupleIndex);
};
oFF.RscGridContainer.prototype.getColumnsAxis = function()
{
	return oFF.isNull(this.m_columnsAxis) ? null : this.m_columnsAxis;
};
oFF.RscGridContainer.prototype.getColumnsLoadedCount = function()
{
	return oFF.isNull(this.m_columnsAxis) ? 0 : this.m_columnsAxis.getTuplesLoadedCount();
};
oFF.RscGridContainer.prototype.getDataColumnsTotalCount = function()
{
	return oFF.isNull(this.m_columnsAxis) ? 0 : this.m_columnsAxis.getTuplesTotalCount();
};
oFF.RscGridContainer.prototype.getDataRowsTotalCount = function()
{
	return oFF.isNull(this.m_rowsAxis) ? 0 : this.m_rowsAxis.getTuplesTotalCount();
};
oFF.RscGridContainer.prototype.getFormattedScale = function(dataCell, structureMembers, formatterSettings)
{
	let result = "";
	let valueException = dataCell.getValueException();
	if (valueException === oFF.ValueException.NORMAL || valueException === oFF.ValueException.ZERO)
	{
		let valueType = dataCell.getValueType();
		if (this.shouldDerivePercentageFromShift(dataCell, structureMembers))
		{
			result = oFF.RscCollectorConstants.PERCENT;
		}
		else if (valueType.isTypeOf(oFF.XValueType.DOUBLE) && oFF.notNull(formatterSettings))
		{
			result = oFF.XNumberFormatter.getScaleText(formatterSettings.getScaleFactor(), formatterSettings.getScaleFormat(), this.m_scaleTextsMap).getName();
		}
		else if (valueType.isTypeOf(oFF.XValueType.PERCENT))
		{
			result = oFF.RscCollectorConstants.PERCENT;
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getFormattedValue = function(dataCell, rowTupleIndex, columnTupleIndex)
{
	let rowTuple = this.m_rowsAxis.getTupleAt(rowTupleIndex);
	let columnTuple = this.m_columnsAxis.getTupleAt(columnTupleIndex);
	let skipUnit = this.shouldSkipUnit(rowTuple) || this.shouldSkipUnit(columnTuple);
	let skipScaling = this.shouldSkipScaling(rowTuple) || this.shouldSkipScaling(columnTuple);
	let skipPercent = this.shouldSkipPercent(rowTuple) || this.shouldSkipPercent(columnTuple);
	let formattedValueSimple = dataCell.getFormattedValue();
	let valueType = dataCell.getValueType();
	let isNumeric = oFF.isNull(valueType) || valueType.isNumber() || valueType.isTypeOf(oFF.XValueType.NUMBER);
	let userProfile = this.getUserProfile();
	let decimalGroupSeparator = oFF.isNull(userProfile) ? null : userProfile.getDecimalGroupingSeparator();
	let decimalSeparator = oFF.isNull(userProfile) ? null : userProfile.getDecimalSeparator();
	let formatStringSimple = oFF.XNumberFormatter.standardizeFormatString(dataCell.getDecimalPlaces(), isNumeric);
	if (oFF.XStringUtils.isNullOrEmpty(formatStringSimple) && !isNumeric)
	{
		formatStringSimple = oFF.RscFormattingInfoHelper.getDefaultFormatForValueType(valueType, userProfile);
		if (oFF.XStringUtils.isNullOrEmpty(formatStringSimple))
		{
			formatStringSimple = dataCell.getFormatString();
		}
	}
	let formattedValue = formattedValueSimple;
	let formattedValueFull = formattedValue;
	let formatString = formatStringSimple;
	let formatStringFull = formatString;
	let valueException = dataCell.getValueException();
	let currencyUnit = dataCell.getCurrencyUnit();
	let currencyUnitPrefix = "";
	let currencyUnitSuffix = "";
	if (currencyUnit.hasPrefix())
	{
		currencyUnitPrefix = oFF.XStringUtils.concatenate2(currencyUnit.getPrefix(), " ");
	}
	if (currencyUnit.hasSuffix())
	{
		currencyUnitSuffix = oFF.XStringUtils.concatenate2(" ", currencyUnit.getSuffix());
	}
	let sp;
	let unitFormattingApplied = false;
	let structureMembers = this.extractStructureMembers(columnTupleIndex, rowTupleIndex);
	let formatterSettings = this.createFormatterSettings(dataCell, structureMembers);
	if (oFF.notNull(formattedValue) && (valueException === oFF.ValueException.NORMAL || valueException === oFF.ValueException.ZERO || valueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS && formatterSettings.isShowMixedUnitValues()))
	{
		let emptyCurrency = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
		if (this.shouldDerivePercentageFromShift(dataCell, structureMembers))
		{
			let scaleFormatTuplePercent = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, oFF.XPairOfString.create("", ""), this.m_scaleTextsMap, formatString, true, true);
			formattedValueSimple = scaleFormatTuplePercent.getFirstString();
			formattedValueFull = oFF.XStringUtils.concatenate3(formattedValueSimple, " ", oFF.RscCollectorConstants.PERCENT);
			formattedValue = skipScaling ? formattedValueSimple : formattedValueFull;
			formatString = scaleFormatTuplePercent.getSecondString();
			formatStringFull = formatString;
			unitFormattingApplied = true;
			decimalGroupSeparator = formatterSettings.getDecimalGroupingSeparator();
			decimalSeparator = formatterSettings.getDecimalSeparator();
			sp = formatterSettings.getSignPresentation();
			formatterSettings.setSignPresentation(null);
			scaleFormatTuplePercent = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, oFF.XPairOfString.create("", ""), this.m_scaleTextsMap, formatString, true, false);
			formattedValueSimple = scaleFormatTuplePercent.getFirstString();
			formatStringSimple = scaleFormatTuplePercent.getSecondString();
			formatterSettings.setSignPresentation(sp);
		}
		else if (valueType.isTypeOf(oFF.XValueType.DOUBLE))
		{
			decimalGroupSeparator = formatterSettings.getDecimalGroupingSeparator();
			decimalSeparator = formatterSettings.getDecimalSeparator();
			let currencyUnitPair = oFF.RscMappingUtils.getCurrencyUnitPair(dataCell.getComplexUnit(), skipUnit, formatterSettings.getCurrencyFormatSettings().getCurrencyPresentation());
			let scaleFormatTuple;
			let currency;
			if (oFF.notNull(currencyUnitPair))
			{
				scaleFormatTuple = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, currencyUnitPair, this.m_scaleTextsMap, formatString, skipScaling, false);
				formattedValue = scaleFormatTuple.getFirstString();
				formatString = scaleFormatTuple.getSecondString();
			}
			else
			{
				currency = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
				scaleFormatTuple = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, currency, this.m_scaleTextsMap, formatString, skipScaling, false);
				formattedValue = scaleFormatTuple.getFirstString();
				formatString = scaleFormatTuple.getSecondString();
			}
			currencyUnitPair = oFF.RscMappingUtils.getCurrencyUnitPair(dataCell.getComplexUnit(), false, formatterSettings.getCurrencyFormatSettings().getCurrencyPresentation());
			if (oFF.notNull(currencyUnitPair))
			{
				scaleFormatTuple = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, currencyUnitPair, this.m_scaleTextsMap, formatString, false, false);
				formattedValueFull = scaleFormatTuple.getFirstString();
				formatStringFull = scaleFormatTuple.getSecondString();
			}
			else
			{
				currency = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
				scaleFormatTuple = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, currency, this.m_scaleTextsMap, formatString, false, false);
				formattedValueFull = scaleFormatTuple.getFirstString();
				formatStringFull = scaleFormatTuple.getSecondString();
			}
			sp = formatterSettings.getSignPresentation();
			formatterSettings.setSignPresentation(null);
			currencyUnitPair = oFF.RscMappingUtils.getCurrencyUnitPair(dataCell.getComplexUnit(), true, formatterSettings.getCurrencyFormatSettings().getCurrencyPresentation());
			formatterSettings.setSignPresentation(sp);
			if (oFF.notNull(currencyUnitPair))
			{
				scaleFormatTuple = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, currencyUnitPair, this.m_scaleTextsMap, formatString, true, false);
				formattedValueSimple = scaleFormatTuple.getFirstString();
				formatStringSimple = scaleFormatTuple.getSecondString();
			}
			else
			{
				currency = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
				scaleFormatTuple = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, currency, this.m_scaleTextsMap, formatString, true, false);
				formattedValueSimple = scaleFormatTuple.getFirstString();
				formatStringSimple = scaleFormatTuple.getSecondString();
			}
			unitFormattingApplied = true;
		}
		else if (valueType.isTypeOf(oFF.XValueType.PERCENT))
		{
			formatterSettings.setScaleFactor(oFF.XIntegerValue.create(-2));
			decimalGroupSeparator = formatterSettings.getDecimalGroupingSeparator();
			decimalSeparator = formatterSettings.getDecimalSeparator();
			let scaleFormatTuplePercentBW = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, emptyCurrency, this.m_scaleTextsMap, formatString, true, true);
			formattedValueSimple = scaleFormatTuplePercentBW.getFirstString();
			formattedValueFull = oFF.XStringUtils.concatenate3(formattedValueSimple, " ", oFF.RscCollectorConstants.PERCENT);
			formattedValue = skipPercent ? formattedValueSimple : formattedValueFull;
			formatString = scaleFormatTuplePercentBW.getSecondString();
			formatStringFull = formatString;
			unitFormattingApplied = true;
			sp = formatterSettings.getSignPresentation();
			formatterSettings.setSignPresentation(null);
			scaleFormatTuplePercentBW = oFF.XNumberFormatter.formatDecFloatToStringUsingSettingsWithCurrency(dataCell.getDecFloat(), formatterSettings, oFF.XPairOfString.create("", ""), this.m_scaleTextsMap, formatString, true, false);
			formattedValueSimple = scaleFormatTuplePercentBW.getFirstString();
			formatStringSimple = scaleFormatTuplePercentBW.getSecondString();
			formatterSettings.setSignPresentation(sp);
		}
		else if (valueType.isTypeOf(oFF.XValueType.DATE) && oFF.notNull(this.m_dateFormatter))
		{
			let date = dataCell.getDate();
			formattedValueSimple = oFF.isNull(date) ? formattedValueSimple : this.m_dateFormatter.formatDate(date);
		}
		else if (valueType.isTypeOf(oFF.XValueType.DATE_TIME) && oFF.notNull(this.m_dateTimeFormatter))
		{
			let dateTime = dataCell.getDateTime();
			formattedValueSimple = oFF.isNull(dateTime) ? formattedValueSimple : this.m_dateTimeFormatter.formatDateTime(dateTime);
		}
		if (!unitFormattingApplied)
		{
			formattedValue = oFF.XStringUtils.concatenate2(currencyUnitPrefix, formattedValueSimple);
			formattedValue = oFF.XStringUtils.concatenate2(formattedValue, currencyUnitSuffix);
			formattedValueFull = formattedValue;
		}
		if (valueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS && !oFF.XStringUtils.containsString(formattedValue, "*", true))
		{
			formattedValue = oFF.XStringUtils.concatenate2(formattedValue, " *");
		}
	}
	else
	{
		formatterSettings = null;
		if (valueException === oFF.ValueException.UNDEFINED)
		{
			formattedValue = "-";
			formatString = "";
			formattedValueSimple = formattedValue;
			formattedValueFull = formattedValue;
			formatStringSimple = formatString;
			formatStringFull = formatString;
		}
		else if (valueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS || valueException === oFF.ValueException.UNDEFINED_NOP)
		{
			formattedValue = "*";
			formatString = "\\*;\\*";
			formattedValueSimple = formattedValue;
			formattedValueFull = formattedValue;
			formatStringSimple = formatString;
			formatStringFull = formatString;
		}
		else if (valueException !== oFF.ValueException.NORMAL && valueException !== oFF.ValueException.ZERO)
		{
			formattedValue = "";
			formatString = "";
			formattedValueSimple = formattedValue;
			formattedValueFull = formattedValue;
			formatStringSimple = formatString;
			formatStringFull = formatString;
		}
	}
	if (oFF.isNull(formattedValue))
	{
		formattedValue = " ";
		formatString = "";
		formattedValueSimple = formattedValue;
		formattedValueFull = formattedValue;
		formatStringSimple = formatString;
		formatStringFull = formatString;
	}
	return oFF.RscFormattingInfoHelper.create(formattedValueSimple, formattedValue, formattedValueFull, formatStringSimple, formatString, formatStringFull, formatterSettings, decimalSeparator, decimalGroupSeparator);
};
oFF.RscGridContainer.prototype.getIndexOfFirstIncompleteTileColumnAfter = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	let result = columnIndexStart;
	if (oFF.notNull(this.m_columnsAxis))
	{
		let columnList = this.m_columnsAxis.getTuplesOnAxis();
		let columnSize = columnList.size();
		if (this.checkRowsRange(rowIndexStart, rowIndexEnd))
		{
			while (result < columnSize && this.checkColumnComplete(result, rowIndexStart, rowIndexEnd))
			{
				result++;
			}
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getIndexOfFirstIncompleteTileRowAfter = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	let result = rowIndexStart;
	if (oFF.notNull(this.m_rowsAxis))
	{
		let rowList = this.m_rowsAxis.getTuplesOnAxis();
		let rowsSize = rowList.size();
		if (this.checkColumnsRange(columnIndexStart, columnIndexEnd))
		{
			while (result < rowsSize && this.checkRowComplete(result, columnIndexStart, columnIndexEnd))
			{
				result++;
			}
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getIndexOfFirstUndefinedColumnAfter = function(columnIndex)
{
	let result = columnIndex;
	if (oFF.notNull(this.m_columnsAxis))
	{
		let columnList = this.m_columnsAxis.getTuplesOnAxis();
		let columnSize = columnList.size();
		while (result < columnSize && columnList.get(result) !== null)
		{
			result++;
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getIndexOfFirstUndefinedRowAfter = function(rowIndex)
{
	let result = rowIndex;
	if (oFF.notNull(this.m_rowsAxis))
	{
		let rowList = this.m_rowsAxis.getTuplesOnAxis();
		let rowsSize = rowList.size();
		while (result < rowsSize && rowList.get(result) !== null)
		{
			result++;
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getIndexOfLastIncompleteTileColumnBefore = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	let result = columnIndexEnd;
	if (oFF.notNull(this.m_columnsAxis))
	{
		let columnList = this.m_columnsAxis.getTuplesOnAxis();
		let columnsSize = columnList.size();
		if (this.checkRowsRange(rowIndexStart, rowIndexEnd))
		{
			while (result < columnsSize && result > -1 && this.checkColumnComplete(result, rowIndexStart, rowIndexEnd))
			{
				result--;
			}
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getIndexOfLastIncompleteTileRowBefore = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	let result = rowIndexEnd;
	if (oFF.notNull(this.m_rowsAxis))
	{
		let rowList = this.m_rowsAxis.getTuplesOnAxis();
		let rowsSize = rowList.size();
		if (this.checkColumnsRange(columnIndexStart, columnIndexEnd))
		{
			while (result < rowsSize && result > -1 && this.checkRowComplete(result, columnIndexStart, columnIndexEnd))
			{
				result--;
			}
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getIndexOfLastUndefinedColumnBefore = function(columnIndex)
{
	let result = columnIndex;
	if (oFF.notNull(this.m_columnsAxis))
	{
		let columnList = this.m_columnsAxis.getTuplesOnAxis();
		let columnsSize = columnList.size();
		while (result < columnsSize && result > -1 && columnList.get(result) !== null)
		{
			result--;
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getIndexOfLastUndefinedRowBefore = function(rowIndex)
{
	let result = rowIndex;
	if (oFF.notNull(this.m_rowsAxis))
	{
		let rowList = this.m_rowsAxis.getTuplesOnAxis();
		let rowsSize = rowList.size();
		while (result < rowsSize && result > -1 && rowList.get(result) !== null)
		{
			result--;
		}
	}
	return result;
};
oFF.RscGridContainer.prototype.getOrCreateCellRow = function(index)
{
	while (this.m_cellValues.size() < index)
	{
		this.m_cellValues.add(null);
	}
	if (index === this.m_cellValues.size())
	{
		this.m_cellValues.add(oFF.XList.create());
	}
	else if (this.m_cellValues.get(index) === null)
	{
		this.m_cellValues.set(index, oFF.XList.create());
	}
	return this.m_cellValues.get(index);
};
oFF.RscGridContainer.prototype.getProcess = function()
{
	return this.getQueryModel().getProcess();
};
oFF.RscGridContainer.prototype.getQueryModel = function()
{
	return this.getVisualizationManager().getQueryModel();
};
oFF.RscGridContainer.prototype.getRowTupleAt = function(tupleIndex)
{
	return oFF.isNull(this.m_rowsAxis) ? null : this.m_rowsAxis.getTupleAt(tupleIndex);
};
oFF.RscGridContainer.prototype.getRowsAxis = function()
{
	return this.m_rowsAxis;
};
oFF.RscGridContainer.prototype.getRowsLoadedCount = function()
{
	return oFF.isNull(this.m_rowsAxis) ? 0 : this.m_rowsAxis.getTuplesLoadedCount();
};
oFF.RscGridContainer.prototype.getSession = function()
{
	return this.getQueryModel().getSession();
};
oFF.RscGridContainer.prototype.getSortDirections = function()
{
	return this.m_sortDirections;
};
oFF.RscGridContainer.prototype.getTags = function(queryModel, structureMembers)
{
	let tags = oFF.XList.create();
	oFF.XCollectionUtils.forEach(structureMembers, (structureMember) => {
		tags.addAll(structureMember.getTagging().getKeysAsReadOnlyList());
	});
	if (oFF.XCollectionUtils.hasElements(structureMembers))
	{
		let queryDataCells = queryModel.getQueryDataCells();
		let qdcs = oFF.XStream.of(queryDataCells).filter((qdc) => {
			return oFF.XStream.of(structureMembers).allMatch((sm) => {
				return qdc.hasMemberReference(sm);
			});
		}).collect(oFF.XStreamCollector.toList());
		if (oFF.XCollectionUtils.size(qdcs) === 1)
		{
			oFF.XCollectionUtils.getOptionalAtIndex(qdcs, 0).ifPresent((queryDataCell) => {
				tags.addAll(queryDataCell.getTagging().getKeysAsReadOnlyList());
			});
		}
	}
	return tags;
};
oFF.RscGridContainer.prototype.getUnitInformation = function(dataCell, structureMembers, formatterSettings)
{
	let valueException = dataCell.getValueException();
	let currencyUnit = dataCell.getCurrencyUnit();
	let currencyUnitPrefix = "";
	let currencyUnitSuffix = "";
	if (currencyUnit.hasPrefix())
	{
		currencyUnitPrefix = oFF.XStringUtils.concatenate2(currencyUnit.getPrefix(), " ");
	}
	if (currencyUnit.hasSuffix())
	{
		currencyUnitSuffix = oFF.XStringUtils.concatenate2(" ", currencyUnit.getSuffix());
	}
	let currencyInfo = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
	if (valueException === oFF.ValueException.NORMAL || valueException === oFF.ValueException.ZERO)
	{
		let valueType = dataCell.getValueType();
		if (oFF.notNull(formatterSettings) && valueType.isTypeOf(oFF.XValueType.DOUBLE) && !this.shouldDerivePercentageFromShift(dataCell, structureMembers))
		{
			currencyInfo = oFF.RscMappingUtils.getCurrencyUnitPair(dataCell.getComplexUnit(), false, formatterSettings.getCurrencyFormatSettings().getCurrencyPresentation());
			if (oFF.isNull(currencyInfo))
			{
				currencyInfo = oFF.XPairOfString.create(currencyUnitPrefix, currencyUnitSuffix);
			}
		}
	}
	return currencyInfo;
};
oFF.RscGridContainer.prototype.getUserProfile = function()
{
	let queryModel = this.getQueryModel();
	return oFF.isNull(queryModel) ? null : queryModel.getProcess().getUserProfile();
};
oFF.RscGridContainer.prototype.getVisualizationManager = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_visualizationManager);
};
oFF.RscGridContainer.prototype.initializeUserProfileSettings = function()
{
	let userProfile = this.getUserProfile();
	if (oFF.notNull(userProfile))
	{
		let dateFormat = null;
		let timeFormat = null;
		if (userProfile.getDateFormatting() !== null)
		{
			dateFormat = userProfile.getDateFormatting();
			try
			{
				this.m_dateFormatter = oFF.XDateTimeFormatter.create(dateFormat);
			}
			catch (t1)
			{
				oFF.XLogger.println(oFF.XStringUtils.concatenate2("Invalid date format ", dateFormat));
			}
		}
		if (userProfile.getTimeFormatting() !== null)
		{
			timeFormat = userProfile.getTimeFormatting();
		}
		if (oFF.notNull(dateFormat) || oFF.notNull(timeFormat))
		{
			let dateTimeFormat = dateFormat;
			if (oFF.isNull(dateFormat))
			{
				dateTimeFormat = timeFormat;
			}
			else if (oFF.notNull(timeFormat))
			{
				dateTimeFormat = oFF.XStringUtils.concatenate3(dateFormat, " ", timeFormat);
			}
			try
			{
				this.m_dateTimeFormatter = oFF.XDateTimeFormatter.create(dateTimeFormat);
			}
			catch (t3)
			{
				oFF.XLogger.println(oFF.XStringUtils.concatenate2("Invalid date or time format ", dateTimeFormat));
			}
		}
	}
};
oFF.RscGridContainer.prototype.invalidate = function()
{
	this.clearInternal();
};
oFF.RscGridContainer.prototype.isAccurate = function(currentTupleCount, offsetTuples, maxTuples, newTotalCount, oldTotalCount, wasAccurate)
{
	return newTotalCount > -1 && ((this.getQueryModel().getModelCapabilities().supportsUndefinedTupleCountTotals() && newTotalCount !== offsetTuples + maxTuples + 1) || !this.getQueryModel().getSystemType().isTypeOf(oFF.SystemType.HANA) || (oldTotalCount >= newTotalCount || oldTotalCount + maxTuples < newTotalCount) && wasAccurate) || currentTupleCount < maxTuples || maxTuples === -1;
};
oFF.RscGridContainer.prototype.isComplete = function()
{
	return oFF.notNull(this.m_rowsAxis) && oFF.notNull(this.m_columnsAxis) && this.m_rowsAxis.isComplete() && this.m_columnsAxis.isComplete() && this.areCellValuesComplete();
};
oFF.RscGridContainer.prototype.isFallbackFieldSort = function(fieldSelField)
{
	let result = false;
	if (fieldSelField.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_KEY))
	{
		let dimension = fieldSelField.getDimension();
		result = oFF.XStream.of(fieldSelField.getQueryModel().getSortingManager().getSortingOperations()).filter((so) => {
			return so.getSortingType() === oFF.SortType.FIELD && so.getField().getDimension() === dimension;
		}).map((sor) => {
			return sor.getField().getPresentationType();
		}).anyMatch((pt) => {
			return !pt.isTypeOf(oFF.PresentationType.ABSTRACT_KEY);
		});
	}
	return result;
};
oFF.RscGridContainer.prototype.isFilled = function()
{
	return this.m_filled;
};
oFF.RscGridContainer.prototype.isOriginInitialized = function()
{
	return oFF.notNull(this.m_rowsAxis) && oFF.notNull(this.m_columnsAxis) && this.getCellValueReference(0, 0) !== null;
};
oFF.RscGridContainer.prototype.isPlanningDataEntryEnabled = function()
{
	return this.getCollector().isPlanningDataEntryEnabled();
};
oFF.RscGridContainer.prototype.isTileComplete = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	let effectiveRowIndexEnd = oFF.XMath.min(rowIndexEnd, this.getDataRowsTotalCount() - 1);
	let effectiveColumnIndexEnd = oFF.XMath.min(columnIndexEnd, this.getDataColumnsTotalCount() - 1);
	let complete = this.checkRowsRange(rowIndexStart, effectiveRowIndexEnd) && this.checkColumnsRange(columnIndexStart, effectiveColumnIndexEnd);
	if (complete)
	{
		for (let i = columnIndexStart; i <= effectiveColumnIndexEnd; i++)
		{
			if (!this.checkColumnComplete(i, rowIndexStart, effectiveRowIndexEnd))
			{
				complete = false;
				break;
			}
		}
	}
	return complete;
};
oFF.RscGridContainer.prototype.needsStartOver = function(resultSetContainer)
{
	return this.getCollector().needsStartOver(resultSetContainer);
};
oFF.RscGridContainer.prototype.preFill = function(cursorResultSet)
{
	this.m_sortDirections = oFF.XHashMapByString.create();
	this.analyzeSortingOperations(cursorResultSet.getQueryModel());
	let columnDimensions = cursorResultSet.getCursorColumnsAxis().getRsDimensions();
	let rowDimensions = cursorResultSet.getCursorRowsAxis().getRsDimensions();
	this.retrieveColumnsTotalCount(cursorResultSet);
	this.retrieveRowsTotalCount(cursorResultSet);
	let columnDimensionCount = columnDimensions.size();
	let rowDimensionCount = rowDimensions.size();
	let rowTuplesCountLocal = oFF.XMath.max(cursorResultSet.getDataRows(), cursorResultSet.getCursorRowsAxis().getTuplesCount());
	let queryModel = cursorResultSet.getQueryModel();
	try
	{
		let planningModel = queryModel.getQueryManager().getPlanningModel();
		this.m_activeVersions = oFF.isNull(planningModel) ? null : planningModel.getActiveVersions();
	}
	catch (t)
	{
		oFF.XLogger.getInstance().logExt(null, oFF.Severity.DEBUG, 0, "Error creating planning model");
	}
	this.m_lastRowToFetch = oFF.XMath.max(1, rowTuplesCountLocal);
	this.m_rowsAxis = oFF.RscAxisReference.createForValidResultSet(this, cursorResultSet.getCursorRowsAxis(), queryModel);
	this.m_columnsAxis = oFF.RscAxisReference.createForValidResultSet(this, cursorResultSet.getCursorColumnsAxis(), queryModel);
	let columnTuplesCount = oFF.XMath.max(cursorResultSet.getDataColumns(), cursorResultSet.getCursorColumnsAxis().getTuplesCount());
	let hasData = columnTuplesCount > 0 && columnDimensionCount > 0 || rowTuplesCountLocal > 0 && rowDimensionCount > 0 || columnTuplesCount > 0 && rowTuplesCountLocal > 0;
	this.createScaleTextsMap();
	if (hasData)
	{
		this.prepareDataColumns(cursorResultSet, 0, -1);
	}
	return hasData;
};
oFF.RscGridContainer.prototype.preFillAxis = function(cursorAxis, rscAxis, offset, minTuples)
{
	cursorAxis.setTupleCursorBeforeStart();
	let axisReference = rscAxis;
	let tupleIndex = offset;
	let rscTuple;
	while (cursorAxis.hasNextTuple())
	{
		cursorAxis.nextTuple();
		rscTuple = oFF.RscTupleReference.createForRsAxis(rscAxis, tupleIndex, cursorAxis, this.m_overwriteTexts, this.m_scaleTextsMap, this.getUserProfile(), this.m_emptyCurrencyPair, this.m_activeVersions, this.m_derivePercentageFromShift);
		axisReference.insertTuple(tupleIndex, rscTuple);
		tupleIndex++;
	}
	oFF.RscTupleReference.compareRepetition(axisReference.getTupleAt(tupleIndex - 1), axisReference.getTupleAt(tupleIndex));
	while (tupleIndex < minTuples + offset)
	{
		rscTuple = oFF.RscTupleReference.createForRsAxisDummy(rscAxis, tupleIndex);
		axisReference.insertTuple(tupleIndex, rscTuple);
		tupleIndex++;
	}
};
oFF.RscGridContainer.prototype.prepareDataColumns = function(cursorResultSet, lowerColumn, upperColumn)
{
	if (!this.m_totalColumnsCountAccurate)
	{
		this.retrieveColumnsTotalCount(cursorResultSet);
	}
	let newOffset = this.createDataColumns(cursorResultSet, lowerColumn, upperColumn);
	return newOffset;
};
oFF.RscGridContainer.prototype.prepareDataRows = function(cursorResultSet, lowerRow, upperRow)
{
	if (!this.m_totalRowsCountAccurate)
	{
		this.retrieveRowsTotalCount(cursorResultSet);
	}
	let newOffset = this.createDataRows(cursorResultSet, lowerRow, upperRow);
	return newOffset;
};
oFF.RscGridContainer.prototype.releaseObject = function()
{
	this.m_visualizationManager = null;
	this.m_overwriteTexts = oFF.XObjectExt.release(this.m_overwriteTexts);
	this.m_scaleTextsMap = oFF.XObjectExt.release(this.m_scaleTextsMap);
	this.clearInternal();
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscGridContainer.prototype.retrieveColumnsTotalCount = function(rs)
{
	let currentTupleCount = oFF.XMath.max(rs.getDataColumns(), rs.getCursorColumnsAxis().getTuplesCount());
	let newColumnsTotalCount = rs.getCursorColumnsAxis().getTuplesCountTotal();
	let container = rs.getResultSetContainer();
	let offsetTuples = container.getOffsetColumns();
	let maxTuples = container.getMaxColumns();
	this.m_totalColumnsCountAccurate = this.m_totalColumnsCountAccurate || this.isAccurate(currentTupleCount, offsetTuples, maxTuples, newColumnsTotalCount, this.m_columnsTotalCount, this.m_totalColumnsCountAccurate);
	if (currentTupleCount + offsetTuples < newColumnsTotalCount && maxTuples > currentTupleCount)
	{
		newColumnsTotalCount = currentTupleCount + offsetTuples;
		this.m_totalColumnsCountAccurate = true;
		if (oFF.notNull(this.m_columnsAxis))
		{
			this.m_columnsAxis.setTuplesTotalCount(this.m_columnsTotalCount);
		}
	}
	this.m_columnsTotalCount = newColumnsTotalCount;
	if (!this.m_totalColumnsCountAccurate)
	{
		let offset = 10;
		if (this.m_lastColumnToFetch > -1 && rs.getResultSetContainer().getMaxColumns() > this.m_lastColumnToFetch + 1)
		{
			offset = 0;
			this.m_totalColumnsCountAccurate = true;
		}
		this.m_columnsTotalCount = this.m_lastColumnToFetch + offset;
	}
	this.m_columnsTotalCount = oFF.XMath.max(this.m_columnsTotalCount, currentTupleCount);
};
oFF.RscGridContainer.prototype.retrieveRowsTotalCount = function(rs)
{
	let currentTupleCount = oFF.XMath.max(rs.getDataRows(), rs.getCursorRowsAxis().getTuplesCount());
	let newRowsTotalCount = rs.getCursorRowsAxis().getTuplesCountTotal();
	let container = rs.getResultSetContainer();
	let offsetTuples = container.getOffsetRows();
	let maxTuples = container.getMaxRows();
	this.m_totalRowsCountAccurate = this.m_totalRowsCountAccurate || this.isAccurate(currentTupleCount, offsetTuples, maxTuples, newRowsTotalCount, this.m_rowsTotalCount, this.m_totalRowsCountAccurate);
	if (currentTupleCount + offsetTuples < newRowsTotalCount && maxTuples > currentTupleCount)
	{
		newRowsTotalCount = currentTupleCount + offsetTuples;
		this.m_totalRowsCountAccurate = true;
		if (oFF.notNull(this.m_rowsAxis))
		{
			this.m_rowsAxis.setTuplesTotalCount(this.m_rowsTotalCount);
		}
	}
	this.m_rowsTotalCount = newRowsTotalCount;
	if (!this.m_totalRowsCountAccurate)
	{
		let offset = 10;
		if (this.m_lastRowToFetch > -1 && rs.getResultSetContainer().getMaxRows() > this.m_lastRowToFetch + 1)
		{
			offset = 0;
			this.m_totalRowsCountAccurate = true;
		}
		this.m_rowsTotalCount = this.m_lastRowToFetch + offset;
	}
	this.m_rowsTotalCount = oFF.XMath.max(this.m_rowsTotalCount, currentTupleCount);
};
oFF.RscGridContainer.prototype.setupWithVisualizationManager = function(visualizationManager, collector)
{
	this.m_visualizationManager = oFF.XWeakReferenceUtil.getWeakRef(visualizationManager);
	this.m_gridCollector = oFF.XWeakReferenceUtil.getWeakRef(collector);
	this.m_cellValues = oFF.XList.create();
};
oFF.RscGridContainer.prototype.shouldDerivePercentageFromShift = function(dataCell, structureMembers)
{
	let numericShift = dataCell.getScalingFactor();
	let structureMember1 = oFF.XCollectionUtils.hasElements(structureMembers) ? structureMembers.get(0) : null;
	let structureMember2 = oFF.XCollectionUtils.hasElements(structureMembers) && structureMembers.size() > 1 ? structureMembers.get(1) : null;
	if (!dataCell.getQueryModel().getModelCapabilities().supportsDataCells())
	{
		let lsp = oFF.QStructureMemberFormatterSettings.getLeadingScalingPower(structureMember1, structureMember2);
		if (lsp.isPresent())
		{
			numericShift = lsp.get().getInteger();
		}
	}
	return this.m_derivePercentageFromShift && dataCell.getValueType().isTypeOf(oFF.XValueType.DOUBLE) && numericShift === 2 && (dataCell.getCurrencyUnit() === null || dataCell.getCurrencyUnit().isEmpty()) && oFF.RscMappingUtils.getCurrencyUnitPair(dataCell.getComplexUnit(), false, null) === null;
};
oFF.RscGridContainer.prototype.shouldSkipPercent = function(tuple)
{
	return oFF.notNull(tuple) && tuple.getCellValueType() === oFF.XValueType.PERCENT;
};
oFF.RscGridContainer.prototype.shouldSkipScaling = function(tuple)
{
	return oFF.notNull(tuple) && tuple.getNumericShift() !== null;
};
oFF.RscGridContainer.prototype.shouldSkipUnit = function(tuple)
{
	return oFF.notNull(tuple) && (tuple.getCurrencyUnit() !== null || tuple.getComplexUnit() !== null);
};
oFF.RscGridContainer.prototype.totalColumnsCountMayBeInaccurate = function()
{
	return !this.m_totalColumnsCountAccurate;
};
oFF.RscGridContainer.prototype.totalRowsCountMayBeInaccurate = function()
{
	return !this.m_totalRowsCountAccurate;
};

oFF.RscListContainer = function() {};
oFF.RscListContainer.prototype = new oFF.XObject();
oFF.RscListContainer.prototype._ff_c = "RscListContainer";

oFF.RscListContainer.create = function(gridContainer, primaryAxis, secondaryAxis, structureDimensions, selectionPath, memberRestrictions)
{
	let instance = new oFF.RscListContainer();
	instance.setupListContainer(gridContainer, primaryAxis, secondaryAxis, structureDimensions, selectionPath, memberRestrictions);
	return instance;
};
oFF.RscListContainer.createWithMembers = function(gridContainer, primaryAxis, secondaryAxis, structureDimensions, structureDimensionsMemberMap, selectionPath, memberRestrictions)
{
	let primaryAxisD = primaryAxis.createForStructureProjection(structureDimensions, structureDimensionsMemberMap);
	let secondaryAxisD = secondaryAxis.createForStructureProjection(structureDimensions, structureDimensionsMemberMap);
	return oFF.RscListContainer.create(gridContainer, primaryAxisD, secondaryAxisD, structureDimensions, selectionPath, memberRestrictions);
};
oFF.RscListContainer.prototype.m_gridContainer = null;
oFF.RscListContainer.prototype.m_listAxis = null;
oFF.RscListContainer.prototype.getApplication = function()
{
	return this.getGridContainer().getApplication();
};
oFF.RscListContainer.prototype.getGridContainer = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_gridContainer);
};
oFF.RscListContainer.prototype.getListAxis = function()
{
	return this.m_listAxis;
};
oFF.RscListContainer.prototype.getProcess = function()
{
	return this.getGridContainer().getProcess();
};
oFF.RscListContainer.prototype.getQueryModel = function()
{
	return this.getGridContainer().getQueryModel();
};
oFF.RscListContainer.prototype.getSession = function()
{
	return this.getGridContainer().getSession();
};
oFF.RscListContainer.prototype.releaseObject = function()
{
	this.m_listAxis = oFF.XObjectExt.release(this.m_listAxis);
	oFF.XObject.prototype.releaseObject.call( this );
};
oFF.RscListContainer.prototype.setupListContainer = function(gridContainer, primaryAxis, secondaryAxis, structureDimensions, selectionPath, memberRestrictions)
{
	this.m_gridContainer = oFF.XWeakReferenceUtil.getWeakRef(gridContainer);
	this.m_listAxis = oFF.RscAxisReference.createMergedAxis(primaryAxis, secondaryAxis, gridContainer, structureDimensions, selectionPath, memberRestrictions);
};

oFF.RscMeasureReference = function() {};
oFF.RscMeasureReference.prototype = new oFF.RscGenericModelReference();
oFF.RscMeasureReference.prototype._ff_c = "RscMeasureReference";

oFF.RscMeasureReference.createForFieldValueReference = function(fieldValueReference)
{
	let instance = new oFF.RscMeasureReference();
	instance.setupInternal(fieldValueReference.getDimensionMemberName(), fieldValueReference.getText(), null);
	let dimension = fieldValueReference.getFieldReference().getDimension();
	let structureMember = dimension.getStructureMemberByAliasOrMember(fieldValueReference.getDimensionMemberName());
	instance.setupMeasureReference(structureMember, fieldValueReference.getDisplayLevel(), fieldValueReference.getDrillState());
	return instance;
};
oFF.RscMeasureReference.createForValueHelpNode = function(valueHelpNode)
{
	let instance = new oFF.RscMeasureReference();
	instance.setupInternal(valueHelpNode.getName(), valueHelpNode.getDimensionMember().getText(), null);
	instance.setupMeasureReference(valueHelpNode.getDimensionMember(), valueHelpNode.getDisplayLevel(), valueHelpNode.getDrillState());
	return instance;
};
oFF.RscMeasureReference.prototype.m_cellValueType = null;
oFF.RscMeasureReference.prototype.m_complexUnit = null;
oFF.RscMeasureReference.prototype.m_currencyUnit = null;
oFF.RscMeasureReference.prototype.m_displayLevel = 0;
oFF.RscMeasureReference.prototype.m_drillState = null;
oFF.RscMeasureReference.prototype.m_numericShift = null;
oFF.RscMeasureReference.prototype.m_parent = null;
oFF.RscMeasureReference.prototype.m_structureMember = null;
oFF.RscMeasureReference.prototype.m_uniqueDecimalPlaces = 0;
oFF.RscMeasureReference.prototype.m_uniqueScalingText = null;
oFF.RscMeasureReference.prototype.m_uniqueUnitInfo = null;
oFF.RscMeasureReference.prototype.m_uniqueUnitScaleInformation = null;
oFF.RscMeasureReference.prototype.applyUnitAndScalingInfoAndMakeVisible = function(headerComponent)
{
	if (!this.isVisible())
	{
		this.m_numericShift = headerComponent.getNumericShift();
		this.m_currencyUnit = headerComponent.getCurrencyUnit();
		this.m_complexUnit = headerComponent.getComplexUnit();
		this.m_cellValueType = headerComponent.getCellValueType();
		this.m_uniqueUnitScaleInformation = headerComponent.getUniqueUnitScaleInformation();
		this.m_uniqueUnitInfo = headerComponent.getUniqueUnitInfo();
		this.m_uniqueScalingText = headerComponent.getUniqueScalingText();
		this.m_uniqueDecimalPlaces = headerComponent.getUniqueDecimalPlaces();
		this.setVisible(true);
	}
	else
	{
		if (!oFF.XObjectExt.areEqual(this.m_numericShift, headerComponent.getNumericShift()))
		{
			this.m_numericShift = null;
		}
		if (!oFF.XObjectExt.areEqual(this.m_currencyUnit, headerComponent.getCurrencyUnit()))
		{
			this.m_currencyUnit = null;
		}
		if (!oFF.XObjectExt.areEqual(this.m_complexUnit, headerComponent.getComplexUnit()))
		{
			this.m_complexUnit = null;
		}
		if (!oFF.XObjectExt.areEqual(this.m_cellValueType, headerComponent.getCellValueType()))
		{
			this.m_cellValueType = null;
		}
		if (!oFF.XString.isEqual(this.m_uniqueUnitScaleInformation, headerComponent.getUniqueUnitScaleInformation()))
		{
			this.m_uniqueUnitScaleInformation = null;
		}
		if (!oFF.XPairOfString.arePairsEqual(this.m_uniqueUnitInfo, headerComponent.getUniqueUnitInfo()))
		{
			this.m_uniqueUnitInfo = null;
		}
		if (!oFF.XString.isEqual(this.m_uniqueScalingText, headerComponent.getUniqueScalingText()))
		{
			this.m_uniqueScalingText = null;
		}
		if (this.m_uniqueDecimalPlaces !== headerComponent.getUniqueDecimalPlaces())
		{
			this.m_uniqueDecimalPlaces = 0;
		}
	}
};
oFF.RscMeasureReference.prototype.getCellValueType = function()
{
	return this.m_cellValueType;
};
oFF.RscMeasureReference.prototype.getComplexUnit = function()
{
	return this.m_complexUnit;
};
oFF.RscMeasureReference.prototype.getCurrencyUnit = function()
{
	return this.m_currencyUnit;
};
oFF.RscMeasureReference.prototype.getDisplayLevel = function()
{
	return this.m_displayLevel;
};
oFF.RscMeasureReference.prototype.getDrillState = function()
{
	return this.m_drillState;
};
oFF.RscMeasureReference.prototype.getModelComponentType = function()
{
	return oFF.MemberType.ABSTRACT_MEMBER;
};
oFF.RscMeasureReference.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.RscMeasureReference.prototype.getParent = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_parent);
};
oFF.RscMeasureReference.prototype.getReversedScalingFactor = function()
{
	return oFF.isNull(this.m_numericShift) ? null : oFF.XIntegerValue.create(-this.m_numericShift.getInteger());
};
oFF.RscMeasureReference.prototype.getStructureMember = function()
{
	return this.m_structureMember;
};
oFF.RscMeasureReference.prototype.getUniqueDecimalPlaces = function()
{
	return this.m_uniqueDecimalPlaces;
};
oFF.RscMeasureReference.prototype.getUniqueScalingText = function()
{
	return this.m_uniqueScalingText;
};
oFF.RscMeasureReference.prototype.getUniqueUnitInfo = function()
{
	return this.m_uniqueUnitInfo;
};
oFF.RscMeasureReference.prototype.getUniqueUnitScaleInformation = function()
{
	return this.m_uniqueUnitScaleInformation;
};
oFF.RscMeasureReference.prototype.setupMeasureReference = function(structureMember, displayLevel, drillState)
{
	this.m_structureMember = structureMember;
	this.m_displayLevel = displayLevel;
	this.m_drillState = drillState;
};

oFF.PivotProxyAxis = function() {};
oFF.PivotProxyAxis.prototype = new oFF.XObject();
oFF.PivotProxyAxis.prototype._ff_c = "PivotProxyAxis";

oFF.PivotProxyAxis.prototype.m_baseTable = null;
oFF.PivotProxyAxis.prototype.m_dimensionIndex = 0;
oFF.PivotProxyAxis.prototype.m_fieldName = null;
oFF.PivotProxyAxis.prototype.m_fragment = null;
oFF.PivotProxyAxis.prototype.addPartOfHeaderSectionInfo = oFF.noSupport;
oFF.PivotProxyAxis.prototype.addScopedStyle = oFF.noSupport;
oFF.PivotProxyAxis.prototype.applyHeaderHandling = oFF.noSupport;
oFF.PivotProxyAxis.prototype.applyTableMarkups = oFF.noSupport;
oFF.PivotProxyAxis.prototype.clearScopedStyles = oFF.noSupport;
oFF.PivotProxyAxis.prototype.clearTableMarkups = oFF.noSupport;
oFF.PivotProxyAxis.prototype.getCellChartMemberName = function()
{
	return this.m_fragment.getCellChartMemberName();
};
oFF.PivotProxyAxis.prototype.getCellChartOrientation = function()
{
	return this.m_fragment.getCellChartOrientation();
};
oFF.PivotProxyAxis.prototype.getCellChartType = function()
{
	return this.m_fragment.getCellChartType();
};
oFF.PivotProxyAxis.prototype.getDataPath = function()
{
	return this.m_fragment.getDataPath();
};
oFF.PivotProxyAxis.prototype.getDataSiblingAt = oFF.noSupport;
oFF.PivotProxyAxis.prototype.getDataSize = function()
{
	return this.m_fragment.getDataSize();
};
oFF.PivotProxyAxis.prototype.getDimensionIndex = function()
{
	return this.m_dimensionIndex;
};
oFF.PivotProxyAxis.prototype.getEffectiveMemberHeaderHandling = function()
{
	return this.m_fragment.getEffectiveMemberHeaderHandling();
};
oFF.PivotProxyAxis.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.PivotProxyAxis.prototype.getFullIndex = function()
{
	return this.m_fragment.getFullIndex();
};
oFF.PivotProxyAxis.prototype.getFullSize = function()
{
	return this.m_fragment.getFullSize();
};
oFF.PivotProxyAxis.prototype.getHeaderSiblingAt = oFF.noSupport;
oFF.PivotProxyAxis.prototype.getHeadersSize = function()
{
	return this.m_fragment.getHeadersSize();
};
oFF.PivotProxyAxis.prototype.getId = function()
{
	return this.m_fragment.getId();
};
oFF.PivotProxyAxis.prototype.getMatchingOrthogonalStyles = function(tableMarkup)
{
	return this.m_fragment.getMatchingOrthogonalStyles(tableMarkup);
};
oFF.PivotProxyAxis.prototype.getMatchingRectangularStyles = function(createIfMissing)
{
	return this.m_fragment.getMatchingRectangularStyles(createIfMissing);
};
oFF.PivotProxyAxis.prototype.getMatchingStyles = function(scopedStyles)
{
	return this.m_fragment.getMatchingStyles(scopedStyles);
};
oFF.PivotProxyAxis.prototype.getMatchingTableMarkups = function(createIfMissing)
{
	return this.m_fragment.getMatchingTableMarkups(createIfMissing);
};
oFF.PivotProxyAxis.prototype.getNewTableStyleWithPriority = oFF.noSupport;
oFF.PivotProxyAxis.prototype.getParentTable = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_baseTable);
};
oFF.PivotProxyAxis.prototype.getPartOfHeaderSectionInfos = function()
{
	return this.m_fragment.getPartOfHeaderSectionInfos();
};
oFF.PivotProxyAxis.prototype.getRootDimensionIndex = oFF.noSupport;
oFF.PivotProxyAxis.prototype.getRootTupleIndex = function()
{
	return this.m_fragment.getRootTupleIndex();
};
oFF.PivotProxyAxis.prototype.getScopedStyles = function()
{
	return this.m_fragment.getScopedStyles();
};
oFF.PivotProxyAxis.prototype.getSecondaryTableStyles = function()
{
	return this.m_fragment.getSecondaryTableStyles();
};
oFF.PivotProxyAxis.prototype.getTableStyle = function()
{
	return this.m_fragment.getTableStyle();
};
oFF.PivotProxyAxis.prototype.getTotalLevel = function()
{
	return this.m_fragment.getTotalLevel();
};
oFF.PivotProxyAxis.prototype.getTupleIndex = function()
{
	return this.m_fragment.getTupleIndex();
};
oFF.PivotProxyAxis.prototype.indexTableMarkups = oFF.noSupport;
oFF.PivotProxyAxis.prototype.injectStyleToList = function(stylesList)
{
	this.m_fragment.injectStyleToList(stylesList);
};
oFF.PivotProxyAxis.prototype.isBaseElement = function()
{
	return this.m_fragment.getParent() === null;
};
oFF.PivotProxyAxis.prototype.isEffectivelyHidden = function()
{
	return this.m_fragment.isEffectivelyHidden();
};
oFF.PivotProxyAxis.prototype.isHeader = function()
{
	return this.m_fragment.isHeader();
};
oFF.PivotProxyAxis.prototype.isHeaderBand = function()
{
	return this.m_fragment.isHeaderBand();
};
oFF.PivotProxyAxis.prototype.isHideNumberForCellChart = function()
{
	return this.m_fragment.isHideNumberForCellChart();
};
oFF.PivotProxyAxis.prototype.isShowCellChart = function()
{
	return this.m_fragment.isShowCellChart();
};
oFF.PivotProxyAxis.prototype.isTotalsContext = function()
{
	return this.m_fragment.isTotalsContext();
};
oFF.PivotProxyAxis.prototype.matchesSacTableSectionInfo = oFF.noSupport;
oFF.PivotProxyAxis.prototype.remove = oFF.noSupport;
oFF.PivotProxyAxis.prototype.removePreviousChildren = oFF.noSupport;
oFF.PivotProxyAxis.prototype.removeSingle = oFF.noSupport;
oFF.PivotProxyAxis.prototype.removeSubsequentChildren = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setCellChartMemberName = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setCellChartOrientation = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setCellChartType = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setDimensionIndex = function(dimensionIndex)
{
	this.m_dimensionIndex = dimensionIndex;
};
oFF.PivotProxyAxis.prototype.setFieldName = function(fieldName)
{
	this.m_fieldName = fieldName;
};
oFF.PivotProxyAxis.prototype.setHeader = function(header)
{
	this.m_fragment.setHeader(header);
};
oFF.PivotProxyAxis.prototype.setHideNumberForCellChart = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setId = function(id)
{
	this.m_fragment.setId(id);
};
oFF.PivotProxyAxis.prototype.setShowCellChart = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setTableStyle = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setTotalLevel = function(totalLevel)
{
	this.m_fragment.setTotalLevel(totalLevel);
};
oFF.PivotProxyAxis.prototype.setTotalsContext = function(totalsContext)
{
	this.m_fragment.setTotalsContext(totalsContext);
};
oFF.PivotProxyAxis.prototype.setTupleIndex = oFF.noSupport;
oFF.PivotProxyAxis.prototype.setupWithFragmentAndTable = function(baseTable, fragment)
{
	this.m_baseTable = oFF.XWeakReferenceUtil.getWeakRef(baseTable);
	this.m_fragment = fragment;
	this.m_dimensionIndex = -1;
};

oFF.PivotTableProxy = function() {};
oFF.PivotTableProxy.prototype = new oFF.XObject();
oFF.PivotTableProxy.prototype._ff_c = "PivotTableProxy";

oFF.PivotTableProxy.DEFAULT_CELL_WIDTH = 8;
oFF.PivotTableProxy.create = function(gridContainer, engine)
{
	let instance = new oFF.PivotTableProxy();
	instance.setupExt(gridContainer, engine);
	return instance;
};
oFF.PivotTableProxy.getValueException = function(valueException)
{
	if (oFF.isNull(valueException) || valueException === oFF.ValueException.NORMAL)
	{
		return null;
	}
	if (valueException === oFF.ValueException.DIFF0)
	{
		return oFF.SacValueException.DIV0;
	}
	else
	{
		return oFF.SacValueException.get(valueException.getName());
	}
};
oFF.PivotTableProxy.getValueSign = function(dataCell)
{
	let valueException = dataCell.getValueException();
	let resultSign = null;
	let plainValue = dataCell.getPlainValue();
	let valueType = oFF.isNull(plainValue) ? null : plainValue.getValueType();
	if (valueException === oFF.ValueException.UNDEFINED || valueException === oFF.ValueException.MIXED_CURRENCIES_OR_UNITS || valueException === oFF.ValueException.UNDEFINED_NOP)
	{
		resultSign = oFF.SacValueSign.UNDEFINED;
	}
	else if (oFF.PivotTableProxy.isCellUnbooked(dataCell))
	{
		resultSign = oFF.SacValueSign.UNBOOKED;
	}
	else
	{
		if (oFF.notNull(valueType) && valueType.isNumber())
		{
			let doubleValue = oFF.XValueUtil.getDouble(plainValue, false, true);
			if (valueException === oFF.ValueException.ZERO || doubleValue === 0)
			{
				resultSign = oFF.SacValueSign.ZERO;
			}
			else if (doubleValue > 0)
			{
				resultSign = oFF.SacValueSign.POSITIVE;
			}
			else if (doubleValue < 0)
			{
				resultSign = oFF.SacValueSign.NEGATIVE;
			}
		}
		else
		{
			resultSign = oFF.SacValueSign.NORMAL;
		}
	}
	return resultSign;
};
oFF.PivotTableProxy.isCellUnbooked = function(dataCell)
{
	let valueException = dataCell.getValueException();
	return valueException !== oFF.ValueException.UNDEFINED && valueException !== oFF.ValueException.MIXED_CURRENCIES_OR_UNITS && valueException !== oFF.ValueException.UNDEFINED_NOP && valueException !== oFF.ValueException.NORMAL && valueException !== oFF.ValueException.ZERO;
};
oFF.PivotTableProxy.prototype.m_actionResolver = null;
oFF.PivotTableProxy.prototype.m_allowTextEdit = false;
oFF.PivotTableProxy.prototype.m_baseTile = null;
oFF.PivotTableProxy.prototype.m_cachedDataRowList = null;
oFF.PivotTableProxy.prototype.m_cachedHeaderRowList = null;
oFF.PivotTableProxy.prototype.m_caps = null;
oFF.PivotTableProxy.prototype.m_cellChartInfo = null;
oFF.PivotTableProxy.prototype.m_colEnd = 0;
oFF.PivotTableProxy.prototype.m_colStart = 0;
oFF.PivotTableProxy.prototype.m_colorateHeaderCells = false;
oFF.PivotTableProxy.prototype.m_columnHeaderHyperlinkLevels = null;
oFF.PivotTableProxy.prototype.m_columnsMemberHeaderHandling = null;
oFF.PivotTableProxy.prototype.m_dataCellHyperlinks = null;
oFF.PivotTableProxy.prototype.m_dataColumns = null;
oFF.PivotTableProxy.prototype.m_dataPointContextMatcher = null;
oFF.PivotTableProxy.prototype.m_dataPointStyleMap = null;
oFF.PivotTableProxy.prototype.m_dataPointStyles = null;
oFF.PivotTableProxy.prototype.m_dataRowList = null;
oFF.PivotTableProxy.prototype.m_defaultRowHeight = 0;
oFF.PivotTableProxy.prototype.m_engine = null;
oFF.PivotTableProxy.prototype.m_freezeHeaderColumns = false;
oFF.PivotTableProxy.prototype.m_freezeHeaderRows = false;
oFF.PivotTableProxy.prototype.m_freezeUpToColumn = 0;
oFF.PivotTableProxy.prototype.m_freezeUpToRow = 0;
oFF.PivotTableProxy.prototype.m_gridContainer = null;
oFF.PivotTableProxy.prototype.m_hasHierarchyActive = false;
oFF.PivotTableProxy.prototype.m_headerColor = null;
oFF.PivotTableProxy.prototype.m_headerColumns = null;
oFF.PivotTableProxy.prototype.m_headerCompactionType = null;
oFF.PivotTableProxy.prototype.m_headerComplete = false;
oFF.PivotTableProxy.prototype.m_headerRowList = null;
oFF.PivotTableProxy.prototype.m_height = 0;
oFF.PivotTableProxy.prototype.m_highlightAreas = null;
oFF.PivotTableProxy.prototype.m_localColumnsAmount = 0;
oFF.PivotTableProxy.prototype.m_localColumnsOffset = 0;
oFF.PivotTableProxy.prototype.m_localRowList = null;
oFF.PivotTableProxy.prototype.m_localRowsAmount = 0;
oFF.PivotTableProxy.prototype.m_localRowsOffset = 0;
oFF.PivotTableProxy.prototype.m_matchedExceptionInformation = null;
oFF.PivotTableProxy.prototype.m_maxCellWidth = 0;
oFF.PivotTableProxy.prototype.m_maxColumns = 0;
oFF.PivotTableProxy.prototype.m_maxRecommendedCellWidth = 0;
oFF.PivotTableProxy.prototype.m_maxRows = 0;
oFF.PivotTableProxy.prototype.m_memberSortIconsLevel = 0;
oFF.PivotTableProxy.prototype.m_minCellWidth = 0;
oFF.PivotTableProxy.prototype.m_partial = false;
oFF.PivotTableProxy.prototype.m_queryModel = null;
oFF.PivotTableProxy.prototype.m_relevantDataPointPaths = null;
oFF.PivotTableProxy.prototype.m_reversedHierarchy = false;
oFF.PivotTableProxy.prototype.m_rowEnd = 0;
oFF.PivotTableProxy.prototype.m_rowHeaderHyperlinkLevels = null;
oFF.PivotTableProxy.prototype.m_rowStart = 0;
oFF.PivotTableProxy.prototype.m_rowsMemberHeaderHandling = null;
oFF.PivotTableProxy.prototype.m_showCoordinateHeader = false;
oFF.PivotTableProxy.prototype.m_showDimensionTitles = false;
oFF.PivotTableProxy.prototype.m_showFreezeLines = false;
oFF.PivotTableProxy.prototype.m_showGrid = false;
oFF.PivotTableProxy.prototype.m_showHyperlinks = false;
oFF.PivotTableProxy.prototype.m_showSubTitle = false;
oFF.PivotTableProxy.prototype.m_showTableDetails = false;
oFF.PivotTableProxy.prototype.m_showTableTitle = false;
oFF.PivotTableProxy.prototype.m_stripeDataColumns = false;
oFF.PivotTableProxy.prototype.m_stripeDataRows = false;
oFF.PivotTableProxy.prototype.m_tableDefinition = null;
oFF.PivotTableProxy.prototype.m_tableMemberHeaderHandling = null;
oFF.PivotTableProxy.prototype.m_tileCarrier = null;
oFF.PivotTableProxy.prototype.m_tileColumnPadding = 0;
oFF.PivotTableProxy.prototype.m_tileRowPadding = 0;
oFF.PivotTableProxy.prototype.m_title = null;
oFF.PivotTableProxy.prototype.m_totalLevel0Color = null;
oFF.PivotTableProxy.prototype.m_totalLevel1Color = null;
oFF.PivotTableProxy.prototype.m_totalLevel2Color = null;
oFF.PivotTableProxy.prototype.m_totalLevel3Color = null;
oFF.PivotTableProxy.prototype.m_totalLevel4Color = null;
oFF.PivotTableProxy.prototype.m_totalLevel5Color = null;
oFF.PivotTableProxy.prototype.m_totalLevel6Color = null;
oFF.PivotTableProxy.prototype.m_totalRowDiff = 0;
oFF.PivotTableProxy.prototype.m_width = 0;
oFF.PivotTableProxy.prototype.adaptCells = function(columnIndex, mergedColums, cells, rowsOffset)
{
	let cell;
	let columnOffset;
	for (columnOffset = 0; columnOffset < mergedColums && columnIndex + columnOffset + 1 < cells.size(); columnOffset++)
	{
		cell = cells.get(columnIndex + columnOffset + 1);
		cell.setMergedColumnsInternal(-columnOffset - 1);
		cell.setMergedRowsInternal(-rowsOffset);
	}
};
oFF.PivotTableProxy.prototype.adaptMergedCells = function(mergedCell)
{
	let mergedColumns = mergedCell.getMergedColumns();
	let mergedRows = mergedCell.getMergedRows();
	let parentRow = mergedCell.getParentRow();
	let cells = parentRow.getCells();
	let columnIndex = cells.getIndex(mergedCell);
	let headerRowIndex = oFF.XCollectionUtils.hasElements(this.m_cachedHeaderRowList) ? this.m_cachedHeaderRowList.getIndex(parentRow) : -1;
	let dataRowIndex = oFF.XCollectionUtils.hasElements(this.m_cachedDataRowList) ? this.m_cachedDataRowList.getIndex(parentRow) : -1;
	this.adaptCells(columnIndex, mergedColumns, cells, 0);
	this.resetCellMerger(columnIndex + mergedColumns + 1, cells);
	if (headerRowIndex > -1)
	{
		this.adaptRows(this.m_cachedHeaderRowList, headerRowIndex, mergedRows, columnIndex, mergedColumns);
	}
	if (dataRowIndex > -1)
	{
		this.adaptRows(this.m_cachedDataRowList, dataRowIndex, mergedRows, columnIndex, mergedColumns);
	}
};
oFF.PivotTableProxy.prototype.adaptRows = function(rowList, rowIndex, mergedRows, columnIndex, mergedColumns)
{
	let cell;
	let subCells;
	let rowObj;
	let row;
	for (row = rowIndex + 1; row < rowList.size() && row < rowIndex + mergedRows + 1; row++)
	{
		rowObj = rowList.get(row);
		if (oFF.isNull(rowObj))
		{
			continue;
		}
		subCells = rowObj.getCells();
		cell = subCells.get(columnIndex);
		if (oFF.isNull(cell))
		{
			continue;
		}
		cell.setMergedRowsInternal(rowIndex - row);
		cell.setMergedColumnsInternal(0);
		this.adaptCells(columnIndex, mergedColumns, subCells, row - rowIndex);
		this.resetCellMerger(columnIndex + mergedColumns + 1, subCells);
	}
	for (; row < rowList.size(); row++)
	{
		rowObj = rowList.get(row);
		if (oFF.isNull(rowObj))
		{
			continue;
		}
		subCells = rowObj.getCells();
		cell = subCells.get(columnIndex);
		if (oFF.notNull(cell) && cell.getMergedRows() < 0)
		{
			cell.setMergedRowsInternal(0);
			cell.setMergedColumnsInternal(0);
			this.resetCellMerger(columnIndex + 1, subCells);
		}
		else
		{
			break;
		}
	}
};
oFF.PivotTableProxy.prototype.addColumnHeaderGroupName = function(sectionName) {};
oFF.PivotTableProxy.prototype.addHyperlinkQuickAction = function(hyperLinkLevels, levelInt, coordinates)
{
	let level = oFF.XIntegerValue.create(levelInt);
	if (!hyperLinkLevels.containsKey(level))
	{
		hyperLinkLevels.put(level, oFF.XList.create());
	}
	hyperLinkLevels.getByKey(level).add(coordinates);
};
oFF.PivotTableProxy.prototype.addNewDataPointStyle = function()
{
	let newStyle = oFF.SacDataPointStyle.create();
	this.m_dataPointStyles.add(newStyle);
	return newStyle;
};
oFF.PivotTableProxy.prototype.addNewHighlightArea = function()
{
	let highlightArea = oFF.SacTableHighlightArea.create();
	this.m_highlightAreas.add(highlightArea);
	return highlightArea;
};
oFF.PivotTableProxy.prototype.addNewLayeredRectangularStyle = oFF.noSupport;
oFF.PivotTableProxy.prototype.addNewTableMarkup = oFF.noSupport;
oFF.PivotTableProxy.prototype.addRowHeaderGroupName = function(sectionName) {};
oFF.PivotTableProxy.prototype.applyDataPointStyles = function()
{
	this.clearDataPointStyles();
	this.m_relevantDataPointPaths = oFF.XList.create();
	oFF.XCollectionUtils.forEach(this.m_tableDefinition.getRelevantDataPointPaths(), (rdpp) => {
		let dsir = oFF.SacDataSectionInfoReference.create();
		oFF.OlapToVisualizationConverterUtil.applyDataSectionInfoFromViz(rdpp, dsir);
		this.m_relevantDataPointPaths.add(dsir);
	});
	let dataPointStyles = this.getAvailableDataPointStyle();
	if (oFF.XCollectionUtils.hasElements(dataPointStyles))
	{
		for (let j = 0; j < dataPointStyles.size(); j++)
		{
			let dataPointStyle = dataPointStyles.get(j);
			let sacDataPointStyle = oFF.SacDataPointStyle.create();
			oFF.OlapVizToPivotConverterUtil.applyDataPointStyleFromViz(dataPointStyle, sacDataPointStyle);
			this.m_dataPointStyleMap.put(sacDataPointStyle, dataPointStyle);
			this.tagMatchingStyleCriteria(sacDataPointStyle);
		}
	}
};
oFF.PivotTableProxy.prototype.applyHeaderRowCells = function(rowIndex, headerRow, tileHeaderRow, headerIndex, startColumn, endColumn)
{
	let field;
	let sortDirection;
	let dimension;
	let fieldReference;
	let applicationSettings = this.m_tableDefinition.getApplicationSettings();
	let showImages = applicationSettings.isShowImages();
	let showHyperlinks = applicationSettings.isShowHyperlinks();
	let optimizedTableDragDropExperience = applicationSettings.isOptimizedTableDragDropExperience();
	let dataColumnsSize = oFF.XMath.min(this.m_dataColumns.size(), this.m_baseTile.getColumnsBundle().getDataList().size());
	let iterationEnd = endColumn === -1 ? dataColumnsSize : oFF.XMath.min(endColumn + 1, dataColumnsSize);
	let headerList = this.m_baseTile.getColumnsBundle().getHeaderList();
	let visibleComponentsOnRows = this.m_gridContainer.getRowsAxis().getVisibleComponentsOnAxis();
	let i;
	let newCell;
	let columnComponentsSize = this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis().size();
	let headerListSize = headerList.size();
	let headerElement;
	if (this.isEffectivelyShownDimensionTitles() && tileHeaderRow.isHeaderBoundary())
	{
		for (i = 0; i < headerListSize; i++)
		{
			headerElement = headerList.get(i);
			newCell = oFF.PivotProxyCell._createProxyCell(headerRow, this.m_headerColumns.get(i), tileHeaderRow, headerElement);
			headerRow.addCell(newCell);
			newCell.setType(oFF.SacTableConstants.CT_HEADER);
			newCell.setLocked(this.m_allowTextEdit);
			if (this.isEffectivelyShownDimensionTitles() && headerElement.getComponentIndex() > -1)
			{
				fieldReference = visibleComponentsOnRows.get(headerElement.getComponentIndex());
				field = fieldReference.getField();
				newCell.setAllowDragDrop(!optimizedTableDragDropExperience);
				newCell.setType(fieldReference.isMainAttribute() ? oFF.SacTableConstants.CT_ROW_DIM_HEADER : oFF.SacTableConstants.CT_ATTRIBUTE_ROW_DIM_HEADER);
				newCell.getTableStyle().setHorizontalAlignment(oFF.SacVisualizationHorizontalAlignment.LEFT);
				newCell.getTableStyle().setVerticalAlignment(oFF.SacVisualizationVerticalAlignment.BOTTOM);
				newCell.setPlainString(fieldReference.getName());
				newCell.setFormatted(fieldReference.getText());
				dimension = fieldReference.getDimension();
				newCell.setUdhContext(dimension.isUniversalDisplayHierarchyDimension());
				if ((fieldReference.isMainAttribute() && this.m_caps.supportsDimensionSorting(dimension, field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_KEY) ? oFF.SortType.MEMBER_KEY : oFF.SortType.MEMBER_TEXT) || this.m_caps.supportsFieldSorting(field)) && !dimension.isStructure() && !dimension.getDimensionType().isTypeOf(oFF.DimensionType.GENERAL_VERSION) && this.getDataRowTuplesTotalCount() > 1)
				{
					sortDirection = this.m_gridContainer.getSortDirections().getByKey(field.getName());
					if (oFF.isNull(sortDirection))
					{
						sortDirection = oFF.XSortDirection.DEFAULT_VALUE;
					}
					newCell.setSortDirection(sortDirection);
					newCell.setLengthAddition(2);
				}
				else
				{
					newCell.setLengthAddition(1);
				}
			}
		}
	}
	else
	{
		for (i = 0; i < headerList.size(); i++)
		{
			headerElement = headerList.get(i);
			newCell = oFF.PivotProxyCell._createProxyCell(headerRow, this.m_headerColumns.get(i), tileHeaderRow, headerElement);
			headerRow.addCell(newCell);
			newCell.setType(oFF.SacTableConstants.CT_HEADER);
			newCell.setLocked(this.m_allowTextEdit);
		}
	}
	let hrc = headerRow.getCells();
	if (headerIndex > -1 && this.isEffectivelyShownDimensionTitles() && hrc.size() > 0)
	{
		fieldReference = this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis().get(headerIndex);
		field = fieldReference.getField();
		newCell = headerRow.getCells().get(this.getPreColumnsAmount() - 1);
		if (oFF.notNull(newCell))
		{
			newCell.setAllowDragDrop(!optimizedTableDragDropExperience);
			newCell.setType(fieldReference.isMainAttribute() ? oFF.SacTableConstants.CT_COL_DIM_HEADER : oFF.SacTableConstants.CT_ATTRIBUTE_COL_DIM_HEADER);
			newCell.setLocked(this.m_allowTextEdit);
			newCell.getTableStyle().setHorizontalAlignment(oFF.SacVisualizationHorizontalAlignment.RIGHT);
			newCell.getTableStyle().setVerticalAlignment(oFF.SacVisualizationVerticalAlignment.BOTTOM);
			newCell.setPlainString(fieldReference.getName());
			newCell.setFormatted(fieldReference.getText());
			dimension = fieldReference.getDimension();
			newCell.setUdhContext(dimension.isUniversalDisplayHierarchyDimension());
			if ((fieldReference.isMainAttribute() && this.m_caps.supportsDimensionSorting(dimension, field.getPresentationType().isTypeOf(oFF.PresentationType.ABSTRACT_KEY) ? oFF.SortType.MEMBER_KEY : oFF.SortType.MEMBER_TEXT) || this.m_caps.supportsFieldSorting(field)) && !dimension.isStructure() && !dimension.getDimensionType().isTypeOf(oFF.DimensionType.GENERAL_VERSION) && this.getDataColumnTuplesTotalCount() > 1)
			{
				sortDirection = this.m_gridContainer.getSortDirections().getByKey(field.getName());
				if (oFF.isNull(sortDirection))
				{
					sortDirection = oFF.XSortDirection.DEFAULT_VALUE;
				}
				newCell.setSortDirection(sortDirection);
				newCell.setLengthAddition(2);
			}
			else
			{
				newCell.setLengthAddition(1);
			}
		}
	}
	let isAxisValidForMemberSort = this.isAxisValidForMemberSort(this.m_queryModel.getRowsAxis());
	for (i = oFF.XMath.max(0, startColumn); i < iterationEnd; i++)
	{
		if (i >= this.m_dataColumns.size() || this.m_dataColumns.get(i) === null)
		{
			headerRow.addCell(null);
			continue;
		}
		let dataElement = this.m_baseTile.getColumnsBundle().getDataAt(i);
		newCell = oFF.PivotProxyCell._createProxyCell(headerRow, this.m_dataColumns.get(i), tileHeaderRow, dataElement);
		headerRow.addCell(newCell);
		let tupleReference;
		if (headerIndex > -1 && oFF.notNull(dataElement) && dataElement.getTupleIndex() > -1)
		{
			fieldReference = this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis().get(headerIndex);
			tupleReference = this.m_gridContainer.getColumnTupleAt(dataElement.getTupleIndex());
			if (oFF.isNull(tupleReference))
			{
				continue;
			}
			newCell.setShowHyperLink(this.checkHyperlinksOnColumns(tupleReference, fieldReference));
			dimension = fieldReference.getDimension();
			newCell.setAllowDragDrop(!optimizedTableDragDropExperience);
			newCell.setType(fieldReference.isMainAttribute() ? oFF.SacTableConstants.CT_COL_DIM_MEMBER : oFF.SacTableConstants.CT_ATTRIBUTE_COL_DIM_MEMBER);
			newCell.setLocked(this.m_allowTextEdit);
			newCell.getTableStyle().setHorizontalAlignment(oFF.SacVisualizationHorizontalAlignment.RIGHT);
			newCell.getTableStyle().setVerticalAlignment(oFF.SacVisualizationVerticalAlignment.BOTTOM);
			let fieldValueReference = tupleReference.getValueForModelComponent(fieldReference);
			if (oFF.isNull(fieldValueReference))
			{
				continue;
			}
			let drillState = fieldValueReference.getDrillState();
			let dimensionMemberType = fieldValueReference.getDimensionMemberType();
			if (dimensionMemberType.isTypeOf(oFF.MemberType.RESULT) || oFF.OlapComponentType.TOTALS === dimensionMemberType)
			{
				newCell.setTotalsContext(true);
			}
			newCell.setRepeatedHeader(fieldValueReference.isRepeatedMemberName());
			newCell.setRepeatedRefColumn(fieldValueReference.getReferenceTupleIndex());
			newCell.setInitialHeader(!dimension.isUniversalDisplayHierarchyDimension() && dimension.getAxis().size() > dimension.getIndexOnAxis() + 1 && !fieldValueReference.isRepeatedMemberName());
			newCell.setPlain(fieldValueReference.getPlainValue());
			newCell.setFormatted(fieldValueReference.getFormattedText());
			newCell.setFormattingPattern(fieldValueReference.getFormatPattern());
			let valueException = fieldValueReference.getValueException();
			if (oFF.notNull(valueException) && valueException !== oFF.ValueException.NORMAL)
			{
				newCell.setValueException(oFF.PivotTableProxy.getValueException(valueException));
			}
			field = fieldReference.getField();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(oFF.XValueUtil.getString(fieldValueReference.getPlainValue())))
			{
				let isImageByMime = oFF.XString.containsString(field.getMimeType(), oFF.SacTableConstants.MIME_TYPE_IMAGE);
				if (showImages && field.getPresentationType() === oFF.PresentationType.BLOB && isImageByMime)
				{
					newCell.setType(oFF.SacTableConstants.CT_IMAGE);
				}
				else if (showHyperlinks && field.getPresentationType() === oFF.PresentationType.URL)
				{
					newCell.setShowHyperLink(true);
				}
			}
			let supportsDatacellOrComplexSort = this.m_caps.supportsComplexSorting() || this.m_caps.supportsDataCellSorting();
			if (isAxisValidForMemberSort && (supportsDatacellOrComplexSort && headerIndex + 1 === columnComponentsSize || !supportsDatacellOrComplexSort && this.m_caps.supportsMeasureSorting() && fieldReference.getDimension().isMeasureStructure() && !newCell.isRepeatedHeader()) && this.getDataRowTuplesTotalCount() > 1)
			{
				sortDirection = this.m_gridContainer.getSortDirections().getByKey(fieldValueReference.getPathKey());
				if (oFF.isNull(sortDirection) || sortDirection === oFF.XSortDirection.DEFAULT_VALUE)
				{
					let measureName = tupleReference.getMeasureName();
					let secStruName = tupleReference.getSecondaryStructureMemberName();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(measureName))
					{
						if (oFF.XStringUtils.isNotNullAndNotEmpty(secStruName))
						{
							sortDirection = this.m_gridContainer.getSortDirections().getByKey(oFF.XStringUtils.concatenate3(measureName, ":", secStruName));
						}
						else
						{
							sortDirection = this.m_gridContainer.getSortDirections().getByKey(measureName);
						}
					}
				}
				if (oFF.isNull(sortDirection))
				{
					sortDirection = oFF.XSortDirection.DEFAULT_VALUE;
				}
				newCell.setSortDirection(sortDirection);
				newCell.setLengthAddition(2);
			}
			else
			{
				newCell.setLengthAddition(1);
			}
			dimension = fieldReference.getDimension();
			let hierarchyActive = dimension.isHierarchyActive() || dimension.isUniversalDisplayHierarchyDimension();
			let isStructureLike = dimension.isStructure() || dimension.getDimensionType() === oFF.DimensionType.ACCOUNT;
			newCell.setInStructureContext(isStructureLike);
			let isInHierarchy = oFF.XStringUtils.isNotNullAndNotEmpty(fieldReference.getText()) && fieldReference.isMainAttribute() && oFF.notNull(drillState) && hierarchyActive;
			if (isInHierarchy)
			{
				let displayLevel = fieldValueReference.getDisplayLevel();
				let showDrillIcon = drillState !== oFF.DrillState.LEAF && oFF.MemberType.RESULT !== dimensionMemberType && oFF.OlapComponentType.TOTALS !== dimensionMemberType;
				let hasSortIcon = newCell.getSortDirection() !== null;
				newCell.setLengthAddition((showDrillIcon ? 1 : 0) + (hasSortIcon ? 1 : 0) + newCell.getLengthAddition());
				newCell.setInHierarchy(true);
				newCell.setHierarchyLevel(displayLevel);
				newCell.setHierarchyPaddingType(oFF.SacTableConstants.C_N_HIERARCHY_PADDING_TOP);
				newCell.setHierarchyPaddingValue(oFF.SacTableConstants.DF_C_N_HIERARCHY_PADDING_TOP);
				newCell.setShowDrillIcon(showDrillIcon);
				newCell.setExpanded(drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED);
				let newHeight = oFF.SacTableConstants.DF_C_N_HIERARCHY_PADDING_TOP + oFF.SacTableConstants.DF_R_N_HEIGHT + oFF.SacTableConstants.DF_C_N_HIERARCHY_PADDING_TOP * fieldValueReference.getDisplayLevel();
				if (tileHeaderRow.getHeight() < newHeight)
				{
					tileHeaderRow.setHeight(newHeight);
				}
			}
		}
		else if (tileHeaderRow.isHeaderBoundary() && oFF.notNull(dataElement) && dataElement.getTupleIndex() > -1)
		{
			tupleReference = this.m_gridContainer.getColumnTupleAt(dataElement.getTupleIndex());
			newCell.setType(oFF.SacTableConstants.CT_HEADER);
			newCell.setLocked(this.m_allowTextEdit);
			let unitScalingHeader = oFF.isNull(tupleReference) ? null : tupleReference.getUniqueUnitScaleInformation();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(unitScalingHeader))
			{
				newCell.getTableStyle().setHorizontalAlignment(oFF.SacVisualizationHorizontalAlignment.RIGHT);
				newCell.getTableStyle().setVerticalAlignment(oFF.SacVisualizationVerticalAlignment.BOTTOM);
				newCell.setPlainString(unitScalingHeader);
				newCell.setFormatted(unitScalingHeader);
				newCell.setUnitInformation(tupleReference.getUniqueUnitInfo());
				newCell.setScalingText(tupleReference.getUniqueScalingText());
				if (tupleReference.getNumericShift() !== null)
				{
					newCell.setScaling(tupleReference.getNumericShift().getInteger());
				}
			}
		}
		else
		{
			newCell.setType(oFF.SacTableConstants.CT_HEADER);
			newCell.setLocked(this.m_allowTextEdit);
		}
	}
	if (tileHeaderRow.isHeaderBoundary() && this.isEmptyColumnDimensions() && this.isEffectivelyShownDimensionTitles())
	{
		let cells = headerRow.getCells();
		if (cells.size() > headerListSize)
		{
			newCell = cells.get(headerListSize);
			newCell.setType(oFF.SacTableConstants.CT_EMPTY_AXIS_COLUMN_HEADER);
			newCell.setLocked(this.m_allowTextEdit);
			newCell.setAllowDragDrop(!optimizedTableDragDropExperience);
		}
	}
};
oFF.PivotTableProxy.prototype.applyHighlighting = function()
{
	if (this.getAvailableHighlightAreas() !== null)
	{
		let vizIterator = this.getAvailableHighlightAreas().getIterator();
		this.clearHighlightAreas();
		while (vizIterator.hasNext())
		{
			oFF.OlapVizToPivotConverterUtil.applyHighlightingFromViz(vizIterator.next(), this.addNewHighlightArea());
		}
	}
};
oFF.PivotTableProxy.prototype.applyPagingSettings = function()
{
	let pagingSettings = this.m_tableDefinition.getTableViewportPagingSettings();
	let rowsBundle = this.m_baseTile.getRowsBundle();
	rowsBundle.setMaxElements(pagingSettings.getMaxRows());
	rowsBundle.setMaxRecommendedElements(pagingSettings.getMaxRecommendedRows());
	rowsBundle.setMaxSize(pagingSettings.getMaxHeight());
	rowsBundle.setMaxRecommendedSize(pagingSettings.getMaxRecommendedHeight());
	rowsBundle.setPageBreakIsStylingBoundary(pagingSettings.rowPagingActive() && pagingSettings.isRowPageBreakIsStylingBoundary());
	let columnsBundle = this.m_baseTile.getColumnsBundle();
	columnsBundle.setMaxElements(pagingSettings.getMaxColumns());
	columnsBundle.setMaxRecommendedElements(pagingSettings.getMaxRecommendedColumns());
	columnsBundle.setMaxSize(pagingSettings.getMaxWidth());
	columnsBundle.setMaxRecommendedSize(pagingSettings.getMaxRecommendedWidth());
	columnsBundle.setPageBreakIsStylingBoundary(pagingSettings.columnPagingActive() && pagingSettings.isColumnPageBreakIsStylingBoundary());
};
oFF.PivotTableProxy.prototype.applyTableDefinition = function(tableDefinition)
{
	if (oFF.notNull(tableDefinition))
	{
		this.m_tableDefinition = tableDefinition;
		this.m_queryModel = tableDefinition.getQueryModel();
		let applicationSettings = tableDefinition.getApplicationSettings();
		if (oFF.notNull(applicationSettings))
		{
			if (applicationSettings.getWidgetWidth() > 0)
			{
				this.setWidth(applicationSettings.getWidgetWidth());
			}
			if (applicationSettings.getWidgetHeight() > 0)
			{
				this.setHeight(applicationSettings.getWidgetHeight());
			}
			if (applicationSettings.getMaxColumns() > 0)
			{
				this.setMaxColumns(applicationSettings.getMaxColumns());
			}
			if (applicationSettings.getMaxRows() > 0)
			{
				this.setMaxRows(applicationSettings.getMaxRows());
			}
			this.m_tileRowPadding = oFF.XMath.max(applicationSettings.getTileRowsPadding(), 30);
			this.m_tileColumnPadding = oFF.XMath.max(applicationSettings.getTileColumnsPadding(), 30);
			this.m_memberSortIconsLevel = applicationSettings.getMemberSortIconsLevel();
			this.m_allowTextEdit = applicationSettings.isAllowTextEdit() && this.getQueryModel().isDataEntryEnabled() && this.getQueryModel().getPlanningMode() === oFF.PlanningMode.FORCE_PLANNING;
		}
		this.setStripeDataRows(tableDefinition.isEffectiveStripeDataRows());
		this.setStripeDataColumns(tableDefinition.isEffectiveStripeDataColumns());
		this.setFreezeHeaderRows(tableDefinition.isEffectiveFreezeHeaderRows());
		this.setFreezeHeaderColumns(tableDefinition.isEffectiveFreezeHeaderColumns());
		this.setFreezeUpToColumn(tableDefinition.getFreezeUpToColumn());
		this.setFreezeUpToRow(tableDefinition.getFreezeUpToRow());
		this.setShowFreezeLines(tableDefinition.isEffectiveShowFreezeLines());
		this.setShowGrid(tableDefinition.isEffectiveShowGrid());
		this.setHeaderCompactionType(tableDefinition.getEffectiveTableHeaderCompactionType());
		this.setShowDimensionTitles(tableDefinition.isEffectiveShowDimensionTitles());
		this.setTableMemberHeaderHandling(oFF.OlapVizToPivotConverterUtil.getTableMemberHeaderHandlingFromViz(tableDefinition.getEffectiveTableMemberHeaderHandling()));
		this.setShowCoordinateHeader(tableDefinition.isEffectiveShowCoordinateHeader());
		this.setHeaderColor(tableDefinition.getHeaderColor());
		this.setTotalLevel6Color(tableDefinition.getTotalLevel6Color());
		this.setTotalLevel5Color(tableDefinition.getTotalLevel5Color());
		this.setTotalLevel4Color(tableDefinition.getTotalLevel4Color());
		this.setTotalLevel3Color(tableDefinition.getTotalLevel3Color());
		this.setTotalLevel2Color(tableDefinition.getTotalLevel2Color());
		this.setTotalLevel1Color(tableDefinition.getTotalLevel1Color());
		this.setTotalLevel0Color(tableDefinition.getTotalLevel0Color());
		this.setTitle(tableDefinition.getTitle());
		this.m_showHyperlinks = tableDefinition.isEffectiveShowHyperlinks();
		this.m_baseTile.applyColumnAndRowSizes(this.m_tableDefinition.getFixedPixelHeightsForRows(), this.m_tableDefinition.getFixedPixelWidthsForColumns());
	}
};
oFF.PivotTableProxy.prototype.applyTupleRowCells = function(rowIndex, dataRow, tileDataRow, tupleIndex, startColumn, endColumn)
{
	let dataColumnsSize = oFF.XMath.min(this.m_dataColumns.size(), this.m_baseTile.getColumnsBundle().getDataList().size());
	let isAxisValidForMemberSort = this.isAxisValidForMemberSort(this.m_queryModel.getColumnsAxis());
	let iterationEnd = endColumn === -1 ? dataColumnsSize : oFF.XMath.min(endColumn + 1, dataColumnsSize);
	let headerList = this.m_baseTile.getColumnsBundle().getHeaderList();
	let i;
	let newCell;
	let oldCell = null;
	let bandHeaders = dataRow.getEffectiveMemberHeaderHandling() === oFF.SacTableMemberHeaderHandling.BAND;
	let applicationSettings = this.m_tableDefinition.getApplicationSettings();
	let optimizedTableDragDropExperience = applicationSettings.isOptimizedTableDragDropExperience();
	let showImages = applicationSettings.isShowImages();
	let showHyperlinks = applicationSettings.isShowHyperlinks();
	let showCommentIcons = applicationSettings.isShowCommentIcons();
	let rootTupleIndex = tileDataRow.getRootTupleIndex();
	let sortDirection;
	let rootTuple = this.m_gridContainer.getRowsAxis().getTupleAt(rootTupleIndex);
	let componentsOnAxis = this.m_gridContainer.getRowsAxis().getVisibleComponentsOnAxis();
	let lastDimensionIndex = componentsOnAxis.size() === 0 ? -1 : componentsOnAxis.get(componentsOnAxis.size() - 1).getDimensionIndex();
	let fieldReference;
	let headerListSize = headerList.size();
	for (i = 0; i < headerListSize; i++)
	{
		let headerColumn = headerList.get(i);
		newCell = oFF.PivotProxyCell._createProxyCell(dataRow, this.m_headerColumns.get(i), tileDataRow, headerColumn);
		newCell.setType(oFF.SacTableConstants.CT_HEADER);
		newCell.setLocked(this.m_allowTextEdit);
		dataRow.addCell(newCell);
		let componentIndex = headerColumn.getComponentIndex();
		let headerIndex = tileDataRow.getHeaderLevel();
		if (componentIndex > -1)
		{
			fieldReference = componentsOnAxis.get(componentIndex);
			newCell.setShowHyperLink(this.checkHyperlinksOnRows(rootTuple, fieldReference));
			let mergedBands = bandHeaders && headerIndex === fieldReference.getDimensionIndex() && headerIndex < lastDimensionIndex;
			if (mergedBands || tupleIndex > -1)
			{
				let rowFieldValueReference = rootTuple.getValueForModelComponent(fieldReference);
				let headerDimension = fieldReference.getDimension();
				let dimensionMemberType = rowFieldValueReference.getDimensionMemberType();
				if (dimensionMemberType === oFF.MemberType.RESULT || oFF.OlapComponentType.TOTALS === dimensionMemberType)
				{
					newCell.setTotalsContext(true);
				}
				newCell.setAllowDragDrop(!optimizedTableDragDropExperience);
				newCell.setType(fieldReference.isMainAttribute() ? oFF.SacTableConstants.CT_ROW_DIM_MEMBER : oFF.SacTableConstants.CT_ATTRIBUTE_ROW_DIM_MEMBER);
				newCell.setLocked(this.m_allowTextEdit);
				newCell.getTableStyle().setHorizontalAlignment(oFF.SacVisualizationHorizontalAlignment.LEFT);
				newCell.getTableStyle().setVerticalAlignment(oFF.SacVisualizationVerticalAlignment.BOTTOM);
				if (tupleIndex > -1)
				{
					newCell.setRepeatedHeader(rowFieldValueReference.isRepeatedMemberName());
					newCell.setRepeatedRefRow(rowFieldValueReference.getReferenceTupleIndex());
					newCell.setInitialHeader(!headerDimension.isUniversalDisplayHierarchyDimension() && headerDimension.getAxis().size() > headerDimension.getIndexOnAxis() + 1 && !rowFieldValueReference.isRepeatedMemberName());
				}
				newCell.setPlain(rowFieldValueReference.getPlainValue());
				newCell.setFormatted(rowFieldValueReference.getFormattedText());
				newCell.setFormattingPattern(rowFieldValueReference.getFormatPattern());
				let valueException = rowFieldValueReference.getValueException();
				if (oFF.notNull(valueException) && valueException !== oFF.ValueException.NORMAL)
				{
					newCell.setValueException(oFF.PivotTableProxy.getValueException(valueException));
				}
				let field = fieldReference.getField();
				if (oFF.XStringUtils.isNotNullAndNotEmpty(oFF.XValueUtil.getString(rowFieldValueReference.getPlainValue())))
				{
					let isImageByMime = oFF.XString.containsString(field.getMimeType(), oFF.SacTableConstants.MIME_TYPE_IMAGE);
					if (showImages && field.getPresentationType() === oFF.PresentationType.BLOB && isImageByMime)
					{
						newCell.setType(oFF.SacTableConstants.CT_IMAGE);
					}
					else if (showHyperlinks && field.getPresentationType() === oFF.PresentationType.URL)
					{
						newCell.setShowHyperLink(true);
					}
				}
				if (mergedBands)
				{
					newCell.setMergedColumns(headerListSize - i + dataColumnsSize);
				}
				let supportsDatacellOrComplexSort = this.m_caps.supportsComplexSorting() || this.m_caps.supportsDataCellSorting();
				if (isAxisValidForMemberSort && (supportsDatacellOrComplexSort && componentIndex + 1 === componentsOnAxis.size() || !supportsDatacellOrComplexSort && this.m_caps.supportsMeasureSorting() && fieldReference.getDimension().isMeasureStructure() && !newCell.isRepeatedHeader()) && this.getDataColumnTuplesTotalCount() > 1)
				{
					sortDirection = this.m_gridContainer.getSortDirections().getByKey(rowFieldValueReference.getPathKey());
					if (oFF.isNull(sortDirection) || sortDirection === oFF.XSortDirection.DEFAULT_VALUE)
					{
						let tupleReference = rowFieldValueReference.getTupleReference();
						let measureName = tupleReference.getMeasureName();
						let secStruName = tupleReference.getSecondaryStructureMemberName();
						if (oFF.XStringUtils.isNotNullAndNotEmpty(measureName))
						{
							if (oFF.XStringUtils.isNotNullAndNotEmpty(secStruName))
							{
								sortDirection = this.m_gridContainer.getSortDirections().getByKey(oFF.XStringUtils.concatenate3(measureName, ":", secStruName));
							}
							else
							{
								sortDirection = this.m_gridContainer.getSortDirections().getByKey(measureName);
							}
						}
					}
					if (oFF.isNull(sortDirection))
					{
						sortDirection = oFF.XSortDirection.DEFAULT_VALUE;
					}
					newCell.setSortDirection(sortDirection);
					newCell.setLengthAddition(2);
				}
				else
				{
					newCell.setLengthAddition(1);
				}
				let drillState = rowFieldValueReference.getDrillState();
				dimensionMemberType = rowFieldValueReference.getDimensionMemberType();
				let hierarchyActive = headerDimension.isHierarchyActive() || headerDimension.isUniversalDisplayHierarchyDimension();
				let isStructureLike = headerDimension.isStructure() || headerDimension.getDimensionType() === oFF.DimensionType.ACCOUNT;
				newCell.setInStructureContext(isStructureLike);
				let isInHierarchy = oFF.XStringUtils.isNotNullAndNotEmpty(fieldReference.getText()) && fieldReference.isMainAttribute() && oFF.notNull(drillState) && hierarchyActive;
				if (isInHierarchy)
				{
					let displayLevel = rowFieldValueReference.getDisplayLevel();
					let showDrillIcon = drillState !== oFF.DrillState.LEAF && oFF.MemberType.RESULT !== dimensionMemberType && oFF.OlapComponentType.TOTALS !== dimensionMemberType;
					let hasSortIcon = newCell.getSortDirection() !== null;
					newCell.setLengthAddition((showDrillIcon ? 2 : 1) + (hasSortIcon ? 1 : 0) + displayLevel + newCell.getLengthAddition());
					newCell.setInHierarchy(true);
					newCell.setHierarchyLevel(displayLevel);
					newCell.setHierarchyPaddingType(oFF.SacTableConstants.C_N_HIERARCHY_PADDING_LEFT);
					newCell.setHierarchyPaddingValue(oFF.SacTableConstants.DF_C_N_HIERARCHY_PADDING_LEFT);
					newCell.setShowDrillIcon(showDrillIcon);
					newCell.setExpanded(drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED || drillState === oFF.DrillState.LEAF_UDH);
				}
			}
			if (oFF.notNull(oldCell))
			{
				oldCell.setMergedColumns(0);
			}
			oldCell = newCell;
		}
		else if (headerColumn.isHeaderBoundary() && rootTupleIndex === tupleIndex)
		{
			newCell.setType(oFF.SacTableConstants.CT_HEADER);
			newCell.setLocked(this.m_allowTextEdit);
			if (oFF.isNull(rootTuple))
			{
				continue;
			}
			let unitScalingHeader = rootTuple.getUniqueUnitScaleInformation();
			if (oFF.XStringUtils.isNotNullAndNotEmpty(unitScalingHeader))
			{
				newCell.getTableStyle().setHorizontalAlignment(oFF.SacVisualizationHorizontalAlignment.LEFT);
				newCell.getTableStyle().setVerticalAlignment(oFF.SacVisualizationVerticalAlignment.BOTTOM);
				newCell.setPlainString(unitScalingHeader);
				newCell.setFormatted(unitScalingHeader);
				newCell.setUnitInformation(rootTuple.getUniqueUnitInfo());
				newCell.setScalingText(rootTuple.getUniqueScalingText());
				if (rootTuple.getNumericShift() !== null)
				{
					newCell.setScaling(rootTuple.getNumericShift().getInteger());
				}
			}
		}
	}
	let dataColumn;
	if (rootTupleIndex === tupleIndex)
	{
		for (i = oFF.XMath.max(0, startColumn); i < iterationEnd; i++)
		{
			if (i >= this.m_dataColumns.size() || this.m_dataColumns.get(i) === null)
			{
				dataRow.addCell(null);
				continue;
			}
			dataColumn = this.m_baseTile.getColumnsBundle().getDataAt(i);
			newCell = oFF.PivotProxyCell._createProxyCell(dataRow, this.m_dataColumns.get(i), tileDataRow, dataColumn);
			dataRow.addCell(newCell);
			let columnTupleIndex = dataColumn.getTupleIndex();
			if (columnTupleIndex > -1)
			{
				if (dataRow.isShowCellChart() || dataColumn.isShowCellChart())
				{
					newCell.setType(oFF.SacTableConstants.CT_CHART);
					if (dataRow.isShowCellChart() && dataColumn.getCellChartOrientation() === oFF.SacCellChartOrientation.VERTICAL)
					{
						tileDataRow.setHeight(oFF.SacTableConstants.DF_R_N_HEIGHT_VERTICAL_CHARTS);
					}
				}
				let dataCellValue = this.m_gridContainer.getCellValueReference(columnTupleIndex, tupleIndex);
				if (oFF.notNull(dataCellValue))
				{
					newCell.setShowHyperLink(this.checkHyperlinkOnCross(this.m_gridContainer.getRowTupleAt(rootTupleIndex), this.m_gridContainer.getColumnTupleAt(columnTupleIndex)));
					newCell.getTableStyle().setHorizontalAlignment(oFF.SacVisualizationHorizontalAlignment.RIGHT);
					newCell.getTableStyle().setVerticalAlignment(oFF.SacVisualizationVerticalAlignment.BOTTOM);
					if (dataCellValue.isDataEntryEnabled())
					{
						newCell.setDataEntryEnabled(true);
					}
					if (oFF.PivotTableProxy.isCellUnbooked(dataCellValue))
					{
						newCell.setType(oFF.SacTableConstants.CT_UNBOOKED);
					}
					else
					{
						newCell.setType(oFF.SacTableConstants.CT_VALUE);
					}
					newCell.setDataUpdated(dataCellValue.isDataUpdated());
					newCell.setLocked(this.m_allowTextEdit && !dataCellValue.isDataEntryEnabled());
					newCell.setDataCellRef(dataCellValue.getDataCellName());
					newCell.setFormatted(dataCellValue.getFormattedText());
					newCell.setFormattingPattern(dataCellValue.getFormatPattern());
					newCell.setPlain(dataCellValue.getPlainValue());
					newCell.setScaling(dataCellValue.getNumericShift());
					newCell.setScalingText(dataCellValue.getScalingText());
					newCell.setUnitInformation(dataCellValue.getUnitInformation());
					let valueException = dataCellValue.getValueException();
					if (oFF.notNull(valueException) && valueException !== oFF.ValueException.NORMAL)
					{
						newCell.setValueException(oFF.PivotTableProxy.getValueException(valueException));
					}
					if (showCommentIcons)
					{
						newCell.setCommentDocumentId(dataCellValue.getDocumentId());
					}
					let maxAlertLevel = dataCellValue.getAlertLevel();
					let alertLevelName = dataCellValue.getExceptionName();
					let formulaExceptionManager = this.m_queryModel.getFormulaExceptionManager();
					let threshold = oFF.isNull(formulaExceptionManager) ? null : formulaExceptionManager.getModelFormulaExceptionThreshold(alertLevelName);
					let exceptionInformation = newCell.addNewExceptionInformation();
					let color = oFF.isNull(threshold) ? null : threshold.getColor();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(color))
					{
						exceptionInformation.setColor(color);
					}
					let thresholdName = oFF.isNull(threshold) ? null : threshold.getName();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(thresholdName))
					{
						exceptionInformation.setThresholdName(thresholdName);
					}
					let thresholdText = oFF.isNull(threshold) ? null : threshold.getText();
					if (oFF.XStringUtils.isNotNullAndNotEmpty(thresholdText))
					{
						exceptionInformation.setThresholdText(thresholdText);
					}
					exceptionInformation.setExceptionName(alertLevelName);
					oFF.XCollectionUtils.forEach(dataCellValue.getTags(), (tag) => {
						exceptionInformation.addTag(tag);
					});
					exceptionInformation.setLevel(oFF.SacAlertLevel.getByLevelValue(maxAlertLevel.getLevel()));
					exceptionInformation.setValueSign(oFF.PivotTableProxy.getValueSign(dataCellValue));
					this.tagExceptionInformation(exceptionInformation, dataRow.getDataPath(), dataColumn.getDataPath());
				}
			}
		}
	}
	else
	{
		for (i = oFF.XMath.max(0, startColumn); i < iterationEnd; i++)
		{
			if (i >= this.m_dataColumns.size() || this.m_dataColumns.get(i) === null)
			{
				dataRow.addCell(null);
				continue;
			}
			dataColumn = this.m_baseTile.getColumnsBundle().getDataAt(i);
			newCell = oFF.PivotProxyCell._createProxyCell(dataRow, this.m_dataColumns.get(i), tileDataRow, dataColumn);
			dataRow.addCell(newCell);
		}
	}
	if (tupleIndex === 0 && this.isEmptyRowDimensions() && this.isEffectivelyShownDimensionTitles() && this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis().size() > 0 && oFF.XCollectionUtils.hasElements(dataRow.getCells()))
	{
		newCell = dataRow.getCells().get(0);
		newCell.setType(oFF.SacTableConstants.CT_EMPTY_AXIS_ROW_HEADER);
		newCell.setLocked(this.m_allowTextEdit);
	}
};
oFF.PivotTableProxy.prototype.canResolveAction = function(action, rowDimensionLevel, columnDimensionLevel)
{
	return this.m_actionResolver.canResolveSimple(action, rowDimensionLevel, columnDimensionLevel);
};
oFF.PivotTableProxy.prototype.checkAnyHierarchyActive = function()
{
	return oFF.notNull(this.m_gridContainer) && (this.checkHasAxisHierarchy(this.m_gridContainer.getRowsAxis()) || this.checkHasAxisHierarchy(this.m_gridContainer.getColumnsAxis()));
};
oFF.PivotTableProxy.prototype.checkDimensionOnAxis = function(rowsAxis, dimension)
{
	return rowsAxis.contains(dimension) && this.checkHasRelevantMembers(dimension);
};
oFF.PivotTableProxy.prototype.checkHasAxisHierarchy = function(axis)
{
	return oFF.notNull(axis) && axis.hasActiveHierarchy();
};
oFF.PivotTableProxy.prototype.checkHasRelevantMembers = function(dimension)
{
	let structMembers = dimension.getAllStructureMembers();
	let hasExactlyOne = oFF.notNull(structMembers) && structMembers.size() === 1;
	if (!hasExactlyOne)
	{
		let dynFilter = this.m_queryModel.getFilter().getDynamicFilter();
		let cartProd = oFF.isNull(dynFilter) ? null : dynFilter.getCartesianProduct();
		let structureFilter = oFF.isNull(cartProd) ? null : cartProd.getCartesianList(dimension);
		hasExactlyOne = oFF.notNull(structureFilter) && structureFilter.size() === 1 && structureFilter.getCartesianElement(0).getSetSign() === oFF.SetSign.INCLUDING;
	}
	return !hasExactlyOne;
};
oFF.PivotTableProxy.prototype.checkHyperlinkOnCross = function(rowTuple, columnTuple)
{
	return oFF.XStream.of(this.m_dataCellHyperlinks).anyMatch((cor) => {
		return this.matchesTuple(rowTuple, cor.getRowMap()) && this.matchesTuple(columnTuple, cor.getColumMap());
	});
};
oFF.PivotTableProxy.prototype.checkHyperlinksExt = function(rootTuple, fieldReference, hyperlinkLevels, mapGet)
{
	let match = false;
	if (oFF.notNull(fieldReference))
	{
		let coordinates = hyperlinkLevels.getByKey(oFF.XIntegerValue.create(fieldReference.getDimensionIndex()));
		match = oFF.XStream.of(coordinates).anyMatch((cor) => {
			return this.matchesTuple(rootTuple, mapGet(cor));
		});
	}
	return match;
};
oFF.PivotTableProxy.prototype.checkHyperlinksOnColumns = function(rootTuple, fieldReference)
{
	return this.checkHyperlinksExt(rootTuple, fieldReference, this.m_columnHeaderHyperlinkLevels, (cr) => {
		return cr.getColumMap();
	});
};
oFF.PivotTableProxy.prototype.checkHyperlinksOnRows = function(rootTuple, fieldReference)
{
	return this.checkHyperlinksExt(rootTuple, fieldReference, this.m_rowHeaderHyperlinkLevels, (cr) => {
		return cr.getRowMap();
	});
};
oFF.PivotTableProxy.prototype.checkReversedHierarchy = function()
{
	let reversedHierarchy = false;
	let rowsAxis = oFF.isNull(this.m_queryModel) ? null : this.m_queryModel.getRowsAxis();
	if (oFF.XCollectionUtils.hasElements(rowsAxis))
	{
		reversedHierarchy = this.isAxisReversed(rowsAxis);
	}
	return reversedHierarchy;
};
oFF.PivotTableProxy.prototype.clear = function() {};
oFF.PivotTableProxy.prototype.clearColumnHeaderGroupNames = function() {};
oFF.PivotTableProxy.prototype.clearDataPointStyles = function()
{
	this.m_dataPointStyles.clear();
	oFF.XObjectExt.release(this.m_dataPointContextMatcher);
	this.m_dataPointContextMatcher = oFF.VisualizationDataPointMatcher.create();
};
oFF.PivotTableProxy.prototype.clearHighlightAreas = function()
{
	this.m_highlightAreas.clear();
};
oFF.PivotTableProxy.prototype.clearLayeredRectangularStyles = oFF.noSupport;
oFF.PivotTableProxy.prototype.clearRowHeaderGroupNames = function() {};
oFF.PivotTableProxy.prototype.clearTableMarkups = oFF.noSupport;
oFF.PivotTableProxy.prototype.completeHighlightCoordinate = function(cell, highlightCoordinates, highlightArea, column, columnIndex, rowIndex)
{
	if (oFF.notNull(cell) && oFF.notNull(column) && column.matchesUntaggedReference(highlightArea.getColumnsReference()) && highlightArea.getCellTypeRestriction().matches(cell))
	{
		highlightCoordinates.add(oFF.SacTableHighlightCoordinate.create(columnIndex, rowIndex, highlightArea.getHighlightColor()));
	}
};
oFF.PivotTableProxy.prototype.createHighlightCoordinate = function(highlightCoordinates, highlightArea, row, rowFull, rowIndex)
{
	if (oFF.notNull(row) && row.matchesUntaggedReference(highlightArea.getRowsReference()))
	{
		let i;
		let headerColumnList = this.m_baseTile.getColumnsBundle().getHeaderList();
		for (i = 0; i < headerColumnList.size(); i++)
		{
			this.completeHighlightCoordinate(rowFull.getCells().get(i), highlightCoordinates, highlightArea, headerColumnList.get(i), i, rowIndex);
		}
		let colDataFragments = this.m_baseTile.getColumnsBundle().getDataList();
		let colListSize = colDataFragments.size();
		let start = this.m_colStart < 0 ? 0 : oFF.XMath.min(colListSize, this.m_colStart);
		let end = oFF.XMath.min(this.m_colEnd < 0 ? colListSize : oFF.XMath.min(colListSize, this.m_colEnd + 1), rowFull.getCells().size());
		for (i = start; i < end; i++)
		{
			this.completeHighlightCoordinate(rowFull.getCells().get(headerColumnList.size() + i), highlightCoordinates, highlightArea, colDataFragments.get(i), this.getPreColumnsAmount() + i, rowIndex);
		}
	}
};
oFF.PivotTableProxy.prototype.createNewAnalyticDataColumn = oFF.noSupport;
oFF.PivotTableProxy.prototype.createNewAnalyticDataColumnAt = oFF.noSupport;
oFF.PivotTableProxy.prototype.createNewAnalyticHeaderColumn = oFF.noSupport;
oFF.PivotTableProxy.prototype.createNewDataColumn = oFF.noSupport;
oFF.PivotTableProxy.prototype.createNewDataColumnAt = oFF.noSupport;
oFF.PivotTableProxy.prototype.createNewHeaderColumn = oFF.noSupport;
oFF.PivotTableProxy.prototype.createNewHeaderColumnAt = oFF.noSupport;
oFF.PivotTableProxy.prototype.expandDataPointStyles = function()
{
	this.m_dataPointStyles.clear();
	if (oFF.XCollectionUtils.hasElements(this.m_tableDefinition.getDatapointVariableContainers()))
	{
		oFF.XCollectionUtils.forEach(this.m_matchedExceptionInformation, (mei) => {
			let variableRequestors = this.m_tableDefinition.getVariableHolderForDataPoint(mei, () => {
				return oFF.SacDataSectionInfoReference.create();
			});
			this.expandDataPointStylesForExceptionInformation(mei, variableRequestors);
		});
	}
	else
	{
		this.m_dataPointStyles.addAll(this.m_dataPointStyleMap.getKeysAsReadOnlyList());
	}
};
oFF.PivotTableProxy.prototype.expandDataPointStylesForExceptionInformation = function(exceptionInfo, variableHolders)
{
	oFF.XStream.of(this.m_dataPointStyleMap.getKeysAsReadOnlyList()).filter((dps) => {
		return this.m_dataPointContextMatcher.matchesStyleCriterion(dps, exceptionInfo, null);
	}).forEach((dataPointStyle) => {
		let newDps = this.addNewDataPointStyle();
		oFF.OlapVizToPivotConverterUtil.expandAndApplyDataPointStyle(this.m_dataPointStyleMap.getByKey(dataPointStyle), newDps, exceptionInfo, variableHolders);
		exceptionInfo.addMatchedStyle(newDps);
	});
};
oFF.PivotTableProxy.prototype.fillEmptyTable = function(tableDefinition) {};
oFF.PivotTableProxy.prototype.formatCellWidth = function(fragmentRow, cell, maxWidthRecommendation)
{
	let prioritizedStyles = cell.getPrioritizedStylesList();
	let formattedText = cell.getEffectiveFormattedText(prioritizedStyles);
	cell.setWrapped(formattedText);
	let fontFamily = cell.getEffectiveFontFamily(prioritizedStyles);
	if (oFF.XStringUtils.isNullOrEmpty(fontFamily))
	{
		fontFamily = oFF.SacTableConstants.DEFAULT_FONT_FAMILY;
	}
	let alertSymbol = cell.getEffectiveThresholdType(prioritizedStyles);
	let fontItalic = cell.isEffectiveFontItalic(prioritizedStyles);
	let fontBold = cell.isEffectiveFontBold(prioritizedStyles) || cell.isDimensionHeader() || cell.isTotalsContext();
	let fontSize = cell.getEffectiveFontSize(prioritizedStyles);
	let cellWrap = cell.isEffectiveWrap(prioritizedStyles);
	if (fontSize === 0)
	{
		fontSize = oFF.SacTableConstants.DEFAULT_FONT_SIZE;
	}
	let defaultHeight = oFF.XDouble.convertToInt(oFF.SacTableConstants.DF_R_N_HEIGHT_REDUCED * fontSize / oFF.SacTableConstants.DEFAULT_FONT_SIZE);
	let newHeight = defaultHeight;
	if (fragmentRow.isHeader() && cell.isInHierarchy())
	{
		newHeight = oFF.SacTableConstants.DF_C_N_HIERARCHY_PADDING_TOP + defaultHeight - oFF.SacTableConstants.DF_R_N_HEIGHT_REDUCED + this.getDefaultRowHeight() + oFF.SacTableConstants.DF_C_N_HIERARCHY_PADDING_TOP * cell.getHierarchyLevel();
		fragmentRow.setTextBaseHeight(oFF.XMath.max(fragmentRow.getHeight(), newHeight));
	}
	if (!cell.isHeaderCell() || !cell.isRepeatedHeader() || cell.isEffectiveRepetitiveHeaderCells() || cellWrap)
	{
		let tokenized;
		if (oFF.isNull(formattedText) || cell.isUnbooked())
		{
			tokenized = oFF.XList.create();
		}
		else
		{
			tokenized = oFF.XStringTokenizer.splitString(formattedText, "\r\n");
		}
		let reTokenized = oFF.XList.create();
		let factor = cell.isEffectiveShowCellChart() && cell.getEffectiveCellChartOrientation() === oFF.SacCellChartOrientation.HORIZONTAL ? 3 : 1;
		let heightFactor = cell.isEffectiveShowCellChart() && cell.getEffectiveCellChartOrientation() !== oFF.SacCellChartOrientation.HORIZONTAL ? 3 : 1;
		let column = cell.getParentColumn();
		let lengthAddition = oFF.XDouble.convertToInt(oFF.XMath.max(1, cell.getLengthAddition() + (oFF.isNull(alertSymbol) ? 0 : 2)) * oFF.SacTableConstants.DEFAULT_TEXT_BOX_SIZE + oFF.SacTableConstants.DEFAULT_CELL_PADDING);
		let idealWidth = 0;
		if (!column.isWidthOverwritten())
		{
			idealWidth = column.getIdealWidth();
		}
		if (idealWidth === 0)
		{
			idealWidth = column.getWidth();
		}
		if (idealWidth === 0)
		{
			idealWidth = maxWidthRecommendation;
		}
		else if (!column.isWidthOverwritten())
		{
			idealWidth = oFF.XMath.min(idealWidth, maxWidthRecommendation);
		}
		let textMeasureWidth = oFF.XMath.max(0, idealWidth - lengthAddition);
		let length = oFF.PivotTextMeasureUtil.measureTextOrRetokenize(tokenized, fontBold, fontItalic, fontSize, fontFamily, cellWrap, reTokenized, textMeasureWidth);
		if (cellWrap)
		{
			length = oFF.XMath.min(textMeasureWidth, length);
		}
		let tokenizedSize = reTokenized.size();
		if (tokenizedSize > 1 || heightFactor > 1 || tokenizedSize > 0 && oFF.SacTableConstants.DEFAULT_FONT_SIZE !== fontSize)
		{
			cell.setWrapped(oFF.XCollectionUtils.join(reTokenized, "\n"));
			fragmentRow.setTextBaseHeight(oFF.XMath.max(fragmentRow.getHeight(), newHeight + (tokenizedSize - 2) * defaultHeight + defaultHeight * heightFactor));
			cell.setWrap(true);
		}
		let newLength = length + lengthAddition;
		column.setIdealWidth(oFF.XMath.max(idealWidth, newLength));
		column.setDefaultEmWidth(oFF.XMath.max(newLength * factor, column.getDefaultEmWidth()));
	}
};
oFF.PivotTableProxy.prototype.formatDataColumnWidths = function() {};
oFF.PivotTableProxy.prototype.formatHeaderColumnWidths = function() {};
oFF.PivotTableProxy.prototype.formatWidths = function(row, fragmentRow, dataColumnStart, dataColumnEnd)
{
	if (oFF.notNull(row) && !this.m_tableDefinition.getApplicationSettings().skipTableCellWidthCalc())
	{
		let cells = row.getCells();
		if (!fragmentRow.heightDiffersFromDefault())
		{
			if (fragmentRow.isShowCellChart() && fragmentRow.getCellChartOrientation() !== oFF.SacCellChartOrientation.HORIZONTAL)
			{
				fragmentRow.setHeight(oFF.XMath.max(oFF.SacTableConstants.DF_R_N_HEIGHT_VERTICAL_CHARTS, fragmentRow.getHeight()));
			}
			else
			{
				fragmentRow.setHeight(oFF.XMath.max(this.getDefaultRowHeight(), fragmentRow.getHeight()));
			}
		}
		let i;
		let maxWidthRecommendation = this.getMaxRecommendedCellWith();
		let maxHeaderWidthRecommendation = maxWidthRecommendation;
		let maxWidth = this.getMaxCellWidth();
		let maxWidthDivisor = 3;
		let preColumnsAmount = this.getPreColumnsAmount();
		let freezingColumns = this.isFreezeHeaderColumns() || this.getFreezeUpToColumn() > -1;
		let tableWidth = this.getWidth();
		let colAmount = this.isColumnPaginated() ? this.getLocalColumnsAmount() : this.getDataColumnsAmount();
		if (maxWidth > 0)
		{
			if (freezingColumns)
			{
				maxWidthDivisor = oFF.XMath.max(maxWidthDivisor, oFF.XMath.min(oFF.XMath.div(4 * preColumnsAmount * maxWidth, tableWidth * 3), oFF.XMath.div((preColumnsAmount + colAmount) * maxWidth, tableWidth)));
			}
			maxHeaderWidthRecommendation = oFF.XMath.min(maxWidthRecommendation, oFF.XMath.div(maxWidth, maxWidthDivisor));
		}
		fragmentRow.resetTextHeight();
		for (i = 0; i < cells.size(); i++)
		{
			let cell = cells.get(i);
			if (oFF.notNull(cell) && cell.getType() !== oFF.SacTableConstants.CT_IMAGE)
			{
				this.formatCellWidth(fragmentRow, cell, cell.getParentColumn().isHeader() ? maxHeaderWidthRecommendation : maxWidthRecommendation);
			}
		}
	}
};
oFF.PivotTableProxy.prototype.getAvailableDataPointStyle = function()
{
	return oFF.isNull(this.m_tableDefinition) ? null : this.m_tableDefinition.getDataPointStyles();
};
oFF.PivotTableProxy.prototype.getAvailableHighlightAreas = function()
{
	return oFF.isNull(this.m_tableDefinition) ? null : this.m_tableDefinition.getHighlightAreas();
};
oFF.PivotTableProxy.prototype.getBaseTile = function()
{
	return this.m_baseTile;
};
oFF.PivotTableProxy.prototype.getCellChartInfo = function()
{
	return this.m_cellChartInfo;
};
oFF.PivotTableProxy.prototype.getCellChartMemberName = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getCellChartOrientation = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getCellChartType = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getColumnEmWidthsInternal = function()
{
	let columnWidths = oFF.XList.create();
	let i;
	let headerColumnList = this.getHeaderColumnList();
	let size = headerColumnList.size();
	for (i = 0; i < size; i++)
	{
		columnWidths.add(oFF.XIntegerValue.create(headerColumnList.get(i).getDefaultEmWidth()));
	}
	let columnList = this.getColumnList();
	size = columnList.size();
	let accumulator = 0;
	let column;
	for (i = 0; i < size; i++)
	{
		column = columnList.get(i);
		if (oFF.isNull(column))
		{
			break;
		}
		let currentWidth = column.getDefaultEmWidth();
		columnWidths.add(oFF.XIntegerValue.create(currentWidth));
		accumulator = accumulator + currentWidth;
	}
	let average = i === 0 ? 0 : oFF.XMath.div(accumulator, i);
	for (; i < size; i++)
	{
		column = columnList.get(i);
		if (oFF.isNull(column))
		{
			columnWidths.add(oFF.XIntegerValue.create(average));
		}
		else
		{
			columnWidths.add(oFF.XIntegerValue.create(column.getDefaultEmWidth()));
		}
	}
	let totalCount = this.getDataColumnsAmount();
	let maxColumns = this.getMaxColumns();
	for (; i < oFF.XMath.min(totalCount, maxColumns === 0 ? totalCount : maxColumns); i++)
	{
		columnWidths.add(oFF.XIntegerValue.create(average));
	}
	return columnWidths;
};
oFF.PivotTableProxy.prototype.getColumnEmWidthsSubList = function(start, end)
{
	let internalList = this.getColumnEmWidthsInternal();
	let internalListSize = internalList.size();
	return internalList.size() === 0 ? internalList : internalList.sublist(start, end === -1 || end > internalListSize ? internalListSize : end);
};
oFF.PivotTableProxy.prototype.getColumnHeaderGroupNames = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getColumnHeaderMap = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getColumnList = function()
{
	return this.getColumnListExt(0, -1);
};
oFF.PivotTableProxy.prototype.getColumnListExt = function(startColumn, endColumn)
{
	let dcs = this.m_dataColumns.size();
	let iterationEnd = endColumn === -1 ? dcs : oFF.XMath.min(endColumn + 1, dcs);
	return this.m_dataColumns.sublist(oFF.XMath.max(0, startColumn), iterationEnd);
};
oFF.PivotTableProxy.prototype.getColumnWidth = function(index)
{
	let headerColumnList = this.getHeaderColumnList();
	let hcs = headerColumnList.size();
	let dataColumnList = this.getColumnList();
	if (index < hcs)
	{
		return headerColumnList.get(index).getWidth();
	}
	else if (index < hcs + dataColumnList.size())
	{
		return dataColumnList.get(index - hcs).getWidth();
	}
	else
	{
		return oFF.PivotTableProxy.DEFAULT_CELL_WIDTH;
	}
};
oFF.PivotTableProxy.prototype.getColumnsLoadedCount = function()
{
	return oFF.XMath.max(0, this.getPreColumnsAmount()) + (oFF.XCollectionUtils.hasElements(this.getColumnList()) ? oFF.XStream.of(this.getColumnList()).filter((val) => {
		return oFF.notNull(val);
	}).countItems() : 0);
};
oFF.PivotTableProxy.prototype.getColumnsMemberHeaderHandling = function()
{
	return this.m_columnsMemberHeaderHandling;
};
oFF.PivotTableProxy.prototype.getColumnsTotalCount = function()
{
	return oFF.XMath.max(0, this.getPreColumnsAmount()) + this.getDataColumnsAmount();
};
oFF.PivotTableProxy.prototype.getDataColumnTuplesTotalCount = function()
{
	return this.m_baseTile.getColumnsBundle().getTotalTuples();
};
oFF.PivotTableProxy.prototype.getDataColumnsAmount = function()
{
	return oFF.XMath.max(0, this.m_baseTile.getColumnsBundle().getDataTotalCount());
};
oFF.PivotTableProxy.prototype.getDataColumnsLoadedCount = function()
{
	return oFF.XCollectionUtils.hasElements(this.getColumnList()) ? oFF.XStream.of(this.getColumnList()).filter((val) => {
		return oFF.notNull(val);
	}).countItems() : 0;
};
oFF.PivotTableProxy.prototype.getDataPointStyles = function()
{
	return this.m_dataPointStyles;
};
oFF.PivotTableProxy.prototype.getDataPointStylesMatchingExceptionInformation = function(exceptionInfo)
{
	let result = oFF.XList.create();
	oFF.XCollectionUtils.forEach(exceptionInfo, (ei) => {
		let actualExceptionInfo = this.m_matchedExceptionInformation.get(ei.getId());
		if (oFF.notNull(actualExceptionInfo))
		{
			oFF.XCollectionUtils.forEach(actualExceptionInfo.getMatchedStyles(), (ms) => {
				result.add(ms);
			});
		}
	});
	return result;
};
oFF.PivotTableProxy.prototype.getDataRowAmount = function()
{
	return oFF.XMath.max(0, this.m_baseTile.getRowsBundle().getDataTotalCount());
};
oFF.PivotTableProxy.prototype.getDataRowTuplesTotalCount = function()
{
	return this.m_baseTile.getRowsBundle().getTotalTuples();
};
oFF.PivotTableProxy.prototype.getDataRowsLoadedCount = function()
{
	let dataList = this.m_baseTile.getRowsBundle().getDataList();
	return oFF.XCollectionUtils.hasElements(dataList) ? oFF.XStream.of(dataList).filterNullValues().countItems() : 0;
};
oFF.PivotTableProxy.prototype.getDefaultRowHeight = function()
{
	return this.m_defaultRowHeight;
};
oFF.PivotTableProxy.prototype.getDpActionCommandPairsFromSimpleContext = function(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel)
{
	return this.m_actionResolver.getDpCommandPairsFromSimpleContext(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel);
};
oFF.PivotTableProxy.prototype.getEffectiveHighlightedCells = function()
{
	this.applyHighlighting();
	let highlightCoordinates = oFF.XList.create();
	oFF.XCollectionUtils.forEach(this.m_highlightAreas, (highlightArea) => {
		let i;
		let headerRowList = this.m_baseTile.getRowsBundle().getHeaderList();
		let headerRowListFull = this.getHeaderRowList();
		for (i = 0; i < headerRowList.size(); i++)
		{
			this.createHighlightCoordinate(highlightCoordinates, highlightArea, headerRowList.get(i), headerRowListFull.get(i), i);
		}
		let rowDataFragments = this.m_baseTile.getRowsBundle().getDataList();
		let rowList = this.getRowList();
		let rowListSize = rowDataFragments.size();
		let start = this.m_rowStart < 0 ? 0 : oFF.XMath.min(rowListSize, this.m_rowStart);
		let end = this.m_rowEnd < 0 ? rowListSize : oFF.XMath.min(rowListSize, this.m_rowEnd + 1);
		for (i = start; i < end; i++)
		{
			this.createHighlightCoordinate(highlightCoordinates, highlightArea, rowDataFragments.get(i), rowList.get(i), this.getPreRowsAmount() + i);
		}
	});
	return highlightCoordinates;
};
oFF.PivotTableProxy.prototype.getEngine = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_engine);
};
oFF.PivotTableProxy.prototype.getEstimatedColumnPageCount = function()
{
	return this.m_baseTile.getColumnsBundle().getEstimatedPageCount();
};
oFF.PivotTableProxy.prototype.getEstimatedColumnPageInterval = function(columnPage, startTuple, endTuple)
{
	return this.m_baseTile.getColumnsBundle().getEstimatedPageTupleInterval(columnPage, startTuple, endTuple);
};
oFF.PivotTableProxy.prototype.getEstimatedRowPageCount = function()
{
	return this.m_baseTile.getRowsBundle().getEstimatedPageCount();
};
oFF.PivotTableProxy.prototype.getEstimatedRowPageInterval = function(rowPage, startTuple, endTuple)
{
	return this.m_baseTile.getRowsBundle().getEstimatedPageTupleInterval(rowPage, startTuple, endTuple);
};
oFF.PivotTableProxy.prototype.getFilledColumnPageCount = function()
{
	return this.m_baseTile.getColumnsBundle().getFilledPageCount();
};
oFF.PivotTableProxy.prototype.getFilledRowPageCount = function()
{
	return this.m_baseTile.getRowsBundle().getFilledPageCount();
};
oFF.PivotTableProxy.prototype.getFreezeUpToColumn = function()
{
	return this.m_freezeUpToColumn;
};
oFF.PivotTableProxy.prototype.getFreezeUpToRow = function()
{
	return this.m_freezeUpToRow;
};
oFF.PivotTableProxy.prototype.getHeaderColor = function()
{
	return this.m_headerColor;
};
oFF.PivotTableProxy.prototype.getHeaderColumnList = function()
{
	return this.m_headerColumns;
};
oFF.PivotTableProxy.prototype.getHeaderCompactionType = function()
{
	return this.m_headerCompactionType;
};
oFF.PivotTableProxy.prototype.getHeaderEndColumn = function()
{
	return this.m_baseTile.getColumnsBundle().getHeaderEndIndex();
};
oFF.PivotTableProxy.prototype.getHeaderEndRow = function()
{
	return this.m_baseTile.getRowsBundle().getHeaderEndIndex();
};
oFF.PivotTableProxy.prototype.getHeaderRowList = function()
{
	return this.m_headerRowList;
};
oFF.PivotTableProxy.prototype.getHeight = function()
{
	return this.m_height;
};
oFF.PivotTableProxy.prototype.getIndexOfFirstIncompleteTileColumnAfter = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getIndexOfFirstIncompleteTileRowAfter = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getIndexOfFirstUndefinedColumnAfter = function(columnIndex)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getIndexOfFirstUndefinedRowAfter = function(rowIndex)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getIndexOfLastIncompleteTileColumnBefore = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getIndexOfLastIncompleteTileRowBefore = function(columnIndexStart, columnIndexEnd, rowIndexStart, rowIndexEnd)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getIndexOfLastUndefinedColumnBefore = function(columnIndex)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getIndexOfLastUndefinedRowBefore = function(rowIndex)
{
	return 0;
};
oFF.PivotTableProxy.prototype.getLayeredRectangularStyles = oFF.noSupport;
oFF.PivotTableProxy.prototype.getLocalColumnsAmount = function()
{
	return this.m_localColumnsAmount;
};
oFF.PivotTableProxy.prototype.getLocalColumnsOffset = function()
{
	return this.m_localColumnsOffset;
};
oFF.PivotTableProxy.prototype.getLocalRowList = function()
{
	return this.m_localRowList;
};
oFF.PivotTableProxy.prototype.getLocalRowsAmount = function()
{
	return this.m_localRowsAmount;
};
oFF.PivotTableProxy.prototype.getLocalRowsOffset = function()
{
	return this.m_localRowsOffset;
};
oFF.PivotTableProxy.prototype.getMaxCellWidth = function()
{
	return this.m_maxCellWidth;
};
oFF.PivotTableProxy.prototype.getMaxColumns = function()
{
	return this.m_maxColumns;
};
oFF.PivotTableProxy.prototype.getMaxRecommendedCellWith = function()
{
	return this.m_maxRecommendedCellWidth;
};
oFF.PivotTableProxy.prototype.getMaxRows = function()
{
	return this.m_maxRows;
};
oFF.PivotTableProxy.prototype.getMemberSortIconsLevel = function()
{
	return this.m_memberSortIconsLevel;
};
oFF.PivotTableProxy.prototype.getMinCellWidth = function()
{
	return this.m_minCellWidth;
};
oFF.PivotTableProxy.prototype.getNewTableStyleWithPriority = function(priority)
{
	return null;
};
oFF.PivotTableProxy.prototype.getOverallHeight = function()
{
	let overallHeight;
	let rowPaginated = this.isRowPaginated();
	let rowAmount = rowPaginated ? this.getLocalRowsAmount() : this.getDataRowAmount();
	let overallRowsAmount = this.getPreRowsAmount() + rowAmount;
	let ehp = (r) => {
		return oFF.notNull(r) && r.heightDiffersFromDefault();
	};
	let explicitHeightHeaderRows = oFF.XStream.of(this.getHeaderRowList()).filter(ehp).collect(oFF.XStreamCollector.toList());
	let explicitHeightDataRows = oFF.XStream.of(rowPaginated ? this.getLocalRowList() : this.getRowList()).filter(ehp).collect(oFF.XStreamCollector.toList());
	let sumReducer = (a, b) => {
		return oFF.XIntegerValue.create(a.getInteger() + b.getEffectiveHeight());
	};
	let collectedRowHeight = oFF.XStream.of(explicitHeightHeaderRows).reduce(oFF.XIntegerValue.create(0), sumReducer).getInteger() + oFF.XStream.of(explicitHeightDataRows).reduce(oFF.XIntegerValue.create(0), sumReducer).getInteger();
	overallHeight = (overallRowsAmount - explicitHeightHeaderRows.size() - explicitHeightDataRows.size()) * this.getDefaultRowHeight() + collectedRowHeight;
	return overallHeight;
};
oFF.PivotTableProxy.prototype.getPagedColumnsAmount = function()
{
	return this.isColumnPaginated() ? this.getLocalColumnsAmount() : this.getDataColumnsAmount();
};
oFF.PivotTableProxy.prototype.getPagedColumnsOffset = function()
{
	return this.isColumnPaginated() ? this.m_localColumnsOffset : 0;
};
oFF.PivotTableProxy.prototype.getPagedRowsAmount = function()
{
	return this.isRowPaginated() ? this.getLocalRowsAmount() : this.getDataRowAmount();
};
oFF.PivotTableProxy.prototype.getPagedRowsOffset = function()
{
	return this.isRowPaginated() ? this.m_localRowsOffset : 0;
};
oFF.PivotTableProxy.prototype.getPreColumnsAmount = function()
{
	return this.m_baseTile.getColumnsBundle().getHeaderList().size();
};
oFF.PivotTableProxy.prototype.getPreRowsAmount = function()
{
	return this.m_baseTile.getRowsBundle().getHeaderList().size();
};
oFF.PivotTableProxy.prototype.getQueryModel = function()
{
	return this.m_queryModel;
};
oFF.PivotTableProxy.prototype.getRecentTileCarrier = function()
{
	return this.m_tileCarrier;
};
oFF.PivotTableProxy.prototype.getRowHeaderGroupNames = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getRowHeaderMap = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getRowList = function()
{
	return this.m_dataRowList;
};
oFF.PivotTableProxy.prototype.getRowsLoadedCount = function()
{
	return oFF.XMath.max(0, this.getPreRowsAmount()) + this.getDataRowsLoadedCount();
};
oFF.PivotTableProxy.prototype.getRowsMemberHeaderHandling = function()
{
	return this.m_rowsMemberHeaderHandling;
};
oFF.PivotTableProxy.prototype.getRowsTotalCount = function()
{
	return oFF.XMath.max(0, this.getPreRowsAmount()) + this.getDataRowAmount();
};
oFF.PivotTableProxy.prototype.getSecondaryTableStyles = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.getTableColumnOffsetForTupleIndex = function(tupleIndex)
{
	return this.m_baseTile.getColumnsBundle().getTupleRanges().get(tupleIndex).getFirstObject().getInteger();
};
oFF.PivotTableProxy.prototype.getTableMarkups = oFF.noSupport;
oFF.PivotTableProxy.prototype.getTableMemberHeaderHandling = function()
{
	return this.m_tableMemberHeaderHandling;
};
oFF.PivotTableProxy.prototype.getTableRowOffsetForTupleIndex = function(tupleIndex)
{
	return this.getPreRowsAmount() + this.m_baseTile.getRowsBundle().getTupleRanges().get(tupleIndex).getFirstObject().getInteger();
};
oFF.PivotTableProxy.prototype.getTableStyle = function()
{
	return this.m_baseTile.getTableStyle();
};
oFF.PivotTableProxy.prototype.getTitle = function()
{
	let title = this.m_title;
	if (oFF.isNull(title) && oFF.notNull(this.m_queryModel))
	{
		title = this.m_queryModel.getText();
		if (oFF.XStringUtils.isNullOrEmpty(title))
		{
			title = this.m_queryModel.getName();
		}
		if (oFF.XStringUtils.isNullOrEmpty(title))
		{
			title = "Query Model without a name";
		}
	}
	return title;
};
oFF.PivotTableProxy.prototype.getTotalLevel = function()
{
	return 0;
};
oFF.PivotTableProxy.prototype.getTotalLevel0Color = function()
{
	return this.m_totalLevel0Color;
};
oFF.PivotTableProxy.prototype.getTotalLevel1Color = function()
{
	return this.m_totalLevel1Color;
};
oFF.PivotTableProxy.prototype.getTotalLevel2Color = function()
{
	return this.m_totalLevel2Color;
};
oFF.PivotTableProxy.prototype.getTotalLevel3Color = function()
{
	return this.m_totalLevel3Color;
};
oFF.PivotTableProxy.prototype.getTotalLevel4Color = function()
{
	return this.m_totalLevel4Color;
};
oFF.PivotTableProxy.prototype.getTotalLevel5Color = function()
{
	return this.m_totalLevel5Color;
};
oFF.PivotTableProxy.prototype.getTotalLevel6Color = function()
{
	return this.m_totalLevel6Color;
};
oFF.PivotTableProxy.prototype.getTotalRowDiff = function()
{
	return this.m_totalRowDiff;
};
oFF.PivotTableProxy.prototype.getUriFromAction = function(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel)
{
	return this.m_actionResolver.getUriFromSimpleContext(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel);
};
oFF.PivotTableProxy.prototype.getWidth = function()
{
	return this.m_width;
};
oFF.PivotTableProxy.prototype.hasHierarchy = function()
{
	return this.m_hasHierarchyActive;
};
oFF.PivotTableProxy.prototype.injectStyleToList = function(stylesList)
{
	this.m_baseTile.injectStyleToList(stylesList);
};
oFF.PivotTableProxy.prototype.isAllowTextEdit = function()
{
	return this.m_allowTextEdit;
};
oFF.PivotTableProxy.prototype.isAxisReversed = function(axis)
{
	let reversedHierarchy = false;
	let udh = axis.getModelCapabilities().supportsUniversalDisplayHierarchies() ? axis.getQueryModel().getUniversalDisplayHierarchies().getByAxisType(axis.getType()) : null;
	if (oFF.XObjectExt.isValidObject(udh) && udh.isActive())
	{
		if (this.m_queryModel.getSession().hasFeature(oFF.FeatureToggleOlap.UDH_ALIGNMENT))
		{
			reversedHierarchy = axis.getResultAlignment() === oFF.ResultAlignment.BOTTOM;
		}
	}
	else
	{
		for (let i = 0; i < axis.size(); i++)
		{
			let dim = axis.get(i);
			if (dim.isHierarchyActive())
			{
				reversedHierarchy = dim.getLowerLevelNodeAlignment() === oFF.Alignment.CHILDREN_ABOVE_PARENT;
				break;
			}
		}
	}
	return reversedHierarchy;
};
oFF.PivotTableProxy.prototype.isAxisValidForMemberSort = function(orthogonalAxis)
{
	let valid;
	if (this.m_memberSortIconsLevel === oFF.SacTableConstants.N_MEMBER_SORT_ICONS_NONE)
	{
		valid = false;
	}
	else if (this.m_memberSortIconsLevel === oFF.SacTableConstants.N_MEMBER_SORT_ICONS_MAXIMAL)
	{
		valid = true;
	}
	else
	{
		let dimOnAxis = this.checkDimensionOnAxis(orthogonalAxis, this.m_queryModel.getVersionDimension());
		dimOnAxis = dimOnAxis || this.checkDimensionOnAxis(orthogonalAxis, this.m_queryModel.getAccountDimension());
		dimOnAxis = dimOnAxis || this.checkDimensionOnAxis(orthogonalAxis, this.m_queryModel.getMeasureDimension());
		dimOnAxis = dimOnAxis || this.checkDimensionOnAxis(orthogonalAxis, this.m_queryModel.getNonMeasureDimension());
		if (this.m_memberSortIconsLevel === oFF.SacTableConstants.N_MEMBER_SORT_ICONS_EXTENSIVE)
		{
			valid = !dimOnAxis;
		}
		else
		{
			valid = !dimOnAxis && orthogonalAxis === this.m_queryModel.getRowsAxis() && this.m_queryModel.getColumnsAxis().size() === 1;
		}
	}
	return valid;
};
oFF.PivotTableProxy.prototype.isColorateHeaderCells = function()
{
	return this.m_colorateHeaderCells;
};
oFF.PivotTableProxy.prototype.isColorateTotals = function()
{
	return oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel0Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel1Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel2Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel3Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel4Color) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_totalLevel5Color);
};
oFF.PivotTableProxy.prototype.isColumnInsertOrHidePresent = function()
{
	return false;
};
oFF.PivotTableProxy.prototype.isColumnPaginated = function()
{
	return this.m_tableDefinition.getTableViewportPagingSettings().columnPagingActive();
};
oFF.PivotTableProxy.prototype.isEffectivelyShownDimensionTitles = function()
{
	return this.m_showDimensionTitles || this.m_gridContainer.getRowsAxis().getTuplesTotalCount() === 0 && this.m_gridContainer.getColumnsAxis().getTuplesTotalCount() === 0;
};
oFF.PivotTableProxy.prototype.isEmptyColumnDimensions = function()
{
	return this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis().size() === 0;
};
oFF.PivotTableProxy.prototype.isEmptyRowDimensions = function()
{
	let rowsAxis = this.m_gridContainer.getRowsAxis();
	return oFF.isNull(rowsAxis) || rowsAxis.getVisibleComponentsOnAxis().isEmpty();
};
oFF.PivotTableProxy.prototype.isFreezeHeaderColumns = function()
{
	return this.m_freezeHeaderColumns;
};
oFF.PivotTableProxy.prototype.isFreezeHeaderRows = function()
{
	return this.m_freezeHeaderRows;
};
oFF.PivotTableProxy.prototype.isHeaderComplete = function()
{
	return this.m_headerComplete;
};
oFF.PivotTableProxy.prototype.isHideNumberForCellChart = function()
{
	return false;
};
oFF.PivotTableProxy.prototype.isMergeRepetitiveHeaderCells = function()
{
	return this.m_baseTile.getTableMemberHeaderHandling() === oFF.SacTableMemberHeaderHandling.MERGE;
};
oFF.PivotTableProxy.prototype.isPartial = function()
{
	return this.m_partial;
};
oFF.PivotTableProxy.prototype.isRepetitiveHeaderNames = function()
{
	return this.m_baseTile.getTableMemberHeaderHandling() === oFF.SacTableMemberHeaderHandling.REPETITIVE;
};
oFF.PivotTableProxy.prototype.isReversedHierarchy = function()
{
	return this.m_reversedHierarchy;
};
oFF.PivotTableProxy.prototype.isRowInsertOrHidePresent = function()
{
	return false;
};
oFF.PivotTableProxy.prototype.isRowPaginated = function()
{
	return this.m_tableDefinition.getTableViewportPagingSettings().rowPagingActive();
};
oFF.PivotTableProxy.prototype.isShowCellChart = function()
{
	return this.m_baseTile.isShowCellChart();
};
oFF.PivotTableProxy.prototype.isShowCoordinateHeader = function()
{
	return this.m_showCoordinateHeader;
};
oFF.PivotTableProxy.prototype.isShowDimensionTitles = function()
{
	return this.m_showDimensionTitles;
};
oFF.PivotTableProxy.prototype.isShowFreezeLines = function()
{
	return this.m_showFreezeLines;
};
oFF.PivotTableProxy.prototype.isShowGrid = function()
{
	return this.m_showGrid;
};
oFF.PivotTableProxy.prototype.isShowSubTitle = function()
{
	return this.m_showSubTitle;
};
oFF.PivotTableProxy.prototype.isShowTableDetails = function()
{
	return this.m_showTableDetails;
};
oFF.PivotTableProxy.prototype.isShowTableTitle = function()
{
	return this.m_showTableTitle;
};
oFF.PivotTableProxy.prototype.isStripeDataColumns = function()
{
	return this.m_stripeDataColumns;
};
oFF.PivotTableProxy.prototype.isStripeDataRows = function()
{
	return this.m_stripeDataRows;
};
oFF.PivotTableProxy.prototype.isTotalsContext = function()
{
	return false;
};
oFF.PivotTableProxy.prototype.matchesParameter = function(value, parameter)
{
	return (!oFF.TriStateBool.isExplicitBooleanValue(parameter.getMatchesLeaves()) || parameter.getMatchesLeaves().getBoolean() === (value.getDrillState() === oFF.DrillState.LEAF)) && (!oFF.TriStateBool.isExplicitBooleanValue(parameter.getMatchesExpanded()) || parameter.getMatchesExpanded().getBoolean() === (value.getDrillState() === oFF.DrillState.EXPANDED)) && (!oFF.TriStateBool.isExplicitBooleanValue(parameter.getMatchesTotals()) || parameter.getMatchesTotals().getBoolean() === (value.getDimensionMemberType().isTypeOf(oFF.MemberType.RESULT)));
};
oFF.PivotTableProxy.prototype.matchesTuple = function(rootTuple, axisMap)
{
	return oFF.XStream.of(rootTuple.getValues()).filter((mr) => {
		return oFF.XObjectExt.isValidObject(mr.getModelReference());
	}).filter((v) => {
		return v.getModelReference().getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD);
	}).map((va) => {
		return va;
	}).allMatch((value) => {
		let fieldReference = value.getFieldReference();
		let parameter = axisMap.getByKey(oFF.XIntegerValue.create(fieldReference.getDimensionIndex()));
		return oFF.isNull(parameter) || parameter.getOlapComponentType() !== oFF.OlapComponentType.QUICK_ACTION_PARAMETER_FIELD_VALUE || this.matchesParameter(value, parameter);
	});
};
oFF.PivotTableProxy.prototype.newDataRow = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.newDataRowAt = function(dataIndex, overwriteAtPosition)
{
	return null;
};
oFF.PivotTableProxy.prototype.newHeaderRow = function()
{
	return null;
};
oFF.PivotTableProxy.prototype.newHeaderRowAt = function(index)
{
	return null;
};
oFF.PivotTableProxy.prototype.postFormatHeaderColumnsForDataRows = function(dataRowList)
{
	let cell;
	let subCell;
	let baseRow;
	let merger;
	let columnsSize = this.getHeaderColumnList().size();
	for (let i = 0; i < columnsSize; i++)
	{
		if (oFF.XCollectionUtils.hasElements(dataRowList))
		{
			for (let j = 0; j < dataRowList.size(); j++)
			{
				baseRow = dataRowList.get(j);
				if (oFF.isNull(baseRow))
				{
					continue;
				}
				cell = baseRow.getCells().get(i);
				if (oFF.notNull(cell) && !cell.isRepeatedHeader())
				{
					for (merger = 0; j + merger + 1 < dataRowList.size(); merger++)
					{
						let subRow = dataRowList.get(j + merger + 1);
						if (oFF.isNull(subRow))
						{
							break;
						}
						subCell = subRow.getCells().get(i);
						if (subRow.getTupleIndex() > -1 && !subCell.isRepeatedHeader())
						{
							break;
						}
					}
					j = j + merger;
					cell.setRepetitiveRows(merger);
				}
			}
		}
	}
};
oFF.PivotTableProxy.prototype.postFormatHeaderColumnsForHeaderRows = function(headerRowList)
{
	let cell;
	let subCell;
	let baseRow;
	let merger;
	let columnsSize = this.getHeaderColumnList().size();
	if (columnsSize > 0 && oFF.XCollectionUtils.hasElements(headerRowList))
	{
		baseRow = headerRowList.get(0);
		cell = baseRow.getCells().get(0);
		if (oFF.notNull(cell) && cell.getType() === -1)
		{
			for (merger = 0; merger + 1 < headerRowList.size(); merger++)
			{
				subCell = headerRowList.get(merger + 1).getCells().get(0);
				if (oFF.isNull(subCell) || subCell.getType() !== -1)
				{
					break;
				}
			}
			cell.setRepetitiveRows(merger);
		}
	}
};
oFF.PivotTableProxy.prototype.postFormatHeaderRows = function(headerRows)
{
	let headerColSize = this.getHeaderColumnList().size();
	for (let i = 0; i < headerRows.size(); i++)
	{
		let merger = 0;
		let headerRow = headerRows.get(i);
		let cellsList = headerRow.getCells();
		if (cellsList.size() === 0)
		{
			break;
		}
		let cell = cellsList.get(0);
		let subCell;
		if (i === 0 && oFF.notNull(cell) && cell.getType() === -1)
		{
			for (merger = 0; merger + 1 < cellsList.size(); merger++)
			{
				subCell = cellsList.get(merger + 1);
				if (oFF.isNull(subCell) || subCell.getType() !== -1)
				{
					break;
				}
			}
			cell.setRepetitiveColumns(merger);
		}
		for (let j = headerColSize; j < cellsList.size(); j++)
		{
			cell = cellsList.get(j);
			if (oFF.notNull(cell) && !cell.isRepeatedHeader())
			{
				for (merger = 0; j + merger + 1 < cellsList.size(); merger++)
				{
					subCell = cellsList.get(j + merger + 1);
					let parentColumn = oFF.isNull(subCell) ? null : subCell.getParentColumn();
					if (oFF.isNull(parentColumn) || parentColumn.getTupleIndex() > -1 && !subCell.isRepeatedHeader())
					{
						break;
					}
				}
				j = j + merger;
				cell.setRepetitiveColumns(merger);
			}
		}
	}
};
oFF.PivotTableProxy.prototype.prepareColumnList = function(startColumn, endColumn)
{
	let list = oFF.XList.create();
	let tileDataListSize = this.m_baseTile.getColumnsBundle().getDataList().size();
	let iterationEnd = endColumn === -1 ? tileDataListSize : oFF.XMath.min(endColumn + 1, tileDataListSize);
	let newColumn;
	for (let i = oFF.XMath.max(0, startColumn); i < iterationEnd; i++)
	{
		let tileDataColumn = this.m_baseTile.getColumnsBundle().getDataAt(i);
		newColumn = oFF.PivotProxyColumn.create(this, tileDataColumn);
		list.add(newColumn);
	}
	return list;
};
oFF.PivotTableProxy.prototype.prepareHeaderColumnList = function()
{
	let list = oFF.XList.create();
	let tileHeaderListSize = this.m_baseTile.getColumnsBundle().getHeaderList().size();
	let componentsOnAxis = this.m_gridContainer.getRowsAxis().getVisibleComponentsOnAxis();
	let newColumn;
	for (let i = 0; i < tileHeaderListSize; i++)
	{
		let tileHeaderColumn = this.m_baseTile.getColumnsBundle().getHeaderAt(i);
		newColumn = oFF.PivotProxyColumn.create(this, tileHeaderColumn);
		let headerIndex = tileHeaderColumn.getComponentIndex();
		let component;
		if (headerIndex < componentsOnAxis.size() && headerIndex > -1)
		{
			component = componentsOnAxis.get(headerIndex);
			let field = component.getField();
			newColumn.setFieldName(field.getName());
			newColumn.setHeader(true);
			newColumn.setDimensionIndex(component.getDimensionIndex());
		}
		list.add(newColumn);
	}
	return list;
};
oFF.PivotTableProxy.prototype.prepareHeaderRowListExt = function(startColumn, endColumn)
{
	let list = oFF.XList.create();
	let tileHeaderListSize = this.m_baseTile.getRowsBundle().getHeaderList().size();
	let componentsOnAxis = this.m_gridContainer.getColumnsAxis().getVisibleComponentsOnAxis();
	let newRow;
	for (let i = 0; i < tileHeaderListSize; i++)
	{
		let tileHeaderRow = this.m_baseTile.getRowsBundle().getHeaderAt(i);
		newRow = oFF.PivotProxyRow.create(this, tileHeaderRow);
		let headerComponentIndex = tileHeaderRow.getComponentIndex();
		let component;
		if (headerComponentIndex < componentsOnAxis.size() && headerComponentIndex > -1)
		{
			component = componentsOnAxis.get(headerComponentIndex);
			let field = component.getField();
			newRow.setFieldName(field.getName());
			newRow.setHeader(true);
			newRow.setDimensionIndex(component.getDimensionIndex());
		}
		list.add(newRow);
		this.applyHeaderRowCells(i, newRow, tileHeaderRow, headerComponentIndex, startColumn, endColumn);
		this.formatWidths(newRow, tileHeaderRow, startColumn, endColumn);
	}
	if (oFF.XCollectionUtils.hasElements(list))
	{
		list.get(list.size() - 1).setLastHeader(true);
	}
	this.postFormatHeaderRows(list);
	this.postFormatHeaderColumnsForHeaderRows(list);
	this.m_cachedHeaderRowList = list;
	return list;
};
oFF.PivotTableProxy.prototype.prepareHyperLinkLevel = function(action)
{
	let coordinates = this.m_actionResolver.getSimpleGridCoordinates(action);
	let columnLevel = coordinates.getColumnCoordinate();
	let rowLevel = coordinates.getRowCoordinate();
	if (rowLevel > -1 && columnLevel > -1)
	{
		this.m_dataCellHyperlinks.add(coordinates);
	}
	else if (rowLevel > -1)
	{
		this.addHyperlinkQuickAction(this.m_rowHeaderHyperlinkLevels, rowLevel, coordinates);
	}
	else if (columnLevel > -1)
	{
		this.addHyperlinkQuickAction(this.m_columnHeaderHyperlinkLevels, columnLevel, coordinates);
	}
};
oFF.PivotTableProxy.prototype.prepareHyperlinkLevels = function()
{
	if (this.m_showHyperlinks)
	{
		oFF.XCollectionUtils.forEach(this.getQueryModel().getQuickActionManager(), (action) => {
			this.prepareHyperLinkLevel(action);
		});
	}
	else
	{
		this.m_dataCellHyperlinks.clear();
		this.m_rowHeaderHyperlinkLevels.clear();
		this.m_columnHeaderHyperlinkLevels.clear();
	}
};
oFF.PivotTableProxy.prototype.prepareLocalRowList = function(rowStart, rowEnd, columnStart, columnEnd)
{
	this.m_localRowList = this.prepareRowListExt(rowStart, rowEnd, columnStart, columnEnd);
	if (this.isRowPaginated())
	{
		this.m_dataRowList.clear();
		this.m_dataRowList.addAll(this.m_localRowList);
	}
	else
	{
		if (this.m_localColumnsOffset !== columnStart || this.m_localColumnsAmount + this.m_localColumnsOffset - 1 !== columnEnd)
		{
			this.m_dataRowList.clear();
		}
		let dataRowSize = this.m_dataRowList.size();
		while (rowStart > dataRowSize)
		{
			this.m_dataRowList.add(null);
			dataRowSize++;
		}
		let i = 0;
		let j = rowStart;
		for (; i < this.m_localRowList.size() && j < dataRowSize; j++, i++)
		{
			this.m_dataRowList.set(j, this.m_localRowList.get(i));
		}
		for (; i < this.m_localRowList.size(); i++, j++)
		{
			this.m_dataRowList.add(this.m_localRowList.get(i));
		}
		let rowBundle = this.m_baseTile.getRowsBundle();
		if (rowBundle.getTuples().size() !== rowBundle.getDataList().size())
		{
			for (i = this.m_dataRowList.size() - 1; i >= j; i--)
			{
				this.m_dataRowList.removeAt(i);
			}
		}
	}
	this.m_localRowsOffset = rowStart;
	this.m_localColumnsOffset = columnStart;
	this.m_localRowsAmount = this.m_localRowList.size();
	this.m_localColumnsAmount = columnEnd - columnStart + 1;
};
oFF.PivotTableProxy.prototype.prepareRowListExt = function(startRow, endRow, startColumn, endColumn)
{
	let list = oFF.XList.create();
	let tileDataListSize = this.m_baseTile.getRowsBundle().getDataList().size();
	let iterationEnd = endRow === -1 ? tileDataListSize : oFF.XMath.min(endRow + 1, tileDataListSize);
	let newRow;
	for (let i = oFF.XMath.max(0, startRow); i < iterationEnd; i++)
	{
		let tileDataRow = this.m_baseTile.getRowsBundle().getDataAt(i);
		if (oFF.notNull(tileDataRow))
		{
			newRow = oFF.PivotProxyRow.create(this, tileDataRow);
			let tupleIndex = tileDataRow.getTupleIndex();
			this.applyTupleRowCells(i, newRow, tileDataRow, tupleIndex, startColumn, endColumn);
		}
		else
		{
			newRow = null;
		}
		list.add(newRow);
	}
	this.expandDataPointStyles();
	oFF.XCollectionUtils.forEach(list, (le) => {
		if (oFF.notNull(le))
		{
			this.formatWidths(le, le.getFragmentRow(), startColumn, endColumn);
		}
	});
	this.postFormatHeaderColumnsForDataRows(list);
	this.m_cachedDataRowList = list;
	return list;
};
oFF.PivotTableProxy.prototype.prepareTable = function(startRow, endRow, startColumn, endColumn)
{
	this.m_headerComplete = false;
	this.applyPagingSettings();
	this.applyDataPointStyles();
	this.prepareHyperlinkLevels();
	this.m_headerColumns.clear();
	this.m_headerColumns.addAll(this.prepareHeaderColumnList());
	this.m_headerRowList = oFF.XObjectExt.release(this.m_headerRowList);
	while (this.m_dataColumns.size() <= endColumn)
	{
		this.m_dataColumns.add(null);
	}
	let columnList = this.prepareColumnList(startColumn, endColumn);
	for (let a = 0, i = startColumn; i <= endColumn && a < columnList.size(); i++, a++)
	{
		this.m_dataColumns.set(i, columnList.get(a));
	}
	let columnsBundle = this.m_baseTile.getColumnsBundle();
	if (columnsBundle.getTuples().size() !== columnsBundle.getDataList().size())
	{
		for (let i = this.m_dataColumns.size() - 1; i > endColumn; i--)
		{
			this.m_dataColumns.removeAt(i);
		}
	}
	this.updateColumnDimensions();
	this.updateRowDimensions();
	this.setHasHierarchy(this.checkAnyHierarchyActive());
	this.checkReversedHierarchy();
	let pageSettings = this.m_tableDefinition.getTableViewportPagingSettings();
	let effectiveRenderStartColumn = 0;
	let effectiveRenderEndColumn = -1;
	let effectiveStartRow = startRow;
	let effectiveEndRow = endRow;
	if (pageSettings.rowPagingActive() || pageSettings.columnPagingActive())
	{
		this.m_baseTile.applyColumnAndRowSizes(this.m_tableDefinition.getFixedPixelHeightsForRows(), this.m_tableDefinition.getFixedPixelWidthsForColumns());
		this.m_baseTile.getRowsBundle().updatePageRanges();
		this.m_baseTile.getColumnsBundle().updatePageRanges();
		if (pageSettings.columnPagingActive() && pageSettings.getColumnPage() <= this.m_baseTile.getColumnsBundle().getFilledPageCount())
		{
			let columnRange = this.m_baseTile.getColumnsBundle().getEstimatedPageInterval(pageSettings.getColumnPage(), pageSettings.getStartColumn(), pageSettings.getEndColumn());
			effectiveRenderStartColumn = columnRange.getFirstObject().getInteger();
			effectiveRenderEndColumn = oFF.XMath.min(columnRange.getSecondObject().getInteger(), this.m_gridContainer.getDataColumnsTotalCount() - 1);
		}
		if (pageSettings.rowPagingActive() && pageSettings.getRowPage() <= this.m_baseTile.getRowsBundle().getFilledPageCount())
		{
			let rowRange = this.m_baseTile.getRowsBundle().getEstimatedPageInterval(pageSettings.getRowPage(), pageSettings.getStartRow(), pageSettings.getEndRow());
			effectiveStartRow = rowRange.getFirstObject().getInteger();
			effectiveEndRow = oFF.XMath.min(rowRange.getSecondObject().getInteger(), this.m_gridContainer.getDataRowsTotalCount() - 1);
		}
	}
	this.m_headerRowList = this.prepareHeaderRowListExt(effectiveRenderStartColumn, effectiveRenderEndColumn);
	this.prepareLocalRowList(effectiveStartRow, effectiveEndRow, effectiveRenderStartColumn, effectiveRenderEndColumn);
	this.m_baseTile.applyColumnAndRowSizes(this.m_tableDefinition.getFixedPixelHeightsForRows(), this.m_tableDefinition.getFixedPixelWidthsForColumns());
	this.m_headerComplete = true;
};
oFF.PivotTableProxy.prototype.putColumnHeaderGroupMapping = function(group, baseGroup) {};
oFF.PivotTableProxy.prototype.putRowHeaderGroupMapping = function(group, baseGroup) {};
oFF.PivotTableProxy.prototype.reApplyTableStyling = function()
{
	this.prepareHyperlinkLevels();
	this.getEngine().applyTableDefinition(this.m_tableDefinition);
	this.setPartial(false);
	this.getEngine().reFillForFormatting();
};
oFF.PivotTableProxy.prototype.recreateHeaderColumns = function()
{
	this.m_headerComplete = false;
	this.prepareHyperlinkLevels();
	this.getEngine().applyTableDefinition(this.m_tableDefinition);
	this.getEngine().reCreateHeaders();
	this.m_headerColumns.clear();
	this.m_headerColumns.addAll(this.prepareHeaderColumnList());
	let pageSettings = this.m_tableDefinition.getTableViewportPagingSettings();
	let columnStart = 0;
	let columnEnd = -1;
	let rowStart = 0;
	let rowEnd = -1;
	if (pageSettings.rowPagingActive() || pageSettings.columnPagingActive())
	{
		this.m_baseTile.applyColumnAndRowSizes(this.m_tableDefinition.getFixedPixelHeightsForRows(), this.m_tableDefinition.getFixedPixelWidthsForColumns());
		this.m_baseTile.getRowsBundle().updatePageRanges();
		this.m_baseTile.getColumnsBundle().updatePageRanges();
		if (pageSettings.columnPagingActive() && pageSettings.getColumnPage() < this.m_baseTile.getColumnsBundle().getFilledPageCount())
		{
			let columnRange = this.m_baseTile.getColumnsBundle().getEstimatedPageInterval(pageSettings.getColumnPage(), pageSettings.getStartColumn(), pageSettings.getEndColumn());
			columnStart = columnRange.getFirstObject().getInteger();
			columnEnd = oFF.XMath.min(columnRange.getSecondObject().getInteger(), this.m_gridContainer.getDataColumnsTotalCount() - 1);
		}
		if (pageSettings.rowPagingActive() && pageSettings.getRowPage() < this.m_baseTile.getRowsBundle().getFilledPageCount())
		{
			let rowRange = this.m_baseTile.getRowsBundle().getEstimatedPageInterval(pageSettings.getRowPage(), pageSettings.getStartRow(), pageSettings.getEndRow());
			rowStart = rowRange.getFirstObject().getInteger();
			rowEnd = oFF.XMath.min(rowRange.getSecondObject().getInteger(), this.m_gridContainer.getDataRowsTotalCount() - 1);
		}
	}
	this.m_headerRowList = this.prepareHeaderRowListExt(columnStart, columnEnd);
	this.setPartial(false);
	this.prepareLocalRowList(rowStart, rowEnd, columnStart, columnEnd);
	this.m_baseTile.applyColumnAndRowSizes(this.m_tableDefinition.getFixedPixelHeightsForRows(), this.m_tableDefinition.getFixedPixelWidthsForColumns());
	this.m_headerComplete = true;
};
oFF.PivotTableProxy.prototype.releaseObject = function()
{
	this.m_engine = oFF.XObjectExt.release(this.m_engine);
	this.m_baseTile = oFF.XObjectExt.release(this.m_baseTile);
	this.m_gridContainer = null;
	this.m_headerCompactionType = null;
	this.m_headerColumns = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_headerColumns);
	this.m_dataColumns = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dataColumns);
	this.m_highlightAreas = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_highlightAreas);
	this.m_rowStart = -1;
	this.m_rowEnd = -1;
	this.m_colStart = -1;
	this.m_colEnd = -1;
	this.m_freezeUpToColumn = -1;
	this.m_freezeUpToRow = -1;
	this.m_height = -1;
	this.m_width = -1;
	this.m_defaultRowHeight = 0;
	this.m_queryModel = null;
	this.m_caps = null;
	this.m_dataPointStyles = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dataPointStyles);
	this.m_dataPointStyleMap = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dataPointStyleMap);
	this.m_matchedExceptionInformation = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_matchedExceptionInformation);
	this.m_dataPointContextMatcher = oFF.XObjectExt.release(this.m_dataPointContextMatcher);
	this.m_minCellWidth = 0;
	this.m_maxCellWidth = 0;
	this.m_maxRecommendedCellWidth = 0;
	this.m_dataRowList = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dataRowList);
	this.m_dataColumns = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_dataColumns);
	this.m_headerRowList = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_headerRowList);
	this.m_headerColumns = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_headerColumns);
	this.m_localRowList = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_localRowList);
	this.m_cellChartInfo = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_cellChartInfo);
	this.m_actionResolver = oFF.XObjectExt.release(this.m_actionResolver);
	this.setReversedHierarchy(false);
};
oFF.PivotTableProxy.prototype.removeDataColumnAt = oFF.noSupport;
oFF.PivotTableProxy.prototype.removeHeaderColumnAt = oFF.noSupport;
oFF.PivotTableProxy.prototype.resetCellMerger = function(columnIndex, cells)
{
	for (let nci = columnIndex; nci < cells.size(); nci++)
	{
		let cell = cells.get(nci);
		if (cell.getMergedColumns() < 0)
		{
			cell.setMergedColumnsInternal(0);
			cell.setMergedRowsInternal(0);
		}
		else
		{
			break;
		}
	}
};
oFF.PivotTableProxy.prototype.resetRenderingScope = function()
{
	this.m_rowStart = -1;
	this.m_rowEnd = -1;
	this.m_colStart = -1;
	this.m_colEnd = -1;
};
oFF.PivotTableProxy.prototype.setAllowTextEdit = function(allowTextEdit)
{
	this.m_allowTextEdit = allowTextEdit;
};
oFF.PivotTableProxy.prototype.setBaseTile = function(baseTile)
{
	this.m_baseTile = baseTile;
};
oFF.PivotTableProxy.prototype.setCellChartMemberName = function(cellChartMemberName) {};
oFF.PivotTableProxy.prototype.setCellChartOrientation = function(cellChartOrientation) {};
oFF.PivotTableProxy.prototype.setCellChartType = function(cellChartType) {};
oFF.PivotTableProxy.prototype.setColorateHeaderCells = function(colorateHeaderCells)
{
	this.m_colorateHeaderCells = colorateHeaderCells;
};
oFF.PivotTableProxy.prototype.setColorateTotals = function(colorateTotals)
{
	this.m_totalLevel5Color = colorateTotals ? "rgba(220,220,150,0.3)" : null;
	this.m_totalLevel4Color = colorateTotals ? "rgba(230,230,150,0.4)" : null;
	this.m_totalLevel3Color = colorateTotals ? "rgba(220,220,135,0.4)" : null;
	this.m_totalLevel2Color = colorateTotals ? "rgba(220,220,135,0.5)" : null;
	this.m_totalLevel1Color = colorateTotals ? "rgba(220,220,220,1)" : null;
	this.m_totalLevel0Color = colorateTotals ? "rgba(204,204,204,1)" : null;
};
oFF.PivotTableProxy.prototype.setColumnInsertOrHidePresent = function() {};
oFF.PivotTableProxy.prototype.setColumnsMemberHeaderHandling = function(tableMemberHeaderHandling)
{
	this.m_columnsMemberHeaderHandling = tableMemberHeaderHandling;
};
oFF.PivotTableProxy.prototype.setDataColumnsAmount = function(dataColumnsAmount)
{
	this.m_baseTile.getColumnsBundle().setDataTotalCount(dataColumnsAmount);
};
oFF.PivotTableProxy.prototype.setDataRowAmount = function(dataRowAmount)
{
	this.m_baseTile.getRowsBundle().setDataTotalCount(dataRowAmount);
};
oFF.PivotTableProxy.prototype.setDefaultRowHeight = function(defaultRowHeight)
{
	this.m_defaultRowHeight = defaultRowHeight;
};
oFF.PivotTableProxy.prototype.setFreezeHeaderColumns = function(freezeColumns)
{
	this.m_freezeHeaderColumns = freezeColumns;
};
oFF.PivotTableProxy.prototype.setFreezeHeaderRows = function(freezeRows)
{
	this.m_freezeHeaderRows = freezeRows;
};
oFF.PivotTableProxy.prototype.setFreezeUpToColumn = function(freezeUpToColumns)
{
	this.m_freezeUpToColumn = freezeUpToColumns;
};
oFF.PivotTableProxy.prototype.setFreezeUpToRow = function(freezeUpToRows)
{
	this.m_freezeUpToRow = freezeUpToRows;
};
oFF.PivotTableProxy.prototype.setHasHierarchy = function(hasHierarchy)
{
	this.m_hasHierarchyActive = hasHierarchy;
};
oFF.PivotTableProxy.prototype.setHeaderColor = function(headerColor)
{
	this.m_headerColor = headerColor;
};
oFF.PivotTableProxy.prototype.setHeaderCompactionType = function(headerCompactionType)
{
	this.m_headerCompactionType = headerCompactionType;
};
oFF.PivotTableProxy.prototype.setHeight = function(height)
{
	this.m_height = height;
};
oFF.PivotTableProxy.prototype.setHideNumberForCellChart = function(hideNumberForCellChart) {};
oFF.PivotTableProxy.prototype.setMaxCellWidth = function(maxCellWidth)
{
	this.m_maxCellWidth = maxCellWidth;
};
oFF.PivotTableProxy.prototype.setMaxColumns = function(maxColumns)
{
	this.m_maxColumns = maxColumns;
};
oFF.PivotTableProxy.prototype.setMaxRecommendedCellWidth = function(maxRecommendedCellWidth)
{
	this.m_maxRecommendedCellWidth = maxRecommendedCellWidth;
};
oFF.PivotTableProxy.prototype.setMaxRows = function(maxRows)
{
	this.m_maxRows = maxRows;
};
oFF.PivotTableProxy.prototype.setMemberSortIconsLevel = function(memberSortIconsLevel)
{
	this.m_memberSortIconsLevel = memberSortIconsLevel;
};
oFF.PivotTableProxy.prototype.setMergeRepetitiveHeaderCells = function(mergeRepetitiveHeaderCells)
{
	this.m_baseTile.setTableMemberHeaderHandling(oFF.SacTableMemberHeaderHandling.MERGE);
};
oFF.PivotTableProxy.prototype.setMinCellWidth = function(minCellWidth)
{
	this.m_minCellWidth = minCellWidth;
};
oFF.PivotTableProxy.prototype.setPartial = function(partial)
{
	this.m_partial = partial;
};
oFF.PivotTableProxy.prototype.setPreColumnsAmount = function(preColumnsAmount) {};
oFF.PivotTableProxy.prototype.setPreRowsAmount = function(preRowsAmount) {};
oFF.PivotTableProxy.prototype.setRecentTileCarrier = function(tileCarrier)
{
	this.m_tileCarrier = tileCarrier;
};
oFF.PivotTableProxy.prototype.setRenderingScope = function(rowStart, rowEnd, colStart, colEnd)
{
	this.m_rowStart = rowStart;
	this.m_rowEnd = rowEnd;
	this.m_colStart = colStart;
	this.m_colEnd = colEnd;
};
oFF.PivotTableProxy.prototype.setRepetitiveHeaderNames = function(repetitiveHeaderNames)
{
	this.m_baseTile.setTableMemberHeaderHandling(oFF.SacTableMemberHeaderHandling.REPETITIVE);
	this.formatHeaderColumnWidths();
	this.formatDataColumnWidths();
};
oFF.PivotTableProxy.prototype.setReversedHierarchy = function(reversedHierarchy)
{
	this.m_reversedHierarchy = reversedHierarchy;
};
oFF.PivotTableProxy.prototype.setRowInsertOrHidePresent = function() {};
oFF.PivotTableProxy.prototype.setRowsMemberHeaderHandling = function(tableMemberHeaderHandling)
{
	this.m_rowsMemberHeaderHandling = tableMemberHeaderHandling;
};
oFF.PivotTableProxy.prototype.setShowCellChart = function(showCellChart)
{
	this.m_baseTile.setShowCellChart(showCellChart);
};
oFF.PivotTableProxy.prototype.setShowCoordinateHeader = function(showCoordinateHeader)
{
	this.m_showCoordinateHeader = showCoordinateHeader;
};
oFF.PivotTableProxy.prototype.setShowDimensionTitles = function(showDimensionTitles)
{
	this.m_showDimensionTitles = showDimensionTitles;
};
oFF.PivotTableProxy.prototype.setShowFreezeLines = function(showFreezeLines)
{
	this.m_showFreezeLines = showFreezeLines;
};
oFF.PivotTableProxy.prototype.setShowGrid = function(showGrid)
{
	this.m_showGrid = showGrid;
};
oFF.PivotTableProxy.prototype.setShowSubTitle = function(showSubTitle)
{
	this.m_showSubTitle = showSubTitle;
};
oFF.PivotTableProxy.prototype.setShowTableDetails = function(showTableDetails)
{
	this.m_showTableDetails = showTableDetails;
};
oFF.PivotTableProxy.prototype.setShowTableTitle = function(showTableTitle)
{
	this.m_showTableTitle = showTableTitle;
};
oFF.PivotTableProxy.prototype.setStripeDataColumns = function(stripeDataColumns)
{
	this.m_stripeDataColumns = stripeDataColumns;
};
oFF.PivotTableProxy.prototype.setStripeDataRows = function(stripeDataRows)
{
	this.m_stripeDataRows = stripeDataRows;
};
oFF.PivotTableProxy.prototype.setTableMemberHeaderHandling = function(tableMemberHeaderHandling)
{
	this.m_tableMemberHeaderHandling = tableMemberHeaderHandling;
};
oFF.PivotTableProxy.prototype.setTableStyle = function(tableStyle) {};
oFF.PivotTableProxy.prototype.setTitle = function(title)
{
	this.m_title = title;
};
oFF.PivotTableProxy.prototype.setTotalLevel = function(totalLevel) {};
oFF.PivotTableProxy.prototype.setTotalLevel0Color = function(totalLevel0Color)
{
	this.m_totalLevel0Color = totalLevel0Color;
};
oFF.PivotTableProxy.prototype.setTotalLevel1Color = function(totalLevel1Color)
{
	this.m_totalLevel1Color = totalLevel1Color;
};
oFF.PivotTableProxy.prototype.setTotalLevel2Color = function(totalLevel2Color)
{
	this.m_totalLevel2Color = totalLevel2Color;
};
oFF.PivotTableProxy.prototype.setTotalLevel3Color = function(totalLevel3Color)
{
	this.m_totalLevel3Color = totalLevel3Color;
};
oFF.PivotTableProxy.prototype.setTotalLevel4Color = function(totalLevel4Color)
{
	this.m_totalLevel4Color = totalLevel4Color;
};
oFF.PivotTableProxy.prototype.setTotalLevel5Color = function(totalLevel5Color)
{
	this.m_totalLevel5Color = totalLevel5Color;
};
oFF.PivotTableProxy.prototype.setTotalLevel6Color = function(totalLevel6Color)
{
	this.m_totalLevel6Color = totalLevel6Color;
};
oFF.PivotTableProxy.prototype.setTotalRowDiff = function(totalRowDiff)
{
	this.m_totalRowDiff = totalRowDiff;
};
oFF.PivotTableProxy.prototype.setTotalsContext = function(totalsContext) {};
oFF.PivotTableProxy.prototype.setWidth = function(width)
{
	this.m_width = width;
};
oFF.PivotTableProxy.prototype.setupExt = function(gridContainer, engine)
{
	this.m_engine = oFF.XWeakReferenceUtil.getWeakRef(engine);
	this.m_gridContainer = gridContainer;
	this.m_headerCompactionType = oFF.TableHeaderCompactionType.PREFERABLY_COLUMN;
	this.m_headerColumns = oFF.XList.create();
	this.m_dataColumns = oFF.XList.create();
	this.m_highlightAreas = oFF.XList.create();
	this.m_rowStart = -1;
	this.m_rowEnd = -1;
	this.m_colStart = -1;
	this.m_colEnd = -1;
	this.m_freezeUpToColumn = -1;
	this.m_freezeUpToRow = -1;
	this.m_height = 451;
	this.m_width = 1257;
	this.m_defaultRowHeight = oFF.SacTableConstants.DF_R_N_HEIGHT;
	this.m_queryModel = gridContainer.getQueryModel();
	this.m_caps = this.m_queryModel.getModelCapabilities();
	this.m_dataPointStyles = oFF.XList.create();
	this.m_dataPointStyleMap = oFF.XSimpleMap.create();
	this.m_matchedExceptionInformation = oFF.XList.create();
	this.m_dataPointContextMatcher = oFF.VisualizationDataPointMatcher.create();
	this.m_minCellWidth = 40;
	this.m_maxRecommendedCellWidth = 200;
	this.m_maxCellWidth = 900;
	this.m_dataRowList = oFF.XList.create();
	this.m_cellChartInfo = oFF.XHashMapByString.create();
	this.m_rowHeaderHyperlinkLevels = oFF.XSimpleMap.create();
	this.m_columnHeaderHyperlinkLevels = oFF.XSimpleMap.create();
	this.m_dataCellHyperlinks = oFF.XList.create();
	this.m_actionResolver = oFF.PivotActionResolver.create(gridContainer);
	this.setReversedHierarchy(this.checkReversedHierarchy());
};
oFF.PivotTableProxy.prototype.tagExceptionInformation = function(exceptionInformation, dataPathTag1, dataPathTag2)
{
	oFF.OlapToVisualizationConverterUtil.complementExceptionInformation(exceptionInformation, dataPathTag1, this.m_relevantDataPointPaths);
	oFF.OlapToVisualizationConverterUtil.complementExceptionInformation(exceptionInformation, dataPathTag2, this.m_relevantDataPointPaths);
	let index = this.m_matchedExceptionInformation.getIndex(exceptionInformation);
	if (index < 0)
	{
		exceptionInformation.setId(this.m_matchedExceptionInformation.size());
		this.m_matchedExceptionInformation.add(exceptionInformation);
	}
	else
	{
		exceptionInformation.setId(index);
	}
};
oFF.PivotTableProxy.prototype.tagMatchingStyleCriteria = function(sacDataPointStyle)
{
	this.m_dataPointContextMatcher.tagMatchingStyleCriteria(sacDataPointStyle);
};
oFF.PivotTableProxy.prototype.totalColumnsCountMayBeInaccurate = function()
{
	return this.m_baseTile.getRowsBundle().isTotalTuplesMayBeInaccurate();
};
oFF.PivotTableProxy.prototype.totalRowsCountMayBeInaccurate = function()
{
	return this.m_baseTile.getRowsBundle().isTotalTuplesMayBeInaccurate();
};
oFF.PivotTableProxy.prototype.updateColumnDimensions = function()
{
	let columnRanges = this.m_baseTile.getColumnsBundle().getTupleRanges();
	if (oFF.XCollectionUtils.hasElements(columnRanges))
	{
		let tupleColumnsSize = oFF.XMath.min(this.m_baseTile.getColumnsBundle().getTuples().size(), columnRanges.size());
		this.m_baseTile.getColumnsBundle().setTotalTuplesMayBeInaccurate(this.m_gridContainer.totalColumnsCountMayBeInaccurate() && (this.getMaxColumns() > this.m_gridContainer.getDataColumnsTotalCount() || this.getMaxColumns() <= 0));
		let totalColumns = oFF.XMath.max(this.m_gridContainer.getDataColumnsTotalCount(), this.m_gridContainer.getColumnsLoadedCount()) + (this.m_baseTile.getColumnsBundle().isTotalTuplesMayBeInaccurate() ? this.m_tileColumnPadding : 0);
		this.m_baseTile.getColumnsBundle().setTotalTuples(totalColumns > 0 ? oFF.XMath.max(0, this.getMaxColumns() > 0 ? oFF.XMath.min(totalColumns, this.getMaxColumns()) : totalColumns) : 0);
		let lastColumnIndex = columnRanges.get(tupleColumnsSize - 1).getSecondObject().getInteger() + 1;
		this.setDataColumnsAmount(tupleColumnsSize > 0 ? oFF.XMath.div(this.m_baseTile.getColumnsBundle().getTotalTuples() * lastColumnIndex, tupleColumnsSize) : totalColumns);
	}
	else
	{
		this.setDataColumnsAmount(0);
	}
};
oFF.PivotTableProxy.prototype.updateRowDimensions = function()
{
	let rowRanges = this.m_baseTile.getRowsBundle().getTupleRanges();
	if (oFF.XCollectionUtils.hasElements(rowRanges))
	{
		let tupleRowsSize = oFF.XMath.min(this.m_baseTile.getRowsBundle().getTuples().size(), rowRanges.size());
		this.m_baseTile.getRowsBundle().setTotalTuplesMayBeInaccurate(this.m_gridContainer.totalRowsCountMayBeInaccurate() && (this.getMaxRows() > this.m_gridContainer.getDataRowsTotalCount() || this.getMaxRows() <= 0));
		let totalRows = oFF.XMath.max(this.m_gridContainer.getDataRowsTotalCount(), this.m_gridContainer.getRowsLoadedCount()) + (this.m_baseTile.getRowsBundle().isTotalTuplesMayBeInaccurate() ? this.m_tileRowPadding : 0);
		this.m_baseTile.getRowsBundle().setTotalTuples(totalRows > 0 ? oFF.XMath.max(0, this.getMaxRows() > 0 ? oFF.XMath.min(totalRows, this.getMaxRows()) : totalRows) : 0);
		let lastRowIndex = rowRanges.get(tupleRowsSize - 1).getSecondObject().getInteger() + 1;
		this.setDataRowAmount(tupleRowsSize > 0 ? oFF.XMath.div(this.m_baseTile.getRowsBundle().getTotalTuples() * lastRowIndex, tupleRowsSize) : totalRows);
	}
	else
	{
		this.setDataRowAmount(0);
	}
};

oFF.ChartAxisCategoryElementAnalytic = function() {};
oFF.ChartAxisCategoryElementAnalytic.prototype = new oFF.ChartAxisCategoryElement();
oFF.ChartAxisCategoryElementAnalytic.prototype._ff_c = "ChartAxisCategoryElementAnalytic";

oFF.ChartAxisCategoryElementAnalytic.createAnalytic = function(name, text, headerText, parentCategory, repeated, finalElement, dimensionIndex, fieldName, dimensionMember)
{
	let instance = new oFF.ChartAxisCategoryElementAnalytic();
	instance.initializeAxis(name, text, headerText, parentCategory, repeated, finalElement);
	instance.m_dimensionIndex = dimensionIndex;
	instance.m_fieldName = fieldName;
	instance.m_dimensionMember = dimensionMember;
	return instance;
};
oFF.ChartAxisCategoryElementAnalytic.prototype.m_dimensionIndex = 0;
oFF.ChartAxisCategoryElementAnalytic.prototype.m_dimensionMember = null;
oFF.ChartAxisCategoryElementAnalytic.prototype.m_fieldName = null;
oFF.ChartAxisCategoryElementAnalytic.prototype.getDimensionIndex = function()
{
	return this.m_dimensionIndex;
};
oFF.ChartAxisCategoryElementAnalytic.prototype.getDimensionMember = function()
{
	return this.m_dimensionMember;
};
oFF.ChartAxisCategoryElementAnalytic.prototype.getDimensionName = function()
{
	return oFF.isNull(this.m_dimensionMember) ? null : this.m_dimensionMember.getDimension().getName();
};
oFF.ChartAxisCategoryElementAnalytic.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.ChartAxisCategoryElementAnalytic.prototype.getMemberName = function()
{
	let result = null;
	if (oFF.notNull(this.m_dimensionMember))
	{
		result = this.m_dimensionMember.getDisplayName();
		if (oFF.XStringUtils.isNullOrEmpty(result))
		{
			result = this.m_dimensionMember.getName();
		}
	}
	return result;
};
oFF.ChartAxisCategoryElementAnalytic.prototype.getMemberText = function()
{
	let result = null;
	if (oFF.notNull(this.m_dimensionMember))
	{
		result = this.m_dimensionMember.getDisplayDescription();
		if (oFF.XStringUtils.isNullOrEmpty(result))
		{
			result = this.m_dimensionMember.getText();
		}
		if (oFF.XStringUtils.isNullOrEmpty(result))
		{
			result = this.getMemberName();
		}
	}
	return result;
};
oFF.ChartAxisCategoryElementAnalytic.prototype.releaseObject = function()
{
	this.m_fieldName = null;
	this.m_dimensionIndex = 0;
	oFF.ChartAxisCategoryElement.prototype.releaseObject.call( this );
};
oFF.ChartAxisCategoryElementAnalytic.prototype.setDimensionIndex = function(dimensionIndex)
{
	this.m_dimensionIndex = dimensionIndex;
};
oFF.ChartAxisCategoryElementAnalytic.prototype.setFieldName = function(fieldName)
{
	this.m_fieldName = fieldName;
};

oFF.PivotProxyCell = function() {};
oFF.PivotProxyCell.prototype = new oFF.SacTableCell();
oFF.PivotProxyCell.prototype._ff_c = "PivotProxyCell";

oFF.PivotProxyCell._createProxyCell = function(row, referenceColumn, fragmentRow, fragmentColumn)
{
	let instance = new oFF.PivotProxyCell();
	instance.setupInternal(row, referenceColumn);
	instance.setupFragments(fragmentRow, fragmentColumn);
	return instance;
};
oFF.PivotProxyCell.prototype.m_dataCellRef = null;
oFF.PivotProxyCell.prototype.m_fragmentColumn = null;
oFF.PivotProxyCell.prototype.m_fragmentRow = null;
oFF.PivotProxyCell.prototype.m_prioritizedStylesList = null;
oFF.PivotProxyCell.prototype.m_repeatedRefColumn = 0;
oFF.PivotProxyCell.prototype.m_repeatedRefRow = 0;
oFF.PivotProxyCell.prototype.m_repetitiveColumns = 0;
oFF.PivotProxyCell.prototype.m_repetitiveRows = 0;
oFF.PivotProxyCell.prototype.m_sortDirection = null;
oFF.PivotProxyCell.prototype.getDataCellRef = function()
{
	return this.m_dataCellRef;
};
oFF.PivotProxyCell.prototype.getPrioritizedStylesList = function()
{
	if (oFF.isNull(this.m_prioritizedStylesList))
	{
		let stylesList = oFF.XList.create();
		stylesList.add(this.getTableStyle());
		let parentTable = this.getParentRow().getParentTable();
		oFF.XStream.of(parentTable.getDataPointStylesMatchingExceptionInformation(this.getExceptionInformations())).forEach((dps) => {
			stylesList.add(dps.getTableStyle());
		});
		oFF.XStream.of(this.m_fragmentRow.getMatchingTableMarkups(false)).filterNullValues().forEach((tableMarkup1) => {
			stylesList.addAll(this.m_fragmentColumn.getMatchingOrthogonalStyles(tableMarkup1));
		});
		oFF.XStream.of(this.m_fragmentColumn.getMatchingTableMarkups(false)).filterNullValues().forEach((tableMarkup2) => {
			stylesList.addAll(this.m_fragmentRow.getMatchingOrthogonalStyles(tableMarkup2));
		});
		stylesList.addAll(this.m_fragmentColumn.getMatchingStyles(this.m_fragmentRow.getScopedStyles()));
		stylesList.addAll(this.m_fragmentRow.getMatchingStyles(this.m_fragmentColumn.getScopedStyles()));
		stylesList.addAll(this.getSecondaryTableStyles());
		stylesList.addAll(this.m_fragmentColumn.getSecondaryTableStyles());
		stylesList.addAll(this.m_fragmentRow.getSecondaryTableStyles());
		stylesList.addAll(parentTable.getSecondaryTableStyles());
		stylesList.add(this.m_fragmentRow.getTableStyle());
		stylesList.add(this.m_fragmentColumn.getTableStyle());
		stylesList.add(parentTable.getTableStyle());
		let stylesListFiltered = oFF.XStream.of(stylesList).filter((st) => {
			return this.isStyleApplicable(st);
		}).collect(oFF.XStreamCollector.toList());
		let compareFunction = (a, b) => {
			return oFF.XIntegerValue.create(a.getPriority() - b.getPriority());
		};
		stylesListFiltered.sortByComparator(oFF.XComparatorLambda.create(compareFunction));
		oFF.XStream.of(this.m_fragmentColumn.getMatchingRectangularStyles(true)).filter((rt) => {
			return this.m_fragmentRow.getMatchingRectangularStyles(true).contains(rt);
		}).filterNullValues().forEach((rti) => {
			if (this.isStyleApplicable(rti.getStyle()))
			{
				stylesListFiltered.insert(0, rti.getStyle());
			}
		});
		this.m_prioritizedStylesList = stylesListFiltered;
	}
	return this.m_prioritizedStylesList;
};
oFF.PivotProxyCell.prototype.getRepeatedRefColumn = function()
{
	return this.m_repeatedRefColumn;
};
oFF.PivotProxyCell.prototype.getRepeatedRefRow = function()
{
	return this.m_repeatedRefRow;
};
oFF.PivotProxyCell.prototype.getRepetitiveColumns = function()
{
	return this.m_repetitiveColumns;
};
oFF.PivotProxyCell.prototype.getRepetitiveRows = function()
{
	return this.m_repetitiveRows;
};
oFF.PivotProxyCell.prototype.getSortDirection = function()
{
	return this.m_sortDirection;
};
oFF.PivotProxyCell.prototype.releaseObject = function()
{
	this.m_sortDirection = null;
	this.m_repetitiveRows = 0;
	this.m_repetitiveColumns = 0;
	this.m_repeatedRefColumn = -1;
	this.m_repeatedRefRow = -1;
	this.m_fragmentRow = null;
	this.m_fragmentColumn = null;
	this.m_prioritizedStylesList = oFF.XObjectExt.release(this.m_prioritizedStylesList);
	oFF.SacTableCell.prototype.releaseObject.call( this );
};
oFF.PivotProxyCell.prototype.setDataCellRef = function(dataCellRef)
{
	this.m_dataCellRef = dataCellRef;
};
oFF.PivotProxyCell.prototype.setRepeatedRefColumn = function(repeatedRefColumn)
{
	this.m_repeatedRefColumn = repeatedRefColumn;
};
oFF.PivotProxyCell.prototype.setRepeatedRefRow = function(repeatedRefRow)
{
	this.m_repeatedRefRow = repeatedRefRow;
};
oFF.PivotProxyCell.prototype.setRepetitiveColumns = function(repetitiveColumns)
{
	this.m_repetitiveColumns = repetitiveColumns;
};
oFF.PivotProxyCell.prototype.setRepetitiveRows = function(repetitiveRows)
{
	this.m_repetitiveRows = repetitiveRows;
};
oFF.PivotProxyCell.prototype.setSortDirection = function(sortDirection)
{
	this.m_sortDirection = sortDirection;
};
oFF.PivotProxyCell.prototype.setupFragments = function(fragmentRow, fragmentColumn)
{
	this.m_fragmentRow = fragmentRow;
	this.m_fragmentColumn = fragmentColumn;
	this.m_repeatedRefColumn = -1;
	this.m_repeatedRefRow = -1;
};
oFF.PivotProxyCell.prototype.setupInternal = function(row, column)
{
	oFF.SacTableCell.prototype.setupInternal.call( this , row, column);
};

oFF.OlapDataPrg = function() {};
oFF.OlapDataPrg.prototype = new oFF.DfShellProgramWithApplication();
oFF.OlapDataPrg.prototype._ff_c = "OlapDataPrg";

oFF.OlapDataPrg.OUTPUT = "output";
oFF.OlapDataPrg.QUERY = "query";
oFF.OlapDataPrg.SYSTEM_NAME = "system";
oFF.OlapDataPrg.main = function()
{
	oFF.KernelNativeModule.getInstance();
	let kernelBoot = oFF.KernelBoot.createByName("olapdata");
	kernelBoot.setStringArgument("system", "KIW");
	kernelBoot.setStringArgument("query", "query:[0BICS_C03_BICSTEST_Q0000]");
	kernelBoot.setDefaultSyncType(oFF.SyncType.BLOCKING);
	kernelBoot.runFull();
};
oFF.OlapDataPrg.prototype.getProgramName = function()
{
	return "olapdata";
};
oFF.OlapDataPrg.prototype.newProgram = function()
{
	let newPrg = new oFF.OlapDataPrg();
	newPrg.setup();
	return newPrg;
};
oFF.OlapDataPrg.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	if (extResult.hasErrors())
	{
		this.writeToOutput(extResult.getSummary());
	}
	else
	{
		let classicResultSet = resultSetContainer.getClassicResultSet();
		let grid = oFF.ReferenceGrid.create(classicResultSet);
		let ascii = grid.exportToAscii(30);
		this.writeToOutput(oFF.XStringUtils.concatenate3("<pre>", ascii, "</pre>"));
	}
};
oFF.OlapDataPrg.prototype.onQueryManagerCreated = function(extResult, queryManager, customIdentifier)
{
	if (extResult.hasErrors())
	{
		this.writeToOutput(extResult.getSummary());
	}
	else
	{
		this.writeToOutput("Loading Resultset...");
		queryManager.processQueryExecution(null, this, null);
	}
};
oFF.OlapDataPrg.prototype.prepareProgramMetadata = function(metadata)
{
	metadata.addMandatoryOption(oFF.OlapDataPrg.SYSTEM_NAME, "The system name", "", oFF.XValueType.STRING);
	metadata.addMandatoryOption(oFF.OlapDataPrg.QUERY, "The query name", "", oFF.XValueType.STRING);
	metadata.addOption(oFF.OlapDataPrg.OUTPUT, "Output DOM id. If not given, the output is written on the console", "", oFF.XValueType.STRING);
};
oFF.OlapDataPrg.prototype.processArguments = function(args) {};
oFF.OlapDataPrg.prototype.processConfiguration = function(configuration) {};
oFF.OlapDataPrg.prototype.runMain = function()
{
	this.writeToOutput("Initializing Query Manager...");
	let application = this.getApplication();
	let prgArgs = this.getArguments();
	let systemName = prgArgs.getStringByKey(oFF.OlapDataPrg.SYSTEM_NAME);
	let queryName = prgArgs.getStringByKey(oFF.OlapDataPrg.QUERY);
	let serviceCfg = oFF.QueryServiceConfig.createWithDataSourceName(application, systemName, queryName);
	serviceCfg.processQueryManagerCreation(null, this, null);
	return false;
};
oFF.OlapDataPrg.prototype.writeToOutput = function(text)
{
	let prgArgs = this.getArguments();
	let output = prgArgs.getStringByKey(oFF.OlapDataPrg.OUTPUT);
	if (oFF.XStringUtils.isNotNullAndNotEmpty(output))
	{
		oFF.DocumentEnv.setStringAtId(output, text);
	}
	else
	{
		this.println(text);
	}
};

oFF.ChartAxisCategoryAnalytic = function() {};
oFF.ChartAxisCategoryAnalytic.prototype = new oFF.ChartAxisCategory();
oFF.ChartAxisCategoryAnalytic.prototype._ff_c = "ChartAxisCategoryAnalytic";

oFF.ChartAxisCategoryAnalytic.createAnalyticCategory = function(key, name, chartAxis, tuple, dimensionNames, measureReference, needsMeasureDistinction, tupleIndex)
{
	let instance = new oFF.ChartAxisCategoryAnalytic();
	let categoricalDomain = chartAxis.getAxisDomain().getAsCategorial();
	instance.initializeAxis(key, name, categoricalDomain);
	instance.setupForTupleAndDimensionNames(tuple, dimensionNames, measureReference, needsMeasureDistinction, tupleIndex);
	categoricalDomain.addAxisCategory(instance);
	return instance;
};
oFF.ChartAxisCategoryAnalytic.getKey = function(tuple, dimensionNames, structureMemberName)
{
	let relevantModelComponents = oFF.XStream.of(tuple.getAxisReference().getComponentsOnAxis()).filter((vcoa) => {
		return vcoa.getModelComponentType() === oFF.OlapComponentType.FIELD && oFF.ChartAxisCategoryAnalytic.matchDimensions(dimensionNames, vcoa.getDimension());
	}).collect(oFF.XStreamCollector.toList());
	let key = "";
	if (oFF.XCollectionUtils.hasElements(relevantModelComponents))
	{
		key = oFF.XCollectionUtils.join(oFF.XStream.of(relevantModelComponents).map((mc) => {
			return tuple.getValueForModelComponent(mc);
		}).filterNullValues().collect(oFF.XStreamCollector.toListOfString((tp) => {
			return oFF.XValueUtil.getString(tp.getPlainValue());
		})), " / ");
	}
	if (oFF.notNull(structureMemberName))
	{
		key = oFF.XStringUtils.concatenate3(key, " / ", structureMemberName);
	}
	return key;
};
oFF.ChartAxisCategoryAnalytic.matchDimensions = function(categoryDimensionNames, dimension)
{
	return oFF.XCollectionUtils.contains(categoryDimensionNames, (dimName) => {
		return oFF.XString.isEqual(dimName, dimension.getName());
	}) || dimension.isUniversalDisplayHierarchyDimension() && oFF.XStream.ofString(oFF.RscMappingUtils.getUdhDimensionNames(dimension)).allMatch((dim) => {
		return oFF.XCollectionUtils.contains(categoryDimensionNames, (dn) => {
			return oFF.XString.isEqual(dn, dim.getString());
		});
	});
};
oFF.ChartAxisCategoryAnalytic.prototype.m_axis = null;
oFF.ChartAxisCategoryAnalytic.prototype.m_cellValueType = null;
oFF.ChartAxisCategoryAnalytic.prototype.m_complexUnit = null;
oFF.ChartAxisCategoryAnalytic.prototype.m_currencyUnit = null;
oFF.ChartAxisCategoryAnalytic.prototype.m_gridTupleCoordinates = null;
oFF.ChartAxisCategoryAnalytic.prototype.m_listTupleIndices = null;
oFF.ChartAxisCategoryAnalytic.prototype.m_numericShift = null;
oFF.ChartAxisCategoryAnalytic.prototype.addAnalyticCategoryElement = function(tupleElement)
{
	let dimension = tupleElement.getFieldReference().getDimension();
	let headerText = dimension.getDisplayDescription();
	let element = oFF.ChartAxisCategoryElementAnalytic.createAnalytic(oFF.XValueUtil.getString(tupleElement.getPlainValue()), tupleElement.getFormattedText(), headerText, this, this.isRepeated(tupleElement), this.isSectionEnd(tupleElement), this.getDimensionIndex(tupleElement), this.getFieldName(tupleElement), this.getDimensionMember(tupleElement));
	element.setTotal(tupleElement.getDimensionMemberType().isTypeOf(oFF.OlapComponentType.TOTALS) || tupleElement.getDimensionMemberType().isTypeOf(oFF.MemberType.RESULT));
	element.setHierarchyLevel(tupleElement.getDisplayLevel());
	let drillState = tupleElement.getDrillState();
	element.setExpanded(drillState === oFF.DrillState.EXPANDED || drillState === oFF.DrillState.DRILLED);
	element.setInHierarchy(tupleElement.getDrillState() !== null);
	if (element.isTotal() && this.getTotalLevel() === -1)
	{
		this.setTotalLevel(this.getCategoryElements().size());
	}
	this.addElement(element);
};
oFF.ChartAxisCategoryAnalytic.prototype.addAnalyticCategoryStructureElement = function(structureMember)
{
	let element = oFF.ChartAxisCategoryElementAnalytic.createAnalytic(structureMember.getName(), structureMember.getDisplayDescription(), "", this, false, false, -1, structureMember.getDimension().getTextField().getName(), structureMember);
	this.addElement(element);
};
oFF.ChartAxisCategoryAnalytic.prototype.addTupleCoordinate = function(tupleCoordinate)
{
	this.m_gridTupleCoordinates.add(tupleCoordinate);
};
oFF.ChartAxisCategoryAnalytic.prototype.getAxis = function()
{
	return oFF.XWeakReferenceUtil.getHardRef(this.m_axis);
};
oFF.ChartAxisCategoryAnalytic.prototype.getCellValueType = function()
{
	return this.m_cellValueType;
};
oFF.ChartAxisCategoryAnalytic.prototype.getComplexUnit = function()
{
	return this.m_complexUnit;
};
oFF.ChartAxisCategoryAnalytic.prototype.getCurrencyUnit = function()
{
	return this.m_currencyUnit;
};
oFF.ChartAxisCategoryAnalytic.prototype.getDimensionIndex = function(tupleElement)
{
	return oFF.XObjectExt.isValidObject(tupleElement.getModelReference()) && tupleElement.getModelReference().getModelComponentType() === oFF.OlapComponentType.FIELD ? tupleElement.getFieldReference().getDimensionIndex() : -1;
};
oFF.ChartAxisCategoryAnalytic.prototype.getDimensionMember = function(tupleElement)
{
	let dimensionMember = null;
	if (oFF.XObjectExt.isValidObject(tupleElement.getModelReference()) && tupleElement.getModelReference().getModelComponentType() === oFF.OlapComponentType.FIELD)
	{
		let fieldValueReference = tupleElement;
		if (fieldValueReference.getDrillGroupReference() !== null)
		{
			fieldValueReference = fieldValueReference.getDrillGroupReference();
		}
		let dimensionMemberName = fieldValueReference.getDimensionMemberName();
		let dimension = fieldValueReference.getFieldReference().getDimension();
		let memberType = fieldValueReference.getDimensionMemberType();
		if (oFF.notNull(dimension))
		{
			if (tupleElement.getDimensionMemberType().isTypeOf(oFF.MemberType.RESULT))
			{
				dimensionMember = dimension.getResultMember(memberType);
			}
			else if (fieldValueReference.getDimensionMemberValueException() === oFF.ValueException.NULL_VALUE)
			{
				dimensionMember = dimension.getDimensionMemberByNull();
			}
			else
			{
				dimensionMember = dimension.getDimensionMember(dimensionMemberName);
			}
		}
	}
	return dimensionMember;
};
oFF.ChartAxisCategoryAnalytic.prototype.getFieldName = function(tupleElement)
{
	return oFF.XObjectExt.isValidObject(tupleElement.getModelReference()) && tupleElement.getModelReference().getModelComponentType() === oFF.OlapComponentType.FIELD ? tupleElement.getFieldReference().getField().getName() : null;
};
oFF.ChartAxisCategoryAnalytic.prototype.getGridTupleCoordinates = function()
{
	return this.m_gridTupleCoordinates;
};
oFF.ChartAxisCategoryAnalytic.prototype.getListTupleIndices = function()
{
	return this.m_listTupleIndices;
};
oFF.ChartAxisCategoryAnalytic.prototype.getNumericShift = function()
{
	return this.m_numericShift;
};
oFF.ChartAxisCategoryAnalytic.prototype.getOlapTupleElementPairs = function()
{
	let rowTupleElements = oFF.XList.create();
	let columnTupleElements = oFF.XList.create();
	let contextMembers = oFF.XStream.of(this.getCategoryElements()).map((ce) => {
		return ce.getDimensionMember();
	}).collect(oFF.XStreamCollector.toList());
	let dimMemberNameList = oFF.XStream.of(contextMembers).collect(oFF.XStreamCollector.toListOfString((ct) => {
		return ct.getName();
	}));
	let triCon = (tl, te, ds) => {
		if (oFF.notNull(te))
		{
			for (let i = 0; i < te.size(); i++)
			{
				let tupleElement = te.getTupleElementAt(i);
				if (ds.contains(tupleElement.getDimensionMember().getName()) && !tl.contains(tupleElement))
				{
					tl.add(tupleElement);
				}
			}
		}
	};
	if (oFF.XCollectionUtils.hasElements(contextMembers))
	{
		let dimensions = oFF.XStream.of(contextMembers).map((dm) => {
			return dm.getDimension();
		}).collect(oFF.XStreamCollector.toSetOfNameObject());
		if (oFF.XCollectionUtils.hasElements(dimensions))
		{
			oFF.XCollectionUtils.forEach(this.getOlapTuplePairs(), (otp) => {
				triCon(rowTupleElements, otp.getFirstObject(), dimMemberNameList);
				triCon(columnTupleElements, otp.getSecondObject(), dimMemberNameList);
			});
		}
	}
	return oFF.XPair.create(rowTupleElements, columnTupleElements);
};
oFF.ChartAxisCategoryAnalytic.prototype.getOlapTuplePairs = function()
{
	let tuples = oFF.XList.create();
	let gridContainer = this.getAxis().getGridContainer().getCollector();
	let rowTuples = gridContainer.getRowTuples();
	let columnTuples = gridContainer.getColumnTuples();
	let bifu = (list, index) => {
		let i = index.getInteger();
		return i > -1 && i < list.size() ? list.get(i) : null;
	};
	oFF.XCollectionUtils.forEach(this.m_gridTupleCoordinates, (gtc) => {
		tuples.add(oFF.XPair.create(bifu(rowTuples, gtc.getFirstObject()), bifu(columnTuples, gtc.getSecondObject())));
	});
	return tuples;
};
oFF.ChartAxisCategoryAnalytic.prototype.getReversedScalingFactor = function()
{
	return oFF.isNull(this.m_numericShift) ? null : oFF.XIntegerValue.create(-this.m_numericShift.getInteger());
};
oFF.ChartAxisCategoryAnalytic.prototype.getUniqueScalingText = function()
{
	return this.m_uniqueScalingText;
};
oFF.ChartAxisCategoryAnalytic.prototype.getUniqueUnitInfo = function()
{
	return this.m_uniqueUnitInfo;
};
oFF.ChartAxisCategoryAnalytic.prototype.isRepeated = function(tupleElement)
{
	return oFF.XObjectExt.isValidObject(tupleElement.getModelReference()) && tupleElement.getModelReference().getModelComponentType() === oFF.OlapComponentType.FIELD && tupleElement.isRepeatedMemberName();
};
oFF.ChartAxisCategoryAnalytic.prototype.isSectionEnd = function(tupleElement)
{
	return oFF.XObjectExt.isValidObject(tupleElement.getModelReference()) && tupleElement.getModelReference().getModelComponentType() === oFF.OlapComponentType.FIELD && tupleElement.isDimensionSectionEnd();
};
oFF.ChartAxisCategoryAnalytic.prototype.obtainTupleCoordinates = function(tuple, tupleIndex)
{
	this.m_gridTupleCoordinates.addAll(tuple.getRelevantTupleIndices());
	this.m_listTupleIndices.add(oFF.XIntegerValue.create(tupleIndex));
};
oFF.ChartAxisCategoryAnalytic.prototype.releaseObject = function()
{
	this.m_gridTupleCoordinates = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_gridTupleCoordinates);
	oFF.ChartAxisCategory.prototype.releaseObject.call( this );
};
oFF.ChartAxisCategoryAnalytic.prototype.setupForTupleAndDimensionNames = function(tuple, dimensionNames, measureReference, needsMeasureDistinction, tupleIndex)
{
	this.m_gridTupleCoordinates = oFF.XList.create();
	this.m_listTupleIndices = oFF.XList.create();
	this.m_axis = oFF.XWeakReferenceUtil.getWeakRef(tuple.getAxisReference());
	let i = 0;
	let value;
	let relevantModelComponents = oFF.XStream.of(tuple.getAxisReference().getVisibleComponentsOnAxis()).filter((vcoa) => {
		return vcoa.getModelComponentType() === oFF.OlapComponentType.FIELD && oFF.ChartAxisCategoryAnalytic.matchDimensions(dimensionNames, vcoa.getDimension());
	}).collect(oFF.XStreamCollector.toList());
	if (oFF.XCollectionUtils.hasElements(relevantModelComponents))
	{
		for (; i < relevantModelComponents.size(); i++)
		{
			value = tuple.getValueForModelComponent(relevantModelComponents.get(i));
			this.addAnalyticCategoryElement(value);
		}
	}
	if (oFF.notNull(measureReference))
	{
		if (needsMeasureDistinction && measureReference.getStructureMember() !== null)
		{
			this.addAnalyticCategoryStructureElement(measureReference.getStructureMember());
		}
		this.m_numericShift = measureReference.getNumericShift();
		this.m_currencyUnit = measureReference.getCurrencyUnit();
		this.m_complexUnit = measureReference.getComplexUnit();
		this.m_cellValueType = measureReference.getCellValueType();
		this.setUniqueUnitScaleInformation(measureReference.getUniqueUnitScaleInformation());
		this.setUniqueUnitInfo(measureReference.getUniqueUnitInfo());
		this.setUniqueScalingText(measureReference.getUniqueScalingText());
		this.setUniqueDecimalPlaces(measureReference.getUniqueDecimalPlaces());
		this.setUniqueNumericShift(measureReference.getNumericShift());
	}
	this.obtainTupleCoordinates(tuple, tupleIndex);
};

oFF.PivotProxyColumn = function() {};
oFF.PivotProxyColumn.prototype = new oFF.PivotProxyAxis();
oFF.PivotProxyColumn.prototype._ff_c = "PivotProxyColumn";

oFF.PivotProxyColumn.create = function(baseTable, baseColumn)
{
	let instance = new oFF.PivotProxyColumn();
	instance.setupWithFragmentAndTable(baseTable, baseColumn);
	instance.setup();
	return instance;
};
oFF.PivotProxyColumn.prototype.m_defaultEmWidth = 0;
oFF.PivotProxyColumn.prototype.m_defaultWidth = 0;
oFF.PivotProxyColumn.prototype.m_idealWidth = 0;
oFF.PivotProxyColumn.prototype.addNewChildColumnAfter = oFF.noSupport;
oFF.PivotProxyColumn.prototype.addNewChildColumnBefore = oFF.noSupport;
oFF.PivotProxyColumn.prototype.getColumnsAfter = oFF.noSupport;
oFF.PivotProxyColumn.prototype.getColumnsBefore = oFF.noSupport;
oFF.PivotProxyColumn.prototype.getDefaultEmWidth = function()
{
	return this.m_defaultEmWidth;
};
oFF.PivotProxyColumn.prototype.getIdealWidth = function()
{
	return this.m_idealWidth;
};
oFF.PivotProxyColumn.prototype.getParentColumn = oFF.noSupport;
oFF.PivotProxyColumn.prototype.getWidth = function()
{
	let tableMarkups = this.getMatchingTableMarkups(false);
	let pathWidth = 0;
	let pathWidthAddition = 0;
	if (oFF.XCollectionUtils.hasElements(tableMarkups))
	{
		pathWidth = oFF.XStream.of(tableMarkups).map((m) => {
			return oFF.XIntegerValue.create(m.getCellWidth());
		}).reduce(oFF.XIntegerValue.create(0), (a, b) => {
			return oFF.XIntegerValue.create(oFF.XMath.max(a.getInteger(), b.getInteger()));
		}).getInteger();
		pathWidthAddition = oFF.XStream.of(tableMarkups).map((n) => {
			return oFF.XIntegerValue.create(n.getCellWidthAddition());
		}).reduce(oFF.XIntegerValue.create(0), (e, f) => {
			return oFF.XIntegerValue.create(oFF.XMath.max(e.getInteger(), f.getInteger()));
		}).getInteger();
	}
	let castedFragment = this.m_fragment;
	let newWidth = oFF.XMath.max(pathWidth, castedFragment.getWidth());
	return newWidth > 0 ? newWidth : this.m_defaultWidth + pathWidthAddition;
};
oFF.PivotProxyColumn.prototype.isWidthOverwritten = function()
{
	return oFF.notNull(this.m_fragment) && this.m_fragment.getWidth() > 0;
};
oFF.PivotProxyColumn.prototype.setDefaultEmWidth = function(width)
{
	this.m_defaultEmWidth = width;
};
oFF.PivotProxyColumn.prototype.setDefaultWidth = function(width)
{
	this.m_defaultWidth = width;
};
oFF.PivotProxyColumn.prototype.setIdealWidth = function(width)
{
	this.m_idealWidth = width;
};
oFF.PivotProxyColumn.prototype.setParentColumn = oFF.noSupport;
oFF.PivotProxyColumn.prototype.setWidth = function(width)
{
	this.m_fragment.setWidth(width);
};

oFF.PivotProxyRow = function() {};
oFF.PivotProxyRow.prototype = new oFF.PivotProxyAxis();
oFF.PivotProxyRow.prototype._ff_c = "PivotProxyRow";

oFF.PivotProxyRow.create = function(baseTable, baseRow)
{
	let instance = new oFF.PivotProxyRow();
	instance.setupWithFragmentAndTable(baseTable, baseRow);
	instance.setup();
	return instance;
};
oFF.PivotProxyRow.prototype.m_cells = null;
oFF.PivotProxyRow.prototype.m_changedOnTheFlyUnresponsive = false;
oFF.PivotProxyRow.prototype.m_fixed = false;
oFF.PivotProxyRow.prototype.m_lastHeader = false;
oFF.PivotProxyRow.prototype.addCell = function(newCell)
{
	this.m_cells.add(newCell);
};
oFF.PivotProxyRow.prototype.addNewAnalyticsCell = oFF.noSupport;
oFF.PivotProxyRow.prototype.addNewAnalyticsCellAt = oFF.noSupport;
oFF.PivotProxyRow.prototype.addNewCell = function()
{
	return null;
};
oFF.PivotProxyRow.prototype.addNewChildRowAfter = oFF.noSupport;
oFF.PivotProxyRow.prototype.addNewChildRowBefore = oFF.noSupport;
oFF.PivotProxyRow.prototype.addNullCellAt = oFF.noSupport;
oFF.PivotProxyRow.prototype.getCells = function()
{
	return this.m_cells;
};
oFF.PivotProxyRow.prototype.getEffectiveHeight = function()
{
	return this.m_fragment.getHeight() + this.m_fragment.getDefaultHeightAddition();
};
oFF.PivotProxyRow.prototype.getFragmentRow = function()
{
	return this.m_fragment;
};
oFF.PivotProxyRow.prototype.getHeight = function()
{
	return this.m_fragment.getHeight();
};
oFF.PivotProxyRow.prototype.getParentRow = oFF.noSupport;
oFF.PivotProxyRow.prototype.getRowsAfter = oFF.noSupport;
oFF.PivotProxyRow.prototype.getRowsBefore = oFF.noSupport;
oFF.PivotProxyRow.prototype.heightDiffersFromDefault = function()
{
	return this.m_fragment.heightDiffersFromDefault();
};
oFF.PivotProxyRow.prototype.insertNewCellAtWithColumn = oFF.noSupport;
oFF.PivotProxyRow.prototype.isChangedOnTheFlyUnresponsive = function()
{
	return this.m_changedOnTheFlyUnresponsive;
};
oFF.PivotProxyRow.prototype.isFixed = function()
{
	return this.m_fixed;
};
oFF.PivotProxyRow.prototype.isLastHeader = function()
{
	return this.m_lastHeader;
};
oFF.PivotProxyRow.prototype.removeCellAt = oFF.noSupport;
oFF.PivotProxyRow.prototype.setChangedOnTheFlyUnresponsive = function(changedOnTheFlyUnresponsive)
{
	this.m_changedOnTheFlyUnresponsive = changedOnTheFlyUnresponsive;
};
oFF.PivotProxyRow.prototype.setFixed = function(fixed)
{
	this.m_fixed = fixed;
};
oFF.PivotProxyRow.prototype.setHeight = function(height)
{
	this.m_fragment.setHeight(height);
};
oFF.PivotProxyRow.prototype.setLastHeader = function(lastHeader)
{
	this.m_lastHeader = lastHeader;
};
oFF.PivotProxyRow.prototype.setParentRow = oFF.noSupport;
oFF.PivotProxyRow.prototype.setup = function()
{
	oFF.PivotProxyAxis.prototype.setup.call( this );
	this.m_cells = oFF.XList.create();
};

oFF.RscGridCollector = function() {};
oFF.RscGridCollector.prototype = new oFF.DfRsSyncAction();
oFF.RscGridCollector.prototype._ff_c = "RscGridCollector";

oFF.RscGridCollector.create = function(visualizationManager)
{
	let instance = new oFF.RscGridCollector();
	instance.setupContainer();
	instance.setupAction(null, null, null, visualizationManager);
	instance.setGridContainer(oFF.RscGridContainer.create(visualizationManager, instance));
	instance.m_reEntryProcessors = oFF.XList.create();
	instance.m_pagingQueue = oFF.XList.create();
	return instance;
};
oFF.RscGridCollector.prototype.m_colPadding = 0;
oFF.RscGridCollector.prototype.m_columnTuples = null;
oFF.RscGridCollector.prototype.m_dataColumnLimitExceeded = false;
oFF.RscGridCollector.prototype.m_dataRowLimitExceeded = false;
oFF.RscGridCollector.prototype.m_maxColLoad = 0;
oFF.RscGridCollector.prototype.m_maxRowLoad = 0;
oFF.RscGridCollector.prototype.m_minColFetch = 0;
oFF.RscGridCollector.prototype.m_minRowFetch = 0;
oFF.RscGridCollector.prototype.m_outdatedResultSetProcessing = false;
oFF.RscGridCollector.prototype.m_pagingQueue = null;
oFF.RscGridCollector.prototype.m_pendingPagingProcessInProgress = false;
oFF.RscGridCollector.prototype.m_pendingReset = false;
oFF.RscGridCollector.prototype.m_pendingSyncType = null;
oFF.RscGridCollector.prototype.m_reEntryProcessors = null;
oFF.RscGridCollector.prototype.m_resultSetContainer = null;
oFF.RscGridCollector.prototype.m_rowPadding = 0;
oFF.RscGridCollector.prototype.m_rowTuples = null;
oFF.RscGridCollector.prototype.m_rscGridContainer = null;
oFF.RscGridCollector.prototype.m_scrollWindowMaxCol = 0;
oFF.RscGridCollector.prototype.m_scrollWindowMaxRow = 0;
oFF.RscGridCollector.prototype.m_scrollWindowMinCol = 0;
oFF.RscGridCollector.prototype.m_scrollWindowMinRow = 0;
oFF.RscGridCollector.prototype.m_tileCarrier = null;
oFF.RscGridCollector.prototype.m_timerId = null;
oFF.RscGridCollector.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onGridCollectorFilled(extResult, extResult.getGridContainer(), customIdentifier);
};
oFF.RscGridCollector.prototype.cancelSynchronization = function()
{
	if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_timerId))
	{
		oFF.XTimeout.clear(this.m_timerId);
		this.m_timerId = null;
		this.addInfo(0, "Canceled");
		oFF.DfRsSyncAction.prototype.cancelSynchronization.call( this );
	}
};
oFF.RscGridCollector.prototype.checkPendingResets = function()
{
	let isBeingReset = false;
	if (!this.isSyncCanceled() && this.m_pendingReset)
	{
		let curSyncState = this.getSyncState();
		if (curSyncState !== oFF.SyncState.PROCESSING)
		{
			if (curSyncState.isInSync())
			{
				this._resetSyncStateInternal(false);
				isBeingReset = true;
			}
			this.m_pendingReset = false;
		}
	}
	return isBeingReset;
};
oFF.RscGridCollector.prototype.endSync = function()
{
	if (oFF.notNull(this.m_resultSetContainer))
	{
		let messageCollection = this.getMessages();
		oFF.XCollectionUtils.forEach(this.m_resultSetContainer.getMessages(), (rmsg) => {
			if (!messageCollection.contains(rmsg))
			{
				this.addMessage(rmsg);
			}
		});
	}
	oFF.DfRsSyncAction.prototype.endSync.call( this );
};
oFF.RscGridCollector.prototype.endTileFillSync = function(rsSyncState)
{
	this.endSync();
	if (rsSyncState.isNotInSync())
	{
		this.resetState();
	}
};
oFF.RscGridCollector.prototype.enqueuePaging = function(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowScrollReferencePoint, rowScrollEndReferencePoint, colScrollReferencePoint, colScrollEndReferencePoint)
{
	this.m_pagingQueue.add(oFF.RscGridRequestToken.create(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowScrollReferencePoint, rowScrollEndReferencePoint, colScrollReferencePoint, colScrollEndReferencePoint));
};
oFF.RscGridCollector.prototype.exceedsMinBoundaries = function(minFetch, currentFetch, axis)
{
	return minFetch < 1 && currentFetch > 1 || currentFetch < 0 || currentFetch > axis.getTuplesTotalCount() - 1 || minFetch > 0 && currentFetch > minFetch - 1;
};
oFF.RscGridCollector.prototype.executeWindowedRequest = function(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowMin, rowMax, colMin, colMax)
{
	this.m_pendingPagingProcessInProgress = true;
	this.executeWindowedRequestInternal(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowMin, rowMax, colMin, colMax);
};
oFF.RscGridCollector.prototype.executeWindowedRequestInternal = function(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowMin, rowMax, colMin, colMax)
{
	let colMinEff = colMin < 0 ? 0 : colMin;
	let colMaxEff = colMax < 0 ? this.m_minColFetch : colMax;
	this.processQueryExecutionWindow(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowMin, rowMax - rowMin + 1, colMinEff, colMaxEff - colMinEff + 1);
	this.m_scrollWindowMinRow = rowMin;
	this.m_scrollWindowMaxRow = rowMax;
	this.m_scrollWindowMinCol = colMin;
	this.m_scrollWindowMaxCol = colMax;
};
oFF.RscGridCollector.prototype.fillAxis = function(offset, axis, tuples)
{
	let i = 0;
	let tuplesSize = tuples.size();
	let tuplesCount = axis.getTuplesCount();
	if (offset > tuplesSize)
	{
		for (let h = tuplesSize; h < offset; h++)
		{
			tuples.add(null);
		}
	}
	else if (offset < tuplesSize)
	{
		for (; i < tuplesCount && i + offset < tuplesSize; i++)
		{
			tuples.set(i + offset, axis.getTupleAt(i));
		}
	}
	for (; i < tuplesCount; i++)
	{
		tuples.add(axis.getTupleAt(i));
	}
};
oFF.RscGridCollector.prototype.fillTileCollector = function(syncType)
{
	let documentIds = oFF.XList.create();
	if (oFF.notNull(this.m_resultSetContainer))
	{
		let rsSyncState = this.m_resultSetContainer.getSyncState();
		this.processResultSet(this.m_resultSetContainer, documentIds);
		let applicationSettings = this.m_resultSetContainer.getQueryModel().getVisualizationManager().getApplicationSettings();
		if (applicationSettings.isSupportCommentDocuments() && oFF.XCollectionUtils.hasElements(documentIds))
		{
			let documentService = this.m_resultSetContainer.getQueryModel().getDocumentsInfo().getOrCreateDocumentsStoreService(true);
			if (oFF.notNull(documentService))
			{
				let filteredDocumentIds = oFF.XStream.ofString(documentIds).filter((di) => {
					return !documentService.isDocumentLoaded(di.getString());
				}).collect(oFF.XStreamCollector.toSetOfString((docId) => {
					return docId.getString();
				}));
				if (oFF.XCollectionUtils.hasElements(filteredDocumentIds))
				{
					oFF.XCollectionUtils.forEach(filteredDocumentIds, (di) => {
						documentService.addToFetchList(di);
					});
					documentService.performRequests(syncType, this, null);
				}
				else
				{
					this.endTileFillSync(rsSyncState);
				}
			}
			else
			{
				this.endTileFillSync(rsSyncState);
			}
		}
		else
		{
			this.endTileFillSync(rsSyncState);
		}
	}
	else
	{
		this.processEmptyResult();
		this.endSync();
	}
};
oFF.RscGridCollector.prototype.getColumnModelDimensions = function()
{
	return this.getGridContainer().getColumnsAxis().getModelDimensionsOnAxis();
};
oFF.RscGridCollector.prototype.getColumnResultSetDimensions = function()
{
	return this.getGridContainer().getColumnsAxis().getResultSetDimensionsOnAxis();
};
oFF.RscGridCollector.prototype.getColumnTuples = function()
{
	return this.m_columnTuples;
};
oFF.RscGridCollector.prototype.getGridContainer = function()
{
	return this.m_rscGridContainer;
};
oFF.RscGridCollector.prototype.getPagingValue = function(min, max)
{
	if (min <= 0 && max <= 0)
	{
		return -1;
	}
	if (min <= 0)
	{
		return max;
	}
	if (max <= 0)
	{
		return min;
	}
	return oFF.XMath.min(max, min);
};
oFF.RscGridCollector.prototype.getRecentTileCarrier = function()
{
	return this.m_tileCarrier;
};
oFF.RscGridCollector.prototype.getRowModelDimensions = function()
{
	return this.getGridContainer().getRowsAxis().getModelDimensionsOnAxis();
};
oFF.RscGridCollector.prototype.getRowResultSetDimensions = function()
{
	return this.getGridContainer().getRowsAxis().getResultSetDimensionsOnAxis();
};
oFF.RscGridCollector.prototype.getRowTuples = function()
{
	return this.m_rowTuples;
};
oFF.RscGridCollector.prototype.getVisualizationManager = function()
{
	return this.getActionContext();
};
oFF.RscGridCollector.prototype.invalidate = function()
{
	this.cancelSynchronization();
	this.invalidateInternal();
};
oFF.RscGridCollector.prototype.invalidateInternal = function()
{
	this.m_resultSetContainer = null;
	this.resetState();
	this.getGridContainer().invalidate();
};
oFF.RscGridCollector.prototype.isDataColumnLimitExceeded = function()
{
	return this.m_dataColumnLimitExceeded;
};
oFF.RscGridCollector.prototype.isDataRowLimitExceeded = function()
{
	return this.m_dataRowLimitExceeded;
};
oFF.RscGridCollector.prototype.isPlanningDataEntryEnabled = function()
{
	let queryManager = this.getQueryManager();
	let planningMode = oFF.isNull(queryManager) ? null : this.getQueryManager().getPlanningMode();
	return (oFF.notNull(planningMode) && planningMode !== oFF.PlanningMode.DISABLE_PLANNING);
};
oFF.RscGridCollector.prototype.isReadyForExecution = function()
{
	let rsContainer = this.getQueryManager().getActiveResultSetContainer();
	let rsSyncState = rsContainer.getSyncState();
	return rsContainer.isCursorResultSetAvailable() || rsSyncState !== oFF.SyncState.PROCESSING;
};
oFF.RscGridCollector.prototype.loadApplicationSettings = function()
{
	let visualizationManager = this.getVisualizationManager();
	if (oFF.notNull(visualizationManager))
	{
		let applicationSettings = visualizationManager.getApplicationSettings();
		this.m_minColFetch = applicationSettings.getMinColumnsFetch();
		this.m_minRowFetch = applicationSettings.getMinRowsFetch();
		this.m_maxColLoad = applicationSettings.getMaxColumns();
		this.m_maxRowLoad = applicationSettings.getMaxRows();
		this.m_rowPadding = applicationSettings.getTileRowsPadding();
		this.m_colPadding = applicationSettings.getTileColumnsPadding();
	}
};
oFF.RscGridCollector.prototype.needsStartOver = function(resultSetContainer)
{
	return !this.isPlanningDataEntryEnabled() && resultSetContainer.getOffsetColumns() === 0 && resultSetContainer.getOffsetRows() === 0 && this.exceedsMinBoundaries(this.m_minColFetch, resultSetContainer.getMaxColumns(), this.m_rscGridContainer.getColumnsAxis()) && this.exceedsMinBoundaries(this.m_minRowFetch, resultSetContainer.getMaxRows(), this.m_rscGridContainer.getRowsAxis());
};
oFF.RscGridCollector.prototype.onProviderFetch = function(extResult, documentsServiceResponse, customIdentifier)
{
	this.endSync();
};
oFF.RscGridCollector.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	this.resetState();
	if (oFF.XCollectionUtils.hasElements(this.m_reEntryProcessors))
	{
		this.prunePagingQueue();
		oFF.XCollectionUtils.forEach(this.m_reEntryProcessors, (rep) => {
			this.attachListener(rep.getResultSetCollectorListener(), oFF.ListenerType.SPECIFIC, rep.getIdentifier());
		});
		if (!this.m_outdatedResultSetProcessing)
		{
			this.m_reEntryProcessors.clear();
		}
		this.processExecution(this.getActiveSyncType(), null, null, null);
	}
	else if (this.m_pendingPagingProcessInProgress)
	{
		this.processExecution(this.m_pendingSyncType, null, null, null);
	}
};
oFF.RscGridCollector.prototype.processEmptyResult = function()
{
	let gridContainer = this.getGridContainer();
	gridContainer.fillEmptyTable(this.getQueryModel());
	this.setTileCarrier(oFF.RscGridTileCarrier.create(0, 0, 0, 0));
	this.updateModel();
	this.m_scrollWindowMaxCol = 0;
	this.m_scrollWindowMinCol = 0;
	this.m_scrollWindowMaxRow = 0;
	this.m_scrollWindowMinRow = 0;
	this.m_pendingPagingProcessInProgress = false;
	this.reschedulePendingScroll();
};
oFF.RscGridCollector.prototype.processExecution = function(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier)
{
	this.checkPendingResets();
	let rsContainer = this.getQueryManager().getActiveResultSetContainer();
	let rsSyncState = rsContainer.getSyncState();
	this.setActiveSyncType(syncType);
	this.attachAllListeners(this.getVisualizationManager().getResultSetCollectorListeners());
	if (!rsContainer.isCursorResultSetAvailable() && rsSyncState !== oFF.SyncState.IN_SYNC_WITH_ERROR)
	{
		if (rsSyncState === oFF.SyncState.PROCESSING)
		{
			if (oFF.notNull(queryExecutedListener))
			{
				rsContainer.attachListener(queryExecutedListener, oFF.ListenerType.SPECIFIC, customIdentifier);
			}
			try
			{
				rsContainer.attachListener(this, oFF.ListenerType.SPECIFIC, customIdentifier);
			}
			catch (t)
			{
				this.logError(oFF.XException.getStackTrace(t, 0));
			}
			this.attachListener(resultSetCollectorListener, oFF.ListenerType.SPECIFIC, customIdentifier);
			this.m_outdatedResultSetProcessing = true;
			this.m_reEntryProcessors.add(oFF.RscGridRequestToken.create(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, -1, -1, -1, -1));
		}
		if (rsSyncState === oFF.SyncState.OUT_OF_SYNC)
		{
			this.resetPaging();
			if (oFF.notNull(queryExecutedListener))
			{
				rsContainer.attachListener(queryExecutedListener, oFF.ListenerType.SPECIFIC, customIdentifier);
			}
			this.m_reEntryProcessors.add(oFF.RscGridRequestToken.create(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, -1, -1, -1, -1));
			this.m_outdatedResultSetProcessing = false;
			this.getQueryManager().processQueryExecution(syncType, this, customIdentifier);
		}
	}
	else
	{
		this.m_resultSetContainer = rsContainer;
		this.processGridCollectionActionInternal(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier);
	}
	return this;
};
oFF.RscGridCollector.prototype.processGridCollectionActionInternal = function(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier)
{
	oFF.XCollectionUtils.forEach(this.m_reEntryProcessors, (rep) => {
		this.attachListener(rep.getResultSetCollectorListener(), oFF.ListenerType.SPECIFIC, rep.getIdentifier());
	});
	if (!this.m_outdatedResultSetProcessing)
	{
		this.m_reEntryProcessors.clear();
	}
	this.processSyncAction(syncType, resultSetCollectorListener, customIdentifier);
	if (this.checkPendingResets())
	{
		this.processExecution(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier);
	}
};
oFF.RscGridCollector.prototype.processQueryExecutionWindow = function(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, startRow, sizeRow, startCol, sizeCol)
{
	let cmd = this.getQueryManager().getConvenienceCommands();
	if (sizeRow > 0)
	{
		cmd.setOffsetRows(startRow);
		cmd.setMaxRows(sizeRow);
	}
	if (sizeCol > 0)
	{
		cmd.setOffsetColumns(startCol);
		cmd.setMaxColumns(sizeCol);
	}
	if (oFF.notNull(queryExecutedListener))
	{
		this.getQueryManager().getActiveResultSetContainer().attachListener(queryExecutedListener, oFF.ListenerType.SPECIFIC, customIdentifier);
	}
	this.resetState();
	this.attachListener(resultSetCollectorListener, oFF.ListenerType.SPECIFIC, customIdentifier);
	this.getQueryManager().processQueryExecution(syncType, this, customIdentifier);
};
oFF.RscGridCollector.prototype.processResultSet = function(rsContainer, documentIds)
{
	let offsetRows = rsContainer.getOffsetRows();
	let offsetColumns = rsContainer.getOffsetColumns();
	let gridContainer = this.getGridContainer();
	this.setTileCarrier(gridContainer.fillFromResultSetContainer(rsContainer, documentIds));
	this.updateModel();
	if (offsetRows === 0 && offsetColumns === 0)
	{
		this.m_scrollWindowMaxCol = 0;
		this.m_scrollWindowMinCol = 0;
		this.m_scrollWindowMaxRow = 0;
		this.m_scrollWindowMinRow = 0;
	}
	this.m_pendingPagingProcessInProgress = false;
	this.reschedulePendingScroll();
};
oFF.RscGridCollector.prototype.processSynchronization = function(syncType)
{
	if (syncType === oFF.SyncType.BLOCKING)
	{
		this.fillTileCollector(syncType);
	}
	else
	{
		this.m_timerId = oFF.XTimeout.timeout(10, () => {
			try
			{
				if (this.isSyncCanceled())
				{
					this.addInfo(2, "Action has been canceled");
				}
				else
				{
					this.fillTileCollector(syncType);
				}
				this.m_timerId = null;
			}
			catch (t)
			{
				this.addError(1, oFF.XException.getStackTrace(t, 0));
				this.endSync();
			}
		});
	}
	return syncType !== oFF.SyncType.BLOCKING;
};
oFF.RscGridCollector.prototype.processTileCollection = function(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowScrollReferencePoint, rowScrollEndReferencePoint, colScrollReferencePoint, colScrollEndReferencePoint)
{
	this.loadApplicationSettings();
	let busy = false;
	this.attachAllListeners(this.getVisualizationManager().getResultSetCollectorListeners());
	if (this.getQueryManager().isValid() && this.getSyncState() !== oFF.SyncState.PROCESSING && (this.getQueryManager().getActiveResultSetContainer().getSyncState().isInSync() || rowScrollReferencePoint === 0 && colScrollReferencePoint === 0))
	{
		let gridContainer = this.getGridContainer();
		let dataRowsCountTotal = oFF.XMath.max(gridContainer.getDataRowsTotalCount(), gridContainer.getRowsLoadedCount()) + (gridContainer.totalRowsCountMayBeInaccurate() ? this.m_minRowFetch * 3 : 0);
		if (this.m_maxRowLoad > 0)
		{
			this.m_dataRowLimitExceeded = this.m_maxRowLoad < dataRowsCountTotal;
			dataRowsCountTotal = oFF.XMath.min(this.m_maxRowLoad, dataRowsCountTotal);
		}
		let dataColsCountTotal = oFF.XMath.max(gridContainer.getDataColumnsTotalCount(), gridContainer.getColumnsLoadedCount()) + (gridContainer.totalColumnsCountMayBeInaccurate() ? this.m_minColFetch * 3 : 0);
		if (this.m_maxColLoad > 0)
		{
			this.m_dataColumnLimitExceeded = this.m_maxColLoad < dataColsCountTotal;
			dataColsCountTotal = oFF.XMath.min(this.m_maxColLoad, dataColsCountTotal);
		}
		let correctedRowScrollReferencePoint = oFF.XMath.max(0, oFF.XMath.min(dataRowsCountTotal - 1, rowScrollReferencePoint));
		let correctedColScrollReferencePoint = oFF.XMath.max(0, oFF.XMath.min(dataColsCountTotal - 1, colScrollReferencePoint));
		let correctedRowScrollEndReferencePoint = oFF.XMath.max(0, rowScrollEndReferencePoint > 0 ? oFF.XMath.min(dataRowsCountTotal - 1, rowScrollEndReferencePoint) : dataRowsCountTotal - 1);
		let correctedColScrollEndReferencePoint = oFF.XMath.max(0, colScrollEndReferencePoint > 0 ? oFF.XMath.min(dataColsCountTotal - 1, colScrollEndReferencePoint) : dataColsCountTotal - 1);
		let newMinOrigRow = oFF.XMath.max(0, correctedRowScrollReferencePoint - this.m_rowPadding);
		let newMaxOrigRow = oFF.XMath.min(dataRowsCountTotal - 1, correctedRowScrollEndReferencePoint + this.m_rowPadding);
		let newMinOrigCol = oFF.XMath.max(0, correctedColScrollReferencePoint - this.m_colPadding);
		let newMaxOrigCol = oFF.XMath.min(dataColsCountTotal - 1, correctedColScrollEndReferencePoint + this.m_colPadding);
		if (this.m_maxColLoad > 0 && this.m_minColFetch >= this.m_maxColLoad)
		{
			newMinOrigCol = 0;
			newMaxOrigCol = oFF.XMath.min(this.m_maxColLoad, dataColsCountTotal);
		}
		let newMinRow = gridContainer.getIndexOfFirstIncompleteTileRowAfter(newMinOrigCol, newMaxOrigCol, newMinOrigRow, newMaxOrigRow);
		let newMaxRow = oFF.XMath.max(0, gridContainer.getIndexOfLastIncompleteTileRowBefore(newMinOrigCol, newMaxOrigCol, newMinOrigRow, newMaxOrigRow));
		let newMinCol = gridContainer.getIndexOfFirstIncompleteTileColumnAfter(newMinOrigCol, newMaxOrigCol, newMinOrigRow, newMaxOrigRow);
		let newMaxCol = oFF.XMath.max(0, gridContainer.getIndexOfLastIncompleteTileColumnBefore(newMinOrigCol, newMaxOrigCol, newMinOrigRow, newMaxOrigRow));
		if (newMaxRow >= newMinRow && newMaxRow - newMinRow < this.m_minRowFetch)
		{
			if (newMaxRow === newMaxOrigRow)
			{
				newMaxRow = gridContainer.getIndexOfLastIncompleteTileRowBefore(newMinCol, newMaxCol, newMinRow, oFF.XMath.min(dataRowsCountTotal - 1, newMinRow + this.m_minRowFetch));
			}
			if (newMinRow === newMinOrigRow)
			{
				newMinRow = gridContainer.getIndexOfFirstIncompleteTileRowAfter(newMinCol, newMaxCol, oFF.XMath.max(0, newMaxRow - this.m_minRowFetch), newMaxRow);
			}
		}
		if (newMaxCol >= newMinCol && newMaxCol - newMinCol < this.m_minColFetch)
		{
			if (newMaxCol === newMaxOrigCol)
			{
				newMaxCol = gridContainer.getIndexOfLastIncompleteTileColumnBefore(newMinCol, oFF.XMath.min(dataColsCountTotal - 1, newMinCol + this.m_minColFetch), newMinRow, newMaxRow);
			}
			if (newMinCol === newMinOrigCol)
			{
				newMinCol = gridContainer.getIndexOfFirstIncompleteTileColumnAfter(oFF.XMath.max(0, newMaxCol - this.m_minColFetch), newMaxCol, newMinRow, newMaxRow);
			}
		}
		busy = true;
		if ((newMinRow <= newMaxOrigRow || newMaxOrigRow === -1) && newMaxRow >= newMinOrigRow && newMinRow <= newMaxRow && (newMinRow < dataRowsCountTotal || newMinRow === 0) && newMinRow > -1 && newMaxRow > -1 && (newMinCol <= newMaxOrigCol || newMaxOrigCol === -1) && newMaxCol >= newMinOrigCol && newMinCol <= newMaxCol && (newMinCol < dataColsCountTotal || newMinCol === 0) && newMinCol > -1 && newMaxCol > -1)
		{
			let smallWinStartRow = oFF.XMath.max(newMinRow, correctedRowScrollReferencePoint - this.m_rowPadding);
			let smallWinEndRow = oFF.XMath.min(newMaxRow, rowScrollEndReferencePoint + this.m_rowPadding);
			let smallWinStartCol = oFF.XMath.max(newMinCol, correctedColScrollReferencePoint - this.m_colPadding);
			let smallWinEndCol = oFF.XMath.min(newMaxCol, colScrollEndReferencePoint + this.m_colPadding);
			if (smallWinEndRow > this.m_scrollWindowMaxRow || smallWinStartRow < this.m_scrollWindowMinRow || smallWinEndCol > this.m_scrollWindowMaxCol || smallWinStartCol < this.m_scrollWindowMinCol)
			{
				if (!this.m_pendingPagingProcessInProgress && this.isReadyForExecution())
				{
					this.m_pendingSyncType = syncType;
					this.m_pendingPagingProcessInProgress = true;
					this.executeWindowedRequestInternal(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, newMinRow, newMaxRow, newMinCol, newMaxCol);
				}
				else
				{
					this.enqueuePaging(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowScrollReferencePoint, rowScrollEndReferencePoint, colScrollReferencePoint, colScrollEndReferencePoint);
				}
			}
		}
		else
		{
			busy = false;
			this.attachListener(resultSetCollectorListener, oFF.ListenerType.SPECIFIC, customIdentifier);
			this.endSync();
		}
	}
	else
	{
		this.enqueuePaging(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowScrollReferencePoint, rowScrollEndReferencePoint, colScrollReferencePoint, colScrollEndReferencePoint);
	}
	return busy;
};
oFF.RscGridCollector.prototype.prunePagingQueue = function()
{
	while (oFF.XCollectionUtils.hasElements(this.m_pagingQueue))
	{
		this.m_pagingQueue.removeAt(0);
	}
};
oFF.RscGridCollector.prototype.releaseObjectInternal = function()
{
	oFF.XTimeout.clear(this.m_timerId);
	this.m_timerId = null;
	this.m_columnTuples = null;
	this.m_rowTuples = null;
	this.m_rscGridContainer = oFF.XObjectExt.release(this.m_rscGridContainer);
	oFF.DfRsSyncAction.prototype.releaseObjectInternal.call( this );
};
oFF.RscGridCollector.prototype.reschedulePendingScroll = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_pagingQueue))
	{
		let currentRequest = this.m_pagingQueue.get(0);
		this.m_pagingQueue.removeAt(0);
		this.processTileCollection(currentRequest.getSyncType(), currentRequest.getResultSetCollectorListener(), currentRequest.getQueryExecutedListener(), currentRequest.getIdentifier(), currentRequest.getRowStart(), currentRequest.getRowEnd(), currentRequest.getColStart(), currentRequest.getColEnd());
	}
};
oFF.RscGridCollector.prototype.resetPaging = function()
{
	this.loadApplicationSettings();
	let queryManager = this.getQueryManager();
	queryManager.setOffsetColumns(0);
	queryManager.setOffsetRows(0);
	queryManager.setMaxColumns(this.getPagingValue(this.m_minColFetch, this.m_maxColLoad));
	queryManager.setMaxRows(this.getPagingValue(this.m_minRowFetch, this.m_maxRowLoad));
};
oFF.RscGridCollector.prototype.resetState = function()
{
	let curSyncState = this.getSyncState();
	if (curSyncState.isInSync())
	{
		this._resetSyncStateInternal(false);
	}
	else if (curSyncState === oFF.SyncState.PROCESSING)
	{
		this.m_pendingReset = true;
	}
};
oFF.RscGridCollector.prototype.setGridContainer = function(rscGridContainer)
{
	this.m_rscGridContainer = rscGridContainer;
};
oFF.RscGridCollector.prototype.setTileCarrier = function(tileCarrier)
{
	this.m_tileCarrier = tileCarrier;
	this.setData(tileCarrier);
};
oFF.RscGridCollector.prototype.setupContainer = function()
{
	this.m_columnTuples = oFF.XList.create();
	this.m_rowTuples = oFF.XList.create();
	this.loadApplicationSettings();
};
oFF.RscGridCollector.prototype.updateModel = function()
{
	let queryManager = this.getQueryManager();
	let resultSetContainer = oFF.isNull(queryManager) ? null : queryManager.getActiveResultSetContainer();
	let classicResultSet = oFF.isNull(resultSetContainer) ? null : resultSetContainer.isCursorResultSetAvailable() ? resultSetContainer.getClassicResultSet() : null;
	if (oFF.notNull(classicResultSet))
	{
		let rcc = classicResultSet.getResultSetContainer();
		let offsetColumns = rcc.getOffsetColumns();
		let offsetRows = rcc.getOffsetRows();
		if (this.needsStartOver(rcc))
		{
			this.m_columnTuples.clear();
			this.m_rowTuples.clear();
		}
		this.fillAxis(offsetColumns, classicResultSet.getColumnsAxis(), this.m_columnTuples);
		this.fillAxis(offsetRows, classicResultSet.getRowsAxis(), this.m_rowTuples);
	}
};

oFF.RscListCollector = function() {};
oFF.RscListCollector.prototype = new oFF.DfRsSyncAction();
oFF.RscListCollector.prototype._ff_c = "RscListCollector";

oFF.RscListCollector.create = function(gridCollector, leadingAxisType, structureDimensionList, selectionPath, memberRestrictions)
{
	let instance = new oFF.RscListCollector();
	instance.setupAction(null, null, null, gridCollector.getVisualizationManager());
	instance.setupWithAxisTypeStructuresAndSelectionPath(leadingAxisType, structureDimensionList, selectionPath, memberRestrictions);
	instance.setGridContainer(gridCollector.getGridContainer());
	return instance;
};
oFF.RscListCollector.prototype.m_leadingAxisType = null;
oFF.RscListCollector.prototype.m_memberRestrictions = null;
oFF.RscListCollector.prototype.m_membersMap = null;
oFF.RscListCollector.prototype.m_pendingIdentifier = null;
oFF.RscListCollector.prototype.m_pendingListCollectorListener = null;
oFF.RscListCollector.prototype.m_pendingSyncType = null;
oFF.RscListCollector.prototype.m_rscGridContainer = null;
oFF.RscListCollector.prototype.m_selectionPath = null;
oFF.RscListCollector.prototype.m_structuresToExtract = null;
oFF.RscListCollector.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onListCollectorFilled(extResult, extResult.getData(), customIdentifier);
};
oFF.RscListCollector.prototype.checkDimensionsFilled = function(dimensionsToCheck)
{
	return !oFF.XCollectionUtils.hasElements(dimensionsToCheck) || oFF.XStream.of(dimensionsToCheck).allMatch((strDim) => {
		return this.m_membersMap.containsKey(strDim.getName());
	});
};
oFF.RscListCollector.prototype.checkReadyAndContinue = function()
{
	if (this.checkDimensionsFilled(this.m_structuresToExtract))
	{
		this.continueCreationInternally(this.m_pendingSyncType, this.m_pendingListCollectorListener, this.m_pendingIdentifier, this.m_leadingAxisType, this.m_structuresToExtract);
	}
};
oFF.RscListCollector.prototype.continueCreationInternally = function(syncType, listCollectorListener, customIdentifier, leadingAxis, structuresToExtract)
{
	let primaryAxis = leadingAxis === oFF.AxisType.COLUMNS ? this.m_rscGridContainer.getColumnsAxis() : this.m_rscGridContainer.getRowsAxis();
	let secondaryAxis = leadingAxis === oFF.AxisType.COLUMNS ? this.m_rscGridContainer.getRowsAxis() : this.m_rscGridContainer.getColumnsAxis();
	let data = oFF.RscListContainer.createWithMembers(this.m_rscGridContainer, primaryAxis, secondaryAxis, structuresToExtract, this.m_membersMap, this.m_selectionPath, this.m_memberRestrictions);
	this.setData(data);
	this.processSyncAction(syncType, listCollectorListener, customIdentifier);
};
oFF.RscListCollector.prototype.getGridContainer = function()
{
	return this.m_rscGridContainer;
};
oFF.RscListCollector.prototype.getListContainer = function()
{
	return this.getData();
};
oFF.RscListCollector.prototype.getVisualizationManager = function()
{
	return this.m_rscGridContainer.getVisualizationManager();
};
oFF.RscListCollector.prototype.gridReadyAndContinue = function()
{
	if (oFF.XCollectionUtils.hasElements(this.m_structuresToExtract))
	{
		for (let i = 0; i < this.m_structuresToExtract.size(); i++)
		{
			let dim = this.m_structuresToExtract.get(i);
			let oldDimIDl = dim.getSelector().getSelectorRootLevel();
			let oldHierarchy = dim.getSelector().getSelectorHierarchyName();
			let oldHierarchyActive = dim.getSelector().isSelectorHierarchyActive();
			let hierarchyName = dim.getHierarchyName();
			let hierarchyActive = dim.isHierarchyActive();
			if (dim.getDimensionType() === oFF.DimensionType.ACCOUNT)
			{
				if (oFF.XStringUtils.isNullOrEmpty(hierarchyName))
				{
					hierarchyName = dim.getDefaultHierarchyName();
				}
				hierarchyActive = true;
			}
			dim.getSelector().setSelectorHierarchy(hierarchyActive, hierarchyName, -1);
			dim.processValueHelp(this.getActiveSyncType(), this, dim);
			dim.getSelector().setSelectorHierarchy(oldHierarchyActive, oldHierarchy, oldDimIDl);
		}
	}
	else
	{
		this.checkReadyAndContinue();
	}
};
oFF.RscListCollector.prototype.invalidate = function() {};
oFF.RscListCollector.prototype.onGridCollectorFilled = function(extResult, gridContainer, customIdentifier)
{
	if (extResult.isValid())
	{
		this.m_rscGridContainer = gridContainer;
		let gridCollector = this.getVisualizationManager().getGridCollector();
		if (gridCollector.isDataRowLimitExceeded())
		{
			this.addWarning(oFF.RscGridCollectorConstants.WARNING_ROW_LIMIT_EXCEEDED_CODE, oFF.RscGridCollectorConstants.WARNING_ROW_LIMIT_EXCEEDED_MESSAGE);
		}
		if (gridCollector.isDataColumnLimitExceeded())
		{
			this.addWarning(oFF.RscGridCollectorConstants.WARNING_COLUMN_LIMIT_EXCEEDED_CODE, oFF.RscGridCollectorConstants.WARNING_COLUMN_LIMIT_EXCEEDED_MESSAGE);
		}
	}
	this.gridReadyAndContinue();
};
oFF.RscListCollector.prototype.onValuehelpExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	oFF.XCollectionUtils.forEach(extResult.getMessages(), (msg) => {
		this.addMessage(msg);
	});
	if (oFF.notNull(resultSetContainer) && !resultSetContainer.hasErrors())
	{
		let dimension = customIdentifier;
		let loadedMembers = oFF.XStream.of(extResult.getData()).collect(oFF.XStreamCollector.toListOfNameObject());
		let customMembers = dimension.getCustomStructureMembers();
		for (let i = 0; i < customMembers.size(); i++)
		{
			let structureMember = customMembers.get(i);
			let structureMemberName = structureMember.getName();
			if (!loadedMembers.containsKey(structureMemberName))
			{
				loadedMembers.add(oFF.QFactory.createMeasureHelpNode(structureMemberName, structureMember));
			}
		}
		this.m_membersMap.put(dimension.getName(), loadedMembers);
	}
	this.checkReadyAndContinue();
};
oFF.RscListCollector.prototype.processFullListCollection = function(syncType, listCollectorListener, resultSetCollectorListener, queryExecutedListener, customIdentifier)
{
	this.m_pendingIdentifier = customIdentifier;
	this.m_pendingSyncType = syncType;
	this.m_pendingListCollectorListener = listCollectorListener;
	if (this.m_rscGridContainer.isComplete())
	{
		this.gridReadyAndContinue();
	}
	else
	{
		let gridCollector = this.getVisualizationManager().getSynchronizedGridCollector();
		this.resetState();
		let gridCollectorSyncState = gridCollector.getSyncState();
		let qmSyncState = this.getQueryManager().getActiveResultSetContainer().getSyncState();
		this.clearMessages();
		oFF.XCollectionUtils.forEach(gridCollector.getMessages(), (rmsg) => {
			this.addMessage(rmsg);
		});
		if (oFF.notNull(resultSetCollectorListener))
		{
			gridCollector.attachListener(resultSetCollectorListener, oFF.ListenerType.SPECIFIC, customIdentifier);
		}
		if (gridCollectorSyncState === oFF.SyncState.OUT_OF_SYNC && qmSyncState !== oFF.SyncState.PROCESSING)
		{
			gridCollector.processExecution(syncType, this, queryExecutedListener, customIdentifier);
		}
		else if (gridCollectorSyncState.isInSync())
		{
			let applicationSettings = gridCollector.getVisualizationManager().getApplicationSettings();
			let colsToFetch = applicationSettings.getMinColumnsFetch() * 5;
			let rowsToFetch = applicationSettings.getMinRowsFetch() * 20;
			let container = gridCollector.getGridContainer();
			if (oFF.notNull(container))
			{
				let totalCols = container.getDataColumnsTotalCount();
				if (totalCols > 0)
				{
					colsToFetch = oFF.XMath.min(colsToFetch, totalCols);
				}
				let totalRows = container.getDataRowsTotalCount();
				if (totalRows > 0)
				{
					rowsToFetch = oFF.XMath.min(totalRows, oFF.XMath.div(200000, oFF.XMath.max(1, colsToFetch)));
				}
			}
			gridCollector.processTileCollection(syncType, this, queryExecutedListener, customIdentifier, 0, rowsToFetch, 0, colsToFetch);
		}
	}
	return this;
};
oFF.RscListCollector.prototype.processSynchronization = function(syncType)
{
	return false;
};
oFF.RscListCollector.prototype.releaseObjectInternal = function()
{
	this.m_rscGridContainer = null;
	this.m_membersMap = oFF.XObjectExt.release(this.m_membersMap);
	this.m_selectionPath = oFF.XObjectExt.release(this.m_selectionPath);
	this.m_memberRestrictions = oFF.XObjectExt.release(this.m_memberRestrictions);
};
oFF.RscListCollector.prototype.resetState = function() {};
oFF.RscListCollector.prototype.setGridContainer = function(rscGridContainer)
{
	this.m_rscGridContainer = rscGridContainer;
};
oFF.RscListCollector.prototype.setupWithAxisTypeStructuresAndSelectionPath = function(leadingAxisType, structureDimensionList, selectionPath, memberRestrictions)
{
	this.m_membersMap = oFF.XLinkedHashMapByString.create();
	this.m_leadingAxisType = leadingAxisType;
	this.m_structuresToExtract = oFF.XStream.of(structureDimensionList).filterNullValues().collect(oFF.XStreamCollector.toList());
	this.m_selectionPath = oFF.isNull(selectionPath) ? null : selectionPath.createMapByStringCopy();
	this.m_memberRestrictions = oFF.isNull(memberRestrictions) ? null : memberRestrictions.createMapByStringCopy();
};

oFF.CellContextGetAction = function() {};
oFF.CellContextGetAction.prototype = new oFF.DfRsSyncAction();
oFF.CellContextGetAction.prototype._ff_c = "CellContextGetAction";

oFF.CellContextGetAction.CELL_CONTEXT_NAME = "DF";
oFF.CellContextGetAction.createAndRunAction = function(syncType, listener, queryManager, indexInfo)
{
	let obj = new oFF.CellContextGetAction();
	obj.setupActionAndRun(syncType, listener, indexInfo, queryManager);
	return obj;
};
oFF.CellContextGetAction.populateDimensionStructure = function(dimension, cartesianList)
{
	let dimensionStructure = oFF.PrStructure.create();
	dimensionStructure.putString("Name", dimension.getExternalName());
	dimensionStructure.putString("TechName", dimension.getName());
	dimensionStructure.putBoolean("HierarchyActive", dimension.isHierarchyActive());
	dimensionStructure.put("Filter", oFF.QFilterCartesianListTransformer.create(cartesianList).convertMemberFilterList());
	return dimensionStructure;
};
oFF.CellContextGetAction.prototype.m_indexInfo = null;
oFF.CellContextGetAction.prototype.m_queryManager = null;
oFF.CellContextGetAction.prototype.callListener = function(extResult, listener, data, customIdentifier)
{
	listener.onCellContext(extResult, data, customIdentifier);
};
oFF.CellContextGetAction.prototype.onQueryExecuted = function(extResult, resultSetContainer, customIdentifier)
{
	let result = oFF.PrStructure.create();
	this.addAllMessages(extResult);
	if (extResult.isValid())
	{
		let currentCellContext = resultSetContainer.getCellContextByName(oFF.CellContextGetAction.CELL_CONTEXT_NAME);
		let cartesianProduct = currentCellContext.getCartesianProduct();
		if (oFF.notNull(cartesianProduct))
		{
			for (let i = 0; i < cartesianProduct.size(); i++)
			{
				let cartesianList = cartesianProduct.getCartesianChild(i);
				let dimension = cartesianList.getDimension();
				if (oFF.notNull(dimension))
				{
					let key = dimension.getExternalName();
					if (oFF.XStringUtils.isNullOrEmpty(key))
					{
						key = dimension.getName();
					}
					result.put(key, oFF.CellContextGetAction.populateDimensionStructure(dimension, cartesianList));
				}
			}
		}
	}
	this.setData(result);
	oFF.XObjectExt.release(this.m_queryManager);
	this.endSync();
};
oFF.CellContextGetAction.prototype.processSynchronization = function(syncType)
{
	try
	{
		let columnIndex = this.m_indexInfo.getColumnIndex();
		let rowIndex = this.m_indexInfo.getRowIndex();
		let queryModel = this.m_queryManager.getQueryModel();
		let cellContextManager = queryModel.getCellContextManager();
		let cellContext = oFF.QFactory.createCellContext(queryModel, oFF.CellContextGetAction.CELL_CONTEXT_NAME);
		cellContext.setRowIndex(rowIndex);
		cellContext.setColumnIndex(columnIndex);
		cellContext.setComponentsExternal(true);
		cellContextManager.addCellContext(cellContext);
		this.m_queryManager.setResultSetTransportEnabled(false);
		this.m_queryManager.setOffsetColumns(columnIndex);
		this.m_queryManager.setOffsetRows(rowIndex);
		this.m_queryManager.setMaxColumns(1);
		this.m_queryManager.setMaxRows(1);
		this.m_queryManager.processQueryExecution(syncType, this, null);
		return true;
	}
	catch (t)
	{
		this.addError(oFF.ErrorCodes.CELL_CONTEXT_ACTION_FAILED, oFF.XException.getMessage(t));
		return false;
	}
};
oFF.CellContextGetAction.prototype.releaseObjectInternal = function()
{
	this.m_queryManager = null;
	this.m_indexInfo = null;
};
oFF.CellContextGetAction.prototype.setupAction = function(syncType, listener, customIdentifier, context)
{
	oFF.DfRsSyncAction.prototype.setupAction.call( this , syncType, listener, customIdentifier, context);
	this.m_queryManager = context.cloneQueryManager();
	this.m_indexInfo = customIdentifier;
};

oFF.OlapVisualizationTemplateManager = function() {};
oFF.OlapVisualizationTemplateManager.prototype = new oFF.QModelComponent();
oFF.OlapVisualizationTemplateManager.prototype._ff_c = "OlapVisualizationTemplateManager";

oFF.OlapVisualizationTemplateManager.DEFAULT_TABLE_STYLE_LINK = "DefaultTableStyle";
oFF.OlapVisualizationTemplateManager.PLANNING_UPDATED_VALUES_STYLE = "PlanningUpdatedValues";
oFF.OlapVisualizationTemplateManager.WRAPPING_STYLE = "WrappingStyle";
oFF.OlapVisualizationTemplateManager.create = function(context)
{
	let visualizationManager = new oFF.OlapVisualizationTemplateManager();
	visualizationManager.setupExt(context);
	return visualizationManager;
};
oFF.OlapVisualizationTemplateManager.prototype.m_chartStyles = null;
oFF.OlapVisualizationTemplateManager.prototype.m_datapointVariableContainers = null;
oFF.OlapVisualizationTemplateManager.prototype.m_tableDefinitions = null;
oFF.OlapVisualizationTemplateManager.prototype.m_variableContainer = null;
oFF.OlapVisualizationTemplateManager.prototype.m_visualizationSpecificStyleContainers = null;
oFF.OlapVisualizationTemplateManager.prototype.addNewChartTemplateList = function(name)
{
	let chartTemplate = oFF.QVisualizationTemplateList.createTemplateList(this, name, (parentObject, nameTextPair) => {
		let template = oFF.QChartStyle.create(this.getContext(), parentObject);
		template.setName(nameTextPair.getFirstObject().getString());
		template.setText(nameTextPair.getSecondObject().getString());
		return template;
	});
	this.m_chartStyles.add(chartTemplate);
	return chartTemplate;
};
oFF.OlapVisualizationTemplateManager.prototype.addNewDatapointVariableContainer = function(name, text)
{
	let variableContainer = oFF.QVizDataPointVariableContainer.create(this.getContext(), this, name, text, null);
	variableContainer.setName(name);
	this.m_datapointVariableContainers.add(variableContainer);
	return variableContainer;
};
oFF.OlapVisualizationTemplateManager.prototype.addNewTableTemplateList = function(name)
{
	let tableTemplate = oFF.QVisualizationTemplateList.createTemplateList(this, name, (parentObject, nameTextPair) => {
		let template = oFF.QTableDefinition.create(this.getContext(), parentObject, nameTextPair.getFirstObject().getString(), oFF.ProtocolBindingType.SAC_TABLE_GRID, oFF.SemanticBindingType.TABLE);
		template.setText(nameTextPair.getSecondObject().getString());
		return template;
	});
	this.m_tableDefinitions.add(tableTemplate);
	return tableTemplate;
};
oFF.OlapVisualizationTemplateManager.prototype.addNewVisualizationSpecificStyleContainer = function()
{
	let newStyleContainer = oFF.QVisualizationTypeSpecificStyleContainer.create(this.getContext(), this);
	this.m_visualizationSpecificStyleContainers.add(newStyleContainer);
	return newStyleContainer;
};
oFF.OlapVisualizationTemplateManager.prototype.clearVisualizationSpecificStyleContainers = function()
{
	this.m_visualizationSpecificStyleContainers.clear();
};
oFF.OlapVisualizationTemplateManager.prototype.getChartTemplateForName = function(name)
{
	return this.m_chartStyles.getByKey(name);
};
oFF.OlapVisualizationTemplateManager.prototype.getChartTemplates = function()
{
	return this.m_chartStyles;
};
oFF.OlapVisualizationTemplateManager.prototype.getDatapointVariableContainers = function()
{
	return this.m_datapointVariableContainers;
};
oFF.OlapVisualizationTemplateManager.prototype.getDatapointVariableContainersByExceptionName = function(exceptionName)
{
	return oFF.XStream.of(this.m_datapointVariableContainers).filter((vc) => {
		return oFF.XString.isEqual(vc.getExceptionName(), exceptionName);
	}).collect(oFF.XStreamCollector.toListOfNameObject());
};
oFF.OlapVisualizationTemplateManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.OLAP_VISUALIZATION_TEMPLATE_MANAGER;
};
oFF.OlapVisualizationTemplateManager.prototype.getOrCreateChartTemplateList = function(name)
{
	return this.m_chartStyles.containsKey(name) ? this.m_chartStyles.getByKey(name) : this.addNewChartTemplateList(name);
};
oFF.OlapVisualizationTemplateManager.prototype.getOrCreateTableTemplateList = function(name)
{
	return this.m_tableDefinitions.containsKey(name) ? this.m_tableDefinitions.getByKey(name) : this.addNewTableTemplateList(name);
};
oFF.OlapVisualizationTemplateManager.prototype.getTableTemplateForName = function(name)
{
	return this.m_tableDefinitions.getByKey(name);
};
oFF.OlapVisualizationTemplateManager.prototype.getTableTemplates = function()
{
	return this.m_tableDefinitions;
};
oFF.OlapVisualizationTemplateManager.prototype.getVisualizationSpecificStyleContainers = function()
{
	return this.m_visualizationSpecificStyleContainers;
};
oFF.OlapVisualizationTemplateManager.prototype.getVisualizationVariableHolder = function()
{
	return this.m_variableContainer;
};
oFF.OlapVisualizationTemplateManager.prototype.isEmpty = function()
{
	return !oFF.XCollectionUtils.hasElements(this.m_chartStyles) && !oFF.XCollectionUtils.hasElements(this.m_tableDefinitions) && !oFF.XCollectionUtils.hasElements(this.m_datapointVariableContainers) && !this.m_variableContainer.hasVariables();
};
oFF.OlapVisualizationTemplateManager.prototype.releaseObject = function()
{
	this.m_tableDefinitions = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_tableDefinitions);
	this.m_chartStyles = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_chartStyles);
	this.m_variableContainer = oFF.XObjectExt.release(this.m_variableContainer);
	this.m_datapointVariableContainers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_datapointVariableContainers);
	this.m_visualizationSpecificStyleContainers = oFF.XCollectionUtils.releaseEntriesAndCollectionIfNotNull(this.m_visualizationSpecificStyleContainers);
	oFF.QModelComponent.prototype.releaseObject.call( this );
};
oFF.OlapVisualizationTemplateManager.prototype.removeDatapointVariableContainerByName = function(name)
{
	this.m_datapointVariableContainers.removeElement(this.m_datapointVariableContainers.getByKey(name));
};
oFF.OlapVisualizationTemplateManager.prototype.setModCounter = function(modCounter)
{
	this.updateModCounter(modCounter);
};
oFF.OlapVisualizationTemplateManager.prototype.setupDefaultStyles = function()
{
	oFF.QDefaultTableStyleConfigurator.getInstance().configure(this);
	oFF.QDefaultChartStyleConfigurator.getInstance().configure(this);
	oFF.QDefaultTableTemplatesConfigurator.getInstance().configure(this);
	oFF.QExtendedChartTemplatesConfigurator.getInstance().configure(this);
};
oFF.OlapVisualizationTemplateManager.prototype.setupExt = function(context)
{
	this.setupModelComponentWithName(context, null, "VisualizationTemplateManager");
	this.m_tableDefinitions = oFF.XListOfNameObject.create();
	this.m_chartStyles = oFF.XListOfNameObject.create();
	this.m_variableContainer = oFF.QVisualizationVariableHolder.create(this.getContext(), this, null);
	this.m_datapointVariableContainers = oFF.XListOfNameObject.create();
	this.m_visualizationSpecificStyleContainers = oFF.XList.create();
	this.setupDefaultStyles();
};

oFF.QQuickAction = function() {};
oFF.QQuickAction.prototype = new oFF.QModelComponent();
oFF.QQuickAction.prototype._ff_c = "QQuickAction";


oFF.QQuickActionParameterAbstract = function() {};
oFF.QQuickActionParameterAbstract.prototype = new oFF.QModelComponent();
oFF.QQuickActionParameterAbstract.prototype._ff_c = "QQuickActionParameterAbstract";

oFF.QQuickActionParameterAbstract.prototype.isApplicableSimpleParameters = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	return oFF.XCollectionUtils.size(this.resolveOlapContextValue(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)) === 1;
};
oFF.QQuickActionParameterAbstract.prototype.resolveConstantValue = oFF.noSupport;
oFF.QQuickActionParameterAbstract.prototype.resolveOlapContextValue = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	return this.resolveConstantValue();
};

oFF.RsVizChartContainer = function() {};
oFF.RsVizChartContainer.prototype = new oFF.RsVizVisualizationContainer();
oFF.RsVizChartContainer.prototype._ff_c = "RsVizChartContainer";

oFF.RsVizChartContainer.create = function(chartDefinition)
{
	let instance = new oFF.RsVizChartContainer();
	instance.setupVisualization(chartDefinition);
	instance.setupAction(null, null, null, chartDefinition);
	return instance;
};
oFF.RsVizChartContainer.prototype.m_visualizationProvidedListener = null;
oFF.RsVizChartContainer.prototype.createVisualizationData = function()
{
	let chartDefinition = this.getVisualizationDefinition();
	let listCollector = this.getListCollector();
	let chartData = this.getVisualizationData();
	let listInSync = listCollector.getSyncState().isInSync();
	if (listInSync)
	{
		if (oFF.isNull(chartData))
		{
			let queryModel = this.getQueryModel();
			let datasetId = null;
			if (oFF.notNull(queryModel))
			{
				datasetId = queryModel.getDatasetId();
				if (oFF.XStringUtils.isNullOrEmpty(datasetId))
				{
					datasetId = queryModel.getDataSource().getFullQualifiedName();
				}
			}
			chartData = oFF.ChartVisualization.create(chartDefinition.getName(), chartDefinition.getText(), datasetId);
		}
		let listContainer = listCollector.getListContainer();
		oFF.OlapVizToChartConverterUtil.processListContainerToChart(listContainer, chartDefinition, chartData);
		chartData.setUserProfile(this.getProcess().getUserProfile());
		this.setVisualizationData(chartData);
	}
	return true;
};
oFF.RsVizChartContainer.prototype.getCategoryElement = function(contextStructure)
{
	let categoryPair = this.getCategoryInternal(contextStructure);
	let category = categoryPair.getFirstObject();
	let categoryStructure = categoryPair.getSecondObject();
	let categoryElementStructure = oFF.isNull(categoryStructure) || oFF.isNull(category) ? null : categoryStructure.getStructureByKey(oFF.HighChartConstants.V_CATEGORY_ELEMENT);
	return oFF.isNull(categoryElementStructure) ? null : category.getCategoryElementByName(categoryElementStructure.getStringByKey(oFF.HighChartConstants.V_NAME));
};
oFF.RsVizChartContainer.prototype.getCategoryInternal = function(contextStructure)
{
	let visualizationData = this.getVisualizationData();
	let axisStructure = oFF.isNull(visualizationData) || oFF.isNull(contextStructure) ? null : contextStructure.getStructureByKey(oFF.HighChartConstants.K_AXIS);
	let axis = oFF.isNull(axisStructure) ? null : visualizationData.getAxisByName(axisStructure.getStringByKey(oFF.HighChartConstants.V_NAME));
	let categoryStructure = oFF.isNull(axis) || oFF.isNull(axisStructure) ? null : axisStructure.getStructureByKey(oFF.HighChartConstants.V_CATEGORY);
	let category = oFF.isNull(categoryStructure) ? null : axis.getAxisDomain().getAsCategorial().getCategoryByName(categoryStructure.getStringByKey(oFF.HighChartConstants.V_NAME));
	return oFF.XPair.create(category, categoryStructure);
};
oFF.RsVizChartContainer.prototype.getDataPointCategory = function(contextStructure)
{
	return this.getSpecificCategoryInternal(contextStructure, oFF.HighChartConstants.V_DATA_POINT);
};
oFF.RsVizChartContainer.prototype.getDistributionCategory = function(contextStructure)
{
	return this.getSpecificCategoryInternal(contextStructure, oFF.HighChartConstants.V_SERIES);
};
oFF.RsVizChartContainer.prototype.getGroupCategory = function(contextStructure)
{
	return this.getSpecificCategoryInternal(contextStructure, oFF.HighChartConstants.V_SERIES_GROUP);
};
oFF.RsVizChartContainer.prototype.getListCollector = function()
{
	let queryModel = this.getQueryManager().getQueryModel();
	let visualizationManager = oFF.isNull(queryModel) ? null : queryModel.getVisualizationManager();
	let chartDefinitionBase = this.getVisualizationDefinition();
	return oFF.isNull(visualizationManager) ? null : visualizationManager.getListCollector(chartDefinitionBase.getLeadingAxis(), chartDefinitionBase.getStructuresToRemap(), chartDefinitionBase.getSelectionPath(), chartDefinitionBase.getMemberRestrictions());
};
oFF.RsVizChartContainer.prototype.getSpecificCategoryInternal = function(contextStructure, name)
{
	let categoryPair = oFF.isNull(contextStructure) ? null : this.getCategoryInternal(contextStructure.getStructureByKey(name));
	return oFF.isNull(categoryPair) ? null : categoryPair.getFirstObject();
};
oFF.RsVizChartContainer.prototype.isOnCategory = function(contextStructure)
{
	return oFF.notNull(contextStructure) && contextStructure.containsKey(oFF.HighChartConstants.K_AXIS);
};
oFF.RsVizChartContainer.prototype.isOnDataPoint = function(contextStructure)
{
	return oFF.notNull(contextStructure) && contextStructure.containsKey(oFF.HighChartConstants.V_DATA_POINT);
};
oFF.RsVizChartContainer.prototype.onGridCollectorFilled = function(extResult, gridContainer, customIdentifier) {};
oFF.RsVizChartContainer.prototype.onListCollectorFilled = function(extResult, listContainer, customIdentifier)
{
	if (extResult.isValid())
	{
		this.processVisualizationActionInternal(this.getActiveSyncType(), this.m_visualizationProvidedListener, customIdentifier);
		this.m_visualizationProvidedListener = null;
	}
	else
	{
		if (extResult.hasErrors())
		{
			let errorIt = extResult.getErrors().getIterator();
			while (errorIt.hasNext())
			{
				let errorMsg = errorIt.next();
				this.addError(errorMsg.getCode(), errorMsg.getText());
			}
		}
		this.endSync();
	}
};
oFF.RsVizChartContainer.prototype.processExecution = function(syncType, listener, customIdentifier)
{
	let listCollector = this.getListCollector();
	if (oFF.notNull(listCollector))
	{
		let lscSyncState = listCollector.getSyncState();
		let rsSyncState = this.getQueryManager().getActiveResultSetContainer().getSyncState();
		this.setActiveSyncType(syncType);
		this.attachAllListeners(this.getVisualizationDefinition().getVisualizationProvidedListeners());
		if (!listCollector.isValid() && lscSyncState === oFF.SyncState.PROCESSING)
		{
			throw oFF.XException.createIllegalStateException("Cannot retrieve the resultset while processing");
		}
		else if (rsSyncState === oFF.SyncState.OUT_OF_SYNC)
		{
			this.resetPaging();
			this.m_visualizationProvidedListener = listener;
			this.clearMessages();
			oFF.XCollectionUtils.forEach(listCollector.getMessages(), (rmsg) => {
				this.addMessage(rmsg);
			});
			listCollector.processFullListCollection(syncType, this, null, null, customIdentifier);
		}
		else if (lscSyncState === oFF.SyncState.OUT_OF_SYNC)
		{
			this.m_visualizationProvidedListener = listener;
			listCollector.processFullListCollection(syncType, this, null, null, customIdentifier);
		}
		else if (listCollector.isSyncCanceled())
		{
			this.cancelSynchronization();
		}
		else
		{
			this.processVisualizationActionInternal(syncType, listener, customIdentifier);
		}
	}
	return this;
};
oFF.RsVizChartContainer.prototype.setupVisualization = function(chartDefinition)
{
	this.setVisualizationDefinition(chartDefinition);
};
oFF.RsVizChartContainer.prototype.updateDefinition = function() {};

oFF.RsVizKpiContainer = function() {};
oFF.RsVizKpiContainer.prototype = new oFF.RsVizVisualizationContainer();
oFF.RsVizKpiContainer.prototype._ff_c = "RsVizKpiContainer";

oFF.RsVizKpiContainer.create = function(kpiDefinition)
{
	let instance = new oFF.RsVizKpiContainer();
	instance.setupVisualization(kpiDefinition);
	instance.setupAction(null, null, null, kpiDefinition);
	return instance;
};
oFF.RsVizKpiContainer.prototype.m_visualizationProvidedListener = null;
oFF.RsVizKpiContainer.prototype.createVisualizationData = function()
{
	let kpiDefinition = this.getVisualizationDefinition();
	let listCollector = this.getListCollector();
	let kpiData = this.getVisualizationData();
	let listContainer = oFF.isNull(listCollector) ? null : listCollector.getListContainer();
	let success = oFF.notNull(listCollector) && listCollector.getSyncState().isInSync();
	if (success)
	{
		if (oFF.isNull(kpiData))
		{
			let queryModel = this.getQueryModel();
			let datasetId = null;
			if (oFF.notNull(queryModel))
			{
				datasetId = queryModel.getDatasetId();
				if (oFF.XStringUtils.isNullOrEmpty(datasetId))
				{
					datasetId = queryModel.getDataSource().getFullQualifiedName();
				}
			}
			kpiData = oFF.KpiVisualization.create(kpiDefinition.getName(), kpiDefinition.getText());
		}
		let listTuples = listContainer.getListAxis().getTuplesOnAxis();
		for (let i = 0; i < oFF.XCollectionUtils.size(listTuples); i++)
		{
			let listTuple = listTuples.get(i);
			this.fillVisualization(kpiDefinition, listTuple, kpiData);
		}
		this.setVisualizationData(kpiData);
	}
	return success;
};
oFF.RsVizKpiContainer.prototype.fillVisualization = function(kpiDefinition, listTuple, kpiData)
{
	let leftOver = oFF.XHashMapByString.create();
	let kpiPath = kpiDefinition.getSelectionPath();
	oFF.XCollectionUtils.forEach(kpiPath.getKeysAsReadOnlyList(), (el) => {
		leftOver.put(el, kpiPath.getByKey(el));
	});
	kpiData.setTitle(kpiDefinition.getTitle());
	kpiData.setOverallContext(oFF.XStream.ofString(kpiPath.getKeysAsReadOnlyList()).map((dm) => {
		return oFF.XPairOfString.create(dm.getString(), kpiPath.getByKey(dm.getString()));
	}).collect(oFF.XStreamCollector.toList()));
	let pathKey = oFF.XList.create();
	oFF.XStream.of(listTuple.getAxisReference().getComponentsOnAxis()).filter((ref) => {
		return ref.getModelComponentType().isTypeOf(oFF.OlapComponentType.FIELD);
	}).map((fr) => {
		return fr;
	}).forEach((fieldRef) => {
		let valueReference = listTuple.getValueForModelComponent(fieldRef);
		let dimensionName = fieldRef.getDimension().getName();
		if (!leftOver.containsKey(dimensionName))
		{
			pathKey.add(oFF.XPairOfString.create(fieldRef.getField().getName(), valueReference.getFormattedText()));
		}
		else if (oFF.XString.isEqual(valueReference.getDimensionMemberName(), leftOver.getByKey(dimensionName)))
		{
			leftOver.remove(dimensionName);
		}
	});
	leftOver.remove(kpiDefinition.getDimensionName());
	if (leftOver.isEmpty())
	{
		let newValueForDrill = kpiData.newValueForDrill(pathKey);
		this.transferValue(listTuple, kpiDefinition.getKpiMember(), newValueForDrill.getKpiValue(), null);
		let localizer = oFF.XLocalizationCenter.getCenter();
		this.transferValue(listTuple, kpiDefinition.getTargetMember(), newValueForDrill.getTargetValue(), localizer.getText(oFF.RscMappingI18n.KPI_TARGET));
		this.transferValue(listTuple, kpiDefinition.getDeviationMember(), newValueForDrill.getDeviationValue(), localizer.getText(oFF.RscMappingI18n.KPI_DEVIATION));
		this.transferValue(listTuple, kpiDefinition.getTrendMember(), newValueForDrill.getTrendValue(), null);
		this.transferValue(listTuple, kpiDefinition.getExceptionMember(), newValueForDrill.getExceptionValue(), null);
	}
};
oFF.RsVizKpiContainer.prototype.getListCollector = function()
{
	let queryModel = this.getQueryManager().getQueryModel();
	let visualizationManager = oFF.isNull(queryModel) ? null : queryModel.getVisualizationManager();
	let kpiDefnition = this.getVisualizationDefinition();
	let dimension = queryModel.getDimensionByName(kpiDefnition.getDimensionName());
	if (oFF.isNull(dimension))
	{
		dimension = queryModel.getDimensionByType(kpiDefnition.getDimensionType());
	}
	return oFF.isNull(visualizationManager) ? null : visualizationManager.getListCollector(oFF.AxisType.ROWS, oFF.XCollectionUtils.singletonList(dimension), kpiDefnition.getSelectionPath(), kpiDefnition.getMemberRestrictions());
};
oFF.RsVizKpiContainer.prototype.onGridCollectorFilled = function(extResult, gridContainer, customIdentifier) {};
oFF.RsVizKpiContainer.prototype.onListCollectorFilled = function(extResult, listContainer, customIdentifier)
{
	if (extResult.isValid())
	{
		this.processVisualizationActionInternal(this.getActiveSyncType(), this.m_visualizationProvidedListener, customIdentifier);
		this.m_visualizationProvidedListener = null;
	}
	else
	{
		if (extResult.hasErrors())
		{
			let errorIt = extResult.getErrors().getIterator();
			while (errorIt.hasNext())
			{
				let errorMsg = errorIt.next();
				this.addError(errorMsg.getCode(), errorMsg.getText());
			}
		}
		this.endSync();
	}
};
oFF.RsVizKpiContainer.prototype.processExecution = function(syncType, listener, customIdentifier)
{
	let listCollector = this.getListCollector();
	if (oFF.notNull(listCollector))
	{
		let lscSyncState = listCollector.getSyncState();
		let rsSyncState = this.getQueryManager().getActiveResultSetContainer().getSyncState();
		this.setActiveSyncType(syncType);
		this.attachAllListeners(this.getVisualizationDefinition().getVisualizationProvidedListeners());
		if (!listCollector.isValid() && lscSyncState === oFF.SyncState.PROCESSING)
		{
			throw oFF.XException.createIllegalStateException("Cannot retrieve the resultset while processing");
		}
		else if (rsSyncState === oFF.SyncState.OUT_OF_SYNC)
		{
			this.resetPaging();
			this.m_visualizationProvidedListener = listener;
			this.clearMessages();
			oFF.XCollectionUtils.forEach(listCollector.getMessages(), (rmsg) => {
				this.addMessage(rmsg);
			});
			listCollector.processFullListCollection(syncType, this, null, null, customIdentifier);
		}
		else if (lscSyncState === oFF.SyncState.OUT_OF_SYNC)
		{
			this.m_visualizationProvidedListener = listener;
			listCollector.processFullListCollection(syncType, this, null, null, customIdentifier);
		}
		else if (listCollector.isSyncCanceled())
		{
			this.cancelSynchronization();
		}
		else
		{
			this.processVisualizationActionInternal(syncType, listener, customIdentifier);
		}
	}
	return this;
};
oFF.RsVizKpiContainer.prototype.setupVisualization = function(kpiDefinition)
{
	this.setVisualizationDefinition(kpiDefinition);
};
oFF.RsVizKpiContainer.prototype.transferValue = function(listTuple, dimensionMemberName, baseValue, overwrite)
{
	let valueReference = listTuple.getValueForKey(dimensionMemberName);
	if (oFF.notNull(valueReference))
	{
		baseValue.setMemberName(dimensionMemberName);
		if (oFF.XStringUtils.isNotNullAndNotEmpty(overwrite))
		{
			baseValue.setMemberText(overwrite);
		}
		else
		{
			let dimensionMemberText = listTuple.getAxisReference().getMeasureReference(dimensionMemberName).getText();
			baseValue.setMemberText(dimensionMemberText);
		}
		baseValue.setFormattedTextSimple(valueReference.getFormattedTextSimple());
		baseValue.setFormattedText(valueReference.getFormattedText());
		baseValue.setFormattedTextFull(valueReference.getFormattedTextFull());
		baseValue.setFormatPatternSimple(valueReference.getFormatPatternSimple());
		baseValue.setFormatPattern(valueReference.getFormatPattern());
		baseValue.setFormatPatternFull(valueReference.getFormatPatternFull());
		baseValue.setPlainValue(oFF.XValueUtil.copyValue(valueReference.getPlainValue()));
		baseValue.setUnitInformation(valueReference.getUnitInformation());
		baseValue.setNumericShift(valueReference.getNumericShift());
		baseValue.setDecimalPlaces(valueReference.getDecimalPlaces());
		baseValue.setDecimalSeparator(valueReference.getDecimalSeparator());
		baseValue.setDecimalGroupSeparator(valueReference.getDecimalGroupSeparator());
		baseValue.setSignPresentation(oFF.SacSignPresentation.lookup(oFF.DfNameObject.getSafeName(valueReference.getSignPresentation())));
		baseValue.setScalingText(valueReference.getScalingText());
		baseValue.setValueException(oFF.SacValueException.get(valueReference.getValueException().getName()));
		baseValue.setAlertLevel(oFF.SacAlertLevel.getByLevelValue(valueReference.getAlertLevel().getLevel()));
		baseValue.setExceptionName(valueReference.getExceptionName());
		baseValue.setDocumentId(valueReference.getDocumentId());
		baseValue.setTags(valueReference.getTags().createListCopy());
	}
};
oFF.RsVizKpiContainer.prototype.updateDefinition = function() {};

oFF.RsVizCustomVisualizationContainer = function() {};
oFF.RsVizCustomVisualizationContainer.prototype = new oFF.RsVizVisualizationContainer();
oFF.RsVizCustomVisualizationContainer.prototype._ff_c = "RsVizCustomVisualizationContainer";

oFF.RsVizCustomVisualizationContainer.create = function(customDefinition)
{
	let instance = new oFF.RsVizCustomVisualizationContainer();
	instance.setupVisualization(customDefinition);
	instance.setupAction(null, null, null, customDefinition);
	return instance;
};
oFF.RsVizCustomVisualizationContainer.prototype.createVisualizationData = function()
{
	return true;
};
oFF.RsVizCustomVisualizationContainer.prototype.onGridCollectorFilled = function(extResult, gridContainer, customIdentifier) {};
oFF.RsVizCustomVisualizationContainer.prototype.setupVisualization = function(customDefinition)
{
	this.setVisualizationDefinition(customDefinition);
};
oFF.RsVizCustomVisualizationContainer.prototype.updateDefinition = function() {};

oFF.RsVizTableContainer = function() {};
oFF.RsVizTableContainer.prototype = new oFF.RsVizVisualizationContainer();
oFF.RsVizTableContainer.prototype._ff_c = "RsVizTableContainer";

oFF.RsVizTableContainer.create = function(tableDefinition)
{
	let instance = new oFF.RsVizTableContainer();
	instance.setupVisualization();
	instance.setupAction(null, null, null, tableDefinition);
	return instance;
};
oFF.RsVizTableContainer.prototype.m_colPadding = 0;
oFF.RsVizTableContainer.prototype.m_columnDimensions = null;
oFF.RsVizTableContainer.prototype.m_columnTuples = null;
oFF.RsVizTableContainer.prototype.m_maxColLoad = 0;
oFF.RsVizTableContainer.prototype.m_minColFetch = 0;
oFF.RsVizTableContainer.prototype.m_minRowFetch = 0;
oFF.RsVizTableContainer.prototype.m_needsGeneralPropReWrite = false;
oFF.RsVizTableContainer.prototype.m_needsOverallRewrite = false;
oFF.RsVizTableContainer.prototype.m_needsReWriteRows = false;
oFF.RsVizTableContainer.prototype.m_needsReapplyFormatting = false;
oFF.RsVizTableContainer.prototype.m_pagingProcess = null;
oFF.RsVizTableContainer.prototype.m_pagingTileCarrier = null;
oFF.RsVizTableContainer.prototype.m_pendingColScrollPoint = 0;
oFF.RsVizTableContainer.prototype.m_pendingColScrollPointEnd = 0;
oFF.RsVizTableContainer.prototype.m_pendingIdentifier = null;
oFF.RsVizTableContainer.prototype.m_pendingPaging = false;
oFF.RsVizTableContainer.prototype.m_pendingQueryExecutedListener = null;
oFF.RsVizTableContainer.prototype.m_pendingResultSetCollectorListener = null;
oFF.RsVizTableContainer.prototype.m_pendingRowScrollPoint = 0;
oFF.RsVizTableContainer.prototype.m_pendingRowScrollPointEnd = 0;
oFF.RsVizTableContainer.prototype.m_pendingSyncType = null;
oFF.RsVizTableContainer.prototype.m_pendingTileCarrier = null;
oFF.RsVizTableContainer.prototype.m_pendingVisualizationProvidedListener = null;
oFF.RsVizTableContainer.prototype.m_pivotTableEngine = null;
oFF.RsVizTableContainer.prototype.m_rowDimensions = null;
oFF.RsVizTableContainer.prototype.m_rowPadding = 0;
oFF.RsVizTableContainer.prototype.m_rowTuples = null;
oFF.RsVizTableContainer.prototype.analyzeSelectionStyle = function(selectedCells)
{
	let guid = oFF.XGuid.getGuid();
	let style = oFF.QVizTableStyle.create(this.getContext(), this.getVisualizationDefinition(), guid, guid);
	let baseCellStyle = null;
	if (oFF.XCollectionUtils.hasElements(selectedCells))
	{
		let i;
		let selectedCellsSize = selectedCells.size();
		for (i = 0; oFF.isNull(baseCellStyle) && i < selectedCellsSize; i++)
		{
			baseCellStyle = this.getCellStyleExtInt(selectedCells.get(i));
		}
		for (; oFF.notNull(baseCellStyle) && baseCellStyle.isDefined() && i < selectedCellsSize; i++)
		{
			baseCellStyle.reduceToCommonSettings(this.getCellStyleExtInt(selectedCells.get(i)));
		}
	}
	if (oFF.notNull(baseCellStyle))
	{
		oFF.OlapVizToPivotConverterUtil.applyVizStyleFromTable(style, baseCellStyle);
	}
	return style;
};
oFF.RsVizTableContainer.prototype.applyRenderingScope = function(rowStartViewPort, rowEndViewPort, colStartViewPort, colEndViewPort)
{
	let tableObject = this.getVisualizationData();
	if (oFF.notNull(tableObject))
	{
		let newMinOrigRow = oFF.XMath.max(0, rowStartViewPort - this.m_rowPadding);
		let newMaxOrigRow = rowEndViewPort + this.m_rowPadding;
		let newMinOrigCol = oFF.XMath.max(0, colStartViewPort - this.m_colPadding);
		let newMaxOrigCol = colEndViewPort + this.m_colPadding;
		tableObject.setRenderingScope(newMinOrigRow, newMaxOrigRow, newMinOrigCol, newMaxOrigCol);
	}
};
oFF.RsVizTableContainer.prototype.canResolveAction = function(action, rowDimensionLevel, columnDimensionLevel)
{
	let canResolve = false;
	let tableData = this.getVisualizationData();
	if (oFF.notNull(tableData))
	{
		canResolve = tableData.canResolveAction(action, rowDimensionLevel, columnDimensionLevel);
	}
	return canResolve;
};
oFF.RsVizTableContainer.prototype.checkTileComplete = function(tileCarrier)
{
	let pagingSetting = this.getVisualizationDefinition().getTableViewportPagingSettings();
	let rowPagingActive = pagingSetting.rowPagingActive();
	let columnPagingActive = pagingSetting.columnPagingActive();
	let tableProxy = this.m_pivotTableEngine.getResultTable();
	let baseTile = tableProxy.getBaseTile();
	let rowScrollPoint = tileCarrier.getRowMin();
	let colScrollPoint = tileCarrier.getColumnMin();
	let rowScrollEndPoint = tileCarrier.getRowMax();
	let colScrollEndPoint = tileCarrier.getColumnMax();
	if (rowPagingActive)
	{
		if (baseTile.getRowsBundle().getFilledPageCountWithSecurePadding() <= pagingSetting.getRowPage())
		{
			rowScrollPoint = rowScrollEndPoint;
			rowScrollEndPoint = rowScrollPoint + this.m_minRowFetch * 3;
		}
		else
		{
			let rowPageInterval = tableProxy.getEstimatedRowPageInterval(pagingSetting.getRowPage(), pagingSetting.getStartRow(), pagingSetting.getEndRow());
			rowScrollPoint = rowPageInterval.getFirstObject().getInteger();
			rowScrollEndPoint = oFF.XMath.max(rowPageInterval.getSecondObject().getInteger(), rowScrollPoint + this.m_minRowFetch * 3);
		}
	}
	if (columnPagingActive)
	{
		if (baseTile.getColumnsBundle().getFilledPageCountWithSecurePadding() <= pagingSetting.getColumnPage())
		{
			colScrollPoint = colScrollEndPoint;
			colScrollEndPoint = colScrollPoint + this.m_minColFetch * 3;
		}
		else
		{
			let columnPageInterval = tableProxy.getEstimatedColumnPageInterval(pagingSetting.getColumnPage(), pagingSetting.getStartColumn(), pagingSetting.getEndColumn());
			colScrollPoint = columnPageInterval.getFirstObject().getInteger();
			colScrollEndPoint = oFF.XMath.max(columnPageInterval.getSecondObject().getInteger(), colScrollPoint + this.m_minColFetch * 3);
		}
	}
	let success = true;
	if (rowPagingActive || columnPagingActive)
	{
		let gridContainer = this.getGridCollector().getGridContainer();
		let rowsTotal = gridContainer.getDataRowsTotalCount();
		let columnsTotal = gridContainer.getDataColumnsTotalCount();
		if (colScrollPoint < columnsTotal && rowScrollPoint < rowsTotal)
		{
			success = gridContainer.isTileComplete(colScrollPoint, colScrollEndPoint, rowScrollPoint, rowScrollEndPoint);
			if (!success)
			{
				this.m_pagingTileCarrier = oFF.RscGridTileCarrier.create(rowScrollPoint, rowScrollEndPoint, colScrollPoint, colScrollEndPoint);
			}
			else
			{
				this.m_pivotTableEngine.fillProjection(oFF.RscGridTileCarrier.create(rowScrollPoint, oFF.XMath.min(rowScrollEndPoint, rowsTotal - 1), colScrollPoint, oFF.XMath.min(colScrollEndPoint, columnsTotal - 1)));
			}
		}
	}
	return success;
};
oFF.RsVizTableContainer.prototype.createDimensionMemberRectangles = function(list, dimLow, dimHigh, tupleRanges)
{
	let dimLowInt = oFF.XIntegerValue.create(dimLow);
	let dimHighInt = oFF.XIntegerValue.create(dimHigh);
	oFF.XCollectionUtils.forEach(tupleRanges, (tupleRange) => {
		let subList = oFF.XList.create();
		subList.add(dimLowInt);
		subList.add(dimHighInt);
		subList.add(tupleRange.getFirstObject());
		subList.add(tupleRange.getSecondObject());
		list.add(subList);
	});
};
oFF.RsVizTableContainer.prototype.createVisualizationData = function()
{
	let applicationSettings = this.getVisualizationDefinition().getApplicationSettings();
	let tableDefinition = this.getVisualizationDefinition();
	let gridCollector = this.getQueryModel().getVisualizationManager().getGridCollector();
	let tableData = this.getVisualizationData();
	let tileCarrier = !oFF.RscGridTileCarrier.isValid(this.m_pendingTileCarrier) ? gridCollector.getRecentTileCarrier() : this.m_pendingTileCarrier;
	let gridInSync = gridCollector.getSyncState().isInSync() && oFF.notNull(tileCarrier);
	let success = gridInSync;
	if (gridInSync)
	{
		let emptyResultToRender = gridCollector.hasErrors();
		let gridContainer = gridCollector.getGridContainer();
		let initialTile = false;
		let hasData = !this.m_pendingPaging || oFF.notNull(tableData) && oFF.XCollectionUtils.hasElements(tableData.getLocalRowList());
		if (oFF.isNull(tableData) || emptyResultToRender || tileCarrier.getColumnMin() === 0 && tileCarrier.getRowMin() === 0 && this.exceedsMinBoundaries(this.m_minRowFetch, tileCarrier.getRowMax(), gridContainer.getRowsAxis()) && this.exceedsMinBoundaries(this.m_minColFetch, tileCarrier.getColumnMax(), gridContainer.getColumnsAxis()))
		{
			this.m_pivotTableEngine = oFF.PivotTableEngine.create(tableDefinition, gridContainer);
			tableData = this.m_pivotTableEngine.getTableProxy();
			this.m_pivotTableEngine.applyTableDefinition(tableDefinition);
			if (applicationSettings.getWidgetHeight() > 0)
			{
				tableData.setHeight(applicationSettings.getWidgetHeight());
			}
			if (applicationSettings.getWidgetWidth() > 0)
			{
				tableData.setWidth(applicationSettings.getWidgetWidth());
			}
			hasData = !emptyResultToRender;
			initialTile = true;
		}
		if (hasData)
		{
			if (initialTile)
			{
				this.m_pivotTableEngine.fillOrigin(tileCarrier);
			}
			else
			{
				this.m_pivotTableEngine.fillProjection(tileCarrier);
			}
			let pagingSetting = this.getVisualizationDefinition().getTableViewportPagingSettings();
			let tableProxy = this.m_pivotTableEngine.getResultTable();
			if (oFF.notNull(tableProxy))
			{
				let maxRowPages = tableProxy.getEstimatedRowPageCount() - 1;
				let maxColumnPages = tableProxy.getEstimatedColumnPageCount() - 1;
				this.getActionContext().getTableViewportPagingSettings().validate(maxRowPages, maxColumnPages);
				pagingSetting.validate(maxRowPages, maxColumnPages);
			}
			this.checkTileComplete(tileCarrier);
			tableData.setPartial(!initialTile && !pagingSetting.rowPagingActive());
		}
		else if (initialTile)
		{
			this.m_pivotTableEngine.fillOrigin(oFF.RscGridTileCarrier.create(0, -1, 0, -1));
		}
		tableData.setRecentTileCarrier(tileCarrier);
		this.updateModel(gridCollector);
		this.setVisualizationData(tableData);
	}
	return success;
};
oFF.RsVizTableContainer.prototype.decorateColumnCellReferenceScope = function(resultTable, cellsReferenceScope, index)
{
	let preColumnsAmount = resultTable.getPreColumnsAmount();
	if (index < preColumnsAmount)
	{
		this.fillReferenceScope(cellsReferenceScope, this.getResultTable().getHeaderColumnList().get(index));
	}
	else if (index - preColumnsAmount < this.getResultTable().getColumnList().size())
	{
		this.fillReferenceScope(cellsReferenceScope, this.getResultTable().getColumnList().get(index - preColumnsAmount));
	}
};
oFF.RsVizTableContainer.prototype.decorateRowCellReferenceScope = function(resultTable, cellsReferenceScope, index)
{
	let preRowsAmount = resultTable.getPreRowsAmount();
	if (index < preRowsAmount)
	{
		this.fillReferenceScope(cellsReferenceScope, this.getResultTable().getHeaderRowList().get(index));
	}
	else if (index - preRowsAmount < this.getResultTable().getRowList().size())
	{
		this.fillReferenceScope(cellsReferenceScope, this.getResultTable().getRowList().get(index - preRowsAmount));
	}
};
oFF.RsVizTableContainer.prototype.editValueAt = function(column, row, value)
{
	let cellObject = this.getCellObjectAt(column, row);
	if (oFF.notNull(cellObject))
	{
		cellObject.setFormatted(value);
		cellObject.setWrapped(value);
		cellObject.setPlainString(value);
		cellObject.setVersionEdited(true);
		this.m_needsReWriteRows = true;
	}
};
oFF.RsVizTableContainer.prototype.endSync = function()
{
	oFF.RsVizVisualizationContainer.prototype.endSync.call( this );
	this.m_pagingProcess = null;
	if (this.m_pendingPaging)
	{
		this.m_pendingPaging = false;
		this.reschedulePendingScroll();
	}
};
oFF.RsVizTableContainer.prototype.exceedsMinBoundaries = function(minFetch, upperBound, axis)
{
	return minFetch < 1 && upperBound > 0 || upperBound < 0 || upperBound > axis.getTuplesTotalCount() - 2 || minFetch > 0 && upperBound > minFetch - 2;
};
oFF.RsVizTableContainer.prototype.executeWindowedRequest = function(syncType, visualizationProvidedListener, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowMin, rowMax, colMin, colMax)
{
	this.m_pendingPaging = false;
	let colMinEff = colMin < 0 ? 0 : colMin;
	let colMaxEff = colMax < 0 ? this.m_minColFetch : colMax;
	let gridCollector = this.getGridCollector();
	this.m_pagingProcess = gridCollector;
	gridCollector.resetState();
	gridCollector.attachListener(this, oFF.ListenerType.SPECIFIC, customIdentifier);
	this.clearMessages();
	oFF.XCollectionUtils.forEach(gridCollector.getMessages(), (rmsg) => {
		this.addMessage(rmsg);
	});
	if (oFF.notNull(resultSetCollectorListener))
	{
		gridCollector.attachListener(resultSetCollectorListener, oFF.ListenerType.SPECIFIC, customIdentifier);
	}
	this.resetState();
	this.setReEntryListener(visualizationProvidedListener);
	let isBusy = gridCollector.processTileCollection(syncType, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowMin, rowMax, colMinEff, colMaxEff);
	if (!isBusy)
	{
		this.processSynchronization(syncType);
	}
	return isBusy;
};
oFF.RsVizTableContainer.prototype.fillReferenceScope = function(cellsReferenceScope, tableAxis)
{
	if (oFF.notNull(tableAxis))
	{
		let i;
		let headerSectionInfos = tableAxis.getPartOfHeaderSectionInfos();
		if (oFF.XCollectionUtils.hasElements(headerSectionInfos))
		{
			for (i = 0; i < headerSectionInfos.size(); i++)
			{
				let headerSectionInfoTag = headerSectionInfos.get(i);
				if (headerSectionInfoTag.isExactHeaderLevel())
				{
					let headerSectionInfoReference = cellsReferenceScope.addNewHeaderSectionInfo();
					headerSectionInfoReference.setHeaderName(headerSectionInfoTag.getHeaderName());
					headerSectionInfoReference.setExactHeaderLevel(true);
					switch (headerSectionInfoTag.getHeaderLevel())
					{
						case 0:
							headerSectionInfoReference.setDimensionLevel(true);
							break;

						case 1:
							headerSectionInfoReference.setAttributeLevel(true);
							break;

						case 2:
							headerSectionInfoReference.setFieldLevel(true);
							break;

						case 3:
							headerSectionInfoReference.setUniqueUnitsLevel(true);
							break;

						default:
							break;
					}
				}
			}
		}
		let dataPath = tableAxis.getDataPath();
		let dataPathElements = oFF.isNull(dataPath) ? null : dataPath.getPathElements();
		if (oFF.XCollectionUtils.hasElements(dataPathElements))
		{
			let pathReference = cellsReferenceScope.addNewAxisPath();
			for (i = 0; i < dataPathElements.size(); i++)
			{
				let pathElementTag = dataPathElements.get(i);
				if (pathElementTag.isExactSectionLevel() && (this.getQueryModel().getDimensionByName(pathElementTag.getGroupName()) !== null || this.getQueryModel().getFieldByName(pathElementTag.getGroupName()) !== null))
				{
					let pathElementReference = pathReference.addNewElement();
					pathElementReference.setDimensionName(pathElementTag.getGroupName());
					pathElementReference.addMemberName(pathElementTag.getSectionNodeName());
				}
			}
		}
	}
};
oFF.RsVizTableContainer.prototype.fillTuples = function(members, tuple)
{
	if (oFF.notNull(tuple))
	{
		for (let i = 0; i < tuple.size(); i++)
		{
			let member = tuple.getTupleElementAt(i).getDimensionMember();
			if (!member.getMemberType().isTypeOf(oFF.MemberType.RESULT))
			{
				oFF.XCollectionUtils.addIfNotPresent(members, member);
			}
		}
	}
};
oFF.RsVizTableContainer.prototype.getAttributeBoundaries = function(attribute, headerAmount, dimensionAccessor, fieldNameAccessor)
{
	let list = oFF.XList.create();
	if (oFF.notNull(attribute) && attribute !== attribute.getDimension().getMainAttribute() && headerAmount > 0)
	{
		let dimension = attribute.getDimension();
		let i = 0;
		let currentValue = null;
		for (; i < headerAmount; i++)
		{
			currentValue = oFF.XIntegerValue.create(i);
			if (oFF.DfNameObject.areNamesEqual(dimensionAccessor(currentValue), dimension))
			{
				break;
			}
		}
		let oldAttribute = null;
		for (; i < headerAmount; i++)
		{
			currentValue = oFF.XIntegerValue.create(i);
			if (!oFF.DfNameObject.areNamesEqual(dimensionAccessor(currentValue), dimension))
			{
				break;
			}
			let newAttribute = this.getAttributeInternal(dimension, fieldNameAccessor, currentValue);
			if (!oFF.DfNameObject.areNamesEqual(oldAttribute, newAttribute))
			{
				if (oFF.notNull(oldAttribute) && oFF.notNull(newAttribute) && !oFF.DfNameObject.areNamesEqual(oldAttribute, attribute) && !oFF.DfNameObject.areNamesEqual(newAttribute, attribute) && !oFF.DfNameObject.areNamesEqual(newAttribute, dimension.getMainAttribute()))
				{
					list.add(currentValue);
				}
				oldAttribute = newAttribute;
			}
		}
		if (oFF.notNull(oldAttribute) && !oFF.DfNameObject.areNamesEqual(oldAttribute, attribute))
		{
			list.add(oFF.XIntegerValue.create(i));
		}
	}
	return list;
};
oFF.RsVizTableContainer.prototype.getAttributeInternal = function(dimension, fieldNameAccessor, currentValue)
{
	let field = dimension.getFieldByName(fieldNameAccessor(currentValue));
	return oFF.isNull(field) ? null : field.getAttribute();
};
oFF.RsVizTableContainer.prototype.getCellObjectAt = function(column, row)
{
	let rowObject = this.getRowAtIndex(row);
	let cellObject = null;
	if (oFF.notNull(rowObject))
	{
		let cellObjectList = rowObject.getCells();
		if (column < cellObjectList.size())
		{
			cellObject = cellObjectList.get(column);
		}
	}
	return cellObject;
};
oFF.RsVizTableContainer.prototype.getCellStyle = function(column, row)
{
	let co = this.getCellObjectAt(column, row);
	return oFF.isNull(co) ? null : co.getEffectiveStyle();
};
oFF.RsVizTableContainer.prototype.getCellStyleExtInt = function(pair)
{
	return this.getCellStyle(pair.getFirstObject().getInteger(), pair.getSecondObject().getInteger());
};
oFF.RsVizTableContainer.prototype.getColumnAtIndex = function(index)
{
	let result = null;
	let resultTable = this.getResultTable();
	if (oFF.notNull(resultTable))
	{
		let headerColumnList = resultTable.getHeaderColumnList();
		let headerColumnSize = headerColumnList.size();
		let columnList = resultTable.getColumnList();
		let pagedColumnsOffset = resultTable.getPagedColumnsOffset();
		if (index > -1 && index < headerColumnSize)
		{
			result = headerColumnList.get(index);
		}
		else if (index >= headerColumnSize && index - headerColumnSize + pagedColumnsOffset < columnList.size())
		{
			result = columnList.get(index - headerColumnSize + pagedColumnsOffset);
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getColumnAttributeBoundaries = function(attribute)
{
	return this.getAttributeBoundaries(attribute, this.getLastColumnIndexWithRowHeader() + 1, (h) => {
		return this.getRowDimension(h.getInteger());
	}, (i) => {
		return this.getRowTupleFieldName(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getColumnDimension = function(row)
{
	if (this.isOnHeaderRow(row))
	{
		let rowObject = this.getRowAtIndex(row);
		if (oFF.notNull(rowObject))
		{
			let dimIndex = rowObject.getDimensionIndex();
			return dimIndex < 0 ? null : this.m_columnDimensions.get(dimIndex);
		}
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getColumnDimensionInterval = function(dimension)
{
	return this.getDimensionInterval(dimension, () => {
		return oFF.XIntegerValue.create(this.getLastRowIndexWithColumnHeader() + 1);
	}, (i) => {
		return this.getColumnDimension(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getColumnDimensionStrict = function(column, row)
{
	if (column === this.getHeaderColumnCount() - 1)
	{
		return this.getColumnDimension(row);
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getColumnDimensions = function(rowMin, rowMax)
{
	let result = oFF.XList.create();
	if (this.isOnHeaderRow(rowMax))
	{
		for (let i = rowMin; i <= rowMax; i++)
		{
			let rowObject = this.getRowAtIndex(i);
			if (oFF.notNull(rowObject))
			{
				let dimIndex = rowObject.getDimensionIndex();
				let curDim = dimIndex < 0 ? null : this.m_columnDimensions.get(dimIndex);
				if (oFF.notNull(curDim) && !result.contains(curDim))
				{
					result.add(curDim);
				}
			}
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getColumnFieldBoundaries = function(field)
{
	return this.getFieldBoundaries(field, this.getLastColumnIndexWithRowHeader() + 1, (h) => {
		return this.getRowDimension(h.getInteger());
	}, (i) => {
		return this.getRowTupleFieldName(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getColumnIndexForTupleIndex = function(columnTupleIndex)
{
	return this.getIndexForTupleIndex(columnTupleIndex, (a) => {
		return a.getColumnsBundle();
	}, (b) => {
		return oFF.XIntegerValue.create(b.getPreColumnsAmount());
	});
};
oFF.RsVizTableContainer.prototype.getColumnMemberBoundaries = function(member, columnMin, columnMax)
{
	return this.getMemberBoundaries(member, columnMin, columnMax + this.getHeaderColumnCount(), (i) => {
		return this.getColumnTuples(i.getInteger(), i.getInteger());
	}, (j) => {
		return this.getColumnDimension(j.getInteger());
	}, this.getLastRowIndexWithColumnHeader() + 1, this.getHeaderColumnCount());
};
oFF.RsVizTableContainer.prototype.getColumnTuple = function(column)
{
	let correctedColumn = this.getColumnTupleIndex(column);
	if (correctedColumn > -1 && correctedColumn < this.m_columnTuples.size())
	{
		return this.m_columnTuples.get(correctedColumn);
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getColumnTupleElement = function(column, row)
{
	let correctedColumn = this.getColumnTupleIndex(column);
	if (correctedColumn > -1 && correctedColumn < this.m_columnTuples.size() && this.isOnHeaderRow(row))
	{
		let rowObject = this.getRowAtIndex(row);
		if (oFF.notNull(rowObject))
		{
			let dimIndex = rowObject.getDimensionIndex();
			let columnTuple = this.m_columnTuples.get(correctedColumn);
			if (dimIndex > -1 && oFF.notNull(columnTuple))
			{
				return columnTuple.getTupleElementAt(dimIndex);
			}
		}
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getColumnTupleElements = function(columnMin, columnMax, rowMin, rowMax)
{
	let result = oFF.XList.create();
	let correctedColumnMin = this.getColumnTupleIndex(columnMin);
	let correctedColumnMax = this.getColumnTupleIndex(columnMax);
	if (correctedColumnMin > -1 && correctedColumnMax < this.m_columnTuples.size() && this.isOnHeaderRow(rowMin) && this.isOnHeaderRow(rowMax))
	{
		for (let row = rowMin; row <= rowMax; row++)
		{
			let rowObject = this.getRowAtIndex(row);
			if (oFF.notNull(rowObject))
			{
				let dimIndex = rowObject.getDimensionIndex();
				if (dimIndex > -1)
				{
					for (let i = correctedColumnMin; i <= correctedColumnMax; i++)
					{
						let columnTuple = this.m_columnTuples.get(i);
						if (oFF.notNull(columnTuple))
						{
							let tupleElement = columnTuple.getTupleElementAt(dimIndex);
							oFF.XCollectionUtils.addIfNotContains(result, tupleElement, (a, b) => {
								return oFF.XObjectExt.areEqual(a, b) && oFF.XObjectExt.areEqual(a.getFirstTuple(), b.getFirstTuple());
							});
						}
					}
				}
			}
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getColumnTupleFieldName = function(row)
{
	if (this.isOnHeaderRow(row))
	{
		let rowObject = this.getRowAtIndex(row);
		if (oFF.notNull(rowObject) && oFF.XStringUtils.isNotNullAndNotEmpty(rowObject.getFieldName()))
		{
			return rowObject.getFieldName();
		}
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getColumnTupleFieldNames = function(rowMin, rowMax, enforceSameDimension)
{
	let rowObjectMin = this.getRowAtIndex(rowMin);
	let rowObjectMax = this.getRowAtIndex(rowMax);
	if (!enforceSameDimension || oFF.notNull(rowObjectMin) && oFF.notNull(rowObjectMax) && rowObjectMin.getDimensionIndex() === rowObjectMax.getDimensionIndex())
	{
		let result = oFF.XList.create();
		for (let i = rowMin; i <= rowMax; i++)
		{
			let rowObject = this.getRowAtIndex(i);
			if (oFF.notNull(rowObject) && oFF.XStringUtils.isNotNullAndNotEmpty(rowObject.getFieldName()))
			{
				result.add(rowObject.getFieldName());
			}
		}
		return result;
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getColumnTupleIndex = function(column)
{
	let tupleIndex = -1;
	let analyticsColumn = this.getColumnAtIndex(column);
	if (oFF.notNull(analyticsColumn))
	{
		tupleIndex = analyticsColumn.getTupleIndex();
	}
	return tupleIndex;
};
oFF.RsVizTableContainer.prototype.getColumnTupleReference = function(column)
{
	let correctedColumn = this.getColumnTupleIndex(column);
	let gridContainer = this.getGridCollector().getGridContainer();
	if (oFF.XObjectExt.isValidObject(gridContainer) && correctedColumn > -1)
	{
		return gridContainer.getColumnTupleAt(correctedColumn);
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getColumnTuples = function(columnMin, columnMax)
{
	let result = oFF.XList.create();
	let correctedColumnMin = this.getColumnTupleIndex(columnMin);
	let correctedColumnMax = this.getColumnTupleIndex(columnMax);
	if (correctedColumnMin > -1 && correctedColumnMax < this.m_columnTuples.size())
	{
		for (let i = correctedColumnMin; i <= correctedColumnMax; i++)
		{
			result.add(this.m_columnTuples.get(i));
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getColumnsDimensionBoundaries = function(dimension)
{
	return this.getDimensionBoundaries(dimension, this.getLastRowIndexWithColumnHeader() + 1, (i) => {
		return this.getColumnDimension(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getColumnsSelectionScope = function(minColumn, maxColumn)
{
	let resultTable = this.getResultTable();
	let cellsReferenceScope = null;
	if (oFF.notNull(resultTable))
	{
		cellsReferenceScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this.getVisualizationDefinition());
		for (let i = minColumn; i <= maxColumn; i++)
		{
			this.decorateColumnCellReferenceScope(resultTable, cellsReferenceScope, i);
		}
	}
	return cellsReferenceScope;
};
oFF.RsVizTableContainer.prototype.getDimensionBoundaries = function(dimension, headerAmount, dimensionAccessor)
{
	let list = oFF.XList.create();
	let currentValue = oFF.XIntegerValue.create(0);
	if (headerAmount > 0)
	{
		let oldDimension = dimensionAccessor(currentValue);
		if (!oFF.DfNameObject.areNamesEqual(oldDimension, dimension))
		{
			list.add(currentValue);
		}
		for (let i = 1; i < headerAmount; i++)
		{
			currentValue = oFF.XIntegerValue.create(i);
			let newDimension = dimensionAccessor(currentValue);
			if (!oFF.DfNameObject.areNamesEqual(newDimension, oldDimension))
			{
				if (!oFF.DfNameObject.areNamesEqual(oldDimension, dimension) && !oFF.DfNameObject.areNamesEqual(newDimension, dimension))
				{
					list.add(currentValue);
				}
				oldDimension = newDimension;
			}
		}
		if (!oFF.DfNameObject.areNamesEqual(oldDimension, dimension))
		{
			list.add(oFF.XIntegerValue.create(headerAmount));
		}
	}
	else
	{
		list.add(currentValue);
		list.add(oFF.XIntegerValue.create(1));
	}
	return list;
};
oFF.RsVizTableContainer.prototype.getDimensionInterval = function(dimension, headerAmountSupplier, dimensionAccessor)
{
	let start = -1;
	let end = -1;
	let size = headerAmountSupplier().getInteger();
	for (let i = 0; i < size; i++)
	{
		let areNamesEqual = oFF.DfNameObject.areNamesEqual(dimensionAccessor(oFF.XIntegerValue.create(i)), dimension);
		if (start === -1 && areNamesEqual)
		{
			start = i;
		}
		if (start > -1 && !areNamesEqual)
		{
			end = i - 1;
			break;
		}
	}
	if (start > -1 && end === -1)
	{
		end = size - 1;
	}
	return oFF.XPair.create(oFF.XIntegerValue.create(start), oFF.XIntegerValue.create(end));
};
oFF.RsVizTableContainer.prototype.getDocumentId = function(column, row)
{
	let cellObject = this.getCellObjectAt(column, row);
	let documentId = null;
	if (oFF.notNull(cellObject))
	{
		documentId = cellObject.getCommentDocumentId();
	}
	return documentId;
};
oFF.RsVizTableContainer.prototype.getDpActionCommandPairsFromSimpleContext = function(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel)
{
	let tableData = this.getVisualizationData();
	let result = null;
	if (oFF.notNull(tableData))
	{
		result = tableData.getDpActionCommandPairsFromSimpleContext(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel);
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getFieldBoundaries = function(field, headerAmount, dimensionAccessor, fieldNameAccessor)
{
	let list = oFF.XList.create();
	if (oFF.notNull(field) && headerAmount > 0)
	{
		let dimension = field.getDimension();
		let fieldLayoutType = dimension.getFieldLayoutType();
		let fieldContainer = this.getFieldContainerInternal(fieldLayoutType, field);
		let i = 0;
		let currentValue = null;
		for (; i < headerAmount; i++)
		{
			currentValue = oFF.XIntegerValue.create(i);
			if (oFF.DfNameObject.areNamesEqual(this.getFieldContainerInternal2(dimension, fieldNameAccessor, currentValue), fieldContainer))
			{
				break;
			}
		}
		let oldField = null;
		for (; i < headerAmount; i++)
		{
			currentValue = oFF.XIntegerValue.create(i);
			if (!oFF.DfNameObject.areNamesEqual(this.getFieldContainerInternal2(dimension, fieldNameAccessor, currentValue), fieldContainer))
			{
				break;
			}
			let newField = dimension.getFieldByName(fieldNameAccessor(currentValue));
			if (oldField !== newField)
			{
				if (oFF.notNull(oldField) && oFF.notNull(newField) && oldField !== field && newField !== field)
				{
					list.add(currentValue);
				}
				oldField = newField;
			}
		}
		if (oFF.notNull(oldField) && oldField !== field)
		{
			list.add(oFF.XIntegerValue.create(i));
		}
	}
	return list;
};
oFF.RsVizTableContainer.prototype.getFieldContainerInternal = function(fieldLayoutType, field)
{
	let fieldContainer;
	if (fieldLayoutType === oFF.FieldLayoutType.FIELD_BASED)
	{
		fieldContainer = field.getDimension();
	}
	else
	{
		fieldContainer = field.getAttribute();
	}
	return fieldContainer;
};
oFF.RsVizTableContainer.prototype.getFieldContainerInternal2 = function(dimension, fieldNameAccessor, currentValue)
{
	let field = dimension.getFieldByName(fieldNameAccessor(currentValue));
	let result;
	if (oFF.isNull(field))
	{
		result = null;
	}
	else if (dimension.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED)
	{
		result = field.getDimension();
	}
	else
	{
		result = field.getAttribute();
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getFilterableColumnDimensionMemberBoundaries = function(minCol, maxCol)
{
	return this.getFilterableDimensionMemberBoundaries(minCol, maxCol + this.getHeaderColumnCount(), this.getLastRowIndexWithColumnHeader() + 1, (i) => {
		return this.getColumnDimension(i.getInteger());
	}, (j) => {
		return this.getColumnTuples(j.getInteger(), j.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getFilterableDimensionMemberBoundaries = function(minTuple, maxTuple, headerAmount, dimensionAccessor, tupleAccessor)
{
	let list = oFF.XList.create();
	let currentDimValue = null;
	let oldDimBoundary = -1;
	let cartesianProduct = this.getQueryModel().getFilter().getDynamicFilter().getCartesianProduct();
	if (headerAmount > 0)
	{
		let oldDimension = null;
		let tupleRanges = oFF.XList.create();
		for (let i = 0; i < headerAmount; i++)
		{
			currentDimValue = oFF.XIntegerValue.create(i);
			let newDimension = dimensionAccessor(currentDimValue);
			if (!oFF.DfNameObject.areNamesEqual(newDimension, oldDimension))
			{
				if (oldDimBoundary > -1)
				{
					this.createDimensionMemberRectangles(list, oldDimBoundary, i - 1, tupleRanges);
					tupleRanges.clear();
				}
				oldDimBoundary = i;
				let oldFirstTuple = null;
				let oldTupleIndex = -1;
				let filterable = false;
				for (let j = minTuple; j <= maxTuple; j++)
				{
					let element = this.retrieveMemberInternal(newDimension, tupleAccessor, j);
					let actualDimension = newDimension;
					if (newDimension.isUniversalDisplayHierarchyDimension())
					{
						actualDimension = oFF.isNull(element) ? null : element.getDrillGroupDimension();
					}
					let currentFilterList = (oFF.isNull(cartesianProduct) || oFF.isNull(actualDimension)) ? null : cartesianProduct.getCartesianList(actualDimension);
					let newFirstTuple = oFF.isNull(element) ? null : element.getFirstTuple();
					let member = oFF.isNull(element) ? null : element.getDimensionMember();
					if (oldFirstTuple !== newFirstTuple)
					{
						if (oldTupleIndex > -1 && filterable)
						{
							tupleRanges.add(oFF.XPair.create(oFF.XIntegerValue.create(oldTupleIndex), oFF.XIntegerValue.create(j - 1)));
						}
						oldTupleIndex = j;
						filterable = oFF.notNull(member) && !oFF.XConstantWithParent.isObjectTypeOf(member.getMemberType(), oFF.MemberType.RESULT) && (!actualDimension.isHierarchyActive() || oFF.isNull(currentFilterList) || oFF.XStringUtils.isNullOrEmpty(currentFilterList.getHierarchyName()) || !currentFilterList.isConvertToFlatFilter() && oFF.XString.isEqual(currentFilterList.getHierarchyName(), actualDimension.getHierarchyName()));
						oldFirstTuple = newFirstTuple;
					}
				}
				if (filterable)
				{
					tupleRanges.add(oFF.XPair.create(oFF.XIntegerValue.create(oldTupleIndex), oFF.XIntegerValue.create(maxTuple - 1)));
				}
				oldDimension = newDimension;
			}
		}
		this.createDimensionMemberRectangles(list, oldDimBoundary, headerAmount - 1, tupleRanges);
	}
	return list;
};
oFF.RsVizTableContainer.prototype.getFilterableRowDimensionMemberBoundaries = function(minRow, maxRow)
{
	return this.getFilterableDimensionMemberBoundaries(minRow, maxRow + this.getHeaderRowCount(), this.getLastColumnIndexWithRowHeader() + 1, (i) => {
		return this.getRowDimension(i.getInteger());
	}, (j) => {
		return this.getRowTuples(j.getInteger(), j.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getFormattedCellContent = function(column, row)
{
	let co = this.getCellObjectAt(column, row);
	return oFF.isNull(co) ? null : co.getFormatted();
};
oFF.RsVizTableContainer.prototype.getGridCollector = function()
{
	return this.getQueryModel().getVisualizationManager().getGridCollector();
};
oFF.RsVizTableContainer.prototype.getHeaderCellCoordinates = function(columnMin, columnMax, rowMin, rowMax)
{
	let i;
	let j;
	let result = oFF.XList.create();
	let hca = this.getHeaderColumnCount();
	let hra = this.getHeaderRowCount();
	for (i = 0; i < hca; i++)
	{
		for (j = 0; j < hra; j++)
		{
			result.add(oFF.XPair.create(oFF.XIntegerValue.create(i), oFF.XIntegerValue.create(j)));
		}
	}
	for (i = 0; i < hca; i++)
	{
		for (j = rowMin; j <= rowMax; j++)
		{
			result.add(oFF.XPair.create(oFF.XIntegerValue.create(i), oFF.XIntegerValue.create(j + hra)));
		}
	}
	for (i = columnMin; i <= columnMax; i++)
	{
		for (j = 0; j < hra; j++)
		{
			result.add(oFF.XPair.create(oFF.XIntegerValue.create(i + hca), oFF.XIntegerValue.create(j)));
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getHeaderColumnCount = function()
{
	let headerColumnAmount = -1;
	let resultTable = this.getResultTable();
	if (oFF.notNull(resultTable))
	{
		headerColumnAmount = resultTable.getPreColumnsAmount();
	}
	return headerColumnAmount;
};
oFF.RsVizTableContainer.prototype.getHeaderFieldName = function(column, row)
{
	let hct = this.getVisualizationDefinition().getEffectiveTableHeaderCompactionType();
	let fieldName;
	if (hct === oFF.TableHeaderCompactionType.ROW || hct === oFF.TableHeaderCompactionType.PREFERABLY_ROW)
	{
		fieldName = this.getRowTupleFieldName(column);
		if (oFF.isNull(fieldName))
		{
			fieldName = this.getColumnTupleFieldName(row);
		}
	}
	else
	{
		fieldName = this.getColumnTupleFieldName(row);
		if (oFF.isNull(fieldName))
		{
			fieldName = this.getRowTupleFieldName(column);
		}
	}
	return fieldName;
};
oFF.RsVizTableContainer.prototype.getHeaderRowCount = function()
{
	let headerRowAmount = -1;
	let resultTable = this.getResultTable();
	if (oFF.notNull(resultTable))
	{
		headerRowAmount = resultTable.getPreRowsAmount();
	}
	return headerRowAmount;
};
oFF.RsVizTableContainer.prototype.getIndexForTupleIndex = function(tupleIndex, bundleAccessor, headerAmountInteger)
{
	let tableData = this.getVisualizationData();
	let baseTile = oFF.isNull(tableData) ? null : tableData.getBaseTile();
	let axisBundle = oFF.isNull(baseTile) ? null : bundleAccessor(baseTile);
	let overallIndex = -1;
	if (oFF.notNull(axisBundle))
	{
		let tuple = axisBundle.getTupleAt(tupleIndex);
		overallIndex = headerAmountInteger(tableData).getInteger() + tuple.getDataIndex();
	}
	return overallIndex;
};
oFF.RsVizTableContainer.prototype.getLastColumnIndexWithRowHeader = function()
{
	let headerEndColumn = -1;
	let resultTable = this.getResultTable();
	if (oFF.notNull(resultTable))
	{
		headerEndColumn = resultTable.getHeaderEndColumn();
	}
	return headerEndColumn;
};
oFF.RsVizTableContainer.prototype.getLastRowIndexWithColumnHeader = function()
{
	let headerEndRow = -1;
	let resultTable = this.getResultTable();
	if (oFF.notNull(resultTable))
	{
		headerEndRow = resultTable.getHeaderEndRow();
	}
	return headerEndRow;
};
oFF.RsVizTableContainer.prototype.getMemberBoundaries = function(member, minBound, maxBound, tupleAccessor, dimensionAccessor, headerDimensionEndIndex, headerTupleStartIndex)
{
	let list = oFF.XList.create();
	if (oFF.notNull(member))
	{
		let dimension = member.getDimension();
		let oldMember = null;
		let oldFirstTuple = null;
		for (let i = minBound; i <= maxBound; i++)
		{
			let currentValue = oFF.XIntegerValue.create(i);
			let element = this.retrieveMemberInternal(dimension, tupleAccessor, i);
			let newMember = oFF.isNull(element) ? null : element.getDimensionMember();
			let newFirstTuple = oFF.isNull(element) ? null : element.getFirstTuple();
			if (oldFirstTuple !== newFirstTuple)
			{
				if ((oFF.notNull(newFirstTuple) || oFF.notNull(oldFirstTuple)) && !oFF.DfNameObject.areNamesEqual(newMember, member) && oldFirstTuple !== newFirstTuple)
				{
					list.add(currentValue);
				}
				oldFirstTuple = newFirstTuple;
				oldMember = newMember;
			}
		}
		if (oFF.notNull(oldMember) && !oFF.DfNameObject.areNamesEqual(oldMember, member))
		{
			list.add(oFF.XIntegerValue.create(maxBound + 1));
		}
		if (!oFF.XCollectionUtils.hasElements(list))
		{
			for (let j = 0; j < headerDimensionEndIndex; j++)
			{
				if (oFF.DfNameObject.areNamesEqual(dimension, dimensionAccessor(oFF.XIntegerValue.create(j))))
				{
					list.add(oFF.XIntegerValue.create(headerTupleStartIndex));
				}
			}
		}
	}
	return list;
};
oFF.RsVizTableContainer.prototype.getMembers = function(column, row)
{
	let members = oFF.XList.create();
	if (this.isOnDataColumn(column) && this.isOnDataRow(row))
	{
		this.fillTuples(members, this.getColumnTuple(column));
		this.fillTuples(members, this.getRowTuple(row));
	}
	else if (this.isOnDataColumn(column))
	{
		members.add(this.getColumnTupleElement(column, row).getDimensionMember());
	}
	else if (this.isOnDataRow(row))
	{
		members.add(this.getRowTupleElement(column, row).getDimensionMember());
	}
	return members;
};
oFF.RsVizTableContainer.prototype.getMinColEffective = function(gridContainer)
{
	let result = this.m_minColFetch;
	if (result < 1)
	{
		result = this.getQueryManager().getMaxColumns();
	}
	if (result < 1 && oFF.notNull(gridContainer))
	{
		result = gridContainer.getIndexOfFirstUndefinedColumnAfter(0);
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getMinRowEffective = function(gridContainer)
{
	let result = this.m_minRowFetch;
	if (result < 1)
	{
		result = this.getQueryManager().getMaxRows();
	}
	if (result < 1 && oFF.notNull(gridContainer))
	{
		result = gridContainer.getIndexOfFirstUndefinedRowAfter(0);
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getPlainCellContent = function(column, row)
{
	let co = this.getCellObjectAt(column, row);
	return oFF.isNull(co) ? null : co.getPlain();
};
oFF.RsVizTableContainer.prototype.getResultTable = function()
{
	return this.getVisualizationData();
};
oFF.RsVizTableContainer.prototype.getRowAtIndex = function(index)
{
	let result = null;
	let resultTable = this.getResultTable();
	if (oFF.notNull(resultTable))
	{
		let headerRowList = resultTable.getHeaderRowList();
		let headerRowSize = headerRowList.size();
		let rowList = resultTable.getRowList();
		if (index > -1 && index < headerRowSize)
		{
			result = headerRowList.get(index);
		}
		else if (index >= headerRowSize && index - headerRowSize < rowList.size())
		{
			result = rowList.get(index - headerRowSize);
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getRowAttributeBoundaries = function(attribute)
{
	return this.getAttributeBoundaries(attribute, this.getLastRowIndexWithColumnHeader() + 1, (h) => {
		return this.getColumnDimension(h.getInteger());
	}, (i) => {
		return this.getColumnTupleFieldName(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getRowDimension = function(column)
{
	if (this.isOnHeaderColumn(column))
	{
		let columnObject = this.getColumnAtIndex(column);
		if (oFF.notNull(columnObject))
		{
			let dimIndex = columnObject.getDimensionIndex();
			return dimIndex < 0 ? null : this.m_rowDimensions.get(dimIndex);
		}
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getRowDimensionInterval = function(dimension)
{
	return this.getDimensionInterval(dimension, () => {
		return oFF.XIntegerValue.create(this.getLastColumnIndexWithRowHeader() + 1);
	}, (i) => {
		return this.getRowDimension(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getRowDimensionStrict = function(column, row)
{
	if (row === this.getHeaderRowCount() - 1)
	{
		return this.getRowDimension(column);
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getRowDimensions = function(columnMin, columnMax)
{
	let result = oFF.XList.create();
	if (this.isOnHeaderColumn(columnMax))
	{
		for (let i = columnMin; i <= columnMax; i++)
		{
			let columnObject = this.getColumnAtIndex(i);
			if (oFF.notNull(columnObject))
			{
				let dimIndex = columnObject.getDimensionIndex();
				let curDim = dimIndex < 0 ? null : this.m_rowDimensions.get(dimIndex);
				if (oFF.notNull(curDim) && !result.contains(curDim))
				{
					result.add(curDim);
				}
			}
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getRowFieldBoundaries = function(field)
{
	return this.getFieldBoundaries(field, this.getLastRowIndexWithColumnHeader() + 1, (h) => {
		return this.getColumnDimension(h.getInteger());
	}, (i) => {
		return this.getColumnTupleFieldName(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getRowIndexForTupleIndex = function(rowTupleIndex)
{
	return this.getIndexForTupleIndex(rowTupleIndex, (a) => {
		return a.getRowsBundle();
	}, (b) => {
		return oFF.XIntegerValue.create(b.getPreRowsAmount());
	});
};
oFF.RsVizTableContainer.prototype.getRowMemberBoundaries = function(member, rowMin, rowMax)
{
	return this.getMemberBoundaries(member, rowMin, rowMax + this.getHeaderRowCount(), (i) => {
		return this.getRowTuples(i.getInteger(), i.getInteger());
	}, (j) => {
		return this.getRowDimension(j.getInteger());
	}, this.getLastColumnIndexWithRowHeader() + 1, this.getHeaderRowCount());
};
oFF.RsVizTableContainer.prototype.getRowTuple = function(row)
{
	let correctedRow = this.getRowTupleIndex(row);
	if (correctedRow > -1 && correctedRow < this.m_rowTuples.size())
	{
		return this.m_rowTuples.get(correctedRow);
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getRowTupleElement = function(column, row)
{
	let correctedRow = this.getRowTupleIndex(row);
	if (correctedRow > -1 && correctedRow < this.m_rowTuples.size() && this.isOnHeaderColumn(column))
	{
		let columnObject = this.getColumnAtIndex(column);
		if (oFF.notNull(columnObject))
		{
			let dimIndex = columnObject.getDimensionIndex();
			let rowTuple = this.m_rowTuples.get(correctedRow);
			if (dimIndex > -1 && oFF.notNull(rowTuple))
			{
				return rowTuple.getTupleElementAt(dimIndex);
			}
		}
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getRowTupleElements = function(columnMin, columnMax, rowMin, rowMax)
{
	let result = oFF.XList.create();
	let correctedRowMin = this.getRowTupleIndex(rowMin);
	let correctedRowMax = this.getRowTupleIndex(rowMax);
	if (correctedRowMin > -1 && correctedRowMax < this.m_rowTuples.size() && this.isOnHeaderColumn(columnMin) && this.isOnHeaderColumn(columnMax))
	{
		for (let column = columnMin; column <= columnMax; column++)
		{
			let columnObject = this.getColumnAtIndex(column);
			if (oFF.notNull(columnObject))
			{
				let dimIndex = columnObject.getDimensionIndex();
				if (dimIndex > -1)
				{
					for (let i = correctedRowMin; i <= correctedRowMax; i++)
					{
						let rowTuple = this.m_rowTuples.get(i);
						if (oFF.notNull(rowTuple))
						{
							let tupleElement = rowTuple.getTupleElementAt(dimIndex);
							oFF.XCollectionUtils.addIfNotContains(result, tupleElement, (a, b) => {
								return oFF.XObjectExt.areEqual(a, b) && oFF.XObjectExt.areEqual(a.getFirstTuple(), b.getFirstTuple());
							});
						}
					}
				}
			}
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getRowTupleFieldName = function(column)
{
	if (this.isOnHeaderColumn(column))
	{
		let columnObject = this.getColumnAtIndex(column);
		if (oFF.notNull(columnObject) && oFF.XStringUtils.isNotNullAndNotEmpty(columnObject.getFieldName()))
		{
			return columnObject.getFieldName();
		}
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getRowTupleFieldNames = function(columnMin, columnMax, enforceSameDimension)
{
	let columnObjectMin = this.getColumnAtIndex(columnMin);
	let columnObjectMax = this.getColumnAtIndex(columnMax);
	if (!enforceSameDimension || oFF.notNull(columnObjectMin) && oFF.notNull(columnObjectMax) && columnObjectMin.getDimensionIndex() === columnObjectMax.getDimensionIndex())
	{
		let result = oFF.XList.create();
		for (let i = columnMin; i <= columnMax; i++)
		{
			let columnObject = this.getColumnAtIndex(i);
			if (oFF.notNull(columnObject) && oFF.XStringUtils.isNotNullAndNotEmpty(columnObject.getFieldName()))
			{
				result.add(columnObject.getFieldName());
			}
		}
		return result;
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getRowTupleIndex = function(row)
{
	let tupleIndex = -1;
	let analyticsRow = this.getRowAtIndex(row);
	if (oFF.notNull(analyticsRow))
	{
		tupleIndex = analyticsRow.getTupleIndex();
	}
	return tupleIndex;
};
oFF.RsVizTableContainer.prototype.getRowTupleReference = function(row)
{
	let correctedRow = this.getRowTupleIndex(row);
	let gridContainer = this.getGridCollector().getGridContainer();
	if (oFF.XObjectExt.isValidObject(gridContainer) && correctedRow > -1)
	{
		return gridContainer.getRowTupleAt(correctedRow);
	}
	return null;
};
oFF.RsVizTableContainer.prototype.getRowTuples = function(rowMin, rowMax)
{
	let result = oFF.XList.create();
	let correctedRowMin = this.getRowTupleIndex(rowMin);
	let correctedRowMax = this.getRowTupleIndex(rowMax);
	if (correctedRowMin > -1 && correctedRowMax < this.m_rowTuples.size())
	{
		for (let i = correctedRowMin; i <= correctedRowMax; i++)
		{
			result.add(this.m_rowTuples.get(i));
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getRowsDimensionBoundaries = function(dimension)
{
	return this.getDimensionBoundaries(dimension, this.getLastColumnIndexWithRowHeader() + 1, (i) => {
		return this.getRowDimension(i.getInteger());
	});
};
oFF.RsVizTableContainer.prototype.getRowsSelectionScope = function(minRow, maxRow)
{
	let resultTable = this.getResultTable();
	let cellsReferenceScope = null;
	if (oFF.notNull(resultTable))
	{
		cellsReferenceScope = oFF.QVizCellsReferenceScope.create(this.getContext(), this.getVisualizationDefinition());
		for (let i = minRow; i <= maxRow; i++)
		{
			this.decorateRowCellReferenceScope(resultTable, cellsReferenceScope, i);
		}
	}
	return cellsReferenceScope;
};
oFF.RsVizTableContainer.prototype.getTargetDropAxisType = function(column, row)
{
	let result = null;
	if (row === -1 && column === -1)
	{
		result = oFF.AxisType.FREE;
	}
	else if (row === -1)
	{
		result = oFF.AxisType.ROWS;
	}
	else if (column === -1)
	{
		result = oFF.AxisType.COLUMNS;
	}
	else
	{
		let cellObject = this.getCellObjectAt(column, row);
		if (oFF.notNull(cellObject))
		{
			let cellTypeInt = cellObject.getType();
			if (cellTypeInt === oFF.SacTableConstants.CT_EMPTY_AXIS_ROW_HEADER)
			{
				result = oFF.AxisType.ROWS;
			}
			else if (cellTypeInt === oFF.SacTableConstants.CT_EMPTY_AXIS_COLUMN_HEADER)
			{
				result = oFF.AxisType.COLUMNS;
			}
		}
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getTupleElement = function(column, row)
{
	let tupleElement = this.getRowTupleElement(column, row);
	if (oFF.isNull(tupleElement))
	{
		tupleElement = this.getColumnTupleElement(column, row);
	}
	return tupleElement;
};
oFF.RsVizTableContainer.prototype.getTupleElementForDimension = function(column, row, dimension)
{
	let tupleFunction = (a) => {
		return oFF.isNull(a) ? null : a.getTupleElementByDimension(dimension);
	};
	let result = tupleFunction(this.getRowTuple(row));
	if (oFF.isNull(result))
	{
		result = tupleFunction(this.getColumnTuple(column));
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getUriFromAction = function(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel)
{
	let result = null;
	let tableData = this.getVisualizationData();
	if (oFF.notNull(tableData))
	{
		result = tableData.getUriFromAction(action, rowTupleReference, rowDimensionLevel, columnTupleReference, columnDimensionLevel);
	}
	return result;
};
oFF.RsVizTableContainer.prototype.getValueAt = function(column, row)
{
	let cellObject = this.getCellObjectAt(column, row);
	return oFF.isNull(cellObject) ? null : cellObject.getPlain();
};
oFF.RsVizTableContainer.prototype.hasColumnDimensions = function()
{
	return oFF.XStream.of(this.m_columnDimensions).anyMatch((cDim) => {
		let colDim = cDim.getQueryModel().getDimensionByName(cDim.getName());
		return colDim.isUniversalDisplayHierarchyDimension() && cDim.getResultSetFields().size() > 0 || colDim.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && colDim.getResultSetAttributes().size() > 0 || colDim.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED && colDim.getResultSetFields().size() > 0;
	});
};
oFF.RsVizTableContainer.prototype.hasRowDimensions = function()
{
	return oFF.XStream.of(this.m_rowDimensions).anyMatch((rDim) => {
		let rowDim = rDim.getQueryModel().getDimensionByName(rDim.getName());
		return rowDim.isUniversalDisplayHierarchyDimension() && rDim.getResultSetFields().size() > 0 || rowDim.getFieldLayoutType() === oFF.FieldLayoutType.ATTRIBUTE_BASED && rowDim.getResultSetAttributes().size() > 0 || rowDim.getFieldLayoutType() === oFF.FieldLayoutType.FIELD_BASED && rowDim.getResultSetFields().size() > 0;
	});
};
oFF.RsVizTableContainer.prototype.invalidate = function()
{
	this.resetTileCarrier();
	oFF.RsVizVisualizationContainer.prototype.invalidate.call( this );
};
oFF.RsVizTableContainer.prototype.isCellOnHeader = function(column, row)
{
	return !this.isOnDataRow(row) && !this.isOnDataColumn(column);
};
oFF.RsVizTableContainer.prototype.isDataEntryEnabled = function(column, row)
{
	return this.getCellObjectAt(column, row).isDataEntryEnabled();
};
oFF.RsVizTableContainer.prototype.isEmptyHeaderCell = function(column, row)
{
	let cell = this.getCellObjectAt(column, row);
	return row < this.getHeaderRowCount() && this.hasRowDimensions() && column <= this.getHeaderColumnCount() && oFF.notNull(cell) && cell.getType() === oFF.SacTableConstants.CT_HEADER;
};
oFF.RsVizTableContainer.prototype.isOnDataColumn = function(column)
{
	return this.getResultTable() !== null && column >= this.getHeaderColumnCount();
};
oFF.RsVizTableContainer.prototype.isOnDataRow = function(row)
{
	return this.getResultTable() !== null && row >= this.getHeaderRowCount();
};
oFF.RsVizTableContainer.prototype.isOnHeaderBandRow = function(row)
{
	let rowObject = this.getRowAtIndex(row);
	return oFF.notNull(rowObject) && rowObject.isHeaderBand();
};
oFF.RsVizTableContainer.prototype.isOnHeaderColumn = function(column)
{
	return this.getResultTable() !== null && this.hasRowDimensions() && column < this.getHeaderColumnCount() && column <= this.getLastColumnIndexWithRowHeader();
};
oFF.RsVizTableContainer.prototype.isOnHeaderRow = function(row)
{
	return this.getResultTable() !== null && this.hasColumnDimensions() && row < this.getHeaderRowCount() && row <= this.getLastRowIndexWithColumnHeader();
};
oFF.RsVizTableContainer.prototype.isOnTotalColumns = function(column)
{
	let columnObject = this.getColumnAtIndex(column);
	return oFF.notNull(columnObject) && columnObject.isTotalsContext();
};
oFF.RsVizTableContainer.prototype.isOnTotalRow = function(row)
{
	let rowObject = this.getRowAtIndex(row);
	return oFF.notNull(rowObject) && rowObject.isTotalsContext();
};
oFF.RsVizTableContainer.prototype.isUdh = function(dimensions)
{
	return oFF.XCollectionUtils.size(dimensions) === 1 && dimensions.get(0).isUniversalDisplayHierarchyDimension();
};
oFF.RsVizTableContainer.prototype.isUdhOnColumns = function()
{
	return this.isUdh(this.m_columnDimensions);
};
oFF.RsVizTableContainer.prototype.isUdhOnRows = function()
{
	return this.isUdh(this.m_rowDimensions);
};
oFF.RsVizTableContainer.prototype.loadApplicationSettings = function()
{
	let tableDefinition = this.getVisualizationDefinition();
	if (oFF.notNull(tableDefinition))
	{
		let applicationSettings = tableDefinition.getApplicationSettings();
		this.m_minColFetch = applicationSettings.getMinColumnsFetch();
		this.m_minRowFetch = applicationSettings.getMinRowsFetch();
		this.m_maxColLoad = applicationSettings.getMaxColumns();
		this.m_rowPadding = applicationSettings.getTileRowsPadding();
		this.m_colPadding = applicationSettings.getTileColumnsPadding();
	}
};
oFF.RsVizTableContainer.prototype.markNeedsGeneralPropReWrite = function()
{
	this.m_needsGeneralPropReWrite = true;
	this.resetState();
};
oFF.RsVizTableContainer.prototype.markNeedsOverallReWrite = function()
{
	this.m_needsGeneralPropReWrite = true;
	this.m_needsReWriteRows = true;
	this.m_needsOverallRewrite = true;
	this.resetState();
};
oFF.RsVizTableContainer.prototype.markNeedsReapplyFormatting = function()
{
	this.m_needsGeneralPropReWrite = true;
	this.m_needsOverallRewrite = true;
	this.m_needsReWriteRows = true;
	this.m_needsReapplyFormatting = true;
	this.resetState();
	this.resetLocalPaging();
};
oFF.RsVizTableContainer.prototype.markPristine = function()
{
	this.m_needsReapplyFormatting = false;
	this.m_needsOverallRewrite = false;
	this.m_needsReWriteRows = false;
	this.m_needsGeneralPropReWrite = false;
};
oFF.RsVizTableContainer.prototype.needsGeneralPropReWrite = function()
{
	return this.m_needsGeneralPropReWrite;
};
oFF.RsVizTableContainer.prototype.needsReApplyFormatting = function()
{
	return this.m_needsReapplyFormatting;
};
oFF.RsVizTableContainer.prototype.needsReWriteRows = function()
{
	return this.m_needsReWriteRows;
};
oFF.RsVizTableContainer.prototype.needsRecreateRows = function()
{
	return this.m_needsOverallRewrite;
};
oFF.RsVizTableContainer.prototype.onGridCollectorFilled = function(extResult, gridContainer, customIdentifier)
{
	if (extResult.isValid())
	{
		this.processVisualizationActionInternal(this.getActiveSyncType(), this.m_reEntryListener, customIdentifier);
		this.m_reEntryListener = null;
	}
	else
	{
		if (extResult.hasErrors())
		{
			let errorIt = extResult.getErrors().getIterator();
			while (errorIt.hasNext())
			{
				let errorMsg = errorIt.next();
				this.addError(errorMsg.getCode(), errorMsg.getText());
			}
		}
		this.endSync();
	}
};
oFF.RsVizTableContainer.prototype.performPendingRequests = function(syncType, listener, customIdentifier)
{
	if (oFF.notNull(this.m_pagingTileCarrier))
	{
		let tc = this.m_pagingTileCarrier;
		this.m_pagingTileCarrier = null;
		this.processTileVisualization(syncType, listener, this, null, customIdentifier, tc.getRowMin(), tc.getRowMax(), tc.getColumnMin(), tc.getColumnMax());
	}
};
oFF.RsVizTableContainer.prototype.processTileVisualization = function(syncType, visualizationProvidedListener, resultSetCollectorListener, queryExecutedListener, customIdentifier, rowScrollReferencePoint, rowScrollEndReferencePoint, colScrollReferencePoint, colScrollEndReferencePoint)
{
	this.loadApplicationSettings();
	let busy = false;
	let gridCollector = this.getGridCollector();
	let tableObject = this.getVisualizationData();
	if (oFF.notNull(tableObject) && oFF.notNull(gridCollector) && gridCollector.isValid() && gridCollector.getSyncState() !== oFF.SyncState.PROCESSING && this.getSyncState() !== oFF.SyncState.PROCESSING)
	{
		let dataRowsCountTotal = tableObject.getDataRowTuplesTotalCount();
		let dataColsCountTotal = tableObject.getDataColumnTuplesTotalCount();
		this.m_pendingRowScrollPoint = -1;
		this.m_pendingRowScrollPointEnd = -1;
		this.m_pendingColScrollPoint = -1;
		this.m_pendingColScrollPointEnd = -1;
		let correctedRowScrollReferencePoint = oFF.XMath.max(0, oFF.XMath.min(dataRowsCountTotal - 1, rowScrollReferencePoint));
		let correctedColScrollReferencePoint = oFF.XMath.max(0, oFF.XMath.min(dataColsCountTotal - 1, colScrollReferencePoint));
		let correctedRowScrollEndReferencePoint = oFF.XMath.max(0, oFF.XMath.min(dataRowsCountTotal - 1, rowScrollEndReferencePoint));
		let correctedColScrollEndReferencePoint = oFF.XMath.max(0, oFF.XMath.min(dataColsCountTotal - 1, colScrollEndReferencePoint));
		let newMinOrigRow = oFF.XMath.max(0, correctedRowScrollReferencePoint - this.m_rowPadding);
		let newMaxOrigRow = oFF.XMath.min(dataRowsCountTotal - 1, correctedRowScrollEndReferencePoint + this.m_rowPadding);
		let newMinOrigCol = oFF.XMath.max(0, correctedColScrollReferencePoint - this.m_colPadding);
		let newMaxOrigCol = oFF.XMath.min(dataColsCountTotal - 1, correctedColScrollEndReferencePoint + this.m_colPadding);
		let horizontalLazyLoad = this.m_minColFetch < this.m_maxColLoad;
		if (!horizontalLazyLoad)
		{
			newMinOrigCol = 0;
			newMaxOrigCol = oFF.XMath.min(this.m_maxColLoad, dataColsCountTotal - 1);
		}
		if ((newMinOrigCol <= newMaxOrigCol || newMaxOrigCol === -1) && (newMinOrigRow <= newMaxOrigRow || newMaxOrigRow === -1))
		{
			busy = true;
			if (oFF.isNull(this.m_pagingProcess))
			{
				this.m_pendingPaging = false;
				this.m_pendingTileCarrier = oFF.RscGridTileCarrier.create(newMinOrigRow, newMaxOrigRow, newMinOrigCol, newMaxOrigCol);
				busy = this.executeWindowedRequest(syncType, visualizationProvidedListener, resultSetCollectorListener, queryExecutedListener, customIdentifier, newMinOrigRow, newMaxOrigRow, newMinOrigCol, newMaxOrigCol);
			}
			else
			{
				this.m_pendingPaging = true;
				this.m_pendingRowScrollPoint = correctedRowScrollReferencePoint;
				this.m_pendingRowScrollPointEnd = rowScrollEndReferencePoint;
				this.m_pendingColScrollPoint = correctedColScrollReferencePoint;
				this.m_pendingColScrollPointEnd = colScrollEndReferencePoint;
				this.m_pendingVisualizationProvidedListener = visualizationProvidedListener;
				this.m_pendingResultSetCollectorListener = resultSetCollectorListener;
				this.m_pendingQueryExecutedListener = queryExecutedListener;
				this.m_pendingIdentifier = customIdentifier;
				this.m_pendingSyncType = syncType;
			}
		}
	}
	else
	{
		this.m_pendingRowScrollPoint = rowScrollReferencePoint;
		this.m_pendingRowScrollPointEnd = rowScrollEndReferencePoint;
		this.m_pendingColScrollPoint = colScrollReferencePoint;
		this.m_pendingColScrollPointEnd = colScrollEndReferencePoint;
		this.m_pendingVisualizationProvidedListener = visualizationProvidedListener;
		this.m_pendingResultSetCollectorListener = resultSetCollectorListener;
		this.m_pendingQueryExecutedListener = queryExecutedListener;
		this.m_pendingIdentifier = customIdentifier;
		this.m_pendingSyncType = syncType;
		this.m_pendingPaging = true;
	}
	return busy;
};
oFF.RsVizTableContainer.prototype.releaseObjectInternal = function()
{
	this.m_columnTuples = oFF.XObjectExt.release(this.m_columnTuples);
	this.m_rowTuples = oFF.XObjectExt.release(this.m_rowTuples);
	this.m_columnDimensions = oFF.XObjectExt.release(this.m_columnDimensions);
	this.m_rowDimensions = oFF.XObjectExt.release(this.m_rowDimensions);
	this.m_pivotTableEngine = oFF.XObjectExt.release(this.m_pivotTableEngine);
	oFF.RsVizVisualizationContainer.prototype.releaseObjectInternal.call( this );
};
oFF.RsVizTableContainer.prototype.reschedulePendingScroll = function()
{
	this.processTileVisualization(this.m_pendingSyncType, this.m_pendingVisualizationProvidedListener, this.m_pendingResultSetCollectorListener, this.m_pendingQueryExecutedListener, this.m_pendingIdentifier, this.m_pendingRowScrollPoint, this.m_pendingRowScrollPointEnd, this.m_pendingColScrollPoint, this.m_pendingColScrollPointEnd);
};
oFF.RsVizTableContainer.prototype.resetLocalPaging = function()
{
	this.loadApplicationSettings();
	let tableObject = this.getVisualizationData();
	if (oFF.notNull(tableObject))
	{
		tableObject.setPartial(false);
	}
	let gridContainer = this.getGridCollector().getGridContainer();
	if (!oFF.XObjectExt.isValidObject(gridContainer) || this.getGridCollector().getSyncState() === oFF.SyncState.OUT_OF_SYNC)
	{
		this.resetPaging();
	}
	else
	{
		let rowsLoaded = gridContainer.getRowsLoadedCount();
		let colsLoaded = gridContainer.getColumnsLoadedCount();
		let dataRowsCountTotal = oFF.XMath.max(gridContainer.getDataRowsTotalCount(), rowsLoaded);
		let dataColsCountTotal = oFF.XMath.max(gridContainer.getDataColumnsTotalCount(), colsLoaded);
		let newMaxOrigRow = oFF.XMath.min(dataRowsCountTotal, this.getMinRowEffective(gridContainer)) - 1;
		let newMaxOrigCol = oFF.XMath.min(dataColsCountTotal, this.getMinColEffective(gridContainer)) - 1;
		if (this.getGridCollector().getSyncState() !== oFF.SyncState.PROCESSING)
		{
			this.m_pendingTileCarrier = oFF.RscGridTileCarrier.create(0, newMaxOrigRow, 0, newMaxOrigCol);
		}
	}
};
oFF.RsVizTableContainer.prototype.resetPaging = function()
{
	this.loadApplicationSettings();
	let queryManager = this.getQueryManager();
	queryManager.setOffsetColumns(0);
	queryManager.setOffsetRows(0);
	if (this.m_minColFetch > 0)
	{
		queryManager.setMaxColumns(this.m_minColFetch);
	}
	if (this.m_minRowFetch > 0)
	{
		queryManager.setMaxRows(this.m_minRowFetch);
	}
};
oFF.RsVizTableContainer.prototype.resetRenderingScope = function()
{
	let tableObject = this.getVisualizationData();
	if (oFF.notNull(tableObject))
	{
		tableObject.resetRenderingScope();
	}
};
oFF.RsVizTableContainer.prototype.resetTileCarrier = function()
{
	this.m_pendingTileCarrier = null;
};
oFF.RsVizTableContainer.prototype.retrieveMemberInternal = function(dimension, tupleAccessor, index)
{
	let tuples = tupleAccessor(oFF.XIntegerValue.create(index));
	let element = null;
	if (oFF.XCollectionUtils.size(tuples) === 1)
	{
		let tuple = tuples.get(0);
		let tupleSize = tuple.size();
		for (let i = 0; i < tupleSize; i++)
		{
			let tupleElement = tuple.get(i);
			if (oFF.DfNameObject.areNamesEqual(tupleElement.getDimension(), dimension))
			{
				element = tupleElement;
			}
		}
	}
	return element;
};
oFF.RsVizTableContainer.prototype.setupVisualization = function()
{
	this.m_columnTuples = oFF.XList.create();
	this.m_rowTuples = oFF.XList.create();
	this.m_rowDimensions = oFF.XList.create();
	this.m_columnDimensions = oFF.XList.create();
	this.loadApplicationSettings();
};
oFF.RsVizTableContainer.prototype.updateDefinition = function()
{
	this.loadApplicationSettings();
	if (this.getResultTable() !== null && this.getVisualizationDefinition() !== null)
	{
		this.getResultTable().applyTableDefinition(this.getVisualizationDefinition());
	}
};
oFF.RsVizTableContainer.prototype.updateModel = function(gridCollector)
{
	if (oFF.notNull(gridCollector))
	{
		this.m_columnTuples.clear();
		this.m_columnTuples.addAll(gridCollector.getColumnTuples());
		this.m_columnDimensions.clear();
		this.m_columnDimensions.addAll(gridCollector.getColumnResultSetDimensions());
		this.m_rowTuples.clear();
		this.m_rowTuples.addAll(gridCollector.getRowTuples());
		this.m_rowDimensions.clear();
		this.m_rowDimensions.addAll(gridCollector.getRowResultSetDimensions());
	}
	this.m_needsGeneralPropReWrite = false;
	this.m_needsOverallRewrite = false;
	this.m_needsReapplyFormatting = false;
};

oFF.QQuickActionParameterConstant = function() {};
oFF.QQuickActionParameterConstant.prototype = new oFF.QQuickActionParameterAbstract();
oFF.QQuickActionParameterConstant.prototype._ff_c = "QQuickActionParameterConstant";

oFF.QQuickActionParameterConstant.create = function(value)
{
	let instance = new oFF.QQuickActionParameterConstant();
	instance.m_value = value;
	return instance;
};
oFF.QQuickActionParameterConstant.prototype.m_value = null;
oFF.QQuickActionParameterConstant.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickActionParameterAbstract.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_value = orig.m_value;
};
oFF.QQuickActionParameterConstant.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT;
};
oFF.QQuickActionParameterConstant.prototype.getValue = function()
{
	return this.m_value;
};
oFF.QQuickActionParameterConstant.prototype.releaseObject = function()
{
	this.m_value = null;
	oFF.QQuickActionParameterAbstract.prototype.releaseObject.call( this );
};
oFF.QQuickActionParameterConstant.prototype.resolveConstantValue = function()
{
	let list = oFF.XList.create();
	list.add(oFF.XValueAccess.createWithValue(this.m_value));
	return list;
};

oFF.QQuickActionParameterConstantList = function() {};
oFF.QQuickActionParameterConstantList.prototype = new oFF.QQuickActionParameterAbstract();
oFF.QQuickActionParameterConstantList.prototype._ff_c = "QQuickActionParameterConstantList";

oFF.QQuickActionParameterConstantList.create = function()
{
	let instance = new oFF.QQuickActionParameterConstantList();
	instance.m_values = oFF.XList.create();
	return instance;
};
oFF.QQuickActionParameterConstantList.prototype.m_values = null;
oFF.QQuickActionParameterConstantList.prototype.addValue = function(value)
{
	this.m_values.add(value);
};
oFF.QQuickActionParameterConstantList.prototype.clearValues = function()
{
	this.m_values.clear();
};
oFF.QQuickActionParameterConstantList.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickActionParameterAbstract.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_values = orig.m_values.createListCopy();
};
oFF.QQuickActionParameterConstantList.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT_LIST;
};
oFF.QQuickActionParameterConstantList.prototype.getValues = function()
{
	return this.m_values;
};
oFF.QQuickActionParameterConstantList.prototype.releaseObject = function()
{
	this.m_values = oFF.XObjectExt.release(this.m_values);
	oFF.QQuickActionParameterAbstract.prototype.releaseObject.call( this );
};
oFF.QQuickActionParameterConstantList.prototype.resolveConstantValue = function()
{
	return oFF.XStream.of(this.m_values).map((value) => {
		return oFF.XValueAccess.createWithValue(value);
	}).collect(oFF.XStreamCollector.toList());
};

oFF.QQuickActionParameterFieldValue = function() {};
oFF.QQuickActionParameterFieldValue.prototype = new oFF.QQuickActionParameterAbstract();
oFF.QQuickActionParameterFieldValue.prototype._ff_c = "QQuickActionParameterFieldValue";

oFF.QQuickActionParameterFieldValue.create = function(actionParameterList)
{
	let instance = new oFF.QQuickActionParameterFieldValue();
	instance.setupModelComponent(actionParameterList.getContext(), actionParameterList);
	return instance;
};
oFF.QQuickActionParameterFieldValue.prototype.m_allowMultiValues = false;
oFF.QQuickActionParameterFieldValue.prototype.m_attributeName = null;
oFF.QQuickActionParameterFieldValue.prototype.m_dimensionName = null;
oFF.QQuickActionParameterFieldValue.prototype.m_fieldName = null;
oFF.QQuickActionParameterFieldValue.prototype.m_matchesExpanded = null;
oFF.QQuickActionParameterFieldValue.prototype.m_matchesLeaves = null;
oFF.QQuickActionParameterFieldValue.prototype.m_matchesTotals = null;
oFF.QQuickActionParameterFieldValue.prototype.m_presentationType = null;
oFF.QQuickActionParameterFieldValue.prototype.m_semanticObject = null;
oFF.QQuickActionParameterFieldValue.prototype.m_semanticType = null;
oFF.QQuickActionParameterFieldValue.prototype.addValueIfMatches = function(result, drillPathElement)
{
	let dimensionMember = drillPathElement.getDimensionMember();
	let drillState = drillPathElement.getDrillState();
	let effectiveField = this.getEffectiveField();
	oFF.XCollectionUtils.forEach(dimensionMember.getAllFieldValues(), (fieldValue) => {
		let field = fieldValue.getField();
		let attribute = field.getAttribute();
		let dimension = field.getDimension();
		if (oFF.DfNameObject.areNamesEqual(dimension, this.getEffectiveDimension()) && oFF.QQuickActionParameterResolveUtil.fieldValueParameterMatchesMember(this, dimensionMember, drillState) && (oFF.DfNameObject.areNamesEqual(field, effectiveField) || oFF.isNull(effectiveField) && (oFF.XStringUtils.isNullOrEmpty(this.m_attributeName) || oFF.DfNameObject.areNamesEqual(this.getAttribute(), attribute))))
		{
			result.add(oFF.XValueAccess.createWithValue(fieldValue.getValue()));
		}
	});
};
oFF.QQuickActionParameterFieldValue.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickActionParameterAbstract.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_allowMultiValues = orig.m_allowMultiValues;
	this.m_dimensionName = orig.m_dimensionName;
	this.m_attributeName = orig.m_attributeName;
	this.m_fieldName = orig.m_fieldName;
	this.m_presentationType = orig.m_presentationType;
	this.m_semanticType = orig.m_semanticType;
	this.m_semanticObject = orig.m_semanticObject;
	this.m_matchesExpanded = orig.m_matchesExpanded;
	this.m_matchesLeaves = orig.m_matchesLeaves;
	this.m_matchesTotals = orig.m_matchesTotals;
};
oFF.QQuickActionParameterFieldValue.prototype.extractFields = function(fields, dimension)
{
	let effectiveDimension = this.getEffectiveDimension();
	if (oFF.DfNameObject.areNamesEqual(effectiveDimension, dimension))
	{
		oFF.XCollectionUtils.addIfNotNull(fields, this.getEffectiveField());
	}
};
oFF.QQuickActionParameterFieldValue.prototype.getAttribute = function()
{
	let dimension = this.getDimension();
	return oFF.isNull(dimension) ? null : dimension.getAttributeByName(this.m_attributeName);
};
oFF.QQuickActionParameterFieldValue.prototype.getAttributeName = function()
{
	return this.m_attributeName;
};
oFF.QQuickActionParameterFieldValue.prototype.getDimension = function()
{
	return this.getQueryModel().getDimensionByName(this.m_dimensionName);
};
oFF.QQuickActionParameterFieldValue.prototype.getDimensionName = function()
{
	return this.m_dimensionName;
};
oFF.QQuickActionParameterFieldValue.prototype.getEffectiveDimension = function()
{
	let dimension = this.getDimension();
	if (oFF.isNull(dimension))
	{
		let attribute = this.getAttribute();
		if (oFF.notNull(attribute))
		{
			dimension = attribute.getDimension();
		}
	}
	if (oFF.isNull(dimension))
	{
		let field = this.getField();
		if (oFF.notNull(field))
		{
			dimension = field.getDimension();
		}
	}
	if (oFF.isNull(dimension) && oFF.XStringUtils.isNotNullAndNotEmpty(this.m_semanticObject))
	{
		dimension = oFF.XStream.of(this.getQueryModel().getDimensions()).find((dim) => {
			return oFF.XString.isEqual(dim.getSemanticObject(), this.m_semanticObject);
		}).orElse(null);
	}
	return dimension;
};
oFF.QQuickActionParameterFieldValue.prototype.getEffectiveField = function()
{
	let field = this.getField();
	if (oFF.isNull(field))
	{
		field = this.getFieldFromFieldContainer(this.getAttribute());
	}
	if (oFF.isNull(field))
	{
		let dimension = this.getEffectiveDimension();
		if (oFF.notNull(dimension))
		{
			field = this.getFieldFromFieldContainer(dimension.getMainAttribute());
			if (oFF.isNull(field))
			{
				field = this.getFieldFromFieldContainer(dimension);
			}
		}
	}
	return field;
};
oFF.QQuickActionParameterFieldValue.prototype.getField = function()
{
	return this.getQueryModel().getFieldByName(this.m_fieldName);
};
oFF.QQuickActionParameterFieldValue.prototype.getFieldFromFieldContainer = function(fieldContainer)
{
	let field = null;
	if (oFF.notNull(fieldContainer))
	{
		if (this.getPresentationType() !== null)
		{
			field = fieldContainer.getFieldByPresentationType(this.m_presentationType);
		}
		else if (oFF.XStringUtils.isNotNullAndNotEmpty(this.m_semanticType))
		{
			field = fieldContainer.getFieldBySemanticType(this.m_semanticType);
		}
		else
		{
			field = fieldContainer.getKeyField();
		}
	}
	return field;
};
oFF.QQuickActionParameterFieldValue.prototype.getFieldName = function()
{
	return this.m_fieldName;
};
oFF.QQuickActionParameterFieldValue.prototype.getMatchesExpanded = function()
{
	return this.m_matchesExpanded;
};
oFF.QQuickActionParameterFieldValue.prototype.getMatchesLeaves = function()
{
	return this.m_matchesLeaves;
};
oFF.QQuickActionParameterFieldValue.prototype.getMatchesTotals = function()
{
	return this.m_matchesTotals;
};
oFF.QQuickActionParameterFieldValue.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_PARAMETER_FIELD_VALUE;
};
oFF.QQuickActionParameterFieldValue.prototype.getPresentationType = function()
{
	return this.m_presentationType;
};
oFF.QQuickActionParameterFieldValue.prototype.getSemanticObject = function()
{
	return this.m_semanticObject;
};
oFF.QQuickActionParameterFieldValue.prototype.getSemanticType = function()
{
	return this.m_semanticType;
};
oFF.QQuickActionParameterFieldValue.prototype.isAllowMultiValues = function()
{
	return this.m_allowMultiValues;
};
oFF.QQuickActionParameterFieldValue.prototype.releaseObject = function()
{
	this.m_allowMultiValues = false;
	this.m_dimensionName = null;
	this.m_attributeName = null;
	this.m_fieldName = null;
	this.m_presentationType = null;
	this.m_semanticType = null;
	this.m_semanticObject = null;
	this.m_matchesTotals = null;
	this.m_matchesLeaves = null;
	this.m_matchesExpanded = null;
	oFF.QQuickActionParameterAbstract.prototype.releaseObject.call( this );
};
oFF.QQuickActionParameterFieldValue.prototype.resolveFieldValueFromDrillPath = function(result, drillPath)
{
	oFF.XCollectionUtils.forEach(drillPath, (drillPathElement) => {
		this.addValueIfMatches(result, drillPathElement);
	});
};
oFF.QQuickActionParameterFieldValue.prototype.resolveFieldValueFromDrillPaths = function(result, drillPaths)
{
	oFF.XCollectionUtils.forEach(drillPaths, (drillPath) => {
		this.resolveFieldValueFromDrillPath(result, drillPath);
	});
};
oFF.QQuickActionParameterFieldValue.prototype.resolveOlapContextValue = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	let result = oFF.XList.create();
	this.resolveFieldValueFromDrillPaths(result, rowDrillPaths);
	this.resolveFieldValueFromDrillPaths(result, columnDrillPaths);
	return result;
};
oFF.QQuickActionParameterFieldValue.prototype.setAllowMultiValues = function(allowMultiValues)
{
	this.m_allowMultiValues = allowMultiValues;
};
oFF.QQuickActionParameterFieldValue.prototype.setAttribute = function(attribute)
{
	this.m_attributeName = oFF.isNull(attribute) ? null : attribute.getName();
};
oFF.QQuickActionParameterFieldValue.prototype.setAttributeName = function(attributeName)
{
	this.m_attributeName = attributeName;
};
oFF.QQuickActionParameterFieldValue.prototype.setDimension = function(dimension)
{
	this.m_dimensionName = oFF.isNull(dimension) ? null : dimension.getName();
};
oFF.QQuickActionParameterFieldValue.prototype.setDimensionName = function(dimensionName)
{
	this.m_dimensionName = dimensionName;
};
oFF.QQuickActionParameterFieldValue.prototype.setField = function(field)
{
	this.m_fieldName = oFF.isNull(field) ? null : field.getName();
};
oFF.QQuickActionParameterFieldValue.prototype.setFieldName = function(fieldName)
{
	this.m_fieldName = fieldName;
};
oFF.QQuickActionParameterFieldValue.prototype.setMatchesExpanded = function(matchesExpanded)
{
	this.m_matchesExpanded = matchesExpanded;
};
oFF.QQuickActionParameterFieldValue.prototype.setMatchesLeaves = function(matchesLeaves)
{
	this.m_matchesLeaves = matchesLeaves;
};
oFF.QQuickActionParameterFieldValue.prototype.setMatchesTotals = function(matchesTotals)
{
	this.m_matchesTotals = matchesTotals;
};
oFF.QQuickActionParameterFieldValue.prototype.setPresentationType = function(presentationType)
{
	this.m_presentationType = presentationType;
};
oFF.QQuickActionParameterFieldValue.prototype.setSemanticObject = function(semanticObject)
{
	this.m_semanticObject = semanticObject;
};
oFF.QQuickActionParameterFieldValue.prototype.setSemanticType = function(semanticType)
{
	this.m_semanticType = semanticType;
};

oFF.QQuickActionParameterOlap = function() {};
oFF.QQuickActionParameterOlap.prototype = new oFF.QQuickActionParameterAbstract();
oFF.QQuickActionParameterOlap.prototype._ff_c = "QQuickActionParameterOlap";

oFF.QQuickActionParameterOlap.create = function(olapComponentType)
{
	let instance = new oFF.QQuickActionParameterOlap();
	instance.m_typeToResolve = olapComponentType;
	return instance;
};
oFF.QQuickActionParameterOlap.prototype.m_allowsMultipleValues = false;
oFF.QQuickActionParameterOlap.prototype.m_typeToResolve = null;
oFF.QQuickActionParameterOlap.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickActionParameterAbstract.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_typeToResolve = orig.m_typeToResolve;
	this.m_allowsMultipleValues = orig.m_allowsMultipleValues;
};
oFF.QQuickActionParameterOlap.prototype.getComponentTypeToResolve = function()
{
	return this.m_typeToResolve;
};
oFF.QQuickActionParameterOlap.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_PARAMETER_OLAP;
};
oFF.QQuickActionParameterOlap.prototype.isAllowMultiValues = function()
{
	return this.m_allowsMultipleValues;
};
oFF.QQuickActionParameterOlap.prototype.remapNameObjects = function(nameObjects)
{
	return oFF.XStream.of(nameObjects).map((nameObject) => {
		return oFF.XValueAccess.createWithValue(oFF.XStringValue.create(nameObject.getName()));
	}).collect(oFF.XStreamCollector.toList());
};
oFF.QQuickActionParameterOlap.prototype.resolveOlapAttributes = function(attributes, fields)
{
	let result = null;
	if (this.m_allowsMultipleValues || oFF.XCollectionUtils.size(attributes) === 1)
	{
		result = this.remapNameObjects(attributes);
	}
	if (oFF.isNull(result))
	{
		if (this.m_allowsMultipleValues || oFF.XCollectionUtils.size(fields) === 1)
		{
			result = this.remapNameObjects(oFF.XStream.of(fields).map((field) => {
				return field.getAttribute();
			}).collect(oFF.XStreamCollector.toList()));
		}
	}
	return result;
};
oFF.QQuickActionParameterOlap.prototype.resolveOlapContextValue = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	let result = null;
	if (this.m_typeToResolve === oFF.OlapComponentType.QUERY_MODEL)
	{
		result = oFF.XCollectionUtils.singletonList(oFF.XValueAccess.createWithValue(oFF.XStringValue.create(queryModel.getName())));
	}
	else if (this.m_typeToResolve === oFF.OlapComponentType.AXIS)
	{
		result = oFF.XCollectionUtils.singletonList(oFF.XValueAccess.createWithValue(oFF.XStringValue.create(axisType.getName())));
	}
	else if (this.m_typeToResolve.isTypeOf(oFF.OlapComponentType.ABSTRACT_DIMENSION))
	{
		result = this.resolveOlapDimensions(dimensions, attributes, fields);
	}
	else if (this.m_typeToResolve === oFF.OlapComponentType.ATTRIBUTE)
	{
		result = this.resolveOlapAttributes(attributes, fields);
	}
	else if (this.m_typeToResolve === oFF.OlapComponentType.FIELD)
	{
		result = this.resolveOlapFields(fields);
	}
	return result;
};
oFF.QQuickActionParameterOlap.prototype.resolveOlapDimensions = function(dimensions, attributes, fields)
{
	let result = null;
	if (this.m_allowsMultipleValues || oFF.XCollectionUtils.size(dimensions) === 1)
	{
		result = this.remapNameObjects(dimensions);
	}
	if (oFF.isNull(result))
	{
		if (this.m_allowsMultipleValues || oFF.XCollectionUtils.size(attributes) === 1)
		{
			result = this.remapNameObjects(oFF.XStream.of(attributes).map((attribute) => {
				return attribute.getDimension();
			}).collect(oFF.XStreamCollector.toList()));
		}
	}
	if (oFF.isNull(result))
	{
		if (this.m_allowsMultipleValues || oFF.XCollectionUtils.size(fields) === 1)
		{
			result = this.remapNameObjects(oFF.XStream.of(fields).map((field) => {
				return field.getDimension();
			}).collect(oFF.XStreamCollector.toList()));
		}
	}
	return result;
};
oFF.QQuickActionParameterOlap.prototype.resolveOlapFields = function(fields)
{
	let result = null;
	if (this.m_allowsMultipleValues || oFF.XCollectionUtils.size(fields) === 1)
	{
		result = this.remapNameObjects(fields);
	}
	return result;
};
oFF.QQuickActionParameterOlap.prototype.setAllowMultiValues = function(allowMultiValues)
{
	this.m_allowsMultipleValues = allowMultiValues;
};

oFF.QQuickActionParameterUrlLiteral = function() {};
oFF.QQuickActionParameterUrlLiteral.prototype = new oFF.QQuickActionParameterAbstract();
oFF.QQuickActionParameterUrlLiteral.prototype._ff_c = "QQuickActionParameterUrlLiteral";

oFF.QQuickActionParameterUrlLiteral.create = function(value)
{
	let instance = new oFF.QQuickActionParameterUrlLiteral();
	instance.m_value = value;
	return instance;
};
oFF.QQuickActionParameterUrlLiteral.prototype.m_value = null;
oFF.QQuickActionParameterUrlLiteral.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickActionParameterAbstract.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	this.m_value = orig.m_value;
};
oFF.QQuickActionParameterUrlLiteral.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_PARAMETER_URL_LITERAL;
};
oFF.QQuickActionParameterUrlLiteral.prototype.getValue = function()
{
	return this.m_value;
};
oFF.QQuickActionParameterUrlLiteral.prototype.releaseObject = function()
{
	this.m_value = null;
	oFF.QQuickActionParameterAbstract.prototype.releaseObject.call( this );
};
oFF.QQuickActionParameterUrlLiteral.prototype.resolveConstantValue = function()
{
	let list = oFF.XList.create();
	list.add(oFF.XValueAccess.createWithValue(oFF.XStringValue.create(this.m_value.getRepresentation())));
	return list;
};

oFF.QQuickActionSimple = function() {};
oFF.QQuickActionSimple.prototype = new oFF.QQuickAction();
oFF.QQuickActionSimple.prototype._ff_c = "QQuickActionSimple";

oFF.QQuickActionSimple.prototype.m_parameterList = null;
oFF.QQuickActionSimple.prototype.addConstant = function(fragmentValue)
{
	let value = oFF.QQuickActionParameterConstant.create(fragmentValue);
	this.m_parameterList.add(value);
	return value;
};
oFF.QQuickActionSimple.prototype.addConstantList = function()
{
	let value = oFF.QQuickActionParameterConstantList.create();
	this.m_parameterList.add(value);
	return value;
};
oFF.QQuickActionSimple.prototype.addNewFieldValueParameter = function()
{
	let dimensionActionParameter = oFF.QQuickActionParameterFieldValue.create(this);
	this.m_parameterList.add(dimensionActionParameter);
	return dimensionActionParameter;
};
oFF.QQuickActionSimple.prototype.addNewLiteralParameter = function(literal)
{
	let actionParameter = oFF.QQuickActionParameterUrlLiteral.create(literal);
	this.addParameter(actionParameter);
	return actionParameter;
};
oFF.QQuickActionSimple.prototype.addNewOlapParameter = function(componentType)
{
	let olapActionParameter = oFF.QQuickActionParameterOlap.create(componentType);
	this.m_parameterList.add(olapActionParameter);
	return olapActionParameter;
};
oFF.QQuickActionSimple.prototype.addParameter = function(actionParameter)
{
	this.m_parameterList.add(actionParameter);
};
oFF.QQuickActionSimple.prototype.clearParameters = function()
{
	this.m_parameterList.clear();
};
oFF.QQuickActionSimple.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickAction.prototype.copyFromInternal.call( this , other, flags);
	let originAction = other;
	let sizeList = originAction.getParameterSize();
	if (sizeList > 0)
	{
		this.clearParameters();
		let originParameters = originAction.getParameters();
		for (let idxList = 0; idxList < sizeList; idxList++)
		{
			let original = originParameters.get(idxList);
			let olapComponentType = original.getOlapComponentType();
			if (olapComponentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_OLAP)
			{
				this.addNewOlapParameter(original.getComponentTypeToResolve()).copyFrom(original, flags);
			}
			else if (olapComponentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_URL_LITERAL)
			{
				this.addNewLiteralParameter(original.getValue());
			}
			else if (olapComponentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_FIELD_VALUE)
			{
				this.addNewFieldValueParameter().copyFrom(original, flags);
			}
			else if (olapComponentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT)
			{
				this.addConstant(original.getValue()).copyFrom(original, flags);
			}
			else if (olapComponentType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_CONSTANT_LIST)
			{
				this.addConstantList().copyFrom(original, flags);
			}
		}
	}
};
oFF.QQuickActionSimple.prototype.extractFields = function(fields, dimension)
{
	oFF.XStream.of(this.m_parameterList).filterNullValues().filter((p) => {
		return p.getOlapComponentType() === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_FIELD_VALUE;
	}).forEach((param) => {
		param.extractFields(fields, dimension);
	});
};
oFF.QQuickActionSimple.prototype.getParameterSize = function()
{
	return this.m_parameterList.size();
};
oFF.QQuickActionSimple.prototype.getParameters = function()
{
	return this.m_parameterList;
};
oFF.QQuickActionSimple.prototype.isApplicableSimpleParameters = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	return oFF.XStream.of(this.getParameters()).allMatch((parameter) => {
		return parameter.isApplicableSimpleParameters(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths);
	});
};
oFF.QQuickActionSimple.prototype.setupQuickAction = function(context, queryModel, name)
{
	this.setupModelComponentWithName(context, queryModel, name);
	this.m_parameterList = oFF.XList.create();
};

oFF.QQuickActionDataProviderCommand = function() {};
oFF.QQuickActionDataProviderCommand.prototype = new oFF.QQuickActionSimple();
oFF.QQuickActionDataProviderCommand.prototype._ff_c = "QQuickActionDataProviderCommand";

oFF.QQuickActionDataProviderCommand.create = function(context, queryModel, name, commandName)
{
	let action = new oFF.QQuickActionDataProviderCommand();
	action.m_commandName = commandName;
	action.setupQuickAction(context, queryModel, name);
	return action;
};
oFF.QQuickActionDataProviderCommand.prototype.m_commandName = null;
oFF.QQuickActionDataProviderCommand.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickActionSimple.prototype.copyFromInternal.call( this , other, flags);
	this.m_commandName = other.m_commandName;
};
oFF.QQuickActionDataProviderCommand.prototype.getCommandName = function()
{
	return this.m_commandName;
};
oFF.QQuickActionDataProviderCommand.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_DATAPROVIDER_COMMAND;
};
oFF.QQuickActionDataProviderCommand.prototype.resolveDpCommandPair = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	let result = null;
	let parameters = oFF.XStream.of(this.getParameters()).map((parameter) => {
		return parameter.resolveOlapContextValue(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths);
	}).collect(oFF.XStreamCollector.toList());
	if (oFF.XStream.of(parameters).allMatch((param) => {
		return oFF.XCollectionUtils.size(param) === 1;
	}))
	{
		result = oFF.XPair.create(oFF.XStringValue.create(this.getCommandName()), oFF.XStream.of(parameters).collect(oFF.XStreamCollector.toListOfString((p) => {
			return oFF.XValueUtil.getString(p.get(0).getValue());
		})));
	}
	return result;
};

oFF.QQuickActionUrl = function() {};
oFF.QQuickActionUrl.prototype = new oFF.QQuickActionSimple();
oFF.QQuickActionUrl.prototype._ff_c = "QQuickActionUrl";

oFF.QQuickActionUrl.create = function(context, queryModel, name, text)
{
	let webActionLink = new oFF.QQuickActionUrl();
	webActionLink.setupQuickAction(context, queryModel, name);
	webActionLink.setText(text);
	return webActionLink;
};
oFF.QQuickActionUrl.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_URL;
};
oFF.QQuickActionUrl.prototype.resolveUri = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	let uri = null;
	let parameters = oFF.XStream.of(this.getParameters()).map((parameter) => {
		return parameter.resolveOlapContextValue(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths);
	}).collect(oFF.XStreamCollector.toList());
	if (oFF.XStream.of(parameters).allMatch((param) => {
		return oFF.XCollectionUtils.size(param) === 1;
	}))
	{
		let paramList = oFF.XList.create();
		for (let i = 0; i < parameters.size(); i++)
		{
			let parameterType = this.getParameters().get(i).getOlapComponentType();
			let paramString = oFF.XValueUtil.getString(parameters.get(i).get(0).getValue());
			if (parameterType === oFF.OlapComponentType.QUICK_ACTION_PARAMETER_URL_LITERAL)
			{
				paramList.add(paramString);
			}
			else
			{
				paramList.add(oFF.XHttpUtils.encodeURIComponent(paramString));
			}
		}
		uri = oFF.XUri.create();
		uri.setUrl(oFF.XCollectionUtils.join(paramList, ""));
	}
	return uri;
};

oFF.QQuickActionManager = function() {};
oFF.QQuickActionManager.prototype = new oFF.QModelComponentList();
oFF.QQuickActionManager.prototype._ff_c = "QQuickActionManager";

oFF.QQuickActionManager.create = function(context, queryModel, name, text)
{
	let actionLinkManager = new oFF.QQuickActionManager();
	actionLinkManager.setupOlapList(context, queryModel, false, name, oFF.XCollectionFactory.LINKED_MAP, false);
	actionLinkManager.setText(text);
	return actionLinkManager;
};
oFF.QQuickActionManager.prototype.addNewDataProviderQuickAction = function(name, text)
{
	let dataProviderQuickAction = oFF.QQuickActionDataProvider.create(this.getContext(), this.getQueryModelBase(), name, text);
	this.add(dataProviderQuickAction);
	return dataProviderQuickAction;
};
oFF.QQuickActionManager.prototype.addNewUrlQuickAction = function(name, text)
{
	let webActionLink = oFF.QQuickActionUrl.create(this.getContext(), this.getQueryModelBase(), name, text);
	this.add(webActionLink);
	return webActionLink;
};
oFF.QQuickActionManager.prototype.copyFromInternal = function(other, flags)
{
	oFF.QModelComponentList.prototype.copyFromInternal.call( this , other, flags);
	let originActionManager = other;
	let sizeList = originActionManager.size();
	if (sizeList > 0)
	{
		this.clear();
		for (let idxList = 0; idxList < sizeList; idxList++)
		{
			let original = originActionManager.get(idxList);
			let componentType = original.getOlapComponentType();
			if (componentType === oFF.OlapComponentType.QUICK_ACTION_URL)
			{
				this.addNewUrlQuickAction(original.getName(), original.getText()).copyFrom(original, flags);
			}
			else if (componentType === oFF.OlapComponentType.QUICK_ACTION_DATAPROVIDER)
			{
				this.addNewDataProviderQuickAction(original.getName(), original.getText()).copyFrom(original, flags);
			}
		}
	}
};
oFF.QQuickActionManager.prototype.getFieldsForDimension = function(dimension)
{
	let fields = oFF.XSetOfNameObject.create();
	oFF.XCollectionUtils.forEach(this, (action) => {
		action.extractFields(fields, dimension);
	});
	return fields;
};
oFF.QQuickActionManager.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_MANAGER;
};

oFF.QQuickActionSequence = function() {};
oFF.QQuickActionSequence.prototype = new oFF.QModelComponentList();
oFF.QQuickActionSequence.prototype._ff_c = "QQuickActionSequence";

oFF.QQuickActionSequence.prototype.extractFields = function(fields, dimension)
{
	oFF.XCollectionUtils.forEach(this, (action) => {
		action.extractFields(fields, dimension);
	});
};
oFF.QQuickActionSequence.prototype.getParameters = function()
{
	let parameters = oFF.XList.create();
	oFF.XCollectionUtils.forEach(this, (quickAction) => {
		oFF.XCollectionUtils.addAllIfNotPresent(parameters, quickAction.getParameters());
	});
	return parameters;
};
oFF.QQuickActionSequence.prototype.isApplicableSimpleParameters = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	return oFF.XStream.of(this).allMatch((subAction) => {
		return subAction.isApplicableSimpleParameters(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths);
	});
};

oFF.QQuickActionDataProvider = function() {};
oFF.QQuickActionDataProvider.prototype = new oFF.QQuickActionSequence();
oFF.QQuickActionDataProvider.prototype._ff_c = "QQuickActionDataProvider";

oFF.QQuickActionDataProvider.create = function(context, queryModel, name, text)
{
	let dataProviderQuickAction = new oFF.QQuickActionDataProvider();
	dataProviderQuickAction.setupOlapList(context, queryModel, false, name, oFF.XCollectionFactory.LINKED_MAP, false);
	dataProviderQuickAction.setText(text);
	return dataProviderQuickAction;
};
oFF.QQuickActionDataProvider.prototype.addNewDataProviderCommand = function(name, commandName)
{
	let dataProviderActionCommand = oFF.QQuickActionDataProviderCommand.create(this.getContext(), this.getQueryModelBase(), name, commandName);
	this.add(dataProviderActionCommand);
	return dataProviderActionCommand;
};
oFF.QQuickActionDataProvider.prototype.copyFromInternal = function(other, flags)
{
	oFF.QQuickActionSequence.prototype.copyFromInternal.call( this , other, flags);
	let orig = other;
	let sizeList = orig.size();
	if (sizeList > 0)
	{
		this.clear();
		for (let idxList = 0; idxList < sizeList; idxList++)
		{
			let original = orig.get(idxList);
			this.addNewDataProviderCommand(original.getName(), original.getCommandName()).copyFrom(original, flags);
		}
	}
};
oFF.QQuickActionDataProvider.prototype.getOlapComponentType = function()
{
	return oFF.OlapComponentType.QUICK_ACTION_DATAPROVIDER;
};
oFF.QQuickActionDataProvider.prototype.resolveDpCommandPairs = function(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths)
{
	return oFF.XStream.of(this).map((command) => {
		return command.resolveDpCommandPair(queryModel, axisType, dimensions, attributes, fields, rowDrillPaths, columnDrillPaths);
	}).collect(oFF.XStreamCollector.toList());
};

oFF.OlapReferenceModule = function() {};
oFF.OlapReferenceModule.prototype = new oFF.DfModule();
oFF.OlapReferenceModule.prototype._ff_c = "OlapReferenceModule";

oFF.OlapReferenceModule.s_module = null;
oFF.OlapReferenceModule.getInstance = function()
{
	if (oFF.isNull(oFF.OlapReferenceModule.s_module))
	{
		oFF.DfModule.checkInitialized(oFF.OlapApiModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.SpaceImplModule.getInstance());
		oFF.DfModule.checkInitialized(oFF.VisualizationUiModule.getInstance());
		oFF.OlapReferenceModule.s_module = oFF.DfModule.startExt(new oFF.OlapReferenceModule());
		oFF.RsVisualizationContainerFactory.setInstance(oFF.RsVizContainerFactoryImpl.create());
		oFF.RscResultsetCollectorFactory.setInstance(oFF.RscResultsetCollectorFactoryImpl.create());
		oFF.ReferenceGridFactory.setInstance(oFF.ReferenceGridFactoryImpl.create());
		oFF.FioriGridFactory.setInstance(oFF.FioriGridFactoryImpl.create());
		oFF.RsGoogleChartConfig.staticSetup();
		oFF.ChartRendererFactory.setInstance(oFF.ChartRendererFactoryImpl.create());
		oFF.KpiRendererFactory.setInstance(oFF.KpiRendererFactoryImpl.create());
		oFF.GridRendererFactory.setInstance(oFF.GridRendererFactoryImpl.create());
		oFF.TableClipboardHelperFactory.setInstance(oFF.SacTableClipboardHelperFactory.create());
		oFF.PivotTextWrappingUtil.staticSetup();
		oFF.RscMappingI18n.staticSetup();
		oFF.QFactory.setQuickActionManagerFactory((a, b) => {
			return oFF.QQuickActionManager.create(a, b, null, null);
		});
		oFF.QFactory.setOlapVisualizationTemplateManagerFactory((c) => {
			return oFF.OlapVisualizationTemplateManager.create(c);
		});
		oFF.DfModule.stopExt(oFF.OlapReferenceModule.s_module);
	}
	return oFF.OlapReferenceModule.s_module;
};
oFF.OlapReferenceModule.prototype.getName = function()
{
	return "ff4340.olap.reference";
};

oFF.OlapReferenceModule.getInstance();

return oFF;
} );